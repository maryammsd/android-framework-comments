graph [
  directed 1
  node [
    id 0
    label "java.util.Map"
    type "class"
    comment "&#10; * An object that maps keys to values.  A map cannot contain duplicate keys;&#10; * each key can map to at most one value.&#10; *&#10; * <p>This interface takes the place of the {@code Dictionary} class, which&#10; * was a totally abstract class rather than an interface.&#10; *&#10; * <p>The {@code Map} interface provides three <i>collection views</i>, which&#10; * allow a map's contents to be viewed as a set of keys, collection of values,&#10; * or set of key-value mappings.  The <i>order</i> of a map is defined as&#10; * the order in which the iterators on the map's collection views return their&#10; * elements.  Some map implementations, like the {@code TreeMap} class, make&#10; * specific guarantees as to their order; others, like the {@code HashMap}&#10; * class, do not.&#10; *&#10; * <p>Note: great care must be exercised if mutable objects are used as map&#10; * keys.  The behavior of a map is not specified if the value of an object is&#10; * changed in a manner that affects {@code equals} comparisons while the&#10; * object is a key in the map.  A special case of this prohibition is that it&#10; * is not permissible for a map to contain itself as a key.  While it is&#10; * permissible for a map to contain itself as a value, extreme caution is&#10; * advised: the {@code equals} and {@code hashCode} methods are no longer&#10; * well defined on such a map.&#10; *&#10; * <p>All general-purpose map implementation classes should provide two&#10; * &#34;standard&#34; constructors: a void (no arguments) constructor which creates an&#10; * empty map, and a constructor with a single argument of type {@code Map},&#10; * which creates a new map with the same key-value mappings as its argument.&#10; * In effect, the latter constructor allows the user to copy any map,&#10; * producing an equivalent map of the desired class.  There is no way to&#10; * enforce this recommendation (as interfaces cannot contain constructors) but&#10; * all of the general-purpose map implementations in the JDK comply.&#10; *&#10; * <p>The &#34;destructive&#34; methods contained in this interface, that is, the&#10; * methods that modify the map on which they operate, are specified to throw&#10; * {@code UnsupportedOperationException} if this map does not support the&#10; * operation.  If this is the case, these methods may, but are not required&#10; * to, throw an {@code UnsupportedOperationException} if the invocation would&#10; * have no effect on the map.  For example, invoking the {@link #putAll(Map)}&#10; * method on an unmodifiable map may, but is not required to, throw the&#10; * exception if the map whose mappings are to be &#34;superimposed&#34; is empty.&#10; *&#10; * <p>Some map implementations have restrictions on the keys and values they&#10; * may contain.  For example, some implementations prohibit null keys and&#10; * values, and some have restrictions on the types of their keys.  Attempting&#10; * to insert an ineligible key or value throws an unchecked exception,&#10; * typically {@code NullPointerException} or {@code ClassCastException}.&#10; * Attempting to query the presence of an ineligible key or value may throw an&#10; * exception, or it may simply return false; some implementations will exhibit&#10; * the former behavior and some will exhibit the latter.  More generally,&#10; * attempting an operation on an ineligible key or value whose completion&#10; * would not result in the insertion of an ineligible element into the map may&#10; * throw an exception or it may succeed, at the option of the implementation.&#10; * Such exceptions are marked as &#34;optional&#34; in the specification for this&#10; * interface.&#10; *&#10; * <p>Many methods in Collections Framework interfaces are defined&#10; * in terms of the {@link Object#equals(Object) equals} method.  For&#10; * example, the specification for the {@link #containsKey(Object)&#10; * containsKey(Object key)} method says: &#34;returns {@code true} if and&#10; * only if this map contains a mapping for a key {@code k} such that&#10; * {@code (key==null ? k==null : key.equals(k))}.&#34; This specification should&#10; * <i>not</i> be construed to imply that invoking {@code Map.containsKey}&#10; * with a non-null argument {@code key} will cause {@code key.equals(k)} to&#10; * be invoked for any key {@code k}.  Implementations are free to&#10; * implement optimizations whereby the {@code equals} invocation is avoided,&#10; * for example, by first comparing the hash codes of the two keys.  (The&#10; * {@link Object#hashCode()} specification guarantees that two objects with&#10; * unequal hash codes cannot be equal.)  More generally, implementations of&#10; * the various Collections Framework interfaces are free to take advantage of&#10; * the specified behavior of underlying {@link Object} methods wherever the&#10; * implementor deems it appropriate.&#10; *&#10; * <p>Some map operations which perform recursive traversal of the map may fail&#10; * with an exception for self-referential instances where the map directly or&#10; * indirectly contains itself. This includes the {@code clone()},&#10; * {@code equals()}, {@code hashCode()} and {@code toString()} methods.&#10; * Implementations may optionally handle the self-referential scenario, however&#10; * most current implementations do not do so.&#10; *&#10; * <h2><a id=&#34;unmodifiable&#34;>Unmodifiable Maps</a></h2>&#10; * <p>The {@link Map#of() Map.of},&#10; * {@link Map#ofEntries(Map.Entry...) Map.ofEntries}, and&#10; * {@link Map#copyOf Map.copyOf}&#10; * static factory methods provide a convenient way to create unmodifiable maps.&#10; * The {@code Map}&#10; * instances created by these methods have the following characteristics:&#10; *&#10; * <ul>&#10; * <li>They are <a href=&#34;Collection.html#unmodifiable&#34;><i>unmodifiable</i></a>. Keys and values&#10; * cannot be added, removed, or updated. Calling any mutator method on the Map&#10; * will always cause {@code UnsupportedOperationException} to be thrown.&#10; * However, if the contained keys or values are themselves mutable, this may cause the&#10; * Map to behave inconsistently or its contents to appear to change.&#10; * <li>They disallow {@code null} keys and values. Attempts to create them with&#10; * {@code null} keys or values result in {@code NullPointerException}.&#10; * <li>They are serializable if all keys and values are serializable.&#10; * <li>They reject duplicate keys at creation time. Duplicate keys&#10; * passed to a static factory method result in {@code IllegalArgumentException}.&#10; * <li>The iteration order of mappings is unspecified and is subject to change.&#10; * <li>They are <a href=&#34;../lang/doc-files/ValueBased.html&#34;>value-based</a>.&#10; * Programmers should treat instances that are {@linkplain #equals(Object) equal}&#10; * as interchangeable and should not use them for synchronization, or&#10; * unpredictable behavior may occur. For example, in a future release,&#10; * synchronization may fail. Callers should make no assumptions&#10; * about the identity of the returned instances. Factories are free to&#10; * create new instances or reuse existing ones.&#10; * <li>They are serialized as specified on the&#10; * <a href=&#34;{@docRoot}/serialized-form.html#java.util.CollSer&#34;>Serialized Form</a>&#10; * page.&#10; * </ul>&#10; *&#10; * <p>This interface is a member of the&#10; * <a href=&#34;{@docRoot}/java.base/java/util/package-summary.html#CollectionsFramework&#34;>&#10; * Java Collections Framework</a>.&#10; *&#10; * @param <K> the type of keys maintained by this map&#10; * @param <V> the type of mapped values&#10; *&#10; * @author  Josh Bloch&#10; * @see HashMap&#10; * @see TreeMap&#10; * @see Hashtable&#10; * @see SortedMap&#10; * @see Collection&#10; * @see Set&#10; * @since 1.2&#10; "
  ]
  node [
    id 1
    label " int size()"
    type "method"
    comment "&#10;     * Returns the number of elements in this list.  If this list contains&#10;     * more than {@code Integer.MAX_VALUE} elements, returns&#10;     * {@code Integer.MAX_VALUE}.&#10;     *&#10;     * @return the number of elements in this list&#10;     "
  ]
  node [
    id 2
    label " boolean isEmpty()"
    type "method"
    comment "&#10;     * Returns {@code true} if this character sequence is empty.&#10;     *&#10;     * @implSpec&#10;     * The default implementation returns the result of calling {@code length() == 0}.&#10;     *&#10;     * @return {@code true} if {@link #length()} is {@code 0}, otherwise&#10;     * {@code false}&#10;     *&#10;     * @since 15&#10;     "
  ]
  node [
    id 3
    label " boolean containsKey(Object key)"
    type "method"
    comment "&#10;     * Returns {@code true} if this map contains a mapping for the specified&#10;     * key.  More formally, returns {@code true} if and only if&#10;     * this map contains a mapping for a key {@code k} such that&#10;     * {@code Objects.equals(key, k)}.  (There can be&#10;     * at most one such mapping.)&#10;     *&#10;     * @param key key whose presence in this map is to be tested&#10;     * @return {@code true} if this map contains a mapping for the specified&#10;     *         key&#10;     * @throws ClassCastException if the key is of an inappropriate type for&#10;     *         this map&#10;     * (<a href=&#34;{@docRoot}/java.base/java/util/Collection.html#optional-restrictions&#34;>optional</a>)&#10;     * @throws NullPointerException if the specified key is null and this map&#10;     *         does not permit null keys&#10;     * (<a href=&#34;{@docRoot}/java.base/java/util/Collection.html#optional-restrictions&#34;>optional</a>)&#10;     "
  ]
  node [
    id 4
    label " boolean containsValue(Object value)"
    type "method"
    comment "&#10;     * Returns {@code true} if this map maps one or more keys to the&#10;     * specified value.  More formally, returns {@code true} if and only if&#10;     * this map contains at least one mapping to a value {@code v} such that&#10;     * {@code Objects.equals(value, v)}.  This operation&#10;     * will probably require time linear in the map size for most&#10;     * implementations of the {@code Map} interface.&#10;     *&#10;     * @param value value whose presence in this map is to be tested&#10;     * @return {@code true} if this map maps one or more keys to the&#10;     *         specified value&#10;     * @throws ClassCastException if the value is of an inappropriate type for&#10;     *         this map&#10;     * (<a href=&#34;{@docRoot}/java.base/java/util/Collection.html#optional-restrictions&#34;>optional</a>)&#10;     * @throws NullPointerException if the specified value is null and this&#10;     *         map does not permit null values&#10;     * (<a href=&#34;{@docRoot}/java.base/java/util/Collection.html#optional-restrictions&#34;>optional</a>)&#10;     "
  ]
  node [
    id 5
    label " V get(Object key)"
    type "method"
    comment "&#10;     * Returns the value to which the specified key is mapped,&#10;     * or {@code null} if this map contains no mapping for the key.&#10;     *&#10;     * <p>More formally, if this map contains a mapping from a key&#10;     * {@code k} to a value {@code v} such that&#10;     * {@code Objects.equals(key, k)},&#10;     * then this method returns {@code v}; otherwise&#10;     * it returns {@code null}.  (There can be at most one such mapping.)&#10;     *&#10;     * <p>If this map permits null values, then a return value of&#10;     * {@code null} does not <i>necessarily</i> indicate that the map&#10;     * contains no mapping for the key; it's also possible that the map&#10;     * explicitly maps the key to {@code null}.  The {@link #containsKey&#10;     * containsKey} operation may be used to distinguish these two cases.&#10;     *&#10;     * @param key the key whose associated value is to be returned&#10;     * @return the value to which the specified key is mapped, or&#10;     *         {@code null} if this map contains no mapping for the key&#10;     * @throws ClassCastException if the key is of an inappropriate type for&#10;     *         this map&#10;     * (<a href=&#34;{@docRoot}/java.base/java/util/Collection.html#optional-restrictions&#34;>optional</a>)&#10;     * @throws NullPointerException if the specified key is null and this map&#10;     *         does not permit null keys&#10;     * (<a href=&#34;{@docRoot}/java.base/java/util/Collection.html#optional-restrictions&#34;>optional</a>)&#10;     "
  ]
  node [
    id 6
    label "containsKeycontainsKey"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 7
    label " V put(K key, V value)"
    type "method"
    comment "&#10;     * Associates the specified value with the specified key in this map&#10;     * (optional operation).  If the map previously contained a mapping for&#10;     * the key, the old value is replaced by the specified value.  (A map&#10;     * {@code m} is said to contain a mapping for a key {@code k} if and only&#10;     * if {@link #containsKey(Object) m.containsKey(k)} would return&#10;     * {@code true}.)&#10;     *&#10;     * @param key key with which the specified value is to be associated&#10;     * @param value value to be associated with the specified key&#10;     * @return the previous value associated with {@code key}, or&#10;     *         {@code null} if there was no mapping for {@code key}.&#10;     *         (A {@code null} return can also indicate that the map&#10;     *         previously associated {@code null} with {@code key},&#10;     *         if the implementation supports {@code null} values.)&#10;     * @throws UnsupportedOperationException if the {@code put} operation&#10;     *         is not supported by this map&#10;     * @throws ClassCastException if the class of the specified key or value&#10;     *         prevents it from being stored in this map&#10;     * @throws NullPointerException if the specified key or value is null&#10;     *         and this map does not permit null keys or values&#10;     * @throws IllegalArgumentException if some property of the specified key&#10;     *         or value prevents it from being stored in this map&#10;     "
  ]
  node [
    id 8
    label "containsKey(Object)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 9
    label " V remove(Object key)"
    type "method"
    comment "&#10;     * Removes the mapping for a key from this map if it is present&#10;     * (optional operation).   More formally, if this map contains a mapping&#10;     * from key {@code k} to value {@code v} such that&#10;     * {@code Objects.equals(key, k)}, that mapping&#10;     * is removed.  (The map can contain at most one such mapping.)&#10;     *&#10;     * <p>Returns the value to which this map previously associated the key,&#10;     * or {@code null} if the map contained no mapping for the key.&#10;     *&#10;     * <p>If this map permits null values, then a return value of&#10;     * {@code null} does not <i>necessarily</i> indicate that the map&#10;     * contained no mapping for the key; it's also possible that the map&#10;     * explicitly mapped the key to {@code null}.&#10;     *&#10;     * <p>The map will not contain a mapping for the specified key once the&#10;     * call returns.&#10;     *&#10;     * @param key key whose mapping is to be removed from the map&#10;     * @return the previous value associated with {@code key}, or&#10;     *         {@code null} if there was no mapping for {@code key}.&#10;     * @throws UnsupportedOperationException if the {@code remove} operation&#10;     *         is not supported by this map&#10;     * @throws ClassCastException if the key is of an inappropriate type for&#10;     *         this map&#10;     * (<a href=&#34;{@docRoot}/java.base/java/util/Collection.html#optional-restrictions&#34;>optional</a>)&#10;     * @throws NullPointerException if the specified key is null and this&#10;     *         map does not permit null keys&#10;     * (<a href=&#34;{@docRoot}/java.base/java/util/Collection.html#optional-restrictions&#34;>optional</a>)&#10;     "
  ]
  node [
    id 10
    label " void putAll(Map<? extends K, ? extends V> m)"
    type "method"
    comment "&#10;     * Copies all of the mappings from the specified map to this map&#10;     * (optional operation).  The effect of this call is equivalent to that&#10;     * of calling {@link #put(Object,Object) put(k, v)} on this map once&#10;     * for each mapping from key {@code k} to value {@code v} in the&#10;     * specified map.  The behavior of this operation is undefined if the&#10;     * specified map is modified while the operation is in progress.&#10;     *&#10;     * @param m mappings to be stored in this map&#10;     * @throws UnsupportedOperationException if the {@code putAll} operation&#10;     *         is not supported by this map&#10;     * @throws ClassCastException if the class of a key or value in the&#10;     *         specified map prevents it from being stored in this map&#10;     * @throws NullPointerException if the specified map is null, or if&#10;     *         this map does not permit null keys or values, and the&#10;     *         specified map contains null keys or values&#10;     * @throws IllegalArgumentException if some property of a key or value in&#10;     *         the specified map prevents it from being stored in this map&#10;     "
  ]
  node [
    id 11
    label "put(Object"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 12
    label " void clear()"
    type "method"
    comment "&#10;     * Removes all of the elements from this set (optional operation).&#10;     * The set will be empty after this call returns.&#10;     *&#10;     * @throws UnsupportedOperationException if the {@code clear} method&#10;     *         is not supported by this set&#10;     "
  ]
  node [
    id 13
    label " Set<K> keySet()"
    type "method"
    comment "&#10;     * Returns a {@link Set} view of the keys contained in this map.&#10;     * The set is backed by the map, so changes to the map are&#10;     * reflected in the set, and vice-versa.  If the map is modified&#10;     * while an iteration over the set is in progress (except through&#10;     * the iterator's own {@code remove} operation), the results of&#10;     * the iteration are undefined.  The set supports element removal,&#10;     * which removes the corresponding mapping from the map, via the&#10;     * {@code Iterator.remove}, {@code Set.remove},&#10;     * {@code removeAll}, {@code retainAll}, and {@code clear}&#10;     * operations.  It does not support the {@code add} or {@code addAll}&#10;     * operations.&#10;     *&#10;     * @return a set view of the keys contained in this map&#10;     "
  ]
  node [
    id 14
    label "java.util.Set"
    type "class"
    comment ""
  ]
  node [
    id 15
    label " boolean contains(Object o)"
    type "method"
    comment "&#10;     * Returns {@code true} if this list contains the specified element.&#10;     * More formally, returns {@code true} if and only if this list contains&#10;     * at least one element {@code e} such that&#10;     * {@code Objects.equals(o, e)}.&#10;     *&#10;     * @param o element whose presence in this list is to be tested&#10;     * @return {@code true} if this list contains the specified element&#10;     * @throws ClassCastException if the type of the specified element&#10;     *         is incompatible with this list&#10;     * (<a href=&#34;Collection.html#optional-restrictions&#34;>optional</a>)&#10;     * @throws NullPointerException if the specified element is null and this&#10;     *         list does not permit null elements&#10;     * (<a href=&#34;Collection.html#optional-restrictions&#34;>optional</a>)&#10;     "
  ]
  node [
    id 16
    label " Iterator<E> iterator()"
    type "method"
    comment "&#10;     * Returns an iterator over the elements in this list in proper sequence.&#10;     *&#10;     * @return an iterator over the elements in this list in proper sequence&#10;     "
  ]
  node [
    id 17
    label " Object[] toArray()"
    type "method"
    comment "&#10;     * Returns an array containing the elements of this stream.&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>terminal&#10;     * operation</a>.&#10;     *&#10;     * @return an array, whose {@linkplain Class#getComponentType runtime component&#10;     * type} is {@code Object}, containing the elements of this stream&#10;     "
  ]
  node [
    id 18
    label " T[] toArray(T[] a)"
    type "method"
    comment "&#10;     * Returns an array containing all of the elements in this list in&#10;     * proper sequence (from first to last element); the runtime type of&#10;     * the returned array is that of the specified array.  If the list fits&#10;     * in the specified array, it is returned therein.  Otherwise, a new&#10;     * array is allocated with the runtime type of the specified array and&#10;     * the size of this list.&#10;     *&#10;     * <p>If the list fits in the specified array with room to spare (i.e.,&#10;     * the array has more elements than the list), the element in the array&#10;     * immediately following the end of the list is set to {@code null}.&#10;     * (This is useful in determining the length of the list <i>only</i> if&#10;     * the caller knows that the list does not contain any null elements.)&#10;     *&#10;     * <p>Like the {@link #toArray()} method, this method acts as bridge between&#10;     * array-based and collection-based APIs.  Further, this method allows&#10;     * precise control over the runtime type of the output array, and may,&#10;     * under certain circumstances, be used to save allocation costs.&#10;     *&#10;     * <p>Suppose {@code x} is a list known to contain only strings.&#10;     * The following code can be used to dump the list into a newly&#10;     * allocated array of {@code String}:&#10;     *&#10;     * <pre>{@code&#10;     *     String[] y = x.toArray(new String[0]);&#10;     * }</pre>&#10;     *&#10;     * Note that {@code toArray(new Object[0])} is identical in function to&#10;     * {@code toArray()}.&#10;     *&#10;     * @param a the array into which the elements of this list are to&#10;     *          be stored, if it is big enough; otherwise, a new array of the&#10;     *          same runtime type is allocated for this purpose.&#10;     * @return an array containing the elements of this list&#10;     * @throws ArrayStoreException if the runtime type of the specified array&#10;     *         is not a supertype of the runtime type of every element in&#10;     *         this list&#10;     * @throws NullPointerException if the specified array is null&#10;     "
  ]
  node [
    id 19
    label "toArray()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 20
    label " boolean add(E e)"
    type "method"
    comment "&#10;     * Appends the specified element to the end of this list (optional&#10;     * operation).&#10;     *&#10;     * <p>Lists that support this operation may place limitations on what&#10;     * elements may be added to this list.  In particular, some&#10;     * lists will refuse to add null elements, and others will impose&#10;     * restrictions on the type of elements that may be added.  List&#10;     * classes should clearly specify in their documentation any restrictions&#10;     * on what elements may be added.&#10;     *&#10;     * @param e element to be appended to this list&#10;     * @return {@code true} (as specified by {@link Collection#add})&#10;     * @throws UnsupportedOperationException if the {@code add} operation&#10;     *         is not supported by this list&#10;     * @throws ClassCastException if the class of the specified element&#10;     *         prevents it from being added to this list&#10;     * @throws NullPointerException if the specified element is null and this&#10;     *         list does not permit null elements&#10;     * @throws IllegalArgumentException if some property of this element&#10;     *         prevents it from being added to this list&#10;     "
  ]
  node [
    id 21
    label "add"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 22
    label "java.util.Collection"
    type "class"
    comment ""
  ]
  node [
    id 23
    label "toArray(IntFunction)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 24
    label "toArray(Object"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 25
    label " T[] toArray(IntFunction<T[]> generator)"
    type "method"
    comment "&#10;     * Returns an array containing all of the elements in this collection,&#10;     * using the provided {@code generator} function to allocate the returned array.&#10;     *&#10;     * <p>If this collection makes any guarantees as to what order its elements&#10;     * are returned by its iterator, this method must return the elements in&#10;     * the same order.&#10;     *&#10;     * @apiNote&#10;     * This method acts as a bridge between array-based and collection-based APIs.&#10;     * It allows creation of an array of a particular runtime type. Use&#10;     * {@link #toArray()} to create an array whose runtime type is {@code Object[]},&#10;     * or use {@link #toArray(Object[]) toArray(T[])} to reuse an existing array.&#10;     *&#10;     * <p>Suppose {@code x} is a collection known to contain only strings.&#10;     * The following code can be used to dump the collection into a newly&#10;     * allocated array of {@code String}:&#10;     *&#10;     * <pre>&#10;     *     String[] y = x.toArray(String[]::new);</pre>&#10;     *&#10;     * @implSpec&#10;     * The default implementation calls the generator function with zero&#10;     * and then passes the resulting array to {@link #toArray(Object[]) toArray(T[])}.&#10;     *&#10;     * @param <T> the component type of the array to contain the collection&#10;     * @param generator a function which produces a new array of the desired&#10;     *                  type and the provided length&#10;     * @return an array containing all of the elements in this collection&#10;     * @throws ArrayStoreException if the runtime type of any element in this&#10;     *         collection is not assignable to the {@linkplain Class#getComponentType&#10;     *         runtime component type} of the generated array&#10;     * @throws NullPointerException if the generator function is null&#10;     * @since 11&#10;     "
  ]
  node [
    id 26
    label " boolean remove(Object o)"
    type "method"
    comment "&#10;     * Removes the specified element from this set if it is present&#10;     * (optional operation).  More formally, removes an element {@code e}&#10;     * such that&#10;     * {@code Objects.equals(o, e)}, if&#10;     * this set contains such an element.  Returns {@code true} if this set&#10;     * contained the element (or equivalently, if this set changed as a&#10;     * result of the call).  (This set will not contain the element once the&#10;     * call returns.)&#10;     *&#10;     * @param o object to be removed from this set, if present&#10;     * @return {@code true} if this set contained the specified element&#10;     * @throws ClassCastException if the type of the specified element&#10;     *         is incompatible with this set&#10;     * (<a href=&#34;Collection.html#optional-restrictions&#34;>optional</a>)&#10;     * @throws NullPointerException if the specified element is null and this&#10;     *         set does not permit null elements&#10;     * (<a href=&#34;Collection.html#optional-restrictions&#34;>optional</a>)&#10;     * @throws UnsupportedOperationException if the {@code remove} operation&#10;     *         is not supported by this set&#10;     "
  ]
  node [
    id 27
    label " boolean containsAll(Collection<?> c)"
    type "method"
    comment "&#10;     * Returns {@code true} if this set contains all of the elements of the&#10;     * specified collection.  If the specified collection is also a set, this&#10;     * method returns {@code true} if it is a <i>subset</i> of this set.&#10;     *&#10;     * @param  c collection to be checked for containment in this set&#10;     * @return {@code true} if this set contains all of the elements of the&#10;     *         specified collection&#10;     * @throws ClassCastException if the types of one or more elements&#10;     *         in the specified collection are incompatible with this&#10;     *         set&#10;     * (<a href=&#34;Collection.html#optional-restrictions&#34;>optional</a>)&#10;     * @throws NullPointerException if the specified collection contains one&#10;     *         or more null elements and this set does not permit null&#10;     *         elements&#10;     * (<a href=&#34;Collection.html#optional-restrictions&#34;>optional</a>),&#10;     *         or if the specified collection is null&#10;     * @see    #contains(Object)&#10;     "
  ]
  node [
    id 28
    label " boolean addAll(Collection<? extends E> c)"
    type "method"
    comment "&#10;     * Adds all of the elements in the specified collection to this set if&#10;     * they're not already present (optional operation).  If the specified&#10;     * collection is also a set, the {@code addAll} operation effectively&#10;     * modifies this set so that its value is the <i>union</i> of the two&#10;     * sets.  The behavior of this operation is undefined if the specified&#10;     * collection is modified while the operation is in progress.&#10;     *&#10;     * @param  c collection containing elements to be added to this set&#10;     * @return {@code true} if this set changed as a result of the call&#10;     *&#10;     * @throws UnsupportedOperationException if the {@code addAll} operation&#10;     *         is not supported by this set&#10;     * @throws ClassCastException if the class of an element of the&#10;     *         specified collection prevents it from being added to this set&#10;     * @throws NullPointerException if the specified collection contains one&#10;     *         or more null elements and this set does not permit null&#10;     *         elements, or if the specified collection is null&#10;     * @throws IllegalArgumentException if some property of an element of the&#10;     *         specified collection prevents it from being added to this set&#10;     * @see #add(Object)&#10;     "
  ]
  node [
    id 29
    label " boolean removeAll(Collection<?> c)"
    type "method"
    comment "&#10;     * Removes from this set all of its elements that are contained in the&#10;     * specified collection (optional operation).  If the specified&#10;     * collection is also a set, this operation effectively modifies this&#10;     * set so that its value is the <i>asymmetric set difference</i> of&#10;     * the two sets.&#10;     *&#10;     * @param  c collection containing elements to be removed from this set&#10;     * @return {@code true} if this set changed as a result of the call&#10;     * @throws UnsupportedOperationException if the {@code removeAll} operation&#10;     *         is not supported by this set&#10;     * @throws ClassCastException if the class of an element of this set&#10;     *         is incompatible with the specified collection&#10;     * (<a href=&#34;Collection.html#optional-restrictions&#34;>optional</a>)&#10;     * @throws NullPointerException if this set contains a null element and the&#10;     *         specified collection does not permit null elements&#10;     *         (<a href=&#34;Collection.html#optional-restrictions&#34;>optional</a>),&#10;     *         or if the specified collection is null&#10;     * @see #remove(Object)&#10;     * @see #contains(Object)&#10;     "
  ]
  node [
    id 30
    label " boolean removeIf(Predicate<? super E> filter)"
    type "method"
    comment "&#10;     * Removes all of the elements of this collection that satisfy the given&#10;     * predicate.  Errors or runtime exceptions thrown during iteration or by&#10;     * the predicate are relayed to the caller.&#10;     *&#10;     * @implSpec&#10;     * The default implementation traverses all elements of the collection using&#10;     * its {@link #iterator}.  Each matching element is removed using&#10;     * {@link Iterator#remove()}.  If the collection's iterator does not&#10;     * support removal then an {@code UnsupportedOperationException} will be&#10;     * thrown on the first matching element.&#10;     *&#10;     * @param filter a predicate which returns {@code true} for elements to be&#10;     *        removed&#10;     * @return {@code true} if any elements were removed&#10;     * @throws NullPointerException if the specified filter is null&#10;     * @throws UnsupportedOperationException if elements cannot be removed&#10;     *         from this collection.  Implementations may throw this exception if a&#10;     *         matching element cannot be removed or if, in general, removal is not&#10;     *         supported.&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 31
    label "iterator"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 32
    label "remove()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 33
    label "java.util.Iterator"
    type "class"
    comment "&#10; * An iterator over a collection.  {@code Iterator} takes the place of&#10; * {@link Enumeration} in the Java Collections Framework.  Iterators&#10; * differ from enumerations in two ways:&#10; *&#10; * <ul>&#10; *      <li> Iterators allow the caller to remove elements from the&#10; *           underlying collection during the iteration with well-defined&#10; *           semantics.&#10; *      <li> Method names have been improved.&#10; * </ul>&#10; *&#10; * <p>This interface is a member of the&#10; * <a href=&#34;{@docRoot}/java.base/java/util/package-summary.html#CollectionsFramework&#34;>&#10; * Java Collections Framework</a>.&#10; *&#10; * @apiNote&#10; * An {@link Enumeration} can be converted into an {@code Iterator} by&#10; * using the {@link Enumeration#asIterator} method.&#10; *&#10; * @param <E> the type of elements returned by this iterator&#10; *&#10; * @author  Josh Bloch&#10; * @see Collection&#10; * @see ListIterator&#10; * @see Iterable&#10; * @since 1.2&#10; "
  ]
  node [
    id 34
    label " boolean hasNext()"
    type "method"
    comment "&#10;     * Returns {@code true} if this list iterator has more elements when&#10;     * traversing the list in the forward direction. (In other words,&#10;     * returns {@code true} if {@link #next} would return an element rather&#10;     * than throwing an exception.)&#10;     *&#10;     * @return {@code true} if the list iterator has more elements when&#10;     *         traversing the list in the forward direction&#10;     "
  ]
  node [
    id 35
    label "next"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 36
    label " E next()"
    type "method"
    comment "&#10;     * Returns the next element in the list and advances the cursor position.&#10;     * This method may be called repeatedly to iterate through the list,&#10;     * or intermixed with calls to {@link #previous} to go back and forth.&#10;     * (Note that alternating calls to {@code next} and {@code previous}&#10;     * will return the same element repeatedly.)&#10;     *&#10;     * @return the next element in the list&#10;     * @throws NoSuchElementException if the iteration has no next element&#10;     "
  ]
  node [
    id 37
    label " void remove()"
    type "method"
    comment "&#10;     * Removes from the list the last element that was returned by {@link&#10;     * #next} or {@link #previous} (optional operation).  This call can&#10;     * only be made once per call to {@code next} or {@code previous}.&#10;     * It can be made only if {@link #add} has not been&#10;     * called after the last call to {@code next} or {@code previous}.&#10;     *&#10;     * @throws UnsupportedOperationException if the {@code remove}&#10;     *         operation is not supported by this list iterator&#10;     * @throws IllegalStateException if neither {@code next} nor&#10;     *         {@code previous} have been called, or {@code remove} or&#10;     *         {@code add} have been called after the last call to&#10;     *         {@code next} or {@code previous}&#10;     "
  ]
  node [
    id 38
    label "forEachRemaining"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 39
    label "UnsupportedOperationException"
  ]
  node [
    id 40
    label " void forEachRemaining(Consumer<? super E> action)"
    type "method"
    comment "&#10;     * Performs the given action for each remaining element until all elements&#10;     * have been processed or the action throws an exception.  Actions are&#10;     * performed in the order of iteration, if that order is specified.&#10;     * Exceptions thrown by the action are relayed to the caller.&#10;     * <p>&#10;     * The behavior of an iterator is unspecified if the action modifies the&#10;     * collection in any way (even by calling the {@link #remove remove} method&#10;     * or other mutator methods of {@code Iterator} subtypes),&#10;     * unless an overriding class has specified a concurrent modification policy.&#10;     * <p>&#10;     * Subsequent behavior of an iterator is unspecified if the action throws an&#10;     * exception.&#10;     *&#10;     * @implSpec&#10;     * <p>The default implementation behaves as if:&#10;     * <pre>{@code&#10;     *     while (hasNext())&#10;     *         action.accept(next());&#10;     * }</pre>&#10;     *&#10;     * @param action The action to be performed for each element&#10;     * @throws NullPointerException if the specified action is null&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 41
    label "remove"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 42
    label " boolean retainAll(Collection<?> c)"
    type "method"
    comment "&#10;     * Retains only the elements in this set that are contained in the&#10;     * specified collection (optional operation).  In other words, removes&#10;     * from this set all of its elements that are not contained in the&#10;     * specified collection.  If the specified collection is also a set, this&#10;     * operation effectively modifies this set so that its value is the&#10;     * <i>intersection</i> of the two sets.&#10;     *&#10;     * @param  c collection containing elements to be retained in this set&#10;     * @return {@code true} if this set changed as a result of the call&#10;     * @throws UnsupportedOperationException if the {@code retainAll} operation&#10;     *         is not supported by this set&#10;     * @throws ClassCastException if the class of an element of this set&#10;     *         is incompatible with the specified collection&#10;     * (<a href=&#34;Collection.html#optional-restrictions&#34;>optional</a>)&#10;     * @throws NullPointerException if this set contains a null element and the&#10;     *         specified collection does not permit null elements&#10;     *         (<a href=&#34;Collection.html#optional-restrictions&#34;>optional</a>),&#10;     *         or if the specified collection is null&#10;     * @see #remove(Object)&#10;     "
  ]
  node [
    id 43
    label " boolean equals(Object o)"
    type "method"
    comment "&#10;     * Compares the specified object with this map for equality.  Returns&#10;     * {@code true} if the given object is also a map and the two maps&#10;     * represent the same mappings.  More formally, two maps {@code m1} and&#10;     * {@code m2} represent the same mappings if&#10;     * {@code m1.entrySet().equals(m2.entrySet())}.  This ensures that the&#10;     * {@code equals} method works properly across different implementations&#10;     * of the {@code Map} interface.&#10;     *&#10;     * @param o object to be compared for equality with this map&#10;     * @return {@code true} if the specified object is equal to this map&#10;     "
  ]
  node [
    id 44
    label " int hashCode()"
    type "method"
    comment "&#10;     * Returns the hash code value for this map.  The hash code of a map is&#10;     * defined to be the sum of the hash codes of each entry in the map's&#10;     * {@code entrySet()} view.  This ensures that {@code m1.equals(m2)}&#10;     * implies that {@code m1.hashCode()==m2.hashCode()} for any two maps&#10;     * {@code m1} and {@code m2}, as required by the general contract of&#10;     * {@link Object#hashCode}.&#10;     *&#10;     * @return the hash code value for this map&#10;     * @see Map.Entry#hashCode()&#10;     * @see Object#equals(Object)&#10;     * @see #equals(Object)&#10;     "
  ]
  node [
    id 45
    label " Spliterator<E> spliterator()"
    type "method"
    comment "&#10;     * Creates a {@code Spliterator} over the elements in this set.&#10;     *&#10;     * <p>The {@code Spliterator} reports {@link Spliterator#DISTINCT}.&#10;     * Implementations should document the reporting of additional&#10;     * characteristic values.&#10;     *&#10;     * @implSpec&#10;     * The default implementation creates a&#10;     * <em><a href=&#34;Spliterator.html#binding&#34;>late-binding</a></em> spliterator&#10;     * from the set's {@code Iterator}.  The spliterator inherits the&#10;     * <em>fail-fast</em> properties of the set's iterator.&#10;     * <p>&#10;     * The created {@code Spliterator} additionally reports&#10;     * {@link Spliterator#SIZED}.&#10;     *&#10;     * @implNote&#10;     * The created {@code Spliterator} additionally reports&#10;     * {@link Spliterator#SUBSIZED}.&#10;     *&#10;     * @return a {@code Spliterator} over the elements in this set&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 46
    label "SIZED"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 47
    label "java.util.Spliterator"
    type "class"
    comment "&#10; * An object for traversing and partitioning elements of a source.  The source&#10; * of elements covered by a Spliterator could be, for example, an array, a&#10; * {@link Collection}, an IO channel, or a generator function.&#10; *&#10; * <p>A Spliterator may traverse elements individually ({@link&#10; * #tryAdvance tryAdvance()}) or sequentially in bulk&#10; * ({@link #forEachRemaining forEachRemaining()}).&#10; *&#10; * <p>A Spliterator may also partition off some of its elements (using&#10; * {@link #trySplit}) as another Spliterator, to be used in&#10; * possibly-parallel operations.  Operations using a Spliterator that&#10; * cannot split, or does so in a highly imbalanced or inefficient&#10; * manner, are unlikely to benefit from parallelism.  Traversal&#10; * and splitting exhaust elements; each Spliterator is useful for only a single&#10; * bulk computation.&#10; *&#10; * <p>A Spliterator also reports a set of {@link #characteristics()} of its&#10; * structure, source, and elements from among {@link #ORDERED},&#10; * {@link #DISTINCT}, {@link #SORTED}, {@link #SIZED}, {@link #NONNULL},&#10; * {@link #IMMUTABLE}, {@link #CONCURRENT}, and {@link #SUBSIZED}. These may&#10; * be employed by Spliterator clients to control, specialize or simplify&#10; * computation.  For example, a Spliterator for a {@link Collection} would&#10; * report {@code SIZED}, a Spliterator for a {@link Set} would report&#10; * {@code DISTINCT}, and a Spliterator for a {@link SortedSet} would also&#10; * report {@code SORTED}.  Characteristics are reported as a simple unioned bit&#10; * set.&#10; *&#10; * Some characteristics additionally constrain method behavior; for example if&#10; * {@code ORDERED}, traversal methods must conform to their documented ordering.&#10; * New characteristics may be defined in the future, so implementors should not&#10; * assign meanings to unlisted values.&#10; *&#10; * <p><a id=&#34;binding&#34;>A Spliterator that does not report {@code IMMUTABLE} or&#10; * {@code CONCURRENT} is expected to have a documented policy concerning:&#10; * when the spliterator <em>binds</em> to the element source; and detection of&#10; * structural interference of the element source detected after binding.</a>  A&#10; * <em>late-binding</em> Spliterator binds to the source of elements at the&#10; * point of first traversal, first split, or first query for estimated size,&#10; * rather than at the time the Spliterator is created.  A Spliterator that is&#10; * not <em>late-binding</em> binds to the source of elements at the point of&#10; * construction or first invocation of any method.  Modifications made to the&#10; * source prior to binding are reflected when the Spliterator is traversed.&#10; * After binding a Spliterator should, on a best-effort basis, throw&#10; * {@link ConcurrentModificationException} if structural interference is&#10; * detected.  Spliterators that do this are called <em>fail-fast</em>.  The&#10; * bulk traversal method ({@link #forEachRemaining forEachRemaining()}) of a&#10; * Spliterator may optimize traversal and check for structural interference&#10; * after all elements have been traversed, rather than checking per-element and&#10; * failing immediately.&#10; *&#10; * <p>Spliterators can provide an estimate of the number of remaining elements&#10; * via the {@link #estimateSize} method.  Ideally, as reflected in characteristic&#10; * {@link #SIZED}, this value corresponds exactly to the number of elements&#10; * that would be encountered in a successful traversal.  However, even when not&#10; * exactly known, an estimated value may still be useful to operations&#10; * being performed on the source, such as helping to determine whether it is&#10; * preferable to split further or traverse the remaining elements sequentially.&#10; *&#10; * <p>Despite their obvious utility in parallel algorithms, spliterators are not&#10; * expected to be thread-safe; instead, implementations of parallel algorithms&#10; * using spliterators should ensure that the spliterator is only used by one&#10; * thread at a time.  This is generally easy to attain via <em>serial&#10; * thread-confinement</em>, which often is a natural consequence of typical&#10; * parallel algorithms that work by recursive decomposition.  A thread calling&#10; * {@link #trySplit()} may hand over the returned Spliterator to another thread,&#10; * which in turn may traverse or further split that Spliterator.  The behaviour&#10; * of splitting and traversal is undefined if two or more threads operate&#10; * concurrently on the same spliterator.  If the original thread hands a&#10; * spliterator off to another thread for processing, it is best if that handoff&#10; * occurs before any elements are consumed with {@link #tryAdvance(Consumer)&#10; * tryAdvance()}, as certain guarantees (such as the accuracy of&#10; * {@link #estimateSize()} for {@code SIZED} spliterators) are only valid before&#10; * traversal has begun.&#10; *&#10; * <p>Primitive subtype specializations of {@code Spliterator} are provided for&#10; * {@link OfInt int}, {@link OfLong long}, and {@link OfDouble double} values.&#10; * The subtype default implementations of&#10; * {@link Spliterator#tryAdvance(java.util.function.Consumer)}&#10; * and {@link Spliterator#forEachRemaining(java.util.function.Consumer)} box&#10; * primitive values to instances of their corresponding wrapper class.  Such&#10; * boxing may undermine any performance advantages gained by using the primitive&#10; * specializations.  To avoid boxing, the corresponding primitive-based methods&#10; * should be used.  For example,&#10; * {@link Spliterator.OfInt#tryAdvance(java.util.function.IntConsumer)}&#10; * and {@link Spliterator.OfInt#forEachRemaining(java.util.function.IntConsumer)}&#10; * should be used in preference to&#10; * {@link Spliterator.OfInt#tryAdvance(java.util.function.Consumer)} and&#10; * {@link Spliterator.OfInt#forEachRemaining(java.util.function.Consumer)}.&#10; * Traversal of primitive values using boxing-based methods&#10; * {@link #tryAdvance tryAdvance()} and&#10; * {@link #forEachRemaining(java.util.function.Consumer) forEachRemaining()}&#10; * does not affect the order in which the values, transformed to boxed values,&#10; * are encountered.&#10; *&#10; * @apiNote&#10; * <p>Spliterators, like {@code Iterator}s, are for traversing the elements of&#10; * a source.  The {@code Spliterator} API was designed to support efficient&#10; * parallel traversal in addition to sequential traversal, by supporting&#10; * decomposition as well as single-element iteration.  In addition, the&#10; * protocol for accessing elements via a Spliterator is designed to impose&#10; * smaller per-element overhead than {@code Iterator}, and to avoid the inherent&#10; * race involved in having separate methods for {@code hasNext()} and&#10; * {@code next()}.&#10; *&#10; * <p>For mutable sources, arbitrary and non-deterministic behavior may occur if&#10; * the source is structurally interfered with (elements added, replaced, or&#10; * removed) between the time that the Spliterator binds to its data source and&#10; * the end of traversal.  For example, such interference will produce arbitrary,&#10; * non-deterministic results when using the {@code java.util.stream} framework.&#10; *&#10; * <p>Structural interference of a source can be managed in the following ways&#10; * (in approximate order of decreasing desirability):&#10; * <ul>&#10; * <li>The source cannot be structurally interfered with.&#10; * <br>For example, an instance of&#10; * {@link java.util.concurrent.CopyOnWriteArrayList} is an immutable source.&#10; * A Spliterator created from the source reports a characteristic of&#10; * {@code IMMUTABLE}.</li>&#10; * <li>The source manages concurrent modifications.&#10; * <br>For example, a key set of a {@link java.util.concurrent.ConcurrentHashMap}&#10; * is a concurrent source.  A Spliterator created from the source reports a&#10; * characteristic of {@code CONCURRENT}.</li>&#10; * <li>The mutable source provides a late-binding and fail-fast Spliterator.&#10; * <br>Late binding narrows the window during which interference can affect&#10; * the calculation; fail-fast detects, on a best-effort basis, that structural&#10; * interference has occurred after traversal has commenced and throws&#10; * {@link ConcurrentModificationException}.  For example, {@link ArrayList},&#10; * and many other non-concurrent {@code Collection} classes in the JDK, provide&#10; * a late-binding, fail-fast spliterator.</li>&#10; * <li>The mutable source provides a non-late-binding but fail-fast Spliterator.&#10; * <br>The source increases the likelihood of throwing&#10; * {@code ConcurrentModificationException} since the window of potential&#10; * interference is larger.</li>&#10; * <li>The mutable source provides a late-binding and non-fail-fast Spliterator.&#10; * <br>The source risks arbitrary, non-deterministic behavior after traversal&#10; * has commenced since interference is not detected.&#10; * </li>&#10; * <li>The mutable source provides a non-late-binding and non-fail-fast&#10; * Spliterator.&#10; * <br>The source increases the risk of arbitrary, non-deterministic behavior&#10; * since non-detected interference may occur after construction.&#10; * </li>&#10; * </ul>&#10; *&#10; * <p><b>Example.</b> Here is a class (not a very useful one, except&#10; * for illustration) that maintains an array in which the actual data&#10; * are held in even locations, and unrelated tag data are held in odd&#10; * locations. Its Spliterator ignores the tags.&#10; *&#10; * <pre> {@code&#10; * class TaggedArray<T> {&#10; *   private final Object[] elements; // immutable after construction&#10; *   TaggedArray(T[] data, Object[] tags) {&#10; *     int size = data.length;&#10; *     if (tags.length != size) throw new IllegalArgumentException();&#10; *     this.elements = new Object[2 * size];&#10; *     for (int i = 0, j = 0; i < size; ++i) {&#10; *       elements[j++] = data[i];&#10; *       elements[j++] = tags[i];&#10; *     }&#10; *   }&#10; *&#10; *   public Spliterator<T> spliterator() {&#10; *     return new TaggedArraySpliterator<>(elements, 0, elements.length);&#10; *   }&#10; *&#10; *   static class TaggedArraySpliterator<T> implements Spliterator<T> {&#10; *     private final Object[] array;&#10; *     private int origin; // current index, advanced on split or traversal&#10; *     private final int fence; // one past the greatest index&#10; *&#10; *     TaggedArraySpliterator(Object[] array, int origin, int fence) {&#10; *       this.array = array; this.origin = origin; this.fence = fence;&#10; *     }&#10; *&#10; *     public void forEachRemaining(Consumer<? super T> action) {&#10; *       for (; origin < fence; origin += 2)&#10; *         action.accept((T) array[origin]);&#10; *     }&#10; *&#10; *     public boolean tryAdvance(Consumer<? super T> action) {&#10; *       if (origin < fence) {&#10; *         action.accept((T) array[origin]);&#10; *         origin += 2;&#10; *         return true;&#10; *       }&#10; *       else // cannot advance&#10; *         return false;&#10; *     }&#10; *&#10; *     public Spliterator<T> trySplit() {&#10; *       int lo = origin; // divide range in half&#10; *       int mid = ((lo + fence) >>> 1) &#38; ~1; // force midpoint to be even&#10; *       if (lo < mid) { // split out left half&#10; *         origin = mid; // reset this Spliterator's origin&#10; *         return new TaggedArraySpliterator<>(array, lo, mid);&#10; *       }&#10; *       else       // too small to split&#10; *         return null;&#10; *     }&#10; *&#10; *     public long estimateSize() {&#10; *       return (long)((fence - origin) / 2);&#10; *     }&#10; *&#10; *     public int characteristics() {&#10; *       return ORDERED | SIZED | IMMUTABLE | SUBSIZED;&#10; *     }&#10; *   }&#10; * }}</pre>&#10; *&#10; * <p>As an example how a parallel computation framework, such as the&#10; * {@code java.util.stream} package, would use Spliterator in a parallel&#10; * computation, here is one way to implement an associated parallel forEach,&#10; * that illustrates the primary usage idiom of splitting off subtasks until&#10; * the estimated amount of work is small enough to perform&#10; * sequentially. Here we assume that the order of processing across&#10; * subtasks doesn't matter; different (forked) tasks may further split&#10; * and process elements concurrently in undetermined order.  This&#10; * example uses a {@link java.util.concurrent.CountedCompleter};&#10; * similar usages apply to other parallel task constructions.&#10; *&#10; * <pre>{@code&#10; * static <T> void parEach(TaggedArray<T> a, Consumer<T> action) {&#10; *   Spliterator<T> s = a.spliterator();&#10; *   long targetBatchSize = s.estimateSize() / (ForkJoinPool.getCommonPoolParallelism() * 8);&#10; *   new ParEach(null, s, action, targetBatchSize).invoke();&#10; * }&#10; *&#10; * static class ParEach<T> extends CountedCompleter<Void> {&#10; *   final Spliterator<T> spliterator;&#10; *   final Consumer<T> action;&#10; *   final long targetBatchSize;&#10; *&#10; *   ParEach(ParEach<T> parent, Spliterator<T> spliterator,&#10; *           Consumer<T> action, long targetBatchSize) {&#10; *     super(parent);&#10; *     this.spliterator = spliterator; this.action = action;&#10; *     this.targetBatchSize = targetBatchSize;&#10; *   }&#10; *&#10; *   public void compute() {&#10; *     Spliterator<T> sub;&#10; *     while (spliterator.estimateSize() > targetBatchSize &#38;&#38;&#10; *            (sub = spliterator.trySplit()) != null) {&#10; *       addToPendingCount(1);&#10; *       new ParEach<>(this, sub, action, targetBatchSize).fork();&#10; *     }&#10; *     spliterator.forEachRemaining(action);&#10; *     propagateCompletion();&#10; *   }&#10; * }}</pre>&#10; *&#10; * @implNote&#10; * If the boolean system property {@systemProperty org.openjdk.java.util.stream.tripwire}&#10; * is set to {@code true} then diagnostic warnings are reported if boxing of&#10; * primitive values occur when operating on primitive subtype specializations.&#10; *&#10; * @param <T> the type of elements returned by this Spliterator&#10; *&#10; * @see Collection&#10; * @since 1.8&#10; "
  ]
  node [
    id 48
    label " boolean tryAdvance(Consumer<? super T> action)"
    type "method"
    comment "&#10;     * If a remaining element exists, performs the given action on it,&#10;     * returning {@code true}; else returns {@code false}.  If this&#10;     * Spliterator is {@link #ORDERED} the action is performed on the&#10;     * next element in encounter order.  Exceptions thrown by the&#10;     * action are relayed to the caller.&#10;     * <p>&#10;     * Subsequent behavior of a spliterator is unspecified if the action throws&#10;     * an exception.&#10;     *&#10;     * @param action The action&#10;     * @return {@code false} if no remaining elements existed&#10;     * upon entry to this method, else {@code true}.&#10;     * @throws NullPointerException if the specified action is null&#10;     "
  ]
  node [
    id 49
    label "ORDERED"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 50
    label " void forEachRemaining(Consumer<? super T> action)"
    type "method"
    comment "&#10;     * Performs the given action for each remaining element, sequentially in&#10;     * the current thread, until all elements have been processed or the action&#10;     * throws an exception.  If this Spliterator is {@link #ORDERED}, actions&#10;     * are performed in encounter order.  Exceptions thrown by the action&#10;     * are relayed to the caller.&#10;     * <p>&#10;     * Subsequent behavior of a spliterator is unspecified if the action throws&#10;     * an exception.&#10;     *&#10;     * @implSpec&#10;     * The default implementation repeatedly invokes {@link #tryAdvance} until&#10;     * it returns {@code false}.  It should be overridden whenever possible.&#10;     *&#10;     * @param action The action&#10;     * @throws NullPointerException if the specified action is null&#10;     "
  ]
  node [
    id 51
    label "tryAdvance"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 52
    label " Spliterator<T> trySplit()"
    type "method"
    comment "&#10;     * If this spliterator can be partitioned, returns a Spliterator&#10;     * covering elements, that will, upon return from this method, not&#10;     * be covered by this Spliterator.&#10;     *&#10;     * <p>If this Spliterator is {@link #ORDERED}, the returned Spliterator&#10;     * must cover a strict prefix of the elements.&#10;     *&#10;     * <p>Unless this Spliterator covers an infinite number of elements,&#10;     * repeated calls to {@code trySplit()} must eventually return {@code null}.&#10;     * Upon non-null return:&#10;     * <ul>&#10;     * <li>the value reported for {@code estimateSize()} before splitting,&#10;     * must, after splitting, be greater than or equal to {@code estimateSize()}&#10;     * for this and the returned Spliterator; and</li>&#10;     * <li>if this Spliterator is {@code SUBSIZED}, then {@code estimateSize()}&#10;     * for this spliterator before splitting must be equal to the sum of&#10;     * {@code estimateSize()} for this and the returned Spliterator after&#10;     * splitting.</li>&#10;     * </ul>&#10;     *&#10;     * <p>This method may return {@code null} for any reason,&#10;     * including emptiness, inability to split after traversal has&#10;     * commenced, data structure constraints, and efficiency&#10;     * considerations.&#10;     *&#10;     * @apiNote&#10;     * An ideal {@code trySplit} method efficiently (without&#10;     * traversal) divides its elements exactly in half, allowing&#10;     * balanced parallel computation.  Many departures from this ideal&#10;     * remain highly effective; for example, only approximately&#10;     * splitting an approximately balanced tree, or for a tree in&#10;     * which leaf nodes may contain either one or two elements,&#10;     * failing to further split these nodes.  However, large&#10;     * deviations in balance and/or overly inefficient {@code&#10;     * trySplit} mechanics typically result in poor parallel&#10;     * performance.&#10;     *&#10;     * @return a {@code Spliterator} covering some portion of the&#10;     * elements, or {@code null} if this spliterator cannot be split&#10;     "
  ]
  node [
    id 53
    label " long estimateSize()"
    type "method"
    comment "&#10;     * Returns an estimate of the number of elements that would be&#10;     * encountered by a {@link #forEachRemaining} traversal, or returns {@link&#10;     * Long#MAX_VALUE} if infinite, unknown, or too expensive to compute.&#10;     *&#10;     * <p>If this Spliterator is {@link #SIZED} and has not yet been partially&#10;     * traversed or split, or this Spliterator is {@link #SUBSIZED} and has&#10;     * not yet been partially traversed, this estimate must be an accurate&#10;     * count of elements that would be encountered by a complete traversal.&#10;     * Otherwise, this estimate may be arbitrarily inaccurate, but must decrease&#10;     * as specified across invocations of {@link #trySplit}.&#10;     *&#10;     * @apiNote&#10;     * Even an inexact estimate is often useful and inexpensive to compute.&#10;     * For example, a sub-spliterator of an approximately balanced binary tree&#10;     * may return a value that estimates the number of elements to be half of&#10;     * that of its parent; if the root Spliterator does not maintain an&#10;     * accurate count, it could estimate size to be the power of two&#10;     * corresponding to its maximum depth.&#10;     *&#10;     * @return the estimated size, or {@code Long.MAX_VALUE} if infinite,&#10;     *         unknown, or too expensive to compute.&#10;     "
  ]
  node [
    id 54
    label "MAX_VALUE"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 55
    label "SUBSIZED"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 56
    label "trySplit"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 57
    label " long getExactSizeIfKnown()"
    type "method"
    comment "&#10;     * Convenience method that returns {@link #estimateSize()} if this&#10;     * Spliterator is {@link #SIZED}, else {@code -1}.&#10;     * @implSpec&#10;     * The default implementation returns the result of {@code estimateSize()}&#10;     * if the Spliterator reports a characteristic of {@code SIZED}, and&#10;     * {@code -1} otherwise.&#10;     *&#10;     * @return the exact size, if known, else {@code -1}.&#10;     "
  ]
  node [
    id 58
    label "estimateSize()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 59
    label " int characteristics()"
    type "method"
    comment "&#10;     * Returns a set of characteristics of this Spliterator and its&#10;     * elements. The result is represented as ORed values from {@link&#10;     * #ORDERED}, {@link #DISTINCT}, {@link #SORTED}, {@link #SIZED},&#10;     * {@link #NONNULL}, {@link #IMMUTABLE}, {@link #CONCURRENT},&#10;     * {@link #SUBSIZED}.  Repeated calls to {@code characteristics()} on&#10;     * a given spliterator, prior to or in-between calls to {@code trySplit},&#10;     * should always return the same result.&#10;     *&#10;     * <p>If a Spliterator reports an inconsistent set of&#10;     * characteristics (either those returned from a single invocation&#10;     * or across multiple invocations), no guarantees can be made&#10;     * about any computation using this Spliterator.&#10;     *&#10;     * @apiNote The characteristics of a given spliterator before splitting&#10;     * may differ from the characteristics after splitting.  For specific&#10;     * examples see the characteristic values {@link #SIZED}, {@link #SUBSIZED}&#10;     * and {@link #CONCURRENT}.&#10;     *&#10;     * @return a representation of characteristics&#10;     "
  ]
  node [
    id 60
    label "CONCURRENT"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 61
    label "DISTINCT"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 62
    label "SORTED"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 63
    label "NONNULL"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 64
    label "IMMUTABLE"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 65
    label " boolean hasCharacteristics(int characteristics)"
    type "method"
    comment "&#10;     * Returns {@code true} if this Spliterator's {@link&#10;     * #characteristics} contain all of the given characteristics.&#10;     *&#10;     * @implSpec&#10;     * The default implementation returns true if the corresponding bits&#10;     * of the given characteristics are set.&#10;     *&#10;     * @param characteristics the characteristics to check for&#10;     * @return {@code true} if all the specified characteristics are present,&#10;     * else {@code false}&#10;     "
  ]
  node [
    id 66
    label "characteristics"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 67
    label " Comparator<? super T> getComparator()"
    type "method"
    comment "&#10;     * If this Spliterator's source is {@link #SORTED} by a {@link Comparator},&#10;     * returns that {@code Comparator}. If the source is {@code SORTED} in&#10;     * {@linkplain Comparable natural order}, returns {@code null}.  Otherwise,&#10;     * if the source is not {@code SORTED}, throws {@link IllegalStateException}.&#10;     *&#10;     * @implSpec&#10;     * The default implementation always throws {@link IllegalStateException}.&#10;     *&#10;     * @return a Comparator, or {@code null} if the elements are sorted in the&#10;     * natural order.&#10;     * @throws IllegalStateException if the spliterator does not report&#10;     *         a characteristic of {@code SORTED}.&#10;     "
  ]
  node [
    id 68
    label "IllegalStateException"
  ]
  node [
    id 69
    label "java.util.Comparator"
    type "class"
    comment "&#10; * A comparison function, which imposes a <i>total ordering</i> on&#10; * some collection of objects.  Comparators can be passed to a sort&#10; * method (such as {@link Collections#sort(List,Comparator)&#10; * Collections.sort} or {@link Arrays#sort(Object[],Comparator)&#10; * Arrays.sort}) to allow precise control over the sort order.&#10; * Comparators can also be used to control the order of certain data&#10; * structures (such as {@linkplain SortedSet sorted sets} or&#10; * {@linkplain SortedMap sorted maps}), or to provide an ordering for&#10; * collections of objects that don't have a {@linkplain Comparable&#10; * natural ordering}.<p>&#10; *&#10; * The ordering imposed by a comparator {@code c} on a set of elements&#10; * {@code S} is said to be <i>consistent with equals</i> if and only if&#10; * {@code c.compare(e1, e2)==0} has the same boolean value as&#10; * {@code e1.equals(e2)} for every {@code e1} and {@code e2} in&#10; * {@code S}.<p>&#10; *&#10; * Caution should be exercised when using a comparator capable of imposing an&#10; * ordering inconsistent with equals to order a sorted set (or sorted map).&#10; * Suppose a sorted set (or sorted map) with an explicit comparator {@code c}&#10; * is used with elements (or keys) drawn from a set {@code S}.  If the&#10; * ordering imposed by {@code c} on {@code S} is inconsistent with equals,&#10; * the sorted set (or sorted map) will behave &#34;strangely.&#34;  In particular the&#10; * sorted set (or sorted map) will violate the general contract for set (or&#10; * map), which is defined in terms of {@code equals}.<p>&#10; *&#10; * For example, suppose one adds two elements {@code a} and {@code b} such that&#10; * {@code (a.equals(b) &#38;&#38; c.compare(a, b) != 0)}&#10; * to an empty {@code TreeSet} with comparator {@code c}.&#10; * The second {@code add} operation will return&#10; * true (and the size of the tree set will increase) because {@code a} and&#10; * {@code b} are not equivalent from the tree set's perspective, even though&#10; * this is contrary to the specification of the&#10; * {@link Set#add Set.add} method.<p>&#10; *&#10; * Note: It is generally a good idea for comparators to also implement&#10; * {@code java.io.Serializable}, as they may be used as ordering methods in&#10; * serializable data structures (like {@link TreeSet}, {@link TreeMap}).  In&#10; * order for the data structure to serialize successfully, the comparator (if&#10; * provided) must implement {@code Serializable}.<p>&#10; *&#10; * For the mathematically inclined, the <i>relation</i> that defines the&#10; * <i>imposed ordering</i> that a given comparator {@code c} imposes on a&#10; * given set of objects {@code S} is:<pre>&#10; *       {(x, y) such that c.compare(x, y) &#38;lt;= 0}.&#10; * </pre> The <i>quotient</i> for this total order is:<pre>&#10; *       {(x, y) such that c.compare(x, y) == 0}.&#10; * </pre>&#10; *&#10; * It follows immediately from the contract for {@code compare} that the&#10; * quotient is an <i>equivalence relation</i> on {@code S}, and that the&#10; * imposed ordering is a <i>total order</i> on {@code S}.  When we say that&#10; * the ordering imposed by {@code c} on {@code S} is <i>consistent with&#10; * equals</i>, we mean that the quotient for the ordering is the equivalence&#10; * relation defined by the objects' {@link Object#equals(Object)&#10; * equals(Object)} method(s):<pre>&#10; *     {(x, y) such that x.equals(y)}. </pre>&#10; *&#10; * In other words, when the imposed ordering is consistent with&#10; * equals, the equivalence classes defined by the equivalence relation&#10; * of the {@code equals} method and the equivalence classes defined by&#10; * the quotient of the {@code compare} method are the same.&#10;&#10; * <p>Unlike {@code Comparable}, a comparator may optionally permit&#10; * comparison of null arguments, while maintaining the requirements for&#10; * an equivalence relation.&#10; *&#10; * <p>This interface is a member of the&#10; * <a href=&#34;{@docRoot}/java.base/java/util/package-summary.html#CollectionsFramework&#34;>&#10; * Java Collections Framework</a>.&#10; *&#10; * @param <T> the type of objects that may be compared by this comparator&#10; *&#10; * @author  Josh Bloch&#10; * @author  Neal Gafter&#10; * @see Comparable&#10; * @see java.io.Serializable&#10; * @since 1.2&#10; "
  ]
  node [
    id 70
    label " int compare(T o1, T o2)"
    type "method"
    comment "&#10;     * Compares its two arguments for order.  Returns a negative integer,&#10;     * zero, or a positive integer as the first argument is less than, equal&#10;     * to, or greater than the second.<p>&#10;     *&#10;     * The implementor must ensure that {@link Integer#signum&#10;     * signum}{@code (compare(x, y)) == -signum(compare(y, x))} for&#10;     * all {@code x} and {@code y}.  (This implies that {@code&#10;     * compare(x, y)} must throw an exception if and only if {@code&#10;     * compare(y, x)} throws an exception.)<p>&#10;     *&#10;     * The implementor must also ensure that the relation is transitive:&#10;     * {@code ((compare(x, y)>0) &#38;&#38; (compare(y, z)>0))} implies&#10;     * {@code compare(x, z)>0}.<p>&#10;     *&#10;     * Finally, the implementor must ensure that {@code compare(x,&#10;     * y)==0} implies that {@code signum(compare(x,&#10;     * z))==signum(compare(y, z))} for all {@code z}.&#10;     *&#10;     * @apiNote&#10;     * It is generally the case, but <i>not</i> strictly required that&#10;     * {@code (compare(x, y)==0) == (x.equals(y))}.  Generally speaking,&#10;     * any comparator that violates this condition should clearly indicate&#10;     * this fact.  The recommended language is &#34;Note: this comparator&#10;     * imposes orderings that are inconsistent with equals.&#34;&#10;     *&#10;     * @param o1 the first object to be compared.&#10;     * @param o2 the second object to be compared.&#10;     * @return a negative integer, zero, or a positive integer as the&#10;     *         first argument is less than, equal to, or greater than the&#10;     *         second.&#10;     * @throws NullPointerException if an argument is null and this&#10;     *         comparator does not permit null arguments&#10;     * @throws ClassCastException if the arguments' types prevent them from&#10;     *         being compared by this comparator.&#10;     "
  ]
  node [
    id 71
    label "signumsignum"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 72
    label " boolean equals(Object obj)"
    type "method"
    comment "&#10;     * Indicates whether some other object is &#38;quot;equal to&#38;quot;&#10;     * this comparator.  This method must obey the general contract of&#10;     * {@link Object#equals(Object)}.  Additionally, this method can&#10;     * return {@code true} <i>only</i> if the specified object is also&#10;     * a comparator and it imposes the same ordering as this&#10;     * comparator.  Thus, {@code comp1.equals(comp2)} implies that&#10;     * {@link Integer#signum signum}{@code (comp1.compare(o1,&#10;     * o2))==signum(comp2.compare(o1, o2))} for every object reference&#10;     * {@code o1} and {@code o2}.<p>&#10;     *&#10;     * Note that it is <i>always</i> safe <i>not</i> to override&#10;     * {@code Object.equals(Object)}.  However, overriding this method may,&#10;     * in some cases, improve performance by allowing programs to determine&#10;     * that two distinct comparators impose the same order.&#10;     *&#10;     * @param   obj   the reference object with which to compare.&#10;     * @return  {@code true} only if the specified object is also&#10;     *          a comparator and it imposes the same ordering as this&#10;     *          comparator.&#10;     * @see Object#equals(Object)&#10;     * @see Object#hashCode()&#10;     "
  ]
  node [
    id 73
    label "equals(Object)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 74
    label "signum"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 75
    label " Comparator<T> reversed()"
    type "method"
    comment "&#10;     * Returns a comparator that imposes the reverse ordering of this&#10;     * comparator.&#10;     *&#10;     * @return a comparator that imposes the reverse ordering of this&#10;     *         comparator.&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 76
    label " Comparator<T> thenComparing(Comparator<? super T> other)"
    type "method"
    comment "&#10;     * Returns a lexicographic-order comparator with another comparator.&#10;     * If this {@code Comparator} considers two elements equal, i.e.&#10;     * {@code compare(a, b) == 0}, {@code other} is used to determine the order.&#10;     *&#10;     * <p>The returned comparator is serializable if the specified comparator&#10;     * is also serializable.&#10;     *&#10;     * @apiNote&#10;     * For example, to sort a collection of {@code String} based on the length&#10;     * and then case-insensitive natural ordering, the comparator can be&#10;     * composed using following code,&#10;     *&#10;     * <pre>{@code&#10;     *     Comparator<String> cmp = Comparator.comparingInt(String::length)&#10;     *             .thenComparing(String.CASE_INSENSITIVE_ORDER);&#10;     * }</pre>&#10;     *&#10;     * @param  other the other comparator to be used when this comparator&#10;     *         compares two objects that are equal.&#10;     * @return a lexicographic-order comparator composed of this and then the&#10;     *         other comparator&#10;     * @throws NullPointerException if the argument is null.&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 77
    label " Comparator<T> thenComparing(Function<? super T, ? extends U> keyExtractor, Comparator<? super U> keyComparator)"
    type "method"
    comment "&#10;     * Returns a lexicographic-order comparator with a function that&#10;     * extracts a key to be compared with the given {@code Comparator}.&#10;     *&#10;     * @implSpec This default implementation behaves as if {@code&#10;     *           thenComparing(comparing(keyExtractor, cmp))}.&#10;     *&#10;     * @param  <U>  the type of the sort key&#10;     * @param  keyExtractor the function used to extract the sort key&#10;     * @param  keyComparator the {@code Comparator} used to compare the sort key&#10;     * @return a lexicographic-order comparator composed of this comparator&#10;     *         and then comparing on the key extracted by the keyExtractor function&#10;     * @throws NullPointerException if either argument is null.&#10;     * @see #comparing(Function, Comparator)&#10;     * @see #thenComparing(Comparator)&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 78
    label " Comparator<T> thenComparing(Function<? super T, ? extends U> keyExtractor)"
    type "method"
    comment "&#10;     * Returns a lexicographic-order comparator with a function that&#10;     * extracts a {@code Comparable} sort key.&#10;     *&#10;     * @implSpec This default implementation behaves as if {@code&#10;     *           thenComparing(comparing(keyExtractor))}.&#10;     *&#10;     * @param  <U>  the type of the {@link Comparable} sort key&#10;     * @param  keyExtractor the function used to extract the {@link&#10;     *         Comparable} sort key&#10;     * @return a lexicographic-order comparator composed of this and then the&#10;     *         {@link Comparable} sort key.&#10;     * @throws NullPointerException if the argument is null.&#10;     * @see #comparing(Function)&#10;     * @see #thenComparing(Comparator)&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 79
    label "Comparable"
  ]
  node [
    id 80
    label " Comparator<T> thenComparingInt(ToIntFunction<? super T> keyExtractor)"
    type "method"
    comment "&#10;     * Returns a lexicographic-order comparator with a function that&#10;     * extracts an {@code int} sort key.&#10;     *&#10;     * @implSpec This default implementation behaves as if {@code&#10;     *           thenComparing(comparingInt(keyExtractor))}.&#10;     *&#10;     * @param  keyExtractor the function used to extract the integer sort key&#10;     * @return a lexicographic-order comparator composed of this and then the&#10;     *         {@code int} sort key&#10;     * @throws NullPointerException if the argument is null.&#10;     * @see #comparingInt(ToIntFunction)&#10;     * @see #thenComparing(Comparator)&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 81
    label " Comparator<T> thenComparingLong(ToLongFunction<? super T> keyExtractor)"
    type "method"
    comment "&#10;     * Returns a lexicographic-order comparator with a function that&#10;     * extracts a {@code long} sort key.&#10;     *&#10;     * @implSpec This default implementation behaves as if {@code&#10;     *           thenComparing(comparingLong(keyExtractor))}.&#10;     *&#10;     * @param  keyExtractor the function used to extract the long sort key&#10;     * @return a lexicographic-order comparator composed of this and then the&#10;     *         {@code long} sort key&#10;     * @throws NullPointerException if the argument is null.&#10;     * @see #comparingLong(ToLongFunction)&#10;     * @see #thenComparing(Comparator)&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 82
    label " Comparator<T> thenComparingDouble(ToDoubleFunction<? super T> keyExtractor)"
    type "method"
    comment "&#10;     * Returns a lexicographic-order comparator with a function that&#10;     * extracts a {@code double} sort key.&#10;     *&#10;     * @implSpec This default implementation behaves as if {@code&#10;     *           thenComparing(comparingDouble(keyExtractor))}.&#10;     *&#10;     * @param  keyExtractor the function used to extract the double sort key&#10;     * @return a lexicographic-order comparator composed of this and then the&#10;     *         {@code double} sort key&#10;     * @throws NullPointerException if the argument is null.&#10;     * @see #comparingDouble(ToDoubleFunction)&#10;     * @see #thenComparing(Comparator)&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 83
    label "public static Comparator<T> reverseOrder()"
    type "method"
    comment "&#10;     * Returns a comparator that imposes the reverse of the <em>natural&#10;     * ordering</em>.&#10;     *&#10;     * <p>The returned comparator is serializable and throws {@link&#10;     * NullPointerException} when comparing {@code null}.&#10;     *&#10;     * @param  <T> the {@link Comparable} type of element to be compared&#10;     * @return a comparator that imposes the reverse of the <i>natural&#10;     *         ordering</i> on {@code Comparable} objects.&#10;     * @see Comparable&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 84
    label "NullPointerException"
  ]
  node [
    id 85
    label "public static Comparator<T> naturalOrder()"
    type "method"
    comment "&#10;     * Returns a comparator that compares {@link Comparable} objects in natural&#10;     * order.&#10;     *&#10;     * <p>The returned comparator is serializable and throws {@link&#10;     * NullPointerException} when comparing {@code null}.&#10;     *&#10;     * @param  <T> the {@link Comparable} type of element to be compared&#10;     * @return a comparator that imposes the <i>natural ordering</i> on {@code&#10;     *         Comparable} objects.&#10;     * @see Comparable&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 86
    label "public static Comparator<T> nullsFirst(Comparator<? super T> comparator)"
    type "method"
    comment "&#10;     * Returns a null-friendly comparator that considers {@code null} to be&#10;     * less than non-null. When both are {@code null}, they are considered&#10;     * equal. If both are non-null, the specified {@code Comparator} is used&#10;     * to determine the order. If the specified comparator is {@code null},&#10;     * then the returned comparator considers all non-null values to be equal.&#10;     *&#10;     * <p>The returned comparator is serializable if the specified comparator&#10;     * is serializable.&#10;     *&#10;     * @param  <T> the type of the elements to be compared&#10;     * @param  comparator a {@code Comparator} for comparing non-null values&#10;     * @return a comparator that considers {@code null} to be less than&#10;     *         non-null, and compares non-null objects with the supplied&#10;     *         {@code Comparator}.&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 87
    label "public static Comparator<T> nullsLast(Comparator<? super T> comparator)"
    type "method"
    comment "&#10;     * Returns a null-friendly comparator that considers {@code null} to be&#10;     * greater than non-null. When both are {@code null}, they are considered&#10;     * equal. If both are non-null, the specified {@code Comparator} is used&#10;     * to determine the order. If the specified comparator is {@code null},&#10;     * then the returned comparator considers all non-null values to be equal.&#10;     *&#10;     * <p>The returned comparator is serializable if the specified comparator&#10;     * is serializable.&#10;     *&#10;     * @param  <T> the type of the elements to be compared&#10;     * @param  comparator a {@code Comparator} for comparing non-null values&#10;     * @return a comparator that considers {@code null} to be greater than&#10;     *         non-null, and compares non-null objects with the supplied&#10;     *         {@code Comparator}.&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 88
    label "public static Comparator<T> comparing(Function<? super T, ? extends U> keyExtractor, Comparator<? super U> keyComparator)"
    type "method"
    comment "&#10;     * Accepts a function that extracts a sort key from a type {@code T}, and&#10;     * returns a {@code Comparator<T>} that compares by that sort key using&#10;     * the specified {@link Comparator}.&#10;     *&#10;     * <p>The returned comparator is serializable if the specified function&#10;     * and comparator are both serializable.&#10;     *&#10;     * @apiNote&#10;     * For example, to obtain a {@code Comparator} that compares {@code&#10;     * Person} objects by their last name ignoring case differences,&#10;     *&#10;     * <pre>{@code&#10;     *     Comparator<Person> cmp = Comparator.comparing(&#10;     *             Person::getLastName,&#10;     *             String.CASE_INSENSITIVE_ORDER);&#10;     * }</pre>&#10;     *&#10;     * @param  <T> the type of element to be compared&#10;     * @param  <U> the type of the sort key&#10;     * @param  keyExtractor the function used to extract the sort key&#10;     * @param  keyComparator the {@code Comparator} used to compare the sort key&#10;     * @return a comparator that compares by an extracted key using the&#10;     *         specified {@code Comparator}&#10;     * @throws NullPointerException if either argument is null&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 89
    label "public static Comparator<T> comparing(Function<? super T, ? extends U> keyExtractor)"
    type "method"
    comment "&#10;     * Accepts a function that extracts a {@link java.lang.Comparable&#10;     * Comparable} sort key from a type {@code T}, and returns a {@code&#10;     * Comparator<T>} that compares by that sort key.&#10;     *&#10;     * <p>The returned comparator is serializable if the specified function&#10;     * is also serializable.&#10;     *&#10;     * @apiNote&#10;     * For example, to obtain a {@code Comparator} that compares {@code&#10;     * Person} objects by their last name,&#10;     *&#10;     * <pre>{@code&#10;     *     Comparator<Person> byLastName = Comparator.comparing(Person::getLastName);&#10;     * }</pre>&#10;     *&#10;     * @param  <T> the type of element to be compared&#10;     * @param  <U> the type of the {@code Comparable} sort key&#10;     * @param  keyExtractor the function used to extract the {@link&#10;     *         Comparable} sort key&#10;     * @return a comparator that compares by an extracted key&#10;     * @throws NullPointerException if the argument is null&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 90
    label "java.lang.ComparableComparable"
  ]
  node [
    id 91
    label "public static Comparator<T> comparingInt(ToIntFunction<? super T> keyExtractor)"
    type "method"
    comment "&#10;     * Accepts a function that extracts an {@code int} sort key from a type&#10;     * {@code T}, and returns a {@code Comparator<T>} that compares by that&#10;     * sort key.&#10;     *&#10;     * <p>The returned comparator is serializable if the specified function&#10;     * is also serializable.&#10;     *&#10;     * @param  <T> the type of element to be compared&#10;     * @param  keyExtractor the function used to extract the integer sort key&#10;     * @return a comparator that compares by an extracted key&#10;     * @see #comparing(Function)&#10;     * @throws NullPointerException if the argument is null&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 92
    label "public static Comparator<T> comparingLong(ToLongFunction<? super T> keyExtractor)"
    type "method"
    comment "&#10;     * Accepts a function that extracts a {@code long} sort key from a type&#10;     * {@code T}, and returns a {@code Comparator<T>} that compares by that&#10;     * sort key.&#10;     *&#10;     * <p>The returned comparator is serializable if the specified function is&#10;     * also serializable.&#10;     *&#10;     * @param  <T> the type of element to be compared&#10;     * @param  keyExtractor the function used to extract the long sort key&#10;     * @return a comparator that compares by an extracted key&#10;     * @see #comparing(Function)&#10;     * @throws NullPointerException if the argument is null&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 93
    label "public static Comparator<T> comparingDouble(ToDoubleFunction<? super T> keyExtractor)"
    type "method"
    comment "&#10;     * Accepts a function that extracts a {@code double} sort key from a type&#10;     * {@code T}, and returns a {@code Comparator<T>} that compares by that&#10;     * sort key.&#10;     *&#10;     * <p>The returned comparator is serializable if the specified function&#10;     * is also serializable.&#10;     *&#10;     * @param  <T> the type of element to be compared&#10;     * @param  keyExtractor the function used to extract the double sort key&#10;     * @return a comparator that compares by an extracted key&#10;     * @see #comparing(Function)&#10;     * @throws NullPointerException if the argument is null&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 94
    label "emptySpliterator()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 95
    label "java.util.Spliterators"
    type "class"
    comment "&#10; * Static classes and methods for operating on or creating instances of&#10; * {@link Spliterator} and its primitive specializations&#10; * {@link Spliterator.OfInt}, {@link Spliterator.OfLong}, and&#10; * {@link Spliterator.OfDouble}.&#10; *&#10; * @see Spliterator&#10; * @since 1.8&#10; "
  ]
  node [
    id 96
    label "public static Spliterator<T> emptySpliterator()"
    type "method"
    comment "&#10;     * Creates an empty {@code Spliterator}&#10;     *&#10;     * <p>The empty spliterator reports {@link Spliterator#SIZED} and&#10;     * {@link Spliterator#SUBSIZED}.  Calls to&#10;     * {@link java.util.Spliterator#trySplit()} always return {@code null}.&#10;     *&#10;     * @param <T> Type of elements&#10;     * @return An empty spliterator&#10;     "
  ]
  node [
    id 97
    label "public static Spliterator.OfInt emptyIntSpliterator()"
    type "method"
    comment "&#10;     * Creates an empty {@code Spliterator.OfInt}&#10;     *&#10;     * <p>The empty spliterator reports {@link Spliterator#SIZED} and&#10;     * {@link Spliterator#SUBSIZED}.  Calls to&#10;     * {@link java.util.Spliterator#trySplit()} always return {@code null}.&#10;     *&#10;     * @return An empty spliterator&#10;     "
  ]
  node [
    id 98
    label "public static Spliterator.OfLong emptyLongSpliterator()"
    type "method"
    comment "&#10;     * Creates an empty {@code Spliterator.OfLong}&#10;     *&#10;     * <p>The empty spliterator reports {@link Spliterator#SIZED} and&#10;     * {@link Spliterator#SUBSIZED}.  Calls to&#10;     * {@link java.util.Spliterator#trySplit()} always return {@code null}.&#10;     *&#10;     * @return An empty spliterator&#10;     "
  ]
  node [
    id 99
    label "public static Spliterator.OfDouble emptyDoubleSpliterator()"
    type "method"
    comment "&#10;     * Creates an empty {@code Spliterator.OfDouble}&#10;     *&#10;     * <p>The empty spliterator reports {@link Spliterator#SIZED} and&#10;     * {@link Spliterator#SUBSIZED}.  Calls to&#10;     * {@link java.util.Spliterator#trySplit()} always return {@code null}.&#10;     *&#10;     * @return An empty spliterator&#10;     "
  ]
  node [
    id 100
    label "public static Spliterator<T> spliterator(Object[] array, int additionalCharacteristics)"
    type "method"
    comment "&#10;     * Creates a {@code Spliterator} covering the elements of a given array,&#10;     * using a customized set of spliterator characteristics.&#10;     *&#10;     * <p>This method is provided as an implementation convenience for&#10;     * Spliterators which store portions of their elements in arrays, and need&#10;     * fine control over Spliterator characteristics.  Most other situations in&#10;     * which a Spliterator for an array is needed should use&#10;     * {@link Arrays#spliterator(Object[])}.&#10;     *&#10;     * <p>The returned spliterator always reports the characteristics&#10;     * {@code SIZED} and {@code SUBSIZED}.  The caller may provide additional&#10;     * characteristics for the spliterator to report; it is common to&#10;     * additionally specify {@code IMMUTABLE} and {@code ORDERED}.&#10;     *&#10;     * @param <T> Type of elements&#10;     * @param array The array, assumed to be unmodified during use&#10;     * @param additionalCharacteristics Additional spliterator characteristics&#10;     *        of this spliterator's source or elements beyond {@code SIZED} and&#10;     *        {@code SUBSIZED} which are always reported&#10;     * @return A spliterator for an array&#10;     * @throws NullPointerException if the given array is {@code null}&#10;     * @see Arrays#spliterator(Object[])&#10;     "
  ]
  node [
    id 101
    label "spliterator(Object"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 102
    label "java.util.Arrays"
    type "class"
    comment "&#10; * This class contains various methods for manipulating arrays (such as&#10; * sorting and searching). This class also contains a static factory&#10; * that allows arrays to be viewed as lists.&#10; *&#10; * <p>The methods in this class all throw a {@code NullPointerException},&#10; * if the specified array reference is null, except where noted.&#10; *&#10; * <p>The documentation for the methods contained in this class includes&#10; * brief descriptions of the <i>implementations</i>. Such descriptions should&#10; * be regarded as <i>implementation notes</i>, rather than parts of the&#10; * <i>specification</i>. Implementors should feel free to substitute other&#10; * algorithms, so long as the specification itself is adhered to. (For&#10; * example, the algorithm used by {@code sort(Object[])} does not have to be&#10; * a MergeSort, but it does have to be <i>stable</i>.)&#10; *&#10; * <p>This class is a member of the&#10; * <a href=&#34;{@docRoot}/java.base/java/util/package-summary.html#CollectionsFramework&#34;>&#10; * Java Collections Framework</a>.&#10; *&#10; * @author Josh Bloch&#10; * @author Neal Gafter&#10; * @author John Rose&#10; * @since  1.2&#10; "
  ]
  node [
    id 103
    label "public static void sort(int[] a)"
    type "method"
    comment "&#10;     * Sorts the specified array into ascending numerical order.&#10;     *&#10;     * @implNote The sorting algorithm is a Dual-Pivot Quicksort&#10;     * by Vladimir Yaroslavskiy, Jon Bentley, and Joshua Bloch. This algorithm&#10;     * offers O(n log(n)) performance on all data sets, and is typically&#10;     * faster than traditional (one-pivot) Quicksort implementations.&#10;     *&#10;     * @param a the array to be sorted&#10;     "
  ]
  node [
    id 104
    label "public static void sort(int[] a, int fromIndex, int toIndex)"
    type "method"
    comment "&#10;     * Sorts the specified range of the array into ascending order. The range&#10;     * to be sorted extends from the index {@code fromIndex}, inclusive, to&#10;     * the index {@code toIndex}, exclusive. If {@code fromIndex == toIndex},&#10;     * the range to be sorted is empty.&#10;     *&#10;     * @implNote The sorting algorithm is a Dual-Pivot Quicksort&#10;     * by Vladimir Yaroslavskiy, Jon Bentley, and Joshua Bloch. This algorithm&#10;     * offers O(n log(n)) performance on all data sets, and is typically&#10;     * faster than traditional (one-pivot) Quicksort implementations.&#10;     *&#10;     * @param a the array to be sorted&#10;     * @param fromIndex the index of the first element, inclusive, to be sorted&#10;     * @param toIndex the index of the last element, exclusive, to be sorted&#10;     *&#10;     * @throws IllegalArgumentException if {@code fromIndex > toIndex}&#10;     * @throws ArrayIndexOutOfBoundsException&#10;     *     if {@code fromIndex < 0} or {@code toIndex > a.length}&#10;     "
  ]
  node [
    id 105
    label "public static void sort(long[] a)"
    type "method"
    comment "&#10;     * Sorts the specified array into ascending numerical order.&#10;     *&#10;     * @implNote The sorting algorithm is a Dual-Pivot Quicksort&#10;     * by Vladimir Yaroslavskiy, Jon Bentley, and Joshua Bloch. This algorithm&#10;     * offers O(n log(n)) performance on all data sets, and is typically&#10;     * faster than traditional (one-pivot) Quicksort implementations.&#10;     *&#10;     * @param a the array to be sorted&#10;     "
  ]
  node [
    id 106
    label "public static void sort(long[] a, int fromIndex, int toIndex)"
    type "method"
    comment "&#10;     * Sorts the specified range of the array into ascending order. The range&#10;     * to be sorted extends from the index {@code fromIndex}, inclusive, to&#10;     * the index {@code toIndex}, exclusive. If {@code fromIndex == toIndex},&#10;     * the range to be sorted is empty.&#10;     *&#10;     * @implNote The sorting algorithm is a Dual-Pivot Quicksort&#10;     * by Vladimir Yaroslavskiy, Jon Bentley, and Joshua Bloch. This algorithm&#10;     * offers O(n log(n)) performance on all data sets, and is typically&#10;     * faster than traditional (one-pivot) Quicksort implementations.&#10;     *&#10;     * @param a the array to be sorted&#10;     * @param fromIndex the index of the first element, inclusive, to be sorted&#10;     * @param toIndex the index of the last element, exclusive, to be sorted&#10;     *&#10;     * @throws IllegalArgumentException if {@code fromIndex > toIndex}&#10;     * @throws ArrayIndexOutOfBoundsException&#10;     *     if {@code fromIndex < 0} or {@code toIndex > a.length}&#10;     "
  ]
  node [
    id 107
    label "public static void sort(short[] a)"
    type "method"
    comment "&#10;     * Sorts the specified array into ascending numerical order.&#10;     *&#10;     * @implNote The sorting algorithm is a Dual-Pivot Quicksort&#10;     * by Vladimir Yaroslavskiy, Jon Bentley, and Joshua Bloch. This algorithm&#10;     * offers O(n log(n)) performance on all data sets, and is typically&#10;     * faster than traditional (one-pivot) Quicksort implementations.&#10;     *&#10;     * @param a the array to be sorted&#10;     "
  ]
  node [
    id 108
    label "public static void sort(short[] a, int fromIndex, int toIndex)"
    type "method"
    comment "&#10;     * Sorts the specified range of the array into ascending order. The range&#10;     * to be sorted extends from the index {@code fromIndex}, inclusive, to&#10;     * the index {@code toIndex}, exclusive. If {@code fromIndex == toIndex},&#10;     * the range to be sorted is empty.&#10;     *&#10;     * @implNote The sorting algorithm is a Dual-Pivot Quicksort&#10;     * by Vladimir Yaroslavskiy, Jon Bentley, and Joshua Bloch. This algorithm&#10;     * offers O(n log(n)) performance on all data sets, and is typically&#10;     * faster than traditional (one-pivot) Quicksort implementations.&#10;     *&#10;     * @param a the array to be sorted&#10;     * @param fromIndex the index of the first element, inclusive, to be sorted&#10;     * @param toIndex the index of the last element, exclusive, to be sorted&#10;     *&#10;     * @throws IllegalArgumentException if {@code fromIndex > toIndex}&#10;     * @throws ArrayIndexOutOfBoundsException&#10;     *     if {@code fromIndex < 0} or {@code toIndex > a.length}&#10;     "
  ]
  node [
    id 109
    label "public static void sort(char[] a)"
    type "method"
    comment "&#10;     * Sorts the specified array into ascending numerical order.&#10;     *&#10;     * @implNote The sorting algorithm is a Dual-Pivot Quicksort&#10;     * by Vladimir Yaroslavskiy, Jon Bentley, and Joshua Bloch. This algorithm&#10;     * offers O(n log(n)) performance on all data sets, and is typically&#10;     * faster than traditional (one-pivot) Quicksort implementations.&#10;     *&#10;     * @param a the array to be sorted&#10;     "
  ]
  node [
    id 110
    label "public static void sort(char[] a, int fromIndex, int toIndex)"
    type "method"
    comment "&#10;     * Sorts the specified range of the array into ascending order. The range&#10;     * to be sorted extends from the index {@code fromIndex}, inclusive, to&#10;     * the index {@code toIndex}, exclusive. If {@code fromIndex == toIndex},&#10;     * the range to be sorted is empty.&#10;     *&#10;     * @implNote The sorting algorithm is a Dual-Pivot Quicksort&#10;     * by Vladimir Yaroslavskiy, Jon Bentley, and Joshua Bloch. This algorithm&#10;     * offers O(n log(n)) performance on all data sets, and is typically&#10;     * faster than traditional (one-pivot) Quicksort implementations.&#10;     *&#10;     * @param a the array to be sorted&#10;     * @param fromIndex the index of the first element, inclusive, to be sorted&#10;     * @param toIndex the index of the last element, exclusive, to be sorted&#10;     *&#10;     * @throws IllegalArgumentException if {@code fromIndex > toIndex}&#10;     * @throws ArrayIndexOutOfBoundsException&#10;     *     if {@code fromIndex < 0} or {@code toIndex > a.length}&#10;     "
  ]
  node [
    id 111
    label "public static void sort(byte[] a)"
    type "method"
    comment "&#10;     * Sorts the specified array into ascending numerical order.&#10;     *&#10;     * @implNote The sorting algorithm is a Dual-Pivot Quicksort&#10;     * by Vladimir Yaroslavskiy, Jon Bentley, and Joshua Bloch. This algorithm&#10;     * offers O(n log(n)) performance on all data sets, and is typically&#10;     * faster than traditional (one-pivot) Quicksort implementations.&#10;     *&#10;     * @param a the array to be sorted&#10;     "
  ]
  node [
    id 112
    label "public static void sort(byte[] a, int fromIndex, int toIndex)"
    type "method"
    comment "&#10;     * Sorts the specified range of the array into ascending order. The range&#10;     * to be sorted extends from the index {@code fromIndex}, inclusive, to&#10;     * the index {@code toIndex}, exclusive. If {@code fromIndex == toIndex},&#10;     * the range to be sorted is empty.&#10;     *&#10;     * @implNote The sorting algorithm is a Dual-Pivot Quicksort&#10;     * by Vladimir Yaroslavskiy, Jon Bentley, and Joshua Bloch. This algorithm&#10;     * offers O(n log(n)) performance on all data sets, and is typically&#10;     * faster than traditional (one-pivot) Quicksort implementations.&#10;     *&#10;     * @param a the array to be sorted&#10;     * @param fromIndex the index of the first element, inclusive, to be sorted&#10;     * @param toIndex the index of the last element, exclusive, to be sorted&#10;     *&#10;     * @throws IllegalArgumentException if {@code fromIndex > toIndex}&#10;     * @throws ArrayIndexOutOfBoundsException&#10;     *     if {@code fromIndex < 0} or {@code toIndex > a.length}&#10;     "
  ]
  node [
    id 113
    label "public static void sort(float[] a)"
    type "method"
    comment "&#10;     * Sorts the specified array into ascending numerical order.&#10;     *&#10;     * <p>The {@code <} relation does not provide a total order on all float&#10;     * values: {@code -0.0f == 0.0f} is {@code true} and a {@code Float.NaN}&#10;     * value compares neither less than, greater than, nor equal to any value,&#10;     * even itself. This method uses the total order imposed by the method&#10;     * {@link Float#compareTo}: {@code -0.0f} is treated as less than value&#10;     * {@code 0.0f} and {@code Float.NaN} is considered greater than any&#10;     * other value and all {@code Float.NaN} values are considered equal.&#10;     *&#10;     * @implNote The sorting algorithm is a Dual-Pivot Quicksort&#10;     * by Vladimir Yaroslavskiy, Jon Bentley, and Joshua Bloch. This algorithm&#10;     * offers O(n log(n)) performance on all data sets, and is typically&#10;     * faster than traditional (one-pivot) Quicksort implementations.&#10;     *&#10;     * @param a the array to be sorted&#10;     "
  ]
  node [
    id 114
    label "compareTo"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 115
    label "public static void sort(float[] a, int fromIndex, int toIndex)"
    type "method"
    comment "&#10;     * Sorts the specified range of the array into ascending order. The range&#10;     * to be sorted extends from the index {@code fromIndex}, inclusive, to&#10;     * the index {@code toIndex}, exclusive. If {@code fromIndex == toIndex},&#10;     * the range to be sorted is empty.&#10;     *&#10;     * <p>The {@code <} relation does not provide a total order on all float&#10;     * values: {@code -0.0f == 0.0f} is {@code true} and a {@code Float.NaN}&#10;     * value compares neither less than, greater than, nor equal to any value,&#10;     * even itself. This method uses the total order imposed by the method&#10;     * {@link Float#compareTo}: {@code -0.0f} is treated as less than value&#10;     * {@code 0.0f} and {@code Float.NaN} is considered greater than any&#10;     * other value and all {@code Float.NaN} values are considered equal.&#10;     *&#10;     * @implNote The sorting algorithm is a Dual-Pivot Quicksort&#10;     * by Vladimir Yaroslavskiy, Jon Bentley, and Joshua Bloch. This algorithm&#10;     * offers O(n log(n)) performance on all data sets, and is typically&#10;     * faster than traditional (one-pivot) Quicksort implementations.&#10;     *&#10;     * @param a the array to be sorted&#10;     * @param fromIndex the index of the first element, inclusive, to be sorted&#10;     * @param toIndex the index of the last element, exclusive, to be sorted&#10;     *&#10;     * @throws IllegalArgumentException if {@code fromIndex > toIndex}&#10;     * @throws ArrayIndexOutOfBoundsException&#10;     *     if {@code fromIndex < 0} or {@code toIndex > a.length}&#10;     "
  ]
  node [
    id 116
    label "public static void sort(double[] a)"
    type "method"
    comment "&#10;     * Sorts the specified array into ascending numerical order.&#10;     *&#10;     * <p>The {@code <} relation does not provide a total order on all double&#10;     * values: {@code -0.0d == 0.0d} is {@code true} and a {@code Double.NaN}&#10;     * value compares neither less than, greater than, nor equal to any value,&#10;     * even itself. This method uses the total order imposed by the method&#10;     * {@link Double#compareTo}: {@code -0.0d} is treated as less than value&#10;     * {@code 0.0d} and {@code Double.NaN} is considered greater than any&#10;     * other value and all {@code Double.NaN} values are considered equal.&#10;     *&#10;     * @implNote The sorting algorithm is a Dual-Pivot Quicksort&#10;     * by Vladimir Yaroslavskiy, Jon Bentley, and Joshua Bloch. This algorithm&#10;     * offers O(n log(n)) performance on all data sets, and is typically&#10;     * faster than traditional (one-pivot) Quicksort implementations.&#10;     *&#10;     * @param a the array to be sorted&#10;     "
  ]
  node [
    id 117
    label "public static void sort(double[] a, int fromIndex, int toIndex)"
    type "method"
    comment "&#10;     * Sorts the specified range of the array into ascending order. The range&#10;     * to be sorted extends from the index {@code fromIndex}, inclusive, to&#10;     * the index {@code toIndex}, exclusive. If {@code fromIndex == toIndex},&#10;     * the range to be sorted is empty.&#10;     *&#10;     * <p>The {@code <} relation does not provide a total order on all double&#10;     * values: {@code -0.0d == 0.0d} is {@code true} and a {@code Double.NaN}&#10;     * value compares neither less than, greater than, nor equal to any value,&#10;     * even itself. This method uses the total order imposed by the method&#10;     * {@link Double#compareTo}: {@code -0.0d} is treated as less than value&#10;     * {@code 0.0d} and {@code Double.NaN} is considered greater than any&#10;     * other value and all {@code Double.NaN} values are considered equal.&#10;     *&#10;     * @implNote The sorting algorithm is a Dual-Pivot Quicksort&#10;     * by Vladimir Yaroslavskiy, Jon Bentley, and Joshua Bloch. This algorithm&#10;     * offers O(n log(n)) performance on all data sets, and is typically&#10;     * faster than traditional (one-pivot) Quicksort implementations.&#10;     *&#10;     * @param a the array to be sorted&#10;     * @param fromIndex the index of the first element, inclusive, to be sorted&#10;     * @param toIndex the index of the last element, exclusive, to be sorted&#10;     *&#10;     * @throws IllegalArgumentException if {@code fromIndex > toIndex}&#10;     * @throws ArrayIndexOutOfBoundsException&#10;     *     if {@code fromIndex < 0} or {@code toIndex > a.length}&#10;     "
  ]
  node [
    id 118
    label "public static void parallelSort(byte[] a)"
    type "method"
    comment "&#10;     * Sorts the specified array into ascending numerical order.&#10;     *&#10;     * @implNote The sorting algorithm is a Dual-Pivot Quicksort by&#10;     * Vladimir Yaroslavskiy, Jon Bentley and Josh Bloch. This algorithm&#10;     * offers O(n log(n)) performance on all data sets, and is typically&#10;     * faster than traditional (one-pivot) Quicksort implementations.&#10;     *&#10;     * @param a the array to be sorted&#10;     *&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 119
    label "public static void parallelSort(byte[] a, int fromIndex, int toIndex)"
    type "method"
    comment "&#10;     * Sorts the specified range of the array into ascending numerical order.&#10;     * The range to be sorted extends from the index {@code fromIndex},&#10;     * inclusive, to the index {@code toIndex}, exclusive. If&#10;     * {@code fromIndex == toIndex}, the range to be sorted is empty.&#10;     *&#10;     * @implNote The sorting algorithm is a Dual-Pivot Quicksort by&#10;     * Vladimir Yaroslavskiy, Jon Bentley and Josh Bloch. This algorithm&#10;     * offers O(n log(n)) performance on all data sets, and is typically&#10;     * faster than traditional (one-pivot) Quicksort implementations.&#10;     *&#10;     * @param a the array to be sorted&#10;     * @param fromIndex the index of the first element, inclusive, to be sorted&#10;     * @param toIndex the index of the last element, exclusive, to be sorted&#10;     *&#10;     * @throws IllegalArgumentException if {@code fromIndex > toIndex}&#10;     * @throws ArrayIndexOutOfBoundsException&#10;     *     if {@code fromIndex < 0} or {@code toIndex > a.length}&#10;     *&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 120
    label "public static void parallelSort(char[] a)"
    type "method"
    comment "&#10;     * Sorts the specified array into ascending numerical order.&#10;     *&#10;     * @implNote The sorting algorithm is a Dual-Pivot Quicksort by&#10;     * Vladimir Yaroslavskiy, Jon Bentley and Josh Bloch. This algorithm&#10;     * offers O(n log(n)) performance on all data sets, and is typically&#10;     * faster than traditional (one-pivot) Quicksort implementations.&#10;     *&#10;     * @param a the array to be sorted&#10;     *&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 121
    label "public static void parallelSort(char[] a, int fromIndex, int toIndex)"
    type "method"
    comment "&#10;     * Sorts the specified range of the array into ascending numerical order.&#10;     * The range to be sorted extends from the index {@code fromIndex},&#10;     * inclusive, to the index {@code toIndex}, exclusive. If&#10;     * {@code fromIndex == toIndex}, the range to be sorted is empty.&#10;     *&#10;     * @implNote The sorting algorithm is a Dual-Pivot Quicksort by&#10;     * Vladimir Yaroslavskiy, Jon Bentley and Josh Bloch. This algorithm&#10;     * offers O(n log(n)) performance on all data sets, and is typically&#10;     * faster than traditional (one-pivot) Quicksort implementations.&#10;     *&#10;     * @param a the array to be sorted&#10;     * @param fromIndex the index of the first element, inclusive, to be sorted&#10;     * @param toIndex the index of the last element, exclusive, to be sorted&#10;     *&#10;     * @throws IllegalArgumentException if {@code fromIndex > toIndex}&#10;     * @throws ArrayIndexOutOfBoundsException&#10;     *     if {@code fromIndex < 0} or {@code toIndex > a.length}&#10;     *&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 122
    label "public static void parallelSort(short[] a)"
    type "method"
    comment "&#10;     * Sorts the specified array into ascending numerical order.&#10;     *&#10;     * @implNote The sorting algorithm is a Dual-Pivot Quicksort by&#10;     * Vladimir Yaroslavskiy, Jon Bentley and Josh Bloch. This algorithm&#10;     * offers O(n log(n)) performance on all data sets, and is typically&#10;     * faster than traditional (one-pivot) Quicksort implementations.&#10;     *&#10;     * @param a the array to be sorted&#10;     *&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 123
    label "public static void parallelSort(short[] a, int fromIndex, int toIndex)"
    type "method"
    comment "&#10;     * Sorts the specified range of the array into ascending numerical order.&#10;     * The range to be sorted extends from the index {@code fromIndex},&#10;     * inclusive, to the index {@code toIndex}, exclusive. If&#10;     * {@code fromIndex == toIndex}, the range to be sorted is empty.&#10;     *&#10;     * @implNote The sorting algorithm is a Dual-Pivot Quicksort by&#10;     * Vladimir Yaroslavskiy, Jon Bentley and Josh Bloch. This algorithm&#10;     * offers O(n log(n)) performance on all data sets, and is typically&#10;     * faster than traditional (one-pivot) Quicksort implementations.&#10;     *&#10;     * @param a the array to be sorted&#10;     * @param fromIndex the index of the first element, inclusive, to be sorted&#10;     * @param toIndex the index of the last element, exclusive, to be sorted&#10;     *&#10;     * @throws IllegalArgumentException if {@code fromIndex > toIndex}&#10;     * @throws ArrayIndexOutOfBoundsException&#10;     *     if {@code fromIndex < 0} or {@code toIndex > a.length}&#10;     *&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 124
    label "public static void parallelSort(int[] a)"
    type "method"
    comment "&#10;     * Sorts the specified array into ascending numerical order.&#10;     *&#10;     * @implNote The sorting algorithm is a Dual-Pivot Quicksort by&#10;     * Vladimir Yaroslavskiy, Jon Bentley and Josh Bloch. This algorithm&#10;     * offers O(n log(n)) performance on all data sets, and is typically&#10;     * faster than traditional (one-pivot) Quicksort implementations.&#10;     *&#10;     * @param a the array to be sorted&#10;     *&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 125
    label "public static void parallelSort(int[] a, int fromIndex, int toIndex)"
    type "method"
    comment "&#10;     * Sorts the specified range of the array into ascending numerical order.&#10;     * The range to be sorted extends from the index {@code fromIndex},&#10;     * inclusive, to the index {@code toIndex}, exclusive. If&#10;     * {@code fromIndex == toIndex}, the range to be sorted is empty.&#10;     *&#10;     * @implNote The sorting algorithm is a Dual-Pivot Quicksort by&#10;     * Vladimir Yaroslavskiy, Jon Bentley and Josh Bloch. This algorithm&#10;     * offers O(n log(n)) performance on all data sets, and is typically&#10;     * faster than traditional (one-pivot) Quicksort implementations.&#10;     *&#10;     * @param a the array to be sorted&#10;     * @param fromIndex the index of the first element, inclusive, to be sorted&#10;     * @param toIndex the index of the last element, exclusive, to be sorted&#10;     *&#10;     * @throws IllegalArgumentException if {@code fromIndex > toIndex}&#10;     * @throws ArrayIndexOutOfBoundsException&#10;     *     if {@code fromIndex < 0} or {@code toIndex > a.length}&#10;     *&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 126
    label "public static void parallelSort(long[] a)"
    type "method"
    comment "&#10;     * Sorts the specified array into ascending numerical order.&#10;     *&#10;     * @implNote The sorting algorithm is a Dual-Pivot Quicksort by&#10;     * Vladimir Yaroslavskiy, Jon Bentley and Josh Bloch. This algorithm&#10;     * offers O(n log(n)) performance on all data sets, and is typically&#10;     * faster than traditional (one-pivot) Quicksort implementations.&#10;     *&#10;     * @param a the array to be sorted&#10;     *&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 127
    label "public static void parallelSort(long[] a, int fromIndex, int toIndex)"
    type "method"
    comment "&#10;     * Sorts the specified range of the array into ascending numerical order.&#10;     * The range to be sorted extends from the index {@code fromIndex},&#10;     * inclusive, to the index {@code toIndex}, exclusive. If&#10;     * {@code fromIndex == toIndex}, the range to be sorted is empty.&#10;     *&#10;     * @implNote The sorting algorithm is a Dual-Pivot Quicksort by&#10;     * Vladimir Yaroslavskiy, Jon Bentley and Josh Bloch. This algorithm&#10;     * offers O(n log(n)) performance on all data sets, and is typically&#10;     * faster than traditional (one-pivot) Quicksort implementations.&#10;     *&#10;     * @param a the array to be sorted&#10;     * @param fromIndex the index of the first element, inclusive, to be sorted&#10;     * @param toIndex the index of the last element, exclusive, to be sorted&#10;     *&#10;     * @throws IllegalArgumentException if {@code fromIndex > toIndex}&#10;     * @throws ArrayIndexOutOfBoundsException&#10;     *     if {@code fromIndex < 0} or {@code toIndex > a.length}&#10;     *&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 128
    label "public static void parallelSort(float[] a)"
    type "method"
    comment "&#10;     * Sorts the specified array into ascending numerical order.&#10;     *&#10;     * <p>The {@code <} relation does not provide a total order on all float&#10;     * values: {@code -0.0f == 0.0f} is {@code true} and a {@code Float.NaN}&#10;     * value compares neither less than, greater than, nor equal to any value,&#10;     * even itself. This method uses the total order imposed by the method&#10;     * {@link Float#compareTo}: {@code -0.0f} is treated as less than value&#10;     * {@code 0.0f} and {@code Float.NaN} is considered greater than any&#10;     * other value and all {@code Float.NaN} values are considered equal.&#10;     *&#10;     * @implNote The sorting algorithm is a Dual-Pivot Quicksort by&#10;     * Vladimir Yaroslavskiy, Jon Bentley and Josh Bloch. This algorithm&#10;     * offers O(n log(n)) performance on all data sets, and is typically&#10;     * faster than traditional (one-pivot) Quicksort implementations.&#10;     *&#10;     * @param a the array to be sorted&#10;     *&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 129
    label "public static void parallelSort(float[] a, int fromIndex, int toIndex)"
    type "method"
    comment "&#10;     * Sorts the specified range of the array into ascending numerical order.&#10;     * The range to be sorted extends from the index {@code fromIndex},&#10;     * inclusive, to the index {@code toIndex}, exclusive. If&#10;     * {@code fromIndex == toIndex}, the range to be sorted is empty.&#10;     *&#10;     * <p>The {@code <} relation does not provide a total order on all float&#10;     * values: {@code -0.0f == 0.0f} is {@code true} and a {@code Float.NaN}&#10;     * value compares neither less than, greater than, nor equal to any value,&#10;     * even itself. This method uses the total order imposed by the method&#10;     * {@link Float#compareTo}: {@code -0.0f} is treated as less than value&#10;     * {@code 0.0f} and {@code Float.NaN} is considered greater than any&#10;     * other value and all {@code Float.NaN} values are considered equal.&#10;     *&#10;     * @implNote The sorting algorithm is a Dual-Pivot Quicksort by&#10;     * Vladimir Yaroslavskiy, Jon Bentley and Josh Bloch. This algorithm&#10;     * offers O(n log(n)) performance on all data sets, and is typically&#10;     * faster than traditional (one-pivot) Quicksort implementations.&#10;     *&#10;     * @param a the array to be sorted&#10;     * @param fromIndex the index of the first element, inclusive, to be sorted&#10;     * @param toIndex the index of the last element, exclusive, to be sorted&#10;     *&#10;     * @throws IllegalArgumentException if {@code fromIndex > toIndex}&#10;     * @throws ArrayIndexOutOfBoundsException&#10;     *     if {@code fromIndex < 0} or {@code toIndex > a.length}&#10;     *&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 130
    label "public static void parallelSort(double[] a)"
    type "method"
    comment "&#10;     * Sorts the specified array into ascending numerical order.&#10;     *&#10;     * <p>The {@code <} relation does not provide a total order on all double&#10;     * values: {@code -0.0d == 0.0d} is {@code true} and a {@code Double.NaN}&#10;     * value compares neither less than, greater than, nor equal to any value,&#10;     * even itself. This method uses the total order imposed by the method&#10;     * {@link Double#compareTo}: {@code -0.0d} is treated as less than value&#10;     * {@code 0.0d} and {@code Double.NaN} is considered greater than any&#10;     * other value and all {@code Double.NaN} values are considered equal.&#10;     *&#10;     * @implNote The sorting algorithm is a Dual-Pivot Quicksort by&#10;     * Vladimir Yaroslavskiy, Jon Bentley and Josh Bloch. This algorithm&#10;     * offers O(n log(n)) performance on all data sets, and is typically&#10;     * faster than traditional (one-pivot) Quicksort implementations.&#10;     *&#10;     * @param a the array to be sorted&#10;     *&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 131
    label "public static void parallelSort(double[] a, int fromIndex, int toIndex)"
    type "method"
    comment "&#10;     * Sorts the specified range of the array into ascending numerical order.&#10;     * The range to be sorted extends from the index {@code fromIndex},&#10;     * inclusive, to the index {@code toIndex}, exclusive. If&#10;     * {@code fromIndex == toIndex}, the range to be sorted is empty.&#10;     *&#10;     * <p>The {@code <} relation does not provide a total order on all double&#10;     * values: {@code -0.0d == 0.0d} is {@code true} and a {@code Double.NaN}&#10;     * value compares neither less than, greater than, nor equal to any value,&#10;     * even itself. This method uses the total order imposed by the method&#10;     * {@link Double#compareTo}: {@code -0.0d} is treated as less than value&#10;     * {@code 0.0d} and {@code Double.NaN} is considered greater than any&#10;     * other value and all {@code Double.NaN} values are considered equal.&#10;     *&#10;     * @implNote The sorting algorithm is a Dual-Pivot Quicksort by&#10;     * Vladimir Yaroslavskiy, Jon Bentley and Josh Bloch. This algorithm&#10;     * offers O(n log(n)) performance on all data sets, and is typically&#10;     * faster than traditional (one-pivot) Quicksort implementations.&#10;     *&#10;     * @param a the array to be sorted&#10;     * @param fromIndex the index of the first element, inclusive, to be sorted&#10;     * @param toIndex the index of the last element, exclusive, to be sorted&#10;     *&#10;     * @throws IllegalArgumentException if {@code fromIndex > toIndex}&#10;     * @throws ArrayIndexOutOfBoundsException&#10;     *     if {@code fromIndex < 0} or {@code toIndex > a.length}&#10;     *&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 132
    label " static void rangeCheck(int arrayLength, int fromIndex, int toIndex)"
    type "method"
    comment "&#10;     * Checks that {@code fromIndex} and {@code toIndex} are in&#10;     * the range and throws an exception if they aren't.&#10;     "
  ]
  node [
    id 133
    label "public static void parallelSort(T[] a)"
    type "method"
    comment "&#10;     * Sorts the specified array of objects into ascending order, according&#10;     * to the {@linkplain Comparable natural ordering} of its elements.&#10;     * All elements in the array must implement the {@link Comparable}&#10;     * interface.  Furthermore, all elements in the array must be&#10;     * <i>mutually comparable</i> (that is, {@code e1.compareTo(e2)} must&#10;     * not throw a {@code ClassCastException} for any elements {@code e1}&#10;     * and {@code e2} in the array).&#10;     *&#10;     * <p>This sort is guaranteed to be <i>stable</i>:  equal elements will&#10;     * not be reordered as a result of the sort.&#10;     *&#10;     * @implNote The sorting algorithm is a parallel sort-merge that breaks the&#10;     * array into sub-arrays that are themselves sorted and then merged. When&#10;     * the sub-array length reaches a minimum granularity, the sub-array is&#10;     * sorted using the appropriate {@link Arrays#sort(Object[]) Arrays.sort}&#10;     * method. If the length of the specified array is less than the minimum&#10;     * granularity, then it is sorted using the appropriate {@link&#10;     * Arrays#sort(Object[]) Arrays.sort} method. The algorithm requires a&#10;     * working space no greater than the size of the original array. The&#10;     * {@link ForkJoinPool#commonPool() ForkJoin common pool} is used to&#10;     * execute any parallel tasks.&#10;     *&#10;     * @param <T> the class of the objects to be sorted&#10;     * @param a the array to be sorted&#10;     *&#10;     * @throws ClassCastException if the array contains elements that are not&#10;     *         <i>mutually comparable</i> (for example, strings and integers)&#10;     * @throws IllegalArgumentException (optional) if the natural&#10;     *         ordering of the array elements is found to violate the&#10;     *         {@link Comparable} contract&#10;     *&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 134
    label "commonPool()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 135
    label "java.util.concurrent.ForkJoinPool"
    type "class"
    comment "&#10; * An {@link ExecutorService} for running {@link ForkJoinTask}s.&#10; * A {@code ForkJoinPool} provides the entry point for submissions&#10; * from non-{@code ForkJoinTask} clients, as well as management and&#10; * monitoring operations.&#10; *&#10; * <p>A {@code ForkJoinPool} differs from other kinds of {@link&#10; * ExecutorService} mainly by virtue of employing&#10; * <em>work-stealing</em>: all threads in the pool attempt to find and&#10; * execute tasks submitted to the pool and/or created by other active&#10; * tasks (eventually blocking waiting for work if none exist). This&#10; * enables efficient processing when most tasks spawn other subtasks&#10; * (as do most {@code ForkJoinTask}s), as well as when many small&#10; * tasks are submitted to the pool from external clients.  Especially&#10; * when setting <em>asyncMode</em> to true in constructors, {@code&#10; * ForkJoinPool}s may also be appropriate for use with event-style&#10; * tasks that are never joined. All worker threads are initialized&#10; * with {@link Thread#isDaemon} set {@code true}.&#10; *&#10; * <p>A static {@link #commonPool()} is available and appropriate for&#10; * most applications. The common pool is used by any ForkJoinTask that&#10; * is not explicitly submitted to a specified pool. Using the common&#10; * pool normally reduces resource usage (its threads are slowly&#10; * reclaimed during periods of non-use, and reinstated upon subsequent&#10; * use).&#10; *&#10; * <p>For applications that require separate or custom pools, a {@code&#10; * ForkJoinPool} may be constructed with a given target parallelism&#10; * level; by default, equal to the number of available processors.&#10; * The pool attempts to maintain enough active (or available) threads&#10; * by dynamically adding, suspending, or resuming internal worker&#10; * threads, even if some tasks are stalled waiting to join others.&#10; * However, no such adjustments are guaranteed in the face of blocked&#10; * I/O or other unmanaged synchronization. The nested {@link&#10; * ManagedBlocker} interface enables extension of the kinds of&#10; * synchronization accommodated. The default policies may be&#10; * overridden using a constructor with parameters corresponding to&#10; * those documented in class {@link ThreadPoolExecutor}.&#10; *&#10; * <p>In addition to execution and lifecycle control methods, this&#10; * class provides status check methods (for example&#10; * {@link #getStealCount}) that are intended to aid in developing,&#10; * tuning, and monitoring fork/join applications. Also, method&#10; * {@link #toString} returns indications of pool state in a&#10; * convenient form for informal monitoring.&#10; *&#10; * <p>As is the case with other ExecutorServices, there are three&#10; * main task execution methods summarized in the following table.&#10; * These are designed to be used primarily by clients not already&#10; * engaged in fork/join computations in the current pool.  The main&#10; * forms of these methods accept instances of {@code ForkJoinTask},&#10; * but overloaded forms also allow mixed execution of plain {@code&#10; * Runnable}- or {@code Callable}- based activities as well.  However,&#10; * tasks that are already executing in a pool should normally instead&#10; * use the within-computation forms listed in the table unless using&#10; * async event-style tasks that are not usually joined, in which case&#10; * there is little difference among choice of methods.&#10; *&#10; * <table class=&#34;plain&#34;>&#10; * <caption>Summary of task execution methods</caption>&#10; *  <tr>&#10; *    <td></td>&#10; *    <th scope=&#34;col&#34;> Call from non-fork/join clients</th>&#10; *    <th scope=&#34;col&#34;> Call from within fork/join computations</th>&#10; *  </tr>&#10; *  <tr>&#10; *    <th scope=&#34;row&#34; style=&#34;text-align:left&#34;> Arrange async execution</th>&#10; *    <td> {@link #execute(ForkJoinTask)}</td>&#10; *    <td> {@link ForkJoinTask#fork}</td>&#10; *  </tr>&#10; *  <tr>&#10; *    <th scope=&#34;row&#34; style=&#34;text-align:left&#34;> Await and obtain result</th>&#10; *    <td> {@link #invoke(ForkJoinTask)}</td>&#10; *    <td> {@link ForkJoinTask#invoke}</td>&#10; *  </tr>&#10; *  <tr>&#10; *    <th scope=&#34;row&#34; style=&#34;text-align:left&#34;> Arrange exec and obtain Future</th>&#10; *    <td> {@link #submit(ForkJoinTask)}</td>&#10; *    <td> {@link ForkJoinTask#fork} (ForkJoinTasks <em>are</em> Futures)</td>&#10; *  </tr>&#10; * </table>&#10; *&#10; * <p>The parameters used to construct the common pool may be controlled by&#10; * setting the following {@linkplain System#getProperty system properties}:&#10; * <ul>&#10; * <li>{@code java.util.concurrent.ForkJoinPool.common.parallelism}&#10; * - the parallelism level, a non-negative integer&#10; * <li>{@code java.util.concurrent.ForkJoinPool.common.threadFactory}&#10; * - the class name of a {@link ForkJoinWorkerThreadFactory}.&#10; * The {@linkplain ClassLoader#getSystemClassLoader() system class loader}&#10; * is used to load this class.&#10; * <li>{@code java.util.concurrent.ForkJoinPool.common.exceptionHandler}&#10; * - the class name of a {@link UncaughtExceptionHandler}.&#10; * The {@linkplain ClassLoader#getSystemClassLoader() system class loader}&#10; * is used to load this class.&#10; * <li>{@code java.util.concurrent.ForkJoinPool.common.maximumSpares}&#10; * - the maximum number of allowed extra threads to maintain target&#10; * parallelism (default 256).&#10; * </ul>&#10; * If no thread factory is supplied via a system property, then the&#10; * common pool uses a factory that uses the system class loader as the&#10; * {@linkplain Thread#getContextClassLoader() thread context class loader}.&#10; * In addition, if a {@link SecurityManager} is present, then&#10; * the common pool uses a factory supplying threads that have no&#10; * {@link Permissions} enabled.&#10; *&#10; * Upon any error in establishing these settings, default parameters&#10; * are used. It is possible to disable or limit the use of threads in&#10; * the common pool by setting the parallelism property to zero, and/or&#10; * using a factory that may return {@code null}. However doing so may&#10; * cause unjoined tasks to never be executed.&#10; *&#10; * <p><b>Implementation notes:</b> This implementation restricts the&#10; * maximum number of running threads to 32767. Attempts to create&#10; * pools with greater than the maximum number result in&#10; * {@code IllegalArgumentException}.&#10; *&#10; * <p>This implementation rejects submitted tasks (that is, by throwing&#10; * {@link RejectedExecutionException}) only when the pool is shut down&#10; * or internal resources have been exhausted.&#10; *&#10; * @since 1.7&#10; * @author Doug Lea&#10; "
  ]
  node [
    id 136
    label "private static void checkPermission()"
    type "method"
    comment "&#10;     * If there is a security manager, makes sure caller has&#10;     * permission to modify threads.&#10;     "
  ]
  node [
    id 137
    label "private boolean createWorker()"
    type "method"
    comment "&#10;     * Tries to construct and start one worker. Assumes that total&#10;     * count has already been incremented as a reservation.  Invokes&#10;     * deregisterWorker on any failure.&#10;     *&#10;     * @return true if successful&#10;     "
  ]
  node [
    id 138
    label " final String nextWorkerThreadName()"
    type "method"
    comment "&#10;     * Provides a name for ForkJoinWorkerThread constructor.&#10;     "
  ]
  node [
    id 139
    label " final void registerWorker(WorkQueue w)"
    type "method"
    comment "&#10;     * Finishes initializing and records owned queue.&#10;     *&#10;     * @param w caller's WorkQueue&#10;     "
  ]
  node [
    id 140
    label " final void deregisterWorker(ForkJoinWorkerThread wt, Throwable ex)"
    type "method"
    comment "&#10;     * Final callback from terminating worker, as well as upon failure&#10;     * to construct or start a worker.  Removes record of worker from&#10;     * array, and adjusts counts. If pool is shutting down, tries to&#10;     * complete termination.&#10;     *&#10;     * @param wt the worker thread, or null if construction failed&#10;     * @param ex the exception causing failure, or null if none&#10;     "
  ]
  node [
    id 141
    label " final void signalWork()"
    type "method"
    comment "&#10;     * Tries to create or release a worker if too few are running.&#10;     "
  ]
  node [
    id 142
    label " final void runWorker(WorkQueue w)"
    type "method"
    comment "&#10;     * Top-level runloop for workers, called by ForkJoinWorkerThread.run.&#10;     * See above for explanation.&#10;     *&#10;     * @param w caller's WorkQueue (may be null on failed initialization)&#10;     "
  ]
  node [
    id 143
    label "private int scan(WorkQueue w, int prevSrc, int r)"
    type "method"
    comment "&#10;     * Scans for and if found executes top-level tasks: Tries to poll&#10;     * each queue starting at a random index with random stride,&#10;     * returning source id or retry indicator if contended or&#10;     * inconsistent.&#10;     *&#10;     * @param w caller's WorkQueue&#10;     * @param prevSrc the previous queue stolen from in current phase, or 0&#10;     * @param r random seed&#10;     * @return id of queue if taken, negative if none found, prevSrc for retry&#10;     "
  ]
  node [
    id 144
    label "private int awaitWork(WorkQueue w)"
    type "method"
    comment "&#10;     * Advances worker phase, pushes onto ctl stack, and awaits signal&#10;     * or reports termination.&#10;     *&#10;     * @return negative if terminated, else 0&#10;     "
  ]
  node [
    id 145
    label " final boolean canStop()"
    type "method"
    comment "&#10;     * Returns true if can start terminating if enabled, or already terminated&#10;     "
  ]
  node [
    id 146
    label "private int tryCompensate(long c)"
    type "method"
    comment "&#10;     * Tries to decrement counts (sometimes implicitly) and possibly&#10;     * arrange for a compensating worker in preparation for&#10;     * blocking. May fail due to interference, in which case -1 is&#10;     * returned so caller may retry. A zero return value indicates&#10;     * that the caller doesn't need to re-adjust counts when later&#10;     * unblocked.&#10;     *&#10;     * @param c incoming ctl value&#10;     * @return UNCOMPENSATE: block then adjust, 0: block, -1 : retry&#10;     "
  ]
  node [
    id 147
    label " final void uncompensate()"
    type "method"
    comment "&#10;     * Readjusts RC count; called from ForkJoinTask after blocking.&#10;     "
  ]
  node [
    id 148
    label " final int helpJoin(ForkJoinTask<?> task, WorkQueue w, boolean canHelp)"
    type "method"
    comment "&#10;     * Helps if possible until the given task is done.  Scans other&#10;     * queues for a task produced by one of w's stealers; returning&#10;     * compensated blocking sentinel if none are found.&#10;     *&#10;     * @param task the task&#10;     * @param w caller's WorkQueue&#10;     * @param canHelp if false, compensate only&#10;     * @return task status on exit, or UNCOMPENSATE for compensated blocking&#10;     "
  ]
  node [
    id 149
    label " final int helpComplete(ForkJoinTask<?> task, WorkQueue w, boolean owned)"
    type "method"
    comment "&#10;     * Extra helpJoin steps for CountedCompleters.  Scans for and runs&#10;     * subtasks of the given root task, returning if none are found.&#10;     *&#10;     * @param task root of CountedCompleter computation&#10;     * @param w caller's WorkQueue&#10;     * @param owned true if owned by a ForkJoinWorkerThread&#10;     * @return task status on exit&#10;     "
  ]
  node [
    id 150
    label "private ForkJoinTask<?> pollScan(boolean submissionsOnly)"
    type "method"
    comment "&#10;     * Scans for and returns a polled task, if available.  Used only&#10;     * for untracked polls. Begins scan at an index (scanRover)&#10;     * advanced on each call, to avoid systematic unfairness.&#10;     *&#10;     * @param submissionsOnly if true, only scan submission queues&#10;     "
  ]
  node [
    id 151
    label " final int helpQuiescePool(WorkQueue w, long nanos, boolean interruptible)"
    type "method"
    comment "&#10;     * Runs tasks until {@code isQuiescent()}. Rather than blocking&#10;     * when tasks cannot be found, rescans until all others cannot&#10;     * find tasks either.&#10;     *&#10;     * @param nanos max wait time (Long.MAX_VALUE if effectively untimed)&#10;     * @param interruptible true if return on interrupt&#10;     * @return positive if quiescent, negative if interrupted, else 0&#10;     "
  ]
  node [
    id 152
    label " final int externalHelpQuiescePool(long nanos, boolean interruptible)"
    type "method"
    comment "&#10;     * Helps quiesce from external caller until done, interrupted, or timeout&#10;     *&#10;     * @param nanos max wait time (Long.MAX_VALUE if effectively untimed)&#10;     * @param interruptible true if return on interrupt&#10;     * @return positive if quiescent, negative if interrupted, else 0&#10;     "
  ]
  node [
    id 153
    label " final ForkJoinTask<?> nextTaskFor(WorkQueue w)"
    type "method"
    comment "&#10;     * Gets and removes a local or stolen task for the given worker.&#10;     *&#10;     * @return a task, if available&#10;     "
  ]
  node [
    id 154
    label " final WorkQueue submissionQueue()"
    type "method"
    comment "&#10;     * Finds and locks a WorkQueue for an external submitter, or&#10;     * returns null if shutdown or terminating.&#10;     "
  ]
  node [
    id 155
    label " final void externalPush(ForkJoinTask<?> task)"
    type "method"
    comment "&#10;     * Adds the given task to an external submission queue, or throws&#10;     * exception if shutdown or terminating.&#10;     *&#10;     * @param task the task. Caller must ensure non-null.&#10;     "
  ]
  node [
    id 156
    label "private ForkJoinTask<T> externalSubmit(ForkJoinTask<T> task)"
    type "method"
    comment "&#10;     * Pushes a possibly-external submission.&#10;     "
  ]
  node [
    id 157
    label " static WorkQueue commonQueue()"
    type "method"
    comment "&#10;     * Returns common pool queue for an external thread that has&#10;     * possibly ever submitted a common pool task (nonzero probe), or&#10;     * null if none.&#10;     "
  ]
  node [
    id 158
    label " final WorkQueue externalQueue()"
    type "method"
    comment "&#10;     * Returns queue for an external thread, if one exists&#10;     "
  ]
  node [
    id 159
    label " static void helpAsyncBlocker(Executor e, ManagedBlocker blocker)"
    type "method"
    comment "&#10;     * If the given executor is a ForkJoinPool, poll and execute&#10;     * AsynchronousCompletionTasks from worker's queue until none are&#10;     * available or blocker is released.&#10;     "
  ]
  node [
    id 160
    label " static int getSurplusQueuedTaskCount()"
    type "method"
    comment "&#10;     * Returns a cheap heuristic guide for task partitioning when&#10;     * programmers, frameworks, tools, or languages have little or no&#10;     * idea about task granularity.  In essence, by offering this&#10;     * method, we ask users only about tradeoffs in overhead vs&#10;     * expected throughput and its variance, rather than how finely to&#10;     * partition tasks.&#10;     *&#10;     * In a steady state strict (tree-structured) computation, each&#10;     * thread makes available for stealing enough tasks for other&#10;     * threads to remain active. Inductively, if all threads play by&#10;     * the same rules, each thread should make available only a&#10;     * constant number of tasks.&#10;     *&#10;     * The minimum useful constant is just 1. But using a value of 1&#10;     * would require immediate replenishment upon each steal to&#10;     * maintain enough tasks, which is infeasible.  Further,&#10;     * partitionings/granularities of offered tasks should minimize&#10;     * steal rates, which in general means that threads nearer the top&#10;     * of computation tree should generate more than those nearer the&#10;     * bottom. In perfect steady state, each thread is at&#10;     * approximately the same level of computation tree. However,&#10;     * producing extra tasks amortizes the uncertainty of progress and&#10;     * diffusion assumptions.&#10;     *&#10;     * So, users will want to use values larger (but not much larger)&#10;     * than 1 to both smooth over transient shortages and hedge&#10;     * against uneven progress; as traded off against the cost of&#10;     * extra task overhead. We leave the user to pick a threshold&#10;     * value to compare with the results of this call to guide&#10;     * decisions, but recommend values such as 3.&#10;     *&#10;     * When all threads are active, it is on average OK to estimate&#10;     * surplus strictly locally. In steady-state, if one thread is&#10;     * maintaining say 2 surplus tasks, then so are others. So we can&#10;     * just use estimated queue length.  However, this strategy alone&#10;     * leads to serious mis-estimates in some non-steady-state&#10;     * conditions (ramp-up, ramp-down, other stalls). We can detect&#10;     * many of these by further considering the number of &#34;idle&#34;&#10;     * threads, that are known to have zero queued tasks, so&#10;     * compensate by a factor of (#idle/#active) threads.&#10;     "
  ]
  node [
    id 161
    label "private boolean tryTerminate(boolean now, boolean enable)"
    type "method"
    comment "&#10;     * Possibly initiates and/or completes termination.&#10;     *&#10;     * @param now if true, unconditionally terminate, else only&#10;     * if no work and no active workers&#10;     * @param enable if true, terminate when next possible&#10;     * @return true if terminating or terminated&#10;     "
  ]
  node [
    id 162
    label "private static Object newInstanceFromSystemProperty(String property) throws ReflectiveOperationException"
    type "method"
    comment " helper method for commonPool constructor"
  ]
  node [
    id 163
    label "public static ForkJoinPool commonPool()"
    type "method"
    comment "&#10;     * Returns the common pool instance. This pool is statically&#10;     * constructed; its run state is unaffected by attempts to {@link&#10;     * #shutdown} or {@link #shutdownNow}. However this pool and any&#10;     * ongoing processing are automatically terminated upon program&#10;     * {@link System#exit}.  Any program that relies on asynchronous&#10;     * task processing to complete before program termination should&#10;     * invoke {@code commonPool().}{@link #awaitQuiescence awaitQuiescence},&#10;     * before exit.&#10;     *&#10;     * @return the common pool instance&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 164
    label "shutdownNow"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 165
    label "shutdown"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 166
    label "awaitQuiescence"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 167
    label "exit"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 168
    label "public T invoke(ForkJoinTask<T> task)"
    type "method"
    comment "&#10;     * Performs the given task, returning its result upon completion.&#10;     * If the computation encounters an unchecked Exception or Error,&#10;     * it is rethrown as the outcome of this invocation.  Rethrown&#10;     * exceptions behave in the same way as regular exceptions, but,&#10;     * when possible, contain stack traces (as displayed for example&#10;     * using {@code ex.printStackTrace()}) of both the current thread&#10;     * as well as the thread actually encountering the exception;&#10;     * minimally only the latter.&#10;     *&#10;     * @param task the task&#10;     * @param <T> the type of the task's result&#10;     * @return the task's result&#10;     * @throws NullPointerException if the task is null&#10;     * @throws RejectedExecutionException if the task cannot be&#10;     *         scheduled for execution&#10;     "
  ]
  node [
    id 169
    label "public void execute(ForkJoinTask<?> task)"
    type "method"
    comment "&#10;     * Arranges for (asynchronous) execution of the given task.&#10;     *&#10;     * @param task the task&#10;     * @throws NullPointerException if the task is null&#10;     * @throws RejectedExecutionException if the task cannot be&#10;     *         scheduled for execution&#10;     "
  ]
  node [
    id 170
    label "public void execute(Runnable task)"
    type "method"
    comment "&#10;     * @throws NullPointerException if the task is null&#10;     * @throws RejectedExecutionException if the task cannot be&#10;     *         scheduled for execution&#10;     "
  ]
  node [
    id 171
    label "public ForkJoinTask<T> submit(ForkJoinTask<T> task)"
    type "method"
    comment "&#10;     * Submits a ForkJoinTask for execution.&#10;     *&#10;     * @param task the task to submit&#10;     * @param <T> the type of the task's result&#10;     * @return the task&#10;     * @throws NullPointerException if the task is null&#10;     * @throws RejectedExecutionException if the task cannot be&#10;     *         scheduled for execution&#10;     "
  ]
  node [
    id 172
    label "public ForkJoinTask<T> submit(Callable<T> task)"
    type "method"
    comment "&#10;     * @throws NullPointerException if the task is null&#10;     * @throws RejectedExecutionException if the task cannot be&#10;     *         scheduled for execution&#10;     "
  ]
  node [
    id 173
    label "public ForkJoinTask<T> submit(Runnable task, T result)"
    type "method"
    comment "&#10;     * @throws NullPointerException if the task is null&#10;     * @throws RejectedExecutionException if the task cannot be&#10;     *         scheduled for execution&#10;     "
  ]
  node [
    id 174
    label "public ForkJoinTask<?> submit(Runnable task)"
    type "method"
    comment "&#10;     * @throws NullPointerException if the task is null&#10;     * @throws RejectedExecutionException if the task cannot be&#10;     *         scheduled for execution&#10;     "
  ]
  node [
    id 175
    label "public List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks)"
    type "method"
    comment "&#10;     * @throws NullPointerException       {@inheritDoc}&#10;     * @throws RejectedExecutionException {@inheritDoc}&#10;     "
  ]
  node [
    id 176
    label "public ForkJoinWorkerThreadFactory getFactory()"
    type "method"
    comment "&#10;     * Returns the factory used for constructing new workers.&#10;     *&#10;     * @return the factory used for constructing new workers&#10;     "
  ]
  node [
    id 177
    label "public UncaughtExceptionHandler getUncaughtExceptionHandler()"
    type "method"
    comment "&#10;     * Returns the handler invoked when this thread abruptly terminates&#10;     * due to an uncaught exception. If this thread has not had an&#10;     * uncaught exception handler explicitly set then this thread's&#10;     * {@code ThreadGroup} object is returned, unless this thread&#10;     * has terminated, in which case {@code null} is returned.&#10;     * @since 1.5&#10;     * @return the uncaught exception handler for this thread&#10;     "
  ]
  node [
    id 178
    label "public int getParallelism()"
    type "method"
    comment "&#10;     * Returns the targeted parallelism level of this pool.&#10;     *&#10;     * @return the targeted parallelism level of this pool&#10;     "
  ]
  node [
    id 179
    label "public static int getCommonPoolParallelism()"
    type "method"
    comment "&#10;     * Returns the targeted parallelism level of the common pool.&#10;     *&#10;     * @return the targeted parallelism level of the common pool&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 180
    label "public int getPoolSize()"
    type "method"
    comment "&#10;     * Returns the number of worker threads that have started but not&#10;     * yet terminated.  The result returned by this method may differ&#10;     * from {@link #getParallelism} when threads are created to&#10;     * maintain parallelism when others are cooperatively blocked.&#10;     *&#10;     * @return the number of worker threads&#10;     "
  ]
  node [
    id 181
    label "getParallelism"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 182
    label "public boolean getAsyncMode()"
    type "method"
    comment "&#10;     * Returns {@code true} if this pool uses local first-in-first-out&#10;     * scheduling mode for forked tasks that are never joined.&#10;     *&#10;     * @return {@code true} if this pool uses async mode&#10;     "
  ]
  node [
    id 183
    label "public int getRunningThreadCount()"
    type "method"
    comment "&#10;     * Returns an estimate of the number of worker threads that are&#10;     * not blocked waiting to join tasks or for other managed&#10;     * synchronization. This method may overestimate the&#10;     * number of running threads.&#10;     *&#10;     * @return the number of worker threads&#10;     "
  ]
  node [
    id 184
    label "public int getActiveThreadCount()"
    type "method"
    comment "&#10;     * Returns an estimate of the number of threads that are currently&#10;     * stealing or executing tasks. This method may overestimate the&#10;     * number of active threads.&#10;     *&#10;     * @return the number of active threads&#10;     "
  ]
  node [
    id 185
    label "public boolean isQuiescent()"
    type "method"
    comment "&#10;     * Returns {@code true} if all worker threads are currently idle.&#10;     * An idle worker is one that cannot obtain a task to execute&#10;     * because none are available to steal from other threads, and&#10;     * there are no pending submissions to the pool. This method is&#10;     * conservative; it might not return {@code true} immediately upon&#10;     * idleness of all threads, but will eventually become true if&#10;     * threads remain inactive.&#10;     *&#10;     * @return {@code true} if all threads are currently idle&#10;     "
  ]
  node [
    id 186
    label "public long getStealCount()"
    type "method"
    comment "&#10;     * Returns an estimate of the total number of completed tasks that&#10;     * were executed by a thread other than their submitter. The&#10;     * reported value underestimates the actual total number of steals&#10;     * when the pool is not quiescent. This value may be useful for&#10;     * monitoring and tuning fork/join programs: in general, steal&#10;     * counts should be high enough to keep threads busy, but low&#10;     * enough to avoid overhead and contention across threads.&#10;     *&#10;     * @return the number of steals&#10;     "
  ]
  node [
    id 187
    label "public long getQueuedTaskCount()"
    type "method"
    comment "&#10;     * Returns an estimate of the total number of tasks currently held&#10;     * in queues by worker threads (but not including tasks submitted&#10;     * to the pool that have not begun executing). This value is only&#10;     * an approximation, obtained by iterating across all threads in&#10;     * the pool. This method may be useful for tuning task&#10;     * granularities.&#10;     *&#10;     * @return the number of queued tasks&#10;     "
  ]
  node [
    id 188
    label "public int getQueuedSubmissionCount()"
    type "method"
    comment "&#10;     * Returns an estimate of the number of tasks submitted to this&#10;     * pool that have not yet begun executing.  This method may take&#10;     * time proportional to the number of submissions.&#10;     *&#10;     * @return the number of queued submissions&#10;     "
  ]
  node [
    id 189
    label "public boolean hasQueuedSubmissions()"
    type "method"
    comment "&#10;     * Returns {@code true} if there are any tasks submitted to this&#10;     * pool that have not yet begun executing.&#10;     *&#10;     * @return {@code true} if there are any queued submissions&#10;     "
  ]
  node [
    id 190
    label "protected ForkJoinTask<?> pollSubmission()"
    type "method"
    comment "&#10;     * Removes and returns the next unexecuted submission if one is&#10;     * available.  This method may be useful in extensions to this&#10;     * class that re-assign work in systems with multiple pools.&#10;     *&#10;     * @return the next submission, or {@code null} if none&#10;     "
  ]
  node [
    id 191
    label "protected int drainTasksTo(Collection<? super ForkJoinTask<?>> c)"
    type "method"
    comment "&#10;     * Removes all available unexecuted submitted and forked tasks&#10;     * from scheduling queues and adds them to the given collection,&#10;     * without altering their execution status. These may include&#10;     * artificially generated or wrapped tasks. This method is&#10;     * designed to be invoked only when the pool is known to be&#10;     * quiescent. Invocations at other times may not remove all&#10;     * tasks. A failure encountered while attempting to add elements&#10;     * to collection {@code c} may result in elements being in&#10;     * neither, either or both collections when the associated&#10;     * exception is thrown.  The behavior of this operation is&#10;     * undefined if the specified collection is modified while the&#10;     * operation is in progress.&#10;     *&#10;     * @param c the collection to transfer elements into&#10;     * @return the number of elements transferred&#10;     "
  ]
  node [
    id 192
    label "public String toString()"
    type "method"
    comment "&#10;     * Returns a string representation of this {@code Double} object.&#10;     * The primitive {@code double} value represented by this&#10;     * object is converted to a string exactly as if by the method&#10;     * {@code toString} of one argument.&#10;     *&#10;     * @return  a {@code String} representation of this object.&#10;     * @see java.lang.Double#toString(double)&#10;     "
  ]
  node [
    id 193
    label "public void shutdown()"
    type "method"
    comment "&#10;     * Possibly initiates an orderly shutdown in which previously&#10;     * submitted tasks are executed, but no new tasks will be&#10;     * accepted. Invocation has no effect on execution state if this&#10;     * is the {@link #commonPool()}, and no additional effect if&#10;     * already shut down.  Tasks that are in the process of being&#10;     * submitted concurrently during the course of this method may or&#10;     * may not be rejected.&#10;     *&#10;     * @throws SecurityException if a security manager exists and&#10;     *         the caller is not permitted to modify threads&#10;     *         because it does not hold {@link&#10;     *         java.lang.RuntimePermission}{@code (&#34;modifyThread&#34;)}&#10;     "
  ]
  node [
    id 194
    label "java.lang.RuntimePermission"
    type "class"
    comment ""
  ]
  node [
    id 195
    label "public List<Runnable> shutdownNow()"
    type "method"
    comment "&#10;     * Possibly attempts to cancel and/or stop all tasks, and reject&#10;     * all subsequently submitted tasks.  Invocation has no effect on&#10;     * execution state if this is the {@link #commonPool()}, and no&#10;     * additional effect if already shut down. Otherwise, tasks that&#10;     * are in the process of being submitted or executed concurrently&#10;     * during the course of this method may or may not be&#10;     * rejected. This method cancels both existing and unexecuted&#10;     * tasks, in order to permit termination in the presence of task&#10;     * dependencies. So the method always returns an empty list&#10;     * (unlike the case for some other Executors).&#10;     *&#10;     * @return an empty list&#10;     * @throws SecurityException if a security manager exists and&#10;     *         the caller is not permitted to modify threads&#10;     *         because it does not hold {@link&#10;     *         java.lang.RuntimePermission}{@code (&#34;modifyThread&#34;)}&#10;     "
  ]
  node [
    id 196
    label "public boolean isTerminated()"
    type "method"
    comment "&#10;     * Returns {@code true} if all tasks have completed following shut down.&#10;     *&#10;     * @return {@code true} if all tasks have completed following shut down&#10;     "
  ]
  node [
    id 197
    label "public boolean isTerminating()"
    type "method"
    comment "&#10;     * Returns {@code true} if the process of termination has&#10;     * commenced but not yet completed.  This method may be useful for&#10;     * debugging. A return of {@code true} reported a sufficient&#10;     * period after shutdown may indicate that submitted tasks have&#10;     * ignored or suppressed interruption, or are waiting for I/O,&#10;     * causing this executor not to properly terminate. (See the&#10;     * advisory notes for class {@link ForkJoinTask} stating that&#10;     * tasks should not normally entail blocking operations.  But if&#10;     * they do, they must abort them on interrupt.)&#10;     *&#10;     * @return {@code true} if terminating but not yet terminated&#10;     "
  ]
  node [
    id 198
    label "java.util.concurrent.ForkJoinTask"
    type "class"
    comment "&#10; * Abstract base class for tasks that run within a {@link ForkJoinPool}.&#10; * A {@code ForkJoinTask} is a thread-like entity that is much&#10; * lighter weight than a normal thread.  Huge numbers of tasks and&#10; * subtasks may be hosted by a small number of actual threads in a&#10; * ForkJoinPool, at the price of some usage limitations.&#10; *&#10; * <p>A &#34;main&#34; {@code ForkJoinTask} begins execution when it is&#10; * explicitly submitted to a {@link ForkJoinPool}, or, if not already&#10; * engaged in a ForkJoin computation, commenced in the {@link&#10; * ForkJoinPool#commonPool()} via {@link #fork}, {@link #invoke}, or&#10; * related methods.  Once started, it will usually in turn start other&#10; * subtasks.  As indicated by the name of this class, many programs&#10; * using {@code ForkJoinTask} employ only methods {@link #fork} and&#10; * {@link #join}, or derivatives such as {@link&#10; * #invokeAll(ForkJoinTask...) invokeAll}.  However, this class also&#10; * provides a number of other methods that can come into play in&#10; * advanced usages, as well as extension mechanics that allow support&#10; * of new forms of fork/join processing.&#10; *&#10; * <p>A {@code ForkJoinTask} is a lightweight form of {@link Future}.&#10; * The efficiency of {@code ForkJoinTask}s stems from a set of&#10; * restrictions (that are only partially statically enforceable)&#10; * reflecting their main use as computational tasks calculating pure&#10; * functions or operating on purely isolated objects.  The primary&#10; * coordination mechanisms are {@link #fork}, that arranges&#10; * asynchronous execution, and {@link #join}, that doesn't proceed&#10; * until the task's result has been computed.  Computations should&#10; * ideally avoid {@code synchronized} methods or blocks, and should&#10; * minimize other blocking synchronization apart from joining other&#10; * tasks or using synchronizers such as Phasers that are advertised to&#10; * cooperate with fork/join scheduling. Subdividable tasks should also&#10; * not perform blocking I/O, and should ideally access variables that&#10; * are completely independent of those accessed by other running&#10; * tasks. These guidelines are loosely enforced by not permitting&#10; * checked exceptions such as {@code IOExceptions} to be&#10; * thrown. However, computations may still encounter unchecked&#10; * exceptions, that are rethrown to callers attempting to join&#10; * them. These exceptions may additionally include {@link&#10; * RejectedExecutionException} stemming from internal resource&#10; * exhaustion, such as failure to allocate internal task&#10; * queues. Rethrown exceptions behave in the same way as regular&#10; * exceptions, but, when possible, contain stack traces (as displayed&#10; * for example using {@code ex.printStackTrace()}) of both the thread&#10; * that initiated the computation as well as the thread actually&#10; * encountering the exception; minimally only the latter.&#10; *&#10; * <p>It is possible to define and use ForkJoinTasks that may block,&#10; * but doing so requires three further considerations: (1) Completion&#10; * of few if any <em>other</em> tasks should be dependent on a task&#10; * that blocks on external synchronization or I/O. Event-style async&#10; * tasks that are never joined (for example, those subclassing {@link&#10; * CountedCompleter}) often fall into this category.  (2) To minimize&#10; * resource impact, tasks should be small; ideally performing only the&#10; * (possibly) blocking action. (3) Unless the {@link&#10; * ForkJoinPool.ManagedBlocker} API is used, or the number of possibly&#10; * blocked tasks is known to be less than the pool's {@link&#10; * ForkJoinPool#getParallelism} level, the pool cannot guarantee that&#10; * enough threads will be available to ensure progress or good&#10; * performance.&#10; *&#10; * <p>The primary method for awaiting completion and extracting&#10; * results of a task is {@link #join}, but there are several variants:&#10; * The {@link Future#get} methods support interruptible and/or timed&#10; * waits for completion and report results using {@code Future}&#10; * conventions. Method {@link #invoke} is semantically&#10; * equivalent to {@code fork(); join()} but always attempts to begin&#10; * execution in the current thread. The &#34;<em>quiet</em>&#34; forms of&#10; * these methods do not extract results or report exceptions. These&#10; * may be useful when a set of tasks are being executed, and you need&#10; * to delay processing of results or exceptions until all complete.&#10; * Method {@code invokeAll} (available in multiple versions)&#10; * performs the most common form of parallel invocation: forking a set&#10; * of tasks and joining them all.&#10; *&#10; * <p>In the most typical usages, a fork-join pair act like a call&#10; * (fork) and return (join) from a parallel recursive function. As is&#10; * the case with other forms of recursive calls, returns (joins)&#10; * should be performed innermost-first. For example, {@code a.fork();&#10; * b.fork(); b.join(); a.join();} is likely to be substantially more&#10; * efficient than joining {@code a} before {@code b}.&#10; *&#10; * <p>The execution status of tasks may be queried at several levels&#10; * of detail: {@link #isDone} is true if a task completed in any way&#10; * (including the case where a task was cancelled without executing);&#10; * {@link #isCompletedNormally} is true if a task completed without&#10; * cancellation or encountering an exception; {@link #isCancelled} is&#10; * true if the task was cancelled (in which case {@link #getException}&#10; * returns a {@link CancellationException}); and&#10; * {@link #isCompletedAbnormally} is true if a task was either&#10; * cancelled or encountered an exception, in which case {@link&#10; * #getException} will return either the encountered exception or&#10; * {@link CancellationException}.&#10; *&#10; * <p>The ForkJoinTask class is not usually directly subclassed.&#10; * Instead, you subclass one of the abstract classes that support a&#10; * particular style of fork/join processing, typically {@link&#10; * RecursiveAction} for most computations that do not return results,&#10; * {@link RecursiveTask} for those that do, and {@link&#10; * CountedCompleter} for those in which completed actions trigger&#10; * other actions.  Normally, a concrete ForkJoinTask subclass declares&#10; * fields comprising its parameters, established in a constructor, and&#10; * then defines a {@code compute} method that somehow uses the control&#10; * methods supplied by this base class.&#10; *&#10; * <p>Method {@link #join} and its variants are appropriate for use&#10; * only when completion dependencies are acyclic; that is, the&#10; * parallel computation can be described as a directed acyclic graph&#10; * (DAG). Otherwise, executions may encounter a form of deadlock as&#10; * tasks cyclically wait for each other.  However, this framework&#10; * supports other methods and techniques (for example the use of&#10; * {@link Phaser}, {@link #helpQuiesce}, and {@link #complete}) that&#10; * may be of use in constructing custom subclasses for problems that&#10; * are not statically structured as DAGs. To support such usages, a&#10; * ForkJoinTask may be atomically <em>tagged</em> with a {@code short}&#10; * value using {@link #setForkJoinTaskTag} or {@link&#10; * #compareAndSetForkJoinTaskTag} and checked using {@link&#10; * #getForkJoinTaskTag}. The ForkJoinTask implementation does not use&#10; * these {@code protected} methods or tags for any purpose, but they&#10; * may be of use in the construction of specialized subclasses.  For&#10; * example, parallel graph traversals can use the supplied methods to&#10; * avoid revisiting nodes/tasks that have already been processed.&#10; * (Method names for tagging are bulky in part to encourage definition&#10; * of methods that reflect their usage patterns.)&#10; *&#10; * <p>Most base support methods are {@code final}, to prevent&#10; * overriding of implementations that are intrinsically tied to the&#10; * underlying lightweight task scheduling framework.  Developers&#10; * creating new basic styles of fork/join processing should minimally&#10; * implement {@code protected} methods {@link #exec}, {@link&#10; * #setRawResult}, and {@link #getRawResult}, while also introducing&#10; * an abstract computational method that can be implemented in its&#10; * subclasses, possibly relying on other {@code protected} methods&#10; * provided by this class.&#10; *&#10; * <p>ForkJoinTasks should perform relatively small amounts of&#10; * computation. Large tasks should be split into smaller subtasks,&#10; * usually via recursive decomposition. As a very rough rule of thumb,&#10; * a task should perform more than 100 and less than 10000 basic&#10; * computational steps, and should avoid indefinite looping. If tasks&#10; * are too big, then parallelism cannot improve throughput. If too&#10; * small, then memory and internal task maintenance overhead may&#10; * overwhelm processing.&#10; *&#10; * <p>This class provides {@code adapt} methods for {@link Runnable}&#10; * and {@link Callable}, that may be of use when mixing execution of&#10; * {@code ForkJoinTasks} with other kinds of tasks. When all tasks are&#10; * of this form, consider using a pool constructed in <em>asyncMode</em>.&#10; *&#10; * <p>ForkJoinTasks are {@code Serializable}, which enables them to be&#10; * used in extensions such as remote execution frameworks. It is&#10; * sensible to serialize tasks only before or after, but not during,&#10; * execution. Serialization is not relied on during execution itself.&#10; *&#10; * @since 1.7&#10; * @author Doug Lea&#10; "
  ]
  node [
    id 199
    label "private void signalWaiters()"
    type "method"
    comment " Removes and unparks waiters "
  ]
  node [
    id 200
    label "private int setDone()"
    type "method"
    comment "&#10;     * Sets DONE status and wakes up threads waiting to join this task.&#10;     * @return status on exit&#10;     "
  ]
  node [
    id 201
    label "private int trySetCancelled()"
    type "method"
    comment "&#10;     * Sets ABNORMAL DONE status unless already done, and wakes up threads&#10;     * waiting to join this task.&#10;     * @return status on exit&#10;     "
  ]
  node [
    id 202
    label " final int trySetThrown(Throwable ex)"
    type "method"
    comment "&#10;     * Records exception and sets ABNORMAL THROWN DONE status unless&#10;     * already done, and wakes up threads waiting to join this task.&#10;     * If losing a race with setDone or trySetCancelled, the exception&#10;     * may be recorded but not reported.&#10;     *&#10;     * @return status on exit&#10;     "
  ]
  node [
    id 203
    label " int trySetException(Throwable ex)"
    type "method"
    comment "&#10;     * Records exception unless already done. Overridable in subclasses.&#10;     *&#10;     * @return status on exit&#10;     "
  ]
  node [
    id 204
    label " final int doExec()"
    type "method"
    comment "&#10;     * Unless done, calls exec and records status if completed, but&#10;     * doesn't wait for completion otherwise.&#10;     *&#10;     * @return status on exit from this method&#10;     "
  ]
  node [
    id 205
    label "private int awaitDone(ForkJoinPool pool, boolean ran, boolean interruptible, boolean timed, long nanos)"
    type "method"
    comment "&#10;     * Helps and/or waits for completion from join, get, or invoke;&#10;     * called from either internal or external threads.&#10;     *&#10;     * @param pool if nonnull, known submitted pool, else assumes current pool&#10;     * @param ran true if task known to have been exec'd&#10;     * @param interruptible true if park interruptibly when external&#10;     * @param timed true if use timed wait&#10;     * @param nanos if timed, timeout value&#10;     * @return ABNORMAL if interrupted, else status on exit&#10;     "
  ]
  node [
    id 206
    label " static final void cancelIgnoringExceptions(Future<?> t)"
    type "method"
    comment "&#10;     * Cancels, ignoring any exceptions thrown by cancel.  Cancel is&#10;     * spec'ed not to throw any exceptions, but if it does anyway, we&#10;     * have no recourse, so guard against this case.&#10;     "
  ]
  node [
    id 207
    label "private Throwable getThrowableException()"
    type "method"
    comment "&#10;     * Returns a rethrowable exception for this task, if available.&#10;     * To provide accurate stack traces, if the exception was not&#10;     * thrown by the current thread, we try to create a new exception&#10;     * of the same type as the one thrown, but with the recorded&#10;     * exception as its cause. If there is no such constructor, we&#10;     * instead try to use a no-arg constructor, followed by initCause,&#10;     * to the same effect. If none of these apply, or any fail due to&#10;     * other exceptions, we return the recorded exception, which is&#10;     * still correct, although it may contain a misleading stack&#10;     * trace.&#10;     *&#10;     * @return the exception, or null if none&#10;     "
  ]
  node [
    id 208
    label "private Throwable getException(int s)"
    type "method"
    comment "&#10;     * Returns exception associated with the given status, or null if none.&#10;     "
  ]
  node [
    id 209
    label "private void reportException(int s)"
    type "method"
    comment "&#10;     * Throws exception associated with the given status, or&#10;     * CancellationException if none recorded.&#10;     "
  ]
  node [
    id 210
    label "private void reportExecutionException(int s)"
    type "method"
    comment "&#10;     * Throws exception for (timed or untimed) get, wrapping if&#10;     * necessary in an ExecutionException.&#10;     "
  ]
  node [
    id 211
    label " static void rethrow(Throwable ex)"
    type "method"
    comment "&#10;     * A version of &#34;sneaky throw&#34; to relay exceptions in other&#10;     * contexts.&#10;     "
  ]
  node [
    id 212
    label " static void uncheckedThrow(Throwable t) throws T"
    type "method"
    comment "&#10;     * The sneaky part of sneaky throw, relying on generics&#10;     * limitations to evade compiler complaints about rethrowing&#10;     * unchecked exceptions. If argument null, throws&#10;     * CancellationException.&#10;     "
  ]
  node [
    id 213
    label "public final ForkJoinTask<V> fork()"
    type "method"
    comment "&#10;     * Arranges to asynchronously execute this task in the pool the&#10;     * current task is running in, if applicable, or using the {@link&#10;     * ForkJoinPool#commonPool()} if not {@link #inForkJoinPool}.  While&#10;     * it is not necessarily enforced, it is a usage error to fork a&#10;     * task more than once unless it has completed and been&#10;     * reinitialized.  Subsequent modifications to the state of this&#10;     * task or any data it operates on are not necessarily&#10;     * consistently observable by any thread other than the one&#10;     * executing it unless preceded by a call to {@link #join} or&#10;     * related methods, or a call to {@link #isDone} returning {@code&#10;     * true}.&#10;     *&#10;     * @return {@code this}, to simplify usage&#10;     "
  ]
  node [
    id 214
    label "join"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 215
    label "isDone"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 216
    label "inForkJoinPool"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 217
    label "public final V join()"
    type "method"
    comment "&#10;     * Returns the result of the computation when it&#10;     * {@linkplain #isDone is done}.&#10;     * This method differs from {@link #get()} in that abnormal&#10;     * completion results in {@code RuntimeException} or {@code Error},&#10;     * not {@code ExecutionException}, and that interrupts of the&#10;     * calling thread do <em>not</em> cause the method to abruptly&#10;     * return by throwing {@code InterruptedException}.&#10;     *&#10;     * @return the computed result&#10;     "
  ]
  node [
    id 218
    label "get()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 219
    label "public final V invoke()"
    type "method"
    comment "&#10;     * Commences performing this task, awaits its completion if&#10;     * necessary, and returns its result, or throws an (unchecked)&#10;     * {@code RuntimeException} or {@code Error} if the underlying&#10;     * computation did so.&#10;     *&#10;     * @return the computed result&#10;     "
  ]
  node [
    id 220
    label "public static void invokeAll(ForkJoinTask<?> t1, ForkJoinTask<?> t2)"
    type "method"
    comment "&#10;     * Forks the given tasks, returning when {@code isDone} holds for&#10;     * each task or an (unchecked) exception is encountered, in which&#10;     * case the exception is rethrown. If more than one task&#10;     * encounters an exception, then this method throws any one of&#10;     * these exceptions. If any task encounters an exception, the&#10;     * other may be cancelled. However, the execution status of&#10;     * individual tasks is not guaranteed upon exceptional return. The&#10;     * status of each task may be obtained using {@link&#10;     * #getException()} and related methods to check if they have been&#10;     * cancelled, completed normally or exceptionally, or left&#10;     * unprocessed.&#10;     *&#10;     * @param t1 the first task&#10;     * @param t2 the second task&#10;     * @throws NullPointerException if any task is null&#10;     "
  ]
  node [
    id 221
    label "getException()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 222
    label "public static void invokeAll(ForkJoinTask<?>... tasks)"
    type "method"
    comment "&#10;     * Forks the given tasks, returning when {@code isDone} holds for&#10;     * each task or an (unchecked) exception is encountered, in which&#10;     * case the exception is rethrown. If more than one task&#10;     * encounters an exception, then this method throws any one of&#10;     * these exceptions. If any task encounters an exception, others&#10;     * may be cancelled. However, the execution status of individual&#10;     * tasks is not guaranteed upon exceptional return. The status of&#10;     * each task may be obtained using {@link #getException()} and&#10;     * related methods to check if they have been cancelled, completed&#10;     * normally or exceptionally, or left unprocessed.&#10;     *&#10;     * @param tasks the tasks&#10;     * @throws NullPointerException if any task is null&#10;     "
  ]
  node [
    id 223
    label "public static Collection<T> invokeAll(Collection<T> tasks)"
    type "method"
    comment "&#10;     * Forks all tasks in the specified collection, returning when&#10;     * {@code isDone} holds for each task or an (unchecked) exception&#10;     * is encountered, in which case the exception is rethrown. If&#10;     * more than one task encounters an exception, then this method&#10;     * throws any one of these exceptions. If any task encounters an&#10;     * exception, others may be cancelled. However, the execution&#10;     * status of individual tasks is not guaranteed upon exceptional&#10;     * return. The status of each task may be obtained using {@link&#10;     * #getException()} and related methods to check if they have been&#10;     * cancelled, completed normally or exceptionally, or left&#10;     * unprocessed.&#10;     *&#10;     * @param tasks the collection of tasks&#10;     * @param <T> the type of the values returned from the tasks&#10;     * @return the tasks argument, to simplify usage&#10;     * @throws NullPointerException if tasks or any element are null&#10;     "
  ]
  node [
    id 224
    label "public boolean cancel(boolean mayInterruptIfRunning)"
    type "method"
    comment "&#10;     * Attempts to cancel execution of this task. This attempt will&#10;     * fail if the task has already completed or could not be&#10;     * cancelled for some other reason. If successful, and this task&#10;     * has not started when {@code cancel} is called, execution of&#10;     * this task is suppressed. After this method returns&#10;     * successfully, unless there is an intervening call to {@link&#10;     * #reinitialize}, subsequent calls to {@link #isCancelled},&#10;     * {@link #isDone}, and {@code cancel} will return {@code true}&#10;     * and calls to {@link #join} and related methods will result in&#10;     * {@code CancellationException}.&#10;     *&#10;     * <p>This method may be overridden in subclasses, but if so, must&#10;     * still ensure that these properties hold. In particular, the&#10;     * {@code cancel} method itself must not throw exceptions.&#10;     *&#10;     * <p>This method is designed to be invoked by <em>other</em>&#10;     * tasks. To terminate the current task, you can just return or&#10;     * throw an unchecked exception from its computation method, or&#10;     * invoke {@link #completeExceptionally(Throwable)}.&#10;     *&#10;     * @param mayInterruptIfRunning this value has no effect in the&#10;     * default implementation because interrupts are not used to&#10;     * control cancellation.&#10;     *&#10;     * @return {@code true} if this task is now cancelled&#10;     "
  ]
  node [
    id 225
    label "isCancelled"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 226
    label "completeExceptionally(Throwable)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 227
    label "reinitialize"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 228
    label "public final boolean isCompletedAbnormally()"
    type "method"
    comment "&#10;     * Returns {@code true} if this task threw an exception or was cancelled.&#10;     *&#10;     * @return {@code true} if this task threw an exception or was cancelled&#10;     "
  ]
  node [
    id 229
    label "public final boolean isCompletedNormally()"
    type "method"
    comment "&#10;     * Returns {@code true} if this task completed without throwing an&#10;     * exception and was not cancelled.&#10;     *&#10;     * @return {@code true} if this task completed without throwing an&#10;     * exception and was not cancelled&#10;     "
  ]
  node [
    id 230
    label "public final Throwable getException()"
    type "method"
    comment "&#10;     * Returns the exception thrown by the base computation, or a&#10;     * {@code CancellationException} if cancelled, or {@code null} if&#10;     * none or if the method has not yet completed.&#10;     *&#10;     * @return the exception, or {@code null} if none&#10;     "
  ]
  node [
    id 231
    label "public void completeExceptionally(Throwable ex)"
    type "method"
    comment "&#10;     * Completes this task abnormally, and if not already aborted or&#10;     * cancelled, causes it to throw the given exception upon&#10;     * {@code join} and related operations. This method may be used&#10;     * to induce exceptions in asynchronous tasks, or to force&#10;     * completion of tasks that would not otherwise complete.  Its use&#10;     * in other situations is discouraged.  This method is&#10;     * overridable, but overridden versions must invoke {@code super}&#10;     * implementation to maintain guarantees.&#10;     *&#10;     * @param ex the exception to throw. If this exception is not a&#10;     * {@code RuntimeException} or {@code Error}, the actual exception&#10;     * thrown will be a {@code RuntimeException} with cause {@code ex}.&#10;     "
  ]
  node [
    id 232
    label "public void complete(V value)"
    type "method"
    comment "&#10;     * Completes this task, and if not already aborted or cancelled,&#10;     * returning the given value as the result of subsequent&#10;     * invocations of {@code join} and related operations. This method&#10;     * may be used to provide results for asynchronous tasks, or to&#10;     * provide alternative handling for tasks that would not otherwise&#10;     * complete normally. Its use in other situations is&#10;     * discouraged. This method is overridable, but overridden&#10;     * versions must invoke {@code super} implementation to maintain&#10;     * guarantees.&#10;     *&#10;     * @param value the result value for this task&#10;     "
  ]
  node [
    id 233
    label "public final void quietlyComplete()"
    type "method"
    comment "&#10;     * Completes this task normally without setting a value. The most&#10;     * recent value established by {@link #setRawResult} (or {@code&#10;     * null} by default) will be returned as the result of subsequent&#10;     * invocations of {@code join} and related operations.&#10;     *&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 234
    label "setRawResult"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 235
    label "public final V get() throws InterruptedException, ExecutionException"
    type "method"
    comment "&#10;     * Waits if necessary for the computation to complete, and then&#10;     * retrieves its result.&#10;     *&#10;     * @return the computed result&#10;     * @throws CancellationException if the computation was cancelled&#10;     * @throws ExecutionException if the computation threw an&#10;     * exception&#10;     * @throws InterruptedException if the current thread is not a&#10;     * member of a ForkJoinPool and was interrupted while waiting&#10;     "
  ]
  node [
    id 236
    label "public final V get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException"
    type "method"
    comment "&#10;     * Waits if necessary for at most the given time for the computation&#10;     * to complete, and then retrieves its result, if available.&#10;     *&#10;     * @param timeout the maximum time to wait&#10;     * @param unit the time unit of the timeout argument&#10;     * @return the computed result&#10;     * @throws CancellationException if the computation was cancelled&#10;     * @throws ExecutionException if the computation threw an&#10;     * exception&#10;     * @throws InterruptedException if the current thread is not a&#10;     * member of a ForkJoinPool and was interrupted while waiting&#10;     * @throws TimeoutException if the wait timed out&#10;     "
  ]
  node [
    id 237
    label "public final void quietlyJoin()"
    type "method"
    comment "&#10;     * Joins this task, without returning its result or throwing its&#10;     * exception. This method may be useful when processing&#10;     * collections of tasks when some have been cancelled or otherwise&#10;     * known to have aborted.&#10;     "
  ]
  node [
    id 238
    label "public final void quietlyInvoke()"
    type "method"
    comment "&#10;     * Commences performing this task and awaits its completion if&#10;     * necessary, without returning its result or throwing its&#10;     * exception.&#10;     "
  ]
  node [
    id 239
    label "public static void helpQuiesce()"
    type "method"
    comment "&#10;     * Possibly executes tasks until the pool hosting the current task&#10;     * {@linkplain ForkJoinPool#isQuiescent is quiescent}.  This&#10;     * method may be of use in designs in which many tasks are forked,&#10;     * but none are explicitly joined, instead executing them until&#10;     * all are processed.&#10;     "
  ]
  node [
    id 240
    label "public void reinitialize()"
    type "method"
    comment "&#10;     * Resets the internal bookkeeping state of this task, allowing a&#10;     * subsequent {@code fork}. This method allows repeated reuse of&#10;     * this task, but only if reuse occurs when this task has either&#10;     * never been forked, or has been forked, then completed and all&#10;     * outstanding joins of this task have also completed. Effects&#10;     * under any other usage conditions are not guaranteed.&#10;     * This method may be useful when executing&#10;     * pre-constructed trees of subtasks in loops.&#10;     *&#10;     * <p>Upon completion of this method, {@code isDone()} reports&#10;     * {@code false}, and {@code getException()} reports {@code&#10;     * null}. However, the value returned by {@code getRawResult} is&#10;     * unaffected. To clear this value, you can invoke {@code&#10;     * setRawResult(null)}.&#10;     "
  ]
  node [
    id 241
    label "public static ForkJoinPool getPool()"
    type "method"
    comment "&#10;     * Returns the pool hosting the current thread, or {@code null}&#10;     * if the current thread is executing outside of any ForkJoinPool.&#10;     *&#10;     * <p>This method returns {@code null} if and only if {@link&#10;     * #inForkJoinPool} returns {@code false}.&#10;     *&#10;     * @return the pool, or {@code null} if none&#10;     "
  ]
  node [
    id 242
    label "public static boolean inForkJoinPool()"
    type "method"
    comment "&#10;     * Returns {@code true} if the current thread is a {@link&#10;     * ForkJoinWorkerThread} executing as a ForkJoinPool computation.&#10;     *&#10;     * @return {@code true} if the current thread is a {@link&#10;     * ForkJoinWorkerThread} executing as a ForkJoinPool computation,&#10;     * or {@code false} otherwise&#10;     "
  ]
  node [
    id 243
    label "java.util.concurrent.ForkJoinWorkerThread"
    type "class"
    comment "&#10; * A thread managed by a {@link ForkJoinPool}, which executes&#10; * {@link ForkJoinTask}s.&#10; * This class is subclassable solely for the sake of adding&#10; * functionality -- there are no overridable methods dealing with&#10; * scheduling or execution.  However, you can override initialization&#10; * and termination methods surrounding the main task processing loop.&#10; * If you do create such a subclass, you will also need to supply a&#10; * custom {@link ForkJoinPool.ForkJoinWorkerThreadFactory} to&#10; * {@linkplain ForkJoinPool#ForkJoinPool(int, ForkJoinWorkerThreadFactory,&#10; * UncaughtExceptionHandler, boolean, int, int, int, Predicate, long, TimeUnit)&#10; * use it} in a {@code ForkJoinPool}.&#10; *&#10; * @since 1.7&#10; * @author Doug Lea&#10; "
  ]
  node [
    id 244
    label "public ForkJoinPool getPool()"
    type "method"
    comment "&#10;     * Returns the pool hosting this thread.&#10;     *&#10;     * @return the pool&#10;     "
  ]
  node [
    id 245
    label "public int getPoolIndex()"
    type "method"
    comment "&#10;     * Returns the unique index number of this thread in its pool.&#10;     * The returned value ranges from zero to the maximum number of&#10;     * threads (minus one) that may exist in the pool, and does not&#10;     * change during the lifetime of the thread.  This method may be&#10;     * useful for applications that track status or collect results&#10;     * per-worker-thread rather than per-task.&#10;     *&#10;     * @return the index number&#10;     "
  ]
  node [
    id 246
    label "protected void onStart()"
    type "method"
    comment "&#10;     * Initializes internal state after construction but before&#10;     * processing any tasks. If you override this method, you must&#10;     * invoke {@code super.onStart()} at the beginning of the method.&#10;     * Initialization requires care: Most fields must have legal&#10;     * default values, to ensure that attempted accesses from other&#10;     * threads work correctly even before this thread starts&#10;     * processing tasks.&#10;     "
  ]
  node [
    id 247
    label "protected void onTermination(Throwable exception)"
    type "method"
    comment "&#10;     * Performs cleanup associated with termination of this worker&#10;     * thread.  If you override this method, you must invoke&#10;     * {@code super.onTermination} at the end of the overridden method.&#10;     *&#10;     * @param exception the exception causing this thread to abort due&#10;     * to an unrecoverable error, or {@code null} if completed normally&#10;     "
  ]
  node [
    id 248
    label "public void run()"
    type "method"
    comment "&#10;     * If this thread was constructed using a separate&#10;     * {@code Runnable} run object, then that&#10;     * {@code Runnable} object's {@code run} method is called;&#10;     * otherwise, this method does nothing and returns.&#10;     * <p>&#10;     * Subclasses of {@code Thread} should override this method.&#10;     *&#10;     * @see     #start()&#10;     * @see     #stop()&#10;     * @see     #Thread(ThreadGroup, Runnable, String)&#10;     "
  ]
  node [
    id 249
    label "public boolean tryUnfork()"
    type "method"
    comment "&#10;     * Tries to unschedule this task for execution. This method will&#10;     * typically (but is not guaranteed to) succeed if this task is&#10;     * the most recently forked task by the current thread, and has&#10;     * not commenced executing in another thread.  This method may be&#10;     * useful when arranging alternative local processing of tasks&#10;     * that could have been, but were not, stolen.&#10;     *&#10;     * @return {@code true} if unforked&#10;     "
  ]
  node [
    id 250
    label "public static int getQueuedTaskCount()"
    type "method"
    comment "&#10;     * Returns an estimate of the number of tasks that have been&#10;     * forked by the current worker thread but not yet executed. This&#10;     * value may be useful for heuristic decisions about whether to&#10;     * fork other tasks.&#10;     *&#10;     * @return the number of tasks&#10;     "
  ]
  node [
    id 251
    label "public static int getSurplusQueuedTaskCount()"
    type "method"
    comment "&#10;     * Returns an estimate of how many more locally queued tasks are&#10;     * held by the current worker thread than there are other worker&#10;     * threads that might steal them, or zero if this thread is not&#10;     * operating in a ForkJoinPool. This value may be useful for&#10;     * heuristic decisions about whether to fork other tasks. In many&#10;     * usages of ForkJoinTasks, at steady state, each worker should&#10;     * aim to maintain a small constant surplus (for example, 3) of&#10;     * tasks, and to process computations locally if this threshold is&#10;     * exceeded.&#10;     *&#10;     * @return the surplus number of tasks, which may be negative&#10;     "
  ]
  node [
    id 252
    label "public abstract V getRawResult()"
    type "method"
    comment "&#10;     * Returns the result that would be returned by {@link #join}, even&#10;     * if this task completed abnormally, or {@code null} if this task&#10;     * is not known to have been completed.  This method is designed&#10;     * to aid debugging, as well as to support extensions. Its use in&#10;     * any other context is discouraged.&#10;     *&#10;     * @return the result, or {@code null} if not completed&#10;     "
  ]
  node [
    id 253
    label "protected abstract void setRawResult(V value)"
    type "method"
    comment "&#10;     * Forces the given value to be returned as a result.  This method&#10;     * is designed to support extensions, and should not in general be&#10;     * called otherwise.&#10;     *&#10;     * @param value the value&#10;     "
  ]
  node [
    id 254
    label "protected abstract boolean exec()"
    type "method"
    comment "&#10;     * Immediately performs the base action of this task and returns&#10;     * true if, upon return from this method, this task is guaranteed&#10;     * to have completed. This method may return false otherwise, to&#10;     * indicate that this task is not necessarily complete (or is not&#10;     * known to be complete), for example in asynchronous actions that&#10;     * require explicit invocations of completion methods. This method&#10;     * may also throw an (unchecked) exception to indicate abnormal&#10;     * exit. This method is designed to support extensions, and should&#10;     * not in general be called otherwise.&#10;     *&#10;     * @return {@code true} if this task is known to have completed normally&#10;     "
  ]
  node [
    id 255
    label "protected static ForkJoinTask<?> peekNextLocalTask()"
    type "method"
    comment "&#10;     * Returns, but does not unschedule or execute, a task queued by&#10;     * the current thread but not yet executed, if one is immediately&#10;     * available. There is no guarantee that this task will actually&#10;     * be polled or executed next. Conversely, this method may return&#10;     * null even if a task exists but cannot be accessed without&#10;     * contention with other threads.  This method is designed&#10;     * primarily to support extensions, and is unlikely to be useful&#10;     * otherwise.&#10;     *&#10;     * @return the next task, or {@code null} if none are available&#10;     "
  ]
  node [
    id 256
    label "protected static ForkJoinTask<?> pollNextLocalTask()"
    type "method"
    comment "&#10;     * Unschedules and returns, without executing, the next task&#10;     * queued by the current thread but not yet executed, if the&#10;     * current thread is operating in a ForkJoinPool.  This method is&#10;     * designed primarily to support extensions, and is unlikely to be&#10;     * useful otherwise.&#10;     *&#10;     * @return the next task, or {@code null} if none are available&#10;     "
  ]
  node [
    id 257
    label "protected static ForkJoinTask<?> pollTask()"
    type "method"
    comment "&#10;     * If the current thread is operating in a ForkJoinPool,&#10;     * unschedules and returns, without executing, the next task&#10;     * queued by the current thread but not yet executed, if one is&#10;     * available, or if not available, a task that was forked by some&#10;     * other thread, if available. Availability may be transient, so a&#10;     * {@code null} result does not necessarily imply quiescence of&#10;     * the pool this task is operating in.  This method is designed&#10;     * primarily to support extensions, and is unlikely to be useful&#10;     * otherwise.&#10;     *&#10;     * @return a task, or {@code null} if none are available&#10;     "
  ]
  node [
    id 258
    label "public final short getForkJoinTaskTag()"
    type "method"
    comment "&#10;     * Returns the tag for this task.&#10;     *&#10;     * @return the tag for this task&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 259
    label "public final short setForkJoinTaskTag(short newValue)"
    type "method"
    comment "&#10;     * Atomically sets the tag value for this task and returns the old value.&#10;     *&#10;     * @param newValue the new tag value&#10;     * @return the previous value of the tag&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 260
    label "public final boolean compareAndSetForkJoinTaskTag(short expect, short update)"
    type "method"
    comment "&#10;     * Atomically conditionally sets the tag value for this task.&#10;     * Among other applications, tags can be used as visit markers&#10;     * in tasks operating on graphs, as in methods that check: {@code&#10;     * if (task.compareAndSetForkJoinTaskTag((short)0, (short)1))}&#10;     * before processing, otherwise exiting because the node has&#10;     * already been visited.&#10;     *&#10;     * @param expect the expected tag value&#10;     * @param update the new tag value&#10;     * @return {@code true} if successful; i.e., the current value was&#10;     * equal to {@code expect} and was changed to {@code update}.&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 261
    label "public static ForkJoinTask<?> adapt(Runnable runnable)"
    type "method"
    comment "&#10;     * Returns a new {@code ForkJoinTask} that performs the {@code run}&#10;     * method of the given {@code Runnable} as its action, and returns&#10;     * a null result upon {@link #join}.&#10;     *&#10;     * @param runnable the runnable action&#10;     * @return the task&#10;     "
  ]
  node [
    id 262
    label "public static ForkJoinTask<T> adapt(Runnable runnable, T result)"
    type "method"
    comment "&#10;     * Returns a new {@code ForkJoinTask} that performs the {@code run}&#10;     * method of the given {@code Runnable} as its action, and returns&#10;     * the given result upon {@link #join}.&#10;     *&#10;     * @param runnable the runnable action&#10;     * @param result the result upon completion&#10;     * @param <T> the type of the result&#10;     * @return the task&#10;     "
  ]
  node [
    id 263
    label "public static ForkJoinTask<T> adapt(Callable<? extends T> callable)"
    type "method"
    comment "&#10;     * Returns a new {@code ForkJoinTask} that performs the {@code call}&#10;     * method of the given {@code Callable} as its action, and returns&#10;     * its result upon {@link #join}, translating any checked exceptions&#10;     * encountered into {@code RuntimeException}.&#10;     *&#10;     * @param callable the callable action&#10;     * @param <T> the type of the callable's result&#10;     * @return the task&#10;     "
  ]
  node [
    id 264
    label "private static ForkJoinTask<T> adaptInterruptible(Callable<? extends T> callable)"
    type "method"
    comment " TODO: public "
  ]
  node [
    id 265
    label "private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException"
    type "method"
    comment "&#10;     * Saves this task to a stream (that is, serializes it).&#10;     *&#10;     * @param s the stream&#10;     * @throws java.io.IOException if an I/O error occurs&#10;     * @serialData the current run status and the exception thrown&#10;     * during execution, or {@code null} if none&#10;     "
  ]
  node [
    id 266
    label "private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException"
    type "method"
    comment "&#10;     * Recompile the Pattern instance from a stream.  The original pattern&#10;     * string is read in and the object tree is recompiled from it.&#10;     "
  ]
  node [
    id 267
    label "public boolean isShutdown()"
    type "method"
    comment "&#10;     * Returns {@code true} if this pool has been shut down.&#10;     *&#10;     * @return {@code true} if this pool has been shut down&#10;     "
  ]
  node [
    id 268
    label "public boolean awaitTermination(long timeout, TimeUnit unit) throws InterruptedException"
    type "method"
    comment "&#10;     * Blocks until all tasks have completed execution after a&#10;     * shutdown request, or the timeout occurs, or the current thread&#10;     * is interrupted, whichever happens first. Because the {@link&#10;     * #commonPool()} never terminates until program shutdown, when&#10;     * applied to the common pool, this method is equivalent to {@link&#10;     * #awaitQuiescence(long, TimeUnit)} but always returns {@code false}.&#10;     *&#10;     * @param timeout the maximum time to wait&#10;     * @param unit the time unit of the timeout argument&#10;     * @return {@code true} if this executor terminated and&#10;     *         {@code false} if the timeout elapsed before termination&#10;     * @throws InterruptedException if interrupted while waiting&#10;     "
  ]
  node [
    id 269
    label "awaitQuiescence(long"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 270
    label "public boolean awaitQuiescence(long timeout, TimeUnit unit)"
    type "method"
    comment "&#10;     * If called by a ForkJoinTask operating in this pool, equivalent&#10;     * in effect to {@link ForkJoinTask#helpQuiesce}. Otherwise,&#10;     * waits and/or attempts to assist performing tasks until this&#10;     * pool {@link #isQuiescent} or the indicated timeout elapses.&#10;     *&#10;     * @param timeout the maximum time to wait&#10;     * @param unit the time unit of the timeout argument&#10;     * @return {@code true} if quiescent; {@code false} if the&#10;     * timeout elapsed.&#10;     "
  ]
  node [
    id 271
    label "isQuiescent"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 272
    label "public static void managedBlock(ManagedBlocker blocker) throws InterruptedException"
    type "method"
    comment "&#10;     * Runs the given possibly blocking task.  When {@linkplain&#10;     * ForkJoinTask#inForkJoinPool() running in a ForkJoinPool}, this&#10;     * method possibly arranges for a spare thread to be activated if&#10;     * necessary to ensure sufficient parallelism while the current&#10;     * thread is blocked in {@link ManagedBlocker#block blocker.block()}.&#10;     *&#10;     * <p>This method repeatedly calls {@code blocker.isReleasable()} and&#10;     * {@code blocker.block()} until either method returns {@code true}.&#10;     * Every call to {@code blocker.block()} is preceded by a call to&#10;     * {@code blocker.isReleasable()} that returned {@code false}.&#10;     *&#10;     * <p>If not running in a ForkJoinPool, this method is&#10;     * behaviorally equivalent to&#10;     * <pre> {@code&#10;     * while (!blocker.isReleasable())&#10;     *   if (blocker.block())&#10;     *     break;}</pre>&#10;     *&#10;     * If running in a ForkJoinPool, the pool may first be expanded to&#10;     * ensure sufficient parallelism available during the call to&#10;     * {@code blocker.block()}.&#10;     *&#10;     * @param blocker the blocker task&#10;     * @throws InterruptedException if {@code blocker.block()} did so&#10;     "
  ]
  node [
    id 273
    label "block"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 274
    label "private void compensatedBlock(ManagedBlocker blocker) throws InterruptedException"
    type "method"
    comment " ManagedBlock for ForkJoinWorkerThreads "
  ]
  node [
    id 275
    label "private static void unmanagedBlock(ManagedBlocker blocker) throws InterruptedException"
    type "method"
    comment " ManagedBlock for external threads "
  ]
  node [
    id 276
    label "sort(Object"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 277
    label "public static void parallelSort(T[] a, int fromIndex, int toIndex)"
    type "method"
    comment "&#10;     * Sorts the specified range of the specified array of objects into&#10;     * ascending order, according to the&#10;     * {@linkplain Comparable natural ordering} of its&#10;     * elements.  The range to be sorted extends from index&#10;     * {@code fromIndex}, inclusive, to index {@code toIndex}, exclusive.&#10;     * (If {@code fromIndex==toIndex}, the range to be sorted is empty.)  All&#10;     * elements in this range must implement the {@link Comparable}&#10;     * interface.  Furthermore, all elements in this range must be <i>mutually&#10;     * comparable</i> (that is, {@code e1.compareTo(e2)} must not throw a&#10;     * {@code ClassCastException} for any elements {@code e1} and&#10;     * {@code e2} in the array).&#10;     *&#10;     * <p>This sort is guaranteed to be <i>stable</i>:  equal elements will&#10;     * not be reordered as a result of the sort.&#10;     *&#10;     * @implNote The sorting algorithm is a parallel sort-merge that breaks the&#10;     * array into sub-arrays that are themselves sorted and then merged. When&#10;     * the sub-array length reaches a minimum granularity, the sub-array is&#10;     * sorted using the appropriate {@link Arrays#sort(Object[]) Arrays.sort}&#10;     * method. If the length of the specified array is less than the minimum&#10;     * granularity, then it is sorted using the appropriate {@link&#10;     * Arrays#sort(Object[]) Arrays.sort} method. The algorithm requires a working&#10;     * space no greater than the size of the specified range of the original&#10;     * array. The {@link ForkJoinPool#commonPool() ForkJoin common pool} is&#10;     * used to execute any parallel tasks.&#10;     *&#10;     * @param <T> the class of the objects to be sorted&#10;     * @param a the array to be sorted&#10;     * @param fromIndex the index of the first element (inclusive) to be&#10;     *        sorted&#10;     * @param toIndex the index of the last element (exclusive) to be sorted&#10;     * @throws IllegalArgumentException if {@code fromIndex > toIndex} or&#10;     *         (optional) if the natural ordering of the array elements is&#10;     *         found to violate the {@link Comparable} contract&#10;     * @throws ArrayIndexOutOfBoundsException if {@code fromIndex < 0} or&#10;     *         {@code toIndex > a.length}&#10;     * @throws ClassCastException if the array contains elements that are&#10;     *         not <i>mutually comparable</i> (for example, strings and&#10;     *         integers).&#10;     *&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 278
    label "public static void parallelSort(T[] a, Comparator<? super T> cmp)"
    type "method"
    comment "&#10;     * Sorts the specified array of objects according to the order induced by&#10;     * the specified comparator.  All elements in the array must be&#10;     * <i>mutually comparable</i> by the specified comparator (that is,&#10;     * {@code c.compare(e1, e2)} must not throw a {@code ClassCastException}&#10;     * for any elements {@code e1} and {@code e2} in the array).&#10;     *&#10;     * <p>This sort is guaranteed to be <i>stable</i>:  equal elements will&#10;     * not be reordered as a result of the sort.&#10;     *&#10;     * @implNote The sorting algorithm is a parallel sort-merge that breaks the&#10;     * array into sub-arrays that are themselves sorted and then merged. When&#10;     * the sub-array length reaches a minimum granularity, the sub-array is&#10;     * sorted using the appropriate {@link Arrays#sort(Object[]) Arrays.sort}&#10;     * method. If the length of the specified array is less than the minimum&#10;     * granularity, then it is sorted using the appropriate {@link&#10;     * Arrays#sort(Object[]) Arrays.sort} method. The algorithm requires a&#10;     * working space no greater than the size of the original array. The&#10;     * {@link ForkJoinPool#commonPool() ForkJoin common pool} is used to&#10;     * execute any parallel tasks.&#10;     *&#10;     * @param <T> the class of the objects to be sorted&#10;     * @param a the array to be sorted&#10;     * @param cmp the comparator to determine the order of the array.  A&#10;     *        {@code null} value indicates that the elements'&#10;     *        {@linkplain Comparable natural ordering} should be used.&#10;     * @throws ClassCastException if the array contains elements that are&#10;     *         not <i>mutually comparable</i> using the specified comparator&#10;     * @throws IllegalArgumentException (optional) if the comparator is&#10;     *         found to violate the {@link java.util.Comparator} contract&#10;     *&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 279
    label "public static void parallelSort(T[] a, int fromIndex, int toIndex, Comparator<? super T> cmp)"
    type "method"
    comment "&#10;     * Sorts the specified range of the specified array of objects according&#10;     * to the order induced by the specified comparator.  The range to be&#10;     * sorted extends from index {@code fromIndex}, inclusive, to index&#10;     * {@code toIndex}, exclusive.  (If {@code fromIndex==toIndex}, the&#10;     * range to be sorted is empty.)  All elements in the range must be&#10;     * <i>mutually comparable</i> by the specified comparator (that is,&#10;     * {@code c.compare(e1, e2)} must not throw a {@code ClassCastException}&#10;     * for any elements {@code e1} and {@code e2} in the range).&#10;     *&#10;     * <p>This sort is guaranteed to be <i>stable</i>:  equal elements will&#10;     * not be reordered as a result of the sort.&#10;     *&#10;     * @implNote The sorting algorithm is a parallel sort-merge that breaks the&#10;     * array into sub-arrays that are themselves sorted and then merged. When&#10;     * the sub-array length reaches a minimum granularity, the sub-array is&#10;     * sorted using the appropriate {@link Arrays#sort(Object[]) Arrays.sort}&#10;     * method. If the length of the specified array is less than the minimum&#10;     * granularity, then it is sorted using the appropriate {@link&#10;     * Arrays#sort(Object[]) Arrays.sort} method. The algorithm requires a working&#10;     * space no greater than the size of the specified range of the original&#10;     * array. The {@link ForkJoinPool#commonPool() ForkJoin common pool} is&#10;     * used to execute any parallel tasks.&#10;     *&#10;     * @param <T> the class of the objects to be sorted&#10;     * @param a the array to be sorted&#10;     * @param fromIndex the index of the first element (inclusive) to be&#10;     *        sorted&#10;     * @param toIndex the index of the last element (exclusive) to be sorted&#10;     * @param cmp the comparator to determine the order of the array.  A&#10;     *        {@code null} value indicates that the elements'&#10;     *        {@linkplain Comparable natural ordering} should be used.&#10;     * @throws IllegalArgumentException if {@code fromIndex > toIndex} or&#10;     *         (optional) if the natural ordering of the array elements is&#10;     *         found to violate the {@link Comparable} contract&#10;     * @throws ArrayIndexOutOfBoundsException if {@code fromIndex < 0} or&#10;     *         {@code toIndex > a.length}&#10;     * @throws ClassCastException if the array contains elements that are&#10;     *         not <i>mutually comparable</i> (for example, strings and&#10;     *         integers).&#10;     *&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 280
    label "public static void sort(Object[] a)"
    type "method"
    comment "&#10;     * Sorts the specified array of objects into ascending order, according&#10;     * to the {@linkplain Comparable natural ordering} of its elements.&#10;     * All elements in the array must implement the {@link Comparable}&#10;     * interface.  Furthermore, all elements in the array must be&#10;     * <i>mutually comparable</i> (that is, {@code e1.compareTo(e2)} must&#10;     * not throw a {@code ClassCastException} for any elements {@code e1}&#10;     * and {@code e2} in the array).&#10;     *&#10;     * <p>This sort is guaranteed to be <i>stable</i>:  equal elements will&#10;     * not be reordered as a result of the sort.&#10;     *&#10;     * <p>Implementation note: This implementation is a stable, adaptive,&#10;     * iterative mergesort that requires far fewer than n lg(n) comparisons&#10;     * when the input array is partially sorted, while offering the&#10;     * performance of a traditional mergesort when the input array is&#10;     * randomly ordered.  If the input array is nearly sorted, the&#10;     * implementation requires approximately n comparisons.  Temporary&#10;     * storage requirements vary from a small constant for nearly sorted&#10;     * input arrays to n/2 object references for randomly ordered input&#10;     * arrays.&#10;     *&#10;     * <p>The implementation takes equal advantage of ascending and&#10;     * descending order in its input array, and can take advantage of&#10;     * ascending and descending order in different parts of the same&#10;     * input array.  It is well-suited to merging two or more sorted arrays:&#10;     * simply concatenate the arrays and sort the resulting array.&#10;     *&#10;     * <p>The implementation was adapted from Tim Peters's list sort for Python&#10;     * (<a href=&#34;http://svn.python.org/projects/python/trunk/Objects/listsort.txt&#34;>&#10;     * TimSort</a>).  It uses techniques from Peter McIlroy's &#34;Optimistic&#10;     * Sorting and Information Theoretic Complexity&#34;, in Proceedings of the&#10;     * Fourth Annual ACM-SIAM Symposium on Discrete Algorithms, pp 467-474,&#10;     * January 1993.&#10;     *&#10;     * @param a the array to be sorted&#10;     * @throws ClassCastException if the array contains elements that are not&#10;     *         <i>mutually comparable</i> (for example, strings and integers)&#10;     * @throws IllegalArgumentException (optional) if the natural&#10;     *         ordering of the array elements is found to violate the&#10;     *         {@link Comparable} contract&#10;     "
  ]
  node [
    id 281
    label "public static void sort(Object[] a, int fromIndex, int toIndex)"
    type "method"
    comment "&#10;     * Sorts the specified range of the specified array of objects into&#10;     * ascending order, according to the&#10;     * {@linkplain Comparable natural ordering} of its&#10;     * elements.  The range to be sorted extends from index&#10;     * {@code fromIndex}, inclusive, to index {@code toIndex}, exclusive.&#10;     * (If {@code fromIndex==toIndex}, the range to be sorted is empty.)  All&#10;     * elements in this range must implement the {@link Comparable}&#10;     * interface.  Furthermore, all elements in this range must be <i>mutually&#10;     * comparable</i> (that is, {@code e1.compareTo(e2)} must not throw a&#10;     * {@code ClassCastException} for any elements {@code e1} and&#10;     * {@code e2} in the array).&#10;     *&#10;     * <p>This sort is guaranteed to be <i>stable</i>:  equal elements will&#10;     * not be reordered as a result of the sort.&#10;     *&#10;     * <p>Implementation note: This implementation is a stable, adaptive,&#10;     * iterative mergesort that requires far fewer than n lg(n) comparisons&#10;     * when the input array is partially sorted, while offering the&#10;     * performance of a traditional mergesort when the input array is&#10;     * randomly ordered.  If the input array is nearly sorted, the&#10;     * implementation requires approximately n comparisons.  Temporary&#10;     * storage requirements vary from a small constant for nearly sorted&#10;     * input arrays to n/2 object references for randomly ordered input&#10;     * arrays.&#10;     *&#10;     * <p>The implementation takes equal advantage of ascending and&#10;     * descending order in its input array, and can take advantage of&#10;     * ascending and descending order in different parts of the same&#10;     * input array.  It is well-suited to merging two or more sorted arrays:&#10;     * simply concatenate the arrays and sort the resulting array.&#10;     *&#10;     * <p>The implementation was adapted from Tim Peters's list sort for Python&#10;     * (<a href=&#34;http://svn.python.org/projects/python/trunk/Objects/listsort.txt&#34;>&#10;     * TimSort</a>).  It uses techniques from Peter McIlroy's &#34;Optimistic&#10;     * Sorting and Information Theoretic Complexity&#34;, in Proceedings of the&#10;     * Fourth Annual ACM-SIAM Symposium on Discrete Algorithms, pp 467-474,&#10;     * January 1993.&#10;     *&#10;     * @param a the array to be sorted&#10;     * @param fromIndex the index of the first element (inclusive) to be&#10;     *        sorted&#10;     * @param toIndex the index of the last element (exclusive) to be sorted&#10;     * @throws IllegalArgumentException if {@code fromIndex > toIndex} or&#10;     *         (optional) if the natural ordering of the array elements is&#10;     *         found to violate the {@link Comparable} contract&#10;     * @throws ArrayIndexOutOfBoundsException if {@code fromIndex < 0} or&#10;     *         {@code toIndex > a.length}&#10;     * @throws ClassCastException if the array contains elements that are&#10;     *         not <i>mutually comparable</i> (for example, strings and&#10;     *         integers).&#10;     "
  ]
  node [
    id 282
    label "private static void mergeSort(Object[] src, Object[] dest, int low, int high, int off)"
    type "method"
    comment "&#10;     * Src is the source array that starts at index 0&#10;     * Dest is the (possibly larger) array destination with a possible offset&#10;     * low is the index in dest to start sorting&#10;     * high is the end index in dest to end sorting&#10;     * off is the offset to generate corresponding low, high in src&#10;     * To be removed in a future release.&#10;     "
  ]
  node [
    id 283
    label "private static void swap(Object[] x, int a, int b)"
    type "method"
    comment "&#10;     * Swaps x[a] with x[b].&#10;     "
  ]
  node [
    id 284
    label "public static void sort(T[] a, Comparator<? super T> c)"
    type "method"
    comment "&#10;     * Sorts the specified array of objects according to the order induced by&#10;     * the specified comparator.  All elements in the array must be&#10;     * <i>mutually comparable</i> by the specified comparator (that is,&#10;     * {@code c.compare(e1, e2)} must not throw a {@code ClassCastException}&#10;     * for any elements {@code e1} and {@code e2} in the array).&#10;     *&#10;     * <p>This sort is guaranteed to be <i>stable</i>:  equal elements will&#10;     * not be reordered as a result of the sort.&#10;     *&#10;     * <p>Implementation note: This implementation is a stable, adaptive,&#10;     * iterative mergesort that requires far fewer than n lg(n) comparisons&#10;     * when the input array is partially sorted, while offering the&#10;     * performance of a traditional mergesort when the input array is&#10;     * randomly ordered.  If the input array is nearly sorted, the&#10;     * implementation requires approximately n comparisons.  Temporary&#10;     * storage requirements vary from a small constant for nearly sorted&#10;     * input arrays to n/2 object references for randomly ordered input&#10;     * arrays.&#10;     *&#10;     * <p>The implementation takes equal advantage of ascending and&#10;     * descending order in its input array, and can take advantage of&#10;     * ascending and descending order in different parts of the same&#10;     * input array.  It is well-suited to merging two or more sorted arrays:&#10;     * simply concatenate the arrays and sort the resulting array.&#10;     *&#10;     * <p>The implementation was adapted from Tim Peters's list sort for Python&#10;     * (<a href=&#34;http://svn.python.org/projects/python/trunk/Objects/listsort.txt&#34;>&#10;     * TimSort</a>).  It uses techniques from Peter McIlroy's &#34;Optimistic&#10;     * Sorting and Information Theoretic Complexity&#34;, in Proceedings of the&#10;     * Fourth Annual ACM-SIAM Symposium on Discrete Algorithms, pp 467-474,&#10;     * January 1993.&#10;     *&#10;     * @param <T> the class of the objects to be sorted&#10;     * @param a the array to be sorted&#10;     * @param c the comparator to determine the order of the array.  A&#10;     *        {@code null} value indicates that the elements'&#10;     *        {@linkplain Comparable natural ordering} should be used.&#10;     * @throws ClassCastException if the array contains elements that are&#10;     *         not <i>mutually comparable</i> using the specified comparator&#10;     * @throws IllegalArgumentException (optional) if the comparator is&#10;     *         found to violate the {@link Comparator} contract&#10;     "
  ]
  node [
    id 285
    label "public static void sort(T[] a, int fromIndex, int toIndex, Comparator<? super T> c)"
    type "method"
    comment "&#10;     * Sorts the specified range of the specified array of objects according&#10;     * to the order induced by the specified comparator.  The range to be&#10;     * sorted extends from index {@code fromIndex}, inclusive, to index&#10;     * {@code toIndex}, exclusive.  (If {@code fromIndex==toIndex}, the&#10;     * range to be sorted is empty.)  All elements in the range must be&#10;     * <i>mutually comparable</i> by the specified comparator (that is,&#10;     * {@code c.compare(e1, e2)} must not throw a {@code ClassCastException}&#10;     * for any elements {@code e1} and {@code e2} in the range).&#10;     *&#10;     * <p>This sort is guaranteed to be <i>stable</i>:  equal elements will&#10;     * not be reordered as a result of the sort.&#10;     *&#10;     * <p>Implementation note: This implementation is a stable, adaptive,&#10;     * iterative mergesort that requires far fewer than n lg(n) comparisons&#10;     * when the input array is partially sorted, while offering the&#10;     * performance of a traditional mergesort when the input array is&#10;     * randomly ordered.  If the input array is nearly sorted, the&#10;     * implementation requires approximately n comparisons.  Temporary&#10;     * storage requirements vary from a small constant for nearly sorted&#10;     * input arrays to n/2 object references for randomly ordered input&#10;     * arrays.&#10;     *&#10;     * <p>The implementation takes equal advantage of ascending and&#10;     * descending order in its input array, and can take advantage of&#10;     * ascending and descending order in different parts of the same&#10;     * input array.  It is well-suited to merging two or more sorted arrays:&#10;     * simply concatenate the arrays and sort the resulting array.&#10;     *&#10;     * <p>The implementation was adapted from Tim Peters's list sort for Python&#10;     * (<a href=&#34;http://svn.python.org/projects/python/trunk/Objects/listsort.txt&#34;>&#10;     * TimSort</a>).  It uses techniques from Peter McIlroy's &#34;Optimistic&#10;     * Sorting and Information Theoretic Complexity&#34;, in Proceedings of the&#10;     * Fourth Annual ACM-SIAM Symposium on Discrete Algorithms, pp 467-474,&#10;     * January 1993.&#10;     *&#10;     * @param <T> the class of the objects to be sorted&#10;     * @param a the array to be sorted&#10;     * @param fromIndex the index of the first element (inclusive) to be&#10;     *        sorted&#10;     * @param toIndex the index of the last element (exclusive) to be sorted&#10;     * @param c the comparator to determine the order of the array.  A&#10;     *        {@code null} value indicates that the elements'&#10;     *        {@linkplain Comparable natural ordering} should be used.&#10;     * @throws ClassCastException if the array contains elements that are not&#10;     *         <i>mutually comparable</i> using the specified comparator.&#10;     * @throws IllegalArgumentException if {@code fromIndex > toIndex} or&#10;     *         (optional) if the comparator is found to violate the&#10;     *         {@link Comparator} contract&#10;     * @throws ArrayIndexOutOfBoundsException if {@code fromIndex < 0} or&#10;     *         {@code toIndex > a.length}&#10;     "
  ]
  node [
    id 286
    label "public static void parallelPrefix(T[] array, BinaryOperator<T> op)"
    type "method"
    comment "&#10;     * Cumulates, in parallel, each element of the given array in place,&#10;     * using the supplied function. For example if the array initially&#10;     * holds {@code [2, 1, 0, 3]} and the operation performs addition,&#10;     * then upon return the array holds {@code [2, 3, 3, 6]}.&#10;     * Parallel prefix computation is usually more efficient than&#10;     * sequential loops for large arrays.&#10;     *&#10;     * @param <T> the class of the objects in the array&#10;     * @param array the array, which is modified in-place by this method&#10;     * @param op a side-effect-free, associative function to perform the&#10;     * cumulation&#10;     * @throws NullPointerException if the specified array or function is null&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 287
    label "public static void parallelPrefix(T[] array, int fromIndex, int toIndex, BinaryOperator<T> op)"
    type "method"
    comment "&#10;     * Performs {@link #parallelPrefix(Object[], BinaryOperator)}&#10;     * for the given subrange of the array.&#10;     *&#10;     * @param <T> the class of the objects in the array&#10;     * @param array the array&#10;     * @param fromIndex the index of the first element, inclusive&#10;     * @param toIndex the index of the last element, exclusive&#10;     * @param op a side-effect-free, associative function to perform the&#10;     * cumulation&#10;     * @throws IllegalArgumentException if {@code fromIndex > toIndex}&#10;     * @throws ArrayIndexOutOfBoundsException&#10;     *     if {@code fromIndex < 0} or {@code toIndex > array.length}&#10;     * @throws NullPointerException if the specified array or function is null&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 288
    label "parallelPrefix(Object"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 289
    label "public static void parallelPrefix(long[] array, LongBinaryOperator op)"
    type "method"
    comment "&#10;     * Cumulates, in parallel, each element of the given array in place,&#10;     * using the supplied function. For example if the array initially&#10;     * holds {@code [2, 1, 0, 3]} and the operation performs addition,&#10;     * then upon return the array holds {@code [2, 3, 3, 6]}.&#10;     * Parallel prefix computation is usually more efficient than&#10;     * sequential loops for large arrays.&#10;     *&#10;     * @param array the array, which is modified in-place by this method&#10;     * @param op a side-effect-free, associative function to perform the&#10;     * cumulation&#10;     * @throws NullPointerException if the specified array or function is null&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 290
    label "public static void parallelPrefix(long[] array, int fromIndex, int toIndex, LongBinaryOperator op)"
    type "method"
    comment "&#10;     * Performs {@link #parallelPrefix(long[], LongBinaryOperator)}&#10;     * for the given subrange of the array.&#10;     *&#10;     * @param array the array&#10;     * @param fromIndex the index of the first element, inclusive&#10;     * @param toIndex the index of the last element, exclusive&#10;     * @param op a side-effect-free, associative function to perform the&#10;     * cumulation&#10;     * @throws IllegalArgumentException if {@code fromIndex > toIndex}&#10;     * @throws ArrayIndexOutOfBoundsException&#10;     *     if {@code fromIndex < 0} or {@code toIndex > array.length}&#10;     * @throws NullPointerException if the specified array or function is null&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 291
    label "parallelPrefix(long"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 292
    label "public static void parallelPrefix(double[] array, DoubleBinaryOperator op)"
    type "method"
    comment "&#10;     * Cumulates, in parallel, each element of the given array in place,&#10;     * using the supplied function. For example if the array initially&#10;     * holds {@code [2.0, 1.0, 0.0, 3.0]} and the operation performs addition,&#10;     * then upon return the array holds {@code [2.0, 3.0, 3.0, 6.0]}.&#10;     * Parallel prefix computation is usually more efficient than&#10;     * sequential loops for large arrays.&#10;     *&#10;     * <p> Because floating-point operations may not be strictly associative,&#10;     * the returned result may not be identical to the value that would be&#10;     * obtained if the operation was performed sequentially.&#10;     *&#10;     * @param array the array, which is modified in-place by this method&#10;     * @param op a side-effect-free function to perform the cumulation&#10;     * @throws NullPointerException if the specified array or function is null&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 293
    label "public static void parallelPrefix(double[] array, int fromIndex, int toIndex, DoubleBinaryOperator op)"
    type "method"
    comment "&#10;     * Performs {@link #parallelPrefix(double[], DoubleBinaryOperator)}&#10;     * for the given subrange of the array.&#10;     *&#10;     * @param array the array&#10;     * @param fromIndex the index of the first element, inclusive&#10;     * @param toIndex the index of the last element, exclusive&#10;     * @param op a side-effect-free, associative function to perform the&#10;     * cumulation&#10;     * @throws IllegalArgumentException if {@code fromIndex > toIndex}&#10;     * @throws ArrayIndexOutOfBoundsException&#10;     *     if {@code fromIndex < 0} or {@code toIndex > array.length}&#10;     * @throws NullPointerException if the specified array or function is null&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 294
    label "parallelPrefix(double"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 295
    label "public static void parallelPrefix(int[] array, IntBinaryOperator op)"
    type "method"
    comment "&#10;     * Cumulates, in parallel, each element of the given array in place,&#10;     * using the supplied function. For example if the array initially&#10;     * holds {@code [2, 1, 0, 3]} and the operation performs addition,&#10;     * then upon return the array holds {@code [2, 3, 3, 6]}.&#10;     * Parallel prefix computation is usually more efficient than&#10;     * sequential loops for large arrays.&#10;     *&#10;     * @param array the array, which is modified in-place by this method&#10;     * @param op a side-effect-free, associative function to perform the&#10;     * cumulation&#10;     * @throws NullPointerException if the specified array or function is null&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 296
    label "public static void parallelPrefix(int[] array, int fromIndex, int toIndex, IntBinaryOperator op)"
    type "method"
    comment "&#10;     * Performs {@link #parallelPrefix(int[], IntBinaryOperator)}&#10;     * for the given subrange of the array.&#10;     *&#10;     * @param array the array&#10;     * @param fromIndex the index of the first element, inclusive&#10;     * @param toIndex the index of the last element, exclusive&#10;     * @param op a side-effect-free, associative function to perform the&#10;     * cumulation&#10;     * @throws IllegalArgumentException if {@code fromIndex > toIndex}&#10;     * @throws ArrayIndexOutOfBoundsException&#10;     *     if {@code fromIndex < 0} or {@code toIndex > array.length}&#10;     * @throws NullPointerException if the specified array or function is null&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 297
    label "parallelPrefix(int"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 298
    label "public static int binarySearch(long[] a, long key)"
    type "method"
    comment "&#10;     * Searches the specified array of longs for the specified value using the&#10;     * binary search algorithm.  The array must be sorted (as&#10;     * by the {@link #sort(long[])} method) prior to making this call.  If it&#10;     * is not sorted, the results are undefined.  If the array contains&#10;     * multiple elements with the specified value, there is no guarantee which&#10;     * one will be found.&#10;     *&#10;     * @param a the array to be searched&#10;     * @param key the value to be searched for&#10;     * @return index of the search key, if it is contained in the array;&#10;     *         otherwise, <code>(-(<i>insertion point</i>) - 1)</code>.  The&#10;     *         <i>insertion point</i> is defined as the point at which the&#10;     *         key would be inserted into the array: the index of the first&#10;     *         element greater than the key, or {@code a.length} if all&#10;     *         elements in the array are less than the specified key.  Note&#10;     *         that this guarantees that the return value will be &#38;gt;= 0 if&#10;     *         and only if the key is found.&#10;     "
  ]
  node [
    id 299
    label "sort(long"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 300
    label "public static int binarySearch(long[] a, int fromIndex, int toIndex, long key)"
    type "method"
    comment "&#10;     * Searches a range of&#10;     * the specified array of longs for the specified value using the&#10;     * binary search algorithm.&#10;     * The range must be sorted (as&#10;     * by the {@link #sort(long[], int, int)} method)&#10;     * prior to making this call.  If it&#10;     * is not sorted, the results are undefined.  If the range contains&#10;     * multiple elements with the specified value, there is no guarantee which&#10;     * one will be found.&#10;     *&#10;     * @param a the array to be searched&#10;     * @param fromIndex the index of the first element (inclusive) to be&#10;     *          searched&#10;     * @param toIndex the index of the last element (exclusive) to be searched&#10;     * @param key the value to be searched for&#10;     * @return index of the search key, if it is contained in the array&#10;     *         within the specified range;&#10;     *         otherwise, <code>(-(<i>insertion point</i>) - 1)</code>.  The&#10;     *         <i>insertion point</i> is defined as the point at which the&#10;     *         key would be inserted into the array: the index of the first&#10;     *         element in the range greater than the key,&#10;     *         or {@code toIndex} if all&#10;     *         elements in the range are less than the specified key.  Note&#10;     *         that this guarantees that the return value will be &#38;gt;= 0 if&#10;     *         and only if the key is found.&#10;     * @throws IllegalArgumentException&#10;     *         if {@code fromIndex > toIndex}&#10;     * @throws ArrayIndexOutOfBoundsException&#10;     *         if {@code fromIndex < 0 or toIndex > a.length}&#10;     * @since 1.6&#10;     "
  ]
  node [
    id 301
    label "private static int binarySearch0(long[] a, int fromIndex, int toIndex, long key)"
    type "method"
    comment " Like public version, but without range checks."
  ]
  node [
    id 302
    label "public static int binarySearch(int[] a, int key)"
    type "method"
    comment "&#10;     * Searches the specified array of ints for the specified value using the&#10;     * binary search algorithm.  The array must be sorted (as&#10;     * by the {@link #sort(int[])} method) prior to making this call.  If it&#10;     * is not sorted, the results are undefined.  If the array contains&#10;     * multiple elements with the specified value, there is no guarantee which&#10;     * one will be found.&#10;     *&#10;     * @param a the array to be searched&#10;     * @param key the value to be searched for&#10;     * @return index of the search key, if it is contained in the array;&#10;     *         otherwise, <code>(-(<i>insertion point</i>) - 1)</code>.  The&#10;     *         <i>insertion point</i> is defined as the point at which the&#10;     *         key would be inserted into the array: the index of the first&#10;     *         element greater than the key, or {@code a.length} if all&#10;     *         elements in the array are less than the specified key.  Note&#10;     *         that this guarantees that the return value will be &#38;gt;= 0 if&#10;     *         and only if the key is found.&#10;     "
  ]
  node [
    id 303
    label "sort(int"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 304
    label "public static int binarySearch(int[] a, int fromIndex, int toIndex, int key)"
    type "method"
    comment "&#10;     * Searches a range of&#10;     * the specified array of ints for the specified value using the&#10;     * binary search algorithm.&#10;     * The range must be sorted (as&#10;     * by the {@link #sort(int[], int, int)} method)&#10;     * prior to making this call.  If it&#10;     * is not sorted, the results are undefined.  If the range contains&#10;     * multiple elements with the specified value, there is no guarantee which&#10;     * one will be found.&#10;     *&#10;     * @param a the array to be searched&#10;     * @param fromIndex the index of the first element (inclusive) to be&#10;     *          searched&#10;     * @param toIndex the index of the last element (exclusive) to be searched&#10;     * @param key the value to be searched for&#10;     * @return index of the search key, if it is contained in the array&#10;     *         within the specified range;&#10;     *         otherwise, <code>(-(<i>insertion point</i>) - 1)</code>.  The&#10;     *         <i>insertion point</i> is defined as the point at which the&#10;     *         key would be inserted into the array: the index of the first&#10;     *         element in the range greater than the key,&#10;     *         or {@code toIndex} if all&#10;     *         elements in the range are less than the specified key.  Note&#10;     *         that this guarantees that the return value will be &#38;gt;= 0 if&#10;     *         and only if the key is found.&#10;     * @throws IllegalArgumentException&#10;     *         if {@code fromIndex > toIndex}&#10;     * @throws ArrayIndexOutOfBoundsException&#10;     *         if {@code fromIndex < 0 or toIndex > a.length}&#10;     * @since 1.6&#10;     "
  ]
  node [
    id 305
    label "private static int binarySearch0(int[] a, int fromIndex, int toIndex, int key)"
    type "method"
    comment " Like public version, but without range checks."
  ]
  node [
    id 306
    label "public static int binarySearch(short[] a, short key)"
    type "method"
    comment "&#10;     * Searches the specified array of shorts for the specified value using&#10;     * the binary search algorithm.  The array must be sorted&#10;     * (as by the {@link #sort(short[])} method) prior to making this call.  If&#10;     * it is not sorted, the results are undefined.  If the array contains&#10;     * multiple elements with the specified value, there is no guarantee which&#10;     * one will be found.&#10;     *&#10;     * @param a the array to be searched&#10;     * @param key the value to be searched for&#10;     * @return index of the search key, if it is contained in the array;&#10;     *         otherwise, <code>(-(<i>insertion point</i>) - 1)</code>.  The&#10;     *         <i>insertion point</i> is defined as the point at which the&#10;     *         key would be inserted into the array: the index of the first&#10;     *         element greater than the key, or {@code a.length} if all&#10;     *         elements in the array are less than the specified key.  Note&#10;     *         that this guarantees that the return value will be &#38;gt;= 0 if&#10;     *         and only if the key is found.&#10;     "
  ]
  node [
    id 307
    label "sort(short"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 308
    label "public static int binarySearch(short[] a, int fromIndex, int toIndex, short key)"
    type "method"
    comment "&#10;     * Searches a range of&#10;     * the specified array of shorts for the specified value using&#10;     * the binary search algorithm.&#10;     * The range must be sorted&#10;     * (as by the {@link #sort(short[], int, int)} method)&#10;     * prior to making this call.  If&#10;     * it is not sorted, the results are undefined.  If the range contains&#10;     * multiple elements with the specified value, there is no guarantee which&#10;     * one will be found.&#10;     *&#10;     * @param a the array to be searched&#10;     * @param fromIndex the index of the first element (inclusive) to be&#10;     *          searched&#10;     * @param toIndex the index of the last element (exclusive) to be searched&#10;     * @param key the value to be searched for&#10;     * @return index of the search key, if it is contained in the array&#10;     *         within the specified range;&#10;     *         otherwise, <code>(-(<i>insertion point</i>) - 1)</code>.  The&#10;     *         <i>insertion point</i> is defined as the point at which the&#10;     *         key would be inserted into the array: the index of the first&#10;     *         element in the range greater than the key,&#10;     *         or {@code toIndex} if all&#10;     *         elements in the range are less than the specified key.  Note&#10;     *         that this guarantees that the return value will be &#38;gt;= 0 if&#10;     *         and only if the key is found.&#10;     * @throws IllegalArgumentException&#10;     *         if {@code fromIndex > toIndex}&#10;     * @throws ArrayIndexOutOfBoundsException&#10;     *         if {@code fromIndex < 0 or toIndex > a.length}&#10;     * @since 1.6&#10;     "
  ]
  node [
    id 309
    label "private static int binarySearch0(short[] a, int fromIndex, int toIndex, short key)"
    type "method"
    comment " Like public version, but without range checks."
  ]
  node [
    id 310
    label "public static int binarySearch(char[] a, char key)"
    type "method"
    comment "&#10;     * Searches the specified array of chars for the specified value using the&#10;     * binary search algorithm.  The array must be sorted (as&#10;     * by the {@link #sort(char[])} method) prior to making this call.  If it&#10;     * is not sorted, the results are undefined.  If the array contains&#10;     * multiple elements with the specified value, there is no guarantee which&#10;     * one will be found.&#10;     *&#10;     * @param a the array to be searched&#10;     * @param key the value to be searched for&#10;     * @return index of the search key, if it is contained in the array;&#10;     *         otherwise, <code>(-(<i>insertion point</i>) - 1)</code>.  The&#10;     *         <i>insertion point</i> is defined as the point at which the&#10;     *         key would be inserted into the array: the index of the first&#10;     *         element greater than the key, or {@code a.length} if all&#10;     *         elements in the array are less than the specified key.  Note&#10;     *         that this guarantees that the return value will be &#38;gt;= 0 if&#10;     *         and only if the key is found.&#10;     "
  ]
  node [
    id 311
    label "sort(char"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 312
    label "public static int binarySearch(char[] a, int fromIndex, int toIndex, char key)"
    type "method"
    comment "&#10;     * Searches a range of&#10;     * the specified array of chars for the specified value using the&#10;     * binary search algorithm.&#10;     * The range must be sorted (as&#10;     * by the {@link #sort(char[], int, int)} method)&#10;     * prior to making this call.  If it&#10;     * is not sorted, the results are undefined.  If the range contains&#10;     * multiple elements with the specified value, there is no guarantee which&#10;     * one will be found.&#10;     *&#10;     * @param a the array to be searched&#10;     * @param fromIndex the index of the first element (inclusive) to be&#10;     *          searched&#10;     * @param toIndex the index of the last element (exclusive) to be searched&#10;     * @param key the value to be searched for&#10;     * @return index of the search key, if it is contained in the array&#10;     *         within the specified range;&#10;     *         otherwise, <code>(-(<i>insertion point</i>) - 1)</code>.  The&#10;     *         <i>insertion point</i> is defined as the point at which the&#10;     *         key would be inserted into the array: the index of the first&#10;     *         element in the range greater than the key,&#10;     *         or {@code toIndex} if all&#10;     *         elements in the range are less than the specified key.  Note&#10;     *         that this guarantees that the return value will be &#38;gt;= 0 if&#10;     *         and only if the key is found.&#10;     * @throws IllegalArgumentException&#10;     *         if {@code fromIndex > toIndex}&#10;     * @throws ArrayIndexOutOfBoundsException&#10;     *         if {@code fromIndex < 0 or toIndex > a.length}&#10;     * @since 1.6&#10;     "
  ]
  node [
    id 313
    label "private static int binarySearch0(char[] a, int fromIndex, int toIndex, char key)"
    type "method"
    comment " Like public version, but without range checks."
  ]
  node [
    id 314
    label "public static int binarySearch(byte[] a, byte key)"
    type "method"
    comment "&#10;     * Searches the specified array of bytes for the specified value using the&#10;     * binary search algorithm.  The array must be sorted (as&#10;     * by the {@link #sort(byte[])} method) prior to making this call.  If it&#10;     * is not sorted, the results are undefined.  If the array contains&#10;     * multiple elements with the specified value, there is no guarantee which&#10;     * one will be found.&#10;     *&#10;     * @param a the array to be searched&#10;     * @param key the value to be searched for&#10;     * @return index of the search key, if it is contained in the array;&#10;     *         otherwise, <code>(-(<i>insertion point</i>) - 1)</code>.  The&#10;     *         <i>insertion point</i> is defined as the point at which the&#10;     *         key would be inserted into the array: the index of the first&#10;     *         element greater than the key, or {@code a.length} if all&#10;     *         elements in the array are less than the specified key.  Note&#10;     *         that this guarantees that the return value will be &#38;gt;= 0 if&#10;     *         and only if the key is found.&#10;     "
  ]
  node [
    id 315
    label "sort(byte"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 316
    label "public static int binarySearch(byte[] a, int fromIndex, int toIndex, byte key)"
    type "method"
    comment "&#10;     * Searches a range of&#10;     * the specified array of bytes for the specified value using the&#10;     * binary search algorithm.&#10;     * The range must be sorted (as&#10;     * by the {@link #sort(byte[], int, int)} method)&#10;     * prior to making this call.  If it&#10;     * is not sorted, the results are undefined.  If the range contains&#10;     * multiple elements with the specified value, there is no guarantee which&#10;     * one will be found.&#10;     *&#10;     * @param a the array to be searched&#10;     * @param fromIndex the index of the first element (inclusive) to be&#10;     *          searched&#10;     * @param toIndex the index of the last element (exclusive) to be searched&#10;     * @param key the value to be searched for&#10;     * @return index of the search key, if it is contained in the array&#10;     *         within the specified range;&#10;     *         otherwise, <code>(-(<i>insertion point</i>) - 1)</code>.  The&#10;     *         <i>insertion point</i> is defined as the point at which the&#10;     *         key would be inserted into the array: the index of the first&#10;     *         element in the range greater than the key,&#10;     *         or {@code toIndex} if all&#10;     *         elements in the range are less than the specified key.  Note&#10;     *         that this guarantees that the return value will be &#38;gt;= 0 if&#10;     *         and only if the key is found.&#10;     * @throws IllegalArgumentException&#10;     *         if {@code fromIndex > toIndex}&#10;     * @throws ArrayIndexOutOfBoundsException&#10;     *         if {@code fromIndex < 0 or toIndex > a.length}&#10;     * @since 1.6&#10;     "
  ]
  node [
    id 317
    label "private static int binarySearch0(byte[] a, int fromIndex, int toIndex, byte key)"
    type "method"
    comment " Like public version, but without range checks."
  ]
  node [
    id 318
    label "public static int binarySearch(double[] a, double key)"
    type "method"
    comment "&#10;     * Searches the specified array of doubles for the specified value using&#10;     * the binary search algorithm.  The array must be sorted&#10;     * (as by the {@link #sort(double[])} method) prior to making this call.&#10;     * If it is not sorted, the results are undefined.  If the array contains&#10;     * multiple elements with the specified value, there is no guarantee which&#10;     * one will be found.  This method considers all NaN values to be&#10;     * equivalent and equal.&#10;     *&#10;     * @param a the array to be searched&#10;     * @param key the value to be searched for&#10;     * @return index of the search key, if it is contained in the array;&#10;     *         otherwise, <code>(-(<i>insertion point</i>) - 1)</code>.  The&#10;     *         <i>insertion point</i> is defined as the point at which the&#10;     *         key would be inserted into the array: the index of the first&#10;     *         element greater than the key, or {@code a.length} if all&#10;     *         elements in the array are less than the specified key.  Note&#10;     *         that this guarantees that the return value will be &#38;gt;= 0 if&#10;     *         and only if the key is found.&#10;     "
  ]
  node [
    id 319
    label "sort(double"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 320
    label "public static int binarySearch(double[] a, int fromIndex, int toIndex, double key)"
    type "method"
    comment "&#10;     * Searches a range of&#10;     * the specified array of doubles for the specified value using&#10;     * the binary search algorithm.&#10;     * The range must be sorted&#10;     * (as by the {@link #sort(double[], int, int)} method)&#10;     * prior to making this call.&#10;     * If it is not sorted, the results are undefined.  If the range contains&#10;     * multiple elements with the specified value, there is no guarantee which&#10;     * one will be found.  This method considers all NaN values to be&#10;     * equivalent and equal.&#10;     *&#10;     * @param a the array to be searched&#10;     * @param fromIndex the index of the first element (inclusive) to be&#10;     *          searched&#10;     * @param toIndex the index of the last element (exclusive) to be searched&#10;     * @param key the value to be searched for&#10;     * @return index of the search key, if it is contained in the array&#10;     *         within the specified range;&#10;     *         otherwise, <code>(-(<i>insertion point</i>) - 1)</code>.  The&#10;     *         <i>insertion point</i> is defined as the point at which the&#10;     *         key would be inserted into the array: the index of the first&#10;     *         element in the range greater than the key,&#10;     *         or {@code toIndex} if all&#10;     *         elements in the range are less than the specified key.  Note&#10;     *         that this guarantees that the return value will be &#38;gt;= 0 if&#10;     *         and only if the key is found.&#10;     * @throws IllegalArgumentException&#10;     *         if {@code fromIndex > toIndex}&#10;     * @throws ArrayIndexOutOfBoundsException&#10;     *         if {@code fromIndex < 0 or toIndex > a.length}&#10;     * @since 1.6&#10;     "
  ]
  node [
    id 321
    label "private static int binarySearch0(double[] a, int fromIndex, int toIndex, double key)"
    type "method"
    comment " Like public version, but without range checks."
  ]
  node [
    id 322
    label "public static int binarySearch(float[] a, float key)"
    type "method"
    comment "&#10;     * Searches the specified array of floats for the specified value using&#10;     * the binary search algorithm. The array must be sorted&#10;     * (as by the {@link #sort(float[])} method) prior to making this call. If&#10;     * it is not sorted, the results are undefined. If the array contains&#10;     * multiple elements with the specified value, there is no guarantee which&#10;     * one will be found. This method considers all NaN values to be&#10;     * equivalent and equal.&#10;     *&#10;     * @param a the array to be searched&#10;     * @param key the value to be searched for&#10;     * @return index of the search key, if it is contained in the array;&#10;     *         otherwise, <code>(-(<i>insertion point</i>) - 1)</code>. The&#10;     *         <i>insertion point</i> is defined as the point at which the&#10;     *         key would be inserted into the array: the index of the first&#10;     *         element greater than the key, or {@code a.length} if all&#10;     *         elements in the array are less than the specified key. Note&#10;     *         that this guarantees that the return value will be &#38;gt;= 0 if&#10;     *         and only if the key is found.&#10;     "
  ]
  node [
    id 323
    label "sort(float"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 324
    label "public static int binarySearch(float[] a, int fromIndex, int toIndex, float key)"
    type "method"
    comment "&#10;     * Searches a range of&#10;     * the specified array of floats for the specified value using&#10;     * the binary search algorithm.&#10;     * The range must be sorted&#10;     * (as by the {@link #sort(float[], int, int)} method)&#10;     * prior to making this call. If&#10;     * it is not sorted, the results are undefined. If the range contains&#10;     * multiple elements with the specified value, there is no guarantee which&#10;     * one will be found. This method considers all NaN values to be&#10;     * equivalent and equal.&#10;     *&#10;     * @param a the array to be searched&#10;     * @param fromIndex the index of the first element (inclusive) to be&#10;     *          searched&#10;     * @param toIndex the index of the last element (exclusive) to be searched&#10;     * @param key the value to be searched for&#10;     * @return index of the search key, if it is contained in the array&#10;     *         within the specified range;&#10;     *         otherwise, <code>(-(<i>insertion point</i>) - 1)</code>. The&#10;     *         <i>insertion point</i> is defined as the point at which the&#10;     *         key would be inserted into the array: the index of the first&#10;     *         element in the range greater than the key,&#10;     *         or {@code toIndex} if all&#10;     *         elements in the range are less than the specified key. Note&#10;     *         that this guarantees that the return value will be &#38;gt;= 0 if&#10;     *         and only if the key is found.&#10;     * @throws IllegalArgumentException&#10;     *         if {@code fromIndex > toIndex}&#10;     * @throws ArrayIndexOutOfBoundsException&#10;     *         if {@code fromIndex < 0 or toIndex > a.length}&#10;     * @since 1.6&#10;     "
  ]
  node [
    id 325
    label "private static int binarySearch0(float[] a, int fromIndex, int toIndex, float key)"
    type "method"
    comment " Like public version, but without range checks."
  ]
  node [
    id 326
    label "public static int binarySearch(Object[] a, Object key)"
    type "method"
    comment "&#10;     * Searches the specified array for the specified object using the binary&#10;     * search algorithm. The array must be sorted into ascending order&#10;     * according to the&#10;     * {@linkplain Comparable natural ordering}&#10;     * of its elements (as by the&#10;     * {@link #sort(Object[])} method) prior to making this call.&#10;     * If it is not sorted, the results are undefined.&#10;     * (If the array contains elements that are not mutually comparable (for&#10;     * example, strings and integers), it <i>cannot</i> be sorted according&#10;     * to the natural ordering of its elements, hence results are undefined.)&#10;     * If the array contains multiple&#10;     * elements equal to the specified object, there is no guarantee which&#10;     * one will be found.&#10;     *&#10;     * @param a the array to be searched&#10;     * @param key the value to be searched for&#10;     * @return index of the search key, if it is contained in the array;&#10;     *         otherwise, <code>(-(<i>insertion point</i>) - 1)</code>.  The&#10;     *         <i>insertion point</i> is defined as the point at which the&#10;     *         key would be inserted into the array: the index of the first&#10;     *         element greater than the key, or {@code a.length} if all&#10;     *         elements in the array are less than the specified key.  Note&#10;     *         that this guarantees that the return value will be &#38;gt;= 0 if&#10;     *         and only if the key is found.&#10;     * @throws ClassCastException if the search key is not comparable to the&#10;     *         elements of the array.&#10;     "
  ]
  node [
    id 327
    label "public static int binarySearch(Object[] a, int fromIndex, int toIndex, Object key)"
    type "method"
    comment "&#10;     * Searches a range of&#10;     * the specified array for the specified object using the binary&#10;     * search algorithm.&#10;     * The range must be sorted into ascending order&#10;     * according to the&#10;     * {@linkplain Comparable natural ordering}&#10;     * of its elements (as by the&#10;     * {@link #sort(Object[], int, int)} method) prior to making this&#10;     * call.  If it is not sorted, the results are undefined.&#10;     * (If the range contains elements that are not mutually comparable (for&#10;     * example, strings and integers), it <i>cannot</i> be sorted according&#10;     * to the natural ordering of its elements, hence results are undefined.)&#10;     * If the range contains multiple&#10;     * elements equal to the specified object, there is no guarantee which&#10;     * one will be found.&#10;     *&#10;     * @param a the array to be searched&#10;     * @param fromIndex the index of the first element (inclusive) to be&#10;     *          searched&#10;     * @param toIndex the index of the last element (exclusive) to be searched&#10;     * @param key the value to be searched for&#10;     * @return index of the search key, if it is contained in the array&#10;     *         within the specified range;&#10;     *         otherwise, <code>(-(<i>insertion point</i>) - 1)</code>.  The&#10;     *         <i>insertion point</i> is defined as the point at which the&#10;     *         key would be inserted into the array: the index of the first&#10;     *         element in the range greater than the key,&#10;     *         or {@code toIndex} if all&#10;     *         elements in the range are less than the specified key.  Note&#10;     *         that this guarantees that the return value will be &#38;gt;= 0 if&#10;     *         and only if the key is found.&#10;     * @throws ClassCastException if the search key is not comparable to the&#10;     *         elements of the array within the specified range.&#10;     * @throws IllegalArgumentException&#10;     *         if {@code fromIndex > toIndex}&#10;     * @throws ArrayIndexOutOfBoundsException&#10;     *         if {@code fromIndex < 0 or toIndex > a.length}&#10;     * @since 1.6&#10;     "
  ]
  node [
    id 328
    label "private static int binarySearch0(Object[] a, int fromIndex, int toIndex, Object key)"
    type "method"
    comment " Like public version, but without range checks."
  ]
  node [
    id 329
    label "public static int binarySearch(T[] a, T key, Comparator<? super T> c)"
    type "method"
    comment "&#10;     * Searches the specified array for the specified object using the binary&#10;     * search algorithm.  The array must be sorted into ascending order&#10;     * according to the specified comparator (as by the&#10;     * {@link #sort(Object[], Comparator) sort(T[], Comparator)}&#10;     * method) prior to making this call.  If it is&#10;     * not sorted, the results are undefined.&#10;     * If the array contains multiple&#10;     * elements equal to the specified object, there is no guarantee which one&#10;     * will be found.&#10;     *&#10;     * @param <T> the class of the objects in the array&#10;     * @param a the array to be searched&#10;     * @param key the value to be searched for&#10;     * @param c the comparator by which the array is ordered.  A&#10;     *        {@code null} value indicates that the elements'&#10;     *        {@linkplain Comparable natural ordering} should be used.&#10;     * @return index of the search key, if it is contained in the array;&#10;     *         otherwise, <code>(-(<i>insertion point</i>) - 1)</code>.  The&#10;     *         <i>insertion point</i> is defined as the point at which the&#10;     *         key would be inserted into the array: the index of the first&#10;     *         element greater than the key, or {@code a.length} if all&#10;     *         elements in the array are less than the specified key.  Note&#10;     *         that this guarantees that the return value will be &#38;gt;= 0 if&#10;     *         and only if the key is found.&#10;     * @throws ClassCastException if the array contains elements that are not&#10;     *         <i>mutually comparable</i> using the specified comparator,&#10;     *         or the search key is not comparable to the&#10;     *         elements of the array using this comparator.&#10;     "
  ]
  node [
    id 330
    label "public static int binarySearch(T[] a, int fromIndex, int toIndex, T key, Comparator<? super T> c)"
    type "method"
    comment "&#10;     * Searches a range of&#10;     * the specified array for the specified object using the binary&#10;     * search algorithm.&#10;     * The range must be sorted into ascending order&#10;     * according to the specified comparator (as by the&#10;     * {@link #sort(Object[], int, int, Comparator)&#10;     * sort(T[], int, int, Comparator)}&#10;     * method) prior to making this call.&#10;     * If it is not sorted, the results are undefined.&#10;     * If the range contains multiple elements equal to the specified object,&#10;     * there is no guarantee which one will be found.&#10;     *&#10;     * @param <T> the class of the objects in the array&#10;     * @param a the array to be searched&#10;     * @param fromIndex the index of the first element (inclusive) to be&#10;     *          searched&#10;     * @param toIndex the index of the last element (exclusive) to be searched&#10;     * @param key the value to be searched for&#10;     * @param c the comparator by which the array is ordered.  A&#10;     *        {@code null} value indicates that the elements'&#10;     *        {@linkplain Comparable natural ordering} should be used.&#10;     * @return index of the search key, if it is contained in the array&#10;     *         within the specified range;&#10;     *         otherwise, <code>(-(<i>insertion point</i>) - 1)</code>.  The&#10;     *         <i>insertion point</i> is defined as the point at which the&#10;     *         key would be inserted into the array: the index of the first&#10;     *         element in the range greater than the key,&#10;     *         or {@code toIndex} if all&#10;     *         elements in the range are less than the specified key.  Note&#10;     *         that this guarantees that the return value will be &#38;gt;= 0 if&#10;     *         and only if the key is found.&#10;     * @throws ClassCastException if the range contains elements that are not&#10;     *         <i>mutually comparable</i> using the specified comparator,&#10;     *         or the search key is not comparable to the&#10;     *         elements in the range using this comparator.&#10;     * @throws IllegalArgumentException&#10;     *         if {@code fromIndex > toIndex}&#10;     * @throws ArrayIndexOutOfBoundsException&#10;     *         if {@code fromIndex < 0 or toIndex > a.length}&#10;     * @since 1.6&#10;     "
  ]
  node [
    id 331
    label "private static int binarySearch0(T[] a, int fromIndex, int toIndex, T key, Comparator<? super T> c)"
    type "method"
    comment " Like public version, but without range checks."
  ]
  node [
    id 332
    label "public static boolean equals(long[] a, long[] a2)"
    type "method"
    comment "&#10;     * Returns {@code true} if the two specified arrays of longs are&#10;     * <i>equal</i> to one another.  Two arrays are considered equal if both&#10;     * arrays contain the same number of elements, and all corresponding pairs&#10;     * of elements in the two arrays are equal.  In other words, two arrays&#10;     * are equal if they contain the same elements in the same order.  Also,&#10;     * two array references are considered equal if both are {@code null}.&#10;     *&#10;     * @param a one array to be tested for equality&#10;     * @param a2 the other array to be tested for equality&#10;     * @return {@code true} if the two arrays are equal&#10;     "
  ]
  node [
    id 333
    label "public static boolean equals(long[] a, int aFromIndex, int aToIndex, long[] b, int bFromIndex, int bToIndex)"
    type "method"
    comment "&#10;     * Returns true if the two specified arrays of longs, over the specified&#10;     * ranges, are <i>equal</i> to one another.&#10;     *&#10;     * <p>Two arrays are considered equal if the number of elements covered by&#10;     * each range is the same, and all corresponding pairs of elements over the&#10;     * specified ranges in the two arrays are equal.  In other words, two arrays&#10;     * are equal if they contain, over the specified ranges, the same elements&#10;     * in the same order.&#10;     *&#10;     * @param a the first array to be tested for equality&#10;     * @param aFromIndex the index (inclusive) of the first element in the&#10;     *                   first array to be tested&#10;     * @param aToIndex the index (exclusive) of the last element in the&#10;     *                 first array to be tested&#10;     * @param b the second array to be tested for equality&#10;     * @param bFromIndex the index (inclusive) of the first element in the&#10;     *                   second array to be tested&#10;     * @param bToIndex the index (exclusive) of the last element in the&#10;     *                 second array to be tested&#10;     * @return {@code true} if the two arrays, over the specified ranges, are&#10;     *         equal&#10;     * @throws IllegalArgumentException&#10;     *         if {@code aFromIndex > aToIndex} or&#10;     *         if {@code bFromIndex > bToIndex}&#10;     * @throws ArrayIndexOutOfBoundsException&#10;     *         if {@code aFromIndex < 0 or aToIndex > a.length} or&#10;     *         if {@code bFromIndex < 0 or bToIndex > b.length}&#10;     * @throws NullPointerException&#10;     *         if either array is {@code null}&#10;     * @since 9&#10;     "
  ]
  node [
    id 334
    label "public static boolean equals(int[] a, int[] a2)"
    type "method"
    comment "&#10;     * Returns {@code true} if the two specified arrays of ints are&#10;     * <i>equal</i> to one another.  Two arrays are considered equal if both&#10;     * arrays contain the same number of elements, and all corresponding pairs&#10;     * of elements in the two arrays are equal.  In other words, two arrays&#10;     * are equal if they contain the same elements in the same order.  Also,&#10;     * two array references are considered equal if both are {@code null}.&#10;     *&#10;     * @param a one array to be tested for equality&#10;     * @param a2 the other array to be tested for equality&#10;     * @return {@code true} if the two arrays are equal&#10;     "
  ]
  node [
    id 335
    label "public static boolean equals(int[] a, int aFromIndex, int aToIndex, int[] b, int bFromIndex, int bToIndex)"
    type "method"
    comment "&#10;     * Returns true if the two specified arrays of ints, over the specified&#10;     * ranges, are <i>equal</i> to one another.&#10;     *&#10;     * <p>Two arrays are considered equal if the number of elements covered by&#10;     * each range is the same, and all corresponding pairs of elements over the&#10;     * specified ranges in the two arrays are equal.  In other words, two arrays&#10;     * are equal if they contain, over the specified ranges, the same elements&#10;     * in the same order.&#10;     *&#10;     * @param a the first array to be tested for equality&#10;     * @param aFromIndex the index (inclusive) of the first element in the&#10;     *                   first array to be tested&#10;     * @param aToIndex the index (exclusive) of the last element in the&#10;     *                 first array to be tested&#10;     * @param b the second array to be tested for equality&#10;     * @param bFromIndex the index (inclusive) of the first element in the&#10;     *                   second array to be tested&#10;     * @param bToIndex the index (exclusive) of the last element in the&#10;     *                 second array to be tested&#10;     * @return {@code true} if the two arrays, over the specified ranges, are&#10;     *         equal&#10;     * @throws IllegalArgumentException&#10;     *         if {@code aFromIndex > aToIndex} or&#10;     *         if {@code bFromIndex > bToIndex}&#10;     * @throws ArrayIndexOutOfBoundsException&#10;     *         if {@code aFromIndex < 0 or aToIndex > a.length} or&#10;     *         if {@code bFromIndex < 0 or bToIndex > b.length}&#10;     * @throws NullPointerException&#10;     *         if either array is {@code null}&#10;     * @since 9&#10;     "
  ]
  node [
    id 336
    label "public static boolean equals(short[] a, short[] a2)"
    type "method"
    comment "&#10;     * Returns {@code true} if the two specified arrays of shorts are&#10;     * <i>equal</i> to one another.  Two arrays are considered equal if both&#10;     * arrays contain the same number of elements, and all corresponding pairs&#10;     * of elements in the two arrays are equal.  In other words, two arrays&#10;     * are equal if they contain the same elements in the same order.  Also,&#10;     * two array references are considered equal if both are {@code null}.&#10;     *&#10;     * @param a one array to be tested for equality&#10;     * @param a2 the other array to be tested for equality&#10;     * @return {@code true} if the two arrays are equal&#10;     "
  ]
  node [
    id 337
    label "public static boolean equals(short[] a, int aFromIndex, int aToIndex, short[] b, int bFromIndex, int bToIndex)"
    type "method"
    comment "&#10;     * Returns true if the two specified arrays of shorts, over the specified&#10;     * ranges, are <i>equal</i> to one another.&#10;     *&#10;     * <p>Two arrays are considered equal if the number of elements covered by&#10;     * each range is the same, and all corresponding pairs of elements over the&#10;     * specified ranges in the two arrays are equal.  In other words, two arrays&#10;     * are equal if they contain, over the specified ranges, the same elements&#10;     * in the same order.&#10;     *&#10;     * @param a the first array to be tested for equality&#10;     * @param aFromIndex the index (inclusive) of the first element in the&#10;     *                   first array to be tested&#10;     * @param aToIndex the index (exclusive) of the last element in the&#10;     *                 first array to be tested&#10;     * @param b the second array to be tested for equality&#10;     * @param bFromIndex the index (inclusive) of the first element in the&#10;     *                   second array to be tested&#10;     * @param bToIndex the index (exclusive) of the last element in the&#10;     *                 second array to be tested&#10;     * @return {@code true} if the two arrays, over the specified ranges, are&#10;     *         equal&#10;     * @throws IllegalArgumentException&#10;     *         if {@code aFromIndex > aToIndex} or&#10;     *         if {@code bFromIndex > bToIndex}&#10;     * @throws ArrayIndexOutOfBoundsException&#10;     *         if {@code aFromIndex < 0 or aToIndex > a.length} or&#10;     *         if {@code bFromIndex < 0 or bToIndex > b.length}&#10;     * @throws NullPointerException&#10;     *         if either array is {@code null}&#10;     * @since 9&#10;     "
  ]
  node [
    id 338
    label "public static boolean equals(char[] a, char[] a2)"
    type "method"
    comment "&#10;     * Returns {@code true} if the two specified arrays of chars are&#10;     * <i>equal</i> to one another.  Two arrays are considered equal if both&#10;     * arrays contain the same number of elements, and all corresponding pairs&#10;     * of elements in the two arrays are equal.  In other words, two arrays&#10;     * are equal if they contain the same elements in the same order.  Also,&#10;     * two array references are considered equal if both are {@code null}.&#10;     *&#10;     * @param a one array to be tested for equality&#10;     * @param a2 the other array to be tested for equality&#10;     * @return {@code true} if the two arrays are equal&#10;     "
  ]
  node [
    id 339
    label "public static boolean equals(char[] a, int aFromIndex, int aToIndex, char[] b, int bFromIndex, int bToIndex)"
    type "method"
    comment "&#10;     * Returns true if the two specified arrays of chars, over the specified&#10;     * ranges, are <i>equal</i> to one another.&#10;     *&#10;     * <p>Two arrays are considered equal if the number of elements covered by&#10;     * each range is the same, and all corresponding pairs of elements over the&#10;     * specified ranges in the two arrays are equal.  In other words, two arrays&#10;     * are equal if they contain, over the specified ranges, the same elements&#10;     * in the same order.&#10;     *&#10;     * @param a the first array to be tested for equality&#10;     * @param aFromIndex the index (inclusive) of the first element in the&#10;     *                   first array to be tested&#10;     * @param aToIndex the index (exclusive) of the last element in the&#10;     *                 first array to be tested&#10;     * @param b the second array to be tested for equality&#10;     * @param bFromIndex the index (inclusive) of the first element in the&#10;     *                   second array to be tested&#10;     * @param bToIndex the index (exclusive) of the last element in the&#10;     *                 second array to be tested&#10;     * @return {@code true} if the two arrays, over the specified ranges, are&#10;     *         equal&#10;     * @throws IllegalArgumentException&#10;     *         if {@code aFromIndex > aToIndex} or&#10;     *         if {@code bFromIndex > bToIndex}&#10;     * @throws ArrayIndexOutOfBoundsException&#10;     *         if {@code aFromIndex < 0 or aToIndex > a.length} or&#10;     *         if {@code bFromIndex < 0 or bToIndex > b.length}&#10;     * @throws NullPointerException&#10;     *         if either array is {@code null}&#10;     * @since 9&#10;     "
  ]
  node [
    id 340
    label "public static boolean equals(byte[] a, byte[] a2)"
    type "method"
    comment "&#10;     * Returns {@code true} if the two specified arrays of bytes are&#10;     * <i>equal</i> to one another.  Two arrays are considered equal if both&#10;     * arrays contain the same number of elements, and all corresponding pairs&#10;     * of elements in the two arrays are equal.  In other words, two arrays&#10;     * are equal if they contain the same elements in the same order.  Also,&#10;     * two array references are considered equal if both are {@code null}.&#10;     *&#10;     * @param a one array to be tested for equality&#10;     * @param a2 the other array to be tested for equality&#10;     * @return {@code true} if the two arrays are equal&#10;     "
  ]
  node [
    id 341
    label "public static boolean equals(byte[] a, int aFromIndex, int aToIndex, byte[] b, int bFromIndex, int bToIndex)"
    type "method"
    comment "&#10;     * Returns true if the two specified arrays of bytes, over the specified&#10;     * ranges, are <i>equal</i> to one another.&#10;     *&#10;     * <p>Two arrays are considered equal if the number of elements covered by&#10;     * each range is the same, and all corresponding pairs of elements over the&#10;     * specified ranges in the two arrays are equal.  In other words, two arrays&#10;     * are equal if they contain, over the specified ranges, the same elements&#10;     * in the same order.&#10;     *&#10;     * @param a the first array to be tested for equality&#10;     * @param aFromIndex the index (inclusive) of the first element in the&#10;     *                   first array to be tested&#10;     * @param aToIndex the index (exclusive) of the last element in the&#10;     *                 first array to be tested&#10;     * @param b the second array to be tested for equality&#10;     * @param bFromIndex the index (inclusive) of the first element in the&#10;     *                   second array to be tested&#10;     * @param bToIndex the index (exclusive) of the last element in the&#10;     *                 second array to be tested&#10;     * @return {@code true} if the two arrays, over the specified ranges, are&#10;     *         equal&#10;     * @throws IllegalArgumentException&#10;     *         if {@code aFromIndex > aToIndex} or&#10;     *         if {@code bFromIndex > bToIndex}&#10;     * @throws ArrayIndexOutOfBoundsException&#10;     *         if {@code aFromIndex < 0 or aToIndex > a.length} or&#10;     *         if {@code bFromIndex < 0 or bToIndex > b.length}&#10;     * @throws NullPointerException&#10;     *         if either array is {@code null}&#10;     * @since 9&#10;     "
  ]
  node [
    id 342
    label "public static boolean equals(boolean[] a, boolean[] a2)"
    type "method"
    comment "&#10;     * Returns {@code true} if the two specified arrays of booleans are&#10;     * <i>equal</i> to one another.  Two arrays are considered equal if both&#10;     * arrays contain the same number of elements, and all corresponding pairs&#10;     * of elements in the two arrays are equal.  In other words, two arrays&#10;     * are equal if they contain the same elements in the same order.  Also,&#10;     * two array references are considered equal if both are {@code null}.&#10;     *&#10;     * @param a one array to be tested for equality&#10;     * @param a2 the other array to be tested for equality&#10;     * @return {@code true} if the two arrays are equal&#10;     "
  ]
  node [
    id 343
    label "public static boolean equals(boolean[] a, int aFromIndex, int aToIndex, boolean[] b, int bFromIndex, int bToIndex)"
    type "method"
    comment "&#10;     * Returns true if the two specified arrays of booleans, over the specified&#10;     * ranges, are <i>equal</i> to one another.&#10;     *&#10;     * <p>Two arrays are considered equal if the number of elements covered by&#10;     * each range is the same, and all corresponding pairs of elements over the&#10;     * specified ranges in the two arrays are equal.  In other words, two arrays&#10;     * are equal if they contain, over the specified ranges, the same elements&#10;     * in the same order.&#10;     *&#10;     * @param a the first array to be tested for equality&#10;     * @param aFromIndex the index (inclusive) of the first element in the&#10;     *                   first array to be tested&#10;     * @param aToIndex the index (exclusive) of the last element in the&#10;     *                 first array to be tested&#10;     * @param b the second array to be tested for equality&#10;     * @param bFromIndex the index (inclusive) of the first element in the&#10;     *                   second array to be tested&#10;     * @param bToIndex the index (exclusive) of the last element in the&#10;     *                 second array to be tested&#10;     * @return {@code true} if the two arrays, over the specified ranges, are&#10;     *         equal&#10;     * @throws IllegalArgumentException&#10;     *         if {@code aFromIndex > aToIndex} or&#10;     *         if {@code bFromIndex > bToIndex}&#10;     * @throws ArrayIndexOutOfBoundsException&#10;     *         if {@code aFromIndex < 0 or aToIndex > a.length} or&#10;     *         if {@code bFromIndex < 0 or bToIndex > b.length}&#10;     * @throws NullPointerException&#10;     *         if either array is {@code null}&#10;     * @since 9&#10;     "
  ]
  node [
    id 344
    label "public static boolean equals(double[] a, double[] a2)"
    type "method"
    comment "&#10;     * Returns {@code true} if the two specified arrays of doubles are&#10;     * <i>equal</i> to one another.  Two arrays are considered equal if both&#10;     * arrays contain the same number of elements, and all corresponding pairs&#10;     * of elements in the two arrays are equal.  In other words, two arrays&#10;     * are equal if they contain the same elements in the same order.  Also,&#10;     * two array references are considered equal if both are {@code null}.&#10;     *&#10;     * Two doubles {@code d1} and {@code d2} are considered equal if:&#10;     * <pre>    {@code new Double(d1).equals(new Double(d2))}</pre>&#10;     * (Unlike the {@code ==} operator, this method considers&#10;     * {@code NaN} equal to itself, and 0.0d unequal to -0.0d.)&#10;     *&#10;     * @param a one array to be tested for equality&#10;     * @param a2 the other array to be tested for equality&#10;     * @return {@code true} if the two arrays are equal&#10;     * @see Double#equals(Object)&#10;     "
  ]
  node [
    id 345
    label "public static boolean equals(double[] a, int aFromIndex, int aToIndex, double[] b, int bFromIndex, int bToIndex)"
    type "method"
    comment "&#10;     * Returns true if the two specified arrays of doubles, over the specified&#10;     * ranges, are <i>equal</i> to one another.&#10;     *&#10;     * <p>Two arrays are considered equal if the number of elements covered by&#10;     * each range is the same, and all corresponding pairs of elements over the&#10;     * specified ranges in the two arrays are equal.  In other words, two arrays&#10;     * are equal if they contain, over the specified ranges, the same elements&#10;     * in the same order.&#10;     *&#10;     * <p>Two doubles {@code d1} and {@code d2} are considered equal if:&#10;     * <pre>    {@code new Double(d1).equals(new Double(d2))}</pre>&#10;     * (Unlike the {@code ==} operator, this method considers&#10;     * {@code NaN} equal to itself, and 0.0d unequal to -0.0d.)&#10;     *&#10;     * @param a the first array to be tested for equality&#10;     * @param aFromIndex the index (inclusive) of the first element in the&#10;     *                   first array to be tested&#10;     * @param aToIndex the index (exclusive) of the last element in the&#10;     *                 first array to be tested&#10;     * @param b the second array to be tested for equality&#10;     * @param bFromIndex the index (inclusive) of the first element in the&#10;     *                   second array to be tested&#10;     * @param bToIndex the index (exclusive) of the last element in the&#10;     *                 second array to be tested&#10;     * @return {@code true} if the two arrays, over the specified ranges, are&#10;     *         equal&#10;     * @throws IllegalArgumentException&#10;     *         if {@code aFromIndex > aToIndex} or&#10;     *         if {@code bFromIndex > bToIndex}&#10;     * @throws ArrayIndexOutOfBoundsException&#10;     *         if {@code aFromIndex < 0 or aToIndex > a.length} or&#10;     *         if {@code bFromIndex < 0 or bToIndex > b.length}&#10;     * @throws NullPointerException&#10;     *         if either array is {@code null}&#10;     * @see Double#equals(Object)&#10;     * @since 9&#10;     "
  ]
  node [
    id 346
    label "public static boolean equals(float[] a, float[] a2)"
    type "method"
    comment "&#10;     * Returns {@code true} if the two specified arrays of floats are&#10;     * <i>equal</i> to one another.  Two arrays are considered equal if both&#10;     * arrays contain the same number of elements, and all corresponding pairs&#10;     * of elements in the two arrays are equal.  In other words, two arrays&#10;     * are equal if they contain the same elements in the same order.  Also,&#10;     * two array references are considered equal if both are {@code null}.&#10;     *&#10;     * Two floats {@code f1} and {@code f2} are considered equal if:&#10;     * <pre>    {@code new Float(f1).equals(new Float(f2))}</pre>&#10;     * (Unlike the {@code ==} operator, this method considers&#10;     * {@code NaN} equal to itself, and 0.0f unequal to -0.0f.)&#10;     *&#10;     * @param a one array to be tested for equality&#10;     * @param a2 the other array to be tested for equality&#10;     * @return {@code true} if the two arrays are equal&#10;     * @see Float#equals(Object)&#10;     "
  ]
  node [
    id 347
    label "public static boolean equals(float[] a, int aFromIndex, int aToIndex, float[] b, int bFromIndex, int bToIndex)"
    type "method"
    comment "&#10;     * Returns true if the two specified arrays of floats, over the specified&#10;     * ranges, are <i>equal</i> to one another.&#10;     *&#10;     * <p>Two arrays are considered equal if the number of elements covered by&#10;     * each range is the same, and all corresponding pairs of elements over the&#10;     * specified ranges in the two arrays are equal.  In other words, two arrays&#10;     * are equal if they contain, over the specified ranges, the same elements&#10;     * in the same order.&#10;     *&#10;     * <p>Two floats {@code f1} and {@code f2} are considered equal if:&#10;     * <pre>    {@code new Float(f1).equals(new Float(f2))}</pre>&#10;     * (Unlike the {@code ==} operator, this method considers&#10;     * {@code NaN} equal to itself, and 0.0f unequal to -0.0f.)&#10;     *&#10;     * @param a the first array to be tested for equality&#10;     * @param aFromIndex the index (inclusive) of the first element in the&#10;     *                   first array to be tested&#10;     * @param aToIndex the index (exclusive) of the last element in the&#10;     *                 first array to be tested&#10;     * @param b the second array to be tested for equality&#10;     * @param bFromIndex the index (inclusive) of the first element in the&#10;     *                   second array to be tested&#10;     * @param bToIndex the index (exclusive) of the last element in the&#10;     *                 second array to be tested&#10;     * @return {@code true} if the two arrays, over the specified ranges, are&#10;     *         equal&#10;     * @throws IllegalArgumentException&#10;     *         if {@code aFromIndex > aToIndex} or&#10;     *         if {@code bFromIndex > bToIndex}&#10;     * @throws ArrayIndexOutOfBoundsException&#10;     *         if {@code aFromIndex < 0 or aToIndex > a.length} or&#10;     *         if {@code bFromIndex < 0 or bToIndex > b.length}&#10;     * @throws NullPointerException&#10;     *         if either array is {@code null}&#10;     * @see Float#equals(Object)&#10;     * @since 9&#10;     "
  ]
  node [
    id 348
    label "public static boolean equals(Object[] a, Object[] a2)"
    type "method"
    comment "&#10;     * Returns {@code true} if the two specified arrays of Objects are&#10;     * <i>equal</i> to one another.  The two arrays are considered equal if&#10;     * both arrays contain the same number of elements, and all corresponding&#10;     * pairs of elements in the two arrays are equal.  Two objects {@code e1}&#10;     * and {@code e2} are considered <i>equal</i> if&#10;     * {@code Objects.equals(e1, e2)}.&#10;     * In other words, the two arrays are equal if&#10;     * they contain the same elements in the same order.  Also, two array&#10;     * references are considered equal if both are {@code null}.&#10;     *&#10;     * @param a one array to be tested for equality&#10;     * @param a2 the other array to be tested for equality&#10;     * @return {@code true} if the two arrays are equal&#10;     "
  ]
  node [
    id 349
    label "public static boolean equals(Object[] a, int aFromIndex, int aToIndex, Object[] b, int bFromIndex, int bToIndex)"
    type "method"
    comment "&#10;     * Returns true if the two specified arrays of Objects, over the specified&#10;     * ranges, are <i>equal</i> to one another.&#10;     *&#10;     * <p>Two arrays are considered equal if the number of elements covered by&#10;     * each range is the same, and all corresponding pairs of elements over the&#10;     * specified ranges in the two arrays are equal.  In other words, two arrays&#10;     * are equal if they contain, over the specified ranges, the same elements&#10;     * in the same order.&#10;     *&#10;     * <p>Two objects {@code e1} and {@code e2} are considered <i>equal</i> if&#10;     * {@code Objects.equals(e1, e2)}.&#10;     *&#10;     * @param a the first array to be tested for equality&#10;     * @param aFromIndex the index (inclusive) of the first element in the&#10;     *                   first array to be tested&#10;     * @param aToIndex the index (exclusive) of the last element in the&#10;     *                 first array to be tested&#10;     * @param b the second array to be tested for equality&#10;     * @param bFromIndex the index (inclusive) of the first element in the&#10;     *                   second array to be tested&#10;     * @param bToIndex the index (exclusive) of the last element in the&#10;     *                 second array to be tested&#10;     * @return {@code true} if the two arrays, over the specified ranges, are&#10;     *         equal&#10;     * @throws IllegalArgumentException&#10;     *         if {@code aFromIndex > aToIndex} or&#10;     *         if {@code bFromIndex > bToIndex}&#10;     * @throws ArrayIndexOutOfBoundsException&#10;     *         if {@code aFromIndex < 0 or aToIndex > a.length} or&#10;     *         if {@code bFromIndex < 0 or bToIndex > b.length}&#10;     * @throws NullPointerException&#10;     *         if either array is {@code null}&#10;     * @since 9&#10;     "
  ]
  node [
    id 350
    label "public static boolean equals(T[] a, T[] a2, Comparator<? super T> cmp)"
    type "method"
    comment "&#10;     * Returns {@code true} if the two specified arrays of Objects are&#10;     * <i>equal</i> to one another.&#10;     *&#10;     * <p>Two arrays are considered equal if both arrays contain the same number&#10;     * of elements, and all corresponding pairs of elements in the two arrays&#10;     * are equal.  In other words, the two arrays are equal if they contain the&#10;     * same elements in the same order.  Also, two array references are&#10;     * considered equal if both are {@code null}.&#10;     *&#10;     * <p>Two objects {@code e1} and {@code e2} are considered <i>equal</i> if,&#10;     * given the specified comparator, {@code cmp.compare(e1, e2) == 0}.&#10;     *&#10;     * @param a one array to be tested for equality&#10;     * @param a2 the other array to be tested for equality&#10;     * @param cmp the comparator to compare array elements&#10;     * @param <T> the type of array elements&#10;     * @return {@code true} if the two arrays are equal&#10;     * @throws NullPointerException if the comparator is {@code null}&#10;     * @since 9&#10;     "
  ]
  node [
    id 351
    label "public static boolean equals(T[] a, int aFromIndex, int aToIndex, T[] b, int bFromIndex, int bToIndex, Comparator<? super T> cmp)"
    type "method"
    comment "&#10;     * Returns true if the two specified arrays of Objects, over the specified&#10;     * ranges, are <i>equal</i> to one another.&#10;     *&#10;     * <p>Two arrays are considered equal if the number of elements covered by&#10;     * each range is the same, and all corresponding pairs of elements over the&#10;     * specified ranges in the two arrays are equal.  In other words, two arrays&#10;     * are equal if they contain, over the specified ranges, the same elements&#10;     * in the same order.&#10;     *&#10;     * <p>Two objects {@code e1} and {@code e2} are considered <i>equal</i> if,&#10;     * given the specified comparator, {@code cmp.compare(e1, e2) == 0}.&#10;     *&#10;     * @param a the first array to be tested for equality&#10;     * @param aFromIndex the index (inclusive) of the first element in the&#10;     *                   first array to be tested&#10;     * @param aToIndex the index (exclusive) of the last element in the&#10;     *                 first array to be tested&#10;     * @param b the second array to be tested for equality&#10;     * @param bFromIndex the index (inclusive) of the first element in the&#10;     *                   second array to be tested&#10;     * @param bToIndex the index (exclusive) of the last element in the&#10;     *                 second array to be tested&#10;     * @param cmp the comparator to compare array elements&#10;     * @param <T> the type of array elements&#10;     * @return {@code true} if the two arrays, over the specified ranges, are&#10;     *         equal&#10;     * @throws IllegalArgumentException&#10;     *         if {@code aFromIndex > aToIndex} or&#10;     *         if {@code bFromIndex > bToIndex}&#10;     * @throws ArrayIndexOutOfBoundsException&#10;     *         if {@code aFromIndex < 0 or aToIndex > a.length} or&#10;     *         if {@code bFromIndex < 0 or bToIndex > b.length}&#10;     * @throws NullPointerException&#10;     *         if either array or the comparator is {@code null}&#10;     * @since 9&#10;     "
  ]
  node [
    id 352
    label "public static void fill(long[] a, long val)"
    type "method"
    comment "&#10;     * Assigns the specified long value to each element of the specified array&#10;     * of longs.&#10;     *&#10;     * @param a the array to be filled&#10;     * @param val the value to be stored in all elements of the array&#10;     "
  ]
  node [
    id 353
    label "public static void fill(long[] a, int fromIndex, int toIndex, long val)"
    type "method"
    comment "&#10;     * Assigns the specified long value to each element of the specified&#10;     * range of the specified array of longs.  The range to be filled&#10;     * extends from index {@code fromIndex}, inclusive, to index&#10;     * {@code toIndex}, exclusive.  (If {@code fromIndex==toIndex}, the&#10;     * range to be filled is empty.)&#10;     *&#10;     * @param a the array to be filled&#10;     * @param fromIndex the index of the first element (inclusive) to be&#10;     *        filled with the specified value&#10;     * @param toIndex the index of the last element (exclusive) to be&#10;     *        filled with the specified value&#10;     * @param val the value to be stored in all elements of the array&#10;     * @throws IllegalArgumentException if {@code fromIndex > toIndex}&#10;     * @throws ArrayIndexOutOfBoundsException if {@code fromIndex < 0} or&#10;     *         {@code toIndex > a.length}&#10;     "
  ]
  node [
    id 354
    label "public static void fill(int[] a, int val)"
    type "method"
    comment "&#10;     * Assigns the specified int value to each element of the specified array&#10;     * of ints.&#10;     *&#10;     * @param a the array to be filled&#10;     * @param val the value to be stored in all elements of the array&#10;     "
  ]
  node [
    id 355
    label "public static void fill(int[] a, int fromIndex, int toIndex, int val)"
    type "method"
    comment "&#10;     * Assigns the specified int value to each element of the specified&#10;     * range of the specified array of ints.  The range to be filled&#10;     * extends from index {@code fromIndex}, inclusive, to index&#10;     * {@code toIndex}, exclusive.  (If {@code fromIndex==toIndex}, the&#10;     * range to be filled is empty.)&#10;     *&#10;     * @param a the array to be filled&#10;     * @param fromIndex the index of the first element (inclusive) to be&#10;     *        filled with the specified value&#10;     * @param toIndex the index of the last element (exclusive) to be&#10;     *        filled with the specified value&#10;     * @param val the value to be stored in all elements of the array&#10;     * @throws IllegalArgumentException if {@code fromIndex > toIndex}&#10;     * @throws ArrayIndexOutOfBoundsException if {@code fromIndex < 0} or&#10;     *         {@code toIndex > a.length}&#10;     "
  ]
  node [
    id 356
    label "public static void fill(short[] a, short val)"
    type "method"
    comment "&#10;     * Assigns the specified short value to each element of the specified array&#10;     * of shorts.&#10;     *&#10;     * @param a the array to be filled&#10;     * @param val the value to be stored in all elements of the array&#10;     "
  ]
  node [
    id 357
    label "public static void fill(short[] a, int fromIndex, int toIndex, short val)"
    type "method"
    comment "&#10;     * Assigns the specified short value to each element of the specified&#10;     * range of the specified array of shorts.  The range to be filled&#10;     * extends from index {@code fromIndex}, inclusive, to index&#10;     * {@code toIndex}, exclusive.  (If {@code fromIndex==toIndex}, the&#10;     * range to be filled is empty.)&#10;     *&#10;     * @param a the array to be filled&#10;     * @param fromIndex the index of the first element (inclusive) to be&#10;     *        filled with the specified value&#10;     * @param toIndex the index of the last element (exclusive) to be&#10;     *        filled with the specified value&#10;     * @param val the value to be stored in all elements of the array&#10;     * @throws IllegalArgumentException if {@code fromIndex > toIndex}&#10;     * @throws ArrayIndexOutOfBoundsException if {@code fromIndex < 0} or&#10;     *         {@code toIndex > a.length}&#10;     "
  ]
  node [
    id 358
    label "public static void fill(char[] a, char val)"
    type "method"
    comment "&#10;     * Assigns the specified char value to each element of the specified array&#10;     * of chars.&#10;     *&#10;     * @param a the array to be filled&#10;     * @param val the value to be stored in all elements of the array&#10;     "
  ]
  node [
    id 359
    label "public static void fill(char[] a, int fromIndex, int toIndex, char val)"
    type "method"
    comment "&#10;     * Assigns the specified char value to each element of the specified&#10;     * range of the specified array of chars.  The range to be filled&#10;     * extends from index {@code fromIndex}, inclusive, to index&#10;     * {@code toIndex}, exclusive.  (If {@code fromIndex==toIndex}, the&#10;     * range to be filled is empty.)&#10;     *&#10;     * @param a the array to be filled&#10;     * @param fromIndex the index of the first element (inclusive) to be&#10;     *        filled with the specified value&#10;     * @param toIndex the index of the last element (exclusive) to be&#10;     *        filled with the specified value&#10;     * @param val the value to be stored in all elements of the array&#10;     * @throws IllegalArgumentException if {@code fromIndex > toIndex}&#10;     * @throws ArrayIndexOutOfBoundsException if {@code fromIndex < 0} or&#10;     *         {@code toIndex > a.length}&#10;     "
  ]
  node [
    id 360
    label "public static void fill(byte[] a, byte val)"
    type "method"
    comment "&#10;     * Assigns the specified byte value to each element of the specified array&#10;     * of bytes.&#10;     *&#10;     * @param a the array to be filled&#10;     * @param val the value to be stored in all elements of the array&#10;     "
  ]
  node [
    id 361
    label "public static void fill(byte[] a, int fromIndex, int toIndex, byte val)"
    type "method"
    comment "&#10;     * Assigns the specified byte value to each element of the specified&#10;     * range of the specified array of bytes.  The range to be filled&#10;     * extends from index {@code fromIndex}, inclusive, to index&#10;     * {@code toIndex}, exclusive.  (If {@code fromIndex==toIndex}, the&#10;     * range to be filled is empty.)&#10;     *&#10;     * @param a the array to be filled&#10;     * @param fromIndex the index of the first element (inclusive) to be&#10;     *        filled with the specified value&#10;     * @param toIndex the index of the last element (exclusive) to be&#10;     *        filled with the specified value&#10;     * @param val the value to be stored in all elements of the array&#10;     * @throws IllegalArgumentException if {@code fromIndex > toIndex}&#10;     * @throws ArrayIndexOutOfBoundsException if {@code fromIndex < 0} or&#10;     *         {@code toIndex > a.length}&#10;     "
  ]
  node [
    id 362
    label "public static void fill(boolean[] a, boolean val)"
    type "method"
    comment "&#10;     * Assigns the specified boolean value to each element of the specified&#10;     * array of booleans.&#10;     *&#10;     * @param a the array to be filled&#10;     * @param val the value to be stored in all elements of the array&#10;     "
  ]
  node [
    id 363
    label "public static void fill(boolean[] a, int fromIndex, int toIndex, boolean val)"
    type "method"
    comment "&#10;     * Assigns the specified boolean value to each element of the specified&#10;     * range of the specified array of booleans.  The range to be filled&#10;     * extends from index {@code fromIndex}, inclusive, to index&#10;     * {@code toIndex}, exclusive.  (If {@code fromIndex==toIndex}, the&#10;     * range to be filled is empty.)&#10;     *&#10;     * @param a the array to be filled&#10;     * @param fromIndex the index of the first element (inclusive) to be&#10;     *        filled with the specified value&#10;     * @param toIndex the index of the last element (exclusive) to be&#10;     *        filled with the specified value&#10;     * @param val the value to be stored in all elements of the array&#10;     * @throws IllegalArgumentException if {@code fromIndex > toIndex}&#10;     * @throws ArrayIndexOutOfBoundsException if {@code fromIndex < 0} or&#10;     *         {@code toIndex > a.length}&#10;     "
  ]
  node [
    id 364
    label "public static void fill(double[] a, double val)"
    type "method"
    comment "&#10;     * Assigns the specified double value to each element of the specified&#10;     * array of doubles.&#10;     *&#10;     * @param a the array to be filled&#10;     * @param val the value to be stored in all elements of the array&#10;     "
  ]
  node [
    id 365
    label "public static void fill(double[] a, int fromIndex, int toIndex, double val)"
    type "method"
    comment "&#10;     * Assigns the specified double value to each element of the specified&#10;     * range of the specified array of doubles.  The range to be filled&#10;     * extends from index {@code fromIndex}, inclusive, to index&#10;     * {@code toIndex}, exclusive.  (If {@code fromIndex==toIndex}, the&#10;     * range to be filled is empty.)&#10;     *&#10;     * @param a the array to be filled&#10;     * @param fromIndex the index of the first element (inclusive) to be&#10;     *        filled with the specified value&#10;     * @param toIndex the index of the last element (exclusive) to be&#10;     *        filled with the specified value&#10;     * @param val the value to be stored in all elements of the array&#10;     * @throws IllegalArgumentException if {@code fromIndex > toIndex}&#10;     * @throws ArrayIndexOutOfBoundsException if {@code fromIndex < 0} or&#10;     *         {@code toIndex > a.length}&#10;     "
  ]
  node [
    id 366
    label "public static void fill(float[] a, float val)"
    type "method"
    comment "&#10;     * Assigns the specified float value to each element of the specified array&#10;     * of floats.&#10;     *&#10;     * @param a the array to be filled&#10;     * @param val the value to be stored in all elements of the array&#10;     "
  ]
  node [
    id 367
    label "public static void fill(float[] a, int fromIndex, int toIndex, float val)"
    type "method"
    comment "&#10;     * Assigns the specified float value to each element of the specified&#10;     * range of the specified array of floats.  The range to be filled&#10;     * extends from index {@code fromIndex}, inclusive, to index&#10;     * {@code toIndex}, exclusive.  (If {@code fromIndex==toIndex}, the&#10;     * range to be filled is empty.)&#10;     *&#10;     * @param a the array to be filled&#10;     * @param fromIndex the index of the first element (inclusive) to be&#10;     *        filled with the specified value&#10;     * @param toIndex the index of the last element (exclusive) to be&#10;     *        filled with the specified value&#10;     * @param val the value to be stored in all elements of the array&#10;     * @throws IllegalArgumentException if {@code fromIndex > toIndex}&#10;     * @throws ArrayIndexOutOfBoundsException if {@code fromIndex < 0} or&#10;     *         {@code toIndex > a.length}&#10;     "
  ]
  node [
    id 368
    label "public static void fill(Object[] a, Object val)"
    type "method"
    comment "&#10;     * Assigns the specified Object reference to each element of the specified&#10;     * array of Objects.&#10;     *&#10;     * @param a the array to be filled&#10;     * @param val the value to be stored in all elements of the array&#10;     * @throws ArrayStoreException if the specified value is not of a&#10;     *         runtime type that can be stored in the specified array&#10;     "
  ]
  node [
    id 369
    label "public static void fill(Object[] a, int fromIndex, int toIndex, Object val)"
    type "method"
    comment "&#10;     * Assigns the specified Object reference to each element of the specified&#10;     * range of the specified array of Objects.  The range to be filled&#10;     * extends from index {@code fromIndex}, inclusive, to index&#10;     * {@code toIndex}, exclusive.  (If {@code fromIndex==toIndex}, the&#10;     * range to be filled is empty.)&#10;     *&#10;     * @param a the array to be filled&#10;     * @param fromIndex the index of the first element (inclusive) to be&#10;     *        filled with the specified value&#10;     * @param toIndex the index of the last element (exclusive) to be&#10;     *        filled with the specified value&#10;     * @param val the value to be stored in all elements of the array&#10;     * @throws IllegalArgumentException if {@code fromIndex > toIndex}&#10;     * @throws ArrayIndexOutOfBoundsException if {@code fromIndex < 0} or&#10;     *         {@code toIndex > a.length}&#10;     * @throws ArrayStoreException if the specified value is not of a&#10;     *         runtime type that can be stored in the specified array&#10;     "
  ]
  node [
    id 370
    label "public static T[] copyOf(T[] original, int newLength)"
    type "method"
    comment "&#10;     * Copies the specified array, truncating or padding with nulls (if necessary)&#10;     * so the copy has the specified length.  For all indices that are&#10;     * valid in both the original array and the copy, the two arrays will&#10;     * contain identical values.  For any indices that are valid in the&#10;     * copy but not the original, the copy will contain {@code null}.&#10;     * Such indices will exist if and only if the specified length&#10;     * is greater than that of the original array.&#10;     * The resulting array is of exactly the same class as the original array.&#10;     *&#10;     * @param <T> the class of the objects in the array&#10;     * @param original the array to be copied&#10;     * @param newLength the length of the copy to be returned&#10;     * @return a copy of the original array, truncated or padded with nulls&#10;     *     to obtain the specified length&#10;     * @throws NegativeArraySizeException if {@code newLength} is negative&#10;     * @throws NullPointerException if {@code original} is null&#10;     * @since 1.6&#10;     "
  ]
  node [
    id 371
    label "public static T[] copyOf(U[] original, int newLength, Class<? extends T[]> newType)"
    type "method"
    comment "&#10;     * Copies the specified array, truncating or padding with nulls (if necessary)&#10;     * so the copy has the specified length.  For all indices that are&#10;     * valid in both the original array and the copy, the two arrays will&#10;     * contain identical values.  For any indices that are valid in the&#10;     * copy but not the original, the copy will contain {@code null}.&#10;     * Such indices will exist if and only if the specified length&#10;     * is greater than that of the original array.&#10;     * The resulting array is of the class {@code newType}.&#10;     *&#10;     * @param <U> the class of the objects in the original array&#10;     * @param <T> the class of the objects in the returned array&#10;     * @param original the array to be copied&#10;     * @param newLength the length of the copy to be returned&#10;     * @param newType the class of the copy to be returned&#10;     * @return a copy of the original array, truncated or padded with nulls&#10;     *     to obtain the specified length&#10;     * @throws NegativeArraySizeException if {@code newLength} is negative&#10;     * @throws NullPointerException if {@code original} is null&#10;     * @throws ArrayStoreException if an element copied from&#10;     *     {@code original} is not of a runtime type that can be stored in&#10;     *     an array of class {@code newType}&#10;     * @since 1.6&#10;     "
  ]
  node [
    id 372
    label "public static byte[] copyOf(byte[] original, int newLength)"
    type "method"
    comment "&#10;     * Copies the specified array, truncating or padding with zeros (if necessary)&#10;     * so the copy has the specified length.  For all indices that are&#10;     * valid in both the original array and the copy, the two arrays will&#10;     * contain identical values.  For any indices that are valid in the&#10;     * copy but not the original, the copy will contain {@code (byte)0}.&#10;     * Such indices will exist if and only if the specified length&#10;     * is greater than that of the original array.&#10;     *&#10;     * @param original the array to be copied&#10;     * @param newLength the length of the copy to be returned&#10;     * @return a copy of the original array, truncated or padded with zeros&#10;     *     to obtain the specified length&#10;     * @throws NegativeArraySizeException if {@code newLength} is negative&#10;     * @throws NullPointerException if {@code original} is null&#10;     * @since 1.6&#10;     "
  ]
  node [
    id 373
    label "public static short[] copyOf(short[] original, int newLength)"
    type "method"
    comment "&#10;     * Copies the specified array, truncating or padding with zeros (if necessary)&#10;     * so the copy has the specified length.  For all indices that are&#10;     * valid in both the original array and the copy, the two arrays will&#10;     * contain identical values.  For any indices that are valid in the&#10;     * copy but not the original, the copy will contain {@code (short)0}.&#10;     * Such indices will exist if and only if the specified length&#10;     * is greater than that of the original array.&#10;     *&#10;     * @param original the array to be copied&#10;     * @param newLength the length of the copy to be returned&#10;     * @return a copy of the original array, truncated or padded with zeros&#10;     *     to obtain the specified length&#10;     * @throws NegativeArraySizeException if {@code newLength} is negative&#10;     * @throws NullPointerException if {@code original} is null&#10;     * @since 1.6&#10;     "
  ]
  node [
    id 374
    label "public static int[] copyOf(int[] original, int newLength)"
    type "method"
    comment "&#10;     * Copies the specified array, truncating or padding with zeros (if necessary)&#10;     * so the copy has the specified length.  For all indices that are&#10;     * valid in both the original array and the copy, the two arrays will&#10;     * contain identical values.  For any indices that are valid in the&#10;     * copy but not the original, the copy will contain {@code 0}.&#10;     * Such indices will exist if and only if the specified length&#10;     * is greater than that of the original array.&#10;     *&#10;     * @param original the array to be copied&#10;     * @param newLength the length of the copy to be returned&#10;     * @return a copy of the original array, truncated or padded with zeros&#10;     *     to obtain the specified length&#10;     * @throws NegativeArraySizeException if {@code newLength} is negative&#10;     * @throws NullPointerException if {@code original} is null&#10;     * @since 1.6&#10;     "
  ]
  node [
    id 375
    label "public static long[] copyOf(long[] original, int newLength)"
    type "method"
    comment "&#10;     * Copies the specified array, truncating or padding with zeros (if necessary)&#10;     * so the copy has the specified length.  For all indices that are&#10;     * valid in both the original array and the copy, the two arrays will&#10;     * contain identical values.  For any indices that are valid in the&#10;     * copy but not the original, the copy will contain {@code 0L}.&#10;     * Such indices will exist if and only if the specified length&#10;     * is greater than that of the original array.&#10;     *&#10;     * @param original the array to be copied&#10;     * @param newLength the length of the copy to be returned&#10;     * @return a copy of the original array, truncated or padded with zeros&#10;     *     to obtain the specified length&#10;     * @throws NegativeArraySizeException if {@code newLength} is negative&#10;     * @throws NullPointerException if {@code original} is null&#10;     * @since 1.6&#10;     "
  ]
  node [
    id 376
    label "public static char[] copyOf(char[] original, int newLength)"
    type "method"
    comment "&#10;     * Copies the specified array, truncating or padding with null characters (if necessary)&#10;     * so the copy has the specified length.  For all indices that are valid&#10;     * in both the original array and the copy, the two arrays will contain&#10;     * identical values.  For any indices that are valid in the copy but not&#10;     * the original, the copy will contain {@code '\u005cu0000'}.  Such indices&#10;     * will exist if and only if the specified length is greater than that of&#10;     * the original array.&#10;     *&#10;     * @param original the array to be copied&#10;     * @param newLength the length of the copy to be returned&#10;     * @return a copy of the original array, truncated or padded with null characters&#10;     *     to obtain the specified length&#10;     * @throws NegativeArraySizeException if {@code newLength} is negative&#10;     * @throws NullPointerException if {@code original} is null&#10;     * @since 1.6&#10;     "
  ]
  node [
    id 377
    label "public static float[] copyOf(float[] original, int newLength)"
    type "method"
    comment "&#10;     * Copies the specified array, truncating or padding with zeros (if necessary)&#10;     * so the copy has the specified length.  For all indices that are&#10;     * valid in both the original array and the copy, the two arrays will&#10;     * contain identical values.  For any indices that are valid in the&#10;     * copy but not the original, the copy will contain {@code 0f}.&#10;     * Such indices will exist if and only if the specified length&#10;     * is greater than that of the original array.&#10;     *&#10;     * @param original the array to be copied&#10;     * @param newLength the length of the copy to be returned&#10;     * @return a copy of the original array, truncated or padded with zeros&#10;     *     to obtain the specified length&#10;     * @throws NegativeArraySizeException if {@code newLength} is negative&#10;     * @throws NullPointerException if {@code original} is null&#10;     * @since 1.6&#10;     "
  ]
  node [
    id 378
    label "public static double[] copyOf(double[] original, int newLength)"
    type "method"
    comment "&#10;     * Copies the specified array, truncating or padding with zeros (if necessary)&#10;     * so the copy has the specified length.  For all indices that are&#10;     * valid in both the original array and the copy, the two arrays will&#10;     * contain identical values.  For any indices that are valid in the&#10;     * copy but not the original, the copy will contain {@code 0d}.&#10;     * Such indices will exist if and only if the specified length&#10;     * is greater than that of the original array.&#10;     *&#10;     * @param original the array to be copied&#10;     * @param newLength the length of the copy to be returned&#10;     * @return a copy of the original array, truncated or padded with zeros&#10;     *     to obtain the specified length&#10;     * @throws NegativeArraySizeException if {@code newLength} is negative&#10;     * @throws NullPointerException if {@code original} is null&#10;     * @since 1.6&#10;     "
  ]
  node [
    id 379
    label "public static boolean[] copyOf(boolean[] original, int newLength)"
    type "method"
    comment "&#10;     * Copies the specified array, truncating or padding with {@code false} (if necessary)&#10;     * so the copy has the specified length.  For all indices that are&#10;     * valid in both the original array and the copy, the two arrays will&#10;     * contain identical values.  For any indices that are valid in the&#10;     * copy but not the original, the copy will contain {@code false}.&#10;     * Such indices will exist if and only if the specified length&#10;     * is greater than that of the original array.&#10;     *&#10;     * @param original the array to be copied&#10;     * @param newLength the length of the copy to be returned&#10;     * @return a copy of the original array, truncated or padded with false elements&#10;     *     to obtain the specified length&#10;     * @throws NegativeArraySizeException if {@code newLength} is negative&#10;     * @throws NullPointerException if {@code original} is null&#10;     * @since 1.6&#10;     "
  ]
  node [
    id 380
    label "public static T[] copyOfRange(T[] original, int from, int to)"
    type "method"
    comment "&#10;     * Copies the specified range of the specified array into a new array.&#10;     * The initial index of the range ({@code from}) must lie between zero&#10;     * and {@code original.length}, inclusive.  The value at&#10;     * {@code original[from]} is placed into the initial element of the copy&#10;     * (unless {@code from == original.length} or {@code from == to}).&#10;     * Values from subsequent elements in the original array are placed into&#10;     * subsequent elements in the copy.  The final index of the range&#10;     * ({@code to}), which must be greater than or equal to {@code from},&#10;     * may be greater than {@code original.length}, in which case&#10;     * {@code null} is placed in all elements of the copy whose index is&#10;     * greater than or equal to {@code original.length - from}.  The length&#10;     * of the returned array will be {@code to - from}.&#10;     * <p>&#10;     * The resulting array is of exactly the same class as the original array.&#10;     *&#10;     * @param <T> the class of the objects in the array&#10;     * @param original the array from which a range is to be copied&#10;     * @param from the initial index of the range to be copied, inclusive&#10;     * @param to the final index of the range to be copied, exclusive.&#10;     *     (This index may lie outside the array.)&#10;     * @return a new array containing the specified range from the original array,&#10;     *     truncated or padded with nulls to obtain the required length&#10;     * @throws ArrayIndexOutOfBoundsException if {@code from < 0}&#10;     *     or {@code from > original.length}&#10;     * @throws IllegalArgumentException if {@code from > to}&#10;     * @throws NullPointerException if {@code original} is null&#10;     * @since 1.6&#10;     "
  ]
  node [
    id 381
    label "public static T[] copyOfRange(U[] original, int from, int to, Class<? extends T[]> newType)"
    type "method"
    comment "&#10;     * Copies the specified range of the specified array into a new array.&#10;     * The initial index of the range ({@code from}) must lie between zero&#10;     * and {@code original.length}, inclusive.  The value at&#10;     * {@code original[from]} is placed into the initial element of the copy&#10;     * (unless {@code from == original.length} or {@code from == to}).&#10;     * Values from subsequent elements in the original array are placed into&#10;     * subsequent elements in the copy.  The final index of the range&#10;     * ({@code to}), which must be greater than or equal to {@code from},&#10;     * may be greater than {@code original.length}, in which case&#10;     * {@code null} is placed in all elements of the copy whose index is&#10;     * greater than or equal to {@code original.length - from}.  The length&#10;     * of the returned array will be {@code to - from}.&#10;     * The resulting array is of the class {@code newType}.&#10;     *&#10;     * @param <U> the class of the objects in the original array&#10;     * @param <T> the class of the objects in the returned array&#10;     * @param original the array from which a range is to be copied&#10;     * @param from the initial index of the range to be copied, inclusive&#10;     * @param to the final index of the range to be copied, exclusive.&#10;     *     (This index may lie outside the array.)&#10;     * @param newType the class of the copy to be returned&#10;     * @return a new array containing the specified range from the original array,&#10;     *     truncated or padded with nulls to obtain the required length&#10;     * @throws ArrayIndexOutOfBoundsException if {@code from < 0}&#10;     *     or {@code from > original.length}&#10;     * @throws IllegalArgumentException if {@code from > to}&#10;     * @throws NullPointerException if {@code original} is null&#10;     * @throws ArrayStoreException if an element copied from&#10;     *     {@code original} is not of a runtime type that can be stored in&#10;     *     an array of class {@code newType}.&#10;     * @since 1.6&#10;     "
  ]
  node [
    id 382
    label "public static byte[] copyOfRange(byte[] original, int from, int to)"
    type "method"
    comment "&#10;     * Copies the specified range of the specified array into a new array.&#10;     * The initial index of the range ({@code from}) must lie between zero&#10;     * and {@code original.length}, inclusive.  The value at&#10;     * {@code original[from]} is placed into the initial element of the copy&#10;     * (unless {@code from == original.length} or {@code from == to}).&#10;     * Values from subsequent elements in the original array are placed into&#10;     * subsequent elements in the copy.  The final index of the range&#10;     * ({@code to}), which must be greater than or equal to {@code from},&#10;     * may be greater than {@code original.length}, in which case&#10;     * {@code (byte)0} is placed in all elements of the copy whose index is&#10;     * greater than or equal to {@code original.length - from}.  The length&#10;     * of the returned array will be {@code to - from}.&#10;     *&#10;     * @param original the array from which a range is to be copied&#10;     * @param from the initial index of the range to be copied, inclusive&#10;     * @param to the final index of the range to be copied, exclusive.&#10;     *     (This index may lie outside the array.)&#10;     * @return a new array containing the specified range from the original array,&#10;     *     truncated or padded with zeros to obtain the required length&#10;     * @throws ArrayIndexOutOfBoundsException if {@code from < 0}&#10;     *     or {@code from > original.length}&#10;     * @throws IllegalArgumentException if {@code from > to}&#10;     * @throws NullPointerException if {@code original} is null&#10;     * @since 1.6&#10;     "
  ]
  node [
    id 383
    label "public static short[] copyOfRange(short[] original, int from, int to)"
    type "method"
    comment "&#10;     * Copies the specified range of the specified array into a new array.&#10;     * The initial index of the range ({@code from}) must lie between zero&#10;     * and {@code original.length}, inclusive.  The value at&#10;     * {@code original[from]} is placed into the initial element of the copy&#10;     * (unless {@code from == original.length} or {@code from == to}).&#10;     * Values from subsequent elements in the original array are placed into&#10;     * subsequent elements in the copy.  The final index of the range&#10;     * ({@code to}), which must be greater than or equal to {@code from},&#10;     * may be greater than {@code original.length}, in which case&#10;     * {@code (short)0} is placed in all elements of the copy whose index is&#10;     * greater than or equal to {@code original.length - from}.  The length&#10;     * of the returned array will be {@code to - from}.&#10;     *&#10;     * @param original the array from which a range is to be copied&#10;     * @param from the initial index of the range to be copied, inclusive&#10;     * @param to the final index of the range to be copied, exclusive.&#10;     *     (This index may lie outside the array.)&#10;     * @return a new array containing the specified range from the original array,&#10;     *     truncated or padded with zeros to obtain the required length&#10;     * @throws ArrayIndexOutOfBoundsException if {@code from < 0}&#10;     *     or {@code from > original.length}&#10;     * @throws IllegalArgumentException if {@code from > to}&#10;     * @throws NullPointerException if {@code original} is null&#10;     * @since 1.6&#10;     "
  ]
  node [
    id 384
    label "public static int[] copyOfRange(int[] original, int from, int to)"
    type "method"
    comment "&#10;     * Copies the specified range of the specified array into a new array.&#10;     * The initial index of the range ({@code from}) must lie between zero&#10;     * and {@code original.length}, inclusive.  The value at&#10;     * {@code original[from]} is placed into the initial element of the copy&#10;     * (unless {@code from == original.length} or {@code from == to}).&#10;     * Values from subsequent elements in the original array are placed into&#10;     * subsequent elements in the copy.  The final index of the range&#10;     * ({@code to}), which must be greater than or equal to {@code from},&#10;     * may be greater than {@code original.length}, in which case&#10;     * {@code 0} is placed in all elements of the copy whose index is&#10;     * greater than or equal to {@code original.length - from}.  The length&#10;     * of the returned array will be {@code to - from}.&#10;     *&#10;     * @param original the array from which a range is to be copied&#10;     * @param from the initial index of the range to be copied, inclusive&#10;     * @param to the final index of the range to be copied, exclusive.&#10;     *     (This index may lie outside the array.)&#10;     * @return a new array containing the specified range from the original array,&#10;     *     truncated or padded with zeros to obtain the required length&#10;     * @throws ArrayIndexOutOfBoundsException if {@code from < 0}&#10;     *     or {@code from > original.length}&#10;     * @throws IllegalArgumentException if {@code from > to}&#10;     * @throws NullPointerException if {@code original} is null&#10;     * @since 1.6&#10;     "
  ]
  node [
    id 385
    label "public static long[] copyOfRange(long[] original, int from, int to)"
    type "method"
    comment "&#10;     * Copies the specified range of the specified array into a new array.&#10;     * The initial index of the range ({@code from}) must lie between zero&#10;     * and {@code original.length}, inclusive.  The value at&#10;     * {@code original[from]} is placed into the initial element of the copy&#10;     * (unless {@code from == original.length} or {@code from == to}).&#10;     * Values from subsequent elements in the original array are placed into&#10;     * subsequent elements in the copy.  The final index of the range&#10;     * ({@code to}), which must be greater than or equal to {@code from},&#10;     * may be greater than {@code original.length}, in which case&#10;     * {@code 0L} is placed in all elements of the copy whose index is&#10;     * greater than or equal to {@code original.length - from}.  The length&#10;     * of the returned array will be {@code to - from}.&#10;     *&#10;     * @param original the array from which a range is to be copied&#10;     * @param from the initial index of the range to be copied, inclusive&#10;     * @param to the final index of the range to be copied, exclusive.&#10;     *     (This index may lie outside the array.)&#10;     * @return a new array containing the specified range from the original array,&#10;     *     truncated or padded with zeros to obtain the required length&#10;     * @throws ArrayIndexOutOfBoundsException if {@code from < 0}&#10;     *     or {@code from > original.length}&#10;     * @throws IllegalArgumentException if {@code from > to}&#10;     * @throws NullPointerException if {@code original} is null&#10;     * @since 1.6&#10;     "
  ]
  node [
    id 386
    label "public static char[] copyOfRange(char[] original, int from, int to)"
    type "method"
    comment "&#10;     * Copies the specified range of the specified array into a new array.&#10;     * The initial index of the range ({@code from}) must lie between zero&#10;     * and {@code original.length}, inclusive.  The value at&#10;     * {@code original[from]} is placed into the initial element of the copy&#10;     * (unless {@code from == original.length} or {@code from == to}).&#10;     * Values from subsequent elements in the original array are placed into&#10;     * subsequent elements in the copy.  The final index of the range&#10;     * ({@code to}), which must be greater than or equal to {@code from},&#10;     * may be greater than {@code original.length}, in which case&#10;     * {@code '\u005cu0000'} is placed in all elements of the copy whose index is&#10;     * greater than or equal to {@code original.length - from}.  The length&#10;     * of the returned array will be {@code to - from}.&#10;     *&#10;     * @param original the array from which a range is to be copied&#10;     * @param from the initial index of the range to be copied, inclusive&#10;     * @param to the final index of the range to be copied, exclusive.&#10;     *     (This index may lie outside the array.)&#10;     * @return a new array containing the specified range from the original array,&#10;     *     truncated or padded with null characters to obtain the required length&#10;     * @throws ArrayIndexOutOfBoundsException if {@code from < 0}&#10;     *     or {@code from > original.length}&#10;     * @throws IllegalArgumentException if {@code from > to}&#10;     * @throws NullPointerException if {@code original} is null&#10;     * @since 1.6&#10;     "
  ]
  node [
    id 387
    label "public static float[] copyOfRange(float[] original, int from, int to)"
    type "method"
    comment "&#10;     * Copies the specified range of the specified array into a new array.&#10;     * The initial index of the range ({@code from}) must lie between zero&#10;     * and {@code original.length}, inclusive.  The value at&#10;     * {@code original[from]} is placed into the initial element of the copy&#10;     * (unless {@code from == original.length} or {@code from == to}).&#10;     * Values from subsequent elements in the original array are placed into&#10;     * subsequent elements in the copy.  The final index of the range&#10;     * ({@code to}), which must be greater than or equal to {@code from},&#10;     * may be greater than {@code original.length}, in which case&#10;     * {@code 0f} is placed in all elements of the copy whose index is&#10;     * greater than or equal to {@code original.length - from}.  The length&#10;     * of the returned array will be {@code to - from}.&#10;     *&#10;     * @param original the array from which a range is to be copied&#10;     * @param from the initial index of the range to be copied, inclusive&#10;     * @param to the final index of the range to be copied, exclusive.&#10;     *     (This index may lie outside the array.)&#10;     * @return a new array containing the specified range from the original array,&#10;     *     truncated or padded with zeros to obtain the required length&#10;     * @throws ArrayIndexOutOfBoundsException if {@code from < 0}&#10;     *     or {@code from > original.length}&#10;     * @throws IllegalArgumentException if {@code from > to}&#10;     * @throws NullPointerException if {@code original} is null&#10;     * @since 1.6&#10;     "
  ]
  node [
    id 388
    label "public static double[] copyOfRange(double[] original, int from, int to)"
    type "method"
    comment "&#10;     * Copies the specified range of the specified array into a new array.&#10;     * The initial index of the range ({@code from}) must lie between zero&#10;     * and {@code original.length}, inclusive.  The value at&#10;     * {@code original[from]} is placed into the initial element of the copy&#10;     * (unless {@code from == original.length} or {@code from == to}).&#10;     * Values from subsequent elements in the original array are placed into&#10;     * subsequent elements in the copy.  The final index of the range&#10;     * ({@code to}), which must be greater than or equal to {@code from},&#10;     * may be greater than {@code original.length}, in which case&#10;     * {@code 0d} is placed in all elements of the copy whose index is&#10;     * greater than or equal to {@code original.length - from}.  The length&#10;     * of the returned array will be {@code to - from}.&#10;     *&#10;     * @param original the array from which a range is to be copied&#10;     * @param from the initial index of the range to be copied, inclusive&#10;     * @param to the final index of the range to be copied, exclusive.&#10;     *     (This index may lie outside the array.)&#10;     * @return a new array containing the specified range from the original array,&#10;     *     truncated or padded with zeros to obtain the required length&#10;     * @throws ArrayIndexOutOfBoundsException if {@code from < 0}&#10;     *     or {@code from > original.length}&#10;     * @throws IllegalArgumentException if {@code from > to}&#10;     * @throws NullPointerException if {@code original} is null&#10;     * @since 1.6&#10;     "
  ]
  node [
    id 389
    label "public static boolean[] copyOfRange(boolean[] original, int from, int to)"
    type "method"
    comment "&#10;     * Copies the specified range of the specified array into a new array.&#10;     * The initial index of the range ({@code from}) must lie between zero&#10;     * and {@code original.length}, inclusive.  The value at&#10;     * {@code original[from]} is placed into the initial element of the copy&#10;     * (unless {@code from == original.length} or {@code from == to}).&#10;     * Values from subsequent elements in the original array are placed into&#10;     * subsequent elements in the copy.  The final index of the range&#10;     * ({@code to}), which must be greater than or equal to {@code from},&#10;     * may be greater than {@code original.length}, in which case&#10;     * {@code false} is placed in all elements of the copy whose index is&#10;     * greater than or equal to {@code original.length - from}.  The length&#10;     * of the returned array will be {@code to - from}.&#10;     *&#10;     * @param original the array from which a range is to be copied&#10;     * @param from the initial index of the range to be copied, inclusive&#10;     * @param to the final index of the range to be copied, exclusive.&#10;     *     (This index may lie outside the array.)&#10;     * @return a new array containing the specified range from the original array,&#10;     *     truncated or padded with false elements to obtain the required length&#10;     * @throws ArrayIndexOutOfBoundsException if {@code from < 0}&#10;     *     or {@code from > original.length}&#10;     * @throws IllegalArgumentException if {@code from > to}&#10;     * @throws NullPointerException if {@code original} is null&#10;     * @since 1.6&#10;     "
  ]
  node [
    id 390
    label "public static List<T> asList(T... a)"
    type "method"
    comment "&#10;     * Returns a fixed-size list backed by the specified array. Changes made to&#10;     * the array will be visible in the returned list, and changes made to the&#10;     * list will be visible in the array. The returned list is&#10;     * {@link Serializable} and implements {@link RandomAccess}.&#10;     *&#10;     * <p>The returned list implements the optional {@code Collection} methods, except&#10;     * those that would change the size of the returned list. Those methods leave&#10;     * the list unchanged and throw {@link UnsupportedOperationException}.&#10;     *&#10;     * @apiNote&#10;     * This method acts as bridge between array-based and collection-based&#10;     * APIs, in combination with {@link Collection#toArray}.&#10;     *&#10;     * <p>This method provides a way to wrap an existing array:&#10;     * <pre>{@code&#10;     *     Integer[] numbers = ...&#10;     *     ...&#10;     *     List<Integer> values = Arrays.asList(numbers);&#10;     * }</pre>&#10;     *&#10;     * <p>This method also provides a convenient way to create a fixed-size&#10;     * list initialized to contain several elements:&#10;     * <pre>{@code&#10;     *     List<String> stooges = Arrays.asList(&#34;Larry&#34;, &#34;Moe&#34;, &#34;Curly&#34;);&#10;     * }</pre>&#10;     *&#10;     * <p><em>The list returned by this method is modifiable.</em>&#10;     * To create an unmodifiable list, use&#10;     * {@link Collections#unmodifiableList Collections.unmodifiableList}&#10;     * or <a href=&#34;List.html#unmodifiable&#34;>Unmodifiable Lists</a>.&#10;     *&#10;     * @param <T> the class of the objects in the array&#10;     * @param a the array by which the list will be backed&#10;     * @return a list view of the specified array&#10;     * @throws NullPointerException if the specified array is {@code null}&#10;     "
  ]
  node [
    id 391
    label "java.util.RandomAccess"
    type "class"
    comment "&#10; * Marker interface used by {@code List} implementations to indicate that&#10; * they support fast (generally constant time) random access.  The primary&#10; * purpose of this interface is to allow generic algorithms to alter their&#10; * behavior to provide good performance when applied to either random or&#10; * sequential access lists.&#10; *&#10; * <p>The best algorithms for manipulating random access lists (such as&#10; * {@code ArrayList}) can produce quadratic behavior when applied to&#10; * sequential access lists (such as {@code LinkedList}).  Generic list&#10; * algorithms are encouraged to check whether the given list is an&#10; * {@code instanceof} this interface before applying an algorithm that would&#10; * provide poor performance if it were applied to a sequential access list,&#10; * and to alter their behavior if necessary to guarantee acceptable&#10; * performance.&#10; *&#10; * <p>It is recognized that the distinction between random and sequential&#10; * access is often fuzzy.  For example, some {@code List} implementations&#10; * provide asymptotically linear access times if they get huge, but constant&#10; * access times in practice.  Such a {@code List} implementation&#10; * should generally implement this interface.  As a rule of thumb, a&#10; * {@code List} implementation should implement this interface if,&#10; * for typical instances of the class, this loop:&#10; * <pre>&#10; *     for (int i=0, n=list.size(); i &#38;lt; n; i++)&#10; *         list.get(i);&#10; * </pre>&#10; * runs faster than this loop:&#10; * <pre>&#10; *     for (Iterator i=list.iterator(); i.hasNext(); )&#10; *         i.next();&#10; * </pre>&#10; *&#10; * <p>This interface is a member of the&#10; * <a href=&#34;{@docRoot}/java.base/java/util/package-summary.html#CollectionsFramework&#34;>&#10; * Java Collections Framework</a>.&#10; *&#10; * @since 1.4&#10; "
  ]
  node [
    id 392
    label "unmodifiableList"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 393
    label "java.io.Serializable"
    type "class"
    comment "&#10; * Serializability of a class is enabled by the class implementing the&#10; * java.io.Serializable interface.&#10; *&#10; * <p><strong>Warning: Deserialization of untrusted data is inherently dangerous&#10; * and should be avoided. Untrusted data should be carefully validated.&#10; * </strong></p>&#10; *&#10; * Classes that do not implement this&#10; * interface will not have any of their state serialized or&#10; * deserialized.  All subtypes of a serializable class are themselves&#10; * serializable.  The serialization interface has no methods or fields&#10; * and serves only to identify the semantics of being serializable. <p>&#10; *&#10; * To allow subtypes of non-serializable classes to be serialized, the&#10; * subtype may assume responsibility for saving and restoring the&#10; * state of the supertype's public, protected, and (if accessible)&#10; * package fields.  The subtype may assume this responsibility only if&#10; * the class it extends has an accessible no-arg constructor to&#10; * initialize the class's state.  It is an error to declare a class&#10; * Serializable if this is not the case.  The error will be detected at&#10; * runtime. <p>&#10; *&#10; * During deserialization, the fields of non-serializable classes will&#10; * be initialized using the public or protected no-arg constructor of&#10; * the class.  A no-arg constructor must be accessible to the subclass&#10; * that is serializable.  The fields of serializable subclasses will&#10; * be restored from the stream. <p>&#10; *&#10; * When traversing a graph, an object may be encountered that does not&#10; * support the Serializable interface. In this case the&#10; * NotSerializableException will be thrown and will identify the class&#10; * of the non-serializable object. <p>&#10; *&#10; * Classes that require special handling during the serialization and&#10; * deserialization process must implement special methods with these exact&#10; * signatures:&#10; *&#10; * <PRE>&#10; * private void writeObject(java.io.ObjectOutputStream out)&#10; *     throws IOException&#10; * private void readObject(java.io.ObjectInputStream in)&#10; *     throws IOException, ClassNotFoundException;&#10; * private void readObjectNoData()&#10; *     throws ObjectStreamException;&#10; * </PRE>&#10; *&#10; * <p>The writeObject method is responsible for writing the state of the&#10; * object for its particular class so that the corresponding&#10; * readObject method can restore it.  The default mechanism for saving&#10; * the Object's fields can be invoked by calling&#10; * out.defaultWriteObject. The method does not need to concern&#10; * itself with the state belonging to its superclasses or subclasses.&#10; * State is saved by writing the individual fields to the&#10; * ObjectOutputStream using the writeObject method or by using the&#10; * methods for primitive data types supported by DataOutput.&#10; *&#10; * <p>The readObject method is responsible for reading from the stream and&#10; * restoring the classes fields. It may call in.defaultReadObject to invoke&#10; * the default mechanism for restoring the object's non-static and&#10; * non-transient fields.  The defaultReadObject method uses information in&#10; * the stream to assign the fields of the object saved in the stream with the&#10; * correspondingly named fields in the current object.  This handles the case&#10; * when the class has evolved to add new fields. The method does not need to&#10; * concern itself with the state belonging to its superclasses or subclasses.&#10; * State is restored by reading data from the ObjectInputStream for&#10; * the individual fields and making assignments to the appropriate fields&#10; * of the object. Reading primitive data types is supported by DataInput.&#10; *&#10; * <p>The readObjectNoData method is responsible for initializing the state of&#10; * the object for its particular class in the event that the serialization&#10; * stream does not list the given class as a superclass of the object being&#10; * deserialized.  This may occur in cases where the receiving party uses a&#10; * different version of the deserialized instance's class than the sending&#10; * party, and the receiver's version extends classes that are not extended by&#10; * the sender's version.  This may also occur if the serialization stream has&#10; * been tampered; hence, readObjectNoData is useful for initializing&#10; * deserialized objects properly despite a &#34;hostile&#34; or incomplete source&#10; * stream.&#10; *&#10; * <p>Serializable classes that need to designate an alternative object to be&#10; * used when writing an object to the stream should implement this&#10; * special method with the exact signature:&#10; *&#10; * <PRE>&#10; * ANY-ACCESS-MODIFIER Object writeReplace() throws ObjectStreamException;&#10; * </PRE><p>&#10; *&#10; * This writeReplace method is invoked by serialization if the method&#10; * exists and it would be accessible from a method defined within the&#10; * class of the object being serialized. Thus, the method can have private,&#10; * protected and package-private access. Subclass access to this method&#10; * follows java accessibility rules. <p>&#10; *&#10; * Classes that need to designate a replacement when an instance of it&#10; * is read from the stream should implement this special method with the&#10; * exact signature.&#10; *&#10; * <PRE>&#10; * ANY-ACCESS-MODIFIER Object readResolve() throws ObjectStreamException;&#10; * </PRE><p>&#10; *&#10; * This readResolve method follows the same invocation rules and&#10; * accessibility rules as writeReplace.<p>&#10; *&#10; * The serialization runtime associates with each serializable class a version&#10; * number, called a serialVersionUID, which is used during deserialization to&#10; * verify that the sender and receiver of a serialized object have loaded&#10; * classes for that object that are compatible with respect to serialization.&#10; * If the receiver has loaded a class for the object that has a different&#10; * serialVersionUID than that of the corresponding sender's class, then&#10; * deserialization will result in an {@link InvalidClassException}.  A&#10; * serializable class can declare its own serialVersionUID explicitly by&#10; * declaring a field named <code>&#34;serialVersionUID&#34;</code> that must be static,&#10; * final, and of type <code>long</code>:&#10; *&#10; * <PRE>&#10; * ANY-ACCESS-MODIFIER static final long serialVersionUID = 42L;&#10; * </PRE>&#10; *&#10; * If a serializable class does not explicitly declare a serialVersionUID, then&#10; * the serialization runtime will calculate a default serialVersionUID value&#10; * for that class based on various aspects of the class, as described in the&#10; * Java(TM) Object Serialization Specification.  However, it is <em>strongly&#10; * recommended</em> that all serializable classes explicitly declare&#10; * serialVersionUID values, since the default serialVersionUID computation is&#10; * highly sensitive to class details that may vary depending on compiler&#10; * implementations, and can thus result in unexpected&#10; * <code>InvalidClassException</code>s during deserialization.  Therefore, to&#10; * guarantee a consistent serialVersionUID value across different java compiler&#10; * implementations, a serializable class must declare an explicit&#10; * serialVersionUID value.  It is also strongly advised that explicit&#10; * serialVersionUID declarations use the <code>private</code> modifier where&#10; * possible, since such declarations apply only to the immediately declaring&#10; * class--serialVersionUID fields are not useful as inherited members. Array&#10; * classes cannot declare an explicit serialVersionUID, so they always have&#10; * the default computed value, but the requirement for matching&#10; * serialVersionUID values is waived for array classes.&#10; *&#10; * Android implementation of serialVersionUID computation will change slightly&#10; * for some classes if you're targeting android N. In order to preserve compatibility,&#10; * this change is only enabled if the application target SDK version is set to&#10; * 24 or higher. It is highly recommended to use an explicit serialVersionUID&#10; * field to avoid compatibility issues.&#10; *&#10; * <h3>Implement Serializable Judiciously</h3>&#10; * Refer to <i>Effective Java</i>'s chapter on serialization for thorough&#10; * coverage of the serialization API. The book explains how to use this&#10; * interface without harming your application's maintainability.&#10; *&#10; * <h3>Recommended Alternatives</h3>&#10; * <strong>JSON</strong> is concise, human-readable and efficient. Android&#10; * includes both a {@link android.util.JsonReader streaming API} and a {@link&#10; * org.json.JSONObject tree API} to read and write JSON. Use a binding library&#10; * like <a href=&#34;http://code.google.com/p/google-gson/&#34;>GSON</a> to read and&#10; * write Java objects directly.&#10; *&#10; * @author  unascribed&#10; * @see java.io.ObjectOutputStream&#10; * @see java.io.ObjectInputStream&#10; * @see java.io.ObjectOutput&#10; * @see java.io.ObjectInput&#10; * @see java.io.Externalizable&#10; * @since   1.1&#10; "
  ]
  node [
    id 394
    label "public static int hashCode(long[] a)"
    type "method"
    comment "&#10;     * Returns a hash code based on the contents of the specified array.&#10;     * For any two {@code long} arrays {@code a} and {@code b}&#10;     * such that {@code Arrays.equals(a, b)}, it is also the case that&#10;     * {@code Arrays.hashCode(a) == Arrays.hashCode(b)}.&#10;     *&#10;     * <p>The value returned by this method is the same value that would be&#10;     * obtained by invoking the {@link List#hashCode() hashCode}&#10;     * method on a {@link List} containing a sequence of {@link Long}&#10;     * instances representing the elements of {@code a} in the same order.&#10;     * If {@code a} is {@code null}, this method returns 0.&#10;     *&#10;     * @param a the array whose hash value to compute&#10;     * @return a content-based hash code for {@code a}&#10;     * @since 1.5&#10;     "
  ]
  node [
    id 395
    label "java.util.List"
    type "class"
    comment ""
  ]
  node [
    id 396
    label " boolean addAll(int index, Collection<? extends E> c)"
    type "method"
    comment "&#10;     * Inserts all of the elements in the specified collection into this&#10;     * list at the specified position (optional operation).  Shifts the&#10;     * element currently at that position (if any) and any subsequent&#10;     * elements to the right (increases their indices).  The new elements&#10;     * will appear in this list in the order that they are returned by the&#10;     * specified collection's iterator.  The behavior of this operation is&#10;     * undefined if the specified collection is modified while the&#10;     * operation is in progress.  (Note that this will occur if the specified&#10;     * collection is this list, and it's nonempty.)&#10;     *&#10;     * @param index index at which to insert the first element from the&#10;     *              specified collection&#10;     * @param c collection containing elements to be added to this list&#10;     * @return {@code true} if this list changed as a result of the call&#10;     * @throws UnsupportedOperationException if the {@code addAll} operation&#10;     *         is not supported by this list&#10;     * @throws ClassCastException if the class of an element of the specified&#10;     *         collection prevents it from being added to this list&#10;     * @throws NullPointerException if the specified collection contains one&#10;     *         or more null elements and this list does not permit null&#10;     *         elements, or if the specified collection is null&#10;     * @throws IllegalArgumentException if some property of an element of the&#10;     *         specified collection prevents it from being added to this list&#10;     * @throws IndexOutOfBoundsException if the index is out of range&#10;     *         ({@code index < 0 || index > size()})&#10;     "
  ]
  node [
    id 397
    label " void replaceAll(UnaryOperator<E> operator)"
    type "method"
    comment "&#10;     * Replaces each element of this list with the result of applying the&#10;     * operator to that element.  Errors or runtime exceptions thrown by&#10;     * the operator are relayed to the caller.&#10;     *&#10;     * @implSpec&#10;     * The default implementation is equivalent to, for this {@code list}:&#10;     * <pre>{@code&#10;     *     final ListIterator<E> li = list.listIterator();&#10;     *     while (li.hasNext()) {&#10;     *         li.set(operator.apply(li.next()));&#10;     *     }&#10;     * }</pre>&#10;     *&#10;     * If the list's list-iterator does not support the {@code set} operation&#10;     * then an {@code UnsupportedOperationException} will be thrown when&#10;     * replacing the first element.&#10;     *&#10;     * @param operator the operator to apply to each element&#10;     * @throws UnsupportedOperationException if this list is unmodifiable.&#10;     *         Implementations may throw this exception if an element&#10;     *         cannot be replaced or if, in general, modification is not&#10;     *         supported&#10;     * @throws NullPointerException if the specified operator is null or&#10;     *         if the operator result is a null value and this list does&#10;     *         not permit null elements&#10;     *         (<a href=&#34;Collection.html#optional-restrictions&#34;>optional</a>)&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 398
    label " void sort(Comparator<? super E> c)"
    type "method"
    comment "&#10;     * Sorts this list according to the order induced by the specified&#10;     * {@link Comparator}.&#10;     *&#10;     * <p>All elements in this list must be <i>mutually comparable</i> using the&#10;     * specified comparator (that is, {@code c.compare(e1, e2)} must not throw&#10;     * a {@code ClassCastException} for any elements {@code e1} and {@code e2}&#10;     * in the list).&#10;     *&#10;     * <p>If the specified comparator is {@code null} then all elements in this&#10;     * list must implement the {@link Comparable} interface and the elements'&#10;     * {@linkplain Comparable natural ordering} should be used.&#10;     *&#10;     * <p>This list must be modifiable, but need not be resizable.&#10;     *&#10;     * <p>For apps running on and targeting Android versions greater than&#10;     * Nougat (API level {@code > 25}), {@link Collections#sort(List)}&#10;     * delegates to this method. Such apps must not call&#10;     * {@link Collections#sort(List)} from this method. Instead, prefer&#10;     * not overriding this method at all. If you must override it, consider&#10;     * this implementation:&#10;     * <pre>&#10;     * &#38;#064;Override&#10;     * public void sort(Comparator&#38;lt;? super E&#38;gt; c) {&#10;     *   Object[] elements = toArray();&#10;     *   Arrays.sort(elements, c);&#10;     *   ListIterator&#38;lt;E&#38;gt; iterator = (ListIterator&#38;lt;Object&#38;gt;) listIterator();&#10;     *   for (Object element : elements) {&#10;     *     iterator.next();&#10;     *     iterator.set((E) element);&#10;     *   }&#10;     * }&#10;     * </pre>&#10;     *&#10;     * @implSpec&#10;     * The default implementation obtains an array containing all elements in&#10;     * this list, sorts the array, and iterates over this list resetting each&#10;     * element from the corresponding position in the array. (This avoids the&#10;     * n<sup>2</sup> log(n) performance that would result from attempting&#10;     * to sort a linked list in place.)&#10;     *&#10;     * @implNote&#10;     * This implementation is a stable, adaptive, iterative mergesort that&#10;     * requires far fewer than n lg(n) comparisons when the input array is&#10;     * partially sorted, while offering the performance of a traditional&#10;     * mergesort when the input array is randomly ordered.  If the input array&#10;     * is nearly sorted, the implementation requires approximately n&#10;     * comparisons.  Temporary storage requirements vary from a small constant&#10;     * for nearly sorted input arrays to n/2 object references for randomly&#10;     * ordered input arrays.&#10;     *&#10;     * <p>The implementation takes equal advantage of ascending and&#10;     * descending order in its input array, and can take advantage of&#10;     * ascending and descending order in different parts of the same&#10;     * input array.  It is well-suited to merging two or more sorted arrays:&#10;     * simply concatenate the arrays and sort the resulting array.&#10;     *&#10;     * <p>The implementation was adapted from Tim Peters's list sort for Python&#10;     * (<a href=&#34;http://svn.python.org/projects/python/trunk/Objects/listsort.txt&#34;>&#10;     * TimSort</a>).  It uses techniques from Peter McIlroy's &#34;Optimistic&#10;     * Sorting and Information Theoretic Complexity&#34;, in Proceedings of the&#10;     * Fourth Annual ACM-SIAM Symposium on Discrete Algorithms, pp 467-474,&#10;     * January 1993.&#10;     *&#10;     * @param c the {@code Comparator} used to compare list elements.&#10;     *          A {@code null} value indicates that the elements'&#10;     *          {@linkplain Comparable natural ordering} should be used&#10;     * @throws ClassCastException if the list contains elements that are not&#10;     *         <i>mutually comparable</i> using the specified comparator&#10;     * @throws UnsupportedOperationException if the list's list-iterator does&#10;     *         not support the {@code set} operation&#10;     * @throws IllegalArgumentException&#10;     *         (<a href=&#34;Collection.html#optional-restrictions&#34;>optional</a>)&#10;     *         if the comparator is found to violate the {@link Comparator}&#10;     *         contract&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 399
    label "sort(List)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 400
    label "hashCode"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 401
    label " E get(int index)"
    type "method"
    comment "&#10;     * Returns the element at the specified position in this list.&#10;     *&#10;     * @param index index of the element to return&#10;     * @return the element at the specified position in this list&#10;     * @throws IndexOutOfBoundsException if the index is out of range&#10;     *         ({@code index < 0 || index >= size()})&#10;     "
  ]
  node [
    id 402
    label " E set(int index, E element)"
    type "method"
    comment "&#10;     * Replaces the element at the specified position in this list with the&#10;     * specified element (optional operation).&#10;     *&#10;     * @param index index of the element to replace&#10;     * @param element element to be stored at the specified position&#10;     * @return the element previously at the specified position&#10;     * @throws UnsupportedOperationException if the {@code set} operation&#10;     *         is not supported by this list&#10;     * @throws ClassCastException if the class of the specified element&#10;     *         prevents it from being added to this list&#10;     * @throws NullPointerException if the specified element is null and&#10;     *         this list does not permit null elements&#10;     * @throws IllegalArgumentException if some property of the specified&#10;     *         element prevents it from being added to this list&#10;     * @throws IndexOutOfBoundsException if the index is out of range&#10;     *         ({@code index < 0 || index >= size()})&#10;     "
  ]
  node [
    id 403
    label " void add(int index, E element)"
    type "method"
    comment "&#10;     * Inserts the specified element at the specified position in this list&#10;     * (optional operation).  Shifts the element currently at that position&#10;     * (if any) and any subsequent elements to the right (adds one to their&#10;     * indices).&#10;     *&#10;     * @param index index at which the specified element is to be inserted&#10;     * @param element element to be inserted&#10;     * @throws UnsupportedOperationException if the {@code add} operation&#10;     *         is not supported by this list&#10;     * @throws ClassCastException if the class of the specified element&#10;     *         prevents it from being added to this list&#10;     * @throws NullPointerException if the specified element is null and&#10;     *         this list does not permit null elements&#10;     * @throws IllegalArgumentException if some property of the specified&#10;     *         element prevents it from being added to this list&#10;     * @throws IndexOutOfBoundsException if the index is out of range&#10;     *         ({@code index < 0 || index > size()})&#10;     "
  ]
  node [
    id 404
    label " E remove(int index)"
    type "method"
    comment "&#10;     * Removes the element at the specified position in this list (optional&#10;     * operation).  Shifts any subsequent elements to the left (subtracts one&#10;     * from their indices).  Returns the element that was removed from the&#10;     * list.&#10;     *&#10;     * @param index the index of the element to be removed&#10;     * @return the element previously at the specified position&#10;     * @throws UnsupportedOperationException if the {@code remove} operation&#10;     *         is not supported by this list&#10;     * @throws IndexOutOfBoundsException if the index is out of range&#10;     *         ({@code index < 0 || index >= size()})&#10;     "
  ]
  node [
    id 405
    label " int indexOf(Object o)"
    type "method"
    comment "&#10;     * Returns the index of the first occurrence of the specified element&#10;     * in this list, or -1 if this list does not contain the element.&#10;     * More formally, returns the lowest index {@code i} such that&#10;     * {@code Objects.equals(o, get(i))},&#10;     * or -1 if there is no such index.&#10;     *&#10;     * @param o element to search for&#10;     * @return the index of the first occurrence of the specified element in&#10;     *         this list, or -1 if this list does not contain the element&#10;     * @throws ClassCastException if the type of the specified element&#10;     *         is incompatible with this list&#10;     *         (<a href=&#34;Collection.html#optional-restrictions&#34;>optional</a>)&#10;     * @throws NullPointerException if the specified element is null and this&#10;     *         list does not permit null elements&#10;     *         (<a href=&#34;Collection.html#optional-restrictions&#34;>optional</a>)&#10;     "
  ]
  node [
    id 406
    label " int lastIndexOf(Object o)"
    type "method"
    comment "&#10;     * Returns the index of the last occurrence of the specified element&#10;     * in this list, or -1 if this list does not contain the element.&#10;     * More formally, returns the highest index {@code i} such that&#10;     * {@code Objects.equals(o, get(i))},&#10;     * or -1 if there is no such index.&#10;     *&#10;     * @param o element to search for&#10;     * @return the index of the last occurrence of the specified element in&#10;     *         this list, or -1 if this list does not contain the element&#10;     * @throws ClassCastException if the type of the specified element&#10;     *         is incompatible with this list&#10;     *         (<a href=&#34;Collection.html#optional-restrictions&#34;>optional</a>)&#10;     * @throws NullPointerException if the specified element is null and this&#10;     *         list does not permit null elements&#10;     *         (<a href=&#34;Collection.html#optional-restrictions&#34;>optional</a>)&#10;     "
  ]
  node [
    id 407
    label " ListIterator<E> listIterator()"
    type "method"
    comment "&#10;     * Returns a list iterator over the elements in this list (in proper&#10;     * sequence).&#10;     *&#10;     * @return a list iterator over the elements in this list (in proper&#10;     *         sequence)&#10;     "
  ]
  node [
    id 408
    label " ListIterator<E> listIterator(int index)"
    type "method"
    comment "&#10;     * Returns a list iterator over the elements in this list (in proper&#10;     * sequence), starting at the specified position in the list.&#10;     * The specified index indicates the first element that would be&#10;     * returned by an initial call to {@link ListIterator#next next}.&#10;     * An initial call to {@link ListIterator#previous previous} would&#10;     * return the element with the specified index minus one.&#10;     *&#10;     * @param index index of the first element to be returned from the&#10;     *        list iterator (by a call to {@link ListIterator#next next})&#10;     * @return a list iterator over the elements in this list (in proper&#10;     *         sequence), starting at the specified position in the list&#10;     * @throws IndexOutOfBoundsException if the index is out of range&#10;     *         ({@code index < 0 || index > size()})&#10;     "
  ]
  node [
    id 409
    label "java.util.ListIterator"
    type "class"
    comment "&#10; * An iterator for lists that allows the programmer&#10; * to traverse the list in either direction, modify&#10; * the list during iteration, and obtain the iterator's&#10; * current position in the list. A {@code ListIterator}&#10; * has no current element; its <I>cursor position</I> always&#10; * lies between the element that would be returned by a call&#10; * to {@code previous()} and the element that would be&#10; * returned by a call to {@code next()}.&#10; * An iterator for a list of length {@code n} has {@code n+1} possible&#10; * cursor positions, as illustrated by the carets ({@code ^}) below:&#10; * <PRE>&#10; *                      Element(0)   Element(1)   Element(2)   ... Element(n-1)&#10; * cursor positions:  ^            ^            ^            ^                  ^&#10; * </PRE>&#10; * Note that the {@link #remove} and {@link #set(Object)} methods are&#10; * <i>not</i> defined in terms of the cursor position;  they are defined to&#10; * operate on the last element returned by a call to {@link #next} or&#10; * {@link #previous()}.&#10; *&#10; * <p>This interface is a member of the&#10; * <a href=&#34;{@docRoot}/java.base/java/util/package-summary.html#CollectionsFramework&#34;>&#10; * Java Collections Framework</a>.&#10; *&#10; * @author  Josh Bloch&#10; * @see Collection&#10; * @see List&#10; * @see Iterator&#10; * @see Enumeration&#10; * @see List#listIterator()&#10; * @since   1.2&#10; "
  ]
  node [
    id 410
    label "previous"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 411
    label " boolean hasPrevious()"
    type "method"
    comment "&#10;     * Returns {@code true} if this list iterator has more elements when&#10;     * traversing the list in the reverse direction.  (In other words,&#10;     * returns {@code true} if {@link #previous} would return an element&#10;     * rather than throwing an exception.)&#10;     *&#10;     * @return {@code true} if the list iterator has more elements when&#10;     *         traversing the list in the reverse direction&#10;     "
  ]
  node [
    id 412
    label " E previous()"
    type "method"
    comment "&#10;     * Returns the previous element in the list and moves the cursor&#10;     * position backwards.  This method may be called repeatedly to&#10;     * iterate through the list backwards, or intermixed with calls to&#10;     * {@link #next} to go back and forth.  (Note that alternating calls&#10;     * to {@code next} and {@code previous} will return the same&#10;     * element repeatedly.)&#10;     *&#10;     * @return the previous element in the list&#10;     * @throws NoSuchElementException if the iteration has no previous&#10;     *         element&#10;     "
  ]
  node [
    id 413
    label " int nextIndex()"
    type "method"
    comment "&#10;     * Returns the index of the element that would be returned by a&#10;     * subsequent call to {@link #next}. (Returns list size if the list&#10;     * iterator is at the end of the list.)&#10;     *&#10;     * @return the index of the element that would be returned by a&#10;     *         subsequent call to {@code next}, or list size if the list&#10;     *         iterator is at the end of the list&#10;     "
  ]
  node [
    id 414
    label " int previousIndex()"
    type "method"
    comment "&#10;     * Returns the index of the element that would be returned by a&#10;     * subsequent call to {@link #previous}. (Returns -1 if the list&#10;     * iterator is at the beginning of the list.)&#10;     *&#10;     * @return the index of the element that would be returned by a&#10;     *         subsequent call to {@code previous}, or -1 if the list&#10;     *         iterator is at the beginning of the list&#10;     "
  ]
  node [
    id 415
    label " void set(E e)"
    type "method"
    comment "&#10;     * Replaces the last element returned by {@link #next} or&#10;     * {@link #previous} with the specified element (optional operation).&#10;     * This call can be made only if neither {@link #remove} nor {@link&#10;     * #add} have been called after the last call to {@code next} or&#10;     * {@code previous}.&#10;     *&#10;     * @param e the element with which to replace the last element returned by&#10;     *          {@code next} or {@code previous}&#10;     * @throws UnsupportedOperationException if the {@code set} operation&#10;     *         is not supported by this list iterator&#10;     * @throws ClassCastException if the class of the specified element&#10;     *         prevents it from being added to this list&#10;     * @throws IllegalArgumentException if some aspect of the specified&#10;     *         element prevents it from being added to this list&#10;     * @throws IllegalStateException if neither {@code next} nor&#10;     *         {@code previous} have been called, or {@code remove} or&#10;     *         {@code add} have been called after the last call to&#10;     *         {@code next} or {@code previous}&#10;     "
  ]
  node [
    id 416
    label " void add(E e)"
    type "method"
    comment "&#10;     * Inserts the specified element into the list (optional operation).&#10;     * The element is inserted immediately before the element that&#10;     * would be returned by {@link #next}, if any, and after the element&#10;     * that would be returned by {@link #previous}, if any.  (If the&#10;     * list contains no elements, the new element becomes the sole element&#10;     * on the list.)  The new element is inserted before the implicit&#10;     * cursor: a subsequent call to {@code next} would be unaffected, and a&#10;     * subsequent call to {@code previous} would return the new element.&#10;     * (This call increases by one the value that would be returned by a&#10;     * call to {@code nextIndex} or {@code previousIndex}.)&#10;     *&#10;     * @param e the element to insert&#10;     * @throws UnsupportedOperationException if the {@code add} method is&#10;     *         not supported by this list iterator&#10;     * @throws ClassCastException if the class of the specified element&#10;     *         prevents it from being added to this list&#10;     * @throws IllegalArgumentException if some aspect of this element&#10;     *         prevents it from being added to this list&#10;     "
  ]
  node [
    id 417
    label " List<E> subList(int fromIndex, int toIndex)"
    type "method"
    comment "&#10;     * Returns a view of the portion of this list between the specified&#10;     * {@code fromIndex}, inclusive, and {@code toIndex}, exclusive.  (If&#10;     * {@code fromIndex} and {@code toIndex} are equal, the returned list is&#10;     * empty.)  The returned list is backed by this list, so non-structural&#10;     * changes in the returned list are reflected in this list, and vice-versa.&#10;     * The returned list supports all of the optional list operations supported&#10;     * by this list.<p>&#10;     *&#10;     * This method eliminates the need for explicit range operations (of&#10;     * the sort that commonly exist for arrays).  Any operation that expects&#10;     * a list can be used as a range operation by passing a subList view&#10;     * instead of a whole list.  For example, the following idiom&#10;     * removes a range of elements from a list:&#10;     * <pre>{@code&#10;     *      list.subList(from, to).clear();&#10;     * }</pre>&#10;     * Similar idioms may be constructed for {@code indexOf} and&#10;     * {@code lastIndexOf}, and all of the algorithms in the&#10;     * {@code Collections} class can be applied to a subList.<p>&#10;     *&#10;     * The semantics of the list returned by this method become undefined if&#10;     * the backing list (i.e., this list) is <i>structurally modified</i> in&#10;     * any way other than via the returned list.  (Structural modifications are&#10;     * those that change the size of this list, or otherwise perturb it in such&#10;     * a fashion that iterations in progress may yield incorrect results.)&#10;     *&#10;     * @param fromIndex low endpoint (inclusive) of the subList&#10;     * @param toIndex high endpoint (exclusive) of the subList&#10;     * @return a view of the specified range within this list&#10;     * @throws IndexOutOfBoundsException for an illegal endpoint index value&#10;     *         ({@code fromIndex < 0 || toIndex > size ||&#10;     *         fromIndex > toIndex})&#10;     "
  ]
  node [
    id 418
    label "modCount"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 419
    label "java.util.AbstractList"
    type "class"
    comment ""
  ]
  node [
    id 420
    label "public boolean add(E e)"
    type "method"
    comment "&#10;     * Appends the specified element to the end of this list (optional&#10;     * operation).&#10;     *&#10;     * <p>Lists that support this operation may place limitations on what&#10;     * elements may be added to this list.  In particular, some&#10;     * lists will refuse to add null elements, and others will impose&#10;     * restrictions on the type of elements that may be added.  List&#10;     * classes should clearly specify in their documentation any restrictions&#10;     * on what elements may be added.&#10;     *&#10;     * @implSpec&#10;     * This implementation calls {@code add(size(), e)}.&#10;     *&#10;     * <p>Note that this implementation throws an&#10;     * {@code UnsupportedOperationException} unless&#10;     * {@link #add(int, Object) add(int, E)} is overridden.&#10;     *&#10;     * @param e element to be appended to this list&#10;     * @return {@code true} (as specified by {@link Collection#add})&#10;     * @throws UnsupportedOperationException if the {@code add} operation&#10;     *         is not supported by this list&#10;     * @throws ClassCastException if the class of the specified element&#10;     *         prevents it from being added to this list&#10;     * @throws NullPointerException if the specified element is null and this&#10;     *         list does not permit null elements&#10;     * @throws IllegalArgumentException if some property of this element&#10;     *         prevents it from being added to this list&#10;     "
  ]
  node [
    id 421
    label "add(int"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 422
    label "public abstract E get(int index)"
    type "method"
    comment "&#10;     * {@inheritDoc}&#10;     *&#10;     * @throws IndexOutOfBoundsException {@inheritDoc}&#10;     "
  ]
  node [
    id 423
    label "public E set(int index, E element)"
    type "method"
    comment "&#10;     * {@inheritDoc}&#10;     *&#10;     * @implSpec&#10;     * This implementation always throws an&#10;     * {@code UnsupportedOperationException}.&#10;     *&#10;     * @throws UnsupportedOperationException {@inheritDoc}&#10;     * @throws ClassCastException            {@inheritDoc}&#10;     * @throws NullPointerException          {@inheritDoc}&#10;     * @throws IllegalArgumentException      {@inheritDoc}&#10;     * @throws IndexOutOfBoundsException     {@inheritDoc}&#10;     "
  ]
  node [
    id 424
    label "public void add(int index, E element)"
    type "method"
    comment "&#10;     * {@inheritDoc}&#10;     *&#10;     * @implSpec&#10;     * This implementation always throws an&#10;     * {@code UnsupportedOperationException}.&#10;     *&#10;     * @throws UnsupportedOperationException {@inheritDoc}&#10;     * @throws ClassCastException            {@inheritDoc}&#10;     * @throws NullPointerException          {@inheritDoc}&#10;     * @throws IllegalArgumentException      {@inheritDoc}&#10;     * @throws IndexOutOfBoundsException     {@inheritDoc}&#10;     "
  ]
  node [
    id 425
    label "public E remove(int index)"
    type "method"
    comment "&#10;     * {@inheritDoc}&#10;     *&#10;     * @implSpec&#10;     * This implementation always throws an&#10;     * {@code UnsupportedOperationException}.&#10;     *&#10;     * @throws UnsupportedOperationException {@inheritDoc}&#10;     * @throws IndexOutOfBoundsException     {@inheritDoc}&#10;     "
  ]
  node [
    id 426
    label "public int indexOf(Object o)"
    type "method"
    comment "&#10;     * {@inheritDoc}&#10;     *&#10;     * @implSpec&#10;     * This implementation first gets a list iterator (with&#10;     * {@code listIterator()}).  Then, it iterates over the list until the&#10;     * specified element is found or the end of the list is reached.&#10;     *&#10;     * @throws ClassCastException   {@inheritDoc}&#10;     * @throws NullPointerException {@inheritDoc}&#10;     "
  ]
  node [
    id 427
    label "public int lastIndexOf(Object o)"
    type "method"
    comment "&#10;     * {@inheritDoc}&#10;     *&#10;     * @implSpec&#10;     * This implementation first gets a list iterator that points to the end&#10;     * of the list (with {@code listIterator(size())}).  Then, it iterates&#10;     * backwards over the list until the specified element is found, or the&#10;     * beginning of the list is reached.&#10;     *&#10;     * @throws ClassCastException   {@inheritDoc}&#10;     * @throws NullPointerException {@inheritDoc}&#10;     "
  ]
  node [
    id 428
    label "public void clear()"
    type "method"
    comment "&#10;     * Removes all of the elements from this list (optional operation).&#10;     * The list will be empty after this call returns.&#10;     *&#10;     * @implSpec&#10;     * This implementation calls {@code removeRange(0, size())}.&#10;     *&#10;     * <p>Note that this implementation throws an&#10;     * {@code UnsupportedOperationException} unless {@code remove(int&#10;     * index)} or {@code removeRange(int fromIndex, int toIndex)} is&#10;     * overridden.&#10;     *&#10;     * @throws UnsupportedOperationException if the {@code clear} operation&#10;     *         is not supported by this list&#10;     "
  ]
  node [
    id 429
    label "public boolean addAll(int index, Collection<? extends E> c)"
    type "method"
    comment "&#10;     * {@inheritDoc}&#10;     *&#10;     * @implSpec&#10;     * This implementation gets an iterator over the specified collection&#10;     * and iterates over it, inserting the elements obtained from the&#10;     * iterator into this list at the appropriate position, one at a time,&#10;     * using {@code add(int, E)}.&#10;     * Many implementations will override this method for efficiency.&#10;     *&#10;     * <p>Note that this implementation throws an&#10;     * {@code UnsupportedOperationException} unless&#10;     * {@link #add(int, Object) add(int, E)} is overridden.&#10;     *&#10;     * @throws UnsupportedOperationException {@inheritDoc}&#10;     * @throws ClassCastException            {@inheritDoc}&#10;     * @throws NullPointerException          {@inheritDoc}&#10;     * @throws IllegalArgumentException      {@inheritDoc}&#10;     * @throws IndexOutOfBoundsException     {@inheritDoc}&#10;     "
  ]
  node [
    id 430
    label "public Iterator<E> iterator()"
    type "method"
    comment "&#10;     * Returns an iterator over the elements in this list in proper sequence.&#10;     *&#10;     * @implSpec&#10;     * This implementation returns a straightforward implementation of the&#10;     * iterator interface, relying on the backing list's {@code size()},&#10;     * {@code get(int)}, and {@code remove(int)} methods.&#10;     *&#10;     * <p>Note that the iterator returned by this method will throw an&#10;     * {@link UnsupportedOperationException} in response to its&#10;     * {@code remove} method unless the list's {@code remove(int)} method is&#10;     * overridden.&#10;     *&#10;     * <p>This implementation can be made to throw runtime exceptions in the&#10;     * face of concurrent modification, as described in the specification&#10;     * for the (protected) {@link #modCount} field.&#10;     *&#10;     * @return an iterator over the elements in this list in proper sequence&#10;     "
  ]
  node [
    id 431
    label "public ListIterator<E> listIterator()"
    type "method"
    comment "&#10;     * {@inheritDoc}&#10;     *&#10;     * @implSpec&#10;     * This implementation returns {@code listIterator(0)}.&#10;     *&#10;     * @see #listIterator(int)&#10;     "
  ]
  node [
    id 432
    label "public ListIterator<E> listIterator(final int index)"
    type "method"
    comment "&#10;     * {@inheritDoc}&#10;     *&#10;     * @implSpec&#10;     * This implementation returns a straightforward implementation of the&#10;     * {@code ListIterator} interface that extends the implementation of the&#10;     * {@code Iterator} interface returned by the {@code iterator()} method.&#10;     * The {@code ListIterator} implementation relies on the backing list's&#10;     * {@code get(int)}, {@code set(int, E)}, {@code add(int, E)}&#10;     * and {@code remove(int)} methods.&#10;     *&#10;     * <p>Note that the list iterator returned by this implementation will&#10;     * throw an {@link UnsupportedOperationException} in response to its&#10;     * {@code remove}, {@code set} and {@code add} methods unless the&#10;     * list's {@code remove(int)}, {@code set(int, E)}, and&#10;     * {@code add(int, E)} methods are overridden.&#10;     *&#10;     * <p>This implementation can be made to throw runtime exceptions in the&#10;     * face of concurrent modification, as described in the specification for&#10;     * the (protected) {@link #modCount} field.&#10;     *&#10;     * @throws IndexOutOfBoundsException {@inheritDoc}&#10;     "
  ]
  node [
    id 433
    label "public List<E> subList(int fromIndex, int toIndex)"
    type "method"
    comment "&#10;     * {@inheritDoc}&#10;     *&#10;     * @implSpec&#10;     * This implementation returns a list that subclasses&#10;     * {@code AbstractList}.  The subclass stores, in private fields, the&#10;     * size of the subList (which can change over its lifetime), and the&#10;     * expected {@code modCount} value of the backing list.  There are two&#10;     * variants of the subclass, one of which implements {@code RandomAccess}.&#10;     * If this list implements {@code RandomAccess} the returned list will&#10;     * be an instance of the subclass that implements {@code RandomAccess}.&#10;     *&#10;     * <p>The subclass's {@code set(int, E)}, {@code get(int)},&#10;     * {@code add(int, E)}, {@code remove(int)}, {@code addAll(int,&#10;     * Collection)} and {@code removeRange(int, int)} methods all&#10;     * delegate to the corresponding methods on the backing abstract list,&#10;     * after bounds-checking the index and adjusting for the offset.  The&#10;     * {@code addAll(Collection c)} method merely returns {@code addAll(size,&#10;     * c)}.&#10;     *&#10;     * <p>The {@code listIterator(int)} method returns a &#34;wrapper object&#34;&#10;     * over a list iterator on the backing list, which is created with the&#10;     * corresponding method on the backing list.  The {@code iterator} method&#10;     * merely returns {@code listIterator()}, and the {@code size} method&#10;     * merely returns the subclass's {@code size} field.&#10;     *&#10;     * <p>All methods first check to see if the actual {@code modCount} of&#10;     * the backing list is equal to its expected value, and throw a&#10;     * {@code ConcurrentModificationException} if it is not.&#10;     *&#10;     * @throws IndexOutOfBoundsException if an endpoint index value is out of range&#10;     *         {@code (fromIndex < 0 || toIndex > size)}&#10;     * @throws IllegalArgumentException if the endpoint indices are out of order&#10;     *         {@code (fromIndex > toIndex)}&#10;     "
  ]
  node [
    id 434
    label "public boolean equals(Object o)"
    type "method"
    comment "&#10;     * Compares the specified object with this list for equality.  Returns&#10;     * {@code true} if and only if the specified object is also a list, both&#10;     * lists have the same size, and all corresponding pairs of elements in&#10;     * the two lists are <i>equal</i>.  (Two elements {@code e1} and&#10;     * {@code e2} are <i>equal</i> if {@code (e1==null ? e2==null :&#10;     * e1.equals(e2))}.)  In other words, two lists are defined to be&#10;     * equal if they contain the same elements in the same order.&#10;     *&#10;     * @implSpec&#10;     * This implementation first checks if the specified object is this&#10;     * list. If so, it returns {@code true}; if not, it checks if the&#10;     * specified object is a list. If not, it returns {@code false}; if so,&#10;     * it iterates over both lists, comparing corresponding pairs of elements.&#10;     * If any comparison returns {@code false}, this method returns&#10;     * {@code false}.  If either iterator runs out of elements before the&#10;     * other it returns {@code false} (as the lists are of unequal length);&#10;     * otherwise it returns {@code true} when the iterations complete.&#10;     *&#10;     * @param o the object to be compared for equality with this list&#10;     * @return {@code true} if the specified object is equal to this list&#10;     "
  ]
  node [
    id 435
    label "public int hashCode()"
    type "method"
    comment "&#10;     * Returns a hash code for this {@code Double} object. The&#10;     * result is the exclusive OR of the two halves of the&#10;     * {@code long} integer bit representation, exactly as&#10;     * produced by the method {@link #doubleToLongBits(double)}, of&#10;     * the primitive {@code double} value represented by this&#10;     * {@code Double} object. That is, the hash code is the value&#10;     * of the expression:&#10;     *&#10;     * <blockquote>&#10;     *  {@code (int)(v^(v>>>32))}&#10;     * </blockquote>&#10;     *&#10;     * where {@code v} is defined by:&#10;     *&#10;     * <blockquote>&#10;     *  {@code long v = Double.doubleToLongBits(this.doubleValue());}&#10;     * </blockquote>&#10;     *&#10;     * @return  a {@code hash code} value for this object.&#10;     "
  ]
  node [
    id 436
    label "protected void removeRange(int fromIndex, int toIndex)"
    type "method"
    comment "&#10;     * Removes from this list all of the elements whose index is between&#10;     * {@code fromIndex}, inclusive, and {@code toIndex}, exclusive.&#10;     * Shifts any succeeding elements to the left (reduces their index).&#10;     * This call shortens the list by {@code (toIndex - fromIndex)} elements.&#10;     * (If {@code toIndex==fromIndex}, this operation has no effect.)&#10;     *&#10;     * <p>This method is called by the {@code clear} operation on this list&#10;     * and its subLists.  Overriding this method to take advantage of&#10;     * the internals of the list implementation can <i>substantially</i>&#10;     * improve the performance of the {@code clear} operation on this list&#10;     * and its subLists.&#10;     *&#10;     * @implSpec&#10;     * This implementation gets a list iterator positioned before&#10;     * {@code fromIndex}, and repeatedly calls {@code ListIterator.next}&#10;     * followed by {@code ListIterator.remove} until the entire range has&#10;     * been removed.  <b>Note: if {@code ListIterator.remove} requires linear&#10;     * time, this implementation requires quadratic time.</b>&#10;     *&#10;     * @param fromIndex index of first element to be removed&#10;     * @param toIndex index after last element to be removed&#10;     "
  ]
  node [
    id 437
    label "get"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 438
    label " void addFirst(E e)"
    type "method"
    comment "&#10;     * {@inheritDoc}&#10;     *&#10;     * @implSpec&#10;     * The implementation in this interface calls {@code add(0, e)}.&#10;     *&#10;     * @throws NullPointerException {@inheritDoc}&#10;     * @throws UnsupportedOperationException {@inheritDoc}&#10;     * @since 21&#10;     "
  ]
  node [
    id 439
    label " void addLast(E e)"
    type "method"
    comment "&#10;     * {@inheritDoc}&#10;     *&#10;     * @implSpec&#10;     * The implementation in this interface calls {@code add(e)}.&#10;     *&#10;     * @throws NullPointerException {@inheritDoc}&#10;     * @throws UnsupportedOperationException {@inheritDoc}&#10;     * @since 21&#10;     "
  ]
  node [
    id 440
    label " E getFirst()"
    type "method"
    comment "&#10;     * {@inheritDoc}&#10;     *&#10;     * @implSpec&#10;     * If this List is not empty, the implementation in this interface returns the result&#10;     * of calling {@code get(0)}. Otherwise, it throws {@code NoSuchElementException}.&#10;     *&#10;     * @throws NoSuchElementException {@inheritDoc}&#10;     * @since 21&#10;     "
  ]
  node [
    id 441
    label " E getLast()"
    type "method"
    comment "&#10;     * {@inheritDoc}&#10;     *&#10;     * @implSpec&#10;     * If this List is not empty, the implementation in this interface returns the result&#10;     * of calling {@code get(size() - 1)}. Otherwise, it throws {@code NoSuchElementException}.&#10;     *&#10;     * @throws NoSuchElementException {@inheritDoc}&#10;     * @since 21&#10;     "
  ]
  node [
    id 442
    label " E removeFirst()"
    type "method"
    comment "&#10;     * {@inheritDoc}&#10;     *&#10;     * @implSpec&#10;     * If this List is not empty, the implementation in this interface returns the result&#10;     * of calling {@code remove(0)}. Otherwise, it throws {@code NoSuchElementException}.&#10;     *&#10;     * @throws NoSuchElementException {@inheritDoc}&#10;     * @throws UnsupportedOperationException {@inheritDoc}&#10;     * @since 21&#10;     "
  ]
  node [
    id 443
    label " E removeLast()"
    type "method"
    comment "&#10;     * {@inheritDoc}&#10;     *&#10;     * @implSpec&#10;     * If this List is not empty, the implementation in this interface returns the result&#10;     * of calling {@code remove(size() - 1)}. Otherwise, it throws {@code NoSuchElementException}.&#10;     *&#10;     * @throws NoSuchElementException {@inheritDoc}&#10;     * @throws UnsupportedOperationException {@inheritDoc}&#10;     * @since 21&#10;     "
  ]
  node [
    id 444
    label " List<E> reversed()"
    type "method"
    comment "&#10;     * {@inheritDoc}&#10;     *&#10;     * @implSpec&#10;     * The implementation in this interface returns a reverse-ordered List&#10;     * view. The {@code reversed()} method of the view returns a reference&#10;     * to this List. Other operations on the view are implemented via calls to&#10;     * public methods on this List. The exact relationship between calls on the&#10;     * view and calls on this List is unspecified. However, order-sensitive&#10;     * operations generally delegate to the appropriate method with the opposite&#10;     * orientation. For example, calling {@code getFirst} on the view results in&#10;     * a call to {@code getLast} on this List.&#10;     *&#10;     * @return a reverse-ordered view of this collection, as a {@code List}&#10;     * @since 21&#10;     "
  ]
  node [
    id 445
    label " static List<E> of()"
    type "method"
    comment "&#10;     * Returns an unmodifiable list containing zero elements.&#10;     *&#10;     * See <a href=&#34;#unmodifiable&#34;>Unmodifiable Lists</a> for details.&#10;     *&#10;     * @param <E> the {@code List}'s element type&#10;     * @return an empty {@code List}&#10;     *&#10;     * @since 9&#10;     "
  ]
  node [
    id 446
    label " static List<E> of(E e1)"
    type "method"
    comment "&#10;     * Returns an unmodifiable list containing one element.&#10;     *&#10;     * See <a href=&#34;#unmodifiable&#34;>Unmodifiable Lists</a> for details.&#10;     *&#10;     * @param <E> the {@code List}'s element type&#10;     * @param e1 the single element&#10;     * @return a {@code List} containing the specified element&#10;     * @throws NullPointerException if the element is {@code null}&#10;     *&#10;     * @since 9&#10;     "
  ]
  node [
    id 447
    label " static List<E> of(E e1, E e2)"
    type "method"
    comment "&#10;     * Returns an unmodifiable list containing two elements.&#10;     *&#10;     * See <a href=&#34;#unmodifiable&#34;>Unmodifiable Lists</a> for details.&#10;     *&#10;     * @param <E> the {@code List}'s element type&#10;     * @param e1 the first element&#10;     * @param e2 the second element&#10;     * @return a {@code List} containing the specified elements&#10;     * @throws NullPointerException if an element is {@code null}&#10;     *&#10;     * @since 9&#10;     "
  ]
  node [
    id 448
    label " static List<E> of(E e1, E e2, E e3)"
    type "method"
    comment "&#10;     * Returns an unmodifiable list containing three elements.&#10;     *&#10;     * See <a href=&#34;#unmodifiable&#34;>Unmodifiable Lists</a> for details.&#10;     *&#10;     * @param <E> the {@code List}'s element type&#10;     * @param e1 the first element&#10;     * @param e2 the second element&#10;     * @param e3 the third element&#10;     * @return a {@code List} containing the specified elements&#10;     * @throws NullPointerException if an element is {@code null}&#10;     *&#10;     * @since 9&#10;     "
  ]
  node [
    id 449
    label " static List<E> of(E e1, E e2, E e3, E e4)"
    type "method"
    comment "&#10;     * Returns an unmodifiable list containing four elements.&#10;     *&#10;     * See <a href=&#34;#unmodifiable&#34;>Unmodifiable Lists</a> for details.&#10;     *&#10;     * @param <E> the {@code List}'s element type&#10;     * @param e1 the first element&#10;     * @param e2 the second element&#10;     * @param e3 the third element&#10;     * @param e4 the fourth element&#10;     * @return a {@code List} containing the specified elements&#10;     * @throws NullPointerException if an element is {@code null}&#10;     *&#10;     * @since 9&#10;     "
  ]
  node [
    id 450
    label " static List<E> of(E e1, E e2, E e3, E e4, E e5)"
    type "method"
    comment "&#10;     * Returns an unmodifiable list containing five elements.&#10;     *&#10;     * See <a href=&#34;#unmodifiable&#34;>Unmodifiable Lists</a> for details.&#10;     *&#10;     * @param <E> the {@code List}'s element type&#10;     * @param e1 the first element&#10;     * @param e2 the second element&#10;     * @param e3 the third element&#10;     * @param e4 the fourth element&#10;     * @param e5 the fifth element&#10;     * @return a {@code List} containing the specified elements&#10;     * @throws NullPointerException if an element is {@code null}&#10;     *&#10;     * @since 9&#10;     "
  ]
  node [
    id 451
    label " static List<E> of(E e1, E e2, E e3, E e4, E e5, E e6)"
    type "method"
    comment "&#10;     * Returns an unmodifiable list containing six elements.&#10;     *&#10;     * See <a href=&#34;#unmodifiable&#34;>Unmodifiable Lists</a> for details.&#10;     *&#10;     * @param <E> the {@code List}'s element type&#10;     * @param e1 the first element&#10;     * @param e2 the second element&#10;     * @param e3 the third element&#10;     * @param e4 the fourth element&#10;     * @param e5 the fifth element&#10;     * @param e6 the sixth element&#10;     * @return a {@code List} containing the specified elements&#10;     * @throws NullPointerException if an element is {@code null}&#10;     *&#10;     * @since 9&#10;     "
  ]
  node [
    id 452
    label " static List<E> of(E e1, E e2, E e3, E e4, E e5, E e6, E e7)"
    type "method"
    comment "&#10;     * Returns an unmodifiable list containing seven elements.&#10;     *&#10;     * See <a href=&#34;#unmodifiable&#34;>Unmodifiable Lists</a> for details.&#10;     *&#10;     * @param <E> the {@code List}'s element type&#10;     * @param e1 the first element&#10;     * @param e2 the second element&#10;     * @param e3 the third element&#10;     * @param e4 the fourth element&#10;     * @param e5 the fifth element&#10;     * @param e6 the sixth element&#10;     * @param e7 the seventh element&#10;     * @return a {@code List} containing the specified elements&#10;     * @throws NullPointerException if an element is {@code null}&#10;     *&#10;     * @since 9&#10;     "
  ]
  node [
    id 453
    label " static List<E> of(E e1, E e2, E e3, E e4, E e5, E e6, E e7, E e8)"
    type "method"
    comment "&#10;     * Returns an unmodifiable list containing eight elements.&#10;     *&#10;     * See <a href=&#34;#unmodifiable&#34;>Unmodifiable Lists</a> for details.&#10;     *&#10;     * @param <E> the {@code List}'s element type&#10;     * @param e1 the first element&#10;     * @param e2 the second element&#10;     * @param e3 the third element&#10;     * @param e4 the fourth element&#10;     * @param e5 the fifth element&#10;     * @param e6 the sixth element&#10;     * @param e7 the seventh element&#10;     * @param e8 the eighth element&#10;     * @return a {@code List} containing the specified elements&#10;     * @throws NullPointerException if an element is {@code null}&#10;     *&#10;     * @since 9&#10;     "
  ]
  node [
    id 454
    label " static List<E> of(E e1, E e2, E e3, E e4, E e5, E e6, E e7, E e8, E e9)"
    type "method"
    comment "&#10;     * Returns an unmodifiable list containing nine elements.&#10;     *&#10;     * See <a href=&#34;#unmodifiable&#34;>Unmodifiable Lists</a> for details.&#10;     *&#10;     * @param <E> the {@code List}'s element type&#10;     * @param e1 the first element&#10;     * @param e2 the second element&#10;     * @param e3 the third element&#10;     * @param e4 the fourth element&#10;     * @param e5 the fifth element&#10;     * @param e6 the sixth element&#10;     * @param e7 the seventh element&#10;     * @param e8 the eighth element&#10;     * @param e9 the ninth element&#10;     * @return a {@code List} containing the specified elements&#10;     * @throws NullPointerException if an element is {@code null}&#10;     *&#10;     * @since 9&#10;     "
  ]
  node [
    id 455
    label " static List<E> of(E e1, E e2, E e3, E e4, E e5, E e6, E e7, E e8, E e9, E e10)"
    type "method"
    comment "&#10;     * Returns an unmodifiable list containing ten elements.&#10;     *&#10;     * See <a href=&#34;#unmodifiable&#34;>Unmodifiable Lists</a> for details.&#10;     *&#10;     * @param <E> the {@code List}'s element type&#10;     * @param e1 the first element&#10;     * @param e2 the second element&#10;     * @param e3 the third element&#10;     * @param e4 the fourth element&#10;     * @param e5 the fifth element&#10;     * @param e6 the sixth element&#10;     * @param e7 the seventh element&#10;     * @param e8 the eighth element&#10;     * @param e9 the ninth element&#10;     * @param e10 the tenth element&#10;     * @return a {@code List} containing the specified elements&#10;     * @throws NullPointerException if an element is {@code null}&#10;     *&#10;     * @since 9&#10;     "
  ]
  node [
    id 456
    label " static List<E> of(E... elements)"
    type "method"
    comment "&#10;     * Returns an unmodifiable list containing an arbitrary number of elements.&#10;     * See <a href=&#34;#unmodifiable&#34;>Unmodifiable Lists</a> for details.&#10;     *&#10;     * @apiNote&#10;     * This method also accepts a single array as an argument. The element type of&#10;     * the resulting list will be the component type of the array, and the size of&#10;     * the list will be equal to the length of the array. To create a list with&#10;     * a single element that is an array, do the following:&#10;     *&#10;     * <pre>{@code&#10;     *     String[] array = ... ;&#10;     *     List<String[]> list = List.<String[]>of(array);&#10;     * }</pre>&#10;     *&#10;     * This will cause the {@link List#of(Object) List.of(E)} method&#10;     * to be invoked instead.&#10;     *&#10;     * @param <E> the {@code List}'s element type&#10;     * @param elements the elements to be contained in the list&#10;     * @return a {@code List} containing the specified elements&#10;     * @throws NullPointerException if an element is {@code null} or if the array is {@code null}&#10;     *&#10;     * @since 9&#10;     "
  ]
  node [
    id 457
    label "of(Object)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 458
    label " static List<E> copyOf(Collection<? extends E> coll)"
    type "method"
    comment "&#10;     * Returns an <a href=&#34;#unmodifiable&#34;>unmodifiable List</a> containing the elements of&#10;     * the given Collection, in its iteration order. The given Collection must not be null,&#10;     * and it must not contain any null elements. If the given Collection is subsequently&#10;     * modified, the returned List will not reflect such modifications.&#10;     *&#10;     * @implNote&#10;     * If the given Collection is an <a href=&#34;#unmodifiable&#34;>unmodifiable List</a>,&#10;     * calling copyOf will generally not create a copy.&#10;     *&#10;     * @param <E> the {@code List}'s element type&#10;     * @param coll a {@code Collection} from which elements are drawn, must be non-null&#10;     * @return a {@code List} containing the elements of the given {@code Collection}&#10;     * @throws NullPointerException if coll is null, or if it contains any nulls&#10;     * @since 10&#10;     "
  ]
  node [
    id 459
    label "Long"
  ]
  node [
    id 460
    label "public static int hashCode(int[] a)"
    type "method"
    comment "&#10;     * Returns a hash code based on the contents of the specified array.&#10;     * For any two non-null {@code int} arrays {@code a} and {@code b}&#10;     * such that {@code Arrays.equals(a, b)}, it is also the case that&#10;     * {@code Arrays.hashCode(a) == Arrays.hashCode(b)}.&#10;     *&#10;     * <p>The value returned by this method is the same value that would be&#10;     * obtained by invoking the {@link List#hashCode() hashCode}&#10;     * method on a {@link List} containing a sequence of {@link Integer}&#10;     * instances representing the elements of {@code a} in the same order.&#10;     * If {@code a} is {@code null}, this method returns 0.&#10;     *&#10;     * @param a the array whose hash value to compute&#10;     * @return a content-based hash code for {@code a}&#10;     * @since 1.5&#10;     "
  ]
  node [
    id 461
    label "Integer"
  ]
  node [
    id 462
    label "public static int hashCode(short[] a)"
    type "method"
    comment "&#10;     * Returns a hash code based on the contents of the specified array.&#10;     * For any two {@code short} arrays {@code a} and {@code b}&#10;     * such that {@code Arrays.equals(a, b)}, it is also the case that&#10;     * {@code Arrays.hashCode(a) == Arrays.hashCode(b)}.&#10;     *&#10;     * <p>The value returned by this method is the same value that would be&#10;     * obtained by invoking the {@link List#hashCode() hashCode}&#10;     * method on a {@link List} containing a sequence of {@link Short}&#10;     * instances representing the elements of {@code a} in the same order.&#10;     * If {@code a} is {@code null}, this method returns 0.&#10;     *&#10;     * @param a the array whose hash value to compute&#10;     * @return a content-based hash code for {@code a}&#10;     * @since 1.5&#10;     "
  ]
  node [
    id 463
    label "Short"
  ]
  node [
    id 464
    label "public static int hashCode(char[] a)"
    type "method"
    comment "&#10;     * Returns a hash code based on the contents of the specified array.&#10;     * For any two {@code char} arrays {@code a} and {@code b}&#10;     * such that {@code Arrays.equals(a, b)}, it is also the case that&#10;     * {@code Arrays.hashCode(a) == Arrays.hashCode(b)}.&#10;     *&#10;     * <p>The value returned by this method is the same value that would be&#10;     * obtained by invoking the {@link List#hashCode() hashCode}&#10;     * method on a {@link List} containing a sequence of {@link Character}&#10;     * instances representing the elements of {@code a} in the same order.&#10;     * If {@code a} is {@code null}, this method returns 0.&#10;     *&#10;     * @param a the array whose hash value to compute&#10;     * @return a content-based hash code for {@code a}&#10;     * @since 1.5&#10;     "
  ]
  node [
    id 465
    label "Character"
  ]
  node [
    id 466
    label "public static int hashCode(byte[] a)"
    type "method"
    comment "&#10;     * Returns a hash code based on the contents of the specified array.&#10;     * For any two {@code byte} arrays {@code a} and {@code b}&#10;     * such that {@code Arrays.equals(a, b)}, it is also the case that&#10;     * {@code Arrays.hashCode(a) == Arrays.hashCode(b)}.&#10;     *&#10;     * <p>The value returned by this method is the same value that would be&#10;     * obtained by invoking the {@link List#hashCode() hashCode}&#10;     * method on a {@link List} containing a sequence of {@link Byte}&#10;     * instances representing the elements of {@code a} in the same order.&#10;     * If {@code a} is {@code null}, this method returns 0.&#10;     *&#10;     * @param a the array whose hash value to compute&#10;     * @return a content-based hash code for {@code a}&#10;     * @since 1.5&#10;     "
  ]
  node [
    id 467
    label "Byte"
  ]
  node [
    id 468
    label "public static int hashCode(boolean[] a)"
    type "method"
    comment "&#10;     * Returns a hash code based on the contents of the specified array.&#10;     * For any two {@code boolean} arrays {@code a} and {@code b}&#10;     * such that {@code Arrays.equals(a, b)}, it is also the case that&#10;     * {@code Arrays.hashCode(a) == Arrays.hashCode(b)}.&#10;     *&#10;     * <p>The value returned by this method is the same value that would be&#10;     * obtained by invoking the {@link List#hashCode() hashCode}&#10;     * method on a {@link List} containing a sequence of {@link Boolean}&#10;     * instances representing the elements of {@code a} in the same order.&#10;     * If {@code a} is {@code null}, this method returns 0.&#10;     *&#10;     * @param a the array whose hash value to compute&#10;     * @return a content-based hash code for {@code a}&#10;     * @since 1.5&#10;     "
  ]
  node [
    id 469
    label "Boolean"
  ]
  node [
    id 470
    label "public static int hashCode(float[] a)"
    type "method"
    comment "&#10;     * Returns a hash code based on the contents of the specified array.&#10;     * For any two {@code float} arrays {@code a} and {@code b}&#10;     * such that {@code Arrays.equals(a, b)}, it is also the case that&#10;     * {@code Arrays.hashCode(a) == Arrays.hashCode(b)}.&#10;     *&#10;     * <p>The value returned by this method is the same value that would be&#10;     * obtained by invoking the {@link List#hashCode() hashCode}&#10;     * method on a {@link List} containing a sequence of {@link Float}&#10;     * instances representing the elements of {@code a} in the same order.&#10;     * If {@code a} is {@code null}, this method returns 0.&#10;     *&#10;     * @param a the array whose hash value to compute&#10;     * @return a content-based hash code for {@code a}&#10;     * @since 1.5&#10;     "
  ]
  node [
    id 471
    label "Float"
  ]
  node [
    id 472
    label "public static int hashCode(double[] a)"
    type "method"
    comment "&#10;     * Returns a hash code based on the contents of the specified array.&#10;     * For any two {@code double} arrays {@code a} and {@code b}&#10;     * such that {@code Arrays.equals(a, b)}, it is also the case that&#10;     * {@code Arrays.hashCode(a) == Arrays.hashCode(b)}.&#10;     *&#10;     * <p>The value returned by this method is the same value that would be&#10;     * obtained by invoking the {@link List#hashCode() hashCode}&#10;     * method on a {@link List} containing a sequence of {@link Double}&#10;     * instances representing the elements of {@code a} in the same order.&#10;     * If {@code a} is {@code null}, this method returns 0.&#10;     *&#10;     * @param a the array whose hash value to compute&#10;     * @return a content-based hash code for {@code a}&#10;     * @since 1.5&#10;     "
  ]
  node [
    id 473
    label "Double"
  ]
  node [
    id 474
    label "public static int hashCode(Object[] a)"
    type "method"
    comment "&#10;     * Returns a hash code based on the contents of the specified array.  If&#10;     * the array contains other arrays as elements, the hash code is based on&#10;     * their identities rather than their contents.  It is therefore&#10;     * acceptable to invoke this method on an array that contains itself as an&#10;     * element,  either directly or indirectly through one or more levels of&#10;     * arrays.&#10;     *&#10;     * <p>For any two arrays {@code a} and {@code b} such that&#10;     * {@code Arrays.equals(a, b)}, it is also the case that&#10;     * {@code Arrays.hashCode(a) == Arrays.hashCode(b)}.&#10;     *&#10;     * <p>The value returned by this method is equal to the value that would&#10;     * be returned by {@code Arrays.asList(a).hashCode()}, unless {@code a}&#10;     * is {@code null}, in which case {@code 0} is returned.&#10;     *&#10;     * @param a the array whose content-based hash code to compute&#10;     * @return a content-based hash code for {@code a}&#10;     * @see #deepHashCode(Object[])&#10;     * @since 1.5&#10;     "
  ]
  node [
    id 475
    label "public static int deepHashCode(Object[] a)"
    type "method"
    comment "&#10;     * Returns a hash code based on the &#34;deep contents&#34; of the specified&#10;     * array.  If the array contains other arrays as elements, the&#10;     * hash code is based on their contents and so on, ad infinitum.&#10;     * It is therefore unacceptable to invoke this method on an array that&#10;     * contains itself as an element, either directly or indirectly through&#10;     * one or more levels of arrays.  The behavior of such an invocation is&#10;     * undefined.&#10;     *&#10;     * <p>For any two arrays {@code a} and {@code b} such that&#10;     * {@code Arrays.deepEquals(a, b)}, it is also the case that&#10;     * {@code Arrays.deepHashCode(a) == Arrays.deepHashCode(b)}.&#10;     *&#10;     * <p>The computation of the value returned by this method is similar to&#10;     * that of the value returned by {@link List#hashCode()} on a list&#10;     * containing the same elements as {@code a} in the same order, with one&#10;     * difference: If an element {@code e} of {@code a} is itself an array,&#10;     * its hash code is computed not by calling {@code e.hashCode()}, but as&#10;     * by calling the appropriate overloading of {@code Arrays.hashCode(e)}&#10;     * if {@code e} is an array of a primitive type, or as by calling&#10;     * {@code Arrays.deepHashCode(e)} recursively if {@code e} is an array&#10;     * of a reference type.  If {@code a} is {@code null}, this method&#10;     * returns 0.&#10;     *&#10;     * @param a the array whose deep-content-based hash code to compute&#10;     * @return a deep-content-based hash code for {@code a}&#10;     * @see #hashCode(Object[])&#10;     * @since 1.5&#10;     "
  ]
  node [
    id 476
    label "public static boolean deepEquals(Object[] a1, Object[] a2)"
    type "method"
    comment "&#10;     * Returns {@code true} if the two specified arrays are <i>deeply&#10;     * equal</i> to one another.  Unlike the {@link #equals(Object[],Object[])}&#10;     * method, this method is appropriate for use with nested arrays of&#10;     * arbitrary depth.&#10;     *&#10;     * <p>Two array references are considered deeply equal if both&#10;     * are {@code null}, or if they refer to arrays that contain the same&#10;     * number of elements and all corresponding pairs of elements in the two&#10;     * arrays are deeply equal.&#10;     *&#10;     * <p>Two possibly {@code null} elements {@code e1} and {@code e2} are&#10;     * deeply equal if any of the following conditions hold:&#10;     * <ul>&#10;     *    <li> {@code e1} and {@code e2} are both arrays of object reference&#10;     *         types, and {@code Arrays.deepEquals(e1, e2) would return true}&#10;     *    <li> {@code e1} and {@code e2} are arrays of the same primitive&#10;     *         type, and the appropriate overloading of&#10;     *         {@code Arrays.equals(e1, e2)} would return true.&#10;     *    <li> {@code e1 == e2}&#10;     *    <li> {@code e1.equals(e2)} would return true.&#10;     * </ul>&#10;     * Note that this definition permits {@code null} elements at any depth.&#10;     *&#10;     * <p>If either of the specified arrays contain themselves as elements&#10;     * either directly or indirectly through one or more levels of arrays,&#10;     * the behavior of this method is undefined.&#10;     *&#10;     * @param a1 one array to be tested for equality&#10;     * @param a2 the other array to be tested for equality&#10;     * @return {@code true} if the two arrays are equal&#10;     * @see #equals(Object[],Object[])&#10;     * @see Objects#deepEquals(Object, Object)&#10;     * @since 1.5&#10;     "
  ]
  node [
    id 477
    label "equals(Object"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 478
    label "public static String toString(long[] a)"
    type "method"
    comment "&#10;     * Returns a string representation of the contents of the specified array.&#10;     * The string representation consists of a list of the array's elements,&#10;     * enclosed in square brackets ({@code &#34;[]&#34;}).  Adjacent elements are&#10;     * separated by the characters {@code &#34;, &#34;} (a comma followed by a&#10;     * space).  Elements are converted to strings as by&#10;     * {@code String.valueOf(long)}.  Returns {@code &#34;null&#34;} if {@code a}&#10;     * is {@code null}.&#10;     *&#10;     * @param a the array whose string representation to return&#10;     * @return a string representation of {@code a}&#10;     * @since 1.5&#10;     "
  ]
  node [
    id 479
    label "public static String toString(int[] a)"
    type "method"
    comment "&#10;     * Returns a string representation of the contents of the specified array.&#10;     * The string representation consists of a list of the array's elements,&#10;     * enclosed in square brackets ({@code &#34;[]&#34;}).  Adjacent elements are&#10;     * separated by the characters {@code &#34;, &#34;} (a comma followed by a&#10;     * space).  Elements are converted to strings as by&#10;     * {@code String.valueOf(int)}.  Returns {@code &#34;null&#34;} if {@code a} is&#10;     * {@code null}.&#10;     *&#10;     * @param a the array whose string representation to return&#10;     * @return a string representation of {@code a}&#10;     * @since 1.5&#10;     "
  ]
  node [
    id 480
    label "public static String toString(short[] a)"
    type "method"
    comment "&#10;     * Returns a string representation of the contents of the specified array.&#10;     * The string representation consists of a list of the array's elements,&#10;     * enclosed in square brackets ({@code &#34;[]&#34;}).  Adjacent elements are&#10;     * separated by the characters {@code &#34;, &#34;} (a comma followed by a&#10;     * space).  Elements are converted to strings as by&#10;     * {@code String.valueOf(short)}.  Returns {@code &#34;null&#34;} if {@code a}&#10;     * is {@code null}.&#10;     *&#10;     * @param a the array whose string representation to return&#10;     * @return a string representation of {@code a}&#10;     * @since 1.5&#10;     "
  ]
  node [
    id 481
    label "public static String toString(char[] a)"
    type "method"
    comment "&#10;     * Returns a string representation of the contents of the specified array.&#10;     * The string representation consists of a list of the array's elements,&#10;     * enclosed in square brackets ({@code &#34;[]&#34;}).  Adjacent elements are&#10;     * separated by the characters {@code &#34;, &#34;} (a comma followed by a&#10;     * space).  Elements are converted to strings as by&#10;     * {@code String.valueOf(char)}.  Returns {@code &#34;null&#34;} if {@code a}&#10;     * is {@code null}.&#10;     *&#10;     * @param a the array whose string representation to return&#10;     * @return a string representation of {@code a}&#10;     * @since 1.5&#10;     "
  ]
  node [
    id 482
    label "public static String toString(byte[] a)"
    type "method"
    comment "&#10;     * Returns a string representation of the contents of the specified array.&#10;     * The string representation consists of a list of the array's elements,&#10;     * enclosed in square brackets ({@code &#34;[]&#34;}).  Adjacent elements&#10;     * are separated by the characters {@code &#34;, &#34;} (a comma followed&#10;     * by a space).  Elements are converted to strings as by&#10;     * {@code String.valueOf(byte)}.  Returns {@code &#34;null&#34;} if&#10;     * {@code a} is {@code null}.&#10;     *&#10;     * @param a the array whose string representation to return&#10;     * @return a string representation of {@code a}&#10;     * @since 1.5&#10;     "
  ]
  node [
    id 483
    label "public static String toString(boolean[] a)"
    type "method"
    comment "&#10;     * Returns a string representation of the contents of the specified array.&#10;     * The string representation consists of a list of the array's elements,&#10;     * enclosed in square brackets ({@code &#34;[]&#34;}).  Adjacent elements are&#10;     * separated by the characters {@code &#34;, &#34;} (a comma followed by a&#10;     * space).  Elements are converted to strings as by&#10;     * {@code String.valueOf(boolean)}.  Returns {@code &#34;null&#34;} if&#10;     * {@code a} is {@code null}.&#10;     *&#10;     * @param a the array whose string representation to return&#10;     * @return a string representation of {@code a}&#10;     * @since 1.5&#10;     "
  ]
  node [
    id 484
    label "public static String toString(float[] a)"
    type "method"
    comment "&#10;     * Returns a string representation of the contents of the specified array.&#10;     * The string representation consists of a list of the array's elements,&#10;     * enclosed in square brackets ({@code &#34;[]&#34;}).  Adjacent elements are&#10;     * separated by the characters {@code &#34;, &#34;} (a comma followed by a&#10;     * space).  Elements are converted to strings as by&#10;     * {@code String.valueOf(float)}.  Returns {@code &#34;null&#34;} if {@code a}&#10;     * is {@code null}.&#10;     *&#10;     * @param a the array whose string representation to return&#10;     * @return a string representation of {@code a}&#10;     * @since 1.5&#10;     "
  ]
  node [
    id 485
    label "public static String toString(double[] a)"
    type "method"
    comment "&#10;     * Returns a string representation of the contents of the specified array.&#10;     * The string representation consists of a list of the array's elements,&#10;     * enclosed in square brackets ({@code &#34;[]&#34;}).  Adjacent elements are&#10;     * separated by the characters {@code &#34;, &#34;} (a comma followed by a&#10;     * space).  Elements are converted to strings as by&#10;     * {@code String.valueOf(double)}.  Returns {@code &#34;null&#34;} if {@code a}&#10;     * is {@code null}.&#10;     *&#10;     * @param a the array whose string representation to return&#10;     * @return a string representation of {@code a}&#10;     * @since 1.5&#10;     "
  ]
  node [
    id 486
    label "public static String toString(Object[] a)"
    type "method"
    comment "&#10;     * Returns a string representation of the contents of the specified array.&#10;     * If the array contains other arrays as elements, they are converted to&#10;     * strings by the {@link Object#toString} method inherited from&#10;     * {@code Object}, which describes their <i>identities</i> rather than&#10;     * their contents.&#10;     *&#10;     * <p>The value returned by this method is equal to the value that would&#10;     * be returned by {@code Arrays.asList(a).toString()}, unless {@code a}&#10;     * is {@code null}, in which case {@code &#34;null&#34;} is returned.&#10;     *&#10;     * @param a the array whose string representation to return&#10;     * @return a string representation of {@code a}&#10;     * @see #deepToString(Object[])&#10;     * @since 1.5&#10;     "
  ]
  node [
    id 487
    label "toString"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 488
    label "public static String deepToString(Object[] a)"
    type "method"
    comment "&#10;     * Returns a string representation of the &#34;deep contents&#34; of the specified&#10;     * array.  If the array contains other arrays as elements, the string&#10;     * representation contains their contents and so on.  This method is&#10;     * designed for converting multidimensional arrays to strings.&#10;     *&#10;     * <p>The string representation consists of a list of the array's&#10;     * elements, enclosed in square brackets ({@code &#34;[]&#34;}).  Adjacent&#10;     * elements are separated by the characters {@code &#34;, &#34;} (a comma&#10;     * followed by a space).  Elements are converted to strings as by&#10;     * {@code String.valueOf(Object)}, unless they are themselves&#10;     * arrays.&#10;     *&#10;     * <p>If an element {@code e} is an array of a primitive type, it is&#10;     * converted to a string as by invoking the appropriate overloading of&#10;     * {@code Arrays.toString(e)}.  If an element {@code e} is an array of a&#10;     * reference type, it is converted to a string as by invoking&#10;     * this method recursively.&#10;     *&#10;     * <p>To avoid infinite recursion, if the specified array contains itself&#10;     * as an element, or contains an indirect reference to itself through one&#10;     * or more levels of arrays, the self-reference is converted to the string&#10;     * {@code &#34;[...]&#34;}.  For example, an array containing only a reference&#10;     * to itself would be rendered as {@code &#34;[[...]]&#34;}.&#10;     *&#10;     * <p>This method returns {@code &#34;null&#34;} if the specified array&#10;     * is {@code null}.&#10;     *&#10;     * @param a the array whose string representation to return&#10;     * @return a string representation of {@code a}&#10;     * @see #toString(Object[])&#10;     * @since 1.5&#10;     "
  ]
  node [
    id 489
    label "public static void setAll(T[] array, IntFunction<? extends T> generator)"
    type "method"
    comment "&#10;     * Set all elements of the specified array, using the provided&#10;     * generator function to compute each element.&#10;     *&#10;     * <p>If the generator function throws an exception, it is relayed to&#10;     * the caller and the array is left in an indeterminate state.&#10;     *&#10;     * @apiNote&#10;     * Setting a subrange of an array, using a generator function to compute&#10;     * each element, can be written as follows:&#10;     * <pre>{@code&#10;     * IntStream.range(startInclusive, endExclusive)&#10;     *          .forEach(i -> array[i] = generator.apply(i));&#10;     * }</pre>&#10;     *&#10;     * @param <T> type of elements of the array&#10;     * @param array array to be initialized&#10;     * @param generator a function accepting an index and producing the desired&#10;     *        value for that position&#10;     * @throws NullPointerException if the generator is null&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 490
    label "public static void parallelSetAll(T[] array, IntFunction<? extends T> generator)"
    type "method"
    comment "&#10;     * Set all elements of the specified array, in parallel, using the&#10;     * provided generator function to compute each element.&#10;     *&#10;     * <p>If the generator function throws an exception, an unchecked exception&#10;     * is thrown from {@code parallelSetAll} and the array is left in an&#10;     * indeterminate state.&#10;     *&#10;     * @apiNote&#10;     * Setting a subrange of an array, in parallel, using a generator function&#10;     * to compute each element, can be written as follows:&#10;     * <pre>{@code&#10;     * IntStream.range(startInclusive, endExclusive)&#10;     *          .parallel()&#10;     *          .forEach(i -> array[i] = generator.apply(i));&#10;     * }</pre>&#10;     *&#10;     * @param <T> type of elements of the array&#10;     * @param array array to be initialized&#10;     * @param generator a function accepting an index and producing the desired&#10;     *        value for that position&#10;     * @throws NullPointerException if the generator is null&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 491
    label "public static void setAll(int[] array, IntUnaryOperator generator)"
    type "method"
    comment "&#10;     * Set all elements of the specified array, using the provided&#10;     * generator function to compute each element.&#10;     *&#10;     * <p>If the generator function throws an exception, it is relayed to&#10;     * the caller and the array is left in an indeterminate state.&#10;     *&#10;     * @apiNote&#10;     * Setting a subrange of an array, using a generator function to compute&#10;     * each element, can be written as follows:&#10;     * <pre>{@code&#10;     * IntStream.range(startInclusive, endExclusive)&#10;     *          .forEach(i -> array[i] = generator.applyAsInt(i));&#10;     * }</pre>&#10;     *&#10;     * @param array array to be initialized&#10;     * @param generator a function accepting an index and producing the desired&#10;     *        value for that position&#10;     * @throws NullPointerException if the generator is null&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 492
    label "public static void parallelSetAll(int[] array, IntUnaryOperator generator)"
    type "method"
    comment "&#10;     * Set all elements of the specified array, in parallel, using the&#10;     * provided generator function to compute each element.&#10;     *&#10;     * <p>If the generator function throws an exception, an unchecked exception&#10;     * is thrown from {@code parallelSetAll} and the array is left in an&#10;     * indeterminate state.&#10;     *&#10;     * @apiNote&#10;     * Setting a subrange of an array, in parallel, using a generator function&#10;     * to compute each element, can be written as follows:&#10;     * <pre>{@code&#10;     * IntStream.range(startInclusive, endExclusive)&#10;     *          .parallel()&#10;     *          .forEach(i -> array[i] = generator.applyAsInt(i));&#10;     * }</pre>&#10;     *&#10;     * @param array array to be initialized&#10;     * @param generator a function accepting an index and producing the desired&#10;     * value for that position&#10;     * @throws NullPointerException if the generator is null&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 493
    label "public static void setAll(long[] array, IntToLongFunction generator)"
    type "method"
    comment "&#10;     * Set all elements of the specified array, using the provided&#10;     * generator function to compute each element.&#10;     *&#10;     * <p>If the generator function throws an exception, it is relayed to&#10;     * the caller and the array is left in an indeterminate state.&#10;     *&#10;     * @apiNote&#10;     * Setting a subrange of an array, using a generator function to compute&#10;     * each element, can be written as follows:&#10;     * <pre>{@code&#10;     * IntStream.range(startInclusive, endExclusive)&#10;     *          .forEach(i -> array[i] = generator.applyAsLong(i));&#10;     * }</pre>&#10;     *&#10;     * @param array array to be initialized&#10;     * @param generator a function accepting an index and producing the desired&#10;     *        value for that position&#10;     * @throws NullPointerException if the generator is null&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 494
    label "public static void parallelSetAll(long[] array, IntToLongFunction generator)"
    type "method"
    comment "&#10;     * Set all elements of the specified array, in parallel, using the&#10;     * provided generator function to compute each element.&#10;     *&#10;     * <p>If the generator function throws an exception, an unchecked exception&#10;     * is thrown from {@code parallelSetAll} and the array is left in an&#10;     * indeterminate state.&#10;     *&#10;     * @apiNote&#10;     * Setting a subrange of an array, in parallel, using a generator function&#10;     * to compute each element, can be written as follows:&#10;     * <pre>{@code&#10;     * IntStream.range(startInclusive, endExclusive)&#10;     *          .parallel()&#10;     *          .forEach(i -> array[i] = generator.applyAsLong(i));&#10;     * }</pre>&#10;     *&#10;     * @param array array to be initialized&#10;     * @param generator a function accepting an index and producing the desired&#10;     *        value for that position&#10;     * @throws NullPointerException if the generator is null&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 495
    label "public static void setAll(double[] array, IntToDoubleFunction generator)"
    type "method"
    comment "&#10;     * Set all elements of the specified array, using the provided&#10;     * generator function to compute each element.&#10;     *&#10;     * <p>If the generator function throws an exception, it is relayed to&#10;     * the caller and the array is left in an indeterminate state.&#10;     *&#10;     * @apiNote&#10;     * Setting a subrange of an array, using a generator function to compute&#10;     * each element, can be written as follows:&#10;     * <pre>{@code&#10;     * IntStream.range(startInclusive, endExclusive)&#10;     *          .forEach(i -> array[i] = generator.applyAsDouble(i));&#10;     * }</pre>&#10;     *&#10;     * @param array array to be initialized&#10;     * @param generator a function accepting an index and producing the desired&#10;     *        value for that position&#10;     * @throws NullPointerException if the generator is null&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 496
    label "public static void parallelSetAll(double[] array, IntToDoubleFunction generator)"
    type "method"
    comment "&#10;     * Set all elements of the specified array, in parallel, using the&#10;     * provided generator function to compute each element.&#10;     *&#10;     * <p>If the generator function throws an exception, an unchecked exception&#10;     * is thrown from {@code parallelSetAll} and the array is left in an&#10;     * indeterminate state.&#10;     *&#10;     * @apiNote&#10;     * Setting a subrange of an array, in parallel, using a generator function&#10;     * to compute each element, can be written as follows:&#10;     * <pre>{@code&#10;     * IntStream.range(startInclusive, endExclusive)&#10;     *          .parallel()&#10;     *          .forEach(i -> array[i] = generator.applyAsDouble(i));&#10;     * }</pre>&#10;     *&#10;     * @param array array to be initialized&#10;     * @param generator a function accepting an index and producing the desired&#10;     *        value for that position&#10;     * @throws NullPointerException if the generator is null&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 497
    label "public static Spliterator<T> spliterator(T[] array)"
    type "method"
    comment "&#10;     * Returns a {@link Spliterator} covering all of the specified array.&#10;     *&#10;     * <p>The spliterator reports {@link Spliterator#SIZED},&#10;     * {@link Spliterator#SUBSIZED}, {@link Spliterator#ORDERED}, and&#10;     * {@link Spliterator#IMMUTABLE}.&#10;     *&#10;     * @param <T> type of elements&#10;     * @param array the array, assumed to be unmodified during use&#10;     * @return a spliterator for the array elements&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 498
    label "public static Spliterator<T> spliterator(T[] array, int startInclusive, int endExclusive)"
    type "method"
    comment "&#10;     * Returns a {@link Spliterator} covering the specified range of the&#10;     * specified array.&#10;     *&#10;     * <p>The spliterator reports {@link Spliterator#SIZED},&#10;     * {@link Spliterator#SUBSIZED}, {@link Spliterator#ORDERED}, and&#10;     * {@link Spliterator#IMMUTABLE}.&#10;     *&#10;     * @param <T> type of elements&#10;     * @param array the array, assumed to be unmodified during use&#10;     * @param startInclusive the first index to cover, inclusive&#10;     * @param endExclusive index immediately past the last index to cover&#10;     * @return a spliterator for the array elements&#10;     * @throws ArrayIndexOutOfBoundsException if {@code startInclusive} is&#10;     *         negative, {@code endExclusive} is less than&#10;     *         {@code startInclusive}, or {@code endExclusive} is greater than&#10;     *         the array size&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 499
    label "public static Spliterator.OfInt spliterator(int[] array)"
    type "method"
    comment "&#10;     * Returns a {@link Spliterator.OfInt} covering all of the specified array.&#10;     *&#10;     * <p>The spliterator reports {@link Spliterator#SIZED},&#10;     * {@link Spliterator#SUBSIZED}, {@link Spliterator#ORDERED}, and&#10;     * {@link Spliterator#IMMUTABLE}.&#10;     *&#10;     * @param array the array, assumed to be unmodified during use&#10;     * @return a spliterator for the array elements&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 500
    label "Spliterator.OfInt"
  ]
  node [
    id 501
    label "public static Spliterator.OfInt spliterator(int[] array, int startInclusive, int endExclusive)"
    type "method"
    comment "&#10;     * Returns a {@link Spliterator.OfInt} covering the specified range of the&#10;     * specified array.&#10;     *&#10;     * <p>The spliterator reports {@link Spliterator#SIZED},&#10;     * {@link Spliterator#SUBSIZED}, {@link Spliterator#ORDERED}, and&#10;     * {@link Spliterator#IMMUTABLE}.&#10;     *&#10;     * @param array the array, assumed to be unmodified during use&#10;     * @param startInclusive the first index to cover, inclusive&#10;     * @param endExclusive index immediately past the last index to cover&#10;     * @return a spliterator for the array elements&#10;     * @throws ArrayIndexOutOfBoundsException if {@code startInclusive} is&#10;     *         negative, {@code endExclusive} is less than&#10;     *         {@code startInclusive}, or {@code endExclusive} is greater than&#10;     *         the array size&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 502
    label "public static Spliterator.OfLong spliterator(long[] array)"
    type "method"
    comment "&#10;     * Returns a {@link Spliterator.OfLong} covering all of the specified array.&#10;     *&#10;     * <p>The spliterator reports {@link Spliterator#SIZED},&#10;     * {@link Spliterator#SUBSIZED}, {@link Spliterator#ORDERED}, and&#10;     * {@link Spliterator#IMMUTABLE}.&#10;     *&#10;     * @param array the array, assumed to be unmodified during use&#10;     * @return the spliterator for the array elements&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 503
    label "Spliterator.OfLong"
  ]
  node [
    id 504
    label "public static Spliterator.OfLong spliterator(long[] array, int startInclusive, int endExclusive)"
    type "method"
    comment "&#10;     * Returns a {@link Spliterator.OfLong} covering the specified range of the&#10;     * specified array.&#10;     *&#10;     * <p>The spliterator reports {@link Spliterator#SIZED},&#10;     * {@link Spliterator#SUBSIZED}, {@link Spliterator#ORDERED}, and&#10;     * {@link Spliterator#IMMUTABLE}.&#10;     *&#10;     * @param array the array, assumed to be unmodified during use&#10;     * @param startInclusive the first index to cover, inclusive&#10;     * @param endExclusive index immediately past the last index to cover&#10;     * @return a spliterator for the array elements&#10;     * @throws ArrayIndexOutOfBoundsException if {@code startInclusive} is&#10;     *         negative, {@code endExclusive} is less than&#10;     *         {@code startInclusive}, or {@code endExclusive} is greater than&#10;     *         the array size&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 505
    label "public static Spliterator.OfDouble spliterator(double[] array)"
    type "method"
    comment "&#10;     * Returns a {@link Spliterator.OfDouble} covering all of the specified&#10;     * array.&#10;     *&#10;     * <p>The spliterator reports {@link Spliterator#SIZED},&#10;     * {@link Spliterator#SUBSIZED}, {@link Spliterator#ORDERED}, and&#10;     * {@link Spliterator#IMMUTABLE}.&#10;     *&#10;     * @param array the array, assumed to be unmodified during use&#10;     * @return a spliterator for the array elements&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 506
    label "Spliterator.OfDouble"
  ]
  node [
    id 507
    label "public static Spliterator.OfDouble spliterator(double[] array, int startInclusive, int endExclusive)"
    type "method"
    comment "&#10;     * Returns a {@link Spliterator.OfDouble} covering the specified range of&#10;     * the specified array.&#10;     *&#10;     * <p>The spliterator reports {@link Spliterator#SIZED},&#10;     * {@link Spliterator#SUBSIZED}, {@link Spliterator#ORDERED}, and&#10;     * {@link Spliterator#IMMUTABLE}.&#10;     *&#10;     * @param array the array, assumed to be unmodified during use&#10;     * @param startInclusive the first index to cover, inclusive&#10;     * @param endExclusive index immediately past the last index to cover&#10;     * @return a spliterator for the array elements&#10;     * @throws ArrayIndexOutOfBoundsException if {@code startInclusive} is&#10;     *         negative, {@code endExclusive} is less than&#10;     *         {@code startInclusive}, or {@code endExclusive} is greater than&#10;     *         the array size&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 508
    label "public static Stream<T> stream(T[] array)"
    type "method"
    comment "&#10;     * Returns a sequential {@link Stream} with the specified array as its&#10;     * source.&#10;     *&#10;     * @param <T> The type of the array elements&#10;     * @param array The array, assumed to be unmodified during use&#10;     * @return a {@code Stream} for the array&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 509
    label "java.util.stream.DoubleStream"
    type "class"
    comment "&#10; * A sequence of primitive double-valued elements supporting sequential and parallel&#10; * aggregate operations.  This is the {@code double} primitive specialization of&#10; * {@link Stream}.&#10; *&#10; * <p>The following example illustrates an aggregate operation using&#10; * {@link Stream} and {@link DoubleStream}, computing the sum of the weights of the&#10; * red widgets:&#10; *&#10; * <pre>{@code&#10; *     double sum = widgets.stream()&#10; *                         .filter(w -> w.getColor() == RED)&#10; *                         .mapToDouble(w -> w.getWeight())&#10; *                         .sum();&#10; * }</pre>&#10; *&#10; * See the class documentation for {@link Stream} and the package documentation&#10; * for <a href=&#34;package-summary.html&#34;>java.util.stream</a> for additional&#10; * specification of streams, stream operations, stream pipelines, and&#10; * parallelism.&#10; *&#10; * @since 1.8&#10; * @see Stream&#10; * @see <a href=&#34;package-summary.html&#34;>java.util.stream</a>&#10; "
  ]
  node [
    id 510
    label " DoubleStream filter(DoublePredicate predicate)"
    type "method"
    comment "&#10;     * Returns a stream consisting of the elements of this stream that match&#10;     * the given predicate.&#10;     *&#10;     * <p>This is an <a href=&#34;package-summary.html#StreamOps&#34;>intermediate&#10;     * operation</a>.&#10;     *&#10;     * @param predicate a <a href=&#34;package-summary.html#NonInterference&#34;>non-interfering</a>,&#10;     *                  <a href=&#34;package-summary.html#Statelessness&#34;>stateless</a>&#10;     *                  predicate to apply to each element to determine if it&#10;     *                  should be included&#10;     * @return the new stream&#10;     "
  ]
  node [
    id 511
    label " DoubleStream map(DoubleUnaryOperator mapper)"
    type "method"
    comment "&#10;     * Returns a stream consisting of the results of applying the given&#10;     * function to the elements of this stream.&#10;     *&#10;     * <p>This is an <a href=&#34;package-summary.html#StreamOps&#34;>intermediate&#10;     * operation</a>.&#10;     *&#10;     * @param mapper a <a href=&#34;package-summary.html#NonInterference&#34;>non-interfering</a>,&#10;     *               <a href=&#34;package-summary.html#Statelessness&#34;>stateless</a>&#10;     *               function to apply to each element&#10;     * @return the new stream&#10;     "
  ]
  node [
    id 512
    label " Stream<U> mapToObj(DoubleFunction<? extends U> mapper)"
    type "method"
    comment "&#10;     * Returns an object-valued {@code Stream} consisting of the results of&#10;     * applying the given function to the elements of this stream.&#10;     *&#10;     * <p>This is an <a href=&#34;package-summary.html#StreamOps&#34;>&#10;     *     intermediate operation</a>.&#10;     *&#10;     * @param <U> the element type of the new stream&#10;     * @param mapper a <a href=&#34;package-summary.html#NonInterference&#34;>non-interfering</a>,&#10;     *               <a href=&#34;package-summary.html#Statelessness&#34;>stateless</a>&#10;     *               function to apply to each element&#10;     * @return the new stream&#10;     "
  ]
  node [
    id 513
    label " IntStream mapToInt(DoubleToIntFunction mapper)"
    type "method"
    comment "&#10;     * Returns an {@code IntStream} consisting of the results of applying the&#10;     * given function to the elements of this stream.&#10;     *&#10;     * <p>This is an <a href=&#34;package-summary.html#StreamOps&#34;>intermediate&#10;     * operation</a>.&#10;     *&#10;     * @param mapper a <a href=&#34;package-summary.html#NonInterference&#34;>non-interfering</a>,&#10;     *               <a href=&#34;package-summary.html#Statelessness&#34;>stateless</a>&#10;     *               function to apply to each element&#10;     * @return the new stream&#10;     "
  ]
  node [
    id 514
    label " LongStream mapToLong(DoubleToLongFunction mapper)"
    type "method"
    comment "&#10;     * Returns a {@code LongStream} consisting of the results of applying the&#10;     * given function to the elements of this stream.&#10;     *&#10;     * <p>This is an <a href=&#34;package-summary.html#StreamOps&#34;>intermediate&#10;     * operation</a>.&#10;     *&#10;     * @param mapper a <a href=&#34;package-summary.html#NonInterference&#34;>non-interfering</a>,&#10;     *               <a href=&#34;package-summary.html#Statelessness&#34;>stateless</a>&#10;     *               function to apply to each element&#10;     * @return the new stream&#10;     "
  ]
  node [
    id 515
    label " DoubleStream flatMap(DoubleFunction<? extends DoubleStream> mapper)"
    type "method"
    comment "&#10;     * Returns a stream consisting of the results of replacing each element of&#10;     * this stream with the contents of a mapped stream produced by applying&#10;     * the provided mapping function to each element.  Each mapped stream is&#10;     * {@link java.util.stream.BaseStream#close() closed} after its contents&#10;     * have been placed into this stream.  (If a mapped stream is {@code null}&#10;     * an empty stream is used, instead.)&#10;     *&#10;     * <p>This is an <a href=&#34;package-summary.html#StreamOps&#34;>intermediate&#10;     * operation</a>.&#10;     *&#10;     * @param mapper a <a href=&#34;package-summary.html#NonInterference&#34;>non-interfering</a>,&#10;     *               <a href=&#34;package-summary.html#Statelessness&#34;>stateless</a>&#10;     *               function to apply to each element which produces a&#10;     *               {@code DoubleStream} of new values&#10;     * @return the new stream&#10;     * @see Stream#flatMap(Function)&#10;     "
  ]
  node [
    id 516
    label "close()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 517
    label "java.util.stream.BaseStream"
    type "class"
    comment "&#10; * Base interface for streams, which are sequences of elements supporting&#10; * sequential and parallel aggregate operations.  The following example&#10; * illustrates an aggregate operation using the stream types {@link Stream}&#10; * and {@link IntStream}, computing the sum of the weights of the red widgets:&#10; *&#10; * <pre>{@code&#10; *     int sum = widgets.stream()&#10; *                      .filter(w -> w.getColor() == RED)&#10; *                      .mapToInt(w -> w.getWeight())&#10; *                      .sum();&#10; * }</pre>&#10; *&#10; * See the class documentation for {@link Stream} and the package documentation&#10; * for <a href=&#34;package-summary.html&#34;>java.util.stream</a> for additional&#10; * specification of streams, stream operations, stream pipelines, and&#10; * parallelism, which governs the behavior of all stream types.&#10; *&#10; * @param <T> the type of the stream elements&#10; * @param <S> the type of the stream implementing {@code BaseStream}&#10; * @since 1.8&#10; * @see Stream&#10; * @see IntStream&#10; * @see LongStream&#10; * @see DoubleStream&#10; * @see <a href=&#34;package-summary.html&#34;>java.util.stream</a>&#10; "
  ]
  node [
    id 518
    label " Iterator<T> iterator()"
    type "method"
    comment "&#10;     * Returns the iterator associated with this {@code DirectoryStream}.&#10;     *&#10;     * @return  the iterator associated with this {@code DirectoryStream}&#10;     *&#10;     * @throws  IllegalStateException&#10;     *          if this directory stream is closed or the iterator has already&#10;     *          been returned&#10;     "
  ]
  node [
    id 519
    label " Spliterator<T> spliterator()"
    type "method"
    comment "&#10;     * Returns a spliterator for the elements of this stream.&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>terminal&#10;     * operation</a>.&#10;     *&#10;     * <p>&#10;     * The returned spliterator should report the set of characteristics derived&#10;     * from the stream pipeline (namely the characteristics derived from the&#10;     * stream source spliterator and the intermediate operations).&#10;     * Implementations may report a sub-set of those characteristics.  For&#10;     * example, it may be too expensive to compute the entire set for some or&#10;     * all possible stream pipelines.&#10;     *&#10;     * @return the element spliterator for this stream&#10;     "
  ]
  node [
    id 520
    label " boolean isParallel()"
    type "method"
    comment "&#10;     * Returns whether this stream, if a terminal operation were to be executed,&#10;     * would execute in parallel.  Calling this method after invoking an&#10;     * terminal stream operation method may yield unpredictable results.&#10;     *&#10;     * @return {@code true} if this stream would execute in parallel if executed&#10;     "
  ]
  node [
    id 521
    label " S sequential()"
    type "method"
    comment "&#10;     * Returns an equivalent stream that is sequential.  May return&#10;     * itself, either because the stream was already sequential, or because&#10;     * the underlying stream state was modified to be sequential.&#10;     *&#10;     * <p>This is an <a href=&#34;package-summary.html#StreamOps&#34;>intermediate&#10;     * operation</a>.&#10;     *&#10;     * @return a sequential stream&#10;     "
  ]
  node [
    id 522
    label " S parallel()"
    type "method"
    comment "&#10;     * Returns an equivalent stream that is parallel.  May return&#10;     * itself, either because the stream was already parallel, or because&#10;     * the underlying stream state was modified to be parallel.&#10;     *&#10;     * <p>This is an <a href=&#34;package-summary.html#StreamOps&#34;>intermediate&#10;     * operation</a>.&#10;     *&#10;     * @return a parallel stream&#10;     "
  ]
  node [
    id 523
    label " S unordered()"
    type "method"
    comment "&#10;     * Returns an equivalent stream that is&#10;     * <a href=&#34;package-summary.html#Ordering&#34;>unordered</a>.  May return&#10;     * itself, either because the stream was already unordered, or because&#10;     * the underlying stream state was modified to be unordered.&#10;     *&#10;     * <p>This is an <a href=&#34;package-summary.html#StreamOps&#34;>intermediate&#10;     * operation</a>.&#10;     *&#10;     * @return an unordered stream&#10;     "
  ]
  node [
    id 524
    label " S onClose(Runnable closeHandler)"
    type "method"
    comment "&#10;     * Returns an equivalent stream with an additional close handler.  Close&#10;     * handlers are run when the {@link #close()} method&#10;     * is called on the stream, and are executed in the order they were&#10;     * added.  All close handlers are run, even if earlier close handlers throw&#10;     * exceptions.  If any close handler throws an exception, the first&#10;     * exception thrown will be relayed to the caller of {@code close()}, with&#10;     * any remaining exceptions added to that exception as suppressed exceptions&#10;     * (unless one of the remaining exceptions is the same exception as the&#10;     * first exception, since an exception cannot suppress itself.)  May&#10;     * return itself.&#10;     *&#10;     * <p>This is an <a href=&#34;package-summary.html#StreamOps&#34;>intermediate&#10;     * operation</a>.&#10;     *&#10;     * @param closeHandler A task to execute when the stream is closed&#10;     * @return a stream with a handler that is run if the stream is closed&#10;     "
  ]
  node [
    id 525
    label " void close()"
    type "method"
    comment "&#10;     * Closes this stream, causing all close handlers for this stream pipeline&#10;     * to be called.&#10;     *&#10;     * @see AutoCloseable#close()&#10;     "
  ]
  node [
    id 526
    label " DoubleStream mapMulti(DoubleMapMultiConsumer mapper)"
    type "method"
    comment "&#10;     * Returns a stream consisting of the results of replacing each element of&#10;     * this stream with multiple elements, specifically zero or more elements.&#10;     * Replacement is performed by applying the provided mapping function to each&#10;     * element in conjunction with a {@linkplain DoubleConsumer consumer} argument&#10;     * that accepts replacement elements. The mapping function calls the consumer&#10;     * zero or more times to provide the replacement elements.&#10;     *&#10;     * <p>This is an <a href=&#34;package-summary.html#StreamOps&#34;>intermediate&#10;     * operation</a>.&#10;     *&#10;     * <p>If the {@linkplain DoubleConsumer consumer} argument is used outside the scope of&#10;     * its application to the mapping function, the results are undefined.&#10;     *&#10;     * @implSpec&#10;     * The default implementation invokes {@link #flatMap flatMap} on this stream,&#10;     * passing a function that behaves as follows. First, it calls the mapper function&#10;     * with a {@code DoubleConsumer} that accumulates replacement elements into a newly created&#10;     * internal buffer. When the mapper function returns, it creates a {@code DoubleStream} from the&#10;     * internal buffer. Finally, it returns this stream to {@code flatMap}.&#10;     *&#10;     * @param mapper a <a href=&#34;package-summary.html#NonInterference&#34;>non-interfering</a>,&#10;     *               <a href=&#34;package-summary.html#Statelessness&#34;>stateless</a>&#10;     *               function that generates replacement elements&#10;     * @return the new stream&#10;     * @see Stream#mapMulti Stream.mapMulti&#10;     * @since 16&#10;     "
  ]
  node [
    id 527
    label "flatMap"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 528
    label " DoubleStream distinct()"
    type "method"
    comment "&#10;     * Returns a stream consisting of the distinct elements of this stream. The&#10;     * elements are compared for equality according to&#10;     * {@link java.lang.Double#compare(double, double)}.&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>stateful&#10;     * intermediate operation</a>.&#10;     *&#10;     * @return the result stream&#10;     "
  ]
  node [
    id 529
    label "compare(double"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 530
    label "java.lang.Double"
    type "class"
    comment "&#10; * The {@code Double} class wraps a value of the primitive type&#10; * {@code double} in an object. An object of type&#10; * {@code Double} contains a single field whose type is&#10; * {@code double}.&#10; *&#10; * <p>In addition, this class provides several methods for converting a&#10; * {@code double} to a {@code String} and a&#10; * {@code String} to a {@code double}, as well as other&#10; * constants and methods useful when dealing with a&#10; * {@code double}.&#10; *&#10; * <!-- Android-removed: paragraph on ValueBased&#10; * <p>This is a <a href=&#34;{@docRoot}/java.base/java/lang/doc-files/ValueBased.html&#34;>value-based</a>&#10; * class; programmers should treat instances that are&#10; * {@linkplain #equals(Object) equal} as interchangeable and should not&#10; * use instances for synchronization, or unpredictable behavior may&#10; * occur. For example, in a future release, synchronization may fail.&#10; * -->&#10; *&#10; * <h2><a id=equivalenceRelation>Floating-point Equality, Equivalence,&#10; * and Comparison</a></h2>&#10; *&#10; * IEEE 754 floating-point values include finite nonzero values,&#10; * signed zeros ({@code +0.0} and {@code -0.0}), signed infinities&#10; * {@linkplain Double#POSITIVE_INFINITY positive infinity} and&#10; * {@linkplain Double#NEGATIVE_INFINITY negative infinity}), and&#10; * {@linkplain Double#NaN NaN} (not-a-number).&#10; *&#10; * <p>An <em>equivalence relation</em> on a set of values is a boolean&#10; * relation on pairs of values that is reflexive, symmetric, and&#10; * transitive. For more discussion of equivalence relations and object&#10; * equality, see the {@link Object#equals Object.equals}&#10; * specification. An equivalence relation partitions the values it&#10; * operates over into sets called <i>equivalence classes</i>.  All the&#10; * members of the equivalence class are equal to each other under the&#10; * relation. An equivalence class may contain only a single member. At&#10; * least for some purposes, all the members of an equivalence class&#10; * are substitutable for each other.  In particular, in a numeric&#10; * expression equivalent values can be <em>substituted</em> for one&#10; * another without changing the result of the expression, meaning&#10; * changing the equivalence class of the result of the expression.&#10; *&#10; * <p>Notably, the built-in {@code ==} operation on floating-point&#10; * values is <em>not</em> an equivalence relation. Despite not&#10; * defining an equivalence relation, the semantics of the IEEE 754&#10; * {@code ==} operator were deliberately designed to meet other needs&#10; * of numerical computation. There are two exceptions where the&#10; * properties of an equivalence relation are not satisfied by {@code&#10; * ==} on floating-point values:&#10; *&#10; * <ul>&#10; *&#10; * <li>If {@code v1} and {@code v2} are both NaN, then {@code v1&#10; * == v2} has the value {@code false}. Therefore, for two NaN&#10; * arguments the <em>reflexive</em> property of an equivalence&#10; * relation is <em>not</em> satisfied by the {@code ==} operator.&#10; *&#10; * <li>If {@code v1} represents {@code +0.0} while {@code v2}&#10; * represents {@code -0.0}, or vice versa, then {@code v1 == v2} has&#10; * the value {@code true} even though {@code +0.0} and {@code -0.0}&#10; * are distinguishable under various floating-point operations. For&#10; * example, {@code 1.0/+0.0} evaluates to positive infinity while&#10; * {@code 1.0/-0.0} evaluates to <em>negative</em> infinity and&#10; * positive infinity and negative infinity are neither equal to each&#10; * other nor equivalent to each other. Thus, while a signed zero input&#10; * most commonly determines the sign of a zero result, because of&#10; * dividing by zero, {@code +0.0} and {@code -0.0} may not be&#10; * substituted for each other in general. The sign of a zero input&#10; * also has a non-substitutable effect on the result of some math&#10; * library methods.&#10; *&#10; * </ul>&#10; *&#10; * <p>For ordered comparisons using the built-in comparison operators&#10; * ({@code <}, {@code <=}, etc.), NaN values have another anomalous&#10; * situation: a NaN is neither less than, nor greater than, nor equal&#10; * to any value, including itself. This means the <i>trichotomy of&#10; * comparison</i> does <em>not</em> hold.&#10; *&#10; * <p>To provide the appropriate semantics for {@code equals} and&#10; * {@code compareTo} methods, those methods cannot simply be wrappers&#10; * around {@code ==} or ordered comparison operations. Instead, {@link&#10; * Double#equals equals} defines NaN arguments to be equal to each&#10; * other and defines {@code +0.0} to <em>not</em> be equal to {@code&#10; * -0.0}, restoring reflexivity. For comparisons, {@link&#10; * Double#compareTo compareTo} defines a total order where {@code&#10; * -0.0} is less than {@code +0.0} and where a NaN is equal to itself&#10; * and considered greater than positive infinity.&#10; *&#10; * <p>The operational semantics of {@code equals} and {@code&#10; * compareTo} are expressed in terms of {@linkplain #doubleToLongBits&#10; * bit-wise converting} the floating-point values to integral values.&#10; *&#10; * <p>The <em>natural ordering</em> implemented by {@link #compareTo&#10; * compareTo} is {@linkplain Comparable consistent with equals}. That&#10; * is, two objects are reported as equal by {@code equals} if and only&#10; * if {@code compareTo} on those objects returns zero.&#10; *&#10; * <p>The adjusted behaviors defined for {@code equals} and {@code&#10; * compareTo} allow instances of wrapper classes to work properly with&#10; * conventional data structures. For example, defining NaN&#10; * values to be {@code equals} to one another allows NaN to be used as&#10; * an element of a {@link java.util.HashSet HashSet} or as the key of&#10; * a {@link java.util.HashMap HashMap}. Similarly, defining {@code&#10; * compareTo} as a total ordering, including {@code +0.0}, {@code&#10; * -0.0}, and NaN, allows instances of wrapper classes to be used as&#10; * elements of a {@link java.util.SortedSet SortedSet} or as keys of a&#10; * {@link java.util.SortedMap SortedMap}.&#10; *&#10; * @jls 4.2.3 Floating-Point Types, Formats, and Values&#10; * @jls 4.2.4. Floating-Point Operations&#10; * @jls 15.21.1 Numerical Equality Operators == and !=&#10; * @jls 15.20.1 Numerical Comparison Operators {@code <}, {@code <=}, {@code >}, and {@code >=}&#10; *&#10; * @author  Lee Boynton&#10; * @author  Arthur van Hoff&#10; * @author  Joseph D. Darcy&#10; * @since 1.0&#10; "
  ]
  node [
    id 531
    label "public static String toString(double d)"
    type "method"
    comment "&#10;     * Returns a string representation of the {@code double}&#10;     * argument. All characters mentioned below are ASCII characters.&#10;     * <ul>&#10;     * <li>If the argument is NaN, the result is the string&#10;     *     &#34;{@code NaN}&#34;.&#10;     * <li>Otherwise, the result is a string that represents the sign and&#10;     * magnitude (absolute value) of the argument. If the sign is negative,&#10;     * the first character of the result is '{@code -}'&#10;     * ({@code '\u005Cu002D'}); if the sign is positive, no sign character&#10;     * appears in the result. As for the magnitude <i>m</i>:&#10;     * <ul>&#10;     * <li>If <i>m</i> is infinity, it is represented by the characters&#10;     * {@code &#34;Infinity&#34;}; thus, positive infinity produces the result&#10;     * {@code &#34;Infinity&#34;} and negative infinity produces the result&#10;     * {@code &#34;-Infinity&#34;}.&#10;     *&#10;     * <li>If <i>m</i> is zero, it is represented by the characters&#10;     * {@code &#34;0.0&#34;}; thus, negative zero produces the result&#10;     * {@code &#34;-0.0&#34;} and positive zero produces the result&#10;     * {@code &#34;0.0&#34;}.&#10;     *&#10;     * <li>If <i>m</i> is greater than or equal to 10<sup>-3</sup> but less&#10;     * than 10<sup>7</sup>, then it is represented as the integer part of&#10;     * <i>m</i>, in decimal form with no leading zeroes, followed by&#10;     * '{@code .}' ({@code '\u005Cu002E'}), followed by one or&#10;     * more decimal digits representing the fractional part of <i>m</i>.&#10;     *&#10;     * <li>If <i>m</i> is less than 10<sup>-3</sup> or greater than or&#10;     * equal to 10<sup>7</sup>, then it is represented in so-called&#10;     * &#34;computerized scientific notation.&#34; Let <i>n</i> be the unique&#10;     * integer such that 10<sup><i>n</i></sup> &#38;le; <i>m</i> {@literal <}&#10;     * 10<sup><i>n</i>+1</sup>; then let <i>a</i> be the&#10;     * mathematically exact quotient of <i>m</i> and&#10;     * 10<sup><i>n</i></sup> so that 1 &#38;le; <i>a</i> {@literal <} 10. The&#10;     * magnitude is then represented as the integer part of <i>a</i>,&#10;     * as a single decimal digit, followed by '{@code .}'&#10;     * ({@code '\u005Cu002E'}), followed by decimal digits&#10;     * representing the fractional part of <i>a</i>, followed by the&#10;     * letter '{@code E}' ({@code '\u005Cu0045'}), followed&#10;     * by a representation of <i>n</i> as a decimal integer, as&#10;     * produced by the method {@link Integer#toString(int)}.&#10;     * </ul>&#10;     * </ul>&#10;     * How many digits must be printed for the fractional part of&#10;     * <i>m</i> or <i>a</i>? There must be at least one digit to represent&#10;     * the fractional part, and beyond that as many, but only as many, more&#10;     * digits as are needed to uniquely distinguish the argument value from&#10;     * adjacent values of type {@code double}. That is, suppose that&#10;     * <i>x</i> is the exact mathematical value represented by the decimal&#10;     * representation produced by this method for a finite nonzero argument&#10;     * <i>d</i>. Then <i>d</i> must be the {@code double} value nearest&#10;     * to <i>x</i>; or if two {@code double} values are equally close&#10;     * to <i>x</i>, then <i>d</i> must be one of them and the least&#10;     * significant bit of the significand of <i>d</i> must be {@code 0}.&#10;     *&#10;     * <p>To create localized string representations of a floating-point&#10;     * value, use subclasses of {@link java.text.NumberFormat}.&#10;     *&#10;     * @param   d   the {@code double} to be converted.&#10;     * @return a string representation of the argument.&#10;     "
  ]
  node [
    id 532
    label "toString(int)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 533
    label "java.lang.Integer"
    type "class"
    comment "&#10; * The {@code Integer} class wraps a value of the primitive type&#10; * {@code int} in an object. An object of type {@code Integer}&#10; * contains a single field whose type is {@code int}.&#10; *&#10; * <p>In addition, this class provides several methods for converting&#10; * an {@code int} to a {@code String} and a {@code String} to an&#10; * {@code int}, as well as other constants and methods useful when&#10; * dealing with an {@code int}.&#10; *&#10; * <!-- Android-removed: paragraph on ValueBased&#10; * <p>This is a <a href=&#34;{@docRoot}/java.base/java/lang/doc-files/ValueBased.html&#34;>value-based</a>&#10; * class; programmers should treat instances that are&#10; * {@linkplain #equals(Object) equal} as interchangeable and should not&#10; * use instances for synchronization, or unpredictable behavior may&#10; * occur. For example, in a future release, synchronization may fail.&#10; * -->&#10; *&#10; * <p>Implementation note: The implementations of the &#34;bit twiddling&#34;&#10; * methods (such as {@link #highestOneBit(int) highestOneBit} and&#10; * {@link #numberOfTrailingZeros(int) numberOfTrailingZeros}) are&#10; * based on material from Henry S. Warren, Jr.'s <i>Hacker's&#10; * Delight</i>, (Addison Wesley, 2002).&#10; *&#10; * @author  Lee Boynton&#10; * @author  Arthur van Hoff&#10; * @author  Josh Bloch&#10; * @author  Joseph D. Darcy&#10; * @since 1.0&#10; "
  ]
  node [
    id 534
    label "public static String toString(int i, int radix)"
    type "method"
    comment "&#10;     * Returns a string representation of the first argument in the&#10;     * radix specified by the second argument.&#10;     *&#10;     * <p>If the radix is smaller than {@code Character.MIN_RADIX}&#10;     * or larger than {@code Character.MAX_RADIX}, then the radix&#10;     * {@code 10} is used instead.&#10;     *&#10;     * <p>If the first argument is negative, the first element of the&#10;     * result is the ASCII minus character {@code '-'}&#10;     * ({@code '\u005Cu002D'}). If the first argument is not&#10;     * negative, no sign character appears in the result.&#10;     *&#10;     * <p>The remaining characters of the result represent the magnitude&#10;     * of the first argument. If the magnitude is zero, it is&#10;     * represented by a single zero character {@code '0'}&#10;     * ({@code '\u005Cu0030'}); otherwise, the first character of&#10;     * the representation of the magnitude will not be the zero&#10;     * character.  The following ASCII characters are used as digits:&#10;     *&#10;     * <blockquote>&#10;     *   {@code 0123456789abcdefghijklmnopqrstuvwxyz}&#10;     * </blockquote>&#10;     *&#10;     * These are {@code '\u005Cu0030'} through&#10;     * {@code '\u005Cu0039'} and {@code '\u005Cu0061'} through&#10;     * {@code '\u005Cu007A'}. If {@code radix} is&#10;     * <var>N</var>, then the first <var>N</var> of these characters&#10;     * are used as radix-<var>N</var> digits in the order shown. Thus,&#10;     * the digits for hexadecimal (radix 16) are&#10;     * {@code 0123456789abcdef}. If uppercase letters are&#10;     * desired, the {@link java.lang.String#toUpperCase()} method may&#10;     * be called on the result:&#10;     *&#10;     * <blockquote>&#10;     *  {@code Integer.toString(n, 16).toUpperCase()}&#10;     * </blockquote>&#10;     *&#10;     * @param   i       an integer to be converted to a string.&#10;     * @param   radix   the radix to use in the string representation.&#10;     * @return  a string representation of the argument in the specified radix.&#10;     * @see     java.lang.Character#MAX_RADIX&#10;     * @see     java.lang.Character#MIN_RADIX&#10;     "
  ]
  node [
    id 535
    label "toUpperCase()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 536
    label "java.lang.String"
    type "class"
    comment ""
  ]
  node [
    id 537
    label "public int length()"
    type "method"
    comment "&#10;     * Returns the length of the erroneous input described by this&#10;     * object&#38;nbsp;&#38;nbsp;<i>(optional operation)</i>.&#10;     *&#10;     * @return  The length of the erroneous input, a positive integer&#10;     *&#10;     * @throws  UnsupportedOperationException&#10;     *          If this object does not describe an error condition, that is,&#10;     *          if the {@link #isError() isError} does not return {@code true}&#10;     "
  ]
  node [
    id 538
    label "public boolean isEmpty()"
    type "method"
    comment "&#10;     * Returns {@code true} if, and only if, {@link #length()} is {@code 0}.&#10;     *&#10;     * @return {@code true} if {@link #length()} is {@code 0}, otherwise&#10;     * {@code false}&#10;     *&#10;     * @since 1.6&#10;     "
  ]
  node [
    id 539
    label "length()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 540
    label "public native char charAt(int index)"
    type "method"
    comment "&#10;    public char charAt(int index) {&#10;        if (isLatin1()) {&#10;            return StringLatin1.charAt(value, index);&#10;        } else {&#10;            return StringUTF16.charAt(value, index);&#10;        }&#10;    }&#10;    "
  ]
  node [
    id 541
    label "public int codePointAt(int index)"
    type "method"
    comment "&#10;     * Returns the character (Unicode code point) at the specified&#10;     * index. The index refers to {@code char} values&#10;     * (Unicode code units) and ranges from {@code 0} to&#10;     * {@link #length()}{@code  - 1}.&#10;     *&#10;     * <p> If the {@code char} value specified at the given index&#10;     * is in the high-surrogate range, the following index is less&#10;     * than the length of this {@code String}, and the&#10;     * {@code char} value at the following index is in the&#10;     * low-surrogate range, then the supplementary code point&#10;     * corresponding to this surrogate pair is returned. Otherwise,&#10;     * the {@code char} value at the given index is returned.&#10;     *&#10;     * @param      index the index to the {@code char} values&#10;     * @return     the code point value of the character at the&#10;     *             {@code index}&#10;     * @exception  IndexOutOfBoundsException  if the {@code index}&#10;     *             argument is negative or not less than the length of this&#10;     *             string.&#10;     * @since      1.5&#10;     "
  ]
  node [
    id 542
    label "public int codePointBefore(int index)"
    type "method"
    comment "&#10;     * Returns the character (Unicode code point) before the specified&#10;     * index. The index refers to {@code char} values&#10;     * (Unicode code units) and ranges from {@code 1} to {@link&#10;     * CharSequence#length() length}.&#10;     *&#10;     * <p> If the {@code char} value at {@code (index - 1)}&#10;     * is in the low-surrogate range, {@code (index - 2)} is not&#10;     * negative, and the {@code char} value at {@code (index -&#10;     * 2)} is in the high-surrogate range, then the&#10;     * supplementary code point value of the surrogate pair is&#10;     * returned. If the {@code char} value at {@code index -&#10;     * 1} is an unpaired low-surrogate or a high-surrogate, the&#10;     * surrogate value is returned.&#10;     *&#10;     * @param     index the index following the code point that should be returned&#10;     * @return    the Unicode code point value before the given index.&#10;     * @exception IndexOutOfBoundsException if the {@code index}&#10;     *            argument is less than 1 or greater than the length&#10;     *            of this string.&#10;     * @since     1.5&#10;     "
  ]
  node [
    id 543
    label "java.lang.CharSequence"
    type "class"
    comment ""
  ]
  node [
    id 544
    label " int length()"
    type "method"
    comment "&#10;     * Returns the length of this character sequence.  The length is the number&#10;     * of 16-bit {@code char}s in the sequence.&#10;     *&#10;     * @return  the number of {@code char}s in this sequence&#10;     "
  ]
  node [
    id 545
    label " char charAt(int index)"
    type "method"
    comment "&#10;     * Returns the {@code char} value at the specified index.  An index ranges from zero&#10;     * to {@code length() - 1}.  The first {@code char} value of the sequence is at&#10;     * index zero, the next at index one, and so on, as for array&#10;     * indexing.&#10;     *&#10;     * <p>If the {@code char} value specified by the index is a&#10;     * <a href=&#34;{@docRoot}/java.base/java/lang/Character.html#unicode&#34;>surrogate</a>, the surrogate&#10;     * value is returned.&#10;     *&#10;     * @param   index   the index of the {@code char} value to be returned&#10;     *&#10;     * @return  the specified {@code char} value&#10;     *&#10;     * @throws  IndexOutOfBoundsException&#10;     *          if the {@code index} argument is negative or not less than&#10;     *          {@code length()}&#10;     "
  ]
  node [
    id 546
    label " CharSequence subSequence(int start, int end)"
    type "method"
    comment "&#10;     * Returns a {@code CharSequence} that is a subsequence of this sequence.&#10;     * The subsequence starts with the {@code char} value at the specified index and&#10;     * ends with the {@code char} value at index {@code end - 1}.  The length&#10;     * (in {@code char}s) of the&#10;     * returned sequence is {@code end - start}, so if {@code start == end}&#10;     * then an empty sequence is returned.&#10;     *&#10;     * @param   start   the start index, inclusive&#10;     * @param   end     the end index, exclusive&#10;     *&#10;     * @return  the specified subsequence&#10;     *&#10;     * @throws  IndexOutOfBoundsException&#10;     *          if {@code start} or {@code end} are negative,&#10;     *          if {@code end} is greater than {@code length()},&#10;     *          or if {@code start} is greater than {@code end}&#10;     "
  ]
  node [
    id 547
    label "public IntStream chars()"
    type "method"
    comment "&#10;     * Returns a stream of {@code int} zero-extending the {@code char} values&#10;     * from this sequence.  Any char which maps to a <a&#10;     * href=&#34;{@docRoot}/java.base/java/lang/Character.html#unicode&#34;>surrogate code&#10;     * point</a> is passed through uninterpreted.&#10;     *&#10;     * @return an IntStream of char values from this sequence&#10;     * @since 9&#10;     "
  ]
  node [
    id 548
    label "public IntStream codePoints()"
    type "method"
    comment "&#10;     * Returns a stream of code point values from this sequence.  Any surrogate&#10;     * pairs encountered in the sequence are combined as if by {@linkplain&#10;     * Character#toCodePoint Character.toCodePoint} and the result is passed&#10;     * to the stream. Any other code units, including ordinary BMP characters,&#10;     * unpaired surrogates, and undefined code units, are zero-extended to&#10;     * {@code int} values which are then passed to the stream.&#10;     *&#10;     * @return an IntStream of Unicode code points from this sequence&#10;     * @since 9&#10;     "
  ]
  node [
    id 549
    label "public static int compare(CharSequence cs1, CharSequence cs2)"
    type "method"
    comment "&#10;     * Compares two {@code CharSequence} instances lexicographically. Returns a&#10;     * negative value, zero, or a positive value if the first sequence is lexicographically&#10;     * less than, equal to, or greater than the second, respectively.&#10;     *&#10;     * <p>&#10;     * The lexicographical ordering of {@code CharSequence} is defined as follows.&#10;     * Consider a {@code CharSequence} <i>cs</i> of length <i>len</i> to be a&#10;     * sequence of char values, <i>cs[0]</i> to <i>cs[len-1]</i>. Suppose <i>k</i>&#10;     * is the lowest index at which the corresponding char values from each sequence&#10;     * differ. The lexicographic ordering of the sequences is determined by a numeric&#10;     * comparison of the char values <i>cs1[k]</i> with <i>cs2[k]</i>. If there is&#10;     * no such index <i>k</i>, the shorter sequence is considered lexicographically&#10;     * less than the other. If the sequences have the same length, the sequences are&#10;     * considered lexicographically equal.&#10;     *&#10;     *&#10;     * @param cs1 the first {@code CharSequence}&#10;     * @param cs2 the second {@code CharSequence}&#10;     *&#10;     * @return  the value {@code 0} if the two {@code CharSequence} are equal;&#10;     *          a negative integer if the first {@code CharSequence}&#10;     *          is lexicographically less than the second; or a&#10;     *          positive integer if the first {@code CharSequence} is&#10;     *          lexicographically greater than the second.&#10;     *&#10;     * @since 11&#10;     "
  ]
  node [
    id 550
    label "public int codePointCount(int beginIndex, int endIndex)"
    type "method"
    comment "&#10;     * Returns the number of Unicode code points in the specified text&#10;     * range of this {@code String}. The text range begins at the&#10;     * specified {@code beginIndex} and extends to the&#10;     * {@code char} at index {@code endIndex - 1}. Thus the&#10;     * length (in {@code char}s) of the text range is&#10;     * {@code endIndex-beginIndex}. Unpaired surrogates within&#10;     * the text range count as one code point each.&#10;     *&#10;     * @param beginIndex the index to the first {@code char} of&#10;     * the text range.&#10;     * @param endIndex the index after the last {@code char} of&#10;     * the text range.&#10;     * @return the number of Unicode code points in the specified text&#10;     * range&#10;     * @exception IndexOutOfBoundsException if the&#10;     * {@code beginIndex} is negative, or {@code endIndex}&#10;     * is larger than the length of this {@code String}, or&#10;     * {@code beginIndex} is larger than {@code endIndex}.&#10;     * @since  1.5&#10;     "
  ]
  node [
    id 551
    label "public int offsetByCodePoints(int index, int codePointOffset)"
    type "method"
    comment "&#10;     * Returns the index within this {@code String} that is&#10;     * offset from the given {@code index} by&#10;     * {@code codePointOffset} code points. Unpaired surrogates&#10;     * within the text range given by {@code index} and&#10;     * {@code codePointOffset} count as one code point each.&#10;     *&#10;     * @param index the index to be offset&#10;     * @param codePointOffset the offset in code points&#10;     * @return the index within this {@code String}&#10;     * @exception IndexOutOfBoundsException if {@code index}&#10;     *   is negative or larger then the length of this&#10;     *   {@code String}, or if {@code codePointOffset} is positive&#10;     *   and the substring starting with {@code index} has fewer&#10;     *   than {@code codePointOffset} code points,&#10;     *   or if {@code codePointOffset} is negative and the substring&#10;     *   before {@code index} has fewer than the absolute value&#10;     *   of {@code codePointOffset} code points.&#10;     * @since 1.5&#10;     "
  ]
  node [
    id 552
    label " void getChars(char[] dst, int dstBegin)"
    type "method"
    comment "&#10;     * Copy characters from this string into dst starting at dstBegin.&#10;     * This method doesn't perform any range checking.&#10;     "
  ]
  node [
    id 553
    label "public void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin)"
    type "method"
    comment "&#10;     * Copies characters from this string into the destination character&#10;     * array.&#10;     * <p>&#10;     * The first character to be copied is at index {@code srcBegin};&#10;     * the last character to be copied is at index {@code srcEnd-1}&#10;     * (thus the total number of characters to be copied is&#10;     * {@code srcEnd-srcBegin}). The characters are copied into the&#10;     * subarray of {@code dst} starting at index {@code dstBegin}&#10;     * and ending at index:&#10;     * <blockquote><pre>&#10;     *     dstBegin + (srcEnd-srcBegin) - 1&#10;     * </pre></blockquote>&#10;     *&#10;     * @param      srcBegin   index of the first character in the string&#10;     *                        to copy.&#10;     * @param      srcEnd     index after the last character in the string&#10;     *                        to copy.&#10;     * @param      dst        the destination array.&#10;     * @param      dstBegin   the start offset in the destination array.&#10;     * @exception IndexOutOfBoundsException If any of the following&#10;     *            is true:&#10;     *            <ul><li>{@code srcBegin} is negative.&#10;     *            <li>{@code srcBegin} is greater than {@code srcEnd}&#10;     *            <li>{@code srcEnd} is greater than the length of this&#10;     *                string&#10;     *            <li>{@code dstBegin} is negative&#10;     *            <li>{@code dstBegin+(srcEnd-srcBegin)} is larger than&#10;     *                {@code dst.length}</ul>&#10;     "
  ]
  node [
    id 554
    label " native void getCharsNoCheck(int start, int end, char[] buffer, int index)"
    type "method"
    comment "&#10;     * getChars without bounds checks, for use by other classes&#10;     * within the java.lang package only.  The caller is responsible for&#10;     * ensuring that start >= 0 &#38;&#38; start <= end &#38;&#38; end <= count.&#10;     "
  ]
  node [
    id 555
    label "public byte[] getBytes(String charsetName) throws UnsupportedEncodingException"
    type "method"
    comment "&#10;     * Encodes this {@code String} into a sequence of bytes using the named&#10;     * charset, storing the result into a new byte array.&#10;     *&#10;     * <p> The behavior of this method when this string cannot be encoded in&#10;     * the given charset is unspecified.  The {@link&#10;     * java.nio.charset.CharsetEncoder} class should be used when more control&#10;     * over the encoding process is required.&#10;     *&#10;     * @param  charsetName&#10;     *         The name of a supported {@linkplain java.nio.charset.Charset&#10;     *         charset}&#10;     *&#10;     * @return  The resultant byte array&#10;     *&#10;     * @throws  UnsupportedEncodingException&#10;     *          If the named charset is not supported&#10;     *&#10;     * @since  1.1&#10;     "
  ]
  node [
    id 556
    label "java.nio.charset.CharsetEncoder"
    type "class"
    comment ""
  ]
  node [
    id 557
    label "public final Charset charset()"
    type "method"
    comment "&#10;     * Returns the charset that created this decoder.&#10;     *&#10;     * @return  This decoder's charset&#10;     "
  ]
  node [
    id 558
    label "public final byte[] replacement()"
    type "method"
    comment "&#10;     * Returns this encoder's replacement value.&#10;     *&#10;     * @return  This encoder's current replacement,&#10;     *          which is never {@code null} and is never empty&#10;     "
  ]
  node [
    id 559
    label "public final CharsetEncoder replaceWith(byte[] newReplacement)"
    type "method"
    comment "&#10;     * Changes this encoder's replacement value.&#10;     *&#10;     * <p> This method invokes the {@link #implReplaceWith implReplaceWith}&#10;     * method, passing the new replacement, after checking that the new&#10;     * replacement is acceptable.  </p>&#10;     *&#10;     * @param  newReplacement  The new replacement; must not be&#10;     *         {@code null}, must have non-zero length,&#10;&#10;&#10;&#10;&#10;&#10;     *         must not be longer than the value returned by the&#10;     *         {@link #maxBytesPerChar() maxBytesPerChar} method, and&#10;     *         must be {@link #isLegalReplacement legal}&#10;&#10;     *&#10;     * @return  This encoder&#10;     *&#10;     * @throws  IllegalArgumentException&#10;     *          If the preconditions on the parameter do not hold&#10;     "
  ]
  node [
    id 560
    label "implReplaceWith"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 561
    label "maxBytesPerChar()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 562
    label "isLegalReplacement"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 563
    label "protected void implReplaceWith(byte[] newReplacement)"
    type "method"
    comment "&#10;     * Reports a change to this encoder's replacement value.&#10;     *&#10;     * <p> The default implementation of this method does nothing.  This method&#10;     * should be overridden by encoders that require notification of changes to&#10;     * the replacement.  </p>&#10;     *&#10;     * @param  newReplacement    The replacement value&#10;     "
  ]
  node [
    id 564
    label "public boolean isLegalReplacement(byte[] repl)"
    type "method"
    comment "&#10;     * Tells whether or not the given byte array is a legal replacement value&#10;     * for this encoder.&#10;     *&#10;     * <p> A replacement is legal if, and only if, it is a legal sequence of&#10;     * bytes in this encoder's charset; that is, it must be possible to decode&#10;     * the replacement into one or more sixteen-bit Unicode characters.&#10;     *&#10;     * <p> The default implementation of this method is not very efficient; it&#10;     * should generally be overridden to improve performance.  </p>&#10;     *&#10;     * @param  repl  The byte array to be tested&#10;     *&#10;     * @return  {@code true} if, and only if, the given byte array&#10;     *          is a legal replacement value for this encoder&#10;     "
  ]
  node [
    id 565
    label "public CodingErrorAction malformedInputAction()"
    type "method"
    comment "&#10;     * Returns this decoder's current action for malformed-input errors.&#10;     *&#10;     * @return The current malformed-input action, which is never {@code null}&#10;     "
  ]
  node [
    id 566
    label "public final CharsetEncoder onMalformedInput(CodingErrorAction newAction)"
    type "method"
    comment "&#10;     * Changes this encoder's action for malformed-input errors.&#10;     *&#10;     * <p> This method invokes the {@link #implOnMalformedInput&#10;     * implOnMalformedInput} method, passing the new action.  </p>&#10;     *&#10;     * @param  newAction  The new action; must not be {@code null}&#10;     *&#10;     * @return  This encoder&#10;     *&#10;     * @throws IllegalArgumentException&#10;     *         If the precondition on the parameter does not hold&#10;     "
  ]
  node [
    id 567
    label "implOnMalformedInputimplOnMalformedInput"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 568
    label "protected void implOnMalformedInput(CodingErrorAction newAction)"
    type "method"
    comment "&#10;     * Reports a change to this decoder's malformed-input action.&#10;     *&#10;     * <p> The default implementation of this method does nothing.  This method&#10;     * should be overridden by decoders that require notification of changes to&#10;     * the malformed-input action.  </p>&#10;     *&#10;     * @param  newAction  The new action&#10;     "
  ]
  node [
    id 569
    label "public CodingErrorAction unmappableCharacterAction()"
    type "method"
    comment "&#10;     * Returns this decoder's current action for unmappable-character errors.&#10;     *&#10;     * @return The current unmappable-character action, which is never&#10;     *         {@code null}&#10;     "
  ]
  node [
    id 570
    label "public final CharsetEncoder onUnmappableCharacter(CodingErrorAction newAction)"
    type "method"
    comment "&#10;     * Changes this encoder's action for unmappable-character errors.&#10;     *&#10;     * <p> This method invokes the {@link #implOnUnmappableCharacter&#10;     * implOnUnmappableCharacter} method, passing the new action.  </p>&#10;     *&#10;     * @param  newAction  The new action; must not be {@code null}&#10;     *&#10;     * @return  This encoder&#10;     *&#10;     * @throws IllegalArgumentException&#10;     *         If the precondition on the parameter does not hold&#10;     "
  ]
  node [
    id 571
    label "implOnUnmappableCharacterimplOnUnmappableCharacter"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 572
    label "protected void implOnUnmappableCharacter(CodingErrorAction newAction)"
    type "method"
    comment "&#10;     * Reports a change to this decoder's unmappable-character action.&#10;     *&#10;     * <p> The default implementation of this method does nothing.  This method&#10;     * should be overridden by decoders that require notification of changes to&#10;     * the unmappable-character action.  </p>&#10;     *&#10;     * @param  newAction  The new action&#10;     "
  ]
  node [
    id 573
    label "public final float averageBytesPerChar()"
    type "method"
    comment "&#10;     * Returns the average number of bytes that will be produced for each&#10;     * character of input.  This heuristic value may be used to estimate the size&#10;     * of the output buffer required for a given input sequence.&#10;     *&#10;     * @return  The average number of bytes produced&#10;     *          per character of input&#10;     "
  ]
  node [
    id 574
    label "public final float maxBytesPerChar()"
    type "method"
    comment "&#10;     * Returns the maximum number of bytes that will be produced for each&#10;     * character of input.  This value may be used to compute the worst-case size&#10;     * of the output buffer required for a given input sequence. This value&#10;     * accounts for any necessary content-independent prefix or suffix&#10;&#10;     * bytes, such as byte-order marks.&#10;&#10;&#10;&#10;&#10;     *&#10;     * @return  The maximum number of bytes that will be produced per&#10;     *          character of input&#10;     "
  ]
  node [
    id 575
    label "public final CoderResult encode(CharBuffer in, ByteBuffer out, boolean endOfInput)"
    type "method"
    comment "&#10;     * Encodes as many characters as possible from the given input buffer,&#10;     * writing the results to the given output buffer.&#10;     *&#10;     * <p> The buffers are read from, and written to, starting at their current&#10;     * positions.  At most {@link Buffer#remaining in.remaining()} characters&#10;     * will be read and at most {@link Buffer#remaining out.remaining()}&#10;     * bytes will be written.  The buffers' positions will be advanced to&#10;     * reflect the characters read and the bytes written, but their marks and&#10;     * limits will not be modified.&#10;     *&#10;     * <p> In addition to reading characters from the input buffer and writing&#10;     * bytes to the output buffer, this method returns a {@link CoderResult}&#10;     * object to describe its reason for termination:&#10;     *&#10;     * <ul>&#10;     *&#10;     *   <li><p> {@link CoderResult#UNDERFLOW} indicates that as much of the&#10;     *   input buffer as possible has been encoded.  If there is no further&#10;     *   input then the invoker can proceed to the next step of the&#10;     *   <a href=&#34;#steps&#34;>encoding operation</a>.  Otherwise this method&#10;     *   should be invoked again with further input.  </p></li>&#10;     *&#10;     *   <li><p> {@link CoderResult#OVERFLOW} indicates that there is&#10;     *   insufficient space in the output buffer to encode any more characters.&#10;     *   This method should be invoked again with an output buffer that has&#10;     *   more {@linkplain Buffer#remaining remaining} bytes. This is&#10;     *   typically done by draining any encoded bytes from the output&#10;     *   buffer.  </p></li>&#10;     *&#10;     *   <li><p> A {@linkplain CoderResult#malformedForLength&#10;     *   malformed-input} result indicates that a malformed-input&#10;     *   error has been detected.  The malformed characters begin at the input&#10;     *   buffer's (possibly incremented) position; the number of malformed&#10;     *   characters may be determined by invoking the result object's {@link&#10;     *   CoderResult#length() length} method.  This case applies only if the&#10;     *   {@linkplain #onMalformedInput malformed action} of this encoder&#10;     *   is {@link CodingErrorAction#REPORT}; otherwise the malformed input&#10;     *   will be ignored or replaced, as requested.  </p></li>&#10;     *&#10;     *   <li><p> An {@linkplain CoderResult#unmappableForLength&#10;     *   unmappable-character} result indicates that an&#10;     *   unmappable-character error has been detected.  The characters that&#10;     *   encode the unmappable character begin at the input buffer's (possibly&#10;     *   incremented) position; the number of such characters may be determined&#10;     *   by invoking the result object's {@link CoderResult#length() length}&#10;     *   method.  This case applies only if the {@linkplain #onUnmappableCharacter&#10;     *   unmappable action} of this encoder is {@link&#10;     *   CodingErrorAction#REPORT}; otherwise the unmappable character will be&#10;     *   ignored or replaced, as requested.  </p></li>&#10;     *&#10;     * </ul>&#10;     *&#10;     * In any case, if this method is to be reinvoked in the same encoding&#10;     * operation then care should be taken to preserve any characters remaining&#10;     * in the input buffer so that they are available to the next invocation.&#10;     *&#10;     * <p> The {@code endOfInput} parameter advises this method as to whether&#10;     * the invoker can provide further input beyond that contained in the given&#10;     * input buffer.  If there is a possibility of providing additional input&#10;     * then the invoker should pass {@code false} for this parameter; if there&#10;     * is no possibility of providing further input then the invoker should&#10;     * pass {@code true}.  It is not erroneous, and in fact it is quite&#10;     * common, to pass {@code false} in one invocation and later discover that&#10;     * no further input was actually available.  It is critical, however, that&#10;     * the final invocation of this method in a sequence of invocations always&#10;     * pass {@code true} so that any remaining unencoded input will be treated&#10;     * as being malformed.&#10;     *&#10;     * <p> This method works by invoking the {@link #encodeLoop encodeLoop}&#10;     * method, interpreting its results, handling error conditions, and&#10;     * reinvoking it as necessary.  </p>&#10;     *&#10;     *&#10;     * @param  in&#10;     *         The input character buffer&#10;     *&#10;     * @param  out&#10;     *         The output byte buffer&#10;     *&#10;     * @param  endOfInput&#10;     *         {@code true} if, and only if, the invoker can provide no&#10;     *         additional input characters beyond those in the given buffer&#10;     *&#10;     * @return  A coder-result object describing the reason for termination&#10;     *&#10;     * @throws  IllegalStateException&#10;     *          If an encoding operation is already in progress and the previous&#10;     *          step was an invocation neither of the {@link #reset reset}&#10;     *          method, nor of this method with a value of {@code false} for&#10;     *          the {@code endOfInput} parameter, nor of this method with a&#10;     *          value of {@code true} for the {@code endOfInput} parameter&#10;     *          but a return value indicating an incomplete encoding operation&#10;     *&#10;     * @throws  CoderMalfunctionError&#10;     *          If an invocation of the encodeLoop method threw&#10;     *          an unexpected exception&#10;     *&#10;     * @throws  NullPointerException if input or output buffer is null&#10;     "
  ]
  node [
    id 576
    label "OVERFLOW"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 577
    label "java.nio.charset.CoderResult"
    type "class"
    comment ""
  ]
  node [
    id 578
    label "public boolean isUnderflow()"
    type "method"
    comment "&#10;     * Tells whether or not this object describes an underflow condition.&#10;     *&#10;     * @return  {@code true} if, and only if, this object denotes underflow&#10;     "
  ]
  node [
    id 579
    label "public boolean isOverflow()"
    type "method"
    comment "&#10;     * Tells whether or not this object describes an overflow condition.&#10;     *&#10;     * @return  {@code true} if, and only if, this object denotes overflow&#10;     "
  ]
  node [
    id 580
    label "public boolean isError()"
    type "method"
    comment "&#10;     * Tells whether or not this object describes an error condition.&#10;     *&#10;     * @return  {@code true} if, and only if, this object denotes either a&#10;     *          malformed-input error or an unmappable-character error&#10;     "
  ]
  node [
    id 581
    label "public boolean isMalformed()"
    type "method"
    comment "&#10;     * Tells whether or not this object describes a malformed-input error.&#10;     *&#10;     * @return  {@code true} if, and only if, this object denotes a&#10;     *          malformed-input error&#10;     "
  ]
  node [
    id 582
    label "public boolean isUnmappable()"
    type "method"
    comment "&#10;     * Tells whether or not this object describes an unmappable-character&#10;     * error.&#10;     *&#10;     * @return  {@code true} if, and only if, this object denotes an&#10;     *          unmappable-character error&#10;     "
  ]
  node [
    id 583
    label "isError()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 584
    label "public static CoderResult malformedForLength(int length)"
    type "method"
    comment "&#10;     * Static factory method that returns the unique object describing a&#10;     * malformed-input error of the given length.&#10;     *&#10;     * @param   length&#10;     *          The given length&#10;     *&#10;     * @return  The requested coder-result object&#10;     "
  ]
  node [
    id 585
    label "public static CoderResult unmappableForLength(int length)"
    type "method"
    comment "&#10;     * Static factory method that returns the unique result object describing&#10;     * an unmappable-character error of the given length.&#10;     *&#10;     * @param   length&#10;     *          The given length&#10;     *&#10;     * @return  The requested coder-result object&#10;     "
  ]
  node [
    id 586
    label "public void throwException() throws CharacterCodingException"
    type "method"
    comment "&#10;     * Throws an exception appropriate to the result described by this object.&#10;     *&#10;     * @throws  BufferUnderflowException&#10;     *          If this object is {@link #UNDERFLOW}&#10;     *&#10;     * @throws  BufferOverflowException&#10;     *          If this object is {@link #OVERFLOW}&#10;     *&#10;     * @throws  MalformedInputException&#10;     *          If this object represents a malformed-input error; the&#10;     *          exception's length value will be that of this object&#10;     *&#10;     * @throws  UnmappableCharacterException&#10;     *          If this object represents an unmappable-character error; the&#10;     *          exceptions length value will be that of this object&#10;     "
  ]
  node [
    id 587
    label "UNDERFLOW"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 588
    label "reset"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 589
    label "REPORT"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 590
    label "java.nio.charset.CodingErrorAction"
    type "class"
    comment ""
  ]
  node [
    id 591
    label "encodeLoop"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 592
    label "remaining"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 593
    label "java.nio.Buffer"
    type "class"
    comment ""
  ]
  node [
    id 594
    label " static IllegalArgumentException createSameBufferException()"
    type "method"
    comment "&#10;     * Returns an {@code IllegalArgumentException} indicating that the source&#10;     * and target are the same {@code Buffer}.  Intended for use in&#10;     * {@code put(src)} when the parameter is the {@code Buffer} on which the&#10;     * method is being invoked.&#10;     *&#10;     * @return  IllegalArgumentException&#10;     *          With a message indicating equal source and target buffers&#10;     "
  ]
  node [
    id 595
    label " static IllegalArgumentException createCapacityException(int capacity)"
    type "method"
    comment "&#10;     * Verify that the capacity is nonnegative.&#10;     *&#10;     * @param  capacity&#10;     *         The new buffer's capacity, in $type$s&#10;     *&#10;     * @throws IllegalArgumentException&#10;     *         If the {@code capacity} is a negative integer&#10;     "
  ]
  node [
    id 596
    label "public final int capacity()"
    type "method"
    comment "&#10;     * Returns this buffer's capacity.&#10;     *&#10;     * @return  The capacity of this buffer&#10;     "
  ]
  node [
    id 597
    label "public final int position()"
    type "method"
    comment "&#10;     * Returns this buffer's position.&#10;     *&#10;     * @return  The position of this buffer&#10;     "
  ]
  node [
    id 598
    label "public Buffer position(int newPosition)"
    type "method"
    comment " Android-changed: Un-final the method until confirmation of causing no app compat."
  ]
  node [
    id 599
    label "private IllegalArgumentException createPositionException(int newPosition)"
    type "method"
    comment "&#10;     * Verify that {@code 0 < newPosition <= limit}&#10;     *&#10;     * @param newPosition&#10;     *        The new position value&#10;     *&#10;     * @throws IllegalArgumentException&#10;     *         If the specified position is out of bounds.&#10;     "
  ]
  node [
    id 600
    label "public final int limit()"
    type "method"
    comment "&#10;     * Returns this buffer's limit.&#10;     *&#10;     * @return  The limit of this buffer&#10;     "
  ]
  node [
    id 601
    label "public Buffer limit(int newLimit)"
    type "method"
    comment " Android-changed: Un-final the method until confirmation of causing no app compat."
  ]
  node [
    id 602
    label "private IllegalArgumentException createLimitException(int newLimit)"
    type "method"
    comment "&#10;     * Verify that {@code 0 < newLimit <= capacity}&#10;     *&#10;     * @param newLimit&#10;     *        The new limit value&#10;     *&#10;     * @throws IllegalArgumentException&#10;     *         If the specified limit is out of bounds.&#10;     "
  ]
  node [
    id 603
    label "public Buffer mark()"
    type "method"
    comment " Android-changed: Un-final the method until confirmation of causing no app compat."
  ]
  node [
    id 604
    label "public Buffer reset()"
    type "method"
    comment " Android-changed: Un-final the method until confirmation of causing no app compat."
  ]
  node [
    id 605
    label "public Buffer clear()"
    type "method"
    comment " Android-changed: Un-final the method until confirmation of causing no app compat."
  ]
  node [
    id 606
    label "public Buffer flip()"
    type "method"
    comment " Android-changed: Un-final the method until confirmation of causing no app compat."
  ]
  node [
    id 607
    label "compact"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 608
    label "java.nio.ByteBuffer"
    type "class"
    comment ""
  ]
  node [
    id 609
    label "public static ByteBuffer allocateDirect(int capacity)"
    type "method"
    comment "&#10;     * Allocates a new direct byte buffer.&#10;     *&#10;     * <p> The new buffer's position will be zero, its limit will be its&#10;     * capacity, its mark will be undefined, each of its elements will be&#10;     * initialized to zero, and its byte order will be&#10;     * {@link ByteOrder#BIG_ENDIAN BIG_ENDIAN}.  Whether or not it has a&#10;     * {@link #hasArray backing array} is unspecified.&#10;     *&#10;     * @param  capacity&#10;     *         The new buffer's capacity, in bytes&#10;     *&#10;     * @return  The new byte buffer&#10;     *&#10;     * @throws  IllegalArgumentException&#10;     *          If the {@code capacity} is a negative integer&#10;     "
  ]
  node [
    id 610
    label "BIG_ENDIAN"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 611
    label "java.nio.ByteOrder"
    type "class"
    comment ""
  ]
  node [
    id 612
    label "public static ByteOrder nativeOrder()"
    type "method"
    comment "&#10;     * Retrieves the native byte order of the underlying platform.&#10;     *&#10;     * <p> This method is defined so that performance-sensitive Java code can&#10;     * allocate direct buffers with the same byte order as the hardware.&#10;     * Native code libraries are often more efficient when such buffers are&#10;     * used.  </p>&#10;     *&#10;     * @return  The native byte order of the hardware upon which this Java&#10;     *          virtual machine is running&#10;     "
  ]
  node [
    id 613
    label "LITTLE_ENDIAN"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 614
    label "hasArray"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 615
    label "public static ByteBuffer allocate(int capacity)"
    type "method"
    comment "&#10;     * Allocates a new byte buffer.&#10;     *&#10;     * <p> The new buffer's position will be zero, its limit will be its&#10;     * capacity, its mark will be undefined, each of its elements will be&#10;     * initialized to zero, and its byte order will be&#10;&#10;     * {@link ByteOrder#BIG_ENDIAN BIG_ENDIAN}.&#10;&#10;&#10;&#10;&#10;     * It will have a {@link #array backing array}, and its&#10;     * {@link #arrayOffset array offset} will be zero.&#10;     *&#10;     * @param  capacity&#10;     *         The new buffer's capacity, in bytes&#10;     *&#10;     * @return  The new byte buffer&#10;     *&#10;     * @throws  IllegalArgumentException&#10;     *          If the {@code capacity} is a negative integer&#10;     "
  ]
  node [
    id 616
    label "array"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 617
    label "arrayOffset"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 618
    label "public static ByteBuffer wrap(byte[] array, int offset, int length)"
    type "method"
    comment "&#10;     * Wraps a byte array into a buffer.&#10;     *&#10;     * <p> The new buffer will be backed by the given byte array;&#10;     * that is, modifications to the buffer will cause the array to be modified&#10;     * and vice versa.  The new buffer's capacity will be&#10;     * {@code array.length}, its position will be {@code offset}, its limit&#10;     * will be {@code offset + length}, its mark will be undefined, and its&#10;     * byte order will be&#10;&#10;     * {@link ByteOrder#BIG_ENDIAN BIG_ENDIAN}.&#10;&#10;&#10;&#10;&#10;     * Its {@link #array backing array} will be the given array, and&#10;     * its {@link #arrayOffset array offset} will be zero.  </p>&#10;     *&#10;     * @param  array&#10;     *         The array that will back the new buffer&#10;     *&#10;     * @param  offset&#10;     *         The offset of the subarray to be used; must be non-negative and&#10;     *         no larger than {@code array.length}.  The new buffer's position&#10;     *         will be set to this value.&#10;     *&#10;     * @param  length&#10;     *         The length of the subarray to be used;&#10;     *         must be non-negative and no larger than&#10;     *         {@code array.length - offset}.&#10;     *         The new buffer's limit will be set to {@code offset + length}.&#10;     *&#10;     * @return  The new byte buffer&#10;     *&#10;     * @throws  IndexOutOfBoundsException&#10;     *          If the preconditions on the {@code offset} and {@code length}&#10;     *          parameters do not hold&#10;     "
  ]
  node [
    id 619
    label "public static ByteBuffer wrap(byte[] array)"
    type "method"
    comment "&#10;     * Wraps a byte array into a buffer.&#10;     *&#10;     * <p> The new buffer will be backed by the given byte array;&#10;     * that is, modifications to the buffer will cause the array to be modified&#10;     * and vice versa.  The new buffer's capacity and limit will be&#10;     * {@code array.length}, its position will be zero, its mark will be&#10;     * undefined, and its byte order will be&#10;&#10;     * {@link ByteOrder#BIG_ENDIAN BIG_ENDIAN}.&#10;&#10;&#10;&#10;&#10;     * Its {@link #array backing array} will be the given array, and its&#10;     * {@link #arrayOffset array offset} will be zero.  </p>&#10;     *&#10;     * @param  array&#10;     *         The array that will back this buffer&#10;     *&#10;     * @return  The new byte buffer&#10;     "
  ]
  node [
    id 620
    label "public abstract ByteBuffer slice()"
    type "method"
    comment " Android-changed: covariant overloads of *Buffer methods that return this."
  ]
  node [
    id 621
    label "public abstract ByteBuffer slice(int index, int length)"
    type "method"
    comment "&#10;     * Creates a new byte buffer whose content is a shared subsequence of&#10;     * this buffer's content.&#10;     *&#10;     * <p> The content of the new buffer will start at position {@code index}&#10;     * in this buffer, and will contain {@code length} elements. Changes to&#10;     * this buffer's content will be visible in the new buffer, and vice versa;&#10;     * the two buffers' position, limit, and mark values will be independent.&#10;     *&#10;     * <p> The new buffer's position will be zero, its capacity and its limit&#10;     * will be {@code length}, its mark will be undefined, and its byte order&#10;     * will be&#10;&#10;     * {@link ByteOrder#BIG_ENDIAN BIG_ENDIAN}.&#10;&#10;&#10;&#10;     * The new buffer will be direct if, and only if, this buffer is direct,&#10;     * and it will be read-only if, and only if, this buffer is read-only. </p>&#10;     *&#10;     * @param   index&#10;     *          The position in this buffer at which the content of the new&#10;     *          buffer will start; must be non-negative and no larger than&#10;     *          {@link #limit() limit()}&#10;     *&#10;     * @param   length&#10;     *          The number of elements the new buffer will contain; must be&#10;     *          non-negative and no larger than {@code limit() - index}&#10;     *&#10;     * @return  The new buffer&#10;     *&#10;     * @throws  IndexOutOfBoundsException&#10;     *          If {@code index} is negative or greater than {@code limit()},&#10;     *          {@code length} is negative, or {@code length > limit() - index}&#10;     *&#10;     * @since 13&#10;     "
  ]
  node [
    id 622
    label "limit()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 623
    label "public abstract ByteBuffer duplicate()"
    type "method"
    comment " Android-changed: covariant overloads of *Buffer methods that return this."
  ]
  node [
    id 624
    label "public abstract ByteBuffer asReadOnlyBuffer()"
    type "method"
    comment "&#10;     * Creates a new, read-only byte buffer that shares this buffer's&#10;     * content.&#10;     *&#10;     * <p> The content of the new buffer will be that of this buffer.  Changes&#10;     * to this buffer's content will be visible in the new buffer; the new&#10;     * buffer itself, however, will be read-only and will not allow the shared&#10;     * content to be modified.  The two buffers' position, limit, and mark&#10;     * values will be independent.&#10;     *&#10;     * <p> The new buffer's capacity, limit, position,&#10;&#10;     * and mark values will be identical to those of this buffer, and its byte&#10;     * order will be {@link ByteOrder#BIG_ENDIAN BIG_ENDIAN}.&#10;&#10;&#10;&#10;     *&#10;     * <p> If this buffer is itself read-only then this method behaves in&#10;     * exactly the same way as the {@link #duplicate duplicate} method.  </p>&#10;     *&#10;     * @return  The new, read-only byte buffer&#10;     "
  ]
  node [
    id 625
    label "duplicate"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 626
    label "public abstract byte get()"
    type "method"
    comment "&#10;     * Relative <i>get</i> method.  Reads the byte at this buffer's&#10;     * current position, and then increments the position.&#10;     *&#10;     * @return  The byte at the buffer's current position&#10;     *&#10;     * @throws  BufferUnderflowException&#10;     *          If the buffer's current position is not smaller than its limit&#10;     "
  ]
  node [
    id 627
    label "public abstract ByteBuffer put(byte b)"
    type "method"
    comment "&#10;     * Relative <i>put</i> method&#38;nbsp;&#38;nbsp;<i>(optional operation)</i>.&#10;     *&#10;     * <p> Writes the given byte into this buffer at the current&#10;     * position, and then increments the position. </p>&#10;     *&#10;     * @param  b&#10;     *         The byte to be written&#10;     *&#10;     * @return  This buffer&#10;     *&#10;     * @throws  BufferOverflowException&#10;     *          If this buffer's current position is not smaller than its limit&#10;     *&#10;     * @throws  ReadOnlyBufferException&#10;     *          If this buffer is read-only&#10;     "
  ]
  node [
    id 628
    label "public abstract byte get(int index)"
    type "method"
    comment "&#10;     * Absolute <i>get</i> method.  Reads the byte at the given&#10;     * index.&#10;     *&#10;     * @param  index&#10;     *         The index from which the byte will be read&#10;     *&#10;     * @return  The byte at the given index&#10;     *&#10;     * @throws  IndexOutOfBoundsException&#10;     *          If {@code index} is negative&#10;     *          or not smaller than the buffer's limit&#10;     "
  ]
  node [
    id 629
    label "public abstract ByteBuffer put(int index, byte b)"
    type "method"
    comment "&#10;     * Absolute <i>put</i> method&#38;nbsp;&#38;nbsp;<i>(optional operation)</i>.&#10;     *&#10;     * <p> Writes the given byte into this buffer at the given&#10;     * index. </p>&#10;     *&#10;     * @param  index&#10;     *         The index at which the byte will be written&#10;     *&#10;     * @param  b&#10;     *         The byte value to be written&#10;     *&#10;     * @return  This buffer&#10;     *&#10;     * @throws  IndexOutOfBoundsException&#10;     *          If {@code index} is negative&#10;     *          or not smaller than the buffer's limit&#10;     *&#10;     * @throws  ReadOnlyBufferException&#10;     *          If this buffer is read-only&#10;     "
  ]
  node [
    id 630
    label "public ByteBuffer get(byte[] dst, int offset, int length)"
    type "method"
    comment "&#10;     * Relative bulk <i>get</i> method.&#10;     *&#10;     * <p> This method transfers bytes from this buffer into the given&#10;     * destination array.  If there are fewer bytes remaining in the&#10;     * buffer than are required to satisfy the request, that is, if&#10;     * {@code length}&#38;nbsp;{@code >}&#38;nbsp;{@code remaining()}, then no&#10;     * bytes are transferred and a {@link BufferUnderflowException} is&#10;     * thrown.&#10;     *&#10;     * <p> Otherwise, this method copies {@code length} bytes from this&#10;     * buffer into the given array, starting at the current position of this&#10;     * buffer and at the given offset in the array.  The position of this&#10;     * buffer is then incremented by {@code length}.&#10;     *&#10;     * <p> In other words, an invocation of this method of the form&#10;     * <code>src.get(dst,&#38;nbsp;off,&#38;nbsp;len)</code> has exactly the same effect as&#10;     * the loop&#10;     *&#10;     * <pre>{@code&#10;     *     for (int i = off; i < off + len; i++)&#10;     *         dst[i] = src.get();&#10;     * }</pre>&#10;     *&#10;     * except that it first checks that there are sufficient bytes in&#10;     * this buffer and it is potentially much more efficient.&#10;     *&#10;     * @param  dst&#10;     *         The array into which bytes are to be written&#10;     *&#10;     * @param  offset&#10;     *         The offset within the array of the first byte to be&#10;     *         written; must be non-negative and no larger than&#10;     *         {@code dst.length}&#10;     *&#10;     * @param  length&#10;     *         The maximum number of bytes to be written to the given&#10;     *         array; must be non-negative and no larger than&#10;     *         {@code dst.length - offset}&#10;     *&#10;     * @return  This buffer&#10;     *&#10;     * @throws  BufferUnderflowException&#10;     *          If there are fewer than {@code length} bytes&#10;     *          remaining in this buffer&#10;     *&#10;     * @throws  IndexOutOfBoundsException&#10;     *          If the preconditions on the {@code offset} and {@code length}&#10;     *          parameters do not hold&#10;     "
  ]
  node [
    id 631
    label "java.nio.BufferUnderflowException"
    type "class"
    comment ""
  ]
  node [
    id 632
    label "public ByteBuffer get(byte[] dst)"
    type "method"
    comment "&#10;     * Relative bulk <i>get</i> method.&#10;     *&#10;     * <p> This method transfers bytes from this buffer into the given&#10;     * destination array.  An invocation of this method of the form&#10;     * {@code src.get(a)} behaves in exactly the same way as the invocation&#10;     *&#10;     * <pre>&#10;     *     src.get(a, 0, a.length) </pre>&#10;     *&#10;     * @param   dst&#10;     *          The destination array&#10;     *&#10;     * @return  This buffer&#10;     *&#10;     * @throws  BufferUnderflowException&#10;     *          If there are fewer than {@code length} bytes&#10;     *          remaining in this buffer&#10;     "
  ]
  node [
    id 633
    label "public ByteBuffer get(int index, byte[] dst, int offset, int length)"
    type "method"
    comment "&#10;     * Absolute bulk <i>get</i> method.&#10;     *&#10;     * <p> This method transfers {@code length} bytes from this&#10;     * buffer into the given array, starting at the given index in this&#10;     * buffer and at the given offset in the array.  The position of this&#10;     * buffer is unchanged.&#10;     *&#10;     * <p> An invocation of this method of the form&#10;     * <code>src.get(index,&#38;nbsp;dst,&#38;nbsp;offset,&#38;nbsp;length)</code>&#10;     * has exactly the same effect as the following loop except that it first&#10;     * checks the consistency of the supplied parameters and it is potentially&#10;     * much more efficient:&#10;     *&#10;     * <pre>{@code&#10;     *     for (int i = offset, j = index; i < offset + length; i++, j++)&#10;     *         dst[i] = src.get(j);&#10;     * }</pre>&#10;     *&#10;     * @param  index&#10;     *         The index in this buffer from which the first byte will be&#10;     *         read; must be non-negative and less than {@code limit()}&#10;     *&#10;     * @param  dst&#10;     *         The destination array&#10;     *&#10;     * @param  offset&#10;     *         The offset within the array of the first byte to be&#10;     *         written; must be non-negative and less than&#10;     *         {@code dst.length}&#10;     *&#10;     * @param  length&#10;     *         The number of bytes to be written to the given array;&#10;     *         must be non-negative and no larger than the smaller of&#10;     *         {@code limit() - index} and {@code dst.length - offset}&#10;     *&#10;     * @return  This buffer&#10;     *&#10;     * @throws  IndexOutOfBoundsException&#10;     *          If the preconditions on the {@code index}, {@code offset}, and&#10;     *          {@code length} parameters do not hold&#10;     *&#10;     * @since 13&#10;     "
  ]
  node [
    id 634
    label "public ByteBuffer get(int index, byte[] dst)"
    type "method"
    comment "&#10;     * Absolute bulk <i>get</i> method.&#10;     *&#10;     * <p> This method transfers bytes from this buffer into the given&#10;     * destination array.  The position of this buffer is unchanged.  An&#10;     * invocation of this method of the form&#10;     * <code>src.get(index,&#38;nbsp;dst)</code> behaves in exactly the same&#10;     * way as the invocation:&#10;     *&#10;     * <pre>&#10;     *     src.get(index, dst, 0, dst.length) </pre>&#10;     *&#10;     * @param  index&#10;     *         The index in this buffer from which the first byte will be&#10;     *         read; must be non-negative and less than {@code limit()}&#10;     *&#10;     * @param  dst&#10;     *         The destination array&#10;     *&#10;     * @return  This buffer&#10;     *&#10;     * @throws  IndexOutOfBoundsException&#10;     *          If {@code index} is negative, not smaller than {@code limit()},&#10;     *          or {@code limit() - index < dst.length}&#10;     *&#10;     * @since 13&#10;     "
  ]
  node [
    id 635
    label "public ByteBuffer put(ByteBuffer src)"
    type "method"
    comment "&#10;     * Relative bulk <i>put</i> method&#38;nbsp;&#38;nbsp;<i>(optional operation)</i>.&#10;     *&#10;     * <p> This method transfers the bytes remaining in the given source&#10;     * buffer into this buffer.  If there are more bytes remaining in the&#10;     * source buffer than in this buffer, that is, if&#10;     * {@code src.remaining()}&#38;nbsp;{@code >}&#38;nbsp;{@code remaining()},&#10;     * then no bytes are transferred and a {@link&#10;     * BufferOverflowException} is thrown.&#10;     *&#10;     * <p> Otherwise, this method copies&#10;     * <i>n</i>&#38;nbsp;=&#38;nbsp;{@code src.remaining()} bytes from the given&#10;     * buffer into this buffer, starting at each buffer's current position.&#10;     * The positions of both buffers are then incremented by <i>n</i>.&#10;     *&#10;     * <p> In other words, an invocation of this method of the form&#10;     * {@code dst.put(src)} has exactly the same effect as the loop&#10;     *&#10;     * <pre>&#10;     *     while (src.hasRemaining())&#10;     *         dst.put(src.get()); </pre>&#10;     *&#10;     * except that it first checks that there is sufficient space in this&#10;     * buffer and it is potentially much more efficient.  If this buffer and&#10;     * the source buffer share the same backing array or memory, then the&#10;     * result will be as if the source elements were first copied to an&#10;     * intermediate location before being written into this buffer.&#10;     *&#10;     * @param  src&#10;     *         The source buffer from which bytes are to be read;&#10;     *         must not be this buffer&#10;     *&#10;     * @return  This buffer&#10;     *&#10;     * @throws  BufferOverflowException&#10;     *          If there is insufficient space in this buffer&#10;     *          for the remaining bytes in the source buffer&#10;     *&#10;     * @throws  IllegalArgumentException&#10;     *          If the source buffer is this buffer&#10;     *&#10;     * @throws  ReadOnlyBufferException&#10;     *          If this buffer is read-only&#10;     "
  ]
  node [
    id 636
    label "java.nio.BufferOverflowException"
    type "class"
    comment ""
  ]
  node [
    id 637
    label "public ByteBuffer put(int index, ByteBuffer src, int offset, int length)"
    type "method"
    comment "&#10;     * Absolute bulk <i>put</i> method&#38;nbsp;&#38;nbsp;<i>(optional operation)</i>.&#10;     *&#10;     * <p> This method transfers {@code length} bytes into this buffer from&#10;     * the given source buffer, starting at the given {@code offset} in the&#10;     * source buffer and the given {@code index} in this buffer. The positions&#10;     * of both buffers are unchanged.&#10;     *&#10;     * <p> In other words, an invocation of this method of the form&#10;     * <code>dst.put(index,&#38;nbsp;src,&#38;nbsp;offset,&#38;nbsp;length)</code>&#10;     * has exactly the same effect as the loop&#10;     *&#10;     * <pre>{@code&#10;     * for (int i = offset, j = index; i < offset + length; i++, j++)&#10;     *     dst.put(j, src.get(i));&#10;     * }</pre>&#10;     *&#10;     * except that it first checks the consistency of the supplied parameters&#10;     * and it is potentially much more efficient.  If this buffer and&#10;     * the source buffer share the same backing array or memory, then the&#10;     * result will be as if the source elements were first copied to an&#10;     * intermediate location before being written into this buffer.&#10;     *&#10;     * @param index&#10;     *        The index in this buffer at which the first byte will be&#10;     *        written; must be non-negative and less than {@code limit()}&#10;     *&#10;     * @param src&#10;     *        The buffer from which bytes are to be read&#10;     *&#10;     * @param offset&#10;     *        The index within the source buffer of the first byte to be&#10;     *        read; must be non-negative and less than {@code src.limit()}&#10;     *&#10;     * @param length&#10;     *        The number of bytes to be read from the given buffer;&#10;     *        must be non-negative and no larger than the smaller of&#10;     *        {@code limit() - index} and {@code src.limit() - offset}&#10;     *&#10;     * @return This buffer&#10;     *&#10;     * @throws IndexOutOfBoundsException&#10;     *         If the preconditions on the {@code index}, {@code offset}, and&#10;     *         {@code length} parameters do not hold&#10;     *&#10;     * @throws ReadOnlyBufferException&#10;     *         If this buffer is read-only&#10;     *&#10;     * @since 16&#10;     "
  ]
  node [
    id 638
    label "public ByteBuffer put(byte[] src, int offset, int length)"
    type "method"
    comment "&#10;     * Relative bulk <i>put</i> method&#38;nbsp;&#38;nbsp;<i>(optional operation)</i>.&#10;     *&#10;     * <p> This method transfers bytes into this buffer from the given&#10;     * source array.  If there are more bytes to be copied from the array&#10;     * than remain in this buffer, that is, if&#10;     * {@code length}&#38;nbsp;{@code >}&#38;nbsp;{@code remaining()}, then no&#10;     * bytes are transferred and a {@link BufferOverflowException} is&#10;     * thrown.&#10;     *&#10;     * <p> Otherwise, this method copies {@code length} bytes from the&#10;     * given array into this buffer, starting at the given offset in the array&#10;     * and at the current position of this buffer.  The position of this buffer&#10;     * is then incremented by {@code length}.&#10;     *&#10;     * <p> In other words, an invocation of this method of the form&#10;     * <code>dst.put(src,&#38;nbsp;off,&#38;nbsp;len)</code> has exactly the same effect as&#10;     * the loop&#10;     *&#10;     * <pre>{@code&#10;     *     for (int i = off; i < off + len; i++)&#10;     *         dst.put(src[i]);&#10;     * }</pre>&#10;     *&#10;     * except that it first checks that there is sufficient space in this&#10;     * buffer and it is potentially much more efficient.&#10;     *&#10;     * @param  src&#10;     *         The array from which bytes are to be read&#10;     *&#10;     * @param  offset&#10;     *         The offset within the array of the first byte to be read;&#10;     *         must be non-negative and no larger than {@code src.length}&#10;     *&#10;     * @param  length&#10;     *         The number of bytes to be read from the given array;&#10;     *         must be non-negative and no larger than&#10;     *         {@code src.length - offset}&#10;     *&#10;     * @return  This buffer&#10;     *&#10;     * @throws  BufferOverflowException&#10;     *          If there is insufficient space in this buffer&#10;     *&#10;     * @throws  IndexOutOfBoundsException&#10;     *          If the preconditions on the {@code offset} and {@code length}&#10;     *          parameters do not hold&#10;     *&#10;     * @throws  ReadOnlyBufferException&#10;     *          If this buffer is read-only&#10;     "
  ]
  node [
    id 639
    label "public final ByteBuffer put(byte[] src)"
    type "method"
    comment "&#10;     * Relative bulk <i>put</i> method&#38;nbsp;&#38;nbsp;<i>(optional operation)</i>.&#10;     *&#10;     * <p> This method transfers the entire content of the given source&#10;     * byte array into this buffer.  An invocation of this method of the&#10;     * form {@code dst.put(a)} behaves in exactly the same way as the&#10;     * invocation&#10;     *&#10;     * <pre>&#10;     *     dst.put(a, 0, a.length) </pre>&#10;     *&#10;     * @param   src&#10;     *          The source array&#10;     *&#10;     * @return  This buffer&#10;     *&#10;     * @throws  BufferOverflowException&#10;     *          If there is insufficient space in this buffer&#10;     *&#10;     * @throws  ReadOnlyBufferException&#10;     *          If this buffer is read-only&#10;     "
  ]
  node [
    id 640
    label "public ByteBuffer put(int index, byte[] src, int offset, int length)"
    type "method"
    comment "&#10;     * Absolute bulk <i>put</i> method&#38;nbsp;&#38;nbsp;<i>(optional operation)</i>.&#10;     *&#10;     * <p> This method transfers {@code length} bytes from the given&#10;     * array, starting at the given offset in the array and at the given index&#10;     * in this buffer.  The position of this buffer is unchanged.&#10;     *&#10;     * <p> An invocation of this method of the form&#10;     * <code>dst.put(index,&#38;nbsp;src,&#38;nbsp;offset,&#38;nbsp;length)</code>&#10;     * has exactly the same effect as the following loop except that it first&#10;     * checks the consistency of the supplied parameters and it is potentially&#10;     * much more efficient:&#10;     *&#10;     * <pre>{@code&#10;     *     for (int i = offset, j = index; i < offset + length; i++, j++)&#10;     *         dst.put(j, src[i]);&#10;     * }</pre>&#10;     *&#10;     * @param  index&#10;     *         The index in this buffer at which the first byte will be&#10;     *         written; must be non-negative and less than {@code limit()}&#10;     *&#10;     * @param  src&#10;     *         The array from which bytes are to be read&#10;     *&#10;     * @param  offset&#10;     *         The offset within the array of the first byte to be read;&#10;     *         must be non-negative and less than {@code src.length}&#10;     *&#10;     * @param  length&#10;     *         The number of bytes to be read from the given array;&#10;     *         must be non-negative and no larger than the smaller of&#10;     *         {@code limit() - index} and {@code src.length - offset}&#10;     *&#10;     * @return  This buffer&#10;     *&#10;     * @throws  IndexOutOfBoundsException&#10;     *          If the preconditions on the {@code index}, {@code offset}, and&#10;     *          {@code length} parameters do not hold&#10;     *&#10;     * @throws  ReadOnlyBufferException&#10;     *          If this buffer is read-only&#10;     *&#10;     * @since 13&#10;     "
  ]
  node [
    id 641
    label "public ByteBuffer put(int index, byte[] src)"
    type "method"
    comment "&#10;     * Absolute bulk <i>put</i> method&#38;nbsp;&#38;nbsp;<i>(optional operation)</i>.&#10;     *&#10;     * <p> This method copies bytes into this buffer from the given source&#10;     * array.  The position of this buffer is unchanged.  An invocation of this&#10;     * method of the form <code>dst.put(index,&#38;nbsp;src)</code>&#10;     * behaves in exactly the same way as the invocation:&#10;     *&#10;     * <pre>&#10;     *     dst.put(index, src, 0, src.length); </pre>&#10;     *&#10;     * @param  index&#10;     *         The index in this buffer at which the first byte will be&#10;     *         written; must be non-negative and less than {@code limit()}&#10;     *&#10;     * @param  src&#10;     *         The array from which bytes are to be read&#10;     *&#10;     * @return  This buffer&#10;     *&#10;     * @throws  IndexOutOfBoundsException&#10;     *          If {@code index} is negative, not smaller than {@code limit()},&#10;     *          or {@code limit() - index < src.length}&#10;     *&#10;     * @throws  ReadOnlyBufferException&#10;     *          If this buffer is read-only&#10;     *&#10;     * @since 13&#10;     "
  ]
  node [
    id 642
    label "public final boolean hasArray()"
    type "method"
    comment "&#10;     * Tells whether or not this buffer is backed by an accessible byte&#10;     * array.&#10;     *&#10;     * <p> If this method returns {@code true} then the {@link #array() array}&#10;     * and {@link #arrayOffset() arrayOffset} methods may safely be invoked.&#10;     * </p>&#10;     *&#10;     * @return  {@code true} if, and only if, this buffer&#10;     *          is backed by an array and is not read-only&#10;     "
  ]
  node [
    id 643
    label "array()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 644
    label "arrayOffset()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 645
    label "public final byte[] array()"
    type "method"
    comment "&#10;     * Returns the byte array that backs this&#10;     * buffer&#38;nbsp;&#38;nbsp;<i>(optional operation)</i>.&#10;     *&#10;     * <p> Modifications to this buffer's content will cause the returned&#10;     * array's content to be modified, and vice versa.&#10;     *&#10;     * <p> Invoke the {@link #hasArray hasArray} method before invoking this&#10;     * method in order to ensure that this buffer has an accessible backing&#10;     * array.  </p>&#10;     *&#10;     * @return  The array that backs this buffer&#10;     *&#10;     * @throws  ReadOnlyBufferException&#10;     *          If this buffer is backed by an array but is read-only&#10;     *&#10;     * @throws  UnsupportedOperationException&#10;     *          If this buffer is not backed by an accessible array&#10;     "
  ]
  node [
    id 646
    label "public final int arrayOffset()"
    type "method"
    comment "&#10;     * Returns the offset within this buffer's backing array of the first&#10;     * element of the buffer&#38;nbsp;&#38;nbsp;<i>(optional operation)</i>.&#10;     *&#10;     * <p> If this buffer is backed by an array then buffer position <i>p</i>&#10;     * corresponds to array index <i>p</i>&#38;nbsp;+&#38;nbsp;{@code arrayOffset()}.&#10;     *&#10;     * <p> Invoke the {@link #hasArray hasArray} method before invoking this&#10;     * method in order to ensure that this buffer has an accessible backing&#10;     * array.  </p>&#10;     *&#10;     * @return  The offset within this buffer's array&#10;     *          of the first element of the buffer&#10;     *&#10;     * @throws  ReadOnlyBufferException&#10;     *          If this buffer is backed by an array but is read-only&#10;     *&#10;     * @throws  UnsupportedOperationException&#10;     *          If this buffer is not backed by an accessible array&#10;     "
  ]
  node [
    id 647
    label "public Buffer rewind()"
    type "method"
    comment "&#10;     * Rewinds this buffer.  The position is set to zero and the mark is&#10;     * discarded.&#10;     *&#10;     * <p> Invoke this method before a sequence of channel-write or <i>get</i>&#10;     * operations, assuming that the limit has already been set&#10;     * appropriately.  For example:&#10;     *&#10;     * <blockquote><pre>&#10;     * out.write(buf);    // Write remaining data&#10;     * buf.rewind();      // Rewind buffer&#10;     * buf.get(array);    // Copy data into array</pre></blockquote>&#10;     *&#10;     * @return  This buffer&#10;     "
  ]
  node [
    id 648
    label "public abstract ByteBuffer compact()"
    type "method"
    comment " Android-changed: covariant overloads of *Buffer methods that return this."
  ]
  node [
    id 649
    label "public abstract boolean isDirect()"
    type "method"
    comment "&#10;     * Tells whether or not this buffer is&#10;     * <a href=&#34;ByteBuffer.html#direct&#34;><i>direct</i></a>.&#10;     *&#10;     * @return  {@code true} if, and only if, this buffer is direct&#10;     *&#10;     * @since 1.6&#10;     "
  ]
  node [
    id 650
    label "public boolean equals(Object ob)"
    type "method"
    comment "&#10;     * Tests this URI for equality with another object.&#10;     *&#10;     * <p> If the given object is not a URI then this method immediately&#10;     * returns {@code false}.&#10;     *&#10;     * <p> For two URIs to be considered equal requires that either both are&#10;     * opaque or both are hierarchical.  Their schemes must either both be&#10;     * undefined or else be equal without regard to case. Their fragments&#10;     * must either both be undefined or else be equal.&#10;     *&#10;     * <p> For two opaque URIs to be considered equal, their scheme-specific&#10;     * parts must be equal.&#10;     *&#10;     * <p> For two hierarchical URIs to be considered equal, their paths must&#10;     * be equal and their queries must either both be undefined or else be&#10;     * equal.  Their authorities must either both be undefined, or both be&#10;     * registry-based, or both be server-based.  If their authorities are&#10;     * defined and are registry-based, then they must be equal.  If their&#10;     * authorities are defined and are server-based, then their hosts must be&#10;     * equal without regard to case, their port numbers must be equal, and&#10;     * their user-information components must be equal.&#10;     *&#10;     * <p> When testing the user-information, path, query, fragment, authority,&#10;     * or scheme-specific parts of two URIs for equality, the raw forms rather&#10;     * than the encoded forms of these components are compared and the&#10;     * hexadecimal digits of escaped octets are compared without regard to&#10;     * case.&#10;     *&#10;     * <p> This method satisfies the general contract of the {@link&#10;     * java.lang.Object#equals(Object) Object.equals} method. </p>&#10;     *&#10;     * @param   ob   The object to which this object is to be compared&#10;     *&#10;     * @return  {@code true} if, and only if, the given object is a URI that&#10;     *          is identical to this URI&#10;     "
  ]
  node [
    id 651
    label "public int compareTo(ByteBuffer that)"
    type "method"
    comment "&#10;     * Compares this buffer to another.&#10;     *&#10;     * <p> Two byte buffers are compared by comparing their sequences of&#10;     * remaining elements lexicographically, without regard to the starting&#10;     * position of each sequence within its corresponding buffer.&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;     * Pairs of {@code byte} elements are compared as if by invoking&#10;     * {@link Byte#compare(byte,byte)}.&#10;&#10;     *&#10;     * <p> A byte buffer is not comparable to any other type of object.&#10;     *&#10;     * @return  A negative integer, zero, or a positive integer as this buffer&#10;     *          is less than, equal to, or greater than the given buffer&#10;     "
  ]
  node [
    id 652
    label "compare(byte"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 653
    label "public int mismatch(ByteBuffer that)"
    type "method"
    comment "&#10;     * Finds and returns the relative index of the first mismatch between this&#10;     * buffer and a given buffer.  The index is relative to the&#10;     * {@link #position() position} of each buffer and will be in the range of&#10;     * 0 (inclusive) up to the smaller of the {@link #remaining() remaining}&#10;     * elements in each buffer (exclusive).&#10;     *&#10;     * <p> If the two buffers share a common prefix then the returned index is&#10;     * the length of the common prefix and it follows that there is a mismatch&#10;     * between the two buffers at that index within the respective buffers.&#10;     * If one buffer is a proper prefix of the other then the returned index is&#10;     * the smaller of the remaining elements in each buffer, and it follows that&#10;     * the index is only valid for the buffer with the larger number of&#10;     * remaining elements.&#10;     * Otherwise, there is no mismatch.&#10;     *&#10;     * @param  that&#10;     *         The byte buffer to be tested for a mismatch with this buffer&#10;     *&#10;     * @return  The relative index of the first mismatch between this and the&#10;     *          given buffer, otherwise -1 if no mismatch.&#10;     *&#10;     * @since 11&#10;     "
  ]
  node [
    id 654
    label "position()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 655
    label "remaining()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 656
    label "public final ByteOrder order()"
    type "method"
    comment "&#10;     * Retrieves this buffer's byte order.&#10;     *&#10;     * <p> The byte order is used when reading or writing multibyte values, and&#10;     * when creating buffers that are views of this byte buffer.  The order of&#10;     * a newly-created byte buffer is always {@link ByteOrder#BIG_ENDIAN&#10;     * BIG_ENDIAN}.  </p>&#10;     *&#10;     * @return  This buffer's byte order&#10;     "
  ]
  node [
    id 657
    label "public final ByteBuffer order(ByteOrder bo)"
    type "method"
    comment "&#10;     * Modifies this buffer's byte order.&#10;     *&#10;     * @param  bo&#10;     *         The new byte order,&#10;     *         either {@link ByteOrder#BIG_ENDIAN BIG_ENDIAN}&#10;     *         or {@link ByteOrder#LITTLE_ENDIAN LITTLE_ENDIAN}&#10;     *&#10;     * @return  This buffer&#10;     "
  ]
  node [
    id 658
    label "public final int alignmentOffset(int index, int unitSize)"
    type "method"
    comment "&#10;     * Returns the memory address, pointing to the byte at the given index,&#10;     * modulo the given unit size.&#10;     *&#10;     * <p> The return value is non-negative in the range of {@code 0}&#10;     * (inclusive) up to {@code unitSize} (exclusive), with zero indicating&#10;     * that the address of the byte at the index is aligned for the unit size,&#10;     * and a positive value that the address is misaligned for the unit size.&#10;     * If the address of the byte at the index is misaligned, the return value&#10;     * represents how much the index should be adjusted to locate a byte at an&#10;     * aligned address.  Specifically, the index should either be decremented by&#10;     * the return value if the latter is not greater than {@code index}, or be&#10;     * incremented by the unit size minus the return value.  Therefore given&#10;     * <blockquote><pre>&#10;     * int value = alignmentOffset(index, unitSize)</pre></blockquote>&#10;     * then the identities&#10;     * <blockquote><pre>&#10;     * alignmentOffset(index - value, unitSize) == 0, value &#38;le; index</pre></blockquote>&#10;     * and&#10;     * <blockquote><pre>&#10;     * alignmentOffset(index + (unitSize - value), unitSize) == 0</pre></blockquote>&#10;     * must hold.&#10;     *&#10;     * @apiNote&#10;     * This method may be utilized to determine if unit size bytes from an&#10;     * index can be accessed atomically, if supported by the native platform.&#10;     *&#10;     * @implNote&#10;     * This implementation throws {@code UnsupportedOperationException} for&#10;     * non-direct buffers when the given unit size is greater than {@code 8}.&#10;     *&#10;     * @param  index&#10;     *         The index to query for alignment offset, must be non-negative, no&#10;     *         upper bounds check is performed&#10;     *&#10;     * @param  unitSize&#10;     *         The unit size in bytes, must be a power of {@code 2}&#10;     *&#10;     * @return  The indexed byte's memory address modulo the unit size&#10;     *&#10;     * @throws IllegalArgumentException&#10;     *         If the index is negative or the unit size is not a power of&#10;     *         {@code 2}&#10;     *&#10;     * @throws UnsupportedOperationException&#10;     *         If the native platform does not guarantee stable alignment offset&#10;     *         values for the given unit size when managing the memory regions&#10;     *         of buffers of the same kind as this buffer (direct or&#10;     *         non-direct).  For example, if garbage collection would result&#10;     *         in the moving of a memory region covered by a non-direct buffer&#10;     *         from one location to another and both locations have different&#10;     *         alignment characteristics.&#10;     *&#10;     * @see #alignedSlice(int)&#10;     * @since 9&#10;     "
  ]
  node [
    id 659
    label "public final ByteBuffer alignedSlice(int unitSize)"
    type "method"
    comment "&#10;     * Creates a new byte buffer whose content is a shared and aligned&#10;     * subsequence of this buffer's content.&#10;     *&#10;     * <p> The content of the new buffer will start at this buffer's current&#10;     * position rounded up to the index of the nearest aligned byte for the&#10;     * given unit size, and end at this buffer's limit rounded down to the index&#10;     * of the nearest aligned byte for the given unit size.&#10;     * If rounding results in out-of-bound values then the new buffer's capacity&#10;     * and limit will be zero.  If rounding is within bounds the following&#10;     * expressions will be true for a new buffer {@code nb} and unit size&#10;     * {@code unitSize}:&#10;     * <pre>{@code&#10;     * nb.alignmentOffset(0, unitSize) == 0&#10;     * nb.alignmentOffset(nb.limit(), unitSize) == 0&#10;     * }</pre>&#10;     *&#10;     * <p> Changes to this buffer's content will be visible in the new&#10;     * buffer, and vice versa; the two buffers' position, limit, and mark&#10;     * values will be independent.&#10;     *&#10;     * <p> The new buffer's position will be zero, its capacity and its limit&#10;     * will be the number of bytes remaining in this buffer or fewer subject to&#10;     * alignment, its mark will be undefined, and its byte order will be&#10;     * {@link ByteOrder#BIG_ENDIAN BIG_ENDIAN}.&#10;     *&#10;     * The new buffer will be direct if, and only if, this buffer is direct, and&#10;     * it will be read-only if, and only if, this buffer is read-only.  </p>&#10;     *&#10;     * @apiNote&#10;     * This method may be utilized to create a new buffer where unit size bytes&#10;     * from index, that is a multiple of the unit size, may be accessed&#10;     * atomically, if supported by the native platform.&#10;     *&#10;     * @implNote&#10;     * This implementation throws {@code UnsupportedOperationException} for&#10;     * non-direct buffers when the given unit size is greater than {@code 8}.&#10;     *&#10;     * @param  unitSize&#10;     *         The unit size in bytes, must be a power of {@code 2}&#10;     *&#10;     * @return  The new byte buffer&#10;     *&#10;     * @throws IllegalArgumentException&#10;     *         If the unit size not a power of {@code 2}&#10;     *&#10;     * @throws UnsupportedOperationException&#10;     *         If the native platform does not guarantee stable aligned slices&#10;     *         for the given unit size when managing the memory regions&#10;     *         of buffers of the same kind as this buffer (direct or&#10;     *         non-direct).  For example, if garbage collection would result&#10;     *         in the moving of a memory region covered by a non-direct buffer&#10;     *         from one location to another and both locations have different&#10;     *         alignment characteristics.&#10;     *&#10;     * @see #alignmentOffset(int, int)&#10;     * @see #slice()&#10;     * @since 9&#10;     "
  ]
  node [
    id 660
    label " abstract byte _get(int i)"
    type "method"
    comment " package-private"
  ]
  node [
    id 661
    label " abstract void _put(int i, byte b)"
    type "method"
    comment " package-private"
  ]
  node [
    id 662
    label "public abstract char getChar()"
    type "method"
    comment "&#10;     * Relative <i>get</i> method for reading a char value.&#10;     *&#10;     * <p> Reads the next two bytes at this buffer's current position,&#10;     * composing them into a char value according to the current byte order,&#10;     * and then increments the position by two.  </p>&#10;     *&#10;     * @return  The char value at the buffer's current position&#10;     *&#10;     * @throws  BufferUnderflowException&#10;     *          If there are fewer than two bytes&#10;     *          remaining in this buffer&#10;     "
  ]
  node [
    id 663
    label "public abstract ByteBuffer putChar(char value)"
    type "method"
    comment "&#10;     * Relative <i>put</i> method for writing a char&#10;     * value&#38;nbsp;&#38;nbsp;<i>(optional operation)</i>.&#10;     *&#10;     * <p> Writes two bytes containing the given char value, in the&#10;     * current byte order, into this buffer at the current position, and then&#10;     * increments the position by two.  </p>&#10;     *&#10;     * @param  value&#10;     *         The char value to be written&#10;     *&#10;     * @return  This buffer&#10;     *&#10;     * @throws  BufferOverflowException&#10;     *          If there are fewer than two bytes&#10;     *          remaining in this buffer&#10;     *&#10;     * @throws  ReadOnlyBufferException&#10;     *          If this buffer is read-only&#10;     "
  ]
  node [
    id 664
    label "public abstract char getChar(int index)"
    type "method"
    comment "&#10;     * Absolute <i>get</i> method for reading a char value.&#10;     *&#10;     * <p> Reads two bytes at the given index, composing them into a&#10;     * char value according to the current byte order.  </p>&#10;     *&#10;     * @param  index&#10;     *         The index from which the bytes will be read&#10;     *&#10;     * @return  The char value at the given index&#10;     *&#10;     * @throws  IndexOutOfBoundsException&#10;     *          If {@code index} is negative&#10;     *          or not smaller than the buffer's limit,&#10;     *          minus one&#10;     "
  ]
  node [
    id 665
    label " abstract char getCharUnchecked(int index)"
    type "method"
    comment " BEGIN Android-added: {get,put}*Unchecked() accessors."
  ]
  node [
    id 666
    label "public abstract ByteBuffer putChar(int index, char value)"
    type "method"
    comment "&#10;     * Absolute <i>put</i> method for writing a char&#10;     * value&#38;nbsp;&#38;nbsp;<i>(optional operation)</i>.&#10;     *&#10;     * <p> Writes two bytes containing the given char value, in the&#10;     * current byte order, into this buffer at the given index.  </p>&#10;     *&#10;     * @param  index&#10;     *         The index at which the bytes will be written&#10;     *&#10;     * @param  value&#10;     *         The char value to be written&#10;     *&#10;     * @return  This buffer&#10;     *&#10;     * @throws  IndexOutOfBoundsException&#10;     *          If {@code index} is negative&#10;     *          or not smaller than the buffer's limit,&#10;     *          minus one&#10;     *&#10;     * @throws  ReadOnlyBufferException&#10;     *          If this buffer is read-only&#10;     "
  ]
  node [
    id 667
    label " abstract void putCharUnchecked(int index, char value)"
    type "method"
    comment " BEGIN Android-added: {get,put}*Unchecked() accessors."
  ]
  node [
    id 668
    label "public abstract CharBuffer asCharBuffer()"
    type "method"
    comment "&#10;     * Creates a view of this byte buffer as a char buffer.&#10;     *&#10;     * <p> The content of the new buffer will start at this buffer's current&#10;     * position.  Changes to this buffer's content will be visible in the new&#10;     * buffer, and vice versa; the two buffers' position, limit, and mark&#10;     * values will be independent.&#10;     *&#10;     * <p> The new buffer's position will be zero, its capacity and its limit&#10;     * will be the number of bytes remaining in this buffer divided by&#10;     * two, its mark will be undefined, and its byte order will be that&#10;     * of the byte buffer at the moment the view is created.  The new buffer&#10;     * will be direct if, and only if, this buffer is direct, and it will be&#10;     * read-only if, and only if, this buffer is read-only.  </p>&#10;     *&#10;     * @return  A new char buffer&#10;     "
  ]
  node [
    id 669
    label "public abstract short getShort()"
    type "method"
    comment "&#10;     * Relative <i>get</i> method for reading a short value.&#10;     *&#10;     * <p> Reads the next two bytes at this buffer's current position,&#10;     * composing them into a short value according to the current byte order,&#10;     * and then increments the position by two.  </p>&#10;     *&#10;     * @return  The short value at the buffer's current position&#10;     *&#10;     * @throws  BufferUnderflowException&#10;     *          If there are fewer than two bytes&#10;     *          remaining in this buffer&#10;     "
  ]
  node [
    id 670
    label "public abstract ByteBuffer putShort(short value)"
    type "method"
    comment "&#10;     * Relative <i>put</i> method for writing a short&#10;     * value&#38;nbsp;&#38;nbsp;<i>(optional operation)</i>.&#10;     *&#10;     * <p> Writes two bytes containing the given short value, in the&#10;     * current byte order, into this buffer at the current position, and then&#10;     * increments the position by two.  </p>&#10;     *&#10;     * @param  value&#10;     *         The short value to be written&#10;     *&#10;     * @return  This buffer&#10;     *&#10;     * @throws  BufferOverflowException&#10;     *          If there are fewer than two bytes&#10;     *          remaining in this buffer&#10;     *&#10;     * @throws  ReadOnlyBufferException&#10;     *          If this buffer is read-only&#10;     "
  ]
  node [
    id 671
    label "public abstract short getShort(int index)"
    type "method"
    comment "&#10;     * Absolute <i>get</i> method for reading a short value.&#10;     *&#10;     * <p> Reads two bytes at the given index, composing them into a&#10;     * short value according to the current byte order.  </p>&#10;     *&#10;     * @param  index&#10;     *         The index from which the bytes will be read&#10;     *&#10;     * @return  The short value at the given index&#10;     *&#10;     * @throws  IndexOutOfBoundsException&#10;     *          If {@code index} is negative&#10;     *          or not smaller than the buffer's limit,&#10;     *          minus one&#10;     "
  ]
  node [
    id 672
    label " abstract short getShortUnchecked(int index)"
    type "method"
    comment " BEGIN Android-added: {get,put}*Unchecked() accessors."
  ]
  node [
    id 673
    label "public abstract ByteBuffer putShort(int index, short value)"
    type "method"
    comment "&#10;     * Absolute <i>put</i> method for writing a short&#10;     * value&#38;nbsp;&#38;nbsp;<i>(optional operation)</i>.&#10;     *&#10;     * <p> Writes two bytes containing the given short value, in the&#10;     * current byte order, into this buffer at the given index.  </p>&#10;     *&#10;     * @param  index&#10;     *         The index at which the bytes will be written&#10;     *&#10;     * @param  value&#10;     *         The short value to be written&#10;     *&#10;     * @return  This buffer&#10;     *&#10;     * @throws  IndexOutOfBoundsException&#10;     *          If {@code index} is negative&#10;     *          or not smaller than the buffer's limit,&#10;     *          minus one&#10;     *&#10;     * @throws  ReadOnlyBufferException&#10;     *          If this buffer is read-only&#10;     "
  ]
  node [
    id 674
    label " abstract void putShortUnchecked(int index, short value)"
    type "method"
    comment " BEGIN Android-added: {get,put}*Unchecked() accessors."
  ]
  node [
    id 675
    label "public abstract ShortBuffer asShortBuffer()"
    type "method"
    comment "&#10;     * Creates a view of this byte buffer as a short buffer.&#10;     *&#10;     * <p> The content of the new buffer will start at this buffer's current&#10;     * position.  Changes to this buffer's content will be visible in the new&#10;     * buffer, and vice versa; the two buffers' position, limit, and mark&#10;     * values will be independent.&#10;     *&#10;     * <p> The new buffer's position will be zero, its capacity and its limit&#10;     * will be the number of bytes remaining in this buffer divided by&#10;     * two, its mark will be undefined, and its byte order will be that&#10;     * of the byte buffer at the moment the view is created.  The new buffer&#10;     * will be direct if, and only if, this buffer is direct, and it will be&#10;     * read-only if, and only if, this buffer is read-only.  </p>&#10;     *&#10;     * @return  A new short buffer&#10;     "
  ]
  node [
    id 676
    label "public abstract int getInt()"
    type "method"
    comment "&#10;     * Relative <i>get</i> method for reading an int value.&#10;     *&#10;     * <p> Reads the next four bytes at this buffer's current position,&#10;     * composing them into an int value according to the current byte order,&#10;     * and then increments the position by four.  </p>&#10;     *&#10;     * @return  The int value at the buffer's current position&#10;     *&#10;     * @throws  BufferUnderflowException&#10;     *          If there are fewer than four bytes&#10;     *          remaining in this buffer&#10;     "
  ]
  node [
    id 677
    label "public abstract ByteBuffer putInt(int value)"
    type "method"
    comment "&#10;     * Relative <i>put</i> method for writing an int&#10;     * value&#38;nbsp;&#38;nbsp;<i>(optional operation)</i>.&#10;     *&#10;     * <p> Writes four bytes containing the given int value, in the&#10;     * current byte order, into this buffer at the current position, and then&#10;     * increments the position by four.  </p>&#10;     *&#10;     * @param  value&#10;     *         The int value to be written&#10;     *&#10;     * @return  This buffer&#10;     *&#10;     * @throws  BufferOverflowException&#10;     *          If there are fewer than four bytes&#10;     *          remaining in this buffer&#10;     *&#10;     * @throws  ReadOnlyBufferException&#10;     *          If this buffer is read-only&#10;     "
  ]
  node [
    id 678
    label "public abstract int getInt(int index)"
    type "method"
    comment "&#10;     * Absolute <i>get</i> method for reading an int value.&#10;     *&#10;     * <p> Reads four bytes at the given index, composing them into a&#10;     * int value according to the current byte order.  </p>&#10;     *&#10;     * @param  index&#10;     *         The index from which the bytes will be read&#10;     *&#10;     * @return  The int value at the given index&#10;     *&#10;     * @throws  IndexOutOfBoundsException&#10;     *          If {@code index} is negative&#10;     *          or not smaller than the buffer's limit,&#10;     *          minus three&#10;     "
  ]
  node [
    id 679
    label " abstract int getIntUnchecked(int index)"
    type "method"
    comment " BEGIN Android-added: {get,put}*Unchecked() accessors."
  ]
  node [
    id 680
    label "public abstract ByteBuffer putInt(int index, int value)"
    type "method"
    comment "&#10;     * Absolute <i>put</i> method for writing an int&#10;     * value&#38;nbsp;&#38;nbsp;<i>(optional operation)</i>.&#10;     *&#10;     * <p> Writes four bytes containing the given int value, in the&#10;     * current byte order, into this buffer at the given index.  </p>&#10;     *&#10;     * @param  index&#10;     *         The index at which the bytes will be written&#10;     *&#10;     * @param  value&#10;     *         The int value to be written&#10;     *&#10;     * @return  This buffer&#10;     *&#10;     * @throws  IndexOutOfBoundsException&#10;     *          If {@code index} is negative&#10;     *          or not smaller than the buffer's limit,&#10;     *          minus three&#10;     *&#10;     * @throws  ReadOnlyBufferException&#10;     *          If this buffer is read-only&#10;     "
  ]
  node [
    id 681
    label " abstract void putIntUnchecked(int index, int value)"
    type "method"
    comment " BEGIN Android-added: {get,put}*Unchecked() accessors."
  ]
  node [
    id 682
    label "public abstract IntBuffer asIntBuffer()"
    type "method"
    comment "&#10;     * Creates a view of this byte buffer as an int buffer.&#10;     *&#10;     * <p> The content of the new buffer will start at this buffer's current&#10;     * position.  Changes to this buffer's content will be visible in the new&#10;     * buffer, and vice versa; the two buffers' position, limit, and mark&#10;     * values will be independent.&#10;     *&#10;     * <p> The new buffer's position will be zero, its capacity and its limit&#10;     * will be the number of bytes remaining in this buffer divided by&#10;     * four, its mark will be undefined, and its byte order will be that&#10;     * of the byte buffer at the moment the view is created.  The new buffer&#10;     * will be direct if, and only if, this buffer is direct, and it will be&#10;     * read-only if, and only if, this buffer is read-only.  </p>&#10;     *&#10;     * @return  A new int buffer&#10;     "
  ]
  node [
    id 683
    label "public abstract long getLong()"
    type "method"
    comment "&#10;     * Relative <i>get</i> method for reading a long value.&#10;     *&#10;     * <p> Reads the next eight bytes at this buffer's current position,&#10;     * composing them into a long value according to the current byte order,&#10;     * and then increments the position by eight.  </p>&#10;     *&#10;     * @return  The long value at the buffer's current position&#10;     *&#10;     * @throws  BufferUnderflowException&#10;     *          If there are fewer than eight bytes&#10;     *          remaining in this buffer&#10;     "
  ]
  node [
    id 684
    label "public abstract ByteBuffer putLong(long value)"
    type "method"
    comment "&#10;     * Relative <i>put</i> method for writing a long&#10;     * value&#38;nbsp;&#38;nbsp;<i>(optional operation)</i>.&#10;     *&#10;     * <p> Writes eight bytes containing the given long value, in the&#10;     * current byte order, into this buffer at the current position, and then&#10;     * increments the position by eight.  </p>&#10;     *&#10;     * @param  value&#10;     *         The long value to be written&#10;     *&#10;     * @return  This buffer&#10;     *&#10;     * @throws  BufferOverflowException&#10;     *          If there are fewer than eight bytes&#10;     *          remaining in this buffer&#10;     *&#10;     * @throws  ReadOnlyBufferException&#10;     *          If this buffer is read-only&#10;     "
  ]
  node [
    id 685
    label "public abstract long getLong(int index)"
    type "method"
    comment "&#10;     * Absolute <i>get</i> method for reading a long value.&#10;     *&#10;     * <p> Reads eight bytes at the given index, composing them into a&#10;     * long value according to the current byte order.  </p>&#10;     *&#10;     * @param  index&#10;     *         The index from which the bytes will be read&#10;     *&#10;     * @return  The long value at the given index&#10;     *&#10;     * @throws  IndexOutOfBoundsException&#10;     *          If {@code index} is negative&#10;     *          or not smaller than the buffer's limit,&#10;     *          minus seven&#10;     "
  ]
  node [
    id 686
    label " abstract long getLongUnchecked(int index)"
    type "method"
    comment " BEGIN Android-added: {get,put}*Unchecked() accessors."
  ]
  node [
    id 687
    label "public abstract ByteBuffer putLong(int index, long value)"
    type "method"
    comment "&#10;     * Absolute <i>put</i> method for writing a long&#10;     * value&#38;nbsp;&#38;nbsp;<i>(optional operation)</i>.&#10;     *&#10;     * <p> Writes eight bytes containing the given long value, in the&#10;     * current byte order, into this buffer at the given index.  </p>&#10;     *&#10;     * @param  index&#10;     *         The index at which the bytes will be written&#10;     *&#10;     * @param  value&#10;     *         The long value to be written&#10;     *&#10;     * @return  This buffer&#10;     *&#10;     * @throws  IndexOutOfBoundsException&#10;     *          If {@code index} is negative&#10;     *          or not smaller than the buffer's limit,&#10;     *          minus seven&#10;     *&#10;     * @throws  ReadOnlyBufferException&#10;     *          If this buffer is read-only&#10;     "
  ]
  node [
    id 688
    label " abstract void putLongUnchecked(int index, long value)"
    type "method"
    comment " BEGIN Android-added: {get,put}*Unchecked() accessors."
  ]
  node [
    id 689
    label "public abstract LongBuffer asLongBuffer()"
    type "method"
    comment "&#10;     * Creates a view of this byte buffer as a long buffer.&#10;     *&#10;     * <p> The content of the new buffer will start at this buffer's current&#10;     * position.  Changes to this buffer's content will be visible in the new&#10;     * buffer, and vice versa; the two buffers' position, limit, and mark&#10;     * values will be independent.&#10;     *&#10;     * <p> The new buffer's position will be zero, its capacity and its limit&#10;     * will be the number of bytes remaining in this buffer divided by&#10;     * eight, its mark will be undefined, and its byte order will be that&#10;     * of the byte buffer at the moment the view is created.  The new buffer&#10;     * will be direct if, and only if, this buffer is direct, and it will be&#10;     * read-only if, and only if, this buffer is read-only.  </p>&#10;     *&#10;     * @return  A new long buffer&#10;     "
  ]
  node [
    id 690
    label "public abstract float getFloat()"
    type "method"
    comment "&#10;     * Relative <i>get</i> method for reading a float value.&#10;     *&#10;     * <p> Reads the next four bytes at this buffer's current position,&#10;     * composing them into a float value according to the current byte order,&#10;     * and then increments the position by four.  </p>&#10;     *&#10;     * @return  The float value at the buffer's current position&#10;     *&#10;     * @throws  BufferUnderflowException&#10;     *          If there are fewer than four bytes&#10;     *          remaining in this buffer&#10;     "
  ]
  node [
    id 691
    label "public abstract ByteBuffer putFloat(float value)"
    type "method"
    comment "&#10;     * Relative <i>put</i> method for writing a float&#10;     * value&#38;nbsp;&#38;nbsp;<i>(optional operation)</i>.&#10;     *&#10;     * <p> Writes four bytes containing the given float value, in the&#10;     * current byte order, into this buffer at the current position, and then&#10;     * increments the position by four.  </p>&#10;     *&#10;     * @param  value&#10;     *         The float value to be written&#10;     *&#10;     * @return  This buffer&#10;     *&#10;     * @throws  BufferOverflowException&#10;     *          If there are fewer than four bytes&#10;     *          remaining in this buffer&#10;     *&#10;     * @throws  ReadOnlyBufferException&#10;     *          If this buffer is read-only&#10;     "
  ]
  node [
    id 692
    label "public abstract float getFloat(int index)"
    type "method"
    comment "&#10;     * Absolute <i>get</i> method for reading a float value.&#10;     *&#10;     * <p> Reads four bytes at the given index, composing them into a&#10;     * float value according to the current byte order.  </p>&#10;     *&#10;     * @param  index&#10;     *         The index from which the bytes will be read&#10;     *&#10;     * @return  The float value at the given index&#10;     *&#10;     * @throws  IndexOutOfBoundsException&#10;     *          If {@code index} is negative&#10;     *          or not smaller than the buffer's limit,&#10;     *          minus three&#10;     "
  ]
  node [
    id 693
    label " abstract float getFloatUnchecked(int index)"
    type "method"
    comment " BEGIN Android-added: {get,put}*Unchecked() accessors."
  ]
  node [
    id 694
    label "public abstract ByteBuffer putFloat(int index, float value)"
    type "method"
    comment "&#10;     * Absolute <i>put</i> method for writing a float&#10;     * value&#38;nbsp;&#38;nbsp;<i>(optional operation)</i>.&#10;     *&#10;     * <p> Writes four bytes containing the given float value, in the&#10;     * current byte order, into this buffer at the given index.  </p>&#10;     *&#10;     * @param  index&#10;     *         The index at which the bytes will be written&#10;     *&#10;     * @param  value&#10;     *         The float value to be written&#10;     *&#10;     * @return  This buffer&#10;     *&#10;     * @throws  IndexOutOfBoundsException&#10;     *          If {@code index} is negative&#10;     *          or not smaller than the buffer's limit,&#10;     *          minus three&#10;     *&#10;     * @throws  ReadOnlyBufferException&#10;     *          If this buffer is read-only&#10;     "
  ]
  node [
    id 695
    label " abstract void putFloatUnchecked(int index, float value)"
    type "method"
    comment " BEGIN Android-added: {get,put}*Unchecked() accessors."
  ]
  node [
    id 696
    label "public abstract FloatBuffer asFloatBuffer()"
    type "method"
    comment "&#10;     * Creates a view of this byte buffer as a float buffer.&#10;     *&#10;     * <p> The content of the new buffer will start at this buffer's current&#10;     * position.  Changes to this buffer's content will be visible in the new&#10;     * buffer, and vice versa; the two buffers' position, limit, and mark&#10;     * values will be independent.&#10;     *&#10;     * <p> The new buffer's position will be zero, its capacity and its limit&#10;     * will be the number of bytes remaining in this buffer divided by&#10;     * four, its mark will be undefined, and its byte order will be that&#10;     * of the byte buffer at the moment the view is created.  The new buffer&#10;     * will be direct if, and only if, this buffer is direct, and it will be&#10;     * read-only if, and only if, this buffer is read-only.  </p>&#10;     *&#10;     * @return  A new float buffer&#10;     "
  ]
  node [
    id 697
    label "public abstract double getDouble()"
    type "method"
    comment "&#10;     * Relative <i>get</i> method for reading a double value.&#10;     *&#10;     * <p> Reads the next eight bytes at this buffer's current position,&#10;     * composing them into a double value according to the current byte order,&#10;     * and then increments the position by eight.  </p>&#10;     *&#10;     * @return  The double value at the buffer's current position&#10;     *&#10;     * @throws  BufferUnderflowException&#10;     *          If there are fewer than eight bytes&#10;     *          remaining in this buffer&#10;     "
  ]
  node [
    id 698
    label "public abstract ByteBuffer putDouble(double value)"
    type "method"
    comment "&#10;     * Relative <i>put</i> method for writing a double&#10;     * value&#38;nbsp;&#38;nbsp;<i>(optional operation)</i>.&#10;     *&#10;     * <p> Writes eight bytes containing the given double value, in the&#10;     * current byte order, into this buffer at the current position, and then&#10;     * increments the position by eight.  </p>&#10;     *&#10;     * @param  value&#10;     *         The double value to be written&#10;     *&#10;     * @return  This buffer&#10;     *&#10;     * @throws  BufferOverflowException&#10;     *          If there are fewer than eight bytes&#10;     *          remaining in this buffer&#10;     *&#10;     * @throws  ReadOnlyBufferException&#10;     *          If this buffer is read-only&#10;     "
  ]
  node [
    id 699
    label "public abstract double getDouble(int index)"
    type "method"
    comment "&#10;     * Absolute <i>get</i> method for reading a double value.&#10;     *&#10;     * <p> Reads eight bytes at the given index, composing them into a&#10;     * double value according to the current byte order.  </p>&#10;     *&#10;     * @param  index&#10;     *         The index from which the bytes will be read&#10;     *&#10;     * @return  The double value at the given index&#10;     *&#10;     * @throws  IndexOutOfBoundsException&#10;     *          If {@code index} is negative&#10;     *          or not smaller than the buffer's limit,&#10;     *          minus seven&#10;     "
  ]
  node [
    id 700
    label " abstract double getDoubleUnchecked(int index)"
    type "method"
    comment " BEGIN Android-added: {get,put}*Unchecked() accessors."
  ]
  node [
    id 701
    label "public abstract ByteBuffer putDouble(int index, double value)"
    type "method"
    comment "&#10;     * Absolute <i>put</i> method for writing a double&#10;     * value&#38;nbsp;&#38;nbsp;<i>(optional operation)</i>.&#10;     *&#10;     * <p> Writes eight bytes containing the given double value, in the&#10;     * current byte order, into this buffer at the given index.  </p>&#10;     *&#10;     * @param  index&#10;     *         The index at which the bytes will be written&#10;     *&#10;     * @param  value&#10;     *         The double value to be written&#10;     *&#10;     * @return  This buffer&#10;     *&#10;     * @throws  IndexOutOfBoundsException&#10;     *          If {@code index} is negative&#10;     *          or not smaller than the buffer's limit,&#10;     *          minus seven&#10;     *&#10;     * @throws  ReadOnlyBufferException&#10;     *          If this buffer is read-only&#10;     "
  ]
  node [
    id 702
    label " abstract void putDoubleUnchecked(int index, double value)"
    type "method"
    comment " BEGIN Android-added: {get,put}*Unchecked() accessors."
  ]
  node [
    id 703
    label "public abstract DoubleBuffer asDoubleBuffer()"
    type "method"
    comment "&#10;     * Creates a view of this byte buffer as a double buffer.&#10;     *&#10;     * <p> The content of the new buffer will start at this buffer's current&#10;     * position.  Changes to this buffer's content will be visible in the new&#10;     * buffer, and vice versa; the two buffers' position, limit, and mark&#10;     * values will be independent.&#10;     *&#10;     * <p> The new buffer's position will be zero, its capacity and its limit&#10;     * will be the number of bytes remaining in this buffer divided by&#10;     * eight, its mark will be undefined, and its byte order will be that&#10;     * of the byte buffer at the moment the view is created.  The new buffer&#10;     * will be direct if, and only if, this buffer is direct, and it will be&#10;     * read-only if, and only if, this buffer is read-only.  </p>&#10;     *&#10;     * @return  A new double buffer&#10;     "
  ]
  node [
    id 704
    label "public final int remaining()"
    type "method"
    comment "&#10;     * Returns the number of elements between the current position and the&#10;     * limit.&#10;     *&#10;     * @return  The number of elements remaining in this buffer&#10;     "
  ]
  node [
    id 705
    label "public final boolean hasRemaining()"
    type "method"
    comment "&#10;     * Tells whether there are any elements between the current position and&#10;     * the limit.&#10;     *&#10;     * @return  {@code true} if, and only if, there is at least one element&#10;     *          remaining in this buffer&#10;     "
  ]
  node [
    id 706
    label "public abstract boolean isReadOnly()"
    type "method"
    comment "&#10;     * Tells whether this file store is read-only. A file store is read-only if&#10;     * it does not support write operations or other changes to files. Any&#10;     * attempt to create a file, open an existing file for writing etc. causes&#10;     * an {@code IOException} to be thrown.&#10;     *&#10;     * @return  {@code true} if, and only if, this file store is read-only&#10;     "
  ]
  node [
    id 707
    label "public abstract boolean hasArray()"
    type "method"
    comment "&#10;     * Tells whether or not this buffer is backed by an accessible&#10;     * array.&#10;     *&#10;     * <p> If this method returns {@code true} then the {@link #array() array}&#10;     * and {@link #arrayOffset() arrayOffset} methods may safely be invoked.&#10;     * </p>&#10;     *&#10;     * @return  {@code true} if, and only if, this buffer&#10;     *          is backed by an array and is not read-only&#10;     *&#10;     * @since 1.6&#10;     "
  ]
  node [
    id 708
    label "public abstract Object array()"
    type "method"
    comment "&#10;     * Returns the array that backs this&#10;     * buffer&#38;nbsp;&#38;nbsp;<i>(optional operation)</i>.&#10;     *&#10;     * <p> This method is intended to allow array-backed buffers to be&#10;     * passed to native code more efficiently. Concrete subclasses&#10;     * provide more strongly-typed return values for this method.&#10;     *&#10;     * <p> Modifications to this buffer's content will cause the returned&#10;     * array's content to be modified, and vice versa.&#10;     *&#10;     * <p> Invoke the {@link #hasArray hasArray} method before invoking this&#10;     * method in order to ensure that this buffer has an accessible backing&#10;     * array.  </p>&#10;     *&#10;     * @return  The array that backs this buffer&#10;     *&#10;     * @throws  ReadOnlyBufferException&#10;     *          If this buffer is backed by an array but is read-only&#10;     *&#10;     * @throws  UnsupportedOperationException&#10;     *          If this buffer is not backed by an accessible array&#10;     *&#10;     * @since 1.6&#10;     "
  ]
  node [
    id 709
    label "public abstract int arrayOffset()"
    type "method"
    comment "&#10;     * Returns the offset within this buffer's backing array of the first&#10;     * element of the buffer&#38;nbsp;&#38;nbsp;<i>(optional operation)</i>.&#10;     *&#10;     * <p> If this buffer is backed by an array then buffer position <i>p</i>&#10;     * corresponds to array index <i>p</i>&#38;nbsp;+&#38;nbsp;{@code arrayOffset()}.&#10;     *&#10;     * <p> Invoke the {@link #hasArray hasArray} method before invoking this&#10;     * method in order to ensure that this buffer has an accessible backing&#10;     * array.  </p>&#10;     *&#10;     * @return  The offset within this buffer's array&#10;     *          of the first element of the buffer&#10;     *&#10;     * @throws  ReadOnlyBufferException&#10;     *          If this buffer is backed by an array but is read-only&#10;     *&#10;     * @throws  UnsupportedOperationException&#10;     *          If this buffer is not backed by an accessible array&#10;     *&#10;     * @since 1.6&#10;     "
  ]
  node [
    id 710
    label "public abstract Buffer slice()"
    type "method"
    comment "&#10;     * Creates a new buffer whose content is a shared subsequence of&#10;     * this buffer's content.&#10;     *&#10;     * <p> The content of the new buffer will start at this buffer's current&#10;     * position.  Changes to this buffer's content will be visible in the new&#10;     * buffer, and vice versa; the two buffers' position, limit, and mark&#10;     * values will be independent.&#10;     *&#10;     * <p> The new buffer's position will be zero, its capacity and its limit&#10;     * will be the number of elements remaining in this buffer, its mark will be&#10;     * undefined. The new buffer will be direct if, and only if, this buffer is&#10;     * direct, and it will be read-only if, and only if, this buffer is&#10;     * read-only.  </p>&#10;     *&#10;     * @return  The new buffer&#10;     *&#10;     * @since 9&#10;     "
  ]
  node [
    id 711
    label "public abstract Buffer slice(int index, int length)"
    type "method"
    comment "&#10;     * Creates a new buffer whose content is a shared subsequence of&#10;     * this buffer's content.&#10;     *&#10;     * <p> The content of the new buffer will start at position {@code index}&#10;     * in this buffer, and will contain {@code length} elements. Changes to&#10;     * this buffer's content will be visible in the new buffer, and vice versa;&#10;     * the two buffers' position, limit, and mark values will be independent.&#10;     *&#10;     * <p> The new buffer's position will be zero, its capacity and its limit&#10;     * will be {@code length}, its mark will be undefined. The new buffer will&#10;     * be direct if, and only if, this buffer is direct, and it will be&#10;     * read-only if, and only if, this buffer is read-only.  </p>&#10;     *&#10;     * @param   index&#10;     *          The position in this buffer at which the content of the new&#10;     *          buffer will start; must be non-negative and no larger than&#10;     *          {@link #limit() limit()}&#10;     *&#10;     * @param   length&#10;     *          The number of elements the new buffer will contain; must be&#10;     *          non-negative and no larger than {@code limit() - index}&#10;     *&#10;     * @return  The new buffer&#10;     *&#10;     * @throws  IndexOutOfBoundsException&#10;     *          If {@code index} is negative or greater than {@code limit()},&#10;     *          {@code length} is negative, or {@code length > limit() - index}&#10;     *&#10;     * @since 13&#10;     "
  ]
  node [
    id 712
    label "public abstract Buffer duplicate()"
    type "method"
    comment "&#10;     * Creates a new buffer that shares this buffer's content.&#10;     *&#10;     * <p> The content of the new buffer will be that of this buffer.  Changes&#10;     * to this buffer's content will be visible in the new buffer, and vice&#10;     * versa; the two buffers' position, limit, and mark values will be&#10;     * independent.&#10;     *&#10;     * <p> The new buffer's capacity, limit, position and mark values will be&#10;     * identical to those of this buffer. The new buffer will be direct if, and&#10;     * only if, this buffer is direct, and it will be read-only if, and only if,&#10;     * this buffer is read-only.  </p>&#10;     *&#10;     * @return  The new buffer&#10;     *&#10;     * @since 9&#10;     "
  ]
  node [
    id 713
    label " abstract Object base()"
    type "method"
    comment "&#10;     *&#10;     * @return the base reference, paired with the address&#10;     * field, which in combination can be used for unsafe access into a heap&#10;     * buffer or direct byte buffer (and views of).&#10;     "
  ]
  node [
    id 714
    label " final int nextGetIndex()"
    type "method"
    comment "&#10;     * Checks the current position against the limit, throwing a {@link&#10;     * BufferUnderflowException} if it is not smaller than the limit, and then&#10;     * increments the position.&#10;     *&#10;     * @return  The current position value, before it is incremented&#10;     "
  ]
  node [
    id 715
    label " final int nextPutIndex()"
    type "method"
    comment "&#10;     * Checks the current position against the limit, throwing a {@link&#10;     * BufferOverflowException} if it is not smaller than the limit, and then&#10;     * increments the position.&#10;     *&#10;     * @return  The current position value, before it is incremented&#10;     "
  ]
  node [
    id 716
    label " final int checkIndex(int i)"
    type "method"
    comment "&#10;     * Checks the given index against the limit, throwing an {@link&#10;     * IndexOutOfBoundsException} if it is not smaller than the limit&#10;     * or is smaller than zero.&#10;     "
  ]
  node [
    id 717
    label "IndexOutOfBoundsException"
  ]
  node [
    id 718
    label "public final CoderResult flush(ByteBuffer out)"
    type "method"
    comment "&#10;     * Flushes this encoder.&#10;     *&#10;     * <p> Some encoders maintain internal state and may need to write some&#10;     * final bytes to the output buffer once the overall input sequence has&#10;     * been read.&#10;     *&#10;     * <p> Any additional output is written to the output buffer beginning at&#10;     * its current position.  At most {@link Buffer#remaining out.remaining()}&#10;     * bytes will be written.  The buffer's position will be advanced&#10;     * appropriately, but its mark and limit will not be modified.&#10;     *&#10;     * <p> If this method completes successfully then it returns {@link&#10;     * CoderResult#UNDERFLOW}.  If there is insufficient room in the output&#10;     * buffer then it returns {@link CoderResult#OVERFLOW}.  If this happens&#10;     * then this method must be invoked again, with an output buffer that has&#10;     * more room, in order to complete the current <a href=&#34;#steps&#34;>encoding&#10;     * operation</a>.&#10;     *&#10;     * <p> If this encoder has already been flushed then invoking this method&#10;     * has no effect.&#10;     *&#10;     * <p> This method invokes the {@link #implFlush implFlush} method to&#10;     * perform the actual flushing operation.  </p>&#10;     *&#10;     * @param  out&#10;     *         The output byte buffer&#10;     *&#10;     * @return  A coder-result object, either {@link CoderResult#UNDERFLOW} or&#10;     *          {@link CoderResult#OVERFLOW}&#10;     *&#10;     * @throws  IllegalStateException&#10;     *          If the previous step of the current encoding operation was an&#10;     *          invocation neither of the {@link #flush flush} method nor of&#10;     *          the three-argument {@link&#10;     *          #encode(CharBuffer,ByteBuffer,boolean) encode} method&#10;     *          with a value of {@code true} for the {@code endOfInput}&#10;     *          parameter&#10;     "
  ]
  node [
    id 719
    label "encode(CharBuffer"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 720
    label "flush"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 721
    label "implFlush"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 722
    label "protected CoderResult implFlush(ByteBuffer out)"
    type "method"
    comment "&#10;     * Flushes this encoder.&#10;     *&#10;     * <p> The default implementation of this method does nothing, and always&#10;     * returns {@link CoderResult#UNDERFLOW}.  This method should be overridden&#10;     * by encoders that may need to write final bytes to the output buffer&#10;     * once the entire input sequence has been read. </p>&#10;     *&#10;     * @param  out&#10;     *         The output byte buffer&#10;     *&#10;     * @return  A coder-result object, either {@link CoderResult#UNDERFLOW} or&#10;     *          {@link CoderResult#OVERFLOW}&#10;     "
  ]
  node [
    id 723
    label "public final CharsetEncoder reset()"
    type "method"
    comment "&#10;     * Resets this encoder, clearing any internal state.&#10;     *&#10;     * <p> This method resets charset-independent state and also invokes the&#10;     * {@link #implReset() implReset} method in order to perform any&#10;     * charset-specific reset actions.  </p>&#10;     *&#10;     * @return  This encoder&#10;     *&#10;     "
  ]
  node [
    id 724
    label "implReset()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 725
    label "protected void implReset()"
    type "method"
    comment "&#10;     * Resets this decoder, clearing any charset-specific internal state.&#10;     *&#10;     * <p> The default implementation of this method does nothing.  This method&#10;     * should be overridden by decoders that maintain internal state.  </p>&#10;     "
  ]
  node [
    id 726
    label "protected abstract CoderResult encodeLoop(CharBuffer in, ByteBuffer out)"
    type "method"
    comment "&#10;     * Encodes one or more characters into one or more bytes.&#10;     *&#10;     * <p> This method encapsulates the basic encoding loop, encoding as many&#10;     * characters as possible until it either runs out of input, runs out of room&#10;     * in the output buffer, or encounters an encoding error.  This method is&#10;     * invoked by the {@link #encode encode} method, which handles result&#10;     * interpretation and error recovery.&#10;     *&#10;     * <p> The buffers are read from, and written to, starting at their current&#10;     * positions.  At most {@link Buffer#remaining in.remaining()} characters&#10;     * will be read, and at most {@link Buffer#remaining out.remaining()}&#10;     * bytes will be written.  The buffers' positions will be advanced to&#10;     * reflect the characters read and the bytes written, but their marks and&#10;     * limits will not be modified.&#10;     *&#10;     * <p> This method returns a {@link CoderResult} object to describe its&#10;     * reason for termination, in the same manner as the {@link #encode encode}&#10;     * method.  Most implementations of this method will handle encoding errors&#10;     * by returning an appropriate result object for interpretation by the&#10;     * {@link #encode encode} method.  An optimized implementation may instead&#10;     * examine the relevant error action and implement that action itself.&#10;     *&#10;     * <p> An implementation of this method may perform arbitrary lookahead by&#10;     * returning {@link CoderResult#UNDERFLOW} until it receives sufficient&#10;     * input.  </p>&#10;     *&#10;     * @param  in&#10;     *         The input character buffer&#10;     *&#10;     * @param  out&#10;     *         The output byte buffer&#10;     *&#10;     * @return  A coder-result object describing the reason for termination&#10;     "
  ]
  node [
    id 727
    label "encode"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 728
    label "public final ByteBuffer encode(CharBuffer in) throws CharacterCodingException"
    type "method"
    comment "&#10;     * Convenience method that encodes the remaining content of a single input&#10;     * character buffer into a newly-allocated byte buffer.&#10;     *&#10;     * <p> This method implements an entire <a href=&#34;#steps&#34;>encoding&#10;     * operation</a>; that is, it resets this encoder, then it encodes the&#10;     * characters in the given character buffer, and finally it flushes this&#10;     * encoder.  This method should therefore not be invoked if an encoding&#10;     * operation is already in progress.  </p>&#10;     *&#10;     * @param  in&#10;     *         The input character buffer&#10;     *&#10;     * @return A newly-allocated byte buffer containing the result of the&#10;     *         encoding operation.  The buffer's position will be zero and its&#10;     *         limit will follow the last byte written.&#10;     *&#10;     * @throws  IllegalStateException&#10;     *          If an encoding operation is already in progress&#10;     *&#10;     * @throws  MalformedInputException&#10;     *          If the character sequence starting at the input buffer's current&#10;     *          position is not a legal sixteen-bit Unicode sequence and the current malformed-input action&#10;     *          is {@link CodingErrorAction#REPORT}&#10;     *&#10;     * @throws  UnmappableCharacterException&#10;     *          If the character sequence starting at the input buffer's current&#10;     *          position cannot be mapped to an equivalent byte sequence and&#10;     *          the current unmappable-character action is {@link&#10;     *          CodingErrorAction#REPORT}&#10;     *&#10;     * @throws  CoderMalfunctionError&#10;     *          If an invocation of the encodeLoop method threw&#10;     *          an unexpected exception&#10;     *&#10;     * @throws  NullPointerException if input buffer is null&#10;     "
  ]
  node [
    id 729
    label "public boolean canEncode(char c)"
    type "method"
    comment "&#10;     * Tells whether or not this encoder can encode the given character.&#10;     *&#10;     * <p> This method returns {@code false} if the given character is a&#10;     * surrogate character; such characters can be interpreted only when they&#10;     * are members of a pair consisting of a high surrogate followed by a low&#10;     * surrogate.  The {@link #canEncode(java.lang.CharSequence)&#10;     * canEncode(CharSequence)} method may be used to test whether or not a&#10;     * character sequence can be encoded.&#10;     *&#10;     * <p> This method may modify this encoder's state; it should therefore not&#10;     * be invoked if an <a href=&#34;#steps&#34;>encoding operation</a> is already in&#10;     * progress.&#10;     *&#10;     * <p> The default implementation of this method is not very efficient; it&#10;     * should generally be overridden to improve performance.  </p>&#10;     *&#10;     * @param   c&#10;     *          The given character&#10;     *&#10;     * @return  {@code true} if, and only if, this encoder can encode&#10;     *          the given character&#10;     *&#10;     * @throws  IllegalStateException&#10;     *          If an encoding operation is already in progress&#10;     "
  ]
  node [
    id 730
    label "canEncode(java.lang.CharSequence)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 731
    label "public boolean canEncode(CharSequence cs)"
    type "method"
    comment "&#10;     * Tells whether or not this encoder can encode the given character&#10;     * sequence.&#10;     *&#10;     * <p> If this method returns {@code false} for a particular character&#10;     * sequence then more information about why the sequence cannot be encoded&#10;     * may be obtained by performing a full <a href=&#34;#steps&#34;>encoding&#10;     * operation</a>.&#10;     *&#10;     * <p> This method may modify this encoder's state; it should therefore not&#10;     * be invoked if an encoding operation is already in progress.&#10;     *&#10;     * <p> The default implementation of this method is not very efficient; it&#10;     * should generally be overridden to improve performance.  </p>&#10;     *&#10;     * @param   cs&#10;     *          The given character sequence&#10;     *&#10;     * @return  {@code true} if, and only if, this encoder can encode&#10;     *          the given character without throwing any exceptions and without&#10;     *          performing any replacements&#10;     *&#10;     * @throws  IllegalStateException&#10;     *          If an encoding operation is already in progress&#10;     "
  ]
  node [
    id 732
    label "public byte[] getBytes(Charset charset)"
    type "method"
    comment "&#10;     * Encodes this {@code String} into a sequence of bytes using the given&#10;     * {@linkplain java.nio.charset.Charset charset}, storing the result into a&#10;     * new byte array.&#10;     *&#10;     * <p> This method always replaces malformed-input and unmappable-character&#10;     * sequences with this charset's default replacement byte array.  The&#10;     * {@link java.nio.charset.CharsetEncoder} class should be used when more&#10;     * control over the encoding process is required.&#10;     *&#10;     * @param  charset&#10;     *         The {@linkplain java.nio.charset.Charset} to be used to encode&#10;     *         the {@code String}&#10;     *&#10;     * @return  The resultant byte array&#10;     *&#10;     * @since  1.6&#10;     "
  ]
  node [
    id 733
    label "public byte[] getBytes()"
    type "method"
    comment "&#10;     * Encodes this {@code String} into a sequence of bytes using the&#10;     * platform's default charset, storing the result into a new byte array.&#10;     *&#10;     * <p> The behavior of this method when this string cannot be encoded in&#10;     * the default charset is unspecified.  The {@link&#10;     * java.nio.charset.CharsetEncoder} class should be used when more control&#10;     * over the encoding process is required.&#10;     *&#10;     * @return  The resultant byte array&#10;     *&#10;     * @since      1.1&#10;     "
  ]
  node [
    id 734
    label "public boolean equals(Object anObject)"
    type "method"
    comment "&#10;     * Compares this string to the specified object.  The result is {@code&#10;     * true} if and only if the argument is not {@code null} and is a {@code&#10;     * String} object that represents the same sequence of characters as this&#10;     * object.&#10;     *&#10;     * <p>For finer-grained String comparison, refer to&#10;     * {@link java.text.Collator}.&#10;     *&#10;     * @param  anObject&#10;     *         The object to compare this {@code String} against&#10;     *&#10;     * @return  {@code true} if the given object represents a {@code String}&#10;     *          equivalent to this string, {@code false} otherwise&#10;     *&#10;     * @see  #compareTo(String)&#10;     * @see  #equalsIgnoreCase(String)&#10;     "
  ]
  node [
    id 735
    label "java.text.Collator"
    type "class"
    comment ""
  ]
  node [
    id 736
    label "public static synchronized Collator getInstance()"
    type "method"
    comment "&#10;     * Gets the Collator for the current default locale.&#10;     * The default locale is determined by java.util.Locale.getDefault.&#10;     * @return the Collator for the default locale.(for example, en_US)&#10;     * @see java.util.Locale#getDefault&#10;     "
  ]
  node [
    id 737
    label "public static Collator getInstance(Locale desiredLocale)"
    type "method"
    comment "&#10;     * Gets the Collator for the desired locale.&#10;     * @param desiredLocale the desired locale.&#10;     * @return the Collator for the desired locale.&#10;     * @see java.util.Locale&#10;     * @see java.util.ResourceBundle&#10;     "
  ]
  node [
    id 738
    label "public abstract int compare(String source, String target)"
    type "method"
    comment "&#10;     * Compares the source string to the target string according to the&#10;     * collation rules for this Collator.  Returns an integer less than,&#10;     * equal to or greater than zero depending on whether the source String is&#10;     * less than, equal to or greater than the target string.  See the Collator&#10;     * class description for an example of use.&#10;     * <p>&#10;     * For a one time comparison, this method has the best performance. If a&#10;     * given String will be involved in multiple comparisons, CollationKey.compareTo&#10;     * has the best performance. See the Collator class description for an example&#10;     * using CollationKeys.&#10;     * @param source the source string.&#10;     * @param target the target string.&#10;     * @return Returns an integer value. Value is less than zero if source is less than&#10;     * target, value is zero if source and target are equal, value is greater than zero&#10;     * if source is greater than target.&#10;     * @see java.text.CollationKey&#10;     * @see java.text.Collator#getCollationKey&#10;     "
  ]
  node [
    id 739
    label "public int compare(Object o1, Object o2)"
    type "method"
    comment "&#10;     * Compares its two arguments for order.  Returns a negative integer,&#10;     * zero, or a positive integer as the first argument is less than, equal&#10;     * to, or greater than the second.&#10;     * <p>&#10;     * This implementation merely returns&#10;     *  {@code  compare((String)o1, (String)o2) }.&#10;     *&#10;     * @return a negative integer, zero, or a positive integer as the&#10;     *         first argument is less than, equal to, or greater than the&#10;     *         second.&#10;     * @throws    ClassCastException the arguments cannot be cast to Strings.&#10;     * @see java.util.Comparator&#10;     * @since   1.2&#10;     "
  ]
  node [
    id 740
    label "public abstract CollationKey getCollationKey(String source)"
    type "method"
    comment "&#10;     * Transforms the String into a series of bits that can be compared bitwise&#10;     * to other CollationKeys. CollationKeys provide better performance than&#10;     * Collator.compare when Strings are involved in multiple comparisons.&#10;     * See the Collator class description for an example using CollationKeys.&#10;     * @param source the string to be transformed into a collation key.&#10;     * @return the CollationKey for the given String based on this Collator's collation&#10;     * rules. If the source String is null, a null CollationKey is returned.&#10;     * @see java.text.CollationKey&#10;     * @see java.text.Collator#compare&#10;     "
  ]
  node [
    id 741
    label "public boolean equals(String source, String target)"
    type "method"
    comment "&#10;     * Convenience method for comparing the equality of two strings based on&#10;     * this Collator's collation rules.&#10;     * @param source the source string to be compared with.&#10;     * @param target the target string to be compared with.&#10;     * @return true if the strings are equal according to the collation&#10;     * rules.  false, otherwise.&#10;     * @see java.text.Collator#compare&#10;     "
  ]
  node [
    id 742
    label "public synchronized int getStrength()"
    type "method"
    comment "&#10;     * Returns this Collator's strength property.  The strength property determines&#10;     * the minimum level of difference considered significant during comparison.&#10;     * See the Collator class description for an example of use.&#10;     * @return this Collator's current strength property.&#10;     * @see java.text.Collator#setStrength&#10;     * @see java.text.Collator#PRIMARY&#10;     * @see java.text.Collator#SECONDARY&#10;     * @see java.text.Collator#TERTIARY&#10;     * @see java.text.Collator#IDENTICAL&#10;     "
  ]
  node [
    id 743
    label "public synchronized void setStrength(int newStrength)"
    type "method"
    comment "&#10;     * Sets this Collator's strength property.  The strength property determines&#10;     * the minimum level of difference considered significant during comparison.&#10;     * See the Collator class description for an example of use.&#10;     * @param newStrength  the new strength value.&#10;     * @see java.text.Collator#getStrength&#10;     * @see java.text.Collator#PRIMARY&#10;     * @see java.text.Collator#SECONDARY&#10;     * @see java.text.Collator#TERTIARY&#10;     * @see java.text.Collator#IDENTICAL&#10;     * @throws     IllegalArgumentException If the new strength value is not one of&#10;     * PRIMARY, SECONDARY, TERTIARY or IDENTICAL.&#10;     "
  ]
  node [
    id 744
    label "public synchronized int getDecomposition()"
    type "method"
    comment "&#10;     * Get the decomposition mode of this Collator. Decomposition mode&#10;     * determines how Unicode composed characters are handled. Adjusting&#10;     * decomposition mode allows the user to select between faster and more&#10;     * complete collation behavior.&#10;     * <p>The three values for decomposition mode are:&#10;     * <UL>&#10;     * <LI>NO_DECOMPOSITION,&#10;     * <LI>CANONICAL_DECOMPOSITION&#10;     * <LI>FULL_DECOMPOSITION.&#10;     * </UL>&#10;     * See the documentation for these three constants for a description&#10;     * of their meaning.&#10;     * @return the decomposition mode&#10;     * @see java.text.Collator#setDecomposition&#10;     * @see java.text.Collator#NO_DECOMPOSITION&#10;     * @see java.text.Collator#CANONICAL_DECOMPOSITION&#10;     * @see java.text.Collator#FULL_DECOMPOSITION&#10;     "
  ]
  node [
    id 745
    label "public synchronized void setDecomposition(int decompositionMode)"
    type "method"
    comment "&#10;     * Set the decomposition mode of this Collator. See getDecomposition&#10;     * for a description of decomposition mode.&#10;     * @param decompositionMode  the new decomposition mode.&#10;     * @see java.text.Collator#getDecomposition&#10;     * @see java.text.Collator#NO_DECOMPOSITION&#10;     * @see java.text.Collator#CANONICAL_DECOMPOSITION&#10;     * @see java.text.Collator#FULL_DECOMPOSITION&#10;     * @throws    IllegalArgumentException If the given value is not a valid decomposition&#10;     * mode.&#10;     "
  ]
  node [
    id 746
    label "public static synchronized Locale[] getAvailableLocales()"
    type "method"
    comment "&#10;     * Returns an array of all locales for which the&#10;     * {@code getInstance} methods of this class can return&#10;     * localized instances.&#10;     *&#10;     * @return An array of locales for which localized&#10;     *         {@code Collator} instances are available.&#10;     "
  ]
  node [
    id 747
    label "private int decompositionMode_Java_ICU(int mode)"
    type "method"
    comment " BEGIN Android-added: conversion method for decompositionMode constants."
  ]
  node [
    id 748
    label "public Object clone()"
    type "method"
    comment "&#10;     * Overrides Cloneable.&#10;     "
  ]
  node [
    id 749
    label "public boolean equals(Object that)"
    type "method"
    comment "&#10;     * Compares the equality of two Collators.&#10;     * @param that the Collator to be compared with this.&#10;     * @return true if this Collator is the same as that Collator;&#10;     * false otherwise.&#10;     "
  ]
  node [
    id 750
    label "public abstract int hashCode()"
    type "method"
    comment "&#10;     * Generates the hash code for this Collator.&#10;     "
  ]
  node [
    id 751
    label "public boolean contentEquals(StringBuffer sb)"
    type "method"
    comment "&#10;     * Compares this string to the specified {@code StringBuffer}.  The result&#10;     * is {@code true} if and only if this {@code String} represents the same&#10;     * sequence of characters as the specified {@code StringBuffer}. This method&#10;     * synchronizes on the {@code StringBuffer}.&#10;     *&#10;     * <p>For finer-grained String comparison, refer to&#10;     * {@link java.text.Collator}.&#10;     *&#10;     * @param  sb&#10;     *         The {@code StringBuffer} to compare this {@code String} against&#10;     *&#10;     * @return  {@code true} if this {@code String} represents the same&#10;     *          sequence of characters as the specified {@code StringBuffer},&#10;     *          {@code false} otherwise&#10;     *&#10;     * @since  1.4&#10;     "
  ]
  node [
    id 752
    label "public boolean contentEquals(CharSequence cs)"
    type "method"
    comment "&#10;     * Compares this string to the specified {@code CharSequence}.  The&#10;     * result is {@code true} if and only if this {@code String} represents the&#10;     * same sequence of char values as the specified sequence. Note that if the&#10;     * {@code CharSequence} is a {@code StringBuffer} then the method&#10;     * synchronizes on it.&#10;     *&#10;     * <p>For finer-grained String comparison, refer to&#10;     * {@link java.text.Collator}.&#10;     *&#10;     * @param  cs&#10;     *         The sequence to compare this {@code String} against&#10;     *&#10;     * @return  {@code true} if this {@code String} represents the same&#10;     *          sequence of char values as the specified sequence, {@code&#10;     *          false} otherwise&#10;     *&#10;     * @since  1.5&#10;     "
  ]
  node [
    id 753
    label "public boolean equalsIgnoreCase(String anotherString)"
    type "method"
    comment "&#10;     * Compares this {@code String} to another {@code String}, ignoring case&#10;     * considerations.  Two strings are considered equal ignoring case if they&#10;     * are of the same length and corresponding characters in the two strings&#10;     * are equal ignoring case.&#10;     *&#10;     * <p> Two characters {@code c1} and {@code c2} are considered the same&#10;     * ignoring case if at least one of the following is true:&#10;     * <ul>&#10;     *   <li> The two characters are the same (as compared by the&#10;     *        {@code ==} operator)&#10;     *   <li> Calling {@code Character.toLowerCase(Character.toUpperCase(char))}&#10;     *        on each character produces the same result&#10;     * </ul>&#10;     *&#10;     * <p>Note that this method does <em>not</em> take locale into account, and&#10;     * will result in unsatisfactory results for certain locales.  The&#10;     * {@link java.text.Collator} class provides locale-sensitive comparison.&#10;     *&#10;     * @param  anotherString&#10;     *         The {@code String} to compare this {@code String} against&#10;     *&#10;     * @return  {@code true} if the argument is not {@code null} and it&#10;     *          represents an equivalent {@code String} ignoring case; {@code&#10;     *          false} otherwise&#10;     *&#10;     * @see  #equals(Object)&#10;     "
  ]
  node [
    id 754
    label "public native int compareTo(String anotherString)"
    type "method"
    comment "&#10;    public int compareTo(String anotherString) {&#10;        byte v1[] = value;&#10;        byte v2[] = anotherString.value;&#10;        if (coder() == anotherString.coder()) {&#10;            return isLatin1() ? StringLatin1.compareTo(v1, v2)&#10;                              : StringUTF16.compareTo(v1, v2);&#10;        }&#10;        return isLatin1() ? StringLatin1.compareToUTF16(v1, v2)&#10;                          : StringUTF16.compareToLatin1(v1, v2);&#10;     }&#10;    "
  ]
  node [
    id 755
    label "public int compareToIgnoreCase(String str)"
    type "method"
    comment "&#10;     * Compares two strings lexicographically, ignoring case&#10;     * differences. This method returns an integer whose sign is that of&#10;     * calling {@code compareTo} with normalized versions of the strings&#10;     * where case differences have been eliminated by calling&#10;     * {@code Character.toLowerCase(Character.toUpperCase(character))} on&#10;     * each character.&#10;     * <p>&#10;     * Note that this method does <em>not</em> take locale into account,&#10;     * and will result in an unsatisfactory ordering for certain locales.&#10;     * The {@link java.text.Collator} class provides locale-sensitive comparison.&#10;     *&#10;     * @param   str   the {@code String} to be compared.&#10;     * @return  a negative integer, zero, or a positive integer as the&#10;     *          specified String is greater than, equal to, or less&#10;     *          than this String, ignoring case considerations.&#10;     * @see     java.text.Collator&#10;     * @since   1.2&#10;     "
  ]
  node [
    id 756
    label "public boolean regionMatches(int toffset, String other, int ooffset, int len)"
    type "method"
    comment "&#10;     * Tests if two string regions are equal.&#10;     * <p>&#10;     * A substring of this {@code String} object is compared to a substring&#10;     * of the argument other. The result is true if these substrings&#10;     * represent identical character sequences. The substring of this&#10;     * {@code String} object to be compared begins at index {@code toffset}&#10;     * and has length {@code len}. The substring of other to be compared&#10;     * begins at index {@code ooffset} and has length {@code len}. The&#10;     * result is {@code false} if and only if at least one of the following&#10;     * is true:&#10;     * <ul><li>{@code toffset} is negative.&#10;     * <li>{@code ooffset} is negative.&#10;     * <li>{@code toffset+len} is greater than the length of this&#10;     * {@code String} object.&#10;     * <li>{@code ooffset+len} is greater than the length of the other&#10;     * argument.&#10;     * <li>There is some nonnegative integer <i>k</i> less than {@code len}&#10;     * such that:&#10;     * {@code this.charAt(toffset + }<i>k</i>{@code ) != other.charAt(ooffset + }&#10;     * <i>k</i>{@code )}&#10;     * </ul>&#10;     *&#10;     * <p>Note that this method does <em>not</em> take locale into account.  The&#10;     * {@link java.text.Collator} class provides locale-sensitive comparison.&#10;     *&#10;     * @param   toffset   the starting offset of the subregion in this string.&#10;     * @param   other     the string argument.&#10;     * @param   ooffset   the starting offset of the subregion in the string&#10;     *                    argument.&#10;     * @param   len       the number of characters to compare.&#10;     * @return  {@code true} if the specified subregion of this string&#10;     *          exactly matches the specified subregion of the string argument;&#10;     *          {@code false} otherwise.&#10;     "
  ]
  node [
    id 757
    label "public boolean regionMatches(boolean ignoreCase, int toffset, String other, int ooffset, int len)"
    type "method"
    comment "&#10;     * Tests if two string regions are equal.&#10;     * <p>&#10;     * A substring of this {@code String} object is compared to a substring&#10;     * of the argument {@code other}. The result is {@code true} if these&#10;     * substrings represent character sequences that are the same, ignoring&#10;     * case if and only if {@code ignoreCase} is true. The substring of&#10;     * this {@code String} object to be compared begins at index&#10;     * {@code toffset} and has length {@code len}. The substring of&#10;     * {@code other} to be compared begins at index {@code ooffset} and&#10;     * has length {@code len}. The result is {@code false} if and only if&#10;     * at least one of the following is true:&#10;     * <ul><li>{@code toffset} is negative.&#10;     * <li>{@code ooffset} is negative.&#10;     * <li>{@code toffset+len} is greater than the length of this&#10;     * {@code String} object.&#10;     * <li>{@code ooffset+len} is greater than the length of the other&#10;     * argument.&#10;     * <li>{@code ignoreCase} is {@code false} and there is some nonnegative&#10;     * integer <i>k</i> less than {@code len} such that:&#10;     * <blockquote><pre>&#10;     * this.charAt(toffset+k) != other.charAt(ooffset+k)&#10;     * </pre></blockquote>&#10;     * <li>{@code ignoreCase} is {@code true} and there is some nonnegative&#10;     * integer <i>k</i> less than {@code len} such that:&#10;     * <blockquote><pre>&#10;     * Character.toLowerCase(Character.toUpperCase(this.charAt(toffset+k))) !=&#10;     Character.toLowerCase(Character.toUpperCase(other.charAt(ooffset+k)))&#10;     * </pre></blockquote>&#10;     * </ul>&#10;     *&#10;     * <p>Note that this method does <em>not</em> take locale into account,&#10;     * and will result in unsatisfactory results for certain locales when&#10;     * {@code ignoreCase} is {@code true}.  The {@link java.text.Collator} class&#10;     * provides locale-sensitive comparison.&#10;     *&#10;     * @param   ignoreCase   if {@code true}, ignore case when comparing&#10;     *                       characters.&#10;     * @param   toffset      the starting offset of the subregion in this&#10;     *                       string.&#10;     * @param   other        the string argument.&#10;     * @param   ooffset      the starting offset of the subregion in the string&#10;     *                       argument.&#10;     * @param   len          the number of characters to compare.&#10;     * @return  {@code true} if the specified subregion of this string&#10;     *          matches the specified subregion of the string argument;&#10;     *          {@code false} otherwise. Whether the matching is exact&#10;     *          or case insensitive depends on the {@code ignoreCase}&#10;     *          argument.&#10;     "
  ]
  node [
    id 758
    label "public boolean startsWith(String prefix, int toffset)"
    type "method"
    comment "&#10;     * Tests if the substring of this string beginning at the&#10;     * specified index starts with the specified prefix.&#10;     *&#10;     * @param   prefix    the prefix.&#10;     * @param   toffset   where to begin looking in this string.&#10;     * @return  {@code true} if the character sequence represented by the&#10;     *          argument is a prefix of the substring of this object starting&#10;     *          at index {@code toffset}; {@code false} otherwise.&#10;     *          The result is {@code false} if {@code toffset} is&#10;     *          negative or greater than the length of this&#10;     *          {@code String} object; otherwise the result is the same&#10;     *          as the result of the expression&#10;     *          <pre>&#10;     *          this.substring(toffset).startsWith(prefix)&#10;     *          </pre>&#10;     "
  ]
  node [
    id 759
    label "public boolean startsWith(String prefix)"
    type "method"
    comment "&#10;     * Tests if this string starts with the specified prefix.&#10;     *&#10;     * @param   prefix   the prefix.&#10;     * @return  {@code true} if the character sequence represented by the&#10;     *          argument is a prefix of the character sequence represented by&#10;     *          this string; {@code false} otherwise.&#10;     *          Note also that {@code true} will be returned if the&#10;     *          argument is an empty string or is equal to this&#10;     *          {@code String} object as determined by the&#10;     *          {@link #equals(Object)} method.&#10;     * @since   1.0&#10;     "
  ]
  node [
    id 760
    label "public boolean endsWith(String suffix)"
    type "method"
    comment "&#10;     * Tests if this string ends with the specified suffix.&#10;     *&#10;     * @param   suffix   the suffix.&#10;     * @return  {@code true} if the character sequence represented by the&#10;     *          argument is a suffix of the character sequence represented by&#10;     *          this object; {@code false} otherwise. Note that the&#10;     *          result will be {@code true} if the argument is the&#10;     *          empty string or is equal to this {@code String} object&#10;     *          as determined by the {@link #equals(Object)} method.&#10;     "
  ]
  node [
    id 761
    label "public int indexOf(int ch)"
    type "method"
    comment "&#10;     * Returns the index within this string of the first occurrence of&#10;     * the specified character. If a character with value&#10;     * {@code ch} occurs in the character sequence represented by&#10;     * this {@code String} object, then the index (in Unicode&#10;     * code units) of the first such occurrence is returned. For&#10;     * values of {@code ch} in the range from 0 to 0xFFFF&#10;     * (inclusive), this is the smallest value <i>k</i> such that:&#10;     * <blockquote><pre>&#10;     * this.charAt(<i>k</i>) == ch&#10;     * </pre></blockquote>&#10;     * is true. For other values of {@code ch}, it is the&#10;     * smallest value <i>k</i> such that:&#10;     * <blockquote><pre>&#10;     * this.codePointAt(<i>k</i>) == ch&#10;     * </pre></blockquote>&#10;     * is true. In either case, if no such character occurs in this&#10;     * string, then {@code -1} is returned.&#10;     *&#10;     * @param   ch   a character (Unicode code point).&#10;     * @return  the index of the first occurrence of the character in the&#10;     *          character sequence represented by this object, or&#10;     *          {@code -1} if the character does not occur.&#10;     "
  ]
  node [
    id 762
    label "public int indexOf(int ch, int fromIndex)"
    type "method"
    comment "&#10;     * Returns the index within this string of the first occurrence of the&#10;     * specified character, starting the search at the specified index.&#10;     * <p>&#10;     * If a character with value {@code ch} occurs in the&#10;     * character sequence represented by this {@code String}&#10;     * object at an index no smaller than {@code fromIndex}, then&#10;     * the index of the first such occurrence is returned. For values&#10;     * of {@code ch} in the range from 0 to 0xFFFF (inclusive),&#10;     * this is the smallest value <i>k</i> such that:&#10;     * <blockquote><pre>&#10;     * (this.charAt(<i>k</i>) == ch) {@code &#38;&#38;} (<i>k</i> &#38;gt;= fromIndex)&#10;     * </pre></blockquote>&#10;     * is true. For other values of {@code ch}, it is the&#10;     * smallest value <i>k</i> such that:&#10;     * <blockquote><pre>&#10;     * (this.codePointAt(<i>k</i>) == ch) {@code &#38;&#38;} (<i>k</i> &#38;gt;= fromIndex)&#10;     * </pre></blockquote>&#10;     * is true. In either case, if no such character occurs in this&#10;     * string at or after position {@code fromIndex}, then&#10;     * {@code -1} is returned.&#10;     *&#10;     * <p>&#10;     * There is no restriction on the value of {@code fromIndex}. If it&#10;     * is negative, it has the same effect as if it were zero: this entire&#10;     * string may be searched. If it is greater than the length of this&#10;     * string, it has the same effect as if it were equal to the length of&#10;     * this string: {@code -1} is returned.&#10;     *&#10;     * <p>All indices are specified in {@code char} values&#10;     * (Unicode code units).&#10;     *&#10;     * @param   ch          a character (Unicode code point).&#10;     * @param   fromIndex   the index to start the search from.&#10;     * @return  the index of the first occurrence of the character in the&#10;     *          character sequence represented by this object that is greater&#10;     *          than or equal to {@code fromIndex}, or {@code -1}&#10;     *          if the character does not occur.&#10;     "
  ]
  node [
    id 763
    label "private int indexOfSupplementary(int ch, int fromIndex)"
    type "method"
    comment "&#10;     * Handles (rare) calls of indexOf with a supplementary character.&#10;     "
  ]
  node [
    id 764
    label "public int lastIndexOf(int ch)"
    type "method"
    comment "&#10;     * Returns the index within this string of the last occurrence of&#10;     * the specified character. For values of {@code ch} in the&#10;     * range from 0 to 0xFFFF (inclusive), the index (in Unicode code&#10;     * units) returned is the largest value <i>k</i> such that:&#10;     * <blockquote><pre>&#10;     * this.charAt(<i>k</i>) == ch&#10;     * </pre></blockquote>&#10;     * is true. For other values of {@code ch}, it is the&#10;     * largest value <i>k</i> such that:&#10;     * <blockquote><pre>&#10;     * this.codePointAt(<i>k</i>) == ch&#10;     * </pre></blockquote>&#10;     * is true.  In either case, if no such character occurs in this&#10;     * string, then {@code -1} is returned.  The&#10;     * {@code String} is searched backwards starting at the last&#10;     * character.&#10;     *&#10;     * @param   ch   a character (Unicode code point).&#10;     * @return  the index of the last occurrence of the character in the&#10;     *          character sequence represented by this object, or&#10;     *          {@code -1} if the character does not occur.&#10;     "
  ]
  node [
    id 765
    label "public int lastIndexOf(int ch, int fromIndex)"
    type "method"
    comment "&#10;     * Returns the index within this string of the last occurrence of&#10;     * the specified character, searching backward starting at the&#10;     * specified index. For values of {@code ch} in the range&#10;     * from 0 to 0xFFFF (inclusive), the index returned is the largest&#10;     * value <i>k</i> such that:&#10;     * <blockquote><pre>&#10;     * (this.charAt(<i>k</i>) == ch) {@code &#38;&#38;} (<i>k</i> &#38;lt;= fromIndex)&#10;     * </pre></blockquote>&#10;     * is true. For other values of {@code ch}, it is the&#10;     * largest value <i>k</i> such that:&#10;     * <blockquote><pre>&#10;     * (this.codePointAt(<i>k</i>) == ch) {@code &#38;&#38;} (<i>k</i> &#38;lt;= fromIndex)&#10;     * </pre></blockquote>&#10;     * is true. In either case, if no such character occurs in this&#10;     * string at or before position {@code fromIndex}, then&#10;     * {@code -1} is returned.&#10;     *&#10;     * <p>All indices are specified in {@code char} values&#10;     * (Unicode code units).&#10;     *&#10;     * @param   ch          a character (Unicode code point).&#10;     * @param   fromIndex   the index to start the search from. There is no&#10;     *          restriction on the value of {@code fromIndex}. If it is&#10;     *          greater than or equal to the length of this string, it has&#10;     *          the same effect as if it were equal to one less than the&#10;     *          length of this string: this entire string may be searched.&#10;     *          If it is negative, it has the same effect as if it were -1:&#10;     *          -1 is returned.&#10;     * @return  the index of the last occurrence of the character in the&#10;     *          character sequence represented by this object that is less&#10;     *          than or equal to {@code fromIndex}, or {@code -1}&#10;     *          if the character does not occur before that point.&#10;     "
  ]
  node [
    id 766
    label "private int lastIndexOfSupplementary(int ch, int fromIndex)"
    type "method"
    comment "&#10;     * Handles (rare) calls of lastIndexOf with a supplementary character.&#10;     "
  ]
  node [
    id 767
    label "public int indexOf(String str)"
    type "method"
    comment "&#10;     * Returns the index within this string of the first occurrence of the&#10;     * specified substring.&#10;     *&#10;     * <p>The returned index is the smallest value {@code k} for which:&#10;     * <pre>{@code&#10;     * this.startsWith(str, k)&#10;     * }</pre>&#10;     * If no such value of {@code k} exists, then {@code -1} is returned.&#10;     *&#10;     * @param   str   the substring to search for.&#10;     * @return  the index of the first occurrence of the specified substring,&#10;     *          or {@code -1} if there is no such occurrence.&#10;     "
  ]
  node [
    id 768
    label "public int indexOf(String str, int fromIndex)"
    type "method"
    comment "&#10;     * Returns the index within this string of the first occurrence of the&#10;     * specified substring, starting at the specified index.&#10;     *&#10;     * <p>The returned index is the smallest value {@code k} for which:&#10;     * <pre>{@code&#10;     *     k >= Math.min(fromIndex, this.length()) &#38;&#38;&#10;     *                   this.startsWith(str, k)&#10;     * }</pre>&#10;     * If no such value of {@code k} exists, then {@code -1} is returned.&#10;     *&#10;     * @param   str         the substring to search for.&#10;     * @param   fromIndex   the index from which to start the search.&#10;     * @return  the index of the first occurrence of the specified substring,&#10;     *          starting at the specified index,&#10;     *          or {@code -1} if there is no such occurrence.&#10;     "
  ]
  node [
    id 769
    label "private static int indexOf(String source, String target, int fromIndex)"
    type "method"
    comment "&#10;     * The source is the string being searched, and the target is the string being searched for.&#10;     *&#10;     * @param   source       the characters being searched.&#10;     * @param   target       the characters being searched for.&#10;     * @param   fromIndex    the index to begin searching from.&#10;     "
  ]
  node [
    id 770
    label " static int indexOf(byte[] src, byte srcCoder, int srcCount, String tgtStr, int fromIndex)"
    type "method"
    comment "&#10;     * Code shared by String and AbstractStringBuilder to do searches. The&#10;     * source is the character array being searched, and the target&#10;     * is the string being searched for.&#10;     *&#10;     * @param   src       the characters being searched.&#10;     * @param   srcCoder  the coder of the source string.&#10;     * @param   srcCount  length of the source string.&#10;     * @param   tgtStr    the characters being searched for.&#10;     * @param   fromIndex the index to begin searching from.&#10;     "
  ]
  node [
    id 771
    label "public int lastIndexOf(String str)"
    type "method"
    comment "&#10;     * Returns the index within this string of the last occurrence of the&#10;     * specified substring.  The last occurrence of the empty string &#34;&#34;&#10;     * is considered to occur at the index value {@code this.length()}.&#10;     *&#10;     * <p>The returned index is the largest value {@code k} for which:&#10;     * <pre>{@code&#10;     * this.startsWith(str, k)&#10;     * }</pre>&#10;     * If no such value of {@code k} exists, then {@code -1} is returned.&#10;     *&#10;     * @param   str   the substring to search for.&#10;     * @return  the index of the last occurrence of the specified substring,&#10;     *          or {@code -1} if there is no such occurrence.&#10;     "
  ]
  node [
    id 772
    label "public int lastIndexOf(String str, int fromIndex)"
    type "method"
    comment "&#10;     * Returns the index within this string of the last occurrence of the&#10;     * specified substring, searching backward starting at the specified index.&#10;     *&#10;     * <p>The returned index is the largest value {@code k} for which:&#10;     * <pre>{@code&#10;     *     k <= Math.min(fromIndex, this.length()) &#38;&#38;&#10;     *                   this.startsWith(str, k)&#10;     * }</pre>&#10;     * If no such value of {@code k} exists, then {@code -1} is returned.&#10;     *&#10;     * @param   str         the substring to search for.&#10;     * @param   fromIndex   the index to start the search from.&#10;     * @return  the index of the last occurrence of the specified substring,&#10;     *          searching backward from the specified index,&#10;     *          or {@code -1} if there is no such occurrence.&#10;     "
  ]
  node [
    id 773
    label "private static int lastIndexOf(String source, String target, int fromIndex)"
    type "method"
    comment "&#10;     * The source is the string being searched, and the target is the string being searched for.&#10;     *&#10;     * @param   source       the characters being searched.&#10;     * @param   target       the characters being searched for.&#10;     * @param   fromIndex    the index to begin searching from.&#10;     "
  ]
  node [
    id 774
    label " static int lastIndexOf(byte[] src, byte srcCoder, int srcCount, String tgtStr, int fromIndex)"
    type "method"
    comment "&#10;     * Code shared by String and AbstractStringBuilder to do searches. The&#10;     * source is the character array being searched, and the target&#10;     * is the string being searched for.&#10;     *&#10;     * @param   src         the characters being searched.&#10;     * @param   srcCoder    coder handles the mapping between bytes/chars&#10;     * @param   srcCount    count of the source string.&#10;     * @param   tgtStr      the characters being searched for.&#10;     * @param   fromIndex   the index to begin searching from.&#10;     "
  ]
  node [
    id 775
    label " static int lastIndexOf(char[] source, int sourceOffset, int sourceCount, char[] target, int targetOffset, int targetCount, int fromIndex)"
    type "method"
    comment "&#10;     * Code shared by String and StringBuffer to do searches. The&#10;     * source is the character array being searched, and the target&#10;     * is the string being searched for.&#10;     *&#10;     * @param   source       the characters being searched.&#10;     * @param   sourceOffset offset of the source string.&#10;     * @param   sourceCount  count of the source string.&#10;     * @param   target       the characters being searched for.&#10;     * @param   targetOffset offset of the target string.&#10;     * @param   targetCount  count of the target string.&#10;     * @param   fromIndex    the index to begin searching from.&#10;     "
  ]
  node [
    id 776
    label "public String substring(int beginIndex)"
    type "method"
    comment "&#10;     * Returns a string that is a substring of this string. The&#10;     * substring begins with the character at the specified index and&#10;     * extends to the end of this string. <p>&#10;     * Examples:&#10;     * <blockquote><pre>&#10;     * &#34;unhappy&#34;.substring(2) returns &#34;happy&#34;&#10;     * &#34;Harbison&#34;.substring(3) returns &#34;bison&#34;&#10;     * &#34;emptiness&#34;.substring(9) returns &#34;&#34; (an empty string)&#10;     * </pre></blockquote>&#10;     *&#10;     * @param      beginIndex   the beginning index, inclusive.&#10;     * @return     the specified substring.&#10;     * @exception  IndexOutOfBoundsException  if&#10;     *             {@code beginIndex} is negative or larger than the&#10;     *             length of this {@code String} object.&#10;     "
  ]
  node [
    id 777
    label "public String substring(int beginIndex, int endIndex)"
    type "method"
    comment "&#10;     * Returns a string that is a substring of this string. The&#10;     * substring begins at the specified {@code beginIndex} and&#10;     * extends to the character at index {@code endIndex - 1}.&#10;     * Thus the length of the substring is {@code endIndex-beginIndex}.&#10;     * <p>&#10;     * Examples:&#10;     * <blockquote><pre>&#10;     * &#34;hamburger&#34;.substring(4, 8) returns &#34;urge&#34;&#10;     * &#34;smiles&#34;.substring(1, 5) returns &#34;mile&#34;&#10;     * </pre></blockquote>&#10;     *&#10;     * @param      beginIndex   the beginning index, inclusive.&#10;     * @param      endIndex     the ending index, exclusive.&#10;     * @return     the specified substring.&#10;     * @exception  IndexOutOfBoundsException  if the&#10;     *             {@code beginIndex} is negative, or&#10;     *             {@code endIndex} is larger than the length of&#10;     *             this {@code String} object, or&#10;     *             {@code beginIndex} is larger than&#10;     *             {@code endIndex}.&#10;     "
  ]
  node [
    id 778
    label "private native String fastSubstring(int start, int length)"
    type "method"
    comment " BEGIN Android-added: Native method to access char storage managed by runtime."
  ]
  node [
    id 779
    label "public CharSequence subSequence(int beginIndex, int endIndex)"
    type "method"
    comment "&#10;     * Returns a character sequence that is a subsequence of this sequence.&#10;     *&#10;     * <p> An invocation of this method of the form&#10;     *&#10;     * <blockquote><pre>&#10;     * str.subSequence(begin,&#38;nbsp;end)</pre></blockquote>&#10;     *&#10;     * behaves in exactly the same way as the invocation&#10;     *&#10;     * <blockquote><pre>&#10;     * str.substring(begin,&#38;nbsp;end)</pre></blockquote>&#10;     *&#10;     * @apiNote&#10;     * This method is defined so that the {@code String} class can implement&#10;     * the {@link CharSequence} interface.&#10;     *&#10;     * @param   beginIndex   the begin index, inclusive.&#10;     * @param   endIndex     the end index, exclusive.&#10;     * @return  the specified subsequence.&#10;     *&#10;     * @throws  IndexOutOfBoundsException&#10;     *          if {@code beginIndex} or {@code endIndex} is negative,&#10;     *          if {@code endIndex} is greater than {@code length()},&#10;     *          or if {@code beginIndex} is greater than {@code endIndex}&#10;     *&#10;     * @since 1.4&#10;     * @spec JSR-51&#10;     "
  ]
  node [
    id 780
    label "public native String concat(String str)"
    type "method"
    comment "&#10;    public String concat(String str) {&#10;        if (str.isEmpty()) {&#10;            return this;&#10;        }&#10;        if (coder() == str.coder()) {&#10;            byte[] val = this.value;&#10;            byte[] oval = str.value;&#10;            int len = val.length + oval.length;&#10;            byte[] buf = Arrays.copyOf(val, len);&#10;            System.arraycopy(oval, 0, buf, val.length, oval.length);&#10;            return new String(buf, coder);&#10;        }&#10;        int len = length();&#10;        int olen = str.length();&#10;        byte[] buf = StringUTF16.newBytesFor(len + olen);&#10;        getBytes(buf, 0, UTF16);&#10;        str.getBytes(buf, len, UTF16);&#10;        return new String(buf, UTF16);&#10;    }&#10;    "
  ]
  node [
    id 781
    label "public String replace(char oldChar, char newChar)"
    type "method"
    comment "&#10;     * Returns a string resulting from replacing all occurrences of&#10;     * {@code oldChar} in this string with {@code newChar}.&#10;     * <p>&#10;     * If the character {@code oldChar} does not occur in the&#10;     * character sequence represented by this {@code String} object,&#10;     * then a reference to this {@code String} object is returned.&#10;     * Otherwise, a {@code String} object is returned that&#10;     * represents a character sequence identical to the character sequence&#10;     * represented by this {@code String} object, except that every&#10;     * occurrence of {@code oldChar} is replaced by an occurrence&#10;     * of {@code newChar}.&#10;     * <p>&#10;     * Examples:&#10;     * <blockquote><pre>&#10;     * &#34;mesquite in your cellar&#34;.replace('e', 'o')&#10;     *         returns &#34;mosquito in your collar&#34;&#10;     * &#34;the war of baronets&#34;.replace('r', 'y')&#10;     *         returns &#34;the way of bayonets&#34;&#10;     * &#34;sparring with a purple porpoise&#34;.replace('p', 't')&#10;     *         returns &#34;starring with a turtle tortoise&#34;&#10;     * &#34;JonL&#34;.replace('q', 'x') returns &#34;JonL&#34; (no change)&#10;     * </pre></blockquote>&#10;     *&#10;     * @param   oldChar   the old character.&#10;     * @param   newChar   the new character.&#10;     * @return  a string derived from this string by replacing every&#10;     *          occurrence of {@code oldChar} with {@code newChar}.&#10;     "
  ]
  node [
    id 782
    label "private native String doReplace(char oldChar, char newChar)"
    type "method"
    comment " Implementation of replace(char oldChar, char newChar) called when we found a match."
  ]
  node [
    id 783
    label "public boolean matches(String regex)"
    type "method"
    comment "&#10;     * Tells whether or not this string matches the given <a&#10;     * href=&#34;../util/regex/Pattern.html#sum&#34;>regular expression</a>.&#10;     *&#10;     * <p> An invocation of this method of the form&#10;     * <i>str</i>{@code .matches(}<i>regex</i>{@code )} yields exactly the&#10;     * same result as the expression&#10;     *&#10;     * <blockquote>&#10;     * {@link java.util.regex.Pattern}.{@link java.util.regex.Pattern#matches(String,CharSequence)&#10;     * matches(<i>regex</i>, <i>str</i>)}&#10;     * </blockquote>&#10;     *&#10;     * @param   regex&#10;     *          the regular expression to which this string is to be matched&#10;     *&#10;     * @return  {@code true} if, and only if, this string matches the&#10;     *          given regular expression&#10;     *&#10;     * @throws  PatternSyntaxException&#10;     *          if the regular expression's syntax is invalid&#10;     *&#10;     * @see java.util.regex.Pattern&#10;     *&#10;     * @since 1.4&#10;     * @spec JSR-51&#10;     "
  ]
  node [
    id 784
    label "java.util.regex.Pattern"
    type "class"
    comment ""
  ]
  node [
    id 785
    label "public static Pattern compile(String regex)"
    type "method"
    comment "&#10;     * Compiles the given regular expression into a pattern.&#10;     *&#10;     * @param  regex&#10;     *         The expression to be compiled&#10;     * @return the given regular expression compiled into a pattern&#10;     * @throws  PatternSyntaxException&#10;     *          If the expression's syntax is invalid&#10;     "
  ]
  node [
    id 786
    label "public static Pattern compile(String regex, int flags)"
    type "method"
    comment "&#10;     * Compiles the given regular expression into a pattern with the given&#10;     * flags.&#10;     *&#10;     * @param  regex&#10;     *         The expression to be compiled&#10;     *&#10;     * @param  flags&#10;     *         Match flags, a bit mask that may include&#10;     *         {@link #CASE_INSENSITIVE}, {@link #MULTILINE}, {@link #DOTALL},&#10;     *         {@link #UNICODE_CASE}, {@link #UNIX_LINES}, {@link #LITERAL},&#10;     *         and {@link #COMMENTS}&#10;     *&#10;     * @return the given regular expression compiled into a pattern with the given flags&#10;     * @throws  IllegalArgumentException&#10;     *          If bit values other than those corresponding to the defined&#10;     *          match flags are set in {@code flags}&#10;     *&#10;     * @throws  PatternSyntaxException&#10;     *          If the expression's syntax is invalid&#10;     "
  ]
  node [
    id 787
    label "UNIX_LINES"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 788
    label "MULTILINE"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 789
    label "LITERAL"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 790
    label "CASE_INSENSITIVE"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 791
    label "UNICODE_CASE"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 792
    label "DOTALL"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 793
    label "COMMENTS"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 794
    label "public String pattern()"
    type "method"
    comment "&#10;     * Returns the regular expression from which this pattern was compiled.&#10;     *&#10;     * @return  The source of this pattern&#10;     "
  ]
  node [
    id 795
    label "public Matcher matcher(CharSequence input)"
    type "method"
    comment "&#10;     * Creates a matcher that will match the given input against this pattern.&#10;     *&#10;     * @param  input&#10;     *         The character sequence to be matched&#10;     *&#10;     * @return  A new matcher for this pattern&#10;     "
  ]
  node [
    id 796
    label "public int flags()"
    type "method"
    comment "&#10;     * Returns this pattern's match flags.&#10;     *&#10;     * @return  The match flags specified when this pattern was compiled&#10;     "
  ]
  node [
    id 797
    label "public static boolean matches(String regex, CharSequence input)"
    type "method"
    comment "&#10;     * Compiles the given regular expression and attempts to match the given&#10;     * input against it.&#10;     *&#10;     * <p> An invocation of this convenience method of the form&#10;     *&#10;     * <blockquote><pre>&#10;     * Pattern.matches(regex, input);</pre></blockquote>&#10;     *&#10;     * behaves in exactly the same way as the expression&#10;     *&#10;     * <blockquote><pre>&#10;     * Pattern.compile(regex).matcher(input).matches()</pre></blockquote>&#10;     *&#10;     * <p> If a pattern is to be used multiple times, compiling it once and reusing&#10;     * it will be more efficient than invoking this method each time.  </p>&#10;     *&#10;     * @param  regex&#10;     *         The expression to be compiled&#10;     *&#10;     * @param  input&#10;     *         The character sequence to be matched&#10;     * @return whether or not the regular expression matches on the input&#10;     * @throws  PatternSyntaxException&#10;     *          If the expression's syntax is invalid&#10;     "
  ]
  node [
    id 798
    label "public String[] split(CharSequence input, int limit)"
    type "method"
    comment "&#10;     * Splits the given input sequence around matches of this pattern.&#10;     *&#10;     * <p> The array returned by this method contains each substring of the&#10;     * input sequence that is terminated by another subsequence that matches&#10;     * this pattern or is terminated by the end of the input sequence.  The&#10;     * substrings in the array are in the order in which they occur in the&#10;     * input. If this pattern does not match any subsequence of the input then&#10;     * the resulting array has just one element, namely the input sequence in&#10;     * string form.&#10;     *&#10;     * <p> When there is a positive-width match at the beginning of the input&#10;     * sequence then an empty leading substring is included at the beginning&#10;     * of the resulting array. A zero-width match at the beginning however&#10;     * can only produce such an empty leading substring for apps running on or&#10;     * targeting API versions <= 28.&#10;     *&#10;     * <p> The {@code limit} parameter controls the number of times the&#10;     * pattern is applied and therefore affects the length of the resulting&#10;     * array.&#10;     * <ul>&#10;     *    <li><p>&#10;     *    If the <i>limit</i> is positive then the pattern will be applied&#10;     *    at most <i>limit</i>&#38;nbsp;-&#38;nbsp;1 times, the array's length will be&#10;     *    no greater than <i>limit</i>, and the array's last entry will contain&#10;     *    all input beyond the last matched delimiter.</p></li>&#10;     *&#10;     *    <li><p>&#10;     *    If the <i>limit</i> is zero then the pattern will be applied as&#10;     *    many times as possible, the array can have any length, and trailing&#10;     *    empty strings will be discarded.</p></li>&#10;     *&#10;     *    <li><p>&#10;     *    If the <i>limit</i> is negative then the pattern will be applied&#10;     *    as many times as possible and the array can have any length.</p></li>&#10;     * </ul>&#10;     *&#10;     * <p> The input {@code &#34;boo:and:foo&#34;}, for example, yields the following&#10;     * results with these parameters:&#10;     *&#10;     * <table class=&#34;plain&#34; style=&#34;margin-left:2em;&#34;>&#10;     * <caption style=&#34;display:none&#34;>Split example showing regex, limit, and result</caption>&#10;     * <thead>&#10;     * <tr>&#10;     *     <th scope=&#34;col&#34;>Regex</th>&#10;     *     <th scope=&#34;col&#34;>Limit</th>&#10;     *     <th scope=&#34;col&#34;>Result</th>&#10;     * </tr>&#10;     * </thead>&#10;     * <tbody>&#10;     * <tr><th scope=&#34;row&#34; rowspan=&#34;3&#34; style=&#34;font-weight:normal&#34;>:</th>&#10;     *     <th scope=&#34;row&#34; style=&#34;font-weight:normal; text-align:right; padding-right:1em&#34;>2</th>&#10;     *     <td>{@code { &#34;boo&#34;, &#34;and:foo&#34; }}</td></tr>&#10;     * <tr><!-- : -->&#10;     *     <th scope=&#34;row&#34; style=&#34;font-weight:normal; text-align:right; padding-right:1em&#34;>5</th>&#10;     *     <td>{@code { &#34;boo&#34;, &#34;and&#34;, &#34;foo&#34; }}</td></tr>&#10;     * <tr><!-- : -->&#10;     *     <th scope=&#34;row&#34; style=&#34;font-weight:normal; text-align:right; padding-right:1em&#34;>-2</th>&#10;     *     <td>{@code { &#34;boo&#34;, &#34;and&#34;, &#34;foo&#34; }}</td></tr>&#10;     * <tr><th scope=&#34;row&#34; rowspan=&#34;3&#34; style=&#34;font-weight:normal&#34;>o</th>&#10;     *     <th scope=&#34;row&#34; style=&#34;font-weight:normal; text-align:right; padding-right:1em&#34;>5</th>&#10;     *     <td>{@code { &#34;b&#34;, &#34;&#34;, &#34;:and:f&#34;, &#34;&#34;, &#34;&#34; }}</td></tr>&#10;     * <tr><!-- o -->&#10;     *     <th scope=&#34;row&#34; style=&#34;font-weight:normal; text-align:right; padding-right:1em&#34;>-2</th>&#10;     *     <td>{@code { &#34;b&#34;, &#34;&#34;, &#34;:and:f&#34;, &#34;&#34;, &#34;&#34; }}</td></tr>&#10;     * <tr><!-- o -->&#10;     *     <th scope=&#34;row&#34; style=&#34;font-weight:normal; text-align:right; padding-right:1em&#34;>0</th>&#10;     *     <td>{@code { &#34;b&#34;, &#34;&#34;, &#34;:and:f&#34; }}</td></tr>&#10;     * </tbody>&#10;     * </table>&#10;     *&#10;     * @param  input&#10;     *         The character sequence to be split&#10;     *&#10;     * @param  limit&#10;     *         The result threshold, as described above&#10;     *&#10;     * @return  The array of strings computed by splitting the input&#10;     *          around matches of this pattern&#10;     "
  ]
  node [
    id 799
    label "public String[] split(CharSequence input)"
    type "method"
    comment "&#10;     * Splits the given input sequence around matches of this pattern.&#10;     *&#10;     * <p> This method works as if by invoking the two-argument {@link&#10;     * #split(java.lang.CharSequence, int) split} method with the given input&#10;     * sequence and a limit argument of zero.  Trailing empty strings are&#10;     * therefore not included in the resulting array. </p>&#10;     *&#10;     * <p> The input {@code &#34;boo:and:foo&#34;}, for example, yields the following&#10;     * results with these expressions:&#10;     *&#10;     * <table class=&#34;plain&#34; style=&#34;margin-left:2em&#34;>&#10;     * <caption style=&#34;display:none&#34;>Split examples showing regex and result</caption>&#10;     * <thead>&#10;     * <tr>&#10;     *  <th scope=&#34;col&#34;>Regex</th>&#10;     *  <th scope=&#34;col&#34;>Result</th>&#10;     * </tr>&#10;     * </thead>&#10;     * <tbody>&#10;     * <tr><th scope=&#34;row&#34; style=&#34;text-weight:normal&#34;>:</th>&#10;     *     <td>{@code { &#34;boo&#34;, &#34;and&#34;, &#34;foo&#34; }}</td></tr>&#10;     * <tr><th scope=&#34;row&#34; style=&#34;text-weight:normal&#34;>o</th>&#10;     *     <td>{@code { &#34;b&#34;, &#34;&#34;, &#34;:and:f&#34; }}</td></tr>&#10;     * </tbody>&#10;     * </table>&#10;     *&#10;     *&#10;     * @param  input&#10;     *         The character sequence to be split&#10;     *&#10;     * @return  The array of strings computed by splitting the input&#10;     *          around matches of this pattern&#10;     "
  ]
  node [
    id 800
    label "split(java.lang.CharSequence"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 801
    label "public static String quote(String s)"
    type "method"
    comment "&#10;     * Returns a literal pattern {@code String} for the specified&#10;     * {@code String}.&#10;     *&#10;     * <p>This method produces a {@code String} that can be used to&#10;     * create a {@code Pattern} that would match the string&#10;     * {@code s} as if it were a literal pattern.</p> Metacharacters&#10;     * or escape sequences in the input sequence will be given no special&#10;     * meaning.&#10;     *&#10;     * @param  s The string to be literalized&#10;     * @return  A literal string replacement&#10;     * @since 1.5&#10;     "
  ]
  node [
    id 802
    label "private void compile() throws PatternSyntaxException"
    type "method"
    comment " Use native implementation instead of > 3000 lines of helper methods."
  ]
  node [
    id 803
    label "public Predicate<String> asPredicate()"
    type "method"
    comment "&#10;     * Creates a predicate that tests if this pattern is found in a given input&#10;     * string.&#10;     *&#10;     * @apiNote&#10;     * This method creates a predicate that behaves as if it creates a matcher&#10;     * from the input sequence and then calls {@code find}, for example a&#10;     * predicate of the form:&#10;     * <pre>{@code&#10;     *   s -> matcher(s).find();&#10;     * }</pre>&#10;     *&#10;     * @return  The predicate which can be used for finding a match on a&#10;     *          subsequence of a string&#10;     * @since   1.8&#10;     * @see     Matcher#find&#10;     "
  ]
  node [
    id 804
    label "public Predicate<String> asMatchPredicate()"
    type "method"
    comment "&#10;     * Creates a predicate that tests if this pattern matches a given input string.&#10;     *&#10;     * @apiNote&#10;     * This method creates a predicate that behaves as if it creates a matcher&#10;     * from the input sequence and then calls {@code matches}, for example a&#10;     * predicate of the form:&#10;     * <pre>{@code&#10;     *   s -> matcher(s).matches();&#10;     * }</pre>&#10;     *&#10;     * @return  The predicate which can be used for matching an input string&#10;     *          against this pattern.&#10;     * @since   11&#10;     * @see     Matcher#matches&#10;     "
  ]
  node [
    id 805
    label "public Stream<String> splitAsStream(final CharSequence input)"
    type "method"
    comment "&#10;     * Creates a stream from the given input sequence around matches of this&#10;     * pattern.&#10;     *&#10;     * <p> The stream returned by this method contains each substring of the&#10;     * input sequence that is terminated by another subsequence that matches&#10;     * this pattern or is terminated by the end of the input sequence.  The&#10;     * substrings in the stream are in the order in which they occur in the&#10;     * input. Trailing empty strings will be discarded and not encountered in&#10;     * the stream.&#10;     *&#10;     * <p> If this pattern does not match any subsequence of the input then&#10;     * the resulting stream has just one element, namely the input sequence in&#10;     * string form.&#10;     *&#10;     * <p> When there is a positive-width match at the beginning of the input&#10;     * sequence then an empty leading substring is included at the beginning&#10;     * of the stream. A zero-width match at the beginning however never produces&#10;     * such empty leading substring.&#10;     *&#10;     * <p> If the input sequence is mutable, it must remain constant during the&#10;     * execution of the terminal stream operation.  Otherwise, the result of the&#10;     * terminal stream operation is undefined.&#10;     *&#10;     * @param   input&#10;     *          The character sequence to be split&#10;     *&#10;     * @return  The stream of strings computed by splitting the input&#10;     *          around matches of this pattern&#10;     * @see     #split(CharSequence)&#10;     * @since   1.8&#10;     "
  ]
  node [
    id 806
    label "public boolean contains(CharSequence s)"
    type "method"
    comment "&#10;     * Returns true if and only if this string contains the specified&#10;     * sequence of char values.&#10;     *&#10;     * @param s the sequence to search for&#10;     * @return true if this string contains {@code s}, false otherwise&#10;     * @since 1.5&#10;     "
  ]
  node [
    id 807
    label "public String replaceFirst(String regex, String replacement)"
    type "method"
    comment "&#10;     * Replaces the first substring of this string that matches the given <a&#10;     * href=&#34;../util/regex/Pattern.html#sum&#34;>regular expression</a> with the&#10;     * given replacement.&#10;     *&#10;     * <p> An invocation of this method of the form&#10;     * <i>str</i>{@code .replaceFirst(}<i>regex</i>{@code ,} <i>repl</i>{@code )}&#10;     * yields exactly the same result as the expression&#10;     *&#10;     * <blockquote>&#10;     * <code>&#10;     * {@link java.util.regex.Pattern}.{@link&#10;     * java.util.regex.Pattern#compile compile}(<i>regex</i>).{@link&#10;     * java.util.regex.Pattern#matcher(java.lang.CharSequence) matcher}(<i>str</i>).{@link&#10;     * java.util.regex.Matcher#replaceFirst replaceFirst}(<i>repl</i>)&#10;     * </code>&#10;     * </blockquote>&#10;     *&#10;     *<p>&#10;     * Note that backslashes ({@code \}) and dollar signs ({@code $}) in the&#10;     * replacement string may cause the results to be different than if it were&#10;     * being treated as a literal replacement string; see&#10;     * {@link java.util.regex.Matcher#replaceFirst}.&#10;     * Use {@link java.util.regex.Matcher#quoteReplacement} to suppress the special&#10;     * meaning of these characters, if desired.&#10;     *&#10;     * @param   regex&#10;     *          the regular expression to which this string is to be matched&#10;     * @param   replacement&#10;     *          the string to be substituted for the first match&#10;     *&#10;     * @return  The resulting {@code String}&#10;     *&#10;     * @throws  PatternSyntaxException&#10;     *          if the regular expression's syntax is invalid&#10;     *&#10;     * @see java.util.regex.Pattern&#10;     *&#10;     * @since 1.4&#10;     * @spec JSR-51&#10;     "
  ]
  node [
    id 808
    label "replaceFirst"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 809
    label "java.util.regex.Matcher"
    type "class"
    comment ""
  ]
  node [
    id 810
    label "public Pattern pattern()"
    type "method"
    comment "&#10;     * Returns the pattern that is interpreted by this matcher.&#10;     *&#10;     * @return  The pattern for which this matcher was created&#10;     "
  ]
  node [
    id 811
    label "public MatchResult toMatchResult()"
    type "method"
    comment "&#10;     * Returns the match state of this matcher as a {@link MatchResult}.&#10;     * The result is unaffected by subsequent operations performed upon this&#10;     * matcher.&#10;     *&#10;     * @return  a {@code MatchResult} with the state of this matcher&#10;     * @throws IllegalStateException if no match is found.&#10;     * @since 1.5&#10;     "
  ]
  node [
    id 812
    label "java.util.regex.MatchResult"
    type "class"
    comment "&#10; * The result of a match operation.&#10; *&#10; * <p>This interface contains query methods used to determine the&#10; * results of a match against a regular expression. The match boundaries,&#10; * groups and group boundaries can be seen but not modified through&#10; * a {@code MatchResult}.&#10; *&#10; * @author  Michael McCloskey&#10; * @see Matcher&#10; * @since 1.5&#10; "
  ]
  node [
    id 813
    label "public int start()"
    type "method"
    comment "&#10;     * Returns the start index of the previous match.&#10;     *&#10;     * @return  The index of the first character matched&#10;     *&#10;     * @throws  IllegalStateException&#10;     *          If no match has yet been attempted,&#10;     *          or if the previous match operation failed&#10;     "
  ]
  node [
    id 814
    label "public int start(int group)"
    type "method"
    comment "&#10;     * Returns the start index of the subsequence captured by the given group&#10;     * during the previous match operation.&#10;     *&#10;     * <p> <a href=&#34;Pattern.html#cg&#34;>Capturing groups</a> are indexed from left&#10;     * to right, starting at one.  Group zero denotes the entire pattern, so&#10;     * the expression <i>m.</i>{@code start(0)} is equivalent to&#10;     * <i>m.</i>{@code start()}.  </p>&#10;     *&#10;     * @param  group&#10;     *         The index of a capturing group in this matcher's pattern&#10;     *&#10;     * @return  The index of the first character captured by the group,&#10;     *          or {@code -1} if the match was successful but the group&#10;     *          itself did not match anything&#10;     *&#10;     * @throws  IllegalStateException&#10;     *          If no match has yet been attempted,&#10;     *          or if the previous match operation failed&#10;     *&#10;     * @throws  IndexOutOfBoundsException&#10;     *          If there is no capturing group in the pattern&#10;     *          with the given index&#10;     "
  ]
  node [
    id 815
    label "public int end()"
    type "method"
    comment "&#10;     * Returns the offset after the last character matched.&#10;     *&#10;     * @return  The offset after the last character matched&#10;     *&#10;     * @throws  IllegalStateException&#10;     *          If no match has yet been attempted,&#10;     *          or if the previous match operation failed&#10;     "
  ]
  node [
    id 816
    label "public int end(int group)"
    type "method"
    comment "&#10;     * Returns the offset after the last character of the subsequence&#10;     * captured by the given group during the previous match operation.&#10;     *&#10;     * <p> <a href=&#34;Pattern.html#cg&#34;>Capturing groups</a> are indexed from left&#10;     * to right, starting at one.  Group zero denotes the entire pattern, so&#10;     * the expression <i>m.</i>{@code end(0)} is equivalent to&#10;     * <i>m.</i>{@code end()}.  </p>&#10;     *&#10;     * @param  group&#10;     *         The index of a capturing group in this matcher's pattern&#10;     *&#10;     * @return  The offset after the last character captured by the group,&#10;     *          or {@code -1} if the match was successful&#10;     *          but the group itself did not match anything&#10;     *&#10;     * @throws  IllegalStateException&#10;     *          If no match has yet been attempted,&#10;     *          or if the previous match operation failed&#10;     *&#10;     * @throws  IndexOutOfBoundsException&#10;     *          If there is no capturing group in the pattern&#10;     *          with the given index&#10;     "
  ]
  node [
    id 817
    label "public String group()"
    type "method"
    comment "&#10;     * Returns the input subsequence matched by the previous match.&#10;     *&#10;     * <p> For a matcher <i>m</i> with input sequence <i>s</i>,&#10;     * the expressions <i>m.</i>{@code group()} and&#10;     * <i>s.</i>{@code substring(}<i>m.</i>{@code start(),}&#38;nbsp;<i>m.</i>&#10;     * {@code end())} are equivalent.  </p>&#10;     *&#10;     * <p> Note that some patterns, for example {@code a*}, match the empty&#10;     * string.  This method will return the empty string when the pattern&#10;     * successfully matches the empty string in the input.  </p>&#10;     *&#10;     * @return The (possibly empty) subsequence matched by the previous match,&#10;     *         in string form&#10;     *&#10;     * @throws  IllegalStateException&#10;     *          If no match has yet been attempted,&#10;     *          or if the previous match operation failed&#10;     "
  ]
  node [
    id 818
    label "public String group(int group)"
    type "method"
    comment "&#10;     * Returns the input subsequence captured by the given group during the&#10;     * previous match operation.&#10;     *&#10;     * <p> For a matcher <i>m</i>, input sequence <i>s</i>, and group index&#10;     * <i>g</i>, the expressions <i>m.</i>{@code group(}<i>g</i>{@code )} and&#10;     * <i>s.</i>{@code substring(}<i>m.</i>{@code start(}<i>g</i>{@code&#10;     * ),}&#38;nbsp;<i>m.</i>{@code end(}<i>g</i>{@code ))}&#10;     * are equivalent.  </p>&#10;     *&#10;     * <p> <a href=&#34;Pattern.html#cg&#34;>Capturing groups</a> are indexed from left&#10;     * to right, starting at one.  Group zero denotes the entire pattern, so&#10;     * the expression {@code m.group(0)} is equivalent to {@code m.group()}.&#10;     * </p>&#10;     *&#10;     * <p> If the match was successful but the group specified failed to match&#10;     * any part of the input sequence, then {@code null} is returned. Note&#10;     * that some groups, for example {@code (a*)}, match the empty string.&#10;     * This method will return the empty string when such a group successfully&#10;     * matches the empty string in the input.  </p>&#10;     *&#10;     * @param  group&#10;     *         The index of a capturing group in this matcher's pattern&#10;     *&#10;     * @return  The (possibly empty) subsequence captured by the group&#10;     *          during the previous match, or {@code null} if the group&#10;     *          failed to match part of the input&#10;     *&#10;     * @throws  IllegalStateException&#10;     *          If no match has yet been attempted,&#10;     *          or if the previous match operation failed&#10;     *&#10;     * @throws  IndexOutOfBoundsException&#10;     *          If there is no capturing group in the pattern&#10;     *          with the given index&#10;     "
  ]
  node [
    id 819
    label "public int groupCount()"
    type "method"
    comment "&#10;     * Returns the number of capturing groups in this matcher's pattern.&#10;     *&#10;     * <p> Group zero denotes the entire pattern by convention. It is not&#10;     * included in this count.&#10;     *&#10;     * <p> Any non-negative integer smaller than or equal to the value&#10;     * returned by this method is guaranteed to be a valid group index for&#10;     * this matcher.  </p>&#10;     *&#10;     * @return The number of capturing groups in this matcher's pattern&#10;     "
  ]
  node [
    id 820
    label "public Matcher usePattern(Pattern newPattern)"
    type "method"
    comment "&#10;     * Changes the {@code Pattern} that this {@code Matcher} uses to&#10;     * find matches with.&#10;     *&#10;     * <p> This method causes this matcher to lose information&#10;     * about the groups of the last match that occurred. The&#10;     * matcher's position in the input is maintained and its&#10;     * last append position is unaffected.</p>&#10;     *&#10;     * @param  newPattern&#10;     *         The new pattern used by this matcher&#10;     * @return  This matcher&#10;     * @throws  IllegalArgumentException&#10;     *          If newPattern is {@code null}&#10;     * @since 1.5&#10;     "
  ]
  node [
    id 821
    label "public Matcher reset()"
    type "method"
    comment "&#10;     * Resets this matcher.&#10;     *&#10;     * <p> Resetting a matcher discards all of its explicit state information&#10;     * and sets its append position to zero. The matcher's region is set to the&#10;     * default region, which is its entire character sequence. The anchoring&#10;     * and transparency of this matcher's region boundaries are unaffected.&#10;     *&#10;     * @return  This matcher&#10;     "
  ]
  node [
    id 822
    label "public Matcher reset(CharSequence input)"
    type "method"
    comment "&#10;     * Resets this matcher with a new input sequence.&#10;     *&#10;     * <p> Resetting a matcher discards all of its explicit state information&#10;     * and sets its append position to zero.  The matcher's region is set to&#10;     * the default region, which is its entire character sequence.  The&#10;     * anchoring and transparency of this matcher's region boundaries are&#10;     * unaffected.&#10;     *&#10;     * @param  input&#10;     *         The new input character sequence&#10;     *&#10;     * @return  This matcher&#10;     "
  ]
  node [
    id 823
    label "public int start(String name)"
    type "method"
    comment "&#10;     * Returns the start index of the subsequence captured by the given&#10;     * <a href=&#34;Pattern.html#groupname&#34;>named-capturing group</a> during the&#10;     * previous match operation.&#10;     *&#10;     * @param  name&#10;     *         The name of a named-capturing group in this matcher's pattern&#10;     *&#10;     * @return  The index of the first character captured by the group,&#10;     *          or {@code -1} if the match was successful but the group&#10;     *          itself did not match anything&#10;     *&#10;     * @throws  IllegalStateException&#10;     *          If no match has yet been attempted,&#10;     *          or if the previous match operation failed&#10;     *&#10;     * @throws  IllegalArgumentException&#10;     *          If there is no capturing group in the pattern&#10;     *          with the given name&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 824
    label "public int end(String name)"
    type "method"
    comment "&#10;     * Returns the offset after the last character of the subsequence&#10;     * captured by the given <a href=&#34;Pattern.html#groupname&#34;>named-capturing&#10;     * group</a> during the previous match operation.&#10;     *&#10;     * @param  name&#10;     *         The name of a named-capturing group in this matcher's pattern&#10;     *&#10;     * @return  The offset after the last character captured by the group,&#10;     *          or {@code -1} if the match was successful&#10;     *          but the group itself did not match anything&#10;     *&#10;     * @throws  IllegalStateException&#10;     *          If no match has yet been attempted,&#10;     *          or if the previous match operation failed&#10;     *&#10;     * @throws  IllegalArgumentException&#10;     *          If there is no capturing group in the pattern&#10;     *          with the given name&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 825
    label "public String group(String name)"
    type "method"
    comment "&#10;     * Returns the input subsequence captured by the given&#10;     * <a href=&#34;Pattern.html#groupname&#34;>named-capturing group</a> during the&#10;     * previous match operation.&#10;     *&#10;     * <p> If the match was successful but the group specified failed to match&#10;     * any part of the input sequence, then {@code null} is returned. Note&#10;     * that some groups, for example {@code (a*)}, match the empty string.&#10;     * This method will return the empty string when such a group successfully&#10;     * matches the empty string in the input.  </p>&#10;     *&#10;     * @param  name&#10;     *         The name of a named-capturing group in this matcher's pattern&#10;     *&#10;     * @return  The (possibly empty) subsequence captured by the named group&#10;     *          during the previous match, or {@code null} if the group&#10;     *          failed to match part of the input&#10;     *&#10;     * @throws  IllegalStateException&#10;     *          If no match has yet been attempted,&#10;     *          or if the previous match operation failed&#10;     *&#10;     * @throws  IllegalArgumentException&#10;     *          If there is no capturing group in the pattern&#10;     *          with the given name&#10;     * @since 1.7&#10;     "
  ]
  node [
    id 826
    label "public boolean matches()"
    type "method"
    comment "&#10;     * Attempts to match the entire region against the pattern.&#10;     *&#10;     * <p> If the match succeeds then more information can be obtained via the&#10;     * {@code start}, {@code end}, and {@code group} methods.  </p>&#10;     *&#10;     * @return  {@code true} if, and only if, the entire region sequence&#10;     *          matches this matcher's pattern&#10;     "
  ]
  node [
    id 827
    label "public boolean find()"
    type "method"
    comment "&#10;     * Attempts to find the next subsequence of the input sequence that matches&#10;     * the pattern.&#10;     *&#10;     * <p> This method starts at the beginning of this matcher's region, or, if&#10;     * a previous invocation of the method was successful and the matcher has&#10;     * not since been reset, at the first character not matched by the previous&#10;     * match.&#10;     *&#10;     * <p> If the match succeeds then more information can be obtained via the&#10;     * {@code start}, {@code end}, and {@code group} methods.  </p>&#10;     *&#10;     * @return  {@code true} if, and only if, a subsequence of the input&#10;     *          sequence matches this matcher's pattern&#10;     "
  ]
  node [
    id 828
    label "public boolean find(int start)"
    type "method"
    comment "&#10;     * Resets this matcher and then attempts to find the next subsequence of&#10;     * the input sequence that matches the pattern, starting at the specified&#10;     * index.&#10;     *&#10;     * <p> If the match succeeds then more information can be obtained via the&#10;     * {@code start}, {@code end}, and {@code group} methods, and subsequent&#10;     * invocations of the {@link #find()} method will start at the first&#10;     * character not matched by this match.  </p>&#10;     *&#10;     * @param start the index to start searching for a match&#10;     * @throws  IndexOutOfBoundsException&#10;     *          If start is less than zero or if start is greater than the&#10;     *          length of the input sequence.&#10;     *&#10;     * @return  {@code true} if, and only if, a subsequence of the input&#10;     *          sequence starting at the given index matches this matcher's&#10;     *          pattern&#10;     "
  ]
  node [
    id 829
    label "find()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 830
    label "public boolean lookingAt()"
    type "method"
    comment "&#10;     * Attempts to match the input sequence, starting at the beginning of the&#10;     * region, against the pattern.&#10;     *&#10;     * <p> Like the {@link #matches matches} method, this method always starts&#10;     * at the beginning of the region; unlike that method, it does not&#10;     * require that the entire region be matched.&#10;     *&#10;     * <p> If the match succeeds then more information can be obtained via the&#10;     * {@code start}, {@code end}, and {@code group} methods.  </p>&#10;     *&#10;     * @return  {@code true} if, and only if, a prefix of the input&#10;     *          sequence matches this matcher's pattern&#10;     "
  ]
  node [
    id 831
    label "matches"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 832
    label "public static String quoteReplacement(String s)"
    type "method"
    comment "&#10;     * Returns a literal replacement {@code String} for the specified&#10;     * {@code String}.&#10;     *&#10;     * This method produces a {@code String} that will work&#10;     * as a literal replacement {@code s} in the&#10;     * {@code appendReplacement} method of the {@link Matcher} class.&#10;     * The {@code String} produced will match the sequence of characters&#10;     * in {@code s} treated as a literal sequence. Slashes ('\') and&#10;     * dollar signs ('$') will be given no special meaning.&#10;     *&#10;     * @param  s The string to be literalized&#10;     * @return  A literal string replacement&#10;     * @since 1.5&#10;     "
  ]
  node [
    id 833
    label "public Matcher appendReplacement(StringBuffer sb, String replacement)"
    type "method"
    comment "&#10;     * Implements a non-terminal append-and-replace step.&#10;     *&#10;     * <p> This method performs the following actions: </p>&#10;     *&#10;     * <ol>&#10;     *&#10;     *   <li><p> It reads characters from the input sequence, starting at the&#10;     *   append position, and appends them to the given string buffer.  It&#10;     *   stops after reading the last character preceding the previous match,&#10;     *   that is, the character at index {@link&#10;     *   #start()}&#38;nbsp;{@code -}&#38;nbsp;{@code 1}.  </p></li>&#10;     *&#10;     *   <li><p> It appends the given replacement string to the string buffer.&#10;     *   </p></li>&#10;     *&#10;     *   <li><p> It sets the append position of this matcher to the index of&#10;     *   the last character matched, plus one, that is, to {@link #end()}.&#10;     *   </p></li>&#10;     *&#10;     * </ol>&#10;     *&#10;     * <p> The replacement string may contain references to subsequences&#10;     * captured during the previous match: Each occurrence of&#10;     * <code>${</code><i>name</i><code>}</code> or {@code $}<i>g</i>&#10;     * will be replaced by the result of evaluating the corresponding&#10;     * {@link #group(String) group(name)} or {@link #group(int) group(g)}&#10;     * respectively. For {@code $}<i>g</i>,&#10;     * the first number after the {@code $} is always treated as part of&#10;     * the group reference. Subsequent numbers are incorporated into g if&#10;     * they would form a legal group reference. Only the numerals '0'&#10;     * through '9' are considered as potential components of the group&#10;     * reference. If the second group matched the string {@code &#34;foo&#34;}, for&#10;     * example, then passing the replacement string {@code &#34;$2bar&#34;} would&#10;     * cause {@code &#34;foobar&#34;} to be appended to the string buffer. A dollar&#10;     * sign ({@code $}) may be included as a literal in the replacement&#10;     * string by preceding it with a backslash ({@code \$}).&#10;     *&#10;     * <p> Note that backslashes ({@code \}) and dollar signs ({@code $}) in&#10;     * the replacement string may cause the results to be different than if it&#10;     * were being treated as a literal replacement string. Dollar signs may be&#10;     * treated as references to captured subsequences as described above, and&#10;     * backslashes are used to escape literal characters in the replacement&#10;     * string.&#10;     *&#10;     * <p> This method is intended to be used in a loop together with the&#10;     * {@link #appendTail(StringBuffer) appendTail} and {@link #find() find}&#10;     * methods.  The following code, for example, writes {@code one dog two dogs&#10;     * in the yard} to the standard-output stream: </p>&#10;     *&#10;     * <blockquote><pre>&#10;     * Pattern p = Pattern.compile(&#34;cat&#34;);&#10;     * Matcher m = p.matcher(&#34;one cat two cats in the yard&#34;);&#10;     * StringBuffer sb = new StringBuffer();&#10;     * while (m.find()) {&#10;     *     m.appendReplacement(sb, &#34;dog&#34;);&#10;     * }&#10;     * m.appendTail(sb);&#10;     * System.out.println(sb.toString());</pre></blockquote>&#10;     *&#10;     * @param  sb&#10;     *         The target string buffer&#10;     *&#10;     * @param  replacement&#10;     *         The replacement string&#10;     *&#10;     * @return  This matcher&#10;     *&#10;     * @throws  IllegalStateException&#10;     *          If no match has yet been attempted,&#10;     *          or if the previous match operation failed&#10;     *&#10;     * @throws  IllegalArgumentException&#10;     *          If the replacement string refers to a named-capturing&#10;     *          group that does not exist in the pattern&#10;     *&#10;     * @throws  IndexOutOfBoundsException&#10;     *          If the replacement string refers to a capturing group&#10;     *          that does not exist in the pattern&#10;     "
  ]
  node [
    id 834
    label "group(String)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 835
    label "start()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 836
    label "end()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 837
    label "appendTail(StringBuffer)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 838
    label "group(int)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 839
    label "public Matcher appendReplacement(StringBuilder sb, String replacement)"
    type "method"
    comment "&#10;     * Implements a non-terminal append-and-replace step.&#10;     *&#10;     * <p> This method performs the following actions: </p>&#10;     *&#10;     * <ol>&#10;     *&#10;     *   <li><p> It reads characters from the input sequence, starting at the&#10;     *   append position, and appends them to the given string builder.  It&#10;     *   stops after reading the last character preceding the previous match,&#10;     *   that is, the character at index {@link&#10;     *   #start()}&#38;nbsp;{@code -}&#38;nbsp;{@code 1}.  </p></li>&#10;     *&#10;     *   <li><p> It appends the given replacement string to the string builder.&#10;     *   </p></li>&#10;     *&#10;     *   <li><p> It sets the append position of this matcher to the index of&#10;     *   the last character matched, plus one, that is, to {@link #end()}.&#10;     *   </p></li>&#10;     *&#10;     * </ol>&#10;     *&#10;     * <p> The replacement string may contain references to subsequences&#10;     * captured during the previous match: Each occurrence of&#10;     * {@code $}<i>g</i> will be replaced by the result of&#10;     * evaluating {@link #group(int) group}{@code (}<i>g</i>{@code )}.&#10;     * The first number after the {@code $} is always treated as part of&#10;     * the group reference. Subsequent numbers are incorporated into g if&#10;     * they would form a legal group reference. Only the numerals '0'&#10;     * through '9' are considered as potential components of the group&#10;     * reference. If the second group matched the string {@code &#34;foo&#34;}, for&#10;     * example, then passing the replacement string {@code &#34;$2bar&#34;} would&#10;     * cause {@code &#34;foobar&#34;} to be appended to the string builder. A dollar&#10;     * sign ({@code $}) may be included as a literal in the replacement&#10;     * string by preceding it with a backslash ({@code \$}).&#10;     *&#10;     * <p> Note that backslashes ({@code \}) and dollar signs ({@code $}) in&#10;     * the replacement string may cause the results to be different than if it&#10;     * were being treated as a literal replacement string. Dollar signs may be&#10;     * treated as references to captured subsequences as described above, and&#10;     * backslashes are used to escape literal characters in the replacement&#10;     * string.&#10;     *&#10;     * <p> This method is intended to be used in a loop together with the&#10;     * {@link #appendTail(StringBuilder) appendTail} and&#10;     * {@link #find() find} methods. The following code, for example, writes&#10;     * {@code one dog two dogs in the yard} to the standard-output stream: </p>&#10;     *&#10;     * <blockquote><pre>&#10;     * Pattern p = Pattern.compile(&#34;cat&#34;);&#10;     * Matcher m = p.matcher(&#34;one cat two cats in the yard&#34;);&#10;     * StringBuilder sb = new StringBuilder();&#10;     * while (m.find()) {&#10;     *     m.appendReplacement(sb, &#34;dog&#34;);&#10;     * }&#10;     * m.appendTail(sb);&#10;     * System.out.println(sb.toString());</pre></blockquote>&#10;     *&#10;     * @param  sb&#10;     *         The target string builder&#10;     * @param  replacement&#10;     *         The replacement string&#10;     * @return  This matcher&#10;     *&#10;     * @throws  IllegalStateException&#10;     *          If no match has yet been attempted,&#10;     *          or if the previous match operation failed&#10;     * @throws  IllegalArgumentException&#10;     *          If the replacement string refers to a named-capturing&#10;     *          group that does not exist in the pattern&#10;     * @throws  IndexOutOfBoundsException&#10;     *          If the replacement string refers to a capturing group&#10;     *          that does not exist in the pattern&#10;     * @since 9&#10;     "
  ]
  node [
    id 840
    label "appendTail(StringBuilder)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 841
    label "public StringBuffer appendTail(StringBuffer sb)"
    type "method"
    comment "&#10;     * Implements a terminal append-and-replace step.&#10;     *&#10;     * <p> This method reads characters from the input sequence, starting at&#10;     * the append position, and appends them to the given string buffer.  It is&#10;     * intended to be invoked after one or more invocations of the {@link&#10;     * #appendReplacement(StringBuffer, String) appendReplacement} method in&#10;     * order to copy the remainder of the input sequence.  </p>&#10;     *&#10;     * @param  sb&#10;     *         The target string buffer&#10;     *&#10;     * @return  The target string buffer&#10;     "
  ]
  node [
    id 842
    label "appendReplacement(StringBuffer"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 843
    label "public StringBuilder appendTail(StringBuilder sb)"
    type "method"
    comment "&#10;     * Implements a terminal append-and-replace step.&#10;     *&#10;     * <p> This method reads characters from the input sequence, starting at&#10;     * the append position, and appends them to the given string builder.  It is&#10;     * intended to be invoked after one or more invocations of the {@link&#10;     * #appendReplacement(StringBuilder, String)&#10;     * appendReplacement} method in order to copy the remainder of the input&#10;     * sequence.  </p>&#10;     *&#10;     * @param  sb&#10;     *         The target string builder&#10;     *&#10;     * @return  The target string builder&#10;     *&#10;     * @since 9&#10;     "
  ]
  node [
    id 844
    label "appendReplacement(StringBuilder"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 845
    label "public String replaceAll(String replacement)"
    type "method"
    comment "&#10;     * Replaces every subsequence of the input sequence that matches the&#10;     * pattern with the given replacement string.&#10;     *&#10;     * <p> This method first resets this matcher.  It then scans the input&#10;     * sequence looking for matches of the pattern.  Characters that are not&#10;     * part of any match are appended directly to the result string; each match&#10;     * is replaced in the result by the replacement string.  The replacement&#10;     * string may contain references to captured subsequences as in the {@link&#10;     * #appendReplacement appendReplacement} method.&#10;     *&#10;     * <p> Note that backslashes ({@code \}) and dollar signs ({@code $}) in&#10;     * the replacement string may cause the results to be different than if it&#10;     * were being treated as a literal replacement string. Dollar signs may be&#10;     * treated as references to captured subsequences as described above, and&#10;     * backslashes are used to escape literal characters in the replacement&#10;     * string.&#10;     *&#10;     * <p> Given the regular expression {@code a*b}, the input&#10;     * {@code &#34;aabfooaabfooabfoob&#34;}, and the replacement string&#10;     * {@code &#34;-&#34;}, an invocation of this method on a matcher for that&#10;     * expression would yield the string {@code &#34;-foo-foo-foo-&#34;}.&#10;     *&#10;     * <p> Invoking this method changes this matcher's state.  If the matcher&#10;     * is to be used in further matching operations then it should first be&#10;     * reset.  </p>&#10;     *&#10;     * @param  replacement&#10;     *         The replacement string&#10;     *&#10;     * @return  The string constructed by replacing each matching subsequence&#10;     *          by the replacement string, substituting captured subsequences&#10;     *          as needed&#10;     "
  ]
  node [
    id 846
    label "appendReplacement"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 847
    label "public String replaceAll(Function<MatchResult, String> replacer)"
    type "method"
    comment "&#10;     * Replaces every subsequence of the input sequence that matches the&#10;     * pattern with the result of applying the given replacer function to the&#10;     * match result of this matcher corresponding to that subsequence.&#10;     * Exceptions thrown by the function are relayed to the caller.&#10;     *&#10;     * <p> This method first resets this matcher.  It then scans the input&#10;     * sequence looking for matches of the pattern.  Characters that are not&#10;     * part of any match are appended directly to the result string; each match&#10;     * is replaced in the result by the applying the replacer function that&#10;     * returns a replacement string.  Each replacement string may contain&#10;     * references to captured subsequences as in the {@link #appendReplacement&#10;     * appendReplacement} method.&#10;     *&#10;     * <p> Note that backslashes ({@code \}) and dollar signs ({@code $}) in&#10;     * a replacement string may cause the results to be different than if it&#10;     * were being treated as a literal replacement string. Dollar signs may be&#10;     * treated as references to captured subsequences as described above, and&#10;     * backslashes are used to escape literal characters in the replacement&#10;     * string.&#10;     *&#10;     * <p> Given the regular expression {@code dog}, the input&#10;     * {@code &#34;zzzdogzzzdogzzz&#34;}, and the function&#10;     * {@code mr -> mr.group().toUpperCase()}, an invocation of this method on&#10;     * a matcher for that expression would yield the string&#10;     * {@code &#34;zzzDOGzzzDOGzzz&#34;}.&#10;     *&#10;     * <p> Invoking this method changes this matcher's state.  If the matcher&#10;     * is to be used in further matching operations then it should first be&#10;     * reset.  </p>&#10;     *&#10;     * <p> The replacer function should not modify this matcher's state during&#10;     * replacement.  This method will, on a best-effort basis, throw a&#10;     * {@link java.util.ConcurrentModificationException} if such modification is&#10;     * detected.&#10;     *&#10;     * <p> The state of each match result passed to the replacer function is&#10;     * guaranteed to be constant only for the duration of the replacer function&#10;     * call and only if the replacer function does not modify this matcher's&#10;     * state.&#10;     *&#10;     * @implNote&#10;     * This implementation applies the replacer function to this matcher, which&#10;     * is an instance of {@code MatchResult}.&#10;     *&#10;     * @param  replacer&#10;     *         The function to be applied to the match result of this matcher&#10;     *         that returns a replacement string.&#10;     * @return  The string constructed by replacing each matching subsequence&#10;     *          with the result of applying the replacer function to that&#10;     *          matched subsequence, substituting captured subsequences as&#10;     *          needed.&#10;     * @throws NullPointerException if the replacer function is null&#10;     * @throws ConcurrentModificationException if it is detected, on a&#10;     *         best-effort basis, that the replacer function modified this&#10;     *         matcher's state&#10;     * @since 9&#10;     "
  ]
  node [
    id 848
    label "appendReplacementappendReplacement"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 849
    label "java.util.ConcurrentModificationException"
    type "class"
    comment "&#10; * This exception may be thrown by methods that have detected concurrent&#10; * modification of an object when such modification is not permissible.&#10; * <p>&#10; * For example, it is not generally permissible for one thread to modify a Collection&#10; * while another thread is iterating over it.  In general, the results of the&#10; * iteration are undefined under these circumstances.  Some Iterator&#10; * implementations (including those of all the general purpose collection implementations&#10; * provided by the JRE) may choose to throw this exception if this behavior is&#10; * detected.  Iterators that do this are known as <i>fail-fast</i> iterators,&#10; * as they fail quickly and cleanly, rather that risking arbitrary,&#10; * non-deterministic behavior at an undetermined time in the future.&#10; * <p>&#10; * Note that this exception does not always indicate that an object has&#10; * been concurrently modified by a <i>different</i> thread.  If a single&#10; * thread issues a sequence of method invocations that violates the&#10; * contract of an object, the object may throw this exception.  For&#10; * example, if a thread modifies a collection directly while it is&#10; * iterating over the collection with a fail-fast iterator, the iterator&#10; * will throw this exception.&#10; *&#10; * <p>Note that fail-fast behavior cannot be guaranteed as it is, generally&#10; * speaking, impossible to make any hard guarantees in the presence of&#10; * unsynchronized concurrent modification.  Fail-fast operations&#10; * throw {@code ConcurrentModificationException} on a best-effort basis.&#10; * Therefore, it would be wrong to write a program that depended on this&#10; * exception for its correctness: <i>{@code ConcurrentModificationException}&#10; * should be used only to detect bugs.</i>&#10; *&#10; * @author  Josh Bloch&#10; * @see     Collection&#10; * @see     Iterator&#10; * @see     Spliterator&#10; * @see     ListIterator&#10; * @see     Vector&#10; * @see     LinkedList&#10; * @see     HashSet&#10; * @see     Hashtable&#10; * @see     TreeMap&#10; * @see     AbstractList&#10; * @since   1.2&#10; "
  ]
  node [
    id 850
    label "public Stream<MatchResult> results()"
    type "method"
    comment "&#10;     * Returns a stream of match results for each subsequence of the input&#10;     * sequence that matches the pattern.  The match results occur in the&#10;     * same order as the matching subsequences in the input sequence.&#10;     *&#10;     * <p> Each match result is produced as if by {@link #toMatchResult()}.&#10;     *&#10;     * <p> This method does not reset this matcher.  Matching starts on&#10;     * initiation of the terminal stream operation either at the beginning of&#10;     * this matcher's region, or, if the matcher has not since been reset, at&#10;     * the first character not matched by a previous match.&#10;     *&#10;     * <p> If the matcher is to be used for further matching operations after&#10;     * the terminal stream operation completes then it should be first reset.&#10;     *&#10;     * <p> This matcher's state should not be modified during execution of the&#10;     * returned stream's pipeline.  The returned stream's source&#10;     * {@code Spliterator} is <em>fail-fast</em> and will, on a best-effort&#10;     * basis, throw a {@link java.util.ConcurrentModificationException} if such&#10;     * modification is detected.&#10;     *&#10;     * @return a sequential stream of match results.&#10;     * @since 9&#10;     "
  ]
  node [
    id 851
    label "toMatchResult()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 852
    label "public String replaceFirst(String replacement)"
    type "method"
    comment "&#10;     * Replaces the first subsequence of the input sequence that matches the&#10;     * pattern with the given replacement string.&#10;     *&#10;     * <p> This method first resets this matcher.  It then scans the input&#10;     * sequence looking for a match of the pattern.  Characters that are not&#10;     * part of the match are appended directly to the result string; the match&#10;     * is replaced in the result by the replacement string.  The replacement&#10;     * string may contain references to captured subsequences as in the {@link&#10;     * #appendReplacement appendReplacement} method.&#10;     *&#10;     * <p>Note that backslashes ({@code \}) and dollar signs ({@code $}) in&#10;     * the replacement string may cause the results to be different than if it&#10;     * were being treated as a literal replacement string. Dollar signs may be&#10;     * treated as references to captured subsequences as described above, and&#10;     * backslashes are used to escape literal characters in the replacement&#10;     * string.&#10;     *&#10;     * <p> Given the regular expression {@code dog}, the input&#10;     * {@code &#34;zzzdogzzzdogzzz&#34;}, and the replacement string&#10;     * {@code &#34;cat&#34;}, an invocation of this method on a matcher for that&#10;     * expression would yield the string {@code &#34;zzzcatzzzdogzzz&#34;}.  </p>&#10;     *&#10;     * <p> Invoking this method changes this matcher's state.  If the matcher&#10;     * is to be used in further matching operations then it should first be&#10;     * reset.  </p>&#10;     *&#10;     * @param  replacement&#10;     *         The replacement string&#10;     * @return  The string constructed by replacing the first matching&#10;     *          subsequence by the replacement string, substituting captured&#10;     *          subsequences as needed&#10;     "
  ]
  node [
    id 853
    label "public String replaceFirst(Function<MatchResult, String> replacer)"
    type "method"
    comment "&#10;     * Replaces the first subsequence of the input sequence that matches the&#10;     * pattern with the result of applying the given replacer function to the&#10;     * match result of this matcher corresponding to that subsequence.&#10;     * Exceptions thrown by the replace function are relayed to the caller.&#10;     *&#10;     * <p> This method first resets this matcher.  It then scans the input&#10;     * sequence looking for a match of the pattern.  Characters that are not&#10;     * part of the match are appended directly to the result string; the match&#10;     * is replaced in the result by the applying the replacer function that&#10;     * returns a replacement string.  The replacement string may contain&#10;     * references to captured subsequences as in the {@link #appendReplacement&#10;     * appendReplacement} method.&#10;     *&#10;     * <p>Note that backslashes ({@code \}) and dollar signs ({@code $}) in&#10;     * the replacement string may cause the results to be different than if it&#10;     * were being treated as a literal replacement string. Dollar signs may be&#10;     * treated as references to captured subsequences as described above, and&#10;     * backslashes are used to escape literal characters in the replacement&#10;     * string.&#10;     *&#10;     * <p> Given the regular expression {@code dog}, the input&#10;     * {@code &#34;zzzdogzzzdogzzz&#34;}, and the function&#10;     * {@code mr -> mr.group().toUpperCase()}, an invocation of this method on&#10;     * a matcher for that expression would yield the string&#10;     * {@code &#34;zzzDOGzzzdogzzz&#34;}.&#10;     *&#10;     * <p> Invoking this method changes this matcher's state.  If the matcher&#10;     * is to be used in further matching operations then it should first be&#10;     * reset.&#10;     *&#10;     * <p> The replacer function should not modify this matcher's state during&#10;     * replacement.  This method will, on a best-effort basis, throw a&#10;     * {@link java.util.ConcurrentModificationException} if such modification is&#10;     * detected.&#10;     *&#10;     * <p> The state of the match result passed to the replacer function is&#10;     * guaranteed to be constant only for the duration of the replacer function&#10;     * call and only if the replacer function does not modify this matcher's&#10;     * state.&#10;     *&#10;     * @implNote&#10;     * This implementation applies the replacer function to this matcher, which&#10;     * is an instance of {@code MatchResult}.&#10;     *&#10;     * @param  replacer&#10;     *         The function to be applied to the match result of this matcher&#10;     *         that returns a replacement string.&#10;     * @return  The string constructed by replacing the first matching&#10;     *          subsequence with the result of applying the replacer function to&#10;     *          the matched subsequence, substituting captured subsequences as&#10;     *          needed.&#10;     * @throws NullPointerException if the replacer function is null&#10;     * @throws ConcurrentModificationException if it is detected, on a&#10;     *         best-effort basis, that the replacer function modified this&#10;     *         matcher's state&#10;     * @since 9&#10;     "
  ]
  node [
    id 854
    label "public Matcher region(int start, int end)"
    type "method"
    comment "&#10;     * Sets the limits of this matcher's region. The region is the part of the&#10;     * input sequence that will be searched to find a match. Invoking this&#10;     * method resets the matcher, and then sets the region to start at the&#10;     * index specified by the {@code start} parameter and end at the&#10;     * index specified by the {@code end} parameter.&#10;     *&#10;     * <p>Depending on the transparency and anchoring being used (see&#10;     * {@link #useTransparentBounds(boolean) useTransparentBounds} and&#10;     * {@link #useAnchoringBounds(boolean) useAnchoringBounds}), certain&#10;     * constructs such as anchors may behave differently at or around the&#10;     * boundaries of the region.&#10;     *&#10;     * @param  start&#10;     *         The index to start searching at (inclusive)&#10;     * @param  end&#10;     *         The index to end searching at (exclusive)&#10;     * @throws  IndexOutOfBoundsException&#10;     *          If start or end is less than zero, if&#10;     *          start is greater than the length of the input sequence, if&#10;     *          end is greater than the length of the input sequence, or if&#10;     *          start is greater than end.&#10;     * @return  this matcher&#10;     * @since 1.5&#10;     "
  ]
  node [
    id 855
    label "useTransparentBounds(boolean)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 856
    label "useAnchoringBounds(boolean)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 857
    label "public int regionStart()"
    type "method"
    comment "&#10;     * Reports the start index of this matcher's region. The&#10;     * searches this matcher conducts are limited to finding matches&#10;     * within {@link #regionStart() regionStart} (inclusive) and&#10;     * {@link #regionEnd() regionEnd} (exclusive).&#10;     *&#10;     * @return  The starting point of this matcher's region&#10;     * @since 1.5&#10;     "
  ]
  node [
    id 858
    label "regionEnd()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 859
    label "regionStart()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 860
    label "public int regionEnd()"
    type "method"
    comment "&#10;     * Reports the end index (exclusive) of this matcher's region.&#10;     * The searches this matcher conducts are limited to finding matches&#10;     * within {@link #regionStart() regionStart} (inclusive) and&#10;     * {@link #regionEnd() regionEnd} (exclusive).&#10;     *&#10;     * @return  the ending point of this matcher's region&#10;     * @since 1.5&#10;     "
  ]
  node [
    id 861
    label "public boolean hasTransparentBounds()"
    type "method"
    comment "&#10;     * Queries the transparency of region bounds for this matcher.&#10;     *&#10;     * <p> This method returns {@code true} if this matcher uses&#10;     * <i>transparent</i> bounds, {@code false} if it uses <i>opaque</i>&#10;     * bounds.&#10;     *&#10;     * <p> See {@link #useTransparentBounds(boolean) useTransparentBounds} for a&#10;     * description of transparent and opaque bounds.&#10;     *&#10;     * <p> By default, a matcher uses opaque region boundaries.&#10;     *&#10;     * @return {@code true} iff this matcher is using transparent bounds,&#10;     *         {@code false} otherwise.&#10;     * @see java.util.regex.Matcher#useTransparentBounds(boolean)&#10;     * @since 1.5&#10;     "
  ]
  node [
    id 862
    label "public Matcher useTransparentBounds(boolean b)"
    type "method"
    comment "&#10;     * Sets the transparency of region bounds for this matcher.&#10;     *&#10;     * <p> Invoking this method with an argument of {@code true} will set this&#10;     * matcher to use <i>transparent</i> bounds. If the boolean&#10;     * argument is {@code false}, then <i>opaque</i> bounds will be used.&#10;     *&#10;     * <p> Using transparent bounds, the boundaries of this&#10;     * matcher's region are transparent to lookahead, lookbehind,&#10;     * and boundary matching constructs. Those constructs can see beyond the&#10;     * boundaries of the region to see if a match is appropriate.&#10;     *&#10;     * <p> Using opaque bounds, the boundaries of this matcher's&#10;     * region are opaque to lookahead, lookbehind, and boundary matching&#10;     * constructs that may try to see beyond them. Those constructs cannot&#10;     * look past the boundaries so they will fail to match anything outside&#10;     * of the region.&#10;     *&#10;     * <p> By default, a matcher uses opaque bounds.&#10;     *&#10;     * @param  b a boolean indicating whether to use opaque or transparent&#10;     *         regions&#10;     * @return this matcher&#10;     * @see java.util.regex.Matcher#hasTransparentBounds&#10;     * @since 1.5&#10;     "
  ]
  node [
    id 863
    label "public boolean hasAnchoringBounds()"
    type "method"
    comment "&#10;     * Queries the anchoring of region bounds for this matcher.&#10;     *&#10;     * <p> This method returns {@code true} if this matcher uses&#10;     * <i>anchoring</i> bounds, {@code false} otherwise.&#10;     *&#10;     * <p> See {@link #useAnchoringBounds(boolean) useAnchoringBounds} for a&#10;     * description of anchoring bounds.&#10;     *&#10;     * <p> By default, a matcher uses anchoring region boundaries.&#10;     *&#10;     * @return {@code true} iff this matcher is using anchoring bounds,&#10;     *         {@code false} otherwise.&#10;     * @see java.util.regex.Matcher#useAnchoringBounds(boolean)&#10;     * @since 1.5&#10;     "
  ]
  node [
    id 864
    label "public Matcher useAnchoringBounds(boolean b)"
    type "method"
    comment "&#10;     * Sets the anchoring of region bounds for this matcher.&#10;     *&#10;     * <p> Invoking this method with an argument of {@code true} will set this&#10;     * matcher to use <i>anchoring</i> bounds. If the boolean&#10;     * argument is {@code false}, then <i>non-anchoring</i> bounds will be&#10;     * used.&#10;     *&#10;     * <p> Using anchoring bounds, the boundaries of this&#10;     * matcher's region match anchors such as ^ and $.&#10;     *&#10;     * <p> Without anchoring bounds, the boundaries of this&#10;     * matcher's region will not match anchors such as ^ and $.&#10;     *&#10;     * <p> By default, a matcher uses anchoring region boundaries.&#10;     *&#10;     * @param  b a boolean indicating whether or not to use anchoring bounds.&#10;     * @return this matcher&#10;     * @see java.util.regex.Matcher#hasAnchoringBounds&#10;     * @since 1.5&#10;     "
  ]
  node [
    id 865
    label "public boolean hitEnd()"
    type "method"
    comment "&#10;     * <p>Returns true if the end of input was hit by the search engine in&#10;     * the last match operation performed by this matcher.&#10;     *&#10;     * <p>When this method returns true, then it is possible that more input&#10;     * would have changed the result of the last search.&#10;     *&#10;     * @return  true iff the end of input was hit in the last match; false&#10;     *          otherwise&#10;     * @since 1.5&#10;     "
  ]
  node [
    id 866
    label "public boolean requireEnd()"
    type "method"
    comment "&#10;     * <p>Returns true if more input could change a positive match into a&#10;     * negative one.&#10;     *&#10;     * <p>If this method returns true, and a match was found, then more&#10;     * input could cause the match to be lost. If this method returns false&#10;     * and a match was found, then more input might change the match but the&#10;     * match won't be lost. If a match was not found, then requireEnd has no&#10;     * meaning.&#10;     *&#10;     * @return  true iff more input could change a positive match into a&#10;     *          negative one.&#10;     * @since 1.5&#10;     "
  ]
  node [
    id 867
    label " int getTextLength()"
    type "method"
    comment "&#10;     * Returns the end index of the text.&#10;     *&#10;     * @return the index after the last character in the text&#10;     "
  ]
  node [
    id 868
    label " CharSequence getSubSequence(int beginIndex, int endIndex)"
    type "method"
    comment "&#10;     * Generates a String from this matcher's input in the specified range.&#10;     *&#10;     * @param  beginIndex   the beginning index, inclusive&#10;     * @param  endIndex     the ending index, exclusive&#10;     * @return A String generated from this matcher's input&#10;     "
  ]
  node [
    id 869
    label "private Matcher reset(CharSequence input, int start, int end)"
    type "method"
    comment "&#10;     * Resets the Matcher. A new input sequence and a new region can be&#10;     * specified. Results of a previous find get lost. The next attempt to find&#10;     * an occurrence of the Pattern in the string will start at the beginning of&#10;     * the region. This is the internal version of reset() to which the several&#10;     * public versions delegate.&#10;     *&#10;     * @param input&#10;     *            the input sequence.&#10;     * @param start&#10;     *            the start of the region.&#10;     * @param end&#10;     *            the end of the region.&#10;     *&#10;     * @return the matcher itself.&#10;     "
  ]
  node [
    id 870
    label "private void ensureMatch()"
    type "method"
    comment "&#10;     * Makes sure that a successful match has been made. Is invoked internally&#10;     * from various places in the class.&#10;     *&#10;     * @throws IllegalStateException&#10;     *             if no successful match has been made.&#10;     "
  ]
  node [
    id 871
    label "public String replaceAll(String regex, String replacement)"
    type "method"
    comment "&#10;     * Replaces each substring of this string that matches the given <a&#10;     * href=&#34;../util/regex/Pattern.html#sum&#34;>regular expression</a> with the&#10;     * given replacement.&#10;     *&#10;     * <p> An invocation of this method of the form&#10;     * <i>str</i>{@code .replaceAll(}<i>regex</i>{@code ,} <i>repl</i>{@code )}&#10;     * yields exactly the same result as the expression&#10;     *&#10;     * <blockquote>&#10;     * <code>&#10;     * {@link java.util.regex.Pattern}.{@link&#10;     * java.util.regex.Pattern#compile compile}(<i>regex</i>).{@link&#10;     * java.util.regex.Pattern#matcher(java.lang.CharSequence) matcher}(<i>str</i>).{@link&#10;     * java.util.regex.Matcher#replaceAll replaceAll}(<i>repl</i>)&#10;     * </code>&#10;     * </blockquote>&#10;     *&#10;     *<p>&#10;     * Note that backslashes ({@code \}) and dollar signs ({@code $}) in the&#10;     * replacement string may cause the results to be different than if it were&#10;     * being treated as a literal replacement string; see&#10;     * {@link java.util.regex.Matcher#replaceAll Matcher.replaceAll}.&#10;     * Use {@link java.util.regex.Matcher#quoteReplacement} to suppress the special&#10;     * meaning of these characters, if desired.&#10;     *&#10;     * @param   regex&#10;     *          the regular expression to which this string is to be matched&#10;     * @param   replacement&#10;     *          the string to be substituted for each match&#10;     *&#10;     * @return  The resulting {@code String}&#10;     *&#10;     * @throws  PatternSyntaxException&#10;     *          if the regular expression's syntax is invalid&#10;     *&#10;     * @see java.util.regex.Pattern&#10;     *&#10;     * @since 1.4&#10;     * @spec JSR-51&#10;     "
  ]
  node [
    id 872
    label "public String replace(CharSequence target, CharSequence replacement)"
    type "method"
    comment "&#10;     * Replaces each substring of this string that matches the literal target&#10;     * sequence with the specified literal replacement sequence. The&#10;     * replacement proceeds from the beginning of the string to the end, for&#10;     * example, replacing &#34;aa&#34; with &#34;b&#34; in the string &#34;aaa&#34; will result in&#10;     * &#34;ba&#34; rather than &#34;ab&#34;.&#10;     *&#10;     * @param  target The sequence of char values to be replaced&#10;     * @param  replacement The replacement sequence of char values&#10;     * @return  The resulting string&#10;     * @since 1.5&#10;     "
  ]
  node [
    id 873
    label "public String[] split(String regex, int limit)"
    type "method"
    comment "&#10;     * Splits this string around matches of the given&#10;     * <a href=&#34;../util/regex/Pattern.html#sum&#34;>regular expression</a>.&#10;     *&#10;     * <p> The array returned by this method contains each substring of this&#10;     * string that is terminated by another substring that matches the given&#10;     * expression or is terminated by the end of the string.  The substrings in&#10;     * the array are in the order in which they occur in this string.  If the&#10;     * expression does not match any part of the input then the resulting array&#10;     * has just one element, namely this string.&#10;     *&#10;     * <p> When there is a positive-width match at the beginning of this&#10;     * string then an empty leading substring is included at the beginning&#10;     * of the resulting array. A zero-width match at the beginning however&#10;     * never produces such empty leading substring.&#10;     *&#10;     * <p> The {@code limit} parameter controls the number of times the&#10;     * pattern is applied and therefore affects the length of the resulting&#10;     * array.&#10;     * <ul>&#10;     *    <li><p>&#10;     *    If the <i>limit</i> is positive then the pattern will be applied&#10;     *    at most <i>limit</i>&#38;nbsp;-&#38;nbsp;1 times, the array's length will be&#10;     *    no greater than <i>limit</i>, and the array's last entry will contain&#10;     *    all input beyond the last matched delimiter.</p></li>&#10;     *&#10;     *    <li><p>&#10;     *    If the <i>limit</i> is zero then the pattern will be applied as&#10;     *    many times as possible, the array can have any length, and trailing&#10;     *    empty strings will be discarded.</p></li>&#10;     *&#10;     *    <li><p>&#10;     *    If the <i>limit</i> is negative then the pattern will be applied&#10;     *    as many times as possible and the array can have any length.</p></li>&#10;     * </ul>&#10;     *&#10;     * <p> The string {@code &#34;boo:and:foo&#34;}, for example, yields the&#10;     * following results with these parameters:&#10;     *&#10;     * <blockquote><table class=&#34;plain&#34;>&#10;     * <caption style=&#34;display:none&#34;>Split example showing regex, limit, and result</caption>&#10;     * <thead>&#10;     * <tr>&#10;     *     <th scope=&#34;col&#34;>Regex</th>&#10;     *     <th scope=&#34;col&#34;>Limit</th>&#10;     *     <th scope=&#34;col&#34;>Result</th>&#10;     * </tr>&#10;     * </thead>&#10;     * <tbody>&#10;     * <tr><th scope=&#34;row&#34; rowspan=&#34;3&#34; style=&#34;font-weight:normal&#34;>:</th>&#10;     *     <th scope=&#34;row&#34; style=&#34;font-weight:normal; text-align:right; padding-right:1em&#34;>2</th>&#10;     *     <td>{@code { &#34;boo&#34;, &#34;and:foo&#34; }}</td></tr>&#10;     * <tr><!-- : -->&#10;     *     <th scope=&#34;row&#34; style=&#34;font-weight:normal; text-align:right; padding-right:1em&#34;>5</th>&#10;     *     <td>{@code { &#34;boo&#34;, &#34;and&#34;, &#34;foo&#34; }}</td></tr>&#10;     * <tr><!-- : -->&#10;     *     <th scope=&#34;row&#34; style=&#34;font-weight:normal; text-align:right; padding-right:1em&#34;>-2</th>&#10;     *     <td>{@code { &#34;boo&#34;, &#34;and&#34;, &#34;foo&#34; }}</td></tr>&#10;     * <tr><th scope=&#34;row&#34; rowspan=&#34;3&#34; style=&#34;font-weight:normal&#34;>o</th>&#10;     *     <th scope=&#34;row&#34; style=&#34;font-weight:normal; text-align:right; padding-right:1em&#34;>5</th>&#10;     *     <td>{@code { &#34;b&#34;, &#34;&#34;, &#34;:and:f&#34;, &#34;&#34;, &#34;&#34; }}</td></tr>&#10;     * <tr><!-- o -->&#10;     *     <th scope=&#34;row&#34; style=&#34;font-weight:normal; text-align:right; padding-right:1em&#34;>-2</th>&#10;     *     <td>{@code { &#34;b&#34;, &#34;&#34;, &#34;:and:f&#34;, &#34;&#34;, &#34;&#34; }}</td></tr>&#10;     * <tr><!-- o -->&#10;     *     <th scope=&#34;row&#34; style=&#34;font-weight:normal; text-align:right; padding-right:1em&#34;>0</th>&#10;     *     <td>{@code { &#34;b&#34;, &#34;&#34;, &#34;:and:f&#34; }}</td></tr>&#10;     * </tbody>&#10;     * </table></blockquote>&#10;     *&#10;     * <p> An invocation of this method of the form&#10;     * <i>str.</i>{@code split(}<i>regex</i>{@code ,}&#38;nbsp;<i>n</i>{@code )}&#10;     * yields the same result as the expression&#10;     *&#10;     * <blockquote>&#10;     * <code>&#10;     * {@link java.util.regex.Pattern}.{@link&#10;     * java.util.regex.Pattern#compile compile}(<i>regex</i>).{@link&#10;     * java.util.regex.Pattern#split(java.lang.CharSequence,int) split}(<i>str</i>,&#38;nbsp;<i>n</i>)&#10;     * </code>&#10;     * </blockquote>&#10;     *&#10;     *&#10;     * @param  regex&#10;     *         the delimiting regular expression&#10;     *&#10;     * @param  limit&#10;     *         the result threshold, as described above&#10;     *&#10;     * @return  the array of strings computed by splitting this string&#10;     *          around matches of the given regular expression&#10;     *&#10;     * @throws  PatternSyntaxException&#10;     *          if the regular expression's syntax is invalid&#10;     *&#10;     * @see java.util.regex.Pattern&#10;     *&#10;     * @since 1.4&#10;     * @spec JSR-51&#10;     "
  ]
  node [
    id 874
    label "public String[] split(String regex)"
    type "method"
    comment "&#10;     * Splits this string around matches of the given <a&#10;     * href=&#34;../util/regex/Pattern.html#sum&#34;>regular expression</a>.&#10;     *&#10;     * <p> This method works as if by invoking the two-argument {@link&#10;     * #split(String, int) split} method with the given expression and a limit&#10;     * argument of zero.  Trailing empty strings are therefore not included in&#10;     * the resulting array.&#10;     *&#10;     * <p> The string {@code &#34;boo:and:foo&#34;}, for example, yields the following&#10;     * results with these expressions:&#10;     *&#10;     * <blockquote><table class=&#34;plain&#34;>&#10;     * <caption style=&#34;display:none&#34;>Split examples showing regex and result</caption>&#10;     * <thead>&#10;     * <tr>&#10;     *  <th scope=&#34;col&#34;>Regex</th>&#10;     *  <th scope=&#34;col&#34;>Result</th>&#10;     * </tr>&#10;     * </thead>&#10;     * <tbody>&#10;     * <tr><th scope=&#34;row&#34; style=&#34;text-weight:normal&#34;>:</th>&#10;     *     <td>{@code { &#34;boo&#34;, &#34;and&#34;, &#34;foo&#34; }}</td></tr>&#10;     * <tr><th scope=&#34;row&#34; style=&#34;text-weight:normal&#34;>o</th>&#10;     *     <td>{@code { &#34;b&#34;, &#34;&#34;, &#34;:and:f&#34; }}</td></tr>&#10;     * </tbody>&#10;     * </table></blockquote>&#10;     *&#10;     *&#10;     * @param  regex&#10;     *         the delimiting regular expression&#10;     *&#10;     * @return  the array of strings computed by splitting this string&#10;     *          around matches of the given regular expression&#10;     *&#10;     * @throws  PatternSyntaxException&#10;     *          if the regular expression's syntax is invalid&#10;     *&#10;     * @see java.util.regex.Pattern&#10;     *&#10;     * @since 1.4&#10;     * @spec JSR-51&#10;     "
  ]
  node [
    id 875
    label "split(String"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 876
    label "public static String join(CharSequence delimiter, CharSequence... elements)"
    type "method"
    comment "&#10;     * Returns a new String composed of copies of the&#10;     * {@code CharSequence elements} joined together with a copy of&#10;     * the specified {@code delimiter}.&#10;     *&#10;     * <blockquote>For example,&#10;     * <pre>{@code&#10;     *     String message = String.join(&#34;-&#34;, &#34;Java&#34;, &#34;is&#34;, &#34;cool&#34;);&#10;     *     // message returned is: &#34;Java-is-cool&#34;&#10;     * }</pre></blockquote>&#10;     *&#10;     * Note that if an element is null, then {@code &#34;null&#34;} is added.&#10;     *&#10;     * @param  delimiter the delimiter that separates each element&#10;     * @param  elements the elements to join together.&#10;     *&#10;     * @return a new {@code String} that is composed of the {@code elements}&#10;     *         separated by the {@code delimiter}&#10;     *&#10;     * @throws NullPointerException If {@code delimiter} or {@code elements}&#10;     *         is {@code null}&#10;     *&#10;     * @see java.util.StringJoiner&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 877
    label "public static String join(CharSequence delimiter, Iterable<? extends CharSequence> elements)"
    type "method"
    comment "&#10;     * Returns a new {@code String} composed of copies of the&#10;     * {@code CharSequence elements} joined together with a copy of the&#10;     * specified {@code delimiter}.&#10;     *&#10;     * <blockquote>For example,&#10;     * <pre>{@code&#10;     *     List<String> strings = List.of(&#34;Java&#34;, &#34;is&#34;, &#34;cool&#34;);&#10;     *     String message = String.join(&#34; &#34;, strings);&#10;     *     //message returned is: &#34;Java is cool&#34;&#10;     *&#10;     *     Set<String> strings =&#10;     *         new LinkedHashSet<>(List.of(&#34;Java&#34;, &#34;is&#34;, &#34;very&#34;, &#34;cool&#34;));&#10;     *     String message = String.join(&#34;-&#34;, strings);&#10;     *     //message returned is: &#34;Java-is-very-cool&#34;&#10;     * }</pre></blockquote>&#10;     *&#10;     * Note that if an individual element is {@code null}, then {@code &#34;null&#34;} is added.&#10;     *&#10;     * @param  delimiter a sequence of characters that is used to separate each&#10;     *         of the {@code elements} in the resulting {@code String}&#10;     * @param  elements an {@code Iterable} that will have its {@code elements}&#10;     *         joined together.&#10;     *&#10;     * @return a new {@code String} that is composed from the {@code elements}&#10;     *         argument&#10;     *&#10;     * @throws NullPointerException If {@code delimiter} or {@code elements}&#10;     *         is {@code null}&#10;     *&#10;     * @see    #join(CharSequence,CharSequence...)&#10;     * @see    java.util.StringJoiner&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 878
    label "public String toLowerCase(Locale locale)"
    type "method"
    comment "&#10;     * Converts all of the characters in this {@code String} to lower&#10;     * case using the rules of the given {@code Locale}.  Case mapping is based&#10;     * on the Unicode Standard version specified by the {@link java.lang.Character Character}&#10;     * class. Since case mappings are not always 1:1 char mappings, the resulting&#10;     * {@code String} may be a different length than the original {@code String}.&#10;     * <p>&#10;     * Examples of lowercase  mappings are in the following table:&#10;     * <table class=&#34;plain&#34;>&#10;     * <caption style=&#34;display:none&#34;>Lowercase mapping examples showing language code of locale, upper case, lower case, and description</caption>&#10;     * <thead>&#10;     * <tr>&#10;     *   <th scope=&#34;col&#34;>Language Code of Locale</th>&#10;     *   <th scope=&#34;col&#34;>Upper Case</th>&#10;     *   <th scope=&#34;col&#34;>Lower Case</th>&#10;     *   <th scope=&#34;col&#34;>Description</th>&#10;     * </tr>&#10;     * </thead>&#10;     * <tbody>&#10;     * <tr>&#10;     *   <td>tr (Turkish)</td>&#10;     *   <th scope=&#34;row&#34; style=&#34;font-weight:normal; text-align:left&#34;>&#38;#92;u0130</th>&#10;     *   <td>&#38;#92;u0069</td>&#10;     *   <td>capital letter I with dot above -&#38;gt; small letter i</td>&#10;     * </tr>&#10;     * <tr>&#10;     *   <td>tr (Turkish)</td>&#10;     *   <th scope=&#34;row&#34; style=&#34;font-weight:normal; text-align:left&#34;>&#38;#92;u0049</th>&#10;     *   <td>&#38;#92;u0131</td>&#10;     *   <td>capital letter I -&#38;gt; small letter dotless i </td>&#10;     * </tr>&#10;     * <tr>&#10;     *   <td>(all)</td>&#10;     *   <th scope=&#34;row&#34; style=&#34;font-weight:normal; text-align:left&#34;>French Fries</th>&#10;     *   <td>french fries</td>&#10;     *   <td>lowercased all chars in String</td>&#10;     * </tr>&#10;     * <tr>&#10;     *   <td>(all)</td>&#10;     *   <th scope=&#34;row&#34; style=&#34;font-weight:normal; text-align:left&#34;>&#10;     *       &#38;Iota;&#38;Chi;&#38;Theta;&#38;Upsilon;&#38;Sigma;</th>&#10;     *   <td>&#38;iota;&#38;chi;&#38;theta;&#38;upsilon;&#38;sigma;</td>&#10;     *   <td>lowercased all chars in String</td>&#10;     * </tr>&#10;     * </tbody>&#10;     * </table>&#10;     *&#10;     * @param locale use the case transformation rules for this locale&#10;     * @return the {@code String}, converted to lowercase.&#10;     * @see     java.lang.String#toLowerCase()&#10;     * @see     java.lang.String#toUpperCase()&#10;     * @see     java.lang.String#toUpperCase(Locale)&#10;     * @since   1.1&#10;     "
  ]
  node [
    id 879
    label "java.lang.Character"
    type "class"
    comment "&#10; * The {@code Character} class wraps a value of the primitive&#10; * type {@code char} in an object. An object of class&#10; * {@code Character} contains a single field whose type is&#10; * {@code char}.&#10; * <p>&#10; * In addition, this class provides several methods for determining&#10; * a character's category (lowercase letter, digit, etc.) and for converting&#10; * characters from uppercase to lowercase and vice versa.&#10; * <p>&#10; * Character information is based on the Unicode Standard&#10; * <p>&#10; * The methods and data of class {@code Character} are defined by&#10; * the information in the <i>UnicodeData</i> file that is part of the&#10; * Unicode Character Database maintained by the Unicode&#10; * Consortium. This file specifies various properties including name&#10; * and general category for every defined Unicode code point or&#10; * character range.&#10; * <p>&#10; * The file and its description are available from the Unicode Consortium at:&#10; * <ul>&#10; * <li><a href=&#34;http://www.unicode.org&#34;>http://www.unicode.org</a>&#10; * </ul>&#10; *&#10; * <h2><a id=&#34;conformance&#34;>Unicode Conformance</a></h2>&#10; * <p>&#10; * The fields and methods of class {@code Character} are defined in terms&#10; * of character information from the Unicode Standard, specifically the&#10; * <i>UnicodeData</i> file that is part of the Unicode Character Database.&#10; * This file specifies properties including name and category for every&#10; * assigned Unicode code point or character range. The file is available&#10; * from the Unicode Consortium at&#10; * <a href=&#34;http://www.unicode.org&#34;>http://www.unicode.org</a>.&#10; * <p>&#10; * Character information is based on the Unicode Standard, version 13.0.&#10; * <p>&#10; * The Java platform has supported different versions of the Unicode&#10; * Standard over time. Upgrades to newer versions of the Unicode Standard&#10; * occurred in the following Java releases, each indicating the new version:&#10; * <table class=&#34;striped&#34;>&#10; * <caption style=&#34;display:none&#34;>Shows Java releases and supported Unicode versions</caption>&#10; * <thead>&#10; * <tr><th scope=&#34;col&#34;>Java release</th>&#10; *     <th scope=&#34;col&#34;>Unicode version</th></tr>&#10; * </thead>&#10; * <tbody>&#10; * <tr><td>Java SE 15</td>&#10; *     <td>Unicode 13.0</td></tr>&#10; * <tr><td>Java SE 13</td>&#10; *     <td>Unicode 12.1</td></tr>&#10; * <tr><td>Java SE 12</td>&#10; *     <td>Unicode 11.0</td></tr>&#10; * <tr><td>Java SE 11</td>&#10; *     <td>Unicode 10.0</td></tr>&#10; * <tr><td>Java SE 9</td>&#10; *     <td>Unicode 8.0</td></tr>&#10; * <tr><td>Java SE 8</td>&#10; *     <td>Unicode 6.2</td></tr>&#10; * <tr><td>Java SE 7</td>&#10; *     <td>Unicode 6.0</td></tr>&#10; * <tr><td>Java SE 5.0</td>&#10; *     <td>Unicode 4.0</td></tr>&#10; * <tr><td>Java SE 1.4</td>&#10; *     <td>Unicode 3.0</td></tr>&#10; * <tr><td>JDK 1.1</td>&#10; *     <td>Unicode 2.0</td></tr>&#10; * <tr><td>JDK 1.0.2</td>&#10; *     <td>Unicode 1.1.5</td></tr>&#10; * </tbody>&#10; * </table>&#10; * Variations from these base Unicode versions, such as recognized appendixes,&#10; * are documented elsewhere.&#10; * <h2><a id=&#34;unicode&#34;>Unicode Character Representations</a></h2>&#10; *&#10; * <p>The {@code char} data type (and therefore the value that a&#10; * {@code Character} object encapsulates) are based on the&#10; * original Unicode specification, which defined characters as&#10; * fixed-width 16-bit entities. The Unicode Standard has since been&#10; * changed to allow for characters whose representation requires more&#10; * than 16 bits.  The range of legal <em>code point</em>s is now&#10; * U+0000 to U+10FFFF, known as <em>Unicode scalar value</em>.&#10; * (Refer to the <a&#10; * href=&#34;http://www.unicode.org/reports/tr27/#notation&#34;><i>&#10; * definition</i></a> of the U+<i>n</i> notation in the Unicode&#10; * Standard.)&#10; *&#10; * <p><a id=&#34;BMP&#34;>The set of characters from U+0000 to U+FFFF</a> is&#10; * sometimes referred to as the <em>Basic Multilingual Plane (BMP)</em>.&#10; * <a id=&#34;supplementary&#34;>Characters</a> whose code points are greater&#10; * than U+FFFF are called <em>supplementary character</em>s.  The Java&#10; * platform uses the UTF-16 representation in {@code char} arrays and&#10; * in the {@code String} and {@code StringBuffer} classes. In&#10; * this representation, supplementary characters are represented as a pair&#10; * of {@code char} values, the first from the <em>high-surrogates</em>&#10; * range, (&#38;#92;uD800-&#38;#92;uDBFF), the second from the&#10; * <em>low-surrogates</em> range (&#38;#92;uDC00-&#38;#92;uDFFF).&#10; *&#10; * <p>A {@code char} value, therefore, represents Basic&#10; * Multilingual Plane (BMP) code points, including the surrogate&#10; * code points, or code units of the UTF-16 encoding. An&#10; * {@code int} value represents all Unicode code points,&#10; * including supplementary code points. The lower (least significant)&#10; * 21 bits of {@code int} are used to represent Unicode code&#10; * points and the upper (most significant) 11 bits must be zero.&#10; * Unless otherwise specified, the behavior with respect to&#10; * supplementary characters and surrogate {@code char} values is&#10; * as follows:&#10; *&#10; * <ul>&#10; * <li>The methods that only accept a {@code char} value cannot support&#10; * supplementary characters. They treat {@code char} values from the&#10; * surrogate ranges as undefined characters. For example,&#10; * {@code Character.isLetter('\u005CuD840')} returns {@code false}, even though&#10; * this specific value if followed by any low-surrogate value in a string&#10; * would represent a letter.&#10; *&#10; * <li>The methods that accept an {@code int} value support all&#10; * Unicode characters, including supplementary characters. For&#10; * example, {@code Character.isLetter(0x2F81A)} returns&#10; * {@code true} because the code point value represents a letter&#10; * (a CJK ideograph).&#10; * </ul>&#10; *&#10; * <p>In the Java SE API documentation, <em>Unicode code point</em> is&#10; * used for character values in the range between U+0000 and U+10FFFF,&#10; * and <em>Unicode code unit</em> is used for 16-bit&#10; * {@code char} values that are code units of the <em>UTF-16</em>&#10; * encoding. For more information on Unicode terminology, refer to the&#10; * <a href=&#34;http://www.unicode.org/glossary/&#34;>Unicode Glossary</a>.&#10; *&#10; * <!-- Android-removed: paragraph on ValueBased&#10; * <p>This is a <a href=&#34;{@docRoot}/java.base/java/lang/doc-files/ValueBased.html&#34;>value-based</a>&#10; * class; programmers should treat instances that are&#10; * {@linkplain #equals(Object) equal} as interchangeable and should not&#10; * use instances for synchronization, or unpredictable behavior may&#10; * occur. For example, in a future release, synchronization may fail.&#10; * -->&#10; *&#10; * @author  Lee Boynton&#10; * @author  Guy Steele&#10; * @author  Akira Tanaka&#10; * @author  Martin Buchholz&#10; * @author  Ulf Zibis&#10; * @since   1.0&#10; "
  ]
  node [
    id 880
    label "public static Character valueOf(char c)"
    type "method"
    comment "&#10;     * Returns a {@code Character} instance representing the specified&#10;     * {@code char} value.&#10;     * If a new {@code Character} instance is not required, this method&#10;     * should generally be used in preference to the constructor&#10;     * {@link #Character(char)}, as this method is likely to yield&#10;     * significantly better space and time performance by caching&#10;     * frequently requested values.&#10;     *&#10;     * This method will always cache values in the range {@code&#10;     * '\u005Cu0000'} to {@code '\u005Cu007F'}, inclusive, and may&#10;     * cache other values outside of this range.&#10;     *&#10;     * @param  c a char value.&#10;     * @return a {@code Character} instance representing {@code c}.&#10;     * @since  1.5&#10;     "
  ]
  node [
    id 881
    label "Character(char)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 882
    label "public char charValue()"
    type "method"
    comment "&#10;     * Returns the value of this {@code Character} object.&#10;     * @return  the primitive {@code char} value represented by&#10;     *          this object.&#10;     "
  ]
  node [
    id 883
    label "public static int hashCode(char value)"
    type "method"
    comment "&#10;     * Returns a hash code for a {@code char} value; compatible with&#10;     * {@code Character.hashCode()}.&#10;     *&#10;     * @since 1.8&#10;     *&#10;     * @param value The {@code char} for which to return a hash code.&#10;     * @return a hash code value for a {@code char} value.&#10;     "
  ]
  node [
    id 884
    label "public boolean equals(Object obj)"
    type "method"
    comment "&#10;     * Compares this object against the specified object.  The result&#10;     * is {@code true} if and only if the argument is not&#10;     * {@code null} and is a {@code Double} object that&#10;     * represents a {@code double} that has the same value as the&#10;     * {@code double} represented by this object. For this&#10;     * purpose, two {@code double} values are considered to be&#10;     * the same if and only if the method {@link&#10;     * #doubleToLongBits(double)} returns the identical&#10;     * {@code long} value when applied to each.&#10;     *&#10;     * @apiNote&#10;     * This method is defined in terms of {@link&#10;     * #doubleToLongBits(double)} rather than the {@code ==} operator&#10;     * on {@code double} values since the {@code ==} operator does&#10;     * <em>not</em> define an equivalence relation and to satisfy the&#10;     * {@linkplain Object#equals equals contract} an equivalence&#10;     * relation must be implemented; see <a&#10;     * href=&#34;#equivalenceRelation&#34;>this discussion</a> for details of&#10;     * floating-point equality and equivalence.&#10;     *&#10;     * @see java.lang.Double#doubleToLongBits(double)&#10;     * @jls 15.21.1 Numerical Equality Operators == and !=&#10;     "
  ]
  node [
    id 885
    label "public static String toString(char c)"
    type "method"
    comment "&#10;     * Returns a {@code String} object representing the&#10;     * specified {@code char}.  The result is a string of length&#10;     * 1 consisting solely of the specified {@code char}.&#10;     *&#10;     * @param c the {@code char} to be converted&#10;     * @return the string representation of the specified {@code char}&#10;     * @since 1.4&#10;     "
  ]
  node [
    id 886
    label "public static String toString(int codePoint)"
    type "method"
    comment "&#10;     * Returns a {@code String} object representing the&#10;     * specified character (Unicode code point).  The result is a string of&#10;     * length 1 or 2, consisting solely of the specified {@code codePoint}.&#10;     *&#10;     * @param codePoint the {@code codePoint} to be converted&#10;     * @return the string representation of the specified {@code codePoint}&#10;     * @throws IllegalArgumentException if the specified&#10;     *      {@code codePoint} is not a {@linkplain #isValidCodePoint&#10;     *      valid Unicode code point}.&#10;     * @since 11&#10;     "
  ]
  node [
    id 887
    label "public static boolean isValidCodePoint(int codePoint)"
    type "method"
    comment "&#10;     * Determines whether the specified code point is a valid&#10;     * <a href=&#34;http://www.unicode.org/glossary/#code_point&#34;>&#10;     * Unicode code point value</a>.&#10;     *&#10;     * @param  codePoint the Unicode code point to be tested&#10;     * @return {@code true} if the specified code point value is between&#10;     *         {@link #MIN_CODE_POINT} and&#10;     *         {@link #MAX_CODE_POINT} inclusive;&#10;     *         {@code false} otherwise.&#10;     * @since  1.5&#10;     "
  ]
  node [
    id 888
    label "MIN_CODE_POINT"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 889
    label "MAX_CODE_POINT"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 890
    label "public static boolean isBmpCodePoint(int codePoint)"
    type "method"
    comment "&#10;     * Determines whether the specified character (Unicode code point)&#10;     * is in the <a href=&#34;#BMP&#34;>Basic Multilingual Plane (BMP)</a>.&#10;     * Such code points can be represented using a single {@code char}.&#10;     *&#10;     * @param  codePoint the character (Unicode code point) to be to&#10;     * @return {@code true} if the specified code point is between&#10;     *         {@link #MIN_VALUE} and {@link #MAX_VALUE} inclusive;&#10;     *         {@code false} otherwise.&#10;     * @since  1.7&#10;     "
  ]
  node [
    id 891
    label "MIN_VALUE"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 892
    label "public static boolean isSupplementaryCodePoint(int codePoint)"
    type "method"
    comment "&#10;     * Determines whether the specified character (Unicode code point)&#10;     * is in the <a href=&#34;#supplementary&#34;>supplementary character</a> range.&#10;     *&#10;     * @param  codePoint the character (Unicode code point) to be tested&#10;     * @return {@code true} if the specified code point is between&#10;     *         {@link #MIN_SUPPLEMENTARY_CODE_POINT} and&#10;     *         {@link #MAX_CODE_POINT} inclusive;&#10;     *         {@code false} otherwise.&#10;     * @since  1.5&#10;     "
  ]
  node [
    id 893
    label "MIN_SUPPLEMENTARY_CODE_POINT"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 894
    label "public static boolean isHighSurrogate(char ch)"
    type "method"
    comment "&#10;     * Determines if the given {@code char} value is a&#10;     * <a href=&#34;http://www.unicode.org/glossary/#high_surrogate_code_unit&#34;>&#10;     * Unicode high-surrogate code unit</a>&#10;     * (also known as <i>leading-surrogate code unit</i>).&#10;     *&#10;     * <p>Such values do not represent characters by themselves,&#10;     * but are used in the representation of&#10;     * <a href=&#34;#supplementary&#34;>supplementary characters</a>&#10;     * in the UTF-16 encoding.&#10;     *&#10;     * @param  ch the {@code char} value to be tested.&#10;     * @return {@code true} if the {@code char} value is between&#10;     *         {@link #MIN_HIGH_SURROGATE} and&#10;     *         {@link #MAX_HIGH_SURROGATE} inclusive;&#10;     *         {@code false} otherwise.&#10;     * @see    Character#isLowSurrogate(char)&#10;     * @see    Character.UnicodeBlock#of(int)&#10;     * @since  1.5&#10;     "
  ]
  node [
    id 895
    label "MIN_HIGH_SURROGATE"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 896
    label "MAX_HIGH_SURROGATE"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 897
    label "public static boolean isLowSurrogate(char ch)"
    type "method"
    comment "&#10;     * Determines if the given {@code char} value is a&#10;     * <a href=&#34;http://www.unicode.org/glossary/#low_surrogate_code_unit&#34;>&#10;     * Unicode low-surrogate code unit</a>&#10;     * (also known as <i>trailing-surrogate code unit</i>).&#10;     *&#10;     * <p>Such values do not represent characters by themselves,&#10;     * but are used in the representation of&#10;     * <a href=&#34;#supplementary&#34;>supplementary characters</a>&#10;     * in the UTF-16 encoding.&#10;     *&#10;     * @param  ch the {@code char} value to be tested.&#10;     * @return {@code true} if the {@code char} value is between&#10;     *         {@link #MIN_LOW_SURROGATE} and&#10;     *         {@link #MAX_LOW_SURROGATE} inclusive;&#10;     *         {@code false} otherwise.&#10;     * @see    Character#isHighSurrogate(char)&#10;     * @since  1.5&#10;     "
  ]
  node [
    id 898
    label "MAX_LOW_SURROGATE"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 899
    label "MIN_LOW_SURROGATE"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 900
    label "public static boolean isSurrogate(char ch)"
    type "method"
    comment "&#10;     * Determines if the given {@code char} value is a Unicode&#10;     * <i>surrogate code unit</i>.&#10;     *&#10;     * <p>Such values do not represent characters by themselves,&#10;     * but are used in the representation of&#10;     * <a href=&#34;#supplementary&#34;>supplementary characters</a>&#10;     * in the UTF-16 encoding.&#10;     *&#10;     * <p>A char value is a surrogate code unit if and only if it is either&#10;     * a {@linkplain #isLowSurrogate(char) low-surrogate code unit} or&#10;     * a {@linkplain #isHighSurrogate(char) high-surrogate code unit}.&#10;     *&#10;     * @param  ch the {@code char} value to be tested.&#10;     * @return {@code true} if the {@code char} value is between&#10;     *         {@link #MIN_SURROGATE} and&#10;     *         {@link #MAX_SURROGATE} inclusive;&#10;     *         {@code false} otherwise.&#10;     * @since  1.7&#10;     "
  ]
  node [
    id 901
    label "MIN_SURROGATE"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 902
    label "MAX_SURROGATE"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 903
    label "public static boolean isSurrogatePair(char high, char low)"
    type "method"
    comment "&#10;     * Determines whether the specified pair of {@code char}&#10;     * values is a valid&#10;     * <a href=&#34;http://www.unicode.org/glossary/#surrogate_pair&#34;>&#10;     * Unicode surrogate pair</a>.&#10;     *&#10;     * <p>This method is equivalent to the expression:&#10;     * <blockquote><pre>{@code&#10;     * isHighSurrogate(high) &#38;&#38; isLowSurrogate(low)&#10;     * }</pre></blockquote>&#10;     *&#10;     * @param  high the high-surrogate code value to be tested&#10;     * @param  low the low-surrogate code value to be tested&#10;     * @return {@code true} if the specified high and&#10;     * low-surrogate code values represent a valid surrogate pair;&#10;     * {@code false} otherwise.&#10;     * @since  1.5&#10;     "
  ]
  node [
    id 904
    label "public static int charCount(int codePoint)"
    type "method"
    comment "&#10;     * Determines the number of {@code char} values needed to&#10;     * represent the specified character (Unicode code point). If the&#10;     * specified character is equal to or greater than 0x10000, then&#10;     * the method returns 2. Otherwise, the method returns 1.&#10;     *&#10;     * <p>This method doesn't validate the specified character to be a&#10;     * valid Unicode code point. The caller must validate the&#10;     * character value using {@link #isValidCodePoint(int) isValidCodePoint}&#10;     * if necessary.&#10;     *&#10;     * @param   codePoint the character (Unicode code point) to be tested.&#10;     * @return  2 if the character is a valid supplementary character; 1 otherwise.&#10;     * @see     Character#isSupplementaryCodePoint(int)&#10;     * @since   1.5&#10;     "
  ]
  node [
    id 905
    label "isValidCodePoint(int)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 906
    label "public static int toCodePoint(char high, char low)"
    type "method"
    comment "&#10;     * Converts the specified surrogate pair to its supplementary code&#10;     * point value. This method does not validate the specified&#10;     * surrogate pair. The caller must validate it using {@link&#10;     * #isSurrogatePair(char, char) isSurrogatePair} if necessary.&#10;     *&#10;     * @param  high the high-surrogate code unit&#10;     * @param  low the low-surrogate code unit&#10;     * @return the supplementary code point composed from the&#10;     *         specified surrogate pair.&#10;     * @since  1.5&#10;     "
  ]
  node [
    id 907
    label "isSurrogatePair(char"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 908
    label "public static int codePointAt(CharSequence seq, int index)"
    type "method"
    comment "&#10;     * Returns the code point at the given index of the&#10;     * {@code CharSequence}. If the {@code char} value at&#10;     * the given index in the {@code CharSequence} is in the&#10;     * high-surrogate range, the following index is less than the&#10;     * length of the {@code CharSequence}, and the&#10;     * {@code char} value at the following index is in the&#10;     * low-surrogate range, then the supplementary code point&#10;     * corresponding to this surrogate pair is returned. Otherwise,&#10;     * the {@code char} value at the given index is returned.&#10;     *&#10;     * @param seq a sequence of {@code char} values (Unicode code&#10;     * units)&#10;     * @param index the index to the {@code char} values (Unicode&#10;     * code units) in {@code seq} to be converted&#10;     * @return the Unicode code point at the given index&#10;     * @throws NullPointerException if {@code seq} is null.&#10;     * @throws IndexOutOfBoundsException if the value&#10;     * {@code index} is negative or not less than&#10;     * {@link CharSequence#length() seq.length()}.&#10;     * @since  1.5&#10;     "
  ]
  node [
    id 909
    label "public static int codePointAt(char[] a, int index)"
    type "method"
    comment "&#10;     * Returns the code point at the given index of the&#10;     * {@code char} array. If the {@code char} value at&#10;     * the given index in the {@code char} array is in the&#10;     * high-surrogate range, the following index is less than the&#10;     * length of the {@code char} array, and the&#10;     * {@code char} value at the following index is in the&#10;     * low-surrogate range, then the supplementary code point&#10;     * corresponding to this surrogate pair is returned. Otherwise,&#10;     * the {@code char} value at the given index is returned.&#10;     *&#10;     * @param a the {@code char} array&#10;     * @param index the index to the {@code char} values (Unicode&#10;     * code units) in the {@code char} array to be converted&#10;     * @return the Unicode code point at the given index&#10;     * @throws NullPointerException if {@code a} is null.&#10;     * @throws IndexOutOfBoundsException if the value&#10;     * {@code index} is negative or not less than&#10;     * the length of the {@code char} array.&#10;     * @since  1.5&#10;     "
  ]
  node [
    id 910
    label "public static int codePointAt(char[] a, int index, int limit)"
    type "method"
    comment "&#10;     * Returns the code point at the given index of the&#10;     * {@code char} array, where only array elements with&#10;     * {@code index} less than {@code limit} can be used. If&#10;     * the {@code char} value at the given index in the&#10;     * {@code char} array is in the high-surrogate range, the&#10;     * following index is less than the {@code limit}, and the&#10;     * {@code char} value at the following index is in the&#10;     * low-surrogate range, then the supplementary code point&#10;     * corresponding to this surrogate pair is returned. Otherwise,&#10;     * the {@code char} value at the given index is returned.&#10;     *&#10;     * @param a the {@code char} array&#10;     * @param index the index to the {@code char} values (Unicode&#10;     * code units) in the {@code char} array to be converted&#10;     * @param limit the index after the last array element that&#10;     * can be used in the {@code char} array&#10;     * @return the Unicode code point at the given index&#10;     * @throws NullPointerException if {@code a} is null.&#10;     * @throws IndexOutOfBoundsException if the {@code index}&#10;     * argument is negative or not less than the {@code limit}&#10;     * argument, or if the {@code limit} argument is negative or&#10;     * greater than the length of the {@code char} array.&#10;     * @since  1.5&#10;     "
  ]
  node [
    id 911
    label " static int codePointAtImpl(char[] a, int index, int limit)"
    type "method"
    comment " throws ArrayIndexOutOfBoundsException if index out of bounds"
  ]
  node [
    id 912
    label "public static int codePointBefore(CharSequence seq, int index)"
    type "method"
    comment "&#10;     * Returns the code point preceding the given index of the&#10;     * {@code CharSequence}. If the {@code char} value at&#10;     * {@code (index - 1)} in the {@code CharSequence} is in&#10;     * the low-surrogate range, {@code (index - 2)} is not&#10;     * negative, and the {@code char} value at {@code (index - 2)}&#10;     * in the {@code CharSequence} is in the&#10;     * high-surrogate range, then the supplementary code point&#10;     * corresponding to this surrogate pair is returned. Otherwise,&#10;     * the {@code char} value at {@code (index - 1)} is&#10;     * returned.&#10;     *&#10;     * @param seq the {@code CharSequence} instance&#10;     * @param index the index following the code point that should be returned&#10;     * @return the Unicode code point value before the given index.&#10;     * @throws NullPointerException if {@code seq} is null.&#10;     * @throws IndexOutOfBoundsException if the {@code index}&#10;     * argument is less than 1 or greater than {@link&#10;     * CharSequence#length() seq.length()}.&#10;     * @since  1.5&#10;     "
  ]
  node [
    id 913
    label "public static int codePointBefore(char[] a, int index)"
    type "method"
    comment "&#10;     * Returns the code point preceding the given index of the&#10;     * {@code char} array. If the {@code char} value at&#10;     * {@code (index - 1)} in the {@code char} array is in&#10;     * the low-surrogate range, {@code (index - 2)} is not&#10;     * negative, and the {@code char} value at {@code (index - 2)}&#10;     * in the {@code char} array is in the&#10;     * high-surrogate range, then the supplementary code point&#10;     * corresponding to this surrogate pair is returned. Otherwise,&#10;     * the {@code char} value at {@code (index - 1)} is&#10;     * returned.&#10;     *&#10;     * @param a the {@code char} array&#10;     * @param index the index following the code point that should be returned&#10;     * @return the Unicode code point value before the given index.&#10;     * @throws NullPointerException if {@code a} is null.&#10;     * @throws IndexOutOfBoundsException if the {@code index}&#10;     * argument is less than 1 or greater than the length of the&#10;     * {@code char} array&#10;     * @since  1.5&#10;     "
  ]
  node [
    id 914
    label "public static int codePointBefore(char[] a, int index, int start)"
    type "method"
    comment "&#10;     * Returns the code point preceding the given index of the&#10;     * {@code char} array, where only array elements with&#10;     * {@code index} greater than or equal to {@code start}&#10;     * can be used. If the {@code char} value at {@code (index - 1)}&#10;     * in the {@code char} array is in the&#10;     * low-surrogate range, {@code (index - 2)} is not less than&#10;     * {@code start}, and the {@code char} value at&#10;     * {@code (index - 2)} in the {@code char} array is in&#10;     * the high-surrogate range, then the supplementary code point&#10;     * corresponding to this surrogate pair is returned. Otherwise,&#10;     * the {@code char} value at {@code (index - 1)} is&#10;     * returned.&#10;     *&#10;     * @param a the {@code char} array&#10;     * @param index the index following the code point that should be returned&#10;     * @param start the index of the first array element in the&#10;     * {@code char} array&#10;     * @return the Unicode code point value before the given index.&#10;     * @throws NullPointerException if {@code a} is null.&#10;     * @throws IndexOutOfBoundsException if the {@code index}&#10;     * argument is not greater than the {@code start} argument or&#10;     * is greater than the length of the {@code char} array, or&#10;     * if the {@code start} argument is negative or not less than&#10;     * the length of the {@code char} array.&#10;     * @since  1.5&#10;     "
  ]
  node [
    id 915
    label " static int codePointBeforeImpl(char[] a, int index, int start)"
    type "method"
    comment " throws ArrayIndexOutOfBoundsException if index-1 out of bounds"
  ]
  node [
    id 916
    label "public static char highSurrogate(int codePoint)"
    type "method"
    comment "&#10;     * Returns the leading surrogate (a&#10;     * <a href=&#34;http://www.unicode.org/glossary/#high_surrogate_code_unit&#34;>&#10;     * high surrogate code unit</a>) of the&#10;     * <a href=&#34;http://www.unicode.org/glossary/#surrogate_pair&#34;>&#10;     * surrogate pair</a>&#10;     * representing the specified supplementary character (Unicode&#10;     * code point) in the UTF-16 encoding.  If the specified character&#10;     * is not a&#10;     * <a href=&#34;Character.html#supplementary&#34;>supplementary character</a>,&#10;     * an unspecified {@code char} is returned.&#10;     *&#10;     * <p>If&#10;     * {@link #isSupplementaryCodePoint isSupplementaryCodePoint(x)}&#10;     * is {@code true}, then&#10;     * {@link #isHighSurrogate isHighSurrogate}{@code (highSurrogate(x))} and&#10;     * {@link #toCodePoint toCodePoint}{@code (highSurrogate(x), }{@link #lowSurrogate lowSurrogate}{@code (x)) == x}&#10;     * are also always {@code true}.&#10;     *&#10;     * @param   codePoint a supplementary character (Unicode code point)&#10;     * @return  the leading surrogate code unit used to represent the&#10;     *          character in the UTF-16 encoding&#10;     * @since   1.7&#10;     "
  ]
  node [
    id 917
    label "isSupplementaryCodePoint"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 918
    label "toCodePoint"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 919
    label "lowSurrogate"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 920
    label "isHighSurrogate"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 921
    label "public static char lowSurrogate(int codePoint)"
    type "method"
    comment "&#10;     * Returns the trailing surrogate (a&#10;     * <a href=&#34;http://www.unicode.org/glossary/#low_surrogate_code_unit&#34;>&#10;     * low surrogate code unit</a>) of the&#10;     * <a href=&#34;http://www.unicode.org/glossary/#surrogate_pair&#34;>&#10;     * surrogate pair</a>&#10;     * representing the specified supplementary character (Unicode&#10;     * code point) in the UTF-16 encoding.  If the specified character&#10;     * is not a&#10;     * <a href=&#34;Character.html#supplementary&#34;>supplementary character</a>,&#10;     * an unspecified {@code char} is returned.&#10;     *&#10;     * <p>If&#10;     * {@link #isSupplementaryCodePoint isSupplementaryCodePoint(x)}&#10;     * is {@code true}, then&#10;     * {@link #isLowSurrogate isLowSurrogate}{@code (lowSurrogate(x))} and&#10;     * {@link #toCodePoint toCodePoint}{@code (}{@link #highSurrogate highSurrogate}{@code (x), lowSurrogate(x)) == x}&#10;     * are also always {@code true}.&#10;     *&#10;     * @param   codePoint a supplementary character (Unicode code point)&#10;     * @return  the trailing surrogate code unit used to represent the&#10;     *          character in the UTF-16 encoding&#10;     * @since   1.7&#10;     "
  ]
  node [
    id 922
    label "isLowSurrogate"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 923
    label "highSurrogate"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 924
    label "public static int toChars(int codePoint, char[] dst, int dstIndex)"
    type "method"
    comment "&#10;     * Converts the specified character (Unicode code point) to its&#10;     * UTF-16 representation. If the specified code point is a BMP&#10;     * (Basic Multilingual Plane or Plane 0) value, the same value is&#10;     * stored in {@code dst[dstIndex]}, and 1 is returned. If the&#10;     * specified code point is a supplementary character, its&#10;     * surrogate values are stored in {@code dst[dstIndex]}&#10;     * (high-surrogate) and {@code dst[dstIndex+1]}&#10;     * (low-surrogate), and 2 is returned.&#10;     *&#10;     * @param  codePoint the character (Unicode code point) to be converted.&#10;     * @param  dst an array of {@code char} in which the&#10;     * {@code codePoint}'s UTF-16 value is stored.&#10;     * @param dstIndex the start index into the {@code dst}&#10;     * array where the converted value is stored.&#10;     * @return 1 if the code point is a BMP code point, 2 if the&#10;     * code point is a supplementary code point.&#10;     * @throws IllegalArgumentException if the specified&#10;     * {@code codePoint} is not a valid Unicode code point.&#10;     * @throws NullPointerException if the specified {@code dst} is null.&#10;     * @throws IndexOutOfBoundsException if {@code dstIndex}&#10;     * is negative or not less than {@code dst.length}, or if&#10;     * {@code dst} at {@code dstIndex} doesn't have enough&#10;     * array element(s) to store the resulting {@code char}&#10;     * value(s). (If {@code dstIndex} is equal to&#10;     * {@code dst.length-1} and the specified&#10;     * {@code codePoint} is a supplementary character, the&#10;     * high-surrogate value is not stored in&#10;     * {@code dst[dstIndex]}.)&#10;     * @since  1.5&#10;     "
  ]
  node [
    id 925
    label "public static char[] toChars(int codePoint)"
    type "method"
    comment "&#10;     * Converts the specified character (Unicode code point) to its&#10;     * UTF-16 representation stored in a {@code char} array. If&#10;     * the specified code point is a BMP (Basic Multilingual Plane or&#10;     * Plane 0) value, the resulting {@code char} array has&#10;     * the same value as {@code codePoint}. If the specified code&#10;     * point is a supplementary code point, the resulting&#10;     * {@code char} array has the corresponding surrogate pair.&#10;     *&#10;     * @param  codePoint a Unicode code point&#10;     * @return a {@code char} array having&#10;     *         {@code codePoint}'s UTF-16 representation.&#10;     * @throws IllegalArgumentException if the specified&#10;     * {@code codePoint} is not a valid Unicode code point.&#10;     * @since  1.5&#10;     "
  ]
  node [
    id 926
    label "public static int codePointCount(CharSequence seq, int beginIndex, int endIndex)"
    type "method"
    comment "&#10;     * Returns the number of Unicode code points in the text range of&#10;     * the specified char sequence. The text range begins at the&#10;     * specified {@code beginIndex} and extends to the&#10;     * {@code char} at index {@code endIndex - 1}. Thus the&#10;     * length (in {@code char}s) of the text range is&#10;     * {@code endIndex-beginIndex}. Unpaired surrogates within&#10;     * the text range count as one code point each.&#10;     *&#10;     * @param seq the char sequence&#10;     * @param beginIndex the index to the first {@code char} of&#10;     * the text range.&#10;     * @param endIndex the index after the last {@code char} of&#10;     * the text range.&#10;     * @return the number of Unicode code points in the specified text&#10;     * range&#10;     * @throws NullPointerException if {@code seq} is null.&#10;     * @throws IndexOutOfBoundsException if the&#10;     * {@code beginIndex} is negative, or {@code endIndex}&#10;     * is larger than the length of the given sequence, or&#10;     * {@code beginIndex} is larger than {@code endIndex}.&#10;     * @since  1.5&#10;     "
  ]
  node [
    id 927
    label "public static int codePointCount(char[] a, int offset, int count)"
    type "method"
    comment "&#10;     * Returns the number of Unicode code points in a subarray of the&#10;     * {@code char} array argument. The {@code offset}&#10;     * argument is the index of the first {@code char} of the&#10;     * subarray and the {@code count} argument specifies the&#10;     * length of the subarray in {@code char}s. Unpaired&#10;     * surrogates within the subarray count as one code point each.&#10;     *&#10;     * @param a the {@code char} array&#10;     * @param offset the index of the first {@code char} in the&#10;     * given {@code char} array&#10;     * @param count the length of the subarray in {@code char}s&#10;     * @return the number of Unicode code points in the specified subarray&#10;     * @throws NullPointerException if {@code a} is null.&#10;     * @throws IndexOutOfBoundsException if {@code offset} or&#10;     * {@code count} is negative, or if {@code offset +&#10;     * count} is larger than the length of the given array.&#10;     * @since  1.5&#10;     "
  ]
  node [
    id 928
    label "public static int offsetByCodePoints(CharSequence seq, int index, int codePointOffset)"
    type "method"
    comment "&#10;     * Returns the index within the given char sequence that is offset&#10;     * from the given {@code index} by {@code codePointOffset}&#10;     * code points. Unpaired surrogates within the text range given by&#10;     * {@code index} and {@code codePointOffset} count as&#10;     * one code point each.&#10;     *&#10;     * @param seq the char sequence&#10;     * @param index the index to be offset&#10;     * @param codePointOffset the offset in code points&#10;     * @return the index within the char sequence&#10;     * @throws NullPointerException if {@code seq} is null.&#10;     * @throws IndexOutOfBoundsException if {@code index}&#10;     *   is negative or larger then the length of the char sequence,&#10;     *   or if {@code codePointOffset} is positive and the&#10;     *   subsequence starting with {@code index} has fewer than&#10;     *   {@code codePointOffset} code points, or if&#10;     *   {@code codePointOffset} is negative and the subsequence&#10;     *   before {@code index} has fewer than the absolute value&#10;     *   of {@code codePointOffset} code points.&#10;     * @since 1.5&#10;     "
  ]
  node [
    id 929
    label "public static int offsetByCodePoints(char[] a, int start, int count, int index, int codePointOffset)"
    type "method"
    comment "&#10;     * Returns the index within the given {@code char} subarray&#10;     * that is offset from the given {@code index} by&#10;     * {@code codePointOffset} code points. The&#10;     * {@code start} and {@code count} arguments specify a&#10;     * subarray of the {@code char} array. Unpaired surrogates&#10;     * within the text range given by {@code index} and&#10;     * {@code codePointOffset} count as one code point each.&#10;     *&#10;     * @param a the {@code char} array&#10;     * @param start the index of the first {@code char} of the&#10;     * subarray&#10;     * @param count the length of the subarray in {@code char}s&#10;     * @param index the index to be offset&#10;     * @param codePointOffset the offset in code points&#10;     * @return the index within the subarray&#10;     * @throws NullPointerException if {@code a} is null.&#10;     * @throws IndexOutOfBoundsException&#10;     *   if {@code start} or {@code count} is negative,&#10;     *   or if {@code start + count} is larger than the length of&#10;     *   the given array,&#10;     *   or if {@code index} is less than {@code start} or&#10;     *   larger then {@code start + count},&#10;     *   or if {@code codePointOffset} is positive and the text range&#10;     *   starting with {@code index} and ending with {@code start + count - 1}&#10;     *   has fewer than {@code codePointOffset} code&#10;     *   points,&#10;     *   or if {@code codePointOffset} is negative and the text range&#10;     *   starting with {@code start} and ending with {@code index - 1}&#10;     *   has fewer than the absolute value of&#10;     *   {@code codePointOffset} code points.&#10;     * @since 1.5&#10;     "
  ]
  node [
    id 930
    label "public static boolean isLowerCase(char ch)"
    type "method"
    comment "&#10;     * Determines if the specified character is a lowercase character.&#10;     * <p>&#10;     * A character is lowercase if its general category type, provided&#10;     * by {@code Character.getType(ch)}, is&#10;     * {@code LOWERCASE_LETTER}, or it has contributory property&#10;     * Other_Lowercase as defined by the Unicode Standard.&#10;     * <p>&#10;     * The following are examples of lowercase characters:&#10;     * <blockquote><pre>&#10;     * a b c d e f g h i j k l m n o p q r s t u v w x y z&#10;     * '&#38;#92;u00DF' '&#38;#92;u00E0' '&#38;#92;u00E1' '&#38;#92;u00E2' '&#38;#92;u00E3' '&#38;#92;u00E4' '&#38;#92;u00E5' '&#38;#92;u00E6'&#10;     * '&#38;#92;u00E7' '&#38;#92;u00E8' '&#38;#92;u00E9' '&#38;#92;u00EA' '&#38;#92;u00EB' '&#38;#92;u00EC' '&#38;#92;u00ED' '&#38;#92;u00EE'&#10;     * '&#38;#92;u00EF' '&#38;#92;u00F0' '&#38;#92;u00F1' '&#38;#92;u00F2' '&#38;#92;u00F3' '&#38;#92;u00F4' '&#38;#92;u00F5' '&#38;#92;u00F6'&#10;     * '&#38;#92;u00F8' '&#38;#92;u00F9' '&#38;#92;u00FA' '&#38;#92;u00FB' '&#38;#92;u00FC' '&#38;#92;u00FD' '&#38;#92;u00FE' '&#38;#92;u00FF'&#10;     * </pre></blockquote>&#10;     * <p> Many other Unicode characters are lowercase too.&#10;     *&#10;     * <p><b>Note:</b> This method cannot handle <a&#10;     * href=&#34;#supplementary&#34;> supplementary characters</a>. To support&#10;     * all Unicode characters, including supplementary characters, use&#10;     * the {@link #isLowerCase(int)} method.&#10;     *&#10;     * @param   ch   the character to be tested.&#10;     * @return  {@code true} if the character is lowercase;&#10;     *          {@code false} otherwise.&#10;     * @see     Character#isLowerCase(char)&#10;     * @see     Character#isTitleCase(char)&#10;     * @see     Character#toLowerCase(char)&#10;     * @see     Character#getType(char)&#10;     "
  ]
  node [
    id 931
    label "isLowerCase(int)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 932
    label "public static boolean isLowerCase(int codePoint)"
    type "method"
    comment "&#10;    public static boolean isLowerCase(int codePoint) {&#10;        return CharacterData.of(codePoint).isLowerCase(codePoint);&#10;    }&#10;    "
  ]
  node [
    id 933
    label "public static boolean isUpperCase(char ch)"
    type "method"
    comment "&#10;     * Determines if the specified character is an uppercase character.&#10;     * <p>&#10;     * A character is uppercase if its general category type, provided by&#10;     * {@code Character.getType(ch)}, is {@code UPPERCASE_LETTER}.&#10;     * or it has contributory property Other_Uppercase as defined by the Unicode Standard.&#10;     * <p>&#10;     * The following are examples of uppercase characters:&#10;     * <blockquote><pre>&#10;     * A B C D E F G H I J K L M N O P Q R S T U V W X Y Z&#10;     * '&#38;#92;u00C0' '&#38;#92;u00C1' '&#38;#92;u00C2' '&#38;#92;u00C3' '&#38;#92;u00C4' '&#38;#92;u00C5' '&#38;#92;u00C6' '&#38;#92;u00C7'&#10;     * '&#38;#92;u00C8' '&#38;#92;u00C9' '&#38;#92;u00CA' '&#38;#92;u00CB' '&#38;#92;u00CC' '&#38;#92;u00CD' '&#38;#92;u00CE' '&#38;#92;u00CF'&#10;     * '&#38;#92;u00D0' '&#38;#92;u00D1' '&#38;#92;u00D2' '&#38;#92;u00D3' '&#38;#92;u00D4' '&#38;#92;u00D5' '&#38;#92;u00D6' '&#38;#92;u00D8'&#10;     * '&#38;#92;u00D9' '&#38;#92;u00DA' '&#38;#92;u00DB' '&#38;#92;u00DC' '&#38;#92;u00DD' '&#38;#92;u00DE'&#10;     * </pre></blockquote>&#10;     * <p> Many other Unicode characters are uppercase too.&#10;     *&#10;     * <p><b>Note:</b> This method cannot handle <a&#10;     * href=&#34;#supplementary&#34;> supplementary characters</a>. To support&#10;     * all Unicode characters, including supplementary characters, use&#10;     * the {@link #isUpperCase(int)} method.&#10;     *&#10;     * @param   ch   the character to be tested.&#10;     * @return  {@code true} if the character is uppercase;&#10;     *          {@code false} otherwise.&#10;     * @see     Character#isLowerCase(char)&#10;     * @see     Character#isTitleCase(char)&#10;     * @see     Character#toUpperCase(char)&#10;     * @see     Character#getType(char)&#10;     * @since   1.0&#10;     "
  ]
  node [
    id 934
    label "isUpperCase(int)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 935
    label "public static boolean isUpperCase(int codePoint)"
    type "method"
    comment "&#10;    public static boolean isUpperCase(int codePoint) {&#10;        return CharacterData.of(codePoint).isUpperCase(codePoint);&#10;    }&#10;    "
  ]
  node [
    id 936
    label "public static boolean isTitleCase(char ch)"
    type "method"
    comment "&#10;     * Determines if the specified character is a titlecase character.&#10;     * <p>&#10;     * A character is a titlecase character if its general&#10;     * category type, provided by {@code Character.getType(ch)},&#10;     * is {@code TITLECASE_LETTER}.&#10;     * <p>&#10;     * Some characters look like pairs of Latin letters. For example, there&#10;     * is an uppercase letter that looks like &#34;LJ&#34; and has a corresponding&#10;     * lowercase letter that looks like &#34;lj&#34;. A third form, which looks like &#34;Lj&#34;,&#10;     * is the appropriate form to use when rendering a word in lowercase&#10;     * with initial capitals, as for a book title.&#10;     * <p>&#10;     * These are some of the Unicode characters for which this method returns&#10;     * {@code true}:&#10;     * <ul>&#10;     * <li>{@code LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON}&#10;     * <li>{@code LATIN CAPITAL LETTER L WITH SMALL LETTER J}&#10;     * <li>{@code LATIN CAPITAL LETTER N WITH SMALL LETTER J}&#10;     * <li>{@code LATIN CAPITAL LETTER D WITH SMALL LETTER Z}&#10;     * </ul>&#10;     * <p> Many other Unicode characters are titlecase too.&#10;     *&#10;     * <p><b>Note:</b> This method cannot handle <a&#10;     * href=&#34;#supplementary&#34;> supplementary characters</a>. To support&#10;     * all Unicode characters, including supplementary characters, use&#10;     * the {@link #isTitleCase(int)} method.&#10;     *&#10;     * @param   ch   the character to be tested.&#10;     * @return  {@code true} if the character is titlecase;&#10;     *          {@code false} otherwise.&#10;     * @see     Character#isLowerCase(char)&#10;     * @see     Character#isUpperCase(char)&#10;     * @see     Character#toTitleCase(char)&#10;     * @see     Character#getType(char)&#10;     * @since   1.0.2&#10;     "
  ]
  node [
    id 937
    label "isTitleCase(int)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 938
    label "public static boolean isTitleCase(int codePoint)"
    type "method"
    comment "&#10;    public static boolean isTitleCase(int codePoint) {&#10;        return getType(codePoint) == Character.TITLECASE_LETTER;&#10;    }&#10;    "
  ]
  node [
    id 939
    label "public static boolean isDigit(char ch)"
    type "method"
    comment "&#10;     * Determines if the specified character is a digit.&#10;     * <p>&#10;     * A character is a digit if its general category type, provided&#10;     * by {@code Character.getType(ch)}, is&#10;     * {@code DECIMAL_DIGIT_NUMBER}.&#10;     * <p>&#10;     * Some Unicode character ranges that contain digits:&#10;     * <ul>&#10;     * <li>{@code '\u005Cu0030'} through {@code '\u005Cu0039'},&#10;     *     ISO-LATIN-1 digits ({@code '0'} through {@code '9'})&#10;     * <li>{@code '\u005Cu0660'} through {@code '\u005Cu0669'},&#10;     *     Arabic-Indic digits&#10;     * <li>{@code '\u005Cu06F0'} through {@code '\u005Cu06F9'},&#10;     *     Extended Arabic-Indic digits&#10;     * <li>{@code '\u005Cu0966'} through {@code '\u005Cu096F'},&#10;     *     Devanagari digits&#10;     * <li>{@code '\u005CuFF10'} through {@code '\u005CuFF19'},&#10;     *     Fullwidth digits&#10;     * </ul>&#10;     *&#10;     * Many other character ranges contain digits as well.&#10;     *&#10;     * <p><b>Note:</b> This method cannot handle <a&#10;     * href=&#34;#supplementary&#34;> supplementary characters</a>. To support&#10;     * all Unicode characters, including supplementary characters, use&#10;     * the {@link #isDigit(int)} method.&#10;     *&#10;     * @param   ch   the character to be tested.&#10;     * @return  {@code true} if the character is a digit;&#10;     *          {@code false} otherwise.&#10;     * @see     Character#digit(char, int)&#10;     * @see     Character#forDigit(int, int)&#10;     * @see     Character#getType(char)&#10;     "
  ]
  node [
    id 940
    label "isDigit(int)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 941
    label "public static boolean isDigit(int codePoint)"
    type "method"
    comment "&#10;    public static boolean isDigit(int codePoint) {&#10;        return CharacterData.of(codePoint).isDigit(codePoint);&#10;    }&#10;    "
  ]
  node [
    id 942
    label "public static boolean isDefined(char ch)"
    type "method"
    comment "&#10;     * Determines if a character is defined in Unicode.&#10;     * <p>&#10;     * A character is defined if at least one of the following is true:&#10;     * <ul>&#10;     * <li>It has an entry in the UnicodeData file.&#10;     * <li>It has a value in a range defined by the UnicodeData file.&#10;     * </ul>&#10;     *&#10;     * <p><b>Note:</b> This method cannot handle <a&#10;     * href=&#34;#supplementary&#34;> supplementary characters</a>. To support&#10;     * all Unicode characters, including supplementary characters, use&#10;     * the {@link #isDefined(int)} method.&#10;     *&#10;     * @param   ch   the character to be tested&#10;     * @return  {@code true} if the character has a defined meaning&#10;     *          in Unicode; {@code false} otherwise.&#10;     * @see     Character#isDigit(char)&#10;     * @see     Character#isLetter(char)&#10;     * @see     Character#isLetterOrDigit(char)&#10;     * @see     Character#isLowerCase(char)&#10;     * @see     Character#isTitleCase(char)&#10;     * @see     Character#isUpperCase(char)&#10;     * @since   1.0.2&#10;     "
  ]
  node [
    id 943
    label "isDefined(int)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 944
    label "public static boolean isDefined(int codePoint)"
    type "method"
    comment "&#10;    public static boolean isDefined(int codePoint) {&#10;        return getType(codePoint) != Character.UNASSIGNED;&#10;    }&#10;    "
  ]
  node [
    id 945
    label "public static boolean isLetter(char ch)"
    type "method"
    comment "&#10;     * Determines if the specified character is a letter.&#10;     * <p>&#10;     * A character is considered to be a letter if its general&#10;     * category type, provided by {@code Character.getType(ch)},&#10;     * is any of the following:&#10;     * <ul>&#10;     * <li> {@code UPPERCASE_LETTER}&#10;     * <li> {@code LOWERCASE_LETTER}&#10;     * <li> {@code TITLECASE_LETTER}&#10;     * <li> {@code MODIFIER_LETTER}&#10;     * <li> {@code OTHER_LETTER}&#10;     * </ul>&#10;     *&#10;     * Not all letters have case. Many characters are&#10;     * letters but are neither uppercase nor lowercase nor titlecase.&#10;     *&#10;     * <p><b>Note:</b> This method cannot handle <a&#10;     * href=&#34;#supplementary&#34;> supplementary characters</a>. To support&#10;     * all Unicode characters, including supplementary characters, use&#10;     * the {@link #isLetter(int)} method.&#10;     *&#10;     * @param   ch   the character to be tested.&#10;     * @return  {@code true} if the character is a letter;&#10;     *          {@code false} otherwise.&#10;     * @see     Character#isDigit(char)&#10;     * @see     Character#isJavaIdentifierStart(char)&#10;     * @see     Character#isJavaLetter(char)&#10;     * @see     Character#isJavaLetterOrDigit(char)&#10;     * @see     Character#isLetterOrDigit(char)&#10;     * @see     Character#isLowerCase(char)&#10;     * @see     Character#isTitleCase(char)&#10;     * @see     Character#isUnicodeIdentifierStart(char)&#10;     * @see     Character#isUpperCase(char)&#10;     "
  ]
  node [
    id 946
    label "isLetter(int)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 947
    label "public static boolean isLetter(int codePoint)"
    type "method"
    comment "&#10;    public static boolean isLetter(int codePoint) {&#10;        return ((((1 << Character.UPPERCASE_LETTER) |&#10;            (1 << Character.LOWERCASE_LETTER) |&#10;            (1 << Character.TITLECASE_LETTER) |&#10;            (1 << Character.MODIFIER_LETTER) |&#10;            (1 << Character.OTHER_LETTER)) >> getType(codePoint)) &#38; 1)&#10;            != 0;&#10;    }&#10;    "
  ]
  node [
    id 948
    label "public static boolean isLetterOrDigit(char ch)"
    type "method"
    comment "&#10;     * Determines if the specified character is a letter or digit.&#10;     * <p>&#10;     * A character is considered to be a letter or digit if either&#10;     * {@code Character.isLetter(char ch)} or&#10;     * {@code Character.isDigit(char ch)} returns&#10;     * {@code true} for the character.&#10;     *&#10;     * <p><b>Note:</b> This method cannot handle <a&#10;     * href=&#34;#supplementary&#34;> supplementary characters</a>. To support&#10;     * all Unicode characters, including supplementary characters, use&#10;     * the {@link #isLetterOrDigit(int)} method.&#10;     *&#10;     * @param   ch   the character to be tested.&#10;     * @return  {@code true} if the character is a letter or digit;&#10;     *          {@code false} otherwise.&#10;     * @see     Character#isDigit(char)&#10;     * @see     Character#isJavaIdentifierPart(char)&#10;     * @see     Character#isJavaLetter(char)&#10;     * @see     Character#isJavaLetterOrDigit(char)&#10;     * @see     Character#isLetter(char)&#10;     * @see     Character#isUnicodeIdentifierPart(char)&#10;     * @since   1.0.2&#10;     "
  ]
  node [
    id 949
    label "isLetterOrDigit(int)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 950
    label "public static boolean isLetterOrDigit(int codePoint)"
    type "method"
    comment "&#10;    public static boolean isLetterOrDigit(int codePoint) {&#10;        return ((((1 << Character.UPPERCASE_LETTER) |&#10;            (1 << Character.LOWERCASE_LETTER) |&#10;            (1 << Character.TITLECASE_LETTER) |&#10;            (1 << Character.MODIFIER_LETTER) |&#10;            (1 << Character.OTHER_LETTER) |&#10;            (1 << Character.DECIMAL_DIGIT_NUMBER)) >> getType(codePoint)) &#38; 1)&#10;            != 0;&#10;    }&#10;    "
  ]
  node [
    id 951
    label "public static boolean isAlphabetic(int codePoint)"
    type "method"
    comment "&#10;    public static boolean isAlphabetic(int codePoint) {&#10;        return (((((1 << Character.UPPERCASE_LETTER) |&#10;            (1 << Character.LOWERCASE_LETTER) |&#10;            (1 << Character.TITLECASE_LETTER) |&#10;            (1 << Character.MODIFIER_LETTER) |&#10;            (1 << Character.OTHER_LETTER) |&#10;            (1 << Character.LETTER_NUMBER)) >> getType(codePoint)) &#38; 1) != 0) ||&#10;            CharacterData.of(codePoint).isOtherAlphabetic(codePoint);&#10;    }&#10;    "
  ]
  node [
    id 952
    label "public static boolean isIdeographic(int codePoint)"
    type "method"
    comment "&#10;    public static boolean isIdeographic(int codePoint) {&#10;        return CharacterData.of(codePoint).isIdeographic(codePoint);&#10;    }&#10;    "
  ]
  node [
    id 953
    label "public static boolean isJavaIdentifierStart(char ch)"
    type "method"
    comment "&#10;     * Determines if the specified character is&#10;     * permissible as the first character in a Java identifier.&#10;     * <p>&#10;     * A character may start a Java identifier if and only if&#10;     * one of the following conditions is true:&#10;     * <ul>&#10;     * <li> {@link #isLetter(char) isLetter(ch)} returns {@code true}&#10;     * <li> {@link #getType(char) getType(ch)} returns {@code LETTER_NUMBER}&#10;     * <li> {@code ch} is a currency symbol (such as {@code '$'})&#10;     * <li> {@code ch} is a connecting punctuation character (such as {@code '_'}).&#10;     * </ul>&#10;     *&#10;     * <p><b>Note:</b> This method cannot handle <a&#10;     * href=&#34;#supplementary&#34;> supplementary characters</a>. To support&#10;     * all Unicode characters, including supplementary characters, use&#10;     * the {@link #isJavaIdentifierStart(int)} method.&#10;     *&#10;     * @param   ch the character to be tested.&#10;     * @return  {@code true} if the character may start a Java identifier;&#10;     *          {@code false} otherwise.&#10;     * @see     Character#isJavaIdentifierPart(char)&#10;     * @see     Character#isLetter(char)&#10;     * @see     Character#isUnicodeIdentifierStart(char)&#10;     * @since   1.1&#10;     "
  ]
  node [
    id 954
    label "isLetter(char)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 955
    label "getType(char)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 956
    label "isJavaIdentifierStart(int)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 957
    label "public static boolean isJavaIdentifierStart(int codePoint)"
    type "method"
    comment "&#10;    public static boolean isJavaIdentifierStart(int codePoint) {&#10;        return CharacterData.of(codePoint).isJavaIdentifierStart(codePoint);&#10;    }&#10;    "
  ]
  node [
    id 958
    label "public static boolean isJavaIdentifierPart(char ch)"
    type "method"
    comment "&#10;     * Determines if the specified character may be part of a Java&#10;     * identifier as other than the first character.&#10;     * <p>&#10;     * A character may be part of a Java identifier if any of the following&#10;     * conditions are true:&#10;     * <ul>&#10;     * <li>  it is a letter&#10;     * <li>  it is a currency symbol (such as {@code '$'})&#10;     * <li>  it is a connecting punctuation character (such as {@code '_'})&#10;     * <li>  it is a digit&#10;     * <li>  it is a numeric letter (such as a Roman numeral character)&#10;     * <li>  it is a combining mark&#10;     * <li>  it is a non-spacing mark&#10;     * <li> {@code isIdentifierIgnorable} returns&#10;     * {@code true} for the character&#10;     * </ul>&#10;     *&#10;     * <p><b>Note:</b> This method cannot handle <a&#10;     * href=&#34;#supplementary&#34;> supplementary characters</a>. To support&#10;     * all Unicode characters, including supplementary characters, use&#10;     * the {@link #isJavaIdentifierPart(int)} method.&#10;     *&#10;     * @param   ch      the character to be tested.&#10;     * @return {@code true} if the character may be part of a&#10;     *          Java identifier; {@code false} otherwise.&#10;     * @see     Character#isIdentifierIgnorable(char)&#10;     * @see     Character#isJavaIdentifierStart(char)&#10;     * @see     Character#isLetterOrDigit(char)&#10;     * @see     Character#isUnicodeIdentifierPart(char)&#10;     * @since   1.1&#10;     "
  ]
  node [
    id 959
    label "isJavaIdentifierPart(int)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 960
    label "public static boolean isJavaIdentifierPart(int codePoint)"
    type "method"
    comment "&#10;    public static boolean isJavaIdentifierPart(int codePoint) {&#10;        return CharacterData.of(codePoint).isJavaIdentifierPart(codePoint);&#10;    }&#10;    "
  ]
  node [
    id 961
    label "public static boolean isUnicodeIdentifierStart(char ch)"
    type "method"
    comment "&#10;     * Determines if the specified character is permissible as the&#10;     * first character in a Unicode identifier.&#10;     * <p>&#10;     * A character may start a Unicode identifier if and only if&#10;     * one of the following conditions is true:&#10;     * <ul>&#10;     * <li> {@link #isLetter(char) isLetter(ch)} returns {@code true}&#10;     * <li> {@link #getType(char) getType(ch)} returns&#10;     *      {@code LETTER_NUMBER}.&#10;     * <li> it is an <a href=&#34;http://www.unicode.org/reports/tr44/#Other_ID_Start&#34;>&#10;     *      {@code Other_ID_Start}</a> character.&#10;     * </ul>&#10;     * <p>&#10;     * This method conforms to <a href=&#34;https://unicode.org/reports/tr31/#R1&#34;>&#10;     * UAX31-R1: Default Identifiers</a> requirement of the Unicode Standard,&#10;     * with the following profile of UAX31:&#10;     * <pre>&#10;     * Start := ID_Start + 'VERTICAL TILDE' (U+2E2F)&#10;     * </pre>&#10;     * {@code 'VERTICAL TILDE'} is added to {@code Start} for backward&#10;     * compatibility.&#10;     *&#10;     * <p><b>Note:</b> This method cannot handle <a&#10;     * href=&#34;#supplementary&#34;> supplementary characters</a>. To support&#10;     * all Unicode characters, including supplementary characters, use&#10;     * the {@link #isUnicodeIdentifierStart(int)} method.&#10;     *&#10;     * @param   ch      the character to be tested.&#10;     * @return  {@code true} if the character may start a Unicode&#10;     *          identifier; {@code false} otherwise.&#10;     * @see     Character#isJavaIdentifierStart(char)&#10;     * @see     Character#isLetter(char)&#10;     * @see     Character#isUnicodeIdentifierPart(char)&#10;     * @since   1.1&#10;     "
  ]
  node [
    id 962
    label "isUnicodeIdentifierStart(int)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 963
    label "public static boolean isUnicodeIdentifierStart(int codePoint)"
    type "method"
    comment "&#10;    public static boolean isUnicodeIdentifierStart(int codePoint) {&#10;        return CharacterData.of(codePoint).isUnicodeIdentifierStart(codePoint);&#10;    }&#10;    "
  ]
  node [
    id 964
    label "public static boolean isUnicodeIdentifierPart(char ch)"
    type "method"
    comment "&#10;     * Determines if the specified character may be part of a Unicode&#10;     * identifier as other than the first character.&#10;     * <p>&#10;     * A character may be part of a Unicode identifier if and only if&#10;     * one of the following statements is true:&#10;     * <ul>&#10;     * <li>  it is a letter&#10;     * <li>  it is a connecting punctuation character (such as {@code '_'})&#10;     * <li>  it is a digit&#10;     * <li>  it is a numeric letter (such as a Roman numeral character)&#10;     * <li>  it is a combining mark&#10;     * <li>  it is a non-spacing mark&#10;     * <li> {@code isIdentifierIgnorable} returns&#10;     * {@code true} for this character.&#10;     * <li> it is an <a href=&#34;http://www.unicode.org/reports/tr44/#Other_ID_Start&#34;>&#10;     *      {@code Other_ID_Start}</a> character.&#10;     * <li> it is an <a href=&#34;http://www.unicode.org/reports/tr44/#Other_ID_Continue&#34;>&#10;     *      {@code Other_ID_Continue}</a> character.&#10;     * </ul>&#10;     * <p>&#10;     * This method conforms to <a href=&#34;https://unicode.org/reports/tr31/#R1&#34;>&#10;     * UAX31-R1: Default Identifiers</a> requirement of the Unicode Standard,&#10;     * with the following profile of UAX31:&#10;     * <pre>&#10;     * Continue := Start + ID_Continue + ignorable&#10;     * Medial := empty&#10;     * ignorable := isIdentifierIgnorable(char) returns true for the character&#10;     * </pre>&#10;     * {@code ignorable} is added to {@code Continue} for backward&#10;     * compatibility.&#10;     *&#10;     * <p><b>Note:</b> This method cannot handle <a&#10;     * href=&#34;#supplementary&#34;> supplementary characters</a>. To support&#10;     * all Unicode characters, including supplementary characters, use&#10;     * the {@link #isUnicodeIdentifierPart(int)} method.&#10;     *&#10;     * @param   ch      the character to be tested.&#10;     * @return  {@code true} if the character may be part of a&#10;     *          Unicode identifier; {@code false} otherwise.&#10;     * @see     Character#isIdentifierIgnorable(char)&#10;     * @see     Character#isJavaIdentifierPart(char)&#10;     * @see     Character#isLetterOrDigit(char)&#10;     * @see     Character#isUnicodeIdentifierStart(char)&#10;     * @since   1.1&#10;     "
  ]
  node [
    id 965
    label "isUnicodeIdentifierPart(int)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 966
    label "public static boolean isUnicodeIdentifierPart(int codePoint)"
    type "method"
    comment "&#10;    public static boolean isUnicodeIdentifierPart(int codePoint) {&#10;        return CharacterData.of(codePoint).isUnicodeIdentifierPart(codePoint);&#10;    }&#10;    "
  ]
  node [
    id 967
    label "public static boolean isIdentifierIgnorable(char ch)"
    type "method"
    comment "&#10;     * Determines if the specified character should be regarded as&#10;     * an ignorable character in a Java identifier or a Unicode identifier.&#10;     * <p>&#10;     * The following Unicode characters are ignorable in a Java identifier&#10;     * or a Unicode identifier:&#10;     * <ul>&#10;     * <li>ISO control characters that are not whitespace&#10;     * <ul>&#10;     * <li>{@code '\u005Cu0000'} through {@code '\u005Cu0008'}&#10;     * <li>{@code '\u005Cu000E'} through {@code '\u005Cu001B'}&#10;     * <li>{@code '\u005Cu007F'} through {@code '\u005Cu009F'}&#10;     * </ul>&#10;     *&#10;     * <li>all characters that have the {@code FORMAT} general&#10;     * category value&#10;     * </ul>&#10;     *&#10;     * <p><b>Note:</b> This method cannot handle <a&#10;     * href=&#34;#supplementary&#34;> supplementary characters</a>. To support&#10;     * all Unicode characters, including supplementary characters, use&#10;     * the {@link #isIdentifierIgnorable(int)} method.&#10;     *&#10;     * @param   ch      the character to be tested.&#10;     * @return  {@code true} if the character is an ignorable control&#10;     *          character that may be part of a Java or Unicode identifier;&#10;     *           {@code false} otherwise.&#10;     * @see     Character#isJavaIdentifierPart(char)&#10;     * @see     Character#isUnicodeIdentifierPart(char)&#10;     * @since   1.1&#10;     "
  ]
  node [
    id 968
    label "isIdentifierIgnorable(int)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 969
    label "public static boolean isIdentifierIgnorable(int codePoint)"
    type "method"
    comment "&#10;    public static boolean isIdentifierIgnorable(int codePoint) {&#10;        return CharacterData.of(codePoint).isIdentifierIgnorable(codePoint);&#10;    }&#10;    "
  ]
  node [
    id 970
    label "public static char toLowerCase(char ch)"
    type "method"
    comment "&#10;     * Converts the character argument to lowercase using case&#10;     * mapping information from the UnicodeData file.&#10;     * <p>&#10;     * Note that&#10;     * {@code Character.isLowerCase(Character.toLowerCase(ch))}&#10;     * does not always return {@code true} for some ranges of&#10;     * characters, particularly those that are symbols or ideographs.&#10;     *&#10;     * <p>In general, {@link String#toLowerCase()} should be used to map&#10;     * characters to lowercase. {@code String} case mapping methods&#10;     * have several benefits over {@code Character} case mapping methods.&#10;     * {@code String} case mapping methods can perform locale-sensitive&#10;     * mappings, context-sensitive mappings, and 1:M character mappings, whereas&#10;     * the {@code Character} case mapping methods cannot.&#10;     *&#10;     * <p><b>Note:</b> This method cannot handle <a&#10;     * href=&#34;#supplementary&#34;> supplementary characters</a>. To support&#10;     * all Unicode characters, including supplementary characters, use&#10;     * the {@link #toLowerCase(int)} method.&#10;     *&#10;     * @param   ch   the character to be converted.&#10;     * @return  the lowercase equivalent of the character, if any;&#10;     *          otherwise, the character itself.&#10;     * @see     Character#isLowerCase(char)&#10;     * @see     String#toLowerCase()&#10;     "
  ]
  node [
    id 971
    label "toLowerCase(int)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 972
    label "public static int toLowerCase(int codePoint)"
    type "method"
    comment "&#10;    public static int toLowerCase(int codePoint) {&#10;        return CharacterData.of(codePoint).toLowerCase(codePoint);&#10;    }&#10;    "
  ]
  node [
    id 973
    label "public static char toUpperCase(char ch)"
    type "method"
    comment "&#10;     * Converts the character argument to uppercase using case mapping&#10;     * information from the UnicodeData file.&#10;     * <p>&#10;     * Note that&#10;     * {@code Character.isUpperCase(Character.toUpperCase(ch))}&#10;     * does not always return {@code true} for some ranges of&#10;     * characters, particularly those that are symbols or ideographs.&#10;     *&#10;     * <p>In general, {@link String#toUpperCase()} should be used to map&#10;     * characters to uppercase. {@code String} case mapping methods&#10;     * have several benefits over {@code Character} case mapping methods.&#10;     * {@code String} case mapping methods can perform locale-sensitive&#10;     * mappings, context-sensitive mappings, and 1:M character mappings, whereas&#10;     * the {@code Character} case mapping methods cannot.&#10;     *&#10;     * <p><b>Note:</b> This method cannot handle <a&#10;     * href=&#34;#supplementary&#34;> supplementary characters</a>. To support&#10;     * all Unicode characters, including supplementary characters, use&#10;     * the {@link #toUpperCase(int)} method.&#10;     *&#10;     * @param   ch   the character to be converted.&#10;     * @return  the uppercase equivalent of the character, if any;&#10;     *          otherwise, the character itself.&#10;     * @see     Character#isUpperCase(char)&#10;     * @see     String#toUpperCase()&#10;     "
  ]
  node [
    id 974
    label "toUpperCase(int)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 975
    label "public static int toUpperCase(int codePoint)"
    type "method"
    comment "&#10;    public static int toUpperCase(int codePoint) {&#10;        return CharacterData.of(codePoint).toUpperCase(codePoint);&#10;    }&#10;    "
  ]
  node [
    id 976
    label "public static char toTitleCase(char ch)"
    type "method"
    comment "&#10;     * Converts the character argument to titlecase using case mapping&#10;     * information from the UnicodeData file. If a character has no&#10;     * explicit titlecase mapping and is not itself a titlecase char&#10;     * according to UnicodeData, then the uppercase mapping is&#10;     * returned as an equivalent titlecase mapping. If the&#10;     * {@code char} argument is already a titlecase&#10;     * {@code char}, the same {@code char} value will be&#10;     * returned.&#10;     * <p>&#10;     * Note that&#10;     * {@code Character.isTitleCase(Character.toTitleCase(ch))}&#10;     * does not always return {@code true} for some ranges of&#10;     * characters.&#10;     *&#10;     * <p><b>Note:</b> This method cannot handle <a&#10;     * href=&#34;#supplementary&#34;> supplementary characters</a>. To support&#10;     * all Unicode characters, including supplementary characters, use&#10;     * the {@link #toTitleCase(int)} method.&#10;     *&#10;     * @param   ch   the character to be converted.&#10;     * @return  the titlecase equivalent of the character, if any;&#10;     *          otherwise, the character itself.&#10;     * @see     Character#isTitleCase(char)&#10;     * @see     Character#toLowerCase(char)&#10;     * @see     Character#toUpperCase(char)&#10;     * @since   1.0.2&#10;     "
  ]
  node [
    id 977
    label "toTitleCase(int)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 978
    label "public static int toTitleCase(int codePoint)"
    type "method"
    comment "&#10;    public static int toTitleCase(int codePoint) {&#10;        return CharacterData.of(codePoint).toTitleCase(codePoint);&#10;    }&#10;    "
  ]
  node [
    id 979
    label "public static int digit(char ch, int radix)"
    type "method"
    comment "&#10;     * Returns the numeric value of the character {@code ch} in the&#10;     * specified radix.&#10;     * <p>&#10;     * If the radix is not in the range {@code MIN_RADIX} &#38;le;&#10;     * {@code radix} &#38;le; {@code MAX_RADIX} or if the&#10;     * value of {@code ch} is not a valid digit in the specified&#10;     * radix, {@code -1} is returned. A character is a valid digit&#10;     * if at least one of the following is true:&#10;     * <ul>&#10;     * <li>The method {@code isDigit} is {@code true} of the character&#10;     *     and the Unicode decimal digit value of the character (or its&#10;     *     single-character decomposition) is less than the specified radix.&#10;     *     In this case the decimal digit value is returned.&#10;     * <li>The character is one of the uppercase Latin letters&#10;     *     {@code 'A'} through {@code 'Z'} and its code is less than&#10;     *     {@code radix + 'A' - 10}.&#10;     *     In this case, {@code ch - 'A' + 10}&#10;     *     is returned.&#10;     * <li>The character is one of the lowercase Latin letters&#10;     *     {@code 'a'} through {@code 'z'} and its code is less than&#10;     *     {@code radix + 'a' - 10}.&#10;     *     In this case, {@code ch - 'a' + 10}&#10;     *     is returned.&#10;     * <li>The character is one of the fullwidth uppercase Latin letters A&#10;     *     ({@code '\u005CuFF21'}) through Z ({@code '\u005CuFF3A'})&#10;     *     and its code is less than&#10;     *     {@code radix + '\u005CuFF21' - 10}.&#10;     *     In this case, {@code ch - '\u005CuFF21' + 10}&#10;     *     is returned.&#10;     * <li>The character is one of the fullwidth lowercase Latin letters a&#10;     *     ({@code '\u005CuFF41'}) through z ({@code '\u005CuFF5A'})&#10;     *     and its code is less than&#10;     *     {@code radix + '\u005CuFF41' - 10}.&#10;     *     In this case, {@code ch - '\u005CuFF41' + 10}&#10;     *     is returned.&#10;     * </ul>&#10;     *&#10;     * <p><b>Note:</b> This method cannot handle <a&#10;     * href=&#34;#supplementary&#34;> supplementary characters</a>. To support&#10;     * all Unicode characters, including supplementary characters, use&#10;     * the {@link #digit(int, int)} method.&#10;     *&#10;     * @param   ch      the character to be converted.&#10;     * @param   radix   the radix.&#10;     * @return  the numeric value represented by the character in the&#10;     *          specified radix.&#10;     * @see     Character#forDigit(int, int)&#10;     * @see     Character#isDigit(char)&#10;     "
  ]
  node [
    id 980
    label "digit(int"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 981
    label "public static int digit(int codePoint, int radix)"
    type "method"
    comment "&#10;    public static int digit(int codePoint, int radix) {&#10;        return CharacterData.of(codePoint).digit(codePoint, radix);&#10;    }&#10;    "
  ]
  node [
    id 982
    label "public static int getNumericValue(char ch)"
    type "method"
    comment "&#10;     * Returns the {@code int} value that the specified Unicode&#10;     * character represents. For example, the character&#10;     * {@code '\u005Cu216C'} (the roman numeral fifty) will return&#10;     * an int with a value of 50.&#10;     * <p>&#10;     * The letters A-Z in their uppercase ({@code '\u005Cu0041'} through&#10;     * {@code '\u005Cu005A'}), lowercase&#10;     * ({@code '\u005Cu0061'} through {@code '\u005Cu007A'}), and&#10;     * full width variant ({@code '\u005CuFF21'} through&#10;     * {@code '\u005CuFF3A'} and {@code '\u005CuFF41'} through&#10;     * {@code '\u005CuFF5A'}) forms have numeric values from 10&#10;     * through 35. This is independent of the Unicode specification,&#10;     * which does not assign numeric values to these {@code char}&#10;     * values.&#10;     * <p>&#10;     * If the character does not have a numeric value, then -1 is returned.&#10;     * If the character has a numeric value that cannot be represented as a&#10;     * nonnegative integer (for example, a fractional value), then -2&#10;     * is returned.&#10;     *&#10;     * <p><b>Note:</b> This method cannot handle <a&#10;     * href=&#34;#supplementary&#34;> supplementary characters</a>. To support&#10;     * all Unicode characters, including supplementary characters, use&#10;     * the {@link #getNumericValue(int)} method.&#10;     *&#10;     * @param   ch      the character to be converted.&#10;     * @return  the numeric value of the character, as a nonnegative {@code int}&#10;     *          value; -2 if the character has a numeric value but the value&#10;     *          can not be represented as a nonnegative {@code int} value;&#10;     *          -1 if the character has no numeric value.&#10;     * @see     Character#forDigit(int, int)&#10;     * @see     Character#isDigit(char)&#10;     * @since   1.1&#10;     "
  ]
  node [
    id 983
    label "getNumericValue(int)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 984
    label "public static int getNumericValue(int codePoint)"
    type "method"
    comment "&#10;    public static int getNumericValue(int codePoint) {&#10;        return CharacterData.of(codePoint).getNumericValue(codePoint);&#10;    }&#10;    "
  ]
  node [
    id 985
    label "public static boolean isSpaceChar(char ch)"
    type "method"
    comment "&#10;     * Determines if the specified character is a Unicode space character.&#10;     * A character is considered to be a space character if and only if&#10;     * it is specified to be a space character by the Unicode Standard. This&#10;     * method returns true if the character's general category type is any of&#10;     * the following:&#10;     * <ul>&#10;     * <li> {@code SPACE_SEPARATOR}&#10;     * <li> {@code LINE_SEPARATOR}&#10;     * <li> {@code PARAGRAPH_SEPARATOR}&#10;     * </ul>&#10;     *&#10;     * <p><b>Note:</b> This method cannot handle <a&#10;     * href=&#34;#supplementary&#34;> supplementary characters</a>. To support&#10;     * all Unicode characters, including supplementary characters, use&#10;     * the {@link #isSpaceChar(int)} method.&#10;     *&#10;     * @param   ch      the character to be tested.&#10;     * @return  {@code true} if the character is a space character;&#10;     *          {@code false} otherwise.&#10;     * @see     Character#isWhitespace(char)&#10;     * @since   1.1&#10;     "
  ]
  node [
    id 986
    label "isSpaceChar(int)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 987
    label "public static boolean isSpaceChar(int codePoint)"
    type "method"
    comment "&#10;    public static boolean isSpaceChar(int codePoint) {&#10;        return ((((1 << Character.SPACE_SEPARATOR) |&#10;                  (1 << Character.LINE_SEPARATOR) |&#10;                  (1 << Character.PARAGRAPH_SEPARATOR)) >> getType(codePoint)) &#38; 1)&#10;            != 0;&#10;    }&#10;    "
  ]
  node [
    id 988
    label "public static boolean isWhitespace(char ch)"
    type "method"
    comment "&#10;     * Determines if the specified character is white space according to Java.&#10;     * A character is a Java whitespace character if and only if it satisfies&#10;     * one of the following criteria:&#10;     * <ul>&#10;     * <li> It is a Unicode space character ({@code SPACE_SEPARATOR},&#10;     *      {@code LINE_SEPARATOR}, or {@code PARAGRAPH_SEPARATOR})&#10;     *      but is not also a non-breaking space ({@code '\u005Cu00A0'},&#10;     *      {@code '\u005Cu2007'}, {@code '\u005Cu202F'}).&#10;     * <li> It is {@code '\u005Ct'}, U+0009 HORIZONTAL TABULATION.&#10;     * <li> It is {@code '\u005Cn'}, U+000A LINE FEED.&#10;     * <li> It is {@code '\u005Cu000B'}, U+000B VERTICAL TABULATION.&#10;     * <li> It is {@code '\u005Cf'}, U+000C FORM FEED.&#10;     * <li> It is {@code '\u005Cr'}, U+000D CARRIAGE RETURN.&#10;     * <li> It is {@code '\u005Cu001C'}, U+001C FILE SEPARATOR.&#10;     * <li> It is {@code '\u005Cu001D'}, U+001D GROUP SEPARATOR.&#10;     * <li> It is {@code '\u005Cu001E'}, U+001E RECORD SEPARATOR.&#10;     * <li> It is {@code '\u005Cu001F'}, U+001F UNIT SEPARATOR.&#10;     * </ul>&#10;     *&#10;     * <p><b>Note:</b> This method cannot handle <a&#10;     * href=&#34;#supplementary&#34;> supplementary characters</a>. To support&#10;     * all Unicode characters, including supplementary characters, use&#10;     * the {@link #isWhitespace(int)} method.&#10;     *&#10;     * @param   ch the character to be tested.&#10;     * @return  {@code true} if the character is a Java whitespace&#10;     *          character; {@code false} otherwise.&#10;     * @see     Character#isSpaceChar(char)&#10;     * @since   1.1&#10;     "
  ]
  node [
    id 989
    label "isWhitespace(int)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 990
    label "public static boolean isWhitespace(int codePoint)"
    type "method"
    comment "&#10;    public static boolean isWhitespace(int codePoint) {&#10;        return CharacterData.of(codePoint).isWhitespace(codePoint);&#10;    }&#10;    "
  ]
  node [
    id 991
    label "public static boolean isISOControl(char ch)"
    type "method"
    comment "&#10;     * Determines if the specified character is an ISO control&#10;     * character.  A character is considered to be an ISO control&#10;     * character if its code is in the range {@code '\u005Cu0000'}&#10;     * through {@code '\u005Cu001F'} or in the range&#10;     * {@code '\u005Cu007F'} through {@code '\u005Cu009F'}.&#10;     *&#10;     * <p><b>Note:</b> This method cannot handle <a&#10;     * href=&#34;#supplementary&#34;> supplementary characters</a>. To support&#10;     * all Unicode characters, including supplementary characters, use&#10;     * the {@link #isISOControl(int)} method.&#10;     *&#10;     * @param   ch      the character to be tested.&#10;     * @return  {@code true} if the character is an ISO control character;&#10;     *          {@code false} otherwise.&#10;     *&#10;     * @see     Character#isSpaceChar(char)&#10;     * @see     Character#isWhitespace(char)&#10;     * @since   1.1&#10;     "
  ]
  node [
    id 992
    label "isISOControl(int)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 993
    label "public static boolean isISOControl(int codePoint)"
    type "method"
    comment "&#10;     * Determines if the referenced character (Unicode code point) is an ISO control&#10;     * character.  A character is considered to be an ISO control&#10;     * character if its code is in the range {@code '\u005Cu0000'}&#10;     * through {@code '\u005Cu001F'} or in the range&#10;     * {@code '\u005Cu007F'} through {@code '\u005Cu009F'}.&#10;     *&#10;     * @param   codePoint the character (Unicode code point) to be tested.&#10;     * @return  {@code true} if the character is an ISO control character;&#10;     *          {@code false} otherwise.&#10;     * @see     Character#isSpaceChar(int)&#10;     * @see     Character#isWhitespace(int)&#10;     * @since   1.5&#10;     "
  ]
  node [
    id 994
    label "public static int getType(char ch)"
    type "method"
    comment "&#10;     * Returns a value indicating a character's general category.&#10;     *&#10;     * <p><b>Note:</b> This method cannot handle <a&#10;     * href=&#34;#supplementary&#34;> supplementary characters</a>. To support&#10;     * all Unicode characters, including supplementary characters, use&#10;     * the {@link #getType(int)} method.&#10;     *&#10;     * @param   ch      the character to be tested.&#10;     * @return  a value of type {@code int} representing the&#10;     *          character's general category.&#10;     * @see     Character#COMBINING_SPACING_MARK&#10;     * @see     Character#CONNECTOR_PUNCTUATION&#10;     * @see     Character#CONTROL&#10;     * @see     Character#CURRENCY_SYMBOL&#10;     * @see     Character#DASH_PUNCTUATION&#10;     * @see     Character#DECIMAL_DIGIT_NUMBER&#10;     * @see     Character#ENCLOSING_MARK&#10;     * @see     Character#END_PUNCTUATION&#10;     * @see     Character#FINAL_QUOTE_PUNCTUATION&#10;     * @see     Character#FORMAT&#10;     * @see     Character#INITIAL_QUOTE_PUNCTUATION&#10;     * @see     Character#LETTER_NUMBER&#10;     * @see     Character#LINE_SEPARATOR&#10;     * @see     Character#LOWERCASE_LETTER&#10;     * @see     Character#MATH_SYMBOL&#10;     * @see     Character#MODIFIER_LETTER&#10;     * @see     Character#MODIFIER_SYMBOL&#10;     * @see     Character#NON_SPACING_MARK&#10;     * @see     Character#OTHER_LETTER&#10;     * @see     Character#OTHER_NUMBER&#10;     * @see     Character#OTHER_PUNCTUATION&#10;     * @see     Character#OTHER_SYMBOL&#10;     * @see     Character#PARAGRAPH_SEPARATOR&#10;     * @see     Character#PRIVATE_USE&#10;     * @see     Character#SPACE_SEPARATOR&#10;     * @see     Character#START_PUNCTUATION&#10;     * @see     Character#SURROGATE&#10;     * @see     Character#TITLECASE_LETTER&#10;     * @see     Character#UNASSIGNED&#10;     * @see     Character#UPPERCASE_LETTER&#10;     * @since   1.1&#10;     "
  ]
  node [
    id 995
    label "getType(int)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 996
    label "public static int getType(int codePoint)"
    type "method"
    comment "&#10;    public static int getType(int codePoint) {&#10;        return CharacterData.of(codePoint).getType(codePoint);&#10;    }&#10;    "
  ]
  node [
    id 997
    label "public static char forDigit(int digit, int radix)"
    type "method"
    comment "&#10;     * Determines the character representation for a specific digit in&#10;     * the specified radix. If the value of {@code radix} is not a&#10;     * valid radix, or the value of {@code digit} is not a valid&#10;     * digit in the specified radix, the null character&#10;     * ({@code '\u005Cu0000'}) is returned.&#10;     * <p>&#10;     * The {@code radix} argument is valid if it is greater than or&#10;     * equal to {@code MIN_RADIX} and less than or equal to&#10;     * {@code MAX_RADIX}. The {@code digit} argument is valid if&#10;     * {@code 0 <= digit < radix}.&#10;     * <p>&#10;     * If the digit is less than 10, then&#10;     * {@code '0' + digit} is returned. Otherwise, the value&#10;     * {@code 'a' + digit - 10} is returned.&#10;     *&#10;     * @param   digit   the number to convert to a character.&#10;     * @param   radix   the radix.&#10;     * @return  the {@code char} representation of the specified digit&#10;     *          in the specified radix.&#10;     * @see     Character#MIN_RADIX&#10;     * @see     Character#MAX_RADIX&#10;     * @see     Character#digit(char, int)&#10;     "
  ]
  node [
    id 998
    label "public static byte getDirectionality(char ch)"
    type "method"
    comment "&#10;     * Returns the Unicode directionality property for the given&#10;     * character.  Character directionality is used to calculate the&#10;     * visual ordering of text. The directionality value of undefined&#10;     * {@code char} values is {@code DIRECTIONALITY_UNDEFINED}.&#10;     *&#10;     * <p><b>Note:</b> This method cannot handle <a&#10;     * href=&#34;#supplementary&#34;> supplementary characters</a>. To support&#10;     * all Unicode characters, including supplementary characters, use&#10;     * the {@link #getDirectionality(int)} method.&#10;     *&#10;     * @param  ch {@code char} for which the directionality property&#10;     *            is requested.&#10;     * @return the directionality property of the {@code char} value.&#10;     *&#10;     * @see Character#DIRECTIONALITY_UNDEFINED&#10;     * @see Character#DIRECTIONALITY_LEFT_TO_RIGHT&#10;     * @see Character#DIRECTIONALITY_RIGHT_TO_LEFT&#10;     * @see Character#DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC&#10;     * @see Character#DIRECTIONALITY_EUROPEAN_NUMBER&#10;     * @see Character#DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR&#10;     * @see Character#DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR&#10;     * @see Character#DIRECTIONALITY_ARABIC_NUMBER&#10;     * @see Character#DIRECTIONALITY_COMMON_NUMBER_SEPARATOR&#10;     * @see Character#DIRECTIONALITY_NONSPACING_MARK&#10;     * @see Character#DIRECTIONALITY_BOUNDARY_NEUTRAL&#10;     * @see Character#DIRECTIONALITY_PARAGRAPH_SEPARATOR&#10;     * @see Character#DIRECTIONALITY_SEGMENT_SEPARATOR&#10;     * @see Character#DIRECTIONALITY_WHITESPACE&#10;     * @see Character#DIRECTIONALITY_OTHER_NEUTRALS&#10;     * @see Character#DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING&#10;     * @see Character#DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE&#10;     * @see Character#DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING&#10;     * @see Character#DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE&#10;     * @see Character#DIRECTIONALITY_POP_DIRECTIONAL_FORMAT&#10;     * @see Character#DIRECTIONALITY_LEFT_TO_RIGHT_ISOLATE&#10;     * @see Character#DIRECTIONALITY_RIGHT_TO_LEFT_ISOLATE&#10;     * @see Character#DIRECTIONALITY_FIRST_STRONG_ISOLATE&#10;     * @see Character#DIRECTIONALITY_POP_DIRECTIONAL_ISOLATE&#10;     * @since 1.4&#10;     "
  ]
  node [
    id 999
    label "getDirectionality(int)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1000
    label "public static byte getDirectionality(int codePoint)"
    type "method"
    comment "&#10;    public static byte getDirectionality(int codePoint) {&#10;        return CharacterData.of(codePoint).getDirectionality(codePoint);&#10;    }&#10;    "
  ]
  node [
    id 1001
    label "public static boolean isMirrored(char ch)"
    type "method"
    comment "&#10;     * Determines whether the character is mirrored according to the&#10;     * Unicode specification.  Mirrored characters should have their&#10;     * glyphs horizontally mirrored when displayed in text that is&#10;     * right-to-left.  For example, {@code '\u005Cu0028'} LEFT&#10;     * PARENTHESIS is semantically defined to be an <i>opening&#10;     * parenthesis</i>.  This will appear as a &#34;(&#34; in text that is&#10;     * left-to-right but as a &#34;)&#34; in text that is right-to-left.&#10;     *&#10;     * <p><b>Note:</b> This method cannot handle <a&#10;     * href=&#34;#supplementary&#34;> supplementary characters</a>. To support&#10;     * all Unicode characters, including supplementary characters, use&#10;     * the {@link #isMirrored(int)} method.&#10;     *&#10;     * @param  ch {@code char} for which the mirrored property is requested&#10;     * @return {@code true} if the char is mirrored, {@code false}&#10;     *         if the {@code char} is not mirrored or is not defined.&#10;     * @since 1.4&#10;     "
  ]
  node [
    id 1002
    label "isMirrored(int)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1003
    label "public static boolean isMirrored(int codePoint)"
    type "method"
    comment "&#10;    public static boolean isMirrored(int codePoint) {&#10;        return CharacterData.of(codePoint).isMirrored(codePoint);&#10;    }&#10;    "
  ]
  node [
    id 1004
    label "public int compareTo(Character anotherCharacter)"
    type "method"
    comment "&#10;     * Compares two {@code Character} objects numerically.&#10;     *&#10;     * @param   anotherCharacter   the {@code Character} to be compared.&#10;     * @return  the value {@code 0} if the argument {@code Character}&#10;     *          is equal to this {@code Character}; a value less than&#10;     *          {@code 0} if this {@code Character} is numerically less&#10;     *          than the {@code Character} argument; and a value greater than&#10;     *          {@code 0} if this {@code Character} is numerically greater&#10;     *          than the {@code Character} argument (unsigned comparison).&#10;     *          Note that this is strictly a numerical comparison; it is not&#10;     *          locale-dependent.&#10;     * @since   1.2&#10;     "
  ]
  node [
    id 1005
    label "public static int compare(char x, char y)"
    type "method"
    comment "&#10;     * Compares two {@code char} values numerically.&#10;     * The value returned is identical to what would be returned by:&#10;     * <pre>&#10;     *    Character.valueOf(x).compareTo(Character.valueOf(y))&#10;     * </pre>&#10;     *&#10;     * @param  x the first {@code char} to compare&#10;     * @param  y the second {@code char} to compare&#10;     * @return the value {@code 0} if {@code x == y};&#10;     *         a value less than {@code 0} if {@code x < y}; and&#10;     *         a value greater than {@code 0} if {@code x > y}&#10;     * @since 1.7&#10;     "
  ]
  node [
    id 1006
    label "public static char reverseBytes(char ch)"
    type "method"
    comment "&#10;     * Returns the value obtained by reversing the order of the bytes in the&#10;     * specified {@code char} value.&#10;     *&#10;     * @param ch The {@code char} of which to reverse the byte order.&#10;     * @return the value obtained by reversing (or, equivalently, swapping)&#10;     *     the bytes in the specified {@code char} value.&#10;     * @since 1.5&#10;     "
  ]
  node [
    id 1007
    label "public static String getName(int codePoint)"
    type "method"
    comment "&#10;     * Returns the Unicode name of the specified character&#10;     * {@code codePoint}, or null if the code point is&#10;     * {@link #UNASSIGNED unassigned}.&#10;     * <p>&#10;     * Note: if the specified character is not assigned a name by&#10;     * the <i>UnicodeData</i> file (part of the Unicode Character&#10;     * Database maintained by the Unicode Consortium), the returned&#10;     * name is the same as the result of expression:&#10;     *&#10;     * <blockquote>{@code&#10;     *     Character.UnicodeBlock.of(codePoint).toString().replace('_', ' ')&#10;     *     + &#34; &#34;&#10;     *     + Integer.toHexString(codePoint).toUpperCase(Locale.ROOT);&#10;     *&#10;     * }</blockquote>&#10;     *&#10;     * @param  codePoint the character (Unicode code point)&#10;     *&#10;     * @return the Unicode name of the specified character, or null if&#10;     *         the code point is unassigned.&#10;     *&#10;     * @throws IllegalArgumentException if the specified&#10;     *            {@code codePoint} is not a valid Unicode&#10;     *            code point.&#10;     *&#10;     * @since 1.7&#10;     "
  ]
  node [
    id 1008
    label "UNASSIGNED"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1009
    label "public static int codePointOf(String name)"
    type "method"
    comment "&#10;     * Returns the code point value of the Unicode character specified by&#10;     * the given Unicode character name.&#10;     * <p>&#10;     * Note: if a character is not assigned a name by the <i>UnicodeData</i>&#10;     * file (part of the Unicode Character Database maintained by the Unicode&#10;     * Consortium), its name is defined as the result of expression:&#10;     *&#10;     * <blockquote>{@code&#10;     *     Character.UnicodeBlock.of(codePoint).toString().replace('_', ' ')&#10;     *     + &#34; &#34;&#10;     *     + Integer.toHexString(codePoint).toUpperCase(Locale.ROOT);&#10;     *&#10;     * }</blockquote>&#10;     * <p>&#10;     * The {@code name} matching is case insensitive, with any leading and&#10;     * trailing whitespace character removed.&#10;     *&#10;     * @param  name the Unicode character name&#10;     *&#10;     * @return the code point value of the character specified by its name.&#10;     *&#10;     * @throws IllegalArgumentException if the specified {@code name}&#10;     *         is not a valid Unicode character name.&#10;     * @throws NullPointerException if {@code name} is {@code null}&#10;     *&#10;     * @since 9&#10;     "
  ]
  node [
    id 1010
    label "private static native String getNameImpl(int codePoint)"
    type "method"
    comment " Implement getNameImpl() and codePointOfImpl() natively."
  ]
  node [
    id 1011
    label "public String toLowerCase()"
    type "method"
    comment "&#10;     * Converts all of the characters in this {@code String} to lower&#10;     * case using the rules of the default locale. This is equivalent to calling&#10;     * {@code toLowerCase(Locale.getDefault())}.&#10;     * <p>&#10;     * <b>Note:</b> This method is locale sensitive, and may produce unexpected&#10;     * results if used for strings that are intended to be interpreted locale&#10;     * independently.&#10;     * Examples are programming language identifiers, protocol keys, and HTML&#10;     * tags.&#10;     * For instance, {@code &#34;TITLE&#34;.toLowerCase()} in a Turkish locale&#10;     * returns {@code &#34;t\u005Cu0131tle&#34;}, where '\u005Cu0131' is the&#10;     * LATIN SMALL LETTER DOTLESS I character.&#10;     * To obtain correct results for locale insensitive strings, use&#10;     * {@code toLowerCase(Locale.ROOT)}.&#10;     *&#10;     * @return  the {@code String}, converted to lowercase.&#10;     * @see     java.lang.String#toLowerCase(Locale)&#10;     "
  ]
  node [
    id 1012
    label "public String toUpperCase(Locale locale)"
    type "method"
    comment "&#10;     * Converts all of the characters in this {@code String} to upper&#10;     * case using the rules of the given {@code Locale}. Case mapping is based&#10;     * on the Unicode Standard version specified by the {@link java.lang.Character Character}&#10;     * class. Since case mappings are not always 1:1 char mappings, the resulting&#10;     * {@code String} may be a different length than the original {@code String}.&#10;     * <p>&#10;     * Examples of locale-sensitive and 1:M case mappings are in the following table.&#10;     *&#10;     * <table class=&#34;plain&#34;>&#10;     * <caption style=&#34;display:none&#34;>Examples of locale-sensitive and 1:M case mappings. Shows Language code of locale, lower case, upper case, and description.</caption>&#10;     * <thead>&#10;     * <tr>&#10;     *   <th scope=&#34;col&#34;>Language Code of Locale</th>&#10;     *   <th scope=&#34;col&#34;>Lower Case</th>&#10;     *   <th scope=&#34;col&#34;>Upper Case</th>&#10;     *   <th scope=&#34;col&#34;>Description</th>&#10;     * </tr>&#10;     * </thead>&#10;     * <tbody>&#10;     * <tr>&#10;     *   <td>tr (Turkish)</td>&#10;     *   <th scope=&#34;row&#34; style=&#34;font-weight:normal; text-align:left&#34;>&#38;#92;u0069</th>&#10;     *   <td>&#38;#92;u0130</td>&#10;     *   <td>small letter i -&#38;gt; capital letter I with dot above</td>&#10;     * </tr>&#10;     * <tr>&#10;     *   <td>tr (Turkish)</td>&#10;     *   <th scope=&#34;row&#34; style=&#34;font-weight:normal; text-align:left&#34;>&#38;#92;u0131</th>&#10;     *   <td>&#38;#92;u0049</td>&#10;     *   <td>small letter dotless i -&#38;gt; capital letter I</td>&#10;     * </tr>&#10;     * <tr>&#10;     *   <td>(all)</td>&#10;     *   <th scope=&#34;row&#34; style=&#34;font-weight:normal; text-align:left&#34;>&#38;#92;u00df</th>&#10;     *   <td>&#38;#92;u0053 &#38;#92;u0053</td>&#10;     *   <td>small letter sharp s -&#38;gt; two letters: SS</td>&#10;     * </tr>&#10;     * <tr>&#10;     *   <td>(all)</td>&#10;     *   <th scope=&#34;row&#34; style=&#34;font-weight:normal; text-align:left&#34;>Fahrvergn&#38;uuml;gen</th>&#10;     *   <td>FAHRVERGN&#38;Uuml;GEN</td>&#10;     *   <td></td>&#10;     * </tr>&#10;     * </tbody>&#10;     * </table>&#10;     * @param locale use the case transformation rules for this locale&#10;     * @return the {@code String}, converted to uppercase.&#10;     * @see     java.lang.String#toUpperCase()&#10;     * @see     java.lang.String#toLowerCase()&#10;     * @see     java.lang.String#toLowerCase(Locale)&#10;     * @since   1.1&#10;     "
  ]
  node [
    id 1013
    label "public String toUpperCase()"
    type "method"
    comment "&#10;     * Converts all of the characters in this {@code String} to upper&#10;     * case using the rules of the default locale. This method is equivalent to&#10;     * {@code toUpperCase(Locale.getDefault())}.&#10;     * <p>&#10;     * <b>Note:</b> This method is locale sensitive, and may produce unexpected&#10;     * results if used for strings that are intended to be interpreted locale&#10;     * independently.&#10;     * Examples are programming language identifiers, protocol keys, and HTML&#10;     * tags.&#10;     * For instance, {@code &#34;title&#34;.toUpperCase()} in a Turkish locale&#10;     * returns {@code &#34;T\u005Cu0130TLE&#34;}, where '\u005Cu0130' is the&#10;     * LATIN CAPITAL LETTER I WITH DOT ABOVE character.&#10;     * To obtain correct results for locale insensitive strings, use&#10;     * {@code toUpperCase(Locale.ROOT)}.&#10;     *&#10;     * @return  the {@code String}, converted to uppercase.&#10;     * @see     java.lang.String#toUpperCase(Locale)&#10;     "
  ]
  node [
    id 1014
    label "public String trim()"
    type "method"
    comment "&#10;     * Returns a string whose value is this string, with all leading&#10;     * and trailing space removed, where space is defined&#10;     * as any character whose codepoint is less than or equal to&#10;     * {@code 'U+0020'} (the space character).&#10;     * <p>&#10;     * If this {@code String} object represents an empty character&#10;     * sequence, or the first and last characters of character sequence&#10;     * represented by this {@code String} object both have codes&#10;     * that are not space (as defined above), then a&#10;     * reference to this {@code String} object is returned.&#10;     * <p>&#10;     * Otherwise, if all characters in this string are space (as&#10;     * defined above), then a  {@code String} object representing an&#10;     * empty string is returned.&#10;     * <p>&#10;     * Otherwise, let <i>k</i> be the index of the first character in the&#10;     * string whose code is not a space (as defined above) and let&#10;     * <i>m</i> be the index of the last character in the string whose code&#10;     * is not a space (as defined above). A {@code String}&#10;     * object is returned, representing the substring of this string that&#10;     * begins with the character at index <i>k</i> and ends with the&#10;     * character at index <i>m</i>-that is, the result of&#10;     * {@code this.substring(k, m + 1)}.&#10;     * <p>&#10;     * This method may be used to trim space (as defined above) from&#10;     * the beginning and end of a string.&#10;     *&#10;     * @return  a string whose value is this string, with all leading&#10;     *          and trailing space removed, or this string if it&#10;     *          has no leading or trailing space.&#10;     "
  ]
  node [
    id 1015
    label "public String strip()"
    type "method"
    comment "&#10;     * Returns a string whose value is this string, with all leading&#10;     * and trailing {@link Character#isWhitespace(int) white space}&#10;     * removed.&#10;     * <p>&#10;     * If this {@code String} object represents an empty string,&#10;     * or if all code points in this string are&#10;     * {@link Character#isWhitespace(int) white space}, then an empty string&#10;     * is returned.&#10;     * <p>&#10;     * Otherwise, returns a substring of this string beginning with the first&#10;     * code point that is not a {@link Character#isWhitespace(int) white space}&#10;     * up to and including the last code point that is not a&#10;     * {@link Character#isWhitespace(int) white space}.&#10;     * <p>&#10;     * This method may be used to strip&#10;     * {@link Character#isWhitespace(int) white space} from&#10;     * the beginning and end of a string.&#10;     *&#10;     * @return  a string whose value is this string, with all leading&#10;     *          and trailing white space removed&#10;     *&#10;     * @see Character#isWhitespace(int)&#10;     *&#10;     * @since 11&#10;     "
  ]
  node [
    id 1016
    label "public String stripLeading()"
    type "method"
    comment "&#10;     * Returns a string whose value is this string, with all leading&#10;     * {@link Character#isWhitespace(int) white space} removed.&#10;     * <p>&#10;     * If this {@code String} object represents an empty string,&#10;     * or if all code points in this string are&#10;     * {@link Character#isWhitespace(int) white space}, then an empty string&#10;     * is returned.&#10;     * <p>&#10;     * Otherwise, returns a substring of this string beginning with the first&#10;     * code point that is not a {@link Character#isWhitespace(int) white space}&#10;     * up to to and including the last code point of this string.&#10;     * <p>&#10;     * This method may be used to trim&#10;     * {@link Character#isWhitespace(int) white space} from&#10;     * the beginning of a string.&#10;     *&#10;     * @return  a string whose value is this string, with all leading white&#10;     *          space removed&#10;     *&#10;     * @see Character#isWhitespace(int)&#10;     *&#10;     * @since 11&#10;     "
  ]
  node [
    id 1017
    label "public String stripTrailing()"
    type "method"
    comment "&#10;     * Returns a string whose value is this string, with all trailing&#10;     * {@link Character#isWhitespace(int) white space} removed.&#10;     * <p>&#10;     * If this {@code String} object represents an empty string,&#10;     * or if all characters in this string are&#10;     * {@link Character#isWhitespace(int) white space}, then an empty string&#10;     * is returned.&#10;     * <p>&#10;     * Otherwise, returns a substring of this string beginning with the first&#10;     * code point of this string up to and including the last code point&#10;     * that is not a {@link Character#isWhitespace(int) white space}.&#10;     * <p>&#10;     * This method may be used to trim&#10;     * {@link Character#isWhitespace(int) white space} from&#10;     * the end of a string.&#10;     *&#10;     * @return  a string whose value is this string, with all trailing white&#10;     *          space removed&#10;     *&#10;     * @see Character#isWhitespace(int)&#10;     *&#10;     * @since 11&#10;     "
  ]
  node [
    id 1018
    label "public boolean isBlank()"
    type "method"
    comment "&#10;     * Returns {@code true} if the string is empty or contains only&#10;     * {@link Character#isWhitespace(int) white space} codepoints,&#10;     * otherwise {@code false}.&#10;     *&#10;     * @return {@code true} if the string is empty or contains only&#10;     *         {@link Character#isWhitespace(int) white space} codepoints,&#10;     *         otherwise {@code false}&#10;     *&#10;     * @see Character#isWhitespace(int)&#10;     *&#10;     * @since 11&#10;     "
  ]
  node [
    id 1019
    label "public Stream<String> lines()"
    type "method"
    comment "&#10;     * Returns a {@code Stream}, the elements of which are lines read from&#10;     * this {@code BufferedReader}.  The {@link Stream} is lazily populated,&#10;     * i.e., read only occurs during the&#10;     * <a href=&#34;../util/stream/package-summary.html#StreamOps&#34;>terminal&#10;     * stream operation</a>.&#10;     *&#10;     * <p> The reader must not be operated on during the execution of the&#10;     * terminal stream operation. Otherwise, the result of the terminal stream&#10;     * operation is undefined.&#10;     *&#10;     * <p> After execution of the terminal stream operation there are no&#10;     * guarantees that the reader will be at a specific position from which to&#10;     * read the next character or line.&#10;     *&#10;     * <p> If an {@link IOException} is thrown when accessing the underlying&#10;     * {@code BufferedReader}, it is wrapped in an {@link&#10;     * UncheckedIOException} which will be thrown from the {@code Stream}&#10;     * method that caused the read to take place. This method will return a&#10;     * Stream if invoked on a BufferedReader that is closed. Any operation on&#10;     * that stream that requires reading from the BufferedReader after it is&#10;     * closed, will cause an UncheckedIOException to be thrown.&#10;     *&#10;     * @return a {@code Stream<String>} providing the lines of text&#10;     *         described by this {@code BufferedReader}&#10;     *&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 1020
    label "public String indent(int n)"
    type "method"
    comment "&#10;     * Adjusts the indentation of each line of this string based on the value of&#10;     * {@code n}, and normalizes line termination characters.&#10;     * <p>&#10;     * This string is conceptually separated into lines using&#10;     * {@link String#lines()}. Each line is then adjusted as described below&#10;     * and then suffixed with a line feed {@code &#34;\n&#34;} (U+000A). The resulting&#10;     * lines are then concatenated and returned.&#10;     * <p>&#10;     * If {@code n > 0} then {@code n} spaces (U+0020) are inserted at the&#10;     * beginning of each line.&#10;     * <p>&#10;     * If {@code n < 0} then up to {@code n}&#10;     * {@linkplain Character#isWhitespace(int) white space characters} are removed&#10;     * from the beginning of each line. If a given line does not contain&#10;     * sufficient white space then all leading&#10;     * {@linkplain Character#isWhitespace(int) white space characters} are removed.&#10;     * Each white space character is treated as a single character. In&#10;     * particular, the tab character {@code &#34;\t&#34;} (U+0009) is considered a&#10;     * single character; it is not expanded.&#10;     * <p>&#10;     * If {@code n == 0} then the line remains unchanged. However, line&#10;     * terminators are still normalized.&#10;     *&#10;     * @param n  number of leading&#10;     *           {@linkplain Character#isWhitespace(int) white space characters}&#10;     *           to add or remove&#10;     *&#10;     * @return string with indentation adjusted and line endings normalized&#10;     *&#10;     * @see String#lines()&#10;     * @see String#isBlank()&#10;     * @see Character#isWhitespace(int)&#10;     *&#10;     * @since 12&#10;     "
  ]
  node [
    id 1021
    label "lines()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1022
    label "public String stripIndent()"
    type "method"
    comment "&#10;     * Returns a string whose value is this string, with incidental&#10;     * {@linkplain Character#isWhitespace(int) white space} removed from&#10;     * the beginning and end of every line.&#10;     * <p>&#10;     * Incidental {@linkplain Character#isWhitespace(int) white space}&#10;     * is often present in a text block to align the content with the opening&#10;     * delimiter. For example, in the following code, dots represent incidental&#10;     * {@linkplain Character#isWhitespace(int) white space}:&#10;     * <blockquote><pre>&#10;     * String html = &#34;&#34;&#34;&#10;     * ..............&#38;lt;html&#38;gt;&#10;     * ..............    &#38;lt;body&#38;gt;&#10;     * ..............        &#38;lt;p&#38;gt;Hello, world&#38;lt;/p&#38;gt;&#10;     * ..............    &#38;lt;/body&#38;gt;&#10;     * ..............&#38;lt;/html&#38;gt;&#10;     * ..............&#34;&#34;&#34;;&#10;     * </pre></blockquote>&#10;     * This method treats the incidental&#10;     * {@linkplain Character#isWhitespace(int) white space} as indentation to be&#10;     * stripped, producing a string that preserves the relative indentation of&#10;     * the content. Using | to visualize the start of each line of the string:&#10;     * <blockquote><pre>&#10;     * |&#38;lt;html&#38;gt;&#10;     * |    &#38;lt;body&#38;gt;&#10;     * |        &#38;lt;p&#38;gt;Hello, world&#38;lt;/p&#38;gt;&#10;     * |    &#38;lt;/body&#38;gt;&#10;     * |&#38;lt;/html&#38;gt;&#10;     * </pre></blockquote>&#10;     * First, the individual lines of this string are extracted. A <i>line</i>&#10;     * is a sequence of zero or more characters followed by either a line&#10;     * terminator or the end of the string.&#10;     * If the string has at least one line terminator, the last line consists&#10;     * of the characters between the last terminator and the end of the string.&#10;     * Otherwise, if the string has no terminators, the last line is the start&#10;     * of the string to the end of the string, in other words, the entire&#10;     * string.&#10;     * A line does not include the line terminator.&#10;     * <p>&#10;     * Then, the <i>minimum indentation</i> (min) is determined as follows:&#10;     * <ul>&#10;     *   <li><p>For each non-blank line (as defined by {@link String#isBlank()}),&#10;     *   the leading {@linkplain Character#isWhitespace(int) white space}&#10;     *   characters are counted.</p>&#10;     *   </li>&#10;     *   <li><p>The leading {@linkplain Character#isWhitespace(int) white space}&#10;     *   characters on the last line are also counted even if&#10;     *   {@linkplain String#isBlank() blank}.</p>&#10;     *   </li>&#10;     * </ul>&#10;     * <p>The <i>min</i> value is the smallest of these counts.&#10;     * <p>&#10;     * For each {@linkplain String#isBlank() non-blank} line, <i>min</i> leading&#10;     * {@linkplain Character#isWhitespace(int) white space} characters are&#10;     * removed, and any trailing {@linkplain Character#isWhitespace(int) white&#10;     * space} characters are removed. {@linkplain String#isBlank() Blank} lines&#10;     * are replaced with the empty string.&#10;     *&#10;     * <p>&#10;     * Finally, the lines are joined into a new string, using the LF character&#10;     * {@code &#34;\n&#34;} (U+000A) to separate lines.&#10;     *&#10;     * @apiNote&#10;     * This method's primary purpose is to shift a block of lines as far as&#10;     * possible to the left, while preserving relative indentation. Lines&#10;     * that were indented the least will thus have no leading&#10;     * {@linkplain Character#isWhitespace(int) white space}.&#10;     * The result will have the same number of line terminators as this string.&#10;     * If this string ends with a line terminator then the result will end&#10;     * with a line terminator.&#10;     *&#10;     * @implSpec&#10;     * This method treats all {@linkplain Character#isWhitespace(int) white space}&#10;     * characters as having equal width. As long as the indentation on every&#10;     * line is consistently composed of the same character sequences, then the&#10;     * result will be as described above.&#10;     *&#10;     * @return string with incidental indentation removed and line&#10;     *         terminators normalized&#10;     *&#10;     * @see String#lines()&#10;     * @see String#isBlank()&#10;     * @see String#indent(int)&#10;     * @see Character#isWhitespace(int)&#10;     *&#10;     * @since 15&#10;     *&#10;     "
  ]
  node [
    id 1023
    label "isBlank()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1024
    label "public String translateEscapes()"
    type "method"
    comment "&#10;     * Returns a string whose value is this string, with escape sequences&#10;     * translated as if in a string literal.&#10;     * <p>&#10;     * Escape sequences are translated as follows;&#10;     * <table class=&#34;striped&#34;>&#10;     *   <caption style=&#34;display:none&#34;>Translation</caption>&#10;     *   <thead>&#10;     *   <tr>&#10;     *     <th scope=&#34;col&#34;>Escape</th>&#10;     *     <th scope=&#34;col&#34;>Name</th>&#10;     *     <th scope=&#34;col&#34;>Translation</th>&#10;     *   </tr>&#10;     *   </thead>&#10;     *   <tbody>&#10;     *   <tr>&#10;     *     <th scope=&#34;row&#34;>{@code \u005Cb}</th>&#10;     *     <td>backspace</td>&#10;     *     <td>{@code U+0008}</td>&#10;     *   </tr>&#10;     *   <tr>&#10;     *     <th scope=&#34;row&#34;>{@code \u005Ct}</th>&#10;     *     <td>horizontal tab</td>&#10;     *     <td>{@code U+0009}</td>&#10;     *   </tr>&#10;     *   <tr>&#10;     *     <th scope=&#34;row&#34;>{@code \u005Cn}</th>&#10;     *     <td>line feed</td>&#10;     *     <td>{@code U+000A}</td>&#10;     *   </tr>&#10;     *   <tr>&#10;     *     <th scope=&#34;row&#34;>{@code \u005Cf}</th>&#10;     *     <td>form feed</td>&#10;     *     <td>{@code U+000C}</td>&#10;     *   </tr>&#10;     *   <tr>&#10;     *     <th scope=&#34;row&#34;>{@code \u005Cr}</th>&#10;     *     <td>carriage return</td>&#10;     *     <td>{@code U+000D}</td>&#10;     *   </tr>&#10;     *   <tr>&#10;     *     <th scope=&#34;row&#34;>{@code \u005Cs}</th>&#10;     *     <td>space</td>&#10;     *     <td>{@code U+0020}</td>&#10;     *   </tr>&#10;     *   <tr>&#10;     *     <th scope=&#34;row&#34;>{@code \u005C&#34;}</th>&#10;     *     <td>double quote</td>&#10;     *     <td>{@code U+0022}</td>&#10;     *   </tr>&#10;     *   <tr>&#10;     *     <th scope=&#34;row&#34;>{@code \u005C'}</th>&#10;     *     <td>single quote</td>&#10;     *     <td>{@code U+0027}</td>&#10;     *   </tr>&#10;     *   <tr>&#10;     *     <th scope=&#34;row&#34;>{@code \u005C\u005C}</th>&#10;     *     <td>backslash</td>&#10;     *     <td>{@code U+005C}</td>&#10;     *   </tr>&#10;     *   <tr>&#10;     *     <th scope=&#34;row&#34;>{@code \u005C0 - \u005C377}</th>&#10;     *     <td>octal escape</td>&#10;     *     <td>code point equivalents</td>&#10;     *   </tr>&#10;     *   <tr>&#10;     *     <th scope=&#34;row&#34;>{@code \u005C<line-terminator>}</th>&#10;     *     <td>continuation</td>&#10;     *     <td>discard</td>&#10;     *   </tr>&#10;     *   </tbody>&#10;     * </table>&#10;     *&#10;     * @implNote&#10;     * This method does <em>not</em> translate Unicode escapes such as &#34;{@code \u005cu2022}&#34;.&#10;     * Unicode escapes are translated by the Java compiler when reading input characters and&#10;     * are not part of the string literal specification.&#10;     *&#10;     * @throws IllegalArgumentException when an escape sequence is malformed.&#10;     *&#10;     * @return String with escape sequences translated.&#10;     *&#10;     * @jls 3.10.7 Escape Sequences&#10;     *&#10;     * @since 15&#10;     "
  ]
  node [
    id 1025
    label "public R transform(Function<? super String, ? extends R> f)"
    type "method"
    comment "&#10;     * This method allows the application of a function to {@code this}&#10;     * string. The function should expect a single String argument&#10;     * and produce an {@code R} result.&#10;     * <p>&#10;     * Any exception thrown by {@code f.apply()} will be propagated to the&#10;     * caller.&#10;     *&#10;     * @param f    a function to apply&#10;     *&#10;     * @param <R>  the type of the result&#10;     *&#10;     * @return     the result of applying the function to this string&#10;     *&#10;     * @see java.util.function.Function&#10;     *&#10;     * @since 12&#10;     "
  ]
  node [
    id 1026
    label "public native char[] toCharArray()"
    type "method"
    comment "&#10;    public char[] toCharArray() {&#10;        return isLatin1() ? StringLatin1.toChars(value)&#10;                          : StringUTF16.toChars(value);&#10;    }&#10;    "
  ]
  node [
    id 1027
    label "public static String format(String format, Object... args)"
    type "method"
    comment "&#10;     * Returns a formatted string using the specified format string and&#10;     * arguments.&#10;     *&#10;     * <p> The locale always used is the one returned by {@link&#10;     * java.util.Locale#getDefault(java.util.Locale.Category)&#10;     * Locale.getDefault(Locale.Category)} with&#10;     * {@link java.util.Locale.Category#FORMAT FORMAT} category specified.&#10;     *&#10;     * @param  format&#10;     *         A <a href=&#34;../util/Formatter.html#syntax&#34;>format string</a>&#10;     *&#10;     * @param  args&#10;     *         Arguments referenced by the format specifiers in the format&#10;     *         string.  If there are more arguments than format specifiers, the&#10;     *         extra arguments are ignored.  The number of arguments is&#10;     *         variable and may be zero.  The maximum number of arguments is&#10;     *         limited by the maximum dimension of a Java array as defined by&#10;     *         <cite>The Java&#38;trade; Virtual Machine Specification</cite>.&#10;     *         The behaviour on a&#10;     *         {@code null} argument depends on the <a&#10;     *         href=&#34;../util/Formatter.html#syntax&#34;>conversion</a>.&#10;     *&#10;     * @throws  java.util.IllegalFormatException&#10;     *          If a format string contains an illegal syntax, a format&#10;     *          specifier that is incompatible with the given arguments,&#10;     *          insufficient arguments given the format string, or other&#10;     *          illegal conditions.  For specification of all possible&#10;     *          formatting errors, see the <a&#10;     *          href=&#34;../util/Formatter.html#detail&#34;>Details</a> section of the&#10;     *          formatter class specification.&#10;     *&#10;     * @return  A formatted string&#10;     *&#10;     * @see  java.util.Formatter&#10;     * @since  1.5&#10;     "
  ]
  node [
    id 1028
    label "getDefault(java.util.Locale.Category)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1029
    label "FORMAT"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1030
    label "public static String format(Locale l, String format, Object... args)"
    type "method"
    comment "&#10;     * Returns a formatted string using the specified locale, format string,&#10;     * and arguments.&#10;     *&#10;     * @param  l&#10;     *         The {@linkplain java.util.Locale locale} to apply during&#10;     *         formatting.  If {@code l} is {@code null} then no localization&#10;     *         is applied.&#10;     *&#10;     * @param  format&#10;     *         A <a href=&#34;../util/Formatter.html#syntax&#34;>format string</a>&#10;     *&#10;     * @param  args&#10;     *         Arguments referenced by the format specifiers in the format&#10;     *         string.  If there are more arguments than format specifiers, the&#10;     *         extra arguments are ignored.  The number of arguments is&#10;     *         variable and may be zero.  The maximum number of arguments is&#10;     *         limited by the maximum dimension of a Java array as defined by&#10;     *         <cite>The Java&#38;trade; Virtual Machine Specification</cite>.&#10;     *         The behaviour on a&#10;     *         {@code null} argument depends on the&#10;     *         <a href=&#34;../util/Formatter.html#syntax&#34;>conversion</a>.&#10;     *&#10;     * @throws  java.util.IllegalFormatException&#10;     *          If a format string contains an illegal syntax, a format&#10;     *          specifier that is incompatible with the given arguments,&#10;     *          insufficient arguments given the format string, or other&#10;     *          illegal conditions.  For specification of all possible&#10;     *          formatting errors, see the <a&#10;     *          href=&#34;../util/Formatter.html#detail&#34;>Details</a> section of the&#10;     *          formatter class specification&#10;     *&#10;     * @return  A formatted string&#10;     *&#10;     * @see  java.util.Formatter&#10;     * @since  1.5&#10;     "
  ]
  node [
    id 1031
    label "public String formatted(Object... args)"
    type "method"
    comment "&#10;     * Formats using this string as the format string, and the supplied&#10;     * arguments.&#10;     *&#10;     * @implSpec This method is equivalent to {@code String.format(this, args)}.&#10;     *&#10;     * @param  args&#10;     *         Arguments referenced by the format specifiers in this string.&#10;     *&#10;     * @return  A formatted string&#10;     *&#10;     * @see  java.lang.String#format(String,Object...)&#10;     * @see  java.util.Formatter&#10;     *&#10;     * @since 15&#10;     *&#10;     "
  ]
  node [
    id 1032
    label "public static String valueOf(Object obj)"
    type "method"
    comment "&#10;     * Returns the string representation of the {@code Object} argument.&#10;     *&#10;     * @param   obj   an {@code Object}.&#10;     * @return  if the argument is {@code null}, then a string equal to&#10;     *          {@code &#34;null&#34;}; otherwise, the value of&#10;     *          {@code obj.toString()} is returned.&#10;     * @see     java.lang.Object#toString()&#10;     "
  ]
  node [
    id 1033
    label "public static String valueOf(char[] data)"
    type "method"
    comment "&#10;     * Returns the string representation of the {@code char} array&#10;     * argument. The contents of the character array are copied; subsequent&#10;     * modification of the character array does not affect the returned&#10;     * string.&#10;     *&#10;     * @param   data     the character array.&#10;     * @return  a {@code String} that contains the characters of the&#10;     *          character array.&#10;     "
  ]
  node [
    id 1034
    label "public static String valueOf(char[] data, int offset, int count)"
    type "method"
    comment "&#10;     * Returns the string representation of a specific subarray of the&#10;     * {@code char} array argument.&#10;     * <p>&#10;     * The {@code offset} argument is the index of the first&#10;     * character of the subarray. The {@code count} argument&#10;     * specifies the length of the subarray. The contents of the subarray&#10;     * are copied; subsequent modification of the character array does not&#10;     * affect the returned string.&#10;     *&#10;     * @param   data     the character array.&#10;     * @param   offset   initial offset of the subarray.&#10;     * @param   count    length of the subarray.&#10;     * @return  a {@code String} that contains the characters of the&#10;     *          specified subarray of the character array.&#10;     * @exception IndexOutOfBoundsException if {@code offset} is&#10;     *          negative, or {@code count} is negative, or&#10;     *          {@code offset+count} is larger than&#10;     *          {@code data.length}.&#10;     "
  ]
  node [
    id 1035
    label "public static String copyValueOf(char[] data, int offset, int count)"
    type "method"
    comment "&#10;     * Equivalent to {@link #valueOf(char[], int, int)}.&#10;     *&#10;     * @param   data     the character array.&#10;     * @param   offset   initial offset of the subarray.&#10;     * @param   count    length of the subarray.&#10;     * @return  a {@code String} that contains the characters of the&#10;     *          specified subarray of the character array.&#10;     * @exception IndexOutOfBoundsException if {@code offset} is&#10;     *          negative, or {@code count} is negative, or&#10;     *          {@code offset+count} is larger than&#10;     *          {@code data.length}.&#10;     "
  ]
  node [
    id 1036
    label "valueOf(char"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1037
    label "public static String copyValueOf(char[] data)"
    type "method"
    comment "&#10;     * Equivalent to {@link #valueOf(char[])}.&#10;     *&#10;     * @param   data   the character array.&#10;     * @return  a {@code String} that contains the characters of the&#10;     *          character array.&#10;     "
  ]
  node [
    id 1038
    label "public static String valueOf(boolean b)"
    type "method"
    comment "&#10;     * Returns the string representation of the {@code boolean} argument.&#10;     *&#10;     * @param   b   a {@code boolean}.&#10;     * @return  if the argument is {@code true}, a string equal to&#10;     *          {@code &#34;true&#34;} is returned; otherwise, a string equal to&#10;     *          {@code &#34;false&#34;} is returned.&#10;     "
  ]
  node [
    id 1039
    label "public static String valueOf(char c)"
    type "method"
    comment "&#10;     * Returns the string representation of the {@code char}&#10;     * argument.&#10;     *&#10;     * @param   c   a {@code char}.&#10;     * @return  a string of length {@code 1} containing&#10;     *          as its single character the argument {@code c}.&#10;     "
  ]
  node [
    id 1040
    label "public static String valueOf(int i)"
    type "method"
    comment "&#10;     * Returns the string representation of the {@code int} argument.&#10;     * <p>&#10;     * The representation is exactly the one returned by the&#10;     * {@code Integer.toString} method of one argument.&#10;     *&#10;     * @param   i   an {@code int}.&#10;     * @return  a string representation of the {@code int} argument.&#10;     * @see     java.lang.Integer#toString(int, int)&#10;     "
  ]
  node [
    id 1041
    label "public static String valueOf(long l)"
    type "method"
    comment "&#10;     * Returns the string representation of the {@code long} argument.&#10;     * <p>&#10;     * The representation is exactly the one returned by the&#10;     * {@code Long.toString} method of one argument.&#10;     *&#10;     * @param   l   a {@code long}.&#10;     * @return  a string representation of the {@code long} argument.&#10;     * @see     java.lang.Long#toString(long)&#10;     "
  ]
  node [
    id 1042
    label "public static String valueOf(float f)"
    type "method"
    comment "&#10;     * Returns the string representation of the {@code float} argument.&#10;     * <p>&#10;     * The representation is exactly the one returned by the&#10;     * {@code Float.toString} method of one argument.&#10;     *&#10;     * @param   f   a {@code float}.&#10;     * @return  a string representation of the {@code float} argument.&#10;     * @see     java.lang.Float#toString(float)&#10;     "
  ]
  node [
    id 1043
    label "public static String valueOf(double d)"
    type "method"
    comment "&#10;     * Returns the string representation of the {@code double} argument.&#10;     * <p>&#10;     * The representation is exactly the one returned by the&#10;     * {@code Double.toString} method of one argument.&#10;     *&#10;     * @param   d   a {@code double}.&#10;     * @return  a  string representation of the {@code double} argument.&#10;     * @see     java.lang.Double#toString(double)&#10;     "
  ]
  node [
    id 1044
    label "public native String intern()"
    type "method"
    comment " Android-added: Annotate native method as @FastNative."
  ]
  node [
    id 1045
    label "public String repeat(int count)"
    type "method"
    comment "&#10;     * Returns a string whose value is the concatenation of this&#10;     * string repeated {@code count} times.&#10;     * <p>&#10;     * If this string is empty or count is zero then the empty&#10;     * string is returned.&#10;     *&#10;     * @param   count number of times to repeat&#10;     *&#10;     * @return  A string composed of this string repeated&#10;     *          {@code count} times or the empty string if this&#10;     *          string is empty or count is zero&#10;     *&#10;     * @throws  IllegalArgumentException if the {@code count} is&#10;     *          negative.&#10;     *&#10;     * @since 11&#10;     "
  ]
  node [
    id 1046
    label " void getBytes(byte[] dst, int dstBegin, byte coder)"
    type "method"
    comment "&#10;     * Copy character bytes from this string into dst starting at dstBegin.&#10;     * This method doesn't perform any range checking.&#10;     *&#10;     * Invoker guarantees: dst is in UTF16 (inflate itself for asb), if two&#10;     * coders are different, and dst is big enough (range check)&#10;     *&#10;     * @param dstBegin  the char index, not offset of byte[]&#10;     * @param coder     the coder of dst[]&#10;     "
  ]
  node [
    id 1047
    label "private native void fillBytesLatin1(byte[] dst, int byteIndex)"
    type "method"
    comment "&#10;     * Fill the underlying characters into the byte buffer. No range check.&#10;     * The caller should guarantee that dst is big enough for this operation.&#10;     "
  ]
  node [
    id 1048
    label "private native void fillBytesUTF16(byte[] dst, int byteIndex)"
    type "method"
    comment "&#10;     * Fill the underlying characters into the byte buffer. No range check.&#10;     * The caller should guarantee that dst is big enough for this operation.&#10;     "
  ]
  node [
    id 1049
    label " byte coder()"
    type "method"
    comment "&#10;     * Android note: It returns UTF16 if the string has any 0x00 char.&#10;     * See the difference between {@link StringLatin1#canEncode(int)} and&#10;     * art::mirror::String::IsASCII(uint16_t) in string.h.&#10;     "
  ]
  node [
    id 1050
    label "canEncode(int)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1051
    label "java.lang.StringLatin1"
    type "class"
    comment ""
  ]
  node [
    id 1052
    label "public static int compareToUTF16(byte[] value, byte[] other, int len1, int len2)"
    type "method"
    comment "&#10;     * Checks the boundary and then compares the byte arrays.&#10;     "
  ]
  node [
    id 1053
    label "public static void inflate(byte[] src, int srcOff, char[] dst, int dstOff, int len)"
    type "method"
    comment " inflatedCopy byte[] -> char[]"
  ]
  node [
    id 1054
    label "public static void inflate(byte[] src, int srcOff, byte[] dst, int dstOff, int len)"
    type "method"
    comment " inflatedCopy byte[] -> byte[]"
  ]
  node [
    id 1055
    label " static void checkIndex(int index, int length)"
    type "method"
    comment "&#10;     * StringIndexOutOfBoundsException  if {@code index} is&#10;     * negative or greater than or equal to {@code length}.&#10;     "
  ]
  node [
    id 1056
    label " static void checkOffset(int offset, int length)"
    type "method"
    comment "&#10;     * StringIndexOutOfBoundsException  if {@code offset}&#10;     * is negative or greater than {@code length}.&#10;     "
  ]
  node [
    id 1057
    label " static void checkBoundsOffCount(int offset, int count, int length)"
    type "method"
    comment "&#10;     * Check {@code offset}, {@code count} against {@code 0} and {@code length}&#10;     * bounds.&#10;     *&#10;     * @throws  StringIndexOutOfBoundsException&#10;     *          If {@code offset} is negative, {@code count} is negative,&#10;     *          or {@code offset} is greater than {@code length - count}&#10;     "
  ]
  node [
    id 1058
    label " static String valueOfCodePoint(int codePoint)"
    type "method"
    comment "&#10;     * Returns the string representation of the {@code codePoint}&#10;     * argument.&#10;     *&#10;     * @param   codePoint a {@code codePoint}.&#10;     * @return  a string of length {@code 1} or {@code 2} containing&#10;     *          as its single character the argument {@code codePoint}.&#10;     * @throws IllegalArgumentException if the specified&#10;     *          {@code codePoint} is not a {@linkplain Character#isValidCodePoint&#10;     *          valid Unicode code point}.&#10;     "
  ]
  node [
    id 1059
    label " static void checkBoundsBeginEnd(int begin, int end, int length)"
    type "method"
    comment "&#10;     * Check {@code begin}, {@code end} against {@code 0} and {@code length}&#10;     * bounds.&#10;     *&#10;     * @throws  StringIndexOutOfBoundsException&#10;     *          If {@code begin} is negative, {@code begin} is greater than&#10;     *          {@code end}, or {@code end} is greater than {@code length}.&#10;     "
  ]
  node [
    id 1060
    label "public static String toUnsignedString(int i, int radix)"
    type "method"
    comment "&#10;     * Returns a string representation of the first argument as an&#10;     * unsigned integer value in the radix specified by the second&#10;     * argument.&#10;     *&#10;     * <p>If the radix is smaller than {@code Character.MIN_RADIX}&#10;     * or larger than {@code Character.MAX_RADIX}, then the radix&#10;     * {@code 10} is used instead.&#10;     *&#10;     * <p>Note that since the first argument is treated as an unsigned&#10;     * value, no leading sign character is printed.&#10;     *&#10;     * <p>If the magnitude is zero, it is represented by a single zero&#10;     * character {@code '0'} ({@code '\u005Cu0030'}); otherwise,&#10;     * the first character of the representation of the magnitude will&#10;     * not be the zero character.&#10;     *&#10;     * <p>The behavior of radixes and the characters used as digits&#10;     * are the same as {@link #toString(int, int) toString}.&#10;     *&#10;     * @param   i       an integer to be converted to an unsigned string.&#10;     * @param   radix   the radix to use in the string representation.&#10;     * @return  an unsigned string representation of the argument in the specified radix.&#10;     * @see     #toString(int, int)&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 1061
    label "toString(int"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1062
    label "public static String toHexString(int i)"
    type "method"
    comment "&#10;     * Returns a string representation of the integer argument as an&#10;     * unsigned integer in base&#38;nbsp;16.&#10;     *&#10;     * <p>The unsigned integer value is the argument plus 2<sup>32</sup>&#10;     * if the argument is negative; otherwise, it is equal to the&#10;     * argument.  This value is converted to a string of ASCII digits&#10;     * in hexadecimal (base&#38;nbsp;16) with no extra leading&#10;     * {@code 0}s.&#10;     *&#10;     * <p>The value of the argument can be recovered from the returned&#10;     * string {@code s} by calling {@link&#10;     * Integer#parseUnsignedInt(String, int)&#10;     * Integer.parseUnsignedInt(s, 16)}.&#10;     *&#10;     * <p>If the unsigned magnitude is zero, it is represented by a&#10;     * single zero character {@code '0'} ({@code '\u005Cu0030'});&#10;     * otherwise, the first character of the representation of the&#10;     * unsigned magnitude will not be the zero character. The&#10;     * following characters are used as hexadecimal digits:&#10;     *&#10;     * <blockquote>&#10;     *  {@code 0123456789abcdef}&#10;     * </blockquote>&#10;     *&#10;     * These are the characters {@code '\u005Cu0030'} through&#10;     * {@code '\u005Cu0039'} and {@code '\u005Cu0061'} through&#10;     * {@code '\u005Cu0066'}. If uppercase letters are&#10;     * desired, the {@link java.lang.String#toUpperCase()} method may&#10;     * be called on the result:&#10;     *&#10;     * <blockquote>&#10;     *  {@code Integer.toHexString(n).toUpperCase()}&#10;     * </blockquote>&#10;     *&#10;     * @param   i   an integer to be converted to a string.&#10;     * @return  the string representation of the unsigned integer value&#10;     *          represented by the argument in hexadecimal (base&#38;nbsp;16).&#10;     * @see #parseUnsignedInt(String, int)&#10;     * @see #toUnsignedString(int, int)&#10;     * @since   1.0.2&#10;     "
  ]
  node [
    id 1063
    label "parseUnsignedInt(String"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1064
    label "public static String toOctalString(int i)"
    type "method"
    comment "&#10;     * Returns a string representation of the integer argument as an&#10;     * unsigned integer in base&#38;nbsp;8.&#10;     *&#10;     * <p>The unsigned integer value is the argument plus 2<sup>32</sup>&#10;     * if the argument is negative; otherwise, it is equal to the&#10;     * argument.  This value is converted to a string of ASCII digits&#10;     * in octal (base&#38;nbsp;8) with no extra leading {@code 0}s.&#10;     *&#10;     * <p>The value of the argument can be recovered from the returned&#10;     * string {@code s} by calling {@link&#10;     * Integer#parseUnsignedInt(String, int)&#10;     * Integer.parseUnsignedInt(s, 8)}.&#10;     *&#10;     * <p>If the unsigned magnitude is zero, it is represented by a&#10;     * single zero character {@code '0'} ({@code '\u005Cu0030'});&#10;     * otherwise, the first character of the representation of the&#10;     * unsigned magnitude will not be the zero character. The&#10;     * following characters are used as octal digits:&#10;     *&#10;     * <blockquote>&#10;     * {@code 01234567}&#10;     * </blockquote>&#10;     *&#10;     * These are the characters {@code '\u005Cu0030'} through&#10;     * {@code '\u005Cu0037'}.&#10;     *&#10;     * @param   i   an integer to be converted to a string.&#10;     * @return  the string representation of the unsigned integer value&#10;     *          represented by the argument in octal (base&#38;nbsp;8).&#10;     * @see #parseUnsignedInt(String, int)&#10;     * @see #toUnsignedString(int, int)&#10;     * @since   1.0.2&#10;     "
  ]
  node [
    id 1065
    label "public static String toBinaryString(int i)"
    type "method"
    comment "&#10;     * Returns a string representation of the integer argument as an&#10;     * unsigned integer in base&#38;nbsp;2.&#10;     *&#10;     * <p>The unsigned integer value is the argument plus 2<sup>32</sup>&#10;     * if the argument is negative; otherwise it is equal to the&#10;     * argument.  This value is converted to a string of ASCII digits&#10;     * in binary (base&#38;nbsp;2) with no extra leading {@code 0}s.&#10;     *&#10;     * <p>The value of the argument can be recovered from the returned&#10;     * string {@code s} by calling {@link&#10;     * Integer#parseUnsignedInt(String, int)&#10;     * Integer.parseUnsignedInt(s, 2)}.&#10;     *&#10;     * <p>If the unsigned magnitude is zero, it is represented by a&#10;     * single zero character {@code '0'} ({@code '\u005Cu0030'});&#10;     * otherwise, the first character of the representation of the&#10;     * unsigned magnitude will not be the zero character. The&#10;     * characters {@code '0'} ({@code '\u005Cu0030'}) and {@code&#10;     * '1'} ({@code '\u005Cu0031'}) are used as binary digits.&#10;     *&#10;     * @param   i   an integer to be converted to a string.&#10;     * @return  the string representation of the unsigned integer value&#10;     *          represented by the argument in binary (base&#38;nbsp;2).&#10;     * @see #parseUnsignedInt(String, int)&#10;     * @see #toUnsignedString(int, int)&#10;     * @since   1.0.2&#10;     "
  ]
  node [
    id 1066
    label "private static String toUnsignedString0(int val, int shift)"
    type "method"
    comment "&#10;     * Convert the integer to an unsigned number.&#10;     "
  ]
  node [
    id 1067
    label " static void formatUnsignedInt(int val, int shift, char[] buf, int offset, int len)"
    type "method"
    comment "&#10;     * Format an {@code int} (treated as unsigned) into a character buffer. If&#10;     * {@code len} exceeds the formatted ASCII representation of {@code val},&#10;     * {@code buf} will be padded with leading zeroes.&#10;     *&#10;     * @param val the unsigned int to format&#10;     * @param shift the log2 of the base to format in (4 for hex, 3 for octal, 1 for binary)&#10;     * @param buf the character buffer to write to&#10;     * @param offset the offset in the destination buffer to start at&#10;     * @param len the number of characters to write&#10;     "
  ]
  node [
    id 1068
    label "private static void formatUnsignedInt(int val, int shift, byte[] buf, int len)"
    type "method"
    comment "&#10;     * Format an {@code int} (treated as unsigned) into a byte buffer (LATIN1 version). If&#10;     * {@code len} exceeds the formatted ASCII representation of {@code val},&#10;     * {@code buf} will be padded with leading zeroes.&#10;     *&#10;     * @param val the unsigned int to format&#10;     * @param shift the log2 of the base to format in (4 for hex, 3 for octal, 1 for binary)&#10;     * @param buf the byte buffer to write to&#10;     * @param len the number of characters to write&#10;     "
  ]
  node [
    id 1069
    label " static void formatUnsignedInt(int val, int shift, byte[] buf, int offset, int len)"
    type "method"
    comment " byte[]/LATIN1 version    "
  ]
  node [
    id 1070
    label "public static String toString(int i)"
    type "method"
    comment "&#10;     * Returns a {@code String} object representing the&#10;     * specified integer. The argument is converted to signed decimal&#10;     * representation and returned as a string, exactly as if the&#10;     * argument and radix 10 were given as arguments to the {@link&#10;     * #toString(int, int)} method.&#10;     *&#10;     * @param   i   an integer to be converted.&#10;     * @return  a string representation of the argument in base&#38;nbsp;10.&#10;     "
  ]
  node [
    id 1071
    label "public static String toUnsignedString(int i)"
    type "method"
    comment "&#10;     * Returns a string representation of the argument as an unsigned&#10;     * decimal value.&#10;     *&#10;     * The argument is converted to unsigned decimal representation&#10;     * and returned as a string exactly as if the argument and radix&#10;     * 10 were given as arguments to the {@link #toUnsignedString(int,&#10;     * int)} method.&#10;     *&#10;     * @param   i  an integer to be converted to an unsigned string.&#10;     * @return  an unsigned string representation of the argument.&#10;     * @see     #toUnsignedString(int, int)&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 1072
    label "toUnsignedString(int"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1073
    label " static int getChars(int i, int index, byte[] buf)"
    type "method"
    comment "&#10;     * Places characters representing the integer i into the&#10;     * character array buf. The characters are placed into&#10;     * the buffer backwards starting with the least significant&#10;     * digit at the specified index (exclusive), and working&#10;     * backwards from there.&#10;     *&#10;     * @implNote This method converts positive inputs into negative&#10;     * values, to cover the Integer.MIN_VALUE case. Converting otherwise&#10;     * (negative to positive) will expose -Integer.MIN_VALUE that overflows&#10;     * integer.&#10;     *&#10;     * @param i     value to convert&#10;     * @param index next index, after the least significant digit&#10;     * @param buf   target buffer, Latin1-encoded&#10;     * @return index of the most significant digit or minus sign, if present&#10;     "
  ]
  node [
    id 1074
    label " static int getChars(int i, int index, char[] buf)"
    type "method"
    comment " for java.lang.AbstractStringBuilder#append(int)."
  ]
  node [
    id 1075
    label " static int stringSize(int x)"
    type "method"
    comment "&#10;     * Returns the string representation size for a given int value.&#10;     *&#10;     * @param x int value&#10;     * @return string size&#10;     *&#10;     * @implNote There are other ways to compute this: e.g. binary search,&#10;     * but values are biased heavily towards zero, and therefore linear search&#10;     * wins. The iteration results are also routinely inlined in the generated&#10;     * code after loop unrolling.&#10;     "
  ]
  node [
    id 1076
    label "public static int parseInt(String s, int radix) throws NumberFormatException"
    type "method"
    comment "&#10;     * Parses the string argument as a signed integer in the radix&#10;     * specified by the second argument. The characters in the string&#10;     * must all be digits of the specified radix (as determined by&#10;     * whether {@link java.lang.Character#digit(char, int)} returns a&#10;     * nonnegative value), except that the first character may be an&#10;     * ASCII minus sign {@code '-'} ({@code '\u005Cu002D'}) to&#10;     * indicate a negative value or an ASCII plus sign {@code '+'}&#10;     * ({@code '\u005Cu002B'}) to indicate a positive value. The&#10;     * resulting integer value is returned.&#10;     *&#10;     * <p>An exception of type {@code NumberFormatException} is&#10;     * thrown if any of the following situations occurs:&#10;     * <ul>&#10;     * <li>The first argument is {@code null} or is a string of&#10;     * length zero.&#10;     *&#10;     * <li>The radix is either smaller than&#10;     * {@link java.lang.Character#MIN_RADIX} or&#10;     * larger than {@link java.lang.Character#MAX_RADIX}.&#10;     *&#10;     * <li>Any character of the string is not a digit of the specified&#10;     * radix, except that the first character may be a minus sign&#10;     * {@code '-'} ({@code '\u005Cu002D'}) or plus sign&#10;     * {@code '+'} ({@code '\u005Cu002B'}) provided that the&#10;     * string is longer than length 1.&#10;     *&#10;     * <li>The value represented by the string is not a value of type&#10;     * {@code int}.&#10;     * </ul>&#10;     *&#10;     * <p>Examples:&#10;     * <blockquote><pre>&#10;     * parseInt(&#34;0&#34;, 10) returns 0&#10;     * parseInt(&#34;473&#34;, 10) returns 473&#10;     * parseInt(&#34;+42&#34;, 10) returns 42&#10;     * parseInt(&#34;-0&#34;, 10) returns 0&#10;     * parseInt(&#34;-FF&#34;, 16) returns -255&#10;     * parseInt(&#34;1100110&#34;, 2) returns 102&#10;     * parseInt(&#34;2147483647&#34;, 10) returns 2147483647&#10;     * parseInt(&#34;-2147483648&#34;, 10) returns -2147483648&#10;     * parseInt(&#34;2147483648&#34;, 10) throws a NumberFormatException&#10;     * parseInt(&#34;99&#34;, 8) throws a NumberFormatException&#10;     * parseInt(&#34;Kona&#34;, 10) throws a NumberFormatException&#10;     * parseInt(&#34;Kona&#34;, 27) returns 411787&#10;     * </pre></blockquote>&#10;     *&#10;     * @param      s   the {@code String} containing the integer&#10;     *                  representation to be parsed&#10;     * @param      radix   the radix to be used while parsing {@code s}.&#10;     * @return     the integer represented by the string argument in the&#10;     *             specified radix.&#10;     * @throws     NumberFormatException if the {@code String}&#10;     *             does not contain a parsable {@code int}.&#10;     "
  ]
  node [
    id 1077
    label "public static int parseInt(CharSequence s, int beginIndex, int endIndex, int radix) throws NumberFormatException"
    type "method"
    comment "&#10;     * Parses the {@link CharSequence} argument as a signed {@code int} in the&#10;     * specified {@code radix}, beginning at the specified {@code beginIndex}&#10;     * and extending to {@code endIndex - 1}.&#10;     *&#10;     * <p>The method does not take steps to guard against the&#10;     * {@code CharSequence} being mutated while parsing.&#10;     *&#10;     * @param      s   the {@code CharSequence} containing the {@code int}&#10;     *                  representation to be parsed&#10;     * @param      beginIndex   the beginning index, inclusive.&#10;     * @param      endIndex     the ending index, exclusive.&#10;     * @param      radix   the radix to be used while parsing {@code s}.&#10;     * @return     the signed {@code int} represented by the subsequence in&#10;     *             the specified radix.&#10;     * @throws     NullPointerException  if {@code s} is null.&#10;     * @throws     IndexOutOfBoundsException  if {@code beginIndex} is&#10;     *             negative, or if {@code beginIndex} is greater than&#10;     *             {@code endIndex} or if {@code endIndex} is greater than&#10;     *             {@code s.length()}.&#10;     * @throws     NumberFormatException  if the {@code CharSequence} does not&#10;     *             contain a parsable {@code int} in the specified&#10;     *             {@code radix}, or if {@code radix} is either smaller than&#10;     *             {@link java.lang.Character#MIN_RADIX} or larger than&#10;     *             {@link java.lang.Character#MAX_RADIX}.&#10;     * @since  9&#10;     "
  ]
  node [
    id 1078
    label "public static int parseInt(String s) throws NumberFormatException"
    type "method"
    comment "&#10;     * Parses the string argument as a signed decimal integer. The&#10;     * characters in the string must all be decimal digits, except&#10;     * that the first character may be an ASCII minus sign {@code '-'}&#10;     * ({@code '\u005Cu002D'}) to indicate a negative value or an&#10;     * ASCII plus sign {@code '+'} ({@code '\u005Cu002B'}) to&#10;     * indicate a positive value. The resulting integer value is&#10;     * returned, exactly as if the argument and the radix 10 were&#10;     * given as arguments to the {@link #parseInt(java.lang.String,&#10;     * int)} method.&#10;     *&#10;     * @param s    a {@code String} containing the {@code int}&#10;     *             representation to be parsed&#10;     * @return     the integer value represented by the argument in decimal.&#10;     * @throws     NumberFormatException  if the string does not contain a&#10;     *               parsable integer.&#10;     "
  ]
  node [
    id 1079
    label "parseInt(java.lang.String"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1080
    label "public static int parseUnsignedInt(String s, int radix) throws NumberFormatException"
    type "method"
    comment "&#10;     * Parses the string argument as an unsigned integer in the radix&#10;     * specified by the second argument.  An unsigned integer maps the&#10;     * values usually associated with negative numbers to positive&#10;     * numbers larger than {@code MAX_VALUE}.&#10;     *&#10;     * The characters in the string must all be digits of the&#10;     * specified radix (as determined by whether {@link&#10;     * java.lang.Character#digit(char, int)} returns a nonnegative&#10;     * value), except that the first character may be an ASCII plus&#10;     * sign {@code '+'} ({@code '\u005Cu002B'}). The resulting&#10;     * integer value is returned.&#10;     *&#10;     * <p>An exception of type {@code NumberFormatException} is&#10;     * thrown if any of the following situations occurs:&#10;     * <ul>&#10;     * <li>The first argument is {@code null} or is a string of&#10;     * length zero.&#10;     *&#10;     * <li>The radix is either smaller than&#10;     * {@link java.lang.Character#MIN_RADIX} or&#10;     * larger than {@link java.lang.Character#MAX_RADIX}.&#10;     *&#10;     * <li>Any character of the string is not a digit of the specified&#10;     * radix, except that the first character may be a plus sign&#10;     * {@code '+'} ({@code '\u005Cu002B'}) provided that the&#10;     * string is longer than length 1.&#10;     *&#10;     * <li>The value represented by the string is larger than the&#10;     * largest unsigned {@code int}, 2<sup>32</sup>-1.&#10;     *&#10;     * </ul>&#10;     *&#10;     *&#10;     * @param      s   the {@code String} containing the unsigned integer&#10;     *                  representation to be parsed&#10;     * @param      radix   the radix to be used while parsing {@code s}.&#10;     * @return     the integer represented by the string argument in the&#10;     *             specified radix.&#10;     * @throws     NumberFormatException if the {@code String}&#10;     *             does not contain a parsable {@code int}.&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 1081
    label "public static int parseUnsignedInt(CharSequence s, int beginIndex, int endIndex, int radix) throws NumberFormatException"
    type "method"
    comment "&#10;     * Parses the {@link CharSequence} argument as an unsigned {@code int} in&#10;     * the specified {@code radix}, beginning at the specified&#10;     * {@code beginIndex} and extending to {@code endIndex - 1}.&#10;     *&#10;     * <p>The method does not take steps to guard against the&#10;     * {@code CharSequence} being mutated while parsing.&#10;     *&#10;     * @param      s   the {@code CharSequence} containing the unsigned&#10;     *                 {@code int} representation to be parsed&#10;     * @param      beginIndex   the beginning index, inclusive.&#10;     * @param      endIndex     the ending index, exclusive.&#10;     * @param      radix   the radix to be used while parsing {@code s}.&#10;     * @return     the unsigned {@code int} represented by the subsequence in&#10;     *             the specified radix.&#10;     * @throws     NullPointerException  if {@code s} is null.&#10;     * @throws     IndexOutOfBoundsException  if {@code beginIndex} is&#10;     *             negative, or if {@code beginIndex} is greater than&#10;     *             {@code endIndex} or if {@code endIndex} is greater than&#10;     *             {@code s.length()}.&#10;     * @throws     NumberFormatException  if the {@code CharSequence} does not&#10;     *             contain a parsable unsigned {@code int} in the specified&#10;     *             {@code radix}, or if {@code radix} is either smaller than&#10;     *             {@link java.lang.Character#MIN_RADIX} or larger than&#10;     *             {@link java.lang.Character#MAX_RADIX}.&#10;     * @since  9&#10;     "
  ]
  node [
    id 1082
    label "public static int parseUnsignedInt(String s) throws NumberFormatException"
    type "method"
    comment "&#10;     * Parses the string argument as an unsigned decimal integer. The&#10;     * characters in the string must all be decimal digits, except&#10;     * that the first character may be an ASCII plus sign {@code&#10;     * '+'} ({@code '\u005Cu002B'}). The resulting integer value&#10;     * is returned, exactly as if the argument and the radix 10 were&#10;     * given as arguments to the {@link&#10;     * #parseUnsignedInt(java.lang.String, int)} method.&#10;     *&#10;     * @param s   a {@code String} containing the unsigned {@code int}&#10;     *            representation to be parsed&#10;     * @return    the unsigned integer value represented by the argument in decimal.&#10;     * @throws    NumberFormatException  if the string does not contain a&#10;     *            parsable unsigned integer.&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 1083
    label "parseUnsignedInt(java.lang.String"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1084
    label "public static Integer valueOf(String s, int radix) throws NumberFormatException"
    type "method"
    comment "&#10;     * Returns an {@code Integer} object holding the value&#10;     * extracted from the specified {@code String} when parsed&#10;     * with the radix given by the second argument. The first argument&#10;     * is interpreted as representing a signed integer in the radix&#10;     * specified by the second argument, exactly as if the arguments&#10;     * were given to the {@link #parseInt(java.lang.String, int)}&#10;     * method. The result is an {@code Integer} object that&#10;     * represents the integer value specified by the string.&#10;     *&#10;     * <p>In other words, this method returns an {@code Integer}&#10;     * object equal to the value of:&#10;     *&#10;     * <blockquote>&#10;     *  {@code new Integer(Integer.parseInt(s, radix))}&#10;     * </blockquote>&#10;     *&#10;     * @param      s   the string to be parsed.&#10;     * @param      radix the radix to be used in interpreting {@code s}&#10;     * @return     an {@code Integer} object holding the value&#10;     *             represented by the string argument in the specified&#10;     *             radix.&#10;     * @throws    NumberFormatException if the {@code String}&#10;     *            does not contain a parsable {@code int}.&#10;     "
  ]
  node [
    id 1085
    label "public static Integer valueOf(String s) throws NumberFormatException"
    type "method"
    comment "&#10;     * Returns an {@code Integer} object holding the&#10;     * value of the specified {@code String}. The argument is&#10;     * interpreted as representing a signed decimal integer, exactly&#10;     * as if the argument were given to the {@link&#10;     * #parseInt(java.lang.String)} method. The result is an&#10;     * {@code Integer} object that represents the integer value&#10;     * specified by the string.&#10;     *&#10;     * <p>In other words, this method returns an {@code Integer}&#10;     * object equal to the value of:&#10;     *&#10;     * <blockquote>&#10;     *  {@code new Integer(Integer.parseInt(s))}&#10;     * </blockquote>&#10;     *&#10;     * @param      s   the string to be parsed.&#10;     * @return     an {@code Integer} object holding the value&#10;     *             represented by the string argument.&#10;     * @throws     NumberFormatException  if the string cannot be parsed&#10;     *             as an integer.&#10;     "
  ]
  node [
    id 1086
    label "parseInt(java.lang.String)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1087
    label "public static Integer valueOf(int i)"
    type "method"
    comment "&#10;     * Returns an {@code Integer} instance representing the specified&#10;     * {@code int} value.  If a new {@code Integer} instance is not&#10;     * required, this method should generally be used in preference to&#10;     * the constructor {@link #Integer(int)}, as this method is likely&#10;     * to yield significantly better space and time performance by&#10;     * caching frequently requested values.&#10;     *&#10;     * This method will always cache values in the range -128 to 127,&#10;     * inclusive, and may cache other values outside of this range.&#10;     *&#10;     * @param  i an {@code int} value.&#10;     * @return an {@code Integer} instance representing {@code i}.&#10;     * @since  1.5&#10;     "
  ]
  node [
    id 1088
    label "Integer(int)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1089
    label "public byte byteValue()"
    type "method"
    comment "&#10;     * Returns the value of this {@code Double} as a {@code byte}&#10;     * after a narrowing primitive conversion.&#10;     *&#10;     * @return  the {@code double} value represented by this object&#10;     *          converted to type {@code byte}&#10;     * @jls 5.1.3 Narrowing Primitive Conversion&#10;     * @since 1.1&#10;     "
  ]
  node [
    id 1090
    label "public short shortValue()"
    type "method"
    comment "&#10;     * Returns the value of this {@code Double} as a {@code short}&#10;     * after a narrowing primitive conversion.&#10;     *&#10;     * @return  the {@code double} value represented by this object&#10;     *          converted to type {@code short}&#10;     * @jls 5.1.3 Narrowing Primitive Conversion&#10;     * @since 1.1&#10;     "
  ]
  node [
    id 1091
    label "public int intValue()"
    type "method"
    comment "&#10;     * Returns the value of this {@code Double} as an {@code int}&#10;     * after a narrowing primitive conversion.&#10;     * @jls 5.1.3 Narrowing Primitive Conversion&#10;     *&#10;     * @return  the {@code double} value represented by this object&#10;     *          converted to type {@code int}&#10;     "
  ]
  node [
    id 1092
    label "public long longValue()"
    type "method"
    comment "&#10;     * Returns the value of this {@code Double} as a {@code long}&#10;     * after a narrowing primitive conversion.&#10;     *&#10;     * @return  the {@code double} value represented by this object&#10;     *          converted to type {@code long}&#10;     * @jls 5.1.3 Narrowing Primitive Conversion&#10;     "
  ]
  node [
    id 1093
    label "public float floatValue()"
    type "method"
    comment "&#10;     * Returns the value of this {@code Double} as a {@code float}&#10;     * after a narrowing primitive conversion.&#10;     *&#10;     * @return  the {@code double} value represented by this object&#10;     *          converted to type {@code float}&#10;     * @jls 5.1.3 Narrowing Primitive Conversion&#10;     * @since 1.0&#10;     "
  ]
  node [
    id 1094
    label "public double doubleValue()"
    type "method"
    comment "&#10;     * Returns the {@code double} value of this {@code Double} object.&#10;     *&#10;     * @return the {@code double} value represented by this object&#10;     "
  ]
  node [
    id 1095
    label "public static int hashCode(int value)"
    type "method"
    comment "&#10;     * Returns a hash code for an {@code int} value; compatible with&#10;     * {@code Integer.hashCode()}.&#10;     *&#10;     * @param value the value to hash&#10;     * @since 1.8&#10;     *&#10;     * @return a hash code value for an {@code int} value.&#10;     "
  ]
  node [
    id 1096
    label "public static Integer getInteger(String nm)"
    type "method"
    comment "&#10;     * Determines the integer value of the system property with the&#10;     * specified name.&#10;     *&#10;     * <p>The first argument is treated as the name of a system&#10;     * property.  System properties are accessible through the {@link&#10;     * java.lang.System#getProperty(java.lang.String)} method. The&#10;     * string value of this property is then interpreted as an integer&#10;     * value using the grammar supported by {@link Integer#decode decode} and&#10;     * an {@code Integer} object representing this value is returned.&#10;     *&#10;     * <p>If there is no property with the specified name, if the&#10;     * specified name is empty or {@code null}, or if the property&#10;     * does not have the correct numeric format, then {@code null} is&#10;     * returned.&#10;     *&#10;     * <p>In other words, this method returns an {@code Integer}&#10;     * object equal to the value of:&#10;     *&#10;     * <blockquote>&#10;     *  {@code getInteger(nm, null)}&#10;     * </blockquote>&#10;     *&#10;     * @param   nm   property name.&#10;     * @return  the {@code Integer} value of the property.&#10;     * @throws  SecurityException for the same reasons as&#10;     *          {@link System#getProperty(String) System.getProperty}&#10;     * @see     java.lang.System#getProperty(java.lang.String)&#10;     * @see     java.lang.System#getProperty(java.lang.String, java.lang.String)&#10;     "
  ]
  node [
    id 1097
    label "getProperty(java.lang.String)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1098
    label "java.lang.System"
    type "class"
    comment "&#10; * The <code>System</code> class contains several useful class fields&#10; * and methods. It cannot be instantiated.&#10; *&#10; * <p>Among the facilities provided by the <code>System</code> class&#10; * are standard input, standard output, and error output streams;&#10; * access to externally defined properties and environment&#10; * variables; a means of loading files and libraries; and a utility&#10; * method for quickly copying a portion of an array.&#10; *&#10; * @author  unascribed&#10; * @since   JDK1.0&#10; "
  ]
  node [
    id 1099
    label "public static void setIn(InputStream in)"
    type "method"
    comment "&#10;     * Reassigns the &#34;standard&#34; input stream.&#10;     *&#10;     * <p>First, if there is a security manager, its <code>checkPermission</code>&#10;     * method is called with a <code>RuntimePermission(&#34;setIO&#34;)</code> permission&#10;     *  to see if it's ok to reassign the &#34;standard&#34; input stream.&#10;     * <p>&#10;     *&#10;     * @param in the new standard input stream.&#10;     *&#10;     * @throws SecurityException&#10;     *        if a security manager exists and its&#10;     *        <code>checkPermission</code> method doesn't allow&#10;     *        reassigning of the standard input stream.&#10;     *&#10;     * @see SecurityManager#checkPermission&#10;     * @see java.lang.RuntimePermission&#10;     *&#10;     * @since   JDK1.1&#10;     "
  ]
  node [
    id 1100
    label "public static void setOut(PrintStream out)"
    type "method"
    comment "&#10;     * Reassigns the &#34;standard&#34; output stream.&#10;     *&#10;     * <p>First, if there is a security manager, its <code>checkPermission</code>&#10;     * method is called with a <code>RuntimePermission(&#34;setIO&#34;)</code> permission&#10;     *  to see if it's ok to reassign the &#34;standard&#34; output stream.&#10;     *&#10;     * @param out the new standard output stream&#10;     *&#10;     * @throws SecurityException&#10;     *        if a security manager exists and its&#10;     *        <code>checkPermission</code> method doesn't allow&#10;     *        reassigning of the standard output stream.&#10;     *&#10;     * @see SecurityManager#checkPermission&#10;     * @see java.lang.RuntimePermission&#10;     *&#10;     * @since   JDK1.1&#10;     "
  ]
  node [
    id 1101
    label "public static void setErr(PrintStream err)"
    type "method"
    comment "&#10;     * Reassigns the &#34;standard&#34; error output stream.&#10;     *&#10;     * <p>First, if there is a security manager, its <code>checkPermission</code>&#10;     * method is called with a <code>RuntimePermission(&#34;setIO&#34;)</code> permission&#10;     *  to see if it's ok to reassign the &#34;standard&#34; error output stream.&#10;     *&#10;     * @param err the new standard error output stream.&#10;     *&#10;     * @throws SecurityException&#10;     *        if a security manager exists and its&#10;     *        <code>checkPermission</code> method doesn't allow&#10;     *        reassigning of the standard error output stream.&#10;     *&#10;     * @see SecurityManager#checkPermission&#10;     * @see java.lang.RuntimePermission&#10;     *&#10;     * @since   JDK1.1&#10;     "
  ]
  node [
    id 1102
    label "public static Console console()"
    type "method"
    comment "&#10;     * Returns the unique {@link java.io.Console Console} object associated&#10;     * with the current Java virtual machine, if any.&#10;     *&#10;     * @return  The system console, if any, otherwise <tt>null</tt>.&#10;     *&#10;     * @since   1.6&#10;     "
  ]
  node [
    id 1103
    label "java.io.Console"
    type "class"
    comment ""
  ]
  node [
    id 1104
    label "public PrintWriter writer()"
    type "method"
    comment "&#10;    * Retrieves the unique {@link java.io.PrintWriter PrintWriter} object&#10;    * associated with this console.&#10;    *&#10;    * @return  The printwriter associated with this console&#10;    "
  ]
  node [
    id 1105
    label "java.io.PrintWriter"
    type "class"
    comment ""
  ]
  node [
    id 1106
    label "private static Charset toCharset(String csn) throws UnsupportedEncodingException"
    type "method"
    comment "&#10;     * Returns a charset object for the given charset name.&#10;     * @throws NullPointerException          is csn is null&#10;     * @throws UnsupportedEncodingException  if the charset is not supported&#10;     "
  ]
  node [
    id 1107
    label "private void ensureOpen() throws IOException"
    type "method"
    comment " Checks to make sure that the stream has not been closed "
  ]
  node [
    id 1108
    label "public void flush()"
    type "method"
    comment "&#10;     * Flushes the console and forces any buffered output to be written&#10;     * immediately .&#10;     "
  ]
  node [
    id 1109
    label "public void close()"
    type "method"
    comment "&#10;     * Closes this datagram socket.&#10;     * <p>&#10;     * Any thread currently blocked in {@link #receive} upon this socket&#10;     * will throw a {@link SocketException}.&#10;     *&#10;     * <p> If this socket has an associated channel then the channel is closed&#10;     * as well.&#10;     *&#10;     * @revised 1.4&#10;     * @spec JSR-51&#10;     "
  ]
  node [
    id 1110
    label "public boolean checkError()"
    type "method"
    comment "&#10;     * Flushes the stream if it's not closed and checks its error state.&#10;     *&#10;     * @return {@code true} if the print stream has encountered an error,&#10;     *          either on the underlying output stream or during a format&#10;     *          conversion.&#10;     "
  ]
  node [
    id 1111
    label "protected void setError()"
    type "method"
    comment "&#10;     * Indicates that an error has occurred.&#10;     *&#10;     * <p> This method will cause subsequent invocations of {@link&#10;     * #checkError()} to return {@code true} until {@link&#10;     * #clearError()} is invoked.&#10;     "
  ]
  node [
    id 1112
    label "checkError()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1113
    label "clearError()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1114
    label "protected void clearError()"
    type "method"
    comment "&#10;     * Clears the error state of this stream.&#10;     *&#10;     * <p> This method will cause subsequent invocations of {@link&#10;     * #checkError()} to return {@code false} until another write&#10;     * operation fails and invokes {@link #setError()}.&#10;     *&#10;     * @since 1.6&#10;     "
  ]
  node [
    id 1115
    label "setError()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1116
    label "public void write(int c)"
    type "method"
    comment "&#10;     * Writes a single character.&#10;     * @param c int specifying a character to be written.&#10;     "
  ]
  node [
    id 1117
    label "public void write(char[] buf, int off, int len)"
    type "method"
    comment "&#10;     * Writes A Portion of an array of characters.&#10;     * @param buf Array of characters&#10;     * @param off Offset from which to start writing characters&#10;     * @param len Number of characters to write&#10;     *&#10;     * @throws  IndexOutOfBoundsException&#10;     *          If the values of the {@code off} and {@code len} parameters&#10;     *          cause the corresponding method of the underlying {@code Writer}&#10;     *          to throw an {@code IndexOutOfBoundsException}&#10;     "
  ]
  node [
    id 1118
    label "public void write(char[] buf)"
    type "method"
    comment "&#10;     * Writes an array of characters.  This method cannot be inherited from the&#10;     * Writer class because it must suppress I/O exceptions.&#10;     * @param buf Array of characters to be written&#10;     "
  ]
  node [
    id 1119
    label "public void write(String s, int off, int len)"
    type "method"
    comment "&#10;     * Writes a portion of a string.&#10;     * @param s A String&#10;     * @param off Offset from which to start writing characters&#10;     * @param len Number of characters to write&#10;     *&#10;     * @throws  IndexOutOfBoundsException&#10;     *          If the values of the {@code off} and {@code len} parameters&#10;     *          cause the corresponding method of the underlying {@code Writer}&#10;     *          to throw an {@code IndexOutOfBoundsException}&#10;     "
  ]
  node [
    id 1120
    label "public void write(String s)"
    type "method"
    comment "&#10;     * Writes a string.  This method cannot be inherited from the Writer class&#10;     * because it must suppress I/O exceptions.&#10;     * @param s String to be written&#10;     "
  ]
  node [
    id 1121
    label "public void print(boolean b)"
    type "method"
    comment "&#10;     * Prints a boolean value.  The string produced by {@link&#10;     * java.lang.String#valueOf(boolean)} is translated into bytes&#10;     * according to the platform's default character encoding, and these bytes&#10;     * are written in exactly the manner of the {@link&#10;     * #write(int)} method.&#10;     *&#10;     * @param      b   The {@code boolean} to be printed&#10;     "
  ]
  node [
    id 1122
    label "write(int)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1123
    label "public void print(char c)"
    type "method"
    comment "&#10;     * Prints a character.  The character is translated into one or more bytes&#10;     * according to the platform's default character encoding, and these bytes&#10;     * are written in exactly the manner of the {@link&#10;     * #write(int)} method.&#10;     *&#10;     * @param      c   The {@code char} to be printed&#10;     "
  ]
  node [
    id 1124
    label "public void print(int i)"
    type "method"
    comment "&#10;     * Prints an integer.  The string produced by {@link&#10;     * java.lang.String#valueOf(int)} is translated into bytes according&#10;     * to the platform's default character encoding, and these bytes are&#10;     * written in exactly the manner of the {@link #write(int)}&#10;     * method.&#10;     *&#10;     * @param      i   The {@code int} to be printed&#10;     * @see        java.lang.Integer#toString(int)&#10;     "
  ]
  node [
    id 1125
    label "public void print(long l)"
    type "method"
    comment "&#10;     * Prints a long integer.  The string produced by {@link&#10;     * java.lang.String#valueOf(long)} is translated into bytes&#10;     * according to the platform's default character encoding, and these bytes&#10;     * are written in exactly the manner of the {@link #write(int)}&#10;     * method.&#10;     *&#10;     * @param      l   The {@code long} to be printed&#10;     * @see        java.lang.Long#toString(long)&#10;     "
  ]
  node [
    id 1126
    label "public void print(float f)"
    type "method"
    comment "&#10;     * Prints a floating-point number.  The string produced by {@link&#10;     * java.lang.String#valueOf(float)} is translated into bytes&#10;     * according to the platform's default character encoding, and these bytes&#10;     * are written in exactly the manner of the {@link #write(int)}&#10;     * method.&#10;     *&#10;     * @param      f   The {@code float} to be printed&#10;     * @see        java.lang.Float#toString(float)&#10;     "
  ]
  node [
    id 1127
    label "public void print(double d)"
    type "method"
    comment "&#10;     * Prints a double-precision floating-point number.  The string produced by&#10;     * {@link java.lang.String#valueOf(double)} is translated into&#10;     * bytes according to the platform's default character encoding, and these&#10;     * bytes are written in exactly the manner of the {@link&#10;     * #write(int)} method.&#10;     *&#10;     * @param      d   The {@code double} to be printed&#10;     * @see        java.lang.Double#toString(double)&#10;     "
  ]
  node [
    id 1128
    label "public void print(char[] s)"
    type "method"
    comment "&#10;     * Prints an array of characters.  The characters are converted into bytes&#10;     * according to the platform's default character encoding, and these bytes&#10;     * are written in exactly the manner of the {@link #write(int)}&#10;     * method.&#10;     *&#10;     * @param      s   The array of chars to be printed&#10;     *&#10;     * @throws  NullPointerException  If {@code s} is {@code null}&#10;     "
  ]
  node [
    id 1129
    label "public void print(String s)"
    type "method"
    comment "&#10;     * Prints a string.  If the argument is {@code null} then the string&#10;     * {@code &#34;null&#34;} is printed.  Otherwise, the string's characters are&#10;     * converted into bytes according to the platform's default character&#10;     * encoding, and these bytes are written in exactly the manner of the&#10;     * {@link #write(int)} method.&#10;     *&#10;     * @param      s   The {@code String} to be printed&#10;     "
  ]
  node [
    id 1130
    label "public void print(Object obj)"
    type "method"
    comment "&#10;     * Prints an object.  The string produced by the {@link&#10;     * java.lang.String#valueOf(Object)} method is translated into bytes&#10;     * according to the platform's default character encoding, and these bytes&#10;     * are written in exactly the manner of the {@link #write(int)}&#10;     * method.&#10;     *&#10;     * @param      obj   The {@code Object} to be printed&#10;     * @see        java.lang.Object#toString()&#10;     "
  ]
  node [
    id 1131
    label "public void println()"
    type "method"
    comment "&#10;     * Terminates the current line by writing the line separator string.  The&#10;     * line separator string is defined by the system property&#10;     * {@code line.separator}, and is not necessarily a single newline&#10;     * character ({@code '\n'}).&#10;     "
  ]
  node [
    id 1132
    label "public void println(boolean x)"
    type "method"
    comment "&#10;     * Prints a boolean value and then terminates the line.  This method behaves&#10;     * as though it invokes {@link #print(boolean)} and then&#10;     * {@link #println()}.&#10;     *&#10;     * @param x the {@code boolean} value to be printed&#10;     "
  ]
  node [
    id 1133
    label "print(boolean)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1134
    label "println()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1135
    label "public void println(char x)"
    type "method"
    comment "&#10;     * Prints a character and then terminates the line.  This method behaves as&#10;     * though it invokes {@link #print(char)} and then {@link&#10;     * #println()}.&#10;     *&#10;     * @param x the {@code char} value to be printed&#10;     "
  ]
  node [
    id 1136
    label "print(char)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1137
    label "public void println(int x)"
    type "method"
    comment "&#10;     * Prints an integer and then terminates the line.  This method behaves as&#10;     * though it invokes {@link #print(int)} and then {@link&#10;     * #println()}.&#10;     *&#10;     * @param x the {@code int} value to be printed&#10;     "
  ]
  node [
    id 1138
    label "print(int)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1139
    label "public void println(long x)"
    type "method"
    comment "&#10;     * Prints a long integer and then terminates the line.  This method behaves&#10;     * as though it invokes {@link #print(long)} and then&#10;     * {@link #println()}.&#10;     *&#10;     * @param x the {@code long} value to be printed&#10;     "
  ]
  node [
    id 1140
    label "print(long)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1141
    label "public void println(float x)"
    type "method"
    comment "&#10;     * Prints a floating-point number and then terminates the line.  This method&#10;     * behaves as though it invokes {@link #print(float)} and then&#10;     * {@link #println()}.&#10;     *&#10;     * @param x the {@code float} value to be printed&#10;     "
  ]
  node [
    id 1142
    label "print(float)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1143
    label "public void println(double x)"
    type "method"
    comment "&#10;     * Prints a double-precision floating-point number and then terminates the&#10;     * line.  This method behaves as though it invokes {@link&#10;     * #print(double)} and then {@link #println()}.&#10;     *&#10;     * @param x the {@code double} value to be printed&#10;     "
  ]
  node [
    id 1144
    label "print(double)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1145
    label "public void println(char[] x)"
    type "method"
    comment "&#10;     * Prints an array of characters and then terminates the line.  This method&#10;     * behaves as though it invokes {@link #print(char[])} and then&#10;     * {@link #println()}.&#10;     *&#10;     * @param x the array of {@code char} values to be printed&#10;     "
  ]
  node [
    id 1146
    label "print(char"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1147
    label "public void println(String x)"
    type "method"
    comment "&#10;     * Prints a String and then terminates the line.  This method behaves as&#10;     * though it invokes {@link #print(String)} and then&#10;     * {@link #println()}.&#10;     *&#10;     * @param x the {@code String} value to be printed&#10;     "
  ]
  node [
    id 1148
    label "print(String)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1149
    label "public void println(Object x)"
    type "method"
    comment "&#10;     * Prints an Object and then terminates the line.  This method calls&#10;     * at first String.valueOf(x) to get the printed object's string value,&#10;     * then behaves as&#10;     * though it invokes {@link #print(String)} and then&#10;     * {@link #println()}.&#10;     *&#10;     * @param x  The {@code Object} to be printed.&#10;     "
  ]
  node [
    id 1150
    label "public PrintWriter printf(String format, Object... args)"
    type "method"
    comment "&#10;     * A convenience method to write a formatted string to this writer using&#10;     * the specified format string and arguments.  If automatic flushing is&#10;     * enabled, calls to this method will flush the output buffer.&#10;     *&#10;     * <p> An invocation of this method of the form&#10;     * {@code out.printf(format, args)}&#10;     * behaves in exactly the same way as the invocation&#10;     *&#10;     * <pre>{@code&#10;     *     out.format(format, args)&#10;     * }</pre>&#10;     *&#10;     * @param  format&#10;     *         A format string as described in <a&#10;     *         href=&#34;../util/Formatter.html#syntax&#34;>Format string syntax</a>.&#10;     *&#10;     * @param  args&#10;     *         Arguments referenced by the format specifiers in the format&#10;     *         string.  If there are more arguments than format specifiers, the&#10;     *         extra arguments are ignored.  The number of arguments is&#10;     *         variable and may be zero.  The maximum number of arguments is&#10;     *         limited by the maximum dimension of a Java array as defined by&#10;     *         <cite>The Java&#38;trade; Virtual Machine Specification</cite>.&#10;     *         The behaviour on a&#10;     *         {@code null} argument depends on the <a&#10;     *         href=&#34;../util/Formatter.html#syntax&#34;>conversion</a>.&#10;     *&#10;     * @throws  java.util.IllegalFormatException&#10;     *          If a format string contains an illegal syntax, a format&#10;     *          specifier that is incompatible with the given arguments,&#10;     *          insufficient arguments given the format string, or other&#10;     *          illegal conditions.  For specification of all possible&#10;     *          formatting errors, see the <a&#10;     *          href=&#34;../util/Formatter.html#detail&#34;>Details</a> section of the&#10;     *          formatter class specification.&#10;     *&#10;     * @throws  NullPointerException&#10;     *          If the {@code format} is {@code null}&#10;     *&#10;     * @return  This writer&#10;     *&#10;     * @since  1.5&#10;     "
  ]
  node [
    id 1151
    label "public PrintWriter printf(Locale l, String format, Object... args)"
    type "method"
    comment "&#10;     * A convenience method to write a formatted string to this writer using&#10;     * the specified format string and arguments.  If automatic flushing is&#10;     * enabled, calls to this method will flush the output buffer.&#10;     *&#10;     * <p> An invocation of this method of the form&#10;     * {@code out.printf(l, format, args)}&#10;     * behaves in exactly the same way as the invocation&#10;     *&#10;     * <pre>{@code&#10;     *     out.format(l, format, args)&#10;     * }</pre>&#10;     *&#10;     * @param  l&#10;     *         The {@linkplain java.util.Locale locale} to apply during&#10;     *         formatting.  If {@code l} is {@code null} then no localization&#10;     *         is applied.&#10;     *&#10;     * @param  format&#10;     *         A format string as described in <a&#10;     *         href=&#34;../util/Formatter.html#syntax&#34;>Format string syntax</a>.&#10;     *&#10;     * @param  args&#10;     *         Arguments referenced by the format specifiers in the format&#10;     *         string.  If there are more arguments than format specifiers, the&#10;     *         extra arguments are ignored.  The number of arguments is&#10;     *         variable and may be zero.  The maximum number of arguments is&#10;     *         limited by the maximum dimension of a Java array as defined by&#10;     *         <cite>The Java&#38;trade; Virtual Machine Specification</cite>.&#10;     *         The behaviour on a&#10;     *         {@code null} argument depends on the <a&#10;     *         href=&#34;../util/Formatter.html#syntax&#34;>conversion</a>.&#10;     *&#10;     * @throws  java.util.IllegalFormatException&#10;     *          If a format string contains an illegal syntax, a format&#10;     *          specifier that is incompatible with the given arguments,&#10;     *          insufficient arguments given the format string, or other&#10;     *          illegal conditions.  For specification of all possible&#10;     *          formatting errors, see the <a&#10;     *          href=&#34;../util/Formatter.html#detail&#34;>Details</a> section of the&#10;     *          formatter class specification.&#10;     *&#10;     * @throws  NullPointerException&#10;     *          If the {@code format} is {@code null}&#10;     *&#10;     * @return  This writer&#10;     *&#10;     * @since  1.5&#10;     "
  ]
  node [
    id 1152
    label "public PrintWriter format(String format, Object... args)"
    type "method"
    comment "&#10;     * Writes a formatted string to this writer using the specified format&#10;     * string and arguments.  If automatic flushing is enabled, calls to this&#10;     * method will flush the output buffer.&#10;     *&#10;     * <p> The locale always used is the one returned by {@link&#10;     * java.util.Locale#getDefault() Locale.getDefault()}, regardless of any&#10;     * previous invocations of other formatting methods on this object.&#10;     *&#10;     * @param  format&#10;     *         A format string as described in <a&#10;     *         href=&#34;../util/Formatter.html#syntax&#34;>Format string syntax</a>.&#10;     *&#10;     * @param  args&#10;     *         Arguments referenced by the format specifiers in the format&#10;     *         string.  If there are more arguments than format specifiers, the&#10;     *         extra arguments are ignored.  The number of arguments is&#10;     *         variable and may be zero.  The maximum number of arguments is&#10;     *         limited by the maximum dimension of a Java array as defined by&#10;     *         <cite>The Java&#38;trade; Virtual Machine Specification</cite>.&#10;     *         The behaviour on a&#10;     *         {@code null} argument depends on the <a&#10;     *         href=&#34;../util/Formatter.html#syntax&#34;>conversion</a>.&#10;     *&#10;     * @throws  java.util.IllegalFormatException&#10;     *          If a format string contains an illegal syntax, a format&#10;     *          specifier that is incompatible with the given arguments,&#10;     *          insufficient arguments given the format string, or other&#10;     *          illegal conditions.  For specification of all possible&#10;     *          formatting errors, see the <a&#10;     *          href=&#34;../util/Formatter.html#detail&#34;>Details</a> section of the&#10;     *          Formatter class specification.&#10;     *&#10;     * @throws  NullPointerException&#10;     *          If the {@code format} is {@code null}&#10;     *&#10;     * @return  This writer&#10;     *&#10;     * @since  1.5&#10;     "
  ]
  node [
    id 1153
    label "getDefault()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1154
    label "public PrintWriter format(Locale l, String format, Object... args)"
    type "method"
    comment "&#10;     * Writes a formatted string to this writer using the specified format&#10;     * string and arguments.  If automatic flushing is enabled, calls to this&#10;     * method will flush the output buffer.&#10;     *&#10;     * @param  l&#10;     *         The {@linkplain java.util.Locale locale} to apply during&#10;     *         formatting.  If {@code l} is {@code null} then no localization&#10;     *         is applied.&#10;     *&#10;     * @param  format&#10;     *         A format string as described in <a&#10;     *         href=&#34;../util/Formatter.html#syntax&#34;>Format string syntax</a>.&#10;     *&#10;     * @param  args&#10;     *         Arguments referenced by the format specifiers in the format&#10;     *         string.  If there are more arguments than format specifiers, the&#10;     *         extra arguments are ignored.  The number of arguments is&#10;     *         variable and may be zero.  The maximum number of arguments is&#10;     *         limited by the maximum dimension of a Java array as defined by&#10;     *         <cite>The Java&#38;trade; Virtual Machine Specification</cite>.&#10;     *         The behaviour on a&#10;     *         {@code null} argument depends on the <a&#10;     *         href=&#34;../util/Formatter.html#syntax&#34;>conversion</a>.&#10;     *&#10;     * @throws  java.util.IllegalFormatException&#10;     *          If a format string contains an illegal syntax, a format&#10;     *          specifier that is incompatible with the given arguments,&#10;     *          insufficient arguments given the format string, or other&#10;     *          illegal conditions.  For specification of all possible&#10;     *          formatting errors, see the <a&#10;     *          href=&#34;../util/Formatter.html#detail&#34;>Details</a> section of the&#10;     *          formatter class specification.&#10;     *&#10;     * @throws  NullPointerException&#10;     *          If the {@code format} is {@code null}&#10;     *&#10;     * @return  This writer&#10;     *&#10;     * @since  1.5&#10;     "
  ]
  node [
    id 1155
    label "public PrintWriter append(CharSequence csq)"
    type "method"
    comment "&#10;     * Appends the specified character sequence to this writer.&#10;     *&#10;     * <p> An invocation of this method of the form {@code out.append(csq)}&#10;     * behaves in exactly the same way as the invocation&#10;     *&#10;     * <pre>{@code&#10;     *     out.write(csq.toString())&#10;     * }</pre>&#10;     *&#10;     * <p> Depending on the specification of {@code toString} for the&#10;     * character sequence {@code csq}, the entire sequence may not be&#10;     * appended. For instance, invoking the {@code toString} method of a&#10;     * character buffer will return a subsequence whose content depends upon&#10;     * the buffer's position and limit.&#10;     *&#10;     * @param  csq&#10;     *         The character sequence to append.  If {@code csq} is&#10;     *         {@code null}, then the four characters {@code &#34;null&#34;} are&#10;     *         appended to this writer.&#10;     *&#10;     * @return  This writer&#10;     *&#10;     * @since  1.5&#10;     "
  ]
  node [
    id 1156
    label "public PrintWriter append(CharSequence csq, int start, int end)"
    type "method"
    comment "&#10;     * Appends a subsequence of the specified character sequence to this writer.&#10;     *&#10;     * <p> An invocation of this method of the form&#10;     * {@code out.append(csq, start, end)}&#10;     * when {@code csq} is not {@code null}, behaves in&#10;     * exactly the same way as the invocation&#10;     *&#10;     * <pre>{@code&#10;     *     out.write(csq.subSequence(start, end).toString())&#10;     * }</pre>&#10;     *&#10;     * @param  csq&#10;     *         The character sequence from which a subsequence will be&#10;     *         appended.  If {@code csq} is {@code null}, then characters&#10;     *         will be appended as if {@code csq} contained the four&#10;     *         characters {@code &#34;null&#34;}.&#10;     *&#10;     * @param  start&#10;     *         The index of the first character in the subsequence&#10;     *&#10;     * @param  end&#10;     *         The index of the character following the last character in the&#10;     *         subsequence&#10;     *&#10;     * @return  This writer&#10;     *&#10;     * @throws  IndexOutOfBoundsException&#10;     *          If {@code start} or {@code end} are negative, {@code start}&#10;     *          is greater than {@code end}, or {@code end} is greater than&#10;     *          {@code csq.length()}&#10;     *&#10;     * @since  1.5&#10;     "
  ]
  node [
    id 1157
    label "public PrintWriter append(char c)"
    type "method"
    comment "&#10;     * Appends the specified character to this writer.&#10;     *&#10;     * <p> An invocation of this method of the form {@code out.append(c)}&#10;     * behaves in exactly the same way as the invocation&#10;     *&#10;     * <pre>{@code&#10;     *     out.write(c)&#10;     * }</pre>&#10;     *&#10;     * @param  c&#10;     *         The 16-bit character to append&#10;     *&#10;     * @return  This writer&#10;     *&#10;     * @since 1.5&#10;     "
  ]
  node [
    id 1158
    label "public Reader reader()"
    type "method"
    comment "&#10;    * Retrieves the unique {@link java.io.Reader Reader} object associated&#10;    * with this console.&#10;    * <p>&#10;    * This method is intended to be used by sophisticated applications, for&#10;    * example, a {@link java.util.Scanner} object which utilizes the rich&#10;    * parsing/scanning functionality provided by the {@code Scanner}:&#10;    * <blockquote><pre>&#10;    * Console con = System.console();&#10;    * if (con != null) {&#10;    *     Scanner sc = new Scanner(con.reader());&#10;    *     ...&#10;    * }&#10;    * </pre></blockquote>&#10;    * <p>&#10;    * For simple applications requiring only line-oriented reading, use&#10;    * {@link #readLine}.&#10;    * <p>&#10;    * The bulk read operations {@link java.io.Reader#read(char[]) read(char[]) },&#10;    * {@link java.io.Reader#read(char[], int, int) read(char[], int, int) } and&#10;    * {@link java.io.Reader#read(java.nio.CharBuffer) read(java.nio.CharBuffer)}&#10;    * on the returned object will not read in characters beyond the line&#10;    * bound for each invocation, even if the destination buffer has space for&#10;    * more characters. The {@code Reader}'s {@code read} methods may block if a&#10;    * line bound has not been entered or reached on the console's input device.&#10;    * A line bound is considered to be any one of a line feed ({@code '\n'}),&#10;    * a carriage return ({@code '\r'}), a carriage return followed immediately&#10;    * by a linefeed, or an end of stream.&#10;    *&#10;    * @return  The reader associated with this console&#10;    "
  ]
  node [
    id 1159
    label "read(char"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1160
    label "java.io.Reader"
    type "class"
    comment ""
  ]
  node [
    id 1161
    label "public static Reader nullReader()"
    type "method"
    comment "&#10;     * Returns a new {@code Reader} that reads no characters. The returned&#10;     * stream is initially open.  The stream is closed by calling the&#10;     * {@code close()} method.  Subsequent calls to {@code close()} have no&#10;     * effect.&#10;     *&#10;     * <p> While the stream is open, the {@code read()}, {@code read(char[])},&#10;     * {@code read(char[], int, int)}, {@code read(Charbuffer)}, {@code&#10;     * ready()}, {@code skip(long)}, and {@code transferTo()} methods all&#10;     * behave as if end of stream has been reached. After the stream has been&#10;     * closed, these methods all throw {@code IOException}.&#10;     *&#10;     * <p> The {@code markSupported()} method returns {@code false}.  The&#10;     * {@code mark()} and {@code reset()} methods throw an {@code IOException}.&#10;     *&#10;     * <p> The {@link #lock object} used to synchronize operations on the&#10;     * returned {@code Reader} is not specified.&#10;     *&#10;     * @return a {@code Reader} which reads no characters&#10;     *&#10;     * @since 11&#10;     "
  ]
  node [
    id 1162
    label "lock"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1163
    label "public int read(java.nio.CharBuffer target) throws IOException"
    type "method"
    comment "&#10;     * Attempts to read characters into the specified character buffer.&#10;     * The buffer is used as a repository of characters as-is: the only&#10;     * changes made are the results of a put operation. No flipping or&#10;     * rewinding of the buffer is performed.&#10;     *&#10;     * @param target the buffer to read characters into&#10;     * @return The number of characters added to the buffer, or&#10;     *         -1 if this source of characters is at its end&#10;     * @throws IOException if an I/O error occurs&#10;     * @throws NullPointerException if target is null&#10;     * @throws java.nio.ReadOnlyBufferException if target is a read only buffer&#10;     * @since 1.5&#10;     "
  ]
  node [
    id 1164
    label "public int read() throws IOException"
    type "method"
    comment "&#10;     * Reads a byte of data. This method will block if no input is available.&#10;     *&#10;     * @return  the byte read, or -1 if the end of the stream is reached.&#10;     * @throws  IOException If an I/O error has occurred.&#10;     "
  ]
  node [
    id 1165
    label "public int read(char[] cbuf) throws IOException"
    type "method"
    comment "&#10;     * Reads characters into an array.  This method will block until some input&#10;     * is available, an I/O error occurs, or the end of the stream is reached.&#10;     *&#10;     * @param       cbuf  Destination buffer&#10;     *&#10;     * @return      The number of characters read, or -1&#10;     *              if the end of the stream&#10;     *              has been reached&#10;     *&#10;     * @exception   IOException  If an I/O error occurs&#10;     "
  ]
  node [
    id 1166
    label "public abstract int read(char[] cbuf, int off, int len) throws IOException"
    type "method"
    comment "&#10;     * Reads characters into a portion of an array.  This method will block&#10;     * until some input is available, an I/O error occurs, or the end of the&#10;     * stream is reached.&#10;     *&#10;     * @param      cbuf  Destination buffer&#10;     * @param      off   Offset at which to start storing characters&#10;     * @param      len   Maximum number of characters to read&#10;     *&#10;     * @return     The number of characters read, or -1 if the end of the&#10;     *             stream has been reached&#10;     *&#10;     * @exception  IOException  If an I/O error occurs&#10;     * @exception  IndexOutOfBoundsException&#10;     *             If {@code off} is negative, or {@code len} is negative,&#10;     *             or {@code len} is greater than {@code cbuf.length - off}&#10;     "
  ]
  node [
    id 1167
    label "public long skip(long n) throws IOException"
    type "method"
    comment "&#10;     * Skips characters.&#10;     *&#10;     * @param  n  The number of characters to skip&#10;     *&#10;     * @return    The number of characters actually skipped&#10;     *&#10;     * @exception  IllegalArgumentException  If <code>n</code> is negative.&#10;     * @exception  IOException  If an I/O error occurs&#10;     "
  ]
  node [
    id 1168
    label "public boolean ready() throws IOException"
    type "method"
    comment "&#10;     * Tells whether this stream is ready to be read.  A buffered character&#10;     * stream is ready if the buffer is not empty, or if the underlying&#10;     * character stream is ready.&#10;     *&#10;     * @exception  IOException  If an I/O error occurs&#10;     "
  ]
  node [
    id 1169
    label "public boolean markSupported()"
    type "method"
    comment "&#10;     * Tells whether this stream supports the mark() operation, which it does.&#10;     "
  ]
  node [
    id 1170
    label "public void mark(int readAheadLimit) throws IOException"
    type "method"
    comment "&#10;     * Marks the present position in the stream.  Subsequent calls to reset()&#10;     * will attempt to reposition the stream to this point.&#10;     *&#10;     * @param readAheadLimit   Limit on the number of characters that may be&#10;     *                         read while still preserving the mark. An attempt&#10;     *                         to reset the stream after reading characters&#10;     *                         up to this limit or beyond may fail.&#10;     *                         A limit value larger than the size of the input&#10;     *                         buffer will cause a new buffer to be allocated&#10;     *                         whose size is no smaller than limit.&#10;     *                         Therefore large values should be used with care.&#10;     *&#10;     * @exception  IllegalArgumentException  If {@code readAheadLimit < 0}&#10;     * @exception  IOException  If an I/O error occurs&#10;     "
  ]
  node [
    id 1171
    label "public void reset() throws IOException"
    type "method"
    comment "&#10;     * Reset will disregard the state of any objects already written to the&#10;     * stream.  The state is reset to be the same as a new ObjectOutputStream.&#10;     * The current point in the stream is marked as reset so the corresponding&#10;     * ObjectInputStream will be reset at the same point.  Objects previously&#10;     * written to the stream will not be referred to as already being in the&#10;     * stream.  They will be written to the stream again.&#10;     *&#10;     * @throws  IOException if reset() is invoked while serializing an object.&#10;     "
  ]
  node [
    id 1172
    label "public abstract void close() throws IOException"
    type "method"
    comment "&#10;     * Closes this file system.&#10;     *&#10;     * <p> After a file system is closed then all subsequent access to the file&#10;     * system, either by methods defined by this class or on objects associated&#10;     * with this file system, throw {@link ClosedFileSystemException}. If the&#10;     * file system is already closed then invoking this method has no effect.&#10;     *&#10;     * <p> Closing a file system will close all open {@link&#10;     * java.nio.channels.Channel channels}, {@link DirectoryStream directory-streams},&#10;     * {@link WatchService watch-service}, and other closeable objects associated&#10;     * with this file system. The {@link FileSystems#getDefault default} file&#10;     * system cannot be closed.&#10;     *&#10;     * @throws  IOException&#10;     *          If an I/O error occurs&#10;     * @throws  UnsupportedOperationException&#10;     *          Thrown in the case of the default file system&#10;     "
  ]
  node [
    id 1173
    label "public long transferTo(Writer out) throws IOException"
    type "method"
    comment "&#10;     * Reads all characters from this reader and writes the characters to the&#10;     * given writer in the order that they are read. On return, this reader&#10;     * will be at end of the stream. This method does not close either reader&#10;     * or writer.&#10;     * <p>&#10;     * This method may block indefinitely reading from the reader, or&#10;     * writing to the writer. The behavior for the case where the reader&#10;     * and/or writer is <i>asynchronously closed</i>, or the thread&#10;     * interrupted during the transfer, is highly reader and writer&#10;     * specific, and therefore not specified.&#10;     * <p>&#10;     * If an I/O error occurs reading from the reader or writing to the&#10;     * writer, then it may do so after some characters have been read or&#10;     * written. Consequently the reader may not be at end of the stream and&#10;     * one, or both, streams may be in an inconsistent state. It is strongly&#10;     * recommended that both streams be promptly closed if an I/O error occurs.&#10;     *&#10;     * @param  out the writer, non-null&#10;     * @return the number of characters transferred&#10;     * @throws IOException if an I/O error occurs when reading or writing&#10;     * @throws NullPointerException if {@code out} is {@code null}&#10;     *&#10;     * @since 10&#10;     "
  ]
  node [
    id 1174
    label "java.util.Scanner"
  ]
  node [
    id 1175
    label "readLine"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1176
    label "public Console format(String fmt, Object... args)"
    type "method"
    comment "&#10;    * Writes a formatted string to this console's output stream using&#10;    * the specified format string and arguments.&#10;    *&#10;    * @param  fmt&#10;    *         A format string as described in <a&#10;    *         href=&#34;../util/Formatter.html#syntax&#34;>Format string syntax</a>&#10;    *&#10;    * @param  args&#10;    *         Arguments referenced by the format specifiers in the format&#10;    *         string.  If there are more arguments than format specifiers, the&#10;    *         extra arguments are ignored.  The number of arguments is&#10;    *         variable and may be zero.  The maximum number of arguments is&#10;    *         limited by the maximum dimension of a Java array as defined by&#10;    *         <cite>The Java Virtual Machine Specification</cite>.&#10;    *         The behaviour on a&#10;    *         {@code null} argument depends on the <a&#10;    *         href=&#34;../util/Formatter.html#syntax&#34;>conversion</a>.&#10;    *&#10;    * @throws  IllegalFormatException&#10;    *          If a format string contains an illegal syntax, a format&#10;    *          specifier that is incompatible with the given arguments,&#10;    *          insufficient arguments given the format string, or other&#10;    *          illegal conditions.  For specification of all possible&#10;    *          formatting errors, see the <a&#10;    *          href=&#34;../util/Formatter.html#detail&#34;>Details</a> section&#10;    *          of the formatter class specification.&#10;    *&#10;    * @return  This console&#10;    "
  ]
  node [
    id 1177
    label "public Console printf(String format, Object... args)"
    type "method"
    comment "&#10;    * A convenience method to write a formatted string to this console's&#10;    * output stream using the specified format string and arguments.&#10;    *&#10;    * <p> An invocation of this method of the form&#10;    * {@code con.printf(format, args)} behaves in exactly the same way&#10;    * as the invocation of&#10;    * <pre>con.format(format, args)</pre>.&#10;    *&#10;    * @param  format&#10;    *         A format string as described in <a&#10;    *         href=&#34;../util/Formatter.html#syntax&#34;>Format string syntax</a>.&#10;    *&#10;    * @param  args&#10;    *         Arguments referenced by the format specifiers in the format&#10;    *         string.  If there are more arguments than format specifiers, the&#10;    *         extra arguments are ignored.  The number of arguments is&#10;    *         variable and may be zero.  The maximum number of arguments is&#10;    *         limited by the maximum dimension of a Java array as defined by&#10;    *         <cite>The Java Virtual Machine Specification</cite>.&#10;    *         The behaviour on a&#10;    *         {@code null} argument depends on the <a&#10;    *         href=&#34;../util/Formatter.html#syntax&#34;>conversion</a>.&#10;    *&#10;    * @throws  IllegalFormatException&#10;    *          If a format string contains an illegal syntax, a format&#10;    *          specifier that is incompatible with the given arguments,&#10;    *          insufficient arguments given the format string, or other&#10;    *          illegal conditions.  For specification of all possible&#10;    *          formatting errors, see the <a&#10;    *          href=&#34;../util/Formatter.html#detail&#34;>Details</a> section of the&#10;    *          formatter class specification.&#10;    *&#10;    * @return  This console&#10;    "
  ]
  node [
    id 1178
    label "public String readLine(String fmt, Object... args)"
    type "method"
    comment "&#10;    * Provides a formatted prompt, then reads a single line of text from the&#10;    * console.&#10;    *&#10;    * @param  fmt&#10;    *         A format string as described in <a&#10;    *         href=&#34;../util/Formatter.html#syntax&#34;>Format string syntax</a>.&#10;    *&#10;    * @param  args&#10;    *         Arguments referenced by the format specifiers in the format&#10;    *         string.  If there are more arguments than format specifiers, the&#10;    *         extra arguments are ignored.  The maximum number of arguments is&#10;    *         limited by the maximum dimension of a Java array as defined by&#10;    *         <cite>The Java Virtual Machine Specification</cite>.&#10;    *&#10;    * @throws  IllegalFormatException&#10;    *          If a format string contains an illegal syntax, a format&#10;    *          specifier that is incompatible with the given arguments,&#10;    *          insufficient arguments given the format string, or other&#10;    *          illegal conditions.  For specification of all possible&#10;    *          formatting errors, see the <a&#10;    *          href=&#34;../util/Formatter.html#detail&#34;>Details</a> section&#10;    *          of the formatter class specification.&#10;    *&#10;    * @throws IOError&#10;    *         If an I/O error occurs.&#10;    *&#10;    * @return  A string containing the line read from the console, not&#10;    *          including any line-termination characters, or {@code null}&#10;    *          if an end of stream has been reached.&#10;    "
  ]
  node [
    id 1179
    label "public String readLine()"
    type "method"
    comment "&#10;    * Reads a single line of text from the console.&#10;    *&#10;    * @throws IOError&#10;    *         If an I/O error occurs.&#10;    *&#10;    * @return  A string containing the line read from the console, not&#10;    *          including any line-termination characters, or {@code null}&#10;    *          if an end of stream has been reached.&#10;    "
  ]
  node [
    id 1180
    label "public char[] readPassword(String fmt, Object... args)"
    type "method"
    comment "&#10;    * Provides a formatted prompt, then reads a password or passphrase from&#10;    * the console with echoing disabled.&#10;    *&#10;    * @param  fmt&#10;    *         A format string as described in <a&#10;    *         href=&#34;../util/Formatter.html#syntax&#34;>Format string syntax</a>&#10;    *         for the prompt text.&#10;    *&#10;    * @param  args&#10;    *         Arguments referenced by the format specifiers in the format&#10;    *         string.  If there are more arguments than format specifiers, the&#10;    *         extra arguments are ignored.  The maximum number of arguments is&#10;    *         limited by the maximum dimension of a Java array as defined by&#10;    *         <cite>The Java Virtual Machine Specification</cite>.&#10;    *&#10;    * @throws  IllegalFormatException&#10;    *          If a format string contains an illegal syntax, a format&#10;    *          specifier that is incompatible with the given arguments,&#10;    *          insufficient arguments given the format string, or other&#10;    *          illegal conditions.  For specification of all possible&#10;    *          formatting errors, see the <a&#10;    *          href=&#34;../util/Formatter.html#detail&#34;>Details</a>&#10;    *          section of the formatter class specification.&#10;    *&#10;    * @throws IOError&#10;    *         If an I/O error occurs.&#10;    *&#10;    * @return  A character array containing the password or passphrase read&#10;    *          from the console, not including any line-termination characters,&#10;    *          or {@code null} if an end of stream has been reached.&#10;    "
  ]
  node [
    id 1181
    label "public char[] readPassword()"
    type "method"
    comment "&#10;    * Reads a password or passphrase from the console with echoing disabled&#10;    *&#10;    * @throws IOError&#10;    *         If an I/O error occurs.&#10;    *&#10;    * @return  A character array containing the password or passphrase read&#10;    *          from the console, not including any line-termination characters,&#10;    *          or {@code null} if an end of stream has been reached.&#10;    "
  ]
  node [
    id 1182
    label "public Charset charset()"
    type "method"
    comment "&#10;     * Returns the {@link java.nio.charset.Charset Charset} object used for&#10;     * the {@code Console}.&#10;     * <p>&#10;     * The returned charset corresponds to the input and output source&#10;     * (e.g., keyboard and/or display) specified by the host environment or user.&#10;     * It may not necessarily be the same as the default charset returned from&#10;     * {@link java.nio.charset.Charset#defaultCharset() Charset.defaultCharset()}.&#10;     *&#10;     * @return a {@link java.nio.charset.Charset Charset} object used for the&#10;     *          {@code Console}&#10;     * @since 17&#10;     "
  ]
  node [
    id 1183
    label "java.nio.charset.Charset"
    type "class"
    comment ""
  ]
  node [
    id 1184
    label "private static void checkName(String s)"
    type "method"
    comment "&#10;     * Checks that the given string is a legal charset name. </p>&#10;     *&#10;     * @param  s&#10;     *         A purported charset name&#10;     *&#10;     * @throws  IllegalCharsetNameException&#10;     *          If the given name is not a legal charset name&#10;     "
  ]
  node [
    id 1185
    label "private static Charset lookup(String charsetName)"
    type "method"
    comment " instance in a map for level 2 cache."
  ]
  node [
    id 1186
    label "public static boolean isSupported(String charsetName)"
    type "method"
    comment "&#10;     * Tells whether the named charset is supported.&#10;     *&#10;     * @param  charsetName&#10;     *         The name of the requested charset; may be either&#10;     *         a canonical name or an alias&#10;     *&#10;     * @return  {@code true} if, and only if, support for the named charset&#10;     *          is available in the current Java virtual machine&#10;     *&#10;     * @throws IllegalCharsetNameException&#10;     *         If the given charset name is illegal&#10;     *&#10;     * @throws  IllegalArgumentException&#10;     *          If the given {@code charsetName} is null&#10;     "
  ]
  node [
    id 1187
    label "public static Charset forName(String charsetName)"
    type "method"
    comment "&#10;     * Returns a charset object for the named charset.&#10;     *&#10;     * @param  charsetName&#10;     *         The name of the requested charset; may be either&#10;     *         a canonical name or an alias&#10;     *&#10;     * @return  A charset object for the named charset&#10;     *&#10;     * @throws  IllegalCharsetNameException&#10;     *          If the given charset name is illegal&#10;     *&#10;     * @throws  IllegalArgumentException&#10;     *          If the given {@code charsetName} is null&#10;     *&#10;     * @throws  UnsupportedCharsetException&#10;     *          If no support for the named charset is available&#10;     *          in this instance of the Java virtual machine&#10;     "
  ]
  node [
    id 1188
    label "public static SortedMap<String, Charset> availableCharsets()"
    type "method"
    comment "&#10;     * Constructs a sorted map from canonical charset names to charset objects.&#10;     *&#10;     * <p> The map returned by this method will have one entry for each charset&#10;     * for which support is available in the current Java virtual machine.  If&#10;     * two or more supported charsets have the same canonical name then the&#10;     * resulting map will contain just one of them; which one it will contain&#10;     * is not specified. </p>&#10;     *&#10;     * <p> The invocation of this method, and the subsequent use of the&#10;     * resulting map, may cause time-consuming disk or network I/O operations&#10;     * to occur.  This method is provided for applications that need to&#10;     * enumerate all of the available charsets, for example to allow user&#10;     * charset selection.  This method is not used by the {@link #forName&#10;     * forName} method, which instead employs an efficient incremental lookup&#10;     * algorithm.&#10;     *&#10;     * <p> This method may return different results at different times if new&#10;     * charset providers are dynamically made available to the current Java&#10;     * virtual machine.  In the absence of such changes, the charsets returned&#10;     * by this method are exactly those that can be retrieved via the {@link&#10;     * #forName forName} method.  </p>&#10;     *&#10;     * @return An immutable, case-insensitive map from canonical charset names&#10;     *         to charset objects&#10;     "
  ]
  node [
    id 1189
    label "forNameforName"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1190
    label "forName"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1191
    label "public static Charset defaultCharset()"
    type "method"
    comment "&#10;     * Returns the default charset of this Java virtual machine.&#10;     *&#10;     * <p>Android note: The Android platform default is always UTF-8.&#10;     *&#10;     * @return  A charset object for the default charset&#10;     *&#10;     * @since 1.5&#10;     "
  ]
  node [
    id 1192
    label "public final String name()"
    type "method"
    comment "&#10;     * Returns this charset's canonical name.&#10;     *&#10;     * @return  The canonical name of this charset&#10;     "
  ]
  node [
    id 1193
    label "public final Set<String> aliases()"
    type "method"
    comment "&#10;     * Returns a set containing this charset's aliases.&#10;     *&#10;     * @return  An immutable set of this charset's aliases&#10;     "
  ]
  node [
    id 1194
    label "public String displayName()"
    type "method"
    comment "&#10;     * Returns this charset's human-readable name for the default locale.&#10;     *&#10;     * <p> The default implementation of this method simply returns this&#10;     * charset's canonical name.  Concrete subclasses of this class may&#10;     * override this method in order to provide a localized display name. </p>&#10;     *&#10;     * @return  The display name of this charset in the default locale&#10;     "
  ]
  node [
    id 1195
    label "public final boolean isRegistered()"
    type "method"
    comment "&#10;     * Tells whether or not this charset is registered in the <a&#10;     * href=&#34;http://www.iana.org/assignments/character-sets&#34;>IANA Charset&#10;     * Registry</a>.&#10;     *&#10;     * @return  {@code true} if, and only if, this charset is known by its&#10;     *          implementor to be registered with the IANA&#10;     "
  ]
  node [
    id 1196
    label "public String displayName(Locale locale)"
    type "method"
    comment "&#10;     * Returns this charset's human-readable name for the given locale.&#10;     *&#10;     * <p> The default implementation of this method simply returns this&#10;     * charset's canonical name.  Concrete subclasses of this class may&#10;     * override this method in order to provide a localized display name. </p>&#10;     *&#10;     * @param  locale&#10;     *         The locale for which the display name is to be retrieved&#10;     *&#10;     * @return  The display name of this charset in the given locale&#10;     "
  ]
  node [
    id 1197
    label "public abstract boolean contains(Charset cs)"
    type "method"
    comment "&#10;     * Tells whether or not this charset contains the given charset.&#10;     *&#10;     * <p> A charset <i>C</i> is said to <i>contain</i> a charset <i>D</i> if,&#10;     * and only if, every character representable in <i>D</i> is also&#10;     * representable in <i>C</i>.  If this relationship holds then it is&#10;     * guaranteed that every string that can be encoded in <i>D</i> can also be&#10;     * encoded in <i>C</i> without performing any replacements.&#10;     *&#10;     * <p> That <i>C</i> contains <i>D</i> does not imply that each character&#10;     * representable in <i>C</i> by a particular byte sequence is represented&#10;     * in <i>D</i> by the same byte sequence, although sometimes this is the&#10;     * case.&#10;     *&#10;     * <p> Every charset contains itself.&#10;     *&#10;     * <p> This method computes an approximation of the containment relation:&#10;     * If it returns {@code true} then the given charset is known to be&#10;     * contained by this charset; if it returns {@code false}, however, then&#10;     * it is not necessarily the case that the given charset is not contained&#10;     * in this charset.&#10;     *&#10;     * @param   cs&#10;     *          The given charset&#10;     *&#10;     * @return  {@code true} if the given charset is contained in this charset&#10;     "
  ]
  node [
    id 1198
    label "public abstract CharsetDecoder newDecoder()"
    type "method"
    comment "&#10;     * Constructs a new decoder for this charset.&#10;     *&#10;     * @return  A new decoder for this charset&#10;     "
  ]
  node [
    id 1199
    label "public abstract CharsetEncoder newEncoder()"
    type "method"
    comment "&#10;     * Constructs a new encoder for this charset.&#10;     *&#10;     * @return  A new encoder for this charset&#10;     *&#10;     * @throws  UnsupportedOperationException&#10;     *          If this charset does not support encoding&#10;     "
  ]
  node [
    id 1200
    label "public boolean canEncode()"
    type "method"
    comment "&#10;     * Tells whether or not this charset supports encoding.&#10;     *&#10;     * <p> Nearly all charsets support encoding.  The primary exceptions are&#10;     * special-purpose <i>auto-detect</i> charsets whose decoders can determine&#10;     * which of several possible encoding schemes is in use by examining the&#10;     * input byte sequence.  Such charsets do not support encoding because&#10;     * there is no way to determine which encoding should be used on output.&#10;     * Implementations of such charsets should override this method to return&#10;     * {@code false}. </p>&#10;     *&#10;     * @return  {@code true} if, and only if, this charset supports encoding&#10;     "
  ]
  node [
    id 1201
    label "public final CharBuffer decode(ByteBuffer bb)"
    type "method"
    comment "&#10;     * Convenience method that decodes bytes in this charset into Unicode&#10;     * characters.&#10;     *&#10;     * <p> An invocation of this method upon a charset {@code cs} returns the&#10;     * same result as the expression&#10;     *&#10;     * <pre>&#10;     *     cs.newDecoder()&#10;     *       .onMalformedInput(CodingErrorAction.REPLACE)&#10;     *       .onUnmappableCharacter(CodingErrorAction.REPLACE)&#10;     *       .decode(bb); </pre>&#10;     *&#10;     * except that it is potentially more efficient because it can cache&#10;     * decoders between successive invocations.&#10;     *&#10;     * <p> This method always replaces malformed-input and unmappable-character&#10;     * sequences with this charset's default replacement byte array.  In order&#10;     * to detect such sequences, use the {@link&#10;     * CharsetDecoder#decode(java.nio.ByteBuffer)} method directly.  </p>&#10;     *&#10;     * @param  bb  The byte buffer to be decoded&#10;     *&#10;     * @return  A char buffer containing the decoded characters&#10;     "
  ]
  node [
    id 1202
    label "decode(java.nio.ByteBuffer)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1203
    label "java.nio.charset.CharsetDecoder"
    type "class"
    comment ""
  ]
  node [
    id 1204
    label "public final String replacement()"
    type "method"
    comment "&#10;     * Returns this decoder's replacement value.&#10;     *&#10;     * @return  This decoder's current replacement,&#10;     *          which is never {@code null} and is never empty&#10;     "
  ]
  node [
    id 1205
    label "public final CharsetDecoder replaceWith(String newReplacement)"
    type "method"
    comment "&#10;     * Changes this decoder's replacement value.&#10;     *&#10;     * <p> This method invokes the {@link #implReplaceWith implReplaceWith}&#10;     * method, passing the new replacement, after checking that the new&#10;     * replacement is acceptable.  </p>&#10;     *&#10;     * @param  newReplacement  The new replacement; must not be&#10;     *         {@code null}, must have non-zero length,&#10;&#10;     *         and must not be longer than the value returned by the&#10;     *         {@link #maxCharsPerByte() maxCharsPerByte} method&#10;&#10;&#10;&#10;&#10;&#10;&#10;     *&#10;     * @return  This decoder&#10;     *&#10;     * @throws  IllegalArgumentException&#10;     *          If the preconditions on the parameter do not hold&#10;     "
  ]
  node [
    id 1206
    label "maxCharsPerByte()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1207
    label "protected void implReplaceWith(String newReplacement)"
    type "method"
    comment "&#10;     * Reports a change to this decoder's replacement value.&#10;     *&#10;     * <p> The default implementation of this method does nothing.  This method&#10;     * should be overridden by decoders that require notification of changes to&#10;     * the replacement.  </p>&#10;     *&#10;     * @param  newReplacement    The replacement value&#10;     "
  ]
  node [
    id 1208
    label "public final CharsetDecoder onMalformedInput(CodingErrorAction newAction)"
    type "method"
    comment "&#10;     * Changes this decoder's action for malformed-input errors.&#10;     *&#10;     * <p> This method invokes the {@link #implOnMalformedInput&#10;     * implOnMalformedInput} method, passing the new action.  </p>&#10;     *&#10;     * @param  newAction  The new action; must not be {@code null}&#10;     *&#10;     * @return  This decoder&#10;     *&#10;     * @throws IllegalArgumentException&#10;     *         If the precondition on the parameter does not hold&#10;     "
  ]
  node [
    id 1209
    label "public final CharsetDecoder onUnmappableCharacter(CodingErrorAction newAction)"
    type "method"
    comment "&#10;     * Changes this decoder's action for unmappable-character errors.&#10;     *&#10;     * <p> This method invokes the {@link #implOnUnmappableCharacter&#10;     * implOnUnmappableCharacter} method, passing the new action.  </p>&#10;     *&#10;     * @param  newAction  The new action; must not be {@code null}&#10;     *&#10;     * @return  This decoder&#10;     *&#10;     * @throws IllegalArgumentException&#10;     *         If the precondition on the parameter does not hold&#10;     "
  ]
  node [
    id 1210
    label "public final float averageCharsPerByte()"
    type "method"
    comment "&#10;     * Returns the average number of characters that will be produced for each&#10;     * byte of input.  This heuristic value may be used to estimate the size&#10;     * of the output buffer required for a given input sequence.&#10;     *&#10;     * @return  The average number of characters produced&#10;     *          per byte of input&#10;     "
  ]
  node [
    id 1211
    label "public final float maxCharsPerByte()"
    type "method"
    comment "&#10;     * Returns the maximum number of characters that will be produced for each&#10;     * byte of input.  This value may be used to compute the worst-case size&#10;     * of the output buffer required for a given input sequence. This value&#10;     * accounts for any necessary content-independent prefix or suffix&#10;&#10;&#10;&#10;&#10;     * characters.&#10;&#10;     *&#10;     * @return  The maximum number of characters that will be produced per&#10;     *          byte of input&#10;     "
  ]
  node [
    id 1212
    label "public final CoderResult decode(ByteBuffer in, CharBuffer out, boolean endOfInput)"
    type "method"
    comment "&#10;     * Decodes as many bytes as possible from the given input buffer,&#10;     * writing the results to the given output buffer.&#10;     *&#10;     * <p> The buffers are read from, and written to, starting at their current&#10;     * positions.  At most {@link Buffer#remaining in.remaining()} bytes&#10;     * will be read and at most {@link Buffer#remaining out.remaining()}&#10;     * characters will be written.  The buffers' positions will be advanced to&#10;     * reflect the bytes read and the characters written, but their marks and&#10;     * limits will not be modified.&#10;     *&#10;     * <p> In addition to reading bytes from the input buffer and writing&#10;     * characters to the output buffer, this method returns a {@link CoderResult}&#10;     * object to describe its reason for termination:&#10;     *&#10;     * <ul>&#10;     *&#10;     *   <li><p> {@link CoderResult#UNDERFLOW} indicates that as much of the&#10;     *   input buffer as possible has been decoded.  If there is no further&#10;     *   input then the invoker can proceed to the next step of the&#10;     *   <a href=&#34;#steps&#34;>decoding operation</a>.  Otherwise this method&#10;     *   should be invoked again with further input.  </p></li>&#10;     *&#10;     *   <li><p> {@link CoderResult#OVERFLOW} indicates that there is&#10;     *   insufficient space in the output buffer to decode any more bytes.&#10;     *   This method should be invoked again with an output buffer that has&#10;     *   more {@linkplain Buffer#remaining remaining} characters. This is&#10;     *   typically done by draining any decoded characters from the output&#10;     *   buffer.  </p></li>&#10;     *&#10;     *   <li><p> A {@linkplain CoderResult#malformedForLength&#10;     *   malformed-input} result indicates that a malformed-input&#10;     *   error has been detected.  The malformed bytes begin at the input&#10;     *   buffer's (possibly incremented) position; the number of malformed&#10;     *   bytes may be determined by invoking the result object's {@link&#10;     *   CoderResult#length() length} method.  This case applies only if the&#10;     *   {@linkplain #onMalformedInput malformed action} of this decoder&#10;     *   is {@link CodingErrorAction#REPORT}; otherwise the malformed input&#10;     *   will be ignored or replaced, as requested.  </p></li>&#10;     *&#10;     *   <li><p> An {@linkplain CoderResult#unmappableForLength&#10;     *   unmappable-character} result indicates that an&#10;     *   unmappable-character error has been detected.  The bytes that&#10;     *   decode the unmappable character begin at the input buffer's (possibly&#10;     *   incremented) position; the number of such bytes may be determined&#10;     *   by invoking the result object's {@link CoderResult#length() length}&#10;     *   method.  This case applies only if the {@linkplain #onUnmappableCharacter&#10;     *   unmappable action} of this decoder is {@link&#10;     *   CodingErrorAction#REPORT}; otherwise the unmappable character will be&#10;     *   ignored or replaced, as requested.  </p></li>&#10;     *&#10;     * </ul>&#10;     *&#10;     * In any case, if this method is to be reinvoked in the same decoding&#10;     * operation then care should be taken to preserve any bytes remaining&#10;     * in the input buffer so that they are available to the next invocation.&#10;     *&#10;     * <p> The {@code endOfInput} parameter advises this method as to whether&#10;     * the invoker can provide further input beyond that contained in the given&#10;     * input buffer.  If there is a possibility of providing additional input&#10;     * then the invoker should pass {@code false} for this parameter; if there&#10;     * is no possibility of providing further input then the invoker should&#10;     * pass {@code true}.  It is not erroneous, and in fact it is quite&#10;     * common, to pass {@code false} in one invocation and later discover that&#10;     * no further input was actually available.  It is critical, however, that&#10;     * the final invocation of this method in a sequence of invocations always&#10;     * pass {@code true} so that any remaining undecoded input will be treated&#10;     * as being malformed.&#10;     *&#10;     * <p> This method works by invoking the {@link #decodeLoop decodeLoop}&#10;     * method, interpreting its results, handling error conditions, and&#10;     * reinvoking it as necessary.  </p>&#10;     *&#10;     *&#10;     * @param  in&#10;     *         The input byte buffer&#10;     *&#10;     * @param  out&#10;     *         The output character buffer&#10;     *&#10;     * @param  endOfInput&#10;     *         {@code true} if, and only if, the invoker can provide no&#10;     *         additional input bytes beyond those in the given buffer&#10;     *&#10;     * @return  A coder-result object describing the reason for termination&#10;     *&#10;     * @throws  IllegalStateException&#10;     *          If a decoding operation is already in progress and the previous&#10;     *          step was an invocation neither of the {@link #reset reset}&#10;     *          method, nor of this method with a value of {@code false} for&#10;     *          the {@code endOfInput} parameter, nor of this method with a&#10;     *          value of {@code true} for the {@code endOfInput} parameter&#10;     *          but a return value indicating an incomplete decoding operation&#10;     *&#10;     * @throws  CoderMalfunctionError&#10;     *          If an invocation of the decodeLoop method threw&#10;     *          an unexpected exception&#10;     *&#10;     * @throws  NullPointerException if input or output buffer is null&#10;     "
  ]
  node [
    id 1213
    label "decodeLoop"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1214
    label "public final CoderResult flush(CharBuffer out)"
    type "method"
    comment "&#10;     * Flushes this decoder.&#10;     *&#10;     * <p> Some decoders maintain internal state and may need to write some&#10;     * final characters to the output buffer once the overall input sequence has&#10;     * been read.&#10;     *&#10;     * <p> Any additional output is written to the output buffer beginning at&#10;     * its current position.  At most {@link Buffer#remaining out.remaining()}&#10;     * characters will be written.  The buffer's position will be advanced&#10;     * appropriately, but its mark and limit will not be modified.&#10;     *&#10;     * <p> If this method completes successfully then it returns {@link&#10;     * CoderResult#UNDERFLOW}.  If there is insufficient room in the output&#10;     * buffer then it returns {@link CoderResult#OVERFLOW}.  If this happens&#10;     * then this method must be invoked again, with an output buffer that has&#10;     * more room, in order to complete the current <a href=&#34;#steps&#34;>decoding&#10;     * operation</a>.&#10;     *&#10;     * <p> If this decoder has already been flushed then invoking this method&#10;     * has no effect.&#10;     *&#10;     * <p> This method invokes the {@link #implFlush implFlush} method to&#10;     * perform the actual flushing operation.  </p>&#10;     *&#10;     * @param  out&#10;     *         The output character buffer&#10;     *&#10;     * @return  A coder-result object, either {@link CoderResult#UNDERFLOW} or&#10;     *          {@link CoderResult#OVERFLOW}&#10;     *&#10;     * @throws  IllegalStateException&#10;     *          If the previous step of the current decoding operation was an&#10;     *          invocation neither of the {@link #flush flush} method nor of&#10;     *          the three-argument {@link&#10;     *          #decode(ByteBuffer,CharBuffer,boolean) decode} method&#10;     *          with a value of {@code true} for the {@code endOfInput}&#10;     *          parameter&#10;     "
  ]
  node [
    id 1215
    label "decode(ByteBuffer"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1216
    label "protected CoderResult implFlush(CharBuffer out)"
    type "method"
    comment "&#10;     * Flushes this decoder.&#10;     *&#10;     * <p> The default implementation of this method does nothing, and always&#10;     * returns {@link CoderResult#UNDERFLOW}.  This method should be overridden&#10;     * by decoders that may need to write final characters to the output buffer&#10;     * once the entire input sequence has been read. </p>&#10;     *&#10;     * @param  out&#10;     *         The output character buffer&#10;     *&#10;     * @return  A coder-result object, either {@link CoderResult#UNDERFLOW} or&#10;     *          {@link CoderResult#OVERFLOW}&#10;     "
  ]
  node [
    id 1217
    label "public final CharsetDecoder reset()"
    type "method"
    comment "&#10;     * Resets this decoder, clearing any internal state.&#10;     *&#10;     * <p> This method resets charset-independent state and also invokes the&#10;     * {@link #implReset() implReset} method in order to perform any&#10;     * charset-specific reset actions.  </p>&#10;     *&#10;     * @return  This decoder&#10;     *&#10;     "
  ]
  node [
    id 1218
    label "protected abstract CoderResult decodeLoop(ByteBuffer in, CharBuffer out)"
    type "method"
    comment "&#10;     * Decodes one or more bytes into one or more characters.&#10;     *&#10;     * <p> This method encapsulates the basic decoding loop, decoding as many&#10;     * bytes as possible until it either runs out of input, runs out of room&#10;     * in the output buffer, or encounters a decoding error.  This method is&#10;     * invoked by the {@link #decode decode} method, which handles result&#10;     * interpretation and error recovery.&#10;     *&#10;     * <p> The buffers are read from, and written to, starting at their current&#10;     * positions.  At most {@link Buffer#remaining in.remaining()} bytes&#10;     * will be read, and at most {@link Buffer#remaining out.remaining()}&#10;     * characters will be written.  The buffers' positions will be advanced to&#10;     * reflect the bytes read and the characters written, but their marks and&#10;     * limits will not be modified.&#10;     *&#10;     * <p> This method returns a {@link CoderResult} object to describe its&#10;     * reason for termination, in the same manner as the {@link #decode decode}&#10;     * method.  Most implementations of this method will handle decoding errors&#10;     * by returning an appropriate result object for interpretation by the&#10;     * {@link #decode decode} method.  An optimized implementation may instead&#10;     * examine the relevant error action and implement that action itself.&#10;     *&#10;     * <p> An implementation of this method may perform arbitrary lookahead by&#10;     * returning {@link CoderResult#UNDERFLOW} until it receives sufficient&#10;     * input.  </p>&#10;     *&#10;     * @param  in&#10;     *         The input byte buffer&#10;     *&#10;     * @param  out&#10;     *         The output character buffer&#10;     *&#10;     * @return  A coder-result object describing the reason for termination&#10;     "
  ]
  node [
    id 1219
    label "decode"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1220
    label "public final CharBuffer decode(ByteBuffer in) throws CharacterCodingException"
    type "method"
    comment "&#10;     * Convenience method that decodes the remaining content of a single input&#10;     * byte buffer into a newly-allocated character buffer.&#10;     *&#10;     * <p> This method implements an entire <a href=&#34;#steps&#34;>decoding&#10;     * operation</a>; that is, it resets this decoder, then it decodes the&#10;     * bytes in the given byte buffer, and finally it flushes this&#10;     * decoder.  This method should therefore not be invoked if a decoding&#10;     * operation is already in progress.  </p>&#10;     *&#10;     * @param  in&#10;     *         The input byte buffer&#10;     *&#10;     * @return A newly-allocated character buffer containing the result of the&#10;     *         decoding operation.  The buffer's position will be zero and its&#10;     *         limit will follow the last character written.&#10;     *&#10;     * @throws  IllegalStateException&#10;     *          If a decoding operation is already in progress&#10;     *&#10;     * @throws  MalformedInputException&#10;     *          If the byte sequence starting at the input buffer's current&#10;     *          position is not legal for this charset and the current malformed-input action&#10;     *          is {@link CodingErrorAction#REPORT}&#10;     *&#10;     * @throws  UnmappableCharacterException&#10;     *          If the byte sequence starting at the input buffer's current&#10;     *          position cannot be mapped to an equivalent character sequence and&#10;     *          the current unmappable-character action is {@link&#10;     *          CodingErrorAction#REPORT}&#10;     *&#10;     * @throws  CoderMalfunctionError&#10;     *          If an invocation of the decodeLoop method threw&#10;     *          an unexpected exception&#10;     *&#10;     * @throws  NullPointerException if input buffer is null&#10;     "
  ]
  node [
    id 1221
    label "public boolean isAutoDetecting()"
    type "method"
    comment "&#10;     * Tells whether or not this decoder implements an auto-detecting charset.&#10;     *&#10;     * <p> The default implementation of this method always returns&#10;     * {@code false}; it should be overridden by auto-detecting decoders to&#10;     * return {@code true}.  </p>&#10;     *&#10;     * @return  {@code true} if, and only if, this decoder implements an&#10;     *          auto-detecting charset&#10;     "
  ]
  node [
    id 1222
    label "public boolean isCharsetDetected()"
    type "method"
    comment "&#10;     * Tells whether or not this decoder has yet detected a&#10;     * charset&#38;nbsp;&#38;nbsp;<i>(optional operation)</i>.&#10;     *&#10;     * <p> If this decoder implements an auto-detecting charset then at a&#10;     * single point during a decoding operation this method may start returning&#10;     * {@code true} to indicate that a specific charset has been detected in&#10;     * the input byte sequence.  Once this occurs, the {@link #detectedCharset&#10;     * detectedCharset} method may be invoked to retrieve the detected charset.&#10;     *&#10;     * <p> That this method returns {@code false} does not imply that no bytes&#10;     * have yet been decoded.  Some auto-detecting decoders are capable of&#10;     * decoding some, or even all, of an input byte sequence without fixing on&#10;     * a particular charset.&#10;     *&#10;     * <p> The default implementation of this method always throws an {@link&#10;     * UnsupportedOperationException}; it should be overridden by&#10;     * auto-detecting decoders to return {@code true} once the input charset&#10;     * has been determined.  </p>&#10;     *&#10;     * @return  {@code true} if, and only if, this decoder has detected a&#10;     *          specific charset&#10;     *&#10;     * @throws  UnsupportedOperationException&#10;     *          If this decoder does not implement an auto-detecting charset&#10;     "
  ]
  node [
    id 1223
    label "detectedCharsetdetectedCharset"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1224
    label "public Charset detectedCharset()"
    type "method"
    comment "&#10;     * Retrieves the charset that was detected by this&#10;     * decoder&#38;nbsp;&#38;nbsp;<i>(optional operation)</i>.&#10;     *&#10;     * <p> If this decoder implements an auto-detecting charset then this&#10;     * method returns the actual charset once it has been detected.  After that&#10;     * point, this method returns the same value for the duration of the&#10;     * current decoding operation.  If not enough input bytes have yet been&#10;     * read to determine the actual charset then this method throws an {@link&#10;     * IllegalStateException}.&#10;     *&#10;     * <p> The default implementation of this method always throws an {@link&#10;     * UnsupportedOperationException}; it should be overridden by&#10;     * auto-detecting decoders to return the appropriate value.  </p>&#10;     *&#10;     * @return  The charset detected by this auto-detecting decoder,&#10;     *          or {@code null} if the charset has not yet been determined&#10;     *&#10;     * @throws  IllegalStateException&#10;     *          If insufficient bytes have been read to determine a charset&#10;     *&#10;     * @throws  UnsupportedOperationException&#10;     *          If this decoder does not implement an auto-detecting charset&#10;     "
  ]
  node [
    id 1225
    label "public final ByteBuffer encode(CharBuffer cb)"
    type "method"
    comment "&#10;     * Convenience method that encodes Unicode characters into bytes in this&#10;     * charset.&#10;     *&#10;     * <p> An invocation of this method upon a charset {@code cs} returns the&#10;     * same result as the expression&#10;     *&#10;     * <pre>&#10;     *     cs.newEncoder()&#10;     *       .onMalformedInput(CodingErrorAction.REPLACE)&#10;     *       .onUnmappableCharacter(CodingErrorAction.REPLACE)&#10;     *       .encode(bb); </pre>&#10;     *&#10;     * except that it is potentially more efficient because it can cache&#10;     * encoders between successive invocations.&#10;     *&#10;     * <p> This method always replaces malformed-input and unmappable-character&#10;     * sequences with this charset's default replacement string.  In order to&#10;     * detect such sequences, use the {@link&#10;     * CharsetEncoder#encode(java.nio.CharBuffer)} method directly.  </p>&#10;     *&#10;     * @param  cb  The char buffer to be encoded&#10;     *&#10;     * @return  A byte buffer containing the encoded characters&#10;     "
  ]
  node [
    id 1226
    label "public final ByteBuffer encode(String str)"
    type "method"
    comment "&#10;     * Convenience method that encodes a string into bytes in this charset.&#10;     *&#10;     * <p> An invocation of this method upon a charset {@code cs} returns the&#10;     * same result as the expression&#10;     *&#10;     * <pre>&#10;     *     cs.encode(CharBuffer.wrap(s)); </pre>&#10;     *&#10;     * @param  str  The string to be encoded&#10;     *&#10;     * @return  A byte buffer containing the encoded characters&#10;     "
  ]
  node [
    id 1227
    label "public final int compareTo(Charset that)"
    type "method"
    comment "&#10;     * Compares this charset to another.&#10;     *&#10;     * <p> Charsets are ordered by their canonical names, without regard to&#10;     * case. </p>&#10;     *&#10;     * @param  that&#10;     *         The charset to which this charset is to be compared&#10;     *&#10;     * @return A negative integer, zero, or a positive integer as this charset&#10;     *         is less than, equal to, or greater than the specified charset&#10;     "
  ]
  node [
    id 1228
    label "public final int hashCode()"
    type "method"
    comment "&#10;     * Returns a hashcode for this socket address.&#10;     *&#10;     * @return  a hash code value for this socket address.&#10;     "
  ]
  node [
    id 1229
    label "public final boolean equals(Object ob)"
    type "method"
    comment "&#10;     * Tells whether or not this object is equal to another.&#10;     *&#10;     * <p> Two charsets are equal if, and only if, they have the same canonical&#10;     * names.  A charset is never equal to any other type of object.  </p>&#10;     *&#10;     * @return  {@code true} if, and only if, this charset is equal to the&#10;     *          given object&#10;     "
  ]
  node [
    id 1230
    label "public final String toString()"
    type "method"
    comment "&#10;     * Returns a string describing the range, type, and validity of this lock.&#10;     *&#10;     * @return  A descriptive string&#10;     "
  ]
  node [
    id 1231
    label "private static native boolean echo(boolean on) throws IOException"
    type "method"
    comment "&#10;     * Sets the console echo status to {@code on} and returns the previous&#10;     * console on/off status.&#10;     * @param on    the echo status to set to. {@code true} for echo on and&#10;     *              {@code false} for echo off&#10;     * @return true if the previous console echo status is on&#10;     "
  ]
  node [
    id 1232
    label "public static Channel inheritedChannel() throws IOException"
    type "method"
    comment "&#10;     * Returns the channel inherited from the entity that created this&#10;     * Java virtual machine.&#10;     *&#10;     * <p> This method returns the channel obtained by invoking the&#10;     * {@link java.nio.channels.spi.SelectorProvider#inheritedChannel&#10;     * inheritedChannel} method of the system-wide default&#10;     * {@link java.nio.channels.spi.SelectorProvider} object. </p>&#10;     *&#10;     * <p> In addition to the network-oriented channels described in&#10;     * {@link java.nio.channels.spi.SelectorProvider#inheritedChannel&#10;     * inheritedChannel}, this method may return other kinds of&#10;     * channels in the future.&#10;     *&#10;     * @return  The inherited channel, if any, otherwise <tt>null</tt>.&#10;     *&#10;     * @throws  IOException&#10;     *          If an I/O error occurs&#10;     *&#10;     * @throws  SecurityException&#10;     *          If a security manager is present and it does not&#10;     *          permit access to the channel.&#10;     *&#10;     * @since 1.5&#10;     "
  ]
  node [
    id 1233
    label "java.nio.channels.spi.SelectorProvider"
    type "class"
    comment ""
  ]
  node [
    id 1234
    label "public static SelectorProvider provider()"
    type "method"
    comment "&#10;     * Returns the system-wide default selector provider for this invocation of&#10;     * the Java virtual machine.&#10;     *&#10;     * <p> The first invocation of this method locates the default provider&#10;     * object as follows: </p>&#10;     *&#10;     * <ol>&#10;     *&#10;     *   <li><p> If the system property&#10;     *   {@code java.nio.channels.spi.SelectorProvider} is defined then it is&#10;     *   taken to be the fully-qualified name of a concrete provider class.&#10;     *   The class is loaded and instantiated; if this process fails then an&#10;     *   unspecified error is thrown.  </p></li>&#10;     *&#10;     *   <li><p> If a provider class has been installed in a jar file that is&#10;     *   visible to the system class loader, and that jar file contains a&#10;     *   provider-configuration file named&#10;     *   {@code java.nio.channels.spi.SelectorProvider} in the resource&#10;     *   directory {@code META-INF/services}, then the first class name&#10;     *   specified in that file is taken.  The class is loaded and&#10;     *   instantiated; if this process fails then an unspecified error is&#10;     *   thrown.  </p></li>&#10;     *&#10;     *   <li><p> Finally, if no provider has been specified by any of the above&#10;     *   means then the system-default provider class is instantiated and the&#10;     *   result is returned.  </p></li>&#10;     *&#10;     * </ol>&#10;     *&#10;     * <p> Subsequent invocations of this method return the provider that was&#10;     * returned by the first invocation.  </p>&#10;     *&#10;     * @return  The system-wide default selector provider&#10;     "
  ]
  node [
    id 1235
    label "public abstract DatagramChannel openDatagramChannel() throws IOException"
    type "method"
    comment "&#10;     * Opens a datagram channel.&#10;     *&#10;     * @return  The new channel&#10;     *&#10;     * @throws  IOException&#10;     *          If an I/O error occurs&#10;     "
  ]
  node [
    id 1236
    label "public abstract DatagramChannel openDatagramChannel(ProtocolFamily family) throws IOException"
    type "method"
    comment "&#10;     * Opens a datagram channel.&#10;     *&#10;     * @param   family&#10;     *          The protocol family&#10;     *&#10;     * @return  A new datagram channel&#10;     *&#10;     * @throws  UnsupportedOperationException&#10;     *          If the specified protocol family is not supported&#10;     * @throws  IOException&#10;     *          If an I/O error occurs&#10;     *&#10;     * @since 1.7&#10;     "
  ]
  node [
    id 1237
    label "public abstract Pipe openPipe() throws IOException"
    type "method"
    comment "&#10;     * Opens a pipe.&#10;     *&#10;     * @return  The new pipe&#10;     *&#10;     * @throws  IOException&#10;     *          If an I/O error occurs&#10;     "
  ]
  node [
    id 1238
    label "public abstract AbstractSelector openSelector() throws IOException"
    type "method"
    comment "&#10;     * Opens a selector.&#10;     *&#10;     * @return  The new selector&#10;     *&#10;     * @throws  IOException&#10;     *          If an I/O error occurs&#10;     "
  ]
  node [
    id 1239
    label "public abstract ServerSocketChannel openServerSocketChannel() throws IOException"
    type "method"
    comment "&#10;     * Opens a server-socket channel.&#10;     *&#10;     * @return  The new channel&#10;     *&#10;     * @throws  IOException&#10;     *          If an I/O error occurs&#10;     "
  ]
  node [
    id 1240
    label "public abstract SocketChannel openSocketChannel() throws IOException"
    type "method"
    comment "&#10;     * Opens a socket channel.&#10;     *&#10;     * @return  The new channel&#10;     *&#10;     * @throws  IOException&#10;     *          If an I/O error occurs&#10;     "
  ]
  node [
    id 1241
    label "public Channel inheritedChannel() throws IOException"
    type "method"
    comment "&#10;     * Returns the channel inherited from the entity that created this&#10;     * Java virtual machine.&#10;     *&#10;     * <p> On many operating systems a process, such as a Java virtual&#10;     * machine, can be started in a manner that allows the process to&#10;     * inherit a channel from the entity that created the process. The&#10;     * manner in which this is done is system dependent, as are the&#10;     * possible entities to which the channel may be connected. For example,&#10;     * on UNIX systems, the Internet services daemon (<i>inetd</i>) is used to&#10;     * start programs to service requests when a request arrives on an&#10;     * associated network port. In this example, the process that is started,&#10;     * inherits a channel representing a network socket.&#10;     *&#10;     * <p> In cases where the inherited channel represents a network socket&#10;     * then the {@link java.nio.channels.Channel Channel} type returned&#10;     * by this method is determined as follows:&#10;     *&#10;     * <ul>&#10;     *&#10;     *  <li><p> If the inherited channel represents a stream-oriented connected&#10;     *  socket then a {@link java.nio.channels.SocketChannel SocketChannel} is&#10;     *  returned. The socket channel is, at least initially, in blocking&#10;     *  mode, bound to a socket address, and connected to a peer.&#10;     *  </p></li>&#10;     *&#10;     *  <li><p> If the inherited channel represents a stream-oriented listening&#10;     *  socket then a {@link java.nio.channels.ServerSocketChannel&#10;     *  ServerSocketChannel} is returned. The server-socket channel is, at&#10;     *  least initially, in blocking mode, and bound to a socket address.&#10;     *  </p></li>&#10;     *&#10;     *  <li><p> If the inherited channel is a datagram-oriented socket&#10;     *  then a {@link java.nio.channels.DatagramChannel DatagramChannel} is&#10;     *  returned. The datagram channel is, at least initially, in blocking&#10;     *  mode, and bound to a socket address.&#10;     *  </p></li>&#10;     *&#10;     * </ul>&#10;     *&#10;     * <p> In addition to the network-oriented channels described, this method&#10;     * may return other kinds of channels in the future.&#10;     *&#10;     * <p> The first invocation of this method creates the channel that is&#10;     * returned. Subsequent invocations of this method return the same&#10;     * channel. </p>&#10;     *&#10;     * @return  The inherited channel, if any, otherwise {@code null}.&#10;     *&#10;     * @throws  IOException&#10;     *          If an I/O error occurs&#10;     *&#10;     * @throws  SecurityException&#10;     *          If a security manager has been installed and it denies&#10;     *          {@link RuntimePermission}{@code (&#34;inheritedChannel&#34;)}&#10;     *&#10;     * @since 1.5&#10;     "
  ]
  node [
    id 1242
    label "java.nio.channels.ServerSocketChannelServerSocketChannel"
  ]
  node [
    id 1243
    label "java.nio.channels.SocketChannel"
    type "class"
    comment ""
  ]
  node [
    id 1244
    label "public static SocketChannel open() throws IOException"
    type "method"
    comment "&#10;     * Opens a socket channel.&#10;     *&#10;     * <p> The new channel is created by invoking the {@link&#10;     * java.nio.channels.spi.SelectorProvider#openSocketChannel&#10;     * openSocketChannel} method of the system-wide default {@link&#10;     * java.nio.channels.spi.SelectorProvider} object.  </p>&#10;     *&#10;     * @return  A new socket channel&#10;     *&#10;     * @throws  IOException&#10;     *          If an I/O error occurs&#10;     "
  ]
  node [
    id 1245
    label "public static SocketChannel open(SocketAddress remote) throws IOException"
    type "method"
    comment "&#10;     * Opens a socket channel and connects it to a remote address.&#10;     *&#10;     * <p> This convenience method works as if by invoking the {@link #open()}&#10;     * method, invoking the {@link #connect(SocketAddress) connect} method upon&#10;     * the resulting socket channel, passing it {@code remote}, and then&#10;     * returning that channel.  </p>&#10;     *&#10;     * @param  remote&#10;     *         The remote address to which the new channel is to be connected&#10;     *&#10;     * @return  A new, and connected, socket channel&#10;     *&#10;     * @throws  AsynchronousCloseException&#10;     *          If another thread closes this channel&#10;     *          while the connect operation is in progress&#10;     *&#10;     * @throws  ClosedByInterruptException&#10;     *          If another thread interrupts the current thread&#10;     *          while the connect operation is in progress, thereby&#10;     *          closing the channel and setting the current thread's&#10;     *          interrupt status&#10;     *&#10;     * @throws  UnresolvedAddressException&#10;     *          If the given remote address is not fully resolved&#10;     *&#10;     * @throws  UnsupportedAddressTypeException&#10;     *          If the type of the given remote address is not supported&#10;     *&#10;     * @throws  SecurityException&#10;     *          If a security manager has been installed&#10;     *          and it does not permit access to the given remote endpoint&#10;     *&#10;     * @throws  IOException&#10;     *          If some other I/O error occurs&#10;     "
  ]
  node [
    id 1246
    label "open()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1247
    label "connect(SocketAddress)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1248
    label "public final int validOps()"
    type "method"
    comment "&#10;     * Returns an operation set identifying this channel's supported&#10;     * operations.&#10;     *&#10;     * <p> Datagram channels support reading and writing, so this method&#10;     * returns {@code (}{@link SelectionKey#OP_READ} {@code |}&#38;nbsp;{@link&#10;     * SelectionKey#OP_WRITE}{@code )}.&#10;     *&#10;     * @return  The valid-operation set&#10;     "
  ]
  node [
    id 1249
    label "OP_READ"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1250
    label "java.nio.channels.SelectionKey"
    type "class"
    comment ""
  ]
  node [
    id 1251
    label "public abstract SelectableChannel channel()"
    type "method"
    comment "&#10;     * Returns the channel for which this key was created.  This method will&#10;     * continue to return the channel even after the key is cancelled.&#10;     *&#10;     * @return  This key's channel&#10;     "
  ]
  node [
    id 1252
    label "public abstract Selector selector()"
    type "method"
    comment "&#10;     * Returns the selector for which this key was created.  This method will&#10;     * continue to return the selector even after the key is cancelled.&#10;     *&#10;     * @return  This key's selector&#10;     "
  ]
  node [
    id 1253
    label "public abstract boolean isValid()"
    type "method"
    comment "&#10;     * Tells whether or not this lock is valid.&#10;     *&#10;     * <p> A lock object remains valid until it is released or the associated&#10;     * file channel is closed, whichever comes first.  </p>&#10;     *&#10;     * @return  {@code true} if, and only if, this lock is valid&#10;     "
  ]
  node [
    id 1254
    label "public abstract void cancel()"
    type "method"
    comment "&#10;     * Requests that the registration of this key's channel with its selector&#10;     * be cancelled.  Upon return the key will be invalid and will have been&#10;     * added to its selector's cancelled-key set.  The key will be removed from&#10;     * all of the selector's key sets during the next selection operation.&#10;     *&#10;     * <p> If this key has already been cancelled then invoking this method has&#10;     * no effect.  Once cancelled, a key remains forever invalid. </p>&#10;     *&#10;     * <p> This method may be invoked at any time.  It synchronizes on the&#10;     * selector's cancelled-key set, and therefore may block briefly if invoked&#10;     * concurrently with a cancellation or selection operation involving the&#10;     * same selector.  </p>&#10;     "
  ]
  node [
    id 1255
    label "public abstract int interestOps()"
    type "method"
    comment "&#10;     * Retrieves this key's interest set.&#10;     *&#10;     * <p> It is guaranteed that the returned set will only contain operation&#10;     * bits that are valid for this key's channel. </p>&#10;     *&#10;     * @return  This key's interest set&#10;     *&#10;     * @throws  CancelledKeyException&#10;     *          If this key has been cancelled&#10;     "
  ]
  node [
    id 1256
    label "public abstract SelectionKey interestOps(int ops)"
    type "method"
    comment "&#10;     * Sets this key's interest set to the given value.&#10;     *&#10;     * <p> This method may be invoked at any time.  If this method is invoked&#10;     * while a selection operation is in progress then it has no effect upon&#10;     * that operation; the change to the key's interest set will be seen by the&#10;     * next selection operation.&#10;     *&#10;     * @param  ops  The new interest set&#10;     *&#10;     * @return  This selection key&#10;     *&#10;     * @throws  IllegalArgumentException&#10;     *          If a bit in the set does not correspond to an operation that&#10;     *          is supported by this key's channel, that is, if&#10;     *          {@code (ops &#38; ~channel().validOps()) != 0}&#10;     *&#10;     * @throws  CancelledKeyException&#10;     *          If this key has been cancelled&#10;     "
  ]
  node [
    id 1257
    label "public int interestOpsOr(int ops)"
    type "method"
    comment "&#10;     * Atomically sets this key's interest set to the bitwise union (&#34;or&#34;) of&#10;     * the existing interest set and the given value. This method is guaranteed&#10;     * to be atomic with respect to other concurrent calls to this method or to&#10;     * {@link #interestOpsAnd(int)}.&#10;     *&#10;     * <p> This method may be invoked at any time.  If this method is invoked&#10;     * while a selection operation is in progress then it has no effect upon&#10;     * that operation; the change to the key's interest set will be seen by the&#10;     * next selection operation.&#10;     *&#10;     * @implSpec The default implementation synchronizes on this key and invokes&#10;     * {@code interestOps()} and {@code interestOps(int)} to retrieve and set&#10;     * this key's interest set.&#10;     *&#10;     * @param  ops  The interest set to apply&#10;     *&#10;     * @return  The previous interest set&#10;     *&#10;     * @throws  IllegalArgumentException&#10;     *          If a bit in the set does not correspond to an operation that&#10;     *          is supported by this key's channel, that is, if&#10;     *          {@code (ops &#38; ~channel().validOps()) != 0}&#10;     *&#10;     * @throws  CancelledKeyException&#10;     *          If this key has been cancelled&#10;     *&#10;     * @since 11&#10;     "
  ]
  node [
    id 1258
    label "interestOpsAnd(int)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1259
    label "public int interestOpsAnd(int ops)"
    type "method"
    comment "&#10;     * Atomically sets this key's interest set to the bitwise intersection (&#34;and&#34;)&#10;     * of the existing interest set and the given value. This method is guaranteed&#10;     * to be atomic with respect to other concurrent calls to this method or to&#10;     * {@link #interestOpsOr(int)}.&#10;     *&#10;     * <p> This method may be invoked at any time.  If this method is invoked&#10;     * while a selection operation is in progress then it has no effect upon&#10;     * that operation; the change to the key's interest set will be seen by the&#10;     * next selection operation.&#10;     *&#10;     * @apiNote Unlike the {@code interestOps(int)} and {@code interestOpsOr(int)}&#10;     * methods, this method does not throw {@code IllegalArgumentException} when&#10;     * invoked with bits in the interest set that do not correspond to an&#10;     * operation that is supported by this key's channel. This is to allow&#10;     * operation bits in the interest set to be cleared using bitwise complement&#10;     * values, e.g., {@code interestOpsAnd(~SelectionKey.OP_READ)} will remove&#10;     * the {@code OP_READ} from the interest set without affecting other bits.&#10;     *&#10;     * @implSpec The default implementation synchronizes on this key and invokes&#10;     * {@code interestOps()} and {@code interestOps(int)} to retrieve and set&#10;     * this key's interest set.&#10;     *&#10;     * @param  ops  The interest set to apply&#10;     *&#10;     * @return  The previous interest set&#10;     *&#10;     * @throws  CancelledKeyException&#10;     *          If this key has been cancelled&#10;     *&#10;     * @since 11&#10;     "
  ]
  node [
    id 1260
    label "interestOpsOr(int)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1261
    label "public abstract int readyOps()"
    type "method"
    comment "&#10;     * Retrieves this key's ready-operation set.&#10;     *&#10;     * <p> It is guaranteed that the returned set will only contain operation&#10;     * bits that are valid for this key's channel.  </p>&#10;     *&#10;     * @return  This key's ready-operation set&#10;     *&#10;     * @throws  CancelledKeyException&#10;     *          If this key has been cancelled&#10;     "
  ]
  node [
    id 1262
    label "public final boolean isReadable()"
    type "method"
    comment "&#10;     * Tests whether this key's channel is ready for reading.&#10;     *&#10;     * <p> An invocation of this method of the form {@code k.isReadable()}&#10;     * behaves in exactly the same way as the expression&#10;     *&#10;     * <blockquote><pre>{@code&#10;     * k.readyOps() &#38; OP_READ != 0&#10;     * }</pre></blockquote>&#10;     *&#10;     * <p> If this key's channel does not support read operations then this&#10;     * method always returns {@code false}.  </p>&#10;     *&#10;     * @return  {@code true} if, and only if,&#10;                {@code readyOps() &#38; OP_READ} is nonzero&#10;     *&#10;     * @throws  CancelledKeyException&#10;     *          If this key has been cancelled&#10;     "
  ]
  node [
    id 1263
    label "public final boolean isWritable()"
    type "method"
    comment "&#10;     * Tests whether this key's channel is ready for writing.&#10;     *&#10;     * <p> An invocation of this method of the form {@code k.isWritable()}&#10;     * behaves in exactly the same way as the expression&#10;     *&#10;     * <blockquote><pre>{@code&#10;     * k.readyOps() &#38; OP_WRITE != 0&#10;     * }</pre></blockquote>&#10;     *&#10;     * <p> If this key's channel does not support write operations then this&#10;     * method always returns {@code false}.  </p>&#10;     *&#10;     * @return  {@code true} if, and only if,&#10;     *          {@code readyOps() &#38; OP_WRITE} is nonzero&#10;     *&#10;     * @throws  CancelledKeyException&#10;     *          If this key has been cancelled&#10;     "
  ]
  node [
    id 1264
    label "public final boolean isConnectable()"
    type "method"
    comment "&#10;     * Tests whether this key's channel has either finished, or failed to&#10;     * finish, its socket-connection operation.&#10;     *&#10;     * <p> An invocation of this method of the form {@code k.isConnectable()}&#10;     * behaves in exactly the same way as the expression&#10;     *&#10;     * <blockquote><pre>{@code&#10;     * k.readyOps() &#38; OP_CONNECT != 0&#10;     * }</pre></blockquote>&#10;     *&#10;     * <p> If this key's channel does not support socket-connect operations&#10;     * then this method always returns {@code false}.  </p>&#10;     *&#10;     * @return  {@code true} if, and only if,&#10;     *          {@code readyOps() &#38; OP_CONNECT} is nonzero&#10;     *&#10;     * @throws  CancelledKeyException&#10;     *          If this key has been cancelled&#10;     "
  ]
  node [
    id 1265
    label "public final boolean isAcceptable()"
    type "method"
    comment "&#10;     * Tests whether this key's channel is ready to accept a new socket&#10;     * connection.&#10;     *&#10;     * <p> An invocation of this method of the form {@code k.isAcceptable()}&#10;     * behaves in exactly the same way as the expression&#10;     *&#10;     * <blockquote><pre>{@code&#10;     * k.readyOps() &#38; OP_ACCEPT != 0&#10;     * }</pre></blockquote>&#10;     *&#10;     * <p> If this key's channel does not support socket-accept operations then&#10;     * this method always returns {@code false}.  </p>&#10;     *&#10;     * @return  {@code true} if, and only if,&#10;     *          {@code readyOps() &#38; OP_ACCEPT} is nonzero&#10;     *&#10;     * @throws  CancelledKeyException&#10;     *          If this key has been cancelled&#10;     "
  ]
  node [
    id 1266
    label "public final Object attach(Object ob)"
    type "method"
    comment "&#10;     * Attaches the given object to this key.&#10;     *&#10;     * <p> An attached object may later be retrieved via the {@link #attachment()&#10;     * attachment} method.  Only one object may be attached at a time; invoking&#10;     * this method causes any previous attachment to be discarded.  The current&#10;     * attachment may be discarded by attaching {@code null}.  </p>&#10;     *&#10;     * @param  ob&#10;     *         The object to be attached; may be {@code null}&#10;     *&#10;     * @return  The previously-attached object, if any,&#10;     *          otherwise {@code null}&#10;     "
  ]
  node [
    id 1267
    label "attachment()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1268
    label "public final Object attachment()"
    type "method"
    comment "&#10;     * Retrieves the current attachment.&#10;     *&#10;     * @return  The object currently attached to this key,&#10;     *          or {@code null} if there is no attachment&#10;     "
  ]
  node [
    id 1269
    label "public abstract SocketChannel bind(SocketAddress local) throws IOException"
    type "method"
    comment "&#10;     * @throws  ConnectionPendingException&#10;     *          If a non-blocking connect operation is already in progress on&#10;     *          this channel&#10;     * @throws  AlreadyBoundException               {@inheritDoc}&#10;     * @throws  UnsupportedAddressTypeException     {@inheritDoc}&#10;     * @throws  ClosedChannelException              {@inheritDoc}&#10;     * @throws  IOException                         {@inheritDoc}&#10;     * @throws  SecurityException&#10;     *          If a security manager has been installed and its&#10;     *          {@link SecurityManager#checkListen checkListen} method denies&#10;     *          the operation&#10;     *&#10;     * @since 1.7&#10;     "
  ]
  node [
    id 1270
    label "checkListen"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1271
    label "public abstract SocketChannel setOption(SocketOption<T> name, T value) throws IOException"
    type "method"
    comment "&#10;     * @throws  UnsupportedOperationException           {@inheritDoc}&#10;     * @throws  IllegalArgumentException                {@inheritDoc}&#10;     * @throws  ClosedChannelException                  {@inheritDoc}&#10;     * @throws  IOException                             {@inheritDoc}&#10;     *&#10;     * @since 1.7&#10;     "
  ]
  node [
    id 1272
    label "public abstract SocketChannel shutdownInput() throws IOException"
    type "method"
    comment "&#10;     * Shutdown the connection for reading without closing the channel.&#10;     *&#10;     * <p> Once shutdown for reading then further reads on the channel will&#10;     * return {@code -1}, the end-of-stream indication. If the input side of the&#10;     * connection is already shutdown then invoking this method has no effect.&#10;     *&#10;     * @return  The channel&#10;     *&#10;     * @throws  NotYetConnectedException&#10;     *          If this channel is not yet connected&#10;     * @throws  ClosedChannelException&#10;     *          If this channel is closed&#10;     * @throws  IOException&#10;     *          If some other I/O error occurs&#10;     *&#10;     * @since 1.7&#10;     "
  ]
  node [
    id 1273
    label "public abstract SocketChannel shutdownOutput() throws IOException"
    type "method"
    comment "&#10;     * Shutdown the connection for writing without closing the channel.&#10;     *&#10;     * <p> Once shutdown for writing then further attempts to write to the&#10;     * channel will throw {@link ClosedChannelException}. If the output side of&#10;     * the connection is already shutdown then invoking this method has no&#10;     * effect.&#10;     *&#10;     * @return  The channel&#10;     *&#10;     * @throws  NotYetConnectedException&#10;     *          If this channel is not yet connected&#10;     * @throws  ClosedChannelException&#10;     *          If this channel is closed&#10;     * @throws  IOException&#10;     *          If some other I/O error occurs&#10;     *&#10;     * @since 1.7&#10;     "
  ]
  node [
    id 1274
    label "java.nio.channels.ClosedChannelException"
    type "class"
    comment ""
  ]
  node [
    id 1275
    label "public abstract Socket socket()"
    type "method"
    comment "&#10;     * Retrieves a socket associated with this channel.&#10;     *&#10;     * <p> The returned object will not declare any public methods that are not&#10;     * declared in the {@link java.net.Socket} class.  </p>&#10;     *&#10;     * @return  A socket associated with this channel&#10;     "
  ]
  node [
    id 1276
    label "java.net.Socket"
    type "class"
    comment "&#10; * This class implements client sockets (also called just&#10; * &#34;sockets&#34;). A socket is an endpoint for communication&#10; * between two machines.&#10; * <p>&#10; * The actual work of the socket is performed by an instance of the&#10; * {@code SocketImpl} class. An application, by changing&#10; * the socket factory that creates the socket implementation,&#10; * can configure itself to create sockets appropriate to the local&#10; * firewall.&#10; *&#10; * @author  unascribed&#10; * @see     java.net.Socket#setSocketImplFactory(java.net.SocketImplFactory)&#10; * @see     java.net.SocketImpl&#10; * @see     java.nio.channels.SocketChannel&#10; * @since   1.0&#10; "
  ]
  node [
    id 1277
    label "private static InetAddress[] nonNullAddress(InetAddress address)"
    type "method"
    comment " BEGIN Android-changed: App compat. Socket ctor should try all addresses. http://b/30007735"
  ]
  node [
    id 1278
    label " void createImpl(boolean stream) throws SocketException"
    type "method"
    comment "&#10;     * Creates the socket implementation.&#10;     *&#10;     * @param stream a {@code boolean} value : {@code true} for a TCP socket,&#10;     *               {@code false} for UDP.&#10;     * @throws IOException if creation fails&#10;     * @since 1.4&#10;     "
  ]
  node [
    id 1279
    label " void setImpl()"
    type "method"
    comment "&#10;     * Sets impl to the system-default type of SocketImpl.&#10;     * @since 1.4&#10;     "
  ]
  node [
    id 1280
    label " SocketImpl getImpl() throws SocketException"
    type "method"
    comment "&#10;     * Get the {@code SocketImpl} attached to this socket, creating&#10;     * it if necessary.&#10;     *&#10;     * @return  the {@code SocketImpl} attached to that ServerSocket.&#10;     * @throws SocketException if creation fails&#10;     * @since 1.4&#10;     "
  ]
  node [
    id 1281
    label "public void connect(SocketAddress endpoint) throws IOException"
    type "method"
    comment "&#10;     * Connects this socket to the server.&#10;     *&#10;     * @param   endpoint the {@code SocketAddress}&#10;     * @throws  IOException if an error occurs during the connection&#10;     * @throws  java.nio.channels.IllegalBlockingModeException&#10;     *          if this socket has an associated channel,&#10;     *          and the channel is in non-blocking mode&#10;     * @throws  IllegalArgumentException if endpoint is null or is a&#10;     *          SocketAddress subclass not supported by this socket&#10;     * @since 1.4&#10;     * @spec JSR-51&#10;     "
  ]
  node [
    id 1282
    label "public void connect(SocketAddress endpoint, int timeout) throws IOException"
    type "method"
    comment "&#10;     * Connects this socket to the server with a specified timeout value.&#10;     * A timeout of zero is interpreted as an infinite timeout. The connection&#10;     * will then block until established or an error occurs.&#10;     *&#10;     * @param   endpoint the {@code SocketAddress}&#10;     * @param   timeout  the timeout value to be used in milliseconds.&#10;     * @throws  IOException if an error occurs during the connection&#10;     * @throws  SocketTimeoutException if timeout expires before connecting&#10;     * @throws  java.nio.channels.IllegalBlockingModeException&#10;     *          if this socket has an associated channel,&#10;     *          and the channel is in non-blocking mode&#10;     * @throws  IllegalArgumentException if endpoint is null or is a&#10;     *          SocketAddress subclass not supported by this socket&#10;     * @since 1.4&#10;     * @spec JSR-51&#10;     "
  ]
  node [
    id 1283
    label "public void bind(SocketAddress bindpoint) throws IOException"
    type "method"
    comment "&#10;     * Binds the socket to a local address.&#10;     * <P>&#10;     * If the address is {@code null}, then the system will pick up&#10;     * an ephemeral port and a valid local address to bind the socket.&#10;     *&#10;     * @param   bindpoint the {@code SocketAddress} to bind to&#10;     * @throws  IOException if the bind operation fails, or if the socket&#10;     *                     is already bound.&#10;     * @throws  IllegalArgumentException if bindpoint is a&#10;     *          SocketAddress subclass not supported by this socket&#10;     * @throws  SecurityException  if a security manager exists and its&#10;     *          {@code checkListen} method doesn't allow the bind&#10;     *          to the local port.&#10;     *&#10;     * @since   1.4&#10;     * @see #isBound&#10;     "
  ]
  node [
    id 1284
    label " final void postAccept()"
    type "method"
    comment "&#10;     * set the flags after an accept() call.&#10;     "
  ]
  node [
    id 1285
    label "public InetAddress getInetAddress()"
    type "method"
    comment "&#10;     * Returns the address to which this socket is connected. Returns&#10;     * {@code null} if the socket is not connected.&#10;     * <p>&#10;     * If the socket was connected prior to being {@link #close closed},&#10;     * then this method will continue to return the connected address&#10;     * after the socket is closed.&#10;     *&#10;     * @return the address to which this socket is connected.&#10;     "
  ]
  node [
    id 1286
    label "close"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1287
    label "public InetAddress getLocalAddress()"
    type "method"
    comment "&#10;     * Gets the local address to which the socket is bound.&#10;     *&#10;     * <p>If there is a security manager, its&#10;     * {@code checkConnect} method is first called&#10;     * with the host address and {@code -1}&#10;     * as its arguments to see if the operation is allowed.&#10;     *&#10;     * @see SecurityManager#checkConnect&#10;     * @return  the local address to which the socket is bound,&#10;     *          {@code null} if the socket is closed, or&#10;     *          an {@code InetAddress} representing&#10;     *          {@link InetAddress#isAnyLocalAddress wildcard}&#10;     *          address if either the socket is not bound, or&#10;     *          the security manager {@code checkConnect}&#10;     *          method does not allow the operation&#10;     * @since   1.1&#10;     "
  ]
  node [
    id 1288
    label "getLoopbackAddress"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1289
    label "java.net.InetAddress"
    type "class"
    comment "&#10; * This class represents an Internet Protocol (IP) address.&#10; *&#10; * <p> An IP address is either a 32-bit or 128-bit unsigned number&#10; * used by IP, a lower-level protocol on which protocols like UDP and&#10; * TCP are built. The IP address architecture is defined by <a&#10; * href=&#34;http://www.ietf.org/rfc/rfc790.txt&#34;><i>RFC&#38;nbsp;790:&#10; * Assigned Numbers</i></a>, <a&#10; * href=&#34;http://www.ietf.org/rfc/rfc1918.txt&#34;> <i>RFC&#38;nbsp;1918:&#10; * Address Allocation for Private Internets</i></a>, <a&#10; * href=&#34;http://www.ietf.org/rfc/rfc2365.txt&#34;><i>RFC&#38;nbsp;2365:&#10; * Administratively Scoped IP Multicast</i></a>, and <a&#10; * href=&#34;http://www.ietf.org/rfc/rfc2373.txt&#34;><i>RFC&#38;nbsp;2373: IP&#10; * Version 6 Addressing Architecture</i></a>. An instance of an&#10; * InetAddress consists of an IP address and possibly its&#10; * corresponding host name (depending on whether it is constructed&#10; * with a host name or whether it has already done reverse host name&#10; * resolution).&#10; *&#10; * <h3> Address types </h3>&#10; *&#10; * <blockquote><table cellspacing=2 summary=&#34;Description of unicast and multicast address types&#34;>&#10; *   <tr><th valign=top><i>unicast</i></th>&#10; *       <td>An identifier for a single interface. A packet sent to&#10; *         a unicast address is delivered to the interface identified by&#10; *         that address.&#10; *&#10; *         <p> The Unspecified Address -- Also called anylocal or wildcard&#10; *         address. It must never be assigned to any node. It indicates the&#10; *         absence of an address. One example of its use is as the target of&#10; *         bind, which allows a server to accept a client connection on any&#10; *         interface, in case the server host has multiple interfaces.&#10; *&#10; *         <p> The <i>unspecified</i> address must not be used as&#10; *         the destination address of an IP packet.&#10; *&#10; *         <p> The <i>Loopback</i> Addresses -- This is the address&#10; *         assigned to the loopback interface. Anything sent to this&#10; *         IP address loops around and becomes IP input on the local&#10; *         host. This address is often used when testing a&#10; *         client.</td></tr>&#10; *   <tr><th valign=top><i>multicast</i></th>&#10; *       <td>An identifier for a set of interfaces (typically belonging&#10; *         to different nodes). A packet sent to a multicast address is&#10; *         delivered to all interfaces identified by that address.</td></tr>&#10; * </table></blockquote>&#10; *&#10; * <h4> IP address scope </h4>&#10; *&#10; * <p> <i>Link-local</i> addresses are designed to be used for addressing&#10; * on a single link for purposes such as auto-address configuration,&#10; * neighbor discovery, or when no routers are present.&#10; *&#10; * <p> <i>Site-local</i> addresses are designed to be used for addressing&#10; * inside of a site without the need for a global prefix.&#10; *&#10; * <p> <i>Global</i> addresses are unique across the internet.&#10; *&#10; * <h4> Textual representation of IP addresses </h4>&#10; *&#10; * The textual representation of an IP address is address family specific.&#10; *&#10; * <p>&#10; *&#10; * For IPv4 address format, please refer to <A&#10; * HREF=&#34;Inet4Address.html#format&#34;>Inet4Address#format</A>; For IPv6&#10; * address format, please refer to <A&#10; * HREF=&#34;Inet6Address.html#format&#34;>Inet6Address#format</A>.&#10; *&#10; * <P>There is a <a href=&#34;doc-files/net-properties.html#Ipv4IPv6&#34;>couple of&#10; * System Properties</a> affecting how IPv4 and IPv6 addresses are used.</P>&#10; *&#10; * <h4> Host Name Resolution </h4>&#10; *&#10; * Host name-to-IP address <i>resolution</i> is accomplished through&#10; * the use of a combination of local machine configuration information&#10; * and network naming services such as the Domain Name System (DNS)&#10; * and Network Information Service(NIS). The particular naming&#10; * services(s) being used is by default the local machine configured&#10; * one. For any host name, its corresponding IP address is returned.&#10; *&#10; * <p> <i>Reverse name resolution</i> means that for any IP address,&#10; * the host associated with the IP address is returned.&#10; *&#10; * <p> The InetAddress class provides methods to resolve host names to&#10; * their IP addresses and vice versa.&#10; *&#10; * <h4> InetAddress Caching </h4>&#10; *&#10; * The InetAddress class has a cache to store successful as well as&#10; * unsuccessful host name resolutions.&#10; *&#10; * <p> By default, when a security manager is installed, in order to&#10; * protect against DNS spoofing attacks,&#10; * the result of positive host name resolutions are&#10; * cached forever. When a security manager is not installed, the default&#10; * behavior is to cache entries for a finite (implementation dependent)&#10; * period of time. The result of unsuccessful host&#10; * name resolution is cached for a very short period of time (10&#10; * seconds) to improve performance.&#10; *&#10; * <p> If the default behavior is not desired, then a Java security property&#10; * can be set to a different Time-to-live (TTL) value for positive&#10; * caching. Likewise, a system admin can configure a different&#10; * negative caching TTL value when needed.&#10; *&#10; * <p> Two Java security properties control the TTL values used for&#10; *  positive and negative host name resolution caching:&#10; *&#10; * <blockquote>&#10; * <dl>&#10; * <dt><b>networkaddress.cache.ttl</b></dt>&#10; * <dd>Indicates the caching policy for successful name lookups from&#10; * the name service. The value is specified as as integer to indicate&#10; * the number of seconds to cache the successful lookup. The default&#10; * setting is to cache for an implementation specific period of time.&#10; * <p>&#10; * A value of -1 indicates &#34;cache forever&#34;.&#10; * </dd>&#10; * <dt><b>networkaddress.cache.negative.ttl</b> (default: 10)</dt>&#10; * <dd>Indicates the caching policy for un-successful name lookups&#10; * from the name service. The value is specified as as integer to&#10; * indicate the number of seconds to cache the failure for&#10; * un-successful lookups.&#10; * <p>&#10; * A value of 0 indicates &#34;never cache&#34;.&#10; * A value of -1 indicates &#34;cache forever&#34;.&#10; * </dd>&#10; * </dl>&#10; * </blockquote>&#10; *&#10; * @author  Chris Warth&#10; * @see     java.net.InetAddress#getByAddress(byte[])&#10; * @see     java.net.InetAddress#getByAddress(java.lang.String, byte[])&#10; * @see     java.net.InetAddress#getAllByName(java.lang.String)&#10; * @see     java.net.InetAddress#getByName(java.lang.String)&#10; * @see     java.net.InetAddress#getLocalHost()&#10; * @since JDK1.0&#10; "
  ]
  node [
    id 1290
    label "private Object readResolve() throws ObjectStreamException"
    type "method"
    comment "&#10;     * Replaces the de-serialized object with an Inet4Address object.&#10;     *&#10;     * @return the alternate object to the de-serialized object.&#10;     *&#10;     * @throws ObjectStreamException if a new object replacing this&#10;     * object could not be created&#10;     "
  ]
  node [
    id 1291
    label "public boolean isMulticastAddress()"
    type "method"
    comment "&#10;     * Utility routine to check if the InetAddress is an&#10;     * IP multicast address.&#10;     * @return a {@code boolean} indicating if the InetAddress is&#10;     * an IP multicast address&#10;     * @since   JDK1.1&#10;     "
  ]
  node [
    id 1292
    label "public boolean isAnyLocalAddress()"
    type "method"
    comment "&#10;     * Utility routine to check if the InetAddress in a wildcard address.&#10;     * @return a {@code boolean} indicating if the Inetaddress is&#10;     *         a wildcard address.&#10;     * @since 1.4&#10;     "
  ]
  node [
    id 1293
    label "public boolean isLoopbackAddress()"
    type "method"
    comment "&#10;     * Utility routine to check if the InetAddress is a loopback address.&#10;     *&#10;     * @return a {@code boolean} indicating if the InetAddress is&#10;     * a loopback address; or false otherwise.&#10;     * @since 1.4&#10;     "
  ]
  node [
    id 1294
    label "public boolean isLinkLocalAddress()"
    type "method"
    comment "&#10;     * Utility routine to check if the InetAddress is an link local address.&#10;     *&#10;     * @return a {@code boolean} indicating if the InetAddress is&#10;     * a link local address; or false if address is not a link local unicast address.&#10;     * @since 1.4&#10;     "
  ]
  node [
    id 1295
    label "public boolean isSiteLocalAddress()"
    type "method"
    comment "&#10;     * Utility routine to check if the InetAddress is a site local address.&#10;     *&#10;     * @return a {@code boolean} indicating if the InetAddress is&#10;     * a site local address; or false if address is not a site local unicast address.&#10;     * @since 1.4&#10;     "
  ]
  node [
    id 1296
    label "public boolean isMCGlobal()"
    type "method"
    comment "&#10;     * Utility routine to check if the multicast address has global scope.&#10;     *&#10;     * @return a {@code boolean} indicating if the address has&#10;     *         is a multicast address of global scope, false if it is not&#10;     *         of global scope or it is not a multicast address&#10;     * @since 1.4&#10;     "
  ]
  node [
    id 1297
    label "public boolean isMCNodeLocal()"
    type "method"
    comment "&#10;     * Utility routine to check if the multicast address has node scope.&#10;     *&#10;     * @return a {@code boolean} indicating if the address has&#10;     *         is a multicast address of node-local scope, false if it is not&#10;     *         of node-local scope or it is not a multicast address&#10;     * @since 1.4&#10;     "
  ]
  node [
    id 1298
    label "public boolean isMCLinkLocal()"
    type "method"
    comment "&#10;     * Utility routine to check if the multicast address has link scope.&#10;     *&#10;     * @return a {@code boolean} indicating if the address has&#10;     *         is a multicast address of link-local scope, false if it is not&#10;     *         of link-local scope or it is not a multicast address&#10;     * @since 1.4&#10;     "
  ]
  node [
    id 1299
    label "public boolean isMCSiteLocal()"
    type "method"
    comment "&#10;     * Utility routine to check if the multicast address has site scope.&#10;     *&#10;     * @return a {@code boolean} indicating if the address has&#10;     *         is a multicast address of site-local scope, false if it is not&#10;     *         of site-local scope or it is not a multicast address&#10;     * @since 1.4&#10;     "
  ]
  node [
    id 1300
    label "public boolean isMCOrgLocal()"
    type "method"
    comment "&#10;     * Utility routine to check if the multicast address has organization scope.&#10;     *&#10;     * @return a {@code boolean} indicating if the address has&#10;     *         is a multicast address of organization-local scope,&#10;     *         false if it is not of organization-local scope&#10;     *         or it is not a multicast address&#10;     * @since 1.4&#10;     "
  ]
  node [
    id 1301
    label "public boolean isReachable(int timeout) throws IOException"
    type "method"
    comment "&#10;     * Test whether that address is reachable. Best effort is made by the&#10;     * implementation to try to reach the host, but firewalls and server&#10;     * configuration may block requests resulting in a unreachable status&#10;     * while some specific ports may be accessible.&#10;     * <p>&#10;     * Android implementation attempts ICMP ECHO REQUESTs first, on failure it&#10;     * will fall back to TCP ECHO REQUESTs. Success on either protocol will&#10;     * return true.&#10;     * <p>&#10;     * The timeout value, in milliseconds, indicates the maximum amount of time&#10;     * the try should take. If the operation times out before getting an&#10;     * answer, the host is deemed unreachable. A negative value will result&#10;     * in an IllegalArgumentException being thrown.&#10;     *&#10;     * @param   timeout the time, in milliseconds, before the call aborts&#10;     * @return a {@code boolean} indicating if the address is reachable.&#10;     * @throws IOException if a network error occurs&#10;     * @throws  IllegalArgumentException if {@code timeout} is negative.&#10;     * @since 1.5&#10;     "
  ]
  node [
    id 1302
    label "public boolean isReachable(NetworkInterface netif, int ttl, int timeout) throws IOException"
    type "method"
    comment "&#10;     * Test whether that address is reachable. Best effort is made by the&#10;     * implementation to try to reach the host, but firewalls and server&#10;     * configuration may block requests resulting in a unreachable status&#10;     * while some specific ports may be accessible.&#10;     * <p>&#10;     * Android implementation attempts ICMP ECHO REQUESTs first, on failure it&#10;     * will fall back to TCP ECHO REQUESTs. Success on either protocol will&#10;     * return true.&#10;     * <p>&#10;     * The {@code network interface} and {@code ttl} parameters&#10;     * let the caller specify which network interface the test will go through&#10;     * and the maximum number of hops the packets should go through.&#10;     * A negative value for the {@code ttl} will result in an&#10;     * IllegalArgumentException being thrown.&#10;     * <p>&#10;     * The timeout value, in milliseconds, indicates the maximum amount of time&#10;     * the try should take. If the operation times out before getting an&#10;     * answer, the host is deemed unreachable. A negative value will result&#10;     * in an IllegalArgumentException being thrown.&#10;     *&#10;     * @param   netif   the NetworkInterface through which the&#10;     *                    test will be done, or null for any interface&#10;     * @param   ttl     the maximum numbers of hops to try or 0 for the&#10;     *                  default&#10;     * @param   timeout the time, in milliseconds, before the call aborts&#10;     * @throws  IllegalArgumentException if either {@code timeout}&#10;     *                          or {@code ttl} are negative.&#10;     * @return a {@code boolean}indicating if the address is reachable.&#10;     * @throws IOException if a network error occurs&#10;     * @since 1.5&#10;     "
  ]
  node [
    id 1303
    label "public String getHostName()"
    type "method"
    comment "&#10;     * Gets the host name for this IP address.&#10;     *&#10;     * <p>If this InetAddress was created with a host name,&#10;     * this host name will be remembered and returned;&#10;     * otherwise, a reverse name lookup will be performed&#10;     * and the result will be returned based on the system&#10;     * configured name lookup service. If a lookup of the name service&#10;     * is required, call&#10;     * {@link #getCanonicalHostName() getCanonicalHostName}.&#10;     *&#10;     * <p>If there is a security manager, its&#10;     * {@code checkConnect} method is first called&#10;     * with the hostname and {@code -1}&#10;     * as its arguments to see if the operation is allowed.&#10;     * If the operation is not allowed, it will return&#10;     * the textual representation of the IP address.&#10;     *&#10;     * @return  the host name for this IP address, or if the operation&#10;     *    is not allowed by the security check, the textual&#10;     *    representation of the IP address.&#10;     *&#10;     * @see InetAddress#getCanonicalHostName&#10;     * @see SecurityManager#checkConnect&#10;     "
  ]
  node [
    id 1304
    label "getCanonicalHostName()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1305
    label "public String getCanonicalHostName()"
    type "method"
    comment "&#10;     * Gets the fully qualified domain name for this IP address.&#10;     * Best effort method, meaning we may not be able to return&#10;     * the FQDN depending on the underlying system configuration.&#10;     *&#10;     * <p>If there is a security manager, this method first&#10;     * calls its {@code checkConnect} method&#10;     * with the hostname and {@code -1}&#10;     * as its arguments to see if the calling code is allowed to know&#10;     * the hostname for this IP address, i.e., to connect to the host.&#10;     * If the operation is not allowed, it will return&#10;     * the textual representation of the IP address.&#10;     *&#10;     * @return  the fully qualified domain name for this IP address,&#10;     *    or if the operation is not allowed by the security check,&#10;     *    the textual representation of the IP address.&#10;     *&#10;     * @see SecurityManager#checkConnect&#10;     *&#10;     * @since 1.4&#10;     "
  ]
  node [
    id 1306
    label "private static String getHostFromNameService(InetAddress addr)"
    type "method"
    comment "&#10;     * Returns the hostname for this address.&#10;     *&#10;     * <p>If there is a security manager, this method first&#10;     * calls its {@code checkConnect} method&#10;     * with the hostname and {@code -1}&#10;     * as its arguments to see if the calling code is allowed to know&#10;     * the hostname for this IP address, i.e., to connect to the host.&#10;     * If the operation is not allowed, it will return&#10;     * the textual representation of the IP address.&#10;     *&#10;     * @return  the host name for this IP address, or if the operation&#10;     *    is not allowed by the security check, the textual&#10;     *    representation of the IP address.&#10;     *&#10;     * @see SecurityManager#checkConnect&#10;     "
  ]
  node [
    id 1307
    label "public byte[] getAddress()"
    type "method"
    comment "&#10;     * Returns the raw IP address of this {@code InetAddress}&#10;     * object. The result is in network byte order: the highest order&#10;     * byte of the address is in {@code getAddress()[0]}.&#10;     *&#10;     * @return  the raw IP address of this object.&#10;     "
  ]
  node [
    id 1308
    label "public String getHostAddress()"
    type "method"
    comment "&#10;     * Returns the IP address string in textual presentation.&#10;     *&#10;     * @return  the raw IP address in a string format.&#10;     * @since   JDK1.0.2&#10;     "
  ]
  node [
    id 1309
    label "public static InetAddress getByAddress(String host, byte[] addr) throws UnknownHostException"
    type "method"
    comment "&#10;     * Creates an InetAddress based on the provided host name and IP address.&#10;     * No name service is checked for the validity of the address.&#10;     *&#10;     * <p> The host name can either be a machine name, such as&#10;     * &#34;{@code java.sun.com}&#34;, or a textual representation of its IP&#10;     * address.&#10;     * <p> No validity checking is done on the host name either.&#10;     *&#10;     * <p> If addr specifies an IPv4 address an instance of Inet4Address&#10;     * will be returned; otherwise, an instance of Inet6Address&#10;     * will be returned.&#10;     *&#10;     * <p> IPv4 address byte array must be 4 bytes long and IPv6 byte array&#10;     * must be 16 bytes long&#10;     *&#10;     * @param host the specified host&#10;     * @param addr the raw IP address in network byte order&#10;     * @return  an InetAddress object created from the raw IP address.&#10;     * @exception  UnknownHostException  if IP address is of illegal length&#10;     * @since 1.4&#10;     "
  ]
  node [
    id 1310
    label "private static InetAddress getByAddress(String host, byte[] addr, int scopeId) throws UnknownHostException"
    type "method"
    comment " Do not delete. Called from native code."
  ]
  node [
    id 1311
    label "public static InetAddress getByName(String host) throws UnknownHostException"
    type "method"
    comment "&#10;     * Determines the IP address of a host, given the host's name.&#10;     *&#10;     * <p> The host name can either be a machine name, such as&#10;     * &#34;{@code java.sun.com}&#34;, or a textual representation of its&#10;     * IP address. If a literal IP address is supplied, only the&#10;     * validity of the address format is checked.&#10;     *&#10;     * <p> For {@code host} specified in literal IPv6 address,&#10;     * either the form defined in RFC 2732 or the literal IPv6 address&#10;     * format defined in RFC 2373 is accepted. IPv6 scoped addresses are also&#10;     * supported. See <a href=&#34;Inet6Address.html#scoped&#34;>here</a> for a description of IPv6&#10;     * scoped addresses.&#10;     *&#10;     * <p> If the host is {@code null} then an {@code InetAddress}&#10;     * representing an address of the loopback interface is returned.&#10;     * See <a href=&#34;http://www.ietf.org/rfc/rfc3330.txt&#34;>RFC&#38;nbsp;3330</a>&#10;     * section&#38;nbsp;2 and <a href=&#34;http://www.ietf.org/rfc/rfc2373.txt&#34;>RFC&#38;nbsp;2373</a>&#10;     * section&#38;nbsp;2.5.3. </p>&#10;     *&#10;     * @param      host   the specified host, or {@code null}.&#10;     * @return     an IP address for the given host name.&#10;     * @exception  UnknownHostException  if no IP address for the&#10;     *               {@code host} could be found, or if a scope_id was specified&#10;     *               for a global IPv6 address.&#10;     * @exception  SecurityException if a security manager exists&#10;     *             and its checkConnect method doesn't allow the operation&#10;     "
  ]
  node [
    id 1312
    label "public static InetAddress[] getAllByName(String host) throws UnknownHostException"
    type "method"
    comment "&#10;     * Given the name of a host, returns an array of its IP addresses,&#10;     * based on the configured name service on the system.&#10;     *&#10;     * <p> The host name can either be a machine name, such as&#10;     * &#34;{@code java.sun.com}&#34;, or a textual representation of its IP&#10;     * address. If a literal IP address is supplied, only the&#10;     * validity of the address format is checked.&#10;     *&#10;     * <p> For {@code host} specified in <i>literal IPv6 address</i>,&#10;     * either the form defined in RFC 2732 or the literal IPv6 address&#10;     * format defined in RFC 2373 is accepted. A literal IPv6 address may&#10;     * also be qualified by appending a scoped zone identifier or scope_id.&#10;     * The syntax and usage of scope_ids is described&#10;     * <a href=&#34;Inet6Address.html#scoped&#34;>here</a>.&#10;     * <p> If the host is {@code null} then an {@code InetAddress}&#10;     * representing an address of the loopback interface is returned.&#10;     * See <a href=&#34;http://www.ietf.org/rfc/rfc3330.txt&#34;>RFC&#38;nbsp;3330</a>&#10;     * section&#38;nbsp;2 and <a href=&#34;http://www.ietf.org/rfc/rfc2373.txt&#34;>RFC&#38;nbsp;2373</a>&#10;     * section&#38;nbsp;2.5.3. </p>&#10;     *&#10;     * <p> If there is a security manager and {@code host} is not&#10;     * null and {@code host.length() } is not equal to zero, the&#10;     * security manager's&#10;     * {@code checkConnect} method is called&#10;     * with the hostname and {@code -1}&#10;     * as its arguments to see if the operation is allowed.&#10;     *&#10;     * @param      host   the name of the host, or {@code null}.&#10;     * @return     an array of all the IP addresses for a given host name.&#10;     *&#10;     * @exception  UnknownHostException  if no IP address for the&#10;     *               {@code host} could be found, or if a scope_id was specified&#10;     *               for a global IPv6 address.&#10;     * @exception  SecurityException  if a security manager exists and its&#10;     *               {@code checkConnect} method doesn't allow the operation.&#10;     *&#10;     * @see SecurityManager#checkConnect&#10;     "
  ]
  node [
    id 1313
    label "public static InetAddress getLoopbackAddress()"
    type "method"
    comment "&#10;     * Returns the loopback address.&#10;     * <p>&#10;     * The InetAddress returned will represent the IPv4&#10;     * loopback address, 127.0.0.1, or the IPv6 loopback&#10;     * address, ::1. The IPv4 loopback address returned&#10;     * is only one of many in the form 127.*.*.*&#10;     *&#10;     * @return  the InetAddress loopback instance.&#10;     * @since 1.7&#10;     "
  ]
  node [
    id 1314
    label "public static InetAddress getByAddress(byte[] addr) throws UnknownHostException"
    type "method"
    comment "&#10;     * Returns an {@code InetAddress} object given the raw IP address .&#10;     * The argument is in network byte order: the highest order&#10;     * byte of the address is in {@code getAddress()[0]}.&#10;     *&#10;     * <p> This method doesn't block, i.e. no reverse name service lookup&#10;     * is performed.&#10;     *&#10;     * <p> IPv4 address byte array must be 4 bytes long and IPv6 byte array&#10;     * must be 16 bytes long&#10;     *&#10;     * @param addr the raw IP address in network byte order&#10;     * @return  an InetAddress object created from the raw IP address.&#10;     * @exception  UnknownHostException  if IP address is of illegal length&#10;     * @since 1.4&#10;     "
  ]
  node [
    id 1315
    label "public static InetAddress getLocalHost() throws UnknownHostException"
    type "method"
    comment "&#10;     * Returns the address of the local host. This is achieved by retrieving&#10;     * the name of the host from the system, then resolving that name into&#10;     * an {@code InetAddress}.&#10;     *&#10;     * <P>Note: The resolved address may be cached for a short period of time.&#10;     * </P>&#10;     *&#10;     * <p>If there is a security manager, its&#10;     * {@code checkConnect} method is called&#10;     * with the local host name and {@code -1}&#10;     * as its arguments to see if the operation is allowed.&#10;     * If the operation is not allowed, an InetAddress representing&#10;     * the loopback address is returned.&#10;     *&#10;     * @return     the address of the local host.&#10;     *&#10;     * @exception  UnknownHostException  if the local host name could not&#10;     *             be resolved into an address.&#10;     *&#10;     * @see SecurityManager#checkConnect&#10;     * @see java.net.InetAddress#getByName(java.lang.String)&#10;     "
  ]
  node [
    id 1316
    label " static InetAddress anyLocalAddress()"
    type "method"
    comment "&#10;     * Returns the InetAddress representing anyLocalAddress&#10;     * (typically 0.0.0.0 or ::0)&#10;     "
  ]
  node [
    id 1317
    label "public int getPort()"
    type "method"
    comment "&#10;     * Returns the port number of this URI.&#10;     *&#10;     * <p> The port component of a URI, if defined, is a non-negative&#10;     * integer. </p>&#10;     *&#10;     * @return  The port component of this URI,&#10;     *          or {@code -1} if the port is undefined&#10;     "
  ]
  node [
    id 1318
    label "public int getLocalPort()"
    type "method"
    comment "&#10;     * Returns the port number on the local host to which this socket&#10;     * is bound.&#10;     *&#10;     * @return  the port number on the local host to which this socket is bound,&#10;                {@code -1} if the socket is closed, or&#10;                {@code 0} if it is not bound yet.&#10;     "
  ]
  node [
    id 1319
    label "public SocketAddress getRemoteSocketAddress()"
    type "method"
    comment "&#10;     * Returns the address of the endpoint this socket is connected to, or&#10;     * {@code null} if it is unconnected.&#10;     * <p>&#10;     * If the socket was connected prior to being {@link #close closed},&#10;     * then this method will continue to return the connected address&#10;     * after the socket is closed.&#10;     *&#10;     * @return a {@code SocketAddress} representing the remote&#10;     *         endpoint of this socket, or {@code null} if it is&#10;     *         not connected yet.&#10;     * @see #getInetAddress()&#10;     * @see #getPort()&#10;     * @see #connect(SocketAddress)&#10;     * @since 1.4&#10;     "
  ]
  node [
    id 1320
    label "public SocketChannel getChannel()"
    type "method"
    comment "&#10;     * Returns the unique {@link java.nio.channels.SocketChannel SocketChannel}&#10;     * object associated with this socket, if any.&#10;     *&#10;     * <p> A socket will have a channel if, and only if, the channel itself was&#10;     * created via the {@link java.nio.channels.SocketChannel#open&#10;     * SocketChannel.open} or {@link&#10;     * java.nio.channels.ServerSocketChannel#accept ServerSocketChannel.accept}&#10;     * methods.&#10;     *&#10;     * @return  the socket channel associated with this socket,&#10;     *          or {@code null} if this socket was not created&#10;     *          for a channel&#10;     *&#10;     * @since 1.4&#10;     * @spec JSR-51&#10;     "
  ]
  node [
    id 1321
    label "accept"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1322
    label "java.nio.channels.ServerSocketChannel"
    type "class"
    comment ""
  ]
  node [
    id 1323
    label "public static ServerSocketChannel open() throws IOException"
    type "method"
    comment "&#10;     * Opens a server-socket channel.&#10;     *&#10;     * <p> The new channel is created by invoking the {@link&#10;     * java.nio.channels.spi.SelectorProvider#openServerSocketChannel&#10;     * openServerSocketChannel} method of the system-wide default {@link&#10;     * java.nio.channels.spi.SelectorProvider} object.&#10;     *&#10;     * <p> The new channel's socket is initially unbound; it must be bound to a&#10;     * specific address via one of its socket's {@link&#10;     * java.net.ServerSocket#bind(SocketAddress) bind} methods before&#10;     * connections can be accepted.  </p>&#10;     *&#10;     * @return  A new socket channel&#10;     *&#10;     * @throws  IOException&#10;     *          If an I/O error occurs&#10;     "
  ]
  node [
    id 1324
    label "bind(SocketAddress)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1325
    label "java.net.ServerSocket"
    type "class"
    comment "&#10; * This class implements server sockets. A server socket waits for&#10; * requests to come in over the network. It performs some operation&#10; * based on that request, and then possibly returns a result to the requester.&#10; * <p>&#10; * The actual work of the server socket is performed by an instance&#10; * of the {@code SocketImpl} class. An application can&#10; * change the socket factory that creates the socket&#10; * implementation to configure itself to create sockets&#10; * appropriate to the local firewall.&#10; *&#10; * @author  unascribed&#10; * @see     java.net.SocketImpl&#10; * @see     java.net.ServerSocket#setSocketFactory(java.net.SocketImplFactory)&#10; * @see     java.nio.channels.ServerSocketChannel&#10; * @since   1.0&#10; "
  ]
  node [
    id 1326
    label " void createImpl() throws SocketException"
    type "method"
    comment "&#10;     * Creates the socket implementation.&#10;     *&#10;     * @throws IOException if creation fails&#10;     * @since 1.4&#10;     "
  ]
  node [
    id 1327
    label "public void bind(SocketAddress endpoint) throws IOException"
    type "method"
    comment "&#10;     *&#10;     * Binds the {@code ServerSocket} to a specific address&#10;     * (IP address and port number).&#10;     * <p>&#10;     * If the address is {@code null}, then the system will pick up&#10;     * an ephemeral port and a valid local address to bind the socket.&#10;     *&#10;     * @param   endpoint        The IP address and port number to bind to.&#10;     * @throws  IOException if the bind operation fails, or if the socket&#10;     *                     is already bound.&#10;     * @throws  SecurityException       if a {@code SecurityManager} is present and&#10;     * its {@code checkListen} method doesn't allow the operation.&#10;     * @throws  IllegalArgumentException if endpoint is a&#10;     *          SocketAddress subclass not supported by this socket&#10;     * @since 1.4&#10;     "
  ]
  node [
    id 1328
    label "public void bind(SocketAddress endpoint, int backlog) throws IOException"
    type "method"
    comment "&#10;     *&#10;     * Binds the {@code ServerSocket} to a specific address&#10;     * (IP address and port number).&#10;     * <p>&#10;     * If the address is {@code null}, then the system will pick up&#10;     * an ephemeral port and a valid local address to bind the socket.&#10;     * <P>&#10;     * The {@code backlog} argument is the requested maximum number of&#10;     * pending connections on the socket. Its exact semantics are implementation&#10;     * specific. In particular, an implementation may impose a maximum length&#10;     * or may choose to ignore the parameter altogther. The value provided&#10;     * should be greater than {@code 0}. If it is less than or equal to&#10;     * {@code 0}, then an implementation specific default will be used.&#10;     * @param   endpoint        The IP address and port number to bind to.&#10;     * @param   backlog         requested maximum length of the queue of&#10;     *                          incoming connections.&#10;     * @throws  IOException if the bind operation fails, or if the socket&#10;     *                     is already bound.&#10;     * @throws  SecurityException       if a {@code SecurityManager} is present and&#10;     * its {@code checkListen} method doesn't allow the operation.&#10;     * @throws  IllegalArgumentException if endpoint is a&#10;     *          SocketAddress subclass not supported by this socket&#10;     * @since 1.4&#10;     "
  ]
  node [
    id 1329
    label "public Socket accept() throws IOException"
    type "method"
    comment "&#10;     * Listens for a connection to be made to this socket and accepts&#10;     * it. The method blocks until a connection is made.&#10;     *&#10;     * <p>A new Socket {@code s} is created and, if there&#10;     * is a security manager,&#10;     * the security manager's {@code checkAccept} method is called&#10;     * with {@code s.getInetAddress().getHostAddress()} and&#10;     * {@code s.getPort()}&#10;     * as its arguments to ensure the operation is allowed.&#10;     * This could result in a SecurityException.&#10;     *&#10;     * @exception  IOException  if an I/O error occurs when waiting for a&#10;     *               connection.&#10;     * @exception  SecurityException  if a security manager exists and its&#10;     *             {@code checkAccept} method doesn't allow the operation.&#10;     * @exception  SocketTimeoutException if a timeout was previously set with setSoTimeout and&#10;     *             the timeout has been reached.&#10;     * @exception  java.nio.channels.IllegalBlockingModeException&#10;     *             if this socket has an associated channel, the channel is in&#10;     *             non-blocking mode, and there is no connection ready to be&#10;     *             accepted&#10;     *&#10;     * @return the new Socket&#10;     * @see SecurityManager#checkAccept&#10;     * @revised 1.4&#10;     * @spec JSR-51&#10;     "
  ]
  node [
    id 1330
    label "protected final void implAccept(Socket s) throws IOException"
    type "method"
    comment "&#10;     * Subclasses of ServerSocket use this method to override accept()&#10;     * to return their own subclass of socket.  So a FooServerSocket&#10;     * will typically hand this method an <i>empty</i> FooSocket.  On&#10;     * return from implAccept the FooSocket will be connected to a client.&#10;     *&#10;     * @param s the Socket&#10;     * @throws java.nio.channels.IllegalBlockingModeException&#10;     *         if this socket has an associated channel,&#10;     *         and the channel is in non-blocking mode&#10;     * @throws IOException if an I/O error occurs when waiting&#10;     * for a connection.&#10;     * @since   1.1&#10;     * @revised 1.4&#10;     * @spec JSR-51&#10;     "
  ]
  node [
    id 1331
    label "public void close() throws IOException"
    type "method"
    comment "&#10;     * Closes the input stream. Must be called to release any resources&#10;     * associated with the stream.&#10;     *&#10;     * @throws  IOException If an I/O error has occurred.&#10;     "
  ]
  node [
    id 1332
    label "java.net.SocketException"
    type "class"
    comment "&#10; * Thrown to indicate that there is an error creating or accessing a Socket.&#10; *&#10; * @author  Jonathan Payne&#10; * @since   1.0&#10; "
  ]
  node [
    id 1333
    label "accept()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1334
    label "public ServerSocketChannel getChannel()"
    type "method"
    comment "&#10;     * Returns the unique {@link java.nio.channels.ServerSocketChannel} object&#10;     * associated with this socket, if any.&#10;     *&#10;     * <p> A server socket will have a channel if, and only if, the channel&#10;     * itself was created via the {@link&#10;     * java.nio.channels.ServerSocketChannel#open ServerSocketChannel.open}&#10;     * method.&#10;     *&#10;     * @return  the server-socket channel associated with this socket,&#10;     *          or {@code null} if this socket was not created&#10;     *          for a channel&#10;     *&#10;     * @since 1.4&#10;     * @spec JSR-51&#10;     "
  ]
  node [
    id 1335
    label "public boolean isBound()"
    type "method"
    comment "&#10;     * Returns the binding state of the socket.&#10;     * <p>&#10;     * If the socket was bound prior to being {@link #close closed},&#10;     * then this method will continue to return {@code true}&#10;     * after the socket is closed.&#10;     *&#10;     * @return true if the socket successfully bound to an address&#10;     * @since 1.4&#10;     "
  ]
  node [
    id 1336
    label "public boolean isClosed()"
    type "method"
    comment "&#10;     * Returns whether the socket is closed or not.&#10;     *&#10;     * @return true if the socket has been closed&#10;     * @since 1.4&#10;     "
  ]
  node [
    id 1337
    label "public synchronized void setSoTimeout(int timeout) throws SocketException"
    type "method"
    comment " Enable/disable SO_TIMEOUT with the specified timeout, in&#10;     *  milliseconds. With this option set to a non-zero timeout,&#10;     *  a call to receive() for this DatagramSocket&#10;     *  will block for only this amount of time.  If the timeout expires,&#10;     *  a <B>java.net.SocketTimeoutException</B> is raised, though the&#10;     *  DatagramSocket is still valid.  The option <B>must</B> be enabled&#10;     *  prior to entering the blocking operation to have effect.  The&#10;     *  timeout must be {@code > 0}.&#10;     *  A timeout of zero is interpreted as an infinite timeout.&#10;     *&#10;     * @param timeout the specified timeout in milliseconds.&#10;     * @throws SocketException if there is an error in the underlying protocol, such as an UDP error.&#10;     * @since   1.1&#10;     * @see #getSoTimeout()&#10;     "
  ]
  node [
    id 1338
    label "SO_TIMEOUT"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1339
    label "java.net.SocketOptions"
    type "class"
    comment ""
  ]
  node [
    id 1340
    label "public void setOption(int optID, Object value) throws SocketException"
    type "method"
    comment "&#10;     * Enable/disable the option specified by <I>optID</I>.  If the option&#10;     * is to be enabled, and it takes an option-specific &#34;value&#34;,  this is&#10;     * passed in <I>value</I>.  The actual type of value is option-specific,&#10;     * and it is an error to pass something that isn't of the expected type:&#10;     * <BR><PRE>&#10;     * SocketImpl s;&#10;     * ...&#10;     * s.setOption(SO_LINGER, new Integer(10));&#10;     *    // OK - set SO_LINGER w/ timeout of 10 sec.&#10;     * s.setOption(SO_LINGER, new Double(10));&#10;     *    // ERROR - expects java.lang.Integer&#10;     *</PRE>&#10;     * If the requested option is binary, it can be set using this method by&#10;     * a java.lang.Boolean:&#10;     * <BR><PRE>&#10;     * s.setOption(TCP_NODELAY, Boolean.TRUE);&#10;     *    // OK - enables TCP_NODELAY, a binary option&#10;     * </PRE>&#10;     * <BR>&#10;     * Any option can be disabled using this method with a Boolean.FALSE:&#10;     * <BR><PRE>&#10;     * s.setOption(TCP_NODELAY, Boolean.FALSE);&#10;     *    // OK - disables TCP_NODELAY&#10;     * s.setOption(SO_LINGER, Boolean.FALSE);&#10;     *    // OK - disables SO_LINGER&#10;     * </PRE>&#10;     * <BR>&#10;     * For an option that has a notion of on and off, and requires&#10;     * a non-boolean parameter, setting its value to anything other than&#10;     * <I>Boolean.FALSE</I> implicitly enables it.&#10;     * <BR>&#10;     * Throws SocketException if the option is unrecognized,&#10;     * the socket is closed, or some low-level error occurred&#10;     * <BR>&#10;     * @param optID identifies the option&#10;     * @param value the parameter of the socket option&#10;     * @throws SocketException if the option is unrecognized,&#10;     * the socket is closed, or some low-level error occurred&#10;     * @see #getOption(int)&#10;     "
  ]
  node [
    id 1341
    label "public Object getOption(int optID) throws SocketException"
    type "method"
    comment "&#10;     * Fetch the value of an option.&#10;     * Binary options will return java.lang.Boolean.TRUE&#10;     * if enabled, java.lang.Boolean.FALSE if disabled, e.g.:&#10;     * <BR><PRE>&#10;     * SocketImpl s;&#10;     * ...&#10;     * Boolean noDelay = (Boolean)(s.getOption(TCP_NODELAY));&#10;     * if (noDelay.booleanValue()) {&#10;     *     // true if TCP_NODELAY is enabled...&#10;     * ...&#10;     * }&#10;     * </PRE>&#10;     * <P>&#10;     * For options that take a particular type as a parameter,&#10;     * getOption(int) will return the parameter's value, else&#10;     * it will return java.lang.Boolean.FALSE:&#10;     * <PRE>&#10;     * Object o = s.getOption(SO_LINGER);&#10;     * if (o instanceof Integer) {&#10;     *     System.out.print(&#34;Linger time is &#34; + ((Integer)o).intValue());&#10;     * } else {&#10;     *   // the true type of o is java.lang.Boolean.FALSE;&#10;     * }&#10;     * </PRE>&#10;     *&#10;     * @param optID an {@code int} identifying the option to fetch&#10;     * @return the value of the option&#10;     * @throws SocketException if the socket is closed&#10;     * @throws SocketException if <I>optID</I> is unknown along the&#10;     *         protocol stack (including the SocketImpl)&#10;     * @see #setOption(int, java.lang.Object)&#10;     "
  ]
  node [
    id 1342
    label "public synchronized int getSoTimeout() throws IOException"
    type "method"
    comment "&#10;     * Retrieve setting for {@link SocketOptions#SO_TIMEOUT SO_TIMEOUT}.&#10;     * 0 returns implies that the option is disabled (i.e., timeout of infinity).&#10;     * @return the {@link SocketOptions#SO_TIMEOUT SO_TIMEOUT} value&#10;     * @exception IOException if an I/O error occurs&#10;     * @since   1.1&#10;     * @see #setSoTimeout(int)&#10;     "
  ]
  node [
    id 1343
    label "public void setReuseAddress(boolean on) throws SocketException"
    type "method"
    comment "&#10;     * Enable/disable the {@link SocketOptions#SO_REUSEADDR SO_REUSEADDR}&#10;     * socket option.&#10;     * <p>&#10;     * When a TCP connection is closed the connection may remain&#10;     * in a timeout state for a period of time after the connection&#10;     * is closed (typically known as the {@code TIME_WAIT} state&#10;     * or {@code 2MSL} wait state).&#10;     * For applications using a well known socket address or port&#10;     * it may not be possible to bind a socket to the required&#10;     * {@code SocketAddress} if there is a connection in the&#10;     * timeout state involving the socket address or port.&#10;     * <p>&#10;     * Enabling {@link SocketOptions#SO_REUSEADDR SO_REUSEADDR}&#10;     * prior to binding the socket using {@link #bind(SocketAddress)} allows&#10;     * the socket to be bound even though a previous connection is in a timeout&#10;     * state.&#10;     * <p>&#10;     * When a {@code Socket} is created the initial setting&#10;     * of {@link SocketOptions#SO_REUSEADDR SO_REUSEADDR} is disabled.&#10;     * <p>&#10;     * The behaviour when {@link SocketOptions#SO_REUSEADDR SO_REUSEADDR} is&#10;     * enabled or disabled after a socket is bound (See {@link #isBound()})&#10;     * is not defined.&#10;     *&#10;     * @param on  whether to enable or disable the socket option&#10;     * @exception SocketException if an error occurs enabling or&#10;     *            disabling the {@link SocketOptions#SO_REUSEADDR SO_REUSEADDR}&#10;     *            socket option, or the socket is closed.&#10;     * @since 1.4&#10;     * @see #getReuseAddress()&#10;     * @see #bind(SocketAddress)&#10;     * @see #isClosed()&#10;     * @see #isBound()&#10;     "
  ]
  node [
    id 1344
    label "getReuseAddress()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1345
    label "isBound()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1346
    label "public boolean getReuseAddress() throws SocketException"
    type "method"
    comment "&#10;     * Tests if {@link SocketOptions#SO_REUSEADDR SO_REUSEADDR} is enabled.&#10;     *&#10;     * @return a {@code boolean} indicating whether or not&#10;     *         {@link SocketOptions#SO_REUSEADDR SO_REUSEADDR} is enabled.&#10;     * @exception SocketException if there is an error&#10;     * in the underlying protocol, such as a TCP error.&#10;     * @since   1.4&#10;     * @see #setReuseAddress(boolean)&#10;     "
  ]
  node [
    id 1347
    label "public static synchronized void setSocketFactory(SocketImplFactory fac) throws IOException"
    type "method"
    comment "&#10;     * Sets the server socket implementation factory for the&#10;     * application. The factory can be specified only once.&#10;     * <p>&#10;     * When an application creates a new server socket, the socket&#10;     * implementation factory's {@code createSocketImpl} method is&#10;     * called to create the actual socket implementation.&#10;     * <p>&#10;     * Passing {@code null} to the method is a no-op unless the factory&#10;     * was already set.&#10;     * <p>&#10;     * If there is a security manager, this method first calls&#10;     * the security manager's {@code checkSetFactory} method&#10;     * to ensure the operation is allowed.&#10;     * This could result in a SecurityException.&#10;     *&#10;     * @param      fac   the desired factory.&#10;     * @exception  IOException  if an I/O error occurs when setting the&#10;     *               socket factory.&#10;     * @exception  SocketException  if the factory has already been defined.&#10;     * @exception  SecurityException  if a security manager exists and its&#10;     *             {@code checkSetFactory} method doesn't allow the operation.&#10;     * @see        java.net.SocketImplFactory#createSocketImpl()&#10;     * @see        SecurityManager#checkSetFactory&#10;     "
  ]
  node [
    id 1348
    label "public synchronized void setReceiveBufferSize(int size) throws SocketException"
    type "method"
    comment "&#10;     * Sets the SO_RCVBUF option to the specified value for this&#10;     * {@code DatagramSocket}. The SO_RCVBUF option is used by&#10;     * the network implementation as a hint to size the underlying&#10;     * network I/O buffers. The SO_RCVBUF setting may also be used&#10;     * by the network implementation to determine the maximum size&#10;     * of the packet that can be received on this socket.&#10;     * <p>&#10;     * Because SO_RCVBUF is a hint, applications that want to&#10;     * verify what size the buffers were set to should call&#10;     * {@link #getReceiveBufferSize()}.&#10;     * <p>&#10;     * Increasing SO_RCVBUF may allow the network implementation&#10;     * to buffer multiple packets when packets arrive faster than&#10;     * are being received using {@link #receive(DatagramPacket)}.&#10;     * <p>&#10;     * Note: It is implementation specific if a packet larger&#10;     * than SO_RCVBUF can be received.&#10;     *&#10;     * @param size the size to which to set the receive buffer&#10;     * size. This value must be greater than 0.&#10;     *&#10;     * @exception SocketException if there is an error in&#10;     * the underlying protocol, such as an UDP error.&#10;     * @exception IllegalArgumentException if the value is 0 or is&#10;     * negative.&#10;     * @see #getReceiveBufferSize()&#10;     "
  ]
  node [
    id 1349
    label "public synchronized int getReceiveBufferSize() throws SocketException"
    type "method"
    comment "&#10;     * Get value of the SO_RCVBUF option for this {@code DatagramSocket}, that is the&#10;     * buffer size used by the platform for input on this {@code DatagramSocket}.&#10;     *&#10;     * @return the value of the SO_RCVBUF option for this {@code DatagramSocket}&#10;     * @exception SocketException if there is an error in the underlying protocol, such as an UDP error.&#10;     * @see #setReceiveBufferSize(int)&#10;     "
  ]
  node [
    id 1350
    label "public void setPerformancePreferences(int connectionTime, int latency, int bandwidth)"
    type "method"
    comment "&#10;     * Sets performance preferences for this socket.&#10;     *&#10;     * <p> Sockets use the TCP/IP protocol by default.  Some implementations&#10;     * may offer alternative protocols which have different performance&#10;     * characteristics than TCP/IP.  This method allows the application to&#10;     * express its own preferences as to how these tradeoffs should be made&#10;     * when the implementation chooses from the available protocols.&#10;     *&#10;     * <p> Performance preferences are described by three integers&#10;     * whose values indicate the relative importance of short connection time,&#10;     * low latency, and high bandwidth.  The absolute values of the integers&#10;     * are irrelevant; in order to choose a protocol the values are simply&#10;     * compared, with larger values indicating stronger preferences. Negative&#10;     * values represent a lower priority than positive values. If the&#10;     * application prefers short connection time over both low latency and high&#10;     * bandwidth, for example, then it could invoke this method with the values&#10;     * {@code (1, 0, 0)}.  If the application prefers high bandwidth above low&#10;     * latency, and low latency above short connection time, then it could&#10;     * invoke this method with the values {@code (0, 1, 2)}.&#10;     *&#10;     * <p> Invoking this method after this socket has been connected&#10;     * will have no effect.&#10;     *&#10;     * @param  connectionTime&#10;     *         An {@code int} expressing the relative importance of a short&#10;     *         connection time&#10;     *&#10;     * @param  latency&#10;     *         An {@code int} expressing the relative importance of low&#10;     *         latency&#10;     *&#10;     * @param  bandwidth&#10;     *         An {@code int} expressing the relative importance of high&#10;     *         bandwidth&#10;     *&#10;     * @since 1.5&#10;     "
  ]
  node [
    id 1351
    label "public ServerSocket setOption(SocketOption<T> name, T value) throws IOException"
    type "method"
    comment "&#10;     * Sets the value of a socket option.&#10;     *&#10;     * @param <T> The type of the socket option value&#10;     * @param name The socket option&#10;     * @param value The value of the socket option. A value of {@code null}&#10;     *              may be valid for some options.&#10;     * @return this ServerSocket&#10;     *&#10;     * @throws UnsupportedOperationException if the server socket does not&#10;     *         support the option.&#10;     *&#10;     * @throws IllegalArgumentException if the value is not valid for&#10;     *         the option.&#10;     *&#10;     * @throws IOException if an I/O error occurs, or if the socket is closed.&#10;     *&#10;     * @throws NullPointerException if name is {@code null}&#10;     *&#10;     * @throws SecurityException if a security manager is set and if the socket&#10;     *         option requires a security permission and if the caller does&#10;     *         not have the required permission.&#10;     *         {@link java.net.StandardSocketOptions StandardSocketOptions}&#10;     *         do not require any security permission.&#10;     *&#10;     * @since 9&#10;     "
  ]
  node [
    id 1352
    label "java.net.StandardSocketOptions"
    type "class"
    comment ""
  ]
  node [
    id 1353
    label "public T getOption(SocketOption<T> name) throws IOException"
    type "method"
    comment "&#10;     * Returns the value of a socket option.&#10;     *&#10;     * @param <T> The type of the socket option value&#10;     * @param name The socket option&#10;     *&#10;     * @return The value of the socket option.&#10;     *&#10;     * @throws UnsupportedOperationException if the datagram socket&#10;     *         does not support the option.&#10;     *&#10;     * @throws IOException if an I/O error occurs, or if the socket is closed.&#10;     *&#10;     * @throws NullPointerException if name is {@code null}&#10;     *&#10;     * @throws SecurityException if a security manager is set and if the socket&#10;     *         option requires a security permission and if the caller does&#10;     *         not have the required permission.&#10;     *         {@link java.net.StandardSocketOptions StandardSocketOptions}&#10;     *         do not require any security permission.&#10;     *&#10;     * @since 9&#10;     "
  ]
  node [
    id 1354
    label "public Set<SocketOption<?>> supportedOptions()"
    type "method"
    comment "&#10;     * Returns a set of the socket options supported by this socket.&#10;     *&#10;     * This method will continue to return the set of options even after&#10;     * the socket has been closed.&#10;     *&#10;     * @return A set of the socket options supported by this socket. This set&#10;     *        may be empty if the socket's DatagramSocketImpl cannot be created.&#10;     *&#10;     * @since 9&#10;     "
  ]
  node [
    id 1355
    label "public final ServerSocketChannel bind(SocketAddress local) throws IOException"
    type "method"
    comment "&#10;     * Binds the channel's socket to a local address and configures the socket&#10;     * to listen for connections.&#10;     *&#10;     * <p> An invocation of this method is equivalent to the following:&#10;     * <blockquote><pre>&#10;     * bind(local, 0);&#10;     * </pre></blockquote>&#10;     *&#10;     * @param   local&#10;     *          The local address to bind the socket, or {@code null} to bind&#10;     *          to an automatically assigned socket address&#10;     *&#10;     * @return  This channel&#10;     *&#10;     * @throws  AlreadyBoundException               {@inheritDoc}&#10;     * @throws  UnsupportedAddressTypeException     {@inheritDoc}&#10;     * @throws  ClosedChannelException              {@inheritDoc}&#10;     * @throws  IOException                         {@inheritDoc}&#10;     * @throws  SecurityException&#10;     *          If a security manager has been installed and its {@link&#10;     *          SecurityManager#checkListen checkListen} method denies the&#10;     *          operation&#10;     *&#10;     * @since 1.7&#10;     "
  ]
  node [
    id 1356
    label "public abstract ServerSocketChannel bind(SocketAddress local, int backlog) throws IOException"
    type "method"
    comment "&#10;     * Binds the channel's socket to a local address and configures the socket to&#10;     * listen for connections.&#10;     *&#10;     * <p> This method is used to establish an association between the socket and&#10;     * a local address. Once an association is established then the socket remains&#10;     * bound until the channel is closed.&#10;     *&#10;     * <p> The {@code backlog} parameter is the maximum number of pending&#10;     * connections on the socket. Its exact semantics are implementation specific.&#10;     * In particular, an implementation may impose a maximum length or may choose&#10;     * to ignore the parameter altogther. If the {@code backlog} parameter has&#10;     * the value {@code 0}, or a negative value, then an implementation specific&#10;     * default is used.&#10;     *&#10;     * @param   local&#10;     *          The address to bind the socket, or {@code null} to bind to an&#10;     *          automatically assigned socket address&#10;     * @param   backlog&#10;     *          The maximum number of pending connections&#10;     *&#10;     * @return  This channel&#10;     *&#10;     * @throws  AlreadyBoundException&#10;     *          If the socket is already bound&#10;     * @throws  UnsupportedAddressTypeException&#10;     *          If the type of the given address is not supported&#10;     * @throws  ClosedChannelException&#10;     *          If this channel is closed&#10;     * @throws  IOException&#10;     *          If some other I/O error occurs&#10;     * @throws  SecurityException&#10;     *          If a security manager has been installed and its {@link&#10;     *          SecurityManager#checkListen checkListen} method denies the&#10;     *          operation&#10;     *&#10;     * @since 1.7&#10;     "
  ]
  node [
    id 1357
    label "public abstract ServerSocketChannel setOption(SocketOption<T> name, T value) throws IOException"
    type "method"
    comment "&#10;     * @throws  UnsupportedOperationException           {@inheritDoc}&#10;     * @throws  IllegalArgumentException                {@inheritDoc}&#10;     * @throws  ClosedChannelException                  {@inheritDoc}&#10;     * @throws  IOException                             {@inheritDoc}&#10;     *&#10;     * @since 1.7&#10;     "
  ]
  node [
    id 1358
    label "public abstract ServerSocket socket()"
    type "method"
    comment "&#10;     * Retrieves a server socket associated with this channel.&#10;     *&#10;     * <p> The returned object will not declare any public methods that are not&#10;     * declared in the {@link java.net.ServerSocket} class.  </p>&#10;     *&#10;     * @return  A server socket associated with this channel&#10;     "
  ]
  node [
    id 1359
    label "public abstract SocketChannel accept() throws IOException"
    type "method"
    comment "&#10;     * Accepts a connection made to this channel's socket.&#10;     *&#10;     * <p> If this channel is in non-blocking mode then this method will&#10;     * immediately return {@code null} if there are no pending connections.&#10;     * Otherwise it will block indefinitely until a new connection is available&#10;     * or an I/O error occurs.&#10;     *&#10;     * <p> The socket channel returned by this method, if any, will be in&#10;     * blocking mode regardless of the blocking mode of this channel.&#10;     *&#10;     * <p> This method performs exactly the same security checks as the {@link&#10;     * java.net.ServerSocket#accept accept} method of the {@link&#10;     * java.net.ServerSocket} class.  That is, if a security manager has been&#10;     * installed then for each new connection this method verifies that the&#10;     * address and port number of the connection's remote endpoint are&#10;     * permitted by the security manager's {@link&#10;     * java.lang.SecurityManager#checkAccept checkAccept} method.  </p>&#10;     *&#10;     * @return  The socket channel for the new connection,&#10;     *          or {@code null} if this channel is in non-blocking mode&#10;     *          and no connection is available to be accepted&#10;     *&#10;     * @throws  ClosedChannelException&#10;     *          If this channel is closed&#10;     *&#10;     * @throws  AsynchronousCloseException&#10;     *          If another thread closes this channel&#10;     *          while the accept operation is in progress&#10;     *&#10;     * @throws  ClosedByInterruptException&#10;     *          If another thread interrupts the current thread&#10;     *          while the accept operation is in progress, thereby&#10;     *          closing the channel and setting the current thread's&#10;     *          interrupt status&#10;     *&#10;     * @throws  NotYetBoundException&#10;     *          If this channel's socket has not yet been bound&#10;     *&#10;     * @throws  SecurityException&#10;     *          If a security manager has been installed&#10;     *          and it does not permit access to the remote endpoint&#10;     *          of the new connection&#10;     *&#10;     * @throws  IOException&#10;     *          If some other I/O error occurs&#10;     "
  ]
  node [
    id 1360
    label "checkAccept"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1361
    label "java.lang.SecurityManager"
    type "class"
    comment "&#10; * Legacy security code; do not use.&#10; *&#10; * <p>Security managers do <i>not</i> provide a secure environment for&#10; * executing untrusted code and are unsupported on Android. Untrusted code&#10; * cannot be safely isolated within a single VM on Android. Application&#10; * developers can assume that there's no SecurityManager installed,&#10; * i.e. {@link java.lang.System#getSecurityManager()} will return null.&#10; "
  ]
  node [
    id 1362
    label "public ThreadGroup getThreadGroup()"
    type "method"
    comment "&#10;     * Returns the current thread's thread group.&#10;     "
  ]
  node [
    id 1363
    label "public abstract SocketAddress getLocalAddress() throws IOException"
    type "method"
    comment "&#10;     * {@inheritDoc}&#10;     * <p>&#10;     * If there is a security manager set, its {@code checkConnect} method is&#10;     * called with the local address and {@code -1} as its arguments to see&#10;     * if the operation is allowed. If the operation is not allowed,&#10;     * a {@code SocketAddress} representing the&#10;     * {@link java.net.InetAddress#getLoopbackAddress loopback} address and the&#10;     * local port of the channel's socket is returned.&#10;     *&#10;     * @return  The {@code SocketAddress} that the socket is bound to, or the&#10;     *          {@code SocketAddress} representing the loopback address if&#10;     *          denied by the security manager, or {@code null} if the&#10;     *          channel's socket is not bound&#10;     *&#10;     * @throws  ClosedChannelException     {@inheritDoc}&#10;     * @throws  IOException                {@inheritDoc}&#10;     "
  ]
  node [
    id 1364
    label "public InputStream getInputStream() throws IOException"
    type "method"
    comment "&#10;     * Returns an input stream for this socket.&#10;     *&#10;     * <p> If this socket has an associated channel then the resulting input&#10;     * stream delegates all of its operations to the channel.  If the channel&#10;     * is in non-blocking mode then the input stream's {@code read} operations&#10;     * will throw an {@link java.nio.channels.IllegalBlockingModeException}.&#10;     *&#10;     * <p>Under abnormal conditions the underlying connection may be&#10;     * broken by the remote host or the network software (for example&#10;     * a connection reset in the case of TCP connections). When a&#10;     * broken connection is detected by the network software the&#10;     * following applies to the returned input stream :-&#10;     *&#10;     * <ul>&#10;     *&#10;     *   <li><p>The network software may discard bytes that are buffered&#10;     *   by the socket. Bytes that aren't discarded by the network&#10;     *   software can be read using {@link java.io.InputStream#read read}.&#10;     *&#10;     *   <li><p>If there are no bytes buffered on the socket, or all&#10;     *   buffered bytes have been consumed by&#10;     *   {@link java.io.InputStream#read read}, then all subsequent&#10;     *   calls to {@link java.io.InputStream#read read} will throw an&#10;     *   {@link java.io.IOException IOException}.&#10;     *&#10;     *   <li><p>If there are no bytes buffered on the socket, and the&#10;     *   socket has not been closed using {@link #close close}, then&#10;     *   {@link java.io.InputStream#available available} will&#10;     *   return {@code 0}.&#10;     *&#10;     * </ul>&#10;     *&#10;     * <p> Closing the returned {@link java.io.InputStream InputStream}&#10;     * will close the associated socket.&#10;     *&#10;     * @return     an input stream for reading bytes from this socket.&#10;     * @exception  IOException  if an I/O error occurs when creating the&#10;     *             input stream, the socket is closed, the socket is&#10;     *             not connected, or the socket input has been shutdown&#10;     *             using {@link #shutdownInput()}&#10;     *&#10;     * @revised 1.4&#10;     * @spec JSR-51&#10;     "
  ]
  node [
    id 1365
    label "java.nio.channels.IllegalBlockingModeException"
    type "class"
    comment ""
  ]
  node [
    id 1366
    label "read"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1367
    label "java.io.InputStream"
    type "class"
    comment "&#10; * This abstract class is the superclass of all classes representing&#10; * an input stream of bytes.&#10; *&#10; * <p> Applications that need to define a subclass of {@code InputStream}&#10; * must always provide a method that returns the next byte of input.&#10; *&#10; * @author  Arthur van Hoff&#10; * @see     java.io.BufferedInputStream&#10; * @see     java.io.ByteArrayInputStream&#10; * @see     java.io.DataInputStream&#10; * @see     java.io.FilterInputStream&#10; * @see     java.io.InputStream#read()&#10; * @see     java.io.OutputStream&#10; * @see     java.io.PushbackInputStream&#10; * @since   1.0&#10; "
  ]
  node [
    id 1368
    label "public static InputStream nullInputStream()"
    type "method"
    comment "&#10;     * Returns a new {@code InputStream} that reads no bytes. The returned&#10;     * stream is initially open.  The stream is closed by calling the&#10;     * {@code close()} method.  Subsequent calls to {@code close()} have no&#10;     * effect.&#10;     *&#10;     * <p> While the stream is open, the {@code available()}, {@code read()},&#10;     * {@code read(byte[])}, {@code read(byte[], int, int)},&#10;     * {@code readAllBytes()}, {@code readNBytes(byte[], int, int)},&#10;     * {@code readNBytes(int)}, {@code skip(long)}, {@code skipNBytes(long)},&#10;     * and {@code transferTo()} methods all behave as if end of stream has been&#10;     * reached.  After the stream has been closed, these methods all throw&#10;     * {@code IOException}.&#10;     *&#10;     * <p> The {@code markSupported()} method returns {@code false}.  The&#10;     * {@code mark()} method does nothing, and the {@code reset()} method&#10;     * throws {@code IOException}.&#10;     *&#10;     * @return an {@code InputStream} which contains no bytes&#10;     *&#10;     * @since 11&#10;     "
  ]
  node [
    id 1369
    label "public abstract int read() throws IOException"
    type "method"
    comment "&#10;     * Reads the next byte of data from the input stream. The value byte is&#10;     * returned as an {@code int} in the range {@code 0} to&#10;     * {@code 255}. If no byte is available because the end of the stream&#10;     * has been reached, the value {@code -1} is returned. This method&#10;     * blocks until input data is available, the end of the stream is detected,&#10;     * or an exception is thrown.&#10;     *&#10;     * <p> A subclass must provide an implementation of this method.&#10;     *&#10;     * @return     the next byte of data, or {@code -1} if the end of the&#10;     *             stream is reached.&#10;     * @throws     IOException  if an I/O error occurs.&#10;     "
  ]
  node [
    id 1370
    label "public int read(byte[] b) throws IOException"
    type "method"
    comment "&#10;     * Reads some number of bytes from the input stream and stores them into&#10;     * the buffer array {@code b}. The number of bytes actually read is&#10;     * returned as an integer.  This method blocks until input data is&#10;     * available, end of file is detected, or an exception is thrown.&#10;     *&#10;     * <p> If the length of {@code b} is zero, then no bytes are read and&#10;     * {@code 0} is returned; otherwise, there is an attempt to read at&#10;     * least one byte. If no byte is available because the stream is at the&#10;     * end of the file, the value {@code -1} is returned; otherwise, at&#10;     * least one byte is read and stored into {@code b}.&#10;     *&#10;     * <p> The first byte read is stored into element {@code b[0]}, the&#10;     * next one into {@code b[1]}, and so on. The number of bytes read is,&#10;     * at most, equal to the length of {@code b}. Let <i>k</i> be the&#10;     * number of bytes actually read; these bytes will be stored in elements&#10;     * {@code b[0]} through {@code b[}<i>k</i>{@code -1]},&#10;     * leaving elements {@code b[}<i>k</i>{@code ]} through&#10;     * {@code b[b.length-1]} unaffected.&#10;     *&#10;     * <p> The {@code read(b)} method for class {@code InputStream}&#10;     * has the same effect as: <pre>{@code  read(b, 0, b.length) }</pre>&#10;     *&#10;     * @param      b   the buffer into which the data is read.&#10;     * @return     the total number of bytes read into the buffer, or&#10;     *             {@code -1} if there is no more data because the end of&#10;     *             the stream has been reached.&#10;     * @throws     IOException  If the first byte cannot be read for any reason&#10;     *             other than the end of the file, if the input stream has been&#10;     *             closed, or if some other I/O error occurs.&#10;     * @throws     NullPointerException  if {@code b} is {@code null}.&#10;     * @see        java.io.InputStream#read(byte[], int, int)&#10;     "
  ]
  node [
    id 1371
    label "public int read(byte[] b, int off, int len) throws IOException"
    type "method"
    comment "&#10;     * Reads up to {@code len} bytes of data from the input stream into&#10;     * an array of bytes.  An attempt is made to read as many as&#10;     * {@code len} bytes, but a smaller number may be read.&#10;     * The number of bytes actually read is returned as an integer.&#10;     *&#10;     * <p> This method blocks until input data is available, end of file is&#10;     * detected, or an exception is thrown.&#10;     *&#10;     * <p> If {@code len} is zero, then no bytes are read and&#10;     * {@code 0} is returned; otherwise, there is an attempt to read at&#10;     * least one byte. If no byte is available because the stream is at end of&#10;     * file, the value {@code -1} is returned; otherwise, at least one&#10;     * byte is read and stored into {@code b}.&#10;     *&#10;     * <p> The first byte read is stored into element {@code b[off]}, the&#10;     * next one into {@code b[off+1]}, and so on. The number of bytes read&#10;     * is, at most, equal to {@code len}. Let <i>k</i> be the number of&#10;     * bytes actually read; these bytes will be stored in elements&#10;     * {@code b[off]} through {@code b[off+}<i>k</i>{@code -1]},&#10;     * leaving elements {@code b[off+}<i>k</i>{@code ]} through&#10;     * {@code b[off+len-1]} unaffected.&#10;     *&#10;     * <p> In every case, elements {@code b[0]} through&#10;     * {@code b[off-1]} and elements {@code b[off+len]} through&#10;     * {@code b[b.length-1]} are unaffected.&#10;     *&#10;     * <p> The {@code read(b, off, len)} method&#10;     * for class {@code InputStream} simply calls the method&#10;     * {@code read()} repeatedly. If the first such call results in an&#10;     * {@code IOException}, that exception is returned from the call to&#10;     * the {@code read(b,} {@code off,} {@code len)} method.  If&#10;     * any subsequent call to {@code read()} results in a&#10;     * {@code IOException}, the exception is caught and treated as if it&#10;     * were end of file; the bytes read up to that point are stored into&#10;     * {@code b} and the number of bytes read before the exception&#10;     * occurred is returned. The default implementation of this method blocks&#10;     * until the requested amount of input data {@code len} has been read,&#10;     * end of file is detected, or an exception is thrown. Subclasses are&#10;     * encouraged to provide a more efficient implementation of this method.&#10;     *&#10;     * @param      b     the buffer into which the data is read.&#10;     * @param      off   the start offset in array {@code b}&#10;     *                   at which the data is written.&#10;     * @param      len   the maximum number of bytes to read.&#10;     * @return     the total number of bytes read into the buffer, or&#10;     *             {@code -1} if there is no more data because the end of&#10;     *             the stream has been reached.&#10;     * @throws     IOException If the first byte cannot be read for any reason&#10;     *             other than end of file, or if the input stream has been closed,&#10;     *             or if some other I/O error occurs.&#10;     * @throws     NullPointerException If {@code b} is {@code null}.&#10;     * @throws     IndexOutOfBoundsException If {@code off} is negative,&#10;     *             {@code len} is negative, or {@code len} is greater than&#10;     *             {@code b.length - off}&#10;     * @see        java.io.InputStream#read()&#10;     "
  ]
  node [
    id 1372
    label "public byte[] readAllBytes() throws IOException"
    type "method"
    comment "&#10;     * Reads all remaining bytes from the input stream. This method blocks until&#10;     * all remaining bytes have been read and end of stream is detected, or an&#10;     * exception is thrown. This method does not close the input stream.&#10;     *&#10;     * <p> When this stream reaches end of stream, further invocations of this&#10;     * method will return an empty byte array.&#10;     *&#10;     * <p> Note that this method is intended for simple cases where it is&#10;     * convenient to read all bytes into a byte array. It is not intended for&#10;     * reading input streams with large amounts of data.&#10;     *&#10;     * <p> The behavior for the case where the input stream is <i>asynchronously&#10;     * closed</i>, or the thread interrupted during the read, is highly input&#10;     * stream specific, and therefore not specified.&#10;     *&#10;     * <p> If an I/O error occurs reading from the input stream, then it may do&#10;     * so after some, but not all, bytes have been read. Consequently the input&#10;     * stream may not be at end of stream and may be in an inconsistent state.&#10;     * It is strongly recommended that the stream be promptly closed if an I/O&#10;     * error occurs.&#10;     *&#10;     * @implSpec&#10;     * This method invokes {@link #readNBytes(int)} with a length of&#10;     * {@link Integer#MAX_VALUE}.&#10;     *&#10;     * @return a byte array containing the bytes read from this input stream&#10;     * @throws IOException if an I/O error occurs&#10;     * @throws OutOfMemoryError if an array of the required size cannot be&#10;     *         allocated.&#10;     *&#10;     * @since 9&#10;     "
  ]
  node [
    id 1373
    label "readNBytes(int)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1374
    label "public byte[] readNBytes(int len) throws IOException"
    type "method"
    comment "&#10;     * Reads up to a specified number of bytes from the input stream. This&#10;     * method blocks until the requested number of bytes has been read, end&#10;     * of stream is detected, or an exception is thrown. This method does not&#10;     * close the input stream.&#10;     *&#10;     * <p> The length of the returned array equals the number of bytes read&#10;     * from the stream. If {@code len} is zero, then no bytes are read and&#10;     * an empty byte array is returned. Otherwise, up to {@code len} bytes&#10;     * are read from the stream. Fewer than {@code len} bytes may be read if&#10;     * end of stream is encountered.&#10;     *&#10;     * <p> When this stream reaches end of stream, further invocations of this&#10;     * method will return an empty byte array.&#10;     *&#10;     * <p> Note that this method is intended for simple cases where it is&#10;     * convenient to read the specified number of bytes into a byte array. The&#10;     * total amount of memory allocated by this method is proportional to the&#10;     * number of bytes read from the stream which is bounded by {@code len}.&#10;     * Therefore, the method may be safely called with very large values of&#10;     * {@code len} provided sufficient memory is available.&#10;     *&#10;     * <p> The behavior for the case where the input stream is <i>asynchronously&#10;     * closed</i>, or the thread interrupted during the read, is highly input&#10;     * stream specific, and therefore not specified.&#10;     *&#10;     * <p> If an I/O error occurs reading from the input stream, then it may do&#10;     * so after some, but not all, bytes have been read. Consequently the input&#10;     * stream may not be at end of stream and may be in an inconsistent state.&#10;     * It is strongly recommended that the stream be promptly closed if an I/O&#10;     * error occurs.&#10;     *&#10;     * @implNote&#10;     * The number of bytes allocated to read data from this stream and return&#10;     * the result is bounded by {@code 2*(long)len}, inclusive.&#10;     *&#10;     * @param len the maximum number of bytes to read&#10;     * @return a byte array containing the bytes read from this input stream&#10;     * @throws IllegalArgumentException if {@code length} is negative&#10;     * @throws IOException if an I/O error occurs&#10;     * @throws OutOfMemoryError if an array of the required size cannot be&#10;     *         allocated.&#10;     *&#10;     * @since 11&#10;     "
  ]
  node [
    id 1375
    label "public int readNBytes(byte[] b, int off, int len) throws IOException"
    type "method"
    comment "&#10;     * Reads the requested number of bytes from the input stream into the given&#10;     * byte array. This method blocks until {@code len} bytes of input data have&#10;     * been read, end of stream is detected, or an exception is thrown. The&#10;     * number of bytes actually read, possibly zero, is returned. This method&#10;     * does not close the input stream.&#10;     *&#10;     * <p> In the case where end of stream is reached before {@code len} bytes&#10;     * have been read, then the actual number of bytes read will be returned.&#10;     * When this stream reaches end of stream, further invocations of this&#10;     * method will return zero.&#10;     *&#10;     * <p> If {@code len} is zero, then no bytes are read and {@code 0} is&#10;     * returned; otherwise, there is an attempt to read up to {@code len} bytes.&#10;     *&#10;     * <p> The first byte read is stored into element {@code b[off]}, the next&#10;     * one in to {@code b[off+1]}, and so on. The number of bytes read is, at&#10;     * most, equal to {@code len}. Let <i>k</i> be the number of bytes actually&#10;     * read; these bytes will be stored in elements {@code b[off]} through&#10;     * {@code b[off+}<i>k</i>{@code -1]}, leaving elements {@code b[off+}<i>k</i>&#10;     * {@code ]} through {@code b[off+len-1]} unaffected.&#10;     *&#10;     * <p> The behavior for the case where the input stream is <i>asynchronously&#10;     * closed</i>, or the thread interrupted during the read, is highly input&#10;     * stream specific, and therefore not specified.&#10;     *&#10;     * <p> If an I/O error occurs reading from the input stream, then it may do&#10;     * so after some, but not all, bytes of {@code b} have been updated with&#10;     * data from the input stream. Consequently the input stream and {@code b}&#10;     * may be in an inconsistent state. It is strongly recommended that the&#10;     * stream be promptly closed if an I/O error occurs.&#10;     *&#10;     * @param  b the byte array into which the data is read&#10;     * @param  off the start offset in {@code b} at which the data is written&#10;     * @param  len the maximum number of bytes to read&#10;     * @return the actual number of bytes read into the buffer&#10;     * @throws IOException if an I/O error occurs&#10;     * @throws NullPointerException if {@code b} is {@code null}&#10;     * @throws IndexOutOfBoundsException If {@code off} is negative, {@code len}&#10;     *         is negative, or {@code len} is greater than {@code b.length - off}&#10;     *&#10;     * @since 9&#10;     "
  ]
  node [
    id 1376
    label "public void skipNBytes(long n) throws IOException"
    type "method"
    comment "&#10;     * Skips over and discards exactly {@code n} bytes of data from this input&#10;     * stream.  If {@code n} is zero, then no bytes are skipped.&#10;     * If {@code n} is negative, then no bytes are skipped.&#10;     * Subclasses may handle the negative value differently.&#10;     *&#10;     * <p> This method blocks until the requested number of bytes has been&#10;     * skipped, end of file is reached, or an exception is thrown.&#10;     *&#10;     * <p> If end of stream is reached before the stream is at the desired&#10;     * position, then an {@code EOFException} is thrown.&#10;     *&#10;     * <p> If an I/O error occurs, then the input stream may be&#10;     * in an inconsistent state. It is strongly recommended that the&#10;     * stream be promptly closed if an I/O error occurs.&#10;     *&#10;     * @implNote&#10;     * Subclasses are encouraged to provide a more efficient implementation&#10;     * of this method.&#10;     *&#10;     * @implSpec&#10;     * If {@code n} is zero or negative, then no bytes are skipped.&#10;     * If {@code n} is positive, the default implementation of this method&#10;     * invokes {@link #skip(long) skip()} repeatedly with its parameter equal&#10;     * to the remaining number of bytes to skip until the requested number&#10;     * of bytes has been skipped or an error condition occurs.  If at any&#10;     * point the return value of {@code skip()} is negative or greater than the&#10;     * remaining number of bytes to be skipped, then an {@code IOException} is&#10;     * thrown.  If {@code skip()} ever returns zero, then {@link #read()} is&#10;     * invoked to read a single byte, and if it returns {@code -1}, then an&#10;     * {@code EOFException} is thrown.  Any exception thrown by {@code skip()}&#10;     * or {@code read()} will be propagated.&#10;     *&#10;     * @param      n   the number of bytes to be skipped.&#10;     * @throws     EOFException if end of stream is encountered before the&#10;     *             stream can be positioned {@code n} bytes beyond its position&#10;     *             when this method was invoked.&#10;     * @throws     IOException  if the stream cannot be positioned properly or&#10;     *             if an I/O error occurs.&#10;     * @see        java.io.InputStream#skip(long)&#10;     *&#10;     * @since 12&#10;     "
  ]
  node [
    id 1377
    label "read()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1378
    label "skip(long)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1379
    label "public int available() throws IOException"
    type "method"
    comment "&#10;     * Returns the number of bytes that can be read without blocking.&#10;     *&#10;     * @return  the number of available bytes.&#10;     * @throws  IOException if there are I/O errors while reading from the&#10;     *          underlying <code>InputStream</code>&#10;     "
  ]
  node [
    id 1380
    label "java.io.IOException"
    type "class"
    comment "&#10; * Signals that an I/O exception of some sort has occurred. This&#10; * class is the general class of exceptions produced by failed or&#10; * interrupted I/O operations.&#10; *&#10; * @see     java.io.InputStream&#10; * @see     java.io.OutputStream&#10; * @since   1.0&#10; "
  ]
  node [
    id 1381
    label "public synchronized void mark(int readlimit)"
    type "method"
    comment "&#10;     * Marks the current position in this input stream. A subsequent call to&#10;     * the {@code reset} method repositions this stream at the last marked&#10;     * position so that subsequent reads re-read the same bytes.&#10;     *&#10;     * <p> The {@code readlimit} arguments tells this input stream to&#10;     * allow that many bytes to be read before the mark position gets&#10;     * invalidated.&#10;     *&#10;     * <p> The general contract of {@code mark} is that, if the method&#10;     * {@code markSupported} returns {@code true}, the stream somehow&#10;     * remembers all the bytes read after the call to {@code mark} and&#10;     * stands ready to supply those same bytes again if and whenever the method&#10;     * {@code reset} is called.  However, the stream is not required to&#10;     * remember any data at all if more than {@code readlimit} bytes are&#10;     * read from the stream before {@code reset} is called.&#10;     *&#10;     * <p> Marking a closed stream should not have any effect on the stream.&#10;     *&#10;     * <p> The {@code mark} method of {@code InputStream} does&#10;     * nothing.&#10;     *&#10;     * @param   readlimit   the maximum limit of bytes that can be read before&#10;     *                      the mark position becomes invalid.&#10;     * @see     java.io.InputStream#reset()&#10;     "
  ]
  node [
    id 1382
    label "public synchronized void reset() throws IOException"
    type "method"
    comment "&#10;     * Repositions this stream to the position at the time the&#10;     * {@code mark} method was last called on this input stream.&#10;     *&#10;     * <p> The general contract of {@code reset} is:&#10;     *&#10;     * <ul>&#10;     * <li> If the method {@code markSupported} returns&#10;     * {@code true}, then:&#10;     *&#10;     *     <ul><li> If the method {@code mark} has not been called since&#10;     *     the stream was created, or the number of bytes read from the stream&#10;     *     since {@code mark} was last called is larger than the argument&#10;     *     to {@code mark} at that last call, then an&#10;     *     {@code IOException} might be thrown.&#10;     *&#10;     *     <li> If such an {@code IOException} is not thrown, then the&#10;     *     stream is reset to a state such that all the bytes read since the&#10;     *     most recent call to {@code mark} (or since the start of the&#10;     *     file, if {@code mark} has not been called) will be resupplied&#10;     *     to subsequent callers of the {@code read} method, followed by&#10;     *     any bytes that otherwise would have been the next input data as of&#10;     *     the time of the call to {@code reset}. </ul>&#10;     *&#10;     * <li> If the method {@code markSupported} returns&#10;     * {@code false}, then:&#10;     *&#10;     *     <ul><li> The call to {@code reset} may throw an&#10;     *     {@code IOException}.&#10;     *&#10;     *     <li> If an {@code IOException} is not thrown, then the stream&#10;     *     is reset to a fixed state that depends on the particular type of the&#10;     *     input stream and how it was created. The bytes that will be supplied&#10;     *     to subsequent callers of the {@code read} method depend on the&#10;     *     particular type of the input stream. </ul></ul>&#10;     *&#10;     * <p>The method {@code reset} for class {@code InputStream}&#10;     * does nothing except throw an {@code IOException}.&#10;     *&#10;     * @throws  IOException  if this stream has not been marked or if the&#10;     *          mark has been invalidated.&#10;     * @see     java.io.InputStream#mark(int)&#10;     * @see     java.io.IOException&#10;     "
  ]
  node [
    id 1383
    label "public long transferTo(OutputStream out) throws IOException"
    type "method"
    comment "&#10;     * Reads all bytes from this input stream and writes the bytes to the&#10;     * given output stream in the order that they are read. On return, this&#10;     * input stream will be at end of stream. This method does not close either&#10;     * stream.&#10;     * <p>&#10;     * This method may block indefinitely reading from the input stream, or&#10;     * writing to the output stream. The behavior for the case where the input&#10;     * and/or output stream is <i>asynchronously closed</i>, or the thread&#10;     * interrupted during the transfer, is highly input and output stream&#10;     * specific, and therefore not specified.&#10;     * <p>&#10;     * If an I/O error occurs reading from the input stream or writing to the&#10;     * output stream, then it may do so after some bytes have been read or&#10;     * written. Consequently the input stream may not be at end of stream and&#10;     * one, or both, streams may be in an inconsistent state. It is strongly&#10;     * recommended that both streams be promptly closed if an I/O error occurs.&#10;     *&#10;     * @param  out the output stream, non-null&#10;     * @return the number of bytes transferred&#10;     * @throws IOException if an I/O error occurs when reading or writing&#10;     * @throws NullPointerException if {@code out} is {@code null}&#10;     *&#10;     * @since 9&#10;     "
  ]
  node [
    id 1384
    label "shutdownInput()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1385
    label "public OutputStream getOutputStream() throws IOException"
    type "method"
    comment "&#10;     * Returns an output stream for this socket.&#10;     *&#10;     * <p> If this socket has an associated channel then the resulting output&#10;     * stream delegates all of its operations to the channel.  If the channel&#10;     * is in non-blocking mode then the output stream's {@code write}&#10;     * operations will throw an {@link&#10;     * java.nio.channels.IllegalBlockingModeException}.&#10;     *&#10;     * <p> Closing the returned {@link java.io.OutputStream OutputStream}&#10;     * will close the associated socket.&#10;     *&#10;     * @return     an output stream for writing bytes to this socket.&#10;     * @exception  IOException  if an I/O error occurs when creating the&#10;     *               output stream or if the socket is not connected.&#10;     * @revised 1.4&#10;     * @spec JSR-51&#10;     "
  ]
  node [
    id 1386
    label "java.io.OutputStream"
    type "class"
    comment "&#10; * This abstract class is the superclass of all classes representing&#10; * an output stream of bytes. An output stream accepts output bytes&#10; * and sends them to some sink.&#10; * <p>&#10; * Applications that need to define a subclass of&#10; * {@code OutputStream} must always provide at least a method&#10; * that writes one byte of output.&#10; *&#10; * @author  Arthur van Hoff&#10; * @see     java.io.BufferedOutputStream&#10; * @see     java.io.ByteArrayOutputStream&#10; * @see     java.io.DataOutputStream&#10; * @see     java.io.FilterOutputStream&#10; * @see     java.io.InputStream&#10; * @see     java.io.OutputStream#write(int)&#10; * @since   1.0&#10; "
  ]
  node [
    id 1387
    label "public static OutputStream nullOutputStream()"
    type "method"
    comment "&#10;     * Returns a new {@code OutputStream} which discards all bytes.  The&#10;     * returned stream is initially open.  The stream is closed by calling&#10;     * the {@code close()} method.  Subsequent calls to {@code close()} have&#10;     * no effect.&#10;     *&#10;     * <p> While the stream is open, the {@code write(int)}, {@code&#10;     * write(byte[])}, and {@code write(byte[], int, int)} methods do nothing.&#10;     * After the stream has been closed, these methods all throw {@code&#10;     * IOException}.&#10;     *&#10;     * <p> The {@code flush()} method does nothing.&#10;     *&#10;     * @return an {@code OutputStream} which discards all bytes&#10;     *&#10;     * @since 11&#10;     "
  ]
  node [
    id 1388
    label "public abstract void write(int b) throws IOException"
    type "method"
    comment "&#10;     * Writes the specified byte to this output stream. The general&#10;     * contract for {@code write} is that one byte is written&#10;     * to the output stream. The byte to be written is the eight&#10;     * low-order bits of the argument {@code b}. The 24&#10;     * high-order bits of {@code b} are ignored.&#10;     * <p>&#10;     * Subclasses of {@code OutputStream} must provide an&#10;     * implementation for this method.&#10;     *&#10;     * @param      b   the {@code byte}.&#10;     * @throws     IOException  if an I/O error occurs. In particular,&#10;     *             an {@code IOException} may be thrown if the&#10;     *             output stream has been closed.&#10;     "
  ]
  node [
    id 1389
    label "public void write(byte[] b) throws IOException"
    type "method"
    comment "&#10;     * Writes {@code b.length} bytes from the specified byte array&#10;     * to this output stream. The general contract for {@code write(b)}&#10;     * is that it should have exactly the same effect as the call&#10;     * {@code write(b, 0, b.length)}.&#10;     *&#10;     * @param      b   the data.&#10;     * @throws     IOException  if an I/O error occurs.&#10;     * @see        java.io.OutputStream#write(byte[], int, int)&#10;     "
  ]
  node [
    id 1390
    label "public void write(byte[] b, int off, int len) throws IOException"
    type "method"
    comment "&#10;     * Writes {@code len} bytes from the specified byte array&#10;     * starting at offset {@code off} to this output stream.&#10;     * The general contract for {@code write(b, off, len)} is that&#10;     * some of the bytes in the array {@code b} are written to the&#10;     * output stream in order; element {@code b[off]} is the first&#10;     * byte written and {@code b[off+len-1]} is the last byte written&#10;     * by this operation.&#10;     * <p>&#10;     * The {@code write} method of {@code OutputStream} calls&#10;     * the write method of one argument on each of the bytes to be&#10;     * written out. Subclasses are encouraged to override this method and&#10;     * provide a more efficient implementation.&#10;     * <p>&#10;     * If {@code b} is {@code null}, a&#10;     * {@code NullPointerException} is thrown.&#10;     * <p>&#10;     * If {@code off} is negative, or {@code len} is negative, or&#10;     * {@code off+len} is greater than the length of the array&#10;     * {@code b}, then an {@code IndexOutOfBoundsException} is thrown.&#10;     *&#10;     * @param      b     the data.&#10;     * @param      off   the start offset in the data.&#10;     * @param      len   the number of bytes to write.&#10;     * @throws     IOException  if an I/O error occurs. In particular,&#10;     *             an {@code IOException} is thrown if the output&#10;     *             stream is closed.&#10;     "
  ]
  node [
    id 1391
    label "public void flush() throws IOException"
    type "method"
    comment "&#10;     * Flushes the stream. This will write any buffered output bytes and flush&#10;     * through to the underlying stream.&#10;     *&#10;     * @throws  IOException If an I/O error has occurred.&#10;     "
  ]
  node [
    id 1392
    label "public void setTcpNoDelay(boolean on) throws SocketException"
    type "method"
    comment "&#10;     * Enable/disable {@link SocketOptions#TCP_NODELAY TCP_NODELAY}&#10;     * (disable/enable Nagle's algorithm).&#10;     *&#10;     * @param on {@code true} to enable TCP_NODELAY,&#10;     * {@code false} to disable.&#10;     *&#10;     * @exception SocketException if there is an error&#10;     * in the underlying protocol, such as a TCP error.&#10;     *&#10;     * @since   1.1&#10;     *&#10;     * @see #getTcpNoDelay()&#10;     "
  ]
  node [
    id 1393
    label "public boolean getTcpNoDelay() throws SocketException"
    type "method"
    comment "&#10;     * Tests if {@link SocketOptions#TCP_NODELAY TCP_NODELAY} is enabled.&#10;     *&#10;     * @return a {@code boolean} indicating whether or not&#10;     *         {@link SocketOptions#TCP_NODELAY TCP_NODELAY} is enabled.&#10;     * @exception SocketException if there is an error&#10;     * in the underlying protocol, such as a TCP error.&#10;     * @since   1.1&#10;     * @see #setTcpNoDelay(boolean)&#10;     "
  ]
  node [
    id 1394
    label "public void setSoLinger(boolean on, int linger) throws SocketException"
    type "method"
    comment "&#10;     * Enable/disable {@link SocketOptions#SO_LINGER SO_LINGER} with the&#10;     * specified linger time in seconds. The maximum timeout value is platform&#10;     * specific.&#10;     *&#10;     * The setting only affects socket close.&#10;     *&#10;     * @param on     whether or not to linger on.&#10;     * @param linger how long to linger for, if on is true.&#10;     * @exception SocketException if there is an error&#10;     * in the underlying protocol, such as a TCP error.&#10;     * @exception IllegalArgumentException if the linger value is negative.&#10;     * @since 1.1&#10;     * @see #getSoLinger()&#10;     "
  ]
  node [
    id 1395
    label "public int getSoLinger() throws SocketException"
    type "method"
    comment "&#10;     * Returns setting for {@link SocketOptions#SO_LINGER SO_LINGER}.&#10;     * -1 returns implies that the&#10;     * option is disabled.&#10;     *&#10;     * The setting only affects socket close.&#10;     *&#10;     * @return the setting for {@link SocketOptions#SO_LINGER SO_LINGER}.&#10;     * @exception SocketException if there is an error&#10;     * in the underlying protocol, such as a TCP error.&#10;     * @since   1.1&#10;     * @see #setSoLinger(boolean, int)&#10;     "
  ]
  node [
    id 1396
    label "public void sendUrgentData(int data) throws IOException"
    type "method"
    comment "&#10;     * Send one byte of urgent data on the socket. The byte to be sent is the lowest eight&#10;     * bits of the data parameter. The urgent byte is&#10;     * sent after any preceding writes to the socket OutputStream&#10;     * and before any future writes to the OutputStream.&#10;     * @param data The byte of data to send&#10;     * @exception IOException if there is an error&#10;     *  sending the data.&#10;     * @since 1.4&#10;     "
  ]
  node [
    id 1397
    label "public void setOOBInline(boolean on) throws SocketException"
    type "method"
    comment "&#10;     * Enable/disable {@link SocketOptions#SO_OOBINLINE SO_OOBINLINE}&#10;     * (receipt of TCP urgent data)&#10;     *&#10;     * By default, this option is disabled and TCP urgent data received on a&#10;     * socket is silently discarded. If the user wishes to receive urgent data, then&#10;     * this option must be enabled. When enabled, urgent data is received&#10;     * inline with normal data.&#10;     * <p>&#10;     * Note, only limited support is provided for handling incoming urgent&#10;     * data. In particular, no notification of incoming urgent data is provided&#10;     * and there is no capability to distinguish between normal data and urgent&#10;     * data unless provided by a higher level protocol.&#10;     *&#10;     * @param on {@code true} to enable&#10;     *           {@link SocketOptions#SO_OOBINLINE SO_OOBINLINE},&#10;     *           {@code false} to disable.&#10;     *&#10;     * @exception SocketException if there is an error&#10;     * in the underlying protocol, such as a TCP error.&#10;     *&#10;     * @since   1.4&#10;     *&#10;     * @see #getOOBInline()&#10;     "
  ]
  node [
    id 1398
    label "public boolean getOOBInline() throws SocketException"
    type "method"
    comment "&#10;     * Tests if {@link SocketOptions#SO_OOBINLINE SO_OOBINLINE} is enabled.&#10;     *&#10;     * @return a {@code boolean} indicating whether or not&#10;     *         {@link SocketOptions#SO_OOBINLINE SO_OOBINLINE}is enabled.&#10;     *&#10;     * @exception SocketException if there is an error&#10;     * in the underlying protocol, such as a TCP error.&#10;     * @since   1.4&#10;     * @see #setOOBInline(boolean)&#10;     "
  ]
  node [
    id 1399
    label "public synchronized int getSoTimeout() throws SocketException"
    type "method"
    comment "&#10;     * Retrieve setting for SO_TIMEOUT.  0 returns implies that the&#10;     * option is disabled (i.e., timeout of infinity).&#10;     *&#10;     * @return the setting for SO_TIMEOUT&#10;     * @throws SocketException if there is an error in the underlying protocol, such as an UDP error.&#10;     * @since   1.1&#10;     * @see #setSoTimeout(int)&#10;     "
  ]
  node [
    id 1400
    label "public synchronized void setSendBufferSize(int size) throws SocketException"
    type "method"
    comment "&#10;     * Sets the SO_SNDBUF option to the specified value for this&#10;     * {@code DatagramSocket}. The SO_SNDBUF option is used by the&#10;     * network implementation as a hint to size the underlying&#10;     * network I/O buffers. The SO_SNDBUF setting may also be used&#10;     * by the network implementation to determine the maximum size&#10;     * of the packet that can be sent on this socket.&#10;     * <p>&#10;     * As SO_SNDBUF is a hint, applications that want to verify&#10;     * what size the buffer is should call {@link #getSendBufferSize()}.&#10;     * <p>&#10;     * Increasing the buffer size may allow multiple outgoing packets&#10;     * to be queued by the network implementation when the send rate&#10;     * is high.&#10;     * <p>&#10;     * Note: If {@link #send(DatagramPacket)} is used to send a&#10;     * {@code DatagramPacket} that is larger than the setting&#10;     * of SO_SNDBUF then it is implementation specific if the&#10;     * packet is sent or discarded.&#10;     *&#10;     * @param size the size to which to set the send buffer&#10;     * size. This value must be greater than 0.&#10;     *&#10;     * @exception SocketException if there is an error&#10;     * in the underlying protocol, such as an UDP error.&#10;     * @exception IllegalArgumentException if the value is 0 or is&#10;     * negative.&#10;     * @see #getSendBufferSize()&#10;     "
  ]
  node [
    id 1401
    label "getSendBufferSize()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1402
    label "public synchronized int getSendBufferSize() throws SocketException"
    type "method"
    comment "&#10;     * Get value of the SO_SNDBUF option for this {@code DatagramSocket}, that is the&#10;     * buffer size used by the platform for output on this {@code DatagramSocket}.&#10;     *&#10;     * @return the value of the SO_SNDBUF option for this {@code DatagramSocket}&#10;     * @exception SocketException if there is an error in&#10;     * the underlying protocol, such as an UDP error.&#10;     * @see #setSendBufferSize&#10;     "
  ]
  node [
    id 1403
    label "getReceiveBufferSize()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1404
    label "public void setKeepAlive(boolean on) throws SocketException"
    type "method"
    comment "&#10;     * Enable/disable {@link SocketOptions#SO_KEEPALIVE SO_KEEPALIVE}.&#10;     *&#10;     * @param on  whether or not to have socket keep alive turned on.&#10;     * @exception SocketException if there is an error&#10;     * in the underlying protocol, such as a TCP error.&#10;     * @since 1.3&#10;     * @see #getKeepAlive()&#10;     "
  ]
  node [
    id 1405
    label "public boolean getKeepAlive() throws SocketException"
    type "method"
    comment "&#10;     * Tests if {@link SocketOptions#SO_KEEPALIVE SO_KEEPALIVE} is enabled.&#10;     *&#10;     * @return a {@code boolean} indicating whether or not&#10;     *         {@link SocketOptions#SO_KEEPALIVE SO_KEEPALIVE} is enabled.&#10;     * @exception SocketException if there is an error&#10;     * in the underlying protocol, such as a TCP error.&#10;     * @since   1.3&#10;     * @see #setKeepAlive(boolean)&#10;     "
  ]
  node [
    id 1406
    label "public void setTrafficClass(int tc) throws SocketException"
    type "method"
    comment "&#10;     * Sets traffic class or type-of-service octet in the IP&#10;     * header for packets sent from this Socket.&#10;     * As the underlying network implementation may ignore this&#10;     * value applications should consider it a hint.&#10;     *&#10;     * <P> The tc <B>must</B> be in the range {@code 0 <= tc <=&#10;     * 255} or an IllegalArgumentException will be thrown.&#10;     * <p>Notes:&#10;     * <p>For Internet Protocol v4 the value consists of an&#10;     * {@code integer}, the least significant 8 bits of which&#10;     * represent the value of the TOS octet in IP packets sent by&#10;     * the socket.&#10;     * RFC 1349 defines the TOS values as follows:&#10;     *&#10;     * <UL>&#10;     * <LI><CODE>IPTOS_LOWCOST (0x02)</CODE></LI>&#10;     * <LI><CODE>IPTOS_RELIABILITY (0x04)</CODE></LI>&#10;     * <LI><CODE>IPTOS_THROUGHPUT (0x08)</CODE></LI>&#10;     * <LI><CODE>IPTOS_LOWDELAY (0x10)</CODE></LI>&#10;     * </UL>&#10;     * The last low order bit is always ignored as this&#10;     * corresponds to the MBZ (must be zero) bit.&#10;     * <p>&#10;     * Setting bits in the precedence field may result in a&#10;     * SocketException indicating that the operation is not&#10;     * permitted.&#10;     * <p>&#10;     * As RFC 1122 section 4.2.4.2 indicates, a compliant TCP&#10;     * implementation should, but is not required to, let application&#10;     * change the TOS field during the lifetime of a connection.&#10;     * So whether the type-of-service field can be changed after the&#10;     * TCP connection has been established depends on the implementation&#10;     * in the underlying platform. Applications should not assume that&#10;     * they can change the TOS field after the connection.&#10;     * <p>&#10;     * For Internet Protocol v6 {@code tc} is the value that&#10;     * would be placed into the sin6_flowinfo field of the IP header.&#10;     *&#10;     * @param tc        an {@code int} value for the bitset.&#10;     * @throws SocketException if there is an error setting the&#10;     * traffic class or type-of-service&#10;     * @since 1.4&#10;     * @see #getTrafficClass&#10;     * @see SocketOptions#IP_TOS&#10;     "
  ]
  node [
    id 1407
    label "public int getTrafficClass() throws SocketException"
    type "method"
    comment "&#10;     * Gets traffic class or type-of-service in the IP header&#10;     * for packets sent from this Socket&#10;     * <p>&#10;     * As the underlying network implementation may ignore the&#10;     * traffic class or type-of-service set using {@link #setTrafficClass(int)}&#10;     * this method may return a different value than was previously&#10;     * set using the {@link #setTrafficClass(int)} method on this Socket.&#10;     *&#10;     * @return the traffic class or type-of-service already set&#10;     * @throws SocketException if there is an error obtaining the&#10;     * traffic class or type-of-service value.&#10;     * @since 1.4&#10;     * @see #setTrafficClass(int)&#10;     * @see SocketOptions#IP_TOS&#10;     "
  ]
  node [
    id 1408
    label "setTrafficClass(int)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1409
    label "public synchronized void close() throws IOException"
    type "method"
    comment "&#10;     * Closes this socket.&#10;     * <p>&#10;     * Any thread currently blocked in an I/O operation upon this socket&#10;     * will throw a {@link SocketException}.&#10;     * <p>&#10;     * Once a socket has been closed, it is not available for further networking&#10;     * use (i.e. can't be reconnected or rebound). A new socket needs to be&#10;     * created.&#10;     *&#10;     * <p> Closing this socket will also close the socket's&#10;     * {@link java.io.InputStream InputStream} and&#10;     * {@link java.io.OutputStream OutputStream}.&#10;     *&#10;     * <p> If this socket has an associated channel then the channel is closed&#10;     * as well.&#10;     *&#10;     * @exception  IOException  if an I/O error occurs when closing this socket.&#10;     * @revised 1.4&#10;     * @spec JSR-51&#10;     * @see #isClosed&#10;     "
  ]
  node [
    id 1410
    label "public void shutdownInput() throws IOException"
    type "method"
    comment "&#10;     * Places the input stream for this socket at &#34;end of stream&#34;.&#10;     * Any data sent to the input stream side of the socket is acknowledged&#10;     * and then silently discarded.&#10;     * <p>&#10;     * If you read from a socket input stream after invoking this method on the&#10;     * socket, the stream's {@code available} method will return 0, and its&#10;     * {@code read} methods will return {@code -1} (end of stream).&#10;     *&#10;     * @exception IOException if an I/O error occurs when shutting down this&#10;     * socket.&#10;     *&#10;     * @since 1.3&#10;     * @see java.net.Socket#shutdownOutput()&#10;     * @see java.net.Socket#close()&#10;     * @see java.net.Socket#setSoLinger(boolean, int)&#10;     * @see #isInputShutdown&#10;     "
  ]
  node [
    id 1411
    label "public void shutdownOutput() throws IOException"
    type "method"
    comment "&#10;     * Disables the output stream for this socket.&#10;     * For a TCP socket, any previously written data will be sent&#10;     * followed by TCP's normal connection termination sequence.&#10;     *&#10;     * If you write to a socket output stream after invoking&#10;     * shutdownOutput() on the socket, the stream will throw&#10;     * an IOException.&#10;     *&#10;     * @exception IOException if an I/O error occurs when shutting down this&#10;     * socket.&#10;     *&#10;     * @since 1.3&#10;     * @see java.net.Socket#shutdownInput()&#10;     * @see java.net.Socket#close()&#10;     * @see java.net.Socket#setSoLinger(boolean, int)&#10;     * @see #isOutputShutdown&#10;     "
  ]
  node [
    id 1412
    label "public boolean isConnected()"
    type "method"
    comment "&#10;     * Returns the connection state of the socket.&#10;     * <p>&#10;     * If the socket was connected prior to being {@link #close closed},&#10;     * then this method will continue to return {@code true}&#10;     * after the socket is closed.&#10;     *&#10;     * @return true if the socket successfully connected to a server&#10;     * @since 1.4&#10;     "
  ]
  node [
    id 1413
    label "isClosed()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1414
    label "public boolean isInputShutdown()"
    type "method"
    comment "&#10;     * Returns whether the read-half of the socket connection is closed.&#10;     *&#10;     * @return true if the input of the socket has been shutdown&#10;     * @since 1.4&#10;     * @see #shutdownInput&#10;     "
  ]
  node [
    id 1415
    label "public boolean isOutputShutdown()"
    type "method"
    comment "&#10;     * Returns whether the write-half of the socket connection is closed.&#10;     *&#10;     * @return true if the output of the socket has been shutdown&#10;     * @since 1.4&#10;     * @see #shutdownOutput&#10;     "
  ]
  node [
    id 1416
    label "public static synchronized void setSocketImplFactory(SocketImplFactory fac) throws IOException"
    type "method"
    comment "&#10;     * Sets the client socket implementation factory for the&#10;     * application. The factory can be specified only once.&#10;     * <p>&#10;     * When an application creates a new client socket, the socket&#10;     * implementation factory's {@code createSocketImpl} method is&#10;     * called to create the actual socket implementation.&#10;     * <p>&#10;     * Passing {@code null} to the method is a no-op unless the factory&#10;     * was already set.&#10;     * <p>If there is a security manager, this method first calls&#10;     * the security manager's {@code checkSetFactory} method&#10;     * to ensure the operation is allowed.&#10;     * This could result in a SecurityException.&#10;     *&#10;     * @param      fac   the desired factory.&#10;     * @exception  IOException  if an I/O error occurs when setting the&#10;     *               socket factory.&#10;     * @exception  SocketException  if the factory is already defined.&#10;     * @exception  SecurityException  if a security manager exists and its&#10;     *             {@code checkSetFactory} method doesn't allow the operation.&#10;     * @see        java.net.SocketImplFactory#createSocketImpl()&#10;     * @see        SecurityManager#checkSetFactory&#10;     "
  ]
  node [
    id 1417
    label "public Socket setOption(SocketOption<T> name, T value) throws IOException"
    type "method"
    comment "&#10;     * Sets the value of a socket option.&#10;     *&#10;     * @param <T> The type of the socket option value&#10;     * @param name The socket option&#10;     * @param value The value of the socket option. A value of {@code null}&#10;     *              may be valid for some options.&#10;     * @return this Socket&#10;     *&#10;     * @throws UnsupportedOperationException if the socket does not support&#10;     *         the option.&#10;     *&#10;     * @throws IllegalArgumentException if the value is not valid for&#10;     *         the option.&#10;     *&#10;     * @throws IOException if an I/O error occurs, or if the socket is closed.&#10;     *&#10;     * @throws NullPointerException if name is {@code null}&#10;     *&#10;     * @throws SecurityException if a security manager is set and if the socket&#10;     *         option requires a security permission and if the caller does&#10;     *         not have the required permission.&#10;     *         {@link java.net.StandardSocketOptions StandardSocketOptions}&#10;     *         do not require any security permission.&#10;     *&#10;     * @since 9&#10;     "
  ]
  node [
    id 1418
    label "public abstract boolean isConnected()"
    type "method"
    comment "&#10;     * Tells whether or not this channel's socket is connected.&#10;     *&#10;     * @return  {@code true} if, and only if, this channel's socket&#10;     *          is {@link #isOpen open} and connected&#10;     "
  ]
  node [
    id 1419
    label "isOpen"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1420
    label "public abstract boolean isConnectionPending()"
    type "method"
    comment "&#10;     * Tells whether or not a connection operation is in progress on this&#10;     * channel.&#10;     *&#10;     * @return  {@code true} if, and only if, a connection operation has been&#10;     *          initiated on this channel but not yet completed by invoking the&#10;     *          {@link #finishConnect finishConnect} method&#10;     "
  ]
  node [
    id 1421
    label "finishConnect"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1422
    label "public abstract boolean connect(SocketAddress remote) throws IOException"
    type "method"
    comment "&#10;     * Connects this channel's socket.&#10;     *&#10;     * <p> If this channel is in non-blocking mode then an invocation of this&#10;     * method initiates a non-blocking connection operation.  If the connection&#10;     * is established immediately, as can happen with a local connection, then&#10;     * this method returns {@code true}.  Otherwise this method returns&#10;     * {@code false} and the connection operation must later be completed by&#10;     * invoking the {@link #finishConnect finishConnect} method.&#10;     *&#10;     * <p> If this channel is in blocking mode then an invocation of this&#10;     * method will block until the connection is established or an I/O error&#10;     * occurs.&#10;     *&#10;     * <p> This method performs exactly the same security checks as the {@link&#10;     * java.net.Socket} class.  That is, if a security manager has been&#10;     * installed then this method verifies that its {@link&#10;     * java.lang.SecurityManager#checkConnect checkConnect} method permits&#10;     * connecting to the address and port number of the given remote endpoint.&#10;     *&#10;     * <p> This method may be invoked at any time.  If a read or write&#10;     * operation upon this channel is invoked while an invocation of this&#10;     * method is in progress then that operation will first block until this&#10;     * invocation is complete.  If a connection attempt is initiated but fails,&#10;     * that is, if an invocation of this method throws a checked exception,&#10;     * then the channel will be closed.  </p>&#10;     *&#10;     * @param  remote&#10;     *         The remote address to which this channel is to be connected&#10;     *&#10;     * @return  {@code true} if a connection was established,&#10;     *          {@code false} if this channel is in non-blocking mode&#10;     *          and the connection operation is in progress&#10;     *&#10;     * @throws  AlreadyConnectedException&#10;     *          If this channel is already connected&#10;     *&#10;     * @throws  ConnectionPendingException&#10;     *          If a non-blocking connection operation is already in progress&#10;     *          on this channel&#10;     *&#10;     * @throws  ClosedChannelException&#10;     *          If this channel is closed&#10;     *&#10;     * @throws  AsynchronousCloseException&#10;     *          If another thread closes this channel&#10;     *          while the connect operation is in progress&#10;     *&#10;     * @throws  ClosedByInterruptException&#10;     *          If another thread interrupts the current thread&#10;     *          while the connect operation is in progress, thereby&#10;     *          closing the channel and setting the current thread's&#10;     *          interrupt status&#10;     *&#10;     * @throws  UnresolvedAddressException&#10;     *          If the given remote address is not fully resolved&#10;     *&#10;     * @throws  UnsupportedAddressTypeException&#10;     *          If the type of the given remote address is not supported&#10;     *&#10;     * @throws  SecurityException&#10;     *          If a security manager has been installed&#10;     *          and it does not permit access to the given remote endpoint&#10;     *&#10;     * @throws  IOException&#10;     *          If some other I/O error occurs&#10;     "
  ]
  node [
    id 1423
    label "public abstract boolean finishConnect() throws IOException"
    type "method"
    comment "&#10;     * Finishes the process of connecting a socket channel.&#10;     *&#10;     * <p> A non-blocking connection operation is initiated by placing a socket&#10;     * channel in non-blocking mode and then invoking its {@link #connect&#10;     * connect} method.  Once the connection is established, or the attempt has&#10;     * failed, the socket channel will become connectable and this method may&#10;     * be invoked to complete the connection sequence.  If the connection&#10;     * operation failed then invoking this method will cause an appropriate&#10;     * {@link java.io.IOException} to be thrown.&#10;     *&#10;     * <p> If this channel is already connected then this method will not block&#10;     * and will immediately return {@code true}.  If this channel is in&#10;     * non-blocking mode then this method will return {@code false} if the&#10;     * connection process is not yet complete.  If this channel is in blocking&#10;     * mode then this method will block until the connection either completes&#10;     * or fails, and will always either return {@code true} or throw a checked&#10;     * exception describing the failure.&#10;     *&#10;     * <p> This method may be invoked at any time.  If a read or write&#10;     * operation upon this channel is invoked while an invocation of this&#10;     * method is in progress then that operation will first block until this&#10;     * invocation is complete.  If a connection attempt fails, that is, if an&#10;     * invocation of this method throws a checked exception, then the channel&#10;     * will be closed.  </p>&#10;     *&#10;     * @return  {@code true} if, and only if, this channel's socket is now&#10;     *          connected&#10;     *&#10;     * @throws  NoConnectionPendingException&#10;     *          If this channel is not connected and a connection operation&#10;     *          has not been initiated&#10;     *&#10;     * @throws  ClosedChannelException&#10;     *          If this channel is closed&#10;     *&#10;     * @throws  AsynchronousCloseException&#10;     *          If another thread closes this channel&#10;     *          while the connect operation is in progress&#10;     *&#10;     * @throws  ClosedByInterruptException&#10;     *          If another thread interrupts the current thread&#10;     *          while the connect operation is in progress, thereby&#10;     *          closing the channel and setting the current thread's&#10;     *          interrupt status&#10;     *&#10;     * @throws  IOException&#10;     *          If some other I/O error occurs&#10;     "
  ]
  node [
    id 1424
    label "connectconnect"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1425
    label "public abstract SocketAddress getRemoteAddress() throws IOException"
    type "method"
    comment "&#10;     * Returns the remote address to which this channel's socket is connected.&#10;     *&#10;     * @return  The remote address; {@code null} if the channel's socket is not&#10;     *          connected&#10;     *&#10;     * @throws  ClosedChannelException&#10;     *          If the channel is closed&#10;     * @throws  IOException&#10;     *          If an I/O error occurs&#10;     *&#10;     * @since 1.7&#10;     "
  ]
  node [
    id 1426
    label "java.net.InetSocketAddress"
    type "class"
    comment "&#10; *&#10; * This class implements an IP Socket Address (IP address + port number)&#10; * It can also be a pair (hostname + port number), in which case an attempt&#10; * will be made to resolve the hostname. If resolution fails then the address&#10; * is said to be <I>unresolved</I> but can still be used on some circumstances&#10; * like connecting through a proxy.&#10; * <p>&#10; * It provides an immutable object used by sockets for binding, connecting, or&#10; * as returned values.&#10; * <p>&#10; * The <i>wildcard</i> is a special local IP address. It usually means &#34;any&#34;&#10; * and can only be used for {@code bind} operations.&#10; *&#10; * @see java.net.Socket&#10; * @see java.net.ServerSocket&#10; * @since 1.4&#10; "
  ]
  node [
    id 1427
    label "public static InetSocketAddress createUnresolved(String host, int port)"
    type "method"
    comment "&#10;     *&#10;     * Creates an unresolved socket address from a hostname and a port number.&#10;     * <p>&#10;     * No attempt will be made to resolve the hostname into an InetAddress.&#10;     * The address will be flagged as <I>unresolved</I>.&#10;     * <p>&#10;     * A valid port value is between 0 and 65535.&#10;     * A port number of {@code zero} will let the system pick up an&#10;     * ephemeral port in a {@code bind} operation.&#10;     *&#10;     * @param   host    the Host name&#10;     * @param   port    The port number&#10;     * @throws IllegalArgumentException if the port parameter is outside&#10;     *                  the range of valid port values, or if the hostname&#10;     *                  parameter is {@code null}.&#10;     * @see     #isUnresolved()&#10;     * @return  an {@code InetSocketAddress} representing the unresolved&#10;     *          socket address&#10;     * @since 1.5&#10;     "
  ]
  node [
    id 1428
    label "private void writeObject(ObjectOutputStream out) throws IOException"
    type "method"
    comment "&#10;     * Writes the state of this object to the stream.&#10;     *&#10;     * @param  out the {@code ObjectOutputStream} to which data is written&#10;     * @throws IOException if an I/O error occurs&#10;     "
  ]
  node [
    id 1429
    label "private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException"
    type "method"
    comment "&#10;     * Restores the state of this object from the stream.&#10;     *&#10;     * @param  in the {@code ObjectInputStream} from which data is read&#10;     * @throws IOException if an I/O error occurs&#10;     * @throws ClassNotFoundException if a serialized class cannot be loaded&#10;     "
  ]
  node [
    id 1430
    label "private void readObjectNoData() throws ObjectStreamException"
    type "method"
    comment "&#10;     * Throws {@code InvalidObjectException}, always.&#10;     * @throws ObjectStreamException always&#10;     "
  ]
  node [
    id 1431
    label "public final int getPort()"
    type "method"
    comment "&#10;     * Gets the port number.&#10;     *&#10;     * @return the port number.&#10;     "
  ]
  node [
    id 1432
    label "public final InetAddress getAddress()"
    type "method"
    comment "&#10;     * Gets the {@code InetAddress}.&#10;     *&#10;     * @return the InetAddress or {@code null} if it is unresolved.&#10;     "
  ]
  node [
    id 1433
    label "public final String getHostName()"
    type "method"
    comment "&#10;     * Gets the {@code hostname}.&#10;     * Note: This method may trigger a name service reverse lookup if the&#10;     * address was created with a literal IP address.&#10;     *&#10;     * @return  the hostname part of the address.&#10;     "
  ]
  node [
    id 1434
    label "public final String getHostString()"
    type "method"
    comment "&#10;     * Returns the hostname, or the String form of the address if it&#10;     * doesn't have a hostname (it was created using a literal).&#10;     * This has the benefit of <b>not</b> attempting a reverse lookup.&#10;     *&#10;     * @return the hostname, or String representation of the address.&#10;     * @since 1.7&#10;     "
  ]
  node [
    id 1435
    label "public final boolean isUnresolved()"
    type "method"
    comment "&#10;     * Checks whether the address has been resolved or not.&#10;     *&#10;     * @return {@code true} if the hostname couldn't be resolved into&#10;     *          an {@code InetAddress}.&#10;     "
  ]
  node [
    id 1436
    label "getHostString()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1437
    label "toString()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1438
    label "public final boolean equals(Object obj)"
    type "method"
    comment "&#10;     * Compares this object against the specified object.&#10;     * The result is {@code true} if and only if the argument is&#10;     * not {@code null} and it represents the same address as&#10;     * this object.&#10;     * <p>&#10;     * Two instances of {@code InetSocketAddress} represent the same&#10;     * address if both the InetAddresses (or hostnames if it is unresolved) and port&#10;     * numbers are equal.&#10;     * If both addresses are unresolved, then the hostname and the port number&#10;     * are compared.&#10;     *&#10;     * Note: Hostnames are case insensitive. e.g. &#34;FooBar&#34; and &#34;foobar&#34; are&#10;     * considered equal.&#10;     *&#10;     * @param   obj   the object to compare against.&#10;     * @return  {@code true} if the objects are the same;&#10;     *          {@code false} otherwise.&#10;     * @see java.net.InetAddress#equals(java.lang.Object)&#10;     "
  ]
  node [
    id 1439
    label "public abstract int read(ByteBuffer dst) throws IOException"
    type "method"
    comment "&#10;     * Reads a sequence of bytes from this channel into the given buffer.&#10;     *&#10;     * <p> Bytes are read starting at this channel's current file position, and&#10;     * then the file position is updated with the number of bytes actually&#10;     * read.  Otherwise this method behaves exactly as specified in the {@link&#10;     * ReadableByteChannel} interface. </p>&#10;     "
  ]
  node [
    id 1440
    label "public abstract long read(ByteBuffer[] dsts, int offset, int length) throws IOException"
    type "method"
    comment "&#10;     * Reads a sequence of bytes from this channel into a subsequence of the&#10;     * given buffers.&#10;     *&#10;     * <p> Bytes are read starting at this channel's current file position, and&#10;     * then the file position is updated with the number of bytes actually&#10;     * read.  Otherwise this method behaves exactly as specified in the {@link&#10;     * ScatteringByteChannel} interface.  </p>&#10;     "
  ]
  node [
    id 1441
    label "public final long read(ByteBuffer[] dsts) throws IOException"
    type "method"
    comment "&#10;     * Reads a sequence of bytes from this channel into the given buffers.&#10;     *&#10;     * <p> Bytes are read starting at this channel's current file position, and&#10;     * then the file position is updated with the number of bytes actually&#10;     * read.  Otherwise this method behaves exactly as specified in the {@link&#10;     * ScatteringByteChannel} interface.  </p>&#10;     "
  ]
  node [
    id 1442
    label "public abstract int write(ByteBuffer src) throws IOException"
    type "method"
    comment "&#10;     * Writes a sequence of bytes to this channel from the given buffer.&#10;     *&#10;     * <p> Bytes are written starting at this channel's current file position&#10;     * unless the channel is in append mode, in which case the position is&#10;     * first advanced to the end of the file.  The file is grown, if necessary,&#10;     * to accommodate the written bytes, and then the file position is updated&#10;     * with the number of bytes actually written.  Otherwise this method&#10;     * behaves exactly as specified by the {@link WritableByteChannel}&#10;     * interface. </p>&#10;     "
  ]
  node [
    id 1443
    label "public abstract long write(ByteBuffer[] srcs, int offset, int length) throws IOException"
    type "method"
    comment "&#10;     * Writes a sequence of bytes to this channel from a subsequence of the&#10;     * given buffers.&#10;     *&#10;     * <p> Bytes are written starting at this channel's current file position&#10;     * unless the channel is in append mode, in which case the position is&#10;     * first advanced to the end of the file.  The file is grown, if necessary,&#10;     * to accommodate the written bytes, and then the file position is updated&#10;     * with the number of bytes actually written.  Otherwise this method&#10;     * behaves exactly as specified in the {@link GatheringByteChannel}&#10;     * interface.  </p>&#10;     "
  ]
  node [
    id 1444
    label "public final long write(ByteBuffer[] srcs) throws IOException"
    type "method"
    comment "&#10;     * Writes a sequence of bytes to this channel from the given buffers.&#10;     *&#10;     * <p> Bytes are written starting at this channel's current file position&#10;     * unless the channel is in append mode, in which case the position is&#10;     * first advanced to the end of the file.  The file is grown, if necessary,&#10;     * to accommodate the written bytes, and then the file position is updated&#10;     * with the number of bytes actually written.  Otherwise this method&#10;     * behaves exactly as specified in the {@link GatheringByteChannel}&#10;     * interface.  </p>&#10;     "
  ]
  node [
    id 1445
    label "java.nio.channels.DatagramChannel"
    type "class"
    comment ""
  ]
  node [
    id 1446
    label "public static DatagramChannel open() throws IOException"
    type "method"
    comment "&#10;     * Opens a datagram channel.&#10;     *&#10;     * <p> The new channel is created by invoking the {@link&#10;     * java.nio.channels.spi.SelectorProvider#openDatagramChannel()&#10;     * openDatagramChannel} method of the system-wide default {@link&#10;     * java.nio.channels.spi.SelectorProvider} object.  The channel will not be&#10;     * connected.&#10;     *&#10;     * <p> The {@link ProtocolFamily ProtocolFamily} of the channel's socket&#10;     * is platform (and possibly configuration) dependent and therefore unspecified.&#10;     * The {@link #open(ProtocolFamily) open} allows the protocol family to be&#10;     * selected when opening a datagram channel, and should be used to open&#10;     * datagram channels that are intended for Internet Protocol multicasting.&#10;     *&#10;     * @return  A new datagram channel&#10;     *&#10;     * @throws  IOException&#10;     *          If an I/O error occurs&#10;     "
  ]
  node [
    id 1447
    label "open(ProtocolFamily)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1448
    label "java.net.ProtocolFamily"
    type "class"
    comment ""
  ]
  node [
    id 1449
    label " String name()"
    type "method"
    comment "&#10;     * Returns the name of the attribute view. Attribute views of this type&#10;     * have the name {@code &#34;owner&#34;}.&#10;     "
  ]
  node [
    id 1450
    label "public static DatagramChannel open(ProtocolFamily family) throws IOException"
    type "method"
    comment "&#10;     * Opens a datagram channel.&#10;     *&#10;     * <p> The {@code family} parameter is used to specify the {@link&#10;     * ProtocolFamily}. If the datagram channel is to be used for IP multicasting&#10;     * then this should correspond to the address type of the multicast groups&#10;     * that this channel will join.&#10;     *&#10;     * <p> The new channel is created by invoking the {@link&#10;     * java.nio.channels.spi.SelectorProvider#openDatagramChannel(ProtocolFamily)&#10;     * openDatagramChannel} method of the system-wide default {@link&#10;     * java.nio.channels.spi.SelectorProvider} object.  The channel will not be&#10;     * connected.&#10;     *&#10;     * @param   family&#10;     *          The protocol family&#10;     *&#10;     * @return  A new datagram channel&#10;     *&#10;     * @throws  UnsupportedOperationException&#10;     *          If the specified protocol family is not supported. For example,&#10;     *          suppose the parameter is specified as {@link&#10;     *          java.net.StandardProtocolFamily#INET6 StandardProtocolFamily.INET6}&#10;     *          but IPv6 is not enabled on the platform.&#10;     * @throws  IOException&#10;     *          If an I/O error occurs&#10;     *&#10;     * @since   1.7&#10;     "
  ]
  node [
    id 1451
    label "INET6"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1452
    label "public abstract DatagramChannel bind(SocketAddress local) throws IOException"
    type "method"
    comment "&#10;     * @throws  AlreadyBoundException               {@inheritDoc}&#10;     * @throws  UnsupportedAddressTypeException     {@inheritDoc}&#10;     * @throws  ClosedChannelException              {@inheritDoc}&#10;     * @throws  IOException                         {@inheritDoc}&#10;     * @throws  SecurityException&#10;     *          If a security manager has been installed and its {@link&#10;     *          SecurityManager#checkListen checkListen} method denies the&#10;     *          operation&#10;     *&#10;     * @since 1.7&#10;     "
  ]
  node [
    id 1453
    label "public abstract DatagramChannel setOption(SocketOption<T> name, T value) throws IOException"
    type "method"
    comment "&#10;     * @throws  UnsupportedOperationException           {@inheritDoc}&#10;     * @throws  IllegalArgumentException                {@inheritDoc}&#10;     * @throws  ClosedChannelException                  {@inheritDoc}&#10;     * @throws  IOException                             {@inheritDoc}&#10;     *&#10;     * @since 1.7&#10;     "
  ]
  node [
    id 1454
    label "public abstract DatagramSocket socket()"
    type "method"
    comment "&#10;     * Retrieves a datagram socket associated with this channel.&#10;     *&#10;     * <p> The returned object will not declare any public methods that are not&#10;     * declared in the {@link java.net.DatagramSocket} class.  </p>&#10;     *&#10;     * @return  A datagram socket associated with this channel&#10;     "
  ]
  node [
    id 1455
    label "java.net.DatagramSocket"
    type "class"
    comment "&#10; * This class represents a socket for sending and receiving datagram packets.&#10; *&#10; * <p>A datagram socket is the sending or receiving point for a packet&#10; * delivery service. Each packet sent or received on a datagram socket&#10; * is individually addressed and routed. Multiple packets sent from&#10; * one machine to another may be routed differently, and may arrive in&#10; * any order.&#10; *&#10; * <p> Where possible, a newly constructed {@code DatagramSocket} has the&#10; * {@link SocketOptions#SO_BROADCAST SO_BROADCAST} socket option enabled so as&#10; * to allow the transmission of broadcast datagrams. In order to receive&#10; * broadcast packets a DatagramSocket should be bound to the wildcard address.&#10; * In some implementations, broadcast packets may also be received when&#10; * a DatagramSocket is bound to a more specific address.&#10; * <p>&#10; * Example:&#10; * {@code&#10; *              DatagramSocket s = new DatagramSocket(null);&#10; *              s.bind(new InetSocketAddress(8888));&#10; * }&#10; * Which is equivalent to:&#10; * {@code&#10; *              DatagramSocket s = new DatagramSocket(8888);&#10; * }&#10; * Both cases will create a DatagramSocket able to receive broadcasts on&#10; * UDP port 8888.&#10; *&#10; * @author  Pavani Diwanji&#10; * @see     java.net.DatagramPacket&#10; * @see     java.nio.channels.DatagramChannel&#10; * @since JDK1.0&#10; "
  ]
  node [
    id 1456
    label "private synchronized void connectInternal(InetAddress address, int port) throws SocketException"
    type "method"
    comment "&#10;     * Connects this socket to a remote socket address (IP address + port number).&#10;     * Binds socket if not already bound.&#10;     *&#10;     * @param   address The remote address.&#10;     * @param   port    The remote port&#10;     * @throws  SocketException if binding the socket fails.&#10;     "
  ]
  node [
    id 1457
    label " DatagramSocketImpl getImpl() throws SocketException"
    type "method"
    comment "&#10;     * Get the {@code DatagramSocketImpl} attached to this socket,&#10;     * creating it if necessary.&#10;     *&#10;     * @return  the {@code DatagramSocketImpl} attached to that&#10;     *          DatagramSocket&#10;     * @throws SocketException if creation fails.&#10;     * @since 1.4&#10;     "
  ]
  node [
    id 1458
    label "public synchronized void bind(SocketAddress addr) throws SocketException"
    type "method"
    comment "&#10;     * Binds this DatagramSocket to a specific address and port.&#10;     * <p>&#10;     * If the address is {@code null}, then the system will pick up&#10;     * an ephemeral port and a valid local address to bind the socket.&#10;     *&#10;     * @param   addr The address and port to bind to.&#10;     * @throws  SocketException if any error happens during the bind, or if the&#10;     *          socket is already bound.&#10;     * @throws  SecurityException  if a security manager exists and its&#10;     *             {@code checkListen} method doesn't allow the operation.&#10;     * @throws IllegalArgumentException if addr is a SocketAddress subclass&#10;     *         not supported by this socket.&#10;     * @since 1.4&#10;     "
  ]
  node [
    id 1459
    label "public void connect(InetAddress address, int port)"
    type "method"
    comment "&#10;     * Connects the socket to a remote address for this socket. When a&#10;     * socket is connected to a remote address, packets may only be&#10;     * sent to or received from that address. By default a datagram&#10;     * socket is not connected.&#10;     *&#10;     * <p>If the remote destination to which the socket is connected does not&#10;     * exist, or is otherwise unreachable, and if an ICMP destination unreachable&#10;     * packet has been received for that address, then a subsequent call to&#10;     * send or receive may throw a PortUnreachableException. Note, there is no&#10;     * guarantee that the exception will be thrown.&#10;     *&#10;     * <p> If a security manager has been installed then it is invoked to check&#10;     * access to the remote address. Specifically, if the given {@code address}&#10;     * is a {@link InetAddress#isMulticastAddress multicast address},&#10;     * the security manager's {@link&#10;     * java.lang.SecurityManager#checkMulticast(InetAddress)&#10;     * checkMulticast} method is invoked with the given {@code address}.&#10;     * Otherwise, the security manager's {@link&#10;     * java.lang.SecurityManager#checkConnect(String,int) checkConnect}&#10;     * and {@link java.lang.SecurityManager#checkAccept checkAccept} methods&#10;     * are invoked, with the given {@code address} and {@code port}, to&#10;     * verify that datagrams are permitted to be sent and received&#10;     * respectively.&#10;     *&#10;     * <p> When a socket is connected, {@link #receive receive} and&#10;     * {@link #send send} <b>will not perform any security checks</b>&#10;     * on incoming and outgoing packets, other than matching the packet's&#10;     * and the socket's address and port. On a send operation, if the&#10;     * packet's address is set and the packet's address and the socket's&#10;     * address do not match, an {@code IllegalArgumentException} will be&#10;     * thrown. A socket connected to a multicast address may only be used&#10;     * to send packets.&#10;     *&#10;     * @param address the remote address for the socket&#10;     *&#10;     * @param port the remote port for the socket.&#10;     *&#10;     * @throws IllegalArgumentException&#10;     *         if the address is null, or the port is out of range.&#10;     *&#10;     * @throws SecurityException&#10;     *         if a security manager has been installed and it does&#10;     *         not permit access to the given remote address&#10;     *&#10;     * @see #disconnect&#10;     "
  ]
  node [
    id 1460
    label "send"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1461
    label "receive"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1462
    label "public void connect(SocketAddress addr) throws SocketException"
    type "method"
    comment "&#10;     * Connects this socket to a remote socket address (IP address + port number).&#10;     *&#10;     * <p> If given an {@link InetSocketAddress InetSocketAddress}, this method&#10;     * behaves as if invoking {@link #connect(InetAddress,int) connect(InetAddress,int)}&#10;     * with the given socket addresses IP address and port number.&#10;     *&#10;     * @param   addr    The remote address.&#10;     *&#10;     * @throws  SocketException&#10;     *          if the connect fails&#10;     *&#10;     * @throws IllegalArgumentException&#10;     *         if {@code addr} is {@code null}, or {@code addr} is a SocketAddress&#10;     *         subclass not supported by this socket&#10;     *&#10;     * @throws SecurityException&#10;     *         if a security manager has been installed and it does&#10;     *         not permit access to the given remote address&#10;     *&#10;     * @since 1.4&#10;     "
  ]
  node [
    id 1463
    label "connect(InetAddress"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1464
    label "public void disconnect()"
    type "method"
    comment "&#10;     * Disconnects the socket. If the socket is closed or not connected,&#10;     * then this method has no effect.&#10;     *&#10;     * @see #connect&#10;     "
  ]
  node [
    id 1465
    label "public void send(DatagramPacket p) throws IOException"
    type "method"
    comment "&#10;     * Sends a datagram packet from this socket. The&#10;     * {@code DatagramPacket} includes information indicating the&#10;     * data to be sent, its length, the IP address of the remote host,&#10;     * and the port number on the remote host.&#10;     *&#10;     * <p>If there is a security manager, and the socket is not currently&#10;     * connected to a remote address, this method first performs some&#10;     * security checks. First, if {@code p.getAddress().isMulticastAddress()}&#10;     * is true, this method calls the&#10;     * security manager's {@code checkMulticast} method&#10;     * with {@code p.getAddress()} as its argument.&#10;     * If the evaluation of that expression is false,&#10;     * this method instead calls the security manager's&#10;     * {@code checkConnect} method with arguments&#10;     * {@code p.getAddress().getHostAddress()} and&#10;     * {@code p.getPort()}. Each call to a security manager method&#10;     * could result in a SecurityException if the operation is not allowed.&#10;     *&#10;     * @param      p   the {@code DatagramPacket} to be sent.&#10;     *&#10;     * @exception  IOException  if an I/O error occurs.&#10;     * @exception  SecurityException  if a security manager exists and its&#10;     *             {@code checkMulticast} or {@code checkConnect}&#10;     *             method doesn't allow the send.&#10;     * @exception  PortUnreachableException may be thrown if the socket is connected&#10;     *             to a currently unreachable destination. Note, there is no&#10;     *             guarantee that the exception will be thrown.&#10;     * @exception  java.nio.channels.IllegalBlockingModeException&#10;     *             if this socket has an associated channel,&#10;     *             and the channel is in non-blocking mode.&#10;     * @exception  IllegalArgumentException if the socket is connected,&#10;     *             and connected address and packet address differ.&#10;     *&#10;     * @see        java.net.DatagramPacket&#10;     * @see        SecurityManager#checkMulticast(InetAddress)&#10;     * @see        SecurityManager#checkConnect&#10;     * @revised 1.4&#10;     * @spec JSR-51&#10;     "
  ]
  node [
    id 1466
    label "public synchronized void receive(DatagramPacket p) throws IOException"
    type "method"
    comment "&#10;     * Receives a datagram packet from this socket. When this method&#10;     * returns, the {@code DatagramPacket}'s buffer is filled with&#10;     * the data received. The datagram packet also contains the sender's&#10;     * IP address, and the port number on the sender's machine.&#10;     * <p>&#10;     * This method blocks until a datagram is received. The&#10;     * {@code length} field of the datagram packet object contains&#10;     * the length of the received message. If the message is longer than&#10;     * the packet's length, the message is truncated.&#10;     * <p>&#10;     * If there is a security manager, a packet cannot be received if the&#10;     * security manager's {@code checkAccept} method&#10;     * does not allow it.&#10;     *&#10;     * @param      p   the {@code DatagramPacket} into which to place&#10;     *                 the incoming data.&#10;     * @exception  IOException  if an I/O error occurs.&#10;     * @exception  SocketTimeoutException  if setSoTimeout was previously called&#10;     *                 and the timeout has expired.&#10;     * @exception  PortUnreachableException may be thrown if the socket is connected&#10;     *             to a currently unreachable destination. Note, there is no guarantee that the&#10;     *             exception will be thrown.&#10;     * @exception  java.nio.channels.IllegalBlockingModeException&#10;     *             if this socket has an associated channel,&#10;     *             and the channel is in non-blocking mode.&#10;     * @see        java.net.DatagramPacket&#10;     * @see        java.net.DatagramSocket&#10;     * @revised 1.4&#10;     * @spec JSR-51&#10;     "
  ]
  node [
    id 1467
    label "send(DatagramPacket)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1468
    label "receive(DatagramPacket)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1469
    label "public synchronized void setReuseAddress(boolean on) throws SocketException"
    type "method"
    comment "&#10;     * Enable/disable the SO_REUSEADDR socket option.&#10;     * <p>&#10;     * For UDP sockets it may be necessary to bind more than one&#10;     * socket to the same socket address. This is typically for the&#10;     * purpose of receiving multicast packets&#10;     * (See {@link java.net.MulticastSocket}). The&#10;     * {@code SO_REUSEADDR} socket option allows multiple&#10;     * sockets to be bound to the same socket address if the&#10;     * {@code SO_REUSEADDR} socket option is enabled prior&#10;     * to binding the socket using {@link #bind(SocketAddress)}.&#10;     * <p>&#10;     * Note: This functionality is not supported by all existing platforms,&#10;     * so it is implementation specific whether this option will be ignored&#10;     * or not. However, if it is not supported then&#10;     * {@link #getReuseAddress()} will always return {@code false}.&#10;     * <p>&#10;     * When a {@code DatagramSocket} is created the initial setting&#10;     * of {@code SO_REUSEADDR} is disabled.&#10;     * <p>&#10;     * The behaviour when {@code SO_REUSEADDR} is enabled or&#10;     * disabled after a socket is bound (See {@link #isBound()})&#10;     * is not defined.&#10;     *&#10;     * @param on  whether to enable or disable the&#10;     * @exception SocketException if an error occurs enabling or&#10;     *            disabling the {@code SO_RESUEADDR} socket option,&#10;     *            or the socket is closed.&#10;     * @since 1.4&#10;     * @see #getReuseAddress()&#10;     * @see #bind(SocketAddress)&#10;     * @see #isBound()&#10;     * @see #isClosed()&#10;     "
  ]
  node [
    id 1470
    label "java.net.MulticastSocket"
    type "class"
    comment "&#10; * The multicast datagram socket class is useful for sending&#10; * and receiving IP multicast packets.  A MulticastSocket is&#10; * a (UDP) DatagramSocket, with additional capabilities for&#10; * joining &#34;groups&#34; of other multicast hosts on the internet.&#10; * <P>&#10; * A multicast group is specified by a class D IP address&#10; * and by a standard UDP port number. Class D IP addresses&#10; * are in the range <CODE>224.0.0.0</CODE> to <CODE>239.255.255.255</CODE>,&#10; * inclusive. The address 224.0.0.0 is reserved and should not be used.&#10; * <P>&#10; * One would join a multicast group by first creating a MulticastSocket&#10; * with the desired port, then invoking the&#10; * <CODE>joinGroup(InetAddress groupAddr)</CODE>&#10; * method:&#10; * <PRE>&#10; * // join a Multicast group and send the group salutations&#10; * ...&#10; * String msg = &#34;Hello&#34;;&#10; * InetAddress group = InetAddress.getByName(&#34;228.5.6.7&#34;);&#10; * MulticastSocket s = new MulticastSocket(6789);&#10; * s.joinGroup(group);&#10; * byte[] bytes = msg.getBytes(StandardCharsets.UTF_8);&#10; * DatagramPacket hi = new DatagramPacket(bytes, bytes.length,&#10; *                             group, 6789);&#10; * s.send(hi);&#10; * // get their responses!&#10; * byte[] buf = new byte[1000];&#10; * DatagramPacket recv = new DatagramPacket(buf, buf.length);&#10; * s.receive(recv);&#10; * ...&#10; * // OK, I'm done talking - leave the group...&#10; * s.leaveGroup(group);&#10; * </PRE>&#10; *&#10; * When one sends a message to a multicast group, <B>all</B> subscribing&#10; * recipients to that host and port receive the message (within the&#10; * time-to-live range of the packet, see below).  The socket needn't&#10; * be a member of the multicast group to send messages to it.&#10; * <P>&#10; * When a socket subscribes to a multicast group/port, it receives&#10; * datagrams sent by other hosts to the group/port, as do all other&#10; * members of the group and port.  A socket relinquishes membership&#10; * in a group by the leaveGroup(InetAddress addr) method.  <B>&#10; * Multiple MulticastSocket's</B> may subscribe to a multicast group&#10; * and port concurrently, and they will all receive group datagrams.&#10; * <P>&#10; * Currently applets are not allowed to use multicast sockets.&#10; *&#10; * @author Pavani Diwanji&#10; * @since  1.1&#10; "
  ]
  node [
    id 1471
    label "public void setTimeToLive(int ttl) throws IOException"
    type "method"
    comment "&#10;     * Set the default time-to-live for multicast packets sent out&#10;     * on this {@code MulticastSocket} in order to control the&#10;     * scope of the multicasts.&#10;     *&#10;     * <P> The ttl <B>must</B> be in the range {@code  0 <= ttl <=&#10;     * 255} or an {@code IllegalArgumentException} will be thrown.&#10;     * Multicast packets sent with a TTL of {@code 0} are not transmitted&#10;     * on the network but may be delivered locally.&#10;     *&#10;     * @param  ttl&#10;     *         the time-to-live&#10;     *&#10;     * @throws  IOException&#10;     *          if an I/O exception occurs while setting the&#10;     *          default time-to-live value&#10;     *&#10;     * @see #getTimeToLive()&#10;     "
  ]
  node [
    id 1472
    label "public int getTimeToLive() throws IOException"
    type "method"
    comment "&#10;     * Get the default time-to-live for multicast packets sent out on&#10;     * the socket.&#10;     * @exception IOException if an I/O exception occurs while&#10;     * getting the default time-to-live value&#10;     * @return the default time-to-live value&#10;     * @see #setTimeToLive(int)&#10;     "
  ]
  node [
    id 1473
    label "public void joinGroup(InetAddress mcastaddr) throws IOException"
    type "method"
    comment "&#10;     * Joins a multicast group. Its behavior may be affected by&#10;     * {@code setInterface} or {@code setNetworkInterface}.&#10;     *&#10;     * <p>If there is a security manager, this method first&#10;     * calls its {@code checkMulticast} method&#10;     * with the {@code mcastaddr} argument&#10;     * as its argument.&#10;     *&#10;     * @param mcastaddr is the multicast address to join&#10;     *&#10;     * @exception IOException if there is an error joining, or when the address&#10;     *            is not a multicast address, or the platform does not support&#10;     *            multicasting&#10;     * @exception  SecurityException  if a security manager exists and its&#10;     * {@code checkMulticast} method doesn't allow the join.&#10;     *&#10;     * @see SecurityManager#checkMulticast(InetAddress)&#10;     "
  ]
  node [
    id 1474
    label "public void leaveGroup(InetAddress mcastaddr) throws IOException"
    type "method"
    comment "&#10;     * Leave a multicast group. Its behavior may be affected by&#10;     * {@code setInterface} or {@code setNetworkInterface}.&#10;     *&#10;     * <p>If there is a security manager, this method first&#10;     * calls its {@code checkMulticast} method&#10;     * with the {@code mcastaddr} argument&#10;     * as its argument.&#10;     *&#10;     * @param mcastaddr is the multicast address to leave&#10;     * @exception IOException if there is an error leaving&#10;     * or when the address is not a multicast address.&#10;     * @exception  SecurityException  if a security manager exists and its&#10;     * {@code checkMulticast} method doesn't allow the operation.&#10;     *&#10;     * @see SecurityManager#checkMulticast(InetAddress)&#10;     "
  ]
  node [
    id 1475
    label "public void joinGroup(SocketAddress mcastaddr, NetworkInterface netIf) throws IOException"
    type "method"
    comment "&#10;     * Joins the specified multicast group at the specified interface.&#10;     *&#10;     * <p>If there is a security manager, this method first&#10;     * calls its {@code checkMulticast} method&#10;     * with the {@code mcastaddr} argument&#10;     * as its argument.&#10;     *&#10;     * @param mcastaddr is the multicast address to join&#10;     * @param netIf specifies the local interface to receive multicast&#10;     *        datagram packets, or <i>null</i> to defer to the interface set by&#10;     *       {@link MulticastSocket#setInterface(InetAddress)} or&#10;     *       {@link MulticastSocket#setNetworkInterface(NetworkInterface)}&#10;     *&#10;     * @exception IOException if there is an error joining, or when the address&#10;     *            is not a multicast address, or the platform does not support&#10;     *            multicasting&#10;     * @exception  SecurityException  if a security manager exists and its&#10;     * {@code checkMulticast} method doesn't allow the join.&#10;     * @throws  IllegalArgumentException if mcastaddr is null or is a&#10;     *          SocketAddress subclass not supported by this socket&#10;     *&#10;     * @see SecurityManager#checkMulticast(InetAddress)&#10;     * @since 1.4&#10;     "
  ]
  node [
    id 1476
    label "setNetworkInterface(NetworkInterface)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1477
    label "setInterface(InetAddress)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1478
    label "public void leaveGroup(SocketAddress mcastaddr, NetworkInterface netIf) throws IOException"
    type "method"
    comment "&#10;     * Leave a multicast group on a specified local interface.&#10;     *&#10;     * <p>If there is a security manager, this method first&#10;     * calls its {@code checkMulticast} method&#10;     * with the {@code mcastaddr} argument&#10;     * as its argument.&#10;     *&#10;     * @param mcastaddr is the multicast address to leave&#10;     * @param netIf specifies the local interface or <i>null</i> to defer&#10;     *             to the interface set by&#10;     *             {@link MulticastSocket#setInterface(InetAddress)} or&#10;     *             {@link MulticastSocket#setNetworkInterface(NetworkInterface)}&#10;     * @exception IOException if there is an error leaving&#10;     * or when the address is not a multicast address.&#10;     * @exception  SecurityException  if a security manager exists and its&#10;     * {@code checkMulticast} method doesn't allow the operation.&#10;     * @throws  IllegalArgumentException if mcastaddr is null or is a&#10;     *          SocketAddress subclass not supported by this socket&#10;     *&#10;     * @see SecurityManager#checkMulticast(InetAddress)&#10;     * @since 1.4&#10;     "
  ]
  node [
    id 1479
    label "public void setInterface(InetAddress inf) throws SocketException"
    type "method"
    comment "&#10;     * Set the multicast network interface used by methods&#10;     * whose behavior would be affected by the value of the&#10;     * network interface. Useful for multihomed hosts.&#10;     * @param inf the InetAddress&#10;     * @exception SocketException if there is an error in&#10;     * the underlying protocol, such as a TCP error.&#10;     * @see #getInterface()&#10;     "
  ]
  node [
    id 1480
    label "public InetAddress getInterface() throws SocketException"
    type "method"
    comment "&#10;     * Retrieve the address of the network interface used for&#10;     * multicast packets.&#10;     *&#10;     * @return An {@code InetAddress} representing&#10;     *  the address of the network interface used for&#10;     *  multicast packets.&#10;     *&#10;     * @exception SocketException if there is an error in&#10;     * the underlying protocol, such as a TCP error.&#10;     *&#10;     * @see #setInterface(java.net.InetAddress)&#10;     "
  ]
  node [
    id 1481
    label "public void setNetworkInterface(NetworkInterface netIf) throws SocketException"
    type "method"
    comment "&#10;     * Specify the network interface for outgoing multicast datagrams&#10;     * sent on this socket.&#10;     *&#10;     * @param netIf the interface&#10;     * @exception SocketException if there is an error in&#10;     * the underlying protocol, such as a TCP error.&#10;     * @see #getNetworkInterface()&#10;     * @since 1.4&#10;     "
  ]
  node [
    id 1482
    label "public NetworkInterface getNetworkInterface() throws SocketException"
    type "method"
    comment "&#10;     * Get the multicast network interface set.&#10;     *&#10;     * @exception SocketException if there is an error in&#10;     * the underlying protocol, such as a TCP error.&#10;     * @return the multicast {@code NetworkInterface} currently&#10;     * set or {@code null} when no interface is set.&#10;     * @see #setNetworkInterface(NetworkInterface)&#10;     * @since 1.4&#10;     "
  ]
  node [
    id 1483
    label "public void setLoopbackMode(boolean disable) throws SocketException"
    type "method"
    comment "&#10;     * Disable/Enable local loopback of multicast datagrams&#10;     * The option is used by the platform's networking code as a hint&#10;     * for setting whether multicast data will be looped back to&#10;     * the local socket.&#10;     *&#10;     * <p>Because this option is a hint, applications that want to&#10;     * verify what loopback mode is set to should call&#10;     * {@link #getLoopbackMode()}&#10;     * @param disable {@code true} to disable the LoopbackMode&#10;     * @throws SocketException if an error occurs while setting the value&#10;     * @since 1.4&#10;     * @see #getLoopbackMode&#10;     "
  ]
  node [
    id 1484
    label "getLoopbackMode()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1485
    label "public boolean getLoopbackMode() throws SocketException"
    type "method"
    comment "&#10;     * Get the setting for local loopback of multicast datagrams.&#10;     *&#10;     * @throws SocketException  if an error occurs while getting the value&#10;     * @return true if the LoopbackMode has been disabled&#10;     * @since 1.4&#10;     * @see #setLoopbackMode&#10;     "
  ]
  node [
    id 1486
    label "public synchronized boolean getReuseAddress() throws SocketException"
    type "method"
    comment "&#10;     * Tests if SO_REUSEADDR is enabled.&#10;     *&#10;     * @return a {@code boolean} indicating whether or not SO_REUSEADDR is enabled.&#10;     * @exception SocketException if there is an error&#10;     * in the underlying protocol, such as an UDP error.&#10;     * @since   1.4&#10;     * @see #setReuseAddress(boolean)&#10;     "
  ]
  node [
    id 1487
    label "public synchronized void setBroadcast(boolean on) throws SocketException"
    type "method"
    comment "&#10;     * Enable/disable SO_BROADCAST.&#10;     *&#10;     * <p> Some operating systems may require that the Java virtual machine be&#10;     * started with implementation specific privileges to enable this option or&#10;     * send broadcast datagrams.&#10;     *&#10;     * @param  on&#10;     *         whether or not to have broadcast turned on.&#10;     *&#10;     * @throws  SocketException&#10;     *          if there is an error in the underlying protocol, such as an UDP&#10;     *          error.&#10;     *&#10;     * @since 1.4&#10;     * @see #getBroadcast()&#10;     "
  ]
  node [
    id 1488
    label "public synchronized boolean getBroadcast() throws SocketException"
    type "method"
    comment "&#10;     * Tests if SO_BROADCAST is enabled.&#10;     * @return a {@code boolean} indicating whether or not SO_BROADCAST is enabled.&#10;     * @exception SocketException if there is an error&#10;     * in the underlying protocol, such as an UDP error.&#10;     * @since 1.4&#10;     * @see #setBroadcast(boolean)&#10;     "
  ]
  node [
    id 1489
    label "public synchronized void setTrafficClass(int tc) throws SocketException"
    type "method"
    comment "&#10;     * Sets traffic class or type-of-service octet in the IP&#10;     * datagram header for datagrams sent from this DatagramSocket.&#10;     * As the underlying network implementation may ignore this&#10;     * value applications should consider it a hint.&#10;     *&#10;     * <P> The tc <B>must</B> be in the range {@code 0 <= tc <=&#10;     * 255} or an IllegalArgumentException will be thrown.&#10;     * <p>Notes:&#10;     * <p>For Internet Protocol v4 the value consists of an&#10;     * {@code integer}, the least significant 8 bits of which&#10;     * represent the value of the TOS octet in IP packets sent by&#10;     * the socket.&#10;     * RFC 1349 defines the TOS values as follows:&#10;     *&#10;     * <UL>&#10;     * <LI><CODE>IPTOS_LOWCOST (0x02)</CODE></LI>&#10;     * <LI><CODE>IPTOS_RELIABILITY (0x04)</CODE></LI>&#10;     * <LI><CODE>IPTOS_THROUGHPUT (0x08)</CODE></LI>&#10;     * <LI><CODE>IPTOS_LOWDELAY (0x10)</CODE></LI>&#10;     * </UL>&#10;     * The last low order bit is always ignored as this&#10;     * corresponds to the MBZ (must be zero) bit.&#10;     * <p>&#10;     * Setting bits in the precedence field may result in a&#10;     * SocketException indicating that the operation is not&#10;     * permitted.&#10;     * <p>&#10;     * for Internet Protocol v6 {@code tc} is the value that&#10;     * would be placed into the sin6_flowinfo field of the IP header.&#10;     *&#10;     * @param tc        an {@code int} value for the bitset.&#10;     * @throws SocketException if there is an error setting the&#10;     * traffic class or type-of-service&#10;     * @since 1.4&#10;     * @see #getTrafficClass&#10;     "
  ]
  node [
    id 1490
    label "public synchronized int getTrafficClass() throws SocketException"
    type "method"
    comment "&#10;     * Gets traffic class or type-of-service in the IP datagram&#10;     * header for packets sent from this DatagramSocket.&#10;     * <p>&#10;     * As the underlying network implementation may ignore the&#10;     * traffic class or type-of-service set using {@link #setTrafficClass(int)}&#10;     * this method may return a different value than was previously&#10;     * set using the {@link #setTrafficClass(int)} method on this&#10;     * DatagramSocket.&#10;     *&#10;     * @return the traffic class or type-of-service already set&#10;     * @throws SocketException if there is an error obtaining the&#10;     * traffic class or type-of-service value.&#10;     * @since 1.4&#10;     * @see #setTrafficClass(int)&#10;     "
  ]
  node [
    id 1491
    label "public DatagramChannel getChannel()"
    type "method"
    comment "&#10;     * Returns the unique {@link java.nio.channels.DatagramChannel} object&#10;     * associated with this datagram socket, if any.&#10;     *&#10;     * <p> A datagram socket will have a channel if, and only if, the channel&#10;     * itself was created via the {@link java.nio.channels.DatagramChannel#open&#10;     * DatagramChannel.open} method.&#10;     *&#10;     * @return  the datagram channel associated with this datagram socket,&#10;     *          or {@code null} if this socket was not created for a channel&#10;     *&#10;     * @since 1.4&#10;     * @spec JSR-51&#10;     "
  ]
  node [
    id 1492
    label "public static synchronized void setDatagramSocketImplFactory(DatagramSocketImplFactory fac) throws IOException"
    type "method"
    comment "&#10;     * Sets the datagram socket implementation factory for the&#10;     * application. The factory can be specified only once.&#10;     * <p>&#10;     * When an application creates a new datagram socket, the socket&#10;     * implementation factory's {@code createDatagramSocketImpl} method is&#10;     * called to create the actual datagram socket implementation.&#10;     * <p>&#10;     * Passing {@code null} to the method is a no-op unless the factory&#10;     * was already set.&#10;     *&#10;     * <p>If there is a security manager, this method first calls&#10;     * the security manager's {@code checkSetFactory} method&#10;     * to ensure the operation is allowed.&#10;     * This could result in a SecurityException.&#10;     *&#10;     * @param      fac   the desired factory.&#10;     * @exception  IOException  if an I/O error occurs when setting the&#10;     *              datagram socket factory.&#10;     * @exception  SocketException  if the factory is already defined.&#10;     * @exception  SecurityException  if a security manager exists and its&#10;     *             {@code checkSetFactory} method doesn't allow the operation.&#10;     * @see       java.net.DatagramSocketImplFactory#createDatagramSocketImpl()&#10;     * @see       SecurityManager#checkSetFactory&#10;     * @since 1.3&#10;     "
  ]
  node [
    id 1493
    label "public DatagramSocket setOption(SocketOption<T> name, T value) throws IOException"
    type "method"
    comment "&#10;     * Sets the value of a socket option.&#10;     *&#10;     * @param <T> The type of the socket option value&#10;     * @param name The socket option&#10;     * @param value The value of the socket option. A value of {@code null}&#10;     *              may be valid for some options.&#10;     *&#10;     * @return this DatagramSocket&#10;     *&#10;     * @throws UnsupportedOperationException if the datagram socket&#10;     *         does not support the option.&#10;     *&#10;     * @throws IllegalArgumentException if the value is not valid for&#10;     *         the option.&#10;     *&#10;     * @throws IOException if an I/O error occurs, or if the socket is closed.&#10;     *&#10;     * @throws SecurityException if a security manager is set and if the socket&#10;     *         option requires a security permission and if the caller does&#10;     *         not have the required permission.&#10;     *         {@link java.net.StandardSocketOptions StandardSocketOptions}&#10;     *         do not require any security permission.&#10;     *&#10;     * @throws NullPointerException if name is {@code null}&#10;     *&#10;     * @since 9&#10;     "
  ]
  node [
    id 1494
    label "public abstract DatagramChannel connect(SocketAddress remote) throws IOException"
    type "method"
    comment "&#10;     * Connects this channel's socket.&#10;     *&#10;     * <p> The channel's socket is configured so that it only receives&#10;     * datagrams from, and sends datagrams to, the given remote <i>peer</i>&#10;     * address.  Once connected, datagrams may not be received from or sent to&#10;     * any other address.  A datagram socket remains connected until it is&#10;     * explicitly disconnected or until it is closed.&#10;     *&#10;     * <p> This method performs exactly the same security checks as the {@link&#10;     * java.net.DatagramSocket#connect connect} method of the {@link&#10;     * java.net.DatagramSocket} class.  That is, if a security manager has been&#10;     * installed then this method verifies that its {@link&#10;     * java.lang.SecurityManager#checkAccept checkAccept} and {@link&#10;     * java.lang.SecurityManager#checkConnect checkConnect} methods permit&#10;     * datagrams to be received from and sent to, respectively, the given&#10;     * remote address.&#10;     *&#10;     * <p> This method may be invoked at any time.  It will not have any effect&#10;     * on read or write operations that are already in progress at the moment&#10;     * that it is invoked. If this channel's socket is not bound then this method&#10;     * will first cause the socket to be bound to an address that is assigned&#10;     * automatically, as if invoking the {@link #bind bind} method with a&#10;     * parameter of {@code null}. </p>&#10;     *&#10;     * @param  remote&#10;     *         The remote address to which this channel is to be connected&#10;     *&#10;     * @return  This datagram channel&#10;     *&#10;     * @throws  AlreadyConnectedException&#10;     *          If this channel is already connected&#10;     *&#10;     * @throws  ClosedChannelException&#10;     *          If this channel is closed&#10;     *&#10;     * @throws  AsynchronousCloseException&#10;     *          If another thread closes this channel&#10;     *          while the connect operation is in progress&#10;     *&#10;     * @throws  ClosedByInterruptException&#10;     *          If another thread interrupts the current thread&#10;     *          while the connect operation is in progress, thereby&#10;     *          closing the channel and setting the current thread's&#10;     *          interrupt status&#10;     *&#10;     * @throws  UnresolvedAddressException&#10;     *          If the given remote address is not fully resolved&#10;     *&#10;     * @throws  UnsupportedAddressTypeException&#10;     *          If the type of the given remote address is not supported&#10;     *&#10;     * @throws  SecurityException&#10;     *          If a security manager has been installed&#10;     *          and it does not permit access to the given remote address&#10;     *&#10;     * @throws  IOException&#10;     *          If some other I/O error occurs&#10;     "
  ]
  node [
    id 1495
    label "bind"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1496
    label "public abstract DatagramChannel disconnect() throws IOException"
    type "method"
    comment "&#10;     * Disconnects this channel's socket.&#10;     *&#10;     * <p> The channel's socket is configured so that it can receive datagrams&#10;     * from, and sends datagrams to, any remote address so long as the security&#10;     * manager, if installed, permits it.&#10;     *&#10;     * <p> This method may be invoked at any time.  It will not have any effect&#10;     * on read or write operations that are already in progress at the moment&#10;     * that it is invoked.&#10;     *&#10;     * <p> If this channel's socket is not connected, or if the channel is&#10;     * closed, then invoking this method has no effect.  </p>&#10;     *&#10;     * @return  This datagram channel&#10;     *&#10;     * @throws  IOException&#10;     *          If some other I/O error occurs&#10;     "
  ]
  node [
    id 1497
    label "public abstract SocketAddress receive(ByteBuffer dst) throws IOException"
    type "method"
    comment "&#10;     * Receives a datagram via this channel.&#10;     *&#10;     * <p> If a datagram is immediately available, or if this channel is in&#10;     * blocking mode and one eventually becomes available, then the datagram is&#10;     * copied into the given byte buffer and its source address is returned.&#10;     * If this channel is in non-blocking mode and a datagram is not&#10;     * immediately available then this method immediately returns&#10;     * {@code null}.&#10;     *&#10;     * <p> The datagram is transferred into the given byte buffer starting at&#10;     * its current position, as if by a regular {@link&#10;     * ReadableByteChannel#read(java.nio.ByteBuffer) read} operation.  If there&#10;     * are fewer bytes remaining in the buffer than are required to hold the&#10;     * datagram then the remainder of the datagram is silently discarded.&#10;     *&#10;     * <p> This method performs exactly the same security checks as the {@link&#10;     * java.net.DatagramSocket#receive receive} method of the {@link&#10;     * java.net.DatagramSocket} class.  That is, if the socket is not connected&#10;     * to a specific remote address and a security manager has been installed&#10;     * then for each datagram received this method verifies that the source's&#10;     * address and port number are permitted by the security manager's {@link&#10;     * java.lang.SecurityManager#checkAccept checkAccept} method.  The overhead&#10;     * of this security check can be avoided by first connecting the socket via&#10;     * the {@link #connect connect} method.&#10;     *&#10;     * <p> This method may be invoked at any time.  If another thread has&#10;     * already initiated a read operation upon this channel, however, then an&#10;     * invocation of this method will block until the first operation is&#10;     * complete. If this channel's socket is not bound then this method will&#10;     * first cause the socket to be bound to an address that is assigned&#10;     * automatically, as if invoking the {@link #bind bind} method with a&#10;     * parameter of {@code null}. </p>&#10;     *&#10;     * @param  dst&#10;     *         The buffer into which the datagram is to be transferred&#10;     *&#10;     * @return  The datagram's source address,&#10;     *          or {@code null} if this channel is in non-blocking mode&#10;     *          and no datagram was immediately available&#10;     *&#10;     * @throws  ClosedChannelException&#10;     *          If this channel is closed&#10;     *&#10;     * @throws  AsynchronousCloseException&#10;     *          If another thread closes this channel&#10;     *          while the read operation is in progress&#10;     *&#10;     * @throws  ClosedByInterruptException&#10;     *          If another thread interrupts the current thread&#10;     *          while the read operation is in progress, thereby&#10;     *          closing the channel and setting the current thread's&#10;     *          interrupt status&#10;     *&#10;     * @throws  SecurityException&#10;     *          If a security manager has been installed&#10;     *          and it does not permit datagrams to be accepted&#10;     *          from the datagram's sender&#10;     *&#10;     * @throws  IOException&#10;     *          If some other I/O error occurs&#10;     "
  ]
  node [
    id 1498
    label "read(java.nio.ByteBuffer)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1499
    label "java.nio.channels.ReadableByteChannel"
    type "class"
    comment ""
  ]
  node [
    id 1500
    label "public int read(ByteBuffer dst) throws IOException"
    type "method"
    comment "&#10;     * Reads a sequence of bytes from this channel into the given buffer.&#10;     *&#10;     * <p> An attempt is made to read up to <i>r</i> bytes from the channel,&#10;     * where <i>r</i> is the number of bytes remaining in the buffer, that is,&#10;     * {@code dst.remaining()}, at the moment this method is invoked.&#10;     *&#10;     * <p> Suppose that a byte sequence of length <i>n</i> is read, where&#10;     * {@code 0}&#38;nbsp;{@code <=}&#38;nbsp;<i>n</i>&#38;nbsp;{@code <=}&#38;nbsp;<i>r</i>.&#10;     * This byte sequence will be transferred into the buffer so that the first&#10;     * byte in the sequence is at index <i>p</i> and the last byte is at index&#10;     * <i>p</i>&#38;nbsp;{@code +}&#38;nbsp;<i>n</i>&#38;nbsp;{@code -}&#38;nbsp;{@code 1},&#10;     * where <i>p</i> is the buffer's position at the moment this method is&#10;     * invoked.  Upon return the buffer's position will be equal to&#10;     * <i>p</i>&#38;nbsp;{@code +}&#38;nbsp;<i>n</i>; its limit will not have changed.&#10;     *&#10;     * <p> A read operation might not fill the buffer, and in fact it might not&#10;     * read any bytes at all.  Whether or not it does so depends upon the&#10;     * nature and state of the channel.  A socket channel in non-blocking mode,&#10;     * for example, cannot read any more bytes than are immediately available&#10;     * from the socket's input buffer; similarly, a file channel cannot read&#10;     * any more bytes than remain in the file.  It is guaranteed, however, that&#10;     * if a channel is in blocking mode and there is at least one byte&#10;     * remaining in the buffer then this method will block until at least one&#10;     * byte is read.&#10;     *&#10;     * <p> This method may be invoked at any time.  If another thread has&#10;     * already initiated a read operation upon this channel, however, then an&#10;     * invocation of this method will block until the first operation is&#10;     * complete. </p>&#10;     *&#10;     * @param  dst&#10;     *         The buffer into which bytes are to be transferred&#10;     *&#10;     * @return  The number of bytes read, possibly zero, or {@code -1} if the&#10;     *          channel has reached end-of-stream&#10;     *&#10;     * @throws  NonReadableChannelException&#10;     *          If this channel was not opened for reading&#10;     *&#10;     * @throws  ClosedChannelException&#10;     *          If this channel is closed&#10;     *&#10;     * @throws  AsynchronousCloseException&#10;     *          If another thread closes this channel&#10;     *          while the read operation is in progress&#10;     *&#10;     * @throws  ClosedByInterruptException&#10;     *          If another thread interrupts the current thread&#10;     *          while the read operation is in progress, thereby&#10;     *          closing the channel and setting the current thread's&#10;     *          interrupt status&#10;     *&#10;     * @throws  IOException&#10;     *          If some other I/O error occurs&#10;     "
  ]
  node [
    id 1501
    label "connect"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1502
    label "public abstract int send(ByteBuffer src, SocketAddress target) throws IOException"
    type "method"
    comment "&#10;     * Sends a datagram via this channel.&#10;     *&#10;     * <p> If this channel is in non-blocking mode and there is sufficient room&#10;     * in the underlying output buffer, or if this channel is in blocking mode&#10;     * and sufficient room becomes available, then the remaining bytes in the&#10;     * given buffer are transmitted as a single datagram to the given target&#10;     * address.&#10;     *&#10;     * <p> The datagram is transferred from the byte buffer as if by a regular&#10;     * {@link WritableByteChannel#write(java.nio.ByteBuffer) write} operation.&#10;     *&#10;     * <p> This method performs exactly the same security checks as the {@link&#10;     * java.net.DatagramSocket#send send} method of the {@link&#10;     * java.net.DatagramSocket} class.  That is, if the socket is not connected&#10;     * to a specific remote address and a security manager has been installed&#10;     * then for each datagram sent this method verifies that the target address&#10;     * and port number are permitted by the security manager's {@link&#10;     * java.lang.SecurityManager#checkConnect checkConnect} method.  The&#10;     * overhead of this security check can be avoided by first connecting the&#10;     * socket via the {@link #connect connect} method.&#10;     *&#10;     * <p> This method may be invoked at any time.  If another thread has&#10;     * already initiated a write operation upon this channel, however, then an&#10;     * invocation of this method will block until the first operation is&#10;     * complete. If this channel's socket is not bound then this method will&#10;     * first cause the socket to be bound to an address that is assigned&#10;     * automatically, as if by invoking the {@link #bind bind} method with a&#10;     * parameter of {@code null}. </p>&#10;     *&#10;     * @param  src&#10;     *         The buffer containing the datagram to be sent&#10;     *&#10;     * @param  target&#10;     *         The address to which the datagram is to be sent&#10;     *&#10;     * @return   The number of bytes sent, which will be either the number&#10;     *           of bytes that were remaining in the source buffer when this&#10;     *           method was invoked or, if this channel is non-blocking, may be&#10;     *           zero if there was insufficient room for the datagram in the&#10;     *           underlying output buffer&#10;     *&#10;     * @throws  AlreadyConnectedException&#10;     *          If this channel is connected to a different address&#10;     *          from that specified by {@code target}&#10;     *&#10;     * @throws  ClosedChannelException&#10;     *          If this channel is closed&#10;     *&#10;     * @throws  AsynchronousCloseException&#10;     *          If another thread closes this channel&#10;     *          while the read operation is in progress&#10;     *&#10;     * @throws  ClosedByInterruptException&#10;     *          If another thread interrupts the current thread&#10;     *          while the read operation is in progress, thereby&#10;     *          closing the channel and setting the current thread's&#10;     *          interrupt status&#10;     *&#10;     * @throws  UnresolvedAddressException&#10;     *          If the given remote address is not fully resolved&#10;     *&#10;     * @throws  UnsupportedAddressTypeException&#10;     *          If the type of the given remote address is not supported&#10;     *&#10;     * @throws  SecurityException&#10;     *          If a security manager has been installed&#10;     *          and it does not permit datagrams to be sent&#10;     *          to the given address&#10;     *&#10;     * @throws  IOException&#10;     *          If some other I/O error occurs&#10;     "
  ]
  node [
    id 1503
    label "write(java.nio.ByteBuffer)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1504
    label "java.nio.channels.WritableByteChannel"
    type "class"
    comment ""
  ]
  node [
    id 1505
    label "public int write(ByteBuffer src) throws IOException"
    type "method"
    comment "&#10;     * Writes a sequence of bytes to this channel from the given buffer.&#10;     *&#10;     * <p> An attempt is made to write up to <i>r</i> bytes to the channel,&#10;     * where <i>r</i> is the number of bytes remaining in the buffer, that is,&#10;     * {@code src.remaining()}, at the moment this method is invoked.&#10;     *&#10;     * <p> Suppose that a byte sequence of length <i>n</i> is written, where&#10;     * {@code 0}&#38;nbsp;{@code <=}&#38;nbsp;<i>n</i>&#38;nbsp;{@code <=}&#38;nbsp;<i>r</i>.&#10;     * This byte sequence will be transferred from the buffer starting at index&#10;     * <i>p</i>, where <i>p</i> is the buffer's position at the moment this&#10;     * method is invoked; the index of the last byte written will be&#10;     * <i>p</i>&#38;nbsp;{@code +}&#38;nbsp;<i>n</i>&#38;nbsp;{@code -}&#38;nbsp;{@code 1}.&#10;     * Upon return the buffer's position will be equal to&#10;     * <i>p</i>&#38;nbsp;{@code +}&#38;nbsp;<i>n</i>; its limit will not have changed.&#10;     *&#10;     * <p> Unless otherwise specified, a write operation will return only after&#10;     * writing all of the <i>r</i> requested bytes.  Some types of channels,&#10;     * depending upon their state, may write only some of the bytes or possibly&#10;     * none at all.  A socket channel in non-blocking mode, for example, cannot&#10;     * write any more bytes than are free in the socket's output buffer.&#10;     *&#10;     * <p> This method may be invoked at any time.  If another thread has&#10;     * already initiated a write operation upon this channel, however, then an&#10;     * invocation of this method will block until the first operation is&#10;     * complete. </p>&#10;     *&#10;     * @param  src&#10;     *         The buffer from which bytes are to be retrieved&#10;     *&#10;     * @return The number of bytes written, possibly zero&#10;     *&#10;     * @throws  NonWritableChannelException&#10;     *          If this channel was not opened for writing&#10;     *&#10;     * @throws  ClosedChannelException&#10;     *          If this channel is closed&#10;     *&#10;     * @throws  AsynchronousCloseException&#10;     *          If another thread closes this channel&#10;     *          while the write operation is in progress&#10;     *&#10;     * @throws  ClosedByInterruptException&#10;     *          If another thread interrupts the current thread&#10;     *          while the write operation is in progress, thereby&#10;     *          closing the channel and setting the current thread's&#10;     *          interrupt status&#10;     *&#10;     * @throws  IOException&#10;     *          If some other I/O error occurs&#10;     "
  ]
  node [
    id 1506
    label "java.nio.channels.ScatteringByteChannel"
    type "class"
    comment ""
  ]
  node [
    id 1507
    label "public long read(ByteBuffer[] dsts, int offset, int length) throws IOException"
    type "method"
    comment "&#10;     * Reads a sequence of bytes from this channel into a subsequence of the&#10;     * given buffers.&#10;     *&#10;     * <p> An invocation of this method attempts to read up to <i>r</i> bytes&#10;     * from this channel, where <i>r</i> is the total number of bytes remaining&#10;     * the specified subsequence of the given buffer array, that is,&#10;     *&#10;     * <blockquote><pre>&#10;     * dsts[offset].remaining()&#10;     *     + dsts[offset+1].remaining()&#10;     *     + ... + dsts[offset+length-1].remaining()</pre></blockquote>&#10;     *&#10;     * at the moment that this method is invoked.&#10;     *&#10;     * <p> Suppose that a byte sequence of length <i>n</i> is read, where&#10;     * {@code 0}&#38;nbsp;{@code <=}&#38;nbsp;<i>n</i>&#38;nbsp;{@code <=}&#38;nbsp;<i>r</i>.&#10;     * Up to the first {@code dsts[offset].remaining()} bytes of this sequence&#10;     * are transferred into buffer {@code dsts[offset]}, up to the next&#10;     * {@code dsts[offset+1].remaining()} bytes are transferred into buffer&#10;     * {@code dsts[offset+1]}, and so forth, until the entire byte sequence&#10;     * is transferred into the given buffers.  As many bytes as possible are&#10;     * transferred into each buffer, hence the final position of each updated&#10;     * buffer, except the last updated buffer, is guaranteed to be equal to&#10;     * that buffer's limit.&#10;     *&#10;     * <p> This method may be invoked at any time.  If another thread has&#10;     * already initiated a read operation upon this channel, however, then an&#10;     * invocation of this method will block until the first operation is&#10;     * complete. </p>&#10;     *&#10;     * @param  dsts&#10;     *         The buffers into which bytes are to be transferred&#10;     *&#10;     * @param  offset&#10;     *         The offset within the buffer array of the first buffer into&#10;     *         which bytes are to be transferred; must be non-negative and no&#10;     *         larger than {@code dsts.length}&#10;     *&#10;     * @param  length&#10;     *         The maximum number of buffers to be accessed; must be&#10;     *         non-negative and no larger than&#10;     *         {@code dsts.length}&#38;nbsp;-&#38;nbsp;{@code offset}&#10;     *&#10;     * @return The number of bytes read, possibly zero,&#10;     *         or {@code -1} if the channel has reached end-of-stream&#10;     *&#10;     * @throws  IndexOutOfBoundsException&#10;     *          If the preconditions on the {@code offset} and {@code length}&#10;     *          parameters do not hold&#10;     *&#10;     * @throws  NonReadableChannelException&#10;     *          If this channel was not opened for reading&#10;     *&#10;     * @throws  ClosedChannelException&#10;     *          If this channel is closed&#10;     *&#10;     * @throws  AsynchronousCloseException&#10;     *          If another thread closes this channel&#10;     *          while the read operation is in progress&#10;     *&#10;     * @throws  ClosedByInterruptException&#10;     *          If another thread interrupts the current thread&#10;     *          while the read operation is in progress, thereby&#10;     *          closing the channel and setting the current thread's&#10;     *          interrupt status&#10;     *&#10;     * @throws  IOException&#10;     *          If some other I/O error occurs&#10;     "
  ]
  node [
    id 1508
    label "public long read(ByteBuffer[] dsts) throws IOException"
    type "method"
    comment "&#10;     * Reads a sequence of bytes from this channel into the given buffers.&#10;     *&#10;     * <p> An invocation of this method of the form {@code c.read(dsts)}&#10;     * behaves in exactly the same manner as the invocation&#10;     *&#10;     * <blockquote><pre>&#10;     * c.read(dsts, 0, dsts.length);</pre></blockquote>&#10;     *&#10;     * @param  dsts&#10;     *         The buffers into which bytes are to be transferred&#10;     *&#10;     * @return The number of bytes read, possibly zero,&#10;     *         or {@code -1} if the channel has reached end-of-stream&#10;     *&#10;     * @throws  NonReadableChannelException&#10;     *          If this channel was not opened for reading&#10;     *&#10;     * @throws  ClosedChannelException&#10;     *          If this channel is closed&#10;     *&#10;     * @throws  AsynchronousCloseException&#10;     *          If another thread closes this channel&#10;     *          while the read operation is in progress&#10;     *&#10;     * @throws  ClosedByInterruptException&#10;     *          If another thread interrupts the current thread&#10;     *          while the read operation is in progress, thereby&#10;     *          closing the channel and setting the current thread's&#10;     *          interrupt status&#10;     *&#10;     * @throws  IOException&#10;     *          If some other I/O error occurs&#10;     "
  ]
  node [
    id 1509
    label "java.nio.channels.GatheringByteChannel"
    type "class"
    comment ""
  ]
  node [
    id 1510
    label "public long write(ByteBuffer[] srcs, int offset, int length) throws IOException"
    type "method"
    comment "&#10;     * Writes a sequence of bytes to this channel from a subsequence of the&#10;     * given buffers.&#10;     *&#10;     * <p> An attempt is made to write up to <i>r</i> bytes to this channel,&#10;     * where <i>r</i> is the total number of bytes remaining in the specified&#10;     * subsequence of the given buffer array, that is,&#10;     *&#10;     * <blockquote><pre>&#10;     * srcs[offset].remaining()&#10;     *     + srcs[offset+1].remaining()&#10;     *     + ... + srcs[offset+length-1].remaining()</pre></blockquote>&#10;     *&#10;     * at the moment that this method is invoked.&#10;     *&#10;     * <p> Suppose that a byte sequence of length <i>n</i> is written, where&#10;     * {@code 0}&#38;nbsp;{@code <=}&#38;nbsp;<i>n</i>&#38;nbsp;{@code <=}&#38;nbsp;<i>r</i>.&#10;     * Up to the first {@code srcs[offset].remaining()} bytes of this sequence&#10;     * are written from buffer {@code srcs[offset]}, up to the next&#10;     * {@code srcs[offset+1].remaining()} bytes are written from buffer&#10;     * {@code srcs[offset+1]}, and so forth, until the entire byte sequence is&#10;     * written.  As many bytes as possible are written from each buffer, hence&#10;     * the final position of each updated buffer, except the last updated&#10;     * buffer, is guaranteed to be equal to that buffer's limit.&#10;     *&#10;     * <p> Unless otherwise specified, a write operation will return only after&#10;     * writing all of the <i>r</i> requested bytes.  Some types of channels,&#10;     * depending upon their state, may write only some of the bytes or possibly&#10;     * none at all.  A socket channel in non-blocking mode, for example, cannot&#10;     * write any more bytes than are free in the socket's output buffer.&#10;     *&#10;     * <p> This method may be invoked at any time.  If another thread has&#10;     * already initiated a write operation upon this channel, however, then an&#10;     * invocation of this method will block until the first operation is&#10;     * complete. </p>&#10;     *&#10;     * @param  srcs&#10;     *         The buffers from which bytes are to be retrieved&#10;     *&#10;     * @param  offset&#10;     *         The offset within the buffer array of the first buffer from&#10;     *         which bytes are to be retrieved; must be non-negative and no&#10;     *         larger than {@code srcs.length}&#10;     *&#10;     * @param  length&#10;     *         The maximum number of buffers to be accessed; must be&#10;     *         non-negative and no larger than&#10;     *         {@code srcs.length}&#38;nbsp;-&#38;nbsp;{@code offset}&#10;     *&#10;     * @return  The number of bytes written, possibly zero&#10;     *&#10;     * @throws  IndexOutOfBoundsException&#10;     *          If the preconditions on the {@code offset} and {@code length}&#10;     *          parameters do not hold&#10;     *&#10;     * @throws  NonWritableChannelException&#10;     *          If this channel was not opened for writing&#10;     *&#10;     * @throws  ClosedChannelException&#10;     *          If this channel is closed&#10;     *&#10;     * @throws  AsynchronousCloseException&#10;     *          If another thread closes this channel&#10;     *          while the write operation is in progress&#10;     *&#10;     * @throws  ClosedByInterruptException&#10;     *          If another thread interrupts the current thread&#10;     *          while the write operation is in progress, thereby&#10;     *          closing the channel and setting the current thread's&#10;     *          interrupt status&#10;     *&#10;     * @throws  IOException&#10;     *          If some other I/O error occurs&#10;     "
  ]
  node [
    id 1511
    label "public long write(ByteBuffer[] srcs) throws IOException"
    type "method"
    comment "&#10;     * Writes a sequence of bytes to this channel from the given buffers.&#10;     *&#10;     * <p> An invocation of this method of the form {@code c.write(srcs)}&#10;     * behaves in exactly the same manner as the invocation&#10;     *&#10;     * <blockquote><pre>&#10;     * c.write(srcs, 0, srcs.length);</pre></blockquote>&#10;     *&#10;     * @param  srcs&#10;     *         The buffers from which bytes are to be retrieved&#10;     *&#10;     * @return  The number of bytes written, possibly zero&#10;     *&#10;     * @throws  NonWritableChannelException&#10;     *          If this channel was not opened for writing&#10;     *&#10;     * @throws  ClosedChannelException&#10;     *          If this channel is closed&#10;     *&#10;     * @throws  AsynchronousCloseException&#10;     *          If another thread closes this channel&#10;     *          while the write operation is in progress&#10;     *&#10;     * @throws  ClosedByInterruptException&#10;     *          If another thread interrupts the current thread&#10;     *          while the write operation is in progress, thereby&#10;     *          closing the channel and setting the current thread's&#10;     *          interrupt status&#10;     *&#10;     * @throws  IOException&#10;     *          If some other I/O error occurs&#10;     "
  ]
  node [
    id 1512
    label "RuntimePermission"
  ]
  node [
    id 1513
    label "java.nio.channels.Channel"
    type "class"
    comment ""
  ]
  node [
    id 1514
    label "public boolean isOpen()"
    type "method"
    comment "&#10;     * Tells whether or not this channel is open.&#10;     *&#10;     * @return {@code true} if, and only if, this channel is open&#10;     "
  ]
  node [
    id 1515
    label "public static void setSecurityManager(final SecurityManager s)"
    type "method"
    comment "&#10;     * Throws {@code SecurityException} (except in case {@code sm == null}).&#10;     *&#10;     * <p>Security managers do <i>not</i> provide a secure environment for&#10;     * executing untrusted code and are unsupported on Android. Untrusted code&#10;     * cannot be safely isolated within a single VM on Android, so this method&#10;     * <i>always</i> throws a {@code SecurityException} when passed a non-null SecurityManager&#10;     *&#10;     * @param s a security manager&#10;     * @throws SecurityException always, unless {@code sm == null}&#10;     "
  ]
  node [
    id 1516
    label "public static SecurityManager getSecurityManager()"
    type "method"
    comment "&#10;     * Always returns {@code null} in Android&#10;     *&#10;     * @return  {@code null} in Android&#10;     "
  ]
  node [
    id 1517
    label "public static native long currentTimeMillis()"
    type "method"
    comment "&#10;     * Returns the current time in milliseconds.  Note that&#10;     * while the unit of time of the return value is a millisecond,&#10;     * the granularity of the value depends on the underlying&#10;     * operating system and may be larger.  For example, many&#10;     * operating systems measure time in units of tens of&#10;     * milliseconds.&#10;     *&#10;     * <p> See the description of the class <code>Date</code> for&#10;     * a discussion of slight discrepancies that may arise between&#10;     * &#34;computer time&#34; and coordinated universal time (UTC).&#10;     *&#10;     * @return  the difference, measured in milliseconds, between&#10;     *          the current time and midnight, January 1, 1970 UTC.&#10;     * @see     java.util.Date&#10;     "
  ]
  node [
    id 1518
    label "public static native long nanoTime()"
    type "method"
    comment "&#10;     * Returns the current value of the running Java Virtual Machine's&#10;     * high-resolution time source, in nanoseconds.&#10;     *&#10;     * <p>This method can only be used to measure elapsed time and is&#10;     * not related to any other notion of system or wall-clock time.&#10;     * The value returned represents nanoseconds since some fixed but&#10;     * arbitrary <i>origin</i> time (perhaps in the future, so values&#10;     * may be negative).  The same origin is used by all invocations of&#10;     * this method in an instance of a Java virtual machine; other&#10;     * virtual machine instances are likely to use a different origin.&#10;     *&#10;     * <p>This method provides nanosecond precision, but not necessarily&#10;     * nanosecond resolution (that is, how frequently the value changes)&#10;     * - no guarantees are made except that the resolution is at least as&#10;     * good as that of {@link #currentTimeMillis()}.&#10;     *&#10;     * <p>Differences in successive calls that span greater than&#10;     * approximately 292 years (2<sup>63</sup> nanoseconds) will not&#10;     * correctly compute elapsed time due to numerical overflow.&#10;     *&#10;     * <p>The values returned by this method become meaningful only when&#10;     * the difference between two such values, obtained within the same&#10;     * instance of a Java virtual machine, is computed.&#10;     *&#10;     * <p> For example, to measure how long some code takes to execute:&#10;     *  <pre> {@code&#10;     * long startTime = System.nanoTime();&#10;     * // ... the code being measured ...&#10;     * long estimatedTime = System.nanoTime() - startTime;}</pre>&#10;     *&#10;     * <p>To compare two nanoTime values&#10;     *  <pre> {@code&#10;     * long t0 = System.nanoTime();&#10;     * ...&#10;     * long t1 = System.nanoTime();}</pre>&#10;     *&#10;     * one should use {@code t1 - t0 < 0}, not {@code t1 < t0},&#10;     * because of the possibility of numerical overflow.&#10;     *&#10;     * <p>The value returned by this method does not account for elapsed&#10;     * time during deep sleep. For timekeeping facilities available on&#10;     * Android see {@link android.os.SystemClock}.&#10;     *&#10;     * @return the current value of the running Java Virtual Machine's&#10;     *         high-resolution time source, in nanoseconds&#10;     * @since 1.5&#10;     "
  ]
  node [
    id 1519
    label "currentTimeMillis()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1520
    label "android.os.SystemClock"
    type "class"
    comment "&#10; * Core timekeeping facilities.&#10; *&#10; * <p> Three different clocks are available, and they should not be confused:&#10; *&#10; * <ul>&#10; *     <li> <p> {@link System#currentTimeMillis System.currentTimeMillis()}&#10; *     is the standard &#34;wall&#34; clock (time and date) expressing milliseconds&#10; *     since the epoch.  The wall clock can be set by the user or the phone&#10; *     network (see {@link #setCurrentTimeMillis}), so the time may jump&#10; *     backwards or forwards unpredictably.  This clock should only be used&#10; *     when correspondence with real-world dates and times is important, such&#10; *     as in a calendar or alarm clock application.  Interval or elapsed&#10; *     time measurements should use a different clock.  If you are using&#10; *     System.currentTimeMillis(), consider listening to the&#10; *     {@link android.content.Intent#ACTION_TIME_TICK ACTION_TIME_TICK},&#10; *     {@link android.content.Intent#ACTION_TIME_CHANGED ACTION_TIME_CHANGED}&#10; *     and {@link android.content.Intent#ACTION_TIMEZONE_CHANGED&#10; *     ACTION_TIMEZONE_CHANGED} {@link android.content.Intent Intent}&#10; *     broadcasts to find out when the time changes.&#10; *&#10; *     <li> <p> {@link #uptimeMillis} is counted in milliseconds since the&#10; *     system was booted.  This clock stops when the system enters deep&#10; *     sleep (CPU off, display dark, device waiting for external input),&#10; *     but is not affected by clock scaling, idle, or other power saving&#10; *     mechanisms.  This is the basis for most interval timing&#10; *     such as {@link Thread#sleep(long) Thread.sleep(millls)},&#10; *     {@link Object#wait(long) Object.wait(millis)}, and&#10; *     {@link System#nanoTime System.nanoTime()}.  This clock is guaranteed&#10; *     to be monotonic, and is suitable for interval timing when the&#10; *     interval does not span device sleep.  Most methods that accept a&#10; *     timestamp value currently expect the {@link #uptimeMillis} clock.&#10; *&#10; *     <li> <p> {@link #elapsedRealtime} and {@link #elapsedRealtimeNanos}&#10; *     return the time since the system was booted, and include deep sleep.&#10; *     This clock is guaranteed to be monotonic, and continues to tick even&#10; *     when the CPU is in power saving modes, so is the recommend basis&#10; *     for general purpose interval timing.&#10; *&#10; * </ul>&#10; *&#10; * There are several mechanisms for controlling the timing of events:&#10; *&#10; * <ul>&#10; *     <li> <p> Standard functions like {@link Thread#sleep(long)&#10; *     Thread.sleep(millis)} and {@link Object#wait(long) Object.wait(millis)}&#10; *     are always available.  These functions use the {@link #uptimeMillis}&#10; *     clock; if the device enters sleep, the remainder of the time will be&#10; *     postponed until the device wakes up.  These synchronous functions may&#10; *     be interrupted with {@link Thread#interrupt Thread.interrupt()}, and&#10; *     you must handle {@link InterruptedException}.&#10; *&#10; *     <li> <p> {@link #sleep SystemClock.sleep(millis)} is a utility function&#10; *     very similar to {@link Thread#sleep(long) Thread.sleep(millis)}, but it&#10; *     ignores {@link InterruptedException}.  Use this function for delays if&#10; *     you do not use {@link Thread#interrupt Thread.interrupt()}, as it will&#10; *     preserve the interrupted state of the thread.&#10; *&#10; *     <li> <p> The {@link android.os.Handler} class can schedule asynchronous&#10; *     callbacks at an absolute or relative time.  Handler objects also use the&#10; *     {@link #uptimeMillis} clock, and require an {@link android.os.Looper&#10; *     event loop} (normally present in any GUI application).&#10; *&#10; *     <li> <p> The {@link android.app.AlarmManager} can trigger one-time or&#10; *     recurring events which occur even when the device is in deep sleep&#10; *     or your application is not running.  Events may be scheduled with your&#10; *     choice of {@link java.lang.System#currentTimeMillis} (RTC) or&#10; *     {@link #elapsedRealtime} (ELAPSED_REALTIME), and cause an&#10; *     {@link android.content.Intent} broadcast when they occur.&#10; * </ul>&#10; "
  ]
  node [
    id 1521
    label "public static void sleep(long ms)"
    type "method"
    comment "&#10;     * Waits a given number of milliseconds (of uptimeMillis) before returning.&#10;     * Similar to {@link java.lang.Thread#sleep(long)}, but does not throw&#10;     * {@link InterruptedException}; {@link Thread#interrupt()} events are&#10;     * deferred until the next interruptible operation.  Does not return until&#10;     * at least the specified number of milliseconds has elapsed.&#10;     *&#10;     * @param ms to sleep before returning, in milliseconds of uptime.&#10;     "
  ]
  node [
    id 1522
    label "interrupt()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1523
    label "sleep(long)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1524
    label "java.lang.Thread"
    type "class"
    comment "&#10; * A <i>thread</i> is a thread of execution in a program. The Java&#10; * Virtual Machine allows an application to have multiple threads of&#10; * execution running concurrently.&#10; * <p>&#10; * Every thread has a priority. Threads with higher priority are&#10; * executed in preference to threads with lower priority. Each thread&#10; * may or may not also be marked as a daemon. When code running in&#10; * some thread creates a new {@code Thread} object, the new&#10; * thread has its priority initially set equal to the priority of the&#10; * creating thread, and is a daemon thread if and only if the&#10; * creating thread is a daemon.&#10; * <p>&#10; * When a Java Virtual Machine starts up, there is usually a single&#10; * non-daemon thread (which typically calls the method named&#10; * {@code main} of some designated class). The Java Virtual&#10; * Machine continues to execute threads until either of the following&#10; * occurs:&#10; * <ul>&#10; * <li>The {@code exit} method of class {@code Runtime} has been&#10; *     called and the security manager has permitted the exit operation&#10; *     to take place.&#10; * <li>All threads that are not daemon threads have died, either by&#10; *     returning from the call to the {@code run} method or by&#10; *     throwing an exception that propagates beyond the {@code run}&#10; *     method.&#10; * </ul>&#10; * <p>&#10; * There are two ways to create a new thread of execution. One is to&#10; * declare a class to be a subclass of {@code Thread}. This&#10; * subclass should override the {@code run} method of class&#10; * {@code Thread}. An instance of the subclass can then be&#10; * allocated and started. For example, a thread that computes primes&#10; * larger than a stated value could be written as follows:&#10; * <hr><blockquote><pre>&#10; *     class PrimeThread extends Thread {&#10; *         long minPrime;&#10; *         PrimeThread(long minPrime) {&#10; *             this.minPrime = minPrime;&#10; *         }&#10; *&#10; *         public void run() {&#10; *             // compute primes larger than minPrime&#10; *             &#38;nbsp;.&#38;nbsp;.&#38;nbsp;.&#10; *         }&#10; *     }&#10; * </pre></blockquote><hr>&#10; * <p>&#10; * The following code would then create a thread and start it running:&#10; * <blockquote><pre>&#10; *     PrimeThread p = new PrimeThread(143);&#10; *     p.start();&#10; * </pre></blockquote>&#10; * <p>&#10; * The other way to create a thread is to declare a class that&#10; * implements the {@code Runnable} interface. That class then&#10; * implements the {@code run} method. An instance of the class can&#10; * then be allocated, passed as an argument when creating&#10; * {@code Thread}, and started. The same example in this other&#10; * style looks like the following:&#10; * <hr><blockquote><pre>&#10; *     class PrimeRun implements Runnable {&#10; *         long minPrime;&#10; *         PrimeRun(long minPrime) {&#10; *             this.minPrime = minPrime;&#10; *         }&#10; *&#10; *         public void run() {&#10; *             // compute primes larger than minPrime&#10; *             &#38;nbsp;.&#38;nbsp;.&#38;nbsp;.&#10; *         }&#10; *     }&#10; * </pre></blockquote><hr>&#10; * <p>&#10; * The following code would then create a thread and start it running:&#10; * <blockquote><pre>&#10; *     PrimeRun p = new PrimeRun(143);&#10; *     new Thread(p).start();&#10; * </pre></blockquote>&#10; * <p>&#10; * Every thread has a name for identification purposes. More than&#10; * one thread may have the same name. If a name is not specified when&#10; * a thread is created, a new name is generated for it.&#10; * <p>&#10; * Unless otherwise noted, passing a {@code null} argument to a constructor&#10; * or method in this class will cause a {@link NullPointerException} to be&#10; * thrown.&#10; *&#10; * @author  unascribed&#10; * @see     Runnable&#10; * @see     Runtime#exit(int)&#10; * @see     #run()&#10; * @see     #stop()&#10; * @since   1.0&#10; "
  ]
  node [
    id 1525
    label "public static native Thread currentThread()"
    type "method"
    comment "&#10;     * Returns a reference to the currently executing thread object.&#10;     *&#10;     * @return  the currently executing thread.&#10;     "
  ]
  node [
    id 1526
    label "public static native void yield()"
    type "method"
    comment "&#10;     * A hint to the scheduler that the current thread is willing to yield&#10;     * its current use of a processor. The scheduler is free to ignore this&#10;     * hint.&#10;     *&#10;     * <p> Yield is a heuristic attempt to improve relative progression&#10;     * between threads that would otherwise over-utilise a CPU. Its use&#10;     * should be combined with detailed profiling and benchmarking to&#10;     * ensure that it actually has the desired effect.&#10;     *&#10;     * <p> It is rarely appropriate to use this method. It may be useful&#10;     * for debugging or testing purposes, where it may help to reproduce&#10;     * bugs due to race conditions. It may also be useful when designing&#10;     * concurrency control constructs such as the ones in the&#10;     * {@link java.util.concurrent.locks} package.&#10;     "
  ]
  node [
    id 1527
    label "java.util.concurrent.locks"
  ]
  node [
    id 1528
    label "public static void sleep(long millis) throws InterruptedException"
    type "method"
    comment " BEGIN Android-changed: Implement sleep() methods using a shared native implementation."
  ]
  node [
    id 1529
    label "public static void sleep(long millis, int nanos) throws InterruptedException"
    type "method"
    comment "&#10;     * Causes the currently executing thread to sleep (temporarily cease&#10;     * execution) for the specified number of milliseconds plus the specified&#10;     * number of nanoseconds, subject to the precision and accuracy of system&#10;     * timers and schedulers. The thread does not lose ownership of any&#10;     * monitors.&#10;     *&#10;     * @param  millis&#10;     *         the length of time to sleep in milliseconds&#10;     *&#10;     * @param  nanos&#10;     *         {@code 0-999999} additional nanoseconds to sleep&#10;     *&#10;     * @throws  IllegalArgumentException&#10;     *          if the value of {@code millis} is negative, or the value of&#10;     *          {@code nanos} is not in the range {@code 0-999999}&#10;     *&#10;     * @throws  InterruptedException&#10;     *          if any thread has interrupted the current thread. The&#10;     *          <i>interrupted status</i> of the current thread is&#10;     *          cleared when this exception is thrown.&#10;     "
  ]
  node [
    id 1530
    label "public static void onSpinWait()"
    type "method"
    comment "&#10;     * Indicates that the caller is momentarily unable to progress, until the&#10;     * occurrence of one or more actions on the part of other activities. By&#10;     * invoking this method within each iteration of a spin-wait loop construct,&#10;     * the calling thread indicates to the runtime that it is busy-waiting.&#10;     * The runtime may take action to improve the performance of invoking&#10;     * spin-wait loop constructions.&#10;     *&#10;     * @apiNote&#10;     * As an example consider a method in a class that spins in a loop until&#10;     * some flag is set outside of that method. A call to the {@code onSpinWait}&#10;     * method should be placed inside the spin loop.&#10;     * <pre>{@code&#10;     *     class EventHandler {&#10;     *         volatile boolean eventNotificationNotReceived;&#10;     *         void waitForEventAndHandleIt() {&#10;     *             while ( eventNotificationNotReceived ) {&#10;     *                 java.lang.Thread.onSpinWait();&#10;     *             }&#10;     *             readAndProcessEvent();&#10;     *         }&#10;     *&#10;     *         void readAndProcessEvent() {&#10;     *             // Read event from some source and process it&#10;     *              . . .&#10;     *         }&#10;     *     }&#10;     * }</pre>&#10;     * <p>&#10;     * The code above would remain correct even if the {@code onSpinWait}&#10;     * method was not called at all. However on some architectures the Java&#10;     * Virtual Machine may issue the processor instructions to address such&#10;     * code patterns in a more beneficial way.&#10;     *&#10;     * @since 9&#10;     "
  ]
  node [
    id 1531
    label "protected Object clone() throws CloneNotSupportedException"
    type "method"
    comment "&#10;     * Creates and returns a copy of this object.  The precise meaning&#10;     * of &#34;copy&#34; may depend on the class of the object. The general&#10;     * intent is that, for any object {@code x}, the expression:&#10;     * <blockquote>&#10;     * <pre>&#10;     * x.clone() != x</pre></blockquote>&#10;     * will be true, and that the expression:&#10;     * <blockquote>&#10;     * <pre>&#10;     * x.clone().getClass() == x.getClass()</pre></blockquote>&#10;     * will be {@code true}, but these are not absolute requirements.&#10;     * While it is typically the case that:&#10;     * <blockquote>&#10;     * <pre>&#10;     * x.clone().equals(x)</pre></blockquote>&#10;     * will be {@code true}, this is not an absolute requirement.&#10;     * <p>&#10;     * By convention, the returned object should be obtained by calling&#10;     * {@code super.clone}.  If a class and all of its superclasses (except&#10;     * {@code Object}) obey this convention, it will be the case that&#10;     * {@code x.clone().getClass() == x.getClass()}.&#10;     * <p>&#10;     * By convention, the object returned by this method should be independent&#10;     * of this object (which is being cloned).  To achieve this independence,&#10;     * it may be necessary to modify one or more fields of the object returned&#10;     * by {@code super.clone} before returning it.  Typically, this means&#10;     * copying any mutable objects that comprise the internal &#34;deep structure&#34;&#10;     * of the object being cloned and replacing the references to these&#10;     * objects with references to the copies.  If a class contains only&#10;     * primitive fields or references to immutable objects, then it is usually&#10;     * the case that no fields in the object returned by {@code super.clone}&#10;     * need to be modified.&#10;     *&#10;     * @implSpec&#10;     * The method {@code clone} for class {@code Object} performs a&#10;     * specific cloning operation. First, if the class of this object does&#10;     * not implement the interface {@code Cloneable}, then a&#10;     * {@code CloneNotSupportedException} is thrown. Note that all arrays&#10;     * are considered to implement the interface {@code Cloneable} and that&#10;     * the return type of the {@code clone} method of an array type {@code T[]}&#10;     * is {@code T[]} where T is any reference or primitive type.&#10;     * Otherwise, this method creates a new instance of the class of this&#10;     * object and initializes all its fields with exactly the contents of&#10;     * the corresponding fields of this object, as if by assignment; the&#10;     * contents of the fields are not themselves cloned. Thus, this method&#10;     * performs a &#34;shallow copy&#34; of this object, not a &#34;deep copy&#34; operation.&#10;     * <p>&#10;     * The class {@code Object} does not itself implement the interface&#10;     * {@code Cloneable}, so calling the {@code clone} method on an object&#10;     * whose class is {@code Object} will result in throwing an&#10;     * exception at run time.&#10;     *&#10;     * @return     a clone of this instance.&#10;     * @throws  CloneNotSupportedException  if the object's class does not&#10;     *               support the {@code Cloneable} interface. Subclasses&#10;     *               that override the {@code clone} method can also&#10;     *               throw this exception to indicate that an instance cannot&#10;     *               be cloned.&#10;     * @see java.lang.Cloneable&#10;     "
  ]
  node [
    id 1532
    label "private void init2(Thread parent, boolean inheritThreadLocals)"
    type "method"
    comment " Android-added: Helper method for previous constructor and init(...) method."
  ]
  node [
    id 1533
    label "public synchronized void start()"
    type "method"
    comment "&#10;     * Causes this thread to begin execution; the Java Virtual Machine&#10;     * calls the {@code run} method of this thread.&#10;     * <p>&#10;     * The result is that two threads are running concurrently: the&#10;     * current thread (which returns from the call to the&#10;     * {@code start} method) and the other thread (which executes its&#10;     * {@code run} method).&#10;     * <p>&#10;     * It is never legal to start a thread more than once.&#10;     * In particular, a thread may not be restarted once it has completed&#10;     * execution.&#10;     *&#10;     * @throws     IllegalThreadStateException  if the thread was already started.&#10;     * @see        #run()&#10;     * @see        #stop()&#10;     "
  ]
  node [
    id 1534
    label "private static native void nativeCreate(Thread t, long stackSize, boolean daemon)"
    type "method"
    comment " private native void start0();"
  ]
  node [
    id 1535
    label "private void exit()"
    type "method"
    comment "&#10;     * This method is called by the system to give a Thread&#10;     * a chance to clean up before it actually exits.&#10;     "
  ]
  node [
    id 1536
    label "public void interrupt()"
    type "method"
    comment "&#10;     * Interrupts this thread.&#10;     *&#10;     * <p> Unless the current thread is interrupting itself, which is&#10;     * always permitted, the {@link #checkAccess() checkAccess} method&#10;     * of this thread is invoked, which may cause a {@link&#10;     * SecurityException} to be thrown.&#10;     *&#10;     * <p> If this thread is blocked in an invocation of the {@link&#10;     * Object#wait() wait()}, {@link Object#wait(long) wait(long)}, or {@link&#10;     * Object#wait(long, int) wait(long, int)} methods of the {@link Object}&#10;     * class, or of the {@link #join()}, {@link #join(long)}, {@link&#10;     * #join(long, int)}, {@link #sleep(long)}, or {@link #sleep(long, int)},&#10;     * methods of this class, then its interrupt status will be cleared and it&#10;     * will receive an {@link InterruptedException}.&#10;     *&#10;     * <p> If this thread is blocked in an I/O operation upon an {@link&#10;     * java.nio.channels.InterruptibleChannel InterruptibleChannel}&#10;     * then the channel will be closed, the thread's interrupt&#10;     * status will be set, and the thread will receive a {@link&#10;     * java.nio.channels.ClosedByInterruptException}.&#10;     *&#10;     * <p> If this thread is blocked in a {@link java.nio.channels.Selector}&#10;     * then the thread's interrupt status will be set and it will return&#10;     * immediately from the selection operation, possibly with a non-zero&#10;     * value, just as if the selector's {@link&#10;     * java.nio.channels.Selector#wakeup wakeup} method were invoked.&#10;     *&#10;     * <p> If none of the previous conditions hold then this thread's interrupt&#10;     * status will be set. </p>&#10;     *&#10;     * <p> Interrupting a thread that is not alive need not have any effect.&#10;     *&#10;     * @throws  SecurityException&#10;     *          if the current thread cannot modify this thread&#10;     *&#10;     * @revised 6.0&#10;     * @spec JSR-51&#10;     "
  ]
  node [
    id 1537
    label "sleep(long"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1538
    label "checkAccess()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1539
    label "wait(long)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1540
    label "java.lang.Object"
    type "class"
    comment "&#10; * Class {@code Object} is the root of the class hierarchy.&#10; * Every class has {@code Object} as a superclass. All objects,&#10; * including arrays, implement the methods of this class.&#10; *&#10; * @see     java.lang.Class&#10; * @since   1.0&#10; "
  ]
  node [
    id 1541
    label "public final Class<?> getClass()"
    type "method"
    comment "&#10;     * Returns the runtime class of this {@code Object}. The returned&#10;     * {@code Class} object is the object that is locked by {@code&#10;     * static synchronized} methods of the represented class.&#10;     *&#10;     * <p><b>The actual result type is {@code Class<? extends |X|>}&#10;     * where {@code |X|} is the erasure of the static type of the&#10;     * expression on which {@code getClass} is called.</b> For&#10;     * example, no cast is required in this code fragment:</p>&#10;     *&#10;     * <p>&#10;     * {@code Number n = 0;                             }<br>&#10;     * {@code Class<? extends Number> c = n.getClass(); }&#10;     * </p>&#10;     *&#10;     * @return The {@code Class} object that represents the runtime&#10;     *         class of this object.&#10;     * @jls 15.8.2 Class Literals&#10;     "
  ]
  node [
    id 1542
    label "java.util.HashMap"
  ]
  node [
    id 1543
    label " static int identityHashCode(Object obj)"
    type "method"
    comment " package-private "
  ]
  node [
    id 1544
    label "private static native int identityHashCodeNative(Object obj)"
    type "method"
    comment "&#10;     * Return the identity hash code when the information in the monitor field&#10;     * is not sufficient.&#10;     "
  ]
  node [
    id 1545
    label "private native Object internalClone()"
    type "method"
    comment "&#10;     * Native helper method for cloning.&#10;     "
  ]
  node [
    id 1546
    label "public final native void notify()"
    type "method"
    comment "&#10;     * Wakes up a single thread that is waiting on this object's&#10;     * monitor. If any threads are waiting on this object, one of them&#10;     * is chosen to be awakened. The choice is arbitrary and occurs at&#10;     * the discretion of the implementation. A thread waits on an object's&#10;     * monitor by calling one of the {@code wait} methods.&#10;     * <p>&#10;     * The awakened thread will not be able to proceed until the current&#10;     * thread relinquishes the lock on this object. The awakened thread will&#10;     * compete in the usual manner with any other threads that might be&#10;     * actively competing to synchronize on this object; for example, the&#10;     * awakened thread enjoys no reliable privilege or disadvantage in being&#10;     * the next thread to lock this object.&#10;     * <p>&#10;     * This method should only be called by a thread that is the owner&#10;     * of this object's monitor. A thread becomes the owner of the&#10;     * object's monitor in one of three ways:&#10;     * <ul>&#10;     * <li>By executing a synchronized instance method of that object.&#10;     * <li>By executing the body of a {@code synchronized} statement&#10;     *     that synchronizes on the object.&#10;     * <li>For objects of type {@code Class,} by executing a&#10;     *     synchronized static method of that class.&#10;     * </ul>&#10;     * <p>&#10;     * Only one thread at a time can own an object's monitor.&#10;     *&#10;     * @throws  IllegalMonitorStateException  if the current thread is not&#10;     *               the owner of this object's monitor.&#10;     * @see        java.lang.Object#notifyAll()&#10;     * @see        java.lang.Object#wait()&#10;     "
  ]
  node [
    id 1547
    label "public final native void notifyAll()"
    type "method"
    comment "&#10;     * Wakes up all threads that are waiting on this object's monitor. A&#10;     * thread waits on an object's monitor by calling one of the&#10;     * {@code wait} methods.&#10;     * <p>&#10;     * The awakened threads will not be able to proceed until the current&#10;     * thread relinquishes the lock on this object. The awakened threads&#10;     * will compete in the usual manner with any other threads that might&#10;     * be actively competing to synchronize on this object; for example,&#10;     * the awakened threads enjoy no reliable privilege or disadvantage in&#10;     * being the next thread to lock this object.&#10;     * <p>&#10;     * This method should only be called by a thread that is the owner&#10;     * of this object's monitor. See the {@code notify} method for a&#10;     * description of the ways in which a thread can become the owner of&#10;     * a monitor.&#10;     *&#10;     * @throws  IllegalMonitorStateException  if the current thread is not&#10;     *               the owner of this object's monitor.&#10;     * @see        java.lang.Object#notify()&#10;     * @see        java.lang.Object#wait()&#10;     "
  ]
  node [
    id 1548
    label "public final void wait(long timeoutMillis) throws InterruptedException"
    type "method"
    comment " public final native void wait(long timeoutMillis) throws InterruptedException;"
  ]
  node [
    id 1549
    label "public final native void wait(long timeoutMillis, int nanos) throws InterruptedException"
    type "method"
    comment "&#10;    public final void wait(long timeoutMillis, int nanos) throws InterruptedException {&#10;        if (timeoutMillis < 0) {&#10;            throw new IllegalArgumentException(&#34;timeoutMillis value is negative&#34;);&#10;        }&#10;&#10;        if (nanos < 0 || nanos > 999999) {&#10;            throw new IllegalArgumentException(&#10;                                &#34;nanosecond timeout value out of range&#34;);&#10;        }&#10;&#10;        if (nanos > 0 &#38;&#38; timeoutMillis < Long.MAX_VALUE) {&#10;            timeoutMillis++;&#10;        }&#10;&#10;        wait(timeoutMillis);&#10;    }&#10;    "
  ]
  node [
    id 1550
    label "public final void wait() throws InterruptedException"
    type "method"
    comment "&#10;     * Causes the current thread to wait until it is awakened, typically&#10;     * by being <em>notified</em> or <em>interrupted</em>.&#10;     * <p>&#10;     * In all respects, this method behaves as if {@code wait(0L, 0)}&#10;     * had been called. See the specification of the {@link #wait(long, int)} method&#10;     * for details.&#10;     *&#10;     * @throws IllegalMonitorStateException if the current thread is not&#10;     *         the owner of the object's monitor&#10;     * @throws InterruptedException if any thread interrupted the current thread before or&#10;     *         while the current thread was waiting. The <em>interrupted status</em> of the&#10;     *         current thread is cleared when this exception is thrown.&#10;     * @see    #notify()&#10;     * @see    #notifyAll()&#10;     * @see    #wait(long)&#10;     * @see    #wait(long, int)&#10;     "
  ]
  node [
    id 1551
    label "wait(long"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1552
    label "protected void finalize() throws Throwable"
    type "method"
    comment " @Deprecated(since=&#34;9&#34;)"
  ]
  node [
    id 1553
    label "join()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1554
    label "java.nio.channels.Selector"
    type "class"
    comment ""
  ]
  node [
    id 1555
    label "public static Selector open() throws IOException"
    type "method"
    comment "&#10;     * Opens a selector.&#10;     *&#10;     * <p> The new selector is created by invoking the {@link&#10;     * java.nio.channels.spi.SelectorProvider#openSelector openSelector} method&#10;     * of the system-wide default {@link&#10;     * java.nio.channels.spi.SelectorProvider} object.  </p>&#10;     *&#10;     * @return  A new selector&#10;     *&#10;     * @throws  IOException&#10;     *          If an I/O error occurs&#10;     "
  ]
  node [
    id 1556
    label "public abstract boolean isOpen()"
    type "method"
    comment "&#10;     * Tells whether or not this file system is open.&#10;     *&#10;     * <p> File systems created by the default provider are always open.&#10;     *&#10;     * @return  {@code true} if, and only if, this file system is open&#10;     "
  ]
  node [
    id 1557
    label "public abstract SelectorProvider provider()"
    type "method"
    comment "&#10;     * Returns the provider that created this channel.&#10;     *&#10;     * @return  The provider that created this channel&#10;     "
  ]
  node [
    id 1558
    label "public abstract Set<SelectionKey> keys()"
    type "method"
    comment "&#10;     * Returns this selector's key set.&#10;     *&#10;     * <p> The key set is not directly modifiable.  A key is removed only after&#10;     * it has been cancelled and its channel has been deregistered.  Any&#10;     * attempt to modify the key set will cause an {@link&#10;     * UnsupportedOperationException} to be thrown.&#10;     *&#10;     * <p> The set is <a href=&#34;#ksc&#34;>safe</a> for use by multiple concurrent&#10;     * threads.  </p>&#10;     *&#10;     * @return  This selector's key set&#10;     *&#10;     * @throws  ClosedSelectorException&#10;     *          If this selector is closed&#10;     "
  ]
  node [
    id 1559
    label "public abstract Set<SelectionKey> selectedKeys()"
    type "method"
    comment "&#10;     * Returns this selector's selected-key set.&#10;     *&#10;     * <p> Keys may be removed from, but not directly added to, the&#10;     * selected-key set.  Any attempt to add an object to the key set will&#10;     * cause an {@link UnsupportedOperationException} to be thrown.&#10;     *&#10;     * <p> The selected-key set is <a href=&#34;#sksc&#34;>not thread-safe</a>.  </p>&#10;     *&#10;     * @return  This selector's selected-key set&#10;     *&#10;     * @throws  ClosedSelectorException&#10;     *          If this selector is closed&#10;     "
  ]
  node [
    id 1560
    label "public abstract int selectNow() throws IOException"
    type "method"
    comment "&#10;     * Selects a set of keys whose corresponding channels are ready for I/O&#10;     * operations.&#10;     *&#10;     * <p> This method performs a non-blocking <a href=&#34;#selop&#34;>selection&#10;     * operation</a>.  If no channels have become selectable since the previous&#10;     * selection operation then this method immediately returns zero.&#10;     *&#10;     * <p> Invoking this method clears the effect of any previous invocations&#10;     * of the {@link #wakeup wakeup} method.  </p>&#10;     *&#10;     * @return  The number of keys, possibly zero, whose ready-operation sets&#10;     *          were updated by the selection operation&#10;     *&#10;     * @throws  IOException&#10;     *          If an I/O error occurs&#10;     *&#10;     * @throws  ClosedSelectorException&#10;     *          If this selector is closed&#10;     "
  ]
  node [
    id 1561
    label "wakeup"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1562
    label "public abstract int select(long timeout) throws IOException"
    type "method"
    comment "&#10;     * Selects a set of keys whose corresponding channels are ready for I/O&#10;     * operations.&#10;     *&#10;     * <p> This method performs a blocking <a href=&#34;#selop&#34;>selection&#10;     * operation</a>.  It returns only after at least one channel is selected,&#10;     * this selector's {@link #wakeup wakeup} method is invoked, the current&#10;     * thread is interrupted, or the given timeout period expires, whichever&#10;     * comes first.&#10;     *&#10;     * <p> This method does not offer real-time guarantees: It schedules the&#10;     * timeout as if by invoking the {@link Object#wait(long)} method. </p>&#10;     *&#10;     * @param  timeout  If positive, block for up to {@code timeout}&#10;     *                  milliseconds, more or less, while waiting for a&#10;     *                  channel to become ready; if zero, block indefinitely;&#10;     *                  must not be negative&#10;     *&#10;     * @return  The number of keys, possibly zero,&#10;     *          whose ready-operation sets were updated&#10;     *&#10;     * @throws  IOException&#10;     *          If an I/O error occurs&#10;     *&#10;     * @throws  ClosedSelectorException&#10;     *          If this selector is closed&#10;     *&#10;     * @throws  IllegalArgumentException&#10;     *          If the value of the timeout argument is negative&#10;     "
  ]
  node [
    id 1563
    label "public abstract int select() throws IOException"
    type "method"
    comment "&#10;     * Selects a set of keys whose corresponding channels are ready for I/O&#10;     * operations.&#10;     *&#10;     * <p> This method performs a blocking <a href=&#34;#selop&#34;>selection&#10;     * operation</a>.  It returns only after at least one channel is selected,&#10;     * this selector's {@link #wakeup wakeup} method is invoked, or the current&#10;     * thread is interrupted, whichever comes first.  </p>&#10;     *&#10;     * @return  The number of keys, possibly zero,&#10;     *          whose ready-operation sets were updated&#10;     *&#10;     * @throws  IOException&#10;     *          If an I/O error occurs&#10;     *&#10;     * @throws  ClosedSelectorException&#10;     *          If this selector is closed&#10;     "
  ]
  node [
    id 1564
    label "public int select(Consumer<SelectionKey> action, long timeout) throws IOException"
    type "method"
    comment "&#10;     * Selects and performs an action on the keys whose corresponding channels&#10;     * are ready for I/O operations.&#10;     *&#10;     * <p> This method performs a blocking <a href=&#34;#selop&#34;>selection&#10;     * operation</a>.  It wakes up from querying the operating system only when&#10;     * at least one channel is selected, this selector's {@link #wakeup wakeup}&#10;     * method is invoked, the current thread is interrupted, or the given&#10;     * timeout period expires, whichever comes first.&#10;     *&#10;     * <p> The specified <i>action</i>'s {@link Consumer#accept(Object) accept}&#10;     * method is invoked with the key for each channel that is ready to perform&#10;     * an operation identified by its key's interest set.  The {@code accept}&#10;     * method may be invoked more than once for the same key but with the&#10;     * ready-operation set containing a subset of the operations for which the&#10;     * channel is ready (as described above).  The {@code accept} method is&#10;     * invoked while synchronized on the selector and its selected-key set.&#10;     * Great care must be taken to avoid deadlocking with other threads that&#10;     * also synchronize on these objects.  Selection operations are not reentrant&#10;     * in general and consequently the <i>action</i> should take great care not&#10;     * to attempt a selection operation on the same selector.  The behavior when&#10;     * attempting a reentrant selection operation is implementation specific and&#10;     * therefore not specified.  If the <i>action</i> closes the selector then&#10;     * {@code ClosedSelectorException} is thrown when the action completes.&#10;     * The <i>action</i> is not prohibited from closing channels registered with&#10;     * the selector, nor prohibited from cancelling keys or changing a key's&#10;     * interest set.  If a channel is selected but its key is cancelled or its&#10;     * interest set changed before the <i>action</i> is performed on the key&#10;     * then it is implementation specific as to whether the <i>action</i> is&#10;     * invoked (it may be invoked with an {@link SelectionKey#isValid() invalid}&#10;     * key).  Exceptions thrown by the action are relayed to the caller.&#10;     *&#10;     * <p> This method does not offer real-time guarantees: It schedules the&#10;     * timeout as if by invoking the {@link Object#wait(long)} method.&#10;     *&#10;     * @implSpec The default implementation removes all keys from the&#10;     * selected-key set, invokes {@link #select(long) select(long)} with the&#10;     * given timeout and then performs the action for each key added to the&#10;     * selected-key set.  The default implementation does not detect the action&#10;     * performing a reentrant selection operation.  The selected-key set may&#10;     * or may not be empty on completion of the default implementation.&#10;     *&#10;     * @param  action   The action to perform&#10;     *&#10;     * @param  timeout  If positive, block for up to {@code timeout}&#10;     *                  milliseconds, more or less, while waiting for a&#10;     *                  channel to become ready; if zero, block indefinitely;&#10;     *                  must not be negative&#10;     *&#10;     * @return  The number of unique keys consumed, possibly zero&#10;     *&#10;     * @throws  IOException&#10;     *          If an I/O error occurs&#10;     *&#10;     * @throws  ClosedSelectorException&#10;     *          If this selector is closed or is closed by the action&#10;     *&#10;     * @throws  IllegalArgumentException&#10;     *          If the value of the timeout argument is negative&#10;     *&#10;     * @since 11&#10;     "
  ]
  node [
    id 1565
    label "select(long)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1566
    label "accept(Object)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1567
    label "java.util.function.Consumer"
    type "class"
    comment "&#10; * Represents an operation that accepts a single input argument and returns no&#10; * result. Unlike most other functional interfaces, {@code Consumer} is expected&#10; * to operate via side-effects.&#10; *&#10; * <p>This is a <a href=&#34;package-summary.html&#34;>functional interface</a>&#10; * whose functional method is {@link #accept(Object)}.&#10; *&#10; * @param <T> the type of the input to the operation&#10; *&#10; * @since 1.8&#10; "
  ]
  node [
    id 1568
    label " void accept(T t)"
    type "method"
    comment "&#10;     * Performs this operation on the given argument.&#10;     *&#10;     * @param t the input argument&#10;     "
  ]
  node [
    id 1569
    label " Consumer<T> andThen(Consumer<? super T> after)"
    type "method"
    comment "&#10;     * Returns a composed {@code Consumer} that performs, in sequence, this&#10;     * operation followed by the {@code after} operation. If performing either&#10;     * operation throws an exception, it is relayed to the caller of the&#10;     * composed operation.  If performing this operation throws an exception,&#10;     * the {@code after} operation will not be performed.&#10;     *&#10;     * @param after the operation to perform after this operation&#10;     * @return a composed {@code Consumer} that performs in sequence this&#10;     * operation followed by the {@code after} operation&#10;     * @throws NullPointerException if {@code after} is null&#10;     "
  ]
  node [
    id 1570
    label "public int select(Consumer<SelectionKey> action) throws IOException"
    type "method"
    comment "&#10;     * Selects and performs an action on the keys whose corresponding channels&#10;     * are ready for I/O operations.&#10;     *&#10;     * <p> This method performs a blocking <a href=&#34;#selop&#34;>selection&#10;     * operation</a>.  It wakes up from querying the operating system only when&#10;     * at least one channel is selected, this selector's {@link #wakeup wakeup}&#10;     * method is invoked, or the current thread is interrupted, whichever comes&#10;     * first.&#10;     *&#10;     * <p> This method is equivalent to invoking the 2-arg&#10;     * {@link #select(Consumer, long) select} method with a timeout of {@code 0}&#10;     * to block indefinitely.  </p>&#10;     *&#10;     * @implSpec The default implementation invokes the 2-arg {@code select}&#10;     * method with a timeout of {@code 0}.&#10;     *&#10;     * @param  action   The action to perform&#10;     *&#10;     * @return  The number of unique keys consumed, possibly zero&#10;     *&#10;     * @throws  IOException&#10;     *          If an I/O error occurs&#10;     *&#10;     * @throws  ClosedSelectorException&#10;     *          If this selector is closed or is closed by the action&#10;     *&#10;     * @since 11&#10;     "
  ]
  node [
    id 1571
    label "select(Consumer"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1572
    label "public int selectNow(Consumer<SelectionKey> action) throws IOException"
    type "method"
    comment "&#10;     * Selects and performs an action on the keys whose corresponding channels&#10;     * are ready for I/O operations.&#10;     *&#10;     * <p> This method performs a non-blocking <a href=&#34;#selop&#34;>selection&#10;     * operation</a>.&#10;     *&#10;     * <p> Invoking this method clears the effect of any previous invocations&#10;     * of the {@link #wakeup wakeup} method.  </p>&#10;     *&#10;     * @implSpec The default implementation removes all keys from the&#10;     * selected-key set, invokes {@link #selectNow() selectNow()} and then&#10;     * performs the action for each key added to the selected-key set.  The&#10;     * default implementation does not detect the action performing a reentrant&#10;     * selection operation.  The selected-key set may or may not be empty on&#10;     * completion of the default implementation.&#10;     *&#10;     * @param  action   The action to perform&#10;     *&#10;     * @return  The number of unique keys consumed, possibly zero&#10;     *&#10;     * @throws  IOException&#10;     *          If an I/O error occurs&#10;     *&#10;     * @throws  ClosedSelectorException&#10;     *          If this selector is closed or is closed by the action&#10;     *&#10;     * @since 11&#10;     "
  ]
  node [
    id 1573
    label "selectNow()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1574
    label "private int doSelect(Consumer<SelectionKey> action, long timeout) throws IOException"
    type "method"
    comment "&#10;     * Default implementation of select(Consumer) and selectNow(Consumer).&#10;     "
  ]
  node [
    id 1575
    label "public abstract Selector wakeup()"
    type "method"
    comment "&#10;     * Causes the first selection operation that has not yet returned to return&#10;     * immediately.&#10;     *&#10;     * <p> If another thread is currently blocked in a selection operation then&#10;     * that invocation will return immediately.  If no selection operation is&#10;     * currently in progress then the next invocation of a selection operation&#10;     * will return immediately unless {@link #selectNow()} or {@link&#10;     * #selectNow(Consumer)} is invoked in the meantime.  In any case the value&#10;     * returned by that invocation may be non-zero.  Subsequent selection&#10;     * operations will block as usual unless this method is invoked again in the&#10;     * meantime.&#10;     *&#10;     * <p> Invoking this method more than once between two successive selection&#10;     * operations has the same effect as invoking it just once.  </p>&#10;     *&#10;     * @return  This selector&#10;     "
  ]
  node [
    id 1576
    label "selectNow(Consumer)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1577
    label "java.nio.channels.ClosedSelectorException"
    type "class"
    comment ""
  ]
  node [
    id 1578
    label "java.nio.channels.ClosedByInterruptException"
    type "class"
    comment ""
  ]
  node [
    id 1579
    label "java.nio.channels.InterruptibleChannel"
    type "class"
    comment ""
  ]
  node [
    id 1580
    label "java.nio.channels.AsynchronousCloseException"
    type "class"
    comment ""
  ]
  node [
    id 1581
    label "java.lang.InterruptedException"
    type "class"
    comment "&#10; * Thrown when a thread is waiting, sleeping, or otherwise occupied,&#10; * and the thread is interrupted, either before or during the activity.&#10; * Occasionally a method may wish to test whether the current&#10; * thread has been interrupted, and if so, to immediately throw&#10; * this exception.  The following code can be used to achieve&#10; * this effect:&#10; * <pre>&#10; *  if (Thread.interrupted())  // Clears interrupted status!&#10; *      throw new InterruptedException();&#10; * </pre>&#10; *&#10; * @author  Frank Yellin&#10; * @see     java.lang.Object#wait()&#10; * @see     java.lang.Object#wait(long)&#10; * @see     java.lang.Object#wait(long, int)&#10; * @see     java.lang.Thread#sleep(long)&#10; * @see     java.lang.Thread#interrupt()&#10; * @see     java.lang.Thread#interrupted()&#10; * @since   1.0&#10; "
  ]
  node [
    id 1582
    label "join(long)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1583
    label "java.lang.SecurityException"
    type "class"
    comment "&#10; * Thrown by the security manager to indicate a security violation.&#10; *&#10; * @see     java.lang.SecurityManager&#10; * @since   1.0&#10; "
  ]
  node [
    id 1584
    label "join(long"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1585
    label "public static native boolean interrupted()"
    type "method"
    comment " }"
  ]
  node [
    id 1586
    label "public native boolean isInterrupted()"
    type "method"
    comment " }"
  ]
  node [
    id 1587
    label "public final boolean isAlive()"
    type "method"
    comment " public final native boolean isAlive();"
  ]
  node [
    id 1588
    label "public final void setPriority(int newPriority)"
    type "method"
    comment "&#10;     * Changes the priority of this thread.&#10;     * <p>&#10;     * First the {@code checkAccess} method of this thread is called&#10;     * with no arguments. This may result in throwing a {@code SecurityException}.&#10;     * <p>&#10;     * Otherwise, the priority of this thread is set to the smaller of&#10;     * the specified {@code newPriority} and the maximum permitted&#10;     * priority of the thread's thread group.&#10;     *&#10;     * @param newPriority priority to set this thread to&#10;     * @throws     IllegalArgumentException  If the priority is not in the&#10;     *               range {@code MIN_PRIORITY} to&#10;     *               {@code MAX_PRIORITY}.&#10;     * @throws     SecurityException  if the current thread cannot modify&#10;     *               this thread.&#10;     * @see        #getPriority&#10;     * @see        #checkAccess()&#10;     * @see        #getThreadGroup()&#10;     * @see        #MAX_PRIORITY&#10;     * @see        #MIN_PRIORITY&#10;     * @see        ThreadGroup#getMaxPriority()&#10;     "
  ]
  node [
    id 1589
    label "public final int getPriority()"
    type "method"
    comment "&#10;     * Returns this thread's priority.&#10;     *&#10;     * @return  this thread's priority.&#10;     * @see     #setPriority&#10;     "
  ]
  node [
    id 1590
    label "public final synchronized void setName(String name)"
    type "method"
    comment "&#10;     * Changes the name of this thread to be equal to the argument {@code name}.&#10;     * <p>&#10;     * First the {@code checkAccess} method of this thread is called&#10;     * with no arguments. This may result in throwing a&#10;     * {@code SecurityException}.&#10;     *&#10;     * @param      name   the new name for this thread.&#10;     * @throws     SecurityException  if the current thread cannot modify this&#10;     *             thread.&#10;     * @see        #getName&#10;     * @see        #checkAccess()&#10;     "
  ]
  node [
    id 1591
    label "public final String getName()"
    type "method"
    comment "&#10;     * Returns the name of this thread group.&#10;     *&#10;     * @return  the name of this thread group.&#10;     * @since   1.0&#10;     "
  ]
  node [
    id 1592
    label "public final ThreadGroup getThreadGroup()"
    type "method"
    comment "&#10;     * Returns the thread group to which this thread belongs.&#10;     * This method returns null if this thread has died&#10;     * (been stopped).&#10;     *&#10;     * @return  this thread's thread group.&#10;     "
  ]
  node [
    id 1593
    label "public static int activeCount()"
    type "method"
    comment "&#10;     * Returns an estimate of the number of active threads in the current&#10;     * thread's {@linkplain java.lang.ThreadGroup thread group} and its&#10;     * subgroups. Recursively iterates over all subgroups in the current&#10;     * thread's thread group.&#10;     *&#10;     * <p> The value returned is only an estimate because the number of&#10;     * threads may change dynamically while this method traverses internal&#10;     * data structures, and might be affected by the presence of certain&#10;     * system threads. This method is intended primarily for debugging&#10;     * and monitoring purposes.&#10;     *&#10;     * @return  an estimate of the number of active threads in the current&#10;     *          thread's thread group and in any other thread group that&#10;     *          has the current thread's thread group as an ancestor&#10;     "
  ]
  node [
    id 1594
    label "public static int enumerate(Thread[] tarray)"
    type "method"
    comment "&#10;     * Copies into the specified array every active thread in the current&#10;     * thread's thread group and its subgroups. This method simply&#10;     * invokes the {@link java.lang.ThreadGroup#enumerate(Thread[])}&#10;     * method of the current thread's thread group.&#10;     *&#10;     * <p> An application might use the {@linkplain #activeCount activeCount}&#10;     * method to get an estimate of how big the array should be, however&#10;     * <i>if the array is too short to hold all the threads, the extra threads&#10;     * are silently ignored.</i>  If it is critical to obtain every active&#10;     * thread in the current thread's thread group and its subgroups, the&#10;     * invoker should verify that the returned int value is strictly less&#10;     * than the length of {@code tarray}.&#10;     *&#10;     * <p> Due to the inherent race condition in this method, it is recommended&#10;     * that the method only be used for debugging and monitoring purposes.&#10;     *&#10;     * @param  tarray&#10;     *         an array into which to put the list of threads&#10;     *&#10;     * @return  the number of threads put into the array&#10;     *&#10;     * @throws  SecurityException&#10;     *          if {@link java.lang.ThreadGroup#checkAccess} determines that&#10;     *          the current thread cannot access its thread group&#10;     "
  ]
  node [
    id 1595
    label "checkAccess"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1596
    label "java.lang.ThreadGroup"
    type "class"
    comment " The locking strategy for this code is to try to lock only one level of the&#10; * tree wherever possible, but otherwise to lock from the bottom up.&#10; * That is, from child thread groups to parents.&#10; * This has the advantage of limiting the number of locks that need to be held&#10; * and in particular avoids having to grab the lock for the root thread group,&#10; * (or a global lock) which would be a source of contention on a&#10; * multi-processor system with many thread groups.&#10; * This policy often leads to taking a snapshot of the state of a thread group&#10; * and working off of that snapshot, rather than holding the thread group locked&#10; * while we work on the children.&#10; "
  ]
  node [
    id 1597
    label "private static Void checkParentAccess(ThreadGroup parent)"
    type "method"
    comment "&#10;     * @throws  NullPointerException  if the parent argument is {@code null}&#10;     * @throws  SecurityException     if the current thread cannot create a&#10;     *                                thread in the specified thread group.&#10;     "
  ]
  node [
    id 1598
    label "public final ThreadGroup getParent()"
    type "method"
    comment "&#10;     * Returns the parent of this thread group.&#10;     * <p>&#10;     * First, if the parent is not {@code null}, the&#10;     * {@code checkAccess} method of the parent thread group is&#10;     * called with no arguments; this may result in a security exception.&#10;     *&#10;     * @return  the parent of this thread group. The top-level thread group&#10;     *          is the only thread group whose parent is {@code null}.&#10;     * @throws  SecurityException  if the current thread cannot modify&#10;     *               this thread group.&#10;     * @see        java.lang.ThreadGroup#checkAccess()&#10;     * @see        java.lang.SecurityException&#10;     * @see        java.lang.RuntimePermission&#10;     * @since   1.0&#10;     "
  ]
  node [
    id 1599
    label "public final int getMaxPriority()"
    type "method"
    comment "&#10;     * Returns the maximum priority of this thread group. Threads that are&#10;     * part of this group cannot have a higher priority than the maximum&#10;     * priority.&#10;     *&#10;     * @return  the maximum priority that a thread in this thread group&#10;     *          can have.&#10;     * @see     #setMaxPriority&#10;     * @since   1.0&#10;     "
  ]
  node [
    id 1600
    label "public final boolean isDaemon()"
    type "method"
    comment "&#10;     * Tests if this thread is a daemon thread.&#10;     *&#10;     * @return  {@code true} if this thread is a daemon thread;&#10;     *          {@code false} otherwise.&#10;     * @see     #setDaemon(boolean)&#10;     "
  ]
  node [
    id 1601
    label "public synchronized boolean isDestroyed()"
    type "method"
    comment "&#10;     * Tests if this thread group has been destroyed.&#10;     *&#10;     * @return  true if this object is destroyed&#10;     * @since   1.1&#10;     "
  ]
  node [
    id 1602
    label "public final void setDaemon(boolean daemon)"
    type "method"
    comment "&#10;     * Changes the daemon status of this thread group.&#10;     * <p>&#10;     * First, the {@code checkAccess} method of this thread group is&#10;     * called with no arguments; this may result in a security exception.&#10;     * <p>&#10;     * A daemon thread group is automatically destroyed when its last&#10;     * thread is stopped or its last thread group is destroyed.&#10;     *&#10;     * @param      daemon   if {@code true}, marks this thread group as&#10;     *                      a daemon thread group; otherwise, marks this&#10;     *                      thread group as normal.&#10;     * @throws     SecurityException  if the current thread cannot modify&#10;     *               this thread group.&#10;     * @see        java.lang.SecurityException&#10;     * @see        java.lang.ThreadGroup#checkAccess()&#10;     * @since      1.0&#10;     "
  ]
  node [
    id 1603
    label "public final void setMaxPriority(int pri)"
    type "method"
    comment "&#10;     * Sets the maximum priority of the group. Threads in the thread&#10;     * group that already have a higher priority are not affected.&#10;     * <p>&#10;     * First, the {@code checkAccess} method of this thread group is&#10;     * called with no arguments; this may result in a security exception.&#10;     * <p>&#10;     * If the {@code pri} argument is less than&#10;     * {@link Thread#MIN_PRIORITY} or greater than&#10;     * {@link Thread#MAX_PRIORITY}, it is clamped to those values.&#10;     * <p>&#10;     * Otherwise, the priority of this ThreadGroup object is set to the&#10;     * smaller of the specified {@code pri} and the maximum permitted&#10;     * priority of the parent of this thread group. (If this thread group&#10;     * is the system thread group, which has no parent, then its maximum&#10;     * priority is simply set to {@code pri}.) Then this method is&#10;     * called recursively, with {@code pri} as its argument, for&#10;     * every thread group that belongs to this thread group.&#10;     *&#10;     * @param      pri   the new priority of the thread group.&#10;     * @throws     SecurityException  if the current thread cannot modify&#10;     *               this thread group.&#10;     * @see        #getMaxPriority&#10;     * @see        java.lang.SecurityException&#10;     * @see        java.lang.ThreadGroup#checkAccess()&#10;     * @since      1.0&#10;     "
  ]
  node [
    id 1604
    label "public final boolean parentOf(ThreadGroup g)"
    type "method"
    comment "&#10;     * Tests if this thread group is either the thread group&#10;     * argument or one of its ancestor thread groups.&#10;     *&#10;     * @param   g   a thread group.&#10;     * @return  {@code true} if this thread group is the thread group&#10;     *          argument or one of its ancestor thread groups;&#10;     *          {@code false} otherwise.&#10;     * @since   1.0&#10;     "
  ]
  node [
    id 1605
    label "public final void checkAccess()"
    type "method"
    comment "&#10;     * Determines if the currently running thread has permission to&#10;     * modify this thread.&#10;     * <p>&#10;     * If there is a security manager, its {@code checkAccess} method&#10;     * is called with this thread as its argument. This may result in&#10;     * throwing a {@code SecurityException}.&#10;     *&#10;     * @throws  SecurityException  if the current thread is not allowed to&#10;     *          access this thread.&#10;     * @see        SecurityManager#checkAccess(Thread)&#10;     "
  ]
  node [
    id 1606
    label "public int activeCount()"
    type "method"
    comment "&#10;     * Returns an estimate of the number of active threads in this thread&#10;     * group and its subgroups. Recursively iterates over all subgroups in&#10;     * this thread group.&#10;     *&#10;     * <p> The value returned is only an estimate because the number of&#10;     * threads may change dynamically while this method traverses internal&#10;     * data structures, and might be affected by the presence of certain&#10;     * system threads. This method is intended primarily for debugging&#10;     * and monitoring purposes.&#10;     *&#10;     * @return  an estimate of the number of active threads in this thread&#10;     *          group and in any other thread group that has this thread&#10;     *          group as an ancestor&#10;     *&#10;     * @since   1.0&#10;     "
  ]
  node [
    id 1607
    label "public int enumerate(Thread[] list)"
    type "method"
    comment "&#10;     * Copies into the specified array every active thread in this&#10;     * thread group and its subgroups.&#10;     *&#10;     * <p> An invocation of this method behaves in exactly the same&#10;     * way as the invocation&#10;     *&#10;     * <blockquote>&#10;     * {@linkplain #enumerate(Thread[], boolean) enumerate}{@code (list, true)}&#10;     * </blockquote>&#10;     *&#10;     * @param  list&#10;     *         an array into which to put the list of threads&#10;     *&#10;     * @return  the number of threads put into the array&#10;     *&#10;     * @throws  SecurityException&#10;     *          if {@linkplain #checkAccess checkAccess} determines that&#10;     *          the current thread cannot access this thread group&#10;     *&#10;     * @since   1.0&#10;     "
  ]
  node [
    id 1608
    label "public int enumerate(Thread[] list, boolean recurse)"
    type "method"
    comment "&#10;     * Copies into the specified array every active thread in this&#10;     * thread group. If {@code recurse} is {@code true},&#10;     * this method recursively enumerates all subgroups of this&#10;     * thread group and references to every active thread in these&#10;     * subgroups are also included. If the array is too short to&#10;     * hold all the threads, the extra threads are silently ignored.&#10;     *&#10;     * <p> An application might use the {@linkplain #activeCount activeCount}&#10;     * method to get an estimate of how big the array should be, however&#10;     * <i>if the array is too short to hold all the threads, the extra threads&#10;     * are silently ignored.</i>  If it is critical to obtain every active&#10;     * thread in this thread group, the caller should verify that the returned&#10;     * int value is strictly less than the length of {@code list}.&#10;     *&#10;     * <p> Due to the inherent race condition in this method, it is recommended&#10;     * that the method only be used for debugging and monitoring purposes.&#10;     *&#10;     * @param  list&#10;     *         an array into which to put the list of threads&#10;     *&#10;     * @param  recurse&#10;     *         if {@code true}, recursively enumerate all subgroups of this&#10;     *         thread group&#10;     *&#10;     * @return  the number of threads put into the array&#10;     *&#10;     * @throws  SecurityException&#10;     *          if {@linkplain #checkAccess checkAccess} determines that&#10;     *          the current thread cannot access this thread group&#10;     *&#10;     * @since   1.0&#10;     "
  ]
  node [
    id 1609
    label "public int activeGroupCount()"
    type "method"
    comment "&#10;     * Returns an estimate of the number of active groups in this&#10;     * thread group and its subgroups. Recursively iterates over&#10;     * all subgroups in this thread group.&#10;     *&#10;     * <p> The value returned is only an estimate because the number of&#10;     * thread groups may change dynamically while this method traverses&#10;     * internal data structures. This method is intended primarily for&#10;     * debugging and monitoring purposes.&#10;     *&#10;     * @return  the number of active thread groups with this thread group as&#10;     *          an ancestor&#10;     *&#10;     * @since   1.0&#10;     "
  ]
  node [
    id 1610
    label "public int enumerate(ThreadGroup[] list)"
    type "method"
    comment "&#10;     * Copies into the specified array references to every active&#10;     * subgroup in this thread group and its subgroups.&#10;     *&#10;     * <p> An invocation of this method behaves in exactly the same&#10;     * way as the invocation&#10;     *&#10;     * <blockquote>&#10;     * {@linkplain #enumerate(ThreadGroup[], boolean) enumerate}{@code (list, true)}&#10;     * </blockquote>&#10;     *&#10;     * @param  list&#10;     *         an array into which to put the list of thread groups&#10;     *&#10;     * @return  the number of thread groups put into the array&#10;     *&#10;     * @throws  SecurityException&#10;     *          if {@linkplain #checkAccess checkAccess} determines that&#10;     *          the current thread cannot access this thread group&#10;     *&#10;     * @since   1.0&#10;     "
  ]
  node [
    id 1611
    label "public int enumerate(ThreadGroup[] list, boolean recurse)"
    type "method"
    comment "&#10;     * Copies into the specified array references to every active&#10;     * subgroup in this thread group. If {@code recurse} is&#10;     * {@code true}, this method recursively enumerates all subgroups of this&#10;     * thread group and references to every active thread group in these&#10;     * subgroups are also included.&#10;     *&#10;     * <p> An application might use the&#10;     * {@linkplain #activeGroupCount activeGroupCount} method to&#10;     * get an estimate of how big the array should be, however <i>if the&#10;     * array is too short to hold all the thread groups, the extra thread&#10;     * groups are silently ignored.</i>  If it is critical to obtain every&#10;     * active subgroup in this thread group, the caller should verify that&#10;     * the returned int value is strictly less than the length of&#10;     * {@code list}.&#10;     *&#10;     * <p> Due to the inherent race condition in this method, it is recommended&#10;     * that the method only be used for debugging and monitoring purposes.&#10;     *&#10;     * @param  list&#10;     *         an array into which to put the list of thread groups&#10;     *&#10;     * @param  recurse&#10;     *         if {@code true}, recursively enumerate all subgroups&#10;     *&#10;     * @return  the number of thread groups put into the array&#10;     *&#10;     * @throws  SecurityException&#10;     *          if {@linkplain #checkAccess checkAccess} determines that&#10;     *          the current thread cannot access this thread group&#10;     *&#10;     * @since   1.0&#10;     "
  ]
  node [
    id 1612
    label "public final void interrupt()"
    type "method"
    comment "&#10;     * Interrupts all threads in this thread group.&#10;     * <p>&#10;     * First, the {@code checkAccess} method of this thread group is&#10;     * called with no arguments; this may result in a security exception.&#10;     * <p>&#10;     * This method then calls the {@code interrupt} method on all the&#10;     * threads in this thread group and in all of its subgroups.&#10;     *&#10;     * @throws     SecurityException  if the current thread is not allowed&#10;     *               to access this thread group or any of the threads in&#10;     *               the thread group.&#10;     * @see        java.lang.Thread#interrupt()&#10;     * @see        java.lang.SecurityException&#10;     * @see        java.lang.ThreadGroup#checkAccess()&#10;     * @since      1.2&#10;     "
  ]
  node [
    id 1613
    label "private boolean stopOrSuspend(boolean suspend)"
    type "method"
    comment "&#10;     * Helper method: recursively stops or suspends (as directed by the&#10;     * boolean argument) all of the threads in this thread group and its&#10;     * subgroups, except the current thread.  This method returns true&#10;     * if (and only if) the current thread is found to be in this thread&#10;     * group or one of its subgroups.&#10;     "
  ]
  node [
    id 1614
    label "public final void destroy()"
    type "method"
    comment "&#10;     * Destroys this thread group and all of its subgroups. This thread&#10;     * group must be empty, indicating that all threads that had been in&#10;     * this thread group have since stopped.&#10;     * <p>&#10;     * First, the {@code checkAccess} method of this thread group is&#10;     * called with no arguments; this may result in a security exception.&#10;     *&#10;     * @throws     IllegalThreadStateException  if the thread group is not&#10;     *               empty or if the thread group has already been destroyed.&#10;     * @throws     SecurityException  if the current thread cannot modify this&#10;     *               thread group.&#10;     * @see        java.lang.ThreadGroup#checkAccess()&#10;     * @since      1.0&#10;     "
  ]
  node [
    id 1615
    label "private final void add(ThreadGroup g)"
    type "method"
    comment "&#10;     * Adds the specified Thread group to this group.&#10;     * @param g the specified Thread group to be added&#10;     * @throws  IllegalThreadStateException If the Thread group has been destroyed.&#10;     "
  ]
  node [
    id 1616
    label "private void remove(ThreadGroup g)"
    type "method"
    comment "&#10;     * Removes the specified Thread group from this group.&#10;     * @param g the Thread group to be removed&#10;     * @return if this Thread has already been destroyed.&#10;     "
  ]
  node [
    id 1617
    label " void addUnstarted()"
    type "method"
    comment "&#10;     * Increments the count of unstarted threads in the thread group.&#10;     * Unstarted threads are not added to the thread group so that they&#10;     * can be collected if they are never started, but they must be&#10;     * counted so that daemon thread groups with unstarted threads in&#10;     * them are not destroyed.&#10;     "
  ]
  node [
    id 1618
    label " void add(Thread t)"
    type "method"
    comment "&#10;     * Adds the specified thread to this thread group.&#10;     *&#10;     * <p> Note: This method is called from both library code&#10;     * and the Virtual Machine. It is called from VM to add&#10;     * certain system threads to the system thread group.&#10;     *&#10;     * @param  t&#10;     *         the Thread to be added&#10;     *&#10;     * @throws IllegalThreadStateException&#10;     *          if the Thread group has been destroyed&#10;     "
  ]
  node [
    id 1619
    label " void threadStartFailed(Thread t)"
    type "method"
    comment "&#10;     * Notifies the group that the thread {@code t} has failed&#10;     * an attempt to start.&#10;     *&#10;     * <p> The state of this thread group is rolled back as if the&#10;     * attempt to start the thread has never occurred. The thread is again&#10;     * considered an unstarted member of the thread group, and a subsequent&#10;     * attempt to start the thread is permitted.&#10;     *&#10;     * @param  t&#10;     *         the Thread whose start method was invoked&#10;     "
  ]
  node [
    id 1620
    label " void threadTerminated(Thread t)"
    type "method"
    comment "&#10;     * Notifies the group that the thread {@code t} has terminated.&#10;     *&#10;     * <p> Destroy the group if all of the following conditions are&#10;     * true: this is a daemon thread group; there are no more alive&#10;     * or unstarted threads in the group; there are no subgroups in&#10;     * this thread group.&#10;     *&#10;     * @param  t&#10;     *         the Thread that has terminated&#10;     "
  ]
  node [
    id 1621
    label "private void remove(Thread t)"
    type "method"
    comment "&#10;     * Removes the specified Thread from this group. Invoking this method&#10;     * on a thread group that has been destroyed has no effect.&#10;     *&#10;     * @param  t&#10;     *         the Thread to be removed&#10;     "
  ]
  node [
    id 1622
    label "public void list()"
    type "method"
    comment "&#10;     * Prints information about this thread group to the standard&#10;     * output. This method is useful only for debugging.&#10;     *&#10;     * @since   1.0&#10;     "
  ]
  node [
    id 1623
    label "public void uncaughtException(Thread t, Throwable e)"
    type "method"
    comment "&#10;     * Called by the Java Virtual Machine when a thread in this&#10;     * thread group stops because of an uncaught exception, and the thread&#10;     * does not have a specific {@link Thread.UncaughtExceptionHandler}&#10;     * installed.&#10;     * <p>&#10;     * The {@code uncaughtException} method of&#10;     * {@code ThreadGroup} does the following:&#10;     * <ul>&#10;     * <li>If this thread group has a parent thread group, the&#10;     *     {@code uncaughtException} method of that parent is called&#10;     *     with the same two arguments.&#10;     * <li>Otherwise, this method checks to see if there is a&#10;     *     {@linkplain Thread#getDefaultUncaughtExceptionHandler default&#10;     *     uncaught exception handler} installed, and if so, its&#10;     *     {@code uncaughtException} method is called with the same&#10;     *     two arguments.&#10;     * <li>Otherwise, this method determines if the {@code Throwable}&#10;     *     argument is an instance of {@link ThreadDeath}. If so, nothing&#10;     *     special is done. Otherwise, a message containing the&#10;     *     thread's name, as returned from the thread's {@link&#10;     *     Thread#getName getName} method, and a stack backtrace,&#10;     *     using the {@code Throwable}'s {@link&#10;     *     Throwable#printStackTrace printStackTrace} method, is&#10;     *     printed to the {@linkplain System#err standard error stream}.&#10;     * </ul>&#10;     * <p>&#10;     * Applications can override this method in subclasses of&#10;     * {@code ThreadGroup} to provide alternative handling of&#10;     * uncaught exceptions.&#10;     *&#10;     * @param   t   the thread that is about to exit.&#10;     * @param   e   the uncaught exception.&#10;     * @since   1.0&#10;     "
  ]
  node [
    id 1624
    label "printStackTrace"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1625
    label "java.lang.Throwable"
    type "class"
    comment "&#10; * The {@code Throwable} class is the superclass of all errors and&#10; * exceptions in the Java language. Only objects that are instances of this&#10; * class (or one of its subclasses) are thrown by the Java Virtual Machine or&#10; * can be thrown by the Java {@code throw} statement. Similarly, only&#10; * this class or one of its subclasses can be the argument type in a&#10; * {@code catch} clause.&#10; *&#10; * For the purposes of compile-time checking of exceptions, {@code&#10; * Throwable} and any subclass of {@code Throwable} that is not also a&#10; * subclass of either {@link RuntimeException} or {@link Error} are&#10; * regarded as checked exceptions.&#10; *&#10; * <p>Instances of two subclasses, {@link java.lang.Error} and&#10; * {@link java.lang.Exception}, are conventionally used to indicate&#10; * that exceptional situations have occurred. Typically, these instances&#10; * are freshly created in the context of the exceptional situation so&#10; * as to include relevant information (such as stack trace data).&#10; *&#10; * <p>A throwable contains a snapshot of the execution stack of its&#10; * thread at the time it was created. It can also contain a message&#10; * string that gives more information about the error. Over time, a&#10; * throwable can {@linkplain Throwable#addSuppressed suppress} other&#10; * throwables from being propagated.  Finally, the throwable can also&#10; * contain a <i>cause</i>: another throwable that caused this&#10; * throwable to be constructed.  The recording of this causal information&#10; * is referred to as the <i>chained exception</i> facility, as the&#10; * cause can, itself, have a cause, and so on, leading to a &#34;chain&#34; of&#10; * exceptions, each caused by another.&#10; *&#10; * <p>One reason that a throwable may have a cause is that the class that&#10; * throws it is built atop a lower layered abstraction, and an operation on&#10; * the upper layer fails due to a failure in the lower layer.  It would be bad&#10; * design to let the throwable thrown by the lower layer propagate outward, as&#10; * it is generally unrelated to the abstraction provided by the upper layer.&#10; * Further, doing so would tie the API of the upper layer to the details of&#10; * its implementation, assuming the lower layer's exception was a checked&#10; * exception.  Throwing a &#34;wrapped exception&#34; (i.e., an exception containing a&#10; * cause) allows the upper layer to communicate the details of the failure to&#10; * its caller without incurring either of these shortcomings.  It preserves&#10; * the flexibility to change the implementation of the upper layer without&#10; * changing its API (in particular, the set of exceptions thrown by its&#10; * methods).&#10; *&#10; * <p>A second reason that a throwable may have a cause is that the method&#10; * that throws it must conform to a general-purpose interface that does not&#10; * permit the method to throw the cause directly.  For example, suppose&#10; * a persistent collection conforms to the {@link java.util.Collection&#10; * Collection} interface, and that its persistence is implemented atop&#10; * {@code java.io}.  Suppose the internals of the {@code add} method&#10; * can throw an {@link java.io.IOException IOException}.  The implementation&#10; * can communicate the details of the {@code IOException} to its caller&#10; * while conforming to the {@code Collection} interface by wrapping the&#10; * {@code IOException} in an appropriate unchecked exception.  (The&#10; * specification for the persistent collection should indicate that it is&#10; * capable of throwing such exceptions.)&#10; *&#10; * <p>A cause can be associated with a throwable in two ways: via a&#10; * constructor that takes the cause as an argument, or via the&#10; * {@link #initCause(Throwable)} method.  New throwable classes that&#10; * wish to allow causes to be associated with them should provide constructors&#10; * that take a cause and delegate (perhaps indirectly) to one of the&#10; * {@code Throwable} constructors that takes a cause.&#10; *&#10; * Because the {@code initCause} method is public, it allows a cause to be&#10; * associated with any throwable, even a &#34;legacy throwable&#34; whose&#10; * implementation predates the addition of the exception chaining mechanism to&#10; * {@code Throwable}.&#10; *&#10; * <p>By convention, class {@code Throwable} and its subclasses have two&#10; * constructors, one that takes no arguments and one that takes a&#10; * {@code String} argument that can be used to produce a detail message.&#10; * Further, those subclasses that might likely have a cause associated with&#10; * them should have two more constructors, one that takes a&#10; * {@code Throwable} (the cause), and one that takes a&#10; * {@code String} (the detail message) and a {@code Throwable} (the&#10; * cause).&#10; *&#10; * @author  Josh Bloch (Added exception chaining and programmatic access to&#10; *          stack trace in 1.4.)&#10; * @jls 11.2 Compile-Time Checking of Exceptions&#10; * @since 1.0&#10; "
  ]
  node [
    id 1626
    label "public String getMessage()"
    type "method"
    comment "&#10;     * Produce the message and include the classname, if present.&#10;     "
  ]
  node [
    id 1627
    label "public String getLocalizedMessage()"
    type "method"
    comment "&#10;     * Creates a localized description of this throwable.&#10;     * Subclasses may override this method in order to produce a&#10;     * locale-specific message.  For subclasses that do not override this&#10;     * method, the default implementation returns the same result as&#10;     * {@code getMessage()}.&#10;     *&#10;     * @return  The localized description of this throwable.&#10;     * @since   1.1&#10;     "
  ]
  node [
    id 1628
    label "public synchronized Throwable getCause()"
    type "method"
    comment "&#10;     * Returns the cause of this throwable or {@code null} if the&#10;     * cause is nonexistent or unknown.  (The cause is the throwable that&#10;     * caused this throwable to get thrown.)&#10;     *&#10;     * <p>This implementation returns the cause that was supplied via one of&#10;     * the constructors requiring a {@code Throwable}, or that was set after&#10;     * creation with the {@link #initCause(Throwable)} method.  While it is&#10;     * typically unnecessary to override this method, a subclass can override&#10;     * it to return a cause set by some other means.  This is appropriate for&#10;     * a &#34;legacy chained throwable&#34; that predates the addition of chained&#10;     * exceptions to {@code Throwable}.  Note that it is <i>not</i>&#10;     * necessary to override any of the {@code PrintStackTrace} methods,&#10;     * all of which invoke the {@code getCause} method to determine the&#10;     * cause of a throwable.&#10;     *&#10;     * @return  the cause of this throwable or {@code null} if the&#10;     *          cause is nonexistent or unknown.&#10;     * @since 1.4&#10;     "
  ]
  node [
    id 1629
    label "initCause(Throwable)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1630
    label "public synchronized Throwable initCause(Throwable cause)"
    type "method"
    comment "&#10;     * Initializes the <i>cause</i> of this throwable to the specified value.&#10;     * (The cause is the throwable that caused this throwable to get thrown.)&#10;     *&#10;     * <p>This method can be called at most once.  It is generally called from&#10;     * within the constructor, or immediately after creating the&#10;     * throwable.  If this throwable was created&#10;     * with {@link #Throwable(Throwable)} or&#10;     * {@link #Throwable(String,Throwable)}, this method cannot be called&#10;     * even once.&#10;     *&#10;     * <p>An example of using this method on a legacy throwable type&#10;     * without other support for setting the cause is:&#10;     *&#10;     * <pre>&#10;     * try {&#10;     *     lowLevelOp();&#10;     * } catch (LowLevelException le) {&#10;     *     throw (HighLevelException)&#10;     *           new HighLevelException().initCause(le); // Legacy constructor&#10;     * }&#10;     * </pre>&#10;     *&#10;     * @param  cause the cause (which is saved for later retrieval by the&#10;     *         {@link #getCause()} method).  (A {@code null} value is&#10;     *         permitted, and indicates that the cause is nonexistent or&#10;     *         unknown.)&#10;     * @return  a reference to this {@code Throwable} instance.&#10;     * @throws IllegalArgumentException if {@code cause} is this&#10;     *         throwable.  (A throwable cannot be its own cause.)&#10;     * @throws IllegalStateException if this throwable was&#10;     *         created with {@link #Throwable(Throwable)} or&#10;     *         {@link #Throwable(String,Throwable)}, or this method has already&#10;     *         been called on this throwable.&#10;     * @since  1.4&#10;     "
  ]
  node [
    id 1631
    label "getCause()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1632
    label "Throwable(String"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1633
    label "Throwable(Throwable)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1634
    label " final void setCause(Throwable t)"
    type "method"
    comment "&#10;     * This is called by readObject of a few exceptions such as&#10;     * ClassNotFoundException and ExceptionInInitializerError to deserialize&#10;     * a stream output from an older runtime version where the cause may&#10;     * have set to null.&#10;     "
  ]
  node [
    id 1635
    label "getLocalizedMessage"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1636
    label "public void printStackTrace()"
    type "method"
    comment "&#10;     * Prints this throwable and its backtrace to the&#10;     * standard error stream. This method prints a stack trace for this&#10;     * {@code Throwable} object on the error output stream that is&#10;     * the value of the field {@code System.err}. The first line of&#10;     * output contains the result of the {@link #toString()} method for&#10;     * this object.  Remaining lines represent data previously recorded by&#10;     * the method {@link #fillInStackTrace()}. The format of this&#10;     * information depends on the implementation, but the following&#10;     * example may be regarded as typical:&#10;     * <blockquote><pre>&#10;     * java.lang.NullPointerException&#10;     *         at MyClass.mash(MyClass.java:9)&#10;     *         at MyClass.crunch(MyClass.java:6)&#10;     *         at MyClass.main(MyClass.java:3)&#10;     * </pre></blockquote>&#10;     * This example was produced by running the program:&#10;     * <pre>&#10;     * class MyClass {&#10;     *     public static void main(String[] args) {&#10;     *         crunch(null);&#10;     *     }&#10;     *     static void crunch(int[] a) {&#10;     *         mash(a);&#10;     *     }&#10;     *     static void mash(int[] b) {&#10;     *         System.out.println(b[0]);&#10;     *     }&#10;     * }&#10;     * </pre>&#10;     * The backtrace for a throwable with an initialized, non-null cause&#10;     * should generally include the backtrace for the cause.  The format&#10;     * of this information depends on the implementation, but the following&#10;     * example may be regarded as typical:&#10;     * <pre>&#10;     * HighLevelException: MidLevelException: LowLevelException&#10;     *         at Junk.a(Junk.java:13)&#10;     *         at Junk.main(Junk.java:4)&#10;     * Caused by: MidLevelException: LowLevelException&#10;     *         at Junk.c(Junk.java:23)&#10;     *         at Junk.b(Junk.java:17)&#10;     *         at Junk.a(Junk.java:11)&#10;     *         ... 1 more&#10;     * Caused by: LowLevelException&#10;     *         at Junk.e(Junk.java:30)&#10;     *         at Junk.d(Junk.java:27)&#10;     *         at Junk.c(Junk.java:21)&#10;     *         ... 3 more&#10;     * </pre>&#10;     * Note the presence of lines containing the characters {@code &#34;...&#34;}.&#10;     * These lines indicate that the remainder of the stack trace for this&#10;     * exception matches the indicated number of frames from the bottom of the&#10;     * stack trace of the exception that was caused by this exception (the&#10;     * &#34;enclosing&#34; exception).  This shorthand can greatly reduce the length&#10;     * of the output in the common case where a wrapped exception is thrown&#10;     * from same method as the &#34;causative exception&#34; is caught.  The above&#10;     * example was produced by running the program:&#10;     * <pre>&#10;     * public class Junk {&#10;     *     public static void main(String args[]) {&#10;     *         try {&#10;     *             a();&#10;     *         } catch(HighLevelException e) {&#10;     *             e.printStackTrace();&#10;     *         }&#10;     *     }&#10;     *     static void a() throws HighLevelException {&#10;     *         try {&#10;     *             b();&#10;     *         } catch(MidLevelException e) {&#10;     *             throw new HighLevelException(e);&#10;     *         }&#10;     *     }&#10;     *     static void b() throws MidLevelException {&#10;     *         c();&#10;     *     }&#10;     *     static void c() throws MidLevelException {&#10;     *         try {&#10;     *             d();&#10;     *         } catch(LowLevelException e) {&#10;     *             throw new MidLevelException(e);&#10;     *         }&#10;     *     }&#10;     *     static void d() throws LowLevelException {&#10;     *        e();&#10;     *     }&#10;     *     static void e() throws LowLevelException {&#10;     *         throw new LowLevelException();&#10;     *     }&#10;     * }&#10;     *&#10;     * class HighLevelException extends Exception {&#10;     *     HighLevelException(Throwable cause) { super(cause); }&#10;     * }&#10;     *&#10;     * class MidLevelException extends Exception {&#10;     *     MidLevelException(Throwable cause)  { super(cause); }&#10;     * }&#10;     *&#10;     * class LowLevelException extends Exception {&#10;     * }&#10;     * </pre>&#10;     * As of release 7, the platform supports the notion of&#10;     * <i>suppressed exceptions</i> (in conjunction with the {@code&#10;     * try}-with-resources statement). Any exceptions that were&#10;     * suppressed in order to deliver an exception are printed out&#10;     * beneath the stack trace.  The format of this information&#10;     * depends on the implementation, but the following example may be&#10;     * regarded as typical:&#10;     *&#10;     * <pre>&#10;     * Exception in thread &#34;main&#34; java.lang.Exception: Something happened&#10;     *  at Foo.bar(Foo.java:10)&#10;     *  at Foo.main(Foo.java:5)&#10;     *  Suppressed: Resource$CloseFailException: Resource ID = 0&#10;     *          at Resource.close(Resource.java:26)&#10;     *          at Foo.bar(Foo.java:9)&#10;     *          ... 1 more&#10;     * </pre>&#10;     * Note that the &#34;... n more&#34; notation is used on suppressed exceptions&#10;     * just as it is used on causes. Unlike causes, suppressed exceptions are&#10;     * indented beyond their &#34;containing exceptions.&#34;&#10;     *&#10;     * <p>An exception can have both a cause and one or more suppressed&#10;     * exceptions:&#10;     * <pre>&#10;     * Exception in thread &#34;main&#34; java.lang.Exception: Main block&#10;     *  at Foo3.main(Foo3.java:7)&#10;     *  Suppressed: Resource$CloseFailException: Resource ID = 2&#10;     *          at Resource.close(Resource.java:26)&#10;     *          at Foo3.main(Foo3.java:5)&#10;     *  Suppressed: Resource$CloseFailException: Resource ID = 1&#10;     *          at Resource.close(Resource.java:26)&#10;     *          at Foo3.main(Foo3.java:5)&#10;     * Caused by: java.lang.Exception: I did it&#10;     *  at Foo3.main(Foo3.java:8)&#10;     * </pre>&#10;     * Likewise, a suppressed exception can have a cause:&#10;     * <pre>&#10;     * Exception in thread &#34;main&#34; java.lang.Exception: Main block&#10;     *  at Foo4.main(Foo4.java:6)&#10;     *  Suppressed: Resource2$CloseFailException: Resource ID = 1&#10;     *          at Resource2.close(Resource2.java:20)&#10;     *          at Foo4.main(Foo4.java:5)&#10;     *  Caused by: java.lang.Exception: Rats, you caught me&#10;     *          at Resource2$CloseFailException.&#38;lt;init&#38;gt;(Resource2.java:45)&#10;     *          ... 2 more&#10;     * </pre>&#10;     "
  ]
  node [
    id 1637
    label "fillInStackTrace()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1638
    label "public void printStackTrace(PrintStream s)"
    type "method"
    comment "&#10;     * Prints this throwable and its backtrace to the specified print stream.&#10;     *&#10;     * @param s {@code PrintStream} to use for output&#10;     "
  ]
  node [
    id 1639
    label "private void printEnclosedStackTrace(PrintStreamOrWriter s, StackTraceElement[] enclosingTrace, String caption, String prefix, Set<Throwable> dejaVu)"
    type "method"
    comment "&#10;     * Print our stack trace as an enclosed exception for the specified&#10;     * stack trace.&#10;     "
  ]
  node [
    id 1640
    label "public void printStackTrace(PrintWriter s)"
    type "method"
    comment "&#10;     * Prints this throwable and its backtrace to the specified&#10;     * print writer.&#10;     *&#10;     * @param s {@code PrintWriter} to use for output&#10;     * @since   1.1&#10;     "
  ]
  node [
    id 1641
    label "public synchronized Throwable fillInStackTrace()"
    type "method"
    comment " Android-changed: Add @NeverInline to keep code size low."
  ]
  node [
    id 1642
    label "private static native Object nativeFillInStackTrace()"
    type "method"
    comment " private native Throwable fillInStackTrace(int dummy);"
  ]
  node [
    id 1643
    label "public StackTraceElement[] getStackTrace()"
    type "method"
    comment "&#10;     * Returns an array of stack trace elements representing the stack dump&#10;     * of this thread.  This method will return a zero-length array if&#10;     * this thread has not started, has started but has not yet been&#10;     * scheduled to run by the system, or has terminated.&#10;     * If the returned array is of non-zero length then the first element of&#10;     * the array represents the top of the stack, which is the most recent&#10;     * method invocation in the sequence.  The last element of the array&#10;     * represents the bottom of the stack, which is the least recent method&#10;     * invocation in the sequence.&#10;     *&#10;     * <p>If there is a security manager, and this thread is not&#10;     * the current thread, then the security manager's&#10;     * {@code checkPermission} method is called with a&#10;     * {@code RuntimePermission(&#34;getStackTrace&#34;)} permission&#10;     * to see if it's ok to get the stack trace.&#10;     *&#10;     * <p>Some virtual machines may, under some circumstances, omit one&#10;     * or more stack frames from the stack trace.  In the extreme case,&#10;     * a virtual machine that has no stack trace information concerning&#10;     * this thread is permitted to return a zero-length array from this&#10;     * method.&#10;     *&#10;     * @return an array of {@code StackTraceElement},&#10;     * each represents one stack frame.&#10;     *&#10;     * @throws SecurityException&#10;     *        if a security manager exists and its&#10;     *        {@code checkPermission} method doesn't allow&#10;     *        getting the stack trace of thread.&#10;     * @see SecurityManager#checkPermission&#10;     * @see RuntimePermission&#10;     * @see Throwable#getStackTrace&#10;     *&#10;     * @since 1.5&#10;     "
  ]
  node [
    id 1644
    label "printStackTrace()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1645
    label "public void setStackTrace(StackTraceElement[] stackTrace)"
    type "method"
    comment "&#10;     * Sets the stack trace elements that will be returned by&#10;     * {@link #getStackTrace()} and printed by {@link #printStackTrace()}&#10;     * and related methods.&#10;     *&#10;     * This method, which is designed for use by RPC frameworks and other&#10;     * advanced systems, allows the client to override the default&#10;     * stack trace that is either generated by {@link #fillInStackTrace()}&#10;     * when a throwable is constructed or deserialized when a throwable is&#10;     * read from a serialization stream.&#10;     *&#10;     * <p>If the stack trace of this {@code Throwable} {@linkplain&#10;     * Throwable#Throwable(String, Throwable, boolean, boolean) is not&#10;     * writable}, calling this method has no effect other than&#10;     * validating its argument.&#10;     *&#10;     * @param   stackTrace the stack trace elements to be associated with&#10;     * this {@code Throwable}.  The specified array is copied by this&#10;     * call; changes in the specified array after the method invocation&#10;     * returns will have no affect on this {@code Throwable}'s stack&#10;     * trace.&#10;     *&#10;     * @throws NullPointerException if {@code stackTrace} is&#10;     *         {@code null} or if any of the elements of&#10;     *         {@code stackTrace} are {@code null}&#10;     *&#10;     * @since  1.4&#10;     "
  ]
  node [
    id 1646
    label "getStackTrace()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1647
    label "private static native StackTraceElement[] nativeGetStackTrace(Object stackState)"
    type "method"
    comment " native StackTraceElement getStackTraceElement(int index);"
  ]
  node [
    id 1648
    label "private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException"
    type "method"
    comment "&#10;     * Called to read the object from a stream.&#10;     *&#10;     * @param  s the {@code ObjectInputStream} from which data is read&#10;     * @throws IOException if an I/O error occurs&#10;     * @throws ClassNotFoundException if a serialized class cannot be loaded&#10;     * @throws  InvalidObjectException&#10;     *          if the object is invalid or has a cause that is not&#10;     *          an {@code IOException}&#10;     "
  ]
  node [
    id 1649
    label "private synchronized void writeObject(ObjectOutputStream s) throws IOException"
    type "method"
    comment "&#10;     * Write a {@code Throwable} object to a stream.&#10;     *&#10;     * A {@code null} stack trace field is represented in the serial&#10;     * form as a one-element array whose element is equal to {@code&#10;     * new StackTraceElement(&#34;&#34;, &#34;&#34;, null, Integer.MIN_VALUE)}.&#10;     *&#10;     * @param  s the {@code ObjectOutputStream} to which data is written&#10;     * @throws IOException if an I/O error occurs&#10;     "
  ]
  node [
    id 1650
    label "public final synchronized void addSuppressed(Throwable exception)"
    type "method"
    comment "&#10;     * Appends the specified exception to the exceptions that were&#10;     * suppressed in order to deliver this exception. This method is&#10;     * thread-safe and typically called (automatically and implicitly)&#10;     * by the {@code try}-with-resources statement.&#10;     *&#10;     * <p>The suppression behavior is enabled <em>unless</em> disabled&#10;     * {@linkplain #Throwable(String, Throwable, boolean, boolean) via&#10;     * a constructor}.  When suppression is disabled, this method does&#10;     * nothing other than to validate its argument.&#10;     *&#10;     * <p>Note that when one exception {@linkplain&#10;     * #initCause(Throwable) causes} another exception, the first&#10;     * exception is usually caught and then the second exception is&#10;     * thrown in response.  In other words, there is a causal&#10;     * connection between the two exceptions.&#10;     *&#10;     * In contrast, there are situations where two independent&#10;     * exceptions can be thrown in sibling code blocks, in particular&#10;     * in the {@code try} block of a {@code try}-with-resources&#10;     * statement and the compiler-generated {@code finally} block&#10;     * which closes the resource.&#10;     *&#10;     * In these situations, only one of the thrown exceptions can be&#10;     * propagated.  In the {@code try}-with-resources statement, when&#10;     * there are two such exceptions, the exception originating from&#10;     * the {@code try} block is propagated and the exception from the&#10;     * {@code finally} block is added to the list of exceptions&#10;     * suppressed by the exception from the {@code try} block.  As an&#10;     * exception unwinds the stack, it can accumulate multiple&#10;     * suppressed exceptions.&#10;     *&#10;     * <p>An exception may have suppressed exceptions while also being&#10;     * caused by another exception.  Whether or not an exception has a&#10;     * cause is semantically known at the time of its creation, unlike&#10;     * whether or not an exception will suppress other exceptions&#10;     * which is typically only determined after an exception is&#10;     * thrown.&#10;     *&#10;     * <p>Note that programmer written code is also able to take&#10;     * advantage of calling this method in situations where there are&#10;     * multiple sibling exceptions and only one can be propagated.&#10;     *&#10;     * @param exception the exception to be added to the list of&#10;     *        suppressed exceptions&#10;     * @throws IllegalArgumentException if {@code exception} is this&#10;     *         throwable; a throwable cannot suppress itself.&#10;     * @throws NullPointerException if {@code exception} is {@code null}&#10;     * @since 1.7&#10;     "
  ]
  node [
    id 1651
    label "public final synchronized Throwable[] getSuppressed()"
    type "method"
    comment "&#10;     * Returns an array containing all of the exceptions that were&#10;     * suppressed, typically by the {@code try}-with-resources&#10;     * statement, in order to deliver this exception.&#10;     *&#10;     * If no exceptions were suppressed or {@linkplain&#10;     * #Throwable(String, Throwable, boolean, boolean) suppression is&#10;     * disabled}, an empty array is returned.  This method is&#10;     * thread-safe.  Writes to the returned array do not affect future&#10;     * calls to this method.&#10;     *&#10;     * @return an array containing all of the exceptions that were&#10;     *         suppressed to deliver this exception.&#10;     * @since 1.7&#10;     "
  ]
  node [
    id 1652
    label "Thread.UncaughtExceptionHandler"
  ]
  node [
    id 1653
    label "java.lang.ThreadDeath"
    type "class"
    comment ""
  ]
  node [
    id 1654
    label "public final void join(long millis) throws InterruptedException"
    type "method"
    comment " public final synchronized void join(long millis)"
  ]
  node [
    id 1655
    label "public final void join(long millis, int nanos) throws InterruptedException"
    type "method"
    comment " public final synchronized void join(long millis, int nanos)"
  ]
  node [
    id 1656
    label "public final void join() throws InterruptedException"
    type "method"
    comment "&#10;     * Waits for this thread to die.&#10;     *&#10;     * <p> An invocation of this method behaves in exactly the same&#10;     * way as the invocation&#10;     *&#10;     * <blockquote>&#10;     * {@linkplain #join(long) join}{@code (0)}&#10;     * </blockquote>&#10;     *&#10;     * @throws  InterruptedException&#10;     *          if any thread has interrupted the current thread. The&#10;     *          <i>interrupted status</i> of the current thread is&#10;     *          cleared when this exception is thrown.&#10;     "
  ]
  node [
    id 1657
    label "public static void dumpStack()"
    type "method"
    comment "&#10;     * Prints a stack trace of the current thread to the standard error stream.&#10;     * This method is used only for debugging.&#10;     *&#10;     * @see     Throwable#printStackTrace()&#10;     "
  ]
  node [
    id 1658
    label "public final void setDaemon(boolean on)"
    type "method"
    comment "&#10;     * Marks this thread as either a {@linkplain #isDaemon daemon} thread&#10;     * or a user thread. The Java Virtual Machine exits when the only&#10;     * threads running are all daemon threads.&#10;     *&#10;     * <p> This method must be invoked before the thread is started.&#10;     *&#10;     * @param  on&#10;     *         if {@code true}, marks this thread as a daemon thread&#10;     *&#10;     * @throws  IllegalThreadStateException&#10;     *          if this thread is {@linkplain #isAlive alive}&#10;     *&#10;     * @throws  SecurityException&#10;     *          if {@link #checkAccess} determines that the current&#10;     *          thread cannot modify this thread&#10;     "
  ]
  node [
    id 1659
    label "public ClassLoader getContextClassLoader()"
    type "method"
    comment "&#10;     * Returns the context {@code ClassLoader} for this thread. The context&#10;     * {@code ClassLoader} is provided by the creator of the thread for use&#10;     * by code running in this thread when loading classes and resources.&#10;     * If not {@linkplain #setContextClassLoader set}, the default is the&#10;     * {@code ClassLoader} context of the parent thread. The context&#10;     * {@code ClassLoader} of the&#10;     * primordial thread is typically set to the class loader used to load the&#10;     * application.&#10;     *&#10;     *&#10;     * @return  the context {@code ClassLoader} for this thread, or {@code null}&#10;     *          indicating the system class loader (or, failing that, the&#10;     *          bootstrap class loader)&#10;     *&#10;     * @throws  SecurityException&#10;     *          if the current thread cannot get the context ClassLoader&#10;     *&#10;     * @since 1.2&#10;     "
  ]
  node [
    id 1660
    label "public void setContextClassLoader(ClassLoader cl)"
    type "method"
    comment "&#10;     * Sets the context ClassLoader for this Thread. The context&#10;     * ClassLoader can be set when a thread is created, and allows&#10;     * the creator of the thread to provide the appropriate class loader,&#10;     * through {@code getContextClassLoader}, to code running in the thread&#10;     * when loading classes and resources.&#10;     *&#10;     * <p>If a security manager is present, its {@link&#10;     * SecurityManager#checkPermission(java.security.Permission) checkPermission}&#10;     * method is invoked with a {@link RuntimePermission RuntimePermission}{@code&#10;     * (&#34;setContextClassLoader&#34;)} permission to see if setting the context&#10;     * ClassLoader is permitted.&#10;     *&#10;     * @param  cl&#10;     *         the context ClassLoader for this Thread, or null  indicating the&#10;     *         system class loader (or, failing that, the bootstrap class loader)&#10;     *&#10;     * @throws  SecurityException&#10;     *          if the current thread cannot set the context ClassLoader&#10;     *&#10;     * @since 1.2&#10;     "
  ]
  node [
    id 1661
    label "public static native boolean holdsLock(Object obj)"
    type "method"
    comment "&#10;     * Returns {@code true} if and only if the current thread holds the&#10;     * monitor lock on the specified object.&#10;     *&#10;     * <p>This method is designed to allow a program to assert that&#10;     * the current thread already holds a specified lock:&#10;     * <pre>&#10;     *     assert Thread.holdsLock(obj);&#10;     * </pre>&#10;     *&#10;     * @param  obj the object on which to test lock ownership&#10;     * @throws NullPointerException if obj is {@code null}&#10;     * @return {@code true} if the current thread holds the monitor lock on&#10;     *         the specified object.&#10;     * @since 1.4&#10;     "
  ]
  node [
    id 1662
    label "public static Map<Thread, StackTraceElement[]> getAllStackTraces()"
    type "method"
    comment "&#10;     * Returns a map of stack traces for all live threads.&#10;     * The map keys are threads and each map value is an array of&#10;     * {@code StackTraceElement} that represents the stack dump&#10;     * of the corresponding {@code Thread}.&#10;     * The returned stack traces are in the format specified for&#10;     * the {@link #getStackTrace getStackTrace} method.&#10;     *&#10;     * <p>The threads may be executing while this method is called.&#10;     * The stack trace of each thread only represents a snapshot and&#10;     * each stack trace may be obtained at different time.  A zero-length&#10;     * array will be returned in the map value if the virtual machine has&#10;     * no stack trace information about a thread.&#10;     *&#10;     * @return a {@code Map} from {@code Thread} to an array of&#10;     * {@code StackTraceElement} that represents the stack trace of&#10;     * the corresponding thread.&#10;     *&#10;     * @see #getStackTrace&#10;     * @see SecurityManager#checkPermission&#10;     * @see RuntimePermission&#10;     * @see Throwable#getStackTrace&#10;     *&#10;     * @since 1.5&#10;     "
  ]
  node [
    id 1663
    label "getStackTrace"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1664
    label "private static boolean isCCLOverridden(Class<?> cl)"
    type "method"
    comment "&#10;     * Verifies that this (possibly subclass) instance can be constructed&#10;     * without violating security constraints: the subclass must not override&#10;     * security-sensitive non-final methods, or else the&#10;     * &#34;enableContextClassLoaderOverride&#34; RuntimePermission is checked.&#10;     "
  ]
  node [
    id 1665
    label "private static boolean auditSubclass(final Class<?> subcl)"
    type "method"
    comment "&#10;     * Performs reflective checks on given subclass to verify that it doesn't&#10;     * override security-sensitive non-final methods.  Returns true if subclass&#10;     * is &#34;safe&#34;, false otherwise.&#10;     "
  ]
  node [
    id 1666
    label "public long getId()"
    type "method"
    comment "&#10;     * Returns the identifier of this Thread.  The thread ID is a positive&#10;     * {@code long} number generated when this thread was created.&#10;     * The thread ID is unique and remains unchanged during its lifetime.&#10;     * When a thread is terminated, this thread ID may be reused.&#10;     *&#10;     * @return this thread's ID.&#10;     * @since 1.5&#10;     "
  ]
  node [
    id 1667
    label "public State getState()"
    type "method"
    comment "&#10;     * Returns the state of this thread.&#10;     * This method is designed for use in monitoring of the system state,&#10;     * not for synchronization control.&#10;     *&#10;     * @return this thread's state.&#10;     * @since 1.5&#10;     "
  ]
  node [
    id 1668
    label "public static void setDefaultUncaughtExceptionHandler(UncaughtExceptionHandler eh)"
    type "method"
    comment "&#10;     * Set the default handler invoked when a thread abruptly terminates&#10;     * due to an uncaught exception, and no other handler has been defined&#10;     * for that thread.&#10;     *&#10;     * <p>Uncaught exception handling is controlled first by the thread, then&#10;     * by the thread's {@link ThreadGroup} object and finally by the default&#10;     * uncaught exception handler. If the thread does not have an explicit&#10;     * uncaught exception handler set, and the thread's thread group&#10;     * (including parent thread groups)  does not specialize its&#10;     * {@code uncaughtException} method, then the default handler's&#10;     * {@code uncaughtException} method will be invoked.&#10;     * <p>By setting the default uncaught exception handler, an application&#10;     * can change the way in which uncaught exceptions are handled (such as&#10;     * logging to a specific device, or file) for those threads that would&#10;     * already accept whatever &#38;quot;default&#38;quot; behavior the system&#10;     * provided.&#10;     *&#10;     * <p>Note that the default uncaught exception handler should not usually&#10;     * defer to the thread's {@code ThreadGroup} object, as that could cause&#10;     * infinite recursion.&#10;     *&#10;     * @param eh the object to use as the default uncaught exception handler.&#10;     * If {@code null} then there is no default handler.&#10;     *&#10;     * @see #setUncaughtExceptionHandler&#10;     * @see #getUncaughtExceptionHandler&#10;     * @see ThreadGroup#uncaughtException&#10;     * @since 1.5&#10;     "
  ]
  node [
    id 1669
    label "public static UncaughtExceptionHandler getDefaultUncaughtExceptionHandler()"
    type "method"
    comment "&#10;     * Returns the default handler invoked when a thread abruptly terminates&#10;     * due to an uncaught exception. If the returned value is {@code null},&#10;     * there is no default.&#10;     * @since 1.5&#10;     * @see #setDefaultUncaughtExceptionHandler&#10;     * @return the default uncaught exception handler for all threads&#10;     "
  ]
  node [
    id 1670
    label "public void setUncaughtExceptionHandler(UncaughtExceptionHandler eh)"
    type "method"
    comment "&#10;     * Set the handler invoked when this thread abruptly terminates&#10;     * due to an uncaught exception.&#10;     * <p>A thread can take full control of how it responds to uncaught&#10;     * exceptions by having its uncaught exception handler explicitly set.&#10;     * If no such handler is set then the thread's {@code ThreadGroup}&#10;     * object acts as its handler.&#10;     * @param eh the object to use as this thread's uncaught exception&#10;     * handler. If {@code null} then this thread has no explicit handler.&#10;     * @throws  SecurityException  if the current thread is not allowed to&#10;     *          modify this thread.&#10;     * @see #setDefaultUncaughtExceptionHandler&#10;     * @see ThreadGroup#uncaughtException&#10;     * @since 1.5&#10;     "
  ]
  node [
    id 1671
    label "public final void dispatchUncaughtException(Throwable e)"
    type "method"
    comment " Android-changed: Make dispatchUncaughtException() public, for use by tests."
  ]
  node [
    id 1672
    label " static void processQueue(ReferenceQueue<Class<?>> queue, ConcurrentMap<? extends WeakReference<Class<?>>, ?> map)"
    type "method"
    comment "&#10;     * Removes from the specified map any keys that have been enqueued&#10;     * on the specified reference queue.&#10;     "
  ]
  node [
    id 1673
    label " native void setPriority0(int newPriority)"
    type "method"
    comment "&#10;     * Android-changed: Make accessible to Daemons.java for internal use.&#10;     "
  ]
  node [
    id 1674
    label "private native int nativeGetStatus(boolean hasBeenStarted)"
    type "method"
    comment " Android-added: Android specific nativeGetStatus() method."
  ]
  node [
    id 1675
    label "InterruptedException"
  ]
  node [
    id 1676
    label "public static boolean setCurrentTimeMillis(long millis)"
    type "method"
    comment "&#10;     * Sets the current wall time, in milliseconds.  Requires the calling&#10;     * process to have appropriate permissions.&#10;     *&#10;     * @return if the clock was successfully set to the specified time.&#10;     "
  ]
  node [
    id 1677
    label "public static native long uptimeMillis()"
    type "method"
    comment "&#10;     * Returns milliseconds since boot, not counting time spent in deep sleep.&#10;     *&#10;     * @return milliseconds of non-sleep uptime since boot.&#10;     "
  ]
  node [
    id 1678
    label "public static native long uptimeNanos()"
    type "method"
    comment "&#10;     * Returns nanoseconds since boot, not counting time spent in deep sleep.&#10;     *&#10;     * @return nanoseconds of non-sleep uptime since boot.&#10;     "
  ]
  node [
    id 1679
    label "public static native long elapsedRealtime()"
    type "method"
    comment "&#10;     * Returns milliseconds since boot, including time spent in sleep.&#10;     *&#10;     * @return elapsed milliseconds since boot.&#10;     "
  ]
  node [
    id 1680
    label "public static native long elapsedRealtimeNanos()"
    type "method"
    comment "&#10;     * Returns nanoseconds since boot, including time spent in sleep.&#10;     *&#10;     * @return elapsed nanoseconds since boot.&#10;     "
  ]
  node [
    id 1681
    label "public static native long currentThreadTimeMillis()"
    type "method"
    comment "&#10;     * Returns milliseconds running in the current thread.&#10;     *&#10;     * @return elapsed milliseconds in the thread&#10;     "
  ]
  node [
    id 1682
    label "public static Clock currentNetworkTimeClock()"
    type "method"
    comment "&#10;     * Returns a {@link Clock} that starts at January 1, 1970 00:00:00.0 UTC,&#10;     * synchronized using a remote network source outside the device.&#10;     * <p>&#10;     * While the time returned by {@link System#currentTimeMillis()} can be&#10;     * adjusted by the user, the time returned by this method cannot be adjusted&#10;     * by the user.&#10;     * <p>&#10;     * This performs no blocking network operations and returns values based on&#10;     * a recent successful synchronization event; it will either return a valid&#10;     * time or throw.&#10;     * <p>&#10;     * Note that synchronization may occur using an insecure network protocol,&#10;     * so the returned time should not be used for security purposes.&#10;     * The device may resynchronize with the same or different network source&#10;     * at any time. Due to network delays, variations between servers, or local&#10;     * (client side) clock drift, the accuracy of the returned times cannot be&#10;     * guaranteed. In extreme cases, consecutive calls to {@link&#10;     * Clock#millis()} on the returned {@link Clock}could return times that are&#10;     * out of order.&#10;     *&#10;     * @throws DateTimeException when no network time can be provided.&#10;     "
  ]
  node [
    id 1683
    label "millis()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1684
    label "java.time.Clock"
  ]
  node [
    id 1685
    label "public static Clock currentGnssTimeClock()"
    type "method"
    comment "&#10;     * Returns a {@link Clock} that starts at January 1, 1970 00:00:00.0 UTC,&#10;     * synchronized using the device's location provider.&#10;     *&#10;     * @throws DateTimeException when the location provider has not had a location fix since boot.&#10;     "
  ]
  node [
    id 1686
    label "public static native void arraycopy(Object src, int srcPos, Object dest, int destPos, int length)"
    type "method"
    comment "&#10;     * Copies an array from the specified source array, beginning at the&#10;     * specified position, to the specified position of the destination array.&#10;     * A subsequence of array components are copied from the source&#10;     * array referenced by <code>src</code> to the destination array&#10;     * referenced by <code>dest</code>. The number of components copied is&#10;     * equal to the <code>length</code> argument. The components at&#10;     * positions <code>srcPos</code> through&#10;     * <code>srcPos+length-1</code> in the source array are copied into&#10;     * positions <code>destPos</code> through&#10;     * <code>destPos+length-1</code>, respectively, of the destination&#10;     * array.&#10;     * <p>&#10;     * If the <code>src</code> and <code>dest</code> arguments refer to the&#10;     * same array object, then the copying is performed as if the&#10;     * components at positions <code>srcPos</code> through&#10;     * <code>srcPos+length-1</code> were first copied to a temporary&#10;     * array with <code>length</code> components and then the contents of&#10;     * the temporary array were copied into positions&#10;     * <code>destPos</code> through <code>destPos+length-1</code> of the&#10;     * destination array.&#10;     * <p>&#10;     * If <code>dest</code> is <code>null</code>, then a&#10;     * <code>NullPointerException</code> is thrown.&#10;     * <p>&#10;     * If <code>src</code> is <code>null</code>, then a&#10;     * <code>NullPointerException</code> is thrown and the destination&#10;     * array is not modified.&#10;     * <p>&#10;     * Otherwise, if any of the following is true, an&#10;     * <code>ArrayStoreException</code> is thrown and the destination is&#10;     * not modified:&#10;     * <ul>&#10;     * <li>The <code>src</code> argument refers to an object that is not an&#10;     *     array.&#10;     * <li>The <code>dest</code> argument refers to an object that is not an&#10;     *     array.&#10;     * <li>The <code>src</code> argument and <code>dest</code> argument refer&#10;     *     to arrays whose component types are different primitive types.&#10;     * <li>The <code>src</code> argument refers to an array with a primitive&#10;     *    component type and the <code>dest</code> argument refers to an array&#10;     *     with a reference component type.&#10;     * <li>The <code>src</code> argument refers to an array with a reference&#10;     *    component type and the <code>dest</code> argument refers to an array&#10;     *     with a primitive component type.&#10;     * </ul>&#10;     * <p>&#10;     * Otherwise, if any of the following is true, an&#10;     * <code>IndexOutOfBoundsException</code> is&#10;     * thrown and the destination is not modified:&#10;     * <ul>&#10;     * <li>The <code>srcPos</code> argument is negative.&#10;     * <li>The <code>destPos</code> argument is negative.&#10;     * <li>The <code>length</code> argument is negative.&#10;     * <li><code>srcPos+length</code> is greater than&#10;     *     <code>src.length</code>, the length of the source array.&#10;     * <li><code>destPos+length</code> is greater than&#10;     *     <code>dest.length</code>, the length of the destination array.&#10;     * </ul>&#10;     * <p>&#10;     * Otherwise, if any actual component of the source array from&#10;     * position <code>srcPos</code> through&#10;     * <code>srcPos+length-1</code> cannot be converted to the component&#10;     * type of the destination array by assignment conversion, an&#10;     * <code>ArrayStoreException</code> is thrown. In this case, let&#10;     * <b><i>k</i></b> be the smallest nonnegative integer less than&#10;     * length such that <code>src[srcPos+</code><i>k</i><code>]</code>&#10;     * cannot be converted to the component type of the destination&#10;     * array; when the exception is thrown, source array components from&#10;     * positions <code>srcPos</code> through&#10;     * <code>srcPos+</code><i>k</i><code>-1</code>&#10;     * will already have been copied to destination array positions&#10;     * <code>destPos</code> through&#10;     * <code>destPos+</code><i>k</I><code>-1</code> and no other&#10;     * positions of the destination array will have been modified.&#10;     * (Because of the restrictions already itemized, this&#10;     * paragraph effectively applies only to the situation where both&#10;     * arrays have component types that are reference types.)&#10;     *&#10;     * @param      src      the source array.&#10;     * @param      srcPos   starting position in the source array.&#10;     * @param      dest     the destination array.&#10;     * @param      destPos  starting position in the destination data.&#10;     * @param      length   the number of array elements to be copied.&#10;     * @exception  IndexOutOfBoundsException  if copying would cause&#10;     *               access of data outside array bounds.&#10;     * @exception  ArrayStoreException  if an element in the <code>src</code>&#10;     *               array could not be stored into the <code>dest</code> array&#10;     *               because of a type mismatch.&#10;     * @exception  NullPointerException if either <code>src</code> or&#10;     *               <code>dest</code> is <code>null</code>.&#10;     "
  ]
  node [
    id 1687
    label "private static void arraycopy(char[] src, int srcPos, char[] dst, int dstPos, int length)"
    type "method"
    comment "&#10;     * The char[] specialized version of arraycopy().&#10;     * Note: This method is required for runtime ART compiler optimizations.&#10;     * Do not remove or change the signature.&#10;     "
  ]
  node [
    id 1688
    label "private static native void arraycopyCharUnchecked(char[] src, int srcPos, char[] dst, int dstPos, int length)"
    type "method"
    comment "&#10;     * The char[] specialized, unchecked, native version of&#10;     * arraycopy(). This assumes error checking has been done.&#10;     "
  ]
  node [
    id 1689
    label "private static void arraycopy(byte[] src, int srcPos, byte[] dst, int dstPos, int length)"
    type "method"
    comment "&#10;     * The byte[] specialized version of arraycopy().&#10;     * Note: This method is required for runtime ART compiler optimizations.&#10;     * Do not remove or change the signature.&#10;     "
  ]
  node [
    id 1690
    label "private static native void arraycopyByteUnchecked(byte[] src, int srcPos, byte[] dst, int dstPos, int length)"
    type "method"
    comment "&#10;     * The byte[] specialized, unchecked, native version of&#10;     * arraycopy(). This assumes error checking has been done.&#10;     "
  ]
  node [
    id 1691
    label "private static void arraycopy(short[] src, int srcPos, short[] dst, int dstPos, int length)"
    type "method"
    comment "&#10;     * The short[] specialized version of arraycopy().&#10;     * Note: This method is required for runtime ART compiler optimizations.&#10;     * Do not remove or change the signature.&#10;     "
  ]
  node [
    id 1692
    label "private static native void arraycopyShortUnchecked(short[] src, int srcPos, short[] dst, int dstPos, int length)"
    type "method"
    comment "&#10;     * The short[] specialized, unchecked, native version of&#10;     * arraycopy(). This assumes error checking has been done.&#10;     "
  ]
  node [
    id 1693
    label "private static void arraycopy(int[] src, int srcPos, int[] dst, int dstPos, int length)"
    type "method"
    comment "&#10;     * The int[] specialized version of arraycopy().&#10;     * Note: This method is required for runtime ART compiler optimizations.&#10;     * Do not remove or change the signature.&#10;     "
  ]
  node [
    id 1694
    label "private static native void arraycopyIntUnchecked(int[] src, int srcPos, int[] dst, int dstPos, int length)"
    type "method"
    comment "&#10;     * The int[] specialized, unchecked, native version of&#10;     * arraycopy(). This assumes error checking has been done.&#10;     "
  ]
  node [
    id 1695
    label "private static void arraycopy(long[] src, int srcPos, long[] dst, int dstPos, int length)"
    type "method"
    comment "&#10;     * The long[] specialized version of arraycopy().&#10;     * Note: This method is required for runtime ART compiler optimizations.&#10;     * Do not remove or change the signature.&#10;     "
  ]
  node [
    id 1696
    label "private static native void arraycopyLongUnchecked(long[] src, int srcPos, long[] dst, int dstPos, int length)"
    type "method"
    comment "&#10;     * The long[] specialized, unchecked, native version of&#10;     * arraycopy(). This assumes error checking has been done.&#10;     "
  ]
  node [
    id 1697
    label "private static void arraycopy(float[] src, int srcPos, float[] dst, int dstPos, int length)"
    type "method"
    comment "&#10;     * The float[] specialized version of arraycopy().&#10;     * Note: This method is required for runtime ART compiler optimizations.&#10;     * Do not remove or change the signature.&#10;     "
  ]
  node [
    id 1698
    label "private static native void arraycopyFloatUnchecked(float[] src, int srcPos, float[] dst, int dstPos, int length)"
    type "method"
    comment "&#10;     * The float[] specialized, unchecked, native version of&#10;     * arraycopy(). This assumes error checking has been done.&#10;     "
  ]
  node [
    id 1699
    label "private static void arraycopy(double[] src, int srcPos, double[] dst, int dstPos, int length)"
    type "method"
    comment "&#10;     * The double[] specialized version of arraycopy().&#10;     * Note: This method is required for runtime ART compiler optimizations.&#10;     * Do not remove or change the signature.&#10;     "
  ]
  node [
    id 1700
    label "private static native void arraycopyDoubleUnchecked(double[] src, int srcPos, double[] dst, int dstPos, int length)"
    type "method"
    comment "&#10;     * The double[] specialized, unchecked, native version of&#10;     * arraycopy(). This assumes error checking has been done.&#10;     "
  ]
  node [
    id 1701
    label "private static void arraycopy(boolean[] src, int srcPos, boolean[] dst, int dstPos, int length)"
    type "method"
    comment "&#10;     * The boolean[] specialized version of arraycopy().&#10;     * Note: This method is required for runtime ART compiler optimizations.&#10;     * Do not remove or change the signature.&#10;     "
  ]
  node [
    id 1702
    label "private static native void arraycopyBooleanUnchecked(boolean[] src, int srcPos, boolean[] dst, int dstPos, int length)"
    type "method"
    comment "&#10;     * The boolean[] specialized, unchecked, native version of&#10;     * arraycopy(). This assumes error checking has been done.&#10;     "
  ]
  node [
    id 1703
    label "public static int identityHashCode(Object x)"
    type "method"
    comment "&#10;     * Returns the same hash code for the given object as&#10;     * would be returned by the default method hashCode(),&#10;     * whether or not the given object's class overrides&#10;     * hashCode().&#10;     * The hash code for the null reference is zero.&#10;     *&#10;     * @param x object for which the hashCode is to be calculated&#10;     * @return  the hashCode&#10;     * @since   JDK1.1&#10;     "
  ]
  node [
    id 1704
    label "public static Properties getProperties()"
    type "method"
    comment "&#10;     * Determines the current system properties.&#10;     *&#10;     *&#10;     * <p>The following properties are always provided by the Dalvik VM:</p>&#10;     * <p><table BORDER=&#34;1&#34; WIDTH=&#34;100%&#34; CELLPADDING=&#34;3&#34; CELLSPACING=&#34;0&#34; SUMMARY=&#34;&#34;>&#10;     * <tr BGCOLOR=&#34;#CCCCFF&#34; CLASS=&#34;TableHeadingColor&#34;>&#10;     *     <td><b>Name</b></td>        <td><b>Meaning</b></td>                    <td><b>Example</b></td></tr>&#10;     * <tr><td>file.separator</td>     <td>{@link java.io.File#separator}</td>    <td>{@code /}</td></tr>&#10;     *&#10;     * <tr><td>java.class.path</td>    <td>System class path</td>                 <td>{@code .}</td></tr>&#10;     * <tr><td>java.class.version</td> <td>(Not useful on Android)</td>           <td>{@code 50.0}</td></tr>&#10;     * <tr><td>java.compiler</td>      <td>(Not useful on Android)</td>           <td>Empty</td></tr>&#10;     * <tr><td>java.ext.dirs</td>      <td>(Not useful on Android)</td>           <td>Empty</td></tr>&#10;     * <tr><td>java.home</td>          <td>Location of the VM on the file system</td> <td>{@code /apex/com.android.art/}</td></tr>&#10;     * <tr><td>java.io.tmpdir</td>     <td>Location of a temporary directory.<br>The location varies by application.<br>See {@link java.io.File#createTempFile}</td> <td>{@code /data/user/0/com.android.app/cache}</td></tr>&#10;     * <tr><td>java.library.path</td>  <td>Search path for JNI libraries</td>     <td>{@code /vendor/lib:/system/lib}</td></tr>&#10;     * <tr><td>java.vendor</td>        <td>Human-readable VM vendor</td>          <td>{@code The Android Project}</td></tr>&#10;     * <tr><td>java.vendor.url</td>    <td>URL for VM vendor's web site</td>      <td>{@code http://www.android.com/}</td></tr>&#10;     * <tr><td>java.version</td>       <td>(Not useful on Android)</td>           <td>{@code 0}</td></tr>&#10;     *&#10;     * <tr><td>java.specification.version</td>    <td>VM libraries version</td>        <td>{@code 0.9}</td></tr>&#10;     * <tr><td>java.specification.vendor</td>     <td>VM libraries vendor</td>         <td>{@code The Android Project}</td></tr>&#10;     * <tr><td>java.specification.name</td>       <td>VM libraries name</td>           <td>{@code Dalvik Core Library}</td></tr>&#10;     * <tr><td>java.vm.version</td>               <td>VM implementation version</td>   <td>{@code 1.2.0}</td></tr>&#10;     * <tr><td>java.vm.vendor</td>                <td>VM implementation vendor</td>    <td>{@code The Android Project}</td></tr>&#10;     * <tr><td>java.vm.name</td>                  <td>VM implementation name</td>      <td>{@code Dalvik}</td></tr>&#10;     * <tr><td>java.vm.specification.version</td> <td>VM specification version</td>    <td>{@code 0.9}</td></tr>&#10;     * <tr><td>java.vm.specification.vendor</td>  <td>VM specification vendor</td>     <td>{@code The Android Project}</td></tr>&#10;     * <tr><td>java.vm.specification.name</td>    <td>VM specification name</td>       <td>{@code Dalvik Virtual Machine Specification}</td></tr>&#10;     *&#10;     * <tr><td>line.separator</td>     <td>The system line separator</td>         <td>{@code \n}</td></tr>&#10;     *&#10;     * <tr><td>os.arch</td>            <td>OS architecture</td>                   <td>{@code aarch64}</td></tr>&#10;     * <tr><td>os.name</td>            <td>OS (kernel) name</td>                  <td>{@code Linux}</td></tr>&#10;     * <tr><td>os.version</td>         <td>OS (kernel) version</td>               <td>{@code 5.10.98-g6ea688a79989}</td></tr>&#10;     *&#10;     * <tr><td>path.separator</td>     <td>See {@link java.io.File#pathSeparator}</td> <td>{@code :}</td></tr>&#10;     *&#10;     * <tr><td>user.dir</td>           <td>Base of non-absolute paths</td>        <td>{@code /}</td></tr>&#10;     * <tr><td>user.home</td>          <td>(Not useful on Android)</td>           <td>Empty</td></tr>&#10;     * <tr><td>user.name</td>          <td>(Not useful on Android)</td>           <td>Empty</td></tr>&#10;     *&#10;     * </table>&#10;     * <p>&#10;     * Multiple paths in a system property value are separated by the path&#10;     * separator character of the platform.&#10;     * <p>&#10;     * Note that even if the security manager does not permit the&#10;     * <code>getProperties</code> operation, it may choose to permit the&#10;     * {@link #getProperty(String)} operation.&#10;     *&#10;     * @return     the system properties&#10;     * @exception  SecurityException  if a security manager exists and its&#10;     *             <code>checkPropertiesAccess</code> method doesn't allow access&#10;     *              to the system properties.&#10;     * @see        #setProperties&#10;     * @see        java.lang.SecurityException&#10;     * @see        java.lang.SecurityManager#checkPropertiesAccess()&#10;     * @see        java.util.Properties&#10;     "
  ]
  node [
    id 1705
    label "createTempFile"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1706
    label "java.io.File"
    type "class"
    comment ""
  ]
  node [
    id 1707
    label " final boolean isInvalid()"
    type "method"
    comment "&#10;     * Check if the file has an invalid path. Currently, the inspection of&#10;     * a file path is very limited, and it only covers Nul character check.&#10;     * Returning true means the path is definitely invalid/garbage. But&#10;     * returning false does not guarantee that the path is valid.&#10;     *&#10;     * @return true if the file path is invalid.&#10;     "
  ]
  node [
    id 1708
    label " int getPrefixLength()"
    type "method"
    comment "&#10;     * Returns the length of this abstract pathname's prefix.&#10;     * For use by FileSystem classes.&#10;     "
  ]
  node [
    id 1709
    label "public String getName()"
    type "method"
    comment "&#10;     * Returns the name of the file or directory denoted by this abstract&#10;     * pathname.  This is just the last name in the pathname's name&#10;     * sequence.  If the pathname's name sequence is empty, then the empty&#10;     * string is returned.&#10;     *&#10;     * @return  The name of the file or directory denoted by this abstract&#10;     *          pathname, or the empty string if this pathname's name sequence&#10;     *          is empty&#10;     "
  ]
  node [
    id 1710
    label "public String getParent()"
    type "method"
    comment "&#10;     * Returns the pathname string of this abstract pathname's parent, or&#10;     * <code>null</code> if this pathname does not name a parent directory.&#10;     *&#10;     * <p> The <em>parent</em> of an abstract pathname consists of the&#10;     * pathname's prefix, if any, and each name in the pathname's name&#10;     * sequence except for the last.  If the name sequence is empty then&#10;     * the pathname does not name a parent directory.&#10;     *&#10;     * @return  The pathname string of the parent directory named by this&#10;     *          abstract pathname, or <code>null</code> if this pathname&#10;     *          does not name a parent&#10;     "
  ]
  node [
    id 1711
    label "public File getParentFile()"
    type "method"
    comment "&#10;     * Returns the abstract pathname of this abstract pathname's parent,&#10;     * or <code>null</code> if this pathname does not name a parent&#10;     * directory.&#10;     *&#10;     * <p> The <em>parent</em> of an abstract pathname consists of the&#10;     * pathname's prefix, if any, and each name in the pathname's name&#10;     * sequence except for the last.  If the name sequence is empty then&#10;     * the pathname does not name a parent directory.&#10;     *&#10;     * @return  The abstract pathname of the parent directory named by this&#10;     *          abstract pathname, or <code>null</code> if this pathname&#10;     *          does not name a parent&#10;     *&#10;     * @since 1.2&#10;     "
  ]
  node [
    id 1712
    label "public String getPath()"
    type "method"
    comment "&#10;     * Returns the decoded path component of this URI.&#10;     *&#10;     * <p> The string returned by this method is equal to that returned by the&#10;     * {@link #getRawPath() getRawPath} method except that all sequences of&#10;     * escaped octets are <a href=&#34;#decode&#34;>decoded</a>.  </p>&#10;     *&#10;     * @return  The decoded path component of this URI,&#10;     *          or {@code null} if the path is undefined&#10;     "
  ]
  node [
    id 1713
    label "separator"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1714
    label "public boolean isAbsolute()"
    type "method"
    comment "&#10;     * Tells whether or not this URI is absolute.&#10;     *&#10;     * <p> A URI is absolute if, and only if, it has a scheme component. </p>&#10;     *&#10;     * @return  {@code true} if, and only if, this URI is absolute&#10;     "
  ]
  node [
    id 1715
    label "public String getAbsolutePath()"
    type "method"
    comment "&#10;     * Returns the absolute path of this file. An absolute path is a path that starts at a root&#10;     * of the file system. On Android, there is only one root: {@code /}.&#10;     *&#10;     * <p>A common use for absolute paths is when passing paths to a {@code Process} as&#10;     * command-line arguments, to remove the requirement implied by relative paths, that the&#10;     * child must have the same working directory as its parent.&#10;     *&#10;     * @return  The absolute pathname string denoting the same file or&#10;     *          directory as this abstract pathname&#10;     *&#10;     * @see     java.io.File#isAbsolute()&#10;     "
  ]
  node [
    id 1716
    label "public File getAbsoluteFile()"
    type "method"
    comment "&#10;     * Returns the absolute form of this abstract pathname.  Equivalent to&#10;     * <code>new&#38;nbsp;File(this.{@link #getAbsolutePath})</code>.&#10;     *&#10;     * @return  The absolute abstract pathname denoting the same file or&#10;     *          directory as this abstract pathname&#10;     *&#10;     * @throws  SecurityException&#10;     *          If a required system property value cannot be accessed.&#10;     *&#10;     * @since 1.2&#10;     "
  ]
  node [
    id 1717
    label "getAbsolutePath"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1718
    label "public String getCanonicalPath() throws IOException"
    type "method"
    comment "&#10;     * Returns the canonical pathname string of this abstract pathname.&#10;     *&#10;     * <p> A canonical pathname is both absolute and unique.  The precise&#10;     * definition of canonical form is system-dependent.  This method first&#10;     * converts this pathname to absolute form if necessary, as if by invoking the&#10;     * {@link #getAbsolutePath} method, and then maps it to its unique form in a&#10;     * system-dependent way.  This typically involves removing redundant names&#10;     * such as <tt>&#34;.&#34;</tt> and <tt>&#34;..&#34;</tt> from the pathname, resolving&#10;     * symbolic links (on UNIX platforms), and converting drive letters to a&#10;     * standard case (on Microsoft Windows platforms).&#10;     *&#10;     * <p> Every pathname that denotes an existing file or directory has a&#10;     * unique canonical form.  Every pathname that denotes a nonexistent file&#10;     * or directory also has a unique canonical form.  The canonical form of&#10;     * the pathname of a nonexistent file or directory may be different from&#10;     * the canonical form of the same pathname after the file or directory is&#10;     * created.  Similarly, the canonical form of the pathname of an existing&#10;     * file or directory may be different from the canonical form of the same&#10;     * pathname after the file or directory is deleted.&#10;     *&#10;     * @return  The canonical pathname string denoting the same file or&#10;     *          directory as this abstract pathname&#10;     *&#10;     * @throws  IOException&#10;     *          If an I/O error occurs, which is possible because the&#10;     *          construction of the canonical pathname may require&#10;     *          filesystem queries&#10;     *&#10;     * @throws  SecurityException&#10;     *          If a required system property value cannot be accessed, or&#10;     *          if a security manager exists and its <code>{@link&#10;     *          java.lang.SecurityManager#checkRead}</code> method denies&#10;     *          read access to the file&#10;     *&#10;     * @since   JDK1.1&#10;     * @see     Path#toRealPath&#10;     "
  ]
  node [
    id 1719
    label "public File getCanonicalFile() throws IOException"
    type "method"
    comment "&#10;     * Returns the canonical form of this abstract pathname.  Equivalent to&#10;     * <code>new&#38;nbsp;File(this.{@link #getCanonicalPath})</code>.&#10;     *&#10;     * @return  The canonical pathname string denoting the same file or&#10;     *          directory as this abstract pathname&#10;     *&#10;     * @throws  IOException&#10;     *          If an I/O error occurs, which is possible because the&#10;     *          construction of the canonical pathname may require&#10;     *          filesystem queries&#10;     *&#10;     * @throws  SecurityException&#10;     *          If a required system property value cannot be accessed, or&#10;     *          if a security manager exists and its <code>{@link&#10;     *          java.lang.SecurityManager#checkRead}</code> method denies&#10;     *          read access to the file&#10;     *&#10;     * @since 1.2&#10;     * @see     Path#toRealPath&#10;     "
  ]
  node [
    id 1720
    label "getCanonicalPath"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1721
    label "public URI toURI()"
    type "method"
    comment "&#10;     * Constructs a <tt>file:</tt> URI that represents this abstract pathname.&#10;     *&#10;     * <p> The exact form of the URI is system-dependent.  If it can be&#10;     * determined that the file denoted by this abstract pathname is a&#10;     * directory, then the resulting URI will end with a slash.&#10;     *&#10;     * <p> For a given abstract pathname <i>f</i>, it is guaranteed that&#10;     *&#10;     * <blockquote><tt>&#10;     * new {@link #File(java.net.URI) File}(</tt><i>&#38;nbsp;f</i><tt>.toURI()).equals(</tt><i>&#38;nbsp;f</i><tt>.{@link #getAbsoluteFile() getAbsoluteFile}())&#10;     * </tt></blockquote>&#10;     *&#10;     * so long as the original abstract pathname, the URI, and the new abstract&#10;     * pathname are all created in (possibly different invocations of) the same&#10;     * Java virtual machine.  Due to the system-dependent nature of abstract&#10;     * pathnames, however, this relationship typically does not hold when a&#10;     * <tt>file:</tt> URI that is created in a virtual machine on one operating&#10;     * system is converted into an abstract pathname in a virtual machine on a&#10;     * different operating system.&#10;     *&#10;     * <p> Note that when this abstract pathname represents a UNC pathname then&#10;     * all components of the UNC (including the server name component) are encoded&#10;     * in the {@code URI} path. The authority component is undefined, meaning&#10;     * that it is represented as {@code null}. The {@link Path} class defines the&#10;     * {@link Path#toUri toUri} method to encode the server name in the authority&#10;     * component of the resulting {@code URI}. The {@link #toPath toPath} method&#10;     * may be used to obtain a {@code Path} representing this abstract pathname.&#10;     *&#10;     * @return  An absolute, hierarchical URI with a scheme equal to&#10;     *          <tt>&#34;file&#34;</tt>, a path representing this abstract pathname,&#10;     *          and undefined authority, query, and fragment components&#10;     * @throws SecurityException If a required system property value cannot&#10;     * be accessed.&#10;     *&#10;     * @see #File(java.net.URI)&#10;     * @see java.net.URI&#10;     * @see java.net.URI#toURL()&#10;     * @since 1.4&#10;     "
  ]
  node [
    id 1722
    label "File(java.net.URI)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1723
    label "getAbsoluteFile()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1724
    label "java.nio.file.Path"
    type "class"
    comment ""
  ]
  node [
    id 1725
    label "public static Path of(String first, String... more)"
    type "method"
    comment "&#10;     * Returns a {@code Path} by converting a path string, or a sequence of&#10;     * strings that when joined form a path string. If {@code more} does not&#10;     * specify any elements then the value of the {@code first} parameter is&#10;     * the path string to convert. If {@code more} specifies one or more&#10;     * elements then each non-empty string, including {@code first}, is&#10;     * considered to be a sequence of name elements and is joined to form a&#10;     * path string. The details as to how the Strings are joined is provider&#10;     * specific but typically they will be joined using the&#10;     * {@link FileSystem#getSeparator name-separator} as the separator.&#10;     * For example, if the name separator is &#34;{@code /}&#34; and&#10;     * {@code getPath(&#34;/foo&#34;,&#34;bar&#34;,&#34;gus&#34;)} is invoked, then the path string&#10;     * {@code &#34;/foo/bar/gus&#34;} is converted to a {@code Path}. A {@code Path}&#10;     * representing an empty path is returned if {@code first} is the empty&#10;     * string and {@code more} does not contain any non-empty strings.&#10;     *&#10;     * <p> The {@code Path} is obtained by invoking the {@link FileSystem#getPath&#10;     * getPath} method of the {@link FileSystems#getDefault default} {@link&#10;     * FileSystem}.&#10;     *&#10;     * <p> Note that while this method is very convenient, using it will imply&#10;     * an assumed reference to the default {@code FileSystem} and limit the&#10;     * utility of the calling code. Hence it should not be used in library code&#10;     * intended for flexible reuse. A more flexible alternative is to use an&#10;     * existing {@code Path} instance as an anchor, such as:&#10;     * <pre>{@code&#10;     *     Path dir = ...&#10;     *     Path path = dir.resolve(&#34;file&#34;);&#10;     * }</pre>&#10;     *&#10;     * @param   first&#10;     *          the path string or initial part of the path string&#10;     * @param   more&#10;     *          additional strings to be joined to form the path string&#10;     *&#10;     * @return  the resulting {@code Path}&#10;     *&#10;     * @throws  InvalidPathException&#10;     *          if the path string cannot be converted to a {@code Path}&#10;     *&#10;     * @see FileSystem#getPath&#10;     *&#10;     * @since 11&#10;     "
  ]
  node [
    id 1726
    label "getDefault"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1727
    label "java.nio.file.FileSystems"
    type "class"
    comment ""
  ]
  node [
    id 1728
    label "public static FileSystem getDefault()"
    type "method"
    comment "&#10;     * Returns the default {@code FileSystem}. The default file system creates&#10;     * objects that provide access to the file systems accessible to the Java&#10;     * virtual machine. The <em>working directory</em> of the file system is&#10;     * the current user directory, named by the system property {@code user.dir}.&#10;     * This allows for interoperability with the {@link java.io.File java.io.File}&#10;     * class.&#10;     *&#10;     * <p> The first invocation of any of the methods defined by this class&#10;     * locates the default {@link FileSystemProvider provider} object. Where the&#10;     * system property {@code java.nio.file.spi.DefaultFileSystemProvider} is&#10;     * not defined then the default provider is a system-default provider that&#10;     * is invoked to create the default file system.&#10;     *&#10;     * <p> If the system property {@code java.nio.file.spi.DefaultFileSystemProvider}&#10;     * is defined then it is taken to be a list of one or more fully-qualified&#10;     * names of concrete provider classes identified by the URI scheme&#10;     * {@code &#34;file&#34;}. Where the property is a list of more than one name then&#10;     * the names are separated by a comma. Each class is loaded, using the system&#10;     * class loader, and instantiated by invoking a one argument constructor&#10;     * whose formal parameter type is {@code FileSystemProvider}. The providers&#10;     * are loaded and instantiated in the order they are listed in the property.&#10;     * If this process fails or a provider's scheme is not equal to {@code &#34;file&#34;}&#10;     * then an unspecified error is thrown. URI schemes are normally compared&#10;     * without regard to case but for the default provider, the scheme is&#10;     * required to be {@code &#34;file&#34;}. The first provider class is instantiated&#10;     * by invoking it with a reference to the system-default provider.&#10;     * The second provider class is instantiated by invoking it with a reference&#10;     * to the first provider instance. The third provider class is instantiated&#10;     * by invoking it with a reference to the second instance, and so on. The&#10;     * last provider to be instantiated becomes the default provider; its {@code&#10;     * getFileSystem} method is invoked with the URI {@code &#34;file:///&#34;} to&#10;     * get a reference to the default file system.&#10;     *&#10;     * <p> Subsequent invocations of this method return the file system that was&#10;     * returned by the first invocation.&#10;     *&#10;     * @return  the default file system&#10;     "
  ]
  node [
    id 1729
    label "java.nio.file.spi.FileSystemProvider"
    type "class"
    comment ""
  ]
  node [
    id 1730
    label "private static List<FileSystemProvider> loadInstalledProviders()"
    type "method"
    comment " loads all installed providers"
  ]
  node [
    id 1731
    label "public static List<FileSystemProvider> installedProviders()"
    type "method"
    comment "&#10;     * Returns a list of the installed file system providers.&#10;     *&#10;     * <p> The first invocation of this method causes the default provider to be&#10;     * initialized (if not already initialized) and loads any other installed&#10;     * providers as described by the {@link FileSystems} class.&#10;     *&#10;     * @return  An unmodifiable list of the installed file system providers. The&#10;     *          list contains at least one element, that is the default file&#10;     *          system provider&#10;     *&#10;     * @throws  ServiceConfigurationError&#10;     *          When an error occurs while loading a service provider&#10;     "
  ]
  node [
    id 1732
    label "FileSystems"
  ]
  node [
    id 1733
    label "public abstract String getScheme()"
    type "method"
    comment "&#10;     * Returns the URI scheme that identifies this provider.&#10;     *&#10;     * @return  The URI scheme&#10;     "
  ]
  node [
    id 1734
    label "public abstract FileSystem newFileSystem(URI uri, Map<String, ?> env) throws IOException"
    type "method"
    comment "&#10;     * Constructs a new {@code FileSystem} object identified by a URI. This&#10;     * method is invoked by the {@link FileSystems#newFileSystem(URI,Map)}&#10;     * method to open a new file system identified by a URI.&#10;     *&#10;     * <p> The {@code uri} parameter is an absolute, hierarchical URI, with a&#10;     * scheme equal (without regard to case) to the scheme supported by this&#10;     * provider. The exact form of the URI is highly provider dependent. The&#10;     * {@code env} parameter is a map of provider specific properties to configure&#10;     * the file system.&#10;     *&#10;     * <p> This method throws {@link FileSystemAlreadyExistsException} if the&#10;     * file system already exists because it was previously created by an&#10;     * invocation of this method. Once a file system is {@link&#10;     * java.nio.file.FileSystem#close closed} it is provider-dependent if the&#10;     * provider allows a new file system to be created with the same URI as a&#10;     * file system it previously created.&#10;     *&#10;     * @param   uri&#10;     *          URI reference&#10;     * @param   env&#10;     *          A map of provider specific properties to configure the file system;&#10;     *          may be empty&#10;     *&#10;     * @return  A new file system&#10;     *&#10;     * @throws  IllegalArgumentException&#10;     *          If the pre-conditions for the {@code uri} parameter aren't met,&#10;     *          or the {@code env} parameter does not contain properties required&#10;     *          by the provider, or a property value is invalid&#10;     * @throws  IOException&#10;     *          An I/O error occurs creating the file system&#10;     * @throws  SecurityException&#10;     *          If a security manager is installed and it denies an unspecified&#10;     *          permission required by the file system provider implementation&#10;     * @throws  FileSystemAlreadyExistsException&#10;     *          If the file system has already been created&#10;     "
  ]
  node [
    id 1735
    label "newFileSystem(URI"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1736
    label "java.nio.file.FileSystem"
    type "class"
    comment ""
  ]
  node [
    id 1737
    label "public abstract FileSystemProvider provider()"
    type "method"
    comment "&#10;     * Returns the provider that created this file system.&#10;     *&#10;     * @return  The provider that created this file system.&#10;     "
  ]
  node [
    id 1738
    label "java.nio.file.DirectoryStream"
    type "class"
    comment ""
  ]
  node [
    id 1739
    label "java.nio.file.WatchService"
    type "class"
    comment ""
  ]
  node [
    id 1740
    label " void close() throws IOException"
    type "method"
    comment "&#10;     * Closes this watch service.&#10;     *&#10;     * <p> If a thread is currently blocked in the {@link #take take} or {@link&#10;     * #poll(long,TimeUnit) poll} methods waiting for a key to be queued then&#10;     * it immediately receives a {@link ClosedWatchServiceException}. Any&#10;     * valid keys associated with this watch service are {@link WatchKey#isValid&#10;     * invalidated}.&#10;     *&#10;     * <p> After a watch service is closed, any further attempt to invoke&#10;     * operations upon it will throw {@link ClosedWatchServiceException}.&#10;     * If this watch service is already closed then invoking this method&#10;     * has no effect.&#10;     *&#10;     * @throws  IOException&#10;     *          if an I/O error occurs&#10;     "
  ]
  node [
    id 1741
    label "poll(long"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1742
    label "java.nio.file.ClosedWatchServiceException"
    type "class"
    comment ""
  ]
  node [
    id 1743
    label "isValidinvalidated"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1744
    label "java.nio.file.WatchKey"
    type "class"
    comment ""
  ]
  node [
    id 1745
    label " boolean isValid()"
    type "method"
    comment "&#10;     * Tells whether or not this watch key is valid.&#10;     *&#10;     * <p> A watch key is valid upon creation and remains until it is cancelled,&#10;     * or its watch service is closed.&#10;     *&#10;     * @return  {@code true} if, and only if, this watch key is valid&#10;     "
  ]
  node [
    id 1746
    label " List<WatchEvent<?>> pollEvents()"
    type "method"
    comment "&#10;     * Retrieves and removes all pending events for this watch key, returning&#10;     * a {@code List} of the events that were retrieved.&#10;     *&#10;     * <p> Note that this method does not wait if there are no events pending.&#10;     *&#10;     * @return  the list of the events retrieved; may be empty&#10;     "
  ]
  node [
    id 1747
    label " boolean reset()"
    type "method"
    comment "&#10;     * Resets this watch key.&#10;     *&#10;     * <p> If this watch key has been cancelled or this watch key is already in&#10;     * the ready state then invoking this method has no effect. Otherwise&#10;     * if there are pending events for the object then this watch key is&#10;     * immediately re-queued to the watch service. If there are no pending&#10;     * events then the watch key is put into the ready state and will remain in&#10;     * that state until an event is detected or the watch key is cancelled.&#10;     *&#10;     * @return  {@code true} if the watch key is valid and has been reset, and&#10;     *          {@code false} if the watch key could not be reset because it is&#10;     *          no longer {@link #isValid valid}&#10;     "
  ]
  node [
    id 1748
    label "isValid"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1749
    label " void cancel()"
    type "method"
    comment "&#10;     * Cancels the registration with the watch service. Upon return the watch key&#10;     * will be invalid. If the watch key is enqueued, waiting to be retrieved&#10;     * from the watch service, then it will remain in the queue until it is&#10;     * removed. Pending events, if any, remain pending and may be retrieved by&#10;     * invoking the {@link #pollEvents pollEvents} method after the key is&#10;     * cancelled.&#10;     *&#10;     * <p> If this watch key has already been cancelled then invoking this&#10;     * method has no effect.  Once cancelled, a watch key remains forever invalid.&#10;     "
  ]
  node [
    id 1750
    label "pollEvents"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1751
    label " Watchable watchable()"
    type "method"
    comment "&#10;     * Returns the object for which this watch key was created. This method will&#10;     * continue to return the object even after the key is cancelled.&#10;     *&#10;     * <p> As the {@code WatchService} is intended to map directly on to the&#10;     * native file event notification facility (where available) then many of&#10;     * details on how registered objects are watched is highly implementation&#10;     * specific. When watching a directory for changes for example, and the&#10;     * directory is moved or renamed in the file system, there is no guarantee&#10;     * that the watch key will be cancelled and so the object returned by this&#10;     * method may no longer be a valid path to the directory.&#10;     *&#10;     * @return the object for which this watch key was created&#10;     "
  ]
  node [
    id 1752
    label "take"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1753
    label " WatchKey poll()"
    type "method"
    comment "&#10;     * Retrieves and removes the next watch key, or {@code null} if none are&#10;     * present.&#10;     *&#10;     * @return  the next watch key, or {@code null}&#10;     *&#10;     * @throws  ClosedWatchServiceException&#10;     *          if this watch service is closed&#10;     "
  ]
  node [
    id 1754
    label " WatchKey poll(long timeout, TimeUnit unit) throws InterruptedException"
    type "method"
    comment "&#10;     * Retrieves and removes the next watch key, waiting if necessary up to the&#10;     * specified wait time if none are yet present.&#10;     *&#10;     * @param   timeout&#10;     *          how to wait before giving up, in units of unit&#10;     * @param   unit&#10;     *          a {@code TimeUnit} determining how to interpret the timeout&#10;     *          parameter&#10;     *&#10;     * @return  the next watch key, or {@code null}&#10;     *&#10;     * @throws  ClosedWatchServiceException&#10;     *          if this watch service is closed, or it is closed while waiting&#10;     *          for the next key&#10;     * @throws  InterruptedException&#10;     *          if interrupted while waiting&#10;     "
  ]
  node [
    id 1755
    label " WatchKey take() throws InterruptedException"
    type "method"
    comment "&#10;     * Retrieves and removes next watch key, waiting if none are yet present.&#10;     *&#10;     * @return  the next watch key&#10;     *&#10;     * @throws  ClosedWatchServiceException&#10;     *          if this watch service is closed, or it is closed while waiting&#10;     *          for the next key&#10;     * @throws  InterruptedException&#10;     *          if interrupted while waiting&#10;     "
  ]
  node [
    id 1756
    label "java.nio.file.ClosedFileSystemException"
    type "class"
    comment ""
  ]
  node [
    id 1757
    label "public abstract String getSeparator()"
    type "method"
    comment "&#10;     * Returns the name separator, represented as a string.&#10;     *&#10;     * <p> The name separator is used to separate names in a path string. An&#10;     * implementation may support multiple name separators in which case this&#10;     * method returns an implementation specific <em>default</em> name separator.&#10;     * This separator is used when creating path strings by invoking the {@link&#10;     * Path#toString() toString()} method.&#10;     *&#10;     * <p> In the case of the default provider, this method returns the same&#10;     * separator as {@link java.io.File#separator}.&#10;     *&#10;     * @return  The name separator&#10;     "
  ]
  node [
    id 1758
    label "public abstract Iterable<Path> getRootDirectories()"
    type "method"
    comment "&#10;     * Returns an object to iterate over the paths of the root directories.&#10;     *&#10;     * <p> A file system provides access to a file store that may be composed&#10;     * of a number of distinct file hierarchies, each with its own top-level&#10;     * root directory. Unless denied by the security manager, each element in&#10;     * the returned iterator corresponds to the root directory of a distinct&#10;     * file hierarchy. The order of the elements is not defined. The file&#10;     * hierarchies may change during the lifetime of the Java virtual machine.&#10;     * For example, in some implementations, the insertion of removable media&#10;     * may result in the creation of a new file hierarchy with its own&#10;     * top-level directory.&#10;     *&#10;     * <p> When a security manager is installed, it is invoked to check access&#10;     * to the each root directory. If denied, the root directory is not returned&#10;     * by the iterator. In the case of the default provider, the {@link&#10;     * SecurityManager#checkRead(String)} method is invoked to check read access&#10;     * to each root directory. It is system dependent if the permission checks&#10;     * are done when the iterator is obtained or during iteration.&#10;     *&#10;     * @return  An object to iterate over the root directories&#10;     "
  ]
  node [
    id 1759
    label "checkRead(String)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1760
    label "public abstract Iterable<FileStore> getFileStores()"
    type "method"
    comment "&#10;     * Returns an object to iterate over the underlying file stores.&#10;     *&#10;     * <p> The elements of the returned iterator are the {@link&#10;     * FileStore FileStores} for this file system. The order of the elements is&#10;     * not defined and the file stores may change during the lifetime of the&#10;     * Java virtual machine. When an I/O error occurs, perhaps because a file&#10;     * store is not accessible, then it is not returned by the iterator.&#10;     *&#10;     * <p> In the case of the default provider, and a security manager is&#10;     * installed, the security manager is invoked to check {@link&#10;     * RuntimePermission}{@code (&#34;getFileStoreAttributes&#34;)}. If denied, then&#10;     * no file stores are returned by the iterator. In addition, the security&#10;     * manager's {@link SecurityManager#checkRead(String)} method is invoked to&#10;     * check read access to the file store's <em>top-most</em> directory. If&#10;     * denied, the file store is not returned by the iterator. It is system&#10;     * dependent if the permission checks are done when the iterator is obtained&#10;     * or during iteration.&#10;     *&#10;     * <p> <b>Usage Example:</b>&#10;     * Suppose we want to print the space usage for all file stores:&#10;     * <pre>&#10;     *     for (FileStore store: FileSystems.getDefault().getFileStores()) {&#10;     *         long total = store.getTotalSpace() / 1024;&#10;     *         long used = (store.getTotalSpace() - store.getUnallocatedSpace()) / 1024;&#10;     *         long avail = store.getUsableSpace() / 1024;&#10;     *         System.out.format(&#34;%-20s %12d %12d %12d%n&#34;, store, total, used, avail);&#10;     *     }&#10;     * </pre>&#10;     *&#10;     * @return  An object to iterate over the backing file stores&#10;     "
  ]
  node [
    id 1761
    label "java.nio.file.FileStore"
    type "class"
    comment ""
  ]
  node [
    id 1762
    label "public abstract String name()"
    type "method"
    comment "&#10;     * Returns the name of this file store. The format of the name is highly&#10;     * implementation specific. It will typically be the name of the storage&#10;     * pool or volume.&#10;     *&#10;     * <p> The string returned by this method may differ from the string&#10;     * returned by the {@link Object#toString() toString} method.&#10;     *&#10;     * @return  the name of this file store&#10;     "
  ]
  node [
    id 1763
    label "public abstract String type()"
    type "method"
    comment "&#10;     * Returns the <em>type</em> of this file store. The format of the string&#10;     * returned by this method is highly implementation specific. It may&#10;     * indicate, for example, the format used or if the file store is local&#10;     * or remote.&#10;     *&#10;     * @return  a string representing the type of this file store&#10;     "
  ]
  node [
    id 1764
    label "public abstract long getTotalSpace() throws IOException"
    type "method"
    comment "&#10;     * Returns the size, in bytes, of the file store.&#10;     *&#10;     * @return  the size of the file store, in bytes&#10;     *&#10;     * @throws  IOException&#10;     *          if an I/O error occurs&#10;     "
  ]
  node [
    id 1765
    label "public abstract long getUsableSpace() throws IOException"
    type "method"
    comment "&#10;     * Returns the number of bytes available to this Java virtual machine on the&#10;     * file store.&#10;     *&#10;     * <p> The returned number of available bytes is a hint, but not a&#10;     * guarantee, that it is possible to use most or any of these bytes.  The&#10;     * number of usable bytes is most likely to be accurate immediately&#10;     * after the space attributes are obtained. It is likely to be made inaccurate&#10;     * by any external I/O operations including those made on the system outside&#10;     * of this Java virtual machine.&#10;     *&#10;     * @return  the number of bytes available&#10;     *&#10;     * @throws  IOException&#10;     *          if an I/O error occurs&#10;     "
  ]
  node [
    id 1766
    label "public long getBlockSize() throws IOException"
    type "method"
    comment "&#10;     * Returns the number of bytes per block in this file store.&#10;     *&#10;     * <p> File storage is typically organized into discrete sequences of bytes&#10;     * called <i>blocks</i>. A block is the smallest storage unit of a file store.&#10;     * Every read and write operation is performed on a multiple of blocks.&#10;     *&#10;     * @implSpec The implementation in this class throws an&#10;     *         {@code UnsupportedOperationException}.&#10;     *&#10;     * @return  a positive value representing the block size of this file store,&#10;     *          in bytes&#10;     *&#10;     * @throws  IOException&#10;     *          if an I/O error occurs&#10;     *&#10;     * @throws  UnsupportedOperationException&#10;     *          if the operation is not supported&#10;     *&#10;     * @since 10&#10;     "
  ]
  node [
    id 1767
    label "public abstract long getUnallocatedSpace() throws IOException"
    type "method"
    comment "&#10;     * Returns the number of unallocated bytes in the file store.&#10;     *&#10;     * <p> The returned number of unallocated bytes is a hint, but not a&#10;     * guarantee, that it is possible to use most or any of these bytes.  The&#10;     * number of unallocated bytes is most likely to be accurate immediately&#10;     * after the space attributes are obtained. It is likely to be&#10;     * made inaccurate by any external I/O operations including those made on&#10;     * the system outside of this virtual machine.&#10;     *&#10;     * @return  the number of unallocated bytes&#10;     *&#10;     * @throws  IOException&#10;     *          if an I/O error occurs&#10;     "
  ]
  node [
    id 1768
    label "public abstract boolean supportsFileAttributeView(Class<? extends FileAttributeView> type)"
    type "method"
    comment "&#10;     * Tells whether or not this file store supports the file attributes&#10;     * identified by the given file attribute view.&#10;     *&#10;     * <p> Invoking this method to test if the file store supports {@link&#10;     * BasicFileAttributeView} will always return {@code true}. In the case of&#10;     * the default provider, this method cannot guarantee to give the correct&#10;     * result when the file store is not a local storage device. The reasons for&#10;     * this are implementation specific and therefore unspecified.&#10;     *&#10;     * @param   type&#10;     *          the file attribute view type&#10;     *&#10;     * @return  {@code true} if, and only if, the file attribute view is&#10;     *          supported&#10;     "
  ]
  node [
    id 1769
    label "java.nio.file.BasicFileAttributeView"
  ]
  node [
    id 1770
    label "public abstract boolean supportsFileAttributeView(String name)"
    type "method"
    comment "&#10;     * Tells whether or not this file store supports the file attributes&#10;     * identified by the given file attribute view.&#10;     *&#10;     * <p> Invoking this method to test if the file store supports {@link&#10;     * BasicFileAttributeView}, identified by the name &#34;{@code basic}&#34; will&#10;     * always return {@code true}. In the case of the default provider, this&#10;     * method cannot guarantee to give the correct result when the file store is&#10;     * not a local storage device. The reasons for this are implementation&#10;     * specific and therefore unspecified.&#10;     *&#10;     * @param   name&#10;     *          the {@link FileAttributeView#name name} of file attribute view&#10;     *&#10;     * @return  {@code true} if, and only if, the file attribute view is&#10;     *          supported&#10;     "
  ]
  node [
    id 1771
    label "name"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1772
    label "public abstract V getFileStoreAttributeView(Class<V> type)"
    type "method"
    comment "&#10;     * Returns a {@code FileStoreAttributeView} of the given type.&#10;     *&#10;     * <p> This method is intended to be used where the file store attribute&#10;     * view defines type-safe methods to read or update the file store attributes.&#10;     * The {@code type} parameter is the type of the attribute view required and&#10;     * the method returns an instance of that type if supported.&#10;     *&#10;     * @param   <V>&#10;     *          The {@code FileStoreAttributeView} type&#10;     * @param   type&#10;     *          the {@code Class} object corresponding to the attribute view&#10;     *&#10;     * @return  a file store attribute view of the specified type or&#10;     *          {@code null} if the attribute view is not available&#10;     "
  ]
  node [
    id 1773
    label "public abstract Object getAttribute(String attribute) throws IOException"
    type "method"
    comment "&#10;     * Reads the value of a file store attribute.&#10;     *&#10;     * <p> The {@code attribute} parameter identifies the attribute to be read&#10;     * and takes the form:&#10;     * <blockquote>&#10;     * <i>view-name</i><b>:</b><i>attribute-name</i>&#10;     * </blockquote>&#10;     * where the character {@code ':'} stands for itself.&#10;     *&#10;     * <p> <i>view-name</i> is the {@link FileStoreAttributeView#name name} of&#10;     * a {@link FileStore AttributeView} that identifies a set of file attributes.&#10;     * <i>attribute-name</i> is the name of the attribute.&#10;     *&#10;     * <p> <b>Usage Example:</b>&#10;     * Suppose we want to know if ZFS compression is enabled (assuming the &#34;zfs&#34;&#10;     * view is supported):&#10;     * <pre>&#10;     *    boolean compression = (Boolean)fs.getAttribute(&#34;zfs:compression&#34;);&#10;     * </pre>&#10;     *&#10;     * @param   attribute&#10;     *          the attribute to read&#10;&#10;     * @return  the attribute value; {@code null} may be valid for some&#10;     *          attributes&#10;     *&#10;     * @throws  UnsupportedOperationException&#10;     *          if the attribute view is not available or it does not support&#10;     *          reading the attribute&#10;     * @throws  IOException&#10;     *          if an I/O error occurs&#10;     "
  ]
  node [
    id 1774
    label "public abstract Set<String> supportedFileAttributeViews()"
    type "method"
    comment "&#10;     * Returns the set of the {@link FileAttributeView#name names} of the file&#10;     * attribute views supported by this {@code FileSystem}.&#10;     *&#10;     * <p> The {@link BasicFileAttributeView} is required to be supported and&#10;     * therefore the set contains at least one element, &#34;basic&#34;.&#10;     *&#10;     * <p> The {@link FileStore#supportsFileAttributeView(String)&#10;     * supportsFileAttributeView(String)} method may be used to test if an&#10;     * underlying {@link FileStore} supports the file attributes identified by a&#10;     * file attribute view.&#10;     *&#10;     * @return  An unmodifiable set of the names of the supported file attribute&#10;     *          views&#10;     "
  ]
  node [
    id 1775
    label "public abstract Path getPath(String first, String... more)"
    type "method"
    comment "&#10;     * Converts a path string, or a sequence of strings that when joined form&#10;     * a path string, to a {@code Path}. If {@code more} does not specify any&#10;     * elements then the value of the {@code first} parameter is the path string&#10;     * to convert. If {@code more} specifies one or more elements then each&#10;     * non-empty string, including {@code first}, is considered to be a sequence&#10;     * of name elements (see {@link Path}) and is joined to form a path string.&#10;     * The details as to how the Strings are joined is provider specific but&#10;     * typically they will be joined using the {@link #getSeparator&#10;     * name-separator} as the separator. For example, if the name separator is&#10;     * &#34;{@code /}&#34; and {@code getPath(&#34;/foo&#34;,&#34;bar&#34;,&#34;gus&#34;)} is invoked, then the&#10;     * path string {@code &#34;/foo/bar/gus&#34;} is converted to a {@code Path}.&#10;     * A {@code Path} representing an empty path is returned if {@code first}&#10;     * is the empty string and {@code more} does not contain any non-empty&#10;     * strings.&#10;     *&#10;     * <p> The parsing and conversion to a path object is inherently&#10;     * implementation dependent. In the simplest case, the path string is rejected,&#10;     * and {@link InvalidPathException} thrown, if the path string contains&#10;     * characters that cannot be converted to characters that are <em>legal</em>&#10;     * to the file store. For example, on UNIX systems, the NUL (&#38;#92;u0000)&#10;     * character is not allowed to be present in a path. An implementation may&#10;     * choose to reject path strings that contain names that are longer than those&#10;     * allowed by any file store, and where an implementation supports a complex&#10;     * path syntax, it may choose to reject path strings that are <em>badly&#10;     * formed</em>.&#10;     *&#10;     * <p> In the case of the default provider, path strings are parsed based&#10;     * on the definition of paths at the platform or virtual file system level.&#10;     * For example, an operating system may not allow specific characters to be&#10;     * present in a file name, but a specific underlying file store may impose&#10;     * different or additional restrictions on the set of legal&#10;     * characters.&#10;     *&#10;     * <p> This method throws {@link InvalidPathException} when the path string&#10;     * cannot be converted to a path. Where possible, and where applicable,&#10;     * the exception is created with an {@link InvalidPathException#getIndex&#10;     * index} value indicating the first position in the {@code path} parameter&#10;     * that caused the path string to be rejected.&#10;     *&#10;     * @param   first&#10;     *          the path string or initial part of the path string&#10;     * @param   more&#10;     *          additional strings to be joined to form the path string&#10;     *&#10;     * @return  the resulting {@code Path}&#10;     *&#10;     * @throws  InvalidPathException&#10;     *          If the path string cannot be converted&#10;     "
  ]
  node [
    id 1776
    label "getSeparatorname"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1777
    label "java.nio.file.InvalidPathException"
    type "class"
    comment ""
  ]
  node [
    id 1778
    label "public String getInput()"
    type "method"
    comment "&#10;     * Returns the input string.&#10;     *&#10;     * @return  The input string&#10;     "
  ]
  node [
    id 1779
    label "public String getReason()"
    type "method"
    comment "&#10;     * Returns a string explaining why the input string could not be parsed.&#10;     *&#10;     * @return  The reason string&#10;     "
  ]
  node [
    id 1780
    label "public int getIndex()"
    type "method"
    comment "&#10;     * Returns an index into the input string of the position at which the&#10;     * parse error occurred, or {@code -1} if this position is not known.&#10;     *&#10;     * @return  The error index&#10;     "
  ]
  node [
    id 1781
    label "public abstract PathMatcher getPathMatcher(String syntaxAndPattern)"
    type "method"
    comment "&#10;     * Returns a {@code PathMatcher} that performs match operations on the&#10;     * {@code String} representation of {@link Path} objects by interpreting a&#10;     * given pattern.&#10;     *&#10;     * The {@code syntaxAndPattern} parameter identifies the syntax and the&#10;     * pattern and takes the form:&#10;     * <blockquote><pre>&#10;     * <i>syntax</i><b>:</b><i>pattern</i>&#10;     * </pre></blockquote>&#10;     * where {@code ':'} stands for itself.&#10;     *&#10;     * <p> A {@code FileSystem} implementation supports the &#34;{@code glob}&#34; and&#10;     * &#34;{@code regex}&#34; syntaxes, and may support others. The value of the syntax&#10;     * component is compared without regard to case.&#10;     *&#10;     * <p> When the syntax is &#34;{@code glob}&#34; then the {@code String}&#10;     * representation of the path is matched using a limited pattern language&#10;     * that resembles regular expressions but with a simpler syntax. For example:&#10;     *&#10;     * <table class=&#34;striped&#34; style=&#34;text-align:left; margin-left:2em&#34;>&#10;     * <caption style=&#34;display:none&#34;>Pattern Language</caption>&#10;     * <thead>&#10;     * <tr>&#10;     *   <th scope=&#34;col&#34;>Example&#10;     *   <th scope=&#34;col&#34;>Description&#10;     * </tr>&#10;     * </thead>&#10;     * <tbody>&#10;     * <tr>&#10;     *   <th scope=&#34;row&#34;>{@code *.java}</th>&#10;     *   <td>Matches a path that represents a file name ending in {@code .java}</td>&#10;     * </tr>&#10;     * <tr>&#10;     *   <th scope=&#34;row&#34;>{@code *.*}</th>&#10;     *   <td>Matches file names containing a dot</td>&#10;     * </tr>&#10;     * <tr>&#10;     *   <th scope=&#34;row&#34;>{@code *.{java,class}}</th>&#10;     *   <td>Matches file names ending with {@code .java} or {@code .class}</td>&#10;     * </tr>&#10;     * <tr>&#10;     *   <th scope=&#34;row&#34;>{@code foo.?}</th>&#10;     *   <td>Matches file names starting with {@code foo.} and a single&#10;     *   character extension</td>&#10;     * </tr>&#10;     * <tr>&#10;     *   <th scope=&#34;row&#34;><code>&#38;#47;home&#38;#47;*&#38;#47;*</code>&#10;     *   <td>Matches <code>&#38;#47;home&#38;#47;gus&#38;#47;data</code></td>&#10;     * </tr>&#10;     * <tr>&#10;     *   <th scope=&#34;row&#34;><code>&#38;#47;home&#38;#47;**</code>&#10;     *   <td>Matches <code>&#38;#47;home&#38;#47;gus</code> and&#10;     *   <code>&#38;#47;home&#38;#47;gus&#38;#47;data</code></td>&#10;     * </tr>&#10;     * </tbody>&#10;     * </table>&#10;     *&#10;     * <p> The following rules are used to interpret glob patterns:&#10;     *&#10;     * <ul>&#10;     *   <li><p> The {@code *} character matches zero or more {@link Character&#10;     *   characters} of a {@link Path#getName(int) name} component without&#10;     *   crossing directory boundaries. </p></li>&#10;     *&#10;     *   <li><p> The {@code **} characters matches zero or more {@link Character&#10;     *   characters} crossing directory boundaries. </p></li>&#10;     *&#10;     *   <li><p> The {@code ?} character matches exactly one character of a&#10;     *   name component.</p></li>&#10;     *&#10;     *   <li><p> The backslash character ({@code \}) is used to escape characters&#10;     *   that would otherwise be interpreted as special characters. The expression&#10;     *   {@code \\} matches a single backslash and &#34;\{&#34; matches a left brace&#10;     *   for example.  </p></li>&#10;     *&#10;     *   <li><p> The {@code [ ]} characters are a <i>bracket expression</i> that&#10;     *   match a single character of a name component out of a set of characters.&#10;     *   For example, {@code [abc]} matches {@code &#34;a&#34;}, {@code &#34;b&#34;}, or {@code &#34;c&#34;}.&#10;     *   The hyphen ({@code -}) may be used to specify a range so {@code [a-z]}&#10;     *   specifies a range that matches from {@code &#34;a&#34;} to {@code &#34;z&#34;} (inclusive).&#10;     *   These forms can be mixed so [abce-g] matches {@code &#34;a&#34;}, {@code &#34;b&#34;},&#10;     *   {@code &#34;c&#34;}, {@code &#34;e&#34;}, {@code &#34;f&#34;} or {@code &#34;g&#34;}. If the character&#10;     *   after the {@code [} is a {@code !} then it is used for negation so {@code&#10;     *   [!a-c]} matches any character except {@code &#34;a&#34;}, {@code &#34;b&#34;}, or {@code&#10;     *   &#34;c&#34;}.&#10;     *   <p> Within a bracket expression the {@code *}, {@code ?} and {@code \}&#10;     *   characters match themselves. The ({@code -}) character matches itself if&#10;     *   it is the first character within the brackets, or the first character&#10;     *   after the {@code !} if negating.</p></li>&#10;     *&#10;     *   <li><p> The {@code { }} characters are a group of subpatterns, where&#10;     *   the group matches if any subpattern in the group matches. The {@code &#34;,&#34;}&#10;     *   character is used to separate the subpatterns. Groups cannot be nested.&#10;     *   </p></li>&#10;     *&#10;     *   <li><p> Leading period<code>&#38;#47;</code>dot characters in file name are&#10;     *   treated as regular characters in match operations. For example,&#10;     *   the {@code &#34;*&#34;} glob pattern matches file name {@code &#34;.login&#34;}.&#10;     *   The {@link Files#isHidden} method may be used to test whether a file&#10;     *   is considered hidden.&#10;     *   </p></li>&#10;     *&#10;     *   <li><p> All other characters match themselves in an implementation&#10;     *   dependent manner. This includes characters representing any {@link&#10;     *   FileSystem#getSeparator name-separators}. </p></li>&#10;     *&#10;     *   <li><p> The matching of {@link Path#getRoot root} components is highly&#10;     *   implementation-dependent and is not specified. </p></li>&#10;     *&#10;     * </ul>&#10;     *&#10;     * <p> When the syntax is &#34;{@code regex}&#34; then the pattern component is a&#10;     * regular expression as defined by the {@link java.util.regex.Pattern}&#10;     * class.&#10;     *&#10;     * <p>  For both the glob and regex syntaxes, the matching details, such as&#10;     * whether the matching is case sensitive, are implementation-dependent&#10;     * and therefore not specified.&#10;     *&#10;     * @param   syntaxAndPattern&#10;     *          The syntax and pattern&#10;     *&#10;     * @return  A path matcher that may be used to match paths against the pattern&#10;     *&#10;     * @throws  IllegalArgumentException&#10;     *          If the parameter does not take the form: {@code syntax:pattern}&#10;     * @throws  java.util.regex.PatternSyntaxException&#10;     *          If the pattern is invalid&#10;     * @throws  UnsupportedOperationException&#10;     *          If the pattern syntax is not known to the implementation&#10;     *&#10;     * @see Files#newDirectoryStream(Path,String)&#10;     "
  ]
  node [
    id 1782
    label "isHidden"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1783
    label "java.nio.file.Files"
    type "class"
    comment ""
  ]
  node [
    id 1784
    label "private static FileSystemProvider provider(Path path)"
    type "method"
    comment "&#10;     * Returns the {@code FileSystemProvider} to delegate to.&#10;     "
  ]
  node [
    id 1785
    label "private static Runnable asUncheckedRunnable(Closeable c)"
    type "method"
    comment "&#10;     * Convert a Closeable to a Runnable by converting checked IOException&#10;     * to UncheckedIOException&#10;     "
  ]
  node [
    id 1786
    label "public static InputStream newInputStream(Path path, OpenOption... options) throws IOException"
    type "method"
    comment "&#10;     * Opens a file, returning an input stream to read from the file. The stream&#10;     * will not be buffered, and is not required to support the {@link&#10;     * InputStream#mark mark} or {@link InputStream#reset reset} methods. The&#10;     * stream will be safe for access by multiple concurrent threads. Reading&#10;     * commences at the beginning of the file. Whether the returned stream is&#10;     * <i>asynchronously closeable</i> and/or <i>interruptible</i> is highly&#10;     * file system provider specific and therefore not specified.&#10;     *&#10;     * <p> The {@code options} parameter determines how the file is opened.&#10;     * If no options are present then it is equivalent to opening the file with&#10;     * the {@link StandardOpenOption#READ READ} option. In addition to the {@code&#10;     * READ} option, an implementation may also support additional implementation&#10;     * specific options.&#10;     *&#10;     * @param   path&#10;     *          the path to the file to open&#10;     * @param   options&#10;     *          options specifying how the file is opened&#10;     *&#10;     * @return  a new input stream&#10;     *&#10;     * @throws  IllegalArgumentException&#10;     *          if an invalid combination of options is specified&#10;     * @throws  UnsupportedOperationException&#10;     *          if an unsupported option is specified&#10;     * @throws  IOException&#10;     *          if an I/O error occurs&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager is&#10;     *          installed, the {@link SecurityManager#checkRead(String) checkRead}&#10;     *          method is invoked to check read access to the file.&#10;     "
  ]
  node [
    id 1787
    label "READ"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1788
    label "public static OutputStream newOutputStream(Path path, OpenOption... options) throws IOException"
    type "method"
    comment "&#10;     * Opens or creates a file, returning an output stream that may be used to&#10;     * write bytes to the file. The resulting stream will not be buffered. The&#10;     * stream will be safe for access by multiple concurrent threads. Whether&#10;     * the returned stream is <i>asynchronously closeable</i> and/or&#10;     * <i>interruptible</i> is highly file system provider specific and&#10;     * therefore not specified.&#10;     *&#10;     * <p> This method opens or creates a file in exactly the manner specified&#10;     * by the {@link #newByteChannel(Path,Set,FileAttribute[]) newByteChannel}&#10;     * method with the exception that the {@link StandardOpenOption#READ READ}&#10;     * option may not be present in the array of options. If no options are&#10;     * present then this method works as if the {@link StandardOpenOption#CREATE&#10;     * CREATE}, {@link StandardOpenOption#TRUNCATE_EXISTING TRUNCATE_EXISTING},&#10;     * and {@link StandardOpenOption#WRITE WRITE} options are present. In other&#10;     * words, it opens the file for writing, creating the file if it doesn't&#10;     * exist, or initially truncating an existing {@link #isRegularFile&#10;     * regular-file} to a size of {@code 0} if it exists.&#10;     *&#10;     * <p> <b>Usage Examples:</b>&#10;     * <pre>&#10;     *     Path path = ...&#10;     *&#10;     *     // truncate and overwrite an existing file, or create the file if&#10;     *     // it doesn't initially exist&#10;     *     OutputStream out = Files.newOutputStream(path);&#10;     *&#10;     *     // append to an existing file, fail if the file does not exist&#10;     *     out = Files.newOutputStream(path, APPEND);&#10;     *&#10;     *     // append to an existing file, create file if it doesn't initially exist&#10;     *     out = Files.newOutputStream(path, CREATE, APPEND);&#10;     *&#10;     *     // always create new file, failing if it already exists&#10;     *     out = Files.newOutputStream(path, CREATE_NEW);&#10;     * </pre>&#10;     *&#10;     * @param   path&#10;     *          the path to the file to open or create&#10;     * @param   options&#10;     *          options specifying how the file is opened&#10;     *&#10;     * @return  a new output stream&#10;     *&#10;     * @throws  IllegalArgumentException&#10;     *          if {@code options} contains an invalid combination of options&#10;     * @throws  UnsupportedOperationException&#10;     *          if an unsupported option is specified&#10;     * @throws  IOException&#10;     *          if an I/O error occurs&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager is&#10;     *          installed, the {@link SecurityManager#checkWrite(String) checkWrite}&#10;     *          method is invoked to check write access to the file. The {@link&#10;     *          SecurityManager#checkDelete(String) checkDelete} method is&#10;     *          invoked to check delete access if the file is opened with the&#10;     *          {@code DELETE_ON_CLOSE} option.&#10;     "
  ]
  node [
    id 1789
    label "newByteChannel(Path"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1790
    label "WRITE"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1791
    label "CREATECREATE"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1792
    label "checkDelete(String)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1793
    label "TRUNCATE_EXISTING"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1794
    label "isRegularFileregular"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1795
    label "checkWrite(String)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1796
    label "public static SeekableByteChannel newByteChannel(Path path, Set<? extends OpenOption> options, FileAttribute<?>... attrs) throws IOException"
    type "method"
    comment "&#10;     * Opens or creates a file, returning a seekable byte channel to access the&#10;     * file.&#10;     *&#10;     * <p> The {@code options} parameter determines how the file is opened.&#10;     * The {@link StandardOpenOption#READ READ} and {@link&#10;     * StandardOpenOption#WRITE WRITE} options determine if the file should be&#10;     * opened for reading and/or writing. If neither option (or the {@link&#10;     * StandardOpenOption#APPEND APPEND} option) is present then the file is&#10;     * opened for reading. By default reading or writing commence at the&#10;     * beginning of the file.&#10;     *&#10;     * <p> In the addition to {@code READ} and {@code WRITE}, the following&#10;     * options may be present:&#10;     *&#10;     * <table border=1 cellpadding=5 summary=&#34;Options&#34;>&#10;     * <tr> <th>Option</th> <th>Description</th> </tr>&#10;     * <tr>&#10;     *   <td> {@link StandardOpenOption#APPEND APPEND} </td>&#10;     *   <td> If this option is present then the file is opened for writing and&#10;     *     each invocation of the channel's {@code write} method first advances&#10;     *     the position to the end of the file and then writes the requested&#10;     *     data. Whether the advancement of the position and the writing of the&#10;     *     data are done in a single atomic operation is system-dependent and&#10;     *     therefore unspecified. This option may not be used in conjunction&#10;     *     with the {@code READ} or {@code TRUNCATE_EXISTING} options. </td>&#10;     * </tr>&#10;     * <tr>&#10;     *   <td> {@link StandardOpenOption#TRUNCATE_EXISTING TRUNCATE_EXISTING} </td>&#10;     *   <td> If this option is present then the existing file is truncated to&#10;     *   a size of 0 bytes. This option is ignored when the file is opened only&#10;     *   for reading. </td>&#10;     * </tr>&#10;     * <tr>&#10;     *   <td> {@link StandardOpenOption#CREATE_NEW CREATE_NEW} </td>&#10;     *   <td> If this option is present then a new file is created, failing if&#10;     *   the file already exists or is a symbolic link. When creating a file the&#10;     *   check for the existence of the file and the creation of the file if it&#10;     *   does not exist is atomic with respect to other file system operations.&#10;     *   This option is ignored when the file is opened only for reading. </td>&#10;     * </tr>&#10;     * <tr>&#10;     *   <td > {@link StandardOpenOption#CREATE CREATE} </td>&#10;     *   <td> If this option is present then an existing file is opened if it&#10;     *   exists, otherwise a new file is created. This option is ignored if the&#10;     *   {@code CREATE_NEW} option is also present or the file is opened only&#10;     *   for reading. </td>&#10;     * </tr>&#10;     * <tr>&#10;     *   <td > {@link StandardOpenOption#DELETE_ON_CLOSE DELETE_ON_CLOSE} </td>&#10;     *   <td> When this option is present then the implementation makes a&#10;     *   <em>best effort</em> attempt to delete the file when closed by the&#10;     *   {@link SeekableByteChannel#close close} method. If the {@code close}&#10;     *   method is not invoked then a <em>best effort</em> attempt is made to&#10;     *   delete the file when the Java virtual machine terminates. </td>&#10;     * </tr>&#10;     * <tr>&#10;     *   <td>{@link StandardOpenOption#SPARSE SPARSE} </td>&#10;     *   <td> When creating a new file this option is a <em>hint</em> that the&#10;     *   new file will be sparse. This option is ignored when not creating&#10;     *   a new file. </td>&#10;     * </tr>&#10;     * <tr>&#10;     *   <td> {@link StandardOpenOption#SYNC SYNC} </td>&#10;     *   <td> Requires that every update to the file's content or metadata be&#10;     *   written synchronously to the underlying storage device. (see <a&#10;     *   href=&#34;package-summary.html#integrity&#34;> Synchronized I/O file&#10;     *   integrity</a>). </td>&#10;     * </tr>&#10;     * <tr>&#10;     *   <td> {@link StandardOpenOption#DSYNC DSYNC} </td>&#10;     *   <td> Requires that every update to the file's content be written&#10;     *   synchronously to the underlying storage device. (see <a&#10;     *   href=&#34;package-summary.html#integrity&#34;> Synchronized I/O file&#10;     *   integrity</a>). </td>&#10;     * </tr>&#10;     * </table>&#10;     *&#10;     * <p> An implementation may also support additional implementation specific&#10;     * options.&#10;     *&#10;     * <p> The {@code attrs} parameter is optional {@link FileAttribute&#10;     * file-attributes} to set atomically when a new file is created.&#10;     *&#10;     * <p> In the case of the default provider, the returned seekable byte channel&#10;     * is a {@link java.nio.channels.FileChannel}.&#10;     *&#10;     * <p> <b>Usage Examples:</b>&#10;     * <pre>&#10;     *     Path path = ...&#10;     *&#10;     *     // open file for reading&#10;     *     ReadableByteChannel rbc = Files.newByteChannel(path, EnumSet.of(READ)));&#10;     *&#10;     *     // open file for writing to the end of an existing file, creating&#10;     *     // the file if it doesn't already exist&#10;     *     WritableByteChannel wbc = Files.newByteChannel(path, EnumSet.of(CREATE,APPEND));&#10;     *&#10;     *     // create file with initial permissions, opening it for both reading and writing&#10;     *     {@code FileAttribute<Set<PosixFilePermission>> perms = ...}&#10;     *     SeekableByteChannel sbc = Files.newByteChannel(path, EnumSet.of(CREATE_NEW,READ,WRITE), perms);&#10;     * </pre>&#10;     *&#10;     * @param   path&#10;     *          the path to the file to open or create&#10;     * @param   options&#10;     *          options specifying how the file is opened&#10;     * @param   attrs&#10;     *          an optional list of file attributes to set atomically when&#10;     *          creating the file&#10;     *&#10;     * @return  a new seekable byte channel&#10;     *&#10;     * @throws  IllegalArgumentException&#10;     *          if the set contains an invalid combination of options&#10;     * @throws  UnsupportedOperationException&#10;     *          if an unsupported open option is specified or the array contains&#10;     *          attributes that cannot be set atomically when creating the file&#10;     * @throws  FileAlreadyExistsException&#10;     *          if a file of that name already exists and the {@link&#10;     *          StandardOpenOption#CREATE_NEW CREATE_NEW} option is specified&#10;     *          <i>(optional specific exception)</i>&#10;     * @throws  IOException&#10;     *          if an I/O error occurs&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager is&#10;     *          installed, the {@link SecurityManager#checkRead(String) checkRead}&#10;     *          method is invoked to check read access to the path if the file is&#10;     *          opened for reading. The {@link SecurityManager#checkWrite(String)&#10;     *          checkWrite} method is invoked to check write access to the path&#10;     *          if the file is opened for writing. The {@link&#10;     *          SecurityManager#checkDelete(String) checkDelete} method is&#10;     *          invoked to check delete access if the file is opened with the&#10;     *          {@code DELETE_ON_CLOSE} option.&#10;     *&#10;     * @see java.nio.channels.FileChannel#open(Path,Set,FileAttribute[])&#10;     "
  ]
  node [
    id 1797
    label "SPARSE"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1798
    label "SYNC"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1799
    label "DSYNC"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1800
    label "CREATE"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1801
    label "APPEND"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1802
    label "DELETE_ON_CLOSE"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1803
    label "java.nio.channels.SeekableByteChannel"
    type "class"
    comment ""
  ]
  node [
    id 1804
    label " int read(ByteBuffer dst) throws IOException"
    type "method"
    comment "&#10;     * Reads a sequence of bytes from this channel into the given buffer.&#10;     *&#10;     * <p> Bytes are read starting at this channel's current position, and&#10;     * then the position is updated with the number of bytes actually read.&#10;     * Otherwise this method behaves exactly as specified in the {@link&#10;     * ReadableByteChannel} interface.&#10;     "
  ]
  node [
    id 1805
    label " int write(ByteBuffer src) throws IOException"
    type "method"
    comment "&#10;     * Writes a sequence of bytes to this channel from the given buffer.&#10;     *&#10;     * <p> Bytes are written starting at this channel's current position, unless&#10;     * the channel is connected to an entity such as a file that is opened with&#10;     * the {@link java.nio.file.StandardOpenOption#APPEND APPEND} option, in&#10;     * which case the position is first advanced to the end. The entity to which&#10;     * the channel is connected is grown, if necessary, to accommodate the&#10;     * written bytes, and then the position is updated with the number of bytes&#10;     * actually written. Otherwise this method behaves exactly as specified by&#10;     * the {@link WritableByteChannel} interface.&#10;     "
  ]
  node [
    id 1806
    label " long position() throws IOException"
    type "method"
    comment "&#10;     * Returns this channel's position.&#10;     *&#10;     * @return  This channel's position,&#10;     *          a non-negative integer counting the number of bytes&#10;     *          from the beginning of the entity to the current position&#10;     *&#10;     * @throws  ClosedChannelException&#10;     *          If this channel is closed&#10;     * @throws  IOException&#10;     *          If some other I/O error occurs&#10;     "
  ]
  node [
    id 1807
    label " SeekableByteChannel position(long newPosition) throws IOException"
    type "method"
    comment "&#10;     * Sets this channel's position.&#10;     *&#10;     * <p> Setting the position to a value that is greater than the current size&#10;     * is legal but does not change the size of the entity.  A later attempt to&#10;     * read bytes at such a position will immediately return an end-of-file&#10;     * indication.  A later attempt to write bytes at such a position will cause&#10;     * the entity to grow to accommodate the new bytes; the values of any bytes&#10;     * between the previous end-of-file and the newly-written bytes are&#10;     * unspecified.&#10;     *&#10;     * <p> Setting the channel's position is not recommended when connected to&#10;     * an entity, typically a file, that is opened with the {@link&#10;     * java.nio.file.StandardOpenOption#APPEND APPEND} option. When opened for&#10;     * append, the position is first advanced to the end before writing.&#10;     *&#10;     * @param  newPosition&#10;     *         The new position, a non-negative integer counting&#10;     *         the number of bytes from the beginning of the entity&#10;     *&#10;     * @return  This channel&#10;     *&#10;     * @throws  ClosedChannelException&#10;     *          If this channel is closed&#10;     * @throws  IllegalArgumentException&#10;     *          If the new position is negative&#10;     * @throws  IOException&#10;     *          If some other I/O error occurs&#10;     "
  ]
  node [
    id 1808
    label " long size() throws IOException"
    type "method"
    comment "&#10;     * Returns the current size of entity to which this channel is connected.&#10;     *&#10;     * @return  The current size, measured in bytes&#10;     *&#10;     * @throws  ClosedChannelException&#10;     *          If this channel is closed&#10;     * @throws  IOException&#10;     *          If some other I/O error occurs&#10;     "
  ]
  node [
    id 1809
    label " SeekableByteChannel truncate(long size) throws IOException"
    type "method"
    comment "&#10;     * Truncates the entity, to which this channel is connected, to the given&#10;     * size.&#10;     *&#10;     * <p> If the given size is less than the current size then the entity is&#10;     * truncated, discarding any bytes beyond the new end. If the given size is&#10;     * greater than or equal to the current size then the entity is not modified.&#10;     * In either case, if the current position is greater than the given size&#10;     * then it is set to that size.&#10;     *&#10;     * <p> An implementation of this interface may prohibit truncation when&#10;     * connected to an entity, typically a file, opened with the {@link&#10;     * java.nio.file.StandardOpenOption#APPEND APPEND} option.&#10;     *&#10;     * @param  size&#10;     *         The new size, a non-negative byte count&#10;     *&#10;     * @return  This channel&#10;     *&#10;     * @throws  NonWritableChannelException&#10;     *          If this channel was not opened for writing&#10;     * @throws  ClosedChannelException&#10;     *          If this channel is closed&#10;     * @throws  IllegalArgumentException&#10;     *          If the new size is negative&#10;     * @throws  IOException&#10;     *          If some other I/O error occurs&#10;     "
  ]
  node [
    id 1810
    label "CREATE_NEW"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1811
    label "FileAttributefile"
  ]
  node [
    id 1812
    label "java.nio.channels.FileChannel"
    type "class"
    comment ""
  ]
  node [
    id 1813
    label "public static FileChannel open(Path path, Set<? extends OpenOption> options, FileAttribute<?>... attrs) throws IOException"
    type "method"
    comment "&#10;     * Opens or creates a file, returning a file channel to access the file.&#10;     *&#10;     * <p> The {@code options} parameter determines how the file is opened.&#10;     * The {@link StandardOpenOption#READ READ} and {@link StandardOpenOption#WRITE&#10;     * WRITE} options determine if the file should be opened for reading and/or&#10;     * writing. If neither option (or the {@link StandardOpenOption#APPEND APPEND}&#10;     * option) is contained in the array then the file is opened for reading.&#10;     * By default reading or writing commences at the beginning of the file.&#10;     *&#10;     * <p> In the addition to {@code READ} and {@code WRITE}, the following&#10;     * options may be present:&#10;     *&#10;     * <table class=&#34;striped&#34;>&#10;     * <caption style=&#34;display:none&#34;>additional options</caption>&#10;     * <thead>&#10;     * <tr> <th scope=&#34;col&#34;>Option</th> <th scope=&#34;col&#34;>Description</th> </tr>&#10;     * </thead>&#10;     * <tbody>&#10;     * <tr>&#10;     *   <th scope=&#34;row&#34;> {@link StandardOpenOption#APPEND APPEND} </th>&#10;     *   <td> If this option is present then the file is opened for writing and&#10;     *     each invocation of the channel's {@code write} method first advances&#10;     *     the position to the end of the file and then writes the requested&#10;     *     data. Whether the advancement of the position and the writing of the&#10;     *     data are done in a single atomic operation is system-dependent and&#10;     *     therefore unspecified. This option may not be used in conjunction&#10;     *     with the {@code READ} or {@code TRUNCATE_EXISTING} options. </td>&#10;     * </tr>&#10;     * <tr>&#10;     *   <th scope=&#34;row&#34;> {@link StandardOpenOption#TRUNCATE_EXISTING TRUNCATE_EXISTING} </th>&#10;     *   <td> If this option is present then the existing file is truncated to&#10;     *   a size of 0 bytes. This option is ignored when the file is opened only&#10;     *   for reading. </td>&#10;     * </tr>&#10;     * <tr>&#10;     *   <th scope=&#34;row&#34;> {@link StandardOpenOption#CREATE_NEW CREATE_NEW} </th>&#10;     *   <td> If this option is present then a new file is created, failing if&#10;     *   the file already exists. When creating a file the check for the&#10;     *   existence of the file and the creation of the file if it does not exist&#10;     *   is atomic with respect to other file system operations. This option is&#10;     *   ignored when the file is opened only for reading. </td>&#10;     * </tr>&#10;     * <tr>&#10;     *   <th scope=&#34;row&#34; > {@link StandardOpenOption#CREATE CREATE} </th>&#10;     *   <td> If this option is present then an existing file is opened if it&#10;     *   exists, otherwise a new file is created. When creating a file the check&#10;     *   for the existence of the file and the creation of the file if it does&#10;     *   not exist is atomic with respect to other file system operations. This&#10;     *   option is ignored if the {@code CREATE_NEW} option is also present or&#10;     *   the file is opened only for reading. </td>&#10;     * </tr>&#10;     * <tr>&#10;     *   <th scope=&#34;row&#34; > {@link StandardOpenOption#DELETE_ON_CLOSE DELETE_ON_CLOSE} </th>&#10;     *   <td> When this option is present then the implementation makes a&#10;     *   <em>best effort</em> attempt to delete the file when closed by&#10;     *   the {@link #close close} method. If the {@code close} method is not&#10;     *   invoked then a <em>best effort</em> attempt is made to delete the file&#10;     *   when the Java virtual machine terminates. </td>&#10;     * </tr>&#10;     * <tr>&#10;     *   <th scope=&#34;row&#34;>{@link StandardOpenOption#SPARSE SPARSE} </th>&#10;     *   <td> When creating a new file this option is a <em>hint</em> that the&#10;     *   new file will be sparse. This option is ignored when not creating&#10;     *   a new file. </td>&#10;     * </tr>&#10;     * <tr>&#10;     *   <th scope=&#34;row&#34;> {@link StandardOpenOption#SYNC SYNC} </th>&#10;     *   <td> Requires that every update to the file's content or metadata be&#10;     *   written synchronously to the underlying storage device. (see <a&#10;     *   href=&#34;../file/package-summary.html#integrity&#34;> Synchronized I/O file&#10;     *   integrity</a>). </td>&#10;     * </tr>&#10;     * <tr>&#10;     *   <th scope=&#34;row&#34;> {@link StandardOpenOption#DSYNC DSYNC} </th>&#10;     *   <td> Requires that every update to the file's content be written&#10;     *   synchronously to the underlying storage device. (see <a&#10;     *   href=&#34;../file/package-summary.html#integrity&#34;> Synchronized I/O file&#10;     *   integrity</a>). </td>&#10;     * </tr>&#10;     * </tbody>&#10;     * </table>&#10;     *&#10;     * <p> An implementation may also support additional options.&#10;     *&#10;     * <p> The {@code attrs} parameter is an optional array of file {@link&#10;     * FileAttribute file-attributes} to set atomically when creating the file.&#10;     *&#10;     * <p> The new channel is created by invoking the {@link&#10;     * FileSystemProvider#newFileChannel newFileChannel} method on the&#10;     * provider that created the {@code Path}.&#10;     *&#10;     * @param   path&#10;     *          The path of the file to open or create&#10;     * @param   options&#10;     *          Options specifying how the file is opened&#10;     * @param   attrs&#10;     *          An optional list of file attributes to set atomically when&#10;     *          creating the file&#10;     *&#10;     * @return  A new file channel&#10;     *&#10;     * @throws  IllegalArgumentException&#10;     *          If the set contains an invalid combination of options&#10;     * @throws  UnsupportedOperationException&#10;     *          If the {@code path} is associated with a provider that does not&#10;     *          support creating file channels, or an unsupported open option is&#10;     *          specified, or the array contains an attribute that cannot be set&#10;     *          atomically when creating the file&#10;     * @throws  IOException&#10;     *          If an I/O error occurs&#10;     * @throws  SecurityException&#10;     *          If a security manager is installed and it denies an&#10;     *          unspecified permission required by the implementation.&#10;     *          In the case of the default provider, the {@link&#10;     *          SecurityManager#checkRead(String)} method is invoked to check&#10;     *          read access if the file is opened for reading. The {@link&#10;     *          SecurityManager#checkWrite(String)} method is invoked to check&#10;     *          write access if the file is opened for writing&#10;     *&#10;     * @since   1.7&#10;     "
  ]
  node [
    id 1814
    label "java.nio.file.attribute.FileAttribute"
    type "class"
    comment ""
  ]
  node [
    id 1815
    label " T value()"
    type "method"
    comment "&#10;     * Returns the attribute value.&#10;     *&#10;     * @return The attribute value&#10;     "
  ]
  node [
    id 1816
    label "WRITEWRITE"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1817
    label "newFileChannel"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1818
    label "public static FileChannel open(Path path, OpenOption... options) throws IOException"
    type "method"
    comment "&#10;     * Opens or creates a file, returning a file channel to access the file.&#10;     *&#10;     * <p> An invocation of this method behaves in exactly the same way as the&#10;     * invocation&#10;     * <pre>&#10;     *     fc.{@link #open(Path,Set,FileAttribute[]) open}(file, opts, new FileAttribute&#38;lt;?&#38;gt;[0]);&#10;     * </pre>&#10;     * where {@code opts} is a set of the options specified in the {@code&#10;     * options} array.&#10;     *&#10;     * @param   path&#10;     *          The path of the file to open or create&#10;     * @param   options&#10;     *          Options specifying how the file is opened&#10;     *&#10;     * @return  A new file channel&#10;     *&#10;     * @throws  IllegalArgumentException&#10;     *          If the set contains an invalid combination of options&#10;     * @throws  UnsupportedOperationException&#10;     *          If the {@code path} is associated with a provider that does not&#10;     *          support creating file channels, or an unsupported open option is&#10;     *          specified&#10;     * @throws  IOException&#10;     *          If an I/O error occurs&#10;     * @throws  SecurityException&#10;     *          If a security manager is installed and it denies an&#10;     *          unspecified permission required by the implementation.&#10;     *          In the case of the default provider, the {@link&#10;     *          SecurityManager#checkRead(String)} method is invoked to check&#10;     *          read access if the file is opened for reading. The {@link&#10;     *          SecurityManager#checkWrite(String)} method is invoked to check&#10;     *          write access if the file is opened for writing&#10;     *&#10;     * @since   1.7&#10;     "
  ]
  node [
    id 1819
    label "open(Path"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1820
    label "public abstract long position() throws IOException"
    type "method"
    comment "&#10;     * Returns this channel's file position.&#10;     *&#10;     * @return  This channel's file position,&#10;     *          a non-negative integer counting the number of bytes&#10;     *          from the beginning of the file to the current position&#10;     *&#10;     * @throws  ClosedChannelException&#10;     *          If this channel is closed&#10;     *&#10;     * @throws  IOException&#10;     *          If some other I/O error occurs&#10;     "
  ]
  node [
    id 1821
    label "public abstract FileChannel position(long newPosition) throws IOException"
    type "method"
    comment "&#10;     * Sets this channel's file position.&#10;     *&#10;     * <p> Setting the position to a value that is greater than the file's&#10;     * current size is legal but does not change the size of the file.  A later&#10;     * attempt to read bytes at such a position will immediately return an&#10;     * end-of-file indication.  A later attempt to write bytes at such a&#10;     * position will cause the file to be grown to accommodate the new bytes;&#10;     * the values of any bytes between the previous end-of-file and the&#10;     * newly-written bytes are unspecified.  </p>&#10;     *&#10;     * @param  newPosition&#10;     *         The new position, a non-negative integer counting&#10;     *         the number of bytes from the beginning of the file&#10;     *&#10;     * @return  This file channel&#10;     *&#10;     * @throws  ClosedChannelException&#10;     *          If this channel is closed&#10;     *&#10;     * @throws  IllegalArgumentException&#10;     *          If the new position is negative&#10;     *&#10;     * @throws  IOException&#10;     *          If some other I/O error occurs&#10;     "
  ]
  node [
    id 1822
    label "public abstract long size() throws IOException"
    type "method"
    comment "&#10;     * Returns the current size of this channel's file.&#10;     *&#10;     * @return  The current size of this channel's file,&#10;     *          measured in bytes&#10;     *&#10;     * @throws  ClosedChannelException&#10;     *          If this channel is closed&#10;     *&#10;     * @throws  IOException&#10;     *          If some other I/O error occurs&#10;     "
  ]
  node [
    id 1823
    label "public abstract FileChannel truncate(long size) throws IOException"
    type "method"
    comment "&#10;     * Truncates this channel's file to the given size.&#10;     *&#10;     * <p> If the given size is less than the file's current size then the file&#10;     * is truncated, discarding any bytes beyond the new end of the file.  If&#10;     * the given size is greater than or equal to the file's current size then&#10;     * the file is not modified.  In either case, if this channel's file&#10;     * position is greater than the given size then it is set to that size.&#10;     * </p>&#10;     *&#10;     * @param  size&#10;     *         The new size, a non-negative byte count&#10;     *&#10;     * @return  This file channel&#10;     *&#10;     * @throws  NonWritableChannelException&#10;     *          If this channel was not opened for writing&#10;     *&#10;     * @throws  ClosedChannelException&#10;     *          If this channel is closed&#10;     *&#10;     * @throws  IllegalArgumentException&#10;     *          If the new size is negative&#10;     *&#10;     * @throws  IOException&#10;     *          If some other I/O error occurs&#10;     "
  ]
  node [
    id 1824
    label "public abstract void force(boolean metaData) throws IOException"
    type "method"
    comment "&#10;     * Forces any updates to this channel's file to be written to the storage&#10;     * device that contains it.&#10;     *&#10;     * <p> If this channel's file resides on a local storage device then when&#10;     * this method returns it is guaranteed that all changes made to the file&#10;     * since this channel was created, or since this method was last invoked,&#10;     * will have been written to that device.  This is useful for ensuring that&#10;     * critical information is not lost in the event of a system crash.&#10;     *&#10;     * <p> If the file does not reside on a local device then no such guarantee&#10;     * is made.&#10;     *&#10;     * <p> The {@code metaData} parameter can be used to limit the number of&#10;     * I/O operations that this method is required to perform.  Passing&#10;     * {@code false} for this parameter indicates that only updates to the&#10;     * file's content need be written to storage; passing {@code true}&#10;     * indicates that updates to both the file's content and metadata must be&#10;     * written, which generally requires at least one more I/O operation.&#10;     * Whether this parameter actually has any effect is dependent upon the&#10;     * underlying operating system and is therefore unspecified.&#10;     *&#10;     * <p> Invoking this method may cause an I/O operation to occur even if the&#10;     * channel was only opened for reading.  Some operating systems, for&#10;     * example, maintain a last-access time as part of a file's metadata, and&#10;     * this time is updated whenever the file is read.  Whether or not this is&#10;     * actually done is system-dependent and is therefore unspecified.&#10;     *&#10;     * <p> This method is only guaranteed to force changes that were made to&#10;     * this channel's file via the methods defined in this class.  It may or&#10;     * may not force changes that were made by modifying the content of a&#10;     * {@link MappedByteBuffer <i>mapped byte buffer</i>} obtained by&#10;     * invoking the {@link #map map} method.  Invoking the {@link&#10;     * MappedByteBuffer#force force} method of the mapped byte buffer will&#10;     * force changes made to the buffer's content to be written.  </p>&#10;     *&#10;     * @param   metaData&#10;     *          If {@code true} then this method is required to force changes&#10;     *          to both the file's content and metadata to be written to&#10;     *          storage; otherwise, it need only force content changes to be&#10;     *          written&#10;     *&#10;     * @throws  ClosedChannelException&#10;     *          If this channel is closed&#10;     *&#10;     * @throws  IOException&#10;     *          If some other I/O error occurs&#10;     "
  ]
  node [
    id 1825
    label "map"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1826
    label "force"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1827
    label "java.nio.MappedByteBuffer"
    type "class"
    comment ""
  ]
  node [
    id 1828
    label " final boolean isSync()"
    type "method"
    comment "&#10;     * Tells whether this buffer was mapped against a non-volatile&#10;     * memory device by passing one of the sync map modes {@link&#10;     * jdk.nio.mapmode.ExtendedMapMode#READ_ONLY_SYNC&#10;     * ExtendedMapModeMapMode#READ_ONLY_SYNC} or {@link&#10;     * jdk.nio.mapmode.ExtendedMapMode#READ_ONLY_SYNC&#10;     * ExtendedMapMode#READ_WRITE_SYNC} in the call to {@link&#10;     * java.nio.channels.FileChannel#map FileChannel.map} or was&#10;     * mapped by passing one of the other map modes.&#10;     *&#10;     * @return true if the file was mapped using one of the sync map&#10;     * modes, otherwise false.&#10;     "
  ]
  node [
    id 1829
    label "READ_ONLY_SYNCExtendedMapModeMapMode"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1830
    label "READ_ONLY_SYNCExtendedMapMode"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1831
    label " final FileDescriptor fileDescriptor()"
    type "method"
    comment "&#10;     * Returns the {@code FileDescriptor} associated with this&#10;     * {@code MappedByteBuffer}.&#10;     *&#10;     * @return the buffer's file descriptor; may be {@code null}&#10;     "
  ]
  node [
    id 1832
    label "private void checkMapped()"
    type "method"
    comment " Android-added: Added checkMapped as Android doesn't allow null fd in DirectByteBuffer."
  ]
  node [
    id 1833
    label "private long mappingOffset()"
    type "method"
    comment " of the mapping. Computed each time to avoid storing in every direct buffer."
  ]
  node [
    id 1834
    label "public final boolean isLoaded()"
    type "method"
    comment "&#10;     * Tells whether or not this buffer's content is resident in physical&#10;     * memory.&#10;     *&#10;     * <p> A return value of {@code true} implies that it is highly likely&#10;     * that all of the data in this buffer is resident in physical memory and&#10;     * may therefore be accessed without incurring any virtual-memory page&#10;     * faults or I/O operations.  A return value of {@code false} does not&#10;     * necessarily imply that the buffer's content is not resident in physical&#10;     * memory.&#10;     *&#10;     * <p> The returned value is a hint, rather than a guarantee, because the&#10;     * underlying operating system may have paged out some of the buffer's data&#10;     * by the time that an invocation of this method returns.  </p>&#10;     *&#10;     * @return  {@code true} if it is likely that this buffer's content&#10;     *          is resident in physical memory&#10;     "
  ]
  node [
    id 1835
    label "public final MappedByteBuffer load()"
    type "method"
    comment "&#10;     * Loads this buffer's content into physical memory.&#10;     *&#10;     * <p> This method makes a best effort to ensure that, when it returns,&#10;     * this buffer's content is resident in physical memory.  Invoking this&#10;     * method may cause some number of page faults and I/O operations to&#10;     * occur. </p>&#10;     *&#10;     * @return  This buffer&#10;     "
  ]
  node [
    id 1836
    label "public final MappedByteBuffer force()"
    type "method"
    comment "&#10;     * Forces any changes made to this buffer's content to be written to the&#10;     * storage device containing the mapped file.  The region starts at index&#10;     * zero in this buffer and is {@code capacity()} bytes.&#10;     *&#10;     * <p> If the file mapped into this buffer resides on a local storage&#10;     * device then when this method returns it is guaranteed that all changes&#10;     * made to the buffer since it was created, or since this method was last&#10;     * invoked, will have been written to that device.&#10;     *&#10;     * <p> If the file does not reside on a local device then no such guarantee&#10;     * is made.&#10;     *&#10;     * <p> If this buffer was not mapped in read/write mode ({@link&#10;     * java.nio.channels.FileChannel.MapMode#READ_WRITE}) then&#10;     * invoking this method may have no effect. In particular, the&#10;     * method has no effect for buffers mapped in read-only or private&#10;     * mapping modes. This method may or may not have an effect for&#10;     * implementation-specific mapping modes. </p>&#10;     *&#10;     * @throws UncheckedIOException&#10;     *         If an I/O error occurs writing the buffer's content to the&#10;     *         storage device containing the mapped file&#10;     *&#10;     * @return  This buffer&#10;     "
  ]
  node [
    id 1837
    label "READ_WRITE"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1838
    label "public final MappedByteBuffer force(int index, int length)"
    type "method"
    comment "&#10;     * Forces any changes made to a region of this buffer's content to&#10;     * be written to the storage device containing the mapped&#10;     * file. The region starts at the given {@code index} in this&#10;     * buffer and is {@code length} bytes.&#10;     *&#10;     * <p> If the file mapped into this buffer resides on a local&#10;     * storage device then when this method returns it is guaranteed&#10;     * that all changes made to the selected region buffer since it&#10;     * was created, or since this method was last invoked, will have&#10;     * been written to that device. The force operation is free to&#10;     * write bytes that lie outside the specified region, for example&#10;     * to ensure that data blocks of some device-specific granularity&#10;     * are transferred in their entirety.&#10;     *&#10;     * <p> If the file does not reside on a local device then no such&#10;     * guarantee is made.&#10;     *&#10;     * <p> If this buffer was not mapped in read/write mode ({@link&#10;     * java.nio.channels.FileChannel.MapMode#READ_WRITE}) then&#10;     * invoking this method may have no effect. In particular, the&#10;     * method has no effect for buffers mapped in read-only or private&#10;     * mapping modes. This method may or may not have an effect for&#10;     * implementation-specific mapping modes. </p>&#10;     *&#10;     * @param  index&#10;     *         The index of the first byte in the buffer region that is&#10;     *         to be written back to storage; must be non-negative&#10;     *         and less than {@code capacity()}&#10;     *&#10;     * @param  length&#10;     *         The length of the region in bytes; must be non-negative&#10;     *         and no larger than {@code capacity() - index}&#10;     *&#10;     * @throws IndexOutOfBoundsException&#10;     *         if the preconditions on the index and length do not&#10;     *         hold.&#10;     *&#10;     * @throws UncheckedIOException&#10;     *         If an I/O error occurs writing the buffer's content to the&#10;     *         storage device containing the mapped file&#10;     *&#10;     * @return  This buffer&#10;     *&#10;     * @since 13&#10;     "
  ]
  node [
    id 1839
    label "public final Buffer position(int newPosition)"
    type "method"
    comment " Android-changed: covariant overloads of *Buffer methods that return this."
  ]
  node [
    id 1840
    label "public final Buffer limit(int newLimit)"
    type "method"
    comment " Android-changed: covariant overloads of *Buffer methods that return this."
  ]
  node [
    id 1841
    label "public final Buffer mark()"
    type "method"
    comment " Android-changed: covariant overloads of *Buffer methods that return this."
  ]
  node [
    id 1842
    label "public final Buffer reset()"
    type "method"
    comment " Android-changed: covariant overloads of *Buffer methods that return this."
  ]
  node [
    id 1843
    label "public final Buffer clear()"
    type "method"
    comment " Android-changed: covariant overloads of *Buffer methods that return this."
  ]
  node [
    id 1844
    label "public final Buffer flip()"
    type "method"
    comment " Android-changed: covariant overloads of *Buffer methods that return this."
  ]
  node [
    id 1845
    label "public final Buffer rewind()"
    type "method"
    comment " Android-changed: covariant overloads of *Buffer methods that return this."
  ]
  node [
    id 1846
    label "public abstract MappedByteBuffer slice(int index, int length)"
    type "method"
    comment "&#10;     * {@inheritDoc}&#10;     *&#10;     * <p> Reading bytes into physical memory by invoking {@code load()} on the&#10;     * returned buffer, or writing bytes to the storage device by invoking&#10;     * {@code force()} on the returned buffer, will only act on the sub-range&#10;     * of this buffer that the returned buffer represents, namely&#10;     * {@code [index,index+length)}, where {@code index} and {@code length} are&#10;     * assumed to satisfy the preconditions.&#10;     "
  ]
  node [
    id 1847
    label "public abstract long transferTo(long position, long count, WritableByteChannel target) throws IOException"
    type "method"
    comment "&#10;     * Transfers bytes from this channel's file to the given writable byte&#10;     * channel.&#10;     *&#10;     * <p> An attempt is made to read up to {@code count} bytes starting at&#10;     * the given {@code position} in this channel's file and write them to the&#10;     * target channel.  An invocation of this method may or may not transfer&#10;     * all of the requested bytes; whether or not it does so depends upon the&#10;     * natures and states of the channels.  Fewer than the requested number of&#10;     * bytes are transferred if this channel's file contains fewer than&#10;     * {@code count} bytes starting at the given {@code position}, or if the&#10;     * target channel is non-blocking and it has fewer than {@code count}&#10;     * bytes free in its output buffer.&#10;     *&#10;     * <p> This method does not modify this channel's position.  If the given&#10;     * position is greater than the file's current size then no bytes are&#10;     * transferred.  If the target channel has a position then bytes are&#10;     * written starting at that position and then the position is incremented&#10;     * by the number of bytes written.&#10;     *&#10;     * <p> This method is potentially much more efficient than a simple loop&#10;     * that reads from this channel and writes to the target channel.  Many&#10;     * operating systems can transfer bytes directly from the filesystem cache&#10;     * to the target channel without actually copying them.  </p>&#10;     *&#10;     * @param  position&#10;     *         The position within the file at which the transfer is to begin;&#10;     *         must be non-negative&#10;     *&#10;     * @param  count&#10;     *         The maximum number of bytes to be transferred; must be&#10;     *         non-negative&#10;     *&#10;     * @param  target&#10;     *         The target channel&#10;     *&#10;     * @return  The number of bytes, possibly zero,&#10;     *          that were actually transferred&#10;     *&#10;     * @throws IllegalArgumentException&#10;     *         If the preconditions on the parameters do not hold&#10;     *&#10;     * @throws  NonReadableChannelException&#10;     *          If this channel was not opened for reading&#10;     *&#10;     * @throws  NonWritableChannelException&#10;     *          If the target channel was not opened for writing&#10;     *&#10;     * @throws  ClosedChannelException&#10;     *          If either this channel or the target channel is closed&#10;     *&#10;     * @throws  AsynchronousCloseException&#10;     *          If another thread closes either channel&#10;     *          while the transfer is in progress&#10;     *&#10;     * @throws  ClosedByInterruptException&#10;     *          If another thread interrupts the current thread while the&#10;     *          transfer is in progress, thereby closing both channels and&#10;     *          setting the current thread's interrupt status&#10;     *&#10;     * @throws  IOException&#10;     *          If some other I/O error occurs&#10;     "
  ]
  node [
    id 1848
    label "public abstract long transferFrom(ReadableByteChannel src, long position, long count) throws IOException"
    type "method"
    comment "&#10;     * Transfers bytes into this channel's file from the given readable byte&#10;     * channel.&#10;     *&#10;     * <p> An attempt is made to read up to {@code count} bytes from the&#10;     * source channel and write them to this channel's file starting at the&#10;     * given {@code position}.  An invocation of this method may or may not&#10;     * transfer all of the requested bytes; whether or not it does so depends&#10;     * upon the natures and states of the channels.  Fewer than the requested&#10;     * number of bytes will be transferred if the source channel has fewer than&#10;     * {@code count} bytes remaining, or if the source channel is non-blocking&#10;     * and has fewer than {@code count} bytes immediately available in its&#10;     * input buffer.&#10;     *&#10;     * <p> This method does not modify this channel's position.  If the given&#10;     * position is greater than the file's current size then no bytes are&#10;     * transferred.  If the source channel has a position then bytes are read&#10;     * starting at that position and then the position is incremented by the&#10;     * number of bytes read.&#10;     *&#10;     * <p> This method is potentially much more efficient than a simple loop&#10;     * that reads from the source channel and writes to this channel.  Many&#10;     * operating systems can transfer bytes directly from the source channel&#10;     * into the filesystem cache without actually copying them.  </p>&#10;     *&#10;     * @param  src&#10;     *         The source channel&#10;     *&#10;     * @param  position&#10;     *         The position within the file at which the transfer is to begin;&#10;     *         must be non-negative&#10;     *&#10;     * @param  count&#10;     *         The maximum number of bytes to be transferred; must be&#10;     *         non-negative&#10;     *&#10;     * @return  The number of bytes, possibly zero,&#10;     *          that were actually transferred&#10;     *&#10;     * @throws IllegalArgumentException&#10;     *         If the preconditions on the parameters do not hold&#10;     *&#10;     * @throws  NonReadableChannelException&#10;     *          If the source channel was not opened for reading&#10;     *&#10;     * @throws  NonWritableChannelException&#10;     *          If this channel was not opened for writing&#10;     *&#10;     * @throws  ClosedChannelException&#10;     *          If either this channel or the source channel is closed&#10;     *&#10;     * @throws  AsynchronousCloseException&#10;     *          If another thread closes either channel&#10;     *          while the transfer is in progress&#10;     *&#10;     * @throws  ClosedByInterruptException&#10;     *          If another thread interrupts the current thread while the&#10;     *          transfer is in progress, thereby closing both channels and&#10;     *          setting the current thread's interrupt status&#10;     *&#10;     * @throws  IOException&#10;     *          If some other I/O error occurs&#10;     "
  ]
  node [
    id 1849
    label "public abstract int read(ByteBuffer dst, long position) throws IOException"
    type "method"
    comment "&#10;     * Reads a sequence of bytes from this channel into the given buffer,&#10;     * starting at the given file position.&#10;     *&#10;     * <p> This method works in the same manner as the {@link&#10;     * #read(ByteBuffer)} method, except that bytes are read starting at the&#10;     * given file position rather than at the channel's current position.  This&#10;     * method does not modify this channel's position.  If the given position&#10;     * is greater than the file's current size then no bytes are read.  </p>&#10;     *&#10;     * @param  dst&#10;     *         The buffer into which bytes are to be transferred&#10;     *&#10;     * @param  position&#10;     *         The file position at which the transfer is to begin;&#10;     *         must be non-negative&#10;     *&#10;     * @return  The number of bytes read, possibly zero, or {@code -1} if the&#10;     *          given position is greater than or equal to the file's current&#10;     *          size&#10;     *&#10;     * @throws  IllegalArgumentException&#10;     *          If the position is negative&#10;     *&#10;     * @throws  NonReadableChannelException&#10;     *          If this channel was not opened for reading&#10;     *&#10;     * @throws  ClosedChannelException&#10;     *          If this channel is closed&#10;     *&#10;     * @throws  AsynchronousCloseException&#10;     *          If another thread closes this channel&#10;     *          while the read operation is in progress&#10;     *&#10;     * @throws  ClosedByInterruptException&#10;     *          If another thread interrupts the current thread&#10;     *          while the read operation is in progress, thereby&#10;     *          closing the channel and setting the current thread's&#10;     *          interrupt status&#10;     *&#10;     * @throws  IOException&#10;     *          If some other I/O error occurs&#10;     "
  ]
  node [
    id 1850
    label "read(ByteBuffer)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1851
    label "public abstract int write(ByteBuffer src, long position) throws IOException"
    type "method"
    comment "&#10;     * Writes a sequence of bytes to this channel from the given buffer,&#10;     * starting at the given file position.&#10;     *&#10;     * <p> This method works in the same manner as the {@link&#10;     * #write(ByteBuffer)} method, except that bytes are written starting at&#10;     * the given file position rather than at the channel's current position.&#10;     * This method does not modify this channel's position.  If the given&#10;     * position is greater than the file's current size then the file will be&#10;     * grown to accommodate the new bytes; the values of any bytes between the&#10;     * previous end-of-file and the newly-written bytes are unspecified.  </p>&#10;     *&#10;     * @param  src&#10;     *         The buffer from which bytes are to be transferred&#10;     *&#10;     * @param  position&#10;     *         The file position at which the transfer is to begin;&#10;     *         must be non-negative&#10;     *&#10;     * @return  The number of bytes written, possibly zero&#10;     *&#10;     * @throws  IllegalArgumentException&#10;     *          If the position is negative&#10;     *&#10;     * @throws  NonWritableChannelException&#10;     *          If this channel was not opened for writing&#10;     *&#10;     * @throws  ClosedChannelException&#10;     *          If this channel is closed&#10;     *&#10;     * @throws  AsynchronousCloseException&#10;     *          If another thread closes this channel&#10;     *          while the write operation is in progress&#10;     *&#10;     * @throws  ClosedByInterruptException&#10;     *          If another thread interrupts the current thread&#10;     *          while the write operation is in progress, thereby&#10;     *          closing the channel and setting the current thread's&#10;     *          interrupt status&#10;     *&#10;     * @throws  IOException&#10;     *          If some other I/O error occurs&#10;     "
  ]
  node [
    id 1852
    label "write(ByteBuffer)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1853
    label "public abstract MappedByteBuffer map(MapMode mode, long position, long size) throws IOException"
    type "method"
    comment "&#10;     * Maps a region of this channel's file directly into memory.&#10;     *&#10;     * <p> A region of a file may be mapped into memory in one of three modes:&#10;     * </p>&#10;     *&#10;     * <ul>&#10;     *&#10;     *   <li><p> <i>Read-only:</i> Any attempt to modify the resulting buffer&#10;     *   will cause a {@link java.nio.ReadOnlyBufferException} to be thrown.&#10;     *   ({@link MapMode#READ_ONLY MapMode.READ_ONLY}) </p></li>&#10;     *&#10;     *   <li><p> <i>Read/write:</i> Changes made to the resulting buffer will&#10;     *   eventually be propagated to the file; they may or may not be made&#10;     *   visible to other programs that have mapped the same file.  ({@link&#10;     *   MapMode#READ_WRITE MapMode.READ_WRITE}) </p></li>&#10;     *&#10;     *   <li><p> <i>Private:</i> Changes made to the resulting buffer will not&#10;     *   be propagated to the file and will not be visible to other programs&#10;     *   that have mapped the same file; instead, they will cause private&#10;     *   copies of the modified portions of the buffer to be created.  ({@link&#10;     *   MapMode#PRIVATE MapMode.PRIVATE}) </p></li>&#10;     *&#10;     * </ul>&#10;     *&#10;     * <p> For a read-only mapping, this channel must have been opened for&#10;     * reading; for a read/write or private mapping, this channel must have&#10;     * been opened for both reading and writing.&#10;     *&#10;     * <p> The {@link MappedByteBuffer <i>mapped byte buffer</i>}&#10;     * returned by this method will have a position of zero and a limit and&#10;     * capacity of {@code size}; its mark will be undefined.  The buffer and&#10;     * the mapping that it represents will remain valid until the buffer itself&#10;     * is garbage-collected.&#10;     *&#10;     * <p> A mapping, once established, is not dependent upon the file channel&#10;     * that was used to create it.  Closing the channel, in particular, has no&#10;     * effect upon the validity of the mapping.&#10;     *&#10;     * <p> Many of the details of memory-mapped files are inherently dependent&#10;     * upon the underlying operating system and are therefore unspecified.  The&#10;     * behavior of this method when the requested region is not completely&#10;     * contained within this channel's file is unspecified.  Whether changes&#10;     * made to the content or size of the underlying file, by this program or&#10;     * another, are propagated to the buffer is unspecified.  The rate at which&#10;     * changes to the buffer are propagated to the file is unspecified.&#10;     *&#10;     * <p> For most operating systems, mapping a file into memory is more&#10;     * expensive than reading or writing a few tens of kilobytes of data via&#10;     * the usual {@link #read read} and {@link #write write} methods.  From the&#10;     * standpoint of performance it is generally only worth mapping relatively&#10;     * large files into memory.  </p>&#10;     *&#10;     * @param  mode&#10;     *         One of the constants {@link MapMode#READ_ONLY READ_ONLY}, {@link&#10;     *         MapMode#READ_WRITE READ_WRITE}, or {@link MapMode#PRIVATE&#10;     *         PRIVATE} defined in the {@link MapMode} class, according to&#10;     *         whether the file is to be mapped read-only, read/write, or&#10;     *         privately (copy-on-write), respectively&#10;     *&#10;     * @param  position&#10;     *         The position within the file at which the mapped region&#10;     *         is to start; must be non-negative&#10;     *&#10;     * @param  size&#10;     *         The size of the region to be mapped; must be non-negative and&#10;     *         no greater than {@link java.lang.Integer#MAX_VALUE}&#10;     *&#10;     * @return  The mapped byte buffer&#10;     *&#10;     * @throws NonReadableChannelException&#10;     *         If the {@code mode} is {@link MapMode#READ_ONLY READ_ONLY} but&#10;     *         this channel was not opened for reading&#10;     *&#10;     * @throws NonWritableChannelException&#10;     *         If the {@code mode} is {@link MapMode#READ_WRITE READ_WRITE} or&#10;     *         {@link MapMode#PRIVATE PRIVATE} but this channel was not opened&#10;     *         for both reading and writing&#10;     *&#10;     * @throws IllegalArgumentException&#10;     *         If the preconditions on the parameters do not hold&#10;     *&#10;     * @throws IOException&#10;     *         If some other I/O error occurs&#10;     *&#10;     * @see java.nio.channels.FileChannel.MapMode&#10;     * @see java.nio.MappedByteBuffer&#10;     "
  ]
  node [
    id 1854
    label "PRIVATE"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1855
    label "READ_ONLY"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1856
    label "write"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1857
    label "PRIVATEPRIVATE"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1858
    label "MapMode"
  ]
  node [
    id 1859
    label "java.nio.ReadOnlyBufferException"
    type "class"
    comment ""
  ]
  node [
    id 1860
    label "public abstract FileLock lock(long position, long size, boolean shared) throws IOException"
    type "method"
    comment "&#10;     * Acquires a lock on the given region of this channel's file.&#10;     *&#10;     * <p> An invocation of this method will block until the region can be&#10;     * locked, this channel is closed, or the invoking thread is interrupted,&#10;     * whichever comes first.&#10;     *&#10;     * <p> If this channel is closed by another thread during an invocation of&#10;     * this method then an {@link AsynchronousCloseException} will be thrown.&#10;     *&#10;     * <p> If the invoking thread is interrupted while waiting to acquire the&#10;     * lock then its interrupt status will be set and a {@link&#10;     * FileLockInterruptionException} will be thrown.  If the invoker's&#10;     * interrupt status is set when this method is invoked then that exception&#10;     * will be thrown immediately; the thread's interrupt status will not be&#10;     * changed.&#10;     *&#10;     * <p> The region specified by the {@code position} and {@code size}&#10;     * parameters need not be contained within, or even overlap, the actual&#10;     * underlying file.  Lock regions are fixed in size; if a locked region&#10;     * initially contains the end of the file and the file grows beyond the&#10;     * region then the new portion of the file will not be covered by the lock.&#10;     * If a file is expected to grow in size and a lock on the entire file is&#10;     * required then a region starting at zero, and no smaller than the&#10;     * expected maximum size of the file, should be locked.  The zero-argument&#10;     * {@link #lock()} method simply locks a region of size {@link&#10;     * Long#MAX_VALUE}.&#10;     *&#10;     * <p> Some operating systems do not support shared locks, in which case a&#10;     * request for a shared lock is automatically converted into a request for&#10;     * an exclusive lock.  Whether the newly-acquired lock is shared or&#10;     * exclusive may be tested by invoking the resulting lock object's {@link&#10;     * FileLock#isShared() isShared} method.&#10;     *&#10;     * <p> File locks are held on behalf of the entire Java virtual machine.&#10;     * They are not suitable for controlling access to a file by multiple&#10;     * threads within the same virtual machine.  </p>&#10;     *&#10;     * @param  position&#10;     *         The position at which the locked region is to start; must be&#10;     *         non-negative&#10;     *&#10;     * @param  size&#10;     *         The size of the locked region; must be non-negative, and the sum&#10;     *         {@code position}&#38;nbsp;+&#38;nbsp;{@code size} must be non-negative&#10;     *&#10;     * @param  shared&#10;     *         {@code true} to request a shared lock, in which case this&#10;     *         channel must be open for reading (and possibly writing);&#10;     *         {@code false} to request an exclusive lock, in which case this&#10;     *         channel must be open for writing (and possibly reading)&#10;     *&#10;     * @return  A lock object representing the newly-acquired lock&#10;     *&#10;     * @throws  IllegalArgumentException&#10;     *          If the preconditions on the parameters do not hold&#10;     *&#10;     * @throws  ClosedChannelException&#10;     *          If this channel is closed&#10;     *&#10;     * @throws  AsynchronousCloseException&#10;     *          If another thread closes this channel while the invoking&#10;     *          thread is blocked in this method&#10;     *&#10;     * @throws  FileLockInterruptionException&#10;     *          If the invoking thread is interrupted while blocked in this&#10;     *          method&#10;     *&#10;     * @throws  OverlappingFileLockException&#10;     *          If a lock that overlaps the requested region is already held by&#10;     *          this Java virtual machine, or if another thread is already&#10;     *          blocked in this method and is attempting to lock an overlapping&#10;     *          region&#10;     *&#10;     * @throws  NonReadableChannelException&#10;     *          If {@code shared} is {@code true} this channel was not&#10;     *          opened for reading&#10;     *&#10;     * @throws  NonWritableChannelException&#10;     *          If {@code shared} is {@code false} but this channel was not&#10;     *          opened for writing&#10;     *&#10;     * @throws  IOException&#10;     *          If some other I/O error occurs&#10;     *&#10;     * @see     #lock()&#10;     * @see     #tryLock()&#10;     * @see     #tryLock(long,long,boolean)&#10;     "
  ]
  node [
    id 1861
    label "java.nio.channels.FileLockInterruptionException"
    type "class"
    comment ""
  ]
  node [
    id 1862
    label "isShared()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1863
    label "java.nio.channels.FileLock"
    type "class"
    comment ""
  ]
  node [
    id 1864
    label "public final FileChannel channel()"
    type "method"
    comment "&#10;     * Returns the file channel upon whose file this lock was acquired.&#10;     *&#10;     * <p> This method has been superseded by the {@link #acquiredBy acquiredBy}&#10;     * method.&#10;     *&#10;     * @return  The file channel, or {@code null} if the file lock was not&#10;     *          acquired by a file channel.&#10;     "
  ]
  node [
    id 1865
    label "acquiredBy"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1866
    label "public Channel acquiredBy()"
    type "method"
    comment "&#10;     * Returns the channel upon whose file this lock was acquired.&#10;     *&#10;     * @return  The channel upon whose file this lock was acquired.&#10;     *&#10;     * @since 1.7&#10;     "
  ]
  node [
    id 1867
    label "public final long position()"
    type "method"
    comment "&#10;     * Returns the position within the file of the first byte of the locked&#10;     * region.&#10;     *&#10;     * <p> A locked region need not be contained within, or even overlap, the&#10;     * actual underlying file, so the value returned by this method may exceed&#10;     * the file's current size.  </p>&#10;     *&#10;     * @return  The position&#10;     "
  ]
  node [
    id 1868
    label "public final long size()"
    type "method"
    comment "&#10;     * Returns the size of the locked region in bytes.&#10;     *&#10;     * <p> A locked region need not be contained within, or even overlap, the&#10;     * actual underlying file, so the value returned by this method may exceed&#10;     * the file's current size.  </p>&#10;     *&#10;     * @return  The size of the locked region&#10;     "
  ]
  node [
    id 1869
    label "public final boolean isShared()"
    type "method"
    comment "&#10;     * Tells whether this lock is shared.&#10;     *&#10;     * @return {@code true} if lock is shared,&#10;     *         {@code false} if it is exclusive&#10;     "
  ]
  node [
    id 1870
    label "public final boolean overlaps(long position, long size)"
    type "method"
    comment "&#10;     * Tells whether or not this lock overlaps the given lock range.&#10;     *&#10;     * @param   position&#10;     *          The starting position of the lock range&#10;     * @param   size&#10;     *          The size of the lock range&#10;     *&#10;     * @return  {@code true} if, and only if, this lock and the given lock&#10;     *          range overlap by at least one byte&#10;     "
  ]
  node [
    id 1871
    label "public abstract void release() throws IOException"
    type "method"
    comment "&#10;     * Releases this lock.&#10;     *&#10;     * <p> If this lock object is valid then invoking this method releases the&#10;     * lock and renders the object invalid.  If this lock object is invalid&#10;     * then invoking this method has no effect.  </p>&#10;     *&#10;     * @throws  ClosedChannelException&#10;     *          If the channel that was used to acquire this lock&#10;     *          is no longer open&#10;     *&#10;     * @throws  IOException&#10;     *          If an I/O error occurs&#10;     "
  ]
  node [
    id 1872
    label "public final void close() throws IOException"
    type "method"
    comment "&#10;     * This method invokes the {@link #release} method. It was added&#10;     * to the class so that it could be used in conjunction with the&#10;     * automatic resource management block construct.&#10;     *&#10;     * @since 1.7&#10;     "
  ]
  node [
    id 1873
    label "release"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1874
    label "lock()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1875
    label "public final FileLock lock() throws IOException"
    type "method"
    comment "&#10;     * Acquires an exclusive lock on this channel's file.&#10;     *&#10;     * <p> An invocation of this method of the form {@code fc.lock()} behaves&#10;     * in exactly the same way as the invocation&#10;     *&#10;     * <pre>&#10;     *     fc.{@link #lock(long,long,boolean) lock}(0L, Long.MAX_VALUE, false) </pre>&#10;     *&#10;     * @return  A lock object representing the newly-acquired lock&#10;     *&#10;     * @throws  ClosedChannelException&#10;     *          If this channel is closed&#10;     *&#10;     * @throws  AsynchronousCloseException&#10;     *          If another thread closes this channel while the invoking&#10;     *          thread is blocked in this method&#10;     *&#10;     * @throws  FileLockInterruptionException&#10;     *          If the invoking thread is interrupted while blocked in this&#10;     *          method&#10;     *&#10;     * @throws  OverlappingFileLockException&#10;     *          If a lock that overlaps the requested region is already held by&#10;     *          this Java virtual machine, or if another thread is already&#10;     *          blocked in this method and is attempting to lock an overlapping&#10;     *          region of the same file&#10;     *&#10;     * @throws  NonWritableChannelException&#10;     *          If this channel was not opened for writing&#10;     *&#10;     * @throws  IOException&#10;     *          If some other I/O error occurs&#10;     *&#10;     * @see     #lock(long,long,boolean)&#10;     * @see     #tryLock()&#10;     * @see     #tryLock(long,long,boolean)&#10;     "
  ]
  node [
    id 1876
    label "lock(long"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1877
    label "public abstract FileLock tryLock(long position, long size, boolean shared) throws IOException"
    type "method"
    comment "&#10;     * Attempts to acquire a lock on the given region of this channel's file.&#10;     *&#10;     * <p> This method does not block.  An invocation always returns&#10;     * immediately, either having acquired a lock on the requested region or&#10;     * having failed to do so.  If it fails to acquire a lock because an&#10;     * overlapping lock is held by another program then it returns&#10;     * {@code null}.  If it fails to acquire a lock for any other reason then&#10;     * an appropriate exception is thrown.&#10;     *&#10;     * <p> The region specified by the {@code position} and {@code size}&#10;     * parameters need not be contained within, or even overlap, the actual&#10;     * underlying file.  Lock regions are fixed in size; if a locked region&#10;     * initially contains the end of the file and the file grows beyond the&#10;     * region then the new portion of the file will not be covered by the lock.&#10;     * If a file is expected to grow in size and a lock on the entire file is&#10;     * required then a region starting at zero, and no smaller than the&#10;     * expected maximum size of the file, should be locked.  The zero-argument&#10;     * {@link #tryLock()} method simply locks a region of size {@link&#10;     * Long#MAX_VALUE}.&#10;     *&#10;     * <p> Some operating systems do not support shared locks, in which case a&#10;     * request for a shared lock is automatically converted into a request for&#10;     * an exclusive lock.  Whether the newly-acquired lock is shared or&#10;     * exclusive may be tested by invoking the resulting lock object's {@link&#10;     * FileLock#isShared() isShared} method.&#10;     *&#10;     * <p> File locks are held on behalf of the entire Java virtual machine.&#10;     * They are not suitable for controlling access to a file by multiple&#10;     * threads within the same virtual machine.  </p>&#10;     *&#10;     * @param  position&#10;     *         The position at which the locked region is to start; must be&#10;     *         non-negative&#10;     *&#10;     * @param  size&#10;     *         The size of the locked region; must be non-negative, and the sum&#10;     *         {@code position}&#38;nbsp;+&#38;nbsp;{@code size} must be non-negative&#10;     *&#10;     * @param  shared&#10;     *         {@code true} to request a shared lock,&#10;     *         {@code false} to request an exclusive lock&#10;     *&#10;     * @return  A lock object representing the newly-acquired lock,&#10;     *          or {@code null} if the lock could not be acquired&#10;     *          because another program holds an overlapping lock&#10;     *&#10;     * @throws  IllegalArgumentException&#10;     *          If the preconditions on the parameters do not hold&#10;     *&#10;     * @throws  ClosedChannelException&#10;     *          If this channel is closed&#10;     *&#10;     * @throws  OverlappingFileLockException&#10;     *          If a lock that overlaps the requested region is already held by&#10;     *          this Java virtual machine, or if another thread is already&#10;     *          blocked in this method and is attempting to lock an overlapping&#10;     *          region of the same file&#10;     *&#10;     * @throws  IOException&#10;     *          If some other I/O error occurs&#10;     *&#10;     * @see     #lock()&#10;     * @see     #lock(long,long,boolean)&#10;     * @see     #tryLock()&#10;     "
  ]
  node [
    id 1878
    label "tryLock()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1879
    label "public final FileLock tryLock() throws IOException"
    type "method"
    comment "&#10;     * Attempts to acquire an exclusive lock on this channel's file.&#10;     *&#10;     * <p> An invocation of this method of the form {@code fc.tryLock()}&#10;     * behaves in exactly the same way as the invocation&#10;     *&#10;     * <pre>&#10;     *     fc.{@link #tryLock(long,long,boolean) tryLock}(0L, Long.MAX_VALUE, false) </pre>&#10;     *&#10;     * @return  A lock object representing the newly-acquired lock,&#10;     *          or {@code null} if the lock could not be acquired&#10;     *          because another program holds an overlapping lock&#10;     *&#10;     * @throws  ClosedChannelException&#10;     *          If this channel is closed&#10;     *&#10;     * @throws  OverlappingFileLockException&#10;     *          If a lock that overlaps the requested region is already held by&#10;     *          this Java virtual machine, or if another thread is already&#10;     *          blocked in this method and is attempting to lock an overlapping&#10;     *          region&#10;     *&#10;     * @throws  IOException&#10;     *          If some other I/O error occurs&#10;     *&#10;     * @see     #lock()&#10;     * @see     #lock(long,long,boolean)&#10;     * @see     #tryLock(long,long,boolean)&#10;     "
  ]
  node [
    id 1880
    label "tryLock(long"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1881
    label "public static SeekableByteChannel newByteChannel(Path path, OpenOption... options) throws IOException"
    type "method"
    comment "&#10;     * Opens or creates a file, returning a seekable byte channel to access the&#10;     * file.&#10;     *&#10;     * <p> This method opens or creates a file in exactly the manner specified&#10;     * by the {@link #newByteChannel(Path,Set,FileAttribute[]) newByteChannel}&#10;     * method.&#10;     *&#10;     * @param   path&#10;     *          the path to the file to open or create&#10;     * @param   options&#10;     *          options specifying how the file is opened&#10;     *&#10;     * @return  a new seekable byte channel&#10;     *&#10;     * @throws  IllegalArgumentException&#10;     *          if the set contains an invalid combination of options&#10;     * @throws  UnsupportedOperationException&#10;     *          if an unsupported open option is specified&#10;     * @throws  FileAlreadyExistsException&#10;     *          if a file of that name already exists and the {@link&#10;     *          StandardOpenOption#CREATE_NEW CREATE_NEW} option is specified&#10;     *          <i>(optional specific exception)</i>&#10;     * @throws  IOException&#10;     *          if an I/O error occurs&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager is&#10;     *          installed, the {@link SecurityManager#checkRead(String) checkRead}&#10;     *          method is invoked to check read access to the path if the file is&#10;     *          opened for reading. The {@link SecurityManager#checkWrite(String)&#10;     *          checkWrite} method is invoked to check write access to the path&#10;     *          if the file is opened for writing. The {@link&#10;     *          SecurityManager#checkDelete(String) checkDelete} method is&#10;     *          invoked to check delete access if the file is opened with the&#10;     *          {@code DELETE_ON_CLOSE} option.&#10;     *&#10;     * @see java.nio.channels.FileChannel#open(Path,OpenOption[])&#10;     "
  ]
  node [
    id 1882
    label "public static DirectoryStream<Path> newDirectoryStream(Path dir) throws IOException"
    type "method"
    comment "&#10;     * Opens a directory, returning a {@link DirectoryStream} to iterate over&#10;     * all entries in the directory. The elements returned by the directory&#10;     * stream's {@link DirectoryStream#iterator iterator} are of type {@code&#10;     * Path}, each one representing an entry in the directory. The {@code Path}&#10;     * objects are obtained as if by {@link Path#resolve(Path) resolving} the&#10;     * name of the directory entry against {@code dir}.&#10;     *&#10;     * <p> When not using the try-with-resources construct, then directory&#10;     * stream's {@code close} method should be invoked after iteration is&#10;     * completed so as to free any resources held for the open directory.&#10;     *&#10;     * <p> When an implementation supports operations on entries in the&#10;     * directory that execute in a race-free manner then the returned directory&#10;     * stream is a {@link SecureDirectoryStream}.&#10;     *&#10;     * @param   dir&#10;     *          the path to the directory&#10;     *&#10;     * @return  a new and open {@code DirectoryStream} object&#10;     *&#10;     * @throws  NotDirectoryException&#10;     *          if the file could not otherwise be opened because it is not&#10;     *          a directory <i>(optional specific exception)</i>&#10;     * @throws  IOException&#10;     *          if an I/O error occurs&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager is&#10;     *          installed, the {@link SecurityManager#checkRead(String) checkRead}&#10;     *          method is invoked to check read access to the directory.&#10;     "
  ]
  node [
    id 1883
    label "java.nio.file.SecureDirectoryStream"
    type "class"
    comment ""
  ]
  node [
    id 1884
    label " SecureDirectoryStream<T> newDirectoryStream(T path, LinkOption... options) throws IOException"
    type "method"
    comment "&#10;     * Opens the directory identified by the given path, returning a {@code&#10;     * SecureDirectoryStream} to iterate over the entries in the directory.&#10;     *&#10;     * <p> This method works in exactly the manner specified by the {@link&#10;     * Files#newDirectoryStream(Path) newDirectoryStream} method for the case that&#10;     * the {@code path} parameter is an {@link Path#isAbsolute absolute} path.&#10;     * When the parameter is a relative path then the directory to open is&#10;     * relative to this open directory. The {@link&#10;     * LinkOption#NOFOLLOW_LINKS NOFOLLOW_LINKS} option may be used to&#10;     * ensure that this method fails if the file is a symbolic link.&#10;     *&#10;     * <p> The new directory stream, once created, is not dependent upon the&#10;     * directory stream used to create it. Closing this directory stream has no&#10;     * effect upon newly created directory stream.&#10;     *&#10;     * @param   path&#10;     *          the path to the directory to open&#10;     * @param   options&#10;     *          options indicating how symbolic links are handled&#10;     *&#10;     * @return  a new and open {@code SecureDirectoryStream} object&#10;     *&#10;     * @throws  ClosedDirectoryStreamException&#10;     *          if the directory stream is closed&#10;     * @throws  NotDirectoryException&#10;     *          if the file could not otherwise be opened because it is not&#10;     *          a directory <i>(optional specific exception)</i>&#10;     * @throws  IOException&#10;     *          if an I/O error occurs&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager is&#10;     *          installed, the {@link SecurityManager#checkRead(String) checkRead}&#10;     *          method is invoked to check read access to the directory.&#10;     "
  ]
  node [
    id 1885
    label "NOFOLLOW_LINKS"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1886
    label " SeekableByteChannel newByteChannel(T path, Set<? extends OpenOption> options, FileAttribute<?>... attrs) throws IOException"
    type "method"
    comment "&#10;     * Opens or creates a file in this directory, returning a seekable byte&#10;     * channel to access the file.&#10;     *&#10;     * <p> This method works in exactly the manner specified by the {@link&#10;     * Files#newByteChannel Files.newByteChannel} method for the&#10;     * case that the {@code path} parameter is an {@link Path#isAbsolute absolute}&#10;     * path. When the parameter is a relative path then the file to open or&#10;     * create is relative to this open directory. In addition to the options&#10;     * defined by the {@code Files.newByteChannel} method, the {@link&#10;     * LinkOption#NOFOLLOW_LINKS NOFOLLOW_LINKS} option may be used to&#10;     * ensure that this method fails if the file is a symbolic link.&#10;     *&#10;     * <p> The channel, once created, is not dependent upon the directory stream&#10;     * used to create it. Closing this directory stream has no effect upon the&#10;     * channel.&#10;     *&#10;     * @param   path&#10;     *          the path of the file to open or create&#10;     * @param   options&#10;     *          options specifying how the file is opened&#10;     * @param   attrs&#10;     *          an optional list of attributes to set atomically when creating&#10;     *          the file&#10;     *&#10;     * @return  the seekable byte channel&#10;     *&#10;     * @throws  ClosedDirectoryStreamException&#10;     *          if the directory stream is closed&#10;     * @throws  IllegalArgumentException&#10;     *          if the set contains an invalid combination of options&#10;     * @throws  UnsupportedOperationException&#10;     *          if an unsupported open option is specified or the array contains&#10;     *          attributes that cannot be set atomically when creating the file&#10;     * @throws  FileAlreadyExistsException&#10;     *          if a file of that name already exists and the {@link&#10;     *          StandardOpenOption#CREATE_NEW CREATE_NEW} option is specified&#10;     *          <i>(optional specific exception)</i>&#10;     * @throws  IOException&#10;     *          if an I/O error occurs&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager is&#10;     *          installed, the {@link SecurityManager#checkRead(String) checkRead}&#10;     *          method is invoked to check read access to the path if the file&#10;     *          is opened for reading. The {@link SecurityManager#checkWrite(String)&#10;     *          checkWrite} method is invoked to check write access to the path&#10;     *          if the file is opened for writing.&#10;     "
  ]
  node [
    id 1887
    label " void deleteFile(T path) throws IOException"
    type "method"
    comment "&#10;     * Deletes a file.&#10;     *&#10;     * <p> Unlike the {@link Files#delete delete()} method, this method does&#10;     * not first examine the file to determine if the file is a directory.&#10;     * Whether a directory is deleted by this method is system dependent and&#10;     * therefore not specified. If the file is a symbolic link, then the link&#10;     * itself, not the final target of the link, is deleted. When the&#10;     * parameter is a relative path then the file to delete is relative to&#10;     * this open directory.&#10;     *&#10;     * @param   path&#10;     *          the path of the file to delete&#10;     *&#10;     * @throws  ClosedDirectoryStreamException&#10;     *          if the directory stream is closed&#10;     * @throws  NoSuchFileException&#10;     *          if the file does not exist <i>(optional specific exception)</i>&#10;     * @throws  IOException&#10;     *          if an I/O error occurs&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager is&#10;     *          installed, the {@link SecurityManager#checkDelete(String) checkDelete}&#10;     *          method is invoked to check delete access to the file&#10;     "
  ]
  node [
    id 1888
    label " void deleteDirectory(T path) throws IOException"
    type "method"
    comment "&#10;     * Deletes a directory.&#10;     *&#10;     * <p> Unlike the {@link Files#delete delete()} method, this method&#10;     * does not first examine the file to determine if the file is a directory.&#10;     * Whether non-directories are deleted by this method is system dependent and&#10;     * therefore not specified. When the parameter is a relative path then the&#10;     * directory to delete is relative to this open directory.&#10;     *&#10;     * @param   path&#10;     *          the path of the directory to delete&#10;     *&#10;     * @throws  ClosedDirectoryStreamException&#10;     *          if the directory stream is closed&#10;     * @throws  NoSuchFileException&#10;     *          if the directory does not exist <i>(optional specific exception)</i>&#10;     * @throws  DirectoryNotEmptyException&#10;     *          if the directory could not otherwise be deleted because it is&#10;     *          not empty <i>(optional specific exception)</i>&#10;     * @throws  IOException&#10;     *          if an I/O error occurs&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager is&#10;     *          installed, the {@link SecurityManager#checkDelete(String) checkDelete}&#10;     *          method is invoked to check delete access to the directory&#10;     "
  ]
  node [
    id 1889
    label " void move(T srcpath, SecureDirectoryStream<T> targetdir, T targetpath) throws IOException"
    type "method"
    comment "&#10;     * Move a file from this directory to another directory.&#10;     *&#10;     * <p> This method works in a similar manner to {@link Files#move move}&#10;     * method when the {@link StandardCopyOption#ATOMIC_MOVE ATOMIC_MOVE} option&#10;     * is specified. That is, this method moves a file as an atomic file system&#10;     * operation. If the {@code srcpath} parameter is an {@link Path#isAbsolute&#10;     * absolute} path then it locates the source file. If the parameter is a&#10;     * relative path then it is located relative to this open directory. If&#10;     * the {@code targetpath} parameter is absolute then it locates the target&#10;     * file (the {@code targetdir} parameter is ignored). If the parameter is&#10;     * a relative path it is located relative to the open directory identified&#10;     * by the {@code targetdir} parameter. In all cases, if the target file&#10;     * exists then it is implementation specific if it is replaced or this&#10;     * method fails.&#10;     *&#10;     * @param   srcpath&#10;     *          the name of the file to move&#10;     * @param   targetdir&#10;     *          the destination directory&#10;     * @param   targetpath&#10;     *          the name to give the file in the destination directory&#10;     *&#10;     * @throws  ClosedDirectoryStreamException&#10;     *          if this or the target directory stream is closed&#10;     * @throws  FileAlreadyExistsException&#10;     *          if the file already exists in the target directory and cannot&#10;     *          be replaced <i>(optional specific exception)</i>&#10;     * @throws  AtomicMoveNotSupportedException&#10;     *          if the file cannot be moved as an atomic file system operation&#10;     * @throws  IOException&#10;     *          if an I/O error occurs&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager is&#10;     *          installed, the {@link SecurityManager#checkWrite(String) checkWrite}&#10;     *          method is invoked to check write access to both the source and&#10;     *          target file.&#10;     "
  ]
  node [
    id 1890
    label "ATOMIC_MOVE"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1891
    label " V getFileAttributeView(Class<V> type)"
    type "method"
    comment "&#10;     * Returns a new file attribute view to access the file attributes of this&#10;     * directory.&#10;     *&#10;     * <p> The resulting file attribute view can be used to read or update the&#10;     * attributes of this (open) directory. The {@code type} parameter specifies&#10;     * the type of the attribute view and the method returns an instance of that&#10;     * type if supported. Invoking this method to obtain a {@link&#10;     * BasicFileAttributeView} always returns an instance of that class that is&#10;     * bound to this open directory.&#10;     *&#10;     * <p> The state of resulting file attribute view is intimately connected&#10;     * to this directory stream. Once the directory stream is {@link #close closed},&#10;     * then all methods to read or update attributes will throw {@link&#10;     * ClosedDirectoryStreamException ClosedDirectoryStreamException}.&#10;     *&#10;     * @param   <V>&#10;     *          The {@code FileAttributeView} type&#10;     * @param   type&#10;     *          the {@code Class} object corresponding to the file attribute view&#10;     *&#10;     * @return  a new file attribute view of the specified type bound to&#10;     *          this directory stream, or {@code null} if the attribute view&#10;     *          type is not available&#10;     "
  ]
  node [
    id 1892
    label "java.nio.file.ClosedDirectoryStreamException"
    type "class"
    comment ""
  ]
  node [
    id 1893
    label " V getFileAttributeView(T path, Class<V> type, LinkOption... options)"
    type "method"
    comment "&#10;     * Returns a new file attribute view to access the file attributes of a file&#10;     * in this directory.&#10;     *&#10;     * <p> The resulting file attribute view can be used to read or update the&#10;     * attributes of file in this directory. The {@code type} parameter specifies&#10;     * the type of the attribute view and the method returns an instance of that&#10;     * type if supported. Invoking this method to obtain a {@link&#10;     * BasicFileAttributeView} always returns an instance of that class that is&#10;     * bound to the file in the directory.&#10;     *&#10;     * <p> The state of resulting file attribute view is intimately connected&#10;     * to this directory stream. Once the directory stream {@link #close closed},&#10;     * then all methods to read or update attributes will throw {@link&#10;     * ClosedDirectoryStreamException ClosedDirectoryStreamException}. The&#10;     * file is not required to exist at the time that the file attribute view&#10;     * is created but methods to read or update attributes of the file will&#10;     * fail when invoked and the file does not exist.&#10;     *&#10;     * @param   <V>&#10;     *          The {@code FileAttributeView} type&#10;     * @param   path&#10;     *          the path of the file&#10;     * @param   type&#10;     *          the {@code Class} object corresponding to the file attribute view&#10;     * @param   options&#10;     *          options indicating how symbolic links are handled&#10;     *&#10;     * @return  a new file attribute view of the specified type bound to a&#10;     *          this directory stream, or {@code null} if the attribute view&#10;     *          type is not available&#10;     *&#10;     "
  ]
  node [
    id 1894
    label "public static DirectoryStream<Path> newDirectoryStream(Path dir, String glob) throws IOException"
    type "method"
    comment "&#10;     * Opens a directory, returning a {@link DirectoryStream} to iterate over&#10;     * the entries in the directory. The elements returned by the directory&#10;     * stream's {@link DirectoryStream#iterator iterator} are of type {@code&#10;     * Path}, each one representing an entry in the directory. The {@code Path}&#10;     * objects are obtained as if by {@link Path#resolve(Path) resolving} the&#10;     * name of the directory entry against {@code dir}. The entries returned by&#10;     * the iterator are filtered by matching the {@code String} representation&#10;     * of their file names against the given <em>globbing</em> pattern.&#10;     *&#10;     * <p> For example, suppose we want to iterate over the files ending with&#10;     * &#34;.java&#34; in a directory:&#10;     * <pre>&#10;     *     Path dir = ...&#10;     *     try (DirectoryStream&#38;lt;Path&#38;gt; stream = Files.newDirectoryStream(dir, &#34;*.java&#34;)) {&#10;     *         :&#10;     *     }&#10;     * </pre>&#10;     *&#10;     * <p> The globbing pattern is specified by the {@link&#10;     * FileSystem#getPathMatcher getPathMatcher} method.&#10;     *&#10;     * <p> When not using the try-with-resources construct, then directory&#10;     * stream's {@code close} method should be invoked after iteration is&#10;     * completed so as to free any resources held for the open directory.&#10;     *&#10;     * <p> When an implementation supports operations on entries in the&#10;     * directory that execute in a race-free manner then the returned directory&#10;     * stream is a {@link SecureDirectoryStream}.&#10;     *&#10;     * @param   dir&#10;     *          the path to the directory&#10;     * @param   glob&#10;     *          the glob pattern&#10;     *&#10;     * @return  a new and open {@code DirectoryStream} object&#10;     *&#10;     * @throws  java.util.regex.PatternSyntaxException&#10;     *          if the pattern is invalid&#10;     * @throws  NotDirectoryException&#10;     *          if the file could not otherwise be opened because it is not&#10;     *          a directory <i>(optional specific exception)</i>&#10;     * @throws  IOException&#10;     *          if an I/O error occurs&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager is&#10;     *          installed, the {@link SecurityManager#checkRead(String) checkRead}&#10;     *          method is invoked to check read access to the directory.&#10;     "
  ]
  node [
    id 1895
    label "public static DirectoryStream<Path> newDirectoryStream(Path dir, DirectoryStream.Filter<? super Path> filter) throws IOException"
    type "method"
    comment "&#10;     * Opens a directory, returning a {@link DirectoryStream} to iterate over&#10;     * the entries in the directory. The elements returned by the directory&#10;     * stream's {@link DirectoryStream#iterator iterator} are of type {@code&#10;     * Path}, each one representing an entry in the directory. The {@code Path}&#10;     * objects are obtained as if by {@link Path#resolve(Path) resolving} the&#10;     * name of the directory entry against {@code dir}. The entries returned by&#10;     * the iterator are filtered by the given {@link DirectoryStream.Filter&#10;     * filter}.&#10;     *&#10;     * <p> When not using the try-with-resources construct, then directory&#10;     * stream's {@code close} method should be invoked after iteration is&#10;     * completed so as to free any resources held for the open directory.&#10;     *&#10;     * <p> Where the filter terminates due to an uncaught error or runtime&#10;     * exception then it is propagated to the {@link Iterator#hasNext()&#10;     * hasNext} or {@link Iterator#next() next} method. Where an {@code&#10;     * IOException} is thrown, it results in the {@code hasNext} or {@code&#10;     * next} method throwing a {@link DirectoryIteratorException} with the&#10;     * {@code IOException} as the cause.&#10;     *&#10;     * <p> When an implementation supports operations on entries in the&#10;     * directory that execute in a race-free manner then the returned directory&#10;     * stream is a {@link SecureDirectoryStream}.&#10;     *&#10;     * <p> <b>Usage Example:</b>&#10;     * Suppose we want to iterate over the files in a directory that are&#10;     * larger than 8K.&#10;     * <pre>&#10;     *     DirectoryStream.Filter&#38;lt;Path&#38;gt; filter = new DirectoryStream.Filter&#38;lt;Path&#38;gt;() {&#10;     *         public boolean accept(Path file) throws IOException {&#10;     *             return (Files.size(file) &#38;gt; 8192L);&#10;     *         }&#10;     *     };&#10;     *     Path dir = ...&#10;     *     try (DirectoryStream&#38;lt;Path&#38;gt; stream = Files.newDirectoryStream(dir, filter)) {&#10;     *         :&#10;     *     }&#10;     * </pre>&#10;     *&#10;     * @param   dir&#10;     *          the path to the directory&#10;     * @param   filter&#10;     *          the directory stream filter&#10;     *&#10;     * @return  a new and open {@code DirectoryStream} object&#10;     *&#10;     * @throws  NotDirectoryException&#10;     *          if the file could not otherwise be opened because it is not&#10;     *          a directory <i>(optional specific exception)</i>&#10;     * @throws  IOException&#10;     *          if an I/O error occurs&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager is&#10;     *          installed, the {@link SecurityManager#checkRead(String) checkRead}&#10;     *          method is invoked to check read access to the directory.&#10;     "
  ]
  node [
    id 1896
    label "DirectoryStream.Filterfilter"
  ]
  node [
    id 1897
    label "java.nio.file.DirectoryIteratorException"
    type "class"
    comment ""
  ]
  node [
    id 1898
    label "public IOException getCause()"
    type "method"
    comment "&#10;     * Returns the cause of this exception.&#10;     *&#10;     * @return  the {@code IOException} which is the cause of this exception.&#10;     "
  ]
  node [
    id 1899
    label "public static Path createFile(Path path, FileAttribute<?>... attrs) throws IOException"
    type "method"
    comment "&#10;     * Creates a new and empty file, failing if the file already exists. The&#10;     * check for the existence of the file and the creation of the new file if&#10;     * it does not exist are a single operation that is atomic with respect to&#10;     * all other filesystem activities that might affect the directory.&#10;     *&#10;     * <p> The {@code attrs} parameter is optional {@link FileAttribute&#10;     * file-attributes} to set atomically when creating the file. Each attribute&#10;     * is identified by its {@link FileAttribute#name name}. If more than one&#10;     * attribute of the same name is included in the array then all but the last&#10;     * occurrence is ignored.&#10;     *&#10;     * @param   path&#10;     *          the path to the file to create&#10;     * @param   attrs&#10;     *          an optional list of file attributes to set atomically when&#10;     *          creating the file&#10;     *&#10;     * @return  the file&#10;     *&#10;     * @throws  UnsupportedOperationException&#10;     *          if the array contains an attribute that cannot be set atomically&#10;     *          when creating the file&#10;     * @throws  FileAlreadyExistsException&#10;     *          if a file of that name already exists&#10;     *          <i>(optional specific exception)</i>&#10;     * @throws  IOException&#10;     *          if an I/O error occurs or the parent directory does not exist&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager is&#10;     *          installed, the {@link SecurityManager#checkWrite(String) checkWrite}&#10;     *          method is invoked to check write access to the new file.&#10;     "
  ]
  node [
    id 1900
    label "public static Path createDirectory(Path dir, FileAttribute<?>... attrs) throws IOException"
    type "method"
    comment "&#10;     * Creates a new directory. The check for the existence of the file and the&#10;     * creation of the directory if it does not exist are a single operation&#10;     * that is atomic with respect to all other filesystem activities that might&#10;     * affect the directory. The {@link #createDirectories createDirectories}&#10;     * method should be used where it is required to create all nonexistent&#10;     * parent directories first.&#10;     *&#10;     * <p> The {@code attrs} parameter is optional {@link FileAttribute&#10;     * file-attributes} to set atomically when creating the directory. Each&#10;     * attribute is identified by its {@link FileAttribute#name name}. If more&#10;     * than one attribute of the same name is included in the array then all but&#10;     * the last occurrence is ignored.&#10;     *&#10;     * @param   dir&#10;     *          the directory to create&#10;     * @param   attrs&#10;     *          an optional list of file attributes to set atomically when&#10;     *          creating the directory&#10;     *&#10;     * @return  the directory&#10;     *&#10;     * @throws  UnsupportedOperationException&#10;     *          if the array contains an attribute that cannot be set atomically&#10;     *          when creating the directory&#10;     * @throws  FileAlreadyExistsException&#10;     *          if a directory could not otherwise be created because a file of&#10;     *          that name already exists <i>(optional specific exception)</i>&#10;     * @throws  IOException&#10;     *          if an I/O error occurs or the parent directory does not exist&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager is&#10;     *          installed, the {@link SecurityManager#checkWrite(String) checkWrite}&#10;     *          method is invoked to check write access to the new directory.&#10;     "
  ]
  node [
    id 1901
    label "createDirectories"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1902
    label "public static Path createDirectories(Path dir, FileAttribute<?>... attrs) throws IOException"
    type "method"
    comment "&#10;     * Creates a directory by creating all nonexistent parent directories first.&#10;     * Unlike the {@link #createDirectory createDirectory} method, an exception&#10;     * is not thrown if the directory could not be created because it already&#10;     * exists.&#10;     *&#10;     * <p> The {@code attrs} parameter is optional {@link FileAttribute&#10;     * file-attributes} to set atomically when creating the nonexistent&#10;     * directories. Each file attribute is identified by its {@link&#10;     * FileAttribute#name name}. If more than one attribute of the same name is&#10;     * included in the array then all but the last occurrence is ignored.&#10;     *&#10;     * <p> If this method fails, then it may do so after creating some, but not&#10;     * all, of the parent directories.&#10;     *&#10;     * @param   dir&#10;     *          the directory to create&#10;     *&#10;     * @param   attrs&#10;     *          an optional list of file attributes to set atomically when&#10;     *          creating the directory&#10;     *&#10;     * @return  the directory&#10;     *&#10;     * @throws  UnsupportedOperationException&#10;     *          if the array contains an attribute that cannot be set atomically&#10;     *          when creating the directory&#10;     * @throws  FileAlreadyExistsException&#10;     *          if {@code dir} exists but is not a directory <i>(optional specific&#10;     *          exception)</i>&#10;     * @throws  IOException&#10;     *          if an I/O error occurs&#10;     * @throws  SecurityException&#10;     *          in the case of the default provider, and a security manager is&#10;     *          installed, the {@link SecurityManager#checkWrite(String) checkWrite}&#10;     *          method is invoked prior to attempting to create a directory and&#10;     *          its {@link SecurityManager#checkRead(String) checkRead} is&#10;     *          invoked for each parent directory that is checked. If {@code&#10;     *          dir} is not an absolute path then its {@link Path#toAbsolutePath&#10;     *          toAbsolutePath} may need to be invoked to get its absolute path.&#10;     *          This may invoke the security manager's {@link&#10;     *          SecurityManager#checkPropertyAccess(String) checkPropertyAccess}&#10;     *          method to check access to the system property {@code user.dir}&#10;     "
  ]
  node [
    id 1903
    label "createDirectory"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1904
    label "checkPropertyAccess(String)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1905
    label "private static void createAndCheckIsDirectory(Path dir, FileAttribute<?>... attrs) throws IOException"
    type "method"
    comment "&#10;     * Used by createDirectories to attempt to create a directory. A no-op&#10;     * if the directory already exists.&#10;     "
  ]
  node [
    id 1906
    label "public static Path createTempFile(Path dir, String prefix, String suffix, FileAttribute<?>... attrs) throws IOException"
    type "method"
    comment "&#10;     * Creates a new empty file in the specified directory, using the given&#10;     * prefix and suffix strings to generate its name. The resulting&#10;     * {@code Path} is associated with the same {@code FileSystem} as the given&#10;     * directory.&#10;     *&#10;     * <p> The details as to how the name of the file is constructed is&#10;     * implementation dependent and therefore not specified. Where possible&#10;     * the {@code prefix} and {@code suffix} are used to construct candidate&#10;     * names in the same manner as the {@link&#10;     * java.io.File#createTempFile(String,String,File)} method.&#10;     *&#10;     * <p> As with the {@code File.createTempFile} methods, this method is only&#10;     * part of a temporary-file facility. Where used as a <em>work files</em>,&#10;     * the resulting file may be opened using the {@link&#10;     * StandardOpenOption#DELETE_ON_CLOSE DELETE_ON_CLOSE} option so that the&#10;     * file is deleted when the appropriate {@code close} method is invoked.&#10;     * Alternatively, a {@link Runtime#addShutdownHook shutdown-hook}, or the&#10;     * {@link java.io.File#deleteOnExit} mechanism may be used to delete the&#10;     * file automatically.&#10;     *&#10;     * <p> The {@code attrs} parameter is optional {@link FileAttribute&#10;     * file-attributes} to set atomically when creating the file. Each attribute&#10;     * is identified by its {@link FileAttribute#name name}. If more than one&#10;     * attribute of the same name is included in the array then all but the last&#10;     * occurrence is ignored. When no file attributes are specified, then the&#10;     * resulting file may have more restrictive access permissions to files&#10;     * created by the {@link java.io.File#createTempFile(String,String,File)}&#10;     * method.&#10;     *&#10;     * @param   dir&#10;     *          the path to directory in which to create the file&#10;     * @param   prefix&#10;     *          the prefix string to be used in generating the file's name;&#10;     *          may be {@code null}&#10;     * @param   suffix&#10;     *          the suffix string to be used in generating the file's name;&#10;     *          may be {@code null}, in which case &#34;{@code .tmp}&#34; is used&#10;     * @param   attrs&#10;     *          an optional list of file attributes to set atomically when&#10;     *          creating the file&#10;     *&#10;     * @return  the path to the newly created file that did not exist before&#10;     *          this method was invoked&#10;     *&#10;     * @throws  IllegalArgumentException&#10;     *          if the prefix or suffix parameters cannot be used to generate&#10;     *          a candidate file name&#10;     * @throws  UnsupportedOperationException&#10;     *          if the array contains an attribute that cannot be set atomically&#10;     *          when creating the directory&#10;     * @throws  IOException&#10;     *          if an I/O error occurs or {@code dir} does not exist&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager is&#10;     *          installed, the {@link SecurityManager#checkWrite(String) checkWrite}&#10;     *          method is invoked to check write access to the file.&#10;     "
  ]
  node [
    id 1907
    label "addShutdownHook"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1908
    label "public static Path createTempFile(String prefix, String suffix, FileAttribute<?>... attrs) throws IOException"
    type "method"
    comment "&#10;     * Creates an empty file in the default temporary-file directory, using&#10;     * the given prefix and suffix to generate its name. The resulting {@code&#10;     * Path} is associated with the default {@code FileSystem}.&#10;     *&#10;     * <p> This method works in exactly the manner specified by the&#10;     * {@link #createTempFile(Path,String,String,FileAttribute[])} method for&#10;     * the case that the {@code dir} parameter is the temporary-file directory.&#10;     *&#10;     * @param   prefix&#10;     *          the prefix string to be used in generating the file's name;&#10;     *          may be {@code null}&#10;     * @param   suffix&#10;     *          the suffix string to be used in generating the file's name;&#10;     *          may be {@code null}, in which case &#34;{@code .tmp}&#34; is used&#10;     * @param   attrs&#10;     *          an optional list of file attributes to set atomically when&#10;     *          creating the file&#10;     *&#10;     * @return  the path to the newly created file that did not exist before&#10;     *          this method was invoked&#10;     *&#10;     * @throws  IllegalArgumentException&#10;     *          if the prefix or suffix parameters cannot be used to generate&#10;     *          a candidate file name&#10;     * @throws  UnsupportedOperationException&#10;     *          if the array contains an attribute that cannot be set atomically&#10;     *          when creating the directory&#10;     * @throws  IOException&#10;     *          if an I/O error occurs or the temporary-file directory does not&#10;     *          exist&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager is&#10;     *          installed, the {@link SecurityManager#checkWrite(String) checkWrite}&#10;     *          method is invoked to check write access to the file.&#10;     "
  ]
  node [
    id 1909
    label "createTempFile(Path"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1910
    label "public static Path createTempDirectory(Path dir, String prefix, FileAttribute<?>... attrs) throws IOException"
    type "method"
    comment "&#10;     * Creates a new directory in the specified directory, using the given&#10;     * prefix to generate its name.  The resulting {@code Path} is associated&#10;     * with the same {@code FileSystem} as the given directory.&#10;     *&#10;     * <p> The details as to how the name of the directory is constructed is&#10;     * implementation dependent and therefore not specified. Where possible&#10;     * the {@code prefix} is used to construct candidate names.&#10;     *&#10;     * <p> As with the {@code createTempFile} methods, this method is only&#10;     * part of a temporary-file facility. A {@link Runtime#addShutdownHook&#10;     * shutdown-hook}, or the {@link java.io.File#deleteOnExit} mechanism may be&#10;     * used to delete the directory automatically.&#10;     *&#10;     * <p> The {@code attrs} parameter is optional {@link FileAttribute&#10;     * file-attributes} to set atomically when creating the directory. Each&#10;     * attribute is identified by its {@link FileAttribute#name name}. If more&#10;     * than one attribute of the same name is included in the array then all but&#10;     * the last occurrence is ignored.&#10;     *&#10;     * @param   dir&#10;     *          the path to directory in which to create the directory&#10;     * @param   prefix&#10;     *          the prefix string to be used in generating the directory's name;&#10;     *          may be {@code null}&#10;     * @param   attrs&#10;     *          an optional list of file attributes to set atomically when&#10;     *          creating the directory&#10;     *&#10;     * @return  the path to the newly created directory that did not exist before&#10;     *          this method was invoked&#10;     *&#10;     * @throws  IllegalArgumentException&#10;     *          if the prefix cannot be used to generate a candidate directory name&#10;     * @throws  UnsupportedOperationException&#10;     *          if the array contains an attribute that cannot be set atomically&#10;     *          when creating the directory&#10;     * @throws  IOException&#10;     *          if an I/O error occurs or {@code dir} does not exist&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager is&#10;     *          installed, the {@link SecurityManager#checkWrite(String) checkWrite}&#10;     *          method is invoked to check write access when creating the&#10;     *          directory.&#10;     "
  ]
  node [
    id 1911
    label "addShutdownHookshutdown"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1912
    label "public static Path createTempDirectory(String prefix, FileAttribute<?>... attrs) throws IOException"
    type "method"
    comment "&#10;     * Creates a new directory in the default temporary-file directory, using&#10;     * the given prefix to generate its name. The resulting {@code Path} is&#10;     * associated with the default {@code FileSystem}.&#10;     *&#10;     * <p> This method works in exactly the manner specified by {@link&#10;     * #createTempDirectory(Path,String,FileAttribute[])} method for the case&#10;     * that the {@code dir} parameter is the temporary-file directory.&#10;     *&#10;     * @param   prefix&#10;     *          the prefix string to be used in generating the directory's name;&#10;     *          may be {@code null}&#10;     * @param   attrs&#10;     *          an optional list of file attributes to set atomically when&#10;     *          creating the directory&#10;     *&#10;     * @return  the path to the newly created directory that did not exist before&#10;     *          this method was invoked&#10;     *&#10;     * @throws  IllegalArgumentException&#10;     *          if the prefix cannot be used to generate a candidate directory name&#10;     * @throws  UnsupportedOperationException&#10;     *          if the array contains an attribute that cannot be set atomically&#10;     *          when creating the directory&#10;     * @throws  IOException&#10;     *          if an I/O error occurs or the temporary-file directory does not&#10;     *          exist&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager is&#10;     *          installed, the {@link SecurityManager#checkWrite(String) checkWrite}&#10;     *          method is invoked to check write access when creating the&#10;     *          directory.&#10;     "
  ]
  node [
    id 1913
    label "createTempDirectory(Path"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1914
    label "public static Path createSymbolicLink(Path link, Path target, FileAttribute<?>... attrs) throws IOException"
    type "method"
    comment "&#10;     * Creates a symbolic link to a target <i>(optional operation)</i>.&#10;     *&#10;     * <p> The {@code target} parameter is the target of the link. It may be an&#10;     * {@link Path#isAbsolute absolute} or relative path and may not exist. When&#10;     * the target is a relative path then file system operations on the resulting&#10;     * link are relative to the path of the link.&#10;     *&#10;     * <p> The {@code attrs} parameter is optional {@link FileAttribute&#10;     * attributes} to set atomically when creating the link. Each attribute is&#10;     * identified by its {@link FileAttribute#name name}. If more than one attribute&#10;     * of the same name is included in the array then all but the last occurrence&#10;     * is ignored.&#10;     *&#10;     * <p> Where symbolic links are supported, but the underlying {@link FileStore}&#10;     * does not support symbolic links, then this may fail with an {@link&#10;     * IOException}. Additionally, some operating systems may require that the&#10;     * Java virtual machine be started with implementation specific privileges to&#10;     * create symbolic links, in which case this method may throw {@code IOException}.&#10;     *&#10;     * @param   link&#10;     *          the path of the symbolic link to create&#10;     * @param   target&#10;     *          the target of the symbolic link&#10;     * @param   attrs&#10;     *          the array of attributes to set atomically when creating the&#10;     *          symbolic link&#10;     *&#10;     * @return  the path to the symbolic link&#10;     *&#10;     * @throws  UnsupportedOperationException&#10;     *          if the implementation does not support symbolic links or the&#10;     *          array contains an attribute that cannot be set atomically when&#10;     *          creating the symbolic link&#10;     * @throws  FileAlreadyExistsException&#10;     *          if a file with the name already exists <i>(optional specific&#10;     *          exception)</i>&#10;     * @throws  IOException&#10;     *          if an I/O error occurs&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager&#10;     *          is installed, it denies {@link LinkPermission}<tt>(&#34;symbolic&#34;)</tt>&#10;     *          or its {@link SecurityManager#checkWrite(String) checkWrite}&#10;     *          method denies write access to the path of the symbolic link.&#10;     "
  ]
  node [
    id 1915
    label "FileAttributeattributes"
  ]
  node [
    id 1916
    label "java.nio.file.LinkPermission"
    type "class"
    comment "&#10; * The {@code Permission} class for link creation operations.&#10; *&#10; * <p> The following table provides a summary description of what the permission&#10; * allows, and discusses the risks of granting code the permission.&#10; *&#10; * <table class=&#34;striped&#34;>&#10; * <caption style=&#34;display:none&#34;>Table shows permission target name, what the permission allows, and associated risks</caption>&#10; * <thead>&#10; * <tr>&#10; * <th scope=&#34;col&#34;>Permission Target Name</th>&#10; * <th scope=&#34;col&#34;>What the Permission Allows</th>&#10; * <th scope=&#34;col&#34;>Risks of Allowing this Permission</th>&#10; * </tr>&#10; * </thead>&#10; * <tbody>&#10; * <tr>&#10; *   <th scope=&#34;row&#34;>hard</th>&#10; *   <td> Ability to add an existing file to a directory. This is sometimes&#10; *   known as creating a link, or hard link. </td>&#10; *   <td> Extreme care should be taken when granting this permission. It allows&#10; *   linking to any file or directory in the file system thus allowing the&#10; *   attacker access to all files. </td>&#10; * </tr>&#10; * <tr>&#10; *   <th scope=&#34;row&#34;>symbolic</th>&#10; *   <td> Ability to create symbolic links. </td>&#10; *   <td> Extreme care should be taken when granting this permission. It allows&#10; *   linking to any file or directory in the file system thus allowing the&#10; *   attacker to access to all files. </td>&#10; * </tr>&#10; * </tbody>&#10; * </table>&#10; *&#10; * @since 1.7&#10; *&#10; * @see Files#createLink&#10; * @see Files#createSymbolicLink&#10; "
  ]
  node [
    id 1917
    label "public static Path createLink(Path link, Path existing) throws IOException"
    type "method"
    comment "&#10;     * Creates a new link (directory entry) for an existing file <i>(optional&#10;     * operation)</i>.&#10;     *&#10;     * <p> The {@code link} parameter locates the directory entry to create.&#10;     * The {@code existing} parameter is the path to an existing file. This&#10;     * method creates a new directory entry for the file so that it can be&#10;     * accessed using {@code link} as the path. On some file systems this is&#10;     * known as creating a &#34;hard link&#34;. Whether the file attributes are&#10;     * maintained for the file or for each directory entry is file system&#10;     * specific and therefore not specified. Typically, a file system requires&#10;     * that all links (directory entries) for a file be on the same file system.&#10;     * Furthermore, on some platforms, the Java virtual machine may require to&#10;     * be started with implementation specific privileges to create hard links&#10;     * or to create links to directories.&#10;     *&#10;     * @param   link&#10;     *          the link (directory entry) to create&#10;     * @param   existing&#10;     *          a path to an existing file&#10;     *&#10;     * @return  the path to the link (directory entry)&#10;     *&#10;     * @throws  UnsupportedOperationException&#10;     *          if the implementation does not support adding an existing file&#10;     *          to a directory&#10;     * @throws  FileAlreadyExistsException&#10;     *          if the entry could not otherwise be created because a file of&#10;     *          that name already exists <i>(optional specific exception)</i>&#10;     * @throws  IOException&#10;     *          if an I/O error occurs&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager&#10;     *          is installed, it denies {@link LinkPermission}<tt>(&#34;hard&#34;)</tt>&#10;     *          or its {@link SecurityManager#checkWrite(String) checkWrite}&#10;     *          method denies write access to either the link or the&#10;     *          existing file.&#10;     "
  ]
  node [
    id 1918
    label "public static void delete(Path path) throws IOException"
    type "method"
    comment "&#10;     * Deletes a file.&#10;     *&#10;     * <p> An implementation may require to examine the file to determine if the&#10;     * file is a directory. Consequently this method may not be atomic with respect&#10;     * to other file system operations.  If the file is a symbolic link then the&#10;     * symbolic link itself, not the final target of the link, is deleted.&#10;     *&#10;     * <p> If the file is a directory then the directory must be empty. In some&#10;     * implementations a directory has entries for special files or links that&#10;     * are created when the directory is created. In such implementations a&#10;     * directory is considered empty when only the special entries exist.&#10;     * This method can be used with the {@link #walkFileTree walkFileTree}&#10;     * method to delete a directory and all entries in the directory, or an&#10;     * entire <i>file-tree</i> where required.&#10;     *&#10;     * <p> On some operating systems it may not be possible to remove a file when&#10;     * it is open and in use by this Java virtual machine or other programs.&#10;     *&#10;     * @param   path&#10;     *          the path to the file to delete&#10;     *&#10;     * @throws  NoSuchFileException&#10;     *          if the file does not exist <i>(optional specific exception)</i>&#10;     * @throws  DirectoryNotEmptyException&#10;     *          if the file is a directory and could not otherwise be deleted&#10;     *          because the directory is not empty <i>(optional specific&#10;     *          exception)</i>&#10;     * @throws  IOException&#10;     *          if an I/O error occurs&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager is&#10;     *          installed, the {@link SecurityManager#checkDelete(String)} method&#10;     *          is invoked to check delete access to the file&#10;     "
  ]
  node [
    id 1919
    label "walkFileTree"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1920
    label "public static boolean deleteIfExists(Path path) throws IOException"
    type "method"
    comment "&#10;     * Deletes a file if it exists.&#10;     *&#10;     * <p> As with the {@link #delete(Path) delete(Path)} method, an&#10;     * implementation may need to examine the file to determine if the file is a&#10;     * directory. Consequently this method may not be atomic with respect to&#10;     * other file system operations.  If the file is a symbolic link, then the&#10;     * symbolic link itself, not the final target of the link, is deleted.&#10;     *&#10;     * <p> If the file is a directory then the directory must be empty. In some&#10;     * implementations a directory has entries for special files or links that&#10;     * are created when the directory is created. In such implementations a&#10;     * directory is considered empty when only the special entries exist.&#10;     *&#10;     * <p> On some operating systems it may not be possible to remove a file when&#10;     * it is open and in use by this Java virtual machine or other programs.&#10;     *&#10;     * @param   path&#10;     *          the path to the file to delete&#10;     *&#10;     * @return  {@code true} if the file was deleted by this method; {@code&#10;     *          false} if the file could not be deleted because it did not&#10;     *          exist&#10;     *&#10;     * @throws  DirectoryNotEmptyException&#10;     *          if the file is a directory and could not otherwise be deleted&#10;     *          because the directory is not empty <i>(optional specific&#10;     *          exception)</i>&#10;     * @throws  IOException&#10;     *          if an I/O error occurs&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager is&#10;     *          installed, the {@link SecurityManager#checkDelete(String)} method&#10;     *          is invoked to check delete access to the file.&#10;     "
  ]
  node [
    id 1921
    label "delete(Path)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1922
    label "public static Path copy(Path source, Path target, CopyOption... options) throws IOException"
    type "method"
    comment "&#10;     * Copy a file to a target file.&#10;     *&#10;     * <p> This method copies a file to the target file with the {@code&#10;     * options} parameter specifying how the copy is performed. By default, the&#10;     * copy fails if the target file already exists or is a symbolic link,&#10;     * except if the source and target are the {@link #isSameFile same} file, in&#10;     * which case the method completes without copying the file. File attributes&#10;     * are not required to be copied to the target file. If symbolic links are&#10;     * supported, and the file is a symbolic link, then the final target of the&#10;     * link is copied. If the file is a directory then it creates an empty&#10;     * directory in the target location (entries in the directory are not&#10;     * copied). This method can be used with the {@link #walkFileTree&#10;     * walkFileTree} method to copy a directory and all entries in the directory,&#10;     * or an entire <i>file-tree</i> where required.&#10;     *&#10;     * <p> The {@code options} parameter may include any of the following:&#10;     *&#10;     * <table border=1 cellpadding=5 summary=&#34;&#34;>&#10;     * <tr> <th>Option</th> <th>Description</th> </tr>&#10;     * <tr>&#10;     *   <td> {@link StandardCopyOption#REPLACE_EXISTING REPLACE_EXISTING} </td>&#10;     *   <td> If the target file exists, then the target file is replaced if it&#10;     *     is not a non-empty directory. If the target file exists and is a&#10;     *     symbolic link, then the symbolic link itself, not the target of&#10;     *     the link, is replaced. </td>&#10;     * </tr>&#10;     * <tr>&#10;     *   <td> {@link StandardCopyOption#COPY_ATTRIBUTES COPY_ATTRIBUTES} </td>&#10;     *   <td> Attempts to copy the file attributes associated with this file to&#10;     *     the target file. The exact file attributes that are copied is platform&#10;     *     and file system dependent and therefore unspecified. Minimally, the&#10;     *     {@link BasicFileAttributes#lastModifiedTime last-modified-time} is&#10;     *     copied to the target file if supported by both the source and target&#10;     *     file stores. Copying of file timestamps may result in precision&#10;     *     loss. </td>&#10;     * </tr>&#10;     * <tr>&#10;     *   <td> {@link LinkOption#NOFOLLOW_LINKS NOFOLLOW_LINKS} </td>&#10;     *   <td> Symbolic links are not followed. If the file is a symbolic link,&#10;     *     then the symbolic link itself, not the target of the link, is copied.&#10;     *     It is implementation specific if file attributes can be copied to the&#10;     *     new link. In other words, the {@code COPY_ATTRIBUTES} option may be&#10;     *     ignored when copying a symbolic link. </td>&#10;     * </tr>&#10;     * </table>&#10;     *&#10;     * <p> An implementation of this interface may support additional&#10;     * implementation specific options.&#10;     *&#10;     * <p> Copying a file is not an atomic operation. If an {@link IOException}&#10;     * is thrown, then it is possible that the target file is incomplete or some&#10;     * of its file attributes have not been copied from the source file. When&#10;     * the {@code REPLACE_EXISTING} option is specified and the target file&#10;     * exists, then the target file is replaced. The check for the existence of&#10;     * the file and the creation of the new file may not be atomic with respect&#10;     * to other file system activities.&#10;     *&#10;     * <p> <b>Usage Example:</b>&#10;     * Suppose we want to copy a file into a directory, giving it the same file&#10;     * name as the source file:&#10;     * <pre>&#10;     *     Path source = ...&#10;     *     Path newdir = ...&#10;     *     Files.copy(source, newdir.resolve(source.getFileName());&#10;     * </pre>&#10;     *&#10;     * @param   source&#10;     *          the path to the file to copy&#10;     * @param   target&#10;     *          the path to the target file (may be associated with a different&#10;     *          provider to the source path)&#10;     * @param   options&#10;     *          options specifying how the copy should be done&#10;     *&#10;     * @return  the path to the target file&#10;     *&#10;     * @throws  UnsupportedOperationException&#10;     *          if the array contains a copy option that is not supported&#10;     * @throws  FileAlreadyExistsException&#10;     *          if the target file exists but cannot be replaced because the&#10;     *          {@code REPLACE_EXISTING} option is not specified <i>(optional&#10;     *          specific exception)</i>&#10;     * @throws  DirectoryNotEmptyException&#10;     *          the {@code REPLACE_EXISTING} option is specified but the file&#10;     *          cannot be replaced because it is a non-empty directory&#10;     *          <i>(optional specific exception)</i>&#10;     * @throws  IOException&#10;     *          if an I/O error occurs&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager is&#10;     *          installed, the {@link SecurityManager#checkRead(String) checkRead}&#10;     *          method is invoked to check read access to the source file, the&#10;     *          {@link SecurityManager#checkWrite(String) checkWrite} is invoked&#10;     *          to check write access to the target file. If a symbolic link is&#10;     *          copied the security manager is invoked to check {@link&#10;     *          LinkPermission}{@code (&#34;symbolic&#34;)}.&#10;     "
  ]
  node [
    id 1923
    label "lastModifiedTime"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1924
    label "java.nio.file.attribute.BasicFileAttributes"
    type "class"
    comment ""
  ]
  node [
    id 1925
    label " FileTime lastModifiedTime()"
    type "method"
    comment "&#10;     * Returns the time of last modification.&#10;     *&#10;     * <p> If the file system implementation does not support a time stamp&#10;     * to indicate the time of last modification then this method returns an&#10;     * implementation specific default value, typically a {@code FileTime}&#10;     * representing the epoch (1970-01-01T00:00:00Z).&#10;     *&#10;     * @return  a {@code FileTime} representing the time the file was last&#10;     *          modified&#10;     "
  ]
  node [
    id 1926
    label " FileTime lastAccessTime()"
    type "method"
    comment "&#10;     * Returns the time of last access.&#10;     *&#10;     * <p> If the file system implementation does not support a time stamp&#10;     * to indicate the time of last access then this method returns&#10;     * an implementation specific default value, typically the {@link&#10;     * #lastModifiedTime() last-modified-time} or a {@code FileTime}&#10;     * representing the epoch (1970-01-01T00:00:00Z).&#10;     *&#10;     * @return  a {@code FileTime} representing the time of last access&#10;     "
  ]
  node [
    id 1927
    label "lastModifiedTime()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1928
    label " FileTime creationTime()"
    type "method"
    comment "&#10;     * Returns the creation time. The creation time is the time that the file&#10;     * was created.&#10;     *&#10;     * <p> If the file system implementation does not support a time stamp&#10;     * to indicate the time when the file was created then this method returns&#10;     * an implementation specific default value, typically the {@link&#10;     * #lastModifiedTime() last-modified-time} or a {@code FileTime}&#10;     * representing the epoch (1970-01-01T00:00:00Z).&#10;     *&#10;     * @return   a {@code FileTime} representing the time the file was created&#10;     "
  ]
  node [
    id 1929
    label " boolean isRegularFile()"
    type "method"
    comment "&#10;     * Tells whether the file is a regular file with opaque content.&#10;     *&#10;     * @return {@code true} if the file is a regular file with opaque content&#10;     "
  ]
  node [
    id 1930
    label " boolean isDirectory()"
    type "method"
    comment "&#10;     * Tells whether the file is a directory.&#10;     *&#10;     * @return {@code true} if the file is a directory&#10;     "
  ]
  node [
    id 1931
    label " boolean isSymbolicLink()"
    type "method"
    comment "&#10;     * Tells whether the file is a symbolic link.&#10;     *&#10;     * @return {@code true} if the file is a symbolic link&#10;     "
  ]
  node [
    id 1932
    label " boolean isOther()"
    type "method"
    comment "&#10;     * Tells whether the file is something other than a regular file, directory,&#10;     * or symbolic link.&#10;     *&#10;     * @return {@code true} if the file something other than a regular file,&#10;     *         directory or symbolic link&#10;     "
  ]
  node [
    id 1933
    label " long size()"
    type "method"
    comment "&#10;     * Returns the size of the file (in bytes). The size may differ from the&#10;     * actual size on the file system due to compression, support for sparse&#10;     * files, or other reasons. The size of files that are not {@link&#10;     * #isRegularFile regular} files is implementation specific and&#10;     * therefore unspecified.&#10;     *&#10;     * @return  the file size, in bytes&#10;     "
  ]
  node [
    id 1934
    label "isRegularFile"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1935
    label " Object fileKey()"
    type "method"
    comment "&#10;     * Returns an object that uniquely identifies the given file, or {@code&#10;     * null} if a file key is not available. On some platforms or file systems&#10;     * it is possible to use an identifier, or a combination of identifiers to&#10;     * uniquely identify a file. Such identifiers are important for operations&#10;     * such as file tree traversal in file systems that support <a&#10;     * href=&#34;../package-summary.html#links&#34;>symbolic links</a> or file systems&#10;     * that allow a file to be an entry in more than one directory. On UNIX file&#10;     * systems, for example, the <em>device ID</em> and <em>inode</em> are&#10;     * commonly used for such purposes.&#10;     *&#10;     * <p> The file key returned by this method can only be guaranteed to be&#10;     * unique if the file system and files remain static. Whether a file system&#10;     * re-uses identifiers after a file is deleted is implementation dependent and&#10;     * therefore unspecified.&#10;     *&#10;     * <p> File keys returned by this method can be compared for equality and are&#10;     * suitable for use in collections. If the file system and files remain static,&#10;     * and two files are the {@link java.nio.file.Files#isSameFile same} with&#10;     * non-{@code null} file keys, then their file keys are equal.&#10;     *&#10;     * @return an object that uniquely identifies the given file, or {@code null}&#10;     *&#10;     * @see java.nio.file.Files#walkFileTree&#10;     "
  ]
  node [
    id 1936
    label "REPLACE_EXISTING"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1937
    label "walkFileTreewalkFileTree"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1938
    label "COPY_ATTRIBUTES"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1939
    label "isSameFile"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1940
    label "public static Path move(Path source, Path target, CopyOption... options) throws IOException"
    type "method"
    comment "&#10;     * Move or rename a file to a target file.&#10;     *&#10;     * <p> By default, this method attempts to move the file to the target&#10;     * file, failing if the target file exists except if the source and&#10;     * target are the {@link #isSameFile same} file, in which case this method&#10;     * has no effect. If the file is a symbolic link then the symbolic link&#10;     * itself, not the target of the link, is moved. This method may be&#10;     * invoked to move an empty directory. In some implementations a directory&#10;     * has entries for special files or links that are created when the&#10;     * directory is created. In such implementations a directory is considered&#10;     * empty when only the special entries exist. When invoked to move a&#10;     * directory that is not empty then the directory is moved if it does not&#10;     * require moving the entries in the directory.  For example, renaming a&#10;     * directory on the same {@link FileStore} will usually not require moving&#10;     * the entries in the directory. When moving a directory requires that its&#10;     * entries be moved then this method fails (by throwing an {@code&#10;     * IOException}). To move a <i>file tree</i> may involve copying rather&#10;     * than moving directories and this can be done using the {@link&#10;     * #copy copy} method in conjunction with the {@link&#10;     * #walkFileTree Files.walkFileTree} utility method.&#10;     *&#10;     * <p> The {@code options} parameter may include any of the following:&#10;     *&#10;     * <table border=1 cellpadding=5 summary=&#34;&#34;>&#10;     * <tr> <th>Option</th> <th>Description</th> </tr>&#10;     * <tr>&#10;     *   <td> {@link StandardCopyOption#REPLACE_EXISTING REPLACE_EXISTING} </td>&#10;     *   <td> If the target file exists, then the target file is replaced if it&#10;     *     is not a non-empty directory. If the target file exists and is a&#10;     *     symbolic link, then the symbolic link itself, not the target of&#10;     *     the link, is replaced. </td>&#10;     * </tr>&#10;     * <tr>&#10;     *   <td> {@link StandardCopyOption#ATOMIC_MOVE ATOMIC_MOVE} </td>&#10;     *   <td> The move is performed as an atomic file system operation and all&#10;     *     other options are ignored. If the target file exists then it is&#10;     *     implementation specific if the existing file is replaced or this method&#10;     *     fails by throwing an {@link IOException}. If the move cannot be&#10;     *     performed as an atomic file system operation then {@link&#10;     *     AtomicMoveNotSupportedException} is thrown. This can arise, for&#10;     *     example, when the target location is on a different {@code FileStore}&#10;     *     and would require that the file be copied, or target location is&#10;     *     associated with a different provider to this object. </td>&#10;     * </table>&#10;     *&#10;     * <p> An implementation of this interface may support additional&#10;     * implementation specific options.&#10;     *&#10;     * <p> Moving a file will copy the {@link&#10;     * BasicFileAttributes#lastModifiedTime last-modified-time} to the target&#10;     * file if supported by both source and target file stores. Copying of file&#10;     * timestamps may result in precision loss. An implementation may also&#10;     * attempt to copy other file attributes but is not required to fail if the&#10;     * file attributes cannot be copied. When the move is performed as&#10;     * a non-atomic operation, and an {@code IOException} is thrown, then the&#10;     * state of the files is not defined. The original file and the target file&#10;     * may both exist, the target file may be incomplete or some of its file&#10;     * attributes may not been copied from the original file.&#10;     *&#10;     * <p> <b>Usage Examples:</b>&#10;     * Suppose we want to rename a file to &#34;newname&#34;, keeping the file in the&#10;     * same directory:&#10;     * <pre>&#10;     *     Path source = ...&#10;     *     Files.move(source, source.resolveSibling(&#34;newname&#34;));&#10;     * </pre>&#10;     * Alternatively, suppose we want to move a file to new directory, keeping&#10;     * the same file name, and replacing any existing file of that name in the&#10;     * directory:&#10;     * <pre>&#10;     *     Path source = ...&#10;     *     Path newdir = ...&#10;     *     Files.move(source, newdir.resolve(source.getFileName()), REPLACE_EXISTING);&#10;     * </pre>&#10;     *&#10;     * @param   source&#10;     *          the path to the file to move&#10;     * @param   target&#10;     *          the path to the target file (may be associated with a different&#10;     *          provider to the source path)&#10;     * @param   options&#10;     *          options specifying how the move should be done&#10;     *&#10;     * @return  the path to the target file&#10;     *&#10;     * @throws  UnsupportedOperationException&#10;     *          if the array contains a copy option that is not supported&#10;     * @throws  FileAlreadyExistsException&#10;     *          if the target file exists but cannot be replaced because the&#10;     *          {@code REPLACE_EXISTING} option is not specified <i>(optional&#10;     *          specific exception)</i>&#10;     * @throws  DirectoryNotEmptyException&#10;     *          the {@code REPLACE_EXISTING} option is specified but the file&#10;     *          cannot be replaced because it is a non-empty directory&#10;     *          <i>(optional specific exception)</i>&#10;     * @throws  AtomicMoveNotSupportedException&#10;     *          if the options array contains the {@code ATOMIC_MOVE} option but&#10;     *          the file cannot be moved as an atomic file system operation.&#10;     * @throws  IOException&#10;     *          if an I/O error occurs&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager is&#10;     *          installed, the {@link SecurityManager#checkWrite(String) checkWrite}&#10;     *          method is invoked to check write access to both the source and&#10;     *          target file.&#10;     "
  ]
  node [
    id 1941
    label "copy"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1942
    label "java.nio.file.AtomicMoveNotSupportedException"
    type "class"
    comment ""
  ]
  node [
    id 1943
    label "public static Path readSymbolicLink(Path link) throws IOException"
    type "method"
    comment "&#10;     * Reads the target of a symbolic link <i>(optional operation)</i>.&#10;     *&#10;     * <p> If the file system supports <a href=&#34;package-summary.html#links&#34;>symbolic&#10;     * links</a> then this method is used to read the target of the link, failing&#10;     * if the file is not a symbolic link. The target of the link need not exist.&#10;     * The returned {@code Path} object will be associated with the same file&#10;     * system as {@code link}.&#10;     *&#10;     * @param   link&#10;     *          the path to the symbolic link&#10;     *&#10;     * @return  a {@code Path} object representing the target of the link&#10;     *&#10;     * @throws  UnsupportedOperationException&#10;     *          if the implementation does not support symbolic links&#10;     * @throws  NotLinkException&#10;     *          if the target could otherwise not be read because the file&#10;     *          is not a symbolic link <i>(optional specific exception)</i>&#10;     * @throws  IOException&#10;     *          if an I/O error occurs&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager&#10;     *          is installed, it checks that {@code FilePermission} has been&#10;     *          granted with the &#34;{@code readlink}&#34; action to read the link.&#10;     "
  ]
  node [
    id 1944
    label "public static FileStore getFileStore(Path path) throws IOException"
    type "method"
    comment "&#10;     * Returns the {@link FileStore} representing the file store where a file&#10;     * is located.&#10;     *&#10;     * <p> Once a reference to the {@code FileStore} is obtained it is&#10;     * implementation specific if operations on the returned {@code FileStore},&#10;     * or {@link FileStoreAttributeView} objects obtained from it, continue&#10;     * to depend on the existence of the file. In particular the behavior is not&#10;     * defined for the case that the file is deleted or moved to a different&#10;     * file store.&#10;     *&#10;     * @param   path&#10;     *          the path to the file&#10;     *&#10;     * @return  the file store where the file is stored&#10;     *&#10;     * @throws  IOException&#10;     *          if an I/O error occurs&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager is&#10;     *          installed, the {@link SecurityManager#checkRead(String) checkRead}&#10;     *          method is invoked to check read access to the file, and in&#10;     *          addition it checks {@link RuntimePermission}<tt>&#10;     *          (&#34;getFileStoreAttributes&#34;)</tt>&#10;     "
  ]
  node [
    id 1945
    label "java.nio.file.attribute.FileStoreAttributeView"
    type "class"
    comment ""
  ]
  node [
    id 1946
    label "public static boolean isSameFile(Path path, Path path2) throws IOException"
    type "method"
    comment "&#10;     * Tests if two paths locate the same file.&#10;     *&#10;     * <p> If both {@code Path} objects are {@link Path#equals(Object) equal}&#10;     * then this method returns {@code true} without checking if the file exists.&#10;     * If the two {@code Path} objects are associated with different providers&#10;     * then this method returns {@code false}. Otherwise, this method checks if&#10;     * both {@code Path} objects locate the same file, and depending on the&#10;     * implementation, may require to open or access both files.&#10;     *&#10;     * <p> If the file system and files remain static, then this method implements&#10;     * an equivalence relation for non-null {@code Paths}.&#10;     * <ul>&#10;     * <li>It is <i>reflexive</i>: for {@code Path} {@code f},&#10;     *     {@code isSameFile(f,f)} should return {@code true}.&#10;     * <li>It is <i>symmetric</i>: for two {@code Paths} {@code f} and {@code g},&#10;     *     {@code isSameFile(f,g)} will equal {@code isSameFile(g,f)}.&#10;     * <li>It is <i>transitive</i>: for three {@code Paths}&#10;     *     {@code f}, {@code g}, and {@code h}, if {@code isSameFile(f,g)} returns&#10;     *     {@code true} and {@code isSameFile(g,h)} returns {@code true}, then&#10;     *     {@code isSameFile(f,h)} will return return {@code true}.&#10;     * </ul>&#10;     *&#10;     * @param   path&#10;     *          one path to the file&#10;     * @param   path2&#10;     *          the other path&#10;     *&#10;     * @return  {@code true} if, and only if, the two paths locate the same file&#10;     *&#10;     * @throws  IOException&#10;     *          if an I/O error occurs&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager is&#10;     *          installed, the {@link SecurityManager#checkRead(String) checkRead}&#10;     *          method is invoked to check read access to both files.&#10;     *&#10;     * @see java.nio.file.attribute.BasicFileAttributes#fileKey&#10;     "
  ]
  node [
    id 1947
    label "public static boolean isHidden(Path path) throws IOException"
    type "method"
    comment "&#10;     * Tells whether or not a file is considered <em>hidden</em>. The exact&#10;     * definition of hidden is platform or provider dependent. On UNIX for&#10;     * example a file is considered to be hidden if its name begins with a&#10;     * period character ('.'). On Windows a file is considered hidden if it&#10;     * isn't a directory and the DOS {@link DosFileAttributes#isHidden hidden}&#10;     * attribute is set.&#10;     *&#10;     * <p> Depending on the implementation this method may require to access&#10;     * the file system to determine if the file is considered hidden.&#10;     *&#10;     * @param   path&#10;     *          the path to the file to test&#10;     *&#10;     * @return  {@code true} if the file is considered hidden&#10;     *&#10;     * @throws  IOException&#10;     *          if an I/O error occurs&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager is&#10;     *          installed, the {@link SecurityManager#checkRead(String) checkRead}&#10;     *          method is invoked to check read access to the file.&#10;     "
  ]
  node [
    id 1948
    label "java.nio.file.attribute.DosFileAttributes"
    type "class"
    comment ""
  ]
  node [
    id 1949
    label " boolean isReadOnly()"
    type "method"
    comment "&#10;     * Returns the value of the read-only attribute.&#10;     *&#10;     * <p> This attribute is often used as a simple access control mechanism&#10;     * to prevent files from being deleted or updated. Whether the file system&#10;     * or platform does any enforcement to prevent <em>read-only</em> files&#10;     * from being updated is implementation specific.&#10;     *&#10;     * @return  the value of the read-only attribute&#10;     "
  ]
  node [
    id 1950
    label " boolean isHidden()"
    type "method"
    comment "&#10;     * Returns the value of the hidden attribute.&#10;     *&#10;     * <p> This attribute is often used to indicate if the file is visible to&#10;     * users.&#10;     *&#10;     * @return  the value of the hidden attribute&#10;     "
  ]
  node [
    id 1951
    label " boolean isArchive()"
    type "method"
    comment "&#10;     * Returns the value of the archive attribute.&#10;     *&#10;     * <p> This attribute is typically used by backup programs.&#10;     *&#10;     * @return  the value of the archive attribute&#10;     "
  ]
  node [
    id 1952
    label " boolean isSystem()"
    type "method"
    comment "&#10;     * Returns the value of the system attribute.&#10;     *&#10;     * <p> This attribute is often used to indicate that the file is a component&#10;     * of the operating system.&#10;     *&#10;     * @return  the value of the system attribute&#10;     "
  ]
  node [
    id 1953
    label "public static String probeContentType(Path path) throws IOException"
    type "method"
    comment "&#10;     * Probes the content type of a file.&#10;     *&#10;     * <p> This method uses the installed {@link FileTypeDetector} implementations&#10;     * to probe the given file to determine its content type. Each file type&#10;     * detector's {@link FileTypeDetector#probeContentType probeContentType} is&#10;     * invoked, in turn, to probe the file type. If the file is recognized then&#10;     * the content type is returned. If the file is not recognized by any of the&#10;     * installed file type detectors then a system-default file type detector is&#10;     * invoked to guess the content type.&#10;     *&#10;     * <p> A given invocation of the Java virtual machine maintains a system-wide&#10;     * list of file type detectors. Installed file type detectors are loaded&#10;     * using the service-provider loading facility defined by the {@link ServiceLoader}&#10;     * class. Installed file type detectors are loaded using the system class&#10;     * loader. If the system class loader cannot be found then the extension class&#10;     * loader is used; If the extension class loader cannot be found then the&#10;     * bootstrap class loader is used. File type detectors are typically installed&#10;     * by placing them in a JAR file on the application class path or in the&#10;     * extension directory, the JAR file contains a provider-configuration file&#10;     * named {@code java.nio.file.spi.FileTypeDetector} in the resource directory&#10;     * {@code META-INF/services}, and the file lists one or more fully-qualified&#10;     * names of concrete subclass of {@code FileTypeDetector } that have a zero&#10;     * argument constructor. If the process of locating or instantiating the&#10;     * installed file type detectors fails then an unspecified error is thrown.&#10;     * The ordering that installed providers are located is implementation&#10;     * specific.&#10;     *&#10;     * <p> The return value of this method is the string form of the value of a&#10;     * Multipurpose Internet Mail Extension (MIME) content type as&#10;     * defined by <a href=&#34;http://www.ietf.org/rfc/rfc2045.txt&#34;><i>RFC&#38;nbsp;2045:&#10;     * Multipurpose Internet Mail Extensions (MIME) Part One: Format of Internet&#10;     * Message Bodies</i></a>. The string is guaranteed to be parsable according&#10;     * to the grammar in the RFC.&#10;     *&#10;     * @param   path&#10;     *          the path to the file to probe&#10;     *&#10;     * @return  The content type of the file, or {@code null} if the content&#10;     *          type cannot be determined&#10;     *&#10;     * @throws  IOException&#10;     *          if an I/O error occurs&#10;     * @throws  SecurityException&#10;     *          If a security manager is installed and it denies an unspecified&#10;     *          permission required by a file type detector implementation.&#10;     "
  ]
  node [
    id 1954
    label "probeContentType"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1955
    label "java.nio.file.spi.FileTypeDetector"
    type "class"
    comment ""
  ]
  node [
    id 1956
    label "public abstract String probeContentType(Path path) throws IOException"
    type "method"
    comment "&#10;     * Probes the given file to guess its content type.&#10;     *&#10;     * <p> The means by which this method determines the file type is highly&#10;     * implementation specific. It may simply examine the file name, it may use&#10;     * a file <a href=&#34;../attribute/package-summary.html&#34;>attribute</a>,&#10;     * or it may examines bytes in the file.&#10;     *&#10;     * <p> The probe result is the string form of the value of a&#10;     * Multipurpose Internet Mail Extension (MIME) content type as&#10;     * defined by <a href=&#34;http://www.ietf.org/rfc/rfc2045.txt&#34;><i>RFC&#38;nbsp;2045:&#10;     * Multipurpose Internet Mail Extensions (MIME) Part One: Format of Internet&#10;     * Message Bodies</i></a>. The string must be parsable according to the&#10;     * grammar in the RFC 2045.&#10;     *&#10;     * @param   path&#10;     *          the path to the file to probe&#10;     *&#10;     * @return  The content type or {@code null} if the file type is not&#10;     *          recognized&#10;     *&#10;     * @throws  IOException&#10;     *          An I/O error occurs&#10;     * @throws  SecurityException&#10;     *          If the implementation requires to access the file, and a&#10;     *          security manager is installed, and it denies an unspecified&#10;     *          permission required by a file system provider implementation.&#10;     *          If the file reference is associated with the default file system&#10;     *          provider then the {@link SecurityManager#checkRead(String)} method&#10;     *          is invoked to check read access to the file.&#10;     *&#10;     * @see java.nio.file.Files#probeContentType&#10;     "
  ]
  node [
    id 1957
    label "java.util.ServiceLoader"
  ]
  node [
    id 1958
    label "public static V getFileAttributeView(Path path, Class<V> type, LinkOption... options)"
    type "method"
    comment "&#10;     * Returns a file attribute view of a given type.&#10;     *&#10;     * <p> A file attribute view provides a read-only or updatable view of a&#10;     * set of file attributes. This method is intended to be used where the file&#10;     * attribute view defines type-safe methods to read or update the file&#10;     * attributes. The {@code type} parameter is the type of the attribute view&#10;     * required and the method returns an instance of that type if supported.&#10;     * The {@link BasicFileAttributeView} type supports access to the basic&#10;     * attributes of a file. Invoking this method to select a file attribute&#10;     * view of that type will always return an instance of that class.&#10;     *&#10;     * <p> The {@code options} array may be used to indicate how symbolic links&#10;     * are handled by the resulting file attribute view for the case that the&#10;     * file is a symbolic link. By default, symbolic links are followed. If the&#10;     * option {@link LinkOption#NOFOLLOW_LINKS NOFOLLOW_LINKS} is present then&#10;     * symbolic links are not followed. This option is ignored by implementations&#10;     * that do not support symbolic links.&#10;     *&#10;     * <p> <b>Usage Example:</b>&#10;     * Suppose we want read or set a file's ACL, if supported:&#10;     * <pre>&#10;     *     Path path = ...&#10;     *     AclFileAttributeView view = Files.getFileAttributeView(path, AclFileAttributeView.class);&#10;     *     if (view != null) {&#10;     *         List&#38;lt;AclEntry&#38;gt; acl = view.getAcl();&#10;     *         :&#10;     *     }&#10;     * </pre>&#10;     *&#10;     * @param   <V>&#10;     *          The {@code FileAttributeView} type&#10;     * @param   path&#10;     *          the path to the file&#10;     * @param   type&#10;     *          the {@code Class} object corresponding to the file attribute view&#10;     * @param   options&#10;     *          options indicating how symbolic links are handled&#10;     *&#10;     * @return  a file attribute view of the specified type, or {@code null} if&#10;     *          the attribute view type is not available&#10;     "
  ]
  node [
    id 1959
    label "java.nio.file.attribute.BasicFileAttributeView"
    type "class"
    comment ""
  ]
  node [
    id 1960
    label " BasicFileAttributes readAttributes() throws IOException"
    type "method"
    comment "&#10;     * Reads the basic file attributes as a bulk operation.&#10;     *&#10;     * <p> It is implementation specific if all file attributes are read as an&#10;     * atomic operation with respect to other file system operations.&#10;     *&#10;     * @return  the file attributes&#10;     *&#10;     * @throws  IOException&#10;     *          if an I/O error occurs&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, a security manager is&#10;     *          installed, its {@link SecurityManager#checkRead(String) checkRead}&#10;     *          method is invoked to check read access to the file&#10;     "
  ]
  node [
    id 1961
    label " void setTimes(FileTime lastModifiedTime, FileTime lastAccessTime, FileTime createTime) throws IOException"
    type "method"
    comment "&#10;     * Updates any or all of the file's last modified time, last access time,&#10;     * and create time attributes.&#10;     *&#10;     * <p> This method updates the file's timestamp attributes. The values are&#10;     * converted to the epoch and precision supported by the file system.&#10;     * Converting from finer to coarser granularities result in precision loss.&#10;     * The behavior of this method when attempting to set a timestamp that is&#10;     * not supported or to a value that is outside the range supported by the&#10;     * underlying file store is not defined. It may or not fail by throwing an&#10;     * {@code IOException}.&#10;     *&#10;     * <p> If any of the {@code lastModifiedTime}, {@code lastAccessTime},&#10;     * or {@code createTime} parameters has the value {@code null} then the&#10;     * corresponding timestamp is not changed. An implementation may require to&#10;     * read the existing values of the file attributes when only some, but not&#10;     * all, of the timestamp attributes are updated. Consequently, this method&#10;     * may not be an atomic operation with respect to other file system&#10;     * operations. Reading and re-writing existing values may also result in&#10;     * precision loss. If all of the {@code lastModifiedTime}, {@code&#10;     * lastAccessTime} and {@code createTime} parameters are {@code null} then&#10;     * this method has no effect.&#10;     *&#10;     * <p> <b>Usage Example:</b>&#10;     * Suppose we want to change a file's last access time.&#10;     * <pre>&#10;     *    Path path = ...&#10;     *    FileTime time = ...&#10;     *    Files.getFileAttributeView(path, BasicFileAttributeView.class).setTimes(null, time, null);&#10;     * </pre>&#10;     *&#10;     * @param   lastModifiedTime&#10;     *          the new last modified time, or {@code null} to not change the&#10;     *          value&#10;     * @param   lastAccessTime&#10;     *          the last access time, or {@code null} to not change the value&#10;     * @param   createTime&#10;     *          the file's create time, or {@code null} to not change the value&#10;     *&#10;     * @throws  IOException&#10;     *          if an I/O error occurs&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, a security manager is&#10;     *          installed, its  {@link SecurityManager#checkWrite(String) checkWrite}&#10;     *          method is invoked to check write access to the file&#10;     *&#10;     * @see java.nio.file.Files#setLastModifiedTime&#10;     "
  ]
  node [
    id 1962
    label "public static A readAttributes(Path path, Class<A> type, LinkOption... options) throws IOException"
    type "method"
    comment "&#10;     * Reads a file's attributes as a bulk operation.&#10;     *&#10;     * <p> The {@code type} parameter is the type of the attributes required&#10;     * and this method returns an instance of that type if supported. All&#10;     * implementations support a basic set of file attributes and so invoking&#10;     * this method with a  {@code type} parameter of {@code&#10;     * BasicFileAttributes.class} will not throw {@code&#10;     * UnsupportedOperationException}.&#10;     *&#10;     * <p> The {@code options} array may be used to indicate how symbolic links&#10;     * are handled for the case that the file is a symbolic link. By default,&#10;     * symbolic links are followed and the file attribute of the final target&#10;     * of the link is read. If the option {@link LinkOption#NOFOLLOW_LINKS&#10;     * NOFOLLOW_LINKS} is present then symbolic links are not followed.&#10;     *&#10;     * <p> It is implementation specific if all file attributes are read as an&#10;     * atomic operation with respect to other file system operations.&#10;     *&#10;     * <p> <b>Usage Example:</b>&#10;     * Suppose we want to read a file's attributes in bulk:&#10;     * <pre>&#10;     *    Path path = ...&#10;     *    BasicFileAttributes attrs = Files.readAttributes(path, BasicFileAttributes.class);&#10;     * </pre>&#10;     * Alternatively, suppose we want to read file's POSIX attributes without&#10;     * following symbolic links:&#10;     * <pre>&#10;     *    PosixFileAttributes attrs = Files.readAttributes(path, PosixFileAttributes.class, NOFOLLOW_LINKS);&#10;     * </pre>&#10;     *&#10;     * @param   <A>&#10;     *          The {@code BasicFileAttributes} type&#10;     * @param   path&#10;     *          the path to the file&#10;     * @param   type&#10;     *          the {@code Class} of the file attributes required&#10;     *          to read&#10;     * @param   options&#10;     *          options indicating how symbolic links are handled&#10;     *&#10;     * @return  the file attributes&#10;     *&#10;     * @throws  UnsupportedOperationException&#10;     *          if an attributes of the given type are not supported&#10;     * @throws  IOException&#10;     *          if an I/O error occurs&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, a security manager is&#10;     *          installed, its {@link SecurityManager#checkRead(String) checkRead}&#10;     *          method is invoked to check read access to the file. If this&#10;     *          method is invoked to read security sensitive attributes then the&#10;     *          security manager may be invoke to check for additional permissions.&#10;     "
  ]
  node [
    id 1963
    label "NOFOLLOW_LINKSNOFOLLOW_LINKS"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1964
    label "public static Path setAttribute(Path path, String attribute, Object value, LinkOption... options) throws IOException"
    type "method"
    comment "&#10;     * Sets the value of a file attribute.&#10;     *&#10;     * <p> The {@code attribute} parameter identifies the attribute to be set&#10;     * and takes the form:&#10;     * <blockquote>&#10;     * [<i>view-name</i><b>:</b>]<i>attribute-name</i>&#10;     * </blockquote>&#10;     * where square brackets [...] delineate an optional component and the&#10;     * character {@code ':'} stands for itself.&#10;     *&#10;     * <p> <i>view-name</i> is the {@link FileAttributeView#name name} of a {@link&#10;     * FileAttributeView} that identifies a set of file attributes. If not&#10;     * specified then it defaults to {@code &#34;basic&#34;}, the name of the file&#10;     * attribute view that identifies the basic set of file attributes common to&#10;     * many file systems. <i>attribute-name</i> is the name of the attribute&#10;     * within the set.&#10;     *&#10;     * <p> The {@code options} array may be used to indicate how symbolic links&#10;     * are handled for the case that the file is a symbolic link. By default,&#10;     * symbolic links are followed and the file attribute of the final target&#10;     * of the link is set. If the option {@link LinkOption#NOFOLLOW_LINKS&#10;     * NOFOLLOW_LINKS} is present then symbolic links are not followed.&#10;     *&#10;     * <p> <b>Usage Example:</b>&#10;     * Suppose we want to set the DOS &#34;hidden&#34; attribute:&#10;     * <pre>&#10;     *    Path path = ...&#10;     *    Files.setAttribute(path, &#34;dos:hidden&#34;, true);&#10;     * </pre>&#10;     *&#10;     * @param   path&#10;     *          the path to the file&#10;     * @param   attribute&#10;     *          the attribute to set&#10;     * @param   value&#10;     *          the attribute value&#10;     * @param   options&#10;     *          options indicating how symbolic links are handled&#10;     *&#10;     * @return  the {@code path} parameter&#10;     *&#10;     * @throws  UnsupportedOperationException&#10;     *          if the attribute view is not available&#10;     * @throws  IllegalArgumentException&#10;     *          if the attribute name is not specified, or is not recognized, or&#10;     *          the attribute value is of the correct type but has an&#10;     *          inappropriate value&#10;     * @throws  ClassCastException&#10;     *          if the attribute value is not of the expected type or is a&#10;     *          collection containing elements that are not of the expected&#10;     *          type&#10;     * @throws  IOException&#10;     *          if an I/O error occurs&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager is&#10;     *          installed, its {@link SecurityManager#checkWrite(String) checkWrite}&#10;     *          method denies write access to the file. If this method is invoked&#10;     *          to set security sensitive attributes then the security manager&#10;     *          may be invoked to check for additional permissions.&#10;     "
  ]
  node [
    id 1965
    label "public static Object getAttribute(Path path, String attribute, LinkOption... options) throws IOException"
    type "method"
    comment "&#10;     * Reads the value of a file attribute.&#10;     *&#10;     * <p> The {@code attribute} parameter identifies the attribute to be read&#10;     * and takes the form:&#10;     * <blockquote>&#10;     * [<i>view-name</i><b>:</b>]<i>attribute-name</i>&#10;     * </blockquote>&#10;     * where square brackets [...] delineate an optional component and the&#10;     * character {@code ':'} stands for itself.&#10;     *&#10;     * <p> <i>view-name</i> is the {@link FileAttributeView#name name} of a {@link&#10;     * FileAttributeView} that identifies a set of file attributes. If not&#10;     * specified then it defaults to {@code &#34;basic&#34;}, the name of the file&#10;     * attribute view that identifies the basic set of file attributes common to&#10;     * many file systems. <i>attribute-name</i> is the name of the attribute.&#10;     *&#10;     * <p> The {@code options} array may be used to indicate how symbolic links&#10;     * are handled for the case that the file is a symbolic link. By default,&#10;     * symbolic links are followed and the file attribute of the final target&#10;     * of the link is read. If the option {@link LinkOption#NOFOLLOW_LINKS&#10;     * NOFOLLOW_LINKS} is present then symbolic links are not followed.&#10;     *&#10;     * <p> <b>Usage Example:</b>&#10;     * Suppose we require the user ID of the file owner on a system that&#10;     * supports a &#34;{@code unix}&#34; view:&#10;     * <pre>&#10;     *    Path path = ...&#10;     *    int uid = (Integer)Files.getAttribute(path, &#34;unix:uid&#34;);&#10;     * </pre>&#10;     *&#10;     * @param   path&#10;     *          the path to the file&#10;     * @param   attribute&#10;     *          the attribute to read&#10;     * @param   options&#10;     *          options indicating how symbolic links are handled&#10;     *&#10;     * @return  the attribute value&#10;     *&#10;     * @throws  UnsupportedOperationException&#10;     *          if the attribute view is not available&#10;     * @throws  IllegalArgumentException&#10;     *          if the attribute name is not specified or is not recognized&#10;     * @throws  IOException&#10;     *          if an I/O error occurs&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager is&#10;     *          installed, its {@link SecurityManager#checkRead(String) checkRead}&#10;     *          method denies read access to the file. If this method is invoked&#10;     *          to read security sensitive attributes then the security manager&#10;     *          may be invoked to check for additional permissions.&#10;     "
  ]
  node [
    id 1966
    label "public static Map<String, Object> readAttributes(Path path, String attributes, LinkOption... options) throws IOException"
    type "method"
    comment "&#10;     * Reads a set of file attributes as a bulk operation.&#10;     *&#10;     * <p> The {@code attributes} parameter identifies the attributes to be read&#10;     * and takes the form:&#10;     * <blockquote>&#10;     * [<i>view-name</i><b>:</b>]<i>attribute-list</i>&#10;     * </blockquote>&#10;     * where square brackets [...] delineate an optional component and the&#10;     * character {@code ':'} stands for itself.&#10;     *&#10;     * <p> <i>view-name</i> is the {@link FileAttributeView#name name} of a {@link&#10;     * FileAttributeView} that identifies a set of file attributes. If not&#10;     * specified then it defaults to {@code &#34;basic&#34;}, the name of the file&#10;     * attribute view that identifies the basic set of file attributes common to&#10;     * many file systems.&#10;     *&#10;     * <p> The <i>attribute-list</i> component is a comma separated list of&#10;     * zero or more names of attributes to read. If the list contains the value&#10;     * {@code &#34;*&#34;} then all attributes are read. Attributes that are not supported&#10;     * are ignored and will not be present in the returned map. It is&#10;     * implementation specific if all attributes are read as an atomic operation&#10;     * with respect to other file system operations.&#10;     *&#10;     * <p> The following examples demonstrate possible values for the {@code&#10;     * attributes} parameter:&#10;     *&#10;     * <blockquote>&#10;     * <table border=&#34;0&#34; summary=&#34;Possible values&#34;>&#10;     * <tr>&#10;     *   <td> {@code &#34;*&#34;} </td>&#10;     *   <td> Read all {@link BasicFileAttributes basic-file-attributes}. </td>&#10;     * </tr>&#10;     * <tr>&#10;     *   <td> {@code &#34;size,lastModifiedTime,lastAccessTime&#34;} </td>&#10;     *   <td> Reads the file size, last modified time, and last access time&#10;     *     attributes. </td>&#10;     * </tr>&#10;     * <tr>&#10;     *   <td> {@code &#34;posix:*&#34;} </td>&#10;     *   <td> Read all {@link PosixFileAttributes POSIX-file-attributes}. </td>&#10;     * </tr>&#10;     * <tr>&#10;     *   <td> {@code &#34;posix:permissions,owner,size&#34;} </td>&#10;     *   <td> Reads the POSX file permissions, owner, and file size. </td>&#10;     * </tr>&#10;     * </table>&#10;     * </blockquote>&#10;     *&#10;     * <p> The {@code options} array may be used to indicate how symbolic links&#10;     * are handled for the case that the file is a symbolic link. By default,&#10;     * symbolic links are followed and the file attribute of the final target&#10;     * of the link is read. If the option {@link LinkOption#NOFOLLOW_LINKS&#10;     * NOFOLLOW_LINKS} is present then symbolic links are not followed.&#10;     *&#10;     * @param   path&#10;     *          the path to the file&#10;     * @param   attributes&#10;     *          the attributes to read&#10;     * @param   options&#10;     *          options indicating how symbolic links are handled&#10;     *&#10;     * @return  a map of the attributes returned; The map's keys are the&#10;     *          attribute names, its values are the attribute values&#10;     *&#10;     * @throws  UnsupportedOperationException&#10;     *          if the attribute view is not available&#10;     * @throws  IllegalArgumentException&#10;     *          if no attributes are specified or an unrecognized attributes is&#10;     *          specified&#10;     * @throws  IOException&#10;     *          if an I/O error occurs&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager is&#10;     *          installed, its {@link SecurityManager#checkRead(String) checkRead}&#10;     *          method denies read access to the file. If this method is invoked&#10;     *          to read security sensitive attributes then the security manager&#10;     *          may be invoke to check for additional permissions.&#10;     "
  ]
  node [
    id 1967
    label "java.nio.file.attribute.PosixFileAttributes"
    type "class"
    comment ""
  ]
  node [
    id 1968
    label " UserPrincipal owner()"
    type "method"
    comment "&#10;     * Returns the owner of the file.&#10;     *&#10;     * @return  the file owner&#10;     *&#10;     * @see PosixFileAttributeView#setOwner&#10;     "
  ]
  node [
    id 1969
    label " GroupPrincipal group()"
    type "method"
    comment "&#10;     * Returns the group owner of the file.&#10;     *&#10;     * @return  the file group owner&#10;     *&#10;     * @see PosixFileAttributeView#setGroup&#10;     "
  ]
  node [
    id 1970
    label " Set<PosixFilePermission> permissions()"
    type "method"
    comment "&#10;     * Returns the permissions of the file. The file permissions are returned&#10;     * as a set of {@link PosixFilePermission} elements. The returned set is a&#10;     * copy of the file permissions and is modifiable. This allows the result&#10;     * to be modified and passed to the {@link PosixFileAttributeView#setPermissions&#10;     * setPermissions} method to update the file's permissions.&#10;     *&#10;     * @return  the file permissions&#10;     *&#10;     * @see PosixFileAttributeView#setPermissions&#10;     "
  ]
  node [
    id 1971
    label "java.nio.file.attribute.PosixFilePermission"
  ]
  node [
    id 1972
    label "setPermissionssetPermissions"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1973
    label "java.nio.file.attribute.PosixFileAttributeView"
    type "class"
    comment ""
  ]
  node [
    id 1974
    label " PosixFileAttributes readAttributes() throws IOException"
    type "method"
    comment "&#10;     * @throws  IOException                {@inheritDoc}&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, a security manager is&#10;     *          installed, and it denies&#10;     *          {@link RuntimePermission}{@code (&#34;accessUserInformation&#34;)}&#10;     *          or its {@link SecurityManager#checkRead(String) checkRead} method&#10;     *          denies read access to the file.&#10;     "
  ]
  node [
    id 1975
    label " void setPermissions(Set<PosixFilePermission> perms) throws IOException"
    type "method"
    comment "&#10;     * Updates the file permissions.&#10;     *&#10;     * @param   perms&#10;     *          the new set of permissions&#10;     *&#10;     * @throws  ClassCastException&#10;     *          if the sets contains elements that are not of type {@code&#10;     *          PosixFilePermission}&#10;     * @throws  IOException&#10;     *          if an I/O error occurs&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, a security manager is&#10;     *          installed, and it denies&#10;     *          {@link RuntimePermission}{@code (&#34;accessUserInformation&#34;)}&#10;     *          or its {@link SecurityManager#checkWrite(String) checkWrite}&#10;     *          method denies write access to the file.&#10;     "
  ]
  node [
    id 1976
    label " void setGroup(GroupPrincipal group) throws IOException"
    type "method"
    comment "&#10;     * Updates the file group-owner.&#10;     *&#10;     * @param   group&#10;     *          the new file group-owner&#10;     *&#10;     * @throws  IOException&#10;     *          if an I/O error occurs&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager is&#10;     *          installed, it denies&#10;     *          {@link RuntimePermission}{@code (&#34;accessUserInformation&#34;)}&#10;     *          or its {@link SecurityManager#checkWrite(String) checkWrite}&#10;     *          method denies write access to the file.&#10;     "
  ]
  node [
    id 1977
    label "public static Set<PosixFilePermission> getPosixFilePermissions(Path path, LinkOption... options) throws IOException"
    type "method"
    comment "&#10;     * Returns a file's POSIX file permissions.&#10;     *&#10;     * <p> The {@code path} parameter is associated with a {@code FileSystem}&#10;     * that supports the {@link PosixFileAttributeView}. This attribute view&#10;     * provides access to file attributes commonly associated with files on file&#10;     * systems used by operating systems that implement the Portable Operating&#10;     * System Interface (POSIX) family of standards.&#10;     *&#10;     * <p> The {@code options} array may be used to indicate how symbolic links&#10;     * are handled for the case that the file is a symbolic link. By default,&#10;     * symbolic links are followed and the file attribute of the final target&#10;     * of the link is read. If the option {@link LinkOption#NOFOLLOW_LINKS&#10;     * NOFOLLOW_LINKS} is present then symbolic links are not followed.&#10;     *&#10;     * @param   path&#10;     *          the path to the file&#10;     * @param   options&#10;     *          options indicating how symbolic links are handled&#10;     *&#10;     * @return  the file permissions&#10;     *&#10;     * @throws  UnsupportedOperationException&#10;     *          if the associated file system does not support the {@code&#10;     *          PosixFileAttributeView}&#10;     * @throws  IOException&#10;     *          if an I/O error occurs&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, a security manager is&#10;     *          installed, and it denies {@link RuntimePermission}<tt>(&#34;accessUserInformation&#34;)</tt>&#10;     *          or its {@link SecurityManager#checkRead(String) checkRead} method&#10;     *          denies read access to the file.&#10;     "
  ]
  node [
    id 1978
    label "public static Path setPosixFilePermissions(Path path, Set<PosixFilePermission> perms) throws IOException"
    type "method"
    comment "&#10;     * Sets a file's POSIX permissions.&#10;     *&#10;     * <p> The {@code path} parameter is associated with a {@code FileSystem}&#10;     * that supports the {@link PosixFileAttributeView}. This attribute view&#10;     * provides access to file attributes commonly associated with files on file&#10;     * systems used by operating systems that implement the Portable Operating&#10;     * System Interface (POSIX) family of standards.&#10;     *&#10;     * @param   path&#10;     *          The path to the file&#10;     * @param   perms&#10;     *          The new set of permissions&#10;     *&#10;     * @return  The path&#10;     *&#10;     * @throws  UnsupportedOperationException&#10;     *          if the associated file system does not support the {@code&#10;     *          PosixFileAttributeView}&#10;     * @throws  ClassCastException&#10;     *          if the sets contains elements that are not of type {@code&#10;     *          PosixFilePermission}&#10;     * @throws  IOException&#10;     *          if an I/O error occurs&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager is&#10;     *          installed, it denies {@link RuntimePermission}<tt>(&#34;accessUserInformation&#34;)</tt>&#10;     *          or its {@link SecurityManager#checkWrite(String) checkWrite}&#10;     *          method denies write access to the file.&#10;     "
  ]
  node [
    id 1979
    label "public static UserPrincipal getOwner(Path path, LinkOption... options) throws IOException"
    type "method"
    comment "&#10;     * Returns the owner of a file.&#10;     *&#10;     * <p> The {@code path} parameter is associated with a file system that&#10;     * supports {@link FileOwnerAttributeView}. This file attribute view provides&#10;     * access to a file attribute that is the owner of the file.&#10;     *&#10;     * @param   path&#10;     *          The path to the file&#10;     * @param   options&#10;     *          options indicating how symbolic links are handled&#10;     *&#10;     * @return  A user principal representing the owner of the file&#10;     *&#10;     * @throws  UnsupportedOperationException&#10;     *          if the associated file system does not support the {@code&#10;     *          FileOwnerAttributeView}&#10;     * @throws  IOException&#10;     *          if an I/O error occurs&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager is&#10;     *          installed, it denies {@link RuntimePermission}<tt>(&#34;accessUserInformation&#34;)</tt>&#10;     *          or its {@link SecurityManager#checkRead(String) checkRead} method&#10;     *          denies read access to the file.&#10;     "
  ]
  node [
    id 1980
    label "java.nio.file.attribute.FileOwnerAttributeView"
    type "class"
    comment ""
  ]
  node [
    id 1981
    label " UserPrincipal getOwner() throws IOException"
    type "method"
    comment "&#10;     * Read the file owner.&#10;     *&#10;     * <p> It is implementation specific if the file owner can be a {@link&#10;     * GroupPrincipal group}.&#10;     *&#10;     * @return  the file owner&#10;     *&#10;     * @throws  IOException&#10;     *          if an I/O error occurs&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, a security manager is&#10;     *          installed, and it denies {@link&#10;     *          RuntimePermission}{@code (&#34;accessUserInformation&#34;)} or its&#10;     *          {@link SecurityManager#checkRead(String) checkRead} method&#10;     *          denies read access to the file.&#10;     "
  ]
  node [
    id 1982
    label "java.nio.file.attribute.GroupPrincipal"
    type "class"
    comment ""
  ]
  node [
    id 1983
    label " void setOwner(UserPrincipal owner) throws IOException"
    type "method"
    comment "&#10;     * Updates the file owner.&#10;     *&#10;     * <p> It is implementation specific if the file owner can be a {@link&#10;     * GroupPrincipal group}. To ensure consistent and correct behavior&#10;     * across platforms it is recommended that this method should only be used&#10;     * to set the file owner to a user principal that is not a group.&#10;     *&#10;     * @param   owner&#10;     *          the new file owner&#10;     *&#10;     * @throws  IOException&#10;     *          if an I/O error occurs, or the {@code owner} parameter is a&#10;     *          group and this implementation does not support setting the owner&#10;     *          to a group&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, a security manager is&#10;     *          installed, and it denies {@link&#10;     *          RuntimePermission}{@code (&#34;accessUserInformation&#34;)} or its&#10;     *          {@link SecurityManager#checkWrite(String) checkWrite} method&#10;     *          denies write access to the file.&#10;     "
  ]
  node [
    id 1984
    label "public static Path setOwner(Path path, UserPrincipal owner) throws IOException"
    type "method"
    comment "&#10;     * Updates the file owner.&#10;     *&#10;     * <p> The {@code path} parameter is associated with a file system that&#10;     * supports {@link FileOwnerAttributeView}. This file attribute view provides&#10;     * access to a file attribute that is the owner of the file.&#10;     *&#10;     * <p> <b>Usage Example:</b>&#10;     * Suppose we want to make &#34;joe&#34; the owner of a file:&#10;     * <pre>&#10;     *     Path path = ...&#10;     *     UserPrincipalLookupService lookupService =&#10;     *         provider(path).getUserPrincipalLookupService();&#10;     *     UserPrincipal joe = lookupService.lookupPrincipalByName(&#34;joe&#34;);&#10;     *     Files.setOwner(path, joe);&#10;     * </pre>&#10;     *&#10;     * @param   path&#10;     *          The path to the file&#10;     * @param   owner&#10;     *          The new file owner&#10;     *&#10;     * @return  The path&#10;     *&#10;     * @throws  UnsupportedOperationException&#10;     *          if the associated file system does not support the {@code&#10;     *          FileOwnerAttributeView}&#10;     * @throws  IOException&#10;     *          if an I/O error occurs&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager is&#10;     *          installed, it denies {@link RuntimePermission}<tt>(&#34;accessUserInformation&#34;)</tt>&#10;     *          or its {@link SecurityManager#checkWrite(String) checkWrite}&#10;     *          method denies write access to the file.&#10;     *&#10;     * @see FileSystem#getUserPrincipalLookupService&#10;     * @see java.nio.file.attribute.UserPrincipalLookupService&#10;     "
  ]
  node [
    id 1985
    label "public static boolean isSymbolicLink(Path path)"
    type "method"
    comment "&#10;     * Tests whether a file is a symbolic link.&#10;     *&#10;     * <p> Where it is required to distinguish an I/O exception from the case&#10;     * that the file is not a symbolic link then the file attributes can be&#10;     * read with the {@link #readAttributes(Path,Class,LinkOption[])&#10;     * readAttributes} method and the file type tested with the {@link&#10;     * BasicFileAttributes#isSymbolicLink} method.&#10;     *&#10;     * @param   path  The path to the file&#10;     *&#10;     * @return  {@code true} if the file is a symbolic link; {@code false} if&#10;     *          the file does not exist, is not a symbolic link, or it cannot&#10;     *          be determined if the file is a symbolic link or not.&#10;     *&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager is&#10;     *          installed, its {@link SecurityManager#checkRead(String) checkRead}&#10;     *          method denies read access to the file.&#10;     "
  ]
  node [
    id 1986
    label "readAttributes(Path"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1987
    label "public static boolean isDirectory(Path path, LinkOption... options)"
    type "method"
    comment "&#10;     * Tests whether a file is a directory.&#10;     *&#10;     * <p> The {@code options} array may be used to indicate how symbolic links&#10;     * are handled for the case that the file is a symbolic link. By default,&#10;     * symbolic links are followed and the file attribute of the final target&#10;     * of the link is read. If the option {@link LinkOption#NOFOLLOW_LINKS&#10;     * NOFOLLOW_LINKS} is present then symbolic links are not followed.&#10;     *&#10;     * <p> Where it is required to distinguish an I/O exception from the case&#10;     * that the file is not a directory then the file attributes can be&#10;     * read with the {@link #readAttributes(Path,Class,LinkOption[])&#10;     * readAttributes} method and the file type tested with the {@link&#10;     * BasicFileAttributes#isDirectory} method.&#10;     *&#10;     * @param   path&#10;     *          the path to the file to test&#10;     * @param   options&#10;     *          options indicating how symbolic links are handled&#10;     *&#10;     * @return  {@code true} if the file is a directory; {@code false} if&#10;     *          the file does not exist, is not a directory, or it cannot&#10;     *          be determined if the file is a directory or not.&#10;     *&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager is&#10;     *          installed, its {@link SecurityManager#checkRead(String) checkRead}&#10;     *          method denies read access to the file.&#10;     "
  ]
  node [
    id 1988
    label "public static boolean isRegularFile(Path path, LinkOption... options)"
    type "method"
    comment "&#10;     * Tests whether a file is a regular file with opaque content.&#10;     *&#10;     * <p> The {@code options} array may be used to indicate how symbolic links&#10;     * are handled for the case that the file is a symbolic link. By default,&#10;     * symbolic links are followed and the file attribute of the final target&#10;     * of the link is read. If the option {@link LinkOption#NOFOLLOW_LINKS&#10;     * NOFOLLOW_LINKS} is present then symbolic links are not followed.&#10;     *&#10;     * <p> Where it is required to distinguish an I/O exception from the case&#10;     * that the file is not a regular file then the file attributes can be&#10;     * read with the {@link #readAttributes(Path,Class,LinkOption[])&#10;     * readAttributes} method and the file type tested with the {@link&#10;     * BasicFileAttributes#isRegularFile} method.&#10;     *&#10;     * @param   path&#10;     *          the path to the file&#10;     * @param   options&#10;     *          options indicating how symbolic links are handled&#10;     *&#10;     * @return  {@code true} if the file is a regular file; {@code false} if&#10;     *          the file does not exist, is not a regular file, or it&#10;     *          cannot be determined if the file is a regular file or not.&#10;     *&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager is&#10;     *          installed, its {@link SecurityManager#checkRead(String) checkRead}&#10;     *          method denies read access to the file.&#10;     "
  ]
  node [
    id 1989
    label "public static FileTime getLastModifiedTime(Path path, LinkOption... options) throws IOException"
    type "method"
    comment "&#10;     * Returns a file's last modified time.&#10;     *&#10;     * <p> The {@code options} array may be used to indicate how symbolic links&#10;     * are handled for the case that the file is a symbolic link. By default,&#10;     * symbolic links are followed and the file attribute of the final target&#10;     * of the link is read. If the option {@link LinkOption#NOFOLLOW_LINKS&#10;     * NOFOLLOW_LINKS} is present then symbolic links are not followed.&#10;     *&#10;     * @param   path&#10;     *          the path to the file&#10;     * @param   options&#10;     *          options indicating how symbolic links are handled&#10;     *&#10;     * @return  a {@code FileTime} representing the time the file was last&#10;     *          modified, or an implementation specific default when a time&#10;     *          stamp to indicate the time of last modification is not supported&#10;     *          by the file system&#10;     *&#10;     * @throws  IOException&#10;     *          if an I/O error occurs&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager is&#10;     *          installed, its {@link SecurityManager#checkRead(String) checkRead}&#10;     *          method denies read access to the file.&#10;     *&#10;     * @see BasicFileAttributes#lastModifiedTime&#10;     "
  ]
  node [
    id 1990
    label "public static Path setLastModifiedTime(Path path, FileTime time) throws IOException"
    type "method"
    comment "&#10;     * Updates a file's last modified time attribute. The file time is converted&#10;     * to the epoch and precision supported by the file system. Converting from&#10;     * finer to coarser granularities result in precision loss. The behavior of&#10;     * this method when attempting to set the last modified time when it is not&#10;     * supported by the file system or is outside the range supported by the&#10;     * underlying file store is not defined. It may or not fail by throwing an&#10;     * {@code IOException}.&#10;     *&#10;     * <p> <b>Usage Example:</b>&#10;     * Suppose we want to set the last modified time to the current time:&#10;     * <pre>&#10;     *    Path path = ...&#10;     *    FileTime now = FileTime.fromMillis(System.currentTimeMillis());&#10;     *    Files.setLastModifiedTime(path, now);&#10;     * </pre>&#10;     *&#10;     * @param   path&#10;     *          the path to the file&#10;     * @param   time&#10;     *          the new last modified time&#10;     *&#10;     * @return  the path&#10;     *&#10;     * @throws  IOException&#10;     *          if an I/O error occurs&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, the security manager's {@link&#10;     *          SecurityManager#checkWrite(String) checkWrite} method is invoked&#10;     *          to check write access to file&#10;     *&#10;     * @see BasicFileAttributeView#setTimes&#10;     "
  ]
  node [
    id 1991
    label "public static long size(Path path) throws IOException"
    type "method"
    comment "&#10;     * Returns the size of a file (in bytes). The size may differ from the&#10;     * actual size on the file system due to compression, support for sparse&#10;     * files, or other reasons. The size of files that are not {@link&#10;     * #isRegularFile regular} files is implementation specific and&#10;     * therefore unspecified.&#10;     *&#10;     * @param   path&#10;     *          the path to the file&#10;     *&#10;     * @return  the file size, in bytes&#10;     *&#10;     * @throws  IOException&#10;     *          if an I/O error occurs&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager is&#10;     *          installed, its {@link SecurityManager#checkRead(String) checkRead}&#10;     *          method denies read access to the file.&#10;     *&#10;     * @see BasicFileAttributes#size&#10;     "
  ]
  node [
    id 1992
    label "private static boolean followLinks(LinkOption... options)"
    type "method"
    comment "&#10;     * Returns {@code false} if NOFOLLOW_LINKS is present.&#10;     "
  ]
  node [
    id 1993
    label "public static boolean exists(Path path, LinkOption... options)"
    type "method"
    comment "&#10;     * Tests whether a file exists.&#10;     *&#10;     * <p> The {@code options} parameter may be used to indicate how symbolic links&#10;     * are handled for the case that the file is a symbolic link. By default,&#10;     * symbolic links are followed. If the option {@link LinkOption#NOFOLLOW_LINKS&#10;     * NOFOLLOW_LINKS} is present then symbolic links are not followed.&#10;     *&#10;     * <p> Note that the result of this method is immediately outdated. If this&#10;     * method indicates the file exists then there is no guarantee that a&#10;     * subsequence access will succeed. Care should be taken when using this&#10;     * method in security sensitive applications.&#10;     *&#10;     * @param   path&#10;     *          the path to the file to test&#10;     * @param   options&#10;     *          options indicating how symbolic links are handled&#10;     * .&#10;     * @return  {@code true} if the file exists; {@code false} if the file does&#10;     *          not exist or its existence cannot be determined.&#10;     *&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, the {@link&#10;     *          SecurityManager#checkRead(String)} is invoked to check&#10;     *          read access to the file.&#10;     *&#10;     * @see #notExists&#10;     "
  ]
  node [
    id 1994
    label "public static boolean notExists(Path path, LinkOption... options)"
    type "method"
    comment "&#10;     * Tests whether the file located by this path does not exist. This method&#10;     * is intended for cases where it is required to take action when it can be&#10;     * confirmed that a file does not exist.&#10;     *&#10;     * <p> The {@code options} parameter may be used to indicate how symbolic links&#10;     * are handled for the case that the file is a symbolic link. By default,&#10;     * symbolic links are followed. If the option {@link LinkOption#NOFOLLOW_LINKS&#10;     * NOFOLLOW_LINKS} is present then symbolic links are not followed.&#10;     *&#10;     * <p> Note that this method is not the complement of the {@link #exists&#10;     * exists} method. Where it is not possible to determine if a file exists&#10;     * or not then both methods return {@code false}. As with the {@code exists}&#10;     * method, the result of this method is immediately outdated. If this&#10;     * method indicates the file does exist then there is no guarantee that a&#10;     * subsequence attempt to create the file will succeed. Care should be taken&#10;     * when using this method in security sensitive applications.&#10;     *&#10;     * @param   path&#10;     *          the path to the file to test&#10;     * @param   options&#10;     *          options indicating how symbolic links are handled&#10;     *&#10;     * @return  {@code true} if the file does not exist; {@code false} if the&#10;     *          file exists or its existence cannot be determined&#10;     *&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, the {@link&#10;     *          SecurityManager#checkRead(String)} is invoked to check&#10;     *          read access to the file.&#10;     "
  ]
  node [
    id 1995
    label "existsexists"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 1996
    label "private static boolean isAccessible(Path path, AccessMode... modes)"
    type "method"
    comment "&#10;     * Used by isReadbale, isWritable, isExecutable to test access to a file.&#10;     "
  ]
  node [
    id 1997
    label "public static boolean isReadable(Path path)"
    type "method"
    comment "&#10;     * Tests whether a file is readable. This method checks that a file exists&#10;     * and that this Java virtual machine has appropriate privileges that would&#10;     * allow it open the file for reading. Depending on the implementation, this&#10;     * method may require to read file permissions, access control lists, or&#10;     * other file attributes in order to check the effective access to the file.&#10;     * Consequently, this method may not be atomic with respect to other file&#10;     * system operations.&#10;     *&#10;     * <p> Note that the result of this method is immediately outdated, there is&#10;     * no guarantee that a subsequent attempt to open the file for reading will&#10;     * succeed (or even that it will access the same file). Care should be taken&#10;     * when using this method in security sensitive applications.&#10;     *&#10;     * @param   path&#10;     *          the path to the file to check&#10;     *&#10;     * @return  {@code true} if the file exists and is readable; {@code false}&#10;     *          if the file does not exist, read access would be denied because&#10;     *          the Java virtual machine has insufficient privileges, or access&#10;     *          cannot be determined&#10;     *&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager is&#10;     *          installed, the {@link SecurityManager#checkRead(String) checkRead}&#10;     *          is invoked to check read access to the file.&#10;     "
  ]
  node [
    id 1998
    label "public static boolean isWritable(Path path)"
    type "method"
    comment "&#10;     * Tests whether a file is writable. This method checks that a file exists&#10;     * and that this Java virtual machine has appropriate privileges that would&#10;     * allow it open the file for writing. Depending on the implementation, this&#10;     * method may require to read file permissions, access control lists, or&#10;     * other file attributes in order to check the effective access to the file.&#10;     * Consequently, this method may not be atomic with respect to other file&#10;     * system operations.&#10;     *&#10;     * <p> Note that result of this method is immediately outdated, there is no&#10;     * guarantee that a subsequent attempt to open the file for writing will&#10;     * succeed (or even that it will access the same file). Care should be taken&#10;     * when using this method in security sensitive applications.&#10;     *&#10;     * @param   path&#10;     *          the path to the file to check&#10;     *&#10;     * @return  {@code true} if the file exists and is writable; {@code false}&#10;     *          if the file does not exist, write access would be denied because&#10;     *          the Java virtual machine has insufficient privileges, or access&#10;     *          cannot be determined&#10;     *&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager is&#10;     *          installed, the {@link SecurityManager#checkWrite(String) checkWrite}&#10;     *          is invoked to check write access to the file.&#10;     "
  ]
  node [
    id 1999
    label "public static boolean isExecutable(Path path)"
    type "method"
    comment "&#10;     * Tests whether a file is executable. This method checks that a file exists&#10;     * and that this Java virtual machine has appropriate privileges to {@link&#10;     * Runtime#exec execute} the file. The semantics may differ when checking&#10;     * access to a directory. For example, on UNIX systems, checking for&#10;     * execute access checks that the Java virtual machine has permission to&#10;     * search the directory in order to access file or subdirectories.&#10;     *&#10;     * <p> Depending on the implementation, this method may require to read file&#10;     * permissions, access control lists, or other file attributes in order to&#10;     * check the effective access to the file. Consequently, this method may not&#10;     * be atomic with respect to other file system operations.&#10;     *&#10;     * <p> Note that the result of this method is immediately outdated, there is&#10;     * no guarantee that a subsequent attempt to execute the file will succeed&#10;     * (or even that it will access the same file). Care should be taken when&#10;     * using this method in security sensitive applications.&#10;     *&#10;     * @param   path&#10;     *          the path to the file to check&#10;     *&#10;     * @return  {@code true} if the file exists and is executable; {@code false}&#10;     *          if the file does not exist, execute access would be denied because&#10;     *          the Java virtual machine has insufficient privileges, or access&#10;     *          cannot be determined&#10;     *&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager is&#10;     *          installed, the {@link SecurityManager#checkExec(String)&#10;     *          checkExec} is invoked to check execute access to the file.&#10;     "
  ]
  node [
    id 2000
    label "checkExec(String)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2001
    label "exec"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2002
    label "public static Path walkFileTree(Path start, Set<FileVisitOption> options, int maxDepth, FileVisitor<? super Path> visitor) throws IOException"
    type "method"
    comment "&#10;     * Walks a file tree.&#10;     *&#10;     * <p> This method walks a file tree rooted at a given starting file. The&#10;     * file tree traversal is <em>depth-first</em> with the given {@link&#10;     * FileVisitor} invoked for each file encountered. File tree traversal&#10;     * completes when all accessible files in the tree have been visited, or a&#10;     * visit method returns a result of {@link FileVisitResult#TERMINATE&#10;     * TERMINATE}. Where a visit method terminates due an {@code IOException},&#10;     * an uncaught error, or runtime exception, then the traversal is terminated&#10;     * and the error or exception is propagated to the caller of this method.&#10;     *&#10;     * <p> For each file encountered this method attempts to read its {@link&#10;     * java.nio.file.attribute.BasicFileAttributes}. If the file is not a&#10;     * directory then the {@link FileVisitor#visitFile visitFile} method is&#10;     * invoked with the file attributes. If the file attributes cannot be read,&#10;     * due to an I/O exception, then the {@link FileVisitor#visitFileFailed&#10;     * visitFileFailed} method is invoked with the I/O exception.&#10;     *&#10;     * <p> Where the file is a directory, and the directory could not be opened,&#10;     * then the {@code visitFileFailed} method is invoked with the I/O exception,&#10;     * after which, the file tree walk continues, by default, at the next&#10;     * <em>sibling</em> of the directory.&#10;     *&#10;     * <p> Where the directory is opened successfully, then the entries in the&#10;     * directory, and their <em>descendants</em> are visited. When all entries&#10;     * have been visited, or an I/O error occurs during iteration of the&#10;     * directory, then the directory is closed and the visitor's {@link&#10;     * FileVisitor#postVisitDirectory postVisitDirectory} method is invoked.&#10;     * The file tree walk then continues, by default, at the next <em>sibling</em>&#10;     * of the directory.&#10;     *&#10;     * <p> By default, symbolic links are not automatically followed by this&#10;     * method. If the {@code options} parameter contains the {@link&#10;     * FileVisitOption#FOLLOW_LINKS FOLLOW_LINKS} option then symbolic links are&#10;     * followed. When following links, and the attributes of the target cannot&#10;     * be read, then this method attempts to get the {@code BasicFileAttributes}&#10;     * of the link. If they can be read then the {@code visitFile} method is&#10;     * invoked with the attributes of the link (otherwise the {@code visitFileFailed}&#10;     * method is invoked as specified above).&#10;     *&#10;     * <p> If the {@code options} parameter contains the {@link&#10;     * FileVisitOption#FOLLOW_LINKS FOLLOW_LINKS} option then this method keeps&#10;     * track of directories visited so that cycles can be detected. A cycle&#10;     * arises when there is an entry in a directory that is an ancestor of the&#10;     * directory. Cycle detection is done by recording the {@link&#10;     * java.nio.file.attribute.BasicFileAttributes#fileKey file-key} of directories,&#10;     * or if file keys are not available, by invoking the {@link #isSameFile&#10;     * isSameFile} method to test if a directory is the same file as an&#10;     * ancestor. When a cycle is detected it is treated as an I/O error, and the&#10;     * {@link FileVisitor#visitFileFailed visitFileFailed} method is invoked with&#10;     * an instance of {@link FileSystemLoopException}.&#10;     *&#10;     * <p> The {@code maxDepth} parameter is the maximum number of levels of&#10;     * directories to visit. A value of {@code 0} means that only the starting&#10;     * file is visited, unless denied by the security manager. A value of&#10;     * {@link Integer#MAX_VALUE MAX_VALUE} may be used to indicate that all&#10;     * levels should be visited. The {@code visitFile} method is invoked for all&#10;     * files, including directories, encountered at {@code maxDepth}, unless the&#10;     * basic file attributes cannot be read, in which case the {@code&#10;     * visitFileFailed} method is invoked.&#10;     *&#10;     * <p> If a visitor returns a result of {@code null} then {@code&#10;     * NullPointerException} is thrown.&#10;     *&#10;     * <p> When a security manager is installed and it denies access to a file&#10;     * (or directory), then it is ignored and the visitor is not invoked for&#10;     * that file (or directory).&#10;     *&#10;     * @param   start&#10;     *          the starting file&#10;     * @param   options&#10;     *          options to configure the traversal&#10;     * @param   maxDepth&#10;     *          the maximum number of directory levels to visit&#10;     * @param   visitor&#10;     *          the file visitor to invoke for each file&#10;     *&#10;     * @return  the starting file&#10;     *&#10;     * @throws  IllegalArgumentException&#10;     *          if the {@code maxDepth} parameter is negative&#10;     * @throws  SecurityException&#10;     *          If the security manager denies access to the starting file.&#10;     *          In the case of the default provider, the {@link&#10;     *          SecurityManager#checkRead(String) checkRead} method is invoked&#10;     *          to check read access to the directory.&#10;     * @throws  IOException&#10;     *          if an I/O error is thrown by a visitor method&#10;     "
  ]
  node [
    id 2003
    label "java.nio.file.FileVisitor"
    type "class"
    comment ""
  ]
  node [
    id 2004
    label " FileVisitResult preVisitDirectory(T dir, BasicFileAttributes attrs) throws IOException"
    type "method"
    comment "&#10;     * Invoked for a directory before entries in the directory are visited.&#10;     *&#10;     * <p> If this method returns {@link FileVisitResult#CONTINUE CONTINUE},&#10;     * then entries in the directory are visited. If this method returns {@link&#10;     * FileVisitResult#SKIP_SUBTREE SKIP_SUBTREE} or {@link&#10;     * FileVisitResult#SKIP_SIBLINGS SKIP_SIBLINGS} then entries in the&#10;     * directory (and any descendants) will not be visited.&#10;     *&#10;     * @param   dir&#10;     *          a reference to the directory&#10;     * @param   attrs&#10;     *          the directory's basic attributes&#10;     *&#10;     * @return  the visit result&#10;     *&#10;     * @throws  IOException&#10;     *          if an I/O error occurs&#10;     "
  ]
  node [
    id 2005
    label "CONTINUE"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2006
    label "SKIP_SIBLINGS"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2007
    label "SKIP_SUBTREE"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2008
    label " FileVisitResult visitFile(T file, BasicFileAttributes attrs) throws IOException"
    type "method"
    comment "&#10;     * Invoked for a file in a directory.&#10;     *&#10;     * @param   file&#10;     *          a reference to the file&#10;     * @param   attrs&#10;     *          the file's basic attributes&#10;     *&#10;     * @return  the visit result&#10;     *&#10;     * @throws  IOException&#10;     *          if an I/O error occurs&#10;     "
  ]
  node [
    id 2009
    label " FileVisitResult visitFileFailed(T file, IOException exc) throws IOException"
    type "method"
    comment "&#10;     * Invoked for a file that could not be visited. This method is invoked&#10;     * if the file's attributes could not be read, the file is a directory&#10;     * that could not be opened, and other reasons.&#10;     *&#10;     * @param   file&#10;     *          a reference to the file&#10;     * @param   exc&#10;     *          the I/O exception that prevented the file from being visited&#10;     *&#10;     * @return  the visit result&#10;     *&#10;     * @throws  IOException&#10;     *          if an I/O error occurs&#10;     "
  ]
  node [
    id 2010
    label " FileVisitResult postVisitDirectory(T dir, IOException exc) throws IOException"
    type "method"
    comment "&#10;     * Invoked for a directory after entries in the directory, and all of their&#10;     * descendants, have been visited. This method is also invoked when iteration&#10;     * of the directory completes prematurely (by a {@link #visitFile visitFile}&#10;     * method returning {@link FileVisitResult#SKIP_SIBLINGS SKIP_SIBLINGS},&#10;     * or an I/O error when iterating over the directory).&#10;     *&#10;     * @param   dir&#10;     *          a reference to the directory&#10;     * @param   exc&#10;     *          {@code null} if the iteration of the directory completes without&#10;     *          an error; otherwise the I/O exception that caused the iteration&#10;     *          of the directory to complete prematurely&#10;     *&#10;     * @return  the visit result&#10;     *&#10;     * @throws  IOException&#10;     *          if an I/O error occurs&#10;     "
  ]
  node [
    id 2011
    label "visitFile"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2012
    label "TERMINATETERMINATE"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2013
    label "FOLLOW_LINKS"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2014
    label "java.nio.file.FileSystemLoopException"
    type "class"
    comment ""
  ]
  node [
    id 2015
    label "isSameFileisSameFile"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2016
    label "public static Path walkFileTree(Path start, FileVisitor<? super Path> visitor) throws IOException"
    type "method"
    comment "&#10;     * Walks a file tree.&#10;     *&#10;     * <p> This method works as if invoking it were equivalent to evaluating the&#10;     * expression:&#10;     * <blockquote><pre>&#10;     * walkFileTree(start, EnumSet.noneOf(FileVisitOption.class), Integer.MAX_VALUE, visitor)&#10;     * </pre></blockquote>&#10;     * In other words, it does not follow symbolic links, and visits all levels&#10;     * of the file tree.&#10;     *&#10;     * @param   start&#10;     *          the starting file&#10;     * @param   visitor&#10;     *          the file visitor to invoke for each file&#10;     *&#10;     * @return  the starting file&#10;     *&#10;     * @throws  SecurityException&#10;     *          If the security manager denies access to the starting file.&#10;     *          In the case of the default provider, the {@link&#10;     *          SecurityManager#checkRead(String) checkRead} method is invoked&#10;     *          to check read access to the directory.&#10;     * @throws  IOException&#10;     *          if an I/O error is thrown by a visitor method&#10;     "
  ]
  node [
    id 2017
    label "public static BufferedReader newBufferedReader(Path path, Charset cs) throws IOException"
    type "method"
    comment "&#10;     * Opens a file for reading, returning a {@code BufferedReader} that may be&#10;     * used to read text from the file in an efficient manner. Bytes from the&#10;     * file are decoded into characters using the specified charset. Reading&#10;     * commences at the beginning of the file.&#10;     *&#10;     * <p> The {@code Reader} methods that read from the file throw {@code&#10;     * IOException} if a malformed or unmappable byte sequence is read.&#10;     *&#10;     * @param   path&#10;     *          the path to the file&#10;     * @param   cs&#10;     *          the charset to use for decoding&#10;     *&#10;     * @return  a new buffered reader, with default buffer size, to read text&#10;     *          from the file&#10;     *&#10;     * @throws  IOException&#10;     *          if an I/O error occurs opening the file&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager is&#10;     *          installed, the {@link SecurityManager#checkRead(String) checkRead}&#10;     *          method is invoked to check read access to the file.&#10;     *&#10;     * @see #readAllLines&#10;     "
  ]
  node [
    id 2018
    label "public static BufferedReader newBufferedReader(Path path) throws IOException"
    type "method"
    comment "&#10;     * Opens a file for reading, returning a {@code BufferedReader} to read text&#10;     * from the file in an efficient manner. Bytes from the file are decoded into&#10;     * characters using the {@link StandardCharsets#UTF_8 UTF-8} {@link Charset&#10;     * charset}.&#10;     *&#10;     * <p> This method works as if invoking it were equivalent to evaluating the&#10;     * expression:&#10;     * <pre>{@code&#10;     * Files.newBufferedReader(path, StandardCharsets.UTF_8)&#10;     * }</pre>&#10;     *&#10;     * @param   path&#10;     *          the path to the file&#10;     *&#10;     * @return  a new buffered reader, with default buffer size, to read text&#10;     *          from the file&#10;     *&#10;     * @throws  IOException&#10;     *          if an I/O error occurs opening the file&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager is&#10;     *          installed, the {@link SecurityManager#checkRead(String) checkRead}&#10;     *          method is invoked to check read access to the file.&#10;     *&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 2019
    label "Charsetcharset"
  ]
  node [
    id 2020
    label "UTF_8"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2021
    label "java.nio.charset.StandardCharsets"
    type "class"
    comment "&#10; * Constant definitions for the standard {@link Charset Charsets}. These&#10; * charsets are guaranteed to be available on every implementation of the Java&#10; * platform.&#10; *&#10; * @see <a href=&#34;Charset.html#standard&#34;>Standard Charsets</a>&#10; * @since 1.7&#10; "
  ]
  node [
    id 2022
    label "public static BufferedWriter newBufferedWriter(Path path, Charset cs, OpenOption... options) throws IOException"
    type "method"
    comment "&#10;     * Opens or creates a file for writing, returning a {@code BufferedWriter}&#10;     * that may be used to write text to the file in an efficient manner.&#10;     * The {@code options} parameter specifies how the the file is created or&#10;     * opened. If no options are present then this method works as if the {@link&#10;     * StandardOpenOption#CREATE CREATE}, {@link&#10;     * StandardOpenOption#TRUNCATE_EXISTING TRUNCATE_EXISTING}, and {@link&#10;     * StandardOpenOption#WRITE WRITE} options are present. In other words, it&#10;     * opens the file for writing, creating the file if it doesn't exist, or&#10;     * initially truncating an existing {@link #isRegularFile regular-file} to&#10;     * a size of {@code 0} if it exists.&#10;     *&#10;     * <p> The {@code Writer} methods to write text throw {@code IOException}&#10;     * if the text cannot be encoded using the specified charset.&#10;     *&#10;     * @param   path&#10;     *          the path to the file&#10;     * @param   cs&#10;     *          the charset to use for encoding&#10;     * @param   options&#10;     *          options specifying how the file is opened&#10;     *&#10;     * @return  a new buffered writer, with default buffer size, to write text&#10;     *          to the file&#10;     *&#10;     * @throws  IOException&#10;     *          if an I/O error occurs opening or creating the file&#10;     * @throws  UnsupportedOperationException&#10;     *          if an unsupported option is specified&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager is&#10;     *          installed, the {@link SecurityManager#checkWrite(String) checkWrite}&#10;     *          method is invoked to check write access to the file.&#10;     *&#10;     * @see #write(Path,Iterable,Charset,OpenOption[])&#10;     "
  ]
  node [
    id 2023
    label "public static BufferedWriter newBufferedWriter(Path path, OpenOption... options) throws IOException"
    type "method"
    comment "&#10;     * Opens or creates a file for writing, returning a {@code BufferedWriter}&#10;     * to write text to the file in an efficient manner. The text is encoded&#10;     * into bytes for writing using the {@link StandardCharsets#UTF_8 UTF-8}&#10;     * {@link Charset charset}.&#10;     *&#10;     * <p> This method works as if invoking it were equivalent to evaluating the&#10;     * expression:&#10;     * <pre>{@code&#10;     * Files.newBufferedWriter(path, StandardCharsets.UTF_8, options)&#10;     * }</pre>&#10;     *&#10;     * @param   path&#10;     *          the path to the file&#10;     * @param   options&#10;     *          options specifying how the file is opened&#10;     *&#10;     * @return  a new buffered writer, with default buffer size, to write text&#10;     *          to the file&#10;     *&#10;     * @throws  IOException&#10;     *          if an I/O error occurs opening or creating the file&#10;     * @throws  UnsupportedOperationException&#10;     *          if an unsupported option is specified&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager is&#10;     *          installed, the {@link SecurityManager#checkWrite(String) checkWrite}&#10;     *          method is invoked to check write access to the file.&#10;     *&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 2024
    label "private static long copy(InputStream source, OutputStream sink) throws IOException"
    type "method"
    comment "&#10;     * Reads all bytes from an input stream and writes them to an output stream.&#10;     "
  ]
  node [
    id 2025
    label "public static long copy(InputStream in, Path target, CopyOption... options) throws IOException"
    type "method"
    comment "&#10;     * Copies all bytes from an input stream to a file. On return, the input&#10;     * stream will be at end of stream.&#10;     *&#10;     * <p> By default, the copy fails if the target file already exists or is a&#10;     * symbolic link. If the {@link StandardCopyOption#REPLACE_EXISTING&#10;     * REPLACE_EXISTING} option is specified, and the target file already exists,&#10;     * then it is replaced if it is not a non-empty directory. If the target&#10;     * file exists and is a symbolic link, then the symbolic link is replaced.&#10;     * In this release, the {@code REPLACE_EXISTING} option is the only option&#10;     * required to be supported by this method. Additional options may be&#10;     * supported in future releases.&#10;     *&#10;     * <p>  If an I/O error occurs reading from the input stream or writing to&#10;     * the file, then it may do so after the target file has been created and&#10;     * after some bytes have been read or written. Consequently the input&#10;     * stream may not be at end of stream and may be in an inconsistent state.&#10;     * It is strongly recommended that the input stream be promptly closed if an&#10;     * I/O error occurs.&#10;     *&#10;     * <p> This method may block indefinitely reading from the input stream (or&#10;     * writing to the file). The behavior for the case that the input stream is&#10;     * <i>asynchronously closed</i> or the thread interrupted during the copy is&#10;     * highly input stream and file system provider specific and therefore not&#10;     * specified.&#10;     *&#10;     * <p> <b>Usage example</b>: Suppose we want to capture a web page and save&#10;     * it to a file:&#10;     * <pre>&#10;     *     Path path = ...&#10;     *     URI u = URI.create(&#34;http://java.sun.com/&#34;);&#10;     *     try (InputStream in = u.toURL().openStream()) {&#10;     *         Files.copy(in, path);&#10;     *     }&#10;     * </pre>&#10;     *&#10;     * @param   in&#10;     *          the input stream to read from&#10;     * @param   target&#10;     *          the path to the file&#10;     * @param   options&#10;     *          options specifying how the copy should be done&#10;     *&#10;     * @return  the number of bytes read or written&#10;     *&#10;     * @throws  IOException&#10;     *          if an I/O error occurs when reading or writing&#10;     * @throws  FileAlreadyExistsException&#10;     *          if the target file exists but cannot be replaced because the&#10;     *          {@code REPLACE_EXISTING} option is not specified <i>(optional&#10;     *          specific exception)</i>&#10;     * @throws  DirectoryNotEmptyException&#10;     *          the {@code REPLACE_EXISTING} option is specified but the file&#10;     *          cannot be replaced because it is a non-empty directory&#10;     *          <i>(optional specific exception)</i>     *&#10;     * @throws  UnsupportedOperationException&#10;     *          if {@code options} contains a copy option that is not supported&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager is&#10;     *          installed, the {@link SecurityManager#checkWrite(String) checkWrite}&#10;     *          method is invoked to check write access to the file. Where the&#10;     *          {@code REPLACE_EXISTING} option is specified, the security&#10;     *          manager's {@link SecurityManager#checkDelete(String) checkDelete}&#10;     *          method is invoked to check that an existing file can be deleted.&#10;     "
  ]
  node [
    id 2026
    label "REPLACE_EXISTINGREPLACE_EXISTING"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2027
    label "public static long copy(Path source, OutputStream out) throws IOException"
    type "method"
    comment "&#10;     * Copies all bytes from a file to an output stream.&#10;     *&#10;     * <p> If an I/O error occurs reading from the file or writing to the output&#10;     * stream, then it may do so after some bytes have been read or written.&#10;     * Consequently the output stream may be in an inconsistent state. It is&#10;     * strongly recommended that the output stream be promptly closed if an I/O&#10;     * error occurs.&#10;     *&#10;     * <p> This method may block indefinitely writing to the output stream (or&#10;     * reading from the file). The behavior for the case that the output stream&#10;     * is <i>asynchronously closed</i> or the thread interrupted during the copy&#10;     * is highly output stream and file system provider specific and therefore&#10;     * not specified.&#10;     *&#10;     * <p> Note that if the given output stream is {@link java.io.Flushable}&#10;     * then its {@link java.io.Flushable#flush flush} method may need to invoked&#10;     * after this method completes so as to flush any buffered output.&#10;     *&#10;     * @param   source&#10;     *          the  path to the file&#10;     * @param   out&#10;     *          the output stream to write to&#10;     *&#10;     * @return  the number of bytes read or written&#10;     *&#10;     * @throws  IOException&#10;     *          if an I/O error occurs when reading or writing&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager is&#10;     *          installed, the {@link SecurityManager#checkRead(String) checkRead}&#10;     *          method is invoked to check read access to the file.&#10;     "
  ]
  node [
    id 2028
    label "java.io.Flushable"
    type "class"
    comment "&#10; * A {@code Flushable} is a destination of data that can be flushed.  The&#10; * flush method is invoked to write any buffered output to the underlying&#10; * stream.&#10; *&#10; * @since 1.5&#10; "
  ]
  node [
    id 2029
    label " void flush() throws IOException"
    type "method"
    comment "&#10;     * Flushes this stream by writing any buffered output to the underlying&#10;     * stream.&#10;     *&#10;     * @throws IOException If an I/O error occurs&#10;     "
  ]
  node [
    id 2030
    label "private static byte[] read(InputStream source, int initialSize) throws IOException"
    type "method"
    comment "&#10;     * Reads all the bytes from an input stream. Uses {@code initialSize} as a hint&#10;     * about how many bytes the stream will have.&#10;     *&#10;     * @param   source&#10;     *          the input stream to read from&#10;     * @param   initialSize&#10;     *          the initial size of the byte array to allocate&#10;     *&#10;     * @return  a byte array containing the bytes read from the file&#10;     *&#10;     * @throws  IOException&#10;     *          if an I/O error occurs reading from the stream&#10;     * @throws  OutOfMemoryError&#10;     *          if an array of the required size cannot be allocated&#10;     "
  ]
  node [
    id 2031
    label "public static byte[] readAllBytes(Path path) throws IOException"
    type "method"
    comment "&#10;     * Reads all the bytes from a file. The method ensures that the file is&#10;     * closed when all bytes have been read or an I/O error, or other runtime&#10;     * exception, is thrown.&#10;     *&#10;     * <p> Note that this method is intended for simple cases where it is&#10;     * convenient to read all bytes into a byte array. It is not intended for&#10;     * reading in large files.&#10;     *&#10;     * @param   path&#10;     *          the path to the file&#10;     *&#10;     * @return  a byte array containing the bytes read from the file&#10;     *&#10;     * @throws  IOException&#10;     *          if an I/O error occurs reading from the stream&#10;     * @throws  OutOfMemoryError&#10;     *          if an array of the required size cannot be allocated, for&#10;     *          example the file is larger that {@code 2GB}&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager is&#10;     *          installed, the {@link SecurityManager#checkRead(String) checkRead}&#10;     *          method is invoked to check read access to the file.&#10;     "
  ]
  node [
    id 2032
    label "public static List<String> readAllLines(Path path, Charset cs) throws IOException"
    type "method"
    comment "&#10;     * Read all lines from a file. This method ensures that the file is&#10;     * closed when all bytes have been read or an I/O error, or other runtime&#10;     * exception, is thrown. Bytes from the file are decoded into characters&#10;     * using the specified charset.&#10;     *&#10;     * <p> This method recognizes the following as line terminators:&#10;     * <ul>&#10;     *   <li> <code>&#38;#92;u000D</code> followed by <code>&#38;#92;u000A</code>,&#10;     *     CARRIAGE RETURN followed by LINE FEED </li>&#10;     *   <li> <code>&#38;#92;u000A</code>, LINE FEED </li>&#10;     *   <li> <code>&#38;#92;u000D</code>, CARRIAGE RETURN </li>&#10;     * </ul>&#10;     * <p> Additional Unicode line terminators may be recognized in future&#10;     * releases.&#10;     *&#10;     * <p> Note that this method is intended for simple cases where it is&#10;     * convenient to read all lines in a single operation. It is not intended&#10;     * for reading in large files.&#10;     *&#10;     * @param   path&#10;     *          the path to the file&#10;     * @param   cs&#10;     *          the charset to use for decoding&#10;     *&#10;     * @return  the lines from the file as a {@code List}; whether the {@code&#10;     *          List} is modifiable or not is implementation dependent and&#10;     *          therefore not specified&#10;     *&#10;     * @throws  IOException&#10;     *          if an I/O error occurs reading from the file or a malformed or&#10;     *          unmappable byte sequence is read&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager is&#10;     *          installed, the {@link SecurityManager#checkRead(String) checkRead}&#10;     *          method is invoked to check read access to the file.&#10;     *&#10;     * @see #newBufferedReader&#10;     "
  ]
  node [
    id 2033
    label "public static List<String> readAllLines(Path path) throws IOException"
    type "method"
    comment "&#10;     * Read all lines from a file. Bytes from the file are decoded into characters&#10;     * using the {@link StandardCharsets#UTF_8 UTF-8} {@link Charset charset}.&#10;     *&#10;     * <p> This method works as if invoking it were equivalent to evaluating the&#10;     * expression:&#10;     * <pre>{@code&#10;     * Files.readAllLines(path, StandardCharsets.UTF_8)&#10;     * }</pre>&#10;     *&#10;     * @param   path&#10;     *          the path to the file&#10;     *&#10;     * @return  the lines from the file as a {@code List}; whether the {@code&#10;     *          List} is modifiable or not is implementation dependent and&#10;     *          therefore not specified&#10;     *&#10;     * @throws  IOException&#10;     *          if an I/O error occurs reading from the file or a malformed or&#10;     *          unmappable byte sequence is read&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager is&#10;     *          installed, the {@link SecurityManager#checkRead(String) checkRead}&#10;     *          method is invoked to check read access to the file.&#10;     *&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 2034
    label "public static Path write(Path path, byte[] bytes, OpenOption... options) throws IOException"
    type "method"
    comment "&#10;     * Writes bytes to a file. The {@code options} parameter specifies how the&#10;     * the file is created or opened. If no options are present then this method&#10;     * works as if the {@link StandardOpenOption#CREATE CREATE}, {@link&#10;     * StandardOpenOption#TRUNCATE_EXISTING TRUNCATE_EXISTING}, and {@link&#10;     * StandardOpenOption#WRITE WRITE} options are present. In other words, it&#10;     * opens the file for writing, creating the file if it doesn't exist, or&#10;     * initially truncating an existing {@link #isRegularFile regular-file} to&#10;     * a size of {@code 0}. All bytes in the byte array are written to the file.&#10;     * The method ensures that the file is closed when all bytes have been&#10;     * written (or an I/O error or other runtime exception is thrown). If an I/O&#10;     * error occurs then it may do so after the file has created or truncated,&#10;     * or after some bytes have been written to the file.&#10;     *&#10;     * <p> <b>Usage example</b>: By default the method creates a new file or&#10;     * overwrites an existing file. Suppose you instead want to append bytes&#10;     * to an existing file:&#10;     * <pre>&#10;     *     Path path = ...&#10;     *     byte[] bytes = ...&#10;     *     Files.write(path, bytes, StandardOpenOption.APPEND);&#10;     * </pre>&#10;     *&#10;     * @param   path&#10;     *          the path to the file&#10;     * @param   bytes&#10;     *          the byte array with the bytes to write&#10;     * @param   options&#10;     *          options specifying how the file is opened&#10;     *&#10;     * @return  the path&#10;     *&#10;     * @throws  IOException&#10;     *          if an I/O error occurs writing to or creating the file&#10;     * @throws  UnsupportedOperationException&#10;     *          if an unsupported option is specified&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager is&#10;     *          installed, the {@link SecurityManager#checkWrite(String) checkWrite}&#10;     *          method is invoked to check write access to the file.&#10;     "
  ]
  node [
    id 2035
    label "public static Path write(Path path, Iterable<? extends CharSequence> lines, Charset cs, OpenOption... options) throws IOException"
    type "method"
    comment "&#10;     * Write lines of text to a file. Each line is a char sequence and is&#10;     * written to the file in sequence with each line terminated by the&#10;     * platform's line separator, as defined by the system property {@code&#10;     * line.separator}. Characters are encoded into bytes using the specified&#10;     * charset.&#10;     *&#10;     * <p> The {@code options} parameter specifies how the the file is created&#10;     * or opened. If no options are present then this method works as if the&#10;     * {@link StandardOpenOption#CREATE CREATE}, {@link&#10;     * StandardOpenOption#TRUNCATE_EXISTING TRUNCATE_EXISTING}, and {@link&#10;     * StandardOpenOption#WRITE WRITE} options are present. In other words, it&#10;     * opens the file for writing, creating the file if it doesn't exist, or&#10;     * initially truncating an existing {@link #isRegularFile regular-file} to&#10;     * a size of {@code 0}. The method ensures that the file is closed when all&#10;     * lines have been written (or an I/O error or other runtime exception is&#10;     * thrown). If an I/O error occurs then it may do so after the file has&#10;     * created or truncated, or after some bytes have been written to the file.&#10;     *&#10;     * @param   path&#10;     *          the path to the file&#10;     * @param   lines&#10;     *          an object to iterate over the char sequences&#10;     * @param   cs&#10;     *          the charset to use for encoding&#10;     * @param   options&#10;     *          options specifying how the file is opened&#10;     *&#10;     * @return  the path&#10;     *&#10;     * @throws  IOException&#10;     *          if an I/O error occurs writing to or creating the file, or the&#10;     *          text cannot be encoded using the specified charset&#10;     * @throws  UnsupportedOperationException&#10;     *          if an unsupported option is specified&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager is&#10;     *          installed, the {@link SecurityManager#checkWrite(String) checkWrite}&#10;     *          method is invoked to check write access to the file.&#10;     "
  ]
  node [
    id 2036
    label "public static Path write(Path path, Iterable<? extends CharSequence> lines, OpenOption... options) throws IOException"
    type "method"
    comment "&#10;     * Write lines of text to a file. Characters are encoded into bytes using&#10;     * the {@link StandardCharsets#UTF_8 UTF-8} {@link Charset charset}.&#10;     *&#10;     * <p> This method works as if invoking it were equivalent to evaluating the&#10;     * expression:&#10;     * <pre>{@code&#10;     * Files.write(path, lines, StandardCharsets.UTF_8, options);&#10;     * }</pre>&#10;     *&#10;     * @param   path&#10;     *          the path to the file&#10;     * @param   lines&#10;     *          an object to iterate over the char sequences&#10;     * @param   options&#10;     *          options specifying how the file is opened&#10;     *&#10;     * @return  the path&#10;     *&#10;     * @throws  IOException&#10;     *          if an I/O error occurs writing to or creating the file, or the&#10;     *          text cannot be encoded as {@code UTF-8}&#10;     * @throws  UnsupportedOperationException&#10;     *          if an unsupported option is specified&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager is&#10;     *          installed, the {@link SecurityManager#checkWrite(String) checkWrite}&#10;     *          method is invoked to check write access to the file.&#10;     *&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 2037
    label "public static Stream<Path> list(Path dir) throws IOException"
    type "method"
    comment "&#10;     * Return a lazily populated {@code Stream}, the elements of&#10;     * which are the entries in the directory.  The listing is not recursive.&#10;     *&#10;     * <p> The elements of the stream are {@link Path} objects that are&#10;     * obtained as if by {@link Path#resolve(Path) resolving} the name of the&#10;     * directory entry against {@code dir}. Some file systems maintain special&#10;     * links to the directory itself and the directory's parent directory.&#10;     * Entries representing these links are not included.&#10;     *&#10;     * <p> The stream is <i>weakly consistent</i>. It is thread safe but does&#10;     * not freeze the directory while iterating, so it may (or may not)&#10;     * reflect updates to the directory that occur after returning from this&#10;     * method.&#10;     *&#10;     * <p> The returned stream encapsulates a {@link DirectoryStream}.&#10;     * If timely disposal of file system resources is required, the&#10;     * {@code try}-with-resources construct should be used to ensure that the&#10;     * stream's {@link Stream#close close} method is invoked after the stream&#10;     * operations are completed.&#10;     *&#10;     * <p> Operating on a closed stream behaves as if the end of stream&#10;     * has been reached. Due to read-ahead, one or more elements may be&#10;     * returned after the stream has been closed.&#10;     *&#10;     * <p> If an {@link IOException} is thrown when accessing the directory&#10;     * after this method has returned, it is wrapped in an {@link&#10;     * UncheckedIOException} which will be thrown from the method that caused&#10;     * the access to take place.&#10;     *&#10;     * @param   dir  The path to the directory&#10;     *&#10;     * @return  The {@code Stream} describing the content of the&#10;     *          directory&#10;     *&#10;     * @throws  NotDirectoryException&#10;     *          if the file could not otherwise be opened because it is not&#10;     *          a directory <i>(optional specific exception)</i>&#10;     * @throws  IOException&#10;     *          if an I/O error occurs when opening the directory&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager is&#10;     *          installed, the {@link SecurityManager#checkRead(String) checkRead}&#10;     *          method is invoked to check read access to the directory.&#10;     *&#10;     * @see     #newDirectoryStream(Path)&#10;     * @since   1.8&#10;     "
  ]
  node [
    id 2038
    label "java.io.UncheckedIOException"
    type "class"
    comment "&#10; * Wraps an {@link IOException} with an unchecked exception.&#10; *&#10; * @since   1.8&#10; "
  ]
  node [
    id 2039
    label "public static Stream<Path> walk(Path start, int maxDepth, FileVisitOption... options) throws IOException"
    type "method"
    comment "&#10;     * Return a {@code Stream} that is lazily populated with {@code&#10;     * Path} by walking the file tree rooted at a given starting file.  The&#10;     * file tree is traversed <em>depth-first</em>, the elements in the stream&#10;     * are {@link Path} objects that are obtained as if by {@link&#10;     * Path#resolve(Path) resolving} the relative path against {@code start}.&#10;     *&#10;     * <p> The {@code stream} walks the file tree as elements are consumed.&#10;     * The {@code Stream} returned is guaranteed to have at least one&#10;     * element, the starting file itself. For each file visited, the stream&#10;     * attempts to read its {@link BasicFileAttributes}. If the file is a&#10;     * directory and can be opened successfully, entries in the directory, and&#10;     * their <em>descendants</em> will follow the directory in the stream as&#10;     * they are encountered. When all entries have been visited, then the&#10;     * directory is closed. The file tree walk then continues at the next&#10;     * <em>sibling</em> of the directory.&#10;     *&#10;     * <p> The stream is <i>weakly consistent</i>. It does not freeze the&#10;     * file tree while iterating, so it may (or may not) reflect updates to&#10;     * the file tree that occur after returned from this method.&#10;     *&#10;     * <p> By default, symbolic links are not automatically followed by this&#10;     * method. If the {@code options} parameter contains the {@link&#10;     * FileVisitOption#FOLLOW_LINKS FOLLOW_LINKS} option then symbolic links are&#10;     * followed. When following links, and the attributes of the target cannot&#10;     * be read, then this method attempts to get the {@code BasicFileAttributes}&#10;     * of the link.&#10;     *&#10;     * <p> If the {@code options} parameter contains the {@link&#10;     * FileVisitOption#FOLLOW_LINKS FOLLOW_LINKS} option then the stream keeps&#10;     * track of directories visited so that cycles can be detected. A cycle&#10;     * arises when there is an entry in a directory that is an ancestor of the&#10;     * directory. Cycle detection is done by recording the {@link&#10;     * java.nio.file.attribute.BasicFileAttributes#fileKey file-key} of directories,&#10;     * or if file keys are not available, by invoking the {@link #isSameFile&#10;     * isSameFile} method to test if a directory is the same file as an&#10;     * ancestor. When a cycle is detected it is treated as an I/O error with&#10;     * an instance of {@link FileSystemLoopException}.&#10;     *&#10;     * <p> The {@code maxDepth} parameter is the maximum number of levels of&#10;     * directories to visit. A value of {@code 0} means that only the starting&#10;     * file is visited, unless denied by the security manager. A value of&#10;     * {@link Integer#MAX_VALUE MAX_VALUE} may be used to indicate that all&#10;     * levels should be visited.&#10;     *&#10;     * <p> When a security manager is installed and it denies access to a file&#10;     * (or directory), then it is ignored and not included in the stream.&#10;     *&#10;     * <p> The returned stream encapsulates one or more {@link DirectoryStream}s.&#10;     * If timely disposal of file system resources is required, the&#10;     * {@code try}-with-resources construct should be used to ensure that the&#10;     * stream's {@link Stream#close close} method is invoked after the stream&#10;     * operations are completed.  Operating on a closed stream will result in an&#10;     * {@link java.lang.IllegalStateException}.&#10;     *&#10;     * <p> If an {@link IOException} is thrown when accessing the directory&#10;     * after this method has returned, it is wrapped in an {@link&#10;     * UncheckedIOException} which will be thrown from the method that caused&#10;     * the access to take place.&#10;     *&#10;     * @param   start&#10;     *          the starting file&#10;     * @param   maxDepth&#10;     *          the maximum number of directory levels to visit&#10;     * @param   options&#10;     *          options to configure the traversal&#10;     *&#10;     * @return  the {@link Stream} of {@link Path}&#10;     *&#10;     * @throws  IllegalArgumentException&#10;     *          if the {@code maxDepth} parameter is negative&#10;     * @throws  SecurityException&#10;     *          If the security manager denies access to the starting file.&#10;     *          In the case of the default provider, the {@link&#10;     *          SecurityManager#checkRead(String) checkRead} method is invoked&#10;     *          to check read access to the directory.&#10;     * @throws  IOException&#10;     *          if an I/O error is thrown when accessing the starting file.&#10;     * @since   1.8&#10;     "
  ]
  node [
    id 2040
    label "java.lang.IllegalStateException"
    type "class"
    comment "&#10; * Signals that a method has been invoked at an illegal or&#10; * inappropriate time.  In other words, the Java environment or&#10; * Java application is not in an appropriate state for the requested&#10; * operation.&#10; *&#10; * @author  Jonni Kanerva&#10; * @since   1.1&#10; "
  ]
  node [
    id 2041
    label "public static Stream<Path> walk(Path start, FileVisitOption... options) throws IOException"
    type "method"
    comment "&#10;     * Return a {@code Stream} that is lazily populated with {@code&#10;     * Path} by walking the file tree rooted at a given starting file.  The&#10;     * file tree is traversed <em>depth-first</em>, the elements in the stream&#10;     * are {@link Path} objects that are obtained as if by {@link&#10;     * Path#resolve(Path) resolving} the relative path against {@code start}.&#10;     *&#10;     * <p> This method works as if invoking it were equivalent to evaluating the&#10;     * expression:&#10;     * <blockquote><pre>&#10;     * walk(start, Integer.MAX_VALUE, options)&#10;     * </pre></blockquote>&#10;     * In other words, it visits all levels of the file tree.&#10;     *&#10;     * <p> The returned stream encapsulates one or more {@link DirectoryStream}s.&#10;     * If timely disposal of file system resources is required, the&#10;     * {@code try}-with-resources construct should be used to ensure that the&#10;     * stream's {@link Stream#close close} method is invoked after the stream&#10;     * operations are completed.  Operating on a closed stream will result in an&#10;     * {@link java.lang.IllegalStateException}.&#10;     *&#10;     * @param   start&#10;     *          the starting file&#10;     * @param   options&#10;     *          options to configure the traversal&#10;     *&#10;     * @return  the {@link Stream} of {@link Path}&#10;     *&#10;     * @throws  SecurityException&#10;     *          If the security manager denies access to the starting file.&#10;     *          In the case of the default provider, the {@link&#10;     *          SecurityManager#checkRead(String) checkRead} method is invoked&#10;     *          to check read access to the directory.&#10;     * @throws  IOException&#10;     *          if an I/O error is thrown when accessing the starting file.&#10;     *&#10;     * @see     #walk(Path, int, FileVisitOption...)&#10;     * @since   1.8&#10;     "
  ]
  node [
    id 2042
    label "public static Stream<Path> find(Path start, int maxDepth, BiPredicate<Path, BasicFileAttributes> matcher, FileVisitOption... options) throws IOException"
    type "method"
    comment "&#10;     * Return a {@code Stream} that is lazily populated with {@code&#10;     * Path} by searching for files in a file tree rooted at a given starting&#10;     * file.&#10;     *&#10;     * <p> This method walks the file tree in exactly the manner specified by&#10;     * the {@link #walk walk} method. For each file encountered, the given&#10;     * {@link BiPredicate} is invoked with its {@link Path} and {@link&#10;     * BasicFileAttributes}. The {@code Path} object is obtained as if by&#10;     * {@link Path#resolve(Path) resolving} the relative path against {@code&#10;     * start} and is only included in the returned {@link Stream} if&#10;     * the {@code BiPredicate} returns true. Compare to calling {@link&#10;     * java.util.stream.Stream#filter filter} on the {@code Stream}&#10;     * returned by {@code walk} method, this method may be more efficient by&#10;     * avoiding redundant retrieval of the {@code BasicFileAttributes}.&#10;     *&#10;     * <p> The returned stream encapsulates one or more {@link DirectoryStream}s.&#10;     * If timely disposal of file system resources is required, the&#10;     * {@code try}-with-resources construct should be used to ensure that the&#10;     * stream's {@link Stream#close close} method is invoked after the stream&#10;     * operations are completed.  Operating on a closed stream will result in an&#10;     * {@link java.lang.IllegalStateException}.&#10;     *&#10;     * <p> If an {@link IOException} is thrown when accessing the directory&#10;     * after returned from this method, it is wrapped in an {@link&#10;     * UncheckedIOException} which will be thrown from the method that caused&#10;     * the access to take place.&#10;     *&#10;     * @param   start&#10;     *          the starting file&#10;     * @param   maxDepth&#10;     *          the maximum number of directory levels to search&#10;     * @param   matcher&#10;     *          the function used to decide whether a file should be included&#10;     *          in the returned stream&#10;     * @param   options&#10;     *          options to configure the traversal&#10;     *&#10;     * @return  the {@link Stream} of {@link Path}&#10;     *&#10;     * @throws  IllegalArgumentException&#10;     *          if the {@code maxDepth} parameter is negative&#10;     * @throws  SecurityException&#10;     *          If the security manager denies access to the starting file.&#10;     *          In the case of the default provider, the {@link&#10;     *          SecurityManager#checkRead(String) checkRead} method is invoked&#10;     *          to check read access to the directory.&#10;     * @throws  IOException&#10;     *          if an I/O error is thrown when accessing the starting file.&#10;     *&#10;     * @see     #walk(Path, int, FileVisitOption...)&#10;     * @since   1.8&#10;     "
  ]
  node [
    id 2043
    label "walk"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2044
    label "java.util.function.BiPredicate"
    type "class"
    comment "&#10; * Represents a predicate (boolean-valued function) of two arguments.  This is&#10; * the two-arity specialization of {@link Predicate}.&#10; *&#10; * <p>This is a <a href=&#34;package-summary.html&#34;>functional interface</a>&#10; * whose functional method is {@link #test(Object, Object)}.&#10; *&#10; * @param <T> the type of the first argument to the predicate&#10; * @param <U> the type of the second argument the predicate&#10; *&#10; * @see Predicate&#10; * @since 1.8&#10; "
  ]
  node [
    id 2045
    label " boolean test(T t, U u)"
    type "method"
    comment "&#10;     * Evaluates this predicate on the given arguments.&#10;     *&#10;     * @param t the first input argument&#10;     * @param u the second input argument&#10;     * @return {@code true} if the input arguments match the predicate,&#10;     * otherwise {@code false}&#10;     "
  ]
  node [
    id 2046
    label " BiPredicate<T, U> and(BiPredicate<? super T, ? super U> other)"
    type "method"
    comment "&#10;     * Returns a composed predicate that represents a short-circuiting logical&#10;     * AND of this predicate and another.  When evaluating the composed&#10;     * predicate, if this predicate is {@code false}, then the {@code other}&#10;     * predicate is not evaluated.&#10;     *&#10;     * <p>Any exceptions thrown during evaluation of either predicate are relayed&#10;     * to the caller; if evaluation of this predicate throws an exception, the&#10;     * {@code other} predicate will not be evaluated.&#10;     *&#10;     * @param other a predicate that will be logically-ANDed with this&#10;     *              predicate&#10;     * @return a composed predicate that represents the short-circuiting logical&#10;     * AND of this predicate and the {@code other} predicate&#10;     * @throws NullPointerException if other is null&#10;     "
  ]
  node [
    id 2047
    label " BiPredicate<T, U> negate()"
    type "method"
    comment "&#10;     * Returns a predicate that represents the logical negation of this&#10;     * predicate.&#10;     *&#10;     * @return a predicate that represents the logical negation of this&#10;     * predicate&#10;     "
  ]
  node [
    id 2048
    label " BiPredicate<T, U> or(BiPredicate<? super T, ? super U> other)"
    type "method"
    comment "&#10;     * Returns a composed predicate that represents a short-circuiting logical&#10;     * OR of this predicate and another.  When evaluating the composed&#10;     * predicate, if this predicate is {@code true}, then the {@code other}&#10;     * predicate is not evaluated.&#10;     *&#10;     * <p>Any exceptions thrown during evaluation of either predicate are relayed&#10;     * to the caller; if evaluation of this predicate throws an exception, the&#10;     * {@code other} predicate will not be evaluated.&#10;     *&#10;     * @param other a predicate that will be logically-ORed with this&#10;     *              predicate&#10;     * @return a composed predicate that represents the short-circuiting logical&#10;     * OR of this predicate and the {@code other} predicate&#10;     * @throws NullPointerException if other is null&#10;     "
  ]
  node [
    id 2049
    label "filter"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2050
    label "java.util.stream.Stream"
    type "class"
    comment "&#10; * A sequence of elements supporting sequential and parallel aggregate&#10; * operations.  The following example illustrates an aggregate operation using&#10; * {@link Stream} and {@link IntStream}:&#10; *&#10; * <pre>{@code&#10; *     int sum = widgets.stream()&#10; *                      .filter(w -> w.getColor() == RED)&#10; *                      .mapToInt(w -> w.getWeight())&#10; *                      .sum();&#10; * }</pre>&#10; *&#10; * In this example, {@code widgets} is a {@code Collection<Widget>}.  We create&#10; * a stream of {@code Widget} objects via {@link Collection#stream Collection.stream()},&#10; * filter it to produce a stream containing only the red widgets, and then&#10; * transform it into a stream of {@code int} values representing the weight of&#10; * each red widget. Then this stream is summed to produce a total weight.&#10; *&#10; * <p>In addition to {@code Stream}, which is a stream of object references,&#10; * there are primitive specializations for {@link IntStream}, {@link LongStream},&#10; * and {@link DoubleStream}, all of which are referred to as &#34;streams&#34; and&#10; * conform to the characteristics and restrictions described here.&#10; *&#10; * <p>To perform a computation, stream&#10; * <a href=&#34;package-summary.html#StreamOps&#34;>operations</a> are composed into a&#10; * <em>stream pipeline</em>.  A stream pipeline consists of a source (which&#10; * might be an array, a collection, a generator function, an I/O channel,&#10; * etc), zero or more <em>intermediate operations</em> (which transform a&#10; * stream into another stream, such as {@link Stream#filter(Predicate)}), and a&#10; * <em>terminal operation</em> (which produces a result or side-effect, such&#10; * as {@link Stream#count()} or {@link Stream#forEach(Consumer)}).&#10; * Streams are lazy; computation on the source data is only performed when the&#10; * terminal operation is initiated, and source elements are consumed only&#10; * as needed.&#10; *&#10; * <p>A stream implementation is permitted significant latitude in optimizing&#10; * the computation of the result.  For example, a stream implementation is free&#10; * to elide operations (or entire stages) from a stream pipeline -- and&#10; * therefore elide invocation of behavioral parameters -- if it can prove that&#10; * it would not affect the result of the computation.  This means that&#10; * side-effects of behavioral parameters may not always be executed and should&#10; * not be relied upon, unless otherwise specified (such as by the terminal&#10; * operations {@code forEach} and {@code forEachOrdered}). (For a specific&#10; * example of such an optimization, see the API note documented on the&#10; * {@link #count} operation.  For more detail, see the&#10; * <a href=&#34;package-summary.html#SideEffects&#34;>side-effects</a> section of the&#10; * stream package documentation.)&#10; *&#10; * <p>Collections and streams, while bearing some superficial similarities,&#10; * have different goals.  Collections are primarily concerned with the efficient&#10; * management of, and access to, their elements.  By contrast, streams do not&#10; * provide a means to directly access or manipulate their elements, and are&#10; * instead concerned with declaratively describing their source and the&#10; * computational operations which will be performed in aggregate on that source.&#10; * However, if the provided stream operations do not offer the desired&#10; * functionality, the {@link #iterator()} and {@link #spliterator()} operations&#10; * can be used to perform a controlled traversal.&#10; *&#10; * <p>A stream pipeline, like the &#34;widgets&#34; example above, can be viewed as&#10; * a <em>query</em> on the stream source.  Unless the source was explicitly&#10; * designed for concurrent modification (such as a {@link ConcurrentHashMap}),&#10; * unpredictable or erroneous behavior may result from modifying the stream&#10; * source while it is being queried.&#10; *&#10; * <p>Most stream operations accept parameters that describe user-specified&#10; * behavior, such as the lambda expression {@code w -> w.getWeight()} passed to&#10; * {@code mapToInt} in the example above.  To preserve correct behavior,&#10; * these <em>behavioral parameters</em>:&#10; * <ul>&#10; * <li>must be <a href=&#34;package-summary.html#NonInterference&#34;>non-interfering</a>&#10; * (they do not modify the stream source); and</li>&#10; * <li>in most cases must be <a href=&#34;package-summary.html#Statelessness&#34;>stateless</a>&#10; * (their result should not depend on any state that might change during execution&#10; * of the stream pipeline).</li>&#10; * </ul>&#10; *&#10; * <p>Such parameters are always instances of a&#10; * <a href=&#34;../function/package-summary.html&#34;>functional interface</a> such&#10; * as {@link java.util.function.Function}, and are often lambda expressions or&#10; * method references.  Unless otherwise specified these parameters must be&#10; * <em>non-null</em>.&#10; *&#10; * <p>A stream should be operated on (invoking an intermediate or terminal stream&#10; * operation) only once.  This rules out, for example, &#34;forked&#34; streams, where&#10; * the same source feeds two or more pipelines, or multiple traversals of the&#10; * same stream.  A stream implementation may throw {@link IllegalStateException}&#10; * if it detects that the stream is being reused. However, since some stream&#10; * operations may return their receiver rather than a new stream object, it may&#10; * not be possible to detect reuse in all cases.&#10; *&#10; * <p>Streams have a {@link #close()} method and implement {@link AutoCloseable}.&#10; * Operating on a stream after it has been closed will throw {@link IllegalStateException}.&#10; * Most stream instances do not actually need to be closed after use, as they&#10; * are backed by collections, arrays, or generating functions, which require no&#10; * special resource management. Generally, only streams whose source is an IO channel,&#10; * such as those returned by {@link Files#lines(Path)}, will require closing. If a&#10; * stream does require closing, it must be opened as a resource within a try-with-resources&#10; * statement or similar control structure to ensure that it is closed promptly after its&#10; * operations have completed.&#10; *&#10; * <p>Stream pipelines may execute either sequentially or in&#10; * <a href=&#34;package-summary.html#Parallelism&#34;>parallel</a>.  This&#10; * execution mode is a property of the stream.  Streams are created&#10; * with an initial choice of sequential or parallel execution.  (For example,&#10; * {@link Collection#stream() Collection.stream()} creates a sequential stream,&#10; * and {@link Collection#parallelStream() Collection.parallelStream()} creates&#10; * a parallel one.)  This choice of execution mode may be modified by the&#10; * {@link #sequential()} or {@link #parallel()} methods, and may be queried with&#10; * the {@link #isParallel()} method.&#10; *&#10; * @param <T> the type of the stream elements&#10; * @since 1.8&#10; * @see IntStream&#10; * @see LongStream&#10; * @see DoubleStream&#10; * @see <a href=&#34;package-summary.html&#34;>java.util.stream</a>&#10; "
  ]
  node [
    id 2051
    label " Stream<T> filter(Predicate<? super T> predicate)"
    type "method"
    comment "&#10;     * Returns a stream consisting of the elements of this stream that match&#10;     * the given predicate.&#10;     *&#10;     * <p>This is an <a href=&#34;package-summary.html#StreamOps&#34;>intermediate&#10;     * operation</a>.&#10;     *&#10;     * @param predicate a <a href=&#34;package-summary.html#NonInterference&#34;>non-interfering</a>,&#10;     *                  <a href=&#34;package-summary.html#Statelessness&#34;>stateless</a>&#10;     *                  predicate to apply to each element to determine if it&#10;     *                  should be included&#10;     * @return the new stream&#10;     "
  ]
  node [
    id 2052
    label " Stream<R> map(Function<? super T, ? extends R> mapper)"
    type "method"
    comment "&#10;     * Returns a stream consisting of the results of applying the given&#10;     * function to the elements of this stream.&#10;     *&#10;     * <p>This is an <a href=&#34;package-summary.html#StreamOps&#34;>intermediate&#10;     * operation</a>.&#10;     *&#10;     * @param <R> The element type of the new stream&#10;     * @param mapper a <a href=&#34;package-summary.html#NonInterference&#34;>non-interfering</a>,&#10;     *               <a href=&#34;package-summary.html#Statelessness&#34;>stateless</a>&#10;     *               function to apply to each element&#10;     * @return the new stream&#10;     "
  ]
  node [
    id 2053
    label " IntStream mapToInt(ToIntFunction<? super T> mapper)"
    type "method"
    comment "&#10;     * Returns an {@code IntStream} consisting of the results of applying the&#10;     * given function to the elements of this stream.&#10;     *&#10;     * <p>This is an <a href=&#34;package-summary.html#StreamOps&#34;>&#10;     *     intermediate operation</a>.&#10;     *&#10;     * @param mapper a <a href=&#34;package-summary.html#NonInterference&#34;>non-interfering</a>,&#10;     *               <a href=&#34;package-summary.html#Statelessness&#34;>stateless</a>&#10;     *               function to apply to each element&#10;     * @return the new stream&#10;     "
  ]
  node [
    id 2054
    label " LongStream mapToLong(ToLongFunction<? super T> mapper)"
    type "method"
    comment "&#10;     * Returns a {@code LongStream} consisting of the results of applying the&#10;     * given function to the elements of this stream.&#10;     *&#10;     * <p>This is an <a href=&#34;package-summary.html#StreamOps&#34;>intermediate&#10;     * operation</a>.&#10;     *&#10;     * @param mapper a <a href=&#34;package-summary.html#NonInterference&#34;>non-interfering</a>,&#10;     *               <a href=&#34;package-summary.html#Statelessness&#34;>stateless</a>&#10;     *               function to apply to each element&#10;     * @return the new stream&#10;     "
  ]
  node [
    id 2055
    label " DoubleStream mapToDouble(ToDoubleFunction<? super T> mapper)"
    type "method"
    comment "&#10;     * Returns a {@code DoubleStream} consisting of the results of applying the&#10;     * given function to the elements of this stream.&#10;     *&#10;     * <p>This is an <a href=&#34;package-summary.html#StreamOps&#34;>intermediate&#10;     * operation</a>.&#10;     *&#10;     * @param mapper a <a href=&#34;package-summary.html#NonInterference&#34;>non-interfering</a>,&#10;     *               <a href=&#34;package-summary.html#Statelessness&#34;>stateless</a>&#10;     *               function to apply to each element&#10;     * @return the new stream&#10;     "
  ]
  node [
    id 2056
    label " Stream<R> flatMap(Function<? super T, ? extends Stream<? extends R>> mapper)"
    type "method"
    comment "&#10;     * Returns a stream consisting of the results of replacing each element of&#10;     * this stream with the contents of a mapped stream produced by applying&#10;     * the provided mapping function to each element.  Each mapped stream is&#10;     * {@link java.util.stream.BaseStream#close() closed} after its contents&#10;     * have been placed into this stream.  (If a mapped stream is {@code null}&#10;     * an empty stream is used, instead.)&#10;     *&#10;     * <p>This is an <a href=&#34;package-summary.html#StreamOps&#34;>intermediate&#10;     * operation</a>.&#10;     *&#10;     * @apiNote&#10;     * The {@code flatMap()} operation has the effect of applying a one-to-many&#10;     * transformation to the elements of the stream, and then flattening the&#10;     * resulting elements into a new stream.&#10;     *&#10;     * <p><b>Examples.</b>&#10;     *&#10;     * <p>If {@code orders} is a stream of purchase orders, and each purchase&#10;     * order contains a collection of line items, then the following produces a&#10;     * stream containing all the line items in all the orders:&#10;     * <pre>{@code&#10;     *     orders.flatMap(order -> order.getLineItems().stream())...&#10;     * }</pre>&#10;     *&#10;     * <p>If {@code path} is the path to a file, then the following produces a&#10;     * stream of the {@code words} contained in that file:&#10;     * <pre>{@code&#10;     *     Stream<String> lines = Files.lines(path, StandardCharsets.UTF_8);&#10;     *     Stream<String> words = lines.flatMap(line -> Stream.of(line.split(&#34; +&#34;)));&#10;     * }</pre>&#10;     * The {@code mapper} function passed to {@code flatMap} splits a line,&#10;     * using a simple regular expression, into an array of words, and then&#10;     * creates a stream of words from that array.&#10;     *&#10;     * @param <R> The element type of the new stream&#10;     * @param mapper a <a href=&#34;package-summary.html#NonInterference&#34;>non-interfering</a>,&#10;     *               <a href=&#34;package-summary.html#Statelessness&#34;>stateless</a>&#10;     *               function to apply to each element which produces a stream&#10;     *               of new values&#10;     * @return the new stream&#10;     * @see #mapMulti&#10;     "
  ]
  node [
    id 2057
    label " IntStream flatMapToInt(Function<? super T, ? extends IntStream> mapper)"
    type "method"
    comment "&#10;     * Returns an {@code IntStream} consisting of the results of replacing each&#10;     * element of this stream with the contents of a mapped stream produced by&#10;     * applying the provided mapping function to each element.  Each mapped&#10;     * stream is {@link java.util.stream.BaseStream#close() closed} after its&#10;     * contents have been placed into this stream.  (If a mapped stream is&#10;     * {@code null} an empty stream is used, instead.)&#10;     *&#10;     * <p>This is an <a href=&#34;package-summary.html#StreamOps&#34;>intermediate&#10;     * operation</a>.&#10;     *&#10;     * @param mapper a <a href=&#34;package-summary.html#NonInterference&#34;>non-interfering</a>,&#10;     *               <a href=&#34;package-summary.html#Statelessness&#34;>stateless</a>&#10;     *               function to apply to each element which produces a stream&#10;     *               of new values&#10;     * @return the new stream&#10;     * @see #flatMap(Function)&#10;     "
  ]
  node [
    id 2058
    label " LongStream flatMapToLong(Function<? super T, ? extends LongStream> mapper)"
    type "method"
    comment "&#10;     * Returns an {@code LongStream} consisting of the results of replacing each&#10;     * element of this stream with the contents of a mapped stream produced by&#10;     * applying the provided mapping function to each element.  Each mapped&#10;     * stream is {@link java.util.stream.BaseStream#close() closed} after its&#10;     * contents have been placed into this stream.  (If a mapped stream is&#10;     * {@code null} an empty stream is used, instead.)&#10;     *&#10;     * <p>This is an <a href=&#34;package-summary.html#StreamOps&#34;>intermediate&#10;     * operation</a>.&#10;     *&#10;     * @param mapper a <a href=&#34;package-summary.html#NonInterference&#34;>non-interfering</a>,&#10;     *               <a href=&#34;package-summary.html#Statelessness&#34;>stateless</a>&#10;     *               function to apply to each element which produces a stream&#10;     *               of new values&#10;     * @return the new stream&#10;     * @see #flatMap(Function)&#10;     "
  ]
  node [
    id 2059
    label " DoubleStream flatMapToDouble(Function<? super T, ? extends DoubleStream> mapper)"
    type "method"
    comment "&#10;     * Returns an {@code DoubleStream} consisting of the results of replacing&#10;     * each element of this stream with the contents of a mapped stream produced&#10;     * by applying the provided mapping function to each element.  Each mapped&#10;     * stream is {@link java.util.stream.BaseStream#close() closed} after its&#10;     * contents have placed been into this stream.  (If a mapped stream is&#10;     * {@code null} an empty stream is used, instead.)&#10;     *&#10;     * <p>This is an <a href=&#34;package-summary.html#StreamOps&#34;>intermediate&#10;     * operation</a>.&#10;     *&#10;     * @param mapper a <a href=&#34;package-summary.html#NonInterference&#34;>non-interfering</a>,&#10;     *               <a href=&#34;package-summary.html#Statelessness&#34;>stateless</a>&#10;     *               function to apply to each element which produces a stream&#10;     *               of new values&#10;     * @return the new stream&#10;     * @see #flatMap(Function)&#10;     "
  ]
  node [
    id 2060
    label " Stream<R> mapMulti(BiConsumer<? super T, ? super Consumer<R>> mapper)"
    type "method"
    comment "&#10;     * Returns a stream consisting of the results of replacing each element of&#10;     * this stream with multiple elements, specifically zero or more elements.&#10;     * Replacement is performed by applying the provided mapping function to each&#10;     * element in conjunction with a {@linkplain Consumer consumer} argument&#10;     * that accepts replacement elements. The mapping function calls the consumer&#10;     * zero or more times to provide the replacement elements.&#10;     *&#10;     * <p>This is an <a href=&#34;package-summary.html#StreamOps&#34;>intermediate&#10;     * operation</a>.&#10;     *&#10;     * <p>If the {@linkplain Consumer consumer} argument is used outside the scope of&#10;     * its application to the mapping function, the results are undefined.&#10;     *&#10;     * @implSpec&#10;     * The default implementation invokes {@link #flatMap flatMap} on this stream,&#10;     * passing a function that behaves as follows. First, it calls the mapper function&#10;     * with a {@code Consumer} that accumulates replacement elements into a newly created&#10;     * internal buffer. When the mapper function returns, it creates a stream from the&#10;     * internal buffer. Finally, it returns this stream to {@code flatMap}.&#10;     *&#10;     * @apiNote&#10;     * This method is similar to {@link #flatMap flatMap} in that it applies a one-to-many&#10;     * transformation to the elements of the stream and flattens the result elements&#10;     * into a new stream. This method is preferable to {@code flatMap} in the following&#10;     * circumstances:&#10;     * <ul>&#10;     * <li>When replacing each stream element with a small (possibly zero) number of&#10;     * elements. Using this method avoids the overhead of creating a new Stream instance&#10;     * for every group of result elements, as required by {@code flatMap}.</li>&#10;     * <li>When it is easier to use an imperative approach for generating result&#10;     * elements than it is to return them in the form of a Stream.</li>&#10;     * </ul>&#10;     *&#10;     * <p>If a lambda expression is provided as the mapper function argument, additional type&#10;     * information may be necessary for proper inference of the element type {@code <R>} of&#10;     * the returned stream. This can be provided in the form of explicit type declarations for&#10;     * the lambda parameters or as an explicit type argument to the {@code mapMulti} call.&#10;     *&#10;     * <p><b>Examples</b>&#10;     *&#10;     * <p>Given a stream of {@code Number} objects, the following&#10;     * produces a list containing only the {@code Integer} objects:&#10;     * <pre>{@code&#10;     *     Stream<Number> numbers = ... ;&#10;     *     List<Integer> integers = numbers.<Integer>mapMulti((number, consumer) -> {&#10;     *             if (number instanceof Integer i)&#10;     *                 consumer.accept(i);&#10;     *         })&#10;     *         .collect(Collectors.toList());&#10;     * }</pre>&#10;     *&#10;     * <p>If we have an {@code Iterable<Object>} and need to recursively expand its elements&#10;     * that are themselves of type {@code Iterable}, we can use {@code mapMulti} as follows:&#10;     * <pre>{@code&#10;     * class C {&#10;     *     static void expandIterable(Object e, Consumer<Object> c) {&#10;     *         if (e instanceof Iterable<?> elements) {&#10;     *             for (Object ie : elements) {&#10;     *                 expandIterable(ie, c);&#10;     *             }&#10;     *         } else if (e != null) {&#10;     *             c.accept(e);&#10;     *         }&#10;     *     }&#10;     *&#10;     *     public static void main(String[] args) {&#10;     *         var nestedList = List.of(1, List.of(2, List.of(3, 4)), 5);&#10;     *         Stream<Object> expandedStream = nestedList.stream().mapMulti(C::expandIterable);&#10;     *     }&#10;     * }&#10;     * }</pre>&#10;     *&#10;     * @param <R> The element type of the new stream&#10;     * @param mapper a <a href=&#34;package-summary.html#NonInterference&#34;>non-interfering</a>,&#10;     *               <a href=&#34;package-summary.html#Statelessness&#34;>stateless</a>&#10;     *               function that generates replacement elements&#10;     * @return the new stream&#10;     * @see #flatMap flatMap&#10;     * @since 16&#10;     "
  ]
  node [
    id 2061
    label " IntStream mapMultiToInt(BiConsumer<? super T, ? super IntConsumer> mapper)"
    type "method"
    comment "&#10;     * Returns an {@code IntStream} consisting of the results of replacing each&#10;     * element of this stream with multiple elements, specifically zero or more&#10;     * elements.&#10;     * Replacement is performed by applying the provided mapping function to each&#10;     * element in conjunction with a {@linkplain IntConsumer consumer} argument&#10;     * that accepts replacement elements. The mapping function calls the consumer&#10;     * zero or more times to provide the replacement elements.&#10;     *&#10;     * <p>This is an <a href=&#34;package-summary.html#StreamOps&#34;>intermediate&#10;     * operation</a>.&#10;     *&#10;     * <p>If the {@linkplain IntConsumer consumer} argument is used outside the scope of&#10;     * its application to the mapping function, the results are undefined.&#10;     *&#10;     * @implSpec&#10;     * The default implementation invokes {@link #flatMapToInt flatMapToInt} on this stream,&#10;     * passing a function that behaves as follows. First, it calls the mapper function&#10;     * with an {@code IntConsumer} that accumulates replacement elements into a newly created&#10;     * internal buffer. When the mapper function returns, it creates an {@code IntStream} from&#10;     * the internal buffer. Finally, it returns this stream to {@code flatMapToInt}.&#10;     *&#10;     * @param mapper a <a href=&#34;package-summary.html#NonInterference&#34;>non-interfering</a>,&#10;     *               <a href=&#34;package-summary.html#Statelessness&#34;>stateless</a>&#10;     *               function that generates replacement elements&#10;     * @return the new stream&#10;     * @see #mapMulti mapMulti&#10;     * @since 16&#10;     "
  ]
  node [
    id 2062
    label "flatMapToInt"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2063
    label " LongStream mapMultiToLong(BiConsumer<? super T, ? super LongConsumer> mapper)"
    type "method"
    comment "&#10;     * Returns a {@code LongStream} consisting of the results of replacing each&#10;     * element of this stream with multiple elements, specifically zero or more&#10;     * elements.&#10;     * Replacement is performed by applying the provided mapping function to each&#10;     * element in conjunction with a {@linkplain LongConsumer consumer} argument&#10;     * that accepts replacement elements. The mapping function calls the consumer&#10;     * zero or more times to provide the replacement elements.&#10;     *&#10;     * <p>This is an <a href=&#34;package-summary.html#StreamOps&#34;>intermediate&#10;     * operation</a>.&#10;     *&#10;     * <p>If the {@linkplain LongConsumer consumer} argument is used outside the scope of&#10;     * its application to the mapping function, the results are undefined.&#10;     *&#10;     * @implSpec&#10;     * The default implementation invokes {@link #flatMapToLong flatMapToLong} on this stream,&#10;     * passing a function that behaves as follows. First, it calls the mapper function&#10;     * with a {@code LongConsumer} that accumulates replacement elements into a newly created&#10;     * internal buffer. When the mapper function returns, it creates a {@code LongStream} from&#10;     * the internal buffer. Finally, it returns this stream to {@code flatMapToLong}.&#10;     *&#10;     * @param mapper a <a href=&#34;package-summary.html#NonInterference&#34;>non-interfering</a>,&#10;     *               <a href=&#34;package-summary.html#Statelessness&#34;>stateless</a>&#10;     *               function that generates replacement elements&#10;     * @return the new stream&#10;     * @see #mapMulti mapMulti&#10;     * @since 16&#10;     "
  ]
  node [
    id 2064
    label "flatMapToLong"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2065
    label " DoubleStream mapMultiToDouble(BiConsumer<? super T, ? super DoubleConsumer> mapper)"
    type "method"
    comment "&#10;     * Returns a {@code DoubleStream} consisting of the results of replacing each&#10;     * element of this stream with multiple elements, specifically zero or more&#10;     * elements.&#10;     * Replacement is performed by applying the provided mapping function to each&#10;     * element in conjunction with a {@linkplain DoubleConsumer consumer} argument&#10;     * that accepts replacement elements. The mapping function calls the consumer&#10;     * zero or more times to provide the replacement elements.&#10;     *&#10;     * <p>This is an <a href=&#34;package-summary.html#StreamOps&#34;>intermediate&#10;     * operation</a>.&#10;     *&#10;     * <p>If the {@linkplain DoubleConsumer consumer} argument is used outside the scope of&#10;     * its application to the mapping function, the results are undefined.&#10;     *&#10;     * @implSpec&#10;     * The default implementation invokes {@link #flatMapToDouble flatMapToDouble} on this stream,&#10;     * passing a function that behaves as follows. First, it calls the mapper function&#10;     * with an {@code DoubleConsumer} that accumulates replacement elements into a newly created&#10;     * internal buffer. When the mapper function returns, it creates a {@code DoubleStream} from&#10;     * the internal buffer. Finally, it returns this stream to {@code flatMapToDouble}.&#10;     *&#10;     * @param mapper a <a href=&#34;package-summary.html#NonInterference&#34;>non-interfering</a>,&#10;     *               <a href=&#34;package-summary.html#Statelessness&#34;>stateless</a>&#10;     *               function that generates replacement elements&#10;     * @return the new stream&#10;     * @see #mapMulti mapMulti&#10;     * @since 16&#10;     "
  ]
  node [
    id 2066
    label "flatMapToDouble"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2067
    label " Stream<T> distinct()"
    type "method"
    comment "&#10;     * Returns a stream consisting of the distinct elements (according to&#10;     * {@link Object#equals(Object)}) of this stream.&#10;     *&#10;     * <p>For ordered streams, the selection of distinct elements is stable&#10;     * (for duplicated elements, the element appearing first in the encounter&#10;     * order is preserved.)  For unordered streams, no stability guarantees&#10;     * are made.&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>stateful&#10;     * intermediate operation</a>.&#10;     *&#10;     * @apiNote&#10;     * Preserving stability for {@code distinct()} in parallel pipelines is&#10;     * relatively expensive (requires that the operation act as a full barrier,&#10;     * with substantial buffering overhead), and stability is often not needed.&#10;     * Using an unordered stream source (such as {@link #generate(Supplier)})&#10;     * or removing the ordering constraint with {@link #unordered()} may result&#10;     * in significantly more efficient execution for {@code distinct()} in parallel&#10;     * pipelines, if the semantics of your situation permit.  If consistency&#10;     * with encounter order is required, and you are experiencing poor performance&#10;     * or memory utilization with {@code distinct()} in parallel pipelines,&#10;     * switching to sequential execution with {@link #sequential()} may improve&#10;     * performance.&#10;     *&#10;     * @return the new stream&#10;     "
  ]
  node [
    id 2068
    label "generate(Supplier)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2069
    label "unordered()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2070
    label "sequential()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2071
    label " Stream<T> sorted()"
    type "method"
    comment "&#10;     * Returns a stream consisting of the elements of this stream, sorted&#10;     * according to natural order.  If the elements of this stream are not&#10;     * {@code Comparable}, a {@code java.lang.ClassCastException} may be thrown&#10;     * when the terminal operation is executed.&#10;     *&#10;     * <p>For ordered streams, the sort is stable.  For unordered streams, no&#10;     * stability guarantees are made.&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>stateful&#10;     * intermediate operation</a>.&#10;     *&#10;     * @return the new stream&#10;     "
  ]
  node [
    id 2072
    label " Stream<T> sorted(Comparator<? super T> comparator)"
    type "method"
    comment "&#10;     * Returns a stream consisting of the elements of this stream, sorted&#10;     * according to the provided {@code Comparator}.&#10;     *&#10;     * <p>For ordered streams, the sort is stable.  For unordered streams, no&#10;     * stability guarantees are made.&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>stateful&#10;     * intermediate operation</a>.&#10;     *&#10;     * @param comparator a <a href=&#34;package-summary.html#NonInterference&#34;>non-interfering</a>,&#10;     *                   <a href=&#34;package-summary.html#Statelessness&#34;>stateless</a>&#10;     *                   {@code Comparator} to be used to compare stream elements&#10;     * @return the new stream&#10;     "
  ]
  node [
    id 2073
    label " Stream<T> peek(Consumer<? super T> action)"
    type "method"
    comment "&#10;     * Returns a stream consisting of the elements of this stream, additionally&#10;     * performing the provided action on each element as elements are consumed&#10;     * from the resulting stream.&#10;     *&#10;     * <p>This is an <a href=&#34;package-summary.html#StreamOps&#34;>intermediate&#10;     * operation</a>.&#10;     *&#10;     * <p>For parallel stream pipelines, the action may be called at&#10;     * whatever time and in whatever thread the element is made available by the&#10;     * upstream operation.  If the action modifies shared state,&#10;     * it is responsible for providing the required synchronization.&#10;     *&#10;     * @apiNote This method exists mainly to support debugging, where you want&#10;     * to see the elements as they flow past a certain point in a pipeline:&#10;     * <pre>{@code&#10;     *     Stream.of(&#34;one&#34;, &#34;two&#34;, &#34;three&#34;, &#34;four&#34;)&#10;     *         .filter(e -> e.length() > 3)&#10;     *         .peek(e -> System.out.println(&#34;Filtered value: &#34; + e))&#10;     *         .map(String::toUpperCase)&#10;     *         .peek(e -> System.out.println(&#34;Mapped value: &#34; + e))&#10;     *         .collect(Collectors.toList());&#10;     * }</pre>&#10;     *&#10;     * <p>In cases where the stream implementation is able to optimize away the&#10;     * production of some or all the elements (such as with short-circuiting&#10;     * operations like {@code findFirst}, or in the example described in&#10;     * {@link #count}), the action will not be invoked for those elements.&#10;     *&#10;     * @param action a <a href=&#34;package-summary.html#NonInterference&#34;>&#10;     *                 non-interfering</a> action to perform on the elements as&#10;     *                 they are consumed from the stream&#10;     * @return the new stream&#10;     "
  ]
  node [
    id 2074
    label "count"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2075
    label " Stream<T> limit(long maxSize)"
    type "method"
    comment "&#10;     * Returns a stream consisting of the elements of this stream, truncated&#10;     * to be no longer than {@code maxSize} in length.&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>short-circuiting&#10;     * stateful intermediate operation</a>.&#10;     *&#10;     * @apiNote&#10;     * While {@code limit()} is generally a cheap operation on sequential&#10;     * stream pipelines, it can be quite expensive on ordered parallel pipelines,&#10;     * especially for large values of {@code maxSize}, since {@code limit(n)}&#10;     * is constrained to return not just any <em>n</em> elements, but the&#10;     * <em>first n</em> elements in the encounter order.  Using an unordered&#10;     * stream source (such as {@link #generate(Supplier)}) or removing the&#10;     * ordering constraint with {@link #unordered()} may result in significant&#10;     * speedups of {@code limit()} in parallel pipelines, if the semantics of&#10;     * your situation permit.  If consistency with encounter order is required,&#10;     * and you are experiencing poor performance or memory utilization with&#10;     * {@code limit()} in parallel pipelines, switching to sequential execution&#10;     * with {@link #sequential()} may improve performance.&#10;     *&#10;     * @param maxSize the number of elements the stream should be limited to&#10;     * @return the new stream&#10;     * @throws IllegalArgumentException if {@code maxSize} is negative&#10;     "
  ]
  node [
    id 2076
    label " Stream<T> skip(long n)"
    type "method"
    comment "&#10;     * Returns a stream consisting of the remaining elements of this stream&#10;     * after discarding the first {@code n} elements of the stream.&#10;     * If this stream contains fewer than {@code n} elements then an&#10;     * empty stream will be returned.&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>stateful&#10;     * intermediate operation</a>.&#10;     *&#10;     * @apiNote&#10;     * While {@code skip()} is generally a cheap operation on sequential&#10;     * stream pipelines, it can be quite expensive on ordered parallel pipelines,&#10;     * especially for large values of {@code n}, since {@code skip(n)}&#10;     * is constrained to skip not just any <em>n</em> elements, but the&#10;     * <em>first n</em> elements in the encounter order.  Using an unordered&#10;     * stream source (such as {@link #generate(Supplier)}) or removing the&#10;     * ordering constraint with {@link #unordered()} may result in significant&#10;     * speedups of {@code skip()} in parallel pipelines, if the semantics of&#10;     * your situation permit.  If consistency with encounter order is required,&#10;     * and you are experiencing poor performance or memory utilization with&#10;     * {@code skip()} in parallel pipelines, switching to sequential execution&#10;     * with {@link #sequential()} may improve performance.&#10;     *&#10;     * @param n the number of leading elements to skip&#10;     * @return the new stream&#10;     * @throws IllegalArgumentException if {@code n} is negative&#10;     "
  ]
  node [
    id 2077
    label " Stream<T> takeWhile(Predicate<? super T> predicate)"
    type "method"
    comment "&#10;     * Returns, if this stream is ordered, a stream consisting of the longest&#10;     * prefix of elements taken from this stream that match the given predicate.&#10;     * Otherwise returns, if this stream is unordered, a stream consisting of a&#10;     * subset of elements taken from this stream that match the given predicate.&#10;     *&#10;     * <p>If this stream is ordered then the longest prefix is a contiguous&#10;     * sequence of elements of this stream that match the given predicate.  The&#10;     * first element of the sequence is the first element of this stream, and&#10;     * the element immediately following the last element of the sequence does&#10;     * not match the given predicate.&#10;     *&#10;     * <p>If this stream is unordered, and some (but not all) elements of this&#10;     * stream match the given predicate, then the behavior of this operation is&#10;     * nondeterministic; it is free to take any subset of matching elements&#10;     * (which includes the empty set).&#10;     *&#10;     * <p>Independent of whether this stream is ordered or unordered if all&#10;     * elements of this stream match the given predicate then this operation&#10;     * takes all elements (the result is the same as the input), or if no&#10;     * elements of the stream match the given predicate then no elements are&#10;     * taken (the result is an empty stream).&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>short-circuiting&#10;     * stateful intermediate operation</a>.&#10;     *&#10;     * @implSpec&#10;     * The default implementation obtains the {@link #spliterator() spliterator}&#10;     * of this stream, wraps that spliterator so as to support the semantics&#10;     * of this operation on traversal, and returns a new stream associated with&#10;     * the wrapped spliterator.  The returned stream preserves the execution&#10;     * characteristics of this stream (namely parallel or sequential execution&#10;     * as per {@link #isParallel()}) but the wrapped spliterator may choose to&#10;     * not support splitting.  When the returned stream is closed, the close&#10;     * handlers for both the returned and this stream are invoked.&#10;     *&#10;     * @apiNote&#10;     * While {@code takeWhile()} is generally a cheap operation on sequential&#10;     * stream pipelines, it can be quite expensive on ordered parallel&#10;     * pipelines, since the operation is constrained to return not just any&#10;     * valid prefix, but the longest prefix of elements in the encounter order.&#10;     * Using an unordered stream source (such as {@link #generate(Supplier)}) or&#10;     * removing the ordering constraint with {@link #unordered()} may result in&#10;     * significant speedups of {@code takeWhile()} in parallel pipelines, if the&#10;     * semantics of your situation permit.  If consistency with encounter order&#10;     * is required, and you are experiencing poor performance or memory&#10;     * utilization with {@code takeWhile()} in parallel pipelines, switching to&#10;     * sequential execution with {@link #sequential()} may improve performance.&#10;     *&#10;     * @param predicate a <a href=&#34;package-summary.html#NonInterference&#34;>non-interfering</a>,&#10;     *                  <a href=&#34;package-summary.html#Statelessness&#34;>stateless</a>&#10;     *                  predicate to apply to elements to determine the longest&#10;     *                  prefix of elements.&#10;     * @return the new stream&#10;     * @since 9&#10;     "
  ]
  node [
    id 2078
    label "spliterator()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2079
    label "isParallel()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2080
    label " Stream<T> dropWhile(Predicate<? super T> predicate)"
    type "method"
    comment "&#10;     * Returns, if this stream is ordered, a stream consisting of the remaining&#10;     * elements of this stream after dropping the longest prefix of elements&#10;     * that match the given predicate.  Otherwise returns, if this stream is&#10;     * unordered, a stream consisting of the remaining elements of this stream&#10;     * after dropping a subset of elements that match the given predicate.&#10;     *&#10;     * <p>If this stream is ordered then the longest prefix is a contiguous&#10;     * sequence of elements of this stream that match the given predicate.  The&#10;     * first element of the sequence is the first element of this stream, and&#10;     * the element immediately following the last element of the sequence does&#10;     * not match the given predicate.&#10;     *&#10;     * <p>If this stream is unordered, and some (but not all) elements of this&#10;     * stream match the given predicate, then the behavior of this operation is&#10;     * nondeterministic; it is free to drop any subset of matching elements&#10;     * (which includes the empty set).&#10;     *&#10;     * <p>Independent of whether this stream is ordered or unordered if all&#10;     * elements of this stream match the given predicate then this operation&#10;     * drops all elements (the result is an empty stream), or if no elements of&#10;     * the stream match the given predicate then no elements are dropped (the&#10;     * result is the same as the input).&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>stateful&#10;     * intermediate operation</a>.&#10;     *&#10;     * @implSpec&#10;     * The default implementation obtains the {@link #spliterator() spliterator}&#10;     * of this stream, wraps that spliterator so as to support the semantics&#10;     * of this operation on traversal, and returns a new stream associated with&#10;     * the wrapped spliterator.  The returned stream preserves the execution&#10;     * characteristics of this stream (namely parallel or sequential execution&#10;     * as per {@link #isParallel()}) but the wrapped spliterator may choose to&#10;     * not support splitting.  When the returned stream is closed, the close&#10;     * handlers for both the returned and this stream are invoked.&#10;     *&#10;     * @apiNote&#10;     * While {@code dropWhile()} is generally a cheap operation on sequential&#10;     * stream pipelines, it can be quite expensive on ordered parallel&#10;     * pipelines, since the operation is constrained to return not just any&#10;     * valid prefix, but the longest prefix of elements in the encounter order.&#10;     * Using an unordered stream source (such as {@link #generate(Supplier)}) or&#10;     * removing the ordering constraint with {@link #unordered()} may result in&#10;     * significant speedups of {@code dropWhile()} in parallel pipelines, if the&#10;     * semantics of your situation permit.  If consistency with encounter order&#10;     * is required, and you are experiencing poor performance or memory&#10;     * utilization with {@code dropWhile()} in parallel pipelines, switching to&#10;     * sequential execution with {@link #sequential()} may improve performance.&#10;     *&#10;     * @param predicate a <a href=&#34;package-summary.html#NonInterference&#34;>non-interfering</a>,&#10;     *                  <a href=&#34;package-summary.html#Statelessness&#34;>stateless</a>&#10;     *                  predicate to apply to elements to determine the longest&#10;     *                  prefix of elements.&#10;     * @return the new stream&#10;     * @since 9&#10;     "
  ]
  node [
    id 2081
    label " void forEach(Consumer<? super T> action)"
    type "method"
    comment "&#10;     * Performs an action for each element of this stream.&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>terminal&#10;     * operation</a>.&#10;     *&#10;     * <p>The behavior of this operation is explicitly nondeterministic.&#10;     * For parallel stream pipelines, this operation does <em>not</em>&#10;     * guarantee to respect the encounter order of the stream, as doing so&#10;     * would sacrifice the benefit of parallelism.  For any given element, the&#10;     * action may be performed at whatever time and in whatever thread the&#10;     * library chooses.  If the action accesses shared state, it is&#10;     * responsible for providing the required synchronization.&#10;     *&#10;     * @param action a <a href=&#34;package-summary.html#NonInterference&#34;>&#10;     *               non-interfering</a> action to perform on the elements&#10;     "
  ]
  node [
    id 2082
    label " void forEachOrdered(Consumer<? super T> action)"
    type "method"
    comment "&#10;     * Performs an action for each element of this stream, in the encounter&#10;     * order of the stream if the stream has a defined encounter order.&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>terminal&#10;     * operation</a>.&#10;     *&#10;     * <p>This operation processes the elements one at a time, in encounter&#10;     * order if one exists.  Performing the action for one element&#10;     * <a href=&#34;../concurrent/package-summary.html#MemoryVisibility&#34;><i>happens-before</i></a>&#10;     * performing the action for subsequent elements, but for any given element,&#10;     * the action may be performed in whatever thread the library chooses.&#10;     *&#10;     * @param action a <a href=&#34;package-summary.html#NonInterference&#34;>&#10;     *               non-interfering</a> action to perform on the elements&#10;     * @see #forEach(Consumer)&#10;     "
  ]
  node [
    id 2083
    label " A[] toArray(IntFunction<A[]> generator)"
    type "method"
    comment "&#10;     * Returns an array containing the elements of this stream, using the&#10;     * provided {@code generator} function to allocate the returned array, as&#10;     * well as any additional arrays that might be required for a partitioned&#10;     * execution or for resizing.&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>terminal&#10;     * operation</a>.&#10;     *&#10;     * @apiNote&#10;     * The generator function takes an integer, which is the size of the&#10;     * desired array, and produces an array of the desired size.  This can be&#10;     * concisely expressed with an array constructor reference:&#10;     * <pre>{@code&#10;     *     Person[] men = people.stream()&#10;     *                          .filter(p -> p.getGender() == MALE)&#10;     *                          .toArray(Person[]::new);&#10;     * }</pre>&#10;     *&#10;     * @param <A> the component type of the resulting array&#10;     * @param generator a function which produces a new array of the desired&#10;     *                  type and the provided length&#10;     * @return an array containing the elements in this stream&#10;     * @throws ArrayStoreException if the runtime type of any element of this&#10;     *         stream is not assignable to the {@linkplain Class#getComponentType&#10;     *         runtime component type} of the generated array&#10;     "
  ]
  node [
    id 2084
    label " T reduce(T identity, BinaryOperator<T> accumulator)"
    type "method"
    comment "&#10;     * Performs a <a href=&#34;package-summary.html#Reduction&#34;>reduction</a> on the&#10;     * elements of this stream, using the provided identity value and an&#10;     * <a href=&#34;package-summary.html#Associativity&#34;>associative</a>&#10;     * accumulation function, and returns the reduced value.  This is equivalent&#10;     * to:&#10;     * <pre>{@code&#10;     *     T result = identity;&#10;     *     for (T element : this stream)&#10;     *         result = accumulator.apply(result, element)&#10;     *     return result;&#10;     * }</pre>&#10;     *&#10;     * but is not constrained to execute sequentially.&#10;     *&#10;     * <p>The {@code identity} value must be an identity for the accumulator&#10;     * function. This means that for all {@code t},&#10;     * {@code accumulator.apply(identity, t)} is equal to {@code t}.&#10;     * The {@code accumulator} function must be an&#10;     * <a href=&#34;package-summary.html#Associativity&#34;>associative</a> function.&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>terminal&#10;     * operation</a>.&#10;     *&#10;     * @apiNote Sum, min, max, average, and string concatenation are all special&#10;     * cases of reduction. Summing a stream of numbers can be expressed as:&#10;     *&#10;     * <pre>{@code&#10;     *     Integer sum = integers.reduce(0, (a, b) -> a+b);&#10;     * }</pre>&#10;     *&#10;     * or:&#10;     *&#10;     * <pre>{@code&#10;     *     Integer sum = integers.reduce(0, Integer::sum);&#10;     * }</pre>&#10;     *&#10;     * <p>While this may seem a more roundabout way to perform an aggregation&#10;     * compared to simply mutating a running total in a loop, reduction&#10;     * operations parallelize more gracefully, without needing additional&#10;     * synchronization and with greatly reduced risk of data races.&#10;     *&#10;     * @param identity the identity value for the accumulating function&#10;     * @param accumulator an <a href=&#34;package-summary.html#Associativity&#34;>associative</a>,&#10;     *                    <a href=&#34;package-summary.html#NonInterference&#34;>non-interfering</a>,&#10;     *                    <a href=&#34;package-summary.html#Statelessness&#34;>stateless</a>&#10;     *                    function for combining two values&#10;     * @return the result of the reduction&#10;     "
  ]
  node [
    id 2085
    label " Optional<T> reduce(BinaryOperator<T> accumulator)"
    type "method"
    comment "&#10;     * Performs a <a href=&#34;package-summary.html#Reduction&#34;>reduction</a> on the&#10;     * elements of this stream, using an&#10;     * <a href=&#34;package-summary.html#Associativity&#34;>associative</a> accumulation&#10;     * function, and returns an {@code Optional} describing the reduced value,&#10;     * if any. This is equivalent to:&#10;     * <pre>{@code&#10;     *     boolean foundAny = false;&#10;     *     T result = null;&#10;     *     for (T element : this stream) {&#10;     *         if (!foundAny) {&#10;     *             foundAny = true;&#10;     *             result = element;&#10;     *         }&#10;     *         else&#10;     *             result = accumulator.apply(result, element);&#10;     *     }&#10;     *     return foundAny ? Optional.of(result) : Optional.empty();&#10;     * }</pre>&#10;     *&#10;     * but is not constrained to execute sequentially.&#10;     *&#10;     * <p>The {@code accumulator} function must be an&#10;     * <a href=&#34;package-summary.html#Associativity&#34;>associative</a> function.&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>terminal&#10;     * operation</a>.&#10;     *&#10;     * @param accumulator an <a href=&#34;package-summary.html#Associativity&#34;>associative</a>,&#10;     *                    <a href=&#34;package-summary.html#NonInterference&#34;>non-interfering</a>,&#10;     *                    <a href=&#34;package-summary.html#Statelessness&#34;>stateless</a>&#10;     *                    function for combining two values&#10;     * @return an {@link Optional} describing the result of the reduction&#10;     * @throws NullPointerException if the result of the reduction is null&#10;     * @see #reduce(Object, BinaryOperator)&#10;     * @see #min(Comparator)&#10;     * @see #max(Comparator)&#10;     "
  ]
  node [
    id 2086
    label "Optional"
  ]
  node [
    id 2087
    label " U reduce(U identity, BiFunction<U, ? super T, U> accumulator, BinaryOperator<U> combiner)"
    type "method"
    comment "&#10;     * Performs a <a href=&#34;package-summary.html#Reduction&#34;>reduction</a> on the&#10;     * elements of this stream, using the provided identity, accumulation and&#10;     * combining functions.  This is equivalent to:&#10;     * <pre>{@code&#10;     *     U result = identity;&#10;     *     for (T element : this stream)&#10;     *         result = accumulator.apply(result, element)&#10;     *     return result;&#10;     * }</pre>&#10;     *&#10;     * but is not constrained to execute sequentially.&#10;     *&#10;     * <p>The {@code identity} value must be an identity for the combiner&#10;     * function.  This means that for all {@code u}, {@code combiner(identity, u)}&#10;     * is equal to {@code u}.  Additionally, the {@code combiner} function&#10;     * must be compatible with the {@code accumulator} function; for all&#10;     * {@code u} and {@code t}, the following must hold:&#10;     * <pre>{@code&#10;     *     combiner.apply(u, accumulator.apply(identity, t)) == accumulator.apply(u, t)&#10;     * }</pre>&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>terminal&#10;     * operation</a>.&#10;     *&#10;     * @apiNote Many reductions using this form can be represented more simply&#10;     * by an explicit combination of {@code map} and {@code reduce} operations.&#10;     * The {@code accumulator} function acts as a fused mapper and accumulator,&#10;     * which can sometimes be more efficient than separate mapping and reduction,&#10;     * such as when knowing the previously reduced value allows you to avoid&#10;     * some computation.&#10;     *&#10;     * @param <U> The type of the result&#10;     * @param identity the identity value for the combiner function&#10;     * @param accumulator an <a href=&#34;package-summary.html#Associativity&#34;>associative</a>,&#10;     *                    <a href=&#34;package-summary.html#NonInterference&#34;>non-interfering</a>,&#10;     *                    <a href=&#34;package-summary.html#Statelessness&#34;>stateless</a>&#10;     *                    function for incorporating an additional element into a result&#10;     * @param combiner an <a href=&#34;package-summary.html#Associativity&#34;>associative</a>,&#10;     *                    <a href=&#34;package-summary.html#NonInterference&#34;>non-interfering</a>,&#10;     *                    <a href=&#34;package-summary.html#Statelessness&#34;>stateless</a>&#10;     *                    function for combining two values, which must be&#10;     *                    compatible with the accumulator function&#10;     * @return the result of the reduction&#10;     * @see #reduce(BinaryOperator)&#10;     * @see #reduce(Object, BinaryOperator)&#10;     "
  ]
  node [
    id 2088
    label " R collect(Supplier<R> supplier, BiConsumer<R, ? super T> accumulator, BiConsumer<R, R> combiner)"
    type "method"
    comment "&#10;     * Performs a <a href=&#34;package-summary.html#MutableReduction&#34;>mutable&#10;     * reduction</a> operation on the elements of this stream.  A mutable&#10;     * reduction is one in which the reduced value is a mutable result container,&#10;     * such as an {@code ArrayList}, and elements are incorporated by updating&#10;     * the state of the result rather than by replacing the result.  This&#10;     * produces a result equivalent to:&#10;     * <pre>{@code&#10;     *     R result = supplier.get();&#10;     *     for (T element : this stream)&#10;     *         accumulator.accept(result, element);&#10;     *     return result;&#10;     * }</pre>&#10;     *&#10;     * <p>Like {@link #reduce(Object, BinaryOperator)}, {@code collect} operations&#10;     * can be parallelized without requiring additional synchronization.&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>terminal&#10;     * operation</a>.&#10;     *&#10;     * @apiNote There are many existing classes in the JDK whose signatures are&#10;     * well-suited for use with method references as arguments to {@code collect()}.&#10;     * For example, the following will accumulate strings into an {@code ArrayList}:&#10;     * <pre>{@code&#10;     *     List<String> asList = stringStream.collect(ArrayList::new, ArrayList::add,&#10;     *                                                ArrayList::addAll);&#10;     * }</pre>&#10;     *&#10;     * <p>The following will take a stream of strings and concatenates them into a&#10;     * single string:&#10;     * <pre>{@code&#10;     *     String concat = stringStream.collect(StringBuilder::new, StringBuilder::append,&#10;     *                                          StringBuilder::append)&#10;     *                                 .toString();&#10;     * }</pre>&#10;     *&#10;     * @param <R> the type of the mutable result container&#10;     * @param supplier a function that creates a new mutable result container.&#10;     *                 For a parallel execution, this function may be called&#10;     *                 multiple times and must return a fresh value each time.&#10;     * @param accumulator an <a href=&#34;package-summary.html#Associativity&#34;>associative</a>,&#10;     *                    <a href=&#34;package-summary.html#NonInterference&#34;>non-interfering</a>,&#10;     *                    <a href=&#34;package-summary.html#Statelessness&#34;>stateless</a>&#10;     *                    function that must fold an element into a result&#10;     *                    container.&#10;     * @param combiner an <a href=&#34;package-summary.html#Associativity&#34;>associative</a>,&#10;     *                    <a href=&#34;package-summary.html#NonInterference&#34;>non-interfering</a>,&#10;     *                    <a href=&#34;package-summary.html#Statelessness&#34;>stateless</a>&#10;     *                    function that accepts two partial result containers&#10;     *                    and merges them, which must be compatible with the&#10;     *                    accumulator function.  The combiner function must fold&#10;     *                    the elements from the second result container into the&#10;     *                    first result container.&#10;     * @return the result of the reduction&#10;     "
  ]
  node [
    id 2089
    label "reduce(Object"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2090
    label " R collect(Collector<? super T, A, R> collector)"
    type "method"
    comment "&#10;     * Performs a <a href=&#34;package-summary.html#MutableReduction&#34;>mutable&#10;     * reduction</a> operation on the elements of this stream using a&#10;     * {@code Collector}.  A {@code Collector}&#10;     * encapsulates the functions used as arguments to&#10;     * {@link #collect(Supplier, BiConsumer, BiConsumer)}, allowing for reuse of&#10;     * collection strategies and composition of collect operations such as&#10;     * multiple-level grouping or partitioning.&#10;     *&#10;     * <p>If the stream is parallel, and the {@code Collector}&#10;     * is {@link Collector.Characteristics#CONCURRENT concurrent}, and&#10;     * either the stream is unordered or the collector is&#10;     * {@link Collector.Characteristics#UNORDERED unordered},&#10;     * then a concurrent reduction will be performed (see {@link Collector} for&#10;     * details on concurrent reduction.)&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>terminal&#10;     * operation</a>.&#10;     *&#10;     * <p>When executed in parallel, multiple intermediate results may be&#10;     * instantiated, populated, and merged so as to maintain isolation of&#10;     * mutable data structures.  Therefore, even when executed in parallel&#10;     * with non-thread-safe data structures (such as {@code ArrayList}), no&#10;     * additional synchronization is needed for a parallel reduction.&#10;     *&#10;     * @apiNote&#10;     * The following will accumulate strings into a List:&#10;     * <pre>{@code&#10;     *     List<String> asList = stringStream.collect(Collectors.toList());&#10;     * }</pre>&#10;     *&#10;     * <p>The following will classify {@code Person} objects by city:&#10;     * <pre>{@code&#10;     *     Map<String, List<Person>> peopleByCity&#10;     *         = personStream.collect(Collectors.groupingBy(Person::getCity));&#10;     * }</pre>&#10;     *&#10;     * <p>The following will classify {@code Person} objects by state and city,&#10;     * cascading two {@code Collector}s together:&#10;     * <pre>{@code&#10;     *     Map<String, Map<String, List<Person>>> peopleByStateAndCity&#10;     *         = personStream.collect(Collectors.groupingBy(Person::getState,&#10;     *                                                      Collectors.groupingBy(Person::getCity)));&#10;     * }</pre>&#10;     *&#10;     * @param <R> the type of the result&#10;     * @param <A> the intermediate accumulation type of the {@code Collector}&#10;     * @param collector the {@code Collector} describing the reduction&#10;     * @return the result of the reduction&#10;     * @see #collect(Supplier, BiConsumer, BiConsumer)&#10;     * @see Collectors&#10;     "
  ]
  node [
    id 2091
    label "UNORDERED"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2092
    label "java.util.stream.Collector"
    type "class"
    comment "&#10; * A <a href=&#34;package-summary.html#Reduction&#34;>mutable reduction operation</a> that&#10; * accumulates input elements into a mutable result container, optionally transforming&#10; * the accumulated result into a final representation after all input elements&#10; * have been processed.  Reduction operations can be performed either sequentially&#10; * or in parallel.&#10; *&#10; * <p>Examples of mutable reduction operations include:&#10; * accumulating elements into a {@code Collection}; concatenating&#10; * strings using a {@code StringBuilder}; computing summary information about&#10; * elements such as sum, min, max, or average; computing &#34;pivot table&#34; summaries&#10; * such as &#34;maximum valued transaction by seller&#34;, etc.  The class {@link Collectors}&#10; * provides implementations of many common mutable reductions.&#10; *&#10; * <p>A {@code Collector} is specified by four functions that work together to&#10; * accumulate entries into a mutable result container, and optionally perform&#10; * a final transform on the result.  They are: <ul>&#10; *     <li>creation of a new result container ({@link #supplier()})</li>&#10; *     <li>incorporating a new data element into a result container ({@link #accumulator()})</li>&#10; *     <li>combining two result containers into one ({@link #combiner()})</li>&#10; *     <li>performing an optional final transform on the container ({@link #finisher()})</li>&#10; * </ul>&#10; *&#10; * <p>Collectors also have a set of characteristics, such as&#10; * {@link Characteristics#CONCURRENT}, that provide hints that can be used by a&#10; * reduction implementation to provide better performance.&#10; *&#10; * <p>A sequential implementation of a reduction using a collector would&#10; * create a single result container using the supplier function, and invoke the&#10; * accumulator function once for each input element.  A parallel implementation&#10; * would partition the input, create a result container for each partition,&#10; * accumulate the contents of each partition into a subresult for that partition,&#10; * and then use the combiner function to merge the subresults into a combined&#10; * result.&#10; *&#10; * <p>To ensure that sequential and parallel executions produce equivalent&#10; * results, the collector functions must satisfy an <em>identity</em> and an&#10; * <a href=&#34;package-summary.html#Associativity&#34;>associativity</a> constraints.&#10; *&#10; * <p>The identity constraint says that for any partially accumulated result,&#10; * combining it with an empty result container must produce an equivalent&#10; * result.  That is, for a partially accumulated result {@code a} that is the&#10; * result of any series of accumulator and combiner invocations, {@code a} must&#10; * be equivalent to {@code combiner.apply(a, supplier.get())}.&#10; *&#10; * <p>The associativity constraint says that splitting the computation must&#10; * produce an equivalent result.  That is, for any input elements {@code t1}&#10; * and {@code t2}, the results {@code r1} and {@code r2} in the computation&#10; * below must be equivalent:&#10; * <pre>{@code&#10; *     A a1 = supplier.get();&#10; *     accumulator.accept(a1, t1);&#10; *     accumulator.accept(a1, t2);&#10; *     R r1 = finisher.apply(a1);  // result without splitting&#10; *&#10; *     A a2 = supplier.get();&#10; *     accumulator.accept(a2, t1);&#10; *     A a3 = supplier.get();&#10; *     accumulator.accept(a3, t2);&#10; *     R r2 = finisher.apply(combiner.apply(a2, a3));  // result with splitting&#10; * } </pre>&#10; *&#10; * <p>For collectors that do not have the {@code UNORDERED} characteristic,&#10; * two accumulated results {@code a1} and {@code a2} are equivalent if&#10; * {@code finisher.apply(a1).equals(finisher.apply(a2))}.  For unordered&#10; * collectors, equivalence is relaxed to allow for non-equality related to&#10; * differences in order.  (For example, an unordered collector that accumulated&#10; * elements to a {@code List} would consider two lists equivalent if they&#10; * contained the same elements, ignoring order.)&#10; *&#10; * <p>Libraries that implement reduction based on {@code Collector}, such as&#10; * {@link Stream#collect(Collector)}, must adhere to the following constraints:&#10; * <ul>&#10; *     <li>The first argument passed to the accumulator function, both&#10; *     arguments passed to the combiner function, and the argument passed to the&#10; *     finisher function must be the result of a previous invocation of the&#10; *     result supplier, accumulator, or combiner functions.</li>&#10; *     <li>The implementation should not do anything with the result of any of&#10; *     the result supplier, accumulator, or combiner functions other than to&#10; *     pass them again to the accumulator, combiner, or finisher functions,&#10; *     or return them to the caller of the reduction operation.</li>&#10; *     <li>If a result is passed to the combiner or finisher&#10; *     function, and the same object is not returned from that function, it is&#10; *     never used again.</li>&#10; *     <li>Once a result is passed to the combiner or finisher function, it&#10; *     is never passed to the accumulator function again.</li>&#10; *     <li>For non-concurrent collectors, any result returned from the result&#10; *     supplier, accumulator, or combiner functions must be serially&#10; *     thread-confined.  This enables collection to occur in parallel without&#10; *     the {@code Collector} needing to implement any additional synchronization.&#10; *     The reduction implementation must manage that the input is properly&#10; *     partitioned, that partitions are processed in isolation, and combining&#10; *     happens only after accumulation is complete.</li>&#10; *     <li>For concurrent collectors, an implementation is free to (but not&#10; *     required to) implement reduction concurrently.  A concurrent reduction&#10; *     is one where the accumulator function is called concurrently from&#10; *     multiple threads, using the same concurrently-modifiable result container,&#10; *     rather than keeping the result isolated during accumulation.&#10; *     A concurrent reduction should only be applied if the collector has the&#10; *     {@link Characteristics#UNORDERED} characteristics or if the&#10; *     originating data is unordered.</li>&#10; * </ul>&#10; *&#10; * <p>In addition to the predefined implementations in {@link Collectors}, the&#10; * static factory methods {@link #of(Supplier, BiConsumer, BinaryOperator, Characteristics...)}&#10; * can be used to construct collectors.  For example, you could create a collector&#10; * that accumulates widgets into a {@code TreeSet} with:&#10; *&#10; * <pre>{@code&#10; *     Collector<Widget, ?, TreeSet<Widget>> intoSet =&#10; *         Collector.of(TreeSet::new, TreeSet::add,&#10; *                      (left, right) -> { left.addAll(right); return left; });&#10; * }</pre>&#10; *&#10; * (This behavior is also implemented by the predefined collector&#10; * {@link Collectors#toCollection(Supplier)}).&#10; *&#10; * @apiNote&#10; * Performing a reduction operation with a {@code Collector} should produce a&#10; * result equivalent to:&#10; * <pre>{@code&#10; *     A container = collector.supplier().get();&#10; *     for (T t : data)&#10; *         collector.accumulator().accept(container, t);&#10; *     return collector.finisher().apply(container);&#10; * }</pre>&#10; *&#10; * <p>However, the library is free to partition the input, perform the reduction&#10; * on the partitions, and then use the combiner function to combine the partial&#10; * results to achieve a parallel reduction.  (Depending on the specific reduction&#10; * operation, this may perform better or worse, depending on the relative cost&#10; * of the accumulator and combiner functions.)&#10; *&#10; * <p>Collectors are designed to be <em>composed</em>; many of the methods&#10; * in {@link Collectors} are functions that take a collector and produce&#10; * a new collector.  For example, given the following collector that computes&#10; * the sum of the salaries of a stream of employees:&#10; *&#10; * <pre>{@code&#10; *     Collector<Employee, ?, Integer> summingSalaries&#10; *         = Collectors.summingInt(Employee::getSalary))&#10; * }</pre>&#10; *&#10; * If we wanted to create a collector to tabulate the sum of salaries by&#10; * department, we could reuse the &#34;sum of salaries&#34; logic using&#10; * {@link Collectors#groupingBy(Function, Collector)}:&#10; *&#10; * <pre>{@code&#10; *     Collector<Employee, ?, Map<Department, Integer>> summingSalariesByDept&#10; *         = Collectors.groupingBy(Employee::getDepartment, summingSalaries);&#10; * }</pre>&#10; *&#10; * @see Stream#collect(Collector)&#10; * @see Collectors&#10; *&#10; * @param <T> the type of input elements to the reduction operation&#10; * @param <A> the mutable accumulation type of the reduction operation (often&#10; *            hidden as an implementation detail)&#10; * @param <R> the result type of the reduction operation&#10; * @since 1.8&#10; "
  ]
  node [
    id 2093
    label " Supplier<A> supplier()"
    type "method"
    comment "&#10;     * A function that creates and returns a new mutable result container.&#10;     *&#10;     * @return a function which returns a new, mutable result container&#10;     "
  ]
  node [
    id 2094
    label " BiConsumer<A, T> accumulator()"
    type "method"
    comment "&#10;     * A function that folds a value into a mutable result container.&#10;     *&#10;     * @return a function which folds a value into a mutable result container&#10;     "
  ]
  node [
    id 2095
    label " BinaryOperator<A> combiner()"
    type "method"
    comment "&#10;     * A function that accepts two partial results and merges them.  The&#10;     * combiner function may fold state from one argument into the other and&#10;     * return that, or may return a new result container.&#10;     *&#10;     * @return a function which combines two partial results into a combined&#10;     * result&#10;     "
  ]
  node [
    id 2096
    label " Function<A, R> finisher()"
    type "method"
    comment "&#10;     * Perform the final transformation from the intermediate accumulation type&#10;     * {@code A} to the final result type {@code R}.&#10;     *&#10;     * <p>If the characteristic {@code IDENTITY_FINISH} is&#10;     * set, this function may be presumed to be an identity transform with an&#10;     * unchecked cast from {@code A} to {@code R}.&#10;     *&#10;     * @return a function which transforms the intermediate result to the final&#10;     * result&#10;     "
  ]
  node [
    id 2097
    label " Set<Characteristics> characteristics()"
    type "method"
    comment "&#10;     * Returns a {@code Set} of {@code Collector.Characteristics} indicating&#10;     * the characteristics of this Collector.  This set should be immutable.&#10;     *&#10;     * @return an immutable set of collector characteristics&#10;     "
  ]
  node [
    id 2098
    label "public static Collector<T, R, R> of(Supplier<R> supplier, BiConsumer<R, T> accumulator, BinaryOperator<R> combiner, Characteristics... characteristics)"
    type "method"
    comment "&#10;     * Returns a new {@code Collector} described by the given {@code supplier},&#10;     * {@code accumulator}, and {@code combiner} functions.  The resulting&#10;     * {@code Collector} has the {@code Collector.Characteristics.IDENTITY_FINISH}&#10;     * characteristic.&#10;     *&#10;     * @param supplier The supplier function for the new collector&#10;     * @param accumulator The accumulator function for the new collector&#10;     * @param combiner The combiner function for the new collector&#10;     * @param characteristics The collector characteristics for the new&#10;     *                        collector&#10;     * @param <T> The type of input elements for the new collector&#10;     * @param <R> The type of intermediate accumulation result, and final result,&#10;     *           for the new collector&#10;     * @throws NullPointerException if any argument is null&#10;     * @return the new {@code Collector}&#10;     "
  ]
  node [
    id 2099
    label "public static Collector<T, A, R> of(Supplier<A> supplier, BiConsumer<A, T> accumulator, BinaryOperator<A> combiner, Function<A, R> finisher, Characteristics... characteristics)"
    type "method"
    comment "&#10;     * Returns a new {@code Collector} described by the given {@code supplier},&#10;     * {@code accumulator}, {@code combiner}, and {@code finisher} functions.&#10;     *&#10;     * @param supplier The supplier function for the new collector&#10;     * @param accumulator The accumulator function for the new collector&#10;     * @param combiner The combiner function for the new collector&#10;     * @param finisher The finisher function for the new collector&#10;     * @param characteristics The collector characteristics for the new&#10;     *                        collector&#10;     * @param <T> The type of input elements for the new collector&#10;     * @param <A> The intermediate accumulation type of the new collector&#10;     * @param <R> The final result type of the new collector&#10;     * @throws NullPointerException if any argument is null&#10;     * @return the new {@code Collector}&#10;     "
  ]
  node [
    id 2100
    label "collect(Supplier"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2101
    label " List<T> toList()"
    type "method"
    comment "&#10;     * Accumulates the elements of this stream into a {@code List}. The elements in&#10;     * the list will be in this stream's encounter order, if one exists. The returned List&#10;     * is unmodifiable; calls to any mutator method will always cause&#10;     * {@code UnsupportedOperationException} to be thrown. There are no&#10;     * guarantees on the implementation type or serializability of the returned List.&#10;     *&#10;     * <p>The returned instance may be <a href=&#34;{@docRoot}/java.base/java/lang/doc-files/ValueBased.html&#34;>value-based</a>.&#10;     * Callers should make no assumptions about the identity of the returned instances.&#10;     * Identity-sensitive operations on these instances (reference equality ({@code ==}),&#10;     * identity hash code, and synchronization) are unreliable and should be avoided.&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>terminal operation</a>.&#10;     *&#10;     * @apiNote If more control over the returned object is required, use&#10;     * {@link Collectors#toCollection(Supplier)}.&#10;     *&#10;     * @implSpec The implementation in this interface returns a List produced as if by the following:&#10;     * <pre>{@code&#10;     * Collections.unmodifiableList(new ArrayList<>(Arrays.asList(this.toArray())))&#10;     * }</pre>&#10;     *&#10;     * @implNote Most instances of Stream will override this method and provide an implementation&#10;     * that is highly optimized compared to the implementation in this interface.&#10;     *&#10;     * @return a List containing the stream elements&#10;     *&#10;     * @since 16&#10;     "
  ]
  node [
    id 2102
    label "toCollection(Supplier)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2103
    label "java.util.stream.Collectors"
    type "class"
    comment "&#10; * Implementations of {@link Collector} that implement various useful reduction&#10; * operations, such as accumulating elements into collections, summarizing&#10; * elements according to various criteria, etc.&#10; *&#10; * <p>The following are examples of using the predefined collectors to perform&#10; * common mutable reduction tasks:&#10; *&#10; * <pre>{@code&#10; * // Accumulate names into a List&#10; * List<String> list = people.stream()&#10; *   .map(Person::getName)&#10; *   .collect(Collectors.toList());&#10; *&#10; * // Accumulate names into a TreeSet&#10; * Set<String> set = people.stream()&#10; *   .map(Person::getName)&#10; *   .collect(Collectors.toCollection(TreeSet::new));&#10; *&#10; * // Convert elements to strings and concatenate them, separated by commas&#10; * String joined = things.stream()&#10; *   .map(Object::toString)&#10; *   .collect(Collectors.joining(&#34;, &#34;));&#10; *&#10; * // Compute sum of salaries of employee&#10; * int total = employees.stream()&#10; *   .collect(Collectors.summingInt(Employee::getSalary));&#10; *&#10; * // Group employees by department&#10; * Map<Department, List<Employee>> byDept = employees.stream()&#10; *   .collect(Collectors.groupingBy(Employee::getDepartment));&#10; *&#10; * // Compute sum of salaries by department&#10; * Map<Department, Integer> totalByDept = employees.stream()&#10; *   .collect(Collectors.groupingBy(Employee::getDepartment,&#10; *                                  Collectors.summingInt(Employee::getSalary)));&#10; *&#10; * // Partition students into passing and failing&#10; * Map<Boolean, List<Student>> passingFailing = students.stream()&#10; *   .collect(Collectors.partitioningBy(s -> s.getGrade() >= PASS_THRESHOLD));&#10; *&#10; * }</pre>&#10; *&#10; * @since 1.8&#10; "
  ]
  node [
    id 2104
    label "private static IllegalStateException duplicateKeyException(Object k, Object u, Object v)"
    type "method"
    comment "&#10;     * Construct an {@code IllegalStateException} with appropriate message.&#10;     *&#10;     * @param k the duplicate key&#10;     * @param u 1st value to be accumulated/merged&#10;     * @param v 2nd value to be accumulated/merged&#10;     "
  ]
  node [
    id 2105
    label "private static BinaryOperator<M> uniqKeysMapMerger()"
    type "method"
    comment "&#10;     * {@code BinaryOperator<Map>} that merges the contents of its right&#10;     * argument into its left argument, throwing {@code IllegalStateException}&#10;     * if duplicate keys are encountered.&#10;     *&#10;     * @param <K> type of the map keys&#10;     * @param <V> type of the map values&#10;     * @param <M> type of the map&#10;     * @return a merge function for two maps&#10;     "
  ]
  node [
    id 2106
    label "private static BiConsumer<Map<K, V>, T> uniqKeysMapAccumulator(Function<? super T, ? extends K> keyMapper, Function<? super T, ? extends V> valueMapper)"
    type "method"
    comment "&#10;     * {@code BiConsumer<Map, T>} that accumulates (key, value) pairs&#10;     * extracted from elements into the map, throwing {@code IllegalStateException}&#10;     * if duplicate keys are encountered.&#10;     *&#10;     * @param keyMapper a function that maps an element into a key&#10;     * @param valueMapper a function that maps an element into a value&#10;     * @param <T> type of elements&#10;     * @param <K> type of map keys&#10;     * @param <V> type of map values&#10;     * @return an accumulating consumer&#10;     "
  ]
  node [
    id 2107
    label "public static Collector<T, ?, C> toCollection(Supplier<C> collectionFactory)"
    type "method"
    comment "&#10;     * Returns a {@code Collector} that accumulates the input elements into a&#10;     * new {@code Collection}, in encounter order.  The {@code Collection} is&#10;     * created by the provided factory.&#10;     *&#10;     * @param <T> the type of the input elements&#10;     * @param <C> the type of the resulting {@code Collection}&#10;     * @param collectionFactory a supplier providing a new empty {@code Collection}&#10;     *                          into which the results will be inserted&#10;     * @return a {@code Collector} which collects all the input elements into a&#10;     * {@code Collection}, in encounter order&#10;     "
  ]
  node [
    id 2108
    label "public static Collector<T, ?, List<T>> toList()"
    type "method"
    comment "&#10;     * Returns a {@code Collector} that accumulates the input elements into a&#10;     * new {@code List}. There are no guarantees on the type, mutability,&#10;     * serializability, or thread-safety of the {@code List} returned; if more&#10;     * control over the returned {@code List} is required, use {@link #toCollection(Supplier)}.&#10;     *&#10;     * @param <T> the type of the input elements&#10;     * @return a {@code Collector} which collects all the input elements into a&#10;     * {@code List}, in encounter order&#10;     "
  ]
  node [
    id 2109
    label "public static Collector<T, ?, List<T>> toUnmodifiableList()"
    type "method"
    comment "&#10;     * Returns a {@code Collector} that accumulates the input elements into an&#10;     * <a href=&#34;../List.html#unmodifiable&#34;>unmodifiable List</a> in encounter&#10;     * order. The returned Collector disallows null values and will throw&#10;     * {@code NullPointerException} if it is presented with a null value.&#10;     *&#10;     * @param <T> the type of the input elements&#10;     * @return a {@code Collector} that accumulates the input elements into an&#10;     * <a href=&#34;../List.html#unmodifiable&#34;>unmodifiable List</a> in encounter order&#10;     * @since 10&#10;     "
  ]
  node [
    id 2110
    label "public static Collector<T, ?, Set<T>> toSet()"
    type "method"
    comment "&#10;     * Returns a {@code Collector} that accumulates the input elements into a&#10;     * new {@code Set}. There are no guarantees on the type, mutability,&#10;     * serializability, or thread-safety of the {@code Set} returned; if more&#10;     * control over the returned {@code Set} is required, use&#10;     * {@link #toCollection(Supplier)}.&#10;     *&#10;     * <p>This is an {@link Collector.Characteristics#UNORDERED unordered}&#10;     * Collector.&#10;     *&#10;     * @param <T> the type of the input elements&#10;     * @return a {@code Collector} which collects all the input elements into a&#10;     * {@code Set}&#10;     "
  ]
  node [
    id 2111
    label "public static Collector<T, ?, Set<T>> toUnmodifiableSet()"
    type "method"
    comment "&#10;     * Returns a {@code Collector} that accumulates the input elements into an&#10;     * <a href=&#34;../Set.html#unmodifiable&#34;>unmodifiable Set</a>. The returned&#10;     * Collector disallows null values and will throw {@code NullPointerException}&#10;     * if it is presented with a null value. If the input contains duplicate elements,&#10;     * an arbitrary element of the duplicates is preserved.&#10;     *&#10;     * <p>This is an {@link Collector.Characteristics#UNORDERED unordered}&#10;     * Collector.&#10;     *&#10;     * @param <T> the type of the input elements&#10;     * @return a {@code Collector} that accumulates the input elements into an&#10;     * <a href=&#34;../Set.html#unmodifiable&#34;>unmodifiable Set</a>&#10;     * @since 10&#10;     "
  ]
  node [
    id 2112
    label "public static Collector<CharSequence, ?, String> joining()"
    type "method"
    comment "&#10;     * Returns a {@code Collector} that concatenates the input elements into a&#10;     * {@code String}, in encounter order.&#10;     *&#10;     * @return a {@code Collector} that concatenates the input elements into a&#10;     * {@code String}, in encounter order&#10;     "
  ]
  node [
    id 2113
    label "public static Collector<CharSequence, ?, String> joining(CharSequence delimiter)"
    type "method"
    comment "&#10;     * Returns a {@code Collector} that concatenates the input elements,&#10;     * separated by the specified delimiter, in encounter order.&#10;     *&#10;     * @param delimiter the delimiter to be used between each element&#10;     * @return A {@code Collector} which concatenates CharSequence elements,&#10;     * separated by the specified delimiter, in encounter order&#10;     "
  ]
  node [
    id 2114
    label "public static Collector<CharSequence, ?, String> joining(CharSequence delimiter, CharSequence prefix, CharSequence suffix)"
    type "method"
    comment "&#10;     * Returns a {@code Collector} that concatenates the input elements,&#10;     * separated by the specified delimiter, with the specified prefix and&#10;     * suffix, in encounter order.&#10;     *&#10;     * @param delimiter the delimiter to be used between each element&#10;     * @param  prefix the sequence of characters to be used at the beginning&#10;     *                of the joined result&#10;     * @param  suffix the sequence of characters to be used at the end&#10;     *                of the joined result&#10;     * @return A {@code Collector} which concatenates CharSequence elements,&#10;     * separated by the specified delimiter, in encounter order&#10;     "
  ]
  node [
    id 2115
    label "private static BinaryOperator<M> mapMerger(BinaryOperator<V> mergeFunction)"
    type "method"
    comment "&#10;     * {@code BinaryOperator<Map>} that merges the contents of its right&#10;     * argument into its left argument, using the provided merge function to&#10;     * handle duplicate keys.&#10;     *&#10;     * @param <K> type of the map keys&#10;     * @param <V> type of the map values&#10;     * @param <M> type of the map&#10;     * @param mergeFunction A merge function suitable for&#10;     * {@link Map#merge(Object, Object, BiFunction) Map.merge()}&#10;     * @return a merge function for two maps&#10;     "
  ]
  node [
    id 2116
    label "merge(Object"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2117
    label "public static Collector<T, ?, R> mapping(Function<? super T, ? extends U> mapper, Collector<? super U, A, R> downstream)"
    type "method"
    comment "&#10;     * Adapts a {@code Collector} accepting elements of type {@code U} to one&#10;     * accepting elements of type {@code T} by applying a mapping function to&#10;     * each input element before accumulation.&#10;     *&#10;     * @apiNote&#10;     * The {@code mapping()} collectors are most useful when used in a&#10;     * multi-level reduction, such as downstream of a {@code groupingBy} or&#10;     * {@code partitioningBy}.  For example, given a stream of&#10;     * {@code Person}, to accumulate the set of last names in each city:&#10;     * <pre>{@code&#10;     * Map<City, Set<String>> lastNamesByCity&#10;     *   = people.stream().collect(&#10;     *     groupingBy(Person::getCity,&#10;     *                mapping(Person::getLastName,&#10;     *                        toSet())));&#10;     * }</pre>&#10;     *&#10;     * @param <T> the type of the input elements&#10;     * @param <U> type of elements accepted by downstream collector&#10;     * @param <A> intermediate accumulation type of the downstream collector&#10;     * @param <R> result type of collector&#10;     * @param mapper a function to be applied to the input elements&#10;     * @param downstream a collector which will accept mapped values&#10;     * @return a collector which applies the mapping function to the input&#10;     * elements and provides the mapped results to the downstream collector&#10;     "
  ]
  node [
    id 2118
    label "public static Collector<T, ?, R> flatMapping(Function<? super T, ? extends Stream<? extends U>> mapper, Collector<? super U, A, R> downstream)"
    type "method"
    comment "&#10;     * Adapts a {@code Collector} accepting elements of type {@code U} to one&#10;     * accepting elements of type {@code T} by applying a flat mapping function&#10;     * to each input element before accumulation.  The flat mapping function&#10;     * maps an input element to a {@link Stream stream} covering zero or more&#10;     * output elements that are then accumulated downstream.  Each mapped stream&#10;     * is {@link java.util.stream.BaseStream#close() closed} after its contents&#10;     * have been placed downstream.  (If a mapped stream is {@code null}&#10;     * an empty stream is used, instead.)&#10;     *&#10;     * @apiNote&#10;     * The {@code flatMapping()} collectors are most useful when used in a&#10;     * multi-level reduction, such as downstream of a {@code groupingBy} or&#10;     * {@code partitioningBy}.  For example, given a stream of&#10;     * {@code Order}, to accumulate the set of line items for each customer:&#10;     * <pre>{@code&#10;     * Map<String, Set<LineItem>> itemsByCustomerName&#10;     *   = orders.stream().collect(&#10;     *     groupingBy(Order::getCustomerName,&#10;     *                flatMapping(order -> order.getLineItems().stream(),&#10;     *                            toSet())));&#10;     * }</pre>&#10;     *&#10;     * @param <T> the type of the input elements&#10;     * @param <U> type of elements accepted by downstream collector&#10;     * @param <A> intermediate accumulation type of the downstream collector&#10;     * @param <R> result type of collector&#10;     * @param mapper a function to be applied to the input elements, which&#10;     * returns a stream of results&#10;     * @param downstream a collector which will receive the elements of the&#10;     * stream returned by mapper&#10;     * @return a collector which applies the mapping function to the input&#10;     * elements and provides the flat mapped results to the downstream collector&#10;     * @since 9&#10;     "
  ]
  node [
    id 2119
    label "public static Collector<T, ?, R> filtering(Predicate<? super T> predicate, Collector<? super T, A, R> downstream)"
    type "method"
    comment "&#10;     * Adapts a {@code Collector} to one accepting elements of the same type&#10;     * {@code T} by applying the predicate to each input element and only&#10;     * accumulating if the predicate returns {@code true}.&#10;     *&#10;     * @apiNote&#10;     * The {@code filtering()} collectors are most useful when used in a&#10;     * multi-level reduction, such as downstream of a {@code groupingBy} or&#10;     * {@code partitioningBy}.  For example, given a stream of&#10;     * {@code Employee}, to accumulate the employees in each department that have a&#10;     * salary above a certain threshold:&#10;     * <pre>{@code&#10;     * Map<Department, Set<Employee>> wellPaidEmployeesByDepartment&#10;     *   = employees.stream().collect(&#10;     *     groupingBy(Employee::getDepartment,&#10;     *                filtering(e -> e.getSalary() > 2000,&#10;     *                          toSet())));&#10;     * }</pre>&#10;     * A filtering collector differs from a stream's {@code filter()} operation.&#10;     * In this example, suppose there are no employees whose salary is above the&#10;     * threshold in some department.  Using a filtering collector as shown above&#10;     * would result in a mapping from that department to an empty {@code Set}.&#10;     * If a stream {@code filter()} operation were done instead, there would be&#10;     * no mapping for that department at all.&#10;     *&#10;     * @param <T> the type of the input elements&#10;     * @param <A> intermediate accumulation type of the downstream collector&#10;     * @param <R> result type of collector&#10;     * @param predicate a predicate to be applied to the input elements&#10;     * @param downstream a collector which will accept values that match the&#10;     * predicate&#10;     * @return a collector which applies the predicate to the input elements&#10;     * and provides matching elements to the downstream collector&#10;     * @since 9&#10;     "
  ]
  node [
    id 2120
    label "public static Collector<T, A, RR> collectingAndThen(Collector<T, A, R> downstream, Function<R, RR> finisher)"
    type "method"
    comment "&#10;     * Adapts a {@code Collector} to perform an additional finishing&#10;     * transformation.  For example, one could adapt the {@link #toList()}&#10;     * collector to always produce an immutable list with:&#10;     * <pre>{@code&#10;     * List<String> list = people.stream().collect(&#10;     *   collectingAndThen(toList(),&#10;     *                     Collections::unmodifiableList));&#10;     * }</pre>&#10;     *&#10;     * @param <T> the type of the input elements&#10;     * @param <A> intermediate accumulation type of the downstream collector&#10;     * @param <R> result type of the downstream collector&#10;     * @param <RR> result type of the resulting collector&#10;     * @param downstream a collector&#10;     * @param finisher a function to be applied to the final result of the downstream collector&#10;     * @return a collector which performs the action of the downstream collector,&#10;     * followed by an additional finishing step&#10;     "
  ]
  node [
    id 2121
    label "toList()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2122
    label "public static Collector<T, ?, Long> counting()"
    type "method"
    comment "&#10;     * Returns a {@code Collector} accepting elements of type {@code T} that&#10;     * counts the number of input elements.  If no elements are present, the&#10;     * result is 0.&#10;     *&#10;     * @implSpec&#10;     * This produces a result equivalent to:&#10;     * <pre>{@code&#10;     *     reducing(0L, e -> 1L, Long::sum)&#10;     * }</pre>&#10;     *&#10;     * @param <T> the type of the input elements&#10;     * @return a {@code Collector} that counts the input elements&#10;     "
  ]
  node [
    id 2123
    label "public static Collector<T, ?, Optional<T>> minBy(Comparator<? super T> comparator)"
    type "method"
    comment "&#10;     * Returns a {@code Collector} that produces the minimal element according&#10;     * to a given {@code Comparator}, described as an {@code Optional<T>}.&#10;     *&#10;     * @implSpec&#10;     * This produces a result equivalent to:&#10;     * <pre>{@code&#10;     *     reducing(BinaryOperator.minBy(comparator))&#10;     * }</pre>&#10;     *&#10;     * @param <T> the type of the input elements&#10;     * @param comparator a {@code Comparator} for comparing elements&#10;     * @return a {@code Collector} that produces the minimal value&#10;     "
  ]
  node [
    id 2124
    label "public static Collector<T, ?, Optional<T>> maxBy(Comparator<? super T> comparator)"
    type "method"
    comment "&#10;     * Returns a {@code Collector} that produces the maximal element according&#10;     * to a given {@code Comparator}, described as an {@code Optional<T>}.&#10;     *&#10;     * @implSpec&#10;     * This produces a result equivalent to:&#10;     * <pre>{@code&#10;     *     reducing(BinaryOperator.maxBy(comparator))&#10;     * }</pre>&#10;     *&#10;     * @param <T> the type of the input elements&#10;     * @param comparator a {@code Comparator} for comparing elements&#10;     * @return a {@code Collector} that produces the maximal value&#10;     "
  ]
  node [
    id 2125
    label "public static Collector<T, ?, Integer> summingInt(ToIntFunction<? super T> mapper)"
    type "method"
    comment "&#10;     * Returns a {@code Collector} that produces the sum of a integer-valued&#10;     * function applied to the input elements.  If no elements are present,&#10;     * the result is 0.&#10;     *&#10;     * @param <T> the type of the input elements&#10;     * @param mapper a function extracting the property to be summed&#10;     * @return a {@code Collector} that produces the sum of a derived property&#10;     "
  ]
  node [
    id 2126
    label "public static Collector<T, ?, Long> summingLong(ToLongFunction<? super T> mapper)"
    type "method"
    comment "&#10;     * Returns a {@code Collector} that produces the sum of a long-valued&#10;     * function applied to the input elements.  If no elements are present,&#10;     * the result is 0.&#10;     *&#10;     * @param <T> the type of the input elements&#10;     * @param mapper a function extracting the property to be summed&#10;     * @return a {@code Collector} that produces the sum of a derived property&#10;     "
  ]
  node [
    id 2127
    label "public static Collector<T, ?, Double> summingDouble(ToDoubleFunction<? super T> mapper)"
    type "method"
    comment "&#10;     * Returns a {@code Collector} that produces the sum of a double-valued&#10;     * function applied to the input elements.  If no elements are present,&#10;     * the result is 0.&#10;     *&#10;     * <p>The sum returned can vary depending upon the order in which&#10;     * values are recorded, due to accumulated rounding error in&#10;     * addition of values of differing magnitudes. Values sorted by increasing&#10;     * absolute magnitude tend to yield more accurate results.  If any recorded&#10;     * value is a {@code NaN} or the sum is at any point a {@code NaN} then the&#10;     * sum will be {@code NaN}.&#10;     *&#10;     * @param <T> the type of the input elements&#10;     * @param mapper a function extracting the property to be summed&#10;     * @return a {@code Collector} that produces the sum of a derived property&#10;     "
  ]
  node [
    id 2128
    label " static double[] sumWithCompensation(double[] intermediateSum, double value)"
    type "method"
    comment "&#10;     * Incorporate a new double value using Kahan summation /&#10;     * compensation summation.&#10;     *&#10;     * High-order bits of the sum are in intermediateSum[0], low-order&#10;     * bits of the sum are in intermediateSum[1], any additional&#10;     * elements are application-specific.&#10;     *&#10;     * @param intermediateSum the high-order and low-order words of the intermediate sum&#10;     * @param value the name value to be included in the running sum&#10;     "
  ]
  node [
    id 2129
    label " static double computeFinalSum(double[] summands)"
    type "method"
    comment "&#10;     * If the compensated sum is spuriously NaN from accumulating one&#10;     * or more same-signed infinite values, return the&#10;     * correctly-signed infinity stored in the simple sum.&#10;     "
  ]
  node [
    id 2130
    label "public static Collector<T, ?, Double> averagingInt(ToIntFunction<? super T> mapper)"
    type "method"
    comment "&#10;     * Returns a {@code Collector} that produces the arithmetic mean of an integer-valued&#10;     * function applied to the input elements.  If no elements are present,&#10;     * the result is 0.&#10;     *&#10;     * @param <T> the type of the input elements&#10;     * @param mapper a function extracting the property to be averaged&#10;     * @return a {@code Collector} that produces the arithmetic mean of a&#10;     * derived property&#10;     "
  ]
  node [
    id 2131
    label "public static Collector<T, ?, Double> averagingLong(ToLongFunction<? super T> mapper)"
    type "method"
    comment "&#10;     * Returns a {@code Collector} that produces the arithmetic mean of a long-valued&#10;     * function applied to the input elements.  If no elements are present,&#10;     * the result is 0.&#10;     *&#10;     * @param <T> the type of the input elements&#10;     * @param mapper a function extracting the property to be averaged&#10;     * @return a {@code Collector} that produces the arithmetic mean of a&#10;     * derived property&#10;     "
  ]
  node [
    id 2132
    label "public static Collector<T, ?, Double> averagingDouble(ToDoubleFunction<? super T> mapper)"
    type "method"
    comment "&#10;     * Returns a {@code Collector} that produces the arithmetic mean of a double-valued&#10;     * function applied to the input elements.  If no elements are present,&#10;     * the result is 0.&#10;     *&#10;     * <p>The average returned can vary depending upon the order in which&#10;     * values are recorded, due to accumulated rounding error in&#10;     * addition of values of differing magnitudes. Values sorted by increasing&#10;     * absolute magnitude tend to yield more accurate results.  If any recorded&#10;     * value is a {@code NaN} or the sum is at any point a {@code NaN} then the&#10;     * average will be {@code NaN}.&#10;     *&#10;     * @implNote The {@code double} format can represent all&#10;     * consecutive integers in the range -2<sup>53</sup> to&#10;     * 2<sup>53</sup>. If the pipeline has more than 2<sup>53</sup>&#10;     * values, the divisor in the average computation will saturate at&#10;     * 2<sup>53</sup>, leading to additional numerical errors.&#10;     *&#10;     * @param <T> the type of the input elements&#10;     * @param mapper a function extracting the property to be averaged&#10;     * @return a {@code Collector} that produces the arithmetic mean of a&#10;     * derived property&#10;     "
  ]
  node [
    id 2133
    label "public static Collector<T, ?, T> reducing(T identity, BinaryOperator<T> op)"
    type "method"
    comment "&#10;     * Returns a {@code Collector} which performs a reduction of its&#10;     * input elements under a specified {@code BinaryOperator} using the&#10;     * provided identity.&#10;     *&#10;     * @apiNote&#10;     * The {@code reducing()} collectors are most useful when used in a&#10;     * multi-level reduction, downstream of {@code groupingBy} or&#10;     * {@code partitioningBy}.  To perform a simple reduction on a stream,&#10;     * use {@link Stream#reduce(Object, BinaryOperator)}} instead.&#10;     *&#10;     * @param <T> element type for the input and output of the reduction&#10;     * @param identity the identity value for the reduction (also, the value&#10;     *                 that is returned when there are no input elements)&#10;     * @param op a {@code BinaryOperator<T>} used to reduce the input elements&#10;     * @return a {@code Collector} which implements the reduction operation&#10;     *&#10;     * @see #reducing(BinaryOperator)&#10;     * @see #reducing(Object, Function, BinaryOperator)&#10;     "
  ]
  node [
    id 2134
    label "public static Collector<T, ?, Optional<T>> reducing(BinaryOperator<T> op)"
    type "method"
    comment "&#10;     * Returns a {@code Collector} which performs a reduction of its&#10;     * input elements under a specified {@code BinaryOperator}.  The result&#10;     * is described as an {@code Optional<T>}.&#10;     *&#10;     * @apiNote&#10;     * The {@code reducing()} collectors are most useful when used in a&#10;     * multi-level reduction, downstream of {@code groupingBy} or&#10;     * {@code partitioningBy}.  To perform a simple reduction on a stream,&#10;     * use {@link Stream#reduce(BinaryOperator)} instead.&#10;     *&#10;     * <p>For example, given a stream of {@code Person}, to calculate tallest&#10;     * person in each city:&#10;     * <pre>{@code&#10;     * Comparator<Person> byHeight = Comparator.comparing(Person::getHeight);&#10;     * Map<City, Optional<Person>> tallestByCity&#10;     *   = people.stream().collect(&#10;     *     groupingBy(Person::getCity,&#10;     *                reducing(BinaryOperator.maxBy(byHeight))));&#10;     * }</pre>&#10;     *&#10;     * @param <T> element type for the input and output of the reduction&#10;     * @param op a {@code BinaryOperator<T>} used to reduce the input elements&#10;     * @return a {@code Collector} which implements the reduction operation&#10;     *&#10;     * @see #reducing(Object, BinaryOperator)&#10;     * @see #reducing(Object, Function, BinaryOperator)&#10;     "
  ]
  node [
    id 2135
    label "public static Collector<T, ?, U> reducing(U identity, Function<? super T, ? extends U> mapper, BinaryOperator<U> op)"
    type "method"
    comment "&#10;     * Returns a {@code Collector} which performs a reduction of its&#10;     * input elements under a specified mapping function and&#10;     * {@code BinaryOperator}. This is a generalization of&#10;     * {@link #reducing(Object, BinaryOperator)} which allows a transformation&#10;     * of the elements before reduction.&#10;     *&#10;     * @apiNote&#10;     * The {@code reducing()} collectors are most useful when used in a&#10;     * multi-level reduction, downstream of {@code groupingBy} or&#10;     * {@code partitioningBy}.  To perform a simple map-reduce on a stream,&#10;     * use {@link Stream#map(Function)} and {@link Stream#reduce(Object, BinaryOperator)}&#10;     * instead.&#10;     *&#10;     * <p>For example, given a stream of {@code Person}, to calculate the longest&#10;     * last name of residents in each city:&#10;     * <pre>{@code&#10;     * Comparator<String> byLength = Comparator.comparing(String::length);&#10;     * Map<City, String> longestLastNameByCity&#10;     *   = people.stream().collect(&#10;     *     groupingBy(Person::getCity,&#10;     *                reducing(&#34;&#34;,&#10;     *                         Person::getLastName,&#10;     *                         BinaryOperator.maxBy(byLength))));&#10;     * }</pre>&#10;     *&#10;     * @param <T> the type of the input elements&#10;     * @param <U> the type of the mapped values&#10;     * @param identity the identity value for the reduction (also, the value&#10;     *                 that is returned when there are no input elements)&#10;     * @param mapper a mapping function to apply to each input value&#10;     * @param op a {@code BinaryOperator<U>} used to reduce the mapped values&#10;     * @return a {@code Collector} implementing the map-reduce operation&#10;     *&#10;     * @see #reducing(Object, BinaryOperator)&#10;     * @see #reducing(BinaryOperator)&#10;     "
  ]
  node [
    id 2136
    label "reducing(Object"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2137
    label "public static Collector<T, ?, Map<K, List<T>>> groupingBy(Function<? super T, ? extends K> classifier)"
    type "method"
    comment "&#10;     * Returns a {@code Collector} implementing a &#34;group by&#34; operation on&#10;     * input elements of type {@code T}, grouping elements according to a&#10;     * classification function, and returning the results in a {@code Map}.&#10;     *&#10;     * <p>The classification function maps elements to some key type {@code K}.&#10;     * The collector produces a {@code Map<K, List<T>>} whose keys are the&#10;     * values resulting from applying the classification function to the input&#10;     * elements, and whose corresponding values are {@code List}s containing the&#10;     * input elements which map to the associated key under the classification&#10;     * function.&#10;     *&#10;     * <p>There are no guarantees on the type, mutability, serializability, or&#10;     * thread-safety of the {@code Map} or {@code List} objects returned.&#10;     * @implSpec&#10;     * This produces a result similar to:&#10;     * <pre>{@code&#10;     *     groupingBy(classifier, toList());&#10;     * }</pre>&#10;     *&#10;     * @implNote&#10;     * The returned {@code Collector} is not concurrent.  For parallel stream&#10;     * pipelines, the {@code combiner} function operates by merging the keys&#10;     * from one map into another, which can be an expensive operation.  If&#10;     * preservation of the order in which elements appear in the resulting {@code Map}&#10;     * collector is not required, using {@link #groupingByConcurrent(Function)}&#10;     * may offer better parallel performance.&#10;     *&#10;     * @param <T> the type of the input elements&#10;     * @param <K> the type of the keys&#10;     * @param classifier the classifier function mapping input elements to keys&#10;     * @return a {@code Collector} implementing the group-by operation&#10;     *&#10;     * @see #groupingBy(Function, Collector)&#10;     * @see #groupingBy(Function, Supplier, Collector)&#10;     * @see #groupingByConcurrent(Function)&#10;     "
  ]
  node [
    id 2138
    label "groupingByConcurrent(Function)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2139
    label "public static Collector<T, ?, Map<K, D>> groupingBy(Function<? super T, ? extends K> classifier, Collector<? super T, A, D> downstream)"
    type "method"
    comment "&#10;     * Returns a {@code Collector} implementing a cascaded &#34;group by&#34; operation&#10;     * on input elements of type {@code T}, grouping elements according to a&#10;     * classification function, and then performing a reduction operation on&#10;     * the values associated with a given key using the specified downstream&#10;     * {@code Collector}.&#10;     *&#10;     * <p>The classification function maps elements to some key type {@code K}.&#10;     * The downstream collector operates on elements of type {@code T} and&#10;     * produces a result of type {@code D}. The resulting collector produces a&#10;     * {@code Map<K, D>}.&#10;     *&#10;     * <p>There are no guarantees on the type, mutability,&#10;     * serializability, or thread-safety of the {@code Map} returned.&#10;     *&#10;     * <p>For example, to compute the set of last names of people in each city:&#10;     * <pre>{@code&#10;     * Map<City, Set<String>> namesByCity&#10;     *   = people.stream().collect(&#10;     *     groupingBy(Person::getCity,&#10;     *                mapping(Person::getLastName,&#10;     *                        toSet())));&#10;     * }</pre>&#10;     *&#10;     * @implNote&#10;     * The returned {@code Collector} is not concurrent.  For parallel stream&#10;     * pipelines, the {@code combiner} function operates by merging the keys&#10;     * from one map into another, which can be an expensive operation.  If&#10;     * preservation of the order in which elements are presented to the downstream&#10;     * collector is not required, using {@link #groupingByConcurrent(Function, Collector)}&#10;     * may offer better parallel performance.&#10;     *&#10;     * @param <T> the type of the input elements&#10;     * @param <K> the type of the keys&#10;     * @param <A> the intermediate accumulation type of the downstream collector&#10;     * @param <D> the result type of the downstream reduction&#10;     * @param classifier a classifier function mapping input elements to keys&#10;     * @param downstream a {@code Collector} implementing the downstream reduction&#10;     * @return a {@code Collector} implementing the cascaded group-by operation&#10;     * @see #groupingBy(Function)&#10;     *&#10;     * @see #groupingBy(Function, Supplier, Collector)&#10;     * @see #groupingByConcurrent(Function, Collector)&#10;     "
  ]
  node [
    id 2140
    label "groupingByConcurrent(Function"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2141
    label "public static Collector<T, ?, M> groupingBy(Function<? super T, ? extends K> classifier, Supplier<M> mapFactory, Collector<? super T, A, D> downstream)"
    type "method"
    comment "&#10;     * Returns a {@code Collector} implementing a cascaded &#34;group by&#34; operation&#10;     * on input elements of type {@code T}, grouping elements according to a&#10;     * classification function, and then performing a reduction operation on&#10;     * the values associated with a given key using the specified downstream&#10;     * {@code Collector}.  The {@code Map} produced by the Collector is created&#10;     * with the supplied factory function.&#10;     *&#10;     * <p>The classification function maps elements to some key type {@code K}.&#10;     * The downstream collector operates on elements of type {@code T} and&#10;     * produces a result of type {@code D}. The resulting collector produces a&#10;     * {@code Map<K, D>}.&#10;     *&#10;     * <p>For example, to compute the set of last names of people in each city,&#10;     * where the city names are sorted:&#10;     * <pre>{@code&#10;     * Map<City, Set<String>> namesByCity&#10;     *   = people.stream().collect(&#10;     *     groupingBy(Person::getCity,&#10;     *                TreeMap::new,&#10;     *                mapping(Person::getLastName,&#10;     *                        toSet())));&#10;     * }</pre>&#10;     *&#10;     * @implNote&#10;     * The returned {@code Collector} is not concurrent.  For parallel stream&#10;     * pipelines, the {@code combiner} function operates by merging the keys&#10;     * from one map into another, which can be an expensive operation.  If&#10;     * preservation of the order in which elements are presented to the downstream&#10;     * collector is not required, using {@link #groupingByConcurrent(Function, Supplier, Collector)}&#10;     * may offer better parallel performance.&#10;     *&#10;     * @param <T> the type of the input elements&#10;     * @param <K> the type of the keys&#10;     * @param <A> the intermediate accumulation type of the downstream collector&#10;     * @param <D> the result type of the downstream reduction&#10;     * @param <M> the type of the resulting {@code Map}&#10;     * @param classifier a classifier function mapping input elements to keys&#10;     * @param downstream a {@code Collector} implementing the downstream reduction&#10;     * @param mapFactory a supplier providing a new empty {@code Map}&#10;     *                   into which the results will be inserted&#10;     * @return a {@code Collector} implementing the cascaded group-by operation&#10;     *&#10;     * @see #groupingBy(Function, Collector)&#10;     * @see #groupingBy(Function)&#10;     * @see #groupingByConcurrent(Function, Supplier, Collector)&#10;     "
  ]
  node [
    id 2142
    label "public static Collector<T, ?, ConcurrentMap<K, List<T>>> groupingByConcurrent(Function<? super T, ? extends K> classifier)"
    type "method"
    comment "&#10;     * Returns a concurrent {@code Collector} implementing a &#34;group by&#34;&#10;     * operation on input elements of type {@code T}, grouping elements&#10;     * according to a classification function.&#10;     *&#10;     * <p>This is a {@link Collector.Characteristics#CONCURRENT concurrent} and&#10;     * {@link Collector.Characteristics#UNORDERED unordered} Collector.&#10;     *&#10;     * <p>The classification function maps elements to some key type {@code K}.&#10;     * The collector produces a {@code ConcurrentMap<K, List<T>>} whose keys are the&#10;     * values resulting from applying the classification function to the input&#10;     * elements, and whose corresponding values are {@code List}s containing the&#10;     * input elements which map to the associated key under the classification&#10;     * function.&#10;     *&#10;     * <p>There are no guarantees on the type, mutability, or serializability&#10;     * of the {@code ConcurrentMap} or {@code List} objects returned, or of the&#10;     * thread-safety of the {@code List} objects returned.&#10;     * @implSpec&#10;     * This produces a result similar to:&#10;     * <pre>{@code&#10;     *     groupingByConcurrent(classifier, toList());&#10;     * }</pre>&#10;     *&#10;     * @param <T> the type of the input elements&#10;     * @param <K> the type of the keys&#10;     * @param classifier a classifier function mapping input elements to keys&#10;     * @return a concurrent, unordered {@code Collector} implementing the group-by operation&#10;     *&#10;     * @see #groupingBy(Function)&#10;     * @see #groupingByConcurrent(Function, Collector)&#10;     * @see #groupingByConcurrent(Function, Supplier, Collector)&#10;     "
  ]
  node [
    id 2143
    label "public static Collector<T, ?, ConcurrentMap<K, D>> groupingByConcurrent(Function<? super T, ? extends K> classifier, Collector<? super T, A, D> downstream)"
    type "method"
    comment "&#10;     * Returns a concurrent {@code Collector} implementing a cascaded &#34;group by&#34;&#10;     * operation on input elements of type {@code T}, grouping elements&#10;     * according to a classification function, and then performing a reduction&#10;     * operation on the values associated with a given key using the specified&#10;     * downstream {@code Collector}.&#10;     *&#10;     * <p>This is a {@link Collector.Characteristics#CONCURRENT concurrent} and&#10;     * {@link Collector.Characteristics#UNORDERED unordered} Collector.&#10;     *&#10;     * <p>The classification function maps elements to some key type {@code K}.&#10;     * The downstream collector operates on elements of type {@code T} and&#10;     * produces a result of type {@code D}. The resulting collector produces a&#10;     * {@code ConcurrentMap<K, D>}.&#10;     *&#10;     * <p>There are no guarantees on the type, mutability, or serializability&#10;     * of the {@code ConcurrentMap} returned.&#10;     *&#10;     * <p>For example, to compute the set of last names of people in each city,&#10;     * where the city names are sorted:&#10;     * <pre>{@code&#10;     * ConcurrentMap<City, Set<String>> namesByCity&#10;     *   = people.stream().collect(&#10;     *     groupingByConcurrent(Person::getCity,&#10;     *                          mapping(Person::getLastName,&#10;     *                                  toSet())));&#10;     * }</pre>&#10;     *&#10;     * @param <T> the type of the input elements&#10;     * @param <K> the type of the keys&#10;     * @param <A> the intermediate accumulation type of the downstream collector&#10;     * @param <D> the result type of the downstream reduction&#10;     * @param classifier a classifier function mapping input elements to keys&#10;     * @param downstream a {@code Collector} implementing the downstream reduction&#10;     * @return a concurrent, unordered {@code Collector} implementing the cascaded group-by operation&#10;     *&#10;     * @see #groupingBy(Function, Collector)&#10;     * @see #groupingByConcurrent(Function)&#10;     * @see #groupingByConcurrent(Function, Supplier, Collector)&#10;     "
  ]
  node [
    id 2144
    label "public static Collector<T, ?, M> groupingByConcurrent(Function<? super T, ? extends K> classifier, Supplier<M> mapFactory, Collector<? super T, A, D> downstream)"
    type "method"
    comment "&#10;     * Returns a concurrent {@code Collector} implementing a cascaded &#34;group by&#34;&#10;     * operation on input elements of type {@code T}, grouping elements&#10;     * according to a classification function, and then performing a reduction&#10;     * operation on the values associated with a given key using the specified&#10;     * downstream {@code Collector}.  The {@code ConcurrentMap} produced by the&#10;     * Collector is created with the supplied factory function.&#10;     *&#10;     * <p>This is a {@link Collector.Characteristics#CONCURRENT concurrent} and&#10;     * {@link Collector.Characteristics#UNORDERED unordered} Collector.&#10;     *&#10;     * <p>The classification function maps elements to some key type {@code K}.&#10;     * The downstream collector operates on elements of type {@code T} and&#10;     * produces a result of type {@code D}. The resulting collector produces a&#10;     * {@code ConcurrentMap<K, D>}.&#10;     *&#10;     * <p>For example, to compute the set of last names of people in each city,&#10;     * where the city names are sorted:&#10;     * <pre>{@code&#10;     * ConcurrentMap<City, Set<String>> namesByCity&#10;     *   = people.stream().collect(&#10;     *     groupingByConcurrent(Person::getCity,&#10;     *                          ConcurrentSkipListMap::new,&#10;     *                          mapping(Person::getLastName,&#10;     *                                  toSet())));&#10;     * }</pre>&#10;     *&#10;     * @param <T> the type of the input elements&#10;     * @param <K> the type of the keys&#10;     * @param <A> the intermediate accumulation type of the downstream collector&#10;     * @param <D> the result type of the downstream reduction&#10;     * @param <M> the type of the resulting {@code ConcurrentMap}&#10;     * @param classifier a classifier function mapping input elements to keys&#10;     * @param downstream a {@code Collector} implementing the downstream reduction&#10;     * @param mapFactory a supplier providing a new empty {@code ConcurrentMap}&#10;     *                   into which the results will be inserted&#10;     * @return a concurrent, unordered {@code Collector} implementing the cascaded group-by operation&#10;     *&#10;     * @see #groupingByConcurrent(Function)&#10;     * @see #groupingByConcurrent(Function, Collector)&#10;     * @see #groupingBy(Function, Supplier, Collector)&#10;     "
  ]
  node [
    id 2145
    label "public static Collector<T, ?, Map<Boolean, List<T>>> partitioningBy(Predicate<? super T> predicate)"
    type "method"
    comment "&#10;     * Returns a {@code Collector} which partitions the input elements according&#10;     * to a {@code Predicate}, and organizes them into a&#10;     * {@code Map<Boolean, List<T>>}.&#10;     *&#10;     * The returned {@code Map} always contains mappings for both&#10;     * {@code false} and {@code true} keys.&#10;     * There are no guarantees on the type, mutability,&#10;     * serializability, or thread-safety of the {@code Map} or {@code List}&#10;     * returned.&#10;     *&#10;     * @apiNote&#10;     * If a partition has no elements, its value in the result Map will be&#10;     * an empty List.&#10;     *&#10;     * @param <T> the type of the input elements&#10;     * @param predicate a predicate used for classifying input elements&#10;     * @return a {@code Collector} implementing the partitioning operation&#10;     *&#10;     * @see #partitioningBy(Predicate, Collector)&#10;     "
  ]
  node [
    id 2146
    label "public static Collector<T, ?, Map<Boolean, D>> partitioningBy(Predicate<? super T> predicate, Collector<? super T, A, D> downstream)"
    type "method"
    comment "&#10;     * Returns a {@code Collector} which partitions the input elements according&#10;     * to a {@code Predicate}, reduces the values in each partition according to&#10;     * another {@code Collector}, and organizes them into a&#10;     * {@code Map<Boolean, D>} whose values are the result of the downstream&#10;     * reduction.&#10;     *&#10;     * <p>&#10;     * The returned {@code Map} always contains mappings for both&#10;     * {@code false} and {@code true} keys.&#10;     * There are no guarantees on the type, mutability,&#10;     * serializability, or thread-safety of the {@code Map} returned.&#10;     *&#10;     * @apiNote&#10;     * If a partition has no elements, its value in the result Map will be&#10;     * obtained by calling the downstream collector's supplier function and then&#10;     * applying the finisher function.&#10;     *&#10;     * @param <T> the type of the input elements&#10;     * @param <A> the intermediate accumulation type of the downstream collector&#10;     * @param <D> the result type of the downstream reduction&#10;     * @param predicate a predicate used for classifying input elements&#10;     * @param downstream a {@code Collector} implementing the downstream&#10;     *                   reduction&#10;     * @return a {@code Collector} implementing the cascaded partitioning&#10;     *         operation&#10;     *&#10;     * @see #partitioningBy(Predicate)&#10;     "
  ]
  node [
    id 2147
    label "public static Collector<T, ?, Map<K, U>> toMap(Function<? super T, ? extends K> keyMapper, Function<? super T, ? extends U> valueMapper)"
    type "method"
    comment "&#10;     * Returns a {@code Collector} that accumulates elements into a&#10;     * {@code Map} whose keys and values are the result of applying the provided&#10;     * mapping functions to the input elements.&#10;     *&#10;     * <p>If the mapped keys contain duplicates (according to&#10;     * {@link Object#equals(Object)}), an {@code IllegalStateException} is&#10;     * thrown when the collection operation is performed.  If the mapped keys&#10;     * might have duplicates, use {@link #toMap(Function, Function, BinaryOperator)}&#10;     * instead.&#10;     *&#10;     * <p>There are no guarantees on the type, mutability, serializability,&#10;     * or thread-safety of the {@code Map} returned.&#10;     *&#10;     * @apiNote&#10;     * It is common for either the key or the value to be the input elements.&#10;     * In this case, the utility method&#10;     * {@link java.util.function.Function#identity()} may be helpful.&#10;     * For example, the following produces a {@code Map} mapping&#10;     * students to their grade point average:&#10;     * <pre>{@code&#10;     * Map<Student, Double> studentToGPA&#10;     *   = students.stream().collect(&#10;     *     toMap(Function.identity(),&#10;     *           student -> computeGPA(student)));&#10;     * }</pre>&#10;     * And the following produces a {@code Map} mapping a unique identifier to&#10;     * students:&#10;     * <pre>{@code&#10;     * Map<String, Student> studentIdToStudent&#10;     *   = students.stream().collect(&#10;     *     toMap(Student::getId,&#10;     *           Function.identity()));&#10;     * }</pre>&#10;     *&#10;     * @implNote&#10;     * The returned {@code Collector} is not concurrent.  For parallel stream&#10;     * pipelines, the {@code combiner} function operates by merging the keys&#10;     * from one map into another, which can be an expensive operation.  If it is&#10;     * not required that results are inserted into the {@code Map} in encounter&#10;     * order, using {@link #toConcurrentMap(Function, Function)}&#10;     * may offer better parallel performance.&#10;     *&#10;     * @param <T> the type of the input elements&#10;     * @param <K> the output type of the key mapping function&#10;     * @param <U> the output type of the value mapping function&#10;     * @param keyMapper a mapping function to produce keys&#10;     * @param valueMapper a mapping function to produce values&#10;     * @return a {@code Collector} which collects elements into a {@code Map}&#10;     * whose keys and values are the result of applying mapping functions to&#10;     * the input elements&#10;     *&#10;     * @see #toMap(Function, Function, BinaryOperator)&#10;     * @see #toMap(Function, Function, BinaryOperator, Supplier)&#10;     * @see #toConcurrentMap(Function, Function)&#10;     "
  ]
  node [
    id 2148
    label "toMap(Function"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2149
    label "identity()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2150
    label "java.util.function.Function"
    type "class"
    comment "&#10; * Represents a function that accepts one argument and produces a result.&#10; *&#10; * <p>This is a <a href=&#34;package-summary.html&#34;>functional interface</a>&#10; * whose functional method is {@link #apply(Object)}.&#10; *&#10; * @param <T> the type of the input to the function&#10; * @param <R> the type of the result of the function&#10; *&#10; * @since 1.8&#10; "
  ]
  node [
    id 2151
    label " R apply(T t)"
    type "method"
    comment "&#10;     * Applies this function to the given argument.&#10;     *&#10;     * @param t the function argument&#10;     * @return the function result&#10;     "
  ]
  node [
    id 2152
    label " Function<V, R> compose(Function<? super V, ? extends T> before)"
    type "method"
    comment "&#10;     * Returns a composed function that first applies the {@code before}&#10;     * function to its input, and then applies this function to the result.&#10;     * If evaluation of either function throws an exception, it is relayed to&#10;     * the caller of the composed function.&#10;     *&#10;     * @param <V> the type of input to the {@code before} function, and to the&#10;     *           composed function&#10;     * @param before the function to apply before this function is applied&#10;     * @return a composed function that first applies the {@code before}&#10;     * function and then applies this function&#10;     * @throws NullPointerException if before is null&#10;     *&#10;     * @see #andThen(Function)&#10;     "
  ]
  node [
    id 2153
    label " Function<T, V> andThen(Function<? super R, ? extends V> after)"
    type "method"
    comment "&#10;     * Returns a composed function that first applies this function to&#10;     * its input, and then applies the {@code after} function to the result.&#10;     * If evaluation of either function throws an exception, it is relayed to&#10;     * the caller of the composed function.&#10;     *&#10;     * @param <V> the type of output of the {@code after} function, and of the&#10;     *           composed function&#10;     * @param after the function to apply after this function is applied&#10;     * @return a composed function that first applies this function and then&#10;     * applies the {@code after} function&#10;     * @throws NullPointerException if after is null&#10;     *&#10;     * @see #compose(Function)&#10;     "
  ]
  node [
    id 2154
    label " static Function<T, T> identity()"
    type "method"
    comment "&#10;     * Returns a function that always returns its input argument.&#10;     *&#10;     * @param <T> the type of the input and output objects to the function&#10;     * @return a function that always returns its input argument&#10;     "
  ]
  node [
    id 2155
    label "toConcurrentMap(Function"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2156
    label "public static Collector<T, ?, Map<K, U>> toUnmodifiableMap(Function<? super T, ? extends K> keyMapper, Function<? super T, ? extends U> valueMapper)"
    type "method"
    comment "&#10;     * Returns a {@code Collector} that accumulates the input elements into an&#10;     * <a href=&#34;../Map.html#unmodifiable&#34;>unmodifiable Map</a>,&#10;     * whose keys and values are the result of applying the provided&#10;     * mapping functions to the input elements.&#10;     *&#10;     * <p>If the mapped keys contain duplicates (according to&#10;     * {@link Object#equals(Object)}), an {@code IllegalStateException} is&#10;     * thrown when the collection operation is performed.  If the mapped keys&#10;     * might have duplicates, use {@link #toUnmodifiableMap(Function, Function, BinaryOperator)}&#10;     * to handle merging of the values.&#10;     *&#10;     * <p>The returned Collector disallows null keys and values. If either mapping function&#10;     * returns null, {@code NullPointerException} will be thrown.&#10;     *&#10;     * @param <T> the type of the input elements&#10;     * @param <K> the output type of the key mapping function&#10;     * @param <U> the output type of the value mapping function&#10;     * @param keyMapper a mapping function to produce keys, must be non-null&#10;     * @param valueMapper a mapping function to produce values, must be non-null&#10;     * @return a {@code Collector} that accumulates the input elements into an&#10;     * <a href=&#34;../Map.html#unmodifiable&#34;>unmodifiable Map</a>, whose keys and values&#10;     * are the result of applying the provided mapping functions to the input elements&#10;     * @throws NullPointerException if either keyMapper or valueMapper is null&#10;     *&#10;     * @see #toUnmodifiableMap(Function, Function, BinaryOperator)&#10;     * @since 10&#10;     "
  ]
  node [
    id 2157
    label "toUnmodifiableMap(Function"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2158
    label "public static Collector<T, ?, Map<K, U>> toMap(Function<? super T, ? extends K> keyMapper, Function<? super T, ? extends U> valueMapper, BinaryOperator<U> mergeFunction)"
    type "method"
    comment "&#10;     * Returns a {@code Collector} that accumulates elements into a&#10;     * {@code Map} whose keys and values are the result of applying the provided&#10;     * mapping functions to the input elements.&#10;     *&#10;     * <p>If the mapped&#10;     * keys contain duplicates (according to {@link Object#equals(Object)}),&#10;     * the value mapping function is applied to each equal element, and the&#10;     * results are merged using the provided merging function.&#10;     *&#10;     * <p>There are no guarantees on the type, mutability, serializability,&#10;     * or thread-safety of the {@code Map} returned.&#10;     *&#10;     * @apiNote&#10;     * There are multiple ways to deal with collisions between multiple elements&#10;     * mapping to the same key.  The other forms of {@code toMap} simply use&#10;     * a merge function that throws unconditionally, but you can easily write&#10;     * more flexible merge policies.  For example, if you have a stream&#10;     * of {@code Person}, and you want to produce a &#34;phone book&#34; mapping name to&#10;     * address, but it is possible that two persons have the same name, you can&#10;     * do as follows to gracefully deal with these collisions, and produce a&#10;     * {@code Map} mapping names to a concatenated list of addresses:&#10;     * <pre>{@code&#10;     * Map<String, String> phoneBook&#10;     *   = people.stream().collect(&#10;     *     toMap(Person::getName,&#10;     *           Person::getAddress,&#10;     *           (s, a) -> s + &#34;, &#34; + a));&#10;     * }</pre>&#10;     *&#10;     * @implNote&#10;     * The returned {@code Collector} is not concurrent.  For parallel stream&#10;     * pipelines, the {@code combiner} function operates by merging the keys&#10;     * from one map into another, which can be an expensive operation.  If it is&#10;     * not required that results are merged into the {@code Map} in encounter&#10;     * order, using {@link #toConcurrentMap(Function, Function, BinaryOperator)}&#10;     * may offer better parallel performance.&#10;     *&#10;     * @param <T> the type of the input elements&#10;     * @param <K> the output type of the key mapping function&#10;     * @param <U> the output type of the value mapping function&#10;     * @param keyMapper a mapping function to produce keys&#10;     * @param valueMapper a mapping function to produce values&#10;     * @param mergeFunction a merge function, used to resolve collisions between&#10;     *                      values associated with the same key, as supplied&#10;     *                      to {@link Map#merge(Object, Object, BiFunction)}&#10;     * @return a {@code Collector} which collects elements into a {@code Map}&#10;     * whose keys are the result of applying a key mapping function to the input&#10;     * elements, and whose values are the result of applying a value mapping&#10;     * function to all input elements equal to the key and combining them&#10;     * using the merge function&#10;     *&#10;     * @see #toMap(Function, Function)&#10;     * @see #toMap(Function, Function, BinaryOperator, Supplier)&#10;     * @see #toConcurrentMap(Function, Function, BinaryOperator)&#10;     "
  ]
  node [
    id 2159
    label "public static Collector<T, ?, Map<K, U>> toUnmodifiableMap(Function<? super T, ? extends K> keyMapper, Function<? super T, ? extends U> valueMapper, BinaryOperator<U> mergeFunction)"
    type "method"
    comment "&#10;     * Returns a {@code Collector} that accumulates the input elements into an&#10;     * <a href=&#34;../Map.html#unmodifiable&#34;>unmodifiable Map</a>,&#10;     * whose keys and values are the result of applying the provided&#10;     * mapping functions to the input elements.&#10;     *&#10;     * <p>If the mapped&#10;     * keys contain duplicates (according to {@link Object#equals(Object)}),&#10;     * the value mapping function is applied to each equal element, and the&#10;     * results are merged using the provided merging function.&#10;     *&#10;     * <p>The returned Collector disallows null keys and values. If either mapping function&#10;     * returns null, {@code NullPointerException} will be thrown.&#10;     *&#10;     * @param <T> the type of the input elements&#10;     * @param <K> the output type of the key mapping function&#10;     * @param <U> the output type of the value mapping function&#10;     * @param keyMapper a mapping function to produce keys, must be non-null&#10;     * @param valueMapper a mapping function to produce values, must be non-null&#10;     * @param mergeFunction a merge function, used to resolve collisions between&#10;     *                      values associated with the same key, as supplied&#10;     *                      to {@link Map#merge(Object, Object, BiFunction)},&#10;     *                      must be non-null&#10;     * @return a {@code Collector} that accumulates the input elements into an&#10;     * <a href=&#34;../Map.html#unmodifiable&#34;>unmodifiable Map</a>, whose keys and values&#10;     * are the result of applying the provided mapping functions to the input elements&#10;     * @throws NullPointerException if the keyMapper, valueMapper, or mergeFunction is null&#10;     *&#10;     * @see #toUnmodifiableMap(Function, Function)&#10;     * @since 10&#10;     "
  ]
  node [
    id 2160
    label "public static Collector<T, ?, M> toMap(Function<? super T, ? extends K> keyMapper, Function<? super T, ? extends U> valueMapper, BinaryOperator<U> mergeFunction, Supplier<M> mapFactory)"
    type "method"
    comment "&#10;     * Returns a {@code Collector} that accumulates elements into a&#10;     * {@code Map} whose keys and values are the result of applying the provided&#10;     * mapping functions to the input elements.&#10;     *&#10;     * <p>If the mapped&#10;     * keys contain duplicates (according to {@link Object#equals(Object)}),&#10;     * the value mapping function is applied to each equal element, and the&#10;     * results are merged using the provided merging function.  The {@code Map}&#10;     * is created by a provided supplier function.&#10;     *&#10;     * @implNote&#10;     * The returned {@code Collector} is not concurrent.  For parallel stream&#10;     * pipelines, the {@code combiner} function operates by merging the keys&#10;     * from one map into another, which can be an expensive operation.  If it is&#10;     * not required that results are merged into the {@code Map} in encounter&#10;     * order, using {@link #toConcurrentMap(Function, Function, BinaryOperator, Supplier)}&#10;     * may offer better parallel performance.&#10;     *&#10;     * @param <T> the type of the input elements&#10;     * @param <K> the output type of the key mapping function&#10;     * @param <U> the output type of the value mapping function&#10;     * @param <M> the type of the resulting {@code Map}&#10;     * @param keyMapper a mapping function to produce keys&#10;     * @param valueMapper a mapping function to produce values&#10;     * @param mergeFunction a merge function, used to resolve collisions between&#10;     *                      values associated with the same key, as supplied&#10;     *                      to {@link Map#merge(Object, Object, BiFunction)}&#10;     * @param mapFactory a supplier providing a new empty {@code Map}&#10;     *                   into which the results will be inserted&#10;     * @return a {@code Collector} which collects elements into a {@code Map}&#10;     * whose keys are the result of applying a key mapping function to the input&#10;     * elements, and whose values are the result of applying a value mapping&#10;     * function to all input elements equal to the key and combining them&#10;     * using the merge function&#10;     *&#10;     * @see #toMap(Function, Function)&#10;     * @see #toMap(Function, Function, BinaryOperator)&#10;     * @see #toConcurrentMap(Function, Function, BinaryOperator, Supplier)&#10;     "
  ]
  node [
    id 2161
    label "public static Collector<T, ?, ConcurrentMap<K, U>> toConcurrentMap(Function<? super T, ? extends K> keyMapper, Function<? super T, ? extends U> valueMapper)"
    type "method"
    comment "&#10;     * Returns a concurrent {@code Collector} that accumulates elements into a&#10;     * {@code ConcurrentMap} whose keys and values are the result of applying&#10;     * the provided mapping functions to the input elements.&#10;     *&#10;     * <p>If the mapped keys contain duplicates (according to&#10;     * {@link Object#equals(Object)}), an {@code IllegalStateException} is&#10;     * thrown when the collection operation is performed.  If the mapped keys&#10;     * may have duplicates, use&#10;     * {@link #toConcurrentMap(Function, Function, BinaryOperator)} instead.&#10;     *&#10;     * <p>There are no guarantees on the type, mutability, or serializability&#10;     * of the {@code ConcurrentMap} returned.&#10;     *&#10;     * @apiNote&#10;     * It is common for either the key or the value to be the input elements.&#10;     * In this case, the utility method&#10;     * {@link java.util.function.Function#identity()} may be helpful.&#10;     * For example, the following produces a {@code ConcurrentMap} mapping&#10;     * students to their grade point average:&#10;     * <pre>{@code&#10;     * ConcurrentMap<Student, Double> studentToGPA&#10;     *   = students.stream().collect(&#10;     *     toConcurrentMap(Function.identity(),&#10;     *                     student -> computeGPA(student)));&#10;     * }</pre>&#10;     * And the following produces a {@code ConcurrentMap} mapping a&#10;     * unique identifier to students:&#10;     * <pre>{@code&#10;     * ConcurrentMap<String, Student> studentIdToStudent&#10;     *   = students.stream().collect(&#10;     *     toConcurrentMap(Student::getId,&#10;     *                     Function.identity()));&#10;     * }</pre>&#10;     *&#10;     * <p>This is a {@link Collector.Characteristics#CONCURRENT concurrent} and&#10;     * {@link Collector.Characteristics#UNORDERED unordered} Collector.&#10;     *&#10;     * @param <T> the type of the input elements&#10;     * @param <K> the output type of the key mapping function&#10;     * @param <U> the output type of the value mapping function&#10;     * @param keyMapper the mapping function to produce keys&#10;     * @param valueMapper the mapping function to produce values&#10;     * @return a concurrent, unordered {@code Collector} which collects elements into a&#10;     * {@code ConcurrentMap} whose keys are the result of applying a key mapping&#10;     * function to the input elements, and whose values are the result of&#10;     * applying a value mapping function to the input elements&#10;     *&#10;     * @see #toMap(Function, Function)&#10;     * @see #toConcurrentMap(Function, Function, BinaryOperator)&#10;     * @see #toConcurrentMap(Function, Function, BinaryOperator, Supplier)&#10;     "
  ]
  node [
    id 2162
    label "public static Collector<T, ?, ConcurrentMap<K, U>> toConcurrentMap(Function<? super T, ? extends K> keyMapper, Function<? super T, ? extends U> valueMapper, BinaryOperator<U> mergeFunction)"
    type "method"
    comment "&#10;     * Returns a concurrent {@code Collector} that accumulates elements into a&#10;     * {@code ConcurrentMap} whose keys and values are the result of applying&#10;     * the provided mapping functions to the input elements.&#10;     *&#10;     * <p>If the mapped keys contain duplicates (according to {@link Object#equals(Object)}),&#10;     * the value mapping function is applied to each equal element, and the&#10;     * results are merged using the provided merging function.&#10;     *&#10;     * <p>There are no guarantees on the type, mutability, or serializability&#10;     * of the {@code ConcurrentMap} returned.&#10;     *&#10;     * @apiNote&#10;     * There are multiple ways to deal with collisions between multiple elements&#10;     * mapping to the same key.  The other forms of {@code toConcurrentMap} simply use&#10;     * a merge function that throws unconditionally, but you can easily write&#10;     * more flexible merge policies.  For example, if you have a stream&#10;     * of {@code Person}, and you want to produce a &#34;phone book&#34; mapping name to&#10;     * address, but it is possible that two persons have the same name, you can&#10;     * do as follows to gracefully deal with these collisions, and produce a&#10;     * {@code ConcurrentMap} mapping names to a concatenated list of addresses:&#10;     * <pre>{@code&#10;     * ConcurrentMap<String, String> phoneBook&#10;     *   = people.stream().collect(&#10;     *     toConcurrentMap(Person::getName,&#10;     *                     Person::getAddress,&#10;     *                     (s, a) -> s + &#34;, &#34; + a));&#10;     * }</pre>&#10;     *&#10;     * <p>This is a {@link Collector.Characteristics#CONCURRENT concurrent} and&#10;     * {@link Collector.Characteristics#UNORDERED unordered} Collector.&#10;     *&#10;     * @param <T> the type of the input elements&#10;     * @param <K> the output type of the key mapping function&#10;     * @param <U> the output type of the value mapping function&#10;     * @param keyMapper a mapping function to produce keys&#10;     * @param valueMapper a mapping function to produce values&#10;     * @param mergeFunction a merge function, used to resolve collisions between&#10;     *                      values associated with the same key, as supplied&#10;     *                      to {@link Map#merge(Object, Object, BiFunction)}&#10;     * @return a concurrent, unordered {@code Collector} which collects elements into a&#10;     * {@code ConcurrentMap} whose keys are the result of applying a key mapping&#10;     * function to the input elements, and whose values are the result of&#10;     * applying a value mapping function to all input elements equal to the key&#10;     * and combining them using the merge function&#10;     *&#10;     * @see #toConcurrentMap(Function, Function)&#10;     * @see #toConcurrentMap(Function, Function, BinaryOperator, Supplier)&#10;     * @see #toMap(Function, Function, BinaryOperator)&#10;     "
  ]
  node [
    id 2163
    label "public static Collector<T, ?, M> toConcurrentMap(Function<? super T, ? extends K> keyMapper, Function<? super T, ? extends U> valueMapper, BinaryOperator<U> mergeFunction, Supplier<M> mapFactory)"
    type "method"
    comment "&#10;     * Returns a concurrent {@code Collector} that accumulates elements into a&#10;     * {@code ConcurrentMap} whose keys and values are the result of applying&#10;     * the provided mapping functions to the input elements.&#10;     *&#10;     * <p>If the mapped keys contain duplicates (according to {@link Object#equals(Object)}),&#10;     * the value mapping function is applied to each equal element, and the&#10;     * results are merged using the provided merging function.  The&#10;     * {@code ConcurrentMap} is created by a provided supplier function.&#10;     *&#10;     * <p>This is a {@link Collector.Characteristics#CONCURRENT concurrent} and&#10;     * {@link Collector.Characteristics#UNORDERED unordered} Collector.&#10;     *&#10;     * @param <T> the type of the input elements&#10;     * @param <K> the output type of the key mapping function&#10;     * @param <U> the output type of the value mapping function&#10;     * @param <M> the type of the resulting {@code ConcurrentMap}&#10;     * @param keyMapper a mapping function to produce keys&#10;     * @param valueMapper a mapping function to produce values&#10;     * @param mergeFunction a merge function, used to resolve collisions between&#10;     *                      values associated with the same key, as supplied&#10;     *                      to {@link Map#merge(Object, Object, BiFunction)}&#10;     * @param mapFactory a supplier providing a new empty {@code ConcurrentMap}&#10;     *                   into which the results will be inserted&#10;     * @return a concurrent, unordered {@code Collector} which collects elements into a&#10;     * {@code ConcurrentMap} whose keys are the result of applying a key mapping&#10;     * function to the input elements, and whose values are the result of&#10;     * applying a value mapping function to all input elements equal to the key&#10;     * and combining them using the merge function&#10;     *&#10;     * @see #toConcurrentMap(Function, Function)&#10;     * @see #toConcurrentMap(Function, Function, BinaryOperator)&#10;     * @see #toMap(Function, Function, BinaryOperator, Supplier)&#10;     "
  ]
  node [
    id 2164
    label "public static Collector<T, ?, IntSummaryStatistics> summarizingInt(ToIntFunction<? super T> mapper)"
    type "method"
    comment "&#10;     * Returns a {@code Collector} which applies an {@code int}-producing&#10;     * mapping function to each input element, and returns summary statistics&#10;     * for the resulting values.&#10;     *&#10;     * @param <T> the type of the input elements&#10;     * @param mapper a mapping function to apply to each element&#10;     * @return a {@code Collector} implementing the summary-statistics reduction&#10;     *&#10;     * @see #summarizingDouble(ToDoubleFunction)&#10;     * @see #summarizingLong(ToLongFunction)&#10;     "
  ]
  node [
    id 2165
    label "public static Collector<T, ?, LongSummaryStatistics> summarizingLong(ToLongFunction<? super T> mapper)"
    type "method"
    comment "&#10;     * Returns a {@code Collector} which applies an {@code long}-producing&#10;     * mapping function to each input element, and returns summary statistics&#10;     * for the resulting values.&#10;     *&#10;     * @param <T> the type of the input elements&#10;     * @param mapper the mapping function to apply to each element&#10;     * @return a {@code Collector} implementing the summary-statistics reduction&#10;     *&#10;     * @see #summarizingDouble(ToDoubleFunction)&#10;     * @see #summarizingInt(ToIntFunction)&#10;     "
  ]
  node [
    id 2166
    label "public static Collector<T, ?, DoubleSummaryStatistics> summarizingDouble(ToDoubleFunction<? super T> mapper)"
    type "method"
    comment "&#10;     * Returns a {@code Collector} which applies an {@code double}-producing&#10;     * mapping function to each input element, and returns summary statistics&#10;     * for the resulting values.&#10;     *&#10;     * @param <T> the type of the input elements&#10;     * @param mapper a mapping function to apply to each element&#10;     * @return a {@code Collector} implementing the summary-statistics reduction&#10;     *&#10;     * @see #summarizingLong(ToLongFunction)&#10;     * @see #summarizingInt(ToIntFunction)&#10;     "
  ]
  node [
    id 2167
    label "public static Collector<T, ?, R> teeing(Collector<? super T, ?, R1> downstream1, Collector<? super T, ?, R2> downstream2, BiFunction<? super R1, ? super R2, R> merger)"
    type "method"
    comment "&#10;     * Returns a {@code Collector} that is a composite of two downstream collectors.&#10;     * Every element passed to the resulting collector is processed by both downstream&#10;     * collectors, then their results are merged using the specified merge function&#10;     * into the final result.&#10;     *&#10;     * <p>The resulting collector functions do the following:&#10;     *&#10;     * <ul>&#10;     * <li>supplier: creates a result container that contains result containers&#10;     * obtained by calling each collector's supplier&#10;     * <li>accumulator: calls each collector's accumulator with its result container&#10;     * and the input element&#10;     * <li>combiner: calls each collector's combiner with two result containers&#10;     * <li>finisher: calls each collector's finisher with its result container,&#10;     * then calls the supplied merger and returns its result.&#10;     * </ul>&#10;     *&#10;     * <p>The resulting collector is {@link Collector.Characteristics#UNORDERED} if both downstream&#10;     * collectors are unordered and {@link Collector.Characteristics#CONCURRENT} if both downstream&#10;     * collectors are concurrent.&#10;     *&#10;     * @param <T>         the type of the input elements&#10;     * @param <R1>        the result type of the first collector&#10;     * @param <R2>        the result type of the second collector&#10;     * @param <R>         the final result type&#10;     * @param downstream1 the first downstream collector&#10;     * @param downstream2 the second downstream collector&#10;     * @param merger      the function which merges two results into the single one&#10;     * @return a {@code Collector} which aggregates the results of two supplied collectors.&#10;     * @since 12&#10;     "
  ]
  node [
    id 2168
    label " Optional<T> min(Comparator<? super T> comparator)"
    type "method"
    comment "&#10;     * Returns the minimum element of this stream according to the provided&#10;     * {@code Comparator}.  This is a special case of a&#10;     * <a href=&#34;package-summary.html#Reduction&#34;>reduction</a>.&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>terminal operation</a>.&#10;     *&#10;     * @param comparator a <a href=&#34;package-summary.html#NonInterference&#34;>non-interfering</a>,&#10;     *                   <a href=&#34;package-summary.html#Statelessness&#34;>stateless</a>&#10;     *                   {@code Comparator} to compare elements of this stream&#10;     * @return an {@code Optional} describing the minimum element of this stream,&#10;     * or an empty {@code Optional} if the stream is empty&#10;     * @throws NullPointerException if the minimum element is null&#10;     "
  ]
  node [
    id 2169
    label " Optional<T> max(Comparator<? super T> comparator)"
    type "method"
    comment "&#10;     * Returns the maximum element of this stream according to the provided&#10;     * {@code Comparator}.  This is a special case of a&#10;     * <a href=&#34;package-summary.html#Reduction&#34;>reduction</a>.&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>terminal&#10;     * operation</a>.&#10;     *&#10;     * @param comparator a <a href=&#34;package-summary.html#NonInterference&#34;>non-interfering</a>,&#10;     *                   <a href=&#34;package-summary.html#Statelessness&#34;>stateless</a>&#10;     *                   {@code Comparator} to compare elements of this stream&#10;     * @return an {@code Optional} describing the maximum element of this stream,&#10;     * or an empty {@code Optional} if the stream is empty&#10;     * @throws NullPointerException if the maximum element is null&#10;     "
  ]
  node [
    id 2170
    label " long count()"
    type "method"
    comment "&#10;     * Returns the count of elements in this stream.  This is a special case of&#10;     * a <a href=&#34;package-summary.html#Reduction&#34;>reduction</a> and is&#10;     * equivalent to:&#10;     * <pre>{@code&#10;     *     return map(e -> 1L).sum();&#10;     * }</pre>&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>terminal operation</a>.&#10;     *&#10;     * @apiNote&#10;     * An implementation may choose to not execute the stream pipeline (either&#10;     * sequentially or in parallel) if it is capable of computing the count&#10;     * directly from the stream source.  In such cases no source elements will&#10;     * be traversed and no intermediate operations will be evaluated.&#10;     * Behavioral parameters with side-effects, which are strongly discouraged&#10;     * except for harmless cases such as debugging, may be affected.  For&#10;     * example, consider the following stream:&#10;     * <pre>{@code&#10;     *     LongStream s = LongStream.of(1, 2, 3, 4);&#10;     *     long count = s.peek(System.out::println).count();&#10;     * }</pre>&#10;     * The number of elements covered by the stream source is known and the&#10;     * intermediate operation, {@code peek}, does not inject into or remove&#10;     * elements from the stream (as may be the case for {@code flatMap} or&#10;     * {@code filter} operations).  Thus the count is 4 and there is no need to&#10;     * execute the pipeline and, as a side-effect, print out the elements.&#10;     *&#10;     * @return the count of elements in this stream&#10;     "
  ]
  node [
    id 2171
    label " boolean anyMatch(Predicate<? super T> predicate)"
    type "method"
    comment "&#10;     * Returns whether any elements of this stream match the provided&#10;     * predicate.  May not evaluate the predicate on all elements if not&#10;     * necessary for determining the result.  If the stream is empty then&#10;     * {@code false} is returned and the predicate is not evaluated.&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>short-circuiting&#10;     * terminal operation</a>.&#10;     *&#10;     * @apiNote&#10;     * This method evaluates the <em>existential quantification</em> of the&#10;     * predicate over the elements of the stream (for some x P(x)).&#10;     *&#10;     * @param predicate a <a href=&#34;package-summary.html#NonInterference&#34;>non-interfering</a>,&#10;     *                  <a href=&#34;package-summary.html#Statelessness&#34;>stateless</a>&#10;     *                  predicate to apply to elements of this stream&#10;     * @return {@code true} if any elements of the stream match the provided&#10;     * predicate, otherwise {@code false}&#10;     "
  ]
  node [
    id 2172
    label " boolean allMatch(Predicate<? super T> predicate)"
    type "method"
    comment "&#10;     * Returns whether all elements of this stream match the provided predicate.&#10;     * May not evaluate the predicate on all elements if not necessary for&#10;     * determining the result.  If the stream is empty then {@code true} is&#10;     * returned and the predicate is not evaluated.&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>short-circuiting&#10;     * terminal operation</a>.&#10;     *&#10;     * @apiNote&#10;     * This method evaluates the <em>universal quantification</em> of the&#10;     * predicate over the elements of the stream (for all x P(x)).  If the&#10;     * stream is empty, the quantification is said to be <em>vacuously&#10;     * satisfied</em> and is always {@code true} (regardless of P(x)).&#10;     *&#10;     * @param predicate a <a href=&#34;package-summary.html#NonInterference&#34;>non-interfering</a>,&#10;     *                  <a href=&#34;package-summary.html#Statelessness&#34;>stateless</a>&#10;     *                  predicate to apply to elements of this stream&#10;     * @return {@code true} if either all elements of the stream match the&#10;     * provided predicate or the stream is empty, otherwise {@code false}&#10;     "
  ]
  node [
    id 2173
    label " boolean noneMatch(Predicate<? super T> predicate)"
    type "method"
    comment "&#10;     * Returns whether no elements of this stream match the provided predicate.&#10;     * May not evaluate the predicate on all elements if not necessary for&#10;     * determining the result.  If the stream is empty then {@code true} is&#10;     * returned and the predicate is not evaluated.&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>short-circuiting&#10;     * terminal operation</a>.&#10;     *&#10;     * @apiNote&#10;     * This method evaluates the <em>universal quantification</em> of the&#10;     * negated predicate over the elements of the stream (for all x ~P(x)).  If&#10;     * the stream is empty, the quantification is said to be vacuously satisfied&#10;     * and is always {@code true}, regardless of P(x).&#10;     *&#10;     * @param predicate a <a href=&#34;package-summary.html#NonInterference&#34;>non-interfering</a>,&#10;     *                  <a href=&#34;package-summary.html#Statelessness&#34;>stateless</a>&#10;     *                  predicate to apply to elements of this stream&#10;     * @return {@code true} if either no elements of the stream match the&#10;     * provided predicate or the stream is empty, otherwise {@code false}&#10;     "
  ]
  node [
    id 2174
    label " Optional<T> findFirst()"
    type "method"
    comment "&#10;     * Returns an {@link Optional} describing the first element of this stream,&#10;     * or an empty {@code Optional} if the stream is empty.  If the stream has&#10;     * no encounter order, then any element may be returned.&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>short-circuiting&#10;     * terminal operation</a>.&#10;     *&#10;     * @return an {@code Optional} describing the first element of this stream,&#10;     * or an empty {@code Optional} if the stream is empty&#10;     * @throws NullPointerException if the element selected is null&#10;     "
  ]
  node [
    id 2175
    label " Optional<T> findAny()"
    type "method"
    comment "&#10;     * Returns an {@link Optional} describing some element of the stream, or an&#10;     * empty {@code Optional} if the stream is empty.&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>short-circuiting&#10;     * terminal operation</a>.&#10;     *&#10;     * <p>The behavior of this operation is explicitly nondeterministic; it is&#10;     * free to select any element in the stream.  This is to allow for maximal&#10;     * performance in parallel operations; the cost is that multiple invocations&#10;     * on the same source may not return the same result.  (If a stable result&#10;     * is desired, use {@link #findFirst()} instead.)&#10;     *&#10;     * @return an {@code Optional} describing some element of this stream, or an&#10;     * empty {@code Optional} if the stream is empty&#10;     * @throws NullPointerException if the element selected is null&#10;     * @see #findFirst()&#10;     "
  ]
  node [
    id 2176
    label "findFirst()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2177
    label "public static Builder<T> builder()"
    type "method"
    comment "&#10;     * Returns a builder for a {@code Stream}.&#10;     *&#10;     * @param <T> type of elements&#10;     * @return a stream builder&#10;     "
  ]
  node [
    id 2178
    label "public static Stream<T> empty()"
    type "method"
    comment "&#10;     * Returns an empty sequential {@code Stream}.&#10;     *&#10;     * @param <T> the type of stream elements&#10;     * @return an empty sequential stream&#10;     "
  ]
  node [
    id 2179
    label "public static Stream<T> of(T t)"
    type "method"
    comment "&#10;     * Returns a sequential {@code Stream} containing a single element.&#10;     *&#10;     * @param t the single element&#10;     * @param <T> the type of stream elements&#10;     * @return a singleton sequential stream&#10;     "
  ]
  node [
    id 2180
    label "public static Stream<T> ofNullable(T t)"
    type "method"
    comment "&#10;     * Returns a sequential {@code Stream} containing a single element, if&#10;     * non-null, otherwise returns an empty {@code Stream}.&#10;     *&#10;     * @param t the single element&#10;     * @param <T> the type of stream elements&#10;     * @return a stream with a single element if the specified element&#10;     *         is non-null, otherwise an empty stream&#10;     * @since 9&#10;     "
  ]
  node [
    id 2181
    label "public static Stream<T> of(T... values)"
    type "method"
    comment "&#10;     * Returns a sequential ordered stream whose elements are the specified values.&#10;     *&#10;     * @param <T> the type of stream elements&#10;     * @param values the elements of the new stream&#10;     * @return the new stream&#10;     "
  ]
  node [
    id 2182
    label "public static Stream<T> iterate(final T seed, final UnaryOperator<T> f)"
    type "method"
    comment "&#10;     * Returns an infinite sequential ordered {@code Stream} produced by iterative&#10;     * application of a function {@code f} to an initial element {@code seed},&#10;     * producing a {@code Stream} consisting of {@code seed}, {@code f(seed)},&#10;     * {@code f(f(seed))}, etc.&#10;     *&#10;     * <p>The first element (position {@code 0}) in the {@code Stream} will be&#10;     * the provided {@code seed}.  For {@code n > 0}, the element at position&#10;     * {@code n}, will be the result of applying the function {@code f} to the&#10;     * element at position {@code n - 1}.&#10;     *&#10;     * <p>The action of applying {@code f} for one element&#10;     * <a href=&#34;../concurrent/package-summary.html#MemoryVisibility&#34;><i>happens-before</i></a>&#10;     * the action of applying {@code f} for subsequent elements.  For any given&#10;     * element the action may be performed in whatever thread the library&#10;     * chooses.&#10;     *&#10;     * @param <T> the type of stream elements&#10;     * @param seed the initial element&#10;     * @param f a function to be applied to the previous element to produce&#10;     *          a new element&#10;     * @return a new sequential {@code Stream}&#10;     "
  ]
  node [
    id 2183
    label "public static Stream<T> iterate(T seed, Predicate<? super T> hasNext, UnaryOperator<T> next)"
    type "method"
    comment "&#10;     * Returns a sequential ordered {@code Stream} produced by iterative&#10;     * application of the given {@code next} function to an initial element,&#10;     * conditioned on satisfying the given {@code hasNext} predicate.  The&#10;     * stream terminates as soon as the {@code hasNext} predicate returns false.&#10;     *&#10;     * <p>{@code Stream.iterate} should produce the same sequence of elements as&#10;     * produced by the corresponding for-loop:&#10;     * <pre>{@code&#10;     *     for (T index=seed; hasNext.test(index); index = next.apply(index)) {&#10;     *         ...&#10;     *     }&#10;     * }</pre>&#10;     *&#10;     * <p>The resulting sequence may be empty if the {@code hasNext} predicate&#10;     * does not hold on the seed value.  Otherwise the first element will be the&#10;     * supplied {@code seed} value, the next element (if present) will be the&#10;     * result of applying the {@code next} function to the {@code seed} value,&#10;     * and so on iteratively until the {@code hasNext} predicate indicates that&#10;     * the stream should terminate.&#10;     *&#10;     * <p>The action of applying the {@code hasNext} predicate to an element&#10;     * <a href=&#34;../concurrent/package-summary.html#MemoryVisibility&#34;><i>happens-before</i></a>&#10;     * the action of applying the {@code next} function to that element.  The&#10;     * action of applying the {@code next} function for one element&#10;     * <i>happens-before</i> the action of applying the {@code hasNext}&#10;     * predicate for subsequent elements.  For any given element an action may&#10;     * be performed in whatever thread the library chooses.&#10;     *&#10;     * @param <T> the type of stream elements&#10;     * @param seed the initial element&#10;     * @param hasNext a predicate to apply to elements to determine when the&#10;     *                stream must terminate.&#10;     * @param next a function to be applied to the previous element to produce&#10;     *             a new element&#10;     * @return a new sequential {@code Stream}&#10;     * @since 9&#10;     "
  ]
  node [
    id 2184
    label "public static Stream<T> generate(Supplier<? extends T> s)"
    type "method"
    comment "&#10;     * Returns an infinite sequential unordered stream where each element is&#10;     * generated by the provided {@code Supplier}.  This is suitable for&#10;     * generating constant streams, streams of random elements, etc.&#10;     *&#10;     * @param <T> the type of stream elements&#10;     * @param s the {@code Supplier} of generated elements&#10;     * @return a new infinite sequential unordered {@code Stream}&#10;     "
  ]
  node [
    id 2185
    label "public static Stream<T> concat(Stream<? extends T> a, Stream<? extends T> b)"
    type "method"
    comment "&#10;     * Creates a lazily concatenated stream whose elements are all the&#10;     * elements of the first stream followed by all the elements of the&#10;     * second stream.  The resulting stream is ordered if both&#10;     * of the input streams are ordered, and parallel if either of the input&#10;     * streams is parallel.  When the resulting stream is closed, the close&#10;     * handlers for both input streams are invoked.&#10;     *&#10;     * <p>This method operates on the two input streams and binds each stream&#10;     * to its source.  As a result subsequent modifications to an input stream&#10;     * source may not be reflected in the concatenated stream result.&#10;     *&#10;     * @implNote&#10;     * Use caution when constructing streams from repeated concatenation.&#10;     * Accessing an element of a deeply concatenated stream can result in deep&#10;     * call chains, or even {@code StackOverflowError}.&#10;     *&#10;     * <p>Subsequent changes to the sequential/parallel execution mode of the&#10;     * returned stream are not guaranteed to be propagated to the input streams.&#10;     *&#10;     * @apiNote&#10;     * To preserve optimization opportunities this method binds each stream to&#10;     * its source and accepts only two streams as parameters.  For example, the&#10;     * exact size of the concatenated stream source can be computed if the exact&#10;     * size of each input stream source is known.&#10;     * To concatenate more streams without binding, or without nested calls to&#10;     * this method, try creating a stream of streams and flat-mapping with the&#10;     * identity function, for example:&#10;     * <pre>{@code&#10;     *     Stream<T> concat = Stream.of(s1, s2, s3, s4).flatMap(s -> s);&#10;     * }</pre>&#10;     *&#10;     * @param <T> The type of stream elements&#10;     * @param a the first stream&#10;     * @param b the second stream&#10;     * @return the concatenation of the two input streams&#10;     "
  ]
  node [
    id 2186
    label "public static Stream<String> lines(Path path, Charset cs) throws IOException"
    type "method"
    comment "&#10;     * Read all lines from a file as a {@code Stream}. Unlike {@link&#10;     * #readAllLines(Path, Charset) readAllLines}, this method does not read&#10;     * all lines into a {@code List}, but instead populates lazily as the stream&#10;     * is consumed.&#10;     *&#10;     * <p> Bytes from the file are decoded into characters using the specified&#10;     * charset and the same line terminators as specified by {@code&#10;     * readAllLines} are supported.&#10;     *&#10;     * <p> After this method returns, then any subsequent I/O exception that&#10;     * occurs while reading from the file or when a malformed or unmappable byte&#10;     * sequence is read, is wrapped in an {@link UncheckedIOException} that will&#10;     * be thrown from the&#10;     * {@link java.util.stream.Stream} method that caused the read to take&#10;     * place. In case an {@code IOException} is thrown when closing the file,&#10;     * it is also wrapped as an {@code UncheckedIOException}.&#10;     *&#10;     * <p> The returned stream encapsulates a {@link Reader}.  If timely&#10;     * disposal of file system resources is required, the try-with-resources&#10;     * construct should be used to ensure that the stream's&#10;     * {@link Stream#close close} method is invoked after the stream operations&#10;     * are completed.&#10;     *&#10;     *&#10;     * @param   path&#10;     *          the path to the file&#10;     * @param   cs&#10;     *          the charset to use for decoding&#10;     *&#10;     * @return  the lines from the file as a {@code Stream}&#10;     *&#10;     * @throws  IOException&#10;     *          if an I/O error occurs opening the file&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager is&#10;     *          installed, the {@link SecurityManager#checkRead(String) checkRead}&#10;     *          method is invoked to check read access to the file.&#10;     *&#10;     * @see     #readAllLines(Path, Charset)&#10;     * @see     #newBufferedReader(Path, Charset)&#10;     * @see     java.io.BufferedReader#lines()&#10;     * @since   1.8&#10;     "
  ]
  node [
    id 2187
    label "readAllLines(Path"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2188
    label "java.io.BufferedReader"
    type "class"
    comment ""
  ]
  node [
    id 2189
    label "private void fill() throws IOException"
    type "method"
    comment "&#10;     * Fills the input buffer, taking the mark into account if it is valid.&#10;     "
  ]
  node [
    id 2190
    label "private int read1(char[] cbuf, int off, int len) throws IOException"
    type "method"
    comment "&#10;     * Reads characters into a portion of an array, reading from the underlying&#10;     * stream if necessary.&#10;     "
  ]
  node [
    id 2191
    label "public int read(char[] cbuf, int off, int len) throws IOException"
    type "method"
    comment "&#10;     * Reads characters into a portion of an array.&#10;     *&#10;     * <p> This method implements the general contract of the corresponding&#10;     * <code>{@link Reader#read(char[], int, int) read}</code> method of the&#10;     * <code>{@link Reader}</code> class.  As an additional convenience, it&#10;     * attempts to read as many characters as possible by repeatedly invoking&#10;     * the <code>read</code> method of the underlying stream.  This iterated&#10;     * <code>read</code> continues until one of the following conditions becomes&#10;     * true: <ul>&#10;     *&#10;     *   <li> The specified number of characters have been read,&#10;     *&#10;     *   <li> The <code>read</code> method of the underlying stream returns&#10;     *   <code>-1</code>, indicating end-of-file, or&#10;     *&#10;     *   <li> The <code>ready</code> method of the underlying stream&#10;     *   returns <code>false</code>, indicating that further input requests&#10;     *   would block.&#10;     *&#10;     * </ul> If the first <code>read</code> on the underlying stream returns&#10;     * <code>-1</code> to indicate end-of-file then this method returns&#10;     * <code>-1</code>.  Otherwise this method returns the number of characters&#10;     * actually read.&#10;     *&#10;     * <p> Subclasses of this class are encouraged, but not required, to&#10;     * attempt to read as many characters as possible in the same fashion.&#10;     *&#10;     * <p> Ordinarily this method takes characters from this stream's character&#10;     * buffer, filling it from the underlying stream as necessary.  If,&#10;     * however, the buffer is empty, the mark is not valid, and the requested&#10;     * length is at least as large as the buffer, then this method will read&#10;     * characters directly from the underlying stream into the given array.&#10;     * Thus redundant <code>BufferedReader</code>s will not copy data&#10;     * unnecessarily.&#10;     *&#10;     * @param      cbuf  Destination buffer&#10;     * @param      off   Offset at which to start storing characters&#10;     * @param      len   Maximum number of characters to read&#10;     *&#10;     * @return     The number of characters read, or -1 if the end of the&#10;     *             stream has been reached&#10;     *&#10;     * @exception  IOException  If an I/O error occurs&#10;     * @exception  IndexOutOfBoundsException {@inheritDoc}&#10;     "
  ]
  node [
    id 2192
    label " String readLine(boolean ignoreLF) throws IOException"
    type "method"
    comment "&#10;     * Reads a line of text.  A line is considered to be terminated by any one&#10;     * of a line feed ('\n'), a carriage return ('\r'), a carriage return&#10;     * followed immediately by a line feed, or by reaching the end-of-file&#10;     * (EOF).&#10;     *&#10;     * @param      ignoreLF  If true, the next '\n' will be skipped&#10;     *&#10;     * @return     A String containing the contents of the line, not including&#10;     *             any line-termination characters, or null if the end of the&#10;     *             stream has been reached without reading any characters&#10;     *&#10;     * @see        java.io.LineNumberReader#readLine()&#10;     *&#10;     * @exception  IOException  If an I/O error occurs&#10;     "
  ]
  node [
    id 2193
    label "public String readLine() throws IOException"
    type "method"
    comment "&#10;     * Reads a line of text.  A line is considered to be terminated by any one&#10;     * of a line feed ('\n'), a carriage return ('\r'), a carriage return&#10;     * followed immediately by a line feed, or by reaching the end-of-file&#10;     * (EOF).&#10;     *&#10;     * @return     A String containing the contents of the line, not including&#10;     *             any line-termination characters, or null if the end of the&#10;     *             stream has been reached without reading any characters&#10;     *&#10;     * @exception  IOException  If an I/O error occurs&#10;     *&#10;     * @see java.nio.file.Files#readAllLines&#10;     "
  ]
  node [
    id 2194
    label "public static Stream<String> lines(Path path) throws IOException"
    type "method"
    comment "&#10;     * Read all lines from a file as a {@code Stream}. Bytes from the file are&#10;     * decoded into characters using the {@link StandardCharsets#UTF_8 UTF-8}&#10;     * {@link Charset charset}.&#10;     *&#10;     * <p> This method works as if invoking it were equivalent to evaluating the&#10;     * expression:&#10;     * <pre>{@code&#10;     * Files.lines(path, StandardCharsets.UTF_8)&#10;     * }</pre>&#10;     *&#10;     * @param   path&#10;     *          the path to the file&#10;     *&#10;     * @return  the lines from the file as a {@code Stream}&#10;     *&#10;     * @throws  IOException&#10;     *          if an I/O error occurs opening the file&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager is&#10;     *          installed, the {@link SecurityManager#checkRead(String) checkRead}&#10;     *          method is invoked to check read access to the file.&#10;     *&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 2195
    label "getSeparator"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2196
    label "Charactercharacters"
  ]
  node [
    id 2197
    label "public abstract UserPrincipalLookupService getUserPrincipalLookupService()"
    type "method"
    comment "&#10;     * Returns the {@code UserPrincipalLookupService} for this file system&#10;     * <i>(optional operation)</i>. The resulting lookup service may be used to&#10;     * lookup user or group names.&#10;     *&#10;     * <p> <b>Usage Example:</b>&#10;     * Suppose we want to make &#34;joe&#34; the owner of a file:&#10;     * <pre>&#10;     *     UserPrincipalLookupService lookupService = FileSystems.getDefault().getUserPrincipalLookupService();&#10;     *     Files.setOwner(path, lookupService.lookupPrincipalByName(&#34;joe&#34;));&#10;     * </pre>&#10;     *&#10;     * @throws  UnsupportedOperationException&#10;     *          If this {@code FileSystem} does not does have a lookup service&#10;     *&#10;     * @return  The {@code UserPrincipalLookupService} for this file system&#10;     "
  ]
  node [
    id 2198
    label "public abstract WatchService newWatchService() throws IOException"
    type "method"
    comment "&#10;     * Constructs a new {@link WatchService} <i>(optional operation)</i>.&#10;     *&#10;     * <p> This method constructs a new watch service that may be used to watch&#10;     * registered objects for changes and events.&#10;     *&#10;     * @return  a new watch service&#10;     *&#10;     * @throws  UnsupportedOperationException&#10;     *          If this {@code FileSystem} does not support watching file system&#10;     *          objects for changes and events. This exception is not thrown&#10;     *          by {@code FileSystems} created by the default provider.&#10;     * @throws  IOException&#10;     *          If an I/O error occurs&#10;     "
  ]
  node [
    id 2199
    label "FileSystemAlreadyExistsException"
  ]
  node [
    id 2200
    label "public abstract FileSystem getFileSystem(URI uri)"
    type "method"
    comment "&#10;     * Returns an existing {@code FileSystem} created by this provider.&#10;     *&#10;     * <p> This method returns a reference to a {@code FileSystem} that was&#10;     * created by invoking the {@link #newFileSystem(URI,Map) newFileSystem(URI,Map)}&#10;     * method. File systems created the {@link #newFileSystem(Path,Map)&#10;     * newFileSystem(Path,Map)} method are not returned by this method.&#10;     * The file system is identified by its {@code URI}. Its exact form&#10;     * is highly provider dependent. In the case of the default provider the URI's&#10;     * path component is {@code &#34;/&#34;} and the authority, query and fragment components&#10;     * are undefined (Undefined components are represented by {@code null}).&#10;     *&#10;     * <p> Once a file system created by this provider is {@link&#10;     * java.nio.file.FileSystem#close closed} it is provider-dependent if this&#10;     * method returns a reference to the closed file system or throws {@link&#10;     * FileSystemNotFoundException}. If the provider allows a new file system to&#10;     * be created with the same URI as a file system it previously created then&#10;     * this method throws the exception if invoked after the file system is&#10;     * closed (and before a new instance is created by the {@link #newFileSystem&#10;     * newFileSystem} method).&#10;     *&#10;     * <p> If a security manager is installed then a provider implementation&#10;     * may require to check a permission before returning a reference to an&#10;     * existing file system. In the case of the {@link FileSystems#getDefault&#10;     * default} file system, no permission check is required.&#10;     *&#10;     * @param   uri&#10;     *          URI reference&#10;     *&#10;     * @return  The file system&#10;     *&#10;     * @throws  IllegalArgumentException&#10;     *          If the pre-conditions for the {@code uri} parameter aren't met&#10;     * @throws  FileSystemNotFoundException&#10;     *          If the file system does not exist&#10;     * @throws  SecurityException&#10;     *          If a security manager is installed and it denies an unspecified&#10;     *          permission.&#10;     "
  ]
  node [
    id 2201
    label "newFileSystemnewFileSystem"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2202
    label "FileSystemNotFoundException"
  ]
  node [
    id 2203
    label "newFileSystem(Path"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2204
    label "getDefaultdefault"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2205
    label "public abstract Path getPath(URI uri)"
    type "method"
    comment "&#10;     * Return a {@code Path} object by converting the given {@link URI}. The&#10;     * resulting {@code Path} is associated with a {@link FileSystem} that&#10;     * already exists or is constructed automatically.&#10;     *&#10;     * <p> The exact form of the URI is file system provider dependent. In the&#10;     * case of the default provider, the URI scheme is {@code &#34;file&#34;} and the&#10;     * given URI has a non-empty path component, and undefined query, and&#10;     * fragment components. The resulting {@code Path} is associated with the&#10;     * default {@link FileSystems#getDefault default} {@code FileSystem}.&#10;     *&#10;     * <p> If a security manager is installed then a provider implementation&#10;     * may require to check a permission. In the case of the {@link&#10;     * FileSystems#getDefault default} file system, no permission check is&#10;     * required.&#10;     *&#10;     * @param   uri&#10;     *          The URI to convert&#10;     *&#10;     * @return  The resulting {@code Path}&#10;     *&#10;     * @throws  IllegalArgumentException&#10;     *          If the URI scheme does not identify this provider or other&#10;     *          preconditions on the uri parameter do not hold&#10;     * @throws  FileSystemNotFoundException&#10;     *          The file system, identified by the URI, does not exist and&#10;     *          cannot be created automatically&#10;     * @throws  SecurityException&#10;     *          If a security manager is installed and it denies an unspecified&#10;     *          permission.&#10;     "
  ]
  node [
    id 2206
    label "FileSystem"
  ]
  node [
    id 2207
    label "java.net.URI"
    type "class"
    comment ""
  ]
  node [
    id 2208
    label "public static URI create(String str)"
    type "method"
    comment "&#10;     * Creates a URI by parsing the given string.&#10;     *&#10;     * <p> This convenience factory method works as if by invoking the {@link&#10;     * #URI(String)} constructor; any {@link URISyntaxException} thrown by the&#10;     * constructor is caught and wrapped in a new {@link&#10;     * IllegalArgumentException} object, which is then thrown.&#10;     *&#10;     * <p> This method is provided for use in situations where it is known that&#10;     * the given string is a legal URI, for example for URI constants declared&#10;     * within in a program, and so it would be considered a programming error&#10;     * for the string not to parse as such.  The constructors, which throw&#10;     * {@link URISyntaxException} directly, should be used situations where a&#10;     * URI is being constructed from user input or from some other source that&#10;     * may be prone to errors.  </p>&#10;     *&#10;     * @param  str   The string to be parsed into a URI&#10;     * @return The new URI&#10;     *&#10;     * @throws  NullPointerException&#10;     *          If {@code str} is {@code null}&#10;     *&#10;     * @throws  IllegalArgumentException&#10;     *          If the given string violates RFC&#38;nbsp;2396&#10;     "
  ]
  node [
    id 2209
    label "java.net.URISyntaxException"
    type "class"
    comment ""
  ]
  node [
    id 2210
    label "URI(String)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2211
    label "IllegalArgumentException"
  ]
  node [
    id 2212
    label "public URI parseServerAuthority() throws URISyntaxException"
    type "method"
    comment "&#10;     * Attempts to parse this URI's authority component, if defined, into&#10;     * user-information, host, and port components.&#10;     *&#10;     * <p> If this URI's authority component has already been recognized as&#10;     * being server-based then it will already have been parsed into&#10;     * user-information, host, and port components.  In this case, or if this&#10;     * URI has no authority component, this method simply returns this URI.&#10;     *&#10;     * <p> Otherwise this method attempts once more to parse the authority&#10;     * component into user-information, host, and port components, and throws&#10;     * an exception describing why the authority component could not be parsed&#10;     * in that way.&#10;     *&#10;     * <p> This method is provided because the generic URI syntax specified in&#10;     * <a href=&#34;http://www.ietf.org/rfc/rfc2396.txt&#34;>RFC&#38;nbsp;2396</a>&#10;     * cannot always distinguish a malformed server-based authority from a&#10;     * legitimate registry-based authority.  It must therefore treat some&#10;     * instances of the former as instances of the latter.  The authority&#10;     * component in the URI string {@code &#34;//foo:bar&#34;}, for example, is not a&#10;     * legal server-based authority but it is legal as a registry-based&#10;     * authority.&#10;     *&#10;     * <p> In many common situations, for example when working URIs that are&#10;     * known to be either URNs or URLs, the hierarchical URIs being used will&#10;     * always be server-based.  They therefore must either be parsed as such or&#10;     * treated as an error.  In these cases a statement such as&#10;     *&#10;     * <blockquote>&#10;     * {@code URI }<i>u</i>{@code  = new URI(str).parseServerAuthority();}&#10;     * </blockquote>&#10;     *&#10;     * <p> can be used to ensure that <i>u</i> always refers to a URI that, if&#10;     * it has an authority component, has a server-based authority with proper&#10;     * user-information, host, and port components.  Invoking this method also&#10;     * ensures that if the authority could not be parsed in that way then an&#10;     * appropriate diagnostic message can be issued based upon the exception&#10;     * that is thrown. </p>&#10;     *&#10;     * @return  A URI whose authority field has been parsed&#10;     *          as a server-based authority&#10;     *&#10;     * @throws  URISyntaxException&#10;     *          If the authority component of this URI is defined&#10;     *          but cannot be parsed as a server-based authority&#10;     *          according to RFC&#38;nbsp;2396&#10;     "
  ]
  node [
    id 2213
    label "public URI normalize()"
    type "method"
    comment "&#10;     * Normalizes this URI's path.&#10;     *&#10;     * <p> If this URI is opaque, or if its path is already in normal form,&#10;     * then this URI is returned.  Otherwise a new URI is constructed that is&#10;     * identical to this URI except that its path is computed by normalizing&#10;     * this URI's path in a manner consistent with <a&#10;     * href=&#34;http://www.ietf.org/rfc/rfc2396.txt&#34;>RFC&#38;nbsp;2396</a>,&#10;     * section&#38;nbsp;5.2, step&#38;nbsp;6, sub-steps&#38;nbsp;c through&#38;nbsp;f; that is:&#10;     * </p>&#10;     *&#10;     * <ol>&#10;     *&#10;     *   <li><p> All {@code &#34;.&#34;} segments are removed. </p></li>&#10;     *&#10;     *   <li><p> If a {@code &#34;..&#34;} segment is preceded by a non-{@code &#34;..&#34;}&#10;     *   segment then both of these segments are removed.  This step is&#10;     *   repeated until it is no longer applicable. </p></li>&#10;     *&#10;     *   <li><p> If the path is relative, and if its first segment contains a&#10;     *   colon character ({@code ':'}), then a {@code &#34;.&#34;} segment is&#10;     *   prepended.  This prevents a relative URI with a path such as&#10;     *   {@code &#34;a:b/c/d&#34;} from later being re-parsed as an opaque URI with a&#10;     *   scheme of {@code &#34;a&#34;} and a scheme-specific part of {@code &#34;b/c/d&#34;}.&#10;     *   <b><i>(Deviation from RFC&#38;nbsp;2396)</i></b> </p></li>&#10;     *&#10;     * </ol>&#10;     *&#10;     * <p> A normalized path will begin with one or more {@code &#34;..&#34;} segments&#10;     * if there were insufficient non-{@code &#34;..&#34;} segments preceding them to&#10;     * allow their removal.  A normalized path will begin with a {@code &#34;.&#34;}&#10;     * segment if one was inserted by step 3 above.  Otherwise, a normalized&#10;     * path will not contain any {@code &#34;.&#34;} or {@code &#34;..&#34;} segments. </p>&#10;     *&#10;     * @return  A URI equivalent to this URI,&#10;     *          but whose path is in normal form&#10;     "
  ]
  node [
    id 2214
    label "public URI resolve(URI uri)"
    type "method"
    comment "&#10;     * Resolves the given URI against this URI.&#10;     *&#10;     * <p> If the given URI is already absolute, or if this URI is opaque, then&#10;     * the given URI is returned.&#10;     *&#10;     * <p><a name=&#34;resolve-frag&#34;></a> If the given URI's fragment component is&#10;     * defined, its path component is empty, and its scheme, authority, and&#10;     * query components are undefined, then a URI with the given fragment but&#10;     * with all other components equal to those of this URI is returned.  This&#10;     * allows a URI representing a standalone fragment reference, such as&#10;     * {@code &#34;#foo&#34;}, to be usefully resolved against a base URI.&#10;     *&#10;     * <p> Otherwise this method constructs a new hierarchical URI in a manner&#10;     * consistent with <a&#10;     * href=&#34;http://www.ietf.org/rfc/rfc2396.txt&#34;>RFC&#38;nbsp;2396</a>,&#10;     * section&#38;nbsp;5.2; that is: </p>&#10;     *&#10;     * <ol>&#10;     *&#10;     *   <li><p> A new URI is constructed with this URI's scheme and the given&#10;     *   URI's query and fragment components. </p></li>&#10;     *&#10;     *   <li><p> If the given URI has an authority component then the new URI's&#10;     *   authority and path are taken from the given URI. </p></li>&#10;     *&#10;     *   <li><p> Otherwise the new URI's authority component is copied from&#10;     *   this URI, and its path is computed as follows: </p>&#10;     *&#10;     *   <ol>&#10;     *&#10;     *     <li><p> If the given URI's path is absolute then the new URI's path&#10;     *     is taken from the given URI. </p></li>&#10;     *&#10;     *     <li><p> Otherwise the given URI's path is relative, and so the new&#10;     *     URI's path is computed by resolving the path of the given URI&#10;     *     against the path of this URI.  This is done by concatenating all but&#10;     *     the last segment of this URI's path, if any, with the given URI's&#10;     *     path and then normalizing the result as if by invoking the {@link&#10;     *     #normalize() normalize} method. </p></li>&#10;     *&#10;     *   </ol></li>&#10;     *&#10;     * </ol>&#10;     *&#10;     * <p> The result of this method is absolute if, and only if, either this&#10;     * URI is absolute or the given URI is absolute.  </p>&#10;     *&#10;     * @param  uri  The URI to be resolved against this URI&#10;     * @return The resulting URI&#10;     *&#10;     * @throws  NullPointerException&#10;     *          If {@code uri} is {@code null}&#10;     "
  ]
  node [
    id 2215
    label "normalize()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2216
    label "public URI resolve(String str)"
    type "method"
    comment "&#10;     * Constructs a new URI by parsing the given string and then resolving it&#10;     * against this URI.&#10;     *&#10;     * <p> This convenience method works as if invoking it were equivalent to&#10;     * evaluating the expression {@link #resolve(java.net.URI)&#10;     * resolve}{@code (URI.}{@link #create(String) create}{@code (str))}. </p>&#10;     *&#10;     * @param  str   The string to be parsed into a URI&#10;     * @return The resulting URI&#10;     *&#10;     * @throws  NullPointerException&#10;     *          If {@code str} is {@code null}&#10;     *&#10;     * @throws  IllegalArgumentException&#10;     *          If the given string violates RFC&#38;nbsp;2396&#10;     "
  ]
  node [
    id 2217
    label "resolve(java.net.URI)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2218
    label "create(String)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2219
    label "public URI relativize(URI uri)"
    type "method"
    comment "&#10;     * Relativizes the given URI against this URI.&#10;     *&#10;     * <p> The relativization of the given URI against this URI is computed as&#10;     * follows: </p>&#10;     *&#10;     * <ol>&#10;     *&#10;     *   <li><p> If either this URI or the given URI are opaque, or if the&#10;     *   scheme and authority components of the two URIs are not identical, or&#10;     *   if the path of this URI is not a prefix of the path of the given URI,&#10;     *   then the given URI is returned. </p></li>&#10;     *&#10;     *   <li><p> Otherwise a new relative hierarchical URI is constructed with&#10;     *   query and fragment components taken from the given URI and with a path&#10;     *   component computed by removing this URI's path from the beginning of&#10;     *   the given URI's path. </p></li>&#10;     *&#10;     * </ol>&#10;     *&#10;     * @param  uri  The URI to be relativized against this URI&#10;     * @return The resulting URI&#10;     *&#10;     * @throws  NullPointerException&#10;     *          If {@code uri} is {@code null}&#10;     "
  ]
  node [
    id 2220
    label "public URL toURL() throws MalformedURLException"
    type "method"
    comment "&#10;     * Constructs a URL from this URI.&#10;     *&#10;     * <p> This convenience method works as if invoking it were equivalent to&#10;     * evaluating the expression {@code new URL(this.toString())} after&#10;     * first checking that this URI is absolute. </p>&#10;     *&#10;     * @return  A URL constructed from this URI&#10;     *&#10;     * @throws  IllegalArgumentException&#10;     *          If this URL is not absolute&#10;     *&#10;     * @throws  MalformedURLException&#10;     *          If a protocol handler for the URL could not be found,&#10;     *          or if some other error occurred while constructing the URL&#10;     "
  ]
  node [
    id 2221
    label "public String getScheme()"
    type "method"
    comment "&#10;     * Returns the scheme component of this URI.&#10;     *&#10;     * <p> The scheme component of a URI, if defined, only contains characters&#10;     * in the <i>alphanum</i> category and in the string {@code &#34;-.+&#34;}.  A&#10;     * scheme always starts with an <i>alpha</i> character. <p>&#10;     *&#10;     * The scheme component of a URI cannot contain escaped octets, hence this&#10;     * method does not perform any decoding.&#10;     *&#10;     * @return  The scheme component of this URI,&#10;     *          or {@code null} if the scheme is undefined&#10;     "
  ]
  node [
    id 2222
    label "public boolean isOpaque()"
    type "method"
    comment "&#10;     * Tells whether or not this URI is opaque.&#10;     *&#10;     * <p> A URI is opaque if, and only if, it is absolute and its&#10;     * scheme-specific part does not begin with a slash character ('/').&#10;     * An opaque URI has a scheme, a scheme-specific part, and possibly&#10;     * a fragment; all other components are undefined. </p>&#10;     *&#10;     * @return  {@code true} if, and only if, this URI is opaque&#10;     "
  ]
  node [
    id 2223
    label "public String getRawSchemeSpecificPart()"
    type "method"
    comment "&#10;     * Returns the raw scheme-specific part of this URI.  The scheme-specific&#10;     * part is never undefined, though it may be empty.&#10;     *&#10;     * <p> The scheme-specific part of a URI only contains legal URI&#10;     * characters. </p>&#10;     *&#10;     * @return  The raw scheme-specific part of this URI&#10;     *          (never {@code null})&#10;     "
  ]
  node [
    id 2224
    label "public String getSchemeSpecificPart()"
    type "method"
    comment "&#10;     * Returns the decoded scheme-specific part of this URI.&#10;     *&#10;     * <p> The string returned by this method is equal to that returned by the&#10;     * {@link #getRawSchemeSpecificPart() getRawSchemeSpecificPart} method&#10;     * except that all sequences of escaped octets are <a&#10;     * href=&#34;#decode&#34;>decoded</a>.  </p>&#10;     *&#10;     * @return  The decoded scheme-specific part of this URI&#10;     *          (never {@code null})&#10;     "
  ]
  node [
    id 2225
    label "getRawSchemeSpecificPart()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2226
    label "public String getRawAuthority()"
    type "method"
    comment "&#10;     * Returns the raw authority component of this URI.&#10;     *&#10;     * <p> The authority component of a URI, if defined, only contains the&#10;     * commercial-at character ({@code '@'}) and characters in the&#10;     * <i>unreserved</i>, <i>punct</i>, <i>escaped</i>, and <i>other</i>&#10;     * categories.  If the authority is server-based then it is further&#10;     * constrained to have valid user-information, host, and port&#10;     * components. </p>&#10;     *&#10;     * @return  The raw authority component of this URI,&#10;     *          or {@code null} if the authority is undefined&#10;     "
  ]
  node [
    id 2227
    label "public String getAuthority()"
    type "method"
    comment "&#10;     * Returns the decoded authority component of this URI.&#10;     *&#10;     * <p> The string returned by this method is equal to that returned by the&#10;     * {@link #getRawAuthority() getRawAuthority} method except that all&#10;     * sequences of escaped octets are <a href=&#34;#decode&#34;>decoded</a>.  </p>&#10;     *&#10;     * @return  The decoded authority component of this URI,&#10;     *          or {@code null} if the authority is undefined&#10;     "
  ]
  node [
    id 2228
    label "getRawAuthority()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2229
    label "public String getRawUserInfo()"
    type "method"
    comment "&#10;     * Returns the raw user-information component of this URI.&#10;     *&#10;     * <p> The user-information component of a URI, if defined, only contains&#10;     * characters in the <i>unreserved</i>, <i>punct</i>, <i>escaped</i>, and&#10;     * <i>other</i> categories. </p>&#10;     *&#10;     * @return  The raw user-information component of this URI,&#10;     *          or {@code null} if the user information is undefined&#10;     "
  ]
  node [
    id 2230
    label "public String getUserInfo()"
    type "method"
    comment "&#10;     * Returns the decoded user-information component of this URI.&#10;     *&#10;     * <p> The string returned by this method is equal to that returned by the&#10;     * {@link #getRawUserInfo() getRawUserInfo} method except that all&#10;     * sequences of escaped octets are <a href=&#34;#decode&#34;>decoded</a>.  </p>&#10;     *&#10;     * @return  The decoded user-information component of this URI,&#10;     *          or {@code null} if the user information is undefined&#10;     "
  ]
  node [
    id 2231
    label "getRawUserInfo()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2232
    label "public String getHost()"
    type "method"
    comment "&#10;     * Returns the host component of this URI.&#10;     *&#10;     * <p> The host component of a URI, if defined, will have one of the&#10;     * following forms: </p>&#10;     *&#10;     * <ul>&#10;     *&#10;     *   <li><p> A domain name consisting of one or more <i>labels</i>&#10;     *   separated by period characters ({@code '.'}), optionally followed by&#10;     *   a period character.  Each label consists of <i>alphanum</i> characters&#10;     *   as well as hyphen characters ({@code '-'}), though hyphens never&#10;     *   occur as the first or last characters in a label. The rightmost&#10;     *   label of a domain name consisting of two or more labels, begins&#10;     *   with an <i>alpha</i> character. </li>&#10;     *&#10;     *   <li><p> A dotted-quad IPv4 address of the form&#10;     *   <i>digit</i>{@code +.}<i>digit</i>{@code +.}<i>digit</i>{@code +.}<i>digit</i>{@code +},&#10;     *   where no <i>digit</i> sequence is longer than three characters and no&#10;     *   sequence has a value larger than 255. </p></li>&#10;     *&#10;     *   <li><p> An IPv6 address enclosed in square brackets ({@code '['} and&#10;     *   {@code ']'}) and consisting of hexadecimal digits, colon characters&#10;     *   ({@code ':'}), and possibly an embedded IPv4 address.  The full&#10;     *   syntax of IPv6 addresses is specified in <a&#10;     *   href=&#34;http://www.ietf.org/rfc/rfc2373.txt&#34;><i>RFC&#38;nbsp;2373: IPv6&#10;     *   Addressing Architecture</i></a>.  </p></li>&#10;     *&#10;     * </ul>&#10;     *&#10;     * The host component of a URI cannot contain escaped octets, hence this&#10;     * method does not perform any decoding.&#10;     *&#10;     * @return  The host component of this URI,&#10;     *          or {@code null} if the host is undefined&#10;     "
  ]
  node [
    id 2233
    label "public String getRawPath()"
    type "method"
    comment "&#10;     * Returns the raw path component of this URI.&#10;     *&#10;     * <p> The path component of a URI, if defined, only contains the slash&#10;     * character ({@code '/'}), the commercial-at character ({@code '@'}),&#10;     * and characters in the <i>unreserved</i>, <i>punct</i>, <i>escaped</i>,&#10;     * and <i>other</i> categories. </p>&#10;     *&#10;     * @return  The path component of this URI,&#10;     *          or {@code null} if the path is undefined&#10;     "
  ]
  node [
    id 2234
    label "getRawPath()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2235
    label "public String getRawQuery()"
    type "method"
    comment "&#10;     * Returns the raw query component of this URI.&#10;     *&#10;     * <p> The query component of a URI, if defined, only contains legal URI&#10;     * characters. </p>&#10;     *&#10;     * @return  The raw query component of this URI,&#10;     *          or {@code null} if the query is undefined&#10;     "
  ]
  node [
    id 2236
    label "public String getQuery()"
    type "method"
    comment "&#10;     * Returns the decoded query component of this URI.&#10;     *&#10;     * <p> The string returned by this method is equal to that returned by the&#10;     * {@link #getRawQuery() getRawQuery} method except that all sequences of&#10;     * escaped octets are <a href=&#34;#decode&#34;>decoded</a>.  </p>&#10;     *&#10;     * @return  The decoded query component of this URI,&#10;     *          or {@code null} if the query is undefined&#10;     "
  ]
  node [
    id 2237
    label "getRawQuery()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2238
    label "public String getRawFragment()"
    type "method"
    comment "&#10;     * Returns the raw fragment component of this URI.&#10;     *&#10;     * <p> The fragment component of a URI, if defined, only contains legal URI&#10;     * characters. </p>&#10;     *&#10;     * @return  The raw fragment component of this URI,&#10;     *          or {@code null} if the fragment is undefined&#10;     "
  ]
  node [
    id 2239
    label "public String getFragment()"
    type "method"
    comment "&#10;     * Returns the decoded fragment component of this URI.&#10;     *&#10;     * <p> The string returned by this method is equal to that returned by the&#10;     * {@link #getRawFragment() getRawFragment} method except that all&#10;     * sequences of escaped octets are <a href=&#34;#decode&#34;>decoded</a>.  </p>&#10;     *&#10;     * @return  The decoded fragment component of this URI,&#10;     *          or {@code null} if the fragment is undefined&#10;     "
  ]
  node [
    id 2240
    label "getRawFragment()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2241
    label "public int compareTo(URI that)"
    type "method"
    comment "&#10;     * Compares this URI to another object, which must be a URI.&#10;     *&#10;     * <p> When comparing corresponding components of two URIs, if one&#10;     * component is undefined but the other is defined then the first is&#10;     * considered to be less than the second.  Unless otherwise noted, string&#10;     * components are ordered according to their natural, case-sensitive&#10;     * ordering as defined by the {@link java.lang.String#compareTo(Object)&#10;     * String.compareTo} method.  String components that are subject to&#10;     * encoding are compared by comparing their raw forms rather than their&#10;     * encoded forms.&#10;     *&#10;     * <p> The ordering of URIs is defined as follows: </p>&#10;     *&#10;     * <ul>&#10;     *&#10;     *   <li><p> Two URIs with different schemes are ordered according the&#10;     *   ordering of their schemes, without regard to case. </p></li>&#10;     *&#10;     *   <li><p> A hierarchical URI is considered to be less than an opaque URI&#10;     *   with an identical scheme. </p></li>&#10;     *&#10;     *   <li><p> Two opaque URIs with identical schemes are ordered according&#10;     *   to the ordering of their scheme-specific parts. </p></li>&#10;     *&#10;     *   <li><p> Two opaque URIs with identical schemes and scheme-specific&#10;     *   parts are ordered according to the ordering of their&#10;     *   fragments. </p></li>&#10;     *&#10;     *   <li><p> Two hierarchical URIs with identical schemes are ordered&#10;     *   according to the ordering of their authority components: </p>&#10;     *&#10;     *   <ul>&#10;     *&#10;     *     <li><p> If both authority components are server-based then the URIs&#10;     *     are ordered according to their user-information components; if these&#10;     *     components are identical then the URIs are ordered according to the&#10;     *     ordering of their hosts, without regard to case; if the hosts are&#10;     *     identical then the URIs are ordered according to the ordering of&#10;     *     their ports. </p></li>&#10;     *&#10;     *     <li><p> If one or both authority components are registry-based then&#10;     *     the URIs are ordered according to the ordering of their authority&#10;     *     components. </p></li>&#10;     *&#10;     *   </ul></li>&#10;     *&#10;     *   <li><p> Finally, two hierarchical URIs with identical schemes and&#10;     *   authority components are ordered according to the ordering of their&#10;     *   paths; if their paths are identical then they are ordered according to&#10;     *   the ordering of their queries; if the queries are identical then they&#10;     *   are ordered according to the order of their fragments. </p></li>&#10;     *&#10;     * </ul>&#10;     *&#10;     * <p> This method satisfies the general contract of the {@link&#10;     * java.lang.Comparable#compareTo(Object) Comparable.compareTo}&#10;     * method. </p>&#10;     *&#10;     * @param   that&#10;     *          The object to which this URI is to be compared&#10;     *&#10;     * @return  A negative integer, zero, or a positive integer as this URI is&#10;     *          less than, equal to, or greater than the given URI&#10;     *&#10;     * @throws  ClassCastException&#10;     *          If the given object is not a URI&#10;     "
  ]
  node [
    id 2242
    label "compareTo(Object)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2243
    label "java.lang.Comparable"
    type "class"
    comment "&#10; * This interface imposes a total ordering on the objects of each class that&#10; * implements it.  This ordering is referred to as the class's <i>natural&#10; * ordering</i>, and the class's {@code compareTo} method is referred to as&#10; * its <i>natural comparison method</i>.<p>&#10; *&#10; * Lists (and arrays) of objects that implement this interface can be sorted&#10; * automatically by {@link Collections#sort(List) Collections.sort} (and&#10; * {@link Arrays#sort(Object[]) Arrays.sort}).  Objects that implement this&#10; * interface can be used as keys in a {@linkplain SortedMap sorted map} or as&#10; * elements in a {@linkplain SortedSet sorted set}, without the need to&#10; * specify a {@linkplain Comparator comparator}.<p>&#10; *&#10; * The natural ordering for a class {@code C} is said to be <i>consistent&#10; * with equals</i> if and only if {@code e1.compareTo(e2) == 0} has&#10; * the same boolean value as {@code e1.equals(e2)} for every&#10; * {@code e1} and {@code e2} of class {@code C}.  Note that {@code null}&#10; * is not an instance of any class, and {@code e.compareTo(null)} should&#10; * throw a {@code NullPointerException} even though {@code e.equals(null)}&#10; * returns {@code false}.<p>&#10; *&#10; * It is strongly recommended (though not required) that natural orderings be&#10; * consistent with equals.  This is so because sorted sets (and sorted maps)&#10; * without explicit comparators behave &#34;strangely&#34; when they are used with&#10; * elements (or keys) whose natural ordering is inconsistent with equals.  In&#10; * particular, such a sorted set (or sorted map) violates the general contract&#10; * for set (or map), which is defined in terms of the {@code equals}&#10; * method.<p>&#10; *&#10; * For example, if one adds two keys {@code a} and {@code b} such that&#10; * {@code (!a.equals(b) &#38;&#38; a.compareTo(b) == 0)} to a sorted&#10; * set that does not use an explicit comparator, the second {@code add}&#10; * operation returns false (and the size of the sorted set does not increase)&#10; * because {@code a} and {@code b} are equivalent from the sorted set's&#10; * perspective.<p>&#10; *&#10; * Virtually all Java core classes that implement {@code Comparable}&#10; * have natural orderings that are consistent with equals.  One&#10; * exception is {@link java.math.BigDecimal}, whose {@linkplain&#10; * java.math.BigDecimal#compareTo natural ordering} equates {@code&#10; * BigDecimal} objects with equal numerical values and different&#10; * representations (such as 4.0 and 4.00). For {@link&#10; * java.math.BigDecimal#equals BigDecimal.equals()} to return true,&#10; * the representation and numerical value of the two {@code&#10; * BigDecimal} objects must be the same.<p>&#10; *&#10; * For the mathematically inclined, the <i>relation</i> that defines&#10; * the natural ordering on a given class C is:<pre>{@code&#10; *       {(x, y) such that x.compareTo(y) <= 0}.&#10; * }</pre> The <i>quotient</i> for this total order is: <pre>{@code&#10; *       {(x, y) such that x.compareTo(y) == 0}.&#10; * }</pre>&#10; *&#10; * It follows immediately from the contract for {@code compareTo} that the&#10; * quotient is an <i>equivalence relation</i> on {@code C}, and that the&#10; * natural ordering is a <i>total order</i> on {@code C}.  When we say that a&#10; * class's natural ordering is <i>consistent with equals</i>, we mean that the&#10; * quotient for the natural ordering is the equivalence relation defined by&#10; * the class's {@link Object#equals(Object) equals(Object)} method:<pre>&#10; *     {(x, y) such that x.equals(y)}. </pre><p>&#10; *&#10; * In other words, when a class's natural ordering is consistent with&#10; * equals, the equivalence classes defined by the equivalence relation&#10; * of the {@code equals} method and the equivalence classes defined by&#10; * the quotient of the {@code compareTo} method are the same.&#10; *&#10; * <p>This interface is a member of the&#10; * <a href=&#34;{@docRoot}/java.base/java/util/package-summary.html#CollectionsFramework&#34;>&#10; * Java Collections Framework</a>.&#10; *&#10; * @param <T> the type of objects that this object may be compared to&#10; *&#10; * @author  Josh Bloch&#10; * @see java.util.Comparator&#10; * @since 1.2&#10; "
  ]
  node [
    id 2244
    label "public int compareTo(T o)"
    type "method"
    comment "&#10;     * Compares this object with the specified object for order.  Returns a&#10;     * negative integer, zero, or a positive integer as this object is less&#10;     * than, equal to, or greater than the specified object.&#10;     *&#10;     * <p>The implementor must ensure {@link Integer#signum&#10;     * signum}{@code (x.compareTo(y)) == -signum(y.compareTo(x))} for&#10;     * all {@code x} and {@code y}.  (This implies that {@code&#10;     * x.compareTo(y)} must throw an exception if and only if {@code&#10;     * y.compareTo(x)} throws an exception.)&#10;     *&#10;     * <p>The implementor must also ensure that the relation is transitive:&#10;     * {@code (x.compareTo(y) > 0 &#38;&#38; y.compareTo(z) > 0)} implies&#10;     * {@code x.compareTo(z) > 0}.&#10;     *&#10;     * <p>Finally, the implementor must ensure that {@code&#10;     * x.compareTo(y)==0} implies that {@code signum(x.compareTo(z))&#10;     * == signum(y.compareTo(z))}, for all {@code z}.&#10;     *&#10;     * @apiNote&#10;     * It is strongly recommended, but <i>not</i> strictly required that&#10;     * {@code (x.compareTo(y)==0) == (x.equals(y))}.  Generally speaking, any&#10;     * class that implements the {@code Comparable} interface and violates&#10;     * this condition should clearly indicate this fact.  The recommended&#10;     * language is &#34;Note: this class has a natural ordering that is&#10;     * inconsistent with equals.&#34;&#10;     *&#10;     * @param   o the object to be compared.&#10;     * @return  a negative integer, zero, or a positive integer as this object&#10;     *          is less than, equal to, or greater than the specified object.&#10;     *&#10;     * @throws NullPointerException if the specified object is null&#10;     * @throws ClassCastException if the specified object's type prevents it&#10;     *         from being compared to this object.&#10;     "
  ]
  node [
    id 2245
    label "public String toASCIIString()"
    type "method"
    comment "&#10;     * Returns the content of this URI as a US-ASCII string.&#10;     *&#10;     * <p> If this URI does not contain any characters in the <i>other</i>&#10;     * category then an invocation of this method will return the same value as&#10;     * an invocation of the {@link #toString() toString} method.  Otherwise&#10;     * this method works as if by invoking that method and then <a&#10;     * href=&#34;#encode&#34;>encoding</a> the result.  </p>&#10;     *&#10;     * @return  The string form of this URI, encoded as needed&#10;     *          so that it only contains characters in the US-ASCII&#10;     *          charset&#10;     "
  ]
  node [
    id 2246
    label "private void writeObject(ObjectOutputStream os) throws IOException"
    type "method"
    comment "&#10;     * Saves the content of this URI to the given serial stream.&#10;     *&#10;     * <p> The only serializable field of a URI instance is its {@code string}&#10;     * field.  That field is given a value, if it does not have one already,&#10;     * and then the {@link java.io.ObjectOutputStream#defaultWriteObject()}&#10;     * method of the given object-output stream is invoked. </p>&#10;     *&#10;     * @param  os  The object-output stream to which this object&#10;     *             is to be written&#10;     "
  ]
  node [
    id 2247
    label "defaultWriteObject()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2248
    label "java.io.ObjectOutputStream"
    type "class"
    comment "&#10; * An ObjectOutputStream writes primitive data types and graphs of Java objects&#10; * to an OutputStream.  The objects can be read (reconstituted) using an&#10; * ObjectInputStream.  Persistent storage of objects can be accomplished by&#10; * using a file for the stream.  If the stream is a network socket stream, the&#10; * objects can be reconstituted on another host or in another process.&#10; *&#10; * <p>Only objects that support the java.io.Serializable interface can be&#10; * written to streams.  The class of each serializable object is encoded&#10; * including the class name and signature of the class, the values of the&#10; * object's fields and arrays, and the closure of any other objects referenced&#10; * from the initial objects.&#10; *&#10; * <p>The method writeObject is used to write an object to the stream.  Any&#10; * object, including Strings and arrays, is written with writeObject. Multiple&#10; * objects or primitives can be written to the stream.  The objects must be&#10; * read back from the corresponding ObjectInputstream with the same types and&#10; * in the same order as they were written.&#10; *&#10; * <p>Primitive data types can also be written to the stream using the&#10; * appropriate methods from DataOutput. Strings can also be written using the&#10; * writeUTF method.&#10; *&#10; * <p>The default serialization mechanism for an object writes the class of the&#10; * object, the class signature, and the values of all non-transient and&#10; * non-static fields.  References to other objects (except in transient or&#10; * static fields) cause those objects to be written also. Multiple references&#10; * to a single object are encoded using a reference sharing mechanism so that&#10; * graphs of objects can be restored to the same shape as when the original was&#10; * written.&#10; *&#10; * <p>For example to write an object that can be read by the example in&#10; * ObjectInputStream:&#10; * <br>&#10; * <pre>&#10; *      FileOutputStream fos = new FileOutputStream(&#34;t.tmp&#34;);&#10; *      ObjectOutputStream oos = new ObjectOutputStream(fos);&#10; *&#10; *      oos.writeInt(12345);&#10; *      oos.writeObject(&#34;Today&#34;);&#10; *      oos.writeObject(new Date());&#10; *&#10; *      oos.close();&#10; * </pre>&#10; *&#10; * <p>Classes that require special handling during the serialization and&#10; * deserialization process must implement special methods with these exact&#10; * signatures:&#10; * <br>&#10; * <pre>&#10; * private void readObject(java.io.ObjectInputStream stream)&#10; *     throws IOException, ClassNotFoundException;&#10; * private void writeObject(java.io.ObjectOutputStream stream)&#10; *     throws IOException&#10; * private void readObjectNoData()&#10; *     throws ObjectStreamException;&#10; * </pre>&#10; *&#10; * <p>The writeObject method is responsible for writing the state of the object&#10; * for its particular class so that the corresponding readObject method can&#10; * restore it.  The method does not need to concern itself with the state&#10; * belonging to the object's superclasses or subclasses.  State is saved by&#10; * writing the individual fields to the ObjectOutputStream using the&#10; * writeObject method or by using the methods for primitive data types&#10; * supported by DataOutput.&#10; *&#10; * <p>Serialization does not write out the fields of any object that does not&#10; * implement the java.io.Serializable interface.  Subclasses of Objects that&#10; * are not serializable can be serializable. In this case the non-serializable&#10; * class must have a no-arg constructor to allow its fields to be initialized.&#10; * In this case it is the responsibility of the subclass to save and restore&#10; * the state of the non-serializable class. It is frequently the case that the&#10; * fields of that class are accessible (public, package, or protected) or that&#10; * there are get and set methods that can be used to restore the state.&#10; *&#10; * <p>Serialization of an object can be prevented by implementing writeObject&#10; * and readObject methods that throw the NotSerializableException.  The&#10; * exception will be caught by the ObjectOutputStream and abort the&#10; * serialization process.&#10; *&#10; * <p>Implementing the Externalizable interface allows the object to assume&#10; * complete control over the contents and format of the object's serialized&#10; * form.  The methods of the Externalizable interface, writeExternal and&#10; * readExternal, are called to save and restore the objects state.  When&#10; * implemented by a class they can write and read their own state using all of&#10; * the methods of ObjectOutput and ObjectInput.  It is the responsibility of&#10; * the objects to handle any versioning that occurs.&#10; *&#10; * <p>Enum constants are serialized differently than ordinary serializable or&#10; * externalizable objects.  The serialized form of an enum constant consists&#10; * solely of its name; field values of the constant are not transmitted.  To&#10; * serialize an enum constant, ObjectOutputStream writes the string returned by&#10; * the constant's name method.  Like other serializable or externalizable&#10; * objects, enum constants can function as the targets of back references&#10; * appearing subsequently in the serialization stream.  The process by which&#10; * enum constants are serialized cannot be customized; any class-specific&#10; * writeObject and writeReplace methods defined by enum types are ignored&#10; * during serialization.  Similarly, any serialPersistentFields or&#10; * serialVersionUID field declarations are also ignored--all enum types have a&#10; * fixed serialVersionUID of 0L.&#10; *&#10; * <p>Primitive data, excluding serializable fields and externalizable data, is&#10; * written to the ObjectOutputStream in block-data records. A block data record&#10; * is composed of a header and data. The block data header consists of a marker&#10; * and the number of bytes to follow the header.  Consecutive primitive data&#10; * writes are merged into one block-data record.  The blocking factor used for&#10; * a block-data record will be 1024 bytes.  Each block-data record will be&#10; * filled up to 1024 bytes, or be written whenever there is a termination of&#10; * block-data mode.  Calls to the ObjectOutputStream methods writeObject,&#10; * defaultWriteObject and writeFields initially terminate any existing&#10; * block-data record.&#10; *&#10; * @author      Mike Warres&#10; * @author      Roger Riggs&#10; * @see java.io.DataOutput&#10; * @see java.io.ObjectInputStream&#10; * @see java.io.Serializable&#10; * @see java.io.Externalizable&#10; * @see <a href=&#34;../../../platform/serialization/spec/output.html&#34;>Object Serialization Specification, Section 2, Object Output Classes</a>&#10; * @since       JDK1.1&#10; "
  ]
  node [
    id 2249
    label "public void useProtocolVersion(int version) throws IOException"
    type "method"
    comment "&#10;     * Specify stream protocol version to use when writing the stream.&#10;     *&#10;     * <p>This routine provides a hook to enable the current version of&#10;     * Serialization to write in a format that is backwards compatible to a&#10;     * previous version of the stream format.&#10;     *&#10;     * <p>Every effort will be made to avoid introducing additional&#10;     * backwards incompatibilities; however, sometimes there is no&#10;     * other alternative.&#10;     *&#10;     * @param   version use ProtocolVersion from java.io.ObjectStreamConstants.&#10;     * @throws  IllegalStateException if called after any objects&#10;     *          have been serialized.&#10;     * @throws  IllegalArgumentException if invalid version is passed in.&#10;     * @throws  IOException if I/O errors occur&#10;     * @see java.io.ObjectStreamConstants#PROTOCOL_VERSION_1&#10;     * @see java.io.ObjectStreamConstants#PROTOCOL_VERSION_2&#10;     * @since   1.2&#10;     "
  ]
  node [
    id 2250
    label "public final void writeObject(Object obj) throws IOException"
    type "method"
    comment "&#10;     * Write the specified object to the ObjectOutputStream.  The class of the&#10;     * object, the signature of the class, and the values of the non-transient&#10;     * and non-static fields of the class and all of its supertypes are&#10;     * written.  Default serialization for a class can be overridden using the&#10;     * writeObject and the readObject methods.  Objects referenced by this&#10;     * object are written transitively so that a complete equivalent graph of&#10;     * objects can be reconstructed by an ObjectInputStream.&#10;     *&#10;     * <p>Exceptions are thrown for problems with the OutputStream and for&#10;     * classes that should not be serialized.  All exceptions are fatal to the&#10;     * OutputStream, which is left in an indeterminate state, and it is up to&#10;     * the caller to ignore or recover the stream state.&#10;     *&#10;     * @throws  InvalidClassException Something is wrong with a class used by&#10;     *          serialization.&#10;     * @throws  NotSerializableException Some object to be serialized does not&#10;     *          implement the java.io.Serializable interface.&#10;     * @throws  IOException Any exception thrown by the underlying&#10;     *          OutputStream.&#10;     "
  ]
  node [
    id 2251
    label "protected void writeObjectOverride(Object obj) throws IOException"
    type "method"
    comment "&#10;     * Method used by subclasses to override the default writeObject method.&#10;     * This method is called by trusted subclasses of ObjectInputStream that&#10;     * constructed ObjectInputStream using the protected no-arg constructor.&#10;     * The subclass is expected to provide an override method with the modifier&#10;     * &#34;final&#34;.&#10;     *&#10;     * @param   obj object to be written to the underlying stream&#10;     * @throws  IOException if there are I/O errors while writing to the&#10;     *          underlying stream&#10;     * @see #ObjectOutputStream()&#10;     * @see #writeObject(Object)&#10;     * @since 1.2&#10;     "
  ]
  node [
    id 2252
    label "public void writeUnshared(Object obj) throws IOException"
    type "method"
    comment "&#10;     * Writes an &#34;unshared&#34; object to the ObjectOutputStream.  This method is&#10;     * identical to writeObject, except that it always writes the given object&#10;     * as a new, unique object in the stream (as opposed to a back-reference&#10;     * pointing to a previously serialized instance).  Specifically:&#10;     * <ul>&#10;     *   <li>An object written via writeUnshared is always serialized in the&#10;     *       same manner as a newly appearing object (an object that has not&#10;     *       been written to the stream yet), regardless of whether or not the&#10;     *       object has been written previously.&#10;     *&#10;     *   <li>If writeObject is used to write an object that has been previously&#10;     *       written with writeUnshared, the previous writeUnshared operation&#10;     *       is treated as if it were a write of a separate object.  In other&#10;     *       words, ObjectOutputStream will never generate back-references to&#10;     *       object data written by calls to writeUnshared.&#10;     * </ul>&#10;     * While writing an object via writeUnshared does not in itself guarantee a&#10;     * unique reference to the object when it is deserialized, it allows a&#10;     * single object to be defined multiple times in a stream, so that multiple&#10;     * calls to readUnshared by the receiver will not conflict.  Note that the&#10;     * rules described above only apply to the base-level object written with&#10;     * writeUnshared, and not to any transitively referenced sub-objects in the&#10;     * object graph to be serialized.&#10;     *&#10;     * <p>ObjectOutputStream subclasses which override this method can only be&#10;     * constructed in security contexts possessing the&#10;     * &#34;enableSubclassImplementation&#34; SerializablePermission; any attempt to&#10;     * instantiate such a subclass without this permission will cause a&#10;     * SecurityException to be thrown.&#10;     *&#10;     * @param   obj object to write to stream&#10;     * @throws  NotSerializableException if an object in the graph to be&#10;     *          serialized does not implement the Serializable interface&#10;     * @throws  InvalidClassException if a problem exists with the class of an&#10;     *          object to be serialized&#10;     * @throws  IOException if an I/O error occurs during serialization&#10;     * @since 1.4&#10;     "
  ]
  node [
    id 2253
    label "public void defaultWriteObject() throws IOException"
    type "method"
    comment "&#10;     * Write the non-static and non-transient fields of the current class to&#10;     * this stream.  This may only be called from the writeObject method of the&#10;     * class being serialized. It will throw the NotActiveException if it is&#10;     * called otherwise.&#10;     *&#10;     * @throws  IOException if I/O errors occur while writing to the underlying&#10;     *          <code>OutputStream</code>&#10;     "
  ]
  node [
    id 2254
    label "public ObjectOutputStream.PutField putFields() throws IOException"
    type "method"
    comment "&#10;     * Retrieve the object used to buffer persistent fields to be written to&#10;     * the stream.  The fields will be written to the stream when writeFields&#10;     * method is called.&#10;     *&#10;     * @return  an instance of the class Putfield that holds the serializable&#10;     *          fields&#10;     * @throws  IOException if I/O errors occur&#10;     * @since 1.2&#10;     "
  ]
  node [
    id 2255
    label "public void writeFields() throws IOException"
    type "method"
    comment "&#10;     * Write the buffered fields to the stream.&#10;     *&#10;     * @throws  IOException if I/O errors occur while writing to the underlying&#10;     *          stream&#10;     * @throws  NotActiveException Called when a classes writeObject method was&#10;     *          not called to write the state of the object.&#10;     * @since 1.2&#10;     "
  ]
  node [
    id 2256
    label "protected void annotateClass(Class<?> cl) throws IOException"
    type "method"
    comment "&#10;     * Subclasses may implement this method to allow class data to be stored in&#10;     * the stream. By default this method does nothing.  The corresponding&#10;     * method in ObjectInputStream is resolveClass.  This method is called&#10;     * exactly once for each unique class in the stream.  The class name and&#10;     * signature will have already been written to the stream.  This method may&#10;     * make free use of the ObjectOutputStream to save any representation of&#10;     * the class it deems suitable (for example, the bytes of the class file).&#10;     * The resolveClass method in the corresponding subclass of&#10;     * ObjectInputStream must read and use any data or objects written by&#10;     * annotateClass.&#10;     *&#10;     * @param   cl the class to annotate custom data for&#10;     * @throws  IOException Any exception thrown by the underlying&#10;     *          OutputStream.&#10;     "
  ]
  node [
    id 2257
    label "protected void annotateProxyClass(Class<?> cl) throws IOException"
    type "method"
    comment "&#10;     * Subclasses may implement this method to store custom data in the stream&#10;     * along with descriptors for dynamic proxy classes.&#10;     *&#10;     * <p>This method is called exactly once for each unique proxy class&#10;     * descriptor in the stream.  The default implementation of this method in&#10;     * <code>ObjectOutputStream</code> does nothing.&#10;     *&#10;     * <p>The corresponding method in <code>ObjectInputStream</code> is&#10;     * <code>resolveProxyClass</code>.  For a given subclass of&#10;     * <code>ObjectOutputStream</code> that overrides this method, the&#10;     * <code>resolveProxyClass</code> method in the corresponding subclass of&#10;     * <code>ObjectInputStream</code> must read any data or objects written by&#10;     * <code>annotateProxyClass</code>.&#10;     *&#10;     * @param   cl the proxy class to annotate custom data for&#10;     * @throws  IOException any exception thrown by the underlying&#10;     *          <code>OutputStream</code>&#10;     * @see ObjectInputStream#resolveProxyClass(String[])&#10;     * @since   1.3&#10;     "
  ]
  node [
    id 2258
    label "protected Object replaceObject(Object obj) throws IOException"
    type "method"
    comment "&#10;     * This method will allow trusted subclasses of ObjectOutputStream to&#10;     * substitute one object for another during serialization. Replacing&#10;     * objects is disabled until enableReplaceObject is called. The&#10;     * enableReplaceObject method checks that the stream requesting to do&#10;     * replacement can be trusted.  The first occurrence of each object written&#10;     * into the serialization stream is passed to replaceObject.  Subsequent&#10;     * references to the object are replaced by the object returned by the&#10;     * original call to replaceObject.  To ensure that the private state of&#10;     * objects is not unintentionally exposed, only trusted streams may use&#10;     * replaceObject.&#10;     *&#10;     * <p>The ObjectOutputStream.writeObject method takes a parameter of type&#10;     * Object (as opposed to type Serializable) to allow for cases where&#10;     * non-serializable objects are replaced by serializable ones.&#10;     *&#10;     * <p>When a subclass is replacing objects it must insure that either a&#10;     * complementary substitution must be made during deserialization or that&#10;     * the substituted object is compatible with every field where the&#10;     * reference will be stored.  Objects whose type is not a subclass of the&#10;     * type of the field or array element abort the serialization by raising an&#10;     * exception and the object is not be stored.&#10;     *&#10;     * <p>This method is called only once when each object is first&#10;     * encountered.  All subsequent references to the object will be redirected&#10;     * to the new object. This method should return the object to be&#10;     * substituted or the original object.&#10;     *&#10;     * <p>Null can be returned as the object to be substituted, but may cause&#10;     * NullReferenceException in classes that contain references to the&#10;     * original object since they may be expecting an object instead of&#10;     * null.&#10;     *&#10;     * @param   obj the object to be replaced&#10;     * @return  the alternate object that replaced the specified one&#10;     * @throws  IOException Any exception thrown by the underlying&#10;     *          OutputStream.&#10;     "
  ]
  node [
    id 2259
    label "protected boolean enableReplaceObject(boolean enable) throws SecurityException"
    type "method"
    comment "&#10;     * Enable the stream to do replacement of objects in the stream.  When&#10;     * enabled, the replaceObject method is called for every object being&#10;     * serialized.&#10;     *&#10;     * <p>If <code>enable</code> is true, and there is a security manager&#10;     * installed, this method first calls the security manager's&#10;     * <code>checkPermission</code> method with a&#10;     * <code>SerializablePermission(&#34;enableSubstitution&#34;)</code> permission to&#10;     * ensure it's ok to enable the stream to do replacement of objects in the&#10;     * stream.&#10;     *&#10;     * @param   enable boolean parameter to enable replacement of objects&#10;     * @return  the previous setting before this method was invoked&#10;     * @throws  SecurityException if a security manager exists and its&#10;     *          <code>checkPermission</code> method denies enabling the stream&#10;     *          to do replacement of objects in the stream.&#10;     * @see SecurityManager#checkPermission&#10;     * @see java.io.SerializablePermission&#10;     "
  ]
  node [
    id 2260
    label "protected void writeStreamHeader() throws IOException"
    type "method"
    comment "&#10;     * The writeStreamHeader method is provided so subclasses can append or&#10;     * prepend their own header to the stream.  It writes the magic number and&#10;     * version to the stream.&#10;     *&#10;     * @throws  IOException if I/O errors occur while writing to the underlying&#10;     *          stream&#10;     "
  ]
  node [
    id 2261
    label "protected void writeClassDescriptor(ObjectStreamClass desc) throws IOException"
    type "method"
    comment "&#10;     * Write the specified class descriptor to the ObjectOutputStream.  Class&#10;     * descriptors are used to identify the classes of objects written to the&#10;     * stream.  Subclasses of ObjectOutputStream may override this method to&#10;     * customize the way in which class descriptors are written to the&#10;     * serialization stream.  The corresponding method in ObjectInputStream,&#10;     * <code>readClassDescriptor</code>, should then be overridden to&#10;     * reconstitute the class descriptor from its custom stream representation.&#10;     * By default, this method writes class descriptors according to the format&#10;     * defined in the Object Serialization specification.&#10;     *&#10;     * <p>Note that this method will only be called if the ObjectOutputStream&#10;     * is not using the old serialization stream format (set by calling&#10;     * ObjectOutputStream's <code>useProtocolVersion</code> method).  If this&#10;     * serialization stream is using the old format&#10;     * (<code>PROTOCOL_VERSION_1</code>), the class descriptor will be written&#10;     * internally in a manner that cannot be overridden or customized.&#10;     *&#10;     * @param   desc class descriptor to write to the stream&#10;     * @throws  IOException If an I/O error has occurred.&#10;     * @see java.io.ObjectInputStream#readClassDescriptor()&#10;     * @see #useProtocolVersion(int)&#10;     * @see java.io.ObjectStreamConstants#PROTOCOL_VERSION_1&#10;     * @since 1.3&#10;     "
  ]
  node [
    id 2262
    label "public void write(int val) throws IOException"
    type "method"
    comment "&#10;     * Writes a byte. This method will block until the byte is actually&#10;     * written.&#10;     *&#10;     * @param   val the byte to be written to the stream&#10;     * @throws  IOException If an I/O error has occurred.&#10;     "
  ]
  node [
    id 2263
    label "public void write(byte[] buf) throws IOException"
    type "method"
    comment "&#10;     * Writes an array of bytes. This method will block until the bytes are&#10;     * actually written.&#10;     *&#10;     * @param   buf the data to be written&#10;     * @throws  IOException If an I/O error has occurred.&#10;     "
  ]
  node [
    id 2264
    label "public void write(byte[] buf, int off, int len) throws IOException"
    type "method"
    comment "&#10;     * Writes a sub array of bytes.&#10;     *&#10;     * @param   buf the data to be written&#10;     * @param   off the start offset in the data&#10;     * @param   len the number of bytes that are written&#10;     * @throws  IOException If an I/O error has occurred.&#10;     "
  ]
  node [
    id 2265
    label "protected void drain() throws IOException"
    type "method"
    comment "&#10;     * Drain any buffered data in ObjectOutputStream.  Similar to flush but&#10;     * does not propagate the flush to the underlying stream.&#10;     *&#10;     * @throws  IOException if I/O errors occur while writing to the underlying&#10;     *          stream&#10;     "
  ]
  node [
    id 2266
    label "public void writeBoolean(boolean val) throws IOException"
    type "method"
    comment "&#10;     * Writes a boolean.&#10;     *&#10;     * @param   val the boolean to be written&#10;     * @throws  IOException if I/O errors occur while writing to the underlying&#10;     *          stream&#10;     "
  ]
  node [
    id 2267
    label "public void writeByte(int val) throws IOException"
    type "method"
    comment "&#10;     * Writes an 8 bit byte.&#10;     *&#10;     * @param   val the byte value to be written&#10;     * @throws  IOException if I/O errors occur while writing to the underlying&#10;     *          stream&#10;     "
  ]
  node [
    id 2268
    label "public void writeShort(int val) throws IOException"
    type "method"
    comment "&#10;     * Writes a 16 bit short.&#10;     *&#10;     * @param   val the short value to be written&#10;     * @throws  IOException if I/O errors occur while writing to the underlying&#10;     *          stream&#10;     "
  ]
  node [
    id 2269
    label "public void writeChar(int val) throws IOException"
    type "method"
    comment "&#10;     * Writes a 16 bit char.&#10;     *&#10;     * @param   val the char value to be written&#10;     * @throws  IOException if I/O errors occur while writing to the underlying&#10;     *          stream&#10;     "
  ]
  node [
    id 2270
    label "public void writeInt(int val) throws IOException"
    type "method"
    comment "&#10;     * Writes a 32 bit int.&#10;     *&#10;     * @param   val the integer value to be written&#10;     * @throws  IOException if I/O errors occur while writing to the underlying&#10;     *          stream&#10;     "
  ]
  node [
    id 2271
    label "public void writeLong(long val) throws IOException"
    type "method"
    comment "&#10;     * Writes a 64 bit long.&#10;     *&#10;     * @param   val the long value to be written&#10;     * @throws  IOException if I/O errors occur while writing to the underlying&#10;     *          stream&#10;     "
  ]
  node [
    id 2272
    label "public void writeFloat(float val) throws IOException"
    type "method"
    comment "&#10;     * Writes a 32 bit float.&#10;     *&#10;     * @param   val the float value to be written&#10;     * @throws  IOException if I/O errors occur while writing to the underlying&#10;     *          stream&#10;     "
  ]
  node [
    id 2273
    label "public void writeDouble(double val) throws IOException"
    type "method"
    comment "&#10;     * Writes a 64 bit double.&#10;     *&#10;     * @param   val the double value to be written&#10;     * @throws  IOException if I/O errors occur while writing to the underlying&#10;     *          stream&#10;     "
  ]
  node [
    id 2274
    label "public void writeBytes(String str) throws IOException"
    type "method"
    comment "&#10;     * Writes a String as a sequence of bytes.&#10;     *&#10;     * @param   str the String of bytes to be written&#10;     * @throws  IOException if I/O errors occur while writing to the underlying&#10;     *          stream&#10;     "
  ]
  node [
    id 2275
    label "public void writeChars(String str) throws IOException"
    type "method"
    comment "&#10;     * Writes a String as a sequence of chars.&#10;     *&#10;     * @param   str the String of chars to be written&#10;     * @throws  IOException if I/O errors occur while writing to the underlying&#10;     *          stream&#10;     "
  ]
  node [
    id 2276
    label "public void writeUTF(String str) throws IOException"
    type "method"
    comment "&#10;     * Primitive data write of this String in&#10;     * <a href=&#34;DataInput.html#modified-utf-8&#34;>modified UTF-8</a>&#10;     * format.  Note that there is a&#10;     * significant difference between writing a String into the stream as&#10;     * primitive data or as an Object. A String instance written by writeObject&#10;     * is written into the stream as a String initially. Future writeObject()&#10;     * calls write references to the string into the stream.&#10;     *&#10;     * @param   str the String to be written&#10;     * @throws  IOException if I/O errors occur while writing to the underlying&#10;     *          stream&#10;     "
  ]
  node [
    id 2277
    label " int getProtocolVersion()"
    type "method"
    comment "&#10;     * Returns protocol version in use.&#10;     "
  ]
  node [
    id 2278
    label " void writeTypeString(String str) throws IOException"
    type "method"
    comment "&#10;     * Writes string without allowing it to be replaced in stream.  Used by&#10;     * ObjectStreamClass to write class descriptor type strings.&#10;     "
  ]
  node [
    id 2279
    label "private void verifySubclass()"
    type "method"
    comment "&#10;     * Verifies that this (possibly subclass) instance can be constructed&#10;     * without violating security constraints: the subclass must not override&#10;     * security-sensitive non-final methods, or else the&#10;     * &#34;enableSubclassImplementation&#34; SerializablePermission is checked.&#10;     "
  ]
  node [
    id 2280
    label "private void clear()"
    type "method"
    comment "&#10;     * Clears internal data structures.&#10;     "
  ]
  node [
    id 2281
    label "private void writeObject0(Object obj, boolean unshared) throws IOException"
    type "method"
    comment "&#10;     * Underlying writeObject/writeUnshared implementation.&#10;     "
  ]
  node [
    id 2282
    label "private void writeNull() throws IOException"
    type "method"
    comment "&#10;     * Writes null code to stream.&#10;     "
  ]
  node [
    id 2283
    label "private void writeHandle(int handle) throws IOException"
    type "method"
    comment "&#10;     * Writes given object handle to stream.&#10;     "
  ]
  node [
    id 2284
    label "private void writeClass(Class<?> cl, boolean unshared) throws IOException"
    type "method"
    comment "&#10;     * Writes representation of given class to stream.&#10;     "
  ]
  node [
    id 2285
    label "private void writeClassDesc(ObjectStreamClass desc, boolean unshared) throws IOException"
    type "method"
    comment "&#10;     * Writes representation of given class descriptor to stream.&#10;     "
  ]
  node [
    id 2286
    label "private void writeProxyDesc(ObjectStreamClass desc, boolean unshared) throws IOException"
    type "method"
    comment "&#10;     * Writes class descriptor representing a dynamic proxy class to stream.&#10;     "
  ]
  node [
    id 2287
    label "private void writeNonProxyDesc(ObjectStreamClass desc, boolean unshared) throws IOException"
    type "method"
    comment "&#10;     * Writes class descriptor representing a standard (i.e., not a dynamic&#10;     * proxy) class to stream.&#10;     "
  ]
  node [
    id 2288
    label "private void writeString(String str, boolean unshared) throws IOException"
    type "method"
    comment "&#10;     * Writes given string to stream, using standard or long UTF format&#10;     * depending on string length.&#10;     "
  ]
  node [
    id 2289
    label "private void writeArray(Object array, ObjectStreamClass desc, boolean unshared) throws IOException"
    type "method"
    comment "&#10;     * Writes given array object to stream.&#10;     "
  ]
  node [
    id 2290
    label "private void writeEnum(Enum<?> en, ObjectStreamClass desc, boolean unshared) throws IOException"
    type "method"
    comment "&#10;     * Writes given enum constant to stream.&#10;     "
  ]
  node [
    id 2291
    label "private void writeOrdinaryObject(Object obj, ObjectStreamClass desc, boolean unshared) throws IOException"
    type "method"
    comment "&#10;     * Writes representation of a &#34;ordinary&#34; (i.e., not a String, Class,&#10;     * ObjectStreamClass, array, or enum constant) serializable object to the&#10;     * stream.&#10;     "
  ]
  node [
    id 2292
    label "private void writeExternalData(Externalizable obj) throws IOException"
    type "method"
    comment "&#10;     * Writes externalizable data of given object by invoking its&#10;     * writeExternal() method.&#10;     "
  ]
  node [
    id 2293
    label "private void writeRecordData(Object obj, ObjectStreamClass desc) throws IOException"
    type "method"
    comment " Writes the record component values for the given record object. "
  ]
  node [
    id 2294
    label "private void writeSerialData(Object obj, ObjectStreamClass desc) throws IOException"
    type "method"
    comment "&#10;     * Writes instance data for each serializable class of given object, from&#10;     * superclass to subclass.&#10;     "
  ]
  node [
    id 2295
    label "private void defaultWriteFields(Object obj, ObjectStreamClass desc) throws IOException"
    type "method"
    comment "&#10;     * Fetches and writes values of serializable fields of given object to&#10;     * stream.  The given class descriptor specifies which field values to&#10;     * write, and in which order they should be written.&#10;     "
  ]
  node [
    id 2296
    label "private void writeFatalException(IOException ex) throws IOException"
    type "method"
    comment "&#10;     * Attempts to write to stream fatal IOException that has caused&#10;     * serialization to abort.&#10;     "
  ]
  node [
    id 2297
    label "private static native void floatsToBytes(float[] src, int srcpos, byte[] dst, int dstpos, int nfloats)"
    type "method"
    comment " REMIND: remove once hotspot inlines Float.floatToIntBits"
  ]
  node [
    id 2298
    label "private static native void doublesToBytes(double[] src, int srcpos, byte[] dst, int dstpos, int ndoubles)"
    type "method"
    comment " REMIND: remove once hotspot inlines Double.doubleToLongBits"
  ]
  node [
    id 2299
    label "private void readObject(ObjectInputStream is) throws ClassNotFoundException, IOException"
    type "method"
    comment "&#10;     * Reconstitutes a URI from the given serial stream.&#10;     *&#10;     * <p> The {@link java.io.ObjectInputStream#defaultReadObject()} method is&#10;     * invoked to read the value of the {@code string} field.  The result is&#10;     * then parsed in the usual way.&#10;     *&#10;     * @param  is  The object-input stream from which this object&#10;     *             is being read&#10;     "
  ]
  node [
    id 2300
    label "defaultReadObject()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2301
    label "java.io.ObjectInputStream"
    type "class"
    comment "&#10; * An ObjectInputStream deserializes primitive data and objects previously&#10; * written using an ObjectOutputStream.&#10; *&#10; * <p>ObjectOutputStream and ObjectInputStream can provide an application with&#10; * persistent storage for graphs of objects when used with a FileOutputStream&#10; * and FileInputStream respectively.  ObjectInputStream is used to recover&#10; * those objects previously serialized. Other uses include passing objects&#10; * between hosts using a socket stream or for marshaling and unmarshaling&#10; * arguments and parameters in a remote communication system.&#10; *&#10; * <p>ObjectInputStream ensures that the types of all objects in the graph&#10; * created from the stream match the classes present in the Java Virtual&#10; * Machine.  Classes are loaded as required using the standard mechanisms.&#10; *&#10; * <p>Only objects that support the java.io.Serializable or&#10; * java.io.Externalizable interface can be read from streams.&#10; *&#10; * <p>The method <code>readObject</code> is used to read an object from the&#10; * stream.  Java's safe casting should be used to get the desired type.  In&#10; * Java, strings and arrays are objects and are treated as objects during&#10; * serialization. When read they need to be cast to the expected type.&#10; *&#10; * <p>Primitive data types can be read from the stream using the appropriate&#10; * method on DataInput.&#10; *&#10; * <p>The default deserialization mechanism for objects restores the contents&#10; * of each field to the value and type it had when it was written.  Fields&#10; * declared as transient or static are ignored by the deserialization process.&#10; * References to other objects cause those objects to be read from the stream&#10; * as necessary.  Graphs of objects are restored correctly using a reference&#10; * sharing mechanism.  New objects are always allocated when deserializing,&#10; * which prevents existing objects from being overwritten.&#10; *&#10; * <p>Reading an object is analogous to running the constructors of a new&#10; * object.  Memory is allocated for the object and initialized to zero (NULL).&#10; * No-arg constructors are invoked for the non-serializable classes and then&#10; * the fields of the serializable classes are restored from the stream starting&#10; * with the serializable class closest to java.lang.object and finishing with&#10; * the object's most specific class.&#10; *&#10; * <p>For example to read from a stream as written by the example in&#10; * ObjectOutputStream:&#10; * <br>&#10; * <pre>&#10; *      FileInputStream fis = new FileInputStream(&#34;t.tmp&#34;);&#10; *      ObjectInputStream ois = new ObjectInputStream(fis);&#10; *&#10; *      int i = ois.readInt();&#10; *      String today = (String) ois.readObject();&#10; *      Date date = (Date) ois.readObject();&#10; *&#10; *      ois.close();&#10; * </pre>&#10; *&#10; * <p>Classes control how they are serialized by implementing either the&#10; * java.io.Serializable or java.io.Externalizable interfaces.&#10; *&#10; * <p>Implementing the Serializable interface allows object serialization to&#10; * save and restore the entire state of the object and it allows classes to&#10; * evolve between the time the stream is written and the time it is read.  It&#10; * automatically traverses references between objects, saving and restoring&#10; * entire graphs.&#10; *&#10; * <p>Serializable classes that require special handling during the&#10; * serialization and deserialization process should implement the following&#10; * methods:&#10; *&#10; * <pre>&#10; * private void writeObject(java.io.ObjectOutputStream stream)&#10; *     throws IOException;&#10; * private void readObject(java.io.ObjectInputStream stream)&#10; *     throws IOException, ClassNotFoundException;&#10; * private void readObjectNoData()&#10; *     throws ObjectStreamException;&#10; * </pre>&#10; *&#10; * <p>The readObject method is responsible for reading and restoring the state&#10; * of the object for its particular class using data written to the stream by&#10; * the corresponding writeObject method.  The method does not need to concern&#10; * itself with the state belonging to its superclasses or subclasses.  State is&#10; * restored by reading data from the ObjectInputStream for the individual&#10; * fields and making assignments to the appropriate fields of the object.&#10; * Reading primitive data types is supported by DataInput.&#10; *&#10; * <p>Any attempt to read object data which exceeds the boundaries of the&#10; * custom data written by the corresponding writeObject method will cause an&#10; * OptionalDataException to be thrown with an eof field value of true.&#10; * Non-object reads which exceed the end of the allotted data will reflect the&#10; * end of data in the same way that they would indicate the end of the stream:&#10; * bytewise reads will return -1 as the byte read or number of bytes read, and&#10; * primitive reads will throw EOFExceptions.  If there is no corresponding&#10; * writeObject method, then the end of default serialized data marks the end of&#10; * the allotted data.&#10; *&#10; * <p>Primitive and object read calls issued from within a readExternal method&#10; * behave in the same manner--if the stream is already positioned at the end of&#10; * data written by the corresponding writeExternal method, object reads will&#10; * throw OptionalDataExceptions with eof set to true, bytewise reads will&#10; * return -1, and primitive reads will throw EOFExceptions.  Note that this&#10; * behavior does not hold for streams written with the old&#10; * <code>ObjectStreamConstants.PROTOCOL_VERSION_1</code> protocol, in which the&#10; * end of data written by writeExternal methods is not demarcated, and hence&#10; * cannot be detected.&#10; *&#10; * <p>The readObjectNoData method is responsible for initializing the state of&#10; * the object for its particular class in the event that the serialization&#10; * stream does not list the given class as a superclass of the object being&#10; * deserialized.  This may occur in cases where the receiving party uses a&#10; * different version of the deserialized instance's class than the sending&#10; * party, and the receiver's version extends classes that are not extended by&#10; * the sender's version.  This may also occur if the serialization stream has&#10; * been tampered; hence, readObjectNoData is useful for initializing&#10; * deserialized objects properly despite a &#34;hostile&#34; or incomplete source&#10; * stream.&#10; *&#10; * <p>Serialization does not read or assign values to the fields of any object&#10; * that does not implement the java.io.Serializable interface.  Subclasses of&#10; * Objects that are not serializable can be serializable. In this case the&#10; * non-serializable class must have a no-arg constructor to allow its fields to&#10; * be initialized.  In this case it is the responsibility of the subclass to&#10; * save and restore the state of the non-serializable class. It is frequently&#10; * the case that the fields of that class are accessible (public, package, or&#10; * protected) or that there are get and set methods that can be used to restore&#10; * the state.&#10; *&#10; * <p>Any exception that occurs while deserializing an object will be caught by&#10; * the ObjectInputStream and abort the reading process.&#10; *&#10; * <p>Implementing the Externalizable interface allows the object to assume&#10; * complete control over the contents and format of the object's serialized&#10; * form.  The methods of the Externalizable interface, writeExternal and&#10; * readExternal, are called to save and restore the objects state.  When&#10; * implemented by a class they can write and read their own state using all of&#10; * the methods of ObjectOutput and ObjectInput.  It is the responsibility of&#10; * the objects to handle any versioning that occurs.&#10; *&#10; * <p>Enum constants are deserialized differently than ordinary serializable or&#10; * externalizable objects.  The serialized form of an enum constant consists&#10; * solely of its name; field values of the constant are not transmitted.  To&#10; * deserialize an enum constant, ObjectInputStream reads the constant name from&#10; * the stream; the deserialized constant is then obtained by calling the static&#10; * method <code>Enum.valueOf(Class, String)</code> with the enum constant's&#10; * base type and the received constant name as arguments.  Like other&#10; * serializable or externalizable objects, enum constants can function as the&#10; * targets of back references appearing subsequently in the serialization&#10; * stream.  The process by which enum constants are deserialized cannot be&#10; * customized: any class-specific readObject, readObjectNoData, and readResolve&#10; * methods defined by enum types are ignored during deserialization.&#10; * Similarly, any serialPersistentFields or serialVersionUID field declarations&#10; * are also ignored--all enum types have a fixed serialVersionUID of 0L.&#10; *&#10; * @author      Mike Warres&#10; * @author      Roger Riggs&#10; * @see java.io.DataInput&#10; * @see java.io.ObjectOutputStream&#10; * @see java.io.Serializable&#10; * @see <a href=&#34;../../../platform/serialization/spec/input.html&#34;> Object Serialization Specification, Section 3, Object Input Classes</a>&#10; * @since   JDK1.1&#10; "
  ]
  node [
    id 2302
    label "public final Object readObject() throws IOException, ClassNotFoundException"
    type "method"
    comment "&#10;     * Read an object from the ObjectInputStream.  The class of the object, the&#10;     * signature of the class, and the values of the non-transient and&#10;     * non-static fields of the class and all of its supertypes are read.&#10;     * Default deserializing for a class can be overridden using the writeObject&#10;     * and readObject methods.  Objects referenced by this object are read&#10;     * transitively so that a complete equivalent graph of objects is&#10;     * reconstructed by readObject.&#10;     *&#10;     * <p>The root object is completely restored when all of its fields and the&#10;     * objects it references are completely restored.  At this point the object&#10;     * validation callbacks are executed in order based on their registered&#10;     * priorities. The callbacks are registered by objects (in the readObject&#10;     * special methods) as they are individually restored.&#10;     *&#10;     * <p>Exceptions are thrown for problems with the InputStream and for&#10;     * classes that should not be deserialized.  All exceptions are fatal to&#10;     * the InputStream and leave it in an indeterminate state; it is up to the&#10;     * caller to ignore or recover the stream state.&#10;     *&#10;     * @throws  ClassNotFoundException Class of a serialized object cannot be&#10;     *          found.&#10;     * @throws  InvalidClassException Something is wrong with a class used by&#10;     *          serialization.&#10;     * @throws  StreamCorruptedException Control information in the&#10;     *          stream is inconsistent.&#10;     * @throws  OptionalDataException Primitive data was found in the&#10;     *          stream instead of objects.&#10;     * @throws  IOException Any of the usual Input/Output related exceptions.&#10;     "
  ]
  node [
    id 2303
    label "protected Object readObjectOverride() throws IOException, ClassNotFoundException"
    type "method"
    comment "&#10;     * This method is called by trusted subclasses of ObjectOutputStream that&#10;     * constructed ObjectOutputStream using the protected no-arg constructor.&#10;     * The subclass is expected to provide an override method with the modifier&#10;     * &#34;final&#34;.&#10;     *&#10;     * @return  the Object read from the stream.&#10;     * @throws  ClassNotFoundException Class definition of a serialized object&#10;     *          cannot be found.&#10;     * @throws  OptionalDataException Primitive data was found in the stream&#10;     *          instead of objects.&#10;     * @throws  IOException if I/O errors occurred while reading from the&#10;     *          underlying stream&#10;     * @see #ObjectInputStream()&#10;     * @see #readObject()&#10;     * @since 1.2&#10;     "
  ]
  node [
    id 2304
    label "public Object readUnshared() throws IOException, ClassNotFoundException"
    type "method"
    comment "&#10;     * Reads an &#34;unshared&#34; object from the ObjectInputStream.  This method is&#10;     * identical to readObject, except that it prevents subsequent calls to&#10;     * readObject and readUnshared from returning additional references to the&#10;     * deserialized instance obtained via this call.  Specifically:&#10;     * <ul>&#10;     *   <li>If readUnshared is called to deserialize a back-reference (the&#10;     *       stream representation of an object which has been written&#10;     *       previously to the stream), an ObjectStreamException will be&#10;     *       thrown.&#10;     *&#10;     *   <li>If readUnshared returns successfully, then any subsequent attempts&#10;     *       to deserialize back-references to the stream handle deserialized&#10;     *       by readUnshared will cause an ObjectStreamException to be thrown.&#10;     * </ul>&#10;     * Deserializing an object via readUnshared invalidates the stream handle&#10;     * associated with the returned object.  Note that this in itself does not&#10;     * always guarantee that the reference returned by readUnshared is unique;&#10;     * the deserialized object may define a readResolve method which returns an&#10;     * object visible to other parties, or readUnshared may return a Class&#10;     * object or enum constant obtainable elsewhere in the stream or through&#10;     * external means. If the deserialized object defines a readResolve method&#10;     * and the invocation of that method returns an array, then readUnshared&#10;     * returns a shallow clone of that array; this guarantees that the returned&#10;     * array object is unique and cannot be obtained a second time from an&#10;     * invocation of readObject or readUnshared on the ObjectInputStream,&#10;     * even if the underlying data stream has been manipulated.&#10;     *&#10;     * <p>ObjectInputStream subclasses which override this method can only be&#10;     * constructed in security contexts possessing the&#10;     * &#34;enableSubclassImplementation&#34; SerializablePermission; any attempt to&#10;     * instantiate such a subclass without this permission will cause a&#10;     * SecurityException to be thrown.&#10;     *&#10;     * @return  reference to deserialized object&#10;     * @throws  ClassNotFoundException if class of an object to deserialize&#10;     *          cannot be found&#10;     * @throws  StreamCorruptedException if control information in the stream&#10;     *          is inconsistent&#10;     * @throws  ObjectStreamException if object to deserialize has already&#10;     *          appeared in stream&#10;     * @throws  OptionalDataException if primitive data is next in stream&#10;     * @throws  IOException if an I/O error occurs during deserialization&#10;     * @since   1.4&#10;     "
  ]
  node [
    id 2305
    label "public void defaultReadObject() throws IOException, ClassNotFoundException"
    type "method"
    comment "&#10;     * Read the non-static and non-transient fields of the current class from&#10;     * this stream.  This may only be called from the readObject method of the&#10;     * class being deserialized. It will throw the NotActiveException if it is&#10;     * called otherwise.&#10;     *&#10;     * @throws  ClassNotFoundException if the class of a serialized object&#10;     *          could not be found.&#10;     * @throws  IOException if an I/O error occurs.&#10;     * @throws  NotActiveException if the stream is not currently reading&#10;     *          objects.&#10;     "
  ]
  node [
    id 2306
    label "public ObjectInputStream.GetField readFields() throws IOException, ClassNotFoundException"
    type "method"
    comment "&#10;     * Reads the persistent fields from the stream and makes them available by&#10;     * name.&#10;     *&#10;     * @return  the <code>GetField</code> object representing the persistent&#10;     *          fields of the object being deserialized&#10;     * @throws  ClassNotFoundException if the class of a serialized object&#10;     *          could not be found.&#10;     * @throws  IOException if an I/O error occurs.&#10;     * @throws  NotActiveException if the stream is not currently reading&#10;     *          objects.&#10;     * @since 1.2&#10;     "
  ]
  node [
    id 2307
    label "public void registerValidation(ObjectInputValidation obj, int prio) throws NotActiveException, InvalidObjectException"
    type "method"
    comment "&#10;     * Register an object to be validated before the graph is returned.  While&#10;     * similar to resolveObject these validations are called after the entire&#10;     * graph has been reconstituted.  Typically, a readObject method will&#10;     * register the object with the stream so that when all of the objects are&#10;     * restored a final set of validations can be performed.&#10;     *&#10;     * @param   obj the object to receive the validation callback.&#10;     * @param   prio controls the order of callbacks;zero is a good default.&#10;     *          Use higher numbers to be called back earlier, lower numbers for&#10;     *          later callbacks. Within a priority, callbacks are processed in&#10;     *          no particular order.&#10;     * @throws  NotActiveException The stream is not currently reading objects&#10;     *          so it is invalid to register a callback.&#10;     * @throws  InvalidObjectException The validation object is null.&#10;     "
  ]
  node [
    id 2308
    label "protected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException"
    type "method"
    comment "&#10;     * Load the local class equivalent of the specified stream class&#10;     * description.  Subclasses may implement this method to allow classes to&#10;     * be fetched from an alternate source.&#10;     *&#10;     * <p>The corresponding method in <code>ObjectOutputStream</code> is&#10;     * <code>annotateClass</code>.  This method will be invoked only once for&#10;     * each unique class in the stream.  This method can be implemented by&#10;     * subclasses to use an alternate loading mechanism but must return a&#10;     * <code>Class</code> object. Once returned, if the class is not an array&#10;     * class, its serialVersionUID is compared to the serialVersionUID of the&#10;     * serialized class, and if there is a mismatch, the deserialization fails&#10;     * and an {@link InvalidClassException} is thrown.&#10;     *&#10;     * <p>The default implementation of this method in&#10;     * <code>ObjectInputStream</code> returns the result of calling&#10;     * <pre>&#10;     *     Class.forName(desc.getName(), false, loader)&#10;     * </pre>&#10;     * where <code>loader</code> is determined as follows: if there is a&#10;     * method on the current thread's stack whose declaring class was&#10;     * defined by a user-defined class loader (and was not a generated to&#10;     * implement reflective invocations), then <code>loader</code> is class&#10;     * loader corresponding to the closest such method to the currently&#10;     * executing frame; otherwise, <code>loader</code> is&#10;     * <code>null</code>. If this call results in a&#10;     * <code>ClassNotFoundException</code> and the name of the passed&#10;     * <code>ObjectStreamClass</code> instance is the Java language keyword&#10;     * for a primitive type or void, then the <code>Class</code> object&#10;     * representing that primitive type or void will be returned&#10;     * (e.g., an <code>ObjectStreamClass</code> with the name&#10;     * <code>&#34;int&#34;</code> will be resolved to <code>Integer.TYPE</code>).&#10;     * Otherwise, the <code>ClassNotFoundException</code> will be thrown to&#10;     * the caller of this method.&#10;     *&#10;     * @param   desc an instance of class <code>ObjectStreamClass</code>&#10;     * @return  a <code>Class</code> object corresponding to <code>desc</code>&#10;     * @throws  IOException any of the usual Input/Output exceptions.&#10;     * @throws  ClassNotFoundException if class of a serialized object cannot&#10;     *          be found.&#10;     "
  ]
  node [
    id 2309
    label "java.io.InvalidClassException"
    type "class"
    comment "&#10; * Thrown when the Serialization runtime detects one of the following&#10; * problems with a Class.&#10; * <UL>&#10; * <LI> The serial version of the class does not match that of the class&#10; *      descriptor read from the stream&#10; * <LI> The class contains unknown datatypes&#10; * <LI> The class does not have an accessible no-arg constructor&#10; * <LI> The ObjectStreamClass of an enum constant does not represent&#10; *      an enum type&#10; * <LI> Other conditions given in the <cite>Java Object Serialization&#10; *      Specification</cite>&#10; * </UL>&#10; *&#10; * @since   1.1&#10; "
  ]
  node [
    id 2310
    label "protected Class<?> resolveProxyClass(String[] interfaces) throws IOException, ClassNotFoundException"
    type "method"
    comment "&#10;     * Returns a proxy class that implements the interfaces named in a proxy&#10;     * class descriptor; subclasses may implement this method to read custom&#10;     * data from the stream along with the descriptors for dynamic proxy&#10;     * classes, allowing them to use an alternate loading mechanism for the&#10;     * interfaces and the proxy class.&#10;     *&#10;     * <p>This method is called exactly once for each unique proxy class&#10;     * descriptor in the stream.&#10;     *&#10;     * <p>The corresponding method in <code>ObjectOutputStream</code> is&#10;     * <code>annotateProxyClass</code>.  For a given subclass of&#10;     * <code>ObjectInputStream</code> that overrides this method, the&#10;     * <code>annotateProxyClass</code> method in the corresponding subclass of&#10;     * <code>ObjectOutputStream</code> must write any data or objects read by&#10;     * this method.&#10;     *&#10;     * <p>The default implementation of this method in&#10;     * <code>ObjectInputStream</code> returns the result of calling&#10;     * <code>Proxy.getProxyClass</code> with the list of <code>Class</code>&#10;     * objects for the interfaces that are named in the <code>interfaces</code>&#10;     * parameter.  The <code>Class</code> object for each interface name&#10;     * <code>i</code> is the value returned by calling&#10;     * <pre>&#10;     *     Class.forName(i, false, loader)&#10;     * </pre>&#10;     * where <code>loader</code> is that of the first non-<code>null</code>&#10;     * class loader up the execution stack, or <code>null</code> if no&#10;     * non-<code>null</code> class loaders are on the stack (the same class&#10;     * loader choice used by the <code>resolveClass</code> method).  Unless any&#10;     * of the resolved interfaces are non-public, this same value of&#10;     * <code>loader</code> is also the class loader passed to&#10;     * <code>Proxy.getProxyClass</code>; if non-public interfaces are present,&#10;     * their class loader is passed instead (if more than one non-public&#10;     * interface class loader is encountered, an&#10;     * <code>IllegalAccessError</code> is thrown).&#10;     * If <code>Proxy.getProxyClass</code> throws an&#10;     * <code>IllegalArgumentException</code>, <code>resolveProxyClass</code>&#10;     * will throw a <code>ClassNotFoundException</code> containing the&#10;     * <code>IllegalArgumentException</code>.&#10;     *&#10;     * @param interfaces the list of interface names that were&#10;     *                deserialized in the proxy class descriptor&#10;     * @return  a proxy class for the specified interfaces&#10;     * @throws        IOException any exception thrown by the underlying&#10;     *                <code>InputStream</code>&#10;     * @throws        ClassNotFoundException if the proxy class or any of the&#10;     *                named interfaces could not be found&#10;     * @see ObjectOutputStream#annotateProxyClass(Class)&#10;     * @since 1.3&#10;     "
  ]
  node [
    id 2311
    label "protected Object resolveObject(Object obj) throws IOException"
    type "method"
    comment "&#10;     * This method will allow trusted subclasses of ObjectInputStream to&#10;     * substitute one object for another during deserialization. Replacing&#10;     * objects is disabled until enableResolveObject is called. The&#10;     * enableResolveObject method checks that the stream requesting to resolve&#10;     * object can be trusted. Every reference to serializable objects is passed&#10;     * to resolveObject.  To insure that the private state of objects is not&#10;     * unintentionally exposed only trusted streams may use resolveObject.&#10;     *&#10;     * <p>This method is called after an object has been read but before it is&#10;     * returned from readObject.  The default resolveObject method just returns&#10;     * the same object.&#10;     *&#10;     * <p>When a subclass is replacing objects it must insure that the&#10;     * substituted object is compatible with every field where the reference&#10;     * will be stored.  Objects whose type is not a subclass of the type of the&#10;     * field or array element abort the serialization by raising an exception&#10;     * and the object is not be stored.&#10;     *&#10;     * <p>This method is called only once when each object is first&#10;     * encountered.  All subsequent references to the object will be redirected&#10;     * to the new object.&#10;     *&#10;     * @param   obj object to be substituted&#10;     * @return  the substituted object&#10;     * @throws  IOException Any of the usual Input/Output exceptions.&#10;     "
  ]
  node [
    id 2312
    label "protected boolean enableResolveObject(boolean enable) throws SecurityException"
    type "method"
    comment "&#10;     * Enable the stream to allow objects read from the stream to be replaced.&#10;     * When enabled, the resolveObject method is called for every object being&#10;     * deserialized.&#10;     *&#10;     * <p>If <i>enable</i> is true, and there is a security manager installed,&#10;     * this method first calls the security manager's&#10;     * <code>checkPermission</code> method with the&#10;     * <code>SerializablePermission(&#34;enableSubstitution&#34;)</code> permission to&#10;     * ensure it's ok to enable the stream to allow objects read from the&#10;     * stream to be replaced.&#10;     *&#10;     * @param   enable true for enabling use of <code>resolveObject</code> for&#10;     *          every object being deserialized&#10;     * @return  the previous setting before this method was invoked&#10;     * @throws  SecurityException if a security manager exists and its&#10;     *          <code>checkPermission</code> method denies enabling the stream&#10;     *          to allow objects read from the stream to be replaced.&#10;     * @see SecurityManager#checkPermission&#10;     * @see java.io.SerializablePermission&#10;     "
  ]
  node [
    id 2313
    label "protected void readStreamHeader() throws IOException, StreamCorruptedException"
    type "method"
    comment "&#10;     * The readStreamHeader method is provided to allow subclasses to read and&#10;     * verify their own stream headers. It reads and verifies the magic number&#10;     * and version number.&#10;     *&#10;     * @throws  IOException if there are I/O errors while reading from the&#10;     *          underlying <code>InputStream</code>&#10;     * @throws  StreamCorruptedException if control information in the stream&#10;     *          is inconsistent&#10;     "
  ]
  node [
    id 2314
    label "protected ObjectStreamClass readClassDescriptor() throws IOException, ClassNotFoundException"
    type "method"
    comment "&#10;     * Read a class descriptor from the serialization stream.  This method is&#10;     * called when the ObjectInputStream expects a class descriptor as the next&#10;     * item in the serialization stream.  Subclasses of ObjectInputStream may&#10;     * override this method to read in class descriptors that have been written&#10;     * in non-standard formats (by subclasses of ObjectOutputStream which have&#10;     * overridden the <code>writeClassDescriptor</code> method).  By default,&#10;     * this method reads class descriptors according to the format defined in&#10;     * the Object Serialization specification.&#10;     *&#10;     * @return  the class descriptor read&#10;     * @throws  IOException If an I/O error has occurred.&#10;     * @throws  ClassNotFoundException If the Class of a serialized object used&#10;     *          in the class descriptor representation cannot be found&#10;     * @see java.io.ObjectOutputStream#writeClassDescriptor(java.io.ObjectStreamClass)&#10;     * @since 1.3&#10;     "
  ]
  node [
    id 2315
    label "public int read(byte[] buf, int off, int len) throws IOException"
    type "method"
    comment "&#10;     * Reads into an array of bytes.  This method will block until some input&#10;     * is available. Consider using java.io.DataInputStream.readFully to read&#10;     * exactly 'length' bytes.&#10;     *&#10;     * @param   buf the buffer into which the data is read&#10;     * @param   off the start offset of the data&#10;     * @param   len the maximum number of bytes read&#10;     * @return  the actual number of bytes read, -1 is returned when the end of&#10;     *          the stream is reached.&#10;     * @throws  IOException If an I/O error has occurred.&#10;     * @see java.io.DataInputStream#readFully(byte[],int,int)&#10;     "
  ]
  node [
    id 2316
    label "public boolean readBoolean() throws IOException"
    type "method"
    comment "&#10;     * Reads in a boolean.&#10;     *&#10;     * @return  the boolean read.&#10;     * @throws  EOFException If end of file is reached.&#10;     * @throws  IOException If other I/O error has occurred.&#10;     "
  ]
  node [
    id 2317
    label "public byte readByte() throws IOException"
    type "method"
    comment "&#10;     * Reads an 8 bit byte.&#10;     *&#10;     * @return  the 8 bit byte read.&#10;     * @throws  EOFException If end of file is reached.&#10;     * @throws  IOException If other I/O error has occurred.&#10;     "
  ]
  node [
    id 2318
    label "public int readUnsignedByte() throws IOException"
    type "method"
    comment "&#10;     * Reads an unsigned 8 bit byte.&#10;     *&#10;     * @return  the 8 bit byte read.&#10;     * @throws  EOFException If end of file is reached.&#10;     * @throws  IOException If other I/O error has occurred.&#10;     "
  ]
  node [
    id 2319
    label "public char readChar() throws IOException"
    type "method"
    comment "&#10;     * Reads a 16 bit char.&#10;     *&#10;     * @return  the 16 bit char read.&#10;     * @throws  EOFException If end of file is reached.&#10;     * @throws  IOException If other I/O error has occurred.&#10;     "
  ]
  node [
    id 2320
    label "public short readShort() throws IOException"
    type "method"
    comment "&#10;     * Reads a 16 bit short.&#10;     *&#10;     * @return  the 16 bit short read.&#10;     * @throws  EOFException If end of file is reached.&#10;     * @throws  IOException If other I/O error has occurred.&#10;     "
  ]
  node [
    id 2321
    label "public int readUnsignedShort() throws IOException"
    type "method"
    comment "&#10;     * Reads an unsigned 16 bit short.&#10;     *&#10;     * @return  the 16 bit short read.&#10;     * @throws  EOFException If end of file is reached.&#10;     * @throws  IOException If other I/O error has occurred.&#10;     "
  ]
  node [
    id 2322
    label "public int readInt() throws IOException"
    type "method"
    comment "&#10;     * Reads a 32 bit int.&#10;     *&#10;     * @return  the 32 bit integer read.&#10;     * @throws  EOFException If end of file is reached.&#10;     * @throws  IOException If other I/O error has occurred.&#10;     "
  ]
  node [
    id 2323
    label "public long readLong() throws IOException"
    type "method"
    comment "&#10;     * Reads a 64 bit long.&#10;     *&#10;     * @return  the read 64 bit long.&#10;     * @throws  EOFException If end of file is reached.&#10;     * @throws  IOException If other I/O error has occurred.&#10;     "
  ]
  node [
    id 2324
    label "public float readFloat() throws IOException"
    type "method"
    comment "&#10;     * Reads a 32 bit float.&#10;     *&#10;     * @return  the 32 bit float read.&#10;     * @throws  EOFException If end of file is reached.&#10;     * @throws  IOException If other I/O error has occurred.&#10;     "
  ]
  node [
    id 2325
    label "public double readDouble() throws IOException"
    type "method"
    comment "&#10;     * Reads a 64 bit double.&#10;     *&#10;     * @return  the 64 bit double read.&#10;     * @throws  EOFException If end of file is reached.&#10;     * @throws  IOException If other I/O error has occurred.&#10;     "
  ]
  node [
    id 2326
    label "public void readFully(byte[] buf) throws IOException"
    type "method"
    comment "&#10;     * Reads bytes, blocking until all bytes are read.&#10;     *&#10;     * @param   buf the buffer into which the data is read&#10;     * @throws  EOFException If end of file is reached.&#10;     * @throws  IOException If other I/O error has occurred.&#10;     "
  ]
  node [
    id 2327
    label "public void readFully(byte[] buf, int off, int len) throws IOException"
    type "method"
    comment "&#10;     * Reads bytes, blocking until all bytes are read.&#10;     *&#10;     * @param   buf the buffer into which the data is read&#10;     * @param   off the start offset of the data&#10;     * @param   len the maximum number of bytes to read&#10;     * @throws  EOFException If end of file is reached.&#10;     * @throws  IOException If other I/O error has occurred.&#10;     "
  ]
  node [
    id 2328
    label "public int skipBytes(int len) throws IOException"
    type "method"
    comment "&#10;     * Skips bytes.&#10;     *&#10;     * @param   len the number of bytes to be skipped&#10;     * @return  the actual number of bytes skipped.&#10;     * @throws  IOException If an I/O error has occurred.&#10;     "
  ]
  node [
    id 2329
    label "public String readUTF() throws IOException"
    type "method"
    comment "&#10;     * Reads a String in&#10;     * <a href=&#34;DataInput.html#modified-utf-8&#34;>modified UTF-8</a>&#10;     * format.&#10;     *&#10;     * @return  the String.&#10;     * @throws  IOException if there are I/O errors while reading from the&#10;     *          underlying <code>InputStream</code>&#10;     * @throws  UTFDataFormatException if read bytes do not represent a valid&#10;     *          modified UTF-8 encoding of a string&#10;     "
  ]
  node [
    id 2330
    label "private void checkArray(Class<?> arrayType, int arrayLength) throws InvalidClassException"
    type "method"
    comment "&#10;     * Checks the given array type and length to ensure that creation of such&#10;     * an array is permitted by this ObjectInputStream. The arrayType argument&#10;     * must represent an actual array type.&#10;     *&#10;     * This private method is called via SharedSecrets.&#10;     *&#10;     * @param arrayType the array type&#10;     * @param arrayLength the array length&#10;     * @throws NullPointerException if arrayType is null&#10;     * @throws IllegalArgumentException if arrayType isn't actually an array type&#10;     * @throws NegativeArraySizeException if arrayLength is negative&#10;     * @throws InvalidClassException if the filter rejects creation&#10;     "
  ]
  node [
    id 2331
    label "private Object readObject0(boolean unshared) throws IOException"
    type "method"
    comment "&#10;     * Underlying readObject implementation.&#10;     "
  ]
  node [
    id 2332
    label "private Object checkResolve(Object obj) throws IOException"
    type "method"
    comment "&#10;     * If resolveObject has been enabled and given object does not have an&#10;     * exception associated with it, calls resolveObject to determine&#10;     * replacement for object, and updates handle table accordingly.  Returns&#10;     * replacement object, or echoes provided object if no replacement&#10;     * occurred.  Expects that passHandle is set to given object's handle prior&#10;     * to calling this method.&#10;     "
  ]
  node [
    id 2333
    label " String readTypeString() throws IOException"
    type "method"
    comment "&#10;     * Reads string without allowing it to be replaced in stream.  Called from&#10;     * within ObjectStreamClass.read().&#10;     "
  ]
  node [
    id 2334
    label "private Object readNull() throws IOException"
    type "method"
    comment "&#10;     * Reads in null code, sets passHandle to NULL_HANDLE and returns null.&#10;     "
  ]
  node [
    id 2335
    label "private Object readHandle(boolean unshared) throws IOException"
    type "method"
    comment "&#10;     * Reads in object handle, sets passHandle to the read handle, and returns&#10;     * object associated with the handle.&#10;     "
  ]
  node [
    id 2336
    label "private Class<?> readClass(boolean unshared) throws IOException"
    type "method"
    comment "&#10;     * Reads in and returns class object.  Sets passHandle to class object's&#10;     * assigned handle.  Returns null if class is unresolvable (in which case a&#10;     * ClassNotFoundException will be associated with the class' handle in the&#10;     * handle table).&#10;     "
  ]
  node [
    id 2337
    label "private ObjectStreamClass readClassDesc(boolean unshared) throws IOException"
    type "method"
    comment "&#10;     * Reads in and returns (possibly null) class descriptor.  Sets passHandle&#10;     * to class descriptor's assigned handle.  If class descriptor cannot be&#10;     * resolved to a class in the local VM, a ClassNotFoundException is&#10;     * associated with the class descriptor's handle.&#10;     "
  ]
  node [
    id 2338
    label "private ObjectStreamClass readProxyDesc(boolean unshared) throws IOException"
    type "method"
    comment "&#10;     * Reads in and returns class descriptor for a dynamic proxy class.  Sets&#10;     * passHandle to proxy class descriptor's assigned handle.  If proxy class&#10;     * descriptor cannot be resolved to a class in the local VM, a&#10;     * ClassNotFoundException is associated with the descriptor's handle.&#10;     "
  ]
  node [
    id 2339
    label "private ObjectStreamClass readNonProxyDesc(boolean unshared) throws IOException"
    type "method"
    comment "&#10;     * Reads in and returns class descriptor for a class that is not a dynamic&#10;     * proxy class.  Sets passHandle to class descriptor's assigned handle.  If&#10;     * class descriptor cannot be resolved to a class in the local VM, a&#10;     * ClassNotFoundException is associated with the descriptor's handle.&#10;     "
  ]
  node [
    id 2340
    label "private String readString(boolean unshared) throws IOException"
    type "method"
    comment "&#10;     * Reads in and returns new string.  Sets passHandle to new string's&#10;     * assigned handle.&#10;     "
  ]
  node [
    id 2341
    label "private Object readArray(boolean unshared) throws IOException"
    type "method"
    comment "&#10;     * Reads in and returns array object, or null if array class is&#10;     * unresolvable.  Sets passHandle to array's assigned handle.&#10;     "
  ]
  node [
    id 2342
    label "private Enum<?> readEnum(boolean unshared) throws IOException"
    type "method"
    comment "&#10;     * Reads in and returns enum constant, or null if enum type is&#10;     * unresolvable.  Sets passHandle to enum constant's assigned handle.&#10;     "
  ]
  node [
    id 2343
    label "private Object readOrdinaryObject(boolean unshared) throws IOException"
    type "method"
    comment "&#10;     * Reads and returns &#34;ordinary&#34; (i.e., not a String, Class,&#10;     * ObjectStreamClass, array, or enum constant) object, or null if object's&#10;     * class is unresolvable (in which case a ClassNotFoundException will be&#10;     * associated with object's handle).  Sets passHandle to object's assigned&#10;     * handle.&#10;     "
  ]
  node [
    id 2344
    label "private void readExternalData(Externalizable obj, ObjectStreamClass desc) throws IOException"
    type "method"
    comment "&#10;     * If obj is non-null, reads externalizable data by invoking readExternal()&#10;     * method of obj; otherwise, attempts to skip over externalizable data.&#10;     * Expects that passHandle is set to obj's handle before this method is&#10;     * called.&#10;     "
  ]
  node [
    id 2345
    label "private Object readRecord(ObjectStreamClass desc) throws IOException"
    type "method"
    comment " Reads a record. "
  ]
  node [
    id 2346
    label "private void readSerialData(Object obj, ObjectStreamClass desc) throws IOException"
    type "method"
    comment "&#10;     * Reads (or attempts to skip, if obj is null or is tagged with a&#10;     * ClassNotFoundException) instance data for each serializable class of&#10;     * object in stream, from superclass to subclass.  Expects that passHandle&#10;     * is set to obj's handle before this method is called.&#10;     "
  ]
  node [
    id 2347
    label "private void skipCustomData() throws IOException"
    type "method"
    comment "&#10;     * Skips over all block data and objects until TC_ENDBLOCKDATA is&#10;     * encountered.&#10;     "
  ]
  node [
    id 2348
    label "private void defaultReadFields(Object obj, ObjectStreamClass desc) throws IOException"
    type "method"
    comment "&#10;     * Reads in values of serializable fields declared by given class&#10;     * descriptor.  If obj is non-null, sets field values in obj.  Expects that&#10;     * passHandle is set to obj's handle before this method is called.&#10;     "
  ]
  node [
    id 2349
    label "private IOException readFatalException() throws IOException"
    type "method"
    comment "&#10;     * Reads in and returns IOException that caused serialization to abort.&#10;     * All stream state is discarded prior to reading in fatal exception.  Sets&#10;     * passHandle to fatal exception's handle.&#10;     "
  ]
  node [
    id 2350
    label "private void handleReset() throws StreamCorruptedException"
    type "method"
    comment "&#10;     * If recursion depth is 0, clears internal data structures; otherwise,&#10;     * throws a StreamCorruptedException.  This method is called when a&#10;     * TC_RESET typecode is encountered.&#10;     "
  ]
  node [
    id 2351
    label "private static native void bytesToFloats(byte[] src, int srcpos, float[] dst, int dstpos, int nfloats)"
    type "method"
    comment " REMIND: remove once hotspot inlines Float.intBitsToFloat"
  ]
  node [
    id 2352
    label "private static native void bytesToDoubles(byte[] src, int srcpos, double[] dst, int dstpos, int ndoubles)"
    type "method"
    comment " REMIND: remove once hotspot inlines Double.longBitsToDouble"
  ]
  node [
    id 2353
    label "private static ClassLoader latestUserDefinedLoader()"
    type "method"
    comment "&#10;     * Returns the first non-null class loader (not counting class loaders of&#10;     * generated reflection implementation classes) up the execution stack, or&#10;     * null if only code from the null class loader is on the stack.  This&#10;     * method is also called via reflection by the following RMI-IIOP class:&#10;     *&#10;     *     com.sun.corba.se.internal.util.JDKClassLoader&#10;     *&#10;     * This method should not be removed or its signature changed without&#10;     * corresponding modifications to the above class.&#10;     "
  ]
  node [
    id 2354
    label "private static Object cloneArray(Object array)"
    type "method"
    comment "&#10;     * Method for cloning arrays in case of using unsharing reading&#10;     "
  ]
  node [
    id 2355
    label "private static int toLower(char c)"
    type "method"
    comment " US-ASCII only"
  ]
  node [
    id 2356
    label "private static int toUpper(char c)"
    type "method"
    comment " US-ASCII only"
  ]
  node [
    id 2357
    label "private static boolean equalIgnoringCase(String s, String t)"
    type "method"
    comment " US-ASCII only"
  ]
  node [
    id 2358
    label "private static int hashIgnoringCase(int hash, String s)"
    type "method"
    comment " US-ASCII only"
  ]
  node [
    id 2359
    label "private static int compareIgnoringCase(String s, String t)"
    type "method"
    comment " US-ASCII only"
  ]
  node [
    id 2360
    label "private static String resolvePath(String base, String child, boolean absolute)"
    type "method"
    comment " RFC2396 5.2 (6)"
  ]
  node [
    id 2361
    label "private static URI resolve(URI base, URI child)"
    type "method"
    comment " RFC2396 5.2"
  ]
  node [
    id 2362
    label "private static void removeDots(char[] path, int[] segs, boolean removeLeading)"
    type "method"
    comment " private static void removeDots(char[] path, int[] segs) {"
  ]
  node [
    id 2363
    label "private static long lowMask(String chars)"
    type "method"
    comment " Compute the low-order mask for the characters in the given string"
  ]
  node [
    id 2364
    label "private static long highMask(String chars)"
    type "method"
    comment " Compute the high-order mask for the characters in the given string"
  ]
  node [
    id 2365
    label "private static long lowMask(char first, char last)"
    type "method"
    comment " between first and last, inclusive"
  ]
  node [
    id 2366
    label "private static long highMask(char first, char last)"
    type "method"
    comment " between first and last, inclusive"
  ]
  node [
    id 2367
    label "private static boolean match(char c, long lowMask, long highMask)"
    type "method"
    comment " Tell whether the given character is permitted by the given mask pair"
  ]
  node [
    id 2368
    label "public FileSystem newFileSystem(Path path, Map<String, ?> env) throws IOException"
    type "method"
    comment "&#10;     * Constructs a new {@code FileSystem} to access the contents of a file as a&#10;     * file system.&#10;     *&#10;     * <p> This method is intended for specialized providers of pseudo file&#10;     * systems where the contents of one or more files is treated as a file&#10;     * system. The {@code env} parameter is a map of provider specific properties&#10;     * to configure the file system.&#10;     *&#10;     * <p> If this provider does not support the creation of such file systems&#10;     * or if the provider does not recognize the file type of the given file then&#10;     * it throws {@code UnsupportedOperationException}. The default implementation&#10;     * of this method throws {@code UnsupportedOperationException}.&#10;     *&#10;     * @param   path&#10;     *          The path to the file&#10;     * @param   env&#10;     *          A map of provider specific properties to configure the file system;&#10;     *          may be empty&#10;     *&#10;     * @return  A new file system&#10;     *&#10;     * @throws  UnsupportedOperationException&#10;     *          If this provider does not support access to the contents as a&#10;     *          file system or it does not recognize the file type of the&#10;     *          given file&#10;     * @throws  IllegalArgumentException&#10;     *          If the {@code env} parameter does not contain properties required&#10;     *          by the provider, or a property value is invalid&#10;     * @throws  IOException&#10;     *          If an I/O error occurs&#10;     * @throws  SecurityException&#10;     *          If a security manager is installed and it denies an unspecified&#10;     *          permission.&#10;     "
  ]
  node [
    id 2369
    label "public InputStream newInputStream(Path path, OpenOption... options) throws IOException"
    type "method"
    comment "&#10;     * Opens a file, returning an input stream to read from the file. This&#10;     * method works in exactly the manner specified by the {@link&#10;     * Files#newInputStream} method.&#10;     *&#10;     * <p> The default implementation of this method opens a channel to the file&#10;     * as if by invoking the {@link #newByteChannel} method and constructs a&#10;     * stream that reads bytes from the channel. This method should be overridden&#10;     * where appropriate.&#10;     *&#10;     * @param   path&#10;     *          the path to the file to open&#10;     * @param   options&#10;     *          options specifying how the file is opened&#10;     *&#10;     * @return  a new input stream&#10;     *&#10;     * @throws  IllegalArgumentException&#10;     *          if an invalid combination of options is specified&#10;     * @throws  UnsupportedOperationException&#10;     *          if an unsupported option is specified&#10;     * @throws  IOException&#10;     *          if an I/O error occurs&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager is&#10;     *          installed, the {@link SecurityManager#checkRead(String) checkRead}&#10;     *          method is invoked to check read access to the file.&#10;     "
  ]
  node [
    id 2370
    label "newInputStream"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2371
    label "newByteChannel"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2372
    label "public OutputStream newOutputStream(Path path, OpenOption... options) throws IOException"
    type "method"
    comment "&#10;     * Opens or creates a file, returning an output stream that may be used to&#10;     * write bytes to the file. This method works in exactly the manner&#10;     * specified by the {@link Files#newOutputStream} method.&#10;     *&#10;     * <p> The default implementation of this method opens a channel to the file&#10;     * as if by invoking the {@link #newByteChannel} method and constructs a&#10;     * stream that writes bytes to the channel. This method should be overridden&#10;     * where appropriate.&#10;     *&#10;     * @param   path&#10;     *          the path to the file to open or create&#10;     * @param   options&#10;     *          options specifying how the file is opened&#10;     *&#10;     * @return  a new output stream&#10;     *&#10;     * @throws  IllegalArgumentException&#10;     *          if {@code options} contains an invalid combination of options&#10;     * @throws  UnsupportedOperationException&#10;     *          if an unsupported option is specified&#10;     * @throws  IOException&#10;     *          if an I/O error occurs&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager is&#10;     *          installed, the {@link SecurityManager#checkWrite(String) checkWrite}&#10;     *          method is invoked to check write access to the file. The {@link&#10;     *          SecurityManager#checkDelete(String) checkDelete} method is&#10;     *          invoked to check delete access if the file is opened with the&#10;     *          {@code DELETE_ON_CLOSE} option.&#10;     "
  ]
  node [
    id 2373
    label "newOutputStream"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2374
    label "public FileChannel newFileChannel(Path path, Set<? extends OpenOption> options, FileAttribute<?>... attrs) throws IOException"
    type "method"
    comment "&#10;     * Opens or creates a file for reading and/or writing, returning a file&#10;     * channel to access the file. This method works in exactly the manner&#10;     * specified by the {@link FileChannel#open(Path,Set,FileAttribute[])&#10;     * FileChannel.open} method. A provider that does not support all the&#10;     * features required to construct a file channel throws {@code&#10;     * UnsupportedOperationException}. The default provider is required to&#10;     * support the creation of file channels. When not overridden, the default&#10;     * implementation throws {@code UnsupportedOperationException}.&#10;     *&#10;     * @param   path&#10;     *          the path of the file to open or create&#10;     * @param   options&#10;     *          options specifying how the file is opened&#10;     * @param   attrs&#10;     *          an optional list of file attributes to set atomically when&#10;     *          creating the file&#10;     *&#10;     * @return  a new file channel&#10;     *&#10;     * @throws  IllegalArgumentException&#10;     *          If the set contains an invalid combination of options&#10;     * @throws  UnsupportedOperationException&#10;     *          If this provider that does not support creating file channels,&#10;     *          or an unsupported open option or file attribute is specified&#10;     * @throws  IOException&#10;     *          If an I/O error occurs&#10;     * @throws  SecurityException&#10;     *          In the case of the default file system, the {@link&#10;     *          SecurityManager#checkRead(String)} method is invoked to check&#10;     *          read access if the file is opened for reading. The {@link&#10;     *          SecurityManager#checkWrite(String)} method is invoked to check&#10;     *          write access if the file is opened for writing&#10;     "
  ]
  node [
    id 2375
    label "public AsynchronousFileChannel newAsynchronousFileChannel(Path path, Set<? extends OpenOption> options, ExecutorService executor, FileAttribute<?>... attrs) throws IOException"
    type "method"
    comment "&#10;     * Opens or creates a file for reading and/or writing, returning an&#10;     * asynchronous file channel to access the file. This method works in&#10;     * exactly the manner specified by the {@link&#10;     * AsynchronousFileChannel#open(Path,Set,ExecutorService,FileAttribute[])&#10;     * AsynchronousFileChannel.open} method.&#10;     * A provider that does not support all the features required to construct&#10;     * an asynchronous file channel throws {@code UnsupportedOperationException}.&#10;     * The default provider is required to support the creation of asynchronous&#10;     * file channels. When not overridden, the default implementation of this&#10;     * method throws {@code UnsupportedOperationException}.&#10;     *&#10;     * @param   path&#10;     *          the path of the file to open or create&#10;     * @param   options&#10;     *          options specifying how the file is opened&#10;     * @param   executor&#10;     *          the thread pool or {@code null} to associate the channel with&#10;     *          the default thread pool&#10;     * @param   attrs&#10;     *          an optional list of file attributes to set atomically when&#10;     *          creating the file&#10;     *&#10;     * @return  a new asynchronous file channel&#10;     *&#10;     * @throws  IllegalArgumentException&#10;     *          If the set contains an invalid combination of options&#10;     * @throws  UnsupportedOperationException&#10;     *          If this provider that does not support creating asynchronous file&#10;     *          channels, or an unsupported open option or file attribute is&#10;     *          specified&#10;     * @throws  IOException&#10;     *          If an I/O error occurs&#10;     * @throws  SecurityException&#10;     *          In the case of the default file system, the {@link&#10;     *          SecurityManager#checkRead(String)} method is invoked to check&#10;     *          read access if the file is opened for reading. The {@link&#10;     *          SecurityManager#checkWrite(String)} method is invoked to check&#10;     *          write access if the file is opened for writing&#10;     "
  ]
  node [
    id 2376
    label "public abstract SeekableByteChannel newByteChannel(Path path, Set<? extends OpenOption> options, FileAttribute<?>... attrs) throws IOException"
    type "method"
    comment "&#10;     * Opens or creates a file, returning a seekable byte channel to access the&#10;     * file. This method works in exactly the manner specified by the {@link&#10;     * Files#newByteChannel(Path,Set,FileAttribute[])} method.&#10;     *&#10;     * @param   path&#10;     *          the path to the file to open or create&#10;     * @param   options&#10;     *          options specifying how the file is opened&#10;     * @param   attrs&#10;     *          an optional list of file attributes to set atomically when&#10;     *          creating the file&#10;     *&#10;     * @return  a new seekable byte channel&#10;     *&#10;     * @throws  IllegalArgumentException&#10;     *          if the set contains an invalid combination of options&#10;     * @throws  UnsupportedOperationException&#10;     *          if an unsupported open option is specified or the array contains&#10;     *          attributes that cannot be set atomically when creating the file&#10;     * @throws  FileAlreadyExistsException&#10;     *          if a file of that name already exists and the {@link&#10;     *          StandardOpenOption#CREATE_NEW CREATE_NEW} option is specified&#10;     *          <i>(optional specific exception)</i>&#10;     * @throws  IOException&#10;     *          if an I/O error occurs&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager is&#10;     *          installed, the {@link SecurityManager#checkRead(String) checkRead}&#10;     *          method is invoked to check read access to the path if the file is&#10;     *          opened for reading. The {@link SecurityManager#checkWrite(String)&#10;     *          checkWrite} method is invoked to check write access to the path&#10;     *          if the file is opened for writing. The {@link&#10;     *          SecurityManager#checkDelete(String) checkDelete} method is&#10;     *          invoked to check delete access if the file is opened with the&#10;     *          {@code DELETE_ON_CLOSE} option.&#10;     "
  ]
  node [
    id 2377
    label "public abstract DirectoryStream<Path> newDirectoryStream(Path dir, DirectoryStream.Filter<? super Path> filter) throws IOException"
    type "method"
    comment "&#10;     * Opens a directory, returning a {@code DirectoryStream} to iterate over&#10;     * the entries in the directory. This method works in exactly the manner&#10;     * specified by the {@link&#10;     * Files#newDirectoryStream(java.nio.file.Path, java.nio.file.DirectoryStream.Filter)}&#10;     * method.&#10;     *&#10;     * @param   dir&#10;     *          the path to the directory&#10;     * @param   filter&#10;     *          the directory stream filter&#10;     *&#10;     * @return  a new and open {@code DirectoryStream} object&#10;     *&#10;     * @throws  NotDirectoryException&#10;     *          if the file could not otherwise be opened because it is not&#10;     *          a directory <i>(optional specific exception)</i>&#10;     * @throws  IOException&#10;     *          if an I/O error occurs&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager is&#10;     *          installed, the {@link SecurityManager#checkRead(String) checkRead}&#10;     *          method is invoked to check read access to the directory.&#10;     "
  ]
  node [
    id 2378
    label "newDirectoryStream(java.nio.file.Path"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2379
    label "public abstract void createDirectory(Path dir, FileAttribute<?>... attrs) throws IOException"
    type "method"
    comment "&#10;     * Creates a new directory. This method works in exactly the manner&#10;     * specified by the {@link Files#createDirectory} method.&#10;     *&#10;     * @param   dir&#10;     *          the directory to create&#10;     * @param   attrs&#10;     *          an optional list of file attributes to set atomically when&#10;     *          creating the directory&#10;     *&#10;     * @throws  UnsupportedOperationException&#10;     *          if the array contains an attribute that cannot be set atomically&#10;     *          when creating the directory&#10;     * @throws  FileAlreadyExistsException&#10;     *          if a directory could not otherwise be created because a file of&#10;     *          that name already exists <i>(optional specific exception)</i>&#10;     * @throws  IOException&#10;     *          if an I/O error occurs or the parent directory does not exist&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager is&#10;     *          installed, the {@link SecurityManager#checkWrite(String) checkWrite}&#10;     *          method is invoked to check write access to the new directory.&#10;     "
  ]
  node [
    id 2380
    label "public void createSymbolicLink(Path link, Path target, FileAttribute<?>... attrs) throws IOException"
    type "method"
    comment "&#10;     * Creates a symbolic link to a target. This method works in exactly the&#10;     * manner specified by the {@link Files#createSymbolicLink} method.&#10;     *&#10;     * <p> The default implementation of this method throws {@code&#10;     * UnsupportedOperationException}.&#10;     *&#10;     * @param   link&#10;     *          the path of the symbolic link to create&#10;     * @param   target&#10;     *          the target of the symbolic link&#10;     * @param   attrs&#10;     *          the array of attributes to set atomically when creating the&#10;     *          symbolic link&#10;     *&#10;     * @throws  UnsupportedOperationException&#10;     *          if the implementation does not support symbolic links or the&#10;     *          array contains an attribute that cannot be set atomically when&#10;     *          creating the symbolic link&#10;     * @throws  FileAlreadyExistsException&#10;     *          if a file with the name already exists <i>(optional specific&#10;     *          exception)</i>&#10;     * @throws  IOException&#10;     *          if an I/O error occurs&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager&#10;     *          is installed, it denies {@link LinkPermission}<tt>(&#34;symbolic&#34;)</tt>&#10;     *          or its {@link SecurityManager#checkWrite(String) checkWrite}&#10;     *          method denies write access to the path of the symbolic link.&#10;     "
  ]
  node [
    id 2381
    label "createSymbolicLink"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2382
    label "LinkPermission"
  ]
  node [
    id 2383
    label "public void createLink(Path link, Path existing) throws IOException"
    type "method"
    comment "&#10;     * Creates a new link (directory entry) for an existing file. This method&#10;     * works in exactly the manner specified by the {@link Files#createLink}&#10;     * method.&#10;     *&#10;     * <p> The default implementation of this method throws {@code&#10;     * UnsupportedOperationException}.&#10;     *&#10;     * @param   link&#10;     *          the link (directory entry) to create&#10;     * @param   existing&#10;     *          a path to an existing file&#10;     *&#10;     * @throws  UnsupportedOperationException&#10;     *          if the implementation does not support adding an existing file&#10;     *          to a directory&#10;     * @throws  FileAlreadyExistsException&#10;     *          if the entry could not otherwise be created because a file of&#10;     *          that name already exists <i>(optional specific exception)</i>&#10;     * @throws  IOException&#10;     *          if an I/O error occurs&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager&#10;     *          is installed, it denies {@link LinkPermission}<tt>(&#34;hard&#34;)</tt>&#10;     *          or its {@link SecurityManager#checkWrite(String) checkWrite}&#10;     *          method denies write access to either the  link or the&#10;     *          existing file.&#10;     "
  ]
  node [
    id 2384
    label "createLink"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2385
    label "public abstract void delete(Path path) throws IOException"
    type "method"
    comment "&#10;     * Deletes a file. This method works in exactly the  manner specified by the&#10;     * {@link Files#delete} method.&#10;     *&#10;     * @param   path&#10;     *          the path to the file to delete&#10;     *&#10;     * @throws  NoSuchFileException&#10;     *          if the file does not exist <i>(optional specific exception)</i>&#10;     * @throws  DirectoryNotEmptyException&#10;     *          if the file is a directory and could not otherwise be deleted&#10;     *          because the directory is not empty <i>(optional specific&#10;     *          exception)</i>&#10;     * @throws  IOException&#10;     *          if an I/O error occurs&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager is&#10;     *          installed, the {@link SecurityManager#checkDelete(String)} method&#10;     *          is invoked to check delete access to the file&#10;     "
  ]
  node [
    id 2386
    label "delete"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2387
    label "public boolean deleteIfExists(Path path) throws IOException"
    type "method"
    comment "&#10;     * Deletes a file if it exists. This method works in exactly the manner&#10;     * specified by the {@link Files#deleteIfExists} method.&#10;     *&#10;     * <p> The default implementation of this method simply invokes {@link&#10;     * #delete} ignoring the {@code NoSuchFileException} when the file does not&#10;     * exist. It may be overridden where appropriate.&#10;     *&#10;     * @param   path&#10;     *          the path to the file to delete&#10;     *&#10;     * @return  {@code true} if the file was deleted by this method; {@code&#10;     *          false} if the file could not be deleted because it did not&#10;     *          exist&#10;     *&#10;     * @throws  DirectoryNotEmptyException&#10;     *          if the file is a directory and could not otherwise be deleted&#10;     *          because the directory is not empty <i>(optional specific&#10;     *          exception)</i>&#10;     * @throws  IOException&#10;     *          if an I/O error occurs&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager is&#10;     *          installed, the {@link SecurityManager#checkDelete(String)} method&#10;     *          is invoked to check delete access to the file&#10;     "
  ]
  node [
    id 2388
    label "deleteIfExists"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2389
    label "public Path readSymbolicLink(Path link) throws IOException"
    type "method"
    comment "&#10;     * Reads the target of a symbolic link. This method works in exactly the&#10;     * manner specified by the {@link Files#readSymbolicLink} method.&#10;     *&#10;     * <p> The default implementation of this method throws {@code&#10;     * UnsupportedOperationException}.&#10;     *&#10;     * @param   link&#10;     *          the path to the symbolic link&#10;     *&#10;     * @return  The target of the symbolic link&#10;     *&#10;     * @throws  UnsupportedOperationException&#10;     *          if the implementation does not support symbolic links&#10;     * @throws  NotLinkException&#10;     *          if the target could otherwise not be read because the file&#10;     *          is not a symbolic link <i>(optional specific exception)</i>&#10;     * @throws  IOException&#10;     *          if an I/O error occurs&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager&#10;     *          is installed, it checks that {@code FilePermission} has been&#10;     *          granted with the &#34;{@code readlink}&#34; action to read the link.&#10;     "
  ]
  node [
    id 2390
    label "readSymbolicLink"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2391
    label "public abstract void copy(Path source, Path target, CopyOption... options) throws IOException"
    type "method"
    comment "&#10;     * Copy a file to a target file. This method works in exactly the manner&#10;     * specified by the {@link Files#copy(Path,Path,CopyOption[])} method&#10;     * except that both the source and target paths must be associated with&#10;     * this provider.&#10;     *&#10;     * @param   source&#10;     *          the path to the file to copy&#10;     * @param   target&#10;     *          the path to the target file&#10;     * @param   options&#10;     *          options specifying how the copy should be done&#10;     *&#10;     * @throws  UnsupportedOperationException&#10;     *          if the array contains a copy option that is not supported&#10;     * @throws  FileAlreadyExistsException&#10;     *          if the target file exists but cannot be replaced because the&#10;     *          {@code REPLACE_EXISTING} option is not specified <i>(optional&#10;     *          specific exception)</i>&#10;     * @throws  DirectoryNotEmptyException&#10;     *          the {@code REPLACE_EXISTING} option is specified but the file&#10;     *          cannot be replaced because it is a non-empty directory&#10;     *          <i>(optional specific exception)</i>&#10;     * @throws  IOException&#10;     *          if an I/O error occurs&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager is&#10;     *          installed, the {@link SecurityManager#checkRead(String) checkRead}&#10;     *          method is invoked to check read access to the source file, the&#10;     *          {@link SecurityManager#checkWrite(String) checkWrite} is invoked&#10;     *          to check write access to the target file. If a symbolic link is&#10;     *          copied the security manager is invoked to check {@link&#10;     *          LinkPermission}{@code (&#34;symbolic&#34;)}.&#10;     "
  ]
  node [
    id 2392
    label "copy(Path"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2393
    label "public abstract void move(Path source, Path target, CopyOption... options) throws IOException"
    type "method"
    comment "&#10;     * Move or rename a file to a target file. This method works in exactly the&#10;     * manner specified by the {@link Files#move} method except that both the&#10;     * source and target paths must be associated with this provider.&#10;     *&#10;     * @param   source&#10;     *          the path to the file to move&#10;     * @param   target&#10;     *          the path to the target file&#10;     * @param   options&#10;     *          options specifying how the move should be done&#10;     *&#10;     * @throws  UnsupportedOperationException&#10;     *          if the array contains a copy option that is not supported&#10;     * @throws  FileAlreadyExistsException&#10;     *          if the target file exists but cannot be replaced because the&#10;     *          {@code REPLACE_EXISTING} option is not specified <i>(optional&#10;     *          specific exception)</i>&#10;     * @throws  DirectoryNotEmptyException&#10;     *          the {@code REPLACE_EXISTING} option is specified but the file&#10;     *          cannot be replaced because it is a non-empty directory&#10;     *          <i>(optional specific exception)</i>&#10;     * @throws  AtomicMoveNotSupportedException&#10;     *          if the options array contains the {@code ATOMIC_MOVE} option but&#10;     *          the file cannot be moved as an atomic file system operation.&#10;     * @throws  IOException&#10;     *          if an I/O error occurs&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager is&#10;     *          installed, the {@link SecurityManager#checkWrite(String) checkWrite}&#10;     *          method is invoked to check write access to both the source and&#10;     *          target file.&#10;     "
  ]
  node [
    id 2394
    label "move"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2395
    label "public abstract boolean isSameFile(Path path, Path path2) throws IOException"
    type "method"
    comment "&#10;     * Tests if two paths locate the same file. This method works in exactly the&#10;     * manner specified by the {@link Files#isSameFile} method.&#10;     *&#10;     * @param   path&#10;     *          one path to the file&#10;     * @param   path2&#10;     *          the other path&#10;     *&#10;     * @return  {@code true} if, and only if, the two paths locate the same file&#10;     *&#10;     * @throws  IOException&#10;     *          if an I/O error occurs&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager is&#10;     *          installed, the {@link SecurityManager#checkRead(String) checkRead}&#10;     *          method is invoked to check read access to both files.&#10;     "
  ]
  node [
    id 2396
    label "public abstract boolean isHidden(Path path) throws IOException"
    type "method"
    comment "&#10;     * Tells whether or not a file is considered <em>hidden</em>. This method&#10;     * works in exactly the manner specified by the {@link Files#isHidden}&#10;     * method.&#10;     *&#10;     * <p> This method is invoked by the {@link Files#isHidden isHidden} method.&#10;     *&#10;     * @param   path&#10;     *          the path to the file to test&#10;     *&#10;     * @return  {@code true} if the file is considered hidden&#10;     *&#10;     * @throws  IOException&#10;     *          if an I/O error occurs&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager is&#10;     *          installed, the {@link SecurityManager#checkRead(String) checkRead}&#10;     *          method is invoked to check read access to the file.&#10;     "
  ]
  node [
    id 2397
    label "public abstract FileStore getFileStore(Path path) throws IOException"
    type "method"
    comment "&#10;     * Returns the {@link FileStore} representing the file store where a file&#10;     * is located. This method works in exactly the manner specified by the&#10;     * {@link Files#getFileStore} method.&#10;     *&#10;     * @param   path&#10;     *          the path to the file&#10;     *&#10;     * @return  the file store where the file is stored&#10;     *&#10;     * @throws  IOException&#10;     *          if an I/O error occurs&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager is&#10;     *          installed, the {@link SecurityManager#checkRead(String) checkRead}&#10;     *          method is invoked to check read access to the file, and in&#10;     *          addition it checks {@link RuntimePermission}<tt>&#10;     *          (&#34;getFileStoreAttributes&#34;)</tt>&#10;     "
  ]
  node [
    id 2398
    label "FileStore"
  ]
  node [
    id 2399
    label "getFileStore"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2400
    label "public abstract void checkAccess(Path path, AccessMode... modes) throws IOException"
    type "method"
    comment "&#10;     * Checks the existence, and optionally the accessibility, of a file.&#10;     *&#10;     * <p> This method may be used by the {@link Files#isReadable isReadable},&#10;     * {@link Files#isWritable isWritable} and {@link Files#isExecutable&#10;     * isExecutable} methods to check the accessibility of a file.&#10;     *&#10;     * <p> This method checks the existence of a file and that this Java virtual&#10;     * machine has appropriate privileges that would allow it access the file&#10;     * according to all of access modes specified in the {@code modes} parameter&#10;     * as follows:&#10;     *&#10;     * <table border=1 cellpadding=5 summary=&#34;&#34;>&#10;     * <tr> <th>Value</th> <th>Description</th> </tr>&#10;     * <tr>&#10;     *   <td> {@link AccessMode#READ READ} </td>&#10;     *   <td> Checks that the file exists and that the Java virtual machine has&#10;     *     permission to read the file. </td>&#10;     * </tr>&#10;     * <tr>&#10;     *   <td> {@link AccessMode#WRITE WRITE} </td>&#10;     *   <td> Checks that the file exists and that the Java virtual machine has&#10;     *     permission to write to the file, </td>&#10;     * </tr>&#10;     * <tr>&#10;     *   <td> {@link AccessMode#EXECUTE EXECUTE} </td>&#10;     *   <td> Checks that the file exists and that the Java virtual machine has&#10;     *     permission to {@link Runtime#exec execute} the file. The semantics&#10;     *     may differ when checking access to a directory. For example, on UNIX&#10;     *     systems, checking for {@code EXECUTE} access checks that the Java&#10;     *     virtual machine has permission to search the directory in order to&#10;     *     access file or subdirectories. </td>&#10;     * </tr>&#10;     * </table>&#10;     *&#10;     * <p> If the {@code modes} parameter is of length zero, then the existence&#10;     * of the file is checked.&#10;     *&#10;     * <p> This method follows symbolic links if the file referenced by this&#10;     * object is a symbolic link. Depending on the implementation, this method&#10;     * may require to read file permissions, access control lists, or other&#10;     * file attributes in order to check the effective access to the file. To&#10;     * determine the effective access to a file may require access to several&#10;     * attributes and so in some implementations this method may not be atomic&#10;     * with respect to other file system operations.&#10;     *&#10;     * @param   path&#10;     *          the path to the file to check&#10;     * @param   modes&#10;     *          The access modes to check; may have zero elements&#10;     *&#10;     * @throws  UnsupportedOperationException&#10;     *          an implementation is required to support checking for&#10;     *          {@code READ}, {@code WRITE}, and {@code EXECUTE} access. This&#10;     *          exception is specified to allow for the {@code Access} enum to&#10;     *          be extended in future releases.&#10;     * @throws  NoSuchFileException&#10;     *          if a file does not exist <i>(optional specific exception)</i>&#10;     * @throws  AccessDeniedException&#10;     *          the requested access would be denied or the access cannot be&#10;     *          determined because the Java virtual machine has insufficient&#10;     *          privileges or other reasons. <i>(optional specific exception)</i>&#10;     * @throws  IOException&#10;     *          if an I/O error occurs&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager is&#10;     *          installed, the {@link SecurityManager#checkRead(String) checkRead}&#10;     *          is invoked when checking read access to the file or only the&#10;     *          existence of the file, the {@link SecurityManager#checkWrite(String)&#10;     *          checkWrite} is invoked when checking write access to the file,&#10;     *          and {@link SecurityManager#checkExec(String) checkExec} is invoked&#10;     *          when checking execute access.&#10;     "
  ]
  node [
    id 2401
    label "isReadable"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2402
    label "isWritable"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2403
    label "isExecutableisExecutable"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2404
    label "EXECUTE"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2405
    label "public abstract V getFileAttributeView(Path path, Class<V> type, LinkOption... options)"
    type "method"
    comment "&#10;     * Returns a file attribute view of a given type. This method works in&#10;     * exactly the manner specified by the {@link Files#getFileAttributeView}&#10;     * method.&#10;     *&#10;     * @param   <V>&#10;     *          The {@code FileAttributeView} type&#10;     * @param   path&#10;     *          the path to the file&#10;     * @param   type&#10;     *          the {@code Class} object corresponding to the file attribute view&#10;     * @param   options&#10;     *          options indicating how symbolic links are handled&#10;     *&#10;     * @return  a file attribute view of the specified type, or {@code null} if&#10;     *          the attribute view type is not available&#10;     "
  ]
  node [
    id 2406
    label "getFileAttributeView"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2407
    label "public abstract A readAttributes(Path path, Class<A> type, LinkOption... options) throws IOException"
    type "method"
    comment "&#10;     * Reads a file's attributes as a bulk operation. This method works in&#10;     * exactly the manner specified by the {@link&#10;     * Files#readAttributes(Path,Class,LinkOption[])} method.&#10;     *&#10;     * @param   <A>&#10;     *          The {@code BasicFileAttributes} type&#10;     * @param   path&#10;     *          the path to the file&#10;     * @param   type&#10;     *          the {@code Class} of the file attributes required&#10;     *          to read&#10;     * @param   options&#10;     *          options indicating how symbolic links are handled&#10;     *&#10;     * @return  the file attributes&#10;     *&#10;     * @throws  UnsupportedOperationException&#10;     *          if an attributes of the given type are not supported&#10;     * @throws  IOException&#10;     *          if an I/O error occurs&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, a security manager is&#10;     *          installed, its {@link SecurityManager#checkRead(String) checkRead}&#10;     *          method is invoked to check read access to the file&#10;     "
  ]
  node [
    id 2408
    label "public abstract Map<String, Object> readAttributes(Path path, String attributes, LinkOption... options) throws IOException"
    type "method"
    comment "&#10;     * Reads a set of file attributes as a bulk operation. This method works in&#10;     * exactly the manner specified by the {@link&#10;     * Files#readAttributes(Path,String,LinkOption[])} method.&#10;     *&#10;     * @param   path&#10;     *          the path to the file&#10;     * @param   attributes&#10;     *          the attributes to read&#10;     * @param   options&#10;     *          options indicating how symbolic links are handled&#10;     *&#10;     * @return  a map of the attributes returned; may be empty. The map's keys&#10;     *          are the attribute names, its values are the attribute values&#10;     *&#10;     * @throws  UnsupportedOperationException&#10;     *          if the attribute view is not available&#10;     * @throws  IllegalArgumentException&#10;     *          if no attributes are specified or an unrecognized attributes is&#10;     *          specified&#10;     * @throws  IOException&#10;     *          If an I/O error occurs&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager is&#10;     *          installed, its {@link SecurityManager#checkRead(String) checkRead}&#10;     *          method denies read access to the file. If this method is invoked&#10;     *          to read security sensitive attributes then the security manager&#10;     *          may be invoke to check for additional permissions.&#10;     "
  ]
  node [
    id 2409
    label "public abstract void setAttribute(Path path, String attribute, Object value, LinkOption... options) throws IOException"
    type "method"
    comment "&#10;     * Sets the value of a file attribute. This method works in exactly the&#10;     * manner specified by the {@link Files#setAttribute} method.&#10;     *&#10;     * @param   path&#10;     *          the path to the file&#10;     * @param   attribute&#10;     *          the attribute to set&#10;     * @param   value&#10;     *          the attribute value&#10;     * @param   options&#10;     *          options indicating how symbolic links are handled&#10;     *&#10;     * @throws  UnsupportedOperationException&#10;     *          if the attribute view is not available&#10;     * @throws  IllegalArgumentException&#10;     *          if the attribute name is not specified, or is not recognized, or&#10;     *          the attribute value is of the correct type but has an&#10;     *          inappropriate value&#10;     * @throws  ClassCastException&#10;     *          If the attribute value is not of the expected type or is a&#10;     *          collection containing elements that are not of the expected&#10;     *          type&#10;     * @throws  IOException&#10;     *          If an I/O error occurs&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager is&#10;     *          installed, its {@link SecurityManager#checkWrite(String) checkWrite}&#10;     *          method denies write access to the file. If this method is invoked&#10;     *          to set security sensitive attributes then the security manager&#10;     *          may be invoked to check for additional permissions.&#10;     "
  ]
  node [
    id 2410
    label "setAttribute"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2411
    label "public static FileSystem getFileSystem(URI uri)"
    type "method"
    comment "&#10;     * Returns a reference to an existing {@code FileSystem}.&#10;     *&#10;     * <p> This method iterates over the {@link FileSystemProvider#installedProviders()&#10;     * installed} providers to locate the provider that is identified by the URI&#10;     * {@link URI#getScheme scheme} of the given URI. URI schemes are compared&#10;     * without regard to case. The exact form of the URI is highly provider&#10;     * dependent. If found, the provider's {@link FileSystemProvider#getFileSystem&#10;     * getFileSystem} method is invoked to obtain a reference to the {@code&#10;     * FileSystem}.&#10;     *&#10;     * <p> Once a file system created by this provider is {@link FileSystem#close&#10;     * closed} it is provider-dependent if this method returns a reference to&#10;     * the closed file system or throws {@link FileSystemNotFoundException}.&#10;     * If the provider allows a new file system to be created with the same URI&#10;     * as a file system it previously created then this method throws the&#10;     * exception if invoked after the file system is closed (and before a new&#10;     * instance is created by the {@link #newFileSystem newFileSystem} method).&#10;     *&#10;     * <p> If a security manager is installed then a provider implementation&#10;     * may require to check a permission before returning a reference to an&#10;     * existing file system. In the case of the {@link FileSystems#getDefault&#10;     * default} file system, no permission check is required.&#10;     *&#10;     * @param   uri  the URI to locate the file system&#10;     *&#10;     * @return  the reference to the file system&#10;     *&#10;     * @throws  IllegalArgumentException&#10;     *          if the pre-conditions for the {@code uri} parameter are not met&#10;     * @throws  FileSystemNotFoundException&#10;     *          if the file system, identified by the URI, does not exist&#10;     * @throws  ProviderNotFoundException&#10;     *          if a provider supporting the URI scheme is not installed&#10;     * @throws  SecurityException&#10;     *          if a security manager is installed and it denies an unspecified&#10;     *          permission&#10;     "
  ]
  node [
    id 2412
    label "java.nio.file.FileSystemNotFoundException"
    type "class"
    comment ""
  ]
  node [
    id 2413
    label "newFileSystem"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2414
    label "public static FileSystem newFileSystem(URI uri, Map<String, ?> env) throws IOException"
    type "method"
    comment "&#10;     * Constructs a new file system that is identified by a {@link URI}&#10;     *&#10;     * <p> This method iterates over the {@link FileSystemProvider#installedProviders()&#10;     * installed} providers to locate the provider that is identified by the URI&#10;     * {@link URI#getScheme scheme} of the given URI. URI schemes are compared&#10;     * without regard to case. The exact form of the URI is highly provider&#10;     * dependent. If found, the provider's {@link FileSystemProvider#newFileSystem(URI,Map)&#10;     * newFileSystem(URI,Map)} method is invoked to construct the new file system.&#10;     *&#10;     * <p> Once a file system is {@link FileSystem#close closed} it is&#10;     * provider-dependent if the provider allows a new file system to be created&#10;     * with the same URI as a file system it previously created.&#10;     *&#10;     * <p> <b>Usage Example:</b>&#10;     * Suppose there is a provider identified by the scheme {@code &#34;memory&#34;}&#10;     * installed:&#10;     * <pre>&#10;     *   Map&#38;lt;String,String&#38;gt; env = new HashMap&#38;lt;&#38;gt;();&#10;     *   env.put(&#34;capacity&#34;, &#34;16G&#34;);&#10;     *   env.put(&#34;blockSize&#34;, &#34;4k&#34;);&#10;     *   FileSystem fs = FileSystems.newFileSystem(URI.create(&#34;memory:///?name=logfs&#34;), env);&#10;     * </pre>&#10;     *&#10;     * @param   uri&#10;     *          the URI identifying the file system&#10;     * @param   env&#10;     *          a map of provider specific properties to configure the file system;&#10;     *          may be empty&#10;     *&#10;     * @return  a new file system&#10;     *&#10;     * @throws  IllegalArgumentException&#10;     *          if the pre-conditions for the {@code uri} parameter are not met,&#10;     *          or the {@code env} parameter does not contain properties required&#10;     *          by the provider, or a property value is invalid&#10;     * @throws  FileSystemAlreadyExistsException&#10;     *          if the file system has already been created&#10;     * @throws  ProviderNotFoundException&#10;     *          if a provider supporting the URI scheme is not installed&#10;     * @throws  IOException&#10;     *          if an I/O error occurs creating the file system&#10;     * @throws  SecurityException&#10;     *          if a security manager is installed and it denies an unspecified&#10;     *          permission required by the file system provider implementation&#10;     "
  ]
  node [
    id 2415
    label "public static FileSystem newFileSystem(URI uri, Map<String, ?> env, ClassLoader loader) throws IOException"
    type "method"
    comment "&#10;     * Constructs a new file system that is identified by a {@link URI}&#10;     *&#10;     * <p> This method first attempts to locate an installed provider in exactly&#10;     * the same manner as the {@link #newFileSystem(URI,Map) newFileSystem(URI,Map)}&#10;     * method. If none of the installed providers support the URI scheme then an&#10;     * attempt is made to locate the provider using the given class loader. If a&#10;     * provider supporting the URI scheme is located then its {@link&#10;     * FileSystemProvider#newFileSystem(URI,Map) newFileSystem(URI,Map)} is&#10;     * invoked to construct the new file system.&#10;     *&#10;     * @param   uri&#10;     *          the URI identifying the file system&#10;     * @param   env&#10;     *          a map of provider specific properties to configure the file system;&#10;     *          may be empty&#10;     * @param   loader&#10;     *          the class loader to locate the provider or {@code null} to only&#10;     *          attempt to locate an installed provider&#10;     *&#10;     * @return  a new file system&#10;     *&#10;     * @throws  IllegalArgumentException&#10;     *          if the pre-conditions for the {@code uri} parameter are not met,&#10;     *          or the {@code env} parameter does not contain properties required&#10;     *          by the provider, or a property value is invalid&#10;     * @throws  FileSystemAlreadyExistsException&#10;     *          if the URI scheme identifies an installed provider and the file&#10;     *          system has already been created&#10;     * @throws  ProviderNotFoundException&#10;     *          if a provider supporting the URI scheme is not found&#10;     * @throws  ServiceConfigurationError&#10;     *          when an error occurs while loading a service provider&#10;     * @throws  IOException&#10;     *          an I/O error occurs creating the file system&#10;     * @throws  SecurityException&#10;     *          if a security manager is installed and it denies an unspecified&#10;     *          permission required by the file system provider implementation&#10;     "
  ]
  node [
    id 2416
    label "public static FileSystem newFileSystem(Path path, ClassLoader loader) throws IOException"
    type "method"
    comment "&#10;     * Constructs a new {@code FileSystem} to access the contents of a file as a&#10;     * file system.&#10;     *&#10;     * <p> This method makes use of specialized providers that create pseudo file&#10;     * systems where the contents of one or more files is treated as a file&#10;     * system.&#10;     *&#10;     * <p> This method iterates over the {@link FileSystemProvider#installedProviders()&#10;     * installed} providers. It invokes, in turn, each provider's {@link&#10;     * FileSystemProvider#newFileSystem(Path,Map) newFileSystem(Path,Map)} method&#10;     * with an empty map. If a provider returns a file system then the iteration&#10;     * terminates and the file system is returned. If none of the installed&#10;     * providers return a {@code FileSystem} then an attempt is made to locate&#10;     * the provider using the given class loader. If a provider returns a file&#10;     * system then the lookup terminates and the file system is returned.&#10;     *&#10;     * @param   path&#10;     *          the path to the file&#10;     * @param   loader&#10;     *          the class loader to locate the provider or {@code null} to only&#10;     *          attempt to locate an installed provider&#10;     *&#10;     * @return  a new file system&#10;     *&#10;     * @throws  ProviderNotFoundException&#10;     *          if a provider supporting this file type cannot be located&#10;     * @throws  ServiceConfigurationError&#10;     *          when an error occurs while loading a service provider&#10;     * @throws  IOException&#10;     *          if an I/O error occurs&#10;     * @throws  SecurityException&#10;     *          if a security manager is installed and it denies an unspecified&#10;     *          permission&#10;     "
  ]
  node [
    id 2417
    label "public static Path of(URI uri)"
    type "method"
    comment "&#10;     * Returns a {@code Path} by converting a URI.&#10;     *&#10;     * <p> This method iterates over the {@link FileSystemProvider#installedProviders()&#10;     * installed} providers to locate the provider that is identified by the&#10;     * URI {@link URI#getScheme scheme} of the given URI. URI schemes are&#10;     * compared without regard to case. If the provider is found then its {@link&#10;     * FileSystemProvider#getPath getPath} method is invoked to convert the&#10;     * URI.&#10;     *&#10;     * <p> In the case of the default provider, identified by the URI scheme&#10;     * &#34;file&#34;, the given URI has a non-empty path component, and undefined query&#10;     * and fragment components. Whether the authority component may be present&#10;     * is platform specific. The returned {@code Path} is associated with the&#10;     * {@link FileSystems#getDefault default} file system.&#10;     *&#10;     * <p> The default provider provides a similar <em>round-trip</em> guarantee&#10;     * to the {@link java.io.File} class. For a given {@code Path} <i>p</i> it&#10;     * is guaranteed that&#10;     * <blockquote>{@code&#10;     * Path.of(}<i>p</i>{@code .}{@link Path#toUri() toUri}{@code ()).equals(}&#10;     * <i>p</i>{@code .}{@link Path#toAbsolutePath() toAbsolutePath}{@code ())}&#10;     * </blockquote>&#10;     * so long as the original {@code Path}, the {@code URI}, and the new {@code&#10;     * Path} are all created in (possibly different invocations of) the same&#10;     * Java virtual machine. Whether other providers make any guarantees is&#10;     * provider specific and therefore unspecified.&#10;     *&#10;     * @param   uri&#10;     *          the URI to convert&#10;     *&#10;     * @return  the resulting {@code Path}&#10;     *&#10;     * @throws  IllegalArgumentException&#10;     *          if preconditions on the {@code uri} parameter do not hold. The&#10;     *          format of the URI is provider specific.&#10;     * @throws  FileSystemNotFoundException&#10;     *          The file system, identified by the URI, does not exist and&#10;     *          cannot be created automatically, or the provider identified by&#10;     *          the URI's scheme component is not installed&#10;     * @throws  SecurityException&#10;     *          if a security manager is installed and it denies an unspecified&#10;     *          permission to access the file system&#10;     *&#10;     * @since 11&#10;     "
  ]
  node [
    id 2418
    label "toAbsolutePath()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2419
    label "toUri()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2420
    label " FileSystem getFileSystem()"
    type "method"
    comment "&#10;     * Returns the file system that created this object.&#10;     *&#10;     * @return  the file system that created this object&#10;     "
  ]
  node [
    id 2421
    label " boolean isAbsolute()"
    type "method"
    comment "&#10;     * Tells whether or not this path is absolute.&#10;     *&#10;     * <p> An absolute path is complete in that it doesn't need to be combined&#10;     * with other path information in order to locate a file.&#10;     *&#10;     * @return  {@code true} if, and only if, this path is absolute&#10;     "
  ]
  node [
    id 2422
    label " Path getRoot()"
    type "method"
    comment "&#10;     * Returns the root component of this path as a {@code Path} object,&#10;     * or {@code null} if this path does not have a root component.&#10;     *&#10;     * @return  a path representing the root component of this path,&#10;     *          or {@code null}&#10;     "
  ]
  node [
    id 2423
    label " Path getFileName()"
    type "method"
    comment "&#10;     * Returns the name of the file or directory denoted by this path as a&#10;     * {@code Path} object. The file name is the <em>farthest</em> element from&#10;     * the root in the directory hierarchy.&#10;     *&#10;     * @return  a path representing the name of the file or directory, or&#10;     *          {@code null} if this path has zero elements&#10;     "
  ]
  node [
    id 2424
    label " Path getParent()"
    type "method"
    comment "&#10;     * Returns the <em>parent path</em>, or {@code null} if this path does not&#10;     * have a parent.&#10;     *&#10;     * <p> The parent of this path object consists of this path's root&#10;     * component, if any, and each element in the path except for the&#10;     * <em>farthest</em> from the root in the directory hierarchy. This method&#10;     * does not access the file system; the path or its parent may not exist.&#10;     * Furthermore, this method does not eliminate special names such as &#34;.&#34;&#10;     * and &#34;..&#34; that may be used in some implementations. On UNIX for example,&#10;     * the parent of &#34;{@code /a/b/c}&#34; is &#34;{@code /a/b}&#34;, and the parent of&#10;     * {@code &#34;x/y/.}&#34; is &#34;{@code x/y}&#34;. This method may be used with the {@link&#10;     * #normalize normalize} method, to eliminate redundant names, for cases where&#10;     * <em>shell-like</em> navigation is required.&#10;     *&#10;     * <p> If this path has one or more elements, and no root component, then&#10;     * this method is equivalent to evaluating the expression:&#10;     * <blockquote><pre>&#10;     * subpath(0,&#38;nbsp;getNameCount()-1);&#10;     * </pre></blockquote>&#10;     *&#10;     * @return  a path representing the path's parent&#10;     "
  ]
  node [
    id 2425
    label "normalize"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2426
    label " int getNameCount()"
    type "method"
    comment "&#10;     * Returns the number of name elements in the path.&#10;     *&#10;     * @return  the number of elements in the path, or {@code 0} if this path&#10;     *          only represents a root component&#10;     "
  ]
  node [
    id 2427
    label " Path getName(int index)"
    type "method"
    comment "&#10;     * Returns a name element of this path as a {@code Path} object.&#10;     *&#10;     * <p> The {@code index} parameter is the index of the name element to return.&#10;     * The element that is <em>closest</em> to the root in the directory hierarchy&#10;     * has index {@code 0}. The element that is <em>farthest</em> from the root&#10;     * has index {@link #getNameCount count}{@code -1}.&#10;     *&#10;     * @param   index&#10;     *          the index of the element&#10;     *&#10;     * @return  the name element&#10;     *&#10;     * @throws  IllegalArgumentException&#10;     *          if {@code index} is negative, {@code index} is greater than or&#10;     *          equal to the number of elements, or this path has zero name&#10;     *          elements&#10;     "
  ]
  node [
    id 2428
    label "getNameCount"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2429
    label " Path subpath(int beginIndex, int endIndex)"
    type "method"
    comment "&#10;     * Returns a relative {@code Path} that is a subsequence of the name&#10;     * elements of this path.&#10;     *&#10;     * <p> The {@code beginIndex} and {@code endIndex} parameters specify the&#10;     * subsequence of name elements. The name that is <em>closest</em> to the root&#10;     * in the directory hierarchy has index {@code 0}. The name that is&#10;     * <em>farthest</em> from the root has index {@link #getNameCount&#10;     * count}{@code -1}. The returned {@code Path} object has the name elements&#10;     * that begin at {@code beginIndex} and extend to the element at index {@code&#10;     * endIndex-1}.&#10;     *&#10;     * @param   beginIndex&#10;     *          the index of the first element, inclusive&#10;     * @param   endIndex&#10;     *          the index of the last element, exclusive&#10;     *&#10;     * @return  a new {@code Path} object that is a subsequence of the name&#10;     *          elements in this {@code Path}&#10;     *&#10;     * @throws  IllegalArgumentException&#10;     *          if {@code beginIndex} is negative, or greater than or equal to&#10;     *          the number of elements. If {@code endIndex} is less than or&#10;     *          equal to {@code beginIndex}, or larger than the number of elements.&#10;     "
  ]
  node [
    id 2430
    label "getNameCountcount"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2431
    label " boolean startsWith(Path other)"
    type "method"
    comment "&#10;     * Tests if this path starts with the given path.&#10;     *&#10;     * <p> This path <em>starts</em> with the given path if this path's root&#10;     * component <em>starts</em> with the root component of the given path,&#10;     * and this path starts with the same name elements as the given path.&#10;     * If the given path has more name elements than this path then {@code false}&#10;     * is returned.&#10;     *&#10;     * <p> Whether or not the root component of this path starts with the root&#10;     * component of the given path is file system specific. If this path does&#10;     * not have a root component and the given path has a root component then&#10;     * this path does not start with the given path.&#10;     *&#10;     * <p> If the given path is associated with a different {@code FileSystem}&#10;     * to this path then {@code false} is returned.&#10;     *&#10;     * @param   other&#10;     *          the given path&#10;     *&#10;     * @return  {@code true} if this path starts with the given path; otherwise&#10;     *          {@code false}&#10;     "
  ]
  node [
    id 2432
    label " boolean startsWith(String other)"
    type "method"
    comment "&#10;     * Tests if this path starts with a {@code Path}, constructed by converting&#10;     * the given path string, in exactly the manner specified by the {@link&#10;     * #startsWith(Path) startsWith(Path)} method. On UNIX for example, the path&#10;     * &#34;{@code foo/bar}&#34; starts with &#34;{@code foo}&#34; and &#34;{@code foo/bar}&#34;. It&#10;     * does not start with &#34;{@code f}&#34; or &#34;{@code fo}&#34;.&#10;     *&#10;     * @param   other&#10;     *          the given path string&#10;     *&#10;     * @return  {@code true} if this path starts with the given path; otherwise&#10;     *          {@code false}&#10;     *&#10;     * @throws  InvalidPathException&#10;     *          If the path string cannot be converted to a Path.&#10;     "
  ]
  node [
    id 2433
    label "startsWith(Path)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2434
    label " boolean endsWith(Path other)"
    type "method"
    comment "&#10;     * Tests if this path ends with the given path.&#10;     *&#10;     * <p> If the given path has <em>N</em> elements, and no root component,&#10;     * and this path has <em>N</em> or more elements, then this path ends with&#10;     * the given path if the last <em>N</em> elements of each path, starting at&#10;     * the element farthest from the root, are equal.&#10;     *&#10;     * <p> If the given path has a root component then this path ends with the&#10;     * given path if the root component of this path <em>ends with</em> the root&#10;     * component of the given path, and the corresponding elements of both paths&#10;     * are equal. Whether or not the root component of this path ends with the&#10;     * root component of the given path is file system specific. If this path&#10;     * does not have a root component and the given path has a root component&#10;     * then this path does not end with the given path.&#10;     *&#10;     * <p> If the given path is associated with a different {@code FileSystem}&#10;     * to this path then {@code false} is returned.&#10;     *&#10;     * @param   other&#10;     *          the given path&#10;     *&#10;     * @return  {@code true} if this path ends with the given path; otherwise&#10;     *          {@code false}&#10;     "
  ]
  node [
    id 2435
    label " boolean endsWith(String other)"
    type "method"
    comment "&#10;     * Tests if this path ends with a {@code Path}, constructed by converting&#10;     * the given path string, in exactly the manner specified by the {@link&#10;     * #endsWith(Path) endsWith(Path)} method. On UNIX for example, the path&#10;     * &#34;{@code foo/bar}&#34; ends with &#34;{@code foo/bar}&#34; and &#34;{@code bar}&#34;. It does&#10;     * not end with &#34;{@code r}&#34; or &#34;{@code /bar}&#34;. Note that trailing separators&#10;     * are not taken into account, and so invoking this method on the {@code&#10;     * Path}&#34;{@code foo/bar}&#34; with the {@code String} &#34;{@code bar/}&#34; returns&#10;     * {@code true}.&#10;     *&#10;     * @param   other&#10;     *          the given path string&#10;     *&#10;     * @return  {@code true} if this path ends with the given path; otherwise&#10;     *          {@code false}&#10;     *&#10;     * @throws  InvalidPathException&#10;     *          If the path string cannot be converted to a Path.&#10;     "
  ]
  node [
    id 2436
    label "endsWith(Path)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2437
    label " Path normalize()"
    type "method"
    comment "&#10;     * Returns a path that is this path with redundant name elements eliminated.&#10;     *&#10;     * <p> The precise definition of this method is implementation dependent but&#10;     * in general it derives from this path, a path that does not contain&#10;     * <em>redundant</em> name elements. In many file systems, the &#34;{@code .}&#34;&#10;     * and &#34;{@code ..}&#34; are special names used to indicate the current directory&#10;     * and parent directory. In such file systems all occurrences of &#34;{@code .}&#34;&#10;     * are considered redundant. If a &#34;{@code ..}&#34; is preceded by a&#10;     * non-&#34;{@code ..}&#34; name then both names are considered redundant (the&#10;     * process to identify such names is repeated until it is no longer&#10;     * applicable).&#10;     *&#10;     * <p> This method does not access the file system; the path may not locate&#10;     * a file that exists. Eliminating &#34;{@code ..}&#34; and a preceding name from a&#10;     * path may result in the path that locates a different file than the original&#10;     * path. This can arise when the preceding name is a symbolic link.&#10;     *&#10;     * @return  the resulting path or this path if it does not contain&#10;     *          redundant name elements; an empty path is returned if this path&#10;     *          does have a root component and all name elements are redundant&#10;     *&#10;     * @see #getParent&#10;     * @see #toRealPath&#10;     "
  ]
  node [
    id 2438
    label " Path resolve(Path other)"
    type "method"
    comment "&#10;     * Resolve the given path against this path.&#10;     *&#10;     * <p> If the {@code other} parameter is an {@link #isAbsolute() absolute}&#10;     * path then this method trivially returns {@code other}. If {@code other}&#10;     * is an <i>empty path</i> then this method trivially returns this path.&#10;     * Otherwise this method considers this path to be a directory and resolves&#10;     * the given path against this path. In the simplest case, the given path&#10;     * does not have a {@link #getRoot root} component, in which case this method&#10;     * <em>joins</em> the given path to this path and returns a resulting path&#10;     * that {@link #endsWith ends} with the given path. Where the given path has&#10;     * a root component then resolution is highly implementation dependent and&#10;     * therefore unspecified.&#10;     *&#10;     * @param   other&#10;     *          the path to resolve against this path&#10;     *&#10;     * @return  the resulting path&#10;     *&#10;     * @see #relativize&#10;     "
  ]
  node [
    id 2439
    label "endsWith"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2440
    label "getRoot"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2441
    label "isAbsolute()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2442
    label " Path resolve(String other)"
    type "method"
    comment "&#10;     * Converts a given path string to a {@code Path} and resolves it against&#10;     * this {@code Path} in exactly the manner specified by the {@link&#10;     * #resolve(Path) resolve} method. For example, suppose that the name&#10;     * separator is &#34;{@code /}&#34; and a path represents &#34;{@code foo/bar}&#34;, then&#10;     * invoking this method with the path string &#34;{@code gus}&#34; will result in&#10;     * the {@code Path} &#34;{@code foo/bar/gus}&#34;.&#10;     *&#10;     * @param   other&#10;     *          the path string to resolve against this path&#10;     *&#10;     * @return  the resulting path&#10;     *&#10;     * @throws  InvalidPathException&#10;     *          if the path string cannot be converted to a Path.&#10;     *&#10;     * @see FileSystem#getPath&#10;     "
  ]
  node [
    id 2443
    label "resolve(Path)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2444
    label " Path resolveSibling(Path other)"
    type "method"
    comment "&#10;     * Resolves the given path against this path's {@link #getParent parent}&#10;     * path. This is useful where a file name needs to be <i>replaced</i> with&#10;     * another file name. For example, suppose that the name separator is&#10;     * &#34;{@code /}&#34; and a path represents &#34;{@code dir1/dir2/foo}&#34;, then invoking&#10;     * this method with the {@code Path} &#34;{@code bar}&#34; will result in the {@code&#10;     * Path} &#34;{@code dir1/dir2/bar}&#34;. If this path does not have a parent path,&#10;     * or {@code other} is {@link #isAbsolute() absolute}, then this method&#10;     * returns {@code other}. If {@code other} is an empty path then this method&#10;     * returns this path's parent, or where this path doesn't have a parent, the&#10;     * empty path.&#10;     *&#10;     * @param   other&#10;     *          the path to resolve against this path's parent&#10;     *&#10;     * @return  the resulting path&#10;     *&#10;     * @see #resolve(Path)&#10;     "
  ]
  node [
    id 2445
    label "getParent"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2446
    label " Path resolveSibling(String other)"
    type "method"
    comment "&#10;     * Converts a given path string to a {@code Path} and resolves it against&#10;     * this path's {@link #getParent parent} path in exactly the manner&#10;     * specified by the {@link #resolveSibling(Path) resolveSibling} method.&#10;     *&#10;     * @param   other&#10;     *          the path string to resolve against this path's parent&#10;     *&#10;     * @return  the resulting path&#10;     *&#10;     * @throws  InvalidPathException&#10;     *          if the path string cannot be converted to a Path.&#10;     *&#10;     * @see FileSystem#getPath&#10;     "
  ]
  node [
    id 2447
    label "resolveSibling(Path)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2448
    label " Path relativize(Path other)"
    type "method"
    comment "&#10;     * Constructs a relative path between this path and a given path.&#10;     *&#10;     * <p> Relativization is the inverse of {@link #resolve(Path) resolution}.&#10;     * This method attempts to construct a {@link #isAbsolute relative} path&#10;     * that when {@link #resolve(Path) resolved} against this path, yields a&#10;     * path that locates the same file as the given path. For example, on UNIX,&#10;     * if this path is {@code &#34;/a/b&#34;} and the given path is {@code &#34;/a/b/c/d&#34;}&#10;     * then the resulting relative path would be {@code &#34;c/d&#34;}. Where this&#10;     * path and the given path do not have a {@link #getRoot root} component,&#10;     * then a relative path can be constructed. A relative path cannot be&#10;     * constructed if only one of the paths have a root component. Where both&#10;     * paths have a root component then it is implementation dependent if a&#10;     * relative path can be constructed. If this path and the given path are&#10;     * {@link #equals equal} then an <i>empty path</i> is returned.&#10;     *&#10;     * <p> For any two {@link #normalize normalized} paths <i>p</i> and&#10;     * <i>q</i>, where <i>q</i> does not have a root component,&#10;     * <blockquote>&#10;     *   <i>p</i><tt>.relativize(</tt><i>p</i><tt>.resolve(</tt><i>q</i><tt>)).equals(</tt><i>q</i><tt>)</tt>&#10;     * </blockquote>&#10;     *&#10;     * <p> When symbolic links are supported, then whether the resulting path,&#10;     * when resolved against this path, yields a path that can be used to locate&#10;     * the {@link Files#isSameFile same} file as {@code other} is implementation&#10;     * dependent. For example, if this path is  {@code &#34;/a/b&#34;} and the given&#10;     * path is {@code &#34;/a/x&#34;} then the resulting relative path may be {@code&#10;     * &#34;../x&#34;}. If {@code &#34;b&#34;} is a symbolic link then is implementation&#10;     * dependent if {@code &#34;a/b/../x&#34;} would locate the same file as {@code &#34;/a/x&#34;}.&#10;     *&#10;     * @param   other&#10;     *          the path to relativize against this path&#10;     *&#10;     * @return  the resulting relative path, or an empty path if both paths are&#10;     *          equal&#10;     *&#10;     * @throws  IllegalArgumentException&#10;     *          if {@code other} is not a {@code Path} that can be relativized&#10;     *          against this path&#10;     "
  ]
  node [
    id 2449
    label "equals"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2450
    label "isAbsolute"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2451
    label " URI toUri()"
    type "method"
    comment "&#10;     * Returns a URI to represent this path.&#10;     *&#10;     * <p> This method constructs an absolute {@link URI} with a {@link&#10;     * URI#getScheme() scheme} equal to the URI scheme that identifies the&#10;     * provider. The exact form of the scheme specific part is highly provider&#10;     * dependent.&#10;     *&#10;     * <p> In the case of the default provider, the URI is hierarchical with&#10;     * a {@link URI#getPath() path} component that is absolute. The query and&#10;     * fragment components are undefined. Whether the authority component is&#10;     * defined or not is implementation dependent. There is no guarantee that&#10;     * the {@code URI} may be used to construct a {@link java.io.File java.io.File}.&#10;     * In particular, if this path represents a Universal Naming Convention (UNC)&#10;     * path, then the UNC server name may be encoded in the authority component&#10;     * of the resulting URI. In the case of the default provider, and the file&#10;     * exists, and it can be determined that the file is a directory, then the&#10;     * resulting {@code URI} will end with a slash.&#10;     *&#10;     * <p> The default provider provides a similar <em>round-trip</em> guarantee&#10;     * to the {@link java.io.File} class. For a given {@code Path} <i>p</i> it&#10;     * is guaranteed that&#10;     * <blockquote><tt>&#10;     * {@link Paths#get(URI) Paths.get}(</tt><i>p</i><tt>.toUri()).equals(</tt><i>p</i>&#10;     * <tt>.{@link #toAbsolutePath() toAbsolutePath}())</tt>&#10;     * </blockquote>&#10;     * so long as the original {@code Path}, the {@code URI}, and the new {@code&#10;     * Path} are all created in (possibly different invocations of) the same&#10;     * Java virtual machine. Whether other providers make any guarantees is&#10;     * provider specific and therefore unspecified.&#10;     *&#10;     * <p> When a file system is constructed to access the contents of a file&#10;     * as a file system then it is highly implementation specific if the returned&#10;     * URI represents the given path in the file system or it represents a&#10;     * <em>compound</em> URI that encodes the URI of the enclosing file system.&#10;     * A format for compound URIs is not defined in this release; such a scheme&#10;     * may be added in a future release.&#10;     *&#10;     * @return  the URI representing this path&#10;     *&#10;     * @throws  java.io.IOError&#10;     *          if an I/O error occurs obtaining the absolute path, or where a&#10;     *          file system is constructed to access the contents of a file as&#10;     *          a file system, and the URI of the enclosing file system cannot be&#10;     *          obtained&#10;     *&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager&#10;     *          is installed, the {@link #toAbsolutePath toAbsolutePath} method&#10;     *          throws a security exception.&#10;     "
  ]
  node [
    id 2452
    label "get(URI)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2453
    label "java.nio.file.Paths"
    type "class"
    comment ""
  ]
  node [
    id 2454
    label "public static Path get(String first, String... more)"
    type "method"
    comment "&#10;     * Converts a path string, or a sequence of strings that when joined form&#10;     * a path string, to a {@code Path}. If {@code more} does not specify any&#10;     * elements then the value of the {@code first} parameter is the path string&#10;     * to convert. If {@code more} specifies one or more elements then each&#10;     * non-empty string, including {@code first}, is considered to be a sequence&#10;     * of name elements (see {@link Path}) and is joined to form a path string.&#10;     * The details as to how the Strings are joined is provider specific but&#10;     * typically they will be joined using the {@link FileSystem#getSeparator&#10;     * name-separator} as the separator. For example, if the name separator is&#10;     * &#34;{@code /}&#34; and {@code getPath(&#34;/foo&#34;,&#34;bar&#34;,&#34;gus&#34;)} is invoked, then the&#10;     * path string {@code &#34;/foo/bar/gus&#34;} is converted to a {@code Path}.&#10;     * A {@code Path} representing an empty path is returned if {@code first}&#10;     * is the empty string and {@code more} does not contain any non-empty&#10;     * strings.&#10;     *&#10;     * <p> The {@code Path} is obtained by invoking the {@link FileSystem#getPath&#10;     * getPath} method of the {@link FileSystems#getDefault default} {@link&#10;     * FileSystem}.&#10;     *&#10;     * <p> Note that while this method is very convenient, using it will imply&#10;     * an assumed reference to the default {@code FileSystem} and limit the&#10;     * utility of the calling code. Hence it should not be used in library code&#10;     * intended for flexible reuse. A more flexible alternative is to use an&#10;     * existing {@code Path} instance as an anchor, such as:&#10;     * <pre>&#10;     *     Path dir = ...&#10;     *     Path path = dir.resolve(&#34;file&#34;);&#10;     * </pre>&#10;     *&#10;     * @param   first&#10;     *          the path string or initial part of the path string&#10;     * @param   more&#10;     *          additional strings to be joined to form the path string&#10;     *&#10;     * @return  the resulting {@code Path}&#10;     *&#10;     * @throws  InvalidPathException&#10;     *          if the path string cannot be converted to a {@code Path}&#10;     *&#10;     * @see FileSystem#getPath&#10;     "
  ]
  node [
    id 2455
    label "public static Path get(URI uri)"
    type "method"
    comment "&#10;     * Converts the given URI to a {@link Path} object.&#10;     *&#10;     * <p> This method iterates over the {@link FileSystemProvider#installedProviders()&#10;     * installed} providers to locate the provider that is identified by the&#10;     * URI {@link URI#getScheme scheme} of the given URI. URI schemes are&#10;     * compared without regard to case. If the provider is found then its {@link&#10;     * FileSystemProvider#getPath getPath} method is invoked to convert the&#10;     * URI.&#10;     *&#10;     * <p> In the case of the default provider, identified by the URI scheme&#10;     * &#34;file&#34;, the given URI has a non-empty path component, and undefined query&#10;     * and fragment components. Whether the authority component may be present&#10;     * is platform specific. The returned {@code Path} is associated with the&#10;     * {@link FileSystems#getDefault default} file system.&#10;     *&#10;     * <p> The default provider provides a similar <em>round-trip</em> guarantee&#10;     * to the {@link java.io.File} class. For a given {@code Path} <i>p</i> it&#10;     * is guaranteed that&#10;     * <blockquote><tt>&#10;     * Paths.get(</tt><i>p</i><tt>.{@link Path#toUri() toUri}()).equals(</tt>&#10;     * <i>p</i><tt>.{@link Path#toAbsolutePath() toAbsolutePath}())</tt>&#10;     * </blockquote>&#10;     * so long as the original {@code Path}, the {@code URI}, and the new {@code&#10;     * Path} are all created in (possibly different invocations of) the same&#10;     * Java virtual machine. Whether other providers make any guarantees is&#10;     * provider specific and therefore unspecified.&#10;     *&#10;     * @param   uri&#10;     *          the URI to convert&#10;     *&#10;     * @return  the resulting {@code Path}&#10;     *&#10;     * @throws  IllegalArgumentException&#10;     *          if preconditions on the {@code uri} parameter do not hold. The&#10;     *          format of the URI is provider specific.&#10;     * @throws  FileSystemNotFoundException&#10;     *          The file system, identified by the URI, does not exist and&#10;     *          cannot be created automatically, or the provider identified by&#10;     *          the URI's scheme component is not installed&#10;     * @throws  SecurityException&#10;     *          if a security manager is installed and it denies an unspecified&#10;     *          permission to access the file system&#10;     "
  ]
  node [
    id 2456
    label "toAbsolutePath"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2457
    label " Path toAbsolutePath()"
    type "method"
    comment "&#10;     * Returns a {@code Path} object representing the absolute path of this&#10;     * path.&#10;     *&#10;     * <p> If this path is already {@link Path#isAbsolute absolute} then this&#10;     * method simply returns this path. Otherwise, this method resolves the path&#10;     * in an implementation dependent manner, typically by resolving the path&#10;     * against a file system default directory. Depending on the implementation,&#10;     * this method may throw an I/O error if the file system is not accessible.&#10;     *&#10;     * @return  a {@code Path} object representing the absolute path&#10;     *&#10;     * @throws  java.io.IOError&#10;     *          if an I/O error occurs&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, a security manager&#10;     *          is installed, and this path is not absolute, then the security&#10;     *          manager's {@link SecurityManager#checkPropertyAccess(String)&#10;     *          checkPropertyAccess} method is invoked to check access to the&#10;     *          system property {@code user.dir}&#10;     "
  ]
  node [
    id 2458
    label " Path toRealPath(LinkOption... options) throws IOException"
    type "method"
    comment "&#10;     * Returns the <em>real</em> path of an existing file.&#10;     *&#10;     * <p> The precise definition of this method is implementation dependent but&#10;     * in general it derives from this path, an {@link #isAbsolute absolute}&#10;     * path that locates the {@link Files#isSameFile same} file as this path, but&#10;     * with name elements that represent the actual name of the directories&#10;     * and the file. For example, where filename comparisons on a file system&#10;     * are case insensitive then the name elements represent the names in their&#10;     * actual case. Additionally, the resulting path has redundant name&#10;     * elements removed.&#10;     *&#10;     * <p> If this path is relative then its absolute path is first obtained,&#10;     * as if by invoking the {@link #toAbsolutePath toAbsolutePath} method.&#10;     *&#10;     * <p> The {@code options} array may be used to indicate how symbolic links&#10;     * are handled. By default, symbolic links are resolved to their final&#10;     * target. If the option {@link LinkOption#NOFOLLOW_LINKS NOFOLLOW_LINKS} is&#10;     * present then this method does not resolve symbolic links.&#10;     *&#10;     * Some implementations allow special names such as &#34;{@code ..}&#34; to refer to&#10;     * the parent directory. When deriving the <em>real path</em>, and a&#10;     * &#34;{@code ..}&#34; (or equivalent) is preceded by a non-&#34;{@code ..}&#34; name then&#10;     * an implementation will typically cause both names to be removed. When&#10;     * not resolving symbolic links and the preceding name is a symbolic link&#10;     * then the names are only removed if it guaranteed that the resulting path&#10;     * will locate the same file as this path.&#10;     *&#10;     * @param   options&#10;     *          options indicating how symbolic links are handled&#10;     *&#10;     * @return  an absolute path represent the <em>real</em> path of the file&#10;     *          located by this object&#10;     *&#10;     * @throws  IOException&#10;     *          if the file does not exist or an I/O error occurs&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager&#10;     *          is installed, its {@link SecurityManager#checkRead(String) checkRead}&#10;     *          method is invoked to check read access to the file, and where&#10;     *          this path is not absolute, its {@link SecurityManager#checkPropertyAccess(String)&#10;     *          checkPropertyAccess} method is invoked to check access to the&#10;     *          system property {@code user.dir}&#10;     "
  ]
  node [
    id 2459
    label " File toFile()"
    type "method"
    comment "&#10;     * Returns a {@link File} object representing this path. Where this {@code&#10;     * Path} is associated with the default provider, then this method is&#10;     * equivalent to returning a {@code File} object constructed with the&#10;     * {@code String} representation of this path.&#10;     *&#10;     * <p> If this path was created by invoking the {@code File} {@link&#10;     * File#toPath toPath} method then there is no guarantee that the {@code&#10;     * File} object returned by this method is {@link #equals equal} to the&#10;     * original {@code File}.&#10;     *&#10;     * @return  a {@code File} object representing this path&#10;     *&#10;     * @throws  UnsupportedOperationException&#10;     *          if this {@code Path} is not associated with the default provider&#10;     "
  ]
  node [
    id 2460
    label " WatchKey register(WatchService watcher, WatchEvent.Kind<?>[] events, WatchEvent.Modifier... modifiers) throws IOException"
    type "method"
    comment "&#10;     * Registers the file located by this path with a watch service.&#10;     *&#10;     * <p> In this release, this path locates a directory that exists. The&#10;     * directory is registered with the watch service so that entries in the&#10;     * directory can be watched. The {@code events} parameter is the events to&#10;     * register and may contain the following events:&#10;     * <ul>&#10;     *   <li>{@link StandardWatchEventKinds#ENTRY_CREATE ENTRY_CREATE} -&#10;     *       entry created or moved into the directory</li>&#10;     *   <li>{@link StandardWatchEventKinds#ENTRY_DELETE ENTRY_DELETE} -&#10;     *        entry deleted or moved out of the directory</li>&#10;     *   <li>{@link StandardWatchEventKinds#ENTRY_MODIFY ENTRY_MODIFY} -&#10;     *        entry in directory was modified</li>&#10;     * </ul>&#10;     *&#10;     * <p> The {@link WatchEvent#context context} for these events is the&#10;     * relative path between the directory located by this path, and the path&#10;     * that locates the directory entry that is created, deleted, or modified.&#10;     *&#10;     * <p> The set of events may include additional implementation specific&#10;     * event that are not defined by the enum {@link StandardWatchEventKinds}&#10;     *&#10;     * <p> The {@code modifiers} parameter specifies <em>modifiers</em> that&#10;     * qualify how the directory is registered. This release does not define any&#10;     * <em>standard</em> modifiers. It may contain implementation specific&#10;     * modifiers.&#10;     *&#10;     * <p> Where a file is registered with a watch service by means of a symbolic&#10;     * link then it is implementation specific if the watch continues to depend&#10;     * on the existence of the symbolic link after it is registered.&#10;     *&#10;     * @param   watcher&#10;     *          the watch service to which this object is to be registered&#10;     * @param   events&#10;     *          the events for which this object should be registered&#10;     * @param   modifiers&#10;     *          the modifiers, if any, that modify how the object is registered&#10;     *&#10;     * @return  a key representing the registration of this object with the&#10;     *          given watch service&#10;     *&#10;     * @throws  UnsupportedOperationException&#10;     *          if unsupported events or modifiers are specified&#10;     * @throws  IllegalArgumentException&#10;     *          if an invalid combination of events or modifiers is specified&#10;     * @throws  ClosedWatchServiceException&#10;     *          if the watch service is closed&#10;     * @throws  NotDirectoryException&#10;     *          if the file is registered to watch the entries in a directory&#10;     *          and the file is not a directory  <i>(optional specific exception)</i>&#10;     * @throws  IOException&#10;     *          if an I/O error occurs&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager is&#10;     *          installed, the {@link SecurityManager#checkRead(String) checkRead}&#10;     *          method is invoked to check read access to the file.&#10;     "
  ]
  node [
    id 2461
    label "ENTRY_CREATE"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2462
    label "java.nio.file.StandardWatchEventKinds"
    type "class"
    comment ""
  ]
  node [
    id 2463
    label "context"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2464
    label "java.nio.file.WatchEvent"
    type "class"
    comment ""
  ]
  node [
    id 2465
    label " Kind<T> kind()"
    type "method"
    comment "&#10;     * Returns the event kind.&#10;     *&#10;     * @return  the event kind&#10;     "
  ]
  node [
    id 2466
    label " int count()"
    type "method"
    comment "&#10;     * Returns the event count. If the event count is greater than {@code 1}&#10;     * then this is a repeated event.&#10;     *&#10;     * @return  the event count&#10;     "
  ]
  node [
    id 2467
    label " T context()"
    type "method"
    comment "&#10;     * Returns the context for the event.&#10;     *&#10;     * <p> In the case of {@link StandardWatchEventKinds#ENTRY_CREATE ENTRY_CREATE},&#10;     * {@link StandardWatchEventKinds#ENTRY_DELETE ENTRY_DELETE}, and {@link&#10;     * StandardWatchEventKinds#ENTRY_MODIFY ENTRY_MODIFY} events the context is&#10;     * a {@code Path} that is the {@link Path#relativize relative} path between&#10;     * the directory registered with the watch service, and the entry that is&#10;     * created, deleted, or modified.&#10;     *&#10;     * @return  the event context; may be {@code null}&#10;     "
  ]
  node [
    id 2468
    label " WatchKey register(WatchService watcher, WatchEvent.Kind<?>... events) throws IOException"
    type "method"
    comment "&#10;     * Registers the file located by this path with a watch service.&#10;     *&#10;     * <p> An invocation of this method behaves in exactly the same way as the&#10;     * invocation&#10;     * <pre>&#10;     *     watchable.{@link #register(WatchService,WatchEvent.Kind[],WatchEvent.Modifier[]) register}(watcher, events, new WatchEvent.Modifier[0]);&#10;     * </pre>&#10;     *&#10;     * <p> <b>Usage Example:</b>&#10;     * Suppose we wish to register a directory for entry create, delete, and modify&#10;     * events:&#10;     * <pre>&#10;     *     Path dir = ...&#10;     *     WatchService watcher = ...&#10;     *&#10;     *     WatchKey key = dir.register(watcher, ENTRY_CREATE, ENTRY_DELETE, ENTRY_MODIFY);&#10;     * </pre>&#10;     * @param   watcher&#10;     *          The watch service to which this object is to be registered&#10;     * @param   events&#10;     *          The events for which this object should be registered&#10;     *&#10;     * @return  A key representing the registration of this object with the&#10;     *          given watch service&#10;     *&#10;     * @throws  UnsupportedOperationException&#10;     *          If unsupported events are specified&#10;     * @throws  IllegalArgumentException&#10;     *          If an invalid combination of events is specified&#10;     * @throws  ClosedWatchServiceException&#10;     *          If the watch service is closed&#10;     * @throws  NotDirectoryException&#10;     *          If the file is registered to watch the entries in a directory&#10;     *          and the file is not a directory  <i>(optional specific exception)</i>&#10;     * @throws  IOException&#10;     *          If an I/O error occurs&#10;     * @throws  SecurityException&#10;     *          In the case of the default provider, and a security manager is&#10;     *          installed, the {@link SecurityManager#checkRead(String) checkRead}&#10;     *          method is invoked to check read access to the file.&#10;     "
  ]
  node [
    id 2469
    label "register(WatchService"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2470
    label " Iterator<Path> iterator()"
    type "method"
    comment "&#10;     * Returns an iterator over the name elements of this path.&#10;     *&#10;     * <p> The first element returned by the iterator represents the name&#10;     * element that is closest to the root in the directory hierarchy, the&#10;     * second element is the next closest, and so on. The last element returned&#10;     * is the name of the file or directory denoted by this path. The {@link&#10;     * #getRoot root} component, if present, is not returned by the iterator.&#10;     *&#10;     * @return  an iterator over the name elements of this path.&#10;     "
  ]
  node [
    id 2471
    label " int compareTo(Path other)"
    type "method"
    comment "&#10;     * Compares two abstract paths lexicographically. The ordering defined by&#10;     * this method is provider specific, and in the case of the default&#10;     * provider, platform specific. This method does not access the file system&#10;     * and neither file is required to exist.&#10;     *&#10;     * <p> This method may not be used to compare paths that are associated&#10;     * with different file system providers.&#10;     *&#10;     * @param   other  the path compared to this path.&#10;     *&#10;     * @return  zero if the argument is {@link #equals equal} to this path, a&#10;     *          value less than zero if this path is lexicographically less than&#10;     *          the argument, or a value greater than zero if this path is&#10;     *          lexicographically greater than the argument&#10;     *&#10;     * @throws  ClassCastException&#10;     *          if the paths are associated with different providers&#10;     "
  ]
  node [
    id 2472
    label " boolean equals(Object other)"
    type "method"
    comment "&#10;     * Tests this path for equality with the given object.&#10;     *&#10;     * <p> If the given object is not a Path, or is a Path associated with a&#10;     * different {@code FileSystem}, then this method returns {@code false}.&#10;     *&#10;     * <p> Whether or not two path are equal depends on the file system&#10;     * implementation. In some cases the paths are compared without regard&#10;     * to case, and others are case sensitive. This method does not access the&#10;     * file system and the file is not required to exist. Where required, the&#10;     * {@link Files#isSameFile isSameFile} method may be used to check if two&#10;     * paths locate the same file.&#10;     *&#10;     * <p> This method satisfies the general contract of the {@link&#10;     * java.lang.Object#equals(Object) Object.equals} method. </p>&#10;     *&#10;     * @param   other&#10;     *          the object to which this object is to be compared&#10;     *&#10;     * @return  {@code true} if, and only if, the given object is a {@code Path}&#10;     *          that is identical to this {@code Path}&#10;     "
  ]
  node [
    id 2473
    label "hashCodeObject.hashCode"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2474
    label " String toString()"
    type "method"
    comment "&#10;     * Returns the string representation of this path.&#10;     *&#10;     * <p> If this path was created by converting a path string using the&#10;     * {@link FileSystem#getPath getPath} method then the path string returned&#10;     * by this method may differ from the original String used to create the path.&#10;     *&#10;     * <p> The returned path string uses the default name {@link&#10;     * FileSystem#getSeparator separator} to separate names in the path.&#10;     *&#10;     * @return  the string representation of this path&#10;     "
  ]
  node [
    id 2475
    label "toPath"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2476
    label "public boolean canRead()"
    type "method"
    comment "&#10;     * Tests whether the application can read the file denoted by this&#10;     * abstract pathname.&#10;     *&#10;     * @return  <code>true</code> if and only if the file specified by this&#10;     *          abstract pathname exists <em>and</em> can be read by the&#10;     *          application; <code>false</code> otherwise&#10;     *&#10;     * @throws  SecurityException&#10;     *          If a security manager exists and its <code>{@link&#10;     *          java.lang.SecurityManager#checkRead(java.lang.String)}</code>&#10;     *          method denies read access to the file&#10;     "
  ]
  node [
    id 2477
    label "public boolean canWrite()"
    type "method"
    comment "&#10;     * Tests whether the application can modify the file denoted by this&#10;     * abstract pathname.&#10;     *&#10;     * @return  <code>true</code> if and only if the file system actually&#10;     *          contains a file denoted by this abstract pathname <em>and</em>&#10;     *          the application is allowed to write to the file;&#10;     *          <code>false</code> otherwise.&#10;     *&#10;     * @throws  SecurityException&#10;     *          If a security manager exists and its <code>{@link&#10;     *          java.lang.SecurityManager#checkWrite(java.lang.String)}</code>&#10;     *          method denies write access to the file&#10;     "
  ]
  node [
    id 2478
    label "public boolean exists()"
    type "method"
    comment "&#10;     * Tests whether the file or directory denoted by this abstract pathname&#10;     * exists.&#10;     *&#10;     * @return  <code>true</code> if and only if the file or directory denoted&#10;     *          by this abstract pathname exists; <code>false</code> otherwise&#10;     *&#10;     * @throws  SecurityException&#10;     *          If a security manager exists and its <code>{@link&#10;     *          java.lang.SecurityManager#checkRead(java.lang.String)}</code>&#10;     *          method denies read access to the file or directory&#10;     "
  ]
  node [
    id 2479
    label "public boolean isDirectory()"
    type "method"
    comment "&#10;     * Tests whether the file denoted by this abstract pathname is a&#10;     * directory.&#10;     *&#10;     * <p> Where it is required to distinguish an I/O exception from the case&#10;     * that the file is not a directory, or where several attributes of the&#10;     * same file are required at the same time, then the {@link&#10;     * java.nio.file.Files#readAttributes(Path,Class,LinkOption[])&#10;     * Files.readAttributes} method may be used.&#10;     *&#10;     * @return <code>true</code> if and only if the file denoted by this&#10;     *          abstract pathname exists <em>and</em> is a directory;&#10;     *          <code>false</code> otherwise&#10;     *&#10;     * @throws  SecurityException&#10;     *          If a security manager exists and its <code>{@link&#10;     *          java.lang.SecurityManager#checkRead(java.lang.String)}</code>&#10;     *          method denies read access to the file&#10;     "
  ]
  node [
    id 2480
    label "public boolean isFile()"
    type "method"
    comment "&#10;     * Tests whether the file denoted by this abstract pathname is a normal&#10;     * file.  A file is <em>normal</em> if it is not a directory and, in&#10;     * addition, satisfies other system-dependent criteria.  Any non-directory&#10;     * file created by a Java application is guaranteed to be a normal file.&#10;     *&#10;     * <p> Where it is required to distinguish an I/O exception from the case&#10;     * that the file is not a normal file, or where several attributes of the&#10;     * same file are required at the same time, then the {@link&#10;     * java.nio.file.Files#readAttributes(Path,Class,LinkOption[])&#10;     * Files.readAttributes} method may be used.&#10;     *&#10;     * @return  <code>true</code> if and only if the file denoted by this&#10;     *          abstract pathname exists <em>and</em> is a normal file;&#10;     *          <code>false</code> otherwise&#10;     *&#10;     * @throws  SecurityException&#10;     *          If a security manager exists and its <code>{@link&#10;     *          java.lang.SecurityManager#checkRead(java.lang.String)}</code>&#10;     *          method denies read access to the file&#10;     "
  ]
  node [
    id 2481
    label "public boolean isHidden()"
    type "method"
    comment "&#10;     * Tests whether the file named by this abstract pathname is a hidden&#10;     * file.  The exact definition of <em>hidden</em> is system-dependent.  On&#10;     * UNIX systems, a file is considered to be hidden if its name begins with&#10;     * a period character (<code>'.'</code>).  On Microsoft Windows systems, a file is&#10;     * considered to be hidden if it has been marked as such in the filesystem.&#10;     *&#10;     * @return  <code>true</code> if and only if the file denoted by this&#10;     *          abstract pathname is hidden according to the conventions of the&#10;     *          underlying platform&#10;     *&#10;     * @throws  SecurityException&#10;     *          If a security manager exists and its <code>{@link&#10;     *          java.lang.SecurityManager#checkRead(java.lang.String)}</code>&#10;     *          method denies read access to the file&#10;     *&#10;     * @since 1.2&#10;     "
  ]
  node [
    id 2482
    label "public long lastModified()"
    type "method"
    comment "&#10;     * Returns the time that the file denoted by this abstract pathname was&#10;     * last modified.&#10;     *&#10;     * <p> Where it is required to distinguish an I/O exception from the case&#10;     * where {@code 0L} is returned, or where several attributes of the&#10;     * same file are required at the same time, or where the time of last&#10;     * access or the creation time are required, then the {@link&#10;     * java.nio.file.Files#readAttributes(Path,Class,LinkOption[])&#10;     * Files.readAttributes} method may be used.&#10;     *&#10;     * @return  A <code>long</code> value representing the time the file was&#10;     *          last modified, measured in milliseconds since the epoch&#10;     *          (00:00:00 GMT, January 1, 1970), or <code>0L</code> if the&#10;     *          file does not exist or if an I/O error occurs&#10;     *&#10;     * @throws  SecurityException&#10;     *          If a security manager exists and its <code>{@link&#10;     *          java.lang.SecurityManager#checkRead(java.lang.String)}</code>&#10;     *          method denies read access to the file&#10;     "
  ]
  node [
    id 2483
    label "public long length()"
    type "method"
    comment "&#10;     * Returns the length of the file denoted by this abstract pathname.&#10;     * The return value is unspecified if this pathname denotes a directory.&#10;     *&#10;     * <p> Where it is required to distinguish an I/O exception from the case&#10;     * that {@code 0L} is returned, or where several attributes of the same file&#10;     * are required at the same time, then the {@link&#10;     * java.nio.file.Files#readAttributes(Path,Class,LinkOption[])&#10;     * Files.readAttributes} method may be used.&#10;     *&#10;     * @return  The length, in bytes, of the file denoted by this abstract&#10;     *          pathname, or <code>0L</code> if the file does not exist.  Some&#10;     *          operating systems may return <code>0L</code> for pathnames&#10;     *          denoting system-dependent entities such as devices or pipes.&#10;     *&#10;     * @throws  SecurityException&#10;     *          If a security manager exists and its <code>{@link&#10;     *          java.lang.SecurityManager#checkRead(java.lang.String)}</code>&#10;     *          method denies read access to the file&#10;     "
  ]
  node [
    id 2484
    label "public boolean createNewFile() throws IOException"
    type "method"
    comment "&#10;     * Atomically creates a new, empty file named by this abstract pathname if&#10;     * and only if a file with this name does not yet exist.  The check for the&#10;     * existence of the file and the creation of the file if it does not exist&#10;     * are a single operation that is atomic with respect to all other&#10;     * filesystem activities that might affect the file.&#10;     * <P>&#10;     * Note: this method should <i>not</i> be used for file-locking, as&#10;     * the resulting protocol cannot be made to work reliably. The&#10;     * {@link java.nio.channels.FileLock FileLock}&#10;     * facility should be used instead.&#10;     *&#10;     * @return  <code>true</code> if the named file does not exist and was&#10;     *          successfully created; <code>false</code> if the named file&#10;     *          already exists&#10;     *&#10;     * @throws  IOException&#10;     *          If an I/O error occurred&#10;     *&#10;     * @throws  SecurityException&#10;     *          If a security manager exists and its <code>{@link&#10;     *          java.lang.SecurityManager#checkWrite(java.lang.String)}</code>&#10;     *          method denies write access to the file&#10;     *&#10;     * @since 1.2&#10;     "
  ]
  node [
    id 2485
    label "public boolean delete()"
    type "method"
    comment "&#10;     * Deletes the file or directory denoted by this abstract pathname.  If&#10;     * this pathname denotes a directory, then the directory must be empty in&#10;     * order to be deleted.&#10;     *&#10;     * <p> Note that the {@link java.nio.file.Files} class defines the {@link&#10;     * java.nio.file.Files#delete(Path) delete} method to throw an {@link IOException}&#10;     * when a file cannot be deleted. This is useful for error reporting and to&#10;     * diagnose why a file cannot be deleted.&#10;     *&#10;     * @return  <code>true</code> if and only if the file or directory is&#10;     *          successfully deleted; <code>false</code> otherwise&#10;     *&#10;     * @throws  SecurityException&#10;     *          If a security manager exists and its <code>{@link&#10;     *          java.lang.SecurityManager#checkDelete}</code> method denies&#10;     *          delete access to the file&#10;     "
  ]
  node [
    id 2486
    label "public void deleteOnExit()"
    type "method"
    comment "&#10;     * Requests that the file or directory denoted by this abstract&#10;     * pathname be deleted when the virtual machine terminates.&#10;     * Files (or directories) are deleted in the reverse order that&#10;     * they are registered. Invoking this method to delete a file or&#10;     * directory that is already registered for deletion has no effect.&#10;     * Deletion will be attempted only for normal termination of the&#10;     * virtual machine, as defined by the Java Language Specification.&#10;     *&#10;     * <p> Once deletion has been requested, it is not possible to cancel the&#10;     * request.  This method should therefore be used with care.&#10;     *&#10;     * <P>&#10;     * Note: this method should <i>not</i> be used for file-locking, as&#10;     * the resulting protocol cannot be made to work reliably. The&#10;     * {@link java.nio.channels.FileLock FileLock}&#10;     * facility should be used instead.&#10;     *&#10;     * <p><i>Note that on Android, the application lifecycle does not include VM termination,&#10;     * so calling this method will not ensure that files are deleted</i>. Instead, you should&#10;     * use the most appropriate out of:&#10;     * <ul>&#10;     * <li>Use a {@code finally} clause to manually invoke {@link #delete}.&#10;     * <li>Maintain your own set of files to delete, and process it at an appropriate point&#10;     * in your application's lifecycle.&#10;     * <li>Use the Unix trick of deleting the file as soon as all readers and writers have&#10;     * opened it. No new readers/writers will be able to access the file, but all existing&#10;     * ones will still have access until the last one closes the file.&#10;     * </ul>&#10;     *&#10;     * @throws  SecurityException&#10;     *          If a security manager exists and its <code>{@link&#10;     *          java.lang.SecurityManager#checkDelete}</code> method denies&#10;     *          delete access to the file&#10;     *&#10;     * @see #delete&#10;     *&#10;     * @since 1.2&#10;     "
  ]
  node [
    id 2487
    label "public String[] list()"
    type "method"
    comment "&#10;     * Returns an array of strings naming the files and directories in the&#10;     * directory denoted by this abstract pathname.&#10;     *&#10;     * <p> If this abstract pathname does not denote a directory, then this&#10;     * method returns {@code null}.  Otherwise an array of strings is&#10;     * returned, one for each file or directory in the directory.  Names&#10;     * denoting the directory itself and the directory's parent directory are&#10;     * not included in the result.  Each string is a file name rather than a&#10;     * complete path.&#10;     *&#10;     * <p> There is no guarantee that the name strings in the resulting array&#10;     * will appear in any specific order; they are not, in particular,&#10;     * guaranteed to appear in alphabetical order.&#10;     *&#10;     * <p> Note that the {@link java.nio.file.Files} class defines the {@link&#10;     * java.nio.file.Files#newDirectoryStream(Path) newDirectoryStream} method to&#10;     * open a directory and iterate over the names of the files in the directory.&#10;     * This may use less resources when working with very large directories, and&#10;     * may be more responsive when working with remote directories.&#10;     *&#10;     * @return  An array of strings naming the files and directories in the&#10;     *          directory denoted by this abstract pathname.  The array will be&#10;     *          empty if the directory is empty.  Returns {@code null} if&#10;     *          this abstract pathname does not denote a directory, or if an&#10;     *          I/O error occurs.&#10;     *&#10;     * @throws  SecurityException&#10;     *          If a security manager exists and its {@link&#10;     *          SecurityManager#checkRead(String)} method denies read access to&#10;     *          the directory&#10;     "
  ]
  node [
    id 2488
    label "public String[] list(FilenameFilter filter)"
    type "method"
    comment "&#10;     * Returns an array of strings naming the files and directories in the&#10;     * directory denoted by this abstract pathname that satisfy the specified&#10;     * filter.  The behavior of this method is the same as that of the&#10;     * {@link #list()} method, except that the strings in the returned array&#10;     * must satisfy the filter.  If the given {@code filter} is {@code null}&#10;     * then all names are accepted.  Otherwise, a name satisfies the filter if&#10;     * and only if the value {@code true} results when the {@link&#10;     * FilenameFilter#accept FilenameFilter.accept(File,&#38;nbsp;String)} method&#10;     * of the filter is invoked on this abstract pathname and the name of a&#10;     * file or directory in the directory that it denotes.&#10;     *&#10;     * @param  filter&#10;     *         A filename filter&#10;     *&#10;     * @return  An array of strings naming the files and directories in the&#10;     *          directory denoted by this abstract pathname that were accepted&#10;     *          by the given {@code filter}.  The array will be empty if the&#10;     *          directory is empty or if no names were accepted by the filter.&#10;     *          Returns {@code null} if this abstract pathname does not denote&#10;     *          a directory, or if an I/O error occurs.&#10;     *&#10;     * @throws  SecurityException&#10;     *          If a security manager exists and its {@link&#10;     *          SecurityManager#checkRead(String)} method denies read access to&#10;     *          the directory&#10;     *&#10;     * @see java.nio.file.Files#newDirectoryStream(Path,String)&#10;     "
  ]
  node [
    id 2489
    label "list()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2490
    label "java.io.FilenameFilter"
    type "class"
    comment "&#10; * Instances of classes that implement this interface are used to&#10; * filter filenames. These instances are used to filter directory&#10; * listings in the <code>list</code> method of class&#10; * <code>File</code>, and by the Abstract Window Toolkit's file&#10; * dialog component.&#10; *&#10; * @author  Arthur van Hoff&#10; * @author  Jonathan Payne&#10; * @see     java.io.File&#10; * @see     java.io.File#list(java.io.FilenameFilter)&#10; * @since   1.0&#10; "
  ]
  node [
    id 2491
    label " boolean accept(File dir, String name)"
    type "method"
    comment "&#10;     * Tests if a specified file should be included in a file list.&#10;     *&#10;     * @param   dir    the directory in which the file was found.&#10;     * @param   name   the name of the file.&#10;     * @return  <code>true</code> if and only if the name should be&#10;     * included in the file list; <code>false</code> otherwise.&#10;     "
  ]
  node [
    id 2492
    label "public File[] listFiles()"
    type "method"
    comment "&#10;     * Returns an array of abstract pathnames denoting the files in the&#10;     * directory denoted by this abstract pathname.&#10;     *&#10;     * <p> If this abstract pathname does not denote a directory, then this&#10;     * method returns {@code null}.  Otherwise an array of {@code File} objects&#10;     * is returned, one for each file or directory in the directory.  Pathnames&#10;     * denoting the directory itself and the directory's parent directory are&#10;     * not included in the result.  Each resulting abstract pathname is&#10;     * constructed from this abstract pathname using the {@link #File(File,&#10;     * String) File(File,&#38;nbsp;String)} constructor.  Therefore if this&#10;     * pathname is absolute then each resulting pathname is absolute; if this&#10;     * pathname is relative then each resulting pathname will be relative to&#10;     * the same directory.&#10;     *&#10;     * <p> There is no guarantee that the name strings in the resulting array&#10;     * will appear in any specific order; they are not, in particular,&#10;     * guaranteed to appear in alphabetical order.&#10;     *&#10;     * <p> Note that the {@link java.nio.file.Files} class defines the {@link&#10;     * java.nio.file.Files#newDirectoryStream(Path) newDirectoryStream} method&#10;     * to open a directory and iterate over the names of the files in the&#10;     * directory. This may use less resources when working with very large&#10;     * directories.&#10;     *&#10;     * @return  An array of abstract pathnames denoting the files and&#10;     *          directories in the directory denoted by this abstract pathname.&#10;     *          The array will be empty if the directory is empty.  Returns&#10;     *          {@code null} if this abstract pathname does not denote a&#10;     *          directory, or if an I/O error occurs.&#10;     *&#10;     * @throws  SecurityException&#10;     *          If a security manager exists and its {@link&#10;     *          SecurityManager#checkRead(String)} method denies read access to&#10;     *          the directory&#10;     *&#10;     * @since  1.2&#10;     "
  ]
  node [
    id 2493
    label "File(File"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2494
    label "public File[] listFiles(FilenameFilter filter)"
    type "method"
    comment "&#10;     * Returns an array of abstract pathnames denoting the files and&#10;     * directories in the directory denoted by this abstract pathname that&#10;     * satisfy the specified filter.  The behavior of this method is the same&#10;     * as that of the {@link #listFiles()} method, except that the pathnames in&#10;     * the returned array must satisfy the filter.  If the given {@code filter}&#10;     * is {@code null} then all pathnames are accepted.  Otherwise, a pathname&#10;     * satisfies the filter if and only if the value {@code true} results when&#10;     * the {@link FilenameFilter#accept&#10;     * FilenameFilter.accept(File,&#38;nbsp;String)} method of the filter is&#10;     * invoked on this abstract pathname and the name of a file or directory in&#10;     * the directory that it denotes.&#10;     *&#10;     * @param  filter&#10;     *         A filename filter&#10;     *&#10;     * @return  An array of abstract pathnames denoting the files and&#10;     *          directories in the directory denoted by this abstract pathname.&#10;     *          The array will be empty if the directory is empty.  Returns&#10;     *          {@code null} if this abstract pathname does not denote a&#10;     *          directory, or if an I/O error occurs.&#10;     *&#10;     * @throws  SecurityException&#10;     *          If a security manager exists and its {@link&#10;     *          SecurityManager#checkRead(String)} method denies read access to&#10;     *          the directory&#10;     *&#10;     * @since  1.2&#10;     * @see java.nio.file.Files#newDirectoryStream(Path,String)&#10;     "
  ]
  node [
    id 2495
    label "listFiles()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2496
    label "public File[] listFiles(FileFilter filter)"
    type "method"
    comment "&#10;     * Returns an array of abstract pathnames denoting the files and&#10;     * directories in the directory denoted by this abstract pathname that&#10;     * satisfy the specified filter.  The behavior of this method is the same&#10;     * as that of the {@link #listFiles()} method, except that the pathnames in&#10;     * the returned array must satisfy the filter.  If the given {@code filter}&#10;     * is {@code null} then all pathnames are accepted.  Otherwise, a pathname&#10;     * satisfies the filter if and only if the value {@code true} results when&#10;     * the {@link FileFilter#accept FileFilter.accept(File)} method of the&#10;     * filter is invoked on the pathname.&#10;     *&#10;     * @param  filter&#10;     *         A file filter&#10;     *&#10;     * @return  An array of abstract pathnames denoting the files and&#10;     *          directories in the directory denoted by this abstract pathname.&#10;     *          The array will be empty if the directory is empty.  Returns&#10;     *          {@code null} if this abstract pathname does not denote a&#10;     *          directory, or if an I/O error occurs.&#10;     *&#10;     * @throws  SecurityException&#10;     *          If a security manager exists and its {@link&#10;     *          SecurityManager#checkRead(String)} method denies read access to&#10;     *          the directory&#10;     *&#10;     * @since  1.2&#10;     * @see java.nio.file.Files#newDirectoryStream(Path,java.nio.file.DirectoryStream.Filter)&#10;     "
  ]
  node [
    id 2497
    label "java.io.FileFilter"
    type "class"
    comment "&#10; * A filter for abstract pathnames.&#10; *&#10; * <p> Instances of this interface may be passed to the <code>{@link&#10; * File#listFiles(java.io.FileFilter) listFiles(FileFilter)}</code> method&#10; * of the <code>{@link java.io.File}</code> class.&#10; *&#10; * @since 1.2&#10; "
  ]
  node [
    id 2498
    label " boolean accept(File pathname)"
    type "method"
    comment "&#10;     * Tests whether or not the specified abstract pathname should be&#10;     * included in a pathname list.&#10;     *&#10;     * @param  pathname  The abstract pathname to be tested&#10;     * @return  <code>true</code> if and only if <code>pathname</code>&#10;     *          should be included&#10;     "
  ]
  node [
    id 2499
    label "public boolean mkdir()"
    type "method"
    comment "&#10;     * Creates the directory named by this abstract pathname.&#10;     *&#10;     * @return  <code>true</code> if and only if the directory was&#10;     *          created; <code>false</code> otherwise&#10;     *&#10;     * @throws  SecurityException&#10;     *          If a security manager exists and its <code>{@link&#10;     *          java.lang.SecurityManager#checkWrite(java.lang.String)}</code>&#10;     *          method does not permit the named directory to be created&#10;     "
  ]
  node [
    id 2500
    label "public boolean mkdirs()"
    type "method"
    comment "&#10;     * Creates the directory named by this abstract pathname, including any&#10;     * necessary but nonexistent parent directories.  Note that if this&#10;     * operation fails it may have succeeded in creating some of the necessary&#10;     * parent directories.&#10;     *&#10;     * @return  <code>true</code> if and only if the directory was created,&#10;     *          along with all necessary parent directories; <code>false</code>&#10;     *          otherwise&#10;     *&#10;     * @throws  SecurityException&#10;     *          If a security manager exists and its <code>{@link&#10;     *          java.lang.SecurityManager#checkRead(java.lang.String)}</code>&#10;     *          method does not permit verification of the existence of the&#10;     *          named directory and all necessary parent directories; or if&#10;     *          the <code>{@link&#10;     *          java.lang.SecurityManager#checkWrite(java.lang.String)}</code>&#10;     *          method does not permit the named directory and all necessary&#10;     *          parent directories to be created&#10;     "
  ]
  node [
    id 2501
    label "public boolean renameTo(File dest)"
    type "method"
    comment "&#10;     * Renames the file denoted by this abstract pathname.&#10;     *&#10;     * <p>Many failures are possible. Some of the more likely failures include:&#10;     * <ul>&#10;     * <li>Write permission is required on the directories containing both the source and&#10;     * destination paths.&#10;     * <li>Search permission is required for all parents of both paths.&#10;     * <li>Both paths be on the same mount point. On Android, applications are most likely to hit&#10;     * this restriction when attempting to copy between internal storage and an SD card.&#10;     * </ul>&#10;     *&#10;     * <p>The return value should always be checked to make sure&#10;     * that the rename operation was successful.&#10;     *&#10;     * <p> Note that the {@link java.nio.file.Files} class defines the {@link&#10;     * java.nio.file.Files#move move} method to move or rename a file in a&#10;     * platform independent manner.&#10;     *&#10;     * @param  dest  The new abstract pathname for the named file&#10;     *&#10;     * @return  <code>true</code> if and only if the renaming succeeded;&#10;     *          <code>false</code> otherwise&#10;     *&#10;     * @throws  SecurityException&#10;     *          If a security manager exists and its <code>{@link&#10;     *          java.lang.SecurityManager#checkWrite(java.lang.String)}</code>&#10;     *          method denies write access to either the old or new pathnames&#10;     *&#10;     * @throws  NullPointerException&#10;     *          If parameter <code>dest</code> is <code>null</code>&#10;     "
  ]
  node [
    id 2502
    label "public boolean setLastModified(long time)"
    type "method"
    comment "&#10;     * Sets the last-modified time of the file or directory named by this&#10;     * abstract pathname.&#10;     *&#10;     * <p> All platforms support file-modification times to the nearest second,&#10;     * but some provide more precision.  The argument will be truncated to fit&#10;     * the supported precision.  If the operation succeeds and no intervening&#10;     * operations on the file take place, then the next invocation of the&#10;     * <code>{@link #lastModified}</code> method will return the (possibly&#10;     * truncated) <code>time</code> argument that was passed to this method.&#10;     *&#10;     * @param  time  The new last-modified time, measured in milliseconds since&#10;     *               the epoch (00:00:00 GMT, January 1, 1970)&#10;     *&#10;     * @return <code>true</code> if and only if the operation succeeded;&#10;     *          <code>false</code> otherwise&#10;     *&#10;     * @throws  IllegalArgumentException  If the argument is negative&#10;     *&#10;     * @throws  SecurityException&#10;     *          If a security manager exists and its <code>{@link&#10;     *          java.lang.SecurityManager#checkWrite(java.lang.String)}</code>&#10;     *          method denies write access to the named file&#10;     *&#10;     * @since 1.2&#10;     "
  ]
  node [
    id 2503
    label "lastModified"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2504
    label "public boolean setReadOnly()"
    type "method"
    comment "&#10;     * Marks the file or directory named by this abstract pathname so that&#10;     * only read operations are allowed. After invoking this method the file&#10;     * or directory will not change until it is either deleted or marked&#10;     * to allow write access. Whether or not a read-only file or&#10;     * directory may be deleted depends upon the underlying system.&#10;     *&#10;     * @return <code>true</code> if and only if the operation succeeded;&#10;     *          <code>false</code> otherwise&#10;     *&#10;     * @throws  SecurityException&#10;     *          If a security manager exists and its <code>{@link&#10;     *          java.lang.SecurityManager#checkWrite(java.lang.String)}</code>&#10;     *          method denies write access to the named file&#10;     *&#10;     * @since 1.2&#10;     "
  ]
  node [
    id 2505
    label "public boolean setWritable(boolean writable, boolean ownerOnly)"
    type "method"
    comment "&#10;     * Sets the owner's or everybody's write permission for this abstract&#10;     * pathname.&#10;     *&#10;     * <p> The {@link java.nio.file.Files} class defines methods that operate on&#10;     * file attributes including file permissions. This may be used when finer&#10;     * manipulation of file permissions is required.&#10;     *&#10;     * @param   writable&#10;     *          If <code>true</code>, sets the access permission to allow write&#10;     *          operations; if <code>false</code> to disallow write operations&#10;     *&#10;     * @param   ownerOnly&#10;     *          If <code>true</code>, the write permission applies only to the&#10;     *          owner's write permission; otherwise, it applies to everybody.  If&#10;     *          the underlying file system can not distinguish the owner's write&#10;     *          permission from that of others, then the permission will apply to&#10;     *          everybody, regardless of this value.&#10;     *&#10;     * @return  <code>true</code> if and only if the operation succeeded. The&#10;     *          operation will fail if the user does not have permission to change&#10;     *          the access permissions of this abstract pathname.&#10;     *&#10;     * @throws  SecurityException&#10;     *          If a security manager exists and its <code>{@link&#10;     *          java.lang.SecurityManager#checkWrite(java.lang.String)}</code>&#10;     *          method denies write access to the named file&#10;     *&#10;     * @since 1.6&#10;     "
  ]
  node [
    id 2506
    label "public boolean setWritable(boolean writable)"
    type "method"
    comment "&#10;     * A convenience method to set the owner's write permission for this abstract&#10;     * pathname.&#10;     *&#10;     * <p> An invocation of this method of the form <tt>file.setWritable(arg)</tt>&#10;     * behaves in exactly the same way as the invocation&#10;     *&#10;     * <pre>&#10;     *     file.setWritable(arg, true) </pre>&#10;     *&#10;     * @param   writable&#10;     *          If <code>true</code>, sets the access permission to allow write&#10;     *          operations; if <code>false</code> to disallow write operations&#10;     *&#10;     * @return  <code>true</code> if and only if the operation succeeded.  The&#10;     *          operation will fail if the user does not have permission to&#10;     *          change the access permissions of this abstract pathname.&#10;     *&#10;     * @throws  SecurityException&#10;     *          If a security manager exists and its <code>{@link&#10;     *          java.lang.SecurityManager#checkWrite(java.lang.String)}</code>&#10;     *          method denies write access to the file&#10;     *&#10;     * @since 1.6&#10;     "
  ]
  node [
    id 2507
    label "public boolean setReadable(boolean readable, boolean ownerOnly)"
    type "method"
    comment "&#10;     * Sets the owner's or everybody's read permission for this abstract&#10;     * pathname.&#10;     *&#10;     * <p> The {@link java.nio.file.Files} class defines methods that operate on&#10;     * file attributes including file permissions. This may be used when finer&#10;     * manipulation of file permissions is required.&#10;     *&#10;     * @param   readable&#10;     *          If <code>true</code>, sets the access permission to allow read&#10;     *          operations; if <code>false</code> to disallow read operations&#10;     *&#10;     * @param   ownerOnly&#10;     *          If <code>true</code>, the read permission applies only to the&#10;     *          owner's read permission; otherwise, it applies to everybody.  If&#10;     *          the underlying file system can not distinguish the owner's read&#10;     *          permission from that of others, then the permission will apply to&#10;     *          everybody, regardless of this value.&#10;     *&#10;     * @return  <code>true</code> if and only if the operation succeeded.  The&#10;     *          operation will fail if the user does not have permission to&#10;     *          change the access permissions of this abstract pathname.  If&#10;     *          <code>readable</code> is <code>false</code> and the underlying&#10;     *          file system does not implement a read permission, then the&#10;     *          operation will fail.&#10;     *&#10;     * @throws  SecurityException&#10;     *          If a security manager exists and its <code>{@link&#10;     *          java.lang.SecurityManager#checkWrite(java.lang.String)}</code>&#10;     *          method denies write access to the file&#10;     *&#10;     * @since 1.6&#10;     "
  ]
  node [
    id 2508
    label "public boolean setReadable(boolean readable)"
    type "method"
    comment "&#10;     * A convenience method to set the owner's read permission for this abstract&#10;     * pathname.&#10;     *&#10;     * <p>An invocation of this method of the form <tt>file.setReadable(arg)</tt>&#10;     * behaves in exactly the same way as the invocation&#10;     *&#10;     * <pre>&#10;     *     file.setReadable(arg, true) </pre>&#10;     *&#10;     * @param  readable&#10;     *          If <code>true</code>, sets the access permission to allow read&#10;     *          operations; if <code>false</code> to disallow read operations&#10;     *&#10;     * @return  <code>true</code> if and only if the operation succeeded.  The&#10;     *          operation will fail if the user does not have permission to&#10;     *          change the access permissions of this abstract pathname.  If&#10;     *          <code>readable</code> is <code>false</code> and the underlying&#10;     *          file system does not implement a read permission, then the&#10;     *          operation will fail.&#10;     *&#10;     * @throws  SecurityException&#10;     *          If a security manager exists and its <code>{@link&#10;     *          java.lang.SecurityManager#checkWrite(java.lang.String)}</code>&#10;     *          method denies write access to the file&#10;     *&#10;     * @since 1.6&#10;     "
  ]
  node [
    id 2509
    label "public boolean setExecutable(boolean executable, boolean ownerOnly)"
    type "method"
    comment "&#10;     * Sets the owner's or everybody's execute permission for this abstract&#10;     * pathname.&#10;     *&#10;     * <p> The {@link java.nio.file.Files} class defines methods that operate on&#10;     * file attributes including file permissions. This may be used when finer&#10;     * manipulation of file permissions is required.&#10;     *&#10;     * @param   executable&#10;     *          If <code>true</code>, sets the access permission to allow execute&#10;     *          operations; if <code>false</code> to disallow execute operations&#10;     *&#10;     * @param   ownerOnly&#10;     *          If <code>true</code>, the execute permission applies only to the&#10;     *          owner's execute permission; otherwise, it applies to everybody.&#10;     *          If the underlying file system can not distinguish the owner's&#10;     *          execute permission from that of others, then the permission will&#10;     *          apply to everybody, regardless of this value.&#10;     *&#10;     * @return  <code>true</code> if and only if the operation succeeded.  The&#10;     *          operation will fail if the user does not have permission to&#10;     *          change the access permissions of this abstract pathname.  If&#10;     *          <code>executable</code> is <code>false</code> and the underlying&#10;     *          file system does not implement an execute permission, then the&#10;     *          operation will fail.&#10;     *&#10;     * @throws  SecurityException&#10;     *          If a security manager exists and its <code>{@link&#10;     *          java.lang.SecurityManager#checkWrite(java.lang.String)}</code>&#10;     *          method denies write access to the file&#10;     *&#10;     * @since 1.6&#10;     "
  ]
  node [
    id 2510
    label "public boolean setExecutable(boolean executable)"
    type "method"
    comment "&#10;     * A convenience method to set the owner's execute permission for this&#10;     * abstract pathname.&#10;     *&#10;     * <p>An invocation of this method of the form <tt>file.setExcutable(arg)</tt>&#10;     * behaves in exactly the same way as the invocation&#10;     *&#10;     * <pre>&#10;     *     file.setExecutable(arg, true) </pre>&#10;     *&#10;     * @param   executable&#10;     *          If <code>true</code>, sets the access permission to allow execute&#10;     *          operations; if <code>false</code> to disallow execute operations&#10;     *&#10;     * @return   <code>true</code> if and only if the operation succeeded.  The&#10;     *           operation will fail if the user does not have permission to&#10;     *           change the access permissions of this abstract pathname.  If&#10;     *           <code>executable</code> is <code>false</code> and the underlying&#10;     *           file system does not implement an execute permission, then the&#10;     *           operation will fail.&#10;     *&#10;     * @throws  SecurityException&#10;     *          If a security manager exists and its <code>{@link&#10;     *          java.lang.SecurityManager#checkWrite(java.lang.String)}</code>&#10;     *          method denies write access to the file&#10;     *&#10;     * @since 1.6&#10;     "
  ]
  node [
    id 2511
    label "public boolean canExecute()"
    type "method"
    comment "&#10;     * Tests whether the application can execute the file denoted by this&#10;     * abstract pathname.&#10;     *&#10;     * @return  <code>true</code> if and only if the abstract pathname exists&#10;     *          <em>and</em> the application is allowed to execute the file&#10;     *&#10;     * @throws  SecurityException&#10;     *          If a security manager exists and its <code>{@link&#10;     *          java.lang.SecurityManager#checkExec(java.lang.String)}</code>&#10;     *          method denies execute access to the file&#10;     *&#10;     * @since 1.6&#10;     "
  ]
  node [
    id 2512
    label "public static File[] listRoots()"
    type "method"
    comment "&#10;     * Returns the file system roots. On Android and other Unix systems, there is&#10;     * a single root, {@code /}.&#10;     "
  ]
  node [
    id 2513
    label "public long getTotalSpace()"
    type "method"
    comment "&#10;     * Returns the size of the partition <a href=&#34;#partName&#34;>named</a> by this&#10;     * abstract pathname.&#10;     *&#10;     * @return  The size, in bytes, of the partition or <tt>0L</tt> if this&#10;     *          abstract pathname does not name a partition&#10;     *&#10;     * @throws  SecurityException&#10;     *          If a security manager has been installed and it denies&#10;     *          {@link RuntimePermission}<tt>(&#34;getFileSystemAttributes&#34;)</tt>&#10;     *          or its {@link SecurityManager#checkRead(String)} method denies&#10;     *          read access to the file named by this abstract pathname&#10;     *&#10;     * @since  1.6&#10;     "
  ]
  node [
    id 2514
    label "public long getFreeSpace()"
    type "method"
    comment "&#10;     * Returns the number of unallocated bytes in the partition <a&#10;     * href=&#34;#partName&#34;>named</a> by this abstract path name.&#10;     *&#10;     * <p> The returned number of unallocated bytes is a hint, but not&#10;     * a guarantee, that it is possible to use most or any of these&#10;     * bytes.  The number of unallocated bytes is most likely to be&#10;     * accurate immediately after this call.  It is likely to be made&#10;     * inaccurate by any external I/O operations including those made&#10;     * on the system outside of this virtual machine.  This method&#10;     * makes no guarantee that write operations to this file system&#10;     * will succeed.&#10;     *&#10;     * @return  The number of unallocated bytes on the partition or <tt>0L</tt>&#10;     *          if the abstract pathname does not name a partition.  This&#10;     *          value will be less than or equal to the total file system size&#10;     *          returned by {@link #getTotalSpace}.&#10;     *&#10;     * @throws  SecurityException&#10;     *          If a security manager has been installed and it denies&#10;     *          {@link RuntimePermission}<tt>(&#34;getFileSystemAttributes&#34;)</tt>&#10;     *          or its {@link SecurityManager#checkRead(String)} method denies&#10;     *          read access to the file named by this abstract pathname&#10;     *&#10;     * @since  1.6&#10;     "
  ]
  node [
    id 2515
    label "getTotalSpace"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2516
    label "public long getUsableSpace()"
    type "method"
    comment "&#10;     * Returns the number of bytes available to this virtual machine on the&#10;     * partition <a href=&#34;#partName&#34;>named</a> by this abstract pathname.  When&#10;     * possible, this method checks for write permissions and other operating&#10;     * system restrictions and will therefore usually provide a more accurate&#10;     * estimate of how much new data can actually be written than {@link&#10;     * #getFreeSpace}.&#10;     *&#10;     * <p> The returned number of available bytes is a hint, but not a&#10;     * guarantee, that it is possible to use most or any of these bytes.  The&#10;     * number of unallocated bytes is most likely to be accurate immediately&#10;     * after this call.  It is likely to be made inaccurate by any external&#10;     * I/O operations including those made on the system outside of this&#10;     * virtual machine.  This method makes no guarantee that write operations&#10;     * to this file system will succeed.&#10;     *&#10;     * <p> On Android (and other Unix-based systems), this method returns the number of free bytes&#10;     * available to non-root users, regardless of whether you're actually running as root,&#10;     * and regardless of any quota or other restrictions that might apply to the user.&#10;     * (The {@code getFreeSpace} method returns the number of bytes potentially available to root.)&#10;     *&#10;     * @return  The number of available bytes on the partition or <tt>0L</tt>&#10;     *          if the abstract pathname does not name a partition.  On&#10;     *          systems where this information is not available, this method&#10;     *          will be equivalent to a call to {@link #getFreeSpace}.&#10;     *&#10;     * @throws  SecurityException&#10;     *          If a security manager has been installed and it denies&#10;     *          {@link RuntimePermission}<tt>(&#34;getFileSystemAttributes&#34;)</tt>&#10;     *          or its {@link SecurityManager#checkRead(String)} method denies&#10;     *          read access to the file named by this abstract pathname&#10;     *&#10;     * @since  1.6&#10;     "
  ]
  node [
    id 2517
    label "getFreeSpace"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2518
    label "public static File createTempFile(String prefix, String suffix, File directory) throws IOException"
    type "method"
    comment "&#10;     * <p> Creates a new empty file in the specified directory, using the&#10;     * given prefix and suffix strings to generate its name.  If this method&#10;     * returns successfully then it is guaranteed that:&#10;     *&#10;     * <ol>&#10;     * <li> The file denoted by the returned abstract pathname did not exist&#10;     *      before this method was invoked, and&#10;     * <li> Neither this method nor any of its variants will return the same&#10;     *      abstract pathname again in the current invocation of the virtual&#10;     *      machine.&#10;     * </ol>&#10;     *&#10;     * This method provides only part of a temporary-file facility.  To arrange&#10;     * for a file created by this method to be deleted automatically, use the&#10;     * <code>{@link #deleteOnExit}</code> method.&#10;     *&#10;     * <p> The <code>prefix</code> argument must be at least three characters&#10;     * long.  It is recommended that the prefix be a short, meaningful string&#10;     * such as <code>&#34;hjb&#34;</code> or <code>&#34;mail&#34;</code>.  The&#10;     * <code>suffix</code> argument may be <code>null</code>, in which case the&#10;     * suffix <code>&#34;.tmp&#34;</code> will be used.&#10;     *&#10;     * <p> To create the new file, the prefix and the suffix may first be&#10;     * adjusted to fit the limitations of the underlying platform.  If the&#10;     * prefix is too long then it will be truncated, but its first three&#10;     * characters will always be preserved.  If the suffix is too long then it&#10;     * too will be truncated, but if it begins with a period character&#10;     * (<code>'.'</code>) then the period and the first three characters&#10;     * following it will always be preserved.  Once these adjustments have been&#10;     * made the name of the new file will be generated by concatenating the&#10;     * prefix, five or more internally-generated characters, and the suffix.&#10;     *&#10;     * <p> If the <code>directory</code> argument is <code>null</code> then the&#10;     * system-dependent default temporary-file directory will be used.  The&#10;     * default temporary-file directory is specified by the system property&#10;     * <code>java.io.tmpdir</code>.  On UNIX systems the default value of this&#10;     * property is typically <code>&#34;/tmp&#34;</code> or <code>&#34;/var/tmp&#34;</code>; on&#10;     * Microsoft Windows systems it is typically <code>&#34;C:\\WINNT\\TEMP&#34;</code>.  A different&#10;     * value may be given to this system property when the Java virtual machine&#10;     * is invoked, but programmatic changes to this property are not guaranteed&#10;     * to have any effect upon the temporary directory used by this method.&#10;     *&#10;     * @param  prefix     The prefix string to be used in generating the file's&#10;     *                    name; must be at least three characters long&#10;     *&#10;     * @param  suffix     The suffix string to be used in generating the file's&#10;     *                    name; may be <code>null</code>, in which case the&#10;     *                    suffix <code>&#34;.tmp&#34;</code> will be used&#10;     *&#10;     * @param  directory  The directory in which the file is to be created, or&#10;     *                    <code>null</code> if the default temporary-file&#10;     *                    directory is to be used&#10;     *&#10;     * @return  An abstract pathname denoting a newly-created empty file&#10;     *&#10;     * @throws  IllegalArgumentException&#10;     *          If the <code>prefix</code> argument contains fewer than three&#10;     *          characters&#10;     *&#10;     * @throws  IOException  If a file could not be created&#10;     *&#10;     * @throws  SecurityException&#10;     *          If a security manager exists and its <code>{@link&#10;     *          java.lang.SecurityManager#checkWrite(java.lang.String)}</code>&#10;     *          method does not allow a file to be created&#10;     *&#10;     * @since 1.2&#10;     "
  ]
  node [
    id 2519
    label "deleteOnExit"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2520
    label "public static File createTempFile(String prefix, String suffix) throws IOException"
    type "method"
    comment "&#10;     * Creates an empty file in the default temporary-file directory, using&#10;     * the given prefix and suffix to generate its name. Invoking this method&#10;     * is equivalent to invoking <code>{@link #createTempFile(java.lang.String,&#10;     * java.lang.String, java.io.File)&#10;     * createTempFile(prefix,&#38;nbsp;suffix,&#38;nbsp;null)}</code>.&#10;     *&#10;     * <p> The {@link&#10;     * java.nio.file.Files#createTempFile(String,String,java.nio.file.attribute.FileAttribute[])&#10;     * Files.createTempFile} method provides an alternative method to create an&#10;     * empty file in the temporary-file directory. Files created by that method&#10;     * may have more restrictive access permissions to files created by this&#10;     * method and so may be more suited to security-sensitive applications.&#10;     *&#10;     * @param  prefix     The prefix string to be used in generating the file's&#10;     *                    name; must be at least three characters long&#10;     *&#10;     * @param  suffix     The suffix string to be used in generating the file's&#10;     *                    name; may be <code>null</code>, in which case the&#10;     *                    suffix <code>&#34;.tmp&#34;</code> will be used&#10;     *&#10;     * @return  An abstract pathname denoting a newly-created empty file&#10;     *&#10;     * @throws  IllegalArgumentException&#10;     *          If the <code>prefix</code> argument contains fewer than three&#10;     *          characters&#10;     *&#10;     * @throws  IOException  If a file could not be created&#10;     *&#10;     * @throws  SecurityException&#10;     *          If a security manager exists and its <code>{@link&#10;     *          java.lang.SecurityManager#checkWrite(java.lang.String)}</code>&#10;     *          method does not allow a file to be created&#10;     *&#10;     * @since 1.2&#10;     * @see java.nio.file.Files#createTempDirectory(String,FileAttribute[])&#10;     "
  ]
  node [
    id 2521
    label "createTempFile(java.lang.String"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2522
    label "public int compareTo(File pathname)"
    type "method"
    comment "&#10;     * Compares two abstract pathnames lexicographically.  The ordering&#10;     * defined by this method depends upon the underlying system.  On UNIX&#10;     * systems, alphabetic case is significant in comparing pathnames; on Microsoft Windows&#10;     * systems it is not.&#10;     *&#10;     * @param   pathname  The abstract pathname to be compared to this abstract&#10;     *                    pathname&#10;     *&#10;     * @return  Zero if the argument is equal to this abstract pathname, a&#10;     *          value less than zero if this abstract pathname is&#10;     *          lexicographically less than the argument, or a value greater&#10;     *          than zero if this abstract pathname is lexicographically&#10;     *          greater than the argument&#10;     *&#10;     * @since   1.2&#10;     "
  ]
  node [
    id 2523
    label "getPath"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2524
    label "private synchronized void writeObject(java.io.ObjectOutputStream s) throws IOException"
    type "method"
    comment "&#10;     * WriteObject is called to save this filename.&#10;     * The separator character is saved also so it can be replaced&#10;     * in case the path is reconstituted on a different host type.&#10;     * <p>&#10;     * @serialData  Default fields followed by separator character.&#10;     "
  ]
  node [
    id 2525
    label "private synchronized void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException"
    type "method"
    comment "&#10;     * readObject is called to restore this filename.&#10;     * The original separator character is read.  If it is different&#10;     * than the separator character on this system, then the old separator&#10;     * is replaced by the local separator.&#10;     "
  ]
  node [
    id 2526
    label "public Path toPath()"
    type "method"
    comment "&#10;     * Returns a {@link Path java.nio.file.Path} object constructed from the&#10;     * this abstract path. The resulting {@code Path} is associated with the&#10;     * {@link java.nio.file.FileSystems#getDefault default-filesystem}.&#10;     *&#10;     * <p> The first invocation of this method works as if invoking it were&#10;     * equivalent to evaluating the expression:&#10;     * <blockquote><pre>&#10;     * {@link java.nio.file.FileSystems#getDefault FileSystems.getDefault}().{@link&#10;     * java.nio.file.FileSystem#getPath getPath}(this.{@link #getPath getPath}());&#10;     * </pre></blockquote>&#10;     * Subsequent invocations of this method return the same {@code Path}.&#10;     *&#10;     * <p> If this abstract pathname is the empty abstract pathname then this&#10;     * method returns a {@code Path} that may be used to access the current&#10;     * user directory.&#10;     *&#10;     * @return  a {@code Path} constructed from this abstract path&#10;     *&#10;     * @throws  java.nio.file.InvalidPathException&#10;     *          if a {@code Path} object cannot be constructed from the abstract&#10;     *          path (see {@link java.nio.file.FileSystem#getPath FileSystem.getPath})&#10;     *&#10;     * @since   1.7&#10;     * @see Path#toFile&#10;     "
  ]
  node [
    id 2527
    label "getProperty(String)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2528
    label "public static String lineSeparator()"
    type "method"
    comment "&#10;     * Returns the system-dependent line separator string.  It always&#10;     * returns the same value - the initial value of the {@linkplain&#10;     * #getProperty(String) system property} {@code line.separator}.&#10;     *&#10;     * <p>On UNIX systems, it returns {@code &#34;\n&#34;}; on Microsoft&#10;     * Windows systems it returns {@code &#34;\r\n&#34;}.&#10;     *&#10;     * @return the system-dependent line separator string&#10;     * @since 1.7&#10;     "
  ]
  node [
    id 2529
    label "public static void setProperties(Properties props)"
    type "method"
    comment "&#10;     * Attempts to set all system properties. Copies all properties from&#10;     * {@code p} and discards system properties that are read only and cannot&#10;     * be modified. See {@link #getProperty} for a list of such properties.&#10;     "
  ]
  node [
    id 2530
    label "getProperty"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2531
    label "public static String getProperty(String key)"
    type "method"
    comment "&#10;     * Gets the system property indicated by the specified key.&#10;     * <p>&#10;     * First, if there is a security manager, its&#10;     * <code>checkPropertyAccess</code> method is called with the key as&#10;     * its argument. This may result in a SecurityException.&#10;     * <p>&#10;     * If there is no current set of system properties, a set of system&#10;     * properties is first created and initialized in the same manner as&#10;     * for the <code>getProperties</code> method.&#10;     *&#10;     * @param      key   the name of the system property.&#10;     * @return     the string value of the system property,&#10;     *             or <code>null</code> if there is no property with that key.&#10;     *&#10;     * @exception  SecurityException  if a security manager exists and its&#10;     *             <code>checkPropertyAccess</code> method doesn't allow&#10;     *              access to the specified system property.&#10;     * @exception  NullPointerException if <code>key</code> is&#10;     *             <code>null</code>.&#10;     * @exception  IllegalArgumentException if <code>key</code> is empty.&#10;     * @see        #setProperty&#10;     * @see        java.lang.SecurityException&#10;     * @see        java.lang.SecurityManager#checkPropertyAccess(java.lang.String)&#10;     * @see        java.lang.System#getProperties()&#10;     "
  ]
  node [
    id 2532
    label "public static String getProperty(String key, String def)"
    type "method"
    comment "&#10;     * Gets the system property indicated by the specified key.&#10;     * <p>&#10;     * First, if there is a security manager, its&#10;     * <code>checkPropertyAccess</code> method is called with the&#10;     * <code>key</code> as its argument.&#10;     * <p>&#10;     * If there is no current set of system properties, a set of system&#10;     * properties is first created and initialized in the same manner as&#10;     * for the <code>getProperties</code> method.&#10;     *&#10;     * @param      key   the name of the system property.&#10;     * @param      def   a default value.&#10;     * @return     the string value of the system property,&#10;     *             or the default value if there is no property with that key.&#10;     *&#10;     * @exception  SecurityException  if a security manager exists and its&#10;     *             <code>checkPropertyAccess</code> method doesn't allow&#10;     *             access to the specified system property.&#10;     * @exception  NullPointerException if <code>key</code> is&#10;     *             <code>null</code>.&#10;     * @exception  IllegalArgumentException if <code>key</code> is empty.&#10;     * @see        #setProperty&#10;     * @see        java.lang.SecurityManager#checkPropertyAccess(java.lang.String)&#10;     * @see        java.lang.System#getProperties()&#10;     "
  ]
  node [
    id 2533
    label "public static String setProperty(String key, String value)"
    type "method"
    comment "&#10;     * Sets the system property indicated by the specified key.&#10;     * <p>&#10;     * First, if a security manager exists, its&#10;     * <code>SecurityManager.checkPermission</code> method&#10;     * is called with a <code>PropertyPermission(key, &#34;write&#34;)</code>&#10;     * permission. This may result in a SecurityException being thrown.&#10;     * If no exception is thrown, the specified property is set to the given&#10;     * value.&#10;     * <p>&#10;     *&#10;     * @param      key   the name of the system property.&#10;     * @param      value the value of the system property.&#10;     * @return     the previous value of the system property,&#10;     *             or <code>null</code> if it did not have one.&#10;     *&#10;     * @exception  SecurityException  if a security manager exists and its&#10;     *             <code>checkPermission</code> method doesn't allow&#10;     *             setting of the specified property.&#10;     * @exception  NullPointerException if <code>key</code> or&#10;     *             <code>value</code> is <code>null</code>.&#10;     * @exception  IllegalArgumentException if <code>key</code> is empty.&#10;     * @see        #getProperty&#10;     * @see        java.lang.System#getProperty(java.lang.String)&#10;     * @see        java.lang.System#getProperty(java.lang.String, java.lang.String)&#10;     * @see        java.util.PropertyPermission&#10;     * @see        SecurityManager#checkPermission&#10;     * @since      1.2&#10;     "
  ]
  node [
    id 2534
    label "public static String clearProperty(String key)"
    type "method"
    comment "&#10;     * Removes the system property indicated by the specified key.&#10;     * <p>&#10;     * First, if a security manager exists, its&#10;     * <code>SecurityManager.checkPermission</code> method&#10;     * is called with a <code>PropertyPermission(key, &#34;write&#34;)</code>&#10;     * permission. This may result in a SecurityException being thrown.&#10;     * If no exception is thrown, the specified property is removed.&#10;     * <p>&#10;     *&#10;     * @param      key   the name of the system property to be removed.&#10;     * @return     the previous string value of the system property,&#10;     *             or <code>null</code> if there was no property with that key.&#10;     *&#10;     * @exception  SecurityException  if a security manager exists and its&#10;     *             <code>checkPropertyAccess</code> method doesn't allow&#10;     *              access to the specified system property.&#10;     * @exception  NullPointerException if <code>key</code> is&#10;     *             <code>null</code>.&#10;     * @exception  IllegalArgumentException if <code>key</code> is empty.&#10;     * @see        #getProperty&#10;     * @see        #setProperty&#10;     * @see        java.util.Properties&#10;     * @see        java.lang.SecurityException&#10;     * @see        java.lang.SecurityManager#checkPropertiesAccess()&#10;     * @since 1.5&#10;     "
  ]
  node [
    id 2535
    label "public static String getenv(String name)"
    type "method"
    comment "&#10;     * Gets the value of the specified environment variable. An&#10;     * environment variable is a system-dependent external named&#10;     * value.&#10;     *&#10;     * <p>If a security manager exists, its&#10;     * {@link SecurityManager#checkPermission checkPermission}&#10;     * method is called with a&#10;     * <code>{@link RuntimePermission}(&#34;getenv.&#34;+name)</code>&#10;     * permission.  This may result in a {@link SecurityException}&#10;     * being thrown.  If no exception is thrown the value of the&#10;     * variable <code>name</code> is returned.&#10;     *&#10;     * <p><a name=&#34;EnvironmentVSSystemProperties&#34;><i>System&#10;     * properties</i> and <i>environment variables</i></a> are both&#10;     * conceptually mappings between names and values.  Both&#10;     * mechanisms can be used to pass user-defined information to a&#10;     * Java process.  Environment variables have a more global effect,&#10;     * because they are visible to all descendants of the process&#10;     * which defines them, not just the immediate Java subprocess.&#10;     * They can have subtly different semantics, such as case&#10;     * insensitivity, on different operating systems.  For these&#10;     * reasons, environment variables are more likely to have&#10;     * unintended side effects.  It is best to use system properties&#10;     * where possible.  Environment variables should be used when a&#10;     * global effect is desired, or when an external system interface&#10;     * requires an environment variable (such as <code>PATH</code>).&#10;     *&#10;     * <p>On UNIX systems the alphabetic case of <code>name</code> is&#10;     * typically significant, while on Microsoft Windows systems it is&#10;     * typically not.  For example, the expression&#10;     * <code>System.getenv(&#34;FOO&#34;).equals(System.getenv(&#34;foo&#34;))</code>&#10;     * is likely to be true on Microsoft Windows.&#10;     *&#10;     * @param  name the name of the environment variable&#10;     * @return the string value of the variable, or <code>null</code>&#10;     *         if the variable is not defined in the system environment&#10;     * @throws NullPointerException if <code>name</code> is <code>null</code>&#10;     * @throws SecurityException&#10;     *         if a security manager exists and its&#10;     *         {@link SecurityManager#checkPermission checkPermission}&#10;     *         method doesn't allow access to the environment variable&#10;     *         <code>name</code>&#10;     * @see    #getenv()&#10;     * @see    ProcessBuilder#environment()&#10;     "
  ]
  node [
    id 2536
    label "public static java.util.Map<String, String> getenv()"
    type "method"
    comment "&#10;     * Returns an unmodifiable string map view of the current system environment.&#10;     * The environment is a system-dependent mapping from names to&#10;     * values which is passed from parent to child processes.&#10;     *&#10;     * <p>If the system does not support environment variables, an&#10;     * empty map is returned.&#10;     *&#10;     * <p>The returned map will never contain null keys or values.&#10;     * Attempting to query the presence of a null key or value will&#10;     * throw a {@link NullPointerException}.  Attempting to query&#10;     * the presence of a key or value which is not of type&#10;     * {@link String} will throw a {@link ClassCastException}.&#10;     *&#10;     * <p>The returned map and its collection views may not obey the&#10;     * general contract of the {@link Object#equals} and&#10;     * {@link Object#hashCode} methods.&#10;     *&#10;     * <p>The returned map is typically case-sensitive on all platforms.&#10;     *&#10;     * <p>If a security manager exists, its&#10;     * {@link SecurityManager#checkPermission checkPermission}&#10;     * method is called with a&#10;     * <code>{@link RuntimePermission}(&#34;getenv.*&#34;)</code>&#10;     * permission.  This may result in a {@link SecurityException} being&#10;     * thrown.&#10;     *&#10;     * <p>When passing information to a Java subprocess,&#10;     * <a href=#EnvironmentVSSystemProperties>system properties</a>&#10;     * are generally preferred over environment variables.&#10;     *&#10;     * @return the environment as a map of variable names to values&#10;     * @throws SecurityException&#10;     *         if a security manager exists and its&#10;     *         {@link SecurityManager#checkPermission checkPermission}&#10;     *         method doesn't allow access to the process environment&#10;     * @see    #getenv(String)&#10;     * @see    ProcessBuilder#environment()&#10;     * @since  1.5&#10;     "
  ]
  node [
    id 2537
    label "java.lang.ClassCastException"
    type "class"
    comment "&#10; * Thrown to indicate that the code has attempted to cast an object&#10; * to a subclass of which it is not an instance. For example, the&#10; * following code generates a {@code ClassCastException}:&#10; * <blockquote><pre>&#10; *     Object x = new Integer(0);&#10; *     System.out.println((String)x);&#10; * </pre></blockquote>&#10; *&#10; * @since   1.0&#10; "
  ]
  node [
    id 2538
    label "java.lang.NullPointerException"
    type "class"
    comment "&#10; * Thrown when an application attempts to use {@code null} in a&#10; * case where an object is required. These include:&#10; * <ul>&#10; * <li>Calling the instance method of a {@code null} object.&#10; * <li>Accessing or modifying the field of a {@code null} object.&#10; * <li>Taking the length of {@code null} as if it were an array.&#10; * <li>Accessing or modifying the slots of {@code null} as if it&#10; *     were an array.&#10; * <li>Throwing {@code null} as if it were a {@code Throwable}&#10; *     value.&#10; * </ul>&#10; * <p>&#10; * Applications should throw instances of this class to indicate&#10; * other illegal uses of the {@code null} object.&#10; *&#10; * {@code NullPointerException} objects may be constructed by the&#10; * virtual machine as if {@linkplain Throwable#Throwable(String,&#10; * Throwable, boolean, boolean) suppression were disabled and/or the&#10; * stack trace was not writable}.&#10; *&#10; * @since   1.0&#10; "
  ]
  node [
    id 2539
    label "public static void exit(int status)"
    type "method"
    comment "&#10;     * Terminates the currently running Java Virtual Machine. The&#10;     * argument serves as a status code; by convention, a nonzero status&#10;     * code indicates abnormal termination.&#10;     * <p>&#10;     * This method calls the <code>exit</code> method in class&#10;     * <code>Runtime</code>. This method never returns normally.&#10;     * <p>&#10;     * The call <code>System.exit(n)</code> is effectively equivalent to&#10;     * the call:&#10;     * <blockquote><pre>&#10;     * Runtime.getRuntime().exit(n)&#10;     * </pre></blockquote>&#10;     *&#10;     * @param      status   exit status.&#10;     * @throws  SecurityException&#10;     *        if a security manager exists and its <code>checkExit</code>&#10;     *        method doesn't allow exit with the specified status.&#10;     * @see        java.lang.Runtime#exit(int)&#10;     "
  ]
  node [
    id 2540
    label "public static void gc()"
    type "method"
    comment "&#10;     * Runs the garbage collector.&#10;     * <p>&#10;     * Calling the <code>gc</code> method suggests that the Java Virtual&#10;     * Machine expend effort toward recycling unused objects in order to&#10;     * make the memory they currently occupy available for quick reuse.&#10;     * When control returns from the method call, the Java Virtual&#10;     * Machine has made a best effort to reclaim space from all discarded&#10;     * objects.&#10;     * <p>&#10;     * The call <code>System.gc()</code> is effectively equivalent to the&#10;     * call:&#10;     * <blockquote><pre>&#10;     * Runtime.getRuntime().gc()&#10;     * </pre></blockquote>&#10;     * At API level 34 and lower, this does nothing unless it is preceded or&#10;     * followed by a runFinalization call.  Runtime.getRuntime().gc() always&#10;     * attempts to reclaim space.&#10;     * <p>&#10;     * Calling this indiscriminately is likely to severely degrade performance.&#10;     * Intended primarily for testing.&#10;     *&#10;     * @see     java.lang.Runtime#gc()&#10;     "
  ]
  node [
    id 2541
    label "public static void runFinalization()"
    type "method"
    comment "&#10;     * Runs the finalization methods of any objects pending finalization.&#10;     * <p>&#10;     * Calling this method suggests that the Java Virtual Machine expend&#10;     * effort toward running the <code>finalize</code> methods of objects&#10;     * that have been found to be discarded but whose <code>finalize</code>&#10;     * methods have not yet been run. When control returns from the&#10;     * method call, the Java Virtual Machine has made a best effort to&#10;     * complete all outstanding finalizations.&#10;     * <p>&#10;     * The call <code>System.runFinalization()</code> is effectively&#10;     * equivalent to the call:&#10;     * <blockquote><pre>&#10;     * Runtime.getRuntime().runFinalization()&#10;     * </pre></blockquote>&#10;     *&#10;     * @see     java.lang.Runtime#runFinalization()&#10;     "
  ]
  node [
    id 2542
    label "public static void load(String filename)"
    type "method"
    comment "&#10;     * Loads the native library specified by the filename argument.  The filename&#10;     * argument must be an absolute path name.&#10;     *&#10;     * If the filename argument, when stripped of any platform-specific library&#10;     * prefix, path, and file extension, indicates a library whose name is,&#10;     * for example, L, and a native library called L is statically linked&#10;     * with the VM, then the JNI_OnLoad_L function exported by the library&#10;     * is invoked rather than attempting to load a dynamic library.&#10;     * A filename matching the argument does not have to exist in the&#10;     * file system.&#10;     * See the JNI Specification for more details.&#10;     *&#10;     * Otherwise, the filename argument is mapped to a native library image in&#10;     * an implementation-dependent manner.&#10;     *&#10;     * <p>&#10;     * The call <code>System.load(name)</code> is effectively equivalent&#10;     * to the call:&#10;     * <blockquote><pre>&#10;     * Runtime.getRuntime().load(name)&#10;     * </pre></blockquote>&#10;     *&#10;     * @param      filename   the file to load.&#10;     * @exception  SecurityException  if a security manager exists and its&#10;     *             <code>checkLink</code> method doesn't allow&#10;     *             loading of the specified dynamic library&#10;     * @exception  UnsatisfiedLinkError  if either the filename is not an&#10;     *             absolute path name, the native library is not statically&#10;     *             linked with the VM, or the library cannot be mapped to&#10;     *             a native library image by the host system.&#10;     * @exception  NullPointerException if <code>filename</code> is&#10;     *             <code>null</code>&#10;     * @see        java.lang.Runtime#load(java.lang.String)&#10;     * @see        java.lang.SecurityManager#checkLink(java.lang.String)&#10;     "
  ]
  node [
    id 2543
    label "public static void loadLibrary(String libname)"
    type "method"
    comment "&#10;     * Loads the native library specified by the <code>libname</code>&#10;     * argument.  The <code>libname</code> argument must not contain any platform&#10;     * specific prefix, file extension or path. If a native library&#10;     * called <code>libname</code> is statically linked with the VM, then the&#10;     * JNI_OnLoad_<code>libname</code> function exported by the library is invoked.&#10;     * See the JNI Specification for more details.&#10;     *&#10;     * Otherwise, the libname argument is loaded from a system library&#10;     * location and mapped to a native library image in an implementation-&#10;     * dependent manner.&#10;     * <p>&#10;     * The call <code>System.loadLibrary(name)</code> is effectively&#10;     * equivalent to the call&#10;     * <blockquote><pre>&#10;     * Runtime.getRuntime().loadLibrary(name)&#10;     * </pre></blockquote>&#10;     *&#10;     * @param      libname   the name of the library.&#10;     * @exception  SecurityException  if a security manager exists and its&#10;     *             <code>checkLink</code> method doesn't allow&#10;     *             loading of the specified dynamic library&#10;     * @exception  UnsatisfiedLinkError if either the libname argument&#10;     *             contains a file path, the native library is not statically&#10;     *             linked with the VM,  or the library cannot be mapped to a&#10;     *             native library image by the host system.&#10;     * @exception  NullPointerException if <code>libname</code> is&#10;     *             <code>null</code>&#10;     * @see        java.lang.Runtime#loadLibrary(java.lang.String)&#10;     * @see        java.lang.SecurityManager#checkLink(java.lang.String)&#10;     "
  ]
  node [
    id 2544
    label "public static native String mapLibraryName(String libname)"
    type "method"
    comment "&#10;     * Maps a library name into a platform-specific string representing&#10;     * a native library.&#10;     *&#10;     * @param      libname the name of the library.&#10;     * @return     a platform-dependent native library name.&#10;     * @exception  NullPointerException if <code>libname</code> is&#10;     *             <code>null</code>&#10;     * @see        java.lang.System#loadLibrary(java.lang.String)&#10;     * @see        java.lang.ClassLoader#findLibrary(java.lang.String)&#10;     * @since      1.2&#10;     "
  ]
  node [
    id 2545
    label "private static PrintStream newPrintStream(FileOutputStream fos, String enc)"
    type "method"
    comment "&#10;     * Create PrintStream for stdout/err based on encoding.&#10;     "
  ]
  node [
    id 2546
    label "public static Integer getInteger(String nm, int val)"
    type "method"
    comment "&#10;     * Determines the integer value of the system property with the&#10;     * specified name.&#10;     *&#10;     * <p>The first argument is treated as the name of a system&#10;     * property.  System properties are accessible through the {@link&#10;     * java.lang.System#getProperty(java.lang.String)} method. The&#10;     * string value of this property is then interpreted as an integer&#10;     * value using the grammar supported by {@link Integer#decode decode} and&#10;     * an {@code Integer} object representing this value is returned.&#10;     *&#10;     * <p>The second argument is the default value. An {@code Integer} object&#10;     * that represents the value of the second argument is returned if there&#10;     * is no property of the specified name, if the property does not have&#10;     * the correct numeric format, or if the specified name is empty or&#10;     * {@code null}.&#10;     *&#10;     * <p>In other words, this method returns an {@code Integer} object&#10;     * equal to the value of:&#10;     *&#10;     * <blockquote>&#10;     *  {@code getInteger(nm, new Integer(val))}&#10;     * </blockquote>&#10;     *&#10;     * but in practice it may be implemented in a manner such as:&#10;     *&#10;     * <blockquote><pre>&#10;     * Integer result = getInteger(nm, null);&#10;     * return (result == null) ? new Integer(val) : result;&#10;     * </pre></blockquote>&#10;     *&#10;     * to avoid the unnecessary allocation of an {@code Integer}&#10;     * object when the default value is not needed.&#10;     *&#10;     * @param   nm   property name.&#10;     * @param   val   default value.&#10;     * @return  the {@code Integer} value of the property.&#10;     * @throws  SecurityException for the same reasons as&#10;     *          {@link System#getProperty(String) System.getProperty}&#10;     * @see     java.lang.System#getProperty(java.lang.String)&#10;     * @see     java.lang.System#getProperty(java.lang.String, java.lang.String)&#10;     "
  ]
  node [
    id 2547
    label "public static Integer getInteger(String nm, Integer val)"
    type "method"
    comment "&#10;     * Returns the integer value of the system property with the&#10;     * specified name.  The first argument is treated as the name of a&#10;     * system property.  System properties are accessible through the&#10;     * {@link java.lang.System#getProperty(java.lang.String)} method.&#10;     * The string value of this property is then interpreted as an&#10;     * integer value, as per the {@link Integer#decode decode} method,&#10;     * and an {@code Integer} object representing this value is&#10;     * returned; in summary:&#10;     *&#10;     * <ul><li>If the property value begins with the two ASCII characters&#10;     *         {@code 0x} or the ASCII character {@code #}, not&#10;     *      followed by a minus sign, then the rest of it is parsed as a&#10;     *      hexadecimal integer exactly as by the method&#10;     *      {@link #valueOf(java.lang.String, int)} with radix 16.&#10;     * <li>If the property value begins with the ASCII character&#10;     *     {@code 0} followed by another character, it is parsed as an&#10;     *     octal integer exactly as by the method&#10;     *     {@link #valueOf(java.lang.String, int)} with radix 8.&#10;     * <li>Otherwise, the property value is parsed as a decimal integer&#10;     * exactly as by the method {@link #valueOf(java.lang.String, int)}&#10;     * with radix 10.&#10;     * </ul>&#10;     *&#10;     * <p>The second argument is the default value. The default value is&#10;     * returned if there is no property of the specified name, if the&#10;     * property does not have the correct numeric format, or if the&#10;     * specified name is empty or {@code null}.&#10;     *&#10;     * @param   nm   property name.&#10;     * @param   val   default value.&#10;     * @return  the {@code Integer} value of the property.&#10;     * @throws  SecurityException for the same reasons as&#10;     *          {@link System#getProperty(String) System.getProperty}&#10;     * @see     System#getProperty(java.lang.String)&#10;     * @see     System#getProperty(java.lang.String, java.lang.String)&#10;     "
  ]
  node [
    id 2548
    label "valueOf(java.lang.String"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2549
    label "public static Integer decode(String nm) throws NumberFormatException"
    type "method"
    comment "&#10;     * Decodes a {@code String} into an {@code Integer}.&#10;     * Accepts decimal, hexadecimal, and octal numbers given&#10;     * by the following grammar:&#10;     *&#10;     * <blockquote>&#10;     * <dl>&#10;     * <dt><i>DecodableString:</i>&#10;     * <dd><i>Sign<sub>opt</sub> DecimalNumeral</i>&#10;     * <dd><i>Sign<sub>opt</sub></i> {@code 0x} <i>HexDigits</i>&#10;     * <dd><i>Sign<sub>opt</sub></i> {@code 0X} <i>HexDigits</i>&#10;     * <dd><i>Sign<sub>opt</sub></i> {@code #} <i>HexDigits</i>&#10;     * <dd><i>Sign<sub>opt</sub></i> {@code 0} <i>OctalDigits</i>&#10;     *&#10;     * <dt><i>Sign:</i>&#10;     * <dd>{@code -}&#10;     * <dd>{@code +}&#10;     * </dl>&#10;     * </blockquote>&#10;     *&#10;     * <i>DecimalNumeral</i>, <i>HexDigits</i>, and <i>OctalDigits</i>&#10;     * are as defined in section {@jls 3.10.1} of&#10;     * <cite>The Java Language Specification</cite>,&#10;     * except that underscores are not accepted between digits.&#10;     *&#10;     * <p>The sequence of characters following an optional&#10;     * sign and/or radix specifier (&#34;{@code 0x}&#34;, &#34;{@code 0X}&#34;,&#10;     * &#34;{@code #}&#34;, or leading zero) is parsed as by the {@code&#10;     * Integer.parseInt} method with the indicated radix (10, 16, or&#10;     * 8).  This sequence of characters must represent a positive&#10;     * value or a {@link NumberFormatException} will be thrown.  The&#10;     * result is negated if first character of the specified {@code&#10;     * String} is the minus sign.  No whitespace characters are&#10;     * permitted in the {@code String}.&#10;     *&#10;     * @param     nm the {@code String} to decode.&#10;     * @return    an {@code Integer} object holding the {@code int}&#10;     *             value represented by {@code nm}&#10;     * @throws    NumberFormatException  if the {@code String} does not&#10;     *            contain a parsable integer.&#10;     * @see java.lang.Integer#parseInt(java.lang.String, int)&#10;     "
  ]
  node [
    id 2550
    label "java.lang.NumberFormatException"
    type "class"
    comment "&#10; * Thrown to indicate that the application has attempted to convert&#10; * a string to one of the numeric types, but that the string does not&#10; * have the appropriate format.&#10; *&#10; * @see     java.lang.Integer#parseInt(String)&#10; * @since   1.0&#10; "
  ]
  node [
    id 2551
    label " static NumberFormatException forInputString(String s, int radix)"
    type "method"
    comment "&#10;     * Factory method for making a {@code NumberFormatException}&#10;     * given the specified input which caused the error.&#10;     *&#10;     * @param   s   the input causing the error&#10;     "
  ]
  node [
    id 2552
    label " static NumberFormatException forCharSequence(CharSequence s, int beginIndex, int endIndex, int errorIndex)"
    type "method"
    comment "&#10;     * Factory method for making a {@code NumberFormatException}&#10;     * given the specified input which caused the error.&#10;     *&#10;     * @param   s   the input causing the error&#10;     * @param   beginIndex   the beginning index, inclusive.&#10;     * @param   endIndex     the ending index, exclusive.&#10;     * @param   errorIndex   the index of the first error in s&#10;     "
  ]
  node [
    id 2553
    label "public int compareTo(Integer anotherInteger)"
    type "method"
    comment "&#10;     * Compares two {@code Integer} objects numerically.&#10;     *&#10;     * @param   anotherInteger   the {@code Integer} to be compared.&#10;     * @return  the value {@code 0} if this {@code Integer} is&#10;     *          equal to the argument {@code Integer}; a value less than&#10;     *          {@code 0} if this {@code Integer} is numerically less&#10;     *          than the argument {@code Integer}; and a value greater&#10;     *          than {@code 0} if this {@code Integer} is numerically&#10;     *           greater than the argument {@code Integer} (signed&#10;     *           comparison).&#10;     * @since   1.2&#10;     "
  ]
  node [
    id 2554
    label "public static int compare(int x, int y)"
    type "method"
    comment "&#10;     * Compares two {@code int} values numerically.&#10;     * The value returned is identical to what would be returned by:&#10;     * <pre>&#10;     *    Integer.valueOf(x).compareTo(Integer.valueOf(y))&#10;     * </pre>&#10;     *&#10;     * @param  x the first {@code int} to compare&#10;     * @param  y the second {@code int} to compare&#10;     * @return the value {@code 0} if {@code x == y};&#10;     *         a value less than {@code 0} if {@code x < y}; and&#10;     *         a value greater than {@code 0} if {@code x > y}&#10;     * @since 1.7&#10;     "
  ]
  node [
    id 2555
    label "public static int compareUnsigned(int x, int y)"
    type "method"
    comment "&#10;     * Compares two {@code int} values numerically treating the values&#10;     * as unsigned.&#10;     *&#10;     * @param  x the first {@code int} to compare&#10;     * @param  y the second {@code int} to compare&#10;     * @return the value {@code 0} if {@code x == y}; a value less&#10;     *         than {@code 0} if {@code x < y} as unsigned values; and&#10;     *         a value greater than {@code 0} if {@code x > y} as&#10;     *         unsigned values&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 2556
    label "public static long toUnsignedLong(int x)"
    type "method"
    comment "&#10;     * Converts the argument to a {@code long} by an unsigned&#10;     * conversion.  In an unsigned conversion to a {@code long}, the&#10;     * high-order 32 bits of the {@code long} are zero and the&#10;     * low-order 32 bits are equal to the bits of the integer&#10;     * argument.&#10;     *&#10;     * Consequently, zero and positive {@code int} values are mapped&#10;     * to a numerically equal {@code long} value and negative {@code&#10;     * int} values are mapped to a {@code long} value equal to the&#10;     * input plus 2<sup>32</sup>.&#10;     *&#10;     * @param  x the value to convert to an unsigned {@code long}&#10;     * @return the argument converted to {@code long} by an unsigned&#10;     *         conversion&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 2557
    label "public static int divideUnsigned(int dividend, int divisor)"
    type "method"
    comment "&#10;     * Returns the unsigned quotient of dividing the first argument by&#10;     * the second where each argument and the result is interpreted as&#10;     * an unsigned value.&#10;     *&#10;     * <p>Note that in two's complement arithmetic, the three other&#10;     * basic arithmetic operations of add, subtract, and multiply are&#10;     * bit-wise identical if the two operands are regarded as both&#10;     * being signed or both being unsigned.  Therefore separate {@code&#10;     * addUnsigned}, etc. methods are not provided.&#10;     *&#10;     * @param dividend the value to be divided&#10;     * @param divisor the value doing the dividing&#10;     * @return the unsigned quotient of the first argument divided by&#10;     * the second argument&#10;     * @see #remainderUnsigned&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 2558
    label "public static int remainderUnsigned(int dividend, int divisor)"
    type "method"
    comment "&#10;     * Returns the unsigned remainder from dividing the first argument&#10;     * by the second where each argument and the result is interpreted&#10;     * as an unsigned value.&#10;     *&#10;     * @param dividend the value to be divided&#10;     * @param divisor the value doing the dividing&#10;     * @return the unsigned remainder of the first argument divided by&#10;     * the second argument&#10;     * @see #divideUnsigned&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 2559
    label "public static int highestOneBit(int i)"
    type "method"
    comment "&#10;     * Returns an {@code int} value with at most a single one-bit, in the&#10;     * position of the highest-order (&#34;leftmost&#34;) one-bit in the specified&#10;     * {@code int} value.  Returns zero if the specified value has no&#10;     * one-bits in its two's complement binary representation, that is, if it&#10;     * is equal to zero.&#10;     *&#10;     * @param i the value whose highest one bit is to be computed&#10;     * @return an {@code int} value with a single one-bit, in the position&#10;     *     of the highest-order one-bit in the specified value, or zero if&#10;     *     the specified value is itself equal to zero.&#10;     * @since 1.5&#10;     "
  ]
  node [
    id 2560
    label "public static int lowestOneBit(int i)"
    type "method"
    comment "&#10;     * Returns an {@code int} value with at most a single one-bit, in the&#10;     * position of the lowest-order (&#34;rightmost&#34;) one-bit in the specified&#10;     * {@code int} value.  Returns zero if the specified value has no&#10;     * one-bits in its two's complement binary representation, that is, if it&#10;     * is equal to zero.&#10;     *&#10;     * @param i the value whose lowest one bit is to be computed&#10;     * @return an {@code int} value with a single one-bit, in the position&#10;     *     of the lowest-order one-bit in the specified value, or zero if&#10;     *     the specified value is itself equal to zero.&#10;     * @since 1.5&#10;     "
  ]
  node [
    id 2561
    label "public static int numberOfLeadingZeros(int i)"
    type "method"
    comment "&#10;     * Returns the number of zero bits preceding the highest-order&#10;     * (&#34;leftmost&#34;) one-bit in the two's complement binary representation&#10;     * of the specified {@code int} value.  Returns 32 if the&#10;     * specified value has no one-bits in its two's complement representation,&#10;     * in other words if it is equal to zero.&#10;     *&#10;     * <p>Note that this method is closely related to the logarithm base 2.&#10;     * For all positive {@code int} values x:&#10;     * <ul>&#10;     * <li>floor(log<sub>2</sub>(x)) = {@code 31 - numberOfLeadingZeros(x)}&#10;     * <li>ceil(log<sub>2</sub>(x)) = {@code 32 - numberOfLeadingZeros(x - 1)}&#10;     * </ul>&#10;     *&#10;     * @param i the value whose number of leading zeros is to be computed&#10;     * @return the number of zero bits preceding the highest-order&#10;     *     (&#34;leftmost&#34;) one-bit in the two's complement binary representation&#10;     *     of the specified {@code int} value, or 32 if the value&#10;     *     is equal to zero.&#10;     * @since 1.5&#10;     "
  ]
  node [
    id 2562
    label "public static int numberOfTrailingZeros(int i)"
    type "method"
    comment "&#10;     * Returns the number of zero bits following the lowest-order (&#34;rightmost&#34;)&#10;     * one-bit in the two's complement binary representation of the specified&#10;     * {@code int} value.  Returns 32 if the specified value has no&#10;     * one-bits in its two's complement representation, in other words if it is&#10;     * equal to zero.&#10;     *&#10;     * @param i the value whose number of trailing zeros is to be computed&#10;     * @return the number of zero bits following the lowest-order (&#34;rightmost&#34;)&#10;     *     one-bit in the two's complement binary representation of the&#10;     *     specified {@code int} value, or 32 if the value is equal&#10;     *     to zero.&#10;     * @since 1.5&#10;     "
  ]
  node [
    id 2563
    label "public static int bitCount(int i)"
    type "method"
    comment "&#10;     * Returns the number of one-bits in the two's complement binary&#10;     * representation of the specified {@code int} value.  This function is&#10;     * sometimes referred to as the <i>population count</i>.&#10;     *&#10;     * @param i the value whose bits are to be counted&#10;     * @return the number of one-bits in the two's complement binary&#10;     *     representation of the specified {@code int} value.&#10;     * @since 1.5&#10;     "
  ]
  node [
    id 2564
    label "public static int rotateLeft(int i, int distance)"
    type "method"
    comment "&#10;     * Returns the value obtained by rotating the two's complement binary&#10;     * representation of the specified {@code int} value left by the&#10;     * specified number of bits.  (Bits shifted out of the left hand, or&#10;     * high-order, side reenter on the right, or low-order.)&#10;     *&#10;     * <p>Note that left rotation with a negative distance is equivalent to&#10;     * right rotation: {@code rotateLeft(val, -distance) == rotateRight(val,&#10;     * distance)}.  Note also that rotation by any multiple of 32 is a&#10;     * no-op, so all but the last five bits of the rotation distance can be&#10;     * ignored, even if the distance is negative: {@code rotateLeft(val,&#10;     * distance) == rotateLeft(val, distance &#38; 0x1F)}.&#10;     *&#10;     * @param i the value whose bits are to be rotated left&#10;     * @param distance the number of bit positions to rotate left&#10;     * @return the value obtained by rotating the two's complement binary&#10;     *     representation of the specified {@code int} value left by the&#10;     *     specified number of bits.&#10;     * @since 1.5&#10;     "
  ]
  node [
    id 2565
    label "public static int rotateRight(int i, int distance)"
    type "method"
    comment "&#10;     * Returns the value obtained by rotating the two's complement binary&#10;     * representation of the specified {@code int} value right by the&#10;     * specified number of bits.  (Bits shifted out of the right hand, or&#10;     * low-order, side reenter on the left, or high-order.)&#10;     *&#10;     * <p>Note that right rotation with a negative distance is equivalent to&#10;     * left rotation: {@code rotateRight(val, -distance) == rotateLeft(val,&#10;     * distance)}.  Note also that rotation by any multiple of 32 is a&#10;     * no-op, so all but the last five bits of the rotation distance can be&#10;     * ignored, even if the distance is negative: {@code rotateRight(val,&#10;     * distance) == rotateRight(val, distance &#38; 0x1F)}.&#10;     *&#10;     * @param i the value whose bits are to be rotated right&#10;     * @param distance the number of bit positions to rotate right&#10;     * @return the value obtained by rotating the two's complement binary&#10;     *     representation of the specified {@code int} value right by the&#10;     *     specified number of bits.&#10;     * @since 1.5&#10;     "
  ]
  node [
    id 2566
    label "public static int reverse(int i)"
    type "method"
    comment "&#10;     * Returns the value obtained by reversing the order of the bits in the&#10;     * two's complement binary representation of the specified {@code int}&#10;     * value.&#10;     *&#10;     * @param i the value to be reversed&#10;     * @return the value obtained by reversing order of the bits in the&#10;     *     specified {@code int} value.&#10;     * @since 1.5&#10;     "
  ]
  node [
    id 2567
    label "public static int signum(int i)"
    type "method"
    comment "&#10;     * Returns the signum function of the specified {@code int} value.  (The&#10;     * return value is -1 if the specified value is negative; 0 if the&#10;     * specified value is zero; and 1 if the specified value is positive.)&#10;     *&#10;     * @param i the value whose signum is to be computed&#10;     * @return the signum function of the specified {@code int} value.&#10;     * @since 1.5&#10;     "
  ]
  node [
    id 2568
    label "public static int reverseBytes(int i)"
    type "method"
    comment "&#10;     * Returns the value obtained by reversing the order of the bytes in the&#10;     * two's complement representation of the specified {@code int} value.&#10;     *&#10;     * @param i the value whose bytes are to be reversed&#10;     * @return the value obtained by reversing the bytes in the specified&#10;     *     {@code int} value.&#10;     * @since 1.5&#10;     "
  ]
  node [
    id 2569
    label "public static int sum(int a, int b)"
    type "method"
    comment "&#10;     * Adds two integers together as per the + operator.&#10;     *&#10;     * @param a the first operand&#10;     * @param b the second operand&#10;     * @return the sum of {@code a} and {@code b}&#10;     * @see java.util.function.BinaryOperator&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 2570
    label "public static int max(int a, int b)"
    type "method"
    comment "&#10;     * Returns the greater of two {@code int} values&#10;     * as if by calling {@link Math#max(int, int) Math.max}.&#10;     *&#10;     * @param a the first operand&#10;     * @param b the second operand&#10;     * @return the greater of {@code a} and {@code b}&#10;     * @see java.util.function.BinaryOperator&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 2571
    label "max(int"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2572
    label "public static int min(int a, int b)"
    type "method"
    comment "&#10;     * Returns the smaller of two {@code int} values&#10;     * as if by calling {@link Math#min(int, int) Math.min}.&#10;     *&#10;     * @param a the first operand&#10;     * @param b the second operand&#10;     * @return the smaller of {@code a} and {@code b}&#10;     * @see java.util.function.BinaryOperator&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 2573
    label "min(int"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2574
    label "java.text.NumberFormat"
    type "class"
    comment "&#10; * {@code NumberFormat} is the abstract base class for all number&#10; * formats. This class provides the interface for formatting and parsing&#10; * numbers. {@code NumberFormat} also provides methods for determining&#10; * which locales have number formats, and what their names are.&#10; *&#10; * <p>&#10; * {@code NumberFormat} helps you to format and parse numbers for any locale.&#10; * Your code can be completely independent of the locale conventions for&#10; * decimal points, thousands-separators, or even the particular decimal&#10; * digits used, or whether the number format is even decimal.&#10; *&#10; * <p>&#10; * To format a number for the current Locale, use one of the factory&#10; * class methods:&#10; * <blockquote>&#10; * <pre>{@code&#10; * myString = NumberFormat.getInstance().format(myNumber);&#10; * }</pre>&#10; * </blockquote>&#10; * If you are formatting multiple numbers, it is&#10; * more efficient to get the format and use it multiple times so that&#10; * the system doesn't have to fetch the information about the local&#10; * language and country conventions multiple times.&#10; * <blockquote>&#10; * <pre>{@code&#10; * NumberFormat nf = NumberFormat.getInstance();&#10; * for (int i = 0; i < myNumber.length; ++i) {&#10; *     output.println(nf.format(myNumber[i]) + &#34;; &#34;);&#10; * }&#10; * }</pre>&#10; * </blockquote>&#10; * To format a number for a different Locale, specify it in the&#10; * call to {@code getInstance}.&#10; * <blockquote>&#10; * <pre>{@code&#10; * NumberFormat nf = NumberFormat.getInstance(Locale.FRENCH);&#10; * }</pre>&#10; * </blockquote>&#10; *&#10; * <p>If the locale contains &#34;nu&#34; (numbers)&#10; * <a href=&#34;../util/Locale.html#def_locale_extension&#34;>Unicode extensions</a>,&#10; * the decimal digits, and/or the country used for formatting are overridden.&#10; *&#10; * <p>You can also use a {@code NumberFormat} to parse numbers:&#10; * <blockquote>&#10; * <pre>{@code&#10; * myNumber = nf.parse(myString);&#10; * }</pre>&#10; * </blockquote>&#10; * Use {@code getInstance} or {@code getNumberInstance} to get the&#10; * normal number format. Use {@code getIntegerInstance} to get an&#10; * integer number format. Use {@code getCurrencyInstance} to get the&#10; * currency number format. Use {@code getCompactNumberInstance} to get the&#10; * compact number format to format a number in shorter form. For example,&#10; * {@code 2000} can be formatted as {@code &#34;2K&#34;} in&#10; * {@link java.util.Locale#US US locale}. Use {@code getPercentInstance}&#10; * to get a format for displaying percentages. With this format, a fraction&#10; * like 0.53 is displayed as 53%.&#10; *&#10; * <p>&#10; * You can also control the display of numbers with such methods as&#10; * {@code setMinimumFractionDigits}.&#10; * If you want even more control over the format or parsing,&#10; * or want to give your users more control,&#10; * you can try casting the {@code NumberFormat} you get from the factory methods&#10; * to a {@code DecimalFormat} or {@code CompactNumberFormat} depending on&#10; * the factory method used. This will work for the vast majority of locales;&#10; * just remember to put it in a {@code try} block in case you encounter&#10; * an unusual one.&#10; *&#10; * <p>&#10; * NumberFormat and DecimalFormat are designed such that some controls&#10; * work for formatting and others work for parsing.  The following is&#10; * the detailed description for each these control methods,&#10; * <p>&#10; * setParseIntegerOnly : only affects parsing, e.g.&#10; * if true,  &#34;3456.78&#34; &#38;rarr; 3456 (and leaves the parse position just after index 6)&#10; * if false, &#34;3456.78&#34; &#38;rarr; 3456.78 (and leaves the parse position just after index 8)&#10; * This is independent of formatting.  If you want to not show a decimal point&#10; * where there might be no digits after the decimal point, use&#10; * setDecimalSeparatorAlwaysShown.&#10; * <p>&#10; * setDecimalSeparatorAlwaysShown : only affects formatting, and only where&#10; * there might be no digits after the decimal point, such as with a pattern&#10; * like &#34;#,##0.##&#34;, e.g.,&#10; * if true,  3456.00 &#38;rarr; &#34;3,456.&#34;&#10; * if false, 3456.00 &#38;rarr; &#34;3456&#34;&#10; * This is independent of parsing.  If you want parsing to stop at the decimal&#10; * point, use setParseIntegerOnly.&#10; *&#10; * <p>&#10; * You can also use forms of the {@code parse} and {@code format}&#10; * methods with {@code ParsePosition} and {@code FieldPosition} to&#10; * allow you to:&#10; * <ul>&#10; * <li> progressively parse through pieces of a string&#10; * <li> align the decimal point and other areas&#10; * </ul>&#10; * For example, you can align numbers in two ways:&#10; * <ol>&#10; * <li> If you are using a monospaced font with spacing for alignment,&#10; *      you can pass the {@code FieldPosition} in your format call, with&#10; *      {@code field} = {@code INTEGER_FIELD}. On output,&#10; *      {@code getEndIndex} will be set to the offset between the&#10; *      last character of the integer and the decimal. Add&#10; *      (desiredSpaceCount - getEndIndex) spaces at the front of the string.&#10; *&#10; * <li> If you are using proportional fonts,&#10; *      instead of padding with spaces, measure the width&#10; *      of the string in pixels from the start to {@code getEndIndex}.&#10; *      Then move the pen by&#10; *      (desiredPixelWidth - widthToAlignmentPoint) before drawing the text.&#10; *      It also works where there is no decimal, but possibly additional&#10; *      characters at the end, e.g., with parentheses in negative&#10; *      numbers: &#34;(12)&#34; for -12.&#10; * </ol>&#10; *&#10; * <h2><a id=&#34;synchronization&#34;>Synchronization</a></h2>&#10; *&#10; * <p>&#10; * Number formats are generally not synchronized.&#10; * It is recommended to create separate format instances for each thread.&#10; * If multiple threads access a format concurrently, it must be synchronized&#10; * externally.&#10; *&#10; * @implSpec The {@link #format(double, StringBuffer, FieldPosition)},&#10; * {@link #format(long, StringBuffer, FieldPosition)} and&#10; * {@link #parse(String, ParsePosition)} methods may throw&#10; * {@code NullPointerException}, if any of their parameter is {@code null}.&#10; * The subclass may provide its own implementation and specification about&#10; * {@code NullPointerException}.&#10; *&#10; * <p>&#10; * The default implementation provides rounding modes defined&#10; * in {@link java.math.RoundingMode} for formatting numbers. It&#10; * uses the {@linkplain java.math.RoundingMode#HALF_EVEN&#10; * round half-even algorithm}. To change the rounding mode use&#10; * {@link #setRoundingMode(java.math.RoundingMode) setRoundingMode}.&#10; * The {@code NumberFormat} returned by the static factory methods is&#10; * configured to round floating point numbers using half-even&#10; * rounding (see {@link java.math.RoundingMode#HALF_EVEN&#10; * RoundingMode.HALF_EVEN}) for formatting.&#10; *&#10; * @see          DecimalFormat&#10; * @see          ChoiceFormat&#10; * @author       Mark Davis&#10; * @author       Helena Shih&#10; * @since 1.1&#10; "
  ]
  node [
    id 2575
    label "public StringBuffer format(Object number, StringBuffer toAppendTo, FieldPosition pos)"
    type "method"
    comment "&#10;     * Formats a number and appends the resulting text to the given string&#10;     * buffer.&#10;     * The number can be of any subclass of {@link java.lang.Number}.&#10;     * <p>&#10;     * This implementation extracts the number's value using&#10;     * {@link java.lang.Number#longValue()} for all integral type values that&#10;     * can be converted to {@code long} without loss of information,&#10;     * including {@code BigInteger} values with a&#10;     * {@link java.math.BigInteger#bitLength() bit length} of less than 64,&#10;     * and {@link java.lang.Number#doubleValue()} for all other types. It&#10;     * then calls&#10;     * {@link #format(long,java.lang.StringBuffer,java.text.FieldPosition)}&#10;     * or {@link #format(double,java.lang.StringBuffer,java.text.FieldPosition)}.&#10;     * This may result in loss of magnitude information and precision for&#10;     * {@code BigInteger} and {@code BigDecimal} values.&#10;     * @param number     the number to format&#10;     * @param toAppendTo the {@code StringBuffer} to which the formatted&#10;     *                   text is to be appended&#10;     * @param pos        keeps track on the position of the field within the&#10;     *                   returned string. For example, for formatting a number&#10;     *                   {@code 1234567.89} in {@code Locale.US} locale,&#10;     *                   if the given {@code fieldPosition} is&#10;     *                   {@link NumberFormat#INTEGER_FIELD}, the begin index&#10;     *                   and end index of {@code fieldPosition} will be set&#10;     *                   to 0 and 9, respectively for the output string&#10;     *                   {@code 1,234,567.89}.&#10;     * @return           the value passed in as {@code toAppendTo}&#10;     * @throws           IllegalArgumentException if {@code number} is&#10;     *                   null or not an instance of {@code Number}.&#10;     * @throws           NullPointerException if {@code toAppendTo} or&#10;     *                   {@code pos} is null&#10;     * @throws           ArithmeticException if rounding is needed with rounding&#10;     *                   mode being set to RoundingMode.UNNECESSARY&#10;     * @see              java.text.FieldPosition&#10;     "
  ]
  node [
    id 2576
    label "INTEGER_FIELD"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2577
    label "doubleValue()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2578
    label "java.lang.Number"
    type "class"
    comment "&#10; * The abstract class {@code Number} is the superclass of platform&#10; * classes representing numeric values that are convertible to the&#10; * primitive types {@code byte}, {@code double}, {@code float}, {@code&#10; * int}, {@code long}, and {@code short}.&#10; *&#10; * The specific semantics of the conversion from the numeric value of&#10; * a particular {@code Number} implementation to a given primitive&#10; * type is defined by the {@code Number} implementation in question.&#10; *&#10; * For platform classes, the conversion is often analogous to a&#10; * narrowing primitive conversion or a widening primitive conversion&#10; * as defined in <cite>The Java Language Specification</cite>&#10; * for converting between primitive types.  Therefore, conversions may&#10; * lose information about the overall magnitude of a numeric value, may&#10; * lose precision, and may even return a result of a different sign&#10; * than the input.&#10; *&#10; * See the documentation of a given {@code Number} implementation for&#10; * conversion details.&#10; *&#10; * @author      Lee Boynton&#10; * @author      Arthur van Hoff&#10; * @jls 5.1.2 Widening Primitive Conversion&#10; * @jls 5.1.3 Narrowing Primitive Conversion&#10; * @since   1.0&#10; "
  ]
  node [
    id 2579
    label "public abstract int intValue()"
    type "method"
    comment "&#10;     * Returns the value of the specified number as an {@code int}.&#10;     *&#10;     * @return  the numeric value represented by this object after conversion&#10;     *          to type {@code int}.&#10;     "
  ]
  node [
    id 2580
    label "public abstract long longValue()"
    type "method"
    comment "&#10;     * Returns the value of the specified number as a {@code long}.&#10;     *&#10;     * @return  the numeric value represented by this object after conversion&#10;     *          to type {@code long}.&#10;     "
  ]
  node [
    id 2581
    label "public abstract float floatValue()"
    type "method"
    comment "&#10;     * Returns the value of the specified number as a {@code float}.&#10;     *&#10;     * @return  the numeric value represented by this object after conversion&#10;     *          to type {@code float}.&#10;     "
  ]
  node [
    id 2582
    label "public abstract double doubleValue()"
    type "method"
    comment "&#10;     * Returns the value of the specified number as a {@code double}.&#10;     *&#10;     * @return  the numeric value represented by this object after conversion&#10;     *          to type {@code double}.&#10;     "
  ]
  node [
    id 2583
    label "intValue"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2584
    label "format(long"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2585
    label "bitLength()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2586
    label "format(double"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2587
    label "public final Object parseObject(String source, ParsePosition pos)"
    type "method"
    comment "&#10;     * Parses text from a string to produce a {@code Number}.&#10;     * <p>&#10;     * The method attempts to parse text starting at the index given by&#10;     * {@code pos}.&#10;     * If parsing succeeds, then the index of {@code pos} is updated&#10;     * to the index after the last character used (parsing does not necessarily&#10;     * use all characters up to the end of the string), and the parsed&#10;     * number is returned. The updated {@code pos} can be used to&#10;     * indicate the starting point for the next call to this method.&#10;     * If an error occurs, then the index of {@code pos} is not&#10;     * changed, the error index of {@code pos} is set to the index of&#10;     * the character where the error occurred, and null is returned.&#10;     * <p>&#10;     * See the {@link #parse(String, ParsePosition)} method for more information&#10;     * on number parsing.&#10;     *&#10;     * @param source A {@code String}, part of which should be parsed.&#10;     * @param pos A {@code ParsePosition} object with index and error&#10;     *            index information as described above.&#10;     * @return A {@code Number} parsed from the string. In case of&#10;     *         error, returns null.&#10;     * @throws NullPointerException if {@code source} or {@code pos} is null.&#10;     "
  ]
  node [
    id 2588
    label "parse(String"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2589
    label "public final String format(double number)"
    type "method"
    comment "&#10;     * Specialization of format.&#10;     *&#10;     * @param number the double number to format&#10;     * @return the formatted String&#10;     * @throws           ArithmeticException if rounding is needed with rounding&#10;     *                   mode being set to RoundingMode.UNNECESSARY&#10;     * @see java.text.Format#format&#10;     "
  ]
  node [
    id 2590
    label "public final String format(long number)"
    type "method"
    comment "&#10;     * Specialization of format.&#10;     *&#10;     * @param number the long number to format&#10;     * @return the formatted String&#10;     * @throws           ArithmeticException if rounding is needed with rounding&#10;     *                   mode being set to RoundingMode.UNNECESSARY&#10;     * @see java.text.Format#format&#10;     "
  ]
  node [
    id 2591
    label "public abstract StringBuffer format(double number, StringBuffer toAppendTo, FieldPosition pos)"
    type "method"
    comment "&#10;     * Specialization of format.&#10;     *&#10;     * @param number     the double number to format&#10;     * @param toAppendTo the StringBuffer to which the formatted text is to be&#10;     *                   appended&#10;     * @param pos        keeps track on the position of the field within the&#10;     *                   returned string. For example, for formatting a number&#10;     *                   {@code 1234567.89} in {@code Locale.US} locale,&#10;     *                   if the given {@code fieldPosition} is&#10;     *                   {@link NumberFormat#INTEGER_FIELD}, the begin index&#10;     *                   and end index of {@code fieldPosition} will be set&#10;     *                   to 0 and 9, respectively for the output string&#10;     *                   {@code 1,234,567.89}.&#10;     * @return the formatted StringBuffer&#10;     * @throws           ArithmeticException if rounding is needed with rounding&#10;     *                   mode being set to RoundingMode.UNNECESSARY&#10;     * @see java.text.Format#format&#10;     "
  ]
  node [
    id 2592
    label "public abstract StringBuffer format(long number, StringBuffer toAppendTo, FieldPosition pos)"
    type "method"
    comment "&#10;     * Specialization of format.&#10;     *&#10;     * @param number     the long number to format&#10;     * @param toAppendTo the StringBuffer to which the formatted text is to be&#10;     *                   appended&#10;     * @param pos        keeps track on the position of the field within the&#10;     *                   returned string. For example, for formatting a number&#10;     *                   {@code 123456789} in {@code Locale.US} locale,&#10;     *                   if the given {@code fieldPosition} is&#10;     *                   {@link NumberFormat#INTEGER_FIELD}, the begin index&#10;     *                   and end index of {@code fieldPosition} will be set&#10;     *                   to 0 and 11, respectively for the output string&#10;     *                   {@code 123,456,789}.&#10;     * @return the formatted StringBuffer&#10;     * @throws           ArithmeticException if rounding is needed with rounding&#10;     *                   mode being set to RoundingMode.UNNECESSARY&#10;     * @see java.text.Format#format&#10;     "
  ]
  node [
    id 2593
    label "public abstract Number parse(String source, ParsePosition parsePosition)"
    type "method"
    comment "&#10;     * Returns a Long if possible (e.g., within the range [Long.MIN_VALUE,&#10;     * Long.MAX_VALUE] and with no decimals), otherwise a Double.&#10;     * If IntegerOnly is set, will stop at a decimal&#10;     * point (or equivalent; e.g., for rational numbers &#34;1 2/3&#34;, will stop&#10;     * after the 1).&#10;     * Does not throw an exception; if no object can be parsed, index is&#10;     * unchanged!&#10;     *&#10;     * @param source the String to parse&#10;     * @param parsePosition the parse position&#10;     * @return the parsed value&#10;     * @see java.text.NumberFormat#isParseIntegerOnly&#10;     * @see java.text.Format#parseObject&#10;     "
  ]
  node [
    id 2594
    label "public Number parse(String source) throws ParseException"
    type "method"
    comment "&#10;     * Parses text from the beginning of the given string to produce a number.&#10;     * The method may not use the entire text of the given string.&#10;     * <p>&#10;     * See the {@link #parse(String, ParsePosition)} method for more information&#10;     * on number parsing.&#10;     *&#10;     * @param source A {@code String} whose beginning should be parsed.&#10;     * @return A {@code Number} parsed from the string.&#10;     * @throws    ParseException if the beginning of the specified string&#10;     *            cannot be parsed.&#10;     "
  ]
  node [
    id 2595
    label "public boolean isParseIntegerOnly()"
    type "method"
    comment "&#10;     * Returns true if this format will parse numbers as integers only.&#10;     * For example in the English locale, with ParseIntegerOnly true, the&#10;     * string &#34;1234.&#34; would be parsed as the integer value 1234 and parsing&#10;     * would stop at the &#34;.&#34; character.  Of course, the exact format accepted&#10;     * by the parse operation is locale dependent and determined by sub-classes&#10;     * of NumberFormat.&#10;     *&#10;     * @return {@code true} if numbers should be parsed as integers only;&#10;     *         {@code false} otherwise&#10;     "
  ]
  node [
    id 2596
    label "public void setParseIntegerOnly(boolean value)"
    type "method"
    comment "&#10;     * Sets whether or not numbers should be parsed as integers only.&#10;     *&#10;     * @param value {@code true} if numbers should be parsed as integers only;&#10;     *              {@code false} otherwise&#10;     * @see #isParseIntegerOnly&#10;     "
  ]
  node [
    id 2597
    label "public static final NumberFormat getInstance()"
    type "method"
    comment "&#10;     * Returns a general-purpose number format for the current default&#10;     * {@link java.util.Locale.Category#FORMAT FORMAT} locale.&#10;     * This is the same as calling&#10;     * {@link #getNumberInstance() getNumberInstance()}.&#10;     *&#10;     * @return the {@code NumberFormat} instance for general-purpose number&#10;     * formatting&#10;     "
  ]
  node [
    id 2598
    label "getNumberInstance()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2599
    label "public static NumberFormat getInstance(Locale inLocale)"
    type "method"
    comment "&#10;     * Returns a general-purpose number format for the specified locale.&#10;     * This is the same as calling&#10;     * {@link #getNumberInstance(java.util.Locale) getNumberInstance(inLocale)}.&#10;     *&#10;     * @param inLocale the desired locale&#10;     * @return the {@code NumberFormat} instance for general-purpose number&#10;     * formatting&#10;     "
  ]
  node [
    id 2600
    label "getNumberInstance(java.util.Locale)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2601
    label "public static final NumberFormat getNumberInstance()"
    type "method"
    comment "&#10;     * Returns a general-purpose number format for the current default&#10;     * {@link java.util.Locale.Category#FORMAT FORMAT} locale.&#10;     * <p>This is equivalent to calling&#10;     * {@link #getNumberInstance(Locale)&#10;     *     getNumberInstance(Locale.getDefault(Locale.Category.FORMAT))}.&#10;     *&#10;     * @return the {@code NumberFormat} instance for general-purpose number&#10;     * formatting&#10;     * @see java.util.Locale#getDefault(java.util.Locale.Category)&#10;     * @see java.util.Locale.Category#FORMAT&#10;     "
  ]
  node [
    id 2602
    label "getNumberInstance(Locale)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2603
    label "public static NumberFormat getNumberInstance(Locale inLocale)"
    type "method"
    comment "&#10;     * Returns a general-purpose number format for the specified locale.&#10;     *&#10;     * @param inLocale the desired locale&#10;     * @return the {@code NumberFormat} instance for general-purpose number&#10;     * formatting&#10;     "
  ]
  node [
    id 2604
    label "public static final NumberFormat getIntegerInstance()"
    type "method"
    comment "&#10;     * Returns an integer number format for the current default&#10;     * {@link java.util.Locale.Category#FORMAT FORMAT} locale. The&#10;     * returned number format is configured to round floating point numbers&#10;     * to the nearest integer using half-even rounding (see {@link&#10;     * java.math.RoundingMode#HALF_EVEN RoundingMode.HALF_EVEN}) for formatting,&#10;     * and to parse only the integer part of an input string (see {@link&#10;     * #isParseIntegerOnly isParseIntegerOnly}).&#10;     * <p>This is equivalent to calling&#10;     * {@link #getIntegerInstance(Locale)&#10;     *     getIntegerInstance(Locale.getDefault(Locale.Category.FORMAT))}.&#10;     *&#10;     * @see #getRoundingMode()&#10;     * @see java.util.Locale#getDefault(java.util.Locale.Category)&#10;     * @see java.util.Locale.Category#FORMAT&#10;     * @return a number format for integer values&#10;     * @since 1.4&#10;     "
  ]
  node [
    id 2605
    label "isParseIntegerOnly"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2606
    label "getIntegerInstance(Locale)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2607
    label "HALF_EVEN"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2608
    label "public static NumberFormat getIntegerInstance(Locale inLocale)"
    type "method"
    comment "&#10;     * Returns an integer number format for the specified locale. The&#10;     * returned number format is configured to round floating point numbers&#10;     * to the nearest integer using half-even rounding (see {@link&#10;     * java.math.RoundingMode#HALF_EVEN RoundingMode.HALF_EVEN}) for formatting,&#10;     * and to parse only the integer part of an input string (see {@link&#10;     * #isParseIntegerOnly isParseIntegerOnly}).&#10;     *&#10;     * @param inLocale the desired locale&#10;     * @see #getRoundingMode()&#10;     * @return a number format for integer values&#10;     * @since 1.4&#10;     "
  ]
  node [
    id 2609
    label "public static final NumberFormat getCurrencyInstance()"
    type "method"
    comment "&#10;     * Returns a currency format for the current default&#10;     * {@link java.util.Locale.Category#FORMAT FORMAT} locale.&#10;     * <p>This is equivalent to calling&#10;     * {@link #getCurrencyInstance(Locale)&#10;     *     getCurrencyInstance(Locale.getDefault(Locale.Category.FORMAT))}.&#10;     *&#10;     * @return the {@code NumberFormat} instance for currency formatting&#10;     * @see java.util.Locale#getDefault(java.util.Locale.Category)&#10;     * @see java.util.Locale.Category#FORMAT&#10;     "
  ]
  node [
    id 2610
    label "getCurrencyInstance(Locale)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2611
    label "public static NumberFormat getCurrencyInstance(Locale inLocale)"
    type "method"
    comment "&#10;     * Returns a currency format for the specified locale.&#10;     *&#10;     * <p>If the specified locale contains the &#34;{@code cf}&#34; (&#10;     * <a href=&#34;https://www.unicode.org/reports/tr35/tr35.html#UnicodeCurrencyFormatIdentifier&#34;>&#10;     * currency format style</a>)&#10;     * <a href=&#34;../util/Locale.html#def_locale_extension&#34;>Unicode extension</a>,&#10;     * the returned currency format uses the style if it is available.&#10;     * Otherwise, the style uses the default &#34;{@code standard}&#34; currency format.&#10;     * For example, if the style designates &#34;{@code account}&#34;, negative&#10;     * currency amounts use a pair of parentheses in some locales.&#10;     *&#10;     * @param inLocale the desired locale&#10;     * @return the {@code NumberFormat} instance for currency formatting&#10;     "
  ]
  node [
    id 2612
    label "public static final NumberFormat getPercentInstance()"
    type "method"
    comment "&#10;     * Returns a percentage format for the current default&#10;     * {@link java.util.Locale.Category#FORMAT FORMAT} locale.&#10;     * <p>This is equivalent to calling&#10;     * {@link #getPercentInstance(Locale)&#10;     *     getPercentInstance(Locale.getDefault(Locale.Category.FORMAT))}.&#10;     *&#10;     * @return the {@code NumberFormat} instance for percentage formatting&#10;     * @see java.util.Locale#getDefault(java.util.Locale.Category)&#10;     * @see java.util.Locale.Category#FORMAT&#10;     "
  ]
  node [
    id 2613
    label "getPercentInstance(Locale)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2614
    label "public static NumberFormat getPercentInstance(Locale inLocale)"
    type "method"
    comment "&#10;     * Returns a percentage format for the specified locale.&#10;     *&#10;     * @param inLocale the desired locale&#10;     * @return the {@code NumberFormat} instance for percentage formatting&#10;     "
  ]
  node [
    id 2615
    label "public static Locale[] getAvailableLocales()"
    type "method"
    comment "&#10;     * Returns a compact number format for the default&#10;     * {@link java.util.Locale.Category#FORMAT FORMAT} locale with&#10;     * {@link NumberFormat.Style#SHORT &#34;SHORT&#34;} format style.&#10;     *&#10;     * @return A {@code NumberFormat} instance for compact number&#10;     *         formatting&#10;     *&#10;     * @see CompactNumberFormat&#10;     * @see NumberFormat.Style&#10;     * @see java.util.Locale#getDefault(java.util.Locale.Category)&#10;     * @see java.util.Locale.Category#FORMAT&#10;     * @since 12&#10;     *&#10;    public static NumberFormat getCompactNumberInstance() {&#10;        return getInstance(Locale.getDefault(&#10;                Locale.Category.FORMAT), NumberFormat.Style.SHORT, COMPACTSTYLE);&#10;    }&#10;&#10;    /*&#10;     * Returns a compact number format for the specified {@link java.util.Locale locale}&#10;     * and {@link NumberFormat.Style formatStyle}.&#10;     *&#10;     * @param locale the desired locale&#10;     * @param formatStyle the style for formatting a number&#10;     * @return A {@code NumberFormat} instance for compact number&#10;     *         formatting&#10;     * @throws NullPointerException if {@code locale} or {@code formatStyle}&#10;     *                              is {@code null}&#10;     *&#10;     * @see CompactNumberFormat&#10;     * @see NumberFormat.Style&#10;     * @see java.util.Locale&#10;     * @since 12&#10;     *&#10;    public static NumberFormat getCompactNumberInstance(Locale locale,&#10;            NumberFormat.Style formatStyle) {&#10;&#10;        Objects.requireNonNull(locale);&#10;        Objects.requireNonNull(formatStyle);&#10;        return getInstance(locale, formatStyle, COMPACTSTYLE);&#10;    }&#10;    // END Android-removed: Remove unsupprted CompactNumberFormat.&#10;&#10;    // Android-changed: Removed reference to NumberFormatProvider.&#10;    /**&#10;     * Returns an array of all locales for which the&#10;     * {@code get*Instance} methods of this class can return&#10;     * localized instances.&#10;     * It must contain at least a {@code Locale} instance equal to&#10;     * {@link java.util.Locale#US Locale.US}.&#10;     *&#10;     * @return An array of locales for which localized&#10;     *         {@code NumberFormat} instances are available.&#10;     "
  ]
  node [
    id 2616
    label "java.util.Locale"
  ]
  node [
    id 2617
    label "NumberFormat.Style"
  ]
  node [
    id 2618
    label "public boolean isGroupingUsed()"
    type "method"
    comment "&#10;     * Returns true if grouping is used in this format. For example, in the&#10;     * English locale, with grouping on, the number 1234567 might be formatted&#10;     * as &#34;1,234,567&#34;. The grouping separator as well as the size of each group&#10;     * is locale dependent and is determined by sub-classes of NumberFormat.&#10;     *&#10;     * @return {@code true} if grouping is used;&#10;     *         {@code false} otherwise&#10;     * @see #setGroupingUsed&#10;     "
  ]
  node [
    id 2619
    label "public void setGroupingUsed(boolean newValue)"
    type "method"
    comment "&#10;     * Set whether or not grouping will be used in this format.&#10;     *&#10;     * @param newValue {@code true} if grouping is used;&#10;     *                 {@code false} otherwise&#10;     * @see #isGroupingUsed&#10;     "
  ]
  node [
    id 2620
    label "public int getMaximumIntegerDigits()"
    type "method"
    comment "&#10;     * Returns the maximum number of digits allowed in the integer portion of a&#10;     * number.&#10;     *&#10;     * @return the maximum number of digits&#10;     * @see #setMaximumIntegerDigits&#10;     "
  ]
  node [
    id 2621
    label "public void setMaximumIntegerDigits(int newValue)"
    type "method"
    comment "&#10;     * Sets the maximum number of digits allowed in the integer portion of a&#10;     * number. maximumIntegerDigits must be &#38;ge; minimumIntegerDigits.  If the&#10;     * new value for maximumIntegerDigits is less than the current value&#10;     * of minimumIntegerDigits, then minimumIntegerDigits will also be set to&#10;     * the new value.&#10;     *&#10;     * @param newValue the maximum number of integer digits to be shown; if&#10;     * less than zero, then zero is used. The concrete subclass may enforce an&#10;     * upper limit to this value appropriate to the numeric type being formatted.&#10;     * @see #getMaximumIntegerDigits&#10;     "
  ]
  node [
    id 2622
    label "public int getMinimumIntegerDigits()"
    type "method"
    comment "&#10;     * Returns the minimum number of digits allowed in the integer portion of a&#10;     * number.&#10;     *&#10;     * @return the minimum number of digits&#10;     * @see #setMinimumIntegerDigits&#10;     "
  ]
  node [
    id 2623
    label "public void setMinimumIntegerDigits(int newValue)"
    type "method"
    comment "&#10;     * Sets the minimum number of digits allowed in the integer portion of a&#10;     * number. minimumIntegerDigits must be &#38;le; maximumIntegerDigits.  If the&#10;     * new value for minimumIntegerDigits exceeds the current value&#10;     * of maximumIntegerDigits, then maximumIntegerDigits will also be set to&#10;     * the new value&#10;     *&#10;     * @param newValue the minimum number of integer digits to be shown; if&#10;     * less than zero, then zero is used. The concrete subclass may enforce an&#10;     * upper limit to this value appropriate to the numeric type being formatted.&#10;     * @see #getMinimumIntegerDigits&#10;     "
  ]
  node [
    id 2624
    label "public int getMaximumFractionDigits()"
    type "method"
    comment "&#10;     * Returns the maximum number of digits allowed in the fraction portion of a&#10;     * number.&#10;     *&#10;     * @return the maximum number of digits.&#10;     * @see #setMaximumFractionDigits&#10;     "
  ]
  node [
    id 2625
    label "public void setMaximumFractionDigits(int newValue)"
    type "method"
    comment "&#10;     * Sets the maximum number of digits allowed in the fraction portion of a&#10;     * number. maximumFractionDigits must be &#38;ge; minimumFractionDigits.  If the&#10;     * new value for maximumFractionDigits is less than the current value&#10;     * of minimumFractionDigits, then minimumFractionDigits will also be set to&#10;     * the new value.&#10;     *&#10;     * @param newValue the maximum number of fraction digits to be shown; if&#10;     * less than zero, then zero is used. The concrete subclass may enforce an&#10;     * upper limit to this value appropriate to the numeric type being formatted.&#10;     * @see #getMaximumFractionDigits&#10;     "
  ]
  node [
    id 2626
    label "public int getMinimumFractionDigits()"
    type "method"
    comment "&#10;     * Returns the minimum number of digits allowed in the fraction portion of a&#10;     * number.&#10;     *&#10;     * @return the minimum number of digits&#10;     * @see #setMinimumFractionDigits&#10;     "
  ]
  node [
    id 2627
    label "public void setMinimumFractionDigits(int newValue)"
    type "method"
    comment "&#10;     * Sets the minimum number of digits allowed in the fraction portion of a&#10;     * number. minimumFractionDigits must be &#38;le; maximumFractionDigits.  If the&#10;     * new value for minimumFractionDigits exceeds the current value&#10;     * of maximumFractionDigits, then maximumFractionDigits will also be set to&#10;     * the new value&#10;     *&#10;     * @param newValue the minimum number of fraction digits to be shown; if&#10;     * less than zero, then zero is used. The concrete subclass may enforce an&#10;     * upper limit to this value appropriate to the numeric type being formatted.&#10;     * @see #getMinimumFractionDigits&#10;     "
  ]
  node [
    id 2628
    label "public Currency getCurrency()"
    type "method"
    comment "&#10;     * Gets the currency used by this number format when formatting&#10;     * currency values. The initial value is derived in a locale dependent&#10;     * way. The returned value may be null if no valid&#10;     * currency could be determined and no currency has been set using&#10;     * {@link #setCurrency(java.util.Currency) setCurrency}.&#10;     * <p>&#10;     * The default implementation throws&#10;     * {@code UnsupportedOperationException}.&#10;     *&#10;     * @return the currency used by this number format, or {@code null}&#10;     * @throws    UnsupportedOperationException if the number format class&#10;     * doesn't implement currency formatting&#10;     * @since 1.4&#10;     "
  ]
  node [
    id 2629
    label "setCurrency(java.util.Currency)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2630
    label "public void setCurrency(Currency currency)"
    type "method"
    comment "&#10;     * Sets the currency used by this number format when formatting&#10;     * currency values. This does not update the minimum or maximum&#10;     * number of fraction digits used by the number format.&#10;     * <p>&#10;     * The default implementation throws&#10;     * {@code UnsupportedOperationException}.&#10;     *&#10;     * @param currency the new currency to be used by this number format&#10;     * @throws    UnsupportedOperationException if the number format class&#10;     * doesn't implement currency formatting&#10;     * @throws    NullPointerException if {@code currency} is null&#10;     * @since 1.4&#10;     "
  ]
  node [
    id 2631
    label "public RoundingMode getRoundingMode()"
    type "method"
    comment "&#10;     * Gets the {@link java.math.RoundingMode} used in this NumberFormat.&#10;     * The default implementation of this method in NumberFormat&#10;     * always throws {@link java.lang.UnsupportedOperationException}.&#10;     * Subclasses which handle different rounding modes should override&#10;     * this method.&#10;     *&#10;     * @throws    UnsupportedOperationException The default implementation&#10;     *     always throws this exception&#10;     * @return The {@code RoundingMode} used for this NumberFormat.&#10;     * @see #setRoundingMode(RoundingMode)&#10;     * @since 1.6&#10;     "
  ]
  node [
    id 2632
    label "java.lang.UnsupportedOperationException"
    type "class"
    comment "&#10; * Thrown to indicate that the requested operation is not supported.<p>&#10; *&#10; * This class is a member of the&#10; * <a href=&#34;{@docRoot}/java.base/java/util/package-summary.html#CollectionsFramework&#34;>&#10; * Java Collections Framework</a>.&#10; *&#10; * @author  Josh Bloch&#10; * @since   1.2&#10; "
  ]
  node [
    id 2633
    label "java.math.RoundingMode"
  ]
  node [
    id 2634
    label "public void setRoundingMode(RoundingMode roundingMode)"
    type "method"
    comment "&#10;     * Sets the {@link java.math.RoundingMode} used in this NumberFormat.&#10;     * The default implementation of this method in NumberFormat always&#10;     * throws {@link java.lang.UnsupportedOperationException}.&#10;     * Subclasses which handle different rounding modes should override&#10;     * this method.&#10;     *&#10;     * @throws    UnsupportedOperationException The default implementation&#10;     *     always throws this exception&#10;     * @throws    NullPointerException if {@code roundingMode} is null&#10;     * @param roundingMode The {@code RoundingMode} to be used&#10;     * @see #getRoundingMode()&#10;     * @since 1.6&#10;     "
  ]
  node [
    id 2635
    label "private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException"
    type "method"
    comment "&#10;     * First, read in the default serializable data.&#10;     *&#10;     * Then, if {@code serialVersionOnStream} is less than 1, indicating that&#10;     * the stream was written by JDK 1.1,&#10;     * set the {@code int} fields such as {@code maximumIntegerDigits}&#10;     * to be equal to the {@code byte} fields such as {@code maxIntegerDigits},&#10;     * since the {@code int} fields were not present in JDK 1.1.&#10;     * Finally, set serialVersionOnStream back to the maximum allowed value so that&#10;     * default serialization will work properly if this object is streamed out again.&#10;     *&#10;     * <p>If {@code minimumIntegerDigits} is greater than&#10;     * {@code maximumIntegerDigits} or {@code minimumFractionDigits}&#10;     * is greater than {@code maximumFractionDigits}, then the stream data&#10;     * is invalid and this method throws an {@code InvalidObjectException}.&#10;     * In addition, if any of these values is negative, then this method throws&#10;     * an {@code InvalidObjectException}.&#10;     *&#10;     * @since 1.2&#10;     "
  ]
  node [
    id 2636
    label "private void writeObject(ObjectOutputStream stream) throws IOException"
    type "method"
    comment "&#10;     * Write out the default serializable data, after first setting&#10;     * the {@code byte} fields such as {@code maxIntegerDigits} to be&#10;     * equal to the {@code int} fields such as {@code maximumIntegerDigits}&#10;     * (or to {@code Byte.MAX_VALUE}, whichever is smaller), for compatibility&#10;     * with the JDK 1.1 version of the stream format.&#10;     *&#10;     * @since 1.2&#10;     "
  ]
  node [
    id 2637
    label "public static String toHexString(double d)"
    type "method"
    comment "&#10;     * Returns a hexadecimal string representation of the&#10;     * {@code double} argument. All characters mentioned below&#10;     * are ASCII characters.&#10;     *&#10;     * <ul>&#10;     * <li>If the argument is NaN, the result is the string&#10;     *     &#34;{@code NaN}&#34;.&#10;     * <li>Otherwise, the result is a string that represents the sign&#10;     * and magnitude of the argument. If the sign is negative, the&#10;     * first character of the result is '{@code -}'&#10;     * ({@code '\u005Cu002D'}); if the sign is positive, no sign&#10;     * character appears in the result. As for the magnitude <i>m</i>:&#10;     *&#10;     * <ul>&#10;     * <li>If <i>m</i> is infinity, it is represented by the string&#10;     * {@code &#34;Infinity&#34;}; thus, positive infinity produces the&#10;     * result {@code &#34;Infinity&#34;} and negative infinity produces&#10;     * the result {@code &#34;-Infinity&#34;}.&#10;     *&#10;     * <li>If <i>m</i> is zero, it is represented by the string&#10;     * {@code &#34;0x0.0p0&#34;}; thus, negative zero produces the result&#10;     * {@code &#34;-0x0.0p0&#34;} and positive zero produces the result&#10;     * {@code &#34;0x0.0p0&#34;}.&#10;     *&#10;     * <li>If <i>m</i> is a {@code double} value with a&#10;     * normalized representation, substrings are used to represent the&#10;     * significand and exponent fields.  The significand is&#10;     * represented by the characters {@code &#34;0x1.&#34;}&#10;     * followed by a lowercase hexadecimal representation of the rest&#10;     * of the significand as a fraction.  Trailing zeros in the&#10;     * hexadecimal representation are removed unless all the digits&#10;     * are zero, in which case a single zero is used. Next, the&#10;     * exponent is represented by {@code &#34;p&#34;} followed&#10;     * by a decimal string of the unbiased exponent as if produced by&#10;     * a call to {@link Integer#toString(int) Integer.toString} on the&#10;     * exponent value.&#10;     *&#10;     * <li>If <i>m</i> is a {@code double} value with a subnormal&#10;     * representation, the significand is represented by the&#10;     * characters {@code &#34;0x0.&#34;} followed by a&#10;     * hexadecimal representation of the rest of the significand as a&#10;     * fraction.  Trailing zeros in the hexadecimal representation are&#10;     * removed. Next, the exponent is represented by&#10;     * {@code &#34;p-1022&#34;}.  Note that there must be at&#10;     * least one nonzero digit in a subnormal significand.&#10;     *&#10;     * </ul>&#10;     *&#10;     * </ul>&#10;     *&#10;     * <table class=&#34;striped&#34;>&#10;     * <caption>Examples</caption>&#10;     * <thead>&#10;     * <tr><th scope=&#34;col&#34;>Floating-point Value</th><th scope=&#34;col&#34;>Hexadecimal String</th>&#10;     * </thead>&#10;     * <tbody style=&#34;text-align:right&#34;>&#10;     * <tr><th scope=&#34;row&#34;>{@code 1.0}</th> <td>{@code 0x1.0p0}</td>&#10;     * <tr><th scope=&#34;row&#34;>{@code -1.0}</th>        <td>{@code -0x1.0p0}</td>&#10;     * <tr><th scope=&#34;row&#34;>{@code 2.0}</th> <td>{@code 0x1.0p1}</td>&#10;     * <tr><th scope=&#34;row&#34;>{@code 3.0}</th> <td>{@code 0x1.8p1}</td>&#10;     * <tr><th scope=&#34;row&#34;>{@code 0.5}</th> <td>{@code 0x1.0p-1}</td>&#10;     * <tr><th scope=&#34;row&#34;>{@code 0.25}</th>        <td>{@code 0x1.0p-2}</td>&#10;     * <tr><th scope=&#34;row&#34;>{@code Double.MAX_VALUE}</th>&#10;     *     <td>{@code 0x1.fffffffffffffp1023}</td>&#10;     * <tr><th scope=&#34;row&#34;>{@code Minimum Normal Value}</th>&#10;     *     <td>{@code 0x1.0p-1022}</td>&#10;     * <tr><th scope=&#34;row&#34;>{@code Maximum Subnormal Value}</th>&#10;     *     <td>{@code 0x0.fffffffffffffp-1022}</td>&#10;     * <tr><th scope=&#34;row&#34;>{@code Double.MIN_VALUE}</th>&#10;     *     <td>{@code 0x0.0000000000001p-1022}</td>&#10;     * </tbody>&#10;     * </table>&#10;     * @param   d   the {@code double} to be converted.&#10;     * @return a hex string representation of the argument.&#10;     * @since 1.5&#10;     * @author Joseph D. Darcy&#10;     "
  ]
  node [
    id 2638
    label "public static Double valueOf(String s) throws NumberFormatException"
    type "method"
    comment "&#10;     * Returns a {@code Double} object holding the&#10;     * {@code double} value represented by the argument string&#10;     * {@code s}.&#10;     *&#10;     * <p>If {@code s} is {@code null}, then a&#10;     * {@code NullPointerException} is thrown.&#10;     *&#10;     * <p>Leading and trailing whitespace characters in {@code s}&#10;     * are ignored.  Whitespace is removed as if by the {@link&#10;     * String#trim} method; that is, both ASCII space and control&#10;     * characters are removed. The rest of {@code s} should&#10;     * constitute a <i>FloatValue</i> as described by the lexical&#10;     * syntax rules:&#10;     *&#10;     * <blockquote>&#10;     * <dl>&#10;     * <dt><i>FloatValue:</i>&#10;     * <dd><i>Sign<sub>opt</sub></i> {@code NaN}&#10;     * <dd><i>Sign<sub>opt</sub></i> {@code Infinity}&#10;     * <dd><i>Sign<sub>opt</sub> FloatingPointLiteral</i>&#10;     * <dd><i>Sign<sub>opt</sub> HexFloatingPointLiteral</i>&#10;     * <dd><i>SignedInteger</i>&#10;     * </dl>&#10;     *&#10;     * <dl>&#10;     * <dt><i>HexFloatingPointLiteral</i>:&#10;     * <dd> <i>HexSignificand BinaryExponent FloatTypeSuffix<sub>opt</sub></i>&#10;     * </dl>&#10;     *&#10;     * <dl>&#10;     * <dt><i>HexSignificand:</i>&#10;     * <dd><i>HexNumeral</i>&#10;     * <dd><i>HexNumeral</i> {@code .}&#10;     * <dd>{@code 0x} <i>HexDigits<sub>opt</sub>&#10;     *     </i>{@code .}<i> HexDigits</i>&#10;     * <dd>{@code 0X}<i> HexDigits<sub>opt</sub>&#10;     *     </i>{@code .} <i>HexDigits</i>&#10;     * </dl>&#10;     *&#10;     * <dl>&#10;     * <dt><i>BinaryExponent:</i>&#10;     * <dd><i>BinaryExponentIndicator SignedInteger</i>&#10;     * </dl>&#10;     *&#10;     * <dl>&#10;     * <dt><i>BinaryExponentIndicator:</i>&#10;     * <dd>{@code p}&#10;     * <dd>{@code P}&#10;     * </dl>&#10;     *&#10;     * </blockquote>&#10;     *&#10;     * where <i>Sign</i>, <i>FloatingPointLiteral</i>,&#10;     * <i>HexNumeral</i>, <i>HexDigits</i>, <i>SignedInteger</i> and&#10;     * <i>FloatTypeSuffix</i> are as defined in the lexical structure&#10;     * sections of&#10;     * <cite>The Java Language Specification</cite>,&#10;     * except that underscores are not accepted between digits.&#10;     * If {@code s} does not have the form of&#10;     * a <i>FloatValue</i>, then a {@code NumberFormatException}&#10;     * is thrown. Otherwise, {@code s} is regarded as&#10;     * representing an exact decimal value in the usual&#10;     * &#34;computerized scientific notation&#34; or as an exact&#10;     * hexadecimal value; this exact numerical value is then&#10;     * conceptually converted to an &#34;infinitely precise&#34;&#10;     * binary value that is then rounded to type {@code double}&#10;     * by the usual round-to-nearest rule of IEEE 754 floating-point&#10;     * arithmetic, which includes preserving the sign of a zero&#10;     * value.&#10;     *&#10;     * Note that the round-to-nearest rule also implies overflow and&#10;     * underflow behaviour; if the exact value of {@code s} is large&#10;     * enough in magnitude (greater than or equal to ({@link&#10;     * #MAX_VALUE} + {@link Math#ulp(double) ulp(MAX_VALUE)}/2),&#10;     * rounding to {@code double} will result in an infinity and if the&#10;     * exact value of {@code s} is small enough in magnitude (less&#10;     * than or equal to {@link #MIN_VALUE}/2), rounding to float will&#10;     * result in a zero.&#10;     *&#10;     * Finally, after rounding a {@code Double} object representing&#10;     * this {@code double} value is returned.&#10;     *&#10;     * <p> To interpret localized string representations of a&#10;     * floating-point value, use subclasses of {@link&#10;     * java.text.NumberFormat}.&#10;     *&#10;     * <p>Note that trailing format specifiers, specifiers that&#10;     * determine the type of a floating-point literal&#10;     * ({@code 1.0f} is a {@code float} value;&#10;     * {@code 1.0d} is a {@code double} value), do&#10;     * <em>not</em> influence the results of this method.  In other&#10;     * words, the numerical value of the input string is converted&#10;     * directly to the target floating-point type.  The two-step&#10;     * sequence of conversions, string to {@code float} followed&#10;     * by {@code float} to {@code double}, is <em>not</em>&#10;     * equivalent to converting a string directly to&#10;     * {@code double}. For example, the {@code float}&#10;     * literal {@code 0.1f} is equal to the {@code double}&#10;     * value {@code 0.10000000149011612}; the {@code float}&#10;     * literal {@code 0.1f} represents a different numerical&#10;     * value than the {@code double} literal&#10;     * {@code 0.1}. (The numerical value 0.1 cannot be exactly&#10;     * represented in a binary floating-point number.)&#10;     *&#10;     * <p>To avoid calling this method on an invalid string and having&#10;     * a {@code NumberFormatException} be thrown, the regular&#10;     * expression below can be used to screen the input string:&#10;     *&#10;     * <pre>{@code&#10;     *  final String Digits     = &#34;(\\p{Digit}+)&#34;;&#10;     *  final String HexDigits  = &#34;(\\p{XDigit}+)&#34;;&#10;     *  // an exponent is 'e' or 'E' followed by an optionally&#10;     *  // signed decimal integer.&#10;     *  final String Exp        = &#34;[eE][+-]?&#34;+Digits;&#10;     *  final String fpRegex    =&#10;     *      (&#34;[\\x00-\\x20]*&#34;+  // Optional leading &#34;whitespace&#34;&#10;     *       &#34;[+-]?(&#34; + // Optional sign character&#10;     *       &#34;NaN|&#34; +           // &#34;NaN&#34; string&#10;     *       &#34;Infinity|&#34; +      // &#34;Infinity&#34; string&#10;     *&#10;     *       // A decimal floating-point string representing a finite positive&#10;     *       // number without a leading sign has at most five basic pieces:&#10;     *       // Digits . Digits ExponentPart FloatTypeSuffix&#10;     *       //&#10;     *       // Since this method allows integer-only strings as input&#10;     *       // in addition to strings of floating-point literals, the&#10;     *       // two sub-patterns below are simplifications of the grammar&#10;     *       // productions from section 3.10.2 of&#10;     *       // The Java Language Specification.&#10;     *&#10;     *       // Digits ._opt Digits_opt ExponentPart_opt FloatTypeSuffix_opt&#10;     *       &#34;(((&#34;+Digits+&#34;(\\.)?(&#34;+Digits+&#34;?)(&#34;+Exp+&#34;)?)|&#34;+&#10;     *&#10;     *       // . Digits ExponentPart_opt FloatTypeSuffix_opt&#10;     *       &#34;(\\.(&#34;+Digits+&#34;)(&#34;+Exp+&#34;)?)|&#34;+&#10;     *&#10;     *       // Hexadecimal strings&#10;     *       &#34;((&#34; +&#10;     *        // 0[xX] HexDigits ._opt BinaryExponent FloatTypeSuffix_opt&#10;     *        &#34;(0[xX]&#34; + HexDigits + &#34;(\\.)?)|&#34; +&#10;     *&#10;     *        // 0[xX] HexDigits_opt . HexDigits BinaryExponent FloatTypeSuffix_opt&#10;     *        &#34;(0[xX]&#34; + HexDigits + &#34;?(\\.)&#34; + HexDigits + &#34;)&#34; +&#10;     *&#10;     *        &#34;)[pP][+-]?&#34; + Digits + &#34;))&#34; +&#10;     *       &#34;[fFdD]?))&#34; +&#10;     *       &#34;[\\x00-\\x20]*&#34;);// Optional trailing &#34;whitespace&#34;&#10;     *&#10;     *  if (Pattern.matches(fpRegex, myString))&#10;     *      Double.valueOf(myString); // Will not throw NumberFormatException&#10;     *  else {&#10;     *      // Perform suitable alternative action&#10;     *  }&#10;     * }</pre>&#10;     *&#10;     * @param      s   the string to be parsed.&#10;     * @return     a {@code Double} object holding the value&#10;     *             represented by the {@code String} argument.&#10;     * @throws     NumberFormatException  if the string does not contain a&#10;     *             parsable number.&#10;     "
  ]
  node [
    id 2639
    label "ulp(double)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2640
    label "public static Double valueOf(double d)"
    type "method"
    comment "&#10;     * Returns a {@code Double} instance representing the specified&#10;     * {@code double} value.&#10;     * If a new {@code Double} instance is not required, this method&#10;     * should generally be used in preference to the constructor&#10;     * {@link #Double(double)}, as this method is likely to yield&#10;     * significantly better space and time performance by caching&#10;     * frequently requested values.&#10;     *&#10;     * @param  d a double value.&#10;     * @return a {@code Double} instance representing {@code d}.&#10;     * @since  1.5&#10;     "
  ]
  node [
    id 2641
    label "Double(double)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2642
    label "public static double parseDouble(String s) throws NumberFormatException"
    type "method"
    comment "&#10;     * Returns a new {@code double} initialized to the value&#10;     * represented by the specified {@code String}, as performed&#10;     * by the {@code valueOf} method of class&#10;     * {@code Double}.&#10;     *&#10;     * @param  s   the string to be parsed.&#10;     * @return the {@code double} value represented by the string&#10;     *         argument.&#10;     * @throws NullPointerException  if the string is null&#10;     * @throws NumberFormatException if the string does not contain&#10;     *         a parsable {@code double}.&#10;     * @see    java.lang.Double#valueOf(String)&#10;     * @since 1.2&#10;     "
  ]
  node [
    id 2643
    label "public static boolean isNaN(double v)"
    type "method"
    comment "&#10;     * Returns {@code true} if the specified number is a&#10;     * Not-a-Number (NaN) value, {@code false} otherwise.&#10;     *&#10;     * @param   v   the value to be tested.&#10;     * @return  {@code true} if the value of the argument is NaN;&#10;     *          {@code false} otherwise.&#10;     "
  ]
  node [
    id 2644
    label "public static boolean isInfinite(double v)"
    type "method"
    comment "&#10;     * Returns {@code true} if the specified number is infinitely&#10;     * large in magnitude, {@code false} otherwise.&#10;     *&#10;     * @param   v   the value to be tested.&#10;     * @return  {@code true} if the value of the argument is positive&#10;     *          infinity or negative infinity; {@code false} otherwise.&#10;     "
  ]
  node [
    id 2645
    label "public static boolean isFinite(double d)"
    type "method"
    comment "&#10;     * Returns {@code true} if the argument is a finite floating-point&#10;     * value; returns {@code false} otherwise (for NaN and infinity&#10;     * arguments).&#10;     *&#10;     * @param d the {@code double} value to be tested&#10;     * @return {@code true} if the argument is a finite&#10;     * floating-point value, {@code false} otherwise.&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 2646
    label "public boolean isNaN()"
    type "method"
    comment "&#10;     * Returns {@code true} if this {@code Double} value is&#10;     * a Not-a-Number (NaN), {@code false} otherwise.&#10;     *&#10;     * @return  {@code true} if the value represented by this object is&#10;     *          NaN; {@code false} otherwise.&#10;     "
  ]
  node [
    id 2647
    label "public boolean isInfinite()"
    type "method"
    comment "&#10;     * Returns {@code true} if this {@code Double} value is&#10;     * infinitely large in magnitude, {@code false} otherwise.&#10;     *&#10;     * @return  {@code true} if the value represented by this object is&#10;     *          positive infinity or negative infinity;&#10;     *          {@code false} otherwise.&#10;     "
  ]
  node [
    id 2648
    label "doubleToLongBits(double)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2649
    label "public static int hashCode(double value)"
    type "method"
    comment "&#10;     * Returns a hash code for a {@code double} value; compatible with&#10;     * {@code Double.hashCode()}.&#10;     *&#10;     * @param value the value to hash&#10;     * @return a hash code value for a {@code double} value.&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 2650
    label "public static long doubleToLongBits(double value)"
    type "method"
    comment "&#10;     * Returns a representation of the specified floating-point value&#10;     * according to the IEEE 754 floating-point &#34;double&#10;     * format&#34; bit layout.&#10;     *&#10;     * <p>Bit 63 (the bit that is selected by the mask&#10;     * {@code 0x8000000000000000L}) represents the sign of the&#10;     * floating-point number. Bits&#10;     * 62-52 (the bits that are selected by the mask&#10;     * {@code 0x7ff0000000000000L}) represent the exponent. Bits 51-0&#10;     * (the bits that are selected by the mask&#10;     * {@code 0x000fffffffffffffL}) represent the significand&#10;     * (sometimes called the mantissa) of the floating-point number.&#10;     *&#10;     * <p>If the argument is positive infinity, the result is&#10;     * {@code 0x7ff0000000000000L}.&#10;     *&#10;     * <p>If the argument is negative infinity, the result is&#10;     * {@code 0xfff0000000000000L}.&#10;     *&#10;     * <p>If the argument is NaN, the result is&#10;     * {@code 0x7ff8000000000000L}.&#10;     *&#10;     * <p>In all cases, the result is a {@code long} integer that, when&#10;     * given to the {@link #longBitsToDouble(long)} method, will produce a&#10;     * floating-point value the same as the argument to&#10;     * {@code doubleToLongBits} (except all NaN values are&#10;     * collapsed to a single &#34;canonical&#34; NaN value).&#10;     *&#10;     * @param   value   a {@code double} precision floating-point number.&#10;     * @return the bits that represent the floating-point number.&#10;     "
  ]
  node [
    id 2651
    label "longBitsToDouble(long)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2652
    label "public static native long doubleToRawLongBits(double value)"
    type "method"
    comment "&#10;     * Returns a representation of the specified floating-point value&#10;     * according to the IEEE 754 floating-point &#34;double&#10;     * format&#34; bit layout, preserving Not-a-Number (NaN) values.&#10;     *&#10;     * <p>Bit 63 (the bit that is selected by the mask&#10;     * {@code 0x8000000000000000L}) represents the sign of the&#10;     * floating-point number. Bits&#10;     * 62-52 (the bits that are selected by the mask&#10;     * {@code 0x7ff0000000000000L}) represent the exponent. Bits 51-0&#10;     * (the bits that are selected by the mask&#10;     * {@code 0x000fffffffffffffL}) represent the significand&#10;     * (sometimes called the mantissa) of the floating-point number.&#10;     *&#10;     * <p>If the argument is positive infinity, the result is&#10;     * {@code 0x7ff0000000000000L}.&#10;     *&#10;     * <p>If the argument is negative infinity, the result is&#10;     * {@code 0xfff0000000000000L}.&#10;     *&#10;     * <p>If the argument is NaN, the result is the {@code long}&#10;     * integer representing the actual NaN value.  Unlike the&#10;     * {@code doubleToLongBits} method,&#10;     * {@code doubleToRawLongBits} does not collapse all the bit&#10;     * patterns encoding a NaN to a single &#34;canonical&#34; NaN&#10;     * value.&#10;     *&#10;     * <p>In all cases, the result is a {@code long} integer that,&#10;     * when given to the {@link #longBitsToDouble(long)} method, will&#10;     * produce a floating-point value the same as the argument to&#10;     * {@code doubleToRawLongBits}.&#10;     *&#10;     * @param   value   a {@code double} precision floating-point number.&#10;     * @return the bits that represent the floating-point number.&#10;     * @since 1.3&#10;     "
  ]
  node [
    id 2653
    label "public static native double longBitsToDouble(long bits)"
    type "method"
    comment "&#10;     * Returns the {@code double} value corresponding to a given&#10;     * bit representation.&#10;     * The argument is considered to be a representation of a&#10;     * floating-point value according to the IEEE 754 floating-point&#10;     * &#34;double format&#34; bit layout.&#10;     *&#10;     * <p>If the argument is {@code 0x7ff0000000000000L}, the result&#10;     * is positive infinity.&#10;     *&#10;     * <p>If the argument is {@code 0xfff0000000000000L}, the result&#10;     * is negative infinity.&#10;     *&#10;     * <p>If the argument is any value in the range&#10;     * {@code 0x7ff0000000000001L} through&#10;     * {@code 0x7fffffffffffffffL} or in the range&#10;     * {@code 0xfff0000000000001L} through&#10;     * {@code 0xffffffffffffffffL}, the result is a NaN.  No IEEE&#10;     * 754 floating-point operation provided by Java can distinguish&#10;     * between two NaN values of the same type with different bit&#10;     * patterns.  Distinct values of NaN are only distinguishable by&#10;     * use of the {@code Double.doubleToRawLongBits} method.&#10;     *&#10;     * <p>In all other cases, let <i>s</i>, <i>e</i>, and <i>m</i> be three&#10;     * values that can be computed from the argument:&#10;     *&#10;     * <blockquote><pre>{@code&#10;     * int s = ((bits >> 63) == 0) ? 1 : -1;&#10;     * int e = (int)((bits >> 52) &#38; 0x7ffL);&#10;     * long m = (e == 0) ?&#10;     *                 (bits &#38; 0xfffffffffffffL) << 1 :&#10;     *                 (bits &#38; 0xfffffffffffffL) | 0x10000000000000L;&#10;     * }</pre></blockquote>&#10;     *&#10;     * Then the floating-point result equals the value of the mathematical&#10;     * expression <i>s</i>&#38;middot;<i>m</i>&#38;middot;2<sup><i>e</i>-1075</sup>.&#10;     *&#10;     * <p>Note that this method may not be able to return a&#10;     * {@code double} NaN with exactly same bit pattern as the&#10;     * {@code long} argument.  IEEE 754 distinguishes between two&#10;     * kinds of NaNs, quiet NaNs and <i>signaling NaNs</i>.  The&#10;     * differences between the two kinds of NaN are generally not&#10;     * visible in Java.  Arithmetic operations on signaling NaNs turn&#10;     * them into quiet NaNs with a different, but often similar, bit&#10;     * pattern.  However, on some processors merely copying a&#10;     * signaling NaN also performs that conversion.  In particular,&#10;     * copying a signaling NaN to return it to the calling method&#10;     * may perform this conversion.  So {@code longBitsToDouble}&#10;     * may not be able to return a {@code double} with a&#10;     * signaling NaN bit pattern.  Consequently, for some&#10;     * {@code long} values,&#10;     * {@code doubleToRawLongBits(longBitsToDouble(start))} may&#10;     * <i>not</i> equal {@code start}.  Moreover, which&#10;     * particular bit patterns represent signaling NaNs is platform&#10;     * dependent; although all NaN bit patterns, quiet or signaling,&#10;     * must be in the NaN range identified above.&#10;     *&#10;     * @param   bits   any {@code long} integer.&#10;     * @return  the {@code double} floating-point value with the same&#10;     *          bit pattern.&#10;     "
  ]
  node [
    id 2654
    label "public int compareTo(Double anotherDouble)"
    type "method"
    comment "&#10;     * Compares two {@code Double} objects numerically.&#10;     *&#10;     * This method imposes a total order on {@code Double} objects&#10;     * with two differences compared to the incomplete order defined by&#10;     * the Java language numerical comparison operators ({@code <, <=,&#10;     * ==, >=, >}) on {@code double} values.&#10;     *&#10;     * <ul><li> A NaN is <em>unordered</em> with respect to other&#10;     *          values and unequal to itself under the comparison&#10;     *          operators.  This method chooses to define {@code&#10;     *          Double.NaN} to be equal to itself and greater than all&#10;     *          other {@code double} values (including {@code&#10;     *          Double.POSITIVE_INFINITY}).&#10;     *&#10;     *      <li> Positive zero and negative zero compare equal&#10;     *      numerically, but are distinct and distinguishable values.&#10;     *      This method chooses to define positive zero ({@code +0.0d}),&#10;     *      to be greater than negative zero ({@code -0.0d}).&#10;     * </ul>&#10;&#10;     * This ensures that the <i>natural ordering</i> of {@code Double}&#10;     * objects imposed by this method is <i>consistent with&#10;     * equals</i>; see <a href=&#34;#equivalenceRelation&#34;>this&#10;     * discussion</a> for details of floating-point comparison and&#10;     * ordering.&#10;     *&#10;     * @param   anotherDouble   the {@code Double} to be compared.&#10;     * @return  the value {@code 0} if {@code anotherDouble} is&#10;     *          numerically equal to this {@code Double}; a value&#10;     *          less than {@code 0} if this {@code Double}&#10;     *          is numerically less than {@code anotherDouble};&#10;     *          and a value greater than {@code 0} if this&#10;     *          {@code Double} is numerically greater than&#10;     *          {@code anotherDouble}.&#10;     *&#10;     * @jls 15.20.1 Numerical Comparison Operators {@code <}, {@code <=}, {@code >}, and {@code >=}&#10;     * @since   1.2&#10;     "
  ]
  node [
    id 2655
    label "public static int compare(double d1, double d2)"
    type "method"
    comment "&#10;     * Compares the two specified {@code double} values. The sign&#10;     * of the integer value returned is the same as that of the&#10;     * integer that would be returned by the call:&#10;     * <pre>&#10;     *    new Double(d1).compareTo(new Double(d2))&#10;     * </pre>&#10;     *&#10;     * @param   d1        the first {@code double} to compare&#10;     * @param   d2        the second {@code double} to compare&#10;     * @return  the value {@code 0} if {@code d1} is&#10;     *          numerically equal to {@code d2}; a value less than&#10;     *          {@code 0} if {@code d1} is numerically less than&#10;     *          {@code d2}; and a value greater than {@code 0}&#10;     *          if {@code d1} is numerically greater than&#10;     *          {@code d2}.&#10;     * @since 1.4&#10;     "
  ]
  node [
    id 2656
    label "public static double sum(double a, double b)"
    type "method"
    comment "&#10;     * Adds two {@code double} values together as per the + operator.&#10;     *&#10;     * @param a the first operand&#10;     * @param b the second operand&#10;     * @return the sum of {@code a} and {@code b}&#10;     * @jls 4.2.4 Floating-Point Operations&#10;     * @see java.util.function.BinaryOperator&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 2657
    label "public static double max(double a, double b)"
    type "method"
    comment "&#10;     * Returns the greater of two {@code double} values&#10;     * as if by calling {@link Math#max(double, double) Math.max}.&#10;     *&#10;     * @param a the first operand&#10;     * @param b the second operand&#10;     * @return the greater of {@code a} and {@code b}&#10;     * @see java.util.function.BinaryOperator&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 2658
    label "max(double"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2659
    label "public static double min(double a, double b)"
    type "method"
    comment "&#10;     * Returns the smaller of two {@code double} values&#10;     * as if by calling {@link Math#min(double, double) Math.min}.&#10;     *&#10;     * @param a the first operand&#10;     * @param b the second operand&#10;     * @return the smaller of {@code a} and {@code b}.&#10;     * @see java.util.function.BinaryOperator&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 2660
    label "min(double"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2661
    label " DoubleStream sorted()"
    type "method"
    comment "&#10;     * Returns a stream consisting of the elements of this stream in sorted&#10;     * order. The elements are compared for equality according to&#10;     * {@link java.lang.Double#compare(double, double)}.&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>stateful&#10;     * intermediate operation</a>.&#10;     *&#10;     * @return the result stream&#10;     "
  ]
  node [
    id 2662
    label " DoubleStream peek(DoubleConsumer action)"
    type "method"
    comment "&#10;     * Returns a stream consisting of the elements of this stream, additionally&#10;     * performing the provided action on each element as elements are consumed&#10;     * from the resulting stream.&#10;     *&#10;     * <p>This is an <a href=&#34;package-summary.html#StreamOps&#34;>intermediate&#10;     * operation</a>.&#10;     *&#10;     * <p>For parallel stream pipelines, the action may be called at&#10;     * whatever time and in whatever thread the element is made available by the&#10;     * upstream operation.  If the action modifies shared state,&#10;     * it is responsible for providing the required synchronization.&#10;     *&#10;     * @apiNote This method exists mainly to support debugging, where you want&#10;     * to see the elements as they flow past a certain point in a pipeline:&#10;     * <pre>{@code&#10;     *     DoubleStream.of(1, 2, 3, 4)&#10;     *         .filter(e -> e > 2)&#10;     *         .peek(e -> System.out.println(&#34;Filtered value: &#34; + e))&#10;     *         .map(e -> e * e)&#10;     *         .peek(e -> System.out.println(&#34;Mapped value: &#34; + e))&#10;     *         .sum();&#10;     * }</pre>&#10;     *&#10;     * <p>In cases where the stream implementation is able to optimize away the&#10;     * production of some or all the elements (such as with short-circuiting&#10;     * operations like {@code findFirst}, or in the example described in&#10;     * {@link #count}), the action will not be invoked for those elements.&#10;     *&#10;     * @param action a <a href=&#34;package-summary.html#NonInterference&#34;>&#10;     *               non-interfering</a> action to perform on the elements as&#10;     *               they are consumed from the stream&#10;     * @return the new stream&#10;     "
  ]
  node [
    id 2663
    label " DoubleStream limit(long maxSize)"
    type "method"
    comment "&#10;     * Returns a stream consisting of the elements of this stream, truncated&#10;     * to be no longer than {@code maxSize} in length.&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>short-circuiting&#10;     * stateful intermediate operation</a>.&#10;     *&#10;     * @apiNote&#10;     * While {@code limit()} is generally a cheap operation on sequential&#10;     * stream pipelines, it can be quite expensive on ordered parallel pipelines,&#10;     * especially for large values of {@code maxSize}, since {@code limit(n)}&#10;     * is constrained to return not just any <em>n</em> elements, but the&#10;     * <em>first n</em> elements in the encounter order.  Using an unordered&#10;     * stream source (such as {@link #generate(DoubleSupplier)}) or removing the&#10;     * ordering constraint with {@link #unordered()} may result in significant&#10;     * speedups of {@code limit()} in parallel pipelines, if the semantics of&#10;     * your situation permit.  If consistency with encounter order is required,&#10;     * and you are experiencing poor performance or memory utilization with&#10;     * {@code limit()} in parallel pipelines, switching to sequential execution&#10;     * with {@link #sequential()} may improve performance.&#10;     *&#10;     * @param maxSize the number of elements the stream should be limited to&#10;     * @return the new stream&#10;     * @throws IllegalArgumentException if {@code maxSize} is negative&#10;     "
  ]
  node [
    id 2664
    label "generate(DoubleSupplier)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2665
    label " DoubleStream skip(long n)"
    type "method"
    comment "&#10;     * Returns a stream consisting of the remaining elements of this stream&#10;     * after discarding the first {@code n} elements of the stream.&#10;     * If this stream contains fewer than {@code n} elements then an&#10;     * empty stream will be returned.&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>stateful&#10;     * intermediate operation</a>.&#10;     *&#10;     * @apiNote&#10;     * While {@code skip()} is generally a cheap operation on sequential&#10;     * stream pipelines, it can be quite expensive on ordered parallel pipelines,&#10;     * especially for large values of {@code n}, since {@code skip(n)}&#10;     * is constrained to skip not just any <em>n</em> elements, but the&#10;     * <em>first n</em> elements in the encounter order.  Using an unordered&#10;     * stream source (such as {@link #generate(DoubleSupplier)}) or removing the&#10;     * ordering constraint with {@link #unordered()} may result in significant&#10;     * speedups of {@code skip()} in parallel pipelines, if the semantics of&#10;     * your situation permit.  If consistency with encounter order is required,&#10;     * and you are experiencing poor performance or memory utilization with&#10;     * {@code skip()} in parallel pipelines, switching to sequential execution&#10;     * with {@link #sequential()} may improve performance.&#10;     *&#10;     * @param n the number of leading elements to skip&#10;     * @return the new stream&#10;     * @throws IllegalArgumentException if {@code n} is negative&#10;     "
  ]
  node [
    id 2666
    label " DoubleStream takeWhile(DoublePredicate predicate)"
    type "method"
    comment "&#10;     * Returns, if this stream is ordered, a stream consisting of the longest&#10;     * prefix of elements taken from this stream that match the given predicate.&#10;     * Otherwise returns, if this stream is unordered, a stream consisting of a&#10;     * subset of elements taken from this stream that match the given predicate.&#10;     *&#10;     * <p>If this stream is ordered then the longest prefix is a contiguous&#10;     * sequence of elements of this stream that match the given predicate.  The&#10;     * first element of the sequence is the first element of this stream, and&#10;     * the element immediately following the last element of the sequence does&#10;     * not match the given predicate.&#10;     *&#10;     * <p>If this stream is unordered, and some (but not all) elements of this&#10;     * stream match the given predicate, then the behavior of this operation is&#10;     * nondeterministic; it is free to take any subset of matching elements&#10;     * (which includes the empty set).&#10;     *&#10;     * <p>Independent of whether this stream is ordered or unordered if all&#10;     * elements of this stream match the given predicate then this operation&#10;     * takes all elements (the result is the same as the input), or if no&#10;     * elements of the stream match the given predicate then no elements are&#10;     * taken (the result is an empty stream).&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>short-circuiting&#10;     * stateful intermediate operation</a>.&#10;     *&#10;     * @implSpec&#10;     * The default implementation obtains the {@link #spliterator() spliterator}&#10;     * of this stream, wraps that spliterator so as to support the semantics&#10;     * of this operation on traversal, and returns a new stream associated with&#10;     * the wrapped spliterator.  The returned stream preserves the execution&#10;     * characteristics of this stream (namely parallel or sequential execution&#10;     * as per {@link #isParallel()}) but the wrapped spliterator may choose to&#10;     * not support splitting.  When the returned stream is closed, the close&#10;     * handlers for both the returned and this stream are invoked.&#10;     *&#10;     * @apiNote&#10;     * While {@code takeWhile()} is generally a cheap operation on sequential&#10;     * stream pipelines, it can be quite expensive on ordered parallel&#10;     * pipelines, since the operation is constrained to return not just any&#10;     * valid prefix, but the longest prefix of elements in the encounter order.&#10;     * Using an unordered stream source (such as&#10;     * {@link #generate(DoubleSupplier)}) or removing the ordering constraint&#10;     * with {@link #unordered()} may result in significant speedups of&#10;     * {@code takeWhile()} in parallel pipelines, if the semantics of your&#10;     * situation permit.  If consistency with encounter order is required, and&#10;     * you are experiencing poor performance or memory utilization with&#10;     * {@code takeWhile()} in parallel pipelines, switching to sequential&#10;     * execution with {@link #sequential()} may improve performance.&#10;     *&#10;     * @param predicate a <a href=&#34;package-summary.html#NonInterference&#34;>non-interfering</a>,&#10;     *                  <a href=&#34;package-summary.html#Statelessness&#34;>stateless</a>&#10;     *                  predicate to apply to elements to determine the longest&#10;     *                  prefix of elements.&#10;     * @return the new stream&#10;     * @since 9&#10;     "
  ]
  node [
    id 2667
    label " DoubleStream dropWhile(DoublePredicate predicate)"
    type "method"
    comment "&#10;     * Returns, if this stream is ordered, a stream consisting of the remaining&#10;     * elements of this stream after dropping the longest prefix of elements&#10;     * that match the given predicate.  Otherwise returns, if this stream is&#10;     * unordered, a stream consisting of the remaining elements of this stream&#10;     * after dropping a subset of elements that match the given predicate.&#10;     *&#10;     * <p>If this stream is ordered then the longest prefix is a contiguous&#10;     * sequence of elements of this stream that match the given predicate.  The&#10;     * first element of the sequence is the first element of this stream, and&#10;     * the element immediately following the last element of the sequence does&#10;     * not match the given predicate.&#10;     *&#10;     * <p>If this stream is unordered, and some (but not all) elements of this&#10;     * stream match the given predicate, then the behavior of this operation is&#10;     * nondeterministic; it is free to drop any subset of matching elements&#10;     * (which includes the empty set).&#10;     *&#10;     * <p>Independent of whether this stream is ordered or unordered if all&#10;     * elements of this stream match the given predicate then this operation&#10;     * drops all elements (the result is an empty stream), or if no elements of&#10;     * the stream match the given predicate then no elements are dropped (the&#10;     * result is the same as the input).&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>stateful&#10;     * intermediate operation</a>.&#10;     *&#10;     * @implSpec&#10;     * The default implementation obtains the {@link #spliterator() spliterator}&#10;     * of this stream, wraps that spliterator so as to support the semantics&#10;     * of this operation on traversal, and returns a new stream associated with&#10;     * the wrapped spliterator.  The returned stream preserves the execution&#10;     * characteristics of this stream (namely parallel or sequential execution&#10;     * as per {@link #isParallel()}) but the wrapped spliterator may choose to&#10;     * not support splitting.  When the returned stream is closed, the close&#10;     * handlers for both the returned and this stream are invoked.&#10;     *&#10;     * @apiNote&#10;     * While {@code dropWhile()} is generally a cheap operation on sequential&#10;     * stream pipelines, it can be quite expensive on ordered parallel&#10;     * pipelines, since the operation is constrained to return not just any&#10;     * valid prefix, but the longest prefix of elements in the encounter order.&#10;     * Using an unordered stream source (such as&#10;     * {@link #generate(DoubleSupplier)}) or removing the ordering constraint&#10;     * with {@link #unordered()} may result in significant speedups of&#10;     * {@code dropWhile()} in parallel pipelines, if the semantics of your&#10;     * situation permit.  If consistency with encounter order is required, and&#10;     * you are experiencing poor performance or memory utilization with&#10;     * {@code dropWhile()} in parallel pipelines, switching to sequential&#10;     * execution with {@link #sequential()} may improve performance.&#10;     *&#10;     * @param predicate a <a href=&#34;package-summary.html#NonInterference&#34;>non-interfering</a>,&#10;     *                  <a href=&#34;package-summary.html#Statelessness&#34;>stateless</a>&#10;     *                  predicate to apply to elements to determine the longest&#10;     *                  prefix of elements.&#10;     * @return the new stream&#10;     * @since 9&#10;     "
  ]
  node [
    id 2668
    label " void forEach(DoubleConsumer action)"
    type "method"
    comment "&#10;     * Performs an action for each element of this stream.&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>terminal&#10;     * operation</a>.&#10;     *&#10;     * <p>For parallel stream pipelines, this operation does <em>not</em>&#10;     * guarantee to respect the encounter order of the stream, as doing so&#10;     * would sacrifice the benefit of parallelism.  For any given element, the&#10;     * action may be performed at whatever time and in whatever thread the&#10;     * library chooses.  If the action accesses shared state, it is&#10;     * responsible for providing the required synchronization.&#10;     *&#10;     * @param action a <a href=&#34;package-summary.html#NonInterference&#34;>&#10;     *               non-interfering</a> action to perform on the elements&#10;     "
  ]
  node [
    id 2669
    label " void forEachOrdered(DoubleConsumer action)"
    type "method"
    comment "&#10;     * Performs an action for each element of this stream, guaranteeing that&#10;     * each element is processed in encounter order for streams that have a&#10;     * defined encounter order.&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>terminal&#10;     * operation</a>.&#10;     *&#10;     * @param action a <a href=&#34;package-summary.html#NonInterference&#34;>&#10;     *               non-interfering</a> action to perform on the elements&#10;     * @see #forEach(DoubleConsumer)&#10;     "
  ]
  node [
    id 2670
    label " double[] toArray()"
    type "method"
    comment "&#10;     * Returns an array containing the elements of this stream.&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>terminal&#10;     * operation</a>.&#10;     *&#10;     * @return an array containing the elements of this stream&#10;     "
  ]
  node [
    id 2671
    label " double reduce(double identity, DoubleBinaryOperator op)"
    type "method"
    comment "&#10;     * Performs a <a href=&#34;package-summary.html#Reduction&#34;>reduction</a> on the&#10;     * elements of this stream, using the provided identity value and an&#10;     * <a href=&#34;package-summary.html#Associativity&#34;>associative</a>&#10;     * accumulation function, and returns the reduced value.  This is equivalent&#10;     * to:&#10;     * <pre>{@code&#10;     *     double result = identity;&#10;     *     for (double element : this stream)&#10;     *         result = accumulator.applyAsDouble(result, element)&#10;     *     return result;&#10;     * }</pre>&#10;     *&#10;     * but is not constrained to execute sequentially.&#10;     *&#10;     * <p>The {@code identity} value must be an identity for the accumulator&#10;     * function. This means that for all {@code x},&#10;     * {@code accumulator.apply(identity, x)} is equal to {@code x}.&#10;     * The {@code accumulator} function must be an&#10;     * <a href=&#34;package-summary.html#Associativity&#34;>associative</a> function.&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>terminal&#10;     * operation</a>.&#10;     *&#10;     * @apiNote Sum, min, max, and average are all special cases of reduction.&#10;     * Summing a stream of numbers can be expressed as:&#10;     *&#10;     * <pre>{@code&#10;     *     double sum = numbers.reduce(0, (a, b) -> a+b);&#10;     * }</pre>&#10;     *&#10;     * or more compactly:&#10;     *&#10;     * <pre>{@code&#10;     *     double sum = numbers.reduce(0, Double::sum);&#10;     * }</pre>&#10;     *&#10;     * <p>While this may seem a more roundabout way to perform an aggregation&#10;     * compared to simply mutating a running total in a loop, reduction&#10;     * operations parallelize more gracefully, without needing additional&#10;     * synchronization and with greatly reduced risk of data races.&#10;     *&#10;     * @param identity the identity value for the accumulating function&#10;     * @param op an <a href=&#34;package-summary.html#Associativity&#34;>associative</a>,&#10;     *           <a href=&#34;package-summary.html#NonInterference&#34;>non-interfering</a>,&#10;     *           <a href=&#34;package-summary.html#Statelessness&#34;>stateless</a>&#10;     *           function for combining two values&#10;     * @return the result of the reduction&#10;     * @see #sum()&#10;     * @see #min()&#10;     * @see #max()&#10;     * @see #average()&#10;     "
  ]
  node [
    id 2672
    label " OptionalDouble reduce(DoubleBinaryOperator op)"
    type "method"
    comment "&#10;     * Performs a <a href=&#34;package-summary.html#Reduction&#34;>reduction</a> on the&#10;     * elements of this stream, using an&#10;     * <a href=&#34;package-summary.html#Associativity&#34;>associative</a> accumulation&#10;     * function, and returns an {@code OptionalDouble} describing the reduced&#10;     * value, if any. This is equivalent to:&#10;     * <pre>{@code&#10;     *     boolean foundAny = false;&#10;     *     double result = null;&#10;     *     for (double element : this stream) {&#10;     *         if (!foundAny) {&#10;     *             foundAny = true;&#10;     *             result = element;&#10;     *         }&#10;     *         else&#10;     *             result = accumulator.applyAsDouble(result, element);&#10;     *     }&#10;     *     return foundAny ? OptionalDouble.of(result) : OptionalDouble.empty();&#10;     * }</pre>&#10;     *&#10;     * but is not constrained to execute sequentially.&#10;     *&#10;     * <p>The {@code accumulator} function must be an&#10;     * <a href=&#34;package-summary.html#Associativity&#34;>associative</a> function.&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>terminal&#10;     * operation</a>.&#10;     *&#10;     * @param op an <a href=&#34;package-summary.html#Associativity&#34;>associative</a>,&#10;     *           <a href=&#34;package-summary.html#NonInterference&#34;>non-interfering</a>,&#10;     *           <a href=&#34;package-summary.html#Statelessness&#34;>stateless</a>&#10;     *           function for combining two values&#10;     * @return the result of the reduction&#10;     * @see #reduce(double, DoubleBinaryOperator)&#10;     "
  ]
  node [
    id 2673
    label " R collect(Supplier<R> supplier, ObjDoubleConsumer<R> accumulator, BiConsumer<R, R> combiner)"
    type "method"
    comment "&#10;     * Performs a <a href=&#34;package-summary.html#MutableReduction&#34;>mutable&#10;     * reduction</a> operation on the elements of this stream.  A mutable&#10;     * reduction is one in which the reduced value is a mutable result container,&#10;     * such as an {@code ArrayList}, and elements are incorporated by updating&#10;     * the state of the result rather than by replacing the result.  This&#10;     * produces a result equivalent to:&#10;     * <pre>{@code&#10;     *     R result = supplier.get();&#10;     *     for (double element : this stream)&#10;     *         accumulator.accept(result, element);&#10;     *     return result;&#10;     * }</pre>&#10;     *&#10;     * <p>Like {@link #reduce(double, DoubleBinaryOperator)}, {@code collect}&#10;     * operations can be parallelized without requiring additional&#10;     * synchronization.&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>terminal&#10;     * operation</a>.&#10;     *&#10;     * @param <R> the type of the mutable result container&#10;     * @param supplier a function that creates a new mutable result container.&#10;     *                 For a parallel execution, this function may be called&#10;     *                 multiple times and must return a fresh value each time.&#10;     * @param accumulator an <a href=&#34;package-summary.html#Associativity&#34;>associative</a>,&#10;     *                    <a href=&#34;package-summary.html#NonInterference&#34;>non-interfering</a>,&#10;     *                    <a href=&#34;package-summary.html#Statelessness&#34;>stateless</a>&#10;     *                    function that must fold an element into a result&#10;     *                    container.&#10;     * @param combiner an <a href=&#34;package-summary.html#Associativity&#34;>associative</a>,&#10;     *                    <a href=&#34;package-summary.html#NonInterference&#34;>non-interfering</a>,&#10;     *                    <a href=&#34;package-summary.html#Statelessness&#34;>stateless</a>&#10;     *                    function that accepts two partial result containers&#10;     *                    and merges them, which must be compatible with the&#10;     *                    accumulator function.  The combiner function must fold&#10;     *                    the elements from the second result container into the&#10;     *                    first result container.&#10;     * @return the result of the reduction&#10;     * @see Stream#collect(Supplier, BiConsumer, BiConsumer)&#10;     "
  ]
  node [
    id 2674
    label "reduce(double"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2675
    label " double sum()"
    type "method"
    comment "&#10;     * Returns the sum of elements in this stream.&#10;     *&#10;     * Summation is a special case of a <a&#10;     * href=&#34;package-summary.html#Reduction&#34;>reduction</a>. If&#10;     * floating-point summation were exact, this method would be&#10;     * equivalent to:&#10;     *&#10;     * <pre>{@code&#10;     *     return reduce(0, Double::sum);&#10;     * }</pre>&#10;     *&#10;     * However, since floating-point summation is not exact, the above&#10;     * code is not necessarily equivalent to the summation computation&#10;     * done by this method.&#10;     *&#10;     * <p>The value of a floating-point sum is a function both&#10;     * of the input values as well as the order of addition&#10;     * operations. The order of addition operations of this method is&#10;     * intentionally not defined to allow for implementation&#10;     * flexibility to improve the speed and accuracy of the computed&#10;     * result.&#10;     *&#10;     * In particular, this method may be implemented using compensated&#10;     * summation or other technique to reduce the error bound in the&#10;     * numerical sum compared to a simple summation of {@code double}&#10;     * values.&#10;     *&#10;     * Because of the unspecified order of operations and the&#10;     * possibility of using differing summation schemes, the output of&#10;     * this method may vary on the same input elements.&#10;     *&#10;     * <p>Various conditions can result in a non-finite sum being&#10;     * computed. This can occur even if the all the elements&#10;     * being summed are finite. If any element is non-finite,&#10;     * the sum will be non-finite:&#10;     *&#10;     * <ul>&#10;     *&#10;     * <li>If any element is a NaN, then the final sum will be&#10;     * NaN.&#10;     *&#10;     * <li>If the elements contain one or more infinities, the&#10;     * sum will be infinite or NaN.&#10;     *&#10;     * <ul>&#10;     *&#10;     * <li>If the elements contain infinities of opposite sign,&#10;     * the sum will be NaN.&#10;     *&#10;     * <li>If the elements contain infinities of one sign and&#10;     * an intermediate sum overflows to an infinity of the opposite&#10;     * sign, the sum may be NaN.&#10;     *&#10;     * </ul>&#10;     *&#10;     * </ul>&#10;     *&#10;     * It is possible for intermediate sums of finite values to&#10;     * overflow into opposite-signed infinities; if that occurs, the&#10;     * final sum will be NaN even if the elements are all&#10;     * finite.&#10;     *&#10;     * If all the elements are zero, the sign of zero is&#10;     * <em>not</em> guaranteed to be preserved in the final sum.&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>terminal&#10;     * operation</a>.&#10;     *&#10;     * @apiNote Elements sorted by increasing absolute magnitude tend&#10;     * to yield more accurate results.&#10;     *&#10;     * @return the sum of elements in this stream&#10;     "
  ]
  node [
    id 2676
    label " OptionalDouble min()"
    type "method"
    comment "&#10;     * Returns an {@code OptionalDouble} describing the minimum element of this&#10;     * stream, or an empty OptionalDouble if this stream is empty.  The minimum&#10;     * element will be {@code Double.NaN} if any stream element was NaN. Unlike&#10;     * the numerical comparison operators, this method considers negative zero&#10;     * to be strictly smaller than positive zero. This is a special case of a&#10;     * <a href=&#34;package-summary.html#Reduction&#34;>reduction</a> and is&#10;     * equivalent to:&#10;     * <pre>{@code&#10;     *     return reduce(Double::min);&#10;     * }</pre>&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>terminal&#10;     * operation</a>.&#10;     *&#10;     * @return an {@code OptionalDouble} containing the minimum element of this&#10;     * stream, or an empty optional if the stream is empty&#10;     "
  ]
  node [
    id 2677
    label " OptionalDouble max()"
    type "method"
    comment "&#10;     * Returns an {@code OptionalDouble} describing the maximum element of this&#10;     * stream, or an empty OptionalDouble if this stream is empty.  The maximum&#10;     * element will be {@code Double.NaN} if any stream element was NaN. Unlike&#10;     * the numerical comparison operators, this method considers negative zero&#10;     * to be strictly smaller than positive zero. This is a&#10;     * special case of a&#10;     * <a href=&#34;package-summary.html#Reduction&#34;>reduction</a> and is&#10;     * equivalent to:&#10;     * <pre>{@code&#10;     *     return reduce(Double::max);&#10;     * }</pre>&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>terminal&#10;     * operation</a>.&#10;     *&#10;     * @return an {@code OptionalDouble} containing the maximum element of this&#10;     * stream, or an empty optional if the stream is empty&#10;     "
  ]
  node [
    id 2678
    label " OptionalDouble average()"
    type "method"
    comment "&#10;     * Returns an {@code OptionalDouble} describing the arithmetic mean of elements of&#10;     * this stream, or an empty optional if this stream is empty.  This is a&#10;     * special case of a&#10;     * <a href=&#34;package-summary.html#Reduction&#34;>reduction</a>.&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>terminal&#10;     * operation</a>.&#10;     *&#10;     * @return an {@code OptionalDouble} containing the average element of this&#10;     * stream, or an empty optional if the stream is empty&#10;     "
  ]
  node [
    id 2679
    label "sum"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2680
    label " DoubleSummaryStatistics summaryStatistics()"
    type "method"
    comment "&#10;     * Returns a {@code DoubleSummaryStatistics} describing various summary data&#10;     * about the elements of this stream.  This is a special&#10;     * case of a <a href=&#34;package-summary.html#Reduction&#34;>reduction</a>.&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>terminal&#10;     * operation</a>.&#10;     *&#10;     * @return a {@code DoubleSummaryStatistics} describing various summary data&#10;     * about the elements of this stream&#10;     "
  ]
  node [
    id 2681
    label " boolean anyMatch(DoublePredicate predicate)"
    type "method"
    comment "&#10;     * Returns whether any elements of this stream match the provided&#10;     * predicate.  May not evaluate the predicate on all elements if not&#10;     * necessary for determining the result.  If the stream is empty then&#10;     * {@code false} is returned and the predicate is not evaluated.&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>short-circuiting&#10;     * terminal operation</a>.&#10;     *&#10;     * @apiNote&#10;     * This method evaluates the <em>existential quantification</em> of the&#10;     * predicate over the elements of the stream (for some x P(x)).&#10;     *&#10;     * @param predicate a <a href=&#34;package-summary.html#NonInterference&#34;>non-interfering</a>,&#10;     *                  <a href=&#34;package-summary.html#Statelessness&#34;>stateless</a>&#10;     *                  predicate to apply to elements of this stream&#10;     * @return {@code true} if any elements of the stream match the provided&#10;     * predicate, otherwise {@code false}&#10;     "
  ]
  node [
    id 2682
    label " boolean allMatch(DoublePredicate predicate)"
    type "method"
    comment "&#10;     * Returns whether all elements of this stream match the provided predicate.&#10;     * May not evaluate the predicate on all elements if not necessary for&#10;     * determining the result.  If the stream is empty then {@code true} is&#10;     * returned and the predicate is not evaluated.&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>short-circuiting&#10;     * terminal operation</a>.&#10;     *&#10;     * @apiNote&#10;     * This method evaluates the <em>universal quantification</em> of the&#10;     * predicate over the elements of the stream (for all x P(x)).  If the&#10;     * stream is empty, the quantification is said to be <em>vacuously&#10;     * satisfied</em> and is always {@code true} (regardless of P(x)).&#10;     *&#10;     * @param predicate a <a href=&#34;package-summary.html#NonInterference&#34;>non-interfering</a>,&#10;     *                  <a href=&#34;package-summary.html#Statelessness&#34;>stateless</a>&#10;     *                  predicate to apply to elements of this stream&#10;     * @return {@code true} if either all elements of the stream match the&#10;     * provided predicate or the stream is empty, otherwise {@code false}&#10;     "
  ]
  node [
    id 2683
    label " boolean noneMatch(DoublePredicate predicate)"
    type "method"
    comment "&#10;     * Returns whether no elements of this stream match the provided predicate.&#10;     * May not evaluate the predicate on all elements if not necessary for&#10;     * determining the result.  If the stream is empty then {@code true} is&#10;     * returned and the predicate is not evaluated.&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>short-circuiting&#10;     * terminal operation</a>.&#10;     *&#10;     * @apiNote&#10;     * This method evaluates the <em>universal quantification</em> of the&#10;     * negated predicate over the elements of the stream (for all x ~P(x)).  If&#10;     * the stream is empty, the quantification is said to be vacuously satisfied&#10;     * and is always {@code true}, regardless of P(x).&#10;     *&#10;     * @param predicate a <a href=&#34;package-summary.html#NonInterference&#34;>non-interfering</a>,&#10;     *                  <a href=&#34;package-summary.html#Statelessness&#34;>stateless</a>&#10;     *                  predicate to apply to elements of this stream&#10;     * @return {@code true} if either no elements of the stream match the&#10;     * provided predicate or the stream is empty, otherwise {@code false}&#10;     "
  ]
  node [
    id 2684
    label " OptionalDouble findFirst()"
    type "method"
    comment "&#10;     * Returns an {@link OptionalDouble} describing the first element of this&#10;     * stream, or an empty {@code OptionalDouble} if the stream is empty.  If&#10;     * the stream has no encounter order, then any element may be returned.&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>short-circuiting&#10;     * terminal operation</a>.&#10;     *&#10;     * @return an {@code OptionalDouble} describing the first element of this&#10;     * stream, or an empty {@code OptionalDouble} if the stream is empty&#10;     "
  ]
  node [
    id 2685
    label "java.util.OptionalDouble"
  ]
  node [
    id 2686
    label " OptionalDouble findAny()"
    type "method"
    comment "&#10;     * Returns an {@link OptionalDouble} describing some element of the stream,&#10;     * or an empty {@code OptionalDouble} if the stream is empty.&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>short-circuiting&#10;     * terminal operation</a>.&#10;     *&#10;     * <p>The behavior of this operation is explicitly nondeterministic; it is&#10;     * free to select any element in the stream.  This is to allow for maximal&#10;     * performance in parallel operations; the cost is that multiple invocations&#10;     * on the same source may not return the same result.  (If a stable result&#10;     * is desired, use {@link #findFirst()} instead.)&#10;     *&#10;     * @return an {@code OptionalDouble} describing some element of this stream,&#10;     * or an empty {@code OptionalDouble} if the stream is empty&#10;     * @see #findFirst()&#10;     "
  ]
  node [
    id 2687
    label " Stream<Double> boxed()"
    type "method"
    comment "&#10;     * Returns a {@code Stream} consisting of the elements of this stream,&#10;     * boxed to {@code Double}.&#10;     *&#10;     * <p>This is an <a href=&#34;package-summary.html#StreamOps&#34;>intermediate&#10;     * operation</a>.&#10;     *&#10;     * @return a {@code Stream} consistent of the elements of this stream,&#10;     * each boxed to a {@code Double}&#10;     "
  ]
  node [
    id 2688
    label "public static Builder builder()"
    type "method"
    comment "&#10;     * Returns a builder for a {@code LongStream}.&#10;     *&#10;     * @return a stream builder&#10;     "
  ]
  node [
    id 2689
    label "public static DoubleStream empty()"
    type "method"
    comment "&#10;     * Returns an empty sequential {@code DoubleStream}.&#10;     *&#10;     * @return an empty sequential stream&#10;     "
  ]
  node [
    id 2690
    label "public static DoubleStream of(double t)"
    type "method"
    comment "&#10;     * Returns a sequential {@code DoubleStream} containing a single element.&#10;     *&#10;     * @param t the single element&#10;     * @return a singleton sequential stream&#10;     "
  ]
  node [
    id 2691
    label "public static DoubleStream of(double... values)"
    type "method"
    comment "&#10;     * Returns a sequential ordered stream whose elements are the specified values.&#10;     *&#10;     * @param values the elements of the new stream&#10;     * @return the new stream&#10;     "
  ]
  node [
    id 2692
    label "public static DoubleStream iterate(final double seed, final DoubleUnaryOperator f)"
    type "method"
    comment "&#10;     * Returns an infinite sequential ordered {@code DoubleStream} produced by iterative&#10;     * application of a function {@code f} to an initial element {@code seed},&#10;     * producing a {@code Stream} consisting of {@code seed}, {@code f(seed)},&#10;     * {@code f(f(seed))}, etc.&#10;     *&#10;     * <p>The first element (position {@code 0}) in the {@code DoubleStream}&#10;     * will be the provided {@code seed}.  For {@code n > 0}, the element at&#10;     * position {@code n}, will be the result of applying the function {@code f}&#10;     *  to the element at position {@code n - 1}.&#10;     *&#10;     * <p>The action of applying {@code f} for one element&#10;     * <a href=&#34;../concurrent/package-summary.html#MemoryVisibility&#34;><i>happens-before</i></a>&#10;     * the action of applying {@code f} for subsequent elements.  For any given&#10;     * element the action may be performed in whatever thread the library&#10;     * chooses.&#10;     *&#10;     * @param seed the initial element&#10;     * @param f a function to be applied to the previous element to produce&#10;     *          a new element&#10;     * @return a new sequential {@code DoubleStream}&#10;     "
  ]
  node [
    id 2693
    label "public static DoubleStream iterate(double seed, DoublePredicate hasNext, DoubleUnaryOperator next)"
    type "method"
    comment "&#10;     * Returns a sequential ordered {@code DoubleStream} produced by iterative&#10;     * application of the given {@code next} function to an initial element,&#10;     * conditioned on satisfying the given {@code hasNext} predicate.  The&#10;     * stream terminates as soon as the {@code hasNext} predicate returns false.&#10;     *&#10;     * <p>{@code DoubleStream.iterate} should produce the same sequence of elements as&#10;     * produced by the corresponding for-loop:&#10;     * <pre>{@code&#10;     *     for (double index=seed; hasNext.test(index); index = next.applyAsDouble(index)) {&#10;     *         ...&#10;     *     }&#10;     * }</pre>&#10;     *&#10;     * <p>The resulting sequence may be empty if the {@code hasNext} predicate&#10;     * does not hold on the seed value.  Otherwise the first element will be the&#10;     * supplied {@code seed} value, the next element (if present) will be the&#10;     * result of applying the {@code next} function to the {@code seed} value,&#10;     * and so on iteratively until the {@code hasNext} predicate indicates that&#10;     * the stream should terminate.&#10;     *&#10;     * <p>The action of applying the {@code hasNext} predicate to an element&#10;     * <a href=&#34;../concurrent/package-summary.html#MemoryVisibility&#34;><i>happens-before</i></a>&#10;     * the action of applying the {@code next} function to that element.  The&#10;     * action of applying the {@code next} function for one element&#10;     * <i>happens-before</i> the action of applying the {@code hasNext}&#10;     * predicate for subsequent elements.  For any given element an action may&#10;     * be performed in whatever thread the library chooses.&#10;     *&#10;     * @param seed the initial element&#10;     * @param hasNext a predicate to apply to elements to determine when the&#10;     *                stream must terminate.&#10;     * @param next a function to be applied to the previous element to produce&#10;     *             a new element&#10;     * @return a new sequential {@code DoubleStream}&#10;     * @since 9&#10;     "
  ]
  node [
    id 2694
    label "public static DoubleStream generate(DoubleSupplier s)"
    type "method"
    comment "&#10;     * Returns an infinite sequential unordered stream where each element is&#10;     * generated by the provided {@code DoubleSupplier}.  This is suitable for&#10;     * generating constant streams, streams of random elements, etc.&#10;     *&#10;     * @param s the {@code DoubleSupplier} for generated elements&#10;     * @return a new infinite sequential unordered {@code DoubleStream}&#10;     "
  ]
  node [
    id 2695
    label "public static DoubleStream concat(DoubleStream a, DoubleStream b)"
    type "method"
    comment "&#10;     * Creates a lazily concatenated stream whose elements are all the&#10;     * elements of the first stream followed by all the elements of the&#10;     * second stream.  The resulting stream is ordered if both&#10;     * of the input streams are ordered, and parallel if either of the input&#10;     * streams is parallel.  When the resulting stream is closed, the close&#10;     * handlers for both input streams are invoked.&#10;     *&#10;     * <p>This method operates on the two input streams and binds each stream&#10;     * to its source.  As a result subsequent modifications to an input stream&#10;     * source may not be reflected in the concatenated stream result.&#10;     *&#10;     * @implNote&#10;     * Use caution when constructing streams from repeated concatenation.&#10;     * Accessing an element of a deeply concatenated stream can result in deep&#10;     * call chains, or even {@code StackOverflowError}.&#10;     *&#10;     * @apiNote&#10;     * To preserve optimization opportunities this method binds each stream to&#10;     * its source and accepts only two streams as parameters.  For example, the&#10;     * exact size of the concatenated stream source can be computed if the exact&#10;     * size of each input stream source is known.&#10;     * To concatenate more streams without binding, or without nested calls to&#10;     * this method, try creating a stream of streams and flat-mapping with the&#10;     * identity function, for example:&#10;     * <pre>{@code&#10;     *     DoubleStream concat = Stream.of(s1, s2, s3, s4).flatMapToDouble(s -> s);&#10;     * }</pre>&#10;     *&#10;     * @param a the first stream&#10;     * @param b the second stream&#10;     * @return the concatenation of the two input streams&#10;     "
  ]
  node [
    id 2696
    label "public static Stream<T> stream(T[] array, int startInclusive, int endExclusive)"
    type "method"
    comment "&#10;     * Returns a sequential {@link Stream} with the specified range of the&#10;     * specified array as its source.&#10;     *&#10;     * @param <T> the type of the array elements&#10;     * @param array the array, assumed to be unmodified during use&#10;     * @param startInclusive the first index to cover, inclusive&#10;     * @param endExclusive index immediately past the last index to cover&#10;     * @return a {@code Stream} for the array range&#10;     * @throws ArrayIndexOutOfBoundsException if {@code startInclusive} is&#10;     *         negative, {@code endExclusive} is less than&#10;     *         {@code startInclusive}, or {@code endExclusive} is greater than&#10;     *         the array size&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 2697
    label "public static IntStream stream(int[] array)"
    type "method"
    comment "&#10;     * Returns a sequential {@link IntStream} with the specified array as its&#10;     * source.&#10;     *&#10;     * @param array the array, assumed to be unmodified during use&#10;     * @return an {@code IntStream} for the array&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 2698
    label "java.util.stream.IntStream"
    type "class"
    comment "&#10; * A sequence of primitive int-valued elements supporting sequential and parallel&#10; * aggregate operations.  This is the {@code int} primitive specialization of&#10; * {@link Stream}.&#10; *&#10; * <p>The following example illustrates an aggregate operation using&#10; * {@link Stream} and {@link IntStream}, computing the sum of the weights of the&#10; * red widgets:&#10; *&#10; * <pre>{@code&#10; *     int sum = widgets.stream()&#10; *                      .filter(w -> w.getColor() == RED)&#10; *                      .mapToInt(w -> w.getWeight())&#10; *                      .sum();&#10; * }</pre>&#10; *&#10; * See the class documentation for {@link Stream} and the package documentation&#10; * for <a href=&#34;package-summary.html&#34;>java.util.stream</a> for additional&#10; * specification of streams, stream operations, stream pipelines, and&#10; * parallelism.&#10; *&#10; * @since 1.8&#10; * @see Stream&#10; * @see <a href=&#34;package-summary.html&#34;>java.util.stream</a>&#10; "
  ]
  node [
    id 2699
    label " IntStream filter(IntPredicate predicate)"
    type "method"
    comment "&#10;     * Returns a stream consisting of the elements of this stream that match&#10;     * the given predicate.&#10;     *&#10;     * <p>This is an <a href=&#34;package-summary.html#StreamOps&#34;>intermediate&#10;     * operation</a>.&#10;     *&#10;     * @param predicate a <a href=&#34;package-summary.html#NonInterference&#34;>non-interfering</a>,&#10;     *                  <a href=&#34;package-summary.html#Statelessness&#34;>stateless</a>&#10;     *                  predicate to apply to each element to determine if it&#10;     *                  should be included&#10;     * @return the new stream&#10;     "
  ]
  node [
    id 2700
    label " IntStream map(IntUnaryOperator mapper)"
    type "method"
    comment "&#10;     * Returns a stream consisting of the results of applying the given&#10;     * function to the elements of this stream.&#10;     *&#10;     * <p>This is an <a href=&#34;package-summary.html#StreamOps&#34;>intermediate&#10;     * operation</a>.&#10;     *&#10;     * @param mapper a <a href=&#34;package-summary.html#NonInterference&#34;>non-interfering</a>,&#10;     *               <a href=&#34;package-summary.html#Statelessness&#34;>stateless</a>&#10;     *               function to apply to each element&#10;     * @return the new stream&#10;     "
  ]
  node [
    id 2701
    label " Stream<U> mapToObj(IntFunction<? extends U> mapper)"
    type "method"
    comment "&#10;     * Returns an object-valued {@code Stream} consisting of the results of&#10;     * applying the given function to the elements of this stream.&#10;     *&#10;     * <p>This is an <a href=&#34;package-summary.html#StreamOps&#34;>&#10;     *     intermediate operation</a>.&#10;     *&#10;     * @param <U> the element type of the new stream&#10;     * @param mapper a <a href=&#34;package-summary.html#NonInterference&#34;>non-interfering</a>,&#10;     *               <a href=&#34;package-summary.html#Statelessness&#34;>stateless</a>&#10;     *               function to apply to each element&#10;     * @return the new stream&#10;     "
  ]
  node [
    id 2702
    label " LongStream mapToLong(IntToLongFunction mapper)"
    type "method"
    comment "&#10;     * Returns a {@code LongStream} consisting of the results of applying the&#10;     * given function to the elements of this stream.&#10;     *&#10;     * <p>This is an <a href=&#34;package-summary.html#StreamOps&#34;>intermediate&#10;     * operation</a>.&#10;     *&#10;     * @param mapper a <a href=&#34;package-summary.html#NonInterference&#34;>non-interfering</a>,&#10;     *               <a href=&#34;package-summary.html#Statelessness&#34;>stateless</a>&#10;     *               function to apply to each element&#10;     * @return the new stream&#10;     "
  ]
  node [
    id 2703
    label " DoubleStream mapToDouble(IntToDoubleFunction mapper)"
    type "method"
    comment "&#10;     * Returns a {@code DoubleStream} consisting of the results of applying the&#10;     * given function to the elements of this stream.&#10;     *&#10;     * <p>This is an <a href=&#34;package-summary.html#StreamOps&#34;>intermediate&#10;     * operation</a>.&#10;     *&#10;     * @param mapper a <a href=&#34;package-summary.html#NonInterference&#34;>non-interfering</a>,&#10;     *               <a href=&#34;package-summary.html#Statelessness&#34;>stateless</a>&#10;     *               function to apply to each element&#10;     * @return the new stream&#10;     "
  ]
  node [
    id 2704
    label " IntStream flatMap(IntFunction<? extends IntStream> mapper)"
    type "method"
    comment "&#10;     * Returns a stream consisting of the results of replacing each element of&#10;     * this stream with the contents of a mapped stream produced by applying&#10;     * the provided mapping function to each element.  Each mapped stream is&#10;     * {@link java.util.stream.BaseStream#close() closed} after its contents&#10;     * have been placed into this stream.  (If a mapped stream is {@code null}&#10;     * an empty stream is used, instead.)&#10;     *&#10;     * <p>This is an <a href=&#34;package-summary.html#StreamOps&#34;>intermediate&#10;     * operation</a>.&#10;     *&#10;     * @param mapper a <a href=&#34;package-summary.html#NonInterference&#34;>non-interfering</a>,&#10;     *               <a href=&#34;package-summary.html#Statelessness&#34;>stateless</a>&#10;     *               function to apply to each element which produces an&#10;     *               {@code IntStream} of new values&#10;     * @return the new stream&#10;     * @see Stream#flatMap(Function)&#10;     "
  ]
  node [
    id 2705
    label " IntStream mapMulti(IntMapMultiConsumer mapper)"
    type "method"
    comment "&#10;     * Returns a stream consisting of the results of replacing each element of&#10;     * this stream with multiple elements, specifically zero or more elements.&#10;     * Replacement is performed by applying the provided mapping function to each&#10;     * element in conjunction with a {@linkplain IntConsumer consumer} argument&#10;     * that accepts replacement elements. The mapping function calls the consumer&#10;     * zero or more times to provide the replacement elements.&#10;     *&#10;     * <p>This is an <a href=&#34;package-summary.html#StreamOps&#34;>intermediate&#10;     * operation</a>.&#10;     *&#10;     * <p>If the {@linkplain IntConsumer consumer} argument is used outside the scope of&#10;     * its application to the mapping function, the results are undefined.&#10;     *&#10;     * @implSpec&#10;     * The default implementation invokes {@link #flatMap flatMap} on this stream,&#10;     * passing a function that behaves as follows. First, it calls the mapper function&#10;     * with an {@code IntConsumer} that accumulates replacement elements into a newly created&#10;     * internal buffer. When the mapper function returns, it creates an {@code IntStream} from the&#10;     * internal buffer. Finally, it returns this stream to {@code flatMap}.&#10;     *&#10;     * @param mapper a <a href=&#34;package-summary.html#NonInterference&#34;>non-interfering</a>,&#10;     *               <a href=&#34;package-summary.html#Statelessness&#34;>stateless</a>&#10;     *               function that generates replacement elements&#10;     * @return the new stream&#10;     * @see Stream#mapMulti Stream.mapMulti&#10;     * @since 16&#10;     "
  ]
  node [
    id 2706
    label " IntStream distinct()"
    type "method"
    comment "&#10;     * Returns a stream consisting of the distinct elements of this stream.&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>stateful&#10;     * intermediate operation</a>.&#10;     *&#10;     * @return the new stream&#10;     "
  ]
  node [
    id 2707
    label " IntStream sorted()"
    type "method"
    comment "&#10;     * Returns a stream consisting of the elements of this stream in sorted&#10;     * order.&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>stateful&#10;     * intermediate operation</a>.&#10;     *&#10;     * @return the new stream&#10;     "
  ]
  node [
    id 2708
    label " IntStream peek(IntConsumer action)"
    type "method"
    comment "&#10;     * Returns a stream consisting of the elements of this stream, additionally&#10;     * performing the provided action on each element as elements are consumed&#10;     * from the resulting stream.&#10;     *&#10;     * <p>This is an <a href=&#34;package-summary.html#StreamOps&#34;>intermediate&#10;     * operation</a>.&#10;     *&#10;     * <p>For parallel stream pipelines, the action may be called at&#10;     * whatever time and in whatever thread the element is made available by the&#10;     * upstream operation.  If the action modifies shared state,&#10;     * it is responsible for providing the required synchronization.&#10;     *&#10;     * @apiNote This method exists mainly to support debugging, where you want&#10;     * to see the elements as they flow past a certain point in a pipeline:&#10;     * <pre>{@code&#10;     *     IntStream.of(1, 2, 3, 4)&#10;     *         .filter(e -> e > 2)&#10;     *         .peek(e -> System.out.println(&#34;Filtered value: &#34; + e))&#10;     *         .map(e -> e * e)&#10;     *         .peek(e -> System.out.println(&#34;Mapped value: &#34; + e))&#10;     *         .sum();&#10;     * }</pre>&#10;     *&#10;     * <p>In cases where the stream implementation is able to optimize away the&#10;     * production of some or all the elements (such as with short-circuiting&#10;     * operations like {@code findFirst}, or in the example described in&#10;     * {@link #count}), the action will not be invoked for those elements.&#10;     *&#10;     * @param action a <a href=&#34;package-summary.html#NonInterference&#34;>&#10;     *               non-interfering</a> action to perform on the elements as&#10;     *               they are consumed from the stream&#10;     * @return the new stream&#10;     "
  ]
  node [
    id 2709
    label " IntStream limit(long maxSize)"
    type "method"
    comment "&#10;     * Returns a stream consisting of the elements of this stream, truncated&#10;     * to be no longer than {@code maxSize} in length.&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>short-circuiting&#10;     * stateful intermediate operation</a>.&#10;     *&#10;     * @apiNote&#10;     * While {@code limit()} is generally a cheap operation on sequential&#10;     * stream pipelines, it can be quite expensive on ordered parallel pipelines,&#10;     * especially for large values of {@code maxSize}, since {@code limit(n)}&#10;     * is constrained to return not just any <em>n</em> elements, but the&#10;     * <em>first n</em> elements in the encounter order.  Using an unordered&#10;     * stream source (such as {@link #generate(IntSupplier)}) or removing the&#10;     * ordering constraint with {@link #unordered()} may result in significant&#10;     * speedups of {@code limit()} in parallel pipelines, if the semantics of&#10;     * your situation permit.  If consistency with encounter order is required,&#10;     * and you are experiencing poor performance or memory utilization with&#10;     * {@code limit()} in parallel pipelines, switching to sequential execution&#10;     * with {@link #sequential()} may improve performance.&#10;     *&#10;     * @param maxSize the number of elements the stream should be limited to&#10;     * @return the new stream&#10;     * @throws IllegalArgumentException if {@code maxSize} is negative&#10;     "
  ]
  node [
    id 2710
    label "generate(IntSupplier)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2711
    label " IntStream skip(long n)"
    type "method"
    comment "&#10;     * Returns a stream consisting of the remaining elements of this stream&#10;     * after discarding the first {@code n} elements of the stream.&#10;     * If this stream contains fewer than {@code n} elements then an&#10;     * empty stream will be returned.&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>stateful&#10;     * intermediate operation</a>.&#10;     *&#10;     * @apiNote&#10;     * While {@code skip()} is generally a cheap operation on sequential&#10;     * stream pipelines, it can be quite expensive on ordered parallel pipelines,&#10;     * especially for large values of {@code n}, since {@code skip(n)}&#10;     * is constrained to skip not just any <em>n</em> elements, but the&#10;     * <em>first n</em> elements in the encounter order.  Using an unordered&#10;     * stream source (such as {@link #generate(IntSupplier)}) or removing the&#10;     * ordering constraint with {@link #unordered()} may result in significant&#10;     * speedups of {@code skip()} in parallel pipelines, if the semantics of&#10;     * your situation permit.  If consistency with encounter order is required,&#10;     * and you are experiencing poor performance or memory utilization with&#10;     * {@code skip()} in parallel pipelines, switching to sequential execution&#10;     * with {@link #sequential()} may improve performance.&#10;     *&#10;     * @param n the number of leading elements to skip&#10;     * @return the new stream&#10;     * @throws IllegalArgumentException if {@code n} is negative&#10;     "
  ]
  node [
    id 2712
    label " IntStream takeWhile(IntPredicate predicate)"
    type "method"
    comment "&#10;     * Returns, if this stream is ordered, a stream consisting of the longest&#10;     * prefix of elements taken from this stream that match the given predicate.&#10;     * Otherwise returns, if this stream is unordered, a stream consisting of a&#10;     * subset of elements taken from this stream that match the given predicate.&#10;     *&#10;     * <p>If this stream is ordered then the longest prefix is a contiguous&#10;     * sequence of elements of this stream that match the given predicate.  The&#10;     * first element of the sequence is the first element of this stream, and&#10;     * the element immediately following the last element of the sequence does&#10;     * not match the given predicate.&#10;     *&#10;     * <p>If this stream is unordered, and some (but not all) elements of this&#10;     * stream match the given predicate, then the behavior of this operation is&#10;     * nondeterministic; it is free to take any subset of matching elements&#10;     * (which includes the empty set).&#10;     *&#10;     * <p>Independent of whether this stream is ordered or unordered if all&#10;     * elements of this stream match the given predicate then this operation&#10;     * takes all elements (the result is the same as the input), or if no&#10;     * elements of the stream match the given predicate then no elements are&#10;     * taken (the result is an empty stream).&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>short-circuiting&#10;     * stateful intermediate operation</a>.&#10;     *&#10;     * @implSpec&#10;     * The default implementation obtains the {@link #spliterator() spliterator}&#10;     * of this stream, wraps that spliterator so as to support the semantics&#10;     * of this operation on traversal, and returns a new stream associated with&#10;     * the wrapped spliterator.  The returned stream preserves the execution&#10;     * characteristics of this stream (namely parallel or sequential execution&#10;     * as per {@link #isParallel()}) but the wrapped spliterator may choose to&#10;     * not support splitting.  When the returned stream is closed, the close&#10;     * handlers for both the returned and this stream are invoked.&#10;     *&#10;     * @apiNote&#10;     * While {@code takeWhile()} is generally a cheap operation on sequential&#10;     * stream pipelines, it can be quite expensive on ordered parallel&#10;     * pipelines, since the operation is constrained to return not just any&#10;     * valid prefix, but the longest prefix of elements in the encounter order.&#10;     * Using an unordered stream source (such as {@link #generate(IntSupplier)})&#10;     * or removing the ordering constraint with {@link #unordered()} may result&#10;     * in significant speedups of {@code takeWhile()} in parallel pipelines, if&#10;     * the semantics of your situation permit.  If consistency with encounter&#10;     * order is required, and you are experiencing poor performance or memory&#10;     * utilization with {@code takeWhile()} in parallel pipelines, switching to&#10;     * sequential execution with {@link #sequential()} may improve performance.&#10;     *&#10;     * @param predicate a <a href=&#34;package-summary.html#NonInterference&#34;>non-interfering</a>,&#10;     *                  <a href=&#34;package-summary.html#Statelessness&#34;>stateless</a>&#10;     *                  predicate to apply to elements to determine the longest&#10;     *                  prefix of elements.&#10;     * @return the new stream&#10;     * @since 9&#10;     "
  ]
  node [
    id 2713
    label " IntStream dropWhile(IntPredicate predicate)"
    type "method"
    comment "&#10;     * Returns, if this stream is ordered, a stream consisting of the remaining&#10;     * elements of this stream after dropping the longest prefix of elements&#10;     * that match the given predicate.  Otherwise returns, if this stream is&#10;     * unordered, a stream consisting of the remaining elements of this stream&#10;     * after dropping a subset of elements that match the given predicate.&#10;     *&#10;     * <p>If this stream is ordered then the longest prefix is a contiguous&#10;     * sequence of elements of this stream that match the given predicate.  The&#10;     * first element of the sequence is the first element of this stream, and&#10;     * the element immediately following the last element of the sequence does&#10;     * not match the given predicate.&#10;     *&#10;     * <p>If this stream is unordered, and some (but not all) elements of this&#10;     * stream match the given predicate, then the behavior of this operation is&#10;     * nondeterministic; it is free to drop any subset of matching elements&#10;     * (which includes the empty set).&#10;     *&#10;     * <p>Independent of whether this stream is ordered or unordered if all&#10;     * elements of this stream match the given predicate then this operation&#10;     * drops all elements (the result is an empty stream), or if no elements of&#10;     * the stream match the given predicate then no elements are dropped (the&#10;     * result is the same as the input).&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>stateful&#10;     * intermediate operation</a>.&#10;     *&#10;     * @implSpec&#10;     * The default implementation obtains the {@link #spliterator() spliterator}&#10;     * of this stream, wraps that spliterator so as to support the semantics&#10;     * of this operation on traversal, and returns a new stream associated with&#10;     * the wrapped spliterator.  The returned stream preserves the execution&#10;     * characteristics of this stream (namely parallel or sequential execution&#10;     * as per {@link #isParallel()}) but the wrapped spliterator may choose to&#10;     * not support splitting.  When the returned stream is closed, the close&#10;     * handlers for both the returned and this stream are invoked.&#10;     *&#10;     * @apiNote&#10;     * While {@code dropWhile()} is generally a cheap operation on sequential&#10;     * stream pipelines, it can be quite expensive on ordered parallel&#10;     * pipelines, since the operation is constrained to return not just any&#10;     * valid prefix, but the longest prefix of elements in the encounter order.&#10;     * Using an unordered stream source (such as {@link #generate(IntSupplier)})&#10;     * or removing the ordering constraint with {@link #unordered()} may result&#10;     * in significant speedups of {@code dropWhile()} in parallel pipelines, if&#10;     * the semantics of your situation permit.  If consistency with encounter&#10;     * order is required, and you are experiencing poor performance or memory&#10;     * utilization with {@code dropWhile()} in parallel pipelines, switching to&#10;     * sequential execution with {@link #sequential()} may improve performance.&#10;     *&#10;     * @param predicate a <a href=&#34;package-summary.html#NonInterference&#34;>non-interfering</a>,&#10;     *                  <a href=&#34;package-summary.html#Statelessness&#34;>stateless</a>&#10;     *                  predicate to apply to elements to determine the longest&#10;     *                  prefix of elements.&#10;     * @return the new stream&#10;     * @since 9&#10;     "
  ]
  node [
    id 2714
    label " void forEach(IntConsumer action)"
    type "method"
    comment "&#10;     * Performs an action for each element of this stream.&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>terminal&#10;     * operation</a>.&#10;     *&#10;     * <p>For parallel stream pipelines, this operation does <em>not</em>&#10;     * guarantee to respect the encounter order of the stream, as doing so&#10;     * would sacrifice the benefit of parallelism.  For any given element, the&#10;     * action may be performed at whatever time and in whatever thread the&#10;     * library chooses.  If the action accesses shared state, it is&#10;     * responsible for providing the required synchronization.&#10;     *&#10;     * @param action a <a href=&#34;package-summary.html#NonInterference&#34;>&#10;     *               non-interfering</a> action to perform on the elements&#10;     "
  ]
  node [
    id 2715
    label " void forEachOrdered(IntConsumer action)"
    type "method"
    comment "&#10;     * Performs an action for each element of this stream, guaranteeing that&#10;     * each element is processed in encounter order for streams that have a&#10;     * defined encounter order.&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>terminal&#10;     * operation</a>.&#10;     *&#10;     * @param action a <a href=&#34;package-summary.html#NonInterference&#34;>&#10;     *               non-interfering</a> action to perform on the elements&#10;     * @see #forEach(IntConsumer)&#10;     "
  ]
  node [
    id 2716
    label " int[] toArray()"
    type "method"
    comment "&#10;     * Returns an array containing the elements of this stream.&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>terminal&#10;     * operation</a>.&#10;     *&#10;     * @return an array containing the elements of this stream&#10;     "
  ]
  node [
    id 2717
    label " int reduce(int identity, IntBinaryOperator op)"
    type "method"
    comment "&#10;     * Performs a <a href=&#34;package-summary.html#Reduction&#34;>reduction</a> on the&#10;     * elements of this stream, using the provided identity value and an&#10;     * <a href=&#34;package-summary.html#Associativity&#34;>associative</a>&#10;     * accumulation function, and returns the reduced value.  This is equivalent&#10;     * to:&#10;     * <pre>{@code&#10;     *     int result = identity;&#10;     *     for (int element : this stream)&#10;     *         result = accumulator.applyAsInt(result, element)&#10;     *     return result;&#10;     * }</pre>&#10;     *&#10;     * but is not constrained to execute sequentially.&#10;     *&#10;     * <p>The {@code identity} value must be an identity for the accumulator&#10;     * function. This means that for all {@code x},&#10;     * {@code accumulator.apply(identity, x)} is equal to {@code x}.&#10;     * The {@code accumulator} function must be an&#10;     * <a href=&#34;package-summary.html#Associativity&#34;>associative</a> function.&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>terminal&#10;     * operation</a>.&#10;     *&#10;     * @apiNote Sum, min and max are all special cases of reduction that can be&#10;     * expressed using this method.&#10;     * For example, summing a stream can be expressed as:&#10;     *&#10;     * <pre>{@code&#10;     *     int sum = integers.reduce(0, (a, b) -> a+b);&#10;     * }</pre>&#10;     *&#10;     * or more compactly:&#10;     *&#10;     * <pre>{@code&#10;     *     int sum = integers.reduce(0, Integer::sum);&#10;     * }</pre>&#10;     *&#10;     * <p>While this may seem a more roundabout way to perform an aggregation&#10;     * compared to simply mutating a running total in a loop, reduction&#10;     * operations parallelize more gracefully, without needing additional&#10;     * synchronization and with greatly reduced risk of data races.&#10;     *&#10;     * @param identity the identity value for the accumulating function&#10;     * @param op an <a href=&#34;package-summary.html#Associativity&#34;>associative</a>,&#10;     *           <a href=&#34;package-summary.html#NonInterference&#34;>non-interfering</a>,&#10;     *           <a href=&#34;package-summary.html#Statelessness&#34;>stateless</a>&#10;     *           function for combining two values&#10;     * @return the result of the reduction&#10;     * @see #sum()&#10;     * @see #min()&#10;     * @see #max()&#10;     * @see #average()&#10;     "
  ]
  node [
    id 2718
    label " OptionalInt reduce(IntBinaryOperator op)"
    type "method"
    comment "&#10;     * Performs a <a href=&#34;package-summary.html#Reduction&#34;>reduction</a> on the&#10;     * elements of this stream, using an&#10;     * <a href=&#34;package-summary.html#Associativity&#34;>associative</a> accumulation&#10;     * function, and returns an {@code OptionalInt} describing the reduced value,&#10;     * if any. This is equivalent to:&#10;     * <pre>{@code&#10;     *     boolean foundAny = false;&#10;     *     int result = null;&#10;     *     for (int element : this stream) {&#10;     *         if (!foundAny) {&#10;     *             foundAny = true;&#10;     *             result = element;&#10;     *         }&#10;     *         else&#10;     *             result = accumulator.applyAsInt(result, element);&#10;     *     }&#10;     *     return foundAny ? OptionalInt.of(result) : OptionalInt.empty();&#10;     * }</pre>&#10;     *&#10;     * but is not constrained to execute sequentially.&#10;     *&#10;     * <p>The {@code accumulator} function must be an&#10;     * <a href=&#34;package-summary.html#Associativity&#34;>associative</a> function.&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>terminal&#10;     * operation</a>.&#10;     *&#10;     * @param op an <a href=&#34;package-summary.html#Associativity&#34;>associative</a>,&#10;     *           <a href=&#34;package-summary.html#NonInterference&#34;>non-interfering</a>,&#10;     *           <a href=&#34;package-summary.html#Statelessness&#34;>stateless</a>&#10;     *           function for combining two values&#10;     * @return the result of the reduction&#10;     * @see #reduce(int, IntBinaryOperator)&#10;     "
  ]
  node [
    id 2719
    label " R collect(Supplier<R> supplier, ObjIntConsumer<R> accumulator, BiConsumer<R, R> combiner)"
    type "method"
    comment "&#10;     * Performs a <a href=&#34;package-summary.html#MutableReduction&#34;>mutable&#10;     * reduction</a> operation on the elements of this stream.  A mutable&#10;     * reduction is one in which the reduced value is a mutable result container,&#10;     * such as an {@code ArrayList}, and elements are incorporated by updating&#10;     * the state of the result rather than by replacing the result.  This&#10;     * produces a result equivalent to:&#10;     * <pre>{@code&#10;     *     R result = supplier.get();&#10;     *     for (int element : this stream)&#10;     *         accumulator.accept(result, element);&#10;     *     return result;&#10;     * }</pre>&#10;     *&#10;     * <p>Like {@link #reduce(int, IntBinaryOperator)}, {@code collect} operations&#10;     * can be parallelized without requiring additional synchronization.&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>terminal&#10;     * operation</a>.&#10;     *&#10;     * @param <R> the type of the mutable result container&#10;     * @param supplier a function that creates a new mutable result container.&#10;     *                 For a parallel execution, this function may be called&#10;     *                 multiple times and must return a fresh value each time.&#10;     * @param accumulator an <a href=&#34;package-summary.html#Associativity&#34;>associative</a>,&#10;     *                    <a href=&#34;package-summary.html#NonInterference&#34;>non-interfering</a>,&#10;     *                    <a href=&#34;package-summary.html#Statelessness&#34;>stateless</a>&#10;     *                    function that must fold an element into a result&#10;     *                    container.&#10;     * @param combiner an <a href=&#34;package-summary.html#Associativity&#34;>associative</a>,&#10;     *                    <a href=&#34;package-summary.html#NonInterference&#34;>non-interfering</a>,&#10;     *                    <a href=&#34;package-summary.html#Statelessness&#34;>stateless</a>&#10;     *                    function that accepts two partial result containers&#10;     *                    and merges them, which must be compatible with the&#10;     *                    accumulator function.  The combiner function must fold&#10;     *                    the elements from the second result container into the&#10;     *                    first result container.&#10;     * @return the result of the reduction&#10;     * @see Stream#collect(Supplier, BiConsumer, BiConsumer)&#10;     "
  ]
  node [
    id 2720
    label "reduce(int"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2721
    label " int sum()"
    type "method"
    comment "&#10;     * Returns the sum of elements in this stream.  This is a special case&#10;     * of a <a href=&#34;package-summary.html#Reduction&#34;>reduction</a>&#10;     * and is equivalent to:&#10;     * <pre>{@code&#10;     *     return reduce(0, Integer::sum);&#10;     * }</pre>&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>terminal&#10;     * operation</a>.&#10;     *&#10;     * @return the sum of elements in this stream&#10;     "
  ]
  node [
    id 2722
    label " OptionalInt min()"
    type "method"
    comment "&#10;     * Returns an {@code OptionalInt} describing the minimum element of this&#10;     * stream, or an empty optional if this stream is empty.  This is a special&#10;     * case of a <a href=&#34;package-summary.html#Reduction&#34;>reduction</a>&#10;     * and is equivalent to:&#10;     * <pre>{@code&#10;     *     return reduce(Integer::min);&#10;     * }</pre>&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>terminal operation</a>.&#10;     *&#10;     * @return an {@code OptionalInt} containing the minimum element of this&#10;     * stream, or an empty {@code OptionalInt} if the stream is empty&#10;     "
  ]
  node [
    id 2723
    label " OptionalInt max()"
    type "method"
    comment "&#10;     * Returns an {@code OptionalInt} describing the maximum element of this&#10;     * stream, or an empty optional if this stream is empty.  This is a special&#10;     * case of a <a href=&#34;package-summary.html#Reduction&#34;>reduction</a>&#10;     * and is equivalent to:&#10;     * <pre>{@code&#10;     *     return reduce(Integer::max);&#10;     * }</pre>&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>terminal&#10;     * operation</a>.&#10;     *&#10;     * @return an {@code OptionalInt} containing the maximum element of this&#10;     * stream, or an empty {@code OptionalInt} if the stream is empty&#10;     "
  ]
  node [
    id 2724
    label " IntSummaryStatistics summaryStatistics()"
    type "method"
    comment "&#10;     * Returns an {@code IntSummaryStatistics} describing various&#10;     * summary data about the elements of this stream.  This is a special&#10;     * case of a <a href=&#34;package-summary.html#Reduction&#34;>reduction</a>.&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>terminal&#10;     * operation</a>.&#10;     *&#10;     * @return an {@code IntSummaryStatistics} describing various summary data&#10;     * about the elements of this stream&#10;     "
  ]
  node [
    id 2725
    label " boolean anyMatch(IntPredicate predicate)"
    type "method"
    comment "&#10;     * Returns whether any elements of this stream match the provided&#10;     * predicate.  May not evaluate the predicate on all elements if not&#10;     * necessary for determining the result.  If the stream is empty then&#10;     * {@code false} is returned and the predicate is not evaluated.&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>short-circuiting&#10;     * terminal operation</a>.&#10;     *&#10;     * @apiNote&#10;     * This method evaluates the <em>existential quantification</em> of the&#10;     * predicate over the elements of the stream (for some x P(x)).&#10;     *&#10;     * @param predicate a <a href=&#34;package-summary.html#NonInterference&#34;>non-interfering</a>,&#10;     *                  <a href=&#34;package-summary.html#Statelessness&#34;>stateless</a>&#10;     *                  predicate to apply to elements of this stream&#10;     * @return {@code true} if any elements of the stream match the provided&#10;     * predicate, otherwise {@code false}&#10;     "
  ]
  node [
    id 2726
    label " boolean allMatch(IntPredicate predicate)"
    type "method"
    comment "&#10;     * Returns whether all elements of this stream match the provided predicate.&#10;     * May not evaluate the predicate on all elements if not necessary for&#10;     * determining the result.  If the stream is empty then {@code true} is&#10;     * returned and the predicate is not evaluated.&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>short-circuiting&#10;     * terminal operation</a>.&#10;     *&#10;     * @apiNote&#10;     * This method evaluates the <em>universal quantification</em> of the&#10;     * predicate over the elements of the stream (for all x P(x)).  If the&#10;     * stream is empty, the quantification is said to be <em>vacuously&#10;     * satisfied</em> and is always {@code true} (regardless of P(x)).&#10;     *&#10;     * @param predicate a <a href=&#34;package-summary.html#NonInterference&#34;>non-interfering</a>,&#10;     *                  <a href=&#34;package-summary.html#Statelessness&#34;>stateless</a>&#10;     *                  predicate to apply to elements of this stream&#10;     * @return {@code true} if either all elements of the stream match the&#10;     * provided predicate or the stream is empty, otherwise {@code false}&#10;     "
  ]
  node [
    id 2727
    label " boolean noneMatch(IntPredicate predicate)"
    type "method"
    comment "&#10;     * Returns whether no elements of this stream match the provided predicate.&#10;     * May not evaluate the predicate on all elements if not necessary for&#10;     * determining the result.  If the stream is empty then {@code true} is&#10;     * returned and the predicate is not evaluated.&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>short-circuiting&#10;     * terminal operation</a>.&#10;     *&#10;     * @apiNote&#10;     * This method evaluates the <em>universal quantification</em> of the&#10;     * negated predicate over the elements of the stream (for all x ~P(x)).  If&#10;     * the stream is empty, the quantification is said to be vacuously satisfied&#10;     * and is always {@code true}, regardless of P(x).&#10;     *&#10;     * @param predicate a <a href=&#34;package-summary.html#NonInterference&#34;>non-interfering</a>,&#10;     *                  <a href=&#34;package-summary.html#Statelessness&#34;>stateless</a>&#10;     *                  predicate to apply to elements of this stream&#10;     * @return {@code true} if either no elements of the stream match the&#10;     * provided predicate or the stream is empty, otherwise {@code false}&#10;     "
  ]
  node [
    id 2728
    label " OptionalInt findFirst()"
    type "method"
    comment "&#10;     * Returns an {@link OptionalInt} describing the first element of this&#10;     * stream, or an empty {@code OptionalInt} if the stream is empty.  If the&#10;     * stream has no encounter order, then any element may be returned.&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>short-circuiting&#10;     * terminal operation</a>.&#10;     *&#10;     * @return an {@code OptionalInt} describing the first element of this stream,&#10;     * or an empty {@code OptionalInt} if the stream is empty&#10;     "
  ]
  node [
    id 2729
    label "java.util.OptionalInt"
  ]
  node [
    id 2730
    label " OptionalInt findAny()"
    type "method"
    comment "&#10;     * Returns an {@link OptionalInt} describing some element of the stream, or&#10;     * an empty {@code OptionalInt} if the stream is empty.&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>short-circuiting&#10;     * terminal operation</a>.&#10;     *&#10;     * <p>The behavior of this operation is explicitly nondeterministic; it is&#10;     * free to select any element in the stream.  This is to allow for maximal&#10;     * performance in parallel operations; the cost is that multiple invocations&#10;     * on the same source may not return the same result.  (If a stable result&#10;     * is desired, use {@link #findFirst()} instead.)&#10;     *&#10;     * @return an {@code OptionalInt} describing some element of this stream, or&#10;     * an empty {@code OptionalInt} if the stream is empty&#10;     * @see #findFirst()&#10;     "
  ]
  node [
    id 2731
    label " LongStream asLongStream()"
    type "method"
    comment "&#10;     * Returns a {@code LongStream} consisting of the elements of this stream,&#10;     * converted to {@code long}.&#10;     *&#10;     * <p>This is an <a href=&#34;package-summary.html#StreamOps&#34;>intermediate&#10;     * operation</a>.&#10;     *&#10;     * @return a {@code LongStream} consisting of the elements of this stream,&#10;     * converted to {@code long}&#10;     "
  ]
  node [
    id 2732
    label " DoubleStream asDoubleStream()"
    type "method"
    comment "&#10;     * Returns a {@code DoubleStream} consisting of the elements of this stream,&#10;     * converted to {@code double}.&#10;     *&#10;     * <p>This is an <a href=&#34;package-summary.html#StreamOps&#34;>intermediate&#10;     * operation</a>.&#10;     *&#10;     * @return a {@code DoubleStream} consisting of the elements of this stream,&#10;     * converted to {@code double}&#10;     "
  ]
  node [
    id 2733
    label " Stream<Integer> boxed()"
    type "method"
    comment "&#10;     * Returns a {@code Stream} consisting of the elements of this stream,&#10;     * each boxed to an {@code Integer}.&#10;     *&#10;     * <p>This is an <a href=&#34;package-summary.html#StreamOps&#34;>intermediate&#10;     * operation</a>.&#10;     *&#10;     * @return a {@code Stream} consistent of the elements of this stream,&#10;     * each boxed to an {@code Integer}&#10;     "
  ]
  node [
    id 2734
    label "public static IntStream empty()"
    type "method"
    comment "&#10;     * Returns an empty sequential {@code IntStream}.&#10;     *&#10;     * @return an empty sequential stream&#10;     "
  ]
  node [
    id 2735
    label "public static IntStream of(int t)"
    type "method"
    comment "&#10;     * Returns a sequential {@code IntStream} containing a single element.&#10;     *&#10;     * @param t the single element&#10;     * @return a singleton sequential stream&#10;     "
  ]
  node [
    id 2736
    label "public static IntStream of(int... values)"
    type "method"
    comment "&#10;     * Returns a sequential ordered stream whose elements are the specified values.&#10;     *&#10;     * @param values the elements of the new stream&#10;     * @return the new stream&#10;     "
  ]
  node [
    id 2737
    label "public static IntStream iterate(final int seed, final IntUnaryOperator f)"
    type "method"
    comment "&#10;     * Returns an infinite sequential ordered {@code IntStream} produced by iterative&#10;     * application of a function {@code f} to an initial element {@code seed},&#10;     * producing a {@code Stream} consisting of {@code seed}, {@code f(seed)},&#10;     * {@code f(f(seed))}, etc.&#10;     *&#10;     * <p>The first element (position {@code 0}) in the {@code IntStream} will be&#10;     * the provided {@code seed}.  For {@code n > 0}, the element at position&#10;     * {@code n}, will be the result of applying the function {@code f} to the&#10;     * element at position {@code n - 1}.&#10;     *&#10;     * <p>The action of applying {@code f} for one element&#10;     * <a href=&#34;../concurrent/package-summary.html#MemoryVisibility&#34;><i>happens-before</i></a>&#10;     * the action of applying {@code f} for subsequent elements.  For any given&#10;     * element the action may be performed in whatever thread the library&#10;     * chooses.&#10;     *&#10;     * @param seed the initial element&#10;     * @param f a function to be applied to the previous element to produce&#10;     *          a new element&#10;     * @return a new sequential {@code IntStream}&#10;     "
  ]
  node [
    id 2738
    label "public static IntStream iterate(int seed, IntPredicate hasNext, IntUnaryOperator next)"
    type "method"
    comment "&#10;     * Returns a sequential ordered {@code IntStream} produced by iterative&#10;     * application of the given {@code next} function to an initial element,&#10;     * conditioned on satisfying the given {@code hasNext} predicate.  The&#10;     * stream terminates as soon as the {@code hasNext} predicate returns false.&#10;     *&#10;     * <p>{@code IntStream.iterate} should produce the same sequence of elements as&#10;     * produced by the corresponding for-loop:&#10;     * <pre>{@code&#10;     *     for (int index=seed; hasNext.test(index); index = next.applyAsInt(index)) {&#10;     *         ...&#10;     *     }&#10;     * }</pre>&#10;     *&#10;     * <p>The resulting sequence may be empty if the {@code hasNext} predicate&#10;     * does not hold on the seed value.  Otherwise the first element will be the&#10;     * supplied {@code seed} value, the next element (if present) will be the&#10;     * result of applying the {@code next} function to the {@code seed} value,&#10;     * and so on iteratively until the {@code hasNext} predicate indicates that&#10;     * the stream should terminate.&#10;     *&#10;     * <p>The action of applying the {@code hasNext} predicate to an element&#10;     * <a href=&#34;../concurrent/package-summary.html#MemoryVisibility&#34;><i>happens-before</i></a>&#10;     * the action of applying the {@code next} function to that element.  The&#10;     * action of applying the {@code next} function for one element&#10;     * <i>happens-before</i> the action of applying the {@code hasNext}&#10;     * predicate for subsequent elements.  For any given element an action may&#10;     * be performed in whatever thread the library chooses.&#10;     *&#10;     * @param seed the initial element&#10;     * @param hasNext a predicate to apply to elements to determine when the&#10;     *                stream must terminate.&#10;     * @param next a function to be applied to the previous element to produce&#10;     *             a new element&#10;     * @return a new sequential {@code IntStream}&#10;     * @since 9&#10;     "
  ]
  node [
    id 2739
    label "public static IntStream generate(IntSupplier s)"
    type "method"
    comment "&#10;     * Returns an infinite sequential unordered stream where each element is&#10;     * generated by the provided {@code IntSupplier}.  This is suitable for&#10;     * generating constant streams, streams of random elements, etc.&#10;     *&#10;     * @param s the {@code IntSupplier} for generated elements&#10;     * @return a new infinite sequential unordered {@code IntStream}&#10;     "
  ]
  node [
    id 2740
    label "public static IntStream range(int startInclusive, int endExclusive)"
    type "method"
    comment "&#10;     * Returns a sequential ordered {@code IntStream} from {@code startInclusive}&#10;     * (inclusive) to {@code endExclusive} (exclusive) by an incremental step of&#10;     * {@code 1}.&#10;     *&#10;     * @apiNote&#10;     * <p>An equivalent sequence of increasing values can be produced&#10;     * sequentially using a {@code for} loop as follows:&#10;     * <pre>{@code&#10;     *     for (int i = startInclusive; i < endExclusive ; i++) { ... }&#10;     * }</pre>&#10;     *&#10;     * @param startInclusive the (inclusive) initial value&#10;     * @param endExclusive the exclusive upper bound&#10;     * @return a sequential {@code IntStream} for the range of {@code int}&#10;     *         elements&#10;     "
  ]
  node [
    id 2741
    label "public static IntStream rangeClosed(int startInclusive, int endInclusive)"
    type "method"
    comment "&#10;     * Returns a sequential ordered {@code IntStream} from {@code startInclusive}&#10;     * (inclusive) to {@code endInclusive} (inclusive) by an incremental step of&#10;     * {@code 1}.&#10;     *&#10;     * @apiNote&#10;     * <p>An equivalent sequence of increasing values can be produced&#10;     * sequentially using a {@code for} loop as follows:&#10;     * <pre>{@code&#10;     *     for (int i = startInclusive; i <= endInclusive ; i++) { ... }&#10;     * }</pre>&#10;     *&#10;     * @param startInclusive the (inclusive) initial value&#10;     * @param endInclusive the inclusive upper bound&#10;     * @return a sequential {@code IntStream} for the range of {@code int}&#10;     *         elements&#10;     "
  ]
  node [
    id 2742
    label "public static IntStream concat(IntStream a, IntStream b)"
    type "method"
    comment "&#10;     * Creates a lazily concatenated stream whose elements are all the&#10;     * elements of the first stream followed by all the elements of the&#10;     * second stream.  The resulting stream is ordered if both&#10;     * of the input streams are ordered, and parallel if either of the input&#10;     * streams is parallel.  When the resulting stream is closed, the close&#10;     * handlers for both input streams are invoked.&#10;     *&#10;     * <p>This method operates on the two input streams and binds each stream&#10;     * to its source.  As a result subsequent modifications to an input stream&#10;     * source may not be reflected in the concatenated stream result.&#10;     *&#10;     * @implNote&#10;     * Use caution when constructing streams from repeated concatenation.&#10;     * Accessing an element of a deeply concatenated stream can result in deep&#10;     * call chains, or even {@code StackOverflowError}.&#10;     *&#10;     * @apiNote&#10;     * To preserve optimization opportunities this method binds each stream to&#10;     * its source and accepts only two streams as parameters.  For example, the&#10;     * exact size of the concatenated stream source can be computed if the exact&#10;     * size of each input stream source is known.&#10;     * To concatenate more streams without binding, or without nested calls to&#10;     * this method, try creating a stream of streams and flat-mapping with the&#10;     * identity function, for example:&#10;     * <pre>{@code&#10;     *     IntStream concat = Stream.of(s1, s2, s3, s4).flatMapToInt(s -> s);&#10;     * }</pre>&#10;     *&#10;     * @param a the first stream&#10;     * @param b the second stream&#10;     * @return the concatenation of the two input streams&#10;     "
  ]
  node [
    id 2743
    label "public static IntStream stream(int[] array, int startInclusive, int endExclusive)"
    type "method"
    comment "&#10;     * Returns a sequential {@link IntStream} with the specified range of the&#10;     * specified array as its source.&#10;     *&#10;     * @param array the array, assumed to be unmodified during use&#10;     * @param startInclusive the first index to cover, inclusive&#10;     * @param endExclusive index immediately past the last index to cover&#10;     * @return an {@code IntStream} for the array range&#10;     * @throws ArrayIndexOutOfBoundsException if {@code startInclusive} is&#10;     *         negative, {@code endExclusive} is less than&#10;     *         {@code startInclusive}, or {@code endExclusive} is greater than&#10;     *         the array size&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 2744
    label "public static LongStream stream(long[] array)"
    type "method"
    comment "&#10;     * Returns a sequential {@link LongStream} with the specified array as its&#10;     * source.&#10;     *&#10;     * @param array the array, assumed to be unmodified during use&#10;     * @return a {@code LongStream} for the array&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 2745
    label "java.util.stream.LongStream"
    type "class"
    comment "&#10; * A sequence of primitive long-valued elements supporting sequential and parallel&#10; * aggregate operations.  This is the {@code long} primitive specialization of&#10; * {@link Stream}.&#10; *&#10; * <p>The following example illustrates an aggregate operation using&#10; * {@link Stream} and {@link LongStream}, computing the sum of the weights of the&#10; * red widgets:&#10; *&#10; * <pre>{@code&#10; *     long sum = widgets.stream()&#10; *                       .filter(w -> w.getColor() == RED)&#10; *                       .mapToLong(w -> w.getWeight())&#10; *                       .sum();&#10; * }</pre>&#10; *&#10; * See the class documentation for {@link Stream} and the package documentation&#10; * for <a href=&#34;package-summary.html&#34;>java.util.stream</a> for additional&#10; * specification of streams, stream operations, stream pipelines, and&#10; * parallelism.&#10; *&#10; * @since 1.8&#10; * @see Stream&#10; * @see <a href=&#34;package-summary.html&#34;>java.util.stream</a>&#10; "
  ]
  node [
    id 2746
    label " LongStream filter(LongPredicate predicate)"
    type "method"
    comment "&#10;     * Returns a stream consisting of the elements of this stream that match&#10;     * the given predicate.&#10;     *&#10;     * <p>This is an <a href=&#34;package-summary.html#StreamOps&#34;>intermediate&#10;     * operation</a>.&#10;     *&#10;     * @param predicate a <a href=&#34;package-summary.html#NonInterference&#34;>non-interfering</a>,&#10;     *                  <a href=&#34;package-summary.html#Statelessness&#34;>stateless</a>&#10;     *                  predicate to apply to each element to determine if it&#10;     *                  should be included&#10;     * @return the new stream&#10;     "
  ]
  node [
    id 2747
    label " LongStream map(LongUnaryOperator mapper)"
    type "method"
    comment "&#10;     * Returns a stream consisting of the results of applying the given&#10;     * function to the elements of this stream.&#10;     *&#10;     * <p>This is an <a href=&#34;package-summary.html#StreamOps&#34;>intermediate&#10;     * operation</a>.&#10;     *&#10;     * @param mapper a <a href=&#34;package-summary.html#NonInterference&#34;>non-interfering</a>,&#10;     *               <a href=&#34;package-summary.html#Statelessness&#34;>stateless</a>&#10;     *               function to apply to each element&#10;     * @return the new stream&#10;     "
  ]
  node [
    id 2748
    label " Stream<U> mapToObj(LongFunction<? extends U> mapper)"
    type "method"
    comment "&#10;     * Returns an object-valued {@code Stream} consisting of the results of&#10;     * applying the given function to the elements of this stream.&#10;     *&#10;     * <p>This is an <a href=&#34;package-summary.html#StreamOps&#34;>&#10;     *     intermediate operation</a>.&#10;     *&#10;     * @param <U> the element type of the new stream&#10;     * @param mapper a <a href=&#34;package-summary.html#NonInterference&#34;>non-interfering</a>,&#10;     *               <a href=&#34;package-summary.html#Statelessness&#34;>stateless</a>&#10;     *               function to apply to each element&#10;     * @return the new stream&#10;     "
  ]
  node [
    id 2749
    label " IntStream mapToInt(LongToIntFunction mapper)"
    type "method"
    comment "&#10;     * Returns an {@code IntStream} consisting of the results of applying the&#10;     * given function to the elements of this stream.&#10;     *&#10;     * <p>This is an <a href=&#34;package-summary.html#StreamOps&#34;>intermediate&#10;     * operation</a>.&#10;     *&#10;     * @param mapper a <a href=&#34;package-summary.html#NonInterference&#34;>non-interfering</a>,&#10;     *               <a href=&#34;package-summary.html#Statelessness&#34;>stateless</a>&#10;     *               function to apply to each element&#10;     * @return the new stream&#10;     "
  ]
  node [
    id 2750
    label " DoubleStream mapToDouble(LongToDoubleFunction mapper)"
    type "method"
    comment "&#10;     * Returns a {@code DoubleStream} consisting of the results of applying the&#10;     * given function to the elements of this stream.&#10;     *&#10;     * <p>This is an <a href=&#34;package-summary.html#StreamOps&#34;>intermediate&#10;     * operation</a>.&#10;     *&#10;     * @param mapper a <a href=&#34;package-summary.html#NonInterference&#34;>non-interfering</a>,&#10;     *               <a href=&#34;package-summary.html#Statelessness&#34;>stateless</a>&#10;     *               function to apply to each element&#10;     * @return the new stream&#10;     "
  ]
  node [
    id 2751
    label " LongStream flatMap(LongFunction<? extends LongStream> mapper)"
    type "method"
    comment "&#10;     * Returns a stream consisting of the results of replacing each element of&#10;     * this stream with the contents of a mapped stream produced by applying&#10;     * the provided mapping function to each element.  Each mapped stream is&#10;     * {@link java.util.stream.BaseStream#close() closed} after its contents&#10;     * have been placed into this stream.  (If a mapped stream is {@code null}&#10;     * an empty stream is used, instead.)&#10;     *&#10;     * <p>This is an <a href=&#34;package-summary.html#StreamOps&#34;>intermediate&#10;     * operation</a>.&#10;     *&#10;     * @param mapper a <a href=&#34;package-summary.html#NonInterference&#34;>non-interfering</a>,&#10;     *               <a href=&#34;package-summary.html#Statelessness&#34;>stateless</a>&#10;     *               function to apply to each element which produces a&#10;     *               {@code LongStream} of new values&#10;     * @return the new stream&#10;     * @see Stream#flatMap(Function)&#10;     "
  ]
  node [
    id 2752
    label " LongStream mapMulti(LongMapMultiConsumer mapper)"
    type "method"
    comment "&#10;     * Returns a stream consisting of the results of replacing each element of&#10;     * this stream with multiple elements, specifically zero or more elements.&#10;     * Replacement is performed by applying the provided mapping function to each&#10;     * element in conjunction with a {@linkplain LongConsumer consumer} argument&#10;     * that accepts replacement elements. The mapping function calls the consumer&#10;     * zero or more times to provide the replacement elements.&#10;     *&#10;     * <p>This is an <a href=&#34;package-summary.html#StreamOps&#34;>intermediate&#10;     * operation</a>.&#10;     *&#10;     * <p>If the {@linkplain LongConsumer consumer} argument is used outside the scope of&#10;     * its application to the mapping function, the results are undefined.&#10;     *&#10;     * @implSpec&#10;     * The default implementation invokes {@link #flatMap flatMap} on this stream,&#10;     * passing a function that behaves as follows. First, it calls the mapper function&#10;     * with a {@code LongConsumer} that accumulates replacement elements into a newly created&#10;     * internal buffer. When the mapper function returns, it creates a {@code LongStream} from the&#10;     * internal buffer. Finally, it returns this stream to {@code flatMap}.&#10;     *&#10;     * @param mapper a <a href=&#34;package-summary.html#NonInterference&#34;>non-interfering</a>,&#10;     *               <a href=&#34;package-summary.html#Statelessness&#34;>stateless</a>&#10;     *               function that generates replacement elements&#10;     * @return the new stream&#10;     * @see Stream#mapMulti Stream.mapMulti&#10;     * @since 16&#10;     "
  ]
  node [
    id 2753
    label " LongStream distinct()"
    type "method"
    comment "&#10;     * Returns a stream consisting of the distinct elements of this stream.&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>stateful&#10;     * intermediate operation</a>.&#10;     *&#10;     * @return the new stream&#10;     "
  ]
  node [
    id 2754
    label " LongStream sorted()"
    type "method"
    comment "&#10;     * Returns a stream consisting of the elements of this stream in sorted&#10;     * order.&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>stateful&#10;     * intermediate operation</a>.&#10;     *&#10;     * @return the new stream&#10;     "
  ]
  node [
    id 2755
    label " LongStream peek(LongConsumer action)"
    type "method"
    comment "&#10;     * Returns a stream consisting of the elements of this stream, additionally&#10;     * performing the provided action on each element as elements are consumed&#10;     * from the resulting stream.&#10;     *&#10;     * <p>This is an <a href=&#34;package-summary.html#StreamOps&#34;>intermediate&#10;     * operation</a>.&#10;     *&#10;     * <p>For parallel stream pipelines, the action may be called at&#10;     * whatever time and in whatever thread the element is made available by the&#10;     * upstream operation.  If the action modifies shared state,&#10;     * it is responsible for providing the required synchronization.&#10;     *&#10;     * @apiNote This method exists mainly to support debugging, where you want&#10;     * to see the elements as they flow past a certain point in a pipeline:&#10;     * <pre>{@code&#10;     *     LongStream.of(1, 2, 3, 4)&#10;     *         .filter(e -> e > 2)&#10;     *         .peek(e -> System.out.println(&#34;Filtered value: &#34; + e))&#10;     *         .map(e -> e * e)&#10;     *         .peek(e -> System.out.println(&#34;Mapped value: &#34; + e))&#10;     *         .sum();&#10;     * }</pre>&#10;     *&#10;     * <p>In cases where the stream implementation is able to optimize away the&#10;     * production of some or all the elements (such as with short-circuiting&#10;     * operations like {@code findFirst}, or in the example described in&#10;     * {@link #count}), the action will not be invoked for those elements.&#10;     *&#10;     * @param action a <a href=&#34;package-summary.html#NonInterference&#34;>&#10;     *               non-interfering</a> action to perform on the elements as&#10;     *               they are consumed from the stream&#10;     * @return the new stream&#10;     "
  ]
  node [
    id 2756
    label " LongStream limit(long maxSize)"
    type "method"
    comment "&#10;     * Returns a stream consisting of the elements of this stream, truncated&#10;     * to be no longer than {@code maxSize} in length.&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>short-circuiting&#10;     * stateful intermediate operation</a>.&#10;     *&#10;     * @apiNote&#10;     * While {@code limit()} is generally a cheap operation on sequential&#10;     * stream pipelines, it can be quite expensive on ordered parallel pipelines,&#10;     * especially for large values of {@code maxSize}, since {@code limit(n)}&#10;     * is constrained to return not just any <em>n</em> elements, but the&#10;     * <em>first n</em> elements in the encounter order.  Using an unordered&#10;     * stream source (such as {@link #generate(LongSupplier)}) or removing the&#10;     * ordering constraint with {@link #unordered()} may result in significant&#10;     * speedups of {@code limit()} in parallel pipelines, if the semantics of&#10;     * your situation permit.  If consistency with encounter order is required,&#10;     * and you are experiencing poor performance or memory utilization with&#10;     * {@code limit()} in parallel pipelines, switching to sequential execution&#10;     * with {@link #sequential()} may improve performance.&#10;     *&#10;     * @param maxSize the number of elements the stream should be limited to&#10;     * @return the new stream&#10;     * @throws IllegalArgumentException if {@code maxSize} is negative&#10;     "
  ]
  node [
    id 2757
    label "generate(LongSupplier)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2758
    label " LongStream skip(long n)"
    type "method"
    comment "&#10;     * Returns a stream consisting of the remaining elements of this stream&#10;     * after discarding the first {@code n} elements of the stream.&#10;     * If this stream contains fewer than {@code n} elements then an&#10;     * empty stream will be returned.&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>stateful&#10;     * intermediate operation</a>.&#10;     *&#10;     * @apiNote&#10;     * While {@code skip()} is generally a cheap operation on sequential&#10;     * stream pipelines, it can be quite expensive on ordered parallel pipelines,&#10;     * especially for large values of {@code n}, since {@code skip(n)}&#10;     * is constrained to skip not just any <em>n</em> elements, but the&#10;     * <em>first n</em> elements in the encounter order.  Using an unordered&#10;     * stream source (such as {@link #generate(LongSupplier)}) or removing the&#10;     * ordering constraint with {@link #unordered()} may result in significant&#10;     * speedups of {@code skip()} in parallel pipelines, if the semantics of&#10;     * your situation permit.  If consistency with encounter order is required,&#10;     * and you are experiencing poor performance or memory utilization with&#10;     * {@code skip()} in parallel pipelines, switching to sequential execution&#10;     * with {@link #sequential()} may improve performance.&#10;     *&#10;     * @param n the number of leading elements to skip&#10;     * @return the new stream&#10;     * @throws IllegalArgumentException if {@code n} is negative&#10;     "
  ]
  node [
    id 2759
    label " LongStream takeWhile(LongPredicate predicate)"
    type "method"
    comment "&#10;     * Returns, if this stream is ordered, a stream consisting of the longest&#10;     * prefix of elements taken from this stream that match the given predicate.&#10;     * Otherwise returns, if this stream is unordered, a stream consisting of a&#10;     * subset of elements taken from this stream that match the given predicate.&#10;     *&#10;     * <p>If this stream is ordered then the longest prefix is a contiguous&#10;     * sequence of elements of this stream that match the given predicate.  The&#10;     * first element of the sequence is the first element of this stream, and&#10;     * the element immediately following the last element of the sequence does&#10;     * not match the given predicate.&#10;     *&#10;     * <p>If this stream is unordered, and some (but not all) elements of this&#10;     * stream match the given predicate, then the behavior of this operation is&#10;     * nondeterministic; it is free to take any subset of matching elements&#10;     * (which includes the empty set).&#10;     *&#10;     * <p>Independent of whether this stream is ordered or unordered if all&#10;     * elements of this stream match the given predicate then this operation&#10;     * takes all elements (the result is the same as the input), or if no&#10;     * elements of the stream match the given predicate then no elements are&#10;     * taken (the result is an empty stream).&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>short-circuiting&#10;     * stateful intermediate operation</a>.&#10;     *&#10;     * @implSpec&#10;     * The default implementation obtains the {@link #spliterator() spliterator}&#10;     * of this stream, wraps that spliterator so as to support the semantics&#10;     * of this operation on traversal, and returns a new stream associated with&#10;     * the wrapped spliterator.  The returned stream preserves the execution&#10;     * characteristics of this stream (namely parallel or sequential execution&#10;     * as per {@link #isParallel()}) but the wrapped spliterator may choose to&#10;     * not support splitting.  When the returned stream is closed, the close&#10;     * handlers for both the returned and this stream are invoked.&#10;     *&#10;     * @apiNote&#10;     * While {@code takeWhile()} is generally a cheap operation on sequential&#10;     * stream pipelines, it can be quite expensive on ordered parallel&#10;     * pipelines, since the operation is constrained to return not just any&#10;     * valid prefix, but the longest prefix of elements in the encounter order.&#10;     * Using an unordered stream source (such as&#10;     * {@link #generate(LongSupplier)}) or removing the ordering constraint with&#10;     * {@link #unordered()} may result in significant speedups of&#10;     * {@code takeWhile()} in parallel pipelines, if the semantics of your&#10;     * situation permit.  If consistency with encounter order is required, and&#10;     * you are experiencing poor performance or memory utilization with&#10;     * {@code takeWhile()} in parallel pipelines, switching to sequential&#10;     * execution with {@link #sequential()} may improve performance.&#10;     *&#10;     * @param predicate a <a href=&#34;package-summary.html#NonInterference&#34;>non-interfering</a>,&#10;     *                  <a href=&#34;package-summary.html#Statelessness&#34;>stateless</a>&#10;     *                  predicate to apply to elements to determine the longest&#10;     *                  prefix of elements.&#10;     * @return the new stream&#10;     * @since 9&#10;     "
  ]
  node [
    id 2760
    label " LongStream dropWhile(LongPredicate predicate)"
    type "method"
    comment "&#10;     * Returns, if this stream is ordered, a stream consisting of the remaining&#10;     * elements of this stream after dropping the longest prefix of elements&#10;     * that match the given predicate.  Otherwise returns, if this stream is&#10;     * unordered, a stream consisting of the remaining elements of this stream&#10;     * after dropping a subset of elements that match the given predicate.&#10;     *&#10;     * <p>If this stream is ordered then the longest prefix is a contiguous&#10;     * sequence of elements of this stream that match the given predicate.  The&#10;     * first element of the sequence is the first element of this stream, and&#10;     * the element immediately following the last element of the sequence does&#10;     * not match the given predicate.&#10;     *&#10;     * <p>If this stream is unordered, and some (but not all) elements of this&#10;     * stream match the given predicate, then the behavior of this operation is&#10;     * nondeterministic; it is free to drop any subset of matching elements&#10;     * (which includes the empty set).&#10;     *&#10;     * <p>Independent of whether this stream is ordered or unordered if all&#10;     * elements of this stream match the given predicate then this operation&#10;     * drops all elements (the result is an empty stream), or if no elements of&#10;     * the stream match the given predicate then no elements are dropped (the&#10;     * result is the same as the input).&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>stateful&#10;     * intermediate operation</a>.&#10;     *&#10;     * @implSpec&#10;     * The default implementation obtains the {@link #spliterator() spliterator}&#10;     * of this stream, wraps that spliterator so as to support the semantics&#10;     * of this operation on traversal, and returns a new stream associated with&#10;     * the wrapped spliterator.  The returned stream preserves the execution&#10;     * characteristics of this stream (namely parallel or sequential execution&#10;     * as per {@link #isParallel()}) but the wrapped spliterator may choose to&#10;     * not support splitting.  When the returned stream is closed, the close&#10;     * handlers for both the returned and this stream are invoked.&#10;     *&#10;     * @apiNote&#10;     * While {@code dropWhile()} is generally a cheap operation on sequential&#10;     * stream pipelines, it can be quite expensive on ordered parallel&#10;     * pipelines, since the operation is constrained to return not just any&#10;     * valid prefix, but the longest prefix of elements in the encounter order.&#10;     * Using an unordered stream source (such as&#10;     * {@link #generate(LongSupplier)}) or removing the ordering constraint with&#10;     * {@link #unordered()} may result in significant speedups of&#10;     * {@code dropWhile()} in parallel pipelines, if the semantics of your&#10;     * situation permit.  If consistency with encounter order is required, and&#10;     * you are experiencing poor performance or memory utilization with&#10;     * {@code dropWhile()} in parallel pipelines, switching to sequential&#10;     * execution with {@link #sequential()} may improve performance.&#10;     *&#10;     * @param predicate a <a href=&#34;package-summary.html#NonInterference&#34;>non-interfering</a>,&#10;     *                  <a href=&#34;package-summary.html#Statelessness&#34;>stateless</a>&#10;     *                  predicate to apply to elements to determine the longest&#10;     *                  prefix of elements.&#10;     * @return the new stream&#10;     * @since 9&#10;     "
  ]
  node [
    id 2761
    label " void forEach(LongConsumer action)"
    type "method"
    comment "&#10;     * Performs an action for each element of this stream.&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>terminal&#10;     * operation</a>.&#10;     *&#10;     * <p>For parallel stream pipelines, this operation does <em>not</em>&#10;     * guarantee to respect the encounter order of the stream, as doing so&#10;     * would sacrifice the benefit of parallelism.  For any given element, the&#10;     * action may be performed at whatever time and in whatever thread the&#10;     * library chooses.  If the action accesses shared state, it is&#10;     * responsible for providing the required synchronization.&#10;     *&#10;     * @param action a <a href=&#34;package-summary.html#NonInterference&#34;>&#10;     *               non-interfering</a> action to perform on the elements&#10;     "
  ]
  node [
    id 2762
    label " void forEachOrdered(LongConsumer action)"
    type "method"
    comment "&#10;     * Performs an action for each element of this stream, guaranteeing that&#10;     * each element is processed in encounter order for streams that have a&#10;     * defined encounter order.&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>terminal&#10;     * operation</a>.&#10;     *&#10;     * @param action a <a href=&#34;package-summary.html#NonInterference&#34;>&#10;     *               non-interfering</a> action to perform on the elements&#10;     * @see #forEach(LongConsumer)&#10;     "
  ]
  node [
    id 2763
    label " long[] toArray()"
    type "method"
    comment "&#10;     * Returns an array containing the elements of this stream.&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>terminal&#10;     * operation</a>.&#10;     *&#10;     * @return an array containing the elements of this stream&#10;     "
  ]
  node [
    id 2764
    label " long reduce(long identity, LongBinaryOperator op)"
    type "method"
    comment "&#10;     * Performs a <a href=&#34;package-summary.html#Reduction&#34;>reduction</a> on the&#10;     * elements of this stream, using the provided identity value and an&#10;     * <a href=&#34;package-summary.html#Associativity&#34;>associative</a>&#10;     * accumulation function, and returns the reduced value.  This is equivalent&#10;     * to:&#10;     * <pre>{@code&#10;     *     long result = identity;&#10;     *     for (long element : this stream)&#10;     *         result = accumulator.applyAsLong(result, element)&#10;     *     return result;&#10;     * }</pre>&#10;     *&#10;     * but is not constrained to execute sequentially.&#10;     *&#10;     * <p>The {@code identity} value must be an identity for the accumulator&#10;     * function. This means that for all {@code x},&#10;     * {@code accumulator.apply(identity, x)} is equal to {@code x}.&#10;     * The {@code accumulator} function must be an&#10;     * <a href=&#34;package-summary.html#Associativity&#34;>associative</a> function.&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>terminal&#10;     * operation</a>.&#10;     *&#10;     * @apiNote Sum, min, max, and average are all special cases of reduction.&#10;     * Summing a stream of numbers can be expressed as:&#10;     *&#10;     * <pre>{@code&#10;     *     long sum = integers.reduce(0, (a, b) -> a+b);&#10;     * }</pre>&#10;     *&#10;     * or more compactly:&#10;     *&#10;     * <pre>{@code&#10;     *     long sum = integers.reduce(0, Long::sum);&#10;     * }</pre>&#10;     *&#10;     * <p>While this may seem a more roundabout way to perform an aggregation&#10;     * compared to simply mutating a running total in a loop, reduction&#10;     * operations parallelize more gracefully, without needing additional&#10;     * synchronization and with greatly reduced risk of data races.&#10;     *&#10;     * @param identity the identity value for the accumulating function&#10;     * @param op an <a href=&#34;package-summary.html#Associativity&#34;>associative</a>,&#10;     *           <a href=&#34;package-summary.html#NonInterference&#34;>non-interfering</a>,&#10;     *           <a href=&#34;package-summary.html#Statelessness&#34;>stateless</a>&#10;     *           function for combining two values&#10;     * @return the result of the reduction&#10;     * @see #sum()&#10;     * @see #min()&#10;     * @see #max()&#10;     * @see #average()&#10;     "
  ]
  node [
    id 2765
    label " OptionalLong reduce(LongBinaryOperator op)"
    type "method"
    comment "&#10;     * Performs a <a href=&#34;package-summary.html#Reduction&#34;>reduction</a> on the&#10;     * elements of this stream, using an&#10;     * <a href=&#34;package-summary.html#Associativity&#34;>associative</a> accumulation&#10;     * function, and returns an {@code OptionalLong} describing the reduced value,&#10;     * if any. This is equivalent to:&#10;     * <pre>{@code&#10;     *     boolean foundAny = false;&#10;     *     long result = null;&#10;     *     for (long element : this stream) {&#10;     *         if (!foundAny) {&#10;     *             foundAny = true;&#10;     *             result = element;&#10;     *         }&#10;     *         else&#10;     *             result = accumulator.applyAsLong(result, element);&#10;     *     }&#10;     *     return foundAny ? OptionalLong.of(result) : OptionalLong.empty();&#10;     * }</pre>&#10;     *&#10;     * but is not constrained to execute sequentially.&#10;     *&#10;     * <p>The {@code accumulator} function must be an&#10;     * <a href=&#34;package-summary.html#Associativity&#34;>associative</a> function.&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>terminal&#10;     * operation</a>.&#10;     *&#10;     * @param op an <a href=&#34;package-summary.html#Associativity&#34;>associative</a>,&#10;     *           <a href=&#34;package-summary.html#NonInterference&#34;>non-interfering</a>,&#10;     *           <a href=&#34;package-summary.html#Statelessness&#34;>stateless</a>&#10;     *           function for combining two values&#10;     * @return the result of the reduction&#10;     * @see #reduce(long, LongBinaryOperator)&#10;     "
  ]
  node [
    id 2766
    label " R collect(Supplier<R> supplier, ObjLongConsumer<R> accumulator, BiConsumer<R, R> combiner)"
    type "method"
    comment "&#10;     * Performs a <a href=&#34;package-summary.html#MutableReduction&#34;>mutable&#10;     * reduction</a> operation on the elements of this stream.  A mutable&#10;     * reduction is one in which the reduced value is a mutable result container,&#10;     * such as an {@code ArrayList}, and elements are incorporated by updating&#10;     * the state of the result rather than by replacing the result.  This&#10;     * produces a result equivalent to:&#10;     * <pre>{@code&#10;     *     R result = supplier.get();&#10;     *     for (long element : this stream)&#10;     *         accumulator.accept(result, element);&#10;     *     return result;&#10;     * }</pre>&#10;     *&#10;     * <p>Like {@link #reduce(long, LongBinaryOperator)}, {@code collect} operations&#10;     * can be parallelized without requiring additional synchronization.&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>terminal&#10;     * operation</a>.&#10;     *&#10;     * @param <R> the type of the mutable result container&#10;     * @param supplier a function that creates a new mutable result container.&#10;     *                 For a parallel execution, this function may be called&#10;     *                 multiple times and must return a fresh value each time.&#10;     * @param accumulator an <a href=&#34;package-summary.html#Associativity&#34;>associative</a>,&#10;     *                    <a href=&#34;package-summary.html#NonInterference&#34;>non-interfering</a>,&#10;     *                    <a href=&#34;package-summary.html#Statelessness&#34;>stateless</a>&#10;     *                    function that must fold an element into a result&#10;     *                    container.&#10;     * @param combiner an <a href=&#34;package-summary.html#Associativity&#34;>associative</a>,&#10;     *                    <a href=&#34;package-summary.html#NonInterference&#34;>non-interfering</a>,&#10;     *                    <a href=&#34;package-summary.html#Statelessness&#34;>stateless</a>&#10;     *                    function that accepts two partial result containers&#10;     *                    and merges them, which must be compatible with the&#10;     *                    accumulator function.  The combiner function must fold&#10;     *                    the elements from the second result container into the&#10;     *                    first result container.&#10;     * @return the result of the reduction&#10;     * @see Stream#collect(Supplier, BiConsumer, BiConsumer)&#10;     "
  ]
  node [
    id 2767
    label "reduce(long"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2768
    label " long sum()"
    type "method"
    comment "&#10;     * Returns the sum of elements in this stream.  This is a special case&#10;     * of a <a href=&#34;package-summary.html#Reduction&#34;>reduction</a>&#10;     * and is equivalent to:&#10;     * <pre>{@code&#10;     *     return reduce(0, Long::sum);&#10;     * }</pre>&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>terminal&#10;     * operation</a>.&#10;     *&#10;     * @return the sum of elements in this stream&#10;     "
  ]
  node [
    id 2769
    label " OptionalLong min()"
    type "method"
    comment "&#10;     * Returns an {@code OptionalLong} describing the minimum element of this&#10;     * stream, or an empty optional if this stream is empty.  This is a special&#10;     * case of a <a href=&#34;package-summary.html#Reduction&#34;>reduction</a>&#10;     * and is equivalent to:&#10;     * <pre>{@code&#10;     *     return reduce(Long::min);&#10;     * }</pre>&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>terminal operation</a>.&#10;     *&#10;     * @return an {@code OptionalLong} containing the minimum element of this&#10;     * stream, or an empty {@code OptionalLong} if the stream is empty&#10;     "
  ]
  node [
    id 2770
    label " OptionalLong max()"
    type "method"
    comment "&#10;     * Returns an {@code OptionalLong} describing the maximum element of this&#10;     * stream, or an empty optional if this stream is empty.  This is a special&#10;     * case of a <a href=&#34;package-summary.html#Reduction&#34;>reduction</a>&#10;     * and is equivalent to:&#10;     * <pre>{@code&#10;     *     return reduce(Long::max);&#10;     * }</pre>&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>terminal&#10;     * operation</a>.&#10;     *&#10;     * @return an {@code OptionalLong} containing the maximum element of this&#10;     * stream, or an empty {@code OptionalLong} if the stream is empty&#10;     "
  ]
  node [
    id 2771
    label " LongSummaryStatistics summaryStatistics()"
    type "method"
    comment "&#10;     * Returns a {@code LongSummaryStatistics} describing various summary data&#10;     * about the elements of this stream.  This is a special case of a&#10;     * <a href=&#34;package-summary.html#Reduction&#34;>reduction</a>.&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>terminal&#10;     * operation</a>.&#10;     *&#10;     * @return a {@code LongSummaryStatistics} describing various summary data&#10;     * about the elements of this stream&#10;     "
  ]
  node [
    id 2772
    label " boolean anyMatch(LongPredicate predicate)"
    type "method"
    comment "&#10;     * Returns whether any elements of this stream match the provided&#10;     * predicate.  May not evaluate the predicate on all elements if not&#10;     * necessary for determining the result.  If the stream is empty then&#10;     * {@code false} is returned and the predicate is not evaluated.&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>short-circuiting&#10;     * terminal operation</a>.&#10;     *&#10;     * @apiNote&#10;     * This method evaluates the <em>existential quantification</em> of the&#10;     * predicate over the elements of the stream (for some x P(x)).&#10;     *&#10;     * @param predicate a <a href=&#34;package-summary.html#NonInterference&#34;>non-interfering</a>,&#10;     *                  <a href=&#34;package-summary.html#Statelessness&#34;>stateless</a>&#10;     *                  predicate to apply to elements of this stream&#10;     * @return {@code true} if any elements of the stream match the provided&#10;     * predicate, otherwise {@code false}&#10;     "
  ]
  node [
    id 2773
    label " boolean allMatch(LongPredicate predicate)"
    type "method"
    comment "&#10;     * Returns whether all elements of this stream match the provided predicate.&#10;     * May not evaluate the predicate on all elements if not necessary for&#10;     * determining the result.  If the stream is empty then {@code true} is&#10;     * returned and the predicate is not evaluated.&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>short-circuiting&#10;     * terminal operation</a>.&#10;     *&#10;     * @apiNote&#10;     * This method evaluates the <em>universal quantification</em> of the&#10;     * predicate over the elements of the stream (for all x P(x)).  If the&#10;     * stream is empty, the quantification is said to be <em>vacuously&#10;     * satisfied</em> and is always {@code true} (regardless of P(x)).&#10;     *&#10;     * @param predicate a <a href=&#34;package-summary.html#NonInterference&#34;>non-interfering</a>,&#10;     *                  <a href=&#34;package-summary.html#Statelessness&#34;>stateless</a>&#10;     *                  predicate to apply to elements of this stream&#10;     * @return {@code true} if either all elements of the stream match the&#10;     * provided predicate or the stream is empty, otherwise {@code false}&#10;     "
  ]
  node [
    id 2774
    label " boolean noneMatch(LongPredicate predicate)"
    type "method"
    comment "&#10;     * Returns whether no elements of this stream match the provided predicate.&#10;     * May not evaluate the predicate on all elements if not necessary for&#10;     * determining the result.  If the stream is empty then {@code true} is&#10;     * returned and the predicate is not evaluated.&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>short-circuiting&#10;     * terminal operation</a>.&#10;     *&#10;     * @apiNote&#10;     * This method evaluates the <em>universal quantification</em> of the&#10;     * negated predicate over the elements of the stream (for all x ~P(x)).  If&#10;     * the stream is empty, the quantification is said to be vacuously satisfied&#10;     * and is always {@code true}, regardless of P(x).&#10;     *&#10;     * @param predicate a <a href=&#34;package-summary.html#NonInterference&#34;>non-interfering</a>,&#10;     *                  <a href=&#34;package-summary.html#Statelessness&#34;>stateless</a>&#10;     *                  predicate to apply to elements of this stream&#10;     * @return {@code true} if either no elements of the stream match the&#10;     * provided predicate or the stream is empty, otherwise {@code false}&#10;     "
  ]
  node [
    id 2775
    label " OptionalLong findFirst()"
    type "method"
    comment "&#10;     * Returns an {@link OptionalLong} describing the first element of this&#10;     * stream, or an empty {@code OptionalLong} if the stream is empty.  If the&#10;     * stream has no encounter order, then any element may be returned.&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>short-circuiting&#10;     * terminal operation</a>.&#10;     *&#10;     * @return an {@code OptionalLong} describing the first element of this&#10;     * stream, or an empty {@code OptionalLong} if the stream is empty&#10;     "
  ]
  node [
    id 2776
    label "java.util.OptionalLong"
  ]
  node [
    id 2777
    label " OptionalLong findAny()"
    type "method"
    comment "&#10;     * Returns an {@link OptionalLong} describing some element of the stream, or&#10;     * an empty {@code OptionalLong} if the stream is empty.&#10;     *&#10;     * <p>This is a <a href=&#34;package-summary.html#StreamOps&#34;>short-circuiting&#10;     * terminal operation</a>.&#10;     *&#10;     * <p>The behavior of this operation is explicitly nondeterministic; it is&#10;     * free to select any element in the stream.  This is to allow for maximal&#10;     * performance in parallel operations; the cost is that multiple invocations&#10;     * on the same source may not return the same result.  (If a stable result&#10;     * is desired, use {@link #findFirst()} instead.)&#10;     *&#10;     * @return an {@code OptionalLong} describing some element of this stream,&#10;     * or an empty {@code OptionalLong} if the stream is empty&#10;     * @see #findFirst()&#10;     "
  ]
  node [
    id 2778
    label " Stream<Long> boxed()"
    type "method"
    comment "&#10;     * Returns a {@code Stream} consisting of the elements of this stream,&#10;     * each boxed to a {@code Long}.&#10;     *&#10;     * <p>This is an <a href=&#34;package-summary.html#StreamOps&#34;>intermediate&#10;     * operation</a>.&#10;     *&#10;     * @return a {@code Stream} consistent of the elements of this stream,&#10;     * each boxed to {@code Long}&#10;     "
  ]
  node [
    id 2779
    label "public static LongStream empty()"
    type "method"
    comment "&#10;     * Returns an empty sequential {@code LongStream}.&#10;     *&#10;     * @return an empty sequential stream&#10;     "
  ]
  node [
    id 2780
    label "public static LongStream of(long t)"
    type "method"
    comment "&#10;     * Returns a sequential {@code LongStream} containing a single element.&#10;     *&#10;     * @param t the single element&#10;     * @return a singleton sequential stream&#10;     "
  ]
  node [
    id 2781
    label "public static LongStream of(long... values)"
    type "method"
    comment "&#10;     * Returns a sequential ordered stream whose elements are the specified values.&#10;     *&#10;     * @param values the elements of the new stream&#10;     * @return the new stream&#10;     "
  ]
  node [
    id 2782
    label "public static LongStream iterate(final long seed, final LongUnaryOperator f)"
    type "method"
    comment "&#10;     * Returns an infinite sequential ordered {@code LongStream} produced by iterative&#10;     * application of a function {@code f} to an initial element {@code seed},&#10;     * producing a {@code Stream} consisting of {@code seed}, {@code f(seed)},&#10;     * {@code f(f(seed))}, etc.&#10;     *&#10;     * <p>The first element (position {@code 0}) in the {@code LongStream} will&#10;     * be the provided {@code seed}.  For {@code n > 0}, the element at position&#10;     * {@code n}, will be the result of applying the function {@code f} to the&#10;     * element at position {@code n - 1}.&#10;     *&#10;     * <p>The action of applying {@code f} for one element&#10;     * <a href=&#34;../concurrent/package-summary.html#MemoryVisibility&#34;><i>happens-before</i></a>&#10;     * the action of applying {@code f} for subsequent elements.  For any given&#10;     * element the action may be performed in whatever thread the library&#10;     * chooses.&#10;     *&#10;     * @param seed the initial element&#10;     * @param f a function to be applied to the previous element to produce&#10;     *          a new element&#10;     * @return a new sequential {@code LongStream}&#10;     "
  ]
  node [
    id 2783
    label "public static LongStream iterate(long seed, LongPredicate hasNext, LongUnaryOperator next)"
    type "method"
    comment "&#10;     * Returns a sequential ordered {@code LongStream} produced by iterative&#10;     * application of the given {@code next} function to an initial element,&#10;     * conditioned on satisfying the given {@code hasNext} predicate.  The&#10;     * stream terminates as soon as the {@code hasNext} predicate returns false.&#10;     *&#10;     * <p>{@code LongStream.iterate} should produce the same sequence of elements as&#10;     * produced by the corresponding for-loop:&#10;     * <pre>{@code&#10;     *     for (long index=seed; hasNext.test(index); index = next.applyAsLong(index)) {&#10;     *         ...&#10;     *     }&#10;     * }</pre>&#10;     *&#10;     * <p>The resulting sequence may be empty if the {@code hasNext} predicate&#10;     * does not hold on the seed value.  Otherwise the first element will be the&#10;     * supplied {@code seed} value, the next element (if present) will be the&#10;     * result of applying the {@code next} function to the {@code seed} value,&#10;     * and so on iteratively until the {@code hasNext} predicate indicates that&#10;     * the stream should terminate.&#10;     *&#10;     * <p>The action of applying the {@code hasNext} predicate to an element&#10;     * <a href=&#34;../concurrent/package-summary.html#MemoryVisibility&#34;><i>happens-before</i></a>&#10;     * the action of applying the {@code next} function to that element.  The&#10;     * action of applying the {@code next} function for one element&#10;     * <i>happens-before</i> the action of applying the {@code hasNext}&#10;     * predicate for subsequent elements.  For any given element an action may&#10;     * be performed in whatever thread the library chooses.&#10;     *&#10;     * @param seed the initial element&#10;     * @param hasNext a predicate to apply to elements to determine when the&#10;     *                stream must terminate.&#10;     * @param next a function to be applied to the previous element to produce&#10;     *             a new element&#10;     * @return a new sequential {@code LongStream}&#10;     * @since 9&#10;     "
  ]
  node [
    id 2784
    label "public static LongStream generate(LongSupplier s)"
    type "method"
    comment "&#10;     * Returns an infinite sequential unordered stream where each element is&#10;     * generated by the provided {@code LongSupplier}.  This is suitable for&#10;     * generating constant streams, streams of random elements, etc.&#10;     *&#10;     * @param s the {@code LongSupplier} for generated elements&#10;     * @return a new infinite sequential unordered {@code LongStream}&#10;     "
  ]
  node [
    id 2785
    label "public static LongStream range(long startInclusive, final long endExclusive)"
    type "method"
    comment "&#10;     * Returns a sequential ordered {@code LongStream} from {@code startInclusive}&#10;     * (inclusive) to {@code endExclusive} (exclusive) by an incremental step of&#10;     * {@code 1}.&#10;     *&#10;     * @apiNote&#10;     * <p>An equivalent sequence of increasing values can be produced&#10;     * sequentially using a {@code for} loop as follows:&#10;     * <pre>{@code&#10;     *     for (long i = startInclusive; i < endExclusive ; i++) { ... }&#10;     * }</pre>&#10;     *&#10;     * @param startInclusive the (inclusive) initial value&#10;     * @param endExclusive the exclusive upper bound&#10;     * @return a sequential {@code LongStream} for the range of {@code long}&#10;     *         elements&#10;     "
  ]
  node [
    id 2786
    label "public static LongStream rangeClosed(long startInclusive, final long endInclusive)"
    type "method"
    comment "&#10;     * Returns a sequential ordered {@code LongStream} from {@code startInclusive}&#10;     * (inclusive) to {@code endInclusive} (inclusive) by an incremental step of&#10;     * {@code 1}.&#10;     *&#10;     * @apiNote&#10;     * <p>An equivalent sequence of increasing values can be produced&#10;     * sequentially using a {@code for} loop as follows:&#10;     * <pre>{@code&#10;     *     for (long i = startInclusive; i <= endInclusive ; i++) { ... }&#10;     * }</pre>&#10;     *&#10;     * @param startInclusive the (inclusive) initial value&#10;     * @param endInclusive the inclusive upper bound&#10;     * @return a sequential {@code LongStream} for the range of {@code long}&#10;     *         elements&#10;     "
  ]
  node [
    id 2787
    label "public static LongStream concat(LongStream a, LongStream b)"
    type "method"
    comment "&#10;     * Creates a lazily concatenated stream whose elements are all the&#10;     * elements of the first stream followed by all the elements of the&#10;     * second stream.  The resulting stream is ordered if both&#10;     * of the input streams are ordered, and parallel if either of the input&#10;     * streams is parallel.  When the resulting stream is closed, the close&#10;     * handlers for both input streams are invoked.&#10;     *&#10;     * <p>This method operates on the two input streams and binds each stream&#10;     * to its source.  As a result subsequent modifications to an input stream&#10;     * source may not be reflected in the concatenated stream result.&#10;     *&#10;     * @implNote&#10;     * Use caution when constructing streams from repeated concatenation.&#10;     * Accessing an element of a deeply concatenated stream can result in deep&#10;     * call chains, or even {@code StackOverflowError}.&#10;     *&#10;     * @apiNote&#10;     * To preserve optimization opportunities this method binds each stream to&#10;     * its source and accepts only two streams as parameters.  For example, the&#10;     * exact size of the concatenated stream source can be computed if the exact&#10;     * size of each input stream source is known.&#10;     * To concatenate more streams without binding, or without nested calls to&#10;     * this method, try creating a stream of streams and flat-mapping with the&#10;     * identity function, for example:&#10;     * <pre>{@code&#10;     *     LongStream concat = Stream.of(s1, s2, s3, s4).flatMapToLong(s -> s);&#10;     * }</pre>&#10;     *&#10;     * @param a the first stream&#10;     * @param b the second stream&#10;     * @return the concatenation of the two input streams&#10;     "
  ]
  node [
    id 2788
    label "public static LongStream stream(long[] array, int startInclusive, int endExclusive)"
    type "method"
    comment "&#10;     * Returns a sequential {@link LongStream} with the specified range of the&#10;     * specified array as its source.&#10;     *&#10;     * @param array the array, assumed to be unmodified during use&#10;     * @param startInclusive the first index to cover, inclusive&#10;     * @param endExclusive index immediately past the last index to cover&#10;     * @return a {@code LongStream} for the array range&#10;     * @throws ArrayIndexOutOfBoundsException if {@code startInclusive} is&#10;     *         negative, {@code endExclusive} is less than&#10;     *         {@code startInclusive}, or {@code endExclusive} is greater than&#10;     *         the array size&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 2789
    label "public static DoubleStream stream(double[] array)"
    type "method"
    comment "&#10;     * Returns a sequential {@link DoubleStream} with the specified array as its&#10;     * source.&#10;     *&#10;     * @param array the array, assumed to be unmodified during use&#10;     * @return a {@code DoubleStream} for the array&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 2790
    label "public static DoubleStream stream(double[] array, int startInclusive, int endExclusive)"
    type "method"
    comment "&#10;     * Returns a sequential {@link DoubleStream} with the specified range of the&#10;     * specified array as its source.&#10;     *&#10;     * @param array the array, assumed to be unmodified during use&#10;     * @param startInclusive the first index to cover, inclusive&#10;     * @param endExclusive index immediately past the last index to cover&#10;     * @return a {@code DoubleStream} for the array range&#10;     * @throws ArrayIndexOutOfBoundsException if {@code startInclusive} is&#10;     *         negative, {@code endExclusive} is less than&#10;     *         {@code startInclusive}, or {@code endExclusive} is greater than&#10;     *         the array size&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 2791
    label "public static int compare(boolean[] a, boolean[] b)"
    type "method"
    comment "&#10;     * Compares two {@code boolean} arrays lexicographically.&#10;     *&#10;     * <p>If the two arrays share a common prefix then the lexicographic&#10;     * comparison is the result of comparing two elements, as if by&#10;     * {@link Boolean#compare(boolean, boolean)}, at an index within the&#10;     * respective arrays that is the prefix length.&#10;     * Otherwise, one array is a proper prefix of the other and, lexicographic&#10;     * comparison is the result of comparing the two array lengths.&#10;     * (See {@link #mismatch(boolean[], boolean[])} for the definition of a&#10;     * common and proper prefix.)&#10;     *&#10;     * <p>A {@code null} array reference is considered lexicographically less&#10;     * than a non-{@code null} array reference.  Two {@code null} array&#10;     * references are considered equal.&#10;     *&#10;     * <p>The comparison is consistent with {@link #equals(boolean[], boolean[]) equals},&#10;     * more specifically the following holds for arrays {@code a} and {@code b}:&#10;     * <pre>{@code&#10;     *     Arrays.equals(a, b) == (Arrays.compare(a, b) == 0)&#10;     * }</pre>&#10;     *&#10;     * @apiNote&#10;     * <p>This method behaves as if (for non-{@code null} array references):&#10;     * <pre>{@code&#10;     *     int i = Arrays.mismatch(a, b);&#10;     *     if (i >= 0 &#38;&#38; i < Math.min(a.length, b.length))&#10;     *         return Boolean.compare(a[i], b[i]);&#10;     *     return a.length - b.length;&#10;     * }</pre>&#10;     *&#10;     * @param a the first array to compare&#10;     * @param b the second array to compare&#10;     * @return the value {@code 0} if the first and second array are equal and&#10;     *         contain the same elements in the same order;&#10;     *         a value less than {@code 0} if the first array is&#10;     *         lexicographically less than the second array; and&#10;     *         a value greater than {@code 0} if the first array is&#10;     *         lexicographically greater than the second array&#10;     * @since 9&#10;     "
  ]
  node [
    id 2792
    label "equals(boolean"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2793
    label "compare(boolean"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2794
    label "mismatch(boolean"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2795
    label "public static int compare(boolean[] a, int aFromIndex, int aToIndex, boolean[] b, int bFromIndex, int bToIndex)"
    type "method"
    comment "&#10;     * Compares two {@code boolean} arrays lexicographically over the specified&#10;     * ranges.&#10;     *&#10;     * <p>If the two arrays, over the specified ranges, share a common prefix&#10;     * then the lexicographic comparison is the result of comparing two&#10;     * elements, as if by {@link Boolean#compare(boolean, boolean)}, at a&#10;     * relative index within the respective arrays that is the length of the&#10;     * prefix.&#10;     * Otherwise, one array is a proper prefix of the other and, lexicographic&#10;     * comparison is the result of comparing the two range lengths.&#10;     * (See {@link #mismatch(boolean[], int, int, boolean[], int, int)} for the&#10;     * definition of a common and proper prefix.)&#10;     *&#10;     * <p>The comparison is consistent with&#10;     * {@link #equals(boolean[], int, int, boolean[], int, int) equals}, more&#10;     * specifically the following holds for arrays {@code a} and {@code b} with&#10;     * specified ranges [{@code aFromIndex}, {@code atoIndex}) and&#10;     * [{@code bFromIndex}, {@code btoIndex}) respectively:&#10;     * <pre>{@code&#10;     *     Arrays.equals(a, aFromIndex, aToIndex, b, bFromIndex, bToIndex) ==&#10;     *         (Arrays.compare(a, aFromIndex, aToIndex, b, bFromIndex, bToIndex) == 0)&#10;     * }</pre>&#10;     *&#10;     * @apiNote&#10;     * <p>This method behaves as if:&#10;     * <pre>{@code&#10;     *     int i = Arrays.mismatch(a, aFromIndex, aToIndex,&#10;     *                             b, bFromIndex, bToIndex);&#10;     *     if (i >= 0 &#38;&#38; i < Math.min(aToIndex - aFromIndex, bToIndex - bFromIndex))&#10;     *         return Boolean.compare(a[aFromIndex + i], b[bFromIndex + i]);&#10;     *     return (aToIndex - aFromIndex) - (bToIndex - bFromIndex);&#10;     * }</pre>&#10;     *&#10;     * @param a the first array to compare&#10;     * @param aFromIndex the index (inclusive) of the first element in the&#10;     *                   first array to be compared&#10;     * @param aToIndex the index (exclusive) of the last element in the&#10;     *                 first array to be compared&#10;     * @param b the second array to compare&#10;     * @param bFromIndex the index (inclusive) of the first element in the&#10;     *                   second array to be compared&#10;     * @param bToIndex the index (exclusive) of the last element in the&#10;     *                 second array to be compared&#10;     * @return the value {@code 0} if, over the specified ranges, the first and&#10;     *         second array are equal and contain the same elements in the same&#10;     *         order;&#10;     *         a value less than {@code 0} if, over the specified ranges, the&#10;     *         first array is lexicographically less than the second array; and&#10;     *         a value greater than {@code 0} if, over the specified ranges, the&#10;     *         first array is lexicographically greater than the second array&#10;     * @throws IllegalArgumentException&#10;     *         if {@code aFromIndex > aToIndex} or&#10;     *         if {@code bFromIndex > bToIndex}&#10;     * @throws ArrayIndexOutOfBoundsException&#10;     *         if {@code aFromIndex < 0 or aToIndex > a.length} or&#10;     *         if {@code bFromIndex < 0 or bToIndex > b.length}&#10;     * @throws NullPointerException&#10;     *         if either array is {@code null}&#10;     * @since 9&#10;     "
  ]
  node [
    id 2796
    label "public static int compare(byte[] a, byte[] b)"
    type "method"
    comment "&#10;     * Compares two {@code byte} arrays lexicographically.&#10;     *&#10;     * <p>If the two arrays share a common prefix then the lexicographic&#10;     * comparison is the result of comparing two elements, as if by&#10;     * {@link Byte#compare(byte, byte)}, at an index within the respective&#10;     * arrays that is the prefix length.&#10;     * Otherwise, one array is a proper prefix of the other and, lexicographic&#10;     * comparison is the result of comparing the two array lengths.&#10;     * (See {@link #mismatch(byte[], byte[])} for the definition of a common and&#10;     * proper prefix.)&#10;     *&#10;     * <p>A {@code null} array reference is considered lexicographically less&#10;     * than a non-{@code null} array reference.  Two {@code null} array&#10;     * references are considered equal.&#10;     *&#10;     * <p>The comparison is consistent with {@link #equals(byte[], byte[]) equals},&#10;     * more specifically the following holds for arrays {@code a} and {@code b}:&#10;     * <pre>{@code&#10;     *     Arrays.equals(a, b) == (Arrays.compare(a, b) == 0)&#10;     * }</pre>&#10;     *&#10;     * @apiNote&#10;     * <p>This method behaves as if (for non-{@code null} array references):&#10;     * <pre>{@code&#10;     *     int i = Arrays.mismatch(a, b);&#10;     *     if (i >= 0 &#38;&#38; i < Math.min(a.length, b.length))&#10;     *         return Byte.compare(a[i], b[i]);&#10;     *     return a.length - b.length;&#10;     * }</pre>&#10;     *&#10;     * @param a the first array to compare&#10;     * @param b the second array to compare&#10;     * @return the value {@code 0} if the first and second array are equal and&#10;     *         contain the same elements in the same order;&#10;     *         a value less than {@code 0} if the first array is&#10;     *         lexicographically less than the second array; and&#10;     *         a value greater than {@code 0} if the first array is&#10;     *         lexicographically greater than the second array&#10;     * @since 9&#10;     "
  ]
  node [
    id 2797
    label "equals(byte"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2798
    label "mismatch(byte"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2799
    label "public static int compare(byte[] a, int aFromIndex, int aToIndex, byte[] b, int bFromIndex, int bToIndex)"
    type "method"
    comment "&#10;     * Compares two {@code byte} arrays lexicographically over the specified&#10;     * ranges.&#10;     *&#10;     * <p>If the two arrays, over the specified ranges, share a common prefix&#10;     * then the lexicographic comparison is the result of comparing two&#10;     * elements, as if by {@link Byte#compare(byte, byte)}, at a relative index&#10;     * within the respective arrays that is the length of the prefix.&#10;     * Otherwise, one array is a proper prefix of the other and, lexicographic&#10;     * comparison is the result of comparing the two range lengths.&#10;     * (See {@link #mismatch(byte[], int, int, byte[], int, int)} for the&#10;     * definition of a common and proper prefix.)&#10;     *&#10;     * <p>The comparison is consistent with&#10;     * {@link #equals(byte[], int, int, byte[], int, int) equals}, more&#10;     * specifically the following holds for arrays {@code a} and {@code b} with&#10;     * specified ranges [{@code aFromIndex}, {@code atoIndex}) and&#10;     * [{@code bFromIndex}, {@code btoIndex}) respectively:&#10;     * <pre>{@code&#10;     *     Arrays.equals(a, aFromIndex, aToIndex, b, bFromIndex, bToIndex) ==&#10;     *         (Arrays.compare(a, aFromIndex, aToIndex, b, bFromIndex, bToIndex) == 0)&#10;     * }</pre>&#10;     *&#10;     * @apiNote&#10;     * <p>This method behaves as if:&#10;     * <pre>{@code&#10;     *     int i = Arrays.mismatch(a, aFromIndex, aToIndex,&#10;     *                             b, bFromIndex, bToIndex);&#10;     *     if (i >= 0 &#38;&#38; i < Math.min(aToIndex - aFromIndex, bToIndex - bFromIndex))&#10;     *         return Byte.compare(a[aFromIndex + i], b[bFromIndex + i]);&#10;     *     return (aToIndex - aFromIndex) - (bToIndex - bFromIndex);&#10;     * }</pre>&#10;     *&#10;     * @param a the first array to compare&#10;     * @param aFromIndex the index (inclusive) of the first element in the&#10;     *                   first array to be compared&#10;     * @param aToIndex the index (exclusive) of the last element in the&#10;     *                 first array to be compared&#10;     * @param b the second array to compare&#10;     * @param bFromIndex the index (inclusive) of the first element in the&#10;     *                   second array to be compared&#10;     * @param bToIndex the index (exclusive) of the last element in the&#10;     *                 second array to be compared&#10;     * @return the value {@code 0} if, over the specified ranges, the first and&#10;     *         second array are equal and contain the same elements in the same&#10;     *         order;&#10;     *         a value less than {@code 0} if, over the specified ranges, the&#10;     *         first array is lexicographically less than the second array; and&#10;     *         a value greater than {@code 0} if, over the specified ranges, the&#10;     *         first array is lexicographically greater than the second array&#10;     * @throws IllegalArgumentException&#10;     *         if {@code aFromIndex > aToIndex} or&#10;     *         if {@code bFromIndex > bToIndex}&#10;     * @throws ArrayIndexOutOfBoundsException&#10;     *         if {@code aFromIndex < 0 or aToIndex > a.length} or&#10;     *         if {@code bFromIndex < 0 or bToIndex > b.length}&#10;     * @throws NullPointerException&#10;     *         if either array is {@code null}&#10;     * @since 9&#10;     "
  ]
  node [
    id 2800
    label "public static int compareUnsigned(byte[] a, byte[] b)"
    type "method"
    comment "&#10;     * Compares two {@code byte} arrays lexicographically, numerically treating&#10;     * elements as unsigned.&#10;     *&#10;     * <p>If the two arrays share a common prefix then the lexicographic&#10;     * comparison is the result of comparing two elements, as if by&#10;     * {@link Byte#compareUnsigned(byte, byte)}, at an index within the&#10;     * respective arrays that is the prefix length.&#10;     * Otherwise, one array is a proper prefix of the other and, lexicographic&#10;     * comparison is the result of comparing the two array lengths.&#10;     * (See {@link #mismatch(byte[], byte[])} for the definition of a common&#10;     * and proper prefix.)&#10;     *&#10;     * <p>A {@code null} array reference is considered lexicographically less&#10;     * than a non-{@code null} array reference.  Two {@code null} array&#10;     * references are considered equal.&#10;     *&#10;     * @apiNote&#10;     * <p>This method behaves as if (for non-{@code null} array references):&#10;     * <pre>{@code&#10;     *     int i = Arrays.mismatch(a, b);&#10;     *     if (i >= 0 &#38;&#38; i < Math.min(a.length, b.length))&#10;     *         return Byte.compareUnsigned(a[i], b[i]);&#10;     *     return a.length - b.length;&#10;     * }</pre>&#10;     *&#10;     * @param a the first array to compare&#10;     * @param b the second array to compare&#10;     * @return the value {@code 0} if the first and second array are&#10;     *         equal and contain the same elements in the same order;&#10;     *         a value less than {@code 0} if the first array is&#10;     *         lexicographically less than the second array; and&#10;     *         a value greater than {@code 0} if the first array is&#10;     *         lexicographically greater than the second array&#10;     * @since 9&#10;     "
  ]
  node [
    id 2801
    label "compareUnsigned(byte"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2802
    label "public static int compareUnsigned(byte[] a, int aFromIndex, int aToIndex, byte[] b, int bFromIndex, int bToIndex)"
    type "method"
    comment "&#10;     * Compares two {@code byte} arrays lexicographically over the specified&#10;     * ranges, numerically treating elements as unsigned.&#10;     *&#10;     * <p>If the two arrays, over the specified ranges, share a common prefix&#10;     * then the lexicographic comparison is the result of comparing two&#10;     * elements, as if by {@link Byte#compareUnsigned(byte, byte)}, at a&#10;     * relative index within the respective arrays that is the length of the&#10;     * prefix.&#10;     * Otherwise, one array is a proper prefix of the other and, lexicographic&#10;     * comparison is the result of comparing the two range lengths.&#10;     * (See {@link #mismatch(byte[], int, int, byte[], int, int)} for the&#10;     * definition of a common and proper prefix.)&#10;     *&#10;     * @apiNote&#10;     * <p>This method behaves as if:&#10;     * <pre>{@code&#10;     *     int i = Arrays.mismatch(a, aFromIndex, aToIndex,&#10;     *                             b, bFromIndex, bToIndex);&#10;     *     if (i >= 0 &#38;&#38; i < Math.min(aToIndex - aFromIndex, bToIndex - bFromIndex))&#10;     *         return Byte.compareUnsigned(a[aFromIndex + i], b[bFromIndex + i]);&#10;     *     return (aToIndex - aFromIndex) - (bToIndex - bFromIndex);&#10;     * }</pre>&#10;     *&#10;     * @param a the first array to compare&#10;     * @param aFromIndex the index (inclusive) of the first element in the&#10;     *                   first array to be compared&#10;     * @param aToIndex the index (exclusive) of the last element in the&#10;     *                 first array to be compared&#10;     * @param b the second array to compare&#10;     * @param bFromIndex the index (inclusive) of the first element in the&#10;     *                   second array to be compared&#10;     * @param bToIndex the index (exclusive) of the last element in the&#10;     *                 second array to be compared&#10;     * @return the value {@code 0} if, over the specified ranges, the first and&#10;     *         second array are equal and contain the same elements in the same&#10;     *         order;&#10;     *         a value less than {@code 0} if, over the specified ranges, the&#10;     *         first array is lexicographically less than the second array; and&#10;     *         a value greater than {@code 0} if, over the specified ranges, the&#10;     *         first array is lexicographically greater than the second array&#10;     * @throws IllegalArgumentException&#10;     *         if {@code aFromIndex > aToIndex} or&#10;     *         if {@code bFromIndex > bToIndex}&#10;     * @throws ArrayIndexOutOfBoundsException&#10;     *         if {@code aFromIndex < 0 or aToIndex > a.length} or&#10;     *         if {@code bFromIndex < 0 or bToIndex > b.length}&#10;     * @throws NullPointerException&#10;     *         if either array is null&#10;     * @since 9&#10;     "
  ]
  node [
    id 2803
    label "public static int compare(short[] a, short[] b)"
    type "method"
    comment "&#10;     * Compares two {@code short} arrays lexicographically.&#10;     *&#10;     * <p>If the two arrays share a common prefix then the lexicographic&#10;     * comparison is the result of comparing two elements, as if by&#10;     * {@link Short#compare(short, short)}, at an index within the respective&#10;     * arrays that is the prefix length.&#10;     * Otherwise, one array is a proper prefix of the other and, lexicographic&#10;     * comparison is the result of comparing the two array lengths.&#10;     * (See {@link #mismatch(short[], short[])} for the definition of a common&#10;     * and proper prefix.)&#10;     *&#10;     * <p>A {@code null} array reference is considered lexicographically less&#10;     * than a non-{@code null} array reference.  Two {@code null} array&#10;     * references are considered equal.&#10;     *&#10;     * <p>The comparison is consistent with {@link #equals(short[], short[]) equals},&#10;     * more specifically the following holds for arrays {@code a} and {@code b}:&#10;     * <pre>{@code&#10;     *     Arrays.equals(a, b) == (Arrays.compare(a, b) == 0)&#10;     * }</pre>&#10;     *&#10;     * @apiNote&#10;     * <p>This method behaves as if (for non-{@code null} array references):&#10;     * <pre>{@code&#10;     *     int i = Arrays.mismatch(a, b);&#10;     *     if (i >= 0 &#38;&#38; i < Math.min(a.length, b.length))&#10;     *         return Short.compare(a[i], b[i]);&#10;     *     return a.length - b.length;&#10;     * }</pre>&#10;     *&#10;     * @param a the first array to compare&#10;     * @param b the second array to compare&#10;     * @return the value {@code 0} if the first and second array are equal and&#10;     *         contain the same elements in the same order;&#10;     *         a value less than {@code 0} if the first array is&#10;     *         lexicographically less than the second array; and&#10;     *         a value greater than {@code 0} if the first array is&#10;     *         lexicographically greater than the second array&#10;     * @since 9&#10;     "
  ]
  node [
    id 2804
    label "compare(short"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2805
    label "equals(short"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2806
    label "mismatch(short"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2807
    label "public static int compare(short[] a, int aFromIndex, int aToIndex, short[] b, int bFromIndex, int bToIndex)"
    type "method"
    comment "&#10;     * Compares two {@code short} arrays lexicographically over the specified&#10;     * ranges.&#10;     *&#10;     * <p>If the two arrays, over the specified ranges, share a common prefix&#10;     * then the lexicographic comparison is the result of comparing two&#10;     * elements, as if by {@link Short#compare(short, short)}, at a relative&#10;     * index within the respective arrays that is the length of the prefix.&#10;     * Otherwise, one array is a proper prefix of the other and, lexicographic&#10;     * comparison is the result of comparing the two range lengths.&#10;     * (See {@link #mismatch(short[], int, int, short[], int, int)} for the&#10;     * definition of a common and proper prefix.)&#10;     *&#10;     * <p>The comparison is consistent with&#10;     * {@link #equals(short[], int, int, short[], int, int) equals}, more&#10;     * specifically the following holds for arrays {@code a} and {@code b} with&#10;     * specified ranges [{@code aFromIndex}, {@code atoIndex}) and&#10;     * [{@code bFromIndex}, {@code btoIndex}) respectively:&#10;     * <pre>{@code&#10;     *     Arrays.equals(a, aFromIndex, aToIndex, b, bFromIndex, bToIndex) ==&#10;     *         (Arrays.compare(a, aFromIndex, aToIndex, b, bFromIndex, bToIndex) == 0)&#10;     * }</pre>&#10;     *&#10;     * @apiNote&#10;     * <p>This method behaves as if:&#10;     * <pre>{@code&#10;     *     int i = Arrays.mismatch(a, aFromIndex, aToIndex,&#10;     *                             b, bFromIndex, bToIndex);&#10;     *     if (i >= 0 &#38;&#38; i < Math.min(aToIndex - aFromIndex, bToIndex - bFromIndex))&#10;     *         return Short.compare(a[aFromIndex + i], b[bFromIndex + i]);&#10;     *     return (aToIndex - aFromIndex) - (bToIndex - bFromIndex);&#10;     * }</pre>&#10;     *&#10;     * @param a the first array to compare&#10;     * @param aFromIndex the index (inclusive) of the first element in the&#10;     *                   first array to be compared&#10;     * @param aToIndex the index (exclusive) of the last element in the&#10;     *                 first array to be compared&#10;     * @param b the second array to compare&#10;     * @param bFromIndex the index (inclusive) of the first element in the&#10;     *                   second array to be compared&#10;     * @param bToIndex the index (exclusive) of the last element in the&#10;     *                 second array to be compared&#10;     * @return the value {@code 0} if, over the specified ranges, the first and&#10;     *         second array are equal and contain the same elements in the same&#10;     *         order;&#10;     *         a value less than {@code 0} if, over the specified ranges, the&#10;     *         first array is lexicographically less than the second array; and&#10;     *         a value greater than {@code 0} if, over the specified ranges, the&#10;     *         first array is lexicographically greater than the second array&#10;     * @throws IllegalArgumentException&#10;     *         if {@code aFromIndex > aToIndex} or&#10;     *         if {@code bFromIndex > bToIndex}&#10;     * @throws ArrayIndexOutOfBoundsException&#10;     *         if {@code aFromIndex < 0 or aToIndex > a.length} or&#10;     *         if {@code bFromIndex < 0 or bToIndex > b.length}&#10;     * @throws NullPointerException&#10;     *         if either array is {@code null}&#10;     * @since 9&#10;     "
  ]
  node [
    id 2808
    label "public static int compareUnsigned(short[] a, short[] b)"
    type "method"
    comment "&#10;     * Compares two {@code short} arrays lexicographically, numerically treating&#10;     * elements as unsigned.&#10;     *&#10;     * <p>If the two arrays share a common prefix then the lexicographic&#10;     * comparison is the result of comparing two elements, as if by&#10;     * {@link Short#compareUnsigned(short, short)}, at an index within the&#10;     * respective arrays that is the prefix length.&#10;     * Otherwise, one array is a proper prefix of the other and, lexicographic&#10;     * comparison is the result of comparing the two array lengths.&#10;     * (See {@link #mismatch(short[], short[])} for the definition of a common&#10;     * and proper prefix.)&#10;     *&#10;     * <p>A {@code null} array reference is considered lexicographically less&#10;     * than a non-{@code null} array reference.  Two {@code null} array&#10;     * references are considered equal.&#10;     *&#10;     * @apiNote&#10;     * <p>This method behaves as if (for non-{@code null} array references):&#10;     * <pre>{@code&#10;     *     int i = Arrays.mismatch(a, b);&#10;     *     if (i >= 0 &#38;&#38; i < Math.min(a.length, b.length))&#10;     *         return Short.compareUnsigned(a[i], b[i]);&#10;     *     return a.length - b.length;&#10;     * }</pre>&#10;     *&#10;     * @param a the first array to compare&#10;     * @param b the second array to compare&#10;     * @return the value {@code 0} if the first and second array are&#10;     *         equal and contain the same elements in the same order;&#10;     *         a value less than {@code 0} if the first array is&#10;     *         lexicographically less than the second array; and&#10;     *         a value greater than {@code 0} if the first array is&#10;     *         lexicographically greater than the second array&#10;     * @since 9&#10;     "
  ]
  node [
    id 2809
    label "compareUnsigned(short"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2810
    label "public static int compareUnsigned(short[] a, int aFromIndex, int aToIndex, short[] b, int bFromIndex, int bToIndex)"
    type "method"
    comment "&#10;     * Compares two {@code short} arrays lexicographically over the specified&#10;     * ranges, numerically treating elements as unsigned.&#10;     *&#10;     * <p>If the two arrays, over the specified ranges, share a common prefix&#10;     * then the lexicographic comparison is the result of comparing two&#10;     * elements, as if by {@link Short#compareUnsigned(short, short)}, at a&#10;     * relative index within the respective arrays that is the length of the&#10;     * prefix.&#10;     * Otherwise, one array is a proper prefix of the other and, lexicographic&#10;     * comparison is the result of comparing the two range lengths.&#10;     * (See {@link #mismatch(short[], int, int, short[], int, int)} for the&#10;     * definition of a common and proper prefix.)&#10;     *&#10;     * @apiNote&#10;     * <p>This method behaves as if:&#10;     * <pre>{@code&#10;     *     int i = Arrays.mismatch(a, aFromIndex, aToIndex,&#10;     *                             b, bFromIndex, bToIndex);&#10;     *     if (i >= 0 &#38;&#38; i < Math.min(aToIndex - aFromIndex, bToIndex - bFromIndex))&#10;     *         return Short.compareUnsigned(a[aFromIndex + i], b[bFromIndex + i]);&#10;     *     return (aToIndex - aFromIndex) - (bToIndex - bFromIndex);&#10;     * }</pre>&#10;     *&#10;     * @param a the first array to compare&#10;     * @param aFromIndex the index (inclusive) of the first element in the&#10;     *                   first array to be compared&#10;     * @param aToIndex the index (exclusive) of the last element in the&#10;     *                 first array to be compared&#10;     * @param b the second array to compare&#10;     * @param bFromIndex the index (inclusive) of the first element in the&#10;     *                   second array to be compared&#10;     * @param bToIndex the index (exclusive) of the last element in the&#10;     *                 second array to be compared&#10;     * @return the value {@code 0} if, over the specified ranges, the first and&#10;     *         second array are equal and contain the same elements in the same&#10;     *         order;&#10;     *         a value less than {@code 0} if, over the specified ranges, the&#10;     *         first array is lexicographically less than the second array; and&#10;     *         a value greater than {@code 0} if, over the specified ranges, the&#10;     *         first array is lexicographically greater than the second array&#10;     * @throws IllegalArgumentException&#10;     *         if {@code aFromIndex > aToIndex} or&#10;     *         if {@code bFromIndex > bToIndex}&#10;     * @throws ArrayIndexOutOfBoundsException&#10;     *         if {@code aFromIndex < 0 or aToIndex > a.length} or&#10;     *         if {@code bFromIndex < 0 or bToIndex > b.length}&#10;     * @throws NullPointerException&#10;     *         if either array is null&#10;     * @since 9&#10;     "
  ]
  node [
    id 2811
    label "public static int compare(char[] a, char[] b)"
    type "method"
    comment "&#10;     * Compares two {@code char} arrays lexicographically.&#10;     *&#10;     * <p>If the two arrays share a common prefix then the lexicographic&#10;     * comparison is the result of comparing two elements, as if by&#10;     * {@link Character#compare(char, char)}, at an index within the respective&#10;     * arrays that is the prefix length.&#10;     * Otherwise, one array is a proper prefix of the other and, lexicographic&#10;     * comparison is the result of comparing the two array lengths.&#10;     * (See {@link #mismatch(char[], char[])} for the definition of a common and&#10;     * proper prefix.)&#10;     *&#10;     * <p>A {@code null} array reference is considered lexicographically less&#10;     * than a non-{@code null} array reference.  Two {@code null} array&#10;     * references are considered equal.&#10;     *&#10;     * <p>The comparison is consistent with {@link #equals(char[], char[]) equals},&#10;     * more specifically the following holds for arrays {@code a} and {@code b}:&#10;     * <pre>{@code&#10;     *     Arrays.equals(a, b) == (Arrays.compare(a, b) == 0)&#10;     * }</pre>&#10;     *&#10;     * @apiNote&#10;     * <p>This method behaves as if (for non-{@code null} array references):&#10;     * <pre>{@code&#10;     *     int i = Arrays.mismatch(a, b);&#10;     *     if (i >= 0 &#38;&#38; i < Math.min(a.length, b.length))&#10;     *         return Character.compare(a[i], b[i]);&#10;     *     return a.length - b.length;&#10;     * }</pre>&#10;     *&#10;     * @param a the first array to compare&#10;     * @param b the second array to compare&#10;     * @return the value {@code 0} if the first and second array are equal and&#10;     *         contain the same elements in the same order;&#10;     *         a value less than {@code 0} if the first array is&#10;     *         lexicographically less than the second array; and&#10;     *         a value greater than {@code 0} if the first array is&#10;     *         lexicographically greater than the second array&#10;     * @since 9&#10;     "
  ]
  node [
    id 2812
    label "equals(char"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2813
    label "mismatch(char"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2814
    label "compare(char"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2815
    label "public static int compare(char[] a, int aFromIndex, int aToIndex, char[] b, int bFromIndex, int bToIndex)"
    type "method"
    comment "&#10;     * Compares two {@code char} arrays lexicographically over the specified&#10;     * ranges.&#10;     *&#10;     * <p>If the two arrays, over the specified ranges, share a common prefix&#10;     * then the lexicographic comparison is the result of comparing two&#10;     * elements, as if by {@link Character#compare(char, char)}, at a relative&#10;     * index within the respective arrays that is the length of the prefix.&#10;     * Otherwise, one array is a proper prefix of the other and, lexicographic&#10;     * comparison is the result of comparing the two range lengths.&#10;     * (See {@link #mismatch(char[], int, int, char[], int, int)} for the&#10;     * definition of a common and proper prefix.)&#10;     *&#10;     * <p>The comparison is consistent with&#10;     * {@link #equals(char[], int, int, char[], int, int) equals}, more&#10;     * specifically the following holds for arrays {@code a} and {@code b} with&#10;     * specified ranges [{@code aFromIndex}, {@code atoIndex}) and&#10;     * [{@code bFromIndex}, {@code btoIndex}) respectively:&#10;     * <pre>{@code&#10;     *     Arrays.equals(a, aFromIndex, aToIndex, b, bFromIndex, bToIndex) ==&#10;     *         (Arrays.compare(a, aFromIndex, aToIndex, b, bFromIndex, bToIndex) == 0)&#10;     * }</pre>&#10;     *&#10;     * @apiNote&#10;     * <p>This method behaves as if:&#10;     * <pre>{@code&#10;     *     int i = Arrays.mismatch(a, aFromIndex, aToIndex,&#10;     *                             b, bFromIndex, bToIndex);&#10;     *     if (i >= 0 &#38;&#38; i < Math.min(aToIndex - aFromIndex, bToIndex - bFromIndex))&#10;     *         return Character.compare(a[aFromIndex + i], b[bFromIndex + i]);&#10;     *     return (aToIndex - aFromIndex) - (bToIndex - bFromIndex);&#10;     * }</pre>&#10;     *&#10;     * @param a the first array to compare&#10;     * @param aFromIndex the index (inclusive) of the first element in the&#10;     *                   first array to be compared&#10;     * @param aToIndex the index (exclusive) of the last element in the&#10;     *                 first array to be compared&#10;     * @param b the second array to compare&#10;     * @param bFromIndex the index (inclusive) of the first element in the&#10;     *                   second array to be compared&#10;     * @param bToIndex the index (exclusive) of the last element in the&#10;     *                 second array to be compared&#10;     * @return the value {@code 0} if, over the specified ranges, the first and&#10;     *         second array are equal and contain the same elements in the same&#10;     *         order;&#10;     *         a value less than {@code 0} if, over the specified ranges, the&#10;     *         first array is lexicographically less than the second array; and&#10;     *         a value greater than {@code 0} if, over the specified ranges, the&#10;     *         first array is lexicographically greater than the second array&#10;     * @throws IllegalArgumentException&#10;     *         if {@code aFromIndex > aToIndex} or&#10;     *         if {@code bFromIndex > bToIndex}&#10;     * @throws ArrayIndexOutOfBoundsException&#10;     *         if {@code aFromIndex < 0 or aToIndex > a.length} or&#10;     *         if {@code bFromIndex < 0 or bToIndex > b.length}&#10;     * @throws NullPointerException&#10;     *         if either array is {@code null}&#10;     * @since 9&#10;     "
  ]
  node [
    id 2816
    label "public static int compare(int[] a, int[] b)"
    type "method"
    comment "&#10;     * Compares two {@code int} arrays lexicographically.&#10;     *&#10;     * <p>If the two arrays share a common prefix then the lexicographic&#10;     * comparison is the result of comparing two elements, as if by&#10;     * {@link Integer#compare(int, int)}, at an index within the respective&#10;     * arrays that is the prefix length.&#10;     * Otherwise, one array is a proper prefix of the other and, lexicographic&#10;     * comparison is the result of comparing the two array lengths.&#10;     * (See {@link #mismatch(int[], int[])} for the definition of a common and&#10;     * proper prefix.)&#10;     *&#10;     * <p>A {@code null} array reference is considered lexicographically less&#10;     * than a non-{@code null} array reference.  Two {@code null} array&#10;     * references are considered equal.&#10;     *&#10;     * <p>The comparison is consistent with {@link #equals(int[], int[]) equals},&#10;     * more specifically the following holds for arrays {@code a} and {@code b}:&#10;     * <pre>{@code&#10;     *     Arrays.equals(a, b) == (Arrays.compare(a, b) == 0)&#10;     * }</pre>&#10;     *&#10;     * @apiNote&#10;     * <p>This method behaves as if (for non-{@code null} array references):&#10;     * <pre>{@code&#10;     *     int i = Arrays.mismatch(a, b);&#10;     *     if (i >= 0 &#38;&#38; i < Math.min(a.length, b.length))&#10;     *         return Integer.compare(a[i], b[i]);&#10;     *     return a.length - b.length;&#10;     * }</pre>&#10;     *&#10;     * @param a the first array to compare&#10;     * @param b the second array to compare&#10;     * @return the value {@code 0} if the first and second array are equal and&#10;     *         contain the same elements in the same order;&#10;     *         a value less than {@code 0} if the first array is&#10;     *         lexicographically less than the second array; and&#10;     *         a value greater than {@code 0} if the first array is&#10;     *         lexicographically greater than the second array&#10;     * @since 9&#10;     "
  ]
  node [
    id 2817
    label "mismatch(int"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2818
    label "equals(int"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2819
    label "compare(int"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2820
    label "public static int compare(int[] a, int aFromIndex, int aToIndex, int[] b, int bFromIndex, int bToIndex)"
    type "method"
    comment "&#10;     * Compares two {@code int} arrays lexicographically over the specified&#10;     * ranges.&#10;     *&#10;     * <p>If the two arrays, over the specified ranges, share a common prefix&#10;     * then the lexicographic comparison is the result of comparing two&#10;     * elements, as if by {@link Integer#compare(int, int)}, at a relative index&#10;     * within the respective arrays that is the length of the prefix.&#10;     * Otherwise, one array is a proper prefix of the other and, lexicographic&#10;     * comparison is the result of comparing the two range lengths.&#10;     * (See {@link #mismatch(int[], int, int, int[], int, int)} for the&#10;     * definition of a common and proper prefix.)&#10;     *&#10;     * <p>The comparison is consistent with&#10;     * {@link #equals(int[], int, int, int[], int, int) equals}, more&#10;     * specifically the following holds for arrays {@code a} and {@code b} with&#10;     * specified ranges [{@code aFromIndex}, {@code atoIndex}) and&#10;     * [{@code bFromIndex}, {@code btoIndex}) respectively:&#10;     * <pre>{@code&#10;     *     Arrays.equals(a, aFromIndex, aToIndex, b, bFromIndex, bToIndex) ==&#10;     *         (Arrays.compare(a, aFromIndex, aToIndex, b, bFromIndex, bToIndex) == 0)&#10;     * }</pre>&#10;     *&#10;     * @apiNote&#10;     * <p>This method behaves as if:&#10;     * <pre>{@code&#10;     *     int i = Arrays.mismatch(a, aFromIndex, aToIndex,&#10;     *                             b, bFromIndex, bToIndex);&#10;     *     if (i >= 0 &#38;&#38; i < Math.min(aToIndex - aFromIndex, bToIndex - bFromIndex))&#10;     *         return Integer.compare(a[aFromIndex + i], b[bFromIndex + i]);&#10;     *     return (aToIndex - aFromIndex) - (bToIndex - bFromIndex);&#10;     * }</pre>&#10;     *&#10;     * @param a the first array to compare&#10;     * @param aFromIndex the index (inclusive) of the first element in the&#10;     *                   first array to be compared&#10;     * @param aToIndex the index (exclusive) of the last element in the&#10;     *                 first array to be compared&#10;     * @param b the second array to compare&#10;     * @param bFromIndex the index (inclusive) of the first element in the&#10;     *                   second array to be compared&#10;     * @param bToIndex the index (exclusive) of the last element in the&#10;     *                 second array to be compared&#10;     * @return the value {@code 0} if, over the specified ranges, the first and&#10;     *         second array are equal and contain the same elements in the same&#10;     *         order;&#10;     *         a value less than {@code 0} if, over the specified ranges, the&#10;     *         first array is lexicographically less than the second array; and&#10;     *         a value greater than {@code 0} if, over the specified ranges, the&#10;     *         first array is lexicographically greater than the second array&#10;     * @throws IllegalArgumentException&#10;     *         if {@code aFromIndex > aToIndex} or&#10;     *         if {@code bFromIndex > bToIndex}&#10;     * @throws ArrayIndexOutOfBoundsException&#10;     *         if {@code aFromIndex < 0 or aToIndex > a.length} or&#10;     *         if {@code bFromIndex < 0 or bToIndex > b.length}&#10;     * @throws NullPointerException&#10;     *         if either array is {@code null}&#10;     * @since 9&#10;     "
  ]
  node [
    id 2821
    label "public static int compareUnsigned(int[] a, int[] b)"
    type "method"
    comment "&#10;     * Compares two {@code int} arrays lexicographically, numerically treating&#10;     * elements as unsigned.&#10;     *&#10;     * <p>If the two arrays share a common prefix then the lexicographic&#10;     * comparison is the result of comparing two elements, as if by&#10;     * {@link Integer#compareUnsigned(int, int)}, at an index within the&#10;     * respective arrays that is the prefix length.&#10;     * Otherwise, one array is a proper prefix of the other and, lexicographic&#10;     * comparison is the result of comparing the two array lengths.&#10;     * (See {@link #mismatch(int[], int[])} for the definition of a common&#10;     * and proper prefix.)&#10;     *&#10;     * <p>A {@code null} array reference is considered lexicographically less&#10;     * than a non-{@code null} array reference.  Two {@code null} array&#10;     * references are considered equal.&#10;     *&#10;     * @apiNote&#10;     * <p>This method behaves as if (for non-{@code null} array references):&#10;     * <pre>{@code&#10;     *     int i = Arrays.mismatch(a, b);&#10;     *     if (i >= 0 &#38;&#38; i < Math.min(a.length, b.length))&#10;     *         return Integer.compareUnsigned(a[i], b[i]);&#10;     *     return a.length - b.length;&#10;     * }</pre>&#10;     *&#10;     * @param a the first array to compare&#10;     * @param b the second array to compare&#10;     * @return the value {@code 0} if the first and second array are&#10;     *         equal and contain the same elements in the same order;&#10;     *         a value less than {@code 0} if the first array is&#10;     *         lexicographically less than the second array; and&#10;     *         a value greater than {@code 0} if the first array is&#10;     *         lexicographically greater than the second array&#10;     * @since 9&#10;     "
  ]
  node [
    id 2822
    label "compareUnsigned(int"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2823
    label "public static int compareUnsigned(int[] a, int aFromIndex, int aToIndex, int[] b, int bFromIndex, int bToIndex)"
    type "method"
    comment "&#10;     * Compares two {@code int} arrays lexicographically over the specified&#10;     * ranges, numerically treating elements as unsigned.&#10;     *&#10;     * <p>If the two arrays, over the specified ranges, share a common prefix&#10;     * then the lexicographic comparison is the result of comparing two&#10;     * elements, as if by {@link Integer#compareUnsigned(int, int)}, at a&#10;     * relative index within the respective arrays that is the length of the&#10;     * prefix.&#10;     * Otherwise, one array is a proper prefix of the other and, lexicographic&#10;     * comparison is the result of comparing the two range lengths.&#10;     * (See {@link #mismatch(int[], int, int, int[], int, int)} for the&#10;     * definition of a common and proper prefix.)&#10;     *&#10;     * @apiNote&#10;     * <p>This method behaves as if:&#10;     * <pre>{@code&#10;     *     int i = Arrays.mismatch(a, aFromIndex, aToIndex,&#10;     *                             b, bFromIndex, bToIndex);&#10;     *     if (i >= 0 &#38;&#38; i < Math.min(aToIndex - aFromIndex, bToIndex - bFromIndex))&#10;     *         return Integer.compareUnsigned(a[aFromIndex + i], b[bFromIndex + i]);&#10;     *     return (aToIndex - aFromIndex) - (bToIndex - bFromIndex);&#10;     * }</pre>&#10;     *&#10;     * @param a the first array to compare&#10;     * @param aFromIndex the index (inclusive) of the first element in the&#10;     *                   first array to be compared&#10;     * @param aToIndex the index (exclusive) of the last element in the&#10;     *                 first array to be compared&#10;     * @param b the second array to compare&#10;     * @param bFromIndex the index (inclusive) of the first element in the&#10;     *                   second array to be compared&#10;     * @param bToIndex the index (exclusive) of the last element in the&#10;     *                 second array to be compared&#10;     * @return the value {@code 0} if, over the specified ranges, the first and&#10;     *         second array are equal and contain the same elements in the same&#10;     *         order;&#10;     *         a value less than {@code 0} if, over the specified ranges, the&#10;     *         first array is lexicographically less than the second array; and&#10;     *         a value greater than {@code 0} if, over the specified ranges, the&#10;     *         first array is lexicographically greater than the second array&#10;     * @throws IllegalArgumentException&#10;     *         if {@code aFromIndex > aToIndex} or&#10;     *         if {@code bFromIndex > bToIndex}&#10;     * @throws ArrayIndexOutOfBoundsException&#10;     *         if {@code aFromIndex < 0 or aToIndex > a.length} or&#10;     *         if {@code bFromIndex < 0 or bToIndex > b.length}&#10;     * @throws NullPointerException&#10;     *         if either array is null&#10;     * @since 9&#10;     "
  ]
  node [
    id 2824
    label "public static int compare(long[] a, long[] b)"
    type "method"
    comment "&#10;     * Compares two {@code long} arrays lexicographically.&#10;     *&#10;     * <p>If the two arrays share a common prefix then the lexicographic&#10;     * comparison is the result of comparing two elements, as if by&#10;     * {@link Long#compare(long, long)}, at an index within the respective&#10;     * arrays that is the prefix length.&#10;     * Otherwise, one array is a proper prefix of the other and, lexicographic&#10;     * comparison is the result of comparing the two array lengths.&#10;     * (See {@link #mismatch(long[], long[])} for the definition of a common and&#10;     * proper prefix.)&#10;     *&#10;     * <p>A {@code null} array reference is considered lexicographically less&#10;     * than a non-{@code null} array reference.  Two {@code null} array&#10;     * references are considered equal.&#10;     *&#10;     * <p>The comparison is consistent with {@link #equals(long[], long[]) equals},&#10;     * more specifically the following holds for arrays {@code a} and {@code b}:&#10;     * <pre>{@code&#10;     *     Arrays.equals(a, b) == (Arrays.compare(a, b) == 0)&#10;     * }</pre>&#10;     *&#10;     * @apiNote&#10;     * <p>This method behaves as if (for non-{@code null} array references):&#10;     * <pre>{@code&#10;     *     int i = Arrays.mismatch(a, b);&#10;     *     if (i >= 0 &#38;&#38; i < Math.min(a.length, b.length))&#10;     *         return Long.compare(a[i], b[i]);&#10;     *     return a.length - b.length;&#10;     * }</pre>&#10;     *&#10;     * @param a the first array to compare&#10;     * @param b the second array to compare&#10;     * @return the value {@code 0} if the first and second array are equal and&#10;     *         contain the same elements in the same order;&#10;     *         a value less than {@code 0} if the first array is&#10;     *         lexicographically less than the second array; and&#10;     *         a value greater than {@code 0} if the first array is&#10;     *         lexicographically greater than the second array&#10;     * @since 9&#10;     "
  ]
  node [
    id 2825
    label "compare(long"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2826
    label "mismatch(long"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2827
    label "equals(long"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2828
    label "public static int compare(long[] a, int aFromIndex, int aToIndex, long[] b, int bFromIndex, int bToIndex)"
    type "method"
    comment "&#10;     * Compares two {@code long} arrays lexicographically over the specified&#10;     * ranges.&#10;     *&#10;     * <p>If the two arrays, over the specified ranges, share a common prefix&#10;     * then the lexicographic comparison is the result of comparing two&#10;     * elements, as if by {@link Long#compare(long, long)}, at a relative index&#10;     * within the respective arrays that is the length of the prefix.&#10;     * Otherwise, one array is a proper prefix of the other and, lexicographic&#10;     * comparison is the result of comparing the two range lengths.&#10;     * (See {@link #mismatch(long[], int, int, long[], int, int)} for the&#10;     * definition of a common and proper prefix.)&#10;     *&#10;     * <p>The comparison is consistent with&#10;     * {@link #equals(long[], int, int, long[], int, int) equals}, more&#10;     * specifically the following holds for arrays {@code a} and {@code b} with&#10;     * specified ranges [{@code aFromIndex}, {@code atoIndex}) and&#10;     * [{@code bFromIndex}, {@code btoIndex}) respectively:&#10;     * <pre>{@code&#10;     *     Arrays.equals(a, aFromIndex, aToIndex, b, bFromIndex, bToIndex) ==&#10;     *         (Arrays.compare(a, aFromIndex, aToIndex, b, bFromIndex, bToIndex) == 0)&#10;     * }</pre>&#10;     *&#10;     * @apiNote&#10;     * <p>This method behaves as if:&#10;     * <pre>{@code&#10;     *     int i = Arrays.mismatch(a, aFromIndex, aToIndex,&#10;     *                             b, bFromIndex, bToIndex);&#10;     *     if (i >= 0 &#38;&#38; i < Math.min(aToIndex - aFromIndex, bToIndex - bFromIndex))&#10;     *         return Long.compare(a[aFromIndex + i], b[bFromIndex + i]);&#10;     *     return (aToIndex - aFromIndex) - (bToIndex - bFromIndex);&#10;     * }</pre>&#10;     *&#10;     * @param a the first array to compare&#10;     * @param aFromIndex the index (inclusive) of the first element in the&#10;     *                   first array to be compared&#10;     * @param aToIndex the index (exclusive) of the last element in the&#10;     *                 first array to be compared&#10;     * @param b the second array to compare&#10;     * @param bFromIndex the index (inclusive) of the first element in the&#10;     *                   second array to be compared&#10;     * @param bToIndex the index (exclusive) of the last element in the&#10;     *                 second array to be compared&#10;     * @return the value {@code 0} if, over the specified ranges, the first and&#10;     *         second array are equal and contain the same elements in the same&#10;     *         order;&#10;     *         a value less than {@code 0} if, over the specified ranges, the&#10;     *         first array is lexicographically less than the second array; and&#10;     *         a value greater than {@code 0} if, over the specified ranges, the&#10;     *         first array is lexicographically greater than the second array&#10;     * @throws IllegalArgumentException&#10;     *         if {@code aFromIndex > aToIndex} or&#10;     *         if {@code bFromIndex > bToIndex}&#10;     * @throws ArrayIndexOutOfBoundsException&#10;     *         if {@code aFromIndex < 0 or aToIndex > a.length} or&#10;     *         if {@code bFromIndex < 0 or bToIndex > b.length}&#10;     * @throws NullPointerException&#10;     *         if either array is {@code null}&#10;     * @since 9&#10;     "
  ]
  node [
    id 2829
    label "public static int compareUnsigned(long[] a, long[] b)"
    type "method"
    comment "&#10;     * Compares two {@code long} arrays lexicographically, numerically treating&#10;     * elements as unsigned.&#10;     *&#10;     * <p>If the two arrays share a common prefix then the lexicographic&#10;     * comparison is the result of comparing two elements, as if by&#10;     * {@link Long#compareUnsigned(long, long)}, at an index within the&#10;     * respective arrays that is the prefix length.&#10;     * Otherwise, one array is a proper prefix of the other and, lexicographic&#10;     * comparison is the result of comparing the two array lengths.&#10;     * (See {@link #mismatch(long[], long[])} for the definition of a common&#10;     * and proper prefix.)&#10;     *&#10;     * <p>A {@code null} array reference is considered lexicographically less&#10;     * than a non-{@code null} array reference.  Two {@code null} array&#10;     * references are considered equal.&#10;     *&#10;     * @apiNote&#10;     * <p>This method behaves as if (for non-{@code null} array references):&#10;     * <pre>{@code&#10;     *     int i = Arrays.mismatch(a, b);&#10;     *     if (i >= 0 &#38;&#38; i < Math.min(a.length, b.length))&#10;     *         return Long.compareUnsigned(a[i], b[i]);&#10;     *     return a.length - b.length;&#10;     * }</pre>&#10;     *&#10;     * @param a the first array to compare&#10;     * @param b the second array to compare&#10;     * @return the value {@code 0} if the first and second array are&#10;     *         equal and contain the same elements in the same order;&#10;     *         a value less than {@code 0} if the first array is&#10;     *         lexicographically less than the second array; and&#10;     *         a value greater than {@code 0} if the first array is&#10;     *         lexicographically greater than the second array&#10;     * @since 9&#10;     "
  ]
  node [
    id 2830
    label "compareUnsigned(long"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2831
    label "public static int compareUnsigned(long[] a, int aFromIndex, int aToIndex, long[] b, int bFromIndex, int bToIndex)"
    type "method"
    comment "&#10;     * Compares two {@code long} arrays lexicographically over the specified&#10;     * ranges, numerically treating elements as unsigned.&#10;     *&#10;     * <p>If the two arrays, over the specified ranges, share a common prefix&#10;     * then the lexicographic comparison is the result of comparing two&#10;     * elements, as if by {@link Long#compareUnsigned(long, long)}, at a&#10;     * relative index within the respective arrays that is the length of the&#10;     * prefix.&#10;     * Otherwise, one array is a proper prefix of the other and, lexicographic&#10;     * comparison is the result of comparing the two range lengths.&#10;     * (See {@link #mismatch(long[], int, int, long[], int, int)} for the&#10;     * definition of a common and proper prefix.)&#10;     *&#10;     * @apiNote&#10;     * <p>This method behaves as if:&#10;     * <pre>{@code&#10;     *     int i = Arrays.mismatch(a, aFromIndex, aToIndex,&#10;     *                             b, bFromIndex, bToIndex);&#10;     *     if (i >= 0 &#38;&#38; i < Math.min(aToIndex - aFromIndex, bToIndex - bFromIndex))&#10;     *         return Long.compareUnsigned(a[aFromIndex + i], b[bFromIndex + i]);&#10;     *     return (aToIndex - aFromIndex) - (bToIndex - bFromIndex);&#10;     * }</pre>&#10;     *&#10;     * @param a the first array to compare&#10;     * @param aFromIndex the index (inclusive) of the first element in the&#10;     *                   first array to be compared&#10;     * @param aToIndex the index (exclusive) of the last element in the&#10;     *                 first array to be compared&#10;     * @param b the second array to compare&#10;     * @param bFromIndex the index (inclusive) of the first element in the&#10;     *                   second array to be compared&#10;     * @param bToIndex the index (exclusive) of the last element in the&#10;     *                 second array to be compared&#10;     * @return the value {@code 0} if, over the specified ranges, the first and&#10;     *         second array are equal and contain the same elements in the same&#10;     *         order;&#10;     *         a value less than {@code 0} if, over the specified ranges, the&#10;     *         first array is lexicographically less than the second array; and&#10;     *         a value greater than {@code 0} if, over the specified ranges, the&#10;     *         first array is lexicographically greater than the second array&#10;     * @throws IllegalArgumentException&#10;     *         if {@code aFromIndex > aToIndex} or&#10;     *         if {@code bFromIndex > bToIndex}&#10;     * @throws ArrayIndexOutOfBoundsException&#10;     *         if {@code aFromIndex < 0 or aToIndex > a.length} or&#10;     *         if {@code bFromIndex < 0 or bToIndex > b.length}&#10;     * @throws NullPointerException&#10;     *         if either array is null&#10;     * @since 9&#10;     "
  ]
  node [
    id 2832
    label "public static int compare(float[] a, float[] b)"
    type "method"
    comment "&#10;     * Compares two {@code float} arrays lexicographically.&#10;     *&#10;     * <p>If the two arrays share a common prefix then the lexicographic&#10;     * comparison is the result of comparing two elements, as if by&#10;     * {@link Float#compare(float, float)}, at an index within the respective&#10;     * arrays that is the prefix length.&#10;     * Otherwise, one array is a proper prefix of the other and, lexicographic&#10;     * comparison is the result of comparing the two array lengths.&#10;     * (See {@link #mismatch(float[], float[])} for the definition of a common&#10;     * and proper prefix.)&#10;     *&#10;     * <p>A {@code null} array reference is considered lexicographically less&#10;     * than a non-{@code null} array reference.  Two {@code null} array&#10;     * references are considered equal.&#10;     *&#10;     * <p>The comparison is consistent with {@link #equals(float[], float[]) equals},&#10;     * more specifically the following holds for arrays {@code a} and {@code b}:&#10;     * <pre>{@code&#10;     *     Arrays.equals(a, b) == (Arrays.compare(a, b) == 0)&#10;     * }</pre>&#10;     *&#10;     * @apiNote&#10;     * <p>This method behaves as if (for non-{@code null} array references):&#10;     * <pre>{@code&#10;     *     int i = Arrays.mismatch(a, b);&#10;     *     if (i >= 0 &#38;&#38; i < Math.min(a.length, b.length))&#10;     *         return Float.compare(a[i], b[i]);&#10;     *     return a.length - b.length;&#10;     * }</pre>&#10;     *&#10;     * @param a the first array to compare&#10;     * @param b the second array to compare&#10;     * @return the value {@code 0} if the first and second array are equal and&#10;     *         contain the same elements in the same order;&#10;     *         a value less than {@code 0} if the first array is&#10;     *         lexicographically less than the second array; and&#10;     *         a value greater than {@code 0} if the first array is&#10;     *         lexicographically greater than the second array&#10;     * @since 9&#10;     "
  ]
  node [
    id 2833
    label "compare(float"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2834
    label "equals(float"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2835
    label "mismatch(float"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2836
    label "public static int compare(float[] a, int aFromIndex, int aToIndex, float[] b, int bFromIndex, int bToIndex)"
    type "method"
    comment "&#10;     * Compares two {@code float} arrays lexicographically over the specified&#10;     * ranges.&#10;     *&#10;     * <p>If the two arrays, over the specified ranges, share a common prefix&#10;     * then the lexicographic comparison is the result of comparing two&#10;     * elements, as if by {@link Float#compare(float, float)}, at a relative&#10;     * index within the respective arrays that is the length of the prefix.&#10;     * Otherwise, one array is a proper prefix of the other and, lexicographic&#10;     * comparison is the result of comparing the two range lengths.&#10;     * (See {@link #mismatch(float[], int, int, float[], int, int)} for the&#10;     * definition of a common and proper prefix.)&#10;     *&#10;     * <p>The comparison is consistent with&#10;     * {@link #equals(float[], int, int, float[], int, int) equals}, more&#10;     * specifically the following holds for arrays {@code a} and {@code b} with&#10;     * specified ranges [{@code aFromIndex}, {@code atoIndex}) and&#10;     * [{@code bFromIndex}, {@code btoIndex}) respectively:&#10;     * <pre>{@code&#10;     *     Arrays.equals(a, aFromIndex, aToIndex, b, bFromIndex, bToIndex) ==&#10;     *         (Arrays.compare(a, aFromIndex, aToIndex, b, bFromIndex, bToIndex) == 0)&#10;     * }</pre>&#10;     *&#10;     * @apiNote&#10;     * <p>This method behaves as if:&#10;     * <pre>{@code&#10;     *     int i = Arrays.mismatch(a, aFromIndex, aToIndex,&#10;     *                             b, bFromIndex, bToIndex);&#10;     *     if (i >= 0 &#38;&#38; i < Math.min(aToIndex - aFromIndex, bToIndex - bFromIndex))&#10;     *         return Float.compare(a[aFromIndex + i], b[bFromIndex + i]);&#10;     *     return (aToIndex - aFromIndex) - (bToIndex - bFromIndex);&#10;     * }</pre>&#10;     *&#10;     * @param a the first array to compare&#10;     * @param aFromIndex the index (inclusive) of the first element in the&#10;     *                   first array to be compared&#10;     * @param aToIndex the index (exclusive) of the last element in the&#10;     *                 first array to be compared&#10;     * @param b the second array to compare&#10;     * @param bFromIndex the index (inclusive) of the first element in the&#10;     *                   second array to be compared&#10;     * @param bToIndex the index (exclusive) of the last element in the&#10;     *                 second array to be compared&#10;     * @return the value {@code 0} if, over the specified ranges, the first and&#10;     *         second array are equal and contain the same elements in the same&#10;     *         order;&#10;     *         a value less than {@code 0} if, over the specified ranges, the&#10;     *         first array is lexicographically less than the second array; and&#10;     *         a value greater than {@code 0} if, over the specified ranges, the&#10;     *         first array is lexicographically greater than the second array&#10;     * @throws IllegalArgumentException&#10;     *         if {@code aFromIndex > aToIndex} or&#10;     *         if {@code bFromIndex > bToIndex}&#10;     * @throws ArrayIndexOutOfBoundsException&#10;     *         if {@code aFromIndex < 0 or aToIndex > a.length} or&#10;     *         if {@code bFromIndex < 0 or bToIndex > b.length}&#10;     * @throws NullPointerException&#10;     *         if either array is {@code null}&#10;     * @since 9&#10;     "
  ]
  node [
    id 2837
    label "public static int compare(double[] a, double[] b)"
    type "method"
    comment "&#10;     * Compares two {@code double} arrays lexicographically.&#10;     *&#10;     * <p>If the two arrays share a common prefix then the lexicographic&#10;     * comparison is the result of comparing two elements, as if by&#10;     * {@link Double#compare(double, double)}, at an index within the respective&#10;     * arrays that is the prefix length.&#10;     * Otherwise, one array is a proper prefix of the other and, lexicographic&#10;     * comparison is the result of comparing the two array lengths.&#10;     * (See {@link #mismatch(double[], double[])} for the definition of a common&#10;     * and proper prefix.)&#10;     *&#10;     * <p>A {@code null} array reference is considered lexicographically less&#10;     * than a non-{@code null} array reference.  Two {@code null} array&#10;     * references are considered equal.&#10;     *&#10;     * <p>The comparison is consistent with {@link #equals(double[], double[]) equals},&#10;     * more specifically the following holds for arrays {@code a} and {@code b}:&#10;     * <pre>{@code&#10;     *     Arrays.equals(a, b) == (Arrays.compare(a, b) == 0)&#10;     * }</pre>&#10;     *&#10;     * @apiNote&#10;     * <p>This method behaves as if (for non-{@code null} array references):&#10;     * <pre>{@code&#10;     *     int i = Arrays.mismatch(a, b);&#10;     *     if (i >= 0 &#38;&#38; i < Math.min(a.length, b.length))&#10;     *         return Double.compare(a[i], b[i]);&#10;     *     return a.length - b.length;&#10;     * }</pre>&#10;     *&#10;     * @param a the first array to compare&#10;     * @param b the second array to compare&#10;     * @return the value {@code 0} if the first and second array are equal and&#10;     *         contain the same elements in the same order;&#10;     *         a value less than {@code 0} if the first array is&#10;     *         lexicographically less than the second array; and&#10;     *         a value greater than {@code 0} if the first array is&#10;     *         lexicographically greater than the second array&#10;     * @since 9&#10;     "
  ]
  node [
    id 2838
    label "equals(double"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2839
    label "mismatch(double"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2840
    label "public static int compare(double[] a, int aFromIndex, int aToIndex, double[] b, int bFromIndex, int bToIndex)"
    type "method"
    comment "&#10;     * Compares two {@code double} arrays lexicographically over the specified&#10;     * ranges.&#10;     *&#10;     * <p>If the two arrays, over the specified ranges, share a common prefix&#10;     * then the lexicographic comparison is the result of comparing two&#10;     * elements, as if by {@link Double#compare(double, double)}, at a relative&#10;     * index within the respective arrays that is the length of the prefix.&#10;     * Otherwise, one array is a proper prefix of the other and, lexicographic&#10;     * comparison is the result of comparing the two range lengths.&#10;     * (See {@link #mismatch(double[], int, int, double[], int, int)} for the&#10;     * definition of a common and proper prefix.)&#10;     *&#10;     * <p>The comparison is consistent with&#10;     * {@link #equals(double[], int, int, double[], int, int) equals}, more&#10;     * specifically the following holds for arrays {@code a} and {@code b} with&#10;     * specified ranges [{@code aFromIndex}, {@code atoIndex}) and&#10;     * [{@code bFromIndex}, {@code btoIndex}) respectively:&#10;     * <pre>{@code&#10;     *     Arrays.equals(a, aFromIndex, aToIndex, b, bFromIndex, bToIndex) ==&#10;     *         (Arrays.compare(a, aFromIndex, aToIndex, b, bFromIndex, bToIndex) == 0)&#10;     * }</pre>&#10;     *&#10;     * @apiNote&#10;     * <p>This method behaves as if:&#10;     * <pre>{@code&#10;     *     int i = Arrays.mismatch(a, aFromIndex, aToIndex,&#10;     *                             b, bFromIndex, bToIndex);&#10;     *     if (i >= 0 &#38;&#38; i < Math.min(aToIndex - aFromIndex, bToIndex - bFromIndex))&#10;     *         return Double.compare(a[aFromIndex + i], b[bFromIndex + i]);&#10;     *     return (aToIndex - aFromIndex) - (bToIndex - bFromIndex);&#10;     * }</pre>&#10;     *&#10;     * @param a the first array to compare&#10;     * @param aFromIndex the index (inclusive) of the first element in the&#10;     *                   first array to be compared&#10;     * @param aToIndex the index (exclusive) of the last element in the&#10;     *                 first array to be compared&#10;     * @param b the second array to compare&#10;     * @param bFromIndex the index (inclusive) of the first element in the&#10;     *                   second array to be compared&#10;     * @param bToIndex the index (exclusive) of the last element in the&#10;     *                 second array to be compared&#10;     * @return the value {@code 0} if, over the specified ranges, the first and&#10;     *         second array are equal and contain the same elements in the same&#10;     *         order;&#10;     *         a value less than {@code 0} if, over the specified ranges, the&#10;     *         first array is lexicographically less than the second array; and&#10;     *         a value greater than {@code 0} if, over the specified ranges, the&#10;     *         first array is lexicographically greater than the second array&#10;     * @throws IllegalArgumentException&#10;     *         if {@code aFromIndex > aToIndex} or&#10;     *         if {@code bFromIndex > bToIndex}&#10;     * @throws ArrayIndexOutOfBoundsException&#10;     *         if {@code aFromIndex < 0 or aToIndex > a.length} or&#10;     *         if {@code bFromIndex < 0 or bToIndex > b.length}&#10;     * @throws NullPointerException&#10;     *         if either array is {@code null}&#10;     * @since 9&#10;     "
  ]
  node [
    id 2841
    label "public static int compare(T[] a, T[] b)"
    type "method"
    comment "&#10;     * Compares two {@code Object} arrays, within comparable elements,&#10;     * lexicographically.&#10;     *&#10;     * <p>If the two arrays share a common prefix then the lexicographic&#10;     * comparison is the result of comparing two elements of type {@code T} at&#10;     * an index {@code i} within the respective arrays that is the prefix&#10;     * length, as if by:&#10;     * <pre>{@code&#10;     *     Comparator.nullsFirst(Comparator.<T>naturalOrder()).&#10;     *         compare(a[i], b[i])&#10;     * }</pre>&#10;     * Otherwise, one array is a proper prefix of the other and, lexicographic&#10;     * comparison is the result of comparing the two array lengths.&#10;     * (See {@link #mismatch(Object[], Object[])} for the definition of a common&#10;     * and proper prefix.)&#10;     *&#10;     * <p>A {@code null} array reference is considered lexicographically less&#10;     * than a non-{@code null} array reference. Two {@code null} array&#10;     * references are considered equal.&#10;     * A {@code null} array element is considered lexicographically less than a&#10;     * non-{@code null} array element. Two {@code null} array elements are&#10;     * considered equal.&#10;     *&#10;     * <p>The comparison is consistent with {@link #equals(Object[], Object[]) equals},&#10;     * more specifically the following holds for arrays {@code a} and {@code b}:&#10;     * <pre>{@code&#10;     *     Arrays.equals(a, b) == (Arrays.compare(a, b) == 0)&#10;     * }</pre>&#10;     *&#10;     * @apiNote&#10;     * <p>This method behaves as if (for non-{@code null} array references&#10;     * and elements):&#10;     * <pre>{@code&#10;     *     int i = Arrays.mismatch(a, b);&#10;     *     if (i >= 0 &#38;&#38; i < Math.min(a.length, b.length))&#10;     *         return a[i].compareTo(b[i]);&#10;     *     return a.length - b.length;&#10;     * }</pre>&#10;     *&#10;     * @param a the first array to compare&#10;     * @param b the second array to compare&#10;     * @param <T> the type of comparable array elements&#10;     * @return the value {@code 0} if the first and second array are equal and&#10;     *         contain the same elements in the same order;&#10;     *         a value less than {@code 0} if the first array is&#10;     *         lexicographically less than the second array; and&#10;     *         a value greater than {@code 0} if the first array is&#10;     *         lexicographically greater than the second array&#10;     * @since 9&#10;     "
  ]
  node [
    id 2842
    label "mismatch(Object"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2843
    label "public static int compare(T[] a, int aFromIndex, int aToIndex, T[] b, int bFromIndex, int bToIndex)"
    type "method"
    comment "&#10;     * Compares two {@code Object} arrays lexicographically over the specified&#10;     * ranges.&#10;     *&#10;     * <p>If the two arrays, over the specified ranges, share a common prefix&#10;     * then the lexicographic comparison is the result of comparing two&#10;     * elements of type {@code T} at a relative index {@code i} within the&#10;     * respective arrays that is the prefix length, as if by:&#10;     * <pre>{@code&#10;     *     Comparator.nullsFirst(Comparator.<T>naturalOrder()).&#10;     *         compare(a[aFromIndex + i, b[bFromIndex + i])&#10;     * }</pre>&#10;     * Otherwise, one array is a proper prefix of the other and, lexicographic&#10;     * comparison is the result of comparing the two range lengths.&#10;     * (See {@link #mismatch(Object[], int, int, Object[], int, int)} for the&#10;     * definition of a common and proper prefix.)&#10;     *&#10;     * <p>The comparison is consistent with&#10;     * {@link #equals(Object[], int, int, Object[], int, int) equals}, more&#10;     * specifically the following holds for arrays {@code a} and {@code b} with&#10;     * specified ranges [{@code aFromIndex}, {@code atoIndex}) and&#10;     * [{@code bFromIndex}, {@code btoIndex}) respectively:&#10;     * <pre>{@code&#10;     *     Arrays.equals(a, aFromIndex, aToIndex, b, bFromIndex, bToIndex) ==&#10;     *         (Arrays.compare(a, aFromIndex, aToIndex, b, bFromIndex, bToIndex) == 0)&#10;     * }</pre>&#10;     *&#10;     * @apiNote&#10;     * <p>This method behaves as if (for non-{@code null} array elements):&#10;     * <pre>{@code&#10;     *     int i = Arrays.mismatch(a, aFromIndex, aToIndex,&#10;     *                             b, bFromIndex, bToIndex);&#10;     *     if (i >= 0 &#38;&#38; i < Math.min(aToIndex - aFromIndex, bToIndex - bFromIndex))&#10;     *         return a[aFromIndex + i].compareTo(b[bFromIndex + i]);&#10;     *     return (aToIndex - aFromIndex) - (bToIndex - bFromIndex);&#10;     * }</pre>&#10;     *&#10;     * @param a the first array to compare&#10;     * @param aFromIndex the index (inclusive) of the first element in the&#10;     *                   first array to be compared&#10;     * @param aToIndex the index (exclusive) of the last element in the&#10;     *                 first array to be compared&#10;     * @param b the second array to compare&#10;     * @param bFromIndex the index (inclusive) of the first element in the&#10;     *                   second array to be compared&#10;     * @param bToIndex the index (exclusive) of the last element in the&#10;     *                 second array to be compared&#10;     * @param <T> the type of comparable array elements&#10;     * @return the value {@code 0} if, over the specified ranges, the first and&#10;     *         second array are equal and contain the same elements in the same&#10;     *         order;&#10;     *         a value less than {@code 0} if, over the specified ranges, the&#10;     *         first array is lexicographically less than the second array; and&#10;     *         a value greater than {@code 0} if, over the specified ranges, the&#10;     *         first array is lexicographically greater than the second array&#10;     * @throws IllegalArgumentException&#10;     *         if {@code aFromIndex > aToIndex} or&#10;     *         if {@code bFromIndex > bToIndex}&#10;     * @throws ArrayIndexOutOfBoundsException&#10;     *         if {@code aFromIndex < 0 or aToIndex > a.length} or&#10;     *         if {@code bFromIndex < 0 or bToIndex > b.length}&#10;     * @throws NullPointerException&#10;     *         if either array is {@code null}&#10;     * @since 9&#10;     "
  ]
  node [
    id 2844
    label "public static int compare(T[] a, T[] b, Comparator<? super T> cmp)"
    type "method"
    comment "&#10;     * Compares two {@code Object} arrays lexicographically using a specified&#10;     * comparator.&#10;     *&#10;     * <p>If the two arrays share a common prefix then the lexicographic&#10;     * comparison is the result of comparing with the specified comparator two&#10;     * elements at an index within the respective arrays that is the prefix&#10;     * length.&#10;     * Otherwise, one array is a proper prefix of the other and, lexicographic&#10;     * comparison is the result of comparing the two array lengths.&#10;     * (See {@link #mismatch(Object[], Object[])} for the definition of a common&#10;     * and proper prefix.)&#10;     *&#10;     * <p>A {@code null} array reference is considered lexicographically less&#10;     * than a non-{@code null} array reference.  Two {@code null} array&#10;     * references are considered equal.&#10;     *&#10;     * @apiNote&#10;     * <p>This method behaves as if (for non-{@code null} array references):&#10;     * <pre>{@code&#10;     *     int i = Arrays.mismatch(a, b, cmp);&#10;     *     if (i >= 0 &#38;&#38; i < Math.min(a.length, b.length))&#10;     *         return cmp.compare(a[i], b[i]);&#10;     *     return a.length - b.length;&#10;     * }</pre>&#10;     *&#10;     * @param a the first array to compare&#10;     * @param b the second array to compare&#10;     * @param cmp the comparator to compare array elements&#10;     * @param <T> the type of array elements&#10;     * @return the value {@code 0} if the first and second array are equal and&#10;     *         contain the same elements in the same order;&#10;     *         a value less than {@code 0} if the first array is&#10;     *         lexicographically less than the second array; and&#10;     *         a value greater than {@code 0} if the first array is&#10;     *         lexicographically greater than the second array&#10;     * @throws NullPointerException if the comparator is {@code null}&#10;     * @since 9&#10;     "
  ]
  node [
    id 2845
    label "public static int compare(T[] a, int aFromIndex, int aToIndex, T[] b, int bFromIndex, int bToIndex, Comparator<? super T> cmp)"
    type "method"
    comment "&#10;     * Compares two {@code Object} arrays lexicographically over the specified&#10;     * ranges.&#10;     *&#10;     * <p>If the two arrays, over the specified ranges, share a common prefix&#10;     * then the lexicographic comparison is the result of comparing with the&#10;     * specified comparator two elements at a relative index within the&#10;     * respective arrays that is the prefix length.&#10;     * Otherwise, one array is a proper prefix of the other and, lexicographic&#10;     * comparison is the result of comparing the two range lengths.&#10;     * (See {@link #mismatch(Object[], int, int, Object[], int, int)} for the&#10;     * definition of a common and proper prefix.)&#10;     *&#10;     * @apiNote&#10;     * <p>This method behaves as if (for non-{@code null} array elements):&#10;     * <pre>{@code&#10;     *     int i = Arrays.mismatch(a, aFromIndex, aToIndex,&#10;     *                             b, bFromIndex, bToIndex, cmp);&#10;     *     if (i >= 0 &#38;&#38; i < Math.min(aToIndex - aFromIndex, bToIndex - bFromIndex))&#10;     *         return cmp.compare(a[aFromIndex + i], b[bFromIndex + i]);&#10;     *     return (aToIndex - aFromIndex) - (bToIndex - bFromIndex);&#10;     * }</pre>&#10;     *&#10;     * @param a the first array to compare&#10;     * @param aFromIndex the index (inclusive) of the first element in the&#10;     *                   first array to be compared&#10;     * @param aToIndex the index (exclusive) of the last element in the&#10;     *                 first array to be compared&#10;     * @param b the second array to compare&#10;     * @param bFromIndex the index (inclusive) of the first element in the&#10;     *                   second array to be compared&#10;     * @param bToIndex the index (exclusive) of the last element in the&#10;     *                 second array to be compared&#10;     * @param cmp the comparator to compare array elements&#10;     * @param <T> the type of array elements&#10;     * @return the value {@code 0} if, over the specified ranges, the first and&#10;     *         second array are equal and contain the same elements in the same&#10;     *         order;&#10;     *         a value less than {@code 0} if, over the specified ranges, the&#10;     *         first array is lexicographically less than the second array; and&#10;     *         a value greater than {@code 0} if, over the specified ranges, the&#10;     *         first array is lexicographically greater than the second array&#10;     * @throws IllegalArgumentException&#10;     *         if {@code aFromIndex > aToIndex} or&#10;     *         if {@code bFromIndex > bToIndex}&#10;     * @throws ArrayIndexOutOfBoundsException&#10;     *         if {@code aFromIndex < 0 or aToIndex > a.length} or&#10;     *         if {@code bFromIndex < 0 or bToIndex > b.length}&#10;     * @throws NullPointerException&#10;     *         if either array or the comparator is {@code null}&#10;     * @since 9&#10;     "
  ]
  node [
    id 2846
    label "public static int mismatch(boolean[] a, boolean[] b)"
    type "method"
    comment "&#10;     * Finds and returns the index of the first mismatch between two&#10;     * {@code boolean} arrays, otherwise return -1 if no mismatch is found.  The&#10;     * index will be in the range of 0 (inclusive) up to the length (inclusive)&#10;     * of the smaller array.&#10;     *&#10;     * <p>If the two arrays share a common prefix then the returned index is the&#10;     * length of the common prefix and it follows that there is a mismatch&#10;     * between the two elements at that index within the respective arrays.&#10;     * If one array is a proper prefix of the other then the returned index is&#10;     * the length of the smaller array and it follows that the index is only&#10;     * valid for the larger array.&#10;     * Otherwise, there is no mismatch.&#10;     *&#10;     * <p>Two non-{@code null} arrays, {@code a} and {@code b}, share a common&#10;     * prefix of length {@code pl} if the following expression is true:&#10;     * <pre>{@code&#10;     *     pl >= 0 &#38;&#38;&#10;     *     pl < Math.min(a.length, b.length) &#38;&#38;&#10;     *     Arrays.equals(a, 0, pl, b, 0, pl) &#38;&#38;&#10;     *     a[pl] != b[pl]&#10;     * }</pre>&#10;     * Note that a common prefix length of {@code 0} indicates that the first&#10;     * elements from each array mismatch.&#10;     *&#10;     * <p>Two non-{@code null} arrays, {@code a} and {@code b}, share a proper&#10;     * prefix if the following expression is true:&#10;     * <pre>{@code&#10;     *     a.length != b.length &#38;&#38;&#10;     *     Arrays.equals(a, 0, Math.min(a.length, b.length),&#10;     *                   b, 0, Math.min(a.length, b.length))&#10;     * }</pre>&#10;     *&#10;     * @param a the first array to be tested for a mismatch&#10;     * @param b the second array to be tested for a mismatch&#10;     * @return the index of the first mismatch between the two arrays,&#10;     *         otherwise {@code -1}.&#10;     * @throws NullPointerException&#10;     *         if either array is {@code null}&#10;     * @since 9&#10;     "
  ]
  node [
    id 2847
    label "public static int mismatch(boolean[] a, int aFromIndex, int aToIndex, boolean[] b, int bFromIndex, int bToIndex)"
    type "method"
    comment "&#10;     * Finds and returns the relative index of the first mismatch between two&#10;     * {@code boolean} arrays over the specified ranges, otherwise return -1 if&#10;     * no mismatch is found.  The index will be in the range of 0 (inclusive) up&#10;     * to the length (inclusive) of the smaller range.&#10;     *&#10;     * <p>If the two arrays, over the specified ranges, share a common prefix&#10;     * then the returned relative index is the length of the common prefix and&#10;     * it follows that there is a mismatch between the two elements at that&#10;     * relative index within the respective arrays.&#10;     * If one array is a proper prefix of the other, over the specified ranges,&#10;     * then the returned relative index is the length of the smaller range and&#10;     * it follows that the relative index is only valid for the array with the&#10;     * larger range.&#10;     * Otherwise, there is no mismatch.&#10;     *&#10;     * <p>Two non-{@code null} arrays, {@code a} and {@code b} with specified&#10;     * ranges [{@code aFromIndex}, {@code atoIndex}) and&#10;     * [{@code bFromIndex}, {@code btoIndex}) respectively, share a common&#10;     * prefix of length {@code pl} if the following expression is true:&#10;     * <pre>{@code&#10;     *     pl >= 0 &#38;&#38;&#10;     *     pl < Math.min(aToIndex - aFromIndex, bToIndex - bFromIndex) &#38;&#38;&#10;     *     Arrays.equals(a, aFromIndex, aFromIndex + pl, b, bFromIndex, bFromIndex + pl) &#38;&#38;&#10;     *     a[aFromIndex + pl] != b[bFromIndex + pl]&#10;     * }</pre>&#10;     * Note that a common prefix length of {@code 0} indicates that the first&#10;     * elements from each array mismatch.&#10;     *&#10;     * <p>Two non-{@code null} arrays, {@code a} and {@code b} with specified&#10;     * ranges [{@code aFromIndex}, {@code atoIndex}) and&#10;     * [{@code bFromIndex}, {@code btoIndex}) respectively, share a proper&#10;     * prefix if the following expression is true:&#10;     * <pre>{@code&#10;     *     (aToIndex - aFromIndex) != (bToIndex - bFromIndex) &#38;&#38;&#10;     *     Arrays.equals(a, 0, Math.min(aToIndex - aFromIndex, bToIndex - bFromIndex),&#10;     *                   b, 0, Math.min(aToIndex - aFromIndex, bToIndex - bFromIndex))&#10;     * }</pre>&#10;     *&#10;     * @param a the first array to be tested for a mismatch&#10;     * @param aFromIndex the index (inclusive) of the first element in the&#10;     *                   first array to be tested&#10;     * @param aToIndex the index (exclusive) of the last element in the&#10;     *                 first array to be tested&#10;     * @param b the second array to be tested for a mismatch&#10;     * @param bFromIndex the index (inclusive) of the first element in the&#10;     *                   second array to be tested&#10;     * @param bToIndex the index (exclusive) of the last element in the&#10;     *                 second array to be tested&#10;     * @return the relative index of the first mismatch between the two arrays&#10;     *         over the specified ranges, otherwise {@code -1}.&#10;     * @throws IllegalArgumentException&#10;     *         if {@code aFromIndex > aToIndex} or&#10;     *         if {@code bFromIndex > bToIndex}&#10;     * @throws ArrayIndexOutOfBoundsException&#10;     *         if {@code aFromIndex < 0 or aToIndex > a.length} or&#10;     *         if {@code bFromIndex < 0 or bToIndex > b.length}&#10;     * @throws NullPointerException&#10;     *         if either array is {@code null}&#10;     * @since 9&#10;     "
  ]
  node [
    id 2848
    label "public static int mismatch(byte[] a, byte[] b)"
    type "method"
    comment "&#10;     * Finds and returns the index of the first mismatch between two {@code byte}&#10;     * arrays, otherwise return -1 if no mismatch is found.  The index will be&#10;     * in the range of 0 (inclusive) up to the length (inclusive) of the smaller&#10;     * array.&#10;     *&#10;     * <p>If the two arrays share a common prefix then the returned index is the&#10;     * length of the common prefix and it follows that there is a mismatch&#10;     * between the two elements at that index within the respective arrays.&#10;     * If one array is a proper prefix of the other then the returned index is&#10;     * the length of the smaller array and it follows that the index is only&#10;     * valid for the larger array.&#10;     * Otherwise, there is no mismatch.&#10;     *&#10;     * <p>Two non-{@code null} arrays, {@code a} and {@code b}, share a common&#10;     * prefix of length {@code pl} if the following expression is true:&#10;     * <pre>{@code&#10;     *     pl >= 0 &#38;&#38;&#10;     *     pl < Math.min(a.length, b.length) &#38;&#38;&#10;     *     Arrays.equals(a, 0, pl, b, 0, pl) &#38;&#38;&#10;     *     a[pl] != b[pl]&#10;     * }</pre>&#10;     * Note that a common prefix length of {@code 0} indicates that the first&#10;     * elements from each array mismatch.&#10;     *&#10;     * <p>Two non-{@code null} arrays, {@code a} and {@code b}, share a proper&#10;     * prefix if the following expression is true:&#10;     * <pre>{@code&#10;     *     a.length != b.length &#38;&#38;&#10;     *     Arrays.equals(a, 0, Math.min(a.length, b.length),&#10;     *                   b, 0, Math.min(a.length, b.length))&#10;     * }</pre>&#10;     *&#10;     * @param a the first array to be tested for a mismatch&#10;     * @param b the second array to be tested for a mismatch&#10;     * @return the index of the first mismatch between the two arrays,&#10;     *         otherwise {@code -1}.&#10;     * @throws NullPointerException&#10;     *         if either array is {@code null}&#10;     * @since 9&#10;     "
  ]
  node [
    id 2849
    label "public static int mismatch(byte[] a, int aFromIndex, int aToIndex, byte[] b, int bFromIndex, int bToIndex)"
    type "method"
    comment "&#10;     * Finds and returns the relative index of the first mismatch between two&#10;     * {@code byte} arrays over the specified ranges, otherwise return -1 if no&#10;     * mismatch is found.  The index will be in the range of 0 (inclusive) up to&#10;     * the length (inclusive) of the smaller range.&#10;     *&#10;     * <p>If the two arrays, over the specified ranges, share a common prefix&#10;     * then the returned relative index is the length of the common prefix and&#10;     * it follows that there is a mismatch between the two elements at that&#10;     * relative index within the respective arrays.&#10;     * If one array is a proper prefix of the other, over the specified ranges,&#10;     * then the returned relative index is the length of the smaller range and&#10;     * it follows that the relative index is only valid for the array with the&#10;     * larger range.&#10;     * Otherwise, there is no mismatch.&#10;     *&#10;     * <p>Two non-{@code null} arrays, {@code a} and {@code b} with specified&#10;     * ranges [{@code aFromIndex}, {@code atoIndex}) and&#10;     * [{@code bFromIndex}, {@code btoIndex}) respectively, share a common&#10;     * prefix of length {@code pl} if the following expression is true:&#10;     * <pre>{@code&#10;     *     pl >= 0 &#38;&#38;&#10;     *     pl < Math.min(aToIndex - aFromIndex, bToIndex - bFromIndex) &#38;&#38;&#10;     *     Arrays.equals(a, aFromIndex, aFromIndex + pl, b, bFromIndex, bFromIndex + pl) &#38;&#38;&#10;     *     a[aFromIndex + pl] != b[bFromIndex + pl]&#10;     * }</pre>&#10;     * Note that a common prefix length of {@code 0} indicates that the first&#10;     * elements from each array mismatch.&#10;     *&#10;     * <p>Two non-{@code null} arrays, {@code a} and {@code b} with specified&#10;     * ranges [{@code aFromIndex}, {@code atoIndex}) and&#10;     * [{@code bFromIndex}, {@code btoIndex}) respectively, share a proper&#10;     * prefix if the following expression is true:&#10;     * <pre>{@code&#10;     *     (aToIndex - aFromIndex) != (bToIndex - bFromIndex) &#38;&#38;&#10;     *     Arrays.equals(a, 0, Math.min(aToIndex - aFromIndex, bToIndex - bFromIndex),&#10;     *                   b, 0, Math.min(aToIndex - aFromIndex, bToIndex - bFromIndex))&#10;     * }</pre>&#10;     *&#10;     * @param a the first array to be tested for a mismatch&#10;     * @param aFromIndex the index (inclusive) of the first element in the&#10;     *                   first array to be tested&#10;     * @param aToIndex the index (exclusive) of the last element in the&#10;     *                 first array to be tested&#10;     * @param b the second array to be tested for a mismatch&#10;     * @param bFromIndex the index (inclusive) of the first element in the&#10;     *                   second array to be tested&#10;     * @param bToIndex the index (exclusive) of the last element in the&#10;     *                 second array to be tested&#10;     * @return the relative index of the first mismatch between the two arrays&#10;     *         over the specified ranges, otherwise {@code -1}.&#10;     * @throws IllegalArgumentException&#10;     *         if {@code aFromIndex > aToIndex} or&#10;     *         if {@code bFromIndex > bToIndex}&#10;     * @throws ArrayIndexOutOfBoundsException&#10;     *         if {@code aFromIndex < 0 or aToIndex > a.length} or&#10;     *         if {@code bFromIndex < 0 or bToIndex > b.length}&#10;     * @throws NullPointerException&#10;     *         if either array is {@code null}&#10;     * @since 9&#10;     "
  ]
  node [
    id 2850
    label "public static int mismatch(char[] a, char[] b)"
    type "method"
    comment "&#10;     * Finds and returns the index of the first mismatch between two {@code char}&#10;     * arrays, otherwise return -1 if no mismatch is found.  The index will be&#10;     * in the range of 0 (inclusive) up to the length (inclusive) of the smaller&#10;     * array.&#10;     *&#10;     * <p>If the two arrays share a common prefix then the returned index is the&#10;     * length of the common prefix and it follows that there is a mismatch&#10;     * between the two elements at that index within the respective arrays.&#10;     * If one array is a proper prefix of the other then the returned index is&#10;     * the length of the smaller array and it follows that the index is only&#10;     * valid for the larger array.&#10;     * Otherwise, there is no mismatch.&#10;     *&#10;     * <p>Two non-{@code null} arrays, {@code a} and {@code b}, share a common&#10;     * prefix of length {@code pl} if the following expression is true:&#10;     * <pre>{@code&#10;     *     pl >= 0 &#38;&#38;&#10;     *     pl < Math.min(a.length, b.length) &#38;&#38;&#10;     *     Arrays.equals(a, 0, pl, b, 0, pl) &#38;&#38;&#10;     *     a[pl] != b[pl]&#10;     * }</pre>&#10;     * Note that a common prefix length of {@code 0} indicates that the first&#10;     * elements from each array mismatch.&#10;     *&#10;     * <p>Two non-{@code null} arrays, {@code a} and {@code b}, share a proper&#10;     * prefix if the following expression is true:&#10;     * <pre>{@code&#10;     *     a.length != b.length &#38;&#38;&#10;     *     Arrays.equals(a, 0, Math.min(a.length, b.length),&#10;     *                   b, 0, Math.min(a.length, b.length))&#10;     * }</pre>&#10;     *&#10;     * @param a the first array to be tested for a mismatch&#10;     * @param b the second array to be tested for a mismatch&#10;     * @return the index of the first mismatch between the two arrays,&#10;     *         otherwise {@code -1}.&#10;     * @throws NullPointerException&#10;     *         if either array is {@code null}&#10;     * @since 9&#10;     "
  ]
  node [
    id 2851
    label "public static int mismatch(char[] a, int aFromIndex, int aToIndex, char[] b, int bFromIndex, int bToIndex)"
    type "method"
    comment "&#10;     * Finds and returns the relative index of the first mismatch between two&#10;     * {@code char} arrays over the specified ranges, otherwise return -1 if no&#10;     * mismatch is found.  The index will be in the range of 0 (inclusive) up to&#10;     * the length (inclusive) of the smaller range.&#10;     *&#10;     * <p>If the two arrays, over the specified ranges, share a common prefix&#10;     * then the returned relative index is the length of the common prefix and&#10;     * it follows that there is a mismatch between the two elements at that&#10;     * relative index within the respective arrays.&#10;     * If one array is a proper prefix of the other, over the specified ranges,&#10;     * then the returned relative index is the length of the smaller range and&#10;     * it follows that the relative index is only valid for the array with the&#10;     * larger range.&#10;     * Otherwise, there is no mismatch.&#10;     *&#10;     * <p>Two non-{@code null} arrays, {@code a} and {@code b} with specified&#10;     * ranges [{@code aFromIndex}, {@code atoIndex}) and&#10;     * [{@code bFromIndex}, {@code btoIndex}) respectively, share a common&#10;     * prefix of length {@code pl} if the following expression is true:&#10;     * <pre>{@code&#10;     *     pl >= 0 &#38;&#38;&#10;     *     pl < Math.min(aToIndex - aFromIndex, bToIndex - bFromIndex) &#38;&#38;&#10;     *     Arrays.equals(a, aFromIndex, aFromIndex + pl, b, bFromIndex, bFromIndex + pl) &#38;&#38;&#10;     *     a[aFromIndex + pl] != b[bFromIndex + pl]&#10;     * }</pre>&#10;     * Note that a common prefix length of {@code 0} indicates that the first&#10;     * elements from each array mismatch.&#10;     *&#10;     * <p>Two non-{@code null} arrays, {@code a} and {@code b} with specified&#10;     * ranges [{@code aFromIndex}, {@code atoIndex}) and&#10;     * [{@code bFromIndex}, {@code btoIndex}) respectively, share a proper&#10;     * prefix if the following expression is true:&#10;     * <pre>{@code&#10;     *     (aToIndex - aFromIndex) != (bToIndex - bFromIndex) &#38;&#38;&#10;     *     Arrays.equals(a, 0, Math.min(aToIndex - aFromIndex, bToIndex - bFromIndex),&#10;     *                   b, 0, Math.min(aToIndex - aFromIndex, bToIndex - bFromIndex))&#10;     * }</pre>&#10;     *&#10;     * @param a the first array to be tested for a mismatch&#10;     * @param aFromIndex the index (inclusive) of the first element in the&#10;     *                   first array to be tested&#10;     * @param aToIndex the index (exclusive) of the last element in the&#10;     *                 first array to be tested&#10;     * @param b the second array to be tested for a mismatch&#10;     * @param bFromIndex the index (inclusive) of the first element in the&#10;     *                   second array to be tested&#10;     * @param bToIndex the index (exclusive) of the last element in the&#10;     *                 second array to be tested&#10;     * @return the relative index of the first mismatch between the two arrays&#10;     *         over the specified ranges, otherwise {@code -1}.&#10;     * @throws IllegalArgumentException&#10;     *         if {@code aFromIndex > aToIndex} or&#10;     *         if {@code bFromIndex > bToIndex}&#10;     * @throws ArrayIndexOutOfBoundsException&#10;     *         if {@code aFromIndex < 0 or aToIndex > a.length} or&#10;     *         if {@code bFromIndex < 0 or bToIndex > b.length}&#10;     * @throws NullPointerException&#10;     *         if either array is {@code null}&#10;     * @since 9&#10;     "
  ]
  node [
    id 2852
    label "public static int mismatch(short[] a, short[] b)"
    type "method"
    comment "&#10;     * Finds and returns the index of the first mismatch between two {@code short}&#10;     * arrays, otherwise return -1 if no mismatch is found.  The index will be&#10;     * in the range of 0 (inclusive) up to the length (inclusive) of the smaller&#10;     * array.&#10;     *&#10;     * <p>If the two arrays share a common prefix then the returned index is the&#10;     * length of the common prefix and it follows that there is a mismatch&#10;     * between the two elements at that index within the respective arrays.&#10;     * If one array is a proper prefix of the other then the returned index is&#10;     * the length of the smaller array and it follows that the index is only&#10;     * valid for the larger array.&#10;     * Otherwise, there is no mismatch.&#10;     *&#10;     * <p>Two non-{@code null} arrays, {@code a} and {@code b}, share a common&#10;     * prefix of length {@code pl} if the following expression is true:&#10;     * <pre>{@code&#10;     *     pl >= 0 &#38;&#38;&#10;     *     pl < Math.min(a.length, b.length) &#38;&#38;&#10;     *     Arrays.equals(a, 0, pl, b, 0, pl) &#38;&#38;&#10;     *     a[pl] != b[pl]&#10;     * }</pre>&#10;     * Note that a common prefix length of {@code 0} indicates that the first&#10;     * elements from each array mismatch.&#10;     *&#10;     * <p>Two non-{@code null} arrays, {@code a} and {@code b}, share a proper&#10;     * prefix if the following expression is true:&#10;     * <pre>{@code&#10;     *     a.length != b.length &#38;&#38;&#10;     *     Arrays.equals(a, 0, Math.min(a.length, b.length),&#10;     *                   b, 0, Math.min(a.length, b.length))&#10;     * }</pre>&#10;     *&#10;     * @param a the first array to be tested for a mismatch&#10;     * @param b the second array to be tested for a mismatch&#10;     * @return the index of the first mismatch between the two arrays,&#10;     *         otherwise {@code -1}.&#10;     * @throws NullPointerException&#10;     *         if either array is {@code null}&#10;     * @since 9&#10;     "
  ]
  node [
    id 2853
    label "public static int mismatch(short[] a, int aFromIndex, int aToIndex, short[] b, int bFromIndex, int bToIndex)"
    type "method"
    comment "&#10;     * Finds and returns the relative index of the first mismatch between two&#10;     * {@code short} arrays over the specified ranges, otherwise return -1 if no&#10;     * mismatch is found.  The index will be in the range of 0 (inclusive) up to&#10;     * the length (inclusive) of the smaller range.&#10;     *&#10;     * <p>If the two arrays, over the specified ranges, share a common prefix&#10;     * then the returned relative index is the length of the common prefix and&#10;     * it follows that there is a mismatch between the two elements at that&#10;     * relative index within the respective arrays.&#10;     * If one array is a proper prefix of the other, over the specified ranges,&#10;     * then the returned relative index is the length of the smaller range and&#10;     * it follows that the relative index is only valid for the array with the&#10;     * larger range.&#10;     * Otherwise, there is no mismatch.&#10;     *&#10;     * <p>Two non-{@code null} arrays, {@code a} and {@code b} with specified&#10;     * ranges [{@code aFromIndex}, {@code atoIndex}) and&#10;     * [{@code bFromIndex}, {@code btoIndex}) respectively, share a common&#10;     * prefix of length {@code pl} if the following expression is true:&#10;     * <pre>{@code&#10;     *     pl >= 0 &#38;&#38;&#10;     *     pl < Math.min(aToIndex - aFromIndex, bToIndex - bFromIndex) &#38;&#38;&#10;     *     Arrays.equals(a, aFromIndex, aFromIndex + pl, b, bFromIndex, bFromIndex + pl) &#38;&#38;&#10;     *     a[aFromIndex + pl] != b[bFromIndex + pl]&#10;     * }</pre>&#10;     * Note that a common prefix length of {@code 0} indicates that the first&#10;     * elements from each array mismatch.&#10;     *&#10;     * <p>Two non-{@code null} arrays, {@code a} and {@code b} with specified&#10;     * ranges [{@code aFromIndex}, {@code atoIndex}) and&#10;     * [{@code bFromIndex}, {@code btoIndex}) respectively, share a proper&#10;     * prefix if the following expression is true:&#10;     * <pre>{@code&#10;     *     (aToIndex - aFromIndex) != (bToIndex - bFromIndex) &#38;&#38;&#10;     *     Arrays.equals(a, 0, Math.min(aToIndex - aFromIndex, bToIndex - bFromIndex),&#10;     *                   b, 0, Math.min(aToIndex - aFromIndex, bToIndex - bFromIndex))&#10;     * }</pre>&#10;     *&#10;     * @param a the first array to be tested for a mismatch&#10;     * @param aFromIndex the index (inclusive) of the first element in the&#10;     *                   first array to be tested&#10;     * @param aToIndex the index (exclusive) of the last element in the&#10;     *                 first array to be tested&#10;     * @param b the second array to be tested for a mismatch&#10;     * @param bFromIndex the index (inclusive) of the first element in the&#10;     *                   second array to be tested&#10;     * @param bToIndex the index (exclusive) of the last element in the&#10;     *                 second array to be tested&#10;     * @return the relative index of the first mismatch between the two arrays&#10;     *         over the specified ranges, otherwise {@code -1}.&#10;     * @throws IllegalArgumentException&#10;     *         if {@code aFromIndex > aToIndex} or&#10;     *         if {@code bFromIndex > bToIndex}&#10;     * @throws ArrayIndexOutOfBoundsException&#10;     *         if {@code aFromIndex < 0 or aToIndex > a.length} or&#10;     *         if {@code bFromIndex < 0 or bToIndex > b.length}&#10;     * @throws NullPointerException&#10;     *         if either array is {@code null}&#10;     * @since 9&#10;     "
  ]
  node [
    id 2854
    label "public static int mismatch(int[] a, int[] b)"
    type "method"
    comment "&#10;     * Finds and returns the index of the first mismatch between two {@code int}&#10;     * arrays, otherwise return -1 if no mismatch is found.  The index will be&#10;     * in the range of 0 (inclusive) up to the length (inclusive) of the smaller&#10;     * array.&#10;     *&#10;     * <p>If the two arrays share a common prefix then the returned index is the&#10;     * length of the common prefix and it follows that there is a mismatch&#10;     * between the two elements at that index within the respective arrays.&#10;     * If one array is a proper prefix of the other then the returned index is&#10;     * the length of the smaller array and it follows that the index is only&#10;     * valid for the larger array.&#10;     * Otherwise, there is no mismatch.&#10;     *&#10;     * <p>Two non-{@code null} arrays, {@code a} and {@code b}, share a common&#10;     * prefix of length {@code pl} if the following expression is true:&#10;     * <pre>{@code&#10;     *     pl >= 0 &#38;&#38;&#10;     *     pl < Math.min(a.length, b.length) &#38;&#38;&#10;     *     Arrays.equals(a, 0, pl, b, 0, pl) &#38;&#38;&#10;     *     a[pl] != b[pl]&#10;     * }</pre>&#10;     * Note that a common prefix length of {@code 0} indicates that the first&#10;     * elements from each array mismatch.&#10;     *&#10;     * <p>Two non-{@code null} arrays, {@code a} and {@code b}, share a proper&#10;     * prefix if the following expression is true:&#10;     * <pre>{@code&#10;     *     a.length != b.length &#38;&#38;&#10;     *     Arrays.equals(a, 0, Math.min(a.length, b.length),&#10;     *                   b, 0, Math.min(a.length, b.length))&#10;     * }</pre>&#10;     *&#10;     * @param a the first array to be tested for a mismatch&#10;     * @param b the second array to be tested for a mismatch&#10;     * @return the index of the first mismatch between the two arrays,&#10;     *         otherwise {@code -1}.&#10;     * @throws NullPointerException&#10;     *         if either array is {@code null}&#10;     * @since 9&#10;     "
  ]
  node [
    id 2855
    label "public static int mismatch(int[] a, int aFromIndex, int aToIndex, int[] b, int bFromIndex, int bToIndex)"
    type "method"
    comment "&#10;     * Finds and returns the relative index of the first mismatch between two&#10;     * {@code int} arrays over the specified ranges, otherwise return -1 if no&#10;     * mismatch is found.  The index will be in the range of 0 (inclusive) up to&#10;     * the length (inclusive) of the smaller range.&#10;     *&#10;     * <p>If the two arrays, over the specified ranges, share a common prefix&#10;     * then the returned relative index is the length of the common prefix and&#10;     * it follows that there is a mismatch between the two elements at that&#10;     * relative index within the respective arrays.&#10;     * If one array is a proper prefix of the other, over the specified ranges,&#10;     * then the returned relative index is the length of the smaller range and&#10;     * it follows that the relative index is only valid for the array with the&#10;     * larger range.&#10;     * Otherwise, there is no mismatch.&#10;     *&#10;     * <p>Two non-{@code null} arrays, {@code a} and {@code b} with specified&#10;     * ranges [{@code aFromIndex}, {@code atoIndex}) and&#10;     * [{@code bFromIndex}, {@code btoIndex}) respectively, share a common&#10;     * prefix of length {@code pl} if the following expression is true:&#10;     * <pre>{@code&#10;     *     pl >= 0 &#38;&#38;&#10;     *     pl < Math.min(aToIndex - aFromIndex, bToIndex - bFromIndex) &#38;&#38;&#10;     *     Arrays.equals(a, aFromIndex, aFromIndex + pl, b, bFromIndex, bFromIndex + pl) &#38;&#38;&#10;     *     a[aFromIndex + pl] != b[bFromIndex + pl]&#10;     * }</pre>&#10;     * Note that a common prefix length of {@code 0} indicates that the first&#10;     * elements from each array mismatch.&#10;     *&#10;     * <p>Two non-{@code null} arrays, {@code a} and {@code b} with specified&#10;     * ranges [{@code aFromIndex}, {@code atoIndex}) and&#10;     * [{@code bFromIndex}, {@code btoIndex}) respectively, share a proper&#10;     * prefix if the following expression is true:&#10;     * <pre>{@code&#10;     *     (aToIndex - aFromIndex) != (bToIndex - bFromIndex) &#38;&#38;&#10;     *     Arrays.equals(a, 0, Math.min(aToIndex - aFromIndex, bToIndex - bFromIndex),&#10;     *                   b, 0, Math.min(aToIndex - aFromIndex, bToIndex - bFromIndex))&#10;     * }</pre>&#10;     *&#10;     * @param a the first array to be tested for a mismatch&#10;     * @param aFromIndex the index (inclusive) of the first element in the&#10;     *                   first array to be tested&#10;     * @param aToIndex the index (exclusive) of the last element in the&#10;     *                 first array to be tested&#10;     * @param b the second array to be tested for a mismatch&#10;     * @param bFromIndex the index (inclusive) of the first element in the&#10;     *                   second array to be tested&#10;     * @param bToIndex the index (exclusive) of the last element in the&#10;     *                 second array to be tested&#10;     * @return the relative index of the first mismatch between the two arrays&#10;     *         over the specified ranges, otherwise {@code -1}.&#10;     * @throws IllegalArgumentException&#10;     *         if {@code aFromIndex > aToIndex} or&#10;     *         if {@code bFromIndex > bToIndex}&#10;     * @throws ArrayIndexOutOfBoundsException&#10;     *         if {@code aFromIndex < 0 or aToIndex > a.length} or&#10;     *         if {@code bFromIndex < 0 or bToIndex > b.length}&#10;     * @throws NullPointerException&#10;     *         if either array is {@code null}&#10;     * @since 9&#10;     "
  ]
  node [
    id 2856
    label "public static int mismatch(long[] a, long[] b)"
    type "method"
    comment "&#10;     * Finds and returns the index of the first mismatch between two {@code long}&#10;     * arrays, otherwise return -1 if no mismatch is found.  The index will be&#10;     * in the range of 0 (inclusive) up to the length (inclusive) of the smaller&#10;     * array.&#10;     *&#10;     * <p>If the two arrays share a common prefix then the returned index is the&#10;     * length of the common prefix and it follows that there is a mismatch&#10;     * between the two elements at that index within the respective arrays.&#10;     * If one array is a proper prefix of the other then the returned index is&#10;     * the length of the smaller array and it follows that the index is only&#10;     * valid for the larger array.&#10;     * Otherwise, there is no mismatch.&#10;     *&#10;     * <p>Two non-{@code null} arrays, {@code a} and {@code b}, share a common&#10;     * prefix of length {@code pl} if the following expression is true:&#10;     * <pre>{@code&#10;     *     pl >= 0 &#38;&#38;&#10;     *     pl < Math.min(a.length, b.length) &#38;&#38;&#10;     *     Arrays.equals(a, 0, pl, b, 0, pl) &#38;&#38;&#10;     *     a[pl] != b[pl]&#10;     * }</pre>&#10;     * Note that a common prefix length of {@code 0} indicates that the first&#10;     * elements from each array mismatch.&#10;     *&#10;     * <p>Two non-{@code null} arrays, {@code a} and {@code b}, share a proper&#10;     * prefix if the following expression is true:&#10;     * <pre>{@code&#10;     *     a.length != b.length &#38;&#38;&#10;     *     Arrays.equals(a, 0, Math.min(a.length, b.length),&#10;     *                   b, 0, Math.min(a.length, b.length))&#10;     * }</pre>&#10;     *&#10;     * @param a the first array to be tested for a mismatch&#10;     * @param b the second array to be tested for a mismatch&#10;     * @return the index of the first mismatch between the two arrays,&#10;     *         otherwise {@code -1}.&#10;     * @throws NullPointerException&#10;     *         if either array is {@code null}&#10;     * @since 9&#10;     "
  ]
  node [
    id 2857
    label "public static int mismatch(long[] a, int aFromIndex, int aToIndex, long[] b, int bFromIndex, int bToIndex)"
    type "method"
    comment "&#10;     * Finds and returns the relative index of the first mismatch between two&#10;     * {@code long} arrays over the specified ranges, otherwise return -1 if no&#10;     * mismatch is found.  The index will be in the range of 0 (inclusive) up to&#10;     * the length (inclusive) of the smaller range.&#10;     *&#10;     * <p>If the two arrays, over the specified ranges, share a common prefix&#10;     * then the returned relative index is the length of the common prefix and&#10;     * it follows that there is a mismatch between the two elements at that&#10;     * relative index within the respective arrays.&#10;     * If one array is a proper prefix of the other, over the specified ranges,&#10;     * then the returned relative index is the length of the smaller range and&#10;     * it follows that the relative index is only valid for the array with the&#10;     * larger range.&#10;     * Otherwise, there is no mismatch.&#10;     *&#10;     * <p>Two non-{@code null} arrays, {@code a} and {@code b} with specified&#10;     * ranges [{@code aFromIndex}, {@code atoIndex}) and&#10;     * [{@code bFromIndex}, {@code btoIndex}) respectively, share a common&#10;     * prefix of length {@code pl} if the following expression is true:&#10;     * <pre>{@code&#10;     *     pl >= 0 &#38;&#38;&#10;     *     pl < Math.min(aToIndex - aFromIndex, bToIndex - bFromIndex) &#38;&#38;&#10;     *     Arrays.equals(a, aFromIndex, aFromIndex + pl, b, bFromIndex, bFromIndex + pl) &#38;&#38;&#10;     *     a[aFromIndex + pl] != b[bFromIndex + pl]&#10;     * }</pre>&#10;     * Note that a common prefix length of {@code 0} indicates that the first&#10;     * elements from each array mismatch.&#10;     *&#10;     * <p>Two non-{@code null} arrays, {@code a} and {@code b} with specified&#10;     * ranges [{@code aFromIndex}, {@code atoIndex}) and&#10;     * [{@code bFromIndex}, {@code btoIndex}) respectively, share a proper&#10;     * prefix if the following expression is true:&#10;     * <pre>{@code&#10;     *     (aToIndex - aFromIndex) != (bToIndex - bFromIndex) &#38;&#38;&#10;     *     Arrays.equals(a, 0, Math.min(aToIndex - aFromIndex, bToIndex - bFromIndex),&#10;     *                   b, 0, Math.min(aToIndex - aFromIndex, bToIndex - bFromIndex))&#10;     * }</pre>&#10;     *&#10;     * @param a the first array to be tested for a mismatch&#10;     * @param aFromIndex the index (inclusive) of the first element in the&#10;     *                   first array to be tested&#10;     * @param aToIndex the index (exclusive) of the last element in the&#10;     *                 first array to be tested&#10;     * @param b the second array to be tested for a mismatch&#10;     * @param bFromIndex the index (inclusive) of the first element in the&#10;     *                   second array to be tested&#10;     * @param bToIndex the index (exclusive) of the last element in the&#10;     *                 second array to be tested&#10;     * @return the relative index of the first mismatch between the two arrays&#10;     *         over the specified ranges, otherwise {@code -1}.&#10;     * @throws IllegalArgumentException&#10;     *         if {@code aFromIndex > aToIndex} or&#10;     *         if {@code bFromIndex > bToIndex}&#10;     * @throws ArrayIndexOutOfBoundsException&#10;     *         if {@code aFromIndex < 0 or aToIndex > a.length} or&#10;     *         if {@code bFromIndex < 0 or bToIndex > b.length}&#10;     * @throws NullPointerException&#10;     *         if either array is {@code null}&#10;     * @since 9&#10;     "
  ]
  node [
    id 2858
    label "public static int mismatch(float[] a, float[] b)"
    type "method"
    comment "&#10;     * Finds and returns the index of the first mismatch between two {@code float}&#10;     * arrays, otherwise return -1 if no mismatch is found.  The index will be&#10;     * in the range of 0 (inclusive) up to the length (inclusive) of the smaller&#10;     * array.&#10;     *&#10;     * <p>If the two arrays share a common prefix then the returned index is the&#10;     * length of the common prefix and it follows that there is a mismatch&#10;     * between the two elements at that index within the respective arrays.&#10;     * If one array is a proper prefix of the other then the returned index is&#10;     * the length of the smaller array and it follows that the index is only&#10;     * valid for the larger array.&#10;     * Otherwise, there is no mismatch.&#10;     *&#10;     * <p>Two non-{@code null} arrays, {@code a} and {@code b}, share a common&#10;     * prefix of length {@code pl} if the following expression is true:&#10;     * <pre>{@code&#10;     *     pl >= 0 &#38;&#38;&#10;     *     pl < Math.min(a.length, b.length) &#38;&#38;&#10;     *     Arrays.equals(a, 0, pl, b, 0, pl) &#38;&#38;&#10;     *     Float.compare(a[pl], b[pl]) != 0&#10;     * }</pre>&#10;     * Note that a common prefix length of {@code 0} indicates that the first&#10;     * elements from each array mismatch.&#10;     *&#10;     * <p>Two non-{@code null} arrays, {@code a} and {@code b}, share a proper&#10;     * prefix if the following expression is true:&#10;     * <pre>{@code&#10;     *     a.length != b.length &#38;&#38;&#10;     *     Arrays.equals(a, 0, Math.min(a.length, b.length),&#10;     *                   b, 0, Math.min(a.length, b.length))&#10;     * }</pre>&#10;     *&#10;     * @param a the first array to be tested for a mismatch&#10;     * @param b the second array to be tested for a mismatch&#10;     * @return the index of the first mismatch between the two arrays,&#10;     *         otherwise {@code -1}.&#10;     * @throws NullPointerException&#10;     *         if either array is {@code null}&#10;     * @since 9&#10;     "
  ]
  node [
    id 2859
    label "public static int mismatch(float[] a, int aFromIndex, int aToIndex, float[] b, int bFromIndex, int bToIndex)"
    type "method"
    comment "&#10;     * Finds and returns the relative index of the first mismatch between two&#10;     * {@code float} arrays over the specified ranges, otherwise return -1 if no&#10;     * mismatch is found.  The index will be in the range of 0 (inclusive) up to&#10;     * the length (inclusive) of the smaller range.&#10;     *&#10;     * <p>If the two arrays, over the specified ranges, share a common prefix&#10;     * then the returned relative index is the length of the common prefix and&#10;     * it follows that there is a mismatch between the two elements at that&#10;     * relative index within the respective arrays.&#10;     * If one array is a proper prefix of the other, over the specified ranges,&#10;     * then the returned relative index is the length of the smaller range and&#10;     * it follows that the relative index is only valid for the array with the&#10;     * larger range.&#10;     * Otherwise, there is no mismatch.&#10;     *&#10;     * <p>Two non-{@code null} arrays, {@code a} and {@code b} with specified&#10;     * ranges [{@code aFromIndex}, {@code atoIndex}) and&#10;     * [{@code bFromIndex}, {@code btoIndex}) respectively, share a common&#10;     * prefix of length {@code pl} if the following expression is true:&#10;     * <pre>{@code&#10;     *     pl >= 0 &#38;&#38;&#10;     *     pl < Math.min(aToIndex - aFromIndex, bToIndex - bFromIndex) &#38;&#38;&#10;     *     Arrays.equals(a, aFromIndex, aFromIndex + pl, b, bFromIndex, bFromIndex + pl) &#38;&#38;&#10;     *     Float.compare(a[aFromIndex + pl], b[bFromIndex + pl]) != 0&#10;     * }</pre>&#10;     * Note that a common prefix length of {@code 0} indicates that the first&#10;     * elements from each array mismatch.&#10;     *&#10;     * <p>Two non-{@code null} arrays, {@code a} and {@code b} with specified&#10;     * ranges [{@code aFromIndex}, {@code atoIndex}) and&#10;     * [{@code bFromIndex}, {@code btoIndex}) respectively, share a proper&#10;     * prefix if the following expression is true:&#10;     * <pre>{@code&#10;     *     (aToIndex - aFromIndex) != (bToIndex - bFromIndex) &#38;&#38;&#10;     *     Arrays.equals(a, 0, Math.min(aToIndex - aFromIndex, bToIndex - bFromIndex),&#10;     *                   b, 0, Math.min(aToIndex - aFromIndex, bToIndex - bFromIndex))&#10;     * }</pre>&#10;     *&#10;     * @param a the first array to be tested for a mismatch&#10;     * @param aFromIndex the index (inclusive) of the first element in the&#10;     *                   first array to be tested&#10;     * @param aToIndex the index (exclusive) of the last element in the&#10;     *                 first array to be tested&#10;     * @param b the second array to be tested for a mismatch&#10;     * @param bFromIndex the index (inclusive) of the first element in the&#10;     *                   second array to be tested&#10;     * @param bToIndex the index (exclusive) of the last element in the&#10;     *                 second array to be tested&#10;     * @return the relative index of the first mismatch between the two arrays&#10;     *         over the specified ranges, otherwise {@code -1}.&#10;     * @throws IllegalArgumentException&#10;     *         if {@code aFromIndex > aToIndex} or&#10;     *         if {@code bFromIndex > bToIndex}&#10;     * @throws ArrayIndexOutOfBoundsException&#10;     *         if {@code aFromIndex < 0 or aToIndex > a.length} or&#10;     *         if {@code bFromIndex < 0 or bToIndex > b.length}&#10;     * @throws NullPointerException&#10;     *         if either array is {@code null}&#10;     * @since 9&#10;     "
  ]
  node [
    id 2860
    label "public static int mismatch(double[] a, double[] b)"
    type "method"
    comment "&#10;     * Finds and returns the index of the first mismatch between two&#10;     * {@code double} arrays, otherwise return -1 if no mismatch is found.  The&#10;     * index will be in the range of 0 (inclusive) up to the length (inclusive)&#10;     * of the smaller array.&#10;     *&#10;     * <p>If the two arrays share a common prefix then the returned index is the&#10;     * length of the common prefix and it follows that there is a mismatch&#10;     * between the two elements at that index within the respective arrays.&#10;     * If one array is a proper prefix of the other then the returned index is&#10;     * the length of the smaller array and it follows that the index is only&#10;     * valid for the larger array.&#10;     * Otherwise, there is no mismatch.&#10;     *&#10;     * <p>Two non-{@code null} arrays, {@code a} and {@code b}, share a common&#10;     * prefix of length {@code pl} if the following expression is true:&#10;     * <pre>{@code&#10;     *     pl >= 0 &#38;&#38;&#10;     *     pl < Math.min(a.length, b.length) &#38;&#38;&#10;     *     Arrays.equals(a, 0, pl, b, 0, pl) &#38;&#38;&#10;     *     Double.compare(a[pl], b[pl]) != 0&#10;     * }</pre>&#10;     * Note that a common prefix length of {@code 0} indicates that the first&#10;     * elements from each array mismatch.&#10;     *&#10;     * <p>Two non-{@code null} arrays, {@code a} and {@code b}, share a proper&#10;     * prefix if the following expression is true:&#10;     * <pre>{@code&#10;     *     a.length != b.length &#38;&#38;&#10;     *     Arrays.equals(a, 0, Math.min(a.length, b.length),&#10;     *                   b, 0, Math.min(a.length, b.length))&#10;     * }</pre>&#10;     *&#10;     * @param a the first array to be tested for a mismatch&#10;     * @param b the second array to be tested for a mismatch&#10;     * @return the index of the first mismatch between the two arrays,&#10;     *         otherwise {@code -1}.&#10;     * @throws NullPointerException&#10;     *         if either array is {@code null}&#10;     * @since 9&#10;     "
  ]
  node [
    id 2861
    label "public static int mismatch(double[] a, int aFromIndex, int aToIndex, double[] b, int bFromIndex, int bToIndex)"
    type "method"
    comment "&#10;     * Finds and returns the relative index of the first mismatch between two&#10;     * {@code double} arrays over the specified ranges, otherwise return -1 if&#10;     * no mismatch is found.  The index will be in the range of 0 (inclusive) up&#10;     * to the length (inclusive) of the smaller range.&#10;     *&#10;     * <p>If the two arrays, over the specified ranges, share a common prefix&#10;     * then the returned relative index is the length of the common prefix and&#10;     * it follows that there is a mismatch between the two elements at that&#10;     * relative index within the respective arrays.&#10;     * If one array is a proper prefix of the other, over the specified ranges,&#10;     * then the returned relative index is the length of the smaller range and&#10;     * it follows that the relative index is only valid for the array with the&#10;     * larger range.&#10;     * Otherwise, there is no mismatch.&#10;     *&#10;     * <p>Two non-{@code null} arrays, {@code a} and {@code b} with specified&#10;     * ranges [{@code aFromIndex}, {@code atoIndex}) and&#10;     * [{@code bFromIndex}, {@code btoIndex}) respectively, share a common&#10;     * prefix of length {@code pl} if the following expression is true:&#10;     * <pre>{@code&#10;     *     pl >= 0 &#38;&#38;&#10;     *     pl < Math.min(aToIndex - aFromIndex, bToIndex - bFromIndex) &#38;&#38;&#10;     *     Arrays.equals(a, aFromIndex, aFromIndex + pl, b, bFromIndex, bFromIndex + pl) &#38;&#38;&#10;     *     Double.compare(a[aFromIndex + pl], b[bFromIndex + pl]) != 0&#10;     * }</pre>&#10;     * Note that a common prefix length of {@code 0} indicates that the first&#10;     * elements from each array mismatch.&#10;     *&#10;     * <p>Two non-{@code null} arrays, {@code a} and {@code b} with specified&#10;     * ranges [{@code aFromIndex}, {@code atoIndex}) and&#10;     * [{@code bFromIndex}, {@code btoIndex}) respectively, share a proper&#10;     * prefix if the following expression is true:&#10;     * <pre>{@code&#10;     *     (aToIndex - aFromIndex) != (bToIndex - bFromIndex) &#38;&#38;&#10;     *     Arrays.equals(a, 0, Math.min(aToIndex - aFromIndex, bToIndex - bFromIndex),&#10;     *                   b, 0, Math.min(aToIndex - aFromIndex, bToIndex - bFromIndex))&#10;     * }</pre>&#10;     *&#10;     * @param a the first array to be tested for a mismatch&#10;     * @param aFromIndex the index (inclusive) of the first element in the&#10;     *                   first array to be tested&#10;     * @param aToIndex the index (exclusive) of the last element in the&#10;     *                 first array to be tested&#10;     * @param b the second array to be tested for a mismatch&#10;     * @param bFromIndex the index (inclusive) of the first element in the&#10;     *                   second array to be tested&#10;     * @param bToIndex the index (exclusive) of the last element in the&#10;     *                 second array to be tested&#10;     * @return the relative index of the first mismatch between the two arrays&#10;     *         over the specified ranges, otherwise {@code -1}.&#10;     * @throws IllegalArgumentException&#10;     *         if {@code aFromIndex > aToIndex} or&#10;     *         if {@code bFromIndex > bToIndex}&#10;     * @throws ArrayIndexOutOfBoundsException&#10;     *         if {@code aFromIndex < 0 or aToIndex > a.length} or&#10;     *         if {@code bFromIndex < 0 or bToIndex > b.length}&#10;     * @throws NullPointerException&#10;     *         if either array is {@code null}&#10;     * @since 9&#10;     "
  ]
  node [
    id 2862
    label "public static int mismatch(Object[] a, Object[] b)"
    type "method"
    comment "&#10;     * Finds and returns the index of the first mismatch between two&#10;     * {@code Object} arrays, otherwise return -1 if no mismatch is found.  The&#10;     * index will be in the range of 0 (inclusive) up to the length (inclusive)&#10;     * of the smaller array.&#10;     *&#10;     * <p>If the two arrays share a common prefix then the returned index is the&#10;     * length of the common prefix and it follows that there is a mismatch&#10;     * between the two elements at that index within the respective arrays.&#10;     * If one array is a proper prefix of the other then the returned index is&#10;     * the length of the smaller array and it follows that the index is only&#10;     * valid for the larger array.&#10;     * Otherwise, there is no mismatch.&#10;     *&#10;     * <p>Two non-{@code null} arrays, {@code a} and {@code b}, share a common&#10;     * prefix of length {@code pl} if the following expression is true:&#10;     * <pre>{@code&#10;     *     pl >= 0 &#38;&#38;&#10;     *     pl < Math.min(a.length, b.length) &#38;&#38;&#10;     *     Arrays.equals(a, 0, pl, b, 0, pl) &#38;&#38;&#10;     *     !Objects.equals(a[pl], b[pl])&#10;     * }</pre>&#10;     * Note that a common prefix length of {@code 0} indicates that the first&#10;     * elements from each array mismatch.&#10;     *&#10;     * <p>Two non-{@code null} arrays, {@code a} and {@code b}, share a proper&#10;     * prefix if the following expression is true:&#10;     * <pre>{@code&#10;     *     a.length != b.length &#38;&#38;&#10;     *     Arrays.equals(a, 0, Math.min(a.length, b.length),&#10;     *                   b, 0, Math.min(a.length, b.length))&#10;     * }</pre>&#10;     *&#10;     * @param a the first array to be tested for a mismatch&#10;     * @param b the second array to be tested for a mismatch&#10;     * @return the index of the first mismatch between the two arrays,&#10;     *         otherwise {@code -1}.&#10;     * @throws NullPointerException&#10;     *         if either array is {@code null}&#10;     * @since 9&#10;     "
  ]
  node [
    id 2863
    label "public static int mismatch(Object[] a, int aFromIndex, int aToIndex, Object[] b, int bFromIndex, int bToIndex)"
    type "method"
    comment "&#10;     * Finds and returns the relative index of the first mismatch between two&#10;     * {@code Object} arrays over the specified ranges, otherwise return -1 if&#10;     * no mismatch is found.  The index will be in the range of 0 (inclusive) up&#10;     * to the length (inclusive) of the smaller range.&#10;     *&#10;     * <p>If the two arrays, over the specified ranges, share a common prefix&#10;     * then the returned relative index is the length of the common prefix and&#10;     * it follows that there is a mismatch between the two elements at that&#10;     * relative index within the respective arrays.&#10;     * If one array is a proper prefix of the other, over the specified ranges,&#10;     * then the returned relative index is the length of the smaller range and&#10;     * it follows that the relative index is only valid for the array with the&#10;     * larger range.&#10;     * Otherwise, there is no mismatch.&#10;     *&#10;     * <p>Two non-{@code null} arrays, {@code a} and {@code b} with specified&#10;     * ranges [{@code aFromIndex}, {@code atoIndex}) and&#10;     * [{@code bFromIndex}, {@code btoIndex}) respectively, share a common&#10;     * prefix of length {@code pl} if the following expression is true:&#10;     * <pre>{@code&#10;     *     pl >= 0 &#38;&#38;&#10;     *     pl < Math.min(aToIndex - aFromIndex, bToIndex - bFromIndex) &#38;&#38;&#10;     *     Arrays.equals(a, aFromIndex, aFromIndex + pl, b, bFromIndex, bFromIndex + pl) &#38;&#38;&#10;     *     !Objects.equals(a[aFromIndex + pl], b[bFromIndex + pl])&#10;     * }</pre>&#10;     * Note that a common prefix length of {@code 0} indicates that the first&#10;     * elements from each array mismatch.&#10;     *&#10;     * <p>Two non-{@code null} arrays, {@code a} and {@code b} with specified&#10;     * ranges [{@code aFromIndex}, {@code atoIndex}) and&#10;     * [{@code bFromIndex}, {@code btoIndex}) respectively, share a proper&#10;     * prefix if the following expression is true:&#10;     * <pre>{@code&#10;     *     (aToIndex - aFromIndex) != (bToIndex - bFromIndex) &#38;&#38;&#10;     *     Arrays.equals(a, 0, Math.min(aToIndex - aFromIndex, bToIndex - bFromIndex),&#10;     *                   b, 0, Math.min(aToIndex - aFromIndex, bToIndex - bFromIndex))&#10;     * }</pre>&#10;     *&#10;     * @param a the first array to be tested for a mismatch&#10;     * @param aFromIndex the index (inclusive) of the first element in the&#10;     *                   first array to be tested&#10;     * @param aToIndex the index (exclusive) of the last element in the&#10;     *                 first array to be tested&#10;     * @param b the second array to be tested for a mismatch&#10;     * @param bFromIndex the index (inclusive) of the first element in the&#10;     *                   second array to be tested&#10;     * @param bToIndex the index (exclusive) of the last element in the&#10;     *                 second array to be tested&#10;     * @return the relative index of the first mismatch between the two arrays&#10;     *         over the specified ranges, otherwise {@code -1}.&#10;     * @throws IllegalArgumentException&#10;     *         if {@code aFromIndex > aToIndex} or&#10;     *         if {@code bFromIndex > bToIndex}&#10;     * @throws ArrayIndexOutOfBoundsException&#10;     *         if {@code aFromIndex < 0 or aToIndex > a.length} or&#10;     *         if {@code bFromIndex < 0 or bToIndex > b.length}&#10;     * @throws NullPointerException&#10;     *         if either array is {@code null}&#10;     * @since 9&#10;     "
  ]
  node [
    id 2864
    label "public static int mismatch(T[] a, T[] b, Comparator<? super T> cmp)"
    type "method"
    comment "&#10;     * Finds and returns the index of the first mismatch between two&#10;     * {@code Object} arrays, otherwise return -1 if no mismatch is found.&#10;     * The index will be in the range of 0 (inclusive) up to the length&#10;     * (inclusive) of the smaller array.&#10;     *&#10;     * <p>The specified comparator is used to determine if two array elements&#10;     * from the each array are not equal.&#10;     *&#10;     * <p>If the two arrays share a common prefix then the returned index is the&#10;     * length of the common prefix and it follows that there is a mismatch&#10;     * between the two elements at that index within the respective arrays.&#10;     * If one array is a proper prefix of the other then the returned index is&#10;     * the length of the smaller array and it follows that the index is only&#10;     * valid for the larger array.&#10;     * Otherwise, there is no mismatch.&#10;     *&#10;     * <p>Two non-{@code null} arrays, {@code a} and {@code b}, share a common&#10;     * prefix of length {@code pl} if the following expression is true:&#10;     * <pre>{@code&#10;     *     pl >= 0 &#38;&#38;&#10;     *     pl < Math.min(a.length, b.length) &#38;&#38;&#10;     *     Arrays.equals(a, 0, pl, b, 0, pl, cmp)&#10;     *     cmp.compare(a[pl], b[pl]) != 0&#10;     * }</pre>&#10;     * Note that a common prefix length of {@code 0} indicates that the first&#10;     * elements from each array mismatch.&#10;     *&#10;     * <p>Two non-{@code null} arrays, {@code a} and {@code b}, share a proper&#10;     * prefix if the following expression is true:&#10;     * <pre>{@code&#10;     *     a.length != b.length &#38;&#38;&#10;     *     Arrays.equals(a, 0, Math.min(a.length, b.length),&#10;     *                   b, 0, Math.min(a.length, b.length),&#10;     *                   cmp)&#10;     * }</pre>&#10;     *&#10;     * @param a the first array to be tested for a mismatch&#10;     * @param b the second array to be tested for a mismatch&#10;     * @param cmp the comparator to compare array elements&#10;     * @param <T> the type of array elements&#10;     * @return the index of the first mismatch between the two arrays,&#10;     *         otherwise {@code -1}.&#10;     * @throws NullPointerException&#10;     *         if either array or the comparator is {@code null}&#10;     * @since 9&#10;     "
  ]
  node [
    id 2865
    label "public static int mismatch(T[] a, int aFromIndex, int aToIndex, T[] b, int bFromIndex, int bToIndex, Comparator<? super T> cmp)"
    type "method"
    comment "&#10;     * Finds and returns the relative index of the first mismatch between two&#10;     * {@code Object} arrays over the specified ranges, otherwise return -1 if&#10;     * no mismatch is found.  The index will be in the range of 0 (inclusive) up&#10;     * to the length (inclusive) of the smaller range.&#10;     *&#10;     * <p>If the two arrays, over the specified ranges, share a common prefix&#10;     * then the returned relative index is the length of the common prefix and&#10;     * it follows that there is a mismatch between the two elements at that&#10;     * relative index within the respective arrays.&#10;     * If one array is a proper prefix of the other, over the specified ranges,&#10;     * then the returned relative index is the length of the smaller range and&#10;     * it follows that the relative index is only valid for the array with the&#10;     * larger range.&#10;     * Otherwise, there is no mismatch.&#10;     *&#10;     * <p>Two non-{@code null} arrays, {@code a} and {@code b} with specified&#10;     * ranges [{@code aFromIndex}, {@code atoIndex}) and&#10;     * [{@code bFromIndex}, {@code btoIndex}) respectively, share a common&#10;     * prefix of length {@code pl} if the following expression is true:&#10;     * <pre>{@code&#10;     *     pl >= 0 &#38;&#38;&#10;     *     pl < Math.min(aToIndex - aFromIndex, bToIndex - bFromIndex) &#38;&#38;&#10;     *     Arrays.equals(a, aFromIndex, aFromIndex + pl, b, bFromIndex, bFromIndex + pl, cmp) &#38;&#38;&#10;     *     cmp.compare(a[aFromIndex + pl], b[bFromIndex + pl]) != 0&#10;     * }</pre>&#10;     * Note that a common prefix length of {@code 0} indicates that the first&#10;     * elements from each array mismatch.&#10;     *&#10;     * <p>Two non-{@code null} arrays, {@code a} and {@code b} with specified&#10;     * ranges [{@code aFromIndex}, {@code atoIndex}) and&#10;     * [{@code bFromIndex}, {@code btoIndex}) respectively, share a proper&#10;     * prefix if the following expression is true:&#10;     * <pre>{@code&#10;     *     (aToIndex - aFromIndex) != (bToIndex - bFromIndex) &#38;&#38;&#10;     *     Arrays.equals(a, 0, Math.min(aToIndex - aFromIndex, bToIndex - bFromIndex),&#10;     *                   b, 0, Math.min(aToIndex - aFromIndex, bToIndex - bFromIndex),&#10;     *                   cmp)&#10;     * }</pre>&#10;     *&#10;     * @param a the first array to be tested for a mismatch&#10;     * @param aFromIndex the index (inclusive) of the first element in the&#10;     *                   first array to be tested&#10;     * @param aToIndex the index (exclusive) of the last element in the&#10;     *                 first array to be tested&#10;     * @param b the second array to be tested for a mismatch&#10;     * @param bFromIndex the index (inclusive) of the first element in the&#10;     *                   second array to be tested&#10;     * @param bToIndex the index (exclusive) of the last element in the&#10;     *                 second array to be tested&#10;     * @param cmp the comparator to compare array elements&#10;     * @param <T> the type of array elements&#10;     * @return the relative index of the first mismatch between the two arrays&#10;     *         over the specified ranges, otherwise {@code -1}.&#10;     * @throws IllegalArgumentException&#10;     *         if {@code aFromIndex > aToIndex} or&#10;     *         if {@code bFromIndex > bToIndex}&#10;     * @throws ArrayIndexOutOfBoundsException&#10;     *         if {@code aFromIndex < 0 or aToIndex > a.length} or&#10;     *         if {@code bFromIndex < 0 or bToIndex > b.length}&#10;     * @throws NullPointerException&#10;     *         if either array or the comparator is {@code null}&#10;     * @since 9&#10;     "
  ]
  node [
    id 2866
    label "public static Spliterator<T> spliterator(Object[] array, int fromIndex, int toIndex, int additionalCharacteristics)"
    type "method"
    comment "&#10;     * Creates a {@code Spliterator} covering a range of elements of a given&#10;     * array, using a customized set of spliterator characteristics.&#10;     *&#10;     * <p>This method is provided as an implementation convenience for&#10;     * Spliterators which store portions of their elements in arrays, and need&#10;     * fine control over Spliterator characteristics.  Most other situations in&#10;     * which a Spliterator for an array is needed should use&#10;     * {@link Arrays#spliterator(Object[])}.&#10;     *&#10;     * <p>The returned spliterator always reports the characteristics&#10;     * {@code SIZED} and {@code SUBSIZED}.  The caller may provide additional&#10;     * characteristics for the spliterator to report; it is common to&#10;     * additionally specify {@code IMMUTABLE} and {@code ORDERED}.&#10;     *&#10;     * @param <T> Type of elements&#10;     * @param array The array, assumed to be unmodified during use&#10;     * @param fromIndex The least index (inclusive) to cover&#10;     * @param toIndex One past the greatest index to cover&#10;     * @param additionalCharacteristics Additional spliterator characteristics&#10;     *        of this spliterator's source or elements beyond {@code SIZED} and&#10;     *        {@code SUBSIZED} which are always reported&#10;     * @return A spliterator for an array&#10;     * @throws NullPointerException if the given array is {@code null}&#10;     * @throws ArrayIndexOutOfBoundsException if {@code fromIndex} is negative,&#10;     *         {@code toIndex} is less than {@code fromIndex}, or&#10;     *         {@code toIndex} is greater than the array size&#10;     * @see Arrays#spliterator(Object[], int, int)&#10;     "
  ]
  node [
    id 2867
    label "public static Spliterator.OfInt spliterator(int[] array, int additionalCharacteristics)"
    type "method"
    comment "&#10;     * Creates a {@code Spliterator.OfInt} covering the elements of a given array,&#10;     * using a customized set of spliterator characteristics.&#10;     *&#10;     * <p>This method is provided as an implementation convenience for&#10;     * Spliterators which store portions of their elements in arrays, and need&#10;     * fine control over Spliterator characteristics.  Most other situations in&#10;     * which a Spliterator for an array is needed should use&#10;     * {@link Arrays#spliterator(int[])}.&#10;     *&#10;     * <p>The returned spliterator always reports the characteristics&#10;     * {@code SIZED} and {@code SUBSIZED}.  The caller may provide additional&#10;     * characteristics for the spliterator to report; it is common to&#10;     * additionally specify {@code IMMUTABLE} and {@code ORDERED}.&#10;     *&#10;     * @param array The array, assumed to be unmodified during use&#10;     * @param additionalCharacteristics Additional spliterator characteristics&#10;     *        of this spliterator's source or elements beyond {@code SIZED} and&#10;     *        {@code SUBSIZED} which are always reported&#10;     * @return A spliterator for an array&#10;     * @throws NullPointerException if the given array is {@code null}&#10;     * @see Arrays#spliterator(int[])&#10;     "
  ]
  node [
    id 2868
    label "public static Spliterator.OfInt spliterator(int[] array, int fromIndex, int toIndex, int additionalCharacteristics)"
    type "method"
    comment "&#10;     * Creates a {@code Spliterator.OfInt} covering a range of elements of a&#10;     * given array, using a customized set of spliterator characteristics.&#10;     *&#10;     * <p>This method is provided as an implementation convenience for&#10;     * Spliterators which store portions of their elements in arrays, and need&#10;     * fine control over Spliterator characteristics.  Most other situations in&#10;     * which a Spliterator for an array is needed should use&#10;     * {@link Arrays#spliterator(int[], int, int)}.&#10;     *&#10;     * <p>The returned spliterator always reports the characteristics&#10;     * {@code SIZED} and {@code SUBSIZED}.  The caller may provide additional&#10;     * characteristics for the spliterator to report; it is common to&#10;     * additionally specify {@code IMMUTABLE} and {@code ORDERED}.&#10;     *&#10;     * @param array The array, assumed to be unmodified during use&#10;     * @param fromIndex The least index (inclusive) to cover&#10;     * @param toIndex One past the greatest index to cover&#10;     * @param additionalCharacteristics Additional spliterator characteristics&#10;     *        of this spliterator's source or elements beyond {@code SIZED} and&#10;     *        {@code SUBSIZED} which are always reported&#10;     * @return A spliterator for an array&#10;     * @throws NullPointerException if the given array is {@code null}&#10;     * @throws ArrayIndexOutOfBoundsException if {@code fromIndex} is negative,&#10;     *         {@code toIndex} is less than {@code fromIndex}, or&#10;     *         {@code toIndex} is greater than the array size&#10;     * @see Arrays#spliterator(int[], int, int)&#10;     "
  ]
  node [
    id 2869
    label "public static Spliterator.OfLong spliterator(long[] array, int additionalCharacteristics)"
    type "method"
    comment "&#10;     * Creates a {@code Spliterator.OfLong} covering the elements of a given array,&#10;     * using a customized set of spliterator characteristics.&#10;     *&#10;     * <p>This method is provided as an implementation convenience for&#10;     * Spliterators which store portions of their elements in arrays, and need&#10;     * fine control over Spliterator characteristics.  Most other situations in&#10;     * which a Spliterator for an array is needed should use&#10;     * {@link Arrays#spliterator(long[])}.&#10;     *&#10;     * <p>The returned spliterator always reports the characteristics&#10;     * {@code SIZED} and {@code SUBSIZED}.  The caller may provide additional&#10;     * characteristics for the spliterator to report; it is common to&#10;     * additionally specify {@code IMMUTABLE} and {@code ORDERED}.&#10;     *&#10;     * @param array The array, assumed to be unmodified during use&#10;     * @param additionalCharacteristics Additional spliterator characteristics&#10;     *        of this spliterator's source or elements beyond {@code SIZED} and&#10;     *        {@code SUBSIZED} which are always reported&#10;     * @return A spliterator for an array&#10;     * @throws NullPointerException if the given array is {@code null}&#10;     * @see Arrays#spliterator(long[])&#10;     "
  ]
  node [
    id 2870
    label "public static Spliterator.OfLong spliterator(long[] array, int fromIndex, int toIndex, int additionalCharacteristics)"
    type "method"
    comment "&#10;     * Creates a {@code Spliterator.OfLong} covering a range of elements of a&#10;     * given array, using a customized set of spliterator characteristics.&#10;     *&#10;     * <p>This method is provided as an implementation convenience for&#10;     * Spliterators which store portions of their elements in arrays, and need&#10;     * fine control over Spliterator characteristics.  Most other situations in&#10;     * which a Spliterator for an array is needed should use&#10;     * {@link Arrays#spliterator(long[], int, int)}.&#10;     *&#10;     * <p>The returned spliterator always reports the characteristics&#10;     * {@code SIZED} and {@code SUBSIZED}.  The caller may provide additional&#10;     * characteristics for the spliterator to report.  (For example, if it is&#10;     * known the array will not be further modified, specify {@code IMMUTABLE};&#10;     * if the array data is considered to have an encounter order, specify&#10;     * {@code ORDERED}).  The method {@link Arrays#spliterator(long[], int, int)} can&#10;     * often be used instead, which returns a spliterator that reports&#10;     * {@code SIZED}, {@code SUBSIZED}, {@code IMMUTABLE}, and {@code ORDERED}.&#10;     *&#10;     * @param array The array, assumed to be unmodified during use&#10;     * @param fromIndex The least index (inclusive) to cover&#10;     * @param toIndex One past the greatest index to cover&#10;     * @param additionalCharacteristics Additional spliterator characteristics&#10;     *        of this spliterator's source or elements beyond {@code SIZED} and&#10;     *        {@code SUBSIZED} which are always reported&#10;     * @return A spliterator for an array&#10;     * @throws NullPointerException if the given array is {@code null}&#10;     * @throws ArrayIndexOutOfBoundsException if {@code fromIndex} is negative,&#10;     *         {@code toIndex} is less than {@code fromIndex}, or&#10;     *         {@code toIndex} is greater than the array size&#10;     * @see Arrays#spliterator(long[], int, int)&#10;     "
  ]
  node [
    id 2871
    label "public static Spliterator.OfDouble spliterator(double[] array, int additionalCharacteristics)"
    type "method"
    comment "&#10;     * Creates a {@code Spliterator.OfDouble} covering the elements of a given array,&#10;     * using a customized set of spliterator characteristics.&#10;     *&#10;     * <p>This method is provided as an implementation convenience for&#10;     * Spliterators which store portions of their elements in arrays, and need&#10;     * fine control over Spliterator characteristics.  Most other situations in&#10;     * which a Spliterator for an array is needed should use&#10;     * {@link Arrays#spliterator(double[])}.&#10;     *&#10;     * <p>The returned spliterator always reports the characteristics&#10;     * {@code SIZED} and {@code SUBSIZED}.  The caller may provide additional&#10;     * characteristics for the spliterator to report; it is common to&#10;     * additionally specify {@code IMMUTABLE} and {@code ORDERED}.&#10;     *&#10;     * @param array The array, assumed to be unmodified during use&#10;     * @param additionalCharacteristics Additional spliterator characteristics&#10;     *        of this spliterator's source or elements beyond {@code SIZED} and&#10;     *        {@code SUBSIZED} which are always reported&#10;     * @return A spliterator for an array&#10;     * @throws NullPointerException if the given array is {@code null}&#10;     * @see Arrays#spliterator(double[])&#10;     "
  ]
  node [
    id 2872
    label "public static Spliterator.OfDouble spliterator(double[] array, int fromIndex, int toIndex, int additionalCharacteristics)"
    type "method"
    comment "&#10;     * Creates a {@code Spliterator.OfDouble} covering a range of elements of a&#10;     * given array, using a customized set of spliterator characteristics.&#10;     *&#10;     * <p>This method is provided as an implementation convenience for&#10;     * Spliterators which store portions of their elements in arrays, and need&#10;     * fine control over Spliterator characteristics.  Most other situations in&#10;     * which a Spliterator for an array is needed should use&#10;     * {@link Arrays#spliterator(double[], int, int)}.&#10;     *&#10;     * <p>The returned spliterator always reports the characteristics&#10;     * {@code SIZED} and {@code SUBSIZED}.  The caller may provide additional&#10;     * characteristics for the spliterator to report.  (For example, if it is&#10;     * known the array will not be further modified, specify {@code IMMUTABLE};&#10;     * if the array data is considered to have an encounter order, specify&#10;     * {@code ORDERED}).  The method {@link Arrays#spliterator(long[], int, int)} can&#10;     * often be used instead, which returns a spliterator that reports&#10;     * {@code SIZED}, {@code SUBSIZED}, {@code IMMUTABLE}, and {@code ORDERED}.&#10;     *&#10;     * @param array The array, assumed to be unmodified during use&#10;     * @param fromIndex The least index (inclusive) to cover&#10;     * @param toIndex One past the greatest index to cover&#10;     * @param additionalCharacteristics Additional spliterator characteristics&#10;     *        of this spliterator's source or elements beyond {@code SIZED} and&#10;     *        {@code SUBSIZED} which are always reported&#10;     * @return A spliterator for an array&#10;     * @throws NullPointerException if the given array is {@code null}&#10;     * @throws ArrayIndexOutOfBoundsException if {@code fromIndex} is negative,&#10;     *         {@code toIndex} is less than {@code fromIndex}, or&#10;     *         {@code toIndex} is greater than the array size&#10;     * @see Arrays#spliterator(double[], int, int)&#10;     "
  ]
  node [
    id 2873
    label "private static void checkFromToBounds(int arrayLength, int origin, int fence)"
    type "method"
    comment "&#10;     * Validate inclusive start index and exclusive end index against the length&#10;     * of an array.&#10;     * @param arrayLength The length of the array&#10;     * @param origin The inclusive start index&#10;     * @param fence The exclusive end index&#10;     * @throws ArrayIndexOutOfBoundsException if the start index is greater than&#10;     * the end index, if the start index is negative, or the end index is&#10;     * greater than the array length&#10;     "
  ]
  node [
    id 2874
    label "public static Spliterator<T> spliterator(Collection<? extends T> c, int characteristics)"
    type "method"
    comment "&#10;     * Creates a {@code Spliterator} using the given collection's&#10;     * {@link java.util.Collection#iterator()} as the source of elements, and&#10;     * reporting its {@link java.util.Collection#size()} as its initial size.&#10;     *&#10;     * <p>The spliterator is&#10;     * <em><a href=&#34;Spliterator.html#binding&#34;>late-binding</a></em>, inherits&#10;     * the <em>fail-fast</em> properties of the collection's iterator, and&#10;     * implements {@code trySplit} to permit limited parallelism.&#10;     *&#10;     * @param <T> Type of elements&#10;     * @param c The collection&#10;     * @param characteristics Characteristics of this spliterator's source or&#10;     *        elements.  The characteristics {@code SIZED} and {@code SUBSIZED}&#10;     *        are additionally reported unless {@code CONCURRENT} is supplied.&#10;     * @return A spliterator from an iterator&#10;     * @throws NullPointerException if the given collection is {@code null}&#10;     "
  ]
  node [
    id 2875
    label "public static Spliterator<T> spliterator(Iterator<? extends T> iterator, long size, int characteristics)"
    type "method"
    comment "&#10;     * Creates a {@code Spliterator} using a given {@code Iterator}&#10;     * as the source of elements, and with a given initially reported size.&#10;     *&#10;     * <p>The spliterator is not&#10;     * <em><a href=&#34;Spliterator.html#binding&#34;>late-binding</a></em>, inherits&#10;     * the <em>fail-fast</em> properties of the iterator, and implements&#10;     * {@code trySplit} to permit limited parallelism.&#10;     *&#10;     * <p>Traversal of elements should be accomplished through the spliterator.&#10;     * The behaviour of splitting and traversal is undefined if the iterator is&#10;     * operated on after the spliterator is returned, or the initially reported&#10;     * size is not equal to the actual number of elements in the source.&#10;     *&#10;     * @param <T> Type of elements&#10;     * @param iterator The iterator for the source&#10;     * @param size The number of elements in the source, to be reported as&#10;     *        initial {@code estimateSize}&#10;     * @param characteristics Characteristics of this spliterator's source or&#10;     *        elements.  The characteristics {@code SIZED} and {@code SUBSIZED}&#10;     *        are additionally reported unless {@code CONCURRENT} is supplied.&#10;     * @return A spliterator from an iterator&#10;     * @throws NullPointerException if the given iterator is {@code null}&#10;     "
  ]
  node [
    id 2876
    label "public static Spliterator<T> spliteratorUnknownSize(Iterator<? extends T> iterator, int characteristics)"
    type "method"
    comment "&#10;     * Creates a {@code Spliterator} using a given {@code Iterator}&#10;     * as the source of elements, with no initial size estimate.&#10;     *&#10;     * <p>The spliterator is not&#10;     * <em><a href=&#34;Spliterator.html#binding&#34;>late-binding</a></em>, inherits&#10;     * the <em>fail-fast</em> properties of the iterator, and implements&#10;     * {@code trySplit} to permit limited parallelism.&#10;     *&#10;     * <p>Traversal of elements should be accomplished through the spliterator.&#10;     * The behaviour of splitting and traversal is undefined if the iterator is&#10;     * operated on after the spliterator is returned.&#10;     *&#10;     * @param <T> Type of elements&#10;     * @param iterator The iterator for the source&#10;     * @param characteristics Characteristics of this spliterator's source&#10;     *        or elements ({@code SIZED} and {@code SUBSIZED}, if supplied, are&#10;     *        ignored and are not reported.)&#10;     * @return A spliterator from an iterator&#10;     * @throws NullPointerException if the given iterator is {@code null}&#10;     "
  ]
  node [
    id 2877
    label "public static Spliterator.OfInt spliterator(PrimitiveIterator.OfInt iterator, long size, int characteristics)"
    type "method"
    comment "&#10;     * Creates a {@code Spliterator.OfInt} using a given&#10;     * {@code IntStream.IntIterator} as the source of elements, and with a given&#10;     * initially reported size.&#10;     *&#10;     * <p>The spliterator is not&#10;     * <em><a href=&#34;Spliterator.html#binding&#34;>late-binding</a></em>, inherits&#10;     * the <em>fail-fast</em> properties of the iterator, and implements&#10;     * {@code trySplit} to permit limited parallelism.&#10;     *&#10;     * <p>Traversal of elements should be accomplished through the spliterator.&#10;     * The behaviour of splitting and traversal is undefined if the iterator is&#10;     * operated on after the spliterator is returned, or the initially reported&#10;     * size is not equal to the actual number of elements in the source.&#10;     *&#10;     * @param iterator The iterator for the source&#10;     * @param size The number of elements in the source, to be reported as&#10;     *        initial {@code estimateSize}.&#10;     * @param characteristics Characteristics of this spliterator's source or&#10;     *        elements.  The characteristics {@code SIZED} and {@code SUBSIZED}&#10;     *        are additionally reported unless {@code CONCURRENT} is supplied.&#10;     * @return A spliterator from an iterator&#10;     * @throws NullPointerException if the given iterator is {@code null}&#10;     "
  ]
  node [
    id 2878
    label "public static Spliterator.OfInt spliteratorUnknownSize(PrimitiveIterator.OfInt iterator, int characteristics)"
    type "method"
    comment "&#10;     * Creates a {@code Spliterator.OfInt} using a given&#10;     * {@code IntStream.IntIterator} as the source of elements, with no initial&#10;     * size estimate.&#10;     *&#10;     * <p>The spliterator is not&#10;     * <em><a href=&#34;Spliterator.html#binding&#34;>late-binding</a></em>, inherits&#10;     * the <em>fail-fast</em> properties of the iterator, and implements&#10;     * {@code trySplit} to permit limited parallelism.&#10;     *&#10;     * <p>Traversal of elements should be accomplished through the spliterator.&#10;     * The behaviour of splitting and traversal is undefined if the iterator is&#10;     * operated on after the spliterator is returned.&#10;     *&#10;     * @param iterator The iterator for the source&#10;     * @param characteristics Characteristics of this spliterator's source&#10;     *        or elements ({@code SIZED} and {@code SUBSIZED}, if supplied, are&#10;     *        ignored and are not reported.)&#10;     * @return A spliterator from an iterator&#10;     * @throws NullPointerException if the given iterator is {@code null}&#10;     "
  ]
  node [
    id 2879
    label "public static Spliterator.OfLong spliterator(PrimitiveIterator.OfLong iterator, long size, int characteristics)"
    type "method"
    comment "&#10;     * Creates a {@code Spliterator.OfLong} using a given&#10;     * {@code LongStream.LongIterator} as the source of elements, and with a&#10;     * given initially reported size.&#10;     *&#10;     * <p>The spliterator is not&#10;     * <em><a href=&#34;Spliterator.html#binding&#34;>late-binding</a></em>, inherits&#10;     * the <em>fail-fast</em> properties of the iterator, and implements&#10;     * {@code trySplit} to permit limited parallelism.&#10;     *&#10;     * <p>Traversal of elements should be accomplished through the spliterator.&#10;     * The behaviour of splitting and traversal is undefined if the iterator is&#10;     * operated on after the spliterator is returned, or the initially reported&#10;     * size is not equal to the actual number of elements in the source.&#10;     *&#10;     * @param iterator The iterator for the source&#10;     * @param size The number of elements in the source, to be reported as&#10;     *        initial {@code estimateSize}.&#10;     * @param characteristics Characteristics of this spliterator's source or&#10;     *        elements.  The characteristics {@code SIZED} and {@code SUBSIZED}&#10;     *        are additionally reported unless {@code CONCURRENT} is supplied.&#10;     * @return A spliterator from an iterator&#10;     * @throws NullPointerException if the given iterator is {@code null}&#10;     "
  ]
  node [
    id 2880
    label "public static Spliterator.OfLong spliteratorUnknownSize(PrimitiveIterator.OfLong iterator, int characteristics)"
    type "method"
    comment "&#10;     * Creates a {@code Spliterator.OfLong} using a given&#10;     * {@code LongStream.LongIterator} as the source of elements, with no&#10;     * initial size estimate.&#10;     *&#10;     * <p>The spliterator is not&#10;     * <em><a href=&#34;Spliterator.html#binding&#34;>late-binding</a></em>, inherits&#10;     * the <em>fail-fast</em> properties of the iterator, and implements&#10;     * {@code trySplit} to permit limited parallelism.&#10;     *&#10;     * <p>Traversal of elements should be accomplished through the spliterator.&#10;     * The behaviour of splitting and traversal is undefined if the iterator is&#10;     * operated on after the spliterator is returned.&#10;     *&#10;     * @param iterator The iterator for the source&#10;     * @param characteristics Characteristics of this spliterator's source&#10;     *        or elements ({@code SIZED} and {@code SUBSIZED}, if supplied, are&#10;     *        ignored and are not reported.)&#10;     * @return A spliterator from an iterator&#10;     * @throws NullPointerException if the given iterator is {@code null}&#10;     "
  ]
  node [
    id 2881
    label "public static Spliterator.OfDouble spliterator(PrimitiveIterator.OfDouble iterator, long size, int characteristics)"
    type "method"
    comment "&#10;     * Creates a {@code Spliterator.OfDouble} using a given&#10;     * {@code DoubleStream.DoubleIterator} as the source of elements, and with a&#10;     * given initially reported size.&#10;     *&#10;     * <p>The spliterator is not&#10;     * <em><a href=&#34;Spliterator.html#binding&#34;>late-binding</a></em>, inherits&#10;     * the <em>fail-fast</em> properties of the iterator, and implements&#10;     * {@code trySplit} to permit limited parallelism.&#10;     *&#10;     * <p>Traversal of elements should be accomplished through the spliterator.&#10;     * The behaviour of splitting and traversal is undefined if the iterator is&#10;     * operated on after the spliterator is returned, or the initially reported&#10;     * size is not equal to the actual number of elements in the source.&#10;     *&#10;     * @param iterator The iterator for the source&#10;     * @param size The number of elements in the source, to be reported as&#10;     *        initial {@code estimateSize}&#10;     * @param characteristics Characteristics of this spliterator's source or&#10;     *        elements.  The characteristics {@code SIZED} and {@code SUBSIZED}&#10;     *        are additionally reported unless {@code CONCURRENT} is supplied.&#10;     * @return A spliterator from an iterator&#10;     * @throws NullPointerException if the given iterator is {@code null}&#10;     "
  ]
  node [
    id 2882
    label "public static Spliterator.OfDouble spliteratorUnknownSize(PrimitiveIterator.OfDouble iterator, int characteristics)"
    type "method"
    comment "&#10;     * Creates a {@code Spliterator.OfDouble} using a given&#10;     * {@code DoubleStream.DoubleIterator} as the source of elements, with no&#10;     * initial size estimate.&#10;     *&#10;     * <p>The spliterator is not&#10;     * <em><a href=&#34;Spliterator.html#binding&#34;>late-binding</a></em>, inherits&#10;     * the <em>fail-fast</em> properties of the iterator, and implements&#10;     * {@code trySplit} to permit limited parallelism.&#10;     *&#10;     * <p>Traversal of elements should be accomplished through the spliterator.&#10;     * The behaviour of splitting and traversal is undefined if the iterator is&#10;     * operated on after the spliterator is returned.&#10;     *&#10;     * @param iterator The iterator for the source&#10;     * @param characteristics Characteristics of this spliterator's source&#10;     *        or elements ({@code SIZED} and {@code SUBSIZED}, if supplied, are&#10;     *        ignored and are not reported.)&#10;     * @return A spliterator from an iterator&#10;     * @throws NullPointerException if the given iterator is {@code null}&#10;     "
  ]
  node [
    id 2883
    label "public static Iterator<T> iterator(Spliterator<? extends T> spliterator)"
    type "method"
    comment "&#10;     * Creates an {@code Iterator} from a {@code Spliterator}.&#10;     *&#10;     * <p>Traversal of elements should be accomplished through the iterator.&#10;     * The behaviour of traversal is undefined if the spliterator is operated&#10;     * after the iterator is returned.&#10;     *&#10;     * @param <T> Type of elements&#10;     * @param spliterator The spliterator&#10;     * @return An iterator&#10;     * @throws NullPointerException if the given spliterator is {@code null}&#10;     "
  ]
  node [
    id 2884
    label "public static PrimitiveIterator.OfInt iterator(Spliterator.OfInt spliterator)"
    type "method"
    comment "&#10;     * Creates an {@code PrimitiveIterator.OfInt} from a&#10;     * {@code Spliterator.OfInt}.&#10;     *&#10;     * <p>Traversal of elements should be accomplished through the iterator.&#10;     * The behaviour of traversal is undefined if the spliterator is operated&#10;     * after the iterator is returned.&#10;     *&#10;     * @param spliterator The spliterator&#10;     * @return An iterator&#10;     * @throws NullPointerException if the given spliterator is {@code null}&#10;     "
  ]
  node [
    id 2885
    label "public static PrimitiveIterator.OfLong iterator(Spliterator.OfLong spliterator)"
    type "method"
    comment "&#10;     * Creates an {@code PrimitiveIterator.OfLong} from a&#10;     * {@code Spliterator.OfLong}.&#10;     *&#10;     * <p>Traversal of elements should be accomplished through the iterator.&#10;     * The behaviour of traversal is undefined if the spliterator is operated&#10;     * after the iterator is returned.&#10;     *&#10;     * @param spliterator The spliterator&#10;     * @return An iterator&#10;     * @throws NullPointerException if the given spliterator is {@code null}&#10;     "
  ]
  node [
    id 2886
    label "public static PrimitiveIterator.OfDouble iterator(Spliterator.OfDouble spliterator)"
    type "method"
    comment "&#10;     * Creates an {@code PrimitiveIterator.OfDouble} from a&#10;     * {@code Spliterator.OfDouble}.&#10;     *&#10;     * <p>Traversal of elements should be accomplished through the iterator.&#10;     * The behaviour of traversal is undefined if the spliterator is operated&#10;     * after the iterator is returned.&#10;     *&#10;     * @param spliterator The spliterator&#10;     * @return An iterator&#10;     * @throws NullPointerException if the given spliterator is {@code null}&#10;     "
  ]
  node [
    id 2887
    label "parallelStream()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2888
    label "stream()"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2889
    label " Stream<E> stream()"
    type "method"
    comment "&#10;     * Returns a sequential {@code Stream} with this collection as its source.&#10;     *&#10;     * <p>This method should be overridden when the {@link #spliterator()}&#10;     * method cannot return a spliterator that is {@code IMMUTABLE},&#10;     * {@code CONCURRENT}, or <em>late-binding</em>. (See {@link #spliterator()}&#10;     * for details.)&#10;     *&#10;     * @implSpec&#10;     * The default implementation creates a sequential {@code Stream} from the&#10;     * collection's {@code Spliterator}.&#10;     *&#10;     * @return a sequential {@code Stream} over the elements in this collection&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 2890
    label " Stream<E> parallelStream()"
    type "method"
    comment "&#10;     * Returns a possibly parallel {@code Stream} with this collection as its&#10;     * source.  It is allowable for this method to return a sequential stream.&#10;     *&#10;     * <p>This method should be overridden when the {@link #spliterator()}&#10;     * method cannot return a spliterator that is {@code IMMUTABLE},&#10;     * {@code CONCURRENT}, or <em>late-binding</em>. (See {@link #spliterator()}&#10;     * for details.)&#10;     *&#10;     * @implSpec&#10;     * The default implementation creates a parallel {@code Stream} from the&#10;     * collection's {@code Spliterator}.&#10;     *&#10;     * @return a possibly parallel {@code Stream} over the elements in this&#10;     * collection&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 2891
    label " static Set<E> of()"
    type "method"
    comment "&#10;     * Returns an unmodifiable set containing zero elements.&#10;     * See <a href=&#34;#unmodifiable&#34;>Unmodifiable Sets</a> for details.&#10;     *&#10;     * @param <E> the {@code Set}'s element type&#10;     * @return an empty {@code Set}&#10;     *&#10;     * @since 9&#10;     "
  ]
  node [
    id 2892
    label " static Set<E> of(E e1)"
    type "method"
    comment "&#10;     * Returns an unmodifiable set containing one element.&#10;     * See <a href=&#34;#unmodifiable&#34;>Unmodifiable Sets</a> for details.&#10;     *&#10;     * @param <E> the {@code Set}'s element type&#10;     * @param e1 the single element&#10;     * @return a {@code Set} containing the specified element&#10;     * @throws NullPointerException if the element is {@code null}&#10;     *&#10;     * @since 9&#10;     "
  ]
  node [
    id 2893
    label " static Set<E> of(E e1, E e2)"
    type "method"
    comment "&#10;     * Returns an unmodifiable set containing two elements.&#10;     * See <a href=&#34;#unmodifiable&#34;>Unmodifiable Sets</a> for details.&#10;     *&#10;     * @param <E> the {@code Set}'s element type&#10;     * @param e1 the first element&#10;     * @param e2 the second element&#10;     * @return a {@code Set} containing the specified elements&#10;     * @throws IllegalArgumentException if the elements are duplicates&#10;     * @throws NullPointerException if an element is {@code null}&#10;     *&#10;     * @since 9&#10;     "
  ]
  node [
    id 2894
    label " static Set<E> of(E e1, E e2, E e3)"
    type "method"
    comment "&#10;     * Returns an unmodifiable set containing three elements.&#10;     * See <a href=&#34;#unmodifiable&#34;>Unmodifiable Sets</a> for details.&#10;     *&#10;     * @param <E> the {@code Set}'s element type&#10;     * @param e1 the first element&#10;     * @param e2 the second element&#10;     * @param e3 the third element&#10;     * @return a {@code Set} containing the specified elements&#10;     * @throws IllegalArgumentException if there are any duplicate elements&#10;     * @throws NullPointerException if an element is {@code null}&#10;     *&#10;     * @since 9&#10;     "
  ]
  node [
    id 2895
    label " static Set<E> of(E e1, E e2, E e3, E e4)"
    type "method"
    comment "&#10;     * Returns an unmodifiable set containing four elements.&#10;     * See <a href=&#34;#unmodifiable&#34;>Unmodifiable Sets</a> for details.&#10;     *&#10;     * @param <E> the {@code Set}'s element type&#10;     * @param e1 the first element&#10;     * @param e2 the second element&#10;     * @param e3 the third element&#10;     * @param e4 the fourth element&#10;     * @return a {@code Set} containing the specified elements&#10;     * @throws IllegalArgumentException if there are any duplicate elements&#10;     * @throws NullPointerException if an element is {@code null}&#10;     *&#10;     * @since 9&#10;     "
  ]
  node [
    id 2896
    label " static Set<E> of(E e1, E e2, E e3, E e4, E e5)"
    type "method"
    comment "&#10;     * Returns an unmodifiable set containing five elements.&#10;     * See <a href=&#34;#unmodifiable&#34;>Unmodifiable Sets</a> for details.&#10;     *&#10;     * @param <E> the {@code Set}'s element type&#10;     * @param e1 the first element&#10;     * @param e2 the second element&#10;     * @param e3 the third element&#10;     * @param e4 the fourth element&#10;     * @param e5 the fifth element&#10;     * @return a {@code Set} containing the specified elements&#10;     * @throws IllegalArgumentException if there are any duplicate elements&#10;     * @throws NullPointerException if an element is {@code null}&#10;     *&#10;     * @since 9&#10;     "
  ]
  node [
    id 2897
    label " static Set<E> of(E e1, E e2, E e3, E e4, E e5, E e6)"
    type "method"
    comment "&#10;     * Returns an unmodifiable set containing six elements.&#10;     * See <a href=&#34;#unmodifiable&#34;>Unmodifiable Sets</a> for details.&#10;     *&#10;     * @param <E> the {@code Set}'s element type&#10;     * @param e1 the first element&#10;     * @param e2 the second element&#10;     * @param e3 the third element&#10;     * @param e4 the fourth element&#10;     * @param e5 the fifth element&#10;     * @param e6 the sixth element&#10;     * @return a {@code Set} containing the specified elements&#10;     * @throws IllegalArgumentException if there are any duplicate elements&#10;     * @throws NullPointerException if an element is {@code null}&#10;     *&#10;     * @since 9&#10;     "
  ]
  node [
    id 2898
    label " static Set<E> of(E e1, E e2, E e3, E e4, E e5, E e6, E e7)"
    type "method"
    comment "&#10;     * Returns an unmodifiable set containing seven elements.&#10;     * See <a href=&#34;#unmodifiable&#34;>Unmodifiable Sets</a> for details.&#10;     *&#10;     * @param <E> the {@code Set}'s element type&#10;     * @param e1 the first element&#10;     * @param e2 the second element&#10;     * @param e3 the third element&#10;     * @param e4 the fourth element&#10;     * @param e5 the fifth element&#10;     * @param e6 the sixth element&#10;     * @param e7 the seventh element&#10;     * @return a {@code Set} containing the specified elements&#10;     * @throws IllegalArgumentException if there are any duplicate elements&#10;     * @throws NullPointerException if an element is {@code null}&#10;     *&#10;     * @since 9&#10;     "
  ]
  node [
    id 2899
    label " static Set<E> of(E e1, E e2, E e3, E e4, E e5, E e6, E e7, E e8)"
    type "method"
    comment "&#10;     * Returns an unmodifiable set containing eight elements.&#10;     * See <a href=&#34;#unmodifiable&#34;>Unmodifiable Sets</a> for details.&#10;     *&#10;     * @param <E> the {@code Set}'s element type&#10;     * @param e1 the first element&#10;     * @param e2 the second element&#10;     * @param e3 the third element&#10;     * @param e4 the fourth element&#10;     * @param e5 the fifth element&#10;     * @param e6 the sixth element&#10;     * @param e7 the seventh element&#10;     * @param e8 the eighth element&#10;     * @return a {@code Set} containing the specified elements&#10;     * @throws IllegalArgumentException if there are any duplicate elements&#10;     * @throws NullPointerException if an element is {@code null}&#10;     *&#10;     * @since 9&#10;     "
  ]
  node [
    id 2900
    label " static Set<E> of(E e1, E e2, E e3, E e4, E e5, E e6, E e7, E e8, E e9)"
    type "method"
    comment "&#10;     * Returns an unmodifiable set containing nine elements.&#10;     * See <a href=&#34;#unmodifiable&#34;>Unmodifiable Sets</a> for details.&#10;     *&#10;     * @param <E> the {@code Set}'s element type&#10;     * @param e1 the first element&#10;     * @param e2 the second element&#10;     * @param e3 the third element&#10;     * @param e4 the fourth element&#10;     * @param e5 the fifth element&#10;     * @param e6 the sixth element&#10;     * @param e7 the seventh element&#10;     * @param e8 the eighth element&#10;     * @param e9 the ninth element&#10;     * @return a {@code Set} containing the specified elements&#10;     * @throws IllegalArgumentException if there are any duplicate elements&#10;     * @throws NullPointerException if an element is {@code null}&#10;     *&#10;     * @since 9&#10;     "
  ]
  node [
    id 2901
    label " static Set<E> of(E e1, E e2, E e3, E e4, E e5, E e6, E e7, E e8, E e9, E e10)"
    type "method"
    comment "&#10;     * Returns an unmodifiable set containing ten elements.&#10;     * See <a href=&#34;#unmodifiable&#34;>Unmodifiable Sets</a> for details.&#10;     *&#10;     * @param <E> the {@code Set}'s element type&#10;     * @param e1 the first element&#10;     * @param e2 the second element&#10;     * @param e3 the third element&#10;     * @param e4 the fourth element&#10;     * @param e5 the fifth element&#10;     * @param e6 the sixth element&#10;     * @param e7 the seventh element&#10;     * @param e8 the eighth element&#10;     * @param e9 the ninth element&#10;     * @param e10 the tenth element&#10;     * @return a {@code Set} containing the specified elements&#10;     * @throws IllegalArgumentException if there are any duplicate elements&#10;     * @throws NullPointerException if an element is {@code null}&#10;     *&#10;     * @since 9&#10;     "
  ]
  node [
    id 2902
    label " static Set<E> of(E... elements)"
    type "method"
    comment "&#10;     * Returns an unmodifiable set containing an arbitrary number of elements.&#10;     * See <a href=&#34;#unmodifiable&#34;>Unmodifiable Sets</a> for details.&#10;     *&#10;     * @apiNote&#10;     * This method also accepts a single array as an argument. The element type of&#10;     * the resulting set will be the component type of the array, and the size of&#10;     * the set will be equal to the length of the array. To create a set with&#10;     * a single element that is an array, do the following:&#10;     *&#10;     * <pre>{@code&#10;     *     String[] array = ... ;&#10;     *     Set<String[]> list = Set.<String[]>of(array);&#10;     * }</pre>&#10;     *&#10;     * This will cause the {@link Set#of(Object) Set.of(E)} method&#10;     * to be invoked instead.&#10;     *&#10;     * @param <E> the {@code Set}'s element type&#10;     * @param elements the elements to be contained in the set&#10;     * @return a {@code Set} containing the specified elements&#10;     * @throws IllegalArgumentException if there are any duplicate elements&#10;     * @throws NullPointerException if an element is {@code null} or if the array is {@code null}&#10;     *&#10;     * @since 9&#10;     "
  ]
  node [
    id 2903
    label " static Set<E> copyOf(Collection<? extends E> coll)"
    type "method"
    comment "&#10;     * Returns an <a href=&#34;#unmodifiable&#34;>unmodifiable Set</a> containing the elements&#10;     * of the given Collection. The given Collection must not be null, and it must not&#10;     * contain any null elements. If the given Collection contains duplicate elements,&#10;     * an arbitrary element of the duplicates is preserved. If the given Collection is&#10;     * subsequently modified, the returned Set will not reflect such modifications.&#10;     *&#10;     * @implNote&#10;     * If the given Collection is an <a href=&#34;#unmodifiable&#34;>unmodifiable Set</a>,&#10;     * calling copyOf will generally not create a copy.&#10;     *&#10;     * @param <E> the {@code Set}'s element type&#10;     * @param coll a {@code Collection} from which elements are drawn, must be non-null&#10;     * @return a {@code Set} containing the elements of the given {@code Collection}&#10;     * @throws NullPointerException if coll is null, or if it contains any nulls&#10;     * @since 10&#10;     "
  ]
  node [
    id 2904
    label " Collection<V> values()"
    type "method"
    comment "&#10;     * Returns a {@link Collection} view of the values contained in this map.&#10;     * The collection is backed by the map, so changes to the map are&#10;     * reflected in the collection, and vice-versa.  If the map is&#10;     * modified while an iteration over the collection is in progress&#10;     * (except through the iterator's own {@code remove} operation),&#10;     * the results of the iteration are undefined.  The collection&#10;     * supports element removal, which removes the corresponding&#10;     * mapping from the map, via the {@code Iterator.remove},&#10;     * {@code Collection.remove}, {@code removeAll},&#10;     * {@code retainAll} and {@code clear} operations.  It does not&#10;     * support the {@code add} or {@code addAll} operations.&#10;     *&#10;     * @return a collection view of the values contained in this map&#10;     "
  ]
  node [
    id 2905
    label " Set<Map.Entry<K, V>> entrySet()"
    type "method"
    comment "&#10;     * Returns a {@link Set} view of the mappings contained in this map.&#10;     * The set is backed by the map, so changes to the map are&#10;     * reflected in the set, and vice-versa.  If the map is modified&#10;     * while an iteration over the set is in progress (except through&#10;     * the iterator's own {@code remove} operation, or through the&#10;     * {@code setValue} operation on a map entry returned by the&#10;     * iterator) the results of the iteration are undefined.  The set&#10;     * supports element removal, which removes the corresponding&#10;     * mapping from the map, via the {@code Iterator.remove},&#10;     * {@code Set.remove}, {@code removeAll}, {@code retainAll} and&#10;     * {@code clear} operations.  It does not support the&#10;     * {@code add} or {@code addAll} operations.&#10;     *&#10;     * @return a set view of the mappings contained in this map&#10;     "
  ]
  node [
    id 2906
    label " V getOrDefault(Object key, V defaultValue)"
    type "method"
    comment "&#10;     * {@inheritDoc}&#10;     *&#10;     * @implNote This implementation assumes that the ConcurrentMap cannot&#10;     * contain null values and {@code get()} returning null unambiguously means&#10;     * the key is absent. Implementations which support null values&#10;     * <strong>must</strong> override this default implementation.&#10;     *&#10;     * @throws ClassCastException {@inheritDoc}&#10;     * @throws NullPointerException {@inheritDoc}&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 2907
    label " void forEach(BiConsumer<? super K, ? super V> action)"
    type "method"
    comment "&#10;     * {@inheritDoc}&#10;     *&#10;     * @implSpec The default implementation is equivalent to, for this&#10;     * {@code map}:&#10;     * <pre> {@code&#10;     * for (Map.Entry<K,V> entry : map.entrySet()) {&#10;     *   action.accept(entry.getKey(), entry.getValue());&#10;     * }}</pre>&#10;     *&#10;     * @implNote The default implementation assumes that&#10;     * {@code IllegalStateException} thrown by {@code getKey()} or&#10;     * {@code getValue()} indicates that the entry has been removed and cannot&#10;     * be processed. Operation continues for subsequent entries.&#10;     *&#10;     * @throws NullPointerException {@inheritDoc}&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 2908
    label " void replaceAll(BiFunction<? super K, ? super V, ? extends V> function)"
    type "method"
    comment "&#10;     * {@inheritDoc}&#10;     *&#10;     * @implSpec&#10;     * <p>The default implementation is equivalent to, for this {@code map}:&#10;     * <pre> {@code&#10;     * for (Map.Entry<K,V> entry : map.entrySet()) {&#10;     *   K k;&#10;     *   V v;&#10;     *   do {&#10;     *     k = entry.getKey();&#10;     *     v = entry.getValue();&#10;     *   } while (!map.replace(k, v, function.apply(k, v)));&#10;     * }}</pre>&#10;     *&#10;     * The default implementation may retry these steps when multiple&#10;     * threads attempt updates including potentially calling the function&#10;     * repeatedly for a given key.&#10;     *&#10;     * <p>This implementation assumes that the ConcurrentMap cannot contain null&#10;     * values and {@code get()} returning null unambiguously means the key is&#10;     * absent. Implementations which support null values <strong>must</strong>&#10;     * override this default implementation.&#10;     *&#10;     * @throws UnsupportedOperationException {@inheritDoc}&#10;     * @throws NullPointerException {@inheritDoc}&#10;     * @throws ClassCastException {@inheritDoc}&#10;     * @throws IllegalArgumentException {@inheritDoc}&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 2909
    label " V putIfAbsent(K key, V value)"
    type "method"
    comment "&#10;     * If the specified key is not already associated&#10;     * with a value, associates it with the given value.&#10;     * This is equivalent to, for this {@code map}:&#10;     * <pre> {@code&#10;     * if (!map.containsKey(key))&#10;     *   return map.put(key, value);&#10;     * else&#10;     *   return map.get(key);}</pre>&#10;     *&#10;     * except that the action is performed atomically.&#10;     *&#10;     * @implNote This implementation intentionally re-abstracts the&#10;     * inappropriate default provided in {@code Map}.&#10;     *&#10;     * @param key key with which the specified value is to be associated&#10;     * @param value value to be associated with the specified key&#10;     * @return the previous value associated with the specified key, or&#10;     *         {@code null} if there was no mapping for the key.&#10;     *         (A {@code null} return can also indicate that the map&#10;     *         previously associated {@code null} with the key,&#10;     *         if the implementation supports null values.)&#10;     * @throws UnsupportedOperationException if the {@code put} operation&#10;     *         is not supported by this map&#10;     * @throws ClassCastException if the class of the specified key or value&#10;     *         prevents it from being stored in this map&#10;     * @throws NullPointerException if the specified key or value is null,&#10;     *         and this map does not permit null keys or values&#10;     * @throws IllegalArgumentException if some property of the specified key&#10;     *         or value prevents it from being stored in this map&#10;     "
  ]
  node [
    id 2910
    label " boolean remove(Object key, Object value)"
    type "method"
    comment "&#10;     * Removes the entry for a key only if currently mapped to a given value.&#10;     * This is equivalent to, for this {@code map}:&#10;     * <pre> {@code&#10;     * if (map.containsKey(key)&#10;     *     &#38;&#38; Objects.equals(map.get(key), value)) {&#10;     *   map.remove(key);&#10;     *   return true;&#10;     * } else {&#10;     *   return false;&#10;     * }}</pre>&#10;     *&#10;     * except that the action is performed atomically.&#10;     *&#10;     * @implNote This implementation intentionally re-abstracts the&#10;     * inappropriate default provided in {@code Map}.&#10;     *&#10;     * @param key key with which the specified value is associated&#10;     * @param value value expected to be associated with the specified key&#10;     * @return {@code true} if the value was removed&#10;     * @throws UnsupportedOperationException if the {@code remove} operation&#10;     *         is not supported by this map&#10;     * @throws ClassCastException if the key or value is of an inappropriate&#10;     *         type for this map&#10;     * (<a href=&#34;{@docRoot}/java.base/java/util/Collection.html#optional-restrictions&#34;>optional</a>)&#10;     * @throws NullPointerException if the specified key or value is null,&#10;     *         and this map does not permit null keys or values&#10;     * (<a href=&#34;{@docRoot}/java.base/java/util/Collection.html#optional-restrictions&#34;>optional</a>)&#10;     "
  ]
  node [
    id 2911
    label " boolean replace(K key, V oldValue, V newValue)"
    type "method"
    comment "&#10;     * Replaces the entry for a key only if currently mapped to a given value.&#10;     * This is equivalent to, for this {@code map}:&#10;     * <pre> {@code&#10;     * if (map.containsKey(key)&#10;     *     &#38;&#38; Objects.equals(map.get(key), oldValue)) {&#10;     *   map.put(key, newValue);&#10;     *   return true;&#10;     * } else {&#10;     *   return false;&#10;     * }}</pre>&#10;     *&#10;     * except that the action is performed atomically.&#10;     *&#10;     * @implNote This implementation intentionally re-abstracts the&#10;     * inappropriate default provided in {@code Map}.&#10;     *&#10;     * @param key key with which the specified value is associated&#10;     * @param oldValue value expected to be associated with the specified key&#10;     * @param newValue value to be associated with the specified key&#10;     * @return {@code true} if the value was replaced&#10;     * @throws UnsupportedOperationException if the {@code put} operation&#10;     *         is not supported by this map&#10;     * @throws ClassCastException if the class of a specified key or value&#10;     *         prevents it from being stored in this map&#10;     * @throws NullPointerException if a specified key or value is null,&#10;     *         and this map does not permit null keys or values&#10;     * @throws IllegalArgumentException if some property of a specified key&#10;     *         or value prevents it from being stored in this map&#10;     "
  ]
  node [
    id 2912
    label " V replace(K key, V value)"
    type "method"
    comment "&#10;     * Replaces the entry for a key only if currently mapped to some value.&#10;     * This is equivalent to, for this {@code map}:&#10;     * <pre> {@code&#10;     * if (map.containsKey(key))&#10;     *   return map.put(key, value);&#10;     * else&#10;     *   return null;}</pre>&#10;     *&#10;     * except that the action is performed atomically.&#10;     *&#10;     * @implNote This implementation intentionally re-abstracts the&#10;     * inappropriate default provided in {@code Map}.&#10;     *&#10;     * @param key key with which the specified value is associated&#10;     * @param value value to be associated with the specified key&#10;     * @return the previous value associated with the specified key, or&#10;     *         {@code null} if there was no mapping for the key.&#10;     *         (A {@code null} return can also indicate that the map&#10;     *         previously associated {@code null} with the key,&#10;     *         if the implementation supports null values.)&#10;     * @throws UnsupportedOperationException if the {@code put} operation&#10;     *         is not supported by this map&#10;     * @throws ClassCastException if the class of the specified key or value&#10;     *         prevents it from being stored in this map&#10;     * @throws NullPointerException if the specified key or value is null,&#10;     *         and this map does not permit null keys or values&#10;     * @throws IllegalArgumentException if some property of the specified key&#10;     *         or value prevents it from being stored in this map&#10;     "
  ]
  node [
    id 2913
    label " V computeIfAbsent(K key, Function<? super K, ? extends V> mappingFunction)"
    type "method"
    comment "&#10;     * {@inheritDoc}&#10;     *&#10;     * @implSpec&#10;     * The default implementation is equivalent to the following steps for this&#10;     * {@code map}:&#10;     *&#10;     * <pre> {@code&#10;     * V oldValue, newValue;&#10;     * return ((oldValue = map.get(key)) == null&#10;     *         &#38;&#38; (newValue = mappingFunction.apply(key)) != null&#10;     *         &#38;&#38; (oldValue = map.putIfAbsent(key, newValue)) == null)&#10;     *   ? newValue&#10;     *   : oldValue;}</pre>&#10;     *&#10;     * <p>This implementation assumes that the ConcurrentMap cannot contain null&#10;     * values and {@code get()} returning null unambiguously means the key is&#10;     * absent. Implementations which support null values <strong>must</strong>&#10;     * override this default implementation.&#10;     *&#10;     * @throws UnsupportedOperationException {@inheritDoc}&#10;     * @throws ClassCastException {@inheritDoc}&#10;     * @throws NullPointerException {@inheritDoc}&#10;     * @throws IllegalArgumentException {@inheritDoc}&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 2914
    label "java.util.concurrent.ConcurrentMap"
    type "class"
    comment "&#10; * A {@link Map} providing thread safety and atomicity guarantees.&#10; *&#10; * <p>To maintain the specified guarantees, default implementations of&#10; * methods including {@link #putIfAbsent} inherited from {@link Map}&#10; * must be overridden by implementations of this interface. Similarly,&#10; * implementations of the collections returned by methods {@link&#10; * #keySet}, {@link #values}, and {@link #entrySet} must override&#10; * methods such as {@code removeIf} when necessary to&#10; * preserve atomicity guarantees.&#10; *&#10; * <p>Memory consistency effects: As with other concurrent&#10; * collections, actions in a thread prior to placing an object into a&#10; * {@code ConcurrentMap} as a key or value&#10; * <a href=&#34;package-summary.html#MemoryVisibility&#34;><i>happen-before</i></a>&#10; * actions subsequent to the access or removal of that object from&#10; * the {@code ConcurrentMap} in another thread.&#10; *&#10; * <p>This interface is a member of the&#10; * <a href=&#34;{@docRoot}/java.base/java/util/package-summary.html#CollectionsFramework&#34;>&#10; * Java Collections Framework</a>.&#10; *&#10; * @since 1.5&#10; * @author Doug Lea&#10; * @param <K> the type of keys maintained by this map&#10; * @param <V> the type of mapped values&#10; "
  ]
  node [
    id 2915
    label " V computeIfPresent(K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction)"
    type "method"
    comment "&#10;     * If the value for the specified key is present and non-null, attempts to&#10;     * compute a new mapping given the key and its current mapped value.&#10;     *&#10;     * <p>If the remapping function returns {@code null}, the mapping is removed.&#10;     * If the remapping function itself throws an (unchecked) exception, the&#10;     * exception is rethrown, and the current mapping is left unchanged.&#10;     *&#10;     * <p>The remapping function should not modify this map during computation.&#10;     *&#10;     * @implSpec&#10;     * The default implementation is equivalent to performing the following&#10;     * steps for this {@code map}, then returning the current value or&#10;     * {@code null} if now absent:&#10;     *&#10;     * <pre> {@code&#10;     * if (map.get(key) != null) {&#10;     *     V oldValue = map.get(key);&#10;     *     V newValue = remappingFunction.apply(key, oldValue);&#10;     *     if (newValue != null)&#10;     *         map.put(key, newValue);&#10;     *     else&#10;     *         map.remove(key);&#10;     * }&#10;     * }</pre>&#10;     *&#10;     * <p>The default implementation makes no guarantees about detecting if the&#10;     * remapping function modifies this map during computation and, if&#10;     * appropriate, reporting an error. Non-concurrent implementations should&#10;     * override this method and, on a best-effort basis, throw a&#10;     * {@code ConcurrentModificationException} if it is detected that the&#10;     * remapping function modifies this map during computation. Concurrent&#10;     * implementations should override this method and, on a best-effort basis,&#10;     * throw an {@code IllegalStateException} if it is detected that the&#10;     * remapping function modifies this map during computation and as a result&#10;     * computation would never complete.&#10;     *&#10;     * <p>The default implementation makes no guarantees about synchronization&#10;     * or atomicity properties of this method. Any implementation providing&#10;     * atomicity guarantees must override this method and document its&#10;     * concurrency properties. In particular, all implementations of&#10;     * subinterface {@link java.util.concurrent.ConcurrentMap} must document&#10;     * whether the remapping function is applied once atomically only if the&#10;     * value is not present.&#10;     *&#10;     * @param key key with which the specified value is to be associated&#10;     * @param remappingFunction the remapping function to compute a value&#10;     * @return the new value associated with the specified key, or null if none&#10;     * @throws NullPointerException if the specified key is null and&#10;     *         this map does not support null keys, or the&#10;     *         remappingFunction is null&#10;     * @throws UnsupportedOperationException if the {@code put} operation&#10;     *         is not supported by this map&#10;     *         (<a href=&#34;{@docRoot}/java.base/java/util/Collection.html#optional-restrictions&#34;>optional</a>)&#10;     * @throws ClassCastException if the class of the specified key or value&#10;     *         prevents it from being stored in this map&#10;     *         (<a href=&#34;{@docRoot}/java.base/java/util/Collection.html#optional-restrictions&#34;>optional</a>)&#10;     * @throws IllegalArgumentException if some property of the specified key&#10;     *         or value prevents it from being stored in this map&#10;     *         (<a href=&#34;{@docRoot}/java.base/java/util/Collection.html#optional-restrictions&#34;>optional</a>)&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 2916
    label " V compute(K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction)"
    type "method"
    comment "&#10;     * Attempts to compute a mapping for the specified key and its current&#10;     * mapped value (or {@code null} if there is no current mapping). For&#10;     * example, to either create or append a {@code String} msg to a value&#10;     * mapping:&#10;     *&#10;     * <pre> {@code&#10;     * map.compute(key, (k, v) -> (v == null) ? msg : v.concat(msg))}</pre>&#10;     * (Method {@link #merge merge()} is often simpler to use for such purposes.)&#10;     *&#10;     * <p>If the remapping function returns {@code null}, the mapping is removed&#10;     * (or remains absent if initially absent).  If the remapping function&#10;     * itself throws an (unchecked) exception, the exception is rethrown, and&#10;     * the current mapping is left unchanged.&#10;     *&#10;     * <p>The remapping function should not modify this map during computation.&#10;     *&#10;     * @implSpec&#10;     * The default implementation is equivalent to performing the following&#10;     * steps for this {@code map}:&#10;     *&#10;     * <pre> {@code&#10;     * V oldValue = map.get(key);&#10;     * V newValue = remappingFunction.apply(key, oldValue);&#10;     * if (newValue != null) {&#10;     *     map.put(key, newValue);&#10;     * } else if (oldValue != null || map.containsKey(key)) {&#10;     *     map.remove(key);&#10;     * }&#10;     * return newValue;&#10;     * }</pre>&#10;     *&#10;     * <p>The default implementation makes no guarantees about detecting if the&#10;     * remapping function modifies this map during computation and, if&#10;     * appropriate, reporting an error. Non-concurrent implementations should&#10;     * override this method and, on a best-effort basis, throw a&#10;     * {@code ConcurrentModificationException} if it is detected that the&#10;     * remapping function modifies this map during computation. Concurrent&#10;     * implementations should override this method and, on a best-effort basis,&#10;     * throw an {@code IllegalStateException} if it is detected that the&#10;     * remapping function modifies this map during computation and as a result&#10;     * computation would never complete.&#10;     *&#10;     * <p>The default implementation makes no guarantees about synchronization&#10;     * or atomicity properties of this method. Any implementation providing&#10;     * atomicity guarantees must override this method and document its&#10;     * concurrency properties. In particular, all implementations of&#10;     * subinterface {@link java.util.concurrent.ConcurrentMap} must document&#10;     * whether the remapping function is applied once atomically only if the&#10;     * value is not present.&#10;     *&#10;     * @param key key with which the specified value is to be associated&#10;     * @param remappingFunction the remapping function to compute a value&#10;     * @return the new value associated with the specified key, or null if none&#10;     * @throws NullPointerException if the specified key is null and&#10;     *         this map does not support null keys, or the&#10;     *         remappingFunction is null&#10;     * @throws UnsupportedOperationException if the {@code put} operation&#10;     *         is not supported by this map&#10;     *         (<a href=&#34;{@docRoot}/java.base/java/util/Collection.html#optional-restrictions&#34;>optional</a>)&#10;     * @throws ClassCastException if the class of the specified key or value&#10;     *         prevents it from being stored in this map&#10;     *         (<a href=&#34;{@docRoot}/java.base/java/util/Collection.html#optional-restrictions&#34;>optional</a>)&#10;     * @throws IllegalArgumentException if some property of the specified key&#10;     *         or value prevents it from being stored in this map&#10;     *         (<a href=&#34;{@docRoot}/java.base/java/util/Collection.html#optional-restrictions&#34;>optional</a>)&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 2917
    label " V merge(K key, V value, BiFunction<? super V, ? super V, ? extends V> remappingFunction)"
    type "method"
    comment "&#10;     * If the specified key is not already associated with a value or is&#10;     * associated with null, associates it with the given non-null value.&#10;     * Otherwise, replaces the associated value with the results of the given&#10;     * remapping function, or removes if the result is {@code null}. This&#10;     * method may be of use when combining multiple mapped values for a key.&#10;     * For example, to either create or append a {@code String msg} to a&#10;     * value mapping:&#10;     *&#10;     * <pre> {@code&#10;     * map.merge(key, msg, String::concat)&#10;     * }</pre>&#10;     *&#10;     * <p>If the remapping function returns {@code null}, the mapping is removed.&#10;     * If the remapping function itself throws an (unchecked) exception, the&#10;     * exception is rethrown, and the current mapping is left unchanged.&#10;     *&#10;     * <p>The remapping function should not modify this map during computation.&#10;     *&#10;     * @implSpec&#10;     * The default implementation is equivalent to performing the following&#10;     * steps for this {@code map}, then returning the current value or&#10;     * {@code null} if absent:&#10;     *&#10;     * <pre> {@code&#10;     * V oldValue = map.get(key);&#10;     * V newValue = (oldValue == null) ? value :&#10;     *              remappingFunction.apply(oldValue, value);&#10;     * if (newValue == null)&#10;     *     map.remove(key);&#10;     * else&#10;     *     map.put(key, newValue);&#10;     * }</pre>&#10;     *&#10;     * <p>The default implementation makes no guarantees about detecting if the&#10;     * remapping function modifies this map during computation and, if&#10;     * appropriate, reporting an error. Non-concurrent implementations should&#10;     * override this method and, on a best-effort basis, throw a&#10;     * {@code ConcurrentModificationException} if it is detected that the&#10;     * remapping function modifies this map during computation. Concurrent&#10;     * implementations should override this method and, on a best-effort basis,&#10;     * throw an {@code IllegalStateException} if it is detected that the&#10;     * remapping function modifies this map during computation and as a result&#10;     * computation would never complete.&#10;     *&#10;     * <p>The default implementation makes no guarantees about synchronization&#10;     * or atomicity properties of this method. Any implementation providing&#10;     * atomicity guarantees must override this method and document its&#10;     * concurrency properties. In particular, all implementations of&#10;     * subinterface {@link java.util.concurrent.ConcurrentMap} must document&#10;     * whether the remapping function is applied once atomically only if the&#10;     * value is not present.&#10;     *&#10;     * @param key key with which the resulting value is to be associated&#10;     * @param value the non-null value to be merged with the existing value&#10;     *        associated with the key or, if no existing value or a null value&#10;     *        is associated with the key, to be associated with the key&#10;     * @param remappingFunction the remapping function to recompute a value if&#10;     *        present&#10;     * @return the new value associated with the specified key, or null if no&#10;     *         value is associated with the key&#10;     * @throws UnsupportedOperationException if the {@code put} operation&#10;     *         is not supported by this map&#10;     *         (<a href=&#34;{@docRoot}/java.base/java/util/Collection.html#optional-restrictions&#34;>optional</a>)&#10;     * @throws ClassCastException if the class of the specified key or value&#10;     *         prevents it from being stored in this map&#10;     *         (<a href=&#34;{@docRoot}/java.base/java/util/Collection.html#optional-restrictions&#34;>optional</a>)&#10;     * @throws IllegalArgumentException if some property of the specified key&#10;     *         or value prevents it from being stored in this map&#10;     *         (<a href=&#34;{@docRoot}/java.base/java/util/Collection.html#optional-restrictions&#34;>optional</a>)&#10;     * @throws NullPointerException if the specified key is null and this map&#10;     *         does not support null keys or the value or remappingFunction is&#10;     *         null&#10;     * @since 1.8&#10;     "
  ]
  node [
    id 2918
    label "merge"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2919
    label " static Map<K, V> of()"
    type "method"
    comment "&#10;     * Returns an unmodifiable map containing zero mappings.&#10;     * See <a href=&#34;#unmodifiable&#34;>Unmodifiable Maps</a> for details.&#10;     *&#10;     * @param <K> the {@code Map}'s key type&#10;     * @param <V> the {@code Map}'s value type&#10;     * @return an empty {@code Map}&#10;     *&#10;     * @since 9&#10;     "
  ]
  node [
    id 2920
    label " static Map<K, V> of(K k1, V v1)"
    type "method"
    comment "&#10;     * Returns an unmodifiable map containing a single mapping.&#10;     * See <a href=&#34;#unmodifiable&#34;>Unmodifiable Maps</a> for details.&#10;     *&#10;     * @param <K> the {@code Map}'s key type&#10;     * @param <V> the {@code Map}'s value type&#10;     * @param k1 the mapping's key&#10;     * @param v1 the mapping's value&#10;     * @return a {@code Map} containing the specified mapping&#10;     * @throws NullPointerException if the key or the value is {@code null}&#10;     *&#10;     * @since 9&#10;     "
  ]
  node [
    id 2921
    label " static Map<K, V> of(K k1, V v1, K k2, V v2)"
    type "method"
    comment "&#10;     * Returns an unmodifiable map containing two mappings.&#10;     * See <a href=&#34;#unmodifiable&#34;>Unmodifiable Maps</a> for details.&#10;     *&#10;     * @param <K> the {@code Map}'s key type&#10;     * @param <V> the {@code Map}'s value type&#10;     * @param k1 the first mapping's key&#10;     * @param v1 the first mapping's value&#10;     * @param k2 the second mapping's key&#10;     * @param v2 the second mapping's value&#10;     * @return a {@code Map} containing the specified mappings&#10;     * @throws IllegalArgumentException if the keys are duplicates&#10;     * @throws NullPointerException if any key or value is {@code null}&#10;     *&#10;     * @since 9&#10;     "
  ]
  node [
    id 2922
    label " static Map<K, V> of(K k1, V v1, K k2, V v2, K k3, V v3)"
    type "method"
    comment "&#10;     * Returns an unmodifiable map containing three mappings.&#10;     * See <a href=&#34;#unmodifiable&#34;>Unmodifiable Maps</a> for details.&#10;     *&#10;     * @param <K> the {@code Map}'s key type&#10;     * @param <V> the {@code Map}'s value type&#10;     * @param k1 the first mapping's key&#10;     * @param v1 the first mapping's value&#10;     * @param k2 the second mapping's key&#10;     * @param v2 the second mapping's value&#10;     * @param k3 the third mapping's key&#10;     * @param v3 the third mapping's value&#10;     * @return a {@code Map} containing the specified mappings&#10;     * @throws IllegalArgumentException if there are any duplicate keys&#10;     * @throws NullPointerException if any key or value is {@code null}&#10;     *&#10;     * @since 9&#10;     "
  ]
  node [
    id 2923
    label " static Map<K, V> of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4)"
    type "method"
    comment "&#10;     * Returns an unmodifiable map containing four mappings.&#10;     * See <a href=&#34;#unmodifiable&#34;>Unmodifiable Maps</a> for details.&#10;     *&#10;     * @param <K> the {@code Map}'s key type&#10;     * @param <V> the {@code Map}'s value type&#10;     * @param k1 the first mapping's key&#10;     * @param v1 the first mapping's value&#10;     * @param k2 the second mapping's key&#10;     * @param v2 the second mapping's value&#10;     * @param k3 the third mapping's key&#10;     * @param v3 the third mapping's value&#10;     * @param k4 the fourth mapping's key&#10;     * @param v4 the fourth mapping's value&#10;     * @return a {@code Map} containing the specified mappings&#10;     * @throws IllegalArgumentException if there are any duplicate keys&#10;     * @throws NullPointerException if any key or value is {@code null}&#10;     *&#10;     * @since 9&#10;     "
  ]
  node [
    id 2924
    label " static Map<K, V> of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)"
    type "method"
    comment "&#10;     * Returns an unmodifiable map containing five mappings.&#10;     * See <a href=&#34;#unmodifiable&#34;>Unmodifiable Maps</a> for details.&#10;     *&#10;     * @param <K> the {@code Map}'s key type&#10;     * @param <V> the {@code Map}'s value type&#10;     * @param k1 the first mapping's key&#10;     * @param v1 the first mapping's value&#10;     * @param k2 the second mapping's key&#10;     * @param v2 the second mapping's value&#10;     * @param k3 the third mapping's key&#10;     * @param v3 the third mapping's value&#10;     * @param k4 the fourth mapping's key&#10;     * @param v4 the fourth mapping's value&#10;     * @param k5 the fifth mapping's key&#10;     * @param v5 the fifth mapping's value&#10;     * @return a {@code Map} containing the specified mappings&#10;     * @throws IllegalArgumentException if there are any duplicate keys&#10;     * @throws NullPointerException if any key or value is {@code null}&#10;     *&#10;     * @since 9&#10;     "
  ]
  node [
    id 2925
    label " static Map<K, V> of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5, K k6, V v6)"
    type "method"
    comment "&#10;     * Returns an unmodifiable map containing six mappings.&#10;     * See <a href=&#34;#unmodifiable&#34;>Unmodifiable Maps</a> for details.&#10;     *&#10;     * @param <K> the {@code Map}'s key type&#10;     * @param <V> the {@code Map}'s value type&#10;     * @param k1 the first mapping's key&#10;     * @param v1 the first mapping's value&#10;     * @param k2 the second mapping's key&#10;     * @param v2 the second mapping's value&#10;     * @param k3 the third mapping's key&#10;     * @param v3 the third mapping's value&#10;     * @param k4 the fourth mapping's key&#10;     * @param v4 the fourth mapping's value&#10;     * @param k5 the fifth mapping's key&#10;     * @param v5 the fifth mapping's value&#10;     * @param k6 the sixth mapping's key&#10;     * @param v6 the sixth mapping's value&#10;     * @return a {@code Map} containing the specified mappings&#10;     * @throws IllegalArgumentException if there are any duplicate keys&#10;     * @throws NullPointerException if any key or value is {@code null}&#10;     *&#10;     * @since 9&#10;     "
  ]
  node [
    id 2926
    label " static Map<K, V> of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5, K k6, V v6, K k7, V v7)"
    type "method"
    comment "&#10;     * Returns an unmodifiable map containing seven mappings.&#10;     * See <a href=&#34;#unmodifiable&#34;>Unmodifiable Maps</a> for details.&#10;     *&#10;     * @param <K> the {@code Map}'s key type&#10;     * @param <V> the {@code Map}'s value type&#10;     * @param k1 the first mapping's key&#10;     * @param v1 the first mapping's value&#10;     * @param k2 the second mapping's key&#10;     * @param v2 the second mapping's value&#10;     * @param k3 the third mapping's key&#10;     * @param v3 the third mapping's value&#10;     * @param k4 the fourth mapping's key&#10;     * @param v4 the fourth mapping's value&#10;     * @param k5 the fifth mapping's key&#10;     * @param v5 the fifth mapping's value&#10;     * @param k6 the sixth mapping's key&#10;     * @param v6 the sixth mapping's value&#10;     * @param k7 the seventh mapping's key&#10;     * @param v7 the seventh mapping's value&#10;     * @return a {@code Map} containing the specified mappings&#10;     * @throws IllegalArgumentException if there are any duplicate keys&#10;     * @throws NullPointerException if any key or value is {@code null}&#10;     *&#10;     * @since 9&#10;     "
  ]
  node [
    id 2927
    label " static Map<K, V> of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5, K k6, V v6, K k7, V v7, K k8, V v8)"
    type "method"
    comment "&#10;     * Returns an unmodifiable map containing eight mappings.&#10;     * See <a href=&#34;#unmodifiable&#34;>Unmodifiable Maps</a> for details.&#10;     *&#10;     * @param <K> the {@code Map}'s key type&#10;     * @param <V> the {@code Map}'s value type&#10;     * @param k1 the first mapping's key&#10;     * @param v1 the first mapping's value&#10;     * @param k2 the second mapping's key&#10;     * @param v2 the second mapping's value&#10;     * @param k3 the third mapping's key&#10;     * @param v3 the third mapping's value&#10;     * @param k4 the fourth mapping's key&#10;     * @param v4 the fourth mapping's value&#10;     * @param k5 the fifth mapping's key&#10;     * @param v5 the fifth mapping's value&#10;     * @param k6 the sixth mapping's key&#10;     * @param v6 the sixth mapping's value&#10;     * @param k7 the seventh mapping's key&#10;     * @param v7 the seventh mapping's value&#10;     * @param k8 the eighth mapping's key&#10;     * @param v8 the eighth mapping's value&#10;     * @return a {@code Map} containing the specified mappings&#10;     * @throws IllegalArgumentException if there are any duplicate keys&#10;     * @throws NullPointerException if any key or value is {@code null}&#10;     *&#10;     * @since 9&#10;     "
  ]
  node [
    id 2928
    label " static Map<K, V> of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5, K k6, V v6, K k7, V v7, K k8, V v8, K k9, V v9)"
    type "method"
    comment "&#10;     * Returns an unmodifiable map containing nine mappings.&#10;     * See <a href=&#34;#unmodifiable&#34;>Unmodifiable Maps</a> for details.&#10;     *&#10;     * @param <K> the {@code Map}'s key type&#10;     * @param <V> the {@code Map}'s value type&#10;     * @param k1 the first mapping's key&#10;     * @param v1 the first mapping's value&#10;     * @param k2 the second mapping's key&#10;     * @param v2 the second mapping's value&#10;     * @param k3 the third mapping's key&#10;     * @param v3 the third mapping's value&#10;     * @param k4 the fourth mapping's key&#10;     * @param v4 the fourth mapping's value&#10;     * @param k5 the fifth mapping's key&#10;     * @param v5 the fifth mapping's value&#10;     * @param k6 the sixth mapping's key&#10;     * @param v6 the sixth mapping's value&#10;     * @param k7 the seventh mapping's key&#10;     * @param v7 the seventh mapping's value&#10;     * @param k8 the eighth mapping's key&#10;     * @param v8 the eighth mapping's value&#10;     * @param k9 the ninth mapping's key&#10;     * @param v9 the ninth mapping's value&#10;     * @return a {@code Map} containing the specified mappings&#10;     * @throws IllegalArgumentException if there are any duplicate keys&#10;     * @throws NullPointerException if any key or value is {@code null}&#10;     *&#10;     * @since 9&#10;     "
  ]
  node [
    id 2929
    label " static Map<K, V> of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5, K k6, V v6, K k7, V v7, K k8, V v8, K k9, V v9, K k10, V v10)"
    type "method"
    comment "&#10;     * Returns an unmodifiable map containing ten mappings.&#10;     * See <a href=&#34;#unmodifiable&#34;>Unmodifiable Maps</a> for details.&#10;     *&#10;     * @param <K> the {@code Map}'s key type&#10;     * @param <V> the {@code Map}'s value type&#10;     * @param k1 the first mapping's key&#10;     * @param v1 the first mapping's value&#10;     * @param k2 the second mapping's key&#10;     * @param v2 the second mapping's value&#10;     * @param k3 the third mapping's key&#10;     * @param v3 the third mapping's value&#10;     * @param k4 the fourth mapping's key&#10;     * @param v4 the fourth mapping's value&#10;     * @param k5 the fifth mapping's key&#10;     * @param v5 the fifth mapping's value&#10;     * @param k6 the sixth mapping's key&#10;     * @param v6 the sixth mapping's value&#10;     * @param k7 the seventh mapping's key&#10;     * @param v7 the seventh mapping's value&#10;     * @param k8 the eighth mapping's key&#10;     * @param v8 the eighth mapping's value&#10;     * @param k9 the ninth mapping's key&#10;     * @param v9 the ninth mapping's value&#10;     * @param k10 the tenth mapping's key&#10;     * @param v10 the tenth mapping's value&#10;     * @return a {@code Map} containing the specified mappings&#10;     * @throws IllegalArgumentException if there are any duplicate keys&#10;     * @throws NullPointerException if any key or value is {@code null}&#10;     *&#10;     * @since 9&#10;     "
  ]
  node [
    id 2930
    label " static Map<K, V> ofEntries(Entry<? extends K, ? extends V>... entries)"
    type "method"
    comment "&#10;     * Returns an unmodifiable map containing keys and values extracted from the given entries.&#10;     * The entries themselves are not stored in the map.&#10;     * See <a href=&#34;#unmodifiable&#34;>Unmodifiable Maps</a> for details.&#10;     *&#10;     * @apiNote&#10;     * It is convenient to create the map entries using the {@link Map#entry Map.entry()} method.&#10;     * For example,&#10;     *&#10;     * <pre>{@code&#10;     *     import static java.util.Map.entry;&#10;     *&#10;     *     Map<Integer,String> map = Map.ofEntries(&#10;     *         entry(1, &#34;a&#34;),&#10;     *         entry(2, &#34;b&#34;),&#10;     *         entry(3, &#34;c&#34;),&#10;     *         ...&#10;     *         entry(26, &#34;z&#34;));&#10;     * }</pre>&#10;     *&#10;     * @param <K> the {@code Map}'s key type&#10;     * @param <V> the {@code Map}'s value type&#10;     * @param entries {@code Map.Entry}s containing the keys and values from which the map is populated&#10;     * @return a {@code Map} containing the specified mappings&#10;     * @throws IllegalArgumentException if there are any duplicate keys&#10;     * @throws NullPointerException if any entry, key, or value is {@code null}, or if&#10;     *         the {@code entries} array is {@code null}&#10;     *&#10;     * @see Map#entry Map.entry()&#10;     * @since 9&#10;     "
  ]
  node [
    id 2931
    label "entry"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2932
    label " static Entry<K, V> entry(K k, V v)"
    type "method"
    comment "&#10;     * Returns an unmodifiable {@link Entry} containing the given key and value.&#10;     * These entries are suitable for populating {@code Map} instances using the&#10;     * {@link Map#ofEntries Map.ofEntries()} method.&#10;     * The {@code Entry} instances created by this method have the following characteristics:&#10;     *&#10;     * <ul>&#10;     * <li>They disallow {@code null} keys and values. Attempts to create them using a {@code null}&#10;     * key or value result in {@code NullPointerException}.&#10;     * <li>They are unmodifiable. Calls to {@link Entry#setValue Entry.setValue()}&#10;     * on a returned {@code Entry} result in {@code UnsupportedOperationException}.&#10;     * <li>They are not serializable.&#10;     * <li>They are <a href=&#34;../lang/doc-files/ValueBased.html&#34;>value-based</a>.&#10;     * Programmers should treat instances that are {@linkplain #equals(Object) equal}&#10;     * as interchangeable and should not use them for synchronization, or&#10;     * unpredictable behavior may occur. For example, in a future release,&#10;     * synchronization may fail. Callers should make no assumptions&#10;     * about the identity of the returned instances. This method is free to&#10;     * create new instances or reuse existing ones.&#10;     * </ul>&#10;     *&#10;     * @apiNote&#10;     * For a serializable {@code Entry}, see {@link AbstractMap.SimpleEntry} or&#10;     * {@link AbstractMap.SimpleImmutableEntry}.&#10;     *&#10;     * @param <K> the key's type&#10;     * @param <V> the value's type&#10;     * @param k the key&#10;     * @param v the value&#10;     * @return an {@code Entry} containing the specified key and value&#10;     * @throws NullPointerException if the key or value is {@code null}&#10;     *&#10;     * @see Map#ofEntries Map.ofEntries()&#10;     * @since 9&#10;     "
  ]
  node [
    id 2933
    label "setValue"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2934
    label "Entry"
  ]
  node [
    id 2935
    label "AbstractMap.SimpleImmutableEntry"
  ]
  node [
    id 2936
    label "ofEntries"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 2937
    label "AbstractMap.SimpleEntry"
  ]
  node [
    id 2938
    label " static Map<K, V> copyOf(Map<? extends K, ? extends V> map)"
    type "method"
    comment "&#10;     * Returns an <a href=&#34;#unmodifiable&#34;>unmodifiable Map</a> containing the entries&#10;     * of the given Map. The given Map must not be null, and it must not contain any&#10;     * null keys or values. If the given Map is subsequently modified, the returned&#10;     * Map will not reflect such modifications.&#10;     *&#10;     * @implNote&#10;     * If the given Map is an <a href=&#34;#unmodifiable&#34;>unmodifiable Map</a>,&#10;     * calling copyOf will generally not create a copy.&#10;     *&#10;     * @param <K> the {@code Map}'s key type&#10;     * @param <V> the {@code Map}'s value type&#10;     * @param map a {@code Map} from which entries are drawn, must be non-null&#10;     * @return a {@code Map} containing the entries of the given {@code Map}&#10;     * @throws NullPointerException if map is null, or if it contains any null keys or values&#10;     * @since 10&#10;     "
  ]
  edge [
    source 0
    target 1
    type "child"
  ]
  edge [
    source 0
    target 2
    type "child"
  ]
  edge [
    source 0
    target 3
    type "child"
  ]
  edge [
    source 0
    target 4
    type "child"
  ]
  edge [
    source 0
    target 5
    type "child"
  ]
  edge [
    source 0
    target 7
    type "child"
  ]
  edge [
    source 0
    target 9
    type "child"
  ]
  edge [
    source 0
    target 10
    type "child"
  ]
  edge [
    source 0
    target 12
    type "child"
  ]
  edge [
    source 0
    target 13
    type "child"
  ]
  edge [
    source 0
    target 2904
    type "child"
  ]
  edge [
    source 0
    target 2905
    type "child"
  ]
  edge [
    source 0
    target 43
    type "child"
  ]
  edge [
    source 0
    target 44
    type "child"
  ]
  edge [
    source 0
    target 2906
    type "child"
  ]
  edge [
    source 0
    target 2907
    type "child"
  ]
  edge [
    source 0
    target 2908
    type "child"
  ]
  edge [
    source 0
    target 2909
    type "child"
  ]
  edge [
    source 0
    target 2910
    type "child"
  ]
  edge [
    source 0
    target 2911
    type "child"
  ]
  edge [
    source 0
    target 2912
    type "child"
  ]
  edge [
    source 0
    target 2913
    type "child"
  ]
  edge [
    source 0
    target 2915
    type "child"
  ]
  edge [
    source 0
    target 2916
    type "child"
  ]
  edge [
    source 0
    target 2917
    type "child"
  ]
  edge [
    source 0
    target 2919
    type "child"
  ]
  edge [
    source 0
    target 2920
    type "child"
  ]
  edge [
    source 0
    target 2921
    type "child"
  ]
  edge [
    source 0
    target 2922
    type "child"
  ]
  edge [
    source 0
    target 2923
    type "child"
  ]
  edge [
    source 0
    target 2924
    type "child"
  ]
  edge [
    source 0
    target 2925
    type "child"
  ]
  edge [
    source 0
    target 2926
    type "child"
  ]
  edge [
    source 0
    target 2927
    type "child"
  ]
  edge [
    source 0
    target 2928
    type "child"
  ]
  edge [
    source 0
    target 2929
    type "child"
  ]
  edge [
    source 0
    target 2930
    type "child"
  ]
  edge [
    source 0
    target 2932
    type "child"
  ]
  edge [
    source 0
    target 2938
    type "child"
  ]
  edge [
    source 2
    target 539
    type "link"
  ]
  edge [
    source 5
    target 6
    type "link"
  ]
  edge [
    source 7
    target 8
    type "link"
  ]
  edge [
    source 10
    target 11
    type "link"
  ]
  edge [
    source 13
    target 14
    type "link"
  ]
  edge [
    source 14
    target 1
    type "child"
  ]
  edge [
    source 14
    target 2
    type "child"
  ]
  edge [
    source 14
    target 15
    type "child"
  ]
  edge [
    source 14
    target 16
    type "child"
  ]
  edge [
    source 14
    target 17
    type "child"
  ]
  edge [
    source 14
    target 18
    type "child"
  ]
  edge [
    source 14
    target 20
    type "child"
  ]
  edge [
    source 14
    target 26
    type "child"
  ]
  edge [
    source 14
    target 27
    type "child"
  ]
  edge [
    source 14
    target 28
    type "child"
  ]
  edge [
    source 14
    target 42
    type "child"
  ]
  edge [
    source 14
    target 29
    type "child"
  ]
  edge [
    source 14
    target 12
    type "child"
  ]
  edge [
    source 14
    target 43
    type "child"
  ]
  edge [
    source 14
    target 44
    type "child"
  ]
  edge [
    source 14
    target 45
    type "child"
  ]
  edge [
    source 14
    target 2891
    type "child"
  ]
  edge [
    source 14
    target 2892
    type "child"
  ]
  edge [
    source 14
    target 2893
    type "child"
  ]
  edge [
    source 14
    target 2894
    type "child"
  ]
  edge [
    source 14
    target 2895
    type "child"
  ]
  edge [
    source 14
    target 2896
    type "child"
  ]
  edge [
    source 14
    target 2897
    type "child"
  ]
  edge [
    source 14
    target 2898
    type "child"
  ]
  edge [
    source 14
    target 2899
    type "child"
  ]
  edge [
    source 14
    target 2900
    type "child"
  ]
  edge [
    source 14
    target 2901
    type "child"
  ]
  edge [
    source 14
    target 2902
    type "child"
  ]
  edge [
    source 14
    target 2903
    type "child"
  ]
  edge [
    source 17
    target 23
    type "link"
  ]
  edge [
    source 17
    target 24
    type "link"
  ]
  edge [
    source 18
    target 19
    type "link"
  ]
  edge [
    source 18
    target 23
    type "link"
  ]
  edge [
    source 18
    target 22
    type "link"
  ]
  edge [
    source 18
    target 395
    type "link"
  ]
  edge [
    source 20
    target 21
    type "link"
  ]
  edge [
    source 20
    target 22
    type "link"
  ]
  edge [
    source 22
    target 1
    type "child"
  ]
  edge [
    source 22
    target 2
    type "child"
  ]
  edge [
    source 22
    target 15
    type "child"
  ]
  edge [
    source 22
    target 16
    type "child"
  ]
  edge [
    source 22
    target 17
    type "child"
  ]
  edge [
    source 22
    target 18
    type "child"
  ]
  edge [
    source 22
    target 25
    type "child"
  ]
  edge [
    source 22
    target 20
    type "child"
  ]
  edge [
    source 22
    target 26
    type "child"
  ]
  edge [
    source 22
    target 27
    type "child"
  ]
  edge [
    source 22
    target 28
    type "child"
  ]
  edge [
    source 22
    target 29
    type "child"
  ]
  edge [
    source 22
    target 30
    type "child"
  ]
  edge [
    source 22
    target 42
    type "child"
  ]
  edge [
    source 22
    target 12
    type "child"
  ]
  edge [
    source 22
    target 43
    type "child"
  ]
  edge [
    source 22
    target 44
    type "child"
  ]
  edge [
    source 22
    target 45
    type "child"
  ]
  edge [
    source 22
    target 2889
    type "child"
  ]
  edge [
    source 22
    target 2890
    type "child"
  ]
  edge [
    source 25
    target 24
    type "link"
  ]
  edge [
    source 25
    target 19
    type "link"
  ]
  edge [
    source 30
    target 31
    type "link"
  ]
  edge [
    source 30
    target 32
    type "link"
  ]
  edge [
    source 33
    target 34
    type "child"
  ]
  edge [
    source 33
    target 36
    type "child"
  ]
  edge [
    source 33
    target 37
    type "child"
  ]
  edge [
    source 33
    target 40
    type "child"
  ]
  edge [
    source 34
    target 35
    type "link"
  ]
  edge [
    source 34
    target 409
    type "link"
  ]
  edge [
    source 36
    target 410
    type "link"
  ]
  edge [
    source 37
    target 35
    type "link"
  ]
  edge [
    source 37
    target 38
    type "link"
  ]
  edge [
    source 37
    target 39
    type "link"
  ]
  edge [
    source 37
    target 410
    type "link"
  ]
  edge [
    source 37
    target 409
    type "link"
  ]
  edge [
    source 37
    target 21
    type "link"
  ]
  edge [
    source 40
    target 41
    type "link"
  ]
  edge [
    source 44
    target 400
    type "link"
  ]
  edge [
    source 44
    target 2473
    type "link"
  ]
  edge [
    source 44
    target 14
    type "link"
  ]
  edge [
    source 44
    target 0
    type "link"
  ]
  edge [
    source 45
    target 46
    type "link"
  ]
  edge [
    source 45
    target 391
    type "link"
  ]
  edge [
    source 45
    target 418
    type "link"
  ]
  edge [
    source 45
    target 47
    type "link"
  ]
  edge [
    source 45
    target 419
    type "link"
  ]
  edge [
    source 45
    target 437
    type "link"
  ]
  edge [
    source 45
    target 55
    type "link"
  ]
  edge [
    source 45
    target 49
    type "link"
  ]
  edge [
    source 45
    target 94
    type "link"
  ]
  edge [
    source 45
    target 2887
    type "link"
  ]
  edge [
    source 45
    target 2888
    type "link"
  ]
  edge [
    source 45
    target 61
    type "link"
  ]
  edge [
    source 47
    target 48
    type "child"
  ]
  edge [
    source 47
    target 50
    type "child"
  ]
  edge [
    source 47
    target 52
    type "child"
  ]
  edge [
    source 47
    target 53
    type "child"
  ]
  edge [
    source 47
    target 57
    type "child"
  ]
  edge [
    source 47
    target 59
    type "child"
  ]
  edge [
    source 47
    target 65
    type "child"
  ]
  edge [
    source 47
    target 67
    type "child"
  ]
  edge [
    source 48
    target 49
    type "link"
  ]
  edge [
    source 50
    target 51
    type "link"
  ]
  edge [
    source 50
    target 49
    type "link"
  ]
  edge [
    source 52
    target 49
    type "link"
  ]
  edge [
    source 53
    target 54
    type "link"
  ]
  edge [
    source 53
    target 55
    type "link"
  ]
  edge [
    source 53
    target 56
    type "link"
  ]
  edge [
    source 53
    target 46
    type "link"
  ]
  edge [
    source 53
    target 38
    type "link"
  ]
  edge [
    source 57
    target 58
    type "link"
  ]
  edge [
    source 57
    target 46
    type "link"
  ]
  edge [
    source 59
    target 60
    type "link"
  ]
  edge [
    source 59
    target 55
    type "link"
  ]
  edge [
    source 59
    target 61
    type "link"
  ]
  edge [
    source 59
    target 49
    type "link"
  ]
  edge [
    source 59
    target 62
    type "link"
  ]
  edge [
    source 59
    target 63
    type "link"
  ]
  edge [
    source 59
    target 46
    type "link"
  ]
  edge [
    source 59
    target 64
    type "link"
  ]
  edge [
    source 65
    target 66
    type "link"
  ]
  edge [
    source 67
    target 68
    type "link"
  ]
  edge [
    source 67
    target 62
    type "link"
  ]
  edge [
    source 67
    target 69
    type "link"
  ]
  edge [
    source 69
    target 70
    type "child"
  ]
  edge [
    source 69
    target 72
    type "child"
  ]
  edge [
    source 69
    target 75
    type "child"
  ]
  edge [
    source 69
    target 76
    type "child"
  ]
  edge [
    source 69
    target 77
    type "child"
  ]
  edge [
    source 69
    target 78
    type "child"
  ]
  edge [
    source 69
    target 80
    type "child"
  ]
  edge [
    source 69
    target 81
    type "child"
  ]
  edge [
    source 69
    target 82
    type "child"
  ]
  edge [
    source 69
    target 83
    type "child"
  ]
  edge [
    source 69
    target 85
    type "child"
  ]
  edge [
    source 69
    target 86
    type "child"
  ]
  edge [
    source 69
    target 87
    type "child"
  ]
  edge [
    source 69
    target 88
    type "child"
  ]
  edge [
    source 69
    target 89
    type "child"
  ]
  edge [
    source 69
    target 91
    type "child"
  ]
  edge [
    source 69
    target 92
    type "child"
  ]
  edge [
    source 69
    target 93
    type "child"
  ]
  edge [
    source 70
    target 71
    type "link"
  ]
  edge [
    source 72
    target 73
    type "link"
  ]
  edge [
    source 72
    target 74
    type "link"
  ]
  edge [
    source 78
    target 79
    type "link"
  ]
  edge [
    source 83
    target 79
    type "link"
  ]
  edge [
    source 83
    target 84
    type "link"
  ]
  edge [
    source 85
    target 79
    type "link"
  ]
  edge [
    source 85
    target 84
    type "link"
  ]
  edge [
    source 88
    target 69
    type "link"
  ]
  edge [
    source 89
    target 79
    type "link"
  ]
  edge [
    source 89
    target 90
    type "link"
  ]
  edge [
    source 95
    target 96
    type "child"
  ]
  edge [
    source 95
    target 97
    type "child"
  ]
  edge [
    source 95
    target 98
    type "child"
  ]
  edge [
    source 95
    target 99
    type "child"
  ]
  edge [
    source 95
    target 100
    type "child"
  ]
  edge [
    source 95
    target 2866
    type "child"
  ]
  edge [
    source 95
    target 2867
    type "child"
  ]
  edge [
    source 95
    target 2868
    type "child"
  ]
  edge [
    source 95
    target 2869
    type "child"
  ]
  edge [
    source 95
    target 2870
    type "child"
  ]
  edge [
    source 95
    target 2871
    type "child"
  ]
  edge [
    source 95
    target 2872
    type "child"
  ]
  edge [
    source 95
    target 2873
    type "child"
  ]
  edge [
    source 95
    target 2874
    type "child"
  ]
  edge [
    source 95
    target 2875
    type "child"
  ]
  edge [
    source 95
    target 2876
    type "child"
  ]
  edge [
    source 95
    target 2877
    type "child"
  ]
  edge [
    source 95
    target 2878
    type "child"
  ]
  edge [
    source 95
    target 2879
    type "child"
  ]
  edge [
    source 95
    target 2880
    type "child"
  ]
  edge [
    source 95
    target 2881
    type "child"
  ]
  edge [
    source 95
    target 2882
    type "child"
  ]
  edge [
    source 95
    target 2883
    type "child"
  ]
  edge [
    source 95
    target 2884
    type "child"
  ]
  edge [
    source 95
    target 2885
    type "child"
  ]
  edge [
    source 95
    target 2886
    type "child"
  ]
  edge [
    source 96
    target 46
    type "link"
  ]
  edge [
    source 96
    target 47
    type "link"
  ]
  edge [
    source 96
    target 55
    type "link"
  ]
  edge [
    source 97
    target 46
    type "link"
  ]
  edge [
    source 97
    target 47
    type "link"
  ]
  edge [
    source 97
    target 55
    type "link"
  ]
  edge [
    source 98
    target 46
    type "link"
  ]
  edge [
    source 98
    target 47
    type "link"
  ]
  edge [
    source 98
    target 55
    type "link"
  ]
  edge [
    source 99
    target 46
    type "link"
  ]
  edge [
    source 99
    target 47
    type "link"
  ]
  edge [
    source 99
    target 55
    type "link"
  ]
  edge [
    source 100
    target 101
    type "link"
  ]
  edge [
    source 102
    target 103
    type "child"
  ]
  edge [
    source 102
    target 104
    type "child"
  ]
  edge [
    source 102
    target 105
    type "child"
  ]
  edge [
    source 102
    target 106
    type "child"
  ]
  edge [
    source 102
    target 107
    type "child"
  ]
  edge [
    source 102
    target 108
    type "child"
  ]
  edge [
    source 102
    target 109
    type "child"
  ]
  edge [
    source 102
    target 110
    type "child"
  ]
  edge [
    source 102
    target 111
    type "child"
  ]
  edge [
    source 102
    target 112
    type "child"
  ]
  edge [
    source 102
    target 113
    type "child"
  ]
  edge [
    source 102
    target 115
    type "child"
  ]
  edge [
    source 102
    target 116
    type "child"
  ]
  edge [
    source 102
    target 117
    type "child"
  ]
  edge [
    source 102
    target 118
    type "child"
  ]
  edge [
    source 102
    target 119
    type "child"
  ]
  edge [
    source 102
    target 120
    type "child"
  ]
  edge [
    source 102
    target 121
    type "child"
  ]
  edge [
    source 102
    target 122
    type "child"
  ]
  edge [
    source 102
    target 123
    type "child"
  ]
  edge [
    source 102
    target 124
    type "child"
  ]
  edge [
    source 102
    target 125
    type "child"
  ]
  edge [
    source 102
    target 126
    type "child"
  ]
  edge [
    source 102
    target 127
    type "child"
  ]
  edge [
    source 102
    target 128
    type "child"
  ]
  edge [
    source 102
    target 129
    type "child"
  ]
  edge [
    source 102
    target 130
    type "child"
  ]
  edge [
    source 102
    target 131
    type "child"
  ]
  edge [
    source 102
    target 132
    type "child"
  ]
  edge [
    source 102
    target 133
    type "child"
  ]
  edge [
    source 102
    target 277
    type "child"
  ]
  edge [
    source 102
    target 278
    type "child"
  ]
  edge [
    source 102
    target 279
    type "child"
  ]
  edge [
    source 102
    target 280
    type "child"
  ]
  edge [
    source 102
    target 281
    type "child"
  ]
  edge [
    source 102
    target 282
    type "child"
  ]
  edge [
    source 102
    target 283
    type "child"
  ]
  edge [
    source 102
    target 284
    type "child"
  ]
  edge [
    source 102
    target 285
    type "child"
  ]
  edge [
    source 102
    target 286
    type "child"
  ]
  edge [
    source 102
    target 287
    type "child"
  ]
  edge [
    source 102
    target 289
    type "child"
  ]
  edge [
    source 102
    target 290
    type "child"
  ]
  edge [
    source 102
    target 292
    type "child"
  ]
  edge [
    source 102
    target 293
    type "child"
  ]
  edge [
    source 102
    target 295
    type "child"
  ]
  edge [
    source 102
    target 296
    type "child"
  ]
  edge [
    source 102
    target 298
    type "child"
  ]
  edge [
    source 102
    target 300
    type "child"
  ]
  edge [
    source 102
    target 301
    type "child"
  ]
  edge [
    source 102
    target 302
    type "child"
  ]
  edge [
    source 102
    target 304
    type "child"
  ]
  edge [
    source 102
    target 305
    type "child"
  ]
  edge [
    source 102
    target 306
    type "child"
  ]
  edge [
    source 102
    target 308
    type "child"
  ]
  edge [
    source 102
    target 309
    type "child"
  ]
  edge [
    source 102
    target 310
    type "child"
  ]
  edge [
    source 102
    target 312
    type "child"
  ]
  edge [
    source 102
    target 313
    type "child"
  ]
  edge [
    source 102
    target 314
    type "child"
  ]
  edge [
    source 102
    target 316
    type "child"
  ]
  edge [
    source 102
    target 317
    type "child"
  ]
  edge [
    source 102
    target 318
    type "child"
  ]
  edge [
    source 102
    target 320
    type "child"
  ]
  edge [
    source 102
    target 321
    type "child"
  ]
  edge [
    source 102
    target 322
    type "child"
  ]
  edge [
    source 102
    target 324
    type "child"
  ]
  edge [
    source 102
    target 325
    type "child"
  ]
  edge [
    source 102
    target 326
    type "child"
  ]
  edge [
    source 102
    target 327
    type "child"
  ]
  edge [
    source 102
    target 328
    type "child"
  ]
  edge [
    source 102
    target 329
    type "child"
  ]
  edge [
    source 102
    target 330
    type "child"
  ]
  edge [
    source 102
    target 331
    type "child"
  ]
  edge [
    source 102
    target 332
    type "child"
  ]
  edge [
    source 102
    target 333
    type "child"
  ]
  edge [
    source 102
    target 334
    type "child"
  ]
  edge [
    source 102
    target 335
    type "child"
  ]
  edge [
    source 102
    target 336
    type "child"
  ]
  edge [
    source 102
    target 337
    type "child"
  ]
  edge [
    source 102
    target 338
    type "child"
  ]
  edge [
    source 102
    target 339
    type "child"
  ]
  edge [
    source 102
    target 340
    type "child"
  ]
  edge [
    source 102
    target 341
    type "child"
  ]
  edge [
    source 102
    target 342
    type "child"
  ]
  edge [
    source 102
    target 343
    type "child"
  ]
  edge [
    source 102
    target 344
    type "child"
  ]
  edge [
    source 102
    target 345
    type "child"
  ]
  edge [
    source 102
    target 346
    type "child"
  ]
  edge [
    source 102
    target 347
    type "child"
  ]
  edge [
    source 102
    target 348
    type "child"
  ]
  edge [
    source 102
    target 349
    type "child"
  ]
  edge [
    source 102
    target 350
    type "child"
  ]
  edge [
    source 102
    target 351
    type "child"
  ]
  edge [
    source 102
    target 352
    type "child"
  ]
  edge [
    source 102
    target 353
    type "child"
  ]
  edge [
    source 102
    target 354
    type "child"
  ]
  edge [
    source 102
    target 355
    type "child"
  ]
  edge [
    source 102
    target 356
    type "child"
  ]
  edge [
    source 102
    target 357
    type "child"
  ]
  edge [
    source 102
    target 358
    type "child"
  ]
  edge [
    source 102
    target 359
    type "child"
  ]
  edge [
    source 102
    target 360
    type "child"
  ]
  edge [
    source 102
    target 361
    type "child"
  ]
  edge [
    source 102
    target 362
    type "child"
  ]
  edge [
    source 102
    target 363
    type "child"
  ]
  edge [
    source 102
    target 364
    type "child"
  ]
  edge [
    source 102
    target 365
    type "child"
  ]
  edge [
    source 102
    target 366
    type "child"
  ]
  edge [
    source 102
    target 367
    type "child"
  ]
  edge [
    source 102
    target 368
    type "child"
  ]
  edge [
    source 102
    target 369
    type "child"
  ]
  edge [
    source 102
    target 370
    type "child"
  ]
  edge [
    source 102
    target 371
    type "child"
  ]
  edge [
    source 102
    target 372
    type "child"
  ]
  edge [
    source 102
    target 373
    type "child"
  ]
  edge [
    source 102
    target 374
    type "child"
  ]
  edge [
    source 102
    target 375
    type "child"
  ]
  edge [
    source 102
    target 376
    type "child"
  ]
  edge [
    source 102
    target 377
    type "child"
  ]
  edge [
    source 102
    target 378
    type "child"
  ]
  edge [
    source 102
    target 379
    type "child"
  ]
  edge [
    source 102
    target 380
    type "child"
  ]
  edge [
    source 102
    target 381
    type "child"
  ]
  edge [
    source 102
    target 382
    type "child"
  ]
  edge [
    source 102
    target 383
    type "child"
  ]
  edge [
    source 102
    target 384
    type "child"
  ]
  edge [
    source 102
    target 385
    type "child"
  ]
  edge [
    source 102
    target 386
    type "child"
  ]
  edge [
    source 102
    target 387
    type "child"
  ]
  edge [
    source 102
    target 388
    type "child"
  ]
  edge [
    source 102
    target 389
    type "child"
  ]
  edge [
    source 102
    target 390
    type "child"
  ]
  edge [
    source 102
    target 394
    type "child"
  ]
  edge [
    source 102
    target 460
    type "child"
  ]
  edge [
    source 102
    target 462
    type "child"
  ]
  edge [
    source 102
    target 464
    type "child"
  ]
  edge [
    source 102
    target 466
    type "child"
  ]
  edge [
    source 102
    target 468
    type "child"
  ]
  edge [
    source 102
    target 470
    type "child"
  ]
  edge [
    source 102
    target 472
    type "child"
  ]
  edge [
    source 102
    target 474
    type "child"
  ]
  edge [
    source 102
    target 475
    type "child"
  ]
  edge [
    source 102
    target 476
    type "child"
  ]
  edge [
    source 102
    target 478
    type "child"
  ]
  edge [
    source 102
    target 479
    type "child"
  ]
  edge [
    source 102
    target 480
    type "child"
  ]
  edge [
    source 102
    target 481
    type "child"
  ]
  edge [
    source 102
    target 482
    type "child"
  ]
  edge [
    source 102
    target 483
    type "child"
  ]
  edge [
    source 102
    target 484
    type "child"
  ]
  edge [
    source 102
    target 485
    type "child"
  ]
  edge [
    source 102
    target 486
    type "child"
  ]
  edge [
    source 102
    target 488
    type "child"
  ]
  edge [
    source 102
    target 489
    type "child"
  ]
  edge [
    source 102
    target 490
    type "child"
  ]
  edge [
    source 102
    target 491
    type "child"
  ]
  edge [
    source 102
    target 492
    type "child"
  ]
  edge [
    source 102
    target 493
    type "child"
  ]
  edge [
    source 102
    target 494
    type "child"
  ]
  edge [
    source 102
    target 495
    type "child"
  ]
  edge [
    source 102
    target 496
    type "child"
  ]
  edge [
    source 102
    target 497
    type "child"
  ]
  edge [
    source 102
    target 498
    type "child"
  ]
  edge [
    source 102
    target 499
    type "child"
  ]
  edge [
    source 102
    target 501
    type "child"
  ]
  edge [
    source 102
    target 502
    type "child"
  ]
  edge [
    source 102
    target 504
    type "child"
  ]
  edge [
    source 102
    target 505
    type "child"
  ]
  edge [
    source 102
    target 507
    type "child"
  ]
  edge [
    source 102
    target 508
    type "child"
  ]
  edge [
    source 102
    target 2696
    type "child"
  ]
  edge [
    source 102
    target 2697
    type "child"
  ]
  edge [
    source 102
    target 2743
    type "child"
  ]
  edge [
    source 102
    target 2744
    type "child"
  ]
  edge [
    source 102
    target 2788
    type "child"
  ]
  edge [
    source 102
    target 2789
    type "child"
  ]
  edge [
    source 102
    target 2790
    type "child"
  ]
  edge [
    source 102
    target 2791
    type "child"
  ]
  edge [
    source 102
    target 2795
    type "child"
  ]
  edge [
    source 102
    target 2796
    type "child"
  ]
  edge [
    source 102
    target 2799
    type "child"
  ]
  edge [
    source 102
    target 2800
    type "child"
  ]
  edge [
    source 102
    target 2802
    type "child"
  ]
  edge [
    source 102
    target 2803
    type "child"
  ]
  edge [
    source 102
    target 2807
    type "child"
  ]
  edge [
    source 102
    target 2808
    type "child"
  ]
  edge [
    source 102
    target 2810
    type "child"
  ]
  edge [
    source 102
    target 2811
    type "child"
  ]
  edge [
    source 102
    target 2815
    type "child"
  ]
  edge [
    source 102
    target 2816
    type "child"
  ]
  edge [
    source 102
    target 2820
    type "child"
  ]
  edge [
    source 102
    target 2821
    type "child"
  ]
  edge [
    source 102
    target 2823
    type "child"
  ]
  edge [
    source 102
    target 2824
    type "child"
  ]
  edge [
    source 102
    target 2828
    type "child"
  ]
  edge [
    source 102
    target 2829
    type "child"
  ]
  edge [
    source 102
    target 2831
    type "child"
  ]
  edge [
    source 102
    target 2832
    type "child"
  ]
  edge [
    source 102
    target 2836
    type "child"
  ]
  edge [
    source 102
    target 2837
    type "child"
  ]
  edge [
    source 102
    target 2840
    type "child"
  ]
  edge [
    source 102
    target 2841
    type "child"
  ]
  edge [
    source 102
    target 2843
    type "child"
  ]
  edge [
    source 102
    target 2844
    type "child"
  ]
  edge [
    source 102
    target 2845
    type "child"
  ]
  edge [
    source 102
    target 2846
    type "child"
  ]
  edge [
    source 102
    target 2847
    type "child"
  ]
  edge [
    source 102
    target 2848
    type "child"
  ]
  edge [
    source 102
    target 2849
    type "child"
  ]
  edge [
    source 102
    target 2850
    type "child"
  ]
  edge [
    source 102
    target 2851
    type "child"
  ]
  edge [
    source 102
    target 2852
    type "child"
  ]
  edge [
    source 102
    target 2853
    type "child"
  ]
  edge [
    source 102
    target 2854
    type "child"
  ]
  edge [
    source 102
    target 2855
    type "child"
  ]
  edge [
    source 102
    target 2856
    type "child"
  ]
  edge [
    source 102
    target 2857
    type "child"
  ]
  edge [
    source 102
    target 2858
    type "child"
  ]
  edge [
    source 102
    target 2859
    type "child"
  ]
  edge [
    source 102
    target 2860
    type "child"
  ]
  edge [
    source 102
    target 2861
    type "child"
  ]
  edge [
    source 102
    target 2862
    type "child"
  ]
  edge [
    source 102
    target 2863
    type "child"
  ]
  edge [
    source 102
    target 2864
    type "child"
  ]
  edge [
    source 102
    target 2865
    type "child"
  ]
  edge [
    source 113
    target 114
    type "link"
  ]
  edge [
    source 115
    target 114
    type "link"
  ]
  edge [
    source 116
    target 114
    type "link"
  ]
  edge [
    source 117
    target 114
    type "link"
  ]
  edge [
    source 128
    target 114
    type "link"
  ]
  edge [
    source 129
    target 114
    type "link"
  ]
  edge [
    source 130
    target 114
    type "link"
  ]
  edge [
    source 131
    target 114
    type "link"
  ]
  edge [
    source 133
    target 79
    type "link"
  ]
  edge [
    source 133
    target 134
    type "link"
  ]
  edge [
    source 133
    target 276
    type "link"
  ]
  edge [
    source 135
    target 136
    type "child"
  ]
  edge [
    source 135
    target 137
    type "child"
  ]
  edge [
    source 135
    target 138
    type "child"
  ]
  edge [
    source 135
    target 139
    type "child"
  ]
  edge [
    source 135
    target 140
    type "child"
  ]
  edge [
    source 135
    target 141
    type "child"
  ]
  edge [
    source 135
    target 142
    type "child"
  ]
  edge [
    source 135
    target 143
    type "child"
  ]
  edge [
    source 135
    target 144
    type "child"
  ]
  edge [
    source 135
    target 145
    type "child"
  ]
  edge [
    source 135
    target 146
    type "child"
  ]
  edge [
    source 135
    target 147
    type "child"
  ]
  edge [
    source 135
    target 148
    type "child"
  ]
  edge [
    source 135
    target 149
    type "child"
  ]
  edge [
    source 135
    target 150
    type "child"
  ]
  edge [
    source 135
    target 151
    type "child"
  ]
  edge [
    source 135
    target 152
    type "child"
  ]
  edge [
    source 135
    target 153
    type "child"
  ]
  edge [
    source 135
    target 154
    type "child"
  ]
  edge [
    source 135
    target 155
    type "child"
  ]
  edge [
    source 135
    target 156
    type "child"
  ]
  edge [
    source 135
    target 157
    type "child"
  ]
  edge [
    source 135
    target 158
    type "child"
  ]
  edge [
    source 135
    target 159
    type "child"
  ]
  edge [
    source 135
    target 160
    type "child"
  ]
  edge [
    source 135
    target 161
    type "child"
  ]
  edge [
    source 135
    target 162
    type "child"
  ]
  edge [
    source 135
    target 163
    type "child"
  ]
  edge [
    source 135
    target 168
    type "child"
  ]
  edge [
    source 135
    target 169
    type "child"
  ]
  edge [
    source 135
    target 170
    type "child"
  ]
  edge [
    source 135
    target 171
    type "child"
  ]
  edge [
    source 135
    target 172
    type "child"
  ]
  edge [
    source 135
    target 173
    type "child"
  ]
  edge [
    source 135
    target 174
    type "child"
  ]
  edge [
    source 135
    target 175
    type "child"
  ]
  edge [
    source 135
    target 176
    type "child"
  ]
  edge [
    source 135
    target 177
    type "child"
  ]
  edge [
    source 135
    target 178
    type "child"
  ]
  edge [
    source 135
    target 179
    type "child"
  ]
  edge [
    source 135
    target 180
    type "child"
  ]
  edge [
    source 135
    target 182
    type "child"
  ]
  edge [
    source 135
    target 183
    type "child"
  ]
  edge [
    source 135
    target 184
    type "child"
  ]
  edge [
    source 135
    target 185
    type "child"
  ]
  edge [
    source 135
    target 186
    type "child"
  ]
  edge [
    source 135
    target 187
    type "child"
  ]
  edge [
    source 135
    target 188
    type "child"
  ]
  edge [
    source 135
    target 189
    type "child"
  ]
  edge [
    source 135
    target 190
    type "child"
  ]
  edge [
    source 135
    target 191
    type "child"
  ]
  edge [
    source 135
    target 192
    type "child"
  ]
  edge [
    source 135
    target 193
    type "child"
  ]
  edge [
    source 135
    target 195
    type "child"
  ]
  edge [
    source 135
    target 196
    type "child"
  ]
  edge [
    source 135
    target 197
    type "child"
  ]
  edge [
    source 135
    target 267
    type "child"
  ]
  edge [
    source 135
    target 268
    type "child"
  ]
  edge [
    source 135
    target 270
    type "child"
  ]
  edge [
    source 135
    target 272
    type "child"
  ]
  edge [
    source 135
    target 274
    type "child"
  ]
  edge [
    source 135
    target 275
    type "child"
  ]
  edge [
    source 163
    target 164
    type "link"
  ]
  edge [
    source 163
    target 165
    type "link"
  ]
  edge [
    source 163
    target 166
    type "link"
  ]
  edge [
    source 163
    target 167
    type "link"
  ]
  edge [
    source 180
    target 181
    type "link"
  ]
  edge [
    source 192
    target 613
    type "link"
  ]
  edge [
    source 192
    target 610
    type "link"
  ]
  edge [
    source 192
    target 532
    type "link"
  ]
  edge [
    source 192
    target 1288
    type "link"
  ]
  edge [
    source 192
    target 1289
    type "link"
  ]
  edge [
    source 192
    target 1436
    type "link"
  ]
  edge [
    source 192
    target 1437
    type "link"
  ]
  edge [
    source 192
    target 1635
    type "link"
  ]
  edge [
    source 192
    target 2523
    type "link"
  ]
  edge [
    source 193
    target 134
    type "link"
  ]
  edge [
    source 193
    target 194
    type "link"
  ]
  edge [
    source 195
    target 134
    type "link"
  ]
  edge [
    source 195
    target 194
    type "link"
  ]
  edge [
    source 197
    target 198
    type "link"
  ]
  edge [
    source 198
    target 199
    type "child"
  ]
  edge [
    source 198
    target 200
    type "child"
  ]
  edge [
    source 198
    target 201
    type "child"
  ]
  edge [
    source 198
    target 202
    type "child"
  ]
  edge [
    source 198
    target 203
    type "child"
  ]
  edge [
    source 198
    target 204
    type "child"
  ]
  edge [
    source 198
    target 205
    type "child"
  ]
  edge [
    source 198
    target 206
    type "child"
  ]
  edge [
    source 198
    target 207
    type "child"
  ]
  edge [
    source 198
    target 208
    type "child"
  ]
  edge [
    source 198
    target 209
    type "child"
  ]
  edge [
    source 198
    target 210
    type "child"
  ]
  edge [
    source 198
    target 211
    type "child"
  ]
  edge [
    source 198
    target 212
    type "child"
  ]
  edge [
    source 198
    target 213
    type "child"
  ]
  edge [
    source 198
    target 217
    type "child"
  ]
  edge [
    source 198
    target 219
    type "child"
  ]
  edge [
    source 198
    target 220
    type "child"
  ]
  edge [
    source 198
    target 222
    type "child"
  ]
  edge [
    source 198
    target 223
    type "child"
  ]
  edge [
    source 198
    target 224
    type "child"
  ]
  edge [
    source 198
    target 228
    type "child"
  ]
  edge [
    source 198
    target 229
    type "child"
  ]
  edge [
    source 198
    target 230
    type "child"
  ]
  edge [
    source 198
    target 231
    type "child"
  ]
  edge [
    source 198
    target 232
    type "child"
  ]
  edge [
    source 198
    target 233
    type "child"
  ]
  edge [
    source 198
    target 235
    type "child"
  ]
  edge [
    source 198
    target 236
    type "child"
  ]
  edge [
    source 198
    target 237
    type "child"
  ]
  edge [
    source 198
    target 238
    type "child"
  ]
  edge [
    source 198
    target 239
    type "child"
  ]
  edge [
    source 198
    target 240
    type "child"
  ]
  edge [
    source 198
    target 241
    type "child"
  ]
  edge [
    source 198
    target 242
    type "child"
  ]
  edge [
    source 198
    target 249
    type "child"
  ]
  edge [
    source 198
    target 250
    type "child"
  ]
  edge [
    source 198
    target 251
    type "child"
  ]
  edge [
    source 198
    target 252
    type "child"
  ]
  edge [
    source 198
    target 253
    type "child"
  ]
  edge [
    source 198
    target 254
    type "child"
  ]
  edge [
    source 198
    target 255
    type "child"
  ]
  edge [
    source 198
    target 256
    type "child"
  ]
  edge [
    source 198
    target 257
    type "child"
  ]
  edge [
    source 198
    target 258
    type "child"
  ]
  edge [
    source 198
    target 259
    type "child"
  ]
  edge [
    source 198
    target 260
    type "child"
  ]
  edge [
    source 198
    target 261
    type "child"
  ]
  edge [
    source 198
    target 262
    type "child"
  ]
  edge [
    source 198
    target 263
    type "child"
  ]
  edge [
    source 198
    target 264
    type "child"
  ]
  edge [
    source 198
    target 265
    type "child"
  ]
  edge [
    source 198
    target 266
    type "child"
  ]
  edge [
    source 213
    target 214
    type "link"
  ]
  edge [
    source 213
    target 215
    type "link"
  ]
  edge [
    source 213
    target 216
    type "link"
  ]
  edge [
    source 213
    target 134
    type "link"
  ]
  edge [
    source 217
    target 218
    type "link"
  ]
  edge [
    source 220
    target 221
    type "link"
  ]
  edge [
    source 222
    target 221
    type "link"
  ]
  edge [
    source 223
    target 221
    type "link"
  ]
  edge [
    source 224
    target 214
    type "link"
  ]
  edge [
    source 224
    target 215
    type "link"
  ]
  edge [
    source 224
    target 225
    type "link"
  ]
  edge [
    source 224
    target 226
    type "link"
  ]
  edge [
    source 224
    target 227
    type "link"
  ]
  edge [
    source 233
    target 234
    type "link"
  ]
  edge [
    source 241
    target 216
    type "link"
  ]
  edge [
    source 242
    target 243
    type "link"
  ]
  edge [
    source 243
    target 244
    type "child"
  ]
  edge [
    source 243
    target 245
    type "child"
  ]
  edge [
    source 243
    target 246
    type "child"
  ]
  edge [
    source 243
    target 247
    type "child"
  ]
  edge [
    source 243
    target 248
    type "child"
  ]
  edge [
    source 248
    target 198
    type "link"
  ]
  edge [
    source 252
    target 214
    type "link"
  ]
  edge [
    source 261
    target 214
    type "link"
  ]
  edge [
    source 262
    target 214
    type "link"
  ]
  edge [
    source 263
    target 214
    type "link"
  ]
  edge [
    source 268
    target 269
    type "link"
  ]
  edge [
    source 268
    target 134
    type "link"
  ]
  edge [
    source 270
    target 198
    type "link"
  ]
  edge [
    source 270
    target 271
    type "link"
  ]
  edge [
    source 272
    target 273
    type "link"
  ]
  edge [
    source 277
    target 79
    type "link"
  ]
  edge [
    source 277
    target 134
    type "link"
  ]
  edge [
    source 277
    target 276
    type "link"
  ]
  edge [
    source 278
    target 69
    type "link"
  ]
  edge [
    source 278
    target 134
    type "link"
  ]
  edge [
    source 278
    target 276
    type "link"
  ]
  edge [
    source 279
    target 79
    type "link"
  ]
  edge [
    source 279
    target 134
    type "link"
  ]
  edge [
    source 279
    target 276
    type "link"
  ]
  edge [
    source 280
    target 79
    type "link"
  ]
  edge [
    source 281
    target 79
    type "link"
  ]
  edge [
    source 284
    target 69
    type "link"
  ]
  edge [
    source 285
    target 69
    type "link"
  ]
  edge [
    source 287
    target 288
    type "link"
  ]
  edge [
    source 290
    target 291
    type "link"
  ]
  edge [
    source 293
    target 294
    type "link"
  ]
  edge [
    source 296
    target 297
    type "link"
  ]
  edge [
    source 298
    target 299
    type "link"
  ]
  edge [
    source 300
    target 299
    type "link"
  ]
  edge [
    source 302
    target 303
    type "link"
  ]
  edge [
    source 304
    target 303
    type "link"
  ]
  edge [
    source 306
    target 307
    type "link"
  ]
  edge [
    source 308
    target 307
    type "link"
  ]
  edge [
    source 310
    target 311
    type "link"
  ]
  edge [
    source 312
    target 311
    type "link"
  ]
  edge [
    source 314
    target 315
    type "link"
  ]
  edge [
    source 316
    target 315
    type "link"
  ]
  edge [
    source 318
    target 319
    type "link"
  ]
  edge [
    source 320
    target 319
    type "link"
  ]
  edge [
    source 322
    target 323
    type "link"
  ]
  edge [
    source 324
    target 323
    type "link"
  ]
  edge [
    source 326
    target 276
    type "link"
  ]
  edge [
    source 327
    target 276
    type "link"
  ]
  edge [
    source 329
    target 276
    type "link"
  ]
  edge [
    source 330
    target 276
    type "link"
  ]
  edge [
    source 390
    target 391
    type "link"
  ]
  edge [
    source 390
    target 22
    type "link"
  ]
  edge [
    source 390
    target 392
    type "link"
  ]
  edge [
    source 390
    target 393
    type "link"
  ]
  edge [
    source 390
    target 39
    type "link"
  ]
  edge [
    source 394
    target 395
    type "link"
  ]
  edge [
    source 394
    target 459
    type "link"
  ]
  edge [
    source 395
    target 1
    type "child"
  ]
  edge [
    source 395
    target 2
    type "child"
  ]
  edge [
    source 395
    target 15
    type "child"
  ]
  edge [
    source 395
    target 16
    type "child"
  ]
  edge [
    source 395
    target 17
    type "child"
  ]
  edge [
    source 395
    target 18
    type "child"
  ]
  edge [
    source 395
    target 20
    type "child"
  ]
  edge [
    source 395
    target 26
    type "child"
  ]
  edge [
    source 395
    target 27
    type "child"
  ]
  edge [
    source 395
    target 28
    type "child"
  ]
  edge [
    source 395
    target 396
    type "child"
  ]
  edge [
    source 395
    target 29
    type "child"
  ]
  edge [
    source 395
    target 42
    type "child"
  ]
  edge [
    source 395
    target 397
    type "child"
  ]
  edge [
    source 395
    target 398
    type "child"
  ]
  edge [
    source 395
    target 12
    type "child"
  ]
  edge [
    source 395
    target 43
    type "child"
  ]
  edge [
    source 395
    target 44
    type "child"
  ]
  edge [
    source 395
    target 401
    type "child"
  ]
  edge [
    source 395
    target 402
    type "child"
  ]
  edge [
    source 395
    target 403
    type "child"
  ]
  edge [
    source 395
    target 404
    type "child"
  ]
  edge [
    source 395
    target 405
    type "child"
  ]
  edge [
    source 395
    target 406
    type "child"
  ]
  edge [
    source 395
    target 407
    type "child"
  ]
  edge [
    source 395
    target 408
    type "child"
  ]
  edge [
    source 395
    target 417
    type "child"
  ]
  edge [
    source 395
    target 45
    type "child"
  ]
  edge [
    source 395
    target 438
    type "child"
  ]
  edge [
    source 395
    target 439
    type "child"
  ]
  edge [
    source 395
    target 440
    type "child"
  ]
  edge [
    source 395
    target 441
    type "child"
  ]
  edge [
    source 395
    target 442
    type "child"
  ]
  edge [
    source 395
    target 443
    type "child"
  ]
  edge [
    source 395
    target 444
    type "child"
  ]
  edge [
    source 395
    target 445
    type "child"
  ]
  edge [
    source 395
    target 446
    type "child"
  ]
  edge [
    source 395
    target 447
    type "child"
  ]
  edge [
    source 395
    target 448
    type "child"
  ]
  edge [
    source 395
    target 449
    type "child"
  ]
  edge [
    source 395
    target 450
    type "child"
  ]
  edge [
    source 395
    target 451
    type "child"
  ]
  edge [
    source 395
    target 452
    type "child"
  ]
  edge [
    source 395
    target 453
    type "child"
  ]
  edge [
    source 395
    target 454
    type "child"
  ]
  edge [
    source 395
    target 455
    type "child"
  ]
  edge [
    source 395
    target 456
    type "child"
  ]
  edge [
    source 395
    target 458
    type "child"
  ]
  edge [
    source 398
    target 79
    type "link"
  ]
  edge [
    source 398
    target 69
    type "link"
  ]
  edge [
    source 398
    target 399
    type "link"
  ]
  edge [
    source 408
    target 35
    type "link"
  ]
  edge [
    source 408
    target 410
    type "link"
  ]
  edge [
    source 409
    target 34
    type "child"
  ]
  edge [
    source 409
    target 36
    type "child"
  ]
  edge [
    source 409
    target 411
    type "child"
  ]
  edge [
    source 409
    target 412
    type "child"
  ]
  edge [
    source 409
    target 413
    type "child"
  ]
  edge [
    source 409
    target 414
    type "child"
  ]
  edge [
    source 409
    target 37
    type "child"
  ]
  edge [
    source 409
    target 415
    type "child"
  ]
  edge [
    source 409
    target 416
    type "child"
  ]
  edge [
    source 411
    target 410
    type "link"
  ]
  edge [
    source 412
    target 35
    type "link"
  ]
  edge [
    source 413
    target 35
    type "link"
  ]
  edge [
    source 414
    target 410
    type "link"
  ]
  edge [
    source 415
    target 41
    type "link"
  ]
  edge [
    source 415
    target 410
    type "link"
  ]
  edge [
    source 415
    target 35
    type "link"
  ]
  edge [
    source 415
    target 21
    type "link"
  ]
  edge [
    source 416
    target 410
    type "link"
  ]
  edge [
    source 416
    target 35
    type "link"
  ]
  edge [
    source 419
    target 420
    type "child"
  ]
  edge [
    source 419
    target 422
    type "child"
  ]
  edge [
    source 419
    target 423
    type "child"
  ]
  edge [
    source 419
    target 424
    type "child"
  ]
  edge [
    source 419
    target 425
    type "child"
  ]
  edge [
    source 419
    target 426
    type "child"
  ]
  edge [
    source 419
    target 427
    type "child"
  ]
  edge [
    source 419
    target 428
    type "child"
  ]
  edge [
    source 419
    target 429
    type "child"
  ]
  edge [
    source 419
    target 430
    type "child"
  ]
  edge [
    source 419
    target 431
    type "child"
  ]
  edge [
    source 419
    target 432
    type "child"
  ]
  edge [
    source 419
    target 433
    type "child"
  ]
  edge [
    source 419
    target 434
    type "child"
  ]
  edge [
    source 419
    target 435
    type "child"
  ]
  edge [
    source 419
    target 436
    type "child"
  ]
  edge [
    source 420
    target 421
    type "link"
  ]
  edge [
    source 420
    target 21
    type "link"
  ]
  edge [
    source 429
    target 421
    type "link"
  ]
  edge [
    source 430
    target 418
    type "link"
  ]
  edge [
    source 430
    target 39
    type "link"
  ]
  edge [
    source 432
    target 418
    type "link"
  ]
  edge [
    source 432
    target 39
    type "link"
  ]
  edge [
    source 435
    target 400
    type "link"
  ]
  edge [
    source 435
    target 73
    type "link"
  ]
  edge [
    source 435
    target 1542
    type "link"
  ]
  edge [
    source 435
    target 1540
    type "link"
  ]
  edge [
    source 435
    target 2648
    type "link"
  ]
  edge [
    source 456
    target 457
    type "link"
  ]
  edge [
    source 460
    target 461
    type "link"
  ]
  edge [
    source 460
    target 395
    type "link"
  ]
  edge [
    source 462
    target 395
    type "link"
  ]
  edge [
    source 462
    target 463
    type "link"
  ]
  edge [
    source 464
    target 395
    type "link"
  ]
  edge [
    source 464
    target 465
    type "link"
  ]
  edge [
    source 466
    target 395
    type "link"
  ]
  edge [
    source 466
    target 467
    type "link"
  ]
  edge [
    source 468
    target 395
    type "link"
  ]
  edge [
    source 468
    target 469
    type "link"
  ]
  edge [
    source 470
    target 471
    type "link"
  ]
  edge [
    source 470
    target 395
    type "link"
  ]
  edge [
    source 472
    target 395
    type "link"
  ]
  edge [
    source 472
    target 473
    type "link"
  ]
  edge [
    source 475
    target 395
    type "link"
  ]
  edge [
    source 476
    target 477
    type "link"
  ]
  edge [
    source 486
    target 487
    type "link"
  ]
  edge [
    source 497
    target 46
    type "link"
  ]
  edge [
    source 497
    target 64
    type "link"
  ]
  edge [
    source 497
    target 55
    type "link"
  ]
  edge [
    source 497
    target 47
    type "link"
  ]
  edge [
    source 497
    target 49
    type "link"
  ]
  edge [
    source 498
    target 46
    type "link"
  ]
  edge [
    source 498
    target 64
    type "link"
  ]
  edge [
    source 498
    target 55
    type "link"
  ]
  edge [
    source 498
    target 47
    type "link"
  ]
  edge [
    source 498
    target 49
    type "link"
  ]
  edge [
    source 499
    target 500
    type "link"
  ]
  edge [
    source 499
    target 46
    type "link"
  ]
  edge [
    source 499
    target 64
    type "link"
  ]
  edge [
    source 499
    target 55
    type "link"
  ]
  edge [
    source 499
    target 49
    type "link"
  ]
  edge [
    source 501
    target 500
    type "link"
  ]
  edge [
    source 501
    target 46
    type "link"
  ]
  edge [
    source 501
    target 64
    type "link"
  ]
  edge [
    source 501
    target 55
    type "link"
  ]
  edge [
    source 501
    target 49
    type "link"
  ]
  edge [
    source 502
    target 503
    type "link"
  ]
  edge [
    source 502
    target 46
    type "link"
  ]
  edge [
    source 502
    target 64
    type "link"
  ]
  edge [
    source 502
    target 55
    type "link"
  ]
  edge [
    source 502
    target 49
    type "link"
  ]
  edge [
    source 504
    target 503
    type "link"
  ]
  edge [
    source 504
    target 46
    type "link"
  ]
  edge [
    source 504
    target 64
    type "link"
  ]
  edge [
    source 504
    target 55
    type "link"
  ]
  edge [
    source 504
    target 49
    type "link"
  ]
  edge [
    source 505
    target 506
    type "link"
  ]
  edge [
    source 505
    target 46
    type "link"
  ]
  edge [
    source 505
    target 64
    type "link"
  ]
  edge [
    source 505
    target 55
    type "link"
  ]
  edge [
    source 505
    target 49
    type "link"
  ]
  edge [
    source 507
    target 506
    type "link"
  ]
  edge [
    source 507
    target 46
    type "link"
  ]
  edge [
    source 507
    target 64
    type "link"
  ]
  edge [
    source 507
    target 55
    type "link"
  ]
  edge [
    source 507
    target 49
    type "link"
  ]
  edge [
    source 508
    target 509
    type "link"
  ]
  edge [
    source 509
    target 510
    type "child"
  ]
  edge [
    source 509
    target 511
    type "child"
  ]
  edge [
    source 509
    target 512
    type "child"
  ]
  edge [
    source 509
    target 513
    type "child"
  ]
  edge [
    source 509
    target 514
    type "child"
  ]
  edge [
    source 509
    target 515
    type "child"
  ]
  edge [
    source 509
    target 526
    type "child"
  ]
  edge [
    source 509
    target 528
    type "child"
  ]
  edge [
    source 509
    target 2661
    type "child"
  ]
  edge [
    source 509
    target 2662
    type "child"
  ]
  edge [
    source 509
    target 2663
    type "child"
  ]
  edge [
    source 509
    target 2665
    type "child"
  ]
  edge [
    source 509
    target 2666
    type "child"
  ]
  edge [
    source 509
    target 2667
    type "child"
  ]
  edge [
    source 509
    target 2668
    type "child"
  ]
  edge [
    source 509
    target 2669
    type "child"
  ]
  edge [
    source 509
    target 2670
    type "child"
  ]
  edge [
    source 509
    target 2671
    type "child"
  ]
  edge [
    source 509
    target 2672
    type "child"
  ]
  edge [
    source 509
    target 2673
    type "child"
  ]
  edge [
    source 509
    target 2675
    type "child"
  ]
  edge [
    source 509
    target 2676
    type "child"
  ]
  edge [
    source 509
    target 2677
    type "child"
  ]
  edge [
    source 509
    target 2170
    type "child"
  ]
  edge [
    source 509
    target 2678
    type "child"
  ]
  edge [
    source 509
    target 2680
    type "child"
  ]
  edge [
    source 509
    target 2681
    type "child"
  ]
  edge [
    source 509
    target 2682
    type "child"
  ]
  edge [
    source 509
    target 2683
    type "child"
  ]
  edge [
    source 509
    target 2684
    type "child"
  ]
  edge [
    source 509
    target 2686
    type "child"
  ]
  edge [
    source 509
    target 2687
    type "child"
  ]
  edge [
    source 509
    target 2688
    type "child"
  ]
  edge [
    source 509
    target 2689
    type "child"
  ]
  edge [
    source 509
    target 2690
    type "child"
  ]
  edge [
    source 509
    target 2691
    type "child"
  ]
  edge [
    source 509
    target 2692
    type "child"
  ]
  edge [
    source 509
    target 2693
    type "child"
  ]
  edge [
    source 509
    target 2694
    type "child"
  ]
  edge [
    source 509
    target 2695
    type "child"
  ]
  edge [
    source 515
    target 516
    type "link"
  ]
  edge [
    source 517
    target 518
    type "child"
  ]
  edge [
    source 517
    target 519
    type "child"
  ]
  edge [
    source 517
    target 520
    type "child"
  ]
  edge [
    source 517
    target 521
    type "child"
  ]
  edge [
    source 517
    target 522
    type "child"
  ]
  edge [
    source 517
    target 523
    type "child"
  ]
  edge [
    source 517
    target 524
    type "child"
  ]
  edge [
    source 517
    target 525
    type "child"
  ]
  edge [
    source 524
    target 516
    type "link"
  ]
  edge [
    source 526
    target 527
    type "link"
  ]
  edge [
    source 528
    target 529
    type "link"
  ]
  edge [
    source 530
    target 531
    type "child"
  ]
  edge [
    source 530
    target 2637
    type "child"
  ]
  edge [
    source 530
    target 2638
    type "child"
  ]
  edge [
    source 530
    target 2640
    type "child"
  ]
  edge [
    source 530
    target 2642
    type "child"
  ]
  edge [
    source 530
    target 2643
    type "child"
  ]
  edge [
    source 530
    target 2644
    type "child"
  ]
  edge [
    source 530
    target 2645
    type "child"
  ]
  edge [
    source 530
    target 2646
    type "child"
  ]
  edge [
    source 530
    target 2647
    type "child"
  ]
  edge [
    source 530
    target 192
    type "child"
  ]
  edge [
    source 530
    target 1089
    type "child"
  ]
  edge [
    source 530
    target 1090
    type "child"
  ]
  edge [
    source 530
    target 1091
    type "child"
  ]
  edge [
    source 530
    target 1092
    type "child"
  ]
  edge [
    source 530
    target 1093
    type "child"
  ]
  edge [
    source 530
    target 1094
    type "child"
  ]
  edge [
    source 530
    target 435
    type "child"
  ]
  edge [
    source 530
    target 2649
    type "child"
  ]
  edge [
    source 530
    target 884
    type "child"
  ]
  edge [
    source 530
    target 2650
    type "child"
  ]
  edge [
    source 530
    target 2652
    type "child"
  ]
  edge [
    source 530
    target 2653
    type "child"
  ]
  edge [
    source 530
    target 2654
    type "child"
  ]
  edge [
    source 530
    target 2655
    type "child"
  ]
  edge [
    source 530
    target 2656
    type "child"
  ]
  edge [
    source 530
    target 2657
    type "child"
  ]
  edge [
    source 530
    target 2659
    type "child"
  ]
  edge [
    source 531
    target 532
    type "link"
  ]
  edge [
    source 531
    target 2574
    type "link"
  ]
  edge [
    source 533
    target 534
    type "child"
  ]
  edge [
    source 533
    target 1060
    type "child"
  ]
  edge [
    source 533
    target 1062
    type "child"
  ]
  edge [
    source 533
    target 1064
    type "child"
  ]
  edge [
    source 533
    target 1065
    type "child"
  ]
  edge [
    source 533
    target 1066
    type "child"
  ]
  edge [
    source 533
    target 1067
    type "child"
  ]
  edge [
    source 533
    target 1068
    type "child"
  ]
  edge [
    source 533
    target 1069
    type "child"
  ]
  edge [
    source 533
    target 1070
    type "child"
  ]
  edge [
    source 533
    target 1071
    type "child"
  ]
  edge [
    source 533
    target 1073
    type "child"
  ]
  edge [
    source 533
    target 1074
    type "child"
  ]
  edge [
    source 533
    target 1075
    type "child"
  ]
  edge [
    source 533
    target 1076
    type "child"
  ]
  edge [
    source 533
    target 1077
    type "child"
  ]
  edge [
    source 533
    target 1078
    type "child"
  ]
  edge [
    source 533
    target 1080
    type "child"
  ]
  edge [
    source 533
    target 1081
    type "child"
  ]
  edge [
    source 533
    target 1082
    type "child"
  ]
  edge [
    source 533
    target 1084
    type "child"
  ]
  edge [
    source 533
    target 1085
    type "child"
  ]
  edge [
    source 533
    target 1087
    type "child"
  ]
  edge [
    source 533
    target 1089
    type "child"
  ]
  edge [
    source 533
    target 1090
    type "child"
  ]
  edge [
    source 533
    target 1091
    type "child"
  ]
  edge [
    source 533
    target 1092
    type "child"
  ]
  edge [
    source 533
    target 1093
    type "child"
  ]
  edge [
    source 533
    target 1094
    type "child"
  ]
  edge [
    source 533
    target 192
    type "child"
  ]
  edge [
    source 533
    target 435
    type "child"
  ]
  edge [
    source 533
    target 1095
    type "child"
  ]
  edge [
    source 533
    target 884
    type "child"
  ]
  edge [
    source 533
    target 1096
    type "child"
  ]
  edge [
    source 533
    target 2546
    type "child"
  ]
  edge [
    source 533
    target 2547
    type "child"
  ]
  edge [
    source 533
    target 2549
    type "child"
  ]
  edge [
    source 533
    target 2553
    type "child"
  ]
  edge [
    source 533
    target 2554
    type "child"
  ]
  edge [
    source 533
    target 2555
    type "child"
  ]
  edge [
    source 533
    target 2556
    type "child"
  ]
  edge [
    source 533
    target 2557
    type "child"
  ]
  edge [
    source 533
    target 2558
    type "child"
  ]
  edge [
    source 533
    target 2559
    type "child"
  ]
  edge [
    source 533
    target 2560
    type "child"
  ]
  edge [
    source 533
    target 2561
    type "child"
  ]
  edge [
    source 533
    target 2562
    type "child"
  ]
  edge [
    source 533
    target 2563
    type "child"
  ]
  edge [
    source 533
    target 2564
    type "child"
  ]
  edge [
    source 533
    target 2565
    type "child"
  ]
  edge [
    source 533
    target 2566
    type "child"
  ]
  edge [
    source 533
    target 2567
    type "child"
  ]
  edge [
    source 533
    target 2568
    type "child"
  ]
  edge [
    source 533
    target 2569
    type "child"
  ]
  edge [
    source 533
    target 2570
    type "child"
  ]
  edge [
    source 533
    target 2572
    type "child"
  ]
  edge [
    source 534
    target 535
    type "link"
  ]
  edge [
    source 536
    target 537
    type "child"
  ]
  edge [
    source 536
    target 538
    type "child"
  ]
  edge [
    source 536
    target 540
    type "child"
  ]
  edge [
    source 536
    target 541
    type "child"
  ]
  edge [
    source 536
    target 542
    type "child"
  ]
  edge [
    source 536
    target 550
    type "child"
  ]
  edge [
    source 536
    target 551
    type "child"
  ]
  edge [
    source 536
    target 552
    type "child"
  ]
  edge [
    source 536
    target 553
    type "child"
  ]
  edge [
    source 536
    target 554
    type "child"
  ]
  edge [
    source 536
    target 555
    type "child"
  ]
  edge [
    source 536
    target 732
    type "child"
  ]
  edge [
    source 536
    target 733
    type "child"
  ]
  edge [
    source 536
    target 734
    type "child"
  ]
  edge [
    source 536
    target 751
    type "child"
  ]
  edge [
    source 536
    target 752
    type "child"
  ]
  edge [
    source 536
    target 753
    type "child"
  ]
  edge [
    source 536
    target 754
    type "child"
  ]
  edge [
    source 536
    target 755
    type "child"
  ]
  edge [
    source 536
    target 756
    type "child"
  ]
  edge [
    source 536
    target 757
    type "child"
  ]
  edge [
    source 536
    target 758
    type "child"
  ]
  edge [
    source 536
    target 759
    type "child"
  ]
  edge [
    source 536
    target 760
    type "child"
  ]
  edge [
    source 536
    target 435
    type "child"
  ]
  edge [
    source 536
    target 761
    type "child"
  ]
  edge [
    source 536
    target 762
    type "child"
  ]
  edge [
    source 536
    target 763
    type "child"
  ]
  edge [
    source 536
    target 764
    type "child"
  ]
  edge [
    source 536
    target 765
    type "child"
  ]
  edge [
    source 536
    target 766
    type "child"
  ]
  edge [
    source 536
    target 767
    type "child"
  ]
  edge [
    source 536
    target 768
    type "child"
  ]
  edge [
    source 536
    target 769
    type "child"
  ]
  edge [
    source 536
    target 770
    type "child"
  ]
  edge [
    source 536
    target 771
    type "child"
  ]
  edge [
    source 536
    target 772
    type "child"
  ]
  edge [
    source 536
    target 773
    type "child"
  ]
  edge [
    source 536
    target 774
    type "child"
  ]
  edge [
    source 536
    target 775
    type "child"
  ]
  edge [
    source 536
    target 776
    type "child"
  ]
  edge [
    source 536
    target 777
    type "child"
  ]
  edge [
    source 536
    target 778
    type "child"
  ]
  edge [
    source 536
    target 779
    type "child"
  ]
  edge [
    source 536
    target 780
    type "child"
  ]
  edge [
    source 536
    target 781
    type "child"
  ]
  edge [
    source 536
    target 782
    type "child"
  ]
  edge [
    source 536
    target 783
    type "child"
  ]
  edge [
    source 536
    target 806
    type "child"
  ]
  edge [
    source 536
    target 807
    type "child"
  ]
  edge [
    source 536
    target 871
    type "child"
  ]
  edge [
    source 536
    target 872
    type "child"
  ]
  edge [
    source 536
    target 873
    type "child"
  ]
  edge [
    source 536
    target 874
    type "child"
  ]
  edge [
    source 536
    target 876
    type "child"
  ]
  edge [
    source 536
    target 877
    type "child"
  ]
  edge [
    source 536
    target 878
    type "child"
  ]
  edge [
    source 536
    target 1011
    type "child"
  ]
  edge [
    source 536
    target 1012
    type "child"
  ]
  edge [
    source 536
    target 1013
    type "child"
  ]
  edge [
    source 536
    target 1014
    type "child"
  ]
  edge [
    source 536
    target 1015
    type "child"
  ]
  edge [
    source 536
    target 1016
    type "child"
  ]
  edge [
    source 536
    target 1017
    type "child"
  ]
  edge [
    source 536
    target 1018
    type "child"
  ]
  edge [
    source 536
    target 1019
    type "child"
  ]
  edge [
    source 536
    target 1020
    type "child"
  ]
  edge [
    source 536
    target 1022
    type "child"
  ]
  edge [
    source 536
    target 1024
    type "child"
  ]
  edge [
    source 536
    target 1025
    type "child"
  ]
  edge [
    source 536
    target 192
    type "child"
  ]
  edge [
    source 536
    target 547
    type "child"
  ]
  edge [
    source 536
    target 548
    type "child"
  ]
  edge [
    source 536
    target 1026
    type "child"
  ]
  edge [
    source 536
    target 1027
    type "child"
  ]
  edge [
    source 536
    target 1030
    type "child"
  ]
  edge [
    source 536
    target 1031
    type "child"
  ]
  edge [
    source 536
    target 1032
    type "child"
  ]
  edge [
    source 536
    target 1033
    type "child"
  ]
  edge [
    source 536
    target 1034
    type "child"
  ]
  edge [
    source 536
    target 1035
    type "child"
  ]
  edge [
    source 536
    target 1037
    type "child"
  ]
  edge [
    source 536
    target 1038
    type "child"
  ]
  edge [
    source 536
    target 1039
    type "child"
  ]
  edge [
    source 536
    target 1040
    type "child"
  ]
  edge [
    source 536
    target 1041
    type "child"
  ]
  edge [
    source 536
    target 1042
    type "child"
  ]
  edge [
    source 536
    target 1043
    type "child"
  ]
  edge [
    source 536
    target 1044
    type "child"
  ]
  edge [
    source 536
    target 1045
    type "child"
  ]
  edge [
    source 536
    target 1046
    type "child"
  ]
  edge [
    source 536
    target 1047
    type "child"
  ]
  edge [
    source 536
    target 1048
    type "child"
  ]
  edge [
    source 536
    target 1049
    type "child"
  ]
  edge [
    source 536
    target 1055
    type "child"
  ]
  edge [
    source 536
    target 1056
    type "child"
  ]
  edge [
    source 536
    target 1057
    type "child"
  ]
  edge [
    source 536
    target 1058
    type "child"
  ]
  edge [
    source 536
    target 1059
    type "child"
  ]
  edge [
    source 537
    target 583
    type "link"
  ]
  edge [
    source 538
    target 539
    type "link"
  ]
  edge [
    source 541
    target 539
    type "link"
  ]
  edge [
    source 542
    target 539
    type "link"
  ]
  edge [
    source 543
    target 544
    type "child"
  ]
  edge [
    source 543
    target 545
    type "child"
  ]
  edge [
    source 543
    target 2
    type "child"
  ]
  edge [
    source 543
    target 546
    type "child"
  ]
  edge [
    source 543
    target 192
    type "child"
  ]
  edge [
    source 543
    target 547
    type "child"
  ]
  edge [
    source 543
    target 548
    type "child"
  ]
  edge [
    source 543
    target 549
    type "child"
  ]
  edge [
    source 555
    target 556
    type "link"
  ]
  edge [
    source 556
    target 557
    type "child"
  ]
  edge [
    source 556
    target 558
    type "child"
  ]
  edge [
    source 556
    target 559
    type "child"
  ]
  edge [
    source 556
    target 563
    type "child"
  ]
  edge [
    source 556
    target 564
    type "child"
  ]
  edge [
    source 556
    target 565
    type "child"
  ]
  edge [
    source 556
    target 566
    type "child"
  ]
  edge [
    source 556
    target 568
    type "child"
  ]
  edge [
    source 556
    target 569
    type "child"
  ]
  edge [
    source 556
    target 570
    type "child"
  ]
  edge [
    source 556
    target 572
    type "child"
  ]
  edge [
    source 556
    target 573
    type "child"
  ]
  edge [
    source 556
    target 574
    type "child"
  ]
  edge [
    source 556
    target 575
    type "child"
  ]
  edge [
    source 556
    target 718
    type "child"
  ]
  edge [
    source 556
    target 722
    type "child"
  ]
  edge [
    source 556
    target 723
    type "child"
  ]
  edge [
    source 556
    target 725
    type "child"
  ]
  edge [
    source 556
    target 726
    type "child"
  ]
  edge [
    source 556
    target 728
    type "child"
  ]
  edge [
    source 556
    target 729
    type "child"
  ]
  edge [
    source 556
    target 731
    type "child"
  ]
  edge [
    source 559
    target 560
    type "link"
  ]
  edge [
    source 559
    target 561
    type "link"
  ]
  edge [
    source 559
    target 562
    type "link"
  ]
  edge [
    source 566
    target 567
    type "link"
  ]
  edge [
    source 570
    target 571
    type "link"
  ]
  edge [
    source 575
    target 576
    type "link"
  ]
  edge [
    source 575
    target 577
    type "link"
  ]
  edge [
    source 575
    target 588
    type "link"
  ]
  edge [
    source 575
    target 589
    type "link"
  ]
  edge [
    source 575
    target 591
    type "link"
  ]
  edge [
    source 575
    target 587
    type "link"
  ]
  edge [
    source 575
    target 592
    type "link"
  ]
  edge [
    source 575
    target 539
    type "link"
  ]
  edge [
    source 577
    target 192
    type "child"
  ]
  edge [
    source 577
    target 578
    type "child"
  ]
  edge [
    source 577
    target 579
    type "child"
  ]
  edge [
    source 577
    target 580
    type "child"
  ]
  edge [
    source 577
    target 581
    type "child"
  ]
  edge [
    source 577
    target 582
    type "child"
  ]
  edge [
    source 577
    target 537
    type "child"
  ]
  edge [
    source 577
    target 584
    type "child"
  ]
  edge [
    source 577
    target 585
    type "child"
  ]
  edge [
    source 577
    target 586
    type "child"
  ]
  edge [
    source 586
    target 576
    type "link"
  ]
  edge [
    source 586
    target 587
    type "link"
  ]
  edge [
    source 590
    target 192
    type "child"
  ]
  edge [
    source 593
    target 594
    type "child"
  ]
  edge [
    source 593
    target 595
    type "child"
  ]
  edge [
    source 593
    target 596
    type "child"
  ]
  edge [
    source 593
    target 597
    type "child"
  ]
  edge [
    source 593
    target 598
    type "child"
  ]
  edge [
    source 593
    target 599
    type "child"
  ]
  edge [
    source 593
    target 600
    type "child"
  ]
  edge [
    source 593
    target 601
    type "child"
  ]
  edge [
    source 593
    target 602
    type "child"
  ]
  edge [
    source 593
    target 603
    type "child"
  ]
  edge [
    source 593
    target 604
    type "child"
  ]
  edge [
    source 593
    target 605
    type "child"
  ]
  edge [
    source 593
    target 606
    type "child"
  ]
  edge [
    source 593
    target 647
    type "child"
  ]
  edge [
    source 593
    target 704
    type "child"
  ]
  edge [
    source 593
    target 705
    type "child"
  ]
  edge [
    source 593
    target 706
    type "child"
  ]
  edge [
    source 593
    target 707
    type "child"
  ]
  edge [
    source 593
    target 708
    type "child"
  ]
  edge [
    source 593
    target 709
    type "child"
  ]
  edge [
    source 593
    target 649
    type "child"
  ]
  edge [
    source 593
    target 710
    type "child"
  ]
  edge [
    source 593
    target 711
    type "child"
  ]
  edge [
    source 593
    target 712
    type "child"
  ]
  edge [
    source 593
    target 713
    type "child"
  ]
  edge [
    source 593
    target 714
    type "child"
  ]
  edge [
    source 593
    target 715
    type "child"
  ]
  edge [
    source 593
    target 716
    type "child"
  ]
  edge [
    source 606
    target 607
    type "link"
  ]
  edge [
    source 608
    target 609
    type "child"
  ]
  edge [
    source 608
    target 615
    type "child"
  ]
  edge [
    source 608
    target 618
    type "child"
  ]
  edge [
    source 608
    target 619
    type "child"
  ]
  edge [
    source 608
    target 620
    type "child"
  ]
  edge [
    source 608
    target 621
    type "child"
  ]
  edge [
    source 608
    target 623
    type "child"
  ]
  edge [
    source 608
    target 624
    type "child"
  ]
  edge [
    source 608
    target 626
    type "child"
  ]
  edge [
    source 608
    target 627
    type "child"
  ]
  edge [
    source 608
    target 628
    type "child"
  ]
  edge [
    source 608
    target 629
    type "child"
  ]
  edge [
    source 608
    target 630
    type "child"
  ]
  edge [
    source 608
    target 632
    type "child"
  ]
  edge [
    source 608
    target 633
    type "child"
  ]
  edge [
    source 608
    target 634
    type "child"
  ]
  edge [
    source 608
    target 635
    type "child"
  ]
  edge [
    source 608
    target 637
    type "child"
  ]
  edge [
    source 608
    target 638
    type "child"
  ]
  edge [
    source 608
    target 639
    type "child"
  ]
  edge [
    source 608
    target 640
    type "child"
  ]
  edge [
    source 608
    target 641
    type "child"
  ]
  edge [
    source 608
    target 642
    type "child"
  ]
  edge [
    source 608
    target 645
    type "child"
  ]
  edge [
    source 608
    target 646
    type "child"
  ]
  edge [
    source 608
    target 598
    type "child"
  ]
  edge [
    source 608
    target 601
    type "child"
  ]
  edge [
    source 608
    target 603
    type "child"
  ]
  edge [
    source 608
    target 604
    type "child"
  ]
  edge [
    source 608
    target 605
    type "child"
  ]
  edge [
    source 608
    target 606
    type "child"
  ]
  edge [
    source 608
    target 647
    type "child"
  ]
  edge [
    source 608
    target 648
    type "child"
  ]
  edge [
    source 608
    target 649
    type "child"
  ]
  edge [
    source 608
    target 192
    type "child"
  ]
  edge [
    source 608
    target 435
    type "child"
  ]
  edge [
    source 608
    target 650
    type "child"
  ]
  edge [
    source 608
    target 651
    type "child"
  ]
  edge [
    source 608
    target 653
    type "child"
  ]
  edge [
    source 608
    target 656
    type "child"
  ]
  edge [
    source 608
    target 657
    type "child"
  ]
  edge [
    source 608
    target 658
    type "child"
  ]
  edge [
    source 608
    target 659
    type "child"
  ]
  edge [
    source 608
    target 660
    type "child"
  ]
  edge [
    source 608
    target 661
    type "child"
  ]
  edge [
    source 608
    target 662
    type "child"
  ]
  edge [
    source 608
    target 663
    type "child"
  ]
  edge [
    source 608
    target 664
    type "child"
  ]
  edge [
    source 608
    target 665
    type "child"
  ]
  edge [
    source 608
    target 666
    type "child"
  ]
  edge [
    source 608
    target 667
    type "child"
  ]
  edge [
    source 608
    target 668
    type "child"
  ]
  edge [
    source 608
    target 669
    type "child"
  ]
  edge [
    source 608
    target 670
    type "child"
  ]
  edge [
    source 608
    target 671
    type "child"
  ]
  edge [
    source 608
    target 672
    type "child"
  ]
  edge [
    source 608
    target 673
    type "child"
  ]
  edge [
    source 608
    target 674
    type "child"
  ]
  edge [
    source 608
    target 675
    type "child"
  ]
  edge [
    source 608
    target 676
    type "child"
  ]
  edge [
    source 608
    target 677
    type "child"
  ]
  edge [
    source 608
    target 678
    type "child"
  ]
  edge [
    source 608
    target 679
    type "child"
  ]
  edge [
    source 608
    target 680
    type "child"
  ]
  edge [
    source 608
    target 681
    type "child"
  ]
  edge [
    source 608
    target 682
    type "child"
  ]
  edge [
    source 608
    target 683
    type "child"
  ]
  edge [
    source 608
    target 684
    type "child"
  ]
  edge [
    source 608
    target 685
    type "child"
  ]
  edge [
    source 608
    target 686
    type "child"
  ]
  edge [
    source 608
    target 687
    type "child"
  ]
  edge [
    source 608
    target 688
    type "child"
  ]
  edge [
    source 608
    target 689
    type "child"
  ]
  edge [
    source 608
    target 690
    type "child"
  ]
  edge [
    source 608
    target 691
    type "child"
  ]
  edge [
    source 608
    target 692
    type "child"
  ]
  edge [
    source 608
    target 693
    type "child"
  ]
  edge [
    source 608
    target 694
    type "child"
  ]
  edge [
    source 608
    target 695
    type "child"
  ]
  edge [
    source 608
    target 696
    type "child"
  ]
  edge [
    source 608
    target 697
    type "child"
  ]
  edge [
    source 608
    target 698
    type "child"
  ]
  edge [
    source 608
    target 699
    type "child"
  ]
  edge [
    source 608
    target 700
    type "child"
  ]
  edge [
    source 608
    target 701
    type "child"
  ]
  edge [
    source 608
    target 702
    type "child"
  ]
  edge [
    source 608
    target 703
    type "child"
  ]
  edge [
    source 609
    target 610
    type "link"
  ]
  edge [
    source 609
    target 614
    type "link"
  ]
  edge [
    source 611
    target 612
    type "child"
  ]
  edge [
    source 611
    target 192
    type "child"
  ]
  edge [
    source 615
    target 616
    type "link"
  ]
  edge [
    source 615
    target 617
    type "link"
  ]
  edge [
    source 615
    target 610
    type "link"
  ]
  edge [
    source 618
    target 616
    type "link"
  ]
  edge [
    source 618
    target 617
    type "link"
  ]
  edge [
    source 618
    target 610
    type "link"
  ]
  edge [
    source 619
    target 616
    type "link"
  ]
  edge [
    source 619
    target 617
    type "link"
  ]
  edge [
    source 619
    target 610
    type "link"
  ]
  edge [
    source 620
    target 610
    type "link"
  ]
  edge [
    source 621
    target 622
    type "link"
  ]
  edge [
    source 621
    target 610
    type "link"
  ]
  edge [
    source 623
    target 610
    type "link"
  ]
  edge [
    source 624
    target 625
    type "link"
  ]
  edge [
    source 624
    target 610
    type "link"
  ]
  edge [
    source 630
    target 631
    type "link"
  ]
  edge [
    source 635
    target 636
    type "link"
  ]
  edge [
    source 638
    target 636
    type "link"
  ]
  edge [
    source 642
    target 643
    type "link"
  ]
  edge [
    source 642
    target 644
    type "link"
  ]
  edge [
    source 645
    target 614
    type "link"
  ]
  edge [
    source 646
    target 614
    type "link"
  ]
  edge [
    source 650
    target 73
    type "link"
  ]
  edge [
    source 651
    target 652
    type "link"
  ]
  edge [
    source 653
    target 654
    type "link"
  ]
  edge [
    source 653
    target 655
    type "link"
  ]
  edge [
    source 656
    target 611
    type "link"
  ]
  edge [
    source 657
    target 610
    type "link"
  ]
  edge [
    source 657
    target 613
    type "link"
  ]
  edge [
    source 659
    target 610
    type "link"
  ]
  edge [
    source 707
    target 643
    type "link"
  ]
  edge [
    source 707
    target 644
    type "link"
  ]
  edge [
    source 708
    target 614
    type "link"
  ]
  edge [
    source 709
    target 614
    type "link"
  ]
  edge [
    source 711
    target 622
    type "link"
  ]
  edge [
    source 714
    target 631
    type "link"
  ]
  edge [
    source 715
    target 636
    type "link"
  ]
  edge [
    source 716
    target 717
    type "link"
  ]
  edge [
    source 718
    target 576
    type "link"
  ]
  edge [
    source 718
    target 719
    type "link"
  ]
  edge [
    source 718
    target 720
    type "link"
  ]
  edge [
    source 718
    target 587
    type "link"
  ]
  edge [
    source 718
    target 592
    type "link"
  ]
  edge [
    source 718
    target 721
    type "link"
  ]
  edge [
    source 722
    target 576
    type "link"
  ]
  edge [
    source 722
    target 587
    type "link"
  ]
  edge [
    source 723
    target 724
    type "link"
  ]
  edge [
    source 726
    target 577
    type "link"
  ]
  edge [
    source 726
    target 727
    type "link"
  ]
  edge [
    source 726
    target 587
    type "link"
  ]
  edge [
    source 726
    target 592
    type "link"
  ]
  edge [
    source 728
    target 589
    type "link"
  ]
  edge [
    source 729
    target 730
    type "link"
  ]
  edge [
    source 732
    target 556
    type "link"
  ]
  edge [
    source 733
    target 556
    type "link"
  ]
  edge [
    source 734
    target 735
    type "link"
  ]
  edge [
    source 735
    target 736
    type "child"
  ]
  edge [
    source 735
    target 737
    type "child"
  ]
  edge [
    source 735
    target 738
    type "child"
  ]
  edge [
    source 735
    target 739
    type "child"
  ]
  edge [
    source 735
    target 740
    type "child"
  ]
  edge [
    source 735
    target 741
    type "child"
  ]
  edge [
    source 735
    target 742
    type "child"
  ]
  edge [
    source 735
    target 743
    type "child"
  ]
  edge [
    source 735
    target 744
    type "child"
  ]
  edge [
    source 735
    target 745
    type "child"
  ]
  edge [
    source 735
    target 746
    type "child"
  ]
  edge [
    source 735
    target 747
    type "child"
  ]
  edge [
    source 735
    target 748
    type "child"
  ]
  edge [
    source 735
    target 749
    type "child"
  ]
  edge [
    source 735
    target 750
    type "child"
  ]
  edge [
    source 751
    target 735
    type "link"
  ]
  edge [
    source 752
    target 735
    type "link"
  ]
  edge [
    source 753
    target 735
    type "link"
  ]
  edge [
    source 755
    target 735
    type "link"
  ]
  edge [
    source 756
    target 735
    type "link"
  ]
  edge [
    source 757
    target 735
    type "link"
  ]
  edge [
    source 759
    target 73
    type "link"
  ]
  edge [
    source 760
    target 73
    type "link"
  ]
  edge [
    source 779
    target 543
    type "link"
  ]
  edge [
    source 783
    target 784
    type "link"
  ]
  edge [
    source 784
    target 785
    type "child"
  ]
  edge [
    source 784
    target 786
    type "child"
  ]
  edge [
    source 784
    target 794
    type "child"
  ]
  edge [
    source 784
    target 192
    type "child"
  ]
  edge [
    source 784
    target 795
    type "child"
  ]
  edge [
    source 784
    target 796
    type "child"
  ]
  edge [
    source 784
    target 797
    type "child"
  ]
  edge [
    source 784
    target 798
    type "child"
  ]
  edge [
    source 784
    target 799
    type "child"
  ]
  edge [
    source 784
    target 801
    type "child"
  ]
  edge [
    source 784
    target 266
    type "child"
  ]
  edge [
    source 784
    target 802
    type "child"
  ]
  edge [
    source 784
    target 803
    type "child"
  ]
  edge [
    source 784
    target 804
    type "child"
  ]
  edge [
    source 784
    target 805
    type "child"
  ]
  edge [
    source 786
    target 787
    type "link"
  ]
  edge [
    source 786
    target 788
    type "link"
  ]
  edge [
    source 786
    target 789
    type "link"
  ]
  edge [
    source 786
    target 790
    type "link"
  ]
  edge [
    source 786
    target 791
    type "link"
  ]
  edge [
    source 786
    target 792
    type "link"
  ]
  edge [
    source 786
    target 793
    type "link"
  ]
  edge [
    source 799
    target 800
    type "link"
  ]
  edge [
    source 807
    target 808
    type "link"
  ]
  edge [
    source 807
    target 784
    type "link"
  ]
  edge [
    source 807
    target 809
    type "link"
  ]
  edge [
    source 809
    target 810
    type "child"
  ]
  edge [
    source 809
    target 811
    type "child"
  ]
  edge [
    source 809
    target 820
    type "child"
  ]
  edge [
    source 809
    target 821
    type "child"
  ]
  edge [
    source 809
    target 822
    type "child"
  ]
  edge [
    source 809
    target 813
    type "child"
  ]
  edge [
    source 809
    target 814
    type "child"
  ]
  edge [
    source 809
    target 823
    type "child"
  ]
  edge [
    source 809
    target 815
    type "child"
  ]
  edge [
    source 809
    target 816
    type "child"
  ]
  edge [
    source 809
    target 824
    type "child"
  ]
  edge [
    source 809
    target 817
    type "child"
  ]
  edge [
    source 809
    target 818
    type "child"
  ]
  edge [
    source 809
    target 825
    type "child"
  ]
  edge [
    source 809
    target 819
    type "child"
  ]
  edge [
    source 809
    target 826
    type "child"
  ]
  edge [
    source 809
    target 827
    type "child"
  ]
  edge [
    source 809
    target 828
    type "child"
  ]
  edge [
    source 809
    target 830
    type "child"
  ]
  edge [
    source 809
    target 832
    type "child"
  ]
  edge [
    source 809
    target 833
    type "child"
  ]
  edge [
    source 809
    target 839
    type "child"
  ]
  edge [
    source 809
    target 841
    type "child"
  ]
  edge [
    source 809
    target 843
    type "child"
  ]
  edge [
    source 809
    target 845
    type "child"
  ]
  edge [
    source 809
    target 847
    type "child"
  ]
  edge [
    source 809
    target 850
    type "child"
  ]
  edge [
    source 809
    target 852
    type "child"
  ]
  edge [
    source 809
    target 853
    type "child"
  ]
  edge [
    source 809
    target 854
    type "child"
  ]
  edge [
    source 809
    target 857
    type "child"
  ]
  edge [
    source 809
    target 860
    type "child"
  ]
  edge [
    source 809
    target 861
    type "child"
  ]
  edge [
    source 809
    target 862
    type "child"
  ]
  edge [
    source 809
    target 863
    type "child"
  ]
  edge [
    source 809
    target 864
    type "child"
  ]
  edge [
    source 809
    target 192
    type "child"
  ]
  edge [
    source 809
    target 865
    type "child"
  ]
  edge [
    source 809
    target 866
    type "child"
  ]
  edge [
    source 809
    target 867
    type "child"
  ]
  edge [
    source 809
    target 868
    type "child"
  ]
  edge [
    source 809
    target 869
    type "child"
  ]
  edge [
    source 809
    target 870
    type "child"
  ]
  edge [
    source 811
    target 812
    type "link"
  ]
  edge [
    source 812
    target 813
    type "child"
  ]
  edge [
    source 812
    target 814
    type "child"
  ]
  edge [
    source 812
    target 815
    type "child"
  ]
  edge [
    source 812
    target 816
    type "child"
  ]
  edge [
    source 812
    target 817
    type "child"
  ]
  edge [
    source 812
    target 818
    type "child"
  ]
  edge [
    source 812
    target 819
    type "child"
  ]
  edge [
    source 828
    target 829
    type "link"
  ]
  edge [
    source 830
    target 831
    type "link"
  ]
  edge [
    source 832
    target 809
    type "link"
  ]
  edge [
    source 833
    target 834
    type "link"
  ]
  edge [
    source 833
    target 835
    type "link"
  ]
  edge [
    source 833
    target 836
    type "link"
  ]
  edge [
    source 833
    target 837
    type "link"
  ]
  edge [
    source 833
    target 829
    type "link"
  ]
  edge [
    source 833
    target 838
    type "link"
  ]
  edge [
    source 839
    target 835
    type "link"
  ]
  edge [
    source 839
    target 836
    type "link"
  ]
  edge [
    source 839
    target 840
    type "link"
  ]
  edge [
    source 839
    target 829
    type "link"
  ]
  edge [
    source 839
    target 838
    type "link"
  ]
  edge [
    source 841
    target 842
    type "link"
  ]
  edge [
    source 843
    target 844
    type "link"
  ]
  edge [
    source 845
    target 846
    type "link"
  ]
  edge [
    source 847
    target 848
    type "link"
  ]
  edge [
    source 847
    target 849
    type "link"
  ]
  edge [
    source 850
    target 849
    type "link"
  ]
  edge [
    source 850
    target 851
    type "link"
  ]
  edge [
    source 852
    target 846
    type "link"
  ]
  edge [
    source 853
    target 848
    type "link"
  ]
  edge [
    source 853
    target 849
    type "link"
  ]
  edge [
    source 854
    target 855
    type "link"
  ]
  edge [
    source 854
    target 856
    type "link"
  ]
  edge [
    source 857
    target 858
    type "link"
  ]
  edge [
    source 857
    target 859
    type "link"
  ]
  edge [
    source 860
    target 858
    type "link"
  ]
  edge [
    source 860
    target 859
    type "link"
  ]
  edge [
    source 861
    target 855
    type "link"
  ]
  edge [
    source 863
    target 856
    type "link"
  ]
  edge [
    source 871
    target 784
    type "link"
  ]
  edge [
    source 871
    target 809
    type "link"
  ]
  edge [
    source 873
    target 784
    type "link"
  ]
  edge [
    source 873
    target 800
    type "link"
  ]
  edge [
    source 874
    target 875
    type "link"
  ]
  edge [
    source 878
    target 879
    type "link"
  ]
  edge [
    source 879
    target 880
    type "child"
  ]
  edge [
    source 879
    target 882
    type "child"
  ]
  edge [
    source 879
    target 435
    type "child"
  ]
  edge [
    source 879
    target 883
    type "child"
  ]
  edge [
    source 879
    target 884
    type "child"
  ]
  edge [
    source 879
    target 192
    type "child"
  ]
  edge [
    source 879
    target 885
    type "child"
  ]
  edge [
    source 879
    target 886
    type "child"
  ]
  edge [
    source 879
    target 887
    type "child"
  ]
  edge [
    source 879
    target 890
    type "child"
  ]
  edge [
    source 879
    target 892
    type "child"
  ]
  edge [
    source 879
    target 894
    type "child"
  ]
  edge [
    source 879
    target 897
    type "child"
  ]
  edge [
    source 879
    target 900
    type "child"
  ]
  edge [
    source 879
    target 903
    type "child"
  ]
  edge [
    source 879
    target 904
    type "child"
  ]
  edge [
    source 879
    target 906
    type "child"
  ]
  edge [
    source 879
    target 908
    type "child"
  ]
  edge [
    source 879
    target 909
    type "child"
  ]
  edge [
    source 879
    target 910
    type "child"
  ]
  edge [
    source 879
    target 911
    type "child"
  ]
  edge [
    source 879
    target 912
    type "child"
  ]
  edge [
    source 879
    target 913
    type "child"
  ]
  edge [
    source 879
    target 914
    type "child"
  ]
  edge [
    source 879
    target 915
    type "child"
  ]
  edge [
    source 879
    target 916
    type "child"
  ]
  edge [
    source 879
    target 921
    type "child"
  ]
  edge [
    source 879
    target 924
    type "child"
  ]
  edge [
    source 879
    target 925
    type "child"
  ]
  edge [
    source 879
    target 926
    type "child"
  ]
  edge [
    source 879
    target 927
    type "child"
  ]
  edge [
    source 879
    target 928
    type "child"
  ]
  edge [
    source 879
    target 929
    type "child"
  ]
  edge [
    source 879
    target 930
    type "child"
  ]
  edge [
    source 879
    target 932
    type "child"
  ]
  edge [
    source 879
    target 933
    type "child"
  ]
  edge [
    source 879
    target 935
    type "child"
  ]
  edge [
    source 879
    target 936
    type "child"
  ]
  edge [
    source 879
    target 938
    type "child"
  ]
  edge [
    source 879
    target 939
    type "child"
  ]
  edge [
    source 879
    target 941
    type "child"
  ]
  edge [
    source 879
    target 942
    type "child"
  ]
  edge [
    source 879
    target 944
    type "child"
  ]
  edge [
    source 879
    target 945
    type "child"
  ]
  edge [
    source 879
    target 947
    type "child"
  ]
  edge [
    source 879
    target 948
    type "child"
  ]
  edge [
    source 879
    target 950
    type "child"
  ]
  edge [
    source 879
    target 951
    type "child"
  ]
  edge [
    source 879
    target 952
    type "child"
  ]
  edge [
    source 879
    target 953
    type "child"
  ]
  edge [
    source 879
    target 957
    type "child"
  ]
  edge [
    source 879
    target 958
    type "child"
  ]
  edge [
    source 879
    target 960
    type "child"
  ]
  edge [
    source 879
    target 961
    type "child"
  ]
  edge [
    source 879
    target 963
    type "child"
  ]
  edge [
    source 879
    target 964
    type "child"
  ]
  edge [
    source 879
    target 966
    type "child"
  ]
  edge [
    source 879
    target 967
    type "child"
  ]
  edge [
    source 879
    target 969
    type "child"
  ]
  edge [
    source 879
    target 970
    type "child"
  ]
  edge [
    source 879
    target 972
    type "child"
  ]
  edge [
    source 879
    target 973
    type "child"
  ]
  edge [
    source 879
    target 975
    type "child"
  ]
  edge [
    source 879
    target 976
    type "child"
  ]
  edge [
    source 879
    target 978
    type "child"
  ]
  edge [
    source 879
    target 979
    type "child"
  ]
  edge [
    source 879
    target 981
    type "child"
  ]
  edge [
    source 879
    target 982
    type "child"
  ]
  edge [
    source 879
    target 984
    type "child"
  ]
  edge [
    source 879
    target 985
    type "child"
  ]
  edge [
    source 879
    target 987
    type "child"
  ]
  edge [
    source 879
    target 988
    type "child"
  ]
  edge [
    source 879
    target 990
    type "child"
  ]
  edge [
    source 879
    target 991
    type "child"
  ]
  edge [
    source 879
    target 993
    type "child"
  ]
  edge [
    source 879
    target 994
    type "child"
  ]
  edge [
    source 879
    target 996
    type "child"
  ]
  edge [
    source 879
    target 997
    type "child"
  ]
  edge [
    source 879
    target 998
    type "child"
  ]
  edge [
    source 879
    target 1000
    type "child"
  ]
  edge [
    source 879
    target 1001
    type "child"
  ]
  edge [
    source 879
    target 1003
    type "child"
  ]
  edge [
    source 879
    target 1004
    type "child"
  ]
  edge [
    source 879
    target 1005
    type "child"
  ]
  edge [
    source 879
    target 1006
    type "child"
  ]
  edge [
    source 879
    target 1007
    type "child"
  ]
  edge [
    source 879
    target 1009
    type "child"
  ]
  edge [
    source 879
    target 1010
    type "child"
  ]
  edge [
    source 880
    target 881
    type "link"
  ]
  edge [
    source 884
    target 400
    type "link"
  ]
  edge [
    source 884
    target 2648
    type "link"
  ]
  edge [
    source 887
    target 888
    type "link"
  ]
  edge [
    source 887
    target 889
    type "link"
  ]
  edge [
    source 890
    target 891
    type "link"
  ]
  edge [
    source 890
    target 54
    type "link"
  ]
  edge [
    source 892
    target 893
    type "link"
  ]
  edge [
    source 892
    target 889
    type "link"
  ]
  edge [
    source 894
    target 895
    type "link"
  ]
  edge [
    source 894
    target 896
    type "link"
  ]
  edge [
    source 897
    target 898
    type "link"
  ]
  edge [
    source 897
    target 899
    type "link"
  ]
  edge [
    source 900
    target 901
    type "link"
  ]
  edge [
    source 900
    target 902
    type "link"
  ]
  edge [
    source 904
    target 905
    type "link"
  ]
  edge [
    source 906
    target 907
    type "link"
  ]
  edge [
    source 908
    target 539
    type "link"
  ]
  edge [
    source 912
    target 539
    type "link"
  ]
  edge [
    source 916
    target 917
    type "link"
  ]
  edge [
    source 916
    target 918
    type "link"
  ]
  edge [
    source 916
    target 919
    type "link"
  ]
  edge [
    source 916
    target 920
    type "link"
  ]
  edge [
    source 921
    target 922
    type "link"
  ]
  edge [
    source 921
    target 917
    type "link"
  ]
  edge [
    source 921
    target 918
    type "link"
  ]
  edge [
    source 921
    target 923
    type "link"
  ]
  edge [
    source 930
    target 931
    type "link"
  ]
  edge [
    source 933
    target 934
    type "link"
  ]
  edge [
    source 936
    target 937
    type "link"
  ]
  edge [
    source 939
    target 940
    type "link"
  ]
  edge [
    source 942
    target 943
    type "link"
  ]
  edge [
    source 945
    target 946
    type "link"
  ]
  edge [
    source 948
    target 949
    type "link"
  ]
  edge [
    source 953
    target 954
    type "link"
  ]
  edge [
    source 953
    target 955
    type "link"
  ]
  edge [
    source 953
    target 956
    type "link"
  ]
  edge [
    source 958
    target 959
    type "link"
  ]
  edge [
    source 961
    target 954
    type "link"
  ]
  edge [
    source 961
    target 955
    type "link"
  ]
  edge [
    source 961
    target 962
    type "link"
  ]
  edge [
    source 964
    target 965
    type "link"
  ]
  edge [
    source 967
    target 968
    type "link"
  ]
  edge [
    source 970
    target 536
    type "link"
  ]
  edge [
    source 970
    target 971
    type "link"
  ]
  edge [
    source 973
    target 974
    type "link"
  ]
  edge [
    source 973
    target 535
    type "link"
  ]
  edge [
    source 976
    target 977
    type "link"
  ]
  edge [
    source 979
    target 980
    type "link"
  ]
  edge [
    source 982
    target 983
    type "link"
  ]
  edge [
    source 985
    target 986
    type "link"
  ]
  edge [
    source 988
    target 989
    type "link"
  ]
  edge [
    source 991
    target 992
    type "link"
  ]
  edge [
    source 994
    target 995
    type "link"
  ]
  edge [
    source 998
    target 999
    type "link"
  ]
  edge [
    source 1001
    target 1002
    type "link"
  ]
  edge [
    source 1007
    target 1008
    type "link"
  ]
  edge [
    source 1012
    target 879
    type "link"
  ]
  edge [
    source 1015
    target 989
    type "link"
  ]
  edge [
    source 1016
    target 989
    type "link"
  ]
  edge [
    source 1017
    target 989
    type "link"
  ]
  edge [
    source 1018
    target 989
    type "link"
  ]
  edge [
    source 1019
    target 2038
    type "link"
  ]
  edge [
    source 1019
    target 2050
    type "link"
  ]
  edge [
    source 1019
    target 1380
    type "link"
  ]
  edge [
    source 1020
    target 1021
    type "link"
  ]
  edge [
    source 1022
    target 1023
    type "link"
  ]
  edge [
    source 1027
    target 1028
    type "link"
  ]
  edge [
    source 1027
    target 1029
    type "link"
  ]
  edge [
    source 1035
    target 1036
    type "link"
  ]
  edge [
    source 1037
    target 1036
    type "link"
  ]
  edge [
    source 1049
    target 1050
    type "link"
  ]
  edge [
    source 1051
    target 1052
    type "child"
  ]
  edge [
    source 1051
    target 1053
    type "child"
  ]
  edge [
    source 1051
    target 1054
    type "child"
  ]
  edge [
    source 1060
    target 1061
    type "link"
  ]
  edge [
    source 1062
    target 1063
    type "link"
  ]
  edge [
    source 1062
    target 535
    type "link"
  ]
  edge [
    source 1064
    target 1063
    type "link"
  ]
  edge [
    source 1065
    target 1063
    type "link"
  ]
  edge [
    source 1070
    target 1061
    type "link"
  ]
  edge [
    source 1071
    target 1072
    type "link"
  ]
  edge [
    source 1076
    target 879
    type "link"
  ]
  edge [
    source 1077
    target 543
    type "link"
  ]
  edge [
    source 1077
    target 879
    type "link"
  ]
  edge [
    source 1078
    target 1079
    type "link"
  ]
  edge [
    source 1080
    target 879
    type "link"
  ]
  edge [
    source 1081
    target 543
    type "link"
  ]
  edge [
    source 1081
    target 879
    type "link"
  ]
  edge [
    source 1082
    target 1083
    type "link"
  ]
  edge [
    source 1084
    target 1079
    type "link"
  ]
  edge [
    source 1085
    target 1086
    type "link"
  ]
  edge [
    source 1087
    target 1088
    type "link"
  ]
  edge [
    source 1089
    target 2583
    type "link"
  ]
  edge [
    source 1090
    target 2583
    type "link"
  ]
  edge [
    source 1096
    target 1097
    type "link"
  ]
  edge [
    source 1096
    target 1219
    type "link"
  ]
  edge [
    source 1096
    target 2527
    type "link"
  ]
  edge [
    source 1098
    target 1099
    type "child"
  ]
  edge [
    source 1098
    target 1100
    type "child"
  ]
  edge [
    source 1098
    target 1101
    type "child"
  ]
  edge [
    source 1098
    target 1102
    type "child"
  ]
  edge [
    source 1098
    target 1232
    type "child"
  ]
  edge [
    source 1098
    target 1515
    type "child"
  ]
  edge [
    source 1098
    target 1516
    type "child"
  ]
  edge [
    source 1098
    target 1517
    type "child"
  ]
  edge [
    source 1098
    target 1518
    type "child"
  ]
  edge [
    source 1098
    target 1686
    type "child"
  ]
  edge [
    source 1098
    target 1687
    type "child"
  ]
  edge [
    source 1098
    target 1688
    type "child"
  ]
  edge [
    source 1098
    target 1689
    type "child"
  ]
  edge [
    source 1098
    target 1690
    type "child"
  ]
  edge [
    source 1098
    target 1691
    type "child"
  ]
  edge [
    source 1098
    target 1692
    type "child"
  ]
  edge [
    source 1098
    target 1693
    type "child"
  ]
  edge [
    source 1098
    target 1694
    type "child"
  ]
  edge [
    source 1098
    target 1695
    type "child"
  ]
  edge [
    source 1098
    target 1696
    type "child"
  ]
  edge [
    source 1098
    target 1697
    type "child"
  ]
  edge [
    source 1098
    target 1698
    type "child"
  ]
  edge [
    source 1098
    target 1699
    type "child"
  ]
  edge [
    source 1098
    target 1700
    type "child"
  ]
  edge [
    source 1098
    target 1701
    type "child"
  ]
  edge [
    source 1098
    target 1702
    type "child"
  ]
  edge [
    source 1098
    target 1703
    type "child"
  ]
  edge [
    source 1098
    target 1704
    type "child"
  ]
  edge [
    source 1098
    target 2528
    type "child"
  ]
  edge [
    source 1098
    target 2529
    type "child"
  ]
  edge [
    source 1098
    target 2531
    type "child"
  ]
  edge [
    source 1098
    target 2532
    type "child"
  ]
  edge [
    source 1098
    target 2533
    type "child"
  ]
  edge [
    source 1098
    target 2534
    type "child"
  ]
  edge [
    source 1098
    target 2535
    type "child"
  ]
  edge [
    source 1098
    target 2536
    type "child"
  ]
  edge [
    source 1098
    target 2539
    type "child"
  ]
  edge [
    source 1098
    target 2540
    type "child"
  ]
  edge [
    source 1098
    target 2541
    type "child"
  ]
  edge [
    source 1098
    target 2542
    type "child"
  ]
  edge [
    source 1098
    target 2543
    type "child"
  ]
  edge [
    source 1098
    target 2544
    type "child"
  ]
  edge [
    source 1098
    target 2545
    type "child"
  ]
  edge [
    source 1102
    target 1103
    type "link"
  ]
  edge [
    source 1103
    target 1104
    type "child"
  ]
  edge [
    source 1103
    target 1158
    type "child"
  ]
  edge [
    source 1103
    target 1176
    type "child"
  ]
  edge [
    source 1103
    target 1177
    type "child"
  ]
  edge [
    source 1103
    target 1178
    type "child"
  ]
  edge [
    source 1103
    target 1179
    type "child"
  ]
  edge [
    source 1103
    target 1180
    type "child"
  ]
  edge [
    source 1103
    target 1181
    type "child"
  ]
  edge [
    source 1103
    target 1108
    type "child"
  ]
  edge [
    source 1103
    target 1182
    type "child"
  ]
  edge [
    source 1103
    target 1231
    type "child"
  ]
  edge [
    source 1104
    target 1105
    type "link"
  ]
  edge [
    source 1105
    target 1106
    type "child"
  ]
  edge [
    source 1105
    target 1107
    type "child"
  ]
  edge [
    source 1105
    target 1108
    type "child"
  ]
  edge [
    source 1105
    target 1109
    type "child"
  ]
  edge [
    source 1105
    target 1110
    type "child"
  ]
  edge [
    source 1105
    target 1111
    type "child"
  ]
  edge [
    source 1105
    target 1114
    type "child"
  ]
  edge [
    source 1105
    target 1116
    type "child"
  ]
  edge [
    source 1105
    target 1117
    type "child"
  ]
  edge [
    source 1105
    target 1118
    type "child"
  ]
  edge [
    source 1105
    target 1119
    type "child"
  ]
  edge [
    source 1105
    target 1120
    type "child"
  ]
  edge [
    source 1105
    target 1121
    type "child"
  ]
  edge [
    source 1105
    target 1123
    type "child"
  ]
  edge [
    source 1105
    target 1124
    type "child"
  ]
  edge [
    source 1105
    target 1125
    type "child"
  ]
  edge [
    source 1105
    target 1126
    type "child"
  ]
  edge [
    source 1105
    target 1127
    type "child"
  ]
  edge [
    source 1105
    target 1128
    type "child"
  ]
  edge [
    source 1105
    target 1129
    type "child"
  ]
  edge [
    source 1105
    target 1130
    type "child"
  ]
  edge [
    source 1105
    target 1131
    type "child"
  ]
  edge [
    source 1105
    target 1132
    type "child"
  ]
  edge [
    source 1105
    target 1135
    type "child"
  ]
  edge [
    source 1105
    target 1137
    type "child"
  ]
  edge [
    source 1105
    target 1139
    type "child"
  ]
  edge [
    source 1105
    target 1141
    type "child"
  ]
  edge [
    source 1105
    target 1143
    type "child"
  ]
  edge [
    source 1105
    target 1145
    type "child"
  ]
  edge [
    source 1105
    target 1147
    type "child"
  ]
  edge [
    source 1105
    target 1149
    type "child"
  ]
  edge [
    source 1105
    target 1150
    type "child"
  ]
  edge [
    source 1105
    target 1151
    type "child"
  ]
  edge [
    source 1105
    target 1152
    type "child"
  ]
  edge [
    source 1105
    target 1154
    type "child"
  ]
  edge [
    source 1105
    target 1155
    type "child"
  ]
  edge [
    source 1105
    target 1156
    type "child"
  ]
  edge [
    source 1105
    target 1157
    type "child"
  ]
  edge [
    source 1109
    target 1332
    type "link"
  ]
  edge [
    source 1109
    target 1461
    type "link"
  ]
  edge [
    source 1111
    target 1112
    type "link"
  ]
  edge [
    source 1111
    target 1113
    type "link"
  ]
  edge [
    source 1114
    target 1112
    type "link"
  ]
  edge [
    source 1114
    target 1115
    type "link"
  ]
  edge [
    source 1121
    target 536
    type "link"
  ]
  edge [
    source 1121
    target 1122
    type "link"
  ]
  edge [
    source 1123
    target 1122
    type "link"
  ]
  edge [
    source 1124
    target 1122
    type "link"
  ]
  edge [
    source 1124
    target 536
    type "link"
  ]
  edge [
    source 1125
    target 536
    type "link"
  ]
  edge [
    source 1125
    target 1122
    type "link"
  ]
  edge [
    source 1126
    target 1122
    type "link"
  ]
  edge [
    source 1126
    target 536
    type "link"
  ]
  edge [
    source 1127
    target 536
    type "link"
  ]
  edge [
    source 1127
    target 1122
    type "link"
  ]
  edge [
    source 1128
    target 1122
    type "link"
  ]
  edge [
    source 1129
    target 1122
    type "link"
  ]
  edge [
    source 1130
    target 536
    type "link"
  ]
  edge [
    source 1130
    target 1122
    type "link"
  ]
  edge [
    source 1132
    target 1133
    type "link"
  ]
  edge [
    source 1132
    target 1134
    type "link"
  ]
  edge [
    source 1135
    target 1136
    type "link"
  ]
  edge [
    source 1135
    target 1134
    type "link"
  ]
  edge [
    source 1137
    target 1134
    type "link"
  ]
  edge [
    source 1137
    target 1138
    type "link"
  ]
  edge [
    source 1139
    target 1134
    type "link"
  ]
  edge [
    source 1139
    target 1140
    type "link"
  ]
  edge [
    source 1141
    target 1134
    type "link"
  ]
  edge [
    source 1141
    target 1142
    type "link"
  ]
  edge [
    source 1143
    target 1134
    type "link"
  ]
  edge [
    source 1143
    target 1144
    type "link"
  ]
  edge [
    source 1145
    target 1134
    type "link"
  ]
  edge [
    source 1145
    target 1146
    type "link"
  ]
  edge [
    source 1147
    target 1134
    type "link"
  ]
  edge [
    source 1147
    target 1148
    type "link"
  ]
  edge [
    source 1149
    target 1134
    type "link"
  ]
  edge [
    source 1149
    target 1148
    type "link"
  ]
  edge [
    source 1152
    target 1153
    type "link"
  ]
  edge [
    source 1158
    target 1159
    type "link"
  ]
  edge [
    source 1158
    target 1174
    type "link"
  ]
  edge [
    source 1158
    target 1160
    type "link"
  ]
  edge [
    source 1158
    target 1175
    type "link"
  ]
  edge [
    source 1160
    target 1161
    type "child"
  ]
  edge [
    source 1160
    target 1163
    type "child"
  ]
  edge [
    source 1160
    target 1164
    type "child"
  ]
  edge [
    source 1160
    target 1165
    type "child"
  ]
  edge [
    source 1160
    target 1166
    type "child"
  ]
  edge [
    source 1160
    target 1167
    type "child"
  ]
  edge [
    source 1160
    target 1168
    type "child"
  ]
  edge [
    source 1160
    target 1169
    type "child"
  ]
  edge [
    source 1160
    target 1170
    type "child"
  ]
  edge [
    source 1160
    target 1171
    type "child"
  ]
  edge [
    source 1160
    target 1172
    type "child"
  ]
  edge [
    source 1160
    target 1173
    type "child"
  ]
  edge [
    source 1161
    target 1162
    type "link"
  ]
  edge [
    source 1172
    target 1561
    type "link"
  ]
  edge [
    source 1172
    target 1577
    type "link"
  ]
  edge [
    source 1172
    target 1726
    type "link"
  ]
  edge [
    source 1172
    target 1738
    type "link"
  ]
  edge [
    source 1172
    target 1739
    type "link"
  ]
  edge [
    source 1172
    target 1756
    type "link"
  ]
  edge [
    source 1172
    target 1513
    type "link"
  ]
  edge [
    source 1182
    target 1183
    type "link"
  ]
  edge [
    source 1183
    target 1184
    type "child"
  ]
  edge [
    source 1183
    target 1185
    type "child"
  ]
  edge [
    source 1183
    target 1186
    type "child"
  ]
  edge [
    source 1183
    target 1187
    type "child"
  ]
  edge [
    source 1183
    target 1188
    type "child"
  ]
  edge [
    source 1183
    target 1191
    type "child"
  ]
  edge [
    source 1183
    target 1192
    type "child"
  ]
  edge [
    source 1183
    target 1193
    type "child"
  ]
  edge [
    source 1183
    target 1194
    type "child"
  ]
  edge [
    source 1183
    target 1195
    type "child"
  ]
  edge [
    source 1183
    target 1196
    type "child"
  ]
  edge [
    source 1183
    target 1197
    type "child"
  ]
  edge [
    source 1183
    target 1198
    type "child"
  ]
  edge [
    source 1183
    target 1199
    type "child"
  ]
  edge [
    source 1183
    target 1200
    type "child"
  ]
  edge [
    source 1183
    target 1201
    type "child"
  ]
  edge [
    source 1183
    target 1225
    type "child"
  ]
  edge [
    source 1183
    target 1226
    type "child"
  ]
  edge [
    source 1183
    target 1227
    type "child"
  ]
  edge [
    source 1183
    target 1228
    type "child"
  ]
  edge [
    source 1183
    target 1229
    type "child"
  ]
  edge [
    source 1183
    target 1230
    type "child"
  ]
  edge [
    source 1188
    target 1189
    type "link"
  ]
  edge [
    source 1188
    target 1190
    type "link"
  ]
  edge [
    source 1201
    target 1202
    type "link"
  ]
  edge [
    source 1203
    target 557
    type "child"
  ]
  edge [
    source 1203
    target 1204
    type "child"
  ]
  edge [
    source 1203
    target 1205
    type "child"
  ]
  edge [
    source 1203
    target 1207
    type "child"
  ]
  edge [
    source 1203
    target 565
    type "child"
  ]
  edge [
    source 1203
    target 1208
    type "child"
  ]
  edge [
    source 1203
    target 568
    type "child"
  ]
  edge [
    source 1203
    target 569
    type "child"
  ]
  edge [
    source 1203
    target 1209
    type "child"
  ]
  edge [
    source 1203
    target 572
    type "child"
  ]
  edge [
    source 1203
    target 1210
    type "child"
  ]
  edge [
    source 1203
    target 1211
    type "child"
  ]
  edge [
    source 1203
    target 1212
    type "child"
  ]
  edge [
    source 1203
    target 1214
    type "child"
  ]
  edge [
    source 1203
    target 1216
    type "child"
  ]
  edge [
    source 1203
    target 1217
    type "child"
  ]
  edge [
    source 1203
    target 725
    type "child"
  ]
  edge [
    source 1203
    target 1218
    type "child"
  ]
  edge [
    source 1203
    target 1220
    type "child"
  ]
  edge [
    source 1203
    target 1221
    type "child"
  ]
  edge [
    source 1203
    target 1222
    type "child"
  ]
  edge [
    source 1203
    target 1224
    type "child"
  ]
  edge [
    source 1205
    target 1206
    type "link"
  ]
  edge [
    source 1205
    target 560
    type "link"
  ]
  edge [
    source 1208
    target 567
    type "link"
  ]
  edge [
    source 1209
    target 571
    type "link"
  ]
  edge [
    source 1212
    target 576
    type "link"
  ]
  edge [
    source 1212
    target 1213
    type "link"
  ]
  edge [
    source 1212
    target 577
    type "link"
  ]
  edge [
    source 1212
    target 588
    type "link"
  ]
  edge [
    source 1212
    target 589
    type "link"
  ]
  edge [
    source 1212
    target 587
    type "link"
  ]
  edge [
    source 1212
    target 592
    type "link"
  ]
  edge [
    source 1212
    target 539
    type "link"
  ]
  edge [
    source 1214
    target 576
    type "link"
  ]
  edge [
    source 1214
    target 720
    type "link"
  ]
  edge [
    source 1214
    target 587
    type "link"
  ]
  edge [
    source 1214
    target 1215
    type "link"
  ]
  edge [
    source 1214
    target 592
    type "link"
  ]
  edge [
    source 1214
    target 721
    type "link"
  ]
  edge [
    source 1216
    target 576
    type "link"
  ]
  edge [
    source 1216
    target 587
    type "link"
  ]
  edge [
    source 1217
    target 724
    type "link"
  ]
  edge [
    source 1218
    target 577
    type "link"
  ]
  edge [
    source 1218
    target 587
    type "link"
  ]
  edge [
    source 1218
    target 592
    type "link"
  ]
  edge [
    source 1218
    target 1219
    type "link"
  ]
  edge [
    source 1220
    target 589
    type "link"
  ]
  edge [
    source 1222
    target 1223
    type "link"
  ]
  edge [
    source 1222
    target 39
    type "link"
  ]
  edge [
    source 1224
    target 68
    type "link"
  ]
  edge [
    source 1224
    target 39
    type "link"
  ]
  edge [
    source 1225
    target 556
    type "link"
  ]
  edge [
    source 1232
    target 1233
    type "link"
  ]
  edge [
    source 1233
    target 1234
    type "child"
  ]
  edge [
    source 1233
    target 1235
    type "child"
  ]
  edge [
    source 1233
    target 1236
    type "child"
  ]
  edge [
    source 1233
    target 1237
    type "child"
  ]
  edge [
    source 1233
    target 1238
    type "child"
  ]
  edge [
    source 1233
    target 1239
    type "child"
  ]
  edge [
    source 1233
    target 1240
    type "child"
  ]
  edge [
    source 1233
    target 1241
    type "child"
  ]
  edge [
    source 1241
    target 1242
    type "link"
  ]
  edge [
    source 1241
    target 1243
    type "link"
  ]
  edge [
    source 1241
    target 1445
    type "link"
  ]
  edge [
    source 1241
    target 1512
    type "link"
  ]
  edge [
    source 1241
    target 1513
    type "link"
  ]
  edge [
    source 1243
    target 1244
    type "child"
  ]
  edge [
    source 1243
    target 1245
    type "child"
  ]
  edge [
    source 1243
    target 1248
    type "child"
  ]
  edge [
    source 1243
    target 1269
    type "child"
  ]
  edge [
    source 1243
    target 1271
    type "child"
  ]
  edge [
    source 1243
    target 1272
    type "child"
  ]
  edge [
    source 1243
    target 1273
    type "child"
  ]
  edge [
    source 1243
    target 1275
    type "child"
  ]
  edge [
    source 1243
    target 1418
    type "child"
  ]
  edge [
    source 1243
    target 1420
    type "child"
  ]
  edge [
    source 1243
    target 1422
    type "child"
  ]
  edge [
    source 1243
    target 1423
    type "child"
  ]
  edge [
    source 1243
    target 1425
    type "child"
  ]
  edge [
    source 1243
    target 1439
    type "child"
  ]
  edge [
    source 1243
    target 1440
    type "child"
  ]
  edge [
    source 1243
    target 1441
    type "child"
  ]
  edge [
    source 1243
    target 1442
    type "child"
  ]
  edge [
    source 1243
    target 1443
    type "child"
  ]
  edge [
    source 1243
    target 1444
    type "child"
  ]
  edge [
    source 1243
    target 1363
    type "child"
  ]
  edge [
    source 1244
    target 1233
    type "link"
  ]
  edge [
    source 1245
    target 1246
    type "link"
  ]
  edge [
    source 1245
    target 1247
    type "link"
  ]
  edge [
    source 1248
    target 1249
    type "link"
  ]
  edge [
    source 1248
    target 1250
    type "link"
  ]
  edge [
    source 1250
    target 1251
    type "child"
  ]
  edge [
    source 1250
    target 1252
    type "child"
  ]
  edge [
    source 1250
    target 1253
    type "child"
  ]
  edge [
    source 1250
    target 1254
    type "child"
  ]
  edge [
    source 1250
    target 1255
    type "child"
  ]
  edge [
    source 1250
    target 1256
    type "child"
  ]
  edge [
    source 1250
    target 1257
    type "child"
  ]
  edge [
    source 1250
    target 1259
    type "child"
  ]
  edge [
    source 1250
    target 1261
    type "child"
  ]
  edge [
    source 1250
    target 1262
    type "child"
  ]
  edge [
    source 1250
    target 1263
    type "child"
  ]
  edge [
    source 1250
    target 1264
    type "child"
  ]
  edge [
    source 1250
    target 1265
    type "child"
  ]
  edge [
    source 1250
    target 1266
    type "child"
  ]
  edge [
    source 1250
    target 1268
    type "child"
  ]
  edge [
    source 1257
    target 1258
    type "link"
  ]
  edge [
    source 1259
    target 1260
    type "link"
  ]
  edge [
    source 1266
    target 1267
    type "link"
  ]
  edge [
    source 1269
    target 1270
    type "link"
  ]
  edge [
    source 1273
    target 1274
    type "link"
  ]
  edge [
    source 1275
    target 1276
    type "link"
  ]
  edge [
    source 1276
    target 1277
    type "child"
  ]
  edge [
    source 1276
    target 1278
    type "child"
  ]
  edge [
    source 1276
    target 1279
    type "child"
  ]
  edge [
    source 1276
    target 1280
    type "child"
  ]
  edge [
    source 1276
    target 1281
    type "child"
  ]
  edge [
    source 1276
    target 1282
    type "child"
  ]
  edge [
    source 1276
    target 1283
    type "child"
  ]
  edge [
    source 1276
    target 1284
    type "child"
  ]
  edge [
    source 1276
    target 1285
    type "child"
  ]
  edge [
    source 1276
    target 1287
    type "child"
  ]
  edge [
    source 1276
    target 1317
    type "child"
  ]
  edge [
    source 1276
    target 1318
    type "child"
  ]
  edge [
    source 1276
    target 1319
    type "child"
  ]
  edge [
    source 1276
    target 1320
    type "child"
  ]
  edge [
    source 1276
    target 1364
    type "child"
  ]
  edge [
    source 1276
    target 1385
    type "child"
  ]
  edge [
    source 1276
    target 1392
    type "child"
  ]
  edge [
    source 1276
    target 1393
    type "child"
  ]
  edge [
    source 1276
    target 1394
    type "child"
  ]
  edge [
    source 1276
    target 1395
    type "child"
  ]
  edge [
    source 1276
    target 1396
    type "child"
  ]
  edge [
    source 1276
    target 1397
    type "child"
  ]
  edge [
    source 1276
    target 1398
    type "child"
  ]
  edge [
    source 1276
    target 1337
    type "child"
  ]
  edge [
    source 1276
    target 1399
    type "child"
  ]
  edge [
    source 1276
    target 1400
    type "child"
  ]
  edge [
    source 1276
    target 1402
    type "child"
  ]
  edge [
    source 1276
    target 1348
    type "child"
  ]
  edge [
    source 1276
    target 1349
    type "child"
  ]
  edge [
    source 1276
    target 1404
    type "child"
  ]
  edge [
    source 1276
    target 1405
    type "child"
  ]
  edge [
    source 1276
    target 1406
    type "child"
  ]
  edge [
    source 1276
    target 1407
    type "child"
  ]
  edge [
    source 1276
    target 1343
    type "child"
  ]
  edge [
    source 1276
    target 1346
    type "child"
  ]
  edge [
    source 1276
    target 1409
    type "child"
  ]
  edge [
    source 1276
    target 1410
    type "child"
  ]
  edge [
    source 1276
    target 1411
    type "child"
  ]
  edge [
    source 1276
    target 192
    type "child"
  ]
  edge [
    source 1276
    target 1412
    type "child"
  ]
  edge [
    source 1276
    target 1335
    type "child"
  ]
  edge [
    source 1276
    target 1336
    type "child"
  ]
  edge [
    source 1276
    target 1414
    type "child"
  ]
  edge [
    source 1276
    target 1415
    type "child"
  ]
  edge [
    source 1276
    target 1416
    type "child"
  ]
  edge [
    source 1276
    target 1350
    type "child"
  ]
  edge [
    source 1276
    target 1417
    type "child"
  ]
  edge [
    source 1276
    target 1353
    type "child"
  ]
  edge [
    source 1276
    target 1354
    type "child"
  ]
  edge [
    source 1285
    target 1286
    type "link"
  ]
  edge [
    source 1285
    target 1325
    type "link"
  ]
  edge [
    source 1285
    target 1288
    type "link"
  ]
  edge [
    source 1285
    target 1455
    type "link"
  ]
  edge [
    source 1287
    target 1288
    type "link"
  ]
  edge [
    source 1287
    target 1289
    type "link"
  ]
  edge [
    source 1289
    target 1290
    type "child"
  ]
  edge [
    source 1289
    target 1291
    type "child"
  ]
  edge [
    source 1289
    target 1292
    type "child"
  ]
  edge [
    source 1289
    target 1293
    type "child"
  ]
  edge [
    source 1289
    target 1294
    type "child"
  ]
  edge [
    source 1289
    target 1295
    type "child"
  ]
  edge [
    source 1289
    target 1296
    type "child"
  ]
  edge [
    source 1289
    target 1297
    type "child"
  ]
  edge [
    source 1289
    target 1298
    type "child"
  ]
  edge [
    source 1289
    target 1299
    type "child"
  ]
  edge [
    source 1289
    target 1300
    type "child"
  ]
  edge [
    source 1289
    target 1301
    type "child"
  ]
  edge [
    source 1289
    target 1302
    type "child"
  ]
  edge [
    source 1289
    target 1303
    type "child"
  ]
  edge [
    source 1289
    target 1305
    type "child"
  ]
  edge [
    source 1289
    target 1306
    type "child"
  ]
  edge [
    source 1289
    target 1307
    type "child"
  ]
  edge [
    source 1289
    target 1308
    type "child"
  ]
  edge [
    source 1289
    target 435
    type "child"
  ]
  edge [
    source 1289
    target 884
    type "child"
  ]
  edge [
    source 1289
    target 192
    type "child"
  ]
  edge [
    source 1289
    target 1309
    type "child"
  ]
  edge [
    source 1289
    target 1310
    type "child"
  ]
  edge [
    source 1289
    target 1311
    type "child"
  ]
  edge [
    source 1289
    target 1312
    type "child"
  ]
  edge [
    source 1289
    target 1313
    type "child"
  ]
  edge [
    source 1289
    target 1314
    type "child"
  ]
  edge [
    source 1289
    target 1315
    type "child"
  ]
  edge [
    source 1289
    target 1316
    type "child"
  ]
  edge [
    source 1303
    target 1304
    type "link"
  ]
  edge [
    source 1317
    target 1286
    type "link"
  ]
  edge [
    source 1317
    target 1455
    type "link"
  ]
  edge [
    source 1318
    target 1286
    type "link"
  ]
  edge [
    source 1318
    target 1325
    type "link"
  ]
  edge [
    source 1319
    target 1286
    type "link"
  ]
  edge [
    source 1319
    target 1455
    type "link"
  ]
  edge [
    source 1320
    target 1243
    type "link"
  ]
  edge [
    source 1320
    target 1321
    type "link"
  ]
  edge [
    source 1322
    target 1323
    type "child"
  ]
  edge [
    source 1322
    target 1248
    type "child"
  ]
  edge [
    source 1322
    target 1355
    type "child"
  ]
  edge [
    source 1322
    target 1356
    type "child"
  ]
  edge [
    source 1322
    target 1357
    type "child"
  ]
  edge [
    source 1322
    target 1358
    type "child"
  ]
  edge [
    source 1322
    target 1359
    type "child"
  ]
  edge [
    source 1322
    target 1363
    type "child"
  ]
  edge [
    source 1323
    target 1233
    type "link"
  ]
  edge [
    source 1323
    target 1324
    type "link"
  ]
  edge [
    source 1325
    target 1326
    type "child"
  ]
  edge [
    source 1325
    target 1327
    type "child"
  ]
  edge [
    source 1325
    target 1328
    type "child"
  ]
  edge [
    source 1325
    target 1285
    type "child"
  ]
  edge [
    source 1325
    target 1318
    type "child"
  ]
  edge [
    source 1325
    target 1329
    type "child"
  ]
  edge [
    source 1325
    target 1330
    type "child"
  ]
  edge [
    source 1325
    target 1331
    type "child"
  ]
  edge [
    source 1325
    target 1334
    type "child"
  ]
  edge [
    source 1325
    target 1335
    type "child"
  ]
  edge [
    source 1325
    target 1336
    type "child"
  ]
  edge [
    source 1325
    target 1337
    type "child"
  ]
  edge [
    source 1325
    target 1342
    type "child"
  ]
  edge [
    source 1325
    target 1343
    type "child"
  ]
  edge [
    source 1325
    target 1346
    type "child"
  ]
  edge [
    source 1325
    target 192
    type "child"
  ]
  edge [
    source 1325
    target 1347
    type "child"
  ]
  edge [
    source 1325
    target 1348
    type "child"
  ]
  edge [
    source 1325
    target 1349
    type "child"
  ]
  edge [
    source 1325
    target 1350
    type "child"
  ]
  edge [
    source 1325
    target 1351
    type "child"
  ]
  edge [
    source 1325
    target 1353
    type "child"
  ]
  edge [
    source 1325
    target 1354
    type "child"
  ]
  edge [
    source 1331
    target 1332
    type "link"
  ]
  edge [
    source 1331
    target 1333
    type "link"
  ]
  edge [
    source 1331
    target 1274
    type "link"
  ]
  edge [
    source 1331
    target 1580
    type "link"
  ]
  edge [
    source 1331
    target 1286
    type "link"
  ]
  edge [
    source 1334
    target 1322
    type "link"
  ]
  edge [
    source 1335
    target 1413
    type "link"
  ]
  edge [
    source 1335
    target 1286
    type "link"
  ]
  edge [
    source 1337
    target 1338
    type "link"
  ]
  edge [
    source 1337
    target 1339
    type "link"
  ]
  edge [
    source 1339
    target 1340
    type "child"
  ]
  edge [
    source 1339
    target 1341
    type "child"
  ]
  edge [
    source 1342
    target 1338
    type "link"
  ]
  edge [
    source 1343
    target 1324
    type "link"
  ]
  edge [
    source 1343
    target 1339
    type "link"
  ]
  edge [
    source 1343
    target 1344
    type "link"
  ]
  edge [
    source 1343
    target 1345
    type "link"
  ]
  edge [
    source 1343
    target 1276
    type "link"
  ]
  edge [
    source 1346
    target 1339
    type "link"
  ]
  edge [
    source 1348
    target 1276
    type "link"
  ]
  edge [
    source 1348
    target 1333
    type "link"
  ]
  edge [
    source 1348
    target 1339
    type "link"
  ]
  edge [
    source 1348
    target 1403
    type "link"
  ]
  edge [
    source 1348
    target 1325
    type "link"
  ]
  edge [
    source 1348
    target 1455
    type "link"
  ]
  edge [
    source 1348
    target 1468
    type "link"
  ]
  edge [
    source 1349
    target 1276
    type "link"
  ]
  edge [
    source 1349
    target 1339
    type "link"
  ]
  edge [
    source 1351
    target 1352
    type "link"
  ]
  edge [
    source 1353
    target 1352
    type "link"
  ]
  edge [
    source 1355
    target 1270
    type "link"
  ]
  edge [
    source 1356
    target 1270
    type "link"
  ]
  edge [
    source 1358
    target 1325
    type "link"
  ]
  edge [
    source 1359
    target 1325
    type "link"
  ]
  edge [
    source 1359
    target 1321
    type "link"
  ]
  edge [
    source 1359
    target 1360
    type "link"
  ]
  edge [
    source 1361
    target 1362
    type "child"
  ]
  edge [
    source 1363
    target 1288
    type "link"
  ]
  edge [
    source 1363
    target 1289
    type "link"
  ]
  edge [
    source 1364
    target 1365
    type "link"
  ]
  edge [
    source 1364
    target 1366
    type "link"
  ]
  edge [
    source 1364
    target 1380
    type "link"
  ]
  edge [
    source 1364
    target 1286
    type "link"
  ]
  edge [
    source 1364
    target 1384
    type "link"
  ]
  edge [
    source 1364
    target 1367
    type "link"
  ]
  edge [
    source 1367
    target 1368
    type "child"
  ]
  edge [
    source 1367
    target 1369
    type "child"
  ]
  edge [
    source 1367
    target 1370
    type "child"
  ]
  edge [
    source 1367
    target 1371
    type "child"
  ]
  edge [
    source 1367
    target 1372
    type "child"
  ]
  edge [
    source 1367
    target 1374
    type "child"
  ]
  edge [
    source 1367
    target 1375
    type "child"
  ]
  edge [
    source 1367
    target 1167
    type "child"
  ]
  edge [
    source 1367
    target 1376
    type "child"
  ]
  edge [
    source 1367
    target 1379
    type "child"
  ]
  edge [
    source 1367
    target 1331
    type "child"
  ]
  edge [
    source 1367
    target 1381
    type "child"
  ]
  edge [
    source 1367
    target 1382
    type "child"
  ]
  edge [
    source 1367
    target 1169
    type "child"
  ]
  edge [
    source 1367
    target 1383
    type "child"
  ]
  edge [
    source 1372
    target 54
    type "link"
  ]
  edge [
    source 1372
    target 1373
    type "link"
  ]
  edge [
    source 1376
    target 1377
    type "link"
  ]
  edge [
    source 1376
    target 1378
    type "link"
  ]
  edge [
    source 1379
    target 516
    type "link"
  ]
  edge [
    source 1379
    target 1380
    type "link"
  ]
  edge [
    source 1385
    target 1386
    type "link"
  ]
  edge [
    source 1385
    target 1365
    type "link"
  ]
  edge [
    source 1386
    target 1387
    type "child"
  ]
  edge [
    source 1386
    target 1388
    type "child"
  ]
  edge [
    source 1386
    target 1389
    type "child"
  ]
  edge [
    source 1386
    target 1390
    type "child"
  ]
  edge [
    source 1386
    target 1391
    type "child"
  ]
  edge [
    source 1386
    target 1331
    type "child"
  ]
  edge [
    source 1392
    target 1339
    type "link"
  ]
  edge [
    source 1393
    target 1339
    type "link"
  ]
  edge [
    source 1394
    target 1339
    type "link"
  ]
  edge [
    source 1395
    target 1339
    type "link"
  ]
  edge [
    source 1397
    target 1339
    type "link"
  ]
  edge [
    source 1398
    target 1339
    type "link"
  ]
  edge [
    source 1399
    target 1338
    type "link"
  ]
  edge [
    source 1400
    target 1339
    type "link"
  ]
  edge [
    source 1400
    target 1401
    type "link"
  ]
  edge [
    source 1400
    target 1455
    type "link"
  ]
  edge [
    source 1400
    target 1467
    type "link"
  ]
  edge [
    source 1402
    target 1339
    type "link"
  ]
  edge [
    source 1404
    target 1339
    type "link"
  ]
  edge [
    source 1405
    target 1339
    type "link"
  ]
  edge [
    source 1407
    target 1408
    type "link"
  ]
  edge [
    source 1409
    target 1386
    type "link"
  ]
  edge [
    source 1409
    target 1332
    type "link"
  ]
  edge [
    source 1409
    target 1367
    type "link"
  ]
  edge [
    source 1412
    target 1413
    type "link"
  ]
  edge [
    source 1412
    target 1286
    type "link"
  ]
  edge [
    source 1417
    target 1352
    type "link"
  ]
  edge [
    source 1418
    target 1419
    type "link"
  ]
  edge [
    source 1418
    target 1445
    type "link"
  ]
  edge [
    source 1420
    target 1421
    type "link"
  ]
  edge [
    source 1422
    target 1276
    type "link"
  ]
  edge [
    source 1422
    target 1421
    type "link"
  ]
  edge [
    source 1422
    target 1361
    type "link"
  ]
  edge [
    source 1423
    target 1424
    type "link"
  ]
  edge [
    source 1423
    target 1380
    type "link"
  ]
  edge [
    source 1425
    target 1426
    type "link"
  ]
  edge [
    source 1426
    target 1427
    type "child"
  ]
  edge [
    source 1426
    target 1428
    type "child"
  ]
  edge [
    source 1426
    target 1429
    type "child"
  ]
  edge [
    source 1426
    target 1430
    type "child"
  ]
  edge [
    source 1426
    target 1431
    type "child"
  ]
  edge [
    source 1426
    target 1432
    type "child"
  ]
  edge [
    source 1426
    target 1433
    type "child"
  ]
  edge [
    source 1426
    target 1434
    type "child"
  ]
  edge [
    source 1426
    target 1435
    type "child"
  ]
  edge [
    source 1426
    target 192
    type "child"
  ]
  edge [
    source 1426
    target 1438
    type "child"
  ]
  edge [
    source 1426
    target 1228
    type "child"
  ]
  edge [
    source 1439
    target 1499
    type "link"
  ]
  edge [
    source 1440
    target 1506
    type "link"
  ]
  edge [
    source 1441
    target 1506
    type "link"
  ]
  edge [
    source 1442
    target 1504
    type "link"
  ]
  edge [
    source 1443
    target 1509
    type "link"
  ]
  edge [
    source 1444
    target 1509
    type "link"
  ]
  edge [
    source 1445
    target 1446
    type "child"
  ]
  edge [
    source 1445
    target 1450
    type "child"
  ]
  edge [
    source 1445
    target 1248
    type "child"
  ]
  edge [
    source 1445
    target 1452
    type "child"
  ]
  edge [
    source 1445
    target 1453
    type "child"
  ]
  edge [
    source 1445
    target 1454
    type "child"
  ]
  edge [
    source 1445
    target 1418
    type "child"
  ]
  edge [
    source 1445
    target 1494
    type "child"
  ]
  edge [
    source 1445
    target 1496
    type "child"
  ]
  edge [
    source 1445
    target 1425
    type "child"
  ]
  edge [
    source 1445
    target 1497
    type "child"
  ]
  edge [
    source 1445
    target 1502
    type "child"
  ]
  edge [
    source 1445
    target 1439
    type "child"
  ]
  edge [
    source 1445
    target 1440
    type "child"
  ]
  edge [
    source 1445
    target 1441
    type "child"
  ]
  edge [
    source 1445
    target 1442
    type "child"
  ]
  edge [
    source 1445
    target 1443
    type "child"
  ]
  edge [
    source 1445
    target 1444
    type "child"
  ]
  edge [
    source 1445
    target 1363
    type "child"
  ]
  edge [
    source 1446
    target 1233
    type "link"
  ]
  edge [
    source 1446
    target 1447
    type "link"
  ]
  edge [
    source 1446
    target 1448
    type "link"
  ]
  edge [
    source 1448
    target 1449
    type "child"
  ]
  edge [
    source 1450
    target 1233
    type "link"
  ]
  edge [
    source 1450
    target 1448
    type "link"
  ]
  edge [
    source 1450
    target 1451
    type "link"
  ]
  edge [
    source 1452
    target 1270
    type "link"
  ]
  edge [
    source 1454
    target 1455
    type "link"
  ]
  edge [
    source 1455
    target 1456
    type "child"
  ]
  edge [
    source 1455
    target 1457
    type "child"
  ]
  edge [
    source 1455
    target 1458
    type "child"
  ]
  edge [
    source 1455
    target 1459
    type "child"
  ]
  edge [
    source 1455
    target 1462
    type "child"
  ]
  edge [
    source 1455
    target 1464
    type "child"
  ]
  edge [
    source 1455
    target 1335
    type "child"
  ]
  edge [
    source 1455
    target 1412
    type "child"
  ]
  edge [
    source 1455
    target 1285
    type "child"
  ]
  edge [
    source 1455
    target 1317
    type "child"
  ]
  edge [
    source 1455
    target 1319
    type "child"
  ]
  edge [
    source 1455
    target 1465
    type "child"
  ]
  edge [
    source 1455
    target 1466
    type "child"
  ]
  edge [
    source 1455
    target 1287
    type "child"
  ]
  edge [
    source 1455
    target 1318
    type "child"
  ]
  edge [
    source 1455
    target 1337
    type "child"
  ]
  edge [
    source 1455
    target 1399
    type "child"
  ]
  edge [
    source 1455
    target 1400
    type "child"
  ]
  edge [
    source 1455
    target 1402
    type "child"
  ]
  edge [
    source 1455
    target 1348
    type "child"
  ]
  edge [
    source 1455
    target 1349
    type "child"
  ]
  edge [
    source 1455
    target 1469
    type "child"
  ]
  edge [
    source 1455
    target 1486
    type "child"
  ]
  edge [
    source 1455
    target 1487
    type "child"
  ]
  edge [
    source 1455
    target 1488
    type "child"
  ]
  edge [
    source 1455
    target 1489
    type "child"
  ]
  edge [
    source 1455
    target 1490
    type "child"
  ]
  edge [
    source 1455
    target 1109
    type "child"
  ]
  edge [
    source 1455
    target 1336
    type "child"
  ]
  edge [
    source 1455
    target 1491
    type "child"
  ]
  edge [
    source 1455
    target 1492
    type "child"
  ]
  edge [
    source 1455
    target 1493
    type "child"
  ]
  edge [
    source 1455
    target 1353
    type "child"
  ]
  edge [
    source 1455
    target 1354
    type "child"
  ]
  edge [
    source 1459
    target 1361
    type "link"
  ]
  edge [
    source 1459
    target 1460
    type "link"
  ]
  edge [
    source 1459
    target 1461
    type "link"
  ]
  edge [
    source 1459
    target 1289
    type "link"
  ]
  edge [
    source 1459
    target 1360
    type "link"
  ]
  edge [
    source 1462
    target 1463
    type "link"
  ]
  edge [
    source 1462
    target 1426
    type "link"
  ]
  edge [
    source 1469
    target 1324
    type "link"
  ]
  edge [
    source 1469
    target 1470
    type "link"
  ]
  edge [
    source 1469
    target 1344
    type "link"
  ]
  edge [
    source 1469
    target 1345
    type "link"
  ]
  edge [
    source 1470
    target 1471
    type "child"
  ]
  edge [
    source 1470
    target 1472
    type "child"
  ]
  edge [
    source 1470
    target 1473
    type "child"
  ]
  edge [
    source 1470
    target 1474
    type "child"
  ]
  edge [
    source 1470
    target 1475
    type "child"
  ]
  edge [
    source 1470
    target 1478
    type "child"
  ]
  edge [
    source 1470
    target 1479
    type "child"
  ]
  edge [
    source 1470
    target 1480
    type "child"
  ]
  edge [
    source 1470
    target 1481
    type "child"
  ]
  edge [
    source 1470
    target 1482
    type "child"
  ]
  edge [
    source 1470
    target 1483
    type "child"
  ]
  edge [
    source 1470
    target 1485
    type "child"
  ]
  edge [
    source 1475
    target 1476
    type "link"
  ]
  edge [
    source 1475
    target 1477
    type "link"
  ]
  edge [
    source 1478
    target 1476
    type "link"
  ]
  edge [
    source 1478
    target 1477
    type "link"
  ]
  edge [
    source 1483
    target 1484
    type "link"
  ]
  edge [
    source 1490
    target 1408
    type "link"
  ]
  edge [
    source 1491
    target 1445
    type "link"
  ]
  edge [
    source 1493
    target 1352
    type "link"
  ]
  edge [
    source 1494
    target 1455
    type "link"
  ]
  edge [
    source 1494
    target 1361
    type "link"
  ]
  edge [
    source 1494
    target 1495
    type "link"
  ]
  edge [
    source 1494
    target 1360
    type "link"
  ]
  edge [
    source 1497
    target 1455
    type "link"
  ]
  edge [
    source 1497
    target 1498
    type "link"
  ]
  edge [
    source 1497
    target 1461
    type "link"
  ]
  edge [
    source 1497
    target 1501
    type "link"
  ]
  edge [
    source 1497
    target 1495
    type "link"
  ]
  edge [
    source 1497
    target 1360
    type "link"
  ]
  edge [
    source 1499
    target 1500
    type "child"
  ]
  edge [
    source 1502
    target 1455
    type "link"
  ]
  edge [
    source 1502
    target 1503
    type "link"
  ]
  edge [
    source 1502
    target 1460
    type "link"
  ]
  edge [
    source 1502
    target 1501
    type "link"
  ]
  edge [
    source 1502
    target 1361
    type "link"
  ]
  edge [
    source 1502
    target 1495
    type "link"
  ]
  edge [
    source 1504
    target 1505
    type "child"
  ]
  edge [
    source 1506
    target 1507
    type "child"
  ]
  edge [
    source 1506
    target 1508
    type "child"
  ]
  edge [
    source 1509
    target 1510
    type "child"
  ]
  edge [
    source 1509
    target 1511
    type "child"
  ]
  edge [
    source 1513
    target 1514
    type "child"
  ]
  edge [
    source 1513
    target 1331
    type "child"
  ]
  edge [
    source 1518
    target 1519
    type "link"
  ]
  edge [
    source 1518
    target 1520
    type "link"
  ]
  edge [
    source 1520
    target 1521
    type "child"
  ]
  edge [
    source 1520
    target 1676
    type "child"
  ]
  edge [
    source 1520
    target 1677
    type "child"
  ]
  edge [
    source 1520
    target 1678
    type "child"
  ]
  edge [
    source 1520
    target 1679
    type "child"
  ]
  edge [
    source 1520
    target 1680
    type "child"
  ]
  edge [
    source 1520
    target 1681
    type "child"
  ]
  edge [
    source 1520
    target 1682
    type "child"
  ]
  edge [
    source 1520
    target 1685
    type "child"
  ]
  edge [
    source 1521
    target 1522
    type "link"
  ]
  edge [
    source 1521
    target 1523
    type "link"
  ]
  edge [
    source 1521
    target 1675
    type "link"
  ]
  edge [
    source 1524
    target 1525
    type "child"
  ]
  edge [
    source 1524
    target 1526
    type "child"
  ]
  edge [
    source 1524
    target 1528
    type "child"
  ]
  edge [
    source 1524
    target 1529
    type "child"
  ]
  edge [
    source 1524
    target 1530
    type "child"
  ]
  edge [
    source 1524
    target 1531
    type "child"
  ]
  edge [
    source 1524
    target 1532
    type "child"
  ]
  edge [
    source 1524
    target 1533
    type "child"
  ]
  edge [
    source 1524
    target 1534
    type "child"
  ]
  edge [
    source 1524
    target 248
    type "child"
  ]
  edge [
    source 1524
    target 1535
    type "child"
  ]
  edge [
    source 1524
    target 1536
    type "child"
  ]
  edge [
    source 1524
    target 1585
    type "child"
  ]
  edge [
    source 1524
    target 1586
    type "child"
  ]
  edge [
    source 1524
    target 1587
    type "child"
  ]
  edge [
    source 1524
    target 1588
    type "child"
  ]
  edge [
    source 1524
    target 1589
    type "child"
  ]
  edge [
    source 1524
    target 1590
    type "child"
  ]
  edge [
    source 1524
    target 1591
    type "child"
  ]
  edge [
    source 1524
    target 1592
    type "child"
  ]
  edge [
    source 1524
    target 1593
    type "child"
  ]
  edge [
    source 1524
    target 1594
    type "child"
  ]
  edge [
    source 1524
    target 1654
    type "child"
  ]
  edge [
    source 1524
    target 1655
    type "child"
  ]
  edge [
    source 1524
    target 1656
    type "child"
  ]
  edge [
    source 1524
    target 1657
    type "child"
  ]
  edge [
    source 1524
    target 1658
    type "child"
  ]
  edge [
    source 1524
    target 1600
    type "child"
  ]
  edge [
    source 1524
    target 1605
    type "child"
  ]
  edge [
    source 1524
    target 192
    type "child"
  ]
  edge [
    source 1524
    target 1659
    type "child"
  ]
  edge [
    source 1524
    target 1660
    type "child"
  ]
  edge [
    source 1524
    target 1661
    type "child"
  ]
  edge [
    source 1524
    target 1643
    type "child"
  ]
  edge [
    source 1524
    target 1662
    type "child"
  ]
  edge [
    source 1524
    target 1664
    type "child"
  ]
  edge [
    source 1524
    target 1665
    type "child"
  ]
  edge [
    source 1524
    target 1666
    type "child"
  ]
  edge [
    source 1524
    target 1667
    type "child"
  ]
  edge [
    source 1524
    target 1668
    type "child"
  ]
  edge [
    source 1524
    target 1669
    type "child"
  ]
  edge [
    source 1524
    target 177
    type "child"
  ]
  edge [
    source 1524
    target 1670
    type "child"
  ]
  edge [
    source 1524
    target 1671
    type "child"
  ]
  edge [
    source 1524
    target 1672
    type "child"
  ]
  edge [
    source 1524
    target 1673
    type "child"
  ]
  edge [
    source 1524
    target 1674
    type "child"
  ]
  edge [
    source 1526
    target 1527
    type "link"
  ]
  edge [
    source 1536
    target 1523
    type "link"
  ]
  edge [
    source 1536
    target 1537
    type "link"
  ]
  edge [
    source 1536
    target 1538
    type "link"
  ]
  edge [
    source 1536
    target 1539
    type "link"
  ]
  edge [
    source 1536
    target 1553
    type "link"
  ]
  edge [
    source 1536
    target 1554
    type "link"
  ]
  edge [
    source 1536
    target 1561
    type "link"
  ]
  edge [
    source 1536
    target 1540
    type "link"
  ]
  edge [
    source 1536
    target 1578
    type "link"
  ]
  edge [
    source 1536
    target 1579
    type "link"
  ]
  edge [
    source 1536
    target 1551
    type "link"
  ]
  edge [
    source 1536
    target 1581
    type "link"
  ]
  edge [
    source 1536
    target 1582
    type "link"
  ]
  edge [
    source 1536
    target 1583
    type "link"
  ]
  edge [
    source 1536
    target 1584
    type "link"
  ]
  edge [
    source 1540
    target 1541
    type "child"
  ]
  edge [
    source 1540
    target 435
    type "child"
  ]
  edge [
    source 1540
    target 1543
    type "child"
  ]
  edge [
    source 1540
    target 1544
    type "child"
  ]
  edge [
    source 1540
    target 884
    type "child"
  ]
  edge [
    source 1540
    target 1531
    type "child"
  ]
  edge [
    source 1540
    target 1545
    type "child"
  ]
  edge [
    source 1540
    target 192
    type "child"
  ]
  edge [
    source 1540
    target 1546
    type "child"
  ]
  edge [
    source 1540
    target 1547
    type "child"
  ]
  edge [
    source 1540
    target 1548
    type "child"
  ]
  edge [
    source 1540
    target 1549
    type "child"
  ]
  edge [
    source 1540
    target 1550
    type "child"
  ]
  edge [
    source 1540
    target 1552
    type "child"
  ]
  edge [
    source 1550
    target 1551
    type "link"
  ]
  edge [
    source 1554
    target 1555
    type "child"
  ]
  edge [
    source 1554
    target 1556
    type "child"
  ]
  edge [
    source 1554
    target 1557
    type "child"
  ]
  edge [
    source 1554
    target 1558
    type "child"
  ]
  edge [
    source 1554
    target 1559
    type "child"
  ]
  edge [
    source 1554
    target 1560
    type "child"
  ]
  edge [
    source 1554
    target 1562
    type "child"
  ]
  edge [
    source 1554
    target 1563
    type "child"
  ]
  edge [
    source 1554
    target 1564
    type "child"
  ]
  edge [
    source 1554
    target 1570
    type "child"
  ]
  edge [
    source 1554
    target 1572
    type "child"
  ]
  edge [
    source 1554
    target 1574
    type "child"
  ]
  edge [
    source 1554
    target 1575
    type "child"
  ]
  edge [
    source 1554
    target 1172
    type "child"
  ]
  edge [
    source 1555
    target 1233
    type "link"
  ]
  edge [
    source 1558
    target 39
    type "link"
  ]
  edge [
    source 1559
    target 39
    type "link"
  ]
  edge [
    source 1560
    target 1561
    type "link"
  ]
  edge [
    source 1562
    target 1561
    type "link"
  ]
  edge [
    source 1562
    target 1539
    type "link"
  ]
  edge [
    source 1563
    target 1561
    type "link"
  ]
  edge [
    source 1564
    target 1561
    type "link"
  ]
  edge [
    source 1564
    target 1539
    type "link"
  ]
  edge [
    source 1564
    target 1250
    type "link"
  ]
  edge [
    source 1564
    target 1565
    type "link"
  ]
  edge [
    source 1564
    target 1566
    type "link"
  ]
  edge [
    source 1567
    target 1568
    type "child"
  ]
  edge [
    source 1567
    target 1569
    type "child"
  ]
  edge [
    source 1570
    target 1561
    type "link"
  ]
  edge [
    source 1570
    target 1571
    type "link"
  ]
  edge [
    source 1572
    target 1561
    type "link"
  ]
  edge [
    source 1572
    target 1573
    type "link"
  ]
  edge [
    source 1575
    target 1573
    type "link"
  ]
  edge [
    source 1575
    target 1576
    type "link"
  ]
  edge [
    source 1579
    target 1331
    type "child"
  ]
  edge [
    source 1594
    target 1595
    type "link"
  ]
  edge [
    source 1594
    target 1596
    type "link"
  ]
  edge [
    source 1596
    target 1597
    type "child"
  ]
  edge [
    source 1596
    target 1591
    type "child"
  ]
  edge [
    source 1596
    target 1598
    type "child"
  ]
  edge [
    source 1596
    target 1599
    type "child"
  ]
  edge [
    source 1596
    target 1600
    type "child"
  ]
  edge [
    source 1596
    target 1601
    type "child"
  ]
  edge [
    source 1596
    target 1602
    type "child"
  ]
  edge [
    source 1596
    target 1603
    type "child"
  ]
  edge [
    source 1596
    target 1604
    type "child"
  ]
  edge [
    source 1596
    target 1605
    type "child"
  ]
  edge [
    source 1596
    target 1606
    type "child"
  ]
  edge [
    source 1596
    target 1607
    type "child"
  ]
  edge [
    source 1596
    target 1608
    type "child"
  ]
  edge [
    source 1596
    target 1609
    type "child"
  ]
  edge [
    source 1596
    target 1610
    type "child"
  ]
  edge [
    source 1596
    target 1611
    type "child"
  ]
  edge [
    source 1596
    target 1612
    type "child"
  ]
  edge [
    source 1596
    target 1613
    type "child"
  ]
  edge [
    source 1596
    target 1614
    type "child"
  ]
  edge [
    source 1596
    target 1615
    type "child"
  ]
  edge [
    source 1596
    target 1616
    type "child"
  ]
  edge [
    source 1596
    target 1617
    type "child"
  ]
  edge [
    source 1596
    target 1618
    type "child"
  ]
  edge [
    source 1596
    target 1619
    type "child"
  ]
  edge [
    source 1596
    target 1620
    type "child"
  ]
  edge [
    source 1596
    target 1621
    type "child"
  ]
  edge [
    source 1596
    target 1622
    type "child"
  ]
  edge [
    source 1596
    target 1623
    type "child"
  ]
  edge [
    source 1596
    target 192
    type "child"
  ]
  edge [
    source 1603
    target 1524
    type "link"
  ]
  edge [
    source 1623
    target 1624
    type "link"
  ]
  edge [
    source 1623
    target 1652
    type "link"
  ]
  edge [
    source 1623
    target 1524
    type "link"
  ]
  edge [
    source 1623
    target 1653
    type "link"
  ]
  edge [
    source 1625
    target 1626
    type "child"
  ]
  edge [
    source 1625
    target 1627
    type "child"
  ]
  edge [
    source 1625
    target 1628
    type "child"
  ]
  edge [
    source 1625
    target 1630
    type "child"
  ]
  edge [
    source 1625
    target 1634
    type "child"
  ]
  edge [
    source 1625
    target 192
    type "child"
  ]
  edge [
    source 1625
    target 1636
    type "child"
  ]
  edge [
    source 1625
    target 1638
    type "child"
  ]
  edge [
    source 1625
    target 1639
    type "child"
  ]
  edge [
    source 1625
    target 1640
    type "child"
  ]
  edge [
    source 1625
    target 1641
    type "child"
  ]
  edge [
    source 1625
    target 1642
    type "child"
  ]
  edge [
    source 1625
    target 1643
    type "child"
  ]
  edge [
    source 1625
    target 1645
    type "child"
  ]
  edge [
    source 1625
    target 1647
    type "child"
  ]
  edge [
    source 1625
    target 1648
    type "child"
  ]
  edge [
    source 1625
    target 1649
    type "child"
  ]
  edge [
    source 1625
    target 1650
    type "child"
  ]
  edge [
    source 1625
    target 1651
    type "child"
  ]
  edge [
    source 1628
    target 1629
    type "link"
  ]
  edge [
    source 1630
    target 1631
    type "link"
  ]
  edge [
    source 1630
    target 1632
    type "link"
  ]
  edge [
    source 1630
    target 1633
    type "link"
  ]
  edge [
    source 1636
    target 1637
    type "link"
  ]
  edge [
    source 1636
    target 1437
    type "link"
  ]
  edge [
    source 1643
    target 1644
    type "link"
  ]
  edge [
    source 1645
    target 1637
    type "link"
  ]
  edge [
    source 1645
    target 1646
    type "link"
  ]
  edge [
    source 1645
    target 1644
    type "link"
  ]
  edge [
    source 1658
    target 1595
    type "link"
  ]
  edge [
    source 1660
    target 1361
    type "link"
  ]
  edge [
    source 1660
    target 194
    type "link"
  ]
  edge [
    source 1662
    target 1663
    type "link"
  ]
  edge [
    source 1668
    target 1596
    type "link"
  ]
  edge [
    source 1682
    target 1519
    type "link"
  ]
  edge [
    source 1682
    target 1683
    type "link"
  ]
  edge [
    source 1682
    target 1684
    type "link"
  ]
  edge [
    source 1685
    target 1684
    type "link"
  ]
  edge [
    source 1704
    target 1705
    type "link"
  ]
  edge [
    source 1704
    target 2527
    type "link"
  ]
  edge [
    source 1704
    target 1713
    type "link"
  ]
  edge [
    source 1704
    target 1706
    type "link"
  ]
  edge [
    source 1706
    target 1707
    type "child"
  ]
  edge [
    source 1706
    target 1708
    type "child"
  ]
  edge [
    source 1706
    target 1709
    type "child"
  ]
  edge [
    source 1706
    target 1710
    type "child"
  ]
  edge [
    source 1706
    target 1711
    type "child"
  ]
  edge [
    source 1706
    target 1712
    type "child"
  ]
  edge [
    source 1706
    target 1714
    type "child"
  ]
  edge [
    source 1706
    target 1715
    type "child"
  ]
  edge [
    source 1706
    target 1716
    type "child"
  ]
  edge [
    source 1706
    target 1718
    type "child"
  ]
  edge [
    source 1706
    target 1719
    type "child"
  ]
  edge [
    source 1706
    target 1721
    type "child"
  ]
  edge [
    source 1706
    target 2476
    type "child"
  ]
  edge [
    source 1706
    target 2477
    type "child"
  ]
  edge [
    source 1706
    target 2478
    type "child"
  ]
  edge [
    source 1706
    target 2479
    type "child"
  ]
  edge [
    source 1706
    target 2480
    type "child"
  ]
  edge [
    source 1706
    target 2481
    type "child"
  ]
  edge [
    source 1706
    target 2482
    type "child"
  ]
  edge [
    source 1706
    target 2483
    type "child"
  ]
  edge [
    source 1706
    target 2484
    type "child"
  ]
  edge [
    source 1706
    target 2485
    type "child"
  ]
  edge [
    source 1706
    target 2486
    type "child"
  ]
  edge [
    source 1706
    target 2487
    type "child"
  ]
  edge [
    source 1706
    target 2488
    type "child"
  ]
  edge [
    source 1706
    target 2492
    type "child"
  ]
  edge [
    source 1706
    target 2494
    type "child"
  ]
  edge [
    source 1706
    target 2496
    type "child"
  ]
  edge [
    source 1706
    target 2499
    type "child"
  ]
  edge [
    source 1706
    target 2500
    type "child"
  ]
  edge [
    source 1706
    target 2501
    type "child"
  ]
  edge [
    source 1706
    target 2502
    type "child"
  ]
  edge [
    source 1706
    target 2504
    type "child"
  ]
  edge [
    source 1706
    target 2505
    type "child"
  ]
  edge [
    source 1706
    target 2506
    type "child"
  ]
  edge [
    source 1706
    target 2507
    type "child"
  ]
  edge [
    source 1706
    target 2508
    type "child"
  ]
  edge [
    source 1706
    target 2509
    type "child"
  ]
  edge [
    source 1706
    target 2510
    type "child"
  ]
  edge [
    source 1706
    target 2511
    type "child"
  ]
  edge [
    source 1706
    target 2512
    type "child"
  ]
  edge [
    source 1706
    target 2513
    type "child"
  ]
  edge [
    source 1706
    target 2514
    type "child"
  ]
  edge [
    source 1706
    target 2516
    type "child"
  ]
  edge [
    source 1706
    target 2518
    type "child"
  ]
  edge [
    source 1706
    target 2520
    type "child"
  ]
  edge [
    source 1706
    target 2522
    type "child"
  ]
  edge [
    source 1706
    target 884
    type "child"
  ]
  edge [
    source 1706
    target 435
    type "child"
  ]
  edge [
    source 1706
    target 192
    type "child"
  ]
  edge [
    source 1706
    target 2524
    type "child"
  ]
  edge [
    source 1706
    target 2525
    type "child"
  ]
  edge [
    source 1706
    target 2526
    type "child"
  ]
  edge [
    source 1712
    target 1713
    type "link"
  ]
  edge [
    source 1712
    target 2234
    type "link"
  ]
  edge [
    source 1716
    target 1717
    type "link"
  ]
  edge [
    source 1718
    target 1361
    type "link"
  ]
  edge [
    source 1718
    target 1717
    type "link"
  ]
  edge [
    source 1719
    target 1361
    type "link"
  ]
  edge [
    source 1719
    target 1720
    type "link"
  ]
  edge [
    source 1721
    target 1722
    type "link"
  ]
  edge [
    source 1721
    target 1723
    type "link"
  ]
  edge [
    source 1721
    target 1724
    type "link"
  ]
  edge [
    source 1721
    target 2475
    type "link"
  ]
  edge [
    source 1724
    target 1725
    type "child"
  ]
  edge [
    source 1724
    target 2417
    type "child"
  ]
  edge [
    source 1724
    target 2420
    type "child"
  ]
  edge [
    source 1724
    target 2421
    type "child"
  ]
  edge [
    source 1724
    target 2422
    type "child"
  ]
  edge [
    source 1724
    target 2423
    type "child"
  ]
  edge [
    source 1724
    target 2424
    type "child"
  ]
  edge [
    source 1724
    target 2426
    type "child"
  ]
  edge [
    source 1724
    target 2427
    type "child"
  ]
  edge [
    source 1724
    target 2429
    type "child"
  ]
  edge [
    source 1724
    target 2431
    type "child"
  ]
  edge [
    source 1724
    target 2432
    type "child"
  ]
  edge [
    source 1724
    target 2434
    type "child"
  ]
  edge [
    source 1724
    target 2435
    type "child"
  ]
  edge [
    source 1724
    target 2437
    type "child"
  ]
  edge [
    source 1724
    target 2438
    type "child"
  ]
  edge [
    source 1724
    target 2442
    type "child"
  ]
  edge [
    source 1724
    target 2444
    type "child"
  ]
  edge [
    source 1724
    target 2446
    type "child"
  ]
  edge [
    source 1724
    target 2448
    type "child"
  ]
  edge [
    source 1724
    target 2451
    type "child"
  ]
  edge [
    source 1724
    target 2457
    type "child"
  ]
  edge [
    source 1724
    target 2458
    type "child"
  ]
  edge [
    source 1724
    target 2459
    type "child"
  ]
  edge [
    source 1724
    target 2460
    type "child"
  ]
  edge [
    source 1724
    target 2468
    type "child"
  ]
  edge [
    source 1724
    target 2470
    type "child"
  ]
  edge [
    source 1724
    target 2471
    type "child"
  ]
  edge [
    source 1724
    target 2472
    type "child"
  ]
  edge [
    source 1724
    target 44
    type "child"
  ]
  edge [
    source 1724
    target 2474
    type "child"
  ]
  edge [
    source 1725
    target 1726
    type "link"
  ]
  edge [
    source 1725
    target 1736
    type "link"
  ]
  edge [
    source 1725
    target 2195
    type "link"
  ]
  edge [
    source 1727
    target 1728
    type "child"
  ]
  edge [
    source 1727
    target 2411
    type "child"
  ]
  edge [
    source 1727
    target 2414
    type "child"
  ]
  edge [
    source 1727
    target 2415
    type "child"
  ]
  edge [
    source 1727
    target 2416
    type "child"
  ]
  edge [
    source 1728
    target 1729
    type "link"
  ]
  edge [
    source 1728
    target 1706
    type "link"
  ]
  edge [
    source 1729
    target 1730
    type "child"
  ]
  edge [
    source 1729
    target 1731
    type "child"
  ]
  edge [
    source 1729
    target 1733
    type "child"
  ]
  edge [
    source 1729
    target 1734
    type "child"
  ]
  edge [
    source 1729
    target 2200
    type "child"
  ]
  edge [
    source 1729
    target 2205
    type "child"
  ]
  edge [
    source 1729
    target 2368
    type "child"
  ]
  edge [
    source 1729
    target 2369
    type "child"
  ]
  edge [
    source 1729
    target 2372
    type "child"
  ]
  edge [
    source 1729
    target 2374
    type "child"
  ]
  edge [
    source 1729
    target 2375
    type "child"
  ]
  edge [
    source 1729
    target 2376
    type "child"
  ]
  edge [
    source 1729
    target 2377
    type "child"
  ]
  edge [
    source 1729
    target 2379
    type "child"
  ]
  edge [
    source 1729
    target 2380
    type "child"
  ]
  edge [
    source 1729
    target 2383
    type "child"
  ]
  edge [
    source 1729
    target 2385
    type "child"
  ]
  edge [
    source 1729
    target 2387
    type "child"
  ]
  edge [
    source 1729
    target 2389
    type "child"
  ]
  edge [
    source 1729
    target 2391
    type "child"
  ]
  edge [
    source 1729
    target 2393
    type "child"
  ]
  edge [
    source 1729
    target 2395
    type "child"
  ]
  edge [
    source 1729
    target 2396
    type "child"
  ]
  edge [
    source 1729
    target 2397
    type "child"
  ]
  edge [
    source 1729
    target 2400
    type "child"
  ]
  edge [
    source 1729
    target 2405
    type "child"
  ]
  edge [
    source 1729
    target 2407
    type "child"
  ]
  edge [
    source 1729
    target 2408
    type "child"
  ]
  edge [
    source 1729
    target 2409
    type "child"
  ]
  edge [
    source 1731
    target 1732
    type "link"
  ]
  edge [
    source 1734
    target 1735
    type "link"
  ]
  edge [
    source 1734
    target 1286
    type "link"
  ]
  edge [
    source 1734
    target 2199
    type "link"
  ]
  edge [
    source 1736
    target 1737
    type "child"
  ]
  edge [
    source 1736
    target 1172
    type "child"
  ]
  edge [
    source 1736
    target 1556
    type "child"
  ]
  edge [
    source 1736
    target 706
    type "child"
  ]
  edge [
    source 1736
    target 1757
    type "child"
  ]
  edge [
    source 1736
    target 1758
    type "child"
  ]
  edge [
    source 1736
    target 1760
    type "child"
  ]
  edge [
    source 1736
    target 1774
    type "child"
  ]
  edge [
    source 1736
    target 1775
    type "child"
  ]
  edge [
    source 1736
    target 1781
    type "child"
  ]
  edge [
    source 1736
    target 2197
    type "child"
  ]
  edge [
    source 1736
    target 2198
    type "child"
  ]
  edge [
    source 1738
    target 518
    type "child"
  ]
  edge [
    source 1739
    target 1740
    type "child"
  ]
  edge [
    source 1739
    target 1753
    type "child"
  ]
  edge [
    source 1739
    target 1754
    type "child"
  ]
  edge [
    source 1739
    target 1755
    type "child"
  ]
  edge [
    source 1740
    target 1741
    type "link"
  ]
  edge [
    source 1740
    target 1742
    type "link"
  ]
  edge [
    source 1740
    target 1743
    type "link"
  ]
  edge [
    source 1740
    target 1752
    type "link"
  ]
  edge [
    source 1744
    target 1745
    type "child"
  ]
  edge [
    source 1744
    target 1746
    type "child"
  ]
  edge [
    source 1744
    target 1747
    type "child"
  ]
  edge [
    source 1744
    target 1749
    type "child"
  ]
  edge [
    source 1744
    target 1751
    type "child"
  ]
  edge [
    source 1747
    target 1748
    type "link"
  ]
  edge [
    source 1749
    target 1750
    type "link"
  ]
  edge [
    source 1757
    target 1437
    type "link"
  ]
  edge [
    source 1757
    target 1713
    type "link"
  ]
  edge [
    source 1758
    target 1759
    type "link"
  ]
  edge [
    source 1760
    target 1761
    type "link"
  ]
  edge [
    source 1760
    target 1759
    type "link"
  ]
  edge [
    source 1760
    target 1512
    type "link"
  ]
  edge [
    source 1761
    target 1762
    type "child"
  ]
  edge [
    source 1761
    target 1763
    type "child"
  ]
  edge [
    source 1761
    target 706
    type "child"
  ]
  edge [
    source 1761
    target 1764
    type "child"
  ]
  edge [
    source 1761
    target 1765
    type "child"
  ]
  edge [
    source 1761
    target 1766
    type "child"
  ]
  edge [
    source 1761
    target 1767
    type "child"
  ]
  edge [
    source 1761
    target 1768
    type "child"
  ]
  edge [
    source 1761
    target 1770
    type "child"
  ]
  edge [
    source 1761
    target 1772
    type "child"
  ]
  edge [
    source 1761
    target 1773
    type "child"
  ]
  edge [
    source 1762
    target 1437
    type "link"
  ]
  edge [
    source 1768
    target 1769
    type "link"
  ]
  edge [
    source 1770
    target 1771
    type "link"
  ]
  edge [
    source 1770
    target 1769
    type "link"
  ]
  edge [
    source 1773
    target 1761
    type "link"
  ]
  edge [
    source 1773
    target 1771
    type "link"
  ]
  edge [
    source 1774
    target 1771
    type "link"
  ]
  edge [
    source 1774
    target 1769
    type "link"
  ]
  edge [
    source 1774
    target 1761
    type "link"
  ]
  edge [
    source 1775
    target 1776
    type "link"
  ]
  edge [
    source 1775
    target 1777
    type "link"
  ]
  edge [
    source 1775
    target 1724
    type "link"
  ]
  edge [
    source 1777
    target 1778
    type "child"
  ]
  edge [
    source 1777
    target 1779
    type "child"
  ]
  edge [
    source 1777
    target 1780
    type "child"
  ]
  edge [
    source 1777
    target 1626
    type "child"
  ]
  edge [
    source 1781
    target 1724
    type "link"
  ]
  edge [
    source 1781
    target 1782
    type "link"
  ]
  edge [
    source 1781
    target 784
    type "link"
  ]
  edge [
    source 1781
    target 2195
    type "link"
  ]
  edge [
    source 1781
    target 2196
    type "link"
  ]
  edge [
    source 1783
    target 1784
    type "child"
  ]
  edge [
    source 1783
    target 1785
    type "child"
  ]
  edge [
    source 1783
    target 1786
    type "child"
  ]
  edge [
    source 1783
    target 1788
    type "child"
  ]
  edge [
    source 1783
    target 1796
    type "child"
  ]
  edge [
    source 1783
    target 1881
    type "child"
  ]
  edge [
    source 1783
    target 1882
    type "child"
  ]
  edge [
    source 1783
    target 1894
    type "child"
  ]
  edge [
    source 1783
    target 1895
    type "child"
  ]
  edge [
    source 1783
    target 1899
    type "child"
  ]
  edge [
    source 1783
    target 1900
    type "child"
  ]
  edge [
    source 1783
    target 1902
    type "child"
  ]
  edge [
    source 1783
    target 1905
    type "child"
  ]
  edge [
    source 1783
    target 1906
    type "child"
  ]
  edge [
    source 1783
    target 1908
    type "child"
  ]
  edge [
    source 1783
    target 1910
    type "child"
  ]
  edge [
    source 1783
    target 1912
    type "child"
  ]
  edge [
    source 1783
    target 1914
    type "child"
  ]
  edge [
    source 1783
    target 1917
    type "child"
  ]
  edge [
    source 1783
    target 1918
    type "child"
  ]
  edge [
    source 1783
    target 1920
    type "child"
  ]
  edge [
    source 1783
    target 1922
    type "child"
  ]
  edge [
    source 1783
    target 1940
    type "child"
  ]
  edge [
    source 1783
    target 1943
    type "child"
  ]
  edge [
    source 1783
    target 1944
    type "child"
  ]
  edge [
    source 1783
    target 1946
    type "child"
  ]
  edge [
    source 1783
    target 1947
    type "child"
  ]
  edge [
    source 1783
    target 1953
    type "child"
  ]
  edge [
    source 1783
    target 1958
    type "child"
  ]
  edge [
    source 1783
    target 1962
    type "child"
  ]
  edge [
    source 1783
    target 1964
    type "child"
  ]
  edge [
    source 1783
    target 1965
    type "child"
  ]
  edge [
    source 1783
    target 1966
    type "child"
  ]
  edge [
    source 1783
    target 1977
    type "child"
  ]
  edge [
    source 1783
    target 1978
    type "child"
  ]
  edge [
    source 1783
    target 1979
    type "child"
  ]
  edge [
    source 1783
    target 1984
    type "child"
  ]
  edge [
    source 1783
    target 1985
    type "child"
  ]
  edge [
    source 1783
    target 1987
    type "child"
  ]
  edge [
    source 1783
    target 1988
    type "child"
  ]
  edge [
    source 1783
    target 1989
    type "child"
  ]
  edge [
    source 1783
    target 1990
    type "child"
  ]
  edge [
    source 1783
    target 1991
    type "child"
  ]
  edge [
    source 1783
    target 1992
    type "child"
  ]
  edge [
    source 1783
    target 1993
    type "child"
  ]
  edge [
    source 1783
    target 1994
    type "child"
  ]
  edge [
    source 1783
    target 1996
    type "child"
  ]
  edge [
    source 1783
    target 1997
    type "child"
  ]
  edge [
    source 1783
    target 1998
    type "child"
  ]
  edge [
    source 1783
    target 1999
    type "child"
  ]
  edge [
    source 1783
    target 2002
    type "child"
  ]
  edge [
    source 1783
    target 2016
    type "child"
  ]
  edge [
    source 1783
    target 2017
    type "child"
  ]
  edge [
    source 1783
    target 2018
    type "child"
  ]
  edge [
    source 1783
    target 2022
    type "child"
  ]
  edge [
    source 1783
    target 2023
    type "child"
  ]
  edge [
    source 1783
    target 2024
    type "child"
  ]
  edge [
    source 1783
    target 2025
    type "child"
  ]
  edge [
    source 1783
    target 2027
    type "child"
  ]
  edge [
    source 1783
    target 2030
    type "child"
  ]
  edge [
    source 1783
    target 2031
    type "child"
  ]
  edge [
    source 1783
    target 2032
    type "child"
  ]
  edge [
    source 1783
    target 2033
    type "child"
  ]
  edge [
    source 1783
    target 2034
    type "child"
  ]
  edge [
    source 1783
    target 2035
    type "child"
  ]
  edge [
    source 1783
    target 2036
    type "child"
  ]
  edge [
    source 1783
    target 2037
    type "child"
  ]
  edge [
    source 1783
    target 2039
    type "child"
  ]
  edge [
    source 1783
    target 2041
    type "child"
  ]
  edge [
    source 1783
    target 2042
    type "child"
  ]
  edge [
    source 1783
    target 2186
    type "child"
  ]
  edge [
    source 1783
    target 2194
    type "child"
  ]
  edge [
    source 1786
    target 1759
    type "link"
  ]
  edge [
    source 1786
    target 1367
    type "link"
  ]
  edge [
    source 1786
    target 588
    type "link"
  ]
  edge [
    source 1786
    target 1787
    type "link"
  ]
  edge [
    source 1788
    target 1789
    type "link"
  ]
  edge [
    source 1788
    target 1790
    type "link"
  ]
  edge [
    source 1788
    target 1791
    type "link"
  ]
  edge [
    source 1788
    target 1792
    type "link"
  ]
  edge [
    source 1788
    target 1787
    type "link"
  ]
  edge [
    source 1788
    target 1793
    type "link"
  ]
  edge [
    source 1788
    target 1794
    type "link"
  ]
  edge [
    source 1788
    target 1795
    type "link"
  ]
  edge [
    source 1796
    target 1797
    type "link"
  ]
  edge [
    source 1796
    target 1790
    type "link"
  ]
  edge [
    source 1796
    target 1759
    type "link"
  ]
  edge [
    source 1796
    target 1787
    type "link"
  ]
  edge [
    source 1796
    target 1795
    type "link"
  ]
  edge [
    source 1796
    target 1798
    type "link"
  ]
  edge [
    source 1796
    target 1799
    type "link"
  ]
  edge [
    source 1796
    target 1792
    type "link"
  ]
  edge [
    source 1796
    target 1800
    type "link"
  ]
  edge [
    source 1796
    target 1793
    type "link"
  ]
  edge [
    source 1796
    target 1801
    type "link"
  ]
  edge [
    source 1796
    target 1802
    type "link"
  ]
  edge [
    source 1796
    target 1286
    type "link"
  ]
  edge [
    source 1796
    target 1810
    type "link"
  ]
  edge [
    source 1796
    target 1811
    type "link"
  ]
  edge [
    source 1796
    target 1812
    type "link"
  ]
  edge [
    source 1803
    target 1804
    type "child"
  ]
  edge [
    source 1803
    target 1805
    type "child"
  ]
  edge [
    source 1803
    target 1806
    type "child"
  ]
  edge [
    source 1803
    target 1807
    type "child"
  ]
  edge [
    source 1803
    target 1808
    type "child"
  ]
  edge [
    source 1803
    target 1809
    type "child"
  ]
  edge [
    source 1804
    target 1499
    type "link"
  ]
  edge [
    source 1805
    target 1504
    type "link"
  ]
  edge [
    source 1805
    target 1801
    type "link"
  ]
  edge [
    source 1807
    target 1801
    type "link"
  ]
  edge [
    source 1809
    target 1801
    type "link"
  ]
  edge [
    source 1812
    target 1813
    type "child"
  ]
  edge [
    source 1812
    target 1818
    type "child"
  ]
  edge [
    source 1812
    target 1439
    type "child"
  ]
  edge [
    source 1812
    target 1440
    type "child"
  ]
  edge [
    source 1812
    target 1441
    type "child"
  ]
  edge [
    source 1812
    target 1442
    type "child"
  ]
  edge [
    source 1812
    target 1443
    type "child"
  ]
  edge [
    source 1812
    target 1444
    type "child"
  ]
  edge [
    source 1812
    target 1820
    type "child"
  ]
  edge [
    source 1812
    target 1821
    type "child"
  ]
  edge [
    source 1812
    target 1822
    type "child"
  ]
  edge [
    source 1812
    target 1823
    type "child"
  ]
  edge [
    source 1812
    target 1824
    type "child"
  ]
  edge [
    source 1812
    target 1847
    type "child"
  ]
  edge [
    source 1812
    target 1848
    type "child"
  ]
  edge [
    source 1812
    target 1849
    type "child"
  ]
  edge [
    source 1812
    target 1851
    type "child"
  ]
  edge [
    source 1812
    target 1853
    type "child"
  ]
  edge [
    source 1812
    target 1860
    type "child"
  ]
  edge [
    source 1812
    target 1875
    type "child"
  ]
  edge [
    source 1812
    target 1877
    type "child"
  ]
  edge [
    source 1812
    target 1879
    type "child"
  ]
  edge [
    source 1813
    target 1797
    type "link"
  ]
  edge [
    source 1813
    target 1799
    type "link"
  ]
  edge [
    source 1813
    target 1759
    type "link"
  ]
  edge [
    source 1813
    target 1787
    type "link"
  ]
  edge [
    source 1813
    target 1286
    type "link"
  ]
  edge [
    source 1813
    target 1798
    type "link"
  ]
  edge [
    source 1813
    target 1814
    type "link"
  ]
  edge [
    source 1813
    target 1801
    type "link"
  ]
  edge [
    source 1813
    target 1800
    type "link"
  ]
  edge [
    source 1813
    target 1795
    type "link"
  ]
  edge [
    source 1813
    target 1816
    type "link"
  ]
  edge [
    source 1813
    target 1793
    type "link"
  ]
  edge [
    source 1813
    target 1817
    type "link"
  ]
  edge [
    source 1813
    target 1810
    type "link"
  ]
  edge [
    source 1813
    target 1802
    type "link"
  ]
  edge [
    source 1814
    target 1449
    type "child"
  ]
  edge [
    source 1814
    target 1815
    type "child"
  ]
  edge [
    source 1818
    target 1759
    type "link"
  ]
  edge [
    source 1818
    target 1795
    type "link"
  ]
  edge [
    source 1818
    target 1819
    type "link"
  ]
  edge [
    source 1824
    target 1825
    type "link"
  ]
  edge [
    source 1824
    target 1826
    type "link"
  ]
  edge [
    source 1824
    target 1827
    type "link"
  ]
  edge [
    source 1827
    target 1828
    type "child"
  ]
  edge [
    source 1827
    target 1831
    type "child"
  ]
  edge [
    source 1827
    target 1832
    type "child"
  ]
  edge [
    source 1827
    target 1833
    type "child"
  ]
  edge [
    source 1827
    target 1834
    type "child"
  ]
  edge [
    source 1827
    target 1835
    type "child"
  ]
  edge [
    source 1827
    target 1836
    type "child"
  ]
  edge [
    source 1827
    target 1838
    type "child"
  ]
  edge [
    source 1827
    target 1839
    type "child"
  ]
  edge [
    source 1827
    target 1840
    type "child"
  ]
  edge [
    source 1827
    target 1841
    type "child"
  ]
  edge [
    source 1827
    target 1842
    type "child"
  ]
  edge [
    source 1827
    target 1843
    type "child"
  ]
  edge [
    source 1827
    target 1844
    type "child"
  ]
  edge [
    source 1827
    target 1845
    type "child"
  ]
  edge [
    source 1827
    target 620
    type "child"
  ]
  edge [
    source 1827
    target 1846
    type "child"
  ]
  edge [
    source 1827
    target 623
    type "child"
  ]
  edge [
    source 1827
    target 648
    type "child"
  ]
  edge [
    source 1828
    target 1829
    type "link"
  ]
  edge [
    source 1828
    target 1825
    type "link"
  ]
  edge [
    source 1828
    target 1830
    type "link"
  ]
  edge [
    source 1836
    target 1837
    type "link"
  ]
  edge [
    source 1838
    target 1837
    type "link"
  ]
  edge [
    source 1849
    target 1850
    type "link"
  ]
  edge [
    source 1851
    target 1852
    type "link"
  ]
  edge [
    source 1853
    target 1837
    type "link"
  ]
  edge [
    source 1853
    target 1854
    type "link"
  ]
  edge [
    source 1853
    target 1855
    type "link"
  ]
  edge [
    source 1853
    target 1856
    type "link"
  ]
  edge [
    source 1853
    target 1857
    type "link"
  ]
  edge [
    source 1853
    target 1366
    type "link"
  ]
  edge [
    source 1853
    target 1858
    type "link"
  ]
  edge [
    source 1853
    target 1859
    type "link"
  ]
  edge [
    source 1853
    target 1827
    type "link"
  ]
  edge [
    source 1853
    target 54
    type "link"
  ]
  edge [
    source 1860
    target 1861
    type "link"
  ]
  edge [
    source 1860
    target 1580
    type "link"
  ]
  edge [
    source 1860
    target 54
    type "link"
  ]
  edge [
    source 1860
    target 1862
    type "link"
  ]
  edge [
    source 1860
    target 1874
    type "link"
  ]
  edge [
    source 1863
    target 1864
    type "child"
  ]
  edge [
    source 1863
    target 1866
    type "child"
  ]
  edge [
    source 1863
    target 1867
    type "child"
  ]
  edge [
    source 1863
    target 1868
    type "child"
  ]
  edge [
    source 1863
    target 1869
    type "child"
  ]
  edge [
    source 1863
    target 1870
    type "child"
  ]
  edge [
    source 1863
    target 1253
    type "child"
  ]
  edge [
    source 1863
    target 1871
    type "child"
  ]
  edge [
    source 1863
    target 1872
    type "child"
  ]
  edge [
    source 1863
    target 1230
    type "child"
  ]
  edge [
    source 1864
    target 1865
    type "link"
  ]
  edge [
    source 1872
    target 1873
    type "link"
  ]
  edge [
    source 1875
    target 1876
    type "link"
  ]
  edge [
    source 1877
    target 54
    type "link"
  ]
  edge [
    source 1877
    target 1878
    type "link"
  ]
  edge [
    source 1877
    target 1862
    type "link"
  ]
  edge [
    source 1879
    target 1880
    type "link"
  ]
  edge [
    source 1881
    target 1789
    type "link"
  ]
  edge [
    source 1881
    target 1759
    type "link"
  ]
  edge [
    source 1881
    target 1792
    type "link"
  ]
  edge [
    source 1881
    target 1810
    type "link"
  ]
  edge [
    source 1881
    target 1795
    type "link"
  ]
  edge [
    source 1882
    target 1738
    type "link"
  ]
  edge [
    source 1882
    target 1724
    type "link"
  ]
  edge [
    source 1882
    target 1883
    type "link"
  ]
  edge [
    source 1882
    target 1759
    type "link"
  ]
  edge [
    source 1882
    target 31
    type "link"
  ]
  edge [
    source 1883
    target 1884
    type "child"
  ]
  edge [
    source 1883
    target 1886
    type "child"
  ]
  edge [
    source 1883
    target 1887
    type "child"
  ]
  edge [
    source 1883
    target 1888
    type "child"
  ]
  edge [
    source 1883
    target 1889
    type "child"
  ]
  edge [
    source 1883
    target 1891
    type "child"
  ]
  edge [
    source 1883
    target 1893
    type "child"
  ]
  edge [
    source 1884
    target 1759
    type "link"
  ]
  edge [
    source 1884
    target 1885
    type "link"
  ]
  edge [
    source 1884
    target 1783
    type "link"
  ]
  edge [
    source 1884
    target 1724
    type "link"
  ]
  edge [
    source 1886
    target 1783
    type "link"
  ]
  edge [
    source 1886
    target 1759
    type "link"
  ]
  edge [
    source 1886
    target 1885
    type "link"
  ]
  edge [
    source 1886
    target 1810
    type "link"
  ]
  edge [
    source 1886
    target 1795
    type "link"
  ]
  edge [
    source 1886
    target 1724
    type "link"
  ]
  edge [
    source 1887
    target 1792
    type "link"
  ]
  edge [
    source 1887
    target 1783
    type "link"
  ]
  edge [
    source 1888
    target 1792
    type "link"
  ]
  edge [
    source 1888
    target 1783
    type "link"
  ]
  edge [
    source 1889
    target 1783
    type "link"
  ]
  edge [
    source 1889
    target 1890
    type "link"
  ]
  edge [
    source 1889
    target 1724
    type "link"
  ]
  edge [
    source 1889
    target 1795
    type "link"
  ]
  edge [
    source 1891
    target 1769
    type "link"
  ]
  edge [
    source 1891
    target 1286
    type "link"
  ]
  edge [
    source 1891
    target 1892
    type "link"
  ]
  edge [
    source 1893
    target 1769
    type "link"
  ]
  edge [
    source 1893
    target 1286
    type "link"
  ]
  edge [
    source 1893
    target 1892
    type "link"
  ]
  edge [
    source 1894
    target 1738
    type "link"
  ]
  edge [
    source 1894
    target 1724
    type "link"
  ]
  edge [
    source 1894
    target 1883
    type "link"
  ]
  edge [
    source 1894
    target 1759
    type "link"
  ]
  edge [
    source 1894
    target 31
    type "link"
  ]
  edge [
    source 1894
    target 1736
    type "link"
  ]
  edge [
    source 1895
    target 1896
    type "link"
  ]
  edge [
    source 1895
    target 1738
    type "link"
  ]
  edge [
    source 1895
    target 1724
    type "link"
  ]
  edge [
    source 1895
    target 33
    type "link"
  ]
  edge [
    source 1895
    target 1883
    type "link"
  ]
  edge [
    source 1895
    target 1759
    type "link"
  ]
  edge [
    source 1895
    target 31
    type "link"
  ]
  edge [
    source 1895
    target 1897
    type "link"
  ]
  edge [
    source 1897
    target 1898
    type "child"
  ]
  edge [
    source 1897
    target 1648
    type "child"
  ]
  edge [
    source 1899
    target 1771
    type "link"
  ]
  edge [
    source 1899
    target 1811
    type "link"
  ]
  edge [
    source 1899
    target 1795
    type "link"
  ]
  edge [
    source 1900
    target 1771
    type "link"
  ]
  edge [
    source 1900
    target 1811
    type "link"
  ]
  edge [
    source 1900
    target 1795
    type "link"
  ]
  edge [
    source 1900
    target 1901
    type "link"
  ]
  edge [
    source 1902
    target 1771
    type "link"
  ]
  edge [
    source 1902
    target 1903
    type "link"
  ]
  edge [
    source 1902
    target 1904
    type "link"
  ]
  edge [
    source 1902
    target 1759
    type "link"
  ]
  edge [
    source 1902
    target 1724
    type "link"
  ]
  edge [
    source 1902
    target 1811
    type "link"
  ]
  edge [
    source 1902
    target 1795
    type "link"
  ]
  edge [
    source 1906
    target 1706
    type "link"
  ]
  edge [
    source 1906
    target 1771
    type "link"
  ]
  edge [
    source 1906
    target 1907
    type "link"
  ]
  edge [
    source 1906
    target 1802
    type "link"
  ]
  edge [
    source 1906
    target 1811
    type "link"
  ]
  edge [
    source 1906
    target 1795
    type "link"
  ]
  edge [
    source 1908
    target 1909
    type "link"
  ]
  edge [
    source 1908
    target 1795
    type "link"
  ]
  edge [
    source 1910
    target 1771
    type "link"
  ]
  edge [
    source 1910
    target 1706
    type "link"
  ]
  edge [
    source 1910
    target 1911
    type "link"
  ]
  edge [
    source 1910
    target 1811
    type "link"
  ]
  edge [
    source 1910
    target 1795
    type "link"
  ]
  edge [
    source 1912
    target 1913
    type "link"
  ]
  edge [
    source 1912
    target 1795
    type "link"
  ]
  edge [
    source 1914
    target 1771
    type "link"
  ]
  edge [
    source 1914
    target 1915
    type "link"
  ]
  edge [
    source 1914
    target 1761
    type "link"
  ]
  edge [
    source 1914
    target 1380
    type "link"
  ]
  edge [
    source 1914
    target 1795
    type "link"
  ]
  edge [
    source 1914
    target 1724
    type "link"
  ]
  edge [
    source 1914
    target 1916
    type "link"
  ]
  edge [
    source 1917
    target 1795
    type "link"
  ]
  edge [
    source 1917
    target 1916
    type "link"
  ]
  edge [
    source 1918
    target 1792
    type "link"
  ]
  edge [
    source 1918
    target 1919
    type "link"
  ]
  edge [
    source 1920
    target 1921
    type "link"
  ]
  edge [
    source 1920
    target 1792
    type "link"
  ]
  edge [
    source 1922
    target 1923
    type "link"
  ]
  edge [
    source 1922
    target 1936
    type "link"
  ]
  edge [
    source 1922
    target 1759
    type "link"
  ]
  edge [
    source 1922
    target 1380
    type "link"
  ]
  edge [
    source 1922
    target 1885
    type "link"
  ]
  edge [
    source 1922
    target 1937
    type "link"
  ]
  edge [
    source 1922
    target 1795
    type "link"
  ]
  edge [
    source 1922
    target 1938
    type "link"
  ]
  edge [
    source 1922
    target 1939
    type "link"
  ]
  edge [
    source 1922
    target 1916
    type "link"
  ]
  edge [
    source 1924
    target 1925
    type "child"
  ]
  edge [
    source 1924
    target 1926
    type "child"
  ]
  edge [
    source 1924
    target 1928
    type "child"
  ]
  edge [
    source 1924
    target 1929
    type "child"
  ]
  edge [
    source 1924
    target 1930
    type "child"
  ]
  edge [
    source 1924
    target 1931
    type "child"
  ]
  edge [
    source 1924
    target 1932
    type "child"
  ]
  edge [
    source 1924
    target 1933
    type "child"
  ]
  edge [
    source 1924
    target 1935
    type "child"
  ]
  edge [
    source 1926
    target 1927
    type "link"
  ]
  edge [
    source 1928
    target 1927
    type "link"
  ]
  edge [
    source 1933
    target 1934
    type "link"
  ]
  edge [
    source 1935
    target 1783
    type "link"
  ]
  edge [
    source 1940
    target 1890
    type "link"
  ]
  edge [
    source 1940
    target 1941
    type "link"
  ]
  edge [
    source 1940
    target 1761
    type "link"
  ]
  edge [
    source 1940
    target 1923
    type "link"
  ]
  edge [
    source 1940
    target 1936
    type "link"
  ]
  edge [
    source 1940
    target 1919
    type "link"
  ]
  edge [
    source 1940
    target 1942
    type "link"
  ]
  edge [
    source 1940
    target 1380
    type "link"
  ]
  edge [
    source 1940
    target 1795
    type "link"
  ]
  edge [
    source 1940
    target 1939
    type "link"
  ]
  edge [
    source 1944
    target 1761
    type "link"
  ]
  edge [
    source 1944
    target 1759
    type "link"
  ]
  edge [
    source 1944
    target 1512
    type "link"
  ]
  edge [
    source 1944
    target 1945
    type "link"
  ]
  edge [
    source 1946
    target 1759
    type "link"
  ]
  edge [
    source 1946
    target 73
    type "link"
  ]
  edge [
    source 1947
    target 1759
    type "link"
  ]
  edge [
    source 1947
    target 1782
    type "link"
  ]
  edge [
    source 1948
    target 1949
    type "child"
  ]
  edge [
    source 1948
    target 1950
    type "child"
  ]
  edge [
    source 1948
    target 1951
    type "child"
  ]
  edge [
    source 1948
    target 1952
    type "child"
  ]
  edge [
    source 1953
    target 1954
    type "link"
  ]
  edge [
    source 1953
    target 1957
    type "link"
  ]
  edge [
    source 1953
    target 1955
    type "link"
  ]
  edge [
    source 1955
    target 1956
    type "child"
  ]
  edge [
    source 1956
    target 1759
    type "link"
  ]
  edge [
    source 1958
    target 1959
    type "link"
  ]
  edge [
    source 1958
    target 1885
    type "link"
  ]
  edge [
    source 1959
    target 1449
    type "child"
  ]
  edge [
    source 1959
    target 1960
    type "child"
  ]
  edge [
    source 1959
    target 1961
    type "child"
  ]
  edge [
    source 1960
    target 1759
    type "link"
  ]
  edge [
    source 1961
    target 1795
    type "link"
  ]
  edge [
    source 1962
    target 1963
    type "link"
  ]
  edge [
    source 1962
    target 1759
    type "link"
  ]
  edge [
    source 1964
    target 1963
    type "link"
  ]
  edge [
    source 1964
    target 1771
    type "link"
  ]
  edge [
    source 1964
    target 1959
    type "link"
  ]
  edge [
    source 1964
    target 1795
    type "link"
  ]
  edge [
    source 1965
    target 1963
    type "link"
  ]
  edge [
    source 1965
    target 1771
    type "link"
  ]
  edge [
    source 1965
    target 1759
    type "link"
  ]
  edge [
    source 1965
    target 1959
    type "link"
  ]
  edge [
    source 1966
    target 1963
    type "link"
  ]
  edge [
    source 1966
    target 1771
    type "link"
  ]
  edge [
    source 1966
    target 1967
    type "link"
  ]
  edge [
    source 1966
    target 1759
    type "link"
  ]
  edge [
    source 1966
    target 1959
    type "link"
  ]
  edge [
    source 1966
    target 1924
    type "link"
  ]
  edge [
    source 1967
    target 1968
    type "child"
  ]
  edge [
    source 1967
    target 1969
    type "child"
  ]
  edge [
    source 1967
    target 1970
    type "child"
  ]
  edge [
    source 1970
    target 1971
    type "link"
  ]
  edge [
    source 1970
    target 1972
    type "link"
  ]
  edge [
    source 1973
    target 1449
    type "child"
  ]
  edge [
    source 1973
    target 1974
    type "child"
  ]
  edge [
    source 1973
    target 1975
    type "child"
  ]
  edge [
    source 1973
    target 1976
    type "child"
  ]
  edge [
    source 1974
    target 1759
    type "link"
  ]
  edge [
    source 1974
    target 1512
    type "link"
  ]
  edge [
    source 1975
    target 1512
    type "link"
  ]
  edge [
    source 1975
    target 1795
    type "link"
  ]
  edge [
    source 1976
    target 1512
    type "link"
  ]
  edge [
    source 1976
    target 1795
    type "link"
  ]
  edge [
    source 1977
    target 1963
    type "link"
  ]
  edge [
    source 1977
    target 1759
    type "link"
  ]
  edge [
    source 1977
    target 1973
    type "link"
  ]
  edge [
    source 1977
    target 1512
    type "link"
  ]
  edge [
    source 1978
    target 1973
    type "link"
  ]
  edge [
    source 1978
    target 1512
    type "link"
  ]
  edge [
    source 1978
    target 1795
    type "link"
  ]
  edge [
    source 1979
    target 1759
    type "link"
  ]
  edge [
    source 1979
    target 1512
    type "link"
  ]
  edge [
    source 1979
    target 1980
    type "link"
  ]
  edge [
    source 1980
    target 1449
    type "child"
  ]
  edge [
    source 1980
    target 1981
    type "child"
  ]
  edge [
    source 1980
    target 1983
    type "child"
  ]
  edge [
    source 1981
    target 1759
    type "link"
  ]
  edge [
    source 1981
    target 1512
    type "link"
  ]
  edge [
    source 1981
    target 1982
    type "link"
  ]
  edge [
    source 1983
    target 1512
    type "link"
  ]
  edge [
    source 1983
    target 1982
    type "link"
  ]
  edge [
    source 1983
    target 1795
    type "link"
  ]
  edge [
    source 1984
    target 1512
    type "link"
  ]
  edge [
    source 1984
    target 1980
    type "link"
  ]
  edge [
    source 1984
    target 1795
    type "link"
  ]
  edge [
    source 1985
    target 1986
    type "link"
  ]
  edge [
    source 1985
    target 1759
    type "link"
  ]
  edge [
    source 1985
    target 1924
    type "link"
  ]
  edge [
    source 1987
    target 1963
    type "link"
  ]
  edge [
    source 1987
    target 1986
    type "link"
  ]
  edge [
    source 1987
    target 1759
    type "link"
  ]
  edge [
    source 1987
    target 1924
    type "link"
  ]
  edge [
    source 1988
    target 1963
    type "link"
  ]
  edge [
    source 1988
    target 1986
    type "link"
  ]
  edge [
    source 1988
    target 1759
    type "link"
  ]
  edge [
    source 1988
    target 1934
    type "link"
  ]
  edge [
    source 1989
    target 1963
    type "link"
  ]
  edge [
    source 1989
    target 1759
    type "link"
  ]
  edge [
    source 1990
    target 1795
    type "link"
  ]
  edge [
    source 1991
    target 1934
    type "link"
  ]
  edge [
    source 1991
    target 1759
    type "link"
  ]
  edge [
    source 1993
    target 1963
    type "link"
  ]
  edge [
    source 1993
    target 1759
    type "link"
  ]
  edge [
    source 1994
    target 1963
    type "link"
  ]
  edge [
    source 1994
    target 1759
    type "link"
  ]
  edge [
    source 1994
    target 1995
    type "link"
  ]
  edge [
    source 1997
    target 1759
    type "link"
  ]
  edge [
    source 1998
    target 1795
    type "link"
  ]
  edge [
    source 1999
    target 2000
    type "link"
  ]
  edge [
    source 1999
    target 2001
    type "link"
  ]
  edge [
    source 2002
    target 2003
    type "link"
  ]
  edge [
    source 2002
    target 1759
    type "link"
  ]
  edge [
    source 2002
    target 2011
    type "link"
  ]
  edge [
    source 2002
    target 2012
    type "link"
  ]
  edge [
    source 2002
    target 1924
    type "link"
  ]
  edge [
    source 2002
    target 2013
    type "link"
  ]
  edge [
    source 2002
    target 54
    type "link"
  ]
  edge [
    source 2002
    target 2014
    type "link"
  ]
  edge [
    source 2002
    target 2015
    type "link"
  ]
  edge [
    source 2003
    target 2004
    type "child"
  ]
  edge [
    source 2003
    target 2008
    type "child"
  ]
  edge [
    source 2003
    target 2009
    type "child"
  ]
  edge [
    source 2003
    target 2010
    type "child"
  ]
  edge [
    source 2004
    target 2005
    type "link"
  ]
  edge [
    source 2004
    target 2006
    type "link"
  ]
  edge [
    source 2004
    target 2007
    type "link"
  ]
  edge [
    source 2010
    target 2006
    type "link"
  ]
  edge [
    source 2010
    target 2011
    type "link"
  ]
  edge [
    source 2016
    target 1759
    type "link"
  ]
  edge [
    source 2017
    target 1759
    type "link"
  ]
  edge [
    source 2018
    target 2019
    type "link"
  ]
  edge [
    source 2018
    target 1759
    type "link"
  ]
  edge [
    source 2018
    target 2020
    type "link"
  ]
  edge [
    source 2022
    target 1934
    type "link"
  ]
  edge [
    source 2022
    target 1790
    type "link"
  ]
  edge [
    source 2022
    target 1800
    type "link"
  ]
  edge [
    source 2022
    target 1793
    type "link"
  ]
  edge [
    source 2022
    target 1795
    type "link"
  ]
  edge [
    source 2023
    target 1183
    type "link"
  ]
  edge [
    source 2023
    target 2020
    type "link"
  ]
  edge [
    source 2023
    target 1795
    type "link"
  ]
  edge [
    source 2025
    target 2026
    type "link"
  ]
  edge [
    source 2025
    target 1792
    type "link"
  ]
  edge [
    source 2025
    target 1795
    type "link"
  ]
  edge [
    source 2027
    target 720
    type "link"
  ]
  edge [
    source 2027
    target 1759
    type "link"
  ]
  edge [
    source 2027
    target 2028
    type "link"
  ]
  edge [
    source 2028
    target 2029
    type "child"
  ]
  edge [
    source 2031
    target 1759
    type "link"
  ]
  edge [
    source 2032
    target 1759
    type "link"
  ]
  edge [
    source 2033
    target 1183
    type "link"
  ]
  edge [
    source 2033
    target 1759
    type "link"
  ]
  edge [
    source 2033
    target 2020
    type "link"
  ]
  edge [
    source 2034
    target 1934
    type "link"
  ]
  edge [
    source 2034
    target 1790
    type "link"
  ]
  edge [
    source 2034
    target 1800
    type "link"
  ]
  edge [
    source 2034
    target 1793
    type "link"
  ]
  edge [
    source 2034
    target 1795
    type "link"
  ]
  edge [
    source 2035
    target 1934
    type "link"
  ]
  edge [
    source 2035
    target 1790
    type "link"
  ]
  edge [
    source 2035
    target 1800
    type "link"
  ]
  edge [
    source 2035
    target 1793
    type "link"
  ]
  edge [
    source 2035
    target 1795
    type "link"
  ]
  edge [
    source 2036
    target 1183
    type "link"
  ]
  edge [
    source 2036
    target 2020
    type "link"
  ]
  edge [
    source 2036
    target 1795
    type "link"
  ]
  edge [
    source 2037
    target 2038
    type "link"
  ]
  edge [
    source 2037
    target 1738
    type "link"
  ]
  edge [
    source 2037
    target 1286
    type "link"
  ]
  edge [
    source 2037
    target 1724
    type "link"
  ]
  edge [
    source 2037
    target 1759
    type "link"
  ]
  edge [
    source 2037
    target 1380
    type "link"
  ]
  edge [
    source 2038
    target 1898
    type "child"
  ]
  edge [
    source 2038
    target 1648
    type "child"
  ]
  edge [
    source 2039
    target 2040
    type "link"
  ]
  edge [
    source 2039
    target 1759
    type "link"
  ]
  edge [
    source 2039
    target 1380
    type "link"
  ]
  edge [
    source 2039
    target 1924
    type "link"
  ]
  edge [
    source 2039
    target 2038
    type "link"
  ]
  edge [
    source 2039
    target 2013
    type "link"
  ]
  edge [
    source 2039
    target 1738
    type "link"
  ]
  edge [
    source 2039
    target 1286
    type "link"
  ]
  edge [
    source 2039
    target 1724
    type "link"
  ]
  edge [
    source 2039
    target 54
    type "link"
  ]
  edge [
    source 2039
    target 2014
    type "link"
  ]
  edge [
    source 2039
    target 2015
    type "link"
  ]
  edge [
    source 2039
    target 1367
    type "link"
  ]
  edge [
    source 2041
    target 1738
    type "link"
  ]
  edge [
    source 2041
    target 1286
    type "link"
  ]
  edge [
    source 2041
    target 2040
    type "link"
  ]
  edge [
    source 2041
    target 1724
    type "link"
  ]
  edge [
    source 2041
    target 1759
    type "link"
  ]
  edge [
    source 2041
    target 1367
    type "link"
  ]
  edge [
    source 2042
    target 2040
    type "link"
  ]
  edge [
    source 2042
    target 1759
    type "link"
  ]
  edge [
    source 2042
    target 2043
    type "link"
  ]
  edge [
    source 2042
    target 1380
    type "link"
  ]
  edge [
    source 2042
    target 1924
    type "link"
  ]
  edge [
    source 2042
    target 2038
    type "link"
  ]
  edge [
    source 2042
    target 2044
    type "link"
  ]
  edge [
    source 2042
    target 1738
    type "link"
  ]
  edge [
    source 2042
    target 1286
    type "link"
  ]
  edge [
    source 2042
    target 1724
    type "link"
  ]
  edge [
    source 2042
    target 2049
    type "link"
  ]
  edge [
    source 2042
    target 1367
    type "link"
  ]
  edge [
    source 2044
    target 2045
    type "child"
  ]
  edge [
    source 2044
    target 2046
    type "child"
  ]
  edge [
    source 2044
    target 2047
    type "child"
  ]
  edge [
    source 2044
    target 2048
    type "child"
  ]
  edge [
    source 2050
    target 2051
    type "child"
  ]
  edge [
    source 2050
    target 2052
    type "child"
  ]
  edge [
    source 2050
    target 2053
    type "child"
  ]
  edge [
    source 2050
    target 2054
    type "child"
  ]
  edge [
    source 2050
    target 2055
    type "child"
  ]
  edge [
    source 2050
    target 2056
    type "child"
  ]
  edge [
    source 2050
    target 2057
    type "child"
  ]
  edge [
    source 2050
    target 2058
    type "child"
  ]
  edge [
    source 2050
    target 2059
    type "child"
  ]
  edge [
    source 2050
    target 2060
    type "child"
  ]
  edge [
    source 2050
    target 2061
    type "child"
  ]
  edge [
    source 2050
    target 2063
    type "child"
  ]
  edge [
    source 2050
    target 2065
    type "child"
  ]
  edge [
    source 2050
    target 2067
    type "child"
  ]
  edge [
    source 2050
    target 2071
    type "child"
  ]
  edge [
    source 2050
    target 2072
    type "child"
  ]
  edge [
    source 2050
    target 2073
    type "child"
  ]
  edge [
    source 2050
    target 2075
    type "child"
  ]
  edge [
    source 2050
    target 2076
    type "child"
  ]
  edge [
    source 2050
    target 2077
    type "child"
  ]
  edge [
    source 2050
    target 2080
    type "child"
  ]
  edge [
    source 2050
    target 2081
    type "child"
  ]
  edge [
    source 2050
    target 2082
    type "child"
  ]
  edge [
    source 2050
    target 17
    type "child"
  ]
  edge [
    source 2050
    target 2083
    type "child"
  ]
  edge [
    source 2050
    target 2084
    type "child"
  ]
  edge [
    source 2050
    target 2085
    type "child"
  ]
  edge [
    source 2050
    target 2087
    type "child"
  ]
  edge [
    source 2050
    target 2088
    type "child"
  ]
  edge [
    source 2050
    target 2090
    type "child"
  ]
  edge [
    source 2050
    target 2101
    type "child"
  ]
  edge [
    source 2050
    target 2168
    type "child"
  ]
  edge [
    source 2050
    target 2169
    type "child"
  ]
  edge [
    source 2050
    target 2170
    type "child"
  ]
  edge [
    source 2050
    target 2171
    type "child"
  ]
  edge [
    source 2050
    target 2172
    type "child"
  ]
  edge [
    source 2050
    target 2173
    type "child"
  ]
  edge [
    source 2050
    target 2174
    type "child"
  ]
  edge [
    source 2050
    target 2175
    type "child"
  ]
  edge [
    source 2050
    target 2177
    type "child"
  ]
  edge [
    source 2050
    target 2178
    type "child"
  ]
  edge [
    source 2050
    target 2179
    type "child"
  ]
  edge [
    source 2050
    target 2180
    type "child"
  ]
  edge [
    source 2050
    target 2181
    type "child"
  ]
  edge [
    source 2050
    target 2182
    type "child"
  ]
  edge [
    source 2050
    target 2183
    type "child"
  ]
  edge [
    source 2050
    target 2184
    type "child"
  ]
  edge [
    source 2050
    target 2185
    type "child"
  ]
  edge [
    source 2056
    target 516
    type "link"
  ]
  edge [
    source 2057
    target 516
    type "link"
  ]
  edge [
    source 2058
    target 516
    type "link"
  ]
  edge [
    source 2059
    target 516
    type "link"
  ]
  edge [
    source 2060
    target 527
    type "link"
  ]
  edge [
    source 2061
    target 2062
    type "link"
  ]
  edge [
    source 2063
    target 2064
    type "link"
  ]
  edge [
    source 2065
    target 2066
    type "link"
  ]
  edge [
    source 2067
    target 73
    type "link"
  ]
  edge [
    source 2067
    target 2068
    type "link"
  ]
  edge [
    source 2067
    target 2069
    type "link"
  ]
  edge [
    source 2067
    target 2070
    type "link"
  ]
  edge [
    source 2073
    target 2074
    type "link"
  ]
  edge [
    source 2075
    target 2068
    type "link"
  ]
  edge [
    source 2075
    target 2069
    type "link"
  ]
  edge [
    source 2075
    target 2070
    type "link"
  ]
  edge [
    source 2076
    target 2068
    type "link"
  ]
  edge [
    source 2076
    target 2069
    type "link"
  ]
  edge [
    source 2076
    target 2070
    type "link"
  ]
  edge [
    source 2077
    target 2078
    type "link"
  ]
  edge [
    source 2077
    target 2079
    type "link"
  ]
  edge [
    source 2077
    target 2068
    type "link"
  ]
  edge [
    source 2077
    target 2069
    type "link"
  ]
  edge [
    source 2077
    target 2070
    type "link"
  ]
  edge [
    source 2080
    target 2078
    type "link"
  ]
  edge [
    source 2080
    target 2079
    type "link"
  ]
  edge [
    source 2080
    target 2068
    type "link"
  ]
  edge [
    source 2080
    target 2069
    type "link"
  ]
  edge [
    source 2080
    target 2070
    type "link"
  ]
  edge [
    source 2085
    target 2086
    type "link"
  ]
  edge [
    source 2088
    target 2089
    type "link"
  ]
  edge [
    source 2090
    target 2091
    type "link"
  ]
  edge [
    source 2090
    target 60
    type "link"
  ]
  edge [
    source 2090
    target 2092
    type "link"
  ]
  edge [
    source 2090
    target 2100
    type "link"
  ]
  edge [
    source 2092
    target 2093
    type "child"
  ]
  edge [
    source 2092
    target 2094
    type "child"
  ]
  edge [
    source 2092
    target 2095
    type "child"
  ]
  edge [
    source 2092
    target 2096
    type "child"
  ]
  edge [
    source 2092
    target 2097
    type "child"
  ]
  edge [
    source 2092
    target 2098
    type "child"
  ]
  edge [
    source 2092
    target 2099
    type "child"
  ]
  edge [
    source 2101
    target 2102
    type "link"
  ]
  edge [
    source 2103
    target 2104
    type "child"
  ]
  edge [
    source 2103
    target 2105
    type "child"
  ]
  edge [
    source 2103
    target 2106
    type "child"
  ]
  edge [
    source 2103
    target 2107
    type "child"
  ]
  edge [
    source 2103
    target 2108
    type "child"
  ]
  edge [
    source 2103
    target 2109
    type "child"
  ]
  edge [
    source 2103
    target 2110
    type "child"
  ]
  edge [
    source 2103
    target 2111
    type "child"
  ]
  edge [
    source 2103
    target 2112
    type "child"
  ]
  edge [
    source 2103
    target 2113
    type "child"
  ]
  edge [
    source 2103
    target 2114
    type "child"
  ]
  edge [
    source 2103
    target 2115
    type "child"
  ]
  edge [
    source 2103
    target 2117
    type "child"
  ]
  edge [
    source 2103
    target 2118
    type "child"
  ]
  edge [
    source 2103
    target 2119
    type "child"
  ]
  edge [
    source 2103
    target 2120
    type "child"
  ]
  edge [
    source 2103
    target 2122
    type "child"
  ]
  edge [
    source 2103
    target 2123
    type "child"
  ]
  edge [
    source 2103
    target 2124
    type "child"
  ]
  edge [
    source 2103
    target 2125
    type "child"
  ]
  edge [
    source 2103
    target 2126
    type "child"
  ]
  edge [
    source 2103
    target 2127
    type "child"
  ]
  edge [
    source 2103
    target 2128
    type "child"
  ]
  edge [
    source 2103
    target 2129
    type "child"
  ]
  edge [
    source 2103
    target 2130
    type "child"
  ]
  edge [
    source 2103
    target 2131
    type "child"
  ]
  edge [
    source 2103
    target 2132
    type "child"
  ]
  edge [
    source 2103
    target 2133
    type "child"
  ]
  edge [
    source 2103
    target 2134
    type "child"
  ]
  edge [
    source 2103
    target 2135
    type "child"
  ]
  edge [
    source 2103
    target 2137
    type "child"
  ]
  edge [
    source 2103
    target 2139
    type "child"
  ]
  edge [
    source 2103
    target 2141
    type "child"
  ]
  edge [
    source 2103
    target 2142
    type "child"
  ]
  edge [
    source 2103
    target 2143
    type "child"
  ]
  edge [
    source 2103
    target 2144
    type "child"
  ]
  edge [
    source 2103
    target 2145
    type "child"
  ]
  edge [
    source 2103
    target 2146
    type "child"
  ]
  edge [
    source 2103
    target 2147
    type "child"
  ]
  edge [
    source 2103
    target 2156
    type "child"
  ]
  edge [
    source 2103
    target 2158
    type "child"
  ]
  edge [
    source 2103
    target 2159
    type "child"
  ]
  edge [
    source 2103
    target 2160
    type "child"
  ]
  edge [
    source 2103
    target 2161
    type "child"
  ]
  edge [
    source 2103
    target 2162
    type "child"
  ]
  edge [
    source 2103
    target 2163
    type "child"
  ]
  edge [
    source 2103
    target 2164
    type "child"
  ]
  edge [
    source 2103
    target 2165
    type "child"
  ]
  edge [
    source 2103
    target 2166
    type "child"
  ]
  edge [
    source 2103
    target 2167
    type "child"
  ]
  edge [
    source 2108
    target 2102
    type "link"
  ]
  edge [
    source 2110
    target 2102
    type "link"
  ]
  edge [
    source 2110
    target 2091
    type "link"
  ]
  edge [
    source 2111
    target 2091
    type "link"
  ]
  edge [
    source 2115
    target 2116
    type "link"
  ]
  edge [
    source 2118
    target 2050
    type "link"
  ]
  edge [
    source 2118
    target 516
    type "link"
  ]
  edge [
    source 2120
    target 2121
    type "link"
  ]
  edge [
    source 2133
    target 2089
    type "link"
  ]
  edge [
    source 2134
    target 2050
    type "link"
  ]
  edge [
    source 2135
    target 2089
    type "link"
  ]
  edge [
    source 2135
    target 2136
    type "link"
  ]
  edge [
    source 2135
    target 2050
    type "link"
  ]
  edge [
    source 2137
    target 2138
    type "link"
  ]
  edge [
    source 2139
    target 2140
    type "link"
  ]
  edge [
    source 2141
    target 2140
    type "link"
  ]
  edge [
    source 2142
    target 2091
    type "link"
  ]
  edge [
    source 2142
    target 60
    type "link"
  ]
  edge [
    source 2143
    target 2091
    type "link"
  ]
  edge [
    source 2143
    target 60
    type "link"
  ]
  edge [
    source 2144
    target 2091
    type "link"
  ]
  edge [
    source 2144
    target 60
    type "link"
  ]
  edge [
    source 2147
    target 2148
    type "link"
  ]
  edge [
    source 2147
    target 73
    type "link"
  ]
  edge [
    source 2147
    target 2149
    type "link"
  ]
  edge [
    source 2147
    target 2155
    type "link"
  ]
  edge [
    source 2150
    target 2151
    type "child"
  ]
  edge [
    source 2150
    target 2152
    type "child"
  ]
  edge [
    source 2150
    target 2153
    type "child"
  ]
  edge [
    source 2150
    target 2154
    type "child"
  ]
  edge [
    source 2156
    target 73
    type "link"
  ]
  edge [
    source 2156
    target 2157
    type "link"
  ]
  edge [
    source 2158
    target 73
    type "link"
  ]
  edge [
    source 2158
    target 2116
    type "link"
  ]
  edge [
    source 2158
    target 2155
    type "link"
  ]
  edge [
    source 2159
    target 73
    type "link"
  ]
  edge [
    source 2159
    target 2116
    type "link"
  ]
  edge [
    source 2160
    target 73
    type "link"
  ]
  edge [
    source 2160
    target 2116
    type "link"
  ]
  edge [
    source 2160
    target 2155
    type "link"
  ]
  edge [
    source 2161
    target 73
    type "link"
  ]
  edge [
    source 2161
    target 2091
    type "link"
  ]
  edge [
    source 2161
    target 60
    type "link"
  ]
  edge [
    source 2161
    target 2149
    type "link"
  ]
  edge [
    source 2161
    target 2155
    type "link"
  ]
  edge [
    source 2162
    target 73
    type "link"
  ]
  edge [
    source 2162
    target 2091
    type "link"
  ]
  edge [
    source 2162
    target 60
    type "link"
  ]
  edge [
    source 2162
    target 2116
    type "link"
  ]
  edge [
    source 2163
    target 73
    type "link"
  ]
  edge [
    source 2163
    target 2091
    type "link"
  ]
  edge [
    source 2163
    target 60
    type "link"
  ]
  edge [
    source 2163
    target 2116
    type "link"
  ]
  edge [
    source 2167
    target 2091
    type "link"
  ]
  edge [
    source 2167
    target 60
    type "link"
  ]
  edge [
    source 2174
    target 2086
    type "link"
  ]
  edge [
    source 2175
    target 2086
    type "link"
  ]
  edge [
    source 2175
    target 2176
    type "link"
  ]
  edge [
    source 2186
    target 2038
    type "link"
  ]
  edge [
    source 2186
    target 2187
    type "link"
  ]
  edge [
    source 2186
    target 1286
    type "link"
  ]
  edge [
    source 2186
    target 2050
    type "link"
  ]
  edge [
    source 2186
    target 1759
    type "link"
  ]
  edge [
    source 2186
    target 2188
    type "link"
  ]
  edge [
    source 2188
    target 1107
    type "child"
  ]
  edge [
    source 2188
    target 2189
    type "child"
  ]
  edge [
    source 2188
    target 1164
    type "child"
  ]
  edge [
    source 2188
    target 2190
    type "child"
  ]
  edge [
    source 2188
    target 2191
    type "child"
  ]
  edge [
    source 2188
    target 2192
    type "child"
  ]
  edge [
    source 2188
    target 2193
    type "child"
  ]
  edge [
    source 2188
    target 1167
    type "child"
  ]
  edge [
    source 2188
    target 1168
    type "child"
  ]
  edge [
    source 2188
    target 1169
    type "child"
  ]
  edge [
    source 2188
    target 1170
    type "child"
  ]
  edge [
    source 2188
    target 1171
    type "child"
  ]
  edge [
    source 2188
    target 1019
    type "child"
  ]
  edge [
    source 2191
    target 1159
    type "link"
  ]
  edge [
    source 2191
    target 1160
    type "link"
  ]
  edge [
    source 2194
    target 1183
    type "link"
  ]
  edge [
    source 2194
    target 1759
    type "link"
  ]
  edge [
    source 2194
    target 2020
    type "link"
  ]
  edge [
    source 2198
    target 1739
    type "link"
  ]
  edge [
    source 2200
    target 2201
    type "link"
  ]
  edge [
    source 2200
    target 1735
    type "link"
  ]
  edge [
    source 2200
    target 2202
    type "link"
  ]
  edge [
    source 2200
    target 1286
    type "link"
  ]
  edge [
    source 2200
    target 2203
    type "link"
  ]
  edge [
    source 2200
    target 2204
    type "link"
  ]
  edge [
    source 2205
    target 2206
    type "link"
  ]
  edge [
    source 2205
    target 2207
    type "link"
  ]
  edge [
    source 2205
    target 1726
    type "link"
  ]
  edge [
    source 2207
    target 2208
    type "child"
  ]
  edge [
    source 2207
    target 2212
    type "child"
  ]
  edge [
    source 2207
    target 2213
    type "child"
  ]
  edge [
    source 2207
    target 2214
    type "child"
  ]
  edge [
    source 2207
    target 2216
    type "child"
  ]
  edge [
    source 2207
    target 2219
    type "child"
  ]
  edge [
    source 2207
    target 2220
    type "child"
  ]
  edge [
    source 2207
    target 2221
    type "child"
  ]
  edge [
    source 2207
    target 1714
    type "child"
  ]
  edge [
    source 2207
    target 2222
    type "child"
  ]
  edge [
    source 2207
    target 2223
    type "child"
  ]
  edge [
    source 2207
    target 2224
    type "child"
  ]
  edge [
    source 2207
    target 2226
    type "child"
  ]
  edge [
    source 2207
    target 2227
    type "child"
  ]
  edge [
    source 2207
    target 2229
    type "child"
  ]
  edge [
    source 2207
    target 2230
    type "child"
  ]
  edge [
    source 2207
    target 2232
    type "child"
  ]
  edge [
    source 2207
    target 1317
    type "child"
  ]
  edge [
    source 2207
    target 2233
    type "child"
  ]
  edge [
    source 2207
    target 1712
    type "child"
  ]
  edge [
    source 2207
    target 2235
    type "child"
  ]
  edge [
    source 2207
    target 2236
    type "child"
  ]
  edge [
    source 2207
    target 2238
    type "child"
  ]
  edge [
    source 2207
    target 2239
    type "child"
  ]
  edge [
    source 2207
    target 650
    type "child"
  ]
  edge [
    source 2207
    target 435
    type "child"
  ]
  edge [
    source 2207
    target 2241
    type "child"
  ]
  edge [
    source 2207
    target 192
    type "child"
  ]
  edge [
    source 2207
    target 2245
    type "child"
  ]
  edge [
    source 2207
    target 2246
    type "child"
  ]
  edge [
    source 2207
    target 2299
    type "child"
  ]
  edge [
    source 2207
    target 2355
    type "child"
  ]
  edge [
    source 2207
    target 2356
    type "child"
  ]
  edge [
    source 2207
    target 2357
    type "child"
  ]
  edge [
    source 2207
    target 2358
    type "child"
  ]
  edge [
    source 2207
    target 2359
    type "child"
  ]
  edge [
    source 2207
    target 2360
    type "child"
  ]
  edge [
    source 2207
    target 2361
    type "child"
  ]
  edge [
    source 2207
    target 2362
    type "child"
  ]
  edge [
    source 2207
    target 2363
    type "child"
  ]
  edge [
    source 2207
    target 2364
    type "child"
  ]
  edge [
    source 2207
    target 2365
    type "child"
  ]
  edge [
    source 2207
    target 2366
    type "child"
  ]
  edge [
    source 2207
    target 2367
    type "child"
  ]
  edge [
    source 2208
    target 2209
    type "link"
  ]
  edge [
    source 2208
    target 2210
    type "link"
  ]
  edge [
    source 2208
    target 2211
    type "link"
  ]
  edge [
    source 2209
    target 1778
    type "child"
  ]
  edge [
    source 2209
    target 1779
    type "child"
  ]
  edge [
    source 2209
    target 1780
    type "child"
  ]
  edge [
    source 2209
    target 1626
    type "child"
  ]
  edge [
    source 2214
    target 2215
    type "link"
  ]
  edge [
    source 2216
    target 2217
    type "link"
  ]
  edge [
    source 2216
    target 2218
    type "link"
  ]
  edge [
    source 2224
    target 2225
    type "link"
  ]
  edge [
    source 2227
    target 2228
    type "link"
  ]
  edge [
    source 2230
    target 2231
    type "link"
  ]
  edge [
    source 2236
    target 2237
    type "link"
  ]
  edge [
    source 2239
    target 2240
    type "link"
  ]
  edge [
    source 2241
    target 536
    type "link"
  ]
  edge [
    source 2241
    target 2242
    type "link"
  ]
  edge [
    source 2243
    target 2244
    type "child"
  ]
  edge [
    source 2244
    target 71
    type "link"
  ]
  edge [
    source 2245
    target 1437
    type "link"
  ]
  edge [
    source 2246
    target 2247
    type "link"
  ]
  edge [
    source 2248
    target 2249
    type "child"
  ]
  edge [
    source 2248
    target 2250
    type "child"
  ]
  edge [
    source 2248
    target 2251
    type "child"
  ]
  edge [
    source 2248
    target 2252
    type "child"
  ]
  edge [
    source 2248
    target 2253
    type "child"
  ]
  edge [
    source 2248
    target 2254
    type "child"
  ]
  edge [
    source 2248
    target 2255
    type "child"
  ]
  edge [
    source 2248
    target 1171
    type "child"
  ]
  edge [
    source 2248
    target 2256
    type "child"
  ]
  edge [
    source 2248
    target 2257
    type "child"
  ]
  edge [
    source 2248
    target 2258
    type "child"
  ]
  edge [
    source 2248
    target 2259
    type "child"
  ]
  edge [
    source 2248
    target 2260
    type "child"
  ]
  edge [
    source 2248
    target 2261
    type "child"
  ]
  edge [
    source 2248
    target 2262
    type "child"
  ]
  edge [
    source 2248
    target 2263
    type "child"
  ]
  edge [
    source 2248
    target 2264
    type "child"
  ]
  edge [
    source 2248
    target 1391
    type "child"
  ]
  edge [
    source 2248
    target 2265
    type "child"
  ]
  edge [
    source 2248
    target 1331
    type "child"
  ]
  edge [
    source 2248
    target 2266
    type "child"
  ]
  edge [
    source 2248
    target 2267
    type "child"
  ]
  edge [
    source 2248
    target 2268
    type "child"
  ]
  edge [
    source 2248
    target 2269
    type "child"
  ]
  edge [
    source 2248
    target 2270
    type "child"
  ]
  edge [
    source 2248
    target 2271
    type "child"
  ]
  edge [
    source 2248
    target 2272
    type "child"
  ]
  edge [
    source 2248
    target 2273
    type "child"
  ]
  edge [
    source 2248
    target 2274
    type "child"
  ]
  edge [
    source 2248
    target 2275
    type "child"
  ]
  edge [
    source 2248
    target 2276
    type "child"
  ]
  edge [
    source 2248
    target 2277
    type "child"
  ]
  edge [
    source 2248
    target 2278
    type "child"
  ]
  edge [
    source 2248
    target 2279
    type "child"
  ]
  edge [
    source 2248
    target 1665
    type "child"
  ]
  edge [
    source 2248
    target 2280
    type "child"
  ]
  edge [
    source 2248
    target 2281
    type "child"
  ]
  edge [
    source 2248
    target 2282
    type "child"
  ]
  edge [
    source 2248
    target 2283
    type "child"
  ]
  edge [
    source 2248
    target 2284
    type "child"
  ]
  edge [
    source 2248
    target 2285
    type "child"
  ]
  edge [
    source 2248
    target 2286
    type "child"
  ]
  edge [
    source 2248
    target 2287
    type "child"
  ]
  edge [
    source 2248
    target 2288
    type "child"
  ]
  edge [
    source 2248
    target 2289
    type "child"
  ]
  edge [
    source 2248
    target 2290
    type "child"
  ]
  edge [
    source 2248
    target 2291
    type "child"
  ]
  edge [
    source 2248
    target 2292
    type "child"
  ]
  edge [
    source 2248
    target 2293
    type "child"
  ]
  edge [
    source 2248
    target 2294
    type "child"
  ]
  edge [
    source 2248
    target 2295
    type "child"
  ]
  edge [
    source 2248
    target 2296
    type "child"
  ]
  edge [
    source 2248
    target 2297
    type "child"
  ]
  edge [
    source 2248
    target 2298
    type "child"
  ]
  edge [
    source 2299
    target 2300
    type "link"
  ]
  edge [
    source 2301
    target 2302
    type "child"
  ]
  edge [
    source 2301
    target 2303
    type "child"
  ]
  edge [
    source 2301
    target 2304
    type "child"
  ]
  edge [
    source 2301
    target 2305
    type "child"
  ]
  edge [
    source 2301
    target 2306
    type "child"
  ]
  edge [
    source 2301
    target 2307
    type "child"
  ]
  edge [
    source 2301
    target 2308
    type "child"
  ]
  edge [
    source 2301
    target 2310
    type "child"
  ]
  edge [
    source 2301
    target 2311
    type "child"
  ]
  edge [
    source 2301
    target 2312
    type "child"
  ]
  edge [
    source 2301
    target 2313
    type "child"
  ]
  edge [
    source 2301
    target 2314
    type "child"
  ]
  edge [
    source 2301
    target 1164
    type "child"
  ]
  edge [
    source 2301
    target 2315
    type "child"
  ]
  edge [
    source 2301
    target 1379
    type "child"
  ]
  edge [
    source 2301
    target 1331
    type "child"
  ]
  edge [
    source 2301
    target 2316
    type "child"
  ]
  edge [
    source 2301
    target 2317
    type "child"
  ]
  edge [
    source 2301
    target 2318
    type "child"
  ]
  edge [
    source 2301
    target 2319
    type "child"
  ]
  edge [
    source 2301
    target 2320
    type "child"
  ]
  edge [
    source 2301
    target 2321
    type "child"
  ]
  edge [
    source 2301
    target 2322
    type "child"
  ]
  edge [
    source 2301
    target 2323
    type "child"
  ]
  edge [
    source 2301
    target 2324
    type "child"
  ]
  edge [
    source 2301
    target 2325
    type "child"
  ]
  edge [
    source 2301
    target 2326
    type "child"
  ]
  edge [
    source 2301
    target 2327
    type "child"
  ]
  edge [
    source 2301
    target 2328
    type "child"
  ]
  edge [
    source 2301
    target 2329
    type "child"
  ]
  edge [
    source 2301
    target 2330
    type "child"
  ]
  edge [
    source 2301
    target 2279
    type "child"
  ]
  edge [
    source 2301
    target 1665
    type "child"
  ]
  edge [
    source 2301
    target 2280
    type "child"
  ]
  edge [
    source 2301
    target 2331
    type "child"
  ]
  edge [
    source 2301
    target 2332
    type "child"
  ]
  edge [
    source 2301
    target 2333
    type "child"
  ]
  edge [
    source 2301
    target 2334
    type "child"
  ]
  edge [
    source 2301
    target 2335
    type "child"
  ]
  edge [
    source 2301
    target 2336
    type "child"
  ]
  edge [
    source 2301
    target 2337
    type "child"
  ]
  edge [
    source 2301
    target 2338
    type "child"
  ]
  edge [
    source 2301
    target 2339
    type "child"
  ]
  edge [
    source 2301
    target 2340
    type "child"
  ]
  edge [
    source 2301
    target 2341
    type "child"
  ]
  edge [
    source 2301
    target 2342
    type "child"
  ]
  edge [
    source 2301
    target 2343
    type "child"
  ]
  edge [
    source 2301
    target 2344
    type "child"
  ]
  edge [
    source 2301
    target 2345
    type "child"
  ]
  edge [
    source 2301
    target 2346
    type "child"
  ]
  edge [
    source 2301
    target 2347
    type "child"
  ]
  edge [
    source 2301
    target 2348
    type "child"
  ]
  edge [
    source 2301
    target 2349
    type "child"
  ]
  edge [
    source 2301
    target 2350
    type "child"
  ]
  edge [
    source 2301
    target 2351
    type "child"
  ]
  edge [
    source 2301
    target 2352
    type "child"
  ]
  edge [
    source 2301
    target 2353
    type "child"
  ]
  edge [
    source 2301
    target 2354
    type "child"
  ]
  edge [
    source 2308
    target 2309
    type "link"
  ]
  edge [
    source 2309
    target 1626
    type "child"
  ]
  edge [
    source 2369
    target 2370
    type "link"
  ]
  edge [
    source 2369
    target 2371
    type "link"
  ]
  edge [
    source 2369
    target 1759
    type "link"
  ]
  edge [
    source 2372
    target 2371
    type "link"
  ]
  edge [
    source 2372
    target 1792
    type "link"
  ]
  edge [
    source 2372
    target 2373
    type "link"
  ]
  edge [
    source 2372
    target 1795
    type "link"
  ]
  edge [
    source 2374
    target 1759
    type "link"
  ]
  edge [
    source 2374
    target 1795
    type "link"
  ]
  edge [
    source 2374
    target 1819
    type "link"
  ]
  edge [
    source 2375
    target 1759
    type "link"
  ]
  edge [
    source 2375
    target 1795
    type "link"
  ]
  edge [
    source 2375
    target 1819
    type "link"
  ]
  edge [
    source 2376
    target 1789
    type "link"
  ]
  edge [
    source 2376
    target 1759
    type "link"
  ]
  edge [
    source 2376
    target 1792
    type "link"
  ]
  edge [
    source 2376
    target 1795
    type "link"
  ]
  edge [
    source 2376
    target 1810
    type "link"
  ]
  edge [
    source 2377
    target 1759
    type "link"
  ]
  edge [
    source 2377
    target 2378
    type "link"
  ]
  edge [
    source 2379
    target 1903
    type "link"
  ]
  edge [
    source 2379
    target 1795
    type "link"
  ]
  edge [
    source 2380
    target 2381
    type "link"
  ]
  edge [
    source 2380
    target 2382
    type "link"
  ]
  edge [
    source 2380
    target 1795
    type "link"
  ]
  edge [
    source 2383
    target 2382
    type "link"
  ]
  edge [
    source 2383
    target 2384
    type "link"
  ]
  edge [
    source 2383
    target 1795
    type "link"
  ]
  edge [
    source 2385
    target 1792
    type "link"
  ]
  edge [
    source 2385
    target 2386
    type "link"
  ]
  edge [
    source 2387
    target 2388
    type "link"
  ]
  edge [
    source 2387
    target 1792
    type "link"
  ]
  edge [
    source 2387
    target 2386
    type "link"
  ]
  edge [
    source 2389
    target 2390
    type "link"
  ]
  edge [
    source 2391
    target 2382
    type "link"
  ]
  edge [
    source 2391
    target 2392
    type "link"
  ]
  edge [
    source 2391
    target 1759
    type "link"
  ]
  edge [
    source 2391
    target 1795
    type "link"
  ]
  edge [
    source 2393
    target 2394
    type "link"
  ]
  edge [
    source 2393
    target 1795
    type "link"
  ]
  edge [
    source 2395
    target 1759
    type "link"
  ]
  edge [
    source 2395
    target 1939
    type "link"
  ]
  edge [
    source 2396
    target 1782
    type "link"
  ]
  edge [
    source 2396
    target 1759
    type "link"
  ]
  edge [
    source 2397
    target 2398
    type "link"
  ]
  edge [
    source 2397
    target 1759
    type "link"
  ]
  edge [
    source 2397
    target 1512
    type "link"
  ]
  edge [
    source 2397
    target 2399
    type "link"
  ]
  edge [
    source 2400
    target 2401
    type "link"
  ]
  edge [
    source 2400
    target 2000
    type "link"
  ]
  edge [
    source 2400
    target 1790
    type "link"
  ]
  edge [
    source 2400
    target 2402
    type "link"
  ]
  edge [
    source 2400
    target 1759
    type "link"
  ]
  edge [
    source 2400
    target 2403
    type "link"
  ]
  edge [
    source 2400
    target 2001
    type "link"
  ]
  edge [
    source 2400
    target 1787
    type "link"
  ]
  edge [
    source 2400
    target 1795
    type "link"
  ]
  edge [
    source 2400
    target 2404
    type "link"
  ]
  edge [
    source 2405
    target 2406
    type "link"
  ]
  edge [
    source 2407
    target 1986
    type "link"
  ]
  edge [
    source 2407
    target 1759
    type "link"
  ]
  edge [
    source 2408
    target 1986
    type "link"
  ]
  edge [
    source 2408
    target 1759
    type "link"
  ]
  edge [
    source 2409
    target 1795
    type "link"
  ]
  edge [
    source 2409
    target 2410
    type "link"
  ]
  edge [
    source 2411
    target 1729
    type "link"
  ]
  edge [
    source 2411
    target 2207
    type "link"
  ]
  edge [
    source 2411
    target 2412
    type "link"
  ]
  edge [
    source 2411
    target 2413
    type "link"
  ]
  edge [
    source 2411
    target 2204
    type "link"
  ]
  edge [
    source 2411
    target 1736
    type "link"
  ]
  edge [
    source 2414
    target 1735
    type "link"
  ]
  edge [
    source 2414
    target 1729
    type "link"
  ]
  edge [
    source 2414
    target 2207
    type "link"
  ]
  edge [
    source 2414
    target 1286
    type "link"
  ]
  edge [
    source 2415
    target 1735
    type "link"
  ]
  edge [
    source 2415
    target 1727
    type "link"
  ]
  edge [
    source 2415
    target 2207
    type "link"
  ]
  edge [
    source 2416
    target 2203
    type "link"
  ]
  edge [
    source 2416
    target 1729
    type "link"
  ]
  edge [
    source 2417
    target 1726
    type "link"
  ]
  edge [
    source 2417
    target 1729
    type "link"
  ]
  edge [
    source 2417
    target 2207
    type "link"
  ]
  edge [
    source 2417
    target 2418
    type "link"
  ]
  edge [
    source 2417
    target 2419
    type "link"
  ]
  edge [
    source 2417
    target 1706
    type "link"
  ]
  edge [
    source 2424
    target 2425
    type "link"
  ]
  edge [
    source 2427
    target 2428
    type "link"
  ]
  edge [
    source 2429
    target 2430
    type "link"
  ]
  edge [
    source 2432
    target 2433
    type "link"
  ]
  edge [
    source 2435
    target 2436
    type "link"
  ]
  edge [
    source 2438
    target 2439
    type "link"
  ]
  edge [
    source 2438
    target 2440
    type "link"
  ]
  edge [
    source 2438
    target 2441
    type "link"
  ]
  edge [
    source 2442
    target 2443
    type "link"
  ]
  edge [
    source 2444
    target 2445
    type "link"
  ]
  edge [
    source 2444
    target 2441
    type "link"
  ]
  edge [
    source 2446
    target 2445
    type "link"
  ]
  edge [
    source 2446
    target 2447
    type "link"
  ]
  edge [
    source 2448
    target 2449
    type "link"
  ]
  edge [
    source 2448
    target 2450
    type "link"
  ]
  edge [
    source 2448
    target 2440
    type "link"
  ]
  edge [
    source 2448
    target 1939
    type "link"
  ]
  edge [
    source 2448
    target 2443
    type "link"
  ]
  edge [
    source 2448
    target 2425
    type "link"
  ]
  edge [
    source 2451
    target 2452
    type "link"
  ]
  edge [
    source 2451
    target 2456
    type "link"
  ]
  edge [
    source 2451
    target 2207
    type "link"
  ]
  edge [
    source 2451
    target 1706
    type "link"
  ]
  edge [
    source 2451
    target 2418
    type "link"
  ]
  edge [
    source 2453
    target 2454
    type "child"
  ]
  edge [
    source 2453
    target 2455
    type "child"
  ]
  edge [
    source 2454
    target 1726
    type "link"
  ]
  edge [
    source 2454
    target 1776
    type "link"
  ]
  edge [
    source 2454
    target 1736
    type "link"
  ]
  edge [
    source 2454
    target 1724
    type "link"
  ]
  edge [
    source 2455
    target 1726
    type "link"
  ]
  edge [
    source 2455
    target 1729
    type "link"
  ]
  edge [
    source 2455
    target 2207
    type "link"
  ]
  edge [
    source 2455
    target 2418
    type "link"
  ]
  edge [
    source 2455
    target 1724
    type "link"
  ]
  edge [
    source 2455
    target 2419
    type "link"
  ]
  edge [
    source 2455
    target 1706
    type "link"
  ]
  edge [
    source 2457
    target 1904
    type "link"
  ]
  edge [
    source 2457
    target 2450
    type "link"
  ]
  edge [
    source 2458
    target 1904
    type "link"
  ]
  edge [
    source 2458
    target 2456
    type "link"
  ]
  edge [
    source 2458
    target 1759
    type "link"
  ]
  edge [
    source 2458
    target 2450
    type "link"
  ]
  edge [
    source 2458
    target 1885
    type "link"
  ]
  edge [
    source 2458
    target 1939
    type "link"
  ]
  edge [
    source 2459
    target 2449
    type "link"
  ]
  edge [
    source 2459
    target 1706
    type "link"
  ]
  edge [
    source 2460
    target 2461
    type "link"
  ]
  edge [
    source 2460
    target 2463
    type "link"
  ]
  edge [
    source 2460
    target 2462
    type "link"
  ]
  edge [
    source 2460
    target 1759
    type "link"
  ]
  edge [
    source 2464
    target 2465
    type "child"
  ]
  edge [
    source 2464
    target 2466
    type "child"
  ]
  edge [
    source 2464
    target 2467
    type "child"
  ]
  edge [
    source 2467
    target 2461
    type "link"
  ]
  edge [
    source 2467
    target 2462
    type "link"
  ]
  edge [
    source 2467
    target 1724
    type "link"
  ]
  edge [
    source 2468
    target 1759
    type "link"
  ]
  edge [
    source 2468
    target 2469
    type "link"
  ]
  edge [
    source 2470
    target 2440
    type "link"
  ]
  edge [
    source 2471
    target 2449
    type "link"
  ]
  edge [
    source 2472
    target 73
    type "link"
  ]
  edge [
    source 2472
    target 1939
    type "link"
  ]
  edge [
    source 2474
    target 1736
    type "link"
  ]
  edge [
    source 2474
    target 2195
    type "link"
  ]
  edge [
    source 2476
    target 1361
    type "link"
  ]
  edge [
    source 2477
    target 1361
    type "link"
  ]
  edge [
    source 2478
    target 1361
    type "link"
  ]
  edge [
    source 2479
    target 1361
    type "link"
  ]
  edge [
    source 2479
    target 1986
    type "link"
  ]
  edge [
    source 2480
    target 1361
    type "link"
  ]
  edge [
    source 2480
    target 1986
    type "link"
  ]
  edge [
    source 2481
    target 1361
    type "link"
  ]
  edge [
    source 2482
    target 1361
    type "link"
  ]
  edge [
    source 2482
    target 1986
    type "link"
  ]
  edge [
    source 2483
    target 1361
    type "link"
  ]
  edge [
    source 2483
    target 1986
    type "link"
  ]
  edge [
    source 2484
    target 1361
    type "link"
  ]
  edge [
    source 2484
    target 1863
    type "link"
  ]
  edge [
    source 2485
    target 1361
    type "link"
  ]
  edge [
    source 2485
    target 1921
    type "link"
  ]
  edge [
    source 2485
    target 1783
    type "link"
  ]
  edge [
    source 2485
    target 1380
    type "link"
  ]
  edge [
    source 2486
    target 1361
    type "link"
  ]
  edge [
    source 2486
    target 2386
    type "link"
  ]
  edge [
    source 2486
    target 1863
    type "link"
  ]
  edge [
    source 2487
    target 1783
    type "link"
  ]
  edge [
    source 2487
    target 1759
    type "link"
  ]
  edge [
    source 2488
    target 2489
    type "link"
  ]
  edge [
    source 2488
    target 1321
    type "link"
  ]
  edge [
    source 2488
    target 1759
    type "link"
  ]
  edge [
    source 2490
    target 2491
    type "child"
  ]
  edge [
    source 2492
    target 1783
    type "link"
  ]
  edge [
    source 2492
    target 1759
    type "link"
  ]
  edge [
    source 2492
    target 2493
    type "link"
  ]
  edge [
    source 2494
    target 1759
    type "link"
  ]
  edge [
    source 2494
    target 2495
    type "link"
  ]
  edge [
    source 2494
    target 2490
    type "link"
  ]
  edge [
    source 2496
    target 1759
    type "link"
  ]
  edge [
    source 2496
    target 2495
    type "link"
  ]
  edge [
    source 2496
    target 1321
    type "link"
  ]
  edge [
    source 2497
    target 2498
    type "child"
  ]
  edge [
    source 2499
    target 1361
    type "link"
  ]
  edge [
    source 2500
    target 1361
    type "link"
  ]
  edge [
    source 2501
    target 2394
    type "link"
  ]
  edge [
    source 2501
    target 1361
    type "link"
  ]
  edge [
    source 2501
    target 1783
    type "link"
  ]
  edge [
    source 2502
    target 1361
    type "link"
  ]
  edge [
    source 2502
    target 2503
    type "link"
  ]
  edge [
    source 2504
    target 1361
    type "link"
  ]
  edge [
    source 2505
    target 1361
    type "link"
  ]
  edge [
    source 2505
    target 1783
    type "link"
  ]
  edge [
    source 2506
    target 1361
    type "link"
  ]
  edge [
    source 2507
    target 1361
    type "link"
  ]
  edge [
    source 2507
    target 1783
    type "link"
  ]
  edge [
    source 2508
    target 1361
    type "link"
  ]
  edge [
    source 2509
    target 1361
    type "link"
  ]
  edge [
    source 2509
    target 1783
    type "link"
  ]
  edge [
    source 2510
    target 1361
    type "link"
  ]
  edge [
    source 2511
    target 1361
    type "link"
  ]
  edge [
    source 2513
    target 1759
    type "link"
  ]
  edge [
    source 2513
    target 1512
    type "link"
  ]
  edge [
    source 2514
    target 1759
    type "link"
  ]
  edge [
    source 2514
    target 2515
    type "link"
  ]
  edge [
    source 2514
    target 1512
    type "link"
  ]
  edge [
    source 2516
    target 2517
    type "link"
  ]
  edge [
    source 2516
    target 1759
    type "link"
  ]
  edge [
    source 2516
    target 1512
    type "link"
  ]
  edge [
    source 2518
    target 1361
    type "link"
  ]
  edge [
    source 2518
    target 2519
    type "link"
  ]
  edge [
    source 2520
    target 1361
    type "link"
  ]
  edge [
    source 2520
    target 2521
    type "link"
  ]
  edge [
    source 2520
    target 1783
    type "link"
  ]
  edge [
    source 2526
    target 1726
    type "link"
  ]
  edge [
    source 2526
    target 2523
    type "link"
  ]
  edge [
    source 2526
    target 1706
    type "link"
  ]
  edge [
    source 2526
    target 1724
    type "link"
  ]
  edge [
    source 2529
    target 2530
    type "link"
  ]
  edge [
    source 2535
    target 1361
    type "link"
  ]
  edge [
    source 2535
    target 194
    type "link"
  ]
  edge [
    source 2535
    target 1583
    type "link"
  ]
  edge [
    source 2536
    target 2449
    type "link"
  ]
  edge [
    source 2536
    target 1361
    type "link"
  ]
  edge [
    source 2536
    target 400
    type "link"
  ]
  edge [
    source 2536
    target 194
    type "link"
  ]
  edge [
    source 2536
    target 1583
    type "link"
  ]
  edge [
    source 2536
    target 536
    type "link"
  ]
  edge [
    source 2536
    target 2537
    type "link"
  ]
  edge [
    source 2536
    target 2538
    type "link"
  ]
  edge [
    source 2546
    target 1097
    type "link"
  ]
  edge [
    source 2546
    target 1219
    type "link"
  ]
  edge [
    source 2546
    target 2527
    type "link"
  ]
  edge [
    source 2547
    target 1097
    type "link"
  ]
  edge [
    source 2547
    target 1219
    type "link"
  ]
  edge [
    source 2547
    target 2527
    type "link"
  ]
  edge [
    source 2547
    target 2548
    type "link"
  ]
  edge [
    source 2549
    target 2550
    type "link"
  ]
  edge [
    source 2550
    target 2551
    type "child"
  ]
  edge [
    source 2550
    target 2552
    type "child"
  ]
  edge [
    source 2570
    target 2571
    type "link"
  ]
  edge [
    source 2572
    target 2573
    type "link"
  ]
  edge [
    source 2574
    target 2575
    type "child"
  ]
  edge [
    source 2574
    target 2587
    type "child"
  ]
  edge [
    source 2574
    target 2589
    type "child"
  ]
  edge [
    source 2574
    target 2590
    type "child"
  ]
  edge [
    source 2574
    target 2591
    type "child"
  ]
  edge [
    source 2574
    target 2592
    type "child"
  ]
  edge [
    source 2574
    target 2593
    type "child"
  ]
  edge [
    source 2574
    target 2594
    type "child"
  ]
  edge [
    source 2574
    target 2595
    type "child"
  ]
  edge [
    source 2574
    target 2596
    type "child"
  ]
  edge [
    source 2574
    target 2597
    type "child"
  ]
  edge [
    source 2574
    target 2599
    type "child"
  ]
  edge [
    source 2574
    target 2601
    type "child"
  ]
  edge [
    source 2574
    target 2603
    type "child"
  ]
  edge [
    source 2574
    target 2604
    type "child"
  ]
  edge [
    source 2574
    target 2608
    type "child"
  ]
  edge [
    source 2574
    target 2609
    type "child"
  ]
  edge [
    source 2574
    target 2611
    type "child"
  ]
  edge [
    source 2574
    target 2612
    type "child"
  ]
  edge [
    source 2574
    target 2614
    type "child"
  ]
  edge [
    source 2574
    target 2615
    type "child"
  ]
  edge [
    source 2574
    target 435
    type "child"
  ]
  edge [
    source 2574
    target 884
    type "child"
  ]
  edge [
    source 2574
    target 748
    type "child"
  ]
  edge [
    source 2574
    target 2618
    type "child"
  ]
  edge [
    source 2574
    target 2619
    type "child"
  ]
  edge [
    source 2574
    target 2620
    type "child"
  ]
  edge [
    source 2574
    target 2621
    type "child"
  ]
  edge [
    source 2574
    target 2622
    type "child"
  ]
  edge [
    source 2574
    target 2623
    type "child"
  ]
  edge [
    source 2574
    target 2624
    type "child"
  ]
  edge [
    source 2574
    target 2625
    type "child"
  ]
  edge [
    source 2574
    target 2626
    type "child"
  ]
  edge [
    source 2574
    target 2627
    type "child"
  ]
  edge [
    source 2574
    target 2628
    type "child"
  ]
  edge [
    source 2574
    target 2630
    type "child"
  ]
  edge [
    source 2574
    target 2631
    type "child"
  ]
  edge [
    source 2574
    target 2634
    type "child"
  ]
  edge [
    source 2574
    target 2635
    type "child"
  ]
  edge [
    source 2574
    target 2636
    type "child"
  ]
  edge [
    source 2575
    target 2576
    type "link"
  ]
  edge [
    source 2575
    target 2577
    type "link"
  ]
  edge [
    source 2575
    target 2584
    type "link"
  ]
  edge [
    source 2575
    target 2585
    type "link"
  ]
  edge [
    source 2575
    target 2578
    type "link"
  ]
  edge [
    source 2575
    target 2586
    type "link"
  ]
  edge [
    source 2578
    target 2579
    type "child"
  ]
  edge [
    source 2578
    target 2580
    type "child"
  ]
  edge [
    source 2578
    target 2581
    type "child"
  ]
  edge [
    source 2578
    target 2582
    type "child"
  ]
  edge [
    source 2578
    target 1089
    type "child"
  ]
  edge [
    source 2578
    target 1090
    type "child"
  ]
  edge [
    source 2587
    target 2588
    type "link"
  ]
  edge [
    source 2591
    target 2576
    type "link"
  ]
  edge [
    source 2592
    target 2576
    type "link"
  ]
  edge [
    source 2594
    target 2588
    type "link"
  ]
  edge [
    source 2597
    target 1029
    type "link"
  ]
  edge [
    source 2597
    target 2598
    type "link"
  ]
  edge [
    source 2599
    target 2600
    type "link"
  ]
  edge [
    source 2601
    target 1029
    type "link"
  ]
  edge [
    source 2601
    target 2602
    type "link"
  ]
  edge [
    source 2604
    target 2605
    type "link"
  ]
  edge [
    source 2604
    target 1029
    type "link"
  ]
  edge [
    source 2604
    target 2606
    type "link"
  ]
  edge [
    source 2604
    target 2607
    type "link"
  ]
  edge [
    source 2608
    target 2605
    type "link"
  ]
  edge [
    source 2608
    target 2607
    type "link"
  ]
  edge [
    source 2609
    target 2610
    type "link"
  ]
  edge [
    source 2609
    target 1029
    type "link"
  ]
  edge [
    source 2612
    target 2613
    type "link"
  ]
  edge [
    source 2612
    target 1029
    type "link"
  ]
  edge [
    source 2615
    target 1029
    type "link"
  ]
  edge [
    source 2615
    target 2616
    type "link"
  ]
  edge [
    source 2615
    target 2617
    type "link"
  ]
  edge [
    source 2628
    target 2629
    type "link"
  ]
  edge [
    source 2631
    target 2632
    type "link"
  ]
  edge [
    source 2631
    target 2633
    type "link"
  ]
  edge [
    source 2634
    target 2632
    type "link"
  ]
  edge [
    source 2634
    target 2633
    type "link"
  ]
  edge [
    source 2637
    target 532
    type "link"
  ]
  edge [
    source 2638
    target 536
    type "link"
  ]
  edge [
    source 2638
    target 891
    type "link"
  ]
  edge [
    source 2638
    target 54
    type "link"
  ]
  edge [
    source 2638
    target 2639
    type "link"
  ]
  edge [
    source 2638
    target 2574
    type "link"
  ]
  edge [
    source 2640
    target 2641
    type "link"
  ]
  edge [
    source 2650
    target 2651
    type "link"
  ]
  edge [
    source 2652
    target 2651
    type "link"
  ]
  edge [
    source 2657
    target 2658
    type "link"
  ]
  edge [
    source 2659
    target 2660
    type "link"
  ]
  edge [
    source 2661
    target 529
    type "link"
  ]
  edge [
    source 2662
    target 2074
    type "link"
  ]
  edge [
    source 2663
    target 2664
    type "link"
  ]
  edge [
    source 2663
    target 2069
    type "link"
  ]
  edge [
    source 2663
    target 2070
    type "link"
  ]
  edge [
    source 2665
    target 2664
    type "link"
  ]
  edge [
    source 2665
    target 2069
    type "link"
  ]
  edge [
    source 2665
    target 2070
    type "link"
  ]
  edge [
    source 2666
    target 2078
    type "link"
  ]
  edge [
    source 2666
    target 2079
    type "link"
  ]
  edge [
    source 2666
    target 2664
    type "link"
  ]
  edge [
    source 2666
    target 2069
    type "link"
  ]
  edge [
    source 2666
    target 2070
    type "link"
  ]
  edge [
    source 2667
    target 2078
    type "link"
  ]
  edge [
    source 2667
    target 2079
    type "link"
  ]
  edge [
    source 2667
    target 2664
    type "link"
  ]
  edge [
    source 2667
    target 2069
    type "link"
  ]
  edge [
    source 2667
    target 2070
    type "link"
  ]
  edge [
    source 2673
    target 2674
    type "link"
  ]
  edge [
    source 2678
    target 2679
    type "link"
  ]
  edge [
    source 2684
    target 2685
    type "link"
  ]
  edge [
    source 2686
    target 2176
    type "link"
  ]
  edge [
    source 2686
    target 2685
    type "link"
  ]
  edge [
    source 2696
    target 509
    type "link"
  ]
  edge [
    source 2697
    target 2698
    type "link"
  ]
  edge [
    source 2698
    target 2699
    type "child"
  ]
  edge [
    source 2698
    target 2700
    type "child"
  ]
  edge [
    source 2698
    target 2701
    type "child"
  ]
  edge [
    source 2698
    target 2702
    type "child"
  ]
  edge [
    source 2698
    target 2703
    type "child"
  ]
  edge [
    source 2698
    target 2704
    type "child"
  ]
  edge [
    source 2698
    target 2705
    type "child"
  ]
  edge [
    source 2698
    target 2706
    type "child"
  ]
  edge [
    source 2698
    target 2707
    type "child"
  ]
  edge [
    source 2698
    target 2708
    type "child"
  ]
  edge [
    source 2698
    target 2709
    type "child"
  ]
  edge [
    source 2698
    target 2711
    type "child"
  ]
  edge [
    source 2698
    target 2712
    type "child"
  ]
  edge [
    source 2698
    target 2713
    type "child"
  ]
  edge [
    source 2698
    target 2714
    type "child"
  ]
  edge [
    source 2698
    target 2715
    type "child"
  ]
  edge [
    source 2698
    target 2716
    type "child"
  ]
  edge [
    source 2698
    target 2717
    type "child"
  ]
  edge [
    source 2698
    target 2718
    type "child"
  ]
  edge [
    source 2698
    target 2719
    type "child"
  ]
  edge [
    source 2698
    target 2721
    type "child"
  ]
  edge [
    source 2698
    target 2722
    type "child"
  ]
  edge [
    source 2698
    target 2723
    type "child"
  ]
  edge [
    source 2698
    target 2170
    type "child"
  ]
  edge [
    source 2698
    target 2678
    type "child"
  ]
  edge [
    source 2698
    target 2724
    type "child"
  ]
  edge [
    source 2698
    target 2725
    type "child"
  ]
  edge [
    source 2698
    target 2726
    type "child"
  ]
  edge [
    source 2698
    target 2727
    type "child"
  ]
  edge [
    source 2698
    target 2728
    type "child"
  ]
  edge [
    source 2698
    target 2730
    type "child"
  ]
  edge [
    source 2698
    target 2731
    type "child"
  ]
  edge [
    source 2698
    target 2732
    type "child"
  ]
  edge [
    source 2698
    target 2733
    type "child"
  ]
  edge [
    source 2698
    target 2688
    type "child"
  ]
  edge [
    source 2698
    target 2734
    type "child"
  ]
  edge [
    source 2698
    target 2735
    type "child"
  ]
  edge [
    source 2698
    target 2736
    type "child"
  ]
  edge [
    source 2698
    target 2737
    type "child"
  ]
  edge [
    source 2698
    target 2738
    type "child"
  ]
  edge [
    source 2698
    target 2739
    type "child"
  ]
  edge [
    source 2698
    target 2740
    type "child"
  ]
  edge [
    source 2698
    target 2741
    type "child"
  ]
  edge [
    source 2698
    target 2742
    type "child"
  ]
  edge [
    source 2704
    target 516
    type "link"
  ]
  edge [
    source 2705
    target 527
    type "link"
  ]
  edge [
    source 2708
    target 2074
    type "link"
  ]
  edge [
    source 2709
    target 2710
    type "link"
  ]
  edge [
    source 2709
    target 2069
    type "link"
  ]
  edge [
    source 2709
    target 2070
    type "link"
  ]
  edge [
    source 2711
    target 2710
    type "link"
  ]
  edge [
    source 2711
    target 2069
    type "link"
  ]
  edge [
    source 2711
    target 2070
    type "link"
  ]
  edge [
    source 2712
    target 2710
    type "link"
  ]
  edge [
    source 2712
    target 2078
    type "link"
  ]
  edge [
    source 2712
    target 2079
    type "link"
  ]
  edge [
    source 2712
    target 2069
    type "link"
  ]
  edge [
    source 2712
    target 2070
    type "link"
  ]
  edge [
    source 2713
    target 2710
    type "link"
  ]
  edge [
    source 2713
    target 2078
    type "link"
  ]
  edge [
    source 2713
    target 2079
    type "link"
  ]
  edge [
    source 2713
    target 2069
    type "link"
  ]
  edge [
    source 2713
    target 2070
    type "link"
  ]
  edge [
    source 2719
    target 2720
    type "link"
  ]
  edge [
    source 2728
    target 2729
    type "link"
  ]
  edge [
    source 2730
    target 2176
    type "link"
  ]
  edge [
    source 2730
    target 2729
    type "link"
  ]
  edge [
    source 2743
    target 2698
    type "link"
  ]
  edge [
    source 2744
    target 2745
    type "link"
  ]
  edge [
    source 2745
    target 2746
    type "child"
  ]
  edge [
    source 2745
    target 2747
    type "child"
  ]
  edge [
    source 2745
    target 2748
    type "child"
  ]
  edge [
    source 2745
    target 2749
    type "child"
  ]
  edge [
    source 2745
    target 2750
    type "child"
  ]
  edge [
    source 2745
    target 2751
    type "child"
  ]
  edge [
    source 2745
    target 2752
    type "child"
  ]
  edge [
    source 2745
    target 2753
    type "child"
  ]
  edge [
    source 2745
    target 2754
    type "child"
  ]
  edge [
    source 2745
    target 2755
    type "child"
  ]
  edge [
    source 2745
    target 2756
    type "child"
  ]
  edge [
    source 2745
    target 2758
    type "child"
  ]
  edge [
    source 2745
    target 2759
    type "child"
  ]
  edge [
    source 2745
    target 2760
    type "child"
  ]
  edge [
    source 2745
    target 2761
    type "child"
  ]
  edge [
    source 2745
    target 2762
    type "child"
  ]
  edge [
    source 2745
    target 2763
    type "child"
  ]
  edge [
    source 2745
    target 2764
    type "child"
  ]
  edge [
    source 2745
    target 2765
    type "child"
  ]
  edge [
    source 2745
    target 2766
    type "child"
  ]
  edge [
    source 2745
    target 2768
    type "child"
  ]
  edge [
    source 2745
    target 2769
    type "child"
  ]
  edge [
    source 2745
    target 2770
    type "child"
  ]
  edge [
    source 2745
    target 2170
    type "child"
  ]
  edge [
    source 2745
    target 2678
    type "child"
  ]
  edge [
    source 2745
    target 2771
    type "child"
  ]
  edge [
    source 2745
    target 2772
    type "child"
  ]
  edge [
    source 2745
    target 2773
    type "child"
  ]
  edge [
    source 2745
    target 2774
    type "child"
  ]
  edge [
    source 2745
    target 2775
    type "child"
  ]
  edge [
    source 2745
    target 2777
    type "child"
  ]
  edge [
    source 2745
    target 2732
    type "child"
  ]
  edge [
    source 2745
    target 2778
    type "child"
  ]
  edge [
    source 2745
    target 2688
    type "child"
  ]
  edge [
    source 2745
    target 2779
    type "child"
  ]
  edge [
    source 2745
    target 2780
    type "child"
  ]
  edge [
    source 2745
    target 2781
    type "child"
  ]
  edge [
    source 2745
    target 2782
    type "child"
  ]
  edge [
    source 2745
    target 2783
    type "child"
  ]
  edge [
    source 2745
    target 2784
    type "child"
  ]
  edge [
    source 2745
    target 2785
    type "child"
  ]
  edge [
    source 2745
    target 2786
    type "child"
  ]
  edge [
    source 2745
    target 2787
    type "child"
  ]
  edge [
    source 2751
    target 516
    type "link"
  ]
  edge [
    source 2752
    target 527
    type "link"
  ]
  edge [
    source 2755
    target 2074
    type "link"
  ]
  edge [
    source 2756
    target 2757
    type "link"
  ]
  edge [
    source 2756
    target 2069
    type "link"
  ]
  edge [
    source 2756
    target 2070
    type "link"
  ]
  edge [
    source 2758
    target 2757
    type "link"
  ]
  edge [
    source 2758
    target 2069
    type "link"
  ]
  edge [
    source 2758
    target 2070
    type "link"
  ]
  edge [
    source 2759
    target 2078
    type "link"
  ]
  edge [
    source 2759
    target 2079
    type "link"
  ]
  edge [
    source 2759
    target 2757
    type "link"
  ]
  edge [
    source 2759
    target 2069
    type "link"
  ]
  edge [
    source 2759
    target 2070
    type "link"
  ]
  edge [
    source 2760
    target 2078
    type "link"
  ]
  edge [
    source 2760
    target 2079
    type "link"
  ]
  edge [
    source 2760
    target 2757
    type "link"
  ]
  edge [
    source 2760
    target 2069
    type "link"
  ]
  edge [
    source 2760
    target 2070
    type "link"
  ]
  edge [
    source 2766
    target 2767
    type "link"
  ]
  edge [
    source 2775
    target 2776
    type "link"
  ]
  edge [
    source 2777
    target 2776
    type "link"
  ]
  edge [
    source 2777
    target 2176
    type "link"
  ]
  edge [
    source 2788
    target 2745
    type "link"
  ]
  edge [
    source 2789
    target 509
    type "link"
  ]
  edge [
    source 2790
    target 509
    type "link"
  ]
  edge [
    source 2791
    target 2792
    type "link"
  ]
  edge [
    source 2791
    target 2793
    type "link"
  ]
  edge [
    source 2791
    target 2794
    type "link"
  ]
  edge [
    source 2795
    target 2792
    type "link"
  ]
  edge [
    source 2795
    target 2793
    type "link"
  ]
  edge [
    source 2795
    target 2794
    type "link"
  ]
  edge [
    source 2796
    target 652
    type "link"
  ]
  edge [
    source 2796
    target 2797
    type "link"
  ]
  edge [
    source 2796
    target 2798
    type "link"
  ]
  edge [
    source 2799
    target 652
    type "link"
  ]
  edge [
    source 2799
    target 2797
    type "link"
  ]
  edge [
    source 2799
    target 2798
    type "link"
  ]
  edge [
    source 2800
    target 2801
    type "link"
  ]
  edge [
    source 2800
    target 2798
    type "link"
  ]
  edge [
    source 2802
    target 2801
    type "link"
  ]
  edge [
    source 2802
    target 2798
    type "link"
  ]
  edge [
    source 2803
    target 2804
    type "link"
  ]
  edge [
    source 2803
    target 2805
    type "link"
  ]
  edge [
    source 2803
    target 2806
    type "link"
  ]
  edge [
    source 2807
    target 2804
    type "link"
  ]
  edge [
    source 2807
    target 2805
    type "link"
  ]
  edge [
    source 2807
    target 2806
    type "link"
  ]
  edge [
    source 2808
    target 2809
    type "link"
  ]
  edge [
    source 2808
    target 2806
    type "link"
  ]
  edge [
    source 2810
    target 2809
    type "link"
  ]
  edge [
    source 2810
    target 2806
    type "link"
  ]
  edge [
    source 2811
    target 2812
    type "link"
  ]
  edge [
    source 2811
    target 2813
    type "link"
  ]
  edge [
    source 2811
    target 2814
    type "link"
  ]
  edge [
    source 2815
    target 2812
    type "link"
  ]
  edge [
    source 2815
    target 2813
    type "link"
  ]
  edge [
    source 2815
    target 2814
    type "link"
  ]
  edge [
    source 2816
    target 2817
    type "link"
  ]
  edge [
    source 2816
    target 2818
    type "link"
  ]
  edge [
    source 2816
    target 2819
    type "link"
  ]
  edge [
    source 2820
    target 2817
    type "link"
  ]
  edge [
    source 2820
    target 2818
    type "link"
  ]
  edge [
    source 2820
    target 2819
    type "link"
  ]
  edge [
    source 2821
    target 2817
    type "link"
  ]
  edge [
    source 2821
    target 2822
    type "link"
  ]
  edge [
    source 2823
    target 2817
    type "link"
  ]
  edge [
    source 2823
    target 2822
    type "link"
  ]
  edge [
    source 2824
    target 2825
    type "link"
  ]
  edge [
    source 2824
    target 2826
    type "link"
  ]
  edge [
    source 2824
    target 2827
    type "link"
  ]
  edge [
    source 2828
    target 2825
    type "link"
  ]
  edge [
    source 2828
    target 2826
    type "link"
  ]
  edge [
    source 2828
    target 2827
    type "link"
  ]
  edge [
    source 2829
    target 2830
    type "link"
  ]
  edge [
    source 2829
    target 2826
    type "link"
  ]
  edge [
    source 2831
    target 2830
    type "link"
  ]
  edge [
    source 2831
    target 2826
    type "link"
  ]
  edge [
    source 2832
    target 2833
    type "link"
  ]
  edge [
    source 2832
    target 2834
    type "link"
  ]
  edge [
    source 2832
    target 2835
    type "link"
  ]
  edge [
    source 2836
    target 2833
    type "link"
  ]
  edge [
    source 2836
    target 2834
    type "link"
  ]
  edge [
    source 2836
    target 2835
    type "link"
  ]
  edge [
    source 2837
    target 2838
    type "link"
  ]
  edge [
    source 2837
    target 529
    type "link"
  ]
  edge [
    source 2837
    target 2839
    type "link"
  ]
  edge [
    source 2840
    target 2838
    type "link"
  ]
  edge [
    source 2840
    target 529
    type "link"
  ]
  edge [
    source 2840
    target 2839
    type "link"
  ]
  edge [
    source 2841
    target 2842
    type "link"
  ]
  edge [
    source 2841
    target 477
    type "link"
  ]
  edge [
    source 2843
    target 2842
    type "link"
  ]
  edge [
    source 2843
    target 477
    type "link"
  ]
  edge [
    source 2844
    target 2842
    type "link"
  ]
  edge [
    source 2845
    target 2842
    type "link"
  ]
  edge [
    source 2866
    target 101
    type "link"
  ]
  edge [
    source 2867
    target 102
    type "link"
  ]
  edge [
    source 2868
    target 102
    type "link"
  ]
  edge [
    source 2869
    target 102
    type "link"
  ]
  edge [
    source 2870
    target 102
    type "link"
  ]
  edge [
    source 2871
    target 102
    type "link"
  ]
  edge [
    source 2872
    target 102
    type "link"
  ]
  edge [
    source 2874
    target 22
    type "link"
  ]
  edge [
    source 2889
    target 2078
    type "link"
  ]
  edge [
    source 2890
    target 2078
    type "link"
  ]
  edge [
    source 2902
    target 457
    type "link"
  ]
  edge [
    source 2904
    target 22
    type "link"
  ]
  edge [
    source 2905
    target 14
    type "link"
  ]
  edge [
    source 2913
    target 2914
    type "link"
  ]
  edge [
    source 2914
    target 2906
    type "child"
  ]
  edge [
    source 2914
    target 2907
    type "child"
  ]
  edge [
    source 2914
    target 2909
    type "child"
  ]
  edge [
    source 2914
    target 2910
    type "child"
  ]
  edge [
    source 2914
    target 2911
    type "child"
  ]
  edge [
    source 2914
    target 2912
    type "child"
  ]
  edge [
    source 2914
    target 2908
    type "child"
  ]
  edge [
    source 2914
    target 2913
    type "child"
  ]
  edge [
    source 2914
    target 2915
    type "child"
  ]
  edge [
    source 2914
    target 2916
    type "child"
  ]
  edge [
    source 2914
    target 2917
    type "child"
  ]
  edge [
    source 2915
    target 2914
    type "link"
  ]
  edge [
    source 2916
    target 2918
    type "link"
  ]
  edge [
    source 2916
    target 2914
    type "link"
  ]
  edge [
    source 2917
    target 2914
    type "link"
  ]
  edge [
    source 2930
    target 2931
    type "link"
  ]
  edge [
    source 2932
    target 2933
    type "link"
  ]
  edge [
    source 2932
    target 2934
    type "link"
  ]
  edge [
    source 2932
    target 2935
    type "link"
  ]
  edge [
    source 2932
    target 2936
    type "link"
  ]
  edge [
    source 2932
    target 2937
    type "link"
  ]
]
