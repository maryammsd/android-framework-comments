{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/widget/Editor.java",
  "packageName" : "android.widget",
  "className" : "UndoInputFilter",
  "comment" : "\n     * An InputFilter that monitors text input to maintain undo history. It does not modify the\n     * text being typed (and hence always returns null from the filter() method).\n     *\n     * TODO: Make this span aware.\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mEditor",
    "type" : "Editor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsUserEdit",
    "type" : "boolean",
    "comment" : " Whether the current filter pass is directly caused by an end-user text edit.",
    "links" : [ ]
  }, {
    "name" : "mHasComposition",
    "type" : "boolean",
    "comment" : " rotates the screen during composition.",
    "links" : [ ]
  }, {
    "name" : "mExpanding",
    "type" : "boolean",
    "comment" : " Whether the user is expanding or shortening the text",
    "links" : [ ]
  }, {
    "name" : "mPreviousOperationWasInSameBatchEdit",
    "type" : "boolean",
    "comment" : " Whether the previous edit operation was in the current batch edit.",
    "links" : [ ]
  }, {
    "name" : "MERGE_EDIT_MODE_FORCE_MERGE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MERGE_EDIT_MODE_NEVER_MERGE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MERGE_EDIT_MODE_NORMAL",
    "type" : "int",
    "comment" : " Use {@link EditOperation#mergeWith} to merge ",
    "links" : [ "#mergeWith" ]
  } ],
  "methods" : [ {
    "name" : "public void saveInstanceState(Parcel parcel)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void restoreInstanceState(Parcel parcel)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void beginBatchEdit()",
    "returnType" : "void",
    "comment" : "\n         * Signals that a user-triggered edit is starting.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void endBatchEdit()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CharSequence filter(CharSequence source, int start, int end, Spanned dest, int dstart, int dend)",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void freezeLastEdit()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleEdit(CharSequence source, int start, int end, Spanned dest, int dstart, int dend, boolean shouldCreateSeparateState)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private EditOperation getLastEdit()",
    "returnType" : "EditOperation",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void recordEdit(EditOperation edit, @MergeMode int mergeMode)",
    "returnType" : "void",
    "comment" : "\n         * Fetches the last undo operation and checks to see if a new edit should be merged into it.\n         * If forceMerge is true then the new edit is always merged.\n         ",
    "links" : [ ]
  }, {
    "name" : "private boolean canUndoEdit(CharSequence source, int start, int end, Spanned dest, int dstart, int dend)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isComposition(CharSequence source)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isInTextWatcher()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void saveInstanceState(Parcel parcel)", "public void restoreInstanceState(Parcel parcel)", "public void beginBatchEdit()", "public void endBatchEdit()", "public CharSequence filter(CharSequence source, int start, int end, Spanned dest, int dstart, int dend)", " void freezeLastEdit()", "private void handleEdit(CharSequence source, int start, int end, Spanned dest, int dstart, int dend, boolean shouldCreateSeparateState)", "private EditOperation getLastEdit()", "private void recordEdit(EditOperation edit, @MergeMode int mergeMode)", "private boolean canUndoEdit(CharSequence source, int start, int end, Spanned dest, int dstart, int dend)", "private static boolean isComposition(CharSequence source)", "private boolean isInTextWatcher()" ],
  "variableNames" : [ "mEditor", "mIsUserEdit", "mHasComposition", "mExpanding", "mPreviousOperationWasInSameBatchEdit", "MERGE_EDIT_MODE_FORCE_MERGE", "MERGE_EDIT_MODE_NEVER_MERGE", "MERGE_EDIT_MODE_NORMAL" ]
}