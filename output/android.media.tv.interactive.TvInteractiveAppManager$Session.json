{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/tv/interactive/TvInteractiveAppManager.java",
  "packageName" : "android.media.tv.interactive",
  "className" : "Session",
  "comment" : "\n     * The Session provides the per-session functionality of interactive app.\n     * @hide\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "DISPATCH_IN_PROGRESS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DISPATCH_NOT_HANDLED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DISPATCH_HANDLED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INPUT_SESSION_NOT_RESPONDING_TIMEOUT",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "ITvInteractiveAppManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUserId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSeq",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSessionCallbackRecordMap",
    "type" : "SparseArray<SessionCallbackRecord>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "InputEventHandler",
    "comment" : " protect pending input events and the input channel.",
    "links" : [ ]
  }, {
    "name" : "mInputSession",
    "type" : "TvInputManager.Session",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPendingEventPool",
    "type" : "Pools.Pool<PendingEvent>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPendingEvents",
    "type" : "SparseArray<PendingEvent>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mToken",
    "type" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSender",
    "type" : "TvInputEventSender",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInputChannel",
    "type" : "InputChannel",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public TvInputManager.Session getInputSession()",
    "returnType" : "TvInputManager.Session",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setInputSession(TvInputManager.Session inputSession)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void startInteractiveApp()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void stopInteractiveApp()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void resetInteractiveApp()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void createBiInteractiveApp(Uri biIAppUri, Bundle params)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void destroyBiInteractiveApp(String biIAppId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void setTeletextAppEnabled(boolean enable)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void sendCurrentVideoBounds(@NonNull Rect bounds)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void sendCurrentChannelUri(@Nullable Uri channelUri)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void sendCurrentChannelLcn(int lcn)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void sendStreamVolume(float volume)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void sendTrackInfoList(@NonNull List<TvTrackInfo> tracks)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void sendSelectedTrackInfo(@NonNull List<TvTrackInfo> tracks)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void sendCurrentTvInputId(@Nullable String inputId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void sendTimeShiftMode(int mode)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void sendAvailableSpeeds(float[] speeds)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void sendTvRecordingInfo(@Nullable TvRecordingInfo recordingInfo)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void sendTvRecordingInfoList(@Nullable List<TvRecordingInfo> recordingInfoList)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void notifyRecordingStarted(String recordingId, String requestId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void notifyRecordingStopped(String recordingId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void sendSigningResult(@NonNull String signingId, @NonNull byte[] result)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void sendCertificate(@NonNull String host, int port, @NonNull SslCertificate cert)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void notifyError(@NonNull String errMsg, @NonNull Bundle params)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void notifyTimeShiftPlaybackParams(@NonNull PlaybackParams params)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void notifyTimeShiftStatusChanged(@NonNull String inputId, @TvInputManager.TimeShiftStatus int status)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void notifyTimeShiftStartPositionChanged(@NonNull String inputId, long timeMs)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void notifyTimeShiftCurrentPositionChanged(@NonNull String inputId, long timeMs)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void notifyRecordingConnectionFailed(@NonNull String recordingId, @NonNull String inputId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void notifyRecordingDisconnected(@NonNull String recordingId, @NonNull String inputId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void notifyRecordingTuned(@NonNull String recordingId, @NonNull Uri channelUri)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void notifyRecordingError(@NonNull String recordingId, int err)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void notifyRecordingScheduled(@NonNull String recordingId, @Nullable String requestId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setSurface(Surface surface)",
    "returnType" : "void",
    "comment" : "\n         * Sets the {@link android.view.Surface} for this session.\n         *\n         * @param surface A {@link android.view.Surface} used to render video.\n         ",
    "links" : [ "android.view.Surface" ]
  }, {
    "name" : " void createMediaView(@NonNull View view, @NonNull Rect frame)",
    "returnType" : "void",
    "comment" : "\n         * Creates a media view. Once the media view is created, {@link #relayoutMediaView}\n         * should be called whenever the layout of its containing view is changed.\n         * {@link #removeMediaView()} should be called to remove the media view.\n         * Since a session can have only one media view, this method should be called only once\n         * or it can be called again after calling {@link #removeMediaView()}.\n         *\n         * @param view A view for interactive app.\n         * @param frame A position of the media view.\n         * @throws IllegalStateException if {@code view} is not attached to a window.\n         ",
    "links" : [ "#removeMediaView()", "#relayoutMediaView" ]
  }, {
    "name" : " void relayoutMediaView(@NonNull Rect frame)",
    "returnType" : "void",
    "comment" : "\n         * Relayouts the current media view.\n         *\n         * @param frame A new position of the media view.\n         ",
    "links" : [ ]
  }, {
    "name" : " void removeMediaView()",
    "returnType" : "void",
    "comment" : "\n         * Removes the current media view.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void dispatchSurfaceChanged(int format, int width, int height)",
    "returnType" : "void",
    "comment" : "\n         * Notifies of any structural changes (format or size) of the surface passed in\n         * {@link #setSurface}.\n         *\n         * @param format The new PixelFormat of the surface.\n         * @param width The new width of the surface.\n         * @param height The new height of the surface.\n         ",
    "links" : [ "#setSurface" ]
  }, {
    "name" : "public int dispatchInputEvent(@NonNull InputEvent event, Object token, @NonNull FinishedInputEventCallback callback, @NonNull Handler handler)",
    "returnType" : "int",
    "comment" : "\n         * Dispatches an input event to this session.\n         *\n         * @param event An {@link InputEvent} to dispatch. Cannot be {@code null}.\n         * @param token A token used to identify the input event later in the callback.\n         * @param callback A callback used to receive the dispatch result. Cannot be {@code null}.\n         * @param handler A {@link Handler} that the dispatch result will be delivered to. Cannot be\n         *            {@code null}.\n         * @return Returns {@link #DISPATCH_HANDLED} if the event was handled. Returns\n         *         {@link #DISPATCH_NOT_HANDLED} if the event was not handled. Returns\n         *         {@link #DISPATCH_IN_PROGRESS} if the event is in progress and the callback will\n         *         be invoked later.\n         * @hide\n         ",
    "links" : [ "#DISPATCH_NOT_HANDLED", "android.view.InputEvent", "android.os.Handler", "#DISPATCH_IN_PROGRESS", "#DISPATCH_HANDLED" ]
  }, {
    "name" : "public void notifyBroadcastInfoResponse(BroadcastInfoResponse response)",
    "returnType" : "void",
    "comment" : "\n         * Notifies of any broadcast info response passed in from TIS.\n         *\n         * @param response response passed in from TIS.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void notifyAdResponse(AdResponse response)",
    "returnType" : "void",
    "comment" : "\n         * Notifies of any advertisement response passed in from TIS.\n         *\n         * @param response response passed in from TIS.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void notifyAdBufferConsumed(AdBuffer buffer)",
    "returnType" : "void",
    "comment" : "\n         * Notifies the advertisement buffer is consumed.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void release()",
    "returnType" : "void",
    "comment" : "\n         * Releases this session.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void notifyTuned(Uri channelUri)",
    "returnType" : "void",
    "comment" : "\n         * Notifies Interactive APP session when a channel is tuned.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void notifyTrackSelected(int type, String trackId)",
    "returnType" : "void",
    "comment" : "\n         * Notifies Interactive APP session when a track is selected.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void notifyTracksChanged(List<TvTrackInfo> tracks)",
    "returnType" : "void",
    "comment" : "\n         * Notifies Interactive APP session when tracks are changed.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void notifyVideoAvailable()",
    "returnType" : "void",
    "comment" : "\n         * Notifies Interactive APP session when video is available.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void notifyVideoUnavailable(int reason)",
    "returnType" : "void",
    "comment" : "\n         * Notifies Interactive APP session when video is unavailable.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void notifyVideoFreezeUpdated(boolean isFrozen)",
    "returnType" : "void",
    "comment" : "\n         * Notifies Interactive app session when the video freeze state is updated\n         * @param isFrozen Whether or not the video is frozen\n         ",
    "links" : [ ]
  }, {
    "name" : "public void notifyContentAllowed()",
    "returnType" : "void",
    "comment" : "\n         * Notifies Interactive APP session when content is allowed.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void notifyContentBlocked(TvContentRating rating)",
    "returnType" : "void",
    "comment" : "\n         * Notifies Interactive APP session when content is blocked.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void notifySignalStrength(int strength)",
    "returnType" : "void",
    "comment" : "\n         * Notifies Interactive APP session when signal strength is changed.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void notifyTvMessage(int type, Bundle data)",
    "returnType" : "void",
    "comment" : "\n         * Notifies Interactive APP session when a new TV message is received.\n         ",
    "links" : [ ]
  }, {
    "name" : "private void flushPendingEventsLocked()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void releaseInternal()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private PendingEvent obtainPendingEventLocked(InputEvent event, Object token, FinishedInputEventCallback callback, Handler handler)",
    "returnType" : "PendingEvent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void invokeFinishedInputEventCallback(PendingEvent p, boolean handled)",
    "returnType" : "void",
    "comment" : " Assumes the event has already been removed from the queue.",
    "links" : [ ]
  }, {
    "name" : "private void sendInputEventAndReportResultOnMainLooper(PendingEvent p)",
    "returnType" : "void",
    "comment" : " Must be called on the main looper",
    "links" : [ ]
  }, {
    "name" : "private int sendInputEventOnMainLooperLocked(PendingEvent p)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void finishedInputEvent(int seq, boolean handled, boolean timeout)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void recyclePendingEventLocked(PendingEvent p)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public TvInputManager.Session getInputSession()", "public void setInputSession(TvInputManager.Session inputSession)", " void startInteractiveApp()", " void stopInteractiveApp()", " void resetInteractiveApp()", " void createBiInteractiveApp(Uri biIAppUri, Bundle params)", " void destroyBiInteractiveApp(String biIAppId)", " void setTeletextAppEnabled(boolean enable)", " void sendCurrentVideoBounds(@NonNull Rect bounds)", " void sendCurrentChannelUri(@Nullable Uri channelUri)", " void sendCurrentChannelLcn(int lcn)", " void sendStreamVolume(float volume)", " void sendTrackInfoList(@NonNull List<TvTrackInfo> tracks)", " void sendSelectedTrackInfo(@NonNull List<TvTrackInfo> tracks)", " void sendCurrentTvInputId(@Nullable String inputId)", " void sendTimeShiftMode(int mode)", " void sendAvailableSpeeds(float[] speeds)", " void sendTvRecordingInfo(@Nullable TvRecordingInfo recordingInfo)", " void sendTvRecordingInfoList(@Nullable List<TvRecordingInfo> recordingInfoList)", " void notifyRecordingStarted(String recordingId, String requestId)", " void notifyRecordingStopped(String recordingId)", " void sendSigningResult(@NonNull String signingId, @NonNull byte[] result)", " void sendCertificate(@NonNull String host, int port, @NonNull SslCertificate cert)", " void notifyError(@NonNull String errMsg, @NonNull Bundle params)", " void notifyTimeShiftPlaybackParams(@NonNull PlaybackParams params)", " void notifyTimeShiftStatusChanged(@NonNull String inputId, @TvInputManager.TimeShiftStatus int status)", " void notifyTimeShiftStartPositionChanged(@NonNull String inputId, long timeMs)", " void notifyTimeShiftCurrentPositionChanged(@NonNull String inputId, long timeMs)", " void notifyRecordingConnectionFailed(@NonNull String recordingId, @NonNull String inputId)", " void notifyRecordingDisconnected(@NonNull String recordingId, @NonNull String inputId)", " void notifyRecordingTuned(@NonNull String recordingId, @NonNull Uri channelUri)", " void notifyRecordingError(@NonNull String recordingId, int err)", " void notifyRecordingScheduled(@NonNull String recordingId, @Nullable String requestId)", "public void setSurface(Surface surface)", " void createMediaView(@NonNull View view, @NonNull Rect frame)", " void relayoutMediaView(@NonNull Rect frame)", " void removeMediaView()", "public void dispatchSurfaceChanged(int format, int width, int height)", "public int dispatchInputEvent(@NonNull InputEvent event, Object token, @NonNull FinishedInputEventCallback callback, @NonNull Handler handler)", "public void notifyBroadcastInfoResponse(BroadcastInfoResponse response)", "public void notifyAdResponse(AdResponse response)", "public void notifyAdBufferConsumed(AdBuffer buffer)", "public void release()", "public void notifyTuned(Uri channelUri)", "public void notifyTrackSelected(int type, String trackId)", "public void notifyTracksChanged(List<TvTrackInfo> tracks)", "public void notifyVideoAvailable()", "public void notifyVideoUnavailable(int reason)", "public void notifyVideoFreezeUpdated(boolean isFrozen)", "public void notifyContentAllowed()", "public void notifyContentBlocked(TvContentRating rating)", "public void notifySignalStrength(int strength)", "public void notifyTvMessage(int type, Bundle data)", "private void flushPendingEventsLocked()", "private void releaseInternal()", "private PendingEvent obtainPendingEventLocked(InputEvent event, Object token, FinishedInputEventCallback callback, Handler handler)", " void invokeFinishedInputEventCallback(PendingEvent p, boolean handled)", "private void sendInputEventAndReportResultOnMainLooper(PendingEvent p)", "private int sendInputEventOnMainLooperLocked(PendingEvent p)", " void finishedInputEvent(int seq, boolean handled, boolean timeout)", "private void recyclePendingEventLocked(PendingEvent p)" ],
  "variableNames" : [ "DISPATCH_IN_PROGRESS", "DISPATCH_NOT_HANDLED", "DISPATCH_HANDLED", "INPUT_SESSION_NOT_RESPONDING_TIMEOUT", "mService", "mUserId", "mSeq", "mSessionCallbackRecordMap", "mHandler", "mInputSession", "mPendingEventPool", "mPendingEvents", "mToken", "mSender", "mInputChannel" ]
}