{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/graphics/BitmapShader.java",
  "packageName" : "android.graphics",
  "className" : "BitmapShader",
  "comment" : "\n * Shader used to draw a bitmap as a texture. The bitmap can be repeated or\n * mirrored by setting the tiling mode.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mBitmap",
    "type" : "Bitmap",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : "mOverrideGainmap",
    "type" : "Gainmap",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTileX",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTileY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FILTER_MODE_DEFAULT",
    "type" : "int",
    "comment" : "\n     * This FilterMode value will respect the value of the Paint#isFilterBitmap flag while the\n     * shader is attached to the Paint.\n     *\n     * <p>The exception to this rule is when a Shader is attached as input to a RuntimeShader. In\n     *    that case this mode will default to FILTER_MODE_NEAREST.</p>\n     *\n     * @see #setFilterMode(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "FILTER_MODE_NEAREST",
    "type" : "int",
    "comment" : "\n     * This FilterMode value will cause the shader to sample from the nearest pixel to the requested\n     * sample point.\n     *\n     * <p>This value will override the effect of Paint#isFilterBitmap.</p>\n     *\n     * @see #setFilterMode(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "FILTER_MODE_LINEAR",
    "type" : "int",
    "comment" : "\n     * This FilterMode value will cause the shader to interpolate the output of the shader from a\n     * 2x2 grid of pixels nearest to the sample point (i.e. bilinear interpolation).\n     *\n     * <p>This value will override the effect of Paint#isFilterBitmap.</p>\n     *\n     * @see #setFilterMode(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "mFilterMode",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFilterFromPaint",
    "type" : "boolean",
    "comment" : "\n     *  This is cache of the last value from the Paint of bitmap-filtering.\n     *  In the future, BitmapShaders will carry their own (expanded) data for this\n     *  (e.g. including mipmap options, or bicubic weights)\n     *\n     *  When that happens, this bool will become those extended values, and we will\n     *  need to track whether this Shader was created with those new constructors,\n     *  or from the current \"legacy\" constructor, which (for compatibility) will\n     *  still need to know the Paint's setting.\n     *\n     *  When the filter Paint setting is finally gone, we will be able to remove\n     *  the filterFromPaint parameter currently being passed to createNativeInstance()\n     *  and shouldDiscardNativeInstance(), as shaders will always know their filter\n     *  settings.\n     ",
    "links" : [ ]
  }, {
    "name" : "mIsDirectSampled",
    "type" : "boolean",
    "comment" : "\n     *  Stores whether or not the contents of this shader's bitmap will be sampled\n     *  without modification or if the bitmap's properties, like colorspace and\n     *  premultiplied alpha, will be respected when sampling from the bitmap's buffer.\n     ",
    "links" : [ ]
  }, {
    "name" : "mRequestDirectSampling",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaxAniso",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getFilterMode()",
    "returnType" : "int",
    "comment" : "\n     * Returns the filter mode used when sampling from this shader\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setFilterMode(@FilterMode int mode)",
    "returnType" : "void",
    "comment" : "\n     * Set the filter mode to be used when sampling from this shader. If this is configured\n     * then the anisotropic filtering value specified in any previous call to\n     * {@link #setMaxAnisotropy(int)} is ignored.\n     ",
    "links" : [ "#setMaxAnisotropy(int)" ]
  }, {
    "name" : "public void setMaxAnisotropy(@IntRange(from = 1) int maxAnisotropy)",
    "returnType" : "void",
    "comment" : "\n     * Enables and configures the max anisotropy sampling value. If this value is configured,\n     * {@link #setFilterMode(int)} is ignored.\n     *\n     * Anisotropic filtering can enhance visual quality by removing aliasing effects of images\n     * that are at oblique viewing angles. This value is typically consumed as a power of 2 and\n     * anisotropic values of the next power of 2 typically provide twice the quality improvement\n     * as the previous value. For example, a sampling value of 4 would provide twice the improvement\n     * of a sampling value of 2. It is important to note that higher sampling values reach\n     * diminishing returns as the improvements between 8 and 16 can be slight.\n     *\n     * @param maxAnisotropy The Anisotropy value to use for filtering. Must be greater than 0.\n     ",
    "links" : [ "#setFilterMode(int)" ]
  }, {
    "name" : "public void setOverrideGainmap(@Nullable Gainmap overrideGainmap)",
    "returnType" : "void",
    "comment" : "\n     * Draws the BitmapShader with a copy of the given gainmap instead of the gainmap on the Bitmap\n     * the shader was constructed from\n     *\n     * @param overrideGainmap The gainmap to draw instead, null to use any gainmap on the Bitmap\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getMaxAnisotropy()",
    "returnType" : "int",
    "comment" : "\n     * Returns the current max anisotropic filtering value configured by\n     * {@link #setFilterMode(int)}. If {@link #setFilterMode(int)} is invoked this returns zero.\n     ",
    "links" : [ "#setFilterMode(int)" ]
  }, {
    "name" : " synchronized long getNativeInstanceWithDirectSampling()",
    "returnType" : "long",
    "comment" : " package ",
    "links" : [ ]
  }, {
    "name" : "protected long createNativeInstance(long nativeMatrix, boolean filterFromPaint)",
    "returnType" : "long",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "protected boolean shouldDiscardNativeInstance(boolean filterFromPaint)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeCreate(long nativeMatrix, long bitmapHandle, int shaderTileModeX, int shaderTileModeY, int maxAniso, boolean filter, boolean isDirectSampled, long overrideGainmapHandle)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int getFilterMode()", "public void setFilterMode(@FilterMode int mode)", "public void setMaxAnisotropy(@IntRange(from = 1) int maxAnisotropy)", "public void setOverrideGainmap(@Nullable Gainmap overrideGainmap)", "public int getMaxAnisotropy()", " synchronized long getNativeInstanceWithDirectSampling()", "protected long createNativeInstance(long nativeMatrix, boolean filterFromPaint)", "protected boolean shouldDiscardNativeInstance(boolean filterFromPaint)", "private static native long nativeCreate(long nativeMatrix, long bitmapHandle, int shaderTileModeX, int shaderTileModeY, int maxAniso, boolean filter, boolean isDirectSampled, long overrideGainmapHandle)" ],
  "variableNames" : [ "mBitmap", "mOverrideGainmap", "mTileX", "mTileY", "FILTER_MODE_DEFAULT", "FILTER_MODE_NEAREST", "FILTER_MODE_LINEAR", "mFilterMode", "mFilterFromPaint", "mIsDirectSampled", "mRequestDirectSampling", "mMaxAniso" ]
}