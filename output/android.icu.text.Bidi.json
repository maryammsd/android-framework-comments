{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/text/Bidi.java",
  "packageName" : "android.icu.text",
  "className" : "Bidi",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "LEVEL_DEFAULT_LTR",
    "type" : "byte",
    "comment" : " Paragraph level setting<p>\n     *\n     * Constant indicating that the base direction depends on the first strong\n     * directional character in the text according to the Unicode Bidirectional\n     * Algorithm. If no strong directional character is present,\n     * then set the paragraph level to 0 (left-to-right).<p>\n     *\n     * If this value is used in conjunction with reordering modes\n     * <code>REORDER_INVERSE_LIKE_DIRECT</code> or\n     * <code>REORDER_INVERSE_FOR_NUMBERS_SPECIAL</code>, the text to reorder\n     * is assumed to be visual LTR, and the text after reordering is required\n     * to be the corresponding logical string with appropriate contextual\n     * direction. The direction of the result string will be RTL if either\n     * the rightmost or leftmost strong character of the source text is RTL\n     * or Arabic Letter, the direction will be LTR otherwise.<p>\n     *\n     * If reordering option <code>OPTION_INSERT_MARKS</code> is set, an RLM may\n     * be added at the beginning of the result string to ensure round trip\n     * (that the result string, when reordered back to visual, will produce\n     * the original source text).\n     * @see #REORDER_INVERSE_LIKE_DIRECT\n     * @see #REORDER_INVERSE_FOR_NUMBERS_SPECIAL\n     ",
    "links" : [ ]
  }, {
    "name" : "LEVEL_DEFAULT_RTL",
    "type" : "byte",
    "comment" : " Paragraph level setting<p>\n     *\n     * Constant indicating that the base direction depends on the first strong\n     * directional character in the text according to the Unicode Bidirectional\n     * Algorithm. If no strong directional character is present,\n     * then set the paragraph level to 1 (right-to-left).<p>\n     *\n     * If this value is used in conjunction with reordering modes\n     * <code>REORDER_INVERSE_LIKE_DIRECT</code> or\n     * <code>REORDER_INVERSE_FOR_NUMBERS_SPECIAL</code>, the text to reorder\n     * is assumed to be visual LTR, and the text after reordering is required\n     * to be the corresponding logical string with appropriate contextual\n     * direction. The direction of the result string will be RTL if either\n     * the rightmost or leftmost strong character of the source text is RTL\n     * or Arabic Letter, or if the text contains no strong character;\n     * the direction will be LTR otherwise.<p>\n     *\n     * If reordering option <code>OPTION_INSERT_MARKS</code> is set, an RLM may\n     * be added at the beginning of the result string to ensure round trip\n     * (that the result string, when reordered back to visual, will produce\n     * the original source text).\n     * @see #REORDER_INVERSE_LIKE_DIRECT\n     * @see #REORDER_INVERSE_FOR_NUMBERS_SPECIAL\n     ",
    "links" : [ ]
  }, {
    "name" : "MAX_EXPLICIT_LEVEL",
    "type" : "byte",
    "comment" : "\n     * Maximum explicit embedding level.\n     * Same as the max_depth value in the\n     * <a href=\"http://www.unicode.org/reports/tr9/#BD2\">Unicode Bidirectional Algorithm</a>.\n     * (The maximum resolved level can be up to <code>MAX_EXPLICIT_LEVEL+1</code>).\n     ",
    "links" : [ ]
  }, {
    "name" : "LEVEL_OVERRIDE",
    "type" : "byte",
    "comment" : "\n     * Bit flag for level input.\n     * Overrides directional properties.\n     ",
    "links" : [ ]
  }, {
    "name" : "MAP_NOWHERE",
    "type" : "int",
    "comment" : "\n     * Special value which can be returned by the mapping methods when a\n     * logical index has no corresponding visual index or vice-versa. This may\n     * happen for the logical-to-visual mapping of a Bidi control when option\n     * <code>OPTION_REMOVE_CONTROLS</code> is\n     * specified. This can also happen for the visual-to-logical mapping of a\n     * Bidi mark (LRM or RLM) inserted by option\n     * <code>OPTION_INSERT_MARKS</code>.\n     * @see #getVisualIndex\n     * @see #getVisualMap\n     * @see #getLogicalIndex\n     * @see #getLogicalMap\n     * @see #OPTION_INSERT_MARKS\n     * @see #OPTION_REMOVE_CONTROLS\n     ",
    "links" : [ ]
  }, {
    "name" : "LTR",
    "type" : "byte",
    "comment" : "\n     * Left-to-right text.\n     * <ul>\n     * <li>As return value for <code>getDirection()</code>, it means\n     *     that the source string contains no right-to-left characters, or\n     *     that the source string is empty and the paragraph level is even.\n     * <li>As return value for <code>getBaseDirection()</code>, it\n     *     means that the first strong character of the source string has\n     *     a left-to-right direction.\n     * </ul>\n     ",
    "links" : [ ]
  }, {
    "name" : "RTL",
    "type" : "byte",
    "comment" : "\n     * Right-to-left text.\n     * <ul>\n     * <li>As return value for <code>getDirection()</code>, it means\n     *     that the source string contains no left-to-right characters, or\n     *     that the source string is empty and the paragraph level is odd.\n     * <li>As return value for <code>getBaseDirection()</code>, it\n     *     means that the first strong character of the source string has\n     *     a right-to-left direction.\n     * </ul>\n     ",
    "links" : [ ]
  }, {
    "name" : "MIXED",
    "type" : "byte",
    "comment" : "\n     * Mixed-directional text.\n     * <p>As return value for <code>getDirection()</code>, it means\n     *    that the source string contains both left-to-right and\n     *    right-to-left characters.\n     ",
    "links" : [ ]
  }, {
    "name" : "NEUTRAL",
    "type" : "byte",
    "comment" : "\n     * No strongly directional text.\n     * <p>As return value for <code>getBaseDirection()</code>, it means\n     *    that the source string is missing or empty, or contains neither\n     *    left-to-right nor right-to-left characters.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEEP_BASE_COMBINING",
    "type" : "short",
    "comment" : "\n     * option bit for writeReordered():\n     * keep combining characters after their base characters in RTL runs\n     *\n     * @see #writeReordered\n     ",
    "links" : [ ]
  }, {
    "name" : "DO_MIRRORING",
    "type" : "short",
    "comment" : "\n     * option bit for writeReordered():\n     * replace characters with the \"mirrored\" property in RTL runs\n     * by their mirror-image mappings\n     *\n     * @see #writeReordered\n     ",
    "links" : [ ]
  }, {
    "name" : "INSERT_LRM_FOR_NUMERIC",
    "type" : "short",
    "comment" : "\n     * option bit for writeReordered():\n     * surround the run with LRMs if necessary;\n     * this is part of the approximate \"inverse Bidi\" algorithm\n     *\n     * <p>This option does not imply corresponding adjustment of the index\n     * mappings.\n     *\n     * @see #setInverse\n     * @see #writeReordered\n     ",
    "links" : [ ]
  }, {
    "name" : "REMOVE_BIDI_CONTROLS",
    "type" : "short",
    "comment" : "\n     * option bit for writeReordered():\n     * remove Bidi control characters\n     * (this does not affect INSERT_LRM_FOR_NUMERIC)\n     *\n     * <p>This option does not imply corresponding adjustment of the index\n     * mappings.\n     *\n     * @see #writeReordered\n     * @see #INSERT_LRM_FOR_NUMERIC\n     ",
    "links" : [ ]
  }, {
    "name" : "OUTPUT_REVERSE",
    "type" : "short",
    "comment" : "\n     * option bit for writeReordered():\n     * write the output in reverse order\n     *\n     * <p>This has the same effect as calling <code>writeReordered()</code>\n     * first without this option, and then calling\n     * <code>writeReverse()</code> without mirroring.\n     * Doing this in the same step is faster and avoids a temporary buffer.\n     * An example for using this option is output to a character terminal that\n     * is designed for RTL scripts and stores text in reverse order.\n     *\n     * @see #writeReordered\n     ",
    "links" : [ ]
  }, {
    "name" : "REORDER_DEFAULT",
    "type" : "short",
    "comment" : " Reordering mode: Regular Logical to Visual Bidi algorithm according to Unicode.\n     * @see #setReorderingMode\n     ",
    "links" : [ ]
  }, {
    "name" : "REORDER_NUMBERS_SPECIAL",
    "type" : "short",
    "comment" : " Reordering mode: Logical to Visual algorithm which handles numbers in\n     * a way which mimicks the behavior of Windows XP.\n     * @see #setReorderingMode\n     ",
    "links" : [ ]
  }, {
    "name" : "REORDER_GROUP_NUMBERS_WITH_R",
    "type" : "short",
    "comment" : " Reordering mode: Logical to Visual algorithm grouping numbers with\n     * adjacent R characters (reversible algorithm).\n     * @see #setReorderingMode\n     ",
    "links" : [ ]
  }, {
    "name" : "REORDER_RUNS_ONLY",
    "type" : "short",
    "comment" : " Reordering mode: Reorder runs only to transform a Logical LTR string\n     * to the logical RTL string with the same display, or vice-versa.<br>\n     * If this mode is set together with option\n     * <code>OPTION_INSERT_MARKS</code>, some Bidi controls in the source\n     * text may be removed and other controls may be added to produce the\n     * minimum combination which has the required display.\n     * @see #OPTION_INSERT_MARKS\n     * @see #setReorderingMode\n     ",
    "links" : [ ]
  }, {
    "name" : "REORDER_INVERSE_NUMBERS_AS_L",
    "type" : "short",
    "comment" : " Reordering mode: Visual to Logical algorithm which handles numbers\n     * like L (same algorithm as selected by <code>setInverse(true)</code>.\n     * @see #setInverse\n     * @see #setReorderingMode\n     ",
    "links" : [ ]
  }, {
    "name" : "REORDER_INVERSE_LIKE_DIRECT",
    "type" : "short",
    "comment" : " Reordering mode: Visual to Logical algorithm equivalent to the regular\n     * Logical to Visual algorithm.\n     * @see #setReorderingMode\n     ",
    "links" : [ ]
  }, {
    "name" : "REORDER_INVERSE_FOR_NUMBERS_SPECIAL",
    "type" : "short",
    "comment" : " Reordering mode: Inverse Bidi (Visual to Logical) algorithm for the\n     * <code>REORDER_NUMBERS_SPECIAL</code> Bidi algorithm.\n     * @see #setReorderingMode\n     ",
    "links" : [ ]
  }, {
    "name" : "REORDER_COUNT",
    "type" : "short",
    "comment" : "  Number of values for reordering mode. ",
    "links" : [ ]
  }, {
    "name" : "REORDER_LAST_LOGICAL_TO_VISUAL",
    "type" : "short",
    "comment" : " Reordering mode values must be ordered so that all the regular logical to\n     * visual modes come first, and all inverse Bidi modes come last.\n     ",
    "links" : [ ]
  }, {
    "name" : "OPTION_DEFAULT",
    "type" : "int",
    "comment" : "\n     * Option value for <code>setReorderingOptions</code>:\n     * disable all the options which can be set with this method\n     * @see #setReorderingOptions\n     ",
    "links" : [ ]
  }, {
    "name" : "OPTION_INSERT_MARKS",
    "type" : "int",
    "comment" : "\n     * Option bit for <code>setReorderingOptions</code>:\n     * insert Bidi marks (LRM or RLM) when needed to ensure correct result of\n     * a reordering to a Logical order\n     *\n     * <p>This option must be set or reset before calling\n     * <code>setPara</code>.\n     *\n     * <p>This option is significant only with reordering modes which generate\n     * a result with Logical order, specifically.\n     * <ul>\n     *   <li><code>REORDER_RUNS_ONLY</code></li>\n     *   <li><code>REORDER_INVERSE_NUMBERS_AS_L</code></li>\n     *   <li><code>REORDER_INVERSE_LIKE_DIRECT</code></li>\n     *   <li><code>REORDER_INVERSE_FOR_NUMBERS_SPECIAL</code></li>\n     * </ul>\n     *\n     * <p>If this option is set in conjunction with reordering mode\n     * <code>REORDER_INVERSE_NUMBERS_AS_L</code> or with calling\n     * <code>setInverse(true)</code>, it implies option\n     * <code>INSERT_LRM_FOR_NUMERIC</code> in calls to method\n     * <code>writeReordered()</code>.\n     *\n     * <p>For other reordering modes, a minimum number of LRM or RLM characters\n     * will be added to the source text after reordering it so as to ensure\n     * round trip, i.e. when applying the inverse reordering mode on the\n     * resulting logical text with removal of Bidi marks\n     * (option <code>OPTION_REMOVE_CONTROLS</code> set before calling\n     * <code>setPara()</code> or option\n     * <code>REMOVE_BIDI_CONTROLS</code> in\n     * <code>writeReordered</code>), the result will be identical to the\n     * source text in the first transformation.\n     *\n     * <p>This option will be ignored if specified together with option\n     * <code>OPTION_REMOVE_CONTROLS</code>. It inhibits option\n     * <code>REMOVE_BIDI_CONTROLS</code> in calls to method\n     * <code>writeReordered()</code> and it implies option\n     * <code>INSERT_LRM_FOR_NUMERIC</code> in calls to method\n     * <code>writeReordered()</code> if the reordering mode is\n     * <code>REORDER_INVERSE_NUMBERS_AS_L</code>.\n     *\n     * @see #setReorderingMode\n     * @see #setReorderingOptions\n     * @see #INSERT_LRM_FOR_NUMERIC\n     * @see #REMOVE_BIDI_CONTROLS\n     * @see #OPTION_REMOVE_CONTROLS\n     * @see #REORDER_RUNS_ONLY\n     * @see #REORDER_INVERSE_NUMBERS_AS_L\n     * @see #REORDER_INVERSE_LIKE_DIRECT\n     * @see #REORDER_INVERSE_FOR_NUMBERS_SPECIAL\n     ",
    "links" : [ ]
  }, {
    "name" : "OPTION_REMOVE_CONTROLS",
    "type" : "int",
    "comment" : "\n     * Option bit for <code>setReorderingOptions</code>:\n     * remove Bidi control characters\n     *\n     * <p>This option must be set or reset before calling\n     * <code>setPara</code>.\n     *\n     * <p>This option nullifies option\n     * <code>OPTION_INSERT_MARKS</code>. It inhibits option\n     * <code>INSERT_LRM_FOR_NUMERIC</code> in calls to method\n     * <code>writeReordered()</code> and it implies option\n     * <code>REMOVE_BIDI_CONTROLS</code> in calls to that method.\n     *\n     * @see #setReorderingMode\n     * @see #setReorderingOptions\n     * @see #OPTION_INSERT_MARKS\n     * @see #INSERT_LRM_FOR_NUMERIC\n     * @see #REMOVE_BIDI_CONTROLS\n     ",
    "links" : [ ]
  }, {
    "name" : "OPTION_STREAMING",
    "type" : "int",
    "comment" : "\n     * Option bit for <code>setReorderingOptions</code>:\n     * process the output as part of a stream to be continued\n     *\n     * <p>This option must be set or reset before calling\n     * <code>setPara</code>.\n     *\n     * <p>This option specifies that the caller is interested in processing\n     * large text object in parts. The results of the successive calls are\n     * expected to be concatenated by the caller. Only the call for the last\n     * part will have this option bit off.\n     *\n     * <p>When this option bit is on, <code>setPara()</code> may process\n     * less than the full source text in order to truncate the text at a\n     * meaningful boundary. The caller should call\n     * <code>getProcessedLength()</code> immediately after calling\n     * <code>setPara()</code> in order to determine how much of the source\n     * text has been processed. Source text beyond that length should be\n     * resubmitted in following calls to <code>setPara</code>. The\n     * processed length may be less than the length of the source text if a\n     * character preceding the last character of the source text constitutes a\n     * reasonable boundary (like a block separator) for text to be continued.<br>\n     * If the last character of the source text constitutes a reasonable\n     * boundary, the whole text will be processed at once.<br>\n     * If nowhere in the source text there exists\n     * such a reasonable boundary, the processed length will be zero.<br>\n     * The caller should check for such an occurrence and do one of the following:\n     * <ul><li>submit a larger amount of text with a better chance to include\n     *         a reasonable boundary.</li>\n     *     <li>resubmit the same text after turning off option\n     *         <code>OPTION_STREAMING</code>.</li></ul>\n     * In all cases, this option should be turned off before processing the last\n     * part of the text.\n     *\n     * <p>When the <code>OPTION_STREAMING</code> option is used, it is\n     * recommended to call <code>orderParagraphsLTR(true)</code> before calling\n     * <code>setPara()</code> so that later paragraphs may be concatenated to\n     * previous paragraphs on the right.\n     *\n     * @see #setReorderingMode\n     * @see #setReorderingOptions\n     * @see #getProcessedLength\n     ",
    "links" : [ ]
  }, {
    "name" : "L",
    "type" : "byte",
    "comment" : "\n     *   Comparing the description of the Bidi algorithm with this implementation\n     *   is easier with the same names for the Bidi types in the code as there.\n     *   See UCharacterDirection\n     ",
    "links" : [ ]
  }, {
    "name" : "R",
    "type" : "byte",
    "comment" : "  0 ",
    "links" : [ ]
  }, {
    "name" : "EN",
    "type" : "byte",
    "comment" : "  1 ",
    "links" : [ ]
  }, {
    "name" : "ES",
    "type" : "byte",
    "comment" : "  2 ",
    "links" : [ ]
  }, {
    "name" : "ET",
    "type" : "byte",
    "comment" : "  3 ",
    "links" : [ ]
  }, {
    "name" : "AN",
    "type" : "byte",
    "comment" : "  4 ",
    "links" : [ ]
  }, {
    "name" : "CS",
    "type" : "byte",
    "comment" : "  5 ",
    "links" : [ ]
  }, {
    "name" : "B",
    "type" : "byte",
    "comment" : "  6 ",
    "links" : [ ]
  }, {
    "name" : "S",
    "type" : "byte",
    "comment" : "  7 ",
    "links" : [ ]
  }, {
    "name" : "WS",
    "type" : "byte",
    "comment" : "  8 ",
    "links" : [ ]
  }, {
    "name" : "ON",
    "type" : "byte",
    "comment" : "  9 ",
    "links" : [ ]
  }, {
    "name" : "LRE",
    "type" : "byte",
    "comment" : " 10 ",
    "links" : [ ]
  }, {
    "name" : "LRO",
    "type" : "byte",
    "comment" : " 11 ",
    "links" : [ ]
  }, {
    "name" : "AL",
    "type" : "byte",
    "comment" : " 12 ",
    "links" : [ ]
  }, {
    "name" : "RLE",
    "type" : "byte",
    "comment" : " 13 ",
    "links" : [ ]
  }, {
    "name" : "RLO",
    "type" : "byte",
    "comment" : " 14 ",
    "links" : [ ]
  }, {
    "name" : "PDF",
    "type" : "byte",
    "comment" : " 15 ",
    "links" : [ ]
  }, {
    "name" : "NSM",
    "type" : "byte",
    "comment" : " 16 ",
    "links" : [ ]
  }, {
    "name" : "BN",
    "type" : "byte",
    "comment" : " 17 ",
    "links" : [ ]
  }, {
    "name" : "FSI",
    "type" : "byte",
    "comment" : " 18 ",
    "links" : [ ]
  }, {
    "name" : "LRI",
    "type" : "byte",
    "comment" : " 19 ",
    "links" : [ ]
  }, {
    "name" : "RLI",
    "type" : "byte",
    "comment" : " 20 ",
    "links" : [ ]
  }, {
    "name" : "PDI",
    "type" : "byte",
    "comment" : " 21 ",
    "links" : [ ]
  }, {
    "name" : "ENL",
    "type" : "byte",
    "comment" : " 22 ",
    "links" : [ ]
  }, {
    "name" : "ENR",
    "type" : "byte",
    "comment" : " 23 ",
    "links" : [ ]
  }, {
    "name" : "CLASS_DEFAULT",
    "type" : "int",
    "comment" : "\n     * Value returned by <code>BidiClassifier</code> when there is no need to\n     * override the standard Bidi class for a given code point.\n     *\n     * <p>This constant is deprecated; use UCharacter.getIntPropertyMaxValue(UProperty.BIDI_CLASS)+1 instead.\n     *\n     * @see BidiClassifier\n     * @deprecated ICU 58 The numeric value may change over time, see ICU ticket #12420.\n     * @hide original deprecated declaration\n     ",
    "links" : [ ]
  }, {
    "name" : "SIMPLE_PARAS_COUNT",
    "type" : "int",
    "comment" : " number of paras entries allocated initially ",
    "links" : [ ]
  }, {
    "name" : "SIMPLE_OPENINGS_COUNT",
    "type" : "int",
    "comment" : " number of isolate run entries for paired brackets allocated initially ",
    "links" : [ ]
  }, {
    "name" : "CR",
    "type" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LF",
    "type" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LRM_BEFORE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LRM_AFTER",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RLM_BEFORE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RLM_AFTER",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FOUND_L",
    "type" : "byte",
    "comment" : " flags for Opening.flags ",
    "links" : [ ]
  }, {
    "name" : "FOUND_R",
    "type" : "byte",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ISOLATE",
    "type" : "int",
    "comment" : "\n     * The following bit is used for the directional isolate status.\n     * Stack entries corresponding to isolate sequences are greater than ISOLATE.\n     ",
    "links" : [ ]
  }, {
    "name" : "paraBidi",
    "type" : "Bidi",
    "comment" : "\n     * reference to parent paragraph object (reference to self if this object is\n     * a paragraph object); set to null in a newly opened object; set to a\n     * real value after a successful execution of setPara or setLine\n     ",
    "links" : [ ]
  }, {
    "name" : "bdp",
    "type" : "UBiDiProps",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "text",
    "type" : "char[]",
    "comment" : " character array representing the current text ",
    "links" : [ ]
  }, {
    "name" : "originalLength",
    "type" : "int",
    "comment" : " length of the current text ",
    "links" : [ ]
  }, {
    "name" : "length",
    "type" : "int",
    "comment" : " if the option OPTION_STREAMING is set, this is the length of\n     * text actually processed by <code>setPara</code>, which may be shorter\n     * than the original length. Otherwise, it is identical to the original\n     * length.\n     ",
    "links" : [ ]
  }, {
    "name" : "resultLength",
    "type" : "int",
    "comment" : " if option OPTION_REMOVE_CONTROLS is set, and/or Bidi\n     * marks are allowed to be inserted in one of the reordering modes, the\n     * length of the result string may be different from the processed length.\n     ",
    "links" : [ ]
  }, {
    "name" : "mayAllocateText",
    "type" : "boolean",
    "comment" : " indicators for whether memory may be allocated after construction ",
    "links" : [ ]
  }, {
    "name" : "mayAllocateRuns",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "dirPropsMemory",
    "type" : "byte[]",
    "comment" : " arrays with one value per text-character ",
    "links" : [ ]
  }, {
    "name" : "levelsMemory",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "dirProps",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "levels",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "isInverse",
    "type" : "boolean",
    "comment" : " are we performing an approximation of the \"inverse Bidi\" algorithm? ",
    "links" : [ ]
  }, {
    "name" : "reorderingMode",
    "type" : "int",
    "comment" : " are we using the basic algorithm or its variation? ",
    "links" : [ ]
  }, {
    "name" : "reorderingOptions",
    "type" : "int",
    "comment" : " bitmask for reordering options ",
    "links" : [ ]
  }, {
    "name" : "orderParagraphsLTR",
    "type" : "boolean",
    "comment" : " must block separators receive level 0? ",
    "links" : [ ]
  }, {
    "name" : "paraLevel",
    "type" : "byte",
    "comment" : " the paragraph level ",
    "links" : [ ]
  }, {
    "name" : "defaultParaLevel",
    "type" : "byte",
    "comment" : " must be one of DEFAULT_xxx or 0 if not contextual ",
    "links" : [ ]
  }, {
    "name" : "prologue",
    "type" : "String",
    "comment" : " context data ",
    "links" : [ ]
  }, {
    "name" : "epilogue",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "impTabPair",
    "type" : "ImpTabPair",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "direction",
    "type" : "byte",
    "comment" : " the overall paragraph or line directionality",
    "links" : [ ]
  }, {
    "name" : "flags",
    "type" : "int",
    "comment" : " flags is a bit set for which directional properties are in the text ",
    "links" : [ ]
  }, {
    "name" : "lastArabicPos",
    "type" : "int",
    "comment" : " lastArabicPos is index to the last AL in the text, -1 if none ",
    "links" : [ ]
  }, {
    "name" : "trailingWSStart",
    "type" : "int",
    "comment" : " implicitly at the paraLevel (rule (L1)) - levels may not reflect that ",
    "links" : [ ]
  }, {
    "name" : "paraCount",
    "type" : "int",
    "comment" : " fields for paragraph handling, set in getDirProps() ",
    "links" : [ ]
  }, {
    "name" : "paras_limit",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "paras_level",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "runCount",
    "type" : "int",
    "comment" : " fields for line reordering ",
    "links" : [ ]
  }, {
    "name" : "runsMemory",
    "type" : "BidiRun[]",
    "comment" : " ==-1: runs not set up yet ",
    "links" : [ ]
  }, {
    "name" : "runs",
    "type" : "BidiRun[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "simpleRuns",
    "type" : "BidiRun[]",
    "comment" : " for non-mixed text, we only need a tiny array of runs (no allocation) ",
    "links" : [ ]
  }, {
    "name" : "isolates",
    "type" : "Isolate[]",
    "comment" : " fields for managing isolate sequences ",
    "links" : [ ]
  }, {
    "name" : "isolateCount",
    "type" : "int",
    "comment" : " Within resolveExplicitLevels() and checkExplicitLevels(), this is the maximal\n       nesting encountered.\n       Within resolveImplicitLevels(), this is the index of the current isolates\n       stack entry. ",
    "links" : [ ]
  }, {
    "name" : "logicalToVisualRunsMap",
    "type" : "int[]",
    "comment" : " mapping of runs in logical order to visual order ",
    "links" : [ ]
  }, {
    "name" : "isGoodLogicalToVisualRunsMap",
    "type" : "boolean",
    "comment" : " flag to indicate that the map has been updated ",
    "links" : [ ]
  }, {
    "name" : "customClassifier",
    "type" : "BidiClassifier",
    "comment" : " customized class provider ",
    "links" : [ ]
  }, {
    "name" : "insertPoints",
    "type" : "InsertPoints",
    "comment" : " for inverse Bidi with insertion of directional marks ",
    "links" : [ ]
  }, {
    "name" : "controlCount",
    "type" : "int",
    "comment" : " for option OPTION_REMOVE_CONTROLS ",
    "links" : [ ]
  }, {
    "name" : "DirPropFlagMultiRuns",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DirPropFlagLR",
    "type" : "int[]",
    "comment" : " to avoid some conditional statements, use tiny constant arrays ",
    "links" : [ ]
  }, {
    "name" : "DirPropFlagE",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DirPropFlagO",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MASK_LTR",
    "type" : "int",
    "comment" : "  are there any characters that are LTR or RTL? ",
    "links" : [ ]
  }, {
    "name" : "MASK_RTL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MASK_R_AL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MASK_STRONG_EN_AN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MASK_EXPLICIT",
    "type" : "int",
    "comment" : " explicit embedding codes ",
    "links" : [ ]
  }, {
    "name" : "MASK_BN_EXPLICIT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MASK_ISO",
    "type" : "int",
    "comment" : " explicit isolate codes ",
    "links" : [ ]
  }, {
    "name" : "MASK_B_S",
    "type" : "int",
    "comment" : " paragraph and segment separators ",
    "links" : [ ]
  }, {
    "name" : "MASK_WS",
    "type" : "int",
    "comment" : " all types that are counted as White Space or Neutral in some steps ",
    "links" : [ ]
  }, {
    "name" : "MASK_POSSIBLE_N",
    "type" : "int",
    "comment" : " types that are neutrals or could becomes neutrals in (Wn) ",
    "links" : [ ]
  }, {
    "name" : "MASK_EMBEDDING",
    "type" : "int",
    "comment" : "\n     * These types may be changed to \"e\",\n     * the embedding type (L or R) of the run,\n     * in the Bidi algorithm (N2)\n     ",
    "links" : [ ]
  }, {
    "name" : "NOT_SEEKING_STRONG",
    "type" : "int",
    "comment" : "\n     * Get the directional properties for the text, calculate the flags bit-set, and\n     * determine the paragraph level if necessary (in paras_level[i]).\n     * FSI initiators are also resolved and their dirProp replaced with LRI or RLI.\n     * When encountering an FSI, it is initially replaced with an LRI, which is the\n     * default. Only if a strong R or AL is found within its scope will the LRI be\n     * replaced by an RLI.\n     ",
    "links" : [ ]
  }, {
    "name" : "SEEKING_STRONG_FOR_PARA",
    "type" : "int",
    "comment" : " 0: not contextual paraLevel, not after FSI ",
    "links" : [ ]
  }, {
    "name" : "SEEKING_STRONG_FOR_FSI",
    "type" : "int",
    "comment" : " 1: looking for first strong char in para ",
    "links" : [ ]
  }, {
    "name" : "LOOKING_FOR_PDI",
    "type" : "int",
    "comment" : " 2: looking for first strong after FSI ",
    "links" : [ ]
  }, {
    "name" : "IMPTABPROPS_COLUMNS",
    "type" : "int",
    "comment" : "******************************************************************",
    "links" : [ ]
  }, {
    "name" : "IMPTABPROPS_RES",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "groupProp",
    "type" : "short[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "_L",
    "type" : "short",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "_R",
    "type" : "short",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "_EN",
    "type" : "short",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "_AN",
    "type" : "short",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "_ON",
    "type" : "short",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "_S",
    "type" : "short",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "_B",
    "type" : "short",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "impTabProps",
    "type" : "short[][]",
    "comment" : "                                                                   ",
    "links" : [ ]
  }, {
    "name" : "IMPTABLEVELS_COLUMNS",
    "type" : "int",
    "comment" : "******************************************************************",
    "links" : [ ]
  }, {
    "name" : "IMPTABLEVELS_RES",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "impTabL_DEFAULT",
    "type" : "byte[][]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "impTabR_DEFAULT",
    "type" : "byte[][]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "impAct0",
    "type" : "short[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "impTab_DEFAULT",
    "type" : "ImpTabPair",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "impTabL_NUMBERS_SPECIAL",
    "type" : "byte[][]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "impTab_NUMBERS_SPECIAL",
    "type" : "ImpTabPair",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "impTabL_GROUP_NUMBERS_WITH_R",
    "type" : "byte[][]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "impTabR_GROUP_NUMBERS_WITH_R",
    "type" : "byte[][]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "impTab_GROUP_NUMBERS_WITH_R",
    "type" : "ImpTabPair",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "impTabL_INVERSE_NUMBERS_AS_L",
    "type" : "byte[][]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "impTabR_INVERSE_NUMBERS_AS_L",
    "type" : "byte[][]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "impTab_INVERSE_NUMBERS_AS_L",
    "type" : "ImpTabPair",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "impTabR_INVERSE_LIKE_DIRECT",
    "type" : "byte[][]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "impAct1",
    "type" : "short[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "impTab_INVERSE_LIKE_DIRECT",
    "type" : "ImpTabPair",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "impTabL_INVERSE_LIKE_DIRECT_WITH_MARKS",
    "type" : "byte[][]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "impTabR_INVERSE_LIKE_DIRECT_WITH_MARKS",
    "type" : "byte[][]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "impAct2",
    "type" : "short[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "impAct3",
    "type" : "short[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "impTab_INVERSE_LIKE_DIRECT_WITH_MARKS",
    "type" : "ImpTabPair",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "impTab_INVERSE_FOR_NUMBERS_SPECIAL",
    "type" : "ImpTabPair",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "impTabL_INVERSE_FOR_NUMBERS_SPECIAL_WITH_MARKS",
    "type" : "byte[][]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "impTab_INVERSE_FOR_NUMBERS_SPECIAL_WITH_MARKS",
    "type" : "ImpTabPair",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FIRSTALLOC",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DIRECTION_LEFT_TO_RIGHT",
    "type" : "int",
    "comment" : "\n     * Constant indicating base direction is left-to-right.\n     ",
    "links" : [ ]
  }, {
    "name" : "DIRECTION_RIGHT_TO_LEFT",
    "type" : "int",
    "comment" : "\n     * Constant indicating base direction is right-to-left.\n     ",
    "links" : [ ]
  }, {
    "name" : "DIRECTION_DEFAULT_LEFT_TO_RIGHT",
    "type" : "int",
    "comment" : "\n     * Constant indicating that the base direction depends on the first strong\n     * directional character in the text according to the Unicode Bidirectional\n     * Algorithm. If no strong directional character is present, the base\n     * direction is left-to-right.\n     ",
    "links" : [ ]
  }, {
    "name" : "DIRECTION_DEFAULT_RIGHT_TO_LEFT",
    "type" : "int",
    "comment" : "\n     * Constant indicating that the base direction depends on the first strong\n     * directional character in the text according to the Unicode Bidirectional\n     * Algorithm. If no strong directional character is present, the base\n     * direction is right-to-left.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " static int DirPropFlag(byte dir)",
    "returnType" : "int",
    "comment" : "\n     * Sometimes, bit values are more appropriate\n     * to deal with directionality properties.\n     * Abbreviations in these method names refer to names\n     * used in the Bidi algorithm.\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean testDirPropFlagAt(int flag, int index)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static final int DirPropFlagLR(byte level)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static final int DirPropFlagE(byte level)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static final int DirPropFlagO(byte level)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static final byte DirFromStrong(byte strong)",
    "returnType" : "byte",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static final byte NoOverride(byte level)",
    "returnType" : "byte",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static byte GetLRFromLevel(byte level)",
    "returnType" : "byte",
    "comment" : "\n     *  the dirProp's L and R are defined to 0 and 1 values in UCharacterDirection.java\n     ",
    "links" : [ ]
  }, {
    "name" : " static boolean IsDefaultLevel(byte level)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static boolean IsBidiControlChar(int c)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void verifyValidPara()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void verifyValidParaOrLine()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void verifyRange(int index, int start, int limit)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Object getMemory(String label, Object array, Class<?> arrayClass, boolean mayAllocate, int sizeNeeded)",
    "returnType" : "Object",
    "comment" : "\n     * We are allowed to allocate memory if object==null or\n     * mayAllocate==true for each array that we need.\n     *\n     * Assume sizeNeeded>0.\n     * If object != null, then assume size > 0.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void getDirPropsMemory(boolean mayAllocate, int len)",
    "returnType" : "void",
    "comment" : " helper methods for each allocated array ",
    "links" : [ ]
  }, {
    "name" : " void getDirPropsMemory(int len)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void getLevelsMemory(boolean mayAllocate, int len)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void getLevelsMemory(int len)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void getRunsMemory(boolean mayAllocate, int len)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void getRunsMemory(int len)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void getInitialDirPropsMemory(int len)",
    "returnType" : "void",
    "comment" : " additional methods used by constructor - always allow allocation ",
    "links" : [ ]
  }, {
    "name" : "private void getInitialLevelsMemory(int len)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void getInitialRunsMemory(int len)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setInverse(boolean isInverse)",
    "returnType" : "void",
    "comment" : "\n     * Modify the operation of the Bidi algorithm such that it\n     * approximates an \"inverse Bidi\" algorithm. This method\n     * must be called before <code>setPara()</code>.\n     *\n     * <p>The normal operation of the Bidi algorithm as described\n     * in the Unicode Technical Report is to take text stored in logical\n     * (keyboard, typing) order and to determine the reordering of it for visual\n     * rendering.\n     * Some legacy systems store text in visual order, and for operations\n     * with standard, Unicode-based algorithms, the text needs to be transformed\n     * to logical order. This is effectively the inverse algorithm of the\n     * described Bidi algorithm. Note that there is no standard algorithm for\n     * this \"inverse Bidi\" and that the current implementation provides only an\n     * approximation of \"inverse Bidi\".\n     *\n     * <p>With <code>isInversed</code> set to <code>true</code>,\n     * this method changes the behavior of some of the subsequent methods\n     * in a way that they can be used for the inverse Bidi algorithm.\n     * Specifically, runs of text with numeric characters will be treated in a\n     * special way and may need to be surrounded with LRM characters when they are\n     * written in reordered sequence.\n     *\n     * <p>Output runs should be retrieved using <code>getVisualRun()</code>.\n     * Since the actual input for \"inverse Bidi\" is visually ordered text and\n     * <code>getVisualRun()</code> gets the reordered runs, these are actually\n     * the runs of the logically ordered output.\n     *\n     * <p>Calling this method with argument <code>isInverse</code> set to\n     * <code>true</code> is equivalent to calling <code>setReorderingMode</code>\n     * with argument <code>reorderingMode</code>\n     * set to <code>REORDER_INVERSE_NUMBERS_AS_L</code>.<br>\n     * Calling this method with argument <code>isInverse</code> set to\n     * <code>false</code> is equivalent to calling <code>setReorderingMode</code>\n     * with argument <code>reorderingMode</code>\n     * set to <code>REORDER_DEFAULT</code>.\n     *\n     * @param isInverse specifies \"forward\" or \"inverse\" Bidi operation.\n     *\n     * @see #setPara\n     * @see #writeReordered\n     * @see #setReorderingMode\n     * @see #REORDER_INVERSE_NUMBERS_AS_L\n     * @see #REORDER_DEFAULT\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isInverse()",
    "returnType" : "boolean",
    "comment" : "\n     * Is this <code>Bidi</code> object set to perform the inverse Bidi\n     * algorithm?\n     * <p>Note: calling this method after setting the reordering mode with\n     * <code>setReorderingMode</code> will return <code>true</code> if the\n     * reordering mode was set to\n     * <code>REORDER_INVERSE_NUMBERS_AS_L</code>, <code>false</code>\n     * for all other values.\n     *\n     * @return <code>true</code> if the <code>Bidi</code> object is set to\n     * perform the inverse Bidi algorithm by handling numbers as L.\n     *\n     * @see #setInverse\n     * @see #setReorderingMode\n     * @see #REORDER_INVERSE_NUMBERS_AS_L\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setReorderingMode(int reorderingMode)",
    "returnType" : "void",
    "comment" : "\n     * Modify the operation of the Bidi algorithm such that it implements some\n     * variant to the basic Bidi algorithm or approximates an \"inverse Bidi\"\n     * algorithm, depending on different values of the \"reordering mode\".\n     * This method must be called before <code>setPara()</code>, and stays in\n     * effect until called again with a different argument.\n     *\n     * <p>The normal operation of the Bidi algorithm as described in the Unicode\n     * Standard Annex #9 is to take text stored in logical (keyboard, typing)\n     * order and to determine how to reorder it for visual rendering.\n     *\n     * <p>With the reordering mode set to a value other than\n     * <code>REORDER_DEFAULT</code>, this method changes the behavior of some of\n     * the subsequent methods in a way such that they implement an inverse Bidi\n     * algorithm or some other algorithm variants.\n     *\n     * <p>Some legacy systems store text in visual order, and for operations\n     * with standard, Unicode-based algorithms, the text needs to be transformed\n     * into logical order. This is effectively the inverse algorithm of the\n     * described Bidi algorithm. Note that there is no standard algorithm for\n     * this \"inverse Bidi\", so a number of variants are implemented here.\n     *\n     * <p>In other cases, it may be desirable to emulate some variant of the\n     * Logical to Visual algorithm (e.g. one used in MS Windows), or perform a\n     * Logical to Logical transformation.\n     *\n     * <ul>\n     * <li>When the Reordering Mode is set to\n     * <code>REORDER_DEFAULT</code>,\n     * the standard Bidi Logical to Visual algorithm is applied.</li>\n     *\n     * <li>When the reordering mode is set to\n     * <code>REORDER_NUMBERS_SPECIAL</code>,\n     * the algorithm used to perform Bidi transformations when calling\n     * <code>setPara</code> should approximate the algorithm used in Microsoft\n     * Windows XP rather than strictly conform to the Unicode Bidi algorithm.\n     * <br>\n     * The differences between the basic algorithm and the algorithm addressed\n     * by this option are as follows:\n     * <ul>\n     *   <li>Within text at an even embedding level, the sequence \"123AB\"\n     *   (where AB represent R or AL letters) is transformed to \"123BA\" by the\n     *   Unicode algorithm and to \"BA123\" by the Windows algorithm.</li>\n     *\n     *   <li>Arabic-Indic numbers (AN) are handled by the Windows algorithm just\n     *   like regular numbers (EN).</li>\n     * </ul></li>\n     *\n     * <li>When the reordering mode is set to\n     * <code>REORDER_GROUP_NUMBERS_WITH_R</code>,\n     * numbers located between LTR text and RTL text are associated with the RTL\n     * text. For instance, an LTR paragraph with content \"abc 123 DEF\" (where\n     * upper case letters represent RTL characters) will be transformed to\n     * \"abc FED 123\" (and not \"abc 123 FED\"), \"DEF 123 abc\" will be transformed\n     * to \"123 FED abc\" and \"123 FED abc\" will be transformed to \"DEF 123 abc\".\n     * This makes the algorithm reversible and makes it useful when round trip\n     * (from visual to logical and back to visual) must be achieved without\n     * adding LRM characters. However, this is a variation from the standard\n     * Unicode Bidi algorithm.<br>\n     * The source text should not contain Bidi control characters other than LRM\n     * or RLM.</li>\n     *\n     * <li>When the reordering mode is set to\n     * <code>REORDER_RUNS_ONLY</code>,\n     * a \"Logical to Logical\" transformation must be performed:\n     * <ul>\n     * <li>If the default text level of the source text (argument\n     * <code>paraLevel</code> in <code>setPara</code>) is even, the source text\n     * will be handled as LTR logical text and will be transformed to the RTL\n     * logical text which has the same LTR visual display.</li>\n     * <li>If the default level of the source text is odd, the source text\n     * will be handled as RTL logical text and will be transformed to the\n     * LTR logical text which has the same LTR visual display.</li>\n     * </ul>\n     * This mode may be needed when logical text which is basically Arabic or\n     * Hebrew, with possible included numbers or phrases in English, has to be\n     * displayed as if it had an even embedding level (this can happen if the\n     * displaying application treats all text as if it was basically LTR).\n     * <br>\n     * This mode may also be needed in the reverse case, when logical text which\n     * is basically English, with possible included phrases in Arabic or Hebrew,\n     * has to be displayed as if it had an odd embedding level.\n     * <br>\n     * Both cases could be handled by adding LRE or RLE at the head of the\n     * text, if the display subsystem supports these formatting controls. If it\n     * does not, the problem may be handled by transforming the source text in\n     * this mode before displaying it, so that it will be displayed properly.\n     * <br>\n     * The source text should not contain Bidi control characters other than LRM\n     * or RLM.</li>\n     *\n     * <li>When the reordering mode is set to\n     * <code>REORDER_INVERSE_NUMBERS_AS_L</code>, an \"inverse Bidi\"\n     * algorithm is applied.\n     * Runs of text with numeric characters will be treated like LTR letters and\n     * may need to be surrounded with LRM characters when they are written in\n     * reordered sequence (the option <code>INSERT_LRM_FOR_NUMERIC</code> can\n     * be used with method <code>writeReordered</code> to this end. This mode\n     * is equivalent to calling <code>setInverse()</code> with\n     * argument <code>isInverse</code> set to <code>true</code>.</li>\n     *\n     * <li>When the reordering mode is set to\n     * <code>REORDER_INVERSE_LIKE_DIRECT</code>, the \"direct\" Logical to\n     * Visual Bidi algorithm is used as an approximation of an \"inverse Bidi\"\n     * algorithm. This mode is similar to mode\n     * <code>REORDER_INVERSE_NUMBERS_AS_L</code> but is closer to the\n     * regular Bidi algorithm.\n     * <br>\n     * For example, an LTR paragraph with the content \"FED 123 456 CBA\" (where\n     * upper case represents RTL characters) will be transformed to\n     * \"ABC 456 123 DEF\", as opposed to \"DEF 123 456 ABC\"\n     * with mode <code>REORDER_INVERSE_NUMBERS_AS_L</code>.<br>\n     * When used in conjunction with option\n     * <code>OPTION_INSERT_MARKS</code>, this mode generally\n     * adds Bidi marks to the output significantly more sparingly than mode\n     * <code>REORDER_INVERSE_NUMBERS_AS_L</code>.<br> with option\n     * <code>INSERT_LRM_FOR_NUMERIC</code> in calls to\n     * <code>writeReordered</code>.</li>\n     *\n     * <li>When the reordering mode is set to\n     * <code>REORDER_INVERSE_FOR_NUMBERS_SPECIAL</code>, the Logical to Visual\n     * Bidi algorithm used in Windows XP is used as an approximation of an \"inverse\n     * Bidi\" algorithm.\n     * <br>\n     * For example, an LTR paragraph with the content \"abc FED123\" (where\n     * upper case represents RTL characters) will be transformed to\n     * \"abc 123DEF.</li>\n     * </ul>\n     *\n     * <p>In all the reordering modes specifying an \"inverse Bidi\" algorithm\n     * (i.e. those with a name starting with <code>REORDER_INVERSE</code>),\n     * output runs should be retrieved using <code>getVisualRun()</code>, and\n     * the output text with <code>writeReordered()</code>. The caller should\n     * keep in mind that in \"inverse Bidi\" modes the input is actually visually\n     * ordered text and reordered output returned by <code>getVisualRun()</code>\n     * or <code>writeReordered()</code> are actually runs or character string\n     * of logically ordered output.<br>\n     * For all the \"inverse Bidi\" modes, the source text should not contain\n     * Bidi control characters other than LRM or RLM.\n     *\n     * <p>Note that option <code>OUTPUT_REVERSE</code> of\n     * <code>writeReordered</code> has no useful meaning and should not be used\n     * in conjunction with any value of the reordering mode specifying \"inverse\n     * Bidi\" or with value <code>REORDER_RUNS_ONLY</code>.\n     *\n     * @param reorderingMode specifies the required variant of the Bidi\n     *                       algorithm.\n     *\n     * @see #setInverse\n     * @see #setPara\n     * @see #writeReordered\n     * @see #INSERT_LRM_FOR_NUMERIC\n     * @see #OUTPUT_REVERSE\n     * @see #REORDER_DEFAULT\n     * @see #REORDER_NUMBERS_SPECIAL\n     * @see #REORDER_GROUP_NUMBERS_WITH_R\n     * @see #REORDER_RUNS_ONLY\n     * @see #REORDER_INVERSE_NUMBERS_AS_L\n     * @see #REORDER_INVERSE_LIKE_DIRECT\n     * @see #REORDER_INVERSE_FOR_NUMBERS_SPECIAL\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getReorderingMode()",
    "returnType" : "int",
    "comment" : "\n     * What is the requested reordering mode for a given Bidi object?\n     *\n     * @return the current reordering mode of the Bidi object\n     *\n     * @see #setReorderingMode\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setReorderingOptions(int options)",
    "returnType" : "void",
    "comment" : "\n     * Specify which of the reordering options should be applied during Bidi\n     * transformations.\n     *\n     * @param options A combination of zero or more of the following\n     * reordering options:\n     * <code>OPTION_DEFAULT</code>, <code>OPTION_INSERT_MARKS</code>,\n     * <code>OPTION_REMOVE_CONTROLS</code>, <code>OPTION_STREAMING</code>.\n     *\n     * @see #getReorderingOptions\n     * @see #OPTION_DEFAULT\n     * @see #OPTION_INSERT_MARKS\n     * @see #OPTION_REMOVE_CONTROLS\n     * @see #OPTION_STREAMING\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getReorderingOptions()",
    "returnType" : "int",
    "comment" : "\n     * What are the reordering options applied to a given Bidi object?\n     *\n     * @return the current reordering options of the Bidi object\n     *\n     * @see #setReorderingOptions\n     ",
    "links" : [ ]
  }, {
    "name" : "public static byte getBaseDirection(CharSequence paragraph)",
    "returnType" : "byte",
    "comment" : "\n     * Get the base direction of the text provided according to the Unicode\n     * Bidirectional Algorithm. The base direction is derived from the first\n     * character in the string with bidirectional character type L, R, or AL.\n     * If the first such character has type L, LTR is returned. If the first\n     * such character has type R or AL, RTL is returned. If the string does\n     * not contain any character of these types, then NEUTRAL is returned.\n     * This is a lightweight function for use when only the base direction is\n     * needed and no further bidi processing of the text is needed.\n     * @param paragraph the text whose paragraph level direction is needed.\n     * @return LTR, RTL, NEUTRAL\n     * @see #LTR\n     * @see #RTL\n     * @see #NEUTRAL\n     ",
    "links" : [ ]
  }, {
    "name" : "private byte firstL_R_AL()",
    "returnType" : "byte",
    "comment" : "\n     * Returns the directionality of the first strong character\n     * after the last B in prologue, if any.\n     * Requires prologue!=null.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void checkParaCount()",
    "returnType" : "void",
    "comment" : "\n     * Check that there are enough entries in the arrays paras_limit and paras_level\n     ",
    "links" : [ ]
  }, {
    "name" : "private void getDirProps()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " byte GetParaLevelAt(int pindex)",
    "returnType" : "byte",
    "comment" : " determine the paragraph level at position index ",
    "links" : [ ]
  }, {
    "name" : "private void bracketInit(BracketData bd)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void bracketProcessB(BracketData bd, byte level)",
    "returnType" : "void",
    "comment" : " paragraph boundary ",
    "links" : [ ]
  }, {
    "name" : "private void bracketProcessBoundary(BracketData bd, int lastCcPos, byte contextLevel, byte embeddingLevel)",
    "returnType" : "void",
    "comment" : " LRE, LRO, RLE, RLO, PDF ",
    "links" : [ ]
  }, {
    "name" : "private void bracketProcessLRI_RLI(BracketData bd, byte level)",
    "returnType" : "void",
    "comment" : " LRI or RLI ",
    "links" : [ ]
  }, {
    "name" : "private void bracketProcessPDI(BracketData bd)",
    "returnType" : "void",
    "comment" : " PDI ",
    "links" : [ ]
  }, {
    "name" : "private void bracketAddOpening(BracketData bd, char match, int position)",
    "returnType" : "void",
    "comment" : " newly found opening bracket: create an openings entry ",
    "links" : [ ]
  }, {
    "name" : "private void fixN0c(BracketData bd, int openingIndex, int newPropPosition, byte newProp)",
    "returnType" : "void",
    "comment" : " change N0c1 to N0c2 when a preceding bracket is assigned the embedding level ",
    "links" : [ ]
  }, {
    "name" : "private byte bracketProcessClosing(BracketData bd, int openIdx, int position)",
    "returnType" : "byte",
    "comment" : " process closing bracket; return L or R if N0b or N0c, ON if N0d ",
    "links" : [ ]
  }, {
    "name" : "private void bracketProcessChar(BracketData bd, int position)",
    "returnType" : "void",
    "comment" : " handle strong characters, digits and candidates for closing brackets ",
    "links" : [ ]
  }, {
    "name" : "private byte directionFromFlags()",
    "returnType" : "byte",
    "comment" : " determine if the text is mixed-directional or single-directional ",
    "links" : [ ]
  }, {
    "name" : "private byte resolveExplicitLevels()",
    "returnType" : "byte",
    "comment" : "\n * Resolve the explicit levels as specified by explicit embedding codes.\n * Recalculate the flags to have them reflect the real properties\n * after taking the explicit embeddings into account.\n *\n * The BiDi algorithm is designed to result in the same behavior whether embedding\n * levels are externally specified (from \"styled text\", supposedly the preferred\n * method) or set by explicit embedding codes (LRx, RLx, PDF, FSI, PDI) in the plain text.\n * That is why (X9) instructs to remove all not-isolate explicit codes (and BN).\n * However, in a real implementation, the removal of these codes and their index\n * positions in the plain text is undesirable since it would result in\n * reallocated, reindexed text.\n * Instead, this implementation leaves the codes in there and just ignores them\n * in the subsequent processing.\n * In order to get the same reordering behavior, positions with a BN or a not-isolate\n * explicit embedding code just get the same level assigned as the last \"real\"\n * character.\n *\n * Some implementations, not this one, then overwrite some of these\n * directionality properties at \"real\" same-level-run boundaries by\n * L or R codes so that the resolution of weak types can be performed on the\n * entire paragraph at once instead of having to parse it once more and\n * perform that resolution on same-level-runs.\n * This limits the scope of the implicit rules in effectively\n * the same way as the run limits.\n *\n * Instead, this implementation does not modify these codes, except for\n * paired brackets whose properties (ON) may be replaced by L or R.\n * On one hand, the paragraph has to be scanned for same-level-runs, but\n * on the other hand, this saves another loop to reset these codes,\n * or saves making and modifying a copy of dirProps[].\n *\n *\n * Note that (Pn) and (Xn) changed significantly from version 4 of the BiDi algorithm.\n *\n *\n * Handling the stack of explicit levels (Xn):\n *\n * With the BiDi stack of explicit levels, as pushed with each\n * LRE, RLE, LRO, RLO, LRI, RLI and FSI and popped with each PDF and PDI,\n * the explicit level must never exceed MAX_EXPLICIT_LEVEL.\n *\n * In order to have a correct push-pop semantics even in the case of overflows,\n * overflow counters and a valid isolate counter are used as described in UAX#9\n * section 3.3.2 \"Explicit Levels and Directions\".\n *\n * This implementation assumes that MAX_EXPLICIT_LEVEL is odd.\n *\n * Returns the direction\n *\n ",
    "links" : [ ]
  }, {
    "name" : "private byte checkExplicitLevels()",
    "returnType" : "byte",
    "comment" : "\n     * Use a pre-specified embedding levels array:\n     *\n     * <p>Adjust the directional properties for overrides (->LEVEL_OVERRIDE),\n     * ignore all explicit codes (X9),\n     * and check all the preset levels.\n     *\n     * <p>Recalculate the flags to have them reflect the real properties\n     * after taking the explicit embeddings into account.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static short GetStateProps(short cell)",
    "returnType" : "short",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static short GetActionProps(short cell)",
    "returnType" : "short",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static short GetState(byte cell)",
    "returnType" : "short",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static short GetAction(byte cell)",
    "returnType" : "short",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void addPoint(int pos, int flag)",
    "returnType" : "void",
    "comment" : "\n     *  param pos:     position where to insert\n     *  param flag:    one of LRM_BEFORE, LRM_AFTER, RLM_BEFORE, RLM_AFTER\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setLevelsOutsideIsolates(int start, int limit, byte level)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void processPropertySeq(LevState levState, short _prop, int start, int limit)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private byte lastL_R_AL()",
    "returnType" : "byte",
    "comment" : "\n     * Returns the directionality of the last strong character at the end of the prologue, if any.\n     * Requires prologue!=null.\n     ",
    "links" : [ ]
  }, {
    "name" : "private byte firstL_R_AL_EN_AN()",
    "returnType" : "byte",
    "comment" : "\n     * Returns the directionality of the first strong character, or digit, in the epilogue, if any.\n     * Requires epilogue!=null.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void resolveImplicitLevels(int start, int limit, short sor, short eor)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void adjustWSLevels()",
    "returnType" : "void",
    "comment" : "\n     * Reset the embedding levels for some non-graphic characters (L1).\n     * This method also sets appropriate levels for BN, and\n     * explicit embedding types that are supposed to have been removed\n     * from the paragraph in (X9).\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setContext(String prologue, String epilogue)",
    "returnType" : "void",
    "comment" : "\n     * Set the context before a call to setPara().<p>\n     *\n     * setPara() computes the left-right directionality for a given piece\n     * of text which is supplied as one of its arguments. Sometimes this piece\n     * of text (the \"main text\") should be considered in context, because text\n     * appearing before (\"prologue\") and/or after (\"epilogue\") the main text\n     * may affect the result of this computation.<p>\n     *\n     * This function specifies the prologue and/or the epilogue for the next\n     * call to setPara(). If successive calls to setPara()\n     * all need specification of a context, setContext() must be called\n     * before each call to setPara(). In other words, a context is not\n     * \"remembered\" after the following successful call to setPara().<p>\n     *\n     * If a call to setPara() specifies DEFAULT_LTR or\n     * DEFAULT_RTL as paraLevel and is preceded by a call to\n     * setContext() which specifies a prologue, the paragraph level will\n     * be computed taking in consideration the text in the prologue.<p>\n     *\n     * When setPara() is called without a previous call to\n     * setContext, the main text is handled as if preceded and followed\n     * by strong directional characters at the current paragraph level.\n     * Calling setContext() with specification of a prologue will change\n     * this behavior by handling the main text as if preceded by the last\n     * strong character appearing in the prologue, if any.\n     * Calling setContext() with specification of an epilogue will change\n     * the behavior of setPara() by handling the main text as if followed\n     * by the first strong character or digit appearing in the epilogue, if any.<p>\n     *\n     * Note 1: if <code>setContext</code> is called repeatedly without\n     *         calling <code>setPara</code>, the earlier calls have no effect,\n     *         only the last call will be remembered for the next call to\n     *         <code>setPara</code>.<p>\n     *\n     * Note 2: calling <code>setContext(null, null)</code>\n     *         cancels any previous setting of non-empty prologue or epilogue.\n     *         The next call to <code>setPara()</code> will process no\n     *         prologue or epilogue.<p>\n     *\n     * Note 3: users must be aware that even after setting the context\n     *         before a call to setPara() to perform e.g. a logical to visual\n     *         transformation, the resulting string may not be identical to what it\n     *         would have been if all the text, including prologue and epilogue, had\n     *         been processed together.<br>\n     * Example (upper case letters represent RTL characters):<br>\n     * &nbsp;&nbsp;prologue = \"<code>abc DE</code>\"<br>\n     * &nbsp;&nbsp;epilogue = none<br>\n     * &nbsp;&nbsp;main text = \"<code>FGH xyz</code>\"<br>\n     * &nbsp;&nbsp;paraLevel = LTR<br>\n     * &nbsp;&nbsp;display without prologue = \"<code>HGF xyz</code>\"\n     *             (\"HGF\" is adjacent to \"xyz\")<br>\n     * &nbsp;&nbsp;display with prologue = \"<code>abc HGFED xyz</code>\"\n     *             (\"HGF\" is not adjacent to \"xyz\")<br>\n     *\n     * @param prologue is the text which precedes the text that\n     *        will be specified in a coming call to setPara().\n     *        If there is no prologue to consider,\n     *        this parameter can be <code>null</code>.\n     *\n     * @param epilogue is the text which follows the text that\n     *        will be specified in a coming call to setPara().\n     *        If there is no epilogue to consider,\n     *        this parameter can be <code>null</code>.\n     *\n     * @see #setPara\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setParaSuccess()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " int Bidi_Min(int x, int y)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " int Bidi_Abs(int x)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void setParaRunsOnly(char[] parmText, byte parmParaLevel)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setPara(String text, byte paraLevel, byte[] embeddingLevels)",
    "returnType" : "void",
    "comment" : "\n     * Perform the Unicode Bidi algorithm. It is defined in the\n     * <a href=\"http://www.unicode.org/reports/tr9/\">Unicode Standard Annex #9</a>.\n     *\n     * <p>This method takes a piece of plain text containing one or more paragraphs,\n     * with or without externally specified embedding levels from <i>styled</i>\n     * text and computes the left-right-directionality of each character.</p>\n     *\n     * <p>If the entire text is all of the same directionality, then\n     * the method may not perform all the steps described by the algorithm,\n     * i.e., some levels may not be the same as if all steps were performed.\n     * This is not relevant for unidirectional text.<br>\n     * For example, in pure LTR text with numbers the numbers would get\n     * a resolved level of 2 higher than the surrounding text according to\n     * the algorithm. This implementation may set all resolved levels to\n     * the same value in such a case.</p>\n     *\n     * <p>The text can be composed of multiple paragraphs. Occurrence of a block\n     * separator in the text terminates a paragraph, and whatever comes next starts\n     * a new paragraph. The exception to this rule is when a Carriage Return (CR)\n     * is followed by a Line Feed (LF). Both CR and LF are block separators, but\n     * in that case, the pair of characters is considered as terminating the\n     * preceding paragraph, and a new paragraph will be started by a character\n     * coming after the LF.\n     *\n     * <p>Although the text is passed here as a <code>String</code>, it is\n     * stored internally as an array of characters. Therefore the\n     * documentation will refer to indexes of the characters in the text.\n     *\n     * @param text contains the text that the Bidi algorithm will be performed\n     *        on. This text can be retrieved with <code>getText()</code> or\n     *        <code>getTextAsString</code>.<br>\n     *\n     * @param paraLevel specifies the default level for the text;\n     *        it is typically 0 (LTR) or 1 (RTL).\n     *        If the method shall determine the paragraph level from the text,\n     *        then <code>paraLevel</code> can be set to\n     *        either <code>LEVEL_DEFAULT_LTR</code>\n     *        or <code>LEVEL_DEFAULT_RTL</code>; if the text contains multiple\n     *        paragraphs, the paragraph level shall be determined separately for\n     *        each paragraph; if a paragraph does not include any strongly typed\n     *        character, then the desired default is used (0 for LTR or 1 for RTL).\n     *        Any other value between 0 and <code>MAX_EXPLICIT_LEVEL</code>\n     *        is also valid, with odd levels indicating RTL.\n     *\n     * @param embeddingLevels (in) may be used to preset the embedding and override levels,\n     *        ignoring characters like LRE and PDF in the text.\n     *        A level overrides the directional property of its corresponding\n     *        (same index) character if the level has the\n     *        <code>LEVEL_OVERRIDE</code> bit set.<br><br>\n     *        Aside from that bit, it must be\n     *        <code>paraLevel&lt;=embeddingLevels[]&lt;=MAX_EXPLICIT_LEVEL</code>,\n     *        except that level 0 is always allowed.\n     *        Level 0 for a paragraph separator prevents reordering of paragraphs;\n     *        this only works reliably if <code>LEVEL_OVERRIDE</code>\n     *        is also set for paragraph separators.\n     *        Level 0 for other characters is treated as a wildcard\n     *        and is lifted up to the resolved level of the surrounding paragraph.<br><br>\n     *        <strong>Caution: </strong>A reference to this array, not a copy\n     *        of the levels, will be stored in the <code>Bidi</code> object;\n     *        the <code>embeddingLevels</code>\n     *        should not be modified to avoid unexpected results on subsequent\n     *        Bidi operations. However, the <code>setPara()</code> and\n     *        <code>setLine()</code> methods may modify some or all of the\n     *        levels.<br><br>\n     *        <strong>Note:</strong> the <code>embeddingLevels</code> array must\n     *        have one entry for each character in <code>text</code>.\n     *\n     * @throws IllegalArgumentException if the values in embeddingLevels are\n     *         not within the allowed range\n     *\n     * @see #LEVEL_DEFAULT_LTR\n     * @see #LEVEL_DEFAULT_RTL\n     * @see #LEVEL_OVERRIDE\n     * @see #MAX_EXPLICIT_LEVEL\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPara(char[] chars, byte paraLevel, byte[] embeddingLevels)",
    "returnType" : "void",
    "comment" : "\n     * Perform the Unicode Bidi algorithm. It is defined in the\n     * <a href=\"http://www.unicode.org/reports/tr9/\">Unicode Standard Annex #9</a>.\n     *\n     * <p>This method takes a piece of plain text containing one or more paragraphs,\n     * with or without externally specified embedding levels from <i>styled</i>\n     * text and computes the left-right-directionality of each character.</p>\n     *\n     * <p>If the entire text is all of the same directionality, then\n     * the method may not perform all the steps described by the algorithm,\n     * i.e., some levels may not be the same as if all steps were performed.\n     * This is not relevant for unidirectional text.<br>\n     * For example, in pure LTR text with numbers the numbers would get\n     * a resolved level of 2 higher than the surrounding text according to\n     * the algorithm. This implementation may set all resolved levels to\n     * the same value in such a case.</p>\n     *\n     * <p>The text can be composed of multiple paragraphs. Occurrence of a block\n     * separator in the text terminates a paragraph, and whatever comes next starts\n     * a new paragraph. The exception to this rule is when a Carriage Return (CR)\n     * is followed by a Line Feed (LF). Both CR and LF are block separators, but\n     * in that case, the pair of characters is considered as terminating the\n     * preceding paragraph, and a new paragraph will be started by a character\n     * coming after the LF.\n     *\n     * <p>The text is stored internally as an array of characters. Therefore the\n     * documentation will refer to indexes of the characters in the text.\n     *\n     * @param chars contains the text that the Bidi algorithm will be performed\n     *        on. This text can be retrieved with <code>getText()</code> or\n     *        <code>getTextAsString</code>.<br>\n     *\n     * @param paraLevel specifies the default level for the text;\n     *        it is typically 0 (LTR) or 1 (RTL).\n     *        If the method shall determine the paragraph level from the text,\n     *        then <code>paraLevel</code> can be set to\n     *        either <code>LEVEL_DEFAULT_LTR</code>\n     *        or <code>LEVEL_DEFAULT_RTL</code>; if the text contains multiple\n     *        paragraphs, the paragraph level shall be determined separately for\n     *        each paragraph; if a paragraph does not include any strongly typed\n     *        character, then the desired default is used (0 for LTR or 1 for RTL).\n     *        Any other value between 0 and <code>MAX_EXPLICIT_LEVEL</code>\n     *        is also valid, with odd levels indicating RTL.\n     *\n     * @param embeddingLevels (in) may be used to preset the embedding and\n     *        override levels, ignoring characters like LRE and PDF in the text.\n     *        A level overrides the directional property of its corresponding\n     *        (same index) character if the level has the\n     *        <code>LEVEL_OVERRIDE</code> bit set.<br><br>\n     *        Aside from that bit, it must be\n     *        <code>paraLevel&lt;=embeddingLevels[]&lt;=MAX_EXPLICIT_LEVEL</code>,\n     *        except that level 0 is always allowed.\n     *        Level 0 for a paragraph separator prevents reordering of paragraphs;\n     *        this only works reliably if <code>LEVEL_OVERRIDE</code>\n     *        is also set for paragraph separators.\n     *        Level 0 for other characters is treated as a wildcard\n     *        and is lifted up to the resolved level of the surrounding paragraph.<br><br>\n     *        <strong>Caution: </strong>A reference to this array, not a copy\n     *        of the levels, will be stored in the <code>Bidi</code> object;\n     *        the <code>embeddingLevels</code>\n     *        should not be modified to avoid unexpected results on subsequent\n     *        Bidi operations. However, the <code>setPara()</code> and\n     *        <code>setLine()</code> methods may modify some or all of the\n     *        levels.<br><br>\n     *        <strong>Note:</strong> the <code>embeddingLevels</code> array must\n     *        have one entry for each character in <code>text</code>.\n     *\n     * @throws IllegalArgumentException if the values in embeddingLevels are\n     *         not within the allowed range\n     *\n     * @see #LEVEL_DEFAULT_LTR\n     * @see #LEVEL_DEFAULT_RTL\n     * @see #LEVEL_OVERRIDE\n     * @see #MAX_EXPLICIT_LEVEL\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPara(AttributedCharacterIterator paragraph)",
    "returnType" : "void",
    "comment" : "\n     * Perform the Unicode Bidi algorithm on a given paragraph, as defined in the\n     * <a href=\"https://www.unicode.org/reports/tr9/\">Unicode Standard Annex #9</a>,\n     * version 13,\n     * also described in The Unicode Standard, Version 4.0 .<p>\n     *\n     * This method takes a paragraph of text and computes the\n     * left-right-directionality of each character. The text should not\n     * contain any Unicode block separators.<p>\n     *\n     * The RUN_DIRECTION attribute in the text, if present, determines the base\n     * direction (left-to-right or right-to-left). If not present, the base\n     * direction is computed using the Unicode Bidirectional Algorithm,\n     * defaulting to left-to-right if there are no strong directional characters\n     * in the text. This attribute, if present, must be applied to all the text\n     * in the paragraph.<p>\n     *\n     * The BIDI_EMBEDDING attribute in the text, if present, represents\n     * embedding level information.\n     * Negative values indicate overrides at the absolute value of the level.\n     * Positive values indicate embeddings. (See {@link #MAX_EXPLICIT_LEVEL}.)\n     * Where values are zero or not defined, the base\n     * embedding level as determined by the base direction is assumed.<p>\n     *\n     * The NUMERIC_SHAPING attribute in the text, if present, converts European\n     * digits to other decimal digits before running the bidi algorithm. This\n     * attribute, if present, must be applied to all the text in the paragraph.\n     *\n     * If the entire text is all of the same directionality, then\n     * the method may not perform all the steps described by the algorithm,\n     * i.e., some levels may not be the same as if all steps were performed.\n     * This is not relevant for unidirectional text.<br>\n     * For example, in pure LTR text with numbers the numbers would get\n     * a resolved level of 2 higher than the surrounding text according to\n     * the algorithm. This implementation may set all resolved levels to\n     * the same value in such a case.<p>\n     *\n     * @param paragraph a paragraph of text with optional character and\n     *        paragraph attribute information\n     ",
    "links" : [ "#MAX_EXPLICIT_LEVEL" ]
  }, {
    "name" : "public void orderParagraphsLTR(boolean ordarParaLTR)",
    "returnType" : "void",
    "comment" : "\n     * Specify whether block separators must be allocated level zero,\n     * so that successive paragraphs will progress from left to right.\n     * This method must be called before <code>setPara()</code>.\n     * Paragraph separators (B) may appear in the text.  Setting them to level zero\n     * means that all paragraph separators (including one possibly appearing\n     * in the last text position) are kept in the reordered text after the text\n     * that they follow in the source text.\n     * When this feature is not enabled, a paragraph separator at the last\n     * position of the text before reordering will go to the first position\n     * of the reordered text when the paragraph level is odd.\n     *\n     * @param ordarParaLTR specifies whether paragraph separators (B) must\n     * receive level 0, so that successive paragraphs progress from left to right.\n     *\n     * @see #setPara\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isOrderParagraphsLTR()",
    "returnType" : "boolean",
    "comment" : "\n     * Is this <code>Bidi</code> object set to allocate level 0 to block\n     * separators so that successive paragraphs progress from left to right?\n     *\n     * @return <code>true</code> if the <code>Bidi</code> object is set to\n     *         allocate level 0 to block separators.\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte getDirection()",
    "returnType" : "byte",
    "comment" : "\n     * Get the directionality of the text.\n     *\n     * @return a value of <code>LTR</code>, <code>RTL</code> or <code>MIXED</code>\n     *         that indicates if the entire text\n     *         represented by this object is unidirectional,\n     *         and which direction, or if it is mixed-directional.\n     *\n     * @throws IllegalStateException if this call is not preceded by a successful\n     *         call to <code>setPara</code> or <code>setLine</code>\n     *\n     * @see #LTR\n     * @see #RTL\n     * @see #MIXED\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getTextAsString()",
    "returnType" : "String",
    "comment" : "\n     * Get the text.\n     *\n     * @return A <code>String</code> containing the text that the\n     *         <code>Bidi</code> object was created for.\n     *\n     * @throws IllegalStateException if this call is not preceded by a successful\n     *         call to <code>setPara</code> or <code>setLine</code>\n     *\n     * @see #setPara\n     * @see #setLine\n     ",
    "links" : [ ]
  }, {
    "name" : "public char[] getText()",
    "returnType" : "char[]",
    "comment" : "\n     * Get the text.\n     *\n     * @return A <code>char</code> array containing the text that the\n     *         <code>Bidi</code> object was created for.\n     *\n     * @throws IllegalStateException if this call is not preceded by a successful\n     *         call to <code>setPara</code> or <code>setLine</code>\n     *\n     * @see #setPara\n     * @see #setLine\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getLength()",
    "returnType" : "int",
    "comment" : "\n     * Get the length of the text.\n     *\n     * @return The length of the text that the <code>Bidi</code> object was\n     *         created for.\n     *\n     * @throws IllegalStateException if this call is not preceded by a successful\n     *         call to <code>setPara</code> or <code>setLine</code>\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getProcessedLength()",
    "returnType" : "int",
    "comment" : "\n     * Get the length of the source text processed by the last call to\n     * <code>setPara()</code>. This length may be different from the length of\n     * the source text if option <code>OPTION_STREAMING</code> has been\n     * set.\n     * <br>\n     * Note that whenever the length of the text affects the execution or the\n     * result of a method, it is the processed length which must be considered,\n     * except for <code>setPara</code> (which receives unprocessed source text)\n     * and <code>getLength</code> (which returns the original length of the\n     * source text).<br>\n     * In particular, the processed length is the one to consider in the\n     * following cases:\n     * <ul>\n     * <li>maximum value of the <code>limit</code> argument of\n     * <code>setLine</code></li>\n     * <li>maximum value of the <code>charIndex</code> argument of\n     * <code>getParagraph</code></li>\n     * <li>maximum value of the <code>charIndex</code> argument of\n     * <code>getLevelAt</code></li>\n     * <li>number of elements in the array returned by <code>getLevels</code>\n     * </li>\n     * <li>maximum value of the <code>logicalStart</code> argument of\n     * <code>getLogicalRun</code></li>\n     * <li>maximum value of the <code>logicalIndex</code> argument of\n     * <code>getVisualIndex</code></li>\n     * <li>number of elements returned by <code>getLogicalMap</code></li>\n     * <li>length of text processed by <code>writeReordered</code></li>\n     * </ul>\n     *\n     * @return The length of the part of the source text processed by\n     *         the last call to <code>setPara</code>.\n     *\n     * @throws IllegalStateException if this call is not preceded by a successful\n     *         call to <code>setPara</code> or <code>setLine</code>\n     *\n     * @see #setPara\n     * @see #OPTION_STREAMING\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getResultLength()",
    "returnType" : "int",
    "comment" : "\n     * Get the length of the reordered text resulting from the last call to\n     * <code>setPara()</code>. This length may be different from the length\n     * of the source text if option <code>OPTION_INSERT_MARKS</code>\n     * or option <code>OPTION_REMOVE_CONTROLS</code> has been set.\n     * <br>\n     * This resulting length is the one to consider in the following cases:\n     * <ul>\n     * <li>maximum value of the <code>visualIndex</code> argument of\n     * <code>getLogicalIndex</code></li>\n     * <li>number of elements returned by <code>getVisualMap</code></li>\n     * </ul>\n     * Note that this length stays identical to the source text length if\n     * Bidi marks are inserted or removed using option bits of\n     * <code>writeReordered</code>, or if option\n     * <code>REORDER_INVERSE_NUMBERS_AS_L</code> has been set.\n     *\n     * @return The length of the reordered text resulting from\n     *         the last call to <code>setPara</code>.\n     *\n     * @throws IllegalStateException if this call is not preceded by a successful\n     *         call to <code>setPara</code> or <code>setLine</code>\n     *\n     * @see #setPara\n     * @see #OPTION_INSERT_MARKS\n     * @see #OPTION_REMOVE_CONTROLS\n     * @see #REORDER_INVERSE_NUMBERS_AS_L\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte getParaLevel()",
    "returnType" : "byte",
    "comment" : "\n     * Get the paragraph level of the text.\n     *\n     * @return The paragraph level. If there are multiple paragraphs, their\n     *         level may vary if the required paraLevel is LEVEL_DEFAULT_LTR or\n     *         LEVEL_DEFAULT_RTL.  In that case, the level of the first paragraph\n     *         is returned.\n     *\n     * @throws IllegalStateException if this call is not preceded by a successful\n     *         call to <code>setPara</code> or <code>setLine</code>\n     *\n     * @see #LEVEL_DEFAULT_LTR\n     * @see #LEVEL_DEFAULT_RTL\n     * @see #getParagraph\n     * @see #getParagraphByIndex\n     ",
    "links" : [ ]
  }, {
    "name" : "public int countParagraphs()",
    "returnType" : "int",
    "comment" : "\n     * Get the number of paragraphs.\n     *\n     * @return The number of paragraphs.\n     *\n     * @throws IllegalStateException if this call is not preceded by a successful\n     *         call to <code>setPara</code> or <code>setLine</code>\n     ",
    "links" : [ ]
  }, {
    "name" : "public BidiRun getParagraphByIndex(int paraIndex)",
    "returnType" : "BidiRun",
    "comment" : "\n     * Get a paragraph, given the index of this paragraph.\n     *\n     * This method returns information about a paragraph.<p>\n     *\n     * @param paraIndex is the number of the paragraph, in the\n     *        range <code>[0..countParagraphs()-1]</code>.\n     *\n     * @return a BidiRun object with the details of the paragraph:<br>\n     *        <code>start</code> will receive the index of the first character\n     *        of the paragraph in the text.<br>\n     *        <code>limit</code> will receive the limit of the paragraph.<br>\n     *        <code>embeddingLevel</code> will receive the level of the paragraph.\n     *\n     * @throws IllegalStateException if this call is not preceded by a successful\n     *         call to <code>setPara</code> or <code>setLine</code>\n     * @throws IllegalArgumentException if paraIndex is not in the range\n     *        <code>[0..countParagraphs()-1]</code>\n     *\n     * @see android.icu.text.BidiRun\n     ",
    "links" : [ ]
  }, {
    "name" : "public BidiRun getParagraph(int charIndex)",
    "returnType" : "BidiRun",
    "comment" : "\n     * Get a paragraph, given a position within the text.\n     * This method returns information about a paragraph.<br>\n     * Note: if the paragraph index is known, it is more efficient to\n     * retrieve the paragraph information using getParagraphByIndex().<p>\n     *\n     * @param charIndex is the index of a character within the text, in the\n     *        range <code>[0..getProcessedLength()-1]</code>.\n     *\n     * @return a BidiRun object with the details of the paragraph:<br>\n     *        <code>start</code> will receive the index of the first character\n     *        of the paragraph in the text.<br>\n     *        <code>limit</code> will receive the limit of the paragraph.<br>\n     *        <code>embeddingLevel</code> will receive the level of the paragraph.\n     *\n     * @throws IllegalStateException if this call is not preceded by a successful\n     *         call to <code>setPara</code> or <code>setLine</code>\n     * @throws IllegalArgumentException if charIndex is not within the legal range\n     *\n     * @see android.icu.text.BidiRun\n     * @see #getParagraphByIndex\n     * @see #getProcessedLength\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getParagraphIndex(int charIndex)",
    "returnType" : "int",
    "comment" : "\n     * Get the index of a paragraph, given a position within the text.<p>\n     *\n     * @param charIndex is the index of a character within the text, in the\n     *        range <code>[0..getProcessedLength()-1]</code>.\n     *\n     * @return The index of the paragraph containing the specified position,\n     *         starting from 0.\n     *\n     * @throws IllegalStateException if this call is not preceded by a successful\n     *         call to <code>setPara</code> or <code>setLine</code>\n     * @throws IllegalArgumentException if charIndex is not within the legal range\n     *\n     * @see android.icu.text.BidiRun\n     * @see #getProcessedLength\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCustomClassifier(BidiClassifier classifier)",
    "returnType" : "void",
    "comment" : "\n     * Set a custom Bidi classifier used by the UBA implementation for Bidi\n     * class determination.\n     *\n     * @param classifier A new custom classifier. This can be null.\n     *\n     * @see #getCustomClassifier\n     ",
    "links" : [ ]
  }, {
    "name" : "public BidiClassifier getCustomClassifier()",
    "returnType" : "BidiClassifier",
    "comment" : "\n     * Gets the current custom class classifier used for Bidi class\n     * determination.\n     *\n     * @return An instance of class <code>BidiClassifier</code>\n     *\n     * @see #setCustomClassifier\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getCustomizedClass(int c)",
    "returnType" : "int",
    "comment" : "\n     * Retrieves the Bidi class for a given code point.\n     * <p>If a <code>BidiClassifier</code> is defined and returns a value\n     * other than <code>UCharacter.getIntPropertyMaxValue(UProperty.BIDI_CLASS)+1</code>,\n     * that value is used; otherwise the default class determination mechanism is invoked.\n     *\n     * @param c The code point to get a Bidi class for.\n     *\n     * @return The Bidi class for the character <code>c</code> that is in effect\n     *         for this <code>Bidi</code> instance.\n     *\n     * @see BidiClassifier\n     ",
    "links" : [ ]
  }, {
    "name" : "public Bidi setLine(int start, int limit)",
    "returnType" : "Bidi",
    "comment" : "\n     * <code>setLine()</code> returns a <code>Bidi</code> object to\n     * contain the reordering information, especially the resolved levels,\n     * for all the characters in a line of text. This line of text is\n     * specified by referring to a <code>Bidi</code> object representing\n     * this information for a piece of text containing one or more paragraphs,\n     * and by specifying a range of indexes in this text.<p>\n     * In the new line object, the indexes will range from 0 to <code>limit-start-1</code>.<p>\n     *\n     * This is used after calling <code>setPara()</code>\n     * for a piece of text, and after line-breaking on that text.\n     * It is not necessary if each paragraph is treated as a single line.<p>\n     *\n     * After line-breaking, rules (L1) and (L2) for the treatment of\n     * trailing WS and for reordering are performed on\n     * a <code>Bidi</code> object that represents a line.<p>\n     *\n     * <strong>Important: </strong>the line <code>Bidi</code> object may\n     * reference data within the global text <code>Bidi</code> object.\n     * You should not alter the content of the global text object until\n     * you are finished using the line object.\n     *\n     * @param start is the line's first index into the text.\n     *\n     * @param limit is just behind the line's last index into the text\n     *        (its last index +1).\n     *\n     * @return a <code>Bidi</code> object that will now represent a line of the text.\n     *\n     * @throws IllegalStateException if this call is not preceded by a successful\n     *         call to <code>setPara</code>\n     * @throws IllegalArgumentException if start and limit are not in the range\n     *         <code>0&lt;=start&lt;limit&lt;=getProcessedLength()</code>,\n     *         or if the specified line crosses a paragraph boundary\n     *\n     * @see #setPara\n     * @see #getProcessedLength\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte getLevelAt(int charIndex)",
    "returnType" : "byte",
    "comment" : "\n     * Get the level for one character.\n     *\n     * @param charIndex the index of a character.\n     *\n     * @return The level for the character at <code>charIndex</code>.\n     *\n     * @throws IllegalStateException if this call is not preceded by a successful\n     *         call to <code>setPara</code> or <code>setLine</code>\n     * @throws IllegalArgumentException if charIndex is not in the range\n     *         <code>0&lt;=charIndex&lt;getProcessedLength()</code>\n     *\n     * @see #getProcessedLength\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getLevels()",
    "returnType" : "byte[]",
    "comment" : "\n     * Get an array of levels for each character.<p>\n     *\n     * Note that this method may allocate memory under some\n     * circumstances, unlike <code>getLevelAt()</code>.\n     *\n     * @return The levels array for the text,\n     *         or <code>null</code> if an error occurs.\n     *\n     * @throws IllegalStateException if this call is not preceded by a successful\n     *         call to <code>setPara</code> or <code>setLine</code>\n     ",
    "links" : [ ]
  }, {
    "name" : "public BidiRun getLogicalRun(int logicalPosition)",
    "returnType" : "BidiRun",
    "comment" : "\n     * Get a logical run.\n     * This method returns information about a run and is used\n     * to retrieve runs in logical order.<p>\n     * This is especially useful for line-breaking on a paragraph.\n     *\n     * @param logicalPosition is a logical position within the source text.\n     *\n     * @return a BidiRun object filled with <code>start</code> containing\n     *        the first character of the run, <code>limit</code> containing\n     *        the limit of the run, and <code>embeddingLevel</code> containing\n     *        the level of the run.\n     *\n     * @throws IllegalStateException if this call is not preceded by a successful\n     *         call to <code>setPara</code> or <code>setLine</code>\n     * @throws IllegalArgumentException if logicalPosition is not in the range\n     *         <code>0&lt;=logicalPosition&lt;getProcessedLength()</code>\n     *\n     * @see android.icu.text.BidiRun\n     * @see android.icu.text.BidiRun#getStart()\n     * @see android.icu.text.BidiRun#getLimit()\n     * @see android.icu.text.BidiRun#getEmbeddingLevel()\n     ",
    "links" : [ ]
  }, {
    "name" : "public int countRuns()",
    "returnType" : "int",
    "comment" : "\n     * Get the number of runs.\n     * This method may invoke the actual reordering on the\n     * <code>Bidi</code> object, after <code>setPara()</code>\n     * may have resolved only the levels of the text. Therefore,\n     * <code>countRuns()</code> may have to allocate memory,\n     * and may throw an exception if it fails to do so.\n     *\n     * @return The number of runs.\n     *\n     * @throws IllegalStateException if this call is not preceded by a successful\n     *         call to <code>setPara</code> or <code>setLine</code>\n     ",
    "links" : [ ]
  }, {
    "name" : "public BidiRun getVisualRun(int runIndex)",
    "returnType" : "BidiRun",
    "comment" : "\n     *\n     * Get a <code>BidiRun</code> object according to its index. BidiRun methods\n     * may be used to retrieve the run's logical start, length and level,\n     * which can be even for an LTR run or odd for an RTL run.\n     * In an RTL run, the character at the logical start is\n     * visually on the right of the displayed run.\n     * The length is the number of characters in the run.<p>\n     * <code>countRuns()</code> is normally called\n     * before the runs are retrieved.\n     *\n     * <p>\n     *  Example:\n     * <pre>\n     *  Bidi bidi = new Bidi();\n     *  String text = \"abc 123 DEFG xyz\";\n     *  bidi.setPara(text, Bidi.RTL, null);\n     *  int i, count=bidi.countRuns(), logicalStart, visualIndex=0, length;\n     *  BidiRun run;\n     *  for (i = 0; i &lt; count; ++i) {\n     *      run = bidi.getVisualRun(i);\n     *      logicalStart = run.getStart();\n     *      length = run.getLength();\n     *      if (Bidi.LTR == run.getEmbeddingLevel()) {\n     *          do { // LTR\n     *              show_char(text.charAt(logicalStart++), visualIndex++);\n     *          } while (--length &gt; 0);\n     *      } else {\n     *          logicalStart += length;  // logicalLimit\n     *          do { // RTL\n     *              show_char(text.charAt(--logicalStart), visualIndex++);\n     *          } while (--length &gt; 0);\n     *      }\n     *  }\n     * </pre>\n     * <p>\n     * Note that in right-to-left runs, code like this places\n     * second surrogates before first ones (which is generally a bad idea)\n     * and combining characters before base characters.\n     * <p>\n     * Use of <code>{@link #writeReordered}</code>, optionally with the\n     * <code>{@link #KEEP_BASE_COMBINING}</code> option, can be considered in\n     * order to avoid these issues.\n     *\n     * @param runIndex is the number of the run in visual order, in the\n     *        range <code>[0..countRuns()-1]</code>.\n     *\n     * @return a BidiRun object containing the details of the run. The\n     *         directionality of the run is\n     *         <code>LTR==0</code> or <code>RTL==1</code>,\n     *         never <code>MIXED</code>.\n     *\n     * @throws IllegalStateException if this call is not preceded by a successful\n     *         call to <code>setPara</code> or <code>setLine</code>\n     * @throws IllegalArgumentException if <code>runIndex</code> is not in\n     *         the range <code>0&lt;=runIndex&lt;countRuns()</code>\n     *\n     * @see #countRuns()\n     * @see android.icu.text.BidiRun\n     * @see android.icu.text.BidiRun#getStart()\n     * @see android.icu.text.BidiRun#getLength()\n     * @see android.icu.text.BidiRun#getEmbeddingLevel()\n     ",
    "links" : [ "#KEEP_BASE_COMBINING", "#writeReordered" ]
  }, {
    "name" : "public int getVisualIndex(int logicalIndex)",
    "returnType" : "int",
    "comment" : "\n     * Get the visual position from a logical text position.\n     * If such a mapping is used many times on the same\n     * <code>Bidi</code> object, then calling\n     * <code>getLogicalMap()</code> is more efficient.\n     * <p>\n     * The value returned may be <code>MAP_NOWHERE</code> if there is no\n     * visual position because the corresponding text character is a Bidi\n     * control removed from output by the option\n     * <code>OPTION_REMOVE_CONTROLS</code>.\n     * <p>\n     * When the visual output is altered by using options of\n     * <code>writeReordered()</code> such as <code>INSERT_LRM_FOR_NUMERIC</code>,\n     * <code>KEEP_BASE_COMBINING</code>, <code>OUTPUT_REVERSE</code>,\n     * <code>REMOVE_BIDI_CONTROLS</code>, the visual position returned may not\n     * be correct. It is advised to use, when possible, reordering options\n     * such as {@link #OPTION_INSERT_MARKS} and {@link #OPTION_REMOVE_CONTROLS}.\n     * <p>\n     * Note that in right-to-left runs, this mapping places\n     * second surrogates before first ones (which is generally a bad idea)\n     * and combining characters before base characters.\n     * Use of <code>{@link #writeReordered}</code>, optionally with the\n     * <code>{@link #KEEP_BASE_COMBINING}</code> option can be considered instead\n     * of using the mapping, in order to avoid these issues.\n     *\n     * @param logicalIndex is the index of a character in the text.\n     *\n     * @return The visual position of this character.\n     *\n     * @throws IllegalStateException if this call is not preceded by a successful\n     *         call to <code>setPara</code> or <code>setLine</code>\n     * @throws IllegalArgumentException if <code>logicalIndex</code> is not in\n     *         the range <code>0&lt;=logicalIndex&lt;getProcessedLength()</code>\n     *\n     * @see #getLogicalMap\n     * @see #getLogicalIndex\n     * @see #getProcessedLength\n     * @see #MAP_NOWHERE\n     * @see #OPTION_REMOVE_CONTROLS\n     * @see #writeReordered\n     ",
    "links" : [ "#OPTION_REMOVE_CONTROLS", "#OPTION_INSERT_MARKS", "#KEEP_BASE_COMBINING", "#writeReordered" ]
  }, {
    "name" : "public int getLogicalIndex(int visualIndex)",
    "returnType" : "int",
    "comment" : "\n     * Get the logical text position from a visual position.\n     * If such a mapping is used many times on the same\n     * <code>Bidi</code> object, then calling\n     * <code>getVisualMap()</code> is more efficient.\n     * <p>\n     * The value returned may be <code>MAP_NOWHERE</code> if there is no\n     * logical position because the corresponding text character is a Bidi\n     * mark inserted in the output by option\n     * <code>OPTION_INSERT_MARKS</code>.\n     * <p>\n     * This is the inverse method to <code>getVisualIndex()</code>.\n     * <p>\n     * When the visual output is altered by using options of\n     * <code>writeReordered()</code> such as <code>INSERT_LRM_FOR_NUMERIC</code>,\n     * <code>KEEP_BASE_COMBINING</code>, <code>OUTPUT_REVERSE</code>,\n     * <code>REMOVE_BIDI_CONTROLS</code>, the logical position returned may not\n     * be correct. It is advised to use, when possible, reordering options\n     * such as {@link #OPTION_INSERT_MARKS} and {@link #OPTION_REMOVE_CONTROLS}.\n     *\n     * @param visualIndex is the visual position of a character.\n     *\n     * @return The index of this character in the text.\n     *\n     * @throws IllegalStateException if this call is not preceded by a successful\n     *         call to <code>setPara</code> or <code>setLine</code>\n     * @throws IllegalArgumentException if <code>visualIndex</code> is not in\n     *         the range <code>0&lt;=visualIndex&lt;getResultLength()</code>\n     *\n     * @see #getVisualMap\n     * @see #getVisualIndex\n     * @see #getResultLength\n     * @see #MAP_NOWHERE\n     * @see #OPTION_INSERT_MARKS\n     * @see #writeReordered\n     ",
    "links" : [ "#OPTION_REMOVE_CONTROLS", "#OPTION_INSERT_MARKS" ]
  }, {
    "name" : "public int[] getLogicalMap()",
    "returnType" : "int[]",
    "comment" : "\n     * Get a logical-to-visual index map (array) for the characters in the\n     * <code>Bidi</code> (paragraph or line) object.\n     * <p>\n     * Some values in the map may be <code>MAP_NOWHERE</code> if the\n     * corresponding text characters are Bidi controls removed from the visual\n     * output by the option <code>OPTION_REMOVE_CONTROLS</code>.\n     * <p>\n     * When the visual output is altered by using options of\n     * <code>writeReordered()</code> such as <code>INSERT_LRM_FOR_NUMERIC</code>,\n     * <code>KEEP_BASE_COMBINING</code>, <code>OUTPUT_REVERSE</code>,\n     * <code>REMOVE_BIDI_CONTROLS</code>, the visual positions returned may not\n     * be correct. It is advised to use, when possible, reordering options\n     * such as {@link #OPTION_INSERT_MARKS} and {@link #OPTION_REMOVE_CONTROLS}.\n     * <p>\n     * Note that in right-to-left runs, this mapping places\n     * second surrogates before first ones (which is generally a bad idea)\n     * and combining characters before base characters.\n     * Use of <code>{@link #writeReordered}</code>, optionally with the\n     * <code>{@link #KEEP_BASE_COMBINING}</code> option can be considered instead\n     * of using the mapping, in order to avoid these issues.\n     *\n     * @return an array of <code>getProcessedLength()</code>\n     *        indexes which will reflect the reordering of the characters.<br><br>\n     *        The index map will result in\n     *        <code>indexMap[logicalIndex]==visualIndex</code>, where\n     *        <code>indexMap</code> represents the returned array.\n     *\n     * @throws IllegalStateException if this call is not preceded by a successful\n     *         call to <code>setPara</code> or <code>setLine</code>\n     *\n     * @see #getVisualMap\n     * @see #getVisualIndex\n     * @see #getProcessedLength\n     * @see #MAP_NOWHERE\n     * @see #OPTION_REMOVE_CONTROLS\n     * @see #writeReordered\n     ",
    "links" : [ "#OPTION_REMOVE_CONTROLS", "#OPTION_INSERT_MARKS", "#KEEP_BASE_COMBINING", "#writeReordered" ]
  }, {
    "name" : "public int[] getVisualMap()",
    "returnType" : "int[]",
    "comment" : "\n     * Get a visual-to-logical index map (array) for the characters in the\n     * <code>Bidi</code> (paragraph or line) object.\n     * <p>\n     * Some values in the map may be <code>MAP_NOWHERE</code> if the\n     * corresponding text characters are Bidi marks inserted in the visual\n     * output by the option <code>OPTION_INSERT_MARKS</code>.\n     * <p>\n     * When the visual output is altered by using options of\n     * <code>writeReordered()</code> such as <code>INSERT_LRM_FOR_NUMERIC</code>,\n     * <code>KEEP_BASE_COMBINING</code>, <code>OUTPUT_REVERSE</code>,\n     * <code>REMOVE_BIDI_CONTROLS</code>, the logical positions returned may not\n     * be correct. It is advised to use, when possible, reordering options\n     * such as {@link #OPTION_INSERT_MARKS} and {@link #OPTION_REMOVE_CONTROLS}.\n     *\n     * @return an array of <code>getResultLength()</code>\n     *        indexes which will reflect the reordering of the characters.<br><br>\n     *        The index map will result in\n     *        <code>indexMap[visualIndex]==logicalIndex</code>, where\n     *        <code>indexMap</code> represents the returned array.\n     *\n     * @throws IllegalStateException if this call is not preceded by a successful\n     *         call to <code>setPara</code> or <code>setLine</code>\n     *\n     * @see #getLogicalMap\n     * @see #getLogicalIndex\n     * @see #getResultLength\n     * @see #MAP_NOWHERE\n     * @see #OPTION_INSERT_MARKS\n     * @see #writeReordered\n     ",
    "links" : [ "#OPTION_REMOVE_CONTROLS", "#OPTION_INSERT_MARKS" ]
  }, {
    "name" : "public static int[] reorderLogical(byte[] levels)",
    "returnType" : "int[]",
    "comment" : "\n     * This is a convenience method that does not use a <code>Bidi</code> object.\n     * It is intended to be used for when an application has determined the levels\n     * of objects (character sequences) and just needs to have them reordered (L2).\n     * This is equivalent to using <code>getLogicalMap()</code> on a\n     * <code>Bidi</code> object.\n     *\n     * @param levels is an array of levels that have been determined by\n     *        the application.\n     *\n     * @return an array of <code>levels.length</code>\n     *        indexes which will reflect the reordering of the characters.<p>\n     *        The index map will result in\n     *        <code>indexMap[logicalIndex]==visualIndex</code>, where\n     *        <code>indexMap</code> represents the returned array.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int[] reorderVisual(byte[] levels)",
    "returnType" : "int[]",
    "comment" : "\n     * This is a convenience method that does not use a <code>Bidi</code> object.\n     * It is intended to be used for when an application has determined the levels\n     * of objects (character sequences) and just needs to have them reordered (L2).\n     * This is equivalent to using <code>getVisualMap()</code> on a\n     * <code>Bidi</code> object.\n     *\n     * @param levels is an array of levels that have been determined by\n     *        the application.\n     *\n     * @return an array of <code>levels.length</code>\n     *        indexes which will reflect the reordering of the characters.<p>\n     *        The index map will result in\n     *        <code>indexMap[visualIndex]==logicalIndex</code>, where\n     *        <code>indexMap</code> represents the returned array.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int[] invertMap(int[] srcMap)",
    "returnType" : "int[]",
    "comment" : "\n     * Invert an index map.\n     * The index mapping of the argument map is inverted and returned as\n     * an array of indexes that we will call the inverse map.\n     *\n     * @param srcMap is an array whose elements define the original mapping\n     * from a source array to a destination array.\n     * Some elements of the source array may have no mapping in the\n     * destination array. In that case, their value will be\n     * the special value <code>MAP_NOWHERE</code>.\n     * All elements must be &gt;=0 or equal to <code>MAP_NOWHERE</code>.\n     * Some elements in the source map may have a value greater than the\n     * srcMap.length if the destination array has more elements than the\n     * source array.\n     * There must be no duplicate indexes (two or more elements with the\n     * same value except <code>MAP_NOWHERE</code>).\n     *\n     * @return an array representing the inverse map.\n     *         This array has a number of elements equal to 1 + the highest\n     *         value in <code>srcMap</code>.\n     *         For elements of the result array which have no matching elements\n     *         in the source array, the corresponding elements in the inverse\n     *         map will receive a value equal to <code>MAP_NOWHERE</code>.\n     *         If element with index i in <code>srcMap</code> has a value k different\n     *         from <code>MAP_NOWHERE</code>, this means that element i of\n     *         the source array maps to element k in the destination array.\n     *         The inverse map will have value i in its k-th element.\n     *         For all elements of the destination array which do not map to\n     *         an element in the source array, the corresponding element in the\n     *         inverse map will have a value equal to <code>MAP_NOWHERE</code>.\n     *\n     * @see #MAP_NOWHERE\n     ",
    "links" : [ ]
  }, {
    "name" : "public Bidi createLineBidi(int lineStart, int lineLimit)",
    "returnType" : "Bidi",
    "comment" : "\n     * Create a Bidi object representing the bidi information on a line of text\n     * within the paragraph represented by the current Bidi. This call is not\n     * required if the entire paragraph fits on one line.\n     *\n     * @param lineStart the offset from the start of the paragraph to the start\n     *        of the line.\n     * @param lineLimit the offset from the start of the paragraph to the limit\n     *        of the line.\n     *\n     * @throws IllegalStateException if this call is not preceded by a successful\n     *         call to <code>setPara</code>\n     * @throws IllegalArgumentException if lineStart and lineLimit are not in the range\n     *         <code>0&lt;=lineStart&lt;lineLimit&lt;=getProcessedLength()</code>,\n     *         or if the specified line crosses a paragraph boundary\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isMixed()",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if the line is not left-to-right or right-to-left. This means\n     * it either has mixed runs of left-to-right and right-to-left text, or the\n     * base direction differs from the direction of the only run of text.\n     *\n     * @return true if the line is not left-to-right or right-to-left.\n     *\n     * @throws IllegalStateException if this call is not preceded by a successful\n     *         call to <code>setPara</code>\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isLeftToRight()",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if the line is all left-to-right text and the base direction\n     * is left-to-right.\n     *\n     * @return true if the line is all left-to-right text and the base direction\n     *         is left-to-right.\n     *\n     * @throws IllegalStateException if this call is not preceded by a successful\n     *         call to <code>setPara</code>\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isRightToLeft()",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if the line is all right-to-left text, and the base direction\n     * is right-to-left\n     *\n     * @return true if the line is all right-to-left text, and the base\n     *         direction is right-to-left\n     *\n     * @throws IllegalStateException if this call is not preceded by a successful\n     *         call to <code>setPara</code>\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean baseIsLeftToRight()",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if the base direction is left-to-right\n     *\n     * @return true if the base direction is left-to-right\n     *\n     * @throws IllegalStateException if this call is not preceded by a successful\n     *         call to <code>setPara</code> or <code>setLine</code>\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getBaseLevel()",
    "returnType" : "int",
    "comment" : "\n     * Return the base level (0 if left-to-right, 1 if right-to-left).\n     *\n     * @return the base level\n     *\n     * @throws IllegalStateException if this call is not preceded by a successful\n     *         call to <code>setPara</code> or <code>setLine</code>\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getRunCount()",
    "returnType" : "int",
    "comment" : "\n     * Return the number of level runs.\n     *\n     * @return the number of level runs\n     *\n     * @throws IllegalStateException if this call is not preceded by a successful\n     *         call to <code>setPara</code> or <code>setLine</code>\n     ",
    "links" : [ ]
  }, {
    "name" : " void getLogicalToVisualRunsMap()",
    "returnType" : "void",
    "comment" : "\n     * Compute the logical to visual run mapping\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getRunLevel(int run)",
    "returnType" : "int",
    "comment" : "\n     * Return the level of the nth logical run in this line.\n     *\n     * @param run the index of the run, between 0 and <code>countRuns()-1</code>\n     *\n     * @return the level of the run\n     *\n     * @throws IllegalStateException if this call is not preceded by a successful\n     *         call to <code>setPara</code> or <code>setLine</code>\n     * @throws IllegalArgumentException if <code>run</code> is not in\n     *         the range <code>0&lt;=run&lt;countRuns()</code>\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getRunStart(int run)",
    "returnType" : "int",
    "comment" : "\n     * Return the index of the character at the start of the nth logical run in\n     * this line, as an offset from the start of the line.\n     *\n     * @param run the index of the run, between 0 and <code>countRuns()</code>\n     *\n     * @return the start of the run\n     *\n     * @throws IllegalStateException if this call is not preceded by a successful\n     *         call to <code>setPara</code> or <code>setLine</code>\n     * @throws IllegalArgumentException if <code>run</code> is not in\n     *         the range <code>0&lt;=run&lt;countRuns()</code>\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getRunLimit(int run)",
    "returnType" : "int",
    "comment" : "\n     * Return the index of the character past the end of the nth logical run in\n     * this line, as an offset from the start of the line. For example, this\n     * will return the length of the line for the last run on the line.\n     *\n     * @param run the index of the run, between 0 and <code>countRuns()</code>\n     *\n     * @return the limit of the run\n     *\n     * @throws IllegalStateException if this call is not preceded by a successful\n     *         call to <code>setPara</code> or <code>setLine</code>\n     * @throws IllegalArgumentException if <code>run</code> is not in\n     *         the range <code>0&lt;=run&lt;countRuns()</code>\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean requiresBidi(char[] text, int start, int limit)",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if the specified text requires bidi analysis. If this returns\n     * false, the text will display left-to-right. Clients can then avoid\n     * constructing a Bidi object. Text in the Arabic Presentation Forms area of\n     * Unicode is presumed to already be shaped and ordered for display, and so\n     * will not cause this method to return true.\n     *\n     * @param text the text containing the characters to test\n     * @param start the start of the range of characters to test\n     * @param limit the limit of the range of characters to test\n     *\n     * @return true if the range of characters requires bidi analysis\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void reorderVisually(byte[] levels, int levelStart, Object[] objects, int objectStart, int count)",
    "returnType" : "void",
    "comment" : "\n     * Reorder the objects in the array into visual order based on their levels.\n     * This is a utility method to use when you have a collection of objects\n     * representing runs of text in logical order, each run containing text at a\n     * single level. The elements at <code>index</code> from\n     * <code>objectStart</code> up to <code>objectStart + count</code> in the\n     * objects array will be reordered into visual order assuming\n     * each run of text has the level indicated by the corresponding element in\n     * the levels array (at <code>index - objectStart + levelStart</code>).\n     *\n     * @param levels an array representing the bidi level of each object\n     * @param levelStart the start position in the levels array\n     * @param objects the array of objects to be reordered into visual order\n     * @param objectStart the start position in the objects array\n     * @param count the number of objects to reorder\n     ",
    "links" : [ ]
  }, {
    "name" : "public String writeReordered(int options)",
    "returnType" : "String",
    "comment" : "\n     * Take a <code>Bidi</code> object containing the reordering\n     * information for a piece of text (one or more paragraphs) set by\n     * <code>setPara()</code> or for a line of text set by <code>setLine()</code>\n     * and return a string containing the reordered text.\n     *\n     * <p>The text may have been aliased (only a reference was stored\n     * without copying the contents), thus it must not have been modified\n     * since the <code>setPara()</code> call.\n     *\n     * This method preserves the integrity of characters with multiple\n     * code units and (optionally) combining characters.\n     * Characters in RTL runs can be replaced by mirror-image characters\n     * in the returned string. Note that \"real\" mirroring has to be done in a\n     * rendering engine by glyph selection and that for many \"mirrored\"\n     * characters there are no Unicode characters as mirror-image equivalents.\n     * There are also options to insert or remove Bidi control\n     * characters; see the descriptions of the return value and the\n     * <code>options</code> parameter, and of the option bit flags.\n     *\n     * @param options A bit set of options for the reordering that control\n     *                how the reordered text is written.\n     *                The options include mirroring the characters on a code\n     *                point basis and inserting LRM characters, which is used\n     *                especially for transforming visually stored text\n     *                to logically stored text (although this is still an\n     *                imperfect implementation of an \"inverse Bidi\" algorithm\n     *                because it uses the \"forward Bidi\" algorithm at its core).\n     *                The available options are:\n     *                <code>DO_MIRRORING</code>,\n     *                <code>INSERT_LRM_FOR_NUMERIC</code>,\n     *                <code>KEEP_BASE_COMBINING</code>,\n     *                <code>OUTPUT_REVERSE</code>,\n     *                <code>REMOVE_BIDI_CONTROLS</code>,\n     *                <code>STREAMING</code>\n     *\n     * @return The reordered text.\n     *         If the <code>INSERT_LRM_FOR_NUMERIC</code> option is set, then\n     *         the length of the returned string could be as large as\n     *         <code>getLength()+2*countRuns()</code>.<br>\n     *         If the <code>REMOVE_BIDI_CONTROLS</code> option is set, then the\n     *         length of the returned string may be less than\n     *         <code>getLength()</code>.<br>\n     *         If none of these options is set, then the length of the returned\n     *         string will be exactly <code>getProcessedLength()</code>.\n     *\n     * @throws IllegalStateException if this call is not preceded by a successful\n     *         call to <code>setPara</code> or <code>setLine</code>\n     *\n     * @see #DO_MIRRORING\n     * @see #INSERT_LRM_FOR_NUMERIC\n     * @see #KEEP_BASE_COMBINING\n     * @see #OUTPUT_REVERSE\n     * @see #REMOVE_BIDI_CONTROLS\n     * @see #OPTION_STREAMING\n     * @see #getProcessedLength\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String writeReverse(String src, int options)",
    "returnType" : "String",
    "comment" : "\n     * Reverse a Right-To-Left run of Unicode text.\n     *\n     * This method preserves the integrity of characters with multiple\n     * code units and (optionally) combining characters.\n     * Characters can be replaced by mirror-image characters\n     * in the destination buffer. Note that \"real\" mirroring has\n     * to be done in a rendering engine by glyph selection\n     * and that for many \"mirrored\" characters there are no\n     * Unicode characters as mirror-image equivalents.\n     * There are also options to insert or remove Bidi control\n     * characters.\n     *\n     * This method is the implementation for reversing RTL runs as part\n     * of <code>writeReordered()</code>. For detailed descriptions\n     * of the parameters, see there.\n     * Since no Bidi controls are inserted here, the output string length\n     * will never exceed <code>src.length()</code>.\n     *\n     * @see #writeReordered\n     *\n     * @param src The RTL run text.\n     *\n     * @param options A bit set of options for the reordering that control\n     *                how the reordered text is written.\n     *                See the <code>options</code> parameter in <code>writeReordered()</code>.\n     *\n     * @return The reordered text.\n     *         If the <code>REMOVE_BIDI_CONTROLS</code> option\n     *         is set, then the length of the returned string may be less than\n     *         <code>src.length()</code>. If this option is not set,\n     *         then the length of the returned string will be exactly\n     *         <code>src.length()</code>.\n     *\n     * @throws IllegalArgumentException if <code>src</code> is null.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " static int DirPropFlag(byte dir)", " boolean testDirPropFlagAt(int flag, int index)", " static final int DirPropFlagLR(byte level)", " static final int DirPropFlagE(byte level)", " static final int DirPropFlagO(byte level)", " static final byte DirFromStrong(byte strong)", " static final byte NoOverride(byte level)", " static byte GetLRFromLevel(byte level)", " static boolean IsDefaultLevel(byte level)", " static boolean IsBidiControlChar(int c)", " void verifyValidPara()", " void verifyValidParaOrLine()", " void verifyRange(int index, int start, int limit)", "private Object getMemory(String label, Object array, Class<?> arrayClass, boolean mayAllocate, int sizeNeeded)", "private void getDirPropsMemory(boolean mayAllocate, int len)", " void getDirPropsMemory(int len)", "private void getLevelsMemory(boolean mayAllocate, int len)", " void getLevelsMemory(int len)", "private void getRunsMemory(boolean mayAllocate, int len)", " void getRunsMemory(int len)", "private void getInitialDirPropsMemory(int len)", "private void getInitialLevelsMemory(int len)", "private void getInitialRunsMemory(int len)", "public void setInverse(boolean isInverse)", "public boolean isInverse()", "public void setReorderingMode(int reorderingMode)", "public int getReorderingMode()", "public void setReorderingOptions(int options)", "public int getReorderingOptions()", "public static byte getBaseDirection(CharSequence paragraph)", "private byte firstL_R_AL()", "private void checkParaCount()", "private void getDirProps()", " byte GetParaLevelAt(int pindex)", "private void bracketInit(BracketData bd)", "private void bracketProcessB(BracketData bd, byte level)", "private void bracketProcessBoundary(BracketData bd, int lastCcPos, byte contextLevel, byte embeddingLevel)", "private void bracketProcessLRI_RLI(BracketData bd, byte level)", "private void bracketProcessPDI(BracketData bd)", "private void bracketAddOpening(BracketData bd, char match, int position)", "private void fixN0c(BracketData bd, int openingIndex, int newPropPosition, byte newProp)", "private byte bracketProcessClosing(BracketData bd, int openIdx, int position)", "private void bracketProcessChar(BracketData bd, int position)", "private byte directionFromFlags()", "private byte resolveExplicitLevels()", "private byte checkExplicitLevels()", "private static short GetStateProps(short cell)", "private static short GetActionProps(short cell)", "private static short GetState(byte cell)", "private static short GetAction(byte cell)", "private void addPoint(int pos, int flag)", "private void setLevelsOutsideIsolates(int start, int limit, byte level)", "private void processPropertySeq(LevState levState, short _prop, int start, int limit)", "private byte lastL_R_AL()", "private byte firstL_R_AL_EN_AN()", "private void resolveImplicitLevels(int start, int limit, short sor, short eor)", "private void adjustWSLevels()", "public void setContext(String prologue, String epilogue)", "private void setParaSuccess()", " int Bidi_Min(int x, int y)", " int Bidi_Abs(int x)", " void setParaRunsOnly(char[] parmText, byte parmParaLevel)", "public void setPara(String text, byte paraLevel, byte[] embeddingLevels)", "public void setPara(char[] chars, byte paraLevel, byte[] embeddingLevels)", "public void setPara(AttributedCharacterIterator paragraph)", "public void orderParagraphsLTR(boolean ordarParaLTR)", "public boolean isOrderParagraphsLTR()", "public byte getDirection()", "public String getTextAsString()", "public char[] getText()", "public int getLength()", "public int getProcessedLength()", "public int getResultLength()", "public byte getParaLevel()", "public int countParagraphs()", "public BidiRun getParagraphByIndex(int paraIndex)", "public BidiRun getParagraph(int charIndex)", "public int getParagraphIndex(int charIndex)", "public void setCustomClassifier(BidiClassifier classifier)", "public BidiClassifier getCustomClassifier()", "public int getCustomizedClass(int c)", "public Bidi setLine(int start, int limit)", "public byte getLevelAt(int charIndex)", "public byte[] getLevels()", "public BidiRun getLogicalRun(int logicalPosition)", "public int countRuns()", "public BidiRun getVisualRun(int runIndex)", "public int getVisualIndex(int logicalIndex)", "public int getLogicalIndex(int visualIndex)", "public int[] getLogicalMap()", "public int[] getVisualMap()", "public static int[] reorderLogical(byte[] levels)", "public static int[] reorderVisual(byte[] levels)", "public static int[] invertMap(int[] srcMap)", "public Bidi createLineBidi(int lineStart, int lineLimit)", "public boolean isMixed()", "public boolean isLeftToRight()", "public boolean isRightToLeft()", "public boolean baseIsLeftToRight()", "public int getBaseLevel()", "public int getRunCount()", " void getLogicalToVisualRunsMap()", "public int getRunLevel(int run)", "public int getRunStart(int run)", "public int getRunLimit(int run)", "public static boolean requiresBidi(char[] text, int start, int limit)", "public static void reorderVisually(byte[] levels, int levelStart, Object[] objects, int objectStart, int count)", "public String writeReordered(int options)", "public static String writeReverse(String src, int options)" ],
  "variableNames" : [ "LEVEL_DEFAULT_LTR", "LEVEL_DEFAULT_RTL", "MAX_EXPLICIT_LEVEL", "LEVEL_OVERRIDE", "MAP_NOWHERE", "LTR", "RTL", "MIXED", "NEUTRAL", "KEEP_BASE_COMBINING", "DO_MIRRORING", "INSERT_LRM_FOR_NUMERIC", "REMOVE_BIDI_CONTROLS", "OUTPUT_REVERSE", "REORDER_DEFAULT", "REORDER_NUMBERS_SPECIAL", "REORDER_GROUP_NUMBERS_WITH_R", "REORDER_RUNS_ONLY", "REORDER_INVERSE_NUMBERS_AS_L", "REORDER_INVERSE_LIKE_DIRECT", "REORDER_INVERSE_FOR_NUMBERS_SPECIAL", "REORDER_COUNT", "REORDER_LAST_LOGICAL_TO_VISUAL", "OPTION_DEFAULT", "OPTION_INSERT_MARKS", "OPTION_REMOVE_CONTROLS", "OPTION_STREAMING", "L", "R", "EN", "ES", "ET", "AN", "CS", "B", "S", "WS", "ON", "LRE", "LRO", "AL", "RLE", "RLO", "PDF", "NSM", "BN", "FSI", "LRI", "RLI", "PDI", "ENL", "ENR", "CLASS_DEFAULT", "SIMPLE_PARAS_COUNT", "SIMPLE_OPENINGS_COUNT", "CR", "LF", "LRM_BEFORE", "LRM_AFTER", "RLM_BEFORE", "RLM_AFTER", "FOUND_L", "FOUND_R", "ISOLATE", "paraBidi", "bdp", "text", "originalLength", "length", "resultLength", "mayAllocateText", "mayAllocateRuns", "dirPropsMemory", "levelsMemory", "dirProps", "levels", "isInverse", "reorderingMode", "reorderingOptions", "orderParagraphsLTR", "paraLevel", "defaultParaLevel", "prologue", "epilogue", "impTabPair", "direction", "flags", "lastArabicPos", "trailingWSStart", "paraCount", "paras_limit", "paras_level", "runCount", "runsMemory", "runs", "simpleRuns", "isolates", "isolateCount", "logicalToVisualRunsMap", "isGoodLogicalToVisualRunsMap", "customClassifier", "insertPoints", "controlCount", "DirPropFlagMultiRuns", "DirPropFlagLR", "DirPropFlagE", "DirPropFlagO", "MASK_LTR", "MASK_RTL", "MASK_R_AL", "MASK_STRONG_EN_AN", "MASK_EXPLICIT", "MASK_BN_EXPLICIT", "MASK_ISO", "MASK_B_S", "MASK_WS", "MASK_POSSIBLE_N", "MASK_EMBEDDING", "NOT_SEEKING_STRONG", "SEEKING_STRONG_FOR_PARA", "SEEKING_STRONG_FOR_FSI", "LOOKING_FOR_PDI", "IMPTABPROPS_COLUMNS", "IMPTABPROPS_RES", "groupProp", "_L", "_R", "_EN", "_AN", "_ON", "_S", "_B", "impTabProps", "IMPTABLEVELS_COLUMNS", "IMPTABLEVELS_RES", "impTabL_DEFAULT", "impTabR_DEFAULT", "impAct0", "impTab_DEFAULT", "impTabL_NUMBERS_SPECIAL", "impTab_NUMBERS_SPECIAL", "impTabL_GROUP_NUMBERS_WITH_R", "impTabR_GROUP_NUMBERS_WITH_R", "impTab_GROUP_NUMBERS_WITH_R", "impTabL_INVERSE_NUMBERS_AS_L", "impTabR_INVERSE_NUMBERS_AS_L", "impTab_INVERSE_NUMBERS_AS_L", "impTabR_INVERSE_LIKE_DIRECT", "impAct1", "impTab_INVERSE_LIKE_DIRECT", "impTabL_INVERSE_LIKE_DIRECT_WITH_MARKS", "impTabR_INVERSE_LIKE_DIRECT_WITH_MARKS", "impAct2", "impAct3", "impTab_INVERSE_LIKE_DIRECT_WITH_MARKS", "impTab_INVERSE_FOR_NUMBERS_SPECIAL", "impTabL_INVERSE_FOR_NUMBERS_SPECIAL_WITH_MARKS", "impTab_INVERSE_FOR_NUMBERS_SPECIAL_WITH_MARKS", "FIRSTALLOC", "DIRECTION_LEFT_TO_RIGHT", "DIRECTION_RIGHT_TO_LEFT", "DIRECTION_DEFAULT_LEFT_TO_RIGHT", "DIRECTION_DEFAULT_RIGHT_TO_LEFT" ]
}