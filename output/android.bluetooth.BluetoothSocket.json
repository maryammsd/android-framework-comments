{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/bluetooth/BluetoothSocket.java",
  "packageName" : "android.bluetooth",
  "className" : "BluetoothSocket",
  "comment" : "\n * A connected or connecting Bluetooth socket.\n *\n * <p>The interface for Bluetooth Sockets is similar to that of TCP sockets: {@link java.net.Socket}\n * and {@link java.net.ServerSocket}. On the server side, use a {@link BluetoothServerSocket} to\n * create a listening server socket. When a connection is accepted by the {@link\n * BluetoothServerSocket}, it will return a new {@link BluetoothSocket} to manage the connection. On\n * the client side, use a single {@link BluetoothSocket} to both initiate an outgoing connection and\n * to manage the connection.\n *\n * <p>The most common type of Bluetooth socket is RFCOMM, which is the type supported by the Android\n * APIs. RFCOMM is a connection-oriented, streaming transport over Bluetooth. It is also known as\n * the Serial Port Profile (SPP).\n *\n * <p>To create a {@link BluetoothSocket} for connecting to a known device, use {@link\n * BluetoothDevice#createRfcommSocketToServiceRecord\n * BluetoothDevice.createRfcommSocketToServiceRecord()}. Then call {@link #connect()} to attempt a\n * connection to the remote device. This call will block until a connection is established or the\n * connection fails.\n *\n * <p>To create a {@link BluetoothSocket} as a server (or \"host\"), see the {@link\n * BluetoothServerSocket} documentation.\n *\n * <p>Once the socket is connected, whether initiated as a client or accepted as a server, open the\n * IO streams by calling {@link #getInputStream} and {@link #getOutputStream} in order to retrieve\n * {@link java.io.InputStream} and {@link java.io.OutputStream} objects, respectively, which are\n * automatically connected to the socket.\n *\n * <p>{@link BluetoothSocket} is thread safe. In particular, {@link #close} will always immediately\n * abort ongoing operations and close the socket.\n *\n * <p><div class=\"special reference\">\n *\n * <h3>Developer Guides</h3>\n *\n * <p>For more information about using Bluetooth, read the <a\n * href=\"{@docRoot}guide/topics/connectivity/bluetooth.html\">Bluetooth</a> developer guide. </div>\n *\n * @see BluetoothServerSocket\n * @see java.io.InputStream\n * @see java.io.OutputStream\n ",
  "links" : [ "java.net.ServerSocket", "android.bluetooth.BluetoothServerSocket", "android.bluetooth.BluetoothSocket", "java.io.OutputStream", "java.net.Socket", "#getOutputStream", "#close", "android.bluetooth.BluetoothDevice#createRfcommSocketToServiceRecordBluetoothDevice.createRfcommSocketToServiceRecord()", "#connect()", "#getInputStream", "java.io.InputStream" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VDBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_RFCOMM_CHANNEL",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "MAX_L2CAP_PACKAGE_SIZE",
    "type" : "int",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : "TYPE_RFCOMM",
    "type" : "int",
    "comment" : " RFCOMM socket ",
    "links" : [ ]
  }, {
    "name" : "TYPE_SCO",
    "type" : "int",
    "comment" : " SCO socket ",
    "links" : [ ]
  }, {
    "name" : "TYPE_L2CAP",
    "type" : "int",
    "comment" : " L2CAP socket ",
    "links" : [ ]
  }, {
    "name" : "TYPE_L2CAP_BREDR",
    "type" : "int",
    "comment" : "\n     * L2CAP socket on BR/EDR transport\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_L2CAP_LE",
    "type" : "int",
    "comment" : "\n     * L2CAP socket on LE transport\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EBADFD",
    "type" : "int",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : "EADDRINUSE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SEC_FLAG_ENCRYPT",
    "type" : "int",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : "SEC_FLAG_AUTH",
    "type" : "int",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : "BTSOCK_FLAG_NO_SDP",
    "type" : "int",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : "SEC_FLAG_AUTH_MITM",
    "type" : "int",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : "SEC_FLAG_AUTH_16_DIGIT",
    "type" : "int",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : "mType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDevice",
    "type" : "BluetoothDevice",
    "comment" : " one of TYPE_RFCOMM etc ",
    "links" : [ ]
  }, {
    "name" : "mAddress",
    "type" : "String",
    "comment" : " remote device ",
    "links" : [ ]
  }, {
    "name" : "mAuth",
    "type" : "boolean",
    "comment" : " remote address ",
    "links" : [ ]
  }, {
    "name" : "mEncrypt",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInputStream",
    "type" : "BluetoothInputStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOutputStream",
    "type" : "BluetoothOutputStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUuid",
    "type" : "ParcelUuid",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExcludeSdp",
    "type" : "boolean",
    "comment" : " when true no SPP SDP record will be created ",
    "links" : [ ]
  }, {
    "name" : "mAuthMitm",
    "type" : "boolean",
    "comment" : " when true Person-in-the-middle protection will be enabled ",
    "links" : [ ]
  }, {
    "name" : "mMin16DigitPin",
    "type" : "boolean",
    "comment" : " Minimum 16 digit pin for sec mode 2 connections ",
    "links" : [ ]
  }, {
    "name" : "mPfd",
    "type" : "ParcelFileDescriptor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSocket",
    "type" : "LocalSocket",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSocketIS",
    "type" : "InputStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSocketOS",
    "type" : "OutputStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPort",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mServiceName",
    "type" : "String",
    "comment" : " RFCOMM channel or L2CAP psm ",
    "links" : [ ]
  }, {
    "name" : "SOCK_SIGNAL_SIZE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mL2capBuffer",
    "type" : "ByteBuffer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaxTxPacketSize",
    "type" : "int",
    "comment" : " The l2cap maximum packet size supported by the peer.",
    "links" : [ ]
  }, {
    "name" : "mMaxRxPacketSize",
    "type" : "int",
    "comment" : " The l2cap maximum packet size that can be received.",
    "links" : [ ]
  }, {
    "name" : "mConnectionUuid",
    "type" : "ParcelUuid",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSocketCreationTimeNanos",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSocketCreationLatencyNanos",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSocketState",
    "type" : "SocketState",
    "comment" : " prevents all native calls after destroyNative() ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " static BluetoothSocket createSocketFromOpenFd(ParcelFileDescriptor pfd, BluetoothDevice device, ParcelUuid uuid) throws IOException",
    "returnType" : "BluetoothSocket",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : "private BluetoothSocket acceptSocket(String remoteAddr) throws IOException",
    "returnType" : "BluetoothSocket",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void finalize() throws Throwable",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private int getSecurityFlags()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public BluetoothDevice getRemoteDevice()",
    "returnType" : "BluetoothDevice",
    "comment" : "\n     * Get the remote device this socket is connecting, or connected, to.\n     *\n     * @return remote device\n     ",
    "links" : [ ]
  }, {
    "name" : "public InputStream getInputStream() throws IOException",
    "returnType" : "InputStream",
    "comment" : "\n     * Get the input stream associated with this socket.\n     *\n     * <p>The input stream will be returned even if the socket is not yet connected, but operations\n     * on that stream will throw IOException until the associated socket is connected.\n     *\n     * @return InputStream\n     ",
    "links" : [ ]
  }, {
    "name" : "public OutputStream getOutputStream() throws IOException",
    "returnType" : "OutputStream",
    "comment" : "\n     * Get the output stream associated with this socket.\n     *\n     * <p>The output stream will be returned even if the socket is not yet connected, but operations\n     * on that stream will throw IOException until the associated socket is connected.\n     *\n     * @return OutputStream\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isConnected()",
    "returnType" : "boolean",
    "comment" : "\n     * Get the connection status of this socket, ie, whether there is an active connection with\n     * remote device.\n     *\n     * @return true if connected false if not connected\n     ",
    "links" : [ ]
  }, {
    "name" : " void setServiceName(String name)",
    "returnType" : "void",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : " boolean isAuth()",
    "returnType" : "boolean",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : "public void connect() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Attempt to connect to a remote device.\n     *\n     * <p>This method will block until a connection is made or the connection fails. If this method\n     * returns without an exception then this socket is now connected.\n     *\n     * <p>Creating new connections to remote Bluetooth devices should not be attempted while device\n     * discovery is in progress. Device discovery is a heavyweight procedure on the Bluetooth\n     * adapter and will significantly slow a device connection. Use {@link\n     * BluetoothAdapter#cancelDiscovery()} to cancel an ongoing discovery. Discovery is not managed\n     * by the Activity, but is run as a system service, so an application should always call {@link\n     * BluetoothAdapter#cancelDiscovery()} even if it did not directly request a discovery, just to\n     * be sure.\n     *\n     * <p>{@link #close} can be used to abort this call from another thread.\n     *\n     * @throws BluetoothSocketException in case of failure, with the corresponding error code.\n     * @throws IOException for other errors (eg: InputStream read failures etc.).\n     ",
    "links" : [ "android.bluetooth.BluetoothAdapter#cancelDiscovery()", "#close" ]
  }, {
    "name" : " int bindListen()",
    "returnType" : "int",
    "comment" : "\n     * Currently returns unix errno instead of throwing IOException, so that BluetoothAdapter can\n     * check the error code for EADDRINUSE\n     ",
    "links" : [ ]
  }, {
    "name" : " BluetoothSocket accept(int timeout) throws IOException",
    "returnType" : "BluetoothSocket",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : " int available() throws IOException",
    "returnType" : "int",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : " int read(byte[] b, int offset, int length) throws IOException",
    "returnType" : "int",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : " int write(byte[] b, int offset, int length) throws IOException",
    "returnType" : "int",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : "public void close() throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void removeChannel()",
    "returnType" : "void",
    "comment" : "package ",
    "links" : [ ]
  }, {
    "name" : " int getPort()",
    "returnType" : "int",
    "comment" : "package ",
    "links" : [ ]
  }, {
    "name" : " long getSocketCreationTime()",
    "returnType" : "long",
    "comment" : "package ",
    "links" : [ ]
  }, {
    "name" : "public int getMaxTransmitPacketSize()",
    "returnType" : "int",
    "comment" : "\n     * Get the maximum supported Transmit packet size for the underlying transport. Use this to\n     * optimize the writes done to the output socket, to avoid sending half full packets.\n     *\n     * @return the maximum supported Transmit packet size for the underlying transport.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getMaxReceivePacketSize()",
    "returnType" : "int",
    "comment" : "\n     * Get the maximum supported Receive packet size for the underlying transport. Use this to\n     * optimize the reads done on the input stream, as any call to read will return a maximum of\n     * this amount of bytes - or for some transports a multiple of this value.\n     *\n     * @return the maximum supported Receive packet size for the underlying transport.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getConnectionType()",
    "returnType" : "int",
    "comment" : "\n     * Get the type of the underlying connection.\n     *\n     * @return one of {@link #TYPE_RFCOMM}, {@link #TYPE_SCO} or {@link #TYPE_L2CAP}\n     ",
    "links" : [ "#TYPE_RFCOMM", "#TYPE_SCO", "#TYPE_L2CAP" ]
  }, {
    "name" : "public void setExcludeSdp(boolean excludeSdp)",
    "returnType" : "void",
    "comment" : "\n     * Change if a SDP entry should be automatically created. Must be called before calling .bind,\n     * for the call to have any effect.\n     *\n     * @param excludeSdp\n     *     <li>TRUE - do not auto generate SDP record.\n     *     <li>FALSE - default - auto generate SPP SDP record.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void requestMaximumTxDataLength() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Set the LE Transmit Data Length to be the maximum that the BT Controller is capable of. This\n     * parameter is used by the BT Controller to set the maximum transmission packet size on this\n     * connection. This function is currently used for testing only.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getL2capLocalChannelId() throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Returns the L2CAP local channel ID associated with an open connection to this socket.\n     *\n     * @return the L2CAP local channel ID.\n     * @throws BluetoothSocketException in case of failure, with the corresponding error code.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getL2capRemoteChannelId() throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Returns the L2CAP remote channel ID associated with an open connection to this socket.\n     *\n     * @return the L2CAP remote channel ID.\n     * @throws BluetoothSocketException in case of failure, with the corresponding error code.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public ParcelFileDescriptor getParcelFileDescriptor()",
    "returnType" : "ParcelFileDescriptor",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private String convertAddr(final byte[] addr)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String waitSocketSignal(InputStream is) throws IOException",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void createL2capRxBuffer()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int readAll(InputStream is, byte[] b) throws IOException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int readInt(InputStream is) throws IOException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int fillL2capRxBuffer() throws IOException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ " static BluetoothSocket createSocketFromOpenFd(ParcelFileDescriptor pfd, BluetoothDevice device, ParcelUuid uuid) throws IOException", "private BluetoothSocket acceptSocket(String remoteAddr) throws IOException", "protected void finalize() throws Throwable", "private int getSecurityFlags()", "public BluetoothDevice getRemoteDevice()", "public InputStream getInputStream() throws IOException", "public OutputStream getOutputStream() throws IOException", "public boolean isConnected()", " void setServiceName(String name)", " boolean isAuth()", "public void connect() throws IOException", " int bindListen()", " BluetoothSocket accept(int timeout) throws IOException", " int available() throws IOException", " int read(byte[] b, int offset, int length) throws IOException", " int write(byte[] b, int offset, int length) throws IOException", "public void close() throws IOException", " void removeChannel()", " int getPort()", " long getSocketCreationTime()", "public int getMaxTransmitPacketSize()", "public int getMaxReceivePacketSize()", "public int getConnectionType()", "public void setExcludeSdp(boolean excludeSdp)", "public void requestMaximumTxDataLength() throws IOException", "public int getL2capLocalChannelId() throws IOException", "public int getL2capRemoteChannelId() throws IOException", "public ParcelFileDescriptor getParcelFileDescriptor()", "private String convertAddr(final byte[] addr)", "private String waitSocketSignal(InputStream is) throws IOException", "private void createL2capRxBuffer()", "private int readAll(InputStream is, byte[] b) throws IOException", "private int readInt(InputStream is) throws IOException", "private int fillL2capRxBuffer() throws IOException", "public String toString()" ],
  "variableNames" : [ "TAG", "DBG", "VDBG", "MAX_RFCOMM_CHANNEL", "MAX_L2CAP_PACKAGE_SIZE", "TYPE_RFCOMM", "TYPE_SCO", "TYPE_L2CAP", "TYPE_L2CAP_BREDR", "TYPE_L2CAP_LE", "EBADFD", "EADDRINUSE", "SEC_FLAG_ENCRYPT", "SEC_FLAG_AUTH", "BTSOCK_FLAG_NO_SDP", "SEC_FLAG_AUTH_MITM", "SEC_FLAG_AUTH_16_DIGIT", "mType", "mDevice", "mAddress", "mAuth", "mEncrypt", "mInputStream", "mOutputStream", "mUuid", "mExcludeSdp", "mAuthMitm", "mMin16DigitPin", "mPfd", "mSocket", "mSocketIS", "mSocketOS", "mPort", "mServiceName", "SOCK_SIGNAL_SIZE", "mL2capBuffer", "mMaxTxPacketSize", "mMaxRxPacketSize", "mConnectionUuid", "mSocketCreationTimeNanos", "mSocketCreationLatencyNanos", "mSocketState" ]
}