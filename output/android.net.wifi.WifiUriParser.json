{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/wifi/WifiUriParser.java",
  "packageName" : "android.net.wifi",
  "className" : "WifiUriParser",
  "comment" : "\n * Supports to parse 2 types of Wifi Uri\n *\n * <p>1. Standard Wi-Fi Easy Connect (DPP) bootstrapping information or 2. ZXing reader library's\n * Wi-Fi Network config format described in\n * https://github.com/zxing/zxing/wiki/Barcode-Contents#wi-fi-network-config-android-ios-11\n *\n * <p>ZXing reader library's Wi-Fi Network config format example:\n *\n * <p>WIFI:T:WPA;S:mynetwork;P:mypass;;\n *\n * <p>parameter Example Description T WPA Authentication type; can be WEP, WPA, SAE or 'nopass' for\n * no password. Or, omit for no password. S mynetwork Network SSID. Required. Enclose in double\n * quotes if it is an ASCII name, but could be interpreted as hex (i.e. \"ABCD\") P mypass Password,\n * ignored if T is \"nopass\" (in which case it may be omitted). Enclose in double quotes if it is an\n * ASCII name, but could be interpreted as hex (i.e. \"ABCD\") H true Optional. True if the network\n * SSID is hidden.\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SCHEME_DPP",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SCHEME_ZXING_WIFI_NETWORK_CONFIG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PREFIX_DPP",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PREFIX_ZXING_WIFI_NETWORK_CONFIG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PREFIX_DPP_PUBLIC_KEY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PREFIX_DPP_INFORMATION",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PREFIX_ZXING_SECURITY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PREFIX_ZXING_SSID",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PREFIX_ZXING_PASSWORD",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PREFIX_ZXING_HIDDEN_SSID",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PREFIX_ZXING_TRANSITION_DISABLE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DELIMITER_QR_CODE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SECURITY_NO_PASSWORD",
    "type" : "String",
    "comment" : " open network or OWE",
    "links" : [ ]
  }, {
    "name" : "SECURITY_WEP",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SECURITY_WPA_PSK",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SECURITY_SAE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SECURITY_ADB",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static UriParserResults parseUri(@NonNull String uri)",
    "returnType" : "UriParserResults",
    "comment" : "\n     * Returns parsed result from given uri.\n     *\n     * @param uri URI of the configuration that was obtained out of band(QR code scanning, BLE).\n     * @throws IllegalArgumentException when parse failed.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static UriParserResults parseWifiDppUri(String uri) throws IllegalArgumentException",
    "returnType" : "UriParserResults",
    "comment" : " Parses Wi-Fi Easy Connect (DPP) Wifi Uri string ",
    "links" : [ ]
  }, {
    "name" : "private static UriParserResults parseZxingWifiUriParser(String uri) throws IllegalArgumentException",
    "returnType" : "UriParserResults",
    "comment" : " Parses ZXing reader library's Wi-Fi Network config format ",
    "links" : [ ]
  }, {
    "name" : "private static List<String> getKeyValueList(String uri, String prefixUri, String delimiter)",
    "returnType" : "List<String>",
    "comment" : "\n     * Splits key/value pairs from uri\n     *\n     * @param uri the Wifi Uri raw string\n     * @param prefixUri the string before all key/value pairs in uri\n     * @param delimiter the string to split key/value pairs, can't contain a backslash\n     * @return a list contains string of key/value (e.g. K:key1)\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String getValueOrNull(List<String> keyValueList, String prefix)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static String removeBackSlash(String input)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String addQuotationIfNeeded(String input)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isValidConfig(String security, String ssid, String preSharedKey)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static WifiConfiguration generatetWifiConfiguration(String security, String ssid, String preSharedKey, boolean hiddenSsid, int networkId, boolean isTransitionDisabled)",
    "returnType" : "WifiConfiguration",
    "comment" : "\n     * This is a simplified method from {@code WifiConfigController.getConfig()}\n     *\n     * @return WifiConfiguration from parsing result\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static UriParserResults parseUri(@NonNull String uri)", "private static UriParserResults parseWifiDppUri(String uri) throws IllegalArgumentException", "private static UriParserResults parseZxingWifiUriParser(String uri) throws IllegalArgumentException", "private static List<String> getKeyValueList(String uri, String prefixUri, String delimiter)", "private static String getValueOrNull(List<String> keyValueList, String prefix)", " static String removeBackSlash(String input)", "private static String addQuotationIfNeeded(String input)", "private static boolean isValidConfig(String security, String ssid, String preSharedKey)", "private static WifiConfiguration generatetWifiConfiguration(String security, String ssid, String preSharedKey, boolean hiddenSsid, int networkId, boolean isTransitionDisabled)" ],
  "variableNames" : [ "TAG", "SCHEME_DPP", "SCHEME_ZXING_WIFI_NETWORK_CONFIG", "PREFIX_DPP", "PREFIX_ZXING_WIFI_NETWORK_CONFIG", "PREFIX_DPP_PUBLIC_KEY", "PREFIX_DPP_INFORMATION", "PREFIX_ZXING_SECURITY", "PREFIX_ZXING_SSID", "PREFIX_ZXING_PASSWORD", "PREFIX_ZXING_HIDDEN_SSID", "PREFIX_ZXING_TRANSITION_DISABLE", "DELIMITER_QR_CODE", "SECURITY_NO_PASSWORD", "SECURITY_WEP", "SECURITY_WPA_PSK", "SECURITY_SAE", "SECURITY_ADB" ]
}