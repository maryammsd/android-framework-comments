{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/widget/OverScroller.java",
  "packageName" : "android.widget",
  "className" : "SplineOverScroller",
  "comment" : "",
  "variables" : [ {
    "name" : "mStart",
    "type" : "int",
    "comment" : " Initial position",
    "links" : [ ]
  }, {
    "name" : "mCurrentPosition",
    "type" : "int",
    "comment" : " Current position",
    "links" : [ ]
  }, {
    "name" : "mFinal",
    "type" : "int",
    "comment" : " Final position",
    "links" : [ ]
  }, {
    "name" : "mVelocity",
    "type" : "int",
    "comment" : " Initial velocity",
    "links" : [ ]
  }, {
    "name" : "mCurrVelocity",
    "type" : "float",
    "comment" : " Current velocity",
    "links" : [ ]
  }, {
    "name" : "mDeceleration",
    "type" : "float",
    "comment" : " Constant current deceleration",
    "links" : [ ]
  }, {
    "name" : "mStartTime",
    "type" : "long",
    "comment" : " Animation starting time, in system milliseconds",
    "links" : [ ]
  }, {
    "name" : "mDuration",
    "type" : "int",
    "comment" : " Animation duration, in milliseconds",
    "links" : [ ]
  }, {
    "name" : "mSplineDuration",
    "type" : "int",
    "comment" : " Duration to complete spline component of animation",
    "links" : [ ]
  }, {
    "name" : "mSplineDistance",
    "type" : "int",
    "comment" : " Distance to travel along spline animation",
    "links" : [ ]
  }, {
    "name" : "mFinished",
    "type" : "boolean",
    "comment" : " Whether the animation is currently in progress",
    "links" : [ ]
  }, {
    "name" : "mOver",
    "type" : "int",
    "comment" : " The allowed overshot distance before boundary is reached.",
    "links" : [ ]
  }, {
    "name" : "mFlingFriction",
    "type" : "float",
    "comment" : " Fling friction",
    "links" : [ ]
  }, {
    "name" : "mState",
    "type" : "int",
    "comment" : " Current state of the animation.",
    "links" : [ ]
  }, {
    "name" : "GRAVITY",
    "type" : "float",
    "comment" : " Constant gravity value, used in the deceleration phase.",
    "links" : [ ]
  }, {
    "name" : "mPhysicalCoeff",
    "type" : "float",
    "comment" : " A context-specific coefficient adjusted to physical values.",
    "links" : [ ]
  }, {
    "name" : "DECELERATION_RATE",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INFLEXION",
    "type" : "float",
    "comment" : " Tension lines cross at (INFLEXION, 1)",
    "links" : [ ]
  }, {
    "name" : "START_TENSION",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "END_TENSION",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "P1",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "P2",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NB_SAMPLES",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SPLINE_POSITION",
    "type" : "float[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SPLINE_TIME",
    "type" : "float[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SPLINE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CUBIC",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BALLISTIC",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " void setFriction(float friction)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void updateScroll(float q)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static float getDeceleration(int velocity)",
    "returnType" : "float",
    "comment" : "\n         * Get a signed deceleration that will reduce the velocity.\n         ",
    "links" : [ ]
  }, {
    "name" : "private void adjustDuration(int start, int oldFinal, int newFinal)",
    "returnType" : "void",
    "comment" : "\n         * Modifies mDuration to the duration it takes to get from start to newFinal using the\n         * spline interpolation. The previous duration was needed to get to oldFinal.\n         ",
    "links" : [ ]
  }, {
    "name" : " void startScroll(int start, int distance, int duration)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void finish()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void setFinalPosition(int position)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void extendDuration(int extend)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean springback(int start, int min, int max)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void startSpringback(int start, int end, int velocity)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void fling(int start, int velocity, int min, int max, int over)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private double getSplineDeceleration(int velocity)",
    "returnType" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private double getSplineFlingDistance(int velocity)",
    "returnType" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getSplineFlingDuration(int velocity)",
    "returnType" : "int",
    "comment" : " Returns the duration, expressed in milliseconds ",
    "links" : [ ]
  }, {
    "name" : "private void fitOnBounceCurve(int start, int end, int velocity)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void startBounceAfterEdge(int start, int end, int velocity)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void startAfterEdge(int start, int min, int max, int velocity)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void notifyEdgeReached(int start, int end, int over)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onEdgeReached()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean continueWhenFinished()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean update()",
    "returnType" : "boolean",
    "comment" : "\n         * Update the current position and velocity for current time. Returns\n         * true if update has been done and false if animation duration has been\n         * reached.\n         ",
    "links" : [ ]
  } ],
  "variableNames" : [ "mStart", "mCurrentPosition", "mFinal", "mVelocity", "mCurrVelocity", "mDeceleration", "mStartTime", "mDuration", "mSplineDuration", "mSplineDistance", "mFinished", "mOver", "mFlingFriction", "mState", "GRAVITY", "mPhysicalCoeff", "DECELERATION_RATE", "INFLEXION", "START_TENSION", "END_TENSION", "P1", "P2", "NB_SAMPLES", "SPLINE_POSITION", "SPLINE_TIME", "SPLINE", "CUBIC", "BALLISTIC" ],
  "methodNames" : [ " void setFriction(float friction)", " void updateScroll(float q)", "private static float getDeceleration(int velocity)", "private void adjustDuration(int start, int oldFinal, int newFinal)", " void startScroll(int start, int distance, int duration)", " void finish()", " void setFinalPosition(int position)", " void extendDuration(int extend)", " boolean springback(int start, int min, int max)", "private void startSpringback(int start, int end, int velocity)", " void fling(int start, int velocity, int min, int max, int over)", "private double getSplineDeceleration(int velocity)", "private double getSplineFlingDistance(int velocity)", "private int getSplineFlingDuration(int velocity)", "private void fitOnBounceCurve(int start, int end, int velocity)", "private void startBounceAfterEdge(int start, int end, int velocity)", "private void startAfterEdge(int start, int min, int max, int velocity)", " void notifyEdgeReached(int start, int end, int over)", "private void onEdgeReached()", " boolean continueWhenFinished()", " boolean update()" ]
}