{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/accessibilityservice/AccessibilityServiceInfo.java",
  "packageName" : "android.accessibilityservice",
  "className" : "AccessibilityServiceInfo",
  "comment" : "\n * This class describes an {@link AccessibilityService}. The system notifies an\n * {@link AccessibilityService} for {@link android.view.accessibility.AccessibilityEvent}s\n * according to the information encapsulated in this class.\n *\n * <div class=\"special reference\">\n * <h3>Developer Guides</h3>\n * <p>For more information about creating AccessibilityServices, read the\n * <a href=\"{@docRoot}guide/topics/ui/accessibility/index.html\">Accessibility</a>\n * developer guide.</p>\n * </div>\n *\n * @attr ref android.R.styleable#AccessibilityService_accessibilityEventTypes\n * @attr ref android.R.styleable#AccessibilityService_accessibilityFeedbackType\n * @attr ref android.R.styleable#AccessibilityService_accessibilityFlags\n * @attr ref android.R.styleable#AccessibilityService_canRequestFilterKeyEvents\n * @attr ref android.R.styleable#AccessibilityService_canRequestTouchExplorationMode\n * @attr ref android.R.styleable#AccessibilityService_canRetrieveWindowContent\n * @attr ref android.R.styleable#AccessibilityService_intro\n * @attr ref android.R.styleable#AccessibilityService_description\n * @attr ref android.R.styleable#AccessibilityService_summary\n * @attr ref android.R.styleable#AccessibilityService_notificationTimeout\n * @attr ref android.R.styleable#AccessibilityService_packageNames\n * @attr ref android.R.styleable#AccessibilityService_settingsActivity\n * @attr ref android.R.styleable#AccessibilityService_tileService\n * @attr ref android.R.styleable#AccessibilityService_nonInteractiveUiTimeout\n * @attr ref android.R.styleable#AccessibilityService_interactiveUiTimeout\n * @attr ref android.R.styleable#AccessibilityService_canTakeScreenshot\n * @see AccessibilityService\n * @see android.view.accessibility.AccessibilityEvent\n * @see android.view.accessibility.AccessibilityManager\n ",
  "links" : [ "android.accessibilityservice.AccessibilityService", "android.view.accessibility.AccessibilityEvent" ],
  "variables" : [ {
    "name" : "TAG_ACCESSIBILITY_SERVICE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CAPABILITY_CAN_RETRIEVE_WINDOW_CONTENT",
    "type" : "int",
    "comment" : "\n     * Capability: This accessibility service can retrieve the active window content.\n     * @see android.R.styleable#AccessibilityService_canRetrieveWindowContent\n     ",
    "links" : [ ]
  }, {
    "name" : "CAPABILITY_CAN_REQUEST_TOUCH_EXPLORATION",
    "type" : "int",
    "comment" : "\n     * Capability: This accessibility service can request touch exploration mode in which\n     * touched items are spoken aloud and the UI can be explored via gestures.\n     * @see android.R.styleable#AccessibilityService_canRequestTouchExplorationMode\n     ",
    "links" : [ ]
  }, {
    "name" : "CAPABILITY_CAN_REQUEST_ENHANCED_WEB_ACCESSIBILITY",
    "type" : "int",
    "comment" : "\n     * @deprecated No longer used\n     ",
    "links" : [ ]
  }, {
    "name" : "CAPABILITY_CAN_REQUEST_FILTER_KEY_EVENTS",
    "type" : "int",
    "comment" : "\n     * Capability: This accessibility service can request to filter the key event stream.\n     * @see android.R.styleable#AccessibilityService_canRequestFilterKeyEvents\n     ",
    "links" : [ ]
  }, {
    "name" : "CAPABILITY_CAN_CONTROL_MAGNIFICATION",
    "type" : "int",
    "comment" : "\n     * Capability: This accessibility service can control display magnification.\n     * @see android.R.styleable#AccessibilityService_canControlMagnification\n     ",
    "links" : [ ]
  }, {
    "name" : "CAPABILITY_CAN_PERFORM_GESTURES",
    "type" : "int",
    "comment" : "\n     * Capability: This accessibility service can perform gestures.\n     * @see android.R.styleable#AccessibilityService_canPerformGestures\n     ",
    "links" : [ ]
  }, {
    "name" : "CAPABILITY_CAN_REQUEST_FINGERPRINT_GESTURES",
    "type" : "int",
    "comment" : "\n     * Capability: This accessibility service can capture gestures from the fingerprint sensor\n     * @see android.R.styleable#AccessibilityService_canRequestFingerprintGestures\n     ",
    "links" : [ ]
  }, {
    "name" : "CAPABILITY_CAN_TAKE_SCREENSHOT",
    "type" : "int",
    "comment" : "\n     * Capability: This accessibility service can take screenshot.\n     * @see android.R.styleable#AccessibilityService_canTakeScreenshot\n     ",
    "links" : [ ]
  }, {
    "name" : "sAvailableCapabilityInfos",
    "type" : "SparseArray<CapabilityInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FEEDBACK_SPOKEN",
    "type" : "int",
    "comment" : "\n     * Denotes spoken feedback.\n     ",
    "links" : [ ]
  }, {
    "name" : "FEEDBACK_HAPTIC",
    "type" : "int",
    "comment" : "\n     * Denotes haptic feedback.\n     ",
    "links" : [ ]
  }, {
    "name" : "FEEDBACK_AUDIBLE",
    "type" : "int",
    "comment" : "\n     * Denotes audible (not spoken) feedback.\n     ",
    "links" : [ ]
  }, {
    "name" : "FEEDBACK_VISUAL",
    "type" : "int",
    "comment" : "\n     * Denotes visual feedback.\n     ",
    "links" : [ ]
  }, {
    "name" : "FEEDBACK_GENERIC",
    "type" : "int",
    "comment" : "\n     * Denotes generic feedback.\n     ",
    "links" : [ ]
  }, {
    "name" : "FEEDBACK_BRAILLE",
    "type" : "int",
    "comment" : "\n     * Denotes braille feedback.\n     ",
    "links" : [ ]
  }, {
    "name" : "FEEDBACK_ALL_MASK",
    "type" : "int",
    "comment" : "\n     * Mask for all feedback types.\n     *\n     * @see #FEEDBACK_SPOKEN\n     * @see #FEEDBACK_HAPTIC\n     * @see #FEEDBACK_AUDIBLE\n     * @see #FEEDBACK_VISUAL\n     * @see #FEEDBACK_GENERIC\n     * @see #FEEDBACK_BRAILLE\n     ",
    "links" : [ ]
  }, {
    "name" : "DEFAULT",
    "type" : "int",
    "comment" : "\n     * If an {@link AccessibilityService} is the default for a given type.\n     * Default service is invoked only if no package specific one exists. In case of\n     * more than one package specific service only the earlier registered is notified.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService" ]
  }, {
    "name" : "FLAG_INCLUDE_NOT_IMPORTANT_VIEWS",
    "type" : "int",
    "comment" : "\n     * If this flag is set the system will regard views that are not important\n     * for accessibility in addition to the ones that are important for accessibility.\n     * That is, views that are marked as not important for accessibility via\n     * {@link View#IMPORTANT_FOR_ACCESSIBILITY_NO} or\n     * {@link View#IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS} and views that are\n     * marked as potentially important for accessibility via\n     * {@link View#IMPORTANT_FOR_ACCESSIBILITY_AUTO} for which the system has determined\n     * that are not important for accessibility, are reported while querying the window\n     * content and also the accessibility service will receive accessibility events from\n     * them.\n     * <p>\n     * <strong>Note:</strong> For accessibility services targeting Android 4.1 (API level 16) or\n     * higher, this flag has to be explicitly set for the system to regard views that are not\n     * important for accessibility. For accessibility services targeting Android 4.0.4 (API level\n     * 15) or lower, this flag is ignored and all views are regarded for accessibility purposes.\n     * </p>\n     * <p>\n     * Usually views not important for accessibility are layout managers that do not\n     * react to user actions, do not draw any content, and do not have any special\n     * semantics in the context of the screen content. For example, a three by three\n     * grid can be implemented as three horizontal linear layouts and one vertical,\n     * or three vertical linear layouts and one horizontal, or one grid layout, etc.\n     * In this context, the actual layout managers used to achieve the grid configuration\n     * are not important; rather it is important that there are nine evenly distributed\n     * elements.\n     * </p>\n     ",
    "links" : [ "android.view.View#IMPORTANT_FOR_ACCESSIBILITY_AUTO", "android.view.View#IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS", "android.view.View#IMPORTANT_FOR_ACCESSIBILITY_NO" ]
  }, {
    "name" : "FLAG_REQUEST_TOUCH_EXPLORATION_MODE",
    "type" : "int",
    "comment" : "\n     * This flag requests that the system gets into touch exploration mode.\n     * In this mode a single finger moving on the screen behaves as a mouse\n     * pointer hovering over the user interface. The system will also detect\n     * certain gestures performed on the touch screen and notify this service.\n     * The system will enable touch exploration mode if there is at least one\n     * accessibility service that has this flag set. Hence, clearing this\n     * flag does not guarantee that the device will not be in touch exploration\n     * mode since there may be another enabled service that requested it.\n     * <p>\n     * For accessibility services targeting Android 4.3 (API level 18) or higher\n     * that want to set this flag have to declare this capability in their\n     * meta-data by setting the attribute\n     * {@link android.R.attr#canRequestTouchExplorationMode\n     * canRequestTouchExplorationMode} to true. Otherwise, this flag will\n     * be ignored. For how to declare the meta-data of a service refer to\n     * {@value AccessibilityService#SERVICE_META_DATA}.\n     * </p>\n     * <p>\n     * Services targeting Android 4.2.2 (API level 17) or lower will work\n     * normally. In other words, the first time they are run, if this flag is\n     * specified, a dialog is shown to the user to confirm enabling explore by\n     * touch.\n     * </p>\n     * @see android.R.styleable#AccessibilityService_canRequestTouchExplorationMode\n     ",
    "links" : [ "android.R.attr#canRequestTouchExplorationModecanRequestTouchExplorationMode" ]
  }, {
    "name" : "FLAG_REQUEST_ENHANCED_WEB_ACCESSIBILITY",
    "type" : "int",
    "comment" : "\n     * @deprecated No longer used\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_REPORT_VIEW_IDS",
    "type" : "int",
    "comment" : "\n     * This flag requests that the {@link AccessibilityNodeInfo}s obtained\n     * by an {@link AccessibilityService} contain the id of the source view.\n     * The source view id will be a fully qualified resource name of the\n     * form \"package:id/name\", for example \"foo.bar:id/my_list\", and it is\n     * useful for UI test automation. This flag is not set by default.\n     ",
    "links" : [ "android.view.accessibility.AccessibilityNodeInfo", "android.accessibilityservice.AccessibilityService" ]
  }, {
    "name" : "FLAG_REQUEST_FILTER_KEY_EVENTS",
    "type" : "int",
    "comment" : "\n     * This flag requests from the system to filter key events. If this flag\n     * is set the accessibility service will receive the key events before\n     * applications allowing it implement global shortcuts.\n     * <p>\n     * Services that want to set this flag have to declare this capability\n     * in their meta-data by setting the attribute {@link android.R.attr\n     * #canRequestFilterKeyEvents canRequestFilterKeyEvents} to true,\n     * otherwise this flag will be ignored. For how to declare the meta-data\n     * of a service refer to {@value AccessibilityService#SERVICE_META_DATA}.\n     * </p>\n     * @see android.R.styleable#AccessibilityService_canRequestFilterKeyEvents\n     ",
    "links" : [ "android.R.attr#canRequestFilterKeyEvents" ]
  }, {
    "name" : "FLAG_RETRIEVE_INTERACTIVE_WINDOWS",
    "type" : "int",
    "comment" : "\n     * This flag indicates to the system that the accessibility service wants\n     * to access content of all interactive windows. An interactive window is a\n     * window that has input focus or can be touched by a sighted user when explore\n     * by touch is not enabled. If this flag is not set your service will not receive\n     * {@link android.view.accessibility.AccessibilityEvent#TYPE_WINDOWS_CHANGED}\n     * events, calling AccessibilityService{@link AccessibilityService#getWindows()\n     * AccessibilityService.getWindows()} will return an empty list, and {@link\n     * AccessibilityNodeInfo#getWindow() AccessibilityNodeInfo.getWindow()} will\n     * return null.\n     * <p>\n     * Services that want to set this flag have to declare the capability\n     * to retrieve window content in their meta-data by setting the attribute\n     * {@link android.R.attr#canRetrieveWindowContent canRetrieveWindowContent} to\n     * true, otherwise this flag will be ignored. For how to declare the meta-data\n     * of a service refer to {@value AccessibilityService#SERVICE_META_DATA}.\n     * </p>\n     * @see android.R.styleable#AccessibilityService_canRetrieveWindowContent\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService#getWindows()", "android.R.attr#canRetrieveWindowContent", "android.view.accessibility.AccessibilityNodeInfo#getWindow()", "android.view.accessibility.AccessibilityEvent#TYPE_WINDOWS_CHANGED" ]
  }, {
    "name" : "FLAG_ENABLE_ACCESSIBILITY_VOLUME",
    "type" : "int",
    "comment" : "\n     * This flag requests that all audio tracks system-wide with\n     * {@link android.media.AudioAttributes#USAGE_ASSISTANCE_ACCESSIBILITY} be controlled by the\n     * {@link android.media.AudioManager#STREAM_ACCESSIBILITY} volume.\n     ",
    "links" : [ "android.media.AudioAttributes#USAGE_ASSISTANCE_ACCESSIBILITY", "android.media.AudioManager#STREAM_ACCESSIBILITY" ]
  }, {
    "name" : "FLAG_REQUEST_ACCESSIBILITY_BUTTON",
    "type" : "int",
    "comment" : "\n     * This flag indicates to the system that the accessibility service requests that an\n     * accessibility button be shown within the system's navigation area, if available.\n      * <p>\n      *   <strong>Note:</strong> For accessibility services targeting APIs greater than\n      *   {@link Build.VERSION_CODES#Q API 29}, this flag must be specified in the\n      *   accessibility service metadata file. Otherwise, it will be ignored.\n      * </p>\n     ",
    "links" : [ "Build.VERSION_CODES#Q" ]
  }, {
    "name" : "FLAG_REQUEST_FINGERPRINT_GESTURES",
    "type" : "int",
    "comment" : "\n     * This flag requests that all fingerprint gestures be sent to the accessibility service.\n     * <p>\n     * Services that want to set this flag have to declare the capability\n     * to retrieve window content in their meta-data by setting the attribute\n     * {@link android.R.attr#canRequestFingerprintGestures} to\n     * true, otherwise this flag will be ignored. For how to declare the meta-data\n     * of a service refer to {@value AccessibilityService#SERVICE_META_DATA}.\n     * </p>\n     *\n     * @see android.R.styleable#AccessibilityService_canRequestFingerprintGestures\n     * @see AccessibilityService#getFingerprintGestureController()\n     ",
    "links" : [ "android.R.attr#canRequestFingerprintGestures" ]
  }, {
    "name" : "FLAG_REQUEST_SHORTCUT_WARNING_DIALOG_SPOKEN_FEEDBACK",
    "type" : "int",
    "comment" : "\n     * This flag requests that accessibility shortcut warning dialog has spoken feedback when\n     * dialog is shown.\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_SERVICE_HANDLES_DOUBLE_TAP",
    "type" : "int",
    "comment" : "\n     * This flag requests that when {@link #FLAG_REQUEST_TOUCH_EXPLORATION_MODE} is enabled,\n     * double tap and double tap and hold gestures are dispatched to the service rather than being\n     * handled by the framework. If {@link #FLAG_REQUEST_TOUCH_EXPLORATION_MODE} is disabled this\n     * flag has no effect.\n     *\n     * @see #FLAG_REQUEST_TOUCH_EXPLORATION_MODE\n     ",
    "links" : [ "#FLAG_REQUEST_TOUCH_EXPLORATION_MODE" ]
  }, {
    "name" : "FLAG_REQUEST_MULTI_FINGER_GESTURES",
    "type" : "int",
    "comment" : "\n     * This flag requests that when when {@link #FLAG_REQUEST_TOUCH_EXPLORATION_MODE} is enabled,\n     * multi-finger gestures are also enabled. As a consequence, two-finger bypass gestures will be\n     * disabled. If {@link #FLAG_REQUEST_TOUCH_EXPLORATION_MODE} is disabled this flag has no\n     * effect.\n     *\n     * @see #FLAG_REQUEST_TOUCH_EXPLORATION_MODE\n     ",
    "links" : [ "#FLAG_REQUEST_TOUCH_EXPLORATION_MODE" ]
  }, {
    "name" : "FLAG_REQUEST_2_FINGER_PASSTHROUGH",
    "type" : "int",
    "comment" : "\n     * This flag requests that when when {@link #FLAG_REQUEST_MULTI_FINGER_GESTURES} is enabled,\n     * two-finger passthrough gestures are re-enabled. Two-finger swipe gestures are not detected,\n     * but instead passed through as one-finger gestures. In addition, three-finger swipes from the\n     * bottom of the screen are not detected, and instead are passed through unchanged. If {@link\n     * #FLAG_REQUEST_MULTI_FINGER_GESTURES} is disabled this flag has no effect.\n     *\n     * @see #FLAG_REQUEST_TOUCH_EXPLORATION_MODE\n     ",
    "links" : [ "#FLAG_REQUEST_MULTI_FINGER_GESTURES" ]
  }, {
    "name" : "FLAG_SEND_MOTION_EVENTS",
    "type" : "int",
    "comment" : "\n     * This flag requests that when when {@link #FLAG_REQUEST_TOUCH_EXPLORATION_MODE} is enabled, a\n     * service will receive the motion events for each successfully-detected gesture. The service\n     * will also receive an AccessibilityGestureEvent of type GESTURE_INVALID for each cancelled\n     * gesture along with its motion events. A service will receive a gesture of type\n     * GESTURE_PASSTHROUGH and accompanying motion events for every passthrough gesture that does\n     * not start gesture detection. This information can be used to collect instances of improper\n     * gesture detection behavior and relay that information to framework developers. If {@link\n     * #FLAG_REQUEST_TOUCH_EXPLORATION_MODE} is disabled this flag has no effect.\n     *\n     * @see #FLAG_REQUEST_TOUCH_EXPLORATION_MODE\n     ",
    "links" : [ "#FLAG_REQUEST_TOUCH_EXPLORATION_MODE" ]
  }, {
    "name" : "FLAG_INPUT_METHOD_EDITOR",
    "type" : "int",
    "comment" : "\n     * This flag makes the AccessibilityService an input method editor with a subset of input\n     * method editor capabilities: get the {@link android.view.inputmethod.InputConnection} and get\n     * text selection change notifications.\n     *\n     * @see AccessibilityService#getInputMethod()\n     ",
    "links" : [ "android.view.inputmethod.InputConnection" ]
  }, {
    "name" : "FLAG_FORCE_DIRECT_BOOT_AWARE",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "eventTypes",
    "type" : "int",
    "comment" : "\n     * The event types an {@link AccessibilityService} is interested in.\n     * <p>\n     *   <strong>Can be dynamically set at runtime.</strong>\n     * </p>\n     * @see android.view.accessibility.AccessibilityEvent#TYPE_VIEW_CLICKED\n     * @see android.view.accessibility.AccessibilityEvent#TYPE_VIEW_LONG_CLICKED\n     * @see android.view.accessibility.AccessibilityEvent#TYPE_VIEW_FOCUSED\n     * @see android.view.accessibility.AccessibilityEvent#TYPE_VIEW_SELECTED\n     * @see android.view.accessibility.AccessibilityEvent#TYPE_VIEW_TEXT_CHANGED\n     * @see android.view.accessibility.AccessibilityEvent#TYPE_WINDOW_STATE_CHANGED\n     * @see android.view.accessibility.AccessibilityEvent#TYPE_NOTIFICATION_STATE_CHANGED\n     * @see android.view.accessibility.AccessibilityEvent#TYPE_TOUCH_EXPLORATION_GESTURE_START\n     * @see android.view.accessibility.AccessibilityEvent#TYPE_TOUCH_EXPLORATION_GESTURE_END\n     * @see android.view.accessibility.AccessibilityEvent#TYPE_VIEW_HOVER_ENTER\n     * @see android.view.accessibility.AccessibilityEvent#TYPE_VIEW_HOVER_EXIT\n     * @see android.view.accessibility.AccessibilityEvent#TYPE_VIEW_SCROLLED\n     * @see android.view.accessibility.AccessibilityEvent#TYPE_VIEW_TEXT_SELECTION_CHANGED\n     * @see android.view.accessibility.AccessibilityEvent#TYPE_WINDOW_CONTENT_CHANGED\n     * @see android.view.accessibility.AccessibilityEvent#TYPE_TOUCH_INTERACTION_START\n     * @see android.view.accessibility.AccessibilityEvent#TYPE_TOUCH_INTERACTION_END\n     * @see android.view.accessibility.AccessibilityEvent#TYPE_ANNOUNCEMENT\n     * @see android.view.accessibility.AccessibilityEvent#TYPE_GESTURE_DETECTION_START\n     * @see android.view.accessibility.AccessibilityEvent#TYPE_GESTURE_DETECTION_END\n     * @see android.view.accessibility.AccessibilityEvent#TYPE_VIEW_ACCESSIBILITY_FOCUSED\n     * @see android.view.accessibility.AccessibilityEvent#TYPE_VIEW_ACCESSIBILITY_FOCUS_CLEARED\n     * @see android.view.accessibility.AccessibilityEvent#TYPE_VIEW_TEXT_TRAVERSED_AT_MOVEMENT_GRANULARITY\n     * @see android.view.accessibility.AccessibilityEvent#TYPE_WINDOWS_CHANGED\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService" ]
  }, {
    "name" : "packageNames",
    "type" : "String[]",
    "comment" : "\n     * The package names an {@link AccessibilityService} is interested in. Setting\n     * to <code>null</code> is equivalent to all packages.\n     * <p>\n     *   <strong>Can be dynamically set at runtime.</strong>\n     * </p>\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService" ]
  }, {
    "name" : "feedbackType",
    "type" : "int",
    "comment" : "\n     * The feedback type an {@link AccessibilityService} provides.\n     * <p>\n     *   <strong>Can be dynamically set at runtime.</strong>\n     * </p>\n     * @see #FEEDBACK_AUDIBLE\n     * @see #FEEDBACK_GENERIC\n     * @see #FEEDBACK_HAPTIC\n     * @see #FEEDBACK_SPOKEN\n     * @see #FEEDBACK_VISUAL\n     * @see #FEEDBACK_BRAILLE\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService" ]
  }, {
    "name" : "notificationTimeout",
    "type" : "long",
    "comment" : "\n     * The timeout, in milliseconds, after the most recent event of a given type before an\n     * {@link AccessibilityService} is notified.\n     * <p>\n     *   <strong>Can be dynamically set at runtime.</strong>\n     * </p>\n     * <p>\n     * <strong>Note:</strong> The event notification timeout is useful to avoid propagating\n     *       events to the client too frequently since this is accomplished via an expensive\n     *       interprocess call. One can think of the timeout as a criteria to determine when\n     *       event generation has settled down.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService" ]
  }, {
    "name" : "flags",
    "type" : "int",
    "comment" : "\n     * This field represents a set of flags used for configuring an\n     * {@link AccessibilityService}.\n     * <p>\n     *   <strong>Can be dynamically set at runtime.</strong>\n     * </p>\n     * <p>\n     *   <strong>Note:</strong> Accessibility services with targetSdkVersion greater than\n     *   {@link Build.VERSION_CODES#Q API 29} cannot dynamically set the\n     *   {@link #FLAG_REQUEST_ACCESSIBILITY_BUTTON} at runtime. It must be specified in the\n     *   accessibility service metadata file.\n     * </p>\n     * @see #DEFAULT\n     * @see #FLAG_INCLUDE_NOT_IMPORTANT_VIEWS\n     * @see #FLAG_REQUEST_TOUCH_EXPLORATION_MODE\n     * @see #FLAG_REQUEST_ENHANCED_WEB_ACCESSIBILITY\n     * @see #FLAG_REQUEST_FILTER_KEY_EVENTS\n     * @see #FLAG_REPORT_VIEW_IDS\n     * @see #FLAG_RETRIEVE_INTERACTIVE_WINDOWS\n     * @see #FLAG_ENABLE_ACCESSIBILITY_VOLUME\n     * @see #FLAG_REQUEST_ACCESSIBILITY_BUTTON\n     * @see #FLAG_REQUEST_SHORTCUT_WARNING_DIALOG_SPOKEN_FEEDBACK\n     * @see #FLAG_INPUT_METHOD_EDITOR\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService", "#FLAG_REQUEST_ACCESSIBILITY_BUTTON", "Build.VERSION_CODES#Q" ]
  }, {
    "name" : "crashed",
    "type" : "boolean",
    "comment" : "\n     * Whether or not the service has crashed and is awaiting restart. Only valid from {@link\n     * android.view.accessibility.AccessibilityManager#getInstalledAccessibilityServiceList()},\n     * because that is populated from the internal list of running services.\n     *\n     * @hide\n     ",
    "links" : [ "android.view.accessibility.AccessibilityManager#getInstalledAccessibilityServiceList()" ]
  }, {
    "name" : "mNonInteractiveUiTimeout",
    "type" : "int",
    "comment" : "\n     * A recommended timeout in milliseconds for non-interactive controls.\n     ",
    "links" : [ ]
  }, {
    "name" : "mInteractiveUiTimeout",
    "type" : "int",
    "comment" : "\n     * A recommended timeout in milliseconds for interactive controls.\n     ",
    "links" : [ ]
  }, {
    "name" : "mComponentName",
    "type" : "ComponentName",
    "comment" : "\n     * The component name the accessibility service.\n     ",
    "links" : [ ]
  }, {
    "name" : "mResolveInfo",
    "type" : "ResolveInfo",
    "comment" : "\n     * The Service that implements this accessibility service component.\n     ",
    "links" : [ ]
  }, {
    "name" : "mSettingsActivityName",
    "type" : "String",
    "comment" : "\n     * The accessibility service setting activity's name, used by the system\n     * settings to launch the setting activity of this accessibility service.\n     ",
    "links" : [ ]
  }, {
    "name" : "mTileServiceName",
    "type" : "String",
    "comment" : "\n     * The name of {@link android.service.quicksettings.TileService} is associated with this\n     * accessibility service for one to one mapping. It is used by system settings to remind users\n     * this accessibility service has a {@link android.service.quicksettings.TileService}.\n     ",
    "links" : [ "android.service.quicksettings.TileService" ]
  }, {
    "name" : "mCapabilities",
    "type" : "int",
    "comment" : "\n     * Bit mask with capabilities of this service.\n     ",
    "links" : [ ]
  }, {
    "name" : "mSummaryResId",
    "type" : "int",
    "comment" : "\n     * Resource id of the summary of the accessibility service.\n     ",
    "links" : [ ]
  }, {
    "name" : "mNonLocalizedSummary",
    "type" : "String",
    "comment" : "\n     * Non-localized summary of the accessibility service.\n     ",
    "links" : [ ]
  }, {
    "name" : "mIntroResId",
    "type" : "int",
    "comment" : "\n     * Resource id of the intro of the accessibility service.\n     ",
    "links" : [ ]
  }, {
    "name" : "mDescriptionResId",
    "type" : "int",
    "comment" : "\n     * Resource id of the description of the accessibility service.\n     ",
    "links" : [ ]
  }, {
    "name" : "mNonLocalizedDescription",
    "type" : "String",
    "comment" : "\n     * Non localized description of the accessibility service.\n     ",
    "links" : [ ]
  }, {
    "name" : "REQUEST_ACCESSIBILITY_BUTTON_CHANGE",
    "type" : "long",
    "comment" : "\n     * For accessibility services targeting APIs greater than {@link Build.VERSION_CODES#Q API 29},\n     * {@link #FLAG_REQUEST_ACCESSIBILITY_BUTTON} must be specified in the accessibility service\n     * metadata file. Otherwise, it will be ignored.\n     ",
    "links" : [ "#FLAG_REQUEST_ACCESSIBILITY_BUTTON", "Build.VERSION_CODES#Q" ]
  }, {
    "name" : "mAnimatedImageRes",
    "type" : "int",
    "comment" : "\n     * Resource id of the animated image of the accessibility service.\n     ",
    "links" : [ ]
  }, {
    "name" : "mHtmlDescriptionRes",
    "type" : "int",
    "comment" : "\n     * Resource id of the html description of the accessibility service.\n     ",
    "links" : [ ]
  }, {
    "name" : "mIsAccessibilityTool",
    "type" : "boolean",
    "comment" : "\n     * Whether the service is for accessibility.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mMotionEventSources",
    "type" : "int",
    "comment" : "\n     * The bit mask of {@link android.view.InputDevice} sources that the accessibility\n     * service wants to listen to for generic {@link android.view.MotionEvent}s.\n     ",
    "links" : [ "android.view.InputDevice", "android.view.MotionEvent" ]
  }, {
    "name" : "mObservedMotionEventSources",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDynamicPropertyDefaults",
    "type" : "DynamicPropertyDefaults",
    "comment" : " LINT.IfChange(dynamic_property_defaults)",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<AccessibilityServiceInfo>",
    "comment" : "\n     * @see Parcelable.Creator\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void resetDynamicallyConfigurableProperties()",
    "returnType" : "void",
    "comment" : " LINT.IfChange(dynamic_property_reset)",
    "links" : [ ]
  }, {
    "name" : "public void updateDynamicallyConfigurableProperties(IPlatformCompat platformCompat, AccessibilityServiceInfo other)",
    "returnType" : "void",
    "comment" : " LINT.IfChange(dynamic_property_update)",
    "links" : [ ]
  }, {
    "name" : "private boolean isRequestAccessibilityButtonChangeEnabled(IPlatformCompat platformCompat)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setComponentName(@NonNull ComponentName component)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setResolveInfo(@NonNull ResolveInfo resolveInfo)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public ComponentName getComponentName()",
    "returnType" : "ComponentName",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getId()",
    "returnType" : "String",
    "comment" : "\n     * The accessibility service id.\n     * <p>\n     *   <strong>Generated by the system.</strong>\n     * </p>\n     * @return The id (or {@code null} if the component is not set yet).\n     ",
    "links" : [ ]
  }, {
    "name" : "public ResolveInfo getResolveInfo()",
    "returnType" : "ResolveInfo",
    "comment" : "\n     * The service {@link ResolveInfo}.\n     * <p>\n     *   <strong>Generated by the system.</strong>\n     * </p>\n     * @return The info.\n     ",
    "links" : [ "android.content.pm.ResolveInfo" ]
  }, {
    "name" : "public String getSettingsActivityName()",
    "returnType" : "String",
    "comment" : "\n     * The settings activity name.\n     * <p>\n     *    <strong>Statically set from\n     *    {@link AccessibilityService#SERVICE_META_DATA meta-data}.</strong>\n     * </p>\n     * @return The settings activity name.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService#SERVICE_META_DATA" ]
  }, {
    "name" : "public String getTileServiceName()",
    "returnType" : "String",
    "comment" : "\n     * Gets the name of {@link android.service.quicksettings.TileService} is associated with\n     * this accessibility service.\n     *\n     * @return The name of {@link android.service.quicksettings.TileService}.\n     ",
    "links" : [ "android.service.quicksettings.TileService" ]
  }, {
    "name" : "public int getAnimatedImageRes()",
    "returnType" : "int",
    "comment" : "\n     * Gets the animated image resource id.\n     *\n     * @return The animated image resource id.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Drawable loadAnimatedImage(@NonNull Context context)",
    "returnType" : "Drawable",
    "comment" : "\n     * The animated image drawable.\n     * <p>\n     *    Image can not exceed the screen size.\n     *    <strong>Statically set from\n     *    {@link AccessibilityService#SERVICE_META_DATA meta-data}.</strong>\n     * </p>\n     * @return The animated image drawable, or null if the resource is invalid or the image\n     * exceed the screen size.\n     *\n     * @hide\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService#SERVICE_META_DATA" ]
  }, {
    "name" : "public boolean getCanRetrieveWindowContent()",
    "returnType" : "boolean",
    "comment" : "\n     * Whether this service can retrieve the current window's content.\n     * <p>\n     *    <strong>Statically set from\n     *    {@link AccessibilityService#SERVICE_META_DATA meta-data}.</strong>\n     * </p>\n     * @return True if window content can be retrieved.\n     *\n     * @deprecated Use {@link #getCapabilities()}.\n     ",
    "links" : [ "#getCapabilities()", "android.accessibilityservice.AccessibilityService#SERVICE_META_DATA" ]
  }, {
    "name" : "public int getCapabilities()",
    "returnType" : "int",
    "comment" : "\n     * Returns the bit mask of capabilities this accessibility service has such as\n     * being able to retrieve the active window content, etc.\n     *\n     * @return The capability bit mask.\n     *\n     * @see #CAPABILITY_CAN_RETRIEVE_WINDOW_CONTENT\n     * @see #CAPABILITY_CAN_REQUEST_TOUCH_EXPLORATION\n     * @see #CAPABILITY_CAN_REQUEST_FILTER_KEY_EVENTS\n     * @see #CAPABILITY_CAN_CONTROL_MAGNIFICATION\n     * @see #CAPABILITY_CAN_PERFORM_GESTURES\n     * @see #CAPABILITY_CAN_TAKE_SCREENSHOT\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCapabilities(int capabilities)",
    "returnType" : "void",
    "comment" : "\n     * Sets the bit mask of capabilities this accessibility service has such as\n     * being able to retrieve the active window content, etc.\n     *\n     * @param capabilities The capability bit mask.\n     *\n     * @see #CAPABILITY_CAN_RETRIEVE_WINDOW_CONTENT\n     * @see #CAPABILITY_CAN_REQUEST_TOUCH_EXPLORATION\n     * @see #CAPABILITY_CAN_REQUEST_FILTER_KEY_EVENTS\n     * @see #CAPABILITY_CAN_CONTROL_MAGNIFICATION\n     * @see #CAPABILITY_CAN_PERFORM_GESTURES\n     * @see #CAPABILITY_CAN_TAKE_SCREENSHOT\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getMotionEventSources()",
    "returnType" : "int",
    "comment" : "\n     * Returns the bit mask of {@link android.view.InputDevice} sources that the accessibility\n     * service wants to listen to for generic {@link android.view.MotionEvent}s.\n     ",
    "links" : [ "android.view.InputDevice", "android.view.MotionEvent" ]
  }, {
    "name" : "public void setMotionEventSources(@MotionEventSources int motionEventSources)",
    "returnType" : "void",
    "comment" : "\n     * Sets the bit mask of {@link android.view.InputDevice} sources that the accessibility\n     * service wants to listen to for generic {@link android.view.MotionEvent}s.\n     *\n     * <p>\n     * Including an {@link android.view.InputDevice} source that does not send\n     * {@link android.view.MotionEvent}s is effectively a no-op for that source, since you will\n     * not receive any events from that source.\n     * </p>\n     *\n     * <p>\n     * See {@link android.view.InputDevice} for complete source definitions.\n     * Many input devices send {@link android.view.InputEvent}s from more than one type of source so\n     * you may need to include multiple {@link android.view.MotionEvent} sources here, in addition\n     * to using {@link AccessibilityService#onKeyEvent} to listen to {@link android.view.KeyEvent}s.\n     * </p>\n     *\n     * <p>\n     * <strong>Note:</strong> {@link android.view.InputDevice} sources contain source class bits\n     * that complicate bitwise flag removal operations. To remove a specific source you should\n     * rebuild the entire value using bitwise OR operations on the individual source constants.\n     * </p>\n     *\n     * @param motionEventSources A bit mask of {@link android.view.InputDevice} sources.\n     * @see AccessibilityService#onMotionEvent\n     ",
    "links" : [ "android.view.KeyEvent", "android.view.InputDevice", "android.view.MotionEvent", "android.view.InputEvent", "android.accessibilityservice.AccessibilityService#onKeyEvent" ]
  }, {
    "name" : "public void setObservedMotionEventSources(int observedMotionEventSources)",
    "returnType" : "void",
    "comment" : "\n     * Sets the bit mask of {@link android.view.InputDevice} sources that the accessibility service\n     * wants to observe generic {@link android.view.MotionEvent}s from if it has already requested\n     * to listen to them using {@link #setMotionEventSources(int)}. Events from these sources will\n     * be sent to the rest of the input pipeline without being consumed by accessibility services.\n     * This service will still be able to see them.\n     *\n     * <p><strong>Note:</strong> you will need to call this function every time you call {@link\n     * #setMotionEventSources(int)}. Calling {@link #setMotionEventSources(int)} clears the list of\n     * observed motion event sources for this service.\n     *\n     * <p><strong>Note:</strong> {@link android.view.InputDevice} sources contain source class bits\n     * that complicate bitwise flag removal operations. To remove a specific source you should\n     * rebuild the entire value using bitwise OR operations on the individual source constants.\n     *\n     * <p>Including an {@link android.view.InputDevice} source that does not send {@link\n     * android.view.MotionEvent}s is effectively a no-op for that source, since you will not receive\n     * any events from that source.\n     *\n     * <p><strong>Note:</strong> Calling this function with a source that has not been listened to\n     * using {@link #setMotionEventSources(int)} will throw an exception.\n     *\n     * @see AccessibilityService#onMotionEvent\n     * @see #MotionEventSources\n     * @see #setMotionEventSources(int)\n     * @hide\n     ",
    "links" : [ "android.view.InputDevice", "android.view.MotionEvent", "#setMotionEventSources(int)" ]
  }, {
    "name" : "public int getObservedMotionEventSources()",
    "returnType" : "int",
    "comment" : "\n     * Returns the bit mask of {@link android.view.InputDevice} sources that the accessibility\n     * service wants to observe generic {@link android.view.MotionEvent}s from if it has already\n     * requested to listen to them using {@link #setMotionEventSources(int)}. Events from these\n     * sources will be sent to the rest of the input pipeline without being consumed by\n     * accessibility services. This service will still be able to see them.\n     *\n     * @hide\n     ",
    "links" : [ "android.view.InputDevice", "android.view.MotionEvent", "#setMotionEventSources(int)" ]
  }, {
    "name" : "public CharSequence loadSummary(PackageManager packageManager)",
    "returnType" : "CharSequence",
    "comment" : "\n     * The localized summary of the accessibility service.\n     *\n     * <p><strong>Statically set from {@link AccessibilityService#SERVICE_META_DATA\n     * meta-data}.</strong>\n     *\n     * @return The localized summary if available, and {@code null} if a summary has not been\n     *     provided.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService#SERVICE_META_DATAmeta" ]
  }, {
    "name" : "public CharSequence loadIntro(@NonNull PackageManager packageManager)",
    "returnType" : "CharSequence",
    "comment" : "\n     * The localized intro of the accessibility service.\n     * <p>\n     *    <strong>Statically set from\n     *    {@link AccessibilityService#SERVICE_META_DATA meta-data}.</strong>\n     * </p>\n     * @return The localized intro if available, and {@code null} if a intro\n     * has not been provided.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService#SERVICE_META_DATA" ]
  }, {
    "name" : "public String getDescription()",
    "returnType" : "String",
    "comment" : "\n     * Gets the non-localized description of the accessibility service.\n     * <p>\n     *    <strong>Statically set from\n     *    {@link AccessibilityService#SERVICE_META_DATA meta-data}.</strong>\n     * </p>\n     * @return The description.\n     *\n     * @deprecated Use {@link #loadDescription(PackageManager)}.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService#SERVICE_META_DATA", "#loadDescription(PackageManager)" ]
  }, {
    "name" : "public String loadDescription(PackageManager packageManager)",
    "returnType" : "String",
    "comment" : "\n     * The localized description of the accessibility service.\n     * <p>\n     *    <strong>Statically set from\n     *    {@link AccessibilityService#SERVICE_META_DATA meta-data}.</strong>\n     * </p>\n     * @return The localized description.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService#SERVICE_META_DATA" ]
  }, {
    "name" : "public String loadHtmlDescription(@NonNull PackageManager packageManager)",
    "returnType" : "String",
    "comment" : "\n     * The localized and restricted html description of the accessibility service.\n     * <p>\n     *    Filters the <img> tag which do not meet the custom specification and the <a> tag.\n     *    <strong>Statically set from\n     *    {@link AccessibilityService#SERVICE_META_DATA meta-data}.</strong>\n     * </p>\n     * @return The localized and restricted html description.\n     *\n     * @hide\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService#SERVICE_META_DATA" ]
  }, {
    "name" : "public void setNonInteractiveUiTimeoutMillis(@IntRange(from = 0) int timeout)",
    "returnType" : "void",
    "comment" : "\n     * Set the recommended time that non-interactive controls need to remain on the screen to\n     * support the user.\n     * <p>\n     *     <strong>This value can be dynamically set at runtime by\n     *     {@link AccessibilityService#setServiceInfo(AccessibilityServiceInfo)}.</strong>\n     * </p>\n     *\n     * @param timeout The timeout in milliseconds.\n     *\n     * @see android.R.styleable#AccessibilityService_nonInteractiveUiTimeout\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService#setServiceInfo(AccessibilityServiceInfo)" ]
  }, {
    "name" : "public int getNonInteractiveUiTimeoutMillis()",
    "returnType" : "int",
    "comment" : "\n     * Get the recommended timeout for non-interactive controls.\n     *\n     * @return The timeout in milliseconds.\n     *\n     * @see #setNonInteractiveUiTimeoutMillis(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setInteractiveUiTimeoutMillis(@IntRange(from = 0) int timeout)",
    "returnType" : "void",
    "comment" : "\n     * Set the recommended time that interactive controls need to remain on the screen to\n     * support the user.\n     * <p>\n     *     <strong>This value can be dynamically set at runtime by\n     *     {@link AccessibilityService#setServiceInfo(AccessibilityServiceInfo)}.</strong>\n     * </p>\n     *\n     * @param timeout The timeout in milliseconds.\n     *\n     * @see android.R.styleable#AccessibilityService_interactiveUiTimeout\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService#setServiceInfo(AccessibilityServiceInfo)" ]
  }, {
    "name" : "public int getInteractiveUiTimeoutMillis()",
    "returnType" : "int",
    "comment" : "\n     * Get the recommended timeout for interactive controls.\n     *\n     * @return The timeout in milliseconds.\n     *\n     * @see #setInteractiveUiTimeoutMillis(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isDirectBootAware()",
    "returnType" : "boolean",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public void setAccessibilityTool(boolean isAccessibilityTool)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether the service is used to assist users with disabilities.\n     *\n     * <p>\n     * This property is normally provided in the service's {@link #mResolveInfo ResolveInfo}.\n     * </p>\n     *\n     * <p>\n     * This method is helpful for unit testing. However, this property is not dynamically\n     * configurable by a standard {@link AccessibilityService} so it's not possible to update the\n     * copy held by the system with this method.\n     * </p>\n     *\n     * @hide\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService", "#mResolveInfo" ]
  }, {
    "name" : "public boolean isAccessibilityTool()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates if the service is used to assist users with disabilities.\n     *\n     * @return {@code true} if the property is set to true.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean isWithinParcelableSize()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel parcel, int flagz)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void initFromParcel(Parcel parcel)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(@Nullable Object obj)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void appendFeedbackTypes(StringBuilder stringBuilder, @FeedbackType int feedbackTypes)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void appendPackageNames(StringBuilder stringBuilder, String[] packageNames)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void appendEventTypes(StringBuilder stringBuilder, int eventTypes)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void appendFlags(StringBuilder stringBuilder, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void appendCapabilities(StringBuilder stringBuilder, int capabilities)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String feedbackTypeToString(int feedbackType)",
    "returnType" : "String",
    "comment" : "\n     * Returns the string representation of a feedback type. For example,\n     * {@link #FEEDBACK_SPOKEN} is represented by the string FEEDBACK_SPOKEN.\n     *\n     * @param feedbackType The feedback type.\n     * @return The string representation.\n     ",
    "links" : [ "#FEEDBACK_SPOKEN" ]
  }, {
    "name" : "public static String flagToString(int flag)",
    "returnType" : "String",
    "comment" : "\n     * Returns the string representation of a flag. For example,\n     * {@link #DEFAULT} is represented by the string DEFAULT.\n     *\n     * @param flag The flag.\n     * @return The string representation.\n     ",
    "links" : [ "#DEFAULT" ]
  }, {
    "name" : "public static String capabilityToString(int capability)",
    "returnType" : "String",
    "comment" : "\n     * Returns the string representation of a capability. For example,\n     * {@link #CAPABILITY_CAN_RETRIEVE_WINDOW_CONTENT} is represented\n     * by the string CAPABILITY_CAN_RETRIEVE_WINDOW_CONTENT.\n     *\n     * @param capability The capability.\n     * @return The string representation.\n     ",
    "links" : [ "#CAPABILITY_CAN_RETRIEVE_WINDOW_CONTENT" ]
  }, {
    "name" : "public List<CapabilityInfo> getCapabilityInfos()",
    "returnType" : "List<CapabilityInfo>",
    "comment" : "\n     * @hide\n     * @return The list of {@link CapabilityInfo} objects.\n     * @deprecated The version that takes a context works better.\n     ",
    "links" : [ "CapabilityInfo" ]
  }, {
    "name" : "public List<CapabilityInfo> getCapabilityInfos(Context context)",
    "returnType" : "List<CapabilityInfo>",
    "comment" : "\n     * @hide\n     * @param context A valid context\n     * @return The list of {@link CapabilityInfo} objects.\n     ",
    "links" : [ "CapabilityInfo" ]
  }, {
    "name" : "private static SparseArray<CapabilityInfo> getCapabilityInfoSparseArray(Context context)",
    "returnType" : "SparseArray<CapabilityInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean fingerprintAvailable(Context context)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void resetDynamicallyConfigurableProperties()", "public void updateDynamicallyConfigurableProperties(IPlatformCompat platformCompat, AccessibilityServiceInfo other)", "private boolean isRequestAccessibilityButtonChangeEnabled(IPlatformCompat platformCompat)", "public void setComponentName(@NonNull ComponentName component)", "public void setResolveInfo(@NonNull ResolveInfo resolveInfo)", "public ComponentName getComponentName()", "public String getId()", "public ResolveInfo getResolveInfo()", "public String getSettingsActivityName()", "public String getTileServiceName()", "public int getAnimatedImageRes()", "public Drawable loadAnimatedImage(@NonNull Context context)", "public boolean getCanRetrieveWindowContent()", "public int getCapabilities()", "public void setCapabilities(int capabilities)", "public int getMotionEventSources()", "public void setMotionEventSources(@MotionEventSources int motionEventSources)", "public void setObservedMotionEventSources(int observedMotionEventSources)", "public int getObservedMotionEventSources()", "public CharSequence loadSummary(PackageManager packageManager)", "public CharSequence loadIntro(@NonNull PackageManager packageManager)", "public String getDescription()", "public String loadDescription(PackageManager packageManager)", "public String loadHtmlDescription(@NonNull PackageManager packageManager)", "public void setNonInteractiveUiTimeoutMillis(@IntRange(from = 0) int timeout)", "public int getNonInteractiveUiTimeoutMillis()", "public void setInteractiveUiTimeoutMillis(@IntRange(from = 0) int timeout)", "public int getInteractiveUiTimeoutMillis()", "public boolean isDirectBootAware()", "public void setAccessibilityTool(boolean isAccessibilityTool)", "public boolean isAccessibilityTool()", "public int describeContents()", "public final boolean isWithinParcelableSize()", "public void writeToParcel(Parcel parcel, int flagz)", "private void initFromParcel(Parcel parcel)", "public int hashCode()", "public boolean equals(@Nullable Object obj)", "public String toString()", "private static void appendFeedbackTypes(StringBuilder stringBuilder, @FeedbackType int feedbackTypes)", "private static void appendPackageNames(StringBuilder stringBuilder, String[] packageNames)", "private static void appendEventTypes(StringBuilder stringBuilder, int eventTypes)", "private static void appendFlags(StringBuilder stringBuilder, int flags)", "private static void appendCapabilities(StringBuilder stringBuilder, int capabilities)", "public static String feedbackTypeToString(int feedbackType)", "public static String flagToString(int flag)", "public static String capabilityToString(int capability)", "public List<CapabilityInfo> getCapabilityInfos()", "public List<CapabilityInfo> getCapabilityInfos(Context context)", "private static SparseArray<CapabilityInfo> getCapabilityInfoSparseArray(Context context)", "private static boolean fingerprintAvailable(Context context)" ],
  "variableNames" : [ "TAG_ACCESSIBILITY_SERVICE", "CAPABILITY_CAN_RETRIEVE_WINDOW_CONTENT", "CAPABILITY_CAN_REQUEST_TOUCH_EXPLORATION", "CAPABILITY_CAN_REQUEST_ENHANCED_WEB_ACCESSIBILITY", "CAPABILITY_CAN_REQUEST_FILTER_KEY_EVENTS", "CAPABILITY_CAN_CONTROL_MAGNIFICATION", "CAPABILITY_CAN_PERFORM_GESTURES", "CAPABILITY_CAN_REQUEST_FINGERPRINT_GESTURES", "CAPABILITY_CAN_TAKE_SCREENSHOT", "sAvailableCapabilityInfos", "FEEDBACK_SPOKEN", "FEEDBACK_HAPTIC", "FEEDBACK_AUDIBLE", "FEEDBACK_VISUAL", "FEEDBACK_GENERIC", "FEEDBACK_BRAILLE", "FEEDBACK_ALL_MASK", "DEFAULT", "FLAG_INCLUDE_NOT_IMPORTANT_VIEWS", "FLAG_REQUEST_TOUCH_EXPLORATION_MODE", "FLAG_REQUEST_ENHANCED_WEB_ACCESSIBILITY", "FLAG_REPORT_VIEW_IDS", "FLAG_REQUEST_FILTER_KEY_EVENTS", "FLAG_RETRIEVE_INTERACTIVE_WINDOWS", "FLAG_ENABLE_ACCESSIBILITY_VOLUME", "FLAG_REQUEST_ACCESSIBILITY_BUTTON", "FLAG_REQUEST_FINGERPRINT_GESTURES", "FLAG_REQUEST_SHORTCUT_WARNING_DIALOG_SPOKEN_FEEDBACK", "FLAG_SERVICE_HANDLES_DOUBLE_TAP", "FLAG_REQUEST_MULTI_FINGER_GESTURES", "FLAG_REQUEST_2_FINGER_PASSTHROUGH", "FLAG_SEND_MOTION_EVENTS", "FLAG_INPUT_METHOD_EDITOR", "FLAG_FORCE_DIRECT_BOOT_AWARE", "eventTypes", "packageNames", "feedbackType", "notificationTimeout", "flags", "crashed", "mNonInteractiveUiTimeout", "mInteractiveUiTimeout", "mComponentName", "mResolveInfo", "mSettingsActivityName", "mTileServiceName", "mCapabilities", "mSummaryResId", "mNonLocalizedSummary", "mIntroResId", "mDescriptionResId", "mNonLocalizedDescription", "REQUEST_ACCESSIBILITY_BUTTON_CHANGE", "mAnimatedImageRes", "mHtmlDescriptionRes", "mIsAccessibilityTool", "mMotionEventSources", "mObservedMotionEventSources", "mDynamicPropertyDefaults", "CREATOR" ]
}