{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/os/BatteryStats.java",
  "packageName" : "android.os",
  "className" : "Uid",
  "comment" : "\n     * The statistics associated with a particular uid.\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "PROCESS_STATE_TOP",
    "type" : "int",
    "comment" : "\n         * Time this uid has any processes in the top state.\n         ",
    "links" : [ ]
  }, {
    "name" : "PROCESS_STATE_FOREGROUND_SERVICE",
    "type" : "int",
    "comment" : "\n         * Time this uid has any process with a started foreground service, but\n         * none in the \"top\" state.\n         ",
    "links" : [ ]
  }, {
    "name" : "PROCESS_STATE_FOREGROUND",
    "type" : "int",
    "comment" : "\n         * Time this uid has any process in an active foreground state, but none in the\n         * \"foreground service\" or better state. Persistent and other foreground states go here.\n         ",
    "links" : [ ]
  }, {
    "name" : "PROCESS_STATE_BACKGROUND",
    "type" : "int",
    "comment" : "\n         * Time this uid has any process in an active background state, but none in the\n         * \"foreground\" or better state.\n         ",
    "links" : [ ]
  }, {
    "name" : "PROCESS_STATE_TOP_SLEEPING",
    "type" : "int",
    "comment" : "\n         * Time this uid has any process that is top while the device is sleeping, but not\n         * active for any other reason.  We kind-of consider it a kind of cached process\n         * for execution restrictions.\n         ",
    "links" : [ ]
  }, {
    "name" : "PROCESS_STATE_HEAVY_WEIGHT",
    "type" : "int",
    "comment" : "\n         * Time this uid has any process that is in the background but it has an activity\n         * marked as \"can't save state\".  This is essentially a cached process, though the\n         * system will try much harder than normal to avoid killing it.\n         ",
    "links" : [ ]
  }, {
    "name" : "PROCESS_STATE_CACHED",
    "type" : "int",
    "comment" : "\n         * Time this uid has any processes that are sitting around cached, not in one of the\n         * other active states.\n         ",
    "links" : [ ]
  }, {
    "name" : "NUM_PROCESS_STATE",
    "type" : "int",
    "comment" : "\n         * Total number of process states we track.\n         ",
    "links" : [ ]
  }, {
    "name" : "PROCESS_STATE_NONEXISTENT",
    "type" : "int",
    "comment" : "\n         * State of the UID when it has no running processes.  It is intentionally out of\n         * bounds 0..NUM_PROCESS_STATE.\n         ",
    "links" : [ ]
  }, {
    "name" : "PROCESS_STATE_NAMES",
    "type" : "String[]",
    "comment" : " Used in dump",
    "links" : [ ]
  }, {
    "name" : "UID_PROCESS_TYPES",
    "type" : "String[]",
    "comment" : " Used in checkin dump",
    "links" : [ ]
  }, {
    "name" : "NUM_WIFI_BATCHED_SCAN_BINS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "USER_ACTIVITY_TYPES",
    "type" : "String[]",
    "comment" : "\n         * Note that these must match the constants in android.os.PowerManager.\n         * Also, if the user activity types change, the BatteryStatsImpl.VERSION must\n         * also be bumped.\n         ",
    "links" : [ ]
  }, {
    "name" : "NUM_USER_ACTIVITY_TYPES",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public abstract ArrayMap<String, ? extends Wakelock> getWakelockStats()",
    "returnType" : "ArrayMap<String, ? extends Wakelock>",
    "comment" : "\n         * Returns a mapping containing wakelock statistics.\n         *\n         * @return a Map from Strings to Uid.Wakelock objects.\n         ",
    "links" : [ ]
  }, {
    "name" : "public abstract Timer getMulticastWakelockStats()",
    "returnType" : "Timer",
    "comment" : "\n         * Returns the WiFi Multicast Wakelock statistics.\n         *\n         * @return a Timer Object for the per uid Multicast statistics.\n         ",
    "links" : [ ]
  }, {
    "name" : "public abstract ArrayMap<String, ? extends Timer> getSyncStats()",
    "returnType" : "ArrayMap<String, ? extends Timer>",
    "comment" : "\n         * Returns a mapping containing sync statistics.\n         *\n         * @return a Map from Strings to Timer objects.\n         ",
    "links" : [ ]
  }, {
    "name" : "public abstract ArrayMap<String, ? extends Timer> getJobStats()",
    "returnType" : "ArrayMap<String, ? extends Timer>",
    "comment" : "\n         * Returns a mapping containing scheduled job statistics.\n         *\n         * @return a Map from Strings to Timer objects.\n         ",
    "links" : [ ]
  }, {
    "name" : "public abstract ArrayMap<String, SparseIntArray> getJobCompletionStats()",
    "returnType" : "ArrayMap<String, SparseIntArray>",
    "comment" : "\n         * Returns statistics about how jobs have completed.\n         *\n         * @return A Map of String job names to completion type -> count mapping.\n         ",
    "links" : [ ]
  }, {
    "name" : "public abstract Timer getAggregatedPartialWakelockTimer()",
    "returnType" : "Timer",
    "comment" : "\n         * The cumulative time the uid spent holding any partial wakelocks. This will generally\n         * differ from summing over the Wakelocks in getWakelockStats since the latter may have\n         * wakelocks that overlap in time (and therefore over-counts).\n         ",
    "links" : [ ]
  }, {
    "name" : "public abstract SparseArray<? extends Sensor> getSensorStats()",
    "returnType" : "SparseArray<? extends Sensor>",
    "comment" : "\n         * Returns a mapping containing sensor statistics.\n         *\n         * @return a Map from Integer sensor ids to Uid.Sensor objects.\n         ",
    "links" : [ ]
  }, {
    "name" : "public abstract SparseArray<? extends Pid> getPidStats()",
    "returnType" : "SparseArray<? extends Pid>",
    "comment" : "\n         * Returns a mapping containing active process data.\n         ",
    "links" : [ ]
  }, {
    "name" : "public abstract ArrayMap<String, ? extends Proc> getProcessStats()",
    "returnType" : "ArrayMap<String, ? extends Proc>",
    "comment" : "\n         * Returns a mapping containing process statistics.\n         *\n         * @return a Map from Strings to Uid.Proc objects.\n         ",
    "links" : [ ]
  }, {
    "name" : "public abstract ArrayMap<String, ? extends Pkg> getPackageStats()",
    "returnType" : "ArrayMap<String, ? extends Pkg>",
    "comment" : "\n         * Returns a mapping containing package statistics.\n         *\n         * @return a Map from Strings to Uid.Pkg objects.\n         ",
    "links" : [ ]
  }, {
    "name" : "public abstract double getProportionalSystemServiceUsage()",
    "returnType" : "double",
    "comment" : "\n         * Returns the proportion of power consumed by the System Service\n         * calls made by this UID.\n         ",
    "links" : [ ]
  }, {
    "name" : "public abstract ControllerActivityCounter getWifiControllerActivity()",
    "returnType" : "ControllerActivityCounter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract ControllerActivityCounter getBluetoothControllerActivity()",
    "returnType" : "ControllerActivityCounter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract ControllerActivityCounter getModemControllerActivity()",
    "returnType" : "ControllerActivityCounter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract int getUid()",
    "returnType" : "int",
    "comment" : "\n         * {@hide}\n         ",
    "links" : [ ]
  }, {
    "name" : "public abstract void noteWifiRunningLocked(long elapsedRealtime)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void noteWifiStoppedLocked(long elapsedRealtime)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void noteFullWifiLockAcquiredLocked(long elapsedRealtime)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void noteFullWifiLockReleasedLocked(long elapsedRealtime)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void noteWifiScanStartedLocked(long elapsedRealtime)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void noteWifiScanStoppedLocked(long elapsedRealtime)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void noteWifiBatchedScanStartedLocked(int csph, long elapsedRealtime)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void noteWifiBatchedScanStoppedLocked(long elapsedRealtime)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void noteWifiMulticastEnabledLocked(long elapsedRealtime)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void noteWifiMulticastDisabledLocked(long elapsedRealtime)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void noteActivityResumedLocked(long elapsedRealtime)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void noteActivityPausedLocked(long elapsedRealtime)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract long getWifiRunningTime(long elapsedRealtimeUs, int which)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract long getFullWifiLockTime(long elapsedRealtimeUs, int which)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract long getWifiScanTime(long elapsedRealtimeUs, int which)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract int getWifiScanCount(int which)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract Timer getWifiScanTimer()",
    "returnType" : "Timer",
    "comment" : "\n         * Returns the timer keeping track of wifi scans.\n         ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getWifiScanBackgroundCount(int which)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract long getWifiScanActualTime(long elapsedRealtimeUs)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract long getWifiScanBackgroundTime(long elapsedRealtimeUs)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract Timer getWifiScanBackgroundTimer()",
    "returnType" : "Timer",
    "comment" : "\n         * Returns the timer keeping track of background wifi scans.\n         ",
    "links" : [ ]
  }, {
    "name" : "public abstract long getWifiBatchedScanTime(int csphBin, long elapsedRealtimeUs, int which)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract int getWifiBatchedScanCount(int csphBin, int which)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract long getWifiMulticastTime(long elapsedRealtimeUs, int which)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract Timer getAudioTurnedOnTimer()",
    "returnType" : "Timer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract Timer getVideoTurnedOnTimer()",
    "returnType" : "Timer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract Timer getFlashlightTurnedOnTimer()",
    "returnType" : "Timer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract Timer getCameraTurnedOnTimer()",
    "returnType" : "Timer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract Timer getForegroundActivityTimer()",
    "returnType" : "Timer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract Timer getForegroundServiceTimer()",
    "returnType" : "Timer",
    "comment" : "\n         * Returns the timer keeping track of Foreground Service time\n         ",
    "links" : [ ]
  }, {
    "name" : "public abstract Timer getBluetoothScanTimer()",
    "returnType" : "Timer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract Timer getBluetoothScanBackgroundTimer()",
    "returnType" : "Timer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract Timer getBluetoothUnoptimizedScanTimer()",
    "returnType" : "Timer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract Timer getBluetoothUnoptimizedScanBackgroundTimer()",
    "returnType" : "Timer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract Counter getBluetoothScanResultCounter()",
    "returnType" : "Counter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract Counter getBluetoothScanResultBgCounter()",
    "returnType" : "Counter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract long[] getCpuFreqTimes(int which)",
    "returnType" : "long[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract long[] getScreenOffCpuFreqTimes(int which)",
    "returnType" : "long[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract long getCpuActiveTime()",
    "returnType" : "long",
    "comment" : "\n         * Returns cpu active time of an uid.\n         ",
    "links" : [ ]
  }, {
    "name" : "public abstract long getCpuActiveTime(int procState)",
    "returnType" : "long",
    "comment" : "\n         * Returns cpu active time of a UID while in the specified process state.\n         ",
    "links" : [ ]
  }, {
    "name" : "public abstract long[] getCpuClusterTimes()",
    "returnType" : "long[]",
    "comment" : "\n         * Returns cpu times of an uid on each cluster\n         ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean getCpuFreqTimes(@NonNull long[] timesInFreqMs, int procState)",
    "returnType" : "boolean",
    "comment" : "\n         * Returns cpu times of an uid at a particular process state.\n         ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean getScreenOffCpuFreqTimes(@NonNull long[] timesInFreqMs, int procState)",
    "returnType" : "boolean",
    "comment" : "\n         * Returns cpu times of an uid while the screen if off at a particular process state.\n         ",
    "links" : [ ]
  }, {
    "name" : "public abstract long getProcessStateTime(int state, long elapsedRealtimeUs, int which)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract Timer getProcessStateTimer(int state)",
    "returnType" : "Timer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract Timer getVibratorOnTimer()",
    "returnType" : "Timer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void noteUserActivityLocked(int type)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean hasUserActivity()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract int getUserActivityCount(int type, int which)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean hasNetworkActivity()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract long getNetworkActivityBytes(int type, int which)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract long getNetworkActivityPackets(int type, int which)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract long getMobileRadioActiveTime(int which)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract long getMobileRadioActiveTimeInProcessState(@BatteryConsumer.ProcessState int processState)",
    "returnType" : "long",
    "comment" : "\n         * Returns the amount of time (in microseconds) this UID was in the specified processState.\n         ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getMobileRadioActiveCount(int which)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract long getUserCpuTimeUs(int which)",
    "returnType" : "long",
    "comment" : "\n         * Get the total cpu time (in microseconds) this UID had processes executing in userspace.\n         ",
    "links" : [ ]
  }, {
    "name" : "public abstract long getSystemCpuTimeUs(int which)",
    "returnType" : "long",
    "comment" : "\n         * Get the total cpu time (in microseconds) this UID had processes executing kernel syscalls.\n         ",
    "links" : [ ]
  }, {
    "name" : "public abstract long getTimeAtCpuSpeed(int cluster, int step, int which)",
    "returnType" : "long",
    "comment" : "\n         * Returns the approximate cpu time (in microseconds) spent at a certain CPU speed for a\n         * given CPU cluster.\n         * @param cluster the index of the CPU cluster.\n         * @param step the index of the CPU speed. This is not the actual speed of the CPU.\n         * @param which one of STATS_SINCE_CHARGED, STATS_SINCE_UNPLUGGED, or STATS_CURRENT.\n         * @see com.android.internal.os.CpuScalingPolicies#getPolicies\n         * @see com.android.internal.os.CpuScalingPolicies#getFrequencies\n         * @deprecated Unused except in tests\n         ",
    "links" : [ ]
  }, {
    "name" : "public abstract long getMobileRadioApWakeupCount(int which)",
    "returnType" : "long",
    "comment" : "\n         * Returns the number of times this UID woke up the Application Processor to\n         * process a mobile radio packet.\n         * @param which one of STATS_SINCE_CHARGED, STATS_SINCE_UNPLUGGED, or STATS_CURRENT.\n         ",
    "links" : [ ]
  }, {
    "name" : "public abstract long getWifiRadioApWakeupCount(int which)",
    "returnType" : "long",
    "comment" : "\n         * Returns the number of times this UID woke up the Application Processor to\n         * process a WiFi packet.\n         * @param which one of STATS_SINCE_CHARGED, STATS_SINCE_UNPLUGGED, or STATS_CURRENT.\n         ",
    "links" : [ ]
  }, {
    "name" : "public abstract void getDeferredJobsCheckinLineLocked(StringBuilder sb, int which)",
    "returnType" : "void",
    "comment" : "\n         * Appends the deferred jobs data to the StringBuilder passed in, in checkin format\n         * @param sb StringBuilder that can be overwritten with the deferred jobs data\n         * @param which one of STATS_*\n         ",
    "links" : [ ]
  }, {
    "name" : "public abstract void getDeferredJobsLineLocked(StringBuilder sb, int which)",
    "returnType" : "void",
    "comment" : "\n         * Appends the deferred jobs data to the StringBuilder passed in\n         * @param sb StringBuilder that can be overwritten with the deferred jobs data\n         * @param which one of STATS_*\n         ",
    "links" : [ ]
  }, {
    "name" : "public abstract long getBluetoothEnergyConsumptionUC()",
    "returnType" : "long",
    "comment" : "\n         * Returns the battery consumption (in microcoulombs) of bluetooth for this uid,\n         * derived from {@link android.hardware.power.stats.EnergyConsumerType#BLUETOOTH} bucket\n         * provided by the PowerStats service.\n         * Will return {@link #POWER_DATA_UNAVAILABLE} if data is unavailable.\n         *\n         * {@hide}\n         ",
    "links" : [ "#POWER_DATA_UNAVAILABLE", "android.hardware.power.stats.EnergyConsumerType#BLUETOOTH" ]
  }, {
    "name" : "public abstract long getBluetoothEnergyConsumptionUC(@BatteryConsumer.ProcessState int processState)",
    "returnType" : "long",
    "comment" : "\n         * Returns the battery consumption (in microcoulombs) of the uid's bluetooth usage\n         * when in the specified process state.\n         * Will return {@link #POWER_DATA_UNAVAILABLE} if data is unavailable.\n         *\n         * {@hide}\n         ",
    "links" : [ "#POWER_DATA_UNAVAILABLE" ]
  }, {
    "name" : "public abstract long getCpuEnergyConsumptionUC()",
    "returnType" : "long",
    "comment" : "\n         * Returns the battery consumption (in microcoulombs) of the uid's cpu usage, derived from\n         * derived from {@link android.hardware.power.stats.EnergyConsumerType#CPU} bucket\n         * provided by the PowerStats service.\n         * Will return {@link #POWER_DATA_UNAVAILABLE} if data is unavailable.\n         *\n         * {@hide}\n         ",
    "links" : [ "#POWER_DATA_UNAVAILABLE", "android.hardware.power.stats.EnergyConsumerType#CPU" ]
  }, {
    "name" : "public abstract long getCpuEnergyConsumptionUC(@BatteryConsumer.ProcessState int processState)",
    "returnType" : "long",
    "comment" : "\n         * Returns the battery consumption (in microcoulombs) of the uid's cpu usage when in the\n         * specified process state.\n         * Will return {@link #POWER_DATA_UNAVAILABLE} if data is unavailable.\n         *\n         * {@hide}\n         ",
    "links" : [ "#POWER_DATA_UNAVAILABLE" ]
  }, {
    "name" : "public abstract long getGnssEnergyConsumptionUC()",
    "returnType" : "long",
    "comment" : "\n         * Returns the battery consumption (in microcoulombs) of the uid's GNSS usage, derived from\n         * derived from {@link android.hardware.power.stats.EnergyConsumerType#GNSS} bucket\n         * provided by the PowerStats service.\n         * Will return {@link #POWER_DATA_UNAVAILABLE} if data is unavailable.\n         *\n         * {@hide}\n         ",
    "links" : [ "#POWER_DATA_UNAVAILABLE", "android.hardware.power.stats.EnergyConsumerType#GNSS" ]
  }, {
    "name" : "public abstract long getMobileRadioEnergyConsumptionUC()",
    "returnType" : "long",
    "comment" : "\n         * Returns the battery consumption (in microcoulombs) of the uid's radio usage, derived from\n         * derived from {@link android.hardware.power.stats.EnergyConsumerType#MOBILE_RADIO}\n         * bucket provided by the PowerStats service.\n         * Will return {@link #POWER_DATA_UNAVAILABLE} if data is unavailable.\n         *\n         * {@hide}\n         ",
    "links" : [ "android.hardware.power.stats.EnergyConsumerType#MOBILE_RADIO", "#POWER_DATA_UNAVAILABLE" ]
  }, {
    "name" : "public abstract long getMobileRadioEnergyConsumptionUC(@BatteryConsumer.ProcessState int processState)",
    "returnType" : "long",
    "comment" : "\n         * Returns the battery consumption (in microcoulombs) of the uid's radio usage when in the\n         * specified process state.\n         * Will return {@link #POWER_DATA_UNAVAILABLE} if data is unavailable.\n         *\n         * {@hide}\n         ",
    "links" : [ "#POWER_DATA_UNAVAILABLE" ]
  }, {
    "name" : "public abstract long getScreenOnEnergyConsumptionUC()",
    "returnType" : "long",
    "comment" : "\n         * Returns the battery consumption (in microcoulombs) of the screen while on and uid active,\n         * derived from {@link android.hardware.power.stats.EnergyConsumerType#DISPLAY} bucket\n         * provided by the PowerStats service.\n         * Will return {@link #POWER_DATA_UNAVAILABLE} if data is unavailable.\n         *\n         * {@hide}\n         ",
    "links" : [ "#POWER_DATA_UNAVAILABLE", "android.hardware.power.stats.EnergyConsumerType#DISPLAY" ]
  }, {
    "name" : "public abstract long getWifiEnergyConsumptionUC()",
    "returnType" : "long",
    "comment" : "\n         * Returns the battery consumption (in microcoulombs) of wifi for this uid,\n         * derived from {@link android.hardware.power.stats.EnergyConsumerType#WIFI} bucket\n         * provided by the PowerStats service.\n         * Will return {@link #POWER_DATA_UNAVAILABLE} if data is unavailable.\n         *\n         * {@hide}\n         ",
    "links" : [ "#POWER_DATA_UNAVAILABLE", "android.hardware.power.stats.EnergyConsumerType#WIFI" ]
  }, {
    "name" : "public abstract long getWifiEnergyConsumptionUC(@BatteryConsumer.ProcessState int processState)",
    "returnType" : "long",
    "comment" : "\n         * Returns the battery consumption (in microcoulombs) of the uid's wifi usage when in the\n         * specified process state.\n         * Will return {@link #POWER_DATA_UNAVAILABLE} if data is unavailable.\n         *\n         * {@hide}\n         ",
    "links" : [ "#POWER_DATA_UNAVAILABLE" ]
  }, {
    "name" : "public abstract long getCameraEnergyConsumptionUC()",
    "returnType" : "long",
    "comment" : "\n         * Returns the battery consumption (in microcoulombs) of UID's camera usage, derived from\n         * on-device power measurement data.\n         * Will return {@link #POWER_DATA_UNAVAILABLE} if data is unavailable.\n         *\n         * {@hide}\n         ",
    "links" : [ "#POWER_DATA_UNAVAILABLE" ]
  }, {
    "name" : "public abstract long[] getCustomEnergyConsumerBatteryConsumptionUC()",
    "returnType" : "long[]",
    "comment" : "\n         * Returns the battery consumption (in microcoulombs) used by this uid for each\n         * {@link android.hardware.power.stats.EnergyConsumer.ordinal} of (custom) energy consumer\n         * type {@link android.hardware.power.stats.EnergyConsumerType#OTHER}).\n         *\n         * @return charge (in microcoulombs) consumed since last reset for each (custom) energy\n         *         consumer of type OTHER, indexed by their ordinal. Returns null if no energy\n         *         reporting is supported.\n         *\n         * {@hide}\n         ",
    "links" : [ "android.hardware.power.stats.EnergyConsumer.ordinal", "android.hardware.power.stats.EnergyConsumerType#OTHER" ]
  } ],
  "methodNames" : [ "public abstract ArrayMap<String, ? extends Wakelock> getWakelockStats()", "public abstract Timer getMulticastWakelockStats()", "public abstract ArrayMap<String, ? extends Timer> getSyncStats()", "public abstract ArrayMap<String, ? extends Timer> getJobStats()", "public abstract ArrayMap<String, SparseIntArray> getJobCompletionStats()", "public abstract Timer getAggregatedPartialWakelockTimer()", "public abstract SparseArray<? extends Sensor> getSensorStats()", "public abstract SparseArray<? extends Pid> getPidStats()", "public abstract ArrayMap<String, ? extends Proc> getProcessStats()", "public abstract ArrayMap<String, ? extends Pkg> getPackageStats()", "public abstract double getProportionalSystemServiceUsage()", "public abstract ControllerActivityCounter getWifiControllerActivity()", "public abstract ControllerActivityCounter getBluetoothControllerActivity()", "public abstract ControllerActivityCounter getModemControllerActivity()", "public abstract int getUid()", "public abstract void noteWifiRunningLocked(long elapsedRealtime)", "public abstract void noteWifiStoppedLocked(long elapsedRealtime)", "public abstract void noteFullWifiLockAcquiredLocked(long elapsedRealtime)", "public abstract void noteFullWifiLockReleasedLocked(long elapsedRealtime)", "public abstract void noteWifiScanStartedLocked(long elapsedRealtime)", "public abstract void noteWifiScanStoppedLocked(long elapsedRealtime)", "public abstract void noteWifiBatchedScanStartedLocked(int csph, long elapsedRealtime)", "public abstract void noteWifiBatchedScanStoppedLocked(long elapsedRealtime)", "public abstract void noteWifiMulticastEnabledLocked(long elapsedRealtime)", "public abstract void noteWifiMulticastDisabledLocked(long elapsedRealtime)", "public abstract void noteActivityResumedLocked(long elapsedRealtime)", "public abstract void noteActivityPausedLocked(long elapsedRealtime)", "public abstract long getWifiRunningTime(long elapsedRealtimeUs, int which)", "public abstract long getFullWifiLockTime(long elapsedRealtimeUs, int which)", "public abstract long getWifiScanTime(long elapsedRealtimeUs, int which)", "public abstract int getWifiScanCount(int which)", "public abstract Timer getWifiScanTimer()", "public abstract int getWifiScanBackgroundCount(int which)", "public abstract long getWifiScanActualTime(long elapsedRealtimeUs)", "public abstract long getWifiScanBackgroundTime(long elapsedRealtimeUs)", "public abstract Timer getWifiScanBackgroundTimer()", "public abstract long getWifiBatchedScanTime(int csphBin, long elapsedRealtimeUs, int which)", "public abstract int getWifiBatchedScanCount(int csphBin, int which)", "public abstract long getWifiMulticastTime(long elapsedRealtimeUs, int which)", "public abstract Timer getAudioTurnedOnTimer()", "public abstract Timer getVideoTurnedOnTimer()", "public abstract Timer getFlashlightTurnedOnTimer()", "public abstract Timer getCameraTurnedOnTimer()", "public abstract Timer getForegroundActivityTimer()", "public abstract Timer getForegroundServiceTimer()", "public abstract Timer getBluetoothScanTimer()", "public abstract Timer getBluetoothScanBackgroundTimer()", "public abstract Timer getBluetoothUnoptimizedScanTimer()", "public abstract Timer getBluetoothUnoptimizedScanBackgroundTimer()", "public abstract Counter getBluetoothScanResultCounter()", "public abstract Counter getBluetoothScanResultBgCounter()", "public abstract long[] getCpuFreqTimes(int which)", "public abstract long[] getScreenOffCpuFreqTimes(int which)", "public abstract long getCpuActiveTime()", "public abstract long getCpuActiveTime(int procState)", "public abstract long[] getCpuClusterTimes()", "public abstract boolean getCpuFreqTimes(@NonNull long[] timesInFreqMs, int procState)", "public abstract boolean getScreenOffCpuFreqTimes(@NonNull long[] timesInFreqMs, int procState)", "public abstract long getProcessStateTime(int state, long elapsedRealtimeUs, int which)", "public abstract Timer getProcessStateTimer(int state)", "public abstract Timer getVibratorOnTimer()", "public abstract void noteUserActivityLocked(int type)", "public abstract boolean hasUserActivity()", "public abstract int getUserActivityCount(int type, int which)", "public abstract boolean hasNetworkActivity()", "public abstract long getNetworkActivityBytes(int type, int which)", "public abstract long getNetworkActivityPackets(int type, int which)", "public abstract long getMobileRadioActiveTime(int which)", "public abstract long getMobileRadioActiveTimeInProcessState(@BatteryConsumer.ProcessState int processState)", "public abstract int getMobileRadioActiveCount(int which)", "public abstract long getUserCpuTimeUs(int which)", "public abstract long getSystemCpuTimeUs(int which)", "public abstract long getTimeAtCpuSpeed(int cluster, int step, int which)", "public abstract long getMobileRadioApWakeupCount(int which)", "public abstract long getWifiRadioApWakeupCount(int which)", "public abstract void getDeferredJobsCheckinLineLocked(StringBuilder sb, int which)", "public abstract void getDeferredJobsLineLocked(StringBuilder sb, int which)", "public abstract long getBluetoothEnergyConsumptionUC()", "public abstract long getBluetoothEnergyConsumptionUC(@BatteryConsumer.ProcessState int processState)", "public abstract long getCpuEnergyConsumptionUC()", "public abstract long getCpuEnergyConsumptionUC(@BatteryConsumer.ProcessState int processState)", "public abstract long getGnssEnergyConsumptionUC()", "public abstract long getMobileRadioEnergyConsumptionUC()", "public abstract long getMobileRadioEnergyConsumptionUC(@BatteryConsumer.ProcessState int processState)", "public abstract long getScreenOnEnergyConsumptionUC()", "public abstract long getWifiEnergyConsumptionUC()", "public abstract long getWifiEnergyConsumptionUC(@BatteryConsumer.ProcessState int processState)", "public abstract long getCameraEnergyConsumptionUC()", "public abstract long[] getCustomEnergyConsumerBatteryConsumptionUC()" ],
  "variableNames" : [ "PROCESS_STATE_TOP", "PROCESS_STATE_FOREGROUND_SERVICE", "PROCESS_STATE_FOREGROUND", "PROCESS_STATE_BACKGROUND", "PROCESS_STATE_TOP_SLEEPING", "PROCESS_STATE_HEAVY_WEIGHT", "PROCESS_STATE_CACHED", "NUM_PROCESS_STATE", "PROCESS_STATE_NONEXISTENT", "PROCESS_STATE_NAMES", "UID_PROCESS_TYPES", "NUM_WIFI_BATCHED_SCAN_BINS", "USER_ACTIVITY_TYPES", "NUM_USER_ACTIVITY_TYPES" ]
}