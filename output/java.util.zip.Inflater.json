{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/zip/Inflater.java",
  "packageName" : "java.util.zip",
  "className" : "Inflater",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "zsRef",
    "type" : "InflaterZStreamRef",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "input",
    "type" : "ByteBuffer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "inputArray",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "inputPos",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "inputLim",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "finished",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "needDict",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "bytesRead",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "bytesWritten",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "guard",
    "type" : "CloseGuard",
    "comment" : " Android-added: CloseGuard support.",
    "links" : [ ]
  }, {
    "name" : "inputConsumed",
    "type" : "int",
    "comment" : "\n     * These fields are used as an \"out\" parameter from JNI when a\n     * DataFormatException is thrown during the inflate operation.\n     ",
    "links" : [ ]
  }, {
    "name" : "outputConsumed",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setInput(byte[] input, int off, int len)",
    "returnType" : "void",
    "comment" : "\n     * Sets input data for decompression.\n     * <p>\n     * One of the {@code setInput()} methods should be called whenever\n     * {@code needsInput()} returns true indicating that more input data\n     * is required.\n     *\n     * @param input the input data bytes\n     * @param off the start offset of the input data\n     * @param len the length of the input data\n     * @see Inflater#needsInput\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setInput(byte[] input)",
    "returnType" : "void",
    "comment" : "\n     * Sets input data for decompression.\n     * <p>\n     * One of the {@code setInput()} methods should be called whenever\n     * {@code needsInput()} returns true indicating that more input data\n     * is required.\n     *\n     * @param input the input data bytes\n     * @see Inflater#needsInput\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setInput(ByteBuffer input)",
    "returnType" : "void",
    "comment" : "\n     * Sets input data for decompression.\n     * <p>\n     * One of the {@code setInput()} methods should be called whenever\n     * {@code needsInput()} returns true indicating that more input data\n     * is required.\n     * <p>\n     * The given buffer's position will be advanced as inflate\n     * operations are performed, up to the buffer's limit.\n     * The input buffer may be modified (refilled) between inflate\n     * operations; doing so is equivalent to creating a new buffer\n     * and setting it with this method.\n     * <p>\n     * Modifying the input buffer's contents, position, or limit\n     * concurrently with an inflate operation will result in\n     * undefined behavior, which may include incorrect operation\n     * results or operation failure.\n     *\n     * @param input the input data bytes\n     * @see Inflater#needsInput\n     * @since 11\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDictionary(byte[] dictionary, int off, int len)",
    "returnType" : "void",
    "comment" : "\n     * Sets the preset dictionary to the given array of bytes. Should be\n     * called when inflate() returns 0 and needsDictionary() returns true\n     * indicating that a preset dictionary is required. The method getAdler()\n     * can be used to get the Adler-32 value of the dictionary needed.\n     * @param dictionary the dictionary data bytes\n     * @param off the start offset of the data\n     * @param len the length of the data\n     * @see Inflater#needsDictionary\n     * @see Inflater#getAdler\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDictionary(byte[] dictionary)",
    "returnType" : "void",
    "comment" : "\n     * Sets the preset dictionary to the given array of bytes. Should be\n     * called when inflate() returns 0 and needsDictionary() returns true\n     * indicating that a preset dictionary is required. The method getAdler()\n     * can be used to get the Adler-32 value of the dictionary needed.\n     * @param dictionary the dictionary data bytes\n     * @see Inflater#needsDictionary\n     * @see Inflater#getAdler\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDictionary(ByteBuffer dictionary)",
    "returnType" : "void",
    "comment" : "\n     * Sets the preset dictionary to the bytes in the given buffer. Should be\n     * called when inflate() returns 0 and needsDictionary() returns true\n     * indicating that a preset dictionary is required. The method getAdler()\n     * can be used to get the Adler-32 value of the dictionary needed.\n     * <p>\n     * The bytes in given byte buffer will be fully consumed by this method.  On\n     * return, its position will equal its limit.\n     *\n     * @param dictionary the dictionary data bytes\n     * @see Inflater#needsDictionary\n     * @see Inflater#getAdler\n     * @since 11\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getRemaining()",
    "returnType" : "int",
    "comment" : "\n     * Returns the total number of bytes remaining in the input buffer.\n     * This can be used to find out what bytes still remain in the input\n     * buffer after decompression has finished.\n     * @return the total number of bytes remaining in the input buffer\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean needsInput()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if no data remains in the input buffer. This can\n     * be used to determine if one of the {@code setInput()} methods should be\n     * called in order to provide more input.\n     *\n     * @return true if no data remains in the input buffer\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean needsDictionary()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if a preset dictionary is needed for decompression.\n     * @return true if a preset dictionary is needed for decompression\n     * @see Inflater#setDictionary\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean finished()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the end of the compressed data stream has been\n     * reached.\n     * @return true if the end of the compressed data stream has been\n     * reached\n     ",
    "links" : [ ]
  }, {
    "name" : "public int inflate(byte[] output, int off, int len) throws DataFormatException",
    "returnType" : "int",
    "comment" : "\n     * Uncompresses bytes into specified buffer. Returns actual number\n     * of bytes uncompressed. A return value of 0 indicates that\n     * needsInput() or needsDictionary() should be called in order to\n     * determine if more input data or a preset dictionary is required.\n     * In the latter case, getAdler() can be used to get the Adler-32\n     * value of the dictionary required.\n     * <p>\n     * If the {@link #setInput(ByteBuffer)} method was called to provide a buffer\n     * for input, the input buffer's position will be advanced by the number of bytes\n     * consumed by this operation, even in the event that a {@link DataFormatException}\n     * is thrown.\n     * <p>\n     * The {@linkplain #getRemaining() remaining byte count} will be reduced by\n     * the number of consumed input bytes.  If the {@link #setInput(ByteBuffer)}\n     * method was called to provide a buffer for input, the input buffer's position\n     * will be advanced the number of consumed bytes.\n     * <p>\n     * These byte totals, as well as\n     * the {@linkplain #getBytesRead() total bytes read}\n     * and the {@linkplain #getBytesWritten() total bytes written}\n     * values, will be updated even in the event that a {@link DataFormatException}\n     * is thrown to reflect the amount of data consumed and produced before the\n     * exception occurred.\n     *\n     * @param output the buffer for the uncompressed data\n     * @param off the start offset of the data\n     * @param len the maximum number of uncompressed bytes\n     * @return the actual number of uncompressed bytes\n     * @throws DataFormatException if the compressed data format is invalid\n     * @see Inflater#needsInput\n     * @see Inflater#needsDictionary\n     ",
    "links" : [ "java.util.zip.DataFormatException", "#setInput(ByteBuffer)" ]
  }, {
    "name" : "public int inflate(byte[] output) throws DataFormatException",
    "returnType" : "int",
    "comment" : "\n     * Uncompresses bytes into specified buffer. Returns actual number\n     * of bytes uncompressed. A return value of 0 indicates that\n     * needsInput() or needsDictionary() should be called in order to\n     * determine if more input data or a preset dictionary is required.\n     * In the latter case, getAdler() can be used to get the Adler-32\n     * value of the dictionary required.\n     * <p>\n     * The {@linkplain #getRemaining() remaining byte count} will be reduced by\n     * the number of consumed input bytes.  If the {@link #setInput(ByteBuffer)}\n     * method was called to provide a buffer for input, the input buffer's position\n     * will be advanced the number of consumed bytes.\n     * <p>\n     * These byte totals, as well as\n     * the {@linkplain #getBytesRead() total bytes read}\n     * and the {@linkplain #getBytesWritten() total bytes written}\n     * values, will be updated even in the event that a {@link DataFormatException}\n     * is thrown to reflect the amount of data consumed and produced before the\n     * exception occurred.\n     *\n     * @param output the buffer for the uncompressed data\n     * @return the actual number of uncompressed bytes\n     * @throws DataFormatException if the compressed data format is invalid\n     * @see Inflater#needsInput\n     * @see Inflater#needsDictionary\n     ",
    "links" : [ "java.util.zip.DataFormatException", "#setInput(ByteBuffer)" ]
  }, {
    "name" : "public int inflate(ByteBuffer output) throws DataFormatException",
    "returnType" : "int",
    "comment" : "\n     * Uncompresses bytes into specified buffer. Returns actual number\n     * of bytes uncompressed. A return value of 0 indicates that\n     * needsInput() or needsDictionary() should be called in order to\n     * determine if more input data or a preset dictionary is required.\n     * In the latter case, getAdler() can be used to get the Adler-32\n     * value of the dictionary required.\n     * <p>\n     * On success, the position of the given {@code output} byte buffer will be\n     * advanced by as many bytes as were produced by the operation, which is equal\n     * to the number returned by this method.  Note that the position of the\n     * {@code output} buffer will be advanced even in the event that a\n     * {@link DataFormatException} is thrown.\n     * <p>\n     * The {@linkplain #getRemaining() remaining byte count} will be reduced by\n     * the number of consumed input bytes.  If the {@link #setInput(ByteBuffer)}\n     * method was called to provide a buffer for input, the input buffer's position\n     * will be advanced the number of consumed bytes.\n     * <p>\n     * These byte totals, as well as\n     * the {@linkplain #getBytesRead() total bytes read}\n     * and the {@linkplain #getBytesWritten() total bytes written}\n     * values, will be updated even in the event that a {@link DataFormatException}\n     * is thrown to reflect the amount of data consumed and produced before the\n     * exception occurred.\n     *\n     * @param output the buffer for the uncompressed data\n     * @return the actual number of uncompressed bytes\n     * @throws DataFormatException if the compressed data format is invalid\n     * @throws ReadOnlyBufferException if the given output buffer is read-only\n     * @see Inflater#needsInput\n     * @see Inflater#needsDictionary\n     * @since 11\n     ",
    "links" : [ "java.util.zip.DataFormatException", "#setInput(ByteBuffer)" ]
  }, {
    "name" : "public int getAdler()",
    "returnType" : "int",
    "comment" : "\n     * Returns the ADLER-32 value of the uncompressed data.\n     * @return the ADLER-32 value of the uncompressed data\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getTotalIn()",
    "returnType" : "int",
    "comment" : "\n     * Returns the total number of compressed bytes input so far.\n     *\n     * <p>Since the number of bytes may be greater than\n     * Integer.MAX_VALUE, the {@link #getBytesRead()} method is now\n     * the preferred means of obtaining this information.</p>\n     *\n     * @return the total number of compressed bytes input so far\n     ",
    "links" : [ "#getBytesRead()" ]
  }, {
    "name" : "public long getBytesRead()",
    "returnType" : "long",
    "comment" : "\n     * Returns the total number of compressed bytes input so far.\n     *\n     * @return the total (non-negative) number of compressed bytes input so far\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getTotalOut()",
    "returnType" : "int",
    "comment" : "\n     * Returns the total number of uncompressed bytes output so far.\n     *\n     * <p>Since the number of bytes may be greater than\n     * Integer.MAX_VALUE, the {@link #getBytesWritten()} method is now\n     * the preferred means of obtaining this information.</p>\n     *\n     * @return the total number of uncompressed bytes output so far\n     ",
    "links" : [ "#getBytesWritten()" ]
  }, {
    "name" : "public long getBytesWritten()",
    "returnType" : "long",
    "comment" : "\n     * Returns the total number of uncompressed bytes output so far.\n     *\n     * @return the total (non-negative) number of uncompressed bytes output so far\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public void reset()",
    "returnType" : "void",
    "comment" : "\n     * Resets inflater so that a new set of input data can be processed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void end()",
    "returnType" : "void",
    "comment" : "\n     * Closes the decompressor and discards any unprocessed input.\n     *\n     * This method should be called when the decompressor is no longer\n     * being used. Once this method is called, the behavior of the\n     * Inflater object is undefined.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void ensureOpen()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long init(boolean nowrap)",
    "returnType" : "long",
    "comment" : " private native static void initIDs();",
    "links" : [ ]
  }, {
    "name" : "private static native void setDictionary(long addr, byte[] b, int off, int len)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void setDictionaryBuffer(long addr, long bufAddress, int len)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native long inflateBytesBytes(long addr, byte[] inputArray, int inputOff, int inputLen, byte[] outputArray, int outputOff, int outputLen) throws DataFormatException",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native long inflateBytesBuffer(long addr, byte[] inputArray, int inputOff, int inputLen, long outputAddress, int outputLen) throws DataFormatException",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native long inflateBufferBytes(long addr, long inputAddress, int inputLen, byte[] outputArray, int outputOff, int outputLen) throws DataFormatException",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native long inflateBufferBuffer(long addr, long inputAddress, int inputLen, long outputAddress, int outputLen) throws DataFormatException",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int getAdler(long addr)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void reset(long addr)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void end(long addr)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setInput(byte[] input, int off, int len)", "public void setInput(byte[] input)", "public void setInput(ByteBuffer input)", "public void setDictionary(byte[] dictionary, int off, int len)", "public void setDictionary(byte[] dictionary)", "public void setDictionary(ByteBuffer dictionary)", "public int getRemaining()", "public boolean needsInput()", "public boolean needsDictionary()", "public boolean finished()", "public int inflate(byte[] output, int off, int len) throws DataFormatException", "public int inflate(byte[] output) throws DataFormatException", "public int inflate(ByteBuffer output) throws DataFormatException", "public int getAdler()", "public int getTotalIn()", "public long getBytesRead()", "public int getTotalOut()", "public long getBytesWritten()", "public void reset()", "public void end()", "private void ensureOpen()", "private static native long init(boolean nowrap)", "private static native void setDictionary(long addr, byte[] b, int off, int len)", "private static native void setDictionaryBuffer(long addr, long bufAddress, int len)", "private native long inflateBytesBytes(long addr, byte[] inputArray, int inputOff, int inputLen, byte[] outputArray, int outputOff, int outputLen) throws DataFormatException", "private native long inflateBytesBuffer(long addr, byte[] inputArray, int inputOff, int inputLen, long outputAddress, int outputLen) throws DataFormatException", "private native long inflateBufferBytes(long addr, long inputAddress, int inputLen, byte[] outputArray, int outputOff, int outputLen) throws DataFormatException", "private native long inflateBufferBuffer(long addr, long inputAddress, int inputLen, long outputAddress, int outputLen) throws DataFormatException", "private static native int getAdler(long addr)", "private static native void reset(long addr)", "private static native void end(long addr)" ],
  "variableNames" : [ "zsRef", "input", "inputArray", "inputPos", "inputLim", "finished", "needDict", "bytesRead", "bytesWritten", "guard", "inputConsumed", "outputConsumed" ]
}