{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/concurrent/atomic/AtomicStampedReference.java",
  "packageName" : "java.util.concurrent.atomic",
  "className" : "AtomicStampedReference",
  "comment" : "\n * An {@code AtomicStampedReference} maintains an object reference\n * along with an integer \"stamp\", that can be updated atomically.\n *\n * <p>Implementation note: This implementation maintains stamped\n * references by creating internal objects representing \"boxed\"\n * [reference, integer] pairs.\n *\n * @since 1.5\n * @author Doug Lea\n * @param <V> The type of object referred to by this reference\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "pair",
    "type" : "Pair<V>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PAIR",
    "type" : "VarHandle",
    "comment" : " VarHandle mechanics",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public V getReference()",
    "returnType" : "V",
    "comment" : "\n     * Returns the current value of the reference.\n     *\n     * @return the current value of the reference\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getStamp()",
    "returnType" : "int",
    "comment" : "\n     * Returns the current value of the stamp.\n     *\n     * @return the current value of the stamp\n     ",
    "links" : [ ]
  }, {
    "name" : "public V get(int[] stampHolder)",
    "returnType" : "V",
    "comment" : "\n     * Returns the current values of both the reference and the stamp.\n     * Typical usage is {@code int[1] holder; ref = v.get(holder); }.\n     *\n     * @param stampHolder an array of size of at least one.  On return,\n     * {@code stampHolder[0]} will hold the value of the stamp.\n     * @return the current value of the reference\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean weakCompareAndSet(V expectedReference, V newReference, int expectedStamp, int newStamp)",
    "returnType" : "boolean",
    "comment" : "\n     * Atomically sets the value of both the reference and stamp to\n     * the given update values if the current reference is {@code ==}\n     * to the expected reference and the current stamp is equal to the\n     * expected stamp. This operation may fail spuriously and does not\n     * provide ordering guarantees, so is only rarely an\n     * appropriate alternative to {@code compareAndSet}.\n     *\n     * @param expectedReference the expected value of the reference\n     * @param newReference the new value for the reference\n     * @param expectedStamp the expected value of the stamp\n     * @param newStamp the new value for the stamp\n     * @return {@code true} if successful\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean compareAndSet(V expectedReference, V newReference, int expectedStamp, int newStamp)",
    "returnType" : "boolean",
    "comment" : "\n     * Atomically sets the value of both the reference and stamp\n     * to the given update values if the\n     * current reference is {@code ==} to the expected reference\n     * and the current stamp is equal to the expected stamp.\n     *\n     * @param expectedReference the expected value of the reference\n     * @param newReference the new value for the reference\n     * @param expectedStamp the expected value of the stamp\n     * @param newStamp the new value for the stamp\n     * @return {@code true} if successful\n     ",
    "links" : [ ]
  }, {
    "name" : "public void set(V newReference, int newStamp)",
    "returnType" : "void",
    "comment" : "\n     * Unconditionally sets the value of both the reference and stamp.\n     *\n     * @param newReference the new value for the reference\n     * @param newStamp the new value for the stamp\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean attemptStamp(V expectedReference, int newStamp)",
    "returnType" : "boolean",
    "comment" : "\n     * Atomically sets the value of the stamp to the given update value\n     * if the current reference is {@code ==} to the expected\n     * reference.  Any given invocation of this operation may fail\n     * (return {@code false}) spuriously, but repeated invocation\n     * when the current value holds the expected value and no other\n     * thread is also attempting to set the value will eventually\n     * succeed.\n     *\n     * @param expectedReference the expected value of the reference\n     * @param newStamp the new value for the stamp\n     * @return {@code true} if successful\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean casPair(Pair<V> cmp, Pair<V> val)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public V getReference()", "public int getStamp()", "public V get(int[] stampHolder)", "public boolean weakCompareAndSet(V expectedReference, V newReference, int expectedStamp, int newStamp)", "public boolean compareAndSet(V expectedReference, V newReference, int expectedStamp, int newStamp)", "public void set(V newReference, int newStamp)", "public boolean attemptStamp(V expectedReference, int newStamp)", "private boolean casPair(Pair<V> cmp, Pair<V> val)" ],
  "variableNames" : [ "pair", "PAIR" ]
}