{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/database/CursorWindow.java",
  "packageName" : "android.database",
  "className" : "CursorWindow",
  "comment" : "\n * A buffer containing multiple cursor rows.\n * <p>\n * A {@link CursorWindow} is read-write when initially created and used locally.\n * When sent to a remote process (by writing it to a {@link Parcel}), the remote process\n * receives a read-only view of the cursor window.  Typically the cursor window\n * will be allocated by the producer, filled with data, and then sent to the\n * consumer for reading.\n * </p>\n ",
  "variables" : [ {
    "name" : "STATS_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sCursorWindowSize",
    "type" : "int",
    "comment" : " This static member will be evaluated when first used.",
    "links" : [ ]
  }, {
    "name" : "mWindowPtr",
    "type" : "long",
    "comment" : "\n     * The native CursorWindow object pointer.  (FOR INTERNAL USE ONLY)\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mStartPos",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCloseGuard",
    "type" : "CloseGuard",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<CursorWindow>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sWindowToPidMap",
    "type" : "LongSparseArray<Integer>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static native long nativeCreate(String name, int cursorWindowSize)",
    "returnType" : "long",
    "comment" : " May throw CursorWindowAllocationException",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeCreateFromParcel(Parcel parcel)",
    "returnType" : "long",
    "comment" : " May throw CursorWindowAllocationException",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeDispose(long windowPtr)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeWriteToParcel(long windowPtr, Parcel parcel)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native String nativeGetName(long windowPtr)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native byte[] nativeGetBlob(long windowPtr, int row, int column)",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native String nativeGetString(long windowPtr, int row, int column)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeCopyStringToBuffer(long windowPtr, int row, int column, CharArrayBuffer buffer)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativePutBlob(long windowPtr, byte[] value, int row, int column)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativePutString(long windowPtr, String value, int row, int column)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeClear(long windowPtr)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeGetNumRows(long windowPtr)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativeSetNumColumns(long windowPtr, int columnNum)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativeAllocRow(long windowPtr)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeFreeLastRow(long windowPtr)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeGetType(long windowPtr, int row, int column)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeGetLong(long windowPtr, int row, int column)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native double nativeGetDouble(long windowPtr, int row, int column)",
    "returnType" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativePutLong(long windowPtr, long value, int row, int column)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativePutDouble(long windowPtr, double value, int row, int column)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativePutNull(long windowPtr, int row, int column)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void finalize() throws Throwable",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void dispose()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getName()",
    "returnType" : "String",
    "comment" : "\n     * Gets the name of this cursor window, never null.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clear()",
    "returnType" : "void",
    "comment" : "\n     * Clears out the existing contents of the window, making it safe to reuse\n     * for new data.\n     * <p>\n     * The start position ({@link #getStartPosition()}), number of rows ({@link #getNumRows()}),\n     * and number of columns in the cursor are all reset to zero.\n     * </p>\n     ",
    "links" : [ "#getStartPosition", "#getNumRows" ]
  }, {
    "name" : "public int getStartPosition()",
    "returnType" : "int",
    "comment" : "\n     * Gets the start position of this cursor window.\n     * <p>\n     * The start position is the zero-based index of the first row that this window contains\n     * relative to the entire result set of the {@link Cursor}.\n     * </p>\n     *\n     * @return The zero-based start position.\n     ",
    "links" : [ "Cursor" ]
  }, {
    "name" : "public void setStartPosition(int pos)",
    "returnType" : "void",
    "comment" : "\n     * Sets the start position of this cursor window.\n     * <p>\n     * The start position is the zero-based index of the first row that this window contains\n     * relative to the entire result set of the {@link Cursor}.\n     * </p>\n     *\n     * @param pos The new zero-based start position.\n     ",
    "links" : [ "Cursor" ]
  }, {
    "name" : "public int getNumRows()",
    "returnType" : "int",
    "comment" : "\n     * Gets the number of rows in this window.\n     *\n     * @return The number of rows in this cursor window.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean setNumColumns(int columnNum)",
    "returnType" : "boolean",
    "comment" : "\n     * Sets the number of columns in this window.\n     * <p>\n     * This method must be called before any rows are added to the window, otherwise\n     * it will fail to set the number of columns if it differs from the current number\n     * of columns.\n     * </p>\n     *\n     * @param columnNum The new number of columns.\n     * @return True if successful.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean allocRow()",
    "returnType" : "boolean",
    "comment" : "\n     * Allocates a new row at the end of this cursor window.\n     *\n     * @return True if successful, false if the cursor window is out of memory.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void freeLastRow()",
    "returnType" : "void",
    "comment" : "\n     * Frees the last row in this cursor window.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isNull(int row, int column)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the field at the specified row and column index\n     * has type {@link Cursor#FIELD_TYPE_NULL}.\n     *\n     * @param row The zero-based row index.\n     * @param column The zero-based column index.\n     * @return True if the field has type {@link Cursor#FIELD_TYPE_NULL}.\n     * @deprecated Use {@link #getType(int, int)} instead.\n     ",
    "links" : [ "Cursor#FIELD_TYPE_NULL", "Cursor#FIELD_TYPE_NULL", "#getType" ]
  }, {
    "name" : "public boolean isBlob(int row, int column)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the field at the specified row and column index\n     * has type {@link Cursor#FIELD_TYPE_BLOB} or {@link Cursor#FIELD_TYPE_NULL}.\n     *\n     * @param row The zero-based row index.\n     * @param column The zero-based column index.\n     * @return True if the field has type {@link Cursor#FIELD_TYPE_BLOB} or\n     * {@link Cursor#FIELD_TYPE_NULL}.\n     * @deprecated Use {@link #getType(int, int)} instead.\n     ",
    "links" : [ "Cursor#FIELD_TYPE_BLOB", "Cursor#FIELD_TYPE_NULL", "Cursor#FIELD_TYPE_BLOB", "Cursor#FIELD_TYPE_NULL", "#getType" ]
  }, {
    "name" : "public boolean isLong(int row, int column)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the field at the specified row and column index\n     * has type {@link Cursor#FIELD_TYPE_INTEGER}.\n     *\n     * @param row The zero-based row index.\n     * @param column The zero-based column index.\n     * @return True if the field has type {@link Cursor#FIELD_TYPE_INTEGER}.\n     * @deprecated Use {@link #getType(int, int)} instead.\n     ",
    "links" : [ "Cursor#FIELD_TYPE_INTEGER", "Cursor#FIELD_TYPE_INTEGER", "#getType" ]
  }, {
    "name" : "public boolean isFloat(int row, int column)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the field at the specified row and column index\n     * has type {@link Cursor#FIELD_TYPE_FLOAT}.\n     *\n     * @param row The zero-based row index.\n     * @param column The zero-based column index.\n     * @return True if the field has type {@link Cursor#FIELD_TYPE_FLOAT}.\n     * @deprecated Use {@link #getType(int, int)} instead.\n     ",
    "links" : [ "Cursor#FIELD_TYPE_FLOAT", "Cursor#FIELD_TYPE_FLOAT", "#getType" ]
  }, {
    "name" : "public boolean isString(int row, int column)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the field at the specified row and column index\n     * has type {@link Cursor#FIELD_TYPE_STRING} or {@link Cursor#FIELD_TYPE_NULL}.\n     *\n     * @param row The zero-based row index.\n     * @param column The zero-based column index.\n     * @return True if the field has type {@link Cursor#FIELD_TYPE_STRING}\n     * or {@link Cursor#FIELD_TYPE_NULL}.\n     * @deprecated Use {@link #getType(int, int)} instead.\n     ",
    "links" : [ "Cursor#FIELD_TYPE_STRING", "Cursor#FIELD_TYPE_NULL", "Cursor#FIELD_TYPE_STRING", "Cursor#FIELD_TYPE_NULL", "#getType" ]
  }, {
    "name" : "public int getType(int row, int column)",
    "returnType" : "int",
    "comment" : "\n     * Returns the type of the field at the specified row and column index.\n     * <p>\n     * The returned field types are:\n     * <ul>\n     * <li>{@link Cursor#FIELD_TYPE_NULL}</li>\n     * <li>{@link Cursor#FIELD_TYPE_INTEGER}</li>\n     * <li>{@link Cursor#FIELD_TYPE_FLOAT}</li>\n     * <li>{@link Cursor#FIELD_TYPE_STRING}</li>\n     * <li>{@link Cursor#FIELD_TYPE_BLOB}</li>\n     * </ul>\n     * </p>\n     *\n     * @param row The zero-based row index.\n     * @param column The zero-based column index.\n     * @return The field type.\n     ",
    "links" : [ "Cursor#FIELD_TYPE_NULL", "Cursor#FIELD_TYPE_INTEGER", "Cursor#FIELD_TYPE_FLOAT", "Cursor#FIELD_TYPE_STRING", "Cursor#FIELD_TYPE_BLOB" ]
  }, {
    "name" : "public byte[] getBlob(int row, int column)",
    "returnType" : "byte[]",
    "comment" : "\n     * Gets the value of the field at the specified row and column index as a byte array.\n     * <p>\n     * The result is determined as follows:\n     * <ul>\n     * <li>If the field is of type {@link Cursor#FIELD_TYPE_NULL}, then the result\n     * is <code>null</code>.</li>\n     * <li>If the field is of type {@link Cursor#FIELD_TYPE_BLOB}, then the result\n     * is the blob value.</li>\n     * <li>If the field is of type {@link Cursor#FIELD_TYPE_STRING}, then the result\n     * is the array of bytes that make up the internal representation of the\n     * string value.</li>\n     * <li>If the field is of type {@link Cursor#FIELD_TYPE_INTEGER} or\n     * {@link Cursor#FIELD_TYPE_FLOAT}, then a {@link SQLiteException} is thrown.</li>\n     * </ul>\n     * </p>\n     *\n     * @param row The zero-based row index.\n     * @param column The zero-based column index.\n     * @return The value of the field as a byte array.\n     ",
    "links" : [ "Cursor#FIELD_TYPE_NULL", "Cursor#FIELD_TYPE_BLOB", "Cursor#FIELD_TYPE_STRING", "Cursor#FIELD_TYPE_INTEGER", "Cursor#FIELD_TYPE_FLOAT", "SQLiteException" ]
  }, {
    "name" : "public String getString(int row, int column)",
    "returnType" : "String",
    "comment" : "\n     * Gets the value of the field at the specified row and column index as a string.\n     * <p>\n     * The result is determined as follows:\n     * <ul>\n     * <li>If the field is of type {@link Cursor#FIELD_TYPE_NULL}, then the result\n     * is <code>null</code>.</li>\n     * <li>If the field is of type {@link Cursor#FIELD_TYPE_STRING}, then the result\n     * is the string value.</li>\n     * <li>If the field is of type {@link Cursor#FIELD_TYPE_INTEGER}, then the result\n     * is a string representation of the integer in decimal, obtained by formatting the\n     * value with the <code>printf</code> family of functions using\n     * format specifier <code>%lld</code>.</li>\n     * <li>If the field is of type {@link Cursor#FIELD_TYPE_FLOAT}, then the result\n     * is a string representation of the floating-point value in decimal, obtained by\n     * formatting the value with the <code>printf</code> family of functions using\n     * format specifier <code>%g</code>.</li>\n     * <li>If the field is of type {@link Cursor#FIELD_TYPE_BLOB}, then a\n     * {@link SQLiteException} is thrown.</li>\n     * </ul>\n     * </p>\n     *\n     * @param row The zero-based row index.\n     * @param column The zero-based column index.\n     * @return The value of the field as a string.\n     ",
    "links" : [ "Cursor#FIELD_TYPE_NULL", "Cursor#FIELD_TYPE_STRING", "Cursor#FIELD_TYPE_INTEGER", "Cursor#FIELD_TYPE_FLOAT", "Cursor#FIELD_TYPE_BLOB", "SQLiteException" ]
  }, {
    "name" : "public void copyStringToBuffer(int row, int column, CharArrayBuffer buffer)",
    "returnType" : "void",
    "comment" : "\n     * Copies the text of the field at the specified row and column index into\n     * a {@link CharArrayBuffer}.\n     * <p>\n     * The buffer is populated as follows:\n     * <ul>\n     * <li>If the buffer is too small for the value to be copied, then it is\n     * automatically resized.</li>\n     * <li>If the field is of type {@link Cursor#FIELD_TYPE_NULL}, then the buffer\n     * is set to an empty string.</li>\n     * <li>If the field is of type {@link Cursor#FIELD_TYPE_STRING}, then the buffer\n     * is set to the contents of the string.</li>\n     * <li>If the field is of type {@link Cursor#FIELD_TYPE_INTEGER}, then the buffer\n     * is set to a string representation of the integer in decimal, obtained by formatting the\n     * value with the <code>printf</code> family of functions using\n     * format specifier <code>%lld</code>.</li>\n     * <li>If the field is of type {@link Cursor#FIELD_TYPE_FLOAT}, then the buffer is\n     * set to a string representation of the floating-point value in decimal, obtained by\n     * formatting the value with the <code>printf</code> family of functions using\n     * format specifier <code>%g</code>.</li>\n     * <li>If the field is of type {@link Cursor#FIELD_TYPE_BLOB}, then a\n     * {@link SQLiteException} is thrown.</li>\n     * </ul>\n     * </p>\n     *\n     * @param row The zero-based row index.\n     * @param column The zero-based column index.\n     * @param buffer The {@link CharArrayBuffer} to hold the string.  It is automatically\n     * resized if the requested string is larger than the buffer's current capacity.\n      ",
    "links" : [ "CharArrayBuffer", "Cursor#FIELD_TYPE_NULL", "Cursor#FIELD_TYPE_STRING", "Cursor#FIELD_TYPE_INTEGER", "Cursor#FIELD_TYPE_FLOAT", "Cursor#FIELD_TYPE_BLOB", "SQLiteException", "CharArrayBuffer" ]
  }, {
    "name" : "public long getLong(int row, int column)",
    "returnType" : "long",
    "comment" : "\n     * Gets the value of the field at the specified row and column index as a <code>long</code>.\n     * <p>\n     * The result is determined as follows:\n     * <ul>\n     * <li>If the field is of type {@link Cursor#FIELD_TYPE_NULL}, then the result\n     * is <code>0L</code>.</li>\n     * <li>If the field is of type {@link Cursor#FIELD_TYPE_STRING}, then the result\n     * is the value obtained by parsing the string value with <code>strtoll</code>.\n     * <li>If the field is of type {@link Cursor#FIELD_TYPE_INTEGER}, then the result\n     * is the <code>long</code> value.</li>\n     * <li>If the field is of type {@link Cursor#FIELD_TYPE_FLOAT}, then the result\n     * is the floating-point value converted to a <code>long</code>.</li>\n     * <li>If the field is of type {@link Cursor#FIELD_TYPE_BLOB}, then a\n     * {@link SQLiteException} is thrown.</li>\n     * </ul>\n     * </p>\n     *\n     * @param row The zero-based row index.\n     * @param column The zero-based column index.\n     * @return The value of the field as a <code>long</code>.\n     ",
    "links" : [ "Cursor#FIELD_TYPE_NULL", "Cursor#FIELD_TYPE_STRING", "Cursor#FIELD_TYPE_INTEGER", "Cursor#FIELD_TYPE_FLOAT", "Cursor#FIELD_TYPE_BLOB", "SQLiteException" ]
  }, {
    "name" : "public double getDouble(int row, int column)",
    "returnType" : "double",
    "comment" : "\n     * Gets the value of the field at the specified row and column index as a\n     * <code>double</code>.\n     * <p>\n     * The result is determined as follows:\n     * <ul>\n     * <li>If the field is of type {@link Cursor#FIELD_TYPE_NULL}, then the result\n     * is <code>0.0</code>.</li>\n     * <li>If the field is of type {@link Cursor#FIELD_TYPE_STRING}, then the result\n     * is the value obtained by parsing the string value with <code>strtod</code>.\n     * <li>If the field is of type {@link Cursor#FIELD_TYPE_INTEGER}, then the result\n     * is the integer value converted to a <code>double</code>.</li>\n     * <li>If the field is of type {@link Cursor#FIELD_TYPE_FLOAT}, then the result\n     * is the <code>double</code> value.</li>\n     * <li>If the field is of type {@link Cursor#FIELD_TYPE_BLOB}, then a\n     * {@link SQLiteException} is thrown.</li>\n     * </ul>\n     * </p>\n     *\n     * @param row The zero-based row index.\n     * @param column The zero-based column index.\n     * @return The value of the field as a <code>double</code>.\n     ",
    "links" : [ "Cursor#FIELD_TYPE_NULL", "Cursor#FIELD_TYPE_STRING", "Cursor#FIELD_TYPE_INTEGER", "Cursor#FIELD_TYPE_FLOAT", "Cursor#FIELD_TYPE_BLOB", "SQLiteException" ]
  }, {
    "name" : "public short getShort(int row, int column)",
    "returnType" : "short",
    "comment" : "\n     * Gets the value of the field at the specified row and column index as a\n     * <code>short</code>.\n     * <p>\n     * The result is determined by invoking {@link #getLong} and converting the\n     * result to <code>short</code>.\n     * </p>\n     *\n     * @param row The zero-based row index.\n     * @param column The zero-based column index.\n     * @return The value of the field as a <code>short</code>.\n     ",
    "links" : [ "#getLong" ]
  }, {
    "name" : "public int getInt(int row, int column)",
    "returnType" : "int",
    "comment" : "\n     * Gets the value of the field at the specified row and column index as an\n     * <code>int</code>.\n     * <p>\n     * The result is determined by invoking {@link #getLong} and converting the\n     * result to <code>int</code>.\n     * </p>\n     *\n     * @param row The zero-based row index.\n     * @param column The zero-based column index.\n     * @return The value of the field as an <code>int</code>.\n     ",
    "links" : [ "#getLong" ]
  }, {
    "name" : "public float getFloat(int row, int column)",
    "returnType" : "float",
    "comment" : "\n     * Gets the value of the field at the specified row and column index as a\n     * <code>float</code>.\n     * <p>\n     * The result is determined by invoking {@link #getDouble} and converting the\n     * result to <code>float</code>.\n     * </p>\n     *\n     * @param row The zero-based row index.\n     * @param column The zero-based column index.\n     * @return The value of the field as an <code>float</code>.\n     ",
    "links" : [ "#getDouble" ]
  }, {
    "name" : "public boolean putBlob(byte[] value, int row, int column)",
    "returnType" : "boolean",
    "comment" : "\n     * Copies a byte array into the field at the specified row and column index.\n     *\n     * @param value The value to store.\n     * @param row The zero-based row index.\n     * @param column The zero-based column index.\n     * @return True if successful.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean putString(String value, int row, int column)",
    "returnType" : "boolean",
    "comment" : "\n     * Copies a string into the field at the specified row and column index.\n     *\n     * @param value The value to store.\n     * @param row The zero-based row index.\n     * @param column The zero-based column index.\n     * @return True if successful.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean putLong(long value, int row, int column)",
    "returnType" : "boolean",
    "comment" : "\n     * Puts a long integer into the field at the specified row and column index.\n     *\n     * @param value The value to store.\n     * @param row The zero-based row index.\n     * @param column The zero-based column index.\n     * @return True if successful.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean putDouble(double value, int row, int column)",
    "returnType" : "boolean",
    "comment" : "\n     * Puts a double-precision floating point value into the field at the\n     * specified row and column index.\n     *\n     * @param value The value to store.\n     * @param row The zero-based row index.\n     * @param column The zero-based column index.\n     * @return True if successful.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean putNull(int row, int column)",
    "returnType" : "boolean",
    "comment" : "\n     * Puts a null value into the field at the specified row and column index.\n     *\n     * @param row The zero-based row index.\n     * @param column The zero-based column index.\n     * @return True if successful.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static CursorWindow newFromParcel(Parcel p)",
    "returnType" : "CursorWindow",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onAllReferencesReleased()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void recordNewWindow(int pid, long window)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void recordClosingOfWindow(long window)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String printStats()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int getCursorWindowSize()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "STATS_TAG", "sCursorWindowSize", "mWindowPtr", "mStartPos", "mName", "mCloseGuard", "CREATOR", "sWindowToPidMap" ],
  "methodNames" : [ "private static native long nativeCreate(String name, int cursorWindowSize)", "private static native long nativeCreateFromParcel(Parcel parcel)", "private static native void nativeDispose(long windowPtr)", "private static native void nativeWriteToParcel(long windowPtr, Parcel parcel)", "private static native String nativeGetName(long windowPtr)", "private static native byte[] nativeGetBlob(long windowPtr, int row, int column)", "private static native String nativeGetString(long windowPtr, int row, int column)", "private static native void nativeCopyStringToBuffer(long windowPtr, int row, int column, CharArrayBuffer buffer)", "private static native boolean nativePutBlob(long windowPtr, byte[] value, int row, int column)", "private static native boolean nativePutString(long windowPtr, String value, int row, int column)", "private static native void nativeClear(long windowPtr)", "private static native int nativeGetNumRows(long windowPtr)", "private static native boolean nativeSetNumColumns(long windowPtr, int columnNum)", "private static native boolean nativeAllocRow(long windowPtr)", "private static native void nativeFreeLastRow(long windowPtr)", "private static native int nativeGetType(long windowPtr, int row, int column)", "private static native long nativeGetLong(long windowPtr, int row, int column)", "private static native double nativeGetDouble(long windowPtr, int row, int column)", "private static native boolean nativePutLong(long windowPtr, long value, int row, int column)", "private static native boolean nativePutDouble(long windowPtr, double value, int row, int column)", "private static native boolean nativePutNull(long windowPtr, int row, int column)", "protected void finalize() throws Throwable", "private void dispose()", "public String getName()", "public void clear()", "public int getStartPosition()", "public void setStartPosition(int pos)", "public int getNumRows()", "public boolean setNumColumns(int columnNum)", "public boolean allocRow()", "public void freeLastRow()", "public boolean isNull(int row, int column)", "public boolean isBlob(int row, int column)", "public boolean isLong(int row, int column)", "public boolean isFloat(int row, int column)", "public boolean isString(int row, int column)", "public int getType(int row, int column)", "public byte[] getBlob(int row, int column)", "public String getString(int row, int column)", "public void copyStringToBuffer(int row, int column, CharArrayBuffer buffer)", "public long getLong(int row, int column)", "public double getDouble(int row, int column)", "public short getShort(int row, int column)", "public int getInt(int row, int column)", "public float getFloat(int row, int column)", "public boolean putBlob(byte[] value, int row, int column)", "public boolean putString(String value, int row, int column)", "public boolean putLong(long value, int row, int column)", "public boolean putDouble(double value, int row, int column)", "public boolean putNull(int row, int column)", "public static CursorWindow newFromParcel(Parcel p)", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)", "protected void onAllReferencesReleased()", "private void recordNewWindow(int pid, long window)", "private void recordClosingOfWindow(long window)", "private String printStats()", "private static int getCursorWindowSize()", "public String toString()" ]
}