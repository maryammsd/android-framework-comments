{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/media/MediaPlayer.java",
  "packageName" : "android.media",
  "className" : "TimeProvider",
  "comment" : " @hide ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_NS_WITHOUT_POSITION_CHECK",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_EARLY_CALLBACK_US",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TIME_ADJUSTMENT_RATE",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLastTimeUs",
    "type" : "long",
    "comment" : " meaning 1/2 ",
    "links" : [ ]
  }, {
    "name" : "mPlayer",
    "type" : "MediaPlayer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPaused",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStopped",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBuffering",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLastReportedTime",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mListeners",
    "type" : "MediaTimeProvider.OnMediaTimeListener[]",
    "comment" : " no need for log(N) search performance",
    "links" : [ ]
  }, {
    "name" : "mTimes",
    "type" : "long[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEventHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRefresh",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPausing",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSeeking",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NOTIFY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NOTIFY_TIME",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NOTIFY_STOP",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NOTIFY_SEEK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NOTIFY_TRACK_DATA",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandlerThread",
    "type" : "HandlerThread",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void scheduleNotification(int type, long delayUs)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "protected void finalize()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void onNotifyTime()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void onPaused(boolean paused)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void onBuffering(boolean buffering)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void onStopped()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void onSeekComplete(MediaPlayer mp)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void onNewPlayer()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private synchronized void notifySeek()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private synchronized void notifyTrackData(Pair<SubtitleTrack, byte[]> trackData)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private synchronized void notifyStop()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int registerListener(MediaTimeProvider.OnMediaTimeListener listener)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void notifyAt(long timeUs, MediaTimeProvider.OnMediaTimeListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void scheduleUpdate(MediaTimeProvider.OnMediaTimeListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void cancelNotifications(MediaTimeProvider.OnMediaTimeListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private synchronized void notifyTimedEvent(boolean refreshTime)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public long getCurrentTimeUs(boolean refreshTime, boolean monotonic) throws IllegalStateException",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "MAX_NS_WITHOUT_POSITION_CHECK", "MAX_EARLY_CALLBACK_US", "TIME_ADJUSTMENT_RATE", "mLastTimeUs", "mPlayer", "mPaused", "mStopped", "mBuffering", "mLastReportedTime", "mListeners", "mTimes", "mEventHandler", "mRefresh", "mPausing", "mSeeking", "NOTIFY", "NOTIFY_TIME", "NOTIFY_STOP", "NOTIFY_SEEK", "NOTIFY_TRACK_DATA", "mHandlerThread", "DEBUG" ],
  "methodNames" : [ "private void scheduleNotification(int type, long delayUs)", "public void close()", "protected void finalize()", "public void onNotifyTime()", "public void onPaused(boolean paused)", "public void onBuffering(boolean buffering)", "public void onStopped()", "public void onSeekComplete(MediaPlayer mp)", "public void onNewPlayer()", "private synchronized void notifySeek()", "private synchronized void notifyTrackData(Pair<SubtitleTrack, byte[]> trackData)", "private synchronized void notifyStop()", "private int registerListener(MediaTimeProvider.OnMediaTimeListener listener)", "public void notifyAt(long timeUs, MediaTimeProvider.OnMediaTimeListener listener)", "public void scheduleUpdate(MediaTimeProvider.OnMediaTimeListener listener)", "public void cancelNotifications(MediaTimeProvider.OnMediaTimeListener listener)", "private synchronized void notifyTimedEvent(boolean refreshTime)", "public long getCurrentTimeUs(boolean refreshTime, boolean monotonic) throws IllegalStateException" ]
}