{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/text/TextDirectionHeuristics.java",
  "packageName" : "android.text",
  "className" : "TextDirectionHeuristics",
  "comment" : "\n * Some objects that implement {@link TextDirectionHeuristic}. Use these with\n * the {@link BidiFormatter#unicodeWrap unicodeWrap()} methods in {@link BidiFormatter}.\n * Also notice that these direction heuristics correspond to the same types of constants\n * provided in the {@link android.view.View} class for {@link android.view.View#setTextDirection\n * setTextDirection()}, such as {@link android.view.View#TEXT_DIRECTION_RTL}.\n * <p>To support versions lower than {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2},\n * you can use the support library's {@link androidx.core.text.TextDirectionHeuristicsCompat}\n * class.\n *\n ",
  "links" : [ "android.view.View#setTextDirectionsetTextDirection()", "android.view.View#TEXT_DIRECTION_RTL", "android.os.Build.VERSION_CODES#JELLY_BEAN_MR2", "android.text.BidiFormatter#unicodeWrap", "androidx.core.text.TextDirectionHeuristicsCompat", "android.text.BidiFormatter", "android.view.View", "android.text.TextDirectionHeuristic" ],
  "variables" : [ {
    "name" : "LTR",
    "type" : "TextDirectionHeuristic",
    "comment" : "\n     * Always decides that the direction is left to right.\n     ",
    "links" : [ ]
  }, {
    "name" : "RTL",
    "type" : "TextDirectionHeuristic",
    "comment" : "\n     * Always decides that the direction is right to left.\n     ",
    "links" : [ ]
  }, {
    "name" : "FIRSTSTRONG_LTR",
    "type" : "TextDirectionHeuristic",
    "comment" : "\n     * Determines the direction based on the first strong directional character, including bidi\n     * format chars, falling back to left to right if it finds none. This is the default behavior\n     * of the Unicode Bidirectional Algorithm.\n     ",
    "links" : [ ]
  }, {
    "name" : "FIRSTSTRONG_RTL",
    "type" : "TextDirectionHeuristic",
    "comment" : "\n     * Determines the direction based on the first strong directional character, including bidi\n     * format chars, falling back to right to left if it finds none. This is similar to the default\n     * behavior of the Unicode Bidirectional Algorithm, just with different fallback behavior.\n     ",
    "links" : [ ]
  }, {
    "name" : "ANYRTL_LTR",
    "type" : "TextDirectionHeuristic",
    "comment" : "\n     * If the text contains any strong right to left non-format character, determines that the\n     * direction is right to left, falling back to left to right if it finds none.\n     ",
    "links" : [ ]
  }, {
    "name" : "LOCALE",
    "type" : "TextDirectionHeuristic",
    "comment" : "\n     * Force the paragraph direction to the Locale direction. Falls back to left to right.\n     ",
    "links" : [ ]
  }, {
    "name" : "STATE_TRUE",
    "type" : "int",
    "comment" : "\n     * State constants for taking care about true / false / unknown\n     ",
    "links" : [ ]
  }, {
    "name" : "STATE_FALSE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STATE_UNKNOWN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static int isRtlCodePoint(int codePoint)",
    "returnType" : "int",
    "comment" : " Returns STATE_TRUE for strong RTL characters, STATE_FALSE for strong LTR characters, and\n     * STATE_UNKNOWN for everything else.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static int isRtlCodePoint(int codePoint)" ],
  "variableNames" : [ "LTR", "RTL", "FIRSTSTRONG_LTR", "FIRSTSTRONG_RTL", "ANYRTL_LTR", "LOCALE", "STATE_TRUE", "STATE_FALSE", "STATE_UNKNOWN" ]
}