{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xpath/compiler/XPathParser.java",
  "packageName" : "org.apache.xpath.compiler",
  "className" : "XPathParser",
  "comment" : "\n * Tokenizes and parses XPath expressions. This should really be named\n * XPathParserImpl, and may be renamed in the future.\n * @xsl.usage general\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "CONTINUE_AFTER_FATAL_ERROR",
    "type" : "String",
    "comment" : " backtrace in the exception itself -- but we don't expect to need one.",
    "links" : [ ]
  }, {
    "name" : "m_ops",
    "type" : "OpMap",
    "comment" : "\n   * The XPath to be processed.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_token",
    "type" : "String",
    "comment" : "\n   * The next token in the pattern.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_tokenChar",
    "type" : "char",
    "comment" : "\n   * The first char in m_token, the theory being that this\n   * is an optimization because we won't have to do charAt(0) as\n   * often.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_queueMark",
    "type" : "int",
    "comment" : "\n   * The position in the token queue is tracked by m_queueMark.\n   ",
    "links" : [ ]
  }, {
    "name" : "FILTER_MATCH_FAILED",
    "type" : "int",
    "comment" : "\n   * Results from checking FilterExpr syntax\n   ",
    "links" : [ ]
  }, {
    "name" : "FILTER_MATCH_PRIMARY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FILTER_MATCH_PREDICATES",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_namespaceContext",
    "type" : "PrefixResolver",
    "comment" : "\n   * The prefix resolver to map prefixes to namespaces in the OpMap.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_errorListener",
    "type" : "ErrorListener",
    "comment" : " The error listener where syntax errors are to be sent.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_sourceLocator",
    "type" : "javax.xml.transform.SourceLocator",
    "comment" : " The source location of the XPath. ",
    "links" : [ ]
  }, {
    "name" : "m_functionTable",
    "type" : "FunctionTable",
    "comment" : " The table contains build-in functions and customized functions ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void initXPath(Compiler compiler, String expression, PrefixResolver namespaceContext) throws javax.xml.transform.TransformerException",
    "returnType" : "void",
    "comment" : "\n   * Given an string, init an XPath object for selections,\n   * in order that a parse doesn't\n   * have to be done each time the expression is evaluated.\n   * \n   * @param compiler The compiler object.\n   * @param expression A string conforming to the XPath grammar.\n   * @param namespaceContext An object that is able to resolve prefixes in\n   * the XPath to namespaces.\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public void initMatchPattern(Compiler compiler, String expression, PrefixResolver namespaceContext) throws javax.xml.transform.TransformerException",
    "returnType" : "void",
    "comment" : "\n   * Given an string, init an XPath object for pattern matches,\n   * in order that a parse doesn't\n   * have to be done each time the expression is evaluated.\n   * @param compiler The XPath object to be initialized.\n   * @param expression A String representing the XPath.\n   * @param namespaceContext An object that is able to resolve prefixes in\n   * the XPath to namespaces.\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setErrorHandler(ErrorListener handler)",
    "returnType" : "void",
    "comment" : "\n   * Allow an application to register an error event handler, where syntax \n   * errors will be sent.  If the error listener is not set, syntax errors \n   * will be sent to System.err.\n   * \n   * @param handler Reference to error listener where syntax errors will be \n   *                sent.\n   ",
    "links" : [ ]
  }, {
    "name" : "public ErrorListener getErrorListener()",
    "returnType" : "ErrorListener",
    "comment" : "\n   * Return the current error listener.\n   *\n   * @return The error listener, which should not normally be null, but may be.\n   ",
    "links" : [ ]
  }, {
    "name" : " final boolean tokenIs(String s)",
    "returnType" : "boolean",
    "comment" : "\n   * Check whether m_token matches the target string. \n   *\n   * @param s A string reference or null.\n   *\n   * @return If m_token is null, returns false (or true if s is also null), or \n   * return true if the current token matches the string, else false.\n   ",
    "links" : [ ]
  }, {
    "name" : " final boolean tokenIs(char c)",
    "returnType" : "boolean",
    "comment" : "\n   * Check whether m_tokenChar==c. \n   *\n   * @param c A character to be tested.\n   *\n   * @return If m_token is null, returns false, or return true if c matches \n   *         the current token.\n   ",
    "links" : [ ]
  }, {
    "name" : " final boolean lookahead(char c, int n)",
    "returnType" : "boolean",
    "comment" : "\n   * Look ahead of the current token in order to\n   * make a branching decision.\n   *\n   * @param c the character to be tested for.\n   * @param n number of tokens to look ahead.  Must be\n   * greater than 1.\n   *\n   * @return true if the next token matches the character argument.\n   ",
    "links" : [ ]
  }, {
    "name" : "private final boolean lookbehind(char c, int n)",
    "returnType" : "boolean",
    "comment" : "\n   * Look behind the first character of the current token in order to\n   * make a branching decision.\n   * \n   * @param c the character to compare it to.\n   * @param n number of tokens to look behind.  Must be\n   * greater than 1.  Note that the look behind terminates\n   * at either the beginning of the string or on a '|'\n   * character.  Because of this, this method should only\n   * be used for pattern matching.\n   *\n   * @return true if the token behind the current token matches the character \n   *         argument.\n   ",
    "links" : [ ]
  }, {
    "name" : "private final boolean lookbehindHasToken(int n)",
    "returnType" : "boolean",
    "comment" : "\n   * look behind the current token in order to\n   * see if there is a useable token.\n   * \n   * @param n number of tokens to look behind.  Must be\n   * greater than 1.  Note that the look behind terminates\n   * at either the beginning of the string or on a '|'\n   * character.  Because of this, this method should only\n   * be used for pattern matching.\n   * \n   * @return true if look behind has a token, false otherwise.\n   ",
    "links" : [ ]
  }, {
    "name" : "private final boolean lookahead(String s, int n)",
    "returnType" : "boolean",
    "comment" : "\n   * Look ahead of the current token in order to\n   * make a branching decision.\n   * \n   * @param s the string to compare it to.\n   * @param n number of tokens to lookahead.  Must be\n   * greater than 1.\n   *\n   * @return true if the token behind the current token matches the string \n   *         argument.\n   ",
    "links" : [ ]
  }, {
    "name" : "private final void nextToken()",
    "returnType" : "void",
    "comment" : "\n   * Retrieve the next token from the command and\n   * store it in m_token string.\n   ",
    "links" : [ ]
  }, {
    "name" : "private final String getTokenRelative(int i)",
    "returnType" : "String",
    "comment" : "\n   * Retrieve a token relative to the current token.\n   * \n   * @param i Position relative to current token.\n   *\n   * @return The string at the given index, or null if the index is out \n   *         of range.\n   ",
    "links" : [ ]
  }, {
    "name" : "private final void prevToken()",
    "returnType" : "void",
    "comment" : "\n   * Retrieve the previous token from the command and\n   * store it in m_token string.\n   ",
    "links" : [ ]
  }, {
    "name" : "private final void consumeExpected(String expected) throws javax.xml.transform.TransformerException",
    "returnType" : "void",
    "comment" : "\n   * Consume an expected token, throwing an exception if it\n   * isn't there.\n   *\n   * @param expected The string to be expected.\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "private final void consumeExpected(char expected) throws javax.xml.transform.TransformerException",
    "returnType" : "void",
    "comment" : "\n   * Consume an expected token, throwing an exception if it\n   * isn't there.\n   *\n   * @param expected the character to be expected.\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : " void warn(String msg, Object[] args) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n   * Warn the user of a problem.\n   *\n   * @param msg An error msgkey that corresponds to one of the constants found \n   *            in {@link org.apache.xpath.res.XPATHErrorResources}, which is \n   *            a key for a format string.\n   * @param args An array of arguments represented in the format string, which \n   *             may be null.\n   *\n   * @throws TransformerException if the current ErrorListoner determines to \n   *                              throw an exception.\n   ",
    "links" : [ "org.apache.xpath.res.XPATHErrorResources" ]
  }, {
    "name" : "private void assertion(boolean b, String msg)",
    "returnType" : "void",
    "comment" : "\n   * Notify the user of an assertion error, and probably throw an\n   * exception.\n   *\n   * @param b  If false, a runtime exception will be thrown.\n   * @param msg The assertion message, which should be informative.\n   * \n   * @throws RuntimeException if the b argument is false.\n   ",
    "links" : [ ]
  }, {
    "name" : " void error(String msg, Object[] args) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n   * Notify the user of an error, and probably throw an\n   * exception.\n   *\n   * @param msg An error msgkey that corresponds to one of the constants found \n   *            in {@link org.apache.xpath.res.XPATHErrorResources}, which is \n   *            a key for a format string.\n   * @param args An array of arguments represented in the format string, which \n   *             may be null.\n   *\n   * @throws TransformerException if the current ErrorListoner determines to \n   *                              throw an exception.\n   ",
    "links" : [ "org.apache.xpath.res.XPATHErrorResources" ]
  }, {
    "name" : " void errorForDOM3(String msg, Object[] args) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n   * This method is added to support DOM 3 XPath API.\n   * <p>\n   * This method is exactly like error(String, Object[]); except that\n   * the underlying TransformerException is \n   * XpathStylesheetDOM3Exception (which extends TransformerException).\n   * <p>\n   * So older XPath code in Xalan is not affected by this. To older XPath code\n   * the behavior of whether error() or errorForDOM3() is called because it is\n   * always catching TransformerException objects and is oblivious to\n   * the new subclass of XPathStylesheetDOM3Exception. Older XPath code \n   * runs as before.\n   * <p>\n   * However, newer DOM3 XPath code upon catching a TransformerException can\n   * can check if the exception is an instance of XPathStylesheetDOM3Exception\n   * and take appropriate action.\n   * \n   * @param msg An error msgkey that corresponds to one of the constants found \n   *            in {@link org.apache.xpath.res.XPATHErrorResources}, which is \n   *            a key for a format string.\n   * @param args An array of arguments represented in the format string, which \n   *             may be null.\n   *\n   * @throws TransformerException if the current ErrorListoner determines to \n   *                              throw an exception.\n   ",
    "links" : [ "org.apache.xpath.res.XPATHErrorResources" ]
  }, {
    "name" : "protected String dumpRemainingTokenQueue()",
    "returnType" : "String",
    "comment" : "\n   * Dump the remaining token queue.\n   * Thanks to Craig for this.\n   *\n   * @return A dump of the remaining token queue, which may be appended to \n   *         an error message.\n   ",
    "links" : [ ]
  }, {
    "name" : " final int getFunctionToken(String key)",
    "returnType" : "int",
    "comment" : "\n   * Given a string, return the corresponding function token.\n   *\n   * @param key A local name of a function.\n   *\n   * @return   The function ID, which may correspond to one of the FUNC_XXX \n   *    values found in {@link org.apache.xpath.compiler.FunctionTable}, but may \n   *    be a value installed by an external module.\n   ",
    "links" : [ "org.apache.xpath.compiler.FunctionTable" ]
  }, {
    "name" : " void insertOp(int pos, int length, int op)",
    "returnType" : "void",
    "comment" : "\n   * Insert room for operation.  This will NOT set\n   * the length value of the operation, but will update\n   * the length value for the total expression.\n   *\n   * @param pos The position where the op is to be inserted.\n   * @param length The length of the operation space in the op map.\n   * @param op The op code to the inserted.\n   ",
    "links" : [ ]
  }, {
    "name" : " void appendOp(int length, int op)",
    "returnType" : "void",
    "comment" : "\n   * Insert room for operation.  This WILL set\n   * the length value of the operation, and will update\n   * the length value for the total expression.\n   *\n   * @param length The length of the operation.\n   * @param op The op code to the inserted.\n   ",
    "links" : [ ]
  }, {
    "name" : "protected void Expr() throws javax.xml.transform.TransformerException",
    "returnType" : "void",
    "comment" : "\n   *\n   *\n   * Expr  ::=  OrExpr\n   *\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "protected void OrExpr() throws javax.xml.transform.TransformerException",
    "returnType" : "void",
    "comment" : "\n   *\n   *\n   * OrExpr  ::=  AndExpr\n   * | OrExpr 'or' AndExpr\n   *\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "protected void AndExpr() throws javax.xml.transform.TransformerException",
    "returnType" : "void",
    "comment" : "\n   *\n   *\n   * AndExpr  ::=  EqualityExpr\n   * | AndExpr 'and' EqualityExpr\n   *\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "protected int EqualityExpr(int addPos) throws javax.xml.transform.TransformerException",
    "returnType" : "int",
    "comment" : "\n   *\n   * @returns an Object which is either a String, a Number, a Boolean, or a vector\n   * of nodes.\n   *\n   * EqualityExpr  ::=  RelationalExpr\n   * | EqualityExpr '=' RelationalExpr\n   *\n   *\n   * @param addPos Position where expression is to be added, or -1 for append.\n   *\n   * @return the position at the end of the equality expression.\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "protected int RelationalExpr(int addPos) throws javax.xml.transform.TransformerException",
    "returnType" : "int",
    "comment" : "\n   * .\n   * @returns an Object which is either a String, a Number, a Boolean, or a vector\n   * of nodes.\n   *\n   * RelationalExpr  ::=  AdditiveExpr\n   * | RelationalExpr '<' AdditiveExpr\n   * | RelationalExpr '>' AdditiveExpr\n   * | RelationalExpr '<=' AdditiveExpr\n   * | RelationalExpr '>=' AdditiveExpr\n   *\n   *\n   * @param addPos Position where expression is to be added, or -1 for append.\n   *\n   * @return the position at the end of the relational expression.\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "protected int AdditiveExpr(int addPos) throws javax.xml.transform.TransformerException",
    "returnType" : "int",
    "comment" : "\n   * This has to handle construction of the operations so that they are evaluated\n   * in pre-fix order.  So, for 9+7-6, instead of |+|9|-|7|6|, this needs to be\n   * evaluated as |-|+|9|7|6|.\n   *\n   * AdditiveExpr  ::=  MultiplicativeExpr\n   * | AdditiveExpr '+' MultiplicativeExpr\n   * | AdditiveExpr '-' MultiplicativeExpr\n   *\n   *\n   * @param addPos Position where expression is to be added, or -1 for append.\n   *\n   * @return the position at the end of the equality expression.\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "protected int MultiplicativeExpr(int addPos) throws javax.xml.transform.TransformerException",
    "returnType" : "int",
    "comment" : "\n   * This has to handle construction of the operations so that they are evaluated\n   * in pre-fix order.  So, for 9+7-6, instead of |+|9|-|7|6|, this needs to be\n   * evaluated as |-|+|9|7|6|.\n   *\n   * MultiplicativeExpr  ::=  UnaryExpr\n   * | MultiplicativeExpr MultiplyOperator UnaryExpr\n   * | MultiplicativeExpr 'div' UnaryExpr\n   * | MultiplicativeExpr 'mod' UnaryExpr\n   * | MultiplicativeExpr 'quo' UnaryExpr\n   *\n   * @param addPos Position where expression is to be added, or -1 for append.\n   *\n   * @return the position at the end of the equality expression.\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "protected void UnaryExpr() throws javax.xml.transform.TransformerException",
    "returnType" : "void",
    "comment" : "\n   *\n   * UnaryExpr  ::=  UnionExpr\n   * | '-' UnaryExpr\n   *\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "protected void StringExpr() throws javax.xml.transform.TransformerException",
    "returnType" : "void",
    "comment" : "\n   *\n   * StringExpr  ::=  Expr\n   *\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "protected void BooleanExpr() throws javax.xml.transform.TransformerException",
    "returnType" : "void",
    "comment" : "\n   *\n   *\n   * StringExpr  ::=  Expr\n   *\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "protected void NumberExpr() throws javax.xml.transform.TransformerException",
    "returnType" : "void",
    "comment" : "\n   *\n   *\n   * NumberExpr  ::=  Expr\n   *\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "protected void UnionExpr() throws javax.xml.transform.TransformerException",
    "returnType" : "void",
    "comment" : "\n   * The context of the right hand side expressions is the context of the\n   * left hand side expression. The results of the right hand side expressions\n   * are node sets. The result of the left hand side UnionExpr is the union\n   * of the results of the right hand side expressions.\n   *\n   *\n   * UnionExpr    ::=    PathExpr\n   * | UnionExpr '|' PathExpr\n   *\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "protected void PathExpr() throws javax.xml.transform.TransformerException",
    "returnType" : "void",
    "comment" : "\n   * PathExpr  ::=  LocationPath\n   * | FilterExpr\n   * | FilterExpr '/' RelativeLocationPath\n   * | FilterExpr '//' RelativeLocationPath\n   *\n   * @throws XSLProcessorException thrown if the active ProblemListener and XPathContext decide\n   * the error condition is severe enough to halt processing.\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "protected int FilterExpr() throws javax.xml.transform.TransformerException",
    "returnType" : "int",
    "comment" : "\n   *\n   *\n   * FilterExpr  ::=  PrimaryExpr\n   * | FilterExpr Predicate\n   *\n   * @throws XSLProcessorException thrown if the active ProblemListener and XPathContext decide\n   * the error condition is severe enough to halt processing.\n   *\n   * @return  FILTER_MATCH_PREDICATES, if this method successfully matched a\n   *          FilterExpr with one or more Predicates;\n   *          FILTER_MATCH_PRIMARY, if this method successfully matched a\n   *          FilterExpr that was just a PrimaryExpr; or\n   *          FILTER_MATCH_FAILED, if this method did not match a FilterExpr\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "protected boolean PrimaryExpr() throws javax.xml.transform.TransformerException",
    "returnType" : "boolean",
    "comment" : "\n   *\n   * PrimaryExpr  ::=  VariableReference\n   * | '(' Expr ')'\n   * | Literal\n   * | Number\n   * | FunctionCall\n   *\n   * @return true if this method successfully matched a PrimaryExpr\n   *\n   * @throws javax.xml.transform.TransformerException\n   *\n   ",
    "links" : [ ]
  }, {
    "name" : "protected void Argument() throws javax.xml.transform.TransformerException",
    "returnType" : "void",
    "comment" : "\n   *\n   * Argument    ::=    Expr\n   *\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "protected boolean FunctionCall() throws javax.xml.transform.TransformerException",
    "returnType" : "boolean",
    "comment" : "\n   *\n   * FunctionCall    ::=    FunctionName '(' ( Argument ( ',' Argument)*)? ')'\n   *\n   * @return true if, and only if, a FunctionCall was matched\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "protected void LocationPath() throws javax.xml.transform.TransformerException",
    "returnType" : "void",
    "comment" : "\n   *\n   * LocationPath ::= RelativeLocationPath\n   * | AbsoluteLocationPath\n   *\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "protected boolean RelativeLocationPath() throws javax.xml.transform.TransformerException",
    "returnType" : "boolean",
    "comment" : "\n   *\n   * RelativeLocationPath ::= Step\n   * | RelativeLocationPath '/' Step\n   * | AbbreviatedRelativeLocationPath\n   *\n   * @returns true if, and only if, a RelativeLocationPath was matched\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "protected boolean Step() throws javax.xml.transform.TransformerException",
    "returnType" : "boolean",
    "comment" : "\n   *\n   * Step    ::=    Basis Predicate\n   * | AbbreviatedStep\n   *\n   * @returns false if step was empty (or only a '/'); true, otherwise\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "protected void Basis() throws javax.xml.transform.TransformerException",
    "returnType" : "void",
    "comment" : "\n   *\n   * Basis    ::=    AxisName '::' NodeTest\n   * | AbbreviatedBasis\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "protected int AxisName() throws javax.xml.transform.TransformerException",
    "returnType" : "int",
    "comment" : "\n   *\n   * Basis    ::=    AxisName '::' NodeTest\n   * | AbbreviatedBasis\n   *\n   * @return FROM_XXX axes type, found in {@link org.apache.xpath.compiler.Keywords}.\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ "org.apache.xpath.compiler.Keywords" ]
  }, {
    "name" : "protected void NodeTest(int axesType) throws javax.xml.transform.TransformerException",
    "returnType" : "void",
    "comment" : "\n   *\n   * NodeTest    ::=    WildcardName\n   * | NodeType '(' ')'\n   * | 'processing-instruction' '(' Literal ')'\n   *\n   * @param axesType FROM_XXX axes type, found in {@link org.apache.xpath.compiler.Keywords}.\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ "org.apache.xpath.compiler.Keywords" ]
  }, {
    "name" : "protected void Predicate() throws javax.xml.transform.TransformerException",
    "returnType" : "void",
    "comment" : "\n   *\n   * Predicate ::= '[' PredicateExpr ']'\n   *\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "protected void PredicateExpr() throws javax.xml.transform.TransformerException",
    "returnType" : "void",
    "comment" : "\n   *\n   * PredicateExpr ::= Expr\n   *\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "protected void QName() throws javax.xml.transform.TransformerException",
    "returnType" : "void",
    "comment" : "\n   * QName ::=  (Prefix ':')? LocalPart\n   * Prefix ::=  NCName\n   * LocalPart ::=  NCName\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "protected void NCName()",
    "returnType" : "void",
    "comment" : "\n   * NCName ::=  (Letter | '_') (NCNameChar)\n   * NCNameChar ::=  Letter | Digit | '.' | '-' | '_' | CombiningChar | Extender\n   ",
    "links" : [ ]
  }, {
    "name" : "protected void Literal() throws javax.xml.transform.TransformerException",
    "returnType" : "void",
    "comment" : "\n   * The value of the Literal is the sequence of characters inside\n   * the \" or ' characters>.\n   *\n   * Literal  ::=  '\"' [^\"]* '\"'\n   * | \"'\" [^']* \"'\"\n   *\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "protected void Number() throws javax.xml.transform.TransformerException",
    "returnType" : "void",
    "comment" : "\n   *\n   * Number ::= [0-9]+('.'[0-9]+)? | '.'[0-9]+\n   *\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "protected void Pattern() throws javax.xml.transform.TransformerException",
    "returnType" : "void",
    "comment" : "\n   *\n   * Pattern  ::=  LocationPathPattern\n   * | Pattern '|' LocationPathPattern\n   *\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "protected void LocationPathPattern() throws javax.xml.transform.TransformerException",
    "returnType" : "void",
    "comment" : "\n   *\n   *\n   * LocationPathPattern  ::=  '/' RelativePathPattern?\n   * | IdKeyPattern (('/' | '//') RelativePathPattern)?\n   * | '//'? RelativePathPattern\n   *\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "protected void IdKeyPattern() throws javax.xml.transform.TransformerException",
    "returnType" : "void",
    "comment" : "\n   *\n   * IdKeyPattern  ::=  'id' '(' Literal ')'\n   * | 'key' '(' Literal ',' Literal ')'\n   * (Also handle doc())\n   *\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "protected void RelativePathPattern() throws javax.xml.transform.TransformerException",
    "returnType" : "void",
    "comment" : "\n   *\n   * RelativePathPattern  ::=  StepPattern\n   * | RelativePathPattern '/' StepPattern\n   * | RelativePathPattern '//' StepPattern\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "protected boolean StepPattern(boolean isLeadingSlashPermitted) throws javax.xml.transform.TransformerException",
    "returnType" : "boolean",
    "comment" : "\n   *\n   * StepPattern  ::=  AbbreviatedNodeTestStep\n   *\n   * @param isLeadingSlashPermitted a boolean indicating whether a slash can\n   *        appear at the start of this step\n   *\n   * @return boolean indicating whether a slash following the step was consumed\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "protected boolean AbbreviatedNodeTestStep(boolean isLeadingSlashPermitted) throws javax.xml.transform.TransformerException",
    "returnType" : "boolean",
    "comment" : "\n   *\n   * AbbreviatedNodeTestStep    ::=    '@'? NodeTest Predicate\n   *\n   * @param isLeadingSlashPermitted a boolean indicating whether a slash can\n   *        appear at the start of this step\n   *\n   * @return boolean indicating whether a slash following the step was consumed\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void initXPath(Compiler compiler, String expression, PrefixResolver namespaceContext) throws javax.xml.transform.TransformerException", "public void initMatchPattern(Compiler compiler, String expression, PrefixResolver namespaceContext) throws javax.xml.transform.TransformerException", "public void setErrorHandler(ErrorListener handler)", "public ErrorListener getErrorListener()", " final boolean tokenIs(String s)", " final boolean tokenIs(char c)", " final boolean lookahead(char c, int n)", "private final boolean lookbehind(char c, int n)", "private final boolean lookbehindHasToken(int n)", "private final boolean lookahead(String s, int n)", "private final void nextToken()", "private final String getTokenRelative(int i)", "private final void prevToken()", "private final void consumeExpected(String expected) throws javax.xml.transform.TransformerException", "private final void consumeExpected(char expected) throws javax.xml.transform.TransformerException", " void warn(String msg, Object[] args) throws TransformerException", "private void assertion(boolean b, String msg)", " void error(String msg, Object[] args) throws TransformerException", " void errorForDOM3(String msg, Object[] args) throws TransformerException", "protected String dumpRemainingTokenQueue()", " final int getFunctionToken(String key)", " void insertOp(int pos, int length, int op)", " void appendOp(int length, int op)", "protected void Expr() throws javax.xml.transform.TransformerException", "protected void OrExpr() throws javax.xml.transform.TransformerException", "protected void AndExpr() throws javax.xml.transform.TransformerException", "protected int EqualityExpr(int addPos) throws javax.xml.transform.TransformerException", "protected int RelationalExpr(int addPos) throws javax.xml.transform.TransformerException", "protected int AdditiveExpr(int addPos) throws javax.xml.transform.TransformerException", "protected int MultiplicativeExpr(int addPos) throws javax.xml.transform.TransformerException", "protected void UnaryExpr() throws javax.xml.transform.TransformerException", "protected void StringExpr() throws javax.xml.transform.TransformerException", "protected void BooleanExpr() throws javax.xml.transform.TransformerException", "protected void NumberExpr() throws javax.xml.transform.TransformerException", "protected void UnionExpr() throws javax.xml.transform.TransformerException", "protected void PathExpr() throws javax.xml.transform.TransformerException", "protected int FilterExpr() throws javax.xml.transform.TransformerException", "protected boolean PrimaryExpr() throws javax.xml.transform.TransformerException", "protected void Argument() throws javax.xml.transform.TransformerException", "protected boolean FunctionCall() throws javax.xml.transform.TransformerException", "protected void LocationPath() throws javax.xml.transform.TransformerException", "protected boolean RelativeLocationPath() throws javax.xml.transform.TransformerException", "protected boolean Step() throws javax.xml.transform.TransformerException", "protected void Basis() throws javax.xml.transform.TransformerException", "protected int AxisName() throws javax.xml.transform.TransformerException", "protected void NodeTest(int axesType) throws javax.xml.transform.TransformerException", "protected void Predicate() throws javax.xml.transform.TransformerException", "protected void PredicateExpr() throws javax.xml.transform.TransformerException", "protected void QName() throws javax.xml.transform.TransformerException", "protected void NCName()", "protected void Literal() throws javax.xml.transform.TransformerException", "protected void Number() throws javax.xml.transform.TransformerException", "protected void Pattern() throws javax.xml.transform.TransformerException", "protected void LocationPathPattern() throws javax.xml.transform.TransformerException", "protected void IdKeyPattern() throws javax.xml.transform.TransformerException", "protected void RelativePathPattern() throws javax.xml.transform.TransformerException", "protected boolean StepPattern(boolean isLeadingSlashPermitted) throws javax.xml.transform.TransformerException", "protected boolean AbbreviatedNodeTestStep(boolean isLeadingSlashPermitted) throws javax.xml.transform.TransformerException" ],
  "variableNames" : [ "CONTINUE_AFTER_FATAL_ERROR", "m_ops", "m_token", "m_tokenChar", "m_queueMark", "FILTER_MATCH_FAILED", "FILTER_MATCH_PRIMARY", "FILTER_MATCH_PREDICATES", "m_namespaceContext", "m_errorListener", "m_sourceLocator", "m_functionTable" ]
}