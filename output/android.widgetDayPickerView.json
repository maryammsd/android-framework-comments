{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/widget/DayPickerView.java",
  "packageName" : "android.widget",
  "className" : "DayPickerView",
  "comment" : "",
  "variables" : [ {
    "name" : "DEFAULT_LAYOUT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_START_YEAR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_END_YEAR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATTRS_TEXT_COLOR",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSelectedDay",
    "type" : "Calendar",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMinDate",
    "type" : "Calendar",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaxDate",
    "type" : "Calendar",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAccessibilityManager",
    "type" : "AccessibilityManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mViewPager",
    "type" : "ViewPager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPrevButton",
    "type" : "ImageButton",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNextButton",
    "type" : "ImageButton",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAdapter",
    "type" : "DayPickerPagerAdapter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTempCalendar",
    "type" : "Calendar",
    "comment" : " Temporary calendar used for date calculations. ",
    "links" : [ ]
  }, {
    "name" : "mOnDaySelectedListener",
    "type" : "OnDaySelectedListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnPageChangedListener",
    "type" : "OnPageChangeListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnClickListener",
    "type" : "OnClickListener",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void updateButtonVisibility(int position)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onRtlPropertiesChanged(@ResolvedLayoutDir int layoutDirection)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onLayout(boolean changed, int left, int top, int right, int bottom)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setDayOfWeekTextAppearance(int resId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getDayOfWeekTextAppearance()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setDayTextAppearance(int resId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getDayTextAppearance()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setDate(long timeInMillis)",
    "returnType" : "void",
    "comment" : "\n     * Sets the currently selected date to the specified timestamp. Jumps\n     * immediately to the new date. To animate to the new date, use\n     * {@link #setDate(long, boolean)}.\n     *\n     * @param timeInMillis the target day in milliseconds\n     ",
    "links" : [ "#setDate" ]
  }, {
    "name" : "public void setDate(long timeInMillis, boolean animate)",
    "returnType" : "void",
    "comment" : "\n     * Sets the currently selected date to the specified timestamp. Jumps\n     * immediately to the new date, optionally animating the transition.\n     *\n     * @param timeInMillis the target day in milliseconds\n     * @param animate whether to smooth scroll to the new position\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setDate(long timeInMillis, boolean animate, boolean setSelected)",
    "returnType" : "void",
    "comment" : "\n     * Moves to the month containing the specified day, optionally setting the\n     * day as selected.\n     *\n     * @param timeInMillis the target day in milliseconds\n     * @param animate whether to smooth scroll to the new position\n     * @param setSelected whether to set the specified day as selected\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getDate()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean getBoundsForDate(long timeInMillis, Rect outBounds)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setFirstDayOfWeek(int firstDayOfWeek)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getFirstDayOfWeek()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setMinDate(long timeInMillis)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public long getMinDate()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setMaxDate(long timeInMillis)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public long getMaxDate()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onRangeChanged()",
    "returnType" : "void",
    "comment" : "\n     * Handles changes to date range.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOnDaySelectedListener(OnDaySelectedListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Sets the listener to call when the user selects a day.\n     *\n     * @param listener The listener to call.\n     ",
    "links" : [ ]
  }, {
    "name" : "private int getDiffMonths(Calendar start, Calendar end)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getPositionFromDay(long timeInMillis)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Calendar getTempCalendarForTime(long timeInMillis)",
    "returnType" : "Calendar",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getMostVisiblePosition()",
    "returnType" : "int",
    "comment" : "\n     * Gets the position of the view that is most prominently displayed within the list view.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPosition(int position)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "DEFAULT_LAYOUT", "DEFAULT_START_YEAR", "DEFAULT_END_YEAR", "ATTRS_TEXT_COLOR", "mSelectedDay", "mMinDate", "mMaxDate", "mAccessibilityManager", "mViewPager", "mPrevButton", "mNextButton", "mAdapter", "mTempCalendar", "mOnDaySelectedListener", "mOnPageChangedListener", "mOnClickListener" ],
  "methodNames" : [ "private void updateButtonVisibility(int position)", "protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)", "public void onRtlPropertiesChanged(@ResolvedLayoutDir int layoutDirection)", "protected void onLayout(boolean changed, int left, int top, int right, int bottom)", "public void setDayOfWeekTextAppearance(int resId)", "public int getDayOfWeekTextAppearance()", "public void setDayTextAppearance(int resId)", "public int getDayTextAppearance()", "public void setDate(long timeInMillis)", "public void setDate(long timeInMillis, boolean animate)", "private void setDate(long timeInMillis, boolean animate, boolean setSelected)", "public long getDate()", "public boolean getBoundsForDate(long timeInMillis, Rect outBounds)", "public void setFirstDayOfWeek(int firstDayOfWeek)", "public int getFirstDayOfWeek()", "public void setMinDate(long timeInMillis)", "public long getMinDate()", "public void setMaxDate(long timeInMillis)", "public long getMaxDate()", "public void onRangeChanged()", "public void setOnDaySelectedListener(OnDaySelectedListener listener)", "private int getDiffMonths(Calendar start, Calendar end)", "private int getPositionFromDay(long timeInMillis)", "private Calendar getTempCalendarForTime(long timeInMillis)", "public int getMostVisiblePosition()", "public void setPosition(int position)" ]
}