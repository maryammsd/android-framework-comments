{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/net/sip/SipSession.java",
  "packageName" : "android.net.sip",
  "className" : "SipSession",
  "comment" : "\n * Represents a SIP session that is associated with a SIP dialog or a standalone\n * transaction not within a dialog.\n * <p>You can get a {@link SipSession} from {@link SipManager} with {@link\n * SipManager#createSipSession createSipSession()} (when initiating calls) or {@link\n * SipManager#getSessionFor getSessionFor()} (when receiving calls).</p>\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSession",
    "type" : "ISipSession",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mListener",
    "type" : "Listener",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String getLocalIp()",
    "returnType" : "String",
    "comment" : "\n     * Gets the IP address of the local host on which this SIP session runs.\n     *\n     * @return the IP address of the local host\n     ",
    "links" : [ ]
  }, {
    "name" : "public SipProfile getLocalProfile()",
    "returnType" : "SipProfile",
    "comment" : "\n     * Gets the SIP profile that this session is associated with.\n     *\n     * @return the SIP profile that this session is associated with\n     ",
    "links" : [ ]
  }, {
    "name" : "public SipProfile getPeerProfile()",
    "returnType" : "SipProfile",
    "comment" : "\n     * Gets the SIP profile that this session is connected to. Only available\n     * when the session is associated with a SIP dialog.\n     *\n     * @return the SIP profile that this session is connected to\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getState()",
    "returnType" : "int",
    "comment" : "\n     * Gets the session state. The value returned must be one of the states in\n     * {@link State}.\n     *\n     * @return the session state\n     ",
    "links" : [ "State" ]
  }, {
    "name" : "public boolean isInCall()",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if the session is in a call.\n     *\n     * @return true if the session is in a call\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getCallId()",
    "returnType" : "String",
    "comment" : "\n     * Gets the call ID of the session.\n     *\n     * @return the call ID\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setListener(Listener listener)",
    "returnType" : "void",
    "comment" : "\n     * Sets the listener to listen to the session events. A {@code SipSession}\n     * can only hold one listener at a time. Subsequent calls to this method\n     * override the previous listener.\n     *\n     * @param listener to listen to the session events of this object\n     ",
    "links" : [ ]
  }, {
    "name" : "public void register(int duration)",
    "returnType" : "void",
    "comment" : "\n     * Performs registration to the server specified by the associated local\n     * profile. The session listener is called back upon success or failure of\n     * registration. The method is only valid to call when the session state is\n     * in {@link State#READY_TO_CALL}.\n     *\n     * @param duration duration in second before the registration expires\n     * @see Listener\n     ",
    "links" : [ "State#READY_TO_CALL" ]
  }, {
    "name" : "public void unregister()",
    "returnType" : "void",
    "comment" : "\n     * Performs unregistration to the server specified by the associated local\n     * profile. Unregistration is technically the same as registration with zero\n     * expiration duration. The session listener is called back upon success or\n     * failure of unregistration. The method is only valid to call when the\n     * session state is in {@link State#READY_TO_CALL}.\n     *\n     * @see Listener\n     ",
    "links" : [ "State#READY_TO_CALL" ]
  }, {
    "name" : "public void makeCall(SipProfile callee, String sessionDescription, int timeout)",
    "returnType" : "void",
    "comment" : "\n     * Initiates a call to the specified profile. The session listener is called\n     * back upon defined session events. The method is only valid to call when\n     * the session state is in {@link State#READY_TO_CALL}.\n     *\n     * @param callee the SIP profile to make the call to\n     * @param sessionDescription the session description of this call\n     * @param timeout the session will be timed out if the call is not\n     *        established within {@code timeout} seconds. Default value (defined\n     *        by SIP protocol) is used if {@code timeout} is zero or negative.\n     * @see Listener\n     ",
    "links" : [ "State#READY_TO_CALL" ]
  }, {
    "name" : "public void answerCall(String sessionDescription, int timeout)",
    "returnType" : "void",
    "comment" : "\n     * Answers an incoming call with the specified session description. The\n     * method is only valid to call when the session state is in\n     * {@link State#INCOMING_CALL}.\n     *\n     * @param sessionDescription the session description to answer this call\n     * @param timeout the session will be timed out if the call is not\n     *        established within {@code timeout} seconds. Default value (defined\n     *        by SIP protocol) is used if {@code timeout} is zero or negative.\n     ",
    "links" : [ "State#INCOMING_CALL" ]
  }, {
    "name" : "public void endCall()",
    "returnType" : "void",
    "comment" : "\n     * Ends an established call, terminates an outgoing call or rejects an\n     * incoming call. The method is only valid to call when the session state is\n     * in {@link State#IN_CALL},\n     * {@link State#INCOMING_CALL},\n     * {@link State#OUTGOING_CALL} or\n     * {@link State#OUTGOING_CALL_RING_BACK}.\n     ",
    "links" : [ "State#IN_CALL", "State#INCOMING_CALL", "State#OUTGOING_CALL", "State#OUTGOING_CALL_RING_BACK" ]
  }, {
    "name" : "public void changeCall(String sessionDescription, int timeout)",
    "returnType" : "void",
    "comment" : "\n     * Changes the session description during a call. The method is only valid\n     * to call when the session state is in {@link State#IN_CALL}.\n     *\n     * @param sessionDescription the new session description\n     * @param timeout the session will be timed out if the call is not\n     *        established within {@code timeout} seconds. Default value (defined\n     *        by SIP protocol) is used if {@code timeout} is zero or negative.\n     ",
    "links" : [ "State#IN_CALL" ]
  }, {
    "name" : " ISipSession getRealSession()",
    "returnType" : "ISipSession",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private ISipSessionListener createListener()",
    "returnType" : "ISipSessionListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void loge(String s, Throwable t)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "mSession", "mListener" ],
  "methodNames" : [ "public String getLocalIp()", "public SipProfile getLocalProfile()", "public SipProfile getPeerProfile()", "public int getState()", "public boolean isInCall()", "public String getCallId()", "public void setListener(Listener listener)", "public void register(int duration)", "public void unregister()", "public void makeCall(SipProfile callee, String sessionDescription, int timeout)", "public void answerCall(String sessionDescription, int timeout)", "public void endCall()", "public void changeCall(String sessionDescription, int timeout)", " ISipSession getRealSession()", "private ISipSessionListener createListener()", "private void loge(String s, Throwable t)" ]
}