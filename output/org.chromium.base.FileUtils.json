{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/chromium/base/FileUtils.java",
  "packageName" : "org.chromium.base",
  "className" : "FileUtils",
  "comment" : " Helper methods for dealing with Files. ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DELETE_ALL",
    "type" : "Function<String, Boolean>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static boolean recursivelyDeleteFile(File currentFile, Function<String, Boolean> canDelete)",
    "returnType" : "boolean",
    "comment" : "\n     * Delete the given File and (if it's a directory) everything within it.\n     * @param currentFile The file or directory to delete. Does not need to exist.\n     * @param canDelete the {@link Function} function used to check if the file can be deleted.\n     * @return True if the files are deleted, or files reserved by |canDelete|, false if failed to\n     *         delete files.\n     * @note Caveat: Return values from recursive deletes are ignored.\n     * @note Caveat: |canDelete| is not robust; see https://crbug.com/1066733.\n     ",
    "links" : [ "java.util.function.Function" ]
  }, {
    "name" : "public static void batchDeleteFiles(List<String> filePaths, Function<String, Boolean> canDelete)",
    "returnType" : "void",
    "comment" : "\n     * Delete the given files or directories by calling {@link #recursivelyDeleteFile(File)}. This\n     * supports deletion of content URIs.\n     * @param filePaths The file paths or content URIs to delete.\n     * @param canDelete the {@link Function} function used to check if the file can be deleted.\n     ",
    "links" : [ "#recursivelyDeleteFile(File)", "java.util.function.Function" ]
  }, {
    "name" : "public static long getFileSizeBytes(File file)",
    "returnType" : "long",
    "comment" : "\n     * Get file size. If it is a directory, recursively get the size of all files within it.\n     * @param file The file or directory.\n     * @return The size in bytes.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void copyStream(InputStream inputStream, OutputStream outputStream) throws IOException",
    "returnType" : "void",
    "comment" : " Performs a simple copy of inputStream to outputStream. ",
    "links" : [ ]
  }, {
    "name" : "public static void copyStreamToFile(InputStream is, File outFile) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Atomically copies the data from an input stream into an output file.\n     * @param is Input file stream to read data from.\n     * @param outFile Output file path.\n     * @throws IOException in case of I/O error.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static byte[] readStream(InputStream inputStream) throws IOException",
    "returnType" : "byte[]",
    "comment" : " Reads inputStream into a byte array. ",
    "links" : [ ]
  }, {
    "name" : "public static Uri getUriForFile(File file)",
    "returnType" : "Uri",
    "comment" : "\n     * Returns a URI that points at the file.\n     * @param file File to get a URI for.\n     * @return URI that points at that file, either as a content:// URI or a file:// URI.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getExtension(String file)",
    "returnType" : "String",
    "comment" : "\n     * Returns the file extension, or an empty string if none.\n     * @param file Name of the file, with or without the full path (Unix style).\n     * @return empty string if no extension, extension otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Bitmap queryBitmapFromContentProvider(Context context, Uri uri)",
    "returnType" : "Bitmap",
    "comment" : " Queries and decodes bitmap from content provider. ",
    "links" : [ ]
  }, {
    "name" : "public static String getAbsoluteFilePath(String filePath)",
    "returnType" : "String",
    "comment" : "\n     * Gets the canonicalised absolute pathname for |filePath|. Returns empty string if the path is\n     * invalid. This function can result in I/O so it can be slow.\n     * @param filePath Path of the file, has to be a file path instead of a content URI.\n     * @return canonicalised absolute pathname for |filePath|.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static boolean recursivelyDeleteFile(File currentFile, Function<String, Boolean> canDelete)", "public static void batchDeleteFiles(List<String> filePaths, Function<String, Boolean> canDelete)", "public static long getFileSizeBytes(File file)", "public static void copyStream(InputStream inputStream, OutputStream outputStream) throws IOException", "public static void copyStreamToFile(InputStream is, File outFile) throws IOException", "public static byte[] readStream(InputStream inputStream) throws IOException", "public static Uri getUriForFile(File file)", "public static String getExtension(String file)", "public static Bitmap queryBitmapFromContentProvider(Context context, Uri uri)", "public static String getAbsoluteFilePath(String filePath)" ],
  "variableNames" : [ "TAG", "DELETE_ALL" ]
}