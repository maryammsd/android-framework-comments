{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/bluetooth/BluetoothLeBroadcastMetadata.java",
  "packageName" : "android.bluetooth",
  "className" : "Builder",
  "comment" : "\n     * Builder for {@link BluetoothLeBroadcastMetadata}.\n     *\n     * @hide\n     ",
  "links" : [ "android.bluetooth.BluetoothLeBroadcastMetadata" ],
  "variables" : [ {
    "name" : "mSourceAddressType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSourceDevice",
    "type" : "BluetoothDevice",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSourceAdvertisingSid",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBroadcastId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPaSyncInterval",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsEncrypted",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsPublicBroadcast",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBroadcastName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBroadcastCode",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPresentationDelayMicros",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAudioConfigQuality",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRssi",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPublicBroadcastMetadata",
    "type" : "BluetoothLeAudioContentMetadata",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSubgroups",
    "type" : "List<BluetoothLeBroadcastSubgroup>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Builder setSourceDevice(@NonNull BluetoothDevice sourceDevice, @BluetoothDevice.AddressType int sourceAddressType)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the address type and MAC address of the Broadcast Source.\n         *\n         * <p>Address type can be either {@link BluetoothDevice#ADDRESS_TYPE_PUBLIC}, {@link\n         * BluetoothDevice#ADDRESS_TYPE_RANDOM}\n         *\n         * <p>MAC address can be Public Device Address, Random Device Address, Public Identity\n         * Address or Random (static) Identity Address\n         *\n         * @param sourceDevice source advertiser address\n         * @param sourceAddressType source advertiser address type\n         * @throws IllegalArgumentException if sourceAddressType is invalid\n         * @throws NullPointerException if sourceDevice is null\n         * @return this builder\n         * @hide\n         ",
    "links" : [ "android.bluetooth.BluetoothDevice#ADDRESS_TYPE_PUBLIC", "android.bluetooth.BluetoothDevice#ADDRESS_TYPE_RANDOM" ]
  }, {
    "name" : "public Builder setSourceAdvertisingSid(int sourceAdvertisingSid)",
    "returnType" : "Builder",
    "comment" : "\n         * Set Advertising_SID that is a subfield of the ADI field of the AUX_ADV_IND PDU or the\n         * LL_PERIODIC_SYNC_IND containing the SyncInfo that points to the PA transmitted by the\n         * Broadcast Source.\n         *\n         * @param sourceAdvertisingSid 1-byte long Advertising_SID of the Broadcast Source\n         * @return this builder\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setBroadcastId(int broadcastId)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the Broadcast_ID of the Broadcast Source.\n         *\n         * @param broadcastId 3-byte long Broadcast_ID of the Broadcast Source\n         * @return this builder\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setPaSyncInterval(int paSyncInterval)",
    "returnType" : "Builder",
    "comment" : "\n         * Set Periodic Advertising Sync interval of the broadcast Source.\n         *\n         * @param paSyncInterval Periodic Advertising Sync interval of the broadcast Source, {@link\n         *     #PA_SYNC_INTERVAL_UNKNOWN} if unknown\n         * @return this builder\n         * @hide\n         ",
    "links" : [ "#PA_SYNC_INTERVAL_UNKNOWN" ]
  }, {
    "name" : "public Builder setEncrypted(boolean isEncrypted)",
    "returnType" : "Builder",
    "comment" : "\n         * Set whether the Broadcast Source should be encrypted.\n         *\n         * <p>When setting up a Broadcast Source, if <var>isEncrypted</var> is true while\n         * <var>broadcastCode</var> is null, the implementation will automatically generate a\n         * Broadcast Code\n         *\n         * @param isEncrypted whether the Broadcast Source is encrypted\n         * @return this builder\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setPublicBroadcast(boolean isPublicBroadcast)",
    "returnType" : "Builder",
    "comment" : "\n         * Set whether this Broadcast Group is broadcasting Public Broadcast Announcement.\n         *\n         * @param isPublicBroadcast whether this Broadcast Group is broadcasting Public Broadcast\n         *     Announcement\n         * @return this builder\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setBroadcastName(@Nullable String broadcastName)",
    "returnType" : "Builder",
    "comment" : "\n         * Set broadcast name for this Broadcast Group.\n         *\n         * @param broadcastName Broadcast name for this Broadcast Group, {@code null} if no name\n         *     provided\n         * @return this builder\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setBroadcastCode(@Nullable byte[] broadcastCode)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the Broadcast Code currently set for this broadcast group.\n         *\n         * <p>Only needed when encryption is enabled\n         *\n         * <p>As defined in Volume 3, Part C, Section 3.2.6 of Bluetooth Core Specification, Version\n         * 5.3, Broadcast Code is used to encrypt a broadcast audio stream.\n         *\n         * <p>It must be a UTF-8 string that has at least 4 octets and should not exceed 16 octets.\n         *\n         * @param broadcastCode Broadcast Code for this Broadcast Source, {@code null} if code is\n         *     not required\n         * @return this builder\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setPresentationDelayMicros(@IntRange(from = 0, to = 0xFFFFFF) int presentationDelayMicros)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the overall presentation delay in microseconds of this Broadcast Source.\n         *\n         * <p>Presentation delay is defined in Section 7 of the Basic Audio Profile.\n         *\n         * @param presentationDelayMicros presentation delay of this Broadcast Source in\n         *     microseconds\n         * @throws IllegalArgumentException if presentationDelayMicros does not fall in [0,\n         *     0xFFFFFF]\n         * @return this builder\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setAudioConfigQuality(@AudioConfigQuality int audioConfigQuality)",
    "returnType" : "Builder",
    "comment" : "\n         * Set broadcast audio config quality for this Broadcast Group.\n         *\n         * @param audioConfigQuality broadcast audio config quality for this Broadcast Group\n         * @return this builder\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setRssi(@IntRange(from = -127, to = 127) int rssi)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the Received Signal Strength Indication (RSSI) value for this Broadcast metadata.\n         *\n         * <p>The valid RSSI range is [-127, 126] and as defined in Volume 4, Part E, Section\n         * 7.7.65.13 of Bluetooth Core Specification, Version 5.3, value of 0x7F(127) means that the\n         * RSSI is not available.\n         *\n         * @param rssi the RSSI\n         * @return this builder\n         * @throws IllegalArgumentException if rssi is not in the range [-127, 127].\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setPublicBroadcastMetadata(@Nullable BluetoothLeAudioContentMetadata publicBroadcastMetadata)",
    "returnType" : "Builder",
    "comment" : "\n         * Set public broadcast metadata for this Broadcast Group. PBS should include the\n         * Program_Info length-type-value (LTV) structure metadata\n         *\n         * @param publicBroadcastMetadata public broadcast metadata for this Broadcast Group, {@code\n         *     null} if no public meta data provided\n         * @return this builder\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder addSubgroup(@NonNull BluetoothLeBroadcastSubgroup subgroup)",
    "returnType" : "Builder",
    "comment" : "\n         * Add a subgroup to this broadcast source.\n         *\n         * @param subgroup {@link BluetoothLeBroadcastSubgroup} that contains a subgroup's metadata\n         * @throws NullPointerException if subgroup is null\n         * @return this builder\n         * @hide\n         ",
    "links" : [ "android.bluetooth.BluetoothLeBroadcastSubgroup" ]
  }, {
    "name" : "public Builder clearSubgroup()",
    "returnType" : "Builder",
    "comment" : "\n         * Clear subgroup list so that one can reset the builder after create it from an existing\n         * object.\n         *\n         * @return this builder\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public BluetoothLeBroadcastMetadata build()",
    "returnType" : "BluetoothLeBroadcastMetadata",
    "comment" : "\n         * Build {@link BluetoothLeBroadcastMetadata}.\n         *\n         * @return {@link BluetoothLeBroadcastMetadata}\n         * @throws IllegalArgumentException if the object cannot be built\n         * @throws NullPointerException if {@link NonNull} items are null\n         * @hide\n         ",
    "links" : [ "android.bluetooth.BluetoothLeBroadcastMetadata", "android.annotation.NonNull" ]
  } ],
  "methodNames" : [ "public Builder setSourceDevice(@NonNull BluetoothDevice sourceDevice, @BluetoothDevice.AddressType int sourceAddressType)", "public Builder setSourceAdvertisingSid(int sourceAdvertisingSid)", "public Builder setBroadcastId(int broadcastId)", "public Builder setPaSyncInterval(int paSyncInterval)", "public Builder setEncrypted(boolean isEncrypted)", "public Builder setPublicBroadcast(boolean isPublicBroadcast)", "public Builder setBroadcastName(@Nullable String broadcastName)", "public Builder setBroadcastCode(@Nullable byte[] broadcastCode)", "public Builder setPresentationDelayMicros(@IntRange(from = 0, to = 0xFFFFFF) int presentationDelayMicros)", "public Builder setAudioConfigQuality(@AudioConfigQuality int audioConfigQuality)", "public Builder setRssi(@IntRange(from = -127, to = 127) int rssi)", "public Builder setPublicBroadcastMetadata(@Nullable BluetoothLeAudioContentMetadata publicBroadcastMetadata)", "public Builder addSubgroup(@NonNull BluetoothLeBroadcastSubgroup subgroup)", "public Builder clearSubgroup()", "public BluetoothLeBroadcastMetadata build()" ],
  "variableNames" : [ "mSourceAddressType", "mSourceDevice", "mSourceAdvertisingSid", "mBroadcastId", "mPaSyncInterval", "mIsEncrypted", "mIsPublicBroadcast", "mBroadcastName", "mBroadcastCode", "mPresentationDelayMicros", "mAudioConfigQuality", "mRssi", "mPublicBroadcastMetadata", "mSubgroups" ]
}