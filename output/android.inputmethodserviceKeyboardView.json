{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/inputmethodservice/KeyboardView.java",
  "packageName" : "android.inputmethodservice",
  "className" : "KeyboardView",
  "comment" : "\n * A view that renders a virtual {@link Keyboard}. It handles rendering of keys and\n * detecting key presses and touch movements.\n *\n * @attr ref android.R.styleable#KeyboardView_keyBackground\n * @attr ref android.R.styleable#KeyboardView_keyPreviewLayout\n * @attr ref android.R.styleable#KeyboardView_keyPreviewOffset\n * @attr ref android.R.styleable#KeyboardView_keyPreviewHeight\n * @attr ref android.R.styleable#KeyboardView_labelTextSize\n * @attr ref android.R.styleable#KeyboardView_keyTextSize\n * @attr ref android.R.styleable#KeyboardView_keyTextColor\n * @attr ref android.R.styleable#KeyboardView_verticalCorrection\n * @attr ref android.R.styleable#KeyboardView_popupLayout\n *\n * @deprecated This class is deprecated because this is just a convenient UI widget class that\n *             application developers can re-implement on top of existing public APIs.  If you have\n *             already depended on this class, consider copying the implementation from AOSP into\n *             your project or re-implementing a similar widget by yourselves\n ",
  "variables" : [ {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NOT_A_KEY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_DELETE",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LONG_PRESSABLE_STATE_SET",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mKeyboard",
    "type" : "Keyboard",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCurrentKeyIndex",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLabelTextSize",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mKeyTextSize",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mKeyTextColor",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mShadowRadius",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mShadowColor",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBackgroundDimAmount",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPreviewText",
    "type" : "TextView",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPreviewPopup",
    "type" : "PopupWindow",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPreviewTextSizeLarge",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPreviewOffset",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPreviewHeight",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCoordinates",
    "type" : "int[]",
    "comment" : " Working variable",
    "links" : [ ]
  }, {
    "name" : "mPopupKeyboard",
    "type" : "PopupWindow",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMiniKeyboardContainer",
    "type" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMiniKeyboard",
    "type" : "KeyboardView",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMiniKeyboardOnScreen",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPopupParent",
    "type" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMiniKeyboardOffsetX",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMiniKeyboardOffsetY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMiniKeyboardCache",
    "type" : "Map<Key, View>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mKeys",
    "type" : "Key[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mKeyboardActionListener",
    "type" : "OnKeyboardActionListener",
    "comment" : " Listener for {@link OnKeyboardActionListener}. ",
    "links" : [ "OnKeyboardActionListener" ]
  }, {
    "name" : "MSG_SHOW_PREVIEW",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_REMOVE_PREVIEW",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_REPEAT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_LONGPRESS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DELAY_BEFORE_PREVIEW",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DELAY_AFTER_PREVIEW",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBOUNCE_TIME",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVerticalCorrection",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProximityThreshold",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPreviewCentered",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mShowPreview",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mShowTouchPoints",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPopupPreviewX",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPopupPreviewY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLastX",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLastY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStartX",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStartY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProximityCorrectOn",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPaint",
    "type" : "Paint",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPadding",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDownTime",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLastMoveTime",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLastKey",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLastCodeX",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLastCodeY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCurrentKey",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDownKey",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLastKeyTime",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCurrentKeyTime",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mKeyIndices",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGestureDetector",
    "type" : "GestureDetector",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPopupX",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPopupY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRepeatKeyIndex",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPopupLayout",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAbortKey",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInvalidatedKey",
    "type" : "Key",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mClipRegion",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPossiblePoly",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSwipeTracker",
    "type" : "SwipeTracker",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSwipeThreshold",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDisambiguateSwipe",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOldPointerCount",
    "type" : "int",
    "comment" : " Variables for dealing with multiple pointers",
    "links" : [ ]
  }, {
    "name" : "mOldPointerX",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOldPointerY",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mKeyBackground",
    "type" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "REPEAT_INTERVAL",
    "type" : "int",
    "comment" : " ~20 keys per second",
    "links" : [ ]
  }, {
    "name" : "REPEAT_START_DELAY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LONGPRESS_TIMEOUT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_NEARBY_KEYS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDistances",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLastSentIndex",
    "type" : "int",
    "comment" : " For multi-tap",
    "links" : [ ]
  }, {
    "name" : "mTapCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLastTapTime",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInMultiTap",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MULTITAP_INTERVAL",
    "type" : "int",
    "comment" : " milliseconds",
    "links" : [ ]
  }, {
    "name" : "mPreviewLabel",
    "type" : "StringBuilder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDrawPending",
    "type" : "boolean",
    "comment" : " Whether the keyboard bitmap needs to be redrawn before it's blitted. *",
    "links" : [ ]
  }, {
    "name" : "mDirtyRect",
    "type" : "Rect",
    "comment" : " The dirty region in the keyboard bitmap ",
    "links" : [ ]
  }, {
    "name" : "mBuffer",
    "type" : "Bitmap",
    "comment" : " The keyboard bitmap for faster updates ",
    "links" : [ ]
  }, {
    "name" : "mKeyboardChanged",
    "type" : "boolean",
    "comment" : " Notes if the keyboard just changed, so that we could possibly reallocate the mBuffer. ",
    "links" : [ ]
  }, {
    "name" : "mCanvas",
    "type" : "Canvas",
    "comment" : " The canvas for the above mutable keyboard bitmap ",
    "links" : [ ]
  }, {
    "name" : "mAccessibilityManager",
    "type" : "AccessibilityManager",
    "comment" : " The accessibility manager for accessibility support ",
    "links" : [ ]
  }, {
    "name" : "mAudioManager",
    "type" : "AudioManager",
    "comment" : " The audio manager for accessibility support ",
    "links" : [ ]
  }, {
    "name" : "mHeadsetRequiredToHearPasswordsAnnounced",
    "type" : "boolean",
    "comment" : " Whether the requirement of a headset to hear passwords if accessibility is enabled is announced. ",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected void onAttachedToWindow()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void initGestureDetector()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setOnKeyboardActionListener(OnKeyboardActionListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected OnKeyboardActionListener getOnKeyboardActionListener()",
    "returnType" : "OnKeyboardActionListener",
    "comment" : "\n     * Returns the {@link OnKeyboardActionListener} object.\n     * @return the listener attached to this keyboard\n     ",
    "links" : [ "OnKeyboardActionListener" ]
  }, {
    "name" : "public void setKeyboard(Keyboard keyboard)",
    "returnType" : "void",
    "comment" : "\n     * Attaches a keyboard to this view. The keyboard can be switched at any time and the\n     * view will re-layout itself to accommodate the keyboard.\n     * @see Keyboard\n     * @see #getKeyboard()\n     * @param keyboard the keyboard to display in this view\n     ",
    "links" : [ ]
  }, {
    "name" : "public Keyboard getKeyboard()",
    "returnType" : "Keyboard",
    "comment" : "\n     * Returns the current keyboard being displayed by this view.\n     * @return the currently attached keyboard\n     * @see #setKeyboard(Keyboard)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean setShifted(boolean shifted)",
    "returnType" : "boolean",
    "comment" : "\n     * Sets the state of the shift key of the keyboard, if any.\n     * @param shifted whether or not to enable the state of the shift key\n     * @return true if the shift key state changed, false if there was no change\n     * @see KeyboardView#isShifted()\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isShifted()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the state of the shift key of the keyboard, if any.\n     * @return true if the shift is in a pressed state, false otherwise. If there is\n     * no shift key on the keyboard or there is no keyboard attached, it returns false.\n     * @see KeyboardView#setShifted(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPreviewEnabled(boolean previewEnabled)",
    "returnType" : "void",
    "comment" : "\n     * Enables or disables the key feedback popup. This is a popup that shows a magnified\n     * version of the depressed key. By default the preview is enabled.\n     * @param previewEnabled whether or not to enable the key feedback popup\n     * @see #isPreviewEnabled()\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isPreviewEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the enabled state of the key feedback popup.\n     * @return whether or not the key feedback popup is enabled\n     * @see #setPreviewEnabled(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setVerticalCorrection(int verticalOffset)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setPopupParent(View v)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setPopupOffset(int x, int y)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setProximityCorrectionEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * When enabled, calls to {@link OnKeyboardActionListener#onKey} will include key\n     * codes for adjacent keys.  When disabled, only the primary key code will be\n     * reported.\n     * @param enabled whether or not the proximity correction is enabled\n     ",
    "links" : [ "OnKeyboardActionListener#onKey" ]
  }, {
    "name" : "public boolean isProximityCorrectionEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if proximity correction is enabled.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onClick(View v)",
    "returnType" : "void",
    "comment" : "\n     * Popup keyboard close button clicked.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private CharSequence adjustCase(CharSequence label)",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onMeasure(int widthMeasureSpec, int heightMeasureSpec)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void computeProximityThreshold(Keyboard keyboard)",
    "returnType" : "void",
    "comment" : "\n     * Compute the average distance between adjacent keys (horizontally and vertically)\n     * and square it to get the proximity threshold. We use a square here and in computing\n     * the touch distance from a key's center to avoid taking a square root.\n     * @param keyboard\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onSizeChanged(int w, int h, int oldw, int oldh)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onDraw(Canvas canvas)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onBufferDraw()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getKeyIndices(int x, int y, int[] allKeys)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void detectAndSendKey(int index, int x, int y, long eventTime)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private CharSequence getPreviewText(Key key)",
    "returnType" : "CharSequence",
    "comment" : "\n     * Handle multi-tap keys by producing the key label for the current multi-tap state.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void showPreview(int keyIndex)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void showKey(final int keyIndex)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void sendAccessibilityEventForUnicodeCharacter(int eventType, int code)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void invalidateAllKeys()",
    "returnType" : "void",
    "comment" : "\n     * Requests a redraw of the entire keyboard. Calling {@link #invalidate} is not sufficient\n     * because the keyboard renders the keys to an off-screen buffer and an invalidate() only\n     * draws the cached buffer.\n     * @see #invalidateKey(int)\n     ",
    "links" : [ "#invalidate" ]
  }, {
    "name" : "public void invalidateKey(int keyIndex)",
    "returnType" : "void",
    "comment" : "\n     * Invalidates a key so that it will be redrawn on the next repaint. Use this method if only\n     * one key is changing it's content. Any changes that affect the position or size of the key\n     * may not be honored.\n     * @param keyIndex the index of the key in the attached {@link Keyboard}.\n     * @see #invalidateAllKeys\n     ",
    "links" : [ "Keyboard" ]
  }, {
    "name" : "private boolean openPopupIfRequired(MotionEvent me)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected boolean onLongPress(Key popupKey)",
    "returnType" : "boolean",
    "comment" : "\n     * Called when a key is long pressed. By default this will open any popup keyboard associated\n     * with this key through the attributes popupLayout and popupCharacters.\n     * @param popupKey the key that was long pressed\n     * @return true if the long press is handled, false otherwise. Subclasses should call the\n     * method on the base class if the subclass doesn't wish to handle the call.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean onHoverEvent(MotionEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean onTouchEvent(MotionEvent me)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean onModifiedTouchEvent(MotionEvent me, boolean possiblePoly)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean repeatKey()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void swipeRight()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void swipeLeft()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void swipeUp()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void swipeDown()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void closing()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void removeMessages()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onDetachedFromWindow()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void dismissPopupKeyboard()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean handleBack()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void resetMultiTap()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void checkMultiTap(long eventTime, int keyIndex)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "DEBUG", "NOT_A_KEY", "KEY_DELETE", "LONG_PRESSABLE_STATE_SET", "mKeyboard", "mCurrentKeyIndex", "mLabelTextSize", "mKeyTextSize", "mKeyTextColor", "mShadowRadius", "mShadowColor", "mBackgroundDimAmount", "mPreviewText", "mPreviewPopup", "mPreviewTextSizeLarge", "mPreviewOffset", "mPreviewHeight", "mCoordinates", "mPopupKeyboard", "mMiniKeyboardContainer", "mMiniKeyboard", "mMiniKeyboardOnScreen", "mPopupParent", "mMiniKeyboardOffsetX", "mMiniKeyboardOffsetY", "mMiniKeyboardCache", "mKeys", "mKeyboardActionListener", "MSG_SHOW_PREVIEW", "MSG_REMOVE_PREVIEW", "MSG_REPEAT", "MSG_LONGPRESS", "DELAY_BEFORE_PREVIEW", "DELAY_AFTER_PREVIEW", "DEBOUNCE_TIME", "mVerticalCorrection", "mProximityThreshold", "mPreviewCentered", "mShowPreview", "mShowTouchPoints", "mPopupPreviewX", "mPopupPreviewY", "mLastX", "mLastY", "mStartX", "mStartY", "mProximityCorrectOn", "mPaint", "mPadding", "mDownTime", "mLastMoveTime", "mLastKey", "mLastCodeX", "mLastCodeY", "mCurrentKey", "mDownKey", "mLastKeyTime", "mCurrentKeyTime", "mKeyIndices", "mGestureDetector", "mPopupX", "mPopupY", "mRepeatKeyIndex", "mPopupLayout", "mAbortKey", "mInvalidatedKey", "mClipRegion", "mPossiblePoly", "mSwipeTracker", "mSwipeThreshold", "mDisambiguateSwipe", "mOldPointerCount", "mOldPointerX", "mOldPointerY", "mKeyBackground", "REPEAT_INTERVAL", "REPEAT_START_DELAY", "LONGPRESS_TIMEOUT", "MAX_NEARBY_KEYS", "mDistances", "mLastSentIndex", "mTapCount", "mLastTapTime", "mInMultiTap", "MULTITAP_INTERVAL", "mPreviewLabel", "mDrawPending", "mDirtyRect", "mBuffer", "mKeyboardChanged", "mCanvas", "mAccessibilityManager", "mAudioManager", "mHeadsetRequiredToHearPasswordsAnnounced", "mHandler" ],
  "methodNames" : [ "protected void onAttachedToWindow()", "private void initGestureDetector()", "public void setOnKeyboardActionListener(OnKeyboardActionListener listener)", "protected OnKeyboardActionListener getOnKeyboardActionListener()", "public void setKeyboard(Keyboard keyboard)", "public Keyboard getKeyboard()", "public boolean setShifted(boolean shifted)", "public boolean isShifted()", "public void setPreviewEnabled(boolean previewEnabled)", "public boolean isPreviewEnabled()", "public void setVerticalCorrection(int verticalOffset)", "public void setPopupParent(View v)", "public void setPopupOffset(int x, int y)", "public void setProximityCorrectionEnabled(boolean enabled)", "public boolean isProximityCorrectionEnabled()", "public void onClick(View v)", "private CharSequence adjustCase(CharSequence label)", "public void onMeasure(int widthMeasureSpec, int heightMeasureSpec)", "private void computeProximityThreshold(Keyboard keyboard)", "public void onSizeChanged(int w, int h, int oldw, int oldh)", "public void onDraw(Canvas canvas)", "private void onBufferDraw()", "private int getKeyIndices(int x, int y, int[] allKeys)", "private void detectAndSendKey(int index, int x, int y, long eventTime)", "private CharSequence getPreviewText(Key key)", "private void showPreview(int keyIndex)", "private void showKey(final int keyIndex)", "private void sendAccessibilityEventForUnicodeCharacter(int eventType, int code)", "public void invalidateAllKeys()", "public void invalidateKey(int keyIndex)", "private boolean openPopupIfRequired(MotionEvent me)", "protected boolean onLongPress(Key popupKey)", "public boolean onHoverEvent(MotionEvent event)", "public boolean onTouchEvent(MotionEvent me)", "private boolean onModifiedTouchEvent(MotionEvent me, boolean possiblePoly)", "private boolean repeatKey()", "protected void swipeRight()", "protected void swipeLeft()", "protected void swipeUp()", "protected void swipeDown()", "public void closing()", "private void removeMessages()", "public void onDetachedFromWindow()", "private void dismissPopupKeyboard()", "public boolean handleBack()", "private void resetMultiTap()", "private void checkMultiTap(long eventTime, int keyIndex)" ]
}