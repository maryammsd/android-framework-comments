{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/concurrent/RecursiveTask.java",
  "packageName" : "java.util.concurrent",
  "className" : "RecursiveTask",
  "comment" : "\n * A recursive result-bearing {@link ForkJoinTask}.\n *\n * <p>For a classic example, here is a task computing Fibonacci numbers:\n *\n * <pre> {@code\n * class Fibonacci extends RecursiveTask<Integer> {\n *   final int n;\n *   Fibonacci(int n) { this.n = n; }\n *   protected Integer compute() {\n *     if (n <= 1)\n *       return n;\n *     Fibonacci f1 = new Fibonacci(n - 1);\n *     f1.fork();\n *     Fibonacci f2 = new Fibonacci(n - 2);\n *     return f2.compute() + f1.join();\n *   }\n * }}</pre>\n *\n * However, besides being a dumb way to compute Fibonacci functions\n * (there is a simple fast linear algorithm that you'd use in\n * practice), this is likely to perform poorly because the smallest\n * subtasks are too small to be worthwhile splitting up. Instead, as\n * is the case for nearly all fork/join applications, you'd pick some\n * minimum granularity size (for example 10 here) for which you always\n * sequentially solve rather than subdividing.\n *\n * @since 1.7\n * @author Doug Lea\n ",
  "links" : [ "java.util.concurrent.ForkJoinTask" ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "result",
    "type" : "V",
    "comment" : "\n     * The result of the computation.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected abstract V compute()",
    "returnType" : "V",
    "comment" : "\n     * The main computation performed by this task.\n     * @return the result of the computation\n     ",
    "links" : [ ]
  }, {
    "name" : "public final V getRawResult()",
    "returnType" : "V",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected final void setRawResult(V value)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected final boolean exec()",
    "returnType" : "boolean",
    "comment" : "\n     * Implements execution conventions for RecursiveTask.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "protected abstract V compute()", "public final V getRawResult()", "protected final void setRawResult(V value)", "protected final boolean exec()" ],
  "variableNames" : [ "serialVersionUID", "result" ]
}