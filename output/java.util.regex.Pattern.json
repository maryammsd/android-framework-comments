{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/regex/Pattern.java",
  "packageName" : "java.util.regex",
  "className" : "Pattern",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "UNIX_LINES",
    "type" : "int",
    "comment" : "\n     * Enables Unix lines mode.\n     *\n     * <p> In this mode, only the {@code '\\n'} line terminator is recognized\n     * in the behavior of {@code .}, {@code ^}, and {@code $}.\n     *\n     * <p> Unix lines mode can also be enabled via the embedded flag\n     * expression&nbsp;{@code (?d)}.\n     ",
    "links" : [ ]
  }, {
    "name" : "CASE_INSENSITIVE",
    "type" : "int",
    "comment" : "\n     * Enables case-insensitive matching.\n     *\n     * <p> Case-insensitive matching is Unicode-aware on Android.\n     *\n     * <p> Case-insensitive matching can also be enabled via the embedded flag\n     * expression&nbsp;{@code (?i)}.\n     *\n     * <p> Specifying this flag may impose a slight performance penalty.  </p>\n     ",
    "links" : [ ]
  }, {
    "name" : "COMMENTS",
    "type" : "int",
    "comment" : "\n     * Permits whitespace and comments in pattern.\n     *\n     * <p> In this mode, whitespace is ignored, and embedded comments starting\n     * with {@code #} are ignored until the end of a line.\n     *\n     * <p> Comments mode can also be enabled via the embedded flag\n     * expression&nbsp;{@code (?x)}.\n     ",
    "links" : [ ]
  }, {
    "name" : "MULTILINE",
    "type" : "int",
    "comment" : "\n     * Enables multiline mode.\n     *\n     * <p> In multiline mode the expressions {@code ^} and {@code $} match\n     * just after or just before, respectively, a line terminator or the end of\n     * the input sequence.  By default these expressions only match at the\n     * beginning and the end of the entire input sequence.\n     *\n     * <p> Multiline mode can also be enabled via the embedded flag\n     * expression&nbsp;{@code (?m)}.  </p>\n     ",
    "links" : [ ]
  }, {
    "name" : "LITERAL",
    "type" : "int",
    "comment" : "\n     * Enables literal parsing of the pattern.\n     *\n     * <p> When this flag is specified then the input string that specifies\n     * the pattern is treated as a sequence of literal characters.\n     * Metacharacters or escape sequences in the input sequence will be\n     * given no special meaning.\n     *\n     * <p>The flags CASE_INSENSITIVE and UNICODE_CASE retain their impact on\n     * matching when used in conjunction with this flag. The other flags\n     * become superfluous.\n     *\n     * <p> There is no embedded flag character for enabling literal parsing.\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "DOTALL",
    "type" : "int",
    "comment" : "\n     * Enables dotall mode.\n     *\n     * <p> In dotall mode, the expression {@code .} matches any character,\n     * including a line terminator.  By default this expression does not match\n     * line terminators.\n     *\n     * <p> Dotall mode can also be enabled via the embedded flag\n     * expression&nbsp;{@code (?s)}.  (The {@code s} is a mnemonic for\n     * \"single-line\" mode, which is what this is called in Perl.)  </p>\n     ",
    "links" : [ ]
  }, {
    "name" : "UNICODE_CASE",
    "type" : "int",
    "comment" : "\n     * Enables Unicode-aware case folding. This flag is ignoredon Android.\n     * When {@link #CASE_INSENSITIVE} flag is provided, case-insensitive\n     * matching is always done in a manner consistent with the Unicode Standard.\n     *\n     * <p> The embedded flag &nbsp;{@code (?u)} is ignored.\n     *\n     * <p> Specifying this flag may impose a performance penalty.  </p>\n     ",
    "links" : [ "#CASE_INSENSITIVE" ]
  }, {
    "name" : "CANON_EQ",
    "type" : "int",
    "comment" : "\n     * This flag is not supported on Android.\n     ",
    "links" : [ ]
  }, {
    "name" : "UNICODE_CHARACTER_CLASS",
    "type" : "int",
    "comment" : "\n     * This flag is not supported on Android, and Unicode character classes are always\n     * used.\n     * <p>\n     * See the Unicode version of\n     * <i>Predefined character classes</i> and <i>POSIX character classes</i>\n     * are in conformance with\n     * <a href=\"http://www.unicode.org/reports/tr18/\"><i>Unicode Technical\n     * Standard #18: Unicode Regular Expressions</i></a>\n     * <i>Annex C: Compatibility Properties</i>.\n     * <p>\n     * @since 1.7\n     ",
    "links" : [ ]
  }, {
    "name" : "ALL_FLAGS",
    "type" : "int",
    "comment" : "\n     * Contains all possible flags for compile(regex, flags).\n     ",
    "links" : [ ]
  }, {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : " use serialVersionUID from Merlin b59 for interoperability ",
    "links" : [ ]
  }, {
    "name" : "pattern",
    "type" : "String",
    "comment" : " private String pattern;",
    "links" : [ ]
  }, {
    "name" : "flags",
    "type" : "int",
    "comment" : " private int flags;",
    "links" : [ ]
  }, {
    "name" : "nativePattern",
    "type" : "PatternNative",
    "comment" : " package ",
    "links" : [ ]
  }, {
    "name" : "FASTSPLIT_METACHARACTERS",
    "type" : "String",
    "comment" : " BEGIN Android-added: fastSplit() to speed up simple cases.",
    "links" : [ ]
  }, {
    "name" : "SPLIT_AS_STREAM_RETURNS_SINGLE_EMPTY_STRING",
    "type" : "long",
    "comment" : "\n     * Since Android 14, {@link Pattern#splitAsStream(CharSequence)} return a stream of a single\n     * empty String as described in the API documentation. Previously, given an empty string input,\n     * the method returns an empty stream.\n     *\n     * This flag is enabled for apps targeting Android 14+.\n     *\n     * @hide\n     ",
    "links" : [ "java.util.regex.Pattern#splitAsStream(CharSequence)" ]
  } ],
  "methods" : [ {
    "name" : "public static Pattern compile(String regex)",
    "returnType" : "Pattern",
    "comment" : "\n     * Compiles the given regular expression into a pattern.\n     *\n     * @param  regex\n     *         The expression to be compiled\n     * @return the given regular expression compiled into a pattern\n     * @throws  PatternSyntaxException\n     *          If the expression's syntax is invalid\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Pattern compile(String regex, int flags)",
    "returnType" : "Pattern",
    "comment" : "\n     * Compiles the given regular expression into a pattern with the given\n     * flags.\n     *\n     * @param  regex\n     *         The expression to be compiled\n     *\n     * @param  flags\n     *         Match flags, a bit mask that may include\n     *         {@link #CASE_INSENSITIVE}, {@link #MULTILINE}, {@link #DOTALL},\n     *         {@link #UNICODE_CASE}, {@link #UNIX_LINES}, {@link #LITERAL},\n     *         and {@link #COMMENTS}\n     *\n     * @return the given regular expression compiled into a pattern with the given flags\n     * @throws  IllegalArgumentException\n     *          If bit values other than those corresponding to the defined\n     *          match flags are set in {@code flags}\n     *\n     * @throws  PatternSyntaxException\n     *          If the expression's syntax is invalid\n     ",
    "links" : [ "#UNIX_LINES", "#MULTILINE", "#LITERAL", "#CASE_INSENSITIVE", "#UNICODE_CASE", "#DOTALL", "#COMMENTS" ]
  }, {
    "name" : "public String pattern()",
    "returnType" : "String",
    "comment" : "\n     * Returns the regular expression from which this pattern was compiled.\n     *\n     * @return  The source of this pattern\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * <p>Returns the string representation of this pattern. This\n     * is the regular expression from which this pattern was\n     * compiled.</p>\n     *\n     * @return  The string representation of this pattern\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public Matcher matcher(CharSequence input)",
    "returnType" : "Matcher",
    "comment" : "\n     * Creates a matcher that will match the given input against this pattern.\n     *\n     * @param  input\n     *         The character sequence to be matched\n     *\n     * @return  A new matcher for this pattern\n     ",
    "links" : [ ]
  }, {
    "name" : "public int flags()",
    "returnType" : "int",
    "comment" : "\n     * Returns this pattern's match flags.\n     *\n     * @return  The match flags specified when this pattern was compiled\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean matches(String regex, CharSequence input)",
    "returnType" : "boolean",
    "comment" : "\n     * Compiles the given regular expression and attempts to match the given\n     * input against it.\n     *\n     * <p> An invocation of this convenience method of the form\n     *\n     * <blockquote><pre>\n     * Pattern.matches(regex, input);</pre></blockquote>\n     *\n     * behaves in exactly the same way as the expression\n     *\n     * <blockquote><pre>\n     * Pattern.compile(regex).matcher(input).matches()</pre></blockquote>\n     *\n     * <p> If a pattern is to be used multiple times, compiling it once and reusing\n     * it will be more efficient than invoking this method each time.  </p>\n     *\n     * @param  regex\n     *         The expression to be compiled\n     *\n     * @param  input\n     *         The character sequence to be matched\n     * @return whether or not the regular expression matches on the input\n     * @throws  PatternSyntaxException\n     *          If the expression's syntax is invalid\n     ",
    "links" : [ ]
  }, {
    "name" : "public String[] split(CharSequence input, int limit)",
    "returnType" : "String[]",
    "comment" : "\n     * Splits the given input sequence around matches of this pattern.\n     *\n     * <p> The array returned by this method contains each substring of the\n     * input sequence that is terminated by another subsequence that matches\n     * this pattern or is terminated by the end of the input sequence.  The\n     * substrings in the array are in the order in which they occur in the\n     * input. If this pattern does not match any subsequence of the input then\n     * the resulting array has just one element, namely the input sequence in\n     * string form.\n     *\n     * <p> When there is a positive-width match at the beginning of the input\n     * sequence then an empty leading substring is included at the beginning\n     * of the resulting array. A zero-width match at the beginning however\n     * can only produce such an empty leading substring for apps running on or\n     * targeting API versions <= 28.\n     *\n     * <p> The {@code limit} parameter controls the number of times the\n     * pattern is applied and therefore affects the length of the resulting\n     * array.\n     * <ul>\n     *    <li><p>\n     *    If the <i>limit</i> is positive then the pattern will be applied\n     *    at most <i>limit</i>&nbsp;-&nbsp;1 times, the array's length will be\n     *    no greater than <i>limit</i>, and the array's last entry will contain\n     *    all input beyond the last matched delimiter.</p></li>\n     *\n     *    <li><p>\n     *    If the <i>limit</i> is zero then the pattern will be applied as\n     *    many times as possible, the array can have any length, and trailing\n     *    empty strings will be discarded.</p></li>\n     *\n     *    <li><p>\n     *    If the <i>limit</i> is negative then the pattern will be applied\n     *    as many times as possible and the array can have any length.</p></li>\n     * </ul>\n     *\n     * <p> The input {@code \"boo:and:foo\"}, for example, yields the following\n     * results with these parameters:\n     *\n     * <table class=\"plain\" style=\"margin-left:2em;\">\n     * <caption style=\"display:none\">Split example showing regex, limit, and result</caption>\n     * <thead>\n     * <tr>\n     *     <th scope=\"col\">Regex</th>\n     *     <th scope=\"col\">Limit</th>\n     *     <th scope=\"col\">Result</th>\n     * </tr>\n     * </thead>\n     * <tbody>\n     * <tr><th scope=\"row\" rowspan=\"3\" style=\"font-weight:normal\">:</th>\n     *     <th scope=\"row\" style=\"font-weight:normal; text-align:right; padding-right:1em\">2</th>\n     *     <td>{@code { \"boo\", \"and:foo\" }}</td></tr>\n     * <tr><!-- : -->\n     *     <th scope=\"row\" style=\"font-weight:normal; text-align:right; padding-right:1em\">5</th>\n     *     <td>{@code { \"boo\", \"and\", \"foo\" }}</td></tr>\n     * <tr><!-- : -->\n     *     <th scope=\"row\" style=\"font-weight:normal; text-align:right; padding-right:1em\">-2</th>\n     *     <td>{@code { \"boo\", \"and\", \"foo\" }}</td></tr>\n     * <tr><th scope=\"row\" rowspan=\"3\" style=\"font-weight:normal\">o</th>\n     *     <th scope=\"row\" style=\"font-weight:normal; text-align:right; padding-right:1em\">5</th>\n     *     <td>{@code { \"b\", \"\", \":and:f\", \"\", \"\" }}</td></tr>\n     * <tr><!-- o -->\n     *     <th scope=\"row\" style=\"font-weight:normal; text-align:right; padding-right:1em\">-2</th>\n     *     <td>{@code { \"b\", \"\", \":and:f\", \"\", \"\" }}</td></tr>\n     * <tr><!-- o -->\n     *     <th scope=\"row\" style=\"font-weight:normal; text-align:right; padding-right:1em\">0</th>\n     *     <td>{@code { \"b\", \"\", \":and:f\" }}</td></tr>\n     * </tbody>\n     * </table>\n     *\n     * @param  input\n     *         The character sequence to be split\n     *\n     * @param  limit\n     *         The result threshold, as described above\n     *\n     * @return  The array of strings computed by splitting the input\n     *          around matches of this pattern\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String[] fastSplit(String re, String input, int limit)",
    "returnType" : "String[]",
    "comment" : "\n     * Returns a result equivalent to {@code s.split(separator, limit)} if it's able\n     * to compute it more cheaply than native impl, or null if the caller should fall back to\n     * using native impl.\n     *\n     *  fastpath will work  if the regex is a\n     *   (1)one-char String and this character is not one of the\n     *      RegEx's meta characters \".$|()[{^?*+\\\\\", or\n     *   (2)two-char String and the first char is the backslash and\n     *      the second is one of regEx's meta characters \".$|()[{^?*+\\\\\".\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String[] split(CharSequence input)",
    "returnType" : "String[]",
    "comment" : "\n     * Splits the given input sequence around matches of this pattern.\n     *\n     * <p> This method works as if by invoking the two-argument {@link\n     * #split(java.lang.CharSequence, int) split} method with the given input\n     * sequence and a limit argument of zero.  Trailing empty strings are\n     * therefore not included in the resulting array. </p>\n     *\n     * <p> The input {@code \"boo:and:foo\"}, for example, yields the following\n     * results with these expressions:\n     *\n     * <table class=\"plain\" style=\"margin-left:2em\">\n     * <caption style=\"display:none\">Split examples showing regex and result</caption>\n     * <thead>\n     * <tr>\n     *  <th scope=\"col\">Regex</th>\n     *  <th scope=\"col\">Result</th>\n     * </tr>\n     * </thead>\n     * <tbody>\n     * <tr><th scope=\"row\" style=\"text-weight:normal\">:</th>\n     *     <td>{@code { \"boo\", \"and\", \"foo\" }}</td></tr>\n     * <tr><th scope=\"row\" style=\"text-weight:normal\">o</th>\n     *     <td>{@code { \"b\", \"\", \":and:f\" }}</td></tr>\n     * </tbody>\n     * </table>\n     *\n     *\n     * @param  input\n     *         The character sequence to be split\n     *\n     * @return  The array of strings computed by splitting the input\n     *          around matches of this pattern\n     ",
    "links" : [ "#split(java.lang.CharSequence" ]
  }, {
    "name" : "public static String quote(String s)",
    "returnType" : "String",
    "comment" : "\n     * Returns a literal pattern {@code String} for the specified\n     * {@code String}.\n     *\n     * <p>This method produces a {@code String} that can be used to\n     * create a {@code Pattern} that would match the string\n     * {@code s} as if it were a literal pattern.</p> Metacharacters\n     * or escape sequences in the input sequence will be given no special\n     * meaning.\n     *\n     * @param  s The string to be literalized\n     * @return  A literal string replacement\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException",
    "returnType" : "void",
    "comment" : "\n     * Recompile the Pattern instance from a stream.  The original pattern\n     * string is read in and the object tree is recompiled from it.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void compile() throws PatternSyntaxException",
    "returnType" : "void",
    "comment" : " Use native implementation instead of > 3000 lines of helper methods.",
    "links" : [ ]
  }, {
    "name" : "public Predicate<String> asPredicate()",
    "returnType" : "Predicate<String>",
    "comment" : "\n     * Creates a predicate that tests if this pattern is found in a given input\n     * string.\n     *\n     * @apiNote\n     * This method creates a predicate that behaves as if it creates a matcher\n     * from the input sequence and then calls {@code find}, for example a\n     * predicate of the form:\n     * <pre>{@code\n     *   s -> matcher(s).find();\n     * }</pre>\n     *\n     * @return  The predicate which can be used for finding a match on a\n     *          subsequence of a string\n     * @since   1.8\n     * @see     Matcher#find\n     ",
    "links" : [ ]
  }, {
    "name" : "public Predicate<String> asMatchPredicate()",
    "returnType" : "Predicate<String>",
    "comment" : "\n     * Creates a predicate that tests if this pattern matches a given input string.\n     *\n     * @apiNote\n     * This method creates a predicate that behaves as if it creates a matcher\n     * from the input sequence and then calls {@code matches}, for example a\n     * predicate of the form:\n     * <pre>{@code\n     *   s -> matcher(s).matches();\n     * }</pre>\n     *\n     * @return  The predicate which can be used for matching an input string\n     *          against this pattern.\n     * @since   11\n     * @see     Matcher#matches\n     ",
    "links" : [ ]
  }, {
    "name" : "public Stream<String> splitAsStream(final CharSequence input)",
    "returnType" : "Stream<String>",
    "comment" : "\n     * Creates a stream from the given input sequence around matches of this\n     * pattern.\n     *\n     * <p> The stream returned by this method contains each substring of the\n     * input sequence that is terminated by another subsequence that matches\n     * this pattern or is terminated by the end of the input sequence.  The\n     * substrings in the stream are in the order in which they occur in the\n     * input. Trailing empty strings will be discarded and not encountered in\n     * the stream.\n     *\n     * <p> If this pattern does not match any subsequence of the input then\n     * the resulting stream has just one element, namely the input sequence in\n     * string form.\n     *\n     * <p> When there is a positive-width match at the beginning of the input\n     * sequence then an empty leading substring is included at the beginning\n     * of the stream. A zero-width match at the beginning however never produces\n     * such empty leading substring.\n     *\n     * <p> If the input sequence is mutable, it must remain constant during the\n     * execution of the terminal stream operation.  Otherwise, the result of the\n     * terminal stream operation is undefined.\n     *\n     * @param   input\n     *          The character sequence to be split\n     *\n     * @return  The stream of strings computed by splitting the input\n     *          around matches of this pattern\n     * @see     #split(CharSequence)\n     * @since   1.8\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static Pattern compile(String regex)", "public static Pattern compile(String regex, int flags)", "public String pattern()", "public String toString()", "public Matcher matcher(CharSequence input)", "public int flags()", "public static boolean matches(String regex, CharSequence input)", "public String[] split(CharSequence input, int limit)", "public static String[] fastSplit(String re, String input, int limit)", "public String[] split(CharSequence input)", "public static String quote(String s)", "private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException", "private void compile() throws PatternSyntaxException", "public Predicate<String> asPredicate()", "public Predicate<String> asMatchPredicate()", "public Stream<String> splitAsStream(final CharSequence input)" ],
  "variableNames" : [ "UNIX_LINES", "CASE_INSENSITIVE", "COMMENTS", "MULTILINE", "LITERAL", "DOTALL", "UNICODE_CASE", "CANON_EQ", "UNICODE_CHARACTER_CLASS", "ALL_FLAGS", "serialVersionUID", "pattern", "flags", "nativePattern", "FASTSPLIT_METACHARACTERS", "SPLIT_AS_STREAM_RETURNS_SINGLE_EMPTY_STRING" ]
}