{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/nio/file/SecureDirectoryStream.java",
  "packageName" : "java.nio.file",
  "className" : "SecureDirectoryStream",
  "comment" : "",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " SecureDirectoryStream<T> newDirectoryStream(T path, LinkOption... options) throws IOException",
    "returnType" : "SecureDirectoryStream<T>",
    "comment" : "\n     * Opens the directory identified by the given path, returning a {@code\n     * SecureDirectoryStream} to iterate over the entries in the directory.\n     *\n     * <p> This method works in exactly the manner specified by the {@link\n     * Files#newDirectoryStream(Path) newDirectoryStream} method for the case that\n     * the {@code path} parameter is an {@link Path#isAbsolute absolute} path.\n     * When the parameter is a relative path then the directory to open is\n     * relative to this open directory. The {@link\n     * LinkOption#NOFOLLOW_LINKS NOFOLLOW_LINKS} option may be used to\n     * ensure that this method fails if the file is a symbolic link.\n     *\n     * <p> The new directory stream, once created, is not dependent upon the\n     * directory stream used to create it. Closing this directory stream has no\n     * effect upon newly created directory stream.\n     *\n     * @param   path\n     *          the path to the directory to open\n     * @param   options\n     *          options indicating how symbolic links are handled\n     *\n     * @return  a new and open {@code SecureDirectoryStream} object\n     *\n     * @throws  ClosedDirectoryStreamException\n     *          if the directory stream is closed\n     * @throws  NotDirectoryException\n     *          if the file could not otherwise be opened because it is not\n     *          a directory <i>(optional specific exception)</i>\n     * @throws  IOException\n     *          if an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager is\n     *          installed, the {@link SecurityManager#checkRead(String) checkRead}\n     *          method is invoked to check read access to the directory.\n     ",
    "links" : [ "#checkRead(String)", "java.nio.file.LinkOption#NOFOLLOW_LINKS", "java.nio.file.Files#newDirectoryStream(Path)", "java.nio.file.Path#isAbsolute" ]
  }, {
    "name" : " SeekableByteChannel newByteChannel(T path, Set<? extends OpenOption> options, FileAttribute<?>... attrs) throws IOException",
    "returnType" : "SeekableByteChannel",
    "comment" : "\n     * Opens or creates a file in this directory, returning a seekable byte\n     * channel to access the file.\n     *\n     * <p> This method works in exactly the manner specified by the {@link\n     * Files#newByteChannel Files.newByteChannel} method for the\n     * case that the {@code path} parameter is an {@link Path#isAbsolute absolute}\n     * path. When the parameter is a relative path then the file to open or\n     * create is relative to this open directory. In addition to the options\n     * defined by the {@code Files.newByteChannel} method, the {@link\n     * LinkOption#NOFOLLOW_LINKS NOFOLLOW_LINKS} option may be used to\n     * ensure that this method fails if the file is a symbolic link.\n     *\n     * <p> The channel, once created, is not dependent upon the directory stream\n     * used to create it. Closing this directory stream has no effect upon the\n     * channel.\n     *\n     * @param   path\n     *          the path of the file to open or create\n     * @param   options\n     *          options specifying how the file is opened\n     * @param   attrs\n     *          an optional list of attributes to set atomically when creating\n     *          the file\n     *\n     * @return  the seekable byte channel\n     *\n     * @throws  ClosedDirectoryStreamException\n     *          if the directory stream is closed\n     * @throws  IllegalArgumentException\n     *          if the set contains an invalid combination of options\n     * @throws  UnsupportedOperationException\n     *          if an unsupported open option is specified or the array contains\n     *          attributes that cannot be set atomically when creating the file\n     * @throws  FileAlreadyExistsException\n     *          if a file of that name already exists and the {@link\n     *          StandardOpenOption#CREATE_NEW CREATE_NEW} option is specified\n     *          <i>(optional specific exception)</i>\n     * @throws  IOException\n     *          if an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager is\n     *          installed, the {@link SecurityManager#checkRead(String) checkRead}\n     *          method is invoked to check read access to the path if the file\n     *          is opened for reading. The {@link SecurityManager#checkWrite(String)\n     *          checkWrite} method is invoked to check write access to the path\n     *          if the file is opened for writing.\n     ",
    "links" : [ "java.nio.file.Files#newByteChannel", "#checkRead(String)", "java.nio.file.LinkOption#NOFOLLOW_LINKS", "java.nio.file.StandardOpenOption#CREATE_NEW", "#checkWrite(String)", "java.nio.file.Path#isAbsolute" ]
  }, {
    "name" : " void deleteFile(T path) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Deletes a file.\n     *\n     * <p> Unlike the {@link Files#delete delete()} method, this method does\n     * not first examine the file to determine if the file is a directory.\n     * Whether a directory is deleted by this method is system dependent and\n     * therefore not specified. If the file is a symbolic link, then the link\n     * itself, not the final target of the link, is deleted. When the\n     * parameter is a relative path then the file to delete is relative to\n     * this open directory.\n     *\n     * @param   path\n     *          the path of the file to delete\n     *\n     * @throws  ClosedDirectoryStreamException\n     *          if the directory stream is closed\n     * @throws  NoSuchFileException\n     *          if the file does not exist <i>(optional specific exception)</i>\n     * @throws  IOException\n     *          if an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager is\n     *          installed, the {@link SecurityManager#checkDelete(String) checkDelete}\n     *          method is invoked to check delete access to the file\n     ",
    "links" : [ "#checkDelete(String)", "java.nio.file.Files#delete" ]
  }, {
    "name" : " void deleteDirectory(T path) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Deletes a directory.\n     *\n     * <p> Unlike the {@link Files#delete delete()} method, this method\n     * does not first examine the file to determine if the file is a directory.\n     * Whether non-directories are deleted by this method is system dependent and\n     * therefore not specified. When the parameter is a relative path then the\n     * directory to delete is relative to this open directory.\n     *\n     * @param   path\n     *          the path of the directory to delete\n     *\n     * @throws  ClosedDirectoryStreamException\n     *          if the directory stream is closed\n     * @throws  NoSuchFileException\n     *          if the directory does not exist <i>(optional specific exception)</i>\n     * @throws  DirectoryNotEmptyException\n     *          if the directory could not otherwise be deleted because it is\n     *          not empty <i>(optional specific exception)</i>\n     * @throws  IOException\n     *          if an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager is\n     *          installed, the {@link SecurityManager#checkDelete(String) checkDelete}\n     *          method is invoked to check delete access to the directory\n     ",
    "links" : [ "#checkDelete(String)", "java.nio.file.Files#delete" ]
  }, {
    "name" : " void move(T srcpath, SecureDirectoryStream<T> targetdir, T targetpath) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Move a file from this directory to another directory.\n     *\n     * <p> This method works in a similar manner to {@link Files#move move}\n     * method when the {@link StandardCopyOption#ATOMIC_MOVE ATOMIC_MOVE} option\n     * is specified. That is, this method moves a file as an atomic file system\n     * operation. If the {@code srcpath} parameter is an {@link Path#isAbsolute\n     * absolute} path then it locates the source file. If the parameter is a\n     * relative path then it is located relative to this open directory. If\n     * the {@code targetpath} parameter is absolute then it locates the target\n     * file (the {@code targetdir} parameter is ignored). If the parameter is\n     * a relative path it is located relative to the open directory identified\n     * by the {@code targetdir} parameter. In all cases, if the target file\n     * exists then it is implementation specific if it is replaced or this\n     * method fails.\n     *\n     * @param   srcpath\n     *          the name of the file to move\n     * @param   targetdir\n     *          the destination directory\n     * @param   targetpath\n     *          the name to give the file in the destination directory\n     *\n     * @throws  ClosedDirectoryStreamException\n     *          if this or the target directory stream is closed\n     * @throws  FileAlreadyExistsException\n     *          if the file already exists in the target directory and cannot\n     *          be replaced <i>(optional specific exception)</i>\n     * @throws  AtomicMoveNotSupportedException\n     *          if the file cannot be moved as an atomic file system operation\n     * @throws  IOException\n     *          if an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager is\n     *          installed, the {@link SecurityManager#checkWrite(String) checkWrite}\n     *          method is invoked to check write access to both the source and\n     *          target file.\n     ",
    "links" : [ "java.nio.file.Files#move", "java.nio.file.StandardCopyOption#ATOMIC_MOVE", "java.nio.file.Path#isAbsoluteabsolute", "#checkWrite(String)" ]
  }, {
    "name" : " V getFileAttributeView(Class<V> type)",
    "returnType" : "V",
    "comment" : "\n     * Returns a new file attribute view to access the file attributes of this\n     * directory.\n     *\n     * <p> The resulting file attribute view can be used to read or update the\n     * attributes of this (open) directory. The {@code type} parameter specifies\n     * the type of the attribute view and the method returns an instance of that\n     * type if supported. Invoking this method to obtain a {@link\n     * BasicFileAttributeView} always returns an instance of that class that is\n     * bound to this open directory.\n     *\n     * <p> The state of resulting file attribute view is intimately connected\n     * to this directory stream. Once the directory stream is {@link #close closed},\n     * then all methods to read or update attributes will throw {@link\n     * ClosedDirectoryStreamException ClosedDirectoryStreamException}.\n     *\n     * @param   <V>\n     *          The {@code FileAttributeView} type\n     * @param   type\n     *          the {@code Class} object corresponding to the file attribute view\n     *\n     * @return  a new file attribute view of the specified type bound to\n     *          this directory stream, or {@code null} if the attribute view\n     *          type is not available\n     ",
    "links" : [ "java.nio.file.BasicFileAttributeView", "#close", "java.nio.file.ClosedDirectoryStreamException" ]
  }, {
    "name" : " V getFileAttributeView(T path, Class<V> type, LinkOption... options)",
    "returnType" : "V",
    "comment" : "\n     * Returns a new file attribute view to access the file attributes of a file\n     * in this directory.\n     *\n     * <p> The resulting file attribute view can be used to read or update the\n     * attributes of file in this directory. The {@code type} parameter specifies\n     * the type of the attribute view and the method returns an instance of that\n     * type if supported. Invoking this method to obtain a {@link\n     * BasicFileAttributeView} always returns an instance of that class that is\n     * bound to the file in the directory.\n     *\n     * <p> The state of resulting file attribute view is intimately connected\n     * to this directory stream. Once the directory stream {@link #close closed},\n     * then all methods to read or update attributes will throw {@link\n     * ClosedDirectoryStreamException ClosedDirectoryStreamException}. The\n     * file is not required to exist at the time that the file attribute view\n     * is created but methods to read or update attributes of the file will\n     * fail when invoked and the file does not exist.\n     *\n     * @param   <V>\n     *          The {@code FileAttributeView} type\n     * @param   path\n     *          the path of the file\n     * @param   type\n     *          the {@code Class} object corresponding to the file attribute view\n     * @param   options\n     *          options indicating how symbolic links are handled\n     *\n     * @return  a new file attribute view of the specified type bound to a\n     *          this directory stream, or {@code null} if the attribute view\n     *          type is not available\n     *\n     ",
    "links" : [ "java.nio.file.BasicFileAttributeView", "#close", "java.nio.file.ClosedDirectoryStreamException" ]
  } ],
  "methodNames" : [ " SecureDirectoryStream<T> newDirectoryStream(T path, LinkOption... options) throws IOException", " SeekableByteChannel newByteChannel(T path, Set<? extends OpenOption> options, FileAttribute<?>... attrs) throws IOException", " void deleteFile(T path) throws IOException", " void deleteDirectory(T path) throws IOException", " void move(T srcpath, SecureDirectoryStream<T> targetdir, T targetpath) throws IOException", " V getFileAttributeView(Class<V> type)", " V getFileAttributeView(T path, Class<V> type, LinkOption... options)" ],
  "variableNames" : [ ]
}