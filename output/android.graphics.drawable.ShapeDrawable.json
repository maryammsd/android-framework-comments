{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/graphics/drawable/ShapeDrawable.java",
  "packageName" : "android.graphics.drawable",
  "className" : "ShapeDrawable",
  "comment" : "\n * A Drawable object that draws primitive shapes. A ShapeDrawable takes a\n * {@link android.graphics.drawable.shapes.Shape} object and manages its\n * presence on the screen. If no Shape is given, then the ShapeDrawable will\n * default to a {@link android.graphics.drawable.shapes.RectShape}.\n * <p>\n * This object can be defined in an XML file with the <code>&lt;shape></code>\n * element.\n * </p>\n * <div class=\"special reference\"> <h3>Developer Guides</h3>\n * <p>\n * For more information about how to use ShapeDrawable, read the <a\n * href=\"{@docRoot}guide/topics/graphics/2d-graphics.html#shape-drawable\">\n * Canvas and Drawables</a> document. For more information about defining a\n * ShapeDrawable in XML, read the\n * <a href=\"{@docRoot}guide/topics/resources/drawable-resource.html#Shape\">\n * Drawable Resources</a> document.\n * </p>\n * </div>\n *\n * @attr ref android.R.styleable#ShapeDrawablePadding_left\n * @attr ref android.R.styleable#ShapeDrawablePadding_top\n * @attr ref android.R.styleable#ShapeDrawablePadding_right\n * @attr ref android.R.styleable#ShapeDrawablePadding_bottom\n * @attr ref android.R.styleable#ShapeDrawable_color\n * @attr ref android.R.styleable#ShapeDrawable_width\n * @attr ref android.R.styleable#ShapeDrawable_height\n ",
  "links" : [ "android.graphics.drawable.shapes.Shape", "android.graphics.drawable.shapes.RectShape" ],
  "variables" : [ {
    "name" : "mShapeState",
    "type" : "ShapeState",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBlendModeColorFilter",
    "type" : "BlendModeColorFilter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMutated",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Shape getShape()",
    "returnType" : "Shape",
    "comment" : "\n     * Returns the Shape of this ShapeDrawable.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setShape(Shape s)",
    "returnType" : "void",
    "comment" : "\n     * Sets the Shape of this ShapeDrawable.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setShaderFactory(ShaderFactory fact)",
    "returnType" : "void",
    "comment" : "\n     * Sets a ShaderFactory to which requests for a\n     * {@link android.graphics.Shader} object will be made.\n     *\n     * @param fact an instance of your ShaderFactory implementation\n     ",
    "links" : [ "android.graphics.Shader" ]
  }, {
    "name" : "public ShaderFactory getShaderFactory()",
    "returnType" : "ShaderFactory",
    "comment" : "\n     * Returns the ShaderFactory used by this ShapeDrawable for requesting a\n     * {@link android.graphics.Shader}.\n     ",
    "links" : [ "android.graphics.Shader" ]
  }, {
    "name" : "public Paint getPaint()",
    "returnType" : "Paint",
    "comment" : "\n     * Returns the Paint used to draw the shape.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPadding(int left, int top, int right, int bottom)",
    "returnType" : "void",
    "comment" : "\n     * Sets padding for the shape.\n     *\n     * @param left padding for the left side (in pixels)\n     * @param top padding for the top (in pixels)\n     * @param right padding for the right side (in pixels)\n     * @param bottom padding for the bottom (in pixels)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPadding(Rect padding)",
    "returnType" : "void",
    "comment" : "\n     * Sets padding for this shape, defined by a Rect object. Define the padding\n     * in the Rect object as: left, top, right, bottom.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setIntrinsicWidth(int width)",
    "returnType" : "void",
    "comment" : "\n     * Sets the intrinsic (default) width for this shape.\n     *\n     * @param width the intrinsic width (in pixels)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setIntrinsicHeight(int height)",
    "returnType" : "void",
    "comment" : "\n     * Sets the intrinsic (default) height for this shape.\n     *\n     * @param height the intrinsic height (in pixels)\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getIntrinsicWidth()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getIntrinsicHeight()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean getPadding(Rect padding)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int modulateAlpha(int paintAlpha, int alpha)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onDraw(Shape shape, Canvas canvas, Paint paint)",
    "returnType" : "void",
    "comment" : "\n     * Called from the drawable's draw() method after the canvas has been set to\n     * draw the shape at (0,0). Subclasses can override for special effects such\n     * as multiple layers, stroking, etc.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void draw(Canvas canvas)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getChangingConfigurations()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setAlpha(int alpha)",
    "returnType" : "void",
    "comment" : "\n     * Set the alpha level for this drawable [0..255]. Note that this drawable\n     * also has a color in its paint, which has an alpha as well. These two\n     * values are automatically combined during drawing. Thus if the color's\n     * alpha is 75% (i.e. 192) and the drawable's alpha is 50% (i.e. 128), then\n     * the combined alpha that will be used during drawing will be 37.5% (i.e.\n     * 96).\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getAlpha()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setTintList(ColorStateList tint)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setTintBlendMode(@NonNull BlendMode blendMode)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setColorFilter(ColorFilter colorFilter)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setXfermode(@Nullable Xfermode mode)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getOpacity()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setDither(boolean dither)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onBoundsChange(Rect bounds)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected boolean onStateChange(int[] stateSet)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isStateful()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasFocusStateSpecified()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected boolean inflateTag(String name, Resources r, XmlPullParser parser, AttributeSet attrs)",
    "returnType" : "boolean",
    "comment" : "\n     * Subclasses override this to parse custom subelements. If you handle it,\n     * return true, else return <em>super.inflateTag(...)</em>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void inflate(Resources r, XmlPullParser parser, AttributeSet attrs, Theme theme) throws XmlPullParserException, IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void applyTheme(Theme t)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateStateFromTypedArray(TypedArray a)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateShape()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void getOutline(Outline outline)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ConstantState getConstantState()",
    "returnType" : "ConstantState",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Drawable mutate()",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void clearMutated()",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void updateLocalState()",
    "returnType" : "void",
    "comment" : "\n     * Initializes local dynamic properties from state. This should be called\n     * after significant state changes, e.g. from the One True Constructor and\n     * after inflating or applying a theme.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Shape getShape()", "public void setShape(Shape s)", "public void setShaderFactory(ShaderFactory fact)", "public ShaderFactory getShaderFactory()", "public Paint getPaint()", "public void setPadding(int left, int top, int right, int bottom)", "public void setPadding(Rect padding)", "public void setIntrinsicWidth(int width)", "public void setIntrinsicHeight(int height)", "public int getIntrinsicWidth()", "public int getIntrinsicHeight()", "public boolean getPadding(Rect padding)", "private static int modulateAlpha(int paintAlpha, int alpha)", "protected void onDraw(Shape shape, Canvas canvas, Paint paint)", "public void draw(Canvas canvas)", "public int getChangingConfigurations()", "public void setAlpha(int alpha)", "public int getAlpha()", "public void setTintList(ColorStateList tint)", "public void setTintBlendMode(@NonNull BlendMode blendMode)", "public void setColorFilter(ColorFilter colorFilter)", "public void setXfermode(@Nullable Xfermode mode)", "public int getOpacity()", "public void setDither(boolean dither)", "protected void onBoundsChange(Rect bounds)", "protected boolean onStateChange(int[] stateSet)", "public boolean isStateful()", "public boolean hasFocusStateSpecified()", "protected boolean inflateTag(String name, Resources r, XmlPullParser parser, AttributeSet attrs)", "public void inflate(Resources r, XmlPullParser parser, AttributeSet attrs, Theme theme) throws XmlPullParserException, IOException", "public void applyTheme(Theme t)", "private void updateStateFromTypedArray(TypedArray a)", "private void updateShape()", "public void getOutline(Outline outline)", "public ConstantState getConstantState()", "public Drawable mutate()", "public void clearMutated()", "private void updateLocalState()" ],
  "variableNames" : [ "mShapeState", "mBlendModeColorFilter", "mMutated" ]
}