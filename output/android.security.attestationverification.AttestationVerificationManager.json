{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/security/attestationverification/AttestationVerificationManager.java",
  "packageName" : "android.security.attestationverification",
  "className" : "AttestationVerificationManager",
  "comment" : "\n * Provides methods for verifying that attestations from remote compute environments meet minimum\n * security requirements specified by attestation profiles.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_TOKEN_AGE",
    "type" : "Duration",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IAttestationVerificationManagerService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PROFILE_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * The profile is unknown because it is a profile unknown to this version of the SDK.\n     ",
    "links" : [ ]
  }, {
    "name" : "PROFILE_APP_DEFINED",
    "type" : "int",
    "comment" : " The profile is defined by an app. ",
    "links" : [ ]
  }, {
    "name" : "PROFILE_SELF_TRUSTED",
    "type" : "int",
    "comment" : "\n     * A system-defined profile which verifies that the attesting environment can create an\n     * attestation with the same root certificate as the verifying device with a matching\n     * attestation challenge.\n     *\n     * This profile is intended to be used only for testing.\n     ",
    "links" : [ ]
  }, {
    "name" : "PROFILE_PEER_DEVICE",
    "type" : "int",
    "comment" : "\n     * A system-defined profile which verifies that the attesting environment is similar to the\n     * current device in terms of security model and security configuration. This category is fairly\n     * broad and most securely configured Android devices should qualify, along with a variety of\n     * non-Android devices.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * The type of the local binding data is unknown because it is a type unknown to this version of\n     * the SDK.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_APP_DEFINED",
    "type" : "int",
    "comment" : "\n     * A local binding type for app-defined profiles which use local binding data which does not\n     * match any of the existing system-defined types.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_PUBLIC_KEY",
    "type" : "int",
    "comment" : "\n     * A local binding type where the attestation is bound to a public key negotiated and\n     * authenticated to a public key.\n     *\n     * <p>When using this type, the {@code requirements} bundle contains values for:\n     * <ul>\n     *   <li>{@link #PARAM_PUBLIC_KEY}\n     *   <li>{@link #PARAM_ID}: identifying the remote environment, optional\n     * </ul>\n     ",
    "links" : [ "#PARAM_ID", "#PARAM_PUBLIC_KEY" ]
  }, {
    "name" : "TYPE_CHALLENGE",
    "type" : "int",
    "comment" : "\n     * A local binding type where the attestation is bound to a challenge.\n     *\n     * <p>When using this type, the {@code requirements} bundle contains values for:\n     * <ul>\n     *   <li>{@link #PARAM_CHALLENGE}: containing the challenge\n     * </ul>\n     ",
    "links" : [ "#PARAM_CHALLENGE" ]
  }, {
    "name" : "RESULT_UNKNOWN",
    "type" : "int",
    "comment" : " The result of the verification is unknown because it has a value unknown to this SDK. ",
    "links" : [ ]
  }, {
    "name" : "RESULT_SUCCESS",
    "type" : "int",
    "comment" : " The result of the verification was successful. ",
    "links" : [ ]
  }, {
    "name" : "RESULT_FAILURE",
    "type" : "int",
    "comment" : "\n     * The result of the attestation verification was failure. The attestation could not be\n     * verified.\n     ",
    "links" : [ ]
  }, {
    "name" : "PARAM_PUBLIC_KEY",
    "type" : "String",
    "comment" : "\n     * Requirements bundle parameter key for a public key, a byte array.\n     *\n     * <p>This should contain the encoded key bytes according to the ASN.1 type\n     * {@code SubjectPublicKeyInfo} defined in the X.509 standard, the same as a call to {@link\n     * java.security.spec.X509EncodedKeySpec#getEncoded()} would produce.\n     *\n     * @see Bundle#putByteArray(String, byte[])\n     ",
    "links" : [ "java.security.spec.X509EncodedKeySpec#getEncoded()" ]
  }, {
    "name" : "PARAM_ID",
    "type" : "String",
    "comment" : " Requirements bundle parameter key for an ID, String. ",
    "links" : [ ]
  }, {
    "name" : "PARAM_CHALLENGE",
    "type" : "String",
    "comment" : " Requirements bundle parameter for a challenge. ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void verifyAttestation(@NonNull AttestationProfile profile, @LocalBindingType int localBindingType, @NonNull Bundle requirements, @NonNull byte[] attestation, @NonNull @CallbackExecutor Executor executor, @NonNull BiConsumer<@VerificationResult Integer, VerificationToken> callback)",
    "returnType" : "void",
    "comment" : "\n     * Verifies that {@code attestation} describes a computing environment that meets the\n     * requirements of {@code profile}, {@code localBindingType}, and {@code requirements}.\n     *\n     * <p>This method verifies that at least one system-registered {@linkplain\n     * AttestationVerificationService attestation verifier} associated with {@code profile} and\n     * {@code localBindingType} has verified that {@code attestation} attests that the remote\n     * environment matching the local binding data (determined by {@code localBindingType}) in\n     * {@code requirements} meets the requirements of the profile.\n     *\n     * <p>For successful verification, the {@code requirements} bundle must contain locally-known\n     * data which must match {@code attestation}. The required data in the bundle is defined by the\n     * {@code localBindingType} (see documentation for the type). Verifiers will fail to verify the\n     * attestation if the bundle contains unsupported data.\n     *\n     * <p>The {@code localBindingType} specifies how {@code attestation} is bound to a local\n     * secure channel endpoint or similar connection with the target remote environment described by\n     * the attestation. The binding is expected to be related to a cryptographic protocol, and each\n     * binding type requires specific arguments to be present in the {@code requirements} bundle. It\n     * is this binding to something known locally that ensures an attestation is not only valid, but\n     * is also associated with a particular connection.\n     *\n     * <p>The {@code callback} is called with a result and {@link VerificationToken} (which may be\n     * null). The result is an integer (see constants in this class with the prefix {@code RESULT_}.\n     * The result is {@link #RESULT_SUCCESS} when at least one verifier has passed its checks. The\n     * token may be used in calls to other parts of the system.\n     *\n     * <p>It's expected that a verifier will be able to decode and understand the passed values,\n     * otherwise fail to verify. {@code attestation} should contain some type data to prevent parse\n     * errors.\n     *\n     * <p>The values put into the {@code requirements} Bundle depend on the {@code\n     * localBindingType} used.\n     *\n     * @param profile          the attestation profile which defines the security requirements which\n     *                         must be met by the environment described by {@code attestation}\n     * @param localBindingType the type of the local binding data; see constants in this class with\n     *                         the prefix {@code TYPE_}\n     * @param requirements     a {@link Bundle} containing locally-known data which must match\n     *                         {@code attestation}\n     * @param attestation      attestation data which describes a remote computing environment\n     * @param executor         {@code callback} will be executed on this executor\n     * @param callback         will be called with the results of the verification\n     * @see AttestationVerificationService\n     ",
    "links" : [ "#RESULT_SUCCESS", "android.os.Bundle", "android.security.attestationverification.VerificationToken" ]
  }, {
    "name" : "public int verifyToken(@NonNull AttestationProfile profile, @LocalBindingType int localBindingType, @NonNull Bundle requirements, @NonNull VerificationToken token, @Nullable Duration maximumAge)",
    "returnType" : "int",
    "comment" : "\n     * Verifies that {@code token} is a valid token, returning the result contained in valid\n     * tokens.\n     *\n     * <p>This verifies that the token was issued by the platform and thus the system verified\n     * attestation data against the specified {@code profile}, {@code localBindingType}, and {@code\n     * requirements}. The value returned by this method is the same as the one originally returned\n     * when the token was generated. Callers of this method should not trust the provider of the\n     * token to also specify the profile, local binding type, or requirements, but instead have\n     * their own security requirements about these arguments.\n     *\n     * <p>This method, in contrast to {@code verifyAttestation}, executes synchronously and only\n     * checks that a previous verification succeeded. This allows callers to pass the token to\n     * others, including system APIs, without those components needing to re-verify the attestation\n     * data, an operation which can take several seconds.\n     *\n     * <p>When {@code maximumAge} is not specified (null), this method verifies the token was\n     * generated in the past hour. Otherwise, it verifies the token was generated between now and\n     * {@code maximumAge} ago. The maximum value of {@code maximumAge} is one hour; specifying a\n     * duration greater than one hour will result in an {@link IllegalArgumentException}.\n     *\n     * @param profile          the attestation profile which must be in the token\n     * @param localBindingType the local binding type which must be in the token\n     * @param requirements     the requirements which must be in the token\n     * @param token            the token to be verified\n     * @param maximumAge       the maximum age to accept for the token\n     ",
    "links" : [ "IllegalArgumentException" ]
  }, {
    "name" : "public static String localBindingTypeToString(@LocalBindingType int localBindingType)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static String verificationResultCodeToString(@VerificationResult int resultCode)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void verifyAttestation(@NonNull AttestationProfile profile, @LocalBindingType int localBindingType, @NonNull Bundle requirements, @NonNull byte[] attestation, @NonNull @CallbackExecutor Executor executor, @NonNull BiConsumer<@VerificationResult Integer, VerificationToken> callback)", "public int verifyToken(@NonNull AttestationProfile profile, @LocalBindingType int localBindingType, @NonNull Bundle requirements, @NonNull VerificationToken token, @Nullable Duration maximumAge)", "public static String localBindingTypeToString(@LocalBindingType int localBindingType)", "public static String verificationResultCodeToString(@VerificationResult int resultCode)" ],
  "variableNames" : [ "TAG", "MAX_TOKEN_AGE", "mContext", "mService", "PROFILE_UNKNOWN", "PROFILE_APP_DEFINED", "PROFILE_SELF_TRUSTED", "PROFILE_PEER_DEVICE", "TYPE_UNKNOWN", "TYPE_APP_DEFINED", "TYPE_PUBLIC_KEY", "TYPE_CHALLENGE", "RESULT_UNKNOWN", "RESULT_SUCCESS", "RESULT_FAILURE", "PARAM_PUBLIC_KEY", "PARAM_ID", "PARAM_CHALLENGE" ]
}