{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/concurrent/RejectedExecutionHandler.java",
  "packageName" : "java.util.concurrent",
  "className" : "RejectedExecutionHandler",
  "comment" : "\n * A handler for tasks that cannot be executed by a {@link ThreadPoolExecutor}.\n *\n * @since 1.5\n * @author Doug Lea\n ",
  "links" : [ "java.util.concurrent.ThreadPoolExecutor" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " void rejectedExecution(Runnable r, ThreadPoolExecutor executor)",
    "returnType" : "void",
    "comment" : "\n     * Method that may be invoked by a {@link ThreadPoolExecutor} when\n     * {@link ThreadPoolExecutor#execute execute} cannot accept a\n     * task.  This may occur when no more threads or queue slots are\n     * available because their bounds would be exceeded, or upon\n     * shutdown of the Executor.\n     *\n     * <p>In the absence of other alternatives, the method may throw\n     * an unchecked {@link RejectedExecutionException}, which will be\n     * propagated to the caller of {@code execute}.\n     *\n     * @param r the runnable task requested to be executed\n     * @param executor the executor attempting to execute this task\n     * @throws RejectedExecutionException if there is no remedy\n     ",
    "links" : [ "java.util.concurrent.RejectedExecutionException", "java.util.concurrent.ThreadPoolExecutor", "java.util.concurrent.ThreadPoolExecutor#execute" ]
  } ],
  "methodNames" : [ " void rejectedExecution(Runnable r, ThreadPoolExecutor executor)" ],
  "variableNames" : [ ]
}