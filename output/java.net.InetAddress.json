{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/net/InetAddress.java",
  "packageName" : "java.net",
  "className" : "InetAddress",
  "comment" : "\n * This class represents an Internet Protocol (IP) address.\n *\n * <p> An IP address is either a 32-bit or 128-bit unsigned number\n * used by IP, a lower-level protocol on which protocols like UDP and\n * TCP are built. The IP address architecture is defined by <a\n * href=\"http://www.ietf.org/rfc/rfc790.txt\"><i>RFC&nbsp;790:\n * Assigned Numbers</i></a>, <a\n * href=\"http://www.ietf.org/rfc/rfc1918.txt\"> <i>RFC&nbsp;1918:\n * Address Allocation for Private Internets</i></a>, <a\n * href=\"http://www.ietf.org/rfc/rfc2365.txt\"><i>RFC&nbsp;2365:\n * Administratively Scoped IP Multicast</i></a>, and <a\n * href=\"http://www.ietf.org/rfc/rfc2373.txt\"><i>RFC&nbsp;2373: IP\n * Version 6 Addressing Architecture</i></a>. An instance of an\n * InetAddress consists of an IP address and possibly its\n * corresponding host name (depending on whether it is constructed\n * with a host name or whether it has already done reverse host name\n * resolution).\n *\n * <h3> Address types </h3>\n *\n * <blockquote><table cellspacing=2 summary=\"Description of unicast and multicast address types\">\n *   <tr><th valign=top><i>unicast</i></th>\n *       <td>An identifier for a single interface. A packet sent to\n *         a unicast address is delivered to the interface identified by\n *         that address.\n *\n *         <p> The Unspecified Address -- Also called anylocal or wildcard\n *         address. It must never be assigned to any node. It indicates the\n *         absence of an address. One example of its use is as the target of\n *         bind, which allows a server to accept a client connection on any\n *         interface, in case the server host has multiple interfaces.\n *\n *         <p> The <i>unspecified</i> address must not be used as\n *         the destination address of an IP packet.\n *\n *         <p> The <i>Loopback</i> Addresses -- This is the address\n *         assigned to the loopback interface. Anything sent to this\n *         IP address loops around and becomes IP input on the local\n *         host. This address is often used when testing a\n *         client.</td></tr>\n *   <tr><th valign=top><i>multicast</i></th>\n *       <td>An identifier for a set of interfaces (typically belonging\n *         to different nodes). A packet sent to a multicast address is\n *         delivered to all interfaces identified by that address.</td></tr>\n * </table></blockquote>\n *\n * <h4> IP address scope </h4>\n *\n * <p> <i>Link-local</i> addresses are designed to be used for addressing\n * on a single link for purposes such as auto-address configuration,\n * neighbor discovery, or when no routers are present.\n *\n * <p> <i>Site-local</i> addresses are designed to be used for addressing\n * inside of a site without the need for a global prefix.\n *\n * <p> <i>Global</i> addresses are unique across the internet.\n *\n * <h4> Textual representation of IP addresses </h4>\n *\n * The textual representation of an IP address is address family specific.\n *\n * <p>\n *\n * For IPv4 address format, please refer to <A\n * HREF=\"Inet4Address.html#format\">Inet4Address#format</A>; For IPv6\n * address format, please refer to <A\n * HREF=\"Inet6Address.html#format\">Inet6Address#format</A>.\n *\n * <P>There is a <a href=\"doc-files/net-properties.html#Ipv4IPv6\">couple of\n * System Properties</a> affecting how IPv4 and IPv6 addresses are used.</P>\n *\n * <h4> Host Name Resolution </h4>\n *\n * Host name-to-IP address <i>resolution</i> is accomplished through\n * the use of a combination of local machine configuration information\n * and network naming services such as the Domain Name System (DNS)\n * and Network Information Service(NIS). The particular naming\n * services(s) being used is by default the local machine configured\n * one. For any host name, its corresponding IP address is returned.\n *\n * <p> <i>Reverse name resolution</i> means that for any IP address,\n * the host associated with the IP address is returned.\n *\n * <p> The InetAddress class provides methods to resolve host names to\n * their IP addresses and vice versa.\n *\n * <h4> InetAddress Caching </h4>\n *\n * The InetAddress class has a cache to store successful as well as\n * unsuccessful host name resolutions.\n *\n * <p> By default, when a security manager is installed, in order to\n * protect against DNS spoofing attacks,\n * the result of positive host name resolutions are\n * cached forever. When a security manager is not installed, the default\n * behavior is to cache entries for a finite (implementation dependent)\n * period of time. The result of unsuccessful host\n * name resolution is cached for a very short period of time (10\n * seconds) to improve performance.\n *\n * <p> If the default behavior is not desired, then a Java security property\n * can be set to a different Time-to-live (TTL) value for positive\n * caching. Likewise, a system admin can configure a different\n * negative caching TTL value when needed.\n *\n * <p> Two Java security properties control the TTL values used for\n *  positive and negative host name resolution caching:\n *\n * <blockquote>\n * <dl>\n * <dt><b>networkaddress.cache.ttl</b></dt>\n * <dd>Indicates the caching policy for successful name lookups from\n * the name service. The value is specified as as integer to indicate\n * the number of seconds to cache the successful lookup. The default\n * setting is to cache for an implementation specific period of time.\n * <p>\n * A value of -1 indicates \"cache forever\".\n * </dd>\n * <dt><b>networkaddress.cache.negative.ttl</b> (default: 10)</dt>\n * <dd>Indicates the caching policy for un-successful name lookups\n * from the name service. The value is specified as as integer to\n * indicate the number of seconds to cache the failure for\n * un-successful lookups.\n * <p>\n * A value of 0 indicates \"never cache\".\n * A value of -1 indicates \"cache forever\".\n * </dd>\n * </dl>\n * </blockquote>\n *\n * @author  Chris Warth\n * @see     java.net.InetAddress#getByAddress(byte[])\n * @see     java.net.InetAddress#getByAddress(java.lang.String, byte[])\n * @see     java.net.InetAddress#getAllByName(java.lang.String)\n * @see     java.net.InetAddress#getByName(java.lang.String)\n * @see     java.net.InetAddress#getLocalHost()\n * @since JDK1.0\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "holder",
    "type" : "InetAddressHolder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "impl",
    "type" : "InetAddressImpl",
    "comment" : " The implementation is always dual stack IPv6/IPv4 on android ",
    "links" : [ ]
  }, {
    "name" : "nameService",
    "type" : "NameService",
    "comment" : " private static List<NameService> nameServices = null;",
    "links" : [ ]
  }, {
    "name" : "canonicalHostName",
    "type" : "String",
    "comment" : " Used to store the best available hostname ",
    "links" : [ ]
  }, {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : " use serialVersionUID from JDK 1.0.2 for interoperability ",
    "links" : [ ]
  }, {
    "name" : "BOOT_CLASSLOADER",
    "type" : "ClassLoader",
    "comment" : " Android-changed: Don't use null to mean the boot classloader.",
    "links" : [ ]
  }, {
    "name" : "serialPersistentFields",
    "type" : "ObjectStreamField[]",
    "comment" : "\n     * @serialField hostName String\n     * @serialField address int\n     * @serialField family int\n     ",
    "links" : [ ]
  }, {
    "name" : "NETID_UNSET",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " InetAddressHolder holder()",
    "returnType" : "InetAddressHolder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Object readResolve() throws ObjectStreamException",
    "returnType" : "Object",
    "comment" : "\n     * Replaces the de-serialized object with an Inet4Address object.\n     *\n     * @return the alternate object to the de-serialized object.\n     *\n     * @throws ObjectStreamException if a new object replacing this\n     * object could not be created\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isMulticastAddress()",
    "returnType" : "boolean",
    "comment" : "\n     * Utility routine to check if the InetAddress is an\n     * IP multicast address.\n     * @return a {@code boolean} indicating if the InetAddress is\n     * an IP multicast address\n     * @since   JDK1.1\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isAnyLocalAddress()",
    "returnType" : "boolean",
    "comment" : "\n     * Utility routine to check if the InetAddress in a wildcard address.\n     * @return a {@code boolean} indicating if the Inetaddress is\n     *         a wildcard address.\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isLoopbackAddress()",
    "returnType" : "boolean",
    "comment" : "\n     * Utility routine to check if the InetAddress is a loopback address.\n     *\n     * @return a {@code boolean} indicating if the InetAddress is\n     * a loopback address; or false otherwise.\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isLinkLocalAddress()",
    "returnType" : "boolean",
    "comment" : "\n     * Utility routine to check if the InetAddress is an link local address.\n     *\n     * @return a {@code boolean} indicating if the InetAddress is\n     * a link local address; or false if address is not a link local unicast address.\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSiteLocalAddress()",
    "returnType" : "boolean",
    "comment" : "\n     * Utility routine to check if the InetAddress is a site local address.\n     *\n     * @return a {@code boolean} indicating if the InetAddress is\n     * a site local address; or false if address is not a site local unicast address.\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isMCGlobal()",
    "returnType" : "boolean",
    "comment" : "\n     * Utility routine to check if the multicast address has global scope.\n     *\n     * @return a {@code boolean} indicating if the address has\n     *         is a multicast address of global scope, false if it is not\n     *         of global scope or it is not a multicast address\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isMCNodeLocal()",
    "returnType" : "boolean",
    "comment" : "\n     * Utility routine to check if the multicast address has node scope.\n     *\n     * @return a {@code boolean} indicating if the address has\n     *         is a multicast address of node-local scope, false if it is not\n     *         of node-local scope or it is not a multicast address\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isMCLinkLocal()",
    "returnType" : "boolean",
    "comment" : "\n     * Utility routine to check if the multicast address has link scope.\n     *\n     * @return a {@code boolean} indicating if the address has\n     *         is a multicast address of link-local scope, false if it is not\n     *         of link-local scope or it is not a multicast address\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isMCSiteLocal()",
    "returnType" : "boolean",
    "comment" : "\n     * Utility routine to check if the multicast address has site scope.\n     *\n     * @return a {@code boolean} indicating if the address has\n     *         is a multicast address of site-local scope, false if it is not\n     *         of site-local scope or it is not a multicast address\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isMCOrgLocal()",
    "returnType" : "boolean",
    "comment" : "\n     * Utility routine to check if the multicast address has organization scope.\n     *\n     * @return a {@code boolean} indicating if the address has\n     *         is a multicast address of organization-local scope,\n     *         false if it is not of organization-local scope\n     *         or it is not a multicast address\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isReachable(int timeout) throws IOException",
    "returnType" : "boolean",
    "comment" : "\n     * Test whether that address is reachable. Best effort is made by the\n     * implementation to try to reach the host, but firewalls and server\n     * configuration may block requests resulting in a unreachable status\n     * while some specific ports may be accessible.\n     * <p>\n     * Android implementation attempts ICMP ECHO REQUESTs first, on failure it\n     * will fall back to TCP ECHO REQUESTs. Success on either protocol will\n     * return true.\n     * <p>\n     * The timeout value, in milliseconds, indicates the maximum amount of time\n     * the try should take. If the operation times out before getting an\n     * answer, the host is deemed unreachable. A negative value will result\n     * in an IllegalArgumentException being thrown.\n     *\n     * @param   timeout the time, in milliseconds, before the call aborts\n     * @return a {@code boolean} indicating if the address is reachable.\n     * @throws IOException if a network error occurs\n     * @throws  IllegalArgumentException if {@code timeout} is negative.\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isReachable(NetworkInterface netif, int ttl, int timeout) throws IOException",
    "returnType" : "boolean",
    "comment" : "\n     * Test whether that address is reachable. Best effort is made by the\n     * implementation to try to reach the host, but firewalls and server\n     * configuration may block requests resulting in a unreachable status\n     * while some specific ports may be accessible.\n     * <p>\n     * Android implementation attempts ICMP ECHO REQUESTs first, on failure it\n     * will fall back to TCP ECHO REQUESTs. Success on either protocol will\n     * return true.\n     * <p>\n     * The {@code network interface} and {@code ttl} parameters\n     * let the caller specify which network interface the test will go through\n     * and the maximum number of hops the packets should go through.\n     * A negative value for the {@code ttl} will result in an\n     * IllegalArgumentException being thrown.\n     * <p>\n     * The timeout value, in milliseconds, indicates the maximum amount of time\n     * the try should take. If the operation times out before getting an\n     * answer, the host is deemed unreachable. A negative value will result\n     * in an IllegalArgumentException being thrown.\n     *\n     * @param   netif   the NetworkInterface through which the\n     *                    test will be done, or null for any interface\n     * @param   ttl     the maximum numbers of hops to try or 0 for the\n     *                  default\n     * @param   timeout the time, in milliseconds, before the call aborts\n     * @throws  IllegalArgumentException if either {@code timeout}\n     *                          or {@code ttl} are negative.\n     * @return a {@code boolean}indicating if the address is reachable.\n     * @throws IOException if a network error occurs\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isReachableByICMP(int timeout) throws IOException",
    "returnType" : "boolean",
    "comment" : "\n     * @hide For testing only\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getHostName()",
    "returnType" : "String",
    "comment" : "\n     * Gets the host name for this IP address.\n     *\n     * <p>If this InetAddress was created with a host name,\n     * this host name will be remembered and returned;\n     * otherwise, a reverse name lookup will be performed\n     * and the result will be returned based on the system\n     * configured name lookup service. If a lookup of the name service\n     * is required, call\n     * {@link #getCanonicalHostName() getCanonicalHostName}.\n     *\n     * <p>If there is a security manager, its\n     * {@code checkConnect} method is first called\n     * with the hostname and {@code -1}\n     * as its arguments to see if the operation is allowed.\n     * If the operation is not allowed, it will return\n     * the textual representation of the IP address.\n     *\n     * @return  the host name for this IP address, or if the operation\n     *    is not allowed by the security check, the textual\n     *    representation of the IP address.\n     *\n     * @see InetAddress#getCanonicalHostName\n     * @see SecurityManager#checkConnect\n     ",
    "links" : [ "#getCanonicalHostName()" ]
  }, {
    "name" : "public String getCanonicalHostName()",
    "returnType" : "String",
    "comment" : "\n     * Gets the fully qualified domain name for this IP address.\n     * Best effort method, meaning we may not be able to return\n     * the FQDN depending on the underlying system configuration.\n     *\n     * <p>If there is a security manager, this method first\n     * calls its {@code checkConnect} method\n     * with the hostname and {@code -1}\n     * as its arguments to see if the calling code is allowed to know\n     * the hostname for this IP address, i.e., to connect to the host.\n     * If the operation is not allowed, it will return\n     * the textual representation of the IP address.\n     *\n     * @return  the fully qualified domain name for this IP address,\n     *    or if the operation is not allowed by the security check,\n     *    the textual representation of the IP address.\n     *\n     * @see SecurityManager#checkConnect\n     *\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String getHostFromNameService(InetAddress addr)",
    "returnType" : "String",
    "comment" : "\n     * Returns the hostname for this address.\n     *\n     * <p>If there is a security manager, this method first\n     * calls its {@code checkConnect} method\n     * with the hostname and {@code -1}\n     * as its arguments to see if the calling code is allowed to know\n     * the hostname for this IP address, i.e., to connect to the host.\n     * If the operation is not allowed, it will return\n     * the textual representation of the IP address.\n     *\n     * @return  the host name for this IP address, or if the operation\n     *    is not allowed by the security check, the textual\n     *    representation of the IP address.\n     *\n     * @see SecurityManager#checkConnect\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getAddress()",
    "returnType" : "byte[]",
    "comment" : "\n     * Returns the raw IP address of this {@code InetAddress}\n     * object. The result is in network byte order: the highest order\n     * byte of the address is in {@code getAddress()[0]}.\n     *\n     * @return  the raw IP address of this object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getHostAddress()",
    "returnType" : "String",
    "comment" : "\n     * Returns the IP address string in textual presentation.\n     *\n     * @return  the raw IP address in a string format.\n     * @since   JDK1.0.2\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Returns a hashcode for this IP address.\n     *\n     * @return  a hash code value for this IP address.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "\n     * Compares this object against the specified object.\n     * The result is {@code true} if and only if the argument is\n     * not {@code null} and it represents the same IP address as\n     * this object.\n     * <p>\n     * Two instances of {@code InetAddress} represent the same IP\n     * address if the length of the byte arrays returned by\n     * {@code getAddress} is the same for both, and each of the\n     * array components is the same for the byte arrays.\n     *\n     * @param   obj   the object to compare against.\n     * @return  {@code true} if the objects are the same;\n     *          {@code false} otherwise.\n     * @see     java.net.InetAddress#getAddress()\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Converts this IP address to a {@code String}. The\n     * string returned is of the form: hostname / literal IP\n     * address.\n     *\n     * If the host name is unresolved, no reverse name service lookup\n     * is performed. The hostname part will be represented by an empty string.\n     *\n     * @return  a string representation of this IP address.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static InetAddress getByAddress(String host, byte[] addr) throws UnknownHostException",
    "returnType" : "InetAddress",
    "comment" : "\n     * Creates an InetAddress based on the provided host name and IP address.\n     * No name service is checked for the validity of the address.\n     *\n     * <p> The host name can either be a machine name, such as\n     * \"{@code java.sun.com}\", or a textual representation of its IP\n     * address.\n     * <p> No validity checking is done on the host name either.\n     *\n     * <p> If addr specifies an IPv4 address an instance of Inet4Address\n     * will be returned; otherwise, an instance of Inet6Address\n     * will be returned.\n     *\n     * <p> IPv4 address byte array must be 4 bytes long and IPv6 byte array\n     * must be 16 bytes long\n     *\n     * @param host the specified host\n     * @param addr the raw IP address in network byte order\n     * @return  an InetAddress object created from the raw IP address.\n     * @exception  UnknownHostException  if IP address is of illegal length\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "private static InetAddress getByAddress(String host, byte[] addr, int scopeId) throws UnknownHostException",
    "returnType" : "InetAddress",
    "comment" : " Do not delete. Called from native code.",
    "links" : [ ]
  }, {
    "name" : "public static InetAddress getByName(String host) throws UnknownHostException",
    "returnType" : "InetAddress",
    "comment" : "\n     * Determines the IP address of a host, given the host's name.\n     *\n     * <p> The host name can either be a machine name, such as\n     * \"{@code java.sun.com}\", or a textual representation of its\n     * IP address. If a literal IP address is supplied, only the\n     * validity of the address format is checked.\n     *\n     * <p> For {@code host} specified in literal IPv6 address,\n     * either the form defined in RFC 2732 or the literal IPv6 address\n     * format defined in RFC 2373 is accepted. IPv6 scoped addresses are also\n     * supported. See <a href=\"Inet6Address.html#scoped\">here</a> for a description of IPv6\n     * scoped addresses.\n     *\n     * <p> If the host is {@code null} then an {@code InetAddress}\n     * representing an address of the loopback interface is returned.\n     * See <a href=\"http://www.ietf.org/rfc/rfc3330.txt\">RFC&nbsp;3330</a>\n     * section&nbsp;2 and <a href=\"http://www.ietf.org/rfc/rfc2373.txt\">RFC&nbsp;2373</a>\n     * section&nbsp;2.5.3. </p>\n     *\n     * @param      host   the specified host, or {@code null}.\n     * @return     an IP address for the given host name.\n     * @exception  UnknownHostException  if no IP address for the\n     *               {@code host} could be found, or if a scope_id was specified\n     *               for a global IPv6 address.\n     * @exception  SecurityException if a security manager exists\n     *             and its checkConnect method doesn't allow the operation\n     ",
    "links" : [ ]
  }, {
    "name" : "public static InetAddress[] getAllByName(String host) throws UnknownHostException",
    "returnType" : "InetAddress[]",
    "comment" : "\n     * Given the name of a host, returns an array of its IP addresses,\n     * based on the configured name service on the system.\n     *\n     * <p> The host name can either be a machine name, such as\n     * \"{@code java.sun.com}\", or a textual representation of its IP\n     * address. If a literal IP address is supplied, only the\n     * validity of the address format is checked.\n     *\n     * <p> For {@code host} specified in <i>literal IPv6 address</i>,\n     * either the form defined in RFC 2732 or the literal IPv6 address\n     * format defined in RFC 2373 is accepted. A literal IPv6 address may\n     * also be qualified by appending a scoped zone identifier or scope_id.\n     * The syntax and usage of scope_ids is described\n     * <a href=\"Inet6Address.html#scoped\">here</a>.\n     * <p> If the host is {@code null} then an {@code InetAddress}\n     * representing an address of the loopback interface is returned.\n     * See <a href=\"http://www.ietf.org/rfc/rfc3330.txt\">RFC&nbsp;3330</a>\n     * section&nbsp;2 and <a href=\"http://www.ietf.org/rfc/rfc2373.txt\">RFC&nbsp;2373</a>\n     * section&nbsp;2.5.3. </p>\n     *\n     * <p> If there is a security manager and {@code host} is not\n     * null and {@code host.length() } is not equal to zero, the\n     * security manager's\n     * {@code checkConnect} method is called\n     * with the hostname and {@code -1}\n     * as its arguments to see if the operation is allowed.\n     *\n     * @param      host   the name of the host, or {@code null}.\n     * @return     an array of all the IP addresses for a given host name.\n     *\n     * @exception  UnknownHostException  if no IP address for the\n     *               {@code host} could be found, or if a scope_id was specified\n     *               for a global IPv6 address.\n     * @exception  SecurityException  if a security manager exists and its\n     *               {@code checkConnect} method doesn't allow the operation.\n     *\n     * @see SecurityManager#checkConnect\n     ",
    "links" : [ ]
  }, {
    "name" : "public static InetAddress getLoopbackAddress()",
    "returnType" : "InetAddress",
    "comment" : "\n     * Returns the loopback address.\n     * <p>\n     * The InetAddress returned will represent the IPv4\n     * loopback address, 127.0.0.1, or the IPv6 loopback\n     * address, ::1. The IPv4 loopback address returned\n     * is only one of many in the form 127.*.*.*\n     *\n     * @return  the InetAddress loopback instance.\n     * @since 1.7\n     ",
    "links" : [ ]
  }, {
    "name" : "public static InetAddress getByAddress(byte[] addr) throws UnknownHostException",
    "returnType" : "InetAddress",
    "comment" : "\n     * Returns an {@code InetAddress} object given the raw IP address .\n     * The argument is in network byte order: the highest order\n     * byte of the address is in {@code getAddress()[0]}.\n     *\n     * <p> This method doesn't block, i.e. no reverse name service lookup\n     * is performed.\n     *\n     * <p> IPv4 address byte array must be 4 bytes long and IPv6 byte array\n     * must be 16 bytes long\n     *\n     * @param addr the raw IP address in network byte order\n     * @return  an InetAddress object created from the raw IP address.\n     * @exception  UnknownHostException  if IP address is of illegal length\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "public static InetAddress getLocalHost() throws UnknownHostException",
    "returnType" : "InetAddress",
    "comment" : "\n     * Returns the address of the local host. This is achieved by retrieving\n     * the name of the host from the system, then resolving that name into\n     * an {@code InetAddress}.\n     *\n     * <P>Note: The resolved address may be cached for a short period of time.\n     * </P>\n     *\n     * <p>If there is a security manager, its\n     * {@code checkConnect} method is called\n     * with the local host name and {@code -1}\n     * as its arguments to see if the operation is allowed.\n     * If the operation is not allowed, an InetAddress representing\n     * the loopback address is returned.\n     *\n     * @return     the address of the local host.\n     *\n     * @exception  UnknownHostException  if the local host name could not\n     *             be resolved into an address.\n     *\n     * @see SecurityManager#checkConnect\n     * @see java.net.InetAddress#getByName(java.lang.String)\n     ",
    "links" : [ ]
  }, {
    "name" : " static InetAddress anyLocalAddress()",
    "returnType" : "InetAddress",
    "comment" : "\n     * Returns the InetAddress representing anyLocalAddress\n     * (typically 0.0.0.0 or ::0)\n     ",
    "links" : [ ]
  }, {
    "name" : "private void readObjectNoData(ObjectInputStream s) throws IOException, ClassNotFoundException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void writeObject(ObjectOutputStream s) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static boolean isNumeric(String address)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the string is a valid numeric IPv4 or IPv6 address (such as \"192.168.0.1\").\n     *\n     * <p>This copes with all forms of address that Java supports, detailed in the\n     * {@link InetAddress} class documentation. An empty string is not treated as numeric.\n     *\n     * @hide used by frameworks/base to ensure that a getAllByName won't cause a DNS lookup.\n     * @deprecated Use {@link InetAddressUtils#isNumericAddress(String)} instead, if possible.\n     * @throws NullPointerException if the {@code address} is {@code null}.\n     ",
    "links" : [ "java.net.InetAddress", "libcore.net.InetAddressUtils#isNumericAddress(String)" ]
  }, {
    "name" : "public static InetAddress parseNumericAddress(String numericAddress)",
    "returnType" : "InetAddress",
    "comment" : "\n     * Returns an InetAddress corresponding to the given numeric address (such\n     * as {@code \"192.168.0.1\"} or {@code \"2001:4860:800d::68\"}).\n     *\n     * <p>This method will never do a DNS lookup. Non-numeric addresses are errors. Passing either\n     * an empty string or a {@code null} as the {@code numericAddress} will return the\n     * {@link Inet6Address#LOOPBACK} address.\n     *\n     * @hide used by frameworks/base's NetworkUtils.numericToInetAddress\n     * @throws IllegalArgumentException if {@code numericAddress} is not a numeric address\n     * @deprecated Use {@link InetAddressUtils#parseNumericAddress(String)} instead, if possible.\n     ",
    "links" : [ "libcore.net.InetAddressUtils#parseNumericAddress(String)", "java.net.Inet6Address#LOOPBACK" ]
  }, {
    "name" : "public static void clearDnsCache()",
    "returnType" : "void",
    "comment" : "\n     * Removes all entries from the VM's DNS cache. This does not affect the C library's DNS\n     * cache, nor any caching DNS servers between you and the canonical server.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static InetAddress getByNameOnNet(String host, int netId) throws UnknownHostException",
    "returnType" : "InetAddress",
    "comment" : "\n     * Operates identically to {@code getByName} except host resolution is\n     * performed on the network designated by {@code netId}.\n     *\n     * @param host\n     *            the hostName to be resolved to an address or {@code null}.\n     * @param netId the network to use for host resolution.\n     * @return the {@code InetAddress} instance representing the host.\n     * @throws UnknownHostException if the address lookup fails.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static InetAddress[] getAllByNameOnNet(String host, int netId) throws UnknownHostException",
    "returnType" : "InetAddress[]",
    "comment" : "\n     * Operates identically to {@code getAllByName} except host resolution is\n     * performed on the network designated by {@code netId}.\n     *\n     * @param host the hostname or literal IP string to be resolved.\n     * @param netId the network to use for host resolution.\n     * @return the array of addresses associated with the specified host.\n     * @throws UnknownHostException if the address lookup fails.\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " InetAddressHolder holder()", "private Object readResolve() throws ObjectStreamException", "public boolean isMulticastAddress()", "public boolean isAnyLocalAddress()", "public boolean isLoopbackAddress()", "public boolean isLinkLocalAddress()", "public boolean isSiteLocalAddress()", "public boolean isMCGlobal()", "public boolean isMCNodeLocal()", "public boolean isMCLinkLocal()", "public boolean isMCSiteLocal()", "public boolean isMCOrgLocal()", "public boolean isReachable(int timeout) throws IOException", "public boolean isReachable(NetworkInterface netif, int ttl, int timeout) throws IOException", "public boolean isReachableByICMP(int timeout) throws IOException", "public String getHostName()", "public String getCanonicalHostName()", "private static String getHostFromNameService(InetAddress addr)", "public byte[] getAddress()", "public String getHostAddress()", "public int hashCode()", "public boolean equals(Object obj)", "public String toString()", "public static InetAddress getByAddress(String host, byte[] addr) throws UnknownHostException", "private static InetAddress getByAddress(String host, byte[] addr, int scopeId) throws UnknownHostException", "public static InetAddress getByName(String host) throws UnknownHostException", "public static InetAddress[] getAllByName(String host) throws UnknownHostException", "public static InetAddress getLoopbackAddress()", "public static InetAddress getByAddress(byte[] addr) throws UnknownHostException", "public static InetAddress getLocalHost() throws UnknownHostException", " static InetAddress anyLocalAddress()", "private void readObjectNoData(ObjectInputStream s) throws IOException, ClassNotFoundException", "private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException", "private void writeObject(ObjectOutputStream s) throws IOException", "public static boolean isNumeric(String address)", "public static InetAddress parseNumericAddress(String numericAddress)", "public static void clearDnsCache()", "public static InetAddress getByNameOnNet(String host, int netId) throws UnknownHostException", "public static InetAddress[] getAllByNameOnNet(String host, int netId) throws UnknownHostException" ],
  "variableNames" : [ "holder", "impl", "nameService", "canonicalHostName", "serialVersionUID", "BOOT_CLASSLOADER", "serialPersistentFields", "NETID_UNSET" ]
}