{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/face/FaceCallback.java",
  "packageName" : "android.hardware.face",
  "className" : "FaceCallback",
  "comment" : "\n * Encapsulates callbacks and client specific information for each face related request.\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAuthenticationCallback",
    "type" : "AuthenticationCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEnrollmentCallback",
    "type" : "EnrollmentCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRemovalCallback",
    "type" : "RemovalCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGenerateChallengeCallback",
    "type" : "GenerateChallengeCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFaceDetectionCallback",
    "type" : "FaceDetectionCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSetFeatureCallback",
    "type" : "SetFeatureCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGetFeatureCallback",
    "type" : "GetFeatureCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRemovalFace",
    "type" : "Face",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCryptoObject",
    "type" : "CryptoObject",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void sendSetFeatureCompleted(boolean success, int feature)",
    "returnType" : "void",
    "comment" : "\n     * Propagate set feature completed via the callback.\n     * @param success if the operation was completed successfully\n     * @param feature the feature that was set\n     ",
    "links" : [ ]
  }, {
    "name" : "public void sendGetFeatureCompleted(boolean success, int[] features, boolean[] featureState)",
    "returnType" : "void",
    "comment" : "\n     * Propagate get feature completed via the callback.\n     * @param success if the operation was completed successfully\n     * @param features list of features available\n     * @param featureState status of the features corresponding to the previous parameter\n     ",
    "links" : [ ]
  }, {
    "name" : "public void sendChallengeGenerated(int sensorId, int userId, long challenge)",
    "returnType" : "void",
    "comment" : "\n     * Propagate challenge generated completed via the callback.\n     * @param sensorId id of the corresponding sensor\n     * @param userId id of the corresponding sensor\n     * @param challenge value of the challenge generated\n     ",
    "links" : [ ]
  }, {
    "name" : "public void sendFaceDetected(int sensorId, int userId, boolean isStrongBiometric)",
    "returnType" : "void",
    "comment" : "\n     * Propagate face detected completed via the callback.\n     * @param sensorId id of the corresponding sensor\n     * @param userId id of the corresponding user\n     * @param isStrongBiometric if the sensor is strong or not\n     ",
    "links" : [ ]
  }, {
    "name" : "public void sendRemovedResult(Face face, int remaining)",
    "returnType" : "void",
    "comment" : "\n     * Propagate remove face completed via the callback.\n     * @param face removed identifier\n     * @param remaining number of face enrollments remaining\n     ",
    "links" : [ ]
  }, {
    "name" : "public void sendErrorResult(Context context, int errMsgId, int vendorCode)",
    "returnType" : "void",
    "comment" : "\n     * Propagate errors via the callback.\n     * @param context corresponding context\n     * @param errMsgId represents the framework error id\n     * @param vendorCode represents the vendor error code\n     ",
    "links" : [ ]
  }, {
    "name" : "public void sendEnrollResult(int remaining)",
    "returnType" : "void",
    "comment" : "\n     * Propagate enroll progress via the callback.\n     * @param remaining number of enrollment steps remaining\n     ",
    "links" : [ ]
  }, {
    "name" : "public void sendAuthenticatedSucceeded(Face face, int userId, boolean isStrongBiometric)",
    "returnType" : "void",
    "comment" : "\n     * Propagate authentication succeeded via the callback.\n     * @param face matched identifier\n     * @param userId id of the corresponding user\n     * @param isStrongBiometric if the sensor is strong or not\n     ",
    "links" : [ ]
  }, {
    "name" : "public void sendAuthenticatedFailed()",
    "returnType" : "void",
    "comment" : "\n     * Propagate authentication failed via the callback.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void sendAcquiredResult(Context context, int acquireInfo, int vendorCode)",
    "returnType" : "void",
    "comment" : "\n     * Propagate acquired result via the callback.\n     * @param context corresponding context\n     * @param acquireInfo represents the framework acquired id\n     * @param vendorCode represents the vendor acquired code\n     ",
    "links" : [ ]
  }, {
    "name" : "public void sendAuthenticationFrame(@NonNull Context context, @Nullable FaceAuthenticationFrame frame)",
    "returnType" : "void",
    "comment" : "\n     * Propagate authentication frame via the callback.\n     * @param context corresponding context\n     * @param frame authentication frame to be sent\n     ",
    "links" : [ ]
  }, {
    "name" : "public void sendEnrollmentFrame(Context context, @Nullable FaceEnrollFrame frame)",
    "returnType" : "void",
    "comment" : "\n     * Propagate enrollment via the callback.\n     * @param context corresponding context\n     * @param frame enrollment frame to be sent\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int getHelpCode(int acquireInfo, int vendorCode)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void sendSetFeatureCompleted(boolean success, int feature)", "public void sendGetFeatureCompleted(boolean success, int[] features, boolean[] featureState)", "public void sendChallengeGenerated(int sensorId, int userId, long challenge)", "public void sendFaceDetected(int sensorId, int userId, boolean isStrongBiometric)", "public void sendRemovedResult(Face face, int remaining)", "public void sendErrorResult(Context context, int errMsgId, int vendorCode)", "public void sendEnrollResult(int remaining)", "public void sendAuthenticatedSucceeded(Face face, int userId, boolean isStrongBiometric)", "public void sendAuthenticatedFailed()", "public void sendAcquiredResult(Context context, int acquireInfo, int vendorCode)", "public void sendAuthenticationFrame(@NonNull Context context, @Nullable FaceAuthenticationFrame frame)", "public void sendEnrollmentFrame(Context context, @Nullable FaceEnrollFrame frame)", "private static int getHelpCode(int acquireInfo, int vendorCode)" ],
  "variableNames" : [ "TAG", "mAuthenticationCallback", "mEnrollmentCallback", "mRemovalCallback", "mGenerateChallengeCallback", "mFaceDetectionCallback", "mSetFeatureCallback", "mGetFeatureCallback", "mRemovalFace", "mCryptoObject" ]
}