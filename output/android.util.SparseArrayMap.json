{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/util/SparseArrayMap.java",
  "packageName" : "android.util",
  "className" : "SparseArrayMap",
  "comment" : "\n * A sparse array of ArrayMaps, which is suitable for holding (userId, packageName)->object\n * associations.\n *\n * @param <K> Any class\n * @param <V> Any class\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mData",
    "type" : "SparseArray<ArrayMap<K, V>>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public V add(int key, @NonNull K mapKey, @Nullable V obj)",
    "returnType" : "V",
    "comment" : "\n     * Add an entry associating obj with the int-K pair.\n     *\n     * @return the previous value associated with key, or null if there was no mapping for key.\n     * (A null return can also indicate that the map previously associated null with key, if the\n     * implementation supports null values.)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clear()",
    "returnType" : "void",
    "comment" : " Remove all entries from the map. ",
    "links" : [ ]
  }, {
    "name" : "public boolean contains(int key, @NonNull K mapKey)",
    "returnType" : "boolean",
    "comment" : " Return true if the structure contains an explicit entry for the int-K pair. ",
    "links" : [ ]
  }, {
    "name" : "public void delete(int key)",
    "returnType" : "void",
    "comment" : " Removes all the data for the key, if there was any. ",
    "links" : [ ]
  }, {
    "name" : "public void deleteAt(int keyIndex)",
    "returnType" : "void",
    "comment" : "\n     * Removes all the data for the keyIndex, if there was any.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public V delete(int key, @NonNull K mapKey)",
    "returnType" : "V",
    "comment" : "\n     * Removes the data for the key and mapKey, if there was any.\n     *\n     * @return Returns the value that was stored under the keys, or null if there was none.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void deleteAt(int keyIndex, int mapIndex)",
    "returnType" : "void",
    "comment" : "\n     * Removes the data for the keyIndex and mapIndex, if there was any.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public V get(int key, @NonNull K mapKey)",
    "returnType" : "V",
    "comment" : "\n     * Get the value associated with the int-K pair.\n     ",
    "links" : [ ]
  }, {
    "name" : "public V getOrDefault(int key, @NonNull K mapKey, V defaultValue)",
    "returnType" : "V",
    "comment" : "\n     * Returns the value to which the specified key and mapKey are mapped, or defaultValue if this\n     * map contains no mapping for them.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int indexOfKey(int key)",
    "returnType" : "int",
    "comment" : " @see SparseArray#indexOfKey ",
    "links" : [ ]
  }, {
    "name" : "public int indexOfKey(int key, @NonNull K mapKey)",
    "returnType" : "int",
    "comment" : "\n     * Returns the index of the mapKey.\n     *\n     * @see SparseArray#indexOfKey\n     ",
    "links" : [ ]
  }, {
    "name" : "public int keyAt(int index)",
    "returnType" : "int",
    "comment" : " Returns the key at the given index. ",
    "links" : [ ]
  }, {
    "name" : "public K keyAt(int keyIndex, int mapIndex)",
    "returnType" : "K",
    "comment" : " Returns the map's key at the given mapIndex for the given keyIndex. ",
    "links" : [ ]
  }, {
    "name" : "public int numMaps()",
    "returnType" : "int",
    "comment" : " Returns the size of the outer array. ",
    "links" : [ ]
  }, {
    "name" : "public int numElementsForKey(int key)",
    "returnType" : "int",
    "comment" : " Returns the number of elements in the map of the given key. ",
    "links" : [ ]
  }, {
    "name" : "public int numElementsForKeyAt(int keyIndex)",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of elements in the map of the given keyIndex.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public V valueAt(int keyIndex, int mapIndex)",
    "returnType" : "V",
    "comment" : " Returns the value V at the given key and map index. ",
    "links" : [ ]
  }, {
    "name" : "public void forEach(@NonNull Consumer<V> consumer)",
    "returnType" : "void",
    "comment" : " Iterate through all int-K pairs and operate on all of the values. ",
    "links" : [ ]
  }, {
    "name" : "public void forEach(@NonNull TriConsumer<K, V> consumer)",
    "returnType" : "void",
    "comment" : "\n     * Iterate through all int-K pairs and operate on all of the values.\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public V add(int key, @NonNull K mapKey, @Nullable V obj)", "public void clear()", "public boolean contains(int key, @NonNull K mapKey)", "public void delete(int key)", "public void deleteAt(int keyIndex)", "public V delete(int key, @NonNull K mapKey)", "public void deleteAt(int keyIndex, int mapIndex)", "public V get(int key, @NonNull K mapKey)", "public V getOrDefault(int key, @NonNull K mapKey, V defaultValue)", "public int indexOfKey(int key)", "public int indexOfKey(int key, @NonNull K mapKey)", "public int keyAt(int index)", "public K keyAt(int keyIndex, int mapIndex)", "public int numMaps()", "public int numElementsForKey(int key)", "public int numElementsForKeyAt(int keyIndex)", "public V valueAt(int keyIndex, int mapIndex)", "public void forEach(@NonNull Consumer<V> consumer)", "public void forEach(@NonNull TriConsumer<K, V> consumer)" ],
  "variableNames" : [ "mData" ]
}