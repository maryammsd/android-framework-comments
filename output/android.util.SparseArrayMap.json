{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/util/SparseArrayMap.java",
  "packageName" : "android.util",
  "className" : "SparseArrayMap",
  "comment" : "\n * A sparse array of ArrayMaps, which is suitable for holding (userId, packageName)->object\n * associations.\n *\n * @param <T> Any class\n * @hide\n ",
  "variables" : [ {
    "name" : "mData",
    "type" : "SparseArray<ArrayMap<String, T>>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void add(int key, @NonNull String mapKey, @Nullable T obj)",
    "returnType" : "void",
    "comment" : " Add an entry associating obj with the int-String pair. ",
    "links" : [ ]
  }, {
    "name" : "public void clear()",
    "returnType" : "void",
    "comment" : " Remove all entries from the map. ",
    "links" : [ ]
  }, {
    "name" : "public boolean contains(int key, @NonNull String mapKey)",
    "returnType" : "boolean",
    "comment" : " Return true if the structure contains an explicit entry for the int-String pair. ",
    "links" : [ ]
  }, {
    "name" : "public void delete(int key)",
    "returnType" : "void",
    "comment" : " Removes all the data for the key, if there was any. ",
    "links" : [ ]
  }, {
    "name" : "public T delete(int key, @NonNull String mapKey)",
    "returnType" : "T",
    "comment" : "\n     * Removes the data for the key and mapKey, if there was any.\n     *\n     * @return Returns the value that was stored under the keys, or null if there was none.\n     ",
    "links" : [ ]
  }, {
    "name" : "public T get(int key, @NonNull String mapKey)",
    "returnType" : "T",
    "comment" : "\n     * Get the value associated with the int-String pair.\n     ",
    "links" : [ ]
  }, {
    "name" : "public T getOrDefault(int key, @NonNull String mapKey, T defaultValue)",
    "returnType" : "T",
    "comment" : "\n     * Returns the value to which the specified key and mapKey are mapped, or defaultValue if this\n     * map contains no mapping for them.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int indexOfKey(int key)",
    "returnType" : "int",
    "comment" : " @see SparseArray#indexOfKey ",
    "links" : [ ]
  }, {
    "name" : "public int indexOfKey(int key, @NonNull String mapKey)",
    "returnType" : "int",
    "comment" : "\n     * Returns the index of the mapKey.\n     *\n     * @see SparseArray#indexOfKey\n     ",
    "links" : [ ]
  }, {
    "name" : "public int keyAt(int index)",
    "returnType" : "int",
    "comment" : " Returns the key at the given index. ",
    "links" : [ ]
  }, {
    "name" : "public String keyAt(int keyIndex, int mapIndex)",
    "returnType" : "String",
    "comment" : " Returns the map's key at the given mapIndex for the given keyIndex. ",
    "links" : [ ]
  }, {
    "name" : "public int numMaps()",
    "returnType" : "int",
    "comment" : " Returns the size of the outer array. ",
    "links" : [ ]
  }, {
    "name" : "public int numElementsForKey(int key)",
    "returnType" : "int",
    "comment" : " Returns the number of elements in the map of the given key. ",
    "links" : [ ]
  }, {
    "name" : "public T valueAt(int keyIndex, int mapIndex)",
    "returnType" : "T",
    "comment" : " Returns the value T at the given key and map index. ",
    "links" : [ ]
  }, {
    "name" : "public void forEach(@NonNull Consumer<T> consumer)",
    "returnType" : "void",
    "comment" : " Iterate through all int-String pairs and operate on all of the values. ",
    "links" : [ ]
  } ],
  "variableNames" : [ "mData" ],
  "methodNames" : [ "public void add(int key, @NonNull String mapKey, @Nullable T obj)", "public void clear()", "public boolean contains(int key, @NonNull String mapKey)", "public void delete(int key)", "public T delete(int key, @NonNull String mapKey)", "public T get(int key, @NonNull String mapKey)", "public T getOrDefault(int key, @NonNull String mapKey, T defaultValue)", "public int indexOfKey(int key)", "public int indexOfKey(int key, @NonNull String mapKey)", "public int keyAt(int index)", "public String keyAt(int keyIndex, int mapIndex)", "public int numMaps()", "public int numElementsForKey(int key)", "public T valueAt(int keyIndex, int mapIndex)", "public void forEach(@NonNull Consumer<T> consumer)" ]
}