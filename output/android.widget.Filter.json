{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/widget/Filter.java",
  "packageName" : "android.widget",
  "className" : "Filter",
  "comment" : "\n * <p>A filter constrains data with a filtering pattern.</p>\n *\n * <p>Filters are usually created by {@link android.widget.Filterable}\n * classes.</p>\n *\n * <p>Filtering operations performed by calling {@link #filter(CharSequence)} or\n * {@link #filter(CharSequence, android.widget.Filter.FilterListener)} are\n * performed asynchronously. When these methods are called, a filtering request\n * is posted in a request queue and processed later. Any call to one of these\n * methods will cancel any previous non-executed filtering request.</p>\n *\n * @see android.widget.Filterable\n ",
  "links" : [ "#filter(CharSequence)", "#filter(CharSequence", "android.widget.Filterable" ],
  "variables" : [ {
    "name" : "LOG_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "THREAD_NAME",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FILTER_TOKEN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FINISH_TOKEN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mThreadHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mResultHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDelayer",
    "type" : "Delayer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setDelayer(Delayer delayer)",
    "returnType" : "void",
    "comment" : "\n     * Provide an interface that decides how long to delay the message for a given query.  Useful\n     * for heuristics such as posting a delay for the delete key to avoid doing any work while the\n     * user holds down the delete key.\n     *\n     * @param delayer The delayer.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void filter(CharSequence constraint)",
    "returnType" : "void",
    "comment" : "\n     * <p>Starts an asynchronous filtering operation. Calling this method\n     * cancels all previous non-executed filtering requests and posts a new\n     * filtering request that will be executed later.</p>\n     *\n     * @param constraint the constraint used to filter the data\n     *\n     * @see #filter(CharSequence, android.widget.Filter.FilterListener)\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void filter(CharSequence constraint, FilterListener listener)",
    "returnType" : "void",
    "comment" : "\n     * <p>Starts an asynchronous filtering operation. Calling this method\n     * cancels all previous non-executed filtering requests and posts a new\n     * filtering request that will be executed later.</p>\n     *\n     * <p>Upon completion, the listener is notified.</p>\n     *\n     * @param constraint the constraint used to filter the data\n     * @param listener a listener notified upon completion of the operation\n     *\n     * @see #filter(CharSequence)\n     * @see #performFiltering(CharSequence)\n     * @see #publishResults(CharSequence, android.widget.Filter.FilterResults)\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract FilterResults performFiltering(CharSequence constraint)",
    "returnType" : "FilterResults",
    "comment" : "\n     * <p>Invoked in a worker thread to filter the data according to the\n     * constraint. Subclasses must implement this method to perform the\n     * filtering operation. Results computed by the filtering operation\n     * must be returned as a {@link android.widget.Filter.FilterResults} that\n     * will then be published in the UI thread through\n     * {@link #publishResults(CharSequence,\n     * android.widget.Filter.FilterResults)}.</p>\n     *\n     * <p><strong>Contract:</strong> When the constraint is null, the original\n     * data must be restored.</p>\n     *\n     * @param constraint the constraint used to filter the data\n     * @return the results of the filtering operation\n     *\n     * @see #filter(CharSequence, android.widget.Filter.FilterListener)\n     * @see #publishResults(CharSequence, android.widget.Filter.FilterResults)\n     * @see android.widget.Filter.FilterResults\n     ",
    "links" : [ "android.widget.Filter.FilterResults", "#publishResults(CharSequence" ]
  }, {
    "name" : "protected abstract void publishResults(CharSequence constraint, FilterResults results)",
    "returnType" : "void",
    "comment" : "\n     * <p>Invoked in the UI thread to publish the filtering results in the\n     * user interface. Subclasses must implement this method to display the\n     * results computed in {@link #performFiltering}.</p>\n     *\n     * @param constraint the constraint used to filter the data\n     * @param results the results of the filtering operation\n     *\n     * @see #filter(CharSequence, android.widget.Filter.FilterListener)\n     * @see #performFiltering(CharSequence)\n     * @see android.widget.Filter.FilterResults\n     ",
    "links" : [ "#performFiltering" ]
  }, {
    "name" : "public CharSequence convertResultToString(Object resultValue)",
    "returnType" : "CharSequence",
    "comment" : "\n     * <p>Converts a value from the filtered set into a CharSequence. Subclasses\n     * should override this method to convert their results. The default\n     * implementation returns an empty String for null values or the default\n     * String representation of the value.</p>\n     *\n     * @param resultValue the value to convert to a CharSequence\n     * @return a CharSequence representing the value\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setDelayer(Delayer delayer)", "public final void filter(CharSequence constraint)", "public final void filter(CharSequence constraint, FilterListener listener)", "protected abstract FilterResults performFiltering(CharSequence constraint)", "protected abstract void publishResults(CharSequence constraint, FilterResults results)", "public CharSequence convertResultToString(Object resultValue)" ],
  "variableNames" : [ "LOG_TAG", "THREAD_NAME", "FILTER_TOKEN", "FINISH_TOKEN", "mThreadHandler", "mResultHandler", "mDelayer", "mLock" ]
}