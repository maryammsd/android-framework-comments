{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/content/pm/dex/ArtManager.java",
  "packageName" : "android.content.pm.dex",
  "className" : "ArtManager",
  "comment" : "\n * Class for retrieving various kinds of information related to the runtime artifacts of\n * packages that are currently installed on the device.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SNAPSHOT_FAILED_PACKAGE_NOT_FOUND",
    "type" : "int",
    "comment" : " The snapshot failed because the package was not found. ",
    "links" : [ ]
  }, {
    "name" : "SNAPSHOT_FAILED_CODE_PATH_NOT_FOUND",
    "type" : "int",
    "comment" : " The snapshot failed because the package code path does not exist. ",
    "links" : [ ]
  }, {
    "name" : "SNAPSHOT_FAILED_INTERNAL_ERROR",
    "type" : "int",
    "comment" : " The snapshot failed because of an internal error (e.g. error during opening profiles). ",
    "links" : [ ]
  }, {
    "name" : "PROFILE_APPS",
    "type" : "int",
    "comment" : " Constant used for applications profiles. ",
    "links" : [ ]
  }, {
    "name" : "PROFILE_BOOT_IMAGE",
    "type" : "int",
    "comment" : " Constant used for the boot image profile. ",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mArtManager",
    "type" : "IArtManager",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void snapshotRuntimeProfile(@ProfileType int profileType, @Nullable String packageName, @Nullable String codePath, @NonNull @CallbackExecutor Executor executor, @NonNull SnapshotRuntimeProfileCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Snapshots a runtime profile according to the {@code profileType} parameter.\n     *\n     * If {@code profileType} is {@link ArtManager#PROFILE_APPS} the method will snapshot\n     * the profile for for an apk belonging to the package {@code packageName}.\n     * The apk is identified by {@code codePath}.\n     *\n     * If {@code profileType} is {@code ArtManager.PROFILE_BOOT_IMAGE} the method will snapshot\n     * the profile for the boot image. In this case {@code codePath can be null}. The parameters\n     * {@code packageName} and {@code codePath} are ignored.\n     *u\n     * The calling process must have {@code android.permission.READ_RUNTIME_PROFILE} permission.\n     *\n     * The result will be posted on the {@code executor} using the given {@code callback}.\n     * The profile will be available as a read-only {@link android.os.ParcelFileDescriptor}.\n     *\n     * This method will throw {@link IllegalStateException} if\n     * {@link ArtManager#isRuntimeProfilingEnabled(int)} does not return true for the given\n     * {@code profileType}.\n     *\n     * @param profileType the type of profile that should be snapshot (boot image or app)\n     * @param packageName the target package name or null if the target is the boot image\n     * @param codePath the code path for which the profile should be retrieved or null if\n     *                 the target is the boot image\n     * @param callback the callback which should be used for the result\n     * @param executor the executor which should be used to post the result\n     ",
    "links" : [ "IllegalStateException", "android.content.pm.dex.ArtManager#PROFILE_APPS", "android.os.ParcelFileDescriptor", "android.content.pm.dex.ArtManager#isRuntimeProfilingEnabled(int)" ]
  }, {
    "name" : "public boolean isRuntimeProfilingEnabled(@ProfileType int profileType)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if runtime profiles are enabled for the given type, false otherwise.\n     *\n     * The calling process must have {@code android.permission.READ_RUNTIME_PROFILE} permission.\n     *\n     * @param profileType can be either {@link ArtManager#PROFILE_APPS}\n     *                    or {@link ArtManager#PROFILE_BOOT_IMAGE}\n     ",
    "links" : [ "android.content.pm.dex.ArtManager#PROFILE_BOOT_IMAGE", "android.content.pm.dex.ArtManager#PROFILE_APPS" ]
  }, {
    "name" : "public static String getProfileName(String splitName)",
    "returnType" : "String",
    "comment" : "\n     * Return the profile name for the given split. If {@code splitName} is null the\n     * method returns the profile name for the base apk.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getCurrentProfilePath(String packageName, int userId, String splitName)",
    "returnType" : "String",
    "comment" : "\n     * Return the path to the current profile corresponding to given package and split.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static File getProfileSnapshotFileForName(String packageName, String profileName)",
    "returnType" : "File",
    "comment" : "\n     * Return the snapshot profile file for the given package and profile name.\n     *\n     * KEEP in sync with installd dexopt.cpp.\n     * TODO(calin): inject the snapshot profile name from PM to avoid the dependency.\n     *\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "SNAPSHOT_FAILED_PACKAGE_NOT_FOUND", "SNAPSHOT_FAILED_CODE_PATH_NOT_FOUND", "SNAPSHOT_FAILED_INTERNAL_ERROR", "PROFILE_APPS", "PROFILE_BOOT_IMAGE", "mContext", "mArtManager" ],
  "methodNames" : [ "public void snapshotRuntimeProfile(@ProfileType int profileType, @Nullable String packageName, @Nullable String codePath, @NonNull @CallbackExecutor Executor executor, @NonNull SnapshotRuntimeProfileCallback callback)", "public boolean isRuntimeProfilingEnabled(@ProfileType int profileType)", "public static String getProfileName(String splitName)", "public static String getCurrentProfilePath(String packageName, int userId, String splitName)", "public static File getProfileSnapshotFileForName(String packageName, String profileName)" ]
}