{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/javax/net/ssl/X509KeyManager.java",
  "packageName" : "javax.net.ssl",
  "className" : "X509KeyManager",
  "comment" : "\n * Instances of this interface manage which X509 certificate-based\n * key pairs are used to authenticate the local side of a secure\n * socket.\n * <P>\n * During secure socket negotiations, implentations\n * call methods in this interface to:\n * <UL>\n * <LI> determine the set of aliases that are available for negotiations\n *      based on the criteria presented,\n * <LI> select the <i> best alias</i> based on\n *      the criteria presented, and\n * <LI> obtain the corresponding key material for given aliases.\n * </UL>\n * <P>\n * Note: the X509ExtendedKeyManager should be used in favor of this\n * class.\n *\n * @since 1.4\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public String[] getClientAliases(String keyType, Principal[] issuers)",
    "returnType" : "String[]",
    "comment" : "\n     * Get the matching aliases for authenticating the client side of a secure\n     * socket given the public key type and the list of\n     * certificate issuer authorities recognized by the peer (if any).\n     *\n     * @param keyType the key algorithm type name\n     * @param issuers the list of acceptable CA issuer subject names,\n     *          or null if it does not matter which issuers are used.\n     * @return an array of the matching alias names, or null if there\n     *          were no matches.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String chooseClientAlias(String[] keyType, Principal[] issuers, Socket socket)",
    "returnType" : "String",
    "comment" : "\n     * Choose an alias to authenticate the client side of a secure\n     * socket given the public key type and the list of\n     * certificate issuer authorities recognized by the peer (if any).\n     *\n     * @param keyType the key algorithm type name(s), ordered\n     *          with the most-preferred key type first.\n     * @param issuers the list of acceptable CA issuer subject names\n     *           or null if it does not matter which issuers are used.\n     * @param socket the socket to be used for this connection.  This\n     *          parameter can be null, which indicates that\n     *          implementations are free to select an alias applicable\n     *          to any socket.\n     * @return the alias name for the desired key, or null if there\n     *          are no matches.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String[] getServerAliases(String keyType, Principal[] issuers)",
    "returnType" : "String[]",
    "comment" : "\n     * Get the matching aliases for authenticating the server side of a secure\n     * socket given the public key type and the list of\n     * certificate issuer authorities recognized by the peer (if any).\n     *\n     * @param keyType the key algorithm type name\n     * @param issuers the list of acceptable CA issuer subject names\n     *          or null if it does not matter which issuers are used.\n     * @return an array of the matching alias names, or null\n     *          if there were no matches.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String chooseServerAlias(String keyType, Principal[] issuers, Socket socket)",
    "returnType" : "String",
    "comment" : "\n     * Choose an alias to authenticate the server side of a secure\n     * socket given the public key type and the list of\n     * certificate issuer authorities recognized by the peer (if any).\n     *\n     * @param keyType the key algorithm type name.\n     * @param issuers the list of acceptable CA issuer subject names\n     *          or null if it does not matter which issuers are used.\n     * @param socket the socket to be used for this connection.  This\n     *          parameter can be null, which indicates that\n     *          implementations are free to select an alias applicable\n     *          to any socket.\n     * @return the alias name for the desired key, or null if there\n     *          are no matches.\n     ",
    "links" : [ ]
  }, {
    "name" : "public X509Certificate[] getCertificateChain(String alias)",
    "returnType" : "X509Certificate[]",
    "comment" : "\n     * Returns the certificate chain associated with the given alias.\n     *\n     * @param alias the alias name\n     * @return the certificate chain (ordered with the user's certificate first\n     *          and the root certificate authority last), or null\n     *          if the alias can't be found.\n     ",
    "links" : [ ]
  }, {
    "name" : "public PrivateKey getPrivateKey(String alias)",
    "returnType" : "PrivateKey",
    "comment" : "\n     * Returns the key associated with the given alias.\n     *\n     * @param alias the alias name\n     * @return the requested key, or null if the alias can't be found.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public String[] getClientAliases(String keyType, Principal[] issuers)", "public String chooseClientAlias(String[] keyType, Principal[] issuers, Socket socket)", "public String[] getServerAliases(String keyType, Principal[] issuers)", "public String chooseServerAlias(String keyType, Principal[] issuers, Socket socket)", "public X509Certificate[] getCertificateChain(String alias)", "public PrivateKey getPrivateKey(String alias)" ],
  "variableNames" : [ ]
}