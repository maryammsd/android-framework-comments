{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/media/AudioAttributes.java",
  "packageName" : "android.media",
  "className" : "AudioAttributes",
  "comment" : "\n * A class to encapsulate a collection of attributes describing information about an audio\n * stream.\n * <p><code>AudioAttributes</code> supersede the notion of stream types (see for instance\n * {@link AudioManager#STREAM_MUSIC} or {@link AudioManager#STREAM_ALARM}) for defining the\n * behavior of audio playback. Attributes allow an application to specify more information than is\n * conveyed in a stream type by allowing the application to define:\n * <ul>\n * <li>usage: \"why\" you are playing a sound, what is this sound used for. This is achieved with\n *     the \"usage\" information. Examples of usage are {@link #USAGE_MEDIA} and {@link #USAGE_ALARM}.\n *     These two examples are the closest to stream types, but more detailed use cases are\n *     available. Usage information is more expressive than a stream type, and allows certain\n *     platforms or routing policies to use this information for more refined volume or routing\n *     decisions. Usage is the most important information to supply in <code>AudioAttributes</code>\n *     and it is recommended to build any instance with this information supplied, see\n *     {@link AudioAttributes.Builder} for exceptions.</li>\n * <li>content type: \"what\" you are playing. The content type expresses the general category of\n *     the content. This information is optional. But in case it is known (for instance\n *     {@link #CONTENT_TYPE_MOVIE} for a movie streaming service or {@link #CONTENT_TYPE_MUSIC} for\n *     a music playback application) this information might be used by the audio framework to\n *     selectively configure some audio post-processing blocks.</li>\n * <li>flags: \"how\" is playback to be affected, see the flag definitions for the specific playback\n *     behaviors they control. </li>\n * </ul>\n * <p><code>AudioAttributes</code> are used for example in one of the {@link AudioTrack}\n * constructors (see {@link AudioTrack#AudioTrack(AudioAttributes, AudioFormat, int, int, int)}),\n * to configure a {@link MediaPlayer}\n * (see {@link MediaPlayer#setAudioAttributes(AudioAttributes)} or a\n * {@link android.app.Notification} (see {@link android.app.Notification#audioAttributes}). An\n * <code>AudioAttributes</code> instance is built through its builder,\n * {@link AudioAttributes.Builder}.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CONTENT_TYPE_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * Content type value to use when the content type is unknown, or other than the ones defined.\n     ",
    "links" : [ ]
  }, {
    "name" : "CONTENT_TYPE_SPEECH",
    "type" : "int",
    "comment" : "\n     * Content type value to use when the content type is speech.\n     ",
    "links" : [ ]
  }, {
    "name" : "CONTENT_TYPE_MUSIC",
    "type" : "int",
    "comment" : "\n     * Content type value to use when the content type is music.\n     ",
    "links" : [ ]
  }, {
    "name" : "CONTENT_TYPE_MOVIE",
    "type" : "int",
    "comment" : "\n     * Content type value to use when the content type is a soundtrack, typically accompanying\n     * a movie or TV program.\n     ",
    "links" : [ ]
  }, {
    "name" : "CONTENT_TYPE_SONIFICATION",
    "type" : "int",
    "comment" : "\n     * Content type value to use when the content type is a sound used to accompany a user\n     * action, such as a beep or sound effect expressing a key click, or event, such as the\n     * type of a sound for a bonus being received in a game. These sounds are mostly synthesized\n     * or short Foley sounds.\n     ",
    "links" : [ ]
  }, {
    "name" : "USAGE_INVALID",
    "type" : "int",
    "comment" : "\n     * Invalid value, only ever used for an uninitialized usage value\n     ",
    "links" : [ ]
  }, {
    "name" : "USAGE_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * Usage value to use when the usage is unknown.\n     ",
    "links" : [ ]
  }, {
    "name" : "USAGE_MEDIA",
    "type" : "int",
    "comment" : "\n     * Usage value to use when the usage is media, such as music, or movie\n     * soundtracks.\n     ",
    "links" : [ ]
  }, {
    "name" : "USAGE_VOICE_COMMUNICATION",
    "type" : "int",
    "comment" : "\n     * Usage value to use when the usage is voice communications, such as telephony\n     * or VoIP.\n     ",
    "links" : [ ]
  }, {
    "name" : "USAGE_VOICE_COMMUNICATION_SIGNALLING",
    "type" : "int",
    "comment" : "\n     * Usage value to use when the usage is in-call signalling, such as with\n     * a \"busy\" beep, or DTMF tones.\n     ",
    "links" : [ ]
  }, {
    "name" : "USAGE_ALARM",
    "type" : "int",
    "comment" : "\n     * Usage value to use when the usage is an alarm (e.g. wake-up alarm).\n     ",
    "links" : [ ]
  }, {
    "name" : "USAGE_NOTIFICATION",
    "type" : "int",
    "comment" : "\n     * Usage value to use when the usage is notification. See other\n     * notification usages for more specialized uses.\n     ",
    "links" : [ ]
  }, {
    "name" : "USAGE_NOTIFICATION_RINGTONE",
    "type" : "int",
    "comment" : "\n     * Usage value to use when the usage is telephony ringtone.\n     ",
    "links" : [ ]
  }, {
    "name" : "USAGE_NOTIFICATION_COMMUNICATION_REQUEST",
    "type" : "int",
    "comment" : "\n     * Usage value to use when the usage is a request to enter/end a\n     * communication, such as a VoIP communication or video-conference.\n     ",
    "links" : [ ]
  }, {
    "name" : "USAGE_NOTIFICATION_COMMUNICATION_INSTANT",
    "type" : "int",
    "comment" : "\n     * Usage value to use when the usage is notification for an \"instant\"\n     * communication such as a chat, or SMS.\n     ",
    "links" : [ ]
  }, {
    "name" : "USAGE_NOTIFICATION_COMMUNICATION_DELAYED",
    "type" : "int",
    "comment" : "\n     * Usage value to use when the usage is notification for a\n     * non-immediate type of communication such as e-mail.\n     ",
    "links" : [ ]
  }, {
    "name" : "USAGE_NOTIFICATION_EVENT",
    "type" : "int",
    "comment" : "\n     * Usage value to use when the usage is to attract the user's attention,\n     * such as a reminder or low battery warning.\n     ",
    "links" : [ ]
  }, {
    "name" : "USAGE_ASSISTANCE_ACCESSIBILITY",
    "type" : "int",
    "comment" : "\n     * Usage value to use when the usage is for accessibility, such as with\n     * a screen reader.\n     ",
    "links" : [ ]
  }, {
    "name" : "USAGE_ASSISTANCE_NAVIGATION_GUIDANCE",
    "type" : "int",
    "comment" : "\n     * Usage value to use when the usage is driving or navigation directions.\n     ",
    "links" : [ ]
  }, {
    "name" : "USAGE_ASSISTANCE_SONIFICATION",
    "type" : "int",
    "comment" : "\n     * Usage value to use when the usage is sonification, such as  with user\n     * interface sounds.\n     ",
    "links" : [ ]
  }, {
    "name" : "USAGE_GAME",
    "type" : "int",
    "comment" : "\n     * Usage value to use when the usage is for game audio.\n     ",
    "links" : [ ]
  }, {
    "name" : "USAGE_VIRTUAL_SOURCE",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Usage value to use when feeding audio to the platform and replacing \"traditional\" audio\n     * source, such as audio capture devices.\n     ",
    "links" : [ ]
  }, {
    "name" : "USAGE_ASSISTANT",
    "type" : "int",
    "comment" : "\n     * Usage value to use for audio responses to user queries, audio instructions or help\n     * utterances.\n     ",
    "links" : [ ]
  }, {
    "name" : "USAGE_CALL_ASSISTANT",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Usage value to use for assistant voice interaction with remote caller on Cell and VoIP calls.\n     ",
    "links" : [ ]
  }, {
    "name" : "SYSTEM_USAGE_OFFSET",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "USAGE_EMERGENCY",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Usage value to use when the usage is an emergency.\n     ",
    "links" : [ ]
  }, {
    "name" : "USAGE_SAFETY",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Usage value to use when the usage is a safety sound.\n     ",
    "links" : [ ]
  }, {
    "name" : "USAGE_VEHICLE_STATUS",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Usage value to use when the usage is a vehicle status.\n     ",
    "links" : [ ]
  }, {
    "name" : "USAGE_ANNOUNCEMENT",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Usage value to use when the usage is an announcement.\n     ",
    "links" : [ ]
  }, {
    "name" : "SUPPRESSIBLE_NOTIFICATION",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Denotes a usage for notifications that do not expect immediate intervention from the user,\n     * will be muted when the Zen mode disables notifications\n     * @see #SUPPRESSIBLE_USAGES\n     ",
    "links" : [ ]
  }, {
    "name" : "SUPPRESSIBLE_CALL",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Denotes a usage for notifications that do expect immediate intervention from the user,\n     * will be muted when the Zen mode disables calls\n     * @see #SUPPRESSIBLE_USAGES\n     ",
    "links" : [ ]
  }, {
    "name" : "SUPPRESSIBLE_NEVER",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Denotes a usage that is never going to be muted, even in Total Silence.\n     * @see #SUPPRESSIBLE_USAGES\n     ",
    "links" : [ ]
  }, {
    "name" : "SUPPRESSIBLE_ALARM",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Denotes a usage for alarms,\n     * will be muted when the Zen mode priority doesn't allow alarms or in Alarms Only Mode\n     * @see #SUPPRESSIBLE_USAGES\n     ",
    "links" : [ ]
  }, {
    "name" : "SUPPRESSIBLE_MEDIA",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Denotes a usage for media, game, assistant, and navigation\n     * will be muted when the Zen priority mode doesn't allow media\n     * @see #SUPPRESSIBLE_USAGES\n     ",
    "links" : [ ]
  }, {
    "name" : "SUPPRESSIBLE_SYSTEM",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Denotes a usage for sounds not caught in SUPPRESSIBLE_NOTIFICATION,\n     * SUPPRESSIBLE_CALL,SUPPRESSIBLE_NEVER, SUPPRESSIBLE_ALARM or SUPPRESSIBLE_MEDIA.\n     * This includes sonification sounds.\n     * These will be muted when the Zen priority mode doesn't allow system sounds\n     * @see #SUPPRESSIBLE_USAGES\n     ",
    "links" : [ ]
  }, {
    "name" : "SUPPRESSIBLE_USAGES",
    "type" : "SparseIntArray",
    "comment" : "\n     * @hide\n     * Array of all usage types for calls and notifications to assign the suppression behavior,\n     * used by the Zen mode restrictions.\n     * @see com.android.server.notification.ZenModeHelper\n     ",
    "links" : [ ]
  }, {
    "name" : "SDK_USAGES",
    "type" : "int[]",
    "comment" : "\n     * @hide\n     * Array of all usage types exposed in the SDK that applications can use.\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_AUDIBILITY_ENFORCED",
    "type" : "int",
    "comment" : "\n     * Flag defining a behavior where the audibility of the sound will be ensured by the system.\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_SECURE",
    "type" : "int",
    "comment" : " TODO  add in FLAG_ALL_PUBLIC when supported and in public API",
    "links" : [ ]
  }, {
    "name" : "FLAG_SCO",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Flag to enable when the stream is associated with SCO usage.\n     * Internal use only for dealing with legacy STREAM_BLUETOOTH_SCO\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_BEACON",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Flag defining a behavior where the system ensures that the playback of the sound will\n     * be compatible with its use as a broadcast for surrounding people and/or devices.\n     * Ensures audibility with no or minimal post-processing applied.\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_HW_AV_SYNC",
    "type" : "int",
    "comment" : "\n     * Flag requesting the use of an output stream supporting hardware A/V synchronization.\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_HW_HOTWORD",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Flag requesting capture from the source used for hardware hotword detection.\n     * To be used with capture preset MediaRecorder.AudioSource.HOTWORD or\n     * MediaRecorder.AudioSource.VOICE_RECOGNITION.\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_BYPASS_INTERRUPTION_POLICY",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Flag requesting audible playback even under limited interruptions.\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_BYPASS_MUTE",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Flag requesting audible playback even when the underlying stream is muted.\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_LOW_LATENCY",
    "type" : "int",
    "comment" : "\n     * Flag requesting a low latency path when creating an AudioTrack.\n     * When using this flag, the sample rate must match the native sample rate\n     * of the device. Effects processing is also unavailable.\n     *\n     * Note that if this flag is used without specifying a bufferSizeInBytes then the\n     * AudioTrack's actual buffer size may be too small. It is recommended that a fairly\n     * large buffer should be specified when the AudioTrack is created.\n     * Then the actual size can be reduced by calling\n     * {@link AudioTrack#setBufferSizeInFrames(int)}. The buffer size can be optimized\n     * by lowering it after each write() call until the audio glitches, which is detected by calling\n     * {@link AudioTrack#getUnderrunCount()}. Then the buffer size can be increased\n     * until there are no glitches.\n     * This tuning step should be done while playing silence.\n     * This technique provides a compromise between latency and glitch rate.\n     *\n     * @deprecated Use {@link AudioTrack.Builder#setPerformanceMode(int)} with\n     * {@link AudioTrack#PERFORMANCE_MODE_LOW_LATENCY} to control performance.\n     ",
    "links" : [ "android.media.AudioTrack#getUnderrunCount()", "AudioTrack.Builder#setPerformanceMode(int)", "android.media.AudioTrack#setBufferSizeInFrames(int)", "android.media.AudioTrack#PERFORMANCE_MODE_LOW_LATENCY" ]
  }, {
    "name" : "FLAG_DEEP_BUFFER",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Flag requesting a deep buffer path when creating an {@code AudioTrack}.\n     *\n     * A deep buffer path, if available, may consume less power and is\n     * suitable for media playback where latency is not a concern.\n     * Use {@link AudioTrack.Builder#setPerformanceMode(int)} with\n     * {@link AudioTrack#PERFORMANCE_MODE_POWER_SAVING} to enable.\n     ",
    "links" : [ "AudioTrack.Builder#setPerformanceMode(int)", "android.media.AudioTrack#PERFORMANCE_MODE_POWER_SAVING" ]
  }, {
    "name" : "FLAG_NO_MEDIA_PROJECTION",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Flag specifying that the audio shall not be captured by third-party apps\n     * with a MediaProjection.\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_MUTE_HAPTIC",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Flag indicating force muting haptic channels.\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_NO_SYSTEM_CAPTURE",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Flag specifying that the audio shall not be captured by any apps, not even system apps.\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_CAPTURE_PRIVATE",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Flag requesting private audio capture. When set in audio attributes passed to an\n     * AudioRecord, this prevents a privileged Assistant from capturing audio while this\n     * AudioRecord is active.\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_ALL",
    "type" : "int",
    "comment" : " it is known as a boolean value outside of AudioAttributes.",
    "links" : [ ]
  }, {
    "name" : "FLAG_ALL_PUBLIC",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAG_ALL_API_SET",
    "type" : "int",
    "comment" : " mask of flags that can be set by SDK and System APIs through the Builder ",
    "links" : [ ]
  }, {
    "name" : "ALLOW_CAPTURE_BY_ALL",
    "type" : "int",
    "comment" : "\n     * Indicates that the audio may be captured by any app.\n     *\n     * For privacy, the following usages cannot be recorded: VOICE_COMMUNICATION*,\n     * USAGE_NOTIFICATION*, USAGE_ASSISTANCE* and USAGE_ASSISTANT.\n     *\n     * On {@link android.os.Build.VERSION_CODES#Q}, this means only {@link #USAGE_UNKNOWN},\n     * {@link #USAGE_MEDIA} and {@link #USAGE_GAME} may be captured.\n     *\n     * See {@link android.media.projection.MediaProjection} and\n     * {@link Builder#setAllowedCapturePolicy}.\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#Q", "#USAGE_UNKNOWN", "#USAGE_MEDIA", "android.media.projection.MediaProjection", "#USAGE_GAME", "#setAllowedCapturePolicy" ]
  }, {
    "name" : "ALLOW_CAPTURE_BY_SYSTEM",
    "type" : "int",
    "comment" : "\n     * Indicates that the audio may only be captured by system apps.\n     *\n     * System apps can capture for many purposes like accessibility, live captions, user guidance...\n     * but abide to the following restrictions:\n     *  - the audio cannot leave the device\n     *  - the audio cannot be passed to a third party app\n     *  - the audio cannot be recorded at a higher quality than 16kHz 16bit mono\n     *\n     * See {@link Builder#setAllowedCapturePolicy}.\n     ",
    "links" : [ "#setAllowedCapturePolicy" ]
  }, {
    "name" : "ALLOW_CAPTURE_BY_NONE",
    "type" : "int",
    "comment" : "\n     * Indicates that the audio is not to be recorded by any app, even if it is a system app.\n     *\n     * It is encouraged to use {@link #ALLOW_CAPTURE_BY_SYSTEM} instead of this value as system apps\n     * provide significant and useful features for the user (such as live captioning\n     * and accessibility).\n     *\n     * See {@link Builder#setAllowedCapturePolicy}.\n     ",
    "links" : [ "#ALLOW_CAPTURE_BY_SYSTEM", "#setAllowedCapturePolicy" ]
  }, {
    "name" : "mUsage",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContentType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSource",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFlags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTags",
    "type" : "HashSet<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFormattedTags",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBundle",
    "type" : "Bundle",
    "comment" : " lazy-initialized, may be null",
    "links" : [ ]
  }, {
    "name" : "FLATTEN_TAGS",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Used to indicate that when parcelling, the tags should be parcelled through the flattened\n     * formatted string, not through the array of strings.\n     * Keep in sync with frameworks/av/media/libmediaplayerservice/MediaPlayerService.cpp\n     * see definition of kAudioAttributesMarshallTagFlattenTags\n     ",
    "links" : [ ]
  }, {
    "name" : "ATTR_PARCEL_IS_NULL_BUNDLE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATTR_PARCEL_IS_VALID_BUNDLE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ALL_PARCEL_FLAGS",
    "type" : "int",
    "comment" : "\n     * When adding tags for writeToParcel(Parcel, int), add them in the list of flags (| NEW_FLAG)\n     ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<AudioAttributes>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getContentType()",
    "returnType" : "int",
    "comment" : "\n     * Return the content type.\n     * @return one of the values that can be set in {@link Builder#setContentType(int)}\n     ",
    "links" : [ "#setContentType(int)" ]
  }, {
    "name" : "public int getUsage()",
    "returnType" : "int",
    "comment" : "\n     * Return the usage.\n     * @return one of the values that can be set in {@link Builder#setUsage(int)}\n     ",
    "links" : [ "#setUsage(int)" ]
  }, {
    "name" : "public int getSystemUsage()",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     * Return the system usage.\n     * @return one of the values that can be set in {@link Builder#setUsage(int)} or\n     * {@link Builder#setSystemUsage(int)}\n     ",
    "links" : [ "#setSystemUsage(int)", "#setUsage(int)" ]
  }, {
    "name" : "public int getCapturePreset()",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     * Return the capture preset.\n     * @return one of the values that can be set in {@link Builder#setCapturePreset(int)} or a\n     *    negative value if none has been set.\n     ",
    "links" : [ "#setCapturePreset(int)" ]
  }, {
    "name" : "public int getFlags()",
    "returnType" : "int",
    "comment" : "\n     * Return the flags.\n     * @return a combined mask of all flags\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getAllFlags()",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     * Return all the flags, even the non-public ones.\n     * Internal use only\n     * @return a combined mask of all flags\n     ",
    "links" : [ ]
  }, {
    "name" : "public Bundle getBundle()",
    "returnType" : "Bundle",
    "comment" : "\n     * @hide\n     * Return the Bundle of data.\n     * @return a copy of the Bundle for this instance, may be null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Set<String> getTags()",
    "returnType" : "Set<String>",
    "comment" : "\n     * @hide\n     * Return the set of tags.\n     * @return a read-only set of all tags stored as strings.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean areHapticChannelsMuted()",
    "returnType" : "boolean",
    "comment" : "\n     * Return if haptic channels are muted.\n     * @return {@code true} if haptic channels are muted, {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getAllowedCapturePolicy()",
    "returnType" : "int",
    "comment" : "\n     * Return the capture policy.\n     * @return the capture policy set by {@link Builder#setAllowedCapturePolicy(int)} or\n     *         the default if it was not called.\n     ",
    "links" : [ "#setAllowedCapturePolicy(int)" ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dumpDebug(ProtoOutputStream proto, long fieldId)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public String usageToString()",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static String usageToString(int usage)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public String contentTypeToString()",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private static int usageForStreamType(int streamType)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static boolean isSystemUsage(@AttributeSystemUsage int usage)",
    "returnType" : "boolean",
    "comment" : "\n     * @param usage one of {@link AttributeSystemUsage},\n     *     {@link AttributeSystemUsage#USAGE_CALL_ASSISTANT},\n     *     {@link AttributeSystemUsage#USAGE_EMERGENCY},\n     *     {@link AttributeSystemUsage#USAGE_SAFETY},\n     *     {@link AttributeSystemUsage#USAGE_VEHICLE_STATUS},\n     *     {@link AttributeSystemUsage#USAGE_ANNOUNCEMENT}\n     * @return boolean indicating if the usage is a system usage or not\n     * @hide\n     ",
    "links" : [ "#USAGE_CALL_ASSISTANT", "#USAGE_EMERGENCY", "#USAGE_VEHICLE_STATUS", "#USAGE_SAFETY", "#USAGE_ANNOUNCEMENT", "AttributeSystemUsage" ]
  }, {
    "name" : "public int getVolumeControlStream()",
    "returnType" : "int",
    "comment" : "\n     * Returns the stream type matching this {@code AudioAttributes} instance for volume control.\n     * Use this method to derive the stream type needed to configure the volume\n     * control slider in an {@link android.app.Activity} with\n     * {@link android.app.Activity#setVolumeControlStream(int)} for playback conducted with these\n     * attributes.\n     * <BR>Do not use this method to set the stream type on an audio player object\n     * (e.g. {@link AudioTrack}, {@link MediaPlayer}) as this is deprecated,\n     * use {@code AudioAttributes} instead.\n     * @return a valid stream type for {@code Activity} or stream volume control that matches\n     *     the attributes, or {@link AudioManager#USE_DEFAULT_STREAM_TYPE} if there isn't a direct\n     *     match. Note that {@code USE_DEFAULT_STREAM_TYPE} is not a valid value\n     *     for {@link AudioManager#setStreamVolume(int, int, int)}.\n     ",
    "links" : [ "android.app.Activity#setVolumeControlStream(int)", "android.media.AudioManager#USE_DEFAULT_STREAM_TYPE", "android.media.MediaPlayer", "android.media.AudioTrack", "android.app.Activity", "android.media.AudioManager#setStreamVolume(int" ]
  }, {
    "name" : "public static int toLegacyStreamType(@NonNull AudioAttributes aa)",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     * Only use to get which stream type should be used for volume control, NOT for audio playback\n     * (all audio playback APIs are supposed to take AudioAttributes as input parameters)\n     * @param aa non-null AudioAttributes.\n     * @return a valid stream type for volume control that matches the attributes.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int toVolumeStreamType(boolean fromGetVolumeControlStream, AudioAttributes aa)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static int capturePolicyToFlags(@CapturePolicy int capturePolicy, int flags)",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "CONTENT_TYPE_UNKNOWN", "CONTENT_TYPE_SPEECH", "CONTENT_TYPE_MUSIC", "CONTENT_TYPE_MOVIE", "CONTENT_TYPE_SONIFICATION", "USAGE_INVALID", "USAGE_UNKNOWN", "USAGE_MEDIA", "USAGE_VOICE_COMMUNICATION", "USAGE_VOICE_COMMUNICATION_SIGNALLING", "USAGE_ALARM", "USAGE_NOTIFICATION", "USAGE_NOTIFICATION_RINGTONE", "USAGE_NOTIFICATION_COMMUNICATION_REQUEST", "USAGE_NOTIFICATION_COMMUNICATION_INSTANT", "USAGE_NOTIFICATION_COMMUNICATION_DELAYED", "USAGE_NOTIFICATION_EVENT", "USAGE_ASSISTANCE_ACCESSIBILITY", "USAGE_ASSISTANCE_NAVIGATION_GUIDANCE", "USAGE_ASSISTANCE_SONIFICATION", "USAGE_GAME", "USAGE_VIRTUAL_SOURCE", "USAGE_ASSISTANT", "USAGE_CALL_ASSISTANT", "SYSTEM_USAGE_OFFSET", "USAGE_EMERGENCY", "USAGE_SAFETY", "USAGE_VEHICLE_STATUS", "USAGE_ANNOUNCEMENT", "SUPPRESSIBLE_NOTIFICATION", "SUPPRESSIBLE_CALL", "SUPPRESSIBLE_NEVER", "SUPPRESSIBLE_ALARM", "SUPPRESSIBLE_MEDIA", "SUPPRESSIBLE_SYSTEM", "SUPPRESSIBLE_USAGES", "SDK_USAGES", "FLAG_AUDIBILITY_ENFORCED", "FLAG_SECURE", "FLAG_SCO", "FLAG_BEACON", "FLAG_HW_AV_SYNC", "FLAG_HW_HOTWORD", "FLAG_BYPASS_INTERRUPTION_POLICY", "FLAG_BYPASS_MUTE", "FLAG_LOW_LATENCY", "FLAG_DEEP_BUFFER", "FLAG_NO_MEDIA_PROJECTION", "FLAG_MUTE_HAPTIC", "FLAG_NO_SYSTEM_CAPTURE", "FLAG_CAPTURE_PRIVATE", "FLAG_ALL", "FLAG_ALL_PUBLIC", "FLAG_ALL_API_SET", "ALLOW_CAPTURE_BY_ALL", "ALLOW_CAPTURE_BY_SYSTEM", "ALLOW_CAPTURE_BY_NONE", "mUsage", "mContentType", "mSource", "mFlags", "mTags", "mFormattedTags", "mBundle", "FLATTEN_TAGS", "ATTR_PARCEL_IS_NULL_BUNDLE", "ATTR_PARCEL_IS_VALID_BUNDLE", "ALL_PARCEL_FLAGS", "CREATOR" ],
  "methodNames" : [ "public int getContentType()", "public int getUsage()", "public int getSystemUsage()", "public int getCapturePreset()", "public int getFlags()", "public int getAllFlags()", "public Bundle getBundle()", "public Set<String> getTags()", "public boolean areHapticChannelsMuted()", "public int getAllowedCapturePolicy()", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)", "public boolean equals(Object o)", "public int hashCode()", "public String toString()", "public void dumpDebug(ProtoOutputStream proto, long fieldId)", "public String usageToString()", "public static String usageToString(int usage)", "public String contentTypeToString()", "private static int usageForStreamType(int streamType)", "public static boolean isSystemUsage(@AttributeSystemUsage int usage)", "public int getVolumeControlStream()", "public static int toLegacyStreamType(@NonNull AudioAttributes aa)", "private static int toVolumeStreamType(boolean fromGetVolumeControlStream, AudioAttributes aa)", "public static int capturePolicyToFlags(@CapturePolicy int capturePolicy, int flags)" ]
}