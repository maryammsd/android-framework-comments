{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/soundtrigger_middleware/ISoundTriggerModule.java",
  "packageName" : "android.media.soundtrigger_middleware",
  "className" : "Proxy",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "mRemote",
    "type" : "android.os.IBinder",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public android.os.IBinder asBinder()",
    "returnType" : "android.os.IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public java.lang.String getInterfaceDescriptor()",
    "returnType" : "java.lang.String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int loadModel(android.media.soundtrigger.SoundModel model) throws android.os.RemoteException",
    "returnType" : "int",
    "comment" : "\n       * Load a sound model. Will return a handle to the model on success or will throw a\n       * ServiceSpecificException with one of the {@link Status} error codes upon a recoverable error\n       * (for example, lack of resources of loading a model at the time of call.\n       * Model must eventually be unloaded using {@link #unloadModel(int)} prior to detaching.\n       * \n       * May throw a ServiceSpecificException with an RESOURCE_CONTENTION status to indicate that\n       * resources required for loading the model are currently consumed by other clients.\n       ",
    "links" : [ "Status", "#unloadModel(int)" ]
  }, {
    "name" : "public int loadPhraseModel(android.media.soundtrigger.PhraseSoundModel model) throws android.os.RemoteException",
    "returnType" : "int",
    "comment" : "\n       * Load a phrase sound model. Will return a handle to the model on success or will throw a\n       * ServiceSpecificException with one of the {@link Status} error codes upon a recoverable error\n       * (for example, lack of resources of loading a model at the time of call.\n       * Model must eventually be unloaded using unloadModel prior to detaching.\n       * \n       * May throw a ServiceSpecificException with an RESOURCE_CONTENTION status to indicate that\n       * resources required for loading the model are currently consumed by other clients.\n       ",
    "links" : [ "Status" ]
  }, {
    "name" : "public void unloadModel(int modelHandle) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n       * Unload a model, previously loaded with loadModel or loadPhraseModel. After unloading, model\n       * can no longer be used for recognition and the resources occupied by it are released.\n       * Model must not be active at the time of unloading. Cient may call stopRecognition to ensure\n       * that.\n       ",
    "links" : [ ]
  }, {
    "name" : "public android.os.IBinder startRecognition(int modelHandle, android.media.soundtrigger.RecognitionConfig config) throws android.os.RemoteException",
    "returnType" : "android.os.IBinder",
    "comment" : "\n       * Initiate recognition on a previously loaded model.\n       * Recognition event would eventually be delivered via the client-provided callback, typically\n       * supplied during attachment to this interface.\n       * \n       * Once a recognition event is passed to the client, the recognition automatically become\n       * inactive, unless the event is of the RecognitionStatus.FORCED kind. Client can also shut down\n       * the recognition explicitly, via stopRecognition.\n       * \n       * May throw a ServiceSpecificException with an RESOURCE_CONTENTION status to indicate that\n       * resources required for starting the model are currently consumed by other clients.\n       * @return - A token delivered along with future recognition events.\n       ",
    "links" : [ ]
  }, {
    "name" : "public void stopRecognition(int modelHandle) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n       * Stop a recognition of a previously active recognition. Will NOT generate a recognition event.\n       * This call is idempotent - calling it on an inactive model has no effect. However, it must\n       * only be used with a loaded model handle.\n       ",
    "links" : [ ]
  }, {
    "name" : "public void forceRecognitionEvent(int modelHandle) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n       * Force generation of a recognition event. Handle must be that of a loaded model. If\n       * recognition is inactive, will do nothing. If recognition is active, will asynchronously\n       * deliever an event with RecognitionStatus.FORCED status and leave recognition in active state.\n       * To avoid any race conditions, once an event signalling the automatic stopping of recognition\n       * is sent, no more forced events will get sent (even if previously requested) until recognition\n       * is explicitly started again.\n       * \n       * Since not all module implementations support this feature, may throw a\n       * ServiceSpecificException with an OPERATION_NOT_SUPPORTED status.\n       ",
    "links" : [ ]
  }, {
    "name" : "public void setModelParameter(int modelHandle, int modelParam, int value) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n       * Set a model specific parameter with the given value. This parameter\n       * will keep its value for the duration the model is loaded regardless of starting and stopping\n       * recognition. Once the model is unloaded, the value will be lost.\n       * It is expected to check if the handle supports the parameter via the\n       * queryModelParameterSupport API prior to calling this method.\n       * \n       * @param modelHandle The sound model handle indicating which model to modify parameters\n       * @param modelParam Parameter to set which will be validated against the\n       *                   ModelParameter type.\n       * @param value The value to set for the given model parameter\n       ",
    "links" : [ ]
  }, {
    "name" : "public int getModelParameter(int modelHandle, int modelParam) throws android.os.RemoteException",
    "returnType" : "int",
    "comment" : "\n       * Get a model specific parameter. This parameter will keep its value\n       * for the duration the model is loaded regardless of starting and stopping recognition.\n       * Once the model is unloaded, the value will be lost. If the value is not set, a default\n       * value is returned. See ModelParameter for parameter default values.\n       * It is expected to check if the handle supports the parameter via the\n       * queryModelParameterSupport API prior to calling this method.\n       * \n       * @param modelHandle The sound model associated with given modelParam\n       * @param modelParam Parameter to set which will be validated against the\n       *                   ModelParameter type.\n       * @return Value set to the requested parameter.\n       ",
    "links" : [ ]
  }, {
    "name" : "public android.media.soundtrigger.ModelParameterRange queryModelParameterSupport(int modelHandle, int modelParam) throws android.os.RemoteException",
    "returnType" : "android.media.soundtrigger.ModelParameterRange",
    "comment" : "\n       * Determine if parameter control is supported for the given model handle, and its valid value\n       * range if it is.\n       * \n       * @param modelHandle The sound model handle indicating which model to query\n       * @param modelParam Parameter to set which will be validated against the\n       *                   ModelParameter type.\n       * @return If parameter is supported, the return value is its valid range, otherwise null.\n       ",
    "links" : [ ]
  }, {
    "name" : "public void detach() throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n       * Detach from the module, releasing any active resources.\n       * This will ensure the client callback is no longer called after this call returns.\n       * All models must have been unloaded prior to calling this method.\n       ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public android.os.IBinder asBinder()", "public java.lang.String getInterfaceDescriptor()", "public int loadModel(android.media.soundtrigger.SoundModel model) throws android.os.RemoteException", "public int loadPhraseModel(android.media.soundtrigger.PhraseSoundModel model) throws android.os.RemoteException", "public void unloadModel(int modelHandle) throws android.os.RemoteException", "public android.os.IBinder startRecognition(int modelHandle, android.media.soundtrigger.RecognitionConfig config) throws android.os.RemoteException", "public void stopRecognition(int modelHandle) throws android.os.RemoteException", "public void forceRecognitionEvent(int modelHandle) throws android.os.RemoteException", "public void setModelParameter(int modelHandle, int modelParam, int value) throws android.os.RemoteException", "public int getModelParameter(int modelHandle, int modelParam) throws android.os.RemoteException", "public android.media.soundtrigger.ModelParameterRange queryModelParameterSupport(int modelHandle, int modelParam) throws android.os.RemoteException", "public void detach() throws android.os.RemoteException" ],
  "variableNames" : [ "mRemote" ]
}