{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/net/wifi/aware/DiscoverySessionCallback.java",
  "packageName" : "android.net.wifi.aware",
  "className" : "DiscoverySessionCallback",
  "comment" : "\n * Base class for Aware session events callbacks. Should be extended by\n * applications wanting notifications. The callbacks are set when a\n * publish or subscribe session is created using\n * {@link WifiAwareSession#publish(PublishConfig, DiscoverySessionCallback,\n * android.os.Handler)} or\n * {@link WifiAwareSession#subscribe(SubscribeConfig, DiscoverySessionCallback,\n * android.os.Handler)}.\n * <p>\n * A single callback is set at session creation - it cannot be replaced.\n ",
  "variables" : [ ],
  "methods" : [ {
    "name" : "public void onPublishStarted(@NonNull PublishDiscoverySession session)",
    "returnType" : "void",
    "comment" : "\n     * Called when a publish operation is started successfully in response to a\n     * {@link WifiAwareSession#publish(PublishConfig, DiscoverySessionCallback,\n     * android.os.Handler)} operation.\n     *\n     * @param session The {@link PublishDiscoverySession} used to control the\n     *            discovery session.\n     ",
    "links" : [ "WifiAwareSession#publish", "PublishDiscoverySession" ]
  }, {
    "name" : "public void onSubscribeStarted(@NonNull SubscribeDiscoverySession session)",
    "returnType" : "void",
    "comment" : "\n     * Called when a subscribe operation is started successfully in response to a\n     * {@link WifiAwareSession#subscribe(SubscribeConfig, DiscoverySessionCallback,\n     * android.os.Handler)} operation.\n     *\n     * @param session The {@link SubscribeDiscoverySession} used to control the\n     *            discovery session.\n     ",
    "links" : [ "WifiAwareSession#subscribe", "SubscribeDiscoverySession" ]
  }, {
    "name" : "public void onSessionConfigUpdated()",
    "returnType" : "void",
    "comment" : "\n     * Called when a publish or subscribe discovery session configuration update request\n     * succeeds. Called in response to\n     * {@link PublishDiscoverySession#updatePublish(PublishConfig)} or\n     * {@link SubscribeDiscoverySession#updateSubscribe(SubscribeConfig)}.\n     ",
    "links" : [ "PublishDiscoverySession#updatePublish", "SubscribeDiscoverySession#updateSubscribe" ]
  }, {
    "name" : "public void onSessionConfigFailed()",
    "returnType" : "void",
    "comment" : "\n     * Called when a publish or subscribe discovery session cannot be created:\n     * {@link WifiAwareSession#publish(PublishConfig, DiscoverySessionCallback,\n     * android.os.Handler)} or\n     * {@link WifiAwareSession#subscribe(SubscribeConfig, DiscoverySessionCallback,\n     * android.os.Handler)}, or when a configuration update fails:\n     * {@link PublishDiscoverySession#updatePublish(PublishConfig)} or\n     * {@link SubscribeDiscoverySession#updateSubscribe(SubscribeConfig)}.\n     * <p>\n     *     For discovery session updates failure leaves the session running with its previous\n     *     configuration - the discovery session is not terminated.\n     ",
    "links" : [ "WifiAwareSession#publish", "WifiAwareSession#subscribe", "PublishDiscoverySession#updatePublish", "SubscribeDiscoverySession#updateSubscribe" ]
  }, {
    "name" : "public void onSessionTerminated()",
    "returnType" : "void",
    "comment" : "\n     * Called when a discovery session (publish or subscribe) terminates. Termination may be due\n     * to user-request (either directly through {@link DiscoverySession#close()} or\n     * application-specified expiration, e.g. {@link PublishConfig.Builder#setTtlSec(int)}\n     * or {@link SubscribeConfig.Builder#setTtlSec(int)}).\n     ",
    "links" : [ "DiscoverySession#close", "PublishConfig.Builder#setTtlSec", "SubscribeConfig.Builder#setTtlSec" ]
  }, {
    "name" : "public void onServiceDiscovered(PeerHandle peerHandle, byte[] serviceSpecificInfo, List<byte[]> matchFilter)",
    "returnType" : "void",
    "comment" : "\n     * Called when a discovery (publish or subscribe) operation results in a\n     * service discovery.\n     * <p>\n     * Note that this method and\n     * {@link #onServiceDiscoveredWithinRange(PeerHandle, byte[], List, int)} may be called\n     * multiple times per service discovery.\n     *\n     * @param peerHandle An opaque handle to the peer matching our discovery operation.\n     * @param serviceSpecificInfo The service specific information (arbitrary\n     *            byte array) provided by the peer as part of its discovery\n     *            configuration.\n     * @param matchFilter The filter which resulted in this service discovery. For\n     * {@link PublishConfig#PUBLISH_TYPE_UNSOLICITED},\n     * {@link SubscribeConfig#SUBSCRIBE_TYPE_PASSIVE} discovery sessions this is the publisher's\n     *                    match filter. For {@link PublishConfig#PUBLISH_TYPE_SOLICITED},\n     *                    {@link SubscribeConfig#SUBSCRIBE_TYPE_ACTIVE} discovery sessions this\n     *                    is the subscriber's match filter.\n     ",
    "links" : [ "#onServiceDiscoveredWithinRange", "PublishConfig#PUBLISH_TYPE_UNSOLICITED", "SubscribeConfig#SUBSCRIBE_TYPE_PASSIVE", "PublishConfig#PUBLISH_TYPE_SOLICITED", "SubscribeConfig#SUBSCRIBE_TYPE_ACTIVE" ]
  }, {
    "name" : "public void onServiceDiscoveredWithinRange(PeerHandle peerHandle, byte[] serviceSpecificInfo, List<byte[]> matchFilter, int distanceMm)",
    "returnType" : "void",
    "comment" : "\n     * Called when a discovery (publish or subscribe) operation results in a\n     * service discovery. Called when a Subscribe service was configured with a range requirement\n     * {@link SubscribeConfig.Builder#setMinDistanceMm(int)} and/or\n     * {@link SubscribeConfig.Builder#setMaxDistanceMm(int)} and the Publish service was configured\n     * with {@link PublishConfig.Builder#setRangingEnabled(boolean)}.\n     * <p>\n     * If either Publisher or Subscriber does not enable Ranging, or if Ranging is temporarily\n     * disabled by the underlying device, service discovery proceeds without ranging and the\n     * {@link #onServiceDiscovered(PeerHandle, byte[], List)} is called.\n     * <p>\n     * Note that this method and {@link #onServiceDiscovered(PeerHandle, byte[], List)} may be\n     * called multiple times per service discovery.\n     *\n     * @param peerHandle An opaque handle to the peer matching our discovery operation.\n     * @param serviceSpecificInfo The service specific information (arbitrary\n     *            byte array) provided by the peer as part of its discovery\n     *            configuration.\n     * @param matchFilter The filter which resulted in this service discovery. For\n     * {@link PublishConfig#PUBLISH_TYPE_UNSOLICITED},\n     * {@link SubscribeConfig#SUBSCRIBE_TYPE_PASSIVE} discovery sessions this is the publisher's\n     *                    match filter. For {@link PublishConfig#PUBLISH_TYPE_SOLICITED},\n     *                    {@link SubscribeConfig#SUBSCRIBE_TYPE_ACTIVE} discovery sessions this\n     *                    is the subscriber's match filter.\n     * @param distanceMm The measured distance to the Publisher in mm. Note: the measured distance\n     *                   may be negative for very close devices.\n     ",
    "links" : [ "SubscribeConfig.Builder#setMinDistanceMm", "SubscribeConfig.Builder#setMaxDistanceMm", "PublishConfig.Builder#setRangingEnabled", "#onServiceDiscovered", "#onServiceDiscovered", "PublishConfig#PUBLISH_TYPE_UNSOLICITED", "SubscribeConfig#SUBSCRIBE_TYPE_PASSIVE", "PublishConfig#PUBLISH_TYPE_SOLICITED", "SubscribeConfig#SUBSCRIBE_TYPE_ACTIVE" ]
  }, {
    "name" : "public void onMessageSendSucceeded(@SuppressWarnings(\"unused\") int messageId)",
    "returnType" : "void",
    "comment" : "\n     * Called in response to\n     * {@link DiscoverySession#sendMessage(PeerHandle, int, byte[])}\n     * when a message is transmitted successfully - i.e. when it was received successfully by the\n     * peer (corresponds to an ACK being received).\n     * <p>\n     * Note that either this callback or\n     * {@link DiscoverySessionCallback#onMessageSendFailed(int)} will be\n     * received - never both.\n     *\n     * @param messageId The arbitrary message ID specified when sending the message.\n     ",
    "links" : [ "DiscoverySession#sendMessage", "DiscoverySessionCallback#onMessageSendFailed" ]
  }, {
    "name" : "public void onMessageSendFailed(@SuppressWarnings(\"unused\") int messageId)",
    "returnType" : "void",
    "comment" : "\n     * Called when message transmission initiated with\n     * {@link DiscoverySession#sendMessage(PeerHandle, int, byte[])} fails. E.g. when no ACK is\n     * received from the peer.\n     * <p>\n     * Note that either this callback or\n     * {@link DiscoverySessionCallback#onMessageSendSucceeded(int)} will be received\n     * - never both.\n     *\n     * @param messageId The arbitrary message ID specified when sending the message.\n     ",
    "links" : [ "DiscoverySession#sendMessage", "DiscoverySessionCallback#onMessageSendSucceeded" ]
  }, {
    "name" : "public void onMessageReceived(PeerHandle peerHandle, byte[] message)",
    "returnType" : "void",
    "comment" : "\n     * Called when a message is received from a discovery session peer - in response to the\n     * peer's {@link DiscoverySession#sendMessage(PeerHandle, int, byte[])}.\n     *\n     * @param peerHandle An opaque handle to the peer matching our discovery operation.\n     * @param message A byte array containing the message.\n     ",
    "links" : [ "DiscoverySession#sendMessage" ]
  } ],
  "variableNames" : [ ],
  "methodNames" : [ "public void onPublishStarted(@NonNull PublishDiscoverySession session)", "public void onSubscribeStarted(@NonNull SubscribeDiscoverySession session)", "public void onSessionConfigUpdated()", "public void onSessionConfigFailed()", "public void onSessionTerminated()", "public void onServiceDiscovered(PeerHandle peerHandle, byte[] serviceSpecificInfo, List<byte[]> matchFilter)", "public void onServiceDiscoveredWithinRange(PeerHandle peerHandle, byte[] serviceSpecificInfo, List<byte[]> matchFilter, int distanceMm)", "public void onMessageSendSucceeded(@SuppressWarnings(\"unused\") int messageId)", "public void onMessageSendFailed(@SuppressWarnings(\"unused\") int messageId)", "public void onMessageReceived(PeerHandle peerHandle, byte[] message)" ]
}