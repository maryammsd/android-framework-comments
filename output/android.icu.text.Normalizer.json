{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/text/Normalizer.java",
  "packageName" : "android.icu.text",
  "className" : "Normalizer",
  "comment" : "\n * Old Unicode normalization API.\n *\n * <p>This API has been replaced by the {@link Normalizer2} class and is only available\n * for backward compatibility. This class simply delegates to the Normalizer2 class.\n * There are two exceptions: The new API does not provide a replacement for\n * <code>QuickCheckResult</code> and <code>compare()</code>.\n *\n * <p><code>normalize</code> transforms Unicode text into an equivalent composed or\n * decomposed form, allowing for easier sorting and searching of text.\n * <code>normalize</code> supports the standard normalization forms described in\n * <a href=\"https://www.unicode.org/reports/tr15/\" target=\"unicode\">\n * Unicode Standard Annex #15 &mdash; Unicode Normalization Forms</a>.\n *\n * <p>Characters with accents or other adornments can be encoded in\n * several different ways in Unicode.  For example, take the character A-acute.\n * In Unicode, this can be encoded as a single character (the\n * \"composed\" form):\n *\n * <pre>\n *      00C1    LATIN CAPITAL LETTER A WITH ACUTE\n * </pre>\n *\n * or as two separate characters (the \"decomposed\" form):\n *\n * <pre>\n *      0041    LATIN CAPITAL LETTER A\n *      0301    COMBINING ACUTE ACCENT\n * </pre>\n *\n * <p>To a user of your program, however, both of these sequences should be\n * treated as the same \"user-level\" character \"A with acute accent\".  When you\n * are searching or comparing text, you must ensure that these two sequences are\n * treated equivalently.  In addition, you must handle characters with more than\n * one accent.  Sometimes the order of a character's combining accents is\n * significant, while in other cases accent sequences in different orders are\n * really equivalent.\n *\n * <p>Similarly, the string \"ffi\" can be encoded as three separate letters:\n *\n * <pre>\n *      0066    LATIN SMALL LETTER F\n *      0066    LATIN SMALL LETTER F\n *      0069    LATIN SMALL LETTER I\n * </pre>\n *\n * or as the single character\n *\n * <pre>\n *      FB03    LATIN SMALL LIGATURE FFI\n * </pre>\n *\n * <p>The ffi ligature is not a distinct semantic character, and strictly speaking\n * it shouldn't be in Unicode at all, but it was included for compatibility\n * with existing character sets that already provided it.  The Unicode standard\n * identifies such characters by giving them \"compatibility\" decompositions\n * into the corresponding semantic characters.  When sorting and searching, you\n * will often want to use these mappings.\n *\n * <p><code>normalize</code> helps solve these problems by transforming text into\n * the canonical composed and decomposed forms as shown in the first example\n * above. In addition, you can have it perform compatibility decompositions so\n * that you can treat compatibility characters the same as their equivalents.\n * Finally, <code>normalize</code> rearranges accents into the proper canonical\n * order, so that you do not have to worry about accent rearrangement on your\n * own.\n *\n * <p>Form FCD, \"Fast C or D\", is also designed for collation.\n * It allows to work on strings that are not necessarily normalized\n * with an algorithm (like in collation) that works under \"canonical closure\",\n * i.e., it treats precomposed characters and their decomposed equivalents the\n * same.\n *\n * <p>It is not a normalization form because it does not provide for uniqueness of\n * representation. Multiple strings may be canonically equivalent (their NFDs\n * are identical) and may all conform to FCD without being identical themselves.\n *\n * <p>The form is defined such that the \"raw decomposition\", the recursive\n * canonical decomposition of each character, results in a string that is\n * canonically ordered. This means that precomposed characters are allowed for\n * as long as their decompositions do not need canonical reordering.\n *\n * <p>Its advantage for a process like collation is that all NFD and most NFC texts\n * - and many unnormalized texts - already conform to FCD and do not need to be\n * normalized (NFD) for such a process. The FCD quick check will return YES for\n * most strings in practice.\n *\n * <p>normalize(FCD) may be implemented with NFD.\n *\n * <p>For more details on FCD see Unicode Technical Note #5 (Canonical Equivalence in Applications):\n * http://www.unicode.org/notes/tn5/#FCD\n *\n * <p>ICU collation performs either NFD or FCD normalization automatically if\n * normalization is turned on for the collator object. Beyond collation and\n * string search, normalized strings may be useful for string equivalence\n * comparisons, transliteration/transcription, unique representations, etc.\n *\n * <p>The W3C generally recommends to exchange texts in NFC.\n * Note also that most legacy character encodings use only precomposed forms and\n * often do not encode any combining marks by themselves. For conversion to such\n * character encodings the Unicode text needs to be normalized to NFC.\n * For more usage examples, see the Unicode Standard Annex.\n *\n * <p>Note: The Normalizer class also provides API for iterative normalization.\n * While the setIndex() and getIndex() refer to indices in the\n * underlying Unicode input text, the next() and previous() methods\n * iterate through characters in the normalized output.\n * This means that there is not necessarily a one-to-one correspondence\n * between characters returned by next() and previous() and the indices\n * passed to and returned from setIndex() and getIndex().\n * It is for this reason that Normalizer does not implement the CharacterIterator interface.\n ",
  "links" : [ "android.icu.text.Normalizer2" ],
  "variables" : [ {
    "name" : "text",
    "type" : "UCharacterIterator",
    "comment" : " The input text and our position in it",
    "links" : [ ]
  }, {
    "name" : "norm2",
    "type" : "Normalizer2",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mode",
    "type" : "Mode",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "options",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "currentIndex",
    "type" : "int",
    "comment" : " of the source in [currentIndex..nextIndex[ .",
    "links" : [ ]
  }, {
    "name" : "nextIndex",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "buffer",
    "type" : "StringBuilder",
    "comment" : " A buffer for holding intermediate results",
    "links" : [ ]
  }, {
    "name" : "bufferPos",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UNICODE_3_2",
    "type" : "int",
    "comment" : "\n     * Options bit set value to select Unicode 3.2 normalization\n     * (except NormalizationCorrections).\n     * At most one Unicode version can be selected at a time.\n     *\n     * @deprecated ICU 56 Use {@link FilteredNormalizer2} instead.\n     * @hide original deprecated declaration\n     ",
    "links" : [ "android.icu.text.FilteredNormalizer2" ]
  }, {
    "name" : "DONE",
    "type" : "int",
    "comment" : "\n     * Constant indicating that the end of the iteration has been reached.\n     * This is guaranteed to have the same value as {@link UCharacterIterator#DONE}.\n     *\n     * @deprecated ICU 56\n     * @hide original deprecated declaration\n     ",
    "links" : [ "android.icu.text.UCharacterIterator#DONE" ]
  }, {
    "name" : "NONE",
    "type" : "Mode",
    "comment" : "\n     * No decomposition/composition.\n     *\n     * @deprecated ICU 56 Use {@link Normalizer2} instead.\n     * @hide original deprecated declaration\n     ",
    "links" : [ "android.icu.text.Normalizer2" ]
  }, {
    "name" : "NFD",
    "type" : "Mode",
    "comment" : "\n     * Canonical decomposition.\n     *\n     * @deprecated ICU 56 Use {@link Normalizer2} instead.\n     * @hide original deprecated declaration\n     ",
    "links" : [ "android.icu.text.Normalizer2" ]
  }, {
    "name" : "NFKD",
    "type" : "Mode",
    "comment" : "\n     * Compatibility decomposition.\n     *\n     * @deprecated ICU 56 Use {@link Normalizer2} instead.\n     * @hide original deprecated declaration\n     ",
    "links" : [ "android.icu.text.Normalizer2" ]
  }, {
    "name" : "NFC",
    "type" : "Mode",
    "comment" : "\n     * Canonical decomposition followed by canonical composition.\n     *\n     * @deprecated ICU 56 Use {@link Normalizer2} instead.\n     * @hide original deprecated declaration\n     ",
    "links" : [ "android.icu.text.Normalizer2" ]
  }, {
    "name" : "DEFAULT",
    "type" : "Mode",
    "comment" : "\n     * Default normalization.\n     *\n     * @deprecated ICU 56 Use {@link Normalizer2} instead.\n     * @hide original deprecated declaration\n     ",
    "links" : [ "android.icu.text.Normalizer2" ]
  }, {
    "name" : "NFKC",
    "type" : "Mode",
    "comment" : "\n     * Compatibility decomposition followed by canonical composition.\n     *\n     * @deprecated ICU 56 Use {@link Normalizer2} instead.\n     * @hide original deprecated declaration\n     ",
    "links" : [ "android.icu.text.Normalizer2" ]
  }, {
    "name" : "FCD",
    "type" : "Mode",
    "comment" : "\n     * \"Fast C or D\" form.\n     *\n     * @deprecated ICU 56 Use {@link Normalizer2} instead.\n     * @hide original deprecated declaration\n     ",
    "links" : [ "android.icu.text.Normalizer2" ]
  }, {
    "name" : "NO_OP",
    "type" : "Mode",
    "comment" : "\n     * Null operation for use with the {@link android.icu.text.Normalizer constructors}\n     * and the static {@link #normalize normalize} method.  This value tells\n     * the <tt>Normalizer</tt> to do nothing but return unprocessed characters\n     * from the underlying String or CharacterIterator.  If you have code which\n     * requires raw text at some times and normalized text at others, you can\n     * use <tt>NO_OP</tt> for the cases where you want raw text, rather\n     * than having a separate code path that bypasses <tt>Normalizer</tt>\n     * altogether.\n     * <p>\n     * @see #setMode\n     * @deprecated ICU 2.8. Use Nomalizer.NONE\n     * @see #NONE\n     * @hide original deprecated declaration\n     ",
    "links" : [ "android.icu.text.Normalizer", "#normalize" ]
  }, {
    "name" : "COMPOSE",
    "type" : "Mode",
    "comment" : "\n     * Canonical decomposition followed by canonical composition.  Used with the\n     * {@link android.icu.text.Normalizer constructors} and the static\n     * {@link #normalize normalize} method to determine the operation to be\n     * performed.\n     * <p>\n     * If all optional features (<i>e.g.</i> {@link #IGNORE_HANGUL}) are turned\n     * off, this operation produces output that is in\n     * <a href=https://www.unicode.org/reports/tr15/>Unicode Canonical\n     * Form</a>\n     * <b>C</b>.\n     * <p>\n     * @see #setMode\n     * @deprecated ICU 2.8. Use Normalier.NFC\n     * @see #NFC\n     * @hide original deprecated declaration\n     ",
    "links" : [ "android.icu.text.Normalizer", "#IGNORE_HANGUL", "#normalize" ]
  }, {
    "name" : "COMPOSE_COMPAT",
    "type" : "Mode",
    "comment" : "\n     * Compatibility decomposition followed by canonical composition.\n     * Used with the {@link android.icu.text.Normalizer constructors} and the static\n     * {@link #normalize normalize} method to determine the operation to be\n     * performed.\n     * <p>\n     * If all optional features (<i>e.g.</i> {@link #IGNORE_HANGUL}) are turned\n     * off, this operation produces output that is in\n     * <a href=https://www.unicode.org/reports/tr15/>Unicode Canonical\n     * Form</a>\n     * <b>KC</b>.\n     * <p>\n     * @see #setMode\n     * @deprecated ICU 2.8. Use Normalizer.NFKC\n     * @see #NFKC\n     * @hide original deprecated declaration\n     ",
    "links" : [ "android.icu.text.Normalizer", "#IGNORE_HANGUL", "#normalize" ]
  }, {
    "name" : "DECOMP",
    "type" : "Mode",
    "comment" : "\n     * Canonical decomposition.  This value is passed to the\n     * {@link android.icu.text.Normalizer constructors} and the static\n     * {@link #normalize normalize}\n     * method to determine the operation to be performed.\n     * <p>\n     * If all optional features (<i>e.g.</i> {@link #IGNORE_HANGUL}) are turned\n     * off, this operation produces output that is in\n     * <a href=https://www.unicode.org/reports/tr15/>Unicode Canonical\n     * Form</a>\n     * <b>D</b>.\n     * <p>\n     * @see #setMode\n     * @deprecated ICU 2.8. Use Normalizer.NFD\n     * @see #NFD\n     * @hide original deprecated declaration\n     ",
    "links" : [ "android.icu.text.Normalizer", "#IGNORE_HANGUL", "#normalize" ]
  }, {
    "name" : "DECOMP_COMPAT",
    "type" : "Mode",
    "comment" : "\n     * Compatibility decomposition.  This value is passed to the\n     * {@link android.icu.text.Normalizer constructors} and the static\n     * {@link #normalize normalize}\n     * method to determine the operation to be performed.\n     * <p>\n     * If all optional features (<i>e.g.</i> {@link #IGNORE_HANGUL}) are turned\n     * off, this operation produces output that is in\n     * <a href=https://www.unicode.org/reports/tr15/>Unicode Canonical\n     * Form</a>\n     * <b>KD</b>.\n     * <p>\n     * @see #setMode\n     * @deprecated ICU 2.8. Use Normalizer.NFKD\n     * @see #NFKD\n     * @hide original deprecated declaration\n     ",
    "links" : [ "android.icu.text.Normalizer", "#IGNORE_HANGUL", "#normalize" ]
  }, {
    "name" : "IGNORE_HANGUL",
    "type" : "int",
    "comment" : "\n     * Option to disable Hangul/Jamo composition and decomposition.\n     * This option applies to Korean text,\n     * which can be represented either in the Jamo alphabet or in Hangul\n     * characters, which are really just two or three Jamo combined\n     * into one visual glyph.  Since Jamo takes up more storage space than\n     * Hangul, applications that process only Hangul text may wish to turn\n     * this option on when decomposing text.\n     * <p>\n     * The Unicode standard treats Hangul to Jamo conversion as a\n     * canonical decomposition, so this option must be turned <b>off</b> if you\n     * wish to transform strings into one of the standard\n     * <a href=\"https://www.unicode.org/reports/tr15/\" target=\"unicode\">\n     * Unicode Normalization Forms</a>.\n     * <p>\n     * @see #setOption\n     * @deprecated ICU 2.8. This option is no longer supported.\n     * @hide original deprecated declaration\n     ",
    "links" : [ ]
  }, {
    "name" : "NO",
    "type" : "QuickCheckResult",
    "comment" : "\n     * Indicates that string is not in the normalized format\n     ",
    "links" : [ ]
  }, {
    "name" : "YES",
    "type" : "QuickCheckResult",
    "comment" : "\n     * Indicates that string is in the normalized format\n     ",
    "links" : [ ]
  }, {
    "name" : "MAYBE",
    "type" : "QuickCheckResult",
    "comment" : "\n     * Indicates it cannot be determined if string is in the normalized\n     * format without further thorough checks.\n     ",
    "links" : [ ]
  }, {
    "name" : "FOLD_CASE_DEFAULT",
    "type" : "int",
    "comment" : "\n     * Option bit for compare:\n     * Case sensitively compare the strings\n     ",
    "links" : [ ]
  }, {
    "name" : "INPUT_IS_FCD",
    "type" : "int",
    "comment" : "\n     * Option bit for compare:\n     * Both input strings are assumed to fulfill FCD conditions.\n     ",
    "links" : [ ]
  }, {
    "name" : "COMPARE_IGNORE_CASE",
    "type" : "int",
    "comment" : "\n     * Option bit for compare:\n     * Perform case-insensitive comparison.\n     ",
    "links" : [ ]
  }, {
    "name" : "COMPARE_CODE_POINT_ORDER",
    "type" : "int",
    "comment" : "\n     * Option bit for compare:\n     * Compare strings in code point order instead of code unit order.\n     ",
    "links" : [ ]
  }, {
    "name" : "FOLD_CASE_EXCLUDE_SPECIAL_I",
    "type" : "int",
    "comment" : "\n     * Option value for case folding:\n     * Use the modified set of mappings provided in CaseFolding.txt to handle dotted I\n     * and dotless i appropriately for Turkic languages (tr, az).\n     * @see UCharacter#FOLD_CASE_EXCLUDE_SPECIAL_I\n     ",
    "links" : [ ]
  }, {
    "name" : "COMPARE_NORM_OPTIONS_SHIFT",
    "type" : "int",
    "comment" : "\n     * Lowest-order bit number of compare() options bits corresponding to\n     * normalization options bits.\n     *\n     * The options parameter for compare() uses most bits for\n     * itself and for various comparison and folding flags.\n     * The most significant bits, however, are shifted down and passed on\n     * to the normalization implementation.\n     * (That is, from compare(..., options, ...),\n     * options&gt;&gt;COMPARE_NORM_OPTIONS_SHIFT will be passed on to the\n     * internal normalization functions.)\n     *\n     * @see #compare\n     * @deprecated ICU 56 Use {@link Normalizer2} instead.\n     * @hide original deprecated declaration\n     ",
    "links" : [ "android.icu.text.Normalizer2" ]
  }, {
    "name" : "COMPARE_EQUIV",
    "type" : "int",
    "comment" : "\n     * Internal option for unorm_cmpEquivFold() for decomposing.\n     * If not set, just do strcasecmp().\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Object clone()",
    "returnType" : "Object",
    "comment" : "\n     * Clones this <tt>Normalizer</tt> object.  All properties of this\n     * object are duplicated in the new object, including the cloning of any\n     * {@link CharacterIterator} that was passed in to the constructor\n     * or to {@link #setText(CharacterIterator) setText}.\n     * However, the text storage underlying\n     * the <tt>CharacterIterator</tt> is not duplicated unless the\n     * iterator's <tt>clone</tt> method does so.\n     *\n     * @deprecated ICU 56 Use {@link Normalizer2} instead.\n     * @hide original deprecated declaration\n     ",
    "links" : [ "#setText(CharacterIterator)", "java.text.CharacterIterator", "android.icu.text.Normalizer2" ]
  }, {
    "name" : "private static final Normalizer2 getComposeNormalizer2(boolean compat, int options)",
    "returnType" : "Normalizer2",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static final Normalizer2 getDecomposeNormalizer2(boolean compat, int options)",
    "returnType" : "Normalizer2",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String compose(String str, boolean compat)",
    "returnType" : "String",
    "comment" : "\n     * Compose a string.\n     * The string will be composed to according to the specified mode.\n     * @param str        The string to compose.\n     * @param compat     If true the string will be composed according to\n     *                    NFKC rules and if false will be composed according to\n     *                    NFC rules.\n     * @return String    The composed string\n     * @deprecated ICU 56 Use {@link Normalizer2} instead.\n     * @hide original deprecated declaration\n     ",
    "links" : [ "android.icu.text.Normalizer2" ]
  }, {
    "name" : "public static String compose(String str, boolean compat, int options)",
    "returnType" : "String",
    "comment" : "\n     * Compose a string.\n     * The string will be composed to according to the specified mode.\n     * @param str        The string to compose.\n     * @param compat     If true the string will be composed according to\n     *                    NFKC rules and if false will be composed according to\n     *                    NFC rules.\n     * @param options    The only recognized option is UNICODE_3_2\n     * @return String    The composed string\n     * @deprecated ICU 56 Use {@link Normalizer2} instead.\n     * @hide original deprecated declaration\n     ",
    "links" : [ "android.icu.text.Normalizer2" ]
  }, {
    "name" : "public static int compose(char[] source, char[] target, boolean compat, int options)",
    "returnType" : "int",
    "comment" : "\n     * Compose a string.\n     * The string will be composed to according to the specified mode.\n     * @param source The char array to compose.\n     * @param target A char buffer to receive the normalized text.\n     * @param compat If true the char array will be composed according to\n     *                NFKC rules and if false will be composed according to\n     *                NFC rules.\n     * @param options The normalization options, ORed together (0 for no options).\n     * @return int   The total buffer size needed;if greater than length of\n     *                result, the output was truncated.\n     * @exception IndexOutOfBoundsException if target.length is less than the\n     *             required length\n     * @deprecated ICU 56 Use {@link Normalizer2} instead.\n     * @hide original deprecated declaration\n     ",
    "links" : [ "android.icu.text.Normalizer2" ]
  }, {
    "name" : "public static int compose(char[] src, int srcStart, int srcLimit, char[] dest, int destStart, int destLimit, boolean compat, int options)",
    "returnType" : "int",
    "comment" : "\n     * Compose a string.\n     * The string will be composed to according to the specified mode.\n     * @param src       The char array to compose.\n     * @param srcStart  Start index of the source\n     * @param srcLimit  Limit index of the source\n     * @param dest      The char buffer to fill in\n     * @param destStart Start index of the destination buffer\n     * @param destLimit End index of the destination buffer\n     * @param compat If true the char array will be composed according to\n     *                NFKC rules and if false will be composed according to\n     *                NFC rules.\n     * @param options The normalization options, ORed together (0 for no options).\n     * @return int   The total buffer size needed;if greater than length of\n     *                result, the output was truncated.\n     * @exception IndexOutOfBoundsException if target.length is less than the\n     *             required length\n     * @deprecated ICU 56 Use {@link Normalizer2} instead.\n     * @hide original deprecated declaration\n     ",
    "links" : [ "android.icu.text.Normalizer2" ]
  }, {
    "name" : "public static String decompose(String str, boolean compat)",
    "returnType" : "String",
    "comment" : "\n     * Decompose a string.\n     * The string will be decomposed to according to the specified mode.\n     * @param str       The string to decompose.\n     * @param compat    If true the string will be decomposed according to NFKD\n     *                   rules and if false will be decomposed according to NFD\n     *                   rules.\n     * @return String   The decomposed string\n     * @deprecated ICU 56 Use {@link Normalizer2} instead.\n     * @hide original deprecated declaration\n     ",
    "links" : [ "android.icu.text.Normalizer2" ]
  }, {
    "name" : "public static String decompose(String str, boolean compat, int options)",
    "returnType" : "String",
    "comment" : "\n     * Decompose a string.\n     * The string will be decomposed to according to the specified mode.\n     * @param str     The string to decompose.\n     * @param compat  If true the string will be decomposed according to NFKD\n     *                 rules and if false will be decomposed according to NFD\n     *                 rules.\n     * @param options The normalization options, ORed together (0 for no options).\n     * @return String The decomposed string\n     * @deprecated ICU 56 Use {@link Normalizer2} instead.\n     * @hide original deprecated declaration\n     ",
    "links" : [ "android.icu.text.Normalizer2" ]
  }, {
    "name" : "public static int decompose(char[] source, char[] target, boolean compat, int options)",
    "returnType" : "int",
    "comment" : "\n     * Decompose a string.\n     * The string will be decomposed to according to the specified mode.\n     * @param source The char array to decompose.\n     * @param target A char buffer to receive the normalized text.\n     * @param compat If true the char array will be decomposed according to NFKD\n     *                rules and if false will be decomposed according to\n     *                NFD rules.\n     * @return int   The total buffer size needed;if greater than length of\n     *                result,the output was truncated.\n     * @param options The normalization options, ORed together (0 for no options).\n     * @exception IndexOutOfBoundsException if the target capacity is less than\n     *             the required length\n     * @deprecated ICU 56 Use {@link Normalizer2} instead.\n     * @hide original deprecated declaration\n     ",
    "links" : [ "android.icu.text.Normalizer2" ]
  }, {
    "name" : "public static int decompose(char[] src, int srcStart, int srcLimit, char[] dest, int destStart, int destLimit, boolean compat, int options)",
    "returnType" : "int",
    "comment" : "\n     * Decompose a string.\n     * The string will be decomposed to according to the specified mode.\n     * @param src       The char array to compose.\n     * @param srcStart  Start index of the source\n     * @param srcLimit  Limit index of the source\n     * @param dest      The char buffer to fill in\n     * @param destStart Start index of the destination buffer\n     * @param destLimit End index of the destination buffer\n     * @param compat If true the char array will be decomposed according to NFKD\n     *                rules and if false will be decomposed according to\n     *                NFD rules.\n     * @param options The normalization options, ORed together (0 for no options).\n     * @return int   The total buffer size needed;if greater than length of\n     *                result,the output was truncated.\n     * @exception IndexOutOfBoundsException if the target capacity is less than\n     *             the required length\n     * @deprecated ICU 56 Use {@link Normalizer2} instead.\n     * @hide original deprecated declaration\n     ",
    "links" : [ "android.icu.text.Normalizer2" ]
  }, {
    "name" : "public static String normalize(String str, Mode mode, int options)",
    "returnType" : "String",
    "comment" : "\n     * Normalizes a <tt>String</tt> using the given normalization operation.\n     * <p>\n     * The <tt>options</tt> parameter specifies which optional\n     * <tt>Normalizer</tt> features are to be enabled for this operation.\n     * Currently the only available option is {@link #UNICODE_3_2}.\n     * If you want the default behavior corresponding to one of the standard\n     * Unicode Normalization Forms, use 0 for this argument.\n     * <p>\n     * @param str       the input string to be normalized.\n     * @param mode      the normalization mode\n     * @param options   the optional features to be enabled.\n     * @return String   the normalized string\n     * @deprecated ICU 56 Use {@link Normalizer2} instead.\n     * @hide original deprecated declaration\n     ",
    "links" : [ "#UNICODE_3_2", "android.icu.text.Normalizer2" ]
  }, {
    "name" : "public static String normalize(String src, Mode mode)",
    "returnType" : "String",
    "comment" : "\n     * Normalize a string.\n     * The string will be normalized according to the specified normalization\n     * mode and options.\n     * @param src        The string to normalize.\n     * @param mode       The normalization mode; one of Normalizer.NONE,\n     *                    Normalizer.NFD, Normalizer.NFC, Normalizer.NFKC,\n     *                    Normalizer.NFKD, Normalizer.DEFAULT\n     * @return the normalized string\n     * @deprecated ICU 56 Use {@link Normalizer2} instead.\n     * @hide original deprecated declaration\n     ",
    "links" : [ "android.icu.text.Normalizer2" ]
  }, {
    "name" : "public static int normalize(char[] source, char[] target, Mode mode, int options)",
    "returnType" : "int",
    "comment" : "\n     * Normalize a string.\n     * The string will be normalized according to the specified normalization\n     * mode and options.\n     * @param source The char array to normalize.\n     * @param target A char buffer to receive the normalized text.\n     * @param mode   The normalization mode; one of Normalizer.NONE,\n     *                Normalizer.NFD, Normalizer.NFC, Normalizer.NFKC,\n     *                Normalizer.NFKD, Normalizer.DEFAULT\n     * @param options The normalization options, ORed together (0 for no options).\n     * @return int   The total buffer size needed;if greater than length of\n     *                result, the output was truncated.\n     * @exception    IndexOutOfBoundsException if the target capacity is less\n     *                than the required length\n     * @deprecated ICU 56 Use {@link Normalizer2} instead.\n     * @hide original deprecated declaration\n     ",
    "links" : [ "android.icu.text.Normalizer2" ]
  }, {
    "name" : "public static int normalize(char[] src, int srcStart, int srcLimit, char[] dest, int destStart, int destLimit, Mode mode, int options)",
    "returnType" : "int",
    "comment" : "\n     * Normalize a string.\n     * The string will be normalized according to the specified normalization\n     * mode and options.\n     * @param src       The char array to compose.\n     * @param srcStart  Start index of the source\n     * @param srcLimit  Limit index of the source\n     * @param dest      The char buffer to fill in\n     * @param destStart Start index of the destination buffer\n     * @param destLimit End index of the destination buffer\n     * @param mode      The normalization mode; one of Normalizer.NONE,\n     *                   Normalizer.NFD, Normalizer.NFC, Normalizer.NFKC,\n     *                   Normalizer.NFKD, Normalizer.DEFAULT\n     * @param options The normalization options, ORed together (0 for no options).\n     * @return int      The total buffer size needed;if greater than length of\n     *                   result, the output was truncated.\n     * @exception       IndexOutOfBoundsException if the target capacity is\n     *                   less than the required length\n     * @deprecated ICU 56 Use {@link Normalizer2} instead.\n     * @hide original deprecated declaration\n     ",
    "links" : [ "android.icu.text.Normalizer2" ]
  }, {
    "name" : "public static String normalize(int char32, Mode mode, int options)",
    "returnType" : "String",
    "comment" : "\n     * Normalize a codepoint according to the given mode\n     * @param char32    The input string to be normalized.\n     * @param mode      The normalization mode\n     * @param options   Options for use with exclusion set and tailored Normalization\n     *                                   The only option that is currently recognized is UNICODE_3_2\n     * @return String   The normalized string\n     * @see #UNICODE_3_2\n     * @deprecated ICU 56 Use {@link Normalizer2} instead.\n     * @hide original deprecated declaration\n     ",
    "links" : [ "android.icu.text.Normalizer2" ]
  }, {
    "name" : "public static String normalize(int char32, Mode mode)",
    "returnType" : "String",
    "comment" : "\n     * Convenience method to normalize a codepoint according to the given mode\n     * @param char32    The input string to be normalized.\n     * @param mode      The normalization mode\n     * @return String   The normalized string\n     * @deprecated ICU 56 Use {@link Normalizer2} instead.\n     * @hide original deprecated declaration\n     ",
    "links" : [ "android.icu.text.Normalizer2" ]
  }, {
    "name" : "public static QuickCheckResult quickCheck(String source, Mode mode)",
    "returnType" : "QuickCheckResult",
    "comment" : "\n     * Convenience method.\n     *\n     * @param source   string for determining if it is in a normalized format\n     * @param mode     normalization format (Normalizer.NFC,Normalizer.NFD,\n     *                  Normalizer.NFKC,Normalizer.NFKD)\n     * @return         Return code to specify if the text is normalized or not\n     *                     (Normalizer.YES, Normalizer.NO or Normalizer.MAYBE)\n     * @deprecated ICU 56 Use {@link Normalizer2} instead.\n     * @hide original deprecated declaration\n     ",
    "links" : [ "android.icu.text.Normalizer2" ]
  }, {
    "name" : "public static QuickCheckResult quickCheck(String source, Mode mode, int options)",
    "returnType" : "QuickCheckResult",
    "comment" : "\n     * Performing quick check on a string, to quickly determine if the string is\n     * in a particular normalization format.\n     * Three types of result can be returned Normalizer.YES, Normalizer.NO or\n     * Normalizer.MAYBE. Result Normalizer.YES indicates that the argument\n     * string is in the desired normalized format, Normalizer.NO determines that\n     * argument string is not in the desired normalized format. A\n     * Normalizer.MAYBE result indicates that a more thorough check is required,\n     * the user may have to put the string in its normalized form and compare\n     * the results.\n     *\n     * @param source   string for determining if it is in a normalized format\n     * @param mode     normalization format (Normalizer.NFC,Normalizer.NFD,\n     *                  Normalizer.NFKC,Normalizer.NFKD)\n     * @param options   Options for use with exclusion set and tailored Normalization\n     *                                   The only option that is currently recognized is UNICODE_3_2\n     * @return         Return code to specify if the text is normalized or not\n     *                     (Normalizer.YES, Normalizer.NO or Normalizer.MAYBE)\n     * @deprecated ICU 56 Use {@link Normalizer2} instead.\n     * @hide original deprecated declaration\n     ",
    "links" : [ "android.icu.text.Normalizer2" ]
  }, {
    "name" : "public static QuickCheckResult quickCheck(char[] source, Mode mode, int options)",
    "returnType" : "QuickCheckResult",
    "comment" : "\n     * Convenience method.\n     *\n     * @param source Array of characters for determining if it is in a\n     *                normalized format\n     * @param mode   normalization format (Normalizer.NFC,Normalizer.NFD,\n     *                Normalizer.NFKC,Normalizer.NFKD)\n     * @param options   Options for use with exclusion set and tailored Normalization\n     *                                   The only option that is currently recognized is UNICODE_3_2\n     * @return       Return code to specify if the text is normalized or not\n     *                (Normalizer.YES, Normalizer.NO or Normalizer.MAYBE)\n     * @deprecated ICU 56 Use {@link Normalizer2} instead.\n     * @hide original deprecated declaration\n     ",
    "links" : [ "android.icu.text.Normalizer2" ]
  }, {
    "name" : "public static QuickCheckResult quickCheck(char[] source, int start, int limit, Mode mode, int options)",
    "returnType" : "QuickCheckResult",
    "comment" : "\n     * Performing quick check on a string, to quickly determine if the string is\n     * in a particular normalization format.\n     * Three types of result can be returned Normalizer.YES, Normalizer.NO or\n     * Normalizer.MAYBE. Result Normalizer.YES indicates that the argument\n     * string is in the desired normalized format, Normalizer.NO determines that\n     * argument string is not in the desired normalized format. A\n     * Normalizer.MAYBE result indicates that a more thorough check is required,\n     * the user may have to put the string in its normalized form and compare\n     * the results.\n     *\n     * @param source    string for determining if it is in a normalized format\n     * @param start     the start index of the source\n     * @param limit     the limit index of the source it is equal to the length\n     * @param mode      normalization format (Normalizer.NFC,Normalizer.NFD,\n     *                   Normalizer.NFKC,Normalizer.NFKD)\n     * @param options   Options for use with exclusion set and tailored Normalization\n     *                                   The only option that is currently recognized is UNICODE_3_2\n     * @return          Return code to specify if the text is normalized or not\n     *                   (Normalizer.YES, Normalizer.NO or\n     *                   Normalizer.MAYBE)\n     * @deprecated ICU 56 Use {@link Normalizer2} instead.\n     * @hide original deprecated declaration\n     ",
    "links" : [ "android.icu.text.Normalizer2" ]
  }, {
    "name" : "public static boolean isNormalized(char[] src, int start, int limit, Mode mode, int options)",
    "returnType" : "boolean",
    "comment" : "\n     * Test if a string is in a given normalization form.\n     * This is semantically equivalent to source.equals(normalize(source, mode)).\n     *\n     * Unlike quickCheck(), this function returns a definitive result,\n     * never a \"maybe\".\n     * For NFD, NFKD, and FCD, both functions work exactly the same.\n     * For NFC and NFKC where quickCheck may return \"maybe\", this function will\n     * perform further tests to arrive at a true/false result.\n     * @param src       The input array of characters to be checked to see if\n     *                   it is normalized\n     * @param start     The strart index in the source\n     * @param limit     The limit index in the source\n     * @param mode      the normalization mode\n     * @param options   Options for use with exclusion set and tailored Normalization\n     *                                   The only option that is currently recognized is UNICODE_3_2\n     * @return Boolean value indicating whether the source string is in the\n     *         \"mode\" normalization form\n     * @deprecated ICU 56 Use {@link Normalizer2} instead.\n     * @hide original deprecated declaration\n     ",
    "links" : [ "android.icu.text.Normalizer2" ]
  }, {
    "name" : "public static boolean isNormalized(String str, Mode mode, int options)",
    "returnType" : "boolean",
    "comment" : "\n     * Test if a string is in a given normalization form.\n     * This is semantically equivalent to source.equals(normalize(source, mode)).\n     *\n     * Unlike quickCheck(), this function returns a definitive result,\n     * never a \"maybe\".\n     * For NFD, NFKD, and FCD, both functions work exactly the same.\n     * For NFC and NFKC where quickCheck may return \"maybe\", this function will\n     * perform further tests to arrive at a true/false result.\n     * @param str       the input string to be checked to see if it is\n     *                   normalized\n     * @param mode      the normalization mode\n     * @param options   Options for use with exclusion set and tailored Normalization\n     *                  The only option that is currently recognized is UNICODE_3_2\n     * @see #isNormalized\n     * @deprecated ICU 56 Use {@link Normalizer2} instead.\n     * @hide original deprecated declaration\n     ",
    "links" : [ "android.icu.text.Normalizer2" ]
  }, {
    "name" : "public static boolean isNormalized(int char32, Mode mode, int options)",
    "returnType" : "boolean",
    "comment" : "\n     * Convenience Method\n     * @param char32    the input code point to be checked to see if it is\n     *                   normalized\n     * @param mode      the normalization mode\n     * @param options   Options for use with exclusion set and tailored Normalization\n     *                  The only option that is currently recognized is UNICODE_3_2\n     *\n     * @see #isNormalized\n     * @deprecated ICU 56 Use {@link Normalizer2} instead.\n     * @hide original deprecated declaration\n     ",
    "links" : [ "android.icu.text.Normalizer2" ]
  }, {
    "name" : "public static int compare(char[] s1, int s1Start, int s1Limit, char[] s2, int s2Start, int s2Limit, int options)",
    "returnType" : "int",
    "comment" : "\n     * Compare two strings for canonical equivalence.\n     * Further options include case-insensitive comparison and\n     * code point order (as opposed to code unit order).\n     *\n     * Canonical equivalence between two strings is defined as their normalized\n     * forms (NFD or NFC) being identical.\n     * This function compares strings incrementally instead of normalizing\n     * (and optionally case-folding) both strings entirely,\n     * improving performance significantly.\n     *\n     * Bulk normalization is only necessary if the strings do not fulfill the\n     * FCD conditions. Only in this case, and only if the strings are relatively\n     * long, is memory allocated temporarily.\n     * For FCD strings and short non-FCD strings there is no memory allocation.\n     *\n     * Semantically, this is equivalent to\n     *   strcmp[CodePointOrder](foldCase(NFD(s1)), foldCase(NFD(s2)))\n     * where code point order and foldCase are all optional.\n     *\n     * @param s1        First source character array.\n     * @param s1Start   start index of source\n     * @param s1Limit   limit of the source\n     *\n     * @param s2        Second source character array.\n     * @param s2Start   start index of the source\n     * @param s2Limit   limit of the source\n     *\n     * @param options A bit set of options:\n     *   - FOLD_CASE_DEFAULT or 0 is used for default options:\n     *     Case-sensitive comparison in code unit order, and the input strings\n     *     are quick-checked for FCD.\n     *\n     *   - INPUT_IS_FCD\n     *     Set if the caller knows that both s1 and s2 fulfill the FCD\n     *     conditions.If not set, the function will quickCheck for FCD\n     *     and normalize if necessary.\n     *\n     *   - COMPARE_CODE_POINT_ORDER\n     *     Set to choose code point order instead of code unit order\n     *\n     *   - COMPARE_IGNORE_CASE\n     *     Set to compare strings case-insensitively using case folding,\n     *     instead of case-sensitively.\n     *     If set, then the following case folding options are used.\n     *\n     *\n     * @return &lt;0 or 0 or &gt;0 as usual for string comparisons\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int compare(String s1, String s2, int options)",
    "returnType" : "int",
    "comment" : "\n     * Compare two strings for canonical equivalence.\n     * Further options include case-insensitive comparison and\n     * code point order (as opposed to code unit order).\n     *\n     * Canonical equivalence between two strings is defined as their normalized\n     * forms (NFD or NFC) being identical.\n     * This function compares strings incrementally instead of normalizing\n     * (and optionally case-folding) both strings entirely,\n     * improving performance significantly.\n     *\n     * Bulk normalization is only necessary if the strings do not fulfill the\n     * FCD conditions. Only in this case, and only if the strings are relatively\n     * long, is memory allocated temporarily.\n     * For FCD strings and short non-FCD strings there is no memory allocation.\n     *\n     * Semantically, this is equivalent to\n     *   strcmp[CodePointOrder](foldCase(NFD(s1)), foldCase(NFD(s2)))\n     * where code point order and foldCase are all optional.\n     *\n     * @param s1 First source string.\n     * @param s2 Second source string.\n     *\n     * @param options A bit set of options:\n     *   - FOLD_CASE_DEFAULT or 0 is used for default options:\n     *     Case-sensitive comparison in code unit order, and the input strings\n     *     are quick-checked for FCD.\n     *\n     *   - INPUT_IS_FCD\n     *     Set if the caller knows that both s1 and s2 fulfill the FCD\n     *     conditions. If not set, the function will quickCheck for FCD\n     *     and normalize if necessary.\n     *\n     *   - COMPARE_CODE_POINT_ORDER\n     *     Set to choose code point order instead of code unit order\n     *\n     *   - COMPARE_IGNORE_CASE\n     *     Set to compare strings case-insensitively using case folding,\n     *     instead of case-sensitively.\n     *     If set, then the following case folding options are used.\n     *\n     * @return &lt;0 or 0 or &gt;0 as usual for string comparisons\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int compare(char[] s1, char[] s2, int options)",
    "returnType" : "int",
    "comment" : "\n     * Compare two strings for canonical equivalence.\n     * Further options include case-insensitive comparison and\n     * code point order (as opposed to code unit order).\n     * Convenience method.\n     *\n     * @param s1 First source string.\n     * @param s2 Second source string.\n     *\n     * @param options A bit set of options:\n     *   - FOLD_CASE_DEFAULT or 0 is used for default options:\n     *     Case-sensitive comparison in code unit order, and the input strings\n     *     are quick-checked for FCD.\n     *\n     *   - INPUT_IS_FCD\n     *     Set if the caller knows that both s1 and s2 fulfill the FCD\n     *     conditions. If not set, the function will quickCheck for FCD\n     *     and normalize if necessary.\n     *\n     *   - COMPARE_CODE_POINT_ORDER\n     *     Set to choose code point order instead of code unit order\n     *\n     *   - COMPARE_IGNORE_CASE\n     *     Set to compare strings case-insensitively using case folding,\n     *     instead of case-sensitively.\n     *     If set, then the following case folding options are used.\n     *\n     * @return &lt;0 or 0 or &gt;0 as usual for string comparisons\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int compare(int char32a, int char32b, int options)",
    "returnType" : "int",
    "comment" : "\n     * Convenience method that can have faster implementation\n     * by not allocating buffers.\n     * @param char32a    the first code point to be checked against the\n     * @param char32b    the second code point\n     * @param options    A bit set of options\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int compare(int char32a, String str2, int options)",
    "returnType" : "int",
    "comment" : "\n     * Convenience method that can have faster implementation\n     * by not allocating buffers.\n     * @param char32a   the first code point to be checked against\n     * @param str2      the second string\n     * @param options   A bit set of options\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int concatenate(char[] left, int leftStart, int leftLimit, char[] right, int rightStart, int rightLimit, char[] dest, int destStart, int destLimit, Normalizer.Mode mode, int options)",
    "returnType" : "int",
    "comment" : "\n     * Concatenate normalized strings, making sure that the result is normalized\n     * as well.\n     *\n     * If both the left and the right strings are in\n     * the normalization form according to \"mode\",\n     * then the result will be\n     *\n     * <code>\n     *     dest=normalize(left+right, mode)\n     * </code>\n     *\n     * With the input strings already being normalized,\n     * this function will use next() and previous()\n     * to find the adjacent end pieces of the input strings.\n     * Only the concatenation of these end pieces will be normalized and\n     * then concatenated with the remaining parts of the input strings.\n     *\n     * It is allowed to have dest==left to avoid copying the entire left string.\n     *\n     * @param left Left source array, may be same as dest.\n     * @param leftStart start in the left array.\n     * @param leftLimit limit in the left array (==length)\n     * @param right Right source array.\n     * @param rightStart start in the right array.\n     * @param rightLimit limit in the right array (==length)\n     * @param dest The output buffer; can be null if destStart==destLimit==0\n     *              for pure preflighting.\n     * @param destStart start in the destination array\n     * @param destLimit limit in the destination array (==length)\n     * @param mode The normalization mode.\n     * @param options The normalization options, ORed together (0 for no options).\n     * @return Length of output (number of chars) when successful or\n     *          IndexOutOfBoundsException\n     * @exception IndexOutOfBoundsException whose message has the string\n     *             representation of destination capacity required.\n     * @see #normalize\n     * @see #next\n     * @see #previous\n     * @exception IndexOutOfBoundsException if target capacity is less than the\n     *             required length\n     * @deprecated ICU 56 Use {@link Normalizer2} instead.\n     * @hide original deprecated declaration\n     ",
    "links" : [ "android.icu.text.Normalizer2" ]
  }, {
    "name" : "public static String concatenate(char[] left, char[] right, Mode mode, int options)",
    "returnType" : "String",
    "comment" : "\n     * Concatenate normalized strings, making sure that the result is normalized\n     * as well.\n     *\n     * If both the left and the right strings are in\n     * the normalization form according to \"mode\",\n     * then the result will be\n     *\n     * <code>\n     *     dest=normalize(left+right, mode)\n     * </code>\n     *\n     * For details see concatenate\n     *\n     * @param left Left source string.\n     * @param right Right source string.\n     * @param mode The normalization mode.\n     * @param options The normalization options, ORed together (0 for no options).\n     * @return result\n     *\n     * @see #concatenate\n     * @see #normalize\n     * @see #next\n     * @see #previous\n     * @see #concatenate\n     * @deprecated ICU 56 Use {@link Normalizer2} instead.\n     * @hide original deprecated declaration\n     ",
    "links" : [ "android.icu.text.Normalizer2" ]
  }, {
    "name" : "public static String concatenate(String left, String right, Mode mode, int options)",
    "returnType" : "String",
    "comment" : "\n     * Concatenate normalized strings, making sure that the result is normalized\n     * as well.\n     *\n     * If both the left and the right strings are in\n     * the normalization form according to \"mode\",\n     * then the result will be\n     *\n     * <code>\n     *     dest=normalize(left+right, mode)\n     * </code>\n     *\n     * With the input strings already being normalized,\n     * this function will use next() and previous()\n     * to find the adjacent end pieces of the input strings.\n     * Only the concatenation of these end pieces will be normalized and\n     * then concatenated with the remaining parts of the input strings.\n     *\n     * @param left Left source string.\n     * @param right Right source string.\n     * @param mode The normalization mode.\n     * @param options The normalization options, ORed together (0 for no options).\n     * @return result\n     *\n     * @see #concatenate\n     * @see #normalize\n     * @see #next\n     * @see #previous\n     * @see #concatenate\n     * @deprecated ICU 56 Use {@link Normalizer2} instead.\n     * @hide original deprecated declaration\n     ",
    "links" : [ "android.icu.text.Normalizer2" ]
  }, {
    "name" : "public static int getFC_NFKC_Closure(int c, char[] dest)",
    "returnType" : "int",
    "comment" : "\n     * Gets the FC_NFKC closure value.\n     * @param c The code point whose closure value is to be retrieved\n     * @param dest The char array to receive the closure value\n     * @return the length of the closure value; 0 if there is none\n     * @deprecated ICU 56\n     * @hide original deprecated declaration\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getFC_NFKC_Closure(int c)",
    "returnType" : "String",
    "comment" : "\n     * Gets the FC_NFKC closure value.\n     * @param c The code point whose closure value is to be retrieved\n     * @return String representation of the closure value; \"\" if there is none\n     * @deprecated ICU 56\n     * @hide original deprecated declaration\n     ",
    "links" : [ ]
  }, {
    "name" : "public int current()",
    "returnType" : "int",
    "comment" : "\n     * Return the current character in the normalized text.\n     * @return The codepoint as an int\n     * @deprecated ICU 56\n     * @hide original deprecated declaration\n     ",
    "links" : [ ]
  }, {
    "name" : "public int next()",
    "returnType" : "int",
    "comment" : "\n     * Return the next character in the normalized text and advance\n     * the iteration position by one.  If the end\n     * of the text has already been reached, {@link #DONE} is returned.\n     * @return The codepoint as an int\n     * @deprecated ICU 56\n     * @hide original deprecated declaration\n     ",
    "links" : [ "#DONE" ]
  }, {
    "name" : "public int previous()",
    "returnType" : "int",
    "comment" : "\n     * Return the previous character in the normalized text and decrement\n     * the iteration position by one.  If the beginning\n     * of the text has already been reached, {@link #DONE} is returned.\n     * @return The codepoint as an int\n     * @deprecated ICU 56\n     * @hide original deprecated declaration\n     ",
    "links" : [ "#DONE" ]
  }, {
    "name" : "public void reset()",
    "returnType" : "void",
    "comment" : "\n     * Reset the index to the beginning of the text.\n     * This is equivalent to setIndexOnly(startIndex)).\n     * @deprecated ICU 56\n     * @hide original deprecated declaration\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setIndexOnly(int index)",
    "returnType" : "void",
    "comment" : "\n     * Set the iteration position in the input text that is being normalized,\n     * without any immediate normalization.\n     * After setIndexOnly(), getIndex() will return the same index that is\n     * specified here.\n     *\n     * @param index the desired index in the input text.\n     * @deprecated ICU 56\n     * @hide original deprecated declaration\n     ",
    "links" : [ ]
  }, {
    "name" : "public int setIndex(int index)",
    "returnType" : "int",
    "comment" : "\n     * Set the iteration position in the input text that is being normalized\n     * and return the first normalized character at that position.\n     * <p>\n     * <b>Note:</b> This method sets the position in the <em>input</em> text,\n     * while {@link #next} and {@link #previous} iterate through characters\n     * in the normalized <em>output</em>.  This means that there is not\n     * necessarily a one-to-one correspondence between characters returned\n     * by <tt>next</tt> and <tt>previous</tt> and the indices passed to and\n     * returned from <tt>setIndex</tt> and {@link #getIndex}.\n     * <p>\n     * @param index the desired index in the input text.\n     *\n     * @return   the first normalized character that is the result of iterating\n     *            forward starting at the given index.\n     *\n     * @throws IllegalArgumentException if the given index is less than\n     *          {@link #getBeginIndex} or greater than {@link #getEndIndex}.\n     * @deprecated ICU 3.2\n     * @obsolete ICU 3.2\n     * @hide original deprecated declaration\n     ",
    "links" : [ "#previous", "#next", "#getBeginIndex", "#getIndex", "#getEndIndex" ]
  }, {
    "name" : "public int getBeginIndex()",
    "returnType" : "int",
    "comment" : "\n     * Retrieve the index of the start of the input text. This is the begin\n     * index of the <tt>CharacterIterator</tt> or the start (i.e. 0) of the\n     * <tt>String</tt> over which this <tt>Normalizer</tt> is iterating\n     * @deprecated ICU 2.2. Use startIndex() instead.\n     * @return The codepoint as an int\n     * @see #startIndex\n     * @hide original deprecated declaration\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getEndIndex()",
    "returnType" : "int",
    "comment" : "\n     * Retrieve the index of the end of the input text.  This is the end index\n     * of the <tt>CharacterIterator</tt> or the length of the <tt>String</tt>\n     * over which this <tt>Normalizer</tt> is iterating\n     * @deprecated ICU 2.2. Use endIndex() instead.\n     * @return The codepoint as an int\n     * @see #endIndex\n     * @hide original deprecated declaration\n     ",
    "links" : [ ]
  }, {
    "name" : "public int first()",
    "returnType" : "int",
    "comment" : "\n     * Return the first character in the normalized text.  This resets\n     * the <tt>Normalizer's</tt> position to the beginning of the text.\n     * @return The codepoint as an int\n     * @deprecated ICU 56\n     * @hide original deprecated declaration\n     ",
    "links" : [ ]
  }, {
    "name" : "public int last()",
    "returnType" : "int",
    "comment" : "\n     * Return the last character in the normalized text.  This resets\n     * the <tt>Normalizer's</tt> position to be just before the\n     * the input text corresponding to that normalized character.\n     * @return The codepoint as an int\n     * @deprecated ICU 56\n     * @hide original deprecated declaration\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getIndex()",
    "returnType" : "int",
    "comment" : "\n     * Retrieve the current iteration position in the input text that is\n     * being normalized.  This method is useful in applications such as\n     * searching, where you need to be able to determine the position in\n     * the input text that corresponds to a given normalized output character.\n     * <p>\n     * <b>Note:</b> This method sets the position in the <em>input</em>, while\n     * {@link #next} and {@link #previous} iterate through characters in the\n     * <em>output</em>.  This means that there is not necessarily a one-to-one\n     * correspondence between characters returned by <tt>next</tt> and\n     * <tt>previous</tt> and the indices passed to and returned from\n     * <tt>setIndex</tt> and {@link #getIndex}.\n     * @return The current iteration position\n     * @deprecated ICU 56\n     * @hide original deprecated declaration\n     ",
    "links" : [ "#previous", "#next", "#getIndex" ]
  }, {
    "name" : "public int startIndex()",
    "returnType" : "int",
    "comment" : "\n     * Retrieve the index of the start of the input text. This is the begin\n     * index of the <tt>CharacterIterator</tt> or the start (i.e. 0) of the\n     * <tt>String</tt> over which this <tt>Normalizer</tt> is iterating\n     * @return The current iteration position\n     * @deprecated ICU 56\n     * @hide original deprecated declaration\n     ",
    "links" : [ ]
  }, {
    "name" : "public int endIndex()",
    "returnType" : "int",
    "comment" : "\n     * Retrieve the index of the end of the input text.  This is the end index\n     * of the <tt>CharacterIterator</tt> or the length of the <tt>String</tt>\n     * over which this <tt>Normalizer</tt> is iterating\n     * @return The current iteration position\n     * @deprecated ICU 56\n     * @hide original deprecated declaration\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMode(Mode newMode)",
    "returnType" : "void",
    "comment" : "\n     * Set the normalization mode for this object.\n     * <p>\n     * <b>Note:</b>If the normalization mode is changed while iterating\n     * over a string, calls to {@link #next} and {@link #previous} may\n     * return previously buffers characters in the old normalization mode\n     * until the iteration is able to re-sync at the next base character.\n     * It is safest to call {@link #setText setText()}, {@link #first},\n     * {@link #last}, etc. after calling <tt>setMode</tt>.\n     * <p>\n     * @param newMode the new mode for this <tt>Normalizer</tt>.\n     * The supported modes are:\n     * <ul>\n     *  <li>{@link #NFC}    - Unicode canonical decompositiion\n     *                        followed by canonical composition.\n     *  <li>{@link #NFKC}   - Unicode compatibility decompositiion\n     *                        followed by canonical composition.\n     *  <li>{@link #NFD}    - Unicode canonical decomposition\n     *  <li>{@link #NFKD}   - Unicode compatibility decomposition.\n     *  <li>{@link #NONE}   - Do nothing but return characters\n     *                        from the underlying input text.\n     * </ul>\n     *\n     * @see #getMode\n     * @deprecated ICU 56\n     * @hide original deprecated declaration\n     ",
    "links" : [ "#NFKC", "#previous", "#setText", "#first", "#NFKD", "#next", "#last", "#NFD", "#NFC", "#NONE" ]
  }, {
    "name" : "public Mode getMode()",
    "returnType" : "Mode",
    "comment" : "\n     * Return the basic operation performed by this <tt>Normalizer</tt>\n     *\n     * @see #setMode\n     * @deprecated ICU 56\n     * @hide original deprecated declaration\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOption(int option, boolean value)",
    "returnType" : "void",
    "comment" : "\n     * Set options that affect this <tt>Normalizer</tt>'s operation.\n     * Options do not change the basic composition or decomposition operation\n     * that is being performed , but they control whether\n     * certain optional portions of the operation are done.\n     * Currently the only available option is:\n     *\n     * <ul>\n     *   <li>{@link #UNICODE_3_2} - Use Normalization conforming to Unicode version 3.2.\n     * </ul>\n     *\n     * @param   option  the option whose value is to be set.\n     * @param   value   the new setting for the option.  Use <tt>true</tt> to\n     *                  turn the option on and <tt>false</tt> to turn it off.\n     *\n     * @see #getOption\n     * @deprecated ICU 56\n     * @hide original deprecated declaration\n     ",
    "links" : [ "#UNICODE_3_2" ]
  }, {
    "name" : "public int getOption(int option)",
    "returnType" : "int",
    "comment" : "\n     * Determine whether an option is turned on or off.\n     * <p>\n     * @see #setOption\n     * @deprecated ICU 56\n     * @hide original deprecated declaration\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getText(char[] fillIn)",
    "returnType" : "int",
    "comment" : "\n     * Gets the underlying text storage\n     * @param fillIn the char buffer to fill the UTF-16 units.\n     *         The length of the buffer should be equal to the length of the\n     *         underlying text storage\n     * @throws IndexOutOfBoundsException If the index passed for the array is invalid.\n     * @see   #getLength\n     * @deprecated ICU 56\n     * @hide original deprecated declaration\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getLength()",
    "returnType" : "int",
    "comment" : "\n     * Gets the length of underlying text storage\n     * @return the length\n     * @deprecated ICU 56\n     * @hide original deprecated declaration\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getText()",
    "returnType" : "String",
    "comment" : "\n     * Returns the text under iteration as a string\n     * @return a copy of the text under iteration.\n     * @deprecated ICU 56\n     * @hide original deprecated declaration\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setText(StringBuffer newText)",
    "returnType" : "void",
    "comment" : "\n     * Set the input text over which this <tt>Normalizer</tt> will iterate.\n     * The iteration position is set to the beginning of the input text.\n     * @param newText   The new string to be normalized.\n     * @deprecated ICU 56\n     * @hide original deprecated declaration\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setText(char[] newText)",
    "returnType" : "void",
    "comment" : "\n     * Set the input text over which this <tt>Normalizer</tt> will iterate.\n     * The iteration position is set to the beginning of the input text.\n     * @param newText   The new string to be normalized.\n     * @deprecated ICU 56\n     * @hide original deprecated declaration\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setText(String newText)",
    "returnType" : "void",
    "comment" : "\n     * Set the input text over which this <tt>Normalizer</tt> will iterate.\n     * The iteration position is set to the beginning of the input text.\n     * @param newText   The new string to be normalized.\n     * @deprecated ICU 56\n     * @hide original deprecated declaration\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setText(CharacterIterator newText)",
    "returnType" : "void",
    "comment" : "\n     * Set the input text over which this <tt>Normalizer</tt> will iterate.\n     * The iteration position is set to the beginning of the input text.\n     * @param newText   The new string to be normalized.\n     * @deprecated ICU 56\n     * @hide original deprecated declaration\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setText(UCharacterIterator newText)",
    "returnType" : "void",
    "comment" : "\n     * Set the input text over which this <tt>Normalizer</tt> will iterate.\n     * The iteration position is set to the beginning of the string.\n     * @param newText   The new string to be normalized.\n     * @deprecated ICU 56\n     * @hide original deprecated declaration\n     ",
    "links" : [ ]
  }, {
    "name" : "private void clearBuffer()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean nextNormalize()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean previousNormalize()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int internalCompare(CharSequence s1, CharSequence s2, int options)",
    "returnType" : "int",
    "comment" : " TODO: Broaden the public compare(String, String, options) API like this. Ticket #7407",
    "links" : [ ]
  }, {
    "name" : "private static final CmpEquivLevel[] createCmpEquivLevelStack()",
    "returnType" : "CmpEquivLevel[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static int cmpEquivFold(CharSequence cs1, CharSequence cs2, int options)",
    "returnType" : "int",
    "comment" : "package",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Object clone()", "private static final Normalizer2 getComposeNormalizer2(boolean compat, int options)", "private static final Normalizer2 getDecomposeNormalizer2(boolean compat, int options)", "public static String compose(String str, boolean compat)", "public static String compose(String str, boolean compat, int options)", "public static int compose(char[] source, char[] target, boolean compat, int options)", "public static int compose(char[] src, int srcStart, int srcLimit, char[] dest, int destStart, int destLimit, boolean compat, int options)", "public static String decompose(String str, boolean compat)", "public static String decompose(String str, boolean compat, int options)", "public static int decompose(char[] source, char[] target, boolean compat, int options)", "public static int decompose(char[] src, int srcStart, int srcLimit, char[] dest, int destStart, int destLimit, boolean compat, int options)", "public static String normalize(String str, Mode mode, int options)", "public static String normalize(String src, Mode mode)", "public static int normalize(char[] source, char[] target, Mode mode, int options)", "public static int normalize(char[] src, int srcStart, int srcLimit, char[] dest, int destStart, int destLimit, Mode mode, int options)", "public static String normalize(int char32, Mode mode, int options)", "public static String normalize(int char32, Mode mode)", "public static QuickCheckResult quickCheck(String source, Mode mode)", "public static QuickCheckResult quickCheck(String source, Mode mode, int options)", "public static QuickCheckResult quickCheck(char[] source, Mode mode, int options)", "public static QuickCheckResult quickCheck(char[] source, int start, int limit, Mode mode, int options)", "public static boolean isNormalized(char[] src, int start, int limit, Mode mode, int options)", "public static boolean isNormalized(String str, Mode mode, int options)", "public static boolean isNormalized(int char32, Mode mode, int options)", "public static int compare(char[] s1, int s1Start, int s1Limit, char[] s2, int s2Start, int s2Limit, int options)", "public static int compare(String s1, String s2, int options)", "public static int compare(char[] s1, char[] s2, int options)", "public static int compare(int char32a, int char32b, int options)", "public static int compare(int char32a, String str2, int options)", "public static int concatenate(char[] left, int leftStart, int leftLimit, char[] right, int rightStart, int rightLimit, char[] dest, int destStart, int destLimit, Normalizer.Mode mode, int options)", "public static String concatenate(char[] left, char[] right, Mode mode, int options)", "public static String concatenate(String left, String right, Mode mode, int options)", "public static int getFC_NFKC_Closure(int c, char[] dest)", "public static String getFC_NFKC_Closure(int c)", "public int current()", "public int next()", "public int previous()", "public void reset()", "public void setIndexOnly(int index)", "public int setIndex(int index)", "public int getBeginIndex()", "public int getEndIndex()", "public int first()", "public int last()", "public int getIndex()", "public int startIndex()", "public int endIndex()", "public void setMode(Mode newMode)", "public Mode getMode()", "public void setOption(int option, boolean value)", "public int getOption(int option)", "public int getText(char[] fillIn)", "public int getLength()", "public String getText()", "public void setText(StringBuffer newText)", "public void setText(char[] newText)", "public void setText(String newText)", "public void setText(CharacterIterator newText)", "public void setText(UCharacterIterator newText)", "private void clearBuffer()", "private boolean nextNormalize()", "private boolean previousNormalize()", "private static int internalCompare(CharSequence s1, CharSequence s2, int options)", "private static final CmpEquivLevel[] createCmpEquivLevelStack()", " static int cmpEquivFold(CharSequence cs1, CharSequence cs2, int options)" ],
  "variableNames" : [ "text", "norm2", "mode", "options", "currentIndex", "nextIndex", "buffer", "bufferPos", "UNICODE_3_2", "DONE", "NONE", "NFD", "NFKD", "NFC", "DEFAULT", "NFKC", "FCD", "NO_OP", "COMPOSE", "COMPOSE_COMPAT", "DECOMP", "DECOMP_COMPAT", "IGNORE_HANGUL", "NO", "YES", "MAYBE", "FOLD_CASE_DEFAULT", "INPUT_IS_FCD", "COMPARE_IGNORE_CASE", "COMPARE_CODE_POINT_ORDER", "FOLD_CASE_EXCLUDE_SPECIAL_I", "COMPARE_NORM_OPTIONS_SHIFT", "COMPARE_EQUIV" ]
}