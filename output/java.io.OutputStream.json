{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/io/OutputStream.java",
  "packageName" : "java.io",
  "className" : "OutputStream",
  "comment" : "\n * This abstract class is the superclass of all classes representing\n * an output stream of bytes. An output stream accepts output bytes\n * and sends them to some sink.\n * <p>\n * Applications that need to define a subclass of\n * {@code OutputStream} must always provide at least a method\n * that writes one byte of output.\n *\n * @author  Arthur van Hoff\n * @see     java.io.BufferedOutputStream\n * @see     java.io.ByteArrayOutputStream\n * @see     java.io.DataOutputStream\n * @see     java.io.FilterOutputStream\n * @see     java.io.InputStream\n * @see     java.io.OutputStream#write(int)\n * @since   1.0\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public static OutputStream nullOutputStream()",
    "returnType" : "OutputStream",
    "comment" : "\n     * Returns a new {@code OutputStream} which discards all bytes.  The\n     * returned stream is initially open.  The stream is closed by calling\n     * the {@code close()} method.  Subsequent calls to {@code close()} have\n     * no effect.\n     *\n     * <p> While the stream is open, the {@code write(int)}, {@code\n     * write(byte[])}, and {@code write(byte[], int, int)} methods do nothing.\n     * After the stream has been closed, these methods all throw {@code\n     * IOException}.\n     *\n     * <p> The {@code flush()} method does nothing.\n     *\n     * @return an {@code OutputStream} which discards all bytes\n     *\n     * @since 11\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void write(int b) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes the specified byte to this output stream. The general\n     * contract for {@code write} is that one byte is written\n     * to the output stream. The byte to be written is the eight\n     * low-order bits of the argument {@code b}. The 24\n     * high-order bits of {@code b} are ignored.\n     * <p>\n     * Subclasses of {@code OutputStream} must provide an\n     * implementation for this method.\n     *\n     * @param      b   the {@code byte}.\n     * @throws     IOException  if an I/O error occurs. In particular,\n     *             an {@code IOException} may be thrown if the\n     *             output stream has been closed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void write(byte[] b) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes {@code b.length} bytes from the specified byte array\n     * to this output stream. The general contract for {@code write(b)}\n     * is that it should have exactly the same effect as the call\n     * {@code write(b, 0, b.length)}.\n     *\n     * @param      b   the data.\n     * @throws     IOException  if an I/O error occurs.\n     * @see        java.io.OutputStream#write(byte[], int, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void write(byte[] b, int off, int len) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes {@code len} bytes from the specified byte array\n     * starting at offset {@code off} to this output stream.\n     * The general contract for {@code write(b, off, len)} is that\n     * some of the bytes in the array {@code b} are written to the\n     * output stream in order; element {@code b[off]} is the first\n     * byte written and {@code b[off+len-1]} is the last byte written\n     * by this operation.\n     * <p>\n     * The {@code write} method of {@code OutputStream} calls\n     * the write method of one argument on each of the bytes to be\n     * written out. Subclasses are encouraged to override this method and\n     * provide a more efficient implementation.\n     * <p>\n     * If {@code b} is {@code null}, a\n     * {@code NullPointerException} is thrown.\n     * <p>\n     * If {@code off} is negative, or {@code len} is negative, or\n     * {@code off+len} is greater than the length of the array\n     * {@code b}, then an {@code IndexOutOfBoundsException} is thrown.\n     *\n     * @param      b     the data.\n     * @param      off   the start offset in the data.\n     * @param      len   the number of bytes to write.\n     * @throws     IOException  if an I/O error occurs. In particular,\n     *             an {@code IOException} is thrown if the output\n     *             stream is closed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void flush() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Flushes this output stream and forces any buffered output bytes\n     * to be written out. The general contract of {@code flush} is\n     * that calling it is an indication that, if any bytes previously\n     * written have been buffered by the implementation of the output\n     * stream, such bytes should immediately be written to their\n     * intended destination.\n     * <p>\n     * If the intended destination of this stream is an abstraction provided by\n     * the underlying operating system, for example a file, then flushing the\n     * stream guarantees only that bytes previously written to the stream are\n     * passed to the operating system for writing; it does not guarantee that\n     * they are actually written to a physical device such as a disk drive.\n     * <p>\n     * The {@code flush} method of {@code OutputStream} does nothing.\n     *\n     * @throws     IOException  if an I/O error occurs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void close() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Closes this output stream and releases any system resources\n     * associated with this stream. The general contract of {@code close}\n     * is that it closes the output stream. A closed stream cannot perform\n     * output operations and cannot be reopened.\n     * <p>\n     * The {@code close} method of {@code OutputStream} does nothing.\n     *\n     * @throws     IOException  if an I/O error occurs.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static OutputStream nullOutputStream()", "public abstract void write(int b) throws IOException", "public void write(byte[] b) throws IOException", "public void write(byte[] b, int off, int len) throws IOException", "public void flush() throws IOException", "public void close() throws IOException" ],
  "variableNames" : [ ]
}