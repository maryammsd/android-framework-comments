{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/view/inputmethod/InputContentInfo.java",
  "packageName" : "android.view.inputmethod",
  "className" : "InputContentInfo",
  "comment" : "\n * A container object with which input methods can send content files to the target application.\n ",
  "variables" : [ {
    "name" : "mContentUri",
    "type" : "Uri",
    "comment" : "\n     * The content URI that may or may not have a user ID embedded by\n     * {@link ContentProvider#maybeAddUserId(Uri, int)}.  This always preserves the exact value\n     * specified to a constructor.  In other words, if it had user ID embedded when it was passed\n     * to the constructor, it still has the same user ID no matter if it is valid or not.\n     ",
    "links" : [ "android.content.ContentProvider#maybeAddUserId(Uri" ]
  }, {
    "name" : "mContentUriOwnerUserId",
    "type" : "int",
    "comment" : "\n     * The user ID to which {@link #mContentUri} belongs to.  If {@link #mContentUri} already\n     * embedded the user ID when it was specified then this fields has the same user ID.  Otherwise\n     * the user ID is determined based on the process ID when the constructor is called.\n     *\n     * <p>CAUTION: If you received {@link InputContentInfo} from a different process, there is no\n     * guarantee that this value is correct and valid.  Never use this for any security purpose</p>\n     ",
    "links" : [ "android.view.inputmethod.InputContentInfo", "#mContentUri" ]
  }, {
    "name" : "mDescription",
    "type" : "ClipDescription",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLinkUri",
    "type" : "Uri",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUriToken",
    "type" : "IInputContentUriToken",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<InputContentInfo>",
    "comment" : "\n     * Used to make this class parcelable.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean validate()",
    "returnType" : "boolean",
    "comment" : "\n     * @return {@code true} if all the fields are valid.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean validateInternal(@NonNull Uri contentUri, @NonNull ClipDescription description, @Nullable Uri linkUri, boolean throwException)",
    "returnType" : "boolean",
    "comment" : "\n     * Constructs {@link InputContentInfo} object with additional link URI.\n     *\n     * @param contentUri Content URI to be exported from the input method.\n     * This cannot be {@code null}.\n     * @param description A {@link ClipDescription} object that contains the metadata of\n     * {@code contentUri} such as MIME type(s). This object cannot be {@code null}. Also\n     * {@link ClipDescription#getLabel()} should be describing the content specified by\n     * {@code contentUri} for accessibility reasons.\n     * @param linkUri An optional {@code http} or {@code https} URI. The editor author may provide\n     * a way to navigate the user to the specified web page if this is not {@code null}.\n     * @param throwException {@code true} if this method should throw an\n     * {@link InvalidParameterException}.\n     * @throws InvalidParameterException if any invalid parameter is specified.\n     ",
    "links" : [ "java.security.InvalidParameterException", "android.content.ClipDescription", "android.view.inputmethod.InputContentInfo", "android.content.ClipDescription#getLabel()" ]
  }, {
    "name" : "public Uri getContentUri()",
    "returnType" : "Uri",
    "comment" : "\n     * @return Content URI with which the content can be obtained.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ClipDescription getDescription()",
    "returnType" : "ClipDescription",
    "comment" : "\n     * @return {@link ClipDescription} object that contains the metadata of {@code #getContentUri()}\n     * such as MIME type(s). {@link ClipDescription#getLabel()} can be used for accessibility\n     * purpose.\n     ",
    "links" : [ "android.content.ClipDescription", "android.content.ClipDescription#getLabel()" ]
  }, {
    "name" : "public Uri getLinkUri()",
    "returnType" : "Uri",
    "comment" : "\n     * @return An optional {@code http} or {@code https} URI that is related to this content.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setUriToken(IInputContentUriToken token)",
    "returnType" : "void",
    "comment" : "\n     * Update the internal state of this object to be associated with the given token.\n     *\n     * <p>TODO(yukawa): Come up with an idea to make {@link InputContentInfo} immutable.</p>\n     *\n     * @param token special URI token obtained from the system.\n     * @hide\n     ",
    "links" : [ "android.view.inputmethod.InputContentInfo" ]
  }, {
    "name" : "public void requestPermission()",
    "returnType" : "void",
    "comment" : "\n     * Requests a temporary read-only access permission for content URI associated with this object.\n     *\n     * <p>Does nothing if the temporary permission is already granted.</p>\n     ",
    "links" : [ ]
  }, {
    "name" : "public void releasePermission()",
    "returnType" : "void",
    "comment" : "\n     * Releases a temporary read-only access permission for content URI associated with this object.\n     *\n     * <p>Does nothing if the temporary permission is not granted.</p>\n     ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "\n     * Used to package this object into a {@link Parcel}.\n     *\n     * @param dest The {@link Parcel} to be written.\n     * @param flags The flags used for parceling.\n     ",
    "links" : [ "android.os.Parcel" ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "mContentUri", "mContentUriOwnerUserId", "mDescription", "mLinkUri", "mUriToken", "CREATOR" ],
  "methodNames" : [ "public boolean validate()", "private static boolean validateInternal(@NonNull Uri contentUri, @NonNull ClipDescription description, @Nullable Uri linkUri, boolean throwException)", "public Uri getContentUri()", "public ClipDescription getDescription()", "public Uri getLinkUri()", "public void setUriToken(IInputContentUriToken token)", "public void requestPermission()", "public void releasePermission()", "public void writeToParcel(Parcel dest, int flags)", "public int describeContents()" ]
}