{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/http/HttpEngine.java",
  "packageName" : "android.net.http",
  "className" : "HttpEngine",
  "comment" : " the lifespan of the app.",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public static Builder builder(@NonNull Context context)",
    "returnType" : "Builder",
    "comment" : "\n     * Returns a new {@link Builder} object that facilitates creating a {@link HttpEngine}.\n     *\n     * {@hide}\n     ",
    "links" : [ "org.chromium.net.ICronetEngineBuilder", "android.net.http.HttpEngine" ]
  }, {
    "name" : "public static String getVersionString()",
    "returnType" : "String",
    "comment" : "\n     * @return a human-readable version string of the engine.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void shutdown()",
    "returnType" : "void",
    "comment" : "\n     * Shuts down the {@link HttpEngine} if there are no active requests,\n     * otherwise throws an exception.\n     *\n     * Cannot be called on network thread - the thread the HTTP stack calls into\n     * Executor on (which is different from the thread the Executor invokes\n     * callbacks on). May block until all the {@link HttpEngine} resources have been cleaned up.\n     ",
    "links" : [ "android.net.http.HttpEngine" ]
  }, {
    "name" : "public void bindToNetwork(@Nullable Network network)",
    "returnType" : "void",
    "comment" : "\n     * Binds the engine to the specified network. All requests created through this engine\n     * will use the network associated to this handle. If this network disconnects all requests will\n     * fail, the exact error will depend on the stage of request processing when the network\n     * disconnects.\n     *\n     * @param network the network to bind the engine to. Specify {@code null} to unbind.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract URLConnection openConnection(@SuppressLint(\"AndroidUri\") @NonNull URL url) throws IOException",
    "returnType" : "URLConnection",
    "comment" : " SuppressLint since this is for interface parity with j.n.URLConnection",
    "links" : [ ]
  }, {
    "name" : "public abstract URLStreamHandlerFactory createUrlStreamHandlerFactory()",
    "returnType" : "URLStreamHandlerFactory",
    "comment" : " SuppressLint since this is for interface parity with j.n.URLStreamHandlerFactory",
    "links" : [ ]
  }, {
    "name" : "public abstract UrlRequest.Builder newUrlRequestBuilder(@NonNull String url, @NonNull Executor executor, @NonNull UrlRequest.Callback callback)",
    "returnType" : "UrlRequest.Builder",
    "comment" : "\n     * Creates a builder for {@link UrlRequest}. All callbacks for\n     * generated {@link UrlRequest} objects will be invoked on\n     * {@code executor}'s threads. {@code executor} must not run tasks on the\n     * thread calling {@link Executor#execute} to prevent blocking networking\n     * operations and causing exceptions during shutdown.\n     *\n     * @param url URL for the generated requests.\n     * @param executor {@link Executor} on which all callbacks will be invoked.\n     * @param callback callback object that gets invoked on different events.\n     ",
    "links" : [ "java.util.concurrent.Executor", "android.net.http.UrlRequest", "java.util.concurrent.Executor#execute" ]
  }, {
    "name" : "public abstract BidirectionalStream.Builder newBidirectionalStreamBuilder(@NonNull String url, @NonNull Executor executor, @NonNull BidirectionalStream.Callback callback)",
    "returnType" : "BidirectionalStream.Builder",
    "comment" : "\n     * Creates a builder for {@link BidirectionalStream} objects. All callbacks for\n     * generated {@code BidirectionalStream} objects will be invoked on\n     * {@code executor}. {@code executor} must not run tasks on the\n     * current thread, otherwise the networking operations may block and exceptions\n     * may be thrown at shutdown time.\n     *\n     * @param url URL for the generated streams.\n     * @param executor the {@link Executor} on which {@code callback} methods will be invoked.\n     * @param callback the {@link BidirectionalStream.Callback} object that gets invoked upon\n     * different events occurring.\n     *\n     * @return the created builder.\n     ",
    "links" : [ "android.net.http.BidirectionalStream", "java.util.concurrent.Executor", "BidirectionalStream.Callback" ]
  } ],
  "methodNames" : [ "public static Builder builder(@NonNull Context context)", "public static String getVersionString()", "public abstract void shutdown()", "public void bindToNetwork(@Nullable Network network)", "public abstract URLConnection openConnection(@SuppressLint(\"AndroidUri\") @NonNull URL url) throws IOException", "public abstract URLStreamHandlerFactory createUrlStreamHandlerFactory()", "public abstract UrlRequest.Builder newUrlRequestBuilder(@NonNull String url, @NonNull Executor executor, @NonNull UrlRequest.Callback callback)", "public abstract BidirectionalStream.Builder newBidirectionalStreamBuilder(@NonNull String url, @NonNull Executor executor, @NonNull BidirectionalStream.Callback callback)" ],
  "variableNames" : [ ]
}