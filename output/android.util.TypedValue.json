{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/util/TypedValue.java",
  "packageName" : "android.util",
  "className" : "TypedValue",
  "comment" : "\n * Container for a dynamically typed data value.  Primarily used with\n * {@link android.content.res.Resources} for holding resource values.\n ",
  "variables" : [ {
    "name" : "TYPE_NULL",
    "type" : "int",
    "comment" : " The value contains no data. ",
    "links" : [ ]
  }, {
    "name" : "TYPE_REFERENCE",
    "type" : "int",
    "comment" : " The <var>data</var> field holds a resource identifier. ",
    "links" : [ ]
  }, {
    "name" : "TYPE_ATTRIBUTE",
    "type" : "int",
    "comment" : " The <var>data</var> field holds an attribute resource\n     *  identifier (referencing an attribute in the current theme\n     *  style, not a resource entry). ",
    "links" : [ ]
  }, {
    "name" : "TYPE_STRING",
    "type" : "int",
    "comment" : " The <var>string</var> field holds string data.  In addition, if\n     *  <var>data</var> is non-zero then it is the string block\n     *  index of the string and <var>assetCookie</var> is the set of\n     *  assets the string came from. ",
    "links" : [ ]
  }, {
    "name" : "TYPE_FLOAT",
    "type" : "int",
    "comment" : " The <var>data</var> field holds an IEEE 754 floating point number. ",
    "links" : [ ]
  }, {
    "name" : "TYPE_DIMENSION",
    "type" : "int",
    "comment" : " The <var>data</var> field holds a complex number encoding a\n     *  dimension value. ",
    "links" : [ ]
  }, {
    "name" : "TYPE_FRACTION",
    "type" : "int",
    "comment" : " The <var>data</var> field holds a complex number encoding a fraction\n     *  of a container. ",
    "links" : [ ]
  }, {
    "name" : "TYPE_FIRST_INT",
    "type" : "int",
    "comment" : " Identifies the start of plain integer values.  Any type value\n     *  from this to {@link #TYPE_LAST_INT} means the\n     *  <var>data</var> field holds a generic integer value. ",
    "links" : [ "#TYPE_LAST_INT" ]
  }, {
    "name" : "TYPE_INT_DEC",
    "type" : "int",
    "comment" : " The <var>data</var> field holds a number that was\n     *  originally specified in decimal. ",
    "links" : [ ]
  }, {
    "name" : "TYPE_INT_HEX",
    "type" : "int",
    "comment" : " The <var>data</var> field holds a number that was\n     *  originally specified in hexadecimal (0xn). ",
    "links" : [ ]
  }, {
    "name" : "TYPE_INT_BOOLEAN",
    "type" : "int",
    "comment" : " The <var>data</var> field holds 0 or 1 that was originally\n     *  specified as \"false\" or \"true\". ",
    "links" : [ ]
  }, {
    "name" : "TYPE_FIRST_COLOR_INT",
    "type" : "int",
    "comment" : " Identifies the start of integer values that were specified as\n     *  color constants (starting with '#'). ",
    "links" : [ ]
  }, {
    "name" : "TYPE_INT_COLOR_ARGB8",
    "type" : "int",
    "comment" : " The <var>data</var> field holds a color that was originally\n     *  specified as #aarrggbb. ",
    "links" : [ ]
  }, {
    "name" : "TYPE_INT_COLOR_RGB8",
    "type" : "int",
    "comment" : " The <var>data</var> field holds a color that was originally\n     *  specified as #rrggbb. ",
    "links" : [ ]
  }, {
    "name" : "TYPE_INT_COLOR_ARGB4",
    "type" : "int",
    "comment" : " The <var>data</var> field holds a color that was originally\n     *  specified as #argb. ",
    "links" : [ ]
  }, {
    "name" : "TYPE_INT_COLOR_RGB4",
    "type" : "int",
    "comment" : " The <var>data</var> field holds a color that was originally\n     *  specified as #rgb. ",
    "links" : [ ]
  }, {
    "name" : "TYPE_LAST_COLOR_INT",
    "type" : "int",
    "comment" : " Identifies the end of integer values that were specified as color\n     *  constants. ",
    "links" : [ ]
  }, {
    "name" : "TYPE_LAST_INT",
    "type" : "int",
    "comment" : " Identifies the end of plain integer values. ",
    "links" : [ ]
  }, {
    "name" : "COMPLEX_UNIT_SHIFT",
    "type" : "int",
    "comment" : " Complex data: bit location of unit information. ",
    "links" : [ ]
  }, {
    "name" : "COMPLEX_UNIT_MASK",
    "type" : "int",
    "comment" : " Complex data: mask to extract unit information (after shifting by\n     *  {@link #COMPLEX_UNIT_SHIFT}). This gives us 16 possible types, as\n     *  defined below. ",
    "links" : [ "#COMPLEX_UNIT_SHIFT" ]
  }, {
    "name" : "COMPLEX_UNIT_PX",
    "type" : "int",
    "comment" : " {@link #TYPE_DIMENSION} complex unit: Value is raw pixels. ",
    "links" : [ "#TYPE_DIMENSION" ]
  }, {
    "name" : "COMPLEX_UNIT_DIP",
    "type" : "int",
    "comment" : " {@link #TYPE_DIMENSION} complex unit: Value is Device Independent\n     *  Pixels. ",
    "links" : [ "#TYPE_DIMENSION" ]
  }, {
    "name" : "COMPLEX_UNIT_SP",
    "type" : "int",
    "comment" : " {@link #TYPE_DIMENSION} complex unit: Value is a scaled pixel. ",
    "links" : [ "#TYPE_DIMENSION" ]
  }, {
    "name" : "COMPLEX_UNIT_PT",
    "type" : "int",
    "comment" : " {@link #TYPE_DIMENSION} complex unit: Value is in points. ",
    "links" : [ "#TYPE_DIMENSION" ]
  }, {
    "name" : "COMPLEX_UNIT_IN",
    "type" : "int",
    "comment" : " {@link #TYPE_DIMENSION} complex unit: Value is in inches. ",
    "links" : [ "#TYPE_DIMENSION" ]
  }, {
    "name" : "COMPLEX_UNIT_MM",
    "type" : "int",
    "comment" : " {@link #TYPE_DIMENSION} complex unit: Value is in millimeters. ",
    "links" : [ "#TYPE_DIMENSION" ]
  }, {
    "name" : "COMPLEX_UNIT_FRACTION",
    "type" : "int",
    "comment" : " {@link #TYPE_FRACTION} complex unit: A basic fraction of the overall\n     *  size. ",
    "links" : [ "#TYPE_FRACTION" ]
  }, {
    "name" : "COMPLEX_UNIT_FRACTION_PARENT",
    "type" : "int",
    "comment" : " {@link #TYPE_FRACTION} complex unit: A fraction of the parent size. ",
    "links" : [ "#TYPE_FRACTION" ]
  }, {
    "name" : "COMPLEX_RADIX_SHIFT",
    "type" : "int",
    "comment" : " Complex data: where the radix information is, telling where the decimal\n     *  place appears in the mantissa. ",
    "links" : [ ]
  }, {
    "name" : "COMPLEX_RADIX_MASK",
    "type" : "int",
    "comment" : " Complex data: mask to extract radix information (after shifting by\n     * {@link #COMPLEX_RADIX_SHIFT}). This give us 4 possible fixed point \n     * representations as defined below. ",
    "links" : [ "#COMPLEX_RADIX_SHIFT" ]
  }, {
    "name" : "COMPLEX_RADIX_23p0",
    "type" : "int",
    "comment" : " Complex data: the mantissa is an integral number -- i.e., 0xnnnnnn.0 ",
    "links" : [ ]
  }, {
    "name" : "COMPLEX_RADIX_16p7",
    "type" : "int",
    "comment" : " Complex data: the mantissa magnitude is 16 bits -- i.e, 0xnnnn.nn ",
    "links" : [ ]
  }, {
    "name" : "COMPLEX_RADIX_8p15",
    "type" : "int",
    "comment" : " Complex data: the mantissa magnitude is 8 bits -- i.e, 0xnn.nnnn ",
    "links" : [ ]
  }, {
    "name" : "COMPLEX_RADIX_0p23",
    "type" : "int",
    "comment" : " Complex data: the mantissa magnitude is 0 bits -- i.e, 0x0.nnnnnn ",
    "links" : [ ]
  }, {
    "name" : "COMPLEX_MANTISSA_SHIFT",
    "type" : "int",
    "comment" : " Complex data: bit location of mantissa information. ",
    "links" : [ ]
  }, {
    "name" : "COMPLEX_MANTISSA_MASK",
    "type" : "int",
    "comment" : " Complex data: mask to extract mantissa information (after shifting by\n     *  {@link #COMPLEX_MANTISSA_SHIFT}). This gives us 23 bits of precision;\n     *  the top bit is the sign. ",
    "links" : [ "#COMPLEX_MANTISSA_SHIFT" ]
  }, {
    "name" : "DATA_NULL_UNDEFINED",
    "type" : "int",
    "comment" : "\n     * {@link #TYPE_NULL} data indicating the value was not specified.\n     ",
    "links" : [ "#TYPE_NULL" ]
  }, {
    "name" : "DATA_NULL_EMPTY",
    "type" : "int",
    "comment" : "\n     * {@link #TYPE_NULL} data indicating the value was explicitly set to null.\n     ",
    "links" : [ "#TYPE_NULL" ]
  }, {
    "name" : "DENSITY_DEFAULT",
    "type" : "int",
    "comment" : "\n     * If {@link #density} is equal to this value, then the density should be\n     * treated as the system's default density value: {@link DisplayMetrics#DENSITY_DEFAULT}.\n     ",
    "links" : [ "#density", "android.util.DisplayMetrics#DENSITY_DEFAULT" ]
  }, {
    "name" : "DENSITY_NONE",
    "type" : "int",
    "comment" : "\n     * If {@link #density} is equal to this value, then there is no density\n     * associated with the resource and it should not be scaled.\n     ",
    "links" : [ "#density" ]
  }, {
    "name" : "type",
    "type" : "int",
    "comment" : " The type held by this value, as defined by the constants here.\n     *  This tells you how to interpret the other fields in the object. ",
    "links" : [ ]
  }, {
    "name" : "string",
    "type" : "CharSequence",
    "comment" : " If the value holds a string, this is it. ",
    "links" : [ ]
  }, {
    "name" : "data",
    "type" : "int",
    "comment" : " Basic data in the value, interpreted according to {@link #type} ",
    "links" : [ "#type" ]
  }, {
    "name" : "assetCookie",
    "type" : "int",
    "comment" : " Additional information about where the value came from; only\n     *  set for strings. ",
    "links" : [ ]
  }, {
    "name" : "resourceId",
    "type" : "int",
    "comment" : " If Value came from a resource, this holds the corresponding resource id. ",
    "links" : [ ]
  }, {
    "name" : "changingConfigurations",
    "type" : "int",
    "comment" : "\n     * If the value came from a resource, these are the configurations for\n     * which its contents can change.\n     *\n     * <p>For example, if a resource has a value defined for the -land resource qualifier,\n     * this field will have the {@link android.content.pm.ActivityInfo#CONFIG_ORIENTATION} bit set.\n     * </p>\n     *\n     * @see android.content.pm.ActivityInfo#CONFIG_MCC\n     * @see android.content.pm.ActivityInfo#CONFIG_MNC\n     * @see android.content.pm.ActivityInfo#CONFIG_LOCALE\n     * @see android.content.pm.ActivityInfo#CONFIG_TOUCHSCREEN\n     * @see android.content.pm.ActivityInfo#CONFIG_KEYBOARD\n     * @see android.content.pm.ActivityInfo#CONFIG_KEYBOARD_HIDDEN\n     * @see android.content.pm.ActivityInfo#CONFIG_NAVIGATION\n     * @see android.content.pm.ActivityInfo#CONFIG_ORIENTATION\n     * @see android.content.pm.ActivityInfo#CONFIG_SCREEN_LAYOUT\n     * @see android.content.pm.ActivityInfo#CONFIG_UI_MODE\n     * @see android.content.pm.ActivityInfo#CONFIG_SCREEN_SIZE\n     * @see android.content.pm.ActivityInfo#CONFIG_SMALLEST_SCREEN_SIZE\n     * @see android.content.pm.ActivityInfo#CONFIG_DENSITY\n     * @see android.content.pm.ActivityInfo#CONFIG_LAYOUT_DIRECTION\n     * @see android.content.pm.ActivityInfo#CONFIG_COLOR_MODE\n     *\n     ",
    "links" : [ "android.content.pm.ActivityInfo#CONFIG_ORIENTATION" ]
  }, {
    "name" : "density",
    "type" : "int",
    "comment" : "\n     * If the Value came from a resource, this holds the corresponding pixel density.\n     * ",
    "links" : [ ]
  }, {
    "name" : "sourceResourceId",
    "type" : "int",
    "comment" : "\n     * If the Value came from a style resource or a layout resource (set in an XML layout), this\n     * holds the corresponding style or layout resource id against which the attribute was resolved.\n     ",
    "links" : [ ]
  }, {
    "name" : "MANTISSA_MULT",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RADIX_MULTS",
    "type" : "float[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DIMENSION_UNIT_STRS",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FRACTION_UNIT_STRS",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final float getFloat()",
    "returnType" : "float",
    "comment" : " Return the data for this value as a float.  Only use for values\n     *  whose type is {@link #TYPE_FLOAT}. ",
    "links" : [ "#TYPE_FLOAT" ]
  }, {
    "name" : "public boolean isColorType()",
    "returnType" : "boolean",
    "comment" : "\n     * Determine if a value is a color.\n     *\n     * This works by comparing {@link #type} to {@link #TYPE_FIRST_COLOR_INT}\n     * and {@link #TYPE_LAST_COLOR_INT}.\n     *\n     * @return true if this value is a color\n     ",
    "links" : [ "#TYPE_FIRST_COLOR_INT", "#TYPE_LAST_COLOR_INT", "#type" ]
  }, {
    "name" : "public static float complexToFloat(int complex)",
    "returnType" : "float",
    "comment" : "\n     * Retrieve the base value from a complex data integer.  This uses the \n     * {@link #COMPLEX_MANTISSA_MASK} and {@link #COMPLEX_RADIX_MASK} fields of \n     * the data to compute a floating point representation of the number they \n     * describe.  The units are ignored. \n     *  \n     * @param complex A complex data value.\n     * \n     * @return A floating point value corresponding to the complex data.\n     ",
    "links" : [ "#COMPLEX_MANTISSA_MASK", "#COMPLEX_RADIX_MASK" ]
  }, {
    "name" : "public static float complexToDimension(int data, DisplayMetrics metrics)",
    "returnType" : "float",
    "comment" : "\n     * Converts a complex data value holding a dimension to its final floating \n     * point value. The given <var>data</var> must be structured as a \n     * {@link #TYPE_DIMENSION}.\n     *  \n     * @param data A complex data value holding a unit, magnitude, and \n     *             mantissa.\n     * @param metrics Current display metrics to use in the conversion -- \n     *                supplies display density and scaling information.\n     * \n     * @return The complex floating point value multiplied by the appropriate \n     * metrics depending on its unit. \n     ",
    "links" : [ "#TYPE_DIMENSION" ]
  }, {
    "name" : "public static int complexToDimensionPixelOffset(int data, DisplayMetrics metrics)",
    "returnType" : "int",
    "comment" : "\n     * Converts a complex data value holding a dimension to its final value\n     * as an integer pixel offset.  This is the same as\n     * {@link #complexToDimension}, except the raw floating point value is\n     * truncated to an integer (pixel) value.\n     * The given <var>data</var> must be structured as a \n     * {@link #TYPE_DIMENSION}.\n     *  \n     * @param data A complex data value holding a unit, magnitude, and \n     *             mantissa.\n     * @param metrics Current display metrics to use in the conversion -- \n     *                supplies display density and scaling information.\n     * \n     * @return The number of pixels specified by the data and its desired\n     * multiplier and units.\n     ",
    "links" : [ "#complexToDimension", "#TYPE_DIMENSION" ]
  }, {
    "name" : "public static int complexToDimensionPixelSize(int data, DisplayMetrics metrics)",
    "returnType" : "int",
    "comment" : "\n     * Converts a complex data value holding a dimension to its final value\n     * as an integer pixel size.  This is the same as\n     * {@link #complexToDimension}, except the raw floating point value is\n     * converted to an integer (pixel) value for use as a size.  A size\n     * conversion involves rounding the base value, and ensuring that a\n     * non-zero base value is at least one pixel in size.\n     * The given <var>data</var> must be structured as a \n     * {@link #TYPE_DIMENSION}.\n     *  \n     * @param data A complex data value holding a unit, magnitude, and \n     *             mantissa.\n     * @param metrics Current display metrics to use in the conversion -- \n     *                supplies display density and scaling information.\n     * \n     * @return The number of pixels specified by the data and its desired\n     * multiplier and units.\n     ",
    "links" : [ "#complexToDimension", "#TYPE_DIMENSION" ]
  }, {
    "name" : "public static float complexToDimensionNoisy(int data, DisplayMetrics metrics)",
    "returnType" : "float",
    "comment" : "\n     * @hide Was accidentally exposed in API level 1 for debugging purposes.\n     * Kept for compatibility just in case although the debugging code has been removed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getComplexUnit()",
    "returnType" : "int",
    "comment" : "\n     * Return the complex unit type for this value. For example, a dimen type\n     * with value 12sp will return {@link #COMPLEX_UNIT_SP}. Only use for values\n     * whose type is {@link #TYPE_DIMENSION}.\n     *\n     * @return The complex unit type.\n     ",
    "links" : [ "#TYPE_DIMENSION", "#COMPLEX_UNIT_SP" ]
  }, {
    "name" : "public static float applyDimension(int unit, float value, DisplayMetrics metrics)",
    "returnType" : "float",
    "comment" : "\n     * Converts an unpacked complex data value holding a dimension to its final floating \n     * point value. The two parameters <var>unit</var> and <var>value</var>\n     * are as in {@link #TYPE_DIMENSION}.\n     *  \n     * @param unit The unit to convert from.\n     * @param value The value to apply the unit to.\n     * @param metrics Current display metrics to use in the conversion -- \n     *                supplies display density and scaling information.\n     * \n     * @return The complex floating point value multiplied by the appropriate \n     * metrics depending on its unit. \n     ",
    "links" : [ "#TYPE_DIMENSION" ]
  }, {
    "name" : "public float getDimension(DisplayMetrics metrics)",
    "returnType" : "float",
    "comment" : "\n     * Return the data for this value as a dimension.  Only use for values \n     * whose type is {@link #TYPE_DIMENSION}. \n     * \n     * @param metrics Current display metrics to use in the conversion -- \n     *                supplies display density and scaling information.\n     * \n     * @return The complex floating point value multiplied by the appropriate \n     * metrics depending on its unit. \n     ",
    "links" : [ "#TYPE_DIMENSION" ]
  }, {
    "name" : "public static float complexToFraction(int data, float base, float pbase)",
    "returnType" : "float",
    "comment" : "\n     * Converts a complex data value holding a fraction to its final floating \n     * point value. The given <var>data</var> must be structured as a \n     * {@link #TYPE_FRACTION}.\n     * \n     * @param data A complex data value holding a unit, magnitude, and \n     *             mantissa.\n     * @param base The base value of this fraction.  In other words, a \n     *             standard fraction is multiplied by this value.\n     * @param pbase The parent base value of this fraction.  In other \n     *             words, a parent fraction (nn%p) is multiplied by this\n     *             value.\n     * \n     * @return The complex floating point value multiplied by the appropriate \n     * base value depending on its unit. \n     ",
    "links" : [ "#TYPE_FRACTION" ]
  }, {
    "name" : "public float getFraction(float base, float pbase)",
    "returnType" : "float",
    "comment" : "\n     * Return the data for this value as a fraction.  Only use for values whose \n     * type is {@link #TYPE_FRACTION}. \n     * \n     * @param base The base value of this fraction.  In other words, a \n     *             standard fraction is multiplied by this value.\n     * @param pbase The parent base value of this fraction.  In other \n     *             words, a parent fraction (nn%p) is multiplied by this\n     *             value.\n     * \n     * @return The complex floating point value multiplied by the appropriate \n     * base value depending on its unit. \n     ",
    "links" : [ "#TYPE_FRACTION" ]
  }, {
    "name" : "public final CharSequence coerceToString()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Regardless of the actual type of the value, try to convert it to a\n     * string value.  For example, a color type will be converted to a\n     * string of the form #aarrggbb.\n     * \n     * @return CharSequence The coerced string value.  If the value is\n     *         null or the type is not known, null is returned.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final String coerceToString(int type, int data)",
    "returnType" : "String",
    "comment" : "\n     * Perform type conversion as per {@link #coerceToString()} on an\n     * explicitly supplied type and data.\n     * \n     * @param type The data type identifier.\n     * @param data The data value.\n     * \n     * @return String The coerced string value.  If the value is\n     *         null or the type is not known, null is returned.\n     ",
    "links" : [ "#coerceToString()" ]
  }, {
    "name" : "public void setTo(TypedValue other)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TYPE_NULL", "TYPE_REFERENCE", "TYPE_ATTRIBUTE", "TYPE_STRING", "TYPE_FLOAT", "TYPE_DIMENSION", "TYPE_FRACTION", "TYPE_FIRST_INT", "TYPE_INT_DEC", "TYPE_INT_HEX", "TYPE_INT_BOOLEAN", "TYPE_FIRST_COLOR_INT", "TYPE_INT_COLOR_ARGB8", "TYPE_INT_COLOR_RGB8", "TYPE_INT_COLOR_ARGB4", "TYPE_INT_COLOR_RGB4", "TYPE_LAST_COLOR_INT", "TYPE_LAST_INT", "COMPLEX_UNIT_SHIFT", "COMPLEX_UNIT_MASK", "COMPLEX_UNIT_PX", "COMPLEX_UNIT_DIP", "COMPLEX_UNIT_SP", "COMPLEX_UNIT_PT", "COMPLEX_UNIT_IN", "COMPLEX_UNIT_MM", "COMPLEX_UNIT_FRACTION", "COMPLEX_UNIT_FRACTION_PARENT", "COMPLEX_RADIX_SHIFT", "COMPLEX_RADIX_MASK", "COMPLEX_RADIX_23p0", "COMPLEX_RADIX_16p7", "COMPLEX_RADIX_8p15", "COMPLEX_RADIX_0p23", "COMPLEX_MANTISSA_SHIFT", "COMPLEX_MANTISSA_MASK", "DATA_NULL_UNDEFINED", "DATA_NULL_EMPTY", "DENSITY_DEFAULT", "DENSITY_NONE", "type", "string", "data", "assetCookie", "resourceId", "changingConfigurations", "density", "sourceResourceId", "MANTISSA_MULT", "RADIX_MULTS", "DIMENSION_UNIT_STRS", "FRACTION_UNIT_STRS" ],
  "methodNames" : [ "public final float getFloat()", "public boolean isColorType()", "public static float complexToFloat(int complex)", "public static float complexToDimension(int data, DisplayMetrics metrics)", "public static int complexToDimensionPixelOffset(int data, DisplayMetrics metrics)", "public static int complexToDimensionPixelSize(int data, DisplayMetrics metrics)", "public static float complexToDimensionNoisy(int data, DisplayMetrics metrics)", "public int getComplexUnit()", "public static float applyDimension(int unit, float value, DisplayMetrics metrics)", "public float getDimension(DisplayMetrics metrics)", "public static float complexToFraction(int data, float base, float pbase)", "public float getFraction(float base, float pbase)", "public final CharSequence coerceToString()", "public static final String coerceToString(int type, int data)", "public void setTo(TypedValue other)", "public String toString()" ]
}