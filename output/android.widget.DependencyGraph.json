{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/widget/RelativeLayout.java",
  "packageName" : "android.widget",
  "className" : "DependencyGraph",
  "comment" : "",
  "variables" : [ {
    "name" : "mNodes",
    "type" : "ArrayList<Node>",
    "comment" : "\n         * List of all views in the graph.\n         ",
    "links" : [ ]
  }, {
    "name" : "mKeyNodes",
    "type" : "SparseArray<Node>",
    "comment" : "\n         * List of nodes in the graph. Each node is identified by its\n         * view id (see View#getId()).\n         ",
    "links" : [ ]
  }, {
    "name" : "mRoots",
    "type" : "ArrayDeque<Node>",
    "comment" : "\n         * Temporary data structure used to build the list of roots\n         * for this graph.\n         ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " void clear()",
    "returnType" : "void",
    "comment" : "\n         * Clears the graph.\n         ",
    "links" : [ ]
  }, {
    "name" : " void add(View view)",
    "returnType" : "void",
    "comment" : "\n         * Adds a view to the graph.\n         *\n         * @param view The view to be added as a node to the graph.\n         ",
    "links" : [ ]
  }, {
    "name" : " void getSortedViews(View[] sorted, int... rules)",
    "returnType" : "void",
    "comment" : "\n         * Builds a sorted list of views. The sorting order depends on the dependencies\n         * between the view. For instance, if view C needs view A to be processed first\n         * and view A needs view B to be processed first, the dependency graph\n         * is: B -> A -> C. The sorted array will contain views B, A and C in this order.\n         *\n         * @param sorted The sorted list of views. The length of this array must\n         *        be equal to getChildCount().\n         * @param rules The list of rules to take into account.\n         ",
    "links" : [ ]
  }, {
    "name" : "private ArrayDeque<Node> findRoots(int[] rulesFilter)",
    "returnType" : "ArrayDeque<Node>",
    "comment" : "\n         * Finds the roots of the graph. A root is a node with no dependency and\n         * with [0..n] dependents.\n         *\n         * @param rulesFilter The list of rules to consider when building the\n         *        dependencies\n         *\n         * @return A list of node, each being a root of the graph\n         ",
    "links" : [ ]
  } ],
  "variableNames" : [ "mNodes", "mKeyNodes", "mRoots" ],
  "methodNames" : [ " void clear()", " void add(View view)", " void getSortedViews(View[] sorted, int... rules)", "private ArrayDeque<Node> findRoots(int[] rulesFilter)" ]
}