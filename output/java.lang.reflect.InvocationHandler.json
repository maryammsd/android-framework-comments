{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/lang/reflect/InvocationHandler.java",
  "packageName" : "java.lang.reflect",
  "className" : "InvocationHandler",
  "comment" : "\n * {@code InvocationHandler} is the interface implemented by\n * the <i>invocation handler</i> of a proxy instance.\n *\n * <p>Each proxy instance has an associated invocation handler.\n * When a method is invoked on a proxy instance, the method\n * invocation is encoded and dispatched to the {@code invoke}\n * method of its invocation handler.\n *\n * @author      Peter Jones\n * @see         Proxy\n * @since       1.3\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public Object invoke(Object proxy, Method method, Object[] args) throws Throwable",
    "returnType" : "Object",
    "comment" : "\n     * Processes a method invocation on a proxy instance and returns\n     * the result.  This method will be invoked on an invocation handler\n     * when a method is invoked on a proxy instance that it is\n     * associated with.\n     *\n     * @param   proxy the proxy instance that the method was invoked on\n     *\n     * @param   method the {@code Method} instance corresponding to\n     * the interface method invoked on the proxy instance.  The declaring\n     * class of the {@code Method} object will be the interface that\n     * the method was declared in, which may be a superinterface of the\n     * proxy interface that the proxy class inherits the method through.\n     *\n     * @param   args an array of objects containing the values of the\n     * arguments passed in the method invocation on the proxy instance,\n     * or {@code null} if interface method takes no arguments.\n     * Arguments of primitive types are wrapped in instances of the\n     * appropriate primitive wrapper class, such as\n     * {@code java.lang.Integer} or {@code java.lang.Boolean}.\n     *\n     * @return  the value to return from the method invocation on the\n     * proxy instance.  If the declared return type of the interface\n     * method is a primitive type, then the value returned by\n     * this method must be an instance of the corresponding primitive\n     * wrapper class; otherwise, it must be a type assignable to the\n     * declared return type.  If the value returned by this method is\n     * {@code null} and the interface method's return type is\n     * primitive, then a {@code NullPointerException} will be\n     * thrown by the method invocation on the proxy instance.  If the\n     * value returned by this method is otherwise not compatible with\n     * the interface method's declared return type as described above,\n     * a {@code ClassCastException} will be thrown by the method\n     * invocation on the proxy instance.\n     *\n     * @throws  Throwable the exception to throw from the method\n     * invocation on the proxy instance.  The exception's type must be\n     * assignable either to any of the exception types declared in the\n     * {@code throws} clause of the interface method or to the\n     * unchecked exception types {@code java.lang.RuntimeException}\n     * or {@code java.lang.Error}.  If a checked exception is\n     * thrown by this method that is not assignable to any of the\n     * exception types declared in the {@code throws} clause of\n     * the interface method, then an\n     * {@link UndeclaredThrowableException} containing the\n     * exception that was thrown by this method will be thrown by the\n     * method invocation on the proxy instance.\n     *\n     * @see     UndeclaredThrowableException\n     ",
    "links" : [ "java.lang.reflect.UndeclaredThrowableException" ]
  } ],
  "methodNames" : [ "public Object invoke(Object proxy, Method method, Object[] args) throws Throwable" ],
  "variableNames" : [ ]
}