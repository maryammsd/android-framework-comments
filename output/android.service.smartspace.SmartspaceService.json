{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/service/smartspace/SmartspaceService.java",
  "packageName" : "android.service.smartspace",
  "className" : "SmartspaceService",
  "comment" : "\n * A service used to share the lifecycle of smartspace UI (open, close, interaction)\n * and also to return smartspace result on a query.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "SERVICE_INTERFACE",
    "type" : "String",
    "comment" : "\n     * The {@link Intent} that must be declared as handled by the service.\n     *\n     * <p>The service must also require the {@link android.permission#MANAGE_SMARTSPACE}\n     * permission.\n     *\n     * @hide\n     ",
    "links" : [ "android.permission#MANAGE_SMARTSPACE", "android.content.Intent" ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSessionCallbacks",
    "type" : "ArrayMap<SmartspaceSessionId, ArrayList<CallbackWrapper>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInterface",
    "type" : "android.service.smartspace.ISmartspaceService",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void onCreate()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final IBinder onBind(@NonNull Intent intent)",
    "returnType" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void doCreateSmartspaceSession(@NonNull SmartspaceConfig config, @NonNull SmartspaceSessionId sessionId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void onCreateSmartspaceSession(@NonNull SmartspaceConfig config, @NonNull SmartspaceSessionId sessionId)",
    "returnType" : "void",
    "comment" : "\n     * Gets called when the client calls <code> SmartspaceManager#createSmartspaceSession </code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void notifySmartspaceEvent(@NonNull SmartspaceSessionId sessionId, @NonNull SmartspaceTargetEvent event)",
    "returnType" : "void",
    "comment" : "\n     * Gets called when the client calls <code> SmartspaceSession#notifySmartspaceEvent </code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void onRequestSmartspaceUpdate(@NonNull SmartspaceSessionId sessionId)",
    "returnType" : "void",
    "comment" : "\n     * Gets called when the client calls <code> SmartspaceSession#requestSmartspaceUpdate </code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void doRegisterSmartspaceUpdates(@NonNull SmartspaceSessionId sessionId, @NonNull ISmartspaceCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void doUnregisterSmartspaceUpdates(@NonNull SmartspaceSessionId sessionId, @NonNull ISmartspaceCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void doRequestPredictionUpdate(@NonNull SmartspaceSessionId sessionId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private CallbackWrapper findCallbackWrapper(ArrayList<CallbackWrapper> callbacks, ISmartspaceCallback callback)",
    "returnType" : "CallbackWrapper",
    "comment" : "\n     * Finds the callback wrapper for the given callback.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void removeCallbackWrapper(@Nullable ArrayList<CallbackWrapper> callbacks, @Nullable CallbackWrapper wrapper)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void onDestroySmartspaceSession(@NonNull SmartspaceSessionId sessionId)",
    "returnType" : "void",
    "comment" : "\n     * Gets called when the client calls <code> SmartspaceManager#destroy() </code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void doDestroy(@NonNull SmartspaceSessionId sessionId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final void updateSmartspaceTargets(@NonNull SmartspaceSessionId sessionId, @NonNull List<SmartspaceTarget> targets)",
    "returnType" : "void",
    "comment" : "\n     * Used by the prediction factory to send back results the client app. The can be called\n     * in response to {@link #onRequestSmartspaceUpdate(SmartspaceSessionId)} or proactively as\n     * a result of changes in predictions.\n     ",
    "links" : [ "#onRequestSmartspaceUpdate(SmartspaceSessionId)" ]
  }, {
    "name" : "public abstract void onDestroy(@NonNull SmartspaceSessionId sessionId)",
    "returnType" : "void",
    "comment" : "\n     * Destroys a smartspace session.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void onCreate()", "public final IBinder onBind(@NonNull Intent intent)", "private void doCreateSmartspaceSession(@NonNull SmartspaceConfig config, @NonNull SmartspaceSessionId sessionId)", "public abstract void onCreateSmartspaceSession(@NonNull SmartspaceConfig config, @NonNull SmartspaceSessionId sessionId)", "public abstract void notifySmartspaceEvent(@NonNull SmartspaceSessionId sessionId, @NonNull SmartspaceTargetEvent event)", "public abstract void onRequestSmartspaceUpdate(@NonNull SmartspaceSessionId sessionId)", "private void doRegisterSmartspaceUpdates(@NonNull SmartspaceSessionId sessionId, @NonNull ISmartspaceCallback callback)", "private void doUnregisterSmartspaceUpdates(@NonNull SmartspaceSessionId sessionId, @NonNull ISmartspaceCallback callback)", "private void doRequestPredictionUpdate(@NonNull SmartspaceSessionId sessionId)", "private CallbackWrapper findCallbackWrapper(ArrayList<CallbackWrapper> callbacks, ISmartspaceCallback callback)", "private void removeCallbackWrapper(@Nullable ArrayList<CallbackWrapper> callbacks, @Nullable CallbackWrapper wrapper)", "public abstract void onDestroySmartspaceSession(@NonNull SmartspaceSessionId sessionId)", "private void doDestroy(@NonNull SmartspaceSessionId sessionId)", "public final void updateSmartspaceTargets(@NonNull SmartspaceSessionId sessionId, @NonNull List<SmartspaceTarget> targets)", "public abstract void onDestroy(@NonNull SmartspaceSessionId sessionId)" ],
  "variableNames" : [ "SERVICE_INTERFACE", "DEBUG", "TAG", "mSessionCallbacks", "mHandler", "mInterface" ]
}