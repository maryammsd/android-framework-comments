{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/widget/Toast.java",
  "packageName" : "android.widget",
  "className" : "Toast",
  "comment" : "\n * A toast is a view containing a quick little message for the user.  The toast class\n * helps you create and show those.\n * {@more}\n *\n * <p>\n * When the view is shown to the user, appears as a floating view over the\n * application.  It will never receive focus.  The user will probably be in the\n * middle of typing something else.  The idea is to be as unobtrusive as\n * possible, while still showing the user the information you want them to see.\n * Two examples are the volume control, and the brief message saying that your\n * settings have been saved.\n * <p>\n * The easiest way to use this class is to call one of the static methods that constructs\n * everything you need and returns a new Toast object.\n * <p>\n * Note that\n * <a href=\"{@docRoot}reference/com/google/android/material/snackbar/Snackbar\">Snackbars</a> are\n * preferred for brief messages while the app is in the foreground.\n *\n * <div class=\"special reference\">\n * <h3>Developer Guides</h3>\n * <p>For information about creating Toast notifications, read the\n * <a href=\"{@docRoot}guide/topics/ui/notifiers/toasts.html\">Toast Notifications</a> developer\n * guide.</p>\n * </div>\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "localLOGV",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LENGTH_SHORT",
    "type" : "int",
    "comment" : "\n     * Show the view or text notification for a short period of time.  This time\n     * could be user-definable.  This is the default.\n     * @see #setDuration\n     ",
    "links" : [ ]
  }, {
    "name" : "LENGTH_LONG",
    "type" : "int",
    "comment" : "\n     * Show the view or text notification for a long period of time.  This time\n     * could be user-definable.\n     * @see #setDuration\n     ",
    "links" : [ ]
  }, {
    "name" : "CHANGE_TEXT_TOASTS_IN_THE_SYSTEM",
    "type" : "long",
    "comment" : "\n     * Text toasts will be rendered by SystemUI instead of in-app, so apps can't circumvent\n     * background custom toast restrictions.\n     ",
    "links" : [ ]
  }, {
    "name" : "mToken",
    "type" : "Binder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTN",
    "type" : "TN",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDuration",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallbacks",
    "type" : "List<Callback>",
    "comment" : "\n     * This is also passed to {@link TN} object, where it's also accessed with itself as its own\n     * lock.\n     ",
    "links" : [ "TN" ]
  }, {
    "name" : "mNextView",
    "type" : "View",
    "comment" : "\n     * View to be displayed, in case this is a custom toast (e.g. not created with {@link\n     * #makeText(Context, int, int)} or its variants).\n     ",
    "links" : [ "#makeText(Context" ]
  }, {
    "name" : "mText",
    "type" : "CharSequence",
    "comment" : "\n     * Text to be shown, in case this is NOT a custom toast (e.g. created with {@link\n     * #makeText(Context, int, int)} or its variants).\n     ",
    "links" : [ "#makeText(Context" ]
  }, {
    "name" : "sService",
    "type" : "INotificationManager",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private Looper getLooper(@Nullable Looper looper)",
    "returnType" : "Looper",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void show()",
    "returnType" : "void",
    "comment" : "\n     * Show the view for the specified duration.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void cancel()",
    "returnType" : "void",
    "comment" : "\n     * Close the view if it's showing, or don't show it if it isn't showing yet.\n     * You do not normally have to call this.  Normally view will disappear on its own\n     * after the appropriate duration.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setView(View view)",
    "returnType" : "void",
    "comment" : "\n     * Set the view to show.\n     *\n     * @see #getView\n     * @deprecated Custom toast views are deprecated. Apps can create a standard text toast with the\n     *      {@link #makeText(Context, CharSequence, int)} method, or use a\n     *      <a href=\"{@docRoot}reference/com/google/android/material/snackbar/Snackbar\">Snackbar</a>\n     *      when in the foreground. Starting from Android {@link Build.VERSION_CODES#R}, apps\n     *      targeting API level {@link Build.VERSION_CODES#R} or higher that are in the background\n     *      will not have custom toast views displayed.\n     ",
    "links" : [ "Build.VERSION_CODES#R", "#makeText(Context" ]
  }, {
    "name" : "public View getView()",
    "returnType" : "View",
    "comment" : "\n     * Return the view.\n     *\n     * <p>Toasts constructed with {@link #Toast(Context)} that haven't called {@link #setView(View)}\n     * with a non-{@code null} view will return {@code null} here.\n     *\n     * <p>Starting from Android {@link Build.VERSION_CODES#R}, in apps targeting API level {@link\n     * Build.VERSION_CODES#R} or higher, toasts constructed with {@link #makeText(Context,\n     * CharSequence, int)} or its variants will also return {@code null} here unless they had called\n     * {@link #setView(View)} with a non-{@code null} view. If you want to be notified when the\n     * toast is shown or hidden, use {@link #addCallback(Callback)}.\n     *\n     * @see #setView\n     * @deprecated Custom toast views are deprecated. Apps can create a standard text toast with the\n     *      {@link #makeText(Context, CharSequence, int)} method, or use a\n     *      <a href=\"{@docRoot}reference/com/google/android/material/snackbar/Snackbar\">Snackbar</a>\n     *      when in the foreground. Starting from Android {@link Build.VERSION_CODES#R}, apps\n     *      targeting API level {@link Build.VERSION_CODES#R} or higher that are in the background\n     *      will not have custom toast views displayed.\n     ",
    "links" : [ "Build.VERSION_CODES#R", "#makeText(Context", "#addCallback(Callback)", "#Toast(Context)", "#setView(View)" ]
  }, {
    "name" : "public void setDuration(@Duration int duration)",
    "returnType" : "void",
    "comment" : "\n     * Set how long to show the view for.\n     * @see #LENGTH_SHORT\n     * @see #LENGTH_LONG\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getDuration()",
    "returnType" : "int",
    "comment" : "\n     * Return the duration.\n     * @see #setDuration\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMargin(float horizontalMargin, float verticalMargin)",
    "returnType" : "void",
    "comment" : "\n     * Set the margins of the view.\n     *\n     * <p><strong>Warning:</strong> Starting from Android {@link Build.VERSION_CODES#R}, for apps\n     * targeting API level {@link Build.VERSION_CODES#R} or higher, this method is a no-op when\n     * called on text toasts.\n     *\n     * @param horizontalMargin The horizontal margin, in percentage of the\n     *        container width, between the container's edges and the\n     *        notification\n     * @param verticalMargin The vertical margin, in percentage of the\n     *        container height, between the container's edges and the\n     *        notification\n     ",
    "links" : [ "Build.VERSION_CODES#R" ]
  }, {
    "name" : "public float getHorizontalMargin()",
    "returnType" : "float",
    "comment" : "\n     * Return the horizontal margin.\n     *\n     * <p><strong>Warning:</strong> Starting from Android {@link Build.VERSION_CODES#R}, for apps\n     * targeting API level {@link Build.VERSION_CODES#R} or higher, this method shouldn't be called\n     * on text toasts as its return value may not reflect actual value since text toasts are not\n     * rendered by the app anymore.\n     ",
    "links" : [ "Build.VERSION_CODES#R" ]
  }, {
    "name" : "public float getVerticalMargin()",
    "returnType" : "float",
    "comment" : "\n     * Return the vertical margin.\n     *\n     * <p><strong>Warning:</strong> Starting from Android {@link Build.VERSION_CODES#R}, for apps\n     * targeting API level {@link Build.VERSION_CODES#R} or higher, this method shouldn't be called\n     * on text toasts as its return value may not reflect actual value since text toasts are not\n     * rendered by the app anymore.\n     ",
    "links" : [ "Build.VERSION_CODES#R" ]
  }, {
    "name" : "public void setGravity(int gravity, int xOffset, int yOffset)",
    "returnType" : "void",
    "comment" : "\n     * Set the location at which the notification should appear on the screen.\n     *\n     * <p><strong>Warning:</strong> Starting from Android {@link Build.VERSION_CODES#R}, for apps\n     * targeting API level {@link Build.VERSION_CODES#R} or higher, this method is a no-op when\n     * called on text toasts.\n     *\n     * @see android.view.Gravity\n     * @see #getGravity\n     ",
    "links" : [ "Build.VERSION_CODES#R" ]
  }, {
    "name" : "public int getGravity()",
    "returnType" : "int",
    "comment" : "\n     * Get the location at which the notification should appear on the screen.\n     *\n     * <p><strong>Warning:</strong> Starting from Android {@link Build.VERSION_CODES#R}, for apps\n     * targeting API level {@link Build.VERSION_CODES#R} or higher, this method shouldn't be called\n     * on text toasts as its return value may not reflect actual value since text toasts are not\n     * rendered by the app anymore.\n     *\n     * @see android.view.Gravity\n     * @see #getGravity\n     ",
    "links" : [ "Build.VERSION_CODES#R" ]
  }, {
    "name" : "public int getXOffset()",
    "returnType" : "int",
    "comment" : "\n     * Return the X offset in pixels to apply to the gravity's location.\n     *\n     * <p><strong>Warning:</strong> Starting from Android {@link Build.VERSION_CODES#R}, for apps\n     * targeting API level {@link Build.VERSION_CODES#R} or higher, this method shouldn't be called\n     * on text toasts as its return value may not reflect actual value since text toasts are not\n     * rendered by the app anymore.\n     ",
    "links" : [ "Build.VERSION_CODES#R" ]
  }, {
    "name" : "public int getYOffset()",
    "returnType" : "int",
    "comment" : "\n     * Return the Y offset in pixels to apply to the gravity's location.\n     *\n     * <p><strong>Warning:</strong> Starting from Android {@link Build.VERSION_CODES#R}, for apps\n     * targeting API level {@link Build.VERSION_CODES#R} or higher, this method shouldn't be called\n     * on text toasts as its return value may not reflect actual value since text toasts are not\n     * rendered by the app anymore.\n     ",
    "links" : [ "Build.VERSION_CODES#R" ]
  }, {
    "name" : "private boolean isSystemRenderedTextToast()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addCallback(@NonNull Callback callback)",
    "returnType" : "void",
    "comment" : "\n     * Adds a callback to be notified when the toast is shown or hidden.\n     *\n     * Note that if the toast is blocked for some reason you won't get a call back.\n     *\n     * @see #removeCallback(Callback)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removeCallback(@NonNull Callback callback)",
    "returnType" : "void",
    "comment" : "\n     * Removes a callback previously added with {@link #addCallback(Callback)}.\n     ",
    "links" : [ "#addCallback(Callback)" ]
  }, {
    "name" : "public WindowManager.LayoutParams getWindowParams()",
    "returnType" : "WindowManager.LayoutParams",
    "comment" : "\n     * Gets the LayoutParams for the Toast window.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Toast makeText(Context context, CharSequence text, @Duration int duration)",
    "returnType" : "Toast",
    "comment" : "\n     * Make a standard toast that just contains text.\n     *\n     * @param context  The context to use.  Usually your {@link android.app.Application}\n     *                 or {@link android.app.Activity} object.\n     * @param text     The text to show.  Can be formatted text.\n     * @param duration How long to display the message.  Either {@link #LENGTH_SHORT} or\n     *                 {@link #LENGTH_LONG}\n     *\n     ",
    "links" : [ "android.app.Application", "#LENGTH_LONG", "android.app.Activity", "#LENGTH_SHORT" ]
  }, {
    "name" : "public static Toast makeText(@NonNull Context context, @Nullable Looper looper, @NonNull CharSequence text, @Duration int duration)",
    "returnType" : "Toast",
    "comment" : "\n     * Make a standard toast to display using the specified looper.\n     * If looper is null, Looper.myLooper() is used.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Toast makeText(Context context, @StringRes int resId, @Duration int duration) throws Resources.NotFoundException",
    "returnType" : "Toast",
    "comment" : "\n     * Make a standard toast that just contains text from a resource.\n     *\n     * @param context  The context to use.  Usually your {@link android.app.Application}\n     *                 or {@link android.app.Activity} object.\n     * @param resId    The resource id of the string resource to use.  Can be formatted text.\n     * @param duration How long to display the message.  Either {@link #LENGTH_SHORT} or\n     *                 {@link #LENGTH_LONG}\n     *\n     * @throws Resources.NotFoundException if the resource can't be found.\n     ",
    "links" : [ "android.app.Application", "#LENGTH_LONG", "android.app.Activity", "#LENGTH_SHORT" ]
  }, {
    "name" : "public void setText(@StringRes int resId)",
    "returnType" : "void",
    "comment" : "\n     * Update the text in a Toast that was previously created using one of the makeText() methods.\n     * @param resId The new text for the Toast.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setText(CharSequence s)",
    "returnType" : "void",
    "comment" : "\n     * Update the text in a Toast that was previously created using one of the makeText() methods.\n     * @param s The new text for the Toast.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static INotificationManager getService()",
    "returnType" : "INotificationManager",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "localLOGV", "LENGTH_SHORT", "LENGTH_LONG", "CHANGE_TEXT_TOASTS_IN_THE_SYSTEM", "mToken", "mContext", "mHandler", "mTN", "mDuration", "mCallbacks", "mNextView", "mText", "sService" ],
  "methodNames" : [ "private Looper getLooper(@Nullable Looper looper)", "public void show()", "public void cancel()", "public void setView(View view)", "public View getView()", "public void setDuration(@Duration int duration)", "public int getDuration()", "public void setMargin(float horizontalMargin, float verticalMargin)", "public float getHorizontalMargin()", "public float getVerticalMargin()", "public void setGravity(int gravity, int xOffset, int yOffset)", "public int getGravity()", "public int getXOffset()", "public int getYOffset()", "private boolean isSystemRenderedTextToast()", "public void addCallback(@NonNull Callback callback)", "public void removeCallback(@NonNull Callback callback)", "public WindowManager.LayoutParams getWindowParams()", "public static Toast makeText(Context context, CharSequence text, @Duration int duration)", "public static Toast makeText(@NonNull Context context, @Nullable Looper looper, @NonNull CharSequence text, @Duration int duration)", "public static Toast makeText(Context context, @StringRes int resId, @Duration int duration) throws Resources.NotFoundException", "public void setText(@StringRes int resId)", "public void setText(CharSequence s)", "private static INotificationManager getService()" ]
}