{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/net/util/DnsUtils.java",
  "packageName" : "android.net.util",
  "className" : "DnsUtils",
  "comment" : "\n * @hide\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CHAR_BIT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IPV6_ADDR_SCOPE_NODELOCAL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IPV6_ADDR_SCOPE_LINKLOCAL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IPV6_ADDR_SCOPE_SITELOCAL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IPV6_ADDR_SCOPE_GLOBAL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sRfc6724Comparator",
    "type" : "Comparator<SortableAddress>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static List<InetAddress> rfc6724Sort(@Nullable Network network, @NonNull List<InetAddress> answers)",
    "returnType" : "List<InetAddress>",
    "comment" : "\n     * Sort the given address list in RFC6724 order.\n     * Will leave the list unchanged if an error occurs.\n     *\n     * This function matches the behaviour of _rfc6724_sort in the native resolver.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static InetAddress findSrcAddress(@Nullable Network network, @NonNull InetAddress addr)",
    "returnType" : "InetAddress",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int findLabel(@NonNull InetAddress addr)",
    "returnType" : "int",
    "comment" : "\n     * Get the label for a given IPv4/IPv6 address.\n     * RFC 6724, section 2.1.\n     *\n     * Note that Java will return an IPv4-mapped address as an IPv4 address.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean isIpv6Address(@Nullable InetAddress addr)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isIpv4Address(@Nullable InetAddress addr)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isIpv6Address6To4(@NonNull InetAddress addr)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isIpv6AddressTeredo(@NonNull InetAddress addr)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isIpv6AddressULA(@NonNull InetAddress addr)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isIpv6Address6Bone(@NonNull InetAddress addr)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int getIpv6MulticastScope(@NonNull InetAddress addr)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int findScope(@NonNull InetAddress addr)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int findPrecedence(@NonNull InetAddress addr)",
    "returnType" : "int",
    "comment" : "\n     * Get the precedence for a given IPv4/IPv6 address.\n     * RFC 6724, section 2.1.\n     *\n     * Note that Java will return an IPv4-mapped address as an IPv4 address.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int compareIpv6PrefixMatchLen(@NonNull InetAddress srcAddr, @NonNull InetAddress dstAddr)",
    "returnType" : "int",
    "comment" : "\n     * Find number of matching initial bits between the two addresses.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean haveIpv4(@Nullable Network network)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if given network has Ipv4 capability\n     * This function matches the behaviour of have_ipv4 in the native resolver.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean haveIpv6(@Nullable Network network)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if given network has Ipv6 capability\n     * This function matches the behaviour of have_ipv6 in the native resolver.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean checkConnectivity(@Nullable Network network, int domain, @NonNull SocketAddress addr)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "CHAR_BIT", "IPV6_ADDR_SCOPE_NODELOCAL", "IPV6_ADDR_SCOPE_LINKLOCAL", "IPV6_ADDR_SCOPE_SITELOCAL", "IPV6_ADDR_SCOPE_GLOBAL", "sRfc6724Comparator" ],
  "methodNames" : [ "public static List<InetAddress> rfc6724Sort(@Nullable Network network, @NonNull List<InetAddress> answers)", "private static InetAddress findSrcAddress(@Nullable Network network, @NonNull InetAddress addr)", "private static int findLabel(@NonNull InetAddress addr)", "private static boolean isIpv6Address(@Nullable InetAddress addr)", "private static boolean isIpv4Address(@Nullable InetAddress addr)", "private static boolean isIpv6Address6To4(@NonNull InetAddress addr)", "private static boolean isIpv6AddressTeredo(@NonNull InetAddress addr)", "private static boolean isIpv6AddressULA(@NonNull InetAddress addr)", "private static boolean isIpv6Address6Bone(@NonNull InetAddress addr)", "private static int getIpv6MulticastScope(@NonNull InetAddress addr)", "private static int findScope(@NonNull InetAddress addr)", "private static int findPrecedence(@NonNull InetAddress addr)", "private static int compareIpv6PrefixMatchLen(@NonNull InetAddress srcAddr, @NonNull InetAddress dstAddr)", "public static boolean haveIpv4(@Nullable Network network)", "public static boolean haveIpv6(@Nullable Network network)", "private static boolean checkConnectivity(@Nullable Network network, int domain, @NonNull SocketAddress addr)" ]
}