{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/telephony/ims/stub/SipDelegate.java",
  "packageName" : "android.telephony.ims.stub",
  "className" : "SipDelegate",
  "comment" : "\n * The {@link SipDelegate} is implemented by the {@link ImsService} and allows a privileged\n * IMS application to use this delegate to send SIP messages as well as acknowledge the receipt of\n * incoming SIP messages delivered to the application over the existing IMS registration, allowing\n * for a single IMS registration for multiple IMS applications.\n * <p>\n * Once the SIP delegate is created for that application,\n * {@link ImsRegistrationImplBase#updateSipDelegateRegistration()} will be called, indicating that\n * the application is finished setting up SipDelegates and the existing IMS registration may be\n * modified to include the features managed by these SipDelegates.\n * <p>\n * This SipDelegate will need to notify the remote application of the registration of these features\n * as well as the associated {@link SipDelegateConfiguration} before the application can start\n * sending/receiving SIP messages via the transport. See\n * {@link android.telephony.ims.DelegateStateCallback} for more information.\n * @hide\n ",
  "links" : [ "android.telephony.ims.stub.ImsRegistrationImplBase#updateSipDelegateRegistration()", "android.telephony.ims.DelegateStateCallback", "android.telephony.ims.stub.SipDelegate", "android.telephony.ims.SipDelegateConfiguration", "android.telephony.ims.ImsService" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " void sendMessage(@NonNull SipMessage message, long configVersion)",
    "returnType" : "void",
    "comment" : "\n     * The framework calls this method when a remote RCS application wishes to send a new outgoing\n     * SIP message.\n     * <p>\n     * Once sent, this SIP delegate should notify the remote application of the success or\n     * failure using {@link DelegateMessageCallback#onMessageSent(String)} or\n     * {@link DelegateMessageCallback#onMessageSendFailure(String, int)}.\n     * @param message The SIP message to be sent over the operatorâ€™s network.\n     * @param configVersion The SipDelegateImsConfiguration version used to construct the\n     *         SipMessage. See {@link SipDelegateConfiguration} for more information. If the\n     *         version specified here does not match the most recently constructed\n     *         {@link SipDelegateConfiguration}, this message should fail validation checks and\n     *         {@link DelegateMessageCallback#onMessageSendFailure} should be called with code\n     *         {@link SipDelegateManager#MESSAGE_FAILURE_REASON_STALE_IMS_CONFIGURATION}.\n     ",
    "links" : [ "android.telephony.ims.DelegateMessageCallback#onMessageSendFailure", "android.telephony.ims.SipDelegateConfiguration", "android.telephony.ims.DelegateMessageCallback#onMessageSent(String)", "android.telephony.ims.DelegateMessageCallback#onMessageSendFailure(String", "android.telephony.ims.SipDelegateManager#MESSAGE_FAILURE_REASON_STALE_IMS_CONFIGURATION" ]
  }, {
    "name" : " void cleanupSession(@NonNull String callId)",
    "returnType" : "void",
    "comment" : "\n     * The remote IMS application has closed a SIP session and the routing resources associated\n     * with the SIP session using the provided Call-ID may now be cleaned up.\n     * <p>\n     * Typically, a SIP session will be considered closed when all associated dialogs receive a\n     * BYE request. After the session has been closed, the IMS application will call\n     * {@link SipDelegateConnection#cleanupSession(String)} to signal to the framework that\n     * resources can be released. In some cases, the framework will request that the ImsService\n     * close the session due to the open SIP session holding up an event such as applying a\n     * provisioning change or handing over to another transport type. See\n     * {@link DelegateRegistrationState}.\n     *\n     * @param callId The call-ID header value associated with the ongoing SIP Session that the\n     *         framework is requesting be cleaned up.\n     ",
    "links" : [ "android.telephony.ims.SipDelegateConnection#cleanupSession(String)", "android.telephony.ims.DelegateRegistrationState" ]
  }, {
    "name" : " void notifyMessageReceived(@NonNull String viaTransactionId)",
    "returnType" : "void",
    "comment" : "\n     * The remote application has received the SIP message and is processing it.\n     * @param viaTransactionId The Transaction ID found in the via header field of the\n     *                         previously sent {@link SipMessage}.\n     ",
    "links" : [ "android.telephony.ims.SipMessage" ]
  }, {
    "name" : " void notifyMessageReceiveError(@NonNull String viaTransactionId, @SipDelegateManager.MessageFailureReason int reason)",
    "returnType" : "void",
    "comment" : "\n     * The remote application has either not received the SIP message or there was an error\n     * processing it.\n     * @param viaTransactionId The Transaction ID found in the via header field of the\n     *                         previously sent {@link SipMessage}.\n     * @param reason The reason why the message was not correctly received.\n     ",
    "links" : [ "android.telephony.ims.SipMessage" ]
  } ],
  "methodNames" : [ " void sendMessage(@NonNull SipMessage message, long configVersion)", " void cleanupSession(@NonNull String callId)", " void notifyMessageReceived(@NonNull String viaTransactionId)", " void notifyMessageReceiveError(@NonNull String viaTransactionId, @SipDelegateManager.MessageFailureReason int reason)" ],
  "variableNames" : [ ]
}