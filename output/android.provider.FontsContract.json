{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/provider/FontsContract.java",
  "packageName" : "android.provider",
  "className" : "FontsContract",
  "comment" : "\n * Utility class to deal with Font ContentProviders.\n * @deprecated Use the <a href=\"{@docRoot}jetpack\">Jetpack Core Library</a>\n *      {@link androidx.core.provider.FontsContractCompat} for consistent behavior across all\n *      devices.\n ",
  "links" : [ "androidx.core.provider.FontsContractCompat" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sThread",
    "type" : "HandlerThread",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sInQueueSet",
    "type" : "Set<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sContext",
    "type" : "Context",
    "comment" : " set once in setApplicationContextForResources",
    "links" : [ ]
  }, {
    "name" : "sTypefaceCache",
    "type" : "LruCache<String, Typeface>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "THREAD_RENEWAL_THRESHOLD_MS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SYNC_FONT_FETCH_TIMEOUT_MS",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sReplaceDispatcherThreadRunnable",
    "type" : "Runnable",
    "comment" : " TODO: Factor out to other class. Consider to switch MessageQueue.IdleHandler.",
    "links" : [ ]
  }, {
    "name" : "sByteArrayComparator",
    "type" : "Comparator<byte[]>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static void setApplicationContextForResources(Context context)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static Typeface getFontSync(FontRequest request)",
    "returnType" : "Typeface",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static void requestFonts(@NonNull Context context, @NonNull FontRequest request, @NonNull Handler handler, @Nullable CancellationSignal cancellationSignal, @NonNull FontRequestCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Create a typeface object given a font request. The font will be asynchronously fetched,\n     * therefore the result is delivered to the given callback. See {@link FontRequest}.\n     * Only one of the methods in callback will be invoked, depending on whether the request\n     * succeeds or fails. These calls will happen on the caller thread.\n     *\n     * Note that the result Typeface may be cached internally and the same instance will be returned\n     * the next time you call this method with the same request. If you want to bypass this cache,\n     * use {@link #fetchFonts} and {@link #buildTypeface} instead.\n     *\n     * @param context A context to be used for fetching from font provider.\n     * @param request A {@link FontRequest} object that identifies the provider and query for the\n     *                request. May not be null.\n     * @param handler A handler to be processed the font fetching.\n     * @param cancellationSignal A signal to cancel the operation in progress, or null if none. If\n     *                           the operation is canceled, then {@link\n     *                           android.os.OperationCanceledException} will be thrown.\n     * @param callback A callback that will be triggered when results are obtained. May not be null.\n     ",
    "links" : [ "#buildTypeface", "#fetchFonts", "android.os.OperationCanceledException", "android.provider.FontRequest" ]
  }, {
    "name" : "public static FontFamilyResult fetchFonts(@NonNull Context context, @Nullable CancellationSignal cancellationSignal, @NonNull FontRequest request) throws NameNotFoundException",
    "returnType" : "FontFamilyResult",
    "comment" : "\n     * Fetch fonts given a font request.\n     *\n     * @param context A {@link Context} to be used for fetching fonts.\n     * @param cancellationSignal A signal to cancel the operation in progress, or null if none. If\n     *                           the operation is canceled, then {@link\n     *                           android.os.OperationCanceledException} will be thrown when the\n     *                           query is executed.\n     * @param request A {@link FontRequest} object that identifies the provider and query for the\n     *                request.\n     *\n     * @return {@link FontFamilyResult}\n     *\n     * @throws NameNotFoundException If requested package or authority was not found in system.\n     ",
    "links" : [ "android.content.Context", "android.os.OperationCanceledException", "FontFamilyResult", "android.provider.FontRequest" ]
  }, {
    "name" : "public static Typeface buildTypeface(@NonNull Context context, @Nullable CancellationSignal cancellationSignal, @NonNull FontInfo[] fonts)",
    "returnType" : "Typeface",
    "comment" : "\n     * Build a Typeface from an array of {@link FontInfo}\n     *\n     * Results that are marked as not ready will be skipped.\n     *\n     * @param context A {@link Context} that will be used to fetch the font contents.\n     * @param cancellationSignal A signal to cancel the operation in progress, or null if none. If\n     *                           the operation is canceled, then {@link\n     *                           android.os.OperationCanceledException} will be thrown.\n     * @param fonts An array of {@link FontInfo} to be used to create a Typeface.\n     * @return A Typeface object. Returns null if typeface creation fails.\n     ",
    "links" : [ "android.content.Context", "android.os.OperationCanceledException", "FontInfo" ]
  }, {
    "name" : "private static Map<Uri, ByteBuffer> prepareFontData(Context context, FontInfo[] fonts, CancellationSignal cancellationSignal)",
    "returnType" : "Map<Uri, ByteBuffer>",
    "comment" : "\n     * A helper function to create a mapping from {@link Uri} to {@link ByteBuffer}.\n     *\n     * Skip if the file contents is not ready to be read.\n     *\n     * @param context A {@link Context} to be used for resolving content URI in\n     *                {@link FontInfo}.\n     * @param fonts An array of {@link FontInfo}.\n     * @return A map from {@link Uri} to {@link ByteBuffer}.\n     ",
    "links" : [ "android.content.Context", "android.net.Uri", "FontInfo", "java.nio.ByteBuffer" ]
  }, {
    "name" : "public static ProviderInfo getProvider(PackageManager packageManager, FontRequest request) throws NameNotFoundException",
    "returnType" : "ProviderInfo",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private static boolean equalsByteArrayList(List<byte[]> signatures, List<byte[]> requestSignatures)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static List<byte[]> convertToByteArrayList(Signature[] signatures)",
    "returnType" : "List<byte[]>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static FontInfo[] getFontFromProvider(Context context, FontRequest request, String authority, CancellationSignal cancellationSignal)",
    "returnType" : "FontInfo[]",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static void setApplicationContextForResources(Context context)", "public static Typeface getFontSync(FontRequest request)", "public static void requestFonts(@NonNull Context context, @NonNull FontRequest request, @NonNull Handler handler, @Nullable CancellationSignal cancellationSignal, @NonNull FontRequestCallback callback)", "public static FontFamilyResult fetchFonts(@NonNull Context context, @Nullable CancellationSignal cancellationSignal, @NonNull FontRequest request) throws NameNotFoundException", "public static Typeface buildTypeface(@NonNull Context context, @Nullable CancellationSignal cancellationSignal, @NonNull FontInfo[] fonts)", "private static Map<Uri, ByteBuffer> prepareFontData(Context context, FontInfo[] fonts, CancellationSignal cancellationSignal)", "public static ProviderInfo getProvider(PackageManager packageManager, FontRequest request) throws NameNotFoundException", "private static boolean equalsByteArrayList(List<byte[]> signatures, List<byte[]> requestSignatures)", "private static List<byte[]> convertToByteArrayList(Signature[] signatures)", "public static FontInfo[] getFontFromProvider(Context context, FontRequest request, String authority, CancellationSignal cancellationSignal)" ],
  "variableNames" : [ "TAG", "sLock", "sHandler", "sThread", "sInQueueSet", "sContext", "sTypefaceCache", "THREAD_RENEWAL_THRESHOLD_MS", "SYNC_FONT_FETCH_TIMEOUT_MS", "sReplaceDispatcherThreadRunnable", "sByteArrayComparator" ]
}