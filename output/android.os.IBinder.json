{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/os/IBinder.java",
  "packageName" : "android.os",
  "className" : "IBinder",
  "comment" : "\n * Base interface for a remotable object, the core part of a lightweight\n * remote procedure call mechanism designed for high performance when\n * performing in-process and cross-process calls.  This\n * interface describes the abstract protocol for interacting with a\n * remotable object.  Do not implement this interface directly, instead\n * extend from {@link Binder}.\n * \n * <p>The key IBinder API is {@link #transact transact()} matched by\n * {@link Binder#onTransact Binder.onTransact()}.  These\n * methods allow you to send a call to an IBinder object and receive a\n * call coming in to a Binder object, respectively.  This transaction API\n * is synchronous, such that a call to {@link #transact transact()} does not\n * return until the target has returned from\n * {@link Binder#onTransact Binder.onTransact()}; this is the\n * expected behavior when calling an object that exists in the local\n * process, and the underlying inter-process communication (IPC) mechanism\n * ensures that these same semantics apply when going across processes.\n * \n * <p>The data sent through transact() is a {@link Parcel}, a generic buffer\n * of data that also maintains some meta-data about its contents.  The meta\n * data is used to manage IBinder object references in the buffer, so that those\n * references can be maintained as the buffer moves across processes.  This\n * mechanism ensures that when an IBinder is written into a Parcel and sent to\n * another process, if that other process sends a reference to that same IBinder\n * back to the original process, then the original process will receive the\n * same IBinder object back.  These semantics allow IBinder/Binder objects to\n * be used as a unique identity (to serve as a token or for other purposes)\n * that can be managed across processes.\n * \n * <p>The system maintains a pool of transaction threads in each process that\n * it runs in.  These threads are used to dispatch all\n * IPCs coming in from other processes.  For example, when an IPC is made from\n * process A to process B, the calling thread in A blocks in transact() as\n * it sends the transaction to process B.  The next available pool thread in\n * B receives the incoming transaction, calls Binder.onTransact() on the target\n * object, and replies with the result Parcel.  Upon receiving its result, the\n * thread in process A returns to allow its execution to continue.  In effect,\n * other processes appear to use as additional threads that you did not create\n * executing in your own process.\n * \n * <p>The Binder system also supports recursion across processes.  For example\n * if process A performs a transaction to process B, and process B while\n * handling that transaction calls transact() on an IBinder that is implemented\n * in A, then the thread in A that is currently waiting for the original\n * transaction to finish will take care of calling Binder.onTransact() on the\n * object being called by B.  This ensures that the recursion semantics when\n * calling remote binder object are the same as when calling local objects.\n * \n * <p>When working with remote objects, you often want to find out when they\n * are no longer valid.  There are three ways this can be determined:\n * <ul>\n * <li> The {@link #transact transact()} method will throw a\n * {@link RemoteException} exception if you try to call it on an IBinder\n * whose process no longer exists.\n * <li> The {@link #pingBinder()} method can be called, and will return false\n * if the remote process no longer exists.\n * <li> The {@link #linkToDeath linkToDeath()} method can be used to register\n * a {@link DeathRecipient} with the IBinder, which will be called when its\n * containing process goes away.\n * </ul>\n * \n * @see Binder\n ",
  "links" : [ "android.os.Binder", "#linkToDeath", "DeathRecipient", "#pingBinder()", "android.os.RemoteException", "#transact", "android.os.Parcel", "android.os.Binder#onTransact" ],
  "variables" : [ {
    "name" : "FIRST_CALL_TRANSACTION",
    "type" : "int",
    "comment" : "\n     * The first transaction code available for user commands.\n     ",
    "links" : [ ]
  }, {
    "name" : "LAST_CALL_TRANSACTION",
    "type" : "int",
    "comment" : "\n     * The last transaction code available for user commands.\n     ",
    "links" : [ ]
  }, {
    "name" : "PING_TRANSACTION",
    "type" : "int",
    "comment" : "\n     * IBinder protocol transaction code: pingBinder().\n     ",
    "links" : [ ]
  }, {
    "name" : "DUMP_TRANSACTION",
    "type" : "int",
    "comment" : "\n     * IBinder protocol transaction code: dump internal state.\n     ",
    "links" : [ ]
  }, {
    "name" : "SHELL_COMMAND_TRANSACTION",
    "type" : "int",
    "comment" : "\n     * IBinder protocol transaction code: execute a shell command.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "INTERFACE_TRANSACTION",
    "type" : "int",
    "comment" : "\n     * IBinder protocol transaction code: interrogate the recipient side\n     * of the transaction for its canonical interface descriptor.\n     ",
    "links" : [ ]
  }, {
    "name" : "TWEET_TRANSACTION",
    "type" : "int",
    "comment" : "\n     * IBinder protocol transaction code: send a tweet to the target\n     * object.  The data in the parcel is intended to be delivered to\n     * a shared messaging service associated with the object; it can be\n     * anything, as long as it is not more than 130 UTF-8 characters to\n     * conservatively fit within common messaging services.  As part of\n     * {@link Build.VERSION_CODES#HONEYCOMB_MR2}, all Binder objects are\n     * expected to support this protocol for fully integrated tweeting\n     * across the platform.  To support older code, the default implementation\n     * logs the tweet to the main log as a simple emulation of broadcasting\n     * it publicly over the Internet.\n     * \n     * <p>Also, upon completing the dispatch, the object must make a cup\n     * of tea, return it to the caller, and exclaim \"jolly good message\n     * old boy!\".\n     ",
    "links" : [ "Build.VERSION_CODES#HONEYCOMB_MR2" ]
  }, {
    "name" : "LIKE_TRANSACTION",
    "type" : "int",
    "comment" : "\n     * IBinder protocol transaction code: tell an app asynchronously that the\n     * caller likes it.  The app is responsible for incrementing and maintaining\n     * its own like counter, and may display this value to the user to indicate the\n     * quality of the app.  This is an optional command that applications do not\n     * need to handle, so the default implementation is to do nothing.\n     * \n     * <p>There is no response returned and nothing about the\n     * system will be functionally affected by it, but it will improve the\n     * app's self-esteem.\n     ",
    "links" : [ ]
  }, {
    "name" : "SYSPROPS_TRANSACTION",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "FLAG_ONEWAY",
    "type" : "int",
    "comment" : "\n     * Flag to {@link #transact}: this is a one-way call, meaning that the\n     * caller returns immediately, without waiting for a result from the\n     * callee. Applies only if the caller and callee are in different\n     * processes.\n     *\n     * <p>The system provides special ordering semantics for multiple oneway calls\n     * being made to the same IBinder object: these calls will be dispatched in the\n     * other process one at a time, with the same order as the original calls.  These\n     * are still dispatched by the IPC thread pool, so may execute on different threads,\n     * but the next one will not be dispatched until the previous one completes.  This\n     * ordering is not guaranteed for calls on different IBinder objects or when mixing\n     * oneway and non-oneway calls on the same IBinder object.</p>\n     ",
    "links" : [ "#transact" ]
  }, {
    "name" : "FLAG_CLEAR_BUF",
    "type" : "int",
    "comment" : "\n     * Flag to {@link #transact}: request binder driver to clear transaction data.\n     *\n     * Be very careful when using this flag in Java, since Java objects read from a Java\n     * Parcel may be non-trivial to clear.\n     * @hide\n     ",
    "links" : [ "#transact" ]
  }, {
    "name" : "FLAG_COLLECT_NOTED_APP_OPS",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "MAX_IPC_SIZE",
    "type" : "int",
    "comment" : "\n     * Limit that should be placed on IPC sizes to keep them safely under the\n     * transaction buffer limit.\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " static int getSuggestedMaxIpcSizeBytes()",
    "returnType" : "int",
    "comment" : "\n     * Limit that should be placed on IPC sizes, in bytes, to keep them safely under the transaction\n     * buffer limit.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getInterfaceDescriptor() throws RemoteException",
    "returnType" : "String",
    "comment" : "\n     * Get the canonical name of the interface supported by this binder.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean pingBinder()",
    "returnType" : "boolean",
    "comment" : "\n     * Check to see if the object still exists.\n     * \n     * @return Returns false if the\n     * hosting process is gone, otherwise the result (always by default\n     * true) returned by the pingBinder() implementation on the other\n     * side.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isBinderAlive()",
    "returnType" : "boolean",
    "comment" : "\n     * Check to see if the process that the binder is in is still alive.\n     *\n     * @return false if the process is not alive.  Note that if it returns\n     * true, the process may have died while the call is returning.\n     ",
    "links" : [ ]
  }, {
    "name" : "public IInterface queryLocalInterface(@NonNull String descriptor)",
    "returnType" : "IInterface",
    "comment" : "\n     * Attempt to retrieve a local implementation of an interface\n     * for this Binder object.  If null is returned, you will need\n     * to instantiate a proxy class to marshall calls through\n     * the transact() method.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void dump(@NonNull FileDescriptor fd, @Nullable String[] args) throws RemoteException",
    "returnType" : "void",
    "comment" : "\n     * Print the object's state into the given stream.\n     * \n     * @param fd The raw file descriptor that the dump is being sent to.\n     * @param args additional arguments to the dump request.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void dumpAsync(@NonNull FileDescriptor fd, @Nullable String[] args) throws RemoteException",
    "returnType" : "void",
    "comment" : "\n     * Like {@link #dump(FileDescriptor, String[])} but always executes\n     * asynchronously.  If the object is local, a new thread is created\n     * to perform the dump.\n     *\n     * @param fd The raw file descriptor that the dump is being sent to.\n     * @param args additional arguments to the dump request.\n     ",
    "links" : [ "#dump(FileDescriptor" ]
  }, {
    "name" : "public void shellCommand(@Nullable FileDescriptor in, @Nullable FileDescriptor out, @Nullable FileDescriptor err, @NonNull String[] args, @Nullable ShellCallback shellCallback, @NonNull ResultReceiver resultReceiver) throws RemoteException",
    "returnType" : "void",
    "comment" : "\n     * Execute a shell command on this object.  This may be performed asynchrously from the caller;\n     * the implementation must always call resultReceiver when finished.\n     *\n     * @param in The raw file descriptor that an input data stream can be read from.\n     * @param out The raw file descriptor that normal command messages should be written to.\n     * @param err The raw file descriptor that command error messages should be written to.\n     * @param args Command-line arguments.\n     * @param shellCallback Optional callback to the caller's shell to perform operations in it.\n     * @param resultReceiver Called when the command has finished executing, with the result code.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public IBinder getExtension() throws RemoteException",
    "returnType" : "IBinder",
    "comment" : "\n     * Get the binder extension of this binder interface.\n     * This allows one to customize an interface without having to modify the original interface.\n     *\n     * @return null if don't have binder extension\n     * @throws RemoteException\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean transact(int code, @NonNull Parcel data, @Nullable Parcel reply, int flags) throws RemoteException",
    "returnType" : "boolean",
    "comment" : "\n     * Perform a generic operation with the object.\n     * \n     * @param code The action to perform.  This should\n     * be a number between {@link #FIRST_CALL_TRANSACTION} and\n     * {@link #LAST_CALL_TRANSACTION}.\n     * @param data Marshalled data to send to the target.  Must not be null.\n     * If you are not sending any data, you must create an empty Parcel\n     * that is given here.\n     * @param reply Marshalled data to be received from the target.  May be\n     * null if you are not interested in the return value.\n     * @param flags Additional operation flags.  Either 0 for a normal\n     * RPC, or {@link #FLAG_ONEWAY} for a one-way RPC.\n     *\n     * @return Returns the result from {@link Binder#onTransact}.  A successful call\n     * generally returns true; false generally means the transaction code was not\n     * understood.  For a oneway call to a different process false should never be\n     * returned.  If a oneway call is made to code in the same process (usually to\n     * a C++ or Rust implementation), then there are no oneway semantics, and\n     * false can still be returned.\n     ",
    "links" : [ "#FLAG_ONEWAY", "#FIRST_CALL_TRANSACTION", "#LAST_CALL_TRANSACTION", "android.os.Binder#onTransact" ]
  }, {
    "name" : "public void linkToDeath(@NonNull DeathRecipient recipient, int flags) throws RemoteException",
    "returnType" : "void",
    "comment" : "\n     * Register the recipient for a notification if this binder\n     * goes away.  If this binder object unexpectedly goes away\n     * (typically because its hosting process has been killed),\n     * then the given {@link DeathRecipient}'s\n     * {@link DeathRecipient#binderDied DeathRecipient.binderDied()} method\n     * will be called.\n     *\n     * <p>This will automatically be unlinked when all references to the linked\n     * binder proxy are dropped.</p>\n     *\n     * <p>You will only receive death notifications for remote binders,\n     * as local binders by definition can't die without you dying as well.</p>\n     *\n     * @throws RemoteException if the target IBinder's\n     * process has already died.\n     *\n     * @see #unlinkToDeath\n     ",
    "links" : [ "DeathRecipient", "#binderDied" ]
  }, {
    "name" : "public boolean unlinkToDeath(@NonNull DeathRecipient recipient, int flags)",
    "returnType" : "boolean",
    "comment" : "\n     * Remove a previously registered death notification.\n     * The recipient will no longer be called if this object\n     * dies.\n     * \n     * @return {@code true} if the <var>recipient</var> is successfully\n     * unlinked, assuring you that its\n     * {@link DeathRecipient#binderDied DeathRecipient.binderDied()} method\n     * will not be called;  {@code false} if the target IBinder has already\n     * died, meaning the method has been (or soon will be) called.\n     * \n     * @throws java.util.NoSuchElementException if the given\n     * <var>recipient</var> has not been registered with the IBinder, and\n     * the IBinder is still alive.  Note that if the <var>recipient</var>\n     * was never registered, but the IBinder has already died, then this\n     * exception will <em>not</em> be thrown, and you will receive a false\n     * return value instead.\n     ",
    "links" : [ "#binderDied" ]
  } ],
  "methodNames" : [ " static int getSuggestedMaxIpcSizeBytes()", "public String getInterfaceDescriptor() throws RemoteException", "public boolean pingBinder()", "public boolean isBinderAlive()", "public IInterface queryLocalInterface(@NonNull String descriptor)", "public void dump(@NonNull FileDescriptor fd, @Nullable String[] args) throws RemoteException", "public void dumpAsync(@NonNull FileDescriptor fd, @Nullable String[] args) throws RemoteException", "public void shellCommand(@Nullable FileDescriptor in, @Nullable FileDescriptor out, @Nullable FileDescriptor err, @NonNull String[] args, @Nullable ShellCallback shellCallback, @NonNull ResultReceiver resultReceiver) throws RemoteException", "public IBinder getExtension() throws RemoteException", "public boolean transact(int code, @NonNull Parcel data, @Nullable Parcel reply, int flags) throws RemoteException", "public void linkToDeath(@NonNull DeathRecipient recipient, int flags) throws RemoteException", "public boolean unlinkToDeath(@NonNull DeathRecipient recipient, int flags)" ],
  "variableNames" : [ "FIRST_CALL_TRANSACTION", "LAST_CALL_TRANSACTION", "PING_TRANSACTION", "DUMP_TRANSACTION", "SHELL_COMMAND_TRANSACTION", "INTERFACE_TRANSACTION", "TWEET_TRANSACTION", "LIKE_TRANSACTION", "SYSPROPS_TRANSACTION", "FLAG_ONEWAY", "FLAG_CLEAR_BUF", "FLAG_COLLECT_NOTED_APP_OPS", "MAX_IPC_SIZE" ]
}