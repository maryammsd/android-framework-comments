{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/print/PrintDocumentInfo.java",
  "packageName" : "android.print",
  "className" : "PrintDocumentInfo",
  "comment" : "\n * This class encapsulates information about a document for printing\n * purposes. This meta-data is used by the platform and print services,\n * components that interact with printers. For example, this class\n * contains the number of pages contained in the document it describes and\n * this number of pages is shown to the user allowing him/her to select\n * the range to print. Also a print service may optimize the printing\n * process based on the content type, such as document or photo.\n * <p>\n * Instances of this class are created by the printing application and\n * passed to the {@link PrintDocumentAdapter.LayoutResultCallback#onLayoutFinished(\n * PrintDocumentInfo, boolean) PrintDocumentAdapter.LayoutResultCallback.onLayoutFinished(\n * PrintDocumentInfo, boolean)} callback after successfully laying out the\n * content which is performed in {@link PrintDocumentAdapter#onLayout(PrintAttributes,\n * PrintAttributes, android.os.CancellationSignal, PrintDocumentAdapter.LayoutResultCallback,\n * android.os.Bundle) PrintDocumentAdapter.onLayout(PrintAttributes,\n * PrintAttributes, android.os.CancellationSignal,\n * PrintDocumentAdapter.LayoutResultCallback, android.os.Bundle)}.\n * </p>\n * <p>\n * An example usage looks like this:\n * <pre>\n *\n * . . .\n *\n * public void onLayout(PrintAttributes oldAttributes, PrintAttributes newAttributes,\n *         CancellationSignal cancellationSignal, LayoutResultCallback callback,\n *         Bundle metadata) {\n *\n *        // Assume the app defined a LayoutResult class which contains\n *        // the layout result data and that the content is a document.\n *        LayoutResult result = doSomeLayoutWork();\n *\n *        PrintDocumentInfo info = new PrintDocumentInfo\n *                .Builder(\"printed_file.pdf\")\n *                .setContentType(PrintDocumentInfo.CONTENT_TYPE_DOCUMENT)\n *                .setPageCount(result.getPageCount())\n *                .build();\n *\n *       callback.onLayoutFinished(info, result.getContentChanged());\n *   }\n *\n *   . . .\n *\n * </pre>\n * </p>\n ",
  "variables" : [ {
    "name" : "PAGE_COUNT_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * Constant for unknown page count.\n     ",
    "links" : [ ]
  }, {
    "name" : "CONTENT_TYPE_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * Content type: unknown.\n     ",
    "links" : [ ]
  }, {
    "name" : "CONTENT_TYPE_DOCUMENT",
    "type" : "int",
    "comment" : "\n     * Content type: document.\n     * <p>\n     * A print service may use normal paper to print the content instead\n     * of dedicated photo paper. Also it may use a lower quality printing\n     * process as the content is not as sensitive to print quality variation\n     * as a photo is.\n     * </p>\n     ",
    "links" : [ ]
  }, {
    "name" : "CONTENT_TYPE_PHOTO",
    "type" : "int",
    "comment" : "\n     * Content type: photo.\n     * <p>\n     * A print service may use dedicated photo paper to print the content\n     * instead of normal paper. Also it may use a higher quality printing\n     * process as the content is more sensitive to print quality variation\n     * than a document.\n     * </p>\n     ",
    "links" : [ ]
  }, {
    "name" : "mName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPageCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContentType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDataSize",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<PrintDocumentInfo>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String getName()",
    "returnType" : "String",
    "comment" : "\n     * Gets the document name. This name may be shown to\n     * the user.\n     *\n     * @return The document name.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getPageCount()",
    "returnType" : "int",
    "comment" : "\n     * Gets the total number of pages.\n     *\n     * @return The number of pages.\n     *\n     * @see #PAGE_COUNT_UNKNOWN\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getContentType()",
    "returnType" : "int",
    "comment" : "\n     * Gets the content type.\n     *\n     * @return The content type.\n     *\n     * @see #CONTENT_TYPE_UNKNOWN\n     * @see #CONTENT_TYPE_DOCUMENT\n     * @see #CONTENT_TYPE_PHOTO\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getDataSize()",
    "returnType" : "long",
    "comment" : "\n     * Gets the document data size in bytes.\n     *\n     * @return The data size.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDataSize(@IntRange(from = 0) long dataSize)",
    "returnType" : "void",
    "comment" : "\n     * Sets the document data size in bytes.\n     *\n     * @param dataSize The data size.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel parcel, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String contentTypeToString(int contentType)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "PAGE_COUNT_UNKNOWN", "CONTENT_TYPE_UNKNOWN", "CONTENT_TYPE_DOCUMENT", "CONTENT_TYPE_PHOTO", "mName", "mPageCount", "mContentType", "mDataSize", "CREATOR" ],
  "methodNames" : [ "public String getName()", "public int getPageCount()", "public int getContentType()", "public long getDataSize()", "public void setDataSize(@IntRange(from = 0) long dataSize)", "public int describeContents()", "public void writeToParcel(Parcel parcel, int flags)", "public int hashCode()", "public boolean equals(Object obj)", "public String toString()", "private String contentTypeToString(int contentType)" ]
}