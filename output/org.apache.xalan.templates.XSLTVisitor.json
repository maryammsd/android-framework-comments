{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xalan/templates/XSLTVisitor.java",
  "packageName" : "org.apache.xalan.templates",
  "className" : "XSLTVisitor",
  "comment" : "\n * A derivation from this class can be passed to a class that implements \n * the XSLTVisitable interface, to have the appropriate method called \n * for each component of an XSLT stylesheet.  Aside from possible other uses,\n * the main intention is to provide a reasonable means to perform expression \n * rewriting.\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public boolean visitInstruction(ElemTemplateElement elem)",
    "returnType" : "boolean",
    "comment" : "\n\t * Visit an XSLT instruction.  Any element that isn't called by one \n\t * of the other visit methods, will be called by this method.\n\t * \n\t * @param elem The xsl instruction element object.\n\t * @return true if the sub expressions should be traversed.\n\t ",
    "links" : [ ]
  }, {
    "name" : "public boolean visitStylesheet(ElemTemplateElement elem)",
    "returnType" : "boolean",
    "comment" : "\n\t * Visit an XSLT stylesheet instruction.\n\t * \n\t * @param elem The xsl instruction element object.\n\t * @return true if the sub expressions should be traversed.\n\t ",
    "links" : [ ]
  }, {
    "name" : "public boolean visitTopLevelInstruction(ElemTemplateElement elem)",
    "returnType" : "boolean",
    "comment" : "\n\t * Visit an XSLT top-level instruction.\n\t * \n\t * @param elem The xsl instruction element object.\n\t * @return true if the sub expressions should be traversed.\n\t ",
    "links" : [ ]
  }, {
    "name" : "public boolean visitTopLevelVariableOrParamDecl(ElemTemplateElement elem)",
    "returnType" : "boolean",
    "comment" : "\n\t * Visit an XSLT top-level instruction.\n\t * \n\t * @param elem The xsl instruction element object.\n\t * @return true if the sub expressions should be traversed.\n\t ",
    "links" : [ ]
  }, {
    "name" : "public boolean visitVariableOrParamDecl(ElemVariable elem)",
    "returnType" : "boolean",
    "comment" : "\n\t * Visit an XSLT variable or parameter declaration.\n\t * \n\t * @param elem The xsl instruction element object.\n\t * @return true if the sub expressions should be traversed.\n\t ",
    "links" : [ ]
  }, {
    "name" : "public boolean visitLiteralResultElement(ElemLiteralResult elem)",
    "returnType" : "boolean",
    "comment" : "\n\t * Visit a LiteralResultElement.\n\t * \n\t * @param elem The literal result object.\n\t * @return true if the sub expressions should be traversed.\n\t ",
    "links" : [ ]
  }, {
    "name" : "public boolean visitAVT(AVT elem)",
    "returnType" : "boolean",
    "comment" : "\n\t * Visit an Attribute Value Template (at the top level).\n\t * \n\t * @param elem The attribute value template object.\n\t * @return true if the sub expressions should be traversed.\n\t ",
    "links" : [ ]
  }, {
    "name" : "public boolean visitExtensionElement(ElemExtensionCall elem)",
    "returnType" : "boolean",
    "comment" : "\n\t * Visit an extension element.\n\t * @param elem The extension object.\n\t * @return true if the sub expressions should be traversed.\n\t ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public boolean visitInstruction(ElemTemplateElement elem)", "public boolean visitStylesheet(ElemTemplateElement elem)", "public boolean visitTopLevelInstruction(ElemTemplateElement elem)", "public boolean visitTopLevelVariableOrParamDecl(ElemTemplateElement elem)", "public boolean visitVariableOrParamDecl(ElemVariable elem)", "public boolean visitLiteralResultElement(ElemLiteralResult elem)", "public boolean visitAVT(AVT elem)", "public boolean visitExtensionElement(ElemExtensionCall elem)" ],
  "variableNames" : [ ]
}