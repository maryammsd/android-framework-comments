{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/security/keystore/WrappedKeyEntry.java",
  "packageName" : "android.security.keystore",
  "className" : "WrappedKeyEntry",
  "comment" : "\n * An {@link Entry} that holds a wrapped key. Wrapped keys contain encrypted key data and\n * description information that can be used to securely import key material into a hardware-backed\n * Keystore.\n *\n * <p>\n *   The wrapped key is in DER-encoded ASN.1 format, specified by the following schema:\n * </p>\n *\n * <pre>\n *     KeyDescription ::= SEQUENCE(\n *         keyFormat INTEGER,                   # Values from KeyFormat enum.\n *         keyParams AuthorizationList,\n *     )\n *\n *     SecureKeyWrapper ::= SEQUENCE(\n *         version INTEGER,                     # Contains value 0\n *         encryptedTransportKey OCTET_STRING,\n *         initializationVector OCTET_STRING,\n *         keyDescription KeyDescription,\n *         encryptedKey OCTET_STRING,\n *         tag OCTET_STRING\n *     )\n * </pre>\n * <ul>\n *     <li>keyFormat is an integer from the KeyFormat enum, defining the format of the plaintext\n *       key material.\n *     </li>\n *     <li>keyParams is the characteristics of the key to be imported (as with generateKey or\n *       importKey).  If the secure import is successful, these characteristics must be\n *       associated with the key exactly as if the key material had been insecurely imported\n *       with importKey. See <a href=\"https://developer.android.com/training/articles/security-key-attestation.html#certificate_schema\">Key Attestation</a> for the AuthorizationList format.\n *     </li>\n *     <li>encryptedTransportKey is a 256-bit AES key, XORed with a masking key and then encrypted\n *       in RSA-OAEP mode (SHA-256 digest, SHA-1 MGF1 digest) with the wrapping key specified by\n *       wrappingKeyBlob.\n *     </li>\n *     <li>keyDescription is a KeyDescription, above.\n *     </li>\n *     <li>encryptedKey is the key material of the key to be imported, in format keyFormat, and\n *       encrypted with encryptedEphemeralKey in AES-GCM mode, with the DER-encoded\n *       representation of keyDescription provided as additional authenticated data.\n *     </li>\n *     <li>tag is the tag produced by the AES-GCM encryption of encryptedKey.\n *     </li>\n *</ul>\n *\n * <p>\n *     Imported wrapped keys will have KeymasterDefs.KM_ORIGIN_SECURELY_IMPORTED\n * </p>\n ",
  "links" : [ "java.security.KeyStore.Entry" ],
  "variables" : [ {
    "name" : "mWrappedKeyBytes",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWrappingKeyAlias",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTransformation",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAlgorithmParameterSpec",
    "type" : "AlgorithmParameterSpec",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public byte[] getWrappedKeyBytes()",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getWrappingKeyAlias()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getTransformation()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public AlgorithmParameterSpec getAlgorithmParameterSpec()",
    "returnType" : "AlgorithmParameterSpec",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public byte[] getWrappedKeyBytes()", "public String getWrappingKeyAlias()", "public String getTransformation()", "public AlgorithmParameterSpec getAlgorithmParameterSpec()" ],
  "variableNames" : [ "mWrappedKeyBytes", "mWrappingKeyAlias", "mTransformation", "mAlgorithmParameterSpec" ]
}