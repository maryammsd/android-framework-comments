{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/coll/CollationRuleParser.java",
  "packageName" : "android.icu.impl.coll",
  "className" : "CollationRuleParser",
  "comment" : "\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "POSITION_VALUES",
    "type" : "Position[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "POS_LEAD",
    "type" : "char",
    "comment" : "\n     * First character of contractions that encode special reset positions.\n     * U+FFFE cannot be tailored via rule syntax.\n     *\n     * The second contraction character is POS_BASE + Position.\n     ",
    "links" : [ ]
  }, {
    "name" : "POS_BASE",
    "type" : "char",
    "comment" : "\n     * Base for the second character of contractions that encode special reset positions.\n     * Braille characters U+28xx are printable and normalization-inert.\n     * @see POS_LEAD\n     ",
    "links" : [ ]
  }, {
    "name" : "UCOL_DEFAULT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UCOL_OFF",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UCOL_ON",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STRENGTH_MASK",
    "type" : "int",
    "comment" : " UCOL_PRIMARY=0 .. UCOL_IDENTICAL=15 ",
    "links" : [ ]
  }, {
    "name" : "STARRED_FLAG",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "OFFSET_SHIFT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BEFORE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "rawBuilder",
    "type" : "StringBuilder",
    "comment" : " In Java, we reuse this StringBuilder.",
    "links" : [ ]
  }, {
    "name" : "positions",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "gSpecialReorderCodes",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "U_PARSE_CONTEXT_LEN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "nfd",
    "type" : "Normalizer2",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "nfc",
    "type" : "Normalizer2",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "rules",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "baseData",
    "type" : "CollationData",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "settings",
    "type" : "CollationSettings",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sink",
    "type" : "Sink",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "importer",
    "type" : "Importer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ruleIndex",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " void setSink(Sink sinkAlias)",
    "returnType" : "void",
    "comment" : "\n     * Sets the pointer to a Sink object.\n     * The pointer is aliased: Pointer copy without cloning or taking ownership.\n     ",
    "links" : [ ]
  }, {
    "name" : " void setImporter(Importer importerAlias)",
    "returnType" : "void",
    "comment" : "\n     * Sets the pointer to an Importer object.\n     * The pointer is aliased: Pointer copy without cloning or taking ownership.\n     ",
    "links" : [ ]
  }, {
    "name" : " void parse(String ruleString, CollationSettings outSettings) throws ParseException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void parse(String ruleString) throws ParseException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void parseRuleChain() throws ParseException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int parseResetAndPosition() throws ParseException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int parseRelationOperator()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void parseRelationStrings(int strength, int i) throws ParseException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void parseStarredCharacters(int strength, int i) throws ParseException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int parseTailoringString(int i, StringBuilder raw) throws ParseException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int parseString(int i, StringBuilder raw) throws ParseException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static final boolean isSurrogate(int c)",
    "returnType" : "boolean",
    "comment" : " TODO: Widen UTF16.isSurrogate(char16) to take an int.",
    "links" : [ ]
  }, {
    "name" : "private int parseSpecialPosition(int i, StringBuilder str) throws ParseException",
    "returnType" : "int",
    "comment" : "\n     * Sets str to a contraction of U+FFFE and (U+2800 + Position).\n     * @return rule index after the special reset position\n     * @throws ParseException \n     ",
    "links" : [ ]
  }, {
    "name" : "private void parseSetting() throws ParseException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void parseReordering(CharSequence raw) throws ParseException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static int getReorderCode(String word)",
    "returnType" : "int",
    "comment" : "\n     * Gets a script or reorder code from its string representation.\n     * @return the script/reorder code, or\n     * -1 if not recognized\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int getOnOffValue(String s)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int parseUnicodeSet(int i, UnicodeSet set) throws ParseException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int readWords(int i, StringBuilder raw)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int skipComment(int i)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setParseError(String reason) throws ParseException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setParseError(String reason, Exception e) throws ParseException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private ParseException makeParseException(String reason)",
    "returnType" : "ParseException",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String appendErrorContext(String reason)",
    "returnType" : "String",
    "comment" : " C++ setErrorContext()",
    "links" : [ ]
  }, {
    "name" : "private static boolean isSyntaxChar(int c)",
    "returnType" : "boolean",
    "comment" : "\n     * ASCII [:P:] and [:S:]:\n     * [\\u0021-\\u002F \\u003A-\\u0040 \\u005B-\\u0060 \\u007B-\\u007E]\n     ",
    "links" : [ ]
  }, {
    "name" : "private int skipWhiteSpace(int i)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ " void setSink(Sink sinkAlias)", " void setImporter(Importer importerAlias)", " void parse(String ruleString, CollationSettings outSettings) throws ParseException", "private void parse(String ruleString) throws ParseException", "private void parseRuleChain() throws ParseException", "private int parseResetAndPosition() throws ParseException", "private int parseRelationOperator()", "private void parseRelationStrings(int strength, int i) throws ParseException", "private void parseStarredCharacters(int strength, int i) throws ParseException", "private int parseTailoringString(int i, StringBuilder raw) throws ParseException", "private int parseString(int i, StringBuilder raw) throws ParseException", "private static final boolean isSurrogate(int c)", "private int parseSpecialPosition(int i, StringBuilder str) throws ParseException", "private void parseSetting() throws ParseException", "private void parseReordering(CharSequence raw) throws ParseException", "public static int getReorderCode(String word)", "private static int getOnOffValue(String s)", "private int parseUnicodeSet(int i, UnicodeSet set) throws ParseException", "private int readWords(int i, StringBuilder raw)", "private int skipComment(int i)", "private void setParseError(String reason) throws ParseException", "private void setParseError(String reason, Exception e) throws ParseException", "private ParseException makeParseException(String reason)", "private String appendErrorContext(String reason)", "private static boolean isSyntaxChar(int c)", "private int skipWhiteSpace(int i)" ],
  "variableNames" : [ "POSITION_VALUES", "POS_LEAD", "POS_BASE", "UCOL_DEFAULT", "UCOL_OFF", "UCOL_ON", "STRENGTH_MASK", "STARRED_FLAG", "OFFSET_SHIFT", "BEFORE", "rawBuilder", "positions", "gSpecialReorderCodes", "U_PARSE_CONTEXT_LEN", "nfd", "nfc", "rules", "baseData", "settings", "sink", "importer", "ruleIndex" ]
}