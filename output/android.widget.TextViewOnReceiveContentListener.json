{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/widget/TextViewOnReceiveContentListener.java",
  "packageName" : "android.widget",
  "className" : "TextViewOnReceiveContentListener",
  "comment" : "\n * Default implementation for {@link View#onReceiveContent} for editable {@link TextView}\n * components. This class handles insertion of text (plain text, styled text, HTML, etc) but not\n * images or other content.\n *\n * @hide\n ",
  "links" : [ "android.widget.TextView", "android.view.View#onReceiveContent" ],
  "variables" : [ {
    "name" : "LOG_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInputConnectionInfo",
    "type" : "InputConnectionInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "AUTOFILL_NON_TEXT_REQUIRES_ON_RECEIVE_CONTENT_LISTENER",
    "type" : "long",
    "comment" : "\n     * On Android S and above, the platform can provide non-text suggestions (e.g. images) via the\n     * augmented autofill framework (see\n     * <a href=\"/guide/topics/text/autofill-services\">autofill services</a>). In order for an app to\n     * be able to handle these suggestions, it must normally implement the\n     * {@link android.view.OnReceiveContentListener} API. To make the adoption of this smoother for\n     * apps that have previously implemented the\n     * {@link android.view.inputmethod.InputConnection#commitContent(InputContentInfo, int, Bundle)}\n     * API, we reuse that API as a fallback if {@link android.view.OnReceiveContentListener} is not\n     * yet implemented by the app. This fallback is only enabled on Android S. This change ID\n     * disables the fallback, such that apps targeting Android T and above must implement the\n     * {@link android.view.OnReceiveContentListener} API in order to accept non-text suggestions.\n     ",
    "links" : [ "android.view.OnReceiveContentListener", "android.view.inputmethod.InputConnection#commitContent(InputContentInfo" ]
  } ],
  "methods" : [ {
    "name" : "public ContentInfo onReceiveContent(@NonNull View view, @NonNull ContentInfo payload)",
    "returnType" : "ContentInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void replaceSelection(@NonNull Editable editable, @NonNull CharSequence replacement)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onReceiveForAutofill(@NonNull TextView view, @NonNull ContentInfo payload)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static CharSequence coerceToText(@NonNull ClipData clip, @NonNull Context context, @Flags int flags)",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isUsageOfImeCommitContentEnabled(@NonNull View view)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if we can use the IME {@link InputConnection#commitContent} API in order handle\n     * non-text content.\n     ",
    "links" : [ "android.view.inputmethod.InputConnection#commitContent" ]
  }, {
    "name" : " void setInputConnectionInfo(@NonNull TextView view, @NonNull InputConnection ic, @NonNull EditorInfo editorInfo)",
    "returnType" : "void",
    "comment" : "\n     * Invoked by the platform when an {@link InputConnection} is successfully created for the view\n     * that owns this callback instance.\n     ",
    "links" : [ "android.view.inputmethod.InputConnection" ]
  }, {
    "name" : " void clearInputConnectionInfo()",
    "returnType" : "void",
    "comment" : "\n     * Invoked by the platform when an {@link InputConnection} is closed for the view that owns this\n     * callback instance.\n     ",
    "links" : [ "android.view.inputmethod.InputConnection" ]
  }, {
    "name" : "public String[] getFallbackMimeTypesForAutofill(@NonNull TextView view)",
    "returnType" : "String[]",
    "comment" : "\n     * Returns the MIME types accepted by {@link View#performReceiveContent} for the given view,\n     * <strong>for autofill purposes</strong>. This will be non-null only if fallback to the\n     * keyboard image API {@link #isUsageOfImeCommitContentEnabled is enabled} and the view has an\n     * {@link InputConnection} with {@link EditorInfo#contentMimeTypes} populated.\n     *\n     * @hide\n     ",
    "links" : [ "android.view.View#performReceiveContent", "#isUsageOfImeCommitContentEnabled", "android.view.inputmethod.InputConnection", "android.view.inputmethod.EditorInfo#contentMimeTypes" ]
  }, {
    "name" : "private ClipData handleNonTextViaImeCommitContent(@NonNull ClipData clip)",
    "returnType" : "ClipData",
    "comment" : "\n     * Tries to insert the content in the clip into the app via the image keyboard API. If all the\n     * items in the clip are successfully inserted, returns null. If one or more of the items in the\n     * clip cannot be inserted, returns a non-null clip that contains the items that were not\n     * inserted.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean isClipMimeTypeSupported(@NonNull String[] supportedMimeTypes, @NonNull ClipDescription description)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean containsUri(@NonNull ClipData clip)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean containsOnlyText(@NonNull ClipData clip)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public ContentInfo onReceiveContent(@NonNull View view, @NonNull ContentInfo payload)", "private static void replaceSelection(@NonNull Editable editable, @NonNull CharSequence replacement)", "private void onReceiveForAutofill(@NonNull TextView view, @NonNull ContentInfo payload)", "private static CharSequence coerceToText(@NonNull ClipData clip, @NonNull Context context, @Flags int flags)", "private static boolean isUsageOfImeCommitContentEnabled(@NonNull View view)", " void setInputConnectionInfo(@NonNull TextView view, @NonNull InputConnection ic, @NonNull EditorInfo editorInfo)", " void clearInputConnectionInfo()", "public String[] getFallbackMimeTypesForAutofill(@NonNull TextView view)", "private ClipData handleNonTextViaImeCommitContent(@NonNull ClipData clip)", "private static boolean isClipMimeTypeSupported(@NonNull String[] supportedMimeTypes, @NonNull ClipDescription description)", "private static boolean containsUri(@NonNull ClipData clip)", "private static boolean containsOnlyText(@NonNull ClipData clip)" ],
  "variableNames" : [ "LOG_TAG", "mInputConnectionInfo", "AUTOFILL_NON_TEXT_REQUIRES_ON_RECEIVE_CONTENT_LISTENER" ]
}