{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xpath/axes/MatchPatternIterator.java",
  "packageName" : "org.apache.xpath.axes",
  "className" : "MatchPatternIterator",
  "comment" : "\n * This class treats a \n * <a href=\"http://www.w3.org/TR/xpath#location-paths\">LocationPath</a> as a \n * filtered iteration over the tree, evaluating each node in a super axis \n * traversal against the LocationPath interpreted as a match pattern.  This \n * class is useful to find nodes in document order that are complex paths \n * whose steps probably criss-cross each other.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_pattern",
    "type" : "StepPattern",
    "comment" : " This is the select pattern, translated into a match pattern. ",
    "links" : [ ]
  }, {
    "name" : "m_superAxis",
    "type" : "int",
    "comment" : " The traversal axis from where the nodes will be filtered. ",
    "links" : [ ]
  }, {
    "name" : "m_traverser",
    "type" : "DTMAxisTraverser",
    "comment" : " The DTM inner traversal class, that corresponds to the super axis. ",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : " DEBUG flag for diagnostic dumps. ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setRoot(int context, Object environment)",
    "returnType" : "void",
    "comment" : "\n   * Initialize the context values for this expression\n   * after it is cloned.\n   *\n   * @param context The XPath runtime context for this\n   * transformation.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void detach()",
    "returnType" : "void",
    "comment" : "\n   *  Detaches the iterator from the set which it iterated over, releasing\n   * any computational resources and placing the iterator in the INVALID\n   * state. After<code>detach</code> has been invoked, calls to\n   * <code>nextNode</code> or<code>previousNode</code> will raise the\n   * exception INVALID_STATE_ERR.\n   ",
    "links" : [ ]
  }, {
    "name" : "protected int getNextNode()",
    "returnType" : "int",
    "comment" : "\n   * Get the next node via getNextXXX.  Bottlenecked for derived class override.\n   * @return The next node on the axis, or DTM.NULL.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int nextNode()",
    "returnType" : "int",
    "comment" : "\n   *  Returns the next node in the set and advances the position of the\n   * iterator in the set. After a NodeIterator is created, the first call\n   * to nextNode() returns the first node in the set.\n   * @return  The next <code>Node</code> in the set being iterated over, or\n   *   <code>null</code> if there are no more members in that set.\n   ",
    "links" : [ ]
  }, {
    "name" : "public short acceptNode(int n, XPathContext xctxt)",
    "returnType" : "short",
    "comment" : "\n   *  Test whether a specified node is visible in the logical view of a\n   * TreeWalker or NodeIterator. This function will be called by the\n   * implementation of TreeWalker and NodeIterator; it is not intended to\n   * be called directly from user code.\n   * @param n  The node to check to see if it passes the filter or not.\n   * @return  a constant to determine whether the node is accepted,\n   *   rejected, or skipped, as defined  above .\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setRoot(int context, Object environment)", "public void detach()", "protected int getNextNode()", "public int nextNode()", "public short acceptNode(int n, XPathContext xctxt)" ],
  "variableNames" : [ "serialVersionUID", "m_pattern", "m_superAxis", "m_traverser", "DEBUG" ]
}