{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/stream/WhileOps.java",
  "packageName" : "java.util.stream",
  "className" : "DropWhileTask",
  "comment" : "\n     * {@code ForkJoinTask} implementing dropWhile computation.\n     * <p>\n     * If the pipeline has encounter order then each leaf task will not\n     * drop elements but will obtain a count of the elements that would have\n     * been otherwise dropped. That count is used as an index to track\n     * elements to be dropped. Merging will update the index so it corresponds\n     * to the index that is the end of the global prefix of elements to be\n     * dropped. The root is truncated according to that index.\n     * <p>\n     * If the pipeline has no encounter order then each leaf task will drop\n     * elements. Leaf tasks are ordinarily merged. No truncation of the root\n     * node is required.\n     * No attempt is made, once a leaf task stopped dropping, for it to cancel\n     * all other tasks, and further more, short-circuit the computation with\n     * its result.\n     *\n     * @param <P_IN> Input element type to the stream pipeline\n     * @param <P_OUT> Output element type from the stream pipeline\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "op",
    "type" : "AbstractPipeline<P_OUT, P_OUT, ?>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "generator",
    "type" : "IntFunction<P_OUT[]>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "isOrdered",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "thisNodeSize",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "index",
    "type" : "long",
    "comment" : " Equivalent to the count of dropped elements",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected DropWhileTask<P_IN, P_OUT> makeChild(Spliterator<P_IN> spliterator)",
    "returnType" : "DropWhileTask<P_IN, P_OUT>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected final Node<P_OUT> doLeaf()",
    "returnType" : "Node<P_OUT>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final void onCompletion(CountedCompleter<?> caller)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Node<P_OUT> merge()",
    "returnType" : "Node<P_OUT>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Node<P_OUT> doTruncate(Node<P_OUT> input)",
    "returnType" : "Node<P_OUT>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "protected DropWhileTask<P_IN, P_OUT> makeChild(Spliterator<P_IN> spliterator)", "protected final Node<P_OUT> doLeaf()", "public final void onCompletion(CountedCompleter<?> caller)", "private Node<P_OUT> merge()", "private Node<P_OUT> doTruncate(Node<P_OUT> input)" ],
  "variableNames" : [ "op", "generator", "isOrdered", "thisNodeSize", "index" ]
}