{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/nfc/cardemulation/ApduServiceInfo.java",
  "packageName" : "android.nfc.cardemulation",
  "className" : "ApduServiceInfo",
  "comment" : "\n * @hide\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "ResolveInfo",
    "comment" : "\n     * The service that implements this\n     ",
    "links" : [ ]
  }, {
    "name" : "mDescription",
    "type" : "String",
    "comment" : "\n     * Description of the service\n     ",
    "links" : [ ]
  }, {
    "name" : "mOnHost",
    "type" : "boolean",
    "comment" : "\n     * Whether this service represents AIDs running on the host CPU\n     ",
    "links" : [ ]
  }, {
    "name" : "mOffHostName",
    "type" : "String",
    "comment" : "\n     * Offhost reader name.\n     * eg: SIM, eSE etc\n     ",
    "links" : [ ]
  }, {
    "name" : "mStaticOffHostName",
    "type" : "String",
    "comment" : "\n     * Offhost reader name from manifest file.\n     * Used for unsetOffHostSecureElement()\n     ",
    "links" : [ ]
  }, {
    "name" : "mStaticAidGroups",
    "type" : "HashMap<String, AidGroup>",
    "comment" : "\n     * Mapping from category to static AID group\n     ",
    "links" : [ ]
  }, {
    "name" : "mDynamicAidGroups",
    "type" : "HashMap<String, AidGroup>",
    "comment" : "\n     * Mapping from category to dynamic AID group\n     ",
    "links" : [ ]
  }, {
    "name" : "mRequiresDeviceUnlock",
    "type" : "boolean",
    "comment" : "\n     * Whether this service should only be started when the device is unlocked.\n     ",
    "links" : [ ]
  }, {
    "name" : "mBannerResourceId",
    "type" : "int",
    "comment" : "\n     * The id of the service banner specified in XML.\n     ",
    "links" : [ ]
  }, {
    "name" : "mUid",
    "type" : "int",
    "comment" : "\n     * The uid of the package the service belongs to\n     ",
    "links" : [ ]
  }, {
    "name" : "mSettingsActivityName",
    "type" : "String",
    "comment" : "\n     * Settings Activity for this service\n     ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<ApduServiceInfo>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public ComponentName getComponent()",
    "returnType" : "ComponentName",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getOffHostSecureElement()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<String> getAids()",
    "returnType" : "List<String>",
    "comment" : "\n     * Returns a consolidated list of AIDs from the AID groups\n     * registered by this service. Note that if a service has both\n     * a static (manifest-based) AID group for a category and a dynamic\n     * AID group, only the dynamically registered AIDs will be returned\n     * for that category.\n     * @return List of AIDs registered by the service\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<String> getPrefixAids()",
    "returnType" : "List<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<String> getSubsetAids()",
    "returnType" : "List<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public AidGroup getDynamicAidGroupForCategory(String category)",
    "returnType" : "AidGroup",
    "comment" : "\n     * Returns the registered AID group for this category.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean removeDynamicAidGroupForCategory(String category)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ArrayList<AidGroup> getAidGroups()",
    "returnType" : "ArrayList<AidGroup>",
    "comment" : "\n     * Returns a consolidated list of AID groups\n     * registered by this service. Note that if a service has both\n     * a static (manifest-based) AID group for a category and a dynamic\n     * AID group, only the dynamically registered AID group will be returned\n     * for that category.\n     * @return List of AIDs registered by the service\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getCategoryForAid(String aid)",
    "returnType" : "String",
    "comment" : "\n     * Returns the category to which this service has attributed the AID that is passed in,\n     * or null if we don't know this AID.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasCategory(String category)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isOnHost()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean requiresUnlock()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getDescription()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getUid()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setOrReplaceDynamicAidGroup(AidGroup aidGroup)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setOffHostSecureElement(String offHost)",
    "returnType" : "void",
    "comment" : "\n     * Sets the off host Secure Element.\n     * @param  offHost  Secure Element to set. Only accept strings with prefix SIM or prefix eSE.\n     *                  Ref: GSMA TS.26 - NFC Handset Requirements\n     *                  TS26_NFC_REQ_069: For UICC, Secure Element Name SHALL be SIM[smartcard slot]\n     *                                    (e.g. SIM/SIM1, SIM2â€¦ SIMn).\n     *                  TS26_NFC_REQ_070: For embedded SE, Secure Element Name SHALL be eSE[number]\n     *                                    (e.g. eSE/eSE1, eSE2, etc.).\n     ",
    "links" : [ ]
  }, {
    "name" : "public void unsetOffHostSecureElement()",
    "returnType" : "void",
    "comment" : "\n     * Resets the off host Secure Element to statically defined\n     * by the service in the manifest file.\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence loadLabel(PackageManager pm)",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CharSequence loadAppLabel(PackageManager pm)",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Drawable loadIcon(PackageManager pm)",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Drawable loadBanner(PackageManager pm)",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getSettingsActivityName()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dump(FileDescriptor fd, PrintWriter pw, String[] args)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dumpDebug(ProtoOutputStream proto)",
    "returnType" : "void",
    "comment" : "\n     * Dump debugging info as ApduServiceInfoProto\n     *\n     * If the output belongs to a sub message, the caller is responsible for wrapping this function\n     * between {@link ProtoOutputStream#start(long)} and {@link ProtoOutputStream#end(long)}.\n     * See proto definition in frameworks/base/core/proto/android/nfc/apdu_service_info.proto\n     *\n     * @param proto the ProtoOutputStream to write to\n     ",
    "links" : [ "ProtoOutputStream#start", "ProtoOutputStream#end" ]
  } ],
  "variableNames" : [ "TAG", "mService", "mDescription", "mOnHost", "mOffHostName", "mStaticOffHostName", "mStaticAidGroups", "mDynamicAidGroups", "mRequiresDeviceUnlock", "mBannerResourceId", "mUid", "mSettingsActivityName", "CREATOR" ],
  "methodNames" : [ "public ComponentName getComponent()", "public String getOffHostSecureElement()", "public List<String> getAids()", "public List<String> getPrefixAids()", "public List<String> getSubsetAids()", "public AidGroup getDynamicAidGroupForCategory(String category)", "public boolean removeDynamicAidGroupForCategory(String category)", "public ArrayList<AidGroup> getAidGroups()", "public String getCategoryForAid(String aid)", "public boolean hasCategory(String category)", "public boolean isOnHost()", "public boolean requiresUnlock()", "public String getDescription()", "public int getUid()", "public void setOrReplaceDynamicAidGroup(AidGroup aidGroup)", "public void setOffHostSecureElement(String offHost)", "public void unsetOffHostSecureElement()", "public CharSequence loadLabel(PackageManager pm)", "public CharSequence loadAppLabel(PackageManager pm)", "public Drawable loadIcon(PackageManager pm)", "public Drawable loadBanner(PackageManager pm)", "public String getSettingsActivityName()", "public String toString()", "public boolean equals(Object o)", "public int hashCode()", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)", "public void dump(FileDescriptor fd, PrintWriter pw, String[] args)", "public void dumpDebug(ProtoOutputStream proto)" ]
}