{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/duration/Period.java",
  "packageName" : "android.icu.impl.duration",
  "className" : "Period",
  "comment" : "\n * Represents an approximate duration in multiple TimeUnits.  Each unit,\n * if set, has a count (which can be fractional and must be non-negative).\n * In addition Period can either represent the duration as being into the past\n * or future, and as being more or less than the defined value.\n * <p>\n * Use a PeriodFormatter to convert a Period to a String.\n * <p>\n * Periods are immutable.  Mutating operations return the new\n * result leaving the original unchanged.\n * <p>\n * Example:<pre>\n * Period p1 = Period.at(3, WEEK).and(2, DAY).inFuture();\n * Period p2 = p1.and(12, HOUR);</pre>\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "timeLimit",
    "type" : "byte",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "inFuture",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "counts",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static Period at(float count, TimeUnit unit)",
    "returnType" : "Period",
    "comment" : "\n   * Constructs a Period representing a duration of\n   * count units extending into the past.\n   * @param count the number of units, must be non-negative\n   * @param unit the unit\n   * @return the new Period\n   ",
    "links" : [ ]
  }, {
    "name" : "public static Period moreThan(float count, TimeUnit unit)",
    "returnType" : "Period",
    "comment" : "\n   * Constructs a Period representing a duration more than\n   * count units extending into the past.\n   * @param count the number of units. must be non-negative\n   * @param unit the unit\n   * @return the new Period\n   ",
    "links" : [ ]
  }, {
    "name" : "public static Period lessThan(float count, TimeUnit unit)",
    "returnType" : "Period",
    "comment" : "\n   * Constructs a Period representing a duration\n   * less than count units extending into the past.\n   * @param count the number of units. must be non-negative\n   * @param unit the unit\n   * @return the new Period\n   ",
    "links" : [ ]
  }, {
    "name" : "public Period and(float count, TimeUnit unit)",
    "returnType" : "Period",
    "comment" : "\n   * Set the given unit to have the given count.  Marks the\n   * unit as having been set.  This can be used to set\n   * multiple units, or to reset a unit to have a new count.\n   * This does <b>not</b> add the count to an existing count\n   * for this unit.\n   *\n   * @param count the number of units.  must be non-negative\n   * @param unit the unit\n   * @return the new Period\n   ",
    "links" : [ ]
  }, {
    "name" : "public Period omit(TimeUnit unit)",
    "returnType" : "Period",
    "comment" : "\n   * Mark the given unit as not being set.\n   *\n   * @param unit the unit to unset\n   * @return the new Period\n   ",
    "links" : [ ]
  }, {
    "name" : "public Period at()",
    "returnType" : "Period",
    "comment" : "\n   * Mark the duration as being at the defined duration.\n   *\n   * @return the new Period\n   ",
    "links" : [ ]
  }, {
    "name" : "public Period moreThan()",
    "returnType" : "Period",
    "comment" : "\n   * Mark the duration as being more than the defined duration.\n   *\n   * @return the new Period\n   ",
    "links" : [ ]
  }, {
    "name" : "public Period lessThan()",
    "returnType" : "Period",
    "comment" : "\n   * Mark the duration as being less than the defined duration.\n   *\n   * @return the new Period\n   ",
    "links" : [ ]
  }, {
    "name" : "public Period inFuture()",
    "returnType" : "Period",
    "comment" : "\n   * Mark the time as being in the future.\n   *\n   * @return the new Period\n   ",
    "links" : [ ]
  }, {
    "name" : "public Period inPast()",
    "returnType" : "Period",
    "comment" : "\n   * Mark the duration as extending into the past.\n   *\n   * @return the new Period\n   ",
    "links" : [ ]
  }, {
    "name" : "public Period inFuture(boolean future)",
    "returnType" : "Period",
    "comment" : "\n   * Mark the duration as extending into the future if\n   * future is true, and into the past otherwise.\n   *\n   * @param future true if the time is in the future\n   * @return the new Period\n   ",
    "links" : [ ]
  }, {
    "name" : "public Period inPast(boolean past)",
    "returnType" : "Period",
    "comment" : "\n   * Mark the duration as extending into the past if\n   * past is true, and into the future otherwise.\n   *\n   * @param past true if the time is in the past\n   * @return the new Period\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSet()",
    "returnType" : "boolean",
    "comment" : "\n   * Returns true if any unit is set.\n   * @return true if any unit is set\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSet(TimeUnit unit)",
    "returnType" : "boolean",
    "comment" : "\n   * Returns true if the given unit is set.\n   * @param unit the unit to test\n   * @return true if the given unit is set.\n   ",
    "links" : [ ]
  }, {
    "name" : "public float getCount(TimeUnit unit)",
    "returnType" : "float",
    "comment" : "\n   * Returns the count for the specified unit.  If the\n   * unit is not set, returns 0.\n   * @param unit the unit to test\n   * @return the count\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean isInFuture()",
    "returnType" : "boolean",
    "comment" : "\n   * Returns true if this represents a\n   * duration into the future.\n   * @return true if this represents a\n   * duration into the future.\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean isInPast()",
    "returnType" : "boolean",
    "comment" : "\n   * Returns true if this represents a\n   * duration into the past\n   * @return true if this represents a\n   * duration into the past\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean isMoreThan()",
    "returnType" : "boolean",
    "comment" : "\n   * Returns true if this represents a duration in\n   * excess of the defined duration.\n   * @return true if this represents a duration in\n   * excess of the defined duration.\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean isLessThan()",
    "returnType" : "boolean",
    "comment" : "\n   * Returns true if this represents a duration\n   * less than the defined duration.\n   * @return true if this represents a duration\n   * less than the defined duration.\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object rhs)",
    "returnType" : "boolean",
    "comment" : "\n   * Returns true if rhs extends Period and\n   * the two Periods are equal.\n   * @param rhs the object to compare to\n   * @return true if rhs is a Period and is equal to this\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Period rhs)",
    "returnType" : "boolean",
    "comment" : "\n   * Returns true if the same units are defined with\n   * the same counts, both extend into the future or both into the\n   * past, and if the limits (at, more than, less than) are the same.\n   * Note that this means that a period of 1000ms and a period of 1sec\n   * will not compare equal.\n   *\n   * @param rhs the period to compare to\n   * @return true if the two periods are equal\n   ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n   * Returns the hashCode.\n   * @return the hashCode\n   ",
    "links" : [ ]
  }, {
    "name" : "private Period setTimeUnitValue(TimeUnit unit, float value)",
    "returnType" : "Period",
    "comment" : "\n   * Set the unit's internal value, converting from float to int.\n   ",
    "links" : [ ]
  }, {
    "name" : "private Period setTimeUnitInternalValue(TimeUnit unit, int value)",
    "returnType" : "Period",
    "comment" : "\n   * Sets the period to have the provided value, 1/1000 of the\n   * unit plus 1.  Thus unset values are '0', 1' is the set value '0',\n   * 2 is the set value '1/1000', 3 is the set value '2/1000' etc.\n   * @param p the period to change\n   * @param value the int value as described above.\n   * @eturn the new Period object.\n   ",
    "links" : [ ]
  }, {
    "name" : "private Period setFuture(boolean future)",
    "returnType" : "Period",
    "comment" : "\n   * Sets whether this defines a future time.\n   * @param future true if the time is in the future\n   * @return  the new Period\n   ",
    "links" : [ ]
  }, {
    "name" : "private Period setTimeLimit(byte limit)",
    "returnType" : "Period",
    "comment" : "\n   * Sets whether this is more than, less than, or\n   * 'about' the specified time.\n   * @param limit the kind of limit\n   * @return the new Period\n   ",
    "links" : [ ]
  }, {
    "name" : "private static void checkCount(float count)",
    "returnType" : "void",
    "comment" : "\n   * Validate count.\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static Period at(float count, TimeUnit unit)", "public static Period moreThan(float count, TimeUnit unit)", "public static Period lessThan(float count, TimeUnit unit)", "public Period and(float count, TimeUnit unit)", "public Period omit(TimeUnit unit)", "public Period at()", "public Period moreThan()", "public Period lessThan()", "public Period inFuture()", "public Period inPast()", "public Period inFuture(boolean future)", "public Period inPast(boolean past)", "public boolean isSet()", "public boolean isSet(TimeUnit unit)", "public float getCount(TimeUnit unit)", "public boolean isInFuture()", "public boolean isInPast()", "public boolean isMoreThan()", "public boolean isLessThan()", "public boolean equals(Object rhs)", "public boolean equals(Period rhs)", "public int hashCode()", "private Period setTimeUnitValue(TimeUnit unit, float value)", "private Period setTimeUnitInternalValue(TimeUnit unit, int value)", "private Period setFuture(boolean future)", "private Period setTimeLimit(byte limit)", "private static void checkCount(float count)" ],
  "variableNames" : [ "timeLimit", "inFuture", "counts" ]
}