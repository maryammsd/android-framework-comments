{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/util/VTimeZone.java",
  "packageName" : "android.icu.util",
  "className" : "VTimeZone",
  "comment" : "\n * <code>VTimeZone</code> is a class implementing RFC2445 VTIMEZONE.  You can create a\n * <code>VTimeZone</code> instance from a time zone ID supported by <code>TimeZone</code>.\n * With the <code>VTimeZone</code> instance created from the ID, you can write out the rule\n * in RFC2445 VTIMEZONE format.  Also, you can create a <code>VTimeZone</code> instance\n * from RFC2445 VTIMEZONE data stream, which allows you to calculate time\n * zone offset by the rules defined by the data.<br><br>\n *\n * Note: The consumer of this class reading or writing VTIMEZONE data is responsible to\n * decode or encode Non-ASCII text.  Methods reading/writing VTIMEZONE data in this class\n * do nothing with MIME encoding.\n *\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "tz",
    "type" : "BasicTimeZone",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "vtzlines",
    "type" : "List<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "olsonzid",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "tzurl",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "lastmod",
    "type" : "Date",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ICU_TZVERSION",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ICU_TZINFO_PROP",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEF_DSTSAVINGS",
    "type" : "int",
    "comment" : " 1 hour",
    "links" : [ ]
  }, {
    "name" : "DEF_TZSTARTTIME",
    "type" : "long",
    "comment" : " Default time start",
    "links" : [ ]
  }, {
    "name" : "MIN_TIME",
    "type" : "long",
    "comment" : " minimum/max",
    "links" : [ ]
  }, {
    "name" : "MAX_TIME",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "COLON",
    "type" : "String",
    "comment" : " Symbol characters used by RFC2445 VTIMEZONE",
    "links" : [ ]
  }, {
    "name" : "SEMICOLON",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EQUALS_SIGN",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "COMMA",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NEWLINE",
    "type" : "String",
    "comment" : " CRLF",
    "links" : [ ]
  }, {
    "name" : "ICAL_BEGIN_VTIMEZONE",
    "type" : "String",
    "comment" : " RFC2445 VTIMEZONE tokens",
    "links" : [ ]
  }, {
    "name" : "ICAL_END_VTIMEZONE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ICAL_BEGIN",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ICAL_END",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ICAL_VTIMEZONE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ICAL_TZID",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ICAL_STANDARD",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ICAL_DAYLIGHT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ICAL_DTSTART",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ICAL_TZOFFSETFROM",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ICAL_TZOFFSETTO",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ICAL_RDATE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ICAL_RRULE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ICAL_TZNAME",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ICAL_TZURL",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ICAL_LASTMOD",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ICAL_FREQ",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ICAL_UNTIL",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ICAL_YEARLY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ICAL_BYMONTH",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ICAL_BYDAY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ICAL_BYMONTHDAY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ICAL_DOW_NAMES",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MONTHLENGTH",
    "type" : "int[]",
    "comment" : " Month length in regular year",
    "links" : [ ]
  }, {
    "name" : "INI",
    "type" : "int",
    "comment" : " Initial state",
    "links" : [ ]
  }, {
    "name" : "VTZ",
    "type" : "int",
    "comment" : " In VTIMEZONE",
    "links" : [ ]
  }, {
    "name" : "TZI",
    "type" : "int",
    "comment" : " In STANDARD or DAYLIGHT",
    "links" : [ ]
  }, {
    "name" : "ERR",
    "type" : "int",
    "comment" : " Error state",
    "links" : [ ]
  }, {
    "name" : "isFrozen",
    "type" : "boolean",
    "comment" : " Freezable stuffs",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static VTimeZone create(String tzid)",
    "returnType" : "VTimeZone",
    "comment" : "\n     * Create a <code>VTimeZone</code> instance by the time zone ID.\n     *\n     * @param tzid The time zone ID, such as America/New_York\n     * @return A <code>VTimeZone</code> initialized by the time zone ID, or null\n     * when the ID is unknown.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static VTimeZone create(Reader reader)",
    "returnType" : "VTimeZone",
    "comment" : "\n     * Create a <code>VTimeZone</code> instance by RFC2445 VTIMEZONE data.\n     *\n     * @param reader The Reader for VTIMEZONE data input stream\n     * @return A <code>VTimeZone</code> initialized by the VTIMEZONE data or\n     * null if failed to load the rule from the VTIMEZONE data.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getOffset(int era, int year, int month, int day, int dayOfWeek, int milliseconds)",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public void getOffset(long date, boolean local, int[] offsets)",
    "returnType" : "void",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public void getOffsetFromLocal(long date, LocalOption nonExistingTimeOpt, LocalOption duplicatedTimeOpt, int[] offsets)",
    "returnType" : "void",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getRawOffset()",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean inDaylightTime(Date date)",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setRawOffset(int offsetMillis)",
    "returnType" : "void",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean useDaylightTime()",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean observesDaylightTime()",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasSameRules(TimeZone other)",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getTZURL()",
    "returnType" : "String",
    "comment" : "\n     * Gets the RFC2445 TZURL property value.  When a <code>VTimeZone</code> instance was created from\n     * VTIMEZONE data, the value is set by the TZURL property value in the data.  Otherwise,\n     * the initial value is null.\n     *\n     * @return The RFC2445 TZURL property value\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTZURL(String url)",
    "returnType" : "void",
    "comment" : "\n     * Sets the RFC2445 TZURL property value.\n     *\n     * @param url The TZURL property value.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Date getLastModified()",
    "returnType" : "Date",
    "comment" : "\n     * Gets the RFC2445 LAST-MODIFIED property value.  When a <code>VTimeZone</code> instance was created\n     * from VTIMEZONE data, the value is set by the LAST-MODIFIED property value in the data.\n     * Otherwise, the initial value is null.\n     *\n     * @return The Date represents the RFC2445 LAST-MODIFIED date.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setLastModified(Date date)",
    "returnType" : "void",
    "comment" : "\n     * Sets the date used for RFC2445 LAST-MODIFIED property value.\n     *\n     * @param date The <code>Date</code> object represents the date for RFC2445 LAST-MODIFIED property value.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void write(Writer writer) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes RFC2445 VTIMEZONE data for this time zone\n     *\n     * @param writer A <code>Writer</code> used for the output\n     * @throws IOException If there were problems creating a buffered writer or writing to it.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void write(Writer writer, long start) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes RFC2445 VTIMEZONE data applicable for dates after\n     * the specified start time.\n     *\n     * @param writer    The <code>Writer</code> used for the output\n     * @param start     The start time\n     *\n     * @throws IOException If there were problems reading and writing to the writer.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void writeSimple(Writer writer, long time) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes RFC2445 VTIMEZONE data applicable near the specified date.\n     * Some common iCalendar implementations can only handle a single time\n     * zone property or a pair of standard and daylight time properties using\n     * BYDAY rule with day of week (such as BYDAY=1SUN).  This method produce\n     * the VTIMEZONE data which can be handled these implementations.  The rules\n     * produced by this method can be used only for calculating time zone offset\n     * around the specified date.\n     *\n     * @param writer    The <code>Writer</code> used for the output\n     * @param time      The date\n     *\n     * @throws IOException If there were problems reading or writing to the writer.\n     ",
    "links" : [ ]
  }, {
    "name" : "public TimeZoneTransition getNextTransition(long base, boolean inclusive)",
    "returnType" : "TimeZoneTransition",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public TimeZoneTransition getPreviousTransition(long base, boolean inclusive)",
    "returnType" : "TimeZoneTransition",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasEquivalentTransitions(TimeZone other, long start, long end)",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public TimeZoneRule[] getTimeZoneRules()",
    "returnType" : "TimeZoneRule[]",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public TimeZoneRule[] getTimeZoneRules(long start)",
    "returnType" : "TimeZoneRule[]",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object clone()",
    "returnType" : "Object",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean load(Reader reader)",
    "returnType" : "boolean",
    "comment" : "\n     * Read the input stream to locate the VTIMEZONE block and\n     * parse the contents to initialize this VTimeZone object.\n     * The reader skips other RFC2445 message headers.  After\n     * the parse is completed, the reader points at the beginning\n     * of the header field just after the end of VTIMEZONE block.\n     * When VTIMEZONE block is found and this object is successfully\n     * initialized by the rules described in the data, this method\n     * returns true.  Otherwise, returns false.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean parse()",
    "returnType" : "boolean",
    "comment" : "\n     * Parse VTIMEZONE data and create a RuleBasedTimeZone\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String getDefaultTZName(String tzid, boolean isDST)",
    "returnType" : "String",
    "comment" : "\n     * Create a default TZNAME from TZID\n     ",
    "links" : [ ]
  }, {
    "name" : "private static TimeZoneRule createRuleByRRULE(String tzname, int rawOffset, int dstSavings, long start, List<String> dates, int fromOffset)",
    "returnType" : "TimeZoneRule",
    "comment" : "\n     * Create a TimeZoneRule by the RRULE definition\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int[] parseRRULE(String rrule, long[] until)",
    "returnType" : "int[]",
    "comment" : "\n     * Parse individual RRULE\n     *\n     * On return -\n     *\n     * int[0] month calculated by BYMONTH - 1, or -1 when not found\n     * int[1] day of week in BYDAY, or 0 when not found\n     * int[2] day of week ordinal number in BYDAY, or 0 when not found\n     * int[i >= 3] day of month, which could be multiple values, or 0 when not found\n     *\n     *  or\n     *\n     * null on any error cases, for example, FREQ=YEARLY is not available\n     *\n     * When UNTIL attribute is available, the time will be set to until[0],\n     * otherwise, MIN_TIME\n     ",
    "links" : [ ]
  }, {
    "name" : "private static TimeZoneRule createRuleByRDATE(String tzname, int rawOffset, int dstSavings, long start, List<String> dates, int fromOffset)",
    "returnType" : "TimeZoneRule",
    "comment" : "\n     * Create a TimeZoneRule by the RDATE definition\n     ",
    "links" : [ ]
  }, {
    "name" : "private void writeZone(Writer w, BasicTimeZone basictz, String[] customProperties) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Write the time zone rules in RFC2445 VTIMEZONE format\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean isEquivalentDateRule(int month, int weekInMonth, int dayOfWeek, DateTimeRule dtrule)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if the DOW rule specified by month, weekInMonth and dayOfWeek is equivalent\n     * to the DateTimerule.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void writeZonePropsByTime(Writer writer, boolean isDst, String tzname, int fromOffset, int toOffset, long time, boolean withRDATE) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Write a single start time\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void writeZonePropsByDOM(Writer writer, boolean isDst, String tzname, int fromOffset, int toOffset, int month, int dayOfMonth, long startTime, long untilTime) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Write start times defined by a DOM rule using VTIMEZONE RRULE\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void writeZonePropsByDOW(Writer writer, boolean isDst, String tzname, int fromOffset, int toOffset, int month, int weekInMonth, int dayOfWeek, long startTime, long untilTime) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Write start times defined by a DOW rule using VTIMEZONE RRULE\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void writeZonePropsByDOW_GEQ_DOM(Writer writer, boolean isDst, String tzname, int fromOffset, int toOffset, int month, int dayOfMonth, int dayOfWeek, long startTime, long untilTime) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Write start times defined by a DOW_GEQ_DOM rule using VTIMEZONE RRULE\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void writeZonePropsByDOW_GEQ_DOM_sub(Writer writer, int month, int dayOfMonth, int dayOfWeek, int numDays, long untilTime, int fromOffset) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Called from writeZonePropsByDOW_GEQ_DOM\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void writeZonePropsByDOW_LEQ_DOM(Writer writer, boolean isDst, String tzname, int fromOffset, int toOffset, int month, int dayOfMonth, int dayOfWeek, long startTime, long untilTime) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Write start times defined by a DOW_LEQ_DOM rule using VTIMEZONE RRULE\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void writeFinalRule(Writer writer, boolean isDst, AnnualTimeZoneRule rule, int fromRawOffset, int fromDSTSavings, long startTime) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Write the final time zone rule using RRULE, with no UNTIL attribute\n     ",
    "links" : [ ]
  }, {
    "name" : "private static DateTimeRule toWallTimeRule(DateTimeRule rule, int rawOffset, int dstSavings)",
    "returnType" : "DateTimeRule",
    "comment" : "\n     * Convert the rule to its equivalent rule using WALL_TIME mode\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void beginZoneProps(Writer writer, boolean isDst, String tzname, int fromOffset, int toOffset, long startTime) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Write the opening section of zone properties\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void endZoneProps(Writer writer, boolean isDst) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes the closing section of zone properties\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void beginRRULE(Writer writer, int month) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Write the beginning part of RRULE line\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void appendUNTIL(Writer writer, String until) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Append the UNTIL attribute after RRULE line\n     ",
    "links" : [ ]
  }, {
    "name" : "private void writeHeader(Writer writer) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Write the opening section of the VTIMEZONE block\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void writeFooter(Writer writer) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Write the closing section of the VTIMEZONE definition block\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String getDateTimeString(long time)",
    "returnType" : "String",
    "comment" : "\n     * Convert date/time to RFC2445 Date-Time form #1 DATE WITH LOCAL TIME\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String getUTCDateTimeString(long time)",
    "returnType" : "String",
    "comment" : "\n     * Convert date/time to RFC2445 Date-Time form #2 DATE WITH UTC TIME\n     ",
    "links" : [ ]
  }, {
    "name" : "private static long parseDateTimeString(String str, int offset)",
    "returnType" : "long",
    "comment" : "\n     * Parse RFC2445 Date-Time form #1 DATE WITH LOCAL TIME and\n     * #2 DATE WITH UTC TIME\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int offsetStrToMillis(String str)",
    "returnType" : "int",
    "comment" : "\n     * Convert RFC2445 utc-offset string to milliseconds\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String millisToOffset(int millis)",
    "returnType" : "String",
    "comment" : "\n     * Convert milliseconds to RFC2445 utc-offset string\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String numToString(int num, int width)",
    "returnType" : "String",
    "comment" : "\n     * Format integer number\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isFrozen()",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public TimeZone freeze()",
    "returnType" : "TimeZone",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public TimeZone cloneAsThawed()",
    "returnType" : "TimeZone",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static VTimeZone create(String tzid)", "public static VTimeZone create(Reader reader)", "public int getOffset(int era, int year, int month, int day, int dayOfWeek, int milliseconds)", "public void getOffset(long date, boolean local, int[] offsets)", "public void getOffsetFromLocal(long date, LocalOption nonExistingTimeOpt, LocalOption duplicatedTimeOpt, int[] offsets)", "public int getRawOffset()", "public boolean inDaylightTime(Date date)", "public void setRawOffset(int offsetMillis)", "public boolean useDaylightTime()", "public boolean observesDaylightTime()", "public boolean hasSameRules(TimeZone other)", "public String getTZURL()", "public void setTZURL(String url)", "public Date getLastModified()", "public void setLastModified(Date date)", "public void write(Writer writer) throws IOException", "public void write(Writer writer, long start) throws IOException", "public void writeSimple(Writer writer, long time) throws IOException", "public TimeZoneTransition getNextTransition(long base, boolean inclusive)", "public TimeZoneTransition getPreviousTransition(long base, boolean inclusive)", "public boolean hasEquivalentTransitions(TimeZone other, long start, long end)", "public TimeZoneRule[] getTimeZoneRules()", "public TimeZoneRule[] getTimeZoneRules(long start)", "public Object clone()", "private boolean load(Reader reader)", "private boolean parse()", "private static String getDefaultTZName(String tzid, boolean isDST)", "private static TimeZoneRule createRuleByRRULE(String tzname, int rawOffset, int dstSavings, long start, List<String> dates, int fromOffset)", "private static int[] parseRRULE(String rrule, long[] until)", "private static TimeZoneRule createRuleByRDATE(String tzname, int rawOffset, int dstSavings, long start, List<String> dates, int fromOffset)", "private void writeZone(Writer w, BasicTimeZone basictz, String[] customProperties) throws IOException", "private static boolean isEquivalentDateRule(int month, int weekInMonth, int dayOfWeek, DateTimeRule dtrule)", "private static void writeZonePropsByTime(Writer writer, boolean isDst, String tzname, int fromOffset, int toOffset, long time, boolean withRDATE) throws IOException", "private static void writeZonePropsByDOM(Writer writer, boolean isDst, String tzname, int fromOffset, int toOffset, int month, int dayOfMonth, long startTime, long untilTime) throws IOException", "private static void writeZonePropsByDOW(Writer writer, boolean isDst, String tzname, int fromOffset, int toOffset, int month, int weekInMonth, int dayOfWeek, long startTime, long untilTime) throws IOException", "private static void writeZonePropsByDOW_GEQ_DOM(Writer writer, boolean isDst, String tzname, int fromOffset, int toOffset, int month, int dayOfMonth, int dayOfWeek, long startTime, long untilTime) throws IOException", "private static void writeZonePropsByDOW_GEQ_DOM_sub(Writer writer, int month, int dayOfMonth, int dayOfWeek, int numDays, long untilTime, int fromOffset) throws IOException", "private static void writeZonePropsByDOW_LEQ_DOM(Writer writer, boolean isDst, String tzname, int fromOffset, int toOffset, int month, int dayOfMonth, int dayOfWeek, long startTime, long untilTime) throws IOException", "private static void writeFinalRule(Writer writer, boolean isDst, AnnualTimeZoneRule rule, int fromRawOffset, int fromDSTSavings, long startTime) throws IOException", "private static DateTimeRule toWallTimeRule(DateTimeRule rule, int rawOffset, int dstSavings)", "private static void beginZoneProps(Writer writer, boolean isDst, String tzname, int fromOffset, int toOffset, long startTime) throws IOException", "private static void endZoneProps(Writer writer, boolean isDst) throws IOException", "private static void beginRRULE(Writer writer, int month) throws IOException", "private static void appendUNTIL(Writer writer, String until) throws IOException", "private void writeHeader(Writer writer) throws IOException", "private static void writeFooter(Writer writer) throws IOException", "private static String getDateTimeString(long time)", "private static String getUTCDateTimeString(long time)", "private static long parseDateTimeString(String str, int offset)", "private static int offsetStrToMillis(String str)", "private static String millisToOffset(int millis)", "private static String numToString(int num, int width)", "public boolean isFrozen()", "public TimeZone freeze()", "public TimeZone cloneAsThawed()" ],
  "variableNames" : [ "serialVersionUID", "tz", "vtzlines", "olsonzid", "tzurl", "lastmod", "ICU_TZVERSION", "ICU_TZINFO_PROP", "DEF_DSTSAVINGS", "DEF_TZSTARTTIME", "MIN_TIME", "MAX_TIME", "COLON", "SEMICOLON", "EQUALS_SIGN", "COMMA", "NEWLINE", "ICAL_BEGIN_VTIMEZONE", "ICAL_END_VTIMEZONE", "ICAL_BEGIN", "ICAL_END", "ICAL_VTIMEZONE", "ICAL_TZID", "ICAL_STANDARD", "ICAL_DAYLIGHT", "ICAL_DTSTART", "ICAL_TZOFFSETFROM", "ICAL_TZOFFSETTO", "ICAL_RDATE", "ICAL_RRULE", "ICAL_TZNAME", "ICAL_TZURL", "ICAL_LASTMOD", "ICAL_FREQ", "ICAL_UNTIL", "ICAL_YEARLY", "ICAL_BYMONTH", "ICAL_BYDAY", "ICAL_BYMONTHDAY", "ICAL_DOW_NAMES", "MONTHLENGTH", "INI", "VTZ", "TZI", "ERR", "isFrozen" ]
}