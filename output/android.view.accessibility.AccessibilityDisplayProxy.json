{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/accessibility/AccessibilityDisplayProxy.java",
  "packageName" : "android.view.accessibility",
  "className" : "AccessibilityDisplayProxy",
  "comment" : "\n * Allows a privileged app - an app with MANAGE_ACCESSIBILITY permission and SystemAPI access - to\n * interact with the windows in the display that this proxy represents. Proxying the default display\n * or a display that is not tracked by accessibility, such as private displays, will throw an\n * exception. Only the real user has access to global clients like SystemUI.\n *\n * <p>\n * To register and unregister a proxy, use\n * {@link AccessibilityManager#registerDisplayProxy(AccessibilityDisplayProxy)}\n * and {@link AccessibilityManager#unregisterDisplayProxy(AccessibilityDisplayProxy)}. If the app\n * that has registered the proxy dies, the system will remove the proxy.\n *\n * <p>\n * Avoid using the app's main thread. Proxy methods such as {@link #getWindows} and node methods\n * like {@link AccessibilityNodeInfo#getChild(int)} will happen frequently. Node methods may also\n * wait on the displayed app's UI thread to obtain accurate screen data.\n *\n * <p>\n * To get a list of {@link AccessibilityServiceInfo}s that have populated {@link ComponentName}s and\n * {@link ResolveInfo}s, retrieve the list using {@link #getInstalledAndEnabledServices()} after\n * {@link #onProxyConnected()} has been called.\n *\n * @hide\n ",
  "links" : [ "#getInstalledAndEnabledServices()", "#getWindows", "android.accessibilityservice.AccessibilityServiceInfo", "android.view.accessibility.AccessibilityManager#unregisterDisplayProxy(AccessibilityDisplayProxy)", "android.view.accessibility.AccessibilityManager#registerDisplayProxy(AccessibilityDisplayProxy)", "android.content.ComponentName", "#onProxyConnected()", "android.view.accessibility.AccessibilityNodeInfo#getChild(int)", "android.content.pm.ResolveInfo" ],
  "variables" : [ {
    "name" : "LOG_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INVALID_CONNECTION_ID",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInstalledAndEnabledServices",
    "type" : "List<AccessibilityServiceInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExecutor",
    "type" : "Executor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConnectionId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDisplayId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mServiceClient",
    "type" : "IAccessibilityServiceClient",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getDisplayId()",
    "returnType" : "int",
    "comment" : "\n     * Returns the id of the display being proxy-ed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onAccessibilityEvent(@NonNull AccessibilityEvent event)",
    "returnType" : "void",
    "comment" : "\n     * Handles {@link android.view.accessibility.AccessibilityEvent}s.\n     * <p>\n     * AccessibilityEvents represent changes to the UI, or what parts of the node tree have changed.\n     * AccessibilityDisplayProxy should use these to query new UI and send appropriate feedback\n     * to their users.\n     * <p>\n     * For example, a {@link AccessibilityEvent#TYPE_WINDOWS_CHANGED} indicates a change in windows,\n     * so a proxy may query {@link #getWindows} to obtain updated UI and potentially inform of a new\n     * window title. Or a proxy may emit an earcon on a\n     * {@link AccessibilityEvent#TYPE_VIEW_SCROLLED} event.\n     ",
    "links" : [ "#getWindows", "android.view.accessibility.AccessibilityEvent#TYPE_VIEW_SCROLLED", "android.view.accessibility.AccessibilityEvent", "android.view.accessibility.AccessibilityEvent#TYPE_WINDOWS_CHANGED" ]
  }, {
    "name" : "public void onProxyConnected()",
    "returnType" : "void",
    "comment" : "\n     * Handles a successful system connection after\n     * {@link AccessibilityManager#registerDisplayProxy(AccessibilityDisplayProxy)} is called.\n     *\n     * <p>\n     * At this point, querying for UI is available and {@link AccessibilityEvent}s will begin being\n     * sent. An AccessibilityDisplayProxy may instantiate core infrastructure components here.\n     ",
    "links" : [ "android.view.accessibility.AccessibilityManager#registerDisplayProxy(AccessibilityDisplayProxy)", "android.view.accessibility.AccessibilityEvent" ]
  }, {
    "name" : "public void interrupt()",
    "returnType" : "void",
    "comment" : "\n     * Handles a request to interrupt the accessibility feedback.\n     * <p>\n     * AccessibilityDisplayProxy should interrupt the accessibility activity occurring on its\n     * display. For example, a screen reader may interrupt speech.\n     *\n     * @see AccessibilityManager#interrupt()\n     * @see AccessibilityService#onInterrupt()\n     ",
    "links" : [ ]
  }, {
    "name" : "public AccessibilityNodeInfo findFocus(int focusType)",
    "returnType" : "AccessibilityNodeInfo",
    "comment" : "\n     * Gets the node with focus, in this display.\n     *\n     * <p>For {@link AccessibilityNodeInfo#FOCUS_INPUT}, this returns the input-focused node in the\n     * proxy display if this display can receive unspecified input events (input that does not\n     * specify a target display.)\n     *\n     * <p>For {@link AccessibilityNodeInfo#FOCUS_ACCESSIBILITY}, this returns the\n     * accessibility-focused node in the proxy display if the display has accessibility focus.\n     * @param focusType The focus to find. One of {@link AccessibilityNodeInfo#FOCUS_INPUT} or\n     * {@link AccessibilityNodeInfo#FOCUS_ACCESSIBILITY}.\n     * @return The node info of the focused view or null.\n\n     ",
    "links" : [ "android.view.accessibility.AccessibilityNodeInfo#FOCUS_INPUT", "android.view.accessibility.AccessibilityNodeInfo#FOCUS_ACCESSIBILITY" ]
  }, {
    "name" : "public List<AccessibilityWindowInfo> getWindows()",
    "returnType" : "List<AccessibilityWindowInfo>",
    "comment" : "\n     * Gets the windows of the tracked display.\n     *\n     * @see AccessibilityService#getWindows()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setInstalledAndEnabledServices(@NonNull List<AccessibilityServiceInfo> installedAndEnabledServices)",
    "returnType" : "void",
    "comment" : "\n     * Sets the list of {@link AccessibilityServiceInfo}s describing the services interested in the\n     * {@link AccessibilityDisplayProxy}'s display.\n     *\n     * <p>These represent accessibility features and services that are installed and running. These\n     * should not include {@link AccessibilityService}s installed on the phone.\n     *\n     * @param installedAndEnabledServices the list of installed and running accessibility services.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService", "android.accessibilityservice.AccessibilityServiceInfo", "android.view.accessibility.AccessibilityDisplayProxy" ]
  }, {
    "name" : "private void sendServiceInfos()",
    "returnType" : "void",
    "comment" : "\n     * Sets the {@link AccessibilityServiceInfo} for this service if the latter is\n     * properly set and there is an {@link IAccessibilityServiceConnection} to the\n     * AccessibilityManagerService.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityServiceInfo", "android.accessibilityservice.IAccessibilityServiceConnection" ]
  }, {
    "name" : "public final List<AccessibilityServiceInfo> getInstalledAndEnabledServices()",
    "returnType" : "List<AccessibilityServiceInfo>",
    "comment" : "\n     * Gets the list of {@link AccessibilityServiceInfo}s describing the services interested in the\n     * {@link AccessibilityDisplayProxy}'s display.\n     *\n     * @return The {@link AccessibilityServiceInfo}s of interested services.\n     * @see AccessibilityServiceInfo\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityServiceInfo", "android.view.accessibility.AccessibilityDisplayProxy" ]
  }, {
    "name" : "public void setAccessibilityFocusAppearance(int strokeWidth, @ColorInt int color)",
    "returnType" : "void",
    "comment" : "\n     * Sets the strokeWidth and color of the accessibility focus rectangle.\n     *\n     * @param strokeWidth The stroke width of the rectangle in pixels.\n     *                    Setting this value to zero results in no focus rectangle being drawn.\n     * @param color The color of the rectangle.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int getDisplayId()", "public void onAccessibilityEvent(@NonNull AccessibilityEvent event)", "public void onProxyConnected()", "public void interrupt()", "public AccessibilityNodeInfo findFocus(int focusType)", "public List<AccessibilityWindowInfo> getWindows()", "public void setInstalledAndEnabledServices(@NonNull List<AccessibilityServiceInfo> installedAndEnabledServices)", "private void sendServiceInfos()", "public final List<AccessibilityServiceInfo> getInstalledAndEnabledServices()", "public void setAccessibilityFocusAppearance(int strokeWidth, @ColorInt int color)" ],
  "variableNames" : [ "LOG_TAG", "INVALID_CONNECTION_ID", "mInstalledAndEnabledServices", "mExecutor", "mConnectionId", "mDisplayId", "mServiceClient" ]
}