{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/content/PermissionChecker.java",
  "packageName" : "android.content",
  "className" : "PermissionChecker",
  "comment" : "\n * This class provides permission check APIs that verify both the\n * permission and the associated app op for this permission if\n * such is defined.\n * <p>\n * In the new permission model permissions with protection level\n * dangerous are runtime permissions. For apps targeting {@link android.os.Build.VERSION_CODES#M}\n * and above the user may not grant such permissions or revoke\n * them at any time. For apps targeting API lower than {@link android.os.Build.VERSION_CODES#M}\n * these permissions are always granted as such apps do not expect\n * permission revocations and would crash. Therefore, when the\n * user disables a permission for a legacy app in the UI the\n * platform disables the APIs guarded by this permission making\n * them a no-op which is doing nothing or returning an empty\n * result or default error.\n * </p>\n * <p>\n * It is important that when you perform an operation on behalf of\n * another app you use these APIs to check for permissions as the\n * app may be a legacy app that does not participate in the new\n * permission model for which the user had disabled the \"permission\"\n * which is achieved by disallowing the corresponding app op.\n * </p>\n * <p>\n * This class has two types of methods and you should be careful which\n * type to call based on whether permission protected data is being\n * passed to the app or you are just checking whether the app holds a\n * permission. The reason is that a permission check requires checking\n * the runtime permission and if it is granted checking the corresponding\n * app op as for apps not supporting the runtime mode we never revoke\n * permissions but disable app ops. Since there are two types of app op\n * checks, one that does not leave a record an action was performed and\n * another the does, one needs to call the preflight flavor of the checks\n * named xxxForPreflight only if no private data is being delivered but\n * a permission check is what is needed and the xxxForDataDelivery where\n * the permission check is right before private data delivery.\n *\n * @hide\n ",
  "links" : [ "android.os.Build.VERSION_CODES#M" ],
  "variables" : [ {
    "name" : "PERMISSION_GRANTED",
    "type" : "int",
    "comment" : "\n     * The permission is granted.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PERMISSION_SOFT_DENIED",
    "type" : "int",
    "comment" : "\n     * The permission is denied. Applicable only to runtime permissions.\n     *\n     * <p>Returned when:\n     * <ul>\n     *   <li>the runtime permission is granted, but the corresponding app op is denied\n     *       for runtime permissions.</li>\n     * </ul>\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PERMISSION_HARD_DENIED",
    "type" : "int",
    "comment" : "\n     * The permission is denied.\n     *\n     * <p>Returned when:\n     * <ul>\n     *   <li>the permission is denied for non app op permissions.</li>\n     *   <li>the app op is denied or app op is {@link AppOpsManager#MODE_DEFAULT}\n     *   and permission is denied.</li>\n     * </ul>\n     *\n     * @hide\n     ",
    "links" : [ "android.app.AppOpsManager#MODE_DEFAULT" ]
  }, {
    "name" : "PID_UNKNOWN",
    "type" : "int",
    "comment" : " Constant when the PID for which we check permissions is unknown. ",
    "links" : [ ]
  }, {
    "name" : "sService",
    "type" : "IPermissionChecker",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static int checkPermissionForDataDelivery(@NonNull Context context, @NonNull String permission, int pid, int uid, @Nullable String packageName, @Nullable String attributionTag, @Nullable String message, boolean startDataDelivery)",
    "returnType" : "int",
    "comment" : "\n     * Checks whether a given package in a UID and PID has a given permission\n     * and whether the app op that corresponds to this permission is allowed.\n     *\n     * <strong>NOTE:</strong> Use this method only for permission checks at the\n     * point where you will deliver the permission protected data to clients.\n     *\n     * <p>For example, if an app registers a location listener it should have the location\n     * permission but no data is actually sent to the app at the moment of registration\n     * and you should use {@link #checkPermissionForPreflight(Context, String, int, int, String)}\n     * to determine if the app has or may have location permission (if app has only foreground\n     * location the grant state depends on the app's fg/gb state) and this check will not\n     * leave a trace that permission protected data was delivered. When you are about to\n     * deliver the location data to a registered listener you should use this method which\n     * will evaluate the permission access based on the current fg/bg state of the app and\n     * leave a record that the data was accessed.\n     *\n     * <p>For more details how to determine the {@code packageName}, {@code attributionTag}, and\n     * {@code message}, please check the description in\n     * {@link AppOpsManager#noteOp(String, int, String, String, String)}\n     *\n     * @param context Context for accessing resources.\n     * @param permission The permission to check.\n     * @param pid The process id for which to check. Use {@link #PID_UNKNOWN} if the PID\n     *    is not known.\n     * @param uid The uid for which to check.\n     * @param packageName The package name for which to check. If null the\n     *     the first package for the calling UID will be used.\n     * @param attributionTag attribution tag\n     * @return The permission check result which is either {@link #PERMISSION_GRANTED}\n     *     or {@link #PERMISSION_SOFT_DENIED} or {@link #PERMISSION_HARD_DENIED}.\n     * @param message A message describing the reason the permission was checked\n     * @param startDataDelivery Whether this is the start of data delivery.\n     *\n     * @see #checkPermissionForPreflight(Context, String, int, int, String)\n     ",
    "links" : [ "#PERMISSION_HARD_DENIED", "#PERMISSION_GRANTED", "#PID_UNKNOWN", "android.app.AppOpsManager#noteOp(String", "#PERMISSION_SOFT_DENIED", "#checkPermissionForPreflight(Context" ]
  }, {
    "name" : "public static int checkPermissionForDataDelivery(@NonNull Context context, @NonNull String permission, int pid, int uid, @Nullable String packageName, @Nullable String attributionTag, @Nullable String message)",
    "returnType" : "int",
    "comment" : "\n     * Checks whether a given package in a UID and PID has a given permission\n     * and whether the app op that corresponds to this permission is allowed.\n     *\n     * <strong>NOTE:</strong> Use this method only for permission checks at the\n     * point where you will deliver the permission protected data to clients.\n     *\n     * <p>For example, if an app registers a location listener it should have the location\n     * permission but no data is actually sent to the app at the moment of registration\n     * and you should use {@link #checkPermissionForPreflight(Context, String, int, int, String)}\n     * to determine if the app has or may have location permission (if app has only foreground\n     * location the grant state depends on the app's fg/gb state) and this check will not\n     * leave a trace that permission protected data was delivered. When you are about to\n     * deliver the location data to a registered listener you should use this method which\n     * will evaluate the permission access based on the current fg/bg state of the app and\n     * leave a record that the data was accessed.\n     *\n     * <p>For more details how to determine the {@code packageName}, {@code attributionTag}, and\n     * {@code message}, please check the description in\n     * {@link AppOpsManager#noteOp(String, int, String, String, String)}\n     *\n     * @param context Context for accessing resources.\n     * @param permission The permission to check.\n     * @param pid The process id for which to check. Use {@link #PID_UNKNOWN} if the PID\n     *    is not known.\n     * @param uid The uid for which to check.\n     * @param packageName The package name for which to check. If null the\n     *     the first package for the calling UID will be used.\n     * @param attributionTag attribution tag\n     * @return The permission check result which is either {@link #PERMISSION_GRANTED}\n     *     or {@link #PERMISSION_SOFT_DENIED} or {@link #PERMISSION_HARD_DENIED}.\n     * @param message A message describing the reason the permission was checked\n     *\n     * @see #checkPermissionForPreflight(Context, String, int, int, String)\n     ",
    "links" : [ "#PERMISSION_HARD_DENIED", "#PERMISSION_GRANTED", "#PID_UNKNOWN", "android.app.AppOpsManager#noteOp(String", "#PERMISSION_SOFT_DENIED", "#checkPermissionForPreflight(Context" ]
  }, {
    "name" : "public static int checkPermissionForDataDeliveryFromDataSource(@NonNull Context context, @NonNull String permission, int pid, @NonNull AttributionSource attributionSource, @Nullable String message)",
    "returnType" : "int",
    "comment" : "\n     * Checks whether a given data access chain described by the given {@link AttributionSource}\n     * has a given permission and whether the app op that corresponds to this permission\n     * is allowed. Call this method if you are the datasource which would not blame you for\n     * access to the data since you are the data.\n     *\n     * <strong>NOTE:</strong> Use this method only for permission checks at the\n     * point where you will deliver the permission protected data to clients.\n     *\n     * <p>For example, if an app registers a location listener it should have the location\n     * permission but no data is actually sent to the app at the moment of registration\n     * and you should use {@link #checkPermissionForPreflight(Context, String, int, int, String)}\n     * to determine if the app has or may have location permission (if app has only foreground\n     * location the grant state depends on the app's fg/gb state) and this check will not\n     * leave a trace that permission protected data was delivered. When you are about to\n     * deliver the location data to a registered listener you should use this method which\n     * will evaluate the permission access based on the current fg/bg state of the app and\n     * leave a record that the data was accessed.\n     *\n     * @param context Context for accessing resources.\n     * @param permission The permission to check.\n     * @param pid The process id for which to check. Use {@link #PID_UNKNOWN} if the PID\n     *    is not known.\n     * @param attributionSource the permission identity\n     * @return The permission check result which is either {@link #PERMISSION_GRANTED}\n     *     or {@link #PERMISSION_SOFT_DENIED} or {@link #PERMISSION_HARD_DENIED}.\n     * @param message A message describing the reason the permission was checked\n     *\n     * @see #checkPermissionForPreflight(Context, String, AttributionSource)\n     ",
    "links" : [ "#PERMISSION_HARD_DENIED", "#PERMISSION_GRANTED", "#PID_UNKNOWN", "android.content.AttributionSource", "#PERMISSION_SOFT_DENIED", "#checkPermissionForPreflight(Context" ]
  }, {
    "name" : "public static int checkPermissionForDataDelivery(@NonNull Context context, @NonNull String permission, int pid, @NonNull AttributionSource attributionSource, @Nullable String message)",
    "returnType" : "int",
    "comment" : "\n     * Checks whether a given data access chain described by the given {@link AttributionSource}\n     * has a given permission and whether the app op that corresponds to this permission\n     * is allowed.\n     *\n     * <strong>NOTE:</strong> Use this method only for permission checks at the\n     * point where you will deliver the permission protected data to clients.\n     *\n     * <p>For example, if an app registers a location listener it should have the location\n     * permission but no data is actually sent to the app at the moment of registration\n     * and you should use {@link #checkPermissionForPreflight(Context, String, AttributionSource)}\n     * to determine if the app has or may have location permission (if app has only foreground\n     * location the grant state depends on the app's fg/gb state) and this check will not\n     * leave a trace that permission protected data was delivered. When you are about to\n     * deliver the location data to a registered listener you should use this method which\n     * will evaluate the permission access based on the current fg/bg state of the app and\n     * leave a record that the data was accessed.\n     *\n     * @param context Context for accessing resources.\n     * @param permission The permission to check.\n     * @param pid The process id for which to check. Use {@link #PID_UNKNOWN} if the PID\n     *    is not known.\n     * @param attributionSource the permission identity\n     * @param message A message describing the reason the permission was checked\n     * @return The permission check result which is either {@link #PERMISSION_GRANTED}\n     *     or {@link #PERMISSION_SOFT_DENIED} or {@link #PERMISSION_HARD_DENIED}.\n     *\n     * @see #checkPermissionForPreflight(Context, String, AttributionSource)\n     ",
    "links" : [ "#PERMISSION_HARD_DENIED", "#PERMISSION_GRANTED", "#PID_UNKNOWN", "android.content.AttributionSource", "#PERMISSION_SOFT_DENIED", "#checkPermissionForPreflight(Context" ]
  }, {
    "name" : "public static int checkPermissionForDataDelivery(@NonNull Context context, @NonNull String permission, int pid, @NonNull AttributionSource attributionSource, @Nullable String message, boolean startDataDelivery)",
    "returnType" : "int",
    "comment" : "\n     * Checks whether a given data access chain described by the given {@link AttributionSource}\n     * has a given permission and whether the app op that corresponds to this permission\n     * is allowed.\n     *\n     * <strong>NOTE:</strong> Use this method only for permission checks at the\n     * point where you will deliver the permission protected data to clients.\n     *\n     * <p>For example, if an app registers a data listener it should have the required\n     * permission but no data is actually sent to the app at the moment of registration\n     * and you should use {@link #checkPermissionForPreflight(Context, String,\n     * AttributionSource)}\n     * to determine if the app has or may have permission and this check will not\n     * leave a trace that permission protected data was delivered. When you are about to\n     * deliver the data to a registered listener you should use this method which\n     * will evaluate the permission access based on the current fg/bg state of the app and\n     * leave a record that the data was accessed.\n     *\n     * @param context Context for accessing resources.\n     * @param permission The permission to check.\n     * @param pid The process id for which to check. Use {@link #PID_UNKNOWN} if the PID\n     *    is not known.\n     * @param attributionSource The identity for which to check the permission.\n     * @param message A message describing the reason the permission was checked\n     * @param startDataDelivery Whether this is the start of data delivery.\n     * @return The permission check result which is either {@link #PERMISSION_GRANTED}\n     *     or {@link #PERMISSION_SOFT_DENIED} or {@link #PERMISSION_HARD_DENIED}.\n     *\n     * @see #checkPermissionForPreflight(Context, String, AttributionSource)\n     ",
    "links" : [ "#PERMISSION_HARD_DENIED", "#PERMISSION_GRANTED", "#PID_UNKNOWN", "android.content.AttributionSource", "#PERMISSION_SOFT_DENIED", "#checkPermissionForPreflight(Context" ]
  }, {
    "name" : "private static int checkPermissionForDataDeliveryCommon(@NonNull Context context, @NonNull String permission, @NonNull AttributionSource attributionSource, @Nullable String message, boolean startDataDelivery, boolean fromDatasource)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static int checkPermissionAndStartDataDelivery(@NonNull Context context, @NonNull String permission, @NonNull AttributionSource attributionSource, @Nullable String message)",
    "returnType" : "int",
    "comment" : "\n     * Checks whether a given data access chain described by the given {@link AttributionSource}\n     * has a given permission and whether the app op that corresponds to this permission\n     * is allowed. The app ops area also marked as started. This is useful for long running\n     * permissions like camera.\n     *\n     * <strong>NOTE:</strong> Use this method only for permission checks at the\n     * point where you will deliver the permission protected data to clients.\n     *\n     * <p>For example, if an app registers a data listener it should have the required\n     * permission but no data is actually sent to the app at the moment of registration\n     * and you should use {@link #checkPermissionForPreflight(Context, String,\n     * AttributionSource)}\n     * to determine if the app has or may have permission and this check will not\n     * leave a trace that permission protected data was delivered. When you are about to\n     * deliver the data to a registered listener you should use this method which\n     * will evaluate the permission access based on the current fg/bg state of the app and\n     * leave a record that the data was accessed.\n     *\n     * @param context Context for accessing resources.\n     * @param permission The permission to check.\n     * @param attributionSource The identity for which to check the permission.\n     * @param message A message describing the reason the permission was checked\n     * @return The permission check result which is either {@link #PERMISSION_GRANTED}\n     *     or {@link #PERMISSION_SOFT_DENIED} or {@link #PERMISSION_HARD_DENIED}.\n     *\n     * @see #checkPermissionForPreflight(Context, String, AttributionSource)\n     ",
    "links" : [ "#PERMISSION_HARD_DENIED", "#PERMISSION_GRANTED", "android.content.AttributionSource", "#PERMISSION_SOFT_DENIED", "#checkPermissionForPreflight(Context" ]
  }, {
    "name" : "public static int startOpForDataDelivery(@NonNull Context context, @NonNull String opName, @NonNull AttributionSource attributionSource, @Nullable String message)",
    "returnType" : "int",
    "comment" : "\n     * Checks whether a given data access chain described by the given {@link\n     * AttributionSource} has a given app op allowed and marks the op as started.\n     *\n     * <strong>NOTE:</strong> Use this method only for app op checks at the\n     * point where you will deliver the protected data to clients.\n     *\n     * <p>For example, if an app registers a data listener it should have the data\n     * op but no data is actually sent to the app at the moment of registration\n     * and you should use {@link #checkOpForPreflight(Context, String, AttributionSource, String)}\n     * to determine if the app has or may have op access and this check will not\n     * leave a trace that op protected data was delivered. When you are about to\n     * deliver the data to a registered listener you should use this method which\n     * will evaluate the op access based on the current fg/bg state of the app and\n     * leave a record that the data was accessed.\n     *\n     * @param context Context for accessing resources.\n     * @param opName THe op to start.\n     * @param attributionSource The identity for which to check the permission.\n     * @param message A message describing the reason the permission was checked\n     * @return The permission check result which is either {@link #PERMISSION_GRANTED}\n     *     or {@link #PERMISSION_SOFT_DENIED} or {@link #PERMISSION_HARD_DENIED}.\n     *\n     * @see #finishDataDelivery(Context, String, AttributionSource)\n     ",
    "links" : [ "#PERMISSION_HARD_DENIED", "#PERMISSION_GRANTED", "android.content.AttributionSource", "#PERMISSION_SOFT_DENIED", "#checkOpForPreflight(Context" ]
  }, {
    "name" : "public static void finishDataDelivery(@NonNull Context context, @NonNull String op, @NonNull AttributionSource attributionSource)",
    "returnType" : "void",
    "comment" : "\n     * Finishes an ongoing op for data access chain described by the given {@link\n     * AttributionSource}.\n     *\n     * @param context Context for accessing resources.\n     * @param op The op to finish.\n     * @param attributionSource The identity for which finish op.\n     *\n     * @see #startOpForDataDelivery(Context, String, AttributionSource, String)\n     * @see #checkPermissionAndStartDataDelivery(Context, String, AttributionSource, String)\n     ",
    "links" : [ "android.content.AttributionSource" ]
  }, {
    "name" : "public static void finishDataDeliveryFromDatasource(@NonNull Context context, @NonNull String op, @NonNull AttributionSource attributionSource)",
    "returnType" : "void",
    "comment" : "\n     * Finishes an ongoing op for data access chain described by the given {@link\n     * AttributionSource}. Call this method if you are the datasource which would\n     * not finish an op for your attribution source as it was not started.\n     *\n     * @param context Context for accessing resources.\n     * @param op The op to finish.\n     * @param attributionSource The identity for which finish op.\n     *\n     * @see #startOpForDataDelivery(Context, String, AttributionSource, String)\n     * @see #checkPermissionAndStartDataDelivery(Context, String, AttributionSource, String)\n     ",
    "links" : [ "android.content.AttributionSource" ]
  }, {
    "name" : "public static int checkOpForPreflight(@NonNull Context context, @NonNull String opName, @NonNull AttributionSource attributionSource, @Nullable String message)",
    "returnType" : "int",
    "comment" : "\n     * Checks whether a given data access chain described by the given {@link\n     * AttributionSource} has a given app op allowed.\n     *\n     * <strong>NOTE:</strong> Use this method only for op checks at the\n     * preflight point where you will not deliver the protected data\n     * to clients but schedule a data delivery, apps register listeners,\n     * etc.\n     *\n     * <p>For example, if an app registers a data listener it should have the op\n     * but no data is actually sent to the app at the moment of registration\n     * and you should use this method to determine if the app has or may have data\n     * access and this check will not leave a trace that protected data\n     * was delivered. When you are about to deliver the data to a registered\n     * listener you should use {@link #checkOpForDataDelivery(Context, String,\n     * AttributionSource, String)} which will evaluate the op access based\n     * on the current fg/bg state of the app and leave a record that the data was\n     * accessed.\n     *\n     * @param context Context for accessing resources.\n     * @param opName The op to check.\n     * @param attributionSource The identity for which to check the permission.\n     * @param message A message describing the reason the permission was checked\n     * @return The permission check result which is either {@link #PERMISSION_GRANTED}\n     *     or {@link #PERMISSION_SOFT_DENIED} or {@link #PERMISSION_HARD_DENIED}.\n     *\n     * @see #checkOpForDataDelivery(Context, String, AttributionSource, String)\n     ",
    "links" : [ "#PERMISSION_HARD_DENIED", "#PERMISSION_GRANTED", "android.content.AttributionSource", "#checkOpForDataDelivery(Context", "#PERMISSION_SOFT_DENIED" ]
  }, {
    "name" : "public static int checkOpForDataDelivery(@NonNull Context context, @NonNull String opName, @NonNull AttributionSource attributionSource, @Nullable String message)",
    "returnType" : "int",
    "comment" : "\n     * Checks whether a given data access chain described by the given {@link AttributionSource}\n     * has an allowed app op.\n     *\n     * <strong>NOTE:</strong> Use this method only for op checks at the\n     * point where you will deliver the permission protected data to clients.\n     *\n     * <p>For example, if an app registers a data listener it should have the data\n     * permission but no data is actually sent to the app at the moment of registration\n     * and you should use {@link #checkOpForPreflight(Context, String, AttributionSource, String)}\n     * to determine if the app has or may have data access and this check will not\n     * leave a trace that op protected data was delivered. When you are about to\n     * deliver the  data to a registered listener you should use this method which\n     * will evaluate the op access based on the current fg/bg state of the app and\n     * leave a record that the data was accessed.\n     *\n     * @param context Context for accessing resources.\n     * @param opName The op to check.\n     * @param attributionSource The identity for which to check the op.\n     * @return The permission check result which is either {@link #PERMISSION_GRANTED}\n     *     or {@link #PERMISSION_SOFT_DENIED} or {@link #PERMISSION_HARD_DENIED}.\n     * @param message A message describing the reason the permission was checked\n     *\n     * @see #checkOpForPreflight(Context, String, AttributionSource, String)\n     ",
    "links" : [ "#PERMISSION_HARD_DENIED", "#PERMISSION_GRANTED", "android.content.AttributionSource", "#PERMISSION_SOFT_DENIED", "#checkOpForPreflight(Context" ]
  }, {
    "name" : "public static int checkPermissionForPreflight(@NonNull Context context, @NonNull String permission, int pid, int uid, @Nullable String packageName)",
    "returnType" : "int",
    "comment" : "\n     * Checks whether a given package in a UID and PID has a given permission\n     * and whether the app op that corresponds to this permission is allowed.\n     *\n     * <strong>NOTE:</strong> Use this method only for permission checks at the\n     * preflight point where you will not deliver the permission protected data\n     * to clients but schedule permission data delivery, apps register listeners,\n     * etc.\n     *\n     * <p>For example, if an app registers a location listener it should have the location\n     * permission but no data is actually sent to the app at the moment of registration\n     * and you should use this method to determine if the app has or may have location\n     * permission (if app has only foreground location the grant state depends on the app's\n     * fg/gb state) and this check will not leave a trace that permission protected data\n     * was delivered. When you are about to deliver the location data to a registered\n     * listener you should use {@link #checkPermissionForDataDelivery(Context, String,\n     * int, int, String, String, String)} which will evaluate the permission access based\n     * on the currentfg/bg state of the app and leave a record that the data was accessed.\n     *\n     * @param context Context for accessing resources.\n     * @param permission The permission to check.\n     * @param pid The process id for which to check.\n     * @param uid The uid for which to check.\n     * @param packageName The package name for which to check. If null the\n     *     the first package for the calling UID will be used.\n     * @return The permission check result which is either {@link #PERMISSION_GRANTED}\n     *     or {@link #PERMISSION_SOFT_DENIED} or {@link #PERMISSION_HARD_DENIED}.\n     *\n     * @see #checkPermissionForDataDelivery(Context, String, int, int, String, String, String)\n     ",
    "links" : [ "#PERMISSION_HARD_DENIED", "#PERMISSION_GRANTED", "#PERMISSION_SOFT_DENIED", "#checkPermissionForDataDelivery(Context" ]
  }, {
    "name" : "public static int checkPermissionForPreflight(@NonNull Context context, @NonNull String permission, @NonNull AttributionSource attributionSource)",
    "returnType" : "int",
    "comment" : "\n     * Checks whether a given data access chain described by the given {@link AttributionSource}\n     * has a given permission and whether the app op that corresponds to this permission\n     * is allowed.\n     *\n     * <strong>NOTE:</strong> Use this method only for permission checks at the\n     * preflight point where you will not deliver the permission protected data\n     * to clients but schedule permission data delivery, apps register listeners,\n     * etc.\n     *\n     * <p>For example, if an app registers a data listener it should have the required\n     * permission but no data is actually sent to the app at the moment of registration\n     * and you should use this method to determine if the app has or may have the\n     * permission and this check will not leave a trace that permission protected data\n     * was delivered. When you are about to deliver the protected data to a registered\n     * listener you should use {@link #checkPermissionForDataDelivery(Context, String,\n     * int, AttributionSource, String, boolean)} which will evaluate the permission access based\n     * on the current fg/bg state of the app and leave a record that the data was accessed.\n     *\n     * @param context Context for accessing resources.\n     * @param permission The permission to check.\n     * @param attributionSource The identity for which to check the permission.\n     * @return The permission check result which is either {@link #PERMISSION_GRANTED}\n     *     or {@link #PERMISSION_SOFT_DENIED} or {@link #PERMISSION_HARD_DENIED}.\n     *\n     * @see #checkPermissionForDataDelivery(Context, String, int, AttributionSource,\n     *     String, boolean)\n     ",
    "links" : [ "#PERMISSION_HARD_DENIED", "#PERMISSION_GRANTED", "android.content.AttributionSource", "#PERMISSION_SOFT_DENIED", "#checkPermissionForDataDelivery(Context" ]
  }, {
    "name" : "public static int checkSelfPermissionForDataDelivery(@NonNull Context context, @NonNull String permission, @Nullable String message)",
    "returnType" : "int",
    "comment" : "\n     * Checks whether your app has a given permission and whether the app op\n     * that corresponds to this permission is allowed.\n     *\n     * <strong>NOTE:</strong> Use this method only for permission checks at the\n     * point where you will deliver the permission protected data to clients.\n     *\n     * <p>For example, if an app registers a location listener it should have the location\n     * permission but no data is actually sent to the app at the moment of registration\n     * and you should use {@link #checkSelfPermissionForPreflight(Context, String)}\n     * to determine if the app has or may have location permission (if app has only foreground\n     * location the grant state depends on the app's fg/gb state) and this check will not\n     * leave a trace that permission protected data was delivered. When you are about to\n     * deliver the location data to a registered listener you should use this method\n     * which will evaluate the permission access based on the current fg/bg state of the\n     * app and leave a record that the data was accessed.\n     *\n     * <p>This API assumes the {@link Binder#getCallingUid()} is the same as\n     * {@link Process#myUid()}.\n     *\n     * @param context Context for accessing resources.\n     * @param permission The permission to check.\n     * @return The permission check result which is either {@link #PERMISSION_GRANTED}\n     *     or {@link #PERMISSION_SOFT_DENIED} or {@link #PERMISSION_HARD_DENIED}.\n     * @param message A message describing the reason the permission was checked\n     *\n     * @see #checkSelfPermissionForPreflight(Context, String)\n     ",
    "links" : [ "android.os.Process#myUid()", "#PERMISSION_HARD_DENIED", "#PERMISSION_GRANTED", "#checkSelfPermissionForPreflight(Context", "#PERMISSION_SOFT_DENIED", "android.os.Binder#getCallingUid()" ]
  }, {
    "name" : "public static int checkSelfPermissionForPreflight(@NonNull Context context, @NonNull String permission)",
    "returnType" : "int",
    "comment" : "\n     * Checks whether your app has a given permission and whether the app op\n     * that corresponds to this permission is allowed.\n     *\n     * <strong>NOTE:</strong> Use this method only for permission checks at the\n     * preflight point where you will not deliver the permission protected data\n     * to clients but schedule permission data delivery, apps register listeners,\n     * etc.\n     *\n     * <p>For example, if an app registers a location listener it should have the location\n     * permission but no data is actually sent to the app at the moment of registration\n     * and you should use this method to determine if the app has or may have location\n     * permission (if app has only foreground location the grant state depends on the\n     * app's fg/gb state) and this check will not leave a trace that permission protected\n     * data was delivered. When you are about to deliver the location data to a registered\n     * listener you should use this method which will evaluate the permission access based\n     * on the current fg/bg state of the app and leave a record that the data was accessed.\n     *\n     * <p>This API assumes the {@link Binder#getCallingUid()} is the same as\n     * {@link Process#myUid()}.\n     *\n     * @param context Context for accessing resources.\n     * @param permission The permission to check.\n     * @return The permission check result which is either {@link #PERMISSION_GRANTED}\n     *     or {@link #PERMISSION_SOFT_DENIED} or {@link #PERMISSION_HARD_DENIED}.\n     *\n     * @see #checkSelfPermissionForDataDelivery(Context, String, String)\n     ",
    "links" : [ "android.os.Process#myUid()", "#PERMISSION_HARD_DENIED", "#PERMISSION_GRANTED", "#PERMISSION_SOFT_DENIED", "android.os.Binder#getCallingUid()" ]
  }, {
    "name" : "public static int checkCallingPermissionForDataDelivery(@NonNull Context context, @NonNull String permission, @Nullable String callingPackageName, @Nullable String callingAttributionTag, @Nullable String message)",
    "returnType" : "int",
    "comment" : "\n     * Checks whether the IPC you are handling has a given permission and whether\n     * the app op that corresponds to this permission is allowed.\n     *\n     * <strong>NOTE:</strong> Use this method only for permission checks at the\n     * point where you will deliver the permission protected data to clients.\n     *\n     * <p>For example, if an app registers a location listener it should have the location\n     * permission but no data is actually sent to the app at the moment of registration\n     * and you should use {@link #checkCallingPermissionForPreflight(Context, String, String)}\n     * to determine if the app has or may have location permission (if app has only foreground\n     * location the grant state depends on the app's fg/gb state) and this check will not\n     * leave a trace that permission protected data was delivered. When you are about to\n     * deliver the location data to a registered listener you should use this method which\n     * will evaluate the permission access based on the current fg/bg state of the app and\n     * leave a record that the data was accessed.\n     *\n     * <p>For more details how to determine the {@code callingPackageName},\n     * {@code callingAttributionTag}, and {@code message}, please check the description in\n     * {@link AppOpsManager#noteOp(String, int, String, String, String)}\n     *\n     * @param context Context for accessing resources.\n     * @param permission The permission to check.\n     * @param callingPackageName The package name making the IPC. If null the\n     *     the first package for the calling UID will be used.\n     * @param callingAttributionTag attribution tag\n     * @return The permission check result which is either {@link #PERMISSION_GRANTED}\n     *     or {@link #PERMISSION_SOFT_DENIED} or {@link #PERMISSION_HARD_DENIED}.\n     * @param message A message describing the reason the permission was checked\n     *\n     * @see #checkCallingPermissionForPreflight(Context, String, String)\n     ",
    "links" : [ "#PERMISSION_HARD_DENIED", "#PERMISSION_GRANTED", "android.app.AppOpsManager#noteOp(String", "#PERMISSION_SOFT_DENIED", "#checkCallingPermissionForPreflight(Context" ]
  }, {
    "name" : "public static int checkCallingPermissionForPreflight(@NonNull Context context, @NonNull String permission, @Nullable String packageName)",
    "returnType" : "int",
    "comment" : "\n     * Checks whether the IPC you are handling has a given permission and whether\n     * the app op that corresponds to this permission is allowed.\n     *\n     * <strong>NOTE:</strong> Use this method only for permission checks at the\n     * preflight point where you will not deliver the permission protected data\n     * to clients but schedule permission data delivery, apps register listeners,\n     * etc.\n     *\n     * <p>For example, if an app registers a location listener it should have the location\n     * permission but no data is actually sent to the app at the moment of registration\n     * and you should use this method to determine if the app has or may have location\n     * permission (if app has only foreground location the grant state depends on the app's\n     * fg/gb state) and this check will not leave a trace that permission protected data\n     * was delivered. When you are about to deliver the location data to a registered\n     * listener you should use {@link #checkCallingOrSelfPermissionForDataDelivery(Context,\n     * String, String, String, String)} which will evaluate the permission access based on the\n     * current fg/bg stateof the app and leave a record that the data was accessed.\n     *\n     * @param context Context for accessing resources.\n     * @param permission The permission to check.\n     * @param packageName The package name making the IPC. If null the\n     *     the first package for the calling UID will be used.\n     * @return The permission check result which is either {@link #PERMISSION_GRANTED}\n     *     or {@link #PERMISSION_SOFT_DENIED} or {@link #PERMISSION_HARD_DENIED}.\n     *\n     * @see #checkCallingPermissionForDataDelivery(Context, String, String, String, String)\n     ",
    "links" : [ "#PERMISSION_HARD_DENIED", "#PERMISSION_GRANTED", "#checkCallingOrSelfPermissionForDataDelivery(Context", "#PERMISSION_SOFT_DENIED" ]
  }, {
    "name" : "public static int checkCallingOrSelfPermissionForDataDelivery(@NonNull Context context, @NonNull String permission, @Nullable String callingPackageName, @Nullable String callingAttributionTag, @Nullable String message)",
    "returnType" : "int",
    "comment" : "\n     * Checks whether the IPC you are handling or your app has a given permission\n     * and whether the app op that corresponds to this permission is allowed.\n     *\n     * <strong>NOTE:</strong> Use this method only for permission checks at the\n     * point where you will deliver the permission protected data to clients.\n     *\n     * <p>For example, if an app registers a location listener it should have the location\n     * permission but no data is actually sent to the app at the moment of registration\n     * and you should use {@link #checkCallingOrSelfPermissionForPreflight(Context, String)}\n     * to determine if the app has or may have location permission (if app has only foreground\n     * location the grant state depends on the app's fg/gb state) and this check will not\n     * leave a trace that permission protected data was delivered. When you are about to\n     * deliver the location data to a registered listener you should use this method which\n     * will evaluate the permission access based on the current fg/bg state of the app and\n     * leave a record that the data was accessed.\n     *\n     * <p>For more details how to determine the {@code callingPackageName},\n     * {@code callingAttributionTag}, and {@code message}, please check the description in\n     * {@link AppOpsManager#noteOp(String, int, String, String, String)}\n     *\n     * @param context Context for accessing resources.\n     * @param permission The permission to check.\n     * @return The permission check result which is either {@link #PERMISSION_GRANTED}\n     *     or {@link #PERMISSION_SOFT_DENIED} or {@link #PERMISSION_HARD_DENIED}.\n     * @param callingPackageName package name tag of caller (if not self)\n     * @param callingAttributionTag attribution tag of caller (if not self)\n     * @param message A message describing the reason the permission was checked\n     *\n     * @see #checkCallingOrSelfPermissionForPreflight(Context, String)\n     ",
    "links" : [ "#PERMISSION_HARD_DENIED", "#PERMISSION_GRANTED", "android.app.AppOpsManager#noteOp(String", "#PERMISSION_SOFT_DENIED", "#checkCallingOrSelfPermissionForPreflight(Context" ]
  }, {
    "name" : "public static int checkCallingOrSelfPermissionForPreflight(@NonNull Context context, @NonNull String permission)",
    "returnType" : "int",
    "comment" : "\n     * Checks whether the IPC you are handling or your app has a given permission\n     * and whether the app op that corresponds to this permission is allowed.\n     *\n     * <strong>NOTE:</strong> Use this method only for permission checks at the\n     * preflight point where you will not deliver the permission protected data\n     * to clients but schedule permission data delivery, apps register listeners,\n     * etc.\n     *\n     * <p>For example, if an app registers a location listener it should have the location\n     * permission but no data is actually sent to the app at the moment of registration\n     * and you should use this method to determine if the app has or may have location\n     * permission (if app has only foreground location the grant state depends on the\n     * app's fg/gb state) and this check will not leave a trace that permission protected\n     * data was delivered. When you are about to deliver the location data to a registered\n     * listener you should use {@link #checkCallingOrSelfPermissionForDataDelivery(Context,\n     * String, String, String, String)} which will evaluate the permission access based on the\n     * current fg/bg state of the app and leave a record that the data was accessed.\n     *\n     * @param context Context for accessing resources.\n     * @param permission The permission to check.\n     * @return The permission check result which is either {@link #PERMISSION_GRANTED}\n     *     or {@link #PERMISSION_SOFT_DENIED} or {@link #PERMISSION_HARD_DENIED}.\n     *\n     * @see #checkCallingOrSelfPermissionForDataDelivery(Context, String, String, String, String)\n     ",
    "links" : [ "#PERMISSION_HARD_DENIED", "#PERMISSION_GRANTED", "#checkCallingOrSelfPermissionForDataDelivery(Context", "#PERMISSION_SOFT_DENIED" ]
  } ],
  "methodNames" : [ "public static int checkPermissionForDataDelivery(@NonNull Context context, @NonNull String permission, int pid, int uid, @Nullable String packageName, @Nullable String attributionTag, @Nullable String message, boolean startDataDelivery)", "public static int checkPermissionForDataDelivery(@NonNull Context context, @NonNull String permission, int pid, int uid, @Nullable String packageName, @Nullable String attributionTag, @Nullable String message)", "public static int checkPermissionForDataDeliveryFromDataSource(@NonNull Context context, @NonNull String permission, int pid, @NonNull AttributionSource attributionSource, @Nullable String message)", "public static int checkPermissionForDataDelivery(@NonNull Context context, @NonNull String permission, int pid, @NonNull AttributionSource attributionSource, @Nullable String message)", "public static int checkPermissionForDataDelivery(@NonNull Context context, @NonNull String permission, int pid, @NonNull AttributionSource attributionSource, @Nullable String message, boolean startDataDelivery)", "private static int checkPermissionForDataDeliveryCommon(@NonNull Context context, @NonNull String permission, @NonNull AttributionSource attributionSource, @Nullable String message, boolean startDataDelivery, boolean fromDatasource)", "public static int checkPermissionAndStartDataDelivery(@NonNull Context context, @NonNull String permission, @NonNull AttributionSource attributionSource, @Nullable String message)", "public static int startOpForDataDelivery(@NonNull Context context, @NonNull String opName, @NonNull AttributionSource attributionSource, @Nullable String message)", "public static void finishDataDelivery(@NonNull Context context, @NonNull String op, @NonNull AttributionSource attributionSource)", "public static void finishDataDeliveryFromDatasource(@NonNull Context context, @NonNull String op, @NonNull AttributionSource attributionSource)", "public static int checkOpForPreflight(@NonNull Context context, @NonNull String opName, @NonNull AttributionSource attributionSource, @Nullable String message)", "public static int checkOpForDataDelivery(@NonNull Context context, @NonNull String opName, @NonNull AttributionSource attributionSource, @Nullable String message)", "public static int checkPermissionForPreflight(@NonNull Context context, @NonNull String permission, int pid, int uid, @Nullable String packageName)", "public static int checkPermissionForPreflight(@NonNull Context context, @NonNull String permission, @NonNull AttributionSource attributionSource)", "public static int checkSelfPermissionForDataDelivery(@NonNull Context context, @NonNull String permission, @Nullable String message)", "public static int checkSelfPermissionForPreflight(@NonNull Context context, @NonNull String permission)", "public static int checkCallingPermissionForDataDelivery(@NonNull Context context, @NonNull String permission, @Nullable String callingPackageName, @Nullable String callingAttributionTag, @Nullable String message)", "public static int checkCallingPermissionForPreflight(@NonNull Context context, @NonNull String permission, @Nullable String packageName)", "public static int checkCallingOrSelfPermissionForDataDelivery(@NonNull Context context, @NonNull String permission, @Nullable String callingPackageName, @Nullable String callingAttributionTag, @Nullable String message)", "public static int checkCallingOrSelfPermissionForPreflight(@NonNull Context context, @NonNull String permission)" ],
  "variableNames" : [ "PERMISSION_GRANTED", "PERMISSION_SOFT_DENIED", "PERMISSION_HARD_DENIED", "PID_UNKNOWN", "sService" ]
}