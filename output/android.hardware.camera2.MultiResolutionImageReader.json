{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/camera2/MultiResolutionImageReader.java",
  "packageName" : "android.hardware.camera2",
  "className" : "MultiResolutionImageReader",
  "comment" : "\n * <p>The MultiResolutionImageReader class wraps a group of {@link ImageReader ImageReaders} with\n * the same format and different sizes, source camera Id, or camera sensor modes.</p>\n *\n * <p>The main use case of this class is for a\n * {@link CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES_LOGICAL_MULTI_CAMERA logical\n * multi-camera} or an ultra high resolution sensor camera to output variable-size images. For a\n * logical multi-camera which implements optical zoom, different physical cameras may have different\n * maximum resolutions. As a result, when the camera device switches between physical cameras\n * depending on zoom ratio, the maximum resolution for a particular format may change. For an\n * ultra high resolution sensor camera, the camera device may deem it better or worse to run in\n * maximum resolution mode / default mode depending on lighting conditions. So the application may\n * choose to let the camera device decide on its behalf.</p>\n *\n * <p>MultiResolutionImageReader should be used for a camera device only if the camera device\n * supports multi-resolution output stream by advertising the specified output format in {@link\n * CameraCharacteristics#SCALER_MULTI_RESOLUTION_STREAM_CONFIGURATION_MAP}.</p>\n *\n * <p>To acquire images from the MultiResolutionImageReader, the application must use the\n * {@link ImageReader} object passed by\n * {@link ImageReader.OnImageAvailableListener#onImageAvailable} callback to call\n * {@link ImageReader#acquireNextImage} or {@link ImageReader#acquireLatestImage}. The application\n * must not use the {@link ImageReader} passed by an {@link\n * ImageReader.OnImageAvailableListener#onImageAvailable} callback to acquire future images\n * because future images may originate from a different {@link ImageReader} contained within the\n * {@code MultiResolutionImageReader}.</p>\n *\n *\n * @see ImageReader\n * @see android.hardware.camera2.CameraCharacteristics#SCALER_MULTI_RESOLUTION_STREAM_CONFIGURATION_MAP\n ",
  "links" : [ "android.media.ImageReader#acquireNextImage", "android.hardware.camera2.CameraCharacteristics#SCALER_MULTI_RESOLUTION_STREAM_CONFIGURATION_MAP", "ImageReader.OnImageAvailableListener#onImageAvailable", "android.media.ImageReader", "android.hardware.camera2.CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES_LOGICAL_MULTI_CAMERA", "android.media.ImageReader#acquireLatestImage" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mReaders",
    "type" : "ImageReader[]",
    "comment" : " mReaders and mStreamInfo has the same length, and their entries are 1:1 mapped.",
    "links" : [ ]
  }, {
    "name" : "mStreamInfo",
    "type" : "MultiResolutionStreamInfo[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFormat",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaxImages",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setOnImageAvailableListener(@Nullable ImageReader.OnImageAvailableListener listener, @Nullable @CallbackExecutor Executor executor)",
    "returnType" : "void",
    "comment" : "\n     * Set onImageAvailableListener callback.\n     *\n     * <p>This function sets the onImageAvailableListener for all the internal\n     * {@link ImageReader} objects.</p>\n     *\n     * <p>For a multi-resolution ImageReader, the timestamps of images acquired in\n     * onImageAvailable callback from different internal ImageReaders may become\n     * out-of-order due to the asynchronous callbacks between the different resolution\n     * image queues.</p>\n     *\n     * @param listener\n     *            The listener that will be run.\n     * @param executor\n     *            The executor which will be used when invoking the callback.\n     ",
    "links" : [ "android.media.ImageReader" ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void finalize()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void flush()",
    "returnType" : "void",
    "comment" : "\n     * Flush pending images from all internal ImageReaders\n     *\n     * <p>Acquire and close pending images from all internal ImageReaders. This has the same\n     * effect as calling acquireLatestImage() on all internal ImageReaders, and closing all\n     * latest images.</p>\n     ",
    "links" : [ ]
  }, {
    "name" : "public void flushOther(ImageReader reader)",
    "returnType" : "void",
    "comment" : "\n     * Flush pending images from other internal ImageReaders\n     *\n     * <p>Acquire and close pending images from all internal ImageReaders except for the\n     * one specified.</p>\n     *\n     * @param reader The ImageReader object that won't be flushed.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public ImageReader[] getReaders()",
    "returnType" : "ImageReader[]",
    "comment" : "\n     * Get the internal ImageReader objects\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Surface getSurface(@NonNull Size configuredSize, @NonNull String physicalCameraId)",
    "returnType" : "Surface",
    "comment" : "\n     * Get the internal ImageReader surface based on configured size and physical camera Id.\n     *\n     * <p>The {@code configuredSize} and {@code physicalCameraId} parameters must match one of the\n     * MultiResolutionStreamInfo used to create this {@link MultiResolutionImageReader}.</p>\n     *\n     * <p>The Surface returned from this function isn't meant to be used directly as part of a\n     * {@link CaptureRequest}. It should instead be used for creating an OutputConfiguration\n     * before session creation. See {@link OutputConfiguration#setSurfacesForMultiResolutionOutput}\n     * for details. For {@link CaptureRequest}, use {@link #getSurface()} instead.</p>\n     *\n     * <p>Please note that holding on to the Surface objects returned by this method is not enough\n     * to keep their parent MultiResolutionImageReaders from being reclaimed. In that sense, a\n     * Surface acts like a {@link java.lang.ref.WeakReference weak reference} to the\n     * MultiResolutionImageReader that provides it.</p>\n     *\n     * @param configuredSize The configured size corresponding to one of the internal ImageReader.\n     * @param physicalCameraId The physical camera Id the internal ImageReader targets for. If\n     *                         the ImageReader is not targeting a physical camera of a logical\n     *                         multi-camera, this parameter is set to \"\".\n     *\n     * @return The {@link Surface} of the internal ImageReader corresponding to the provided\n     *         configured size and physical camera Id.\n     *\n     * @throws IllegalArgumentException If {@code configuredSize} is {@code null}, or the ({@code\n     *                                  configuredSize} and {@code physicalCameraId}) combo is not\n     *                                  part of this {@code MultiResolutionImageReader}.\n     * @hide\n     ",
    "links" : [ "#getSurface()", "android.view.Surface", "android.hardware.camera2.OutputConfiguration#setSurfacesForMultiResolutionOutput", "android.hardware.camera2.MultiResolutionImageReader", "android.hardware.camera2.CaptureRequest", "java.lang.ref.WeakReference" ]
  }, {
    "name" : "public Surface getSurface()",
    "returnType" : "Surface",
    "comment" : "\n     * Get the surface that is used as a target for {@link CaptureRequest}\n     *\n     * <p>The application must use the surface returned by this function as a target for\n     * {@link CaptureRequest}. The camera device makes the decision on which internal\n     * {@code ImageReader} will receive the output image.</p>\n     *\n     * <p>Please note that holding on to the Surface objects returned by this method is not enough\n     * to keep their parent MultiResolutionImageReaders from being reclaimed. In that sense, a\n     * Surface acts like a {@link java.lang.ref.WeakReference weak reference} to the\n     * MultiResolutionImageReader that provides it.</p>\n     *\n     * @return a {@link Surface} to use as the target for a capture request.\n     ",
    "links" : [ "android.view.Surface", "android.hardware.camera2.CaptureRequest", "java.lang.ref.WeakReference" ]
  }, {
    "name" : "public MultiResolutionStreamInfo getStreamInfoForImageReader(@NonNull ImageReader reader)",
    "returnType" : "MultiResolutionStreamInfo",
    "comment" : "\n     * Get the MultiResolutionStreamInfo describing the ImageReader an image originates from\n     *\n     *<p>An image from a {@code MultiResolutionImageReader} is produced from one of the underlying\n     *{@code ImageReader}s. This function returns the {@link MultiResolutionStreamInfo} to describe\n     *the property for that {@code ImageReader}, such as width, height, and physical camera Id.</p>\n     *\n     * @param reader An internal ImageReader within {@code MultiResolutionImageReader}.\n     *\n     * @return The stream info describing the internal {@code ImageReader}.\n     ",
    "links" : [ "android.hardware.camera2.params.MultiResolutionStreamInfo" ]
  } ],
  "methodNames" : [ "public void setOnImageAvailableListener(@Nullable ImageReader.OnImageAvailableListener listener, @Nullable @CallbackExecutor Executor executor)", "public void close()", "protected void finalize()", "public void flush()", "public void flushOther(ImageReader reader)", "public ImageReader[] getReaders()", "public Surface getSurface(@NonNull Size configuredSize, @NonNull String physicalCameraId)", "public Surface getSurface()", "public MultiResolutionStreamInfo getStreamInfoForImageReader(@NonNull ImageReader reader)" ],
  "variableNames" : [ "TAG", "mReaders", "mStreamInfo", "mFormat", "mMaxImages" ]
}