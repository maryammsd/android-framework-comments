{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/util/proto/EncodedBuffer.java",
  "packageName" : "android.util.proto",
  "className" : "EncodedBuffer",
  "comment" : "\n * A stream of bytes containing a read pointer and a write pointer,\n * backed by a set of fixed-size buffers.  There are write functions for the\n * primitive types stored by protocol buffers, but none of the logic\n * for tags, inner objects, or any of that.\n *\n * Terminology:\n *      *Pos:       Position in the whole data set (as if it were a single buffer).\n *      *Index:     Position within a buffer.\n *      *BufIndex:  Index of a buffer within the mBuffers list\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBuffers",
    "type" : "ArrayList<byte[]>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mChunkSize",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBufferCount",
    "type" : "int",
    "comment" : "\n     * The number of buffers in mBuffers. Stored separately to avoid the extra\n     * function call to size() everywhere for bounds checking.\n     ",
    "links" : [ ]
  }, {
    "name" : "mWriteBuffer",
    "type" : "byte[]",
    "comment" : "\n     * The buffer we are currently writing to.\n     ",
    "links" : [ ]
  }, {
    "name" : "mWriteIndex",
    "type" : "int",
    "comment" : "\n     * The index into mWriteBuffer that we will write to next.\n     * It may point to the end of the buffer, in which case,\n     * the NEXT write will allocate a new buffer.\n     ",
    "links" : [ ]
  }, {
    "name" : "mWriteBufIndex",
    "type" : "int",
    "comment" : "\n     * The index of mWriteBuffer in mBuffers.\n     ",
    "links" : [ ]
  }, {
    "name" : "mReadBuffer",
    "type" : "byte[]",
    "comment" : "\n     * The buffer we are currently reading from.\n     ",
    "links" : [ ]
  }, {
    "name" : "mReadBufIndex",
    "type" : "int",
    "comment" : "\n     * The index of mReadBuffer in mBuffers.\n     ",
    "links" : [ ]
  }, {
    "name" : "mReadIndex",
    "type" : "int",
    "comment" : "\n     * The index into mReadBuffer that we will read from next.\n     * It may point to the end of the buffer, in which case,\n     * the NEXT read will advance to the next buffer.\n     ",
    "links" : [ ]
  }, {
    "name" : "mReadLimit",
    "type" : "int",
    "comment" : "\n     * The amount of data in the last buffer.\n     ",
    "links" : [ ]
  }, {
    "name" : "mReadableSize",
    "type" : "int",
    "comment" : "\n     * How much data there is total.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void startEditing()",
    "returnType" : "void",
    "comment" : "\n     * Rewind the read and write pointers, and record how much data was last written.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void rewindRead()",
    "returnType" : "void",
    "comment" : "\n     * Rewind the read pointer. Don't touch the write pointer.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getReadableSize()",
    "returnType" : "int",
    "comment" : "\n     * Only valid after startEditing. Returns -1 before that.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getSize()",
    "returnType" : "int",
    "comment" : "\n     * Returns the buffer size\n     * @return the buffer size\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getReadPos()",
    "returnType" : "int",
    "comment" : "\n     * Only valid after startEditing.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void skipRead(int amount)",
    "returnType" : "void",
    "comment" : "\n     * Skip over _amount_ bytes.\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte readRawByte()",
    "returnType" : "byte",
    "comment" : "\n     * Read one byte from the stream and advance the read pointer.\n     *\n     * @throws IndexOutOfBoundsException if the read point is past the end of\n     * the buffer or past the read limit previously set by startEditing().\n     ",
    "links" : [ ]
  }, {
    "name" : "public long readRawUnsigned()",
    "returnType" : "long",
    "comment" : "\n     * Read an unsigned varint. The value will be returend in a java signed long.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int readRawFixed32()",
    "returnType" : "int",
    "comment" : "\n     * Read 32 little endian bits from the stream.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void nextWriteBuffer()",
    "returnType" : "void",
    "comment" : "\n     * Advance to the next write buffer, allocating it if necessary.\n     *\n     * Must be called immediately <b>before</b> the next write, not after a write,\n     * so that a dangling empty buffer is not created.  Doing so will interfere\n     * with the expectation that mWriteIndex will point past the end of the buffer\n     * until the next read happens.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void writeRawByte(byte val)",
    "returnType" : "void",
    "comment" : "\n     * Write a single byte to the stream.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getRawVarint32Size(int val)",
    "returnType" : "int",
    "comment" : "\n     * Return how many bytes a 32 bit unsigned varint will take when written to the stream.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void writeRawVarint32(int val)",
    "returnType" : "void",
    "comment" : "\n     * Write an unsigned varint to the stream. A signed value would need to take 10 bytes.\n     *\n     * @param val treated as unsigned.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getRawZigZag32Size(int val)",
    "returnType" : "int",
    "comment" : "\n     * Return how many bytes a 32 bit signed zig zag value will take when written to the stream.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void writeRawZigZag32(int val)",
    "returnType" : "void",
    "comment" : "\n     *  Write a zig-zag encoded value.\n     *\n     *  @param val treated as signed\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getRawVarint64Size(long val)",
    "returnType" : "int",
    "comment" : "\n     * Return how many bytes a 64 bit varint will take when written to the stream.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void writeRawVarint64(long val)",
    "returnType" : "void",
    "comment" : "\n     * Write a 64 bit varint to the stream.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getRawZigZag64Size(long val)",
    "returnType" : "int",
    "comment" : "\n     * Return how many bytes a signed 64 bit zig zag value will take when written to the stream.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void writeRawZigZag64(long val)",
    "returnType" : "void",
    "comment" : "\n     * Write a 64 bit signed zig zag value to the stream.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void writeRawFixed32(int val)",
    "returnType" : "void",
    "comment" : "\n     * Write 4 little endian bytes to the stream.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void writeRawFixed64(long val)",
    "returnType" : "void",
    "comment" : "\n     * Write 8 little endian bytes to the stream.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void writeRawBuffer(byte[] val)",
    "returnType" : "void",
    "comment" : "\n     * Write a buffer to the stream. Writes nothing if val is null or zero-length.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void writeRawBuffer(byte[] val, int offset, int length)",
    "returnType" : "void",
    "comment" : "\n     * Write part of an array of bytes.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void writeFromThisBuffer(int srcOffset, int size)",
    "returnType" : "void",
    "comment" : "\n     * Copies data _size_ bytes of data within this buffer from _srcOffset_\n     * to the current write position. Like memmov but handles the chunked buffer.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getWritePos()",
    "returnType" : "int",
    "comment" : "\n     * Returns the index into the virtual array of the write pointer.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void rewindWriteTo(int writePos)",
    "returnType" : "void",
    "comment" : "\n     * Resets the write pointer to a virtual location as returned by getWritePos.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getRawFixed32At(int pos)",
    "returnType" : "int",
    "comment" : "\n     * Read a 32 bit value from the stream.\n     *\n     * Doesn't touch or affect mWritePos.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void editRawFixed32(int pos, int val)",
    "returnType" : "void",
    "comment" : "\n     * Overwrite a 32 bit value in the stream.\n     *\n     * Doesn't touch or affect mWritePos.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int zigZag32(int val)",
    "returnType" : "int",
    "comment" : "\n     * Zig-zag encode a 32 bit value.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static long zigZag64(long val)",
    "returnType" : "long",
    "comment" : "\n     * Zig-zag encode a 64 bit value.\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getBytes(int size)",
    "returnType" : "byte[]",
    "comment" : "\n     * Get a copy of the first _size_ bytes of data. This is not range\n     * checked, and if the bounds are outside what has been written you will\n     * get garbage and if it is outside the buffers that have been allocated,\n     * you will get an exception.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getChunkCount()",
    "returnType" : "int",
    "comment" : " VisibleForTesting",
    "links" : [ ]
  }, {
    "name" : "public int getWriteIndex()",
    "returnType" : "int",
    "comment" : " VisibleForTesting",
    "links" : [ ]
  }, {
    "name" : "public int getWriteBufIndex()",
    "returnType" : "int",
    "comment" : " VisibleForTesting",
    "links" : [ ]
  }, {
    "name" : "public String getDebugString()",
    "returnType" : "String",
    "comment" : "\n     * Return debugging information about this EncodedBuffer object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void dumpBuffers(String tag)",
    "returnType" : "void",
    "comment" : "\n     * Print the internal buffer chunks.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void dumpByteString(String tag, String prefix, byte[] buf)",
    "returnType" : "void",
    "comment" : "\n     * Print the internal buffer chunks.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int dumpByteString(String tag, String prefix, int start, byte[] buf)",
    "returnType" : "int",
    "comment" : "\n     * Print the internal buffer chunks.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void startEditing()", "public void rewindRead()", "public int getReadableSize()", "public int getSize()", "public int getReadPos()", "public void skipRead(int amount)", "public byte readRawByte()", "public long readRawUnsigned()", "public int readRawFixed32()", "private void nextWriteBuffer()", "public void writeRawByte(byte val)", "public static int getRawVarint32Size(int val)", "public void writeRawVarint32(int val)", "public static int getRawZigZag32Size(int val)", "public void writeRawZigZag32(int val)", "public static int getRawVarint64Size(long val)", "public void writeRawVarint64(long val)", "public static int getRawZigZag64Size(long val)", "public void writeRawZigZag64(long val)", "public void writeRawFixed32(int val)", "public void writeRawFixed64(long val)", "public void writeRawBuffer(byte[] val)", "public void writeRawBuffer(byte[] val, int offset, int length)", "public void writeFromThisBuffer(int srcOffset, int size)", "public int getWritePos()", "public void rewindWriteTo(int writePos)", "public int getRawFixed32At(int pos)", "public void editRawFixed32(int pos, int val)", "private static int zigZag32(int val)", "private static long zigZag64(long val)", "public byte[] getBytes(int size)", "public int getChunkCount()", "public int getWriteIndex()", "public int getWriteBufIndex()", "public String getDebugString()", "public void dumpBuffers(String tag)", "public static void dumpByteString(String tag, String prefix, byte[] buf)", "private static int dumpByteString(String tag, String prefix, int start, byte[] buf)" ],
  "variableNames" : [ "TAG", "mBuffers", "mChunkSize", "mBufferCount", "mWriteBuffer", "mWriteIndex", "mWriteBufIndex", "mReadBuffer", "mReadBufIndex", "mReadIndex", "mReadLimit", "mReadableSize" ]
}