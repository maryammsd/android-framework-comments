{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/net/ConnectivityManager.java",
  "packageName" : "android.net",
  "className" : "NetworkCallback",
  "comment" : "\n     * Base class for {@code NetworkRequest} callbacks. Used for notifications about network\n     * changes. Should be extended by applications wanting notifications.\n     *\n     * A {@code NetworkCallback} is registered by calling\n     * {@link #requestNetwork(NetworkRequest, NetworkCallback)},\n     * {@link #registerNetworkCallback(NetworkRequest, NetworkCallback)},\n     * or {@link #registerDefaultNetworkCallback(NetworkCallback)}. A {@code NetworkCallback} is\n     * unregistered by calling {@link #unregisterNetworkCallback(NetworkCallback)}.\n     * A {@code NetworkCallback} should be registered at most once at any time.\n     * A {@code NetworkCallback} that has been unregistered can be registered again.\n     ",
  "variables" : [ {
    "name" : "networkRequest",
    "type" : "NetworkRequest",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void onPreCheck(@NonNull Network network)",
    "returnType" : "void",
    "comment" : "\n         * Called when the framework connects to a new network to evaluate whether it satisfies this\n         * request. If evaluation succeeds, this callback may be followed by an {@link #onAvailable}\n         * callback. There is no guarantee that this new network will satisfy any requests, or that\n         * the network will stay connected for longer than the time necessary to evaluate it.\n         * <p>\n         * Most applications <b>should not</b> act on this callback, and should instead use\n         * {@link #onAvailable}. This callback is intended for use by applications that can assist\n         * the framework in properly evaluating the network &mdash; for example, an application that\n         * can automatically log in to a captive portal without user intervention.\n         *\n         * @param network The {@link Network} of the network that is being evaluated.\n         *\n         * @hide\n         ",
    "links" : [ "#onAvailable", "android.net.Network" ]
  }, {
    "name" : "public void onAvailable(@NonNull Network network, @NonNull NetworkCapabilities networkCapabilities, @NonNull LinkProperties linkProperties, boolean blocked)",
    "returnType" : "void",
    "comment" : "\n         * Called when the framework connects and has declared a new network ready for use.\n         * This callback may be called more than once if the {@link Network} that is\n         * satisfying the request changes.\n         *\n         * @param network The {@link Network} of the satisfying network.\n         * @param networkCapabilities The {@link NetworkCapabilities} of the satisfying network.\n         * @param linkProperties The {@link LinkProperties} of the satisfying network.\n         * @param blocked Whether access to the {@link Network} is blocked due to system policy.\n         * @hide\n         ",
    "links" : [ "android.net.NetworkCapabilities", "android.net.Network", "android.net.LinkProperties" ]
  }, {
    "name" : "public void onAvailable(@NonNull Network network)",
    "returnType" : "void",
    "comment" : "\n         * Called when the framework connects and has declared a new network ready for use.\n         *\n         * <p>For callbacks registered with {@link #registerNetworkCallback}, multiple networks may\n         * be available at the same time, and onAvailable will be called for each of these as they\n         * appear.\n         *\n         * <p>For callbacks registered with {@link #requestNetwork} and\n         * {@link #registerDefaultNetworkCallback}, this means the network passed as an argument\n         * is the new best network for this request and is now tracked by this callback ; this\n         * callback will no longer receive method calls about other networks that may have been\n         * passed to this method previously. The previously-best network may have disconnected, or\n         * it may still be around and the newly-best network may simply be better.\n         *\n         * <p>Starting with {@link android.os.Build.VERSION_CODES#O}, this will always immediately\n         * be followed by a call to {@link #onCapabilitiesChanged(Network, NetworkCapabilities)}\n         * then by a call to {@link #onLinkPropertiesChanged(Network, LinkProperties)}, and a call\n         * to {@link #onBlockedStatusChanged(Network, boolean)}.\n         *\n         * <p>Do NOT call {@link #getNetworkCapabilities(Network)} or\n         * {@link #getLinkProperties(Network)} or other synchronous ConnectivityManager methods in\n         * this callback as this is prone to race conditions (there is no guarantee the objects\n         * returned by these methods will be current). Instead, wait for a call to\n         * {@link #onCapabilitiesChanged(Network, NetworkCapabilities)} and\n         * {@link #onLinkPropertiesChanged(Network, LinkProperties)} whose arguments are guaranteed\n         * to be well-ordered with respect to other callbacks.\n         *\n         * @param network The {@link Network} of the satisfying network.\n         ",
    "links" : [ "android.os.Build.VERSION_CODES#O", "#onCapabilitiesChanged(Network", "#onBlockedStatusChanged(Network", "#getLinkProperties(Network)", "#registerNetworkCallback", "#registerDefaultNetworkCallback", "#requestNetwork", "#onLinkPropertiesChanged(Network", "#getNetworkCapabilities(Network)", "android.net.Network" ]
  }, {
    "name" : "public void onLosing(@NonNull Network network, int maxMsToLive)",
    "returnType" : "void",
    "comment" : "\n         * Called when the network is about to be lost, typically because there are no outstanding\n         * requests left for it. This may be paired with a {@link NetworkCallback#onAvailable} call\n         * with the new replacement network for graceful handover. This method is not guaranteed\n         * to be called before {@link NetworkCallback#onLost} is called, for example in case a\n         * network is suddenly disconnected.\n         *\n         * <p>Do NOT call {@link #getNetworkCapabilities(Network)} or\n         * {@link #getLinkProperties(Network)} or other synchronous ConnectivityManager methods in\n         * this callback as this is prone to race conditions ; calling these methods while in a\n         * callback may return an outdated or even a null object.\n         *\n         * @param network The {@link Network} that is about to be lost.\n         * @param maxMsToLive The time in milliseconds the system intends to keep the network\n         *                    connected for graceful handover; note that the network may still\n         *                    suffer a hard loss at any time.\n         ",
    "links" : [ "#onLost", "#onAvailable", "#getLinkProperties(Network)", "#getNetworkCapabilities(Network)", "android.net.Network" ]
  }, {
    "name" : "public void onLost(@NonNull Network network)",
    "returnType" : "void",
    "comment" : "\n         * Called when a network disconnects or otherwise no longer satisfies this request or\n         * callback.\n         *\n         * <p>If the callback was registered with requestNetwork() or\n         * registerDefaultNetworkCallback(), it will only be invoked against the last network\n         * returned by onAvailable() when that network is lost and no other network satisfies\n         * the criteria of the request.\n         *\n         * <p>If the callback was registered with registerNetworkCallback() it will be called for\n         * each network which no longer satisfies the criteria of the callback.\n         *\n         * <p>Do NOT call {@link #getNetworkCapabilities(Network)} or\n         * {@link #getLinkProperties(Network)} or other synchronous ConnectivityManager methods in\n         * this callback as this is prone to race conditions ; calling these methods while in a\n         * callback may return an outdated or even a null object.\n         *\n         * @param network The {@link Network} lost.\n         ",
    "links" : [ "#getLinkProperties(Network)", "#getNetworkCapabilities(Network)", "android.net.Network" ]
  }, {
    "name" : "public void onUnavailable()",
    "returnType" : "void",
    "comment" : "\n         * Called if no network is found within the timeout time specified in\n         * {@link #requestNetwork(NetworkRequest, NetworkCallback, int)} call or if the\n         * requested network request cannot be fulfilled (whether or not a timeout was\n         * specified). When this callback is invoked the associated\n         * {@link NetworkRequest} will have already been removed and released, as if\n         * {@link #unregisterNetworkCallback(NetworkCallback)} had been called.\n         ",
    "links" : [ "#unregisterNetworkCallback(NetworkCallback)", "#requestNetwork(NetworkRequest", "android.net.NetworkRequest" ]
  }, {
    "name" : "public void onCapabilitiesChanged(@NonNull Network network, @NonNull NetworkCapabilities networkCapabilities)",
    "returnType" : "void",
    "comment" : "\n         * Called when the network corresponding to this request changes capabilities but still\n         * satisfies the requested criteria.\n         *\n         * <p>Starting with {@link android.os.Build.VERSION_CODES#O} this method is guaranteed\n         * to be called immediately after {@link #onAvailable}.\n         *\n         * <p>Do NOT call {@link #getLinkProperties(Network)} or other synchronous\n         * ConnectivityManager methods in this callback as this is prone to race conditions :\n         * calling these methods while in a callback may return an outdated or even a null object.\n         *\n         * @param network The {@link Network} whose capabilities have changed.\n         * @param networkCapabilities The new {@link android.net.NetworkCapabilities} for this\n         *                            network.\n         ",
    "links" : [ "android.os.Build.VERSION_CODES#O", "#onAvailable", "#getLinkProperties(Network)", "android.net.NetworkCapabilities", "android.net.Network" ]
  }, {
    "name" : "public void onLinkPropertiesChanged(@NonNull Network network, @NonNull LinkProperties linkProperties)",
    "returnType" : "void",
    "comment" : "\n         * Called when the network corresponding to this request changes {@link LinkProperties}.\n         *\n         * <p>Starting with {@link android.os.Build.VERSION_CODES#O} this method is guaranteed\n         * to be called immediately after {@link #onAvailable}.\n         *\n         * <p>Do NOT call {@link #getNetworkCapabilities(Network)} or other synchronous\n         * ConnectivityManager methods in this callback as this is prone to race conditions :\n         * calling these methods while in a callback may return an outdated or even a null object.\n         *\n         * @param network The {@link Network} whose link properties have changed.\n         * @param linkProperties The new {@link LinkProperties} for this network.\n         ",
    "links" : [ "android.os.Build.VERSION_CODES#O", "#onAvailable", "#getNetworkCapabilities(Network)", "android.net.Network", "android.net.LinkProperties" ]
  }, {
    "name" : "public void onNetworkSuspended(@NonNull Network network)",
    "returnType" : "void",
    "comment" : "\n         * Called when the network the framework connected to for this request suspends data\n         * transmission temporarily.\n         *\n         * <p>This generally means that while the TCP connections are still live temporarily\n         * network data fails to transfer. To give a specific example, this is used on cellular\n         * networks to mask temporary outages when driving through a tunnel, etc. In general this\n         * means read operations on sockets on this network will block once the buffers are\n         * drained, and write operations will block once the buffers are full.\n         *\n         * <p>Do NOT call {@link #getNetworkCapabilities(Network)} or\n         * {@link #getLinkProperties(Network)} or other synchronous ConnectivityManager methods in\n         * this callback as this is prone to race conditions (there is no guarantee the objects\n         * returned by these methods will be current).\n         *\n         * @hide\n         ",
    "links" : [ "#getLinkProperties(Network)", "#getNetworkCapabilities(Network)" ]
  }, {
    "name" : "public void onNetworkResumed(@NonNull Network network)",
    "returnType" : "void",
    "comment" : "\n         * Called when the network the framework connected to for this request\n         * returns from a {@link NetworkInfo.State#SUSPENDED} state. This should always be\n         * preceded by a matching {@link NetworkCallback#onNetworkSuspended} call.\n\n         * <p>Do NOT call {@link #getNetworkCapabilities(Network)} or\n         * {@link #getLinkProperties(Network)} or other synchronous ConnectivityManager methods in\n         * this callback as this is prone to race conditions : calling these methods while in a\n         * callback may return an outdated or even a null object.\n         *\n         * @hide\n         ",
    "links" : [ "#onNetworkSuspended", "#getLinkProperties(Network)", "NetworkInfo.State#SUSPENDED", "#getNetworkCapabilities(Network)" ]
  }, {
    "name" : "public void onBlockedStatusChanged(@NonNull Network network, boolean blocked)",
    "returnType" : "void",
    "comment" : "\n         * Called when access to the specified network is blocked or unblocked.\n         *\n         * <p>Do NOT call {@link #getNetworkCapabilities(Network)} or\n         * {@link #getLinkProperties(Network)} or other synchronous ConnectivityManager methods in\n         * this callback as this is prone to race conditions : calling these methods while in a\n         * callback may return an outdated or even a null object.\n         *\n         * @param network The {@link Network} whose blocked status has changed.\n         * @param blocked The blocked status of this {@link Network}.\n         ",
    "links" : [ "#getLinkProperties(Network)", "#getNetworkCapabilities(Network)", "android.net.Network" ]
  } ],
  "variableNames" : [ "networkRequest" ],
  "methodNames" : [ "public void onPreCheck(@NonNull Network network)", "public void onAvailable(@NonNull Network network, @NonNull NetworkCapabilities networkCapabilities, @NonNull LinkProperties linkProperties, boolean blocked)", "public void onAvailable(@NonNull Network network)", "public void onLosing(@NonNull Network network, int maxMsToLive)", "public void onLost(@NonNull Network network)", "public void onUnavailable()", "public void onCapabilitiesChanged(@NonNull Network network, @NonNull NetworkCapabilities networkCapabilities)", "public void onLinkPropertiesChanged(@NonNull Network network, @NonNull LinkProperties linkProperties)", "public void onNetworkSuspended(@NonNull Network network)", "public void onNetworkResumed(@NonNull Network network)", "public void onBlockedStatusChanged(@NonNull Network network, boolean blocked)" ]
}