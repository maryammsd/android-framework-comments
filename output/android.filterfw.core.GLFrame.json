{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/filterfw/core/GLFrame.java",
  "packageName" : "android.filterfw.core",
  "className" : "GLFrame",
  "comment" : "\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "EXISTING_TEXTURE_BINDING",
    "type" : "int",
    "comment" : " GL-related binding types",
    "links" : [ ]
  }, {
    "name" : "EXISTING_FBO_BINDING",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NEW_TEXTURE_BINDING",
    "type" : "int",
    "comment" : " TODO: REMOVE THIS",
    "links" : [ ]
  }, {
    "name" : "NEW_FBO_BINDING",
    "type" : "int",
    "comment" : " TODO: REMOVE THIS",
    "links" : [ ]
  }, {
    "name" : "EXTERNAL_TEXTURE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "glFrameId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOwnsTexture",
    "type" : "boolean",
    "comment" : "\n     * Flag whether we own the texture or not. If we do not, we must be careful when caching or\n     * storing the frame, as the user may delete, and regenerate it.\n     ",
    "links" : [ ]
  }, {
    "name" : "mGLEnvironment",
    "type" : "GLEnvironment",
    "comment" : "\n     * Keep a reference to the GL environment, so that it does not get deallocated while there\n     * are still frames living in it.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " void init(GLEnvironment glEnv)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void initNew(boolean isExternal)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void initWithTexture(int texId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void initWithFbo(int fboId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void flushGPU(String message)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected synchronized boolean hasNativeAllocation()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected synchronized void releaseNativeAllocation()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public GLEnvironment getGLEnvironment()",
    "returnType" : "GLEnvironment",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Object getObjectValue()",
    "returnType" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setInts(int[] ints)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int[] getInts()",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setFloats(float[] floats)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public float[] getFloats()",
    "returnType" : "float[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setData(ByteBuffer buffer, int offset, int length)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ByteBuffer getData()",
    "returnType" : "ByteBuffer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setBitmap(Bitmap bitmap)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Bitmap getBitmap()",
    "returnType" : "Bitmap",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setDataFromFrame(Frame frame)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setViewport(int x, int y, int width, int height)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setViewport(Rect rect)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void generateMipMap()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setTextureParameter(int param, int value)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getTextureId()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getFboId()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void focus()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void reset(FrameFormat newFormat)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onFrameStore()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onFrameFetch()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void assertGLEnvValid()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native boolean nativeAllocate(GLEnvironment env, int width, int height)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native boolean nativeAllocateWithTexture(GLEnvironment env, int textureId, int width, int height)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native boolean nativeAllocateWithFbo(GLEnvironment env, int fboId, int width, int height)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native boolean nativeAllocateExternal(GLEnvironment env)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native boolean nativeDeallocate()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native boolean setNativeData(byte[] data, int offset, int length)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native byte[] getNativeData()",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native boolean setNativeInts(int[] ints)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native boolean setNativeFloats(float[] floats)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native int[] getNativeInts()",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native float[] getNativeFloats()",
    "returnType" : "float[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native boolean setNativeBitmap(Bitmap bitmap, int size)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native boolean getNativeBitmap(Bitmap bitmap)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native boolean setNativeViewport(int x, int y, int width, int height)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native int getNativeTextureId()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native int getNativeFboId()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native boolean generateNativeMipMap()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native boolean setNativeTextureParam(int param, int value)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native boolean nativeResetParams()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native boolean nativeCopyFromNative(NativeFrame frame)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native boolean nativeCopyFromGL(GLFrame frame)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native boolean nativeFocus()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native boolean nativeReattachTexToFbo()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native boolean nativeDetachTexFromFbo()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ " void init(GLEnvironment glEnv)", "private void initNew(boolean isExternal)", "private void initWithTexture(int texId)", "private void initWithFbo(int fboId)", " void flushGPU(String message)", "protected synchronized boolean hasNativeAllocation()", "protected synchronized void releaseNativeAllocation()", "public GLEnvironment getGLEnvironment()", "public Object getObjectValue()", "public void setInts(int[] ints)", "public int[] getInts()", "public void setFloats(float[] floats)", "public float[] getFloats()", "public void setData(ByteBuffer buffer, int offset, int length)", "public ByteBuffer getData()", "public void setBitmap(Bitmap bitmap)", "public Bitmap getBitmap()", "public void setDataFromFrame(Frame frame)", "public void setViewport(int x, int y, int width, int height)", "public void setViewport(Rect rect)", "public void generateMipMap()", "public void setTextureParameter(int param, int value)", "public int getTextureId()", "public int getFboId()", "public void focus()", "public String toString()", "protected void reset(FrameFormat newFormat)", "protected void onFrameStore()", "protected void onFrameFetch()", "private void assertGLEnvValid()", "private native boolean nativeAllocate(GLEnvironment env, int width, int height)", "private native boolean nativeAllocateWithTexture(GLEnvironment env, int textureId, int width, int height)", "private native boolean nativeAllocateWithFbo(GLEnvironment env, int fboId, int width, int height)", "private native boolean nativeAllocateExternal(GLEnvironment env)", "private native boolean nativeDeallocate()", "private native boolean setNativeData(byte[] data, int offset, int length)", "private native byte[] getNativeData()", "private native boolean setNativeInts(int[] ints)", "private native boolean setNativeFloats(float[] floats)", "private native int[] getNativeInts()", "private native float[] getNativeFloats()", "private native boolean setNativeBitmap(Bitmap bitmap, int size)", "private native boolean getNativeBitmap(Bitmap bitmap)", "private native boolean setNativeViewport(int x, int y, int width, int height)", "private native int getNativeTextureId()", "private native int getNativeFboId()", "private native boolean generateNativeMipMap()", "private native boolean setNativeTextureParam(int param, int value)", "private native boolean nativeResetParams()", "private native boolean nativeCopyFromNative(NativeFrame frame)", "private native boolean nativeCopyFromGL(GLFrame frame)", "private native boolean nativeFocus()", "private native boolean nativeReattachTexToFbo()", "private native boolean nativeDetachTexFromFbo()" ],
  "variableNames" : [ "EXISTING_TEXTURE_BINDING", "EXISTING_FBO_BINDING", "NEW_TEXTURE_BINDING", "NEW_FBO_BINDING", "EXTERNAL_TEXTURE", "glFrameId", "mOwnsTexture", "mGLEnvironment" ]
}