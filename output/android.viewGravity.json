{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/view/Gravity.java",
  "packageName" : "android.view",
  "className" : "Gravity",
  "comment" : "\n * Standard constants and tools for placing an object within a potentially\n * larger container.\n ",
  "variables" : [ {
    "name" : "NO_GRAVITY",
    "type" : "int",
    "comment" : " Constant indicating that no gravity has been set *",
    "links" : [ ]
  }, {
    "name" : "AXIS_SPECIFIED",
    "type" : "int",
    "comment" : " Raw bit indicating the gravity for an axis has been specified. ",
    "links" : [ ]
  }, {
    "name" : "AXIS_PULL_BEFORE",
    "type" : "int",
    "comment" : " Raw bit controlling how the left/top edge is placed. ",
    "links" : [ ]
  }, {
    "name" : "AXIS_PULL_AFTER",
    "type" : "int",
    "comment" : " Raw bit controlling how the right/bottom edge is placed. ",
    "links" : [ ]
  }, {
    "name" : "AXIS_CLIP",
    "type" : "int",
    "comment" : " Raw bit controlling whether the right/bottom edge is clipped to its\n     * container, based on the gravity direction being applied. ",
    "links" : [ ]
  }, {
    "name" : "AXIS_X_SHIFT",
    "type" : "int",
    "comment" : " Bits defining the horizontal axis. ",
    "links" : [ ]
  }, {
    "name" : "AXIS_Y_SHIFT",
    "type" : "int",
    "comment" : " Bits defining the vertical axis. ",
    "links" : [ ]
  }, {
    "name" : "TOP",
    "type" : "int",
    "comment" : " Push object to the top of its container, not changing its size. ",
    "links" : [ ]
  }, {
    "name" : "BOTTOM",
    "type" : "int",
    "comment" : " Push object to the bottom of its container, not changing its size. ",
    "links" : [ ]
  }, {
    "name" : "LEFT",
    "type" : "int",
    "comment" : " Push object to the left of its container, not changing its size. ",
    "links" : [ ]
  }, {
    "name" : "RIGHT",
    "type" : "int",
    "comment" : " Push object to the right of its container, not changing its size. ",
    "links" : [ ]
  }, {
    "name" : "CENTER_VERTICAL",
    "type" : "int",
    "comment" : " Place object in the vertical center of its container, not changing its\n     *  size. ",
    "links" : [ ]
  }, {
    "name" : "FILL_VERTICAL",
    "type" : "int",
    "comment" : " Grow the vertical size of the object if needed so it completely fills\n     *  its container. ",
    "links" : [ ]
  }, {
    "name" : "CENTER_HORIZONTAL",
    "type" : "int",
    "comment" : " Place object in the horizontal center of its container, not changing its\n     *  size. ",
    "links" : [ ]
  }, {
    "name" : "FILL_HORIZONTAL",
    "type" : "int",
    "comment" : " Grow the horizontal size of the object if needed so it completely fills\n     *  its container. ",
    "links" : [ ]
  }, {
    "name" : "CENTER",
    "type" : "int",
    "comment" : " Place the object in the center of its container in both the vertical\n     *  and horizontal axis, not changing its size. ",
    "links" : [ ]
  }, {
    "name" : "FILL",
    "type" : "int",
    "comment" : " Grow the horizontal and vertical size of the object if needed so it\n     *  completely fills its container. ",
    "links" : [ ]
  }, {
    "name" : "CLIP_VERTICAL",
    "type" : "int",
    "comment" : " Flag to clip the edges of the object to its container along the\n     *  vertical axis. ",
    "links" : [ ]
  }, {
    "name" : "CLIP_HORIZONTAL",
    "type" : "int",
    "comment" : " Flag to clip the edges of the object to its container along the\n     *  horizontal axis. ",
    "links" : [ ]
  }, {
    "name" : "RELATIVE_LAYOUT_DIRECTION",
    "type" : "int",
    "comment" : " Raw bit controlling whether the layout direction is relative or not (START/END instead of\n     * absolute LEFT/RIGHT).\n     ",
    "links" : [ ]
  }, {
    "name" : "HORIZONTAL_GRAVITY_MASK",
    "type" : "int",
    "comment" : "\n     * Binary mask to get the absolute horizontal gravity of a gravity.\n     ",
    "links" : [ ]
  }, {
    "name" : "VERTICAL_GRAVITY_MASK",
    "type" : "int",
    "comment" : "\n     * Binary mask to get the vertical gravity of a gravity.\n     ",
    "links" : [ ]
  }, {
    "name" : "DISPLAY_CLIP_VERTICAL",
    "type" : "int",
    "comment" : " Special constant to enable clipping to an overall display along the\n     *  vertical dimension.  This is not applied by default by\n     *  {@link #apply(int, int, int, Rect, int, int, Rect)}; you must do so\n     *  yourself by calling {@link #applyDisplay}.\n     ",
    "links" : [ "#apply", "#applyDisplay" ]
  }, {
    "name" : "DISPLAY_CLIP_HORIZONTAL",
    "type" : "int",
    "comment" : " Special constant to enable clipping to an overall display along the\n     *  horizontal dimension.  This is not applied by default by\n     *  {@link #apply(int, int, int, Rect, int, int, Rect)}; you must do so\n     *  yourself by calling {@link #applyDisplay}.\n     ",
    "links" : [ "#apply", "#applyDisplay" ]
  }, {
    "name" : "START",
    "type" : "int",
    "comment" : " Push object to x-axis position at the start of its container, not changing its size. ",
    "links" : [ ]
  }, {
    "name" : "END",
    "type" : "int",
    "comment" : " Push object to x-axis position at the end of its container, not changing its size. ",
    "links" : [ ]
  }, {
    "name" : "RELATIVE_HORIZONTAL_GRAVITY_MASK",
    "type" : "int",
    "comment" : "\n     * Binary mask for the horizontal gravity and script specific direction bit.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static void apply(int gravity, int w, int h, Rect container, Rect outRect)",
    "returnType" : "void",
    "comment" : "\n     * Apply a gravity constant to an object. This supposes that the layout direction is LTR.\n     * \n     * @param gravity The desired placement of the object, as defined by the\n     *                constants in this class.\n     * @param w The horizontal size of the object.\n     * @param h The vertical size of the object.\n     * @param container The frame of the containing space, in which the object\n     *                  will be placed.  Should be large enough to contain the\n     *                  width and height of the object.\n     * @param outRect Receives the computed frame of the object in its\n     *                container.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void apply(int gravity, int w, int h, Rect container, Rect outRect, int layoutDirection)",
    "returnType" : "void",
    "comment" : "\n     * Apply a gravity constant to an object and take care if layout direction is RTL or not.\n     *\n     * @param gravity The desired placement of the object, as defined by the\n     *                constants in this class.\n     * @param w The horizontal size of the object.\n     * @param h The vertical size of the object.\n     * @param container The frame of the containing space, in which the object\n     *                  will be placed.  Should be large enough to contain the\n     *                  width and height of the object.\n     * @param outRect Receives the computed frame of the object in its\n     *                container.\n     * @param layoutDirection The layout direction.\n     *\n     * @see View#LAYOUT_DIRECTION_LTR\n     * @see View#LAYOUT_DIRECTION_RTL\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void apply(int gravity, int w, int h, Rect container, int xAdj, int yAdj, Rect outRect)",
    "returnType" : "void",
    "comment" : "\n     * Apply a gravity constant to an object.\n     * \n     * @param gravity The desired placement of the object, as defined by the\n     *                constants in this class.\n     * @param w The horizontal size of the object.\n     * @param h The vertical size of the object.\n     * @param container The frame of the containing space, in which the object\n     *                  will be placed.  Should be large enough to contain the\n     *                  width and height of the object.\n     * @param xAdj Offset to apply to the X axis.  If gravity is LEFT this\n     *             pushes it to the right; if gravity is RIGHT it pushes it to\n     *             the left; if gravity is CENTER_HORIZONTAL it pushes it to the\n     *             right or left; otherwise it is ignored.\n     * @param yAdj Offset to apply to the Y axis.  If gravity is TOP this pushes\n     *             it down; if gravity is BOTTOM it pushes it up; if gravity is\n     *             CENTER_VERTICAL it pushes it down or up; otherwise it is\n     *             ignored.\n     * @param outRect Receives the computed frame of the object in its\n     *                container.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void apply(int gravity, int w, int h, Rect container, int xAdj, int yAdj, Rect outRect, int layoutDirection)",
    "returnType" : "void",
    "comment" : "\n     * Apply a gravity constant to an object.\n     *\n     * @param gravity The desired placement of the object, as defined by the\n     *                constants in this class.\n     * @param w The horizontal size of the object.\n     * @param h The vertical size of the object.\n     * @param container The frame of the containing space, in which the object\n     *                  will be placed.  Should be large enough to contain the\n     *                  width and height of the object.\n     * @param xAdj Offset to apply to the X axis.  If gravity is LEFT this\n     *             pushes it to the right; if gravity is RIGHT it pushes it to\n     *             the left; if gravity is CENTER_HORIZONTAL it pushes it to the\n     *             right or left; otherwise it is ignored.\n     * @param yAdj Offset to apply to the Y axis.  If gravity is TOP this pushes\n     *             it down; if gravity is BOTTOM it pushes it up; if gravity is\n     *             CENTER_VERTICAL it pushes it down or up; otherwise it is\n     *             ignored.\n     * @param outRect Receives the computed frame of the object in its\n     *                container.\n     * @param layoutDirection The layout direction.\n     *\n     * @see View#LAYOUT_DIRECTION_LTR\n     * @see View#LAYOUT_DIRECTION_RTL\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void applyDisplay(int gravity, Rect display, Rect inoutObj)",
    "returnType" : "void",
    "comment" : "\n     * Apply additional gravity behavior based on the overall \"display\" that an\n     * object exists in.  This can be used after\n     * {@link #apply(int, int, int, Rect, int, int, Rect)} to place the object\n     * within a visible display.  By default this moves or clips the object\n     * to be visible in the display; the gravity flags\n     * {@link #DISPLAY_CLIP_HORIZONTAL} and {@link #DISPLAY_CLIP_VERTICAL}\n     * can be used to change this behavior.\n     * \n     * @param gravity Gravity constants to modify the placement within the\n     * display.\n     * @param display The rectangle of the display in which the object is\n     * being placed.\n     * @param inoutObj Supplies the current object position; returns with it\n     * modified if needed to fit in the display.\n     ",
    "links" : [ "#apply", "#DISPLAY_CLIP_HORIZONTAL", "#DISPLAY_CLIP_VERTICAL" ]
  }, {
    "name" : "public static void applyDisplay(int gravity, Rect display, Rect inoutObj, int layoutDirection)",
    "returnType" : "void",
    "comment" : "\n     * Apply additional gravity behavior based on the overall \"display\" that an\n     * object exists in.  This can be used after\n     * {@link #apply(int, int, int, Rect, int, int, Rect)} to place the object\n     * within a visible display.  By default this moves or clips the object\n     * to be visible in the display; the gravity flags\n     * {@link #DISPLAY_CLIP_HORIZONTAL} and {@link #DISPLAY_CLIP_VERTICAL}\n     * can be used to change this behavior.\n     *\n     * @param gravity Gravity constants to modify the placement within the\n     * display.\n     * @param display The rectangle of the display in which the object is\n     * being placed.\n     * @param inoutObj Supplies the current object position; returns with it\n     * modified if needed to fit in the display.\n     * @param layoutDirection The layout direction.\n     *\n     * @see View#LAYOUT_DIRECTION_LTR\n     * @see View#LAYOUT_DIRECTION_RTL\n     ",
    "links" : [ "#apply", "#DISPLAY_CLIP_HORIZONTAL", "#DISPLAY_CLIP_VERTICAL" ]
  }, {
    "name" : "public static boolean isVertical(int gravity)",
    "returnType" : "boolean",
    "comment" : "\n     * <p>Indicate whether the supplied gravity has a vertical pull.</p>\n     *\n     * @param gravity the gravity to check for vertical pull\n     * @return true if the supplied gravity has a vertical pull\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isHorizontal(int gravity)",
    "returnType" : "boolean",
    "comment" : "\n     * <p>Indicate whether the supplied gravity has an horizontal pull.</p>\n     *\n     * @param gravity the gravity to check for horizontal pull\n     * @return true if the supplied gravity has an horizontal pull\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getAbsoluteGravity(int gravity, int layoutDirection)",
    "returnType" : "int",
    "comment" : "\n     * <p>Convert script specific gravity to absolute horizontal value.</p>\n     *\n     * if horizontal direction is LTR, then START will set LEFT and END will set RIGHT.\n     * if horizontal direction is RTL, then START will set RIGHT and END will set LEFT.\n     *\n     *\n     * @param gravity The gravity to convert to absolute (horizontal) values.\n     * @param layoutDirection The layout direction.\n     * @return gravity converted to absolute (horizontal) values.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String toString(int gravity)",
    "returnType" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "NO_GRAVITY", "AXIS_SPECIFIED", "AXIS_PULL_BEFORE", "AXIS_PULL_AFTER", "AXIS_CLIP", "AXIS_X_SHIFT", "AXIS_Y_SHIFT", "TOP", "BOTTOM", "LEFT", "RIGHT", "CENTER_VERTICAL", "FILL_VERTICAL", "CENTER_HORIZONTAL", "FILL_HORIZONTAL", "CENTER", "FILL", "CLIP_VERTICAL", "CLIP_HORIZONTAL", "RELATIVE_LAYOUT_DIRECTION", "HORIZONTAL_GRAVITY_MASK", "VERTICAL_GRAVITY_MASK", "DISPLAY_CLIP_VERTICAL", "DISPLAY_CLIP_HORIZONTAL", "START", "END", "RELATIVE_HORIZONTAL_GRAVITY_MASK" ],
  "methodNames" : [ "public static void apply(int gravity, int w, int h, Rect container, Rect outRect)", "public static void apply(int gravity, int w, int h, Rect container, Rect outRect, int layoutDirection)", "public static void apply(int gravity, int w, int h, Rect container, int xAdj, int yAdj, Rect outRect)", "public static void apply(int gravity, int w, int h, Rect container, int xAdj, int yAdj, Rect outRect, int layoutDirection)", "public static void applyDisplay(int gravity, Rect display, Rect inoutObj)", "public static void applyDisplay(int gravity, Rect display, Rect inoutObj, int layoutDirection)", "public static boolean isVertical(int gravity)", "public static boolean isHorizontal(int gravity)", "public static int getAbsoluteGravity(int gravity, int layoutDirection)", "public static String toString(int gravity)" ]
}