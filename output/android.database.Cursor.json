{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/database/Cursor.java",
  "packageName" : "android.database",
  "className" : "Cursor",
  "comment" : "\n * This interface provides random read-write access to the result set returned\n * by a database query.\n * <p>\n * Cursor implementations are not required to be synchronized so code using a Cursor from multiple\n * threads should perform its own synchronization when using the Cursor.\n * </p><p>\n * Implementations should subclass {@link AbstractCursor}.\n * </p>\n ",
  "links" : [ "android.database.AbstractCursor" ],
  "variables" : [ {
    "name" : "FIELD_TYPE_NULL",
    "type" : "int",
    "comment" : " Value returned by {@link #getType(int)} if the specified column is null ",
    "links" : [ "#getType(int)" ]
  }, {
    "name" : "FIELD_TYPE_INTEGER",
    "type" : "int",
    "comment" : " Value returned by {@link #getType(int)} if the specified  column type is integer ",
    "links" : [ "#getType(int)" ]
  }, {
    "name" : "FIELD_TYPE_FLOAT",
    "type" : "int",
    "comment" : " Value returned by {@link #getType(int)} if the specified column type is float ",
    "links" : [ "#getType(int)" ]
  }, {
    "name" : "FIELD_TYPE_STRING",
    "type" : "int",
    "comment" : " Value returned by {@link #getType(int)} if the specified column type is string ",
    "links" : [ "#getType(int)" ]
  }, {
    "name" : "FIELD_TYPE_BLOB",
    "type" : "int",
    "comment" : " Value returned by {@link #getType(int)} if the specified column type is blob ",
    "links" : [ "#getType(int)" ]
  } ],
  "methods" : [ {
    "name" : " int getCount()",
    "returnType" : "int",
    "comment" : "\n     * Returns the numbers of rows in the cursor.\n     *\n     * @return the number of rows in the cursor.\n     ",
    "links" : [ ]
  }, {
    "name" : " int getPosition()",
    "returnType" : "int",
    "comment" : "\n     * Returns the current position of the cursor in the row set.\n     * The value is zero-based. When the row set is first returned the cursor\n     * will be at positon -1, which is before the first row. After the\n     * last row is returned another call to next() will leave the cursor past\n     * the last entry, at a position of count().\n     *\n     * @return the current cursor position.\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean move(int offset)",
    "returnType" : "boolean",
    "comment" : "\n     * Move the cursor by a relative amount, forward or backward, from the\n     * current position. Positive offsets move forwards, negative offsets move\n     * backwards. If the final position is outside of the bounds of the result\n     * set then the resultant position will be pinned to -1 or count() depending\n     * on whether the value is off the front or end of the set, respectively.\n     *\n     * <p>This method will return true if the requested destination was\n     * reachable, otherwise, it returns false. For example, if the cursor is at\n     * currently on the second entry in the result set and move(-5) is called,\n     * the position will be pinned at -1, and false will be returned.\n     *\n     * @param offset the offset to be applied from the current position.\n     * @return whether the requested move fully succeeded.\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean moveToPosition(@IntRange(from = -1) int position)",
    "returnType" : "boolean",
    "comment" : "\n     * Move the cursor to an absolute position. The valid\n     * range of values is -1 &lt;= position &lt;= count.\n     *\n     * <p>This method will return true if the request destination was reachable, \n     * otherwise, it returns false.\n     *\n     * @param position the zero-based position to move to.\n     * @return whether the requested move fully succeeded.\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean moveToFirst()",
    "returnType" : "boolean",
    "comment" : "\n     * Move the cursor to the first row.\n     *\n     * <p>This method will return false if the cursor is empty.\n     *\n     * @return whether the move succeeded.\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean moveToLast()",
    "returnType" : "boolean",
    "comment" : "\n     * Move the cursor to the last row.\n     *\n     * <p>This method will return false if the cursor is empty.\n     *\n     * @return whether the move succeeded.\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean moveToNext()",
    "returnType" : "boolean",
    "comment" : "\n     * Move the cursor to the next row.\n     *\n     * <p>This method will return false if the cursor is already past the\n     * last entry in the result set.\n     *\n     * @return whether the move succeeded.\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean moveToPrevious()",
    "returnType" : "boolean",
    "comment" : "\n     * Move the cursor to the previous row.\n     *\n     * <p>This method will return false if the cursor is already before the\n     * first entry in the result set.\n     *\n     * @return whether the move succeeded.\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean isFirst()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the cursor is pointing to the first row.\n     *\n     * @return whether the cursor is pointing at the first entry.\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean isLast()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the cursor is pointing to the last row.\n     *\n     * @return whether the cursor is pointing at the last entry.\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean isBeforeFirst()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the cursor is pointing to the position before the first\n     * row.\n     *\n     * @return whether the cursor is before the first result.\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean isAfterLast()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the cursor is pointing to the position after the last\n     * row.\n     *\n     * @return whether the cursor is after the last result.\n     ",
    "links" : [ ]
  }, {
    "name" : " int getColumnIndex(String columnName)",
    "returnType" : "int",
    "comment" : "\n     * Returns the zero-based index for the given column name, or -1 if the column doesn't exist.\n     * If you expect the column to exist use {@link #getColumnIndexOrThrow(String)} instead, which\n     * will make the error more clear.\n     *\n     * @param columnName the name of the target column.\n     * @return the zero-based column index for the given column name, or -1 if\n     * the column name does not exist.\n     * @see #getColumnIndexOrThrow(String)\n     ",
    "links" : [ "#getColumnIndexOrThrow(String)" ]
  }, {
    "name" : " int getColumnIndexOrThrow(String columnName) throws IllegalArgumentException",
    "returnType" : "int",
    "comment" : "\n     * Returns the zero-based index for the given column name, or throws\n     * {@link IllegalArgumentException} if the column doesn't exist. If you're not sure if\n     * a column will exist or not use {@link #getColumnIndex(String)} and check for -1, which\n     * is more efficient than catching the exceptions.\n     *\n     * @param columnName the name of the target column.\n     * @return the zero-based column index for the given column name\n     * @see #getColumnIndex(String)\n     * @throws IllegalArgumentException if the column does not exist\n     ",
    "links" : [ "#getColumnIndex(String)", "IllegalArgumentException" ]
  }, {
    "name" : " String getColumnName(@IntRange(from = 0) int columnIndex)",
    "returnType" : "String",
    "comment" : "\n     * Returns the column name at the given zero-based column index.\n     *\n     * @param columnIndex the zero-based index of the target column.\n     * @return the column name for the given column index.\n     ",
    "links" : [ ]
  }, {
    "name" : " String[] getColumnNames()",
    "returnType" : "String[]",
    "comment" : "\n     * Returns a string array holding the names of all of the columns in the\n     * result set in the order in which they were listed in the result.\n     *\n     * @return the names of the columns returned in this query.\n     ",
    "links" : [ ]
  }, {
    "name" : " int getColumnCount()",
    "returnType" : "int",
    "comment" : "\n     * Return total number of columns\n     * @return number of columns \n     ",
    "links" : [ ]
  }, {
    "name" : " byte[] getBlob(@IntRange(from = 0) int columnIndex)",
    "returnType" : "byte[]",
    "comment" : "\n     * Returns the value of the requested column as a byte array.\n     *\n     * <p>The result and whether this method throws an exception when the\n     * column value is null or the column type is not a blob type is\n     * implementation-defined.\n     *\n     * @param columnIndex the zero-based index of the target column.\n     * @return the value of that column as a byte array.\n     ",
    "links" : [ ]
  }, {
    "name" : " String getString(@IntRange(from = 0) int columnIndex)",
    "returnType" : "String",
    "comment" : "\n     * Returns the value of the requested column as a String.\n     *\n     * <p>The result and whether this method throws an exception when the\n     * column value is null or the column type is not a string type is\n     * implementation-defined.\n     *\n     * @param columnIndex the zero-based index of the target column.\n     * @return the value of that column as a String.\n     ",
    "links" : [ ]
  }, {
    "name" : " void copyStringToBuffer(@IntRange(from = 0) int columnIndex, CharArrayBuffer buffer)",
    "returnType" : "void",
    "comment" : "\n     * Retrieves the requested column text and stores it in the buffer provided.\n     * If the buffer size is not sufficient, a new char buffer will be allocated \n     * and assigned to CharArrayBuffer.data\n     * @param columnIndex the zero-based index of the target column.\n     *        if the target column is null, return buffer\n     * @param buffer the buffer to copy the text into. \n     ",
    "links" : [ ]
  }, {
    "name" : " short getShort(@IntRange(from = 0) int columnIndex)",
    "returnType" : "short",
    "comment" : "\n     * Returns the value of the requested column as a short.\n     *\n     * <p>The result and whether this method throws an exception when the\n     * column value is null, the column type is not an integral type, or the\n     * integer value is outside the range [<code>Short.MIN_VALUE</code>,\n     * <code>Short.MAX_VALUE</code>] is implementation-defined.\n     *\n     * @param columnIndex the zero-based index of the target column.\n     * @return the value of that column as a short.\n     ",
    "links" : [ ]
  }, {
    "name" : " int getInt(@IntRange(from = 0) int columnIndex)",
    "returnType" : "int",
    "comment" : "\n     * Returns the value of the requested column as an int.\n     *\n     * <p>The result and whether this method throws an exception when the\n     * column value is null, the column type is not an integral type, or the\n     * integer value is outside the range [<code>Integer.MIN_VALUE</code>,\n     * <code>Integer.MAX_VALUE</code>] is implementation-defined.\n     *\n     * @param columnIndex the zero-based index of the target column.\n     * @return the value of that column as an int.\n     ",
    "links" : [ ]
  }, {
    "name" : " long getLong(@IntRange(from = 0) int columnIndex)",
    "returnType" : "long",
    "comment" : "\n     * Returns the value of the requested column as a long.\n     *\n     * <p>The result and whether this method throws an exception when the\n     * column value is null, the column type is not an integral type, or the\n     * integer value is outside the range [<code>Long.MIN_VALUE</code>,\n     * <code>Long.MAX_VALUE</code>] is implementation-defined.\n     *\n     * @param columnIndex the zero-based index of the target column.\n     * @return the value of that column as a long.\n     ",
    "links" : [ ]
  }, {
    "name" : " float getFloat(@IntRange(from = 0) int columnIndex)",
    "returnType" : "float",
    "comment" : "\n     * Returns the value of the requested column as a float.\n     *\n     * <p>The result and whether this method throws an exception when the\n     * column value is null, the column type is not a floating-point type, or the\n     * floating-point value is not representable as a <code>float</code> value is\n     * implementation-defined.\n     *\n     * @param columnIndex the zero-based index of the target column.\n     * @return the value of that column as a float.\n     ",
    "links" : [ ]
  }, {
    "name" : " double getDouble(@IntRange(from = 0) int columnIndex)",
    "returnType" : "double",
    "comment" : "\n     * Returns the value of the requested column as a double.\n     *\n     * <p>The result and whether this method throws an exception when the\n     * column value is null, the column type is not a floating-point type, or the\n     * floating-point value is not representable as a <code>double</code> value is\n     * implementation-defined.\n     *\n     * @param columnIndex the zero-based index of the target column.\n     * @return the value of that column as a double.\n     ",
    "links" : [ ]
  }, {
    "name" : " int getType(@IntRange(from = 0) int columnIndex)",
    "returnType" : "int",
    "comment" : "\n     * Returns data type of the given column's value.\n     * The preferred type of the column is returned but the data may be converted to other types\n     * as documented in the get-type methods such as {@link #getInt(int)}, {@link #getFloat(int)}\n     * etc.\n     *\n     * @param columnIndex the zero-based index of the target column.\n     * @return column value type\n     ",
    "links" : [ "#getFloat(int)", "#getInt(int)" ]
  }, {
    "name" : " boolean isNull(@IntRange(from = 0) int columnIndex)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns <code>true</code> if the value in the indicated column is null.\n     *\n     * @param columnIndex the zero-based index of the target column.\n     * @return whether the column value is null.\n     ",
    "links" : [ ]
  }, {
    "name" : " void deactivate()",
    "returnType" : "void",
    "comment" : "\n     * Deactivates the Cursor, making all calls on it fail until {@link #requery} is called.\n     * Inactive Cursors use fewer resources than active Cursors.\n     * Calling {@link #requery} will make the cursor active again.\n     * @deprecated Since {@link #requery()} is deprecated, so too is this.\n     ",
    "links" : [ "#requery()", "#requery" ]
  }, {
    "name" : " boolean requery()",
    "returnType" : "boolean",
    "comment" : "\n     * Performs the query that created the cursor again, refreshing its \n     * contents. This may be done at any time, including after a call to {@link\n     * #deactivate}.\n     *\n     * Since this method could execute a query on the database and potentially take\n     * a while, it could cause ANR if it is called on Main (UI) thread.\n     * A warning is printed if this method is being executed on Main thread.\n     *\n     * @return true if the requery succeeded, false if not, in which case the\n     *         cursor becomes invalid.\n     * @deprecated Don't use this. Just request a new cursor, so you can do this\n     * asynchronously and update your list view once the new cursor comes back.\n     ",
    "links" : [ "#deactivate" ]
  }, {
    "name" : " void close()",
    "returnType" : "void",
    "comment" : "\n     * Closes the Cursor, releasing all of its resources and making it completely invalid.\n     * Unlike {@link #deactivate()} a call to {@link #requery()} will not make the Cursor valid\n     * again.\n     ",
    "links" : [ "#requery()", "#deactivate()" ]
  }, {
    "name" : " boolean isClosed()",
    "returnType" : "boolean",
    "comment" : "\n     * return true if the cursor is closed\n     * @return true if the cursor is closed.\n     ",
    "links" : [ ]
  }, {
    "name" : " void registerContentObserver(ContentObserver observer)",
    "returnType" : "void",
    "comment" : "\n     * Register an observer that is called when changes happen to the content backing this cursor.\n     * Typically the data set won't change until {@link #requery()} is called.\n     *\n     * @param observer the object that gets notified when the content backing the cursor changes.\n     * @see #unregisterContentObserver(ContentObserver)\n     ",
    "links" : [ "#requery()" ]
  }, {
    "name" : " void unregisterContentObserver(ContentObserver observer)",
    "returnType" : "void",
    "comment" : "\n     * Unregister an observer that has previously been registered with this\n     * cursor via {@link #registerContentObserver}.\n     *\n     * @param observer the object to unregister.\n     * @see #registerContentObserver(ContentObserver)\n     ",
    "links" : [ "#registerContentObserver" ]
  }, {
    "name" : " void registerDataSetObserver(DataSetObserver observer)",
    "returnType" : "void",
    "comment" : "\n     * Register an observer that is called when changes happen to the contents\n     * of the this cursors data set, for example, when the data set is changed via\n     * {@link #requery()}, {@link #deactivate()}, or {@link #close()}.\n     *\n     * @param observer the object that gets notified when the cursors data set changes.\n     * @see #unregisterDataSetObserver(DataSetObserver)\n     ",
    "links" : [ "#requery()", "#close()", "#deactivate()" ]
  }, {
    "name" : " void unregisterDataSetObserver(DataSetObserver observer)",
    "returnType" : "void",
    "comment" : "\n     * Unregister an observer that has previously been registered with this\n     * cursor via {@link #registerContentObserver}.\n     *\n     * @param observer the object to unregister.\n     * @see #registerDataSetObserver(DataSetObserver)\n     ",
    "links" : [ "#registerContentObserver" ]
  }, {
    "name" : " void setNotificationUri(ContentResolver cr, Uri uri)",
    "returnType" : "void",
    "comment" : "\n     * Register to watch a content URI for changes. This can be the URI of a specific data row (for \n     * example, \"content://my_provider_type/23\"), or a a generic URI for a content type.\n     *\n     * <p>Calling this overrides any previous call to\n     * {@link #setNotificationUris(ContentResolver, List)}.\n     *\n     * @param cr The content resolver from the caller's context. The listener attached to \n     * this resolver will be notified.\n     * @param uri The content URI to watch.\n     ",
    "links" : [ "#setNotificationUris(ContentResolver" ]
  }, {
    "name" : " void setNotificationUris(@NonNull ContentResolver cr, @NonNull List<Uri> uris)",
    "returnType" : "void",
    "comment" : "\n     * Similar to {@link #setNotificationUri(ContentResolver, Uri)}, except this version allows\n     * to watch multiple content URIs for changes.\n     *\n     * <p>If this is not implemented, this is equivalent to calling\n     * {@link #setNotificationUri(ContentResolver, Uri)} with the first URI in {@code uris}.\n     *\n     * <p>Calling this overrides any previous call to\n     * {@link #setNotificationUri(ContentResolver, Uri)}.\n     *\n     * @param cr The content resolver from the caller's context. The listener attached to\n     * this resolver will be notified.\n     * @param uris The content URIs to watch.\n     ",
    "links" : [ "#setNotificationUri(ContentResolver" ]
  }, {
    "name" : " Uri getNotificationUri()",
    "returnType" : "Uri",
    "comment" : "\n     * Return the URI at which notifications of changes in this Cursor's data\n     * will be delivered, as previously set by {@link #setNotificationUri}.\n     * @return Returns a URI that can be used with\n     * {@link ContentResolver#registerContentObserver(android.net.Uri, boolean, ContentObserver)\n     * ContentResolver.registerContentObserver} to find out about changes to this Cursor's\n     * data.  May be null if no notification URI has been set.\n     ",
    "links" : [ "android.content.ContentResolver#registerContentObserver(android.net.Uri", "#setNotificationUri" ]
  }, {
    "name" : " List<Uri> getNotificationUris()",
    "returnType" : "List<Uri>",
    "comment" : "\n     * Return the URIs at which notifications of changes in this Cursor's data\n     * will be delivered, as previously set by {@link #setNotificationUris}.\n     *\n     * <p>If this is not implemented, this is equivalent to calling {@link #getNotificationUri()}.\n     *\n     * @return Returns URIs that can be used with\n     * {@link ContentResolver#registerContentObserver(android.net.Uri, boolean, ContentObserver)\n     * ContentResolver.registerContentObserver} to find out about changes to this Cursor's\n     * data. May be null if no notification URI has been set.\n     ",
    "links" : [ "#getNotificationUri()", "#setNotificationUris", "android.content.ContentResolver#registerContentObserver(android.net.Uri" ]
  }, {
    "name" : " boolean getWantsAllOnMoveCalls()",
    "returnType" : "boolean",
    "comment" : "\n     * onMove() will only be called across processes if this method returns true.\n     * @return whether all cursor movement should result in a call to onMove().\n     ",
    "links" : [ ]
  }, {
    "name" : " void setExtras(Bundle extras)",
    "returnType" : "void",
    "comment" : "\n     * Sets a {@link Bundle} that will be returned by {@link #getExtras()}.\n     *\n     * @param extras {@link Bundle} to set, or null to set an empty bundle.\n     ",
    "links" : [ "android.os.Bundle", "#getExtras()" ]
  }, {
    "name" : " Bundle getExtras()",
    "returnType" : "Bundle",
    "comment" : "\n     * Returns a bundle of extra values. This is an optional way for cursors to provide out-of-band\n     * metadata to their users. One use of this is for reporting on the progress of network requests\n     * that are required to fetch data for the cursor.\n     *\n     * <p>These values may only change when requery is called.\n     * @return cursor-defined values, or {@link android.os.Bundle#EMPTY Bundle.EMPTY} if there\n     *         are no values. Never <code>null</code>.\n     ",
    "links" : [ "android.os.Bundle#EMPTY" ]
  }, {
    "name" : " Bundle respond(Bundle extras)",
    "returnType" : "Bundle",
    "comment" : "\n     * This is an out-of-band way for the user of a cursor to communicate with the cursor. The\n     * structure of each bundle is entirely defined by the cursor.\n     *\n     * <p>One use of this is to tell a cursor that it should retry its network request after it\n     * reported an error.\n     * @param extras extra values, or {@link android.os.Bundle#EMPTY Bundle.EMPTY}.\n     *         Never <code>null</code>.\n     * @return extra values, or {@link android.os.Bundle#EMPTY Bundle.EMPTY}.\n     *         Never <code>null</code>.\n     ",
    "links" : [ "android.os.Bundle#EMPTY" ]
  } ],
  "methodNames" : [ " int getCount()", " int getPosition()", " boolean move(int offset)", " boolean moveToPosition(@IntRange(from = -1) int position)", " boolean moveToFirst()", " boolean moveToLast()", " boolean moveToNext()", " boolean moveToPrevious()", " boolean isFirst()", " boolean isLast()", " boolean isBeforeFirst()", " boolean isAfterLast()", " int getColumnIndex(String columnName)", " int getColumnIndexOrThrow(String columnName) throws IllegalArgumentException", " String getColumnName(@IntRange(from = 0) int columnIndex)", " String[] getColumnNames()", " int getColumnCount()", " byte[] getBlob(@IntRange(from = 0) int columnIndex)", " String getString(@IntRange(from = 0) int columnIndex)", " void copyStringToBuffer(@IntRange(from = 0) int columnIndex, CharArrayBuffer buffer)", " short getShort(@IntRange(from = 0) int columnIndex)", " int getInt(@IntRange(from = 0) int columnIndex)", " long getLong(@IntRange(from = 0) int columnIndex)", " float getFloat(@IntRange(from = 0) int columnIndex)", " double getDouble(@IntRange(from = 0) int columnIndex)", " int getType(@IntRange(from = 0) int columnIndex)", " boolean isNull(@IntRange(from = 0) int columnIndex)", " void deactivate()", " boolean requery()", " void close()", " boolean isClosed()", " void registerContentObserver(ContentObserver observer)", " void unregisterContentObserver(ContentObserver observer)", " void registerDataSetObserver(DataSetObserver observer)", " void unregisterDataSetObserver(DataSetObserver observer)", " void setNotificationUri(ContentResolver cr, Uri uri)", " void setNotificationUris(@NonNull ContentResolver cr, @NonNull List<Uri> uris)", " Uri getNotificationUri()", " List<Uri> getNotificationUris()", " boolean getWantsAllOnMoveCalls()", " void setExtras(Bundle extras)", " Bundle getExtras()", " Bundle respond(Bundle extras)" ],
  "variableNames" : [ "FIELD_TYPE_NULL", "FIELD_TYPE_INTEGER", "FIELD_TYPE_FLOAT", "FIELD_TYPE_STRING", "FIELD_TYPE_BLOB" ]
}