{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/content/SharedPreferences.java",
  "packageName" : "android.content",
  "className" : "Editor",
  "comment" : "\n     * Interface used for modifying values in a {@link SharedPreferences}\n     * object.  All changes you make in an editor are batched, and not copied\n     * back to the original {@link SharedPreferences} until you call {@link #commit}\n     * or {@link #apply}\n     ",
  "links" : [ "#commit", "android.content.SharedPreferences", "#apply" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " Editor putString(String key, @Nullable String value)",
    "returnType" : "Editor",
    "comment" : "\n         * Set a String value in the preferences editor, to be written back once\n         * {@link #commit} or {@link #apply} are called.\n         * \n         * @param key The name of the preference to modify.\n         * @param value The new value for the preference.  Passing {@code null}\n         *    for this argument is equivalent to calling {@link #remove(String)} with\n         *    this key.\n         * \n         * @return Returns a reference to the same Editor object, so you can\n         * chain put calls together.\n         ",
    "links" : [ "#commit", "#apply", "#remove(String)" ]
  }, {
    "name" : " Editor putStringSet(String key, @Nullable Set<String> values)",
    "returnType" : "Editor",
    "comment" : "\n         * Set a set of String values in the preferences editor, to be written\n         * back once {@link #commit} or {@link #apply} is called.\n         * \n         * @param key The name of the preference to modify.\n         * @param values The set of new values for the preference.  Passing {@code null}\n         *    for this argument is equivalent to calling {@link #remove(String)} with\n         *    this key.\n         * @return Returns a reference to the same Editor object, so you can\n         * chain put calls together.\n         ",
    "links" : [ "#commit", "#apply", "#remove(String)" ]
  }, {
    "name" : " Editor putInt(String key, int value)",
    "returnType" : "Editor",
    "comment" : "\n         * Set an int value in the preferences editor, to be written back once\n         * {@link #commit} or {@link #apply} are called.\n         * \n         * @param key The name of the preference to modify.\n         * @param value The new value for the preference.\n         * \n         * @return Returns a reference to the same Editor object, so you can\n         * chain put calls together.\n         ",
    "links" : [ "#commit", "#apply" ]
  }, {
    "name" : " Editor putLong(String key, long value)",
    "returnType" : "Editor",
    "comment" : "\n         * Set a long value in the preferences editor, to be written back once\n         * {@link #commit} or {@link #apply} are called.\n         * \n         * @param key The name of the preference to modify.\n         * @param value The new value for the preference.\n         * \n         * @return Returns a reference to the same Editor object, so you can\n         * chain put calls together.\n         ",
    "links" : [ "#commit", "#apply" ]
  }, {
    "name" : " Editor putFloat(String key, float value)",
    "returnType" : "Editor",
    "comment" : "\n         * Set a float value in the preferences editor, to be written back once\n         * {@link #commit} or {@link #apply} are called.\n         * \n         * @param key The name of the preference to modify.\n         * @param value The new value for the preference.\n         * \n         * @return Returns a reference to the same Editor object, so you can\n         * chain put calls together.\n         ",
    "links" : [ "#commit", "#apply" ]
  }, {
    "name" : " Editor putBoolean(String key, boolean value)",
    "returnType" : "Editor",
    "comment" : "\n         * Set a boolean value in the preferences editor, to be written back\n         * once {@link #commit} or {@link #apply} are called.\n         * \n         * @param key The name of the preference to modify.\n         * @param value The new value for the preference.\n         * \n         * @return Returns a reference to the same Editor object, so you can\n         * chain put calls together.\n         ",
    "links" : [ "#commit", "#apply" ]
  }, {
    "name" : " Editor remove(String key)",
    "returnType" : "Editor",
    "comment" : "\n         * Mark in the editor that a preference value should be removed, which\n         * will be done in the actual preferences once {@link #commit} is\n         * called.\n         * \n         * <p>Note that when committing back to the preferences, all removals\n         * are done first, regardless of whether you called remove before\n         * or after put methods on this editor.\n         * \n         * @param key The name of the preference to remove.\n         * \n         * @return Returns a reference to the same Editor object, so you can\n         * chain put calls together.\n         ",
    "links" : [ "#commit" ]
  }, {
    "name" : " Editor clear()",
    "returnType" : "Editor",
    "comment" : "\n         * Mark in the editor to remove <em>all</em> values from the\n         * preferences.  Once commit is called, the only remaining preferences\n         * will be any that you have defined in this editor.\n         * \n         * <p>Note that when committing back to the preferences, the clear\n         * is done first, regardless of whether you called clear before\n         * or after put methods on this editor.\n         * \n         * @return Returns a reference to the same Editor object, so you can\n         * chain put calls together.\n         ",
    "links" : [ ]
  }, {
    "name" : " boolean commit()",
    "returnType" : "boolean",
    "comment" : "\n         * Commit your preferences changes back from this Editor to the\n         * {@link SharedPreferences} object it is editing.  This atomically\n         * performs the requested modifications, replacing whatever is currently\n         * in the SharedPreferences.\n         *\n         * <p>Note that when two editors are modifying preferences at the same\n         * time, the last one to call commit wins.\n         *\n         * <p>If you don't care about the return value and you're\n         * using this from your application's main thread, consider\n         * using {@link #apply} instead.\n         *\n         * @return Returns true if the new values were successfully written\n         * to persistent storage.\n         ",
    "links" : [ "android.content.SharedPreferences", "#apply" ]
  }, {
    "name" : " void apply()",
    "returnType" : "void",
    "comment" : "\n         * Commit your preferences changes back from this Editor to the\n         * {@link SharedPreferences} object it is editing.  This atomically\n         * performs the requested modifications, replacing whatever is currently\n         * in the SharedPreferences.\n         *\n         * <p>Note that when two editors are modifying preferences at the same\n         * time, the last one to call apply wins.\n         *\n         * <p>Unlike {@link #commit}, which writes its preferences out\n         * to persistent storage synchronously, {@link #apply}\n         * commits its changes to the in-memory\n         * {@link SharedPreferences} immediately but starts an\n         * asynchronous commit to disk and you won't be notified of\n         * any failures.  If another editor on this\n         * {@link SharedPreferences} does a regular {@link #commit}\n         * while a {@link #apply} is still outstanding, the\n         * {@link #commit} will block until all async commits are\n         * completed as well as the commit itself.\n         *\n         * <p>As {@link SharedPreferences} instances are singletons within\n         * a process, it's safe to replace any instance of {@link #commit} with\n         * {@link #apply} if you were already ignoring the return value.\n         *\n         * <p>You don't need to worry about Android component\n         * lifecycles and their interaction with <code>apply()</code>\n         * writing to disk.  The framework makes sure in-flight disk\n         * writes from <code>apply()</code> complete before switching\n         * states.\n         *\n         * <p class='note'>The SharedPreferences.Editor interface\n         * isn't expected to be implemented directly.  However, if you\n         * previously did implement it and are now getting errors\n         * about missing <code>apply()</code>, you can simply call\n         * {@link #commit} from <code>apply()</code>.\n         ",
    "links" : [ "#commit", "android.content.SharedPreferences", "#apply" ]
  } ],
  "methodNames" : [ " Editor putString(String key, @Nullable String value)", " Editor putStringSet(String key, @Nullable Set<String> values)", " Editor putInt(String key, int value)", " Editor putLong(String key, long value)", " Editor putFloat(String key, float value)", " Editor putBoolean(String key, boolean value)", " Editor remove(String key)", " Editor clear()", " boolean commit()", " void apply()" ],
  "variableNames" : [ ]
}