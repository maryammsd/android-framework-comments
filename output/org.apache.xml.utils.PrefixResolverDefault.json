{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xml/utils/PrefixResolverDefault.java",
  "packageName" : "org.apache.xml.utils",
  "className" : "PrefixResolverDefault",
  "comment" : "\n * This class implements a generic PrefixResolver that\n * can be used to perform prefix-to-namespace lookup\n * for the XPath object.\n * @xsl.usage general\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "m_context",
    "type" : "Node",
    "comment" : "\n   * The context to resolve the prefix from, if the context\n   * is not given.\n   ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String getNamespaceForPrefix(String prefix)",
    "returnType" : "String",
    "comment" : "\n   * Given a namespace, get the corrisponding prefix.  This assumes that\n   * the PrevixResolver hold's it's own namespace context, or is a namespace\n   * context itself.\n   * @param prefix Prefix to resolve.\n   * @return Namespace that prefix resolves to, or null if prefix\n   * is not bound.\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getNamespaceForPrefix(String prefix, org.w3c.dom.Node namespaceContext)",
    "returnType" : "String",
    "comment" : "\n   * Given a namespace, get the corrisponding prefix.\n   * Warning: This will not work correctly if namespaceContext\n   * is an attribute node.\n   * @param prefix Prefix to resolve.\n   * @param namespaceContext Node from which to start searching for a\n   * xmlns attribute that binds a prefix to a namespace.\n   * @return Namespace that prefix resolves to, or null if prefix\n   * is not bound.\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getBaseIdentifier()",
    "returnType" : "String",
    "comment" : "\n   * Return the base identifier.\n   *\n   * @return null\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean handlesNullPrefixes()",
    "returnType" : "boolean",
    "comment" : "\n\t * @see PrefixResolver#handlesNullPrefixes()\n\t ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public String getNamespaceForPrefix(String prefix)", "public String getNamespaceForPrefix(String prefix, org.w3c.dom.Node namespaceContext)", "public String getBaseIdentifier()", "public boolean handlesNullPrefixes()" ],
  "variableNames" : [ "m_context" ]
}