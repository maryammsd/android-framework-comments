{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/service/ambientcontext/AmbientContextDetectionService.java",
  "packageName" : "android.service.ambientcontext",
  "className" : "AmbientContextDetectionService",
  "comment" : "\n * Abstract base class for {@link AmbientContextEvent} detection service.\n *\n * <p> A service that provides requested ambient context events to the system.\n * The system's default AmbientContextDetectionService implementation is configured in\n * {@code config_defaultAmbientContextDetectionService}. If this config has no value, a stub is\n * returned.\n *\n * See: {@code AmbientContextManagerService}.\n *\n * <pre>\n * {@literal\n * <service android:name=\".YourAmbientContextDetectionService\"\n *          android:permission=\"android.permission.BIND_AMBIENT_CONTEXT_DETECTION_SERVICE\">\n * </service>}\n * </pre>\n *\n * @hide\n ",
  "links" : [ "android.app.ambientcontext.AmbientContextEvent" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SERVICE_INTERFACE",
    "type" : "String",
    "comment" : "\n     * The {@link Intent} that must be declared as handled by the service. To be supported, the\n     * service must also require the\n     * {@link android.Manifest.permission#BIND_AMBIENT_CONTEXT_DETECTION_SERVICE}\n     * permission so that other applications can not abuse it.\n     ",
    "links" : [ "android.Manifest.permission#BIND_AMBIENT_CONTEXT_DETECTION_SERVICE", "android.content.Intent" ]
  } ],
  "methods" : [ {
    "name" : "public final IBinder onBind(@NonNull Intent intent)",
    "returnType" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void onStartDetection(@NonNull AmbientContextEventRequest request, @NonNull String packageName, @NonNull Consumer<AmbientContextDetectionResult> detectionResultConsumer, @NonNull Consumer<AmbientContextDetectionServiceStatus> statusConsumer)",
    "returnType" : "void",
    "comment" : "\n     * Called when a client app requests starting detection of the events in the request. The\n     * implementation should keep track of whether the user has explicitly consented to detecting\n     * the events using on-going ambient sensor (e.g. microphone), and agreed to share the\n     * detection results with this client app. If the user has not consented, the detection\n     * should not start, and the statusConsumer should get a response with STATUS_ACCESS_DENIED.\n     * If the user has made the consent and the underlying services are available, the\n     * implementation should start detection and provide detected events to the\n     * detectionResultConsumer. If the type of event needs immediate attention, the implementation\n     * should send result as soon as detected. Otherwise, the implementation can bulk send response.\n     * The ongoing detection will keep running, until onStopDetection is called. If there were\n     * previously requested detection from the same package, regardless of the type of events in\n     * the request, the previous request will be replaced with the new request.\n     *\n     * @param request The request with events to detect.\n     * @param packageName the requesting app's package name\n     * @param detectionResultConsumer the consumer for the detected event\n     * @param statusConsumer the consumer for the service status.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void onStopDetection(@NonNull String packageName)",
    "returnType" : "void",
    "comment" : "\n     * Stops detection of the events. Events that are not being detected will be ignored.\n     *\n     * @param packageName stops detection for the given package.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void onQueryServiceStatus(@NonNull int[] eventTypes, @NonNull String packageName, @NonNull Consumer<AmbientContextDetectionServiceStatus> consumer)",
    "returnType" : "void",
    "comment" : "\n     * Called when a query for the detection status occurs. The implementation should check\n     * the detection status of the requested events for the package, and provide results in a\n     * {@link AmbientContextDetectionServiceStatus} for the consumer.\n     *\n     * @param eventTypes The events to check for status.\n     * @param packageName the requesting app's package name\n     * @param consumer the consumer for the query results\n     ",
    "links" : [ "android.service.ambientcontext.AmbientContextDetectionServiceStatus" ]
  } ],
  "methodNames" : [ "public final IBinder onBind(@NonNull Intent intent)", "public abstract void onStartDetection(@NonNull AmbientContextEventRequest request, @NonNull String packageName, @NonNull Consumer<AmbientContextDetectionResult> detectionResultConsumer, @NonNull Consumer<AmbientContextDetectionServiceStatus> statusConsumer)", "public abstract void onStopDetection(@NonNull String packageName)", "public abstract void onQueryServiceStatus(@NonNull int[] eventTypes, @NonNull String packageName, @NonNull Consumer<AmbientContextDetectionServiceStatus> consumer)" ],
  "variableNames" : [ "TAG", "SERVICE_INTERFACE" ]
}