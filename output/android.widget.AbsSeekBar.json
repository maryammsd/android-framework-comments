{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/widget/AbsSeekBar.java",
  "packageName" : "android.widget",
  "className" : "AbsSeekBar",
  "comment" : "\n * AbsSeekBar extends the capabilities of ProgressBar by adding a draggable thumb.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mTempRect",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mThumb",
    "type" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mThumbTintList",
    "type" : "ColorStateList",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mThumbBlendMode",
    "type" : "BlendMode",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHasThumbTint",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHasThumbBlendMode",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTickMark",
    "type" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTickMarkTintList",
    "type" : "ColorStateList",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTickMarkBlendMode",
    "type" : "BlendMode",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHasTickMarkTint",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHasTickMarkBlendMode",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mThumbOffset",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSplitTrack",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTouchProgressOffset",
    "type" : "float",
    "comment" : "\n     * On touch, this offset plus the scaled value from the position of the\n     * touch will form the progress value. Usually 0.\n     ",
    "links" : [ ]
  }, {
    "name" : "mIsUserSeekable",
    "type" : "boolean",
    "comment" : "\n     * Whether this is user seekable.\n     ",
    "links" : [ ]
  }, {
    "name" : "mKeyProgressIncrement",
    "type" : "int",
    "comment" : "\n     * On key presses (right or left), the amount to increment/decrement the\n     * progress.\n     ",
    "links" : [ ]
  }, {
    "name" : "NO_ALPHA",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDisabledAlpha",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mThumbExclusionMaxSize",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mScaledTouchSlop",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTouchDownX",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsDragging",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTouchThumbOffset",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUserGestureExclusionRects",
    "type" : "List<Rect>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGestureExclusionRects",
    "type" : "List<Rect>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mThumbRect",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setThumb(Drawable thumb)",
    "returnType" : "void",
    "comment" : "\n     * Sets the thumb that will be drawn at the end of the progress meter within the SeekBar.\n     * <p>\n     * If the thumb is a valid drawable (i.e. not null), half its width will be\n     * used as the new thumb offset (@see #setThumbOffset(int)).\n     *\n     * @param thumb Drawable representing the thumb\n     ",
    "links" : [ ]
  }, {
    "name" : "public Drawable getThumb()",
    "returnType" : "Drawable",
    "comment" : "\n     * Return the drawable used to represent the scroll thumb - the component that\n     * the user can drag back and forth indicating the current value by its position.\n     *\n     * @return The current thumb drawable\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setThumbTintList(@Nullable ColorStateList tint)",
    "returnType" : "void",
    "comment" : "\n     * Applies a tint to the thumb drawable. Does not modify the current tint\n     * mode, which is {@link PorterDuff.Mode#SRC_IN} by default.\n     * <p>\n     * Subsequent calls to {@link #setThumb(Drawable)} will automatically\n     * mutate the drawable and apply the specified tint and tint mode using\n     * {@link Drawable#setTintList(ColorStateList)}.\n     *\n     * @param tint the tint to apply, may be {@code null} to clear tint\n     *\n     * @attr ref android.R.styleable#SeekBar_thumbTint\n     * @see #getThumbTintList()\n     * @see Drawable#setTintList(ColorStateList)\n     ",
    "links" : [ "#setThumb(Drawable)", "android.graphics.drawable.Drawable#setTintList(ColorStateList)", "PorterDuff.Mode#SRC_IN" ]
  }, {
    "name" : "public ColorStateList getThumbTintList()",
    "returnType" : "ColorStateList",
    "comment" : "\n     * Returns the tint applied to the thumb drawable, if specified.\n     *\n     * @return the tint applied to the thumb drawable\n     * @attr ref android.R.styleable#SeekBar_thumbTint\n     * @see #setThumbTintList(ColorStateList)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setThumbTintMode(@Nullable PorterDuff.Mode tintMode)",
    "returnType" : "void",
    "comment" : "\n     * Specifies the blending mode used to apply the tint specified by\n     * {@link #setThumbTintList(ColorStateList)}} to the thumb drawable. The\n     * default mode is {@link PorterDuff.Mode#SRC_IN}.\n     *\n     * @param tintMode the blending mode used to apply the tint, may be\n     *                 {@code null} to clear tint\n     *\n     * @attr ref android.R.styleable#SeekBar_thumbTintMode\n     * @see #getThumbTintMode()\n     * @see Drawable#setTintMode(PorterDuff.Mode)\n     ",
    "links" : [ "#setThumbTintList(ColorStateList)", "PorterDuff.Mode#SRC_IN" ]
  }, {
    "name" : "public void setThumbTintBlendMode(@Nullable BlendMode blendMode)",
    "returnType" : "void",
    "comment" : "\n     * Specifies the blending mode used to apply the tint specified by\n     * {@link #setThumbTintList(ColorStateList)}} to the thumb drawable. The\n     * default mode is {@link BlendMode#SRC_IN}.\n     *\n     * @param blendMode the blending mode used to apply the tint, may be\n     *                 {@code null} to clear tint\n     *\n     * @attr ref android.R.styleable#SeekBar_thumbTintMode\n     * @see #getThumbTintMode()\n     * @see Drawable#setTintBlendMode(BlendMode)\n     ",
    "links" : [ "android.graphics.BlendMode#SRC_IN", "#setThumbTintList(ColorStateList)" ]
  }, {
    "name" : "public PorterDuff.Mode getThumbTintMode()",
    "returnType" : "PorterDuff.Mode",
    "comment" : "\n     * Returns the blending mode used to apply the tint to the thumb drawable,\n     * if specified.\n     *\n     * @return the blending mode used to apply the tint to the thumb drawable\n     * @attr ref android.R.styleable#SeekBar_thumbTintMode\n     * @see #setThumbTintMode(PorterDuff.Mode)\n     ",
    "links" : [ ]
  }, {
    "name" : "public BlendMode getThumbTintBlendMode()",
    "returnType" : "BlendMode",
    "comment" : "\n     * Returns the blending mode used to apply the tint to the thumb drawable,\n     * if specified.\n     *\n     * @return the blending mode used to apply the tint to the thumb drawable\n     * @attr ref android.R.styleable#SeekBar_thumbTintMode\n     * @see #setThumbTintBlendMode(BlendMode)\n     ",
    "links" : [ ]
  }, {
    "name" : "private void applyThumbTint()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getThumbOffset()",
    "returnType" : "int",
    "comment" : "\n     * @see #setThumbOffset(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setThumbOffset(int thumbOffset)",
    "returnType" : "void",
    "comment" : "\n     * Sets the thumb offset that allows the thumb to extend out of the range of\n     * the track.\n     *\n     * @param thumbOffset The offset amount in pixels.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSplitTrack(boolean splitTrack)",
    "returnType" : "void",
    "comment" : "\n     * Specifies whether the track should be split by the thumb. When true,\n     * the thumb's optical bounds will be clipped out of the track drawable,\n     * then the thumb will be drawn into the resulting gap.\n     *\n     * @param splitTrack Whether the track should be split by the thumb\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getSplitTrack()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the track should be split by the thumb.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTickMark(Drawable tickMark)",
    "returnType" : "void",
    "comment" : "\n     * Sets the drawable displayed at each progress position, e.g. at each\n     * possible thumb position.\n     *\n     * @param tickMark the drawable to display at each progress position\n     ",
    "links" : [ ]
  }, {
    "name" : "public Drawable getTickMark()",
    "returnType" : "Drawable",
    "comment" : "\n     * @return the drawable displayed at each progress position\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTickMarkTintList(@Nullable ColorStateList tint)",
    "returnType" : "void",
    "comment" : "\n     * Applies a tint to the tick mark drawable. Does not modify the current tint\n     * mode, which is {@link PorterDuff.Mode#SRC_IN} by default.\n     * <p>\n     * Subsequent calls to {@link #setTickMark(Drawable)} will automatically\n     * mutate the drawable and apply the specified tint and tint mode using\n     * {@link Drawable#setTintList(ColorStateList)}.\n     *\n     * @param tint the tint to apply, may be {@code null} to clear tint\n     *\n     * @attr ref android.R.styleable#SeekBar_tickMarkTint\n     * @see #getTickMarkTintList()\n     * @see Drawable#setTintList(ColorStateList)\n     ",
    "links" : [ "android.graphics.drawable.Drawable#setTintList(ColorStateList)", "#setTickMark(Drawable)", "PorterDuff.Mode#SRC_IN" ]
  }, {
    "name" : "public ColorStateList getTickMarkTintList()",
    "returnType" : "ColorStateList",
    "comment" : "\n     * Returns the tint applied to the tick mark drawable, if specified.\n     *\n     * @return the tint applied to the tick mark drawable\n     * @attr ref android.R.styleable#SeekBar_tickMarkTint\n     * @see #setTickMarkTintList(ColorStateList)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTickMarkTintMode(@Nullable PorterDuff.Mode tintMode)",
    "returnType" : "void",
    "comment" : "\n     * Specifies the blending mode used to apply the tint specified by\n     * {@link #setTickMarkTintList(ColorStateList)}} to the tick mark drawable. The\n     * default mode is {@link PorterDuff.Mode#SRC_IN}.\n     *\n     * @param tintMode the blending mode used to apply the tint, may be\n     *                 {@code null} to clear tint\n     *\n     * @attr ref android.R.styleable#SeekBar_tickMarkTintMode\n     * @see #getTickMarkTintMode()\n     * @see Drawable#setTintMode(PorterDuff.Mode)\n     ",
    "links" : [ "#setTickMarkTintList(ColorStateList)", "PorterDuff.Mode#SRC_IN" ]
  }, {
    "name" : "public void setTickMarkTintBlendMode(@Nullable BlendMode blendMode)",
    "returnType" : "void",
    "comment" : "\n     * Specifies the blending mode used to apply the tint specified by\n     * {@link #setTickMarkTintList(ColorStateList)}} to the tick mark drawable. The\n     * default mode is {@link BlendMode#SRC_IN}.\n     *\n     * @param blendMode the blending mode used to apply the tint, may be\n     *                 {@code null} to clear tint\n     *\n     * @attr ref android.R.styleable#SeekBar_tickMarkTintMode\n     * @see #getTickMarkTintMode()\n     * @see Drawable#setTintBlendMode(BlendMode)\n     ",
    "links" : [ "android.graphics.BlendMode#SRC_IN", "#setTickMarkTintList(ColorStateList)" ]
  }, {
    "name" : "public PorterDuff.Mode getTickMarkTintMode()",
    "returnType" : "PorterDuff.Mode",
    "comment" : "\n     * Returns the blending mode used to apply the tint to the tick mark drawable,\n     * if specified.\n     *\n     * @return the blending mode used to apply the tint to the tick mark drawable\n     * @attr ref android.R.styleable#SeekBar_tickMarkTintMode\n     * @see #setTickMarkTintMode(PorterDuff.Mode)\n     ",
    "links" : [ ]
  }, {
    "name" : "public BlendMode getTickMarkTintBlendMode()",
    "returnType" : "BlendMode",
    "comment" : "\n     * Returns the blending mode used to apply the tint to the tick mark drawable,\n     * if specified.\n     *\n     * @return the blending mode used to apply the tint to the tick mark drawable\n     * @attr ref android.R.styleable#SeekBar_tickMarkTintMode\n     * @see #setTickMarkTintMode(PorterDuff.Mode)\n     ",
    "links" : [ ]
  }, {
    "name" : "private void applyTickMarkTint()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setKeyProgressIncrement(int increment)",
    "returnType" : "void",
    "comment" : "\n     * Sets the amount of progress changed via the arrow keys.\n     *\n     * @param increment The amount to increment or decrement when the user\n     *            presses the arrow keys.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getKeyProgressIncrement()",
    "returnType" : "int",
    "comment" : "\n     * Returns the amount of progress changed via the arrow keys.\n     * <p>\n     * By default, this will be a value that is derived from the progress range.\n     *\n     * @return The amount to increment or decrement when the user presses the\n     *         arrow keys. This will be positive.\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void setMin(int min)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public synchronized void setMax(int max)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected boolean verifyDrawable(@NonNull Drawable who)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void jumpDrawablesToCurrentState()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void drawableStateChanged()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void drawableHotspotChanged(float x, float y)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void onVisualProgressChanged(int id, float scale)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onSizeChanged(int w, int h, int oldw, int oldh)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateThumbAndTrackPos(int w, int h)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private float getScale()",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setThumbPos(int w, Drawable thumb, float scale, int offset)",
    "returnType" : "void",
    "comment" : "\n     * Updates the thumb drawable bounds.\n     *\n     * @param w Width of the view, including padding\n     * @param thumb Drawable used for the thumb\n     * @param scale Current progress between 0 and 1\n     * @param offset Vertical offset for centering. If set to\n     *            {@link Integer#MIN_VALUE}, the current offset will be used.\n     ",
    "links" : [ "#MIN_VALUE" ]
  }, {
    "name" : "public void setSystemGestureExclusionRects(@NonNull List<Rect> rects)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateGestureExclusionRects()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void growRectTo(Rect r, int minimumSize)",
    "returnType" : "void",
    "comment" : "\n     * Grows {@code r} from its center such that each dimension is at least {@code minimumSize}.\n     *\n     * The result will still have the same {@link Rect#centerX()} and {@link Rect#centerY()} as the\n     * input.\n     *\n     * @hide\n     ",
    "links" : [ "android.graphics.Rect#centerY()", "android.graphics.Rect#centerX()" ]
  }, {
    "name" : "public void onResolveDrawables(int layoutDirection)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "protected synchronized void onDraw(Canvas canvas)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void drawTrack(Canvas canvas)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void drawTickMarks(Canvas canvas)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " void drawThumb(Canvas canvas)",
    "returnType" : "void",
    "comment" : "\n     * Draw the thumb.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected synchronized void onMeasure(int widthMeasureSpec, int heightMeasureSpec)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean onTouchEvent(MotionEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void startDrag(MotionEvent event)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setHotspot(float x, float y)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void trackTouchEvent(MotionEvent event)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void attemptClaimDrag()",
    "returnType" : "void",
    "comment" : "\n     * Tries to claim the user's drag motion, and requests disallowing any\n     * ancestors from stealing events in the drag.\n     ",
    "links" : [ ]
  }, {
    "name" : " void onStartTrackingTouch()",
    "returnType" : "void",
    "comment" : "\n     * This is called when the user has started touching this widget.\n     ",
    "links" : [ ]
  }, {
    "name" : " void onStopTrackingTouch()",
    "returnType" : "void",
    "comment" : "\n     * This is called when the user either releases their touch or the touch is\n     * canceled.\n     ",
    "links" : [ ]
  }, {
    "name" : " void onKeyChange()",
    "returnType" : "void",
    "comment" : "\n     * Called when the user changes the seekbar's progress by using a key event.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean onKeyDown(int keyCode, KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getAccessibilityClassName()",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onInitializeAccessibilityNodeInfoInternal(AccessibilityNodeInfo info)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean performAccessibilityActionInternal(int action, Bundle arguments)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : " boolean canUserSetProgress()",
    "returnType" : "boolean",
    "comment" : "\n     * @return whether user can change progress on the view\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onRtlPropertiesChanged(int layoutDirection)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setThumb(Drawable thumb)", "public Drawable getThumb()", "public void setThumbTintList(@Nullable ColorStateList tint)", "public ColorStateList getThumbTintList()", "public void setThumbTintMode(@Nullable PorterDuff.Mode tintMode)", "public void setThumbTintBlendMode(@Nullable BlendMode blendMode)", "public PorterDuff.Mode getThumbTintMode()", "public BlendMode getThumbTintBlendMode()", "private void applyThumbTint()", "public int getThumbOffset()", "public void setThumbOffset(int thumbOffset)", "public void setSplitTrack(boolean splitTrack)", "public boolean getSplitTrack()", "public void setTickMark(Drawable tickMark)", "public Drawable getTickMark()", "public void setTickMarkTintList(@Nullable ColorStateList tint)", "public ColorStateList getTickMarkTintList()", "public void setTickMarkTintMode(@Nullable PorterDuff.Mode tintMode)", "public void setTickMarkTintBlendMode(@Nullable BlendMode blendMode)", "public PorterDuff.Mode getTickMarkTintMode()", "public BlendMode getTickMarkTintBlendMode()", "private void applyTickMarkTint()", "public void setKeyProgressIncrement(int increment)", "public int getKeyProgressIncrement()", "public synchronized void setMin(int min)", "public synchronized void setMax(int max)", "protected boolean verifyDrawable(@NonNull Drawable who)", "public void jumpDrawablesToCurrentState()", "protected void drawableStateChanged()", "public void drawableHotspotChanged(float x, float y)", " void onVisualProgressChanged(int id, float scale)", "protected void onSizeChanged(int w, int h, int oldw, int oldh)", "private void updateThumbAndTrackPos(int w, int h)", "private float getScale()", "private void setThumbPos(int w, Drawable thumb, float scale, int offset)", "public void setSystemGestureExclusionRects(@NonNull List<Rect> rects)", "private void updateGestureExclusionRects()", "public void growRectTo(Rect r, int minimumSize)", "public void onResolveDrawables(int layoutDirection)", "protected synchronized void onDraw(Canvas canvas)", " void drawTrack(Canvas canvas)", "protected void drawTickMarks(Canvas canvas)", " void drawThumb(Canvas canvas)", "protected synchronized void onMeasure(int widthMeasureSpec, int heightMeasureSpec)", "public boolean onTouchEvent(MotionEvent event)", "private void startDrag(MotionEvent event)", "private void setHotspot(float x, float y)", "private void trackTouchEvent(MotionEvent event)", "private void attemptClaimDrag()", " void onStartTrackingTouch()", " void onStopTrackingTouch()", " void onKeyChange()", "public boolean onKeyDown(int keyCode, KeyEvent event)", "public CharSequence getAccessibilityClassName()", "public void onInitializeAccessibilityNodeInfoInternal(AccessibilityNodeInfo info)", "public boolean performAccessibilityActionInternal(int action, Bundle arguments)", " boolean canUserSetProgress()", "public void onRtlPropertiesChanged(int layoutDirection)" ],
  "variableNames" : [ "mTempRect", "mThumb", "mThumbTintList", "mThumbBlendMode", "mHasThumbTint", "mHasThumbBlendMode", "mTickMark", "mTickMarkTintList", "mTickMarkBlendMode", "mHasTickMarkTint", "mHasTickMarkBlendMode", "mThumbOffset", "mSplitTrack", "mTouchProgressOffset", "mIsUserSeekable", "mKeyProgressIncrement", "NO_ALPHA", "mDisabledAlpha", "mThumbExclusionMaxSize", "mScaledTouchSlop", "mTouchDownX", "mIsDragging", "mTouchThumbOffset", "mUserGestureExclusionRects", "mGestureExclusionRects", "mThumbRect" ]
}