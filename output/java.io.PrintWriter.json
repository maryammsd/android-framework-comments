{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/io/PrintWriter.java",
  "packageName" : "java.io",
  "className" : "PrintWriter",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "out",
    "type" : "Writer",
    "comment" : "\n     * The underlying character-output stream of this\n     * {@code PrintWriter}.\n     *\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : "autoFlush",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "trouble",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "formatter",
    "type" : "Formatter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "psOut",
    "type" : "PrintStream",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static Charset toCharset(String csn) throws UnsupportedEncodingException",
    "returnType" : "Charset",
    "comment" : "\n     * Returns a charset object for the given charset name.\n     * @throws NullPointerException          is csn is null\n     * @throws UnsupportedEncodingException  if the charset is not supported\n     ",
    "links" : [ ]
  }, {
    "name" : "private void ensureOpen() throws IOException",
    "returnType" : "void",
    "comment" : " Checks to make sure that the stream has not been closed ",
    "links" : [ ]
  }, {
    "name" : "public void flush()",
    "returnType" : "void",
    "comment" : "\n     * Flushes the stream.\n     * @see #checkError()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "\n     * Closes the stream and releases any system resources associated\n     * with it. Closing a previously closed stream has no effect.\n     *\n     * @see #checkError()\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean checkError()",
    "returnType" : "boolean",
    "comment" : "\n     * Flushes the stream if it's not closed and checks its error state.\n     *\n     * @return {@code true} if the print stream has encountered an error,\n     *          either on the underlying output stream or during a format\n     *          conversion.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void setError()",
    "returnType" : "void",
    "comment" : "\n     * Indicates that an error has occurred.\n     *\n     * <p> This method will cause subsequent invocations of {@link\n     * #checkError()} to return {@code true} until {@link\n     * #clearError()} is invoked.\n     ",
    "links" : [ "#checkError()", "#clearError()" ]
  }, {
    "name" : "protected void clearError()",
    "returnType" : "void",
    "comment" : "\n     * Clears the error state of this stream.\n     *\n     * <p> This method will cause subsequent invocations of {@link\n     * #checkError()} to return {@code false} until another write\n     * operation fails and invokes {@link #setError()}.\n     *\n     * @since 1.6\n     ",
    "links" : [ "#checkError()", "#setError()" ]
  }, {
    "name" : "public void write(int c)",
    "returnType" : "void",
    "comment" : "\n     * Writes a single character.\n     * @param c int specifying a character to be written.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void write(char[] buf, int off, int len)",
    "returnType" : "void",
    "comment" : "\n     * Writes A Portion of an array of characters.\n     * @param buf Array of characters\n     * @param off Offset from which to start writing characters\n     * @param len Number of characters to write\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If the values of the {@code off} and {@code len} parameters\n     *          cause the corresponding method of the underlying {@code Writer}\n     *          to throw an {@code IndexOutOfBoundsException}\n     ",
    "links" : [ ]
  }, {
    "name" : "public void write(char[] buf)",
    "returnType" : "void",
    "comment" : "\n     * Writes an array of characters.  This method cannot be inherited from the\n     * Writer class because it must suppress I/O exceptions.\n     * @param buf Array of characters to be written\n     ",
    "links" : [ ]
  }, {
    "name" : "public void write(String s, int off, int len)",
    "returnType" : "void",
    "comment" : "\n     * Writes a portion of a string.\n     * @param s A String\n     * @param off Offset from which to start writing characters\n     * @param len Number of characters to write\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If the values of the {@code off} and {@code len} parameters\n     *          cause the corresponding method of the underlying {@code Writer}\n     *          to throw an {@code IndexOutOfBoundsException}\n     ",
    "links" : [ ]
  }, {
    "name" : "public void write(String s)",
    "returnType" : "void",
    "comment" : "\n     * Writes a string.  This method cannot be inherited from the Writer class\n     * because it must suppress I/O exceptions.\n     * @param s String to be written\n     ",
    "links" : [ ]
  }, {
    "name" : "private void newLine()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void print(boolean b)",
    "returnType" : "void",
    "comment" : "\n     * Prints a boolean value.  The string produced by {@link\n     * java.lang.String#valueOf(boolean)} is translated into bytes\n     * according to the platform's default character encoding, and these bytes\n     * are written in exactly the manner of the {@link\n     * #write(int)} method.\n     *\n     * @param      b   The {@code boolean} to be printed\n     ",
    "links" : [ "java.lang.String#valueOf(boolean)", "#write(int)" ]
  }, {
    "name" : "public void print(char c)",
    "returnType" : "void",
    "comment" : "\n     * Prints a character.  The character is translated into one or more bytes\n     * according to the platform's default character encoding, and these bytes\n     * are written in exactly the manner of the {@link\n     * #write(int)} method.\n     *\n     * @param      c   The {@code char} to be printed\n     ",
    "links" : [ "#write(int)" ]
  }, {
    "name" : "public void print(int i)",
    "returnType" : "void",
    "comment" : "\n     * Prints an integer.  The string produced by {@link\n     * java.lang.String#valueOf(int)} is translated into bytes according\n     * to the platform's default character encoding, and these bytes are\n     * written in exactly the manner of the {@link #write(int)}\n     * method.\n     *\n     * @param      i   The {@code int} to be printed\n     * @see        java.lang.Integer#toString(int)\n     ",
    "links" : [ "#write(int)", "java.lang.String#valueOf(int)" ]
  }, {
    "name" : "public void print(long l)",
    "returnType" : "void",
    "comment" : "\n     * Prints a long integer.  The string produced by {@link\n     * java.lang.String#valueOf(long)} is translated into bytes\n     * according to the platform's default character encoding, and these bytes\n     * are written in exactly the manner of the {@link #write(int)}\n     * method.\n     *\n     * @param      l   The {@code long} to be printed\n     * @see        java.lang.Long#toString(long)\n     ",
    "links" : [ "java.lang.String#valueOf(long)", "#write(int)" ]
  }, {
    "name" : "public void print(float f)",
    "returnType" : "void",
    "comment" : "\n     * Prints a floating-point number.  The string produced by {@link\n     * java.lang.String#valueOf(float)} is translated into bytes\n     * according to the platform's default character encoding, and these bytes\n     * are written in exactly the manner of the {@link #write(int)}\n     * method.\n     *\n     * @param      f   The {@code float} to be printed\n     * @see        java.lang.Float#toString(float)\n     ",
    "links" : [ "#write(int)", "java.lang.String#valueOf(float)" ]
  }, {
    "name" : "public void print(double d)",
    "returnType" : "void",
    "comment" : "\n     * Prints a double-precision floating-point number.  The string produced by\n     * {@link java.lang.String#valueOf(double)} is translated into\n     * bytes according to the platform's default character encoding, and these\n     * bytes are written in exactly the manner of the {@link\n     * #write(int)} method.\n     *\n     * @param      d   The {@code double} to be printed\n     * @see        java.lang.Double#toString(double)\n     ",
    "links" : [ "java.lang.String#valueOf(double)", "#write(int)" ]
  }, {
    "name" : "public void print(char[] s)",
    "returnType" : "void",
    "comment" : "\n     * Prints an array of characters.  The characters are converted into bytes\n     * according to the platform's default character encoding, and these bytes\n     * are written in exactly the manner of the {@link #write(int)}\n     * method.\n     *\n     * @param      s   The array of chars to be printed\n     *\n     * @throws  NullPointerException  If {@code s} is {@code null}\n     ",
    "links" : [ "#write(int)" ]
  }, {
    "name" : "public void print(String s)",
    "returnType" : "void",
    "comment" : "\n     * Prints a string.  If the argument is {@code null} then the string\n     * {@code \"null\"} is printed.  Otherwise, the string's characters are\n     * converted into bytes according to the platform's default character\n     * encoding, and these bytes are written in exactly the manner of the\n     * {@link #write(int)} method.\n     *\n     * @param      s   The {@code String} to be printed\n     ",
    "links" : [ "#write(int)" ]
  }, {
    "name" : "public void print(Object obj)",
    "returnType" : "void",
    "comment" : "\n     * Prints an object.  The string produced by the {@link\n     * java.lang.String#valueOf(Object)} method is translated into bytes\n     * according to the platform's default character encoding, and these bytes\n     * are written in exactly the manner of the {@link #write(int)}\n     * method.\n     *\n     * @param      obj   The {@code Object} to be printed\n     * @see        java.lang.Object#toString()\n     ",
    "links" : [ "java.lang.String#valueOf(Object)", "#write(int)" ]
  }, {
    "name" : "public void println()",
    "returnType" : "void",
    "comment" : "\n     * Terminates the current line by writing the line separator string.  The\n     * line separator string is defined by the system property\n     * {@code line.separator}, and is not necessarily a single newline\n     * character ({@code '\\n'}).\n     ",
    "links" : [ ]
  }, {
    "name" : "public void println(boolean x)",
    "returnType" : "void",
    "comment" : "\n     * Prints a boolean value and then terminates the line.  This method behaves\n     * as though it invokes {@link #print(boolean)} and then\n     * {@link #println()}.\n     *\n     * @param x the {@code boolean} value to be printed\n     ",
    "links" : [ "#print(boolean)", "#println()" ]
  }, {
    "name" : "public void println(char x)",
    "returnType" : "void",
    "comment" : "\n     * Prints a character and then terminates the line.  This method behaves as\n     * though it invokes {@link #print(char)} and then {@link\n     * #println()}.\n     *\n     * @param x the {@code char} value to be printed\n     ",
    "links" : [ "#print(char)", "#println()" ]
  }, {
    "name" : "public void println(int x)",
    "returnType" : "void",
    "comment" : "\n     * Prints an integer and then terminates the line.  This method behaves as\n     * though it invokes {@link #print(int)} and then {@link\n     * #println()}.\n     *\n     * @param x the {@code int} value to be printed\n     ",
    "links" : [ "#println()", "#print(int)" ]
  }, {
    "name" : "public void println(long x)",
    "returnType" : "void",
    "comment" : "\n     * Prints a long integer and then terminates the line.  This method behaves\n     * as though it invokes {@link #print(long)} and then\n     * {@link #println()}.\n     *\n     * @param x the {@code long} value to be printed\n     ",
    "links" : [ "#println()", "#print(long)" ]
  }, {
    "name" : "public void println(float x)",
    "returnType" : "void",
    "comment" : "\n     * Prints a floating-point number and then terminates the line.  This method\n     * behaves as though it invokes {@link #print(float)} and then\n     * {@link #println()}.\n     *\n     * @param x the {@code float} value to be printed\n     ",
    "links" : [ "#println()", "#print(float)" ]
  }, {
    "name" : "public void println(double x)",
    "returnType" : "void",
    "comment" : "\n     * Prints a double-precision floating-point number and then terminates the\n     * line.  This method behaves as though it invokes {@link\n     * #print(double)} and then {@link #println()}.\n     *\n     * @param x the {@code double} value to be printed\n     ",
    "links" : [ "#println()", "#print(double)" ]
  }, {
    "name" : "public void println(char[] x)",
    "returnType" : "void",
    "comment" : "\n     * Prints an array of characters and then terminates the line.  This method\n     * behaves as though it invokes {@link #print(char[])} and then\n     * {@link #println()}.\n     *\n     * @param x the array of {@code char} values to be printed\n     ",
    "links" : [ "#println()", "#print(char" ]
  }, {
    "name" : "public void println(String x)",
    "returnType" : "void",
    "comment" : "\n     * Prints a String and then terminates the line.  This method behaves as\n     * though it invokes {@link #print(String)} and then\n     * {@link #println()}.\n     *\n     * @param x the {@code String} value to be printed\n     ",
    "links" : [ "#println()", "#print(String)" ]
  }, {
    "name" : "public void println(Object x)",
    "returnType" : "void",
    "comment" : "\n     * Prints an Object and then terminates the line.  This method calls\n     * at first String.valueOf(x) to get the printed object's string value,\n     * then behaves as\n     * though it invokes {@link #print(String)} and then\n     * {@link #println()}.\n     *\n     * @param x  The {@code Object} to be printed.\n     ",
    "links" : [ "#println()", "#print(String)" ]
  }, {
    "name" : "public PrintWriter printf(String format, Object... args)",
    "returnType" : "PrintWriter",
    "comment" : "\n     * A convenience method to write a formatted string to this writer using\n     * the specified format string and arguments.  If automatic flushing is\n     * enabled, calls to this method will flush the output buffer.\n     *\n     * <p> An invocation of this method of the form\n     * {@code out.printf(format, args)}\n     * behaves in exactly the same way as the invocation\n     *\n     * <pre>{@code\n     *     out.format(format, args)\n     * }</pre>\n     *\n     * @param  format\n     *         A format string as described in <a\n     *         href=\"../util/Formatter.html#syntax\">Format string syntax</a>.\n     *\n     * @param  args\n     *         Arguments referenced by the format specifiers in the format\n     *         string.  If there are more arguments than format specifiers, the\n     *         extra arguments are ignored.  The number of arguments is\n     *         variable and may be zero.  The maximum number of arguments is\n     *         limited by the maximum dimension of a Java array as defined by\n     *         <cite>The Java&trade; Virtual Machine Specification</cite>.\n     *         The behaviour on a\n     *         {@code null} argument depends on the <a\n     *         href=\"../util/Formatter.html#syntax\">conversion</a>.\n     *\n     * @throws  java.util.IllegalFormatException\n     *          If a format string contains an illegal syntax, a format\n     *          specifier that is incompatible with the given arguments,\n     *          insufficient arguments given the format string, or other\n     *          illegal conditions.  For specification of all possible\n     *          formatting errors, see the <a\n     *          href=\"../util/Formatter.html#detail\">Details</a> section of the\n     *          formatter class specification.\n     *\n     * @throws  NullPointerException\n     *          If the {@code format} is {@code null}\n     *\n     * @return  This writer\n     *\n     * @since  1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public PrintWriter printf(Locale l, String format, Object... args)",
    "returnType" : "PrintWriter",
    "comment" : "\n     * A convenience method to write a formatted string to this writer using\n     * the specified format string and arguments.  If automatic flushing is\n     * enabled, calls to this method will flush the output buffer.\n     *\n     * <p> An invocation of this method of the form\n     * {@code out.printf(l, format, args)}\n     * behaves in exactly the same way as the invocation\n     *\n     * <pre>{@code\n     *     out.format(l, format, args)\n     * }</pre>\n     *\n     * @param  l\n     *         The {@linkplain java.util.Locale locale} to apply during\n     *         formatting.  If {@code l} is {@code null} then no localization\n     *         is applied.\n     *\n     * @param  format\n     *         A format string as described in <a\n     *         href=\"../util/Formatter.html#syntax\">Format string syntax</a>.\n     *\n     * @param  args\n     *         Arguments referenced by the format specifiers in the format\n     *         string.  If there are more arguments than format specifiers, the\n     *         extra arguments are ignored.  The number of arguments is\n     *         variable and may be zero.  The maximum number of arguments is\n     *         limited by the maximum dimension of a Java array as defined by\n     *         <cite>The Java&trade; Virtual Machine Specification</cite>.\n     *         The behaviour on a\n     *         {@code null} argument depends on the <a\n     *         href=\"../util/Formatter.html#syntax\">conversion</a>.\n     *\n     * @throws  java.util.IllegalFormatException\n     *          If a format string contains an illegal syntax, a format\n     *          specifier that is incompatible with the given arguments,\n     *          insufficient arguments given the format string, or other\n     *          illegal conditions.  For specification of all possible\n     *          formatting errors, see the <a\n     *          href=\"../util/Formatter.html#detail\">Details</a> section of the\n     *          formatter class specification.\n     *\n     * @throws  NullPointerException\n     *          If the {@code format} is {@code null}\n     *\n     * @return  This writer\n     *\n     * @since  1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public PrintWriter format(String format, Object... args)",
    "returnType" : "PrintWriter",
    "comment" : "\n     * Writes a formatted string to this writer using the specified format\n     * string and arguments.  If automatic flushing is enabled, calls to this\n     * method will flush the output buffer.\n     *\n     * <p> The locale always used is the one returned by {@link\n     * java.util.Locale#getDefault() Locale.getDefault()}, regardless of any\n     * previous invocations of other formatting methods on this object.\n     *\n     * @param  format\n     *         A format string as described in <a\n     *         href=\"../util/Formatter.html#syntax\">Format string syntax</a>.\n     *\n     * @param  args\n     *         Arguments referenced by the format specifiers in the format\n     *         string.  If there are more arguments than format specifiers, the\n     *         extra arguments are ignored.  The number of arguments is\n     *         variable and may be zero.  The maximum number of arguments is\n     *         limited by the maximum dimension of a Java array as defined by\n     *         <cite>The Java&trade; Virtual Machine Specification</cite>.\n     *         The behaviour on a\n     *         {@code null} argument depends on the <a\n     *         href=\"../util/Formatter.html#syntax\">conversion</a>.\n     *\n     * @throws  java.util.IllegalFormatException\n     *          If a format string contains an illegal syntax, a format\n     *          specifier that is incompatible with the given arguments,\n     *          insufficient arguments given the format string, or other\n     *          illegal conditions.  For specification of all possible\n     *          formatting errors, see the <a\n     *          href=\"../util/Formatter.html#detail\">Details</a> section of the\n     *          Formatter class specification.\n     *\n     * @throws  NullPointerException\n     *          If the {@code format} is {@code null}\n     *\n     * @return  This writer\n     *\n     * @since  1.5\n     ",
    "links" : [ "java.util.Locale#getDefault()" ]
  }, {
    "name" : "public PrintWriter format(Locale l, String format, Object... args)",
    "returnType" : "PrintWriter",
    "comment" : "\n     * Writes a formatted string to this writer using the specified format\n     * string and arguments.  If automatic flushing is enabled, calls to this\n     * method will flush the output buffer.\n     *\n     * @param  l\n     *         The {@linkplain java.util.Locale locale} to apply during\n     *         formatting.  If {@code l} is {@code null} then no localization\n     *         is applied.\n     *\n     * @param  format\n     *         A format string as described in <a\n     *         href=\"../util/Formatter.html#syntax\">Format string syntax</a>.\n     *\n     * @param  args\n     *         Arguments referenced by the format specifiers in the format\n     *         string.  If there are more arguments than format specifiers, the\n     *         extra arguments are ignored.  The number of arguments is\n     *         variable and may be zero.  The maximum number of arguments is\n     *         limited by the maximum dimension of a Java array as defined by\n     *         <cite>The Java&trade; Virtual Machine Specification</cite>.\n     *         The behaviour on a\n     *         {@code null} argument depends on the <a\n     *         href=\"../util/Formatter.html#syntax\">conversion</a>.\n     *\n     * @throws  java.util.IllegalFormatException\n     *          If a format string contains an illegal syntax, a format\n     *          specifier that is incompatible with the given arguments,\n     *          insufficient arguments given the format string, or other\n     *          illegal conditions.  For specification of all possible\n     *          formatting errors, see the <a\n     *          href=\"../util/Formatter.html#detail\">Details</a> section of the\n     *          formatter class specification.\n     *\n     * @throws  NullPointerException\n     *          If the {@code format} is {@code null}\n     *\n     * @return  This writer\n     *\n     * @since  1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public PrintWriter append(CharSequence csq)",
    "returnType" : "PrintWriter",
    "comment" : "\n     * Appends the specified character sequence to this writer.\n     *\n     * <p> An invocation of this method of the form {@code out.append(csq)}\n     * behaves in exactly the same way as the invocation\n     *\n     * <pre>{@code\n     *     out.write(csq.toString())\n     * }</pre>\n     *\n     * <p> Depending on the specification of {@code toString} for the\n     * character sequence {@code csq}, the entire sequence may not be\n     * appended. For instance, invoking the {@code toString} method of a\n     * character buffer will return a subsequence whose content depends upon\n     * the buffer's position and limit.\n     *\n     * @param  csq\n     *         The character sequence to append.  If {@code csq} is\n     *         {@code null}, then the four characters {@code \"null\"} are\n     *         appended to this writer.\n     *\n     * @return  This writer\n     *\n     * @since  1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public PrintWriter append(CharSequence csq, int start, int end)",
    "returnType" : "PrintWriter",
    "comment" : "\n     * Appends a subsequence of the specified character sequence to this writer.\n     *\n     * <p> An invocation of this method of the form\n     * {@code out.append(csq, start, end)}\n     * when {@code csq} is not {@code null}, behaves in\n     * exactly the same way as the invocation\n     *\n     * <pre>{@code\n     *     out.write(csq.subSequence(start, end).toString())\n     * }</pre>\n     *\n     * @param  csq\n     *         The character sequence from which a subsequence will be\n     *         appended.  If {@code csq} is {@code null}, then characters\n     *         will be appended as if {@code csq} contained the four\n     *         characters {@code \"null\"}.\n     *\n     * @param  start\n     *         The index of the first character in the subsequence\n     *\n     * @param  end\n     *         The index of the character following the last character in the\n     *         subsequence\n     *\n     * @return  This writer\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If {@code start} or {@code end} are negative, {@code start}\n     *          is greater than {@code end}, or {@code end} is greater than\n     *          {@code csq.length()}\n     *\n     * @since  1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public PrintWriter append(char c)",
    "returnType" : "PrintWriter",
    "comment" : "\n     * Appends the specified character to this writer.\n     *\n     * <p> An invocation of this method of the form {@code out.append(c)}\n     * behaves in exactly the same way as the invocation\n     *\n     * <pre>{@code\n     *     out.write(c)\n     * }</pre>\n     *\n     * @param  c\n     *         The 16-bit character to append\n     *\n     * @return  This writer\n     *\n     * @since 1.5\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static Charset toCharset(String csn) throws UnsupportedEncodingException", "private void ensureOpen() throws IOException", "public void flush()", "public void close()", "public boolean checkError()", "protected void setError()", "protected void clearError()", "public void write(int c)", "public void write(char[] buf, int off, int len)", "public void write(char[] buf)", "public void write(String s, int off, int len)", "public void write(String s)", "private void newLine()", "public void print(boolean b)", "public void print(char c)", "public void print(int i)", "public void print(long l)", "public void print(float f)", "public void print(double d)", "public void print(char[] s)", "public void print(String s)", "public void print(Object obj)", "public void println()", "public void println(boolean x)", "public void println(char x)", "public void println(int x)", "public void println(long x)", "public void println(float x)", "public void println(double x)", "public void println(char[] x)", "public void println(String x)", "public void println(Object x)", "public PrintWriter printf(String format, Object... args)", "public PrintWriter printf(Locale l, String format, Object... args)", "public PrintWriter format(String format, Object... args)", "public PrintWriter format(Locale l, String format, Object... args)", "public PrintWriter append(CharSequence csq)", "public PrintWriter append(CharSequence csq, int start, int end)", "public PrintWriter append(char c)" ],
  "variableNames" : [ "out", "autoFlush", "trouble", "formatter", "psOut" ]
}