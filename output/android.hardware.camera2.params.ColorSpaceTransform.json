{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/camera2/params/ColorSpaceTransform.java",
  "packageName" : "android.hardware.camera2.params",
  "className" : "ColorSpaceTransform",
  "comment" : "\n * Immutable class for describing a 3x3 matrix of {@link Rational} values in row-major order.\n *\n * <p>This matrix maps a transform from one color space to another. For the particular color space\n * source and target, see the appropriate camera metadata documentation for the key that provides\n * this value.</p>\n *\n * @see CameraMetadata\n ",
  "links" : [ "android.util.Rational" ],
  "variables" : [ {
    "name" : "ROWS",
    "type" : "int",
    "comment" : " The number of rows in this matrix. ",
    "links" : [ ]
  }, {
    "name" : "COLUMNS",
    "type" : "int",
    "comment" : " The number of columns in this matrix. ",
    "links" : [ ]
  }, {
    "name" : "COUNT",
    "type" : "int",
    "comment" : " The number of total Rational elements in this matrix. ",
    "links" : [ ]
  }, {
    "name" : "RATIONAL_SIZE",
    "type" : "int",
    "comment" : " Number of int elements in a rational. ",
    "links" : [ ]
  }, {
    "name" : "OFFSET_NUMERATOR",
    "type" : "int",
    "comment" : " Numerator offset inside a rational (pair). ",
    "links" : [ ]
  }, {
    "name" : "OFFSET_DENOMINATOR",
    "type" : "int",
    "comment" : " Denominator offset inside a rational (pair). ",
    "links" : [ ]
  }, {
    "name" : "COUNT_INT",
    "type" : "int",
    "comment" : " Number of int elements in this matrix. ",
    "links" : [ ]
  }, {
    "name" : "mElements",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Rational getElement(int column, int row)",
    "returnType" : "Rational",
    "comment" : "\n     * Get an element of this matrix by its row and column.\n     *\n     * <p>The rows must be within the range [0, 3),\n     * and the column must be within the range [0, 3).</p>\n     *\n     * @return element (non-{@code null})\n     *\n     * @throws IllegalArgumentException if column or row was out of range\n     ",
    "links" : [ ]
  }, {
    "name" : "public void copyElements(Rational[] destination, int offset)",
    "returnType" : "void",
    "comment" : "\n     * Copy the {@link Rational} elements in row-major order from this matrix into the destination.\n     *\n     * @param destination\n     *          an array big enough to hold at least {@code 9} elements after the\n     *          {@code offset}\n     * @param offset\n     *          a non-negative offset into the array\n     * @throws NullPointerException\n     *          If {@code destination} was {@code null}\n     * @throws ArrayIndexOutOfBoundsException\n     *          If there's not enough room to write the elements at the specified destination and\n     *          offset.\n     ",
    "links" : [ "android.util.Rational" ]
  }, {
    "name" : "public void copyElements(int[] destination, int offset)",
    "returnType" : "void",
    "comment" : "\n     * Copy the {@link Rational} elements in row-major order from this matrix into the destination.\n     *\n     * <p>Each element is stored as a contiguous rational packed as a\n     * {@code (numerator, denominator)} pair of ints, identical to the\n     * {@link ColorSpaceTransform#ColorSpaceTransform(int[]) constructor}.</p>\n     *\n     * @param destination\n     *          an array big enough to hold at least {@code 18} elements after the\n     *          {@code offset}\n     * @param offset\n     *          a non-negative offset into the array\n     * @throws NullPointerException\n     *          If {@code destination} was {@code null}\n     * @throws ArrayIndexOutOfBoundsException\n     *          If there's not enough room to write the elements at the specified destination and\n     *          offset.\n     *\n     * @see ColorSpaceTransform#ColorSpaceTransform(int[])\n     ",
    "links" : [ "android.util.Rational", "android.hardware.camera2.params.ColorSpaceTransform#ColorSpaceTransform(int" ]
  }, {
    "name" : "public boolean equals(final Object obj)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if this {@link ColorSpaceTransform} is equal to another {@link ColorSpaceTransform}.\n     *\n     * <p>Two color space transforms are equal if and only if all of their elements are\n     * {@link Object#equals equal}.</p>\n     *\n     * @return {@code true} if the objects were equal, {@code false} otherwise\n     ",
    "links" : [ "#equals", "android.hardware.camera2.params.ColorSpaceTransform" ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Return the color space transform as a string representation.\n     *\n     *  <p> Example:\n     * {@code \"ColorSpaceTransform([1/1, 0/1, 0/1], [0/1, 1/1, 0/1], [0/1, 0/1, 1/1])\"} is an\n     * identity transform. Elements are printed in row major order. </p>\n     *\n     * @return string representation of color space transform\n     ",
    "links" : [ ]
  }, {
    "name" : "private String toShortString()",
    "returnType" : "String",
    "comment" : "\n     * Return the color space transform as a compact string representation.\n     *\n     *  <p> Example:\n     * {@code \"([1/1, 0/1, 0/1], [0/1, 1/1, 0/1], [0/1, 0/1, 1/1])\"} is an identity transform.\n     * Elements are printed in row major order. </p>\n     *\n     * @return compact string representation of color space transform\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Rational getElement(int column, int row)", "public void copyElements(Rational[] destination, int offset)", "public void copyElements(int[] destination, int offset)", "public boolean equals(final Object obj)", "public int hashCode()", "public String toString()", "private String toShortString()" ],
  "variableNames" : [ "ROWS", "COLUMNS", "COUNT", "RATIONAL_SIZE", "OFFSET_NUMERATOR", "OFFSET_DENOMINATOR", "COUNT_INT", "mElements" ]
}