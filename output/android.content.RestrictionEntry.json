{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/content/RestrictionEntry.java",
  "packageName" : "android.content",
  "className" : "RestrictionEntry",
  "comment" : "\n * Applications can expose restrictions for a restricted user on a\n * multiuser device. The administrator can configure these restrictions that will then be\n * applied to the restricted user. Each RestrictionsEntry is one configurable restriction.\n * <p/>\n * Any application that chooses to expose such restrictions does so by implementing a\n * receiver that handles the {@link Intent#ACTION_GET_RESTRICTION_ENTRIES} action.\n * The receiver then returns a result bundle that contains an entry called \"restrictions\", whose\n * value is an ArrayList<RestrictionsEntry>.\n ",
  "links" : [ "android.content.Intent#ACTION_GET_RESTRICTION_ENTRIES" ],
  "variables" : [ {
    "name" : "TYPE_NULL",
    "type" : "int",
    "comment" : "\n     * Hidden restriction type. Use this type for information that needs to be transferred\n     * across but shouldn't be presented to the user in the UI. Stores a single String value.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_BOOLEAN",
    "type" : "int",
    "comment" : "\n     * Restriction of type \"bool\". Use this for storing a boolean value, typically presented as\n     * a checkbox in the UI.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_CHOICE",
    "type" : "int",
    "comment" : "\n     * Restriction of type \"choice\". Use this for storing a string value, typically presented as\n     * a single-select list. Call {@link #setChoiceEntries(String[])} and\n     * {@link #setChoiceValues(String[])} to set the localized list entries to present to the user\n     * and the corresponding values, respectively.\n     ",
    "links" : [ "#setChoiceValues(String", "#setChoiceEntries(String" ]
  }, {
    "name" : "TYPE_CHOICE_LEVEL",
    "type" : "int",
    "comment" : "\n     * Internal restriction type. Use this for storing a string value, typically presented as\n     * a single-select list. Call {@link #setChoiceEntries(String[])} and\n     * {@link #setChoiceValues(String[])} to set the localized list entries to present to the user\n     * and the corresponding values, respectively.\n     * The presentation could imply that values in lower array indices are included when a\n     * particular value is chosen.\n     * @hide\n     ",
    "links" : [ "#setChoiceValues(String", "#setChoiceEntries(String" ]
  }, {
    "name" : "TYPE_MULTI_SELECT",
    "type" : "int",
    "comment" : "\n     * Restriction of type \"multi-select\". Use this for presenting a multi-select list where more\n     * than one entry can be selected, such as for choosing specific titles to allowlist.\n     * Call {@link #setChoiceEntries(String[])} and\n     * {@link #setChoiceValues(String[])} to set the localized list entries to present to the user\n     * and the corresponding values, respectively.\n     * Use {@link #getAllSelectedStrings()} and {@link #setAllSelectedStrings(String[])} to\n     * manipulate the selections.\n     ",
    "links" : [ "#setChoiceValues(String", "#setChoiceEntries(String", "#getAllSelectedStrings()", "#setAllSelectedStrings(String" ]
  }, {
    "name" : "TYPE_INTEGER",
    "type" : "int",
    "comment" : "\n     * Restriction of type \"integer\". Use this for storing an integer value. The range of values\n     * is from {@link Integer#MIN_VALUE} to {@link Integer#MAX_VALUE}.\n     ",
    "links" : [ "#MIN_VALUE", "#MAX_VALUE" ]
  }, {
    "name" : "TYPE_STRING",
    "type" : "int",
    "comment" : "\n     * Restriction of type \"string\". Use this for storing a string value.\n     * @see #setSelectedString\n     * @see #getSelectedString\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_BUNDLE",
    "type" : "int",
    "comment" : "\n     * Restriction of type \"bundle\". Use this for storing {@link android.os.Bundle bundles} of\n     * restrictions\n     ",
    "links" : [ "android.os.Bundle" ]
  }, {
    "name" : "TYPE_BUNDLE_ARRAY",
    "type" : "int",
    "comment" : "\n     * Restriction of type \"bundle_array\". Use this for storing arrays of\n     * {@link android.os.Bundle bundles} of restrictions\n     ",
    "links" : [ "android.os.Bundle" ]
  }, {
    "name" : "mType",
    "type" : "int",
    "comment" : " The type of restriction. ",
    "links" : [ ]
  }, {
    "name" : "mKey",
    "type" : "String",
    "comment" : " The unique key that identifies the restriction. ",
    "links" : [ ]
  }, {
    "name" : "mTitle",
    "type" : "String",
    "comment" : " The user-visible title of the restriction. ",
    "links" : [ ]
  }, {
    "name" : "mDescription",
    "type" : "String",
    "comment" : " The user-visible secondary description of the restriction. ",
    "links" : [ ]
  }, {
    "name" : "mChoiceEntries",
    "type" : "String[]",
    "comment" : " The user-visible set of choices used for single-select and multi-select lists. ",
    "links" : [ ]
  }, {
    "name" : "mChoiceValues",
    "type" : "String[]",
    "comment" : " The values corresponding to the user-visible choices. The value(s) of this entry will\n     * one or more of these, returned by {@link #getAllSelectedStrings()} and\n     * {@link #getSelectedString()}.\n     ",
    "links" : [ "#getSelectedString()", "#getAllSelectedStrings()" ]
  }, {
    "name" : "mCurrentValue",
    "type" : "String",
    "comment" : " The chosen value, whose content depends on the type of the restriction. ",
    "links" : [ ]
  }, {
    "name" : "mCurrentValues",
    "type" : "String[]",
    "comment" : " List of selected choices in the multi-select case. ",
    "links" : [ ]
  }, {
    "name" : "mRestrictions",
    "type" : "RestrictionEntry[]",
    "comment" : "\n     * List of nested restrictions. Used by {@link #TYPE_BUNDLE bundle} and\n     * {@link #TYPE_BUNDLE_ARRAY bundle_array} restrictions.\n     ",
    "links" : [ "#TYPE_BUNDLE", "#TYPE_BUNDLE_ARRAY" ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<RestrictionEntry>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static RestrictionEntry createBundleEntry(String key, RestrictionEntry[] restrictionEntries)",
    "returnType" : "RestrictionEntry",
    "comment" : "\n     * Creates an entry of type {@link #TYPE_BUNDLE}.\n     * @param key the unique key for this restriction\n     * @param restrictionEntries array of nested restriction entries.\n     * @return the newly created restriction\n     ",
    "links" : [ "#TYPE_BUNDLE" ]
  }, {
    "name" : "public static RestrictionEntry createBundleArrayEntry(String key, RestrictionEntry[] restrictionEntries)",
    "returnType" : "RestrictionEntry",
    "comment" : "\n     * Creates an entry of type {@link #TYPE_BUNDLE_ARRAY}.\n     * @param key the unique key for this restriction\n     * @param restrictionEntries array of nested restriction entries. The array may only contain\n     * elements of type {@link #TYPE_BUNDLE bundle}.\n     * @return the newly created restriction\n     ",
    "links" : [ "#TYPE_BUNDLE", "#TYPE_BUNDLE_ARRAY" ]
  }, {
    "name" : "public void setType(int type)",
    "returnType" : "void",
    "comment" : "\n     * Sets the type for this restriction.\n     * @param type the type for this restriction.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getType()",
    "returnType" : "int",
    "comment" : "\n     * Returns the type for this restriction.\n     * @return the type for this restriction\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getSelectedString()",
    "returnType" : "String",
    "comment" : "\n     * Returns the currently selected string value.\n     * @return the currently selected value, which can be null for types that aren't for holding\n     * single string values.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String[] getAllSelectedStrings()",
    "returnType" : "String[]",
    "comment" : "\n     * Returns the list of currently selected values.\n     * @return the list of current selections, if type is {@link #TYPE_MULTI_SELECT},\n     *  null otherwise.\n     ",
    "links" : [ "#TYPE_MULTI_SELECT" ]
  }, {
    "name" : "public boolean getSelectedState()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the current selected state for an entry of type {@link #TYPE_BOOLEAN}.\n     * @return the current selected state of the entry.\n     ",
    "links" : [ "#TYPE_BOOLEAN" ]
  }, {
    "name" : "public int getIntValue()",
    "returnType" : "int",
    "comment" : "\n     * Returns the value of the entry as an integer when the type is {@link #TYPE_INTEGER}.\n     * @return the integer value of the entry.\n     ",
    "links" : [ "#TYPE_INTEGER" ]
  }, {
    "name" : "public void setIntValue(int value)",
    "returnType" : "void",
    "comment" : "\n     * Sets the integer value of the entry when the type is {@link #TYPE_INTEGER}.\n     * @param value the integer value to set.\n     ",
    "links" : [ "#TYPE_INTEGER" ]
  }, {
    "name" : "public void setSelectedString(String selectedString)",
    "returnType" : "void",
    "comment" : "\n     * Sets the string value to use as the selected value for this restriction. This value will\n     * be persisted by the system for later use by the application.\n     * @param selectedString the string value to select.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSelectedState(boolean state)",
    "returnType" : "void",
    "comment" : "\n     * Sets the current selected state for an entry of type {@link #TYPE_BOOLEAN}. This value will\n     * be persisted by the system for later use by the application.\n     * @param state the current selected state\n     ",
    "links" : [ "#TYPE_BOOLEAN" ]
  }, {
    "name" : "public void setAllSelectedStrings(String[] allSelectedStrings)",
    "returnType" : "void",
    "comment" : "\n     * Sets the current list of selected values for an entry of type {@link #TYPE_MULTI_SELECT}.\n     * These values will be persisted by the system for later use by the application.\n     * @param allSelectedStrings the current list of selected values.\n     ",
    "links" : [ "#TYPE_MULTI_SELECT" ]
  }, {
    "name" : "public void setChoiceValues(String[] choiceValues)",
    "returnType" : "void",
    "comment" : "\n     * Sets a list of string values that can be selected by the user. If no user-visible entries\n     * are set by a call to {@link #setChoiceEntries(String[])}, these values will be the ones\n     * shown to the user. Values will be chosen from this list as the user's selection and the\n     * selected values can be retrieved by a call to {@link #getAllSelectedStrings()}, or\n     * {@link #getSelectedString()}, depending on whether it is a multi-select type or choice type.\n     * This method is not relevant for types other than\n     * {@link #TYPE_CHOICE}, and {@link #TYPE_MULTI_SELECT}.\n     * @param choiceValues an array of Strings which will be the selected values for the user's\n     * selections.\n     * @see #getChoiceValues()\n     * @see #getAllSelectedStrings()\n     ",
    "links" : [ "#TYPE_MULTI_SELECT", "#getSelectedString()", "#TYPE_CHOICE", "#setChoiceEntries(String", "#getAllSelectedStrings()" ]
  }, {
    "name" : "public void setChoiceValues(Context context, @ArrayRes int stringArrayResId)",
    "returnType" : "void",
    "comment" : "\n     * Sets a list of string values that can be selected by the user, similar to\n     * {@link #setChoiceValues(String[])}.\n     * @param context the application context for retrieving the resources.\n     * @param stringArrayResId the resource id for a string array containing the possible values.\n     * @see #setChoiceValues(String[])\n     ",
    "links" : [ "#setChoiceValues(String" ]
  }, {
    "name" : "public RestrictionEntry[] getRestrictions()",
    "returnType" : "RestrictionEntry[]",
    "comment" : "\n     * Returns array of possible restriction entries that this entry may contain.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setRestrictions(RestrictionEntry[] restrictions)",
    "returnType" : "void",
    "comment" : "\n    * Sets an array of possible restriction entries, that this entry may contain.\n    * <p>This method is only relevant for types {@link #TYPE_BUNDLE} and\n    * {@link #TYPE_BUNDLE_ARRAY}\n    ",
    "links" : [ "#TYPE_BUNDLE", "#TYPE_BUNDLE_ARRAY" ]
  }, {
    "name" : "public String[] getChoiceValues()",
    "returnType" : "String[]",
    "comment" : "\n     * Returns the list of possible string values set earlier.\n     * @return the list of possible values.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setChoiceEntries(String[] choiceEntries)",
    "returnType" : "void",
    "comment" : "\n     * Sets a list of strings that will be presented as choices to the user. When the\n     * user selects one or more of these choices, the corresponding value from the possible values\n     * are stored as the selected strings. The size of this array must match the size of the array\n     * set in {@link #setChoiceValues(String[])}. This method is not relevant for types other\n     * than {@link #TYPE_CHOICE}, and {@link #TYPE_MULTI_SELECT}.\n     * @param choiceEntries the list of user-visible choices.\n     * @see #setChoiceValues(String[])\n     ",
    "links" : [ "#TYPE_MULTI_SELECT", "#setChoiceValues(String", "#TYPE_CHOICE" ]
  }, {
    "name" : "public void setChoiceEntries(Context context, @ArrayRes int stringArrayResId)",
    "returnType" : "void",
    "comment" : " Sets a list of strings that will be presented as choices to the user. This is similar to\n     * {@link #setChoiceEntries(String[])}.\n     * @param context the application context, used for retrieving the resources.\n     * @param stringArrayResId the resource id of a string array containing the possible entries.\n     ",
    "links" : [ "#setChoiceEntries(String" ]
  }, {
    "name" : "public String[] getChoiceEntries()",
    "returnType" : "String[]",
    "comment" : "\n     * Returns the list of strings, set earlier, that will be presented as choices to the user.\n     * @return the list of choices presented to the user.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getDescription()",
    "returnType" : "String",
    "comment" : "\n     * Returns the provided user-visible description of the entry, if any.\n     * @return the user-visible description, null if none was set earlier.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDescription(String description)",
    "returnType" : "void",
    "comment" : "\n     * Sets the user-visible description of the entry, as a possible sub-text for the title.\n     * You can use this to describe the entry in more detail or to display the current state of\n     * the restriction.\n     * @param description the user-visible description string.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getKey()",
    "returnType" : "String",
    "comment" : "\n     * This is the unique key for the restriction entry.\n     * @return the key for the restriction.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getTitle()",
    "returnType" : "String",
    "comment" : "\n     * Returns the user-visible title for the entry, if any.\n     * @return the user-visible title for the entry, null if none was set earlier.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTitle(String title)",
    "returnType" : "void",
    "comment" : "\n     * Sets the user-visible title for the entry.\n     * @param title the user-visible title for the entry.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(@Nullable Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static RestrictionEntry createBundleEntry(String key, RestrictionEntry[] restrictionEntries)", "public static RestrictionEntry createBundleArrayEntry(String key, RestrictionEntry[] restrictionEntries)", "public void setType(int type)", "public int getType()", "public String getSelectedString()", "public String[] getAllSelectedStrings()", "public boolean getSelectedState()", "public int getIntValue()", "public void setIntValue(int value)", "public void setSelectedString(String selectedString)", "public void setSelectedState(boolean state)", "public void setAllSelectedStrings(String[] allSelectedStrings)", "public void setChoiceValues(String[] choiceValues)", "public void setChoiceValues(Context context, @ArrayRes int stringArrayResId)", "public RestrictionEntry[] getRestrictions()", "public void setRestrictions(RestrictionEntry[] restrictions)", "public String[] getChoiceValues()", "public void setChoiceEntries(String[] choiceEntries)", "public void setChoiceEntries(Context context, @ArrayRes int stringArrayResId)", "public String[] getChoiceEntries()", "public String getDescription()", "public void setDescription(String description)", "public String getKey()", "public String getTitle()", "public void setTitle(String title)", "public boolean equals(@Nullable Object o)", "public int hashCode()", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)", "public String toString()" ],
  "variableNames" : [ "TYPE_NULL", "TYPE_BOOLEAN", "TYPE_CHOICE", "TYPE_CHOICE_LEVEL", "TYPE_MULTI_SELECT", "TYPE_INTEGER", "TYPE_STRING", "TYPE_BUNDLE", "TYPE_BUNDLE_ARRAY", "mType", "mKey", "mTitle", "mDescription", "mChoiceEntries", "mChoiceValues", "mCurrentValue", "mCurrentValues", "mRestrictions", "CREATOR" ]
}