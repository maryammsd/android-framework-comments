{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xalan/processor/XSLTElementProcessor.java",
  "packageName" : "org.apache.xalan.processor",
  "className" : "XSLTElementProcessor",
  "comment" : "\n * This class acts as the superclass for all stylesheet element\n * processors, and deals with things that are common to all elements.\n * @see <a href=\"http://www.w3.org/TR/xslt#dtd\">XSLT DTD</a>\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_savedLastOrder",
    "type" : "IntStack",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_elemDef",
    "type" : "XSLTElementDef",
    "comment" : "\n   * The element definition that this processor conforms to.\n   ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " XSLTElementDef getElemDef()",
    "returnType" : "XSLTElementDef",
    "comment" : "\n   * Get the element definition that belongs to this element.\n   *\n   * @return The element definition object that produced and constrains this element.\n   ",
    "links" : [ ]
  }, {
    "name" : " void setElemDef(XSLTElementDef def)",
    "returnType" : "void",
    "comment" : "\n   * Set the element definition that belongs to this element.\n   *\n   * @param def The element definition object that produced and constrains this element.\n   ",
    "links" : [ ]
  }, {
    "name" : "public InputSource resolveEntity(StylesheetHandler handler, String publicId, String systemId) throws org.xml.sax.SAXException",
    "returnType" : "InputSource",
    "comment" : "\n   * Resolve an external entity.\n   *\n   *\n   * @param handler non-null reference to current StylesheetHandler that is constructing the Templates.\n   * @param publicId The public identifer, or null if none is\n   *                 available.\n   * @param systemId The system identifier provided in the XML\n   *                 document.\n   * @return The new input source, or null to require the\n   *         default behaviour.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void notationDecl(StylesheetHandler handler, String name, String publicId, String systemId)",
    "returnType" : "void",
    "comment" : "\n   * Receive notification of a notation declaration.\n   *\n   *\n   * @param handler non-null reference to current StylesheetHandler that is constructing the Templates.\n   * @param name The notation name.\n   * @param publicId The notation public identifier, or null if not\n   *                 available.\n   * @param systemId The notation system identifier.\n   * @see org.xml.sax.DTDHandler#notationDecl\n   ",
    "links" : [ ]
  }, {
    "name" : "public void unparsedEntityDecl(StylesheetHandler handler, String name, String publicId, String systemId, String notationName)",
    "returnType" : "void",
    "comment" : "\n   * Receive notification of an unparsed entity declaration.\n   *\n   *\n   * @param handler non-null reference to current StylesheetHandler that is constructing the Templates.\n   * @param name The entity name.\n   * @param publicId The entity public identifier, or null if not\n   *                 available.\n   * @param systemId The entity system identifier.\n   * @param notationName The name of the associated notation.\n   * @see org.xml.sax.DTDHandler#unparsedEntityDecl\n   ",
    "links" : [ ]
  }, {
    "name" : "public void startNonText(StylesheetHandler handler) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n   * Receive notification of the start of the non-text event.  This\n   * is sent to the current processor when any non-text event occurs.\n   *\n   * @param handler non-null reference to current StylesheetHandler that is constructing the Templates.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void startElement(StylesheetHandler handler, String uri, String localName, String rawName, Attributes attributes) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n   * Receive notification of the start of an element.\n   *\n   * @param handler non-null reference to current StylesheetHandler that is constructing the Templates.\n   * @param uri The Namespace URI, or an empty string.\n   * @param localName The local name (without prefix), or empty string if not namespace processing.\n   * @param rawName The qualified name (with prefix).\n   * @param attributes The specified or defaulted attributes.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void endElement(StylesheetHandler handler, String uri, String localName, String rawName) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n   * Receive notification of the end of an element.\n   *\n   * @param handler non-null reference to current StylesheetHandler that is constructing the Templates.\n   * @param uri The Namespace URI, or an empty string.\n   * @param localName The local name (without prefix), or empty string if not namespace processing.\n   * @param rawName The qualified name (with prefix).\n   ",
    "links" : [ ]
  }, {
    "name" : "public void characters(StylesheetHandler handler, char[] ch, int start, int length) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n   * Receive notification of character data inside an element.\n   *\n   *\n   * @param handler non-null reference to current StylesheetHandler that is constructing the Templates.\n   * @param ch The characters.\n   * @param start The start position in the character array.\n   * @param length The number of characters to use from the\n   *               character array.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void ignorableWhitespace(StylesheetHandler handler, char[] ch, int start, int length) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n   * Receive notification of ignorable whitespace in element content.\n   *\n   *\n   * @param handler non-null reference to current StylesheetHandler that is constructing the Templates.\n   * @param ch The whitespace characters.\n   * @param start The start position in the character array.\n   * @param length The number of characters to use from the\n   *               character array.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void processingInstruction(StylesheetHandler handler, String target, String data) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n   * Receive notification of a processing instruction.\n   *\n   *\n   * @param handler non-null reference to current StylesheetHandler that is constructing the Templates.\n   * @param target The processing instruction target.\n   * @param data The processing instruction data, or null if\n   *             none is supplied.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void skippedEntity(StylesheetHandler handler, String name) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n   * Receive notification of a skipped entity.\n   *\n   *\n   * @param handler non-null reference to current StylesheetHandler that is constructing the Templates.\n   * @param name The name of the skipped entity.\n   ",
    "links" : [ ]
  }, {
    "name" : " void setPropertiesFromAttributes(StylesheetHandler handler, String rawName, Attributes attributes, ElemTemplateElement target) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n   * Set the properties of an object from the given attribute list.\n   * @param handler The stylesheet's Content handler, needed for\n   *                error reporting.\n   * @param rawName The raw name of the owner element, needed for\n   *                error reporting.\n   * @param attributes The list of attributes.\n   * @param target The target element where the properties will be set.\n   ",
    "links" : [ ]
  }, {
    "name" : " Attributes setPropertiesFromAttributes(StylesheetHandler handler, String rawName, Attributes attributes, ElemTemplateElement target, boolean throwError) throws org.xml.sax.SAXException",
    "returnType" : "Attributes",
    "comment" : "\n   * Set the properties of an object from the given attribute list.\n   * @param handler The stylesheet's Content handler, needed for\n   *                error reporting.\n   * @param rawName The raw name of the owner element, needed for\n   *                error reporting.\n   * @param attributes The list of attributes.\n   * @param target The target element where the properties will be set.\n   * @param throwError True if it should throw an error if an\n   * attribute is not defined.\n   * @return the attributes not allowed on this element.\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ " XSLTElementDef getElemDef()", " void setElemDef(XSLTElementDef def)", "public InputSource resolveEntity(StylesheetHandler handler, String publicId, String systemId) throws org.xml.sax.SAXException", "public void notationDecl(StylesheetHandler handler, String name, String publicId, String systemId)", "public void unparsedEntityDecl(StylesheetHandler handler, String name, String publicId, String systemId, String notationName)", "public void startNonText(StylesheetHandler handler) throws org.xml.sax.SAXException", "public void startElement(StylesheetHandler handler, String uri, String localName, String rawName, Attributes attributes) throws org.xml.sax.SAXException", "public void endElement(StylesheetHandler handler, String uri, String localName, String rawName) throws org.xml.sax.SAXException", "public void characters(StylesheetHandler handler, char[] ch, int start, int length) throws org.xml.sax.SAXException", "public void ignorableWhitespace(StylesheetHandler handler, char[] ch, int start, int length) throws org.xml.sax.SAXException", "public void processingInstruction(StylesheetHandler handler, String target, String data) throws org.xml.sax.SAXException", "public void skippedEntity(StylesheetHandler handler, String name) throws org.xml.sax.SAXException", " void setPropertiesFromAttributes(StylesheetHandler handler, String rawName, Attributes attributes, ElemTemplateElement target) throws org.xml.sax.SAXException", " Attributes setPropertiesFromAttributes(StylesheetHandler handler, String rawName, Attributes attributes, ElemTemplateElement target, boolean throwError) throws org.xml.sax.SAXException" ],
  "variableNames" : [ "serialVersionUID", "m_savedLastOrder", "m_elemDef" ]
}