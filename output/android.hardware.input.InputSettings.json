{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/input/InputSettings.java",
  "packageName" : "android.hardware.input",
  "className" : "InputSettings",
  "comment" : "\n * InputSettings encapsulates reading and writing settings related to input\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "MIN_POINTER_SPEED",
    "type" : "int",
    "comment" : "\n     * Pointer Speed: The minimum (slowest) pointer speed (-7).\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "MAX_POINTER_SPEED",
    "type" : "int",
    "comment" : "\n     * Pointer Speed: The maximum (fastest) pointer speed (7).\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_POINTER_SPEED",
    "type" : "int",
    "comment" : "\n     * Pointer Speed: The default pointer speed (0).\n     ",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_MAXIMUM_OBSCURING_OPACITY_FOR_TOUCH",
    "type" : "float",
    "comment" : "\n     * The maximum allowed obscuring opacity by UID to propagate touches (0 <= x <= 1).\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "MAX_ACCESSIBILITY_BOUNCE_KEYS_THRESHOLD_MILLIS",
    "type" : "int",
    "comment" : "\n     * The maximum allowed Accessibility bounce keys threshold.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "MAX_ACCESSIBILITY_SLOW_KEYS_THRESHOLD_MILLIS",
    "type" : "int",
    "comment" : "\n     * The maximum allowed Accessibility slow keys threshold.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_STYLUS_POINTER_ICON_ENABLED",
    "type" : "int",
    "comment" : "\n     * Default value for {@link Settings.Secure#STYLUS_POINTER_ICON_ENABLED}.\n     * @hide\n     ",
    "links" : [ "Settings.Secure#STYLUS_POINTER_ICON_ENABLED" ]
  } ],
  "methods" : [ {
    "name" : "public static int getPointerSpeed(Context context)",
    "returnType" : "int",
    "comment" : "\n     * Gets the mouse pointer speed.\n     * <p>\n     * Only returns the permanent mouse pointer speed.  Ignores any temporary pointer\n     * speed set by {@link InputManager#tryPointerSpeed}.\n     * </p>\n     *\n     * @param context The application context.\n     * @return The pointer speed as a value between {@link #MIN_POINTER_SPEED} and\n     * {@link #MAX_POINTER_SPEED}, or the default value {@link #DEFAULT_POINTER_SPEED}.\n     *\n     * @hide\n     ",
    "links" : [ "android.hardware.input.InputManager#tryPointerSpeed", "#MAX_POINTER_SPEED", "#MIN_POINTER_SPEED", "#DEFAULT_POINTER_SPEED" ]
  }, {
    "name" : "public static void setPointerSpeed(Context context, int speed)",
    "returnType" : "void",
    "comment" : "\n     * Sets the mouse pointer speed.\n     * <p>\n     * Requires {@link android.Manifest.permission#WRITE_SETTINGS}.\n     * </p>\n     *\n     * @param context The application context.\n     * @param speed The pointer speed as a value between {@link #MIN_POINTER_SPEED} and\n     * {@link #MAX_POINTER_SPEED}, or the default value {@link #DEFAULT_POINTER_SPEED}.\n     *\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission#WRITE_SETTINGS", "#MAX_POINTER_SPEED", "#MIN_POINTER_SPEED", "#DEFAULT_POINTER_SPEED" ]
  }, {
    "name" : "public static float getMaximumObscuringOpacityForTouch(Context context)",
    "returnType" : "float",
    "comment" : "\n     * Returns the maximum allowed obscuring opacity per UID to propagate touches.\n     *\n     * <p>For certain window types (e.g. {@link LayoutParams#TYPE_APPLICATION_OVERLAY}),\n     * the decision of honoring {@link LayoutParams#FLAG_NOT_TOUCHABLE} or not depends on\n     * the combined obscuring opacity of the windows above the touch-consuming window, per\n     * UID. Check documentation of {@link LayoutParams#FLAG_NOT_TOUCHABLE} for more details.\n     *\n     * <p>The value returned is between 0 (inclusive) and 1 (inclusive).\n     *\n     * @see LayoutParams#FLAG_NOT_TOUCHABLE\n     *\n     * @hide\n     ",
    "links" : [ "#FLAG_NOT_TOUCHABLE", "#TYPE_APPLICATION_OVERLAY" ]
  }, {
    "name" : "public static void setMaximumObscuringOpacityForTouch(@NonNull Context context, @FloatRange(from = 0, to = 1) float opacity)",
    "returnType" : "void",
    "comment" : "\n     * Sets the maximum allowed obscuring opacity by UID to propagate touches.\n     *\n     * <p>For certain window types (e.g. SAWs), the decision of honoring {@link LayoutParams\n     * #FLAG_NOT_TOUCHABLE} or not depends on the combined obscuring opacity of the windows\n     * above the touch-consuming window.\n     *\n     * <p>For a certain UID:\n     * <ul>\n     *     <li>If it's the same as the UID of the touch-consuming window, allow it to propagate\n     *     the touch.\n     *     <li>Otherwise take all its windows of eligible window types above the touch-consuming\n     *     window, compute their combined obscuring opacity considering that {@code\n     *     opacity(A, B) = 1 - (1 - opacity(A))*(1 - opacity(B))}. If the computed value is\n     *     less than or equal to this setting and there are no other windows preventing the\n     *     touch, allow the UID to propagate the touch.\n     * </ul>\n     *\n     * <p>This value should be between 0 (inclusive) and 1 (inclusive).\n     *\n     * @see #getMaximumObscuringOpacityForTouch(Context)\n     *\n     * @hide\n     ",
    "links" : [ "#FLAG_NOT_TOUCHABLE" ]
  }, {
    "name" : "public static boolean isStylusEverUsed(@NonNull Context context)",
    "returnType" : "boolean",
    "comment" : "\n     * Whether stylus has ever been used on device (false by default).\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setStylusEverUsed(@NonNull Context context, boolean stylusEverUsed)",
    "returnType" : "void",
    "comment" : "\n     * Set whether stylus has ever been used on device.\n     * Should only ever be set to true once after stylus first usage.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getTouchpadPointerSpeed(@NonNull Context context)",
    "returnType" : "int",
    "comment" : "\n     * Gets the touchpad pointer speed.\n     *\n     * The returned value only applies to gesture-compatible touchpads.\n     *\n     * @param context The application context.\n     * @return The pointer speed as a value between {@link #MIN_POINTER_SPEED} and\n     * {@link #MAX_POINTER_SPEED}, or the default value {@link #DEFAULT_POINTER_SPEED}.\n     *\n     * @hide\n     ",
    "links" : [ "#MAX_POINTER_SPEED", "#MIN_POINTER_SPEED", "#DEFAULT_POINTER_SPEED" ]
  }, {
    "name" : "public static void setTouchpadPointerSpeed(@NonNull Context context, int speed)",
    "returnType" : "void",
    "comment" : "\n     * Sets the touchpad pointer speed, and saves it in the settings.\n     *\n     * The new speed will only apply to gesture-compatible touchpads.\n     *\n     * @param context The application context.\n     * @param speed The pointer speed as a value between {@link #MIN_POINTER_SPEED} and\n     * {@link #MAX_POINTER_SPEED}, or the default value {@link #DEFAULT_POINTER_SPEED}.\n     *\n     * @hide\n     ",
    "links" : [ "#MAX_POINTER_SPEED", "#MIN_POINTER_SPEED", "#DEFAULT_POINTER_SPEED" ]
  }, {
    "name" : "public static boolean useTouchpadNaturalScrolling(@NonNull Context context)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if moving two fingers upwards on the touchpad should\n     * scroll down, which is known as natural scrolling.\n     *\n     * The returned value only applies to gesture-compatible touchpads.\n     *\n     * @param context The application context.\n     * @return Whether the touchpad should use natural scrolling.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setTouchpadNaturalScrolling(@NonNull Context context, boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * Sets the natural scroll behavior for the touchpad.\n     *\n     * If natural scrolling is enabled, moving two fingers upwards on the\n     * touchpad will scroll down.\n     *\n     * @param context The application context.\n     * @param enabled Will enable natural scroll if true, disable it if false\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean useTouchpadTapToClick(@NonNull Context context)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the touchpad should use tap to click.\n     *\n     * The returned value only applies to gesture-compatible touchpads.\n     *\n     * @param context The application context.\n     * @return Whether the touchpad should use tap to click.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setTouchpadTapToClick(@NonNull Context context, boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * Sets the tap to click behavior for the touchpad.\n     *\n     * The new behavior is only applied to gesture-compatible touchpads.\n     *\n     * @param context The application context.\n     * @param enabled Will enable tap to click if true, disable it if false\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isTouchpadTapDraggingFeatureFlagEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the feature flag for touchpad tap dragging is enabled.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean useTouchpadTapDragging(@NonNull Context context)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the touchpad should allow tap dragging.\n     *\n     * The returned value only applies to gesture-compatible touchpads.\n     *\n     * @param context The application context.\n     * @return Whether the touchpad should allow tap dragging.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setTouchpadTapDragging(@NonNull Context context, boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * Sets the tap dragging behavior for the touchpad.\n     *\n     * The new behavior is only applied to gesture-compatible touchpads.\n     *\n     * @param context The application context.\n     * @param enabled Will enable tap dragging if true, disable it if false\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean useTouchpadRightClickZone(@NonNull Context context)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the touchpad should use the right click zone.\n     *\n     * The returned value only applies to gesture-compatible touchpads.\n     *\n     * @param context The application context.\n     * @return Whether the touchpad should use the right click zone.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setTouchpadRightClickZone(@NonNull Context context, boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * Sets the right click zone behavior for the touchpad.\n     *\n     * The new behavior is only applied to gesture-compatible touchpads.\n     *\n     * @param context The application context.\n     * @param enabled Will enable the right click zone if true, disable it if false\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isStylusPointerIconEnabled(@NonNull Context context, boolean forceReloadSetting)",
    "returnType" : "boolean",
    "comment" : "\n     * Whether a pointer icon will be shown over the location of a stylus pointer.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isStylusPointerIconEnabled(@NonNull Context context)",
    "returnType" : "boolean",
    "comment" : "\n     * Whether a pointer icon will be shown over the location of a stylus pointer.\n     *\n     * @hide\n     * @see #isStylusPointerIconEnabled(Context, boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isAccessibilityBounceKeysFeatureEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Whether Accessibility bounce keys feature is enabled.\n     *\n     * <p>\n     * Bounce keys’ is an accessibility feature to aid users who have physical disabilities,\n     * that allows the user to configure the device to ignore rapid, repeated keypresses of the\n     * same key.\n     * </p>\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isAccessibilityBounceKeysEnabled(@NonNull Context context)",
    "returnType" : "boolean",
    "comment" : "\n     * Whether Accessibility bounce keys is enabled.\n     *\n     * <p>\n     * ‘Bounce keys’ is an accessibility feature to aid users who have physical disabilities,\n     * that allows the user to configure the device to ignore rapid, repeated keypresses of the\n     * same key.\n     * </p>\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getAccessibilityBounceKeysThreshold(@NonNull Context context)",
    "returnType" : "int",
    "comment" : "\n     * Get Accessibility bounce keys threshold duration in milliseconds.\n     *\n     * <p>\n     * ‘Bounce keys’ is an accessibility feature to aid users who have physical disabilities,\n     * that allows the user to configure the device to ignore rapid, repeated keypresses of the\n     * same key.\n     * </p>\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setAccessibilityBounceKeysThreshold(@NonNull Context context, int thresholdTimeMillis)",
    "returnType" : "void",
    "comment" : "\n     * Set Accessibility bounce keys threshold duration in milliseconds.\n     * @param thresholdTimeMillis time duration for which a key down will be ignored after a\n     *                            previous key up for the same key on the same device between 0 and\n     *                            {@link MAX_ACCESSIBILITY_BOUNCE_KEYS_THRESHOLD_MILLIS}\n     *\n     * <p>\n     * ‘Bounce keys’ is an accessibility feature to aid users who have physical disabilities,\n     * that allows the user to configure the device to ignore rapid, repeated keypresses of the\n     * same key.\n     * </p>\n     *\n     * @hide\n     ",
    "links" : [ "MAX_ACCESSIBILITY_BOUNCE_KEYS_THRESHOLD_MILLIS" ]
  }, {
    "name" : "public static boolean isAccessibilitySlowKeysFeatureFlagEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Whether Accessibility slow keys feature flags is enabled.\n     *\n     * <p>\n     * 'Slow keys' is an accessibility feature to aid users who have physical disabilities, that\n     * allows the user to specify the duration for which one must press-and-hold a key before the\n     * system accepts the keypress.\n     * </p>\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isAccessibilitySlowKeysEnabled(@NonNull Context context)",
    "returnType" : "boolean",
    "comment" : "\n     * Whether Accessibility slow keys is enabled.\n     *\n     * <p>\n     * 'Slow keys' is an accessibility feature to aid users who have physical disabilities, that\n     * allows the user to specify the duration for which one must press-and-hold a key before the\n     * system accepts the keypress.\n     * </p>\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getAccessibilitySlowKeysThreshold(@NonNull Context context)",
    "returnType" : "int",
    "comment" : "\n     * Get Accessibility slow keys threshold duration in milliseconds.\n     *\n     * <p>\n     * 'Slow keys' is an accessibility feature to aid users who have physical disabilities, that\n     * allows the user to specify the duration for which one must press-and-hold a key before the\n     * system accepts the keypress.\n     * </p>\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setAccessibilitySlowKeysThreshold(@NonNull Context context, int thresholdTimeMillis)",
    "returnType" : "void",
    "comment" : "\n     * Set Accessibility slow keys threshold duration in milliseconds.\n     * @param thresholdTimeMillis time duration for which a key should be pressed to be registered\n     *                            in the system. The threshold must be between 0 and\n     *                            {@link MAX_ACCESSIBILITY_SLOW_KEYS_THRESHOLD_MILLIS}\n     *\n     * <p>\n     * 'Slow keys' is an accessibility feature to aid users who have physical disabilities, that\n     * allows the user to specify the duration for which one must press-and-hold a key before the\n     * system accepts the keypress.\n     * </p>\n     *\n     * @hide\n     ",
    "links" : [ "MAX_ACCESSIBILITY_SLOW_KEYS_THRESHOLD_MILLIS" ]
  }, {
    "name" : "public static boolean isAccessibilityStickyKeysFeatureEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Whether Accessibility sticky keys feature is enabled.\n     *\n     * <p>\n     * 'Sticky keys' is an accessibility feature that assists users who have physical\n     * disabilities or help users reduce repetitive strain injury. It serializes keystrokes\n     * instead of pressing multiple keys at a time, allowing the user to press and release a\n     * modifier key, such as Shift, Ctrl, Alt, or any other modifier key, and have it remain\n     * active until any other key is pressed.\n     * </p>\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isAccessibilityStickyKeysEnabled(@NonNull Context context)",
    "returnType" : "boolean",
    "comment" : "\n     * Whether Accessibility sticky keys is enabled.\n     *\n     * <p>\n     * 'Sticky keys' is an accessibility feature that assists users who have physical\n     * disabilities or help users reduce repetitive strain injury. It serializes keystrokes\n     * instead of pressing multiple keys at a time, allowing the user to press and release a\n     * modifier key, such as Shift, Ctrl, Alt, or any other modifier key, and have it remain\n     * active until any other key is pressed.\n     * </p>\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setAccessibilityStickyKeysEnabled(@NonNull Context context, boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * Set Accessibility sticky keys feature enabled/disabled.\n     *\n     *  <p>\n     * 'Sticky keys' is an accessibility feature that assists users who have physical\n     * disabilities or help users reduce repetitive strain injury. It serializes keystrokes\n     * instead of pressing multiple keys at a time, allowing the user to press and release a\n     * modifier key, such as Shift, Ctrl, Alt, or any other modifier key, and have it remain\n     * active until any other key is pressed.\n     * </p>\n     *\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static int getPointerSpeed(Context context)", "public static void setPointerSpeed(Context context, int speed)", "public static float getMaximumObscuringOpacityForTouch(Context context)", "public static void setMaximumObscuringOpacityForTouch(@NonNull Context context, @FloatRange(from = 0, to = 1) float opacity)", "public static boolean isStylusEverUsed(@NonNull Context context)", "public static void setStylusEverUsed(@NonNull Context context, boolean stylusEverUsed)", "public static int getTouchpadPointerSpeed(@NonNull Context context)", "public static void setTouchpadPointerSpeed(@NonNull Context context, int speed)", "public static boolean useTouchpadNaturalScrolling(@NonNull Context context)", "public static void setTouchpadNaturalScrolling(@NonNull Context context, boolean enabled)", "public static boolean useTouchpadTapToClick(@NonNull Context context)", "public static void setTouchpadTapToClick(@NonNull Context context, boolean enabled)", "public static boolean isTouchpadTapDraggingFeatureFlagEnabled()", "public static boolean useTouchpadTapDragging(@NonNull Context context)", "public static void setTouchpadTapDragging(@NonNull Context context, boolean enabled)", "public static boolean useTouchpadRightClickZone(@NonNull Context context)", "public static void setTouchpadRightClickZone(@NonNull Context context, boolean enabled)", "public static boolean isStylusPointerIconEnabled(@NonNull Context context, boolean forceReloadSetting)", "public static boolean isStylusPointerIconEnabled(@NonNull Context context)", "public static boolean isAccessibilityBounceKeysFeatureEnabled()", "public static boolean isAccessibilityBounceKeysEnabled(@NonNull Context context)", "public static int getAccessibilityBounceKeysThreshold(@NonNull Context context)", "public static void setAccessibilityBounceKeysThreshold(@NonNull Context context, int thresholdTimeMillis)", "public static boolean isAccessibilitySlowKeysFeatureFlagEnabled()", "public static boolean isAccessibilitySlowKeysEnabled(@NonNull Context context)", "public static int getAccessibilitySlowKeysThreshold(@NonNull Context context)", "public static void setAccessibilitySlowKeysThreshold(@NonNull Context context, int thresholdTimeMillis)", "public static boolean isAccessibilityStickyKeysFeatureEnabled()", "public static boolean isAccessibilityStickyKeysEnabled(@NonNull Context context)", "public static void setAccessibilityStickyKeysEnabled(@NonNull Context context, boolean enabled)" ],
  "variableNames" : [ "MIN_POINTER_SPEED", "MAX_POINTER_SPEED", "DEFAULT_POINTER_SPEED", "DEFAULT_MAXIMUM_OBSCURING_OPACITY_FOR_TOUCH", "MAX_ACCESSIBILITY_BOUNCE_KEYS_THRESHOLD_MILLIS", "MAX_ACCESSIBILITY_SLOW_KEYS_THRESHOLD_MILLIS", "DEFAULT_STYLUS_POINTER_ICON_ENABLED" ]
}