{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/os/FileObserver.java",
  "packageName" : "android.os",
  "className" : "FileObserver",
  "comment" : "\n * Monitors files (using <a href=\"http://en.wikipedia.org/wiki/Inotify\">inotify</a>)\n * to fire an event after files are accessed or changed by any process on\n * the device (including this one).  FileObserver is an abstract class;\n * subclasses must implement the event handler {@link #onEvent(int, String)}.\n *\n * <p>Each FileObserver instance can monitor multiple files or directories.\n * If a directory is monitored, events will be triggered for all files and\n * subdirectories inside the monitored directory.</p>\n *\n * <p>An event mask is used to specify which changes or actions to report.\n * Event type constants are used to describe the possible changes in the\n * event mask as well as what actually happened in event callbacks.</p>\n *\n * <p class=\"caution\"><b>Warning</b>: If a FileObserver is garbage collected, it\n * will stop sending events.  To ensure you keep receiving events, you must\n * keep a reference to the FileObserver instance from some other live object.</p>\n ",
  "links" : [ "#onEvent(int" ],
  "variables" : [ {
    "name" : "ACCESS",
    "type" : "int",
    "comment" : " Event type: Data was read from a file ",
    "links" : [ ]
  }, {
    "name" : "MODIFY",
    "type" : "int",
    "comment" : " Event type: Data was written to a file ",
    "links" : [ ]
  }, {
    "name" : "ATTRIB",
    "type" : "int",
    "comment" : " Event type: Metadata (permissions, owner, timestamp) was changed explicitly ",
    "links" : [ ]
  }, {
    "name" : "CLOSE_WRITE",
    "type" : "int",
    "comment" : " Event type: Someone had a file or directory open for writing, and closed it ",
    "links" : [ ]
  }, {
    "name" : "CLOSE_NOWRITE",
    "type" : "int",
    "comment" : " Event type: Someone had a file or directory open read-only, and closed it ",
    "links" : [ ]
  }, {
    "name" : "OPEN",
    "type" : "int",
    "comment" : " Event type: A file or directory was opened ",
    "links" : [ ]
  }, {
    "name" : "MOVED_FROM",
    "type" : "int",
    "comment" : " Event type: A file or subdirectory was moved from the monitored directory ",
    "links" : [ ]
  }, {
    "name" : "MOVED_TO",
    "type" : "int",
    "comment" : " Event type: A file or subdirectory was moved to the monitored directory ",
    "links" : [ ]
  }, {
    "name" : "CREATE",
    "type" : "int",
    "comment" : " Event type: A new file or subdirectory was created under the monitored directory ",
    "links" : [ ]
  }, {
    "name" : "DELETE",
    "type" : "int",
    "comment" : " Event type: A file was deleted from the monitored directory ",
    "links" : [ ]
  }, {
    "name" : "DELETE_SELF",
    "type" : "int",
    "comment" : " Event type: The monitored file or directory was deleted; monitoring effectively stops ",
    "links" : [ ]
  }, {
    "name" : "MOVE_SELF",
    "type" : "int",
    "comment" : " Event type: The monitored file or directory was moved; monitoring continues ",
    "links" : [ ]
  }, {
    "name" : "ALL_EVENTS",
    "type" : "int",
    "comment" : " Event mask: All valid event types, combined ",
    "links" : [ ]
  }, {
    "name" : "LOG_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "s_observerThread",
    "type" : "ObserverThread",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFiles",
    "type" : "List<File>",
    "comment" : " instance",
    "links" : [ ]
  }, {
    "name" : "mDescriptors",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMask",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected void finalize()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void startWatching()",
    "returnType" : "void",
    "comment" : "\n     * Start watching for events.  The monitored file or directory must exist at\n     * this time, or else no events will be reported (even if it appears later).\n     * If monitoring is already started, this call has no effect.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void stopWatching()",
    "returnType" : "void",
    "comment" : "\n     * Stop watching for events.  Some events may be in process, so events\n     * may continue to be reported even after this method completes.  If\n     * monitoring is already stopped, this call has no effect.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void onEvent(int event, @Nullable String path)",
    "returnType" : "void",
    "comment" : "\n     * The event handler, which must be implemented by subclasses.\n     *\n     * <p class=\"note\">This method is invoked on a special FileObserver thread.\n     * It runs independently of any threads, so take care to use appropriate\n     * synchronization!  Consider using {@link Handler#post(Runnable)} to shift\n     * event handling work to the main thread to avoid concurrency problems.</p>\n     *\n     * <p>Event handlers must not throw exceptions.</p>\n     *\n     * @param event The type of event which happened\n     * @param path The path, relative to the main monitored file or directory,\n     *     of the file or directory which triggered the event.  This value can\n     *     be {@code null} for certain events, such as {@link #MOVE_SELF}.\n     ",
    "links" : [ "#MOVE_SELF", "android.os.Handler#post(Runnable)" ]
  } ],
  "methodNames" : [ "protected void finalize()", "public void startWatching()", "public void stopWatching()", "public abstract void onEvent(int event, @Nullable String path)" ],
  "variableNames" : [ "ACCESS", "MODIFY", "ATTRIB", "CLOSE_WRITE", "CLOSE_NOWRITE", "OPEN", "MOVED_FROM", "MOVED_TO", "CREATE", "DELETE", "DELETE_SELF", "MOVE_SELF", "ALL_EVENTS", "LOG_TAG", "s_observerThread", "mFiles", "mDescriptors", "mMask" ]
}