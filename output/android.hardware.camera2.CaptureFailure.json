{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/hardware/camera2/CaptureFailure.java",
  "packageName" : "android.hardware.camera2",
  "className" : "CaptureFailure",
  "comment" : "\n * A report of failed capture for a single image capture from the image sensor.\n *\n * <p>CaptureFailures are produced by a {@link CameraDevice} if processing a\n * {@link CaptureRequest} fails, either partially or fully. Use {@link #getReason}\n * to determine the specific nature of the failed capture.</p>\n *\n * <p>Receiving a CaptureFailure means that the metadata associated with that frame number\n * has been dropped -- no {@link CaptureResult} with the same frame number will be\n * produced.</p>\n ",
  "variables" : [ {
    "name" : "REASON_ERROR",
    "type" : "int",
    "comment" : "\n     * The {@link CaptureResult} has been dropped this frame only due to an error\n     * in the framework.\n     *\n     * @see #getReason()\n     ",
    "links" : [ "android.hardware.camera2.CaptureResult" ]
  }, {
    "name" : "REASON_FLUSHED",
    "type" : "int",
    "comment" : "\n     * The capture has failed due to a {@link CameraCaptureSession#abortCaptures} call from the\n     * application.\n     *\n     * @see #getReason()\n     ",
    "links" : [ "android.hardware.camera2.CameraCaptureSession#abortCaptures" ]
  }, {
    "name" : "mRequest",
    "type" : "CaptureRequest",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mReason",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDropped",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSequenceId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFrameNumber",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mErrorPhysicalCameraId",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public CaptureRequest getRequest()",
    "returnType" : "CaptureRequest",
    "comment" : "\n     * Get the request associated with this failed capture.\n     *\n     * <p>Whenever a request is unsuccessfully captured, with\n     * {@link CameraCaptureSession.CaptureCallback#onCaptureFailed},\n     * the {@code failed capture}'s {@code getRequest()} will return that {@code request}.\n     * </p>\n     *\n     * <p>In particular,\n     * <code><pre>cameraDevice.capture(someRequest, new CaptureCallback() {\n     *     {@literal @}Override\n     *     void onCaptureFailed(CaptureRequest myRequest, CaptureFailure myFailure) {\n     *         assert(myFailure.getRequest.equals(myRequest) == true);\n     *     }\n     * };\n     * </code></pre>\n     * </p>\n     *\n     * @return The request associated with this failed capture. Never {@code null}.\n     ",
    "links" : [ "CameraCaptureSession.CaptureCallback#onCaptureFailed" ]
  }, {
    "name" : "public long getFrameNumber()",
    "returnType" : "long",
    "comment" : "\n     * Get the frame number associated with this failed capture.\n     *\n     * <p>Whenever a request has been processed, regardless of failed capture or success,\n     * it gets a unique frame number assigned to its future result/failed capture.</p>\n     *\n     * <p>This value monotonically increments, starting with 0,\n     * for every new result or failure; and the scope is the lifetime of the\n     * {@link CameraDevice}.</p>\n     *\n     * @return long frame number\n     ",
    "links" : [ "android.hardware.camera2.CameraDevice" ]
  }, {
    "name" : "public int getReason()",
    "returnType" : "int",
    "comment" : "\n     * Determine why the request was dropped, whether due to an error or to a user\n     * action.\n     *\n     * @return int The reason code.\n     *\n     * @see #REASON_ERROR\n     * @see #REASON_FLUSHED\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean wasImageCaptured()",
    "returnType" : "boolean",
    "comment" : "\n     * Determine if the image was captured from the camera.\n     *\n     * <p>If the image was not captured, no image buffers will be available.\n     * If the image was captured, then image buffers may be available.</p>\n     *\n     * @return boolean True if the image was captured, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getSequenceId()",
    "returnType" : "int",
    "comment" : "\n     * The sequence ID for this failed capture that was returned by the\n     * {@link CameraCaptureSession#capture} family of functions.\n     *\n     * <p>The sequence ID is a unique monotonically increasing value starting from 0,\n     * incremented every time a new group of requests is submitted to the CameraDevice.</p>\n     *\n     * @return int The ID for the sequence of requests that this capture failure is the result of\n     *\n     * @see CameraCaptureSession.CaptureCallback#onCaptureSequenceCompleted\n     ",
    "links" : [ "android.hardware.camera2.CameraCaptureSession#capture" ]
  }, {
    "name" : "public String getPhysicalCameraId()",
    "returnType" : "String",
    "comment" : "\n     * The physical camera device ID in case the capture failure comes from a {@link CaptureRequest}\n     * with configured physical camera streams for a logical camera.\n     *\n     * @return String The physical camera device ID of the respective failing output.\n     *         {@code null} in case the capture request has no associated physical camera device.\n     * @see CaptureRequest.Builder#setPhysicalCameraKey\n     * @see android.hardware.camera2.params.OutputConfiguration#setPhysicalCameraId\n     ",
    "links" : [ "android.hardware.camera2.CaptureRequest" ]
  } ],
  "variableNames" : [ "REASON_ERROR", "REASON_FLUSHED", "mRequest", "mReason", "mDropped", "mSequenceId", "mFrameNumber", "mErrorPhysicalCameraId" ],
  "methodNames" : [ "public CaptureRequest getRequest()", "public long getFrameNumber()", "public int getReason()", "public boolean wasImageCaptured()", "public int getSequenceId()", "public String getPhysicalCameraId()" ]
}