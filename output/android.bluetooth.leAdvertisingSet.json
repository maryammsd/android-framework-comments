{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/bluetooth/le/AdvertisingSet.java",
  "packageName" : "android.bluetooth.le",
  "className" : "AdvertisingSet",
  "comment" : "\n * This class provides a way to control single Bluetooth LE advertising instance.\n * <p>\n * To get an instance of {@link AdvertisingSet}, call the\n * {@link BluetoothLeAdvertiser#startAdvertisingSet} method.\n * <p>\n * <b>Note:</b> Most of the methods here require {@link android.Manifest.permission#BLUETOOTH_ADMIN}\n * permission.\n *\n * @see AdvertiseData\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGatt",
    "type" : "IBluetoothGatt",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAdvertiserId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " void setAdvertiserId(int advertiserId)",
    "returnType" : "void",
    "comment" : " package ",
    "links" : [ ]
  }, {
    "name" : "public void enableAdvertising(boolean enable, int duration, int maxExtendedAdvertisingEvents)",
    "returnType" : "void",
    "comment" : "\n     * Enables Advertising. This method returns immediately, the operation status is\n     * delivered through {@code callback.onAdvertisingEnabled()}.\n     * <p>\n     * Requires {@link android.Manifest.permission#BLUETOOTH_ADMIN}\n     *\n     * @param enable whether the advertising should be enabled (true), or disabled (false)\n     * @param duration advertising duration, in 10ms unit. Valid range is from 1 (10ms) to 65535\n     * (655,350 ms)\n     * @param maxExtendedAdvertisingEvents maximum number of extended advertising events the\n     * controller shall attempt to send prior to terminating the extended advertising, even if the\n     * duration has not expired. Valid range is from 1 to 255.\n     ",
    "links" : [ "android.Manifest.permission#BLUETOOTH_ADMIN" ]
  }, {
    "name" : "public void setAdvertisingData(AdvertiseData advertiseData)",
    "returnType" : "void",
    "comment" : "\n     * Set/update data being Advertised. Make sure that data doesn't exceed the size limit for\n     * specified AdvertisingSetParameters. This method returns immediately, the operation status is\n     * delivered through {@code callback.onAdvertisingDataSet()}.\n     * <p>\n     * Advertising data must be empty if non-legacy scannable advertising is used.\n     *\n     * @param advertiseData Advertisement data to be broadcasted. Size must not exceed {@link\n     * BluetoothAdapter#getLeMaximumAdvertisingDataLength}. If the advertisement is connectable,\n     * three bytes will be added for flags. If the update takes place when the advertising set is\n     * enabled, the data can be maximum 251 bytes long.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setScanResponseData(AdvertiseData scanResponse)",
    "returnType" : "void",
    "comment" : "\n     * Set/update scan response data. Make sure that data doesn't exceed the size limit for\n     * specified AdvertisingSetParameters. This method returns immediately, the operation status\n     * is delivered through {@code callback.onScanResponseDataSet()}.\n     *\n     * @param scanResponse Scan response associated with the advertisement data. Size must not\n     * exceed {@link BluetoothAdapter#getLeMaximumAdvertisingDataLength}. If the update takes place\n     * when the advertising set is enabled, the data can be maximum 251 bytes long.\n     ",
    "links" : [ "BluetoothAdapter#getLeMaximumAdvertisingDataLength" ]
  }, {
    "name" : "public void setAdvertisingParameters(AdvertisingSetParameters parameters)",
    "returnType" : "void",
    "comment" : "\n     * Update advertising parameters associated with this AdvertisingSet. Must be called when\n     * advertising is not active. This method returns immediately, the operation status is delivered\n     * through {@code callback.onAdvertisingParametersUpdated}.\n     *\n     * @param parameters advertising set parameters.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPeriodicAdvertisingParameters(PeriodicAdvertisingParameters parameters)",
    "returnType" : "void",
    "comment" : "\n     * Update periodic advertising parameters associated with this set. Must be called when\n     * periodic advertising is not enabled. This method returns immediately, the operation\n     * status is delivered through {@code callback.onPeriodicAdvertisingParametersUpdated()}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPeriodicAdvertisingData(AdvertiseData periodicData)",
    "returnType" : "void",
    "comment" : "\n     * Used to set periodic advertising data, must be called after setPeriodicAdvertisingParameters,\n     * or after advertising was started with periodic advertising data set. This method returns\n     * immediately, the operation status is delivered through\n     * {@code callback.onPeriodicAdvertisingDataSet()}.\n     *\n     * @param periodicData Periodic advertising data. Size must not exceed {@link\n     * BluetoothAdapter#getLeMaximumAdvertisingDataLength}. If the update takes place when the\n     * periodic advertising is enabled for this set, the data can be maximum 251 bytes long.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPeriodicAdvertisingEnabled(boolean enable)",
    "returnType" : "void",
    "comment" : "\n     * Used to enable/disable periodic advertising. This method returns immediately, the operation\n     * status is delivered through {@code callback.onPeriodicAdvertisingEnable()}.\n     *\n     * @param enable whether the periodic advertising should be enabled (true), or disabled\n     * (false).\n     ",
    "links" : [ ]
  }, {
    "name" : "public void getOwnAddress()",
    "returnType" : "void",
    "comment" : "\n     * Returns address associated with this advertising set.\n     * This method is exposed only for Bluetooth PTS tests, no app or system service\n     * should ever use it.\n     *\n     * This method requires {@link android.Manifest.permission#BLUETOOTH_PRIVILEGED} permission.\n     *\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission#BLUETOOTH_PRIVILEGED" ]
  }, {
    "name" : "public int getAdvertiserId()",
    "returnType" : "int",
    "comment" : "\n     * Returns advertiserId associated with this advertising set.\n     *\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "mGatt", "mAdvertiserId" ],
  "methodNames" : [ " void setAdvertiserId(int advertiserId)", "public void enableAdvertising(boolean enable, int duration, int maxExtendedAdvertisingEvents)", "public void setAdvertisingData(AdvertiseData advertiseData)", "public void setScanResponseData(AdvertiseData scanResponse)", "public void setAdvertisingParameters(AdvertisingSetParameters parameters)", "public void setPeriodicAdvertisingParameters(PeriodicAdvertisingParameters parameters)", "public void setPeriodicAdvertisingData(AdvertiseData periodicData)", "public void setPeriodicAdvertisingEnabled(boolean enable)", "public void getOwnAddress()", "public int getAdvertiserId()" ]
}