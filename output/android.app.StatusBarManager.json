{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/StatusBarManager.java",
  "packageName" : "android.app",
  "className" : "StatusBarManager",
  "comment" : "\n * Allows an app to control the status bar.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "DISABLE_EXPAND",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DISABLE_NOTIFICATION_ICONS",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DISABLE_NOTIFICATION_ALERTS",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DISABLE_NOTIFICATION_TICKER",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DISABLE_SYSTEM_INFO",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DISABLE_HOME",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DISABLE_RECENT",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DISABLE_BACK",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DISABLE_CLOCK",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DISABLE_SEARCH",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DISABLE_ONGOING_CALL_CHIP",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DISABLE_NAVIGATION",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DISABLE_NONE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DISABLE_MASK",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DISABLE2_QUICK_SETTINGS",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DISABLE2_SYSTEM_ICONS",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DISABLE2_NOTIFICATION_SHADE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DISABLE2_GLOBAL_ACTIONS",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DISABLE2_ROTATE_SUGGESTIONS",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DISABLE2_NONE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DISABLE2_MASK",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_SETUP_DISABLE_FLAGS",
    "type" : "int",
    "comment" : "\n     * Default disable flags for setup\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_SETUP_DISABLE2_FLAGS",
    "type" : "int",
    "comment" : "\n     * Default disable2 flags for setup\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_SIM_LOCKED_DISABLED_FLAGS",
    "type" : "int",
    "comment" : "\n     * disable flags to be applied when the device is sim-locked.\n     ",
    "links" : [ ]
  }, {
    "name" : "NAVIGATION_HINT_BACK_ALT",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "NAVIGATION_HINT_IME_SHOWN",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "NAVIGATION_HINT_IME_SWITCHER_SHOWN",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "WINDOW_STATUS_BAR",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "WINDOW_NAVIGATION_BAR",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "WINDOW_STATE_SHOWING",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "WINDOW_STATE_HIDING",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "WINDOW_STATE_HIDDEN",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CAMERA_LAUNCH_SOURCE_WIGGLE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CAMERA_LAUNCH_SOURCE_POWER_DOUBLE_TAP",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CAMERA_LAUNCH_SOURCE_LIFT_TRIGGER",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CAMERA_LAUNCH_SOURCE_QUICK_AFFORDANCE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "ACTION_KEYGUARD_PRIVATE_NOTIFICATIONS_CHANGED",
    "type" : "String",
    "comment" : "\n     * Broadcast action: sent to apps that hold the status bar permission when\n     * KeyguardManager#setPrivateNotificationsAllowed() is changed.\n     *\n     * Extras: #EXTRA_KM_PRIVATE_NOTIFS_ALLOWED\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_KM_PRIVATE_NOTIFS_ALLOWED",
    "type" : "String",
    "comment" : "\n     * Boolean, the latest value of KeyguardManager#getPrivateNotificationsAllowed()\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SESSION_KEYGUARD",
    "type" : "int",
    "comment" : "\n     * Session flag for {@link #registerSessionListener} indicating the listener\n     * is interested in sessions on the keygaurd.\n     * Keyguard Session Boundaries:\n     *     START_SESSION: device starts going to sleep OR the keyguard is newly shown\n     *     END_SESSION: device starts going to sleep OR keyguard is no longer showing\n     * @hide\n     ",
    "links" : [ "#registerSessionListener" ]
  }, {
    "name" : "SESSION_BIOMETRIC_PROMPT",
    "type" : "int",
    "comment" : "\n     * Session flag for {@link #registerSessionListener} indicating the current session\n     * is interested in session on the biometric prompt.\n     * @hide\n     ",
    "links" : [ "#registerSessionListener" ]
  }, {
    "name" : "ALL_SESSIONS",
    "type" : "Set<Integer>",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TILE_ADD_REQUEST_RESULT_TILE_NOT_ADDED",
    "type" : "int",
    "comment" : "\n     * Response indicating that the tile was not added.\n     ",
    "links" : [ ]
  }, {
    "name" : "TILE_ADD_REQUEST_RESULT_TILE_ALREADY_ADDED",
    "type" : "int",
    "comment" : "\n     * Response indicating that the tile was already added and the user was not prompted.\n     ",
    "links" : [ ]
  }, {
    "name" : "TILE_ADD_REQUEST_RESULT_TILE_ADDED",
    "type" : "int",
    "comment" : "\n     * Response indicating that the tile was added.\n     ",
    "links" : [ ]
  }, {
    "name" : "TILE_ADD_REQUEST_RESULT_DIALOG_DISMISSED",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TILE_ADD_REQUEST_FIRST_ERROR_CODE",
    "type" : "int",
    "comment" : "\n     * Values greater or equal to this value indicate an error in the request.\n     ",
    "links" : [ ]
  }, {
    "name" : "TILE_ADD_REQUEST_ERROR_MISMATCHED_PACKAGE",
    "type" : "int",
    "comment" : "\n     * Indicates that this package does not match that of the\n     * {@link android.service.quicksettings.TileService}.\n     ",
    "links" : [ "android.service.quicksettings.TileService" ]
  }, {
    "name" : "TILE_ADD_REQUEST_ERROR_REQUEST_IN_PROGRESS",
    "type" : "int",
    "comment" : "\n     * Indicates that there's a request in progress for this package.\n     ",
    "links" : [ ]
  }, {
    "name" : "TILE_ADD_REQUEST_ERROR_BAD_COMPONENT",
    "type" : "int",
    "comment" : "\n     * Indicates that the component does not match an enabled exported\n     * {@link android.service.quicksettings.TileService} for the current user.\n     ",
    "links" : [ "android.service.quicksettings.TileService" ]
  }, {
    "name" : "TILE_ADD_REQUEST_ERROR_NOT_CURRENT_USER",
    "type" : "int",
    "comment" : "\n     * Indicates that the user is not the current user.\n     ",
    "links" : [ ]
  }, {
    "name" : "TILE_ADD_REQUEST_ERROR_APP_NOT_IN_FOREGROUND",
    "type" : "int",
    "comment" : "\n     * Indicates that the requesting application is not in the foreground.\n     ",
    "links" : [ ]
  }, {
    "name" : "TILE_ADD_REQUEST_ERROR_NO_STATUS_BAR_SERVICE",
    "type" : "int",
    "comment" : "\n     * The request could not be processed because no fulfilling service was found. This could be\n     * a temporary issue (for example, SystemUI has crashed).\n     ",
    "links" : [ ]
  }, {
    "name" : "NAV_BAR_MODE_DEFAULT",
    "type" : "int",
    "comment" : "\n     * Constant for {@link #setNavBarMode(int)} indicating the default navbar mode.\n     *\n     * @hide\n     ",
    "links" : [ "#setNavBarMode(int)" ]
  }, {
    "name" : "NAV_BAR_MODE_KIDS",
    "type" : "int",
    "comment" : "\n     * Constant for {@link #setNavBarMode(int)} indicating kids navbar mode.\n     *\n     * <p>When used, back and home icons will change drawables and layout, recents will be hidden,\n     * and enables the setting to force navbar visible, even when apps are in immersive mode.\n     *\n     * @hide\n     ",
    "links" : [ "#setNavBarMode(int)" ]
  }, {
    "name" : "MEDIA_TRANSFER_SENDER_STATE_ALMOST_CLOSE_TO_START_CAST",
    "type" : "int",
    "comment" : "\n     * State indicating that this sender device is close to a receiver device, so the user can\n     * potentially *start* a cast to the receiver device if the user moves their device a bit\n     * closer.\n     * <p>\n     * Important notes:\n     * <ul>\n     *     <li>This state represents that the device is close enough to inform the user that\n     *     transferring is an option, but the device is *not* close enough to actually initiate a\n     *     transfer yet.</li>\n     *     <li>This state is for *starting* a cast. It should be used when this device is currently\n     *     playing media locally and the media should be transferred to be played on the receiver\n     *     device instead.</li>\n     * </ul>\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "MEDIA_TRANSFER_SENDER_STATE_ALMOST_CLOSE_TO_END_CAST",
    "type" : "int",
    "comment" : "\n     * State indicating that this sender device is close to a receiver device, so the user can\n     * potentially *end* a cast on the receiver device if the user moves this device a bit closer.\n     * <p>\n     * Important notes:\n     * <ul>\n     *     <li>This state represents that the device is close enough to inform the user that\n     *     transferring is an option, but the device is *not* close enough to actually initiate a\n     *     transfer yet.</li>\n     *     <li>This state is for *ending* a cast. It should be used when media is currently being\n     *     played on the receiver device and the media should be transferred to play locally\n     *     instead.</li>\n     * </ul>\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "MEDIA_TRANSFER_SENDER_STATE_TRANSFER_TO_RECEIVER_TRIGGERED",
    "type" : "int",
    "comment" : "\n     * State indicating that a media transfer from this sender device to a receiver device has been\n     * started.\n     * <p>\n     * Important note: This state is for *starting* a cast. It should be used when this device is\n     * currently playing media locally and the media has started being transferred to the receiver\n     * device instead.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "MEDIA_TRANSFER_SENDER_STATE_TRANSFER_TO_THIS_DEVICE_TRIGGERED",
    "type" : "int",
    "comment" : "\n     * State indicating that a media transfer from the receiver and back to this sender device\n     * has been started.\n     * <p>\n     * Important note: This state is for *ending* a cast. It should be used when media is currently\n     * being played on the receiver device and the media has started being transferred to play\n     * locally instead.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "MEDIA_TRANSFER_SENDER_STATE_TRANSFER_TO_RECEIVER_SUCCEEDED",
    "type" : "int",
    "comment" : "\n     * State indicating that a media transfer from this sender device to a receiver device has\n     * finished successfully.\n     * <p>\n     * Important note: This state is for *starting* a cast. It should be used when this device had\n     * previously been playing media locally and the media has successfully been transferred to the\n     * receiver device instead.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "MEDIA_TRANSFER_SENDER_STATE_TRANSFER_TO_THIS_DEVICE_SUCCEEDED",
    "type" : "int",
    "comment" : "\n     * State indicating that a media transfer from the receiver and back to this sender device has\n     * finished successfully.\n     * <p>\n     * Important note: This state is for *ending* a cast. It should be used when media was\n     * previously being played on the receiver device and has been successfully transferred to play\n     * locally on this device instead.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "MEDIA_TRANSFER_SENDER_STATE_TRANSFER_TO_RECEIVER_FAILED",
    "type" : "int",
    "comment" : "\n     * State indicating that the attempted transfer to the receiver device has failed.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "MEDIA_TRANSFER_SENDER_STATE_TRANSFER_TO_THIS_DEVICE_FAILED",
    "type" : "int",
    "comment" : "\n     * State indicating that the attempted transfer back to this device has failed.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "MEDIA_TRANSFER_SENDER_STATE_FAR_FROM_RECEIVER",
    "type" : "int",
    "comment" : "\n     * State indicating that this sender device is no longer close to the receiver device.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "MEDIA_TRANSFER_RECEIVER_STATE_CLOSE_TO_SENDER",
    "type" : "int",
    "comment" : "\n     * State indicating that this receiver device is close to a sender device, so the user can\n     * potentially start or end a cast to the receiver device if the user moves the sender device a\n     * bit closer.\n     * <p>\n     * Important note: This state represents that the device is close enough to inform the user that\n     * transferring is an option, but the device is *not* close enough to actually initiate a\n     * transfer yet.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "MEDIA_TRANSFER_RECEIVER_STATE_FAR_FROM_SENDER",
    "type" : "int",
    "comment" : "\n     * State indicating that this receiver device is no longer close to the sender device.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "MEDIA_TRANSFER_RECEIVER_STATE_TRANSFER_TO_RECEIVER_SUCCEEDED",
    "type" : "int",
    "comment" : "\n     * State indicating that media transfer to this receiver device is succeeded.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "MEDIA_TRANSFER_RECEIVER_STATE_TRANSFER_TO_RECEIVER_FAILED",
    "type" : "int",
    "comment" : "\n     * State indicating that media transfer to this receiver device is failed.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "nearbyMediaDevicesProviderMap",
    "type" : "Map<NearbyMediaDevicesProvider, NearbyMediaDevicesProviderWrapper>",
    "comment" : "\n     * A map from a provider registered in\n     * {@link #registerNearbyMediaDevicesProvider(NearbyMediaDevicesProvider)} to the wrapper\n     * around the provider that was created internally. We need the wrapper to make the provider\n     * binder-compatible, and we need to store a reference to the wrapper so that when the provider\n     * is un-registered, we un-register the saved wrapper instance.\n     ",
    "links" : [ "#registerNearbyMediaDevicesProvider(NearbyMediaDevicesProvider)" ]
  }, {
    "name" : "MEDIA_CONTROL_SESSION_ACTIONS",
    "type" : "long",
    "comment" : "\n     * Media controls based on {@link android.app.Notification.MediaStyle} notifications will have\n     * actions based on the media session's {@link android.media.session.PlaybackState}, rather than\n     * the notification's actions.\n     *\n     * These actions will be:\n     * - Play/Pause (depending on whether the current state is a playing state)\n     * - Previous (if declared), or a custom action if the slot is not reserved with\n     *   {@code SESSION_EXTRAS_KEY_SLOT_RESERVATION_SKIP_TO_PREV}\n     * - Next (if declared), or a custom action if the slot is not reserved with\n     *   {@code SESSION_EXTRAS_KEY_SLOT_RESERVATION_SKIP_TO_NEXT}\n     * - Custom action\n     * - Custom action\n     *\n     * @see androidx.media.utils.MediaConstants#SESSION_EXTRAS_KEY_SLOT_RESERVATION_SKIP_TO_PREV\n     * @see androidx.media.utils.MediaConstants#SESSION_EXTRAS_KEY_SLOT_RESERVATION_SKIP_TO_NEXT\n     ",
    "links" : [ "android.app.Notification.MediaStyle", "android.media.session.PlaybackState" ]
  }, {
    "name" : "MEDIA_CONTROL_BLANK_TITLE",
    "type" : "long",
    "comment" : "\n     * Media controls based on {@link android.app.Notification.MediaStyle} notifications should\n     * include a non-empty title, either in the {@link android.media.MediaMetadata} or\n     * notification title.\n     ",
    "links" : [ "android.app.Notification.MediaStyle", "android.media.MediaMetadata" ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IStatusBarService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mToken",
    "type" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPlatformCompat",
    "type" : "IPlatformCompat",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private synchronized IStatusBarService getService()",
    "returnType" : "IStatusBarService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void disable(int what)",
    "returnType" : "void",
    "comment" : "\n     * Disable some features in the status bar.  Pass the bitwise-or of the DISABLE_* flags.\n     * To re-enable everything, pass {@link #DISABLE_NONE}.\n     *\n     * @hide\n     ",
    "links" : [ "#DISABLE_NONE" ]
  }, {
    "name" : "public void disable2(@Disable2Flags int what)",
    "returnType" : "void",
    "comment" : "\n     * Disable additional status bar features. Pass the bitwise-or of the DISABLE2_* flags.\n     * To re-enable everything, pass {@link #DISABLE_NONE}.\n     *\n     * Warning: Only pass DISABLE2_* flags into this function, do not use DISABLE_* flags.\n     *\n     * @hide\n     ",
    "links" : [ "#DISABLE_NONE" ]
  }, {
    "name" : "public void clickNotification(@Nullable String key, int rank, int count, boolean visible)",
    "returnType" : "void",
    "comment" : "\n     * Simulate notification click for testing\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void clickNotificationInternal(String key, int rank, int count, boolean visible)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void sendNotificationFeedback(@Nullable String key, @Nullable Bundle feedback)",
    "returnType" : "void",
    "comment" : "\n     * Simulate notification feedback for testing\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void expandNotificationsPanel()",
    "returnType" : "void",
    "comment" : "\n     * Expand the notifications panel.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void collapsePanels()",
    "returnType" : "void",
    "comment" : "\n     * Collapse the notifications and settings panels.\n     *\n     * Starting in Android {@link Build.VERSION_CODES.S}, apps targeting SDK level {@link\n     * Build.VERSION_CODES.S} or higher will need {@link android.Manifest.permission.STATUS_BAR}\n     * permission to call this API.\n     *\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission.STATUS_BAR", "Build.VERSION_CODES.S" ]
  }, {
    "name" : "public void togglePanel()",
    "returnType" : "void",
    "comment" : "\n     * Toggles the notification panel.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void handleSystemKey(@NonNull KeyEvent key)",
    "returnType" : "void",
    "comment" : "\n     * Sends system keys to the status bar.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getLastSystemKey()",
    "returnType" : "int",
    "comment" : "\n     * Gets the last handled system key. A system key is a KeyEvent that the\n     * {@link com.android.server.policy.PhoneWindowManager} sends directly to the\n     * status bar, rather than forwarding to apps. If a key has never been sent to the\n     * status bar, will return -1.\n     *\n     * @return the keycode of the last KeyEvent that has been sent to the system.\n     * @hide\n     ",
    "links" : [ "com.android.server.policy.PhoneWindowManager" ]
  }, {
    "name" : "public void expandSettingsPanel()",
    "returnType" : "void",
    "comment" : "\n     * Expand the settings panel.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void expandSettingsPanel(@Nullable String subPanel)",
    "returnType" : "void",
    "comment" : "\n     * Expand the settings panel and open a subPanel. If the subpanel is null or does not have a\n     * corresponding tile, the QS panel is simply expanded\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setIcon(String slot, int iconId, int iconLevel, String contentDescription)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void removeIcon(String slot)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setIconVisibility(String slot, boolean visible)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setDisabledForSetup(boolean disabled)",
    "returnType" : "void",
    "comment" : "\n     * Enable or disable status bar elements (notifications, clock) which are inappropriate during\n     * device setup.\n     *\n     * @param disabled whether to apply or remove the disabled flags\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setExpansionDisabledForSimNetworkLock(boolean disabled)",
    "returnType" : "void",
    "comment" : "\n     * Enable or disable expansion of the status bar. When the device is SIM-locked, the status\n     * bar should not be expandable.\n     *\n     * @param disabled If {@code true}, the status bar will be set to non-expandable. If\n     *                 {@code false}, re-enables expansion of the status bar.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public DisableInfo getDisableInfo()",
    "returnType" : "DisableInfo",
    "comment" : "\n     * Get this app's currently requested disabled components\n     *\n     * @return a new DisableInfo\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void requestTileServiceListeningState(@NonNull ComponentName componentName)",
    "returnType" : "void",
    "comment" : "\n     * Sets an active {@link android.service.quicksettings.TileService} to listening state\n     *\n     * The {@code componentName}'s package must match the calling package.\n     *\n     * @param componentName the tile to set into listening state\n     * @see android.service.quicksettings.TileService#requestListeningState\n     * @hide\n     ",
    "links" : [ "android.service.quicksettings.TileService" ]
  }, {
    "name" : "public void requestAddTileService(@NonNull ComponentName tileServiceComponentName, @NonNull CharSequence tileLabel, @NonNull Icon icon, @NonNull Executor resultExecutor, @NonNull Consumer<Integer> resultCallback)",
    "returnType" : "void",
    "comment" : "\n     * Request to the user to add a {@link android.service.quicksettings.TileService}\n     * to the set of current QS tiles.\n     * <p>\n     * Calling this will prompt the user to decide whether they want to add the shown\n     * {@link android.service.quicksettings.TileService} to their current tiles. The user can\n     * deny the request and the system can stop processing requests for a given\n     * {@link ComponentName} after a number of requests.\n     * <p>\n     * The request will show to the user information about the tile:\n     * <ul>\n     *     <li>Application name</li>\n     *     <li>Label for the tile</li>\n     *     <li>Icon for the tile</li>\n     * </ul>\n     * <p>\n     * The user for which this will be added is determined from the {@link Context} used to retrieve\n     * this service, and must match the current user. The requesting application must be in the\n     * foreground ({@link ActivityManager.RunningAppProcessInfo#IMPORTANCE_FOREGROUND}\n     * and the {@link android.service.quicksettings.TileService} must be exported.\n     *\n     * Note: the system can choose to auto-deny a request if the user has denied that specific\n     * request (user, ComponentName) enough times before.\n     *\n     * @param tileServiceComponentName {@link ComponentName} of the\n     *        {@link android.service.quicksettings.TileService} for the request.\n     * @param tileLabel label of the tile to show to the user.\n     * @param icon icon to use in the tile shown to the user.\n     * @param resultExecutor an executor to run the callback on\n     * @param resultCallback callback to indicate the result of the request.\n     *\n     * @see android.service.quicksettings.TileService\n     ",
    "links" : [ "android.service.quicksettings.TileService", "ActivityManager.RunningAppProcessInfo#IMPORTANCE_FOREGROUND", "android.content.Context", "android.content.ComponentName" ]
  }, {
    "name" : "public void cancelRequestAddTile(@NonNull String packageName)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     * @param packageName\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setNavBarMode(@NavBarMode int navBarMode)",
    "returnType" : "void",
    "comment" : "\n     * Sets or removes the navigation bar mode.\n     *\n     * @param navBarMode the mode of the navigation bar to be set.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getNavBarMode()",
    "returnType" : "int",
    "comment" : "\n     * Gets the navigation bar mode. Returns default value if no mode is set.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void updateMediaTapToTransferSenderDisplay(@MediaTransferSenderState int displayState, @NonNull MediaRoute2Info routeInfo, @Nullable Executor undoExecutor, @Nullable Runnable undoCallback)",
    "returnType" : "void",
    "comment" : "\n     * Notifies the system of a new media tap-to-transfer state for the <b>sender</b> device.\n     *\n     * <p>The callback should only be provided for the {@link\n     * MEDIA_TRANSFER_SENDER_STATE_TRANSFER_TO_RECEIVER_SUCCEEDED} or {@link\n     * MEDIA_TRANSFER_SENDER_STATE_TRANSFER_TO_THIS_DEVICE_SUCCEEDED} states, since those are the\n     * only states where an action can be un-done.\n     *\n     * @param displayState the new state for media tap-to-transfer.\n     * @param routeInfo the media route information for the media being transferred.\n     * @param undoExecutor an executor to run the callback on and must be provided if the\n     *                     callback is non-null.\n     * @param undoCallback a callback that will be triggered if the user elects to undo a media\n     *                     transfer.\n     *\n     * @throws IllegalArgumentException if an undo callback is provided for states that are not a\n     *   succeeded state.\n     * @throws IllegalArgumentException if an executor is not provided when a callback is.\n     *\n     * @hide\n     ",
    "links" : [ "MEDIA_TRANSFER_SENDER_STATE_TRANSFER_TO_RECEIVER_SUCCEEDED", "MEDIA_TRANSFER_SENDER_STATE_TRANSFER_TO_THIS_DEVICE_SUCCEEDED" ]
  }, {
    "name" : "public void updateMediaTapToTransferReceiverDisplay(@MediaTransferReceiverState int displayState, @NonNull MediaRoute2Info routeInfo, @Nullable Icon appIcon, @Nullable CharSequence appName)",
    "returnType" : "void",
    "comment" : "\n     * Notifies the system of a new media tap-to-transfer state for the <b>receiver</b> device.\n     *\n     * @param displayState the new state for media tap-to-transfer.\n     * @param routeInfo the media route information for the media being transferred.\n     * @param appIcon the icon of the app playing the media.\n     * @param appName the name of the app playing the media.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void registerNearbyMediaDevicesProvider(@NonNull NearbyMediaDevicesProvider provider)",
    "returnType" : "void",
    "comment" : "\n     * Registers a provider that notifies callbacks about the status of nearby devices that are able\n     * to play media.\n     * <p>\n     * If multiple providers are registered, all the providers will be used for nearby device\n     * information.\n     * <p>\n     * @param provider the nearby device information provider to register\n     * <p>\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void unregisterNearbyMediaDevicesProvider(@NonNull NearbyMediaDevicesProvider provider)",
    "returnType" : "void",
    "comment" : "\n     * Unregisters a provider that gives information about nearby devices that are able to play\n     * media.\n     * <p>\n     * See {@link registerNearbyMediaDevicesProvider}.\n     * <p>\n     * @param provider the nearby device information provider to unregister\n     * <p>\n     * @hide\n     ",
    "links" : [ "registerNearbyMediaDevicesProvider" ]
  }, {
    "name" : "public static boolean useMediaSessionActionsForApp(String packageName, UserHandle user)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks whether the given package should use session-based actions for its media controls.\n     *\n     * @param packageName App posting media controls\n     * @param user Current user handle\n     * @return true if the app supports session actions\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void logBlankMediaTitle(String packageName, @UserIdInt int userId) throws RuntimeException",
    "returnType" : "void",
    "comment" : "\n     * Log that the given package has posted media controls with a blank title\n     *\n     * @param packageName App posting media controls\n     * @param userId Current user ID\n     * @throws RuntimeException if there is an error reporting the change\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean canLaunchCaptureContentActivityForNote(@NonNull Activity activity)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks whether the supplied activity can {@link Activity#startActivityForResult(Intent, int)}\n     * a system activity that captures content on the screen to take a screenshot.\n     *\n     * <p>Note: The result should not be cached.\n     *\n     * <p>The system activity displays an editing tool that allows user to edit the screenshot, save\n     * it on device, and return the edited screenshot as {@link android.net.Uri} to the calling\n     * activity. User interaction is required to return the edited screenshot to the calling\n     * activity.\n     *\n     * <p>When {@code true}, callers can use {@link Activity#startActivityForResult(Intent, int)}\n     * to start start the content capture activity using\n     * {@link Intent#ACTION_LAUNCH_CAPTURE_CONTENT_ACTIVITY_FOR_NOTE}.\n     *\n     * @param activity Calling activity\n     * @return true if the activity supports launching the capture content activity for note.\n     *\n     * @see Intent#ACTION_LAUNCH_CAPTURE_CONTENT_ACTIVITY_FOR_NOTE\n     * @see Manifest.permission#LAUNCH_CAPTURE_CONTENT_ACTIVITY_FOR_NOTE\n     * @see android.app.role.RoleManager#ROLE_NOTES\n     ",
    "links" : [ "android.content.Intent#ACTION_LAUNCH_CAPTURE_CONTENT_ACTIVITY_FOR_NOTE", "android.app.Activity#startActivityForResult(Intent", "android.net.Uri" ]
  }, {
    "name" : "public static String windowStateToString(int state)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private synchronized IStatusBarService getService()", "public void disable(int what)", "public void disable2(@Disable2Flags int what)", "public void clickNotification(@Nullable String key, int rank, int count, boolean visible)", "private void clickNotificationInternal(String key, int rank, int count, boolean visible)", "public void sendNotificationFeedback(@Nullable String key, @Nullable Bundle feedback)", "public void expandNotificationsPanel()", "public void collapsePanels()", "public void togglePanel()", "public void handleSystemKey(@NonNull KeyEvent key)", "public int getLastSystemKey()", "public void expandSettingsPanel()", "public void expandSettingsPanel(@Nullable String subPanel)", "public void setIcon(String slot, int iconId, int iconLevel, String contentDescription)", "public void removeIcon(String slot)", "public void setIconVisibility(String slot, boolean visible)", "public void setDisabledForSetup(boolean disabled)", "public void setExpansionDisabledForSimNetworkLock(boolean disabled)", "public DisableInfo getDisableInfo()", "public void requestTileServiceListeningState(@NonNull ComponentName componentName)", "public void requestAddTileService(@NonNull ComponentName tileServiceComponentName, @NonNull CharSequence tileLabel, @NonNull Icon icon, @NonNull Executor resultExecutor, @NonNull Consumer<Integer> resultCallback)", "public void cancelRequestAddTile(@NonNull String packageName)", "public void setNavBarMode(@NavBarMode int navBarMode)", "public int getNavBarMode()", "public void updateMediaTapToTransferSenderDisplay(@MediaTransferSenderState int displayState, @NonNull MediaRoute2Info routeInfo, @Nullable Executor undoExecutor, @Nullable Runnable undoCallback)", "public void updateMediaTapToTransferReceiverDisplay(@MediaTransferReceiverState int displayState, @NonNull MediaRoute2Info routeInfo, @Nullable Icon appIcon, @Nullable CharSequence appName)", "public void registerNearbyMediaDevicesProvider(@NonNull NearbyMediaDevicesProvider provider)", "public void unregisterNearbyMediaDevicesProvider(@NonNull NearbyMediaDevicesProvider provider)", "public static boolean useMediaSessionActionsForApp(String packageName, UserHandle user)", "public void logBlankMediaTitle(String packageName, @UserIdInt int userId) throws RuntimeException", "public boolean canLaunchCaptureContentActivityForNote(@NonNull Activity activity)", "public static String windowStateToString(int state)" ],
  "variableNames" : [ "DISABLE_EXPAND", "DISABLE_NOTIFICATION_ICONS", "DISABLE_NOTIFICATION_ALERTS", "DISABLE_NOTIFICATION_TICKER", "DISABLE_SYSTEM_INFO", "DISABLE_HOME", "DISABLE_RECENT", "DISABLE_BACK", "DISABLE_CLOCK", "DISABLE_SEARCH", "DISABLE_ONGOING_CALL_CHIP", "DISABLE_NAVIGATION", "DISABLE_NONE", "DISABLE_MASK", "DISABLE2_QUICK_SETTINGS", "DISABLE2_SYSTEM_ICONS", "DISABLE2_NOTIFICATION_SHADE", "DISABLE2_GLOBAL_ACTIONS", "DISABLE2_ROTATE_SUGGESTIONS", "DISABLE2_NONE", "DISABLE2_MASK", "TAG", "DEFAULT_SETUP_DISABLE_FLAGS", "DEFAULT_SETUP_DISABLE2_FLAGS", "DEFAULT_SIM_LOCKED_DISABLED_FLAGS", "NAVIGATION_HINT_BACK_ALT", "NAVIGATION_HINT_IME_SHOWN", "NAVIGATION_HINT_IME_SWITCHER_SHOWN", "WINDOW_STATUS_BAR", "WINDOW_NAVIGATION_BAR", "WINDOW_STATE_SHOWING", "WINDOW_STATE_HIDING", "WINDOW_STATE_HIDDEN", "CAMERA_LAUNCH_SOURCE_WIGGLE", "CAMERA_LAUNCH_SOURCE_POWER_DOUBLE_TAP", "CAMERA_LAUNCH_SOURCE_LIFT_TRIGGER", "CAMERA_LAUNCH_SOURCE_QUICK_AFFORDANCE", "ACTION_KEYGUARD_PRIVATE_NOTIFICATIONS_CHANGED", "EXTRA_KM_PRIVATE_NOTIFS_ALLOWED", "SESSION_KEYGUARD", "SESSION_BIOMETRIC_PROMPT", "ALL_SESSIONS", "TILE_ADD_REQUEST_RESULT_TILE_NOT_ADDED", "TILE_ADD_REQUEST_RESULT_TILE_ALREADY_ADDED", "TILE_ADD_REQUEST_RESULT_TILE_ADDED", "TILE_ADD_REQUEST_RESULT_DIALOG_DISMISSED", "TILE_ADD_REQUEST_FIRST_ERROR_CODE", "TILE_ADD_REQUEST_ERROR_MISMATCHED_PACKAGE", "TILE_ADD_REQUEST_ERROR_REQUEST_IN_PROGRESS", "TILE_ADD_REQUEST_ERROR_BAD_COMPONENT", "TILE_ADD_REQUEST_ERROR_NOT_CURRENT_USER", "TILE_ADD_REQUEST_ERROR_APP_NOT_IN_FOREGROUND", "TILE_ADD_REQUEST_ERROR_NO_STATUS_BAR_SERVICE", "NAV_BAR_MODE_DEFAULT", "NAV_BAR_MODE_KIDS", "MEDIA_TRANSFER_SENDER_STATE_ALMOST_CLOSE_TO_START_CAST", "MEDIA_TRANSFER_SENDER_STATE_ALMOST_CLOSE_TO_END_CAST", "MEDIA_TRANSFER_SENDER_STATE_TRANSFER_TO_RECEIVER_TRIGGERED", "MEDIA_TRANSFER_SENDER_STATE_TRANSFER_TO_THIS_DEVICE_TRIGGERED", "MEDIA_TRANSFER_SENDER_STATE_TRANSFER_TO_RECEIVER_SUCCEEDED", "MEDIA_TRANSFER_SENDER_STATE_TRANSFER_TO_THIS_DEVICE_SUCCEEDED", "MEDIA_TRANSFER_SENDER_STATE_TRANSFER_TO_RECEIVER_FAILED", "MEDIA_TRANSFER_SENDER_STATE_TRANSFER_TO_THIS_DEVICE_FAILED", "MEDIA_TRANSFER_SENDER_STATE_FAR_FROM_RECEIVER", "MEDIA_TRANSFER_RECEIVER_STATE_CLOSE_TO_SENDER", "MEDIA_TRANSFER_RECEIVER_STATE_FAR_FROM_SENDER", "MEDIA_TRANSFER_RECEIVER_STATE_TRANSFER_TO_RECEIVER_SUCCEEDED", "MEDIA_TRANSFER_RECEIVER_STATE_TRANSFER_TO_RECEIVER_FAILED", "nearbyMediaDevicesProviderMap", "MEDIA_CONTROL_SESSION_ACTIONS", "MEDIA_CONTROL_BLANK_TITLE", "mContext", "mService", "mToken", "mPlatformCompat" ]
}