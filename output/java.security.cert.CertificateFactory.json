{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/security/cert/CertificateFactory.java",
  "packageName" : "java.security.cert",
  "className" : "CertificateFactory",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "type",
    "type" : "String",
    "comment" : " The certificate type",
    "links" : [ ]
  }, {
    "name" : "provider",
    "type" : "Provider",
    "comment" : " The provider",
    "links" : [ ]
  }, {
    "name" : "certFacSpi",
    "type" : "CertificateFactorySpi",
    "comment" : " The provider implementation",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static final CertificateFactory getInstance(String type) throws CertificateException",
    "returnType" : "CertificateFactory",
    "comment" : "\n     * Returns a certificate factory object that implements the\n     * specified certificate type.\n     *\n     * <p> This method traverses the list of registered security Providers,\n     * starting with the most preferred Provider.\n     * A new CertificateFactory object encapsulating the\n     * CertificateFactorySpi implementation from the first\n     * Provider that supports the specified type is returned.\n     *\n     * <p> Note that the list of registered providers may be retrieved via\n     * the {@link Security#getProviders() Security.getProviders()} method.\n     *\n     * @param type the name of the requested certificate type.\n     * See the CertificateFactory section in the <a href=\n     * \"{@docRoot}/../technotes/guides/security/StandardNames.html#CertificateFactory\">\n     * Java Cryptography Architecture Standard Algorithm Name Documentation</a>\n     * for information about standard certificate types.\n     *\n     * @return a certificate factory object for the specified type.\n     *\n     * @exception CertificateException if no Provider supports a\n     *          CertificateFactorySpi implementation for the\n     *          specified type.\n     *\n     * @see java.security.Provider\n     ",
    "links" : [ "java.security.Security#getProviders()" ]
  }, {
    "name" : "public static final CertificateFactory getInstance(String type, String provider) throws CertificateException, NoSuchProviderException",
    "returnType" : "CertificateFactory",
    "comment" : "\n     * Returns a certificate factory object for the specified\n     * certificate type.\n     *\n     * <p> A new CertificateFactory object encapsulating the\n     * CertificateFactorySpi implementation from the specified provider\n     * is returned.  The specified provider must be registered\n     * in the security provider list.\n     *\n     * <p> Note that the list of registered providers may be retrieved via\n     * the {@link Security#getProviders() Security.getProviders()} method.\n     *\n     * @param type the certificate type.\n     * See the CertificateFactory section in the <a href=\n     * \"{@docRoot}/../technotes/guides/security/StandardNames.html#CertificateFactory\">\n     * Java Cryptography Architecture Standard Algorithm Name Documentation</a>\n     * for information about standard certificate types.\n     *\n     * @param provider the name of the provider.\n     *\n     * @return a certificate factory object for the specified type.\n     *\n     * @exception CertificateException if a CertificateFactorySpi\n     *          implementation for the specified algorithm is not\n     *          available from the specified provider.\n     *\n     * @exception NoSuchProviderException if the specified provider is not\n     *          registered in the security provider list.\n     *\n     * @exception IllegalArgumentException if the provider name is null\n     *          or empty.\n     *\n     * @see java.security.Provider\n     ",
    "links" : [ "java.security.Security#getProviders()" ]
  }, {
    "name" : "public static final CertificateFactory getInstance(String type, Provider provider) throws CertificateException",
    "returnType" : "CertificateFactory",
    "comment" : "\n     * Returns a certificate factory object for the specified\n     * certificate type.\n     *\n     * <p> A new CertificateFactory object encapsulating the\n     * CertificateFactorySpi implementation from the specified Provider\n     * object is returned.  Note that the specified Provider object\n     * does not have to be registered in the provider list.\n     *\n     * @param type the certificate type.\n     * See the CertificateFactory section in the <a href=\n     * \"{@docRoot}/../technotes/guides/security/StandardNames.html#CertificateFactory\">\n     * Java Cryptography Architecture Standard Algorithm Name Documentation</a>\n     * for information about standard certificate types.\n     * @param provider the provider.\n     *\n     * @return a certificate factory object for the specified type.\n     *\n     * @exception CertificateException if a CertificateFactorySpi\n     *          implementation for the specified algorithm is not available\n     *          from the specified Provider object.\n     *\n     * @exception IllegalArgumentException if the {@code provider} is\n     *          null.\n     *\n     * @see java.security.Provider\n     *\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "public final Provider getProvider()",
    "returnType" : "Provider",
    "comment" : "\n     * Returns the provider of this certificate factory.\n     *\n     * @return the provider of this certificate factory.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final String getType()",
    "returnType" : "String",
    "comment" : "\n     * Returns the name of the certificate type associated with this\n     * certificate factory.\n     *\n     * @return the name of the certificate type associated with this\n     * certificate factory.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final Certificate generateCertificate(InputStream inStream) throws CertificateException",
    "returnType" : "Certificate",
    "comment" : "\n     * Generates a certificate object and initializes it with\n     * the data read from the input stream {@code inStream}.\n     *\n     * <p>In order to take advantage of the specialized certificate format\n     * supported by this certificate factory,\n     * the returned certificate object can be typecast to the corresponding\n     * certificate class. For example, if this certificate\n     * factory implements X.509 certificates, the returned certificate object\n     * can be typecast to the {@code X509Certificate} class.\n     *\n     * <p>In the case of a certificate factory for X.509 certificates, the\n     * certificate provided in {@code inStream} must be DER-encoded and\n     * may be supplied in binary or printable (Base64) encoding. If the\n     * certificate is provided in Base64 encoding, it must be bounded at\n     * the beginning by -----BEGIN CERTIFICATE-----, and must be bounded at\n     * the end by -----END CERTIFICATE-----.\n     *\n     * <p>Note that if the given input stream does not support\n     * {@link java.io.InputStream#mark(int) mark} and\n     * {@link java.io.InputStream#reset() reset}, this method will\n     * consume the entire input stream. Otherwise, each call to this\n     * method consumes one certificate and the read position of the\n     * input stream is positioned to the next available byte after\n     * the inherent end-of-certificate marker. If the data in the input stream\n     * does not contain an inherent end-of-certificate marker (other\n     * than EOF) and there is trailing data after the certificate is parsed, a\n     * {@code CertificateException} is thrown.\n     *\n     * @param inStream an input stream with the certificate data.\n     *\n     * @return a certificate object initialized with the data\n     * from the input stream.\n     *\n     * @exception CertificateException on parsing errors.\n     ",
    "links" : [ "java.io.InputStream#reset()", "java.io.InputStream#mark(int)" ]
  }, {
    "name" : "public final Iterator<String> getCertPathEncodings()",
    "returnType" : "Iterator<String>",
    "comment" : "\n     * Returns an iteration of the {@code CertPath} encodings supported\n     * by this certificate factory, with the default encoding first. See\n     * the CertPath Encodings section in the <a href=\n     * \"{@docRoot}/../technotes/guides/security/StandardNames.html#CertPathEncodings\">\n     * Java Cryptography Architecture Standard Algorithm Name Documentation</a>\n     * for information about standard encoding names and their formats.\n     * <p>\n     * Attempts to modify the returned {@code Iterator} via its\n     * {@code remove} method result in an\n     * {@code UnsupportedOperationException}.\n     *\n     * @return an {@code Iterator} over the names of the supported\n     *         {@code CertPath} encodings (as {@code String}s)\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "public final CertPath generateCertPath(InputStream inStream) throws CertificateException",
    "returnType" : "CertPath",
    "comment" : "\n     * Generates a {@code CertPath} object and initializes it with\n     * the data read from the {@code InputStream} inStream. The data\n     * is assumed to be in the default encoding. The name of the default\n     * encoding is the first element of the {@code Iterator} returned by\n     * the {@link #getCertPathEncodings getCertPathEncodings} method.\n     *\n     * @param inStream an {@code InputStream} containing the data\n     * @return a {@code CertPath} initialized with the data from the\n     *   {@code InputStream}\n     * @exception CertificateException if an exception occurs while decoding\n     * @since 1.4\n     ",
    "links" : [ "#getCertPathEncodings" ]
  }, {
    "name" : "public final CertPath generateCertPath(InputStream inStream, String encoding) throws CertificateException",
    "returnType" : "CertPath",
    "comment" : "\n     * Generates a {@code CertPath} object and initializes it with\n     * the data read from the {@code InputStream} inStream. The data\n     * is assumed to be in the specified encoding. See\n     * the CertPath Encodings section in the <a href=\n     * \"{@docRoot}/../technotes/guides/security/StandardNames.html#CertPathEncodings\">\n     * Java Cryptography Architecture Standard Algorithm Name Documentation</a>\n     * for information about standard encoding names and their formats.\n     *\n     * @param inStream an {@code InputStream} containing the data\n     * @param encoding the encoding used for the data\n     * @return a {@code CertPath} initialized with the data from the\n     *   {@code InputStream}\n     * @exception CertificateException if an exception occurs while decoding or\n     *   the encoding requested is not supported\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "public final CertPath generateCertPath(List<? extends Certificate> certificates) throws CertificateException",
    "returnType" : "CertPath",
    "comment" : "\n     * Generates a {@code CertPath} object and initializes it with\n     * a {@code List} of {@code Certificate}s.\n     * <p>\n     * The certificates supplied must be of a type supported by the\n     * {@code CertificateFactory}. They will be copied out of the supplied\n     * {@code List} object.\n     *\n     * @param certificates a {@code List} of {@code Certificate}s\n     * @return a {@code CertPath} initialized with the supplied list of\n     *   certificates\n     * @exception CertificateException if an exception occurs\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "public final Collection<? extends Certificate> generateCertificates(InputStream inStream) throws CertificateException",
    "returnType" : "Collection<? extends Certificate>",
    "comment" : "\n     * Returns a (possibly empty) collection view of the certificates read\n     * from the given input stream {@code inStream}.\n     *\n     * <p>In order to take advantage of the specialized certificate format\n     * supported by this certificate factory, each element in\n     * the returned collection view can be typecast to the corresponding\n     * certificate class. For example, if this certificate\n     * factory implements X.509 certificates, the elements in the returned\n     * collection can be typecast to the {@code X509Certificate} class.\n     *\n     * <p>In the case of a certificate factory for X.509 certificates,\n     * {@code inStream} may contain a sequence of DER-encoded certificates\n     * in the formats described for\n     * {@link #generateCertificate(java.io.InputStream) generateCertificate}.\n     * In addition, {@code inStream} may contain a PKCS#7 certificate\n     * chain. This is a PKCS#7 <i>SignedData</i> object, with the only\n     * significant field being <i>certificates</i>. In particular, the\n     * signature and the contents are ignored. This format allows multiple\n     * certificates to be downloaded at once. If no certificates are present,\n     * an empty collection is returned.\n     *\n     * <p>Note that if the given input stream does not support\n     * {@link java.io.InputStream#mark(int) mark} and\n     * {@link java.io.InputStream#reset() reset}, this method will\n     * consume the entire input stream.\n     *\n     * @param inStream the input stream with the certificates.\n     *\n     * @return a (possibly empty) collection view of\n     * java.security.cert.Certificate objects\n     * initialized with the data from the input stream.\n     *\n     * @exception CertificateException on parsing errors.\n     ",
    "links" : [ "#generateCertificate(java.io.InputStream)", "java.io.InputStream#reset()", "java.io.InputStream#mark(int)" ]
  }, {
    "name" : "public final CRL generateCRL(InputStream inStream) throws CRLException",
    "returnType" : "CRL",
    "comment" : "\n     * Generates a certificate revocation list (CRL) object and initializes it\n     * with the data read from the input stream {@code inStream}.\n     *\n     * <p>In order to take advantage of the specialized CRL format\n     * supported by this certificate factory,\n     * the returned CRL object can be typecast to the corresponding\n     * CRL class. For example, if this certificate\n     * factory implements X.509 CRLs, the returned CRL object\n     * can be typecast to the {@code X509CRL} class.\n     *\n     * <p>Note that if the given input stream does not support\n     * {@link java.io.InputStream#mark(int) mark} and\n     * {@link java.io.InputStream#reset() reset}, this method will\n     * consume the entire input stream. Otherwise, each call to this\n     * method consumes one CRL and the read position of the input stream\n     * is positioned to the next available byte after the inherent\n     * end-of-CRL marker. If the data in the\n     * input stream does not contain an inherent end-of-CRL marker (other\n     * than EOF) and there is trailing data after the CRL is parsed, a\n     * {@code CRLException} is thrown.\n     *\n     * @param inStream an input stream with the CRL data.\n     *\n     * @return a CRL object initialized with the data\n     * from the input stream.\n     *\n     * @exception CRLException on parsing errors.\n     ",
    "links" : [ "java.io.InputStream#reset()", "java.io.InputStream#mark(int)" ]
  }, {
    "name" : "public final Collection<? extends CRL> generateCRLs(InputStream inStream) throws CRLException",
    "returnType" : "Collection<? extends CRL>",
    "comment" : "\n     * Returns a (possibly empty) collection view of the CRLs read\n     * from the given input stream {@code inStream}.\n     *\n     * <p>In order to take advantage of the specialized CRL format\n     * supported by this certificate factory, each element in\n     * the returned collection view can be typecast to the corresponding\n     * CRL class. For example, if this certificate\n     * factory implements X.509 CRLs, the elements in the returned\n     * collection can be typecast to the {@code X509CRL} class.\n     *\n     * <p>In the case of a certificate factory for X.509 CRLs,\n     * {@code inStream} may contain a sequence of DER-encoded CRLs.\n     * In addition, {@code inStream} may contain a PKCS#7 CRL\n     * set. This is a PKCS#7 <i>SignedData</i> object, with the only\n     * significant field being <i>crls</i>. In particular, the\n     * signature and the contents are ignored. This format allows multiple\n     * CRLs to be downloaded at once. If no CRLs are present,\n     * an empty collection is returned.\n     *\n     * <p>Note that if the given input stream does not support\n     * {@link java.io.InputStream#mark(int) mark} and\n     * {@link java.io.InputStream#reset() reset}, this method will\n     * consume the entire input stream.\n     *\n     * @param inStream the input stream with the CRLs.\n     *\n     * @return a (possibly empty) collection view of\n     * java.security.cert.CRL objects initialized with the data from the input\n     * stream.\n     *\n     * @exception CRLException on parsing errors.\n     ",
    "links" : [ "java.io.InputStream#reset()", "java.io.InputStream#mark(int)" ]
  } ],
  "methodNames" : [ "public static final CertificateFactory getInstance(String type) throws CertificateException", "public static final CertificateFactory getInstance(String type, String provider) throws CertificateException, NoSuchProviderException", "public static final CertificateFactory getInstance(String type, Provider provider) throws CertificateException", "public final Provider getProvider()", "public final String getType()", "public final Certificate generateCertificate(InputStream inStream) throws CertificateException", "public final Iterator<String> getCertPathEncodings()", "public final CertPath generateCertPath(InputStream inStream) throws CertificateException", "public final CertPath generateCertPath(InputStream inStream, String encoding) throws CertificateException", "public final CertPath generateCertPath(List<? extends Certificate> certificates) throws CertificateException", "public final Collection<? extends Certificate> generateCertificates(InputStream inStream) throws CertificateException", "public final CRL generateCRL(InputStream inStream) throws CRLException", "public final Collection<? extends CRL> generateCRLs(InputStream inStream) throws CRLException" ],
  "variableNames" : [ "type", "provider", "certFacSpi" ]
}