{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/javax/xml/namespace/QName.java",
  "packageName" : "javax.xml.namespace",
  "className" : "QName",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "\n     * <p>Stream Unique Identifier.</p>\n     *\n     * <p>To enable the compatibility <code>serialVersionUID</code>\n     * set the System Property\n     * <code>org.apache.xml.namespace.QName.useCompatibleSerialVersionUID</code>\n     * to a value of \"1.0\".</p>\n     ",
    "links" : [ ]
  }, {
    "name" : "defaultSerialVersionUID",
    "type" : "long",
    "comment" : "\n     * <p>The original default Stream Unique Identifier.</p>\n     ",
    "links" : [ ]
  }, {
    "name" : "compatibilitySerialVersionUID",
    "type" : "long",
    "comment" : "\n     * <p>The compatibility Stream Unique Identifier that was introduced\n     * with Java 5 SE SDK.</p>\n     ",
    "links" : [ ]
  }, {
    "name" : "namespaceURI",
    "type" : "String",
    "comment" : "\n     * <p>Namespace URI of this <code>QName</code>.</p>\n     ",
    "links" : [ ]
  }, {
    "name" : "localPart",
    "type" : "String",
    "comment" : "\n     * <p>local part of this <code>QName</code>.</p>\n     ",
    "links" : [ ]
  }, {
    "name" : "prefix",
    "type" : "String",
    "comment" : "\n     * <p>prefix of this <code>QName</code>.</p>\n     ",
    "links" : [ ]
  }, {
    "name" : "qNameAsString",
    "type" : "String",
    "comment" : "\n     * <p><code>String</code> representation of this <code>QName</code>.</p>\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String getNamespaceURI()",
    "returnType" : "String",
    "comment" : "\n     * <p>Get the Namespace URI of this <code>QName</code>.</p>\n     *\n     * @return Namespace URI of this <code>QName</code>\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getLocalPart()",
    "returnType" : "String",
    "comment" : "\n     * <p>Get the local part of this <code>QName</code>.</p>\n     *\n     *  @return local part of this <code>QName</code>\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getPrefix()",
    "returnType" : "String",
    "comment" : "\n     * <p>Get the prefix of this <code>QName</code>.</p>\n     *\n     * <p>The prefix assigned to a <code>QName</code> might\n     * <strong><em>NOT</em></strong> be valid in a different\n     * context. For example, a <code>QName</code> may be assigned a\n     * prefix in the context of parsing a document but that prefix may\n     * be invalid in the context of a different document.</p>\n     *\n     *  @return prefix of this <code>QName</code>\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean equals(Object objectToTest)",
    "returnType" : "boolean",
    "comment" : "\n     * <p>Test this <code>QName</code> for equality with another\n     * <code>Object</code>.</p>\n     *\n     * <p>If the <code>Object</code> to be tested is not a\n     * <code>QName</code> or is <code>null</code>, then this method\n     * returns <code>false</code>.</p>\n     *\n     * <p>Two <code>QName</code>s are considered equal if and only if\n     * both the Namespace URI and local part are equal. This method\n     * uses <code>String.equals()</code> to check equality of the\n     * Namespace URI and local part. The prefix is\n     * <strong><em>NOT</em></strong> used to determine equality.</p>\n     *\n     * <p>This method satisfies the general contract of {@link\n     * java.lang.Object#equals(Object) Object.equals(Object)}</p>\n     *\n     * @param objectToTest the <code>Object</code> to test for\n     * equality with this <code>QName</code>\n     * @return <code>true</code> if the given <code>Object</code> is\n     * equal to this <code>QName</code> else <code>false</code>\n     ",
    "links" : [ "java.lang.Object#equals(Object)" ]
  }, {
    "name" : "public final int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * <p>Generate the hash code for this <code>QName</code>.</p>\n     *\n     * <p>The hash code is calculated using both the Namespace URI and\n     * the local part of the <code>QName</code>.  The prefix is\n     * <strong><em>NOT</em></strong> used to calculate the hash\n     * code.</p>\n     *\n     * <p>This method satisfies the general contract of {@link\n     * java.lang.Object#hashCode() Object.hashCode()}.</p>\n     *\n     * @return hash code for this <code>QName</code> <code>Object</code>\n     ",
    "links" : [ "java.lang.Object#hashCode()" ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * <p><code>String</code> representation of this\n     * <code>QName</code>.</p>\n     *\n     * <p>The commonly accepted way of representing a <code>QName</code>\n     * as a <code>String</code> was <a href=\"http://jclark.com/xml/xmlns.htm\">defined</a>\n     * by James Clark.  Although this is not a <em>standard</em>\n     * specification, it is in common use,  e.g. {@link javax.xml.transform.Transformer#setParameter(String name, Object value)}.\n     * This implementation represents a <code>QName</code> as:\n     * \"{\" + Namespace URI + \"}\" + local part.  If the Namespace URI\n     * <code>.equals(XMLConstants.NULL_NS_URI)</code>, only the\n     * local part is returned.  An appropriate use of this method is\n     * for debugging or logging for human consumption.</p>\n     *\n     * <p>Note the prefix value is <strong><em>NOT</em></strong>\n     * returned as part of the <code>String</code> representation.</p>\n     *\n     * <p>This method satisfies the general contract of {@link\n     * java.lang.Object#toString() Object.toString()}.</p>\n     *\n     * @return <code>String</code> representation of this <code>QName</code>\n     ",
    "links" : [ "javax.xml.transform.Transformer#setParameter(String", "java.lang.Object#toString()" ]
  }, {
    "name" : "public static QName valueOf(String qNameAsString)",
    "returnType" : "QName",
    "comment" : "\n     * <p><code>QName</code> derived from parsing the formatted\n     * <code>String</code>.</p>\n     *\n     * <p>If the <code>String</code> is <code>null</code> or does not conform to\n     * {@link #toString() QName.toString()} formatting, an\n     * <code>IllegalArgumentException</code> is thrown.</p>\n     *\n     * <p><em>The <code>String</code> <strong>MUST</strong> be in the\n     * form returned by {@link #toString() QName.toString()}.</em></p>\n     *\n     * <p>The commonly accepted way of representing a <code>QName</code>\n     * as a <code>String</code> was <a href=\"http://jclark.com/xml/xmlns.htm\">defined</a>\n     * by James Clark.  Although this is not a <em>standard</em>\n     * specification, it is in common use,  e.g. {@link javax.xml.transform.Transformer#setParameter(String name, Object value)}.\n     * This implementation parses a <code>String</code> formatted\n     * as: \"{\" + Namespace URI + \"}\" + local part.  If the Namespace\n     * URI <code>.equals(XMLConstants.NULL_NS_URI)</code>, only the\n     * local part should be provided.</p>\n     *\n     * <p>The prefix value <strong><em>CANNOT</em></strong> be\n     * represented in the <code>String</code> and will be set to\n     * {@link javax.xml.XMLConstants#DEFAULT_NS_PREFIX\n     * XMLConstants.DEFAULT_NS_PREFIX}.</p>\n     *\n     * <p>This method does not do full validation of the resulting\n     * <code>QName</code>.\n     * <p>The Namespace URI is not validated as a\n     * <a href=\"http://www.ietf.org/rfc/rfc2396.txt\">URI reference</a>.\n     * The local part is not validated as a\n     * <a href=\"http://www.w3.org/TR/REC-xml-names/#NT-NCName\">NCName</a>\n     * as specified in\n     * <a href=\"http://www.w3.org/TR/REC-xml-names/\">Namespaces in XML</a>.</p>\n     *\n     * @param qNameAsString <code>String</code> representation\n     * of the <code>QName</code>\n     * @return <code>QName</code> corresponding to the given <code>String</code>\n     * @see #toString() QName.toString()\n     ",
    "links" : [ "javax.xml.transform.Transformer#setParameter(String", "#toString()", "javax.xml.XMLConstants#DEFAULT_NS_PREFIXXMLConstants.DEFAULT_NS_PREFIX" ]
  }, {
    "name" : "private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException",
    "returnType" : "void",
    "comment" : "\n     * For old versions of QName which didn't have a prefix field,\n     * <code>ObjectInputStream.defaultReadObject()</code> will initialize\n     * the prefix to <code>null</code> instead of the empty string. This\n     * method fixes up the prefix field if it didn't exist in the serialized\n     * object.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public String getNamespaceURI()", "public String getLocalPart()", "public String getPrefix()", "public final boolean equals(Object objectToTest)", "public final int hashCode()", "public String toString()", "public static QName valueOf(String qNameAsString)", "private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException" ],
  "variableNames" : [ "serialVersionUID", "defaultSerialVersionUID", "compatibilitySerialVersionUID", "namespaceURI", "localPart", "prefix", "qNameAsString" ]
}