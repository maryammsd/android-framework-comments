{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/ActionBar.java",
  "packageName" : "android.app",
  "className" : "ActionBar",
  "comment" : "\n * A primary toolbar within the activity that may display the activity title, application-level\n * navigation affordances, and other interactive items.\n *\n * <p>Beginning with Android 3.0 (API level 11), the action bar appears at the top of an\n * activity's window when the activity uses the system's {@link\n * android.R.style#Theme_Holo Holo} theme (or one of its descendant themes), which is the default.\n * You may otherwise add the action bar by calling {@link\n * android.view.Window#requestFeature requestFeature(FEATURE_ACTION_BAR)} or by declaring it in a\n * custom theme with the {@link android.R.styleable#Theme_windowActionBar windowActionBar} property.\n * </p>\n *\n * <p>Beginning with Android L (API level 21), the action bar may be represented by any\n * Toolbar widget within the application layout. The application may signal to the Activity\n * which Toolbar should be treated as the Activity's action bar. Activities that use this\n * feature should use one of the supplied <code>.NoActionBar</code> themes, set the\n * {@link android.R.styleable#Theme_windowActionBar windowActionBar} attribute to <code>false</code>\n * or otherwise not request the window feature.</p>\n *\n * <p>By adjusting the window features requested by the theme and the layouts used for\n * an Activity's content view, an app can use the standard system action bar on older platform\n * releases and the newer inline toolbars on newer platform releases. The <code>ActionBar</code>\n * object obtained from the Activity can be used to control either configuration transparently.</p>\n *\n * <p>When using the Holo themes the action bar shows the application icon on\n * the left, followed by the activity title. If your activity has an options menu, you can make\n * select items accessible directly from the action bar as \"action items\". You can also\n * modify various characteristics of the action bar or remove it completely.</p>\n *\n * <p>When using the Material themes (default in API 21 or newer) the navigation button\n * (formerly \"Home\") takes over the space previously occupied by the application icon.\n * Apps wishing to express a stronger branding should use their brand colors heavily\n * in the action bar and other application chrome or use a {@link #setLogo(int) logo}\n * in place of their standard title text.</p>\n *\n * <p>From your activity, you can retrieve an instance of {@link ActionBar} by calling {@link\n * android.app.Activity#getActionBar getActionBar()}.</p>\n *\n * <p>In some cases, the action bar may be overlayed by another bar that enables contextual actions,\n * using an {@link android.view.ActionMode}. For example, when the user selects one or more items in\n * your activity, you can enable an action mode that offers actions specific to the selected\n * items, with a UI that temporarily replaces the action bar. Although the UI may occupy the\n * same space, the {@link android.view.ActionMode} APIs are distinct and independent from those for\n * {@link ActionBar}.</p>\n *\n * <div class=\"special reference\">\n * <h3>Developer Guides</h3>\n * <p>For information about how to use the action bar, including how to add action items, navigation\n * modes and more, read the <a href=\"{@docRoot}guide/topics/ui/actionbar.html\">Action\n * Bar</a> developer guide.</p>\n * </div>\n ",
  "links" : [ "android.R.style#Theme_Holo", "android.app.ActionBar", "android.view.ActionMode", "#setLogo(int)", "android.app.Activity#getActionBar", "android.view.Window#requestFeature", "android.R.styleable#Theme_windowActionBar" ],
  "variables" : [ {
    "name" : "NAVIGATION_MODE_STANDARD",
    "type" : "int",
    "comment" : "\n     * Standard navigation mode. Consists of either a logo or icon\n     * and title text with an optional subtitle. Clicking any of these elements\n     * will dispatch onOptionsItemSelected to the host Activity with\n     * a MenuItem with item ID android.R.id.home.\n     *\n     * @deprecated Action bar navigation modes are deprecated and not supported by inline\n     * toolbar action bars. Consider using other\n     * <a href=\"http://developer.android.com/design/patterns/navigation.html\">common\n     * navigation patterns</a> instead.\n     ",
    "links" : [ ]
  }, {
    "name" : "NAVIGATION_MODE_LIST",
    "type" : "int",
    "comment" : "\n     * List navigation mode. Instead of static title text this mode\n     * presents a list menu for navigation within the activity.\n     * e.g. this might be presented to the user as a dropdown list.\n     *\n     * @deprecated Action bar navigation modes are deprecated and not supported by inline\n     * toolbar action bars. Consider using other\n     * <a href=\"http://developer.android.com/design/patterns/navigation.html\">common\n     * navigation patterns</a> instead.\n     ",
    "links" : [ ]
  }, {
    "name" : "NAVIGATION_MODE_TABS",
    "type" : "int",
    "comment" : "\n     * Tab navigation mode. Instead of static title text this mode\n     * presents a series of tabs for navigation within the activity.\n     *\n     * @deprecated Action bar navigation modes are deprecated and not supported by inline\n     * toolbar action bars. Consider using other\n     * <a href=\"http://developer.android.com/design/patterns/navigation.html\">common\n     * navigation patterns</a> instead.\n     ",
    "links" : [ ]
  }, {
    "name" : "DISPLAY_USE_LOGO",
    "type" : "int",
    "comment" : "\n     * Use logo instead of icon if available. This flag will cause appropriate\n     * navigation modes to use a wider logo in place of the standard icon.\n     *\n     * @see #setDisplayOptions(int)\n     * @see #setDisplayOptions(int, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "DISPLAY_SHOW_HOME",
    "type" : "int",
    "comment" : "\n     * Show 'home' elements in this action bar, leaving more space for other\n     * navigation elements. This includes logo and icon.\n     *\n     * @see #setDisplayOptions(int)\n     * @see #setDisplayOptions(int, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "DISPLAY_HOME_AS_UP",
    "type" : "int",
    "comment" : "\n     * Display the 'home' element such that it appears as an 'up' affordance.\n     * e.g. show an arrow to the left indicating the action that will be taken.\n     *\n     * Set this flag if selecting the 'home' button in the action bar to return\n     * up by a single level in your UI rather than back to the top level or front page.\n     *\n     * <p>Setting this option will implicitly enable interaction with the home/up\n     * button. See {@link #setHomeButtonEnabled(boolean)}.\n     *\n     * @see #setDisplayOptions(int)\n     * @see #setDisplayOptions(int, int)\n     ",
    "links" : [ "#setHomeButtonEnabled(boolean)" ]
  }, {
    "name" : "DISPLAY_SHOW_TITLE",
    "type" : "int",
    "comment" : "\n     * Show the activity title and subtitle, if present.\n     *\n     * @see #setTitle(CharSequence)\n     * @see #setTitle(int)\n     * @see #setSubtitle(CharSequence)\n     * @see #setSubtitle(int)\n     * @see #setDisplayOptions(int)\n     * @see #setDisplayOptions(int, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "DISPLAY_SHOW_CUSTOM",
    "type" : "int",
    "comment" : "\n     * Show the custom view if one has been set.\n     * @see #setCustomView(View)\n     * @see #setDisplayOptions(int)\n     * @see #setDisplayOptions(int, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "DISPLAY_TITLE_MULTIPLE_LINES",
    "type" : "int",
    "comment" : "\n     * Allow the title to wrap onto multiple lines if space is available\n     * @hide pending API approval\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public abstract void setCustomView(View view)",
    "returnType" : "void",
    "comment" : "\n     * Set the action bar into custom navigation mode, supplying a view\n     * for custom navigation.\n     *\n     * Custom navigation views appear between the application icon and\n     * any action buttons and may use any space available there. Common\n     * use cases for custom navigation views might include an auto-suggesting\n     * address bar for a browser or other navigation mechanisms that do not\n     * translate well to provided navigation modes.\n     *\n     * @param view Custom navigation view to place in the ActionBar.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setCustomView(View view, LayoutParams layoutParams)",
    "returnType" : "void",
    "comment" : "\n     * Set the action bar into custom navigation mode, supplying a view\n     * for custom navigation.\n     * \n     * <p>Custom navigation views appear between the application icon and\n     * any action buttons and may use any space available there. Common\n     * use cases for custom navigation views might include an auto-suggesting\n     * address bar for a browser or other navigation mechanisms that do not\n     * translate well to provided navigation modes.</p>\n     *\n     * <p>The display option {@link #DISPLAY_SHOW_CUSTOM} must be set for\n     * the custom view to be displayed.</p>\n     * \n     * @param view Custom navigation view to place in the ActionBar.\n     * @param layoutParams How this custom view should layout in the bar.\n     *\n     * @see #setDisplayOptions(int, int)\n     ",
    "links" : [ "#DISPLAY_SHOW_CUSTOM" ]
  }, {
    "name" : "public abstract void setCustomView(@LayoutRes int resId)",
    "returnType" : "void",
    "comment" : "\n     * Set the action bar into custom navigation mode, supplying a view\n     * for custom navigation.\n     *\n     * <p>Custom navigation views appear between the application icon and\n     * any action buttons and may use any space available there. Common\n     * use cases for custom navigation views might include an auto-suggesting\n     * address bar for a browser or other navigation mechanisms that do not\n     * translate well to provided navigation modes.</p>\n     *\n     * <p>The display option {@link #DISPLAY_SHOW_CUSTOM} must be set for\n     * the custom view to be displayed.</p>\n     *\n     * @param resId Resource ID of a layout to inflate into the ActionBar.\n     *\n     * @see #setDisplayOptions(int, int)\n     ",
    "links" : [ "#DISPLAY_SHOW_CUSTOM" ]
  }, {
    "name" : "public abstract void setIcon(@DrawableRes int resId)",
    "returnType" : "void",
    "comment" : "\n     * Set the icon to display in the 'home' section of the action bar.\n     * The action bar will use an icon specified by its style or the\n     * activity icon by default.\n     *\n     * Whether the home section shows an icon or logo is controlled\n     * by the display option {@link #DISPLAY_USE_LOGO}.\n     *\n     * @param resId Resource ID of a drawable to show as an icon.\n     *\n     * @see #setDisplayUseLogoEnabled(boolean)\n     * @see #setDisplayShowHomeEnabled(boolean)\n     ",
    "links" : [ "#DISPLAY_USE_LOGO" ]
  }, {
    "name" : "public abstract void setIcon(Drawable icon)",
    "returnType" : "void",
    "comment" : "\n     * Set the icon to display in the 'home' section of the action bar.\n     * The action bar will use an icon specified by its style or the\n     * activity icon by default.\n     *\n     * Whether the home section shows an icon or logo is controlled\n     * by the display option {@link #DISPLAY_USE_LOGO}.\n     *\n     * @param icon Drawable to show as an icon.\n     *\n     * @see #setDisplayUseLogoEnabled(boolean)\n     * @see #setDisplayShowHomeEnabled(boolean)\n     ",
    "links" : [ "#DISPLAY_USE_LOGO" ]
  }, {
    "name" : "public abstract void setLogo(@DrawableRes int resId)",
    "returnType" : "void",
    "comment" : "\n     * Set the logo to display in the 'home' section of the action bar.\n     * The action bar will use a logo specified by its style or the\n     * activity logo by default.\n     *\n     * Whether the home section shows an icon or logo is controlled\n     * by the display option {@link #DISPLAY_USE_LOGO}.\n     *\n     * @param resId Resource ID of a drawable to show as a logo.\n     *\n     * @see #setDisplayUseLogoEnabled(boolean)\n     * @see #setDisplayShowHomeEnabled(boolean)\n     ",
    "links" : [ "#DISPLAY_USE_LOGO" ]
  }, {
    "name" : "public abstract void setLogo(Drawable logo)",
    "returnType" : "void",
    "comment" : "\n     * Set the logo to display in the 'home' section of the action bar.\n     * The action bar will use a logo specified by its style or the\n     * activity logo by default.\n     *\n     * Whether the home section shows an icon or logo is controlled\n     * by the display option {@link #DISPLAY_USE_LOGO}.\n     *\n     * @param logo Drawable to show as a logo.\n     *\n     * @see #setDisplayUseLogoEnabled(boolean)\n     * @see #setDisplayShowHomeEnabled(boolean)\n     ",
    "links" : [ "#DISPLAY_USE_LOGO" ]
  }, {
    "name" : "public abstract void setListNavigationCallbacks(SpinnerAdapter adapter, OnNavigationListener callback)",
    "returnType" : "void",
    "comment" : "\n     * Set the adapter and navigation callback for list navigation mode.\n     *\n     * The supplied adapter will provide views for the expanded list as well as\n     * the currently selected item. (These may be displayed differently.)\n     *\n     * The supplied OnNavigationListener will alert the application when the user\n     * changes the current list selection.\n     *\n     * @param adapter An adapter that will provide views both to display\n     *                the current navigation selection and populate views\n     *                within the dropdown navigation menu.\n     * @param callback An OnNavigationListener that will receive events when the user\n     *                 selects a navigation item.\n     *\n     * @deprecated Action bar navigation modes are deprecated and not supported by inline\n     * toolbar action bars. Consider using other\n     * <a href=\"http://developer.android.com/design/patterns/navigation.html\">common\n     * navigation patterns</a> instead.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setSelectedNavigationItem(int position)",
    "returnType" : "void",
    "comment" : "\n     * Set the selected navigation item in list or tabbed navigation modes.\n     *\n     * @param position Position of the item to select.\n     *\n     * @deprecated Action bar navigation modes are deprecated and not supported by inline\n     * toolbar action bars. Consider using other\n     * <a href=\"http://developer.android.com/design/patterns/navigation.html\">common\n     * navigation patterns</a> instead.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getSelectedNavigationIndex()",
    "returnType" : "int",
    "comment" : "\n     * Get the position of the selected navigation item in list or tabbed navigation modes.\n     *\n     * @return Position of the selected item.\n     *\n     * @deprecated Action bar navigation modes are deprecated and not supported by inline\n     * toolbar action bars. Consider using other\n     * <a href=\"http://developer.android.com/design/patterns/navigation.html\">common\n     * navigation patterns</a> instead.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getNavigationItemCount()",
    "returnType" : "int",
    "comment" : "\n     * Get the number of navigation items present in the current navigation mode.\n     *\n     * @return Number of navigation items.\n     *\n     * @deprecated Action bar navigation modes are deprecated and not supported by inline\n     * toolbar action bars. Consider using other\n     * <a href=\"http://developer.android.com/design/patterns/navigation.html\">common\n     * navigation patterns</a> instead.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setTitle(CharSequence title)",
    "returnType" : "void",
    "comment" : "\n     * Set the action bar's title. This will only be displayed if\n     * {@link #DISPLAY_SHOW_TITLE} is set.\n     *\n     * @param title Title to set\n     *\n     * @see #setTitle(int)\n     * @see #setDisplayOptions(int, int)\n     ",
    "links" : [ "#DISPLAY_SHOW_TITLE" ]
  }, {
    "name" : "public abstract void setTitle(@StringRes int resId)",
    "returnType" : "void",
    "comment" : "\n     * Set the action bar's title. This will only be displayed if\n     * {@link #DISPLAY_SHOW_TITLE} is set.\n     *\n     * @param resId Resource ID of title string to set\n     *\n     * @see #setTitle(CharSequence)\n     * @see #setDisplayOptions(int, int)\n     ",
    "links" : [ "#DISPLAY_SHOW_TITLE" ]
  }, {
    "name" : "public abstract void setSubtitle(CharSequence subtitle)",
    "returnType" : "void",
    "comment" : "\n     * Set the action bar's subtitle. This will only be displayed if\n     * {@link #DISPLAY_SHOW_TITLE} is set. Set to null to disable the\n     * subtitle entirely.\n     *\n     * @param subtitle Subtitle to set\n     *\n     * @see #setSubtitle(int)\n     * @see #setDisplayOptions(int, int)\n     ",
    "links" : [ "#DISPLAY_SHOW_TITLE" ]
  }, {
    "name" : "public abstract void setSubtitle(@StringRes int resId)",
    "returnType" : "void",
    "comment" : "\n     * Set the action bar's subtitle. This will only be displayed if\n     * {@link #DISPLAY_SHOW_TITLE} is set.\n     *\n     * @param resId Resource ID of subtitle string to set\n     *\n     * @see #setSubtitle(CharSequence)\n     * @see #setDisplayOptions(int, int)\n     ",
    "links" : [ "#DISPLAY_SHOW_TITLE" ]
  }, {
    "name" : "public abstract void setDisplayOptions(@DisplayOptions int options)",
    "returnType" : "void",
    "comment" : "\n     * Set display options. This changes all display option bits at once. To change\n     * a limited subset of display options, see {@link #setDisplayOptions(int, int)}.\n     * \n     * @param options A combination of the bits defined by the DISPLAY_ constants\n     *                defined in ActionBar.\n     ",
    "links" : [ "#setDisplayOptions(int" ]
  }, {
    "name" : "public abstract void setDisplayOptions(@DisplayOptions int options, @DisplayOptions int mask)",
    "returnType" : "void",
    "comment" : "\n     * Set selected display options. Only the options specified by mask will be changed.\n     * To change all display option bits at once, see {@link #setDisplayOptions(int)}.\n     * \n     * <p>Example: setDisplayOptions(0, DISPLAY_SHOW_HOME) will disable the\n     * {@link #DISPLAY_SHOW_HOME} option.\n     * setDisplayOptions(DISPLAY_SHOW_HOME, DISPLAY_SHOW_HOME | DISPLAY_USE_LOGO)\n     * will enable {@link #DISPLAY_SHOW_HOME} and disable {@link #DISPLAY_USE_LOGO}.\n     * \n     * @param options A combination of the bits defined by the DISPLAY_ constants\n     *                defined in ActionBar.\n     * @param mask A bit mask declaring which display options should be changed.\n     ",
    "links" : [ "#DISPLAY_SHOW_HOME", "#setDisplayOptions(int)", "#DISPLAY_USE_LOGO" ]
  }, {
    "name" : "public abstract void setDisplayUseLogoEnabled(boolean useLogo)",
    "returnType" : "void",
    "comment" : "\n     * Set whether to display the activity logo rather than the activity icon.\n     * A logo is often a wider, more detailed image.\n     *\n     * <p>To set several display options at once, see the setDisplayOptions methods.\n     *\n     * @param useLogo true to use the activity logo, false to use the activity icon.\n     *\n     * @see #setDisplayOptions(int)\n     * @see #setDisplayOptions(int, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setDisplayShowHomeEnabled(boolean showHome)",
    "returnType" : "void",
    "comment" : "\n     * Set whether to include the application home affordance in the action bar.\n     * Home is presented as either an activity icon or logo.\n     *\n     * <p>To set several display options at once, see the setDisplayOptions methods.\n     *\n     * @param showHome true to show home, false otherwise.\n     *\n     * @see #setDisplayOptions(int)\n     * @see #setDisplayOptions(int, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setDisplayHomeAsUpEnabled(boolean showHomeAsUp)",
    "returnType" : "void",
    "comment" : "\n     * Set whether home should be displayed as an \"up\" affordance.\n     * Set this to true if selecting \"home\" returns up by a single level in your UI\n     * rather than back to the top level or front page.\n     *\n     * <p>To set several display options at once, see the setDisplayOptions methods.\n     *\n     * @param showHomeAsUp true to show the user that selecting home will return one\n     *                     level up rather than to the top level of the app.\n     *\n     * @see #setDisplayOptions(int)\n     * @see #setDisplayOptions(int, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setDisplayShowTitleEnabled(boolean showTitle)",
    "returnType" : "void",
    "comment" : "\n     * Set whether an activity title/subtitle should be displayed.\n     *\n     * <p>To set several display options at once, see the setDisplayOptions methods.\n     *\n     * @param showTitle true to display a title/subtitle if present.\n     *\n     * @see #setDisplayOptions(int)\n     * @see #setDisplayOptions(int, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setDisplayShowCustomEnabled(boolean showCustom)",
    "returnType" : "void",
    "comment" : "\n     * Set whether a custom view should be displayed, if set.\n     *\n     * <p>To set several display options at once, see the setDisplayOptions methods.\n     *\n     * @param showCustom true if the currently set custom view should be displayed, false otherwise.\n     *\n     * @see #setDisplayOptions(int)\n     * @see #setDisplayOptions(int, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setBackgroundDrawable(@Nullable Drawable d)",
    "returnType" : "void",
    "comment" : "\n     * Set the ActionBar's background. This will be used for the primary\n     * action bar.\n     * \n     * @param d Background drawable\n     * @see #setStackedBackgroundDrawable(Drawable)\n     * @see #setSplitBackgroundDrawable(Drawable)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setStackedBackgroundDrawable(Drawable d)",
    "returnType" : "void",
    "comment" : "\n     * Set the ActionBar's stacked background. This will appear\n     * in the second row/stacked bar on some devices and configurations.\n     *\n     * @param d Background drawable for the stacked row\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSplitBackgroundDrawable(Drawable d)",
    "returnType" : "void",
    "comment" : "\n     * Set the ActionBar's split background. This will appear in\n     * the split action bar containing menu-provided action buttons\n     * on some devices and configurations.\n     * <p>You can enable split action bar with {@link android.R.attr#uiOptions}\n     *\n     * @param d Background drawable for the split bar\n     ",
    "links" : [ "android.R.attr#uiOptions" ]
  }, {
    "name" : "public abstract View getCustomView()",
    "returnType" : "View",
    "comment" : "\n     * @return The current custom view.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract CharSequence getTitle()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Returns the current ActionBar title in standard mode.\n     * Returns null if {@link #getNavigationMode()} would not return\n     * {@link #NAVIGATION_MODE_STANDARD}. \n     *\n     * @return The current ActionBar title or null.\n     ",
    "links" : [ "#NAVIGATION_MODE_STANDARD", "#getNavigationMode()" ]
  }, {
    "name" : "public abstract CharSequence getSubtitle()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Returns the current ActionBar subtitle in standard mode.\n     * Returns null if {@link #getNavigationMode()} would not return\n     * {@link #NAVIGATION_MODE_STANDARD}. \n     *\n     * @return The current ActionBar subtitle or null.\n     ",
    "links" : [ "#NAVIGATION_MODE_STANDARD", "#getNavigationMode()" ]
  }, {
    "name" : "public abstract int getNavigationMode()",
    "returnType" : "int",
    "comment" : "\n     * Returns the current navigation mode. The result will be one of:\n     * <ul>\n     * <li>{@link #NAVIGATION_MODE_STANDARD}</li>\n     * <li>{@link #NAVIGATION_MODE_LIST}</li>\n     * <li>{@link #NAVIGATION_MODE_TABS}</li>\n     * </ul>\n     *\n     * @return The current navigation mode.\n     *\n     * @deprecated Action bar navigation modes are deprecated and not supported by inline\n     * toolbar action bars. Consider using other\n     * <a href=\"http://developer.android.com/design/patterns/navigation.html\">common\n     * navigation patterns</a> instead.\n     ",
    "links" : [ "#NAVIGATION_MODE_LIST", "#NAVIGATION_MODE_STANDARD", "#NAVIGATION_MODE_TABS" ]
  }, {
    "name" : "public abstract void setNavigationMode(@NavigationMode int mode)",
    "returnType" : "void",
    "comment" : "\n     * Set the current navigation mode.\n     *\n     * @param mode The new mode to set.\n     * @see #NAVIGATION_MODE_STANDARD\n     * @see #NAVIGATION_MODE_LIST\n     * @see #NAVIGATION_MODE_TABS\n     *\n     * @deprecated Action bar navigation modes are deprecated and not supported by inline\n     * toolbar action bars. Consider using other\n     * <a href=\"http://developer.android.com/design/patterns/navigation.html\">common\n     * navigation patterns</a> instead.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getDisplayOptions()",
    "returnType" : "int",
    "comment" : "\n     * @return The current set of display options. \n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Tab newTab()",
    "returnType" : "Tab",
    "comment" : "\n     * Create and return a new {@link Tab}.\n     * This tab will not be included in the action bar until it is added.\n     *\n     * <p>Very often tabs will be used to switch between {@link Fragment}\n     * objects.  Here is a typical implementation of such tabs:</p>\n     *\n     * {@sample development/samples/ApiDemos/src/com/example/android/apis/app/FragmentTabs.java\n     *      complete}\n     *\n     * @return A new Tab\n     *\n     * @see #addTab(Tab)\n     *\n     * @deprecated Action bar navigation modes are deprecated and not supported by inline\n     * toolbar action bars. Consider using other\n     * <a href=\"http://developer.android.com/design/patterns/navigation.html\">common\n     * navigation patterns</a> instead.\n     ",
    "links" : [ "android.app.Fragment", "Tab" ]
  }, {
    "name" : "public abstract void addTab(Tab tab)",
    "returnType" : "void",
    "comment" : "\n     * Add a tab for use in tabbed navigation mode. The tab will be added at the end of the list.\n     * If this is the first tab to be added it will become the selected tab.\n     *\n     * @param tab Tab to add\n     *\n     * @deprecated Action bar navigation modes are deprecated and not supported by inline\n     * toolbar action bars. Consider using other\n     * <a href=\"http://developer.android.com/design/patterns/navigation.html\">common\n     * navigation patterns</a> instead.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void addTab(Tab tab, boolean setSelected)",
    "returnType" : "void",
    "comment" : "\n     * Add a tab for use in tabbed navigation mode. The tab will be added at the end of the list.\n     *\n     * @param tab Tab to add\n     * @param setSelected True if the added tab should become the selected tab.\n     *\n     * @deprecated Action bar navigation modes are deprecated and not supported by inline\n     * toolbar action bars. Consider using other\n     * <a href=\"http://developer.android.com/design/patterns/navigation.html\">common\n     * navigation patterns</a> instead.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void addTab(Tab tab, int position)",
    "returnType" : "void",
    "comment" : "\n     * Add a tab for use in tabbed navigation mode. The tab will be inserted at\n     * <code>position</code>. If this is the first tab to be added it will become\n     * the selected tab.\n     *\n     * @param tab The tab to add\n     * @param position The new position of the tab\n     *\n     * @deprecated Action bar navigation modes are deprecated and not supported by inline\n     * toolbar action bars. Consider using other\n     * <a href=\"http://developer.android.com/design/patterns/navigation.html\">common\n     * navigation patterns</a> instead.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void addTab(Tab tab, int position, boolean setSelected)",
    "returnType" : "void",
    "comment" : "\n     * Add a tab for use in tabbed navigation mode. The tab will be insterted at\n     * <code>position</code>.\n     *\n     * @param tab The tab to add\n     * @param position The new position of the tab\n     * @param setSelected True if the added tab should become the selected tab.\n     *\n     * @deprecated Action bar navigation modes are deprecated and not supported by inline\n     * toolbar action bars. Consider using other\n     * <a href=\"http://developer.android.com/design/patterns/navigation.html\">common\n     * navigation patterns</a> instead.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void removeTab(Tab tab)",
    "returnType" : "void",
    "comment" : "\n     * Remove a tab from the action bar. If the removed tab was selected it will be deselected\n     * and another tab will be selected if present.\n     *\n     * @param tab The tab to remove\n     *\n     * @deprecated Action bar navigation modes are deprecated and not supported by inline\n     * toolbar action bars. Consider using other\n     * <a href=\"http://developer.android.com/design/patterns/navigation.html\">common\n     * navigation patterns</a> instead.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void removeTabAt(int position)",
    "returnType" : "void",
    "comment" : "\n     * Remove a tab from the action bar. If the removed tab was selected it will be deselected\n     * and another tab will be selected if present.\n     *\n     * @param position Position of the tab to remove\n     *\n     * @deprecated Action bar navigation modes are deprecated and not supported by inline\n     * toolbar action bars. Consider using other\n     * <a href=\"http://developer.android.com/design/patterns/navigation.html\">common\n     * navigation patterns</a> instead.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void removeAllTabs()",
    "returnType" : "void",
    "comment" : "\n     * Remove all tabs from the action bar and deselect the current tab.\n     *\n     * @deprecated Action bar navigation modes are deprecated and not supported by inline\n     * toolbar action bars. Consider using other\n     * <a href=\"http://developer.android.com/design/patterns/navigation.html\">common\n     * navigation patterns</a> instead.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void selectTab(Tab tab)",
    "returnType" : "void",
    "comment" : "\n     * Select the specified tab. If it is not a child of this action bar it will be added.\n     *\n     * <p>Note: If you want to select by index, use {@link #setSelectedNavigationItem(int)}.</p>\n     *\n     * @param tab Tab to select\n     *\n     * @deprecated Action bar navigation modes are deprecated and not supported by inline\n     * toolbar action bars. Consider using other\n     * <a href=\"http://developer.android.com/design/patterns/navigation.html\">common\n     * navigation patterns</a> instead.\n     ",
    "links" : [ "#setSelectedNavigationItem(int)" ]
  }, {
    "name" : "public abstract Tab getSelectedTab()",
    "returnType" : "Tab",
    "comment" : "\n     * Returns the currently selected tab if in tabbed navigation mode and there is at least\n     * one tab present.\n     *\n     * @return The currently selected tab or null\n     *\n     * @deprecated Action bar navigation modes are deprecated and not supported by inline\n     * toolbar action bars. Consider using other\n     * <a href=\"http://developer.android.com/design/patterns/navigation.html\">common\n     * navigation patterns</a> instead.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Tab getTabAt(int index)",
    "returnType" : "Tab",
    "comment" : "\n     * Returns the tab at the specified index.\n     *\n     * @param index Index value in the range 0-get\n     * @return\n     *\n     * @deprecated Action bar navigation modes are deprecated and not supported by inline\n     * toolbar action bars. Consider using other\n     * <a href=\"http://developer.android.com/design/patterns/navigation.html\">common\n     * navigation patterns</a> instead.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getTabCount()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of tabs currently registered with the action bar.\n     * @return Tab count\n     *\n     * @deprecated Action bar navigation modes are deprecated and not supported by inline\n     * toolbar action bars. Consider using other\n     * <a href=\"http://developer.android.com/design/patterns/navigation.html\">common\n     * navigation patterns</a> instead.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getHeight()",
    "returnType" : "int",
    "comment" : "\n     * Retrieve the current height of the ActionBar.\n     *\n     * @return The ActionBar's height\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void show()",
    "returnType" : "void",
    "comment" : "\n     * Show the ActionBar if it is not currently showing.\n     * If the window hosting the ActionBar does not have the feature\n     * {@link Window#FEATURE_ACTION_BAR_OVERLAY} it will resize application\n     * content to fit the new space available.\n     *\n     * <p>If you are hiding the ActionBar through\n     * {@link View#SYSTEM_UI_FLAG_FULLSCREEN View.SYSTEM_UI_FLAG_FULLSCREEN},\n     * you should not call this function directly.\n     ",
    "links" : [ "android.view.View#SYSTEM_UI_FLAG_FULLSCREEN", "android.view.Window#FEATURE_ACTION_BAR_OVERLAY" ]
  }, {
    "name" : "public abstract void hide()",
    "returnType" : "void",
    "comment" : "\n     * Hide the ActionBar if it is currently showing.\n     * If the window hosting the ActionBar does not have the feature\n     * {@link Window#FEATURE_ACTION_BAR_OVERLAY} it will resize application\n     * content to fit the new space available.\n     *\n     * <p>Instead of calling this function directly, you can also cause an\n     * ActionBar using the overlay feature to hide through\n     * {@link View#SYSTEM_UI_FLAG_FULLSCREEN View.SYSTEM_UI_FLAG_FULLSCREEN}.\n     * Hiding the ActionBar through this system UI flag allows you to more\n     * seamlessly hide it in conjunction with other screen decorations.\n     ",
    "links" : [ "android.view.View#SYSTEM_UI_FLAG_FULLSCREEN", "android.view.Window#FEATURE_ACTION_BAR_OVERLAY" ]
  }, {
    "name" : "public abstract boolean isShowing()",
    "returnType" : "boolean",
    "comment" : "\n     * @return <code>true</code> if the ActionBar is showing, <code>false</code> otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void addOnMenuVisibilityListener(OnMenuVisibilityListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Add a listener that will respond to menu visibility change events.\n     *\n     * @param listener The new listener to add\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void removeOnMenuVisibilityListener(OnMenuVisibilityListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Remove a menu visibility listener. This listener will no longer receive menu\n     * visibility change events.\n     *\n     * @param listener A listener to remove that was previously added\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setHomeButtonEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * Enable or disable the \"home\" button in the corner of the action bar. (Note that this\n     * is the application home/up affordance on the action bar, not the systemwide home\n     * button.)\n     *\n     * <p>This defaults to true for packages targeting &lt; API 14. For packages targeting\n     * API 14 or greater, the application should call this method to enable interaction\n     * with the home/up affordance.\n     *\n     * <p>Setting the {@link #DISPLAY_HOME_AS_UP} display option will automatically enable\n     * the home button.\n     *\n     * @param enabled true to enable the home button, false to disable the home button.\n     ",
    "links" : [ "#DISPLAY_HOME_AS_UP" ]
  }, {
    "name" : "public Context getThemedContext()",
    "returnType" : "Context",
    "comment" : "\n     * Returns a {@link Context} with an appropriate theme for creating views that\n     * will appear in the action bar. If you are inflating or instantiating custom views\n     * that will appear in an action bar, you should use the Context returned by this method.\n     * (This includes adapters used for list navigation mode.)\n     * This will ensure that views contrast properly against the action bar.\n     *\n     * @return A themed Context for creating views\n     ",
    "links" : [ "android.content.Context" ]
  }, {
    "name" : "public boolean isTitleTruncated()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the Title field has been truncated during layout for lack\n     * of available space.\n     *\n     * @return true if the Title field has been truncated\n     * @hide pending API approval\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setHomeAsUpIndicator(Drawable indicator)",
    "returnType" : "void",
    "comment" : "\n     * Set an alternate drawable to display next to the icon/logo/title\n     * when {@link #DISPLAY_HOME_AS_UP} is enabled. This can be useful if you are using\n     * this mode to display an alternate selection for up navigation, such as a sliding drawer.\n     *\n     * <p>If you pass <code>null</code> to this method, the default drawable from the theme\n     * will be used.</p>\n     *\n     * <p>If you implement alternate or intermediate behavior around Up, you should also\n     * call {@link #setHomeActionContentDescription(int) setHomeActionContentDescription()}\n     * to provide a correct description of the action for accessibility support.</p>\n     *\n     * @param indicator A drawable to use for the up indicator, or null to use the theme's default\n     *\n     * @see #setDisplayOptions(int, int)\n     * @see #setDisplayHomeAsUpEnabled(boolean)\n     * @see #setHomeActionContentDescription(int)\n     ",
    "links" : [ "#setHomeActionContentDescription(int)", "#DISPLAY_HOME_AS_UP" ]
  }, {
    "name" : "public void setHomeAsUpIndicator(@DrawableRes int resId)",
    "returnType" : "void",
    "comment" : "\n     * Set an alternate drawable to display next to the icon/logo/title\n     * when {@link #DISPLAY_HOME_AS_UP} is enabled. This can be useful if you are using\n     * this mode to display an alternate selection for up navigation, such as a sliding drawer.\n     *\n     * <p>If you pass <code>0</code> to this method, the default drawable from the theme\n     * will be used.</p>\n     *\n     * <p>If you implement alternate or intermediate behavior around Up, you should also\n     * call {@link #setHomeActionContentDescription(int) setHomeActionContentDescription()}\n     * to provide a correct description of the action for accessibility support.</p>\n     *\n     * @param resId Resource ID of a drawable to use for the up indicator, or null\n     *              to use the theme's default\n     *\n     * @see #setDisplayOptions(int, int)\n     * @see #setDisplayHomeAsUpEnabled(boolean)\n     * @see #setHomeActionContentDescription(int)\n     ",
    "links" : [ "#setHomeActionContentDescription(int)", "#DISPLAY_HOME_AS_UP" ]
  }, {
    "name" : "public void setHomeActionContentDescription(CharSequence description)",
    "returnType" : "void",
    "comment" : "\n     * Set an alternate description for the Home/Up action, when enabled.\n     *\n     * <p>This description is commonly used for accessibility/screen readers when\n     * the Home action is enabled. (See {@link #setDisplayHomeAsUpEnabled(boolean)}.)\n     * Examples of this are, \"Navigate Home\" or \"Navigate Up\" depending on the\n     * {@link #DISPLAY_HOME_AS_UP} display option. If you have changed the home-as-up\n     * indicator using {@link #setHomeAsUpIndicator(int)} to indicate more specific\n     * functionality such as a sliding drawer, you should also set this to accurately\n     * describe the action.</p>\n     *\n     * <p>Setting this to <code>null</code> will use the system default description.</p>\n     *\n     * @param description New description for the Home action when enabled\n     * @see #setHomeAsUpIndicator(int)\n     * @see #setHomeAsUpIndicator(android.graphics.drawable.Drawable)\n     ",
    "links" : [ "#setDisplayHomeAsUpEnabled(boolean)", "#DISPLAY_HOME_AS_UP", "#setHomeAsUpIndicator(int)" ]
  }, {
    "name" : "public void setHomeActionContentDescription(@StringRes int resId)",
    "returnType" : "void",
    "comment" : "\n     * Set an alternate description for the Home/Up action, when enabled.\n     *\n     * <p>This description is commonly used for accessibility/screen readers when\n     * the Home action is enabled. (See {@link #setDisplayHomeAsUpEnabled(boolean)}.)\n     * Examples of this are, \"Navigate Home\" or \"Navigate Up\" depending on the\n     * {@link #DISPLAY_HOME_AS_UP} display option. If you have changed the home-as-up\n     * indicator using {@link #setHomeAsUpIndicator(int)} to indicate more specific\n     * functionality such as a sliding drawer, you should also set this to accurately\n     * describe the action.</p>\n     *\n     * <p>Setting this to <code>0</code> will use the system default description.</p>\n     *\n     * @param resId Resource ID of a string to use as the new description\n     *              for the Home action when enabled\n     * @see #setHomeAsUpIndicator(int)\n     * @see #setHomeAsUpIndicator(android.graphics.drawable.Drawable)\n     ",
    "links" : [ "#setDisplayHomeAsUpEnabled(boolean)", "#DISPLAY_HOME_AS_UP", "#setHomeAsUpIndicator(int)" ]
  }, {
    "name" : "public void setHideOnContentScrollEnabled(boolean hideOnContentScroll)",
    "returnType" : "void",
    "comment" : "\n     * Enable hiding the action bar on content scroll.\n     *\n     * <p>If enabled, the action bar will scroll out of sight along with a\n     * {@link View#setNestedScrollingEnabled(boolean) nested scrolling child} view's content.\n     * The action bar must be in {@link Window#FEATURE_ACTION_BAR_OVERLAY overlay mode}\n     * to enable hiding on content scroll.</p>\n     *\n     * <p>When partially scrolled off screen the action bar is considered\n     * {@link #hide() hidden}. A call to {@link #show() show} will cause it to return to full view.\n     * </p>\n     * @param hideOnContentScroll true to enable hiding on content scroll.\n     ",
    "links" : [ "#show()", "android.view.View#setNestedScrollingEnabled(boolean)", "#hide()", "android.view.Window#FEATURE_ACTION_BAR_OVERLAY" ]
  }, {
    "name" : "public boolean isHideOnContentScrollEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Return whether the action bar is configured to scroll out of sight along with\n     * a {@link View#setNestedScrollingEnabled(boolean) nested scrolling child}.\n     *\n     * @return true if hide-on-content-scroll is enabled\n     * @see #setHideOnContentScrollEnabled(boolean)\n     ",
    "links" : [ "android.view.View#setNestedScrollingEnabled(boolean)" ]
  }, {
    "name" : "public int getHideOffset()",
    "returnType" : "int",
    "comment" : "\n     * Return the current vertical offset of the action bar.\n     *\n     * <p>The action bar's current hide offset is the distance that the action bar is currently\n     * scrolled offscreen in pixels. The valid range is 0 (fully visible) to the action bar's\n     * current measured {@link #getHeight() height} (fully invisible).</p>\n     *\n     * @return The action bar's offset toward its fully hidden state in pixels\n     ",
    "links" : [ "#getHeight()" ]
  }, {
    "name" : "public void setHideOffset(int offset)",
    "returnType" : "void",
    "comment" : "\n     * Set the current hide offset of the action bar.\n     *\n     * <p>The action bar's current hide offset is the distance that the action bar is currently\n     * scrolled offscreen in pixels. The valid range is 0 (fully visible) to the action bar's\n     * current measured {@link #getHeight() height} (fully invisible).</p>\n     *\n     * @param offset The action bar's offset toward its fully hidden state in pixels.\n     ",
    "links" : [ "#getHeight()" ]
  }, {
    "name" : "public void setElevation(float elevation)",
    "returnType" : "void",
    "comment" : "\n     * Set the Z-axis elevation of the action bar in pixels.\n     *\n     * <p>The action bar's elevation is the distance it is placed from its parent surface. Higher\n     * values are closer to the user.</p>\n     *\n     * @param elevation Elevation value in pixels\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getElevation()",
    "returnType" : "float",
    "comment" : "\n     * Get the Z-axis elevation of the action bar in pixels.\n     *\n     * <p>The action bar's elevation is the distance it is placed from its parent surface. Higher\n     * values are closer to the user.</p>\n     *\n     * @return Elevation value in pixels\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDefaultDisplayHomeAsUpEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setShowHideAnimationEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void onConfigurationChanged(Configuration config)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void dispatchMenuVisibilityChanged(boolean visible)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public ActionMode startActionMode(ActionMode.Callback callback)",
    "returnType" : "ActionMode",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean openOptionsMenu()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean closeOptionsMenu()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean invalidateOptionsMenu()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean onMenuKeyEvent(KeyEvent event)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean onKeyShortcut(int keyCode, KeyEvent event)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean collapseActionView()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setWindowTitle(CharSequence title)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void onDestroy()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public abstract void setCustomView(View view)", "public abstract void setCustomView(View view, LayoutParams layoutParams)", "public abstract void setCustomView(@LayoutRes int resId)", "public abstract void setIcon(@DrawableRes int resId)", "public abstract void setIcon(Drawable icon)", "public abstract void setLogo(@DrawableRes int resId)", "public abstract void setLogo(Drawable logo)", "public abstract void setListNavigationCallbacks(SpinnerAdapter adapter, OnNavigationListener callback)", "public abstract void setSelectedNavigationItem(int position)", "public abstract int getSelectedNavigationIndex()", "public abstract int getNavigationItemCount()", "public abstract void setTitle(CharSequence title)", "public abstract void setTitle(@StringRes int resId)", "public abstract void setSubtitle(CharSequence subtitle)", "public abstract void setSubtitle(@StringRes int resId)", "public abstract void setDisplayOptions(@DisplayOptions int options)", "public abstract void setDisplayOptions(@DisplayOptions int options, @DisplayOptions int mask)", "public abstract void setDisplayUseLogoEnabled(boolean useLogo)", "public abstract void setDisplayShowHomeEnabled(boolean showHome)", "public abstract void setDisplayHomeAsUpEnabled(boolean showHomeAsUp)", "public abstract void setDisplayShowTitleEnabled(boolean showTitle)", "public abstract void setDisplayShowCustomEnabled(boolean showCustom)", "public abstract void setBackgroundDrawable(@Nullable Drawable d)", "public void setStackedBackgroundDrawable(Drawable d)", "public void setSplitBackgroundDrawable(Drawable d)", "public abstract View getCustomView()", "public abstract CharSequence getTitle()", "public abstract CharSequence getSubtitle()", "public abstract int getNavigationMode()", "public abstract void setNavigationMode(@NavigationMode int mode)", "public abstract int getDisplayOptions()", "public abstract Tab newTab()", "public abstract void addTab(Tab tab)", "public abstract void addTab(Tab tab, boolean setSelected)", "public abstract void addTab(Tab tab, int position)", "public abstract void addTab(Tab tab, int position, boolean setSelected)", "public abstract void removeTab(Tab tab)", "public abstract void removeTabAt(int position)", "public abstract void removeAllTabs()", "public abstract void selectTab(Tab tab)", "public abstract Tab getSelectedTab()", "public abstract Tab getTabAt(int index)", "public abstract int getTabCount()", "public abstract int getHeight()", "public abstract void show()", "public abstract void hide()", "public abstract boolean isShowing()", "public abstract void addOnMenuVisibilityListener(OnMenuVisibilityListener listener)", "public abstract void removeOnMenuVisibilityListener(OnMenuVisibilityListener listener)", "public void setHomeButtonEnabled(boolean enabled)", "public Context getThemedContext()", "public boolean isTitleTruncated()", "public void setHomeAsUpIndicator(Drawable indicator)", "public void setHomeAsUpIndicator(@DrawableRes int resId)", "public void setHomeActionContentDescription(CharSequence description)", "public void setHomeActionContentDescription(@StringRes int resId)", "public void setHideOnContentScrollEnabled(boolean hideOnContentScroll)", "public boolean isHideOnContentScrollEnabled()", "public int getHideOffset()", "public void setHideOffset(int offset)", "public void setElevation(float elevation)", "public float getElevation()", "public void setDefaultDisplayHomeAsUpEnabled(boolean enabled)", "public void setShowHideAnimationEnabled(boolean enabled)", "public void onConfigurationChanged(Configuration config)", "public void dispatchMenuVisibilityChanged(boolean visible)", "public ActionMode startActionMode(ActionMode.Callback callback)", "public boolean openOptionsMenu()", "public boolean closeOptionsMenu()", "public boolean invalidateOptionsMenu()", "public boolean onMenuKeyEvent(KeyEvent event)", "public boolean onKeyShortcut(int keyCode, KeyEvent event)", "public boolean collapseActionView()", "public void setWindowTitle(CharSequence title)", "public void onDestroy()" ],
  "variableNames" : [ "NAVIGATION_MODE_STANDARD", "NAVIGATION_MODE_LIST", "NAVIGATION_MODE_TABS", "DISPLAY_USE_LOGO", "DISPLAY_SHOW_HOME", "DISPLAY_HOME_AS_UP", "DISPLAY_SHOW_TITLE", "DISPLAY_SHOW_CUSTOM", "DISPLAY_TITLE_MULTIPLE_LINES" ]
}