{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/window/WindowOrganizer.java",
  "packageName" : "android.window",
  "className" : "WindowOrganizer",
  "comment" : "\n * Base class for organizing specific types of windows like Tasks and DisplayAreas\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "IWindowOrganizerControllerSingleton",
    "type" : "Singleton<IWindowOrganizerController>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void applyTransaction(@NonNull WindowContainerTransaction t)",
    "returnType" : "void",
    "comment" : "\n     * Apply multiple WindowContainer operations at once.\n     *\n     * Note that using this API requires the caller to hold\n     * {@link android.Manifest.permission#MANAGE_ACTIVITY_TASKS}.\n     *\n     * @param t The transaction to apply.\n     ",
    "links" : [ "android.Manifest.permission#MANAGE_ACTIVITY_TASKS" ]
  }, {
    "name" : "public int applySyncTransaction(@NonNull WindowContainerTransaction t, @NonNull WindowContainerTransactionCallback callback)",
    "returnType" : "int",
    "comment" : "\n     * Apply multiple WindowContainer operations at once.\n     *\n     * Note that using this API requires the caller to hold\n     * {@link android.Manifest.permission#MANAGE_ACTIVITY_TASKS}.\n     *\n     * @param t The transaction to apply.\n     * @param callback This transaction will use the synchronization scheme described in\n     *        BLASTSyncEngine.java. The SurfaceControl transaction containing the effects of this\n     *        WindowContainer transaction will be passed to this callback when ready.\n     * @return An ID for the sync operation which will later be passed to transactionReady callback.\n     *         This lets the caller differentiate overlapping sync operations.\n     ",
    "links" : [ "android.Manifest.permission#MANAGE_ACTIVITY_TASKS" ]
  }, {
    "name" : "public IBinder startNewTransition(int type, @Nullable WindowContainerTransaction t)",
    "returnType" : "IBinder",
    "comment" : "\n     * Starts a new transition, don't use this to start an already created one.\n     * @param type The type of the transition. This is ignored if a transitionToken is provided.\n     * @param t The set of window operations that are part of this transition.\n     * @return A token identifying the transition. This will be the same as transitionToken if it\n     *         was provided.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void startTransition(@NonNull IBinder transitionToken, @Nullable WindowContainerTransaction t)",
    "returnType" : "void",
    "comment" : "\n     * Starts an already created transition.\n     * @param transitionToken An existing transition to start.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void finishTransition(@NonNull IBinder transitionToken, @Nullable WindowContainerTransaction t)",
    "returnType" : "void",
    "comment" : "\n     * Finishes a running transition.\n     * @param transitionToken The transition to finish. Can't be null.\n     * @param t A set of window operations to apply before finishing.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int startLegacyTransition(int type, @NonNull RemoteAnimationAdapter adapter, @NonNull WindowContainerTransactionCallback syncCallback, @NonNull WindowContainerTransaction t)",
    "returnType" : "int",
    "comment" : "\n     * Start a legacy transition.\n     * @param type The type of the transition. This is ignored if a transitionToken is provided.\n     * @param adapter An existing transition to start. If null, a new transition is created.\n     * @param t The set of window operations that are part of this transition.\n     * @return true on success, false if a transition was already running.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void registerTransitionPlayer(@Nullable ITransitionPlayer player)",
    "returnType" : "void",
    "comment" : "\n     * Register an ITransitionPlayer to handle transition animations.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ITransitionMetricsReporter getTransitionMetricsReporter()",
    "returnType" : "ITransitionMetricsReporter",
    "comment" : "\n     * @see TransitionMetrics\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean shareTransactionQueue()",
    "returnType" : "boolean",
    "comment" : "\n     * Use WM's transaction-queue instead of Shell's independent one. This is necessary\n     * if WM and Shell need to coordinate transactions (eg. for shell transitions).\n     * @return true if successful, false otherwise.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " static IWindowOrganizerController getWindowOrganizerController()",
    "returnType" : "IWindowOrganizerController",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void applyTransaction(@NonNull WindowContainerTransaction t)", "public int applySyncTransaction(@NonNull WindowContainerTransaction t, @NonNull WindowContainerTransactionCallback callback)", "public IBinder startNewTransition(int type, @Nullable WindowContainerTransaction t)", "public void startTransition(@NonNull IBinder transitionToken, @Nullable WindowContainerTransaction t)", "public void finishTransition(@NonNull IBinder transitionToken, @Nullable WindowContainerTransaction t)", "public int startLegacyTransition(int type, @NonNull RemoteAnimationAdapter adapter, @NonNull WindowContainerTransactionCallback syncCallback, @NonNull WindowContainerTransaction t)", "public void registerTransitionPlayer(@Nullable ITransitionPlayer player)", "public static ITransitionMetricsReporter getTransitionMetricsReporter()", "public boolean shareTransactionQueue()", " static IWindowOrganizerController getWindowOrganizerController()" ],
  "variableNames" : [ "IWindowOrganizerControllerSingleton" ]
}