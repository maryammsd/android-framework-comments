{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/permission/PermissionManager.java",
  "packageName" : "android.permission",
  "className" : "PermissionManager",
  "comment" : "\n * System level service for accessing the permission capabilities of the platform.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KILL_APP_REASON_PERMISSIONS_REVOKED",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "KILL_APP_REASON_GIDS_CHANGED",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPackageManager",
    "type" : "IPackageManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPermissionManager",
    "type" : "IPermissionManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSplitPermissionInfos",
    "type" : "List<SplitPermissionInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CACHE_KEY_PACKAGE_INFO",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "sPermissionCache",
    "type" : "PropertyInvalidatedCache<PermissionQuery, Integer>",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "sPackageNamePermissionCache",
    "type" : "PropertyInvalidatedCache<PackageNamePermissionQuery, Integer>",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getRuntimePermissionsVersion()",
    "returnType" : "int",
    "comment" : "\n     * Gets the version of the runtime permission database.\n     *\n     * @return The database version, -1 when this is an upgrade from pre-Q, 0 when this is a fresh\n     * install.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setRuntimePermissionsVersion(@IntRange(from = 0) int version)",
    "returnType" : "void",
    "comment" : "\n     * Sets the version of the runtime permission database.\n     *\n     * @param version The new version.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<SplitPermissionInfo> getSplitPermissions()",
    "returnType" : "List<SplitPermissionInfo>",
    "comment" : "\n     * Get set of permissions that have been split into more granular or dependent permissions.\n     *\n     * <p>E.g. before {@link android.os.Build.VERSION_CODES#Q} an app that was granted\n     * {@link Manifest.permission#ACCESS_COARSE_LOCATION} could access he location while it was in\n     * foreground and background. On platforms after {@link android.os.Build.VERSION_CODES#Q}\n     * the location permission only grants location access while the app is in foreground. This\n     * would break apps that target before {@link android.os.Build.VERSION_CODES#Q}. Hence whenever\n     * such an old app asks for a location permission (i.e. the\n     * {@link SplitPermissionInfo#getSplitPermission()}), then the\n     * {@link Manifest.permission#ACCESS_BACKGROUND_LOCATION} permission (inside\n     * {@link SplitPermissionInfo#getNewPermissions}) is added.\n     *\n     * <p>Note: Regular apps do not have to worry about this. The platform and permission controller\n     * automatically add the new permissions where needed.\n     *\n     * @return All permissions that are split.\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#Q", "Manifest.permission#ACCESS_COARSE_LOCATION", "Manifest.permission#ACCESS_BACKGROUND_LOCATION", "#getSplitPermission()", "#getNewPermissions" ]
  }, {
    "name" : "public void grantDefaultPermissionsToLuiApp(@NonNull String packageName, @NonNull UserHandle user, @NonNull @CallbackExecutor Executor executor, @NonNull Consumer<Boolean> callback)",
    "returnType" : "void",
    "comment" : "\n     * Grant default permissions to currently active LUI app\n     * @param packageName The package name for the LUI app\n     * @param user The user handle\n     * @param executor The executor for the callback\n     * @param callback The callback provided by caller to be notified when grant completes\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void revokeDefaultPermissionsFromLuiApps(@NonNull String[] packageNames, @NonNull UserHandle user, @NonNull @CallbackExecutor Executor executor, @NonNull Consumer<Boolean> callback)",
    "returnType" : "void",
    "comment" : "\n     * Revoke default permissions to currently active LUI app\n     * @param packageNames The package names for the LUI apps\n     * @param user The user handle\n     * @param executor The executor for the callback\n     * @param callback The callback provided by caller to be notified when grant completes\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void grantDefaultPermissionsToEnabledImsServices(@NonNull String[] packageNames, @NonNull UserHandle user, @NonNull @CallbackExecutor Executor executor, @NonNull Consumer<Boolean> callback)",
    "returnType" : "void",
    "comment" : "\n     * Grant default permissions to currently active Ims services\n     * @param packageNames The package names for the Ims services\n     * @param user The user handle\n     * @param executor The executor for the callback\n     * @param callback The callback provided by caller to be notified when grant completes\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void grantDefaultPermissionsToEnabledTelephonyDataServices(@NonNull String[] packageNames, @NonNull UserHandle user, @NonNull @CallbackExecutor Executor executor, @NonNull Consumer<Boolean> callback)",
    "returnType" : "void",
    "comment" : "\n     * Grant default permissions to currently enabled telephony data services\n     * @param packageNames The package name for the services\n     * @param user The user handle\n     * @param executor The executor for the callback\n     * @param callback The callback provided by caller to be notified when grant completes\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void revokeDefaultPermissionsFromDisabledTelephonyDataServices(@NonNull String[] packageNames, @NonNull UserHandle user, @NonNull @CallbackExecutor Executor executor, @NonNull Consumer<Boolean> callback)",
    "returnType" : "void",
    "comment" : "\n     * Revoke default permissions to currently active telephony data services\n     * @param packageNames The package name for the services\n     * @param user The user handle\n     * @param executor The executor for the callback\n     * @param callback The callback provided by caller to be notified when revoke completes\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void grantDefaultPermissionsToEnabledCarrierApps(@NonNull String[] packageNames, @NonNull UserHandle user, @NonNull @CallbackExecutor Executor executor, @NonNull Consumer<Boolean> callback)",
    "returnType" : "void",
    "comment" : "\n     * Grant default permissions to currently enabled carrier apps\n     * @param packageNames Package names of the apps to be granted permissions\n     * @param user The user handle\n     * @param executor The executor for the callback\n     * @param callback The callback provided by caller to be notified when grant completes\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Set<String> getAutoRevokeExemptionRequestedPackages()",
    "returnType" : "Set<String>",
    "comment" : "\n     * Gets the list of packages that have permissions that specified\n     * {@code requestDontAutoRevokePermissions=true} in their\n     * {@code application} manifest declaration.\n     *\n     * @return the list of packages for current user\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Set<String> getAutoRevokeExemptionGrantedPackages()",
    "returnType" : "Set<String>",
    "comment" : "\n     * Gets the list of packages that have permissions that specified\n     * {@code autoRevokePermissions=disallowed} in their\n     * {@code application} manifest declaration.\n     *\n     * @return the list of packages for current user\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private List<SplitPermissionInfo> splitPermissionInfoListToNonParcelableList(List<SplitPermissionInfoParcelable> parcelableList)",
    "returnType" : "List<SplitPermissionInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static List<SplitPermissionInfoParcelable> splitPermissionInfoListToParcelableList(List<SplitPermissionInfo> splitPermissionsList)",
    "returnType" : "List<SplitPermissionInfoParcelable>",
    "comment" : "\n     * Converts a {@link List} of {@link SplitPermissionInfo} into a List of\n     * {@link SplitPermissionInfoParcelable} and returns it.\n     * @hide\n     ",
    "links" : [ "SplitPermissionInfo", "android.content.pm.permission.SplitPermissionInfoParcelable", "java.util.ArrayList" ]
  }, {
    "name" : "public void startOneTimePermissionSession(@NonNull String packageName, long timeoutMillis, @ActivityManager.RunningAppProcessInfo.Importance int importanceToResetTimer, @ActivityManager.RunningAppProcessInfo.Importance int importanceToKeepSessionAlive)",
    "returnType" : "void",
    "comment" : "\n     * Starts a one-time permission session for a given package. A one-time permission session is\n     * ended if app becomes inactive. Inactivity is defined as the package's uid importance level\n     * staying > importanceToResetTimer for timeoutMillis milliseconds. If the package's uid\n     * importance level goes <= importanceToResetTimer then the timer is reset and doesn't start\n     * until going > importanceToResetTimer.\n     * <p>\n     * When this timeoutMillis is reached if the importance level is <= importanceToKeepSessionAlive\n     * then the session is extended until either the importance goes above\n     * importanceToKeepSessionAlive which will end the session or <= importanceToResetTimer which\n     * will continue the session and reset the timer.\n     * </p>\n     * <p>\n     * Importance levels are defined in {@link android.app.ActivityManager.RunningAppProcessInfo}.\n     * </p>\n     * <p>\n     * Once the session ends\n     * {@link PermissionControllerService#onOneTimePermissionSessionTimeout(String)} is invoked.\n     * </p>\n     * <p>\n     * Note that if there is currently an active session for a package a new one isn't created and\n     * the existing one isn't changed.\n     * </p>\n     * @param packageName The package to start a one-time permission session for\n     * @param timeoutMillis Number of milliseconds for an app to be in an inactive state\n     * @param importanceToResetTimer The least important level to uid must be to reset the timer\n     * @param importanceToKeepSessionAlive The least important level the uid must be to keep the\n     *                                    session alive\n     *\n     * @hide\n     ",
    "links" : [ "android.permission.PermissionControllerService#onOneTimePermissionSessionTimeout(String)", "android.app.ActivityManager.RunningAppProcessInfo" ]
  }, {
    "name" : "public void stopOneTimePermissionSession(@NonNull String packageName)",
    "returnType" : "void",
    "comment" : "\n     * Stops the one-time permission session for the package. The callback to the end of session is\n     * not invoked. If there is no one-time session for the package then nothing happens.\n     *\n     * @param packageName Package to stop the one-time permission session for\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int checkDeviceIdentifierAccess(@Nullable String packageName, @Nullable String message, @Nullable String callingFeatureId, int pid, int uid)",
    "returnType" : "int",
    "comment" : "\n     * Checks whether the package with the given pid/uid can read device identifiers.\n     *\n     * @param packageName      the name of the package to be checked for identifier access\n     * @param message          the message to be used for logging during identifier access\n     *                         verification\n     * @param callingFeatureId the feature in the package\n     * @param pid              the process id of the package to be checked\n     * @param uid              the uid of the package to be checked\n     * @return {@link PackageManager#PERMISSION_GRANTED} if the package is allowed identifier\n     * access, {@link PackageManager#PERMISSION_DENIED} otherwise\n     * @hide\n     ",
    "links" : [ "android.content.pm.IPackageManager#PERMISSION_GRANTED", "android.content.pm.IPackageManager#PERMISSION_DENIED" ]
  }, {
    "name" : "private static int checkPermissionUncached(@Nullable String permission, int pid, int uid)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static int checkPermission(@Nullable String permission, int pid, int uid)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static void disablePermissionCache()",
    "returnType" : "void",
    "comment" : "\n     * Make checkPermission() above bypass the permission cache in this process.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int checkPackageNamePermissionUncached(String permName, String pkgName, int uid)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static int checkPackageNamePermission(String permName, String pkgName, int uid)",
    "returnType" : "int",
    "comment" : "\n     * Check whether a package has a permission.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void disablePackageNamePermissionCache()",
    "returnType" : "void",
    "comment" : "\n     * Make checkPackageNamePermission() bypass the cache in this process.\n     *\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "KILL_APP_REASON_PERMISSIONS_REVOKED", "KILL_APP_REASON_GIDS_CHANGED", "mContext", "mPackageManager", "mPermissionManager", "mSplitPermissionInfos", "CACHE_KEY_PACKAGE_INFO", "sPermissionCache", "sPackageNamePermissionCache" ],
  "methodNames" : [ "public int getRuntimePermissionsVersion()", "public void setRuntimePermissionsVersion(@IntRange(from = 0) int version)", "public List<SplitPermissionInfo> getSplitPermissions()", "public void grantDefaultPermissionsToLuiApp(@NonNull String packageName, @NonNull UserHandle user, @NonNull @CallbackExecutor Executor executor, @NonNull Consumer<Boolean> callback)", "public void revokeDefaultPermissionsFromLuiApps(@NonNull String[] packageNames, @NonNull UserHandle user, @NonNull @CallbackExecutor Executor executor, @NonNull Consumer<Boolean> callback)", "public void grantDefaultPermissionsToEnabledImsServices(@NonNull String[] packageNames, @NonNull UserHandle user, @NonNull @CallbackExecutor Executor executor, @NonNull Consumer<Boolean> callback)", "public void grantDefaultPermissionsToEnabledTelephonyDataServices(@NonNull String[] packageNames, @NonNull UserHandle user, @NonNull @CallbackExecutor Executor executor, @NonNull Consumer<Boolean> callback)", "public void revokeDefaultPermissionsFromDisabledTelephonyDataServices(@NonNull String[] packageNames, @NonNull UserHandle user, @NonNull @CallbackExecutor Executor executor, @NonNull Consumer<Boolean> callback)", "public void grantDefaultPermissionsToEnabledCarrierApps(@NonNull String[] packageNames, @NonNull UserHandle user, @NonNull @CallbackExecutor Executor executor, @NonNull Consumer<Boolean> callback)", "public Set<String> getAutoRevokeExemptionRequestedPackages()", "public Set<String> getAutoRevokeExemptionGrantedPackages()", "private List<SplitPermissionInfo> splitPermissionInfoListToNonParcelableList(List<SplitPermissionInfoParcelable> parcelableList)", "public static List<SplitPermissionInfoParcelable> splitPermissionInfoListToParcelableList(List<SplitPermissionInfo> splitPermissionsList)", "public void startOneTimePermissionSession(@NonNull String packageName, long timeoutMillis, @ActivityManager.RunningAppProcessInfo.Importance int importanceToResetTimer, @ActivityManager.RunningAppProcessInfo.Importance int importanceToKeepSessionAlive)", "public void stopOneTimePermissionSession(@NonNull String packageName)", "public int checkDeviceIdentifierAccess(@Nullable String packageName, @Nullable String message, @Nullable String callingFeatureId, int pid, int uid)", "private static int checkPermissionUncached(@Nullable String permission, int pid, int uid)", "public static int checkPermission(@Nullable String permission, int pid, int uid)", "public static void disablePermissionCache()", "private static int checkPackageNamePermissionUncached(String permName, String pkgName, int uid)", "public static int checkPackageNamePermission(String permName, String pkgName, int uid)", "public static void disablePackageNamePermissionCache()" ]
}