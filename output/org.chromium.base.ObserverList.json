{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/chromium/base/ObserverList.java",
  "packageName" : "org.chromium.base",
  "className" : "ObserverList",
  "comment" : "\n * A container for a list of observers.\n * <p/>\n * This container can be modified during iteration without invalidating the iterator.\n * So, it safely handles the case of an observer removing itself or other observers from the list\n * while observers are being notified.\n * <p/>\n * The implementation (and the interface) is heavily influenced by the C++ ObserverList.\n * Notable differences:\n *   - The iterator implements NOTIFY_EXISTING_ONLY.\n *   - The range-based for loop is left to the clients to implement in terms of iterator().\n * <p/>\n * This class is not threadsafe. Observers MUST be added, removed and will be notified on the same\n * thread this is created.\n *\n * @param <E> The type of observers that this list should hold.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mObservers",
    "type" : "List<E>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mThreadChecker",
    "type" : "ThreadUtils.ThreadChecker",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIterationDepth",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNeedsCompact",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEnableThreadAsserts",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void disableThreadAsserts()",
    "returnType" : "void",
    "comment" : "\n     * Disable thread assertions for this instance of ObserverList. In nearly all instances, using\n     * this API indicates a bug.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean addObserver(E obs)",
    "returnType" : "boolean",
    "comment" : "\n     * Add an observer to the list.\n     * <p/>\n     * An observer should not be added to the same list more than once. If an iteration is already\n     * in progress, this observer will be not be visible during that iteration.\n     *\n     * @return true if the observer list changed as a result of the call.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean removeObserver(E obs)",
    "returnType" : "boolean",
    "comment" : "\n     * Remove an observer from the list if it is in the list.\n     *\n     * @return true if an element was removed as a result of this call.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasObserver(E obs)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void clear()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Iterator<E> iterator()",
    "returnType" : "Iterator<E>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public RewindableIterator<E> rewindableIterator()",
    "returnType" : "RewindableIterator<E>",
    "comment" : "\n     * It's the same as {@link ObserverList#iterator()} but the return type is\n     * {@link RewindableIterator}. Use this iterator type if you need to use\n     * {@link RewindableIterator#rewind()}.\n     ",
    "links" : [ "org.chromium.base.ObserverList#iterator()", "RewindableIterator", "#rewind()" ]
  }, {
    "name" : "public int size()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of observers currently registered in the ObserverList.\n     * This is equivalent to the number of non-empty spaces in |mObservers|.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isEmpty()",
    "returnType" : "boolean",
    "comment" : " Returns true if the ObserverList contains no observers. ",
    "links" : [ ]
  }, {
    "name" : "private void compact()",
    "returnType" : "void",
    "comment" : "\n     * Compact the underlying list be removing null elements.\n     * <p/>\n     * Should only be called when mIterationDepth is zero.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void incrementIterationDepth()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void decrementIterationDepthAndCompactIfNeeded()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int capacity()",
    "returnType" : "int",
    "comment" : "\n     * Returns the size of the underlying storage of the ObserverList.\n     * It will take into account the empty spaces inside |mObservers|.\n     ",
    "links" : [ ]
  }, {
    "name" : "private E getObserverAt(int index)",
    "returnType" : "E",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void disableThreadAsserts()", "public boolean addObserver(E obs)", "public boolean removeObserver(E obs)", "public boolean hasObserver(E obs)", "public void clear()", "public Iterator<E> iterator()", "public RewindableIterator<E> rewindableIterator()", "public int size()", "public boolean isEmpty()", "private void compact()", "private void incrementIterationDepth()", "private void decrementIterationDepthAndCompactIfNeeded()", "private int capacity()", "private E getObserverAt(int index)" ],
  "variableNames" : [ "mObservers", "mThreadChecker", "mIterationDepth", "mCount", "mNeedsCompact", "mEnableThreadAsserts" ]
}