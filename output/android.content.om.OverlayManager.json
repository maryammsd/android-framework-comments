{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/content/om/OverlayManager.java",
  "packageName" : "android.content.om",
  "className" : "OverlayManager",
  "comment" : "\n * Updates OverlayManager state; gets information about installed overlay packages.\n *\n * <p>Users of this API must be actors of any overlays they desire to change the state of.</p>\n *\n * <p>An actor is a package responsible for managing the state of overlays targeting overlayables\n * that specify the actor. For example, an actor may enable or disable an overlay or otherwise\n * change its state.</p>\n *\n * <p>Actors are specified as part of the overlayable definition.\n *\n * <pre>{@code\n * <overlayable name=\"OverlayableResourcesName\" actor=\"overlay://namespace/actorName\">\n * }</pre></p>\n *\n * <p>Actors are defined through {@link SystemConfig}. Only system packages can be used.\n * The namespace \"android\" is reserved for use by AOSP and any \"android\" definitions must\n * have an implementation on device that fulfill their intended functionality.</p>\n *\n * <pre>{@code\n * <named-actor\n *     namespace=\"namespace\"\n *     name=\"actorName\"\n *     package=\"com.example.pkg\"\n *     />\n * }</pre></p>\n *\n * <p>An actor can manipulate a particular overlay if any of the following is true:\n * <ul>\n * <li>its UID is {@link Process#ROOT_UID}, {@link Process#SYSTEM_UID}</li>\n * <li>it is the target of the overlay package</li>\n * <li>it has the CHANGE_OVERLAY_PACKAGES permission and the target does not specify an actor</li>\n * <li>it is the actor specified by the overlayable</li>\n * </ul></p>\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "mService",
    "type" : "IOverlayManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "THROW_SECURITY_EXCEPTIONS",
    "type" : "long",
    "comment" : "\n     * Pre R a {@link java.lang.SecurityException} would only be thrown by setEnabled APIs (e\n     * .g. {@link #setEnabled(String, boolean, UserHandle)}) for a permission error.\n     * Since R this no longer holds true, and {@link java.lang.SecurityException} can be\n     * thrown for any number of reasons, none of which are exposed to the caller.\n     *\n     * <p>To maintain existing API behavior, if a legacy permission failure or actor enforcement\n     * failure occurs for an app not yet targeting R, coerce it into an {@link\n     * java.lang.IllegalStateException}, which existed in the source prior to R.\n     ",
    "links" : [ "java.lang.IllegalStateException", "#setEnabled(String", "java.lang.SecurityException" ]
  } ],
  "methods" : [ {
    "name" : "public void setEnabledExclusiveInCategory(@NonNull final String packageName, @NonNull UserHandle user) throws SecurityException, IllegalStateException",
    "returnType" : "void",
    "comment" : "\n     * Request that an overlay package is enabled and any other overlay packages with the same\n     * target package and category are disabled.\n     *\n     * If a set of overlay packages share the same category, single call to this method is\n     * equivalent to multiple calls to {@link #setEnabled(String, boolean, UserHandle)}.\n     *\n     * The caller must pass the actor requirements specified in the class comment.\n     *\n     * @param packageName the name of the overlay package to enable.\n     * @param user The user for which to change the overlay.\n     *\n     * @throws SecurityException when caller is not allowed to enable {@param packageName}\n     * @throws IllegalStateException when enabling fails otherwise\n     *\n     * @hide\n     ",
    "links" : [ "#setEnabled(String" ]
  }, {
    "name" : "public void setEnabled(@NonNull final String packageName, final boolean enable, @NonNull UserHandle user) throws SecurityException, IllegalStateException",
    "returnType" : "void",
    "comment" : "\n     * Request that an overlay package is enabled or disabled.\n     *\n     * While {@link #setEnabledExclusiveInCategory(String, UserHandle)} doesn't support disabling\n     * every overlay in a category, this method allows you to disable everything.\n     *\n     * The caller must pass the actor requirements specified in the class comment.\n     *\n     * @param packageName the name of the overlay package to enable.\n     * @param enable {@code false} if the overlay should be turned off.\n     * @param user The user for which to change the overlay.\n     *\n     * @throws SecurityException when caller is not allowed to enable/disable {@param packageName}\n     * @throws IllegalStateException when enabling/disabling fails otherwise\n     *\n     * @hide\n     ",
    "links" : [ "#setEnabledExclusiveInCategory(String" ]
  }, {
    "name" : "public OverlayInfo getOverlayInfo(@NonNull final String packageName, @NonNull final UserHandle userHandle)",
    "returnType" : "OverlayInfo",
    "comment" : "\n     * Returns information about the overlay with the given package name for\n     * the specified user.\n     *\n     * @param packageName The name of the package.\n     * @param userHandle The user to get the OverlayInfos for.\n     * @return An OverlayInfo object; if no overlays exist with the\n     *         requested package name, null is returned.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<OverlayInfo> getOverlayInfosForTarget(@NonNull final String targetPackageName, @NonNull UserHandle user)",
    "returnType" : "List<OverlayInfo>",
    "comment" : "\n     * Returns information about all overlays for the given target package for\n     * the specified user. The returned list is ordered according to the\n     * overlay priority with the highest priority at the end of the list.\n     *\n     * @param targetPackageName The name of the target package.\n     * @param user The user to get the OverlayInfos for.\n     * @return A list of OverlayInfo objects; if no overlays exist for the\n     *         requested package, an empty list is returned.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void invalidateCachesForOverlay(@NonNull final String targetPackageName, @NonNull UserHandle user)",
    "returnType" : "void",
    "comment" : "\n     * Clear part of the overlay manager's internal cache of PackageInfo\n     * objects. Only intended for testing.\n     *\n     * @param targetPackageName The name of the target package.\n     * @param user The user to get the OverlayInfos for.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void rethrowSecurityException(SecurityException e)",
    "returnType" : "void",
    "comment" : "\n     * Starting on R, actor enforcement and app visibility changes introduce additional failure\n     * cases, but the SecurityException thrown with these checks is unexpected for existing\n     * consumers of the API.\n     *\n     * The only prior case it would be thrown is with a permission failure, but the calling\n     * application would be able to verify that themselves, and so they may choose to ignore\n     * catching SecurityException when calling these APIs.\n     *\n     * For R, this no longer holds true, and SecurityExceptions can be thrown for any number of\n     * reasons, none of which are exposed to the caller. So for consumers targeting below R,\n     * transform these SecurityExceptions into IllegalStateExceptions, which are a little more\n     * expected to be thrown by the setEnabled APIs.\n     *\n     * This will mask the prior permission exception if it applies, but it's assumed that apps\n     * wouldn't call the APIs without the permission on prior versions, and so it's safe to ignore.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "mService", "mContext", "THROW_SECURITY_EXCEPTIONS" ],
  "methodNames" : [ "public void setEnabledExclusiveInCategory(@NonNull final String packageName, @NonNull UserHandle user) throws SecurityException, IllegalStateException", "public void setEnabled(@NonNull final String packageName, final boolean enable, @NonNull UserHandle user) throws SecurityException, IllegalStateException", "public OverlayInfo getOverlayInfo(@NonNull final String packageName, @NonNull final UserHandle userHandle)", "public List<OverlayInfo> getOverlayInfosForTarget(@NonNull final String targetPackageName, @NonNull UserHandle user)", "public void invalidateCachesForOverlay(@NonNull final String targetPackageName, @NonNull UserHandle user)", "private void rethrowSecurityException(SecurityException e)" ]
}