{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/content/om/OverlayManager.java",
  "packageName" : "android.content.om",
  "className" : "OverlayManager",
  "comment" : "\n * OverlayManager gives apps the ability to create an {@link OverlayManagerTransaction} to\n * maintain the overlays and list the registered fabricated runtime resources overlays(FRROs).\n *\n * <p>OverlayManager returns the list of overlays to the app calling {@link\n * #getOverlayInfosForTarget(String)}. The app starts an {@link OverlayManagerTransaction} to manage\n * the overlays. The app can achieve the following by using {@link OverlayManagerTransaction}.\n *\n * <ul>\n *   <li>register overlays\n *   <li>unregister overlays\n *   <li>execute multiple operations in one commitment by calling {@link\n *       #commit(OverlayManagerTransaction)}\n * </ul>\n *\n * @see OverlayManagerTransaction\n ",
  "links" : [ "#getOverlayInfosForTarget(String)", "#commit(OverlayManagerTransaction)", "android.content.om.OverlayManagerTransaction" ],
  "variables" : [ {
    "name" : "mService",
    "type" : "IOverlayManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOverlayManagerImpl",
    "type" : "OverlayManagerImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "THROW_SECURITY_EXCEPTIONS",
    "type" : "long",
    "comment" : "\n     * Pre R a {@link java.lang.SecurityException} would only be thrown by setEnabled APIs (e\n     * .g. {@code #setEnabled(String, boolean, UserHandle)}) for a permission error.\n     * Since R this no longer holds true, and {@link java.lang.SecurityException} can be\n     * thrown for any number of reasons, none of which are exposed to the caller.\n     *\n     * <p>To maintain existing API behavior, if a legacy permission failure or actor enforcement\n     * failure occurs for an app not yet targeting R, coerce it into an {@link\n     * java.lang.IllegalStateException}, which existed in the source prior to R.\n     ",
    "links" : [ "java.lang.IllegalStateException", "java.lang.SecurityException" ]
  }, {
    "name" : "SELF_TARGETING_OVERLAY",
    "type" : "long",
    "comment" : "\n     * Applications can use OverlayManager to create overlays to overlay on itself resources. The\n     * overlay target is itself and the work range is only in caller application.\n     *\n     * <p>In {@link android.content.Context#getSystemService(String)}, it crashes because of {@link\n     * java.lang.NullPointerException} if the parameter is OverlayManager. if the self-targeting is\n     * enabled, the caller application can get the OverlayManager instance to use self-targeting\n     * functionality.\n     *\n     * @hide\n     ",
    "links" : [ "android.content.Context#getSystemService(String)", "java.lang.NullPointerException" ]
  } ],
  "methods" : [ {
    "name" : "public void setEnabledExclusiveInCategory(@NonNull final String packageName, @NonNull UserHandle user) throws SecurityException, IllegalStateException",
    "returnType" : "void",
    "comment" : "\n     * Request that an overlay package is enabled and any other overlay packages with the same\n     * target package and category are disabled.\n     *\n     * If a set of overlay packages share the same category, single call to this method is\n     * equivalent to multiple calls to {@code #setEnabled(String, boolean, UserHandle)}.\n     *\n     * The caller must pass the actor requirements specified in the class comment.\n     *\n     * @param packageName the name of the overlay package to enable.\n     * @param user The user for which to change the overlay.\n     *\n     * @throws SecurityException when caller is not allowed to enable {@param packageName}\n     * @throws IllegalStateException when enabling fails otherwise\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setEnabled(@NonNull final String packageName, final boolean enable, @NonNull UserHandle user) throws SecurityException, IllegalStateException",
    "returnType" : "void",
    "comment" : "\n     * Request that an overlay package is enabled or disabled.\n     *\n     * While {@link #setEnabledExclusiveInCategory(String, UserHandle)} doesn't support disabling\n     * every overlay in a category, this method allows you to disable everything.\n     *\n     * The caller must pass the actor requirements specified in the class comment.\n     *\n     * @param packageName the name of the overlay package to enable.\n     * @param enable {@code false} if the overlay should be turned off.\n     * @param user The user for which to change the overlay.\n     *\n     * @throws SecurityException when caller is not allowed to enable/disable {@param packageName}\n     * @throws IllegalStateException when enabling/disabling fails otherwise\n     *\n     * @hide\n     ",
    "links" : [ "#setEnabledExclusiveInCategory(String" ]
  }, {
    "name" : "public OverlayInfo getOverlayInfo(@NonNull final String packageName, @NonNull final UserHandle userHandle)",
    "returnType" : "OverlayInfo",
    "comment" : "\n     * Returns information about the overlay with the given package name for\n     * the specified user.\n     *\n     * @param packageName The name of the package.\n     * @param userHandle The user to get the OverlayInfos for.\n     * @return An OverlayInfo object; if no overlays exist with the\n     *         requested package name, null is returned.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public OverlayInfo getOverlayInfo(@NonNull final OverlayIdentifier overlay, @NonNull final UserHandle userHandle)",
    "returnType" : "OverlayInfo",
    "comment" : "\n     * Returns information about the overlay represented by the identifier for the specified user.\n     *\n     * @param overlay the identifier representing the overlay\n     * @param userHandle the user of which to get overlay state info\n     * @return the overlay info or null if the overlay cannot be found\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<OverlayInfo> getOverlayInfosForTarget(@NonNull final String targetPackageName, @NonNull UserHandle user)",
    "returnType" : "List<OverlayInfo>",
    "comment" : "\n     * Returns information about all overlays for the given target package for\n     * the specified user. The returned list is ordered according to the\n     * overlay priority with the highest priority at the end of the list.\n     *\n     * @param targetPackageName The name of the target package.\n     * @param user The user to get the OverlayInfos for.\n     * @return A list of OverlayInfo objects; if no overlays exist for the\n     *         requested package, an empty list is returned.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void invalidateCachesForOverlay(@NonNull final String targetPackageName, @NonNull UserHandle user)",
    "returnType" : "void",
    "comment" : "\n     * Clear part of the overlay manager's internal cache of PackageInfo\n     * objects. Only intended for testing.\n     *\n     * @param targetPackageName The name of the target package.\n     * @param user The user to get the OverlayInfos for.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void commitToSystemServer(@NonNull final OverlayManagerTransaction transaction)",
    "returnType" : "void",
    "comment" : "\n     * Perform a series of requests related to overlay packages. This is an\n     * atomic operation: either all requests were performed successfully and\n     * the changes were propagated to the rest of the system, or at least one\n     * request could not be performed successfully and nothing is changed and\n     * nothing is propagated to the rest of the system.\n     *\n     * @see OverlayManagerTransaction\n     *\n     * @param transaction the series of overlay related requests to perform\n     * @throws Exception if not all the requests could be successfully and\n     *         atomically executed\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void commit(@NonNull final OverlayManagerTransaction transaction)",
    "returnType" : "void",
    "comment" : "\n     * Commit the overlay manager transaction.\n     *\n     * <p>Applications can register overlays and unregister the registered overlays in an atomic\n     * operation via {@link OverlayManagerTransaction}.\n     *\n     * @see OverlayManagerTransaction\n     *\n     * @param transaction the series of overlay related requests to perform\n     * @throws Exception if not all the requests could be successfully\n     ",
    "links" : [ "android.content.om.OverlayManagerTransaction" ]
  }, {
    "name" : "private void rethrowSecurityException(SecurityException e)",
    "returnType" : "void",
    "comment" : "\n     * Starting on R, actor enforcement and app visibility changes introduce additional failure\n     * cases, but the SecurityException thrown with these checks is unexpected for existing\n     * consumers of the API.\n     *\n     * The only prior case it would be thrown is with a permission failure, but the calling\n     * application would be able to verify that themselves, and so they may choose to ignore\n     * catching SecurityException when calling these APIs.\n     *\n     * For R, this no longer holds true, and SecurityExceptions can be thrown for any number of\n     * reasons, none of which are exposed to the caller. So for consumers targeting below R,\n     * transform these SecurityExceptions into IllegalStateExceptions, which are a little more\n     * expected to be thrown by the setEnabled APIs.\n     *\n     * This will mask the prior permission exception if it applies, but it's assumed that apps\n     * wouldn't call the APIs without the permission on prior versions, and so it's safe to ignore.\n     ",
    "links" : [ ]
  }, {
    "name" : " void commitSelfTarget(@NonNull final OverlayManagerTransaction transaction) throws PackageManager.NameNotFoundException, IOException",
    "returnType" : "void",
    "comment" : "\n     * Commit the self-targeting transaction to register or unregister overlays.\n     *\n     * <p>Applications can request OverlayManager to register overlays and unregister the registered\n     * overlays via {@link OverlayManagerTransaction}.\n     *\n     * @throws IOException if there is a file operation error.\n     * @throws PackageManager.NameNotFoundException if the package name is not found.\n     * @hide\n     ",
    "links" : [ "android.content.om.OverlayManagerTransaction" ]
  }, {
    "name" : "public List<OverlayInfo> getOverlayInfosForTarget(@NonNull final String targetPackageName)",
    "returnType" : "List<OverlayInfo>",
    "comment" : "\n     * Get the related information of overlays for {@code targetPackageName}.\n     *\n     * @param targetPackageName the target package name\n     * @return a list of overlay information\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setEnabledExclusiveInCategory(@NonNull final String packageName, @NonNull UserHandle user) throws SecurityException, IllegalStateException", "public void setEnabled(@NonNull final String packageName, final boolean enable, @NonNull UserHandle user) throws SecurityException, IllegalStateException", "public OverlayInfo getOverlayInfo(@NonNull final String packageName, @NonNull final UserHandle userHandle)", "public OverlayInfo getOverlayInfo(@NonNull final OverlayIdentifier overlay, @NonNull final UserHandle userHandle)", "public List<OverlayInfo> getOverlayInfosForTarget(@NonNull final String targetPackageName, @NonNull UserHandle user)", "public void invalidateCachesForOverlay(@NonNull final String targetPackageName, @NonNull UserHandle user)", "private void commitToSystemServer(@NonNull final OverlayManagerTransaction transaction)", "public void commit(@NonNull final OverlayManagerTransaction transaction)", "private void rethrowSecurityException(SecurityException e)", " void commitSelfTarget(@NonNull final OverlayManagerTransaction transaction) throws PackageManager.NameNotFoundException, IOException", "public List<OverlayInfo> getOverlayInfosForTarget(@NonNull final String targetPackageName)" ],
  "variableNames" : [ "mService", "mContext", "mOverlayManagerImpl", "THROW_SECURITY_EXCEPTIONS", "SELF_TARGETING_OVERLAY" ]
}