{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/security/SignedObject.java",
  "packageName" : "java.security",
  "className" : "SignedObject",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "content",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "signature",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "thealgorithm",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Object getObject() throws IOException, ClassNotFoundException",
    "returnType" : "Object",
    "comment" : "\n     * Retrieves the encapsulated object.\n     * The encapsulated object is de-serialized before it is returned.\n     *\n     * @return the encapsulated object.\n     *\n     * @exception IOException if an error occurs during de-serialization\n     * @exception ClassNotFoundException if an error occurs during\n     * de-serialization\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getSignature()",
    "returnType" : "byte[]",
    "comment" : "\n     * Retrieves the signature on the signed object, in the form of a\n     * byte array.\n     *\n     * @return the signature. Returns a new array each time this\n     * method is called.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getAlgorithm()",
    "returnType" : "String",
    "comment" : "\n     * Retrieves the name of the signature algorithm.\n     *\n     * @return the signature algorithm name.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean verify(PublicKey verificationKey, Signature verificationEngine) throws InvalidKeyException, SignatureException",
    "returnType" : "boolean",
    "comment" : "\n     * Verifies that the signature in this SignedObject is the valid\n     * signature for the object stored inside, with the given\n     * verification key, using the designated verification engine.\n     *\n     * @param verificationKey the public key for verification.\n     * @param verificationEngine the signature verification engine.\n     *\n     * @exception SignatureException if signature verification failed.\n     * @exception InvalidKeyException if the verification key is invalid.\n     *\n     * @return {@code true} if the signature\n     * is valid, {@code false} otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "private void sign(PrivateKey signingKey, Signature signingEngine) throws InvalidKeyException, SignatureException",
    "returnType" : "void",
    "comment" : "\n     * Signs the encapsulated object with the given signing key, using the\n     * designated signature engine.\n     *\n     * @param signingKey the private key for signing.\n     * @param signingEngine the signature signing engine.\n     *\n     * @exception InvalidKeyException if the key is invalid.\n     * @exception SignatureException if signing fails.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException",
    "returnType" : "void",
    "comment" : "\n     * readObject is called to restore the state of the SignedObject from\n     * a stream.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Object getObject() throws IOException, ClassNotFoundException", "public byte[] getSignature()", "public String getAlgorithm()", "public boolean verify(PublicKey verificationKey, Signature verificationEngine) throws InvalidKeyException, SignatureException", "private void sign(PrivateKey signingKey, Signature signingEngine) throws InvalidKeyException, SignatureException", "private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException" ],
  "variableNames" : [ "serialVersionUID", "content", "signature", "thealgorithm" ]
}