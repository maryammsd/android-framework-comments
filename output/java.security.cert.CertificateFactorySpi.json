{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/security/cert/CertificateFactorySpi.java",
  "packageName" : "java.security.cert",
  "className" : "CertificateFactorySpi",
  "comment" : "",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public abstract Certificate engineGenerateCertificate(InputStream inStream) throws CertificateException",
    "returnType" : "Certificate",
    "comment" : "\n     * Generates a certificate object and initializes it with\n     * the data read from the input stream {@code inStream}.\n     *\n     * <p>In order to take advantage of the specialized certificate format\n     * supported by this certificate factory,\n     * the returned certificate object can be typecast to the corresponding\n     * certificate class. For example, if this certificate\n     * factory implements X.509 certificates, the returned certificate object\n     * can be typecast to the {@code X509Certificate} class.\n     *\n     * <p>In the case of a certificate factory for X.509 certificates, the\n     * certificate provided in {@code inStream} must be DER-encoded and\n     * may be supplied in binary or printable (Base64) encoding. If the\n     * certificate is provided in Base64 encoding, it must be bounded at\n     * the beginning by -----BEGIN CERTIFICATE-----, and must be bounded at\n     * the end by -----END CERTIFICATE-----.\n     *\n     * <p>Note that if the given input stream does not support\n     * {@link java.io.InputStream#mark(int) mark} and\n     * {@link java.io.InputStream#reset() reset}, this method will\n     * consume the entire input stream. Otherwise, each call to this\n     * method consumes one certificate and the read position of the input stream\n     * is positioned to the next available byte after the inherent\n     * end-of-certificate marker. If the data in the\n     * input stream does not contain an inherent end-of-certificate marker (other\n     * than EOF) and there is trailing data after the certificate is parsed, a\n     * {@code CertificateException} is thrown.\n     *\n     * @param inStream an input stream with the certificate data.\n     *\n     * @return a certificate object initialized with the data\n     * from the input stream.\n     *\n     * @exception CertificateException on parsing errors.\n     ",
    "links" : [ "java.io.InputStream#reset()", "java.io.InputStream#mark(int)" ]
  }, {
    "name" : "public CertPath engineGenerateCertPath(InputStream inStream) throws CertificateException",
    "returnType" : "CertPath",
    "comment" : "\n     * Generates a {@code CertPath} object and initializes it with\n     * the data read from the {@code InputStream} inStream. The data\n     * is assumed to be in the default encoding.\n     *\n     * <p> This method was added to version 1.4 of the Java 2 Platform\n     * Standard Edition. In order to maintain backwards compatibility with\n     * existing service providers, this method cannot be {@code abstract}\n     * and by default throws an {@code UnsupportedOperationException}.\n     *\n     * @param inStream an {@code InputStream} containing the data\n     * @return a {@code CertPath} initialized with the data from the\n     *   {@code InputStream}\n     * @exception CertificateException if an exception occurs while decoding\n     * @exception UnsupportedOperationException if the method is not supported\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "public CertPath engineGenerateCertPath(InputStream inStream, String encoding) throws CertificateException",
    "returnType" : "CertPath",
    "comment" : "\n     * Generates a {@code CertPath} object and initializes it with\n     * the data read from the {@code InputStream} inStream. The data\n     * is assumed to be in the specified encoding.\n     *\n     * <p> This method was added to version 1.4 of the Java 2 Platform\n     * Standard Edition. In order to maintain backwards compatibility with\n     * existing service providers, this method cannot be {@code abstract}\n     * and by default throws an {@code UnsupportedOperationException}.\n     *\n     * @param inStream an {@code InputStream} containing the data\n     * @param encoding the encoding used for the data\n     * @return a {@code CertPath} initialized with the data from the\n     *   {@code InputStream}\n     * @exception CertificateException if an exception occurs while decoding or\n     *   the encoding requested is not supported\n     * @exception UnsupportedOperationException if the method is not supported\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "public CertPath engineGenerateCertPath(List<? extends Certificate> certificates) throws CertificateException",
    "returnType" : "CertPath",
    "comment" : "\n     * Generates a {@code CertPath} object and initializes it with\n     * a {@code List} of {@code Certificate}s.\n     * <p>\n     * The certificates supplied must be of a type supported by the\n     * {@code CertificateFactory}. They will be copied out of the supplied\n     * {@code List} object.\n     *\n     * <p> This method was added to version 1.4 of the Java 2 Platform\n     * Standard Edition. In order to maintain backwards compatibility with\n     * existing service providers, this method cannot be {@code abstract}\n     * and by default throws an {@code UnsupportedOperationException}.\n     *\n     * @param certificates a {@code List} of {@code Certificate}s\n     * @return a {@code CertPath} initialized with the supplied list of\n     *   certificates\n     * @exception CertificateException if an exception occurs\n     * @exception UnsupportedOperationException if the method is not supported\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "public Iterator<String> engineGetCertPathEncodings()",
    "returnType" : "Iterator<String>",
    "comment" : "\n     * Returns an iteration of the {@code CertPath} encodings supported\n     * by this certificate factory, with the default encoding first. See\n     * the CertPath Encodings section in the <a href=\n     * \"{@docRoot}/../specs/security/standard-names.html#certpath-encodings\">\n     * Java Security Standard Algorithm Names Specification</a>\n     * for information about standard encoding names.\n     * <p>\n     * Attempts to modify the returned {@code Iterator} via its\n     * {@code remove} method result in an\n     * {@code UnsupportedOperationException}.\n     *\n     * <p> This method was added to version 1.4 of the Java 2 Platform\n     * Standard Edition. In order to maintain backwards compatibility with\n     * existing service providers, this method cannot be {@code abstract}\n     * and by default throws an {@code UnsupportedOperationException}.\n     *\n     * @return an {@code Iterator} over the names of the supported\n     *         {@code CertPath} encodings (as {@code String}s)\n     * @exception UnsupportedOperationException if the method is not supported\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Collection<? extends Certificate> engineGenerateCertificates(InputStream inStream) throws CertificateException",
    "returnType" : "Collection<? extends Certificate>",
    "comment" : "\n     * Returns a (possibly empty) collection view of the certificates read\n     * from the given input stream {@code inStream}.\n     *\n     * <p>In order to take advantage of the specialized certificate format\n     * supported by this certificate factory, each element in\n     * the returned collection view can be typecast to the corresponding\n     * certificate class. For example, if this certificate\n     * factory implements X.509 certificates, the elements in the returned\n     * collection can be typecast to the {@code X509Certificate} class.\n     *\n     * <p>In the case of a certificate factory for X.509 certificates,\n     * {@code inStream} may contain a single DER-encoded certificate\n     * in the formats described for\n     * {@link CertificateFactory#generateCertificate(java.io.InputStream)\n     * generateCertificate}.\n     * In addition, {@code inStream} may contain a PKCS#7 certificate\n     * chain. This is a PKCS#7 <i>SignedData</i> object, with the only\n     * significant field being <i>certificates</i>. In particular, the\n     * signature and the contents are ignored. This format allows multiple\n     * certificates to be downloaded at once. If no certificates are present,\n     * an empty collection is returned.\n     *\n     * <p>Note that if the given input stream does not support\n     * {@link java.io.InputStream#mark(int) mark} and\n     * {@link java.io.InputStream#reset() reset}, this method will\n     * consume the entire input stream.\n     *\n     * @param inStream the input stream with the certificates.\n     *\n     * @return a (possibly empty) collection view of\n     * java.security.cert.Certificate objects\n     * initialized with the data from the input stream.\n     *\n     * @exception CertificateException on parsing errors.\n     ",
    "links" : [ "java.security.cert.CertificateFactory#generateCertificate(java.io.InputStream)", "java.io.InputStream#reset()", "java.io.InputStream#mark(int)" ]
  }, {
    "name" : "public abstract CRL engineGenerateCRL(InputStream inStream) throws CRLException",
    "returnType" : "CRL",
    "comment" : "\n     * Generates a certificate revocation list (CRL) object and initializes it\n     * with the data read from the input stream {@code inStream}.\n     *\n     * <p>In order to take advantage of the specialized CRL format\n     * supported by this certificate factory,\n     * the returned CRL object can be typecast to the corresponding\n     * CRL class. For example, if this certificate\n     * factory implements X.509 CRLs, the returned CRL object\n     * can be typecast to the {@code X509CRL} class.\n     *\n     * <p>Note that if the given input stream does not support\n     * {@link java.io.InputStream#mark(int) mark} and\n     * {@link java.io.InputStream#reset() reset}, this method will\n     * consume the entire input stream. Otherwise, each call to this\n     * method consumes one CRL and the read position of the input stream\n     * is positioned to the next available byte after the inherent\n     * end-of-CRL marker. If the data in the\n     * input stream does not contain an inherent end-of-CRL marker (other\n     * than EOF) and there is trailing data after the CRL is parsed, a\n     * {@code CRLException} is thrown.\n     *\n     * @param inStream an input stream with the CRL data.\n     *\n     * @return a CRL object initialized with the data\n     * from the input stream.\n     *\n     * @exception CRLException on parsing errors.\n     ",
    "links" : [ "java.io.InputStream#reset()", "java.io.InputStream#mark(int)" ]
  }, {
    "name" : "public abstract Collection<? extends CRL> engineGenerateCRLs(InputStream inStream) throws CRLException",
    "returnType" : "Collection<? extends CRL>",
    "comment" : "\n     * Returns a (possibly empty) collection view of the CRLs read\n     * from the given input stream {@code inStream}.\n     *\n     * <p>In order to take advantage of the specialized CRL format\n     * supported by this certificate factory, each element in\n     * the returned collection view can be typecast to the corresponding\n     * CRL class. For example, if this certificate\n     * factory implements X.509 CRLs, the elements in the returned\n     * collection can be typecast to the {@code X509CRL} class.\n     *\n     * <p>In the case of a certificate factory for X.509 CRLs,\n     * {@code inStream} may contain a single DER-encoded CRL.\n     * In addition, {@code inStream} may contain a PKCS#7 CRL\n     * set. This is a PKCS#7 <i>SignedData</i> object, with the only\n     * significant field being <i>crls</i>. In particular, the\n     * signature and the contents are ignored. This format allows multiple\n     * CRLs to be downloaded at once. If no CRLs are present,\n     * an empty collection is returned.\n     *\n     * <p>Note that if the given input stream does not support\n     * {@link java.io.InputStream#mark(int) mark} and\n     * {@link java.io.InputStream#reset() reset}, this method will\n     * consume the entire input stream.\n     *\n     * @param inStream the input stream with the CRLs.\n     *\n     * @return a (possibly empty) collection view of\n     * java.security.cert.CRL objects initialized with the data from the input\n     * stream.\n     *\n     * @exception CRLException on parsing errors.\n     ",
    "links" : [ "java.io.InputStream#reset()", "java.io.InputStream#mark(int)" ]
  } ],
  "methodNames" : [ "public abstract Certificate engineGenerateCertificate(InputStream inStream) throws CertificateException", "public CertPath engineGenerateCertPath(InputStream inStream) throws CertificateException", "public CertPath engineGenerateCertPath(InputStream inStream, String encoding) throws CertificateException", "public CertPath engineGenerateCertPath(List<? extends Certificate> certificates) throws CertificateException", "public Iterator<String> engineGetCertPathEncodings()", "public abstract Collection<? extends Certificate> engineGenerateCertificates(InputStream inStream) throws CertificateException", "public abstract CRL engineGenerateCRL(InputStream inStream) throws CRLException", "public abstract Collection<? extends CRL> engineGenerateCRLs(InputStream inStream) throws CRLException" ],
  "variableNames" : [ ]
}