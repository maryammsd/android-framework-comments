{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/companion/AssociationRequest.java",
  "packageName" : "android.companion",
  "className" : "Builder",
  "comment" : "\n     * A builder for {@link AssociationRequest}\n     ",
  "links" : [ "android.companion.AssociationRequest" ],
  "variables" : [ {
    "name" : "mSingleDevice",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDeviceFilters",
    "type" : "ArrayList<DeviceFilter<?>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDeviceProfile",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDisplayName",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSelfManaged",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mForceConfirmation",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Builder setSingleDevice(boolean singleDevice)",
    "returnType" : "Builder",
    "comment" : "\n         * Whether only a single device should match the provided filter.\n         *\n         * When scanning for a single device with a specific {@link BluetoothDeviceFilter} mac\n         * address, bonded devices are also searched among. This allows to obtain the necessary app\n         * privileges even if the device is already paired.\n         *\n         * @param singleDevice if true, scanning for a device will stop as soon as at least one\n         *                     fitting device is found\n         ",
    "links" : [ "android.companion.BluetoothDeviceFilter" ]
  }, {
    "name" : "public Builder addDeviceFilter(@Nullable DeviceFilter<?> deviceFilter)",
    "returnType" : "Builder",
    "comment" : "\n         * @param deviceFilter if set, only devices matching the given filter will be shown to the\n         *                     user\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setDeviceProfile(@NonNull @DeviceProfile String deviceProfile)",
    "returnType" : "Builder",
    "comment" : "\n         * If set, association will be requested as a corresponding kind of device\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setDisplayName(@NonNull CharSequence displayName)",
    "returnType" : "Builder",
    "comment" : "\n         * Adds a display name.\n         * Generally {@link AssociationRequest}s are not required to provide a display name, except\n         * for request for creating \"self-managed\" associations, which MUST provide a display name.\n         *\n         * @param displayName the display name of the device.\n         ",
    "links" : [ "android.companion.AssociationRequest" ]
  }, {
    "name" : "public Builder setSelfManaged(boolean selfManaged)",
    "returnType" : "Builder",
    "comment" : "\n         * Indicate whether the association would be managed by the companion application.\n         *\n         * Requests for creating \"self-managed\" association MUST provide a Display name.\n         *\n         * @see #setDisplayName(CharSequence)\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setForceConfirmation(boolean forceConfirmation)",
    "returnType" : "Builder",
    "comment" : "\n         * Indicates whether the application requires the {@link CompanionDeviceManager} service to\n         * collect an explicit confirmation from the user before creating an association, even if\n         * such confirmation is not required from the service's perspective.\n         ",
    "links" : [ "android.companion.CompanionDeviceManager" ]
  }, {
    "name" : "public AssociationRequest build()",
    "returnType" : "AssociationRequest",
    "comment" : " @inheritDoc ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Builder setSingleDevice(boolean singleDevice)", "public Builder addDeviceFilter(@Nullable DeviceFilter<?> deviceFilter)", "public Builder setDeviceProfile(@NonNull @DeviceProfile String deviceProfile)", "public Builder setDisplayName(@NonNull CharSequence displayName)", "public Builder setSelfManaged(boolean selfManaged)", "public Builder setForceConfirmation(boolean forceConfirmation)", "public AssociationRequest build()" ],
  "variableNames" : [ "mSingleDevice", "mDeviceFilters", "mDeviceProfile", "mDisplayName", "mSelfManaged", "mForceConfirmation" ]
}