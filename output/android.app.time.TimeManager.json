{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/time/TimeManager.java",
  "packageName" : "android.app.time",
  "className" : "TimeManager",
  "comment" : "\n * The interface through which system components can interact with time and time zone services.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mITimeZoneDetectorService",
    "type" : "ITimeZoneDetectorService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mITimeDetectorService",
    "type" : "ITimeDetectorService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTimeZoneDetectorReceiver",
    "type" : "ITimeZoneDetectorListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTimeZoneDetectorListeners",
    "type" : "ArrayMap<TimeZoneDetectorListener, TimeZoneDetectorListener>",
    "comment" : "\n     * The registered listeners. The key is the actual listener that was registered, the value is a\n     * wrapper that ensures the listener is executed on the correct Executor.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public TimeZoneCapabilitiesAndConfig getTimeZoneCapabilitiesAndConfig()",
    "returnType" : "TimeZoneCapabilitiesAndConfig",
    "comment" : "\n     * Returns the calling user's time zone capabilities and configuration.\n     ",
    "links" : [ ]
  }, {
    "name" : "public TimeCapabilitiesAndConfig getTimeCapabilitiesAndConfig()",
    "returnType" : "TimeCapabilitiesAndConfig",
    "comment" : "\n     * Returns the calling user's time capabilities and configuration.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean updateTimeConfiguration(@NonNull TimeConfiguration configuration)",
    "returnType" : "boolean",
    "comment" : "\n     * Modifies the time detection configuration.\n     *\n     * <p>The ability to modify configuration settings can be subject to restrictions. For\n     * example, they may be determined by device hardware, general policy (i.e. only the primary\n     * user can set them), or by a managed device policy. Use {@link\n     * #getTimeCapabilitiesAndConfig()} to obtain information at runtime about the user's\n     * capabilities.\n     *\n     * <p>Attempts to modify configuration settings with capabilities that are {@link\n     * Capabilities#CAPABILITY_NOT_SUPPORTED} or {@link\n     * Capabilities#CAPABILITY_NOT_ALLOWED} will have no effect and a {@code false}\n     * will be returned. Modifying configuration settings with capabilities that are {@link\n     * Capabilities#CAPABILITY_NOT_APPLICABLE} or {@link\n     * Capabilities#CAPABILITY_POSSESSED} will succeed. See {@link\n     * TimeZoneCapabilities} for further details.\n     *\n     * <p>If the supplied configuration only has some values set, then only the specified settings\n     * will be updated (where the user's capabilities allow) and other settings will be left\n     * unchanged.\n     *\n     * @return {@code true} if all the configuration settings specified have been set to the\n     *   new values, {@code false} if none have\n     ",
    "links" : [ "android.app.time.Capabilities#CAPABILITY_NOT_ALLOWED", "android.app.time.Capabilities#CAPABILITY_NOT_SUPPORTED", "android.app.time.TimeZoneCapabilities", "android.app.time.Capabilities#CAPABILITY_POSSESSED", "android.app.time.Capabilities#CAPABILITY_NOT_APPLICABLE", "#getTimeCapabilitiesAndConfig()" ]
  }, {
    "name" : "public boolean updateTimeZoneConfiguration(@NonNull TimeZoneConfiguration configuration)",
    "returnType" : "boolean",
    "comment" : "\n     * Modifies the time zone detection configuration.\n     *\n     * <p>Configuration settings vary in scope: some may be global (affect all users), others may be\n     * specific to the current user.\n     *\n     * <p>The ability to modify configuration settings can be subject to restrictions. For\n     * example, they may be determined by device hardware, general policy (i.e. only the primary\n     * user can set them), or by a managed device policy. Use {@link\n     * #getTimeZoneCapabilitiesAndConfig()} to obtain information at runtime about the user's\n     * capabilities.\n     *\n     * <p>Attempts to modify configuration settings with capabilities that are {@link\n     * Capabilities#CAPABILITY_NOT_SUPPORTED} or {@link\n     * Capabilities#CAPABILITY_NOT_ALLOWED} will have no effect and a {@code false}\n     * will be returned. Modifying configuration settings with capabilities that are {@link\n     * Capabilities#CAPABILITY_NOT_APPLICABLE} or {@link\n     * Capabilities#CAPABILITY_POSSESSED} will succeed. See {@link\n     * TimeZoneCapabilities} for further details.\n     *\n     * <p>If the supplied configuration only has some values set, then only the specified settings\n     * will be updated (where the user's capabilities allow) and other settings will be left\n     * unchanged.\n     *\n     * @return {@code true} if all the configuration settings specified have been set to the\n     *   new values, {@code false} if none have\n     ",
    "links" : [ "android.app.time.Capabilities#CAPABILITY_NOT_ALLOWED", "android.app.time.Capabilities#CAPABILITY_NOT_SUPPORTED", "android.app.time.TimeZoneCapabilities", "#getTimeZoneCapabilitiesAndConfig()", "android.app.time.Capabilities#CAPABILITY_POSSESSED", "android.app.time.Capabilities#CAPABILITY_NOT_APPLICABLE" ]
  }, {
    "name" : "public void addTimeZoneDetectorListener(@NonNull Executor executor, @NonNull TimeZoneDetectorListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Registers a listener that will be informed when something about the time zone detector\n     * behavior changes.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void notifyTimeZoneDetectorListeners()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeTimeZoneDetectorListener(@NonNull TimeZoneDetectorListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Removes a listener previously passed to\n     * {@link #addTimeZoneDetectorListener(Executor, TimeZoneDetectorListener)}\n     ",
    "links" : [ "#addTimeZoneDetectorListener(Executor" ]
  }, {
    "name" : "public void suggestExternalTime(@NonNull ExternalTimeSuggestion timeSuggestion)",
    "returnType" : "void",
    "comment" : "\n     * Suggests the current time from an external time source. For example, a form factor-specific\n     * HAL. This time <em>may</em> be used to set the device system clock, depending on the device\n     * configuration and user settings. This method call is processed asynchronously.\n     * See {@link ExternalTimeSuggestion} for more details.\n     ",
    "links" : [ "android.app.time.ExternalTimeSuggestion" ]
  }, {
    "name" : "public TimeState getTimeState()",
    "returnType" : "TimeState",
    "comment" : "\n     * Returns a snapshot of the device's current system clock time state. See also {@link\n     * #confirmTime(UnixEpochTime)} for how this information can be used.\n     ",
    "links" : [ "#confirmTime(UnixEpochTime)" ]
  }, {
    "name" : "public boolean confirmTime(@NonNull UnixEpochTime unixEpochTime)",
    "returnType" : "boolean",
    "comment" : "\n     * Confirms the device's current time during device setup, raising the system's confidence in\n     * the time if needed. Unlike {@link #setManualTime(UnixEpochTime)}, which can only be used when\n     * automatic time detection is currently disabled, this method can be used regardless of the\n     * automatic time detection setting, but only to confirm the current time (which may have been\n     * set via automatic means). Use {@link #getTimeState()} to obtain the time state to confirm.\n     *\n     * <p>Returns {@code false} if the confirmation is invalid, i.e. if the time being\n     * confirmed is no longer the time the device is currently set to. Confirming a time\n     * in which the system already has high confidence will return {@code true}.\n     ",
    "links" : [ "#getTimeState()", "#setManualTime(UnixEpochTime)" ]
  }, {
    "name" : "public boolean setManualTime(@NonNull UnixEpochTime unixEpochTime)",
    "returnType" : "boolean",
    "comment" : "\n     * Attempts to set the device's time, expected to be determined from the user's manually entered\n     * information.\n     *\n     * <p>Returns {@code false} if the time is invalid, or the device configuration / user\n     * capabilities prevents the time being accepted, e.g. if the device is currently set to\n     * \"automatic time detection\". This method returns {@code true} if the time was accepted even\n     * if it is the same as the current device time.\n     ",
    "links" : [ ]
  }, {
    "name" : "public TimeZoneState getTimeZoneState()",
    "returnType" : "TimeZoneState",
    "comment" : "\n     * Returns a snapshot of the device's current time zone state. See also {@link\n     * #confirmTimeZone(String)} and {@link #setManualTimeZone(String)} for how this information may\n     * be used.\n     ",
    "links" : [ "#setManualTimeZone(String)", "#confirmTimeZone(String)" ]
  }, {
    "name" : "public boolean confirmTimeZone(@NonNull String timeZoneId)",
    "returnType" : "boolean",
    "comment" : "\n     * Confirms the device's current time zone ID, raising the system's confidence in the time zone\n     * if needed. Unlike {@link #setManualTimeZone(String)}, which can only be used when automatic\n     * time zone detection is currently disabled, this method can be used regardless of the\n     * automatic time zone detection setting, but only to confirm the current value (which may have\n     * been set via automatic means).\n     *\n     * <p>Returns {@code false} if the confirmation is invalid, i.e. if the time zone ID being\n     * confirmed is no longer the time zone ID the device is currently set to. Confirming a time\n     * zone ID in which the system already has high confidence returns {@code true}.\n     ",
    "links" : [ "#setManualTimeZone(String)" ]
  }, {
    "name" : "public boolean setManualTimeZone(@NonNull String timeZoneId)",
    "returnType" : "boolean",
    "comment" : "\n     * Attempts to set the device's time zone, expected to be determined from a user's manually\n     * entered information.\n     *\n     * <p>Returns {@code false} if the time zone is invalid, or the device configuration / user\n     * capabilities prevents the time zone being accepted, e.g. if the device is currently set to\n     * \"automatic time zone detection\". {@code true} is returned if the time zone is accepted. A\n     * time zone that is accepted and matches the current device time zone returns {@code true}.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public TimeZoneCapabilitiesAndConfig getTimeZoneCapabilitiesAndConfig()", "public TimeCapabilitiesAndConfig getTimeCapabilitiesAndConfig()", "public boolean updateTimeConfiguration(@NonNull TimeConfiguration configuration)", "public boolean updateTimeZoneConfiguration(@NonNull TimeZoneConfiguration configuration)", "public void addTimeZoneDetectorListener(@NonNull Executor executor, @NonNull TimeZoneDetectorListener listener)", "private void notifyTimeZoneDetectorListeners()", "public void removeTimeZoneDetectorListener(@NonNull TimeZoneDetectorListener listener)", "public void suggestExternalTime(@NonNull ExternalTimeSuggestion timeSuggestion)", "public TimeState getTimeState()", "public boolean confirmTime(@NonNull UnixEpochTime unixEpochTime)", "public boolean setManualTime(@NonNull UnixEpochTime unixEpochTime)", "public TimeZoneState getTimeZoneState()", "public boolean confirmTimeZone(@NonNull String timeZoneId)", "public boolean setManualTimeZone(@NonNull String timeZoneId)" ],
  "variableNames" : [ "TAG", "DEBUG", "mLock", "mITimeZoneDetectorService", "mITimeDetectorService", "mTimeZoneDetectorReceiver", "mTimeZoneDetectorListeners" ]
}