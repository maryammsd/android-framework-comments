{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/view/inputmethod/CursorAnchorInfo.java",
  "packageName" : "android.view.inputmethod",
  "className" : "CursorAnchorInfo",
  "comment" : "\n * Positional information about the text insertion point and characters in the composition string.\n *\n * <p>This class encapsulates locations of the text insertion point and the composition string in\n * the screen coordinates so that IMEs can render their UI components near where the text is\n * actually inserted.</p>\n ",
  "variables" : [ {
    "name" : "mHashCode",
    "type" : "int",
    "comment" : "\n     * The pre-computed hash code.\n     ",
    "links" : [ ]
  }, {
    "name" : "mSelectionStart",
    "type" : "int",
    "comment" : "\n     * The index of the first character of the selected text (inclusive). {@code -1} when there is\n     * no text selection.\n     ",
    "links" : [ ]
  }, {
    "name" : "mSelectionEnd",
    "type" : "int",
    "comment" : "\n     * The index of the first character of the selected text (exclusive). {@code -1} when there is\n     * no text selection.\n     ",
    "links" : [ ]
  }, {
    "name" : "mComposingTextStart",
    "type" : "int",
    "comment" : "\n     * The index of the first character of the composing text (inclusive). {@code -1} when there is\n     * no composing text.\n     ",
    "links" : [ ]
  }, {
    "name" : "mComposingText",
    "type" : "CharSequence",
    "comment" : "\n     * The text, tracked as a composing region.\n     ",
    "links" : [ ]
  }, {
    "name" : "mInsertionMarkerFlags",
    "type" : "int",
    "comment" : "\n     * Flags of the insertion marker. See {@link #FLAG_HAS_VISIBLE_REGION} for example.\n     ",
    "links" : [ "#FLAG_HAS_VISIBLE_REGION" ]
  }, {
    "name" : "mInsertionMarkerHorizontal",
    "type" : "float",
    "comment" : "\n     * Horizontal position of the insertion marker, in the local coordinates that will be\n     * transformed with the transformation matrix when rendered on the screen. This should be\n     * calculated or compatible with {@link Layout#getPrimaryHorizontal(int)}. This can be\n     * {@code java.lang.Float.NaN} when no value is specified.\n     ",
    "links" : [ "android.text.Layout#getPrimaryHorizontal(int)" ]
  }, {
    "name" : "mInsertionMarkerTop",
    "type" : "float",
    "comment" : "\n     * Vertical position of the insertion marker, in the local coordinates that will be\n     * transformed with the transformation matrix when rendered on the screen. This should be\n     * calculated or compatible with {@link Layout#getLineTop(int)}. This can be\n     * {@code java.lang.Float.NaN} when no value is specified.\n     ",
    "links" : [ "android.text.Layout#getLineTop(int)" ]
  }, {
    "name" : "mInsertionMarkerBaseline",
    "type" : "float",
    "comment" : "\n     * Vertical position of the insertion marker, in the local coordinates that will be\n     * transformed with the transformation matrix when rendered on the screen. This should be\n     * calculated or compatible with {@link Layout#getLineBaseline(int)}. This can be\n     * {@code java.lang.Float.NaN} when no value is specified.\n     ",
    "links" : [ "android.text.Layout#getLineBaseline(int)" ]
  }, {
    "name" : "mInsertionMarkerBottom",
    "type" : "float",
    "comment" : "\n     * Vertical position of the insertion marker, in the local coordinates that will be\n     * transformed with the transformation matrix when rendered on the screen. This should be\n     * calculated or compatible with {@link Layout#getLineBottom(int)}. This can be\n     * {@code java.lang.Float.NaN} when no value is specified.\n     ",
    "links" : [ "android.text.Layout#getLineBottom(int)" ]
  }, {
    "name" : "mCharacterBoundsArray",
    "type" : "SparseRectFArray",
    "comment" : "\n     * Container of rectangular position of characters, keyed with character index in a unit of\n     * Java chars, in the local coordinates that will be transformed with the transformation matrix\n     * when rendered on the screen.\n     ",
    "links" : [ ]
  }, {
    "name" : "mMatrixValues",
    "type" : "float[]",
    "comment" : "\n     * Transformation matrix that is applied to any positional information of this class to\n     * transform local coordinates into screen coordinates.\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_HAS_VISIBLE_REGION",
    "type" : "int",
    "comment" : "\n     * Flag for {@link #getInsertionMarkerFlags()} and {@link #getCharacterBoundsFlags(int)}: the\n     * insertion marker or character bounds have at least one visible region.\n     ",
    "links" : [ "#getInsertionMarkerFlags()", "#getCharacterBoundsFlags(int)" ]
  }, {
    "name" : "FLAG_HAS_INVISIBLE_REGION",
    "type" : "int",
    "comment" : "\n     * Flag for {@link #getInsertionMarkerFlags()} and {@link #getCharacterBoundsFlags(int)}: the\n     * insertion marker or character bounds have at least one invisible (clipped) region.\n     ",
    "links" : [ "#getInsertionMarkerFlags()", "#getCharacterBoundsFlags(int)" ]
  }, {
    "name" : "FLAG_IS_RTL",
    "type" : "int",
    "comment" : "\n     * Flag for {@link #getInsertionMarkerFlags()} and {@link #getCharacterBoundsFlags(int)}: the\n     * insertion marker or character bounds is placed at right-to-left (RTL) character.\n     ",
    "links" : [ "#getInsertionMarkerFlags()", "#getCharacterBoundsFlags(int)" ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<CursorAnchorInfo>",
    "comment" : "\n     * Used to make this class parcelable.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "\n     * Used to package this object into a {@link Parcel}.\n     *\n     * @param dest The {@link Parcel} to be written.\n     * @param flags The flags used for parceling.\n     ",
    "links" : [ "android.os.Parcel" ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean areSameFloatImpl(final float a, final float b)",
    "returnType" : "boolean",
    "comment" : "\n     * Compares two float values. Returns {@code true} if {@code a} and {@code b} are\n     * {@link Float#NaN} at the same time.\n     ",
    "links" : [ "#NaN" ]
  }, {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static CursorAnchorInfo create(Builder builder)",
    "returnType" : "CursorAnchorInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static CursorAnchorInfo createForAdditionalParentMatrix(CursorAnchorInfo original, @NonNull Matrix parentMatrix)",
    "returnType" : "CursorAnchorInfo",
    "comment" : "\n     * Creates a new instance of {@link CursorAnchorInfo} by applying {@code parentMatrix} to\n     * the coordinate transformation matrix.\n     *\n     * @param original {@link CursorAnchorInfo} to be cloned from.\n     * @param parentMatrix {@link Matrix} to be applied to {@code original.getMatrix()}\n     * @return A new instance of {@link CursorAnchorInfo} whose {@link CursorAnchorInfo#getMatrix()}\n     *         returns {@code parentMatrix * original.getMatrix()}.\n     * @hide\n     ",
    "links" : [ "android.view.inputmethod.CursorAnchorInfo#getMatrix()", "android.view.inputmethod.CursorAnchorInfo", "android.graphics.Matrix" ]
  }, {
    "name" : "private static float[] computeMatrixValues(@NonNull Matrix parentMatrix, @NonNull CursorAnchorInfo info)",
    "returnType" : "float[]",
    "comment" : "\n     * Returns a float array that represents {@link Matrix} elements for\n     * {@code parentMatrix * info.getMatrix()}.\n     *\n     * @param parentMatrix {@link Matrix} to be multiplied.\n     * @param info {@link CursorAnchorInfo} to provide {@link Matrix} to be multiplied.\n     * @return {@code parentMatrix * info.getMatrix()}.\n     ",
    "links" : [ "android.graphics.Matrix", "android.view.inputmethod.CursorAnchorInfo" ]
  }, {
    "name" : "public int getSelectionStart()",
    "returnType" : "int",
    "comment" : "\n     * Returns the index where the selection starts.\n     * @return {@code -1} if there is no selection.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getSelectionEnd()",
    "returnType" : "int",
    "comment" : "\n     * Returns the index where the selection ends.\n     * @return {@code -1} if there is no selection.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getComposingTextStart()",
    "returnType" : "int",
    "comment" : "\n     * Returns the index where the composing text starts.\n     * @return {@code -1} if there is no composing text.\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getComposingText()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Returns the entire composing text.\n     * @return {@code null} if there is no composition.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getInsertionMarkerFlags()",
    "returnType" : "int",
    "comment" : "\n     * Returns the flag of the insertion marker.\n     * @return the flag of the insertion marker. {@code 0} if no flag is specified.\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getInsertionMarkerHorizontal()",
    "returnType" : "float",
    "comment" : "\n     * Returns the horizontal start of the insertion marker, in the local coordinates that will\n     * be transformed with {@link #getMatrix()} when rendered on the screen.\n     * @return x coordinate that is compatible with {@link Layout#getPrimaryHorizontal(int)}.\n     * Pay special care to RTL/LTR handling.\n     * {@code java.lang.Float.NaN} if not specified.\n     * @see Layout#getPrimaryHorizontal(int)\n     ",
    "links" : [ "#getMatrix()", "android.text.Layout#getPrimaryHorizontal(int)" ]
  }, {
    "name" : "public float getInsertionMarkerTop()",
    "returnType" : "float",
    "comment" : "\n     * Returns the vertical top position of the insertion marker, in the local coordinates that\n     * will be transformed with {@link #getMatrix()} when rendered on the screen.\n     * @return y coordinate that is compatible with {@link Layout#getLineTop(int)}.\n     * {@code java.lang.Float.NaN} if not specified.\n     ",
    "links" : [ "android.text.Layout#getLineTop(int)", "#getMatrix()" ]
  }, {
    "name" : "public float getInsertionMarkerBaseline()",
    "returnType" : "float",
    "comment" : "\n     * Returns the vertical baseline position of the insertion marker, in the local coordinates\n     * that will be transformed with {@link #getMatrix()} when rendered on the screen.\n     * @return y coordinate that is compatible with {@link Layout#getLineBaseline(int)}.\n     * {@code java.lang.Float.NaN} if not specified.\n     ",
    "links" : [ "android.text.Layout#getLineBaseline(int)", "#getMatrix()" ]
  }, {
    "name" : "public float getInsertionMarkerBottom()",
    "returnType" : "float",
    "comment" : "\n     * Returns the vertical bottom position of the insertion marker, in the local coordinates\n     * that will be transformed with {@link #getMatrix()} when rendered on the screen.\n     * @return y coordinate that is compatible with {@link Layout#getLineBottom(int)}.\n     * {@code java.lang.Float.NaN} if not specified.\n     ",
    "links" : [ "android.text.Layout#getLineBottom(int)", "#getMatrix()" ]
  }, {
    "name" : "public RectF getCharacterBounds(final int index)",
    "returnType" : "RectF",
    "comment" : "\n     * Returns a new instance of {@link RectF} that indicates the location of the character\n     * specified with the index.\n     * @param index index of the character in a Java chars.\n     * @return the character bounds in local coordinates as a new instance of {@link RectF}.\n     ",
    "links" : [ "android.graphics.RectF" ]
  }, {
    "name" : "public int getCharacterBoundsFlags(final int index)",
    "returnType" : "int",
    "comment" : "\n     * Returns the flags associated with the character bounds specified with the index.\n     * @param index index of the character in a Java chars.\n     * @return {@code 0} if no flag is specified.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Matrix getMatrix()",
    "returnType" : "Matrix",
    "comment" : "\n     * Returns a new instance of {@link android.graphics.Matrix} that indicates the transformation\n     * matrix that is to be applied other positional data in this class.\n     * @return a new instance (copy) of the transformation matrix.\n     ",
    "links" : [ "android.graphics.Matrix" ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "mHashCode", "mSelectionStart", "mSelectionEnd", "mComposingTextStart", "mComposingText", "mInsertionMarkerFlags", "mInsertionMarkerHorizontal", "mInsertionMarkerTop", "mInsertionMarkerBaseline", "mInsertionMarkerBottom", "mCharacterBoundsArray", "mMatrixValues", "FLAG_HAS_VISIBLE_REGION", "FLAG_HAS_INVISIBLE_REGION", "FLAG_IS_RTL", "CREATOR" ],
  "methodNames" : [ "public void writeToParcel(Parcel dest, int flags)", "public int hashCode()", "private static boolean areSameFloatImpl(final float a, final float b)", "public boolean equals(Object obj)", "public String toString()", "private static CursorAnchorInfo create(Builder builder)", "public static CursorAnchorInfo createForAdditionalParentMatrix(CursorAnchorInfo original, @NonNull Matrix parentMatrix)", "private static float[] computeMatrixValues(@NonNull Matrix parentMatrix, @NonNull CursorAnchorInfo info)", "public int getSelectionStart()", "public int getSelectionEnd()", "public int getComposingTextStart()", "public CharSequence getComposingText()", "public int getInsertionMarkerFlags()", "public float getInsertionMarkerHorizontal()", "public float getInsertionMarkerTop()", "public float getInsertionMarkerBaseline()", "public float getInsertionMarkerBottom()", "public RectF getCharacterBounds(final int index)", "public int getCharacterBoundsFlags(final int index)", "public Matrix getMatrix()", "public int describeContents()" ]
}