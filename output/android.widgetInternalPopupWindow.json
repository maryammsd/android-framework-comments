{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/widget/Magnifier.java",
  "packageName" : "android.widget",
  "className" : "InternalPopupWindow",
  "comment" : "\n     * Magnifier's own implementation of PopupWindow-similar floating window.\n     * This exists to ensure frame-synchronization between window position updates and window\n     * content updates. By using a PopupWindow, these events would happen in different frames,\n     * producing a shakiness effect for the magnifier content.\n     ",
  "variables" : [ {
    "name" : "SURFACE_Z",
    "type" : "int",
    "comment" : " siblings having the same parent surface (usually the main app surface).",
    "links" : [ ]
  }, {
    "name" : "mDisplay",
    "type" : "Display",
    "comment" : " Display associated to the view the magnifier is attached to.",
    "links" : [ ]
  }, {
    "name" : "mContentWidth",
    "type" : "int",
    "comment" : " The size of the content of the magnifier.",
    "links" : [ ]
  }, {
    "name" : "mContentHeight",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOffsetX",
    "type" : "int",
    "comment" : " The insets of the content inside the allocated surface.",
    "links" : [ ]
  }, {
    "name" : "mOffsetY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOverlay",
    "type" : "Drawable",
    "comment" : " The overlay to be drawn on the top of the content.",
    "links" : [ ]
  }, {
    "name" : "mSurfaceSession",
    "type" : "SurfaceSession",
    "comment" : " The surface we allocate for the magnifier content + shadow.",
    "links" : [ ]
  }, {
    "name" : "mSurfaceControl",
    "type" : "SurfaceControl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTransaction",
    "type" : "SurfaceControl.Transaction",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSurface",
    "type" : "Surface",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRenderer",
    "type" : "ThreadedRenderer.SimpleRenderer",
    "comment" : " The renderer used for the allocated surface.",
    "links" : [ ]
  }, {
    "name" : "mBitmapRenderNode",
    "type" : "RenderNode",
    "comment" : " The RenderNode used to draw the magnifier content in the surface.",
    "links" : [ ]
  }, {
    "name" : "mOverlayRenderNode",
    "type" : "RenderNode",
    "comment" : " The RenderNode used to draw the overlay over the magnifier content.",
    "links" : [ ]
  }, {
    "name" : "mMagnifierUpdater",
    "type" : "Runnable",
    "comment" : " The job that will be post'd to apply the pending magnifier updates to the surface.",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : " The handler where the magnifier updater jobs will be post'd.",
    "links" : [ ]
  }, {
    "name" : "mCallback",
    "type" : "Callback",
    "comment" : " The callback to be run after the next draw.",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : " the pixel copy results. This is the purpose of mLock.",
    "links" : [ ]
  }, {
    "name" : "mFrameDrawScheduled",
    "type" : "boolean",
    "comment" : " Whether a magnifier frame draw is currently pending in the UI thread queue.",
    "links" : [ ]
  }, {
    "name" : "mBitmap",
    "type" : "Bitmap",
    "comment" : " The content bitmap, as returned by pixel copy.",
    "links" : [ ]
  }, {
    "name" : "mFirstDraw",
    "type" : "boolean",
    "comment" : " Whether the next draw will be the first one for the current instance.",
    "links" : [ ]
  }, {
    "name" : "mWindowPositionX",
    "type" : "int",
    "comment" : " when mPendingWindowPositionUpdate is true.",
    "links" : [ ]
  }, {
    "name" : "mWindowPositionY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPendingWindowPositionUpdate",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCurrentContent",
    "type" : "Bitmap",
    "comment" : " The current content of the magnifier. It is mBitmap + mOverlay, only used for testing.",
    "links" : [ ]
  }, {
    "name" : "mZoom",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRamp",
    "type" : "int",
    "comment" : " The width of the ramp region in pixels on the left & right sides of the fish-eye effect.",
    "links" : [ ]
  }, {
    "name" : "mIsFishEyeStyle",
    "type" : "boolean",
    "comment" : " Whether is in the new magnifier style.",
    "links" : [ ]
  }, {
    "name" : "mMeshLeft",
    "type" : "float[]",
    "comment" : " The mesh matrix for the fish-eye effect.",
    "links" : [ ]
  }, {
    "name" : "mMeshRight",
    "type" : "float[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMeshWidth",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMeshHeight",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void updateContentFactors(final int contentHeight, final float zoom)",
    "returnType" : "void",
    "comment" : "\n         * Updates the factors of content which may resize the window.\n         * @param contentHeight the new height of content.\n         * @param zoom the new zoom factor.\n         ",
    "links" : [ ]
  }, {
    "name" : "private void createMeshMatrixForFishEyeEffect()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void fillMeshMatrix()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private RenderNode createRenderNodeForBitmap(final String name, final float elevation, final float cornerRadius)",
    "returnType" : "RenderNode",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private RenderNode createRenderNodeForOverlay(final String name, final float cornerRadius)",
    "returnType" : "RenderNode",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setupOverlay()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void drawOverlay()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setContentPositionForNextDraw(final int contentX, final int contentY)",
    "returnType" : "void",
    "comment" : "\n         * Sets the position of the magnifier content relative to the parent surface.\n         * The position update will happen in the same frame with the next draw.\n         * The method has to be called in a context that holds {@link #mLock}.\n         *\n         * @param contentX the x coordinate of the content\n         * @param contentY the y coordinate of the content\n         ",
    "links" : [ "#mLock" ]
  }, {
    "name" : "public void updateContent(@NonNull final Bitmap bitmap)",
    "returnType" : "void",
    "comment" : "\n         * Sets the content that should be displayed in the magnifier.\n         * The update happens immediately, and possibly triggers a pending window movement set\n         * by {@link #setContentPositionForNextDraw(int, int)}.\n         * The method has to be called in a context that holds {@link #mLock}.\n         *\n         * @param bitmap the content bitmap\n         ",
    "links" : [ "#setContentPositionForNextDraw", "#mLock" ]
  }, {
    "name" : "private void requestUpdate()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void destroy()",
    "returnType" : "void",
    "comment" : "\n         * Destroys this instance. The method has to be called in a context holding {@link #mLock}.\n         ",
    "links" : [ "#mLock" ]
  }, {
    "name" : "private void doDraw()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateCurrentContentForTesting()",
    "returnType" : "void",
    "comment" : "\n         * Updates mCurrentContent, which reproduces what is currently supposed to be\n         * drawn in the magnifier. mCurrentContent is only used for testing, so this method\n         * should only be called otherwise.\n         ",
    "links" : [ ]
  } ],
  "variableNames" : [ "SURFACE_Z", "mDisplay", "mContentWidth", "mContentHeight", "mOffsetX", "mOffsetY", "mOverlay", "mSurfaceSession", "mSurfaceControl", "mTransaction", "mSurface", "mRenderer", "mBitmapRenderNode", "mOverlayRenderNode", "mMagnifierUpdater", "mHandler", "mCallback", "mLock", "mFrameDrawScheduled", "mBitmap", "mFirstDraw", "mWindowPositionX", "mWindowPositionY", "mPendingWindowPositionUpdate", "mCurrentContent", "mZoom", "mRamp", "mIsFishEyeStyle", "mMeshLeft", "mMeshRight", "mMeshWidth", "mMeshHeight" ],
  "methodNames" : [ "private void updateContentFactors(final int contentHeight, final float zoom)", "private void createMeshMatrixForFishEyeEffect()", "private void fillMeshMatrix()", "private RenderNode createRenderNodeForBitmap(final String name, final float elevation, final float cornerRadius)", "private RenderNode createRenderNodeForOverlay(final String name, final float cornerRadius)", "private void setupOverlay()", "private void drawOverlay()", "public void setContentPositionForNextDraw(final int contentX, final int contentY)", "public void updateContent(@NonNull final Bitmap bitmap)", "private void requestUpdate()", "public void destroy()", "private void doDraw()", "private void updateCurrentContentForTesting()" ]
}