{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/breakiter/LanguageBreakEngine.java",
  "packageName" : "android.icu.impl.breakiter",
  "className" : "LanguageBreakEngine",
  "comment" : "\n * The LanguageBreakEngine interface is to be used to implement any\n * language-specific logic for break iteration.\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " boolean handles(int c)",
    "returnType" : "boolean",
    "comment" : "\n     * @param c A Unicode codepoint value\n     * @return true if the engine can handle this character, false otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : " int findBreaks(CharacterIterator text, int startPos, int endPos, DictionaryBreakEngine.DequeI foundBreaks, boolean isPhraseBreaking)",
    "returnType" : "int",
    "comment" : "\n     * Implements the actual breaking logic. Find any breaks within a run in the supplied text.\n     * @param text The text to break over. The iterator is left at\n     * the end of the run of characters which the engine has handled.\n     * @param startPos The index of the beginning of the range\n     * @param endPos The index of the possible end of our range. It is possible,\n     *  however, that the range ends earlier\n     * @param foundBreaks A data structure to receive the break positions.\n     * @return the number of breaks found\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " boolean handles(int c)", " int findBreaks(CharacterIterator text, int startPos, int endPos, DictionaryBreakEngine.DequeI foundBreaks, boolean isPhraseBreaking)" ],
  "variableNames" : [ ]
}