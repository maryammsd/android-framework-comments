{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/widget/GridLayout.java",
  "packageName" : "android.widget",
  "className" : "GridLayout",
  "comment" : "\n * A layout that places its children in a rectangular <em>grid</em>.\n * <p>\n * The grid is composed of a set of infinitely thin lines that separate the\n * viewing area into <em>cells</em>. Throughout the API, grid lines are referenced\n * by grid <em>indices</em>. A grid with {@code N} columns\n * has {@code N + 1} grid indices that run from {@code 0}\n * through {@code N} inclusive. Regardless of how GridLayout is\n * configured, grid index {@code 0} is fixed to the leading edge of the\n * container and grid index {@code N} is fixed to its trailing edge\n * (after padding is taken into account).\n *\n * <h4>Row and Column Specs</h4>\n *\n * Children occupy one or more contiguous cells, as defined\n * by their {@link GridLayout.LayoutParams#rowSpec rowSpec} and\n * {@link GridLayout.LayoutParams#columnSpec columnSpec} layout parameters.\n * Each spec defines the set of rows or columns that are to be\n * occupied; and how children should be aligned within the resulting group of cells.\n * Although cells do not normally overlap in a GridLayout, GridLayout does\n * not prevent children being defined to occupy the same cell or group of cells.\n * In this case however, there is no guarantee that children will not themselves\n * overlap after the layout operation completes.\n *\n * <h4>Default Cell Assignment</h4>\n *\n * If a child does not specify the row and column indices of the cell it\n * wishes to occupy, GridLayout assigns cell locations automatically using its:\n * {@link GridLayout#setOrientation(int) orientation},\n * {@link GridLayout#setRowCount(int) rowCount} and\n * {@link GridLayout#setColumnCount(int) columnCount} properties.\n *\n * <h4>Space</h4>\n *\n * Space between children may be specified either by using instances of the\n * dedicated {@link Space} view or by setting the\n *\n * {@link ViewGroup.MarginLayoutParams#leftMargin leftMargin},\n * {@link ViewGroup.MarginLayoutParams#topMargin topMargin},\n * {@link ViewGroup.MarginLayoutParams#rightMargin rightMargin} and\n * {@link ViewGroup.MarginLayoutParams#bottomMargin bottomMargin}\n *\n * layout parameters. When the\n * {@link GridLayout#setUseDefaultMargins(boolean) useDefaultMargins}\n * property is set, default margins around children are automatically\n * allocated based on the prevailing UI style guide for the platform.\n * Each of the margins so defined may be independently overridden by an assignment\n * to the appropriate layout parameter.\n * Default values will generally produce a reasonable spacing between components\n * but values may change between different releases of the platform.\n *\n * <h4>Excess Space Distribution</h4>\n *\n * As of API 21, GridLayout's distribution of excess space accomodates the principle of weight.\n * In the event that no weights are specified, the previous conventions are respected and\n * columns and rows are taken as flexible if their views specify some form of alignment\n * within their groups.\n * <p>\n * The flexibility of a view is therefore influenced by its alignment which is,\n * in turn, typically defined by setting the\n * {@link LayoutParams#setGravity(int) gravity} property of the child's layout parameters.\n * If either a weight or alignment were defined along a given axis then the component\n * is taken as <em>flexible</em> in that direction. If no weight or alignment was set,\n * the component is instead assumed to be <em>inflexible</em>.\n * <p>\n * Multiple components in the same row or column group are\n * considered to act in <em>parallel</em>. Such a\n * group is flexible only if <em>all</em> of the components\n * within it are flexible. Row and column groups that sit either side of a common boundary\n * are instead considered to act in <em>series</em>. The composite group made of these two\n * elements is flexible if <em>one</em> of its elements is flexible.\n * <p>\n * To make a column stretch, make sure all of the components inside it define a\n * weight or a gravity. To prevent a column from stretching, ensure that one of the components\n * in the column does not define a weight or a gravity.\n * <p>\n * When the principle of flexibility does not provide complete disambiguation,\n * GridLayout's algorithms favour rows and columns that are closer to its <em>right</em>\n * and <em>bottom</em> edges. To be more precise, GridLayout treats each of its layout\n * parameters as a constraint in the a set of variables that define the grid-lines along a\n * given axis. During layout, GridLayout solves the constraints so as to return the unique\n * solution to those constraints for which all variables are less-than-or-equal-to\n * the corresponding value in any other valid solution.\n *\n * <h4>Interpretation of GONE</h4>\n *\n * For layout purposes, GridLayout treats views whose visibility status is\n * {@link View#GONE GONE}, as having zero width and height. This is subtly different from\n * the policy of ignoring views that are marked as GONE outright. If, for example, a gone-marked\n * view was alone in a column, that column would itself collapse to zero width if and only if\n * no gravity was defined on the view. If gravity was defined, then the gone-marked\n * view has no effect on the layout and the container should be laid out as if the view\n * had never been added to it. GONE views are taken to have zero weight during excess space\n * distribution.\n * <p>\n * These statements apply equally to rows as well as columns, and to groups of rows or columns.\n *\n * <p>\n * See {@link GridLayout.LayoutParams} for a full description of the\n * layout parameters used by GridLayout.\n *\n * @attr ref android.R.styleable#GridLayout_orientation\n * @attr ref android.R.styleable#GridLayout_rowCount\n * @attr ref android.R.styleable#GridLayout_columnCount\n * @attr ref android.R.styleable#GridLayout_useDefaultMargins\n * @attr ref android.R.styleable#GridLayout_rowOrderPreserved\n * @attr ref android.R.styleable#GridLayout_columnOrderPreserved\n ",
  "links" : [ "android.widget.GridLayout#setRowCount(int)", "GridLayout.LayoutParams", "ViewGroup.MarginLayoutParams#bottomMargin", "android.widget.GridLayout#setOrientation(int)", "android.widget.Space", "android.widget.GridLayout#setUseDefaultMargins(boolean)", "ViewGroup.MarginLayoutParams#leftMargin", "ViewGroup.MarginLayoutParams#rightMargin", "android.widget.GridLayout#setColumnCount(int)", "ViewGroup.MarginLayoutParams#topMargin", "#setGravity(int)", "GridLayout.LayoutParams#columnSpec", "android.view.View#GONE", "GridLayout.LayoutParams#rowSpec" ],
  "variables" : [ {
    "name" : "HORIZONTAL",
    "type" : "int",
    "comment" : "\n     * The horizontal orientation.\n     ",
    "links" : [ ]
  }, {
    "name" : "VERTICAL",
    "type" : "int",
    "comment" : "\n     * The vertical orientation.\n     ",
    "links" : [ ]
  }, {
    "name" : "UNDEFINED",
    "type" : "int",
    "comment" : "\n     * The constant used to indicate that a value is undefined.\n     * Fields can use this value to indicate that their values\n     * have not yet been set. Similarly, methods can return this value\n     * to indicate that there is no suitable value that the implementation\n     * can return.\n     * The value used for the constant (currently {@link Integer#MIN_VALUE}) is\n     * intended to avoid confusion between valid values whose sign may not be known.\n     ",
    "links" : [ "#MIN_VALUE" ]
  }, {
    "name" : "ALIGN_BOUNDS",
    "type" : "int",
    "comment" : "\n     * This constant is an {@link #setAlignmentMode(int) alignmentMode}.\n     * When the {@code alignmentMode} is set to {@link #ALIGN_BOUNDS}, alignment\n     * is made between the edges of each component's raw\n     * view boundary: i.e. the area delimited by the component's:\n     * {@link android.view.View#getTop() top},\n     * {@link android.view.View#getLeft() left},\n     * {@link android.view.View#getBottom() bottom} and\n     * {@link android.view.View#getRight() right} properties.\n     * <p>\n     * For example, when {@code GridLayout} is in {@link #ALIGN_BOUNDS} mode,\n     * children that belong to a row group that uses {@link #TOP} alignment will\n     * all return the same value when their {@link android.view.View#getTop()}\n     * method is called.\n     *\n     * @see #setAlignmentMode(int)\n     ",
    "links" : [ "#ALIGN_BOUNDS", "#setAlignmentMode(int)", "android.view.View#getTop()", "#TOP", "android.view.View#getLeft()", "android.view.View#getRight()", "android.view.View#getBottom()" ]
  }, {
    "name" : "ALIGN_MARGINS",
    "type" : "int",
    "comment" : "\n     * This constant is an {@link #setAlignmentMode(int) alignmentMode}.\n     * When the {@code alignmentMode} is set to {@link #ALIGN_MARGINS},\n     * the bounds of each view are extended outwards, according\n     * to their margins, before the edges of the resulting rectangle are aligned.\n     * <p>\n     * For example, when {@code GridLayout} is in {@link #ALIGN_MARGINS} mode,\n     * the quantity {@code top - layoutParams.topMargin} is the same for all children that\n     * belong to a row group that uses {@link #TOP} alignment.\n     *\n     * @see #setAlignmentMode(int)\n     ",
    "links" : [ "#setAlignmentMode(int)", "#TOP", "#ALIGN_MARGINS" ]
  }, {
    "name" : "MAX_SIZE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_CONTAINER_MARGIN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UNINITIALIZED_HASH",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOG_PRINTER",
    "type" : "Printer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NO_PRINTER",
    "type" : "Printer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_ORIENTATION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_COUNT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_USE_DEFAULT_MARGINS",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_ORDER_PRESERVED",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_ALIGNMENT_MODE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ORIENTATION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ROW_COUNT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "COLUMN_COUNT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "USE_DEFAULT_MARGINS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ALIGNMENT_MODE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ROW_ORDER_PRESERVED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "COLUMN_ORDER_PRESERVED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHorizontalAxis",
    "type" : "Axis",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVerticalAxis",
    "type" : "Axis",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOrientation",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUseDefaultMargins",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAlignmentMode",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDefaultGap",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLastLayoutParamsHashCode",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPrinter",
    "type" : "Printer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UNDEFINED_ALIGNMENT",
    "type" : "Alignment",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LEADING",
    "type" : "Alignment",
    "comment" : "\n     * Indicates that a view should be aligned with the <em>start</em>\n     * edges of the other views in its cell group.\n     ",
    "links" : [ ]
  }, {
    "name" : "TRAILING",
    "type" : "Alignment",
    "comment" : "\n     * Indicates that a view should be aligned with the <em>end</em>\n     * edges of the other views in its cell group.\n     ",
    "links" : [ ]
  }, {
    "name" : "TOP",
    "type" : "Alignment",
    "comment" : "\n     * Indicates that a view should be aligned with the <em>top</em>\n     * edges of the other views in its cell group.\n     ",
    "links" : [ ]
  }, {
    "name" : "BOTTOM",
    "type" : "Alignment",
    "comment" : "\n     * Indicates that a view should be aligned with the <em>bottom</em>\n     * edges of the other views in its cell group.\n     ",
    "links" : [ ]
  }, {
    "name" : "START",
    "type" : "Alignment",
    "comment" : "\n     * Indicates that a view should be aligned with the <em>start</em>\n     * edges of the other views in its cell group.\n     ",
    "links" : [ ]
  }, {
    "name" : "END",
    "type" : "Alignment",
    "comment" : "\n     * Indicates that a view should be aligned with the <em>end</em>\n     * edges of the other views in its cell group.\n     ",
    "links" : [ ]
  }, {
    "name" : "LEFT",
    "type" : "Alignment",
    "comment" : "\n     * Indicates that a view should be aligned with the <em>left</em>\n     * edges of the other views in its cell group.\n     ",
    "links" : [ ]
  }, {
    "name" : "RIGHT",
    "type" : "Alignment",
    "comment" : "\n     * Indicates that a view should be aligned with the <em>right</em>\n     * edges of the other views in its cell group.\n     ",
    "links" : [ ]
  }, {
    "name" : "CENTER",
    "type" : "Alignment",
    "comment" : "\n     * Indicates that a view should be <em>centered</em> with the other views in its cell group.\n     * This constant may be used in both {@link LayoutParams#rowSpec rowSpecs} and {@link\n     * LayoutParams#columnSpec columnSpecs}.\n     ",
    "links" : [ "#columnSpec", "#rowSpec" ]
  }, {
    "name" : "BASELINE",
    "type" : "Alignment",
    "comment" : "\n     * Indicates that a view should be aligned with the <em>baselines</em>\n     * of the other views in its cell group.\n     * This constant may only be used as an alignment in {@link LayoutParams#rowSpec rowSpecs}.\n     *\n     * @see View#getBaseline()\n     ",
    "links" : [ "#rowSpec" ]
  }, {
    "name" : "FILL",
    "type" : "Alignment",
    "comment" : "\n     * Indicates that a view should expanded to fit the boundaries of its cell group.\n     * This constant may be used in both {@link LayoutParams#rowSpec rowSpecs} and\n     * {@link LayoutParams#columnSpec columnSpecs}.\n     ",
    "links" : [ "#columnSpec", "#rowSpec" ]
  }, {
    "name" : "INFLEXIBLE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CAN_STRETCH",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getOrientation()",
    "returnType" : "int",
    "comment" : "\n     * Returns the current orientation.\n     *\n     * @return either {@link #HORIZONTAL} or {@link #VERTICAL}\n     *\n     * @see #setOrientation(int)\n     *\n     * @attr ref android.R.styleable#GridLayout_orientation\n     ",
    "links" : [ "#HORIZONTAL", "#VERTICAL" ]
  }, {
    "name" : "public void setOrientation(@Orientation int orientation)",
    "returnType" : "void",
    "comment" : "\n     *\n     * GridLayout uses the orientation property for two purposes:\n     * <ul>\n     *  <li>\n     *      To control the 'direction' in which default row/column indices are generated\n     *      when they are not specified in a component's layout parameters.\n     *  </li>\n     *  <li>\n     *      To control which axis should be processed first during the layout operation:\n     *      when orientation is {@link #HORIZONTAL} the horizontal axis is laid out first.\n     *  </li>\n     * </ul>\n     *\n     * The order in which axes are laid out is important if, for example, the height of\n     * one of GridLayout's children is dependent on its width - and its width is, in turn,\n     * dependent on the widths of other components.\n     * <p>\n     * If your layout contains a {@link TextView} (or derivative:\n     * {@code Button}, {@code EditText}, {@code CheckBox}, etc.) which is\n     * in multi-line mode (the default) it is normally best to leave GridLayout's\n     * orientation as {@code HORIZONTAL} - because {@code TextView} is capable of\n     * deriving its height for a given width, but not the other way around.\n     * <p>\n     * Other than the effects above, orientation does not affect the actual layout operation of\n     * GridLayout, so it's fine to leave GridLayout in {@code HORIZONTAL} mode even if\n     * the height of the intended layout greatly exceeds its width.\n     * <p>\n     * The default value of this property is {@link #HORIZONTAL}.\n     *\n     * @param orientation either {@link #HORIZONTAL} or {@link #VERTICAL}\n     *\n     * @see #getOrientation()\n     *\n     * @attr ref android.R.styleable#GridLayout_orientation\n     ",
    "links" : [ "android.widget.TextView", "#HORIZONTAL", "#VERTICAL" ]
  }, {
    "name" : "public int getRowCount()",
    "returnType" : "int",
    "comment" : "\n     * Returns the current number of rows. This is either the last value that was set\n     * with {@link #setRowCount(int)} or, if no such value was set, the maximum\n     * value of each the upper bounds defined in {@link LayoutParams#rowSpec}.\n     *\n     * @return the current number of rows\n     *\n     * @see #setRowCount(int)\n     * @see LayoutParams#rowSpec\n     *\n     * @attr ref android.R.styleable#GridLayout_rowCount\n     ",
    "links" : [ "#setRowCount(int)", "#rowSpec" ]
  }, {
    "name" : "public void setRowCount(int rowCount)",
    "returnType" : "void",
    "comment" : "\n     * RowCount is used only to generate default row/column indices when\n     * they are not specified by a component's layout parameters.\n     *\n     * @param rowCount the number of rows\n     *\n     * @see #getRowCount()\n     * @see LayoutParams#rowSpec\n     *\n     * @attr ref android.R.styleable#GridLayout_rowCount\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getColumnCount()",
    "returnType" : "int",
    "comment" : "\n     * Returns the current number of columns. This is either the last value that was set\n     * with {@link #setColumnCount(int)} or, if no such value was set, the maximum\n     * value of each the upper bounds defined in {@link LayoutParams#columnSpec}.\n     *\n     * @return the current number of columns\n     *\n     * @see #setColumnCount(int)\n     * @see LayoutParams#columnSpec\n     *\n     * @attr ref android.R.styleable#GridLayout_columnCount\n     ",
    "links" : [ "#columnSpec", "#setColumnCount(int)" ]
  }, {
    "name" : "public void setColumnCount(int columnCount)",
    "returnType" : "void",
    "comment" : "\n     * ColumnCount is used only to generate default column/column indices when\n     * they are not specified by a component's layout parameters.\n     *\n     * @param columnCount the number of columns.\n     *\n     * @see #getColumnCount()\n     * @see LayoutParams#columnSpec\n     *\n     * @attr ref android.R.styleable#GridLayout_columnCount\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getUseDefaultMargins()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether or not this GridLayout will allocate default margins when no\n     * corresponding layout parameters are defined.\n     *\n     * @return {@code true} if default margins should be allocated\n     *\n     * @see #setUseDefaultMargins(boolean)\n     *\n     * @attr ref android.R.styleable#GridLayout_useDefaultMargins\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setUseDefaultMargins(boolean useDefaultMargins)",
    "returnType" : "void",
    "comment" : "\n     * When {@code true}, GridLayout allocates default margins around children\n     * based on the child's visual characteristics. Each of the\n     * margins so defined may be independently overridden by an assignment\n     * to the appropriate layout parameter.\n     * <p>\n     * When {@code false}, the default value of all margins is zero.\n     * <p>\n     * When setting to {@code true}, consider setting the value of the\n     * {@link #setAlignmentMode(int) alignmentMode}\n     * property to {@link #ALIGN_BOUNDS}.\n     * <p>\n     * The default value of this property is {@code false}.\n     *\n     * @param useDefaultMargins use {@code true} to make GridLayout allocate default margins\n     *\n     * @see #getUseDefaultMargins()\n     * @see #setAlignmentMode(int)\n     *\n     * @see ViewGroup.MarginLayoutParams#leftMargin\n     * @see ViewGroup.MarginLayoutParams#topMargin\n     * @see ViewGroup.MarginLayoutParams#rightMargin\n     * @see ViewGroup.MarginLayoutParams#bottomMargin\n     *\n     * @attr ref android.R.styleable#GridLayout_useDefaultMargins\n     ",
    "links" : [ "#ALIGN_BOUNDS", "#setAlignmentMode(int)" ]
  }, {
    "name" : "public int getAlignmentMode()",
    "returnType" : "int",
    "comment" : "\n     * Returns the alignment mode.\n     *\n     * @return the alignment mode; either {@link #ALIGN_BOUNDS} or {@link #ALIGN_MARGINS}\n     *\n     * @see #ALIGN_BOUNDS\n     * @see #ALIGN_MARGINS\n     *\n     * @see #setAlignmentMode(int)\n     *\n     * @attr ref android.R.styleable#GridLayout_alignmentMode\n     ",
    "links" : [ "#ALIGN_BOUNDS", "#ALIGN_MARGINS" ]
  }, {
    "name" : "public void setAlignmentMode(@AlignmentMode int alignmentMode)",
    "returnType" : "void",
    "comment" : "\n     * Sets the alignment mode to be used for all of the alignments between the\n     * children of this container.\n     * <p>\n     * The default value of this property is {@link #ALIGN_MARGINS}.\n     *\n     * @param alignmentMode either {@link #ALIGN_BOUNDS} or {@link #ALIGN_MARGINS}\n     *\n     * @see #ALIGN_BOUNDS\n     * @see #ALIGN_MARGINS\n     *\n     * @see #getAlignmentMode()\n     *\n     * @attr ref android.R.styleable#GridLayout_alignmentMode\n     ",
    "links" : [ "#ALIGN_BOUNDS", "#ALIGN_MARGINS" ]
  }, {
    "name" : "public boolean isRowOrderPreserved()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether or not row boundaries are ordered by their grid indices.\n     *\n     * @return {@code true} if row boundaries must appear in the order of their indices,\n     *         {@code false} otherwise\n     *\n     * @see #setRowOrderPreserved(boolean)\n     *\n     * @attr ref android.R.styleable#GridLayout_rowOrderPreserved\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setRowOrderPreserved(boolean rowOrderPreserved)",
    "returnType" : "void",
    "comment" : "\n     * When this property is {@code true}, GridLayout is forced to place the row boundaries\n     * so that their associated grid indices are in ascending order in the view.\n     * <p>\n     * When this property is {@code false} GridLayout is at liberty to place the vertical row\n     * boundaries in whatever order best fits the given constraints.\n     * <p>\n     * The default value of this property is {@code true}.\n\n     * @param rowOrderPreserved {@code true} to force GridLayout to respect the order\n     *        of row boundaries\n     *\n     * @see #isRowOrderPreserved()\n     *\n     * @attr ref android.R.styleable#GridLayout_rowOrderPreserved\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isColumnOrderPreserved()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether or not column boundaries are ordered by their grid indices.\n     *\n     * @return {@code true} if column boundaries must appear in the order of their indices,\n     *         {@code false} otherwise\n     *\n     * @see #setColumnOrderPreserved(boolean)\n     *\n     * @attr ref android.R.styleable#GridLayout_columnOrderPreserved\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setColumnOrderPreserved(boolean columnOrderPreserved)",
    "returnType" : "void",
    "comment" : "\n     * When this property is {@code true}, GridLayout is forced to place the column boundaries\n     * so that their associated grid indices are in ascending order in the view.\n     * <p>\n     * When this property is {@code false} GridLayout is at liberty to place the horizontal column\n     * boundaries in whatever order best fits the given constraints.\n     * <p>\n     * The default value of this property is {@code true}.\n     *\n     * @param columnOrderPreserved use {@code true} to force GridLayout to respect the order\n     *        of column boundaries.\n     *\n     * @see #isColumnOrderPreserved()\n     *\n     * @attr ref android.R.styleable#GridLayout_columnOrderPreserved\n     ",
    "links" : [ ]
  }, {
    "name" : "public Printer getPrinter()",
    "returnType" : "Printer",
    "comment" : "\n     * Return the printer that will log diagnostics from this layout.\n     *\n     * @see #setPrinter(android.util.Printer)\n     *\n     * @return the printer associated with this view\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPrinter(Printer printer)",
    "returnType" : "void",
    "comment" : "\n     * Set the printer that will log diagnostics from this layout.\n     * The default value is created by {@link android.util.LogPrinter}.\n     *\n     * @param printer the printer associated with this layout\n     *\n     * @see #getPrinter()\n     *\n     * @hide\n     ",
    "links" : [ "android.util.LogPrinter" ]
  }, {
    "name" : " static int max2(int[] a, int valueIfEmpty)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static T[] append(T[] a, T[] b)",
    "returnType" : "T[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static Alignment getAlignment(int gravity, boolean horizontal)",
    "returnType" : "Alignment",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getDefaultMargin(View c, boolean horizontal, boolean leading)",
    "returnType" : "int",
    "comment" : " @noinspection UnusedParameters",
    "links" : [ ]
  }, {
    "name" : "private int getDefaultMargin(View c, boolean isAtEdge, boolean horizontal, boolean leading)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getDefaultMargin(View c, LayoutParams p, boolean horizontal, boolean leading)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " int getMargin1(View view, boolean horizontal, boolean leading)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getMargin(View view, boolean horizontal, boolean leading)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getTotalMargin(View child, boolean horizontal)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean fits(int[] a, int value, int start, int end)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void procrusteanFill(int[] a, int start, int end, int value)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void setCellGroup(LayoutParams lp, int row, int rowSpan, int col, int colSpan)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int clip(Interval minorRange, boolean minorWasDefined, int count)",
    "returnType" : "int",
    "comment" : " Logic to avert infinite loops by ensuring that the cells can be placed somewhere.",
    "links" : [ ]
  }, {
    "name" : "private void validateLayoutParams()",
    "returnType" : "void",
    "comment" : " install default indices for cells that don't define them",
    "links" : [ ]
  }, {
    "name" : "private void invalidateStructure()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void invalidateValues()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onSetLayoutParams(View child, ViewGroup.LayoutParams layoutParams)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : " final LayoutParams getLayoutParams(View c)",
    "returnType" : "LayoutParams",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void handleInvalidParams(String msg)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void checkLayoutParams(LayoutParams lp, boolean horizontal)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected boolean checkLayoutParams(ViewGroup.LayoutParams p)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected LayoutParams generateDefaultLayoutParams()",
    "returnType" : "LayoutParams",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public LayoutParams generateLayoutParams(AttributeSet attrs)",
    "returnType" : "LayoutParams",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected LayoutParams generateLayoutParams(ViewGroup.LayoutParams lp)",
    "returnType" : "LayoutParams",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void drawLine(Canvas graphics, int x1, int y1, int x2, int y2, Paint paint)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onDebugDrawMargins(Canvas canvas, Paint paint)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void onDebugDraw(Canvas canvas)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onViewAdded(View child)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onViewRemoved(View child)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onChildVisibilityChanged(View child, int oldVisibility, int newVisibility)",
    "returnType" : "void",
    "comment" : "\n     * We need to call invalidateStructure() when a child's GONE flag changes state.\n     * This implementation is a catch-all, invalidating on any change in the visibility flags.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private int computeLayoutParamsHashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void consistencyCheck()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void measureChildWithMargins2(View child, int parentWidthSpec, int parentHeightSpec, int childWidth, int childHeight)",
    "returnType" : "void",
    "comment" : " Note: padding has already been removed from the supplied specs",
    "links" : [ ]
  }, {
    "name" : "private void measureChildrenWithMargins(int widthSpec, int heightSpec, boolean firstPass)",
    "returnType" : "void",
    "comment" : " Note: padding has already been removed from the supplied specs",
    "links" : [ ]
  }, {
    "name" : " static int adjust(int measureSpec, int delta)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onMeasure(int widthSpec, int heightSpec)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getMeasurement(View c, boolean horizontal)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final int getMeasurementIncludingMargin(View c, boolean horizontal)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void requestLayout()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onLayout(boolean changed, int left, int top, int right, int bottom)",
    "returnType" : "void",
    "comment" : "\n     The layout operation is implemented by delegating the heavy lifting to the\n     to the mHorizontalAxis and mVerticalAxis instances of the internal Axis class.\n     Together they compute the locations of the vertical and horizontal lines of\n     the grid (respectively!).\n\n     This method is then left with the simpler task of applying margins, gravity\n     and sizing to each child view and then placing it in its cell.\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getAccessibilityClassName()",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static Spec spec(int start, int size, Alignment alignment, float weight)",
    "returnType" : "Spec",
    "comment" : "\n     * Return a Spec, {@code spec}, where:\n     * <ul>\n     *     <li> {@code spec.span = [start, start + size]} </li>\n     *     <li> {@code spec.alignment = alignment} </li>\n     *     <li> {@code spec.weight = weight} </li>\n     * </ul>\n     * <p>\n     * To leave the start index undefined, use the value {@link #UNDEFINED}.\n     *\n     * @param start     the start\n     * @param size      the size\n     * @param alignment the alignment\n     * @param weight    the weight\n     ",
    "links" : [ "#UNDEFINED" ]
  }, {
    "name" : "public static Spec spec(int start, Alignment alignment, float weight)",
    "returnType" : "Spec",
    "comment" : "\n     * Equivalent to: {@code spec(start, 1, alignment, weight)}.\n     *\n     * @param start     the start\n     * @param alignment the alignment\n     * @param weight    the weight\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Spec spec(int start, int size, float weight)",
    "returnType" : "Spec",
    "comment" : "\n     * Equivalent to: {@code spec(start, 1, default_alignment, weight)} -\n     * where {@code default_alignment} is specified in\n     * {@link android.widget.GridLayout.LayoutParams}.\n     *\n     * @param start  the start\n     * @param size   the size\n     * @param weight the weight\n     ",
    "links" : [ "android.widget.GridLayout.LayoutParams" ]
  }, {
    "name" : "public static Spec spec(int start, float weight)",
    "returnType" : "Spec",
    "comment" : "\n     * Equivalent to: {@code spec(start, 1, weight)}.\n     *\n     * @param start  the start\n     * @param weight the weight\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Spec spec(int start, int size, Alignment alignment)",
    "returnType" : "Spec",
    "comment" : "\n     * Equivalent to: {@code spec(start, size, alignment, 0f)}.\n     *\n     * @param start     the start\n     * @param size      the size\n     * @param alignment the alignment\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Spec spec(int start, Alignment alignment)",
    "returnType" : "Spec",
    "comment" : "\n     * Return a Spec, {@code spec}, where:\n     * <ul>\n     *     <li> {@code spec.span = [start, start + 1]} </li>\n     *     <li> {@code spec.alignment = alignment} </li>\n     * </ul>\n     * <p>\n     * To leave the start index undefined, use the value {@link #UNDEFINED}.\n     *\n     * @param start     the start index\n     * @param alignment the alignment\n     *\n     * @see #spec(int, int, Alignment)\n     ",
    "links" : [ "#UNDEFINED" ]
  }, {
    "name" : "public static Spec spec(int start, int size)",
    "returnType" : "Spec",
    "comment" : "\n     * Return a Spec, {@code spec}, where:\n     * <ul>\n     *     <li> {@code spec.span = [start, start + size]} </li>\n     * </ul>\n     * <p>\n     * To leave the start index undefined, use the value {@link #UNDEFINED}.\n     *\n     * @param start     the start\n     * @param size      the size\n     *\n     * @see #spec(int, Alignment)\n     ",
    "links" : [ "#UNDEFINED" ]
  }, {
    "name" : "public static Spec spec(int start)",
    "returnType" : "Spec",
    "comment" : "\n     * Return a Spec, {@code spec}, where:\n     * <ul>\n     *     <li> {@code spec.span = [start, start + 1]} </li>\n     * </ul>\n     * <p>\n     * To leave the start index undefined, use the value {@link #UNDEFINED}.\n     *\n     * @param start     the start index\n     *\n     * @see #spec(int, int)\n     ",
    "links" : [ "#UNDEFINED" ]
  }, {
    "name" : "private static Alignment createSwitchingAlignment(final Alignment ltr, final Alignment rtl)",
    "returnType" : "Alignment",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static boolean canStretch(int flexibility)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int getOrientation()", "public void setOrientation(@Orientation int orientation)", "public int getRowCount()", "public void setRowCount(int rowCount)", "public int getColumnCount()", "public void setColumnCount(int columnCount)", "public boolean getUseDefaultMargins()", "public void setUseDefaultMargins(boolean useDefaultMargins)", "public int getAlignmentMode()", "public void setAlignmentMode(@AlignmentMode int alignmentMode)", "public boolean isRowOrderPreserved()", "public void setRowOrderPreserved(boolean rowOrderPreserved)", "public boolean isColumnOrderPreserved()", "public void setColumnOrderPreserved(boolean columnOrderPreserved)", "public Printer getPrinter()", "public void setPrinter(Printer printer)", " static int max2(int[] a, int valueIfEmpty)", " static T[] append(T[] a, T[] b)", " static Alignment getAlignment(int gravity, boolean horizontal)", "private int getDefaultMargin(View c, boolean horizontal, boolean leading)", "private int getDefaultMargin(View c, boolean isAtEdge, boolean horizontal, boolean leading)", "private int getDefaultMargin(View c, LayoutParams p, boolean horizontal, boolean leading)", " int getMargin1(View view, boolean horizontal, boolean leading)", "private int getMargin(View view, boolean horizontal, boolean leading)", "private int getTotalMargin(View child, boolean horizontal)", "private static boolean fits(int[] a, int value, int start, int end)", "private static void procrusteanFill(int[] a, int start, int end, int value)", "private static void setCellGroup(LayoutParams lp, int row, int rowSpan, int col, int colSpan)", "private static int clip(Interval minorRange, boolean minorWasDefined, int count)", "private void validateLayoutParams()", "private void invalidateStructure()", "private void invalidateValues()", "protected void onSetLayoutParams(View child, ViewGroup.LayoutParams layoutParams)", " final LayoutParams getLayoutParams(View c)", "private static void handleInvalidParams(String msg)", "private void checkLayoutParams(LayoutParams lp, boolean horizontal)", "protected boolean checkLayoutParams(ViewGroup.LayoutParams p)", "protected LayoutParams generateDefaultLayoutParams()", "public LayoutParams generateLayoutParams(AttributeSet attrs)", "protected LayoutParams generateLayoutParams(ViewGroup.LayoutParams lp)", "private void drawLine(Canvas graphics, int x1, int y1, int x2, int y2, Paint paint)", "protected void onDebugDrawMargins(Canvas canvas, Paint paint)", "protected void onDebugDraw(Canvas canvas)", "public void onViewAdded(View child)", "public void onViewRemoved(View child)", "protected void onChildVisibilityChanged(View child, int oldVisibility, int newVisibility)", "private int computeLayoutParamsHashCode()", "private void consistencyCheck()", "private void measureChildWithMargins2(View child, int parentWidthSpec, int parentHeightSpec, int childWidth, int childHeight)", "private void measureChildrenWithMargins(int widthSpec, int heightSpec, boolean firstPass)", " static int adjust(int measureSpec, int delta)", "protected void onMeasure(int widthSpec, int heightSpec)", "private int getMeasurement(View c, boolean horizontal)", " final int getMeasurementIncludingMargin(View c, boolean horizontal)", "public void requestLayout()", "protected void onLayout(boolean changed, int left, int top, int right, int bottom)", "public CharSequence getAccessibilityClassName()", "public static Spec spec(int start, int size, Alignment alignment, float weight)", "public static Spec spec(int start, Alignment alignment, float weight)", "public static Spec spec(int start, int size, float weight)", "public static Spec spec(int start, float weight)", "public static Spec spec(int start, int size, Alignment alignment)", "public static Spec spec(int start, Alignment alignment)", "public static Spec spec(int start, int size)", "public static Spec spec(int start)", "private static Alignment createSwitchingAlignment(final Alignment ltr, final Alignment rtl)", " static boolean canStretch(int flexibility)" ],
  "variableNames" : [ "HORIZONTAL", "VERTICAL", "UNDEFINED", "ALIGN_BOUNDS", "ALIGN_MARGINS", "MAX_SIZE", "DEFAULT_CONTAINER_MARGIN", "UNINITIALIZED_HASH", "LOG_PRINTER", "NO_PRINTER", "DEFAULT_ORIENTATION", "DEFAULT_COUNT", "DEFAULT_USE_DEFAULT_MARGINS", "DEFAULT_ORDER_PRESERVED", "DEFAULT_ALIGNMENT_MODE", "ORIENTATION", "ROW_COUNT", "COLUMN_COUNT", "USE_DEFAULT_MARGINS", "ALIGNMENT_MODE", "ROW_ORDER_PRESERVED", "COLUMN_ORDER_PRESERVED", "mHorizontalAxis", "mVerticalAxis", "mOrientation", "mUseDefaultMargins", "mAlignmentMode", "mDefaultGap", "mLastLayoutParamsHashCode", "mPrinter", "UNDEFINED_ALIGNMENT", "LEADING", "TRAILING", "TOP", "BOTTOM", "START", "END", "LEFT", "RIGHT", "CENTER", "BASELINE", "FILL", "INFLEXIBLE", "CAN_STRETCH" ]
}