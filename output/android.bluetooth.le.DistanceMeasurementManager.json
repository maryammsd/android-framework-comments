{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/bluetooth/le/DistanceMeasurementManager.java",
  "packageName" : "android.bluetooth.le",
  "className" : "DistanceMeasurementManager",
  "comment" : "\n * This class provides methods to perform distance measurement related operations. An application\n * can start distance measurement by using {@link\n * DistanceMeasurementManager#startMeasurementSession}.\n *\n * <p>Use {@link BluetoothAdapter#getDistanceMeasurementManager()} to get an instance of {@link\n * DistanceMeasurementManager}.\n *\n * @hide\n ",
  "links" : [ "android.bluetooth.BluetoothAdapter#getDistanceMeasurementManager()", "android.bluetooth.le.DistanceMeasurementManager#startMeasurementSession", "android.bluetooth.le.DistanceMeasurementManager" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSessionMap",
    "type" : "ConcurrentHashMap<BluetoothDevice, DistanceMeasurementSession>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBluetoothAdapter",
    "type" : "BluetoothAdapter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAttributionSource",
    "type" : "AttributionSource",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUuid",
    "type" : "ParcelUuid",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallbackWrapper",
    "type" : "IDistanceMeasurementCallback",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public List<DistanceMeasurementMethod> getSupportedMethods()",
    "returnType" : "List<DistanceMeasurementMethod>",
    "comment" : "\n     * Get the supported methods of distance measurement.\n     *\n     * <p>This can be used to check supported methods before start distance measurement.\n     *\n     * @return a list of {@link DistanceMeasurementMethod}\n     * @hide\n     ",
    "links" : [ "android.bluetooth.le.DistanceMeasurementMethod" ]
  }, {
    "name" : "public CancellationSignal startMeasurementSession(@NonNull DistanceMeasurementParams params, @NonNull Executor executor, @NonNull DistanceMeasurementSession.Callback callback)",
    "returnType" : "CancellationSignal",
    "comment" : "\n     * Start distance measurement and create a {@link DistanceMeasurementSession} for this\n     * operation. Once the session is started, a {@link DistanceMeasurementSession} object is\n     * provided through {@link\n     * DistanceMeasurementSession.Callback#onStarted(DistanceMeasurementSession)}. If starting a\n     * session fails, the failure is reported through {@link\n     * DistanceMeasurementSession.Callback#onStartFail(int)} with the failure reason.\n     *\n     * @param params parameters of this operation\n     * @param executor Executor to run callback\n     * @param callback callback to associate with the {@link DistanceMeasurementSession} that is\n     *     being started. The callback is registered by this function and unregistered when {@link\n     *     DistanceMeasurementSession.Callback#onStartFail(int)} or {@link\n     *     DistanceMeasurementSession .Callback#onStopped(DistanceMeasurementSession, int)}\n     * @return a CancellationSignal that may be used to cancel the starting of the {@link\n     *     DistanceMeasurementSession}\n     * @throws NullPointerException if any input parameter is null\n     * @throws IllegalStateException if the session is already registered\n     * @hide\n     ",
    "links" : [ "DistanceMeasurementSession.Callback#onStartFail(int)", "DistanceMeasurementSession.Callback#onStarted(DistanceMeasurementSession)", "android.bluetooth.le.DistanceMeasurementSession" ]
  }, {
    "name" : "public int getChannelSoundingMaxSupportedSecurityLevel(@NonNull BluetoothDevice remoteDevice)",
    "returnType" : "int",
    "comment" : "\n     * Get the maximum supported security level of channel sounding between the local device and a\n     * specific remote device.\n     *\n     * <p>See: https://bluetooth.com/specifications/specs/channel-sounding-cr-pr/\n     *\n     * @param remoteDevice remote device of channel sounding\n     * @return max supported security level, {@link ChannelSoundingParams#CS_SECURITY_LEVEL_UNKNOWN}\n     *     when Channel Sounding is not supported or encounters an internal error.\n     * @hide\n     ",
    "links" : [ "android.bluetooth.le.ChannelSoundingParams#CS_SECURITY_LEVEL_UNKNOWN" ]
  }, {
    "name" : "public int getLocalChannelSoundingMaxSupportedSecurityLevel()",
    "returnType" : "int",
    "comment" : "\n     * Get the maximum supported security level of channel sounding of the local device.\n     *\n     * <p>See: https://bluetooth.com/specifications/specs/channel-sounding-cr-pr/\n     *\n     * @return max supported security level, {@link ChannelSoundingParams#CS_SECURITY_LEVEL_UNKNOWN}\n     *     when Channel Sounding is not supported or encounters an internal error.\n     * @hide\n     ",
    "links" : [ "android.bluetooth.le.ChannelSoundingParams#CS_SECURITY_LEVEL_UNKNOWN" ]
  } ],
  "methodNames" : [ "public List<DistanceMeasurementMethod> getSupportedMethods()", "public CancellationSignal startMeasurementSession(@NonNull DistanceMeasurementParams params, @NonNull Executor executor, @NonNull DistanceMeasurementSession.Callback callback)", "public int getChannelSoundingMaxSupportedSecurityLevel(@NonNull BluetoothDevice remoteDevice)", "public int getLocalChannelSoundingMaxSupportedSecurityLevel()" ],
  "variableNames" : [ "TAG", "mSessionMap", "mBluetoothAdapter", "mAttributionSource", "mUuid", "mCallbackWrapper" ]
}