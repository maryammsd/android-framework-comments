{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/time/chrono/ThaiBuddhistChronology.java",
  "packageName" : "java.time.chrono",
  "className" : "ThaiBuddhistChronology",
  "comment" : "\n * The Thai Buddhist calendar system.\n * <p>\n * This chronology defines the rules of the Thai Buddhist calendar system.\n * This calendar system is primarily used in Thailand.\n * Dates are aligned such that {@code 2484-01-01 (Buddhist)} is {@code 1941-01-01 (ISO)}.\n * <p>\n * The fields are defined as follows:\n * <ul>\n * <li>era - There are two eras, the current 'Buddhist' (ERA_BE) and the previous era (ERA_BEFORE_BE).\n * <li>year-of-era - The year-of-era for the current era increases uniformly from the epoch at year one.\n *  For the previous era the year increases from one as time goes backwards.\n *  The value for the current era is equal to the ISO proleptic-year plus 543.\n * <li>proleptic-year - The proleptic year is the same as the year-of-era for the\n *  current era. For the previous era, years have zero, then negative values.\n *  The value is equal to the ISO proleptic-year plus 543.\n * <li>month-of-year - The ThaiBuddhist month-of-year exactly matches ISO.\n * <li>day-of-month - The ThaiBuddhist day-of-month exactly matches ISO.\n * <li>day-of-year - The ThaiBuddhist day-of-year exactly matches ISO.\n * <li>leap-year - The ThaiBuddhist leap-year pattern exactly matches ISO, such that the two calendars\n *  are never out of step.\n * </ul>\n *\n * @implSpec\n * This class is immutable and thread-safe.\n *\n * @since 1.8\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "INSTANCE",
    "type" : "ThaiBuddhistChronology",
    "comment" : "\n     * Singleton instance of the Buddhist chronology.\n     ",
    "links" : [ ]
  }, {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "\n     * Serialization version.\n     ",
    "links" : [ ]
  }, {
    "name" : "YEARS_DIFFERENCE",
    "type" : "int",
    "comment" : "\n     * Containing the offset to add to the ISO year.\n     ",
    "links" : [ ]
  }, {
    "name" : "ERA_NARROW_NAMES",
    "type" : "HashMap<String, String[]>",
    "comment" : "\n     * Narrow names for eras.\n     ",
    "links" : [ ]
  }, {
    "name" : "ERA_SHORT_NAMES",
    "type" : "HashMap<String, String[]>",
    "comment" : "\n     * Short names for eras.\n     ",
    "links" : [ ]
  }, {
    "name" : "ERA_FULL_NAMES",
    "type" : "HashMap<String, String[]>",
    "comment" : "\n     * Full names for eras.\n     ",
    "links" : [ ]
  }, {
    "name" : "FALLBACK_LANGUAGE",
    "type" : "String",
    "comment" : "\n     * Fallback language for the era names.\n     ",
    "links" : [ ]
  }, {
    "name" : "TARGET_LANGUAGE",
    "type" : "String",
    "comment" : "\n     * Language that has the era names.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String getId()",
    "returnType" : "String",
    "comment" : "\n     * Gets the ID of the chronology - 'ThaiBuddhist'.\n     * <p>\n     * The ID uniquely identifies the {@code Chronology}.\n     * It can be used to lookup the {@code Chronology} using {@link Chronology#of(String)}.\n     *\n     * @return the chronology ID - 'ThaiBuddhist'\n     * @see #getCalendarType()\n     ",
    "links" : [ "java.time.chrono.Chronology#of(String)" ]
  }, {
    "name" : "public String getCalendarType()",
    "returnType" : "String",
    "comment" : "\n     * Gets the calendar type of the underlying calendar system - 'buddhist'.\n     * <p>\n     * The calendar type is an identifier defined by the\n     * <em>Unicode Locale Data Markup Language (LDML)</em> specification.\n     * It can be used to lookup the {@code Chronology} using {@link Chronology#of(String)}.\n     * It can also be used as part of a locale, accessible via\n     * {@link Locale#getUnicodeLocaleType(String)} with the key 'ca'.\n     *\n     * @return the calendar system type - 'buddhist'\n     * @see #getId()\n     ",
    "links" : [ "java.time.chrono.Chronology#of(String)", "java.util.Locale#getUnicodeLocaleType(String)" ]
  }, {
    "name" : "public ThaiBuddhistDate date(Era era, int yearOfEra, int month, int dayOfMonth)",
    "returnType" : "ThaiBuddhistDate",
    "comment" : "\n     * Obtains a local date in Thai Buddhist calendar system from the\n     * era, year-of-era, month-of-year and day-of-month fields.\n     *\n     * @param era  the Thai Buddhist era, not null\n     * @param yearOfEra  the year-of-era\n     * @param month  the month-of-year\n     * @param dayOfMonth  the day-of-month\n     * @return the Thai Buddhist local date, not null\n     * @throws DateTimeException if unable to create the date\n     * @throws ClassCastException if the {@code era} is not a {@code ThaiBuddhistEra}\n     ",
    "links" : [ ]
  }, {
    "name" : "public ThaiBuddhistDate date(int prolepticYear, int month, int dayOfMonth)",
    "returnType" : "ThaiBuddhistDate",
    "comment" : "\n     * Obtains a local date in Thai Buddhist calendar system from the\n     * proleptic-year, month-of-year and day-of-month fields.\n     *\n     * @param prolepticYear  the proleptic-year\n     * @param month  the month-of-year\n     * @param dayOfMonth  the day-of-month\n     * @return the Thai Buddhist local date, not null\n     * @throws DateTimeException if unable to create the date\n     ",
    "links" : [ ]
  }, {
    "name" : "public ThaiBuddhistDate dateYearDay(Era era, int yearOfEra, int dayOfYear)",
    "returnType" : "ThaiBuddhistDate",
    "comment" : "\n     * Obtains a local date in Thai Buddhist calendar system from the\n     * era, year-of-era and day-of-year fields.\n     *\n     * @param era  the Thai Buddhist era, not null\n     * @param yearOfEra  the year-of-era\n     * @param dayOfYear  the day-of-year\n     * @return the Thai Buddhist local date, not null\n     * @throws DateTimeException if unable to create the date\n     * @throws ClassCastException if the {@code era} is not a {@code ThaiBuddhistEra}\n     ",
    "links" : [ ]
  }, {
    "name" : "public ThaiBuddhistDate dateYearDay(int prolepticYear, int dayOfYear)",
    "returnType" : "ThaiBuddhistDate",
    "comment" : "\n     * Obtains a local date in Thai Buddhist calendar system from the\n     * proleptic-year and day-of-year fields.\n     *\n     * @param prolepticYear  the proleptic-year\n     * @param dayOfYear  the day-of-year\n     * @return the Thai Buddhist local date, not null\n     * @throws DateTimeException if unable to create the date\n     ",
    "links" : [ ]
  }, {
    "name" : "public ThaiBuddhistDate dateEpochDay(long epochDay)",
    "returnType" : "ThaiBuddhistDate",
    "comment" : "\n     * Obtains a local date in the Thai Buddhist calendar system from the epoch-day.\n     *\n     * @param epochDay  the epoch day\n     * @return the Thai Buddhist local date, not null\n     * @throws DateTimeException if unable to create the date\n     ",
    "links" : [ ]
  }, {
    "name" : "public ThaiBuddhistDate dateNow()",
    "returnType" : "ThaiBuddhistDate",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ThaiBuddhistDate dateNow(ZoneId zone)",
    "returnType" : "ThaiBuddhistDate",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ThaiBuddhistDate dateNow(Clock clock)",
    "returnType" : "ThaiBuddhistDate",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ThaiBuddhistDate date(TemporalAccessor temporal)",
    "returnType" : "ThaiBuddhistDate",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ChronoLocalDateTime<ThaiBuddhistDate> localDateTime(TemporalAccessor temporal)",
    "returnType" : "ChronoLocalDateTime<ThaiBuddhistDate>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ChronoZonedDateTime<ThaiBuddhistDate> zonedDateTime(TemporalAccessor temporal)",
    "returnType" : "ChronoZonedDateTime<ThaiBuddhistDate>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ChronoZonedDateTime<ThaiBuddhistDate> zonedDateTime(Instant instant, ZoneId zone)",
    "returnType" : "ChronoZonedDateTime<ThaiBuddhistDate>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isLeapYear(long prolepticYear)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if the specified year is a leap year.\n     * <p>\n     * Thai Buddhist leap years occur exactly in line with ISO leap years.\n     * This method does not validate the year passed in, and only has a\n     * well-defined result for years in the supported range.\n     *\n     * @param prolepticYear  the proleptic-year to check, not validated for range\n     * @return true if the year is a leap year\n     ",
    "links" : [ ]
  }, {
    "name" : "public int prolepticYear(Era era, int yearOfEra)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ThaiBuddhistEra eraOf(int eraValue)",
    "returnType" : "ThaiBuddhistEra",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<Era> eras()",
    "returnType" : "List<Era>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ValueRange range(ChronoField field)",
    "returnType" : "ValueRange",
    "comment" : "-----------------------------------------------------------------------",
    "links" : [ ]
  }, {
    "name" : "public ThaiBuddhistDate resolveDate(Map<TemporalField, Long> fieldValues, ResolverStyle resolverStyle)",
    "returnType" : "ThaiBuddhistDate",
    "comment" : "-----------------------------------------------------------------------",
    "links" : [ ]
  }, {
    "name" : " Object writeReplace()",
    "returnType" : "Object",
    "comment" : "\n     * Writes the Chronology using a\n     * <a href=\"{@docRoot}/serialized-form.html#java.time.chrono.Ser\">dedicated serialized form</a>.\n     * @serialData\n     * <pre>\n     *  out.writeByte(1);     // identifies a Chronology\n     *  out.writeUTF(getId());\n     * </pre>\n     *\n     * @return the instance of {@code Ser}, not null\n     ",
    "links" : [ ]
  }, {
    "name" : "private void readObject(ObjectInputStream s) throws InvalidObjectException",
    "returnType" : "void",
    "comment" : "\n     * Defend against malicious streams.\n     *\n     * @param s the stream to read\n     * @throws InvalidObjectException always\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public String getId()", "public String getCalendarType()", "public ThaiBuddhistDate date(Era era, int yearOfEra, int month, int dayOfMonth)", "public ThaiBuddhistDate date(int prolepticYear, int month, int dayOfMonth)", "public ThaiBuddhistDate dateYearDay(Era era, int yearOfEra, int dayOfYear)", "public ThaiBuddhistDate dateYearDay(int prolepticYear, int dayOfYear)", "public ThaiBuddhistDate dateEpochDay(long epochDay)", "public ThaiBuddhistDate dateNow()", "public ThaiBuddhistDate dateNow(ZoneId zone)", "public ThaiBuddhistDate dateNow(Clock clock)", "public ThaiBuddhistDate date(TemporalAccessor temporal)", "public ChronoLocalDateTime<ThaiBuddhistDate> localDateTime(TemporalAccessor temporal)", "public ChronoZonedDateTime<ThaiBuddhistDate> zonedDateTime(TemporalAccessor temporal)", "public ChronoZonedDateTime<ThaiBuddhistDate> zonedDateTime(Instant instant, ZoneId zone)", "public boolean isLeapYear(long prolepticYear)", "public int prolepticYear(Era era, int yearOfEra)", "public ThaiBuddhistEra eraOf(int eraValue)", "public List<Era> eras()", "public ValueRange range(ChronoField field)", "public ThaiBuddhistDate resolveDate(Map<TemporalField, Long> fieldValues, ResolverStyle resolverStyle)", " Object writeReplace()", "private void readObject(ObjectInputStream s) throws InvalidObjectException" ],
  "variableNames" : [ "INSTANCE", "serialVersionUID", "YEARS_DIFFERENCE", "ERA_NARROW_NAMES", "ERA_SHORT_NAMES", "ERA_FULL_NAMES", "FALLBACK_LANGUAGE", "TARGET_LANGUAGE" ]
}