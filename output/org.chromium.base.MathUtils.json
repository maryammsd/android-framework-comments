{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/chromium/base/MathUtils.java",
  "packageName" : "org.chromium.base",
  "className" : "MathUtils",
  "comment" : " Contains various math utilities used throughout Chrome Mobile. ",
  "links" : [ ],
  "variables" : [ {
    "name" : "EPSILON",
    "type" : "float",
    "comment" : " A minimum difference to use when comparing floats for equality. ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static int clamp(int value, int a, int b)",
    "returnType" : "int",
    "comment" : "\n     * Returns the passed in value if it resides within the specified range (inclusive).  If not,\n     * it will return the closest boundary from the range.  The ordering of the boundary values does\n     * not matter.\n     *\n     * @param value The value to be compared against the range.\n     * @param a First boundary range value.\n     * @param b Second boundary range value.\n     * @return The passed in value if it is within the range, otherwise the closest boundary value.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static long clamp(long value, long a, long b)",
    "returnType" : "long",
    "comment" : "\n     * Returns the passed in value if it resides within the specified range (inclusive).  If not,\n     * it will return the closest boundary from the range.  The ordering of the boundary values does\n     * not matter.\n     *\n     * @param value The value to be compared against the range.\n     * @param a First boundary range value.\n     * @param b Second boundary range value.\n     * @return The passed in value if it is within the range, otherwise the closest boundary value.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static float clamp(float value, float a, float b)",
    "returnType" : "float",
    "comment" : "\n     * Returns the passed in value if it resides within the specified range (inclusive).  If not,\n     * it will return the closest boundary from the range.  The ordering of the boundary values does\n     * not matter.\n     *\n     * @param value The value to be compared against the range.\n     * @param a First boundary range value.\n     * @param b Second boundary range value.\n     * @return The passed in value if it is within the range, otherwise the closest boundary value.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int positiveModulo(int a, int b)",
    "returnType" : "int",
    "comment" : "\n     * Computes a%b that is positive. Note that result of % operation is not always positive.\n     * @return a%b >= 0 ? a%b : a%b + b\n     ",
    "links" : [ ]
  }, {
    "name" : "public static float interpolate(float value, float target, float speed)",
    "returnType" : "float",
    "comment" : "\n     * Moves {@code value} forward to {@code target} based on {@code speed}.\n     * @param value  The current value.\n     * @param target The target value.\n     * @param speed  How far to move {@code value} to {@code target}.  0 doesn't move it at all.  1\n     *               moves it to {@code target}.\n     * @return       The new interpolated value.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static float smoothstep(float t)",
    "returnType" : "float",
    "comment" : "\n     * Smooth a value between 0 and 1.\n     * @param t The value to smooth.\n     * @return  The smoothed value between 0 and 1.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static float scaleToFitTargetSize(int[] dimensions, int targetWidth, int targetHeight)",
    "returnType" : "float",
    "comment" : "\n     * Scales the provided dimension such that it is just large enough to fit\n     * the target width and height.\n     *\n     * @param dimensions The dimensions to scale\n     * @param targetWidth The target width\n     * @param targetHeight The target height\n     * @return The scale factor applied to dimensions\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int flipSignIf(int value, boolean flipSign)",
    "returnType" : "int",
    "comment" : "\n     * Flips {@code value} iff {@code flipSign} is {@code true}.\n     * @param value    The value to flip.\n     * @param flipSign Whether or not to flip the value.\n     * @return         {@code value} iff {@code flipSign} is {@code false}, otherwise negative\n     *                 {@code value}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static float flipSignIf(float value, boolean flipSign)",
    "returnType" : "float",
    "comment" : "\n     * Flips {@code value} iff {@code flipSign} is {@code true}.\n     * @param value    The value to flip.\n     * @param flipSign Whether or not to flip the value.\n     * @return         {@code value} iff {@code flipSign} is {@code false}, otherwise negative\n     *                 {@code value}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean areFloatsEqual(float f1, float f2)",
    "returnType" : "boolean",
    "comment" : "\n     * Determine if two floats are equal.\n     * @param f1 The first float to compare.\n     * @param f2 The second float to compare.\n     * @return True if the floats are equal.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static float distance(float x1, float y1, float x2, float y2)",
    "returnType" : "float",
    "comment" : "\n     * Compute the distance between two points.\n     * @param x1 X of point 1.\n     * @param y1 Y of point 1.\n     * @param x2 X of point 2.\n     * @param y2 Y of point 2.\n     * @return The distance between the two points.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static float distance(float distanceX, float distanceY)",
    "returnType" : "float",
    "comment" : "\n     * Compute the distance given two coordinate vectors\n     ",
    "links" : [ ]
  }, {
    "name" : "public static float map(float value, float fromStart, float fromStop, float toStart, float toStop)",
    "returnType" : "float",
    "comment" : "\n     * Maps {@code value} in [{@code fromStart}, {@code fromStop}] to\n     * [{@code toStart}, {@code toStop}].\n     *\n     * @param value A number in [{@code fromStart}, {@code fromStop}].\n     * @param fromStart Lower range of {@code value}.\n     * @param fromStop Upper range of {@code value}.\n     * @param toStart Lower range of mapped value.\n     * @param toStop Upper range of mapped value.\n     * @return mapped value.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static double roundTwoDecimalPlaces(double value)",
    "returnType" : "double",
    "comment" : "\n     * Round the given value to two decimal places.\n     *\n     * @param value double The value to round.\n     * @return double The value rounded to two decimal places.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static int clamp(int value, int a, int b)", "public static long clamp(long value, long a, long b)", "public static float clamp(float value, float a, float b)", "public static int positiveModulo(int a, int b)", "public static float interpolate(float value, float target, float speed)", "public static float smoothstep(float t)", "public static float scaleToFitTargetSize(int[] dimensions, int targetWidth, int targetHeight)", "public static int flipSignIf(int value, boolean flipSign)", "public static float flipSignIf(float value, boolean flipSign)", "public static boolean areFloatsEqual(float f1, float f2)", "public static float distance(float x1, float y1, float x2, float y2)", "public static float distance(float distanceX, float distanceY)", "public static float map(float value, float fromStart, float fromStop, float toStart, float toStop)", "public static double roundTwoDecimalPlaces(double value)" ],
  "variableNames" : [ "EPSILON" ]
}