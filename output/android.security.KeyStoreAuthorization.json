{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/security/KeyStoreAuthorization.java",
  "packageName" : "android.security",
  "className" : "KeyStoreAuthorization",
  "comment" : "\n * @hide This is the client side for IKeystoreAuthorization AIDL.\n * It shall only be used by biometric authentication providers and Gatekeeper.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SYSTEM_ERROR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sInstance",
    "type" : "KeyStoreAuthorization",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static KeyStoreAuthorization getInstance()",
    "returnType" : "KeyStoreAuthorization",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private IKeystoreAuthorization getService()",
    "returnType" : "IKeystoreAuthorization",
    "comment" : "\n     * @return an instance of IKeystoreAuthorization\n     ",
    "links" : [ ]
  }, {
    "name" : "public int addAuthToken(@NonNull HardwareAuthToken authToken)",
    "returnType" : "int",
    "comment" : "\n     * Adds an auth token to keystore2.\n     *\n     * @param authToken created by Android authenticators.\n     * @return 0 if successful or {@code ResponseCode.SYSTEM_ERROR}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int addAuthToken(@NonNull byte[] authToken)",
    "returnType" : "int",
    "comment" : "\n     * Add an auth token to Keystore 2.0 in the legacy serialized auth token format.\n     * @param authToken\n     * @return 0 if successful or a {@code ResponseCode}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int onDeviceUnlocked(int userId, @Nullable byte[] password)",
    "returnType" : "int",
    "comment" : "\n     * Tells Keystore that the device is now unlocked for a user.\n     *\n     * @param userId - the user's Android user ID\n     * @param password - a secret derived from the user's synthetic password, if the unlock method\n     *                   is LSKF (or equivalent) and thus has made the synthetic password available\n     * @return 0 if successful or a {@code ResponseCode}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int onDeviceLocked(int userId, @NonNull long[] unlockingSids, boolean weakUnlockEnabled)",
    "returnType" : "int",
    "comment" : "\n     * Tells Keystore that the device is now locked for a user.\n     *\n     * @param userId - the user's Android user ID\n     * @param unlockingSids - list of biometric SIDs with which the device may be unlocked again\n     * @param weakUnlockEnabled - true if non-strong biometric or trust agent unlock is enabled\n     * @return 0 if successful or a {@code ResponseCode}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getLastAuthTime(long userId, @HardwareAuthenticatorType int[] authenticatorTypes)",
    "returnType" : "long",
    "comment" : "\n     * Gets the last authentication time of the given user and authenticators.\n     *\n     * @param userId user id\n     * @param authenticatorTypes an array of {@link HardwareAuthenticatorType}.\n     * @return the last authentication time or\n     * {@link BiometricConstants#BIOMETRIC_NO_AUTHENTICATION}.\n     ",
    "links" : [ "android.hardware.security.keymint.HardwareAuthenticatorType", "android.hardware.biometrics.BiometricConstants#BIOMETRIC_NO_AUTHENTICATION" ]
  } ],
  "methodNames" : [ "public static KeyStoreAuthorization getInstance()", "private IKeystoreAuthorization getService()", "public int addAuthToken(@NonNull HardwareAuthToken authToken)", "public int addAuthToken(@NonNull byte[] authToken)", "public int onDeviceUnlocked(int userId, @Nullable byte[] password)", "public int onDeviceLocked(int userId, @NonNull long[] unlockingSids, boolean weakUnlockEnabled)", "public long getLastAuthTime(long userId, @HardwareAuthenticatorType int[] authenticatorTypes)" ],
  "variableNames" : [ "TAG", "SYSTEM_ERROR", "sInstance" ]
}