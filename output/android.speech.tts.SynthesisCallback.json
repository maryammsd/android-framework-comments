{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/speech/tts/SynthesisCallback.java",
  "packageName" : "android.speech.tts",
  "className" : "SynthesisCallback",
  "comment" : "\n * A callback to return speech data synthesized by a text to speech engine.\n *\n * The engine can provide streaming audio by calling\n * {@link #start}, then {@link #audioAvailable} until all audio has been provided, then finally\n * {@link #done}.\n *\n * {@link #error} can be called at any stage in the synthesis process to\n * indicate that an error has occurred, but if the call is made after a call\n * to {@link #done}, it might be discarded.\n *\n * {@link #done} must be called at the end of synthesis, regardless of errors.\n *\n * All methods can be only called on the synthesis thread.\n ",
  "links" : [ "#done", "#start", "#error", "#audioAvailable" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " int getMaxBufferSize()",
    "returnType" : "int",
    "comment" : "\n     * @return the maximum number of bytes that the TTS engine can pass in a single call of {@link\n     *     #audioAvailable}. Calls to {@link #audioAvailable} with data lengths larger than this\n     *     value will not succeed.\n     ",
    "links" : [ "#audioAvailable" ]
  }, {
    "name" : " int start(int sampleRateInHz, @SupportedAudioFormat int audioFormat, @IntRange(from = 1, to = 2) int channelCount)",
    "returnType" : "int",
    "comment" : "\n   * The service should call this when it starts to synthesize audio for this request.\n   *\n   * <p>This method should only be called on the synthesis thread, while in {@link\n   * TextToSpeechService#onSynthesizeText}.\n   *\n   * @param sampleRateInHz Sample rate in HZ of the generated audio.\n   * @param audioFormat Audio format of the generated audio. Must be one of {@link\n   *     AudioFormat#ENCODING_PCM_8BIT} or {@link AudioFormat#ENCODING_PCM_16BIT}. Can also be\n   *     {@link AudioFormat#ENCODING_PCM_FLOAT} when targetting Android N and above.\n   * @param channelCount The number of channels. Must be {@code 1} or {@code 2}.\n   * @return {@link android.speech.tts.TextToSpeech#SUCCESS}, {@link\n   *     android.speech.tts.TextToSpeech#ERROR} or {@link android.speech.tts.TextToSpeech#STOPPED}.\n   ",
    "links" : [ "android.speech.tts.TextToSpeech#STOPPED", "android.media.AudioFormat#ENCODING_PCM_8BIT", "android.media.AudioFormat#ENCODING_PCM_FLOAT", "android.speech.tts.TextToSpeech#SUCCESS", "android.speech.tts.TextToSpeech#ERROR", "android.media.AudioFormat#ENCODING_PCM_16BIT", "android.speech.tts.TextToSpeechService#onSynthesizeText" ]
  }, {
    "name" : " int audioAvailable(byte[] buffer, int offset, int length)",
    "returnType" : "int",
    "comment" : "\n   * The service should call this method when synthesized audio is ready for consumption.\n   *\n   * <p>This method should only be called on the synthesis thread, while in {@link\n   * TextToSpeechService#onSynthesizeText}.\n   *\n   * @param buffer The generated audio data. This method will not hold on to {@code buffer}, so the\n   *     caller is free to modify it after this method returns.\n   * @param offset The offset into {@code buffer} where the audio data starts.\n   * @param length The number of bytes of audio data in {@code buffer}. This must be less than or\n   *     equal to the return value of {@link #getMaxBufferSize}.\n   * @return {@link android.speech.tts.TextToSpeech#SUCCESS}, {@link\n   *     android.speech.tts.TextToSpeech#ERROR} or {@link android.speech.tts.TextToSpeech#STOPPED}.\n   ",
    "links" : [ "android.speech.tts.TextToSpeech#STOPPED", "#getMaxBufferSize", "android.speech.tts.TextToSpeech#SUCCESS", "android.speech.tts.TextToSpeech#ERROR", "android.speech.tts.TextToSpeechService#onSynthesizeText" ]
  }, {
    "name" : " int done()",
    "returnType" : "int",
    "comment" : "\n   * The service should call this method when all the synthesized audio for a request has been\n   * passed to {@link #audioAvailable}.\n   *\n   * <p>This method should only be called on the synthesis thread, while in {@link\n   * TextToSpeechService#onSynthesizeText}.\n   *\n   * <p>This method has to be called if {@link #start} and/or {@link #error} was called.\n   *\n   * @return {@link android.speech.tts.TextToSpeech#SUCCESS}, {@link\n   *     android.speech.tts.TextToSpeech#ERROR} or {@link android.speech.tts.TextToSpeech#STOPPED}.\n   ",
    "links" : [ "android.speech.tts.TextToSpeech#STOPPED", "android.speech.tts.TextToSpeech#SUCCESS", "#start", "#error", "android.speech.tts.TextToSpeech#ERROR", "#audioAvailable", "android.speech.tts.TextToSpeechService#onSynthesizeText" ]
  }, {
    "name" : " void error()",
    "returnType" : "void",
    "comment" : "\n     * The service should call this method if the speech synthesis fails.\n     *\n     * <p>This method should only be called on the synthesis thread, while in {@link\n     * TextToSpeechService#onSynthesizeText}.\n     ",
    "links" : [ "android.speech.tts.TextToSpeechService#onSynthesizeText" ]
  }, {
    "name" : " void error(@TextToSpeech.Error int errorCode)",
    "returnType" : "void",
    "comment" : "\n   * The service should call this method if the speech synthesis fails.\n   *\n   * <p>This method should only be called on the synthesis thread, while in {@link\n   * TextToSpeechService#onSynthesizeText}.\n   *\n   * @param errorCode Error code to pass to the client. One of the ERROR_ values from {@link\n   *     android.speech.tts.TextToSpeech}\n   ",
    "links" : [ "android.speech.tts.TextToSpeech", "android.speech.tts.TextToSpeechService#onSynthesizeText" ]
  }, {
    "name" : " boolean hasStarted()",
    "returnType" : "boolean",
    "comment" : "\n     * Check if {@link #start} was called or not.\n     *\n     * <p>This method should only be called on the synthesis thread, while in {@link\n     * TextToSpeechService#onSynthesizeText}.\n     *\n     * <p>Useful for checking if a fallback from network request is possible.\n     ",
    "links" : [ "#start", "android.speech.tts.TextToSpeechService#onSynthesizeText" ]
  }, {
    "name" : " boolean hasFinished()",
    "returnType" : "boolean",
    "comment" : "\n     * Check if {@link #done} was called or not.\n     *\n     * <p>This method should only be called on the synthesis thread, while in {@link\n     * TextToSpeechService#onSynthesizeText}.\n     *\n     * <p>Useful for checking if a fallback from network request is possible.\n     ",
    "links" : [ "#done", "android.speech.tts.TextToSpeechService#onSynthesizeText" ]
  }, {
    "name" : " void rangeStart(int markerInFrames, int start, int end)",
    "returnType" : "void",
    "comment" : "\n     * The service may call this method to provide timing information about the spoken text.\n     *\n     * <p>Calling this method means that at the given audio frame, the given range of the input is\n     * about to be spoken. If this method is called the client will receive a callback on the\n     * listener ({@link UtteranceProgressListener#onRangeStart}) at the moment that frame has been\n     * reached by the playback head.\n     *\n     * <p>This information can be used by the client, for example, to highlight ranges of the text\n     * while it is spoken.\n     *\n     * <p>The markerInFrames is a frame index into the audio for this synthesis request, i.e. into\n     * the concatenation of the audio bytes sent to audioAvailable for this synthesis request. The\n     * definition of a frame depends on the format given by {@link #start}. See {@link AudioFormat}\n     * for more information.\n     *\n     * <p>This method should only be called on the synthesis thread, while in {@link\n     * TextToSpeechService#onSynthesizeText}.\n     *\n     * @param markerInFrames The position in frames in the audio where this range is spoken.\n     * @param start The start index of the range in the input text.\n     * @param end The end index (exclusive) of the range in the input text.\n     ",
    "links" : [ "android.speech.tts.UtteranceProgressListener#onRangeStart", "android.media.AudioFormat", "#start", "android.speech.tts.TextToSpeechService#onSynthesizeText" ]
  } ],
  "methodNames" : [ " int getMaxBufferSize()", " int start(int sampleRateInHz, @SupportedAudioFormat int audioFormat, @IntRange(from = 1, to = 2) int channelCount)", " int audioAvailable(byte[] buffer, int offset, int length)", " int done()", " void error()", " void error(@TextToSpeech.Error int errorCode)", " boolean hasStarted()", " boolean hasFinished()", " void rangeStart(int markerInFrames, int start, int end)" ],
  "variableNames" : [ ]
}