{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/content/pm/parsing/FrameworkParsingPackageUtils.java",
  "packageName" : "android.content.pm.parsing",
  "className" : "FrameworkParsingPackageUtils",
  "comment" : " @hide ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_FILE_NAME_SIZE",
    "type" : "int",
    "comment" : "\n     * For those names would be used as a part of the file name. Limits size to 223 and reserves 32\n     * for the OS.\n     ",
    "links" : [ ]
  }, {
    "name" : "PARSE_IGNORE_OVERLAY_REQUIRED_SYSTEM_PROPERTY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PARSE_APK_IN_APEX",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static String validateName(String name, boolean requireSeparator, boolean requireFilename)",
    "returnType" : "String",
    "comment" : "\n     * Check if the given name is valid.\n     *\n     * @param name The name to check.\n     * @param requireSeparator {@code true} if the name requires containing a separator at least.\n     * @param requireFilename {@code true} to apply file name validation to the given name. It also\n     *                        limits length of the name to the {@link #MAX_FILE_NAME_SIZE}.\n     * @return Success if it's valid.\n     ",
    "links" : [ "#MAX_FILE_NAME_SIZE" ]
  }, {
    "name" : "public static ParseResult validateName(ParseInput input, String name, boolean requireSeparator, boolean requireFilename)",
    "returnType" : "ParseResult",
    "comment" : "\n     * @see #validateName(String, boolean, boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public static PublicKey parsePublicKey(final String encodedPublicKey)",
    "returnType" : "PublicKey",
    "comment" : "\n     * @return {@link PublicKey} of a given encoded public key.\n     ",
    "links" : [ "java.security.PublicKey" ]
  }, {
    "name" : "public static PublicKey parsePublicKey(final byte[] publicKey)",
    "returnType" : "PublicKey",
    "comment" : "\n     * @return {@link PublicKey} of the given byte array of a public key.\n     ",
    "links" : [ "java.security.PublicKey" ]
  }, {
    "name" : "public static boolean checkRequiredSystemProperties(@Nullable String rawPropNames, @Nullable String rawPropValues)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if both the property name and value are empty or if the given system\n     * property is set to the specified value. Properties can be one or more, and if properties are\n     * more than one, they must be separated by comma, and count of names and values must be equal,\n     * and also every given system property must be set to the corresponding value.\n     * In all other cases, returns {@code false}\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ParseResult<SigningDetails> getSigningDetails(ParseInput input, String baseCodePath, boolean skipVerify, boolean isStaticSharedLibrary, @NonNull SigningDetails existingSigningDetails, int targetSdk)",
    "returnType" : "ParseResult<SigningDetails>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static ParseResult<Integer> computeMinSdkVersion(@IntRange(from = 1) int minVers, @Nullable String minCode, @IntRange(from = 1) int platformSdkVersion, @NonNull String[] platformSdkCodenames, @NonNull ParseInput input)",
    "returnType" : "ParseResult<Integer>",
    "comment" : "\n     * Computes the minSdkVersion to use at runtime. If the package is not compatible with this\n     * platform, populates {@code outError[0]} with an error message.\n     * <p>\n     * If {@code minCode} is not specified, e.g. the value is {@code null}, then behavior varies\n     * based on the {@code platformSdkVersion}:\n     * <ul>\n     * <li>If the platform SDK version is greater than or equal to the\n     * {@code minVers}, returns the {@code mniVers} unmodified.\n     * <li>Otherwise, returns -1 to indicate that the package is not\n     * compatible with this platform.\n     * </ul>\n     * <p>\n     * Otherwise, the behavior varies based on whether the current platform\n     * is a pre-release version, e.g. the {@code platformSdkCodenames} array\n     * has length > 0:\n     * <ul>\n     * <li>If this is a pre-release platform and the value specified by\n     * {@code targetCode} is contained within the array of allowed pre-release\n     * codenames, this method will return {@link Build.VERSION_CODES#CUR_DEVELOPMENT}.\n     * <li>If this is a released platform, this method will return -1 to\n     * indicate that the package is not compatible with this platform.\n     * </ul>\n     *\n     * @param minVers              minSdkVersion number, if specified in the application manifest,\n     *                             or 1 otherwise\n     * @param minCode              minSdkVersion code, if specified in the application manifest, or\n     *                             {@code null} otherwise\n     * @param platformSdkVersion   platform SDK version number, typically Build.VERSION.SDK_INT\n     * @param platformSdkCodenames array of allowed prerelease SDK codenames for this platform\n     * @return the minSdkVersion to use at runtime if successful\n     ",
    "links" : [ "Build.VERSION_CODES#CUR_DEVELOPMENT" ]
  }, {
    "name" : "public static ParseResult<Integer> computeTargetSdkVersion(@IntRange(from = 0) int targetVers, @Nullable String targetCode, @NonNull String[] platformSdkCodenames, @NonNull ParseInput input, boolean allowUnknownCodenames)",
    "returnType" : "ParseResult<Integer>",
    "comment" : "\n     * Computes the targetSdkVersion to use at runtime. If the package is not compatible with this\n     * platform, populates {@code outError[0]} with an error message.\n     * <p>\n     * If {@code targetCode} is not specified, e.g. the value is {@code null}, then the {@code\n     * targetVers} will be returned unmodified.\n     * <p>\n     * When {@code allowUnknownCodenames} is false, the behavior varies based on whether the\n     * current platform is a pre-release version, e.g. the {@code platformSdkCodenames} array has\n     * length > 0:\n     * <ul>\n     * <li>If this is a pre-release platform and the value specified by\n     * {@code targetCode} is contained within the array of allowed pre-release\n     * codenames, this method will return {@link Build.VERSION_CODES#CUR_DEVELOPMENT}.\n     * <li>If this is a released platform, this method will return -1 to\n     * indicate that the package is not compatible with this platform.\n     * </ul>\n     * <p>\n     * When {@code allowUnknownCodenames} is true, any codename that is not known (presumed to be\n     * a codename announced after the build of the current device) is allowed and this method will\n     * return {@link Build.VERSION_CODES#CUR_DEVELOPMENT}.\n     *\n     * @param targetVers            targetSdkVersion number, if specified in the application\n     *                              manifest, or 0 otherwise\n     * @param targetCode            targetSdkVersion code, if specified in the application manifest,\n     *                              or {@code null} otherwise\n     * @param platformSdkCodenames  array of allowed pre-release SDK codenames for this platform\n     * @param allowUnknownCodenames allow unknown codenames, if true this method will accept unknown\n     *                              (presumed to be future) codenames\n     * @return the targetSdkVersion to use at runtime if successful\n     ",
    "links" : [ "Build.VERSION_CODES#CUR_DEVELOPMENT" ]
  }, {
    "name" : "public static ParseResult<Integer> computeMaxSdkVersion(@IntRange(from = 0) int maxVers, @IntRange(from = 1) int platformSdkVersion, @NonNull ParseInput input)",
    "returnType" : "ParseResult<Integer>",
    "comment" : "\n     * Computes the maxSdkVersion. If the package is not compatible with this platform, populates\n     * {@code outError[0]} with an error message.\n     * <p>\n     * {@code maxVers} is compared against {@code platformSdkVersion}. If {@code maxVers} is less\n     * than the {@code platformSdkVersion} then populates {@code outError[0]} with an error message.\n     * Otherwise, it returns {@code maxVers} unmodified.\n     *\n     * @param maxVers maxSdkVersion number, if specified in the application manifest, or {@code\n     *                Integer.MAX_VALUE} otherwise\n     * @param platformSdkVersion   platform SDK version number, typically Build.VERSION.SDK_INT\n     * @return the maxSdkVersion that was recognised or an error if the condition is not satisfied\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean matchTargetCode(@NonNull String[] codeNames, @NonNull String targetCode)",
    "returnType" : "boolean",
    "comment" : "\n     * Matches a given {@code targetCode} against a set of release codeNames. Target codes can\n     * either be of the form {@code [codename]}\" (e.g {@code \"Q\"}) or of the form {@code\n     * [codename].[fingerprint]} (e.g {@code \"Q.cafebc561\"}).\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static String validateName(String name, boolean requireSeparator, boolean requireFilename)", "public static ParseResult validateName(ParseInput input, String name, boolean requireSeparator, boolean requireFilename)", "public static PublicKey parsePublicKey(final String encodedPublicKey)", "public static PublicKey parsePublicKey(final byte[] publicKey)", "public static boolean checkRequiredSystemProperties(@Nullable String rawPropNames, @Nullable String rawPropValues)", "public static ParseResult<SigningDetails> getSigningDetails(ParseInput input, String baseCodePath, boolean skipVerify, boolean isStaticSharedLibrary, @NonNull SigningDetails existingSigningDetails, int targetSdk)", "public static ParseResult<Integer> computeMinSdkVersion(@IntRange(from = 1) int minVers, @Nullable String minCode, @IntRange(from = 1) int platformSdkVersion, @NonNull String[] platformSdkCodenames, @NonNull ParseInput input)", "public static ParseResult<Integer> computeTargetSdkVersion(@IntRange(from = 0) int targetVers, @Nullable String targetCode, @NonNull String[] platformSdkCodenames, @NonNull ParseInput input, boolean allowUnknownCodenames)", "public static ParseResult<Integer> computeMaxSdkVersion(@IntRange(from = 0) int maxVers, @IntRange(from = 1) int platformSdkVersion, @NonNull ParseInput input)", "private static boolean matchTargetCode(@NonNull String[] codeNames, @NonNull String targetCode)" ],
  "variableNames" : [ "TAG", "MAX_FILE_NAME_SIZE", "PARSE_IGNORE_OVERLAY_REQUIRED_SYSTEM_PROPERTY", "PARSE_APK_IN_APEX" ]
}