{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/concurrent/atomic/LongAccumulator.java",
  "packageName" : "java.util.concurrent.atomic",
  "className" : "LongAccumulator",
  "comment" : "\n * One or more variables that together maintain a running {@code long}\n * value updated using a supplied function.  When updates (method\n * {@link #accumulate}) are contended across threads, the set of variables\n * may grow dynamically to reduce contention.  Method {@link #get}\n * (or, equivalently, {@link #longValue}) returns the current value\n * across the variables maintaining updates.\n *\n * <p>This class is usually preferable to {@link AtomicLong} when\n * multiple threads update a common value that is used for purposes such\n * as collecting statistics, not for fine-grained synchronization\n * control.  Under low update contention, the two classes have similar\n * characteristics. But under high contention, expected throughput of\n * this class is significantly higher, at the expense of higher space\n * consumption.\n *\n * <p>The order of accumulation within or across threads is not\n * guaranteed and cannot be depended upon, so this class is only\n * applicable to functions for which the order of accumulation does\n * not matter. The supplied accumulator function should be\n * side-effect-free, since it may be re-applied when attempted updates\n * fail due to contention among threads. For predictable results, the\n * accumulator function should be associative and commutative. The\n * function is applied with an existing value (or identity) as one\n * argument, and a given update as the other argument.  For example,\n * to maintain a running maximum value, you could supply {@code\n * Long::max} along with {@code Long.MIN_VALUE} as the identity.\n *\n * <p>Class {@link LongAdder} provides analogs of the functionality of\n * this class for the common special case of maintaining counts and\n * sums.  The call {@code new LongAdder()} is equivalent to {@code new\n * LongAccumulator((x, y) -> x + y, 0L)}.\n *\n * <p>This class extends {@link Number}, but does <em>not</em> define\n * methods such as {@code equals}, {@code hashCode} and {@code\n * compareTo} because instances are expected to be mutated, and so are\n * not useful as collection keys.\n *\n * @since 1.8\n * @author Doug Lea\n ",
  "links" : [ "java.util.concurrent.atomic.AtomicLong", "java.util.concurrent.atomic.LongAdder", "#get", "Number", "#accumulate", "#longValue" ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "function",
    "type" : "LongBinaryOperator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "identity",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void accumulate(long x)",
    "returnType" : "void",
    "comment" : "\n     * Updates with the given value.\n     *\n     * @param x the value\n     ",
    "links" : [ ]
  }, {
    "name" : "public long get()",
    "returnType" : "long",
    "comment" : "\n     * Returns the current value.  The returned value is <em>NOT</em>\n     * an atomic snapshot; invocation in the absence of concurrent\n     * updates returns an accurate result, but concurrent updates that\n     * occur while the value is being calculated might not be\n     * incorporated.\n     *\n     * @return the current value\n     ",
    "links" : [ ]
  }, {
    "name" : "public void reset()",
    "returnType" : "void",
    "comment" : "\n     * Resets variables maintaining updates to the identity value.\n     * This method may be a useful alternative to creating a new\n     * updater, but is only effective if there are no concurrent\n     * updates.  Because this method is intrinsically racy, it should\n     * only be used when it is known that no threads are concurrently\n     * updating.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getThenReset()",
    "returnType" : "long",
    "comment" : "\n     * Equivalent in effect to {@link #get} followed by {@link\n     * #reset}. This method may apply for example during quiescent\n     * points between multithreaded computations.  If there are\n     * updates concurrent with this method, the returned value is\n     * <em>not</em> guaranteed to be the final value occurring before\n     * the reset.\n     *\n     * @return the value before reset\n     ",
    "links" : [ "#get", "#reset" ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns the String representation of the current value.\n     * @return the String representation of the current value\n     ",
    "links" : [ ]
  }, {
    "name" : "public long longValue()",
    "returnType" : "long",
    "comment" : "\n     * Equivalent to {@link #get}.\n     *\n     * @return the current value\n     ",
    "links" : [ "#get" ]
  }, {
    "name" : "public int intValue()",
    "returnType" : "int",
    "comment" : "\n     * Returns the {@linkplain #get current value} as an {@code int}\n     * after a narrowing primitive conversion.\n     ",
    "links" : [ ]
  }, {
    "name" : "public float floatValue()",
    "returnType" : "float",
    "comment" : "\n     * Returns the {@linkplain #get current value} as a {@code float}\n     * after a widening primitive conversion.\n     ",
    "links" : [ ]
  }, {
    "name" : "public double doubleValue()",
    "returnType" : "double",
    "comment" : "\n     * Returns the {@linkplain #get current value} as a {@code double}\n     * after a widening primitive conversion.\n     ",
    "links" : [ ]
  }, {
    "name" : "private Object writeReplace()",
    "returnType" : "Object",
    "comment" : "\n     * Returns a\n     * <a href=\"{@docRoot}/serialized-form.html#java.util.concurrent.atomic.LongAccumulator.SerializationProxy\">\n     * SerializationProxy</a>\n     * representing the state of this instance.\n     *\n     * @return a {@link SerializationProxy}\n     * representing the state of this instance\n     ",
    "links" : [ "SerializationProxy" ]
  }, {
    "name" : "private void readObject(java.io.ObjectInputStream s) throws java.io.InvalidObjectException",
    "returnType" : "void",
    "comment" : "\n     * @param s the stream\n     * @throws java.io.InvalidObjectException always\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void accumulate(long x)", "public long get()", "public void reset()", "public long getThenReset()", "public String toString()", "public long longValue()", "public int intValue()", "public float floatValue()", "public double doubleValue()", "private Object writeReplace()", "private void readObject(java.io.ObjectInputStream s) throws java.io.InvalidObjectException" ],
  "variableNames" : [ "serialVersionUID", "function", "identity" ]
}