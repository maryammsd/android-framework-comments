{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/widget/MultiAutoCompleteTextView.java",
  "packageName" : "android.widget",
  "className" : "MultiAutoCompleteTextView",
  "comment" : "",
  "variables" : [ {
    "name" : "mTokenizer",
    "type" : "Tokenizer",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " void finishInit()",
    "returnType" : "void",
    "comment" : " package ",
    "links" : [ ]
  }, {
    "name" : "public void setTokenizer(Tokenizer t)",
    "returnType" : "void",
    "comment" : "\n     * Sets the Tokenizer that will be used to determine the relevant\n     * range of the text where the user is typing.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void performFiltering(CharSequence text, int keyCode)",
    "returnType" : "void",
    "comment" : "\n     * Instead of filtering on the entire contents of the edit box,\n     * this subclass method filters on the range from\n     * {@link Tokenizer#findTokenStart} to {@link #getSelectionEnd}\n     * if the length of that range meets or exceeds {@link #getThreshold}.\n     ",
    "links" : [ "#getThreshold", "#getSelectionEnd", "#findTokenStart" ]
  }, {
    "name" : "public boolean enoughToFilter()",
    "returnType" : "boolean",
    "comment" : "\n     * Instead of filtering whenever the total length of the text\n     * exceeds the threshhold, this subclass filters only when the\n     * length of the range from\n     * {@link Tokenizer#findTokenStart} to {@link #getSelectionEnd}\n     * meets or exceeds {@link #getThreshold}.\n     ",
    "links" : [ "#getThreshold", "#getSelectionEnd", "#findTokenStart" ]
  }, {
    "name" : "public void performValidation()",
    "returnType" : "void",
    "comment" : "\n     * Instead of validating the entire text, this subclass method validates\n     * each token of the text individually.  Empty tokens are removed.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void performFiltering(CharSequence text, int start, int end, int keyCode)",
    "returnType" : "void",
    "comment" : "\n     * <p>Starts filtering the content of the drop down list. The filtering\n     * pattern is the specified range of text from the edit box. Subclasses may\n     * override this method to filter with a different pattern, for\n     * instance a smaller substring of <code>text</code>.</p>\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void replaceText(CharSequence text)",
    "returnType" : "void",
    "comment" : "\n     * <p>Performs the text completion by replacing the range from\n     * {@link Tokenizer#findTokenStart} to {@link #getSelectionEnd} by the\n     * the result of passing <code>text</code> through\n     * {@link Tokenizer#terminateToken}.\n     * In addition, the replaced region will be marked as an AutoText\n     * substition so that if the user immediately presses DEL, the\n     * completion will be undone.\n     * Subclasses may override this method to do some different\n     * insertion of the content into the edit box.</p>\n     *\n     * @param text the selected suggestion in the drop down list\n     ",
    "links" : [ "#getSelectionEnd", "#findTokenStart", "#terminateToken" ]
  }, {
    "name" : "public CharSequence getAccessibilityClassName()",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "mTokenizer" ],
  "methodNames" : [ " void finishInit()", "public void setTokenizer(Tokenizer t)", "protected void performFiltering(CharSequence text, int keyCode)", "public boolean enoughToFilter()", "public void performValidation()", "protected void performFiltering(CharSequence text, int start, int end, int keyCode)", "protected void replaceText(CharSequence text)", "public CharSequence getAccessibilityClassName()" ]
}