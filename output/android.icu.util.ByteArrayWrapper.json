{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/util/ByteArrayWrapper.java",
  "packageName" : "android.icu.util",
  "className" : "ByteArrayWrapper",
  "comment" : "\n * A simple utility class to wrap a byte array.\n * <p>\n * Generally passed as an argument object into a method. The method takes\n * responsibility of writing into the internal byte array and increasing its\n * size when necessary.\n *\n * @author syn wee\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "bytes",
    "type" : "byte[]",
    "comment" : "\n     * Internal byte array.\n     ",
    "links" : [ ]
  }, {
    "name" : "size",
    "type" : "int",
    "comment" : "\n     * Size of the internal byte array used.\n     * Different from bytes.length, size will be &lt;= bytes.length.\n     * Semantics of size is similar to java.util.Vector.size().\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public ByteArrayWrapper ensureCapacity(int capacity)",
    "returnType" : "ByteArrayWrapper",
    "comment" : "\n     * Ensure that the internal byte array is at least of length capacity.\n     * If the byte array is null or its length is less than capacity, a new\n     * byte array of length capacity will be allocated.\n     * The contents of the array (between 0 and size) remain unchanged.\n     * @param capacity minimum length of internal byte array.\n     * @return this ByteArrayWrapper\n     ",
    "links" : [ ]
  }, {
    "name" : "public final ByteArrayWrapper set(byte[] src, int start, int limit)",
    "returnType" : "ByteArrayWrapper",
    "comment" : "\n     * Set the internal byte array from offset 0 to (limit - start) with the\n     * contents of src from offset start to limit. If the byte array is null or its length is less than capacity, a new\n     * byte array of length (limit - start) will be allocated.\n     * This resets the size of the internal byte array to (limit - start).\n     * @param src source byte array to copy from\n     * @param start start offset of src to copy from\n     * @param limit end + 1 offset of src to copy from\n     * @return this ByteArrayWrapper\n     ",
    "links" : [ ]
  }, {
    "name" : "public final ByteArrayWrapper append(byte[] src, int start, int limit)",
    "returnType" : "ByteArrayWrapper",
    "comment" : "\n     * Appends the internal byte array from offset size with the\n     * contents of src from offset start to limit. This increases the size of\n     * the internal byte array to (size + limit - start).\n     * @param src source byte array to copy from\n     * @param start start offset of src to copy from\n     * @param limit end + 1 offset of src to copy from\n     * @return this ByteArrayWrapper\n     ",
    "links" : [ ]
  }, {
    "name" : "public final byte[] releaseBytes()",
    "returnType" : "byte[]",
    "comment" : "\n     * Releases the internal byte array to the caller, resets the internal\n     * byte array to null and its size to 0.\n     * @return internal byte array.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns string value for debugging\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object other)",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if the bytes in each wrapper are equal.\n     * @param other the object to compare to.\n     * @return true if the two objects are equal.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Return the hashcode.\n     * @return the hashcode.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int compareTo(ByteArrayWrapper other)",
    "returnType" : "int",
    "comment" : "\n     * Compare this object to another ByteArrayWrapper, which must not be null.\n     * @param other the object to compare to.\n     * @return a value &lt;0, 0, or &gt;0 as this compares less than, equal to, or\n     * greater than other.\n     * @throws ClassCastException if the other object is not a ByteArrayWrapper\n     ",
    "links" : [ ]
  }, {
    "name" : "private static final void copyBytes(byte[] src, int srcoff, byte[] tgt, int tgtoff, int length)",
    "returnType" : "void",
    "comment" : "\n     * Copies the contents of src byte array from offset srcoff to the\n     * target of tgt byte array at the offset tgtoff.\n     * @param src source byte array to copy from\n     * @param srcoff start offset of src to copy from\n     * @param tgt target byte array to copy to\n     * @param tgtoff start offset of tgt to copy to\n     * @param length size of contents to copy\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public ByteArrayWrapper ensureCapacity(int capacity)", "public final ByteArrayWrapper set(byte[] src, int start, int limit)", "public final ByteArrayWrapper append(byte[] src, int start, int limit)", "public final byte[] releaseBytes()", "public String toString()", "public boolean equals(Object other)", "public int hashCode()", "public int compareTo(ByteArrayWrapper other)", "private static final void copyBytes(byte[] src, int srcoff, byte[] tgt, int tgtoff, int length)" ],
  "variableNames" : [ "bytes", "size" ]
}