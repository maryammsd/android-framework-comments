{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/ImageReader.java",
  "packageName" : "android.media",
  "className" : "Builder",
  "comment" : "\n     * Builder class for {@link ImageReader} objects.\n     ",
  "links" : [ "android.hardware.camera2.MultiResolutionImageReader" ],
  "variables" : [ {
    "name" : "mWidth",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHeight",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaxImages",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mImageFormat",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHardwareBufferFormat",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDataSpace",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUsage",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUseLegacyImageFormat",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Builder setMaxImages(int maxImages)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the maximal number of images.\n         *\n         * @param maxImages The maximum number of images the user will want to\n         *            access simultaneously. This should be as small as possible to\n         *            limit memory use. Default value is 1.\n         * @return the Builder instance with customized usage value.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setUsage(@Usage long usage)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the consumer usage flag.\n         *\n         * @param usage The intended usage of the images consumed by this ImageReader.\n         *              See the usages on {@link HardwareBuffer} for a list of valid usage bits.\n         *              Default value is {@link HardwareBuffer#USAGE_CPU_READ_OFTEN}.\n         * @return the Builder instance with customized usage value.\n         *\n         * @see HardwareBuffer\n         ",
    "links" : [ "android.hardware.HardwareBuffer", "android.hardware.HardwareBuffer#USAGE_CPU_READ_OFTEN" ]
  }, {
    "name" : "public Builder setImageFormat(@Format int imageFormat)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the default image format passed by the producer. May be overridden by the producer.\n         *\n         * <p>{@link #setImageFormat} function replaces the combination of\n         * {@link #setDefaultHardwareBufferFormat} and {@link #setDefaultDataSpace} functions.\n         * Either this or these two functions must be called to initialize an {@code ImageReader}\n         * instance.</p>\n         *\n         * @param imageFormat The format of the image that this reader will produce. This\n         *                    must be one of the {@link android.graphics.ImageFormat} or\n         *                   {@link android.graphics.PixelFormat} constants. Note that not\n         *                   all formats are supported, like ImageFormat.NV21. The default value is\n         *                   {@link ImageFormat#UNKNOWN}.\n         * @return the builder instance with customized image format value.\n         *\n         * @see #setDefaultHardwareBufferFormat\n         * @see #setDefaultDataSpace\n         ",
    "links" : [ "android.graphics.ImageFormat", "android.graphics.ImageFormat#UNKNOWN", "#setDefaultHardwareBufferFormat", "#setImageFormat", "#setDefaultDataSpace", "android.graphics.PixelFormat" ]
  }, {
    "name" : "public Builder setDefaultHardwareBufferFormat(@HardwareBuffer.Format int hardwareBufferFormat)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the default hardwareBuffer format passed by the producer.\n         * May be overridden by the producer.\n         *\n         * <p>This function works together with {@link #setDefaultDataSpace} for an\n         * {@link ImageReader} instance. Setting at least one of these two replaces\n         * {@link #setImageFormat} function.</p>\n         *\n         * <p>The format of the Image can be overridden after {@link #setImageFormat} by calling\n         * this function and then {@link #setDefaultDataSpace} functions.\n         * <i>Warning:</i> Missing one of callings for initializing or overriding the format may\n         * involve undefined behaviors.</p>\n         *\n         * @param hardwareBufferFormat The HardwareBuffer format of the image that this reader\n         *                             will produce. The default value is\n         *                             {@link HardwareBuffer#RGBA_8888 HardwareBuffer.RGBA_8888}.\n         * @return the builder instance with customized hardwareBuffer value.\n         *\n         * @see #setDefaultDataSpace\n         * @see #setImageFormat\n         ",
    "links" : [ "android.hardware.HardwareBuffer#RGBA_8888", "android.hardware.camera2.MultiResolutionImageReader", "#setDefaultDataSpace", "#setImageFormat" ]
  }, {
    "name" : "public Builder setDefaultDataSpace(@NamedDataSpace int dataSpace)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the default dataspace passed by the producer.\n         * May be overridden by the producer.\n         *\n         * <p>This function works together with {@link #setDefaultHardwareBufferFormat} for an\n         * {@link ImageReader} instance. Setting at least one of these two replaces\n         * {@link #setImageFormat} function.</p>\n         *\n         * @param dataSpace The dataspace of the image that this reader will produce.\n         *                  The default value is {@link DataSpace#DATASPACE_UNKNOWN}.\n         * @return the builder instance with customized dataspace value.\n         *\n         * @see #setDefaultHardwareBufferFormat\n         ",
    "links" : [ "android.hardware.DataSpace#DATASPACE_UNKNOWN", "#setDefaultHardwareBufferFormat", "android.hardware.camera2.MultiResolutionImageReader", "#setImageFormat" ]
  }, {
    "name" : "public ImageReader build()",
    "returnType" : "ImageReader",
    "comment" : "\n         * Builds a new ImageReader object.\n         *\n         * @return The new ImageReader object.\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Builder setMaxImages(int maxImages)", "public Builder setUsage(@Usage long usage)", "public Builder setImageFormat(@Format int imageFormat)", "public Builder setDefaultHardwareBufferFormat(@HardwareBuffer.Format int hardwareBufferFormat)", "public Builder setDefaultDataSpace(@NamedDataSpace int dataSpace)", "public ImageReader build()" ],
  "variableNames" : [ "mWidth", "mHeight", "mMaxImages", "mImageFormat", "mHardwareBufferFormat", "mDataSpace", "mUsage", "mUseLegacyImageFormat" ]
}