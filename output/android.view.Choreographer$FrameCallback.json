{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/Choreographer.java",
  "packageName" : "android.view",
  "className" : "FrameCallback",
  "comment" : "\n     * Implement this interface to receive a callback when a new display frame is\n     * being rendered.  The callback is invoked on the {@link Looper} thread to\n     * which the {@link Choreographer} is attached.\n     ",
  "links" : [ "android.os.Looper", "android.view.Choreographer" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public void doFrame(long frameTimeNanos)",
    "returnType" : "void",
    "comment" : "\n         * Called when a new display frame is being rendered.\n         * <p>\n         * This method provides the time in nanoseconds when the frame started being rendered.\n         * The frame time provides a stable time base for synchronizing animations\n         * and drawing.  It should be used instead of {@link SystemClock#uptimeMillis()}\n         * or {@link System#nanoTime()} for animations and drawing in the UI.  Using the frame\n         * time helps to reduce inter-frame jitter because the frame time is fixed at the time\n         * the frame was scheduled to start, regardless of when the animations or drawing\n         * callback actually runs.  All callbacks that run as part of rendering a frame will\n         * observe the same frame time so using the frame time also helps to synchronize effects\n         * that are performed by different callbacks.\n         * </p><p>\n         * Please note that the framework already takes care to process animations and\n         * drawing using the frame time as a stable time base.  Most applications should\n         * not need to use the frame time information directly.\n         * </p>\n         *\n         * @param frameTimeNanos The time in nanoseconds when the frame started being rendered,\n         * in the {@link System#nanoTime()} timebase.  Divide this value by {@code 1000000}\n         * to convert it to the {@link SystemClock#uptimeMillis()} time base.\n         ",
    "links" : [ "android.os.SystemClock#uptimeMillis()", "#nanoTime()" ]
  } ],
  "methodNames" : [ "public void doFrame(long frameTimeNanos)" ],
  "variableNames" : [ ]
}