{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/media/Cea708CaptionRenderer.java",
  "packageName" : "android.media",
  "className" : "CCHandler",
  "comment" : "\n     * @hide\n     *\n     * Renders the selected CC track.\n     ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TENTHS_OF_SECOND_IN_MILLIS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CAPTION_WINDOWS_MAX",
    "type" : "int",
    "comment" : " According to CEA-708B, there can exist up to 8 caption windows.",
    "links" : [ ]
  }, {
    "name" : "CAPTION_ALL_WINDOWS_BITMAP",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_DELAY_CANCEL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_CAPTION_CLEAR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CAPTION_CLEAR_INTERVAL_MS",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCCLayout",
    "type" : "CCLayout",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsDelayed",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCurrentWindowLayout",
    "type" : "CCWindowLayout",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCaptionWindowLayouts",
    "type" : "CCWindowLayout[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPendingCaptionEvents",
    "type" : "ArrayList<Cea708CCParser.CaptionEvent>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean handleMessage(Message msg)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void processCaptionEvent(Cea708CCParser.CaptionEvent event)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setCurrentWindowLayout(int windowId)",
    "returnType" : "void",
    "comment" : " The window related caption commands",
    "links" : [ ]
  }, {
    "name" : "private ArrayList<CCWindowLayout> getWindowsFromBitmap(int windowBitmap)",
    "returnType" : "ArrayList<CCWindowLayout>",
    "comment" : " bit.",
    "links" : [ ]
  }, {
    "name" : "private void clearWindows(int windowBitmap)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void displayWindows(int windowBitmap)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void hideWindows(int windowBitmap)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void toggleWindows(int windowBitmap)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void deleteWindows(int windowBitmap)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void reset()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setWindowAttr(Cea708CCParser.CaptionWindowAttr windowAttr)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void defineWindow(Cea708CCParser.CaptionWindow window)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void delay(int tenthsOfSeconds)",
    "returnType" : "void",
    "comment" : " The job related caption commands",
    "links" : [ ]
  }, {
    "name" : "private void delayCancel()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void processPendingBuffer()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void sendControlToCurrentWindow(char control)",
    "returnType" : "void",
    "comment" : " The implicit write caption commands",
    "links" : [ ]
  }, {
    "name" : "private void sendBufferToCurrentWindow(String buffer)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setPenAttr(Cea708CCParser.CaptionPenAttr attr)",
    "returnType" : "void",
    "comment" : " The pen related caption commands",
    "links" : [ ]
  }, {
    "name" : "private void setPenColor(Cea708CCParser.CaptionPenColor color)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setPenLocation(Cea708CCParser.CaptionPenLocation location)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "DEBUG", "TENTHS_OF_SECOND_IN_MILLIS", "CAPTION_WINDOWS_MAX", "CAPTION_ALL_WINDOWS_BITMAP", "MSG_DELAY_CANCEL", "MSG_CAPTION_CLEAR", "CAPTION_CLEAR_INTERVAL_MS", "mCCLayout", "mIsDelayed", "mCurrentWindowLayout", "mCaptionWindowLayouts", "mPendingCaptionEvents", "mHandler" ],
  "methodNames" : [ "public boolean handleMessage(Message msg)", "public void processCaptionEvent(Cea708CCParser.CaptionEvent event)", "private void setCurrentWindowLayout(int windowId)", "private ArrayList<CCWindowLayout> getWindowsFromBitmap(int windowBitmap)", "private void clearWindows(int windowBitmap)", "private void displayWindows(int windowBitmap)", "private void hideWindows(int windowBitmap)", "private void toggleWindows(int windowBitmap)", "private void deleteWindows(int windowBitmap)", "public void reset()", "private void setWindowAttr(Cea708CCParser.CaptionWindowAttr windowAttr)", "private void defineWindow(Cea708CCParser.CaptionWindow window)", "private void delay(int tenthsOfSeconds)", "private void delayCancel()", "private void processPendingBuffer()", "private void sendControlToCurrentWindow(char control)", "private void sendBufferToCurrentWindow(String buffer)", "private void setPenAttr(Cea708CCParser.CaptionPenAttr attr)", "private void setPenColor(Cea708CCParser.CaptionPenColor color)", "private void setPenLocation(Cea708CCParser.CaptionPenLocation location)" ]
}