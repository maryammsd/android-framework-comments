{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/units/UnitsConverter.java",
  "packageName" : "android.icu.impl.units",
  "className" : "Factor",
  "comment" : "\n     * Responsible for all the Factor operation\n     * NOTE:\n     * This class is immutable\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "factorNum",
    "type" : "BigDecimal",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "factorDen",
    "type" : "BigDecimal",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "exponentFtToM",
    "type" : "int",
    "comment" : " Exponent for the ft_to_m constant ",
    "links" : [ ]
  }, {
    "name" : "exponentPi",
    "type" : "int",
    "comment" : " Exponent for PI ",
    "links" : [ ]
  }, {
    "name" : "exponentGravity",
    "type" : "int",
    "comment" : " Exponent for gravity (gravity-of-earth, \"g\") ",
    "links" : [ ]
  }, {
    "name" : "exponentG",
    "type" : "int",
    "comment" : " Exponent for Newtonian constant of gravitation \"G\". ",
    "links" : [ ]
  }, {
    "name" : "exponentGalImpToM3",
    "type" : "int",
    "comment" : " Exponent for the imperial-gallon to cubic-meter conversion rate constant ",
    "links" : [ ]
  }, {
    "name" : "exponentLbToKg",
    "type" : "int",
    "comment" : " Exponent for the pound to kilogram conversion rate constant ",
    "links" : [ ]
  }, {
    "name" : "exponentGlucoseMolarMass",
    "type" : "int",
    "comment" : " Exponent for the glucose molar mass conversion rate constant ",
    "links" : [ ]
  }, {
    "name" : "exponentItemPerMole",
    "type" : "int",
    "comment" : " Exponent for the item per mole conversion rate constant ",
    "links" : [ ]
  }, {
    "name" : "exponentMetersPerAU",
    "type" : "int",
    "comment" : " Exponent for the meters per AU conversion rate constant ",
    "links" : [ ]
  }, {
    "name" : "exponentSecPerJulianYear",
    "type" : "int",
    "comment" : " Exponent for the sec per julian year conversion rate constant ",
    "links" : [ ]
  }, {
    "name" : "exponentSpeedOfLightMetersPerSecond",
    "type" : "int",
    "comment" : " Exponent for the speed of light meters per second\" conversion rate constant ",
    "links" : [ ]
  }, {
    "name" : "exponentShoToM3",
    "type" : "int",
    "comment" : " Exponent for https://en.wikipedia.org/wiki/Japanese_units_of_measurement ",
    "links" : [ ]
  }, {
    "name" : "exponentTsuboToM2",
    "type" : "int",
    "comment" : " Exponent for https://en.wikipedia.org/wiki/Japanese_units_of_measurement ",
    "links" : [ ]
  }, {
    "name" : "exponentShakuToM",
    "type" : "int",
    "comment" : " Exponent for https://en.wikipedia.org/wiki/Japanese_units_of_measurement ",
    "links" : [ ]
  }, {
    "name" : "exponentAMU",
    "type" : "int",
    "comment" : " Exponent for Atomic Mass Unit ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static Factor processFactor(String factor)",
    "returnType" : "Factor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Factor processFactorWithoutDivision(String factorWithoutDivision)",
    "returnType" : "Factor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected Factor copy()",
    "returnType" : "Factor",
    "comment" : "\n         * Copy this <code>Factor</code>.\n         ",
    "links" : [ ]
  }, {
    "name" : "public BigDecimal getConversionRate()",
    "returnType" : "BigDecimal",
    "comment" : "\n         * Returns a single {@code BigDecimal} that represent the conversion rate after substituting all the constants.\n         *\n         * In ICU4C, see Factor::substituteConstants().\n         ",
    "links" : [ ]
  }, {
    "name" : "private void multiply(BigDecimal value, int power)",
    "returnType" : "void",
    "comment" : " Multiplies the Factor instance by value^power. ",
    "links" : [ ]
  }, {
    "name" : "public Factor applyPrefix(MeasureUnit.MeasurePrefix unitPrefix)",
    "returnType" : "Factor",
    "comment" : " Apply SI or binary prefix to the Factor. ",
    "links" : [ ]
  }, {
    "name" : "public Factor power(int power)",
    "returnType" : "Factor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Factor divide(Factor other)",
    "returnType" : "Factor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Factor multiply(Factor other)",
    "returnType" : "Factor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void addPoweredEntity(String poweredEntity)",
    "returnType" : "void",
    "comment" : "\n         * Adds Entity with power or not. For example, {@code 12 ^ 3} or {@code 12}.\n         *\n         * @param poweredEntity\n         ",
    "links" : [ ]
  }, {
    "name" : "private void addEntity(String entity, int power)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static Factor processFactor(String factor)", "private static Factor processFactorWithoutDivision(String factorWithoutDivision)", "protected Factor copy()", "public BigDecimal getConversionRate()", "private void multiply(BigDecimal value, int power)", "public Factor applyPrefix(MeasureUnit.MeasurePrefix unitPrefix)", "public Factor power(int power)", "public Factor divide(Factor other)", "public Factor multiply(Factor other)", "private void addPoweredEntity(String poweredEntity)", "private void addEntity(String entity, int power)" ],
  "variableNames" : [ "factorNum", "factorDen", "exponentFtToM", "exponentPi", "exponentGravity", "exponentG", "exponentGalImpToM3", "exponentLbToKg", "exponentGlucoseMolarMass", "exponentItemPerMole", "exponentMetersPerAU", "exponentSecPerJulianYear", "exponentSpeedOfLightMetersPerSecond", "exponentShoToM3", "exponentTsuboToM2", "exponentShakuToM", "exponentAMU" ]
}