{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/javax/net/ssl/SNIServerName.java",
  "packageName" : "javax.net.ssl",
  "className" : "SNIServerName",
  "comment" : "\n * Instances of this class represent a server name in a Server Name\n * Indication (SNI) extension.\n * <P>\n * The SNI extension is a feature that extends the SSL/TLS protocols to\n * indicate what server name the client is attempting to connect to during\n * handshaking.  See section 3, \"Server Name Indication\", of <A\n * HREF=\"http://www.ietf.org/rfc/rfc6066.txt\">TLS Extensions (RFC 6066)</A>.\n * <P>\n * {@code SNIServerName} objects are immutable.  Subclasses should not provide\n * methods that can change the state of an instance once it has been created.\n *\n * @see SSLParameters#getServerNames()\n * @see SSLParameters#setServerNames(List)\n *\n * @since 1.8\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "type",
    "type" : "int",
    "comment" : " the type of the server name",
    "links" : [ ]
  }, {
    "name" : "encoded",
    "type" : "byte[]",
    "comment" : " the encoded value of the server name",
    "links" : [ ]
  }, {
    "name" : "HEXES",
    "type" : "char[]",
    "comment" : " the hex digitals",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final int getType()",
    "returnType" : "int",
    "comment" : "\n     * Returns the name type of this server name.\n     *\n     * @return the name type of this server name\n     ",
    "links" : [ ]
  }, {
    "name" : "public final byte[] getEncoded()",
    "returnType" : "byte[]",
    "comment" : "\n     * Returns a copy of the encoded server name value of this server name.\n     *\n     * @return a copy of the encoded server name value of this server name\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object other)",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether some other object is \"equal to\" this server name.\n     *\n     * @return true if, and only if, {@code other} is of the same class\n     *         of this object, and has the same name type and\n     *         encoded value as this server name.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Returns a hash code value for this server name.\n     * <P>\n     * The hash code value is generated using the name type and encoded\n     * value of this server name.\n     *\n     * @return a hash code value for this server name.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a string representation of this server name, including the server\n     * name type and the encoded server name value in this\n     * {@code SNIServerName} object.\n     * <P>\n     * The exact details of the representation are unspecified and subject\n     * to change, but the following may be regarded as typical:\n     * <pre>\n     *     \"type={@literal <name type>}, value={@literal <name value>}\"\n     * </pre>\n     * <P>\n     * In this class, the format of \"{@literal <name type>}\" is\n     * \"[LITERAL] (INTEGER)\", where the optional \"LITERAL\" is the literal\n     * name, and INTEGER is the integer value of the name type.  The format\n     * of \"{@literal <name value>}\" is \"XX:...:XX\", where \"XX\" is the\n     * hexadecimal digit representation of a byte value. For example, a\n     * returned value of an pseudo server name may look like:\n     * <pre>\n     *     \"type=(31), value=77:77:77:2E:65:78:61:6D:70:6C:65:2E:63:6E\"\n     * </pre>\n     * or\n     * <pre>\n     *     \"type=host_name (0), value=77:77:77:2E:65:78:61:6D:70:6C:65:2E:63:6E\"\n     * </pre>\n     *\n     * <P>\n     * Please NOTE that the exact details of the representation are unspecified\n     * and subject to change, and subclasses may override the method with\n     * their own formats.\n     *\n     * @return a string representation of this server name\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String toHexString(byte[] bytes)",
    "returnType" : "String",
    "comment" : " convert byte array to hex string",
    "links" : [ ]
  } ],
  "methodNames" : [ "public final int getType()", "public final byte[] getEncoded()", "public boolean equals(Object other)", "public int hashCode()", "public String toString()", "private static String toHexString(byte[] bytes)" ],
  "variableNames" : [ "type", "encoded", "HEXES" ]
}