{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/Spliterators.java",
  "packageName" : "java.util",
  "className" : "Spliterators",
  "comment" : "\n * Static classes and methods for operating on or creating instances of\n * {@link Spliterator} and its primitive specializations\n * {@link Spliterator.OfInt}, {@link Spliterator.OfLong}, and\n * {@link Spliterator.OfDouble}.\n *\n * @see Spliterator\n * @since 1.8\n ",
  "links" : [ "Spliterator.OfDouble", "Spliterator.OfLong", "Spliterator.OfInt", "java.util.Spliterator" ],
  "variables" : [ {
    "name" : "EMPTY_SPLITERATOR",
    "type" : "Spliterator<Object>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EMPTY_INT_SPLITERATOR",
    "type" : "Spliterator.OfInt",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EMPTY_LONG_SPLITERATOR",
    "type" : "Spliterator.OfLong",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EMPTY_DOUBLE_SPLITERATOR",
    "type" : "Spliterator.OfDouble",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static Spliterator<T> emptySpliterator()",
    "returnType" : "Spliterator<T>",
    "comment" : "\n     * Creates an empty {@code Spliterator}\n     *\n     * <p>The empty spliterator reports {@link Spliterator#SIZED} and\n     * {@link Spliterator#SUBSIZED}.  Calls to\n     * {@link java.util.Spliterator#trySplit()} always return {@code null}.\n     *\n     * @param <T> Type of elements\n     * @return An empty spliterator\n     ",
    "links" : [ "java.util.Spliterator#SIZED", "java.util.Spliterator#trySplit()", "java.util.Spliterator#SUBSIZED" ]
  }, {
    "name" : "public static Spliterator.OfInt emptyIntSpliterator()",
    "returnType" : "Spliterator.OfInt",
    "comment" : "\n     * Creates an empty {@code Spliterator.OfInt}\n     *\n     * <p>The empty spliterator reports {@link Spliterator#SIZED} and\n     * {@link Spliterator#SUBSIZED}.  Calls to\n     * {@link java.util.Spliterator#trySplit()} always return {@code null}.\n     *\n     * @return An empty spliterator\n     ",
    "links" : [ "java.util.Spliterator#SIZED", "java.util.Spliterator#trySplit()", "java.util.Spliterator#SUBSIZED" ]
  }, {
    "name" : "public static Spliterator.OfLong emptyLongSpliterator()",
    "returnType" : "Spliterator.OfLong",
    "comment" : "\n     * Creates an empty {@code Spliterator.OfLong}\n     *\n     * <p>The empty spliterator reports {@link Spliterator#SIZED} and\n     * {@link Spliterator#SUBSIZED}.  Calls to\n     * {@link java.util.Spliterator#trySplit()} always return {@code null}.\n     *\n     * @return An empty spliterator\n     ",
    "links" : [ "java.util.Spliterator#SIZED", "java.util.Spliterator#trySplit()", "java.util.Spliterator#SUBSIZED" ]
  }, {
    "name" : "public static Spliterator.OfDouble emptyDoubleSpliterator()",
    "returnType" : "Spliterator.OfDouble",
    "comment" : "\n     * Creates an empty {@code Spliterator.OfDouble}\n     *\n     * <p>The empty spliterator reports {@link Spliterator#SIZED} and\n     * {@link Spliterator#SUBSIZED}.  Calls to\n     * {@link java.util.Spliterator#trySplit()} always return {@code null}.\n     *\n     * @return An empty spliterator\n     ",
    "links" : [ "java.util.Spliterator#SIZED", "java.util.Spliterator#trySplit()", "java.util.Spliterator#SUBSIZED" ]
  }, {
    "name" : "public static Spliterator<T> spliterator(Object[] array, int additionalCharacteristics)",
    "returnType" : "Spliterator<T>",
    "comment" : "\n     * Creates a {@code Spliterator} covering the elements of a given array,\n     * using a customized set of spliterator characteristics.\n     *\n     * <p>This method is provided as an implementation convenience for\n     * Spliterators which store portions of their elements in arrays, and need\n     * fine control over Spliterator characteristics.  Most other situations in\n     * which a Spliterator for an array is needed should use\n     * {@link Arrays#spliterator(Object[])}.\n     *\n     * <p>The returned spliterator always reports the characteristics\n     * {@code SIZED} and {@code SUBSIZED}.  The caller may provide additional\n     * characteristics for the spliterator to report; it is common to\n     * additionally specify {@code IMMUTABLE} and {@code ORDERED}.\n     *\n     * @param <T> Type of elements\n     * @param array The array, assumed to be unmodified during use\n     * @param additionalCharacteristics Additional spliterator characteristics\n     *        of this spliterator's source or elements beyond {@code SIZED} and\n     *        {@code SUBSIZED} which are always reported\n     * @return A spliterator for an array\n     * @throws NullPointerException if the given array is {@code null}\n     * @see Arrays#spliterator(Object[])\n     ",
    "links" : [ "java.util.Arrays#spliterator(Object" ]
  }, {
    "name" : "public static Spliterator<T> spliterator(Object[] array, int fromIndex, int toIndex, int additionalCharacteristics)",
    "returnType" : "Spliterator<T>",
    "comment" : "\n     * Creates a {@code Spliterator} covering a range of elements of a given\n     * array, using a customized set of spliterator characteristics.\n     *\n     * <p>This method is provided as an implementation convenience for\n     * Spliterators which store portions of their elements in arrays, and need\n     * fine control over Spliterator characteristics.  Most other situations in\n     * which a Spliterator for an array is needed should use\n     * {@link Arrays#spliterator(Object[])}.\n     *\n     * <p>The returned spliterator always reports the characteristics\n     * {@code SIZED} and {@code SUBSIZED}.  The caller may provide additional\n     * characteristics for the spliterator to report; it is common to\n     * additionally specify {@code IMMUTABLE} and {@code ORDERED}.\n     *\n     * @param <T> Type of elements\n     * @param array The array, assumed to be unmodified during use\n     * @param fromIndex The least index (inclusive) to cover\n     * @param toIndex One past the greatest index to cover\n     * @param additionalCharacteristics Additional spliterator characteristics\n     *        of this spliterator's source or elements beyond {@code SIZED} and\n     *        {@code SUBSIZED} which are always reported\n     * @return A spliterator for an array\n     * @throws NullPointerException if the given array is {@code null}\n     * @throws ArrayIndexOutOfBoundsException if {@code fromIndex} is negative,\n     *         {@code toIndex} is less than {@code fromIndex}, or\n     *         {@code toIndex} is greater than the array size\n     * @see Arrays#spliterator(Object[], int, int)\n     ",
    "links" : [ "java.util.Arrays#spliterator(Object" ]
  }, {
    "name" : "public static Spliterator.OfInt spliterator(int[] array, int additionalCharacteristics)",
    "returnType" : "Spliterator.OfInt",
    "comment" : "\n     * Creates a {@code Spliterator.OfInt} covering the elements of a given array,\n     * using a customized set of spliterator characteristics.\n     *\n     * <p>This method is provided as an implementation convenience for\n     * Spliterators which store portions of their elements in arrays, and need\n     * fine control over Spliterator characteristics.  Most other situations in\n     * which a Spliterator for an array is needed should use\n     * {@link Arrays#spliterator(int[])}.\n     *\n     * <p>The returned spliterator always reports the characteristics\n     * {@code SIZED} and {@code SUBSIZED}.  The caller may provide additional\n     * characteristics for the spliterator to report; it is common to\n     * additionally specify {@code IMMUTABLE} and {@code ORDERED}.\n     *\n     * @param array The array, assumed to be unmodified during use\n     * @param additionalCharacteristics Additional spliterator characteristics\n     *        of this spliterator's source or elements beyond {@code SIZED} and\n     *        {@code SUBSIZED} which are always reported\n     * @return A spliterator for an array\n     * @throws NullPointerException if the given array is {@code null}\n     * @see Arrays#spliterator(int[])\n     ",
    "links" : [ "java.util.Arrays#spliterator(int" ]
  }, {
    "name" : "public static Spliterator.OfInt spliterator(int[] array, int fromIndex, int toIndex, int additionalCharacteristics)",
    "returnType" : "Spliterator.OfInt",
    "comment" : "\n     * Creates a {@code Spliterator.OfInt} covering a range of elements of a\n     * given array, using a customized set of spliterator characteristics.\n     *\n     * <p>This method is provided as an implementation convenience for\n     * Spliterators which store portions of their elements in arrays, and need\n     * fine control over Spliterator characteristics.  Most other situations in\n     * which a Spliterator for an array is needed should use\n     * {@link Arrays#spliterator(int[], int, int)}.\n     *\n     * <p>The returned spliterator always reports the characteristics\n     * {@code SIZED} and {@code SUBSIZED}.  The caller may provide additional\n     * characteristics for the spliterator to report; it is common to\n     * additionally specify {@code IMMUTABLE} and {@code ORDERED}.\n     *\n     * @param array The array, assumed to be unmodified during use\n     * @param fromIndex The least index (inclusive) to cover\n     * @param toIndex One past the greatest index to cover\n     * @param additionalCharacteristics Additional spliterator characteristics\n     *        of this spliterator's source or elements beyond {@code SIZED} and\n     *        {@code SUBSIZED} which are always reported\n     * @return A spliterator for an array\n     * @throws NullPointerException if the given array is {@code null}\n     * @throws ArrayIndexOutOfBoundsException if {@code fromIndex} is negative,\n     *         {@code toIndex} is less than {@code fromIndex}, or\n     *         {@code toIndex} is greater than the array size\n     * @see Arrays#spliterator(int[], int, int)\n     ",
    "links" : [ "java.util.Arrays#spliterator(int" ]
  }, {
    "name" : "public static Spliterator.OfLong spliterator(long[] array, int additionalCharacteristics)",
    "returnType" : "Spliterator.OfLong",
    "comment" : "\n     * Creates a {@code Spliterator.OfLong} covering the elements of a given array,\n     * using a customized set of spliterator characteristics.\n     *\n     * <p>This method is provided as an implementation convenience for\n     * Spliterators which store portions of their elements in arrays, and need\n     * fine control over Spliterator characteristics.  Most other situations in\n     * which a Spliterator for an array is needed should use\n     * {@link Arrays#spliterator(long[])}.\n     *\n     * <p>The returned spliterator always reports the characteristics\n     * {@code SIZED} and {@code SUBSIZED}.  The caller may provide additional\n     * characteristics for the spliterator to report; it is common to\n     * additionally specify {@code IMMUTABLE} and {@code ORDERED}.\n     *\n     * @param array The array, assumed to be unmodified during use\n     * @param additionalCharacteristics Additional spliterator characteristics\n     *        of this spliterator's source or elements beyond {@code SIZED} and\n     *        {@code SUBSIZED} which are always reported\n     * @return A spliterator for an array\n     * @throws NullPointerException if the given array is {@code null}\n     * @see Arrays#spliterator(long[])\n     ",
    "links" : [ "java.util.Arrays#spliterator(long" ]
  }, {
    "name" : "public static Spliterator.OfLong spliterator(long[] array, int fromIndex, int toIndex, int additionalCharacteristics)",
    "returnType" : "Spliterator.OfLong",
    "comment" : "\n     * Creates a {@code Spliterator.OfLong} covering a range of elements of a\n     * given array, using a customized set of spliterator characteristics.\n     *\n     * <p>This method is provided as an implementation convenience for\n     * Spliterators which store portions of their elements in arrays, and need\n     * fine control over Spliterator characteristics.  Most other situations in\n     * which a Spliterator for an array is needed should use\n     * {@link Arrays#spliterator(long[], int, int)}.\n     *\n     * <p>The returned spliterator always reports the characteristics\n     * {@code SIZED} and {@code SUBSIZED}.  The caller may provide additional\n     * characteristics for the spliterator to report.  (For example, if it is\n     * known the array will not be further modified, specify {@code IMMUTABLE};\n     * if the array data is considered to have an encounter order, specify\n     * {@code ORDERED}).  The method {@link Arrays#spliterator(long[], int, int)} can\n     * often be used instead, which returns a spliterator that reports\n     * {@code SIZED}, {@code SUBSIZED}, {@code IMMUTABLE}, and {@code ORDERED}.\n     *\n     * @param array The array, assumed to be unmodified during use\n     * @param fromIndex The least index (inclusive) to cover\n     * @param toIndex One past the greatest index to cover\n     * @param additionalCharacteristics Additional spliterator characteristics\n     *        of this spliterator's source or elements beyond {@code SIZED} and\n     *        {@code SUBSIZED} which are always reported\n     * @return A spliterator for an array\n     * @throws NullPointerException if the given array is {@code null}\n     * @throws ArrayIndexOutOfBoundsException if {@code fromIndex} is negative,\n     *         {@code toIndex} is less than {@code fromIndex}, or\n     *         {@code toIndex} is greater than the array size\n     * @see Arrays#spliterator(long[], int, int)\n     ",
    "links" : [ "java.util.Arrays#spliterator(long" ]
  }, {
    "name" : "public static Spliterator.OfDouble spliterator(double[] array, int additionalCharacteristics)",
    "returnType" : "Spliterator.OfDouble",
    "comment" : "\n     * Creates a {@code Spliterator.OfDouble} covering the elements of a given array,\n     * using a customized set of spliterator characteristics.\n     *\n     * <p>This method is provided as an implementation convenience for\n     * Spliterators which store portions of their elements in arrays, and need\n     * fine control over Spliterator characteristics.  Most other situations in\n     * which a Spliterator for an array is needed should use\n     * {@link Arrays#spliterator(double[])}.\n     *\n     * <p>The returned spliterator always reports the characteristics\n     * {@code SIZED} and {@code SUBSIZED}.  The caller may provide additional\n     * characteristics for the spliterator to report; it is common to\n     * additionally specify {@code IMMUTABLE} and {@code ORDERED}.\n     *\n     * @param array The array, assumed to be unmodified during use\n     * @param additionalCharacteristics Additional spliterator characteristics\n     *        of this spliterator's source or elements beyond {@code SIZED} and\n     *        {@code SUBSIZED} which are always reported\n     * @return A spliterator for an array\n     * @throws NullPointerException if the given array is {@code null}\n     * @see Arrays#spliterator(double[])\n     ",
    "links" : [ "java.util.Arrays#spliterator(double" ]
  }, {
    "name" : "public static Spliterator.OfDouble spliterator(double[] array, int fromIndex, int toIndex, int additionalCharacteristics)",
    "returnType" : "Spliterator.OfDouble",
    "comment" : "\n     * Creates a {@code Spliterator.OfDouble} covering a range of elements of a\n     * given array, using a customized set of spliterator characteristics.\n     *\n     * <p>This method is provided as an implementation convenience for\n     * Spliterators which store portions of their elements in arrays, and need\n     * fine control over Spliterator characteristics.  Most other situations in\n     * which a Spliterator for an array is needed should use\n     * {@link Arrays#spliterator(double[], int, int)}.\n     *\n     * <p>The returned spliterator always reports the characteristics\n     * {@code SIZED} and {@code SUBSIZED}.  The caller may provide additional\n     * characteristics for the spliterator to report.  (For example, if it is\n     * known the array will not be further modified, specify {@code IMMUTABLE};\n     * if the array data is considered to have an encounter order, specify\n     * {@code ORDERED}).  The method {@link Arrays#spliterator(long[], int, int)} can\n     * often be used instead, which returns a spliterator that reports\n     * {@code SIZED}, {@code SUBSIZED}, {@code IMMUTABLE}, and {@code ORDERED}.\n     *\n     * @param array The array, assumed to be unmodified during use\n     * @param fromIndex The least index (inclusive) to cover\n     * @param toIndex One past the greatest index to cover\n     * @param additionalCharacteristics Additional spliterator characteristics\n     *        of this spliterator's source or elements beyond {@code SIZED} and\n     *        {@code SUBSIZED} which are always reported\n     * @return A spliterator for an array\n     * @throws NullPointerException if the given array is {@code null}\n     * @throws ArrayIndexOutOfBoundsException if {@code fromIndex} is negative,\n     *         {@code toIndex} is less than {@code fromIndex}, or\n     *         {@code toIndex} is greater than the array size\n     * @see Arrays#spliterator(double[], int, int)\n     ",
    "links" : [ "java.util.Arrays#spliterator(double", "java.util.Arrays#spliterator(long" ]
  }, {
    "name" : "private static void checkFromToBounds(int arrayLength, int origin, int fence)",
    "returnType" : "void",
    "comment" : "\n     * Validate inclusive start index and exclusive end index against the length\n     * of an array.\n     * @param arrayLength The length of the array\n     * @param origin The inclusive start index\n     * @param fence The exclusive end index\n     * @throws ArrayIndexOutOfBoundsException if the start index is greater than\n     * the end index, if the start index is negative, or the end index is\n     * greater than the array length\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Spliterator<T> spliterator(Collection<? extends T> c, int characteristics)",
    "returnType" : "Spliterator<T>",
    "comment" : "\n     * Creates a {@code Spliterator} using the given collection's\n     * {@link java.util.Collection#iterator()} as the source of elements, and\n     * reporting its {@link java.util.Collection#size()} as its initial size.\n     *\n     * <p>The spliterator is\n     * <em><a href=\"Spliterator.html#binding\">late-binding</a></em>, inherits\n     * the <em>fail-fast</em> properties of the collection's iterator, and\n     * implements {@code trySplit} to permit limited parallelism.\n     *\n     * @param <T> Type of elements\n     * @param c The collection\n     * @param characteristics Characteristics of this spliterator's source or\n     *        elements.  The characteristics {@code SIZED} and {@code SUBSIZED}\n     *        are additionally reported unless {@code CONCURRENT} is supplied.\n     * @return A spliterator from an iterator\n     * @throws NullPointerException if the given collection is {@code null}\n     ",
    "links" : [ "java.util.Collection#size()", "java.util.Collection#iterator()" ]
  }, {
    "name" : "public static Spliterator<T> spliterator(Iterator<? extends T> iterator, long size, int characteristics)",
    "returnType" : "Spliterator<T>",
    "comment" : "\n     * Creates a {@code Spliterator} using a given {@code Iterator}\n     * as the source of elements, and with a given initially reported size.\n     *\n     * <p>The spliterator is not\n     * <em><a href=\"Spliterator.html#binding\">late-binding</a></em>, inherits\n     * the <em>fail-fast</em> properties of the iterator, and implements\n     * {@code trySplit} to permit limited parallelism.\n     *\n     * <p>Traversal of elements should be accomplished through the spliterator.\n     * The behaviour of splitting and traversal is undefined if the iterator is\n     * operated on after the spliterator is returned, or the initially reported\n     * size is not equal to the actual number of elements in the source.\n     *\n     * @param <T> Type of elements\n     * @param iterator The iterator for the source\n     * @param size The number of elements in the source, to be reported as\n     *        initial {@code estimateSize}\n     * @param characteristics Characteristics of this spliterator's source or\n     *        elements.  The characteristics {@code SIZED} and {@code SUBSIZED}\n     *        are additionally reported unless {@code CONCURRENT} is supplied.\n     * @return A spliterator from an iterator\n     * @throws NullPointerException if the given iterator is {@code null}\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Spliterator<T> spliteratorUnknownSize(Iterator<? extends T> iterator, int characteristics)",
    "returnType" : "Spliterator<T>",
    "comment" : "\n     * Creates a {@code Spliterator} using a given {@code Iterator}\n     * as the source of elements, with no initial size estimate.\n     *\n     * <p>The spliterator is not\n     * <em><a href=\"Spliterator.html#binding\">late-binding</a></em>, inherits\n     * the <em>fail-fast</em> properties of the iterator, and implements\n     * {@code trySplit} to permit limited parallelism.\n     *\n     * <p>Traversal of elements should be accomplished through the spliterator.\n     * The behaviour of splitting and traversal is undefined if the iterator is\n     * operated on after the spliterator is returned.\n     *\n     * @param <T> Type of elements\n     * @param iterator The iterator for the source\n     * @param characteristics Characteristics of this spliterator's source\n     *        or elements ({@code SIZED} and {@code SUBSIZED}, if supplied, are\n     *        ignored and are not reported.)\n     * @return A spliterator from an iterator\n     * @throws NullPointerException if the given iterator is {@code null}\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Spliterator.OfInt spliterator(PrimitiveIterator.OfInt iterator, long size, int characteristics)",
    "returnType" : "Spliterator.OfInt",
    "comment" : "\n     * Creates a {@code Spliterator.OfInt} using a given\n     * {@code IntStream.IntIterator} as the source of elements, and with a given\n     * initially reported size.\n     *\n     * <p>The spliterator is not\n     * <em><a href=\"Spliterator.html#binding\">late-binding</a></em>, inherits\n     * the <em>fail-fast</em> properties of the iterator, and implements\n     * {@code trySplit} to permit limited parallelism.\n     *\n     * <p>Traversal of elements should be accomplished through the spliterator.\n     * The behaviour of splitting and traversal is undefined if the iterator is\n     * operated on after the spliterator is returned, or the initially reported\n     * size is not equal to the actual number of elements in the source.\n     *\n     * @param iterator The iterator for the source\n     * @param size The number of elements in the source, to be reported as\n     *        initial {@code estimateSize}.\n     * @param characteristics Characteristics of this spliterator's source or\n     *        elements.  The characteristics {@code SIZED} and {@code SUBSIZED}\n     *        are additionally reported unless {@code CONCURRENT} is supplied.\n     * @return A spliterator from an iterator\n     * @throws NullPointerException if the given iterator is {@code null}\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Spliterator.OfInt spliteratorUnknownSize(PrimitiveIterator.OfInt iterator, int characteristics)",
    "returnType" : "Spliterator.OfInt",
    "comment" : "\n     * Creates a {@code Spliterator.OfInt} using a given\n     * {@code IntStream.IntIterator} as the source of elements, with no initial\n     * size estimate.\n     *\n     * <p>The spliterator is not\n     * <em><a href=\"Spliterator.html#binding\">late-binding</a></em>, inherits\n     * the <em>fail-fast</em> properties of the iterator, and implements\n     * {@code trySplit} to permit limited parallelism.\n     *\n     * <p>Traversal of elements should be accomplished through the spliterator.\n     * The behaviour of splitting and traversal is undefined if the iterator is\n     * operated on after the spliterator is returned.\n     *\n     * @param iterator The iterator for the source\n     * @param characteristics Characteristics of this spliterator's source\n     *        or elements ({@code SIZED} and {@code SUBSIZED}, if supplied, are\n     *        ignored and are not reported.)\n     * @return A spliterator from an iterator\n     * @throws NullPointerException if the given iterator is {@code null}\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Spliterator.OfLong spliterator(PrimitiveIterator.OfLong iterator, long size, int characteristics)",
    "returnType" : "Spliterator.OfLong",
    "comment" : "\n     * Creates a {@code Spliterator.OfLong} using a given\n     * {@code LongStream.LongIterator} as the source of elements, and with a\n     * given initially reported size.\n     *\n     * <p>The spliterator is not\n     * <em><a href=\"Spliterator.html#binding\">late-binding</a></em>, inherits\n     * the <em>fail-fast</em> properties of the iterator, and implements\n     * {@code trySplit} to permit limited parallelism.\n     *\n     * <p>Traversal of elements should be accomplished through the spliterator.\n     * The behaviour of splitting and traversal is undefined if the iterator is\n     * operated on after the spliterator is returned, or the initially reported\n     * size is not equal to the actual number of elements in the source.\n     *\n     * @param iterator The iterator for the source\n     * @param size The number of elements in the source, to be reported as\n     *        initial {@code estimateSize}.\n     * @param characteristics Characteristics of this spliterator's source or\n     *        elements.  The characteristics {@code SIZED} and {@code SUBSIZED}\n     *        are additionally reported unless {@code CONCURRENT} is supplied.\n     * @return A spliterator from an iterator\n     * @throws NullPointerException if the given iterator is {@code null}\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Spliterator.OfLong spliteratorUnknownSize(PrimitiveIterator.OfLong iterator, int characteristics)",
    "returnType" : "Spliterator.OfLong",
    "comment" : "\n     * Creates a {@code Spliterator.OfLong} using a given\n     * {@code LongStream.LongIterator} as the source of elements, with no\n     * initial size estimate.\n     *\n     * <p>The spliterator is not\n     * <em><a href=\"Spliterator.html#binding\">late-binding</a></em>, inherits\n     * the <em>fail-fast</em> properties of the iterator, and implements\n     * {@code trySplit} to permit limited parallelism.\n     *\n     * <p>Traversal of elements should be accomplished through the spliterator.\n     * The behaviour of splitting and traversal is undefined if the iterator is\n     * operated on after the spliterator is returned.\n     *\n     * @param iterator The iterator for the source\n     * @param characteristics Characteristics of this spliterator's source\n     *        or elements ({@code SIZED} and {@code SUBSIZED}, if supplied, are\n     *        ignored and are not reported.)\n     * @return A spliterator from an iterator\n     * @throws NullPointerException if the given iterator is {@code null}\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Spliterator.OfDouble spliterator(PrimitiveIterator.OfDouble iterator, long size, int characteristics)",
    "returnType" : "Spliterator.OfDouble",
    "comment" : "\n     * Creates a {@code Spliterator.OfDouble} using a given\n     * {@code DoubleStream.DoubleIterator} as the source of elements, and with a\n     * given initially reported size.\n     *\n     * <p>The spliterator is not\n     * <em><a href=\"Spliterator.html#binding\">late-binding</a></em>, inherits\n     * the <em>fail-fast</em> properties of the iterator, and implements\n     * {@code trySplit} to permit limited parallelism.\n     *\n     * <p>Traversal of elements should be accomplished through the spliterator.\n     * The behaviour of splitting and traversal is undefined if the iterator is\n     * operated on after the spliterator is returned, or the initially reported\n     * size is not equal to the actual number of elements in the source.\n     *\n     * @param iterator The iterator for the source\n     * @param size The number of elements in the source, to be reported as\n     *        initial {@code estimateSize}\n     * @param characteristics Characteristics of this spliterator's source or\n     *        elements.  The characteristics {@code SIZED} and {@code SUBSIZED}\n     *        are additionally reported unless {@code CONCURRENT} is supplied.\n     * @return A spliterator from an iterator\n     * @throws NullPointerException if the given iterator is {@code null}\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Spliterator.OfDouble spliteratorUnknownSize(PrimitiveIterator.OfDouble iterator, int characteristics)",
    "returnType" : "Spliterator.OfDouble",
    "comment" : "\n     * Creates a {@code Spliterator.OfDouble} using a given\n     * {@code DoubleStream.DoubleIterator} as the source of elements, with no\n     * initial size estimate.\n     *\n     * <p>The spliterator is not\n     * <em><a href=\"Spliterator.html#binding\">late-binding</a></em>, inherits\n     * the <em>fail-fast</em> properties of the iterator, and implements\n     * {@code trySplit} to permit limited parallelism.\n     *\n     * <p>Traversal of elements should be accomplished through the spliterator.\n     * The behaviour of splitting and traversal is undefined if the iterator is\n     * operated on after the spliterator is returned.\n     *\n     * @param iterator The iterator for the source\n     * @param characteristics Characteristics of this spliterator's source\n     *        or elements ({@code SIZED} and {@code SUBSIZED}, if supplied, are\n     *        ignored and are not reported.)\n     * @return A spliterator from an iterator\n     * @throws NullPointerException if the given iterator is {@code null}\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Iterator<T> iterator(Spliterator<? extends T> spliterator)",
    "returnType" : "Iterator<T>",
    "comment" : "\n     * Creates an {@code Iterator} from a {@code Spliterator}.\n     *\n     * <p>Traversal of elements should be accomplished through the iterator.\n     * The behaviour of traversal is undefined if the spliterator is operated\n     * after the iterator is returned.\n     *\n     * @param <T> Type of elements\n     * @param spliterator The spliterator\n     * @return An iterator\n     * @throws NullPointerException if the given spliterator is {@code null}\n     ",
    "links" : [ ]
  }, {
    "name" : "public static PrimitiveIterator.OfInt iterator(Spliterator.OfInt spliterator)",
    "returnType" : "PrimitiveIterator.OfInt",
    "comment" : "\n     * Creates an {@code PrimitiveIterator.OfInt} from a\n     * {@code Spliterator.OfInt}.\n     *\n     * <p>Traversal of elements should be accomplished through the iterator.\n     * The behaviour of traversal is undefined if the spliterator is operated\n     * after the iterator is returned.\n     *\n     * @param spliterator The spliterator\n     * @return An iterator\n     * @throws NullPointerException if the given spliterator is {@code null}\n     ",
    "links" : [ ]
  }, {
    "name" : "public static PrimitiveIterator.OfLong iterator(Spliterator.OfLong spliterator)",
    "returnType" : "PrimitiveIterator.OfLong",
    "comment" : "\n     * Creates an {@code PrimitiveIterator.OfLong} from a\n     * {@code Spliterator.OfLong}.\n     *\n     * <p>Traversal of elements should be accomplished through the iterator.\n     * The behaviour of traversal is undefined if the spliterator is operated\n     * after the iterator is returned.\n     *\n     * @param spliterator The spliterator\n     * @return An iterator\n     * @throws NullPointerException if the given spliterator is {@code null}\n     ",
    "links" : [ ]
  }, {
    "name" : "public static PrimitiveIterator.OfDouble iterator(Spliterator.OfDouble spliterator)",
    "returnType" : "PrimitiveIterator.OfDouble",
    "comment" : "\n     * Creates an {@code PrimitiveIterator.OfDouble} from a\n     * {@code Spliterator.OfDouble}.\n     *\n     * <p>Traversal of elements should be accomplished through the iterator.\n     * The behaviour of traversal is undefined if the spliterator is operated\n     * after the iterator is returned.\n     *\n     * @param spliterator The spliterator\n     * @return An iterator\n     * @throws NullPointerException if the given spliterator is {@code null}\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static Spliterator<T> emptySpliterator()", "public static Spliterator.OfInt emptyIntSpliterator()", "public static Spliterator.OfLong emptyLongSpliterator()", "public static Spliterator.OfDouble emptyDoubleSpliterator()", "public static Spliterator<T> spliterator(Object[] array, int additionalCharacteristics)", "public static Spliterator<T> spliterator(Object[] array, int fromIndex, int toIndex, int additionalCharacteristics)", "public static Spliterator.OfInt spliterator(int[] array, int additionalCharacteristics)", "public static Spliterator.OfInt spliterator(int[] array, int fromIndex, int toIndex, int additionalCharacteristics)", "public static Spliterator.OfLong spliterator(long[] array, int additionalCharacteristics)", "public static Spliterator.OfLong spliterator(long[] array, int fromIndex, int toIndex, int additionalCharacteristics)", "public static Spliterator.OfDouble spliterator(double[] array, int additionalCharacteristics)", "public static Spliterator.OfDouble spliterator(double[] array, int fromIndex, int toIndex, int additionalCharacteristics)", "private static void checkFromToBounds(int arrayLength, int origin, int fence)", "public static Spliterator<T> spliterator(Collection<? extends T> c, int characteristics)", "public static Spliterator<T> spliterator(Iterator<? extends T> iterator, long size, int characteristics)", "public static Spliterator<T> spliteratorUnknownSize(Iterator<? extends T> iterator, int characteristics)", "public static Spliterator.OfInt spliterator(PrimitiveIterator.OfInt iterator, long size, int characteristics)", "public static Spliterator.OfInt spliteratorUnknownSize(PrimitiveIterator.OfInt iterator, int characteristics)", "public static Spliterator.OfLong spliterator(PrimitiveIterator.OfLong iterator, long size, int characteristics)", "public static Spliterator.OfLong spliteratorUnknownSize(PrimitiveIterator.OfLong iterator, int characteristics)", "public static Spliterator.OfDouble spliterator(PrimitiveIterator.OfDouble iterator, long size, int characteristics)", "public static Spliterator.OfDouble spliteratorUnknownSize(PrimitiveIterator.OfDouble iterator, int characteristics)", "public static Iterator<T> iterator(Spliterator<? extends T> spliterator)", "public static PrimitiveIterator.OfInt iterator(Spliterator.OfInt spliterator)", "public static PrimitiveIterator.OfLong iterator(Spliterator.OfLong spliterator)", "public static PrimitiveIterator.OfDouble iterator(Spliterator.OfDouble spliterator)" ],
  "variableNames" : [ "EMPTY_SPLITERATOR", "EMPTY_INT_SPLITERATOR", "EMPTY_LONG_SPLITERATOR", "EMPTY_DOUBLE_SPLITERATOR" ]
}