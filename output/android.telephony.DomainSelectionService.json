{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/telephony/DomainSelectionService.java",
  "packageName" : "android.telephony",
  "className" : "DomainSelectionService",
  "comment" : "\n * Base domain selection implementation.\n * <p>\n * Services that extend {@link DomainSelectionService} must register the service in their\n * AndroidManifest.xml to be detected by the framework.\n * <p>\n * 1) The application must declare that they use the\n * android.permission.BIND_DOMAIN_SELECTION_SERVICE permission.\n * <p>\n * 2) The DomainSelectionService definition in the manifest must follow this format:\n * <pre>\n * {@code\n * ...\n * <service android:name=\".EgDomainSelectionService\"\n *    android:permission=\"android.permission.BIND_DOMAIN_SELECTION_SERVICE\" >\n *    <intent-filter>\n *       <action android:name=\"android.telephony.DomainSelectionService\" />\n *    </intent-filter>\n * </service>\n * ...\n * }\n * </pre>\n * <p>\n * The ComponentName corresponding to this DomainSelectionService component MUST also be set\n * as the system domain selection implementation in order to be bound.\n * The system domain selection implementation is set in the device overlay for\n * {@code config_domain_selection_service_component_name}\n * in {@code packages/services/Telephony/res/values/config.xml}.\n *\n * @hide\n ",
  "links" : [ "android.telephony.DomainSelectionService" ],
  "variables" : [ {
    "name" : "LOG_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SERVICE_INTERFACE",
    "type" : "String",
    "comment" : "\n     * The intent that must be defined as an intent-filter in the AndroidManifest of the\n     * {@link DomainSelectionService}.\n     *\n     * @hide\n     ",
    "links" : [ "android.telephony.DomainSelectionService" ]
  }, {
    "name" : "SELECTOR_TYPE_CALLING",
    "type" : "int",
    "comment" : " Indicates the domain selector type for calling. ",
    "links" : [ ]
  }, {
    "name" : "SELECTOR_TYPE_SMS",
    "type" : "int",
    "comment" : " Indicates the domain selector type for sms. ",
    "links" : [ ]
  }, {
    "name" : "SCAN_TYPE_NO_PREFERENCE",
    "type" : "int",
    "comment" : " Indicates that the modem can scan for emergency service as per modemâ€™s implementation. ",
    "links" : [ ]
  }, {
    "name" : "SCAN_TYPE_LIMITED_SERVICE",
    "type" : "int",
    "comment" : " Indicates that the modem will scan for emergency service in limited service mode. ",
    "links" : [ ]
  }, {
    "name" : "SCAN_TYPE_FULL_SERVICE",
    "type" : "int",
    "comment" : " Indicates that the modem will scan for emergency service in full service mode. ",
    "links" : [ ]
  }, {
    "name" : "mExecutorLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExecutor",
    "type" : "Executor",
    "comment" : " Executor used to execute methods called remotely by the framework. ",
    "links" : [ ]
  }, {
    "name" : "mDomainSelectionServiceController",
    "type" : "IBinder",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public abstract void onDomainSelection(@NonNull SelectionAttributes attr, @NonNull TransportSelectorCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Selects a calling domain given the SelectionAttributes of the call request.\n     * <p>\n     * When the framework generates a request to place a call, {@link #onDomainSelection}\n     * will be called in order to determine the domain (CS or PS). For PS calls, the transport\n     * (WWAN or WLAN) will also need to be determined.\n     * <p>\n     * Once the domain/transport has been selected or an error has occurred,\n     * {@link TransportSelectorCallback} must be used to communicate the result back\n     * to the framework.\n     *\n     * @param attr Required to determine the domain.\n     * @param callback The callback instance being registered.\n     ",
    "links" : [ "com.android.internal.telephony.ITransportSelectorCallback", "#onDomainSelection" ]
  }, {
    "name" : "public void onServiceStateUpdated(int slotIndex, int subscriptionId, @NonNull ServiceState serviceState)",
    "returnType" : "void",
    "comment" : "\n     * Notifies the change in {@link ServiceState} for a specific logical slot index.\n     *\n     * @param slotIndex For which the state changed.\n     * @param subscriptionId For which the state changed.\n     * @param serviceState Updated {@link ServiceState}.\n     ",
    "links" : [ "android.telephony.ServiceState" ]
  }, {
    "name" : "public void onBarringInfoUpdated(int slotIndex, int subscriptionId, @NonNull BarringInfo info)",
    "returnType" : "void",
    "comment" : "\n     * Notifies the change in {@link BarringInfo} for a specific logical slot index.\n     *\n     * @param slotIndex For which the state changed.\n     * @param subscriptionId For which the state changed.\n     * @param info Updated {@link BarringInfo}.\n     ",
    "links" : [ "android.telephony.BarringInfo" ]
  }, {
    "name" : "private static void executeMethodAsync(@NonNull Executor executor, @NonNull Runnable r, @NonNull String tag, @NonNull String errorLogName) throws RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void executeMethodAsyncNoException(@NonNull Executor executor, @NonNull Runnable r, @NonNull String tag, @NonNull String errorLogName)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final IBinder onBind(@Nullable Intent intent)",
    "returnType" : "IBinder",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public Executor getCreateExecutor()",
    "returnType" : "Executor",
    "comment" : "\n     * The Executor to use when calling callback methods from the framework.\n     * <p>\n     * By default, calls from the framework will use Binder threads to call these methods.\n     *\n     * @return an {@link Executor} used to execute methods called remotely by the framework.\n     ",
    "links" : [ "java.util.concurrent.Executor" ]
  }, {
    "name" : "public final Executor getCachedExecutor()",
    "returnType" : "Executor",
    "comment" : "\n     * Gets the {@link Executor} which executes methods of this service.\n     * This method should be private when this service is implemented in a separated process\n     * other than telephony framework.\n     * @return {@link Executor} instance.\n     * @hide\n     ",
    "links" : [ "java.util.concurrent.Executor" ]
  }, {
    "name" : "public static String getDomainName(@NetworkRegistrationInfo.Domain int domain)",
    "returnType" : "String",
    "comment" : "\n     * Returns a string representation of the domain.\n     * @param domain The domain.\n     * @return The name of the domain.\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public abstract void onDomainSelection(@NonNull SelectionAttributes attr, @NonNull TransportSelectorCallback callback)", "public void onServiceStateUpdated(int slotIndex, int subscriptionId, @NonNull ServiceState serviceState)", "public void onBarringInfoUpdated(int slotIndex, int subscriptionId, @NonNull BarringInfo info)", "private static void executeMethodAsync(@NonNull Executor executor, @NonNull Runnable r, @NonNull String tag, @NonNull String errorLogName) throws RemoteException", "private void executeMethodAsyncNoException(@NonNull Executor executor, @NonNull Runnable r, @NonNull String tag, @NonNull String errorLogName)", "public final IBinder onBind(@Nullable Intent intent)", "public Executor getCreateExecutor()", "public final Executor getCachedExecutor()", "public static String getDomainName(@NetworkRegistrationInfo.Domain int domain)" ],
  "variableNames" : [ "LOG_TAG", "SERVICE_INTERFACE", "SELECTOR_TYPE_CALLING", "SELECTOR_TYPE_SMS", "SCAN_TYPE_NO_PREFERENCE", "SCAN_TYPE_LIMITED_SERVICE", "SCAN_TYPE_FULL_SERVICE", "mExecutorLock", "mExecutor", "mDomainSelectionServiceController" ]
}