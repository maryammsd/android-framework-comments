{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/MediaCommunicationManager.java",
  "packageName" : "android.media",
  "className" : "MediaCommunicationManager",
  "comment" : "\n * Provides support for interacting with {@link android.media.MediaSession2 MediaSession2s}\n * that applications have published to express their ongoing media playback state.\n ",
  "links" : [ "android.media.MediaSession2" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VERSION_1",
    "type" : "int",
    "comment" : "\n     * The manager version used from beginning.\n     ",
    "links" : [ ]
  }, {
    "name" : "CURRENT_VERSION",
    "type" : "int",
    "comment" : "\n     * Current manager version.\n     ",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IMediaCommunicationService",
    "comment" : " Do not access directly use getService().",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTokenCallbackRecords",
    "type" : "CopyOnWriteArrayList<SessionCallbackRecord>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallbackStub",
    "type" : "MediaCommunicationServiceCallbackStub",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMediaSessionManager",
    "type" : "MediaSessionManager",
    "comment" : " TODO: remove this when MCS implements dispatchMediaKeyEvent.",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getVersion()",
    "returnType" : "int",
    "comment" : "\n     * Gets the version of this {@link MediaCommunicationManager}.\n     ",
    "links" : [ "android.media.MediaCommunicationManager" ]
  }, {
    "name" : "public void notifySession2Created(@NonNull Session2Token token)",
    "returnType" : "void",
    "comment" : "\n     * Notifies that a new {@link MediaSession2} with type {@link Session2Token#TYPE_SESSION} is\n     * created.\n     * @param token newly created session2 token\n     * @hide\n     ",
    "links" : [ "android.media.MediaSession2", "android.media.Session2Token#TYPE_SESSION" ]
  }, {
    "name" : "public boolean isTrustedForMediaControl(@NonNull MediaSessionManager.RemoteUserInfo userInfo)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks whether the remote user is a trusted app.\n     * <p>\n     * An app is trusted if the app holds the\n     * {@link android.Manifest.permission#MEDIA_CONTENT_CONTROL} permission or has an enabled\n     * notification listener.\n     *\n     * @param userInfo The remote user info from either\n     *            {@link MediaSession#getCurrentControllerInfo()} or\n     *            {@link MediaBrowserService#getCurrentBrowserInfo()}.\n     * @return {@code true} if the remote user is trusted or {@code false} otherwise.\n     * @hide\n     ",
    "links" : [ "android.media.session.MediaSession#getCurrentControllerInfo()", "android.service.media.MediaBrowserService#getCurrentBrowserInfo()", "android.Manifest.permission#MEDIA_CONTENT_CONTROL" ]
  }, {
    "name" : "public List<Session2Token> getSession2Tokens()",
    "returnType" : "List<Session2Token>",
    "comment" : "\n     * This API is not generally intended for third party application developers.\n     * Use the <a href=\"{@docRoot}jetpack/androidx.html\">AndroidX</a>\n     * <a href=\"{@docRoot}reference/androidx/media2/session/package-summary.html\">Media2 session\n     * Library</a> for consistent behavior across all devices.\n     * <p>\n     * Gets a list of {@link Session2Token} with type {@link Session2Token#TYPE_SESSION} for the\n     * current user.\n     * <p>\n     * Although this API can be used without any restriction, each session owners can accept or\n     * reject your uses of {@link MediaSession2}.\n     *\n     * @return A list of {@link Session2Token}.\n     ",
    "links" : [ "android.media.Session2Token", "android.media.Session2Token#TYPE_SESSION", "android.media.MediaSession2" ]
  }, {
    "name" : "public void registerSessionCallback(@CallbackExecutor @NonNull Executor executor, @NonNull SessionCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Adds a callback to be notified when the list of active sessions changes.\n     * <p>\n     * This requires the {@link android.Manifest.permission#MEDIA_CONTENT_CONTROL} permission be\n     * held by the calling app.\n     * </p>\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission#MEDIA_CONTENT_CONTROL" ]
  }, {
    "name" : "public void unregisterSessionCallback(@NonNull SessionCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Stops receiving active sessions updates on the specified callback.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private IMediaCommunicationService getService()",
    "returnType" : "IMediaCommunicationService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private MediaSessionManager getMediaSessionManager()",
    "returnType" : "MediaSessionManager",
    "comment" : " TODO: remove this when MCS implements dispatchMediaKeyEvent.",
    "links" : [ ]
  }, {
    "name" : "private List<Session2Token> getSession2Tokens(int userId)",
    "returnType" : "List<Session2Token>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dispatchMediaKeyEvent(@NonNull KeyEvent keyEvent, boolean asSystemService)",
    "returnType" : "void",
    "comment" : "\n     * Sends a media key event. The receiver will be selected automatically.\n     *\n     * @param keyEvent the key event to send, non-media key events will be ignored.\n     * @param asSystemService if {@code true}, the event is sent to the session as if it was come\n     *                        from the system service instead of the app process. It only affects\n     *                        {@link MediaSession.Callback#getCurrentControllerInfo()}.\n     * @hide\n     ",
    "links" : [ "MediaSession.Callback#getCurrentControllerInfo()" ]
  } ],
  "methodNames" : [ "public int getVersion()", "public void notifySession2Created(@NonNull Session2Token token)", "public boolean isTrustedForMediaControl(@NonNull MediaSessionManager.RemoteUserInfo userInfo)", "public List<Session2Token> getSession2Tokens()", "public void registerSessionCallback(@CallbackExecutor @NonNull Executor executor, @NonNull SessionCallback callback)", "public void unregisterSessionCallback(@NonNull SessionCallback callback)", "private IMediaCommunicationService getService()", "private MediaSessionManager getMediaSessionManager()", "private List<Session2Token> getSession2Tokens(int userId)", "public void dispatchMediaKeyEvent(@NonNull KeyEvent keyEvent, boolean asSystemService)" ],
  "variableNames" : [ "TAG", "VERSION_1", "CURRENT_VERSION", "mContext", "mService", "mLock", "mTokenCallbackRecords", "mCallbackStub", "mMediaSessionManager" ]
}