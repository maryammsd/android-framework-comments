{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/text/RBBINode.java",
  "packageName" : "android.icu.text",
  "className" : "RBBINode",
  "comment" : "\n *   This class represents a node in the parse tree created by the RBBI Rule compiler.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "setRef",
    "type" : "int",
    "comment" : "   enum NodeType {",
    "links" : [ ]
  }, {
    "name" : "uset",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "varRef",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "leafChar",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "lookAhead",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "tag",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "endMark",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "opStart",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "opCat",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "opOr",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "opStar",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "opPlus",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "opQuestion",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "opBreak",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "opReverse",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "opLParen",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "nodeTypeLimit",
    "type" : "int",
    "comment" : "  For Assertion checking only.",
    "links" : [ ]
  }, {
    "name" : "nodeTypeNames",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "precZero",
    "type" : "int",
    "comment" : "    enum OpPrecedence {",
    "links" : [ ]
  }, {
    "name" : "precStart",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "precLParen",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "precOpOr",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "precOpCat",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "fType",
    "type" : "int",
    "comment" : " enum NodeType",
    "links" : [ ]
  }, {
    "name" : "fParent",
    "type" : "RBBINode",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "fLeftChild",
    "type" : "RBBINode",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "fRightChild",
    "type" : "RBBINode",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "fInputSet",
    "type" : "UnicodeSet",
    "comment" : " For uset nodes only.",
    "links" : [ ]
  }, {
    "name" : "fPrecedence",
    "type" : "int",
    "comment" : " enum OpPrecedence, For binary ops only.",
    "links" : [ ]
  }, {
    "name" : "fText",
    "type" : "String",
    "comment" : " Text corresponding to this node.",
    "links" : [ ]
  }, {
    "name" : "fFirstPos",
    "type" : "int",
    "comment" : " Position in the rule source string of the",
    "links" : [ ]
  }, {
    "name" : "fLastPos",
    "type" : "int",
    "comment" : "  Last position in the rule source string",
    "links" : [ ]
  }, {
    "name" : "fNullable",
    "type" : "boolean",
    "comment" : "  See Aho DFA table generation algorithm",
    "links" : [ ]
  }, {
    "name" : "fVal",
    "type" : "int",
    "comment" : " For leafChar nodes, the value.",
    "links" : [ ]
  }, {
    "name" : "fLookAheadEnd",
    "type" : "boolean",
    "comment" : " For endMark nodes, set true if",
    "links" : [ ]
  }, {
    "name" : "fRuleRoot",
    "type" : "boolean",
    "comment" : " True if this node is the root of a rule.",
    "links" : [ ]
  }, {
    "name" : "fChainIn",
    "type" : "boolean",
    "comment" : " True if chaining into this rule is allowed",
    "links" : [ ]
  }, {
    "name" : "fFirstPosSet",
    "type" : "Set<RBBINode>",
    "comment" : " See Aho DFA table generation algorithm",
    "links" : [ ]
  }, {
    "name" : "fLastPosSet",
    "type" : "Set<RBBINode>",
    "comment" : " See Aho.",
    "links" : [ ]
  }, {
    "name" : "fFollowPos",
    "type" : "Set<RBBINode>",
    "comment" : " See Aho.",
    "links" : [ ]
  }, {
    "name" : "fSerialNum",
    "type" : "int",
    "comment" : "  Debugging aids.  Each node gets a unique serial number.",
    "links" : [ ]
  }, {
    "name" : "gLastSerial",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "kRecursiveDepthLimit",
    "type" : "int",
    "comment" : "-------------------------------------------------------------------------",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " RBBINode cloneTree()",
    "returnType" : "RBBINode",
    "comment" : "-------------------------------------------------------------------------",
    "links" : [ ]
  }, {
    "name" : " RBBINode flattenVariables(int depth)",
    "returnType" : "RBBINode",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void flattenSets()",
    "returnType" : "void",
    "comment" : "-------------------------------------------------------------------------",
    "links" : [ ]
  }, {
    "name" : " void findNodes(List<RBBINode> dest, int kind)",
    "returnType" : "void",
    "comment" : "-------------------------------------------------------------------------",
    "links" : [ ]
  }, {
    "name" : " static void printNode(RBBINode n)",
    "returnType" : "void",
    "comment" : "/CLOVER:OFF",
    "links" : [ ]
  }, {
    "name" : " static void printString(String s, int minWidth)",
    "returnType" : "void",
    "comment" : "/CLOVER:OFF",
    "links" : [ ]
  }, {
    "name" : " static void printInt(int i, int minWidth)",
    "returnType" : "void",
    "comment" : "/CLOVER:OFF",
    "links" : [ ]
  }, {
    "name" : " static void printHex(int i, int minWidth)",
    "returnType" : "void",
    "comment" : "/CLOVER:OFF",
    "links" : [ ]
  }, {
    "name" : " void printTree(boolean printHeading)",
    "returnType" : "void",
    "comment" : "/CLOVER:OFF",
    "links" : [ ]
  } ],
  "methodNames" : [ " RBBINode cloneTree()", " RBBINode flattenVariables(int depth)", " void flattenSets()", " void findNodes(List<RBBINode> dest, int kind)", " static void printNode(RBBINode n)", " static void printString(String s, int minWidth)", " static void printInt(int i, int minWidth)", " static void printHex(int i, int minWidth)", " void printTree(boolean printHeading)" ],
  "variableNames" : [ "setRef", "uset", "varRef", "leafChar", "lookAhead", "tag", "endMark", "opStart", "opCat", "opOr", "opStar", "opPlus", "opQuestion", "opBreak", "opReverse", "opLParen", "nodeTypeLimit", "nodeTypeNames", "precZero", "precStart", "precLParen", "precOpOr", "precOpCat", "fType", "fParent", "fLeftChild", "fRightChild", "fInputSet", "fPrecedence", "fText", "fFirstPos", "fLastPos", "fNullable", "fVal", "fLookAheadEnd", "fRuleRoot", "fChainIn", "fFirstPosSet", "fLastPosSet", "fFollowPos", "fSerialNum", "gLastSerial", "kRecursiveDepthLimit" ]
}