{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/net/nsd/NsdServiceInfo.java",
  "packageName" : "android.net.nsd",
  "className" : "NsdServiceInfo",
  "comment" : "\n * A class representing service information for network service discovery\n * {@see NsdManager}\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mServiceName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mServiceType",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTxtRecord",
    "type" : "ArrayMap<String, byte[]>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHost",
    "type" : "InetAddress",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPort",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<NsdServiceInfo>",
    "comment" : " Implement the Parcelable interface ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String getServiceName()",
    "returnType" : "String",
    "comment" : " Get the service name ",
    "links" : [ ]
  }, {
    "name" : "public void setServiceName(String s)",
    "returnType" : "void",
    "comment" : " Set the service name ",
    "links" : [ ]
  }, {
    "name" : "public String getServiceType()",
    "returnType" : "String",
    "comment" : " Get the service type ",
    "links" : [ ]
  }, {
    "name" : "public void setServiceType(String s)",
    "returnType" : "void",
    "comment" : " Set the service type ",
    "links" : [ ]
  }, {
    "name" : "public InetAddress getHost()",
    "returnType" : "InetAddress",
    "comment" : " Get the host address. The host address is valid for a resolved service. ",
    "links" : [ ]
  }, {
    "name" : "public void setHost(InetAddress s)",
    "returnType" : "void",
    "comment" : " Set the host address ",
    "links" : [ ]
  }, {
    "name" : "public int getPort()",
    "returnType" : "int",
    "comment" : " Get port number. The port number is valid for a resolved service. ",
    "links" : [ ]
  }, {
    "name" : "public void setPort(int p)",
    "returnType" : "void",
    "comment" : " Set port number ",
    "links" : [ ]
  }, {
    "name" : "public void setTxtRecords(@NonNull String rawRecords)",
    "returnType" : "void",
    "comment" : "\n     * Unpack txt information from a base-64 encoded byte array.\n     *\n     * @param rawRecords The raw base64 encoded records string read from netd.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAttribute(String key, byte[] value)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setAttribute(String key, String value)",
    "returnType" : "void",
    "comment" : "\n     * Add a service attribute as a key/value pair.\n     *\n     * <p> Service attributes are included as DNS-SD TXT record pairs.\n     *\n     * <p> The key must be US-ASCII printable characters, excluding the '=' character.  Values may\n     * be UTF-8 strings or null.  The total length of key + value must be less than 255 bytes.\n     *\n     * <p> Keys should be short, ideally no more than 9 characters, and unique per instance of\n     * {@link NsdServiceInfo}.  Calling {@link #setAttribute} twice with the same key will overwrite\n     * first value.\n     ",
    "links" : [ "NsdServiceInfo", "#setAttribute" ]
  }, {
    "name" : "public void removeAttribute(String key)",
    "returnType" : "void",
    "comment" : " Remove an attribute by key ",
    "links" : [ ]
  }, {
    "name" : "public Map<String, byte[]> getAttributes()",
    "returnType" : "Map<String, byte[]>",
    "comment" : "\n     * Retrieve attributes as a map of String keys to byte[] values. The attributes map is only\n     * valid for a resolved service.\n     *\n     * <p> The returned map is unmodifiable; changes must be made through {@link #setAttribute} and\n     * {@link #removeAttribute}.\n     ",
    "links" : [ "#setAttribute", "#removeAttribute" ]
  }, {
    "name" : "private int getTxtRecordSize()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public byte[] getTxtRecord()",
    "returnType" : "byte[]",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : " Implement the Parcelable interface ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : " Implement the Parcelable interface ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "mServiceName", "mServiceType", "mTxtRecord", "mHost", "mPort", "CREATOR" ],
  "methodNames" : [ "public String getServiceName()", "public void setServiceName(String s)", "public String getServiceType()", "public void setServiceType(String s)", "public InetAddress getHost()", "public void setHost(InetAddress s)", "public int getPort()", "public void setPort(int p)", "public void setTxtRecords(@NonNull String rawRecords)", "public void setAttribute(String key, byte[] value)", "public void setAttribute(String key, String value)", "public void removeAttribute(String key)", "public Map<String, byte[]> getAttributes()", "private int getTxtRecordSize()", "public byte[] getTxtRecord()", "public String toString()", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)" ]
}