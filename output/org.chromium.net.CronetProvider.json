{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/chromium/net/CronetProvider.java",
  "packageName" : "org.chromium.net",
  "className" : "CronetProvider",
  "comment" : "\n * Provides a factory method to create {@link CronetEngine.Builder} instances. A {@code\n * CronetEngine.Builder} instance can be used to create a specific {@link CronetEngine}\n * implementation. To get the list of available {@link CronetProvider}s call {@link\n * #getAllProviders(Context)}.\n * <p/>\n * <b>NOTE:</b> This class is for advanced users that want to select a particular\n * Cronet implementation. Most users should simply use {@code new} {@link\n * CronetEngine.Builder#CronetEngine.Builder(android.content.Context)}.\n *\n * {@hide}\n ",
  "links" : [ "org.chromium.net.CronetEngine", "CronetEngine.Builder", "#getAllProviders(Context)", "CronetEngine.Builder#CronetEngine.Builder(android.content.Context)", "org.chromium.net.CronetProvider" ],
  "variables" : [ {
    "name" : "PROVIDER_NAME_APP_PACKAGED",
    "type" : "String",
    "comment" : "\n     * String returned by {@link CronetProvider#getName} for {@link CronetProvider} that provides\n     * native Cronet implementation packaged inside an application. This implementation offers\n     * significantly higher performance relative to the fallback Cronet implementations (see {@link\n     * #PROVIDER_NAME_FALLBACK}).\n     ",
    "links" : [ "org.chromium.net.CronetProvider#getName", "org.chromium.net.CronetProvider", "#PROVIDER_NAME_FALLBACK" ]
  }, {
    "name" : "PROVIDER_NAME_FALLBACK",
    "type" : "String",
    "comment" : "\n     * String returned by {@link CronetProvider#getName} for {@link CronetProvider} that provides\n     * Cronet implementation based on the system's {@link java.net.HttpURLConnection}\n     * implementation. This implementation offers significantly degraded performance relative to\n     * native Cronet implementations (see {@link #PROVIDER_NAME_APP_PACKAGED}).\n     ",
    "links" : [ "java.net.HttpURLConnection", "org.chromium.net.CronetProvider#getName", "#PROVIDER_NAME_APP_PACKAGED", "org.chromium.net.CronetProvider" ]
  }, {
    "name" : "RES_KEY_CRONET_IMPL_CLASS",
    "type" : "String",
    "comment" : "\n     * The name of an optional key in the app string resource file that contains the class name of\n     * an alternative {@code CronetProvider} implementation.\n     ",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HTTPENGINE_NATIVE_PROVIDER_CLASS",
    "type" : "String",
    "comment" : " Name of the HttpEngine Native {@link CronetProvider} class. ",
    "links" : [ "org.chromium.net.CronetProvider" ]
  }, {
    "name" : "JAVA_CRONET_PROVIDER_CLASS",
    "type" : "String",
    "comment" : " Name of the Java {@link CronetProvider} class. ",
    "links" : [ "org.chromium.net.CronetProvider" ]
  }, {
    "name" : "NATIVE_CRONET_PROVIDER_CLASS",
    "type" : "String",
    "comment" : " Name of the native {@link CronetProvider} class. ",
    "links" : [ "org.chromium.net.CronetProvider" ]
  }, {
    "name" : "PLAY_SERVICES_CRONET_PROVIDER_CLASS",
    "type" : "String",
    "comment" : " {@link CronetProvider} class that is packaged with Google Play Services. ",
    "links" : [ "org.chromium.net.CronetProvider" ]
  }, {
    "name" : "GMS_CORE_CRONET_PROVIDER_CLASS",
    "type" : "String",
    "comment" : "\n     * {@link CronetProvider} a deprecated class that may be packaged with some old versions of\n     * Google Play Services.\n     ",
    "links" : [ "org.chromium.net.CronetProvider" ]
  } ],
  "methods" : [ {
    "name" : "public abstract CronetEngine.Builder createBuilder()",
    "returnType" : "CronetEngine.Builder",
    "comment" : "\n     * Creates and returns an instance of {@link CronetEngine.Builder}.\n     * <p/>\n     * <b>NOTE:</b> This class is for advanced users that want to select a particular\n     * Cronet implementation. Most users should simply use {@code new} {@link\n     * CronetEngine.Builder#CronetEngine.Builder(android.content.Context)}.\n     *\n     * @return {@code CronetEngine.Builder}.\n     * @throws IllegalStateException if the provider is not enabled (see {@link #isEnabled}.\n     ",
    "links" : [ "CronetEngine.Builder", "CronetEngine.Builder#CronetEngine.Builder(android.content.Context)", "#isEnabled" ]
  }, {
    "name" : "public abstract String getName()",
    "returnType" : "String",
    "comment" : "\n     * Returns the provider name. The well-know provider names include:\n     * <ul>\n     *     <li>{@link #PROVIDER_NAME_APP_PACKAGED}</li>\n     *     <li>{@link #PROVIDER_NAME_FALLBACK}</li>\n     * </ul>\n     *\n     * @return provider name.\n     ",
    "links" : [ "#PROVIDER_NAME_APP_PACKAGED", "#PROVIDER_NAME_FALLBACK" ]
  }, {
    "name" : "public abstract String getVersion()",
    "returnType" : "String",
    "comment" : "\n     * Returns the provider version. The version can be used to select the newest available provider\n     * if multiple providers are available.\n     *\n     * @return provider version.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean isEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the provider is enabled and can be used to instantiate the Cronet engine. A\n     * provider being out-of-date (older than the API) and needing updating is one potential reason\n     * it could be disabled. Please read the provider documentation for enablement procedure.\n     *\n     * @return {@code true} if the provider is enabled.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static List<CronetProvider> getAllProviders(Context context)",
    "returnType" : "List<CronetProvider>",
    "comment" : "\n     * Returns an unmodifiable list of all available {@link CronetProvider}s. The providers are\n     * returned in no particular order. Some of the returned providers may be in a disabled state\n     * and should be enabled by the invoker. See {@link CronetProvider#isEnabled()}.\n     *\n     * @return the list of available providers.\n     ",
    "links" : [ "org.chromium.net.CronetProvider#isEnabled()", "org.chromium.net.CronetProvider" ]
  }, {
    "name" : "private static boolean addCronetProviderImplByClassName(Context context, String className, Set<CronetProvider> providers, boolean logError)",
    "returnType" : "boolean",
    "comment" : "\n     * Attempts to add a new provider referenced by the class name to a set.\n     *\n     * @param className the class name of the provider that should be instantiated.\n     * @param providers the set of providers to add the new provider to.\n     * @return {@code true} if the provider was added to the set; {@code false} if the provider\n     * couldn't be instantiated.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void logReflectiveOperationException(String className, boolean logError, Exception e)",
    "returnType" : "void",
    "comment" : "\n     * De-duplicates exception handling logic in {@link #addCronetProviderImplByClassName}. It\n     * should be removed when support of API Levels lower than 19 is deprecated.\n     ",
    "links" : [ "#addCronetProviderImplByClassName" ]
  }, {
    "name" : "private static boolean addCronetProviderFromResourceFile(Context context, Set<CronetProvider> providers)",
    "returnType" : "boolean",
    "comment" : " looking up resources from other apps requires the use of getIdentifier()",
    "links" : [ ]
  } ],
  "methodNames" : [ "public abstract CronetEngine.Builder createBuilder()", "public abstract String getName()", "public abstract String getVersion()", "public abstract boolean isEnabled()", "public String toString()", "public static List<CronetProvider> getAllProviders(Context context)", "private static boolean addCronetProviderImplByClassName(Context context, String className, Set<CronetProvider> providers, boolean logError)", "private static void logReflectiveOperationException(String className, boolean logError, Exception e)", "private static boolean addCronetProviderFromResourceFile(Context context, Set<CronetProvider> providers)" ],
  "variableNames" : [ "PROVIDER_NAME_APP_PACKAGED", "PROVIDER_NAME_FALLBACK", "RES_KEY_CRONET_IMPL_CLASS", "TAG", "mContext", "HTTPENGINE_NATIVE_PROVIDER_CLASS", "JAVA_CRONET_PROVIDER_CLASS", "NATIVE_CRONET_PROVIDER_CLASS", "PLAY_SERVICES_CRONET_PROVIDER_CLASS", "GMS_CORE_CRONET_PROVIDER_CLASS" ]
}