{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/service/voice/HotwordAudioStream.java",
  "packageName" : "android.service.voice",
  "className" : "Builder",
  "comment" : "\n     * A builder for {@link HotwordAudioStream}\n     ",
  "links" : [ "android.service.voice.HotwordAudioStream" ],
  "variables" : [ {
    "name" : "mAudioFormat",
    "type" : "AudioFormat",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAudioStreamParcelFileDescriptor",
    "type" : "ParcelFileDescriptor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTimestamp",
    "type" : "AudioTimestamp",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMetadata",
    "type" : "PersistableBundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInitialAudio",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBuilderFieldsSet",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Builder setAudioFormat(@NonNull AudioFormat value)",
    "returnType" : "Builder",
    "comment" : "\n         * The {@link AudioFormat} of the audio stream.\n         ",
    "links" : [ "android.media.AudioFormat" ]
  }, {
    "name" : "public Builder setAudioStreamParcelFileDescriptor(@NonNull ParcelFileDescriptor value)",
    "returnType" : "Builder",
    "comment" : "\n         * This stream typically starts with the audio bytes used for hotword detection, but continues\n         * streaming the audio (e.g., with the query) until the stream is shutdown by the\n         * {@link HotwordDetectionService}. The data format is expected to match\n         * {@link #getAudioFormat()}.\n         *\n         * <p>\n         * Alternatively, the {@link HotwordDetectionService} may use {@link #getInitialAudio()}\n         * to pass the start of the audio instead of streaming it here. This may prevent added latency\n         * caused by the streaming buffer (see {@link #KEY_AUDIO_STREAM_COPY_BUFFER_LENGTH_BYTES}) not\n         * being large enough to handle this initial chunk of audio.\n         * </p>\n         ",
    "links" : [ "android.service.voice.HotwordDetectionService", "#getInitialAudio()", "#KEY_AUDIO_STREAM_COPY_BUFFER_LENGTH_BYTES", "#getAudioFormat()" ]
  }, {
    "name" : "public Builder setTimestamp(@NonNull AudioTimestamp value)",
    "returnType" : "Builder",
    "comment" : "\n         * The timestamp when the audio stream was captured by the Audio platform.\n         *\n         * <p>\n         * The {@link HotwordDetectionService} egressing the audio is the owner of the underlying\n         * AudioRecord. The {@link HotwordDetectionService} is expected to optionally populate this\n         * field by {@link AudioRecord#getTimestamp}.\n         * </p>\n         *\n         * <p>\n         * This timestamp can be used in conjunction with the\n         * {@link HotwordDetectedResult#getHotwordOffsetMillis()} and\n         * {@link HotwordDetectedResult#getHotwordDurationMillis()} to translate these durations to\n         * timestamps.\n         * </p>\n         *\n         * @see #getAudioStreamParcelFileDescriptor()\n         ",
    "links" : [ "android.service.voice.HotwordDetectionService", "android.service.voice.HotwordDetectedResult#getHotwordDurationMillis()", "android.service.voice.HotwordDetectedResult#getHotwordOffsetMillis()", "android.media.AudioRecord#getTimestamp" ]
  }, {
    "name" : "public Builder setMetadata(@NonNull PersistableBundle value)",
    "returnType" : "Builder",
    "comment" : "\n         * The metadata associated with the audio stream.\n         ",
    "links" : [ ]
  }, {
    "name" : "public HotwordAudioStream build()",
    "returnType" : "HotwordAudioStream",
    "comment" : " Builds the instance. This builder should not be touched after calling this! ",
    "links" : [ ]
  }, {
    "name" : "private void checkNotUsed()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Builder setAudioFormat(@NonNull AudioFormat value)", "public Builder setAudioStreamParcelFileDescriptor(@NonNull ParcelFileDescriptor value)", "public Builder setTimestamp(@NonNull AudioTimestamp value)", "public Builder setMetadata(@NonNull PersistableBundle value)", "public HotwordAudioStream build()", "private void checkNotUsed()" ],
  "variableNames" : [ "mAudioFormat", "mAudioStreamParcelFileDescriptor", "mTimestamp", "mMetadata", "mInitialAudio", "mBuilderFieldsSet" ]
}