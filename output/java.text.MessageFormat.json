{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/text/MessageFormat.java",
  "packageName" : "java.text",
  "className" : "MessageFormat",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "locale",
    "type" : "Locale",
    "comment" : "\n     * The locale to use for formatting numbers and dates.\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "pattern",
    "type" : "String",
    "comment" : "\n     * The string that the formatted values are to be plugged into.  In other words, this\n     * is the pattern supplied on construction with all of the {} expressions taken out.\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "INITIAL_FORMATS",
    "type" : "int",
    "comment" : " The initially expected number of subformats in the format ",
    "links" : [ ]
  }, {
    "name" : "formats",
    "type" : "Format[]",
    "comment" : "\n     * An array of formatters, which are used to format the arguments.\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "offsets",
    "type" : "int[]",
    "comment" : "\n     * The positions where the results of formatting each argument are to be inserted\n     * into the pattern.\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "argumentNumbers",
    "type" : "int[]",
    "comment" : "\n     * The argument numbers corresponding to each formatter.  (The formatters are stored\n     * in the order they occur in the pattern, not in the order in which the arguments\n     * are specified.)\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "maxOffset",
    "type" : "int",
    "comment" : "\n     * One less than the number of entries in {@code offsets}.  Can also be thought of\n     * as the index of the highest-numbered element in {@code offsets} that is being used.\n     * All of these arrays should have the same number of elements being used as {@code offsets}\n     * does, and so this variable suffices to tell us how many entries are in all of them.\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "SEG_RAW",
    "type" : "int",
    "comment" : " Indices for segments",
    "links" : [ ]
  }, {
    "name" : "SEG_INDEX",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SEG_TYPE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SEG_MODIFIER",
    "type" : "int",
    "comment" : " modifier or subformat",
    "links" : [ ]
  }, {
    "name" : "TYPE_NULL",
    "type" : "int",
    "comment" : " Indices for type keywords",
    "links" : [ ]
  }, {
    "name" : "TYPE_NUMBER",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TYPE_DATE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TYPE_TIME",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TYPE_CHOICE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TYPE_KEYWORDS",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MODIFIER_DEFAULT",
    "type" : "int",
    "comment" : " common in number and date-time",
    "links" : [ ]
  }, {
    "name" : "MODIFIER_CURRENCY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MODIFIER_PERCENT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MODIFIER_INTEGER",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NUMBER_MODIFIER_KEYWORDS",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MODIFIER_SHORT",
    "type" : "int",
    "comment" : " Indices for date-time modifiers",
    "links" : [ ]
  }, {
    "name" : "MODIFIER_MEDIUM",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MODIFIER_LONG",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MODIFIER_FULL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DATE_TIME_MODIFIER_KEYWORDS",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DATE_TIME_MODIFIERS",
    "type" : "int[]",
    "comment" : " Date-time style values corresponding to the date-time modifiers.",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setLocale(Locale locale)",
    "returnType" : "void",
    "comment" : "\n     * Sets the locale to be used when creating or comparing subformats.\n     * This affects subsequent calls\n     * <ul>\n     * <li>to the {@link #applyPattern applyPattern}\n     *     and {@link #toPattern toPattern} methods if format elements specify\n     *     a format type and therefore have the subformats created in the\n     *     {@code applyPattern} method, as well as\n     * <li>to the {@code format} and\n     *     {@link #formatToCharacterIterator formatToCharacterIterator} methods\n     *     if format elements do not specify a format type and therefore have\n     *     the subformats created in the formatting methods.\n     * </ul>\n     * Subformats that have already been created are not affected.\n     *\n     * @param locale the locale to be used when creating or comparing subformats\n     ",
    "links" : [ "#applyPattern", "#toPattern", "#formatToCharacterIterator" ]
  }, {
    "name" : "public Locale getLocale()",
    "returnType" : "Locale",
    "comment" : "\n     * Gets the locale that's used when creating or comparing subformats.\n     *\n     * @return the locale used when creating or comparing subformats\n     ",
    "links" : [ ]
  }, {
    "name" : "public void applyPattern(String pattern)",
    "returnType" : "void",
    "comment" : "\n     * Sets the pattern used by this message format.\n     * The method parses the pattern and creates a list of subformats\n     * for the format elements contained in it.\n     * Patterns and their interpretation are specified in the\n     * <a href=\"#patterns\">class description</a>.\n     *\n     * @param pattern the pattern for this message format\n     * @throws    IllegalArgumentException if the pattern is invalid\n     * @throws    NullPointerException if {@code pattern} is\n     *            {@code null}\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toPattern()",
    "returnType" : "String",
    "comment" : "\n     * Returns a pattern representing the current state of the message format.\n     * The string is constructed from internal information and therefore\n     * does not necessarily equal the previously applied pattern.\n     *\n     * @return a pattern representing the current state of the message format\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setFormatsByArgumentIndex(Format[] newFormats)",
    "returnType" : "void",
    "comment" : "\n     * Sets the formats to use for the values passed into\n     * {@code format} methods or returned from {@code parse}\n     * methods. The indices of elements in {@code newFormats}\n     * correspond to the argument indices used in the previously set\n     * pattern string.\n     * The order of formats in {@code newFormats} thus corresponds to\n     * the order of elements in the {@code arguments} array passed\n     * to the {@code format} methods or the result array returned\n     * by the {@code parse} methods.\n     * <p>\n     * If an argument index is used for more than one format element\n     * in the pattern string, then the corresponding new format is used\n     * for all such format elements. If an argument index is not used\n     * for any format element in the pattern string, then the\n     * corresponding new format is ignored. If fewer formats are provided\n     * than needed, then only the formats for argument indices less\n     * than {@code newFormats.length} are replaced.\n     *\n     * @param newFormats the new formats to use\n     * @throws    NullPointerException if {@code newFormats} is null\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setFormats(Format[] newFormats)",
    "returnType" : "void",
    "comment" : "\n     * Sets the formats to use for the format elements in the\n     * previously set pattern string.\n     * The order of formats in {@code newFormats} corresponds to\n     * the order of format elements in the pattern string.\n     * <p>\n     * If more formats are provided than needed by the pattern string,\n     * the remaining ones are ignored. If fewer formats are provided\n     * than needed, then only the first {@code newFormats.length}\n     * formats are replaced.\n     * <p>\n     * Since the order of format elements in a pattern string often\n     * changes during localization, it is generally better to use the\n     * {@link #setFormatsByArgumentIndex setFormatsByArgumentIndex}\n     * method, which assumes an order of formats corresponding to the\n     * order of elements in the {@code arguments} array passed to\n     * the {@code format} methods or the result array returned by\n     * the {@code parse} methods.\n     *\n     * @param newFormats the new formats to use\n     * @throws    NullPointerException if {@code newFormats} is null\n     ",
    "links" : [ "#setFormatsByArgumentIndex" ]
  }, {
    "name" : "public void setFormatByArgumentIndex(int argumentIndex, Format newFormat)",
    "returnType" : "void",
    "comment" : "\n     * Sets the format to use for the format elements within the\n     * previously set pattern string that use the given argument\n     * index.\n     * The argument index is part of the format element definition and\n     * represents an index into the {@code arguments} array passed\n     * to the {@code format} methods or the result array returned\n     * by the {@code parse} methods.\n     * <p>\n     * If the argument index is used for more than one format element\n     * in the pattern string, then the new format is used for all such\n     * format elements. If the argument index is not used for any format\n     * element in the pattern string, then the new format is ignored.\n     *\n     * @param argumentIndex the argument index for which to use the new format\n     * @param newFormat the new format to use\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setFormat(int formatElementIndex, Format newFormat)",
    "returnType" : "void",
    "comment" : "\n     * Sets the format to use for the format element with the given\n     * format element index within the previously set pattern string.\n     * The format element index is the zero-based number of the format\n     * element counting from the start of the pattern string.\n     * <p>\n     * Since the order of format elements in a pattern string often\n     * changes during localization, it is generally better to use the\n     * {@link #setFormatByArgumentIndex setFormatByArgumentIndex}\n     * method, which accesses format elements based on the argument\n     * index they specify.\n     *\n     * @param formatElementIndex the index of a format element within the pattern\n     * @param newFormat the format to use for the specified format element\n     * @throws    ArrayIndexOutOfBoundsException if {@code formatElementIndex} is equal to or\n     *            larger than the number of format elements in the pattern string\n     ",
    "links" : [ "#setFormatByArgumentIndex" ]
  }, {
    "name" : "public Format[] getFormatsByArgumentIndex()",
    "returnType" : "Format[]",
    "comment" : "\n     * Gets the formats used for the values passed into\n     * {@code format} methods or returned from {@code parse}\n     * methods. The indices of elements in the returned array\n     * correspond to the argument indices used in the previously set\n     * pattern string.\n     * The order of formats in the returned array thus corresponds to\n     * the order of elements in the {@code arguments} array passed\n     * to the {@code format} methods or the result array returned\n     * by the {@code parse} methods.\n     * <p>\n     * If an argument index is used for more than one format element\n     * in the pattern string, then the format used for the last such\n     * format element is returned in the array. If an argument index\n     * is not used for any format element in the pattern string, then\n     * null is returned in the array.\n     *\n     * @return the formats used for the arguments within the pattern\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "public Format[] getFormats()",
    "returnType" : "Format[]",
    "comment" : "\n     * Gets the formats used for the format elements in the\n     * previously set pattern string.\n     * The order of formats in the returned array corresponds to\n     * the order of format elements in the pattern string.\n     * <p>\n     * Since the order of format elements in a pattern string often\n     * changes during localization, it's generally better to use the\n     * {@link #getFormatsByArgumentIndex getFormatsByArgumentIndex}\n     * method, which assumes an order of formats corresponding to the\n     * order of elements in the {@code arguments} array passed to\n     * the {@code format} methods or the result array returned by\n     * the {@code parse} methods.\n     *\n     * @return the formats used for the format elements in the pattern\n     ",
    "links" : [ "#getFormatsByArgumentIndex" ]
  }, {
    "name" : "public final StringBuffer format(Object[] arguments, StringBuffer result, FieldPosition pos)",
    "returnType" : "StringBuffer",
    "comment" : "\n     * Formats an array of objects and appends the {@code MessageFormat}'s\n     * pattern, with format elements replaced by the formatted objects, to the\n     * provided {@code StringBuffer}.\n     * <p>\n     * The text substituted for the individual format elements is derived from\n     * the current subformat of the format element and the\n     * {@code arguments} element at the format element's argument index\n     * as indicated by the first matching line of the following table. An\n     * argument is <i>unavailable</i> if {@code arguments} is\n     * {@code null} or has fewer than argumentIndex+1 elements.\n     *\n     * <table class=\"plain\">\n     * <caption style=\"display:none\">Examples of subformat,argument,and formatted text</caption>\n     * <thead>\n     *    <tr>\n     *       <th scope=\"col\">Subformat\n     *       <th scope=\"col\">Argument\n     *       <th scope=\"col\">Formatted Text\n     * </thead>\n     * <tbody>\n     *    <tr>\n     *       <th scope=\"row\" style=\"text-weight-normal\" rowspan=2><i>any</i>\n     *       <th scope=\"row\" style=\"text-weight-normal\"><i>unavailable</i>\n     *       <td><code>\"{\" + argumentIndex + \"}\"</code>\n     *    <tr>\n     *       <th scope=\"row\" style=\"text-weight-normal\">{@code null}\n     *       <td>{@code \"null\"}\n     *    <tr>\n     *       <th scope=\"row\" style=\"text-weight-normal\">{@code instanceof ChoiceFormat}\n     *       <th scope=\"row\" style=\"text-weight-normal\"><i>any</i>\n     *       <td><code>subformat.format(argument).indexOf('{') &gt;= 0 ?<br>\n     *           (new MessageFormat(subformat.format(argument), getLocale())).format(argument) :\n     *           subformat.format(argument)</code>\n     *    <tr>\n     *       <th scope=\"row\" style=\"text-weight-normal\">{@code != null}\n     *       <th scope=\"row\" style=\"text-weight-normal\"><i>any</i>\n     *       <td>{@code subformat.format(argument)}\n     *    <tr>\n     *       <th scope=\"row\" style=\"text-weight-normal\" rowspan=4>{@code null}\n     *       <th scope=\"row\" style=\"text-weight-normal\">{@code instanceof Number}\n     *       <td>{@code NumberFormat.getInstance(getLocale()).format(argument)}\n     *    <tr>\n     *       <th scope=\"row\" style=\"text-weight-normal\">{@code instanceof Date}\n     *       <td>{@code DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, getLocale()).format(argument)}\n     *    <tr>\n     *       <th scope=\"row\" style=\"text-weight-normal\">{@code instanceof String}\n     *       <td>{@code argument}\n     *    <tr>\n     *       <th scope=\"row\" style=\"text-weight-normal\"><i>any</i>\n     *       <td>{@code argument.toString()}\n     * </tbody>\n     * </table>\n     * <p>\n     * If {@code pos} is non-null, and refers to\n     * {@code Field.ARGUMENT}, the location of the first formatted\n     * string will be returned.\n     *\n     * @param arguments an array of objects to be formatted and substituted.\n     * @param result where text is appended.\n     * @param pos keeps track on the position of the first replaced argument\n     *            in the output string.\n     * @return the string buffer passed in as {@code result}, with formatted\n     * text appended\n     * @throws    IllegalArgumentException if an argument in the\n     *            {@code arguments} array is not of the type\n     *            expected by the format element(s) that use it.\n     * @throws    NullPointerException if {@code result} is {@code null}\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String format(String pattern, Object... arguments)",
    "returnType" : "String",
    "comment" : "\n     * Creates a MessageFormat with the given pattern and uses it\n     * to format the given arguments. This is equivalent to\n     * <blockquote>\n     *     <code>(new {@link #MessageFormat(String) MessageFormat}(pattern)).{@link #format(java.lang.Object[], java.lang.StringBuffer, java.text.FieldPosition) format}(arguments, new StringBuffer(), null).toString()</code>\n     * </blockquote>\n     *\n     * @param pattern   the pattern string\n     * @param arguments object(s) to format\n     * @return the formatted string\n     * @throws    IllegalArgumentException if the pattern is invalid,\n     *            or if an argument in the {@code arguments} array\n     *            is not of the type expected by the format element(s)\n     *            that use it.\n     * @throws    NullPointerException if {@code pattern} is {@code null}\n     ",
    "links" : [ "#MessageFormat(String)", "#format(java.lang.Object" ]
  }, {
    "name" : "public final StringBuffer format(Object arguments, StringBuffer result, FieldPosition pos)",
    "returnType" : "StringBuffer",
    "comment" : "\n     * Formats an array of objects and appends the {@code MessageFormat}'s\n     * pattern, with format elements replaced by the formatted objects, to the\n     * provided {@code StringBuffer}.\n     * This is equivalent to\n     * <blockquote>\n     *     <code>{@link #format(java.lang.Object[], java.lang.StringBuffer, java.text.FieldPosition) format}((Object[]) arguments, result, pos)</code>\n     * </blockquote>\n     *\n     * @param arguments an array of objects to be formatted and substituted.\n     * @param result where text is appended.\n     * @param pos keeps track on the position of the first replaced argument\n     *            in the output string.\n     * @throws    IllegalArgumentException if an argument in the\n     *            {@code arguments} array is not of the type\n     *            expected by the format element(s) that use it.\n     * @throws    NullPointerException if {@code result} is {@code null}\n     ",
    "links" : [ "#format(java.lang.Object" ]
  }, {
    "name" : "public AttributedCharacterIterator formatToCharacterIterator(Object arguments)",
    "returnType" : "AttributedCharacterIterator",
    "comment" : "\n     * Formats an array of objects and inserts them into the\n     * {@code MessageFormat}'s pattern, producing an\n     * {@code AttributedCharacterIterator}.\n     * You can use the returned {@code AttributedCharacterIterator}\n     * to build the resulting String, as well as to determine information\n     * about the resulting String.\n     * <p>\n     * The text of the returned {@code AttributedCharacterIterator} is\n     * the same that would be returned by\n     * <blockquote>\n     *     <code>{@link #format(java.lang.Object[], java.lang.StringBuffer, java.text.FieldPosition) format}(arguments, new StringBuffer(), null).toString()</code>\n     * </blockquote>\n     * <p>\n     * In addition, the {@code AttributedCharacterIterator} contains at\n     * least attributes indicating where text was generated from an\n     * argument in the {@code arguments} array. The keys of these attributes are of\n     * type {@code MessageFormat.Field}, their values are\n     * {@code Integer} objects indicating the index in the {@code arguments}\n     * array of the argument from which the text was generated.\n     * <p>\n     * The attributes/value from the underlying {@code Format}\n     * instances that {@code MessageFormat} uses will also be\n     * placed in the resulting {@code AttributedCharacterIterator}.\n     * This allows you to not only find where an argument is placed in the\n     * resulting String, but also which fields it contains in turn.\n     *\n     * @param arguments an array of objects to be formatted and substituted.\n     * @return AttributedCharacterIterator describing the formatted value.\n     * @throws    NullPointerException if {@code arguments} is null.\n     * @throws    IllegalArgumentException if an argument in the\n     *            {@code arguments} array is not of the type\n     *            expected by the format element(s) that use it.\n     * @since 1.4\n     ",
    "links" : [ "#format(java.lang.Object" ]
  }, {
    "name" : "public Object[] parse(String source, ParsePosition pos)",
    "returnType" : "Object[]",
    "comment" : "\n     * Parses the string.\n     *\n     * <p>Caveats: The parse may fail in a number of circumstances.\n     * For example:\n     * <ul>\n     * <li>If one of the arguments does not occur in the pattern.\n     * <li>If the format of an argument loses information, such as\n     *     with a choice format where a large number formats to \"many\".\n     * <li>Does not yet handle recursion (where\n     *     the substituted strings contain {n} references.)\n     * <li>Will not always find a match (or the correct match)\n     *     if some part of the parse is ambiguous.\n     *     For example, if the pattern \"{1},{2}\" is used with the\n     *     string arguments {\"a,b\", \"c\"}, it will format as \"a,b,c\".\n     *     When the result is parsed, it will return {\"a\", \"b,c\"}.\n     * <li>If a single argument is parsed more than once in the string,\n     *     then the later parse wins.\n     * </ul>\n     * When the parse fails, use ParsePosition.getErrorIndex() to find out\n     * where in the string the parsing failed.  The returned error\n     * index is the starting offset of the sub-patterns that the string\n     * is comparing with.  For example, if the parsing string \"AAA {0} BBB\"\n     * is comparing against the pattern \"AAD {0} BBB\", the error index is\n     * 0. When an error occurs, the call to this method will return null.\n     * If the source is null, return an empty array.\n     *\n     * @param source the string to parse\n     * @param pos    the parse position\n     * @return an array of parsed objects\n     * @throws    NullPointerException if {@code pos} is {@code null}\n     *            for a non-null {@code source} string.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object[] parse(String source) throws ParseException",
    "returnType" : "Object[]",
    "comment" : "\n     * Parses text from the beginning of the given string to produce an object\n     * array.\n     * The method may not use the entire text of the given string.\n     * <p>\n     * See the {@link #parse(String, ParsePosition)} method for more information\n     * on message parsing.\n     *\n     * @param source A {@code String} whose beginning should be parsed.\n     * @return An {@code Object} array parsed from the string.\n     * @throws    ParseException if the beginning of the specified string\n     *            cannot be parsed.\n     ",
    "links" : [ "#parse(String" ]
  }, {
    "name" : "public Object parseObject(String source, ParsePosition pos)",
    "returnType" : "Object",
    "comment" : "\n     * Parses text from a string to produce an object array.\n     * <p>\n     * The method attempts to parse text starting at the index given by\n     * {@code pos}.\n     * If parsing succeeds, then the index of {@code pos} is updated\n     * to the index after the last character used (parsing does not necessarily\n     * use all characters up to the end of the string), and the parsed\n     * object array is returned. The updated {@code pos} can be used to\n     * indicate the starting point for the next call to this method.\n     * If an error occurs, then the index of {@code pos} is not\n     * changed, the error index of {@code pos} is set to the index of\n     * the character where the error occurred, and null is returned.\n     * <p>\n     * See the {@link #parse(String, ParsePosition)} method for more information\n     * on message parsing.\n     *\n     * @param source A {@code String}, part of which should be parsed.\n     * @param pos A {@code ParsePosition} object with index and error\n     *            index information as described above.\n     * @return An {@code Object} array parsed from the string. In case of\n     *         error, returns null.\n     * @throws NullPointerException if {@code pos} is null.\n     ",
    "links" : [ "#parse(String" ]
  }, {
    "name" : "public Object clone()",
    "returnType" : "Object",
    "comment" : "\n     * Creates and returns a copy of this object.\n     *\n     * @return a clone of this instance.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "\n     * Equality comparison between two message format objects\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Generates a hash code for the message format object.\n     ",
    "links" : [ ]
  }, {
    "name" : "private StringBuffer subformat(Object[] arguments, StringBuffer result, FieldPosition fp, List<AttributedCharacterIterator> characterIterators)",
    "returnType" : "StringBuffer",
    "comment" : "\n     * Internal routine used by format. If {@code characterIterators} is\n     * {@code non-null}, AttributedCharacterIterator will be created from the\n     * subformats as necessary. If {@code characterIterators} is {@code null}\n     * and {@code fp} is {@code non-null} and identifies\n     * {@code Field.ARGUMENT} as the field attribute, the location of\n     * the first replaced argument will be set in it.\n     *\n     * @throws    IllegalArgumentException if an argument in the\n     *            {@code arguments} array is not of the type\n     *            expected by the format element(s) that use it.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void append(StringBuffer result, CharacterIterator iterator)",
    "returnType" : "void",
    "comment" : "\n     * Convenience method to append all the characters in\n     * {@code iterator} to the StringBuffer {@code result}.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void makeFormat(int position, int offsetNumber, StringBuilder[] textSegments)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static final int findKeyword(String s, String[] list)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static final void copyAndFixQuotes(String source, int start, int end, StringBuilder target)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException",
    "returnType" : "void",
    "comment" : "\n     * After reading an object from the input stream, do a simple verification\n     * to maintain class invariants.\n     * @throws InvalidObjectException if the objects read from the stream is invalid.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setLocale(Locale locale)", "public Locale getLocale()", "public void applyPattern(String pattern)", "public String toPattern()", "public void setFormatsByArgumentIndex(Format[] newFormats)", "public void setFormats(Format[] newFormats)", "public void setFormatByArgumentIndex(int argumentIndex, Format newFormat)", "public void setFormat(int formatElementIndex, Format newFormat)", "public Format[] getFormatsByArgumentIndex()", "public Format[] getFormats()", "public final StringBuffer format(Object[] arguments, StringBuffer result, FieldPosition pos)", "public static String format(String pattern, Object... arguments)", "public final StringBuffer format(Object arguments, StringBuffer result, FieldPosition pos)", "public AttributedCharacterIterator formatToCharacterIterator(Object arguments)", "public Object[] parse(String source, ParsePosition pos)", "public Object[] parse(String source) throws ParseException", "public Object parseObject(String source, ParsePosition pos)", "public Object clone()", "public boolean equals(Object obj)", "public int hashCode()", "private StringBuffer subformat(Object[] arguments, StringBuffer result, FieldPosition fp, List<AttributedCharacterIterator> characterIterators)", "private void append(StringBuffer result, CharacterIterator iterator)", "private void makeFormat(int position, int offsetNumber, StringBuilder[] textSegments)", "private static final int findKeyword(String s, String[] list)", "private static final void copyAndFixQuotes(String source, int start, int end, StringBuilder target)", "private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException" ],
  "variableNames" : [ "serialVersionUID", "locale", "pattern", "INITIAL_FORMATS", "formats", "offsets", "argumentNumbers", "maxOffset", "SEG_RAW", "SEG_INDEX", "SEG_TYPE", "SEG_MODIFIER", "TYPE_NULL", "TYPE_NUMBER", "TYPE_DATE", "TYPE_TIME", "TYPE_CHOICE", "TYPE_KEYWORDS", "MODIFIER_DEFAULT", "MODIFIER_CURRENCY", "MODIFIER_PERCENT", "MODIFIER_INTEGER", "NUMBER_MODIFIER_KEYWORDS", "MODIFIER_SHORT", "MODIFIER_MEDIUM", "MODIFIER_LONG", "MODIFIER_FULL", "DATE_TIME_MODIFIER_KEYWORDS", "DATE_TIME_MODIFIERS" ]
}