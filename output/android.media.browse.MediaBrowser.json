{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/media/browse/MediaBrowser.java",
  "packageName" : "android.media.browse",
  "className" : "MediaBrowser",
  "comment" : "\n * Browses media content offered by a link MediaBrowserService.\n * <p>\n * This object is not thread-safe. All calls should happen on the thread on which the browser\n * was constructed.\n * </p>\n * <h3>Standard Extra Data</h3>\n *\n * <p>These are the current standard fields that can be used as extra data via\n * {@link #subscribe(String, Bundle, SubscriptionCallback)},\n * {@link #unsubscribe(String, SubscriptionCallback)}, and\n * {@link SubscriptionCallback#onChildrenLoaded(String, List, Bundle)}.\n *\n * <ul>\n *     <li> {@link #EXTRA_PAGE}\n *     <li> {@link #EXTRA_PAGE_SIZE}\n * </ul>\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EXTRA_PAGE",
    "type" : "String",
    "comment" : "\n     * Used as an int extra field to denote the page number to subscribe.\n     * The value of {@code EXTRA_PAGE} should be greater than or equal to 0.\n     *\n     * @see #EXTRA_PAGE_SIZE\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_PAGE_SIZE",
    "type" : "String",
    "comment" : "\n     * Used as an int extra field to denote the number of media items in a page.\n     * The value of {@code EXTRA_PAGE_SIZE} should be greater than or equal to 1.\n     *\n     * @see #EXTRA_PAGE\n     ",
    "links" : [ ]
  }, {
    "name" : "CONNECT_STATE_DISCONNECTING",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CONNECT_STATE_DISCONNECTED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CONNECT_STATE_CONNECTING",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CONNECT_STATE_CONNECTED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CONNECT_STATE_SUSPENDED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mServiceComponent",
    "type" : "ComponentName",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallback",
    "type" : "ConnectionCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRootHints",
    "type" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSubscriptions",
    "type" : "ArrayMap<String, Subscription>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mState",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRootId",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMediaSessionToken",
    "type" : "MediaSession.Token",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExtras",
    "type" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mServiceConnection",
    "type" : "MediaServiceConnection",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mServiceBinder",
    "type" : "IMediaBrowserService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mServiceCallbacks",
    "type" : "IMediaBrowserServiceCallbacks",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void connect()",
    "returnType" : "void",
    "comment" : "\n     * Connects to the media browser service.\n     * <p>\n     * The connection callback specified in the constructor will be invoked\n     * when the connection completes or fails.\n     * </p>\n     ",
    "links" : [ ]
  }, {
    "name" : "public void disconnect()",
    "returnType" : "void",
    "comment" : "\n     * Disconnects from the media browser service.\n     * After this, no more callbacks will be received.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void forceCloseConnection()",
    "returnType" : "void",
    "comment" : "\n     * Null out the variables and unbind from the service. This doesn't include\n     * calling disconnect on the service, because we only try to do that in the\n     * clean shutdown cases.\n     * <p>\n     * Everywhere that calls this EXCEPT for disconnect() should follow it with\n     * a call to mCallback.onConnectionFailed(). Disconnect doesn't do that callback\n     * for a clean shutdown, but everywhere else is a dirty shutdown and should\n     * notify the app.\n     * <p>\n     * Also, mState should be updated properly. Mostly it should be CONNECT_STATE_DIACONNECTED\n     * except for disconnect().\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isConnected()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the browser is connected to the service.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ComponentName getServiceComponent()",
    "returnType" : "ComponentName",
    "comment" : "\n     * Gets the service component that the media browser is connected to.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getRoot()",
    "returnType" : "String",
    "comment" : "\n     * Gets the root id.\n     * <p>\n     * Note that the root id may become invalid or change when the\n     * browser is disconnected.\n     * </p>\n     *\n     * @throws IllegalStateException if not connected.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Bundle getExtras()",
    "returnType" : "Bundle",
    "comment" : "\n     * Gets any extras for the media service.\n     *\n     * @throws IllegalStateException if not connected.\n     ",
    "links" : [ ]
  }, {
    "name" : "public MediaSession.Token getSessionToken()",
    "returnType" : "MediaSession.Token",
    "comment" : "\n     * Gets the media session token associated with the media browser.\n     * <p>\n     * Note that the session token may become invalid or change when the\n     * browser is disconnected.\n     * </p>\n     *\n     * @return The session token for the browser, never null.\n     *\n     * @throws IllegalStateException if not connected.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void subscribe(@NonNull String parentId, @NonNull SubscriptionCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Queries for information about the media items that are contained within\n     * the specified id and subscribes to receive updates when they change.\n     * <p>\n     * The list of subscriptions is maintained even when not connected and is\n     * restored after the reconnection. It is ok to subscribe while not connected\n     * but the results will not be returned until the connection completes.\n     * </p>\n     * <p>\n     * If the id is already subscribed with a different callback then the new\n     * callback will replace the previous one and the child data will be\n     * reloaded.\n     * </p>\n     *\n     * @param parentId The id of the parent media item whose list of children\n     *            will be subscribed.\n     * @param callback The callback to receive the list of children.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void subscribe(@NonNull String parentId, @NonNull Bundle options, @NonNull SubscriptionCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Queries with service-specific arguments for information about the media items\n     * that are contained within the specified id and subscribes to receive updates\n     * when they change.\n     * <p>\n     * The list of subscriptions is maintained even when not connected and is\n     * restored after the reconnection. It is ok to subscribe while not connected\n     * but the results will not be returned until the connection completes.\n     * </p>\n     * <p>\n     * If the id is already subscribed with a different callback then the new\n     * callback will replace the previous one and the child data will be\n     * reloaded.\n     * </p>\n     *\n     * @param parentId The id of the parent media item whose list of children\n     *            will be subscribed.\n     * @param options The bundle of service-specific arguments to send to the media\n     *            browser service. The contents of this bundle may affect the\n     *            information returned when browsing.\n     * @param callback The callback to receive the list of children.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void unsubscribe(@NonNull String parentId)",
    "returnType" : "void",
    "comment" : "\n     * Unsubscribes for changes to the children of the specified media id.\n     * <p>\n     * The query callback will no longer be invoked for results associated with\n     * this id once this method returns.\n     * </p>\n     *\n     * @param parentId The id of the parent media item whose list of children\n     *            will be unsubscribed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void unsubscribe(@NonNull String parentId, @NonNull SubscriptionCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Unsubscribes for changes to the children of the specified media id through a callback.\n     * <p>\n     * The query callback will no longer be invoked for results associated with\n     * this id once this method returns.\n     * </p>\n     *\n     * @param parentId The id of the parent media item whose list of children\n     *            will be unsubscribed.\n     * @param callback A callback sent to the media browser service to subscribe.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void getItem(@NonNull final String mediaId, @NonNull final ItemCallback cb)",
    "returnType" : "void",
    "comment" : "\n     * Retrieves a specific {@link MediaItem} from the connected service. Not\n     * all services may support this, so falling back to subscribing to the\n     * parent's id should be used when unavailable.\n     *\n     * @param mediaId The id of the item to retrieve.\n     * @param cb The callback to receive the result on.\n     ",
    "links" : [ "MediaItem" ]
  }, {
    "name" : "private void subscribeInternal(String parentId, Bundle options, SubscriptionCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void unsubscribeInternal(String parentId, SubscriptionCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String getStateLabel(int state)",
    "returnType" : "String",
    "comment" : "\n     * For debugging.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void onServiceConnected(final IMediaBrowserServiceCallbacks callback, final String root, final MediaSession.Token session, final Bundle extra)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onConnectionFailed(final IMediaBrowserServiceCallbacks callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onLoadChildren(final IMediaBrowserServiceCallbacks callback, final String parentId, final ParceledListSlice list, final Bundle options)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isCurrent(IMediaBrowserServiceCallbacks callback, String funcName)",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if {@code callback} is the current ServiceCallbacks. Also logs if it's not.\n     ",
    "links" : [ ]
  }, {
    "name" : "private ServiceCallbacks getNewServiceCallbacks()",
    "returnType" : "ServiceCallbacks",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dump()",
    "returnType" : "void",
    "comment" : "\n     * Log internal state.\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "DBG", "EXTRA_PAGE", "EXTRA_PAGE_SIZE", "CONNECT_STATE_DISCONNECTING", "CONNECT_STATE_DISCONNECTED", "CONNECT_STATE_CONNECTING", "CONNECT_STATE_CONNECTED", "CONNECT_STATE_SUSPENDED", "mContext", "mServiceComponent", "mCallback", "mRootHints", "mHandler", "mSubscriptions", "mState", "mRootId", "mMediaSessionToken", "mExtras", "mServiceConnection", "mServiceBinder", "mServiceCallbacks" ],
  "methodNames" : [ "public void connect()", "public void disconnect()", "private void forceCloseConnection()", "public boolean isConnected()", "public ComponentName getServiceComponent()", "public String getRoot()", "public Bundle getExtras()", "public MediaSession.Token getSessionToken()", "public void subscribe(@NonNull String parentId, @NonNull SubscriptionCallback callback)", "public void subscribe(@NonNull String parentId, @NonNull Bundle options, @NonNull SubscriptionCallback callback)", "public void unsubscribe(@NonNull String parentId)", "public void unsubscribe(@NonNull String parentId, @NonNull SubscriptionCallback callback)", "public void getItem(@NonNull final String mediaId, @NonNull final ItemCallback cb)", "private void subscribeInternal(String parentId, Bundle options, SubscriptionCallback callback)", "private void unsubscribeInternal(String parentId, SubscriptionCallback callback)", "private static String getStateLabel(int state)", "private void onServiceConnected(final IMediaBrowserServiceCallbacks callback, final String root, final MediaSession.Token session, final Bundle extra)", "private void onConnectionFailed(final IMediaBrowserServiceCallbacks callback)", "private void onLoadChildren(final IMediaBrowserServiceCallbacks callback, final String parentId, final ParceledListSlice list, final Bundle options)", "private boolean isCurrent(IMediaBrowserServiceCallbacks callback, String funcName)", "private ServiceCallbacks getNewServiceCallbacks()", " void dump()" ]
}