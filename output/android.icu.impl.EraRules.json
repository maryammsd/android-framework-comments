{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/EraRules.java",
  "packageName" : "android.icu.impl",
  "className" : "EraRules",
  "comment" : "\n * <code>EraRules</code> represents calendar era rules specified\n * in supplementalData/calendarData.\n *\n * @author Yoshito Umaoka\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "MAX_ENCODED_START_YEAR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MIN_ENCODED_START_YEAR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MIN_ENCODED_START",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "YEAR_MASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MONTH_MASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DAY_MASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "startDates",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "numEras",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "currentEra",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static EraRules getInstance(CalType calType, boolean includeTentativeEra)",
    "returnType" : "EraRules",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getNumberOfEras()",
    "returnType" : "int",
    "comment" : "\n     * Gets number of effective eras\n     * @return  number of effective eras\n     ",
    "links" : [ ]
  }, {
    "name" : "public int[] getStartDate(int eraIdx, int[] fillIn)",
    "returnType" : "int[]",
    "comment" : "\n     * Gets start date of an era\n     * @param eraIdx    Era index\n     * @param fillIn    Receives date fields if supplied. If null, or size of array\n     *                  is less than 3, then a new int[] will be newly allocated.\n     * @return  An int array including values of year, month, day of month in this order.\n     *          When an era has no start date, the result will be January 1st in year\n     *          whose value is minimum integer.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getStartYear(int eraIdx)",
    "returnType" : "int",
    "comment" : "\n     * Gets start year of an era\n     * @param eraIdx    Era index\n     * @return  The first year of an era. When a era has no start date, minimum integer\n     *          value is returned.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getEraIndex(int year, int month, int day)",
    "returnType" : "int",
    "comment" : "\n     * Returns era index for the specified year/month/day.\n     * @param year  Year\n     * @param month Month (1-base)\n     * @param day   Day of month\n     * @return  era index (or 0, when the specified date is before the first era)\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getCurrentEraIndex()",
    "returnType" : "int",
    "comment" : "\n     * Gets the current era index. This is calculated only once for an instance of\n     * EraRules. The current era calculation is based on the default time zone at\n     * the time of instantiation.\n     *\n     * @return era index of current era (or 0, when current date is before the first era)\n     ",
    "links" : [ ]
  }, {
    "name" : "private void initCurrentEra()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isSet(int startDate)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isValidRuleStartDate(int year, int month, int day)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int encodeDate(int year, int month, int day)",
    "returnType" : "int",
    "comment" : "\n     * Encode year/month/date to a single integer.\n     * year is high 16 bits (-32768 to 32767), month is\n     * next 8 bits and day of month is last 8 bits.\n     *\n     * @param year  year\n     * @param month month (1-base)\n     * @param day   day of month\n     * @return  an encoded date.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int[] decodeDate(int encodedDate, int[] fillIn)",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int compareEncodedDateWithYMD(int encoded, int year, int month, int day)",
    "returnType" : "int",
    "comment" : "\n     * Compare an encoded date with another date specified by year/month/day.\n     * @param encoded   An encoded date\n     * @param year      Year of another date\n     * @param month     Month of another date\n     * @param day       Day of another date\n     * @return -1 when encoded date is earlier, 0 when two dates are same,\n     *          and 1 when encoded date is later.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static EraRules getInstance(CalType calType, boolean includeTentativeEra)", "public int getNumberOfEras()", "public int[] getStartDate(int eraIdx, int[] fillIn)", "public int getStartYear(int eraIdx)", "public int getEraIndex(int year, int month, int day)", "public int getCurrentEraIndex()", "private void initCurrentEra()", "private static boolean isSet(int startDate)", "private static boolean isValidRuleStartDate(int year, int month, int day)", "private static int encodeDate(int year, int month, int day)", "private static int[] decodeDate(int encodedDate, int[] fillIn)", "private static int compareEncodedDateWithYMD(int encoded, int year, int month, int day)" ],
  "variableNames" : [ "MAX_ENCODED_START_YEAR", "MIN_ENCODED_START_YEAR", "MIN_ENCODED_START", "YEAR_MASK", "MONTH_MASK", "DAY_MASK", "startDates", "numEras", "currentEra" ]
}