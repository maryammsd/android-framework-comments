{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/widget/Toolbar.java",
  "packageName" : "android.widget",
  "className" : "Toolbar",
  "comment" : "\n * A standard toolbar for use within application content.\n *\n * <p>A Toolbar is a generalization of {@link android.app.ActionBar action bars} for use\n * within application layouts. While an action bar is traditionally part of an\n * {@link android.app.Activity Activity's} opaque window decor controlled by the framework,\n * a Toolbar may be placed at any arbitrary level of nesting within a view hierarchy.\n * An application may choose to designate a Toolbar as the action bar for an Activity\n * using the {@link android.app.Activity#setActionBar(Toolbar) setActionBar()} method.</p>\n *\n * <p>Toolbar supports a more focused feature set than ActionBar. From start to end, a toolbar\n * may contain a combination of the following optional elements:\n *\n * <ul>\n *     <li><em>A navigation button.</em> This may be an Up arrow, navigation menu toggle, close,\n *     collapse, done or another glyph of the app's choosing. This button should always be used\n *     to access other navigational destinations within the container of the Toolbar and\n *     its signified content or otherwise leave the current context signified by the Toolbar.\n *     The navigation button is vertically aligned within the Toolbar's\n *     {@link android.R.styleable#View_minHeight minimum height}, if set.</li>\n *     <li><em>A branded logo image.</em> This may extend to the height of the bar and can be\n *     arbitrarily wide.</li>\n *     <li><em>A title and subtitle.</em> The title should be a signpost for the Toolbar's current\n *     position in the navigation hierarchy and the content contained there. The subtitle,\n *     if present should indicate any extended information about the current content.\n *     If an app uses a logo image it should strongly consider omitting a title and subtitle.</li>\n *     <li><em>One or more custom views.</em> The application may add arbitrary child views\n *     to the Toolbar. They will appear at this position within the layout. If a child view's\n *     {@link LayoutParams} indicates a {@link Gravity} value of\n *     {@link Gravity#CENTER_HORIZONTAL CENTER_HORIZONTAL} the view will attempt to center\n *     within the available space remaining in the Toolbar after all other elements have been\n *     measured.</li>\n *     <li><em>An {@link ActionMenuView action menu}.</em> The menu of actions will pin to the\n *     end of the Toolbar offering a few\n *     <a href=\"http://developer.android.com/design/patterns/actionbar.html#ActionButtons\">\n *     frequent, important or typical</a> actions along with an optional overflow menu for\n *     additional actions. Action buttons are vertically aligned within the Toolbar's\n *     {@link android.R.styleable#View_minHeight minimum height}, if set.</li>\n * </ul>\n * </p>\n *\n * <p>In modern Android UIs developers should lean more on a visually distinct color scheme for\n * toolbars than on their application icon. The use of application icon plus title as a standard\n * layout is discouraged on API 21 devices and newer.</p>\n *\n * @attr ref android.R.styleable#Toolbar_buttonGravity\n * @attr ref android.R.styleable#Toolbar_collapseContentDescription\n * @attr ref android.R.styleable#Toolbar_collapseIcon\n * @attr ref android.R.styleable#Toolbar_contentInsetEnd\n * @attr ref android.R.styleable#Toolbar_contentInsetLeft\n * @attr ref android.R.styleable#Toolbar_contentInsetRight\n * @attr ref android.R.styleable#Toolbar_contentInsetStart\n * @attr ref android.R.styleable#Toolbar_contentInsetStartWithNavigation\n * @attr ref android.R.styleable#Toolbar_contentInsetEndWithActions\n * @attr ref android.R.styleable#Toolbar_gravity\n * @attr ref android.R.styleable#Toolbar_logo\n * @attr ref android.R.styleable#Toolbar_logoDescription\n * @attr ref android.R.styleable#Toolbar_maxButtonHeight\n * @attr ref android.R.styleable#Toolbar_navigationContentDescription\n * @attr ref android.R.styleable#Toolbar_navigationIcon\n * @attr ref android.R.styleable#Toolbar_popupTheme\n * @attr ref android.R.styleable#Toolbar_subtitle\n * @attr ref android.R.styleable#Toolbar_subtitleTextAppearance\n * @attr ref android.R.styleable#Toolbar_subtitleTextColor\n * @attr ref android.R.styleable#Toolbar_title\n * @attr ref android.R.styleable#Toolbar_titleMargin\n * @attr ref android.R.styleable#Toolbar_titleMarginBottom\n * @attr ref android.R.styleable#Toolbar_titleMarginEnd\n * @attr ref android.R.styleable#Toolbar_titleMarginStart\n * @attr ref android.R.styleable#Toolbar_titleMarginTop\n * @attr ref android.R.styleable#Toolbar_titleTextAppearance\n * @attr ref android.R.styleable#Toolbar_titleTextColor\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMenuView",
    "type" : "ActionMenuView",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTitleTextView",
    "type" : "TextView",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSubtitleTextView",
    "type" : "TextView",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNavButtonView",
    "type" : "ImageButton",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLogoView",
    "type" : "ImageView",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCollapseIcon",
    "type" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCollapseDescription",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCollapseButtonView",
    "type" : "ImageButton",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExpandedActionView",
    "type" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPopupContext",
    "type" : "Context",
    "comment" : " Context against which to inflate popup menus. ",
    "links" : [ ]
  }, {
    "name" : "mPopupTheme",
    "type" : "int",
    "comment" : " Theme resource against which to inflate popup menus. ",
    "links" : [ ]
  }, {
    "name" : "mTitleTextAppearance",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSubtitleTextAppearance",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNavButtonStyle",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mButtonGravity",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaxButtonHeight",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTitleMarginStart",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTitleMarginEnd",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTitleMarginTop",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTitleMarginBottom",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContentInsets",
    "type" : "RtlSpacingHelper",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContentInsetStartWithNavigation",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContentInsetEndWithActions",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGravity",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTitleText",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSubtitleText",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTitleTextColor",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSubtitleTextColor",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEatingTouch",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTempViews",
    "type" : "ArrayList<View>",
    "comment" : " Clear me after use.",
    "links" : [ ]
  }, {
    "name" : "mHiddenViews",
    "type" : "ArrayList<View>",
    "comment" : " Used to hold views that will be removed while we have an expanded action view.",
    "links" : [ ]
  }, {
    "name" : "mTempMargins",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnMenuItemClickListener",
    "type" : "OnMenuItemClickListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMenuViewItemClickListener",
    "type" : "ActionMenuView.OnMenuItemClickListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWrapper",
    "type" : "ToolbarWidgetWrapper",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOuterActionMenuPresenter",
    "type" : "ActionMenuPresenter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExpandedMenuPresenter",
    "type" : "ExpandedActionViewMenuPresenter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mActionMenuPresenterCallback",
    "type" : "MenuPresenter.Callback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMenuBuilderCallback",
    "type" : "MenuBuilder.Callback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCollapsible",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mShowOverflowMenuRunnable",
    "type" : "Runnable",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected void onAttachedToWindow()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setPopupTheme(@StyleRes int resId)",
    "returnType" : "void",
    "comment" : "\n     * Specifies the theme to use when inflating popup menus. By default, uses\n     * the same theme as the toolbar itself.\n     *\n     * @param resId theme used to inflate popup menus\n     * @see #getPopupTheme()\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getPopupTheme()",
    "returnType" : "int",
    "comment" : "\n     * @return resource identifier of the theme used to inflate popup menus, or\n     *         0 if menus are inflated against the toolbar theme\n     * @see #setPopupTheme(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTitleMargin(int start, int top, int end, int bottom)",
    "returnType" : "void",
    "comment" : "\n     * Sets the title margin.\n     *\n     * @param start the starting title margin in pixels\n     * @param top the top title margin in pixels\n     * @param end the ending title margin in pixels\n     * @param bottom the bottom title margin in pixels\n     * @see #getTitleMarginStart()\n     * @see #getTitleMarginTop()\n     * @see #getTitleMarginEnd()\n     * @see #getTitleMarginBottom()\n     * @attr ref android.R.styleable#Toolbar_titleMargin\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getTitleMarginStart()",
    "returnType" : "int",
    "comment" : "\n     * @return the starting title margin in pixels\n     * @see #setTitleMarginStart(int)\n     * @attr ref android.R.styleable#Toolbar_titleMarginStart\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTitleMarginStart(int margin)",
    "returnType" : "void",
    "comment" : "\n     * Sets the starting title margin in pixels.\n     *\n     * @param margin the starting title margin in pixels\n     * @see #getTitleMarginStart()\n     * @attr ref android.R.styleable#Toolbar_titleMarginStart\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getTitleMarginTop()",
    "returnType" : "int",
    "comment" : "\n     * @return the top title margin in pixels\n     * @see #setTitleMarginTop(int)\n     * @attr ref android.R.styleable#Toolbar_titleMarginTop\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTitleMarginTop(int margin)",
    "returnType" : "void",
    "comment" : "\n     * Sets the top title margin in pixels.\n     *\n     * @param margin the top title margin in pixels\n     * @see #getTitleMarginTop()\n     * @attr ref android.R.styleable#Toolbar_titleMarginTop\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getTitleMarginEnd()",
    "returnType" : "int",
    "comment" : "\n     * @return the ending title margin in pixels\n     * @see #setTitleMarginEnd(int)\n     * @attr ref android.R.styleable#Toolbar_titleMarginEnd\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTitleMarginEnd(int margin)",
    "returnType" : "void",
    "comment" : "\n     * Sets the ending title margin in pixels.\n     *\n     * @param margin the ending title margin in pixels\n     * @see #getTitleMarginEnd()\n     * @attr ref android.R.styleable#Toolbar_titleMarginEnd\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getTitleMarginBottom()",
    "returnType" : "int",
    "comment" : "\n     * @return the bottom title margin in pixels\n     * @see #setTitleMarginBottom(int)\n     * @attr ref android.R.styleable#Toolbar_titleMarginBottom\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTitleMarginBottom(int margin)",
    "returnType" : "void",
    "comment" : "\n     * Sets the bottom title margin in pixels.\n     *\n     * @param margin the bottom title margin in pixels\n     * @see #getTitleMarginBottom()\n     * @attr ref android.R.styleable#Toolbar_titleMarginBottom\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onRtlPropertiesChanged(@ResolvedLayoutDir int layoutDirection)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setLogo(@DrawableRes int resId)",
    "returnType" : "void",
    "comment" : "\n     * Set a logo drawable from a resource id.\n     *\n     * <p>This drawable should generally take the place of title text. The logo cannot be\n     * clicked. Apps using a logo should also supply a description using\n     * {@link #setLogoDescription(int)}.</p>\n     *\n     * @param resId ID of a drawable resource\n     ",
    "links" : [ "#setLogoDescription(int)" ]
  }, {
    "name" : "public boolean canShowOverflowMenu()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isOverflowMenuShowing()",
    "returnType" : "boolean",
    "comment" : "\n     * Check whether the overflow menu is currently showing. This may not reflect\n     * a pending show operation in progress.\n     *\n     * @return true if the overflow menu is currently showing\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isOverflowMenuShowPending()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean showOverflowMenu()",
    "returnType" : "boolean",
    "comment" : "\n     * Show the overflow items from the associated menu.\n     *\n     * @return true if the menu was able to be shown, false otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hideOverflowMenu()",
    "returnType" : "boolean",
    "comment" : "\n     * Hide the overflow items from the associated menu.\n     *\n     * @return true if the menu was able to be hidden, false otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMenu(MenuBuilder menu, ActionMenuPresenter outerPresenter)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void dismissPopupMenus()",
    "returnType" : "void",
    "comment" : "\n     * Dismiss all currently showing popup menus, including overflow or submenus.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isTitleTruncated()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setLogo(Drawable drawable)",
    "returnType" : "void",
    "comment" : "\n     * Set a logo drawable.\n     *\n     * <p>This drawable should generally take the place of title text. The logo cannot be\n     * clicked. Apps using a logo should also supply a description using\n     * {@link #setLogoDescription(int)}.</p>\n     *\n     * @param drawable Drawable to use as a logo\n     ",
    "links" : [ "#setLogoDescription(int)" ]
  }, {
    "name" : "public Drawable getLogo()",
    "returnType" : "Drawable",
    "comment" : "\n     * Return the current logo drawable.\n     *\n     * @return The current logo drawable\n     * @see #setLogo(int)\n     * @see #setLogo(android.graphics.drawable.Drawable)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setLogoDescription(@StringRes int resId)",
    "returnType" : "void",
    "comment" : "\n     * Set a description of the toolbar's logo.\n     *\n     * <p>This description will be used for accessibility or other similar descriptions\n     * of the UI.</p>\n     *\n     * @param resId String resource id\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setLogoDescription(CharSequence description)",
    "returnType" : "void",
    "comment" : "\n     * Set a description of the toolbar's logo.\n     *\n     * <p>This description will be used for accessibility or other similar descriptions\n     * of the UI.</p>\n     *\n     * @param description Description to set\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getLogoDescription()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Return the description of the toolbar's logo.\n     *\n     * @return A description of the logo\n     ",
    "links" : [ ]
  }, {
    "name" : "private void ensureLogoView()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasExpandedActionView()",
    "returnType" : "boolean",
    "comment" : "\n     * Check whether this Toolbar is currently hosting an expanded action view.\n     *\n     * <p>An action view may be expanded either directly from the\n     * {@link android.view.MenuItem MenuItem} it belongs to or by user action. If the Toolbar\n     * has an expanded action view it can be collapsed using the {@link #collapseActionView()}\n     * method.</p>\n     *\n     * @return true if the Toolbar has an expanded action view\n     ",
    "links" : [ "#collapseActionView()", "android.view.MenuItem" ]
  }, {
    "name" : "public void collapseActionView()",
    "returnType" : "void",
    "comment" : "\n     * Collapse a currently expanded action view. If this Toolbar does not have an\n     * expanded action view this method has no effect.\n     *\n     * <p>An action view may be expanded either directly from the\n     * {@link android.view.MenuItem MenuItem} it belongs to or by user action.</p>\n     *\n     * @see #hasExpandedActionView()\n     ",
    "links" : [ "android.view.MenuItem" ]
  }, {
    "name" : "public CharSequence getTitle()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Returns the title of this toolbar.\n     *\n     * @return The current title.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTitle(@StringRes int resId)",
    "returnType" : "void",
    "comment" : "\n     * Set the title of this toolbar.\n     *\n     * <p>A title should be used as the anchor for a section of content. It should\n     * describe or name the content being viewed.</p>\n     *\n     * @param resId Resource ID of a string to set as the title\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTitle(CharSequence title)",
    "returnType" : "void",
    "comment" : "\n     * Set the title of this toolbar.\n     *\n     * <p>A title should be used as the anchor for a section of content. It should\n     * describe or name the content being viewed.</p>\n     *\n     * @param title Title to set\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getSubtitle()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Return the subtitle of this toolbar.\n     *\n     * @return The current subtitle\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSubtitle(@StringRes int resId)",
    "returnType" : "void",
    "comment" : "\n     * Set the subtitle of this toolbar.\n     *\n     * <p>Subtitles should express extended information about the current content.</p>\n     *\n     * @param resId String resource ID\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSubtitle(CharSequence subtitle)",
    "returnType" : "void",
    "comment" : "\n     * Set the subtitle of this toolbar.\n     *\n     * <p>Subtitles should express extended information about the current content.</p>\n     *\n     * @param subtitle Subtitle to set\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTitleTextAppearance(Context context, @StyleRes int resId)",
    "returnType" : "void",
    "comment" : "\n     * Sets the text color, size, style, hint color, and highlight color\n     * from the specified TextAppearance resource.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSubtitleTextAppearance(Context context, @StyleRes int resId)",
    "returnType" : "void",
    "comment" : "\n     * Sets the text color, size, style, hint color, and highlight color\n     * from the specified TextAppearance resource.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTitleTextColor(@ColorInt int color)",
    "returnType" : "void",
    "comment" : "\n     * Sets the text color of the title, if present.\n     *\n     * @param color The new text color in 0xAARRGGBB format\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSubtitleTextColor(@ColorInt int color)",
    "returnType" : "void",
    "comment" : "\n     * Sets the text color of the subtitle, if present.\n     *\n     * @param color The new text color in 0xAARRGGBB format\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getNavigationContentDescription()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Retrieve the currently configured content description for the navigation button view.\n     * This will be used to describe the navigation action to users through mechanisms such\n     * as screen readers or tooltips.\n     *\n     * @return The navigation button's content description\n     *\n     * @attr ref android.R.styleable#Toolbar_navigationContentDescription\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setNavigationContentDescription(@StringRes int resId)",
    "returnType" : "void",
    "comment" : "\n     * Set a content description for the navigation button if one is present. The content\n     * description will be read via screen readers or other accessibility systems to explain\n     * the action of the navigation button.\n     *\n     * @param resId Resource ID of a content description string to set, or 0 to\n     *              clear the description\n     *\n     * @attr ref android.R.styleable#Toolbar_navigationContentDescription\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setNavigationContentDescription(@Nullable CharSequence description)",
    "returnType" : "void",
    "comment" : "\n     * Set a content description for the navigation button if one is present. The content\n     * description will be read via screen readers or other accessibility systems to explain\n     * the action of the navigation button.\n     *\n     * @param description Content description to set, or <code>null</code> to\n     *                    clear the content description\n     *\n     * @attr ref android.R.styleable#Toolbar_navigationContentDescription\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setNavigationIcon(@DrawableRes int resId)",
    "returnType" : "void",
    "comment" : "\n     * Set the icon to use for the toolbar's navigation button.\n     *\n     * <p>The navigation button appears at the start of the toolbar if present. Setting an icon\n     * will make the navigation button visible.</p>\n     *\n     * <p>If you use a navigation icon you should also set a description for its action using\n     * {@link #setNavigationContentDescription(int)}. This is used for accessibility and\n     * tooltips.</p>\n     *\n     * @param resId Resource ID of a drawable to set\n     *\n     * @attr ref android.R.styleable#Toolbar_navigationIcon\n     ",
    "links" : [ "#setNavigationContentDescription(int)" ]
  }, {
    "name" : "public void setNavigationIcon(@Nullable Drawable icon)",
    "returnType" : "void",
    "comment" : "\n     * Set the icon to use for the toolbar's navigation button.\n     *\n     * <p>The navigation button appears at the start of the toolbar if present. Setting an icon\n     * will make the navigation button visible.</p>\n     *\n     * <p>If you use a navigation icon you should also set a description for its action using\n     * {@link #setNavigationContentDescription(int)}. This is used for accessibility and\n     * tooltips.</p>\n     *\n     * @param icon Drawable to set, may be null to clear the icon\n     *\n     * @attr ref android.R.styleable#Toolbar_navigationIcon\n     ",
    "links" : [ "#setNavigationContentDescription(int)" ]
  }, {
    "name" : "public Drawable getNavigationIcon()",
    "returnType" : "Drawable",
    "comment" : "\n     * Return the current drawable used as the navigation icon.\n     *\n     * @return The navigation icon drawable\n     *\n     * @attr ref android.R.styleable#Toolbar_navigationIcon\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setNavigationOnClickListener(OnClickListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Set a listener to respond to navigation events.\n     *\n     * <p>This listener will be called whenever the user clicks the navigation button\n     * at the start of the toolbar. An icon must be set for the navigation button to appear.</p>\n     *\n     * @param listener Listener to set\n     * @see #setNavigationIcon(android.graphics.drawable.Drawable)\n     ",
    "links" : [ ]
  }, {
    "name" : "public View getNavigationView()",
    "returnType" : "View",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getCollapseContentDescription()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Retrieve the currently configured content description for the collapse button view.\n     * This will be used to describe the collapse action to users through mechanisms such\n     * as screen readers or tooltips.\n     *\n     * @return The collapse button's content description\n     *\n     * @attr ref android.R.styleable#Toolbar_collapseContentDescription\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCollapseContentDescription(@StringRes int resId)",
    "returnType" : "void",
    "comment" : "\n     * Set a content description for the collapse button if one is present. The content description\n     * will be read via screen readers or other accessibility systems to explain the action of the\n     * collapse button.\n     *\n     * @param resId Resource ID of a content description string to set, or 0 to\n     *              clear the description\n     *\n     * @attr ref android.R.styleable#Toolbar_collapseContentDescription\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCollapseContentDescription(@Nullable CharSequence description)",
    "returnType" : "void",
    "comment" : "\n     * Set a content description for the collapse button if one is present. The content description\n     * will be read via screen readers or other accessibility systems to explain the action of the\n     * navigation button.\n     *\n     * @param description Content description to set, or <code>null</code> to\n     *                    clear the content description\n     *\n     * @attr ref android.R.styleable#Toolbar_collapseContentDescription\n     ",
    "links" : [ ]
  }, {
    "name" : "public Drawable getCollapseIcon()",
    "returnType" : "Drawable",
    "comment" : "\n     * Return the current drawable used as the collapse icon.\n     *\n     * @return The collapse icon drawable\n     *\n     * @attr ref android.R.styleable#Toolbar_collapseIcon\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCollapseIcon(@DrawableRes int resId)",
    "returnType" : "void",
    "comment" : "\n     * Set the icon to use for the toolbar's collapse button.\n     *\n     * <p>The collapse button appears at the start of the toolbar when an action view is present\n     * .</p>\n     *\n     * @param resId Resource ID of a drawable to set\n     *\n     * @attr ref android.R.styleable#Toolbar_collapseIcon\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCollapseIcon(@Nullable Drawable icon)",
    "returnType" : "void",
    "comment" : "\n     * Set the icon to use for the toolbar's collapse button.\n     *\n     * <p>The collapse button appears at the start of the toolbar when an action view is present\n     * .</p>\n     *\n     * @param icon Drawable to set, may be null to use the default icon\n     *\n     * @attr ref android.R.styleable#Toolbar_collapseIcon\n     ",
    "links" : [ ]
  }, {
    "name" : "public Menu getMenu()",
    "returnType" : "Menu",
    "comment" : "\n     * Return the Menu shown in the toolbar.\n     *\n     * <p>Applications that wish to populate the toolbar's menu can do so from here. To use\n     * an XML menu resource, use {@link #inflateMenu(int)}.</p>\n     *\n     * @return The toolbar's Menu\n     ",
    "links" : [ "#inflateMenu(int)" ]
  }, {
    "name" : "public void setOverflowIcon(@Nullable Drawable icon)",
    "returnType" : "void",
    "comment" : "\n     * Set the icon to use for the overflow button.\n     *\n     * @param icon Drawable to set, may be null to clear the icon\n     ",
    "links" : [ ]
  }, {
    "name" : "public Drawable getOverflowIcon()",
    "returnType" : "Drawable",
    "comment" : "\n     * Return the current drawable used as the overflow icon.\n     *\n     * @return The overflow icon drawable\n     ",
    "links" : [ ]
  }, {
    "name" : "private void ensureMenu()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void ensureMenuView()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private MenuInflater getMenuInflater()",
    "returnType" : "MenuInflater",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void inflateMenu(@MenuRes int resId)",
    "returnType" : "void",
    "comment" : "\n     * Inflate a menu resource into this toolbar.\n     *\n     * <p>Inflate an XML menu resource into this toolbar. Existing items in the menu will not\n     * be modified or removed.</p>\n     *\n     * @param resId ID of a menu resource to inflate\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOnMenuItemClickListener(OnMenuItemClickListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Set a listener to respond to menu item click events.\n     *\n     * <p>This listener will be invoked whenever a user selects a menu item from\n     * the action buttons presented at the end of the toolbar or the associated overflow.</p>\n     *\n     * @param listener Listener to set\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setContentInsetsRelative(int contentInsetStart, int contentInsetEnd)",
    "returnType" : "void",
    "comment" : "\n     * Sets the content insets for this toolbar relative to layout direction.\n     *\n     * <p>The content inset affects the valid area for Toolbar content other than\n     * the navigation button and menu. Insets define the minimum margin for these components\n     * and can be used to effectively align Toolbar content along well-known gridlines.</p>\n     *\n     * @param contentInsetStart Content inset for the toolbar starting edge\n     * @param contentInsetEnd Content inset for the toolbar ending edge\n     *\n     * @see #setContentInsetsAbsolute(int, int)\n     * @see #getContentInsetStart()\n     * @see #getContentInsetEnd()\n     * @see #getContentInsetLeft()\n     * @see #getContentInsetRight()\n     * @attr ref android.R.styleable#Toolbar_contentInsetEnd\n     * @attr ref android.R.styleable#Toolbar_contentInsetStart\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getContentInsetStart()",
    "returnType" : "int",
    "comment" : "\n     * Gets the starting content inset for this toolbar.\n     *\n     * <p>The content inset affects the valid area for Toolbar content other than\n     * the navigation button and menu. Insets define the minimum margin for these components\n     * and can be used to effectively align Toolbar content along well-known gridlines.</p>\n     *\n     * @return The starting content inset for this toolbar\n     *\n     * @see #setContentInsetsRelative(int, int)\n     * @see #setContentInsetsAbsolute(int, int)\n     * @see #getContentInsetEnd()\n     * @see #getContentInsetLeft()\n     * @see #getContentInsetRight()\n     * @attr ref android.R.styleable#Toolbar_contentInsetStart\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getContentInsetEnd()",
    "returnType" : "int",
    "comment" : "\n     * Gets the ending content inset for this toolbar.\n     *\n     * <p>The content inset affects the valid area for Toolbar content other than\n     * the navigation button and menu. Insets define the minimum margin for these components\n     * and can be used to effectively align Toolbar content along well-known gridlines.</p>\n     *\n     * @return The ending content inset for this toolbar\n     *\n     * @see #setContentInsetsRelative(int, int)\n     * @see #setContentInsetsAbsolute(int, int)\n     * @see #getContentInsetStart()\n     * @see #getContentInsetLeft()\n     * @see #getContentInsetRight()\n     * @attr ref android.R.styleable#Toolbar_contentInsetEnd\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setContentInsetsAbsolute(int contentInsetLeft, int contentInsetRight)",
    "returnType" : "void",
    "comment" : "\n     * Sets the content insets for this toolbar.\n     *\n     * <p>The content inset affects the valid area for Toolbar content other than\n     * the navigation button and menu. Insets define the minimum margin for these components\n     * and can be used to effectively align Toolbar content along well-known gridlines.</p>\n     *\n     * @param contentInsetLeft Content inset for the toolbar's left edge\n     * @param contentInsetRight Content inset for the toolbar's right edge\n     *\n     * @see #setContentInsetsAbsolute(int, int)\n     * @see #getContentInsetStart()\n     * @see #getContentInsetEnd()\n     * @see #getContentInsetLeft()\n     * @see #getContentInsetRight()\n     * @attr ref android.R.styleable#Toolbar_contentInsetLeft\n     * @attr ref android.R.styleable#Toolbar_contentInsetRight\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getContentInsetLeft()",
    "returnType" : "int",
    "comment" : "\n     * Gets the left content inset for this toolbar.\n     *\n     * <p>The content inset affects the valid area for Toolbar content other than\n     * the navigation button and menu. Insets define the minimum margin for these components\n     * and can be used to effectively align Toolbar content along well-known gridlines.</p>\n     *\n     * @return The left content inset for this toolbar\n     *\n     * @see #setContentInsetsRelative(int, int)\n     * @see #setContentInsetsAbsolute(int, int)\n     * @see #getContentInsetStart()\n     * @see #getContentInsetEnd()\n     * @see #getContentInsetRight()\n     * @attr ref android.R.styleable#Toolbar_contentInsetLeft\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getContentInsetRight()",
    "returnType" : "int",
    "comment" : "\n     * Gets the right content inset for this toolbar.\n     *\n     * <p>The content inset affects the valid area for Toolbar content other than\n     * the navigation button and menu. Insets define the minimum margin for these components\n     * and can be used to effectively align Toolbar content along well-known gridlines.</p>\n     *\n     * @return The right content inset for this toolbar\n     *\n     * @see #setContentInsetsRelative(int, int)\n     * @see #setContentInsetsAbsolute(int, int)\n     * @see #getContentInsetStart()\n     * @see #getContentInsetEnd()\n     * @see #getContentInsetLeft()\n     * @attr ref android.R.styleable#Toolbar_contentInsetRight\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getContentInsetStartWithNavigation()",
    "returnType" : "int",
    "comment" : "\n     * Gets the start content inset to use when a navigation button is present.\n     *\n     * <p>Different content insets are often called for when additional buttons are present\n     * in the toolbar, as well as at different toolbar sizes. The larger value of\n     * {@link #getContentInsetStart()} and this value will be used during layout.</p>\n     *\n     * @return the start content inset used when a navigation icon has been set in pixels\n     *\n     * @see #setContentInsetStartWithNavigation(int)\n     * @attr ref android.R.styleable#Toolbar_contentInsetStartWithNavigation\n     ",
    "links" : [ "#getContentInsetStart()" ]
  }, {
    "name" : "public void setContentInsetStartWithNavigation(int insetStartWithNavigation)",
    "returnType" : "void",
    "comment" : "\n     * Sets the start content inset to use when a navigation button is present.\n     *\n     * <p>Different content insets are often called for when additional buttons are present\n     * in the toolbar, as well as at different toolbar sizes. The larger value of\n     * {@link #getContentInsetStart()} and this value will be used during layout.</p>\n     *\n     * @param insetStartWithNavigation the inset to use when a navigation icon has been set\n     *                                 in pixels\n     *\n     * @see #getContentInsetStartWithNavigation()\n     * @attr ref android.R.styleable#Toolbar_contentInsetStartWithNavigation\n     ",
    "links" : [ "#getContentInsetStart()" ]
  }, {
    "name" : "public int getContentInsetEndWithActions()",
    "returnType" : "int",
    "comment" : "\n     * Gets the end content inset to use when action buttons are present.\n     *\n     * <p>Different content insets are often called for when additional buttons are present\n     * in the toolbar, as well as at different toolbar sizes. The larger value of\n     * {@link #getContentInsetEnd()} and this value will be used during layout.</p>\n     *\n     * @return the end content inset used when a menu has been set in pixels\n     *\n     * @see #setContentInsetEndWithActions(int)\n     * @attr ref android.R.styleable#Toolbar_contentInsetEndWithActions\n     ",
    "links" : [ "#getContentInsetEnd()" ]
  }, {
    "name" : "public void setContentInsetEndWithActions(int insetEndWithActions)",
    "returnType" : "void",
    "comment" : "\n     * Sets the start content inset to use when action buttons are present.\n     *\n     * <p>Different content insets are often called for when additional buttons are present\n     * in the toolbar, as well as at different toolbar sizes. The larger value of\n     * {@link #getContentInsetEnd()} and this value will be used during layout.</p>\n     *\n     * @param insetEndWithActions the inset to use when a menu has been set in pixels\n     *\n     * @see #setContentInsetEndWithActions(int)\n     * @attr ref android.R.styleable#Toolbar_contentInsetEndWithActions\n     ",
    "links" : [ "#getContentInsetEnd()" ]
  }, {
    "name" : "public int getCurrentContentInsetStart()",
    "returnType" : "int",
    "comment" : "\n     * Gets the content inset that will be used on the starting side of the bar in the current\n     * toolbar configuration.\n     *\n     * @return the current content inset start in pixels\n     *\n     * @see #getContentInsetStartWithNavigation()\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getCurrentContentInsetEnd()",
    "returnType" : "int",
    "comment" : "\n     * Gets the content inset that will be used on the ending side of the bar in the current\n     * toolbar configuration.\n     *\n     * @return the current content inset end in pixels\n     *\n     * @see #getContentInsetEndWithActions()\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getCurrentContentInsetLeft()",
    "returnType" : "int",
    "comment" : "\n     * Gets the content inset that will be used on the left side of the bar in the current\n     * toolbar configuration.\n     *\n     * @return the current content inset left in pixels\n     *\n     * @see #getContentInsetStartWithNavigation()\n     * @see #getContentInsetEndWithActions()\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getCurrentContentInsetRight()",
    "returnType" : "int",
    "comment" : "\n     * Gets the content inset that will be used on the right side of the bar in the current\n     * toolbar configuration.\n     *\n     * @return the current content inset right in pixels\n     *\n     * @see #getContentInsetStartWithNavigation()\n     * @see #getContentInsetEndWithActions()\n     ",
    "links" : [ ]
  }, {
    "name" : "private void ensureNavButtonView()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void ensureCollapseButtonView()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void addSystemView(View v, boolean allowHide)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected Parcelable onSaveInstanceState()",
    "returnType" : "Parcelable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onRestoreInstanceState(Parcelable state)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void postShowOverflowMenu()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onDetachedFromWindow()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean onTouchEvent(MotionEvent ev)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onSetLayoutParams(View child, ViewGroup.LayoutParams lp)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void measureChildConstrained(View child, int parentWidthSpec, int widthUsed, int parentHeightSpec, int heightUsed, int heightConstraint)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int measureChildCollapseMargins(View child, int parentWidthMeasureSpec, int widthUsed, int parentHeightMeasureSpec, int heightUsed, int[] collapsingMargins)",
    "returnType" : "int",
    "comment" : "\n     * Returns the width + uncollapsed margins\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean shouldCollapse()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the Toolbar is collapsible and has no child views with a measured size > 0.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onLayout(boolean changed, int l, int t, int r, int b)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getViewListMeasuredWidth(List<View> views, int[] collapsingMargins)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int layoutChildLeft(View child, int left, int[] collapsingMargins, int alignmentHeight)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int layoutChildRight(View child, int right, int[] collapsingMargins, int alignmentHeight)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getChildTop(View child, int alignmentHeight)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getChildVerticalGravity(int gravity)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void addCustomViewsWithGravity(List<View> views, int gravity)",
    "returnType" : "void",
    "comment" : "\n     * Prepare a list of non-SYSTEM child views. If the layout direction is RTL\n     * this will be in reverse child order.\n     *\n     * @param views List to populate. It will be cleared before use.\n     * @param gravity Horizontal gravity to match against\n     ",
    "links" : [ ]
  }, {
    "name" : "private int getChildHorizontalGravity(int gravity)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean shouldLayout(View view)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getHorizontalMargins(View v)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getVerticalMargins(View v)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public LayoutParams generateLayoutParams(AttributeSet attrs)",
    "returnType" : "LayoutParams",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected LayoutParams generateLayoutParams(ViewGroup.LayoutParams p)",
    "returnType" : "LayoutParams",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected LayoutParams generateDefaultLayoutParams()",
    "returnType" : "LayoutParams",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected boolean checkLayoutParams(ViewGroup.LayoutParams p)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isCustomView(View child)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public DecorToolbar getWrapper()",
    "returnType" : "DecorToolbar",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : " void removeChildrenForExpandedActionView()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void addChildrenForExpandedActionView()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isChildOrHidden(View child)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setCollapsible(boolean collapsible)",
    "returnType" : "void",
    "comment" : "\n     * Force the toolbar to collapse to zero-height during measurement if\n     * it could be considered \"empty\" (no visible elements with nonzero measured size)\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMenuCallbacks(MenuPresenter.Callback pcb, MenuBuilder.Callback mcb)",
    "returnType" : "void",
    "comment" : "\n     * Must be called before the menu is accessed\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void ensureContentInsets()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " ActionMenuPresenter getOuterActionMenuPresenter()",
    "returnType" : "ActionMenuPresenter",
    "comment" : "\n     * Accessor to enable LayoutLib to get ActionMenuPresenter directly.\n     ",
    "links" : [ ]
  }, {
    "name" : " Context getPopupContext()",
    "returnType" : "Context",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "mMenuView", "mTitleTextView", "mSubtitleTextView", "mNavButtonView", "mLogoView", "mCollapseIcon", "mCollapseDescription", "mCollapseButtonView", "mExpandedActionView", "mPopupContext", "mPopupTheme", "mTitleTextAppearance", "mSubtitleTextAppearance", "mNavButtonStyle", "mButtonGravity", "mMaxButtonHeight", "mTitleMarginStart", "mTitleMarginEnd", "mTitleMarginTop", "mTitleMarginBottom", "mContentInsets", "mContentInsetStartWithNavigation", "mContentInsetEndWithActions", "mGravity", "mTitleText", "mSubtitleText", "mTitleTextColor", "mSubtitleTextColor", "mEatingTouch", "mTempViews", "mHiddenViews", "mTempMargins", "mOnMenuItemClickListener", "mMenuViewItemClickListener", "mWrapper", "mOuterActionMenuPresenter", "mExpandedMenuPresenter", "mActionMenuPresenterCallback", "mMenuBuilderCallback", "mCollapsible", "mShowOverflowMenuRunnable" ],
  "methodNames" : [ "protected void onAttachedToWindow()", "public void setPopupTheme(@StyleRes int resId)", "public int getPopupTheme()", "public void setTitleMargin(int start, int top, int end, int bottom)", "public int getTitleMarginStart()", "public void setTitleMarginStart(int margin)", "public int getTitleMarginTop()", "public void setTitleMarginTop(int margin)", "public int getTitleMarginEnd()", "public void setTitleMarginEnd(int margin)", "public int getTitleMarginBottom()", "public void setTitleMarginBottom(int margin)", "public void onRtlPropertiesChanged(@ResolvedLayoutDir int layoutDirection)", "public void setLogo(@DrawableRes int resId)", "public boolean canShowOverflowMenu()", "public boolean isOverflowMenuShowing()", "public boolean isOverflowMenuShowPending()", "public boolean showOverflowMenu()", "public boolean hideOverflowMenu()", "public void setMenu(MenuBuilder menu, ActionMenuPresenter outerPresenter)", "public void dismissPopupMenus()", "public boolean isTitleTruncated()", "public void setLogo(Drawable drawable)", "public Drawable getLogo()", "public void setLogoDescription(@StringRes int resId)", "public void setLogoDescription(CharSequence description)", "public CharSequence getLogoDescription()", "private void ensureLogoView()", "public boolean hasExpandedActionView()", "public void collapseActionView()", "public CharSequence getTitle()", "public void setTitle(@StringRes int resId)", "public void setTitle(CharSequence title)", "public CharSequence getSubtitle()", "public void setSubtitle(@StringRes int resId)", "public void setSubtitle(CharSequence subtitle)", "public void setTitleTextAppearance(Context context, @StyleRes int resId)", "public void setSubtitleTextAppearance(Context context, @StyleRes int resId)", "public void setTitleTextColor(@ColorInt int color)", "public void setSubtitleTextColor(@ColorInt int color)", "public CharSequence getNavigationContentDescription()", "public void setNavigationContentDescription(@StringRes int resId)", "public void setNavigationContentDescription(@Nullable CharSequence description)", "public void setNavigationIcon(@DrawableRes int resId)", "public void setNavigationIcon(@Nullable Drawable icon)", "public Drawable getNavigationIcon()", "public void setNavigationOnClickListener(OnClickListener listener)", "public View getNavigationView()", "public CharSequence getCollapseContentDescription()", "public void setCollapseContentDescription(@StringRes int resId)", "public void setCollapseContentDescription(@Nullable CharSequence description)", "public Drawable getCollapseIcon()", "public void setCollapseIcon(@DrawableRes int resId)", "public void setCollapseIcon(@Nullable Drawable icon)", "public Menu getMenu()", "public void setOverflowIcon(@Nullable Drawable icon)", "public Drawable getOverflowIcon()", "private void ensureMenu()", "private void ensureMenuView()", "private MenuInflater getMenuInflater()", "public void inflateMenu(@MenuRes int resId)", "public void setOnMenuItemClickListener(OnMenuItemClickListener listener)", "public void setContentInsetsRelative(int contentInsetStart, int contentInsetEnd)", "public int getContentInsetStart()", "public int getContentInsetEnd()", "public void setContentInsetsAbsolute(int contentInsetLeft, int contentInsetRight)", "public int getContentInsetLeft()", "public int getContentInsetRight()", "public int getContentInsetStartWithNavigation()", "public void setContentInsetStartWithNavigation(int insetStartWithNavigation)", "public int getContentInsetEndWithActions()", "public void setContentInsetEndWithActions(int insetEndWithActions)", "public int getCurrentContentInsetStart()", "public int getCurrentContentInsetEnd()", "public int getCurrentContentInsetLeft()", "public int getCurrentContentInsetRight()", "private void ensureNavButtonView()", "private void ensureCollapseButtonView()", "private void addSystemView(View v, boolean allowHide)", "protected Parcelable onSaveInstanceState()", "protected void onRestoreInstanceState(Parcelable state)", "private void postShowOverflowMenu()", "protected void onDetachedFromWindow()", "public boolean onTouchEvent(MotionEvent ev)", "protected void onSetLayoutParams(View child, ViewGroup.LayoutParams lp)", "private void measureChildConstrained(View child, int parentWidthSpec, int widthUsed, int parentHeightSpec, int heightUsed, int heightConstraint)", "private int measureChildCollapseMargins(View child, int parentWidthMeasureSpec, int widthUsed, int parentHeightMeasureSpec, int heightUsed, int[] collapsingMargins)", "private boolean shouldCollapse()", "protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)", "protected void onLayout(boolean changed, int l, int t, int r, int b)", "private int getViewListMeasuredWidth(List<View> views, int[] collapsingMargins)", "private int layoutChildLeft(View child, int left, int[] collapsingMargins, int alignmentHeight)", "private int layoutChildRight(View child, int right, int[] collapsingMargins, int alignmentHeight)", "private int getChildTop(View child, int alignmentHeight)", "private int getChildVerticalGravity(int gravity)", "private void addCustomViewsWithGravity(List<View> views, int gravity)", "private int getChildHorizontalGravity(int gravity)", "private boolean shouldLayout(View view)", "private int getHorizontalMargins(View v)", "private int getVerticalMargins(View v)", "public LayoutParams generateLayoutParams(AttributeSet attrs)", "protected LayoutParams generateLayoutParams(ViewGroup.LayoutParams p)", "protected LayoutParams generateDefaultLayoutParams()", "protected boolean checkLayoutParams(ViewGroup.LayoutParams p)", "private static boolean isCustomView(View child)", "public DecorToolbar getWrapper()", " void removeChildrenForExpandedActionView()", " void addChildrenForExpandedActionView()", "private boolean isChildOrHidden(View child)", "public void setCollapsible(boolean collapsible)", "public void setMenuCallbacks(MenuPresenter.Callback pcb, MenuBuilder.Callback mcb)", "private void ensureContentInsets()", " ActionMenuPresenter getOuterActionMenuPresenter()", " Context getPopupContext()" ]
}