{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/net/SocketOutputStream.java",
  "packageName" : "java.net",
  "className" : "SocketOutputStream",
  "comment" : "\n * This stream extends FileOutputStream to implement a\n * SocketOutputStream. Note that this class should <b>NOT</b> be\n * public.\n *\n * @author      Jonathan Payne\n * @author      Arthur van Hoff\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "impl",
    "type" : "AbstractPlainSocketImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "temp",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "socket",
    "type" : "Socket",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "closing",
    "type" : "boolean",
    "comment" : "\n     * Closes the stream.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final FileChannel getChannel()",
    "returnType" : "FileChannel",
    "comment" : "\n     * Returns the unique {@link java.nio.channels.FileChannel FileChannel}\n     * object associated with this file output stream. </p>\n     *\n     * The {@code getChannel} method of {@code SocketOutputStream}\n     * returns {@code null} since it is a socket based stream.</p>\n     *\n     * @return  the file channel associated with this file output stream\n     *\n     * @since 1.4\n     * @spec JSR-51\n     ",
    "links" : [ "java.nio.channels.FileChannel" ]
  }, {
    "name" : "private native void socketWrite0(FileDescriptor fd, byte[] b, int off, int len) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes to the socket.\n     * @param fd the FileDescriptor\n     * @param b the data to be written\n     * @param off the start offset in the data\n     * @param len the number of bytes that are written\n     * @exception IOException If an I/O error has occurred.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void socketWrite(byte[] b, int off, int len) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes to the socket with appropriate locking of the\n     * FileDescriptor.\n     * @param b the data to be written\n     * @param off the start offset in the data\n     * @param len the number of bytes that are written\n     * @exception IOException If an I/O error has occurred.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void write(int b) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes a byte to the socket.\n     * @param b the data to be written\n     * @exception IOException If an I/O error has occurred.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void write(byte[] b) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes the contents of the buffer <i>b</i> to the socket.\n     * @param b the data to be written\n     * @exception SocketException If an I/O error has occurred.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void write(byte[] b, int off, int len) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes <i>length</i> bytes from buffer <i>b</i> starting at\n     * offset <i>len</i>.\n     * @param b the data to be written\n     * @param off the start offset in the data\n     * @param len the number of bytes that are written\n     * @exception SocketException If an I/O error has occurred.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void close() throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void finalize()",
    "returnType" : "void",
    "comment" : "\n     * Overrides finalize, the fd is closed by the Socket.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public final FileChannel getChannel()", "private native void socketWrite0(FileDescriptor fd, byte[] b, int off, int len) throws IOException", "private void socketWrite(byte[] b, int off, int len) throws IOException", "public void write(int b) throws IOException", "public void write(byte[] b) throws IOException", "public void write(byte[] b, int off, int len) throws IOException", "public void close() throws IOException", "protected void finalize()" ],
  "variableNames" : [ "impl", "temp", "socket", "closing" ]
}