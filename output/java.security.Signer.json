{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/security/Signer.java",
  "packageName" : "java.security",
  "className" : "Signer",
  "comment" : "\n * This class is used to represent an Identity that can also digitally\n * sign data.\n *\n * <p>The management of a signer's private keys is an important and\n * sensitive issue that should be handled by subclasses as appropriate\n * to their intended use.\n *\n * @see Identity\n *\n * @author Benjamin Renaud\n * @since 1.1\n *\n * @deprecated This class is deprecated and subject to removal in a future\n *     version of Java SE. It has been replaced by\n *     {@code java.security.KeyStore}, the {@code java.security.cert} package,\n *     and {@code java.security.Principal}.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "privateKey",
    "type" : "PrivateKey",
    "comment" : "\n     * The signer's private key.\n     *\n     * @serial\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public PrivateKey getPrivateKey()",
    "returnType" : "PrivateKey",
    "comment" : "\n     * Returns this signer's private key.\n     *\n     * <p>First, if there is a security manager, its {@code checkSecurityAccess}\n     * method is called with {@code \"getSignerPrivateKey\"}\n     * as its argument to see if it's ok to return the private key.\n     *\n     * @return this signer's private key, or null if the private key has\n     * not yet been set.\n     *\n     * @exception  SecurityException  if a security manager exists and its\n     * {@code checkSecurityAccess} method doesn't allow\n     * returning the private key.\n     *\n     * @see SecurityManager#checkSecurityAccess\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void setKeyPair(KeyPair pair) throws InvalidParameterException, KeyException",
    "returnType" : "void",
    "comment" : "\n     * Sets the key pair (public key and private key) for this signer.\n     *\n     * <p>First, if there is a security manager, its {@code checkSecurityAccess}\n     * method is called with {@code \"setSignerKeyPair\"}\n     * as its argument to see if it's ok to set the key pair.\n     *\n     * @param pair an initialized key pair.\n     *\n     * @exception InvalidParameterException if the key pair is not\n     * properly initialized.\n     * @exception KeyException if the key pair cannot be set for any\n     * other reason.\n     * @exception  SecurityException  if a security manager exists and its\n     * {@code checkSecurityAccess} method doesn't allow\n     * setting the key pair.\n     *\n     * @see SecurityManager#checkSecurityAccess\n     ",
    "links" : [ ]
  }, {
    "name" : " String printKeys()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a string of information about the signer.\n     *\n     * @return a string of information about the signer.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void check(String directive)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public PrivateKey getPrivateKey()", "public final void setKeyPair(KeyPair pair) throws InvalidParameterException, KeyException", " String printKeys()", "public String toString()", "private static void check(String directive)" ],
  "variableNames" : [ "serialVersionUID", "privateKey" ]
}