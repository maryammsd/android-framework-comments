{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/sql/Statement.java",
  "packageName" : "java.sql",
  "className" : "Statement",
  "comment" : "\n * <P>The object used for executing a static SQL statement\n * and returning the results it produces.\n * <P>\n * By default, only one <code>ResultSet</code> object per <code>Statement</code>\n * object can be open at the same time. Therefore, if the reading of one\n * <code>ResultSet</code> object is interleaved\n * with the reading of another, each must have been generated by\n * different <code>Statement</code> objects. All execution methods in the\n * <code>Statement</code> interface implicitly close a statment's current\n * <code>ResultSet</code> object if an open one exists.\n *\n * @see Connection#createStatement\n * @see ResultSet\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "CLOSE_CURRENT_RESULT",
    "type" : "int",
    "comment" : "\n     * The constant indicating that the current <code>ResultSet</code> object\n     * should be closed when calling <code>getMoreResults</code>.\n     *\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "KEEP_CURRENT_RESULT",
    "type" : "int",
    "comment" : "\n     * The constant indicating that the current <code>ResultSet</code> object\n     * should not be closed when calling <code>getMoreResults</code>.\n     *\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "CLOSE_ALL_RESULTS",
    "type" : "int",
    "comment" : "\n     * The constant indicating that all <code>ResultSet</code> objects that\n     * have previously been kept open should be closed when calling\n     * <code>getMoreResults</code>.\n     *\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "SUCCESS_NO_INFO",
    "type" : "int",
    "comment" : "\n     * The constant indicating that a batch statement executed successfully\n     * but that no count of the number of rows it affected is available.\n     *\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "EXECUTE_FAILED",
    "type" : "int",
    "comment" : "\n     * The constant indicating that an error occured while executing a\n     * batch statement.\n     *\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "RETURN_GENERATED_KEYS",
    "type" : "int",
    "comment" : "\n     * The constant indicating that generated keys should be made\n     * available for retrieval.\n     *\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "NO_GENERATED_KEYS",
    "type" : "int",
    "comment" : "\n     * The constant indicating that generated keys should not be made\n     * available for retrieval.\n     *\n     * @since 1.4\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " ResultSet executeQuery(String sql) throws SQLException",
    "returnType" : "ResultSet",
    "comment" : "\n     * Executes the given SQL statement, which returns a single\n     * <code>ResultSet</code> object.\n     *<p>\n     * <strong>Note:</strong>This method cannot be called on a\n     * <code>PreparedStatement</code> or <code>CallableStatement</code>.\n     * @param sql an SQL statement to be sent to the database, typically a\n     *        static SQL <code>SELECT</code> statement\n     * @return a <code>ResultSet</code> object that contains the data produced\n     *         by the given query; never <code>null</code>\n     * @exception SQLException if a database access error occurs,\n     * this method is called on a closed <code>Statement</code>, the given\n     *            SQL statement produces anything other than a single\n     *            <code>ResultSet</code> object, the method is called on a\n     * <code>PreparedStatement</code> or <code>CallableStatement</code>\n     * @throws SQLTimeoutException when the driver has determined that the\n     * timeout value that was specified by the {@code setQueryTimeout}\n     * method has been exceeded and has at least attempted to cancel\n     * the currently running {@code Statement}\n     ",
    "links" : [ ]
  }, {
    "name" : " int executeUpdate(String sql) throws SQLException",
    "returnType" : "int",
    "comment" : "\n     * Executes the given SQL statement, which may be an <code>INSERT</code>,\n     * <code>UPDATE</code>, or <code>DELETE</code> statement or an\n     * SQL statement that returns nothing, such as an SQL DDL statement.\n     *<p>\n     * <strong>Note:</strong>This method cannot be called on a\n     * <code>PreparedStatement</code> or <code>CallableStatement</code>.\n     * @param sql an SQL Data Manipulation Language (DML) statement, such as <code>INSERT</code>, <code>UPDATE</code> or\n     * <code>DELETE</code>; or an SQL statement that returns nothing,\n     * such as a DDL statement.\n     *\n     * @return either (1) the row count for SQL Data Manipulation Language (DML) statements\n     *         or (2) 0 for SQL statements that return nothing\n     *\n     * @exception SQLException if a database access error occurs,\n     * this method is called on a closed <code>Statement</code>, the given\n     * SQL statement produces a <code>ResultSet</code> object, the method is called on a\n     * <code>PreparedStatement</code> or <code>CallableStatement</code>\n     * @throws SQLTimeoutException when the driver has determined that the\n     * timeout value that was specified by the {@code setQueryTimeout}\n     * method has been exceeded and has at least attempted to cancel\n     * the currently running {@code Statement}\n     ",
    "links" : [ ]
  }, {
    "name" : " void close() throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Releases this <code>Statement</code> object's database\n     * and JDBC resources immediately instead of waiting for\n     * this to happen when it is automatically closed.\n     * It is generally good practice to release resources as soon as\n     * you are finished with them to avoid tying up database\n     * resources.\n     * <P>\n     * Calling the method <code>close</code> on a <code>Statement</code>\n     * object that is already closed has no effect.\n     * <P>\n     * <B>Note:</B>When a <code>Statement</code> object is\n     * closed, its current <code>ResultSet</code> object, if one exists, is\n     * also closed.\n     *\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " int getMaxFieldSize() throws SQLException",
    "returnType" : "int",
    "comment" : "\n     * Retrieves the maximum number of bytes that can be\n     * returned for character and binary column values in a <code>ResultSet</code>\n     * object produced by this <code>Statement</code> object.\n     * This limit applies only to  <code>BINARY</code>, <code>VARBINARY</code>,\n     * <code>LONGVARBINARY</code>, <code>CHAR</code>, <code>VARCHAR</code>,\n     * <code>NCHAR</code>, <code>NVARCHAR</code>, <code>LONGNVARCHAR</code>\n     * and <code>LONGVARCHAR</code> columns.  If the limit is exceeded, the\n     * excess data is silently discarded.\n     *\n     * @return the current column size limit for columns storing character and\n     *         binary values; zero means there is no limit\n     * @exception SQLException if a database access error occurs or\n     * this method is called on a closed <code>Statement</code>\n     * @see #setMaxFieldSize\n     ",
    "links" : [ ]
  }, {
    "name" : " void setMaxFieldSize(int max) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the limit for the maximum number of bytes that can be returned for\n     * character and binary column values in a <code>ResultSet</code>\n     * object produced by this <code>Statement</code> object.\n     *\n     * This limit applies\n     * only to <code>BINARY</code>, <code>VARBINARY</code>,\n     * <code>LONGVARBINARY</code>, <code>CHAR</code>, <code>VARCHAR</code>,\n     * <code>NCHAR</code>, <code>NVARCHAR</code>, <code>LONGNVARCHAR</code> and\n     * <code>LONGVARCHAR</code> fields.  If the limit is exceeded, the excess data\n     * is silently discarded. For maximum portability, use values\n     * greater than 256.\n     *\n     * @param max the new column size limit in bytes; zero means there is no limit\n     * @exception SQLException if a database access error occurs,\n     * this method is called on a closed <code>Statement</code>\n     *            or the condition max >= 0 is not satisfied\n     * @see #getMaxFieldSize\n     ",
    "links" : [ ]
  }, {
    "name" : " int getMaxRows() throws SQLException",
    "returnType" : "int",
    "comment" : "\n     * Retrieves the maximum number of rows that a\n     * <code>ResultSet</code> object produced by this\n     * <code>Statement</code> object can contain.  If this limit is exceeded,\n     * the excess rows are silently dropped.\n     *\n     * @return the current maximum number of rows for a <code>ResultSet</code>\n     *         object produced by this <code>Statement</code> object;\n     *         zero means there is no limit\n     * @exception SQLException if a database access error occurs or\n     * this method is called on a closed <code>Statement</code>\n     * @see #setMaxRows\n     ",
    "links" : [ ]
  }, {
    "name" : " void setMaxRows(int max) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the limit for the maximum number of rows that any\n     * <code>ResultSet</code> object  generated by this <code>Statement</code>\n     * object can contain to the given number.\n     * If the limit is exceeded, the excess\n     * rows are silently dropped.\n     *\n     * @param max the new max rows limit; zero means there is no limit\n     * @exception SQLException if a database access error occurs,\n     * this method is called on a closed <code>Statement</code>\n     *            or the condition max >= 0 is not satisfied\n     * @see #getMaxRows\n     ",
    "links" : [ ]
  }, {
    "name" : " void setEscapeProcessing(boolean enable) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets escape processing on or off.\n     * If escape scanning is on (the default), the driver will do\n     * escape substitution before sending the SQL statement to the database.\n     *\n     * Note: Since prepared statements have usually been parsed prior\n     * to making this call, disabling escape processing for\n     * <code>PreparedStatements</code> objects will have no effect.\n     *\n     * @param enable <code>true</code> to enable escape processing;\n     *       <code>false</code> to disable it\n     * @exception SQLException if a database access error occurs or\n     * this method is called on a closed <code>Statement</code>\n     ",
    "links" : [ ]
  }, {
    "name" : " int getQueryTimeout() throws SQLException",
    "returnType" : "int",
    "comment" : "\n     * Retrieves the number of seconds the driver will\n     * wait for a <code>Statement</code> object to execute.\n     * If the limit is exceeded, a\n     * <code>SQLException</code> is thrown.\n     *\n     * @return the current query timeout limit in seconds; zero means there is\n     *         no limit\n     * @exception SQLException if a database access error occurs or\n     * this method is called on a closed <code>Statement</code>\n     * @see #setQueryTimeout\n     ",
    "links" : [ ]
  }, {
    "name" : " void setQueryTimeout(int seconds) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the number of seconds the driver will wait for a\n     * <code>Statement</code> object to execute to the given number of seconds.\n     *By default there is no limit on the amount of time allowed for a running\n     * statement to complete. If the limit is exceeded, an\n     * <code>SQLTimeoutException</code> is thrown.\n     * A JDBC driver must apply this limit to the <code>execute</code>,\n     * <code>executeQuery</code> and <code>executeUpdate</code> methods.\n     * <p>\n     * <strong>Note:</strong> JDBC driver implementations may also apply this\n     * limit to {@code ResultSet} methods\n     * (consult your driver vendor documentation for details).\n     * <p>\n     * <strong>Note:</strong> In the case of {@code Statement} batching, it is\n     * implementation defined as to whether the time-out is applied to\n     * individual SQL commands added via the {@code addBatch} method or to\n     * the entire batch of SQL commands invoked by the {@code executeBatch}\n     * method (consult your driver vendor documentation for details).\n     *\n     * @param seconds the new query timeout limit in seconds; zero means\n     *        there is no limit\n     * @exception SQLException if a database access error occurs,\n     * this method is called on a closed <code>Statement</code>\n     *            or the condition seconds >= 0 is not satisfied\n     * @see #getQueryTimeout\n     ",
    "links" : [ ]
  }, {
    "name" : " void cancel() throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Cancels this <code>Statement</code> object if both the DBMS and\n     * driver support aborting an SQL statement.\n     * This method can be used by one thread to cancel a statement that\n     * is being executed by another thread.\n     *\n     * @exception SQLException if a database access error occurs or\n     * this method is called on a closed <code>Statement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     ",
    "links" : [ ]
  }, {
    "name" : " SQLWarning getWarnings() throws SQLException",
    "returnType" : "SQLWarning",
    "comment" : "\n     * Retrieves the first warning reported by calls on this <code>Statement</code> object.\n     * Subsequent <code>Statement</code> object warnings will be chained to this\n     * <code>SQLWarning</code> object.\n     *\n     * <p>The warning chain is automatically cleared each time\n     * a statement is (re)executed. This method may not be called on a closed\n     * <code>Statement</code> object; doing so will cause an <code>SQLException</code>\n     * to be thrown.\n     *\n     * <P><B>Note:</B> If you are processing a <code>ResultSet</code> object, any\n     * warnings associated with reads on that <code>ResultSet</code> object\n     * will be chained on it rather than on the <code>Statement</code>\n     * object that produced it.\n     *\n     * @return the first <code>SQLWarning</code> object or <code>null</code>\n     *         if there are no warnings\n     * @exception SQLException if a database access error occurs or\n     * this method is called on a closed <code>Statement</code>\n     ",
    "links" : [ ]
  }, {
    "name" : " void clearWarnings() throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Clears all the warnings reported on this <code>Statement</code>\n     * object. After a call to this method,\n     * the method <code>getWarnings</code> will return\n     * <code>null</code> until a new warning is reported for this\n     * <code>Statement</code> object.\n     *\n     * @exception SQLException if a database access error occurs or\n     * this method is called on a closed <code>Statement</code>\n     ",
    "links" : [ ]
  }, {
    "name" : " void setCursorName(String name) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the SQL cursor name to the given <code>String</code>, which\n     * will be used by subsequent <code>Statement</code> object\n     * <code>execute</code> methods. This name can then be\n     * used in SQL positioned update or delete statements to identify the\n     * current row in the <code>ResultSet</code> object generated by this\n     * statement.  If the database does not support positioned update/delete,\n     * this method is a noop.  To insure that a cursor has the proper isolation\n     * level to support updates, the cursor's <code>SELECT</code> statement\n     * should have the form <code>SELECT FOR UPDATE</code>.  If\n     * <code>FOR UPDATE</code> is not present, positioned updates may fail.\n     *\n     * <P><B>Note:</B> By definition, the execution of positioned updates and\n     * deletes must be done by a different <code>Statement</code> object than\n     * the one that generated the <code>ResultSet</code> object being used for\n     * positioning. Also, cursor names must be unique within a connection.\n     *\n     * @param name the new cursor name, which must be unique within\n     *             a connection\n     * @exception SQLException if a database access error occurs or\n     * this method is called on a closed <code>Statement</code>\n     * @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean execute(String sql) throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Executes the given SQL statement, which may return multiple results.\n     * In some (uncommon) situations, a single SQL statement may return\n     * multiple result sets and/or update counts.  Normally you can ignore\n     * this unless you are (1) executing a stored procedure that you know may\n     * return multiple results or (2) you are dynamically executing an\n     * unknown SQL string.\n     * <P>\n     * The <code>execute</code> method executes an SQL statement and indicates the\n     * form of the first result.  You must then use the methods\n     * <code>getResultSet</code> or <code>getUpdateCount</code>\n     * to retrieve the result, and <code>getMoreResults</code> to\n     * move to any subsequent result(s).\n     * <p>\n     *<strong>Note:</strong>This method cannot be called on a\n     * <code>PreparedStatement</code> or <code>CallableStatement</code>.\n     * @param sql any SQL statement\n     * @return <code>true</code> if the first result is a <code>ResultSet</code>\n     *         object; <code>false</code> if it is an update count or there are\n     *         no results\n     * @exception SQLException if a database access error occurs,\n     * this method is called on a closed <code>Statement</code>,\n     * the method is called on a\n     * <code>PreparedStatement</code> or <code>CallableStatement</code>\n     * @throws SQLTimeoutException when the driver has determined that the\n     * timeout value that was specified by the {@code setQueryTimeout}\n     * method has been exceeded and has at least attempted to cancel\n     * the currently running {@code Statement}\n     * @see #getResultSet\n     * @see #getUpdateCount\n     * @see #getMoreResults\n     ",
    "links" : [ ]
  }, {
    "name" : " ResultSet getResultSet() throws SQLException",
    "returnType" : "ResultSet",
    "comment" : "\n     *  Retrieves the current result as a <code>ResultSet</code> object.\n     *  This method should be called only once per result.\n     *\n     * @return the current result as a <code>ResultSet</code> object or\n     * <code>null</code> if the result is an update count or there are no more results\n     * @exception SQLException if a database access error occurs or\n     * this method is called on a closed <code>Statement</code>\n     * @see #execute\n     ",
    "links" : [ ]
  }, {
    "name" : " int getUpdateCount() throws SQLException",
    "returnType" : "int",
    "comment" : "\n     *  Retrieves the current result as an update count;\n     *  if the result is a <code>ResultSet</code> object or there are no more results, -1\n     *  is returned. This method should be called only once per result.\n     *\n     * @return the current result as an update count; -1 if the current result is a\n     * <code>ResultSet</code> object or there are no more results\n     * @exception SQLException if a database access error occurs or\n     * this method is called on a closed <code>Statement</code>\n     * @see #execute\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean getMoreResults() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Moves to this <code>Statement</code> object's next result, returns\n     * <code>true</code> if it is a <code>ResultSet</code> object, and\n     * implicitly closes any current <code>ResultSet</code>\n     * object(s) obtained with the method <code>getResultSet</code>.\n     *\n     * <P>There are no more results when the following is true:\n     * <PRE>\n     *     // stmt is a Statement object\n     *     ((stmt.getMoreResults() == false) && (stmt.getUpdateCount() == -1))\n     * </PRE>\n     *\n     * @return <code>true</code> if the next result is a <code>ResultSet</code>\n     *         object; <code>false</code> if it is an update count or there are\n     *         no more results\n     * @exception SQLException if a database access error occurs or\n     * this method is called on a closed <code>Statement</code>\n     * @see #execute\n     ",
    "links" : [ ]
  }, {
    "name" : " void setFetchDirection(int direction) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Gives the driver a hint as to the direction in which\n     * rows will be processed in <code>ResultSet</code>\n     * objects created using this <code>Statement</code> object.  The\n     * default value is <code>ResultSet.FETCH_FORWARD</code>.\n     * <P>\n     * Note that this method sets the default fetch direction for\n     * result sets generated by this <code>Statement</code> object.\n     * Each result set has its own methods for getting and setting\n     * its own fetch direction.\n     *\n     * @param direction the initial direction for processing rows\n     * @exception SQLException if a database access error occurs,\n     * this method is called on a closed <code>Statement</code>\n     * or the given direction\n     * is not one of <code>ResultSet.FETCH_FORWARD</code>,\n     * <code>ResultSet.FETCH_REVERSE</code>, or <code>ResultSet.FETCH_UNKNOWN</code>\n     * @since 1.2\n     * @see #getFetchDirection\n     ",
    "links" : [ ]
  }, {
    "name" : " int getFetchDirection() throws SQLException",
    "returnType" : "int",
    "comment" : "\n     * Retrieves the direction for fetching rows from\n     * database tables that is the default for result sets\n     * generated from this <code>Statement</code> object.\n     * If this <code>Statement</code> object has not set\n     * a fetch direction by calling the method <code>setFetchDirection</code>,\n     * the return value is implementation-specific.\n     *\n     * @return the default fetch direction for result sets generated\n     *          from this <code>Statement</code> object\n     * @exception SQLException if a database access error occurs or\n     * this method is called on a closed <code>Statement</code>\n     * @since 1.2\n     * @see #setFetchDirection\n     ",
    "links" : [ ]
  }, {
    "name" : " void setFetchSize(int rows) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Gives the JDBC driver a hint as to the number of rows that should\n     * be fetched from the database when more rows are needed for\n     * <code>ResultSet</code> objects genrated by this <code>Statement</code>.\n     * If the value specified is zero, then the hint is ignored.\n     * The default value is zero.\n     *\n     * @param rows the number of rows to fetch\n     * @exception SQLException if a database access error occurs,\n     * this method is called on a closed <code>Statement</code> or the\n     *        condition  <code>rows >= 0</code> is not satisfied.\n     * @since 1.2\n     * @see #getFetchSize\n     ",
    "links" : [ ]
  }, {
    "name" : " int getFetchSize() throws SQLException",
    "returnType" : "int",
    "comment" : "\n     * Retrieves the number of result set rows that is the default\n     * fetch size for <code>ResultSet</code> objects\n     * generated from this <code>Statement</code> object.\n     * If this <code>Statement</code> object has not set\n     * a fetch size by calling the method <code>setFetchSize</code>,\n     * the return value is implementation-specific.\n     *\n     * @return the default fetch size for result sets generated\n     *          from this <code>Statement</code> object\n     * @exception SQLException if a database access error occurs or\n     * this method is called on a closed <code>Statement</code>\n     * @since 1.2\n     * @see #setFetchSize\n     ",
    "links" : [ ]
  }, {
    "name" : " int getResultSetConcurrency() throws SQLException",
    "returnType" : "int",
    "comment" : "\n     * Retrieves the result set concurrency for <code>ResultSet</code> objects\n     * generated by this <code>Statement</code> object.\n     *\n     * @return either <code>ResultSet.CONCUR_READ_ONLY</code> or\n     * <code>ResultSet.CONCUR_UPDATABLE</code>\n     * @exception SQLException if a database access error occurs or\n     * this method is called on a closed <code>Statement</code>\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " int getResultSetType() throws SQLException",
    "returnType" : "int",
    "comment" : "\n     * Retrieves the result set type for <code>ResultSet</code> objects\n     * generated by this <code>Statement</code> object.\n     *\n     * @return one of <code>ResultSet.TYPE_FORWARD_ONLY</code>,\n     * <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or\n     * <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>\n     * @exception SQLException if a database access error occurs or\n     * this method is called on a closed <code>Statement</code>\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " void addBatch(String sql) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Adds the given SQL command to the current list of commmands for this\n     * <code>Statement</code> object. The commands in this list can be\n     * executed as a batch by calling the method <code>executeBatch</code>.\n     * <P>\n     *<strong>Note:</strong>This method cannot be called on a\n     * <code>PreparedStatement</code> or <code>CallableStatement</code>.\n     * @param sql typically this is a SQL <code>INSERT</code> or\n     * <code>UPDATE</code> statement\n     * @exception SQLException if a database access error occurs,\n     * this method is called on a closed <code>Statement</code>, the\n     * driver does not support batch updates, the method is called on a\n     * <code>PreparedStatement</code> or <code>CallableStatement</code>\n     * @see #executeBatch\n     * @see DatabaseMetaData#supportsBatchUpdates\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " void clearBatch() throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Empties this <code>Statement</code> object's current list of\n     * SQL commands.\n     * <P>\n     * @exception SQLException if a database access error occurs,\n     *  this method is called on a closed <code>Statement</code> or the\n     * driver does not support batch updates\n     * @see #addBatch\n     * @see DatabaseMetaData#supportsBatchUpdates\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " int[] executeBatch() throws SQLException",
    "returnType" : "int[]",
    "comment" : "\n     * Submits a batch of commands to the database for execution and\n     * if all commands execute successfully, returns an array of update counts.\n     * The <code>int</code> elements of the array that is returned are ordered\n     * to correspond to the commands in the batch, which are ordered\n     * according to the order in which they were added to the batch.\n     * The elements in the array returned by the method <code>executeBatch</code>\n     * may be one of the following:\n     * <OL>\n     * <LI>A number greater than or equal to zero -- indicates that the\n     * command was processed successfully and is an update count giving the\n     * number of rows in the database that were affected by the command's\n     * execution\n     * <LI>A value of <code>SUCCESS_NO_INFO</code> -- indicates that the command was\n     * processed successfully but that the number of rows affected is\n     * unknown\n     * <P>\n     * If one of the commands in a batch update fails to execute properly,\n     * this method throws a <code>BatchUpdateException</code>, and a JDBC\n     * driver may or may not continue to process the remaining commands in\n     * the batch.  However, the driver's behavior must be consistent with a\n     * particular DBMS, either always continuing to process commands or never\n     * continuing to process commands.  If the driver continues processing\n     * after a failure, the array returned by the method\n     * <code>BatchUpdateException.getUpdateCounts</code>\n     * will contain as many elements as there are commands in the batch, and\n     * at least one of the elements will be the following:\n     * <P>\n     * <LI>A value of <code>EXECUTE_FAILED</code> -- indicates that the command failed\n     * to execute successfully and occurs only if a driver continues to\n     * process commands after a command fails\n     * </OL>\n     * <P>\n     * The possible implementations and return values have been modified in\n     * the Java 2 SDK, Standard Edition, version 1.3 to\n     * accommodate the option of continuing to proccess commands in a batch\n     * update after a <code>BatchUpdateException</code> obejct has been thrown.\n     *\n     * @return an array of update counts containing one element for each\n     * command in the batch.  The elements of the array are ordered according\n     * to the order in which commands were added to the batch.\n     * @exception SQLException if a database access error occurs,\n     * this method is called on a closed <code>Statement</code> or the\n     * driver does not support batch statements. Throws {@link BatchUpdateException}\n     * (a subclass of <code>SQLException</code>) if one of the commands sent to the\n     * database fails to execute properly or attempts to return a result set.\n     * @throws SQLTimeoutException when the driver has determined that the\n     * timeout value that was specified by the {@code setQueryTimeout}\n     * method has been exceeded and has at least attempted to cancel\n     * the currently running {@code Statement}\n     *\n     * @see #addBatch\n     * @see DatabaseMetaData#supportsBatchUpdates\n     * @since 1.2\n     ",
    "links" : [ "java.sql.BatchUpdateException" ]
  }, {
    "name" : " Connection getConnection() throws SQLException",
    "returnType" : "Connection",
    "comment" : "\n     * Retrieves the <code>Connection</code> object\n     * that produced this <code>Statement</code> object.\n     * @return the connection that produced this statement\n     * @exception SQLException if a database access error occurs or\n     * this method is called on a closed <code>Statement</code>\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean getMoreResults(int current) throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Moves to this <code>Statement</code> object's next result, deals with\n     * any current <code>ResultSet</code> object(s) according  to the instructions\n     * specified by the given flag, and returns\n     * <code>true</code> if the next result is a <code>ResultSet</code> object.\n     *\n     * <P>There are no more results when the following is true:\n     * <PRE>\n     *     // stmt is a Statement object\n     *     ((stmt.getMoreResults(current) == false) && (stmt.getUpdateCount() == -1))\n     * </PRE>\n     *\n     * @param current one of the following <code>Statement</code>\n     *        constants indicating what should happen to current\n     *        <code>ResultSet</code> objects obtained using the method\n     *        <code>getResultSet</code>:\n     *        <code>Statement.CLOSE_CURRENT_RESULT</code>,\n     *        <code>Statement.KEEP_CURRENT_RESULT</code>, or\n     *        <code>Statement.CLOSE_ALL_RESULTS</code>\n     * @return <code>true</code> if the next result is a <code>ResultSet</code>\n     *         object; <code>false</code> if it is an update count or there are no\n     *         more results\n     * @exception SQLException if a database access error occurs,\n     * this method is called on a closed <code>Statement</code> or the argument\n         *         supplied is not one of the following:\n     *        <code>Statement.CLOSE_CURRENT_RESULT</code>,\n     *        <code>Statement.KEEP_CURRENT_RESULT</code> or\n     *        <code>Statement.CLOSE_ALL_RESULTS</code>\n     *@exception SQLFeatureNotSupportedException if\n     * <code>DatabaseMetaData.supportsMultipleOpenResults</code> returns\n     * <code>false</code> and either\n     *        <code>Statement.KEEP_CURRENT_RESULT</code> or\n     *        <code>Statement.CLOSE_ALL_RESULTS</code> are supplied as\n     * the argument.\n     * @since 1.4\n     * @see #execute\n     ",
    "links" : [ ]
  }, {
    "name" : " ResultSet getGeneratedKeys() throws SQLException",
    "returnType" : "ResultSet",
    "comment" : "\n     * Retrieves any auto-generated keys created as a result of executing this\n     * <code>Statement</code> object. If this <code>Statement</code> object did\n     * not generate any keys, an empty <code>ResultSet</code>\n     * object is returned.\n     *\n     *<p><B>Note:</B>If the columns which represent the auto-generated keys were not specified,\n     * the JDBC driver implementation will determine the columns which best represent the auto-generated keys.\n     *\n     * @return a <code>ResultSet</code> object containing the auto-generated key(s)\n     *         generated by the execution of this <code>Statement</code> object\n     * @exception SQLException if a database access error occurs or\n     * this method is called on a closed <code>Statement</code>\n     * @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException",
    "returnType" : "int",
    "comment" : "\n     * Executes the given SQL statement and signals the driver with the\n     * given flag about whether the\n     * auto-generated keys produced by this <code>Statement</code> object\n     * should be made available for retrieval.  The driver will ignore the\n     * flag if the SQL statement\n     * is not an <code>INSERT</code> statement, or an SQL statement able to return\n     * auto-generated keys (the list of such statements is vendor-specific).\n     *<p>\n     * <strong>Note:</strong>This method cannot be called on a\n     * <code>PreparedStatement</code> or <code>CallableStatement</code>.\n     * @param sql an SQL Data Manipulation Language (DML) statement, such as <code>INSERT</code>, <code>UPDATE</code> or\n     * <code>DELETE</code>; or an SQL statement that returns nothing,\n     * such as a DDL statement.\n     *\n     * @param autoGeneratedKeys a flag indicating whether auto-generated keys\n     *        should be made available for retrieval;\n     *         one of the following constants:\n     *         <code>Statement.RETURN_GENERATED_KEYS</code>\n     *         <code>Statement.NO_GENERATED_KEYS</code>\n     * @return either (1) the row count for SQL Data Manipulation Language (DML) statements\n     *         or (2) 0 for SQL statements that return nothing\n     *\n     * @exception SQLException if a database access error occurs,\n     *  this method is called on a closed <code>Statement</code>, the given\n     *            SQL statement returns a <code>ResultSet</code> object,\n     *            the given constant is not one of those allowed, the method is called on a\n     * <code>PreparedStatement</code> or <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method with a constant of Statement.RETURN_GENERATED_KEYS\n     * @throws SQLTimeoutException when the driver has determined that the\n     * timeout value that was specified by the {@code setQueryTimeout}\n     * method has been exceeded and has at least attempted to cancel\n     * the currently running {@code Statement}\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " int executeUpdate(String sql, int[] columnIndexes) throws SQLException",
    "returnType" : "int",
    "comment" : "\n     * Executes the given SQL statement and signals the driver that the\n     * auto-generated keys indicated in the given array should be made available\n     * for retrieval.   This array contains the indexes of the columns in the\n     * target table that contain the auto-generated keys that should be made\n     * available. The driver will ignore the array if the SQL statement\n     * is not an <code>INSERT</code> statement, or an SQL statement able to return\n     * auto-generated keys (the list of such statements is vendor-specific).\n     *<p>\n     * <strong>Note:</strong>This method cannot be called on a\n     * <code>PreparedStatement</code> or <code>CallableStatement</code>.\n     * @param sql an SQL Data Manipulation Language (DML) statement, such as <code>INSERT</code>, <code>UPDATE</code> or\n     * <code>DELETE</code>; or an SQL statement that returns nothing,\n     * such as a DDL statement.\n     *\n     * @param columnIndexes an array of column indexes indicating the columns\n     *        that should be returned from the inserted row\n     * @return either (1) the row count for SQL Data Manipulation Language (DML) statements\n     *         or (2) 0 for SQL statements that return nothing\n     *\n     * @exception SQLException if a database access error occurs,\n     * this method is called on a closed <code>Statement</code>, the SQL\n     * statement returns a <code>ResultSet</code> object,the second argument\n     * supplied to this method is not an\n     * <code>int</code> array whose elements are valid column indexes, the method is called on a\n     * <code>PreparedStatement</code> or <code>CallableStatement</code>\n     * @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method\n     * @throws SQLTimeoutException when the driver has determined that the\n     * timeout value that was specified by the {@code setQueryTimeout}\n     * method has been exceeded and has at least attempted to cancel\n     * the currently running {@code Statement}\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " int executeUpdate(String sql, String[] columnNames) throws SQLException",
    "returnType" : "int",
    "comment" : "\n     * Executes the given SQL statement and signals the driver that the\n     * auto-generated keys indicated in the given array should be made available\n     * for retrieval.   This array contains the names of the columns in the\n     * target table that contain the auto-generated keys that should be made\n     * available. The driver will ignore the array if the SQL statement\n     * is not an <code>INSERT</code> statement, or an SQL statement able to return\n     * auto-generated keys (the list of such statements is vendor-specific).\n     *<p>\n     * <strong>Note:</strong>This method cannot be called on a\n     * <code>PreparedStatement</code> or <code>CallableStatement</code>.\n     * @param sql an SQL Data Manipulation Language (DML) statement, such as <code>INSERT</code>, <code>UPDATE</code> or\n     * <code>DELETE</code>; or an SQL statement that returns nothing,\n     * such as a DDL statement.\n     * @param columnNames an array of the names of the columns that should be\n     *        returned from the inserted row\n     * @return either the row count for <code>INSERT</code>, <code>UPDATE</code>,\n     *         or <code>DELETE</code> statements, or 0 for SQL statements\n     *         that return nothing\n     * @exception SQLException if a database access error occurs,\n     *  this method is called on a closed <code>Statement</code>, the SQL\n     *            statement returns a <code>ResultSet</code> object, the\n     *            second argument supplied to this method is not a <code>String</code> array\n     *            whose elements are valid column names, the method is called on a\n     * <code>PreparedStatement</code> or <code>CallableStatement</code>\n     * @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method\n     * @throws SQLTimeoutException when the driver has determined that the\n     * timeout value that was specified by the {@code setQueryTimeout}\n     * method has been exceeded and has at least attempted to cancel\n     * the currently running {@code Statement}\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean execute(String sql, int autoGeneratedKeys) throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Executes the given SQL statement, which may return multiple results,\n     * and signals the driver that any\n     * auto-generated keys should be made available\n     * for retrieval.  The driver will ignore this signal if the SQL statement\n     * is not an <code>INSERT</code> statement, or an SQL statement able to return\n     * auto-generated keys (the list of such statements is vendor-specific).\n     * <P>\n     * In some (uncommon) situations, a single SQL statement may return\n     * multiple result sets and/or update counts.  Normally you can ignore\n     * this unless you are (1) executing a stored procedure that you know may\n     * return multiple results or (2) you are dynamically executing an\n     * unknown SQL string.\n     * <P>\n     * The <code>execute</code> method executes an SQL statement and indicates the\n     * form of the first result.  You must then use the methods\n     * <code>getResultSet</code> or <code>getUpdateCount</code>\n     * to retrieve the result, and <code>getMoreResults</code> to\n     * move to any subsequent result(s).\n     *<p>\n     *<strong>Note:</strong>This method cannot be called on a\n     * <code>PreparedStatement</code> or <code>CallableStatement</code>.\n     * @param sql any SQL statement\n     * @param autoGeneratedKeys a constant indicating whether auto-generated\n     *        keys should be made available for retrieval using the method\n     *        <code>getGeneratedKeys</code>; one of the following constants:\n     *        <code>Statement.RETURN_GENERATED_KEYS</code> or\n     *        <code>Statement.NO_GENERATED_KEYS</code>\n     * @return <code>true</code> if the first result is a <code>ResultSet</code>\n     *         object; <code>false</code> if it is an update count or there are\n     *         no results\n     * @exception SQLException if a database access error occurs,\n     * this method is called on a closed <code>Statement</code>, the second\n     *         parameter supplied to this method is not\n     *         <code>Statement.RETURN_GENERATED_KEYS</code> or\n     *         <code>Statement.NO_GENERATED_KEYS</code>,\n     * the method is called on a\n     * <code>PreparedStatement</code> or <code>CallableStatement</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method with a constant of Statement.RETURN_GENERATED_KEYS\n     * @throws SQLTimeoutException when the driver has determined that the\n     * timeout value that was specified by the {@code setQueryTimeout}\n     * method has been exceeded and has at least attempted to cancel\n     * the currently running {@code Statement}\n     * @see #getResultSet\n     * @see #getUpdateCount\n     * @see #getMoreResults\n     * @see #getGeneratedKeys\n     *\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean execute(String sql, int[] columnIndexes) throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Executes the given SQL statement, which may return multiple results,\n     * and signals the driver that the\n     * auto-generated keys indicated in the given array should be made available\n     * for retrieval.  This array contains the indexes of the columns in the\n     * target table that contain the auto-generated keys that should be made\n     * available.  The driver will ignore the array if the SQL statement\n     * is not an <code>INSERT</code> statement, or an SQL statement able to return\n     * auto-generated keys (the list of such statements is vendor-specific).\n     * <P>\n     * Under some (uncommon) situations, a single SQL statement may return\n     * multiple result sets and/or update counts.  Normally you can ignore\n     * this unless you are (1) executing a stored procedure that you know may\n     * return multiple results or (2) you are dynamically executing an\n     * unknown SQL string.\n     * <P>\n     * The <code>execute</code> method executes an SQL statement and indicates the\n     * form of the first result.  You must then use the methods\n     * <code>getResultSet</code> or <code>getUpdateCount</code>\n     * to retrieve the result, and <code>getMoreResults</code> to\n     * move to any subsequent result(s).\n     *<p>\n     * <strong>Note:</strong>This method cannot be called on a\n     * <code>PreparedStatement</code> or <code>CallableStatement</code>.\n     * @param sql any SQL statement\n     * @param columnIndexes an array of the indexes of the columns in the\n     *        inserted row that should be  made available for retrieval by a\n     *        call to the method <code>getGeneratedKeys</code>\n     * @return <code>true</code> if the first result is a <code>ResultSet</code>\n     *         object; <code>false</code> if it is an update count or there\n     *         are no results\n     * @exception SQLException if a database access error occurs,\n     * this method is called on a closed <code>Statement</code>, the\n     *            elements in the <code>int</code> array passed to this method\n     *            are not valid column indexes, the method is called on a\n     * <code>PreparedStatement</code> or <code>CallableStatement</code>\n     * @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method\n     * @throws SQLTimeoutException when the driver has determined that the\n     * timeout value that was specified by the {@code setQueryTimeout}\n     * method has been exceeded and has at least attempted to cancel\n     * the currently running {@code Statement}\n     * @see #getResultSet\n     * @see #getUpdateCount\n     * @see #getMoreResults\n     *\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean execute(String sql, String[] columnNames) throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Executes the given SQL statement, which may return multiple results,\n     * and signals the driver that the\n     * auto-generated keys indicated in the given array should be made available\n     * for retrieval. This array contains the names of the columns in the\n     * target table that contain the auto-generated keys that should be made\n     * available.  The driver will ignore the array if the SQL statement\n     * is not an <code>INSERT</code> statement, or an SQL statement able to return\n     * auto-generated keys (the list of such statements is vendor-specific).\n     * <P>\n     * In some (uncommon) situations, a single SQL statement may return\n     * multiple result sets and/or update counts.  Normally you can ignore\n     * this unless you are (1) executing a stored procedure that you know may\n     * return multiple results or (2) you are dynamically executing an\n     * unknown SQL string.\n     * <P>\n     * The <code>execute</code> method executes an SQL statement and indicates the\n     * form of the first result.  You must then use the methods\n     * <code>getResultSet</code> or <code>getUpdateCount</code>\n     * to retrieve the result, and <code>getMoreResults</code> to\n     * move to any subsequent result(s).\n     *<p>\n     * <strong>Note:</strong>This method cannot be called on a\n     * <code>PreparedStatement</code> or <code>CallableStatement</code>.\n     * @param sql any SQL statement\n     * @param columnNames an array of the names of the columns in the inserted\n     *        row that should be made available for retrieval by a call to the\n     *        method <code>getGeneratedKeys</code>\n     * @return <code>true</code> if the next result is a <code>ResultSet</code>\n     *         object; <code>false</code> if it is an update count or there\n     *         are no more results\n     * @exception SQLException if a database access error occurs,\n     * this method is called on a closed <code>Statement</code>,the\n     *          elements of the <code>String</code> array passed to this\n     *          method are not valid column names, the method is called on a\n     * <code>PreparedStatement</code> or <code>CallableStatement</code>\n     * @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method\n     * @throws SQLTimeoutException when the driver has determined that the\n     * timeout value that was specified by the {@code setQueryTimeout}\n     * method has been exceeded and has at least attempted to cancel\n     * the currently running {@code Statement}\n     * @see #getResultSet\n     * @see #getUpdateCount\n     * @see #getMoreResults\n     * @see #getGeneratedKeys\n     *\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " int getResultSetHoldability() throws SQLException",
    "returnType" : "int",
    "comment" : "\n     * Retrieves the result set holdability for <code>ResultSet</code> objects\n     * generated by this <code>Statement</code> object.\n     *\n     * @return either <code>ResultSet.HOLD_CURSORS_OVER_COMMIT</code> or\n     *         <code>ResultSet.CLOSE_CURSORS_AT_COMMIT</code>\n     * @exception SQLException if a database access error occurs or\n     * this method is called on a closed <code>Statement</code>\n     *\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean isClosed() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether this <code>Statement</code> object has been closed. A <code>Statement</code> is closed if the\n     * method close has been called on it, or if it is automatically closed.\n     * @return true if this <code>Statement</code> object is closed; false if it is still open\n     * @throws SQLException if a database access error occurs\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void setPoolable(boolean poolable) throws SQLException",
    "returnType" : "void",
    "comment" : "\n         * Requests that a <code>Statement</code> be pooled or not pooled.  The value\n         * specified is a hint to the statement pool implementation indicating\n         * whether the applicaiton wants the statement to be pooled.  It is up to\n         * the statement pool manager as to whether the hint is used.\n         * <p>\n         * The poolable value of a statement is applicable to both internal\n         * statement caches implemented by the driver and external statement caches\n         * implemented by application servers and other applications.\n         * <p>\n         * By default, a <code>Statement</code> is not poolable when created, and\n         * a <code>PreparedStatement</code> and <code>CallableStatement</code>\n         * are poolable when created.\n         * <p>\n         * @param poolable              requests that the statement be pooled if true and\n         *                                              that the statement not be pooled if false\n         * <p>\n         * @throws SQLException if this method is called on a closed\n         * <code>Statement</code>\n         * <p>\n         * @since 1.6\n         ",
    "links" : [ ]
  }, {
    "name" : " boolean isPoolable() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n         * Returns a  value indicating whether the <code>Statement</code>\n         * is poolable or not.\n         * <p>\n         * @return              <code>true</code> if the <code>Statement</code>\n         * is poolable; <code>false</code> otherwise\n         * <p>\n         * @throws SQLException if this method is called on a closed\n         * <code>Statement</code>\n         * <p>\n         * @since 1.6\n         * <p>\n         * @see java.sql.Statement#setPoolable(boolean) setPoolable(boolean)\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ " ResultSet executeQuery(String sql) throws SQLException", " int executeUpdate(String sql) throws SQLException", " void close() throws SQLException", " int getMaxFieldSize() throws SQLException", " void setMaxFieldSize(int max) throws SQLException", " int getMaxRows() throws SQLException", " void setMaxRows(int max) throws SQLException", " void setEscapeProcessing(boolean enable) throws SQLException", " int getQueryTimeout() throws SQLException", " void setQueryTimeout(int seconds) throws SQLException", " void cancel() throws SQLException", " SQLWarning getWarnings() throws SQLException", " void clearWarnings() throws SQLException", " void setCursorName(String name) throws SQLException", " boolean execute(String sql) throws SQLException", " ResultSet getResultSet() throws SQLException", " int getUpdateCount() throws SQLException", " boolean getMoreResults() throws SQLException", " void setFetchDirection(int direction) throws SQLException", " int getFetchDirection() throws SQLException", " void setFetchSize(int rows) throws SQLException", " int getFetchSize() throws SQLException", " int getResultSetConcurrency() throws SQLException", " int getResultSetType() throws SQLException", " void addBatch(String sql) throws SQLException", " void clearBatch() throws SQLException", " int[] executeBatch() throws SQLException", " Connection getConnection() throws SQLException", " boolean getMoreResults(int current) throws SQLException", " ResultSet getGeneratedKeys() throws SQLException", " int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException", " int executeUpdate(String sql, int[] columnIndexes) throws SQLException", " int executeUpdate(String sql, String[] columnNames) throws SQLException", " boolean execute(String sql, int autoGeneratedKeys) throws SQLException", " boolean execute(String sql, int[] columnIndexes) throws SQLException", " boolean execute(String sql, String[] columnNames) throws SQLException", " int getResultSetHoldability() throws SQLException", " boolean isClosed() throws SQLException", " void setPoolable(boolean poolable) throws SQLException", " boolean isPoolable() throws SQLException" ],
  "variableNames" : [ "CLOSE_CURRENT_RESULT", "KEEP_CURRENT_RESULT", "CLOSE_ALL_RESULTS", "SUCCESS_NO_INFO", "EXECUTE_FAILED", "RETURN_GENERATED_KEYS", "NO_GENERATED_KEYS" ]
}