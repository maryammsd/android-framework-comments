{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/security/KeyStoreException.java",
  "packageName" : "android.security",
  "className" : "KeyStoreException",
  "comment" : "\n * Exception containing information about the failure at the Keystore / KeyMint layer while\n * generating or using a key.\n *\n * The public error codes indicate the cause of the error and the methods indicate whether\n * it's a system/key issue and whether re-trying the operation (with the same key or a new key)\n * is likely to succeed.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ERROR_OTHER",
    "type" : "int",
    "comment" : "\n     * This error code is for mapping errors that the caller will not know about. If the caller is\n     * targeting an API level earlier than the one the error was introduced in, then the error will\n     * be mapped to this one.\n     * In API level 33 no errors map to this error.\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_USER_AUTHENTICATION_REQUIRED",
    "type" : "int",
    "comment" : "\n     * Indicating the key could not be used because the user needs to authenticate first.\n     * See\n     * {@link android.security.keystore.KeyGenParameterSpec.Builder#setUserAuthenticationRequired(boolean)}.\n     ",
    "links" : [ "android.security.keystore.KeyGenParameterSpec.Builder#setUserAuthenticationRequired(boolean)" ]
  }, {
    "name" : "ERROR_KEYSTORE_UNINITIALIZED",
    "type" : "int",
    "comment" : "\n     * Indicating that {@code load()} has not been called on the Keystore instance, or an attempt\n     * has been made to generate an authorization bound key while the user has not set a lock\n     * screen knowledge factor (LSKF). Instruct the user to set an LSKF and retry.\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_INTERNAL_SYSTEM_ERROR",
    "type" : "int",
    "comment" : "\n     * An internal system error - refer to {@link #isTransientFailure()} to determine whether\n     * re-trying the operation is likely to yield different results.\n     ",
    "links" : [ "#isTransientFailure()" ]
  }, {
    "name" : "ERROR_PERMISSION_DENIED",
    "type" : "int",
    "comment" : "\n     * The caller has requested key parameters or operation which are only available to system\n     * or privileged apps.\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_KEY_DOES_NOT_EXIST",
    "type" : "int",
    "comment" : "\n     * The key the operation refers to doesn't exist.\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_KEY_CORRUPTED",
    "type" : "int",
    "comment" : "\n     * The key is corrupted and could not be recovered.\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_ID_ATTESTATION_FAILURE",
    "type" : "int",
    "comment" : "\n     * The error related to inclusion of device identifiers in the attestation record.\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_ATTESTATION_CHALLENGE_TOO_LARGE",
    "type" : "int",
    "comment" : "\n     * The attestation challenge specified is too large.\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_KEYMINT_FAILURE",
    "type" : "int",
    "comment" : "\n     * General error in the KeyMint layer.\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_KEYSTORE_FAILURE",
    "type" : "int",
    "comment" : "\n     * Failure in the Keystore layer.\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_UNIMPLEMENTED",
    "type" : "int",
    "comment" : "\n     * The feature the caller is trying to use is not implemented by the underlying\n     * KeyMint implementation.\n     * This could happen when an unsupported algorithm is requested, or when trying to import\n     * a key in a format other than raw or PKCS#8.\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_INCORRECT_USAGE",
    "type" : "int",
    "comment" : "\n     * The feature the caller is trying to use is not compatible with the parameters used to\n     * generate the key. For example, trying to use a key generated for a different signature\n     * algorithm, or a digest not specified during key creation.\n     * Another case is the attempt to generate a symmetric AES key and requesting key attestation.\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_KEY_NOT_TEMPORALLY_VALID",
    "type" : "int",
    "comment" : "\n     * The key is not currently valid: Either at has expired or it will be valid for use in the\n     * future.\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_KEY_OPERATION_EXPIRED",
    "type" : "int",
    "comment" : "\n     * The crypto object the caller has been using held a reference to a KeyMint operation that\n     * has been evacuated (likely due to other concurrent operations taking place).\n     * The caller should re-create the crypto object and try again.\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_ATTESTATION_KEYS_UNAVAILABLE",
    "type" : "int",
    "comment" : "\n     * There are no keys available for attestation.\n     * This error is returned only on devices that rely solely on remotely-provisioned keys (see\n     * <a href=\n     * \"https://android-developers.googleblog.com/2022/03/upgrading-android-attestation-remote.html\"\n     * >Remote Key Provisioning</a>).\n     *\n     * <p>On such a device, if the caller requests key generation and includes an attestation\n     * challenge (indicating key attestation is required), the error will be returned in one of\n     * the following cases:\n     * <ul>\n     *     <li>The pool of remotely-provisioned keys has been exhausted.</li>\n     *     <li>The device is not registered with the key provisioning server.</li>\n     * </ul>\n     * </p>\n     *\n     * <p>This error is a transient one if the pool of remotely-provisioned keys has been\n     * exhausted. However, if the device is not registered with the server, or the key\n     * provisioning server refuses key issuance, this is a permanent error.</p>\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_DEVICE_REQUIRES_UPGRADE_FOR_ATTESTATION",
    "type" : "int",
    "comment" : "\n     * This device requires a software upgrade to use the key provisioning server. The software\n     * is outdated and this error is returned only on devices that rely solely on\n     * remotely-provisioned keys (see <a href=\n     * \"https://android-developers.googleblog.com/2022/03/upgrading-android-attestation-remote.html\"\n     * >Remote Key Provisioning</a>).\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RETRY_NEVER",
    "type" : "int",
    "comment" : "\n     * Never re-try the operation that led to this error, since it's a permanent error.\n     *\n     * This value is always returned when {@link #isTransientFailure()} is {@code false}.\n     ",
    "links" : [ "#isTransientFailure()" ]
  }, {
    "name" : "RETRY_WITH_EXPONENTIAL_BACKOFF",
    "type" : "int",
    "comment" : "\n     * Re-try the operation that led to this error with an exponential back-off delay.\n     * The first delay should be between 5 to 30 seconds, and each subsequent re-try should double\n     * the delay time.\n     *\n     * This value is returned when {@link #isTransientFailure()} is {@code true}.\n     ",
    "links" : [ "#isTransientFailure()" ]
  }, {
    "name" : "RETRY_WHEN_CONNECTIVITY_AVAILABLE",
    "type" : "int",
    "comment" : "\n     * Re-try the operation that led to this error when the device regains connectivity.\n     * Remote provisioning of keys requires reaching the remote server, and the device is\n     * currently unable to due that due to lack of network connectivity.\n     *\n     * This value is returned when {@link #isTransientFailure()} is {@code true}.\n     ",
    "links" : [ "#isTransientFailure()" ]
  }, {
    "name" : "RETRY_AFTER_NEXT_REBOOT",
    "type" : "int",
    "comment" : "\n     * Re-try the operation that led to this error when the device has a software update\n     * downloaded and on the next reboot. The Remote provisioning server recognizes\n     * the device, but refuses issuance of attestation keys because it contains a software\n     * version that could potentially be vulnerable and needs an update. Re-trying after the\n     * device has upgraded and rebooted may alleviate the problem.\n     *\n     * <p>This value is returned when {@link #isTransientFailure()} is {@code true}.\n     ",
    "links" : [ "#isTransientFailure()" ]
  }, {
    "name" : "RKP_SUCCESS",
    "type" : "int",
    "comment" : "\n     * Remote provisioning of attestation keys has completed successfully.\n     * @hide ",
    "links" : [ ]
  }, {
    "name" : "RKP_TEMPORARILY_UNAVAILABLE",
    "type" : "int",
    "comment" : "\n     * Remotely-provisioned keys are temporarily unavailable. This could be because of RPC\n     * error when talking to the remote provisioner or keys are being currently fetched and will\n     * be available soon.\n     * @hide ",
    "links" : [ ]
  }, {
    "name" : "RKP_SERVER_REFUSED_ISSUANCE",
    "type" : "int",
    "comment" : "\n     * Permanent failure: The RKP server has declined issuance of keys to this device. Either\n     * because the device is not registered with the server or the server considers the device\n     * not to be trustworthy.\n     * @hide ",
    "links" : [ ]
  }, {
    "name" : "RKP_FETCHING_PENDING_CONNECTIVITY",
    "type" : "int",
    "comment" : "\n     * The RKP server is unavailable due to lack of connectivity. The caller should re-try\n     * when the device has connectivity again.\n     * @hide ",
    "links" : [ ]
  }, {
    "name" : "RKP_FETCHING_PENDING_SOFTWARE_REBOOT",
    "type" : "int",
    "comment" : "\n     * The RKP server recognizes the device, but the device may be running vulnerable software,\n     * and thus refusing issuance of RKP keys to it.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "IS_SYSTEM_ERROR",
    "type" : "int",
    "comment" : " Whether the error relates to the system state/implementation as a whole, or a specific key.",
    "links" : [ ]
  }, {
    "name" : "IS_TRANSIENT_ERROR",
    "type" : "int",
    "comment" : " Whether the error is permanent.",
    "links" : [ ]
  }, {
    "name" : "REQUIRES_USER_AUTHENTICATION",
    "type" : "int",
    "comment" : " Whether the cause of the error is the user not having authenticated recently.",
    "links" : [ ]
  }, {
    "name" : "mErrorCode",
    "type" : "int",
    "comment" : " public API.",
    "links" : [ ]
  }, {
    "name" : "mRkpStatus",
    "type" : "int",
    "comment" : " to {@link ResponseCode.OUT_OF_KEYS}.",
    "links" : [ "ResponseCode.OUT_OF_KEYS" ]
  }, {
    "name" : "GENERAL_KEYMINT_ERROR",
    "type" : "PublicErrorInformation",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "GENERAL_KEYSTORE_ERROR",
    "type" : "PublicErrorInformation",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEYMINT_UNIMPLEMENTED_ERROR",
    "type" : "PublicErrorInformation",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEYMINT_RETRYABLE_ERROR",
    "type" : "PublicErrorInformation",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEYMINT_INCORRECT_USAGE_ERROR",
    "type" : "PublicErrorInformation",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEYMINT_TEMPORAL_VALIDITY_ERROR",
    "type" : "PublicErrorInformation",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sErrorCodeToFailureInfo",
    "type" : "Map<Integer, PublicErrorInformation>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static int initializeRkpStatusForRegularErrors(int errorCode)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getErrorCode()",
    "returnType" : "int",
    "comment" : "\n     * Returns the internal error code. Only for use by the platform.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getNumericErrorCode()",
    "returnType" : "int",
    "comment" : "\n     * Returns one of the error codes exported by the class.\n     *\n     * @return a public error code\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isTransientFailure()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the failure is a transient failure - that is, performing the same operation\n     * again at a late time is likely to succeed.\n     *\n     * If {@link #isSystemError()} returns true, the transient nature of the failure relates to the\n     * device, otherwise relates to the key (so a permanent failure with an existing key likely\n     * requires creating another key to repeat the operation with).\n     ",
    "links" : [ "#isSystemError()" ]
  }, {
    "name" : "public boolean requiresUserAuthentication()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether the failure is due to the device being locked.\n     *\n     * @return true if the key operation failed because the user has to authenticate\n     * (e.g. by unlocking the device).\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSystemError()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether the error related to the Keystore/KeyMint implementation and not\n     * a specific key.\n     *\n     * @return true if the error is related to the system, not the key in use. System\n     * errors indicate a feature isn't working, whereas key-related errors are likely\n     * to succeed with a new key.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getRetryPolicy()",
    "returnType" : "int",
    "comment" : "\n     * Returns the re-try policy for transient failures. Valid only if\n     * {@link #isTransientFailure()} returns {@code True}.\n     ",
    "links" : [ "#isTransientFailure()" ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static PublicErrorInformation getErrorInformation(int internalErrorCode)",
    "returnType" : "PublicErrorInformation",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static boolean hasFailureInfoForError(int internalErrorCode)",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static int initializeRkpStatusForRegularErrors(int errorCode)", "public int getErrorCode()", "public int getNumericErrorCode()", "public boolean isTransientFailure()", "public boolean requiresUserAuthentication()", "public boolean isSystemError()", "public int getRetryPolicy()", "public String toString()", "private static PublicErrorInformation getErrorInformation(int internalErrorCode)", "public static boolean hasFailureInfoForError(int internalErrorCode)" ],
  "variableNames" : [ "TAG", "ERROR_OTHER", "ERROR_USER_AUTHENTICATION_REQUIRED", "ERROR_KEYSTORE_UNINITIALIZED", "ERROR_INTERNAL_SYSTEM_ERROR", "ERROR_PERMISSION_DENIED", "ERROR_KEY_DOES_NOT_EXIST", "ERROR_KEY_CORRUPTED", "ERROR_ID_ATTESTATION_FAILURE", "ERROR_ATTESTATION_CHALLENGE_TOO_LARGE", "ERROR_KEYMINT_FAILURE", "ERROR_KEYSTORE_FAILURE", "ERROR_UNIMPLEMENTED", "ERROR_INCORRECT_USAGE", "ERROR_KEY_NOT_TEMPORALLY_VALID", "ERROR_KEY_OPERATION_EXPIRED", "ERROR_ATTESTATION_KEYS_UNAVAILABLE", "ERROR_DEVICE_REQUIRES_UPGRADE_FOR_ATTESTATION", "RETRY_NEVER", "RETRY_WITH_EXPONENTIAL_BACKOFF", "RETRY_WHEN_CONNECTIVITY_AVAILABLE", "RETRY_AFTER_NEXT_REBOOT", "RKP_SUCCESS", "RKP_TEMPORARILY_UNAVAILABLE", "RKP_SERVER_REFUSED_ISSUANCE", "RKP_FETCHING_PENDING_CONNECTIVITY", "RKP_FETCHING_PENDING_SOFTWARE_REBOOT", "IS_SYSTEM_ERROR", "IS_TRANSIENT_ERROR", "REQUIRES_USER_AUTHENTICATION", "mErrorCode", "mRkpStatus", "GENERAL_KEYMINT_ERROR", "GENERAL_KEYSTORE_ERROR", "KEYMINT_UNIMPLEMENTED_ERROR", "KEYMINT_RETRYABLE_ERROR", "KEYMINT_INCORRECT_USAGE_ERROR", "KEYMINT_TEMPORAL_VALIDITY_ERROR", "sErrorCodeToFailureInfo" ]
}