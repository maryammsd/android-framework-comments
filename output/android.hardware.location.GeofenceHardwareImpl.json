{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/location/GeofenceHardwareImpl.java",
  "packageName" : "android.hardware.location",
  "className" : "GeofenceHardwareImpl",
  "comment" : "\n * This class manages the geofences which are handled by hardware.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FIRST_VERSION_WITH_CAPABILITIES",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sInstance",
    "type" : "GeofenceHardwareImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWakeLock",
    "type" : "PowerManager.WakeLock",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGeofences",
    "type" : "SparseArray<IGeofenceHardwareCallback>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallbacks",
    "type" : "ArrayList<IGeofenceHardwareMonitorCallback>[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mReapers",
    "type" : "ArrayList<Reaper>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFusedService",
    "type" : "IFusedGeofenceHardware",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGpsService",
    "type" : "IGpsGeofenceHardware",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCapabilities",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVersion",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSupportedMonitorTypes",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "GEOFENCE_TRANSITION_CALLBACK",
    "type" : "int",
    "comment" : " mGeofenceHandler message types",
    "links" : [ ]
  }, {
    "name" : "ADD_GEOFENCE_CALLBACK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "REMOVE_GEOFENCE_CALLBACK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PAUSE_GEOFENCE_CALLBACK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RESUME_GEOFENCE_CALLBACK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "GEOFENCE_CALLBACK_BINDER_DIED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "GEOFENCE_STATUS",
    "type" : "int",
    "comment" : " mCallbacksHandler message types",
    "links" : [ ]
  }, {
    "name" : "CALLBACK_ADD",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CALLBACK_REMOVE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MONITOR_CALLBACK_BINDER_DIED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "REAPER_GEOFENCE_ADDED",
    "type" : "int",
    "comment" : " mReaperHandler message types",
    "links" : [ ]
  }, {
    "name" : "REAPER_MONITOR_CALLBACK_ADDED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "REAPER_REMOVED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOCATION_INVALID",
    "type" : "int",
    "comment" : " The following constants need to match GpsLocationFlags enum in gps.h",
    "links" : [ ]
  }, {
    "name" : "LOCATION_HAS_LAT_LONG",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOCATION_HAS_ALTITUDE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOCATION_HAS_SPEED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOCATION_HAS_BEARING",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOCATION_HAS_ACCURACY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RESOLUTION_LEVEL_NONE",
    "type" : "int",
    "comment" : " These constants must be in increasing order of finer resolution.",
    "links" : [ ]
  }, {
    "name" : "RESOLUTION_LEVEL_COARSE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RESOLUTION_LEVEL_FINE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CAPABILITY_GNSS",
    "type" : "int",
    "comment" : " Capability constant corresponding to fused_location.h entry when geofencing supports GNNS.",
    "links" : [ ]
  }, {
    "name" : "mGeofenceHandler",
    "type" : "Handler",
    "comment" : " All operations on mGeofences",
    "links" : [ ]
  }, {
    "name" : "mCallbacksHandler",
    "type" : "Handler",
    "comment" : " All operations on mCallbacks",
    "links" : [ ]
  }, {
    "name" : "mReaperHandler",
    "type" : "Handler",
    "comment" : " All operations on mReaper",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static synchronized GeofenceHardwareImpl getInstance(Context context)",
    "returnType" : "GeofenceHardwareImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void acquireWakeLock()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void releaseWakeLock()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateGpsHardwareAvailability()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateFusedHardwareAvailability()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setGpsHardwareGeofence(IGpsGeofenceHardware service)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onCapabilities(int capabilities)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setVersion(int version)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setFusedGeofenceHardware(IFusedGeofenceHardware service)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int[] getMonitoringTypes()",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getStatusOfMonitoringType(int monitoringType)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getCapabilitiesForMonitoringType(int monitoringType)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean addCircularFence(int monitoringType, GeofenceHardwareRequestParcelable request, IGeofenceHardwareCallback callback)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean removeGeofence(int geofenceId, int monitoringType)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean pauseGeofence(int geofenceId, int monitoringType)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean resumeGeofence(int geofenceId, int monitoringType, int monitorTransition)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean registerForMonitorStateChangeCallback(int monitoringType, IGeofenceHardwareMonitorCallback callback)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean unregisterForMonitorStateChangeCallback(int monitoringType, IGeofenceHardwareMonitorCallback callback)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void reportGeofenceTransition(int geofenceId, Location location, int transition, long transitionTimestamp, int monitoringType, int sourcesUsed)",
    "returnType" : "void",
    "comment" : "\n     * Used to report geofence transitions\n     ",
    "links" : [ ]
  }, {
    "name" : "public void reportGeofenceMonitorStatus(int monitoringType, int monitoringStatus, Location location, int source)",
    "returnType" : "void",
    "comment" : "\n     * Used to report Monitor status changes.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void reportGeofenceOperationStatus(int operation, int geofenceId, int operationStatus)",
    "returnType" : "void",
    "comment" : "\n     * Internal generic status report function for Geofence operations.\n     *\n     * @param operation The operation to be reported as defined internally.\n     * @param geofenceId The id of the geofence the operation is related to.\n     * @param operationStatus The status of the operation as defined in GeofenceHardware class. This\n     *                        status is independent of the statuses reported by different HALs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void reportGeofenceAddStatus(int geofenceId, int status)",
    "returnType" : "void",
    "comment" : "\n     * Used to report the status of a Geofence Add operation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void reportGeofenceRemoveStatus(int geofenceId, int status)",
    "returnType" : "void",
    "comment" : "\n     * Used to report the status of a Geofence Remove operation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void reportGeofencePauseStatus(int geofenceId, int status)",
    "returnType" : "void",
    "comment" : "\n     * Used to report the status of a Geofence Pause operation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void reportGeofenceResumeStatus(int geofenceId, int status)",
    "returnType" : "void",
    "comment" : "\n     * Used to report the status of a Geofence Resume operation.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setMonitorAvailability(int monitor, int val)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " int getMonitoringResolutionLevel(int monitoringType)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " int getAllowedResolutionLevel(int pid, int uid)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static synchronized GeofenceHardwareImpl getInstance(Context context)", "private void acquireWakeLock()", "private void releaseWakeLock()", "private void updateGpsHardwareAvailability()", "private void updateFusedHardwareAvailability()", "public void setGpsHardwareGeofence(IGpsGeofenceHardware service)", "public void onCapabilities(int capabilities)", "public void setVersion(int version)", "public void setFusedGeofenceHardware(IFusedGeofenceHardware service)", "public int[] getMonitoringTypes()", "public int getStatusOfMonitoringType(int monitoringType)", "public int getCapabilitiesForMonitoringType(int monitoringType)", "public boolean addCircularFence(int monitoringType, GeofenceHardwareRequestParcelable request, IGeofenceHardwareCallback callback)", "public boolean removeGeofence(int geofenceId, int monitoringType)", "public boolean pauseGeofence(int geofenceId, int monitoringType)", "public boolean resumeGeofence(int geofenceId, int monitoringType, int monitorTransition)", "public boolean registerForMonitorStateChangeCallback(int monitoringType, IGeofenceHardwareMonitorCallback callback)", "public boolean unregisterForMonitorStateChangeCallback(int monitoringType, IGeofenceHardwareMonitorCallback callback)", "public void reportGeofenceTransition(int geofenceId, Location location, int transition, long transitionTimestamp, int monitoringType, int sourcesUsed)", "public void reportGeofenceMonitorStatus(int monitoringType, int monitoringStatus, Location location, int source)", "private void reportGeofenceOperationStatus(int operation, int geofenceId, int operationStatus)", "public void reportGeofenceAddStatus(int geofenceId, int status)", "public void reportGeofenceRemoveStatus(int geofenceId, int status)", "public void reportGeofencePauseStatus(int geofenceId, int status)", "public void reportGeofenceResumeStatus(int geofenceId, int status)", "private void setMonitorAvailability(int monitor, int val)", " int getMonitoringResolutionLevel(int monitoringType)", " int getAllowedResolutionLevel(int pid, int uid)" ],
  "variableNames" : [ "TAG", "DEBUG", "FIRST_VERSION_WITH_CAPABILITIES", "mContext", "sInstance", "mWakeLock", "mGeofences", "mCallbacks", "mReapers", "mFusedService", "mGpsService", "mCapabilities", "mVersion", "mSupportedMonitorTypes", "GEOFENCE_TRANSITION_CALLBACK", "ADD_GEOFENCE_CALLBACK", "REMOVE_GEOFENCE_CALLBACK", "PAUSE_GEOFENCE_CALLBACK", "RESUME_GEOFENCE_CALLBACK", "GEOFENCE_CALLBACK_BINDER_DIED", "GEOFENCE_STATUS", "CALLBACK_ADD", "CALLBACK_REMOVE", "MONITOR_CALLBACK_BINDER_DIED", "REAPER_GEOFENCE_ADDED", "REAPER_MONITOR_CALLBACK_ADDED", "REAPER_REMOVED", "LOCATION_INVALID", "LOCATION_HAS_LAT_LONG", "LOCATION_HAS_ALTITUDE", "LOCATION_HAS_SPEED", "LOCATION_HAS_BEARING", "LOCATION_HAS_ACCURACY", "RESOLUTION_LEVEL_NONE", "RESOLUTION_LEVEL_COARSE", "RESOLUTION_LEVEL_FINE", "CAPABILITY_GNSS", "mGeofenceHandler", "mCallbacksHandler", "mReaperHandler" ]
}