{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/display/DisplayManagerGlobal.java",
  "packageName" : "android.hardware.display",
  "className" : "DisplayManagerGlobal",
  "comment" : "\n * Manager communication with the display manager service on behalf of\n * an application process.  You're probably looking for {@link DisplayManager}.\n *\n * @hide\n ",
  "links" : [ "android.hardware.display.DisplayManager" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EXTRA_LOGGING_PACKAGE_NAME",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sCurrentPackageName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sExtraDisplayListenerLogging",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : " 'adb shell setprop persist.log.tag.DisplayManager DEBUG && adb reboot'",
    "links" : [ ]
  }, {
    "name" : "USE_CACHE",
    "type" : "boolean",
    "comment" : " orientation change before the display info cache has actually been invalidated.",
    "links" : [ ]
  }, {
    "name" : "EVENT_DISPLAY_ADDED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EVENT_DISPLAY_CHANGED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EVENT_DISPLAY_REMOVED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EVENT_DISPLAY_BRIGHTNESS_CHANGED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EVENT_DISPLAY_HDR_SDR_RATIO_CHANGED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EVENT_DISPLAY_CONNECTED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EVENT_DISPLAY_DISCONNECTED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sInstance",
    "type" : "DisplayManagerGlobal",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDispatchNativeCallbacks",
    "type" : "boolean",
    "comment" : " Guarded by mLock",
    "links" : [ ]
  }, {
    "name" : "mNativeCallbackReportedRefreshRate",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDm",
    "type" : "IDisplayManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallback",
    "type" : "DisplayManagerCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRegisteredEventsMask",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDisplayListeners",
    "type" : "CopyOnWriteArrayList<DisplayListenerDelegate>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDisplayInfoCache",
    "type" : "SparseArray<DisplayInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWideColorSpace",
    "type" : "ColorSpace",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOverlayProperties",
    "type" : "OverlayProperties",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDisplayIdCache",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWifiDisplayScanNestCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mToken",
    "type" : "Binder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDisplayCache",
    "type" : "PropertyInvalidatedCache<Integer, DisplayInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CACHE_KEY_DISPLAY_INFO_PROPERTY",
    "type" : "String",
    "comment" : "\n     * Name of the property containing a unique token which changes every time we update the\n     * system's display configuration.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static DisplayManagerGlobal getInstance()",
    "returnType" : "DisplayManagerGlobal",
    "comment" : "\n     * Gets an instance of the display manager global singleton.\n     *\n     * @return The display manager instance, may be null early in system startup\n     * before the display manager has been fully initialized.\n     ",
    "links" : [ ]
  }, {
    "name" : "public DisplayInfo getDisplayInfo(int displayId)",
    "returnType" : "DisplayInfo",
    "comment" : "\n     * Get information about a particular logical display.\n     *\n     * @param displayId The logical display id.\n     * @return Information about the specified display, or null if it does not exist.\n     * This object belongs to an internal cache and should be treated as if it were immutable.\n     ",
    "links" : [ ]
  }, {
    "name" : "private DisplayInfo getDisplayInfoLocked(int displayId)",
    "returnType" : "DisplayInfo",
    "comment" : "\n     * Gets information about a particular logical display\n     * See {@link getDisplayInfo}, but assumes that {@link mLock} is held\n     ",
    "links" : [ "getDisplayInfo", "mLock" ]
  }, {
    "name" : "public int[] getDisplayIds()",
    "returnType" : "int[]",
    "comment" : "\n     * Gets all currently valid logical display ids.\n     *\n     * @return An array containing all display ids.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int[] getDisplayIds(boolean includeDisabled)",
    "returnType" : "int[]",
    "comment" : "\n     * Gets all currently valid logical display ids.\n     *\n     * @param includeDisabled True if the returned list of displays includes disabled displays.\n     * @return An array containing all display ids.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isUidPresentOnDisplay(int uid, int displayId)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if specified UID's content is present on display and should be granted access to it.\n     *\n     * @param uid UID to be checked.\n     * @param displayId id of the display where presence of the content is checked.\n     * @return {@code true} if UID is present on display, {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Display getCompatibleDisplay(int displayId, DisplayAdjustments daj)",
    "returnType" : "Display",
    "comment" : "\n     * Gets information about a logical display.\n     *\n     * The display metrics may be adjusted to provide compatibility\n     * for legacy applications or limited screen areas.\n     *\n     * @param displayId The logical display id.\n     * @param daj The compatibility info and activityToken.\n     * @return The display object, or null if there is no display with the given id.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Display getCompatibleDisplay(int displayId, Resources resources)",
    "returnType" : "Display",
    "comment" : "\n     * Gets information about a logical display.\n     *\n     * The display metrics may be adjusted to provide compatibility\n     * for legacy applications or limited screen areas.\n     *\n     * @param displayId The logical display id.\n     * @param resources Resources providing compatibility info.\n     * @return The display object, or null if there is no display with the given id.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Display getRealDisplay(int displayId)",
    "returnType" : "Display",
    "comment" : "\n     * Gets information about a logical display without applying any compatibility metrics.\n     *\n     * @param displayId The logical display id.\n     * @return The display object, or null if there is no display with the given id.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void registerDisplayListener(@NonNull DisplayListener listener, @Nullable Handler handler, @EventsMask long eventsMask, String packageName)",
    "returnType" : "void",
    "comment" : "\n     * Register a listener for display-related changes.\n     *\n     * @param listener The listener that will be called when display changes occur.\n     * @param handler Handler for the thread that will be receiving the callbacks. May be null.\n     * If null, listener will use the handler for the current thread, and if still null,\n     * the handler for the main thread.\n     * If that is still null, a runtime exception will be thrown.\n     * @param packageName of the calling package.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void registerDisplayListener(@NonNull DisplayListener listener, @NonNull Executor executor, @EventsMask long eventsMask, String packageName)",
    "returnType" : "void",
    "comment" : "\n     * Register a listener for display-related changes.\n     *\n     * @param listener The listener that will be called when display changes occur.\n     * @param executor Executor for the thread that will be receiving the callbacks. Cannot be null.\n     * @param eventsMask Mask of events to be listened to.\n     * @param packageName of the calling package.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void unregisterDisplayListener(DisplayListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void maybeLogAllDisplayListeners()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void handleDisplayChangeFromWindowManager(int displayId)",
    "returnType" : "void",
    "comment" : "\n     * Called when there is a display-related window configuration change. Reroutes the event from\n     * WindowManager to make sure the {@link Display} fields are up-to-date in the last callback.\n     * @param displayId the logical display that was changed.\n     ",
    "links" : [ "android.view.Display" ]
  }, {
    "name" : "private static Looper getLooperForHandler(@Nullable Handler handler)",
    "returnType" : "Looper",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int findDisplayListenerLocked(DisplayListener listener)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int calculateEventsMaskLocked()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void registerCallbackIfNeededLocked()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateCallbackIfNeededLocked()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleDisplayEvent(int displayId, @DisplayEvent int event, boolean forceUpdate)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void enableConnectedDisplay(int displayId)",
    "returnType" : "void",
    "comment" : "\n     * Enable a connected display that is currently disabled.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void disableConnectedDisplay(int displayId)",
    "returnType" : "void",
    "comment" : "\n     * Disable a connected display that is currently enabled.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void startWifiDisplayScan()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void stopWifiDisplayScan()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void connectWifiDisplay(String deviceAddress)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void pauseWifiDisplay()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void resumeWifiDisplay()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void disconnectWifiDisplay()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void renameWifiDisplay(String deviceAddress, String alias)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void forgetWifiDisplay(String deviceAddress)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public WifiDisplayStatus getWifiDisplayStatus()",
    "returnType" : "WifiDisplayStatus",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setUserDisabledHdrTypes(@HdrType int[] userDisabledHdrTypes)",
    "returnType" : "void",
    "comment" : "\n     * Sets the HDR types that have been disabled by user.\n     * @param userDisabledHdrTypes the HDR types to disable. The HDR types are any of\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAreUserDisabledHdrTypesAllowed(boolean areUserDisabledHdrTypesAllowed)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether or not the user disabled HDR types are returned from\n     * {@link Display#getHdrCapabilities}.\n     *\n     * @param areUserDisabledHdrTypesAllowed If true, the user-disabled\n     * types are ignored and returned, if the display supports them. If\n     * false, the user-disabled types are taken into consideration and\n     * are never returned, even if the display supports them.\n     ",
    "links" : [ "android.view.Display#getHdrCapabilities" ]
  }, {
    "name" : "public boolean areUserDisabledHdrTypesAllowed()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether or not the user-disabled HDR types are returned from\n     * {@link Display#getHdrCapabilities}.\n     ",
    "links" : [ "android.view.Display#getHdrCapabilities" ]
  }, {
    "name" : "public int[] getUserDisabledHdrTypes()",
    "returnType" : "int[]",
    "comment" : "\n     * Returns the HDR formats disabled by the user.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "public void overrideHdrTypes(int displayId, int[] modes)",
    "returnType" : "void",
    "comment" : "\n     * Overrides HDR modes for a display device.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "public void requestColorMode(int displayId, int colorMode)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public VirtualDisplay createVirtualDisplay(@NonNull Context context, MediaProjection projection, @NonNull VirtualDisplayConfig virtualDisplayConfig, VirtualDisplay.Callback callback, @Nullable Executor executor)",
    "returnType" : "VirtualDisplay",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public VirtualDisplay createVirtualDisplayWrapper(VirtualDisplayConfig virtualDisplayConfig, IVirtualDisplayCallback callbackWrapper, int displayId)",
    "returnType" : "VirtualDisplay",
    "comment" : "\n     * Create a VirtualDisplay wrapper object for a newly created virtual display ; to be called\n     * once the display has been created in system_server.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setVirtualDisplaySurface(IVirtualDisplayCallback token, Surface surface)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void resizeVirtualDisplay(IVirtualDisplayCallback token, int width, int height, int densityDpi)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void releaseVirtualDisplay(IVirtualDisplayCallback token)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void setVirtualDisplayState(IVirtualDisplayCallback token, boolean isOn)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Point getStableDisplaySize()",
    "returnType" : "Point",
    "comment" : "\n     * Gets the stable device display size, in pixels.\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<BrightnessChangeEvent> getBrightnessEvents(String callingPackage)",
    "returnType" : "List<BrightnessChangeEvent>",
    "comment" : "\n     * Retrieves brightness change events.\n     ",
    "links" : [ ]
  }, {
    "name" : "public BrightnessInfo getBrightnessInfo(int displayId)",
    "returnType" : "BrightnessInfo",
    "comment" : "\n     * Retrieves Brightness Info for the specified display.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ColorSpace getPreferredWideGamutColorSpace()",
    "returnType" : "ColorSpace",
    "comment" : "\n     * Gets the preferred wide gamut color space for all displays.\n     * The wide gamut color space is returned from composition pipeline\n     * based on hardware capability.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public OverlayProperties getOverlaySupport()",
    "returnType" : "OverlayProperties",
    "comment" : "\n     * Gets the overlay properties for all displays.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setBrightnessConfigurationForUser(BrightnessConfiguration c, int userId, String packageName)",
    "returnType" : "void",
    "comment" : "\n     * Sets the global brightness configuration for a given user.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setBrightnessConfigurationForDisplay(BrightnessConfiguration c, String uniqueDisplayId, int userId, String packageName)",
    "returnType" : "void",
    "comment" : "\n     * Sets the brightness configuration for a given display.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public BrightnessConfiguration getBrightnessConfigurationForDisplay(String uniqueDisplayId, int userId)",
    "returnType" : "BrightnessConfiguration",
    "comment" : "\n     * Gets the brightness configuration for a given display or null if one hasn't been set.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public BrightnessConfiguration getBrightnessConfigurationForUser(int userId)",
    "returnType" : "BrightnessConfiguration",
    "comment" : "\n     * Gets the global brightness configuration for a given user or null if one hasn't been set.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public BrightnessConfiguration getDefaultBrightnessConfiguration()",
    "returnType" : "BrightnessConfiguration",
    "comment" : "\n     * Gets the default brightness configuration or null if one hasn't been configured.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isMinimalPostProcessingRequested(int displayId)",
    "returnType" : "boolean",
    "comment" : "\n     * Gets the last requested minimal post processing setting for the display with displayId.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTemporaryBrightness(int displayId, float brightness)",
    "returnType" : "void",
    "comment" : "\n     * Temporarily sets the brightness of the display.\n     * <p>\n     * Requires the {@link android.Manifest.permission#CONTROL_DISPLAY_BRIGHTNESS} permission.\n     * </p>\n     *\n     * @param brightness The brightness value from 0.0f to 1.0f.\n     *\n     * @hide Requires signature permission.\n     ",
    "links" : [ "android.Manifest.permission#CONTROL_DISPLAY_BRIGHTNESS" ]
  }, {
    "name" : "public void setBrightness(int displayId, float brightness)",
    "returnType" : "void",
    "comment" : "\n     * Sets the brightness of the display.\n     *\n     * @param brightness The brightness value from 0.0f to 1.0f.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public DisplayDecorationSupport getDisplayDecorationSupport(int displayId)",
    "returnType" : "DisplayDecorationSupport",
    "comment" : "\n     * Report whether/how the display supports DISPLAY_DECORATION.\n     *\n     * @param displayId The display whose support is being queried.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getBrightness(int displayId)",
    "returnType" : "float",
    "comment" : "\n     * Gets the brightness of the display.\n     *\n     * @param displayId The display from which to get the brightness\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTemporaryAutoBrightnessAdjustment(float adjustment)",
    "returnType" : "void",
    "comment" : "\n     * Temporarily sets the auto brightness adjustment factor.\n     * <p>\n     * Requires the {@link android.Manifest.permission#CONTROL_DISPLAY_BRIGHTNESS} permission.\n     * </p>\n     *\n     * @param adjustment The adjustment factor from -1.0 to 1.0.\n     *\n     * @hide Requires signature permission.\n     ",
    "links" : [ "android.Manifest.permission#CONTROL_DISPLAY_BRIGHTNESS" ]
  }, {
    "name" : "public Pair<float[], float[]> getMinimumBrightnessCurve()",
    "returnType" : "Pair<float[], float[]>",
    "comment" : "\n     * Returns the minimum brightness curve, which guarantess that any brightness curve that dips\n     * below it is rejected by the system.\n     * This prevent auto-brightness from setting the screen so dark as to prevent the user from\n     * resetting or disabling it, and maps lux to the absolute minimum nits that are still readable\n     * in that ambient brightness.\n     *\n     * @return The minimum brightness curve (as lux values and their corresponding nits values).\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<AmbientBrightnessDayStats> getAmbientBrightnessStats()",
    "returnType" : "List<AmbientBrightnessDayStats>",
    "comment" : "\n     * Retrieves ambient brightness stats.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setUserPreferredDisplayMode(int displayId, Display.Mode mode)",
    "returnType" : "void",
    "comment" : "\n     * Sets the default display mode, according to the refresh rate and the resolution chosen by the\n     * user.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Display.Mode getUserPreferredDisplayMode(int displayId)",
    "returnType" : "Display.Mode",
    "comment" : "\n     * Returns the user preferred display mode.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Display.Mode getSystemPreferredDisplayMode(int displayId)",
    "returnType" : "Display.Mode",
    "comment" : "\n     * Returns the system preferred display mode.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setHdrConversionMode(@NonNull HdrConversionMode hdrConversionMode)",
    "returnType" : "void",
    "comment" : "\n     * Sets the {@link HdrConversionMode} for the device.\n     ",
    "links" : [ "android.hardware.display.HdrConversionMode" ]
  }, {
    "name" : "public HdrConversionMode getHdrConversionModeSetting()",
    "returnType" : "HdrConversionMode",
    "comment" : "\n     * Returns the {@link HdrConversionMode} of the device, which is set by the user.\n     * The HDR conversion mode chosen by user is returned irrespective of whether HDR conversion\n     * is disabled by an app.\n     ",
    "links" : [ "android.hardware.display.HdrConversionMode" ]
  }, {
    "name" : "public HdrConversionMode getHdrConversionMode()",
    "returnType" : "HdrConversionMode",
    "comment" : "\n     * Returns the {@link HdrConversionMode} of the device.\n     ",
    "links" : [ "android.hardware.display.HdrConversionMode" ]
  }, {
    "name" : "public int[] getSupportedHdrOutputTypes()",
    "returnType" : "int[]",
    "comment" : "\n     * Returns the HDR output types supported by the device.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setShouldAlwaysRespectAppRequestedMode(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * When enabled the app requested display resolution and refresh rate is always selected\n     * in DisplayModeDirector regardless of user settings and policies for low brightness, low\n     * battery etc.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean shouldAlwaysRespectAppRequestedMode()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether DisplayModeDirector is running in a mode which always selects the app\n     * requested display mode and ignores user settings and policies for low brightness, low\n     * battery etc.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setRefreshRateSwitchingType(@DisplayManager.SwitchingType int newValue)",
    "returnType" : "void",
    "comment" : "\n     * Sets the refresh rate switching type.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getRefreshRateSwitchingType()",
    "returnType" : "int",
    "comment" : "\n     * Returns the refresh rate switching type.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void requestDisplayModes(int displayId, @Nullable int[] modeIds)",
    "returnType" : "void",
    "comment" : "\n     * Sets allowed display mode ids\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void invalidateLocalDisplayInfoCaches()",
    "returnType" : "void",
    "comment" : "\n     * Invalidates the contents of the display info cache for all applications. Can only\n     * be called by system_server.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void disableLocalDisplayInfoCaches()",
    "returnType" : "void",
    "comment" : "\n     * Disables the binder call cache.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static native void nSignalNativeCallbacks(float refreshRate)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void registerNativeChoreographerForRefreshRateCallbacks()",
    "returnType" : "void",
    "comment" : "\n     * Called from AChoreographer via JNI.\n     * Registers AChoreographer so that refresh rate callbacks can be dispatched from DMS.\n     * Public for unit testing to be able to call this method.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void unregisterNativeChoreographerForRefreshRateCallbacks()",
    "returnType" : "void",
    "comment" : "\n     * Called from AChoreographer via JNI.\n     * Unregisters AChoreographer from receiving refresh rate callbacks.\n     * Public for unit testing to be able to call this method.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String eventToString(@DisplayEvent int event)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean initExtraLogging()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean extraLogging()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static DisplayManagerGlobal getInstance()", "public DisplayInfo getDisplayInfo(int displayId)", "private DisplayInfo getDisplayInfoLocked(int displayId)", "public int[] getDisplayIds()", "public int[] getDisplayIds(boolean includeDisabled)", "public boolean isUidPresentOnDisplay(int uid, int displayId)", "public Display getCompatibleDisplay(int displayId, DisplayAdjustments daj)", "public Display getCompatibleDisplay(int displayId, Resources resources)", "public Display getRealDisplay(int displayId)", "public void registerDisplayListener(@NonNull DisplayListener listener, @Nullable Handler handler, @EventsMask long eventsMask, String packageName)", "public void registerDisplayListener(@NonNull DisplayListener listener, @NonNull Executor executor, @EventsMask long eventsMask, String packageName)", "public void unregisterDisplayListener(DisplayListener listener)", "private void maybeLogAllDisplayListeners()", "public void handleDisplayChangeFromWindowManager(int displayId)", "private static Looper getLooperForHandler(@Nullable Handler handler)", "private int findDisplayListenerLocked(DisplayListener listener)", "private int calculateEventsMaskLocked()", "private void registerCallbackIfNeededLocked()", "private void updateCallbackIfNeededLocked()", "private void handleDisplayEvent(int displayId, @DisplayEvent int event, boolean forceUpdate)", "public void enableConnectedDisplay(int displayId)", "public void disableConnectedDisplay(int displayId)", "public void startWifiDisplayScan()", "public void stopWifiDisplayScan()", "public void connectWifiDisplay(String deviceAddress)", "public void pauseWifiDisplay()", "public void resumeWifiDisplay()", "public void disconnectWifiDisplay()", "public void renameWifiDisplay(String deviceAddress, String alias)", "public void forgetWifiDisplay(String deviceAddress)", "public WifiDisplayStatus getWifiDisplayStatus()", "public void setUserDisabledHdrTypes(@HdrType int[] userDisabledHdrTypes)", "public void setAreUserDisabledHdrTypesAllowed(boolean areUserDisabledHdrTypesAllowed)", "public boolean areUserDisabledHdrTypesAllowed()", "public int[] getUserDisabledHdrTypes()", "public void overrideHdrTypes(int displayId, int[] modes)", "public void requestColorMode(int displayId, int colorMode)", "public VirtualDisplay createVirtualDisplay(@NonNull Context context, MediaProjection projection, @NonNull VirtualDisplayConfig virtualDisplayConfig, VirtualDisplay.Callback callback, @Nullable Executor executor)", "public VirtualDisplay createVirtualDisplayWrapper(VirtualDisplayConfig virtualDisplayConfig, IVirtualDisplayCallback callbackWrapper, int displayId)", "public void setVirtualDisplaySurface(IVirtualDisplayCallback token, Surface surface)", "public void resizeVirtualDisplay(IVirtualDisplayCallback token, int width, int height, int densityDpi)", "public void releaseVirtualDisplay(IVirtualDisplayCallback token)", " void setVirtualDisplayState(IVirtualDisplayCallback token, boolean isOn)", "public Point getStableDisplaySize()", "public List<BrightnessChangeEvent> getBrightnessEvents(String callingPackage)", "public BrightnessInfo getBrightnessInfo(int displayId)", "public ColorSpace getPreferredWideGamutColorSpace()", "public OverlayProperties getOverlaySupport()", "public void setBrightnessConfigurationForUser(BrightnessConfiguration c, int userId, String packageName)", "public void setBrightnessConfigurationForDisplay(BrightnessConfiguration c, String uniqueDisplayId, int userId, String packageName)", "public BrightnessConfiguration getBrightnessConfigurationForDisplay(String uniqueDisplayId, int userId)", "public BrightnessConfiguration getBrightnessConfigurationForUser(int userId)", "public BrightnessConfiguration getDefaultBrightnessConfiguration()", "public boolean isMinimalPostProcessingRequested(int displayId)", "public void setTemporaryBrightness(int displayId, float brightness)", "public void setBrightness(int displayId, float brightness)", "public DisplayDecorationSupport getDisplayDecorationSupport(int displayId)", "public float getBrightness(int displayId)", "public void setTemporaryAutoBrightnessAdjustment(float adjustment)", "public Pair<float[], float[]> getMinimumBrightnessCurve()", "public List<AmbientBrightnessDayStats> getAmbientBrightnessStats()", "public void setUserPreferredDisplayMode(int displayId, Display.Mode mode)", "public Display.Mode getUserPreferredDisplayMode(int displayId)", "public Display.Mode getSystemPreferredDisplayMode(int displayId)", "public void setHdrConversionMode(@NonNull HdrConversionMode hdrConversionMode)", "public HdrConversionMode getHdrConversionModeSetting()", "public HdrConversionMode getHdrConversionMode()", "public int[] getSupportedHdrOutputTypes()", "public void setShouldAlwaysRespectAppRequestedMode(boolean enabled)", "public boolean shouldAlwaysRespectAppRequestedMode()", "public void setRefreshRateSwitchingType(@DisplayManager.SwitchingType int newValue)", "public int getRefreshRateSwitchingType()", "public void requestDisplayModes(int displayId, @Nullable int[] modeIds)", "public static void invalidateLocalDisplayInfoCaches()", "public void disableLocalDisplayInfoCaches()", "private static native void nSignalNativeCallbacks(float refreshRate)", "public void registerNativeChoreographerForRefreshRateCallbacks()", "public void unregisterNativeChoreographerForRefreshRateCallbacks()", "private static String eventToString(@DisplayEvent int event)", "private static boolean initExtraLogging()", "private static boolean extraLogging()" ],
  "variableNames" : [ "TAG", "EXTRA_LOGGING_PACKAGE_NAME", "sCurrentPackageName", "sExtraDisplayListenerLogging", "DEBUG", "USE_CACHE", "EVENT_DISPLAY_ADDED", "EVENT_DISPLAY_CHANGED", "EVENT_DISPLAY_REMOVED", "EVENT_DISPLAY_BRIGHTNESS_CHANGED", "EVENT_DISPLAY_HDR_SDR_RATIO_CHANGED", "EVENT_DISPLAY_CONNECTED", "EVENT_DISPLAY_DISCONNECTED", "sInstance", "mDispatchNativeCallbacks", "mNativeCallbackReportedRefreshRate", "mLock", "mDm", "mCallback", "mRegisteredEventsMask", "mDisplayListeners", "mDisplayInfoCache", "mWideColorSpace", "mOverlayProperties", "mDisplayIdCache", "mWifiDisplayScanNestCount", "mToken", "mDisplayCache", "CACHE_KEY_DISPLAY_INFO_PROPERTY" ]
}