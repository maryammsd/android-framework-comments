{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/database/DatabaseUtils.java",
  "packageName" : "android.database",
  "className" : "InsertHelper",
  "comment" : "\n     * This class allows users to do multiple inserts into a table using\n     * the same statement.\n     * <p>\n     * This class is not thread-safe.\n     * </p>\n     *\n     * @deprecated Use {@link SQLiteStatement} instead.\n     ",
  "variables" : [ {
    "name" : "mDb",
    "type" : "SQLiteDatabase",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTableName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mColumns",
    "type" : "HashMap<String, Integer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInsertSQL",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInsertStatement",
    "type" : "SQLiteStatement",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mReplaceStatement",
    "type" : "SQLiteStatement",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPreparedStatement",
    "type" : "SQLiteStatement",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TABLE_INFO_PRAGMA_COLUMNNAME_INDEX",
    "type" : "int",
    "comment" : "\n         * {@hide}\n         *\n         * These are the columns returned by sqlite's \"PRAGMA\n         * table_info(...)\" command that we depend on.\n         ",
    "links" : [ ]
  }, {
    "name" : "TABLE_INFO_PRAGMA_DEFAULT_INDEX",
    "type" : "int",
    "comment" : "\n         * This field was accidentally exposed in earlier versions of the platform\n         * so we can hide it but we can't remove it.\n         *\n         * @hide\n         ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void buildSQL() throws SQLException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private SQLiteStatement getStatement(boolean allowReplace) throws SQLException",
    "returnType" : "SQLiteStatement",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private long insertInternal(ContentValues values, boolean allowReplace)",
    "returnType" : "long",
    "comment" : "\n         * Performs an insert, adding a new row with the given values.\n         *\n         * @param values the set of values with which  to populate the\n         * new row\n         * @param allowReplace if true, the statement does \"INSERT OR\n         *   REPLACE\" instead of \"INSERT\", silently deleting any\n         *   previously existing rows that would cause a conflict\n         *\n         * @return the row ID of the newly inserted row, or -1 if an\n         * error occurred\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getColumnIndex(String key)",
    "returnType" : "int",
    "comment" : "\n         * Returns the index of the specified column. This is index is suitagble for use\n         * in calls to bind().\n         * @param key the column name\n         * @return the index of the column\n         ",
    "links" : [ ]
  }, {
    "name" : "public void bind(int index, double value)",
    "returnType" : "void",
    "comment" : "\n         * Bind the value to an index. A prepareForInsert() or prepareForReplace()\n         * without a matching execute() must have already have been called.\n         * @param index the index of the slot to which to bind\n         * @param value the value to bind\n         ",
    "links" : [ ]
  }, {
    "name" : "public void bind(int index, float value)",
    "returnType" : "void",
    "comment" : "\n         * Bind the value to an index. A prepareForInsert() or prepareForReplace()\n         * without a matching execute() must have already have been called.\n         * @param index the index of the slot to which to bind\n         * @param value the value to bind\n         ",
    "links" : [ ]
  }, {
    "name" : "public void bind(int index, long value)",
    "returnType" : "void",
    "comment" : "\n         * Bind the value to an index. A prepareForInsert() or prepareForReplace()\n         * without a matching execute() must have already have been called.\n         * @param index the index of the slot to which to bind\n         * @param value the value to bind\n         ",
    "links" : [ ]
  }, {
    "name" : "public void bind(int index, int value)",
    "returnType" : "void",
    "comment" : "\n         * Bind the value to an index. A prepareForInsert() or prepareForReplace()\n         * without a matching execute() must have already have been called.\n         * @param index the index of the slot to which to bind\n         * @param value the value to bind\n         ",
    "links" : [ ]
  }, {
    "name" : "public void bind(int index, boolean value)",
    "returnType" : "void",
    "comment" : "\n         * Bind the value to an index. A prepareForInsert() or prepareForReplace()\n         * without a matching execute() must have already have been called.\n         * @param index the index of the slot to which to bind\n         * @param value the value to bind\n         ",
    "links" : [ ]
  }, {
    "name" : "public void bindNull(int index)",
    "returnType" : "void",
    "comment" : "\n         * Bind null to an index. A prepareForInsert() or prepareForReplace()\n         * without a matching execute() must have already have been called.\n         * @param index the index of the slot to which to bind\n         ",
    "links" : [ ]
  }, {
    "name" : "public void bind(int index, byte[] value)",
    "returnType" : "void",
    "comment" : "\n         * Bind the value to an index. A prepareForInsert() or prepareForReplace()\n         * without a matching execute() must have already have been called.\n         * @param index the index of the slot to which to bind\n         * @param value the value to bind\n         ",
    "links" : [ ]
  }, {
    "name" : "public void bind(int index, String value)",
    "returnType" : "void",
    "comment" : "\n         * Bind the value to an index. A prepareForInsert() or prepareForReplace()\n         * without a matching execute() must have already have been called.\n         * @param index the index of the slot to which to bind\n         * @param value the value to bind\n         ",
    "links" : [ ]
  }, {
    "name" : "public long insert(ContentValues values)",
    "returnType" : "long",
    "comment" : "\n         * Performs an insert, adding a new row with the given values.\n         * If the table contains conflicting rows, an error is\n         * returned.\n         *\n         * @param values the set of values with which to populate the\n         * new row\n         *\n         * @return the row ID of the newly inserted row, or -1 if an\n         * error occurred\n         ",
    "links" : [ ]
  }, {
    "name" : "public long execute()",
    "returnType" : "long",
    "comment" : "\n         * Execute the previously prepared insert or replace using the bound values\n         * since the last call to prepareForInsert or prepareForReplace.\n         *\n         * <p>Note that calling bind() and then execute() is not thread-safe. The only thread-safe\n         * way to use this class is to call insert() or replace().\n         *\n         * @return the row ID of the newly inserted row, or -1 if an\n         * error occurred\n         ",
    "links" : [ ]
  }, {
    "name" : "public void prepareForInsert()",
    "returnType" : "void",
    "comment" : "\n         * Prepare the InsertHelper for an insert. The pattern for this is:\n         * <ul>\n         * <li>prepareForInsert()\n         * <li>bind(index, value);\n         * <li>bind(index, value);\n         * <li>...\n         * <li>bind(index, value);\n         * <li>execute();\n         * </ul>\n         ",
    "links" : [ ]
  }, {
    "name" : "public void prepareForReplace()",
    "returnType" : "void",
    "comment" : "\n         * Prepare the InsertHelper for a replace. The pattern for this is:\n         * <ul>\n         * <li>prepareForReplace()\n         * <li>bind(index, value);\n         * <li>bind(index, value);\n         * <li>...\n         * <li>bind(index, value);\n         * <li>execute();\n         * </ul>\n         ",
    "links" : [ ]
  }, {
    "name" : "public long replace(ContentValues values)",
    "returnType" : "long",
    "comment" : "\n         * Performs an insert, adding a new row with the given values.\n         * If the table contains conflicting rows, they are deleted\n         * and replaced with the new row.\n         *\n         * @param values the set of values with which to populate the\n         * new row\n         *\n         * @return the row ID of the newly inserted row, or -1 if an\n         * error occurred\n         ",
    "links" : [ ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "\n         * Close this object and release any resources associated with\n         * it.  The behavior of calling <code>insert()</code> after\n         * calling this method is undefined.\n         ",
    "links" : [ ]
  } ],
  "variableNames" : [ "mDb", "mTableName", "mColumns", "mInsertSQL", "mInsertStatement", "mReplaceStatement", "mPreparedStatement", "TABLE_INFO_PRAGMA_COLUMNNAME_INDEX", "TABLE_INFO_PRAGMA_DEFAULT_INDEX" ],
  "methodNames" : [ "private void buildSQL() throws SQLException", "private SQLiteStatement getStatement(boolean allowReplace) throws SQLException", "private long insertInternal(ContentValues values, boolean allowReplace)", "public int getColumnIndex(String key)", "public void bind(int index, double value)", "public void bind(int index, float value)", "public void bind(int index, long value)", "public void bind(int index, int value)", "public void bind(int index, boolean value)", "public void bindNull(int index)", "public void bind(int index, byte[] value)", "public void bind(int index, String value)", "public long insert(ContentValues values)", "public long execute()", "public void prepareForInsert()", "public void prepareForReplace()", "public long replace(ContentValues values)", "public void close()" ]
}