{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/app/admin/DevicePolicyEventLogger.java",
  "packageName" : "android.app.admin",
  "className" : "DevicePolicyEventLogger",
  "comment" : "\n * A wrapper for logging managed device events using {@link StatsLog}.\n * <p/>\n * This class allows chaining - each of its methods returns a reference to the current instance.\n * <p/>\n * Example usage:\n * <code><pre>\n * import android.stats.devicepolicy.DevicePolicyEnums;\n *\n * DevicePolicyEventLogger\n *     .createEvent(DevicePolicyEnums.USER_RESTRICTION_CHANGED)\n *     .setAdmin(who)\n *     .setString(key)\n *     .setBoolean(enabledFromThisOwner)\n *     .write();\n * </pre></code>\n *\n * @see StatsLog\n * @hide\n ",
  "variables" : [ {
    "name" : "mEventId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIntValue",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBooleanValue",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTimePeriodMs",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStringArrayValue",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAdminPackageName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static DevicePolicyEventLogger createEvent(int eventId)",
    "returnType" : "DevicePolicyEventLogger",
    "comment" : "\n     * Creates a new {@link DevicePolicyEventLogger} instance for the specified\n     * <code>eventId</code>.\n     *\n     * @param eventId one of {@link android.stats.devicepolicy.DevicePolicyEnums} as defined in\n     * <code>core/proto/android/stats/devicepolicy/device_policy_enums.proto</code>\n     ",
    "links" : [ "android.stats.devicepolicy.DevicePolicyEnums", "android.app.admin.DevicePolicyEventLogger" ]
  }, {
    "name" : "public int getEventId()",
    "returnType" : "int",
    "comment" : "\n     * Returns the event id.\n     ",
    "links" : [ ]
  }, {
    "name" : "public DevicePolicyEventLogger setInt(int value)",
    "returnType" : "DevicePolicyEventLogger",
    "comment" : "\n     * Sets a generic <code>int</code> value.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getInt()",
    "returnType" : "int",
    "comment" : "\n     * Returns the generic <code>int</code> value.\n     ",
    "links" : [ ]
  }, {
    "name" : "public DevicePolicyEventLogger setBoolean(boolean value)",
    "returnType" : "DevicePolicyEventLogger",
    "comment" : "\n     * Sets a generic <code>boolean</code> value.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getBoolean()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the generic <code>boolean</code> value.\n     ",
    "links" : [ ]
  }, {
    "name" : "public DevicePolicyEventLogger setTimePeriod(long timePeriodMillis)",
    "returnType" : "DevicePolicyEventLogger",
    "comment" : "\n     * Sets a time period in milliseconds.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getTimePeriod()",
    "returnType" : "long",
    "comment" : "\n     * Returns the time period in milliseconds.\n     ",
    "links" : [ ]
  }, {
    "name" : "public DevicePolicyEventLogger setStrings(String... values)",
    "returnType" : "DevicePolicyEventLogger",
    "comment" : "\n     * Sets generic <code>String</code> values.\n     ",
    "links" : [ ]
  }, {
    "name" : "public DevicePolicyEventLogger setStrings(String value, String[] values)",
    "returnType" : "DevicePolicyEventLogger",
    "comment" : "\n     * Sets generic <code>String</code> values.\n     * <p/>\n     * {@link #write()} logs the concatenation of <code>value</code> and <code>values</code>,\n     * in that order.\n     ",
    "links" : [ "#write()" ]
  }, {
    "name" : "public DevicePolicyEventLogger setStrings(String value1, String value2, String[] values)",
    "returnType" : "DevicePolicyEventLogger",
    "comment" : "\n     * Sets generic <code>String</code> values.\n     * <p/>\n     * {@link #write()} logs the concatenation of <code>value1</code>, <code>value2</code>\n     * and <code>values</code>, in that order.\n     ",
    "links" : [ "#write()" ]
  }, {
    "name" : "public String[] getStringArray()",
    "returnType" : "String[]",
    "comment" : "\n     * Returns a copy of the generic <code>String[]</code> value.\n     ",
    "links" : [ ]
  }, {
    "name" : "public DevicePolicyEventLogger setAdmin(@Nullable String packageName)",
    "returnType" : "DevicePolicyEventLogger",
    "comment" : "\n     * Sets the package name of the admin application.\n     ",
    "links" : [ ]
  }, {
    "name" : "public DevicePolicyEventLogger setAdmin(@Nullable ComponentName componentName)",
    "returnType" : "DevicePolicyEventLogger",
    "comment" : "\n     * Sets the package name of the admin application from the {@link ComponentName}.\n     ",
    "links" : [ "android.content.ComponentName" ]
  }, {
    "name" : "public String getAdminPackageName()",
    "returnType" : "String",
    "comment" : "\n     * Returns the package name of the admin application.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void write()",
    "returnType" : "void",
    "comment" : "\n     * Writes the metric to {@link StatsLog}.\n     ",
    "links" : [ "com.android.internal.util.FrameworkStatsLog" ]
  }, {
    "name" : "private static byte[] stringArrayValueToBytes(String[] array)",
    "returnType" : "byte[]",
    "comment" : "\n     * Converts the <code>String[] array</code> to <code>byte[]</code>.\n     * <p/>\n     * We can't log <code>String[]</code> using {@link StatsLog}. The convention is to assign\n     * the array to a proto object and convert it to <code>byte[]</code>.\n     ",
    "links" : [ "com.android.internal.util.FrameworkStatsLog" ]
  } ],
  "variableNames" : [ "mEventId", "mIntValue", "mBooleanValue", "mTimePeriodMs", "mStringArrayValue", "mAdminPackageName" ],
  "methodNames" : [ "public static DevicePolicyEventLogger createEvent(int eventId)", "public int getEventId()", "public DevicePolicyEventLogger setInt(int value)", "public int getInt()", "public DevicePolicyEventLogger setBoolean(boolean value)", "public boolean getBoolean()", "public DevicePolicyEventLogger setTimePeriod(long timePeriodMillis)", "public long getTimePeriod()", "public DevicePolicyEventLogger setStrings(String... values)", "public DevicePolicyEventLogger setStrings(String value, String[] values)", "public DevicePolicyEventLogger setStrings(String value1, String value2, String[] values)", "public String[] getStringArray()", "public DevicePolicyEventLogger setAdmin(@Nullable String packageName)", "public DevicePolicyEventLogger setAdmin(@Nullable ComponentName componentName)", "public String getAdminPackageName()", "public void write()", "private static byte[] stringArrayValueToBytes(String[] array)" ]
}