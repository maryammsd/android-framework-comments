{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/text/InputFilter.java",
  "packageName" : "android.text",
  "className" : "InputFilter",
  "comment" : "\n * InputFilters can be attached to {@link Editable}s to constrain the\n * changes that can be made to them.\n ",
  "links" : [ "android.text.Editable" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public CharSequence filter(CharSequence source, int start, int end, Spanned dest, int dstart, int dend)",
    "returnType" : "CharSequence",
    "comment" : "\n     * This method is called when the buffer is going to replace the\n     * range <code>dstart &hellip; dend</code> of <code>dest</code>\n     * with the new text from the range <code>start &hellip; end</code>\n     * of <code>source</code>.  Return the CharSequence that you would\n     * like to have placed there instead, including an empty string\n     * if appropriate, or <code>null</code> to accept the original\n     * replacement.  Be careful to not to reject 0-length replacements,\n     * as this is what happens when you delete text.  Also beware that\n     * you should not attempt to make any changes to <code>dest</code>\n     * from this method; you may only examine it for context.\n     *\n     * Note: If <var>source</var> is an instance of {@link Spanned} or\n     * {@link Spannable}, the span objects in the <var>source</var> should be\n     * copied into the filtered result (i.e. the non-null return value).\n     * {@link TextUtils#copySpansFrom} can be used for convenience if the\n     * span boundary indices would be remaining identical relative to the source.\n     ",
    "links" : [ "android.text.Spanned", "android.text.Spannable", "android.text.TextUtils#copySpansFrom" ]
  } ],
  "methodNames" : [ "public CharSequence filter(CharSequence source, int start, int end, Spanned dest, int dstart, int dend)" ],
  "variableNames" : [ ]
}