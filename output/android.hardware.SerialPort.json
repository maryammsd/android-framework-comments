{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/hardware/SerialPort.java",
  "packageName" : "android.hardware",
  "className" : "SerialPort",
  "comment" : "\n * @hide\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNativeContext",
    "type" : "int",
    "comment" : " used by the JNI code",
    "links" : [ ]
  }, {
    "name" : "mName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFileDescriptor",
    "type" : "ParcelFileDescriptor",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void open(ParcelFileDescriptor pfd, int speed) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * SerialPort should only be instantiated by SerialManager\n     * Speed must be one of 50, 75, 110, 134, 150, 200, 300, 600, 1200, 1800, 2400, 4800, 9600,\n     * 19200, 38400, 57600, 115200, 230400, 460800, 500000, 576000, 921600, 1000000, 1152000,\n     * 1500000, 2000000, 2500000, 3000000, 3500000, 4000000\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void close() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Closes the serial port\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getName()",
    "returnType" : "String",
    "comment" : "\n     * Returns the name of the serial port\n     *\n     * @return the serial port's name\n     ",
    "links" : [ ]
  }, {
    "name" : "public int read(ByteBuffer buffer) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Reads data into the provided buffer.\n     * Note that the value returned by {@link java.nio.Buffer#position()} on this buffer is\n     * unchanged after a call to this method.\n     *\n     * @param buffer to read into\n     * @return number of bytes read\n     ",
    "links" : [ "java.nio.Buffer#position()" ]
  }, {
    "name" : "public void write(ByteBuffer buffer, int length) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes data from provided buffer.\n     * Note that the value returned by {@link java.nio.Buffer#position()} on this buffer is\n     * unchanged after a call to this method.\n     *\n     * @param buffer to write\n     * @param length number of bytes to write\n     ",
    "links" : [ "java.nio.Buffer#position()" ]
  }, {
    "name" : "public void sendBreak()",
    "returnType" : "void",
    "comment" : "\n     * Sends a stream of zero valued bits for 0.25 to 0.5 seconds\n     ",
    "links" : [ ]
  }, {
    "name" : "private native void native_open(FileDescriptor pfd, int speed) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native void native_close()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native int native_read_array(byte[] buffer, int length) throws IOException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native int native_read_direct(ByteBuffer buffer, int length) throws IOException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native void native_write_array(byte[] buffer, int length) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native void native_write_direct(ByteBuffer buffer, int length) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native void native_send_break()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "mNativeContext", "mName", "mFileDescriptor" ],
  "methodNames" : [ "public void open(ParcelFileDescriptor pfd, int speed) throws IOException", "public void close() throws IOException", "public String getName()", "public int read(ByteBuffer buffer) throws IOException", "public void write(ByteBuffer buffer, int length) throws IOException", "public void sendBreak()", "private native void native_open(FileDescriptor pfd, int speed) throws IOException", "private native void native_close()", "private native int native_read_array(byte[] buffer, int length) throws IOException", "private native int native_read_direct(ByteBuffer buffer, int length) throws IOException", "private native void native_write_array(byte[] buffer, int length) throws IOException", "private native void native_write_direct(ByteBuffer buffer, int length) throws IOException", "private native void native_send_break()" ]
}