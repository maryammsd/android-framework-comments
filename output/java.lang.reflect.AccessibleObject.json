{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/lang/reflect/AccessibleObject.java",
  "packageName" : "java.lang.reflect",
  "className" : "AccessibleObject",
  "comment" : "\n * The AccessibleObject class is the base class for Field, Method and\n * Constructor objects.  It provides the ability to flag a reflected\n * object as suppressing default Java language access control checks\n * when it is used.  The access checks--for public, default (package)\n * access, protected, and private members--are performed when Fields,\n * Methods or Constructors are used to set or get fields, to invoke\n * methods, or to create and initialize new instances of classes,\n * respectively.\n *\n * <p>Setting the {@code accessible} flag in a reflected object\n * permits sophisticated applications with sufficient privilege, such\n * as Java Object Serialization or other persistence mechanisms, to\n * manipulate objects in a manner that would normally be prohibited.\n *\n * <p>By default, a reflected object is <em>not</em> accessible.\n *\n * @see Field\n * @see Method\n * @see Constructor\n * @see ReflectPermission\n *\n * @since 1.2\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "override",
    "type" : "boolean",
    "comment" : " outside this package.",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static void setAccessible(AccessibleObject[] array, boolean flag) throws SecurityException",
    "returnType" : "void",
    "comment" : "\n     * Convenience method to set the {@code accessible} flag for an\n     * array of objects with a single security check (for efficiency).\n     *\n     * <p>First, if there is a security manager, its\n     * {@code checkPermission} method is called with a\n     * {@code ReflectPermission(\"suppressAccessChecks\")} permission.\n     *\n     * <p>A {@code SecurityException} is raised if {@code flag} is\n     * {@code true} but accessibility of any of the elements of the input\n     * {@code array} may not be changed (for example, if the element\n     * object is a {@link Constructor} object for the class {@link\n     * java.lang.Class}).  In the event of such a SecurityException, the\n     * accessibility of objects is set to {@code flag} for array elements\n     * upto (and excluding) the element for which the exception occurred; the\n     * accessibility of elements beyond (and including) the element for which\n     * the exception occurred is unchanged.\n     *\n     * @param array the array of AccessibleObjects\n     * @param flag  the new value for the {@code accessible} flag\n     *              in each object\n     * @throws SecurityException if the request is denied.\n     * @see SecurityManager#checkPermission\n     * @see java.lang.RuntimePermission\n     ",
    "links" : [ "java.lang.Class", "java.lang.reflect.Constructor" ]
  }, {
    "name" : "public void setAccessible(boolean flag) throws SecurityException",
    "returnType" : "void",
    "comment" : "\n     * Set the {@code accessible} flag for this object to\n     * the indicated boolean value.  A value of {@code true} indicates that\n     * the reflected object should suppress Java language access\n     * checking when it is used.  A value of {@code false} indicates\n     * that the reflected object should enforce Java language access checks.\n     *\n     * <p>First, if there is a security manager, its\n     * {@code checkPermission} method is called with a\n     * {@code ReflectPermission(\"suppressAccessChecks\")} permission.\n     *\n     * <p>A {@code SecurityException} is raised if {@code flag} is\n     * {@code true} but accessibility of this object may not be changed\n     * (for example, if this element object is a {@link Constructor} object for\n     * the class {@link java.lang.Class}).\n     *\n     * <p>A {@code SecurityException} is raised if this object is a {@link\n     * java.lang.reflect.Constructor} object for the class\n     * {@code java.lang.Class}, and {@code flag} is true.\n     *\n     * @param flag the new value for the {@code accessible} flag\n     * @throws SecurityException if the request is denied.\n     * @see SecurityManager#checkPermission\n     * @see java.lang.RuntimePermission\n     ",
    "links" : [ "java.lang.Class", "java.lang.reflect.Constructor" ]
  }, {
    "name" : "private static void setAccessible0(AccessibleObject obj, boolean flag) throws SecurityException",
    "returnType" : "void",
    "comment" : " Check that you aren't exposing java.lang.Class.<init> or sensitive\n       fields in java.lang.Class. ",
    "links" : [ ]
  }, {
    "name" : "public boolean isAccessible()",
    "returnType" : "boolean",
    "comment" : "\n     * Get the value of the {@code accessible} flag for this object.\n     *\n     * @return the value of the object's {@code accessible} flag\n     ",
    "links" : [ ]
  }, {
    "name" : "public T getAnnotation(Class<T> annotationClass)",
    "returnType" : "T",
    "comment" : "\n     * @throws NullPointerException {@inheritDoc}\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isAnnotationPresent(Class<? extends Annotation> annotationClass)",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     * @throws NullPointerException {@inheritDoc}\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public T[] getAnnotationsByType(Class<T> annotationClass)",
    "returnType" : "T[]",
    "comment" : "\n     * @throws NullPointerException {@inheritDoc}\n     * @since 1.8\n     ",
    "links" : [ ]
  }, {
    "name" : "public Annotation[] getAnnotations()",
    "returnType" : "Annotation[]",
    "comment" : "\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public T getDeclaredAnnotation(Class<T> annotationClass)",
    "returnType" : "T",
    "comment" : "\n     * @throws NullPointerException {@inheritDoc}\n     * @since 1.8\n     ",
    "links" : [ ]
  }, {
    "name" : "public T[] getDeclaredAnnotationsByType(Class<T> annotationClass)",
    "returnType" : "T[]",
    "comment" : "\n     * @throws NullPointerException {@inheritDoc}\n     * @since 1.8\n     ",
    "links" : [ ]
  }, {
    "name" : "public Annotation[] getDeclaredAnnotations()",
    "returnType" : "Annotation[]",
    "comment" : "\n     * @since 1.5\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static void setAccessible(AccessibleObject[] array, boolean flag) throws SecurityException", "public void setAccessible(boolean flag) throws SecurityException", "private static void setAccessible0(AccessibleObject obj, boolean flag) throws SecurityException", "public boolean isAccessible()", "public T getAnnotation(Class<T> annotationClass)", "public boolean isAnnotationPresent(Class<? extends Annotation> annotationClass)", "public T[] getAnnotationsByType(Class<T> annotationClass)", "public Annotation[] getAnnotations()", "public T getDeclaredAnnotation(Class<T> annotationClass)", "public T[] getDeclaredAnnotationsByType(Class<T> annotationClass)", "public Annotation[] getDeclaredAnnotations()" ],
  "variableNames" : [ "override" ]
}