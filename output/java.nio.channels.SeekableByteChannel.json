{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/nio/channels/SeekableByteChannel.java",
  "packageName" : "java.nio.channels",
  "className" : "SeekableByteChannel",
  "comment" : "",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " int read(ByteBuffer dst) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Reads a sequence of bytes from this channel into the given buffer.\n     *\n     * <p> Bytes are read starting at this channel's current position, and\n     * then the position is updated with the number of bytes actually read.\n     * Otherwise this method behaves exactly as specified in the {@link\n     * ReadableByteChannel} interface.\n     ",
    "links" : [ "java.nio.channels.ReadableByteChannel" ]
  }, {
    "name" : " int write(ByteBuffer src) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Writes a sequence of bytes to this channel from the given buffer.\n     *\n     * <p> Bytes are written starting at this channel's current position, unless\n     * the channel is connected to an entity such as a file that is opened with\n     * the {@link java.nio.file.StandardOpenOption#APPEND APPEND} option, in\n     * which case the position is first advanced to the end. The entity to which\n     * the channel is connected is grown, if necessary, to accommodate the\n     * written bytes, and then the position is updated with the number of bytes\n     * actually written. Otherwise this method behaves exactly as specified by\n     * the {@link WritableByteChannel} interface.\n     ",
    "links" : [ "java.nio.channels.WritableByteChannel", "java.nio.file.StandardOpenOption#APPEND" ]
  }, {
    "name" : " long position() throws IOException",
    "returnType" : "long",
    "comment" : "\n     * Returns this channel's position.\n     *\n     * @return  This channel's position,\n     *          a non-negative integer counting the number of bytes\n     *          from the beginning of the entity to the current position\n     *\n     * @throws  ClosedChannelException\n     *          If this channel is closed\n     * @throws  IOException\n     *          If some other I/O error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " SeekableByteChannel position(long newPosition) throws IOException",
    "returnType" : "SeekableByteChannel",
    "comment" : "\n     * Sets this channel's position.\n     *\n     * <p> Setting the position to a value that is greater than the current size\n     * is legal but does not change the size of the entity.  A later attempt to\n     * read bytes at such a position will immediately return an end-of-file\n     * indication.  A later attempt to write bytes at such a position will cause\n     * the entity to grow to accommodate the new bytes; the values of any bytes\n     * between the previous end-of-file and the newly-written bytes are\n     * unspecified.\n     *\n     * <p> Setting the channel's position is not recommended when connected to\n     * an entity, typically a file, that is opened with the {@link\n     * java.nio.file.StandardOpenOption#APPEND APPEND} option. When opened for\n     * append, the position is first advanced to the end before writing.\n     *\n     * @param  newPosition\n     *         The new position, a non-negative integer counting\n     *         the number of bytes from the beginning of the entity\n     *\n     * @return  This channel\n     *\n     * @throws  ClosedChannelException\n     *          If this channel is closed\n     * @throws  IllegalArgumentException\n     *          If the new position is negative\n     * @throws  IOException\n     *          If some other I/O error occurs\n     ",
    "links" : [ "java.nio.file.StandardOpenOption#APPEND" ]
  }, {
    "name" : " long size() throws IOException",
    "returnType" : "long",
    "comment" : "\n     * Returns the current size of entity to which this channel is connected.\n     *\n     * @return  The current size, measured in bytes\n     *\n     * @throws  ClosedChannelException\n     *          If this channel is closed\n     * @throws  IOException\n     *          If some other I/O error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " SeekableByteChannel truncate(long size) throws IOException",
    "returnType" : "SeekableByteChannel",
    "comment" : "\n     * Truncates the entity, to which this channel is connected, to the given\n     * size.\n     *\n     * <p> If the given size is less than the current size then the entity is\n     * truncated, discarding any bytes beyond the new end. If the given size is\n     * greater than or equal to the current size then the entity is not modified.\n     * In either case, if the current position is greater than the given size\n     * then it is set to that size.\n     *\n     * <p> An implementation of this interface may prohibit truncation when\n     * connected to an entity, typically a file, opened with the {@link\n     * java.nio.file.StandardOpenOption#APPEND APPEND} option.\n     *\n     * @param  size\n     *         The new size, a non-negative byte count\n     *\n     * @return  This channel\n     *\n     * @throws  NonWritableChannelException\n     *          If this channel was not opened for writing\n     * @throws  ClosedChannelException\n     *          If this channel is closed\n     * @throws  IllegalArgumentException\n     *          If the new size is negative\n     * @throws  IOException\n     *          If some other I/O error occurs\n     ",
    "links" : [ "java.nio.file.StandardOpenOption#APPEND" ]
  } ],
  "methodNames" : [ " int read(ByteBuffer dst) throws IOException", " int write(ByteBuffer src) throws IOException", " long position() throws IOException", " SeekableByteChannel position(long newPosition) throws IOException", " long size() throws IOException", " SeekableByteChannel truncate(long size) throws IOException" ],
  "variableNames" : [ ]
}