{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/text/style/TypefaceSpan.java",
  "packageName" : "android.text.style",
  "className" : "TypefaceSpan",
  "comment" : "\n * Span that updates the typeface of the text it's attached to. The <code>TypefaceSpan</code> can\n * be constructed either based on a font family or based on a <code>Typeface</code>. When\n * {@link #TypefaceSpan(String)} is used, the previous style of the <code>TextView</code> is kept.\n * When {@link #TypefaceSpan(Typeface)} is used, the <code>Typeface</code> style replaces the\n * <code>TextView</code>'s style.\n * <p>\n * For example, let's consider a <code>TextView</code> with\n * <code>android:textStyle=\"italic\"</code> and a typeface created based on a font from resources,\n * with a bold style. When applying a <code>TypefaceSpan</code> based the typeface, the text will\n * only keep the bold style, overriding the <code>TextView</code>'s textStyle. When applying a\n * <code>TypefaceSpan</code> based on a font family: \"monospace\", the resulted text will keep the\n * italic style.\n * <pre>\n * Typeface myTypeface = Typeface.create(ResourcesCompat.getFont(context, R.font.acme),\n * Typeface.BOLD);\n * SpannableString string = new SpannableString(\"Text with typeface span.\");\n * string.setSpan(new TypefaceSpan(myTypeface), 10, 18, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);\n * string.setSpan(new TypefaceSpan(\"monospace\"), 19, 22, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);\n * </pre>\n * <img src=\"{@docRoot}reference/android/images/text/style/typefacespan.png\" />\n * <figcaption>Text with <code>TypefaceSpan</code>s constructed based on a font from resource and\n * from a font family.</figcaption>\n ",
  "variables" : [ {
    "name" : "mFamily",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTypeface",
    "type" : "Typeface",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getSpanTypeId()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getSpanTypeIdInternal()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcelInternal(@NonNull Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public String getFamily()",
    "returnType" : "String",
    "comment" : "\n     * Returns the font family name set in the span.\n     *\n     * @return the font family name\n     * @see #TypefaceSpan(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Typeface getTypeface()",
    "returnType" : "Typeface",
    "comment" : "\n     * Returns the typeface set in the span.\n     *\n     * @return the typeface set\n     * @see #TypefaceSpan(Typeface)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void updateDrawState(@NonNull TextPaint ds)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void updateMeasureState(@NonNull TextPaint paint)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateTypeface(@NonNull Paint paint)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void applyFontFamily(@NonNull Paint paint, @NonNull String family)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "mFamily", "mTypeface" ],
  "methodNames" : [ "public int getSpanTypeId()", "public int getSpanTypeIdInternal()", "public int describeContents()", "public void writeToParcel(@NonNull Parcel dest, int flags)", "public void writeToParcelInternal(@NonNull Parcel dest, int flags)", "public String getFamily()", "public Typeface getTypeface()", "public void updateDrawState(@NonNull TextPaint ds)", "public void updateMeasureState(@NonNull TextPaint paint)", "private void updateTypeface(@NonNull Paint paint)", "private void applyFontFamily(@NonNull Paint paint, @NonNull String family)" ]
}