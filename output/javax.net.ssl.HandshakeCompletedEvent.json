{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/javax/net/ssl/HandshakeCompletedEvent.java",
  "packageName" : "javax.net.ssl",
  "className" : "HandshakeCompletedEvent",
  "comment" : "\n * This event indicates that an SSL handshake completed on a given\n * SSL connection.  All of the core information about that handshake's\n * result is captured through an \"SSLSession\" object.  As a convenience,\n * this event class provides direct access to some important session\n * attributes.\n *\n * <P> The source of this event is the SSLSocket on which handshaking\n * just completed.\n *\n * @see SSLSocket\n * @see HandshakeCompletedListener\n * @see SSLSession\n *\n * @since 1.4\n * @author David Brownell\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "session",
    "type" : "SSLSession",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public SSLSession getSession()",
    "returnType" : "SSLSession",
    "comment" : "\n     * Returns the session that triggered this event.\n     *\n     * @return the <code>SSLSession</code> for this handshake\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getCipherSuite()",
    "returnType" : "String",
    "comment" : "\n     * Returns the cipher suite in use by the session which was produced\n     * by the handshake.  (This is a convenience method for\n     * getting the ciphersuite from the SSLsession.)\n     *\n     * @return the name of the cipher suite negotiated during this session.\n     ",
    "links" : [ ]
  }, {
    "name" : "public java.security.cert.Certificate[] getLocalCertificates()",
    "returnType" : "java.security.cert.Certificate[]",
    "comment" : "\n     * Returns the certificate(s) that were sent to the peer during\n     * handshaking.\n     * Note: This method is useful only when using certificate-based\n     * cipher suites.\n     *\n     * When multiple certificates are available for use in a\n     * handshake, the implementation chooses what it considers the\n     * \"best\" certificate chain available, and transmits that to\n     * the other side.  This method allows the caller to know\n     * which certificate chain was actually used.\n     *\n     * @return an ordered array of certificates, with the local\n     *          certificate first followed by any\n     *          certificate authorities.  If no certificates were sent,\n     *          then null is returned.\n     * @see #getLocalPrincipal()\n     ",
    "links" : [ ]
  }, {
    "name" : "public java.security.cert.Certificate[] getPeerCertificates() throws SSLPeerUnverifiedException",
    "returnType" : "java.security.cert.Certificate[]",
    "comment" : "\n     * Returns the identity of the peer which was established as part\n     * of defining the session.\n     * Note: This method can be used only when using certificate-based\n     * cipher suites; using it with non-certificate-based cipher suites,\n     * such as Kerberos, will throw an SSLPeerUnverifiedException.\n     *\n     * @return an ordered array of the peer certificates,\n     *          with the peer's own certificate first followed by\n     *          any certificate authorities.\n     * @exception SSLPeerUnverifiedException if the peer is not verified.\n     * @see #getPeerPrincipal()\n     ",
    "links" : [ ]
  }, {
    "name" : "public javax.security.cert.X509Certificate[] getPeerCertificateChain() throws SSLPeerUnverifiedException",
    "returnType" : "javax.security.cert.X509Certificate[]",
    "comment" : "\n     * Returns the identity of the peer which was identified as part\n     * of defining the session.\n     * Note: This method can be used only when using certificate-based\n     * cipher suites; using it with non-certificate-based cipher suites,\n     * such as Kerberos, will throw an SSLPeerUnverifiedException.\n     *\n     * <p><em>Note: this method exists for compatibility with previous\n     * releases. New applications should use\n     * {@link #getPeerCertificates} instead.</em></p>\n     *\n     * @return an ordered array of peer X.509 certificates,\n     *          with the peer's own certificate first followed by any\n     *          certificate authorities.  (The certificates are in\n     *          the original JSSE\n     *          {@link javax.security.cert.X509Certificate} format).\n     * @exception SSLPeerUnverifiedException if the peer is not verified.\n     * @see #getPeerPrincipal()\n     ",
    "links" : [ "#getPeerCertificates", "javax.security.cert.X509Certificate" ]
  }, {
    "name" : "public Principal getPeerPrincipal() throws SSLPeerUnverifiedException",
    "returnType" : "Principal",
    "comment" : "\n     * Returns the identity of the peer which was established as part of\n     * defining the session.\n     *\n     * @return the peer's principal. Returns an X500Principal of the\n     * end-entity certiticate for X509-based cipher suites, and\n     * KerberosPrincipal for Kerberos cipher suites.\n     *\n     * @throws SSLPeerUnverifiedException if the peer's identity has not\n     *          been verified\n     *\n     * @see #getPeerCertificates()\n     * @see #getLocalPrincipal()\n     *\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public Principal getLocalPrincipal()",
    "returnType" : "Principal",
    "comment" : "\n     * Returns the principal that was sent to the peer during handshaking.\n     *\n     * @return the principal sent to the peer. Returns an X500Principal\n     * of the end-entity certificate for X509-based cipher suites, and\n     * KerberosPrincipal for Kerberos cipher suites. If no principal was\n     * sent, then null is returned.\n     *\n     * @see #getLocalCertificates()\n     * @see #getPeerPrincipal()\n     *\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public SSLSocket getSocket()",
    "returnType" : "SSLSocket",
    "comment" : "\n     * Returns the socket which is the source of this event.\n     * (This is a convenience function, to let applications\n     * write code without type casts.)\n     *\n     * @return the socket on which the connection was made.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public SSLSession getSession()", "public String getCipherSuite()", "public java.security.cert.Certificate[] getLocalCertificates()", "public java.security.cert.Certificate[] getPeerCertificates() throws SSLPeerUnverifiedException", "public javax.security.cert.X509Certificate[] getPeerCertificateChain() throws SSLPeerUnverifiedException", "public Principal getPeerPrincipal() throws SSLPeerUnverifiedException", "public Principal getLocalPrincipal()", "public SSLSocket getSocket()" ],
  "variableNames" : [ "serialVersionUID", "session" ]
}