{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/adservices/measurement/MeasurementManager.java",
  "packageName" : "android.adservices.measurement",
  "className" : "MeasurementManager",
  "comment" : " MeasurementManager provides APIs to manage source and trigger registrations. ",
  "links" : [ ],
  "variables" : [ {
    "name" : "MEASUREMENT_SERVICE",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "MEASUREMENT_API_STATE_DISABLED",
    "type" : "int",
    "comment" : "\n     * This state indicates that Measurement APIs are unavailable. Invoking them will result in an\n     * {@link UnsupportedOperationException}.\n     ",
    "links" : [ "UnsupportedOperationException" ]
  }, {
    "name" : "MEASUREMENT_API_STATE_ENABLED",
    "type" : "int",
    "comment" : "\n     * This state indicates that Measurement APIs are enabled.\n     ",
    "links" : [ ]
  }, {
    "name" : "mImpl",
    "type" : "MeasurementCompatibleManager",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static MeasurementManager get(@NonNull Context context)",
    "returnType" : "MeasurementManager",
    "comment" : "\n     * Factory method for creating an instance of MeasurementManager.\n     *\n     * @param context The {@link Context} to use\n     * @return A {@link MeasurementManager} instance\n     ",
    "links" : [ "android.adservices.measurement.MeasurementManager", "android.app.sdksandbox.SandboxedSdkContext" ]
  }, {
    "name" : "public MeasurementManager initialize(@NonNull Context context)",
    "returnType" : "MeasurementManager",
    "comment" : "\n     * Initializes {@link MeasurementManager} with the given {@code context}.\n     *\n     * <p>This method is called by the {@link SandboxedSdkContext} to propagate the correct context.\n     * For more information check the javadoc on the {@link\n     * android.app.sdksandbox.SdkSandboxSystemServiceRegistry}.\n     *\n     * @hide\n     * @see android.app.sdksandbox.SdkSandboxSystemServiceRegistry\n     ",
    "links" : [ "android.adservices.measurement.MeasurementManager", "android.app.sdksandbox.SandboxedSdkContext", "android.app.sdksandbox.SdkSandboxSystemServiceRegistry" ]
  }, {
    "name" : "public void registerSource(@NonNull Uri attributionSource, @Nullable InputEvent inputEvent, @Nullable @CallbackExecutor Executor executor, @Nullable OutcomeReceiver<Object, Exception> callback)",
    "returnType" : "void",
    "comment" : "\n     * Register an attribution source (click or view).\n     *\n     * @param attributionSource the platform issues a request to this URI in order to fetch metadata\n     *     associated with the attribution source. The source metadata is stored on device, making\n     *     it eligible to be matched to future triggers.\n     * @param inputEvent either an {@link InputEvent} object (for a click event) or null (for a view\n     *     event).\n     * @param executor used by callback to dispatch results.\n     * @param callback intended to notify asynchronously the API result.\n     * @throws IllegalArgumentException if the scheme for {@code attributionSource} is not HTTPS\n     ",
    "links" : [ "android.view.InputEvent" ]
  }, {
    "name" : "public void registerSource(@NonNull Uri attributionSource, @Nullable InputEvent inputEvent, @Nullable @CallbackExecutor Executor executor, @Nullable AdServicesOutcomeReceiver<Object, Exception> callback)",
    "returnType" : "void",
    "comment" : "\n     * Register an attribution source (click or view). For use on Android R or lower.\n     *\n     * @param attributionSource the platform issues a request to this URI in order to fetch metadata\n     *     associated with the attribution source. The source metadata is stored on device, making\n     *     it eligible to be matched to future triggers.\n     * @param inputEvent either an {@link InputEvent} object (for a click event) or null (for a view\n     *     event).\n     * @param executor used by callback to dispatch results.\n     * @param callback intended to notify asynchronously the API result.\n     ",
    "links" : [ "android.view.InputEvent" ]
  }, {
    "name" : "public void registerSource(@NonNull SourceRegistrationRequest request, @Nullable @CallbackExecutor Executor executor, @Nullable OutcomeReceiver<Object, Exception> callback)",
    "returnType" : "void",
    "comment" : "\n     * Register attribution sources(click or view) from an app context. This API will not process\n     * any redirects, all registration URLs should be supplied with the request.\n     *\n     * @param request app source registration request\n     * @param executor used by callback to dispatch results\n     * @param callback intended to notify asynchronously the API result\n     ",
    "links" : [ ]
  }, {
    "name" : "public void registerSource(@NonNull SourceRegistrationRequest request, @Nullable @CallbackExecutor Executor executor, @Nullable AdServicesOutcomeReceiver<Object, Exception> callback)",
    "returnType" : "void",
    "comment" : "\n     * Register attribution sources(click or view) from an app context. This API will not process\n     * any redirects, all registration URLs should be supplied with the request. For use on Android\n     * R or lower.\n     *\n     * @param request app source registration request\n     * @param executor used by callback to dispatch results\n     * @param callback intended to notify asynchronously the API result\n     ",
    "links" : [ ]
  }, {
    "name" : "public void registerWebSource(@NonNull WebSourceRegistrationRequest request, @Nullable Executor executor, @Nullable OutcomeReceiver<Object, Exception> callback)",
    "returnType" : "void",
    "comment" : "\n     * Register an attribution source(click or view) from web context. This API will not process any\n     * redirects, all registration URLs should be supplied with the request. At least one of\n     * appDestination or webDestination parameters are required to be provided. If the registration\n     * is successful, {@code callback}'s {@link OutcomeReceiver#onResult} is invoked with null. In\n     * case of failure, a {@link Exception} is sent through {@code callback}'s {@link\n     * OutcomeReceiver#onError}. Both success and failure feedback are executed on the provided\n     * {@link Executor}.\n     *\n     * @param request source registration request\n     * @param executor used by callback to dispatch results.\n     * @param callback intended to notify asynchronously the API result.\n     ",
    "links" : [ "android.adservices.common.AdServicesOutcomeReceiver#onResult", "android.adservices.common.AdServicesOutcomeReceiver#onError", "android.annotation.CallbackExecutor", "Exception" ]
  }, {
    "name" : "public void registerWebSource(@NonNull WebSourceRegistrationRequest request, @Nullable Executor executor, @Nullable AdServicesOutcomeReceiver<Object, Exception> callback)",
    "returnType" : "void",
    "comment" : "\n     * Register an attribution source(click or view) from web context. This API will not process any\n     * redirects, all registration URLs should be supplied with the request. At least one of\n     * appDestination or webDestination parameters are required to be provided. If the registration\n     * is successful, {@code callback}'s {@link OutcomeReceiver#onResult} is invoked with null. In\n     * case of failure, a {@link Exception} is sent through {@code callback}'s {@link\n     * OutcomeReceiver#onError}. Both success and failure feedback are executed on the provided\n     * {@link Executor}.\n     *\n     * <p>For use on Android R or lower.\n     *\n     * @param request source registration request\n     * @param executor used by callback to dispatch results.\n     * @param callback intended to notify asynchronously the API result.\n     ",
    "links" : [ "android.adservices.common.AdServicesOutcomeReceiver#onResult", "android.adservices.common.AdServicesOutcomeReceiver#onError", "android.annotation.CallbackExecutor", "Exception" ]
  }, {
    "name" : "public void registerWebTrigger(@NonNull WebTriggerRegistrationRequest request, @Nullable Executor executor, @Nullable OutcomeReceiver<Object, Exception> callback)",
    "returnType" : "void",
    "comment" : "\n     * Register an attribution trigger(click or view) from web context. This API will not process\n     * any redirects, all registration URLs should be supplied with the request. If the registration\n     * is successful, {@code callback}'s {@link OutcomeReceiver#onResult} is invoked with null. In\n     * case of failure, a {@link Exception} is sent through {@code callback}'s {@link\n     * OutcomeReceiver#onError}. Both success and failure feedback are executed on the provided\n     * {@link Executor}.\n     *\n     * @param request trigger registration request\n     * @param executor used by callback to dispatch results\n     * @param callback intended to notify asynchronously the API result\n     ",
    "links" : [ "android.adservices.common.AdServicesOutcomeReceiver#onResult", "android.adservices.common.AdServicesOutcomeReceiver#onError", "android.annotation.CallbackExecutor", "Exception" ]
  }, {
    "name" : "public void registerWebTrigger(@NonNull WebTriggerRegistrationRequest request, @Nullable Executor executor, @Nullable AdServicesOutcomeReceiver<Object, Exception> callback)",
    "returnType" : "void",
    "comment" : "\n     * Register an attribution trigger(click or view) from web context. This API will not process\n     * any redirects, all registration URLs should be supplied with the request. If the registration\n     * is successful, {@code callback}'s {@link OutcomeReceiver#onResult} is invoked with null. In\n     * case of failure, a {@link Exception} is sent through {@code callback}'s {@link\n     * OutcomeReceiver#onError}. Both success and failure feedback are executed on the provided\n     * {@link Executor}.\n     *\n     * <p>For use on Android R or lower.\n     *\n     * @param request trigger registration request\n     * @param executor used by callback to dispatch results\n     * @param callback intended to notify asynchronously the API result\n     ",
    "links" : [ "android.adservices.common.AdServicesOutcomeReceiver#onResult", "android.adservices.common.AdServicesOutcomeReceiver#onError", "android.annotation.CallbackExecutor", "Exception" ]
  }, {
    "name" : "public void registerTrigger(@NonNull Uri trigger, @Nullable @CallbackExecutor Executor executor, @Nullable OutcomeReceiver<Object, Exception> callback)",
    "returnType" : "void",
    "comment" : "\n     * Register a trigger (conversion).\n     *\n     * @param trigger the API issues a request to this URI to fetch metadata associated with the\n     *     trigger. The trigger metadata is stored on-device, and is eligible to be matched with\n     *     sources during the attribution process.\n     * @param executor used by callback to dispatch results.\n     * @param callback intended to notify asynchronously the API result.\n     * @throws IllegalArgumentException if the scheme for {@code trigger} is not HTTPS\n     ",
    "links" : [ ]
  }, {
    "name" : "public void registerTrigger(@NonNull Uri trigger, @Nullable @CallbackExecutor Executor executor, @Nullable AdServicesOutcomeReceiver<Object, Exception> callback)",
    "returnType" : "void",
    "comment" : "\n     * Register a trigger (conversion). For use on Android R or lower.\n     *\n     * @param trigger the API issues a request to this URI to fetch metadata associated with the\n     *     trigger. The trigger metadata is stored on-device, and is eligible to be matched with\n     *     sources during the attribution process.\n     * @param executor used by callback to dispatch results.\n     * @param callback intended to notify asynchronously the API result.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void deleteRegistrations(@NonNull DeletionRequest deletionRequest, @NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<Object, Exception> callback)",
    "returnType" : "void",
    "comment" : "\n     * Delete previous registrations. If the deletion is successful, the callback's {@link\n     * OutcomeReceiver#onResult} is invoked with null. In case of failure, a {@link Exception} is\n     * sent through the callback's {@link OutcomeReceiver#onError}. Both success and failure\n     * feedback are executed on the provided {@link Executor}.\n     *\n     * @param deletionRequest The request for deleting data.\n     * @param executor The executor to run callback.\n     * @param callback intended to notify asynchronously the API result.\n     ",
    "links" : [ "android.adservices.common.AdServicesOutcomeReceiver#onResult", "android.adservices.common.AdServicesOutcomeReceiver#onError", "android.annotation.CallbackExecutor", "Exception" ]
  }, {
    "name" : "public void deleteRegistrations(@NonNull DeletionRequest deletionRequest, @NonNull @CallbackExecutor Executor executor, @NonNull AdServicesOutcomeReceiver<Object, Exception> callback)",
    "returnType" : "void",
    "comment" : "\n     * Delete previous registrations. If the deletion is successful, the callback's {@link\n     * OutcomeReceiver#onResult} is invoked with null. In case of failure, a {@link Exception} is\n     * sent through the callback's {@link OutcomeReceiver#onError}. Both success and failure\n     * feedback are executed on the provided {@link Executor}.\n     *\n     * <p>For use on Android R or lower.\n     *\n     * @param deletionRequest The request for deleting data.\n     * @param executor The executor to run callback.\n     * @param callback intended to notify asynchronously the API result.\n     ",
    "links" : [ "android.adservices.common.AdServicesOutcomeReceiver#onResult", "android.adservices.common.AdServicesOutcomeReceiver#onError", "android.annotation.CallbackExecutor", "Exception" ]
  }, {
    "name" : "public void getMeasurementApiStatus(@NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<Integer, Exception> callback)",
    "returnType" : "void",
    "comment" : "\n     * Get Measurement API status.\n     *\n     * <p>The callback's {@code Integer} value is one of {@code MeasurementApiState}.\n     *\n     * @param executor used by callback to dispatch results.\n     * @param callback intended to notify asynchronously the API result.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void getMeasurementApiStatus(@NonNull @CallbackExecutor Executor executor, @NonNull AdServicesOutcomeReceiver<Integer, Exception> callback)",
    "returnType" : "void",
    "comment" : "\n     * Get Measurement API status.\n     *\n     * <p>The callback's {@code Integer} value is one of {@code MeasurementApiState}.\n     *\n     * <p>For use on Android R or lower.\n     *\n     * @param executor used by callback to dispatch results.\n     * @param callback intended to notify asynchronously the API result.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void unbindFromService()",
    "returnType" : "void",
    "comment" : "\n     * If the service is in an APK (as opposed to the system service), unbind it from the service to\n     * allow the APK process to die.\n     *\n     * @hide Not sure if we'll need this functionality in the final API. For now, we need it for\n     *     performance testing to simulate \"cold-start\" situations.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static MeasurementManager get(@NonNull Context context)", "public MeasurementManager initialize(@NonNull Context context)", "public void registerSource(@NonNull Uri attributionSource, @Nullable InputEvent inputEvent, @Nullable @CallbackExecutor Executor executor, @Nullable OutcomeReceiver<Object, Exception> callback)", "public void registerSource(@NonNull Uri attributionSource, @Nullable InputEvent inputEvent, @Nullable @CallbackExecutor Executor executor, @Nullable AdServicesOutcomeReceiver<Object, Exception> callback)", "public void registerSource(@NonNull SourceRegistrationRequest request, @Nullable @CallbackExecutor Executor executor, @Nullable OutcomeReceiver<Object, Exception> callback)", "public void registerSource(@NonNull SourceRegistrationRequest request, @Nullable @CallbackExecutor Executor executor, @Nullable AdServicesOutcomeReceiver<Object, Exception> callback)", "public void registerWebSource(@NonNull WebSourceRegistrationRequest request, @Nullable Executor executor, @Nullable OutcomeReceiver<Object, Exception> callback)", "public void registerWebSource(@NonNull WebSourceRegistrationRequest request, @Nullable Executor executor, @Nullable AdServicesOutcomeReceiver<Object, Exception> callback)", "public void registerWebTrigger(@NonNull WebTriggerRegistrationRequest request, @Nullable Executor executor, @Nullable OutcomeReceiver<Object, Exception> callback)", "public void registerWebTrigger(@NonNull WebTriggerRegistrationRequest request, @Nullable Executor executor, @Nullable AdServicesOutcomeReceiver<Object, Exception> callback)", "public void registerTrigger(@NonNull Uri trigger, @Nullable @CallbackExecutor Executor executor, @Nullable OutcomeReceiver<Object, Exception> callback)", "public void registerTrigger(@NonNull Uri trigger, @Nullable @CallbackExecutor Executor executor, @Nullable AdServicesOutcomeReceiver<Object, Exception> callback)", "public void deleteRegistrations(@NonNull DeletionRequest deletionRequest, @NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<Object, Exception> callback)", "public void deleteRegistrations(@NonNull DeletionRequest deletionRequest, @NonNull @CallbackExecutor Executor executor, @NonNull AdServicesOutcomeReceiver<Object, Exception> callback)", "public void getMeasurementApiStatus(@NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<Integer, Exception> callback)", "public void getMeasurementApiStatus(@NonNull @CallbackExecutor Executor executor, @NonNull AdServicesOutcomeReceiver<Integer, Exception> callback)", "public void unbindFromService()" ],
  "variableNames" : [ "MEASUREMENT_SERVICE", "MEASUREMENT_API_STATE_DISABLED", "MEASUREMENT_API_STATE_ENABLED", "mImpl" ]
}