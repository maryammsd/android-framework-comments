{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/logging/MemoryHandler.java",
  "packageName" : "java.util.logging",
  "className" : "MemoryHandler",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "DEFAULT_SIZE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "pushLevel",
    "type" : "Level",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "size",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "target",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "buffer",
    "type" : "LogRecord[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "start",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "count",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void configure()",
    "returnType" : "void",
    "comment" : " javadoc.",
    "links" : [ ]
  }, {
    "name" : "private void init()",
    "returnType" : "void",
    "comment" : " Initialize.  Size is a count of LogRecords.",
    "links" : [ ]
  }, {
    "name" : "public synchronized void publish(LogRecord record)",
    "returnType" : "void",
    "comment" : "\n     * Store a <tt>LogRecord</tt> in an internal buffer.\n     * <p>\n     * If there is a <tt>Filter</tt>, its <tt>isLoggable</tt>\n     * method is called to check if the given log record is loggable.\n     * If not we return.  Otherwise the given record is copied into\n     * an internal circular buffer.  Then the record's level property is\n     * compared with the <tt>pushLevel</tt>. If the given level is\n     * greater than or equal to the <tt>pushLevel</tt> then <tt>push</tt>\n     * is called to write all buffered records to the target output\n     * <tt>Handler</tt>.\n     *\n     * @param  record  description of the log event. A null record is\n     *                 silently ignored and is not published\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void push()",
    "returnType" : "void",
    "comment" : "\n     * Push any buffered output to the target <tt>Handler</tt>.\n     * <p>\n     * The buffer is then cleared.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void flush()",
    "returnType" : "void",
    "comment" : "\n     * Causes a flush on the target <tt>Handler</tt>.\n     * <p>\n     * Note that the current contents of the <tt>MemoryHandler</tt>\n     * buffer are <b>not</b> written out.  That requires a \"push\".\n     ",
    "links" : [ ]
  }, {
    "name" : "public void close() throws SecurityException",
    "returnType" : "void",
    "comment" : "\n     * Close the <tt>Handler</tt> and free all associated resources.\n     * This will also close the target <tt>Handler</tt>.\n     *\n     * @exception  SecurityException  if a security manager exists and if\n     *             the caller does not have <tt>LoggingPermission(\"control\")</tt>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void setPushLevel(Level newLevel) throws SecurityException",
    "returnType" : "void",
    "comment" : "\n     * Set the <tt>pushLevel</tt>.  After a <tt>LogRecord</tt> is copied\n     * into our internal buffer, if its level is greater than or equal to\n     * the <tt>pushLevel</tt>, then <tt>push</tt> will be called.\n     *\n     * @param newLevel the new value of the <tt>pushLevel</tt>\n     * @exception  SecurityException  if a security manager exists and if\n     *             the caller does not have <tt>LoggingPermission(\"control\")</tt>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Level getPushLevel()",
    "returnType" : "Level",
    "comment" : "\n     * Get the <tt>pushLevel</tt>.\n     *\n     * @return the value of the <tt>pushLevel</tt>\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isLoggable(LogRecord record)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if this <tt>Handler</tt> would actually log a given\n     * <tt>LogRecord</tt> into its internal buffer.\n     * <p>\n     * This method checks if the <tt>LogRecord</tt> has an appropriate level and\n     * whether it satisfies any <tt>Filter</tt>.  However it does <b>not</b>\n     * check whether the <tt>LogRecord</tt> would result in a \"push\" of the\n     * buffer contents. It will return false if the <tt>LogRecord</tt> is null.\n     * <p>\n     * @param record  a <tt>LogRecord</tt>\n     * @return true if the <tt>LogRecord</tt> would be logged.\n     *\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void configure()", "private void init()", "public synchronized void publish(LogRecord record)", "public synchronized void push()", "public void flush()", "public void close() throws SecurityException", "public synchronized void setPushLevel(Level newLevel) throws SecurityException", "public Level getPushLevel()", "public boolean isLoggable(LogRecord record)" ],
  "variableNames" : [ "DEFAULT_SIZE", "pushLevel", "size", "target", "buffer", "start", "count" ]
}