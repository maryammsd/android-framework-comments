{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/appsearch/SearchSpec.java",
  "packageName" : "android.app.appsearch",
  "className" : "Builder",
  "comment" : " Builder for {@link SearchSpec objects}. ",
  "links" : [ "android.app.appsearch.SearchSpec" ],
  "variables" : [ {
    "name" : "mSchemas",
    "type" : "ArrayList<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNamespaces",
    "type" : "ArrayList<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTypePropertyFilters",
    "type" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPackageNames",
    "type" : "ArrayList<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEnabledFeatures",
    "type" : "ArraySet<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProjectionTypePropertyMasks",
    "type" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTypePropertyWeights",
    "type" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mResultCountPerPage",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTermMatchType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSnippetCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSnippetCountPerProperty",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaxSnippetSize",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRankingStrategy",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOrder",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGroupingTypeFlags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGroupingLimit",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mJoinSpec",
    "type" : "JoinSpec",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAdvancedRankingExpression",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSearchSourceLogTag",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBuilt",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Builder setTermMatch(@TermMatch int termMatchType)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets how the query terms should match {@code TermMatchCode} in the index.\n         *\n         * <p>If this method is not called, the default term match type is {@link\n         * SearchSpec#TERM_MATCH_PREFIX}.\n         ",
    "links" : [ "android.app.appsearch.SearchSpec#TERM_MATCH_PREFIX" ]
  }, {
    "name" : "public Builder addFilterSchemas(@NonNull String... schemas)",
    "returnType" : "Builder",
    "comment" : "\n         * Adds a Schema type filter to {@link SearchSpec} Entry. Only search for documents that\n         * have the specified schema types.\n         *\n         * <p>If unset, the query will search over all schema types.\n         ",
    "links" : [ "android.app.appsearch.SearchSpec" ]
  }, {
    "name" : "public Builder addFilterSchemas(@NonNull Collection<String> schemas)",
    "returnType" : "Builder",
    "comment" : "\n         * Adds a Schema type filter to {@link SearchSpec} Entry. Only search for documents that\n         * have the specified schema types.\n         *\n         * <p>If unset, the query will search over all schema types.\n         ",
    "links" : [ "android.app.appsearch.SearchSpec" ]
  }, {
    "name" : "public Builder addFilterProperties(@NonNull String schema, @NonNull Collection<String> propertyPaths)",
    "returnType" : "Builder",
    "comment" : "\n         * Adds property paths for the specified type to the property filter of {@link SearchSpec}\n         * Entry. Only returns documents that have matches under the specified properties. If\n         * property paths are added for a type, then only the properties referred to will be\n         * searched for results of that type.\n         *\n         * <p>If a property path that is specified isn't present in a result, it will be ignored for\n         * that result. Property paths cannot be null.\n         *\n         * <p>If no property paths are added for a particular type, then all properties of results\n         * of that type will be searched.\n         *\n         * <p>Example properties: 'body', 'sender.name', 'sender.emailaddress', etc.\n         *\n         * <p>If property paths are added for the {@link SearchSpec#SCHEMA_TYPE_WILDCARD}, then\n         * those property paths will apply to all results, excepting any types that have their own,\n         * specific property paths set.\n         *\n         * @param schema the {@link AppSearchSchema} that contains the target properties\n         * @param propertyPaths The String version of {@link PropertyPath}. A dot-delimited sequence\n         *     of property names.\n         ",
    "links" : [ "android.app.appsearch.PropertyPath", "android.app.appsearch.AppSearchSchema", "android.app.appsearch.SearchSpec#SCHEMA_TYPE_WILDCARD", "android.app.appsearch.SearchSpec" ]
  }, {
    "name" : "public Builder addFilterPropertyPaths(@NonNull String schema, @NonNull Collection<PropertyPath> propertyPaths)",
    "returnType" : "Builder",
    "comment" : "\n         * Adds property paths for the specified type to the property filter of {@link SearchSpec}\n         * Entry. Only returns documents that have matches under the specified properties. If\n         * property paths are added for a type, then only the properties referred to will be\n         * searched for results of that type.\n         *\n         * @see #addFilterProperties(String, Collection)\n         * @param schema the {@link AppSearchSchema} that contains the target properties\n         * @param propertyPaths The {@link PropertyPath} to search search over\n         ",
    "links" : [ "android.app.appsearch.PropertyPath", "android.app.appsearch.AppSearchSchema", "android.app.appsearch.SearchSpec" ]
  }, {
    "name" : "public Builder addFilterNamespaces(@NonNull String... namespaces)",
    "returnType" : "Builder",
    "comment" : "\n         * Adds a namespace filter to {@link SearchSpec} Entry. Only search for documents that have\n         * the specified namespaces.\n         *\n         * <p>If unset, the query will search over all namespaces.\n         ",
    "links" : [ "android.app.appsearch.SearchSpec" ]
  }, {
    "name" : "public Builder addFilterNamespaces(@NonNull Collection<String> namespaces)",
    "returnType" : "Builder",
    "comment" : "\n         * Adds a namespace filter to {@link SearchSpec} Entry. Only search for documents that have\n         * the specified namespaces.\n         *\n         * <p>If unset, the query will search over all namespaces.\n         ",
    "links" : [ "android.app.appsearch.SearchSpec" ]
  }, {
    "name" : "public Builder addFilterPackageNames(@NonNull String... packageNames)",
    "returnType" : "Builder",
    "comment" : "\n         * Adds a package name filter to {@link SearchSpec} Entry. Only search for documents that\n         * were indexed from the specified packages.\n         *\n         * <p>If unset, the query will search over all packages that the caller has access to. If\n         * package names are specified which caller doesn't have access to, then those package names\n         * will be ignored.\n         ",
    "links" : [ "android.app.appsearch.SearchSpec" ]
  }, {
    "name" : "public Builder addFilterPackageNames(@NonNull Collection<String> packageNames)",
    "returnType" : "Builder",
    "comment" : "\n         * Adds a package name filter to {@link SearchSpec} Entry. Only search for documents that\n         * were indexed from the specified packages.\n         *\n         * <p>If unset, the query will search over all packages that the caller has access to. If\n         * package names are specified which caller doesn't have access to, then those package names\n         * will be ignored.\n         ",
    "links" : [ "android.app.appsearch.SearchSpec" ]
  }, {
    "name" : "public SearchSpec.Builder setResultCountPerPage(@IntRange(from = 0, to = MAX_NUM_PER_PAGE) int resultCountPerPage)",
    "returnType" : "SearchSpec.Builder",
    "comment" : "\n         * Sets the number of results per page in the returned object.\n         *\n         * <p>The default number of results per page is 10.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setRankingStrategy(@RankingStrategy int rankingStrategy)",
    "returnType" : "Builder",
    "comment" : " Sets ranking strategy for AppSearch results. ",
    "links" : [ ]
  }, {
    "name" : "public Builder setRankingStrategy(@NonNull String advancedRankingExpression)",
    "returnType" : "Builder",
    "comment" : "\n         * Enables advanced ranking to score based on {@code advancedRankingExpression}.\n         *\n         * <p>This method will set RankingStrategy to {@link\n         * #RANKING_STRATEGY_ADVANCED_RANKING_EXPRESSION}.\n         *\n         * <p>The ranking expression is a mathematical expression that will be evaluated to a\n         * floating-point number of double type representing the score of each document.\n         *\n         * <p>Numeric literals, arithmetic operators, mathematical functions, and document-based\n         * functions are supported to build expressions.\n         *\n         * <p>The following are supported arithmetic operators:\n         *\n         * <ul>\n         *   <li>Addition(+)\n         *   <li>Subtraction(-)\n         *   <li>Multiplication(*)\n         *   <li>Floating Point Division(/)\n         * </ul>\n         *\n         * <p>Operator precedences are compliant with the Java Language, and parentheses are\n         * supported. For example, \"2.2 + (3 - 4) / 2\" evaluates to 1.7.\n         *\n         * <p>The following are supported basic mathematical functions:\n         *\n         * <ul>\n         *   <li>log(x) - the natural log of x\n         *   <li>log(x, y) - the log of y with base x\n         *   <li>pow(x, y) - x to the power of y\n         *   <li>sqrt(x)\n         *   <li>abs(x)\n         *   <li>sin(x), cos(x), tan(x)\n         *   <li>Example: \"max(abs(-100), 10) + pow(2, 10)\" will be evaluated to 1124\n         * </ul>\n         *\n         * <p>The following variadic mathematical functions are supported, with n > 0. They also\n         * accept list value parameters. For example, if V is a value of list type, we can call\n         * sum(V) to get the sum of all the values in V. List literals are not supported, so a value\n         * of list type can only be constructed as a return value of some particular document-based\n         * functions.\n         *\n         * <ul>\n         *   <li>max(v1, v2, ..., vn) or max(V)\n         *   <li>min(v1, v2, ..., vn) or min(V)\n         *   <li>len(v1, v2, ..., vn) or len(V)\n         *   <li>sum(v1, v2, ..., vn) or sum(V)\n         *   <li>avg(v1, v2, ..., vn) or avg(V)\n         * </ul>\n         *\n         * <p>Document-based functions must be called via \"this\", which represents the current\n         * document being scored. The following are supported document-based functions:\n         *\n         * <ul>\n         *   <li>this.documentScore()\n         *       <p>Get the app-provided document score of the current document. This is the same\n         *       score that is returned for {@link #RANKING_STRATEGY_DOCUMENT_SCORE}.\n         *   <li>this.creationTimestamp()\n         *       <p>Get the creation timestamp of the current document. This is the same score that\n         *       is returned for {@link #RANKING_STRATEGY_CREATION_TIMESTAMP}.\n         *   <li>this.relevanceScore()\n         *       <p>Get the BM25F relevance score of the current document in relation to the query\n         *       string. This is the same score that is returned for {@link\n         *       #RANKING_STRATEGY_RELEVANCE_SCORE}.\n         *   <li>this.usageCount(type) and this.usageLastUsedTimestamp(type)\n         *       <p>Get the number of usages or the timestamp of last usage by type for the current\n         *       document, where type must be evaluated to an integer from 1 to 2. Type 1 refers to\n         *       usages reported by {@link AppSearchSession#reportUsage}, and type 2 refers to\n         *       usages reported by {@link GlobalSearchSession#reportSystemUsage}.\n         *   <li>this.childrenRankingSignals()\n         *       <p>Returns a list of children ranking signals calculated by scoring the joined\n         *       documents using the ranking strategy specified in the nested {@link SearchSpec}.\n         *       Currently, a document can only be a child of another document in the context of\n         *       joins. If this function is called without the Join API enabled, a type error will\n         *       be raised.\n         *   <li>this.propertyWeights()\n         *       <p>Returns a list of the normalized weights of the matched properties for the\n         *       current document being scored. Property weights come from what's specified in\n         *       {@link SearchSpec}. After normalizing, each provided weight will be divided by the\n         *       maximum weight, so that each of them will be <= 1.\n         * </ul>\n         *\n         * <p>Some errors may occur when using advanced ranking.\n         *\n         * <p>Syntax Error: the expression violates the syntax of the advanced ranking language.\n         * Below are some examples.\n         *\n         * <ul>\n         *   <li>\"1 + \" - missing operand\n         *   <li>\"2 * (1 + 2))\" - unbalanced parenthesis\n         *   <li>\"2 ^ 3\" - unknown operator\n         * </ul>\n         *\n         * <p>Type Error: the expression fails a static type check. Below are some examples.\n         *\n         * <ul>\n         *   <li>\"sin(2, 3)\" - wrong number of arguments for the sin function\n         *   <li>\"this.childrenRankingSignals() + 1\" - cannot add a list with a number\n         *   <li>\"this.propertyWeights()\" - the final type of the overall expression cannot be a\n         *       list, which can be fixed by \"max(this.propertyWeights())\"\n         *   <li>\"abs(this.propertyWeights())\" - the abs function does not support list type\n         *       arguments\n         *   <li>\"print(2)\" - unknown function\n         * </ul>\n         *\n         * <p>Evaluation Error: an error occurred while evaluating the value of the expression.\n         * Below are some examples.\n         *\n         * <ul>\n         *   <li>\"1 / 0\", \"log(0)\", \"1 + sqrt(-1)\" - getting a non-finite value in the middle of\n         *       evaluation\n         *   <li>\"this.usageCount(1 + 0.5)\" - expect the argument to be an integer. Note that this\n         *       is not a type error and \"this.usageCount(1.5 + 1/2)\" can succeed without any issues\n         *   <li>\"this.documentScore()\" - in case of an IO error, this will be an evaluation error\n         * </ul>\n         *\n         * <p>Syntax errors and type errors will fail the entire search and will cause {@link\n         * SearchResults#getNextPage} to throw an {@link AppSearchException} with the result code of\n         * {@link AppSearchResult#RESULT_INVALID_ARGUMENT}.\n         *\n         * <p>Evaluation errors will result in the offending documents receiving the default score.\n         * For {@link #ORDER_DESCENDING}, the default score will be 0, for {@link #ORDER_ASCENDING}\n         * the default score will be infinity.\n         *\n         * @param advancedRankingExpression a non-empty string representing the ranking expression.\n         ",
    "links" : [ "#RANKING_STRATEGY_ADVANCED_RANKING_EXPRESSION", "android.app.appsearch.AppSearchResult#RESULT_INVALID_ARGUMENT", "#RANKING_STRATEGY_DOCUMENT_SCORE", "#ORDER_ASCENDING", "android.app.appsearch.SearchResults#getNextPage", "#ORDER_DESCENDING", "#RANKING_STRATEGY_CREATION_TIMESTAMP", "#RANKING_STRATEGY_RELEVANCE_SCORE", "android.app.appsearch.AppSearchSession#reportUsage", "android.app.appsearch.GlobalSearchSession#reportSystemUsage", "android.app.appsearch.SearchSpec", "android.app.appsearch.exceptions.AppSearchException" ]
  }, {
    "name" : "public Builder setSearchSourceLogTag(@NonNull String searchSourceLogTag)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets an optional log tag to indicate the source of this search.\n         *\n         * <p>Some AppSearch implementations may log a hash of this tag using statsd. This tag may\n         * be used for tracing performance issues and crashes to a component of an app.\n         *\n         * <p>Call this method and give a unique value if you want to distinguish this search\n         * scenario with other search scenarios during performance analysis.\n         *\n         * <p>Under no circumstances will AppSearch log the raw String value using statsd, but it\n         * will be provided as-is to custom {@code AppSearchLogger} implementations you have\n         * registered in your app.\n         *\n         * @param searchSourceLogTag A String to indicate the source caller of this search. It is\n         *     used to label the search statsd for performance analysis. It is not the tag we are\n         *     using in {@link android.util.Log}. The length of the teg should between 1 and 100.\n         ",
    "links" : [ "android.util.Log" ]
  }, {
    "name" : "public Builder setOrder(@Order int order)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the order of returned search results, the default is {@link #ORDER_DESCENDING},\n         * meaning that results with higher scores come first.\n         *\n         * <p>This order field will be ignored if RankingStrategy = {@code RANKING_STRATEGY_NONE}.\n         ",
    "links" : [ "#ORDER_DESCENDING" ]
  }, {
    "name" : "public SearchSpec.Builder setSnippetCount(@IntRange(from = 0, to = MAX_SNIPPET_COUNT) int snippetCount)",
    "returnType" : "SearchSpec.Builder",
    "comment" : "\n         * Sets the {@code snippetCount} such that the first {@code snippetCount} documents based on\n         * the ranking strategy will have snippet information provided.\n         *\n         * <p>The list returned from {@link SearchResult#getMatchInfos} will contain at most this\n         * many entries.\n         *\n         * <p>If set to 0 (default), snippeting is disabled and the list returned from {@link\n         * SearchResult#getMatchInfos} will be empty.\n         ",
    "links" : [ "android.app.appsearch.SearchResult#getMatchInfos" ]
  }, {
    "name" : "public SearchSpec.Builder setSnippetCountPerProperty(@IntRange(from = 0, to = MAX_SNIPPET_PER_PROPERTY_COUNT) int snippetCountPerProperty)",
    "returnType" : "SearchSpec.Builder",
    "comment" : "\n         * Sets {@code snippetCountPerProperty}. Only the first {@code snippetCountPerProperty}\n         * snippets for each property of each {@link GenericDocument} will contain snippet\n         * information.\n         *\n         * <p>If set to 0, snippeting is disabled and the list returned from {@link\n         * SearchResult#getMatchInfos} will be empty.\n         *\n         * <p>The default behavior is to snippet all matches a property contains, up to the maximum\n         * value of 10,000.\n         ",
    "links" : [ "android.app.appsearch.GenericDocument", "android.app.appsearch.SearchResult#getMatchInfos" ]
  }, {
    "name" : "public SearchSpec.Builder setMaxSnippetSize(@IntRange(from = 0, to = MAX_SNIPPET_SIZE_LIMIT) int maxSnippetSize)",
    "returnType" : "SearchSpec.Builder",
    "comment" : "\n         * Sets {@code maxSnippetSize}, the maximum snippet size. Snippet windows start at {@code\n         * maxSnippetSize/2} bytes before the middle of the matching token and end at {@code\n         * maxSnippetSize/2} bytes after the middle of the matching token. It respects token\n         * boundaries, therefore the returned window may be smaller than requested.\n         *\n         * <p>Setting {@code maxSnippetSize} to 0 will disable windowing and an empty String will be\n         * returned. If matches enabled is also set to false, then snippeting is disabled.\n         *\n         * <p>For example, {@code maxSnippetSize} = 16. \"foo bar baz bat rat\" with a query of \"baz\"\n         * will return a window of \"bar baz bat\" which is only 11 bytes long.\n         ",
    "links" : [ ]
  }, {
    "name" : "public SearchSpec.Builder addProjection(@NonNull String schema, @NonNull Collection<String> propertyPaths)",
    "returnType" : "SearchSpec.Builder",
    "comment" : "\n         * Adds property paths for the specified type to be used for projection. If property paths\n         * are added for a type, then only the properties referred to will be retrieved for results\n         * of that type. If a property path that is specified isn't present in a result, it will be\n         * ignored for that result. Property paths cannot be null.\n         *\n         * @see #addProjectionPaths\n         * @param schema a string corresponding to the schema to add projections to.\n         * @param propertyPaths the projections to add.\n         ",
    "links" : [ ]
  }, {
    "name" : "public SearchSpec.Builder addProjectionPaths(@NonNull String schema, @NonNull Collection<PropertyPath> propertyPaths)",
    "returnType" : "SearchSpec.Builder",
    "comment" : "\n         * Adds property paths for the specified type to be used for projection. If property paths\n         * are added for a type, then only the properties referred to will be retrieved for results\n         * of that type. If a property path that is specified isn't present in a result, it will be\n         * ignored for that result. Property paths cannot be null.\n         *\n         * <p>If no property paths are added for a particular type, then all properties of results\n         * of that type will be retrieved.\n         *\n         * <p>If property path is added for the {@link SearchSpec#SCHEMA_TYPE_WILDCARD}, then those\n         * property paths will apply to all results, excepting any types that have their own,\n         * specific property paths set.\n         *\n         * <p>Suppose the following document is in the index.\n         *\n         * <pre>{@code\n         * Email: Document {\n         *   sender: Document {\n         *     name: \"Mr. Person\"\n         *     email: \"mrperson123@google.com\"\n         *   }\n         *   recipients: [\n         *     Document {\n         *       name: \"John Doe\"\n         *       email: \"johndoe123@google.com\"\n         *     }\n         *     Document {\n         *       name: \"Jane Doe\"\n         *       email: \"janedoe123@google.com\"\n         *     }\n         *   ]\n         *   subject: \"IMPORTANT\"\n         *   body: \"Limited time offer!\"\n         * }\n         * }</pre>\n         *\n         * <p>Then, suppose that a query for \"important\" is issued with the following projection\n         * type property paths:\n         *\n         * <pre>{@code\n         * {schema: \"Email\", [\"subject\", \"sender.name\", \"recipients.name\"]}\n         * }</pre>\n         *\n         * <p>The above document will be returned as:\n         *\n         * <pre>{@code\n         * Email: Document {\n         *   sender: Document {\n         *     name: \"Mr. Body\"\n         *   }\n         *   recipients: [\n         *     Document {\n         *       name: \"John Doe\"\n         *     }\n         *     Document {\n         *       name: \"Jane Doe\"\n         *     }\n         *   ]\n         *   subject: \"IMPORTANT\"\n         * }\n         * }</pre>\n         *\n         * @param schema a string corresponding to the schema to add projections to.\n         * @param propertyPaths the projections to add.\n         ",
    "links" : [ "android.app.appsearch.SearchSpec#SCHEMA_TYPE_WILDCARD" ]
  }, {
    "name" : "public Builder setResultGrouping(@GroupingType int groupingTypeFlags, int limit)",
    "returnType" : "Builder",
    "comment" : " getResultGroupingLimit",
    "links" : [ ]
  }, {
    "name" : "public SearchSpec.Builder setPropertyWeights(@NonNull String schemaType, @NonNull Map<String, Double> propertyPathWeights)",
    "returnType" : "SearchSpec.Builder",
    "comment" : "\n         * Sets property weights by schema type and property path.\n         *\n         * <p>Property weights are used to promote and demote query term matches within a {@link\n         * GenericDocument} property when applying scoring.\n         *\n         * <p>Property weights must be positive values (greater than 0). A property's weight is\n         * multiplied with that property's scoring contribution. This means weights set between 0.0\n         * and 1.0 demote scoring contributions by a term match within the property. Weights set\n         * above 1.0 promote scoring contributions by a term match within the property.\n         *\n         * <p>Properties that exist in the {@link AppSearchSchema}, but do not have a weight\n         * explicitly set will be given a default weight of 1.0.\n         *\n         * <p>Weights set for property paths that do not exist in the {@link AppSearchSchema} will\n         * be discarded and not affect scoring.\n         *\n         * <p><b>NOTE:</b> Property weights only affect scoring for query-dependent scoring\n         * strategies, such as {@link #RANKING_STRATEGY_RELEVANCE_SCORE}.\n         *\n         * @param schemaType the schema type to set property weights for.\n         * @param propertyPathWeights a {@link Map} of property paths of the schema type to the\n         *     weight to set for that property.\n         * @throws IllegalArgumentException if a weight is equal to or less than 0.0.\n         ",
    "links" : [ "android.app.appsearch.AppSearchSchema", "android.app.appsearch.GenericDocument", "#RANKING_STRATEGY_RELEVANCE_SCORE", "android.util.ArrayMap" ]
  }, {
    "name" : "public Builder setJoinSpec(@NonNull JoinSpec joinSpec)",
    "returnType" : "Builder",
    "comment" : "\n         * Specifies which documents to join with, and how to join.\n         *\n         * <p>If the ranking strategy is {@link #RANKING_STRATEGY_JOIN_AGGREGATE_SCORE}, and the\n         * JoinSpec is null, {@link #build} will throw an {@link AppSearchException}.\n         *\n         * @param joinSpec a specification on how to perform the Join operation.\n         ",
    "links" : [ "#RANKING_STRATEGY_JOIN_AGGREGATE_SCORE", "#build", "android.app.appsearch.exceptions.AppSearchException" ]
  }, {
    "name" : "public SearchSpec.Builder setPropertyWeightPaths(@NonNull String schemaType, @NonNull Map<PropertyPath, Double> propertyPathWeights)",
    "returnType" : "SearchSpec.Builder",
    "comment" : "\n         * Sets property weights by schema type and property path.\n         *\n         * <p>Property weights are used to promote and demote query term matches within a {@link\n         * GenericDocument} property when applying scoring.\n         *\n         * <p>Property weights must be positive values (greater than 0). A property's weight is\n         * multiplied with that property's scoring contribution. This means weights set between 0.0\n         * and 1.0 demote scoring contributions by a term match within the property. Weights set\n         * above 1.0 promote scoring contributions by a term match within the property.\n         *\n         * <p>Properties that exist in the {@link AppSearchSchema}, but do not have a weight\n         * explicitly set will be given a default weight of 1.0.\n         *\n         * <p>Weights set for property paths that do not exist in the {@link AppSearchSchema} will\n         * be discarded and not affect scoring.\n         *\n         * <p><b>NOTE:</b> Property weights only affect scoring for query-dependent scoring\n         * strategies, such as {@link #RANKING_STRATEGY_RELEVANCE_SCORE}.\n         *\n         * @param schemaType the schema type to set property weights for.\n         * @param propertyPathWeights a {@link Map} of property paths of the schema type to the\n         *     weight to set for that property.\n         * @throws IllegalArgumentException if a weight is equal to or less than 0.0.\n         ",
    "links" : [ "android.app.appsearch.AppSearchSchema", "android.app.appsearch.GenericDocument", "#RANKING_STRATEGY_RELEVANCE_SCORE", "android.util.ArrayMap" ]
  }, {
    "name" : "public Builder setNumericSearchEnabled(boolean enabled)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the NUMERIC_SEARCH feature as enabled/disabled according to the enabled parameter.\n         *\n         * @param enabled Enables the feature if true, otherwise disables it.\n         *     <p>If disabled, disallows use of {@link\n         *     AppSearchSchema.LongPropertyConfig#INDEXING_TYPE_RANGE} and all other numeric\n         *     querying features.\n         ",
    "links" : [ "AppSearchSchema.LongPropertyConfig#INDEXING_TYPE_RANGE" ]
  }, {
    "name" : "public Builder setVerbatimSearchEnabled(boolean enabled)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the VERBATIM_SEARCH feature as enabled/disabled according to the enabled parameter.\n         *\n         * @param enabled Enables the feature if true, otherwise disables it\n         *     <p>If disabled, disallows use of {@link\n         *     AppSearchSchema.StringPropertyConfig#TOKENIZER_TYPE_VERBATIM} and all other verbatim\n         *     search features within the query language that allows clients to search using the\n         *     verbatim string operator.\n         *     <p>For example, The verbatim string operator '\"foo/bar\" OR baz' will ensure that\n         *     'foo/bar' is treated as a single 'verbatim' token.\n         ",
    "links" : [ "AppSearchSchema.StringPropertyConfig#TOKENIZER_TYPE_VERBATIM" ]
  }, {
    "name" : "public Builder setListFilterQueryLanguageEnabled(boolean enabled)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the LIST_FILTER_QUERY_LANGUAGE feature as enabled/disabled according to the enabled\n         * parameter.\n         *\n         * @param enabled Enables the feature if true, otherwise disables it.\n         *     <p>This feature covers the expansion of the query language to conform to the\n         *     definition of the list filters language (https://aip.dev/160). This includes:\n         *     <ul>\n         *       <li>addition of explicit 'AND' and 'NOT' operators\n         *       <li>property restricts are allowed with grouping (ex. \"prop:(a OR b)\")\n         *       <li>addition of custom functions to control matching\n         *     </ul>\n         *     <p>The newly added custom functions covered by this feature are:\n         *     <ul>\n         *       <li>createList(String...)\n         *       <li>termSearch(String, List<String>)\n         *     </ul>\n         *     <p>createList takes a variable number of strings and returns a list of strings. It is\n         *     for use with termSearch.\n         *     <p>termSearch takes a query string that will be parsed according to the supported\n         *     query language and an optional list of strings that specify the properties to be\n         *     restricted to. This exists as a convenience for multiple property restricts. So, for\n         *     example, the query \"(subject:foo OR body:foo) (subject:bar OR body:bar)\" could be\n         *     rewritten as \"termSearch(\\\"foo bar\\\", createList(\\\"subject\\\", \\\"bar\\\"))\"\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setListFilterHasPropertyFunctionEnabled(boolean enabled)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the LIST_FILTER_HAS_PROPERTY_FUNCTION feature as enabled/disabled according to the\n         * enabled parameter.\n         *\n         * @param enabled Enables the feature if true, otherwise disables it\n         *     <p>If disabled, disallows the use of the \"hasProperty\" function. See {@link\n         *     AppSearchSession#search} for more details about the function.\n         ",
    "links" : [ "android.app.appsearch.AppSearchSession#search" ]
  }, {
    "name" : "public SearchSpec build()",
    "returnType" : "SearchSpec",
    "comment" : "\n         * Constructs a new {@link SearchSpec} from the contents of this builder.\n         *\n         * @throws IllegalArgumentException if property weights are provided with a ranking strategy\n         *     that isn't RANKING_STRATEGY_RELEVANCE_SCORE.\n         * @throws IllegalStateException if the ranking strategy is {@link\n         *     #RANKING_STRATEGY_JOIN_AGGREGATE_SCORE} and {@link #setJoinSpec} has never been\n         *     called.\n         * @throws IllegalStateException if the aggregation scoring strategy has been set in {@link\n         *     JoinSpec#getAggregationScoringStrategy()} but the ranking strategy is not {@link\n         *     #RANKING_STRATEGY_JOIN_AGGREGATE_SCORE}.\n         ",
    "links" : [ "#RANKING_STRATEGY_JOIN_AGGREGATE_SCORE", "#setJoinSpec", "android.app.appsearch.JoinSpec#getAggregationScoringStrategy()", "android.app.appsearch.SearchSpec" ]
  }, {
    "name" : "private void resetIfBuilt()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void modifyEnabledFeature(@NonNull String feature, boolean enabled)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Builder setTermMatch(@TermMatch int termMatchType)", "public Builder addFilterSchemas(@NonNull String... schemas)", "public Builder addFilterSchemas(@NonNull Collection<String> schemas)", "public Builder addFilterProperties(@NonNull String schema, @NonNull Collection<String> propertyPaths)", "public Builder addFilterPropertyPaths(@NonNull String schema, @NonNull Collection<PropertyPath> propertyPaths)", "public Builder addFilterNamespaces(@NonNull String... namespaces)", "public Builder addFilterNamespaces(@NonNull Collection<String> namespaces)", "public Builder addFilterPackageNames(@NonNull String... packageNames)", "public Builder addFilterPackageNames(@NonNull Collection<String> packageNames)", "public SearchSpec.Builder setResultCountPerPage(@IntRange(from = 0, to = MAX_NUM_PER_PAGE) int resultCountPerPage)", "public Builder setRankingStrategy(@RankingStrategy int rankingStrategy)", "public Builder setRankingStrategy(@NonNull String advancedRankingExpression)", "public Builder setSearchSourceLogTag(@NonNull String searchSourceLogTag)", "public Builder setOrder(@Order int order)", "public SearchSpec.Builder setSnippetCount(@IntRange(from = 0, to = MAX_SNIPPET_COUNT) int snippetCount)", "public SearchSpec.Builder setSnippetCountPerProperty(@IntRange(from = 0, to = MAX_SNIPPET_PER_PROPERTY_COUNT) int snippetCountPerProperty)", "public SearchSpec.Builder setMaxSnippetSize(@IntRange(from = 0, to = MAX_SNIPPET_SIZE_LIMIT) int maxSnippetSize)", "public SearchSpec.Builder addProjection(@NonNull String schema, @NonNull Collection<String> propertyPaths)", "public SearchSpec.Builder addProjectionPaths(@NonNull String schema, @NonNull Collection<PropertyPath> propertyPaths)", "public Builder setResultGrouping(@GroupingType int groupingTypeFlags, int limit)", "public SearchSpec.Builder setPropertyWeights(@NonNull String schemaType, @NonNull Map<String, Double> propertyPathWeights)", "public Builder setJoinSpec(@NonNull JoinSpec joinSpec)", "public SearchSpec.Builder setPropertyWeightPaths(@NonNull String schemaType, @NonNull Map<PropertyPath, Double> propertyPathWeights)", "public Builder setNumericSearchEnabled(boolean enabled)", "public Builder setVerbatimSearchEnabled(boolean enabled)", "public Builder setListFilterQueryLanguageEnabled(boolean enabled)", "public Builder setListFilterHasPropertyFunctionEnabled(boolean enabled)", "public SearchSpec build()", "private void resetIfBuilt()", "private void modifyEnabledFeature(@NonNull String feature, boolean enabled)" ],
  "variableNames" : [ "mSchemas", "mNamespaces", "mTypePropertyFilters", "mPackageNames", "mEnabledFeatures", "mProjectionTypePropertyMasks", "mTypePropertyWeights", "mResultCountPerPage", "mTermMatchType", "mSnippetCount", "mSnippetCountPerProperty", "mMaxSnippetSize", "mRankingStrategy", "mOrder", "mGroupingTypeFlags", "mGroupingLimit", "mJoinSpec", "mAdvancedRankingExpression", "mSearchSourceLogTag", "mBuilt" ]
}