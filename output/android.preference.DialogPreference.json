{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/preference/DialogPreference.java",
  "packageName" : "android.preference",
  "className" : "DialogPreference",
  "comment" : "\n * A base class for {@link Preference} objects that are\n * dialog-based. These preferences will, when clicked, open a dialog showing the\n * actual preference controls.\n *\n * @attr ref android.R.styleable#DialogPreference_dialogTitle\n * @attr ref android.R.styleable#DialogPreference_dialogMessage\n * @attr ref android.R.styleable#DialogPreference_dialogIcon\n * @attr ref android.R.styleable#DialogPreference_dialogLayout\n * @attr ref android.R.styleable#DialogPreference_positiveButtonText\n * @attr ref android.R.styleable#DialogPreference_negativeButtonText\n *\n * @deprecated Use the <a href=\"{@docRoot}jetpack/androidx.html\">AndroidX</a>\n *      <a href=\"{@docRoot}reference/androidx/preference/package-summary.html\">\n *      Preference Library</a> for consistent behavior across all devices. For more information on\n *      using the AndroidX Preference Library see\n *      <a href=\"{@docRoot}guide/topics/ui/settings.html\">Settings</a>.\n ",
  "links" : [ "android.preference.Preference" ],
  "variables" : [ {
    "name" : "mBuilder",
    "type" : "AlertDialog.Builder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDialogTitle",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDialogMessage",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDialogIcon",
    "type" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPositiveButtonText",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNegativeButtonText",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDialogLayoutResId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDialog",
    "type" : "Dialog",
    "comment" : " The dialog, if it is showing. ",
    "links" : [ ]
  }, {
    "name" : "mWhichButtonClicked",
    "type" : "int",
    "comment" : " Which button was clicked. ",
    "links" : [ ]
  }, {
    "name" : "mDismissRunnable",
    "type" : "Runnable",
    "comment" : " Dismiss the dialog on the UI thread, but not inline with handlers ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setDialogTitle(CharSequence dialogTitle)",
    "returnType" : "void",
    "comment" : "\n     * Sets the title of the dialog. This will be shown on subsequent dialogs.\n     *\n     * @param dialogTitle The title.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDialogTitle(int dialogTitleResId)",
    "returnType" : "void",
    "comment" : "\n     * @see #setDialogTitle(CharSequence)\n     * @param dialogTitleResId The dialog title as a resource.\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getDialogTitle()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Returns the title to be shown on subsequent dialogs.\n     * @return The title.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDialogMessage(CharSequence dialogMessage)",
    "returnType" : "void",
    "comment" : "\n     * Sets the message of the dialog. This will be shown on subsequent dialogs.\n     * <p>\n     * This message forms the content View of the dialog and conflicts with\n     * list-based dialogs, for example. If setting a custom View on a dialog via\n     * {@link #setDialogLayoutResource(int)}, include a text View with ID\n     * {@link android.R.id#message} and it will be populated with this message.\n     *\n     * @param dialogMessage The message.\n     ",
    "links" : [ "#setDialogLayoutResource(int)", "android.R.id#message" ]
  }, {
    "name" : "public void setDialogMessage(int dialogMessageResId)",
    "returnType" : "void",
    "comment" : "\n     * @see #setDialogMessage(CharSequence)\n     * @param dialogMessageResId The dialog message as a resource.\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getDialogMessage()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Returns the message to be shown on subsequent dialogs.\n     * @return The message.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDialogIcon(Drawable dialogIcon)",
    "returnType" : "void",
    "comment" : "\n     * Sets the icon of the dialog. This will be shown on subsequent dialogs.\n     *\n     * @param dialogIcon The icon, as a {@link Drawable}.\n     ",
    "links" : [ "android.graphics.drawable.Drawable" ]
  }, {
    "name" : "public void setDialogIcon(@DrawableRes int dialogIconRes)",
    "returnType" : "void",
    "comment" : "\n     * Sets the icon (resource ID) of the dialog. This will be shown on\n     * subsequent dialogs.\n     *\n     * @param dialogIconRes The icon, as a resource ID.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Drawable getDialogIcon()",
    "returnType" : "Drawable",
    "comment" : "\n     * Returns the icon to be shown on subsequent dialogs.\n     * @return The icon, as a {@link Drawable}.\n     ",
    "links" : [ "android.graphics.drawable.Drawable" ]
  }, {
    "name" : "public void setPositiveButtonText(CharSequence positiveButtonText)",
    "returnType" : "void",
    "comment" : "\n     * Sets the text of the positive button of the dialog. This will be shown on\n     * subsequent dialogs.\n     *\n     * @param positiveButtonText The text of the positive button.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPositiveButtonText(@StringRes int positiveButtonTextResId)",
    "returnType" : "void",
    "comment" : "\n     * @see #setPositiveButtonText(CharSequence)\n     * @param positiveButtonTextResId The positive button text as a resource.\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getPositiveButtonText()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Returns the text of the positive button to be shown on subsequent\n     * dialogs.\n     *\n     * @return The text of the positive button.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setNegativeButtonText(CharSequence negativeButtonText)",
    "returnType" : "void",
    "comment" : "\n     * Sets the text of the negative button of the dialog. This will be shown on\n     * subsequent dialogs.\n     *\n     * @param negativeButtonText The text of the negative button.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setNegativeButtonText(@StringRes int negativeButtonTextResId)",
    "returnType" : "void",
    "comment" : "\n     * @see #setNegativeButtonText(CharSequence)\n     * @param negativeButtonTextResId The negative button text as a resource.\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getNegativeButtonText()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Returns the text of the negative button to be shown on subsequent\n     * dialogs.\n     *\n     * @return The text of the negative button.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDialogLayoutResource(int dialogLayoutResId)",
    "returnType" : "void",
    "comment" : "\n     * Sets the layout resource that is inflated as the {@link View} to be shown\n     * as the content View of subsequent dialogs.\n     *\n     * @param dialogLayoutResId The layout resource ID to be inflated.\n     * @see #setDialogMessage(CharSequence)\n     ",
    "links" : [ "android.view.View" ]
  }, {
    "name" : "public int getDialogLayoutResource()",
    "returnType" : "int",
    "comment" : "\n     * Returns the layout resource that is used as the content View for\n     * subsequent dialogs.\n     *\n     * @return The layout resource.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void onPrepareDialogBuilder(AlertDialog.Builder builder)",
    "returnType" : "void",
    "comment" : "\n     * Prepares the dialog builder to be shown when the preference is clicked.\n     * Use this to set custom properties on the dialog.\n     * <p>\n     * Do not {@link AlertDialog.Builder#create()} or\n     * {@link AlertDialog.Builder#show()}.\n     ",
    "links" : [ "AlertDialog.Builder#create()", "AlertDialog.Builder#show()" ]
  }, {
    "name" : "protected void onClick()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void showDialog(Bundle state)",
    "returnType" : "void",
    "comment" : "\n     * Shows the dialog associated with this Preference. This is normally initiated\n     * automatically on clicking on the preference. Call this method if you need to\n     * show the dialog on some other event.\n     *\n     * @param state Optional instance state to restore on the dialog\n     ",
    "links" : [ ]
  }, {
    "name" : "private View getDecorView()",
    "returnType" : "View",
    "comment" : "\n     * Get the DecorView.\n     * @return the DecorView for the current dialog window, if it exists.\n     * If the window does not exist, null is returned.\n     ",
    "links" : [ ]
  }, {
    "name" : " void postDismiss()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void removeDismissCallbacks()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected View onCreateDialogView()",
    "returnType" : "View",
    "comment" : "\n     * Creates the content view for the dialog (if a custom content view is\n     * required). By default, it inflates the dialog layout resource if it is\n     * set.\n     *\n     * @return The content View for the dialog.\n     * @see #setLayoutResource(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void onBindDialogView(View view)",
    "returnType" : "void",
    "comment" : "\n     * Binds views in the content View of the dialog to data.\n     * <p>\n     * Make sure to call through to the superclass implementation.\n     *\n     * @param view The content View of the dialog, if it is custom.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onClick(DialogInterface dialog, int which)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onDismiss(DialogInterface dialog)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onDialogClosed(boolean positiveResult)",
    "returnType" : "void",
    "comment" : "\n     * Called when the dialog is dismissed and should be used to save data to\n     * the {@link SharedPreferences}.\n     *\n     * @param positiveResult Whether the positive button was clicked (true), or\n     *            the negative button was clicked or the dialog was canceled (false).\n     ",
    "links" : [ "android.content.SharedPreferences" ]
  }, {
    "name" : "public Dialog getDialog()",
    "returnType" : "Dialog",
    "comment" : "\n     * Gets the dialog that is shown by this preference.\n     *\n     * @return The dialog, or null if a dialog is not being shown.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onActivityDestroy()",
    "returnType" : "void",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "protected Parcelable onSaveInstanceState()",
    "returnType" : "Parcelable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onRestoreInstanceState(Parcelable state)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setDialogTitle(CharSequence dialogTitle)", "public void setDialogTitle(int dialogTitleResId)", "public CharSequence getDialogTitle()", "public void setDialogMessage(CharSequence dialogMessage)", "public void setDialogMessage(int dialogMessageResId)", "public CharSequence getDialogMessage()", "public void setDialogIcon(Drawable dialogIcon)", "public void setDialogIcon(@DrawableRes int dialogIconRes)", "public Drawable getDialogIcon()", "public void setPositiveButtonText(CharSequence positiveButtonText)", "public void setPositiveButtonText(@StringRes int positiveButtonTextResId)", "public CharSequence getPositiveButtonText()", "public void setNegativeButtonText(CharSequence negativeButtonText)", "public void setNegativeButtonText(@StringRes int negativeButtonTextResId)", "public CharSequence getNegativeButtonText()", "public void setDialogLayoutResource(int dialogLayoutResId)", "public int getDialogLayoutResource()", "protected void onPrepareDialogBuilder(AlertDialog.Builder builder)", "protected void onClick()", "protected void showDialog(Bundle state)", "private View getDecorView()", " void postDismiss()", "private void removeDismissCallbacks()", "protected View onCreateDialogView()", "protected void onBindDialogView(View view)", "public void onClick(DialogInterface dialog, int which)", "public void onDismiss(DialogInterface dialog)", "protected void onDialogClosed(boolean positiveResult)", "public Dialog getDialog()", "public void onActivityDestroy()", "protected Parcelable onSaveInstanceState()", "protected void onRestoreInstanceState(Parcelable state)" ],
  "variableNames" : [ "mBuilder", "mDialogTitle", "mDialogMessage", "mDialogIcon", "mPositiveButtonText", "mNegativeButtonText", "mDialogLayoutResId", "mDialog", "mWhichButtonClicked", "mDismissRunnable" ]
}