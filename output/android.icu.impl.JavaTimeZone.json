{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/JavaTimeZone.java",
  "packageName" : "android.icu.impl",
  "className" : "JavaTimeZone",
  "comment" : "\n * JavaTimeZone inherits android.icu.util.TimeZone and wraps java.util.TimeZone.\n * We used to have JDKTimeZone which wrapped Java TimeZone and used it as primary\n * TimeZone implementation until ICU4J 3.4.1.  This class works exactly like\n * JDKTimeZone and allows ICU users who use ICU4J and JDK date/time/calendar\n * services in mix to maintain only JDK timezone rules.\n *\n * This TimeZone subclass is returned by the TimeZone factory method getTimeZone(String)\n * when the default timezone type in TimeZone class is TimeZone.TIMEZONE_JDK.\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "AVAILABLESET",
    "type" : "TreeSet<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "javatz",
    "type" : "java.util.TimeZone",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "javacal",
    "type" : "java.util.Calendar",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mObservesDaylightTime",
    "type" : "Method",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "isFrozen",
    "type" : "boolean",
    "comment" : " Freezable stuffs",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static JavaTimeZone createTimeZone(String id)",
    "returnType" : "JavaTimeZone",
    "comment" : "\n     * Creates an instance of JavaTimeZone with the given timezone ID.\n     * @param id A timezone ID, either a system ID or a custom ID.\n     * @return An instance of JavaTimeZone for the given ID, or null\n     * when the ID cannot be understood.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getOffset(int era, int year, int month, int day, int dayOfWeek, int milliseconds)",
    "returnType" : "int",
    "comment" : " (non-Javadoc)\n     * @see android.icu.util.TimeZone#getOffset(int, int, int, int, int, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void getOffset(long date, boolean local, int[] offsets)",
    "returnType" : "void",
    "comment" : " (non-Javadoc)\n     * @see android.icu.util.TimeZone#getOffset(long, boolean, int[])\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getRawOffset()",
    "returnType" : "int",
    "comment" : " (non-Javadoc)\n     * @see android.icu.util.TimeZone#getRawOffset()\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean inDaylightTime(Date date)",
    "returnType" : "boolean",
    "comment" : " (non-Javadoc)\n     * @see android.icu.util.TimeZone#inDaylightTime(java.util.Date)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setRawOffset(int offsetMillis)",
    "returnType" : "void",
    "comment" : " (non-Javadoc)\n     * @see android.icu.util.TimeZone#setRawOffset(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean useDaylightTime()",
    "returnType" : "boolean",
    "comment" : " (non-Javadoc)\n     * @see android.icu.util.TimeZone#useDaylightTime()\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean observesDaylightTime()",
    "returnType" : "boolean",
    "comment" : " (non-Javadoc)\n     * @see android.icu.util.TimeZone#observesDaylightTime()\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getDSTSavings()",
    "returnType" : "int",
    "comment" : " (non-Javadoc)\n     * @see android.icu.util.TimeZone#getDSTSavings()\n     ",
    "links" : [ ]
  }, {
    "name" : "public java.util.TimeZone unwrap()",
    "returnType" : "java.util.TimeZone",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Object clone()",
    "returnType" : "Object",
    "comment" : " (non-Javadoc)\n     * @see android.icu.util.TimeZone#clone()\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : " (non-Javadoc)\n     * @see android.icu.util.TimeZone#hashCode()\n     ",
    "links" : [ ]
  }, {
    "name" : "private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isFrozen()",
    "returnType" : "boolean",
    "comment" : " (non-Javadoc)\n     * @see android.icu.util.TimeZone#isFrozen()\n     ",
    "links" : [ ]
  }, {
    "name" : "public TimeZone freeze()",
    "returnType" : "TimeZone",
    "comment" : " (non-Javadoc)\n     * @see android.icu.util.TimeZone#freeze()\n     ",
    "links" : [ ]
  }, {
    "name" : "public TimeZone cloneAsThawed()",
    "returnType" : "TimeZone",
    "comment" : " (non-Javadoc)\n     * @see android.icu.util.TimeZone#cloneAsThawed()\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static JavaTimeZone createTimeZone(String id)", "public int getOffset(int era, int year, int month, int day, int dayOfWeek, int milliseconds)", "public void getOffset(long date, boolean local, int[] offsets)", "public int getRawOffset()", "public boolean inDaylightTime(Date date)", "public void setRawOffset(int offsetMillis)", "public boolean useDaylightTime()", "public boolean observesDaylightTime()", "public int getDSTSavings()", "public java.util.TimeZone unwrap()", "public Object clone()", "public int hashCode()", "private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException", "public boolean isFrozen()", "public TimeZone freeze()", "public TimeZone cloneAsThawed()" ],
  "variableNames" : [ "serialVersionUID", "AVAILABLESET", "javatz", "javacal", "mObservesDaylightTime", "isFrozen" ]
}