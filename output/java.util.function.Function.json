{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/function/Function.java",
  "packageName" : "java.util.function",
  "className" : "Function",
  "comment" : "\n * Represents a function that accepts one argument and produces a result.\n *\n * <p>This is a <a href=\"package-summary.html\">functional interface</a>\n * whose functional method is {@link #apply(Object)}.\n *\n * @param <T> the type of the input to the function\n * @param <R> the type of the result of the function\n *\n * @since 1.8\n ",
  "links" : [ "#apply(Object)" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " R apply(T t)",
    "returnType" : "R",
    "comment" : "\n     * Applies this function to the given argument.\n     *\n     * @param t the function argument\n     * @return the function result\n     ",
    "links" : [ ]
  }, {
    "name" : " Function<V, R> compose(Function<? super V, ? extends T> before)",
    "returnType" : "Function<V, R>",
    "comment" : "\n     * Returns a composed function that first applies the {@code before}\n     * function to its input, and then applies this function to the result.\n     * If evaluation of either function throws an exception, it is relayed to\n     * the caller of the composed function.\n     *\n     * @param <V> the type of input to the {@code before} function, and to the\n     *           composed function\n     * @param before the function to apply before this function is applied\n     * @return a composed function that first applies the {@code before}\n     * function and then applies this function\n     * @throws NullPointerException if before is null\n     *\n     * @see #andThen(Function)\n     ",
    "links" : [ ]
  }, {
    "name" : " Function<T, V> andThen(Function<? super R, ? extends V> after)",
    "returnType" : "Function<T, V>",
    "comment" : "\n     * Returns a composed function that first applies this function to\n     * its input, and then applies the {@code after} function to the result.\n     * If evaluation of either function throws an exception, it is relayed to\n     * the caller of the composed function.\n     *\n     * @param <V> the type of output of the {@code after} function, and of the\n     *           composed function\n     * @param after the function to apply after this function is applied\n     * @return a composed function that first applies this function and then\n     * applies the {@code after} function\n     * @throws NullPointerException if after is null\n     *\n     * @see #compose(Function)\n     ",
    "links" : [ ]
  }, {
    "name" : " static Function<T, T> identity()",
    "returnType" : "Function<T, T>",
    "comment" : "\n     * Returns a function that always returns its input argument.\n     *\n     * @param <T> the type of the input and output objects to the function\n     * @return a function that always returns its input argument\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " R apply(T t)", " Function<V, R> compose(Function<? super V, ? extends T> before)", " Function<T, V> andThen(Function<? super R, ? extends V> after)", " static Function<T, T> identity()" ],
  "variableNames" : [ ]
}