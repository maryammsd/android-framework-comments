{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/hardware/camera2/impl/CameraMetadataNative.java",
  "packageName" : "android.hardware.camera2.impl",
  "className" : "Key",
  "comment" : "",
  "variables" : [ {
    "name" : "mHasTag",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTag",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVendorId",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mType",
    "type" : "Class<T>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTypeReference",
    "type" : "TypeReference<T>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFallbackName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHash",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final String getName()",
    "returnType" : "String",
    "comment" : "\n         * Return a camelCase, period separated name formatted like:\n         * {@code \"root.section[.subsections].name\"}.\n         *\n         * <p>Built-in keys exposed by the Android SDK are always prefixed with {@code \"android.\"};\n         * keys that are device/platform-specific are prefixed with {@code \"com.\"}.</p>\n         *\n         * <p>For example, {@code CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP} would\n         * have a name of {@code \"android.scaler.streamConfigurationMap\"}; whereas a device\n         * specific key might look like {@code \"com.google.nexus.data.private\"}.</p>\n         *\n         * @return String representation of the key name\n         ",
    "links" : [ ]
  }, {
    "name" : "public final int hashCode()",
    "returnType" : "int",
    "comment" : "\n         * {@inheritDoc}\n         ",
    "links" : [ ]
  }, {
    "name" : "public final boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "\n         * Compare this key against other native keys, request keys, result keys, and\n         * characteristics keys.\n         *\n         * <p>Two keys are considered equal if their name and type reference are equal.</p>\n         *\n         * <p>Note that the equality against non-native keys is one-way. A native key may be equal\n         * to a result key; but that same result key will not be equal to a native key.</p>\n         ",
    "links" : [ ]
  }, {
    "name" : "public final int getTag()",
    "returnType" : "int",
    "comment" : "\n         * <p>\n         * Get the tag corresponding to this key. This enables insertion into the\n         * native metadata.\n         * </p>\n         *\n         * <p>This value is looked up the first time, and cached subsequently.</p>\n         *\n         * <p>This function may be called without cacheTag() if this is not a vendor key.\n         * If this is a vendor key, cacheTag() must be called first before getTag() can\n         * be called. Otherwise, mVendorId could be default (Long.MAX_VALUE) and vendor\n         * tag lookup could fail.</p>\n         *\n         * @return The tag numeric value corresponding to the string\n         ",
    "links" : [ ]
  }, {
    "name" : "public final boolean hasTag()",
    "returnType" : "boolean",
    "comment" : "\n         * Whether this key's tag is cached.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public final void cacheTag(int tag)",
    "returnType" : "void",
    "comment" : "\n         * Cache this key's tag.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public final Class<T> getType()",
    "returnType" : "Class<T>",
    "comment" : "\n         * Get the raw class backing the type {@code T} for this key.\n         *\n         * <p>The distinction is only important if {@code T} is a generic, e.g.\n         * {@code Range<Integer>} since the nested type will be erased.</p>\n         ",
    "links" : [ ]
  }, {
    "name" : "public final long getVendorId()",
    "returnType" : "long",
    "comment" : "\n         * Get the vendor tag provider id.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public final TypeReference<T> getTypeReference()",
    "returnType" : "TypeReference<T>",
    "comment" : "\n         * Get the type reference backing the type {@code T} for this key.\n         *\n         * <p>The distinction is only important if {@code T} is a generic, e.g.\n         * {@code Range<Integer>} since the nested type will be retained.</p>\n         ",
    "links" : [ ]
  } ],
  "variableNames" : [ "mHasTag", "mTag", "mVendorId", "mType", "mTypeReference", "mName", "mFallbackName", "mHash" ],
  "methodNames" : [ "public final String getName()", "public final int hashCode()", "public final boolean equals(Object o)", "public final int getTag()", "public final boolean hasTag()", "public final void cacheTag(int tag)", "public final Class<T> getType()", "public final long getVendorId()", "public final TypeReference<T> getTypeReference()" ]
}