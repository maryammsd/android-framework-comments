{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/io/Writer.java",
  "packageName" : "java.io",
  "className" : "Writer",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "writeBuffer",
    "type" : "char[]",
    "comment" : "\n     * Temporary buffer used to hold writes of strings and single characters\n     ",
    "links" : [ ]
  }, {
    "name" : "WRITE_BUFFER_SIZE",
    "type" : "int",
    "comment" : "\n     * Size of writeBuffer, must be >= 1\n     ",
    "links" : [ ]
  }, {
    "name" : "lock",
    "type" : "Object",
    "comment" : "\n     * The object used to synchronize operations on this stream.  For\n     * efficiency, a character-stream object may use an object other than\n     * itself to protect critical sections.  A subclass should therefore use\n     * the object in this field rather than {@code this} or a synchronized\n     * method.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static Writer nullWriter()",
    "returnType" : "Writer",
    "comment" : "\n     * Returns a new {@code Writer} which discards all characters.  The\n     * returned stream is initially open.  The stream is closed by calling\n     * the {@code close()} method.  Subsequent calls to {@code close()} have\n     * no effect.\n     *\n     * <p> While the stream is open, the {@code append(char)}, {@code\n     * append(CharSequence)}, {@code append(CharSequence, int, int)},\n     * {@code flush()}, {@code write(int)}, {@code write(char[])}, and\n     * {@code write(char[], int, int)} methods do nothing. After the stream\n     * has been closed, these methods all throw {@code IOException}.\n     *\n     * <p> The {@link #lock object} used to synchronize operations on the\n     * returned {@code Writer} is not specified.\n     *\n     * @return a {@code Writer} which discards all characters\n     *\n     * @since 11\n     ",
    "links" : [ "#lock" ]
  }, {
    "name" : "public void write(int c) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes a single character.  The character to be written is contained in\n     * the 16 low-order bits of the given integer value; the 16 high-order bits\n     * are ignored.\n     *\n     * <p> Subclasses that intend to support efficient single-character output\n     * should override this method.\n     *\n     * @param  c\n     *         int specifying a character to be written\n     *\n     * @throws  IOException\n     *          If an I/O error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "public void write(char[] cbuf) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes an array of characters.\n     *\n     * @param  cbuf\n     *         Array of characters to be written\n     *\n     * @throws  IOException\n     *          If an I/O error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void write(char[] cbuf, int off, int len) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes a portion of an array of characters.\n     *\n     * @param  cbuf\n     *         Array of characters\n     *\n     * @param  off\n     *         Offset from which to start writing characters\n     *\n     * @param  len\n     *         Number of characters to write\n     *\n     * @throws  IndexOutOfBoundsException\n     *          Implementations should throw this exception\n     *          if {@code off} is negative, or {@code len} is negative,\n     *          or {@code off + len} is negative or greater than the length\n     *          of the given array\n     *\n     * @throws  IOException\n     *          If an I/O error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "public void write(String str) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes a string.\n     *\n     * @param  str\n     *         String to be written\n     *\n     * @throws  IOException\n     *          If an I/O error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "public void write(String str, int off, int len) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes a portion of a string.\n     *\n     * @implSpec\n     * The implementation in this class throws an\n     * {@code IndexOutOfBoundsException} for the indicated conditions;\n     * overriding methods may choose to do otherwise.\n     *\n     * @param  str\n     *         A String\n     *\n     * @param  off\n     *         Offset from which to start writing characters\n     *\n     * @param  len\n     *         Number of characters to write\n     *\n     * @throws  IndexOutOfBoundsException\n     *          Implementations should throw this exception\n     *          if {@code off} is negative, or {@code len} is negative,\n     *          or {@code off + len} is negative or greater than the length\n     *          of the given string\n     *\n     * @throws  IOException\n     *          If an I/O error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "public Writer append(CharSequence csq) throws IOException",
    "returnType" : "Writer",
    "comment" : "\n     * Appends the specified character sequence to this writer.\n     *\n     * <p> An invocation of this method of the form {@code out.append(csq)}\n     * behaves in exactly the same way as the invocation\n     *\n     * <pre>\n     *     out.write(csq.toString()) </pre>\n     *\n     * <p> Depending on the specification of {@code toString} for the\n     * character sequence {@code csq}, the entire sequence may not be\n     * appended. For instance, invoking the {@code toString} method of a\n     * character buffer will return a subsequence whose content depends upon\n     * the buffer's position and limit.\n     *\n     * @param  csq\n     *         The character sequence to append.  If {@code csq} is\n     *         {@code null}, then the four characters {@code \"null\"} are\n     *         appended to this writer.\n     *\n     * @return  This writer\n     *\n     * @throws  IOException\n     *          If an I/O error occurs\n     *\n     * @since  1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public Writer append(CharSequence csq, int start, int end) throws IOException",
    "returnType" : "Writer",
    "comment" : "\n     * Appends a subsequence of the specified character sequence to this writer.\n     * {@code Appendable}.\n     *\n     * <p> An invocation of this method of the form\n     * {@code out.append(csq, start, end)} when {@code csq}\n     * is not {@code null} behaves in exactly the\n     * same way as the invocation\n     *\n     * <pre>{@code\n     *     out.write(csq.subSequence(start, end).toString())\n     * }</pre>\n     *\n     * @param  csq\n     *         The character sequence from which a subsequence will be\n     *         appended.  If {@code csq} is {@code null}, then characters\n     *         will be appended as if {@code csq} contained the four\n     *         characters {@code \"null\"}.\n     *\n     * @param  start\n     *         The index of the first character in the subsequence\n     *\n     * @param  end\n     *         The index of the character following the last character in the\n     *         subsequence\n     *\n     * @return  This writer\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If {@code start} or {@code end} are negative, {@code start}\n     *          is greater than {@code end}, or {@code end} is greater than\n     *          {@code csq.length()}\n     *\n     * @throws  IOException\n     *          If an I/O error occurs\n     *\n     * @since  1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public Writer append(char c) throws IOException",
    "returnType" : "Writer",
    "comment" : "\n     * Appends the specified character to this writer.\n     *\n     * <p> An invocation of this method of the form {@code out.append(c)}\n     * behaves in exactly the same way as the invocation\n     *\n     * <pre>\n     *     out.write(c) </pre>\n     *\n     * @param  c\n     *         The 16-bit character to append\n     *\n     * @return  This writer\n     *\n     * @throws  IOException\n     *          If an I/O error occurs\n     *\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void flush() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Flushes the stream.  If the stream has saved any characters from the\n     * various write() methods in a buffer, write them immediately to their\n     * intended destination.  Then, if that destination is another character or\n     * byte stream, flush it.  Thus one flush() invocation will flush all the\n     * buffers in a chain of Writers and OutputStreams.\n     *\n     * <p> If the intended destination of this stream is an abstraction provided\n     * by the underlying operating system, for example a file, then flushing the\n     * stream guarantees only that bytes previously written to the stream are\n     * passed to the operating system for writing; it does not guarantee that\n     * they are actually written to a physical device such as a disk drive.\n     *\n     * @throws  IOException\n     *          If an I/O error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void close() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Closes the stream, flushing it first. Once the stream has been closed,\n     * further write() or flush() invocations will cause an IOException to be\n     * thrown. Closing a previously closed stream has no effect.\n     *\n     * @throws  IOException\n     *          If an I/O error occurs\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static Writer nullWriter()", "public void write(int c) throws IOException", "public void write(char[] cbuf) throws IOException", "public abstract void write(char[] cbuf, int off, int len) throws IOException", "public void write(String str) throws IOException", "public void write(String str, int off, int len) throws IOException", "public Writer append(CharSequence csq) throws IOException", "public Writer append(CharSequence csq, int start, int end) throws IOException", "public Writer append(char c) throws IOException", "public abstract void flush() throws IOException", "public abstract void close() throws IOException" ],
  "variableNames" : [ "writeBuffer", "WRITE_BUFFER_SIZE", "lock" ]
}