{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/os/PowerManager.java",
  "packageName" : "android.os",
  "className" : "WakeLock",
  "comment" : "\n     * A wake lock is a mechanism to indicate that your application needs\n     * to have the device stay on.\n     * <p>\n     * Any application using a WakeLock must request the {@code android.permission.WAKE_LOCK}\n     * permission in an {@code <uses-permission>} element of the application's manifest.\n     * Obtain a wake lock by calling {@link PowerManager#newWakeLock(int, String)}.\n     * </p><p>\n     * Call {@link #acquire()} to acquire the wake lock and force the device to stay\n     * on at the level that was requested when the wake lock was created.\n     * </p><p>\n     * Call {@link #release()} when you are done and don't need the lock anymore.\n     * It is very important to do this as soon as possible to avoid running down the\n     * device's battery excessively.\n     * </p>\n     ",
  "variables" : [ {
    "name" : "mFlags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTag",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPackageName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mToken",
    "type" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInternalCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExternalCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRefCounted",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHeld",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWorkSource",
    "type" : "WorkSource",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHistoryTag",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTraceName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mReleaser",
    "type" : "Runnable",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected void finalize() throws Throwable",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setReferenceCounted(boolean value)",
    "returnType" : "void",
    "comment" : "\n         * Sets whether this WakeLock is reference counted.\n         * <p>\n         * Wake locks are reference counted by default.  If a wake lock is\n         * reference counted, then each call to {@link #acquire()} must be\n         * balanced by an equal number of calls to {@link #release()}.  If a wake\n         * lock is not reference counted, then one call to {@link #release()} is\n         * sufficient to undo the effect of all previous calls to {@link #acquire()}.\n         * </p>\n         *\n         * @param value True to make the wake lock reference counted, false to\n         * make the wake lock non-reference counted.\n         ",
    "links" : [ "#acquire", "#release", "#release", "#acquire" ]
  }, {
    "name" : "public void acquire()",
    "returnType" : "void",
    "comment" : "\n         * Acquires the wake lock.\n         * <p>\n         * Ensures that the device is on at the level requested when\n         * the wake lock was created.\n         * </p>\n         ",
    "links" : [ ]
  }, {
    "name" : "public void acquire(long timeout)",
    "returnType" : "void",
    "comment" : "\n         * Acquires the wake lock with a timeout.\n         * <p>\n         * Ensures that the device is on at the level requested when\n         * the wake lock was created.  The lock will be released after the given timeout\n         * expires.\n         * </p>\n         *\n         * @param timeout The timeout after which to release the wake lock, in milliseconds.\n         ",
    "links" : [ ]
  }, {
    "name" : "private void acquireLocked()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void release()",
    "returnType" : "void",
    "comment" : "\n         * Releases the wake lock.\n         * <p>\n         * This method releases your claim to the CPU or screen being on.\n         * The screen may turn off shortly after you release the wake lock, or it may\n         * not if there are other wake locks still held.\n         * </p>\n         ",
    "links" : [ ]
  }, {
    "name" : "public void release(int flags)",
    "returnType" : "void",
    "comment" : "\n         * Releases the wake lock with flags to modify the release behavior.\n         * <p>\n         * This method releases your claim to the CPU or screen being on.\n         * The screen may turn off shortly after you release the wake lock, or it may\n         * not if there are other wake locks still held.\n         * </p>\n         *\n         * @param flags Combination of flag values to modify the release behavior.\n         * Currently only {@link #RELEASE_FLAG_WAIT_FOR_NO_PROXIMITY} is supported.\n         * Passing 0 is equivalent to calling {@link #release()}.\n         ",
    "links" : [ "#RELEASE_FLAG_WAIT_FOR_NO_PROXIMITY", "#release" ]
  }, {
    "name" : "public boolean isHeld()",
    "returnType" : "boolean",
    "comment" : "\n         * Returns true if the wake lock has been acquired but not yet released.\n         *\n         * @return True if the wake lock is held.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setWorkSource(WorkSource ws)",
    "returnType" : "void",
    "comment" : "\n         * Sets the work source associated with the wake lock.\n         * <p>\n         * The work source is used to determine on behalf of which application\n         * the wake lock is being held.  This is useful in the case where a\n         * service is performing work on behalf of an application so that the\n         * cost of that work can be accounted to the application.\n         * </p>\n         *\n         * <p>\n         * Make sure to follow the tag naming convention when using WorkSource\n         * to make it easier for app developers to understand wake locks\n         * attributed to them. See {@link PowerManager#newWakeLock(int, String)}\n         * documentation.\n         * </p>\n         *\n         * @param ws The work source, or null if none.\n         ",
    "links" : [ "PowerManager#newWakeLock" ]
  }, {
    "name" : "public void setTag(String tag)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public String getTag()",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setHistoryTag(String tag)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setUnimportantForLogging(boolean state)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dumpDebug(ProtoOutputStream proto, long fieldId)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public Runnable wrap(Runnable r)",
    "returnType" : "Runnable",
    "comment" : "\n         * Wraps a Runnable such that this method immediately acquires the wake lock and then\n         * once the Runnable is done the wake lock is released.\n         *\n         * <p>Example:\n         *\n         * <pre>\n         * mHandler.post(mWakeLock.wrap(() -> {\n         *     // do things on handler, lock is held while we're waiting for this\n         *     // to get scheduled and until the runnable is done executing.\n         * });\n         * </pre>\n         *\n         * <p>Note: you must make sure that the Runnable eventually gets executed, otherwise you'll\n         *    leak the wakelock!\n         *\n         * @hide\n         ",
    "links" : [ ]
  } ],
  "variableNames" : [ "mFlags", "mTag", "mPackageName", "mToken", "mInternalCount", "mExternalCount", "mRefCounted", "mHeld", "mWorkSource", "mHistoryTag", "mTraceName", "mReleaser" ],
  "methodNames" : [ "protected void finalize() throws Throwable", "public void setReferenceCounted(boolean value)", "public void acquire()", "public void acquire(long timeout)", "private void acquireLocked()", "public void release()", "public void release(int flags)", "public boolean isHeld()", "public void setWorkSource(WorkSource ws)", "public void setTag(String tag)", "public String getTag()", "public void setHistoryTag(String tag)", "public void setUnimportantForLogging(boolean state)", "public String toString()", "public void dumpDebug(ProtoOutputStream proto, long fieldId)", "public Runnable wrap(Runnable r)" ]
}