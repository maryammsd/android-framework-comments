{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/javax/crypto/SealedObject.java",
  "packageName" : "javax.crypto",
  "className" : "SealedObject",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "encryptedContent",
    "type" : "byte[]",
    "comment" : "\n     * The serialized object contents in encrypted format.\n     *\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "sealAlg",
    "type" : "String",
    "comment" : "\n     * The algorithm that was used to seal this object.\n     *\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "paramsAlg",
    "type" : "String",
    "comment" : "\n     * The algorithm of the parameters used.\n     *\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "encodedParams",
    "type" : "byte[]",
    "comment" : "\n     * The cryptographic parameters used by the sealing Cipher,\n     * encoded in the default format.\n     * <p>\n     * That is, <code>cipher.getParameters().getEncoded()</code>.\n     *\n     * @serial\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final String getAlgorithm()",
    "returnType" : "String",
    "comment" : "\n     * Returns the algorithm that was used to seal this object.\n     *\n     * @return the algorithm that was used to seal this object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final Object getObject(Key key) throws IOException, ClassNotFoundException, NoSuchAlgorithmException, InvalidKeyException",
    "returnType" : "Object",
    "comment" : "\n     * Retrieves the original (encapsulated) object.\n     *\n     * <p>This method creates a cipher for the algorithm that had been used in\n     * the sealing operation.\n     * If the default provider package provides an implementation of that\n     * algorithm, an instance of Cipher containing that implementation is used.\n     * If the algorithm is not available in the default package, other\n     * packages are searched.\n     * The Cipher object is initialized for decryption, using the given\n     * <code>key</code> and the parameters (if any) that had been used in the\n     * sealing operation.\n     *\n     * <p>The encapsulated object is unsealed and de-serialized, before it is\n     * returned.\n     *\n     * @param key the key used to unseal the object.\n     *\n     * @return the original object.\n     *\n     * @exception IOException if an error occurs during de-serialiazation.\n     * @exception ClassNotFoundException if an error occurs during\n     * de-serialiazation.\n     * @exception NoSuchAlgorithmException if the algorithm to unseal the\n     * object is not available.\n     * @exception InvalidKeyException if the given key cannot be used to unseal\n     * the object (e.g., it has the wrong algorithm).\n     * @exception NullPointerException if <code>key</code> is null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final Object getObject(Cipher c) throws IOException, ClassNotFoundException, IllegalBlockSizeException, BadPaddingException",
    "returnType" : "Object",
    "comment" : "\n     * Retrieves the original (encapsulated) object.\n     *\n     * <p>The encapsulated object is unsealed (using the given Cipher,\n     * assuming that the Cipher is already properly initialized) and\n     * de-serialized, before it is returned.\n     *\n     * @param c the cipher used to unseal the object\n     *\n     * @return the original object.\n     *\n     * @exception NullPointerException if the given cipher is null.\n     * @exception IOException if an error occurs during de-serialiazation\n     * @exception ClassNotFoundException if an error occurs during\n     * de-serialiazation\n     * @exception IllegalBlockSizeException if the given cipher is a block\n     * cipher, no padding has been requested, and the total input length is\n     * not a multiple of the cipher's block size\n     * @exception BadPaddingException if the given cipher has been\n     * initialized for decryption, and padding has been specified, but\n     * the input data does not have proper expected padding bytes\n     ",
    "links" : [ ]
  }, {
    "name" : "public final Object getObject(Key key, String provider) throws IOException, ClassNotFoundException, NoSuchAlgorithmException, NoSuchProviderException, InvalidKeyException",
    "returnType" : "Object",
    "comment" : "\n     * Retrieves the original (encapsulated) object.\n     *\n     * <p>This method creates a cipher for the algorithm that had been used in\n     * the sealing operation, using an implementation of that algorithm from\n     * the given <code>provider</code>.\n     * The Cipher object is initialized for decryption, using the given\n     * <code>key</code> and the parameters (if any) that had been used in the\n     * sealing operation.\n     *\n     * <p>The encapsulated object is unsealed and de-serialized, before it is\n     * returned.\n     *\n     * @param key the key used to unseal the object.\n     * @param provider the name of the provider of the algorithm to unseal\n     * the object.\n     *\n     * @return the original object.\n     *\n     * @exception IllegalArgumentException if the given provider is null\n     * or empty.\n     * @exception IOException if an error occurs during de-serialiazation.\n     * @exception ClassNotFoundException if an error occurs during\n     * de-serialiazation.\n     * @exception NoSuchAlgorithmException if the algorithm to unseal the\n     * object is not available.\n     * @exception NoSuchProviderException if the given provider is not\n     * configured.\n     * @exception InvalidKeyException if the given key cannot be used to unseal\n     * the object (e.g., it has the wrong algorithm).\n     * @exception NullPointerException if <code>key</code> is null.\n     ",
    "links" : [ ]
  }, {
    "name" : "private Object unseal(Key key, String provider) throws IOException, ClassNotFoundException, NoSuchAlgorithmException, NoSuchProviderException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException",
    "returnType" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException",
    "returnType" : "void",
    "comment" : "\n     * Restores the state of the SealedObject from a stream.\n     * @param s the object input stream.\n     * @exception NullPointerException if s is null.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public final String getAlgorithm()", "public final Object getObject(Key key) throws IOException, ClassNotFoundException, NoSuchAlgorithmException, InvalidKeyException", "public final Object getObject(Cipher c) throws IOException, ClassNotFoundException, IllegalBlockSizeException, BadPaddingException", "public final Object getObject(Key key, String provider) throws IOException, ClassNotFoundException, NoSuchAlgorithmException, NoSuchProviderException, InvalidKeyException", "private Object unseal(Key key, String provider) throws IOException, ClassNotFoundException, NoSuchAlgorithmException, NoSuchProviderException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException", "private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException" ],
  "variableNames" : [ "serialVersionUID", "encryptedContent", "sealAlg", "paramsAlg", "encodedParams" ]
}