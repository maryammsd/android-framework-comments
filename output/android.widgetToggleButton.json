{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/widget/ToggleButton.java",
  "packageName" : "android.widget",
  "className" : "ToggleButton",
  "comment" : "\n * Displays checked/unchecked states as a button\n * with a \"light\" indicator and by default accompanied with the text \"ON\" or \"OFF\".\n *\n * <p>See the <a href=\"{@docRoot}guide/topics/ui/controls/togglebutton.html\">Toggle Buttons</a>\n * guide.</p>\n * \n * @attr ref android.R.styleable#ToggleButton_textOn\n * @attr ref android.R.styleable#ToggleButton_textOff\n * @attr ref android.R.styleable#ToggleButton_disabledAlpha\n ",
  "variables" : [ {
    "name" : "mTextOn",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTextOff",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIndicatorDrawable",
    "type" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NO_ALPHA",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDisabledAlpha",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setChecked(boolean checked)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void syncTextState()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getTextOn()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Returns the text for when the button is in the checked state.\n     * \n     * @return The text.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTextOn(CharSequence textOn)",
    "returnType" : "void",
    "comment" : "\n     * Sets the text for when the button is in the checked state.\n     *  \n     * @param textOn The text.\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getTextOff()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Returns the text for when the button is not in the checked state.\n     * \n     * @return The text.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTextOff(CharSequence textOff)",
    "returnType" : "void",
    "comment" : "\n     * Sets the text for when the button is not in the checked state.\n     * \n     * @param textOff The text.\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getDisabledAlpha()",
    "returnType" : "float",
    "comment" : "\n     * Returns the alpha value of the button when it is disabled\n     *\n     * @return the alpha value, 0.0-1.0\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void onFinishInflate()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setBackgroundDrawable(Drawable d)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateReferenceToIndicatorDrawable(Drawable backgroundDrawable)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void drawableStateChanged()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getAccessibilityClassName()",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected CharSequence getButtonStateDescription()",
    "returnType" : "CharSequence",
    "comment" : " @hide *",
    "links" : [ ]
  } ],
  "variableNames" : [ "mTextOn", "mTextOff", "mIndicatorDrawable", "NO_ALPHA", "mDisabledAlpha" ],
  "methodNames" : [ "public void setChecked(boolean checked)", "private void syncTextState()", "public CharSequence getTextOn()", "public void setTextOn(CharSequence textOn)", "public CharSequence getTextOff()", "public void setTextOff(CharSequence textOff)", "public float getDisabledAlpha()", "protected void onFinishInflate()", "public void setBackgroundDrawable(Drawable d)", "private void updateReferenceToIndicatorDrawable(Drawable backgroundDrawable)", "protected void drawableStateChanged()", "public CharSequence getAccessibilityClassName()", "protected CharSequence getButtonStateDescription()" ]
}