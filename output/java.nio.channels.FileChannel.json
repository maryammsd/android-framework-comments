{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/nio/channels/FileChannel.java",
  "packageName" : "java.nio.channels",
  "className" : "FileChannel",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "NO_ATTRIBUTES",
    "type" : "FileAttribute<?>[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static FileChannel open(Path path, Set<? extends OpenOption> options, FileAttribute<?>... attrs) throws IOException",
    "returnType" : "FileChannel",
    "comment" : "\n     * Opens or creates a file, returning a file channel to access the file.\n     *\n     * <p> The {@code options} parameter determines how the file is opened.\n     * The {@link StandardOpenOption#READ READ} and {@link StandardOpenOption#WRITE\n     * WRITE} options determine if the file should be opened for reading and/or\n     * writing. If neither option (or the {@link StandardOpenOption#APPEND APPEND}\n     * option) is contained in the array then the file is opened for reading.\n     * By default reading or writing commences at the beginning of the file.\n     *\n     * <p> In the addition to {@code READ} and {@code WRITE}, the following\n     * options may be present:\n     *\n     * <table class=\"striped\">\n     * <caption style=\"display:none\">additional options</caption>\n     * <thead>\n     * <tr> <th scope=\"col\">Option</th> <th scope=\"col\">Description</th> </tr>\n     * </thead>\n     * <tbody>\n     * <tr>\n     *   <th scope=\"row\"> {@link StandardOpenOption#APPEND APPEND} </th>\n     *   <td> If this option is present then the file is opened for writing and\n     *     each invocation of the channel's {@code write} method first advances\n     *     the position to the end of the file and then writes the requested\n     *     data. Whether the advancement of the position and the writing of the\n     *     data are done in a single atomic operation is system-dependent and\n     *     therefore unspecified. This option may not be used in conjunction\n     *     with the {@code READ} or {@code TRUNCATE_EXISTING} options. </td>\n     * </tr>\n     * <tr>\n     *   <th scope=\"row\"> {@link StandardOpenOption#TRUNCATE_EXISTING TRUNCATE_EXISTING} </th>\n     *   <td> If this option is present then the existing file is truncated to\n     *   a size of 0 bytes. This option is ignored when the file is opened only\n     *   for reading. </td>\n     * </tr>\n     * <tr>\n     *   <th scope=\"row\"> {@link StandardOpenOption#CREATE_NEW CREATE_NEW} </th>\n     *   <td> If this option is present then a new file is created, failing if\n     *   the file already exists. When creating a file the check for the\n     *   existence of the file and the creation of the file if it does not exist\n     *   is atomic with respect to other file system operations. This option is\n     *   ignored when the file is opened only for reading. </td>\n     * </tr>\n     * <tr>\n     *   <th scope=\"row\" > {@link StandardOpenOption#CREATE CREATE} </th>\n     *   <td> If this option is present then an existing file is opened if it\n     *   exists, otherwise a new file is created. When creating a file the check\n     *   for the existence of the file and the creation of the file if it does\n     *   not exist is atomic with respect to other file system operations. This\n     *   option is ignored if the {@code CREATE_NEW} option is also present or\n     *   the file is opened only for reading. </td>\n     * </tr>\n     * <tr>\n     *   <th scope=\"row\" > {@link StandardOpenOption#DELETE_ON_CLOSE DELETE_ON_CLOSE} </th>\n     *   <td> When this option is present then the implementation makes a\n     *   <em>best effort</em> attempt to delete the file when closed by\n     *   the {@link #close close} method. If the {@code close} method is not\n     *   invoked then a <em>best effort</em> attempt is made to delete the file\n     *   when the Java virtual machine terminates. </td>\n     * </tr>\n     * <tr>\n     *   <th scope=\"row\">{@link StandardOpenOption#SPARSE SPARSE} </th>\n     *   <td> When creating a new file this option is a <em>hint</em> that the\n     *   new file will be sparse. This option is ignored when not creating\n     *   a new file. </td>\n     * </tr>\n     * <tr>\n     *   <th scope=\"row\"> {@link StandardOpenOption#SYNC SYNC} </th>\n     *   <td> Requires that every update to the file's content or metadata be\n     *   written synchronously to the underlying storage device. (see <a\n     *   href=\"../file/package-summary.html#integrity\"> Synchronized I/O file\n     *   integrity</a>). </td>\n     * </tr>\n     * <tr>\n     *   <th scope=\"row\"> {@link StandardOpenOption#DSYNC DSYNC} </th>\n     *   <td> Requires that every update to the file's content be written\n     *   synchronously to the underlying storage device. (see <a\n     *   href=\"../file/package-summary.html#integrity\"> Synchronized I/O file\n     *   integrity</a>). </td>\n     * </tr>\n     * </tbody>\n     * </table>\n     *\n     * <p> An implementation may also support additional options.\n     *\n     * <p> The {@code attrs} parameter is an optional array of file {@link\n     * FileAttribute file-attributes} to set atomically when creating the file.\n     *\n     * <p> The new channel is created by invoking the {@link\n     * FileSystemProvider#newFileChannel newFileChannel} method on the\n     * provider that created the {@code Path}.\n     *\n     * @param   path\n     *          The path of the file to open or create\n     * @param   options\n     *          Options specifying how the file is opened\n     * @param   attrs\n     *          An optional list of file attributes to set atomically when\n     *          creating the file\n     *\n     * @return  A new file channel\n     *\n     * @throws  IllegalArgumentException\n     *          If the set contains an invalid combination of options\n     * @throws  UnsupportedOperationException\n     *          If the {@code path} is associated with a provider that does not\n     *          support creating file channels, or an unsupported open option is\n     *          specified, or the array contains an attribute that cannot be set\n     *          atomically when creating the file\n     * @throws  IOException\n     *          If an I/O error occurs\n     * @throws  SecurityException\n     *          If a security manager is installed and it denies an\n     *          unspecified permission required by the implementation.\n     *          In the case of the default provider, the {@link\n     *          SecurityManager#checkRead(String)} method is invoked to check\n     *          read access if the file is opened for reading. The {@link\n     *          SecurityManager#checkWrite(String)} method is invoked to check\n     *          write access if the file is opened for writing\n     *\n     * @since   1.7\n     ",
    "links" : [ "#SPARSE", "#DSYNC", "#checkRead(String)", "#READ", "#close", "#SYNC", "java.nio.file.attribute.FileAttribute", "#APPEND", "#CREATE", "#checkWrite(String)", "#WRITEWRITE", "#TRUNCATE_EXISTING", "#newFileChannel", "#CREATE_NEW", "#DELETE_ON_CLOSE" ]
  }, {
    "name" : "public static FileChannel open(Path path, OpenOption... options) throws IOException",
    "returnType" : "FileChannel",
    "comment" : "\n     * Opens or creates a file, returning a file channel to access the file.\n     *\n     * <p> An invocation of this method behaves in exactly the same way as the\n     * invocation\n     * <pre>\n     *     fc.{@link #open(Path,Set,FileAttribute[]) open}(file, opts, new FileAttribute&lt;?&gt;[0]);\n     * </pre>\n     * where {@code opts} is a set of the options specified in the {@code\n     * options} array.\n     *\n     * @param   path\n     *          The path of the file to open or create\n     * @param   options\n     *          Options specifying how the file is opened\n     *\n     * @return  A new file channel\n     *\n     * @throws  IllegalArgumentException\n     *          If the set contains an invalid combination of options\n     * @throws  UnsupportedOperationException\n     *          If the {@code path} is associated with a provider that does not\n     *          support creating file channels, or an unsupported open option is\n     *          specified\n     * @throws  IOException\n     *          If an I/O error occurs\n     * @throws  SecurityException\n     *          If a security manager is installed and it denies an\n     *          unspecified permission required by the implementation.\n     *          In the case of the default provider, the {@link\n     *          SecurityManager#checkRead(String)} method is invoked to check\n     *          read access if the file is opened for reading. The {@link\n     *          SecurityManager#checkWrite(String)} method is invoked to check\n     *          write access if the file is opened for writing\n     *\n     * @since   1.7\n     ",
    "links" : [ "#checkRead(String)", "#checkWrite(String)", "#open(Path" ]
  }, {
    "name" : "public abstract int read(ByteBuffer dst) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Reads a sequence of bytes from this channel into the given buffer.\n     *\n     * <p> Bytes are read starting at this channel's current file position, and\n     * then the file position is updated with the number of bytes actually\n     * read.  Otherwise this method behaves exactly as specified in the {@link\n     * ReadableByteChannel} interface. </p>\n     ",
    "links" : [ "java.nio.channels.ReadableByteChannel" ]
  }, {
    "name" : "public abstract long read(ByteBuffer[] dsts, int offset, int length) throws IOException",
    "returnType" : "long",
    "comment" : "\n     * Reads a sequence of bytes from this channel into a subsequence of the\n     * given buffers.\n     *\n     * <p> Bytes are read starting at this channel's current file position, and\n     * then the file position is updated with the number of bytes actually\n     * read.  Otherwise this method behaves exactly as specified in the {@link\n     * ScatteringByteChannel} interface.  </p>\n     ",
    "links" : [ "java.nio.channels.ScatteringByteChannel" ]
  }, {
    "name" : "public final long read(ByteBuffer[] dsts) throws IOException",
    "returnType" : "long",
    "comment" : "\n     * Reads a sequence of bytes from this channel into the given buffers.\n     *\n     * <p> Bytes are read starting at this channel's current file position, and\n     * then the file position is updated with the number of bytes actually\n     * read.  Otherwise this method behaves exactly as specified in the {@link\n     * ScatteringByteChannel} interface.  </p>\n     ",
    "links" : [ "java.nio.channels.ScatteringByteChannel" ]
  }, {
    "name" : "public abstract int write(ByteBuffer src) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Writes a sequence of bytes to this channel from the given buffer.\n     *\n     * <p> Bytes are written starting at this channel's current file position\n     * unless the channel is in append mode, in which case the position is\n     * first advanced to the end of the file.  The file is grown, if necessary,\n     * to accommodate the written bytes, and then the file position is updated\n     * with the number of bytes actually written.  Otherwise this method\n     * behaves exactly as specified by the {@link WritableByteChannel}\n     * interface. </p>\n     ",
    "links" : [ "java.nio.channels.WritableByteChannel" ]
  }, {
    "name" : "public abstract long write(ByteBuffer[] srcs, int offset, int length) throws IOException",
    "returnType" : "long",
    "comment" : "\n     * Writes a sequence of bytes to this channel from a subsequence of the\n     * given buffers.\n     *\n     * <p> Bytes are written starting at this channel's current file position\n     * unless the channel is in append mode, in which case the position is\n     * first advanced to the end of the file.  The file is grown, if necessary,\n     * to accommodate the written bytes, and then the file position is updated\n     * with the number of bytes actually written.  Otherwise this method\n     * behaves exactly as specified in the {@link GatheringByteChannel}\n     * interface.  </p>\n     ",
    "links" : [ "java.nio.channels.GatheringByteChannel" ]
  }, {
    "name" : "public final long write(ByteBuffer[] srcs) throws IOException",
    "returnType" : "long",
    "comment" : "\n     * Writes a sequence of bytes to this channel from the given buffers.\n     *\n     * <p> Bytes are written starting at this channel's current file position\n     * unless the channel is in append mode, in which case the position is\n     * first advanced to the end of the file.  The file is grown, if necessary,\n     * to accommodate the written bytes, and then the file position is updated\n     * with the number of bytes actually written.  Otherwise this method\n     * behaves exactly as specified in the {@link GatheringByteChannel}\n     * interface.  </p>\n     ",
    "links" : [ "java.nio.channels.GatheringByteChannel" ]
  }, {
    "name" : "public abstract long position() throws IOException",
    "returnType" : "long",
    "comment" : "\n     * Returns this channel's file position.\n     *\n     * @return  This channel's file position,\n     *          a non-negative integer counting the number of bytes\n     *          from the beginning of the file to the current position\n     *\n     * @throws  ClosedChannelException\n     *          If this channel is closed\n     *\n     * @throws  IOException\n     *          If some other I/O error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract FileChannel position(long newPosition) throws IOException",
    "returnType" : "FileChannel",
    "comment" : "\n     * Sets this channel's file position.\n     *\n     * <p> Setting the position to a value that is greater than the file's\n     * current size is legal but does not change the size of the file.  A later\n     * attempt to read bytes at such a position will immediately return an\n     * end-of-file indication.  A later attempt to write bytes at such a\n     * position will cause the file to be grown to accommodate the new bytes;\n     * the values of any bytes between the previous end-of-file and the\n     * newly-written bytes are unspecified.  </p>\n     *\n     * @param  newPosition\n     *         The new position, a non-negative integer counting\n     *         the number of bytes from the beginning of the file\n     *\n     * @return  This file channel\n     *\n     * @throws  ClosedChannelException\n     *          If this channel is closed\n     *\n     * @throws  IllegalArgumentException\n     *          If the new position is negative\n     *\n     * @throws  IOException\n     *          If some other I/O error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract long size() throws IOException",
    "returnType" : "long",
    "comment" : "\n     * Returns the current size of this channel's file.\n     *\n     * @return  The current size of this channel's file,\n     *          measured in bytes\n     *\n     * @throws  ClosedChannelException\n     *          If this channel is closed\n     *\n     * @throws  IOException\n     *          If some other I/O error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract FileChannel truncate(long size) throws IOException",
    "returnType" : "FileChannel",
    "comment" : "\n     * Truncates this channel's file to the given size.\n     *\n     * <p> If the given size is less than the file's current size then the file\n     * is truncated, discarding any bytes beyond the new end of the file.  If\n     * the given size is greater than or equal to the file's current size then\n     * the file is not modified.  In either case, if this channel's file\n     * position is greater than the given size then it is set to that size.\n     * </p>\n     *\n     * @param  size\n     *         The new size, a non-negative byte count\n     *\n     * @return  This file channel\n     *\n     * @throws  NonWritableChannelException\n     *          If this channel was not opened for writing\n     *\n     * @throws  ClosedChannelException\n     *          If this channel is closed\n     *\n     * @throws  IllegalArgumentException\n     *          If the new size is negative\n     *\n     * @throws  IOException\n     *          If some other I/O error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void force(boolean metaData) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Forces any updates to this channel's file to be written to the storage\n     * device that contains it.\n     *\n     * <p> If this channel's file resides on a local storage device then when\n     * this method returns it is guaranteed that all changes made to the file\n     * since this channel was created, or since this method was last invoked,\n     * will have been written to that device.  This is useful for ensuring that\n     * critical information is not lost in the event of a system crash.\n     *\n     * <p> If the file does not reside on a local device then no such guarantee\n     * is made.\n     *\n     * <p> The {@code metaData} parameter can be used to limit the number of\n     * I/O operations that this method is required to perform.  Passing\n     * {@code false} for this parameter indicates that only updates to the\n     * file's content need be written to storage; passing {@code true}\n     * indicates that updates to both the file's content and metadata must be\n     * written, which generally requires at least one more I/O operation.\n     * Whether this parameter actually has any effect is dependent upon the\n     * underlying operating system and is therefore unspecified.\n     *\n     * <p> Invoking this method may cause an I/O operation to occur even if the\n     * channel was only opened for reading.  Some operating systems, for\n     * example, maintain a last-access time as part of a file's metadata, and\n     * this time is updated whenever the file is read.  Whether or not this is\n     * actually done is system-dependent and is therefore unspecified.\n     *\n     * <p> This method is only guaranteed to force changes that were made to\n     * this channel's file via the methods defined in this class.  It may or\n     * may not force changes that were made by modifying the content of a\n     * {@link MappedByteBuffer <i>mapped byte buffer</i>} obtained by\n     * invoking the {@link #map map} method.  Invoking the {@link\n     * MappedByteBuffer#force force} method of the mapped byte buffer will\n     * force changes made to the buffer's content to be written.  </p>\n     *\n     * @param   metaData\n     *          If {@code true} then this method is required to force changes\n     *          to both the file's content and metadata to be written to\n     *          storage; otherwise, it need only force content changes to be\n     *          written\n     *\n     * @throws  ClosedChannelException\n     *          If this channel is closed\n     *\n     * @throws  IOException\n     *          If some other I/O error occurs\n     ",
    "links" : [ "#map", "java.nio.MappedByteBuffer#force", "java.nio.MappedByteBuffer" ]
  }, {
    "name" : "public abstract long transferTo(long position, long count, WritableByteChannel target) throws IOException",
    "returnType" : "long",
    "comment" : "\n     * Transfers bytes from this channel's file to the given writable byte\n     * channel.\n     *\n     * <p> An attempt is made to read up to {@code count} bytes starting at\n     * the given {@code position} in this channel's file and write them to the\n     * target channel.  An invocation of this method may or may not transfer\n     * all of the requested bytes; whether or not it does so depends upon the\n     * natures and states of the channels.  Fewer than the requested number of\n     * bytes are transferred if this channel's file contains fewer than\n     * {@code count} bytes starting at the given {@code position}, or if the\n     * target channel is non-blocking and it has fewer than {@code count}\n     * bytes free in its output buffer.\n     *\n     * <p> This method does not modify this channel's position.  If the given\n     * position is greater than the file's current size then no bytes are\n     * transferred.  If the target channel has a position then bytes are\n     * written starting at that position and then the position is incremented\n     * by the number of bytes written.\n     *\n     * <p> This method is potentially much more efficient than a simple loop\n     * that reads from this channel and writes to the target channel.  Many\n     * operating systems can transfer bytes directly from the filesystem cache\n     * to the target channel without actually copying them.  </p>\n     *\n     * @param  position\n     *         The position within the file at which the transfer is to begin;\n     *         must be non-negative\n     *\n     * @param  count\n     *         The maximum number of bytes to be transferred; must be\n     *         non-negative\n     *\n     * @param  target\n     *         The target channel\n     *\n     * @return  The number of bytes, possibly zero,\n     *          that were actually transferred\n     *\n     * @throws IllegalArgumentException\n     *         If the preconditions on the parameters do not hold\n     *\n     * @throws  NonReadableChannelException\n     *          If this channel was not opened for reading\n     *\n     * @throws  NonWritableChannelException\n     *          If the target channel was not opened for writing\n     *\n     * @throws  ClosedChannelException\n     *          If either this channel or the target channel is closed\n     *\n     * @throws  AsynchronousCloseException\n     *          If another thread closes either channel\n     *          while the transfer is in progress\n     *\n     * @throws  ClosedByInterruptException\n     *          If another thread interrupts the current thread while the\n     *          transfer is in progress, thereby closing both channels and\n     *          setting the current thread's interrupt status\n     *\n     * @throws  IOException\n     *          If some other I/O error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract long transferFrom(ReadableByteChannel src, long position, long count) throws IOException",
    "returnType" : "long",
    "comment" : "\n     * Transfers bytes into this channel's file from the given readable byte\n     * channel.\n     *\n     * <p> An attempt is made to read up to {@code count} bytes from the\n     * source channel and write them to this channel's file starting at the\n     * given {@code position}.  An invocation of this method may or may not\n     * transfer all of the requested bytes; whether or not it does so depends\n     * upon the natures and states of the channels.  Fewer than the requested\n     * number of bytes will be transferred if the source channel has fewer than\n     * {@code count} bytes remaining, or if the source channel is non-blocking\n     * and has fewer than {@code count} bytes immediately available in its\n     * input buffer.\n     *\n     * <p> This method does not modify this channel's position.  If the given\n     * position is greater than the file's current size then no bytes are\n     * transferred.  If the source channel has a position then bytes are read\n     * starting at that position and then the position is incremented by the\n     * number of bytes read.\n     *\n     * <p> This method is potentially much more efficient than a simple loop\n     * that reads from the source channel and writes to this channel.  Many\n     * operating systems can transfer bytes directly from the source channel\n     * into the filesystem cache without actually copying them.  </p>\n     *\n     * @param  src\n     *         The source channel\n     *\n     * @param  position\n     *         The position within the file at which the transfer is to begin;\n     *         must be non-negative\n     *\n     * @param  count\n     *         The maximum number of bytes to be transferred; must be\n     *         non-negative\n     *\n     * @return  The number of bytes, possibly zero,\n     *          that were actually transferred\n     *\n     * @throws IllegalArgumentException\n     *         If the preconditions on the parameters do not hold\n     *\n     * @throws  NonReadableChannelException\n     *          If the source channel was not opened for reading\n     *\n     * @throws  NonWritableChannelException\n     *          If this channel was not opened for writing\n     *\n     * @throws  ClosedChannelException\n     *          If either this channel or the source channel is closed\n     *\n     * @throws  AsynchronousCloseException\n     *          If another thread closes either channel\n     *          while the transfer is in progress\n     *\n     * @throws  ClosedByInterruptException\n     *          If another thread interrupts the current thread while the\n     *          transfer is in progress, thereby closing both channels and\n     *          setting the current thread's interrupt status\n     *\n     * @throws  IOException\n     *          If some other I/O error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int read(ByteBuffer dst, long position) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Reads a sequence of bytes from this channel into the given buffer,\n     * starting at the given file position.\n     *\n     * <p> This method works in the same manner as the {@link\n     * #read(ByteBuffer)} method, except that bytes are read starting at the\n     * given file position rather than at the channel's current position.  This\n     * method does not modify this channel's position.  If the given position\n     * is greater than the file's current size then no bytes are read.  </p>\n     *\n     * @param  dst\n     *         The buffer into which bytes are to be transferred\n     *\n     * @param  position\n     *         The file position at which the transfer is to begin;\n     *         must be non-negative\n     *\n     * @return  The number of bytes read, possibly zero, or {@code -1} if the\n     *          given position is greater than or equal to the file's current\n     *          size\n     *\n     * @throws  IllegalArgumentException\n     *          If the position is negative\n     *\n     * @throws  NonReadableChannelException\n     *          If this channel was not opened for reading\n     *\n     * @throws  ClosedChannelException\n     *          If this channel is closed\n     *\n     * @throws  AsynchronousCloseException\n     *          If another thread closes this channel\n     *          while the read operation is in progress\n     *\n     * @throws  ClosedByInterruptException\n     *          If another thread interrupts the current thread\n     *          while the read operation is in progress, thereby\n     *          closing the channel and setting the current thread's\n     *          interrupt status\n     *\n     * @throws  IOException\n     *          If some other I/O error occurs\n     ",
    "links" : [ "#read(ByteBuffer)" ]
  }, {
    "name" : "public abstract int write(ByteBuffer src, long position) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Writes a sequence of bytes to this channel from the given buffer,\n     * starting at the given file position.\n     *\n     * <p> This method works in the same manner as the {@link\n     * #write(ByteBuffer)} method, except that bytes are written starting at\n     * the given file position rather than at the channel's current position.\n     * This method does not modify this channel's position.  If the given\n     * position is greater than the file's current size then the file will be\n     * grown to accommodate the new bytes; the values of any bytes between the\n     * previous end-of-file and the newly-written bytes are unspecified.  </p>\n     *\n     * @param  src\n     *         The buffer from which bytes are to be transferred\n     *\n     * @param  position\n     *         The file position at which the transfer is to begin;\n     *         must be non-negative\n     *\n     * @return  The number of bytes written, possibly zero\n     *\n     * @throws  IllegalArgumentException\n     *          If the position is negative\n     *\n     * @throws  NonWritableChannelException\n     *          If this channel was not opened for writing\n     *\n     * @throws  ClosedChannelException\n     *          If this channel is closed\n     *\n     * @throws  AsynchronousCloseException\n     *          If another thread closes this channel\n     *          while the write operation is in progress\n     *\n     * @throws  ClosedByInterruptException\n     *          If another thread interrupts the current thread\n     *          while the write operation is in progress, thereby\n     *          closing the channel and setting the current thread's\n     *          interrupt status\n     *\n     * @throws  IOException\n     *          If some other I/O error occurs\n     ",
    "links" : [ "#write(ByteBuffer)" ]
  }, {
    "name" : "public abstract MappedByteBuffer map(MapMode mode, long position, long size) throws IOException",
    "returnType" : "MappedByteBuffer",
    "comment" : "\n     * Maps a region of this channel's file directly into memory.\n     *\n     * <p> A region of a file may be mapped into memory in one of three modes:\n     * </p>\n     *\n     * <ul>\n     *\n     *   <li><p> <i>Read-only:</i> Any attempt to modify the resulting buffer\n     *   will cause a {@link java.nio.ReadOnlyBufferException} to be thrown.\n     *   ({@link MapMode#READ_ONLY MapMode.READ_ONLY}) </p></li>\n     *\n     *   <li><p> <i>Read/write:</i> Changes made to the resulting buffer will\n     *   eventually be propagated to the file; they may or may not be made\n     *   visible to other programs that have mapped the same file.  ({@link\n     *   MapMode#READ_WRITE MapMode.READ_WRITE}) </p></li>\n     *\n     *   <li><p> <i>Private:</i> Changes made to the resulting buffer will not\n     *   be propagated to the file and will not be visible to other programs\n     *   that have mapped the same file; instead, they will cause private\n     *   copies of the modified portions of the buffer to be created.  ({@link\n     *   MapMode#PRIVATE MapMode.PRIVATE}) </p></li>\n     *\n     * </ul>\n     *\n     * <p> For a read-only mapping, this channel must have been opened for\n     * reading; for a read/write or private mapping, this channel must have\n     * been opened for both reading and writing.\n     *\n     * <p> The {@link MappedByteBuffer <i>mapped byte buffer</i>}\n     * returned by this method will have a position of zero and a limit and\n     * capacity of {@code size}; its mark will be undefined.  The buffer and\n     * the mapping that it represents will remain valid until the buffer itself\n     * is garbage-collected.\n     *\n     * <p> A mapping, once established, is not dependent upon the file channel\n     * that was used to create it.  Closing the channel, in particular, has no\n     * effect upon the validity of the mapping.\n     *\n     * <p> Many of the details of memory-mapped files are inherently dependent\n     * upon the underlying operating system and are therefore unspecified.  The\n     * behavior of this method when the requested region is not completely\n     * contained within this channel's file is unspecified.  Whether changes\n     * made to the content or size of the underlying file, by this program or\n     * another, are propagated to the buffer is unspecified.  The rate at which\n     * changes to the buffer are propagated to the file is unspecified.\n     *\n     * <p> For most operating systems, mapping a file into memory is more\n     * expensive than reading or writing a few tens of kilobytes of data via\n     * the usual {@link #read read} and {@link #write write} methods.  From the\n     * standpoint of performance it is generally only worth mapping relatively\n     * large files into memory.  </p>\n     *\n     * @param  mode\n     *         One of the constants {@link MapMode#READ_ONLY READ_ONLY}, {@link\n     *         MapMode#READ_WRITE READ_WRITE}, or {@link MapMode#PRIVATE\n     *         PRIVATE} defined in the {@link MapMode} class, according to\n     *         whether the file is to be mapped read-only, read/write, or\n     *         privately (copy-on-write), respectively\n     *\n     * @param  position\n     *         The position within the file at which the mapped region\n     *         is to start; must be non-negative\n     *\n     * @param  size\n     *         The size of the region to be mapped; must be non-negative and\n     *         no greater than {@link java.lang.Integer#MAX_VALUE}\n     *\n     * @return  The mapped byte buffer\n     *\n     * @throws NonReadableChannelException\n     *         If the {@code mode} is {@link MapMode#READ_ONLY READ_ONLY} but\n     *         this channel was not opened for reading\n     *\n     * @throws NonWritableChannelException\n     *         If the {@code mode} is {@link MapMode#READ_WRITE READ_WRITE} or\n     *         {@link MapMode#PRIVATE PRIVATE} but this channel was not opened\n     *         for both reading and writing\n     *\n     * @throws IllegalArgumentException\n     *         If the preconditions on the parameters do not hold\n     *\n     * @throws IOException\n     *         If some other I/O error occurs\n     *\n     * @see java.nio.channels.FileChannel.MapMode\n     * @see java.nio.MappedByteBuffer\n     ",
    "links" : [ "#READ_WRITE", "#PRIVATE", "#READ_ONLY", "#write", "#PRIVATEPRIVATE", "#read", "MapMode", "java.nio.ReadOnlyBufferException", "java.nio.MappedByteBuffer", "java.lang.Integer#MAX_VALUE" ]
  }, {
    "name" : "public abstract FileLock lock(long position, long size, boolean shared) throws IOException",
    "returnType" : "FileLock",
    "comment" : "\n     * Acquires a lock on the given region of this channel's file.\n     *\n     * <p> An invocation of this method will block until the region can be\n     * locked, this channel is closed, or the invoking thread is interrupted,\n     * whichever comes first.\n     *\n     * <p> If this channel is closed by another thread during an invocation of\n     * this method then an {@link AsynchronousCloseException} will be thrown.\n     *\n     * <p> If the invoking thread is interrupted while waiting to acquire the\n     * lock then its interrupt status will be set and a {@link\n     * FileLockInterruptionException} will be thrown.  If the invoker's\n     * interrupt status is set when this method is invoked then that exception\n     * will be thrown immediately; the thread's interrupt status will not be\n     * changed.\n     *\n     * <p> The region specified by the {@code position} and {@code size}\n     * parameters need not be contained within, or even overlap, the actual\n     * underlying file.  Lock regions are fixed in size; if a locked region\n     * initially contains the end of the file and the file grows beyond the\n     * region then the new portion of the file will not be covered by the lock.\n     * If a file is expected to grow in size and a lock on the entire file is\n     * required then a region starting at zero, and no smaller than the\n     * expected maximum size of the file, should be locked.  The zero-argument\n     * {@link #lock()} method simply locks a region of size {@link\n     * Long#MAX_VALUE}.\n     *\n     * <p> Some operating systems do not support shared locks, in which case a\n     * request for a shared lock is automatically converted into a request for\n     * an exclusive lock.  Whether the newly-acquired lock is shared or\n     * exclusive may be tested by invoking the resulting lock object's {@link\n     * FileLock#isShared() isShared} method.\n     *\n     * <p> File locks are held on behalf of the entire Java virtual machine.\n     * They are not suitable for controlling access to a file by multiple\n     * threads within the same virtual machine.  </p>\n     *\n     * @param  position\n     *         The position at which the locked region is to start; must be\n     *         non-negative\n     *\n     * @param  size\n     *         The size of the locked region; must be non-negative, and the sum\n     *         {@code position}&nbsp;+&nbsp;{@code size} must be non-negative\n     *\n     * @param  shared\n     *         {@code true} to request a shared lock, in which case this\n     *         channel must be open for reading (and possibly writing);\n     *         {@code false} to request an exclusive lock, in which case this\n     *         channel must be open for writing (and possibly reading)\n     *\n     * @return  A lock object representing the newly-acquired lock\n     *\n     * @throws  IllegalArgumentException\n     *          If the preconditions on the parameters do not hold\n     *\n     * @throws  ClosedChannelException\n     *          If this channel is closed\n     *\n     * @throws  AsynchronousCloseException\n     *          If another thread closes this channel while the invoking\n     *          thread is blocked in this method\n     *\n     * @throws  FileLockInterruptionException\n     *          If the invoking thread is interrupted while blocked in this\n     *          method\n     *\n     * @throws  OverlappingFileLockException\n     *          If a lock that overlaps the requested region is already held by\n     *          this Java virtual machine, or if another thread is already\n     *          blocked in this method and is attempting to lock an overlapping\n     *          region\n     *\n     * @throws  NonReadableChannelException\n     *          If {@code shared} is {@code true} this channel was not\n     *          opened for reading\n     *\n     * @throws  NonWritableChannelException\n     *          If {@code shared} is {@code false} but this channel was not\n     *          opened for writing\n     *\n     * @throws  IOException\n     *          If some other I/O error occurs\n     *\n     * @see     #lock()\n     * @see     #tryLock()\n     * @see     #tryLock(long,long,boolean)\n     ",
    "links" : [ "java.nio.channels.FileLockInterruptionException", "java.nio.channels.AsynchronousCloseException", "#MAX_VALUE", "java.nio.channels.FileLock#isShared()", "#lock()" ]
  }, {
    "name" : "public final FileLock lock() throws IOException",
    "returnType" : "FileLock",
    "comment" : "\n     * Acquires an exclusive lock on this channel's file.\n     *\n     * <p> An invocation of this method of the form {@code fc.lock()} behaves\n     * in exactly the same way as the invocation\n     *\n     * <pre>\n     *     fc.{@link #lock(long,long,boolean) lock}(0L, Long.MAX_VALUE, false) </pre>\n     *\n     * @return  A lock object representing the newly-acquired lock\n     *\n     * @throws  ClosedChannelException\n     *          If this channel is closed\n     *\n     * @throws  AsynchronousCloseException\n     *          If another thread closes this channel while the invoking\n     *          thread is blocked in this method\n     *\n     * @throws  FileLockInterruptionException\n     *          If the invoking thread is interrupted while blocked in this\n     *          method\n     *\n     * @throws  OverlappingFileLockException\n     *          If a lock that overlaps the requested region is already held by\n     *          this Java virtual machine, or if another thread is already\n     *          blocked in this method and is attempting to lock an overlapping\n     *          region of the same file\n     *\n     * @throws  NonWritableChannelException\n     *          If this channel was not opened for writing\n     *\n     * @throws  IOException\n     *          If some other I/O error occurs\n     *\n     * @see     #lock(long,long,boolean)\n     * @see     #tryLock()\n     * @see     #tryLock(long,long,boolean)\n     ",
    "links" : [ "#lock(long" ]
  }, {
    "name" : "public abstract FileLock tryLock(long position, long size, boolean shared) throws IOException",
    "returnType" : "FileLock",
    "comment" : "\n     * Attempts to acquire a lock on the given region of this channel's file.\n     *\n     * <p> This method does not block.  An invocation always returns\n     * immediately, either having acquired a lock on the requested region or\n     * having failed to do so.  If it fails to acquire a lock because an\n     * overlapping lock is held by another program then it returns\n     * {@code null}.  If it fails to acquire a lock for any other reason then\n     * an appropriate exception is thrown.\n     *\n     * <p> The region specified by the {@code position} and {@code size}\n     * parameters need not be contained within, or even overlap, the actual\n     * underlying file.  Lock regions are fixed in size; if a locked region\n     * initially contains the end of the file and the file grows beyond the\n     * region then the new portion of the file will not be covered by the lock.\n     * If a file is expected to grow in size and a lock on the entire file is\n     * required then a region starting at zero, and no smaller than the\n     * expected maximum size of the file, should be locked.  The zero-argument\n     * {@link #tryLock()} method simply locks a region of size {@link\n     * Long#MAX_VALUE}.\n     *\n     * <p> Some operating systems do not support shared locks, in which case a\n     * request for a shared lock is automatically converted into a request for\n     * an exclusive lock.  Whether the newly-acquired lock is shared or\n     * exclusive may be tested by invoking the resulting lock object's {@link\n     * FileLock#isShared() isShared} method.\n     *\n     * <p> File locks are held on behalf of the entire Java virtual machine.\n     * They are not suitable for controlling access to a file by multiple\n     * threads within the same virtual machine.  </p>\n     *\n     * @param  position\n     *         The position at which the locked region is to start; must be\n     *         non-negative\n     *\n     * @param  size\n     *         The size of the locked region; must be non-negative, and the sum\n     *         {@code position}&nbsp;+&nbsp;{@code size} must be non-negative\n     *\n     * @param  shared\n     *         {@code true} to request a shared lock,\n     *         {@code false} to request an exclusive lock\n     *\n     * @return  A lock object representing the newly-acquired lock,\n     *          or {@code null} if the lock could not be acquired\n     *          because another program holds an overlapping lock\n     *\n     * @throws  IllegalArgumentException\n     *          If the preconditions on the parameters do not hold\n     *\n     * @throws  ClosedChannelException\n     *          If this channel is closed\n     *\n     * @throws  OverlappingFileLockException\n     *          If a lock that overlaps the requested region is already held by\n     *          this Java virtual machine, or if another thread is already\n     *          blocked in this method and is attempting to lock an overlapping\n     *          region of the same file\n     *\n     * @throws  IOException\n     *          If some other I/O error occurs\n     *\n     * @see     #lock()\n     * @see     #lock(long,long,boolean)\n     * @see     #tryLock()\n     ",
    "links" : [ "#MAX_VALUE", "#tryLock()", "java.nio.channels.FileLock#isShared()" ]
  }, {
    "name" : "public final FileLock tryLock() throws IOException",
    "returnType" : "FileLock",
    "comment" : "\n     * Attempts to acquire an exclusive lock on this channel's file.\n     *\n     * <p> An invocation of this method of the form {@code fc.tryLock()}\n     * behaves in exactly the same way as the invocation\n     *\n     * <pre>\n     *     fc.{@link #tryLock(long,long,boolean) tryLock}(0L, Long.MAX_VALUE, false) </pre>\n     *\n     * @return  A lock object representing the newly-acquired lock,\n     *          or {@code null} if the lock could not be acquired\n     *          because another program holds an overlapping lock\n     *\n     * @throws  ClosedChannelException\n     *          If this channel is closed\n     *\n     * @throws  OverlappingFileLockException\n     *          If a lock that overlaps the requested region is already held by\n     *          this Java virtual machine, or if another thread is already\n     *          blocked in this method and is attempting to lock an overlapping\n     *          region\n     *\n     * @throws  IOException\n     *          If some other I/O error occurs\n     *\n     * @see     #lock()\n     * @see     #lock(long,long,boolean)\n     * @see     #tryLock(long,long,boolean)\n     ",
    "links" : [ "#tryLock(long" ]
  } ],
  "methodNames" : [ "public static FileChannel open(Path path, Set<? extends OpenOption> options, FileAttribute<?>... attrs) throws IOException", "public static FileChannel open(Path path, OpenOption... options) throws IOException", "public abstract int read(ByteBuffer dst) throws IOException", "public abstract long read(ByteBuffer[] dsts, int offset, int length) throws IOException", "public final long read(ByteBuffer[] dsts) throws IOException", "public abstract int write(ByteBuffer src) throws IOException", "public abstract long write(ByteBuffer[] srcs, int offset, int length) throws IOException", "public final long write(ByteBuffer[] srcs) throws IOException", "public abstract long position() throws IOException", "public abstract FileChannel position(long newPosition) throws IOException", "public abstract long size() throws IOException", "public abstract FileChannel truncate(long size) throws IOException", "public abstract void force(boolean metaData) throws IOException", "public abstract long transferTo(long position, long count, WritableByteChannel target) throws IOException", "public abstract long transferFrom(ReadableByteChannel src, long position, long count) throws IOException", "public abstract int read(ByteBuffer dst, long position) throws IOException", "public abstract int write(ByteBuffer src, long position) throws IOException", "public abstract MappedByteBuffer map(MapMode mode, long position, long size) throws IOException", "public abstract FileLock lock(long position, long size, boolean shared) throws IOException", "public final FileLock lock() throws IOException", "public abstract FileLock tryLock(long position, long size, boolean shared) throws IOException", "public final FileLock tryLock() throws IOException" ],
  "variableNames" : [ "NO_ATTRIBUTES" ]
}