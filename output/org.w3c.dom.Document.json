{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/w3c/dom/Document.java",
  "packageName" : "org.w3c.dom",
  "className" : "Document",
  "comment" : "\n * The <code>Document</code> interface represents the entire HTML or XML\n * document. Conceptually, it is the root of the document tree, and provides\n * the primary access to the document's data.\n * <p>Since elements, text nodes, comments, processing instructions, etc.\n * cannot exist outside the context of a <code>Document</code>, the\n * <code>Document</code> interface also contains the factory methods needed\n * to create these objects. The <code>Node</code> objects created have a\n * <code>ownerDocument</code> attribute which associates them with the\n * <code>Document</code> within whose context they were created.\n * <p>See also the <a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>Document Object Model (DOM) Level 3 Core Specification</a>.\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public DocumentType getDoctype()",
    "returnType" : "DocumentType",
    "comment" : "\n     * The Document Type Declaration (see <code>DocumentType</code>)\n     * associated with this document. For XML documents without a document\n     * type declaration this returns <code>null</code>. For HTML documents,\n     * a <code>DocumentType</code> object may be returned, independently of\n     * the presence or absence of document type declaration in the HTML\n     * document.\n     * <br>This provides direct access to the <code>DocumentType</code> node,\n     * child node of this <code>Document</code>. This node can be set at\n     * document creation time and later changed through the use of child\n     * nodes manipulation methods, such as <code>Node.insertBefore</code>,\n     * or <code>Node.replaceChild</code>. Note, however, that while some\n     * implementations may instantiate different types of\n     * <code>Document</code> objects supporting additional features than the\n     * \"Core\", such as \"HTML\" [<a href='http://www.w3.org/TR/2003/REC-DOM-Level-2-HTML-20030109'>DOM Level 2 HTML</a>]\n     * , based on the <code>DocumentType</code> specified at creation time,\n     * changing it afterwards is very unlikely to result in a change of the\n     * features supported.\n     * @version DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "public DOMImplementation getImplementation()",
    "returnType" : "DOMImplementation",
    "comment" : "\n     * The <code>DOMImplementation</code> object that handles this document. A\n     * DOM application may use objects from multiple implementations.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Element getDocumentElement()",
    "returnType" : "Element",
    "comment" : "\n     * This is a convenience attribute that allows direct access to the child\n     * node that is the document element of the document.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Element createElement(String tagName) throws DOMException",
    "returnType" : "Element",
    "comment" : "\n     * Creates an element of the type specified. Note that the instance\n     * returned implements the <code>Element</code> interface, so attributes\n     * can be specified directly on the returned object.\n     * <br>In addition, if there are known attributes with default values,\n     * <code>Attr</code> nodes representing them are automatically created\n     * and attached to the element.\n     * <br>To create an element with a qualified name and namespace URI, use\n     * the <code>createElementNS</code> method.\n     * @param tagName The name of the element type to instantiate. For XML,\n     *   this is case-sensitive, otherwise it depends on the\n     *   case-sensitivity of the markup language in use. In that case, the\n     *   name is mapped to the canonical form of that markup by the DOM\n     *   implementation.\n     * @return A new <code>Element</code> object with the\n     *   <code>nodeName</code> attribute set to <code>tagName</code>, and\n     *   <code>localName</code>, <code>prefix</code>, and\n     *   <code>namespaceURI</code> set to <code>null</code>.\n     * @exception DOMException\n     *   INVALID_CHARACTER_ERR: Raised if the specified name is not an XML\n     *   name according to the XML version in use specified in the\n     *   <code>Document.xmlVersion</code> attribute.\n     ",
    "links" : [ ]
  }, {
    "name" : "public DocumentFragment createDocumentFragment()",
    "returnType" : "DocumentFragment",
    "comment" : "\n     * Creates an empty <code>DocumentFragment</code> object.\n     * @return A new <code>DocumentFragment</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Text createTextNode(String data)",
    "returnType" : "Text",
    "comment" : "\n     * Creates a <code>Text</code> node given the specified string.\n     * @param data The data for the node.\n     * @return The new <code>Text</code> object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Comment createComment(String data)",
    "returnType" : "Comment",
    "comment" : "\n     * Creates a <code>Comment</code> node given the specified string.\n     * @param data The data for the node.\n     * @return The new <code>Comment</code> object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public CDATASection createCDATASection(String data) throws DOMException",
    "returnType" : "CDATASection",
    "comment" : "\n     * Creates a <code>CDATASection</code> node whose value is the specified\n     * string.\n     * @param data The data for the <code>CDATASection</code> contents.\n     * @return The new <code>CDATASection</code> object.\n     * @exception DOMException\n     *   NOT_SUPPORTED_ERR: Raised if this document is an HTML document.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ProcessingInstruction createProcessingInstruction(String target, String data) throws DOMException",
    "returnType" : "ProcessingInstruction",
    "comment" : "\n     * Creates a <code>ProcessingInstruction</code> node given the specified\n     * name and data strings.\n     * @param target The target part of the processing instruction.Unlike\n     *   <code>Document.createElementNS</code> or\n     *   <code>Document.createAttributeNS</code>, no namespace well-formed\n     *   checking is done on the target name. Applications should invoke\n     *   <code>Document.normalizeDocument()</code> with the parameter \"\n     *   namespaces\" set to <code>true</code> in order to ensure that the\n     *   target name is namespace well-formed.\n     * @param data The data for the node.\n     * @return The new <code>ProcessingInstruction</code> object.\n     * @exception DOMException\n     *   INVALID_CHARACTER_ERR: Raised if the specified target is not an XML\n     *   name according to the XML version in use specified in the\n     *   <code>Document.xmlVersion</code> attribute.\n     *   <br>NOT_SUPPORTED_ERR: Raised if this document is an HTML document.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Attr createAttribute(String name) throws DOMException",
    "returnType" : "Attr",
    "comment" : "\n     * Creates an <code>Attr</code> of the given name. Note that the\n     * <code>Attr</code> instance can then be set on an <code>Element</code>\n     * using the <code>setAttributeNode</code> method.\n     * <br>To create an attribute with a qualified name and namespace URI, use\n     * the <code>createAttributeNS</code> method.\n     * @param name The name of the attribute.\n     * @return A new <code>Attr</code> object with the <code>nodeName</code>\n     *   attribute set to <code>name</code>, and <code>localName</code>,\n     *   <code>prefix</code>, and <code>namespaceURI</code> set to\n     *   <code>null</code>. The value of the attribute is the empty string.\n     * @exception DOMException\n     *   INVALID_CHARACTER_ERR: Raised if the specified name is not an XML\n     *   name according to the XML version in use specified in the\n     *   <code>Document.xmlVersion</code> attribute.\n     ",
    "links" : [ ]
  }, {
    "name" : "public EntityReference createEntityReference(String name) throws DOMException",
    "returnType" : "EntityReference",
    "comment" : "\n     * Creates an <code>EntityReference</code> object. In addition, if the\n     * referenced entity is known, the child list of the\n     * <code>EntityReference</code> node is made the same as that of the\n     * corresponding <code>Entity</code> node.\n     * <p ><b>Note:</b> If any descendant of the <code>Entity</code> node has\n     * an unbound namespace prefix, the corresponding descendant of the\n     * created <code>EntityReference</code> node is also unbound; (its\n     * <code>namespaceURI</code> is <code>null</code>). The DOM Level 2 and\n     * 3 do not support any mechanism to resolve namespace prefixes in this\n     * case.\n     * @param name The name of the entity to reference.Unlike\n     *   <code>Document.createElementNS</code> or\n     *   <code>Document.createAttributeNS</code>, no namespace well-formed\n     *   checking is done on the entity name. Applications should invoke\n     *   <code>Document.normalizeDocument()</code> with the parameter \"\n     *   namespaces\" set to <code>true</code> in order to ensure that the\n     *   entity name is namespace well-formed.\n     * @return The new <code>EntityReference</code> object.\n     * @exception DOMException\n     *   INVALID_CHARACTER_ERR: Raised if the specified name is not an XML\n     *   name according to the XML version in use specified in the\n     *   <code>Document.xmlVersion</code> attribute.\n     *   <br>NOT_SUPPORTED_ERR: Raised if this document is an HTML document.\n     ",
    "links" : [ ]
  }, {
    "name" : "public NodeList getElementsByTagName(String tagname)",
    "returnType" : "NodeList",
    "comment" : "\n     * Returns a <code>NodeList</code> of all the <code>Elements</code> in\n     * document order with a given tag name and are contained in the\n     * document.\n     * @param tagname  The name of the tag to match on. The special value \"*\"\n     *   matches all tags. For XML, the <code>tagname</code> parameter is\n     *   case-sensitive, otherwise it depends on the case-sensitivity of the\n     *   markup language in use.\n     * @return A new <code>NodeList</code> object containing all the matched\n     *   <code>Elements</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Node importNode(Node importedNode, boolean deep) throws DOMException",
    "returnType" : "Node",
    "comment" : "\n     * Imports a node from another document to this document, without altering\n     * or removing the source node from the original document; this method\n     * creates a new copy of the source node. The returned node has no\n     * parent; (<code>parentNode</code> is <code>null</code>).\n     * <br>For all nodes, importing a node creates a node object owned by the\n     * importing document, with attribute values identical to the source\n     * node's <code>nodeName</code> and <code>nodeType</code>, plus the\n     * attributes related to namespaces (<code>prefix</code>,\n     * <code>localName</code>, and <code>namespaceURI</code>). As in the\n     * <code>cloneNode</code> operation, the source node is not altered.\n     * User data associated to the imported node is not carried over.\n     * However, if any <code>UserDataHandlers</code> has been specified\n     * along with the associated data these handlers will be called with the\n     * appropriate parameters before this method returns.\n     * <br>Additional information is copied as appropriate to the\n     * <code>nodeType</code>, attempting to mirror the behavior expected if\n     * a fragment of XML or HTML source was copied from one document to\n     * another, recognizing that the two documents may have different DTDs\n     * in the XML case. The following list describes the specifics for each\n     * type of node.\n     * <dl>\n     * <dt>ATTRIBUTE_NODE</dt>\n     * <dd>The <code>ownerElement</code> attribute\n     * is set to <code>null</code> and the <code>specified</code> flag is\n     * set to <code>true</code> on the generated <code>Attr</code>. The\n     * descendants of the source <code>Attr</code> are recursively imported\n     * and the resulting nodes reassembled to form the corresponding subtree.\n     * Note that the <code>deep</code> parameter has no effect on\n     * <code>Attr</code> nodes; they always carry their children with them\n     * when imported.</dd>\n     * <dt>DOCUMENT_FRAGMENT_NODE</dt>\n     * <dd>If the <code>deep</code> option\n     * was set to <code>true</code>, the descendants of the source\n     * <code>DocumentFragment</code> are recursively imported and the\n     * resulting nodes reassembled under the imported\n     * <code>DocumentFragment</code> to form the corresponding subtree.\n     * Otherwise, this simply generates an empty\n     * <code>DocumentFragment</code>.</dd>\n     * <dt>DOCUMENT_NODE</dt>\n     * <dd><code>Document</code>\n     * nodes cannot be imported.</dd>\n     * <dt>DOCUMENT_TYPE_NODE</dt>\n     * <dd><code>DocumentType</code>\n     * nodes cannot be imported.</dd>\n     * <dt>ELEMENT_NODE</dt>\n     * <dd><em>Specified</em> attribute nodes of the source element are imported, and the generated\n     * <code>Attr</code> nodes are attached to the generated\n     * <code>Element</code>. Default attributes are <em>not</em> copied, though if the document being imported into defines default\n     * attributes for this element name, those are assigned. If the\n     * <code>importNode</code> <code>deep</code> parameter was set to\n     * <code>true</code>, the descendants of the source element are\n     * recursively imported and the resulting nodes reassembled to form the\n     * corresponding subtree.</dd>\n     * <dt>ENTITY_NODE</dt>\n     * <dd><code>Entity</code> nodes can be\n     * imported, however in the current release of the DOM the\n     * <code>DocumentType</code> is readonly. Ability to add these imported\n     * nodes to a <code>DocumentType</code> will be considered for addition\n     * to a future release of the DOM.On import, the <code>publicId</code>,\n     * <code>systemId</code>, and <code>notationName</code> attributes are\n     * copied. If a <code>deep</code> import is requested, the descendants\n     * of the the source <code>Entity</code> are recursively imported and\n     * the resulting nodes reassembled to form the corresponding subtree.</dd>\n     * <dt>\n     * ENTITY_REFERENCE_NODE</dt>\n     * <dd>Only the <code>EntityReference</code> itself is\n     * copied, even if a <code>deep</code> import is requested, since the\n     * source and destination documents might have defined the entity\n     * differently. If the document being imported into provides a\n     * definition for this entity name, its value is assigned.</dd>\n     * <dt>NOTATION_NODE</dt>\n     * <dd>\n     * <code>Notation</code> nodes can be imported, however in the current\n     * release of the DOM the <code>DocumentType</code> is readonly. Ability\n     * to add these imported nodes to a <code>DocumentType</code> will be\n     * considered for addition to a future release of the DOM.On import, the\n     * <code>publicId</code> and <code>systemId</code> attributes are copied.\n     * Note that the <code>deep</code> parameter has no effect on this type\n     * of nodes since they cannot have any children.</dd>\n     * <dt>\n     * PROCESSING_INSTRUCTION_NODE</dt>\n     * <dd>The imported node copies its\n     * <code>target</code> and <code>data</code> values from those of the\n     * source node.Note that the <code>deep</code> parameter has no effect\n     * on this type of nodes since they cannot have any children.</dd>\n     * <dt>TEXT_NODE,\n     * CDATA_SECTION_NODE, COMMENT_NODE</dt>\n     * <dd>These three types of nodes inheriting\n     * from <code>CharacterData</code> copy their <code>data</code> and\n     * <code>length</code> attributes from those of the source node.Note\n     * that the <code>deep</code> parameter has no effect on these types of\n     * nodes since they cannot have any children.</dd>\n     * </dl>\n     * @param importedNode The node to import.\n     * @param deep If <code>true</code>, recursively import the subtree under\n     *   the specified node; if <code>false</code>, import only the node\n     *   itself, as explained above. This has no effect on nodes that cannot\n     *   have any children, and on <code>Attr</code>, and\n     *   <code>EntityReference</code> nodes.\n     * @return The imported node that belongs to this <code>Document</code>.\n     * @exception DOMException\n     *   NOT_SUPPORTED_ERR: Raised if the type of node being imported is not\n     *   supported.\n     *   <br>INVALID_CHARACTER_ERR: Raised if one of the imported names is not\n     *   an XML name according to the XML version in use specified in the\n     *   <code>Document.xmlVersion</code> attribute. This may happen when\n     *   importing an XML 1.1 [<a href='http://www.w3.org/TR/2004/REC-xml11-20040204/'>XML 1.1</a>] element\n     *   into an XML 1.0 document, for instance.\n     * @since DOM Level 2\n     ",
    "links" : [ ]
  }, {
    "name" : "public Element createElementNS(String namespaceURI, String qualifiedName) throws DOMException",
    "returnType" : "Element",
    "comment" : "\n     * Creates an element of the given qualified name and namespace URI.\n     * <br>Per [<a href='http://www.w3.org/TR/1999/REC-xml-names-19990114/'>XML Namespaces</a>]\n     * , applications must use the value <code>null</code> as the\n     * namespaceURI parameter for methods if they wish to have no namespace.\n     * @param namespaceURI The namespace URI of the element to create.\n     * @param qualifiedName The qualified name of the element type to\n     *   instantiate.\n     * @return A new <code>Element</code> object with the following\n     *   attributes:\n     * <table border='1' cellpadding='3'>\n     * <tr>\n     * <th>Attribute</th>\n     * <th>Value</th>\n     * </tr>\n     * <tr>\n     * <td valign='top' rowspan='1' colspan='1'><code>Node.nodeName</code></td>\n     * <td valign='top' rowspan='1' colspan='1'>\n     *   <code>qualifiedName</code></td>\n     * </tr>\n     * <tr>\n     * <td valign='top' rowspan='1' colspan='1'><code>Node.namespaceURI</code></td>\n     * <td valign='top' rowspan='1' colspan='1'>\n     *   <code>namespaceURI</code></td>\n     * </tr>\n     * <tr>\n     * <td valign='top' rowspan='1' colspan='1'><code>Node.prefix</code></td>\n     * <td valign='top' rowspan='1' colspan='1'>prefix, extracted\n     *   from <code>qualifiedName</code>, or <code>null</code> if there is\n     *   no prefix</td>\n     * </tr>\n     * <tr>\n     * <td valign='top' rowspan='1' colspan='1'><code>Node.localName</code></td>\n     * <td valign='top' rowspan='1' colspan='1'>local name, extracted from\n     *   <code>qualifiedName</code></td>\n     * </tr>\n     * <tr>\n     * <td valign='top' rowspan='1' colspan='1'><code>Element.tagName</code></td>\n     * <td valign='top' rowspan='1' colspan='1'>\n     *   <code>qualifiedName</code></td>\n     * </tr>\n     * </table>\n     * @exception DOMException\n     *   INVALID_CHARACTER_ERR: Raised if the specified\n     *   <code>qualifiedName</code> is not an XML name according to the XML\n     *   version in use specified in the <code>Document.xmlVersion</code>\n     *   attribute.\n     *   <br>NAMESPACE_ERR: Raised if the <code>qualifiedName</code> is a\n     *   malformed qualified name, if the <code>qualifiedName</code> has a\n     *   prefix and the <code>namespaceURI</code> is <code>null</code>, or\n     *   if the <code>qualifiedName</code> has a prefix that is \"xml\" and\n     *   the <code>namespaceURI</code> is different from \"<a href='http://www.w3.org/XML/1998/namespace'>\n     *   http://www.w3.org/XML/1998/namespace</a>\" [<a href='http://www.w3.org/TR/1999/REC-xml-names-19990114/'>XML Namespaces</a>]\n     *   , or if the <code>qualifiedName</code> or its prefix is \"xmlns\" and\n     *   the <code>namespaceURI</code> is different from \"<a href='http://www.w3.org/2000/xmlns/'>http://www.w3.org/2000/xmlns/</a>\", or if the <code>namespaceURI</code> is \"<a href='http://www.w3.org/2000/xmlns/'>http://www.w3.org/2000/xmlns/</a>\" and neither the <code>qualifiedName</code> nor its prefix is \"xmlns\".\n     *   <br>NOT_SUPPORTED_ERR: Always thrown if the current document does not\n     *   support the <code>\"XML\"</code> feature, since namespaces were\n     *   defined by XML.\n     * @since DOM Level 2\n     ",
    "links" : [ ]
  }, {
    "name" : "public Attr createAttributeNS(String namespaceURI, String qualifiedName) throws DOMException",
    "returnType" : "Attr",
    "comment" : "\n     * Creates an attribute of the given qualified name and namespace URI.\n     * <br>Per [<a href='http://www.w3.org/TR/1999/REC-xml-names-19990114/'>XML Namespaces</a>]\n     * , applications must use the value <code>null</code> as the\n     * <code>namespaceURI</code> parameter for methods if they wish to have\n     * no namespace.\n     * @param namespaceURI The namespace URI of the attribute to create.\n     * @param qualifiedName The qualified name of the attribute to\n     *   instantiate.\n     * @return A new <code>Attr</code> object with the following attributes:\n     * <table border='1' cellpadding='3'>\n     * <tr>\n     * <th>\n     *   Attribute</th>\n     * <th>Value</th>\n     * </tr>\n     * <tr>\n     * <td valign='top' rowspan='1' colspan='1'><code>Node.nodeName</code></td>\n     * <td valign='top' rowspan='1' colspan='1'>qualifiedName</td>\n     * </tr>\n     * <tr>\n     * <td valign='top' rowspan='1' colspan='1'>\n     *   <code>Node.namespaceURI</code></td>\n     * <td valign='top' rowspan='1' colspan='1'><code>namespaceURI</code></td>\n     * </tr>\n     * <tr>\n     * <td valign='top' rowspan='1' colspan='1'>\n     *   <code>Node.prefix</code></td>\n     * <td valign='top' rowspan='1' colspan='1'>prefix, extracted from\n     *   <code>qualifiedName</code>, or <code>null</code> if there is no\n     *   prefix</td>\n     * </tr>\n     * <tr>\n     * <td valign='top' rowspan='1' colspan='1'><code>Node.localName</code></td>\n     * <td valign='top' rowspan='1' colspan='1'>local name, extracted from\n     *   <code>qualifiedName</code></td>\n     * </tr>\n     * <tr>\n     * <td valign='top' rowspan='1' colspan='1'><code>Attr.name</code></td>\n     * <td valign='top' rowspan='1' colspan='1'>\n     *   <code>qualifiedName</code></td>\n     * </tr>\n     * <tr>\n     * <td valign='top' rowspan='1' colspan='1'><code>Node.nodeValue</code></td>\n     * <td valign='top' rowspan='1' colspan='1'>the empty\n     *   string</td>\n     * </tr>\n     * </table>\n     * @exception DOMException\n     *   INVALID_CHARACTER_ERR: Raised if the specified\n     *   <code>qualifiedName</code> is not an XML name according to the XML\n     *   version in use specified in the <code>Document.xmlVersion</code>\n     *   attribute.\n     *   <br>NAMESPACE_ERR: Raised if the <code>qualifiedName</code> is a\n     *   malformed qualified name, if the <code>qualifiedName</code> has a\n     *   prefix and the <code>namespaceURI</code> is <code>null</code>, if\n     *   the <code>qualifiedName</code> has a prefix that is \"xml\" and the\n     *   <code>namespaceURI</code> is different from \"<a href='http://www.w3.org/XML/1998/namespace'>\n     *   http://www.w3.org/XML/1998/namespace</a>\", if the <code>qualifiedName</code> or its prefix is \"xmlns\" and the\n     *   <code>namespaceURI</code> is different from \"<a href='http://www.w3.org/2000/xmlns/'>http://www.w3.org/2000/xmlns/</a>\", or if the <code>namespaceURI</code> is \"<a href='http://www.w3.org/2000/xmlns/'>http://www.w3.org/2000/xmlns/</a>\" and neither the <code>qualifiedName</code> nor its prefix is \"xmlns\".\n     *   <br>NOT_SUPPORTED_ERR: Always thrown if the current document does not\n     *   support the <code>\"XML\"</code> feature, since namespaces were\n     *   defined by XML.\n     * @since DOM Level 2\n     ",
    "links" : [ ]
  }, {
    "name" : "public NodeList getElementsByTagNameNS(String namespaceURI, String localName)",
    "returnType" : "NodeList",
    "comment" : "\n     * Returns a <code>NodeList</code> of all the <code>Elements</code> with a\n     * given local name and namespace URI in document order.\n     * @param namespaceURI The namespace URI of the elements to match on. The\n     *   special value <code>\"*\"</code> matches all namespaces.\n     * @param localName The local name of the elements to match on. The\n     *   special value \"*\" matches all local names.\n     * @return A new <code>NodeList</code> object containing all the matched\n     *   <code>Elements</code>.\n     * @since DOM Level 2\n     ",
    "links" : [ ]
  }, {
    "name" : "public Element getElementById(String elementId)",
    "returnType" : "Element",
    "comment" : "\n     * Returns the <code>Element</code> that has an ID attribute with the\n     * given value. If no such element exists, this returns <code>null</code>\n     * . If more than one element has an ID attribute with that value, what\n     * is returned is undefined.\n     * <br> The DOM implementation is expected to use the attribute\n     * <code>Attr.isId</code> to determine if an attribute is of type ID.\n     * <p ><b>Note:</b> Attributes with the name \"ID\" or \"id\" are not of type\n     * ID unless so defined.\n     * @param elementId The unique <code>id</code> value for an element.\n     * @return The matching element or <code>null</code> if there is none.\n     * @since DOM Level 2\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getInputEncoding()",
    "returnType" : "String",
    "comment" : "\n     * An attribute specifying the encoding used for this document at the time\n     * of the parsing. This is <code>null</code> when it is not known, such\n     * as when the <code>Document</code> was created in memory.\n     * @since DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getXmlEncoding()",
    "returnType" : "String",
    "comment" : "\n     * An attribute specifying, as part of the <a href='http://www.w3.org/TR/2004/REC-xml-20040204#NT-XMLDecl'>XML declaration</a>, the encoding of this document. This is <code>null</code> when\n     * unspecified or when it is not known, such as when the\n     * <code>Document</code> was created in memory.\n     * @since DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getXmlStandalone()",
    "returnType" : "boolean",
    "comment" : "\n     * An attribute specifying, as part of the <a href='http://www.w3.org/TR/2004/REC-xml-20040204#NT-XMLDecl'>XML declaration</a>, whether this document is standalone. This is <code>false</code> when\n     * unspecified.\n     * <p ><b>Note:</b>  No verification is done on the value when setting\n     * this attribute. Applications should use\n     * <code>Document.normalizeDocument()</code> with the \"validate\"\n     * parameter to verify if the value matches the <a href='http://www.w3.org/TR/2004/REC-xml-20040204#sec-rmd'>validity\n     * constraint for standalone document declaration</a> as defined in [<a href='http://www.w3.org/TR/2004/REC-xml-20040204'>XML 1.0</a>].\n     * @since DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setXmlStandalone(boolean xmlStandalone) throws DOMException",
    "returnType" : "void",
    "comment" : "\n     * An attribute specifying, as part of the <a href='http://www.w3.org/TR/2004/REC-xml-20040204#NT-XMLDecl'>XML declaration</a>, whether this document is standalone. This is <code>false</code> when\n     * unspecified.\n     * <p ><b>Note:</b>  No verification is done on the value when setting\n     * this attribute. Applications should use\n     * <code>Document.normalizeDocument()</code> with the \"validate\"\n     * parameter to verify if the value matches the <a href='http://www.w3.org/TR/2004/REC-xml-20040204#sec-rmd'>validity\n     * constraint for standalone document declaration</a> as defined in [<a href='http://www.w3.org/TR/2004/REC-xml-20040204'>XML 1.0</a>].\n     * @exception DOMException\n     *    NOT_SUPPORTED_ERR: Raised if this document does not support the\n     *   \"XML\" feature.\n     * @since DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getXmlVersion()",
    "returnType" : "String",
    "comment" : "\n     *  An attribute specifying, as part of the <a href='http://www.w3.org/TR/2004/REC-xml-20040204#NT-XMLDecl'>XML declaration</a>, the version number of this document. If there is no declaration and if\n     * this document supports the \"XML\" feature, the value is\n     * <code>\"1.0\"</code>. If this document does not support the \"XML\"\n     * feature, the value is always <code>null</code>. Changing this\n     * attribute will affect methods that check for invalid characters in\n     * XML names. Application should invoke\n     * <code>Document.normalizeDocument()</code> in order to check for\n     * invalid characters in the <code>Node</code>s that are already part of\n     * this <code>Document</code>.\n     * <br> DOM applications may use the\n     * <code>DOMImplementation.hasFeature(feature, version)</code> method\n     * with parameter values \"XMLVersion\" and \"1.0\" (respectively) to\n     * determine if an implementation supports [<a href='http://www.w3.org/TR/2004/REC-xml-20040204'>XML 1.0</a>]. DOM\n     * applications may use the same method with parameter values\n     * \"XMLVersion\" and \"1.1\" (respectively) to determine if an\n     * implementation supports [<a href='http://www.w3.org/TR/2004/REC-xml11-20040204/'>XML 1.1</a>]. In both\n     * cases, in order to support XML, an implementation must also support\n     * the \"XML\" feature defined in this specification. <code>Document</code>\n     *  objects supporting a version of the \"XMLVersion\" feature must not\n     * raise a <code>NOT_SUPPORTED_ERR</code> exception for the same version\n     * number when using <code>Document.xmlVersion</code>.\n     * @since DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setXmlVersion(String xmlVersion) throws DOMException",
    "returnType" : "void",
    "comment" : "\n     *  An attribute specifying, as part of the <a href='http://www.w3.org/TR/2004/REC-xml-20040204#NT-XMLDecl'>XML declaration</a>, the version number of this document. If there is no declaration and if\n     * this document supports the \"XML\" feature, the value is\n     * <code>\"1.0\"</code>. If this document does not support the \"XML\"\n     * feature, the value is always <code>null</code>. Changing this\n     * attribute will affect methods that check for invalid characters in\n     * XML names. Application should invoke\n     * <code>Document.normalizeDocument()</code> in order to check for\n     * invalid characters in the <code>Node</code>s that are already part of\n     * this <code>Document</code>.\n     * <br> DOM applications may use the\n     * <code>DOMImplementation.hasFeature(feature, version)</code> method\n     * with parameter values \"XMLVersion\" and \"1.0\" (respectively) to\n     * determine if an implementation supports [<a href='http://www.w3.org/TR/2004/REC-xml-20040204'>XML 1.0</a>]. DOM\n     * applications may use the same method with parameter values\n     * \"XMLVersion\" and \"1.1\" (respectively) to determine if an\n     * implementation supports [<a href='http://www.w3.org/TR/2004/REC-xml11-20040204/'>XML 1.1</a>]. In both\n     * cases, in order to support XML, an implementation must also support\n     * the \"XML\" feature defined in this specification. <code>Document</code>\n     *  objects supporting a version of the \"XMLVersion\" feature must not\n     * raise a <code>NOT_SUPPORTED_ERR</code> exception for the same version\n     * number when using <code>Document.xmlVersion</code>.\n     * @exception DOMException\n     *    NOT_SUPPORTED_ERR: Raised if the version is set to a value that is\n     *   not supported by this <code>Document</code> or if this document\n     *   does not support the \"XML\" feature.\n     * @since DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getStrictErrorChecking()",
    "returnType" : "boolean",
    "comment" : "\n     * An attribute specifying whether error checking is enforced or not. When\n     * set to <code>false</code>, the implementation is free to not test\n     * every possible error case normally defined on DOM operations, and not\n     * raise any <code>DOMException</code> on DOM operations or report\n     * errors while using <code>Document.normalizeDocument()</code>. In case\n     * of error, the behavior is undefined. This attribute is\n     * <code>true</code> by default.\n     * @since DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setStrictErrorChecking(boolean strictErrorChecking)",
    "returnType" : "void",
    "comment" : "\n     * An attribute specifying whether error checking is enforced or not. When\n     * set to <code>false</code>, the implementation is free to not test\n     * every possible error case normally defined on DOM operations, and not\n     * raise any <code>DOMException</code> on DOM operations or report\n     * errors while using <code>Document.normalizeDocument()</code>. In case\n     * of error, the behavior is undefined. This attribute is\n     * <code>true</code> by default.\n     * @since DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getDocumentURI()",
    "returnType" : "String",
    "comment" : "\n     *  The location of the document or <code>null</code> if undefined or if\n     * the <code>Document</code> was created using\n     * <code>DOMImplementation.createDocument</code>. No lexical checking is\n     * performed when setting this attribute; this could result in a\n     * <code>null</code> value returned when using <code>Node.baseURI</code>\n     * .\n     * <br> Beware that when the <code>Document</code> supports the feature\n     * \"HTML\" [<a href='http://www.w3.org/TR/2003/REC-DOM-Level-2-HTML-20030109'>DOM Level 2 HTML</a>]\n     * , the href attribute of the HTML BASE element takes precedence over\n     * this attribute when computing <code>Node.baseURI</code>.\n     * @since DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDocumentURI(String documentURI)",
    "returnType" : "void",
    "comment" : "\n     *  The location of the document or <code>null</code> if undefined or if\n     * the <code>Document</code> was created using\n     * <code>DOMImplementation.createDocument</code>. No lexical checking is\n     * performed when setting this attribute; this could result in a\n     * <code>null</code> value returned when using <code>Node.baseURI</code>\n     * .\n     * <br> Beware that when the <code>Document</code> supports the feature\n     * \"HTML\" [<a href='http://www.w3.org/TR/2003/REC-DOM-Level-2-HTML-20030109'>DOM Level 2 HTML</a>]\n     * , the href attribute of the HTML BASE element takes precedence over\n     * this attribute when computing <code>Node.baseURI</code>.\n     * @since DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "public Node adoptNode(Node source) throws DOMException",
    "returnType" : "Node",
    "comment" : "\n     *  Attempts to adopt a node from another document to this document. If\n     * supported, it changes the <code>ownerDocument</code> of the source\n     * node, its children, as well as the attached attribute nodes if there\n     * are any. If the source node has a parent it is first removed from the\n     * child list of its parent. This effectively allows moving a subtree\n     * from one document to another (unlike <code>importNode()</code> which\n     * create a copy of the source node instead of moving it). When it\n     * fails, applications should use <code>Document.importNode()</code>\n     * instead. Note that if the adopted node is already part of this\n     * document (i.e. the source and target document are the same), this\n     * method still has the effect of removing the source node from the\n     * child list of its parent, if any. The following list describes the\n     * specifics for each type of node.\n     * <dl>\n     * <dt>ATTRIBUTE_NODE</dt>\n     * <dd>The\n     * <code>ownerElement</code> attribute is set to <code>null</code> and\n     * the <code>specified</code> flag is set to <code>true</code> on the\n     * adopted <code>Attr</code>. The descendants of the source\n     * <code>Attr</code> are recursively adopted.</dd>\n     * <dt>DOCUMENT_FRAGMENT_NODE</dt>\n     * <dd>The\n     * descendants of the source node are recursively adopted.</dd>\n     * <dt>DOCUMENT_NODE</dt>\n     * <dd>\n     * <code>Document</code> nodes cannot be adopted.</dd>\n     * <dt>DOCUMENT_TYPE_NODE</dt>\n     * <dd>\n     * <code>DocumentType</code> nodes cannot be adopted.</dd>\n     * <dt>ELEMENT_NODE</dt>\n     * <dd><em>Specified</em> attribute nodes of the source element are adopted. Default attributes\n     * are discarded, though if the document being adopted into defines\n     * default attributes for this element name, those are assigned. The\n     * descendants of the source element are recursively adopted.</dd>\n     * <dt>ENTITY_NODE</dt>\n     * <dd>\n     * <code>Entity</code> nodes cannot be adopted.</dd>\n     * <dt>ENTITY_REFERENCE_NODE</dt>\n     * <dd>Only\n     * the <code>EntityReference</code> node itself is adopted, the\n     * descendants are discarded, since the source and destination documents\n     * might have defined the entity differently. If the document being\n     * imported into provides a definition for this entity name, its value\n     * is assigned.</dd>\n     * <dt>NOTATION_NODE</dt>\n     * <dd><code>Notation</code> nodes cannot be\n     * adopted.</dd>\n     * <dt>PROCESSING_INSTRUCTION_NODE, TEXT_NODE, CDATA_SECTION_NODE,\n     * COMMENT_NODE</dt>\n     * <dd>These nodes can all be adopted. No specifics.</dd>\n     * </dl>\n     * <p ><b>Note:</b>  Since it does not create new nodes unlike the\n     * <code>Document.importNode()</code> method, this method does not raise\n     * an <code>INVALID_CHARACTER_ERR</code> exception, and applications\n     * should use the <code>Document.normalizeDocument()</code> method to\n     * check if an imported name is not an XML name according to the XML\n     * version in use.\n     * @param source The node to move into this document.\n     * @return The adopted node, or <code>null</code> if this operation\n     *   fails, such as when the source node comes from a different\n     *   implementation.\n     * @exception DOMException\n     *   NOT_SUPPORTED_ERR: Raised if the source node is of type\n     *   <code>DOCUMENT</code>, <code>DOCUMENT_TYPE</code>.\n     *   <br>NO_MODIFICATION_ALLOWED_ERR: Raised when the source node is\n     *   readonly.\n     * @since DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "public DOMConfiguration getDomConfig()",
    "returnType" : "DOMConfiguration",
    "comment" : "\n     *  The configuration used when <code>Document.normalizeDocument()</code>\n     * is invoked.\n     * @since DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "public void normalizeDocument()",
    "returnType" : "void",
    "comment" : "\n     *  This method acts as if the document was going through a save and load\n     * cycle, putting the document in a \"normal\" form. As a consequence,\n     * this method updates the replacement tree of\n     * <code>EntityReference</code> nodes and normalizes <code>Text</code>\n     * nodes, as defined in the method <code>Node.normalize()</code>.\n     * <br> Otherwise, the actual result depends on the features being set on\n     * the <code>Document.domConfig</code> object and governing what\n     * operations actually take place. Noticeably this method could also\n     * make the document namespace well-formed according to the algorithm\n     * described in , check the character normalization, remove the\n     * <code>CDATASection</code> nodes, etc. See\n     * <code>DOMConfiguration</code> for details.\n     * <pre>// Keep in the document\n     * the information defined // in the XML Information Set (Java example)\n     * DOMConfiguration docConfig = myDocument.getDomConfig();\n     * docConfig.setParameter(\"infoset\", Boolean.TRUE);\n     * myDocument.normalizeDocument();</pre>\n     *\n     * <br>Mutation events, when supported, are generated to reflect the\n     * changes occurring on the document.\n     * <br> If errors occur during the invocation of this method, such as an\n     * attempt to update a read-only node or a <code>Node.nodeName</code>\n     * contains an invalid character according to the XML version in use,\n     * errors or warnings (<code>DOMError.SEVERITY_ERROR</code> or\n     * <code>DOMError.SEVERITY_WARNING</code>) will be reported using the\n     * <code>DOMErrorHandler</code> object associated with the \"error-handler\n     * \" parameter. Note this method might also report fatal errors (\n     * <code>DOMError.SEVERITY_FATAL_ERROR</code>) if an implementation\n     * cannot recover from an error.\n     * @since DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "public Node renameNode(Node n, String namespaceURI, String qualifiedName) throws DOMException",
    "returnType" : "Node",
    "comment" : "\n     * Rename an existing node of type <code>ELEMENT_NODE</code> or\n     * <code>ATTRIBUTE_NODE</code>.\n     * <br>When possible this simply changes the name of the given node,\n     * otherwise this creates a new node with the specified name and\n     * replaces the existing node with the new node as described below.\n     * <br>If simply changing the name of the given node is not possible, the\n     * following operations are performed: a new node is created, any\n     * registered event listener is registered on the new node, any user\n     * data attached to the old node is removed from that node, the old node\n     * is removed from its parent if it has one, the children are moved to\n     * the new node, if the renamed node is an <code>Element</code> its\n     * attributes are moved to the new node, the new node is inserted at the\n     * position the old node used to have in its parent's child nodes list\n     * if it has one, the user data that was attached to the old node is\n     * attached to the new node.\n     * <br>When the node being renamed is an <code>Element</code> only the\n     * specified attributes are moved, default attributes originated from\n     * the DTD are updated according to the new element name. In addition,\n     * the implementation may update default attributes from other schemas.\n     * Applications should use <code>Document.normalizeDocument()</code> to\n     * guarantee these attributes are up-to-date.\n     * <br>When the node being renamed is an <code>Attr</code> that is\n     * attached to an <code>Element</code>, the node is first removed from\n     * the <code>Element</code> attributes map. Then, once renamed, either\n     * by modifying the existing node or creating a new one as described\n     * above, it is put back.\n     * <br>In addition,\n     * <ul>\n     * <li> a user data event <code>NODE_RENAMED</code> is fired,\n     * </li>\n     * <li>\n     * when the implementation supports the feature \"MutationNameEvents\",\n     * each mutation operation involved in this method fires the appropriate\n     * event, and in the end the event {\n     * <code>http://www.w3.org/2001/xml-events</code>,\n     * <code>DOMElementNameChanged</code>} or {\n     * <code>http://www.w3.org/2001/xml-events</code>,\n     * <code>DOMAttributeNameChanged</code>} is fired.\n     * </li>\n     * </ul>\n     * @param n The node to rename.\n     * @param namespaceURI The new namespace URI.\n     * @param qualifiedName The new qualified name.\n     * @return The renamed node. This is either the specified node or the new\n     *   node that was created to replace the specified node.\n     * @exception DOMException\n     *   NOT_SUPPORTED_ERR: Raised when the type of the specified node is\n     *   neither <code>ELEMENT_NODE</code> nor <code>ATTRIBUTE_NODE</code>,\n     *   or if the implementation does not support the renaming of the\n     *   document element.\n     *   <br>INVALID_CHARACTER_ERR: Raised if the new qualified name is not an\n     *   XML name according to the XML version in use specified in the\n     *   <code>Document.xmlVersion</code> attribute.\n     *   <br>WRONG_DOCUMENT_ERR: Raised when the specified node was created\n     *   from a different document than this document.\n     *   <br>NAMESPACE_ERR: Raised if the <code>qualifiedName</code> is a\n     *   malformed qualified name, if the <code>qualifiedName</code> has a\n     *   prefix and the <code>namespaceURI</code> is <code>null</code>, or\n     *   if the <code>qualifiedName</code> has a prefix that is \"xml\" and\n     *   the <code>namespaceURI</code> is different from \"<a href='http://www.w3.org/XML/1998/namespace'>\n     *   http://www.w3.org/XML/1998/namespace</a>\" [<a href='http://www.w3.org/TR/1999/REC-xml-names-19990114/'>XML Namespaces</a>]\n     *   . Also raised, when the node being renamed is an attribute, if the\n     *   <code>qualifiedName</code>, or its prefix, is \"xmlns\" and the\n     *   <code>namespaceURI</code> is different from \"<a href='http://www.w3.org/2000/xmlns/'>http://www.w3.org/2000/xmlns/</a>\".\n     * @since DOM Level 3\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public DocumentType getDoctype()", "public DOMImplementation getImplementation()", "public Element getDocumentElement()", "public Element createElement(String tagName) throws DOMException", "public DocumentFragment createDocumentFragment()", "public Text createTextNode(String data)", "public Comment createComment(String data)", "public CDATASection createCDATASection(String data) throws DOMException", "public ProcessingInstruction createProcessingInstruction(String target, String data) throws DOMException", "public Attr createAttribute(String name) throws DOMException", "public EntityReference createEntityReference(String name) throws DOMException", "public NodeList getElementsByTagName(String tagname)", "public Node importNode(Node importedNode, boolean deep) throws DOMException", "public Element createElementNS(String namespaceURI, String qualifiedName) throws DOMException", "public Attr createAttributeNS(String namespaceURI, String qualifiedName) throws DOMException", "public NodeList getElementsByTagNameNS(String namespaceURI, String localName)", "public Element getElementById(String elementId)", "public String getInputEncoding()", "public String getXmlEncoding()", "public boolean getXmlStandalone()", "public void setXmlStandalone(boolean xmlStandalone) throws DOMException", "public String getXmlVersion()", "public void setXmlVersion(String xmlVersion) throws DOMException", "public boolean getStrictErrorChecking()", "public void setStrictErrorChecking(boolean strictErrorChecking)", "public String getDocumentURI()", "public void setDocumentURI(String documentURI)", "public Node adoptNode(Node source) throws DOMException", "public DOMConfiguration getDomConfig()", "public void normalizeDocument()", "public Node renameNode(Node n, String namespaceURI, String qualifiedName) throws DOMException" ],
  "variableNames" : [ ]
}