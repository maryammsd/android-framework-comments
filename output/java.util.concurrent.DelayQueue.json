{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/concurrent/DelayQueue.java",
  "packageName" : "java.util.concurrent",
  "className" : "DelayQueue",
  "comment" : "\n * An unbounded {@linkplain BlockingQueue blocking queue} of\n * {@code Delayed} elements, in which an element can only be taken\n * when its delay has expired.  The <em>head</em> of the queue is that\n * {@code Delayed} element whose delay expired furthest in the\n * past.  If no delay has expired there is no head and {@code poll}\n * will return {@code null}. Expiration occurs when an element's\n * {@code getDelay(TimeUnit.NANOSECONDS)} method returns a value less\n * than or equal to zero.  Even though unexpired elements cannot be\n * removed using {@code take} or {@code poll}, they are otherwise\n * treated as normal elements. For example, the {@code size} method\n * returns the count of both expired and unexpired elements.\n * This queue does not permit null elements.\n *\n * <p>This class and its iterator implement all of the <em>optional</em>\n * methods of the {@link Collection} and {@link Iterator} interfaces.\n * The Iterator provided in method {@link #iterator()} is <em>not</em>\n * guaranteed to traverse the elements of the DelayQueue in any\n * particular order.\n *\n * <p>This class is a member of the\n * <a href=\"{@docRoot}/java.base/java/util/package-summary.html#CollectionsFramework\">\n * Java Collections Framework</a>.\n *\n * @since 1.5\n * @author Doug Lea\n * @param <E> the type of elements held in this queue\n ",
  "links" : [ "#iterator()", "java.util.Iterator", "java.util.Collection" ],
  "variables" : [ {
    "name" : "lock",
    "type" : "ReentrantLock",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "q",
    "type" : "PriorityQueue<E>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "leader",
    "type" : "Thread",
    "comment" : "\n     * Thread designated to wait for the element at the head of\n     * the queue.  This variant of the Leader-Follower pattern\n     * (http://www.cs.wustl.edu/~schmidt/POSA/POSA2/) serves to\n     * minimize unnecessary timed waiting.  When a thread becomes\n     * the leader, it waits only for the next delay to elapse, but\n     * other threads await indefinitely.  The leader thread must\n     * signal some other thread before returning from take() or\n     * poll(...), unless some other thread becomes leader in the\n     * interim.  Whenever the head of the queue is replaced with\n     * an element with an earlier expiration time, the leader\n     * field is invalidated by being reset to null, and some\n     * waiting thread, but not necessarily the current leader, is\n     * signalled.  So waiting threads must be prepared to acquire\n     * and lose leadership while waiting.\n     ",
    "links" : [ ]
  }, {
    "name" : "available",
    "type" : "Condition",
    "comment" : "\n     * Condition signalled when a newer element becomes available\n     * at the head of the queue or a new thread may need to\n     * become leader.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean add(E e)",
    "returnType" : "boolean",
    "comment" : "\n     * Inserts the specified element into this delay queue.\n     *\n     * @param e the element to add\n     * @return {@code true} (as specified by {@link Collection#add})\n     * @throws NullPointerException if the specified element is null\n     ",
    "links" : [ "java.util.Collection#add" ]
  }, {
    "name" : "public boolean offer(E e)",
    "returnType" : "boolean",
    "comment" : "\n     * Inserts the specified element into this delay queue.\n     *\n     * @param e the element to add\n     * @return {@code true}\n     * @throws NullPointerException if the specified element is null\n     ",
    "links" : [ ]
  }, {
    "name" : "public void put(E e)",
    "returnType" : "void",
    "comment" : "\n     * Inserts the specified element into this delay queue. As the queue is\n     * unbounded this method will never block.\n     *\n     * @param e the element to add\n     * @throws NullPointerException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean offer(E e, long timeout, TimeUnit unit)",
    "returnType" : "boolean",
    "comment" : "\n     * Inserts the specified element into this delay queue. As the queue is\n     * unbounded this method will never block.\n     *\n     * @param e the element to add\n     * @param timeout This parameter is ignored as the method never blocks\n     * @param unit This parameter is ignored as the method never blocks\n     * @return {@code true}\n     * @throws NullPointerException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public E poll()",
    "returnType" : "E",
    "comment" : "\n     * Retrieves and removes the head of this queue, or returns {@code null}\n     * if this queue has no elements with an expired delay.\n     *\n     * @return the head of this queue, or {@code null} if this\n     *         queue has no elements with an expired delay\n     ",
    "links" : [ ]
  }, {
    "name" : "public E take() throws InterruptedException",
    "returnType" : "E",
    "comment" : "\n     * Retrieves and removes the head of this queue, waiting if necessary\n     * until an element with an expired delay is available on this queue.\n     *\n     * @return the head of this queue\n     * @throws InterruptedException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public E poll(long timeout, TimeUnit unit) throws InterruptedException",
    "returnType" : "E",
    "comment" : "\n     * Retrieves and removes the head of this queue, waiting if necessary\n     * until an element with an expired delay is available on this queue,\n     * or the specified wait time expires.\n     *\n     * @return the head of this queue, or {@code null} if the\n     *         specified waiting time elapses before an element with\n     *         an expired delay becomes available\n     * @throws InterruptedException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public E peek()",
    "returnType" : "E",
    "comment" : "\n     * Retrieves, but does not remove, the head of this queue, or\n     * returns {@code null} if this queue is empty.  Unlike\n     * {@code poll}, if no expired elements are available in the queue,\n     * this method returns the element that will expire next,\n     * if one exists.\n     *\n     * @return the head of this queue, or {@code null} if this\n     *         queue is empty\n     ",
    "links" : [ ]
  }, {
    "name" : "public int size()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int drainTo(Collection<? super E> c)",
    "returnType" : "int",
    "comment" : "\n     * @throws UnsupportedOperationException {@inheritDoc}\n     * @throws ClassCastException            {@inheritDoc}\n     * @throws NullPointerException          {@inheritDoc}\n     * @throws IllegalArgumentException      {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public int drainTo(Collection<? super E> c, int maxElements)",
    "returnType" : "int",
    "comment" : "\n     * @throws UnsupportedOperationException {@inheritDoc}\n     * @throws ClassCastException            {@inheritDoc}\n     * @throws NullPointerException          {@inheritDoc}\n     * @throws IllegalArgumentException      {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clear()",
    "returnType" : "void",
    "comment" : "\n     * Atomically removes all of the elements from this delay queue.\n     * The queue will be empty after this call returns.\n     * Elements with an unexpired delay are not waited for; they are\n     * simply discarded from the queue.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int remainingCapacity()",
    "returnType" : "int",
    "comment" : "\n     * Always returns {@code Integer.MAX_VALUE} because\n     * a {@code DelayQueue} is not capacity constrained.\n     *\n     * @return {@code Integer.MAX_VALUE}\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object[] toArray()",
    "returnType" : "Object[]",
    "comment" : "\n     * Returns an array containing all of the elements in this queue.\n     * The returned array elements are in no particular order.\n     *\n     * <p>The returned array will be \"safe\" in that no references to it are\n     * maintained by this queue.  (In other words, this method must allocate\n     * a new array).  The caller is thus free to modify the returned array.\n     *\n     * <p>This method acts as bridge between array-based and collection-based\n     * APIs.\n     *\n     * @return an array containing all of the elements in this queue\n     ",
    "links" : [ ]
  }, {
    "name" : "public T[] toArray(T[] a)",
    "returnType" : "T[]",
    "comment" : "\n     * Returns an array containing all of the elements in this queue; the\n     * runtime type of the returned array is that of the specified array.\n     * The returned array elements are in no particular order.\n     * If the queue fits in the specified array, it is returned therein.\n     * Otherwise, a new array is allocated with the runtime type of the\n     * specified array and the size of this queue.\n     *\n     * <p>If this queue fits in the specified array with room to spare\n     * (i.e., the array has more elements than this queue), the element in\n     * the array immediately following the end of the queue is set to\n     * {@code null}.\n     *\n     * <p>Like the {@link #toArray()} method, this method acts as bridge between\n     * array-based and collection-based APIs.  Further, this method allows\n     * precise control over the runtime type of the output array, and may,\n     * under certain circumstances, be used to save allocation costs.\n     *\n     * <p>The following code can be used to dump a delay queue into a newly\n     * allocated array of {@code Delayed}:\n     *\n     * <pre> {@code Delayed[] a = q.toArray(new Delayed[0]);}</pre>\n     *\n     * Note that {@code toArray(new Object[0])} is identical in function to\n     * {@code toArray()}.\n     *\n     * @param a the array into which the elements of the queue are to\n     *          be stored, if it is big enough; otherwise, a new array of the\n     *          same runtime type is allocated for this purpose\n     * @return an array containing all of the elements in this queue\n     * @throws ArrayStoreException if the runtime type of the specified array\n     *         is not a supertype of the runtime type of every element in\n     *         this queue\n     * @throws NullPointerException if the specified array is null\n     ",
    "links" : [ "#toArray()" ]
  }, {
    "name" : "public boolean remove(Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * Removes a single instance of the specified element from this\n     * queue, if it is present, whether or not it has expired.\n     ",
    "links" : [ ]
  }, {
    "name" : " void removeEQ(Object o)",
    "returnType" : "void",
    "comment" : "\n     * Identity-based version for use in Itr.remove.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Iterator<E> iterator()",
    "returnType" : "Iterator<E>",
    "comment" : "\n     * Returns an iterator over all the elements (both expired and\n     * unexpired) in this queue. The iterator does not return the\n     * elements in any particular order.\n     *\n     * <p>The returned iterator is\n     * <a href=\"package-summary.html#Weakly\"><i>weakly consistent</i></a>.\n     *\n     * @return an iterator over the elements in this queue\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public boolean add(E e)", "public boolean offer(E e)", "public void put(E e)", "public boolean offer(E e, long timeout, TimeUnit unit)", "public E poll()", "public E take() throws InterruptedException", "public E poll(long timeout, TimeUnit unit) throws InterruptedException", "public E peek()", "public int size()", "public int drainTo(Collection<? super E> c)", "public int drainTo(Collection<? super E> c, int maxElements)", "public void clear()", "public int remainingCapacity()", "public Object[] toArray()", "public T[] toArray(T[] a)", "public boolean remove(Object o)", " void removeEQ(Object o)", "public Iterator<E> iterator()" ],
  "variableNames" : [ "lock", "q", "leader", "available" ]
}