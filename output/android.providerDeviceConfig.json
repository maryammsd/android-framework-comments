{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/provider/DeviceConfig.java",
  "packageName" : "android.provider",
  "className" : "DeviceConfig",
  "comment" : "\n * Device level configuration parameters which can be tuned by a separate configuration service.\n * Namespaces that end in \"_native\" such as {@link #NAMESPACE_NETD_NATIVE} are intended to be used\n * by native code and should be pushed to system properties to make them accessible.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "CONTENT_URI",
    "type" : "Uri",
    "comment" : "\n     * The content:// style URL for the config table.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_ACTIVITY_MANAGER",
    "type" : "String",
    "comment" : "\n     * Namespace for activity manager related features. These features will be applied\n     * immediately upon change.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_ACTIVITY_MANAGER_NATIVE_BOOT",
    "type" : "String",
    "comment" : "\n     * Namespace for all activity manager related features that are used at the native level.\n     * These features are applied at reboot.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_APP_COMPAT",
    "type" : "String",
    "comment" : "\n     * Namespace for all app compat related features.  These features will be applied\n     * immediately upon change.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_ATTENTION_MANAGER_SERVICE",
    "type" : "String",
    "comment" : "\n     * Namespace for AttentionManagerService related features.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_AUTOFILL",
    "type" : "String",
    "comment" : "\n     * Namespace for autofill feature that provides suggestions across all apps when\n     * the user interacts with input fields.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_BLOBSTORE",
    "type" : "String",
    "comment" : "\n     * Namespace for blobstore feature that allows apps to share data blobs.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_CONNECTIVITY",
    "type" : "String",
    "comment" : "\n     * Namespace for all networking connectivity related features.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_CONTENT_CAPTURE",
    "type" : "String",
    "comment" : "\n     * Namespace for content capture feature used by on-device machine intelligence\n     * to provide suggestions in a privacy-safe manner.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_DEX_BOOT",
    "type" : "String",
    "comment" : "\n     * Namespace for how dex runs. The feature requires a reboot to reach a clean state.\n     *\n     * @deprecated No longer used\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_DISPLAY_MANAGER",
    "type" : "String",
    "comment" : "\n     * Namespace for display manager related features. The names to access the properties in this\n     * namespace should be defined in {@link android.hardware.display.DisplayManager}.\n     *\n     * @hide\n     ",
    "links" : [ "android.hardware.display.DisplayManager" ]
  }, {
    "name" : "NAMESPACE_GAME_DRIVER",
    "type" : "String",
    "comment" : "\n     * Namespace for all Game Driver features.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_INPUT_NATIVE_BOOT",
    "type" : "String",
    "comment" : "\n     * Namespace for all input-related features that are used at the native level.\n     * These features are applied at reboot.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_INTELLIGENCE_ATTENTION",
    "type" : "String",
    "comment" : "\n     * Namespace for attention-based features provided by on-device machine intelligence.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_INTELLIGENCE_CONTENT_SUGGESTIONS",
    "type" : "String",
    "comment" : "\n     * Definitions for properties related to Content Suggestions.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_MEDIA_NATIVE",
    "type" : "String",
    "comment" : "\n     * Namespace for all media native related features.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_NETD_NATIVE",
    "type" : "String",
    "comment" : "\n     * Namespace for all netd related features.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_PACKAGE_MANAGER_SERVICE",
    "type" : "String",
    "comment" : "\n     * Namespace for features related to the Package Manager Service.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_ROLLBACK",
    "type" : "String",
    "comment" : "\n     * Namespace for Rollback flags that are applied immediately.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_ROLLBACK_BOOT",
    "type" : "String",
    "comment" : "\n     * Namespace for Rollback flags that are applied after a reboot.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_RUNTIME",
    "type" : "String",
    "comment" : "\n     * Namespace for all runtime related features that don't require a reboot to become active.\n     * There are no feature flags using NAMESPACE_RUNTIME.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_RUNTIME_NATIVE",
    "type" : "String",
    "comment" : "\n     * Namespace for all runtime related features that require system properties for accessing\n     * the feature flags from C++ or Java language code. One example is the app image startup\n     * cache feature use_app_image_startup_cache.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_RUNTIME_NATIVE_BOOT",
    "type" : "String",
    "comment" : "\n     * Namespace for all runtime native boot related features. Boot in this case refers to the\n     * fact that the properties only take affect after rebooting the device.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_SCHEDULER",
    "type" : "String",
    "comment" : "\n     * Namespace for system scheduler related features. These features will be applied\n     * immediately upon change.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_SETTINGS_STATS",
    "type" : "String",
    "comment" : "\n     * Namespace for settings statistics features.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_STORAGE",
    "type" : "String",
    "comment" : "\n     * Namespace for storage-related features.\n     *\n     * @deprecated Replace storage namespace with storage_native_boot.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_STORAGE_NATIVE_BOOT",
    "type" : "String",
    "comment" : "\n     * Namespace for storage-related features, including native and boot.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_SYSTEMUI",
    "type" : "String",
    "comment" : "\n     * Namespace for System UI related features.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_TELEPHONY",
    "type" : "String",
    "comment" : "\n     * Telephony related properties.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_TEXTCLASSIFIER",
    "type" : "String",
    "comment" : "\n     * Namespace for TextClassifier related features.\n     *\n     * @hide\n     * @see android.provider.Settings.Global.TEXT_CLASSIFIER_CONSTANTS\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_CONTACTS_PROVIDER",
    "type" : "String",
    "comment" : "\n     * Namespace for contacts provider related features.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_SETTINGS_UI",
    "type" : "String",
    "comment" : "\n     * Namespace for settings ui related features\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_ANDROID",
    "type" : "String",
    "comment" : "\n     * Namespace for android related features, i.e. for flags that affect not just a single\n     * component, but the entire system.\n     *\n     * The keys for this namespace are defined in {@link AndroidDeviceConfig}.\n     *\n     * @hide\n     ",
    "links" : [ "AndroidDeviceConfig" ]
  }, {
    "name" : "NAMESPACE_WINDOW_MANAGER",
    "type" : "String",
    "comment" : "\n     * Namespace for window manager related features.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_WINDOW_MANAGER_NATIVE_BOOT",
    "type" : "String",
    "comment" : "\n     * Namespace for window manager features accessible by native code and\n     * loaded once per boot.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PUBLIC_NAMESPACES",
    "type" : "List<String>",
    "comment" : "\n     * List of namespaces which can be read without READ_DEVICE_CONFIG permission\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_PRIVACY",
    "type" : "String",
    "comment" : "\n     * Privacy related properties definitions.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_BIOMETRICS",
    "type" : "String",
    "comment" : "\n     * Namespace for biometrics related features\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_PERMISSIONS",
    "type" : "String",
    "comment" : "\n     * Permission related properties definitions.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_WIDGET",
    "type" : "String",
    "comment" : "\n     * Namespace for all widget related features.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_CONNECTIVITY_THERMAL_POWER_MANAGER",
    "type" : "String",
    "comment" : "\n     * Namespace for connectivity thermal power manager features.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_CONFIGURATION",
    "type" : "String",
    "comment" : "\n     * Namespace for configuration related features.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "sLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sListeners",
    "type" : "ArrayMap<OnPropertiesChangedListener, Pair<String, Executor>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sNamespaces",
    "type" : "Map<String, Pair<ContentObserver, Integer>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static String getProperty(@NonNull String namespace, @NonNull String name)",
    "returnType" : "String",
    "comment" : "\n     * Look up the value of a property for a particular namespace.\n     *\n     * @param namespace The namespace containing the property to look up.\n     * @param name      The name of the property to look up.\n     * @return the corresponding value, or null if not present.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Properties getProperties(@NonNull String namespace, @NonNull String... names)",
    "returnType" : "Properties",
    "comment" : "\n     * Look up the values of multiple properties for a particular namespace. The lookup is atomic,\n     * such that the values of these properties cannot change between the time when the first is\n     * fetched and the time when the last is fetched.\n     * <p>\n     * Each call to {@link #setProperties(Properties)} is also atomic and ensures that either none\n     * or all of the change is picked up here, but never only part of it.\n     *\n     * @param namespace The namespace containing the properties to look up.\n     * @param names     The names of properties to look up, or empty to fetch all properties for the\n     *                  given namespace.\n     * @return {@link Properties} object containing the requested properties. This reflects the\n     *     state of these properties at the time of the lookup, and is not updated to reflect any\n     *     future changes. The keyset of this Properties object will contain only the intersection\n     *     of properties already set and properties requested via the names parameter. Properties\n     *     that are already set but were not requested will not be contained here. Properties that\n     *     are not set, but were requested will not be contained here either.\n     * @hide\n     ",
    "links" : [ "#setProperties", "Properties" ]
  }, {
    "name" : "public static String getString(@NonNull String namespace, @NonNull String name, @Nullable String defaultValue)",
    "returnType" : "String",
    "comment" : "\n     * Look up the String value of a property for a particular namespace.\n     *\n     * @param namespace    The namespace containing the property to look up.\n     * @param name         The name of the property to look up.\n     * @param defaultValue The value to return if the property does not exist or has no non-null\n     *                     value.\n     * @return the corresponding value, or defaultValue if none exists.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean getBoolean(@NonNull String namespace, @NonNull String name, boolean defaultValue)",
    "returnType" : "boolean",
    "comment" : "\n     * Look up the boolean value of a property for a particular namespace.\n     *\n     * @param namespace The namespace containing the property to look up.\n     * @param name      The name of the property to look up.\n     * @param defaultValue The value to return if the property does not exist or has no non-null\n     *                     value.\n     * @return the corresponding value, or defaultValue if none exists.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getInt(@NonNull String namespace, @NonNull String name, int defaultValue)",
    "returnType" : "int",
    "comment" : "\n     * Look up the int value of a property for a particular namespace.\n     *\n     * @param namespace The namespace containing the property to look up.\n     * @param name      The name of the property to look up.\n     * @param defaultValue The value to return if the property does not exist, has no non-null\n     *                     value, or fails to parse into an int.\n     * @return the corresponding value, or defaultValue if either none exists or it does not parse.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static long getLong(@NonNull String namespace, @NonNull String name, long defaultValue)",
    "returnType" : "long",
    "comment" : "\n     * Look up the long value of a property for a particular namespace.\n     *\n     * @param namespace The namespace containing the property to look up.\n     * @param name      The name of the property to look up.\n     * @param defaultValue The value to return if the property does not exist, has no non-null\n     *                     value, or fails to parse into a long.\n     * @return the corresponding value, or defaultValue if either none exists or it does not parse.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static float getFloat(@NonNull String namespace, @NonNull String name, float defaultValue)",
    "returnType" : "float",
    "comment" : "\n     * Look up the float value of a property for a particular namespace.\n     *\n     * @param namespace The namespace containing the property to look up.\n     * @param name      The name of the property to look up.\n     * @param defaultValue The value to return if the property does not exist, has no non-null\n     *                     value, or fails to parse into a float.\n     * @return the corresponding value, or defaultValue if either none exists or it does not parse.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean setProperty(@NonNull String namespace, @NonNull String name, @Nullable String value, boolean makeDefault)",
    "returnType" : "boolean",
    "comment" : "\n     * Create a new property with the the provided name and value in the provided namespace, or\n     * update the value of such a property if it already exists. The same name can exist in multiple\n     * namespaces and might have different values in any or all namespaces.\n     * <p>\n     * The method takes an argument indicating whether to make the value the default for this\n     * property.\n     * <p>\n     * All properties stored for a particular scope can be reverted to their default values\n     * by passing the namespace to {@link #resetToDefaults(int, String)}.\n     *\n     * @param namespace   The namespace containing the property to create or update.\n     * @param name        The name of the property to create or update.\n     * @param value       The value to store for the property.\n     * @param makeDefault Whether to make the new value the default one.\n     * @return True if the value was set, false if the storage implementation throws errors.\n     * @hide\n     * @see #resetToDefaults(int, String).\n     ",
    "links" : [ "#resetToDefaults" ]
  }, {
    "name" : "public static boolean setProperties(@NonNull Properties properties) throws BadConfigException",
    "returnType" : "boolean",
    "comment" : "\n     * Set all of the properties for a specific namespace. Pre-existing properties will be updated\n     * and new properties will be added if necessary. Any pre-existing properties for the specific\n     * namespace which are not part of the provided {@link Properties} object will be deleted from\n     * the namespace. These changes are all applied atomically, such that no calls to read or reset\n     * these properties can happen in the middle of this update.\n     * <p>\n     * Each call to {@link #getProperties(String, String...)} is also atomic and ensures that either\n     * none or all of this update is picked up, but never only part of it.\n     *\n     * @param properties the complete set of properties to set for a specific namespace.\n     * @throws BadConfigException if the provided properties are banned by RescueParty.\n     * @return True if the values were set, false otherwise.\n     * @hide\n     ",
    "links" : [ "Properties", "#getProperties" ]
  }, {
    "name" : "public static void resetToDefaults(@ResetMode int resetMode, @Nullable String namespace)",
    "returnType" : "void",
    "comment" : "\n     * Reset properties to their default values.\n     * <p>\n     * The method accepts an optional namespace parameter. If provided, only properties set within\n     * that namespace will be reset. Otherwise, all properties will be reset.\n     *\n     * @param resetMode The reset mode to use.\n     * @param namespace Optionally, the specific namespace which resets will be limited to.\n     * @hide\n     * @see #setProperty(String, String, String, boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void addOnPropertiesChangedListener(@NonNull String namespace, @NonNull @CallbackExecutor Executor executor, @NonNull OnPropertiesChangedListener onPropertiesChangedListener)",
    "returnType" : "void",
    "comment" : "\n     * Add a listener for property changes.\n     * <p>\n     * This listener will be called whenever properties in the specified namespace change. Callbacks\n     * will be made on the specified executor. Future calls to this method with the same listener\n     * will replace the old namespace and executor. Remove the listener entirely by calling\n     * {@link #removeOnPropertiesChangedListener(OnPropertiesChangedListener)}.\n     *\n     * @param namespace                   The namespace containing properties to monitor.\n     * @param executor                    The executor which will be used to run callbacks.\n     * @param onPropertiesChangedListener The listener to add.\n     * @hide\n     * @see #removeOnPropertiesChangedListener(OnPropertiesChangedListener)\n     ",
    "links" : [ "#removeOnPropertiesChangedListener" ]
  }, {
    "name" : "public static void removeOnPropertiesChangedListener(@NonNull OnPropertiesChangedListener onPropertiesChangedListener)",
    "returnType" : "void",
    "comment" : "\n     * Remove a listener for property changes. The listener will receive no further notification of\n     * property changes.\n     *\n     * @param onPropertiesChangedListener The listener to remove.\n     * @hide\n     * @see #addOnPropertiesChangedListener(String, Executor, OnPropertiesChangedListener)\n     ",
    "links" : [ ]
  }, {
    "name" : "private static Uri createNamespaceUri(@NonNull String namespace)",
    "returnType" : "Uri",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void incrementNamespace(@NonNull String namespace)",
    "returnType" : "void",
    "comment" : "\n     * Increment the count used to represent the number of listeners subscribed to the given\n     * namespace. If this is the first (i.e. incrementing from 0 to 1) for the given namespace, a\n     * ContentObserver is registered.\n     *\n     * @param namespace The namespace to increment the count for.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void decrementNamespace(@NonNull String namespace)",
    "returnType" : "void",
    "comment" : "\n     * Decrement the count used to represent the number of listeners subscribed to the given\n     * namespace. If this is the final decrement call (i.e. decrementing from 1 to 0) for the given\n     * namespace, the ContentObserver that had been tracking it will be removed.\n     *\n     * @param namespace The namespace to decrement the count for.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void handleChange(@NonNull Uri uri)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void enforceReadPermission(Context context, String namespace)",
    "returnType" : "void",
    "comment" : "\n     * Enforces READ_DEVICE_CONFIG permission if namespace is not one of public namespaces.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static List<String> getPublicNamespaces()",
    "returnType" : "List<String>",
    "comment" : "\n     * Returns list of namespaces that can be read without READ_DEVICE_CONFIG_PERMISSION;\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "CONTENT_URI", "NAMESPACE_ACTIVITY_MANAGER", "NAMESPACE_ACTIVITY_MANAGER_NATIVE_BOOT", "NAMESPACE_APP_COMPAT", "NAMESPACE_ATTENTION_MANAGER_SERVICE", "NAMESPACE_AUTOFILL", "NAMESPACE_BLOBSTORE", "NAMESPACE_CONNECTIVITY", "NAMESPACE_CONTENT_CAPTURE", "NAMESPACE_DEX_BOOT", "NAMESPACE_DISPLAY_MANAGER", "NAMESPACE_GAME_DRIVER", "NAMESPACE_INPUT_NATIVE_BOOT", "NAMESPACE_INTELLIGENCE_ATTENTION", "NAMESPACE_INTELLIGENCE_CONTENT_SUGGESTIONS", "NAMESPACE_MEDIA_NATIVE", "NAMESPACE_NETD_NATIVE", "NAMESPACE_PACKAGE_MANAGER_SERVICE", "NAMESPACE_ROLLBACK", "NAMESPACE_ROLLBACK_BOOT", "NAMESPACE_RUNTIME", "NAMESPACE_RUNTIME_NATIVE", "NAMESPACE_RUNTIME_NATIVE_BOOT", "NAMESPACE_SCHEDULER", "NAMESPACE_SETTINGS_STATS", "NAMESPACE_STORAGE", "NAMESPACE_STORAGE_NATIVE_BOOT", "NAMESPACE_SYSTEMUI", "NAMESPACE_TELEPHONY", "NAMESPACE_TEXTCLASSIFIER", "NAMESPACE_CONTACTS_PROVIDER", "NAMESPACE_SETTINGS_UI", "NAMESPACE_ANDROID", "NAMESPACE_WINDOW_MANAGER", "NAMESPACE_WINDOW_MANAGER_NATIVE_BOOT", "PUBLIC_NAMESPACES", "NAMESPACE_PRIVACY", "NAMESPACE_BIOMETRICS", "NAMESPACE_PERMISSIONS", "NAMESPACE_WIDGET", "NAMESPACE_CONNECTIVITY_THERMAL_POWER_MANAGER", "NAMESPACE_CONFIGURATION", "sLock", "sListeners", "sNamespaces", "TAG" ],
  "methodNames" : [ "public static String getProperty(@NonNull String namespace, @NonNull String name)", "public static Properties getProperties(@NonNull String namespace, @NonNull String... names)", "public static String getString(@NonNull String namespace, @NonNull String name, @Nullable String defaultValue)", "public static boolean getBoolean(@NonNull String namespace, @NonNull String name, boolean defaultValue)", "public static int getInt(@NonNull String namespace, @NonNull String name, int defaultValue)", "public static long getLong(@NonNull String namespace, @NonNull String name, long defaultValue)", "public static float getFloat(@NonNull String namespace, @NonNull String name, float defaultValue)", "public static boolean setProperty(@NonNull String namespace, @NonNull String name, @Nullable String value, boolean makeDefault)", "public static boolean setProperties(@NonNull Properties properties) throws BadConfigException", "public static void resetToDefaults(@ResetMode int resetMode, @Nullable String namespace)", "public static void addOnPropertiesChangedListener(@NonNull String namespace, @NonNull @CallbackExecutor Executor executor, @NonNull OnPropertiesChangedListener onPropertiesChangedListener)", "public static void removeOnPropertiesChangedListener(@NonNull OnPropertiesChangedListener onPropertiesChangedListener)", "private static Uri createNamespaceUri(@NonNull String namespace)", "private static void incrementNamespace(@NonNull String namespace)", "private static void decrementNamespace(@NonNull String namespace)", "private static void handleChange(@NonNull Uri uri)", "public static void enforceReadPermission(Context context, String namespace)", "public static List<String> getPublicNamespaces()" ]
}