{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/text/NFSubstitution.java",
  "packageName" : "android.icu.text",
  "className" : "MultiplierSubstitution",
  "comment" : "\n * A substitution that divides the number being formatted by the rule's\n * divisor and formats the quotient.  Represented by &lt;&lt; in normal\n * rules.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "divisor",
    "type" : "long",
    "comment" : "\n     * The divisor of the rule that owns this substitution.\n     ",
    "links" : [ ]
  }, {
    "name" : "owningRule",
    "type" : "NFRule",
    "comment" : "\n     * A backpointer to the owning rule.  Used in the rounding logic to determine\n     * whether the owning rule also has a modulus substitution.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setDivisor(int radix, short exponent)",
    "returnType" : "void",
    "comment" : "\n     * Sets the substitution's divisor based on the values passed in.\n     * @param radix The radix of the divisor.\n     * @param exponent The exponent of the divisor.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object that)",
    "returnType" : "boolean",
    "comment" : "\n     * Augments the superclass's equals() function by comparing divisors.\n     * @param that The other substitution\n     * @return true if the two substitutions are functionally equal\n     ",
    "links" : [ ]
  }, {
    "name" : "public long transformNumber(long number)",
    "returnType" : "long",
    "comment" : "\n     * Divides the number by the rule's divisor and returns the quotient.\n     * @param number The number being formatted.\n     * @return \"number\" divided by the rule's divisor\n     ",
    "links" : [ ]
  }, {
    "name" : "public double transformNumber(double number)",
    "returnType" : "double",
    "comment" : "\n     * Divides the number by the rule's divisor and returns the quotient.\n     * This is an integral quotient if we're filling in the substitution\n     * using another rule set, but it's the full quotient (integral and\n     * fractional parts) if we're filling in the substitution using\n     * a DecimalFormat.  (This allows things such as \"1.2 million\".)\n     * @param number The number being formatted\n     * @return \"number\" divided by the rule's divisor\n     ",
    "links" : [ ]
  }, {
    "name" : "public double composeRuleValue(double newRuleValue, double oldRuleValue)",
    "returnType" : "double",
    "comment" : "\n     * Returns newRuleValue times the divisor.  Ignores oldRuleValue.\n     * (The result of matching a << substitution supersedes the base\n     * value of the rule that contains it.)\n     * @param newRuleValue The result of matching the substitution\n     * @param oldRuleValue The base value of the rule containing the\n     * substitution\n     * @return newRuleValue * divisor\n     ",
    "links" : [ ]
  }, {
    "name" : "public double calcUpperBound(double oldUpperBound)",
    "returnType" : "double",
    "comment" : "\n     * Sets the upper bound down to the rule's divisor.\n     * @param oldUpperBound Ignored.\n     * @return The rule's divisor.\n     ",
    "links" : [ ]
  }, {
    "name" : " char tokenChar()",
    "returnType" : "char",
    "comment" : "\n     * The token character for a multiplier substitution is &lt;.\n     * @return '&lt;'\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setDivisor(int radix, short exponent)", "public boolean equals(Object that)", "public long transformNumber(long number)", "public double transformNumber(double number)", "public double composeRuleValue(double newRuleValue, double oldRuleValue)", "public double calcUpperBound(double oldUpperBound)", " char tokenChar()" ],
  "variableNames" : [ "divisor", "owningRule" ]
}