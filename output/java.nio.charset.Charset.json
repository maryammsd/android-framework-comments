{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/nio/charset/Charset.java",
  "packageName" : "java.nio.charset",
  "className" : "Charset",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "zeroAliases",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "cache1",
    "type" : "Map.Entry<String, Charset>",
    "comment" : " \"Level 1\" cache",
    "links" : [ ]
  }, {
    "name" : "cache2",
    "type" : "HashMap<String, Charset>",
    "comment" : " \"Level 2\" cache",
    "links" : [ ]
  }, {
    "name" : "gate",
    "type" : "ThreadLocal<ThreadLocal<?>>",
    "comment" : " Thread-local gate to prevent recursive provider lookups",
    "links" : [ ]
  }, {
    "name" : "defaultCharset",
    "type" : "Charset",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "name",
    "type" : "String",
    "comment" : " tickles a bug in oldjavac",
    "links" : [ ]
  }, {
    "name" : "aliases",
    "type" : "String[]",
    "comment" : " tickles a bug in oldjavac",
    "links" : [ ]
  }, {
    "name" : "aliasSet",
    "type" : "Set<String>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static void checkName(String s)",
    "returnType" : "void",
    "comment" : "\n     * Checks that the given string is a legal charset name. </p>\n     *\n     * @param  s\n     *         A purported charset name\n     *\n     * @throws  IllegalCharsetNameException\n     *          If the given name is not a legal charset name\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void cache(String charsetName, Charset cs)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Iterator<CharsetProvider> providers()",
    "returnType" : "Iterator<CharsetProvider>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Charset lookupViaProviders(final String charsetName)",
    "returnType" : "Charset",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Charset lookup(String charsetName)",
    "returnType" : "Charset",
    "comment" : " instance in a map for level 2 cache.",
    "links" : [ ]
  }, {
    "name" : "private static Charset lookup2(String charsetName)",
    "returnType" : "Charset",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static boolean isSupported(String charsetName)",
    "returnType" : "boolean",
    "comment" : "\n     * Tells whether the named charset is supported.\n     *\n     * @param  charsetName\n     *         The name of the requested charset; may be either\n     *         a canonical name or an alias\n     *\n     * @return  {@code true} if, and only if, support for the named charset\n     *          is available in the current Java virtual machine\n     *\n     * @throws IllegalCharsetNameException\n     *         If the given charset name is illegal\n     *\n     * @throws  IllegalArgumentException\n     *          If the given {@code charsetName} is null\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Charset forName(String charsetName)",
    "returnType" : "Charset",
    "comment" : "\n     * Returns a charset object for the named charset.\n     *\n     * @param  charsetName\n     *         The name of the requested charset; may be either\n     *         a canonical name or an alias\n     *\n     * @return  A charset object for the named charset\n     *\n     * @throws  IllegalCharsetNameException\n     *          If the given charset name is illegal\n     *\n     * @throws  IllegalArgumentException\n     *          If the given {@code charsetName} is null\n     *\n     * @throws  UnsupportedCharsetException\n     *          If no support for the named charset is available\n     *          in this instance of the Java virtual machine\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Charset forNameUEE(String charsetName) throws UnsupportedEncodingException",
    "returnType" : "Charset",
    "comment" : "\n     * Equivalent to {@code forName} but only throws {@code UnsupportedEncodingException},\n     * which is all pre-nio code claims to throw.\n     *\n     * @hide internal use only\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void put(Iterator<Charset> i, Map<String, Charset> m)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static SortedMap<String, Charset> availableCharsets()",
    "returnType" : "SortedMap<String, Charset>",
    "comment" : "\n     * Constructs a sorted map from canonical charset names to charset objects.\n     *\n     * <p> The map returned by this method will have one entry for each charset\n     * for which support is available in the current Java virtual machine.  If\n     * two or more supported charsets have the same canonical name then the\n     * resulting map will contain just one of them; which one it will contain\n     * is not specified. </p>\n     *\n     * <p> The invocation of this method, and the subsequent use of the\n     * resulting map, may cause time-consuming disk or network I/O operations\n     * to occur.  This method is provided for applications that need to\n     * enumerate all of the available charsets, for example to allow user\n     * charset selection.  This method is not used by the {@link #forName\n     * forName} method, which instead employs an efficient incremental lookup\n     * algorithm.\n     *\n     * <p> This method may return different results at different times if new\n     * charset providers are dynamically made available to the current Java\n     * virtual machine.  In the absence of such changes, the charsets returned\n     * by this method are exactly those that can be retrieved via the {@link\n     * #forName forName} method.  </p>\n     *\n     * @return An immutable, case-insensitive map from canonical charset names\n     *         to charset objects\n     ",
    "links" : [ "#forNameforName", "#forName" ]
  }, {
    "name" : "public static Charset defaultCharset()",
    "returnType" : "Charset",
    "comment" : "\n     * Returns the default charset of this Java virtual machine.\n     *\n     * <p>Android note: The Android platform default is always UTF-8.\n     *\n     * @return  A charset object for the default charset\n     *\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public final String name()",
    "returnType" : "String",
    "comment" : "\n     * Returns this charset's canonical name.\n     *\n     * @return  The canonical name of this charset\n     ",
    "links" : [ ]
  }, {
    "name" : "public final Set<String> aliases()",
    "returnType" : "Set<String>",
    "comment" : "\n     * Returns a set containing this charset's aliases.\n     *\n     * @return  An immutable set of this charset's aliases\n     ",
    "links" : [ ]
  }, {
    "name" : "public String displayName()",
    "returnType" : "String",
    "comment" : "\n     * Returns this charset's human-readable name for the default locale.\n     *\n     * <p> The default implementation of this method simply returns this\n     * charset's canonical name.  Concrete subclasses of this class may\n     * override this method in order to provide a localized display name. </p>\n     *\n     * @return  The display name of this charset in the default locale\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean isRegistered()",
    "returnType" : "boolean",
    "comment" : "\n     * Tells whether or not this charset is registered in the <a\n     * href=\"http://www.iana.org/assignments/character-sets\">IANA Charset\n     * Registry</a>.\n     *\n     * @return  {@code true} if, and only if, this charset is known by its\n     *          implementor to be registered with the IANA\n     ",
    "links" : [ ]
  }, {
    "name" : "public String displayName(Locale locale)",
    "returnType" : "String",
    "comment" : "\n     * Returns this charset's human-readable name for the given locale.\n     *\n     * <p> The default implementation of this method simply returns this\n     * charset's canonical name.  Concrete subclasses of this class may\n     * override this method in order to provide a localized display name. </p>\n     *\n     * @param  locale\n     *         The locale for which the display name is to be retrieved\n     *\n     * @return  The display name of this charset in the given locale\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean contains(Charset cs)",
    "returnType" : "boolean",
    "comment" : "\n     * Tells whether or not this charset contains the given charset.\n     *\n     * <p> A charset <i>C</i> is said to <i>contain</i> a charset <i>D</i> if,\n     * and only if, every character representable in <i>D</i> is also\n     * representable in <i>C</i>.  If this relationship holds then it is\n     * guaranteed that every string that can be encoded in <i>D</i> can also be\n     * encoded in <i>C</i> without performing any replacements.\n     *\n     * <p> That <i>C</i> contains <i>D</i> does not imply that each character\n     * representable in <i>C</i> by a particular byte sequence is represented\n     * in <i>D</i> by the same byte sequence, although sometimes this is the\n     * case.\n     *\n     * <p> Every charset contains itself.\n     *\n     * <p> This method computes an approximation of the containment relation:\n     * If it returns {@code true} then the given charset is known to be\n     * contained by this charset; if it returns {@code false}, however, then\n     * it is not necessarily the case that the given charset is not contained\n     * in this charset.\n     *\n     * @param   cs\n     *          The given charset\n     *\n     * @return  {@code true} if the given charset is contained in this charset\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract CharsetDecoder newDecoder()",
    "returnType" : "CharsetDecoder",
    "comment" : "\n     * Constructs a new decoder for this charset.\n     *\n     * @return  A new decoder for this charset\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract CharsetEncoder newEncoder()",
    "returnType" : "CharsetEncoder",
    "comment" : "\n     * Constructs a new encoder for this charset.\n     *\n     * @return  A new encoder for this charset\n     *\n     * @throws  UnsupportedOperationException\n     *          If this charset does not support encoding\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean canEncode()",
    "returnType" : "boolean",
    "comment" : "\n     * Tells whether or not this charset supports encoding.\n     *\n     * <p> Nearly all charsets support encoding.  The primary exceptions are\n     * special-purpose <i>auto-detect</i> charsets whose decoders can determine\n     * which of several possible encoding schemes is in use by examining the\n     * input byte sequence.  Such charsets do not support encoding because\n     * there is no way to determine which encoding should be used on output.\n     * Implementations of such charsets should override this method to return\n     * {@code false}. </p>\n     *\n     * @return  {@code true} if, and only if, this charset supports encoding\n     ",
    "links" : [ ]
  }, {
    "name" : "public final CharBuffer decode(ByteBuffer bb)",
    "returnType" : "CharBuffer",
    "comment" : "\n     * Convenience method that decodes bytes in this charset into Unicode\n     * characters.\n     *\n     * <p> An invocation of this method upon a charset {@code cs} returns the\n     * same result as the expression\n     *\n     * <pre>\n     *     cs.newDecoder()\n     *       .onMalformedInput(CodingErrorAction.REPLACE)\n     *       .onUnmappableCharacter(CodingErrorAction.REPLACE)\n     *       .decode(bb); </pre>\n     *\n     * except that it is potentially more efficient because it can cache\n     * decoders between successive invocations.\n     *\n     * <p> This method always replaces malformed-input and unmappable-character\n     * sequences with this charset's default replacement byte array.  In order\n     * to detect such sequences, use the {@link\n     * CharsetDecoder#decode(java.nio.ByteBuffer)} method directly.  </p>\n     *\n     * @param  bb  The byte buffer to be decoded\n     *\n     * @return  A char buffer containing the decoded characters\n     ",
    "links" : [ "java.nio.charset.CharsetDecoder#decode(java.nio.ByteBuffer)" ]
  }, {
    "name" : "public final ByteBuffer encode(CharBuffer cb)",
    "returnType" : "ByteBuffer",
    "comment" : "\n     * Convenience method that encodes Unicode characters into bytes in this\n     * charset.\n     *\n     * <p> An invocation of this method upon a charset {@code cs} returns the\n     * same result as the expression\n     *\n     * <pre>\n     *     cs.newEncoder()\n     *       .onMalformedInput(CodingErrorAction.REPLACE)\n     *       .onUnmappableCharacter(CodingErrorAction.REPLACE)\n     *       .encode(bb); </pre>\n     *\n     * except that it is potentially more efficient because it can cache\n     * encoders between successive invocations.\n     *\n     * <p> This method always replaces malformed-input and unmappable-character\n     * sequences with this charset's default replacement string.  In order to\n     * detect such sequences, use the {@link\n     * CharsetEncoder#encode(java.nio.CharBuffer)} method directly.  </p>\n     *\n     * @param  cb  The char buffer to be encoded\n     *\n     * @return  A byte buffer containing the encoded characters\n     ",
    "links" : [ "java.nio.charset.CharsetEncoder#encode(java.nio.CharBuffer)" ]
  }, {
    "name" : "public final ByteBuffer encode(String str)",
    "returnType" : "ByteBuffer",
    "comment" : "\n     * Convenience method that encodes a string into bytes in this charset.\n     *\n     * <p> An invocation of this method upon a charset {@code cs} returns the\n     * same result as the expression\n     *\n     * <pre>\n     *     cs.encode(CharBuffer.wrap(s)); </pre>\n     *\n     * @param  str  The string to be encoded\n     *\n     * @return  A byte buffer containing the encoded characters\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int compareTo(Charset that)",
    "returnType" : "int",
    "comment" : "\n     * Compares this charset to another.\n     *\n     * <p> Charsets are ordered by their canonical names, without regard to\n     * case. </p>\n     *\n     * @param  that\n     *         The charset to which this charset is to be compared\n     *\n     * @return A negative integer, zero, or a positive integer as this charset\n     *         is less than, equal to, or greater than the specified charset\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Computes a hashcode for this charset.\n     *\n     * @return  An integer hashcode\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean equals(Object ob)",
    "returnType" : "boolean",
    "comment" : "\n     * Tells whether or not this object is equal to another.\n     *\n     * <p> Two charsets are equal if, and only if, they have the same canonical\n     * names.  A charset is never equal to any other type of object.  </p>\n     *\n     * @return  {@code true} if, and only if, this charset is equal to the\n     *          given object\n     ",
    "links" : [ ]
  }, {
    "name" : "public final String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a string describing this charset.\n     *\n     * @return  A string describing this charset\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static void checkName(String s)", "private static void cache(String charsetName, Charset cs)", "private static Iterator<CharsetProvider> providers()", "private static Charset lookupViaProviders(final String charsetName)", "private static Charset lookup(String charsetName)", "private static Charset lookup2(String charsetName)", "public static boolean isSupported(String charsetName)", "public static Charset forName(String charsetName)", "public static Charset forNameUEE(String charsetName) throws UnsupportedEncodingException", "private static void put(Iterator<Charset> i, Map<String, Charset> m)", "public static SortedMap<String, Charset> availableCharsets()", "public static Charset defaultCharset()", "public final String name()", "public final Set<String> aliases()", "public String displayName()", "public final boolean isRegistered()", "public String displayName(Locale locale)", "public abstract boolean contains(Charset cs)", "public abstract CharsetDecoder newDecoder()", "public abstract CharsetEncoder newEncoder()", "public boolean canEncode()", "public final CharBuffer decode(ByteBuffer bb)", "public final ByteBuffer encode(CharBuffer cb)", "public final ByteBuffer encode(String str)", "public final int compareTo(Charset that)", "public final int hashCode()", "public final boolean equals(Object ob)", "public final String toString()" ],
  "variableNames" : [ "zeroAliases", "cache1", "cache2", "gate", "defaultCharset", "name", "aliases", "aliasSet" ]
}