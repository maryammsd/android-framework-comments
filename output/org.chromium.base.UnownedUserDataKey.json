{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/chromium/base/UnownedUserDataKey.java",
  "packageName" : "org.chromium.base",
  "className" : "UnownedUserDataKey",
  "comment" : "\n * UnownedUserDataKey is used in conjunction with a particular {@link UnownedUserData} as the key\n * for that when it is added to an {@link UnownedUserDataHost}.\n * <p>\n * This key is supposed to be private and not visible to other parts of the code base. Instead of\n * using the class as a key like in owned {@link org.chromium.base.UserData}, for {@link\n * UnownedUserData}, a particular object is used, ensuring that even if a class is visible outside\n * its own module, the instance of it as referenced from a {@link UnownedUserDataHost}, can not be\n * retrieved.\n * <p>\n * In practice, instances will typically be stored on this form:\n *\n * <pre>{@code\n * public class Foo implements UnownedUserData {\n *     private static final UnownedUserDataKey<Foo> KEY = new UnownedUserDataKey<>(Foo.class);\n *     ...\n * }\n * }\n * </pre>\n * <p>\n * This class and all its methods are final to ensure that no usage of the class leads to leaking\n * data about the object it is used as a key for.\n * <p>\n * It is OK to attach this key to as many different {@link UnownedUserDataHost} instances as\n * necessary, but doing so requires the client to invoke either {@link\n * #detachFromHost(UnownedUserDataHost)} or {@link #detachFromAllHosts(UnownedUserData)} during\n * cleanup.\n * <p>\n * Guarantees provided by this class together with {@link UnownedUserDataHost}:\n * <ul>\n * <li> One key can be used for multiple {@link UnownedUserData}s.\n * <li> One key can be attached to multiple {@link UnownedUserDataHost}s.\n * <li> One key can be attached to a particular {@link UnownedUserDataHost} only once. This ensures\n * a pair of {@link UnownedUserDataHost} and UnownedUserDataKey can only refer to a single\n * UnownedUserData.\n * <li> When a {@link UnownedUserData} is detached from a particular host, it is informed of this,\n * except if it has been garbage collected.\n * <li> When an {@link UnownedUserData} object is replaced with a different {@link UnownedUserData}\n * using the same UnownedUserDataKey, the former is detached.\n * </ul>\n *\n * @param <T> The Class this key is used for.\n * @see UnownedUserDataHost for more details on ownership and typical usage.\n * @see UnownedUserData for the marker interface used for this type of data.\n ",
  "links" : [ "org.chromium.base.UnownedUserData", "org.chromium.base.UnownedUserDataHost", "#detachFromAllHosts(UnownedUserData)", "org.chromium.base.UserData", "#detachFromHost(UnownedUserDataHost)" ],
  "variables" : [ {
    "name" : "mClazz",
    "type" : "Class<T>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWeakHostAttachments",
    "type" : "Set<UnownedUserDataHost>",
    "comment" : " A Set that uses WeakReference<UnownedUserDataHost> internally.",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " final Class<T> getValueClass()",
    "returnType" : "Class<T>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final void attachToHost(@NonNull UnownedUserDataHost host, @NonNull T object)",
    "returnType" : "void",
    "comment" : "\n     * Attaches the {@link UnownedUserData} object to the given {@link UnownedUserDataHost}, and\n     * stores the host as a {@link WeakReference} to be able to detach from it later.\n     *\n     * @param host   The host to attach the {@code object} to.\n     * @param object The object to attach.\n     ",
    "links" : [ "org.chromium.base.UnownedUserData", "org.chromium.base.UnownedUserDataHost", "WeakReference" ]
  }, {
    "name" : "public final T retrieveDataFromHost(@NonNull UnownedUserDataHost host)",
    "returnType" : "T",
    "comment" : "\n     * Attempts to retrieve the instance of the {@link UnownedUserData} from the given {@link\n     * UnownedUserDataHost}. It will return {@code null} if the object is not attached to that\n     * particular {@link UnownedUserDataHost} using this key, or the {@link UnownedUserData} has\n     * been garbage collected.\n     *\n     * @param host The host to retrieve the {@link UnownedUserData} from.\n     * @return The current {@link UnownedUserData} stored in the {@code host}, or {@code null}.\n     ",
    "links" : [ "org.chromium.base.UnownedUserData", "org.chromium.base.UnownedUserDataHost" ]
  }, {
    "name" : "public final void detachFromHost(@NonNull UnownedUserDataHost host)",
    "returnType" : "void",
    "comment" : "\n     * Detaches the key and object from the given host if it is attached with this key. It is OK to\n     * call this for already detached objects.\n     *\n     * @param host The host to detach from.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void detachFromAllHosts(@NonNull T object)",
    "returnType" : "void",
    "comment" : "\n     * Detaches the {@link UnownedUserData} from all hosts that it is currently attached to with\n     * this key. It is OK to call this for already detached objects.\n     *\n     * @param object The object to detach from all hosts.\n     ",
    "links" : [ "org.chromium.base.UnownedUserData" ]
  }, {
    "name" : "public final boolean isAttachedToHost(@NonNull UnownedUserDataHost host)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if the {@link UnownedUserData} is currently attached to the given host with this key.\n     *\n     * @param host The host to check if the {@link UnownedUserData} is attached to.\n     * @return true if currently attached, false otherwise.\n     ",
    "links" : [ "org.chromium.base.UnownedUserData" ]
  }, {
    "name" : "public final boolean isAttachedToAnyHost(@NonNull T object)",
    "returnType" : "boolean",
    "comment" : "\n     * @return Whether the {@link UnownedUserData} is currently attached to any hosts with this key.\n     ",
    "links" : [ "org.chromium.base.UnownedUserData" ]
  }, {
    "name" : " int getHostAttachmentCount(@NonNull T object)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void removeHostAttachment(UnownedUserDataHost host)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void assertNoDestroyedAttachments()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ " final Class<T> getValueClass()", "public final void attachToHost(@NonNull UnownedUserDataHost host, @NonNull T object)", "public final T retrieveDataFromHost(@NonNull UnownedUserDataHost host)", "public final void detachFromHost(@NonNull UnownedUserDataHost host)", "public final void detachFromAllHosts(@NonNull T object)", "public final boolean isAttachedToHost(@NonNull UnownedUserDataHost host)", "public final boolean isAttachedToAnyHost(@NonNull T object)", " int getHostAttachmentCount(@NonNull T object)", "private void removeHostAttachment(UnownedUserDataHost host)", "private void assertNoDestroyedAttachments()" ],
  "variableNames" : [ "mClazz", "mWeakHostAttachments" ]
}