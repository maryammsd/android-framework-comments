{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/security/PolicySpi.java",
  "packageName" : "java.security",
  "className" : "PolicySpi",
  "comment" : "",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "protected abstract boolean engineImplies(ProtectionDomain domain, Permission permission)",
    "returnType" : "boolean",
    "comment" : "\n     * Check whether the policy has granted a Permission to a ProtectionDomain.\n     *\n     * @param domain the ProtectionDomain to check.\n     *\n     * @param permission check whether this permission is granted to the\n     *          specified domain.\n     *\n     * @return boolean true if the permission is granted to the domain.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void engineRefresh()",
    "returnType" : "void",
    "comment" : "\n     * Refreshes/reloads the policy configuration. The behavior of this method\n     * depends on the implementation. For example, calling {@code refresh}\n     * on a file-based policy will cause the file to be re-read.\n     *\n     * <p> The default implementation of this method does nothing.\n     * This method should be overridden if a refresh operation is supported\n     * by the policy implementation.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected PermissionCollection engineGetPermissions(CodeSource codesource)",
    "returnType" : "PermissionCollection",
    "comment" : "\n     * Return a PermissionCollection object containing the set of\n     * permissions granted to the specified CodeSource.\n     *\n     * <p> The default implementation of this method returns\n     * Policy.UNSUPPORTED_EMPTY_COLLECTION object.  This method can be\n     * overridden if the policy implementation can return a set of\n     * permissions granted to a CodeSource.\n     *\n     * @param codesource the CodeSource to which the returned\n     *          PermissionCollection has been granted.\n     *\n     * @return a set of permissions granted to the specified CodeSource.\n     *          If this operation is supported, the returned\n     *          set of permissions must be a new mutable instance\n     *          and it must support heterogeneous Permission types.\n     *          If this operation is not supported,\n     *          Policy.UNSUPPORTED_EMPTY_COLLECTION is returned.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected PermissionCollection engineGetPermissions(ProtectionDomain domain)",
    "returnType" : "PermissionCollection",
    "comment" : "\n     * Return a PermissionCollection object containing the set of\n     * permissions granted to the specified ProtectionDomain.\n     *\n     * <p> The default implementation of this method returns\n     * Policy.UNSUPPORTED_EMPTY_COLLECTION object.  This method can be\n     * overridden if the policy implementation can return a set of\n     * permissions granted to a ProtectionDomain.\n     *\n     * @param domain the ProtectionDomain to which the returned\n     *          PermissionCollection has been granted.\n     *\n     * @return a set of permissions granted to the specified ProtectionDomain.\n     *          If this operation is supported, the returned\n     *          set of permissions must be a new mutable instance\n     *          and it must support heterogeneous Permission types.\n     *          If this operation is not supported,\n     *          Policy.UNSUPPORTED_EMPTY_COLLECTION is returned.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "protected abstract boolean engineImplies(ProtectionDomain domain, Permission permission)", "protected void engineRefresh()", "protected PermissionCollection engineGetPermissions(CodeSource codesource)", "protected PermissionCollection engineGetPermissions(ProtectionDomain domain)" ],
  "variableNames" : [ ]
}