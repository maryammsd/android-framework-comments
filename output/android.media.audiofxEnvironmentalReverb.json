{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/media/audiofx/EnvironmentalReverb.java",
  "packageName" : "android.media.audiofx",
  "className" : "EnvironmentalReverb",
  "comment" : "",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PARAM_ROOM_LEVEL",
    "type" : "int",
    "comment" : "\n     * Room level. Parameter ID for OnParameterChangeListener\n     ",
    "links" : [ ]
  }, {
    "name" : "PARAM_ROOM_HF_LEVEL",
    "type" : "int",
    "comment" : "\n     * Room HF level. Parameter ID for OnParameterChangeListener\n     ",
    "links" : [ ]
  }, {
    "name" : "PARAM_DECAY_TIME",
    "type" : "int",
    "comment" : "\n     * Decay time. Parameter ID for OnParameterChangeListener\n     ",
    "links" : [ ]
  }, {
    "name" : "PARAM_DECAY_HF_RATIO",
    "type" : "int",
    "comment" : "\n     * Decay HF ratio. Parameter ID for\n     * {@link android.media.audiofx.EnvironmentalReverb.OnParameterChangeListener}\n     ",
    "links" : [ "android.media.audiofx.EnvironmentalReverb.OnParameterChangeListener" ]
  }, {
    "name" : "PARAM_REFLECTIONS_LEVEL",
    "type" : "int",
    "comment" : "\n     * Early reflections level. Parameter ID for OnParameterChangeListener\n     ",
    "links" : [ ]
  }, {
    "name" : "PARAM_REFLECTIONS_DELAY",
    "type" : "int",
    "comment" : "\n     * Early reflections delay. Parameter ID for OnParameterChangeListener\n     ",
    "links" : [ ]
  }, {
    "name" : "PARAM_REVERB_LEVEL",
    "type" : "int",
    "comment" : "\n     * Reverb level. Parameter ID for OnParameterChangeListener\n     ",
    "links" : [ ]
  }, {
    "name" : "PARAM_REVERB_DELAY",
    "type" : "int",
    "comment" : "\n     * Reverb delay. Parameter ID for OnParameterChangeListener\n     ",
    "links" : [ ]
  }, {
    "name" : "PARAM_DIFFUSION",
    "type" : "int",
    "comment" : "\n     * Diffusion. Parameter ID for OnParameterChangeListener\n     ",
    "links" : [ ]
  }, {
    "name" : "PARAM_DENSITY",
    "type" : "int",
    "comment" : "\n     * Density. Parameter ID for OnParameterChangeListener\n     ",
    "links" : [ ]
  }, {
    "name" : "PARAM_PROPERTIES",
    "type" : "int",
    "comment" : " used by setProperties()/getProperties",
    "links" : [ ]
  }, {
    "name" : "mParamListener",
    "type" : "OnParameterChangeListener",
    "comment" : "\n     * Registered listener for parameter changes\n     ",
    "links" : [ ]
  }, {
    "name" : "mBaseParamListener",
    "type" : "BaseParameterListener",
    "comment" : "\n     * Listener used internally to to receive raw parameter change event from AudioEffect super\n     * class\n     ",
    "links" : [ ]
  }, {
    "name" : "mParamListenerLock",
    "type" : "Object",
    "comment" : "\n     * Lock for access to mParamListener\n     ",
    "links" : [ ]
  }, {
    "name" : "PROPERTY_SIZE",
    "type" : "int",
    "comment" : " frameworks/base/include/media/EffectEnvironmentalReverbApi.h",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setRoomLevel(short room) throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException",
    "returnType" : "void",
    "comment" : "\n     * Sets the master volume level of the environmental reverb effect.\n     * @param room room level in millibels. The valid range is [-9000, 0].\n     * @throws IllegalStateException\n     * @throws IllegalArgumentException\n     * @throws UnsupportedOperationException\n     ",
    "links" : [ ]
  }, {
    "name" : "public short getRoomLevel() throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException",
    "returnType" : "short",
    "comment" : "\n     * Gets the master volume level of the environmental reverb effect.\n     * @return the room level in millibels.\n     * @throws IllegalStateException\n     * @throws IllegalArgumentException\n     * @throws UnsupportedOperationException\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setRoomHFLevel(short roomHF) throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException",
    "returnType" : "void",
    "comment" : "\n     * Sets the volume level at 5 kHz relative to the volume level at low frequencies of the\n     * overall reverb effect.\n     * <p>This controls a low-pass filter that will reduce the level of the high-frequency.\n     * @param roomHF high frequency attenuation level in millibels. The valid range is [-9000, 0].\n     * @throws IllegalStateException\n     * @throws IllegalArgumentException\n     * @throws UnsupportedOperationException\n     ",
    "links" : [ ]
  }, {
    "name" : "public short getRoomHFLevel() throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException",
    "returnType" : "short",
    "comment" : "\n     * Gets the room HF level.\n     * @return the room HF level in millibels.\n     * @throws IllegalStateException\n     * @throws IllegalArgumentException\n     * @throws UnsupportedOperationException\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDecayTime(int decayTime) throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException",
    "returnType" : "void",
    "comment" : "\n     * Sets the time taken for the level of reverberation to decay by 60 dB.\n     * @param decayTime decay time in milliseconds. The valid range is [100, 20000].\n     * @throws IllegalStateException\n     * @throws IllegalArgumentException\n     * @throws UnsupportedOperationException\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getDecayTime() throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException",
    "returnType" : "int",
    "comment" : "\n     * Gets the decay time.\n     * @return the decay time in milliseconds.\n     * @throws IllegalStateException\n     * @throws IllegalArgumentException\n     * @throws UnsupportedOperationException\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDecayHFRatio(short decayHFRatio) throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException",
    "returnType" : "void",
    "comment" : "\n     * Sets the ratio of high frequency decay time (at 5 kHz) relative to the decay time at low\n     * frequencies.\n     * @param decayHFRatio high frequency decay ratio using a permille scale. The valid range is\n     * [100, 2000]. A ratio of 1000 indicates that all frequencies decay at the same rate.\n     * @throws IllegalStateException\n     * @throws IllegalArgumentException\n     * @throws UnsupportedOperationException\n     ",
    "links" : [ ]
  }, {
    "name" : "public short getDecayHFRatio() throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException",
    "returnType" : "short",
    "comment" : "\n     * Gets the ratio of high frequency decay time (at 5 kHz) relative to low frequencies.\n     * @return the decay HF ration. See {@link #setDecayHFRatio(short)} for units.\n     * @throws IllegalStateException\n     * @throws IllegalArgumentException\n     * @throws UnsupportedOperationException\n     ",
    "links" : [ "#setDecayHFRatio" ]
  }, {
    "name" : "public void setReflectionsLevel(short reflectionsLevel) throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException",
    "returnType" : "void",
    "comment" : "\n     * Sets the volume level of the early reflections.\n     * <p>This level is combined with the overall room level\n     * (set using {@link #setRoomLevel(short)}).\n     * @param reflectionsLevel reflection level in millibels. The valid range is [-9000, 1000].\n     * @throws IllegalStateException\n     * @throws IllegalArgumentException\n     * @throws UnsupportedOperationException\n     ",
    "links" : [ "#setRoomLevel" ]
  }, {
    "name" : "public short getReflectionsLevel() throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException",
    "returnType" : "short",
    "comment" : "\n     * Gets the volume level of the early reflections.\n     * @return the early reflections level in millibels.\n     * @throws IllegalStateException\n     * @throws IllegalArgumentException\n     * @throws UnsupportedOperationException\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setReflectionsDelay(int reflectionsDelay) throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException",
    "returnType" : "void",
    "comment" : "\n     * Sets the delay time for the early reflections.\n     * <p>This method sets the time between when the direct path is heard and when the first\n     * reflection is heard.\n     * @param reflectionsDelay reflections delay in milliseconds. The valid range is [0, 300].\n     * @throws IllegalStateException\n     * @throws IllegalArgumentException\n     * @throws UnsupportedOperationException\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getReflectionsDelay() throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException",
    "returnType" : "int",
    "comment" : "\n     * Gets the reflections delay.\n     * @return the early reflections delay in milliseconds.\n     * @throws IllegalStateException\n     * @throws IllegalArgumentException\n     * @throws UnsupportedOperationException\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setReverbLevel(short reverbLevel) throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException",
    "returnType" : "void",
    "comment" : "\n     * Sets the volume level of the late reverberation.\n     * <p>This level is combined with the overall room level (set using {@link #setRoomLevel(short)}).\n     * @param reverbLevel reverb level in millibels. The valid range is [-9000, 2000].\n     * @throws IllegalStateException\n     * @throws IllegalArgumentException\n     * @throws UnsupportedOperationException\n     ",
    "links" : [ "#setRoomLevel" ]
  }, {
    "name" : "public short getReverbLevel() throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException",
    "returnType" : "short",
    "comment" : "\n     * Gets the reverb level.\n     * @return the reverb level in millibels.\n     * @throws IllegalStateException\n     * @throws IllegalArgumentException\n     * @throws UnsupportedOperationException\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setReverbDelay(int reverbDelay) throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException",
    "returnType" : "void",
    "comment" : "\n     * Sets the time between the first reflection and the reverberation.\n     * @param reverbDelay reverb delay in milliseconds. The valid range is [0, 100].\n     * @throws IllegalStateException\n     * @throws IllegalArgumentException\n     * @throws UnsupportedOperationException\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getReverbDelay() throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException",
    "returnType" : "int",
    "comment" : "\n     * Gets the reverb delay.\n     * @return the reverb delay in milliseconds.\n     * @throws IllegalStateException\n     * @throws IllegalArgumentException\n     * @throws UnsupportedOperationException\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDiffusion(short diffusion) throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException",
    "returnType" : "void",
    "comment" : "\n     * Sets the echo density in the late reverberation decay.\n     * <p>The scale should approximately map linearly to the perceived change in reverberation.\n     * @param diffusion diffusion specified using a permille scale. The diffusion valid range is\n     * [0, 1000]. A value of 1000 o/oo indicates a smooth reverberation decay.\n     * Values below this level give a more <i>grainy</i> character.\n     * @throws IllegalStateException\n     * @throws IllegalArgumentException\n     * @throws UnsupportedOperationException\n     ",
    "links" : [ ]
  }, {
    "name" : "public short getDiffusion() throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException",
    "returnType" : "short",
    "comment" : "\n     * Gets diffusion level.\n     * @return the diffusion level. See {@link #setDiffusion(short)} for units.\n     * @throws IllegalStateException\n     * @throws IllegalArgumentException\n     * @throws UnsupportedOperationException\n     ",
    "links" : [ "#setDiffusion" ]
  }, {
    "name" : "public void setDensity(short density) throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException",
    "returnType" : "void",
    "comment" : "\n     * Controls the modal density of the late reverberation decay.\n     * <p> The scale should approximately map linearly to the perceived change in reverberation.\n     * A lower density creates a hollow sound that is useful for simulating small reverberation\n     * spaces such as bathrooms.\n     * @param density density specified using a permille scale. The valid range is [0, 1000].\n     * A value of 1000 o/oo indicates a natural sounding reverberation. Values below this level\n     * produce a more colored effect.\n     * @throws IllegalStateException\n     * @throws IllegalArgumentException\n     * @throws UnsupportedOperationException\n     ",
    "links" : [ ]
  }, {
    "name" : "public short getDensity() throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException",
    "returnType" : "short",
    "comment" : "\n     * Gets the density level.\n     * @return the density level. See {@link #setDiffusion(short)} for units.\n     * @throws IllegalStateException\n     * @throws IllegalArgumentException\n     * @throws UnsupportedOperationException\n     ",
    "links" : [ "#setDiffusion" ]
  }, {
    "name" : "public void setParameterListener(OnParameterChangeListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Registers an OnParameterChangeListener interface.\n     * @param listener OnParameterChangeListener interface registered\n     ",
    "links" : [ ]
  }, {
    "name" : "public EnvironmentalReverb.Settings getProperties() throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException",
    "returnType" : "EnvironmentalReverb.Settings",
    "comment" : "\n     * Gets the environmental reverb properties. This method is useful when a snapshot of current\n     * reverb settings must be saved by the application.\n     * @return an EnvironmentalReverb.Settings object containing all current parameters values\n     * @throws IllegalStateException\n     * @throws IllegalArgumentException\n     * @throws UnsupportedOperationException\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setProperties(EnvironmentalReverb.Settings settings) throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException",
    "returnType" : "void",
    "comment" : "\n     * Sets the environmental reverb properties. This method is useful when reverb settings have to\n     * be applied from a previous backup.\n     * @param settings a EnvironmentalReverb.Settings object containing the properties to apply\n     * @throws IllegalStateException\n     * @throws IllegalArgumentException\n     * @throws UnsupportedOperationException\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "PARAM_ROOM_LEVEL", "PARAM_ROOM_HF_LEVEL", "PARAM_DECAY_TIME", "PARAM_DECAY_HF_RATIO", "PARAM_REFLECTIONS_LEVEL", "PARAM_REFLECTIONS_DELAY", "PARAM_REVERB_LEVEL", "PARAM_REVERB_DELAY", "PARAM_DIFFUSION", "PARAM_DENSITY", "PARAM_PROPERTIES", "mParamListener", "mBaseParamListener", "mParamListenerLock", "PROPERTY_SIZE" ],
  "methodNames" : [ "public void setRoomLevel(short room) throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException", "public short getRoomLevel() throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException", "public void setRoomHFLevel(short roomHF) throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException", "public short getRoomHFLevel() throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException", "public void setDecayTime(int decayTime) throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException", "public int getDecayTime() throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException", "public void setDecayHFRatio(short decayHFRatio) throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException", "public short getDecayHFRatio() throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException", "public void setReflectionsLevel(short reflectionsLevel) throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException", "public short getReflectionsLevel() throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException", "public void setReflectionsDelay(int reflectionsDelay) throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException", "public int getReflectionsDelay() throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException", "public void setReverbLevel(short reverbLevel) throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException", "public short getReverbLevel() throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException", "public void setReverbDelay(int reverbDelay) throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException", "public int getReverbDelay() throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException", "public void setDiffusion(short diffusion) throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException", "public short getDiffusion() throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException", "public void setDensity(short density) throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException", "public short getDensity() throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException", "public void setParameterListener(OnParameterChangeListener listener)", "public EnvironmentalReverb.Settings getProperties() throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException", "public void setProperties(EnvironmentalReverb.Settings settings) throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException" ]
}