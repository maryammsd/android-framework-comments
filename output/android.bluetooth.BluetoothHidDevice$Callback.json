{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/bluetooth/BluetoothHidDevice.java",
  "packageName" : "android.bluetooth",
  "className" : "Callback",
  "comment" : "\n     * The template class that applications use to call callback functions on events from the HID\n     * host. Callback functions are wrapped in this class and registered to the Android system\n     * during app registration.\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void onAppStatusChanged(BluetoothDevice pluggedDevice, boolean registered)",
    "returnType" : "void",
    "comment" : "\n         * Callback called when application registration state changes. Usually it's called due to\n         * either {@link BluetoothHidDevice#registerApp (String, String, String, byte, byte[],\n         * Executor, Callback)} or {@link BluetoothHidDevice#unregisterApp()} , but can be also\n         * unsolicited in case e.g. Bluetooth was turned off in which case application is\n         * unregistered automatically.\n         *\n         * @param pluggedDevice {@link BluetoothDevice} object which represents host that currently\n         *     has Virtual Cable established with device. Only valid when application is registered,\n         *     can be <code>null</code>.\n         * @param registered <code>true</code> if application is registered, <code>false</code>\n         *     otherwise.\n         ",
    "links" : [ "android.bluetooth.BluetoothDevice", "android.bluetooth.BluetoothHidDevice#registerApp", "android.bluetooth.BluetoothHidDevice#unregisterApp()" ]
  }, {
    "name" : "public void onConnectionStateChanged(BluetoothDevice device, int state)",
    "returnType" : "void",
    "comment" : "\n         * Callback called when connection state with remote host was changed. Application can\n         * assume than Virtual Cable is established when called with {@link\n         * BluetoothProfile#STATE_CONNECTED} <code>state</code>.\n         *\n         * @param device {@link BluetoothDevice} object representing host device which connection\n         *     state was changed.\n         * @param state Connection state as defined in {@link BluetoothProfile}.\n         ",
    "links" : [ "android.bluetooth.BluetoothDevice", "android.bluetooth.BluetoothProfile#STATE_CONNECTED", "android.bluetooth.BluetoothProfile" ]
  }, {
    "name" : "public void onGetReport(BluetoothDevice device, byte type, byte id, int bufferSize)",
    "returnType" : "void",
    "comment" : "\n         * Callback called when GET_REPORT is received from remote host. Should be replied by\n         * application using {@link BluetoothHidDevice#replyReport(BluetoothDevice, byte, byte,\n         * byte[])}.\n         *\n         * @param type Requested Report Type.\n         * @param id Requested Report Id, can be 0 if no Report Id are defined in descriptor.\n         * @param bufferSize Requested buffer size, application shall respond with at least given\n         *     number of bytes.\n         ",
    "links" : [ "android.bluetooth.BluetoothHidDevice#replyReport(BluetoothDevice" ]
  }, {
    "name" : "public void onSetReport(BluetoothDevice device, byte type, byte id, byte[] data)",
    "returnType" : "void",
    "comment" : "\n         * Callback called when SET_REPORT is received from remote host. In case received data are\n         * invalid, application shall respond with {@link\n         * BluetoothHidDevice#reportError(BluetoothDevice, byte)}.\n         *\n         * @param type Report Type.\n         * @param id Report Id.\n         * @param data Report data.\n         ",
    "links" : [ "android.bluetooth.BluetoothHidDevice#reportError(BluetoothDevice" ]
  }, {
    "name" : "public void onSetProtocol(BluetoothDevice device, byte protocol)",
    "returnType" : "void",
    "comment" : "\n         * Callback called when SET_PROTOCOL is received from remote host. Application shall use\n         * this information to send only reports valid for given protocol mode. By default, {@link\n         * BluetoothHidDevice#PROTOCOL_REPORT_MODE} shall be assumed.\n         *\n         * @param protocol Protocol Mode.\n         ",
    "links" : [ "android.bluetooth.BluetoothHidDevice#PROTOCOL_REPORT_MODE" ]
  }, {
    "name" : "public void onInterruptData(BluetoothDevice device, byte reportId, byte[] data)",
    "returnType" : "void",
    "comment" : "\n         * Callback called when report data is received over interrupt channel. Report Type is\n         * assumed to be {@link BluetoothHidDevice#REPORT_TYPE_OUTPUT}.\n         *\n         * @param reportId Report Id.\n         * @param data Report data.\n         ",
    "links" : [ "android.bluetooth.BluetoothHidDevice#REPORT_TYPE_OUTPUT" ]
  }, {
    "name" : "public void onVirtualCableUnplug(BluetoothDevice device)",
    "returnType" : "void",
    "comment" : "\n         * Callback called when Virtual Cable is removed. After this callback is received connection\n         * will be disconnected automatically.\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void onAppStatusChanged(BluetoothDevice pluggedDevice, boolean registered)", "public void onConnectionStateChanged(BluetoothDevice device, int state)", "public void onGetReport(BluetoothDevice device, byte type, byte id, int bufferSize)", "public void onSetReport(BluetoothDevice device, byte type, byte id, byte[] data)", "public void onSetProtocol(BluetoothDevice device, byte protocol)", "public void onInterruptData(BluetoothDevice device, byte reportId, byte[] data)", "public void onVirtualCableUnplug(BluetoothDevice device)" ],
  "variableNames" : [ "TAG" ]
}