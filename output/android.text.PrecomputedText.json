{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/text/PrecomputedText.java",
  "packageName" : "android.text",
  "className" : "PrecomputedText",
  "comment" : "\n * A text which has the character metrics data.\n *\n * A text object that contains the character metrics data and can be used to improve the performance\n * of text layout operations. When a PrecomputedText is created with a given {@link CharSequence},\n * it will measure the text metrics during the creation. This PrecomputedText instance can be set on\n * {@link android.widget.TextView} or {@link StaticLayout}. Since the text layout information will\n * be included in this instance, {@link android.widget.TextView} or {@link StaticLayout} will not\n * have to recalculate this information.\n *\n * Note that the {@link PrecomputedText} created from different parameters of the target {@link\n * android.widget.TextView} will be rejected internally and compute the text layout again with the\n * current {@link android.widget.TextView} parameters.\n *\n * <pre>\n * An example usage is:\n * <code>\n *  static void asyncSetText(TextView textView, final String longString, Executor bgExecutor) {\n *      // construct precompute related parameters using the TextView that we will set the text on.\n *      final PrecomputedText.Params params = textView.getTextMetricsParams();\n *      final Reference textViewRef = new WeakReference<>(textView);\n *      bgExecutor.submit(() -> {\n *          TextView textView = textViewRef.get();\n *          if (textView == null) return;\n *          final PrecomputedText precomputedText = PrecomputedText.create(longString, params);\n *          textView.post(() -> {\n *              TextView textView = textViewRef.get();\n *              if (textView == null) return;\n *              textView.setText(precomputedText);\n *          });\n *      });\n *  }\n * </code>\n * </pre>\n *\n * Note that the {@link PrecomputedText} created from different parameters of the target\n * {@link android.widget.TextView} will be rejected.\n *\n * Note that any {@link android.text.NoCopySpan} attached to the original text won't be passed to\n * PrecomputedText.\n ",
  "variables" : [ {
    "name" : "LINE_FEED",
    "type" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mText",
    "type" : "SpannableString",
    "comment" : " The original text.",
    "links" : [ ]
  }, {
    "name" : "mStart",
    "type" : "int",
    "comment" : " The inclusive start offset of the measuring target.",
    "links" : [ ]
  }, {
    "name" : "mEnd",
    "type" : "int",
    "comment" : " The exclusive end offset of the measuring target.",
    "links" : [ ]
  }, {
    "name" : "mParams",
    "type" : "Params",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mParagraphInfo",
    "type" : "ParagraphInfo[]",
    "comment" : " The list of measured paragraph info.",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static PrecomputedText create(@NonNull CharSequence text, @NonNull Params params)",
    "returnType" : "PrecomputedText",
    "comment" : "\n     * Create a new {@link PrecomputedText} which will pre-compute text measurement and glyph\n     * positioning information.\n     * <p>\n     * This can be expensive, so computing this on a background thread before your text will be\n     * presented can save work on the UI thread.\n     * </p>\n     *\n     * Note that any {@link android.text.NoCopySpan} attached to the text won't be passed to the\n     * created PrecomputedText.\n     *\n     * @param text the text to be measured\n     * @param params parameters that define how text will be precomputed\n     * @return A {@link PrecomputedText}\n     ",
    "links" : [ "android.text.NoCopySpan", "android.text.PrecomputedText" ]
  }, {
    "name" : "private static ParagraphInfo[] createMeasuredParagraphsFromPrecomputedText(@NonNull PrecomputedText pct, @NonNull Params params, boolean computeLayout)",
    "returnType" : "ParagraphInfo[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static ParagraphInfo[] createMeasuredParagraphs(@NonNull CharSequence text, @NonNull Params params, @IntRange(from = 0) int start, @IntRange(from = 0) int end, boolean computeLayout)",
    "returnType" : "ParagraphInfo[]",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getText()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Return the underlying text.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getStart()",
    "returnType" : "int",
    "comment" : "\n     * Returns the inclusive start offset of measured region.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getEnd()",
    "returnType" : "int",
    "comment" : "\n     * Returns the exclusive end offset of measured region.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Params getParams()",
    "returnType" : "Params",
    "comment" : "\n     * Returns the layout parameters used to measure this text.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getParagraphCount()",
    "returnType" : "int",
    "comment" : "\n     * Returns the count of paragraphs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getParagraphStart(@IntRange(from = 0) int paraIndex)",
    "returnType" : "int",
    "comment" : "\n     * Returns the paragraph start offset of the text.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getParagraphEnd(@IntRange(from = 0) int paraIndex)",
    "returnType" : "int",
    "comment" : "\n     * Returns the paragraph end offset of the text.\n     ",
    "links" : [ ]
  }, {
    "name" : "public MeasuredParagraph getMeasuredParagraph(@IntRange(from = 0) int paraIndex)",
    "returnType" : "MeasuredParagraph",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public ParagraphInfo[] getParagraphInfo()",
    "returnType" : "ParagraphInfo[]",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int checkResultUsable(@IntRange(from = 0) int start, @IntRange(from = 0) int end, @NonNull TextDirectionHeuristic textDir, @NonNull TextPaint paint, @Layout.BreakStrategy int strategy, @Layout.HyphenationFrequency int frequency)",
    "returnType" : "int",
    "comment" : "\n     * Returns true if the given TextPaint gives the same result of text layout for this text.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int findParaIndex(@IntRange(from = 0) int pos)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public float getWidth(@IntRange(from = 0) int start, @IntRange(from = 0) int end)",
    "returnType" : "float",
    "comment" : "\n     * Returns text width for the given range.\n     * Both {@code start} and {@code end} offset need to be in the same paragraph, otherwise\n     * IllegalArgumentException will be thrown.\n     *\n     * @param start the inclusive start offset in the text\n     * @param end the exclusive end offset in the text\n     * @return the text width\n     * @throws IllegalArgumentException if start and end offset are in the different paragraph.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void getBounds(@IntRange(from = 0) int start, @IntRange(from = 0) int end, @NonNull Rect bounds)",
    "returnType" : "void",
    "comment" : "\n     * Retrieves the text bounding box for the given range.\n     * Both {@code start} and {@code end} offset need to be in the same paragraph, otherwise\n     * IllegalArgumentException will be thrown.\n     *\n     * @param start the inclusive start offset in the text\n     * @param end the exclusive end offset in the text\n     * @param bounds the output rectangle\n     * @throws IllegalArgumentException if start and end offset are in the different paragraph.\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getCharWidthAt(@IntRange(from = 0) int offset)",
    "returnType" : "float",
    "comment" : "\n     * Returns a width of a character at offset\n     *\n     * @param offset an offset of the text.\n     * @return a width of the character.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getMemoryUsage()",
    "returnType" : "int",
    "comment" : "\n     * Returns the size of native PrecomputedText memory usage.\n     *\n     * Note that this is not guaranteed to be accurate. Must be used only for testing purposes.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSpan(Object what, int start, int end, int flags)",
    "returnType" : "void",
    "comment" : "\n     * @throws IllegalArgumentException if {@link MetricAffectingSpan} is specified.\n     ",
    "links" : [ "android.text.style.MetricAffectingSpan" ]
  }, {
    "name" : "public void removeSpan(Object what)",
    "returnType" : "void",
    "comment" : "\n     * @throws IllegalArgumentException if {@link MetricAffectingSpan} is specified.\n     ",
    "links" : [ "android.text.style.MetricAffectingSpan" ]
  }, {
    "name" : "public T[] getSpans(int start, int end, Class<T> type)",
    "returnType" : "T[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getSpanStart(Object tag)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getSpanEnd(Object tag)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getSpanFlags(Object tag)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int nextSpanTransition(int start, int limit, Class type)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int length()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public char charAt(int index)",
    "returnType" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CharSequence subSequence(int start, int end)",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "LINE_FEED", "mText", "mStart", "mEnd", "mParams", "mParagraphInfo" ],
  "methodNames" : [ "public static PrecomputedText create(@NonNull CharSequence text, @NonNull Params params)", "private static ParagraphInfo[] createMeasuredParagraphsFromPrecomputedText(@NonNull PrecomputedText pct, @NonNull Params params, boolean computeLayout)", "public static ParagraphInfo[] createMeasuredParagraphs(@NonNull CharSequence text, @NonNull Params params, @IntRange(from = 0) int start, @IntRange(from = 0) int end, boolean computeLayout)", "public CharSequence getText()", "public int getStart()", "public int getEnd()", "public Params getParams()", "public int getParagraphCount()", "public int getParagraphStart(@IntRange(from = 0) int paraIndex)", "public int getParagraphEnd(@IntRange(from = 0) int paraIndex)", "public MeasuredParagraph getMeasuredParagraph(@IntRange(from = 0) int paraIndex)", "public ParagraphInfo[] getParagraphInfo()", "public int checkResultUsable(@IntRange(from = 0) int start, @IntRange(from = 0) int end, @NonNull TextDirectionHeuristic textDir, @NonNull TextPaint paint, @Layout.BreakStrategy int strategy, @Layout.HyphenationFrequency int frequency)", "public int findParaIndex(@IntRange(from = 0) int pos)", "public float getWidth(@IntRange(from = 0) int start, @IntRange(from = 0) int end)", "public void getBounds(@IntRange(from = 0) int start, @IntRange(from = 0) int end, @NonNull Rect bounds)", "public float getCharWidthAt(@IntRange(from = 0) int offset)", "public int getMemoryUsage()", "public void setSpan(Object what, int start, int end, int flags)", "public void removeSpan(Object what)", "public T[] getSpans(int start, int end, Class<T> type)", "public int getSpanStart(Object tag)", "public int getSpanEnd(Object tag)", "public int getSpanFlags(Object tag)", "public int nextSpanTransition(int start, int limit, Class type)", "public int length()", "public char charAt(int index)", "public CharSequence subSequence(int start, int end)", "public String toString()" ]
}