{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/sql/ResultSet.java",
  "packageName" : "java.sql",
  "className" : "ResultSet",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "FETCH_FORWARD",
    "type" : "int",
    "comment" : "\n     * The constant indicating that the rows in a result set will be\n     * processed in a forward direction; first-to-last.\n     * This constant is used by the method <code>setFetchDirection</code>\n     * as a hint to the driver, which the driver may ignore.\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : "FETCH_REVERSE",
    "type" : "int",
    "comment" : "\n     * The constant indicating that the rows in a result set will be\n     * processed in a reverse direction; last-to-first.\n     * This constant is used by the method <code>setFetchDirection</code>\n     * as a hint to the driver, which the driver may ignore.\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : "FETCH_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * The constant indicating that the order in which rows in a\n     * result set will be processed is unknown.\n     * This constant is used by the method <code>setFetchDirection</code>\n     * as a hint to the driver, which the driver may ignore.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_FORWARD_ONLY",
    "type" : "int",
    "comment" : "\n     * The constant indicating the type for a <code>ResultSet</code> object\n     * whose cursor may move only forward.\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_SCROLL_INSENSITIVE",
    "type" : "int",
    "comment" : "\n     * The constant indicating the type for a <code>ResultSet</code> object\n     * that is scrollable but generally not sensitive to changes to the data\n     * that underlies the <code>ResultSet</code>.\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_SCROLL_SENSITIVE",
    "type" : "int",
    "comment" : "\n     * The constant indicating the type for a <code>ResultSet</code> object\n     * that is scrollable and generally sensitive to changes to the data\n     * that underlies the <code>ResultSet</code>.\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : "CONCUR_READ_ONLY",
    "type" : "int",
    "comment" : "\n     * The constant indicating the concurrency mode for a\n     * <code>ResultSet</code> object that may NOT be updated.\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : "CONCUR_UPDATABLE",
    "type" : "int",
    "comment" : "\n     * The constant indicating the concurrency mode for a\n     * <code>ResultSet</code> object that may be updated.\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : "HOLD_CURSORS_OVER_COMMIT",
    "type" : "int",
    "comment" : "\n     * The constant indicating that open <code>ResultSet</code> objects with this\n     * holdability will remain open when the current transaction is commited.\n     *\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "CLOSE_CURSORS_AT_COMMIT",
    "type" : "int",
    "comment" : "\n     * The constant indicating that open <code>ResultSet</code> objects with this\n     * holdability will be closed when the current transaction is commited.\n     *\n     * @since 1.4\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " boolean next() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Moves the cursor froward one row from its current position.\n     * A <code>ResultSet</code> cursor is initially positioned\n     * before the first row; the first call to the method\n     * <code>next</code> makes the first row the current row; the\n     * second call makes the second row the current row, and so on.\n     * <p>\n     * When a call to the <code>next</code> method returns <code>false</code>,\n     * the cursor is positioned after the last row. Any\n     * invocation of a <code>ResultSet</code> method which requires a\n     * current row will result in a <code>SQLException</code> being thrown.\n     *  If the result set type is <code>TYPE_FORWARD_ONLY</code>, it is vendor specified\n     * whether their JDBC driver implementation will return <code>false</code> or\n     *  throw an <code>SQLException</code> on a\n     * subsequent call to <code>next</code>.\n     *\n     * <P>If an input stream is open for the current row, a call\n     * to the method <code>next</code> will\n     * implicitly close it. A <code>ResultSet</code> object's\n     * warning chain is cleared when a new row is read.\n     *\n     * @return <code>true</code> if the new current row is valid;\n     * <code>false</code> if there are no more rows\n     * @exception SQLException if a database access error occurs or this method is\n     *            called on a closed result set\n     ",
    "links" : [ ]
  }, {
    "name" : " void close() throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Releases this <code>ResultSet</code> object's database and\n     * JDBC resources immediately instead of waiting for\n     * this to happen when it is automatically closed.\n     *\n     * <P>The closing of a <code>ResultSet</code> object does <strong>not</strong> close the <code>Blob</code>,\n     * <code>Clob</code> or <code>NClob</code> objects created by the <code>ResultSet</code>. <code>Blob</code>,\n     * <code>Clob</code> or <code>NClob</code> objects remain valid for at least the duration of the\n     * transaction in which they are creataed, unless their <code>free</code> method is invoked.\n     *<p>\n     * When a <code>ResultSet</code> is closed, any <code>ResultSetMetaData</code>\n     * instances that were created by calling the  <code>getMetaData</code>\n     * method remain accessible.\n     *\n     * <P><B>Note:</B> A <code>ResultSet</code> object\n     * is automatically closed by the\n     * <code>Statement</code> object that generated it when\n     * that <code>Statement</code> object is closed,\n     * re-executed, or is used to retrieve the next result from a\n     * sequence of multiple results.\n     *<p>\n     * Calling the method <code>close</code> on a <code>ResultSet</code>\n     * object that is already closed is a no-op.\n     * <P>\n     * <p>\n     *\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean wasNull() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Reports whether\n     * the last column read had a value of SQL <code>NULL</code>.\n     * Note that you must first call one of the getter methods\n     * on a column to try to read its value and then call\n     * the method <code>wasNull</code> to see if the value read was\n     * SQL <code>NULL</code>.\n     *\n     * @return <code>true</code> if the last column value read was SQL\n     *         <code>NULL</code> and <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs or this method is\n     *            called on a closed result set\n     ",
    "links" : [ ]
  }, {
    "name" : " String getString(int columnIndex) throws SQLException",
    "returnType" : "String",
    "comment" : "\n     * Retrieves the value of the designated column in the current row\n     * of this <code>ResultSet</code> object as\n     * a <code>String</code> in the Java programming language.\n     *\n     * @param columnIndex the first column is 1, the second is 2, ...\n     * @return the column value; if the value is SQL <code>NULL</code>, the\n     * value returned is <code>null</code>\n     * @exception SQLException if the columnIndex is not valid;\n     * if a database access error occurs or this method is\n     *            called on a closed result set\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean getBoolean(int columnIndex) throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves the value of the designated column in the current row\n     * of this <code>ResultSet</code> object as\n     * a <code>boolean</code> in the Java programming language.\n     *\n     * <P>If the designated column has a datatype of CHAR or VARCHAR\n     * and contains a \"0\" or has a datatype of BIT, TINYINT, SMALLINT, INTEGER or BIGINT\n     * and contains  a 0, a value of <code>false</code> is returned.  If the designated column has a datatype\n     * of CHAR or VARCHAR\n     * and contains a \"1\" or has a datatype of BIT, TINYINT, SMALLINT, INTEGER or BIGINT\n     * and contains  a 1, a value of <code>true</code> is returned.\n     *\n     * @param columnIndex the first column is 1, the second is 2, ...\n     * @return the column value; if the value is SQL <code>NULL</code>, the\n     * value returned is <code>false</code>\n     * @exception SQLException if the columnIndex is not valid;\n     * if a database access error occurs or this method is\n     *            called on a closed result set\n     ",
    "links" : [ ]
  }, {
    "name" : " byte getByte(int columnIndex) throws SQLException",
    "returnType" : "byte",
    "comment" : "\n     * Retrieves the value of the designated column in the current row\n     * of this <code>ResultSet</code> object as\n     * a <code>byte</code> in the Java programming language.\n     *\n     * @param columnIndex the first column is 1, the second is 2, ...\n     * @return the column value; if the value is SQL <code>NULL</code>, the\n     * value returned is <code>0</code>\n     * @exception SQLException if the columnIndex is not valid;\n     * if a database access error occurs or this method is\n     *            called on a closed result set\n     ",
    "links" : [ ]
  }, {
    "name" : " short getShort(int columnIndex) throws SQLException",
    "returnType" : "short",
    "comment" : "\n     * Retrieves the value of the designated column in the current row\n     * of this <code>ResultSet</code> object as\n     * a <code>short</code> in the Java programming language.\n     *\n     * @param columnIndex the first column is 1, the second is 2, ...\n     * @return the column value; if the value is SQL <code>NULL</code>, the\n     * value returned is <code>0</code>\n     * @exception SQLException if the columnIndex is not valid;\n     * if a database access error occurs or this method is\n     *            called on a closed result set\n     ",
    "links" : [ ]
  }, {
    "name" : " int getInt(int columnIndex) throws SQLException",
    "returnType" : "int",
    "comment" : "\n     * Retrieves the value of the designated column in the current row\n     * of this <code>ResultSet</code> object as\n     * an <code>int</code> in the Java programming language.\n     *\n     * @param columnIndex the first column is 1, the second is 2, ...\n     * @return the column value; if the value is SQL <code>NULL</code>, the\n     * value returned is <code>0</code>\n     * @exception SQLException if the columnIndex is not valid;\n     * if a database access error occurs or this method is\n     *            called on a closed result set\n     ",
    "links" : [ ]
  }, {
    "name" : " long getLong(int columnIndex) throws SQLException",
    "returnType" : "long",
    "comment" : "\n     * Retrieves the value of the designated column in the current row\n     * of this <code>ResultSet</code> object as\n     * a <code>long</code> in the Java programming language.\n     *\n     * @param columnIndex the first column is 1, the second is 2, ...\n     * @return the column value; if the value is SQL <code>NULL</code>, the\n     * value returned is <code>0</code>\n     * @exception SQLException if the columnIndex is not valid;\n     * if a database access error occurs or this method is\n     *            called on a closed result set\n     ",
    "links" : [ ]
  }, {
    "name" : " float getFloat(int columnIndex) throws SQLException",
    "returnType" : "float",
    "comment" : "\n     * Retrieves the value of the designated column in the current row\n     * of this <code>ResultSet</code> object as\n     * a <code>float</code> in the Java programming language.\n     *\n     * @param columnIndex the first column is 1, the second is 2, ...\n     * @return the column value; if the value is SQL <code>NULL</code>, the\n     * value returned is <code>0</code>\n     * @exception SQLException if the columnIndex is not valid;\n     * if a database access error occurs or this method is\n     *            called on a closed result set\n     ",
    "links" : [ ]
  }, {
    "name" : " double getDouble(int columnIndex) throws SQLException",
    "returnType" : "double",
    "comment" : "\n     * Retrieves the value of the designated column in the current row\n     * of this <code>ResultSet</code> object as\n     * a <code>double</code> in the Java programming language.\n     *\n     * @param columnIndex the first column is 1, the second is 2, ...\n     * @return the column value; if the value is SQL <code>NULL</code>, the\n     * value returned is <code>0</code>\n     * @exception SQLException if the columnIndex is not valid;\n     * if a database access error occurs or this method is\n     *            called on a closed result set\n     ",
    "links" : [ ]
  }, {
    "name" : " BigDecimal getBigDecimal(int columnIndex, int scale) throws SQLException",
    "returnType" : "BigDecimal",
    "comment" : " Android-added: @Deprecated annotation from OpenJDK8u121-b13 to fix build warnings.",
    "links" : [ ]
  }, {
    "name" : " byte[] getBytes(int columnIndex) throws SQLException",
    "returnType" : "byte[]",
    "comment" : "\n     * Retrieves the value of the designated column in the current row\n     * of this <code>ResultSet</code> object as\n     * a <code>byte</code> array in the Java programming language.\n     * The bytes represent the raw values returned by the driver.\n     *\n     * @param columnIndex the first column is 1, the second is 2, ...\n     * @return the column value; if the value is SQL <code>NULL</code>, the\n     * value returned is <code>null</code>\n     * @exception SQLException if the columnIndex is not valid;\n     * if a database access error occurs or this method is\n     *            called on a closed result set\n     ",
    "links" : [ ]
  }, {
    "name" : " java.sql.Date getDate(int columnIndex) throws SQLException",
    "returnType" : "java.sql.Date",
    "comment" : "\n     * Retrieves the value of the designated column in the current row\n     * of this <code>ResultSet</code> object as\n     * a <code>java.sql.Date</code> object in the Java programming language.\n     *\n     * @param columnIndex the first column is 1, the second is 2, ...\n     * @return the column value; if the value is SQL <code>NULL</code>, the\n     * value returned is <code>null</code>\n     * @exception SQLException if the columnIndex is not valid;\n     * if a database access error occurs or this method is\n     *            called on a closed result set\n     ",
    "links" : [ ]
  }, {
    "name" : " java.sql.Time getTime(int columnIndex) throws SQLException",
    "returnType" : "java.sql.Time",
    "comment" : "\n     * Retrieves the value of the designated column in the current row\n     * of this <code>ResultSet</code> object as\n     * a <code>java.sql.Time</code> object in the Java programming language.\n     *\n     * @param columnIndex the first column is 1, the second is 2, ...\n     * @return the column value; if the value is SQL <code>NULL</code>, the\n     * value returned is <code>null</code>\n     * @exception SQLException if the columnIndex is not valid;\n     * if a database access error occurs or this method is\n     *            called on a closed result set\n     ",
    "links" : [ ]
  }, {
    "name" : " java.sql.Timestamp getTimestamp(int columnIndex) throws SQLException",
    "returnType" : "java.sql.Timestamp",
    "comment" : "\n     * Retrieves the value of the designated column in the current row\n     * of this <code>ResultSet</code> object as\n     * a <code>java.sql.Timestamp</code> object in the Java programming language.\n     *\n     * @param columnIndex the first column is 1, the second is 2, ...\n     * @return the column value; if the value is SQL <code>NULL</code>, the\n     * value returned is <code>null</code>\n     * @exception SQLException if the columnIndex is not valid;\n     * if a database access error occurs or this method is\n     *            called on a closed result set\n     ",
    "links" : [ ]
  }, {
    "name" : " java.io.InputStream getAsciiStream(int columnIndex) throws SQLException",
    "returnType" : "java.io.InputStream",
    "comment" : "\n     * Retrieves the value of the designated column in the current row\n     * of this <code>ResultSet</code> object as\n     * a stream of ASCII characters. The value can then be read in chunks from the\n     * stream. This method is particularly\n     * suitable for retrieving large <code>LONGVARCHAR</code> values.\n     * The JDBC driver will\n     * do any necessary conversion from the database format into ASCII.\n     *\n     * <P><B>Note:</B> All the data in the returned stream must be\n     * read prior to getting the value of any other column. The next\n     * call to a getter method implicitly closes the stream.  Also, a\n     * stream may return <code>0</code> when the method\n     * <code>InputStream.available</code>\n     * is called whether there is data available or not.\n     *\n     * @param columnIndex the first column is 1, the second is 2, ...\n     * @return a Java input stream that delivers the database column value\n     * as a stream of one-byte ASCII characters;\n     * if the value is SQL <code>NULL</code>, the\n     * value returned is <code>null</code>\n     * @exception SQLException if the columnIndex is not valid;\n     * if a database access error occurs or this method is\n     *            called on a closed result set\n     ",
    "links" : [ ]
  }, {
    "name" : " java.io.InputStream getUnicodeStream(int columnIndex) throws SQLException",
    "returnType" : "java.io.InputStream",
    "comment" : " Android-added: @Deprecated annotation from OpenJDK8u121-b13 to fix build warnings.",
    "links" : [ ]
  }, {
    "name" : " java.io.InputStream getBinaryStream(int columnIndex) throws SQLException",
    "returnType" : "java.io.InputStream",
    "comment" : "\n     * Retrieves the value of the designated column in the current row\n     * of this <code>ResultSet</code> object as a  stream of\n     * uninterpreted bytes. The value can then be read in chunks from the\n     * stream. This method is particularly\n     * suitable for retrieving large <code>LONGVARBINARY</code> values.\n     *\n     * <P><B>Note:</B> All the data in the returned stream must be\n     * read prior to getting the value of any other column. The next\n     * call to a getter method implicitly closes the stream.  Also, a\n     * stream may return <code>0</code> when the method\n     * <code>InputStream.available</code>\n     * is called whether there is data available or not.\n     *\n     * @param columnIndex the first column is 1, the second is 2, ...\n     * @return a Java input stream that delivers the database column value\n     *         as a stream of uninterpreted bytes;\n     *         if the value is SQL <code>NULL</code>, the value returned is\n     *         <code>null</code>\n     * @exception SQLException if the columnIndex is not valid;\n     * if a database access error occurs or this method is\n     *            called on a closed result set\n     ",
    "links" : [ ]
  }, {
    "name" : " String getString(String columnLabel) throws SQLException",
    "returnType" : "String",
    "comment" : "\n     * Retrieves the value of the designated column in the current row\n     * of this <code>ResultSet</code> object as\n     * a <code>String</code> in the Java programming language.\n     *\n     * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n     * @return the column value; if the value is SQL <code>NULL</code>, the\n     * value returned is <code>null</code>\n     * @exception SQLException if the columnLabel is not valid;\n     * if a database access error occurs or this method is\n     *            called on a closed result set\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean getBoolean(String columnLabel) throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves the value of the designated column in the current row\n     * of this <code>ResultSet</code> object as\n     * a <code>boolean</code> in the Java programming language.\n     *\n     * <P>If the designated column has a datatype of CHAR or VARCHAR\n     * and contains a \"0\" or has a datatype of BIT, TINYINT, SMALLINT, INTEGER or BIGINT\n     * and contains  a 0, a value of <code>false</code> is returned.  If the designated column has a datatype\n     * of CHAR or VARCHAR\n     * and contains a \"1\" or has a datatype of BIT, TINYINT, SMALLINT, INTEGER or BIGINT\n     * and contains  a 1, a value of <code>true</code> is returned.\n     *\n     * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n     * @return the column value; if the value is SQL <code>NULL</code>, the\n     * value returned is <code>false</code>\n     * @exception SQLException if the columnLabel is not valid;\n     * if a database access error occurs or this method is\n     *            called on a closed result set\n     ",
    "links" : [ ]
  }, {
    "name" : " byte getByte(String columnLabel) throws SQLException",
    "returnType" : "byte",
    "comment" : "\n     * Retrieves the value of the designated column in the current row\n     * of this <code>ResultSet</code> object as\n     * a <code>byte</code> in the Java programming language.\n     *\n     * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n     * @return the column value; if the value is SQL <code>NULL</code>, the\n     * value returned is <code>0</code>\n     * @exception SQLException if the columnLabel is not valid;\n     * if a database access error occurs or this method is\n     *            called on a closed result set\n     ",
    "links" : [ ]
  }, {
    "name" : " short getShort(String columnLabel) throws SQLException",
    "returnType" : "short",
    "comment" : "\n     * Retrieves the value of the designated column in the current row\n     * of this <code>ResultSet</code> object as\n     * a <code>short</code> in the Java programming language.\n     *\n     * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n     * @return the column value; if the value is SQL <code>NULL</code>, the\n     * value returned is <code>0</code>\n     * @exception SQLException if the columnLabel is not valid;\n     * if a database access error occurs or this method is\n     *            called on a closed result set\n     ",
    "links" : [ ]
  }, {
    "name" : " int getInt(String columnLabel) throws SQLException",
    "returnType" : "int",
    "comment" : "\n     * Retrieves the value of the designated column in the current row\n     * of this <code>ResultSet</code> object as\n     * an <code>int</code> in the Java programming language.\n     *\n     * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n     * @return the column value; if the value is SQL <code>NULL</code>, the\n     * value returned is <code>0</code>\n     * @exception SQLException if the columnLabel is not valid;\n     * if a database access error occurs or this method is\n     *            called on a closed result set\n     ",
    "links" : [ ]
  }, {
    "name" : " long getLong(String columnLabel) throws SQLException",
    "returnType" : "long",
    "comment" : "\n     * Retrieves the value of the designated column in the current row\n     * of this <code>ResultSet</code> object as\n     * a <code>long</code> in the Java programming language.\n     *\n     * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n     * @return the column value; if the value is SQL <code>NULL</code>, the\n     * value returned is <code>0</code>\n     * @exception SQLException if the columnLabel is not valid;\n     * if a database access error occurs or this method is\n     *            called on a closed result set\n     ",
    "links" : [ ]
  }, {
    "name" : " float getFloat(String columnLabel) throws SQLException",
    "returnType" : "float",
    "comment" : "\n     * Retrieves the value of the designated column in the current row\n     * of this <code>ResultSet</code> object as\n     * a <code>float</code> in the Java programming language.\n     *\n     * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n     * @return the column value; if the value is SQL <code>NULL</code>, the\n     * value returned is <code>0</code>\n     * @exception SQLException if the columnLabel is not valid;\n     * if a database access error occurs or this method is\n     *            called on a closed result set\n     ",
    "links" : [ ]
  }, {
    "name" : " double getDouble(String columnLabel) throws SQLException",
    "returnType" : "double",
    "comment" : "\n     * Retrieves the value of the designated column in the current row\n     * of this <code>ResultSet</code> object as\n     * a <code>double</code> in the Java programming language.\n     *\n     * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n     * @return the column value; if the value is SQL <code>NULL</code>, the\n     * value returned is <code>0</code>\n     * @exception SQLException if the columnLabel is not valid;\n     * if a database access error occurs or this method is\n     *            called on a closed result set\n     ",
    "links" : [ ]
  }, {
    "name" : " BigDecimal getBigDecimal(String columnLabel, int scale) throws SQLException",
    "returnType" : "BigDecimal",
    "comment" : " Android-added: @Deprecated annotation from OpenJDK8u121-b13 to fix build warnings.",
    "links" : [ ]
  }, {
    "name" : " byte[] getBytes(String columnLabel) throws SQLException",
    "returnType" : "byte[]",
    "comment" : "\n     * Retrieves the value of the designated column in the current row\n     * of this <code>ResultSet</code> object as\n     * a <code>byte</code> array in the Java programming language.\n     * The bytes represent the raw values returned by the driver.\n     *\n     * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n     * @return the column value; if the value is SQL <code>NULL</code>, the\n     * value returned is <code>null</code>\n     * @exception SQLException if the columnLabel is not valid;\n     * if a database access error occurs or this method is\n     *            called on a closed result set\n     ",
    "links" : [ ]
  }, {
    "name" : " java.sql.Date getDate(String columnLabel) throws SQLException",
    "returnType" : "java.sql.Date",
    "comment" : "\n     * Retrieves the value of the designated column in the current row\n     * of this <code>ResultSet</code> object as\n     * a <code>java.sql.Date</code> object in the Java programming language.\n     *\n     * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n     * @return the column value; if the value is SQL <code>NULL</code>, the\n     * value returned is <code>null</code>\n     * @exception SQLException if the columnLabel is not valid;\n     * if a database access error occurs or this method is\n     *            called on a closed result set\n     ",
    "links" : [ ]
  }, {
    "name" : " java.sql.Time getTime(String columnLabel) throws SQLException",
    "returnType" : "java.sql.Time",
    "comment" : "\n     * Retrieves the value of the designated column in the current row\n     * of this <code>ResultSet</code> object as\n     * a <code>java.sql.Time</code> object in the Java programming language.\n     *\n     * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n     * @return the column value;\n     * if the value is SQL <code>NULL</code>,\n     * the value returned is <code>null</code>\n     * @exception SQLException if the columnLabel is not valid;\n     * if a database access error occurs or this method is\n     *            called on a closed result set\n     ",
    "links" : [ ]
  }, {
    "name" : " java.sql.Timestamp getTimestamp(String columnLabel) throws SQLException",
    "returnType" : "java.sql.Timestamp",
    "comment" : "\n     * Retrieves the value of the designated column in the current row\n     * of this <code>ResultSet</code> object as\n     * a <code>java.sql.Timestamp</code> object in the Java programming language.\n     *\n     * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n     * @return the column value; if the value is SQL <code>NULL</code>, the\n     * value returned is <code>null</code>\n     * @exception SQLException if the columnLabel is not valid;\n     * if a database access error occurs or this method is\n     *            called on a closed result set\n     ",
    "links" : [ ]
  }, {
    "name" : " java.io.InputStream getAsciiStream(String columnLabel) throws SQLException",
    "returnType" : "java.io.InputStream",
    "comment" : "\n     * Retrieves the value of the designated column in the current row\n     * of this <code>ResultSet</code> object as a stream of\n     * ASCII characters. The value can then be read in chunks from the\n     * stream. This method is particularly\n     * suitable for retrieving large <code>LONGVARCHAR</code> values.\n     * The JDBC driver will\n     * do any necessary conversion from the database format into ASCII.\n     *\n     * <P><B>Note:</B> All the data in the returned stream must be\n     * read prior to getting the value of any other column. The next\n     * call to a getter method implicitly closes the stream. Also, a\n     * stream may return <code>0</code> when the method <code>available</code>\n     * is called whether there is data available or not.\n     *\n     * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n     * @return a Java input stream that delivers the database column value\n     * as a stream of one-byte ASCII characters.\n     * If the value is SQL <code>NULL</code>,\n     * the value returned is <code>null</code>.\n     * @exception SQLException if the columnLabel is not valid;\n     * if a database access error occurs or this method is\n     *            called on a closed result set\n     ",
    "links" : [ ]
  }, {
    "name" : " java.io.InputStream getUnicodeStream(String columnLabel) throws SQLException",
    "returnType" : "java.io.InputStream",
    "comment" : " Android-added: @Deprecated annotation from OpenJDK8u121-b13 to fix build warnings.",
    "links" : [ ]
  }, {
    "name" : " java.io.InputStream getBinaryStream(String columnLabel) throws SQLException",
    "returnType" : "java.io.InputStream",
    "comment" : "\n     * Retrieves the value of the designated column in the current row\n     * of this <code>ResultSet</code> object as a stream of uninterpreted\n     * <code>byte</code>s.\n     * The value can then be read in chunks from the\n     * stream. This method is particularly\n     * suitable for retrieving large <code>LONGVARBINARY</code>\n     * values.\n     *\n     * <P><B>Note:</B> All the data in the returned stream must be\n     * read prior to getting the value of any other column. The next\n     * call to a getter method implicitly closes the stream. Also, a\n     * stream may return <code>0</code> when the method <code>available</code>\n     * is called whether there is data available or not.\n     *\n     * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n     * @return a Java input stream that delivers the database column value\n     * as a stream of uninterpreted bytes;\n     * if the value is SQL <code>NULL</code>, the result is <code>null</code>\n     * @exception SQLException if the columnLabel is not valid;\n     * if a database access error occurs or this method is\n     *            called on a closed result set\n     ",
    "links" : [ ]
  }, {
    "name" : " SQLWarning getWarnings() throws SQLException",
    "returnType" : "SQLWarning",
    "comment" : "\n     * Retrieves the first warning reported by calls on this\n     * <code>ResultSet</code> object.\n     * Subsequent warnings on this <code>ResultSet</code> object\n     * will be chained to the <code>SQLWarning</code> object that\n     * this method returns.\n     *\n     * <P>The warning chain is automatically cleared each time a new\n     * row is read.  This method may not be called on a <code>ResultSet</code>\n     * object that has been closed; doing so will cause an\n     * <code>SQLException</code> to be thrown.\n     * <P>\n     * <B>Note:</B> This warning chain only covers warnings caused\n     * by <code>ResultSet</code> methods.  Any warning caused by\n     * <code>Statement</code> methods\n     * (such as reading OUT parameters) will be chained on the\n     * <code>Statement</code> object.\n     *\n     * @return the first <code>SQLWarning</code> object reported or\n     *         <code>null</code> if there are none\n     * @exception SQLException if a database access error occurs or this method is\n     *            called on a closed result set\n     ",
    "links" : [ ]
  }, {
    "name" : " void clearWarnings() throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Clears all warnings reported on this <code>ResultSet</code> object.\n     * After this method is called, the method <code>getWarnings</code>\n     * returns <code>null</code> until a new warning is\n     * reported for this <code>ResultSet</code> object.\n     *\n     * @exception SQLException if a database access error occurs or this method is\n     *            called on a closed result set\n     ",
    "links" : [ ]
  }, {
    "name" : " String getCursorName() throws SQLException",
    "returnType" : "String",
    "comment" : "\n     * Retrieves the name of the SQL cursor used by this <code>ResultSet</code>\n     * object.\n     *\n     * <P>In SQL, a result table is retrieved through a cursor that is\n     * named. The current row of a result set can be updated or deleted\n     * using a positioned update/delete statement that references the\n     * cursor name. To insure that the cursor has the proper isolation\n     * level to support update, the cursor's <code>SELECT</code> statement\n     * should be of the form <code>SELECT FOR UPDATE</code>. If\n     * <code>FOR UPDATE</code> is omitted, the positioned updates may fail.\n     *\n     * <P>The JDBC API supports this SQL feature by providing the name of the\n     * SQL cursor used by a <code>ResultSet</code> object.\n     * The current row of a <code>ResultSet</code> object\n     * is also the current row of this SQL cursor.\n     *\n     * @return the SQL name for this <code>ResultSet</code> object's cursor\n     * @exception SQLException if a database access error occurs or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     ",
    "links" : [ ]
  }, {
    "name" : " ResultSetMetaData getMetaData() throws SQLException",
    "returnType" : "ResultSetMetaData",
    "comment" : "\n     * Retrieves the  number, types and properties of\n     * this <code>ResultSet</code> object's columns.\n     *\n     * @return the description of this <code>ResultSet</code> object's columns\n     * @exception SQLException if a database access error occurs or this method is\n     *            called on a closed result set\n     ",
    "links" : [ ]
  }, {
    "name" : " Object getObject(int columnIndex) throws SQLException",
    "returnType" : "Object",
    "comment" : "\n     * <p>Gets the value of the designated column in the current row\n     * of this <code>ResultSet</code> object as\n     * an <code>Object</code> in the Java programming language.\n     *\n     * <p>This method will return the value of the given column as a\n     * Java object.  The type of the Java object will be the default\n     * Java object type corresponding to the column's SQL type,\n     * following the mapping for built-in types specified in the JDBC\n     * specification. If the value is an SQL <code>NULL</code>,\n     * the driver returns a Java <code>null</code>.\n     *\n     * <p>This method may also be used to read database-specific\n     * abstract data types.\n     *\n     * In the JDBC 2.0 API, the behavior of method\n     * <code>getObject</code> is extended to materialize\n     * data of SQL user-defined types.\n     * <p>\n     * If <code>Connection.getTypeMap</code> does not throw a\n     * <code>SQLFeatureNotSupportedException</code>,\n     * then when a column contains a structured or distinct value,\n     * the behavior of this method is as\n     * if it were a call to: <code>getObject(columnIndex,\n     * this.getStatement().getConnection().getTypeMap())</code>.\n     *\n     * If <code>Connection.getTypeMap</code> does throw a\n     * <code>SQLFeatureNotSupportedException</code>,\n     * then structured values are not supported, and distinct values\n     * are mapped to the default Java class as determined by the\n     * underlying SQL type of the DISTINCT type.\n     *\n     * @param columnIndex the first column is 1, the second is 2, ...\n     * @return a <code>java.lang.Object</code> holding the column value\n     * @exception SQLException if the columnIndex is not valid;\n     * if a database access error occurs or this method is\n     *            called on a closed result set\n     ",
    "links" : [ ]
  }, {
    "name" : " Object getObject(String columnLabel) throws SQLException",
    "returnType" : "Object",
    "comment" : "\n     * <p>Gets the value of the designated column in the current row\n     * of this <code>ResultSet</code> object as\n     * an <code>Object</code> in the Java programming language.\n     *\n     * <p>This method will return the value of the given column as a\n     * Java object.  The type of the Java object will be the default\n     * Java object type corresponding to the column's SQL type,\n     * following the mapping for built-in types specified in the JDBC\n     * specification. If the value is an SQL <code>NULL</code>,\n     * the driver returns a Java <code>null</code>.\n     * <P>\n     * This method may also be used to read database-specific\n     * abstract data types.\n     * <P>\n     * In the JDBC 2.0 API, the behavior of the method\n     * <code>getObject</code> is extended to materialize\n     * data of SQL user-defined types.  When a column contains\n     * a structured or distinct value, the behavior of this method is as\n     * if it were a call to: <code>getObject(columnIndex,\n     * this.getStatement().getConnection().getTypeMap())</code>.\n     *\n     * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n     * @return a <code>java.lang.Object</code> holding the column value\n     * @exception SQLException if the columnLabel is not valid;\n     * if a database access error occurs or this method is\n     *            called on a closed result set\n     ",
    "links" : [ ]
  }, {
    "name" : " int findColumn(String columnLabel) throws SQLException",
    "returnType" : "int",
    "comment" : "\n     * Maps the given <code>ResultSet</code> column label to its\n     * <code>ResultSet</code> column index.\n     *\n     * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n     * @return the column index of the given column name\n     * @exception SQLException if the <code>ResultSet</code> object\n     * does not contain a column labeled <code>columnLabel</code>, a database access error occurs\n     *  or this method is called on a closed result set\n     ",
    "links" : [ ]
  }, {
    "name" : " java.io.Reader getCharacterStream(int columnIndex) throws SQLException",
    "returnType" : "java.io.Reader",
    "comment" : "\n     * Retrieves the value of the designated column in the current row\n     * of this <code>ResultSet</code> object as a\n     * <code>java.io.Reader</code> object.\n     * @return a <code>java.io.Reader</code> object that contains the column\n     * value; if the value is SQL <code>NULL</code>, the value returned is\n     * <code>null</code> in the Java programming language.\n     * @param columnIndex the first column is 1, the second is 2, ...\n     * @exception SQLException if the columnIndex is not valid;\n     * if a database access error occurs or this method is\n     *            called on a closed result set\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " java.io.Reader getCharacterStream(String columnLabel) throws SQLException",
    "returnType" : "java.io.Reader",
    "comment" : "\n     * Retrieves the value of the designated column in the current row\n     * of this <code>ResultSet</code> object as a\n     * <code>java.io.Reader</code> object.\n     *\n     * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n     * @return a <code>java.io.Reader</code> object that contains the column\n     * value; if the value is SQL <code>NULL</code>, the value returned is\n     * <code>null</code> in the Java programming language\n     * @exception SQLException if the columnLabel is not valid;\n     * if a database access error occurs or this method is\n     *            called on a closed result set\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " BigDecimal getBigDecimal(int columnIndex) throws SQLException",
    "returnType" : "BigDecimal",
    "comment" : "\n     * Retrieves the value of the designated column in the current row\n     * of this <code>ResultSet</code> object as a\n     * <code>java.math.BigDecimal</code> with full precision.\n     *\n     * @param columnIndex the first column is 1, the second is 2, ...\n     * @return the column value (full precision);\n     * if the value is SQL <code>NULL</code>, the value returned is\n     * <code>null</code> in the Java programming language.\n     * @exception SQLException if the columnIndex is not valid;\n     * if a database access error occurs or this method is\n     *            called on a closed result set\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " BigDecimal getBigDecimal(String columnLabel) throws SQLException",
    "returnType" : "BigDecimal",
    "comment" : "\n     * Retrieves the value of the designated column in the current row\n     * of this <code>ResultSet</code> object as a\n     * <code>java.math.BigDecimal</code> with full precision.\n     *\n     * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n     * @return the column value (full precision);\n     * if the value is SQL <code>NULL</code>, the value returned is\n     * <code>null</code> in the Java programming language.\n     * @exception SQLException if the columnLabel is not valid;\n     * if a database access error occurs or this method is\n     *            called on a closed result set\n     * @since 1.2\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean isBeforeFirst() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether the cursor is before the first row in\n     * this <code>ResultSet</code> object.\n     * <p>\n     * <strong>Note:</strong>Support for the <code>isBeforeFirst</code> method\n     * is optional for <code>ResultSet</code>s with a result\n     * set type of <code>TYPE_FORWARD_ONLY</code>\n     *\n     * @return <code>true</code> if the cursor is before the first row;\n     * <code>false</code> if the cursor is at any other position or the\n     * result set contains no rows\n     * @exception SQLException if a database access error occurs or this method is\n     *            called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean isAfterLast() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether the cursor is after the last row in\n     * this <code>ResultSet</code> object.\n     * <p>\n     * <strong>Note:</strong>Support for the <code>isAfterLast</code> method\n     * is optional for <code>ResultSet</code>s with a result\n     * set type of <code>TYPE_FORWARD_ONLY</code>\n     *\n     * @return <code>true</code> if the cursor is after the last row;\n     * <code>false</code> if the cursor is at any other position or the\n     * result set contains no rows\n     * @exception SQLException if a database access error occurs or this method is\n     *            called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean isFirst() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether the cursor is on the first row of\n     * this <code>ResultSet</code> object.\n     * <p>\n     * <strong>Note:</strong>Support for the <code>isFirst</code> method\n     * is optional for <code>ResultSet</code>s with a result\n     * set type of <code>TYPE_FORWARD_ONLY</code>\n     *\n     * @return <code>true</code> if the cursor is on the first row;\n     * <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs or this method is\n     *            called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean isLast() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether the cursor is on the last row of\n     * this <code>ResultSet</code> object.\n     *  <strong>Note:</strong> Calling the method <code>isLast</code> may be expensive\n     * because the JDBC driver\n     * might need to fetch ahead one row in order to determine\n     * whether the current row is the last row in the result set.\n     * <p>\n     * <strong>Note:</strong> Support for the <code>isLast</code> method\n     * is optional for <code>ResultSet</code>s with a result\n     * set type of <code>TYPE_FORWARD_ONLY</code>\n     * @return <code>true</code> if the cursor is on the last row;\n     * <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs or this method is\n     *            called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " void beforeFirst() throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Moves the cursor to the front of\n     * this <code>ResultSet</code> object, just before the\n     * first row. This method has no effect if the result set contains no rows.\n     *\n     * @exception SQLException if a database access error\n     * occurs; this method is called on a closed result set or the\n     * result set type is <code>TYPE_FORWARD_ONLY</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " void afterLast() throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Moves the cursor to the end of\n     * this <code>ResultSet</code> object, just after the\n     * last row. This method has no effect if the result set contains no rows.\n     * @exception SQLException if a database access error\n     * occurs; this method is called on a closed result set\n     * or the result set type is <code>TYPE_FORWARD_ONLY</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean first() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Moves the cursor to the first row in\n     * this <code>ResultSet</code> object.\n     *\n     * @return <code>true</code> if the cursor is on a valid row;\n     * <code>false</code> if there are no rows in the result set\n     * @exception SQLException if a database access error\n     * occurs; this method is called on a closed result set\n     * or the result set type is <code>TYPE_FORWARD_ONLY</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean last() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Moves the cursor to the last row in\n     * this <code>ResultSet</code> object.\n     *\n     * @return <code>true</code> if the cursor is on a valid row;\n     * <code>false</code> if there are no rows in the result set\n     * @exception SQLException if a database access error\n     * occurs; this method is called on a closed result set\n     * or the result set type is <code>TYPE_FORWARD_ONLY</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " int getRow() throws SQLException",
    "returnType" : "int",
    "comment" : "\n     * Retrieves the current row number.  The first row is number 1, the\n     * second number 2, and so on.\n     * <p>\n     * <strong>Note:</strong>Support for the <code>getRow</code> method\n     * is optional for <code>ResultSet</code>s with a result\n     * set type of <code>TYPE_FORWARD_ONLY</code>\n     *\n     * @return the current row number; <code>0</code> if there is no current row\n     * @exception SQLException if a database access error occurs\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean absolute(int row) throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Moves the cursor to the given row number in\n     * this <code>ResultSet</code> object.\n     *\n     * <p>If the row number is positive, the cursor moves to\n     * the given row number with respect to the\n     * beginning of the result set.  The first row is row 1, the second\n     * is row 2, and so on.\n     *\n     * <p>If the given row number is negative, the cursor moves to\n     * an absolute row position with respect to\n     * the end of the result set.  For example, calling the method\n     * <code>absolute(-1)</code> positions the\n     * cursor on the last row; calling the method <code>absolute(-2)</code>\n     * moves the cursor to the next-to-last row, and so on.\n     *\n     * <p>If the row number specified is zero, the cursor is moved to\n     * before the first row.\n     *\n     * <p>An attempt to position the cursor beyond the first/last row in\n     * the result set leaves the cursor before the first row or after\n     * the last row.\n     *\n     * <p><B>Note:</B> Calling <code>absolute(1)</code> is the same\n     * as calling <code>first()</code>. Calling <code>absolute(-1)</code>\n     * is the same as calling <code>last()</code>.\n     *\n     * @param row the number of the row to which the cursor should move.\n     *        A value of zero indicates that the cursor will be positioned\n     *        before the first row; a positive number indicates the row number\n     *        counting from the beginning of the result set; a negative number\n     *        indicates the row number counting from the end of the result set\n     * @return <code>true</code> if the cursor is moved to a position in this\n     * <code>ResultSet</code> object;\n     * <code>false</code> if the cursor is before the first row or after the\n     * last row\n     * @exception SQLException if a database access error\n     * occurs; this method is called on a closed result set\n     * or the result set type is <code>TYPE_FORWARD_ONLY</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean relative(int rows) throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Moves the cursor a relative number of rows, either positive or negative.\n     * Attempting to move beyond the first/last row in the\n     * result set positions the cursor before/after the\n     * the first/last row. Calling <code>relative(0)</code> is valid, but does\n     * not change the cursor position.\n     *\n     * <p>Note: Calling the method <code>relative(1)</code>\n     * is identical to calling the method <code>next()</code> and\n     * calling the method <code>relative(-1)</code> is identical\n     * to calling the method <code>previous()</code>.\n     *\n     * @param rows an <code>int</code> specifying the number of rows to\n     *        move from the current row; a positive number moves the cursor\n     *        forward; a negative number moves the cursor backward\n     * @return <code>true</code> if the cursor is on a row;\n     *         <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs;  this method\n     * is called on a closed result set or the result set type is\n     *            <code>TYPE_FORWARD_ONLY</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean previous() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Moves the cursor to the previous row in this\n     * <code>ResultSet</code> object.\n     *<p>\n     * When a call to the <code>previous</code> method returns <code>false</code>,\n     * the cursor is positioned before the first row.  Any invocation of a\n     * <code>ResultSet</code> method which requires a current row will result in a\n     * <code>SQLException</code> being thrown.\n     *<p>\n     * If an input stream is open for the current row, a call to the method\n     * <code>previous</code> will implicitly close it.  A <code>ResultSet</code>\n     *  object's warning change is cleared when a new row is read.\n     *<p>\n     *\n     * @return <code>true</code> if the cursor is now positioned on a valid row;\n     * <code>false</code> if the cursor is positioned before the first row\n     * @exception SQLException if a database access error\n     * occurs; this method is called on a closed result set\n     * or the result set type is <code>TYPE_FORWARD_ONLY</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " void setFetchDirection(int direction) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Gives a hint as to the direction in which the rows in this\n     * <code>ResultSet</code> object will be processed.\n     * The initial value is determined by the\n     * <code>Statement</code> object\n     * that produced this <code>ResultSet</code> object.\n     * The fetch direction may be changed at any time.\n     *\n     * @param direction an <code>int</code> specifying the suggested\n     *        fetch direction; one of <code>ResultSet.FETCH_FORWARD</code>,\n     *        <code>ResultSet.FETCH_REVERSE</code>, or\n     *        <code>ResultSet.FETCH_UNKNOWN</code>\n     * @exception SQLException if a database access error occurs; this\n     * method is called on a closed result set or\n     * the result set type is <code>TYPE_FORWARD_ONLY</code> and the fetch\n     * direction is not <code>FETCH_FORWARD</code>\n     * @since 1.2\n     * @see Statement#setFetchDirection\n     * @see #getFetchDirection\n     ",
    "links" : [ ]
  }, {
    "name" : " int getFetchDirection() throws SQLException",
    "returnType" : "int",
    "comment" : "\n     * Retrieves the fetch direction for this\n     * <code>ResultSet</code> object.\n     *\n     * @return the current fetch direction for this <code>ResultSet</code> object\n     * @exception SQLException if a database access error occurs\n     * or this method is called on a closed result set\n     * @since 1.2\n     * @see #setFetchDirection\n     ",
    "links" : [ ]
  }, {
    "name" : " void setFetchSize(int rows) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Gives the JDBC driver a hint as to the number of rows that should\n     * be fetched from the database when more rows are needed for this\n     * <code>ResultSet</code> object.\n     * If the fetch size specified is zero, the JDBC driver\n     * ignores the value and is free to make its own best guess as to what\n     * the fetch size should be.  The default value is set by the\n     * <code>Statement</code> object\n     * that created the result set.  The fetch size may be changed at any time.\n     *\n     * @param rows the number of rows to fetch\n     * @exception SQLException if a database access error occurs; this method\n     * is called on a closed result set or the\n     * condition <code>rows >= 0 </code> is not satisfied\n     * @since 1.2\n     * @see #getFetchSize\n     ",
    "links" : [ ]
  }, {
    "name" : " int getFetchSize() throws SQLException",
    "returnType" : "int",
    "comment" : "\n     * Retrieves the fetch size for this\n     * <code>ResultSet</code> object.\n     *\n     * @return the current fetch size for this <code>ResultSet</code> object\n     * @exception SQLException if a database access error occurs\n     * or this method is called on a closed result set\n     * @since 1.2\n     * @see #setFetchSize\n     ",
    "links" : [ ]
  }, {
    "name" : " int getType() throws SQLException",
    "returnType" : "int",
    "comment" : "\n     * Retrieves the type of this <code>ResultSet</code> object.\n     * The type is determined by the <code>Statement</code> object\n     * that created the result set.\n     *\n     * @return <code>ResultSet.TYPE_FORWARD_ONLY</code>,\n     *         <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>,\n     *         or <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>\n     * @exception SQLException if a database access error occurs\n     * or this method is called on a closed result set\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " int getConcurrency() throws SQLException",
    "returnType" : "int",
    "comment" : "\n     * Retrieves the concurrency mode of this <code>ResultSet</code> object.\n     * The concurrency used is determined by the\n     * <code>Statement</code> object that created the result set.\n     *\n     * @return the concurrency type, either\n     *         <code>ResultSet.CONCUR_READ_ONLY</code>\n     *         or <code>ResultSet.CONCUR_UPDATABLE</code>\n     * @exception SQLException if a database access error occurs\n     * or this method is called on a closed result set\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean rowUpdated() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether the current row has been updated.  The value returned\n     * depends on whether or not the result set can detect updates.\n     * <p>\n     * <strong>Note:</strong> Support for the <code>rowUpdated</code> method is optional with a result set\n     * concurrency of <code>CONCUR_READ_ONLY</code>\n     * @return <code>true</code> if the current row is detected to\n     * have been visibly updated by the owner or another; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @see DatabaseMetaData#updatesAreDetected\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean rowInserted() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether the current row has had an insertion.\n     * The value returned depends on whether or not this\n     * <code>ResultSet</code> object can detect visible inserts.\n     * <p>\n     * <strong>Note:</strong> Support for the <code>rowInserted</code> method is optional with a result set\n     * concurrency of <code>CONCUR_READ_ONLY</code>\n     * @return <code>true</code> if the current row is detected to\n     * have been inserted; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     *\n     * @see DatabaseMetaData#insertsAreDetected\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean rowDeleted() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether a row has been deleted.  A deleted row may leave\n     * a visible \"hole\" in a result set.  This method can be used to\n     * detect holes in a result set.  The value returned depends on whether\n     * or not this <code>ResultSet</code> object can detect deletions.\n     * <p>\n     * <strong>Note:</strong> Support for the <code>rowDeleted</code> method is optional with a result set\n     * concurrency of <code>CONCUR_READ_ONLY</code>\n     * @return <code>true</code> if the current row is detected to\n     * have been deleted by the owner or another; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     *\n     * @see DatabaseMetaData#deletesAreDetected\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateNull(int columnIndex) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column with a <code>null</code> value.\n     *\n     * The updater methods are used to update column values in the\n     * current row or the insert row.  The updater methods do not\n     * update the underlying database; instead the <code>updateRow</code>\n     * or <code>insertRow</code> methods are called to update the database.\n     *\n     * @param columnIndex the first column is 1, the second is 2, ...\n     * @exception SQLException if the columnIndex is not valid;\n     * if a database access error occurs;\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateBoolean(int columnIndex, boolean x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column with a <code>boolean</code> value.\n     * The updater methods are used to update column values in the\n     * current row or the insert row.  The updater methods do not\n     * update the underlying database; instead the <code>updateRow</code> or\n     * <code>insertRow</code> methods are called to update the database.\n     *\n     * @param columnIndex the first column is 1, the second is 2, ...\n     * @param x the new column value\n     * @exception SQLException if the columnIndex is not valid;\n     * if a database access error occurs;\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateByte(int columnIndex, byte x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column with a <code>byte</code> value.\n     * The updater methods are used to update column values in the\n     * current row or the insert row.  The updater methods do not\n     * update the underlying database; instead the <code>updateRow</code> or\n     * <code>insertRow</code> methods are called to update the database.\n     *\n     *\n     * @param columnIndex the first column is 1, the second is 2, ...\n     * @param x the new column value\n     * @exception SQLException if the columnIndex is not valid;\n     * if a database access error occurs;\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateShort(int columnIndex, short x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column with a <code>short</code> value.\n     * The updater methods are used to update column values in the\n     * current row or the insert row.  The updater methods do not\n     * update the underlying database; instead the <code>updateRow</code> or\n     * <code>insertRow</code> methods are called to update the database.\n     *\n     * @param columnIndex the first column is 1, the second is 2, ...\n     * @param x the new column value\n     * @exception SQLException if the columnIndex is not valid;\n     * if a database access error occurs;\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateInt(int columnIndex, int x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column with an <code>int</code> value.\n     * The updater methods are used to update column values in the\n     * current row or the insert row.  The updater methods do not\n     * update the underlying database; instead the <code>updateRow</code> or\n     * <code>insertRow</code> methods are called to update the database.\n     *\n     * @param columnIndex the first column is 1, the second is 2, ...\n     * @param x the new column value\n     * @exception SQLException if the columnIndex is not valid;\n     * if a database access error occurs;\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateLong(int columnIndex, long x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column with a <code>long</code> value.\n     * The updater methods are used to update column values in the\n     * current row or the insert row.  The updater methods do not\n     * update the underlying database; instead the <code>updateRow</code> or\n     * <code>insertRow</code> methods are called to update the database.\n     *\n     * @param columnIndex the first column is 1, the second is 2, ...\n     * @param x the new column value\n     * @exception SQLException if the columnIndex is not valid;\n     * if a database access error occurs;\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateFloat(int columnIndex, float x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column with a <code>float</code> value.\n     * The updater methods are used to update column values in the\n     * current row or the insert row.  The updater methods do not\n     * update the underlying database; instead the <code>updateRow</code> or\n     * <code>insertRow</code> methods are called to update the database.\n     *\n     * @param columnIndex the first column is 1, the second is 2, ...\n     * @param x the new column value\n     * @exception SQLException if the columnIndex is not valid;\n     * if a database access error occurs;\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateDouble(int columnIndex, double x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column with a <code>double</code> value.\n     * The updater methods are used to update column values in the\n     * current row or the insert row.  The updater methods do not\n     * update the underlying database; instead the <code>updateRow</code> or\n     * <code>insertRow</code> methods are called to update the database.\n     *\n     * @param columnIndex the first column is 1, the second is 2, ...\n     * @param x the new column value\n     * @exception SQLException if the columnIndex is not valid;\n     * if a database access error occurs;\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateBigDecimal(int columnIndex, BigDecimal x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column with a <code>java.math.BigDecimal</code>\n     * value.\n     * The updater methods are used to update column values in the\n     * current row or the insert row.  The updater methods do not\n     * update the underlying database; instead the <code>updateRow</code> or\n     * <code>insertRow</code> methods are called to update the database.\n     *\n     * @param columnIndex the first column is 1, the second is 2, ...\n     * @param x the new column value\n     * @exception SQLException if the columnIndex is not valid;\n     * if a database access error occurs;\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateString(int columnIndex, String x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column with a <code>String</code> value.\n     * The updater methods are used to update column values in the\n     * current row or the insert row.  The updater methods do not\n     * update the underlying database; instead the <code>updateRow</code> or\n     * <code>insertRow</code> methods are called to update the database.\n     *\n     * @param columnIndex the first column is 1, the second is 2, ...\n     * @param x the new column value\n     * @exception SQLException if the columnIndex is not valid;\n     * if a database access error occurs;\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateBytes(int columnIndex, byte[] x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column with a <code>byte</code> array value.\n     * The updater methods are used to update column values in the\n     * current row or the insert row.  The updater methods do not\n     * update the underlying database; instead the <code>updateRow</code> or\n     * <code>insertRow</code> methods are called to update the database.\n     *\n     * @param columnIndex the first column is 1, the second is 2, ...\n     * @param x the new column value\n     * @exception SQLException if the columnIndex is not valid;\n     * if a database access error occurs;\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateDate(int columnIndex, java.sql.Date x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column with a <code>java.sql.Date</code> value.\n     * The updater methods are used to update column values in the\n     * current row or the insert row.  The updater methods do not\n     * update the underlying database; instead the <code>updateRow</code> or\n     * <code>insertRow</code> methods are called to update the database.\n     *\n     * @param columnIndex the first column is 1, the second is 2, ...\n     * @param x the new column value\n     * @exception SQLException if the columnIndex is not valid;\n     * if a database access error occurs;\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateTime(int columnIndex, java.sql.Time x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column with a <code>java.sql.Time</code> value.\n     * The updater methods are used to update column values in the\n     * current row or the insert row.  The updater methods do not\n     * update the underlying database; instead the <code>updateRow</code> or\n     * <code>insertRow</code> methods are called to update the database.\n     *\n     * @param columnIndex the first column is 1, the second is 2, ...\n     * @param x the new column value\n     * @exception SQLException if the columnIndex is not valid;\n     * if a database access error occurs;\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateTimestamp(int columnIndex, java.sql.Timestamp x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column with a <code>java.sql.Timestamp</code>\n     * value.\n     * The updater methods are used to update column values in the\n     * current row or the insert row.  The updater methods do not\n     * update the underlying database; instead the <code>updateRow</code> or\n     * <code>insertRow</code> methods are called to update the database.\n     *\n     * @param columnIndex the first column is 1, the second is 2, ...\n     * @param x the new column value\n     * @exception SQLException if the columnIndex is not valid;\n     * if a database access error occurs;\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateAsciiStream(int columnIndex, java.io.InputStream x, int length) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column with an ascii stream value, which will have\n     * the specified number of bytes.\n     * The updater methods are used to update column values in the\n     * current row or the insert row.  The updater methods do not\n     * update the underlying database; instead the <code>updateRow</code> or\n     * <code>insertRow</code> methods are called to update the database.\n     *\n     * @param columnIndex the first column is 1, the second is 2, ...\n     * @param x the new column value\n     * @param length the length of the stream\n     * @exception SQLException if the columnIndex is not valid;\n     * if a database access error occurs;\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateBinaryStream(int columnIndex, java.io.InputStream x, int length) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column with a binary stream value, which will have\n     * the specified number of bytes.\n     * The updater methods are used to update column values in the\n     * current row or the insert row.  The updater methods do not\n     * update the underlying database; instead the <code>updateRow</code> or\n     * <code>insertRow</code> methods are called to update the database.\n     *\n     * @param columnIndex the first column is 1, the second is 2, ...\n     * @param x the new column value\n     * @param length the length of the stream\n     * @exception SQLException if the columnIndex is not valid;\n     * if a database access error occurs;\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateCharacterStream(int columnIndex, java.io.Reader x, int length) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column with a character stream value, which will have\n     * the specified number of bytes.\n     * The updater methods are used to update column values in the\n     * current row or the insert row.  The updater methods do not\n     * update the underlying database; instead the <code>updateRow</code> or\n     * <code>insertRow</code> methods are called to update the database.\n     *\n     * @param columnIndex the first column is 1, the second is 2, ...\n     * @param x the new column value\n     * @param length the length of the stream\n     * @exception SQLException if the columnIndex is not valid;\n     * if a database access error occurs;\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateObject(int columnIndex, Object x, int scaleOrLength) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column with an <code>Object</code> value.\n     * The updater methods are used to update column values in the\n     * current row or the insert row.  The updater methods do not\n     * update the underlying database; instead the <code>updateRow</code> or\n     * <code>insertRow</code> methods are called to update the database.\n     *<p>\n     * If the second argument is an <code>InputStream</code> then the stream must contain\n     * the number of bytes specified by scaleOrLength.  If the second argument is a\n     * <code>Reader</code> then the reader must contain the number of characters specified\n     * by scaleOrLength. If these conditions are not true the driver will generate a\n     * <code>SQLException</code> when the statement is executed.\n     *\n     * @param columnIndex the first column is 1, the second is 2, ...\n     * @param x the new column value\n     * @param scaleOrLength for an object of <code>java.math.BigDecimal</code> ,\n     *          this is the number of digits after the decimal point. For\n     *          Java Object types <code>InputStream</code> and <code>Reader</code>,\n     *          this is the length\n     *          of the data in the stream or reader.  For all other types,\n     *          this value will be ignored.\n     * @exception SQLException if the columnIndex is not valid;\n     * if a database access error occurs;\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateObject(int columnIndex, Object x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column with an <code>Object</code> value.\n     * The updater methods are used to update column values in the\n     * current row or the insert row.  The updater methods do not\n     * update the underlying database; instead the <code>updateRow</code> or\n     * <code>insertRow</code> methods are called to update the database.\n     *\n     * @param columnIndex the first column is 1, the second is 2, ...\n     * @param x the new column value\n     * @exception SQLException if the columnIndex is not valid;\n     * if a database access error occurs;\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateNull(String columnLabel) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column with a <code>null</code> value.\n     * The updater methods are used to update column values in the\n     * current row or the insert row.  The updater methods do not\n     * update the underlying database; instead the <code>updateRow</code> or\n     * <code>insertRow</code> methods are called to update the database.\n     *\n     * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n     * @exception SQLException if the columnLabel is not valid;\n     * if a database access error occurs;\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateBoolean(String columnLabel, boolean x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column with a <code>boolean</code> value.\n     * The updater methods are used to update column values in the\n     * current row or the insert row.  The updater methods do not\n     * update the underlying database; instead the <code>updateRow</code> or\n     * <code>insertRow</code> methods are called to update the database.\n     *\n     * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n     * @param x the new column value\n     * @exception SQLException if the columnLabel is not valid;\n     * if a database access error occurs;\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateByte(String columnLabel, byte x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column with a <code>byte</code> value.\n     * The updater methods are used to update column values in the\n     * current row or the insert row.  The updater methods do not\n     * update the underlying database; instead the <code>updateRow</code> or\n     * <code>insertRow</code> methods are called to update the database.\n     *\n     * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n     * @param x the new column value\n     * @exception SQLException if the columnLabel is not valid;\n     * if a database access error occurs;\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateShort(String columnLabel, short x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column with a <code>short</code> value.\n     * The updater methods are used to update column values in the\n     * current row or the insert row.  The updater methods do not\n     * update the underlying database; instead the <code>updateRow</code> or\n     * <code>insertRow</code> methods are called to update the database.\n     *\n     * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n     * @param x the new column value\n     * @exception SQLException if the columnLabel is not valid;\n     * if a database access error occurs;\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateInt(String columnLabel, int x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column with an <code>int</code> value.\n     * The updater methods are used to update column values in the\n     * current row or the insert row.  The updater methods do not\n     * update the underlying database; instead the <code>updateRow</code> or\n     * <code>insertRow</code> methods are called to update the database.\n     *\n     * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n     * @param x the new column value\n     * @exception SQLException if the columnLabel is not valid;\n     * if a database access error occurs;\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateLong(String columnLabel, long x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column with a <code>long</code> value.\n     * The updater methods are used to update column values in the\n     * current row or the insert row.  The updater methods do not\n     * update the underlying database; instead the <code>updateRow</code> or\n     * <code>insertRow</code> methods are called to update the database.\n     *\n     * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n     * @param x the new column value\n     * @exception SQLException if the columnLabel is not valid;\n     * if a database access error occurs;\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateFloat(String columnLabel, float x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column with a <code>float </code> value.\n     * The updater methods are used to update column values in the\n     * current row or the insert row.  The updater methods do not\n     * update the underlying database; instead the <code>updateRow</code> or\n     * <code>insertRow</code> methods are called to update the database.\n     *\n     * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n     * @param x the new column value\n     * @exception SQLException if the columnLabel is not valid;\n     * if a database access error occurs;\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateDouble(String columnLabel, double x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column with a <code>double</code> value.\n     * The updater methods are used to update column values in the\n     * current row or the insert row.  The updater methods do not\n     * update the underlying database; instead the <code>updateRow</code> or\n     * <code>insertRow</code> methods are called to update the database.\n     *\n     * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n     * @param x the new column value\n     * @exception SQLException if the columnLabel is not valid;\n     * if a database access error occurs;\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateBigDecimal(String columnLabel, BigDecimal x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column with a <code>java.sql.BigDecimal</code>\n     * value.\n     * The updater methods are used to update column values in the\n     * current row or the insert row.  The updater methods do not\n     * update the underlying database; instead the <code>updateRow</code> or\n     * <code>insertRow</code> methods are called to update the database.\n     *\n     * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n     * @param x the new column value\n     * @exception SQLException if the columnLabel is not valid;\n     * if a database access error occurs;\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateString(String columnLabel, String x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column with a <code>String</code> value.\n     * The updater methods are used to update column values in the\n     * current row or the insert row.  The updater methods do not\n     * update the underlying database; instead the <code>updateRow</code> or\n     * <code>insertRow</code> methods are called to update the database.\n     *\n     * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n     * @param x the new column value\n     * @exception SQLException if the columnLabel is not valid;\n     * if a database access error occurs;\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateBytes(String columnLabel, byte[] x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column with a byte array value.\n     *\n     * The updater methods are used to update column values in the\n     * current row or the insert row.  The updater methods do not\n     * update the underlying database; instead the <code>updateRow</code>\n     * or <code>insertRow</code> methods are called to update the database.\n     *\n     * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n     * @param x the new column value\n     * @exception SQLException if the columnLabel is not valid;\n     * if a database access error occurs;\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateDate(String columnLabel, java.sql.Date x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column with a <code>java.sql.Date</code> value.\n     * The updater methods are used to update column values in the\n     * current row or the insert row.  The updater methods do not\n     * update the underlying database; instead the <code>updateRow</code> or\n     * <code>insertRow</code> methods are called to update the database.\n     *\n     * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n     * @param x the new column value\n     * @exception SQLException if the columnLabel is not valid;\n     * if a database access error occurs;\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateTime(String columnLabel, java.sql.Time x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column with a <code>java.sql.Time</code> value.\n     * The updater methods are used to update column values in the\n     * current row or the insert row.  The updater methods do not\n     * update the underlying database; instead the <code>updateRow</code> or\n     * <code>insertRow</code> methods are called to update the database.\n     *\n     * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n     * @param x the new column value\n     * @exception SQLException if the columnLabel is not valid;\n     * if a database access error occurs;\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateTimestamp(String columnLabel, java.sql.Timestamp x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column with a <code>java.sql.Timestamp</code>\n     * value.\n     * The updater methods are used to update column values in the\n     * current row or the insert row.  The updater methods do not\n     * update the underlying database; instead the <code>updateRow</code> or\n     * <code>insertRow</code> methods are called to update the database.\n     *\n     * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n     * @param x the new column value\n     * @exception SQLException if the columnLabel is not valid;\n     * if a database access error occurs;\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateAsciiStream(String columnLabel, java.io.InputStream x, int length) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column with an ascii stream value, which will have\n     * the specified number of bytes.\n     * The updater methods are used to update column values in the\n     * current row or the insert row.  The updater methods do not\n     * update the underlying database; instead the <code>updateRow</code> or\n     * <code>insertRow</code> methods are called to update the database.\n     *\n     * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n     * @param x the new column value\n     * @param length the length of the stream\n     * @exception SQLException if the columnLabel is not valid;\n     * if a database access error occurs;\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateBinaryStream(String columnLabel, java.io.InputStream x, int length) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column with a binary stream value, which will have\n     * the specified number of bytes.\n     * The updater methods are used to update column values in the\n     * current row or the insert row.  The updater methods do not\n     * update the underlying database; instead the <code>updateRow</code> or\n     * <code>insertRow</code> methods are called to update the database.\n     *\n     * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n     * @param x the new column value\n     * @param length the length of the stream\n     * @exception SQLException if the columnLabel is not valid;\n     * if a database access error occurs;\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateCharacterStream(String columnLabel, java.io.Reader reader, int length) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column with a character stream value, which will have\n     * the specified number of bytes.\n     * The updater methods are used to update column values in the\n     * current row or the insert row.  The updater methods do not\n     * update the underlying database; instead the <code>updateRow</code> or\n     * <code>insertRow</code> methods are called to update the database.\n     *\n     * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n     * @param reader the <code>java.io.Reader</code> object containing\n     *        the new column value\n     * @param length the length of the stream\n     * @exception SQLException if the columnLabel is not valid;\n     * if a database access error occurs;\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateObject(String columnLabel, Object x, int scaleOrLength) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column with an <code>Object</code> value.\n     * The updater methods are used to update column values in the\n     * current row or the insert row.  The updater methods do not\n     * update the underlying database; instead the <code>updateRow</code> or\n     * <code>insertRow</code> methods are called to update the database.\n     *<p>\n     * If the second argument is an <code>InputStream</code> then the stream must contain\n     * the number of bytes specified by scaleOrLength.  If the second argument is a\n     * <code>Reader</code> then the reader must contain the number of characters specified\n     * by scaleOrLength. If these conditions are not true the driver will generate a\n     * <code>SQLException</code> when the statement is executed.\n     *\n     * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n     * @param x the new column value\n     * @param scaleOrLength for an object of <code>java.math.BigDecimal</code> ,\n     *          this is the number of digits after the decimal point. For\n     *          Java Object types <code>InputStream</code> and <code>Reader</code>,\n     *          this is the length\n     *          of the data in the stream or reader.  For all other types,\n     *          this value will be ignored.\n     * @exception SQLException if the columnLabel is not valid;\n     * if a database access error occurs;\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateObject(String columnLabel, Object x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column with an <code>Object</code> value.\n     * The updater methods are used to update column values in the\n     * current row or the insert row.  The updater methods do not\n     * update the underlying database; instead the <code>updateRow</code> or\n     * <code>insertRow</code> methods are called to update the database.\n     *\n     * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n     * @param x the new column value\n     * @exception SQLException if the columnLabel is not valid;\n     * if a database access error occurs;\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " void insertRow() throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Inserts the contents of the insert row into this\n     * <code>ResultSet</code> object and into the database.\n     * The cursor must be on the insert row when this method is called.\n     *\n     * @exception SQLException if a database access error occurs;\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>,\n     * this method is called on a closed result set,\n     * if this method is called when the cursor is not on the insert row,\n     * or if not all of non-nullable columns in\n     * the insert row have been given a non-null value\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateRow() throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the underlying database with the new contents of the\n     * current row of this <code>ResultSet</code> object.\n     * This method cannot be called when the cursor is on the insert row.\n     *\n     * @exception SQLException if a database access error occurs;\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>;\n     *  this method is called on a closed result set or\n     * if this method is called when the cursor is on the insert row\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " void deleteRow() throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Deletes the current row from this <code>ResultSet</code> object\n     * and from the underlying database.  This method cannot be called when\n     * the cursor is on the insert row.\n     *\n     * @exception SQLException if a database access error occurs;\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>;\n     * this method is called on a closed result set\n     * or if this method is called when the cursor is on the insert row\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " void refreshRow() throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Refreshes the current row with its most recent value in\n     * the database.  This method cannot be called when\n     * the cursor is on the insert row.\n     *\n     * <P>The <code>refreshRow</code> method provides a way for an\n     * application to\n     * explicitly tell the JDBC driver to refetch a row(s) from the\n     * database.  An application may want to call <code>refreshRow</code> when\n     * caching or prefetching is being done by the JDBC driver to\n     * fetch the latest value of a row from the database.  The JDBC driver\n     * may actually refresh multiple rows at once if the fetch size is\n     * greater than one.\n     *\n     * <P> All values are refetched subject to the transaction isolation\n     * level and cursor sensitivity.  If <code>refreshRow</code> is called after\n     * calling an updater method, but before calling\n     * the method <code>updateRow</code>, then the\n     * updates made to the row are lost.  Calling the method\n     * <code>refreshRow</code> frequently will likely slow performance.\n     *\n     * @exception SQLException if a database access error\n     * occurs; this method is called on a closed result set;\n     * the result set type is <code>TYPE_FORWARD_ONLY</code> or if this\n     * method is called when the cursor is on the insert row\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method or this method is not supported for the specified result\n     * set type and result set concurrency.\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " void cancelRowUpdates() throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Cancels the updates made to the current row in this\n     * <code>ResultSet</code> object.\n     * This method may be called after calling an\n     * updater method(s) and before calling\n     * the method <code>updateRow</code> to roll back\n     * the updates made to a row.  If no updates have been made or\n     * <code>updateRow</code> has already been called, this method has no\n     * effect.\n     *\n     * @exception SQLException if a database access error\n     *            occurs; this method is called on a closed result set;\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>\n     * or if this method is called when the cursor is\n     *            on the insert row\n      * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " void moveToInsertRow() throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Moves the cursor to the insert row.  The current cursor position is\n     * remembered while the cursor is positioned on the insert row.\n     *\n     * The insert row is a special row associated with an updatable\n     * result set.  It is essentially a buffer where a new row may\n     * be constructed by calling the updater methods prior to\n     * inserting the row into the result set.\n     *\n     * Only the updater, getter,\n     * and <code>insertRow</code> methods may be\n     * called when the cursor is on the insert row.  All of the columns in\n     * a result set must be given a value each time this method is\n     * called before calling <code>insertRow</code>.\n     * An updater method must be called before a\n     * getter method can be called on a column value.\n     *\n     * @exception SQLException if a database access error occurs; this\n     * method is called on a closed result set\n     * or the result set concurrency is <code>CONCUR_READ_ONLY</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " void moveToCurrentRow() throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Moves the cursor to the remembered cursor position, usually the\n     * current row.  This method has no effect if the cursor is not on\n     * the insert row.\n     *\n     * @exception SQLException if a database access error occurs; this\n     * method is called on a closed result set\n     *  or the result set concurrency is <code>CONCUR_READ_ONLY</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " Statement getStatement() throws SQLException",
    "returnType" : "Statement",
    "comment" : "\n     * Retrieves the <code>Statement</code> object that produced this\n     * <code>ResultSet</code> object.\n     * If the result set was generated some other way, such as by a\n     * <code>DatabaseMetaData</code> method, this method  may return\n     * <code>null</code>.\n     *\n     * @return the <code>Statment</code> object that produced\n     * this <code>ResultSet</code> object or <code>null</code>\n     * if the result set was produced some other way\n     * @exception SQLException if a database access error occurs\n     * or this method is called on a closed result set\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " Object getObject(int columnIndex, java.util.Map<String, Class<?>> map) throws SQLException",
    "returnType" : "Object",
    "comment" : "\n     * Retrieves the value of the designated column in the current row\n     * of this <code>ResultSet</code> object as an <code>Object</code>\n     * in the Java programming language.\n     * If the value is an SQL <code>NULL</code>,\n     * the driver returns a Java <code>null</code>.\n     * This method uses the given <code>Map</code> object\n     * for the custom mapping of the\n     * SQL structured or distinct type that is being retrieved.\n     *\n     * @param columnIndex the first column is 1, the second is 2, ...\n     * @param map a <code>java.util.Map</code> object that contains the mapping\n     * from SQL type names to classes in the Java programming language\n     * @return an <code>Object</code> in the Java programming language\n     * representing the SQL value\n     * @exception SQLException if the columnIndex is not valid;\n     * if a database access error occurs\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " Ref getRef(int columnIndex) throws SQLException",
    "returnType" : "Ref",
    "comment" : "\n     * Retrieves the value of the designated column in the current row\n     * of this <code>ResultSet</code> object as a <code>Ref</code> object\n     * in the Java programming language.\n     *\n     * @param columnIndex the first column is 1, the second is 2, ...\n     * @return a <code>Ref</code> object representing an SQL <code>REF</code>\n     *         value\n     * @exception SQLException if the columnIndex is not valid;\n     * if a database access error occurs\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " Blob getBlob(int columnIndex) throws SQLException",
    "returnType" : "Blob",
    "comment" : "\n     * Retrieves the value of the designated column in the current row\n     * of this <code>ResultSet</code> object as a <code>Blob</code> object\n     * in the Java programming language.\n     *\n     * @param columnIndex the first column is 1, the second is 2, ...\n     * @return a <code>Blob</code> object representing the SQL\n     *         <code>BLOB</code> value in the specified column\n     * @exception SQLException if the columnIndex is not valid;\n     * if a database access error occurs\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " Clob getClob(int columnIndex) throws SQLException",
    "returnType" : "Clob",
    "comment" : "\n     * Retrieves the value of the designated column in the current row\n     * of this <code>ResultSet</code> object as a <code>Clob</code> object\n     * in the Java programming language.\n     *\n     * @param columnIndex the first column is 1, the second is 2, ...\n     * @return a <code>Clob</code> object representing the SQL\n     *         <code>CLOB</code> value in the specified column\n     * @exception SQLException if the columnIndex is not valid;\n     * if a database access error occurs\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " Array getArray(int columnIndex) throws SQLException",
    "returnType" : "Array",
    "comment" : "\n     * Retrieves the value of the designated column in the current row\n     * of this <code>ResultSet</code> object as an <code>Array</code> object\n     * in the Java programming language.\n     *\n     * @param columnIndex the first column is 1, the second is 2, ...\n     * @return an <code>Array</code> object representing the SQL\n     *         <code>ARRAY</code> value in the specified column\n     * @exception SQLException if the columnIndex is not valid;\n     * if a database access error occurs\n     * or this method is called on a closed result set\n      * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " Object getObject(String columnLabel, java.util.Map<String, Class<?>> map) throws SQLException",
    "returnType" : "Object",
    "comment" : "\n     * Retrieves the value of the designated column in the current row\n     * of this <code>ResultSet</code> object as an <code>Object</code>\n     * in the Java programming language.\n     * If the value is an SQL <code>NULL</code>,\n     * the driver returns a Java <code>null</code>.\n     * This method uses the specified <code>Map</code> object for\n     * custom mapping if appropriate.\n     *\n     * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n     * @param map a <code>java.util.Map</code> object that contains the mapping\n     * from SQL type names to classes in the Java programming language\n     * @return an <code>Object</code> representing the SQL value in the\n     *         specified column\n     * @exception SQLException if the columnLabel is not valid;\n     * if a database access error occurs\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " Ref getRef(String columnLabel) throws SQLException",
    "returnType" : "Ref",
    "comment" : "\n     * Retrieves the value of the designated column in the current row\n     * of this <code>ResultSet</code> object as a <code>Ref</code> object\n     * in the Java programming language.\n     *\n     * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n     * @return a <code>Ref</code> object representing the SQL <code>REF</code>\n     *         value in the specified column\n     * @exception SQLException if the columnLabel is not valid;\n     * if a database access error occurs\n     * or this method is called on a closed result set\n      * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " Blob getBlob(String columnLabel) throws SQLException",
    "returnType" : "Blob",
    "comment" : "\n     * Retrieves the value of the designated column in the current row\n     * of this <code>ResultSet</code> object as a <code>Blob</code> object\n     * in the Java programming language.\n     *\n     * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n     * @return a <code>Blob</code> object representing the SQL <code>BLOB</code>\n     *         value in the specified column\n     * @exception SQLException if the columnLabel is not valid;\n     * if a database access error occurs\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " Clob getClob(String columnLabel) throws SQLException",
    "returnType" : "Clob",
    "comment" : "\n     * Retrieves the value of the designated column in the current row\n     * of this <code>ResultSet</code> object as a <code>Clob</code> object\n     * in the Java programming language.\n     *\n     * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n     * @return a <code>Clob</code> object representing the SQL <code>CLOB</code>\n     * value in the specified column\n     * @exception SQLException if the columnLabel is not valid;\n     * if a database access error occurs\n     * or this method is called on a closed result set\n      * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " Array getArray(String columnLabel) throws SQLException",
    "returnType" : "Array",
    "comment" : "\n     * Retrieves the value of the designated column in the current row\n     * of this <code>ResultSet</code> object as an <code>Array</code> object\n     * in the Java programming language.\n     *\n     * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n     * @return an <code>Array</code> object representing the SQL <code>ARRAY</code> value in\n     *         the specified column\n     * @exception SQLException if the columnLabel is not valid;\n     * if a database access error occurs\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " java.sql.Date getDate(int columnIndex, Calendar cal) throws SQLException",
    "returnType" : "java.sql.Date",
    "comment" : "\n     * Retrieves the value of the designated column in the current row\n     * of this <code>ResultSet</code> object as a <code>java.sql.Date</code> object\n     * in the Java programming language.\n     * This method uses the given calendar to construct an appropriate millisecond\n     * value for the date if the underlying database does not store\n     * timezone information.\n     *\n     * @param columnIndex the first column is 1, the second is 2, ...\n     * @param cal the <code>java.util.Calendar</code> object\n     * to use in constructing the date\n     * @return the column value as a <code>java.sql.Date</code> object;\n     * if the value is SQL <code>NULL</code>,\n     * the value returned is <code>null</code> in the Java programming language\n     * @exception SQLException if the columnIndex is not valid;\n     * if a database access error occurs\n     * or this method is called on a closed result set\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " java.sql.Date getDate(String columnLabel, Calendar cal) throws SQLException",
    "returnType" : "java.sql.Date",
    "comment" : "\n     * Retrieves the value of the designated column in the current row\n     * of this <code>ResultSet</code> object as a <code>java.sql.Date</code> object\n     * in the Java programming language.\n     * This method uses the given calendar to construct an appropriate millisecond\n     * value for the date if the underlying database does not store\n     * timezone information.\n     *\n     * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n     * @param cal the <code>java.util.Calendar</code> object\n     * to use in constructing the date\n     * @return the column value as a <code>java.sql.Date</code> object;\n     * if the value is SQL <code>NULL</code>,\n     * the value returned is <code>null</code> in the Java programming language\n     * @exception SQLException if the columnLabel is not valid;\n     * if a database access error occurs\n     * or this method is called on a closed result set\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " java.sql.Time getTime(int columnIndex, Calendar cal) throws SQLException",
    "returnType" : "java.sql.Time",
    "comment" : "\n     * Retrieves the value of the designated column in the current row\n     * of this <code>ResultSet</code> object as a <code>java.sql.Time</code> object\n     * in the Java programming language.\n     * This method uses the given calendar to construct an appropriate millisecond\n     * value for the time if the underlying database does not store\n     * timezone information.\n     *\n     * @param columnIndex the first column is 1, the second is 2, ...\n     * @param cal the <code>java.util.Calendar</code> object\n     * to use in constructing the time\n     * @return the column value as a <code>java.sql.Time</code> object;\n     * if the value is SQL <code>NULL</code>,\n     * the value returned is <code>null</code> in the Java programming language\n     * @exception SQLException if the columnIndex is not valid;\n     * if a database access error occurs\n     * or this method is called on a closed result set\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " java.sql.Time getTime(String columnLabel, Calendar cal) throws SQLException",
    "returnType" : "java.sql.Time",
    "comment" : "\n     * Retrieves the value of the designated column in the current row\n     * of this <code>ResultSet</code> object as a <code>java.sql.Time</code> object\n     * in the Java programming language.\n     * This method uses the given calendar to construct an appropriate millisecond\n     * value for the time if the underlying database does not store\n     * timezone information.\n     *\n     * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n     * @param cal the <code>java.util.Calendar</code> object\n     * to use in constructing the time\n     * @return the column value as a <code>java.sql.Time</code> object;\n     * if the value is SQL <code>NULL</code>,\n     * the value returned is <code>null</code> in the Java programming language\n     * @exception SQLException if the columnLabel is not valid;\n     * if a database access error occurs\n     * or this method is called on a closed result set\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " java.sql.Timestamp getTimestamp(int columnIndex, Calendar cal) throws SQLException",
    "returnType" : "java.sql.Timestamp",
    "comment" : "\n     * Retrieves the value of the designated column in the current row\n     * of this <code>ResultSet</code> object as a <code>java.sql.Timestamp</code> object\n     * in the Java programming language.\n     * This method uses the given calendar to construct an appropriate millisecond\n     * value for the timestamp if the underlying database does not store\n     * timezone information.\n     *\n     * @param columnIndex the first column is 1, the second is 2, ...\n     * @param cal the <code>java.util.Calendar</code> object\n     * to use in constructing the timestamp\n     * @return the column value as a <code>java.sql.Timestamp</code> object;\n     * if the value is SQL <code>NULL</code>,\n     * the value returned is <code>null</code> in the Java programming language\n     * @exception SQLException if the columnIndex is not valid;\n     * if a database access error occurs\n     * or this method is called on a closed result set\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " java.sql.Timestamp getTimestamp(String columnLabel, Calendar cal) throws SQLException",
    "returnType" : "java.sql.Timestamp",
    "comment" : "\n     * Retrieves the value of the designated column in the current row\n     * of this <code>ResultSet</code> object as a <code>java.sql.Timestamp</code> object\n     * in the Java programming language.\n     * This method uses the given calendar to construct an appropriate millisecond\n     * value for the timestamp if the underlying database does not store\n     * timezone information.\n     *\n     * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n     * @param cal the <code>java.util.Calendar</code> object\n     * to use in constructing the date\n     * @return the column value as a <code>java.sql.Timestamp</code> object;\n     * if the value is SQL <code>NULL</code>,\n     * the value returned is <code>null</code> in the Java programming language\n     * @exception SQLException if the columnLabel is not valid or\n     * if a database access error occurs\n     * or this method is called on a closed result set\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " java.net.URL getURL(int columnIndex) throws SQLException",
    "returnType" : "java.net.URL",
    "comment" : "\n     * Retrieves the value of the designated column in the current row\n     * of this <code>ResultSet</code> object as a <code>java.net.URL</code>\n     * object in the Java programming language.\n     *\n     * @param columnIndex the index of the column 1 is the first, 2 is the second,...\n     * @return the column value as a <code>java.net.URL</code> object;\n     * if the value is SQL <code>NULL</code>,\n     * the value returned is <code>null</code> in the Java programming language\n     * @exception SQLException if the columnIndex is not valid;\n     * if a database access error occurs; this method\n     * is called on a closed result set or if a URL is malformed\n      * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " java.net.URL getURL(String columnLabel) throws SQLException",
    "returnType" : "java.net.URL",
    "comment" : "\n     * Retrieves the value of the designated column in the current row\n     * of this <code>ResultSet</code> object as a <code>java.net.URL</code>\n     * object in the Java programming language.\n     *\n     * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n     * @return the column value as a <code>java.net.URL</code> object;\n     * if the value is SQL <code>NULL</code>,\n     * the value returned is <code>null</code> in the Java programming language\n     * @exception SQLException if the columnLabel is not valid;\n     * if a database access error occurs; this method\n     * is called on a closed result set or if a URL is malformed\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateRef(int columnIndex, java.sql.Ref x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column with a <code>java.sql.Ref</code> value.\n     * The updater methods are used to update column values in the\n     * current row or the insert row.  The updater methods do not\n     * update the underlying database; instead the <code>updateRow</code> or\n     * <code>insertRow</code> methods are called to update the database.\n     *\n     * @param columnIndex the first column is 1, the second is 2, ...\n     * @param x the new column value\n     * @exception SQLException if the columnIndex is not valid;\n     * if a database access error occurs;\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateRef(String columnLabel, java.sql.Ref x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column with a <code>java.sql.Ref</code> value.\n     * The updater methods are used to update column values in the\n     * current row or the insert row.  The updater methods do not\n     * update the underlying database; instead the <code>updateRow</code> or\n     * <code>insertRow</code> methods are called to update the database.\n     *\n     * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n     * @param x the new column value\n     * @exception SQLException if the columnLabel is not valid;\n     * if a database access error occurs;\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateBlob(int columnIndex, java.sql.Blob x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column with a <code>java.sql.Blob</code> value.\n     * The updater methods are used to update column values in the\n     * current row or the insert row.  The updater methods do not\n     * update the underlying database; instead the <code>updateRow</code> or\n     * <code>insertRow</code> methods are called to update the database.\n     *\n     * @param columnIndex the first column is 1, the second is 2, ...\n     * @param x the new column value\n     * @exception SQLException if the columnIndex is not valid;\n     * if a database access error occurs;\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateBlob(String columnLabel, java.sql.Blob x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column with a <code>java.sql.Blob</code> value.\n     * The updater methods are used to update column values in the\n     * current row or the insert row.  The updater methods do not\n     * update the underlying database; instead the <code>updateRow</code> or\n     * <code>insertRow</code> methods are called to update the database.\n     *\n     * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n     * @param x the new column value\n     * @exception SQLException if the columnLabel is not valid;\n     * if a database access error occurs;\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateClob(int columnIndex, java.sql.Clob x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column with a <code>java.sql.Clob</code> value.\n     * The updater methods are used to update column values in the\n     * current row or the insert row.  The updater methods do not\n     * update the underlying database; instead the <code>updateRow</code> or\n     * <code>insertRow</code> methods are called to update the database.\n     *\n     * @param columnIndex the first column is 1, the second is 2, ...\n     * @param x the new column value\n     * @exception SQLException if the columnIndex is not valid;\n     * if a database access error occurs;\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateClob(String columnLabel, java.sql.Clob x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column with a <code>java.sql.Clob</code> value.\n     * The updater methods are used to update column values in the\n     * current row or the insert row.  The updater methods do not\n     * update the underlying database; instead the <code>updateRow</code> or\n     * <code>insertRow</code> methods are called to update the database.\n     *\n     * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n     * @param x the new column value\n     * @exception SQLException if the columnLabel is not valid;\n     * if a database access error occurs;\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateArray(int columnIndex, java.sql.Array x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column with a <code>java.sql.Array</code> value.\n     * The updater methods are used to update column values in the\n     * current row or the insert row.  The updater methods do not\n     * update the underlying database; instead the <code>updateRow</code> or\n     * <code>insertRow</code> methods are called to update the database.\n     *\n     * @param columnIndex the first column is 1, the second is 2, ...\n     * @param x the new column value\n     * @exception SQLException if the columnIndex is not valid;\n     * if a database access error occurs;\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateArray(String columnLabel, java.sql.Array x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column with a <code>java.sql.Array</code> value.\n     * The updater methods are used to update column values in the\n     * current row or the insert row.  The updater methods do not\n     * update the underlying database; instead the <code>updateRow</code> or\n     * <code>insertRow</code> methods are called to update the database.\n     *\n     * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n     * @param x the new column value\n     * @exception SQLException if the columnLabel is not valid;\n     * if a database access error occurs;\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " RowId getRowId(int columnIndex) throws SQLException",
    "returnType" : "RowId",
    "comment" : "\n     * Retrieves the value of the designated column in the current row of this\n     * <code>ResultSet</code> object as a <code>java.sql.RowId</code> object in the Java\n     * programming language.\n     *\n     * @param columnIndex the first column is 1, the second 2, ...\n     * @return the column value; if the value is a SQL <code>NULL</code> the\n     *     value returned is <code>null</code>\n     * @throws SQLException if the columnIndex is not valid;\n     * if a database access error occurs\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " RowId getRowId(String columnLabel) throws SQLException",
    "returnType" : "RowId",
    "comment" : "\n     * Retrieves the value of the designated column in the current row of this\n     * <code>ResultSet</code> object as a <code>java.sql.RowId</code> object in the Java\n     * programming language.\n     *\n     * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n     * @return the column value ; if the value is a SQL <code>NULL</code> the\n     *     value returned is <code>null</code>\n     * @throws SQLException if the columnLabel is not valid;\n     * if a database access error occurs\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateRowId(int columnIndex, RowId x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column with a <code>RowId</code> value. The updater\n     * methods are used to update column values in the current row or the insert\n     * row. The updater methods do not update the underlying database; instead\n     * the <code>updateRow</code> or <code>insertRow</code> methods are called\n     * to update the database.\n     *\n     * @param columnIndex the first column is 1, the second 2, ...\n     * @param x the column value\n     * @exception SQLException if the columnIndex is not valid;\n     * if a database access error occurs;\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateRowId(String columnLabel, RowId x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column with a <code>RowId</code> value. The updater\n     * methods are used to update column values in the current row or the insert\n     * row. The updater methods do not update the underlying database; instead\n     * the <code>updateRow</code> or <code>insertRow</code> methods are called\n     * to update the database.\n     *\n     * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n     * @param x the column value\n     * @exception SQLException if the columnLabel is not valid;\n     * if a database access error occurs;\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " int getHoldability() throws SQLException",
    "returnType" : "int",
    "comment" : "\n     * Retrieves the holdability of this <code>ResultSet</code> object\n     * @return  either <code>ResultSet.HOLD_CURSORS_OVER_COMMIT</code> or <code>ResultSet.CLOSE_CURSORS_AT_COMMIT</code>\n     * @throws SQLException if a database access error occurs\n     * or this method is called on a closed result set\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean isClosed() throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves whether this <code>ResultSet</code> object has been closed. A <code>ResultSet</code> is closed if the\n     * method close has been called on it, or if it is automatically closed.\n     *\n     * @return true if this <code>ResultSet</code> object is closed; false if it is still open\n     * @throws SQLException if a database access error occurs\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateNString(int columnIndex, String nString) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column with a <code>String</code> value.\n     * It is intended for use when updating <code>NCHAR</code>,<code>NVARCHAR</code>\n     * and <code>LONGNVARCHAR</code> columns.\n     * The updater methods are used to update column values in the\n     * current row or the insert row.  The updater methods do not\n     * update the underlying database; instead the <code>updateRow</code> or\n     * <code>insertRow</code> methods are called to update the database.\n     *\n     * @param columnIndex the first column is 1, the second 2, ...\n     * @param nString the value for the column to be updated\n     * @throws SQLException if the columnIndex is not valid;\n     * if the driver does not support national\n     *         character sets;  if the driver can detect that a data conversion\n     *  error could occur; this method is called on a closed result set;\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>\n     * or if a database access error occurs\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateNString(String columnLabel, String nString) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column with a <code>String</code> value.\n     * It is intended for use when updating <code>NCHAR</code>,<code>NVARCHAR</code>\n     * and <code>LONGNVARCHAR</code> columns.\n     * The updater methods are used to update column values in the\n     * current row or the insert row.  The updater methods do not\n     * update the underlying database; instead the <code>updateRow</code> or\n     * <code>insertRow</code> methods are called to update the database.\n     *\n     * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n     * @param nString the value for the column to be updated\n     * @throws SQLException if the columnLabel is not valid;\n     * if the driver does not support national\n     *         character sets;  if the driver can detect that a data conversion\n     *  error could occur; this method is called on a closed result set;\n     * the result set concurrency is <CODE>CONCUR_READ_ONLY</code>\n     *  or if a database access error occurs\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateNClob(int columnIndex, NClob nClob) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column with a <code>java.sql.NClob</code> value.\n     * The updater methods are used to update column values in the\n     * current row or the insert row.  The updater methods do not\n     * update the underlying database; instead the <code>updateRow</code> or\n     * <code>insertRow</code> methods are called to update the database.\n     *\n     * @param columnIndex the first column is 1, the second 2, ...\n     * @param nClob the value for the column to be updated\n     * @throws SQLException if the columnIndex is not valid;\n     * if the driver does not support national\n     *         character sets;  if the driver can detect that a data conversion\n     *  error could occur; this method is called on a closed result set;\n     * if a database access error occurs or\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateNClob(String columnLabel, NClob nClob) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column with a <code>java.sql.NClob</code> value.\n     * The updater methods are used to update column values in the\n     * current row or the insert row.  The updater methods do not\n     * update the underlying database; instead the <code>updateRow</code> or\n     * <code>insertRow</code> methods are called to update the database.\n     *\n     * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n     * @param nClob the value for the column to be updated\n     * @throws SQLException if the columnLabel is not valid;\n     * if the driver does not support national\n     *         character sets;  if the driver can detect that a data conversion\n     *  error could occur; this method is called on a closed result set;\n     *  if a database access error occurs or\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " NClob getNClob(int columnIndex) throws SQLException",
    "returnType" : "NClob",
    "comment" : "\n     * Retrieves the value of the designated column in the current row\n     * of this <code>ResultSet</code> object as a <code>NClob</code> object\n     * in the Java programming language.\n     *\n     * @param columnIndex the first column is 1, the second is 2, ...\n     * @return a <code>NClob</code> object representing the SQL\n     *         <code>NCLOB</code> value in the specified column\n     * @exception SQLException if the columnIndex is not valid;\n     * if the driver does not support national\n     *         character sets;  if the driver can detect that a data conversion\n     *  error could occur; this method is called on a closed result set\n     * or if a database access error occurs\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " NClob getNClob(String columnLabel) throws SQLException",
    "returnType" : "NClob",
    "comment" : "\n     * Retrieves the value of the designated column in the current row\n     * of this <code>ResultSet</code> object as a <code>NClob</code> object\n     * in the Java programming language.\n     *\n     * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n     * @return a <code>NClob</code> object representing the SQL <code>NCLOB</code>\n     * value in the specified column\n     * @exception SQLException if the columnLabel is not valid;\n   * if the driver does not support national\n     *         character sets;  if the driver can detect that a data conversion\n     *  error could occur; this method is called on a closed result set\n     * or if a database access error occurs\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " SQLXML getSQLXML(int columnIndex) throws SQLException",
    "returnType" : "SQLXML",
    "comment" : "\n     * Retrieves the value of the designated column in  the current row of\n     *  this <code>ResultSet</code> as a\n     * <code>java.sql.SQLXML</code> object in the Java programming language.\n     * @param columnIndex the first column is 1, the second is 2, ...\n     * @return a <code>SQLXML</code> object that maps an <code>SQL XML</code> value\n     * @throws SQLException if the columnIndex is not valid;\n     * if a database access error occurs\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " SQLXML getSQLXML(String columnLabel) throws SQLException",
    "returnType" : "SQLXML",
    "comment" : "\n     * Retrieves the value of the designated column in  the current row of\n     *  this <code>ResultSet</code> as a\n     * <code>java.sql.SQLXML</code> object in the Java programming language.\n     * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n     * @return a <code>SQLXML</code> object that maps an <code>SQL XML</code> value\n     * @throws SQLException if the columnLabel is not valid;\n     * if a database access error occurs\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateSQLXML(int columnIndex, SQLXML xmlObject) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column with a <code>java.sql.SQLXML</code> value.\n     * The updater\n     * methods are used to update column values in the current row or the insert\n     * row. The updater methods do not update the underlying database; instead\n     * the <code>updateRow</code> or <code>insertRow</code> methods are called\n     * to update the database.\n     * <p>\n     *\n     * @param columnIndex the first column is 1, the second 2, ...\n     * @param xmlObject the value for the column to be updated\n     * @throws SQLException if the columnIndex is not valid;\n     * if a database access error occurs; this method\n     *  is called on a closed result set;\n     * the <code>java.xml.transform.Result</code>,\n     *  <code>Writer</code> or <code>OutputStream</code> has not been closed\n     * for the <code>SQLXML</code> object;\n     *  if there is an error processing the XML value or\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>.  The <code>getCause</code> method\n     *  of the exception may provide a more detailed exception, for example, if the\n     *  stream does not contain valid XML.\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateSQLXML(String columnLabel, SQLXML xmlObject) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column with a <code>java.sql.SQLXML</code> value.\n     * The updater\n     * methods are used to update column values in the current row or the insert\n     * row. The updater methods do not update the underlying database; instead\n     * the <code>updateRow</code> or <code>insertRow</code> methods are called\n     * to update the database.\n     * <p>\n     *\n     * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n     * @param xmlObject the column value\n     * @throws SQLException if the columnLabel is not valid;\n     * if a database access error occurs; this method\n     *  is called on a closed result set;\n     * the <code>java.xml.transform.Result</code>,\n     *  <code>Writer</code> or <code>OutputStream</code> has not been closed\n     * for the <code>SQLXML</code> object;\n     *  if there is an error processing the XML value or\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>.  The <code>getCause</code> method\n     *  of the exception may provide a more detailed exception, for example, if the\n     *  stream does not contain valid XML.\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " String getNString(int columnIndex) throws SQLException",
    "returnType" : "String",
    "comment" : "\n     * Retrieves the value of the designated column in the current row\n     * of this <code>ResultSet</code> object as\n     * a <code>String</code> in the Java programming language.\n     * It is intended for use when\n     * accessing  <code>NCHAR</code>,<code>NVARCHAR</code>\n     * and <code>LONGNVARCHAR</code> columns.\n     *\n     * @param columnIndex the first column is 1, the second is 2, ...\n     * @return the column value; if the value is SQL <code>NULL</code>, the\n     * value returned is <code>null</code>\n     * @exception SQLException if the columnIndex is not valid;\n     * if a database access error occurs\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " String getNString(String columnLabel) throws SQLException",
    "returnType" : "String",
    "comment" : "\n     * Retrieves the value of the designated column in the current row\n     * of this <code>ResultSet</code> object as\n     * a <code>String</code> in the Java programming language.\n     * It is intended for use when\n     * accessing  <code>NCHAR</code>,<code>NVARCHAR</code>\n     * and <code>LONGNVARCHAR</code> columns.\n     *\n     * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n     * @return the column value; if the value is SQL <code>NULL</code>, the\n     * value returned is <code>null</code>\n     * @exception SQLException if the columnLabel is not valid;\n     * if a database access error occurs\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " java.io.Reader getNCharacterStream(int columnIndex) throws SQLException",
    "returnType" : "java.io.Reader",
    "comment" : "\n     * Retrieves the value of the designated column in the current row\n     * of this <code>ResultSet</code> object as a\n     * <code>java.io.Reader</code> object.\n     * It is intended for use when\n     * accessing  <code>NCHAR</code>,<code>NVARCHAR</code>\n     * and <code>LONGNVARCHAR</code> columns.\n     *\n     * @return a <code>java.io.Reader</code> object that contains the column\n     * value; if the value is SQL <code>NULL</code>, the value returned is\n     * <code>null</code> in the Java programming language.\n     * @param columnIndex the first column is 1, the second is 2, ...\n     * @exception SQLException if the columnIndex is not valid;\n     * if a database access error occurs\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " java.io.Reader getNCharacterStream(String columnLabel) throws SQLException",
    "returnType" : "java.io.Reader",
    "comment" : "\n     * Retrieves the value of the designated column in the current row\n     * of this <code>ResultSet</code> object as a\n     * <code>java.io.Reader</code> object.\n     * It is intended for use when\n     * accessing  <code>NCHAR</code>,<code>NVARCHAR</code>\n     * and <code>LONGNVARCHAR</code> columns.\n     *\n     * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n     * @return a <code>java.io.Reader</code> object that contains the column\n     * value; if the value is SQL <code>NULL</code>, the value returned is\n     * <code>null</code> in the Java programming language\n     * @exception SQLException if the columnLabel is not valid;\n     * if a database access error occurs\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateNCharacterStream(int columnIndex, java.io.Reader x, long length) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column with a character stream value, which will have\n     * the specified number of bytes.   The\n     * driver does the necessary conversion from Java character format to\n     * the national character set in the database.\n     * It is intended for use when\n     * updating  <code>NCHAR</code>,<code>NVARCHAR</code>\n     * and <code>LONGNVARCHAR</code> columns.\n     * <p>\n     * The updater methods are used to update column values in the\n     * current row or the insert row.  The updater methods do not\n     * update the underlying database; instead the <code>updateRow</code> or\n     * <code>insertRow</code> methods are called to update the database.\n     *\n     * @param columnIndex the first column is 1, the second is 2, ...\n     * @param x the new column value\n     * @param length the length of the stream\n     * @exception SQLException if the columnIndex is not valid;\n     * if a database access error occurs;\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateNCharacterStream(String columnLabel, java.io.Reader reader, long length) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column with a character stream value, which will have\n     * the specified number of bytes.  The\n     * driver does the necessary conversion from Java character format to\n     * the national character set in the database.\n     * It is intended for use when\n     * updating  <code>NCHAR</code>,<code>NVARCHAR</code>\n     * and <code>LONGNVARCHAR</code> columns.\n     * <p>\n     * The updater methods are used to update column values in the\n     * current row or the insert row.  The updater methods do not\n     * update the underlying database; instead the <code>updateRow</code> or\n     * <code>insertRow</code> methods are called to update the database.\n     *\n     * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n     * @param reader the <code>java.io.Reader</code> object containing\n     *        the new column value\n     * @param length the length of the stream\n     * @exception SQLException if the columnLabel is not valid;\n     * if a database access error occurs;\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set\n      * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateAsciiStream(int columnIndex, java.io.InputStream x, long length) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column with an ascii stream value, which will have\n     * the specified number of bytes.\n     * <p>\n     * The updater methods are used to update column values in the\n     * current row or the insert row.  The updater methods do not\n     * update the underlying database; instead the <code>updateRow</code> or\n     * <code>insertRow</code> methods are called to update the database.\n     *\n     * @param columnIndex the first column is 1, the second is 2, ...\n     * @param x the new column value\n     * @param length the length of the stream\n     * @exception SQLException if the columnIndex is not valid;\n     * if a database access error occurs;\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateBinaryStream(int columnIndex, java.io.InputStream x, long length) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column with a binary stream value, which will have\n     * the specified number of bytes.\n     * <p>\n     * The updater methods are used to update column values in the\n     * current row or the insert row.  The updater methods do not\n     * update the underlying database; instead the <code>updateRow</code> or\n     * <code>insertRow</code> methods are called to update the database.\n     *\n     * @param columnIndex the first column is 1, the second is 2, ...\n     * @param x the new column value\n     * @param length the length of the stream\n     * @exception SQLException if the columnIndex is not valid;\n     * if a database access error occurs;\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateCharacterStream(int columnIndex, java.io.Reader x, long length) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column with a character stream value, which will have\n     * the specified number of bytes.\n     * <p>\n     * The updater methods are used to update column values in the\n     * current row or the insert row.  The updater methods do not\n     * update the underlying database; instead the <code>updateRow</code> or\n     * <code>insertRow</code> methods are called to update the database.\n     *\n     * @param columnIndex the first column is 1, the second is 2, ...\n     * @param x the new column value\n     * @param length the length of the stream\n     * @exception SQLException if the columnIndex is not valid;\n     * if a database access error occurs;\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateAsciiStream(String columnLabel, java.io.InputStream x, long length) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column with an ascii stream value, which will have\n     * the specified number of bytes.\n     * <p>\n     * The updater methods are used to update column values in the\n     * current row or the insert row.  The updater methods do not\n     * update the underlying database; instead the <code>updateRow</code> or\n     * <code>insertRow</code> methods are called to update the database.\n     *\n     * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n     * @param x the new column value\n     * @param length the length of the stream\n     * @exception SQLException if the columnLabel is not valid;\n     * if a database access error occurs;\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateBinaryStream(String columnLabel, java.io.InputStream x, long length) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column with a binary stream value, which will have\n     * the specified number of bytes.\n     * <p>\n     * The updater methods are used to update column values in the\n     * current row or the insert row.  The updater methods do not\n     * update the underlying database; instead the <code>updateRow</code> or\n     * <code>insertRow</code> methods are called to update the database.\n     *\n     * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n     * @param x the new column value\n     * @param length the length of the stream\n     * @exception SQLException if the columnLabel is not valid;\n     * if a database access error occurs;\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateCharacterStream(String columnLabel, java.io.Reader reader, long length) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column with a character stream value, which will have\n     * the specified number of bytes.\n     * <p>\n     * The updater methods are used to update column values in the\n     * current row or the insert row.  The updater methods do not\n     * update the underlying database; instead the <code>updateRow</code> or\n     * <code>insertRow</code> methods are called to update the database.\n     *\n     * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n     * @param reader the <code>java.io.Reader</code> object containing\n     *        the new column value\n     * @param length the length of the stream\n     * @exception SQLException if the columnLabel is not valid;\n     * if a database access error occurs;\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateBlob(int columnIndex, InputStream inputStream, long length) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column using the given input stream, which\n     * will have the specified number of bytes.\n     *\n     * <p>\n     * The updater methods are used to update column values in the\n     * current row or the insert row.  The updater methods do not\n     * update the underlying database; instead the <code>updateRow</code> or\n     * <code>insertRow</code> methods are called to update the database.\n     *\n     * @param columnIndex the first column is 1, the second is 2, ...\n     * @param inputStream An object that contains the data to set the parameter\n     * value to.\n     * @param length the number of bytes in the parameter data.\n     * @exception SQLException if the columnIndex is not valid;\n     * if a database access error occurs;\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateBlob(String columnLabel, InputStream inputStream, long length) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column using the given input stream, which\n     * will have the specified number of bytes.\n     *\n     * <p>\n     * The updater methods are used to update column values in the\n     * current row or the insert row.  The updater methods do not\n     * update the underlying database; instead the <code>updateRow</code> or\n     * <code>insertRow</code> methods are called to update the database.\n     *\n     * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n     * @param inputStream An object that contains the data to set the parameter\n     * value to.\n     * @param length the number of bytes in the parameter data.\n     * @exception SQLException if the columnLabel is not valid;\n     * if a database access error occurs;\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateClob(int columnIndex, Reader reader, long length) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column using the given <code>Reader</code>\n     * object, which is the given number of characters long.\n     * When a very large UNICODE value is input to a <code>LONGVARCHAR</code>\n     * parameter, it may be more practical to send it via a\n     * <code>java.io.Reader</code> object. The JDBC driver will\n     * do any necessary conversion from UNICODE to the database char format.\n     *\n     * <p>\n     * The updater methods are used to update column values in the\n     * current row or the insert row.  The updater methods do not\n     * update the underlying database; instead the <code>updateRow</code> or\n     * <code>insertRow</code> methods are called to update the database.\n     *\n     * @param columnIndex the first column is 1, the second is 2, ...\n     * @param reader An object that contains the data to set the parameter value to.\n     * @param length the number of characters in the parameter data.\n     * @exception SQLException if the columnIndex is not valid;\n     * if a database access error occurs;\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateClob(String columnLabel, Reader reader, long length) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column using the given <code>Reader</code>\n     * object, which is the given number of characters long.\n     * When a very large UNICODE value is input to a <code>LONGVARCHAR</code>\n     * parameter, it may be more practical to send it via a\n     * <code>java.io.Reader</code> object.  The JDBC driver will\n     * do any necessary conversion from UNICODE to the database char format.\n     *\n     * <p>\n     * The updater methods are used to update column values in the\n     * current row or the insert row.  The updater methods do not\n     * update the underlying database; instead the <code>updateRow</code> or\n     * <code>insertRow</code> methods are called to update the database.\n     *\n     * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n     * @param reader An object that contains the data to set the parameter value to.\n     * @param length the number of characters in the parameter data.\n     * @exception SQLException if the columnLabel is not valid;\n     * if a database access error occurs;\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateNClob(int columnIndex, Reader reader, long length) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column using the given <code>Reader</code>\n     * object, which is the given number of characters long.\n     * When a very large UNICODE value is input to a <code>LONGVARCHAR</code>\n     * parameter, it may be more practical to send it via a\n     * <code>java.io.Reader</code> object. The JDBC driver will\n     * do any necessary conversion from UNICODE to the database char format.\n     *\n     * <p>\n     * The updater methods are used to update column values in the\n     * current row or the insert row.  The updater methods do not\n     * update the underlying database; instead the <code>updateRow</code> or\n     * <code>insertRow</code> methods are called to update the database.\n     *\n     * @param columnIndex the first column is 1, the second 2, ...\n     * @param reader An object that contains the data to set the parameter value to.\n     * @param length the number of characters in the parameter data.\n     * @throws SQLException if the columnIndex is not valid;\n    * if the driver does not support national\n     *         character sets;  if the driver can detect that a data conversion\n     *  error could occur; this method is called on a closed result set,\n     * if a database access error occurs or\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateNClob(String columnLabel, Reader reader, long length) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column using the given <code>Reader</code>\n     * object, which is the given number of characters long.\n     * When a very large UNICODE value is input to a <code>LONGVARCHAR</code>\n     * parameter, it may be more practical to send it via a\n     * <code>java.io.Reader</code> object. The JDBC driver will\n     * do any necessary conversion from UNICODE to the database char format.\n     *\n     * <p>\n     * The updater methods are used to update column values in the\n     * current row or the insert row.  The updater methods do not\n     * update the underlying database; instead the <code>updateRow</code> or\n     * <code>insertRow</code> methods are called to update the database.\n     *\n     * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n     * @param reader An object that contains the data to set the parameter value to.\n     * @param length the number of characters in the parameter data.\n     * @throws SQLException if the columnLabel is not valid;\n     * if the driver does not support national\n     *         character sets;  if the driver can detect that a data conversion\n     *  error could occur; this method is called on a closed result set;\n     *  if a database access error occurs or\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateNCharacterStream(int columnIndex, java.io.Reader x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column with a character stream value.\n     * The data will be read from the stream\n     * as needed until end-of-stream is reached.  The\n     * driver does the necessary conversion from Java character format to\n     * the national character set in the database.\n     * It is intended for use when\n     * updating  <code>NCHAR</code>,<code>NVARCHAR</code>\n     * and <code>LONGNVARCHAR</code> columns.\n     * <p>\n     * The updater methods are used to update column values in the\n     * current row or the insert row.  The updater methods do not\n     * update the underlying database; instead the <code>updateRow</code> or\n     * <code>insertRow</code> methods are called to update the database.\n     *\n     * <P><B>Note:</B> Consult your JDBC driver documentation to determine if\n     * it might be more efficient to use a version of\n     * <code>updateNCharacterStream</code> which takes a length parameter.\n     *\n     * @param columnIndex the first column is 1, the second is 2, ...\n     * @param x the new column value\n     * @exception SQLException if the columnIndex is not valid;\n     * if a database access error occurs;\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateNCharacterStream(String columnLabel, java.io.Reader reader) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column with a character stream value.\n     * The data will be read from the stream\n     * as needed until end-of-stream is reached.  The\n     * driver does the necessary conversion from Java character format to\n     * the national character set in the database.\n     * It is intended for use when\n     * updating  <code>NCHAR</code>,<code>NVARCHAR</code>\n     * and <code>LONGNVARCHAR</code> columns.\n     * <p>\n     * The updater methods are used to update column values in the\n     * current row or the insert row.  The updater methods do not\n     * update the underlying database; instead the <code>updateRow</code> or\n     * <code>insertRow</code> methods are called to update the database.\n     *\n     * <P><B>Note:</B> Consult your JDBC driver documentation to determine if\n     * it might be more efficient to use a version of\n     * <code>updateNCharacterStream</code> which takes a length parameter.\n     *\n     * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n     * @param reader the <code>java.io.Reader</code> object containing\n     *        the new column value\n     * @exception SQLException if the columnLabel is not valid;\n     * if a database access error occurs;\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set\n      * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateAsciiStream(int columnIndex, java.io.InputStream x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column with an ascii stream value.\n     * The data will be read from the stream\n     * as needed until end-of-stream is reached.\n     * <p>\n     * The updater methods are used to update column values in the\n     * current row or the insert row.  The updater methods do not\n     * update the underlying database; instead the <code>updateRow</code> or\n     * <code>insertRow</code> methods are called to update the database.\n     *\n     * <P><B>Note:</B> Consult your JDBC driver documentation to determine if\n     * it might be more efficient to use a version of\n     * <code>updateAsciiStream</code> which takes a length parameter.\n     *\n     * @param columnIndex the first column is 1, the second is 2, ...\n     * @param x the new column value\n     * @exception SQLException if the columnIndex is not valid;\n     * if a database access error occurs;\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateBinaryStream(int columnIndex, java.io.InputStream x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column with a binary stream value.\n     * The data will be read from the stream\n     * as needed until end-of-stream is reached.\n     * <p>\n     * The updater methods are used to update column values in the\n     * current row or the insert row.  The updater methods do not\n     * update the underlying database; instead the <code>updateRow</code> or\n     * <code>insertRow</code> methods are called to update the database.\n     *\n     * <P><B>Note:</B> Consult your JDBC driver documentation to determine if\n     * it might be more efficient to use a version of\n     * <code>updateBinaryStream</code> which takes a length parameter.\n     *\n     * @param columnIndex the first column is 1, the second is 2, ...\n     * @param x the new column value\n     * @exception SQLException if the columnIndex is not valid;\n     * if a database access error occurs;\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateCharacterStream(int columnIndex, java.io.Reader x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column with a character stream value.\n     * The data will be read from the stream\n     * as needed until end-of-stream is reached.\n     * <p>\n     * The updater methods are used to update column values in the\n     * current row or the insert row.  The updater methods do not\n     * update the underlying database; instead the <code>updateRow</code> or\n     * <code>insertRow</code> methods are called to update the database.\n     *\n     * <P><B>Note:</B> Consult your JDBC driver documentation to determine if\n     * it might be more efficient to use a version of\n     * <code>updateCharacterStream</code> which takes a length parameter.\n     *\n     * @param columnIndex the first column is 1, the second is 2, ...\n     * @param x the new column value\n     * @exception SQLException if the columnIndex is not valid;\n     * if a database access error occurs;\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateAsciiStream(String columnLabel, java.io.InputStream x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column with an ascii stream value.\n     * The data will be read from the stream\n     * as needed until end-of-stream is reached.\n     * <p>\n     * The updater methods are used to update column values in the\n     * current row or the insert row.  The updater methods do not\n     * update the underlying database; instead the <code>updateRow</code> or\n     * <code>insertRow</code> methods are called to update the database.\n     *\n     * <P><B>Note:</B> Consult your JDBC driver documentation to determine if\n     * it might be more efficient to use a version of\n     * <code>updateAsciiStream</code> which takes a length parameter.\n     *\n     * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n     * @param x the new column value\n     * @exception SQLException if the columnLabel is not valid;\n     * if a database access error occurs;\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateBinaryStream(String columnLabel, java.io.InputStream x) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column with a binary stream value.\n     * The data will be read from the stream\n     * as needed until end-of-stream is reached.\n     * <p>\n     * The updater methods are used to update column values in the\n     * current row or the insert row.  The updater methods do not\n     * update the underlying database; instead the <code>updateRow</code> or\n     * <code>insertRow</code> methods are called to update the database.\n     *\n     * <P><B>Note:</B> Consult your JDBC driver documentation to determine if\n     * it might be more efficient to use a version of\n     * <code>updateBinaryStream</code> which takes a length parameter.\n     *\n     * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n     * @param x the new column value\n     * @exception SQLException if the columnLabel is not valid;\n     * if a database access error occurs;\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateCharacterStream(String columnLabel, java.io.Reader reader) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column with a character stream value.\n     * The data will be read from the stream\n     * as needed until end-of-stream is reached.\n     * <p>\n     * The updater methods are used to update column values in the\n     * current row or the insert row.  The updater methods do not\n     * update the underlying database; instead the <code>updateRow</code> or\n     * <code>insertRow</code> methods are called to update the database.\n     *\n     * <P><B>Note:</B> Consult your JDBC driver documentation to determine if\n     * it might be more efficient to use a version of\n     * <code>updateCharacterStream</code> which takes a length parameter.\n     *\n     * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n     * @param reader the <code>java.io.Reader</code> object containing\n     *        the new column value\n     * @exception SQLException if the columnLabel is not valid; if a database access error occurs;\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateBlob(int columnIndex, InputStream inputStream) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column using the given input stream. The data will be read from the stream\n     * as needed until end-of-stream is reached.\n     * <p>\n     * The updater methods are used to update column values in the\n     * current row or the insert row.  The updater methods do not\n     * update the underlying database; instead the <code>updateRow</code> or\n     * <code>insertRow</code> methods are called to update the database.\n     *\n     * <P><B>Note:</B> Consult your JDBC driver documentation to determine if\n     * it might be more efficient to use a version of\n     * <code>updateBlob</code> which takes a length parameter.\n     *\n     * @param columnIndex the first column is 1, the second is 2, ...\n     * @param inputStream An object that contains the data to set the parameter\n     * value to.\n     * @exception SQLException if the columnIndex is not valid; if a database access error occurs;\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateBlob(String columnLabel, InputStream inputStream) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column using the given input stream. The data will be read from the stream\n     * as needed until end-of-stream is reached.\n     * <p>\n     * The updater methods are used to update column values in the\n     * current row or the insert row.  The updater methods do not\n     * update the underlying database; instead the <code>updateRow</code> or\n     * <code>insertRow</code> methods are called to update the database.\n     *\n     *   <P><B>Note:</B> Consult your JDBC driver documentation to determine if\n     * it might be more efficient to use a version of\n     * <code>updateBlob</code> which takes a length parameter.\n     *\n     * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n     * @param inputStream An object that contains the data to set the parameter\n     * value to.\n     * @exception SQLException if the columnLabel is not valid; if a database access error occurs;\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateClob(int columnIndex, Reader reader) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column using the given <code>Reader</code>\n     * object.\n     *  The data will be read from the stream\n     * as needed until end-of-stream is reached.  The JDBC driver will\n     * do any necessary conversion from UNICODE to the database char format.\n     *\n     * <p>\n     * The updater methods are used to update column values in the\n     * current row or the insert row.  The updater methods do not\n     * update the underlying database; instead the <code>updateRow</code> or\n     * <code>insertRow</code> methods are called to update the database.\n     *\n     *   <P><B>Note:</B> Consult your JDBC driver documentation to determine if\n     * it might be more efficient to use a version of\n     * <code>updateClob</code> which takes a length parameter.\n     *\n     * @param columnIndex the first column is 1, the second is 2, ...\n     * @param reader An object that contains the data to set the parameter value to.\n     * @exception SQLException if the columnIndex is not valid;\n     * if a database access error occurs;\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateClob(String columnLabel, Reader reader) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column using the given <code>Reader</code>\n     * object.\n     *  The data will be read from the stream\n     * as needed until end-of-stream is reached.  The JDBC driver will\n     * do any necessary conversion from UNICODE to the database char format.\n     *\n     * <p>\n     * The updater methods are used to update column values in the\n     * current row or the insert row.  The updater methods do not\n     * update the underlying database; instead the <code>updateRow</code> or\n     * <code>insertRow</code> methods are called to update the database.\n     *\n     * <P><B>Note:</B> Consult your JDBC driver documentation to determine if\n     * it might be more efficient to use a version of\n     * <code>updateClob</code> which takes a length parameter.\n     *\n     * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n     * @param reader An object that contains the data to set the parameter value to.\n     * @exception SQLException if the columnLabel is not valid; if a database access error occurs;\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>\n     * or this method is called on a closed result set\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateNClob(int columnIndex, Reader reader) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column using the given <code>Reader</code>\n     *\n     * The data will be read from the stream\n     * as needed until end-of-stream is reached.  The JDBC driver will\n     * do any necessary conversion from UNICODE to the database char format.\n     *\n     * <p>\n     * The updater methods are used to update column values in the\n     * current row or the insert row.  The updater methods do not\n     * update the underlying database; instead the <code>updateRow</code> or\n     * <code>insertRow</code> methods are called to update the database.\n     *\n     * <P><B>Note:</B> Consult your JDBC driver documentation to determine if\n     * it might be more efficient to use a version of\n     * <code>updateNClob</code> which takes a length parameter.\n     *\n     * @param columnIndex the first column is 1, the second 2, ...\n     * @param reader An object that contains the data to set the parameter value to.\n     * @throws SQLException if the columnIndex is not valid;\n    * if the driver does not support national\n     *         character sets;  if the driver can detect that a data conversion\n     *  error could occur; this method is called on a closed result set,\n     * if a database access error occurs or\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateNClob(String columnLabel, Reader reader) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Updates the designated column using the given <code>Reader</code>\n     * object.\n     * The data will be read from the stream\n     * as needed until end-of-stream is reached.  The JDBC driver will\n     * do any necessary conversion from UNICODE to the database char format.\n     *\n     * <p>\n     * The updater methods are used to update column values in the\n     * current row or the insert row.  The updater methods do not\n     * update the underlying database; instead the <code>updateRow</code> or\n     * <code>insertRow</code> methods are called to update the database.\n     *\n     * <P><B>Note:</B> Consult your JDBC driver documentation to determine if\n     * it might be more efficient to use a version of\n     * <code>updateNClob</code> which takes a length parameter.\n     *\n     * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column\n     * @param reader An object that contains the data to set the parameter value to.\n     * @throws SQLException if the columnLabel is not valid; if the driver does not support national\n     *         character sets;  if the driver can detect that a data conversion\n     *  error could occur; this method is called on a closed result set;\n     *  if a database access error occurs or\n     * the result set concurrency is <code>CONCUR_READ_ONLY</code>\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.6\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " boolean next() throws SQLException", " void close() throws SQLException", " boolean wasNull() throws SQLException", " String getString(int columnIndex) throws SQLException", " boolean getBoolean(int columnIndex) throws SQLException", " byte getByte(int columnIndex) throws SQLException", " short getShort(int columnIndex) throws SQLException", " int getInt(int columnIndex) throws SQLException", " long getLong(int columnIndex) throws SQLException", " float getFloat(int columnIndex) throws SQLException", " double getDouble(int columnIndex) throws SQLException", " BigDecimal getBigDecimal(int columnIndex, int scale) throws SQLException", " byte[] getBytes(int columnIndex) throws SQLException", " java.sql.Date getDate(int columnIndex) throws SQLException", " java.sql.Time getTime(int columnIndex) throws SQLException", " java.sql.Timestamp getTimestamp(int columnIndex) throws SQLException", " java.io.InputStream getAsciiStream(int columnIndex) throws SQLException", " java.io.InputStream getUnicodeStream(int columnIndex) throws SQLException", " java.io.InputStream getBinaryStream(int columnIndex) throws SQLException", " String getString(String columnLabel) throws SQLException", " boolean getBoolean(String columnLabel) throws SQLException", " byte getByte(String columnLabel) throws SQLException", " short getShort(String columnLabel) throws SQLException", " int getInt(String columnLabel) throws SQLException", " long getLong(String columnLabel) throws SQLException", " float getFloat(String columnLabel) throws SQLException", " double getDouble(String columnLabel) throws SQLException", " BigDecimal getBigDecimal(String columnLabel, int scale) throws SQLException", " byte[] getBytes(String columnLabel) throws SQLException", " java.sql.Date getDate(String columnLabel) throws SQLException", " java.sql.Time getTime(String columnLabel) throws SQLException", " java.sql.Timestamp getTimestamp(String columnLabel) throws SQLException", " java.io.InputStream getAsciiStream(String columnLabel) throws SQLException", " java.io.InputStream getUnicodeStream(String columnLabel) throws SQLException", " java.io.InputStream getBinaryStream(String columnLabel) throws SQLException", " SQLWarning getWarnings() throws SQLException", " void clearWarnings() throws SQLException", " String getCursorName() throws SQLException", " ResultSetMetaData getMetaData() throws SQLException", " Object getObject(int columnIndex) throws SQLException", " Object getObject(String columnLabel) throws SQLException", " int findColumn(String columnLabel) throws SQLException", " java.io.Reader getCharacterStream(int columnIndex) throws SQLException", " java.io.Reader getCharacterStream(String columnLabel) throws SQLException", " BigDecimal getBigDecimal(int columnIndex) throws SQLException", " BigDecimal getBigDecimal(String columnLabel) throws SQLException", " boolean isBeforeFirst() throws SQLException", " boolean isAfterLast() throws SQLException", " boolean isFirst() throws SQLException", " boolean isLast() throws SQLException", " void beforeFirst() throws SQLException", " void afterLast() throws SQLException", " boolean first() throws SQLException", " boolean last() throws SQLException", " int getRow() throws SQLException", " boolean absolute(int row) throws SQLException", " boolean relative(int rows) throws SQLException", " boolean previous() throws SQLException", " void setFetchDirection(int direction) throws SQLException", " int getFetchDirection() throws SQLException", " void setFetchSize(int rows) throws SQLException", " int getFetchSize() throws SQLException", " int getType() throws SQLException", " int getConcurrency() throws SQLException", " boolean rowUpdated() throws SQLException", " boolean rowInserted() throws SQLException", " boolean rowDeleted() throws SQLException", " void updateNull(int columnIndex) throws SQLException", " void updateBoolean(int columnIndex, boolean x) throws SQLException", " void updateByte(int columnIndex, byte x) throws SQLException", " void updateShort(int columnIndex, short x) throws SQLException", " void updateInt(int columnIndex, int x) throws SQLException", " void updateLong(int columnIndex, long x) throws SQLException", " void updateFloat(int columnIndex, float x) throws SQLException", " void updateDouble(int columnIndex, double x) throws SQLException", " void updateBigDecimal(int columnIndex, BigDecimal x) throws SQLException", " void updateString(int columnIndex, String x) throws SQLException", " void updateBytes(int columnIndex, byte[] x) throws SQLException", " void updateDate(int columnIndex, java.sql.Date x) throws SQLException", " void updateTime(int columnIndex, java.sql.Time x) throws SQLException", " void updateTimestamp(int columnIndex, java.sql.Timestamp x) throws SQLException", " void updateAsciiStream(int columnIndex, java.io.InputStream x, int length) throws SQLException", " void updateBinaryStream(int columnIndex, java.io.InputStream x, int length) throws SQLException", " void updateCharacterStream(int columnIndex, java.io.Reader x, int length) throws SQLException", " void updateObject(int columnIndex, Object x, int scaleOrLength) throws SQLException", " void updateObject(int columnIndex, Object x) throws SQLException", " void updateNull(String columnLabel) throws SQLException", " void updateBoolean(String columnLabel, boolean x) throws SQLException", " void updateByte(String columnLabel, byte x) throws SQLException", " void updateShort(String columnLabel, short x) throws SQLException", " void updateInt(String columnLabel, int x) throws SQLException", " void updateLong(String columnLabel, long x) throws SQLException", " void updateFloat(String columnLabel, float x) throws SQLException", " void updateDouble(String columnLabel, double x) throws SQLException", " void updateBigDecimal(String columnLabel, BigDecimal x) throws SQLException", " void updateString(String columnLabel, String x) throws SQLException", " void updateBytes(String columnLabel, byte[] x) throws SQLException", " void updateDate(String columnLabel, java.sql.Date x) throws SQLException", " void updateTime(String columnLabel, java.sql.Time x) throws SQLException", " void updateTimestamp(String columnLabel, java.sql.Timestamp x) throws SQLException", " void updateAsciiStream(String columnLabel, java.io.InputStream x, int length) throws SQLException", " void updateBinaryStream(String columnLabel, java.io.InputStream x, int length) throws SQLException", " void updateCharacterStream(String columnLabel, java.io.Reader reader, int length) throws SQLException", " void updateObject(String columnLabel, Object x, int scaleOrLength) throws SQLException", " void updateObject(String columnLabel, Object x) throws SQLException", " void insertRow() throws SQLException", " void updateRow() throws SQLException", " void deleteRow() throws SQLException", " void refreshRow() throws SQLException", " void cancelRowUpdates() throws SQLException", " void moveToInsertRow() throws SQLException", " void moveToCurrentRow() throws SQLException", " Statement getStatement() throws SQLException", " Object getObject(int columnIndex, java.util.Map<String, Class<?>> map) throws SQLException", " Ref getRef(int columnIndex) throws SQLException", " Blob getBlob(int columnIndex) throws SQLException", " Clob getClob(int columnIndex) throws SQLException", " Array getArray(int columnIndex) throws SQLException", " Object getObject(String columnLabel, java.util.Map<String, Class<?>> map) throws SQLException", " Ref getRef(String columnLabel) throws SQLException", " Blob getBlob(String columnLabel) throws SQLException", " Clob getClob(String columnLabel) throws SQLException", " Array getArray(String columnLabel) throws SQLException", " java.sql.Date getDate(int columnIndex, Calendar cal) throws SQLException", " java.sql.Date getDate(String columnLabel, Calendar cal) throws SQLException", " java.sql.Time getTime(int columnIndex, Calendar cal) throws SQLException", " java.sql.Time getTime(String columnLabel, Calendar cal) throws SQLException", " java.sql.Timestamp getTimestamp(int columnIndex, Calendar cal) throws SQLException", " java.sql.Timestamp getTimestamp(String columnLabel, Calendar cal) throws SQLException", " java.net.URL getURL(int columnIndex) throws SQLException", " java.net.URL getURL(String columnLabel) throws SQLException", " void updateRef(int columnIndex, java.sql.Ref x) throws SQLException", " void updateRef(String columnLabel, java.sql.Ref x) throws SQLException", " void updateBlob(int columnIndex, java.sql.Blob x) throws SQLException", " void updateBlob(String columnLabel, java.sql.Blob x) throws SQLException", " void updateClob(int columnIndex, java.sql.Clob x) throws SQLException", " void updateClob(String columnLabel, java.sql.Clob x) throws SQLException", " void updateArray(int columnIndex, java.sql.Array x) throws SQLException", " void updateArray(String columnLabel, java.sql.Array x) throws SQLException", " RowId getRowId(int columnIndex) throws SQLException", " RowId getRowId(String columnLabel) throws SQLException", " void updateRowId(int columnIndex, RowId x) throws SQLException", " void updateRowId(String columnLabel, RowId x) throws SQLException", " int getHoldability() throws SQLException", " boolean isClosed() throws SQLException", " void updateNString(int columnIndex, String nString) throws SQLException", " void updateNString(String columnLabel, String nString) throws SQLException", " void updateNClob(int columnIndex, NClob nClob) throws SQLException", " void updateNClob(String columnLabel, NClob nClob) throws SQLException", " NClob getNClob(int columnIndex) throws SQLException", " NClob getNClob(String columnLabel) throws SQLException", " SQLXML getSQLXML(int columnIndex) throws SQLException", " SQLXML getSQLXML(String columnLabel) throws SQLException", " void updateSQLXML(int columnIndex, SQLXML xmlObject) throws SQLException", " void updateSQLXML(String columnLabel, SQLXML xmlObject) throws SQLException", " String getNString(int columnIndex) throws SQLException", " String getNString(String columnLabel) throws SQLException", " java.io.Reader getNCharacterStream(int columnIndex) throws SQLException", " java.io.Reader getNCharacterStream(String columnLabel) throws SQLException", " void updateNCharacterStream(int columnIndex, java.io.Reader x, long length) throws SQLException", " void updateNCharacterStream(String columnLabel, java.io.Reader reader, long length) throws SQLException", " void updateAsciiStream(int columnIndex, java.io.InputStream x, long length) throws SQLException", " void updateBinaryStream(int columnIndex, java.io.InputStream x, long length) throws SQLException", " void updateCharacterStream(int columnIndex, java.io.Reader x, long length) throws SQLException", " void updateAsciiStream(String columnLabel, java.io.InputStream x, long length) throws SQLException", " void updateBinaryStream(String columnLabel, java.io.InputStream x, long length) throws SQLException", " void updateCharacterStream(String columnLabel, java.io.Reader reader, long length) throws SQLException", " void updateBlob(int columnIndex, InputStream inputStream, long length) throws SQLException", " void updateBlob(String columnLabel, InputStream inputStream, long length) throws SQLException", " void updateClob(int columnIndex, Reader reader, long length) throws SQLException", " void updateClob(String columnLabel, Reader reader, long length) throws SQLException", " void updateNClob(int columnIndex, Reader reader, long length) throws SQLException", " void updateNClob(String columnLabel, Reader reader, long length) throws SQLException", " void updateNCharacterStream(int columnIndex, java.io.Reader x) throws SQLException", " void updateNCharacterStream(String columnLabel, java.io.Reader reader) throws SQLException", " void updateAsciiStream(int columnIndex, java.io.InputStream x) throws SQLException", " void updateBinaryStream(int columnIndex, java.io.InputStream x) throws SQLException", " void updateCharacterStream(int columnIndex, java.io.Reader x) throws SQLException", " void updateAsciiStream(String columnLabel, java.io.InputStream x) throws SQLException", " void updateBinaryStream(String columnLabel, java.io.InputStream x) throws SQLException", " void updateCharacterStream(String columnLabel, java.io.Reader reader) throws SQLException", " void updateBlob(int columnIndex, InputStream inputStream) throws SQLException", " void updateBlob(String columnLabel, InputStream inputStream) throws SQLException", " void updateClob(int columnIndex, Reader reader) throws SQLException", " void updateClob(String columnLabel, Reader reader) throws SQLException", " void updateNClob(int columnIndex, Reader reader) throws SQLException", " void updateNClob(String columnLabel, Reader reader) throws SQLException" ],
  "variableNames" : [ "FETCH_FORWARD", "FETCH_REVERSE", "FETCH_UNKNOWN", "TYPE_FORWARD_ONLY", "TYPE_SCROLL_INSENSITIVE", "TYPE_SCROLL_SENSITIVE", "CONCUR_READ_ONLY", "CONCUR_UPDATABLE", "HOLD_CURSORS_OVER_COMMIT", "CLOSE_CURSORS_AT_COMMIT" ]
}