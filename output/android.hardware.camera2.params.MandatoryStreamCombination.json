{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/camera2/params/MandatoryStreamCombination.java",
  "packageName" : "android.hardware.camera2.params",
  "className" : "MandatoryStreamCombination",
  "comment" : "\n * Immutable class to store the available mandatory stream combination.\n *\n * <p>A mandatory stream combination refers to a specific entry in the documented sets of\n * required stream {@link CameraDevice#createCaptureSession combinations}.\n * These combinations of streams are required to be supported by the camera device.\n *\n * <p>The list of stream combinations is available by invoking\n * {@link CameraCharacteristics#get} and passing key\n * {@link android.hardware.camera2.CameraCharacteristics#SCALER_MANDATORY_STREAM_COMBINATIONS}.</p>\n ",
  "links" : [ "android.hardware.camera2.CameraCharacteristics#SCALER_MANDATORY_STREAM_COMBINATIONS", "android.hardware.camera2.CameraCharacteristics#get", "android.hardware.camera2.CameraDevice#createCaptureSession" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDescription",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsReprocessable",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStreamsInformation",
    "type" : "ArrayList<MandatoryStreamInformation>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STREAM_USE_CASE_PREVIEW",
    "type" : "long",
    "comment" : "\n     * Short hand for stream use cases\n     ",
    "links" : [ ]
  }, {
    "name" : "STREAM_USE_CASE_STILL_CAPTURE",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STREAM_USE_CASE_RECORD",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STREAM_USE_CASE_PREVIEW_VIDEO_STILL",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STREAM_USE_CASE_VIDEO_CALL",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STREAM_USE_CASE_CROPPED_RAW",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sLegacyCombinations",
    "type" : "StreamCombinationTemplate[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sLimitedCombinations",
    "type" : "StreamCombinationTemplate[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sBurstCombinations",
    "type" : "StreamCombinationTemplate[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sFullCombinations",
    "type" : "StreamCombinationTemplate[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sRawCombinations",
    "type" : "StreamCombinationTemplate[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sLevel3Combinations",
    "type" : "StreamCombinationTemplate[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sLimitedPrivateReprocCombinations",
    "type" : "StreamCombinationTemplate[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sLimitedYUVReprocCombinations",
    "type" : "StreamCombinationTemplate[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sFullPrivateReprocCombinations",
    "type" : "StreamCombinationTemplate[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sFullYUVReprocCombinations",
    "type" : "StreamCombinationTemplate[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sRAWPrivateReprocCombinations",
    "type" : "StreamCombinationTemplate[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sRAWYUVReprocCombinations",
    "type" : "StreamCombinationTemplate[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sLevel3PrivateReprocCombinations",
    "type" : "StreamCombinationTemplate[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sLevel3YUVReprocCombinations",
    "type" : "StreamCombinationTemplate[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sConcurrentStreamCombinations",
    "type" : "StreamCombinationTemplate[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sConcurrentDepthOnlyStreamCombinations",
    "type" : "StreamCombinationTemplate[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sUltraHighResolutionStreamCombinations",
    "type" : "StreamCombinationTemplate[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sUltraHighResolutionReprocStreamCombinations",
    "type" : "StreamCombinationTemplate[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sUltraHighResolutionYUVReprocStreamCombinations",
    "type" : "StreamCombinationTemplate[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sUltraHighResolutionPRIVReprocStreamCombinations",
    "type" : "StreamCombinationTemplate[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "s10BitOutputStreamCombinations",
    "type" : "StreamCombinationTemplate[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sStreamUseCaseCombinations",
    "type" : "StreamCombinationTemplate[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sCroppedRawStreamUseCaseCombinations",
    "type" : "StreamCombinationTemplate[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sPreviewStabilizedStreamCombinations",
    "type" : "StreamCombinationTemplate[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public CharSequence getDescription()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Get the mandatory stream combination description.\n     *\n     * @return CharSequence with the mandatory combination description.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isReprocessable()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether the mandatory stream combination is reprocessable. Reprocessable is defined\n     * as a stream combination that contains one input stream\n     * ({@link MandatoryStreamInformation#isInput} return true).\n     *\n     * @return {@code true} in case the mandatory stream combination contains an input,\n     *         {@code false} otherwise.\n     ",
    "links" : [ "#isInput" ]
  }, {
    "name" : "public List<MandatoryStreamInformation> getStreamsInformation()",
    "returnType" : "List<MandatoryStreamInformation>",
    "comment" : "\n     * Get information about each stream in the mandatory combination.\n     *\n     * @return Non-modifiable list of stream information.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(final Object obj)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if this {@link MandatoryStreamCombination} is equal to another\n     * {@link MandatoryStreamCombination}.\n     *\n     * <p>Two vectors are only equal if and only if each of the respective elements is equal.</p>\n     *\n     * @return {@code true} if the objects were equal, {@code false} otherwise\n     ",
    "links" : [ "android.hardware.camera2.params.MandatoryStreamCombination" ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public CharSequence getDescription()", "public boolean isReprocessable()", "public List<MandatoryStreamInformation> getStreamsInformation()", "public boolean equals(final Object obj)", "public int hashCode()" ],
  "variableNames" : [ "TAG", "mDescription", "mIsReprocessable", "mStreamsInformation", "STREAM_USE_CASE_PREVIEW", "STREAM_USE_CASE_STILL_CAPTURE", "STREAM_USE_CASE_RECORD", "STREAM_USE_CASE_PREVIEW_VIDEO_STILL", "STREAM_USE_CASE_VIDEO_CALL", "STREAM_USE_CASE_CROPPED_RAW", "sLegacyCombinations", "sLimitedCombinations", "sBurstCombinations", "sFullCombinations", "sRawCombinations", "sLevel3Combinations", "sLimitedPrivateReprocCombinations", "sLimitedYUVReprocCombinations", "sFullPrivateReprocCombinations", "sFullYUVReprocCombinations", "sRAWPrivateReprocCombinations", "sRAWYUVReprocCombinations", "sLevel3PrivateReprocCombinations", "sLevel3YUVReprocCombinations", "sConcurrentStreamCombinations", "sConcurrentDepthOnlyStreamCombinations", "sUltraHighResolutionStreamCombinations", "sUltraHighResolutionReprocStreamCombinations", "sUltraHighResolutionYUVReprocStreamCombinations", "sUltraHighResolutionPRIVReprocStreamCombinations", "s10BitOutputStreamCombinations", "sStreamUseCaseCombinations", "sCroppedRawStreamUseCaseCombinations", "sPreviewStabilizedStreamCombinations" ]
}