{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/camera2/extension/AdvancedExtender.java",
  "packageName" : "android.hardware.camera2.extension",
  "className" : "AdvancedExtender",
  "comment" : "\n * Advanced contract for implementing Extensions. ImageCapture/Preview\n * Extensions are both implemented on this interface.\n *\n * <p>This advanced contract empowers implementations to gain access to\n * more Camera2 capability. This includes: (1) Add custom surfaces with\n * specific formats like {@link android.graphics.ImageFormat#YUV_420_888},\n * {@link android.graphics.ImageFormat#RAW10}, {@link android.graphics.ImageFormat#RAW_DEPTH10}.\n * (2) Access to the capture request callbacks as well as all the images retrieved of\n * various image formats. (3)\n * Able to triggers single or repeating request with the capabilities to\n * specify target surfaces, template id and parameters.\n *\n * @hide\n ",
  "links" : [ "android.graphics.ImageFormat#RAW_DEPTH10", "android.graphics.ImageFormat#YUV_420_888", "android.graphics.ImageFormat#RAW10" ],
  "variables" : [ {
    "name" : "mMetadataVendorIdMap",
    "type" : "HashMap<String, Long>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCameraManager",
    "type" : "CameraManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCameraUsageTracker",
    "type" : "CameraUsageTracker",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " void setCameraUsageTracker(CameraUsageTracker tracker)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public long getMetadataVendorId(@NonNull String cameraId)",
    "returnType" : "long",
    "comment" : "\n     * Returns the camera metadata vendor id, that can be used to\n     * configure and enable vendor tag support for a particular\n     * camera metadata buffer.\n     *\n     * @param cameraId           The camera2 id string of the camera.\n     * @return the camera metadata vendor Id associated with the given camera\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean isExtensionAvailable(@NonNull String cameraId, @NonNull CharacteristicsMap charsMap)",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether the extension is supported on the device.\n     *\n     * @param cameraId           The camera2 id string of the camera.\n     * @param charsMap           A map consisting of the camera ids and\n     *                           the {@link android.hardware.camera2.CameraCharacteristics}s. For\n     *                           every camera, the map contains at least\n     *                           the CameraCharacteristics for the camera\n     *                           id.\n     *                           If the camera is logical camera, it will\n     *                           also contain associated\n     *                           physical camera ids and their\n     *                           CameraCharacteristics.\n     * @return true if the extension is supported, otherwise false\n     ",
    "links" : [ "android.hardware.camera2.CameraCharacteristics" ]
  }, {
    "name" : "public abstract void initialize(@NonNull String cameraId, @NonNull CharacteristicsMap map)",
    "returnType" : "void",
    "comment" : "\n     * Initializes the extender to be used with the specified camera.\n     *\n     * <p>This should be called before any other method on the extender.\n     * The exception is {@link #isExtensionAvailable}.\n     *\n     * @param cameraId           The camera2 id string of the camera.\n     * @param map                A map consisting of the camera ids and\n     *                           the {@link android.hardware.camera2.CameraCharacteristics}s. For\n     *                           every camera, the map contains at least\n     *                           the CameraCharacteristics for the camera\n     *                           id.\n     *                           If the camera is logical camera, it will\n     *                           also contain associated\n     *                           physical camera ids and their\n     *                           CameraCharacteristics.\n     ",
    "links" : [ "#isExtensionAvailable", "android.hardware.camera2.CameraCharacteristics" ]
  }, {
    "name" : "public abstract Map<Integer, List<Size>> getSupportedPreviewOutputResolutions(@NonNull String cameraId)",
    "returnType" : "Map<Integer, List<Size>>",
    "comment" : "\n     * Returns supported output format/size map for preview. The format\n     * could be {@link android.graphics.ImageFormat#PRIVATE} or\n     * {@link android.graphics.ImageFormat#YUV_420_888}. Implementations must support\n     * {@link android.graphics.ImageFormat#PRIVATE} format at least.\n     * An example of how the map is parsed can be found in\n     * {@link #initializeParcelable(Map)}\n     *\n     * <p>The preview surface format in the CameraCaptureSession may not\n     * be identical to the supported preview output format returned here.\n     * @param cameraId           The camera2 id string of the camera.\n     ",
    "links" : [ "android.graphics.ImageFormat#PRIVATE", "#initializeParcelable(Map)", "android.graphics.ImageFormat#YUV_420_888" ]
  }, {
    "name" : "public abstract Map<Integer, List<Size>> getSupportedCaptureOutputResolutions(@NonNull String cameraId)",
    "returnType" : "Map<Integer, List<Size>>",
    "comment" : "\n     * Returns supported output format/size map for image capture. OEM is\n     * required to support both {@link android.graphics.ImageFormat#JPEG} and\n     * {@link android.graphics.ImageFormat#YUV_420_888} format output.\n     * An example of how the map is parsed can be found in\n     * {@link #initializeParcelable(Map)}\n     *\n     * <p>The surface created with this supported\n     * format/size could be either added in CameraCaptureSession with HAL\n     * processing OR it  configures intermediate surfaces(\n     * {@link android.graphics.ImageFormat#YUV_420_888}/\n     * {@link android.graphics.ImageFormat#RAW10}..) and\n     * writes the output to the output surface.\n     * @param cameraId           The camera2 id string of the camera.\n     ",
    "links" : [ "android.graphics.ImageFormat#JPEG", "#initializeParcelable(Map)", "android.graphics.ImageFormat#YUV_420_888", "android.graphics.ImageFormat#RAW10" ]
  }, {
    "name" : "public abstract SessionProcessor getSessionProcessor()",
    "returnType" : "SessionProcessor",
    "comment" : "\n     * Returns a processor for activating extension sessions. It\n     * implements all the interactions required for starting an extension\n     * and cleanup.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract List<CaptureRequest.Key> getAvailableCaptureRequestKeys(@NonNull String cameraId)",
    "returnType" : "List<CaptureRequest.Key>",
    "comment" : "\n     * Returns a list of orthogonal capture request keys.\n     *\n     * <p>Any keys included in the list will be configurable by clients of\n     * the extension and will affect the extension functionality.</p>\n     *\n     * <p>Please note that the keys {@link CaptureRequest#JPEG_QUALITY}\n     * and {@link CaptureRequest#JPEG_ORIENTATION} are always supported\n     * regardless of being added to the list or not. To support common\n     * camera operations like zoom, tap-to-focus, flash and\n     * exposure compensation, we recommend supporting the following keys\n     * if  possible.\n     * <pre>\n     *  zoom:  {@link CaptureRequest#CONTROL_ZOOM_RATIO}\n     *         {@link CaptureRequest#SCALER_CROP_REGION}\n     *  tap-to-focus:\n     *         {@link CaptureRequest#CONTROL_AF_MODE}\n     *         {@link CaptureRequest#CONTROL_AF_TRIGGER}\n     *         {@link CaptureRequest#CONTROL_AF_REGIONS}\n     *         {@link CaptureRequest#CONTROL_AE_REGIONS}\n     *         {@link CaptureRequest#CONTROL_AWB_REGIONS}\n     *  flash:\n     *         {@link CaptureRequest#CONTROL_AE_MODE}\n     *         {@link CaptureRequest#CONTROL_AE_PRECAPTURE_TRIGGER}\n     *         {@link CaptureRequest#FLASH_MODE}\n     *  exposure compensation:\n     *         {@link CaptureRequest#CONTROL_AE_EXPOSURE_COMPENSATION}\n     * </pre>\n     *\n     * @param cameraId           The camera2 id string of the camera.\n     *\n     * @return The list of supported orthogonal capture keys, or empty\n     * list if no capture settings are not supported.\n     ",
    "links" : [ "android.hardware.camera2.CaptureRequest#CONTROL_AWB_REGIONS", "android.hardware.camera2.CaptureRequest#CONTROL_AF_MODE", "android.hardware.camera2.CaptureRequest#CONTROL_AE_EXPOSURE_COMPENSATION", "android.hardware.camera2.CaptureRequest#CONTROL_AE_REGIONS", "android.hardware.camera2.CaptureRequest#FLASH_MODE", "android.hardware.camera2.CaptureRequest#CONTROL_AF_REGIONS", "android.hardware.camera2.CaptureRequest#CONTROL_AE_PRECAPTURE_TRIGGER", "android.hardware.camera2.CaptureRequest#CONTROL_AE_MODE", "android.hardware.camera2.CaptureRequest#JPEG_ORIENTATION", "android.hardware.camera2.CaptureRequest#SCALER_CROP_REGION", "android.hardware.camera2.CaptureRequest#JPEG_QUALITY", "android.hardware.camera2.CaptureRequest#CONTROL_ZOOM_RATIO", "android.hardware.camera2.CaptureRequest#CONTROL_AF_TRIGGER" ]
  }, {
    "name" : "public abstract List<CaptureResult.Key> getAvailableCaptureResultKeys(@NonNull String cameraId)",
    "returnType" : "List<CaptureResult.Key>",
    "comment" : "\n     * Returns a list of supported capture result keys.\n     *\n     * <p>Any keys included in this list must be available as part of the\n     * registered {@link CaptureCallback#onCaptureCompleted} callback.</p>\n     *\n     * <p>At the very minimum, it is expected that the result key list is\n     * a superset of the capture request keys.</p>\n     *\n     * @param cameraId           The camera2 id string of the camera.\n     * @return The list of supported capture result keys, or\n     * empty list if capture results are not supported.\n     ",
    "links" : [ "android.hardware.camera2.impl.CaptureCallback#onCaptureCompleted" ]
  }, {
    "name" : "public abstract List<Pair<CameraCharacteristics.Key, Object>> getAvailableCharacteristicsKeyValues()",
    "returnType" : "List<Pair<CameraCharacteristics.Key, Object>>",
    "comment" : "\n     * Returns a list of {@link CameraCharacteristics} key/value pairs for apps to use when\n     * querying the Extensions specific {@link CameraCharacteristics}.\n     *\n     * <p>To ensure the correct {@link CameraCharacteristics} are used when an extension is\n     * enabled, an application should prioritize the value returned from the list if the\n     * {@link CameraCharacteristics} key is present. If the key doesn't exist in the returned list,\n     * then the application should query the value using\n     * {@link CameraCharacteristics#get(CameraCharacteristics.Key)}.\n     *\n     * <p>For example, an extension may limit the zoom ratio range. In this case, an OEM can return\n     * a new zoom ratio range for the key {@link CameraCharacteristics#CONTROL_ZOOM_RATIO_RANGE}.\n     *\n     * <p> Currently, the only synthetic keys supported for override are\n     * {@link CameraCharacteristics#REQUEST_AVAILABLE_DYNAMIC_RANGE_PROFILES} and\n     * {@link CameraCharacteristics#REQUEST_AVAILABLE_COLOR_SPACE_PROFILES}. To enable them, an OEM\n     * should override the respective native keys\n     * {@link CameraCharacteristics#REQUEST_AVAILABLE_DYNAMIC_RANGE_PROFILES_MAP} and\n     *  {@link CameraCharacteristics#REQUEST_AVAILABLE_COLOR_SPACE_PROFILES_MAP}.\n     ",
    "links" : [ "android.hardware.camera2.CameraCharacteristics#REQUEST_AVAILABLE_DYNAMIC_RANGE_PROFILES_MAP", "android.hardware.camera2.CameraCharacteristics#get(CameraCharacteristics.Key)", "android.hardware.camera2.CameraCharacteristics#REQUEST_AVAILABLE_COLOR_SPACE_PROFILES", "android.hardware.camera2.CameraCharacteristics", "android.hardware.camera2.CameraCharacteristics#REQUEST_AVAILABLE_DYNAMIC_RANGE_PROFILES", "android.hardware.camera2.CameraCharacteristics#CONTROL_ZOOM_RATIO_RANGE", "android.hardware.camera2.CameraCharacteristics#REQUEST_AVAILABLE_COLOR_SPACE_PROFILES_MAP" ]
  }, {
    "name" : " IAdvancedExtenderImpl getAdvancedExtenderBinder()",
    "returnType" : "IAdvancedExtenderImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static List<SizeList> initializeParcelable(Map<Integer, List<android.util.Size>> sizes)",
    "returnType" : "List<SizeList>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ " void setCameraUsageTracker(CameraUsageTracker tracker)", "public long getMetadataVendorId(@NonNull String cameraId)", "public abstract boolean isExtensionAvailable(@NonNull String cameraId, @NonNull CharacteristicsMap charsMap)", "public abstract void initialize(@NonNull String cameraId, @NonNull CharacteristicsMap map)", "public abstract Map<Integer, List<Size>> getSupportedPreviewOutputResolutions(@NonNull String cameraId)", "public abstract Map<Integer, List<Size>> getSupportedCaptureOutputResolutions(@NonNull String cameraId)", "public abstract SessionProcessor getSessionProcessor()", "public abstract List<CaptureRequest.Key> getAvailableCaptureRequestKeys(@NonNull String cameraId)", "public abstract List<CaptureResult.Key> getAvailableCaptureResultKeys(@NonNull String cameraId)", "public abstract List<Pair<CameraCharacteristics.Key, Object>> getAvailableCharacteristicsKeyValues()", " IAdvancedExtenderImpl getAdvancedExtenderBinder()", "private static List<SizeList> initializeParcelable(Map<Integer, List<android.util.Size>> sizes)" ],
  "variableNames" : [ "mMetadataVendorIdMap", "mCameraManager", "mCameraUsageTracker", "TAG" ]
}