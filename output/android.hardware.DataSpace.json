{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/DataSpace.java",
  "packageName" : "android.hardware",
  "className" : "DataSpace",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "STANDARD_MASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STANDARD_UNSPECIFIED",
    "type" : "int",
    "comment" : "\n     * Chromacity coordinates are unknown or are determined by the application.\n     ",
    "links" : [ ]
  }, {
    "name" : "STANDARD_BT709",
    "type" : "int",
    "comment" : "\n     * Use the unadjusted {@code KR = 0.2126}, {@code KB = 0.0722} luminance interpretation\n     * for RGB conversion.\n     *\n     * <pre>\n     * Primaries:       x       y\n     *  green           0.300   0.600\n     *  blue            0.150   0.060\n     *  red             0.640   0.330\n     *  white (D65)     0.3127  0.3290 </pre>\n     ",
    "links" : [ ]
  }, {
    "name" : "STANDARD_BT601_625",
    "type" : "int",
    "comment" : "\n     * Use the adjusted {@code KR = 0.299}, {@code KB = 0.114} luminance interpretation\n     * for RGB conversion from the one purely determined by the primaries\n     * to minimize the color shift into RGB space that uses BT.709\n     * primaries.\n     *\n     * <pre>\n     * Primaries:       x       y\n     *  green           0.290   0.600\n     *  blue            0.150   0.060\n     *  red             0.640   0.330\n     *  white (D65)     0.3127  0.3290 </pre>\n     ",
    "links" : [ ]
  }, {
    "name" : "STANDARD_BT601_625_UNADJUSTED",
    "type" : "int",
    "comment" : "\n     * Use the unadjusted {@code KR = 0.222}, {@code KB = 0.071} luminance interpretation\n     * for RGB conversion.\n     *\n     * <pre>\n     * Primaries:       x       y\n     *  green           0.290   0.600\n     *  blue            0.150   0.060\n     *  red             0.640   0.330\n     *  white (D65)     0.3127  0.3290 </pre>\n     ",
    "links" : [ ]
  }, {
    "name" : "STANDARD_BT601_525",
    "type" : "int",
    "comment" : "\n     * Use the adjusted {@code KR = 0.299}, {@code KB = 0.114} luminance interpretation\n     * for RGB conversion from the one purely determined by the primaries\n     * to minimize the color shift into RGB space that uses BT.709\n     * primaries.\n     *\n     * <pre>\n     * Primaries:       x       y\n     *  green           0.310   0.595\n     *  blue            0.155   0.070\n     *  red             0.630   0.340\n     *  white (D65)     0.3127  0.3290 </pre>\n     ",
    "links" : [ ]
  }, {
    "name" : "STANDARD_BT601_525_UNADJUSTED",
    "type" : "int",
    "comment" : "\n     * Use the unadjusted {@code KR = 0.212}, {@code KB = 0.087} luminance interpretation\n     * for RGB conversion (as in SMPTE 240M).\n     *\n     * <pre>\n     * Primaries:       x       y\n     *  green           0.310   0.595\n     *  blue            0.155   0.070\n     *  red             0.630   0.340\n     *  white (D65)     0.3127  0.3290 </pre>\n     ",
    "links" : [ ]
  }, {
    "name" : "STANDARD_BT2020",
    "type" : "int",
    "comment" : "\n     * Use the unadjusted {@code KR = 0.2627}, {@code KB = 0.0593} luminance interpretation\n     * for RGB conversion.\n     *\n     * <pre>\n     * Primaries:       x       y\n     *  green           0.170   0.797\n     *  blue            0.131   0.046\n     *  red             0.708   0.292\n     *  white (D65)     0.3127  0.3290 </pre>\n     ",
    "links" : [ ]
  }, {
    "name" : "STANDARD_BT2020_CONSTANT_LUMINANCE",
    "type" : "int",
    "comment" : "\n     * Use the unadjusted {@code KR = 0.2627}, {@code KB = 0.0593} luminance interpretation\n     * for RGB conversion using the linear domain.\n     *\n     * <pre>\n     * Primaries:       x       y\n     *  green           0.170   0.797\n     *  blue            0.131   0.046\n     *  red             0.708   0.292\n     *  white (D65)     0.3127  0.3290 </pre>\n     ",
    "links" : [ ]
  }, {
    "name" : "STANDARD_BT470M",
    "type" : "int",
    "comment" : "\n     * Use the unadjusted {@code KR = 0.30}, {@code KB = 0.11} luminance interpretation\n     * for RGB conversion.\n     *\n     * <pre>\n     * Primaries:       x      y\n     *  green           0.21   0.71\n     *  blue            0.14   0.08\n     *  red             0.67   0.33\n     *  white (C)       0.310  0.316 </pre>\n     ",
    "links" : [ ]
  }, {
    "name" : "STANDARD_FILM",
    "type" : "int",
    "comment" : "\n     * Use the unadjusted {@code KR = 0.254}, {@code KB = 0.068} luminance interpretation\n     * for RGB conversion.\n     *\n     * <pre>\n     * Primaries:       x       y\n     *  green           0.243   0.692\n     *  blue            0.145   0.049\n     *  red             0.681   0.319\n     *  white (C)       0.310   0.316 </pre>\n     ",
    "links" : [ ]
  }, {
    "name" : "STANDARD_DCI_P3",
    "type" : "int",
    "comment" : "\n     * SMPTE EG 432-1 and SMPTE RP 431-2.\n     *\n     * <pre>\n     * Primaries:       x       y\n     *  green           0.265   0.690\n     *  blue            0.150   0.060\n     *  red             0.680   0.320\n     *  white (D65)     0.3127  0.3290 </pre>\n     ",
    "links" : [ ]
  }, {
    "name" : "STANDARD_ADOBE_RGB",
    "type" : "int",
    "comment" : "\n     * Adobe RGB primaries.\n     *\n     * <pre>\n     * Primaries:       x       y\n     *  green           0.210   0.710\n     *  blue            0.150   0.060\n     *  red             0.640   0.330\n     *  white (D65)     0.3127  0.3290 </pre>\n     ",
    "links" : [ ]
  }, {
    "name" : "TRANSFER_MASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TRANSFER_UNSPECIFIED",
    "type" : "int",
    "comment" : "\n     * Transfer characteristics are unknown or are determined by the\n     * application.\n     ",
    "links" : [ ]
  }, {
    "name" : "TRANSFER_LINEAR",
    "type" : "int",
    "comment" : "\n     * Linear transfer.\n     *\n     * <pre>{@code\n     * Transfer characteristic curve:\n     *  E = L\n     *      L - luminance of image 0 <= L <= 1 for conventional colorimetry\n     *      E - corresponding electrical signal}</pre>\n     ",
    "links" : [ ]
  }, {
    "name" : "TRANSFER_SRGB",
    "type" : "int",
    "comment" : "\n     * sRGB transfer.\n     *\n     * <pre>{@code\n     * Transfer characteristic curve:\n     * E = 1.055 * L^(1/2.4) - 0.055  for 0.0031308 <= L <= 1\n     *   = 12.92 * L                  for 0 <= L < 0.0031308\n     *     L - luminance of image 0 <= L <= 1 for conventional colorimetry\n     *     E - corresponding electrical signal}</pre>\n     *\n     * Use for RGB formats.\n     ",
    "links" : [ ]
  }, {
    "name" : "TRANSFER_SMPTE_170M",
    "type" : "int",
    "comment" : "\n     * SMPTE 170M transfer.\n     *\n     * <pre>{@code\n     * Transfer characteristic curve:\n     * E = 1.099 * L ^ 0.45 - 0.099  for 0.018 <= L <= 1\n     *   = 4.500 * L                 for 0 <= L < 0.018\n     *     L - luminance of image 0 <= L <= 1 for conventional colorimetry\n     *     E - corresponding electrical signal}</pre>\n     *\n     * Use for YCbCr formats.\n     ",
    "links" : [ ]
  }, {
    "name" : "TRANSFER_GAMMA2_2",
    "type" : "int",
    "comment" : "\n     * Display gamma 2.2.\n     *\n     * <pre>{@code\n     * Transfer characteristic curve:\n     * E = L ^ (1/2.2)\n     *     L - luminance of image 0 <= L <= 1 for conventional colorimetry\n     *     E - corresponding electrical signal}</pre>\n     ",
    "links" : [ ]
  }, {
    "name" : "TRANSFER_GAMMA2_6",
    "type" : "int",
    "comment" : "\n     *  Display gamma 2.6.\n     *\n     * <pre>{@code\n     * Transfer characteristic curve:\n     * E = L ^ (1/2.6)\n     *     L - luminance of image 0 <= L <= 1 for conventional colorimetry\n     *     E - corresponding electrical signal}</pre>\n     ",
    "links" : [ ]
  }, {
    "name" : "TRANSFER_GAMMA2_8",
    "type" : "int",
    "comment" : "\n     *  Display gamma 2.8.\n     *\n     * <pre>{@code\n     * Transfer characteristic curve:\n     * E = L ^ (1/2.8)\n     *     L - luminance of image 0 <= L <= 1 for conventional colorimetry\n     *     E - corresponding electrical signal}</pre>\n     ",
    "links" : [ ]
  }, {
    "name" : "TRANSFER_ST2084",
    "type" : "int",
    "comment" : "\n     * SMPTE ST 2084 (Dolby Perceptual Quantizer).\n     *\n     * <pre>{@code\n     * Transfer characteristic curve:\n     * E = ((c1 + c2 * L^n) / (1 + c3 * L^n)) ^ m\n     * c1 = c3 - c2 + 1 = 3424 / 4096 = 0.8359375\n     * c2 = 32 * 2413 / 4096 = 18.8515625\n     * c3 = 32 * 2392 / 4096 = 18.6875\n     * m = 128 * 2523 / 4096 = 78.84375\n     * n = 0.25 * 2610 / 4096 = 0.1593017578125\n     *     L - luminance of image 0 <= L <= 1 for HDR colorimetry.\n     *         L = 1 corresponds to 10000 cd/m2\n     *     E - corresponding electrical signal}</pre>\n     ",
    "links" : [ ]
  }, {
    "name" : "TRANSFER_HLG",
    "type" : "int",
    "comment" : "\n     * ARIB STD-B67 Hybrid Log Gamma.\n     *\n     * <pre>{@code\n     * Transfer characteristic curve:\n     * E = r * L^0.5                 for 0 <= L <= 1\n     *   = a * ln(L - b) + c         for 1 < L\n     * a = 0.17883277\n     * b = 0.28466892\n     * c = 0.55991073\n     * r = 0.5\n     *     L - luminance of image 0 <= L for HDR colorimetry. L = 1 corresponds\n     *         to reference white level of 100 cd/m2\n     *     E - corresponding electrical signal}</pre>\n     ",
    "links" : [ ]
  }, {
    "name" : "RANGE_MASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RANGE_UNSPECIFIED",
    "type" : "int",
    "comment" : "\n     * Range characteristics are unknown or are determined by the application.\n     ",
    "links" : [ ]
  }, {
    "name" : "RANGE_FULL",
    "type" : "int",
    "comment" : "\n     * Full range uses all values for Y, Cb and Cr from\n     * {@code 0} to {@code 2^b-1}, where b is the bit depth of the color format.\n     ",
    "links" : [ ]
  }, {
    "name" : "RANGE_LIMITED",
    "type" : "int",
    "comment" : "\n     * Limited range uses values {@code 16/256*2^b} to {@code 235/256*2^b} for Y, and\n     * {@code 1/16*2^b} to {@code 15/16*2^b} for Cb, Cr, R, G and B, where b is the bit depth of\n     * the color format.\n     *\n     * <p>E.g. For 8-bit-depth formats:\n     * Luma (Y) samples should range from 16 to 235, inclusive\n     * Chroma (Cb, Cr) samples should range from 16 to 240, inclusive\n     *\n     * For 10-bit-depth formats:\n     * Luma (Y) samples should range from 64 to 940, inclusive\n     * Chroma (Cb, Cr) samples should range from 64 to 960, inclusive. </p>\n     ",
    "links" : [ ]
  }, {
    "name" : "RANGE_EXTENDED",
    "type" : "int",
    "comment" : "\n     * Extended range can be used in combination with FP16 to communicate scRGB or with\n     * {@link android.view.SurfaceControl.Transaction#setExtendedRangeBrightness(SurfaceControl, float, float)}\n     * to indicate an HDR range.\n     *\n     * <p>When used with floating point pixel formats and #STANDARD_BT709 then [0.0 - 1.0] is the\n     * standard sRGB space and values outside the range [0.0 - 1.0] can encode\n     * color outside the sRGB gamut. [-0.5, 7.5] is the standard scRGB range.\n     * Used to blend/merge multiple dataspaces on a single display.</p>\n     *\n     * <p>As of {@link android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE} this may be combined with\n     * {@link android.view.SurfaceControl.Transaction#setExtendedRangeBrightness(SurfaceControl, float, float)}\n     * and other formats such as {@link HardwareBuffer#RGBA_8888} or\n     * {@link HardwareBuffer#RGBA_1010102} to communicate a variable HDR brightness range</p>\n     ",
    "links" : [ "android.hardware.HardwareBuffer#RGBA_1010102", "android.hardware.HardwareBuffer#RGBA_8888", "android.view.SurfaceControl.Transaction#setExtendedRangeBrightness(SurfaceControl", "android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE" ]
  }, {
    "name" : "DATASPACE_DEPTH",
    "type" : "int",
    "comment" : "\n     * Depth.\n     *\n     * This value is valid with formats HAL_PIXEL_FORMAT_Y16 and HAL_PIXEL_FORMAT_BLOB.\n     ",
    "links" : [ ]
  }, {
    "name" : "DATASPACE_DYNAMIC_DEPTH",
    "type" : "int",
    "comment" : "\n     * ISO 16684-1:2011(E) Dynamic Depth.\n     *\n     * Embedded depth metadata following the dynamic depth specification.\n     ",
    "links" : [ ]
  }, {
    "name" : "DATASPACE_HEIF",
    "type" : "int",
    "comment" : "\n     * High Efficiency Image File Format (HEIF).\n     *\n     * <p>This value is valid with {@link android.hardware.HardwareBuffer#BLOB HardwareBuffer.BLOB}\n     * format. The combination is an HEIC image encoded by HEIC or HEVC encoder according to\n     * ISO/IEC 23008-12.</p>\n     ",
    "links" : [ "android.hardware.HardwareBuffer#BLOB" ]
  }, {
    "name" : "DATASPACE_JPEG_R",
    "type" : "int",
    "comment" : "\n     * ISO/IEC TBD\n     *\n     * JPEG image with embedded recovery map following the Jpeg/R specification.\n     *\n     * <p>This value must always remain aligned with the public ImageFormat Jpeg/R definition and is\n     * valid with formats:\n     *    HAL_PIXEL_FORMAT_BLOB: JPEG image encoded by Jpeg/R encoder according to ISO/IEC TBD.\n     * The image contains a standard SDR JPEG and a recovery map. Jpeg/R decoders can use the\n     * map to recover the input image.</p>\n     ",
    "links" : [ ]
  }, {
    "name" : "DATASPACE_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * Default-assumption data space, when not explicitly specified.\n     *\n     * <p>It is safest to assume a buffer is an image with sRGB primaries and\n     * encoding ranges, but the consumer and/or the producer of the data may\n     * simply be using defaults. No automatic gamma transform should be\n     * expected, except for a possible display gamma transform when drawn to a\n     * screen.</p>\n     ",
    "links" : [ ]
  }, {
    "name" : "DATASPACE_SCRGB_LINEAR",
    "type" : "int",
    "comment" : "\n     * scRGB linear encoding.\n     *\n     * <p>Composed of the following -</p>\n     * <pre>\n     *   Primaries: STANDARD_BT709\n     *   Transfer: TRANSFER_LINEAR\n     *   Range: RANGE_EXTENDED</pre>\n     *\n     * The values are floating point.\n     * A pixel value of 1.0, 1.0, 1.0 corresponds to sRGB white (D65) at 80 nits.\n     * Values beyond the range [0.0 - 1.0] would correspond to other colors\n     * spaces and/or HDR content.\n     ",
    "links" : [ ]
  }, {
    "name" : "DATASPACE_SRGB",
    "type" : "int",
    "comment" : "\n     * sRGB gamma encoding.\n     *\n     * <p>Composed of the following -</p>\n     * <pre>\n     *   Primaries: STANDARD_BT709\n     *   Transfer: TRANSFER_SRGB\n     *   Range: RANGE_FULL</pre>\n     *\n     * When written, the inverse transformation is performed.\n     *\n     * The alpha component, if present, is always stored in linear space and\n     * is left unmodified when read or written.\n     ",
    "links" : [ ]
  }, {
    "name" : "DATASPACE_SCRGB",
    "type" : "int",
    "comment" : "\n     * scRGB gamma encoding.\n     *\n     * <p>Composed of the following -</p>\n     * <pre>\n     *   Primaries: STANDARD_BT709\n     *   Transfer: TRANSFER_SRGB\n     *   Range: RANGE_EXTENDED</pre>\n     *\n     * The values are floating point.\n     *\n     * A pixel value of 1.0, 1.0, 1.0 corresponds to sRGB white (D65) at 80 nits.\n     * Values beyond the range [0.0 - 1.0] would correspond to other colors\n     * spaces and/or HDR content.\n     ",
    "links" : [ ]
  }, {
    "name" : "DATASPACE_DISPLAY_P3",
    "type" : "int",
    "comment" : "\n     * Display P3 encoding.\n     *\n     * <p>Composed of the following -</p>\n     * <pre>\n     *   Primaries: STANDARD_DCI_P3\n     *   Transfer: TRANSFER_SRGB\n     *   Range: RANGE_FULL</pre>\n     ",
    "links" : [ ]
  }, {
    "name" : "DATASPACE_BT2020_HLG",
    "type" : "int",
    "comment" : "\n     * Hybrid Log Gamma encoding.\n     *\n     * <p>Composed of the following -</p>\n     * <pre>\n     *   Primaries: STANDARD_BT2020\n     *   Transfer: TRANSFER_HLG\n     *   Range: RANGE_FULL</pre>\n     ",
    "links" : [ ]
  }, {
    "name" : "DATASPACE_BT2020_PQ",
    "type" : "int",
    "comment" : "\n     * Perceptual Quantizer encoding.\n     *\n     * <p>Composed of the following -</p>\n     * <pre>\n     *   Primaries: STANDARD_BT2020\n     *   Transfer: TRANSFER_ST2084\n     *   Range: RANGE_FULL</pre>\n     ",
    "links" : [ ]
  }, {
    "name" : "DATASPACE_ADOBE_RGB",
    "type" : "int",
    "comment" : "\n     * Adobe RGB encoding.\n     *\n     * <p>Composed of the following -</p>\n     * <pre>\n     *   Primaries: STANDARD_ADOBE_RGB\n     *   Transfer: TRANSFER_GAMMA2_2\n     *   Range: RANGE_FULL</pre>\n     *\n     * Note: Application is responsible for gamma encoding the data.\n     ",
    "links" : [ ]
  }, {
    "name" : "DATASPACE_JFIF",
    "type" : "int",
    "comment" : "\n     * JPEG File Interchange Format (JFIF).\n     *\n     * <p>Composed of the following -</p>\n     * <pre>\n     *   Primaries: STANDARD_BT601_625\n     *   Transfer: TRANSFER_SMPTE_170M\n     *   Range: RANGE_FULL</pre>\n     *\n     * Same model as BT.601-625, but all values (Y, Cb, Cr) range from {@code 0} to {@code 255}\n     ",
    "links" : [ ]
  }, {
    "name" : "DATASPACE_BT601_625",
    "type" : "int",
    "comment" : "\n     * ITU-R Recommendation 601 (BT.601) - 525-line\n     *\n     * Standard-definition television, 525 Lines (NTSC).\n     *\n     * <p>Composed of the following -</p>\n     * <pre>\n     *   Primaries: STANDARD_BT601_625\n     *   Transfer: TRANSFER_SMPTE_170M\n     *   Range: RANGE_LIMITED</pre>\n     ",
    "links" : [ ]
  }, {
    "name" : "DATASPACE_BT601_525",
    "type" : "int",
    "comment" : "\n     * ITU-R Recommendation 709 (BT.709)\n     *\n     * High-definition television.\n     *\n     * <p>Composed of the following -</p>\n     * <pre>\n     *   Primaries: STANDARD_BT601_525\n     *   Transfer: TRANSFER_SMPTE_170M\n     *   Range: RANGE_LIMITED</pre>\n     ",
    "links" : [ ]
  }, {
    "name" : "DATASPACE_BT2020",
    "type" : "int",
    "comment" : "\n     * ITU-R Recommendation 2020 (BT.2020)\n     *\n     * Ultra High-definition television.\n     *\n     * <p>Composed of the following -</p>\n     * <pre>\n     *   Primaries: STANDARD_BT2020\n     *   Transfer: TRANSFER_SMPTE_170M\n     *   Range: RANGE_FULL</pre>\n     ",
    "links" : [ ]
  }, {
    "name" : "DATASPACE_BT709",
    "type" : "int",
    "comment" : "\n     * ITU-R Recommendation 709 (BT.709)\n     *\n     * High-definition television.\n     *\n     * <p>Composed of the following -</p>\n     * <pre>\n     *   Primaries: STANDARD_BT709\n     *   Transfer: TRANSFER_SMPTE_170M\n     *   Range: RANGE_LIMITED</pre>\n     ",
    "links" : [ ]
  }, {
    "name" : "DATASPACE_DCI_P3",
    "type" : "int",
    "comment" : "\n     * SMPTE EG 432-1 and SMPTE RP 431-2\n     *\n     * Digital Cinema DCI-P3.\n     *\n     * <p>Composed of the following -</p>\n     * <pre>\n     *   Primaries: STANDARD_DCI_P3\n     *   Transfer: TRANSFER_GAMMA2_6\n     *   Range: RANGE_FULL</pre>\n     *\n     * Note: Application is responsible for gamma encoding the data as\n     * a 2.6 gamma encoding is not supported in HW.\n     ",
    "links" : [ ]
  }, {
    "name" : "DATASPACE_SRGB_LINEAR",
    "type" : "int",
    "comment" : "\n     * sRGB linear encoding.\n     *\n     * <p>Composed of the following -</p>\n     * <pre>\n     *   Primaries: STANDARD_BT709\n     *   Transfer: TRANSFER_LINEAR\n     *   Range: RANGE_FULL</pre>\n     *\n     * The values are encoded using the full range ([0,255] for 8-bit) for all\n     * components.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static int pack(@DataSpaceStandard int standard, @DataSpaceTransfer int transfer, @DataSpaceRange int range)",
    "returnType" : "int",
    "comment" : "\n     * Pack the dataSpace value using standard, transfer and range field value.\n     * Field values should be in the correct bits place.\n     *\n     * @param standard Chromaticity coordinates of source primaries\n     * @param transfer Opto-electronic transfer characteristic at the source\n     * @param range The range of values\n     *\n     * @return The int dataspace packed by standard, transfer and range value\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getStandard(@ColorDataSpace int dataSpace)",
    "returnType" : "int",
    "comment" : "\n     * Unpack the standard field value from the packed dataSpace value.\n     *\n     * @param dataSpace The packed dataspace value\n     *\n     * @return The standard aspect\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getTransfer(@ColorDataSpace int dataSpace)",
    "returnType" : "int",
    "comment" : "\n     * Unpack the transfer field value from the packed dataSpace value\n     *\n     * @param dataSpace The packed dataspace value\n     *\n     * @return The transfer aspect\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getRange(@ColorDataSpace int dataSpace)",
    "returnType" : "int",
    "comment" : "\n     * Unpack the range field value from the packed dataSpace value\n     *\n     * @param dataSpace The packed dataspace value\n     *\n     * @return The range aspect\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static int pack(@DataSpaceStandard int standard, @DataSpaceTransfer int transfer, @DataSpaceRange int range)", "public static int getStandard(@ColorDataSpace int dataSpace)", "public static int getTransfer(@ColorDataSpace int dataSpace)", "public static int getRange(@ColorDataSpace int dataSpace)" ],
  "variableNames" : [ "STANDARD_MASK", "STANDARD_UNSPECIFIED", "STANDARD_BT709", "STANDARD_BT601_625", "STANDARD_BT601_625_UNADJUSTED", "STANDARD_BT601_525", "STANDARD_BT601_525_UNADJUSTED", "STANDARD_BT2020", "STANDARD_BT2020_CONSTANT_LUMINANCE", "STANDARD_BT470M", "STANDARD_FILM", "STANDARD_DCI_P3", "STANDARD_ADOBE_RGB", "TRANSFER_MASK", "TRANSFER_UNSPECIFIED", "TRANSFER_LINEAR", "TRANSFER_SRGB", "TRANSFER_SMPTE_170M", "TRANSFER_GAMMA2_2", "TRANSFER_GAMMA2_6", "TRANSFER_GAMMA2_8", "TRANSFER_ST2084", "TRANSFER_HLG", "RANGE_MASK", "RANGE_UNSPECIFIED", "RANGE_FULL", "RANGE_LIMITED", "RANGE_EXTENDED", "DATASPACE_DEPTH", "DATASPACE_DYNAMIC_DEPTH", "DATASPACE_HEIF", "DATASPACE_JPEG_R", "DATASPACE_UNKNOWN", "DATASPACE_SCRGB_LINEAR", "DATASPACE_SRGB", "DATASPACE_SCRGB", "DATASPACE_DISPLAY_P3", "DATASPACE_BT2020_HLG", "DATASPACE_BT2020_PQ", "DATASPACE_ADOBE_RGB", "DATASPACE_JFIF", "DATASPACE_BT601_625", "DATASPACE_BT601_525", "DATASPACE_BT2020", "DATASPACE_BT709", "DATASPACE_DCI_P3", "DATASPACE_SRGB_LINEAR" ]
}