{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/app/ProgressDialog.java",
  "packageName" : "android.app",
  "className" : "ProgressDialog",
  "comment" : "\n * A dialog showing a progress indicator and an optional text message or view.\n * Only a text message or a view can be used at the same time.\n *\n * <p>The dialog can be made cancelable on back key press.</p>\n *\n * <p>The progress range is 0 to {@link #getMax() max}.</p>\n *\n * @deprecated <code>ProgressDialog</code> is a modal dialog, which prevents the\n * user from interacting with the app. Instead of using this class, you should\n * use a progress indicator like {@link android.widget.ProgressBar}, which can\n * be embedded in your app's UI. Alternatively, you can use a\n * <a href=\"/guide/topics/ui/notifiers/notifications.html\">notification</a>\n * to inform the user of the task's progress.\n ",
  "variables" : [ {
    "name" : "STYLE_SPINNER",
    "type" : "int",
    "comment" : "\n     * Creates a ProgressDialog with a circular, spinning progress\n     * bar. This is the default.\n     ",
    "links" : [ ]
  }, {
    "name" : "STYLE_HORIZONTAL",
    "type" : "int",
    "comment" : "\n     * Creates a ProgressDialog with a horizontal progress bar.\n     ",
    "links" : [ ]
  }, {
    "name" : "mProgress",
    "type" : "ProgressBar",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMessageView",
    "type" : "TextView",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProgressStyle",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProgressNumber",
    "type" : "TextView",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProgressNumberFormat",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProgressPercent",
    "type" : "TextView",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProgressPercentFormat",
    "type" : "NumberFormat",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMax",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProgressVal",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSecondaryProgressVal",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIncrementBy",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIncrementSecondaryBy",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProgressDrawable",
    "type" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIndeterminateDrawable",
    "type" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMessage",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIndeterminate",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHasStarted",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mViewUpdateHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void initFormats()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static ProgressDialog show(Context context, CharSequence title, CharSequence message)",
    "returnType" : "ProgressDialog",
    "comment" : "\n     * Creates and shows a ProgressDialog.\n     *\n     * @param context the parent context\n     * @param title the title text for the dialog's window\n     * @param message the text to be displayed in the dialog\n     * @return the ProgressDialog\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ProgressDialog show(Context context, CharSequence title, CharSequence message, boolean indeterminate)",
    "returnType" : "ProgressDialog",
    "comment" : "\n     * Creates and shows a ProgressDialog.\n     *\n     * @param context the parent context\n     * @param title the title text for the dialog's window\n     * @param message the text to be displayed in the dialog\n     * @param indeterminate true if the dialog should be {@link #setIndeterminate(boolean)\n     *        indeterminate}, false otherwise\n     * @return the ProgressDialog\n     ",
    "links" : [ "#setIndeterminate(boolean)" ]
  }, {
    "name" : "public static ProgressDialog show(Context context, CharSequence title, CharSequence message, boolean indeterminate, boolean cancelable)",
    "returnType" : "ProgressDialog",
    "comment" : "\n     * Creates and shows a ProgressDialog.\n     *\n     * @param context the parent context\n     * @param title the title text for the dialog's window\n     * @param message the text to be displayed in the dialog\n     * @param indeterminate true if the dialog should be {@link #setIndeterminate(boolean)\n     *        indeterminate}, false otherwise\n     * @param cancelable true if the dialog is {@link #setCancelable(boolean) cancelable},\n     *        false otherwise\n     * @return the ProgressDialog\n     ",
    "links" : [ "#setIndeterminate(boolean)", "#setCancelable(boolean)" ]
  }, {
    "name" : "public static ProgressDialog show(Context context, CharSequence title, CharSequence message, boolean indeterminate, boolean cancelable, OnCancelListener cancelListener)",
    "returnType" : "ProgressDialog",
    "comment" : "\n     * Creates and shows a ProgressDialog.\n     *\n     * @param context the parent context\n     * @param title the title text for the dialog's window\n     * @param message the text to be displayed in the dialog\n     * @param indeterminate true if the dialog should be {@link #setIndeterminate(boolean)\n     *        indeterminate}, false otherwise\n     * @param cancelable true if the dialog is {@link #setCancelable(boolean) cancelable},\n     *        false otherwise\n     * @param cancelListener the {@link #setOnCancelListener(OnCancelListener) listener}\n     *        to be invoked when the dialog is canceled\n     * @return the ProgressDialog\n     ",
    "links" : [ "#setOnCancelListener(OnCancelListener)", "#setIndeterminate(boolean)", "#setCancelable(boolean)" ]
  }, {
    "name" : "protected void onCreate(Bundle savedInstanceState)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onStart()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onStop()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setProgress(int value)",
    "returnType" : "void",
    "comment" : "\n     * Sets the current progress.\n     *\n     * @param value the current progress, a value between 0 and {@link #getMax()}\n     *\n     * @see ProgressBar#setProgress(int)\n     ",
    "links" : [ "#getMax()" ]
  }, {
    "name" : "public void setSecondaryProgress(int secondaryProgress)",
    "returnType" : "void",
    "comment" : "\n     * Sets the secondary progress.\n     *\n     * @param secondaryProgress the current secondary progress, a value between 0 and\n     * {@link #getMax()}\n     *\n     * @see ProgressBar#setSecondaryProgress(int)\n     ",
    "links" : [ "#getMax()" ]
  }, {
    "name" : "public int getProgress()",
    "returnType" : "int",
    "comment" : "\n     * Gets the current progress.\n     *\n     * @return the current progress, a value between 0 and {@link #getMax()}\n     ",
    "links" : [ "#getMax()" ]
  }, {
    "name" : "public int getSecondaryProgress()",
    "returnType" : "int",
    "comment" : "\n     * Gets the current secondary progress.\n     *\n     * @return the current secondary progress, a value between 0 and {@link #getMax()}\n     ",
    "links" : [ "#getMax()" ]
  }, {
    "name" : "public int getMax()",
    "returnType" : "int",
    "comment" : "\n     * Gets the maximum allowed progress value. The default value is 100.\n     *\n     * @return the maximum value\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMax(int max)",
    "returnType" : "void",
    "comment" : "\n     * Sets the maximum allowed progress value.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void incrementProgressBy(int diff)",
    "returnType" : "void",
    "comment" : "\n     * Increments the current progress value.\n     *\n     * @param diff the amount by which the current progress will be incremented,\n     * up to {@link #getMax()}\n     ",
    "links" : [ "#getMax()" ]
  }, {
    "name" : "public void incrementSecondaryProgressBy(int diff)",
    "returnType" : "void",
    "comment" : "\n     * Increments the current secondary progress value.\n     *\n     * @param diff the amount by which the current secondary progress will be incremented,\n     * up to {@link #getMax()}\n     ",
    "links" : [ "#getMax()" ]
  }, {
    "name" : "public void setProgressDrawable(Drawable d)",
    "returnType" : "void",
    "comment" : "\n     * Sets the drawable to be used to display the progress value.\n     *\n     * @param d the drawable to be used\n     *\n     * @see ProgressBar#setProgressDrawable(Drawable)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setIndeterminateDrawable(Drawable d)",
    "returnType" : "void",
    "comment" : "\n     * Sets the drawable to be used to display the indeterminate progress value.\n     *\n     * @param d the drawable to be used\n     *\n     * @see ProgressBar#setProgressDrawable(Drawable)\n     * @see #setIndeterminate(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setIndeterminate(boolean indeterminate)",
    "returnType" : "void",
    "comment" : "\n     * Change the indeterminate mode for this ProgressDialog. In indeterminate\n     * mode, the progress is ignored and the dialog shows an infinite\n     * animation instead.\n     *\n     * <p><strong>Note:</strong> A ProgressDialog with style {@link #STYLE_SPINNER}\n     * is always indeterminate and will ignore this setting.</p>\n     *\n     * @param indeterminate true to enable indeterminate mode, false otherwise\n     *\n     * @see #setProgressStyle(int)\n     ",
    "links" : [ "#STYLE_SPINNER" ]
  }, {
    "name" : "public boolean isIndeterminate()",
    "returnType" : "boolean",
    "comment" : "\n     * Whether this ProgressDialog is in indeterminate mode.\n     *\n     * @return true if the dialog is in indeterminate mode, false otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMessage(CharSequence message)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setProgressStyle(int style)",
    "returnType" : "void",
    "comment" : "\n     * Sets the style of this ProgressDialog, either {@link #STYLE_SPINNER} or\n     * {@link #STYLE_HORIZONTAL}. The default is {@link #STYLE_SPINNER}.\n     *\n     * <p><strong>Note:</strong> A ProgressDialog with style {@link #STYLE_SPINNER}\n     * is always indeterminate and will ignore the {@link #setIndeterminate(boolean)\n     * indeterminate} setting.</p>\n     *\n     * @param style the style of this ProgressDialog, either {@link #STYLE_SPINNER} or\n     * {@link #STYLE_HORIZONTAL}\n     ",
    "links" : [ "#STYLE_SPINNER", "#setIndeterminate(boolean)", "#STYLE_HORIZONTAL" ]
  }, {
    "name" : "public void setProgressNumberFormat(String format)",
    "returnType" : "void",
    "comment" : "\n     * Change the format of the small text showing current and maximum units\n     * of progress.  The default is \"%1d/%2d\".\n     * Should not be called during the number is progressing.\n     * @param format A string passed to {@link String#format String.format()};\n     * use \"%1d\" for the current number and \"%2d\" for the maximum.  If null,\n     * nothing will be shown.\n     ",
    "links" : [ "android.text.SpannableString#format" ]
  }, {
    "name" : "public void setProgressPercentFormat(NumberFormat format)",
    "returnType" : "void",
    "comment" : "\n     * Change the format of the small text showing the percentage of progress.\n     * The default is\n     * {@link NumberFormat#getPercentInstance() NumberFormat.getPercentageInstnace().}\n     * Should not be called during the number is progressing.\n     * @param format An instance of a {@link NumberFormat} to generate the\n     * percentage text.  If null, nothing will be shown.\n     ",
    "links" : [ "java.text.NumberFormat#getPercentInstance()", "java.text.NumberFormat" ]
  }, {
    "name" : "private void onProgressChanged()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "STYLE_SPINNER", "STYLE_HORIZONTAL", "mProgress", "mMessageView", "mProgressStyle", "mProgressNumber", "mProgressNumberFormat", "mProgressPercent", "mProgressPercentFormat", "mMax", "mProgressVal", "mSecondaryProgressVal", "mIncrementBy", "mIncrementSecondaryBy", "mProgressDrawable", "mIndeterminateDrawable", "mMessage", "mIndeterminate", "mHasStarted", "mViewUpdateHandler" ],
  "methodNames" : [ "private void initFormats()", "public static ProgressDialog show(Context context, CharSequence title, CharSequence message)", "public static ProgressDialog show(Context context, CharSequence title, CharSequence message, boolean indeterminate)", "public static ProgressDialog show(Context context, CharSequence title, CharSequence message, boolean indeterminate, boolean cancelable)", "public static ProgressDialog show(Context context, CharSequence title, CharSequence message, boolean indeterminate, boolean cancelable, OnCancelListener cancelListener)", "protected void onCreate(Bundle savedInstanceState)", "public void onStart()", "protected void onStop()", "public void setProgress(int value)", "public void setSecondaryProgress(int secondaryProgress)", "public int getProgress()", "public int getSecondaryProgress()", "public int getMax()", "public void setMax(int max)", "public void incrementProgressBy(int diff)", "public void incrementSecondaryProgressBy(int diff)", "public void setProgressDrawable(Drawable d)", "public void setIndeterminateDrawable(Drawable d)", "public void setIndeterminate(boolean indeterminate)", "public boolean isIndeterminate()", "public void setMessage(CharSequence message)", "public void setProgressStyle(int style)", "public void setProgressNumberFormat(String format)", "public void setProgressPercentFormat(NumberFormat format)", "private void onProgressChanged()" ]
}