{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/text/method/DigitsKeyListener.java",
  "packageName" : "android.text.method",
  "className" : "DigitsKeyListener",
  "comment" : "\n * For digits-only text entry\n * <p></p>\n * As for all implementations of {@link KeyListener}, this class is only concerned\n * with hardware keyboards.  Software input methods have no obligation to trigger\n * the methods in this class.\n ",
  "variables" : [ {
    "name" : "mAccepted",
    "type" : "char[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNeedsAdvancedInput",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSign",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDecimal",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStringMode",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLocale",
    "type" : "Locale",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_DECIMAL_POINT_CHARS",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_SIGN_CHARS",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HYPHEN_MINUS",
    "type" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MINUS_SIGN",
    "type" : "char",
    "comment" : " Various locales use this as minus sign",
    "links" : [ ]
  }, {
    "name" : "EN_DASH",
    "type" : "char",
    "comment" : " Slovenian uses this as minus sign (a bug?): http://unicode.org/cldr/trac/ticket/10050",
    "links" : [ ]
  }, {
    "name" : "mDecimalPointChars",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSignChars",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SIGN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DECIMAL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "COMPATIBILITY_CHARACTERS",
    "type" : "char[][]",
    "comment" : "\n     * The characters that are used in compatibility mode.\n     *\n     * @see KeyEvent#getMatch\n     * @see #getAcceptedChars\n     ",
    "links" : [ ]
  }, {
    "name" : "sLocaleCacheLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sLocaleInstanceCache",
    "type" : "HashMap<Locale, DigitsKeyListener[]>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sStringCacheLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sStringInstanceCache",
    "type" : "HashMap<String, DigitsKeyListener>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected char[] getAcceptedChars()",
    "returnType" : "char[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isSignChar(final char c)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isDecimalPointChar(final char c)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setToCompat()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void calculateNeedForAdvancedInput()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String stripBidiControls(@NonNull String sign)",
    "returnType" : "String",
    "comment" : " Takes a sign string and strips off its bidi controls, if any.",
    "links" : [ ]
  }, {
    "name" : "public static DigitsKeyListener getInstance()",
    "returnType" : "DigitsKeyListener",
    "comment" : "\n     * Returns a DigitsKeyListener that accepts the ASCII digits 0 through 9.\n     *\n     * @deprecated Use {@link #getInstance(Locale)} instead.\n     ",
    "links" : [ "#getInstance" ]
  }, {
    "name" : "public static DigitsKeyListener getInstance(boolean sign, boolean decimal)",
    "returnType" : "DigitsKeyListener",
    "comment" : "\n     * Returns a DigitsKeyListener that accepts the ASCII digits 0 through 9, plus the ASCII plus\n     * or minus sign (only at the beginning) and/or the ASCII period ('.') as the decimal point\n     * (only one per field) if specified.\n     *\n     * @deprecated Use {@link #getInstance(Locale, boolean, boolean)} instead.\n     ",
    "links" : [ "#getInstance" ]
  }, {
    "name" : "public static DigitsKeyListener getInstance(@Nullable Locale locale)",
    "returnType" : "DigitsKeyListener",
    "comment" : "\n     * Returns a DigitsKeyListener that accepts the locale-appropriate digits.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static DigitsKeyListener getInstance(@Nullable Locale locale, boolean sign, boolean decimal)",
    "returnType" : "DigitsKeyListener",
    "comment" : "\n     * Returns a DigitsKeyListener that accepts the locale-appropriate digits, plus the\n     * locale-appropriate plus or minus sign (only at the beginning) and/or the locale-appropriate\n     * decimal separator (only one per field) if specified.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static DigitsKeyListener getInstance(@NonNull String accepted)",
    "returnType" : "DigitsKeyListener",
    "comment" : "\n     * Returns a DigitsKeyListener that accepts only the characters\n     * that appear in the specified String.  Note that not all characters\n     * may be available on every keyboard.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static DigitsKeyListener getInstance(@Nullable Locale locale, @NonNull DigitsKeyListener listener)",
    "returnType" : "DigitsKeyListener",
    "comment" : "\n     * Returns a DigitsKeyListener based on an the settings of a existing DigitsKeyListener, with\n     * the locale modified.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getInputType()",
    "returnType" : "int",
    "comment" : "\n     * Returns the input type for the listener.\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence filter(CharSequence source, int start, int end, Spanned dest, int dstart, int dend)",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "mAccepted", "mNeedsAdvancedInput", "mSign", "mDecimal", "mStringMode", "mLocale", "DEFAULT_DECIMAL_POINT_CHARS", "DEFAULT_SIGN_CHARS", "HYPHEN_MINUS", "MINUS_SIGN", "EN_DASH", "mDecimalPointChars", "mSignChars", "SIGN", "DECIMAL", "COMPATIBILITY_CHARACTERS", "sLocaleCacheLock", "sLocaleInstanceCache", "sStringCacheLock", "sStringInstanceCache" ],
  "methodNames" : [ "protected char[] getAcceptedChars()", "private boolean isSignChar(final char c)", "private boolean isDecimalPointChar(final char c)", "private void setToCompat()", "private void calculateNeedForAdvancedInput()", "private static String stripBidiControls(@NonNull String sign)", "public static DigitsKeyListener getInstance()", "public static DigitsKeyListener getInstance(boolean sign, boolean decimal)", "public static DigitsKeyListener getInstance(@Nullable Locale locale)", "public static DigitsKeyListener getInstance(@Nullable Locale locale, boolean sign, boolean decimal)", "public static DigitsKeyListener getInstance(@NonNull String accepted)", "public static DigitsKeyListener getInstance(@Nullable Locale locale, @NonNull DigitsKeyListener listener)", "public int getInputType()", "public CharSequence filter(CharSequence source, int start, int end, Spanned dest, int dstart, int dend)" ]
}