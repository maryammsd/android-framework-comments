{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/view/KeyEvent.java",
  "packageName" : "android.view",
  "className" : "DispatcherState",
  "comment" : "\n     * Use with {@link KeyEvent#dispatch(Callback, DispatcherState, Object)}\n     * for more advanced key dispatching, such as long presses.\n     ",
  "variables" : [ {
    "name" : "mDownKeyCode",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDownTarget",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mActiveLongPresses",
    "type" : "SparseIntArray",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void reset()",
    "returnType" : "void",
    "comment" : "\n         * Reset back to initial state.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void reset(Object target)",
    "returnType" : "void",
    "comment" : "\n         * Stop any tracking associated with this target.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void startTracking(KeyEvent event, Object target)",
    "returnType" : "void",
    "comment" : "\n         * Start tracking the key code associated with the given event.  This\n         * can only be called on a key down.  It will allow you to see any\n         * long press associated with the key, and will result in\n         * {@link KeyEvent#isTracking} return true on the long press and up\n         * events.\n         *\n         * <p>This is only needed if you are directly dispatching events, rather\n         * than handling them in {@link Callback#onKeyDown}.\n         ",
    "links" : [ "KeyEvent#isTracking", "Callback#onKeyDown" ]
  }, {
    "name" : "public boolean isTracking(KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "\n         * Return true if the key event is for a key code that is currently\n         * being tracked by the dispatcher.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void performedLongPress(KeyEvent event)",
    "returnType" : "void",
    "comment" : "\n         * Keep track of the given event's key code as having performed an\n         * action with a long press, so no action should occur on the up.\n         * <p>This is only needed if you are directly dispatching events, rather\n         * than handling them in {@link Callback#onKeyLongPress}.\n         ",
    "links" : [ "Callback#onKeyLongPress" ]
  }, {
    "name" : "public void handleUpEvent(KeyEvent event)",
    "returnType" : "void",
    "comment" : "\n         * Handle key up event to stop tracking.  This resets the dispatcher state,\n         * and updates the key event state based on it.\n         * <p>This is only needed if you are directly dispatching events, rather\n         * than handling them in {@link Callback#onKeyUp}.\n         ",
    "links" : [ "Callback#onKeyUp" ]
  } ],
  "variableNames" : [ "mDownKeyCode", "mDownTarget", "mActiveLongPresses" ],
  "methodNames" : [ "public void reset()", "public void reset(Object target)", "public void startTracking(KeyEvent event, Object target)", "public boolean isTracking(KeyEvent event)", "public void performedLongPress(KeyEvent event)", "public void handleUpEvent(KeyEvent event)" ]
}