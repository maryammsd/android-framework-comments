{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/role/RoleControllerService.java",
  "packageName" : "android.app.role",
  "className" : "RoleControllerService",
  "comment" : "\n * Abstract base class for the role controller service.\n * <p>\n * Subclass should implement the business logic for role management, including enforcing role\n * requirements and granting or revoking relevant privileges of roles. This class can only be\n * implemented by the permission controller app which is registered in {@code PackageManager}.\n *\n * @deprecated The role controller service is an internal implementation detail inside role, and it\n *             may be replaced by other mechanisms in the future and no longer be called.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "LOG_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SERVICE_INTERFACE",
    "type" : "String",
    "comment" : "\n     * The {@link Intent} that must be declared as handled by the service.\n     ",
    "links" : [ "android.content.Intent" ]
  }, {
    "name" : "mWorkerThread",
    "type" : "HandlerThread",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWorkerHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void onCreate()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onDestroy()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final IBinder onBind(@Nullable Intent intent)",
    "returnType" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void grantDefaultRoles(RemoteCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onAddRoleHolder(@NonNull String roleName, @NonNull String packageName, @RoleManager.ManageHoldersFlags int flags, RemoteCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onRemoveRoleHolder(@NonNull String roleName, @NonNull String packageName, @RoleManager.ManageHoldersFlags int flags, RemoteCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onClearRoleHolders(@NonNull String roleName, @RoleManager.ManageHoldersFlags int flags, RemoteCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean onGrantDefaultRoles()",
    "returnType" : "boolean",
    "comment" : "\n     * Called by system to grant default permissions and roles.\n     * <p>\n     * This is typically when creating a new user or upgrading either system or\n     * permission controller package\n     *\n     * @return whether this call was successful\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean onAddRoleHolder(@NonNull String roleName, @NonNull String packageName, @RoleManager.ManageHoldersFlags int flags)",
    "returnType" : "boolean",
    "comment" : "\n     * Add a specific application to the holders of a role. If the role is exclusive, the previous\n     * holder will be replaced.\n     * <p>\n     * Implementation should enforce the role requirements and grant or revoke the relevant\n     * privileges of roles.\n     *\n     * @param roleName the name of the role to add the role holder for\n     * @param packageName the package name of the application to add to the role holders\n     * @param flags optional behavior flags\n     *\n     * @return whether this call was successful\n     *\n     * @see RoleManager#addRoleHolderAsUser(String, String, int, UserHandle, Executor,\n     *      RemoteCallback)\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean onRemoveRoleHolder(@NonNull String roleName, @NonNull String packageName, @RoleManager.ManageHoldersFlags int flags)",
    "returnType" : "boolean",
    "comment" : "\n     * Remove a specific application from the holders of a role.\n     *\n     * @param roleName the name of the role to remove the role holder for\n     * @param packageName the package name of the application to remove from the role holders\n     * @param flags optional behavior flags\n     *\n     * @return whether this call was successful\n     *\n     * @see RoleManager#removeRoleHolderAsUser(String, String, int, UserHandle, Executor,\n     *      RemoteCallback)\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean onClearRoleHolders(@NonNull String roleName, @RoleManager.ManageHoldersFlags int flags)",
    "returnType" : "boolean",
    "comment" : "\n     * Remove all holders of a role.\n     *\n     * @param roleName the name of the role to remove role holders for\n     * @param flags optional behavior flags\n     *\n     * @return whether this call was successful\n     *\n     * @see RoleManager#clearRoleHoldersAsUser(String, int, UserHandle, Executor, RemoteCallback)\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean onIsApplicationQualifiedForRole(@NonNull String roleName, @NonNull String packageName)",
    "returnType" : "boolean",
    "comment" : "\n     * Check whether an application is qualified for a role.\n     *\n     * @param roleName name of the role to check for\n     * @param packageName package name of the application to check for\n     *\n     * @return whether the application is qualified for the role\n     *\n     * @deprecated Implement {@link #onIsApplicationVisibleForRole(String, String)} instead.\n     ",
    "links" : [ "#onIsApplicationVisibleForRole(String" ]
  }, {
    "name" : "public boolean onIsApplicationVisibleForRole(@NonNull String roleName, @NonNull String packageName)",
    "returnType" : "boolean",
    "comment" : "\n     * Check whether an application is visible for a role.\n     *\n     * While an application can be qualified for a role, it can still stay hidden from user (thus\n     * not visible). If an application is visible for a role, we may show things related to the role\n     * for it, e.g. showing an entry pointing to the role settings in its application info page.\n     *\n     * @param roleName name of the role to check for\n     * @param packageName package name of the application to check for\n     *\n     * @return whether the application is visible for the role\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean onIsRoleVisible(@NonNull String roleName)",
    "returnType" : "boolean",
    "comment" : "\n     * Check whether a role should be visible to user.\n     *\n     * @param roleName name of the role to check for\n     *\n     * @return whether the role should be visible to user\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<String> onGetLegacyFallbackDisabledRoles()",
    "returnType" : "List<String>",
    "comment" : "\n     * Get the legacy fallback disabled state.\n     *\n     * @return A list of role names with disabled fallback state.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void onCreate()", "public void onDestroy()", "public final IBinder onBind(@Nullable Intent intent)", "private void grantDefaultRoles(RemoteCallback callback)", "private void onAddRoleHolder(@NonNull String roleName, @NonNull String packageName, @RoleManager.ManageHoldersFlags int flags, RemoteCallback callback)", "private void onRemoveRoleHolder(@NonNull String roleName, @NonNull String packageName, @RoleManager.ManageHoldersFlags int flags, RemoteCallback callback)", "private void onClearRoleHolders(@NonNull String roleName, @RoleManager.ManageHoldersFlags int flags, RemoteCallback callback)", "public abstract boolean onGrantDefaultRoles()", "public abstract boolean onAddRoleHolder(@NonNull String roleName, @NonNull String packageName, @RoleManager.ManageHoldersFlags int flags)", "public abstract boolean onRemoveRoleHolder(@NonNull String roleName, @NonNull String packageName, @RoleManager.ManageHoldersFlags int flags)", "public abstract boolean onClearRoleHolders(@NonNull String roleName, @RoleManager.ManageHoldersFlags int flags)", "public abstract boolean onIsApplicationQualifiedForRole(@NonNull String roleName, @NonNull String packageName)", "public boolean onIsApplicationVisibleForRole(@NonNull String roleName, @NonNull String packageName)", "public abstract boolean onIsRoleVisible(@NonNull String roleName)", "public List<String> onGetLegacyFallbackDisabledRoles()" ],
  "variableNames" : [ "LOG_TAG", "SERVICE_INTERFACE", "mWorkerThread", "mWorkerHandler" ]
}