{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/bluetooth/BluetoothA2dp.java",
  "packageName" : "android.bluetooth",
  "className" : "BluetoothA2dp",
  "comment" : "\n * This class provides the public APIs to control the Bluetooth A2DP\n * profile.\n *\n * <p>BluetoothA2dp is a proxy object for controlling the Bluetooth A2DP\n * Service via IPC. Use {@link BluetoothAdapter#getProfileProxy} to get\n * the BluetoothA2dp proxy object.\n *\n * <p> Android only supports one connected Bluetooth A2dp device at a time.\n * Each method is protected with its appropriate permission.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VDBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ACTION_CONNECTION_STATE_CHANGED",
    "type" : "String",
    "comment" : "\n     * Intent used to broadcast the change in connection state of the A2DP\n     * profile.\n     *\n     * <p>This intent will have 3 extras:\n     * <ul>\n     * <li> {@link #EXTRA_STATE} - The current state of the profile. </li>\n     * <li> {@link #EXTRA_PREVIOUS_STATE}- The previous state of the profile.</li>\n     * <li> {@link BluetoothDevice#EXTRA_DEVICE} - The remote device. </li>\n     * </ul>\n     *\n     * <p>{@link #EXTRA_STATE} or {@link #EXTRA_PREVIOUS_STATE} can be any of\n     * {@link #STATE_DISCONNECTED}, {@link #STATE_CONNECTING},\n     * {@link #STATE_CONNECTED}, {@link #STATE_DISCONNECTING}.\n     *\n     * <p>Requires {@link android.Manifest.permission#BLUETOOTH} permission to\n     * receive.\n     ",
    "links" : [ "#EXTRA_STATE", "#EXTRA_PREVIOUS_STATE", "BluetoothDevice#EXTRA_DEVICE", "#EXTRA_STATE", "#EXTRA_PREVIOUS_STATE", "#STATE_DISCONNECTED", "#STATE_CONNECTING", "#STATE_CONNECTED", "#STATE_DISCONNECTING", "android.Manifest.permission#BLUETOOTH" ]
  }, {
    "name" : "ACTION_PLAYING_STATE_CHANGED",
    "type" : "String",
    "comment" : "\n     * Intent used to broadcast the change in the Playing state of the A2DP\n     * profile.\n     *\n     * <p>This intent will have 3 extras:\n     * <ul>\n     * <li> {@link #EXTRA_STATE} - The current state of the profile. </li>\n     * <li> {@link #EXTRA_PREVIOUS_STATE}- The previous state of the profile. </li>\n     * <li> {@link BluetoothDevice#EXTRA_DEVICE} - The remote device. </li>\n     * </ul>\n     *\n     * <p>{@link #EXTRA_STATE} or {@link #EXTRA_PREVIOUS_STATE} can be any of\n     * {@link #STATE_PLAYING}, {@link #STATE_NOT_PLAYING},\n     *\n     * <p>Requires {@link android.Manifest.permission#BLUETOOTH} permission to\n     * receive.\n     ",
    "links" : [ "#EXTRA_STATE", "#EXTRA_PREVIOUS_STATE", "BluetoothDevice#EXTRA_DEVICE", "#EXTRA_STATE", "#EXTRA_PREVIOUS_STATE", "#STATE_PLAYING", "#STATE_NOT_PLAYING", "android.Manifest.permission#BLUETOOTH" ]
  }, {
    "name" : "ACTION_AVRCP_CONNECTION_STATE_CHANGED",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "ACTION_ACTIVE_DEVICE_CHANGED",
    "type" : "String",
    "comment" : "\n     * Intent used to broadcast the selection of a connected device as active.\n     *\n     * <p>This intent will have one extra:\n     * <ul>\n     * <li> {@link BluetoothDevice#EXTRA_DEVICE} - The remote device. It can\n     * be null if no device is active. </li>\n     * </ul>\n     *\n     * <p>Requires {@link android.Manifest.permission#BLUETOOTH} permission to\n     * receive.\n     *\n     * @hide\n     ",
    "links" : [ "BluetoothDevice#EXTRA_DEVICE", "android.Manifest.permission#BLUETOOTH" ]
  }, {
    "name" : "ACTION_CODEC_CONFIG_CHANGED",
    "type" : "String",
    "comment" : "\n     * Intent used to broadcast the change in the Audio Codec state of the\n     * A2DP Source profile.\n     *\n     * <p>This intent will have 2 extras:\n     * <ul>\n     * <li> {@link BluetoothCodecStatus#EXTRA_CODEC_STATUS} - The codec status. </li>\n     * <li> {@link BluetoothDevice#EXTRA_DEVICE} - The remote device if the device is currently\n     * connected, otherwise it is not included.</li>\n     * </ul>\n     *\n     * <p>Requires {@link android.Manifest.permission#BLUETOOTH} permission to\n     * receive.\n     *\n     * @hide\n     ",
    "links" : [ "BluetoothCodecStatus#EXTRA_CODEC_STATUS", "BluetoothDevice#EXTRA_DEVICE", "android.Manifest.permission#BLUETOOTH" ]
  }, {
    "name" : "STATE_PLAYING",
    "type" : "int",
    "comment" : "\n     * A2DP sink device is streaming music. This state can be one of\n     * {@link #EXTRA_STATE} or {@link #EXTRA_PREVIOUS_STATE} of\n     * {@link #ACTION_PLAYING_STATE_CHANGED} intent.\n     ",
    "links" : [ "#EXTRA_STATE", "#EXTRA_PREVIOUS_STATE", "#ACTION_PLAYING_STATE_CHANGED" ]
  }, {
    "name" : "STATE_NOT_PLAYING",
    "type" : "int",
    "comment" : "\n     * A2DP sink device is NOT streaming music. This state can be one of\n     * {@link #EXTRA_STATE} or {@link #EXTRA_PREVIOUS_STATE} of\n     * {@link #ACTION_PLAYING_STATE_CHANGED} intent.\n     ",
    "links" : [ "#EXTRA_STATE", "#EXTRA_PREVIOUS_STATE", "#ACTION_PLAYING_STATE_CHANGED" ]
  }, {
    "name" : "OPTIONAL_CODECS_SUPPORT_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * We don't have a stored preference for whether or not the given A2DP sink device supports\n     * optional codecs.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "OPTIONAL_CODECS_NOT_SUPPORTED",
    "type" : "int",
    "comment" : "\n     * The given A2DP sink device does not support optional codecs.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "OPTIONAL_CODECS_SUPPORTED",
    "type" : "int",
    "comment" : "\n     * The given A2DP sink device does support optional codecs.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "OPTIONAL_CODECS_PREF_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * We don't have a stored preference for whether optional codecs should be enabled or\n     * disabled for the given A2DP device.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "OPTIONAL_CODECS_PREF_DISABLED",
    "type" : "int",
    "comment" : "\n     * Optional codecs should be disabled for the given A2DP device.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "OPTIONAL_CODECS_PREF_ENABLED",
    "type" : "int",
    "comment" : "\n     * Optional codecs should be enabled for the given A2DP device.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mAdapter",
    "type" : "BluetoothAdapter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProfileConnector",
    "type" : "BluetoothProfileConnector<IBluetoothA2dp>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " void close()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private IBluetoothA2dp getService()",
    "returnType" : "IBluetoothA2dp",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void finalize()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean connect(BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "\n     * Initiate connection to a profile of the remote Bluetooth device.\n     *\n     * <p> This API returns false in scenarios like the profile on the\n     * device is already connected or Bluetooth is not turned on.\n     * When this API returns true, it is guaranteed that\n     * connection state intent for the profile will be broadcasted with\n     * the state. Users can get the connection state of the profile\n     * from this intent.\n     *\n     *\n     * @param device Remote Bluetooth Device\n     * @return false on immediate error, true otherwise\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean disconnect(BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "\n     * Initiate disconnection from a profile\n     *\n     * <p> This API will return false in scenarios like the profile on the\n     * Bluetooth device is not in connected state etc. When this API returns,\n     * true, it is guaranteed that the connection state change\n     * intent will be broadcasted with the state. Users can get the\n     * disconnection state of the profile from this intent.\n     *\n     * <p> If the disconnection is initiated by a remote device, the state\n     * will transition from {@link #STATE_CONNECTED} to\n     * {@link #STATE_DISCONNECTED}. If the disconnect is initiated by the\n     * host (local) device the state will transition from\n     * {@link #STATE_CONNECTED} to state {@link #STATE_DISCONNECTING} to\n     * state {@link #STATE_DISCONNECTED}. The transition to\n     * {@link #STATE_DISCONNECTING} can be used to distinguish between the\n     * two scenarios.\n     *\n     *\n     * @param device Remote Bluetooth Device\n     * @return false on immediate error, true otherwise\n     * @hide\n     ",
    "links" : [ "#STATE_CONNECTED", "#STATE_DISCONNECTED", "#STATE_CONNECTED", "#STATE_DISCONNECTING", "#STATE_DISCONNECTED", "#STATE_DISCONNECTING" ]
  }, {
    "name" : "public List<BluetoothDevice> getConnectedDevices()",
    "returnType" : "List<BluetoothDevice>",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<BluetoothDevice> getDevicesMatchingConnectionStates(int[] states)",
    "returnType" : "List<BluetoothDevice>",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getConnectionState(BluetoothDevice device)",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean setActiveDevice(@Nullable BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "\n     * Select a connected device as active.\n     *\n     * The active device selection is per profile. An active device's\n     * purpose is profile-specific. For example, A2DP audio streaming\n     * is to the active A2DP Sink device. If a remote device is not\n     * connected, it cannot be selected as active.\n     *\n     * <p> This API returns false in scenarios like the profile on the\n     * device is not connected or Bluetooth is not turned on.\n     * When this API returns true, it is guaranteed that the\n     * {@link #ACTION_ACTIVE_DEVICE_CHANGED} intent will be broadcasted\n     * with the active device.\n     *\n     * @param device the remote Bluetooth device. Could be null to clear\n     * the active device and stop streaming audio to a Bluetooth device.\n     * @return false on immediate error, true otherwise\n     * @hide\n     ",
    "links" : [ "#ACTION_ACTIVE_DEVICE_CHANGED" ]
  }, {
    "name" : "public BluetoothDevice getActiveDevice()",
    "returnType" : "BluetoothDevice",
    "comment" : "\n     * Get the connected device that is active.\n     *\n     * @return the connected device that is active or null if no device\n     * is active\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean setPriority(BluetoothDevice device, int priority)",
    "returnType" : "boolean",
    "comment" : "\n     * Set priority of the profile\n     *\n     * <p> The device should already be paired.\n     * Priority can be one of {@link #PRIORITY_ON} or {@link #PRIORITY_OFF}\n     *\n     * @param device Paired bluetooth device\n     * @param priority\n     * @return true if priority is set, false on error\n     * @hide\n     ",
    "links" : [ "#PRIORITY_ON", "#PRIORITY_OFF" ]
  }, {
    "name" : "public boolean setConnectionPolicy(@NonNull BluetoothDevice device, @ConnectionPolicy int connectionPolicy)",
    "returnType" : "boolean",
    "comment" : "\n     * Set connection policy of the profile\n     *\n     * <p> The device should already be paired.\n     * Connection policy can be one of {@link #CONNECTION_POLICY_ALLOWED},\n     * {@link #CONNECTION_POLICY_FORBIDDEN}, {@link #CONNECTION_POLICY_UNKNOWN}\n     *\n     * @param device Paired bluetooth device\n     * @param connectionPolicy is the connection policy to set to for this profile\n     * @return true if connectionPolicy is set, false on error\n     * @hide\n     ",
    "links" : [ "#CONNECTION_POLICY_ALLOWED", "#CONNECTION_POLICY_FORBIDDEN", "#CONNECTION_POLICY_UNKNOWN" ]
  }, {
    "name" : "public int getPriority(BluetoothDevice device)",
    "returnType" : "int",
    "comment" : "\n     * Get the priority of the profile.\n     *\n     * <p> The priority can be any of:\n     * {@link #PRIORITY_OFF}, {@link #PRIORITY_ON}, {@link #PRIORITY_UNDEFINED}\n     *\n     * @param device Bluetooth device\n     * @return priority of the device\n     * @hide\n     ",
    "links" : [ "#PRIORITY_OFF", "#PRIORITY_ON", "#PRIORITY_UNDEFINED" ]
  }, {
    "name" : "public int getConnectionPolicy(@NonNull BluetoothDevice device)",
    "returnType" : "int",
    "comment" : "\n     * Get the connection policy of the profile.\n     *\n     * <p> The connection policy can be any of:\n     * {@link #CONNECTION_POLICY_ALLOWED}, {@link #CONNECTION_POLICY_FORBIDDEN},\n     * {@link #CONNECTION_POLICY_UNKNOWN}\n     *\n     * @param device Bluetooth device\n     * @return connection policy of the device\n     * @hide\n     ",
    "links" : [ "#CONNECTION_POLICY_ALLOWED", "#CONNECTION_POLICY_FORBIDDEN", "#CONNECTION_POLICY_UNKNOWN" ]
  }, {
    "name" : "public boolean isAvrcpAbsoluteVolumeSupported()",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if Avrcp device supports the absolute volume feature.\n     *\n     * @return true if device supports absolute volume\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAvrcpAbsoluteVolume(int volume)",
    "returnType" : "void",
    "comment" : "\n     * Tells remote device to set an absolute volume. Only if absolute volume is supported\n     *\n     * @param volume Absolute volume to be set on AVRCP side\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isA2dpPlaying(BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if A2DP profile is streaming music.\n     *\n     * <p>Requires {@link android.Manifest.permission#BLUETOOTH} permission.\n     *\n     * @param device BluetoothDevice device\n     ",
    "links" : [ "android.Manifest.permission#BLUETOOTH" ]
  }, {
    "name" : "public boolean shouldSendVolumeKeys(BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "\n     * This function checks if the remote device is an AVCRP\n     * target and thus whether we should send volume keys\n     * changes or not.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public BluetoothCodecStatus getCodecStatus(@NonNull BluetoothDevice device)",
    "returnType" : "BluetoothCodecStatus",
    "comment" : "\n     * Gets the current codec status (configuration and capability).\n     *\n     * @param device the remote Bluetooth device. If null, use the current\n     * active A2DP Bluetooth device.\n     * @return the current codec status\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCodecConfigPreference(@NonNull BluetoothDevice device, @NonNull BluetoothCodecConfig codecConfig)",
    "returnType" : "void",
    "comment" : "\n     * Sets the codec configuration preference.\n     *\n     * @param device the remote Bluetooth device. If null, use the current\n     * active A2DP Bluetooth device.\n     * @param codecConfig the codec configuration preference\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void enableOptionalCodecs(@NonNull BluetoothDevice device)",
    "returnType" : "void",
    "comment" : "\n     * Enables the optional codecs.\n     *\n     * @param device the remote Bluetooth device. If null, use the currect\n     * active A2DP Bluetooth device.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void disableOptionalCodecs(@NonNull BluetoothDevice device)",
    "returnType" : "void",
    "comment" : "\n     * Disables the optional codecs.\n     *\n     * @param device the remote Bluetooth device. If null, use the currect\n     * active A2DP Bluetooth device.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void enableDisableOptionalCodecs(BluetoothDevice device, boolean enable)",
    "returnType" : "void",
    "comment" : "\n     * Enables or disables the optional codecs.\n     *\n     * @param device the remote Bluetooth device. If null, use the currect\n     * active A2DP Bluetooth device.\n     * @param enable if true, enable the optional codecs, other disable them\n     ",
    "links" : [ ]
  }, {
    "name" : "public int isOptionalCodecsSupported(@NonNull BluetoothDevice device)",
    "returnType" : "int",
    "comment" : "\n     * Returns whether this device supports optional codecs.\n     *\n     * @param device The device to check\n     * @return one of OPTIONAL_CODECS_SUPPORT_UNKNOWN, OPTIONAL_CODECS_NOT_SUPPORTED, or\n     * OPTIONAL_CODECS_SUPPORTED.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int isOptionalCodecsEnabled(@NonNull BluetoothDevice device)",
    "returnType" : "int",
    "comment" : "\n     * Returns whether this device should have optional codecs enabled.\n     *\n     * @param device The device in question.\n     * @return one of OPTIONAL_CODECS_PREF_UNKNOWN, OPTIONAL_CODECS_PREF_ENABLED, or\n     * OPTIONAL_CODECS_PREF_DISABLED.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOptionalCodecsEnabled(@NonNull BluetoothDevice device, @OptionalCodecsPreferenceStatus int value)",
    "returnType" : "void",
    "comment" : "\n     * Sets a persistent preference for whether a given device should have optional codecs enabled.\n     *\n     * @param device The device to set this preference for.\n     * @param value Whether the optional codecs should be enabled for this device.  This should be\n     * one of OPTIONAL_CODECS_PREF_UNKNOWN, OPTIONAL_CODECS_PREF_ENABLED, or\n     * OPTIONAL_CODECS_PREF_DISABLED.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String stateToString(int state)",
    "returnType" : "String",
    "comment" : "\n     * Helper for converting a state to a string.\n     *\n     * For debug use only - strings are not internationalized.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean isEnabled()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void verifyDeviceNotNull(BluetoothDevice device, String methodName)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isValidDevice(BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void log(String msg)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "DBG", "VDBG", "ACTION_CONNECTION_STATE_CHANGED", "ACTION_PLAYING_STATE_CHANGED", "ACTION_AVRCP_CONNECTION_STATE_CHANGED", "ACTION_ACTIVE_DEVICE_CHANGED", "ACTION_CODEC_CONFIG_CHANGED", "STATE_PLAYING", "STATE_NOT_PLAYING", "OPTIONAL_CODECS_SUPPORT_UNKNOWN", "OPTIONAL_CODECS_NOT_SUPPORTED", "OPTIONAL_CODECS_SUPPORTED", "OPTIONAL_CODECS_PREF_UNKNOWN", "OPTIONAL_CODECS_PREF_DISABLED", "OPTIONAL_CODECS_PREF_ENABLED", "mAdapter", "mProfileConnector" ],
  "methodNames" : [ " void close()", "private IBluetoothA2dp getService()", "public void finalize()", "public boolean connect(BluetoothDevice device)", "public boolean disconnect(BluetoothDevice device)", "public List<BluetoothDevice> getConnectedDevices()", "public List<BluetoothDevice> getDevicesMatchingConnectionStates(int[] states)", "public int getConnectionState(BluetoothDevice device)", "public boolean setActiveDevice(@Nullable BluetoothDevice device)", "public BluetoothDevice getActiveDevice()", "public boolean setPriority(BluetoothDevice device, int priority)", "public boolean setConnectionPolicy(@NonNull BluetoothDevice device, @ConnectionPolicy int connectionPolicy)", "public int getPriority(BluetoothDevice device)", "public int getConnectionPolicy(@NonNull BluetoothDevice device)", "public boolean isAvrcpAbsoluteVolumeSupported()", "public void setAvrcpAbsoluteVolume(int volume)", "public boolean isA2dpPlaying(BluetoothDevice device)", "public boolean shouldSendVolumeKeys(BluetoothDevice device)", "public BluetoothCodecStatus getCodecStatus(@NonNull BluetoothDevice device)", "public void setCodecConfigPreference(@NonNull BluetoothDevice device, @NonNull BluetoothCodecConfig codecConfig)", "public void enableOptionalCodecs(@NonNull BluetoothDevice device)", "public void disableOptionalCodecs(@NonNull BluetoothDevice device)", "private void enableDisableOptionalCodecs(BluetoothDevice device, boolean enable)", "public int isOptionalCodecsSupported(@NonNull BluetoothDevice device)", "public int isOptionalCodecsEnabled(@NonNull BluetoothDevice device)", "public void setOptionalCodecsEnabled(@NonNull BluetoothDevice device, @OptionalCodecsPreferenceStatus int value)", "public static String stateToString(int state)", "private boolean isEnabled()", "private void verifyDeviceNotNull(BluetoothDevice device, String methodName)", "private boolean isValidDevice(BluetoothDevice device)", "private static void log(String msg)" ]
}