{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/util/jar/StrictJarVerifier.java",
  "packageName" : "android.util.jar",
  "className" : "StrictJarVerifier",
  "comment" : "\n * Non-public class used by {@link JarFile} and {@link JarInputStream} to manage\n * the verification of signed JARs. {@code JarFile} and {@code JarInputStream}\n * objects are expected to have a {@code JarVerifier} instance member which\n * can be used to carry out the tasks associated with verifying a signed JAR.\n * These tasks would typically include:\n * <ul>\n * <li>verification of all signed signature files\n * <li>confirmation that all signed data was signed only by the party or parties\n * specified in the signature block data\n * <li>verification that the contents of all signature files (i.e. {@code .SF}\n * files) agree with the JAR entries information found in the JAR manifest.\n * </ul>\n ",
  "variables" : [ {
    "name" : "SF_ATTRIBUTE_ANDROID_APK_SIGNED_NAME",
    "type" : "String",
    "comment" : "\n     * {@code .SF} file header section attribute indicating that the APK is signed not just with\n     * JAR signature scheme but also with APK Signature Scheme v2 or newer. This attribute\n     * facilitates v2 signature stripping detection.\n     *\n     * <p>The attribute contains a comma-separated set of signature scheme IDs.\n     ",
    "links" : [ ]
  }, {
    "name" : "DIGEST_ALGORITHMS",
    "type" : "String[]",
    "comment" : "\n     * List of accepted digest algorithms. This list is in order from most\n     * preferred to least preferred.\n     ",
    "links" : [ ]
  }, {
    "name" : "jarName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "manifest",
    "type" : "StrictJarManifest",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "metaEntries",
    "type" : "HashMap<String, byte[]>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mainAttributesEnd",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "signatureSchemeRollbackProtectionsEnforced",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "signatures",
    "type" : "Hashtable<String, HashMap<String, Attributes>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "certificates",
    "type" : "Hashtable<String, Certificate[]>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "verifiedEntries",
    "type" : "Hashtable<String, Certificate[][]>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static SecurityException invalidDigest(String signatureFile, String name, String jarName)",
    "returnType" : "SecurityException",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static SecurityException failedVerification(String jarName, String signatureFile)",
    "returnType" : "SecurityException",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static SecurityException failedVerification(String jarName, String signatureFile, Throwable e)",
    "returnType" : "SecurityException",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " VerifierEntry initEntry(String name)",
    "returnType" : "VerifierEntry",
    "comment" : "\n     * Invoked for each new JAR entry read operation from the input\n     * stream. This method constructs and returns a new {@link VerifierEntry}\n     * which contains the certificates used to sign the entry and its hash value\n     * as specified in the JAR MANIFEST format.\n     *\n     * @param name\n     *            the name of an entry in a JAR file which is <b>not</b> in the\n     *            {@code META-INF} directory.\n     * @return a new instance of {@link VerifierEntry} which can be used by\n     *         callers as an {@link OutputStream}.\n     ",
    "links" : [ "java.io.OutputStream", "VerifierEntry" ]
  }, {
    "name" : " void addMetaEntry(String name, byte[] buf)",
    "returnType" : "void",
    "comment" : "\n     * Add a new meta entry to the internal collection of data held on each JAR\n     * entry in the {@code META-INF} directory including the manifest\n     * file itself. Files associated with the signing of a JAR would also be\n     * added to this collection.\n     *\n     * @param name\n     *            the name of the file located in the {@code META-INF}\n     *            directory.\n     * @param buf\n     *            the file bytes for the file called {@code name}.\n     * @see #removeMetaEntries()\n     ",
    "links" : [ ]
  }, {
    "name" : " synchronized boolean readCertificates()",
    "returnType" : "boolean",
    "comment" : "\n     * If the associated JAR file is signed, check on the validity of all of the\n     * known signatures.\n     *\n     * @return {@code true} if the associated JAR is signed and an internal\n     *         check verifies the validity of the signature(s). {@code false} if\n     *         the associated JAR file has no entries at all in its {@code\n     *         META-INF} directory. This situation is indicative of an invalid\n     *         JAR file.\n     *         <p>\n     *         Will also return {@code true} if the JAR file is <i>not</i>\n     *         signed.\n     * @throws SecurityException\n     *             if the JAR file is signed and it is determined that a\n     *             signature block file contains an invalid signature for the\n     *             corresponding signature file.\n     ",
    "links" : [ ]
  }, {
    "name" : " static Certificate[] verifyBytes(byte[] blockBytes, byte[] sfBytes) throws GeneralSecurityException",
    "returnType" : "Certificate[]",
    "comment" : "\n     * Verifies that the signature computed from {@code sfBytes} matches\n     * that specified in {@code blockBytes} (which is a PKCS7 block). Returns\n     * certificates listed in the PKCS7 block. Throws a {@code GeneralSecurityException}\n     * if something goes wrong during verification.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void verifyCertificate(String certFile)",
    "returnType" : "void",
    "comment" : "\n     * @param certFile\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean isSignedJar()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns a <code>boolean</code> indication of whether or not the\n     * associated jar file is signed.\n     *\n     * @return {@code true} if the JAR is signed, {@code false}\n     *         otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean verify(Attributes attributes, String entry, byte[] data, int start, int end, boolean ignoreSecondEndline, boolean ignorable)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean verifyMessageDigest(byte[] expected, byte[] encodedActual)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " Certificate[][] getCertificateChains(String name)",
    "returnType" : "Certificate[][]",
    "comment" : "\n     * Returns all of the {@link java.security.cert.Certificate} chains that\n     * were used to verify the signature on the JAR entry called\n     * {@code name}. Callers must not modify the returned arrays.\n     *\n     * @param name\n     *            the name of a JAR entry.\n     * @return an array of {@link java.security.cert.Certificate} chains.\n     ",
    "links" : [ "java.security.cert.Certificate" ]
  }, {
    "name" : " void removeMetaEntries()",
    "returnType" : "void",
    "comment" : "\n     * Remove all entries from the internal collection of data held about each\n     * JAR entry in the {@code META-INF} directory.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "SF_ATTRIBUTE_ANDROID_APK_SIGNED_NAME", "DIGEST_ALGORITHMS", "jarName", "manifest", "metaEntries", "mainAttributesEnd", "signatureSchemeRollbackProtectionsEnforced", "signatures", "certificates", "verifiedEntries" ],
  "methodNames" : [ "private static SecurityException invalidDigest(String signatureFile, String name, String jarName)", "private static SecurityException failedVerification(String jarName, String signatureFile)", "private static SecurityException failedVerification(String jarName, String signatureFile, Throwable e)", " VerifierEntry initEntry(String name)", " void addMetaEntry(String name, byte[] buf)", " synchronized boolean readCertificates()", " static Certificate[] verifyBytes(byte[] blockBytes, byte[] sfBytes) throws GeneralSecurityException", "private void verifyCertificate(String certFile)", " boolean isSignedJar()", "private boolean verify(Attributes attributes, String entry, byte[] data, int start, int end, boolean ignoreSecondEndline, boolean ignorable)", "private static boolean verifyMessageDigest(byte[] expected, byte[] encodedActual)", " Certificate[][] getCertificateChains(String name)", " void removeMetaEntries()" ]
}