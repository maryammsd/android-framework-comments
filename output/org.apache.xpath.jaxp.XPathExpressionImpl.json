{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xpath/jaxp/XPathExpressionImpl.java",
  "packageName" : "org.apache.xpath.jaxp",
  "className" : "XPathExpressionImpl",
  "comment" : "\n * The XPathExpression interface encapsulates a (compiled) XPath expression.\n *\n * @version $Revision: 524813 $\n * @author  Ramesh Mandava\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "functionResolver",
    "type" : "XPathFunctionResolver",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "variableResolver",
    "type" : "XPathVariableResolver",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "prefixResolver",
    "type" : "JAXPPrefixResolver",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "xpath",
    "type" : "org.apache.xpath.XPath",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "featureSecureProcessing",
    "type" : "boolean",
    "comment" : " extensions function need to throw XPathFunctionException",
    "links" : [ ]
  }, {
    "name" : "dbf",
    "type" : "DocumentBuilderFactory",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "db",
    "type" : "DocumentBuilder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "d",
    "type" : "Document",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setXPath(org.apache.xpath.XPath xpath)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Object eval(Object item, QName returnType) throws javax.xml.transform.TransformerException",
    "returnType" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private XObject eval(Object contextItem) throws javax.xml.transform.TransformerException",
    "returnType" : "XObject",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Object evaluate(Object item, QName returnType) throws XPathExpressionException",
    "returnType" : "Object",
    "comment" : "\n     * <p>Evaluate the compiled XPath expression in the specified context and\n     *  return the result as the specified type.</p>\n     *\n     * <p>See \"Evaluation of XPath Expressions\" section of JAXP 1.3 spec\n     * for context item evaluation,\n     * variable, function and QName resolution and return type conversion.</p>\n     *\n     * <p>If <code>returnType</code> is not one of the types defined \n     * in {@link XPathConstants},\n     * then an <code>IllegalArgumentException</code> is thrown.</p>\n     *\n     * <p>If a <code>null</code> value is provided for\n     * <code>item</code>, an empty document will be used for the\n     * context.\n     * If <code>returnType</code> is <code>null</code>, then a \n     * <code>NullPointerException</code> is thrown.</p>\n     *\n     * @param item The starting context (node or node list, for example).\n     * @param returnType The desired return type.\n     *\n     * @return The <code>Object</code> that is the result of evaluating the\n     * expression and converting the result to\n     *   <code>returnType</code>.\n     *\n     * @throws XPathExpressionException If the expression cannot be evaluated.\n     * @throws IllegalArgumentException If <code>returnType</code> is not one\n     * of the types defined in {@link XPathConstants}.\n     * @throws NullPointerException If  <code>returnType</code> is\n     * <code>null</code>.\n     ",
    "links" : [ "javax.xml.xpath.XPathConstants" ]
  }, {
    "name" : "public String evaluate(Object item) throws XPathExpressionException",
    "returnType" : "String",
    "comment" : "\n     * <p>Evaluate the compiled XPath expression in the specified context and\n     * return the result as a <code>String</code>.</p>\n     *\n     * <p>This method calls {@link #evaluate(Object item, QName returnType)}\n     * with a <code>returnType</code> of\n     * {@link XPathConstants#STRING}.</p>\n     *\n     * <p>See \"Evaluation of XPath Expressions\" section of JAXP 1.3 spec\n     *  for context item evaluation,\n     * variable, function and QName resolution and return type conversion.</p>\n     *\n     * <p>If a <code>null</code> value is provided for\n     * <code>item</code>, an empty document will be used for the\n     * context.\n     *\n     * @param item The starting context (node or node list, for example).\n     *\n     * @return The <code>String</code> that is the result of evaluating the\n     * expression and converting the result to a\n     *   <code>String</code>.\n     *\n     * @throws XPathExpressionException If the expression cannot be evaluated.\n     ",
    "links" : [ "javax.xml.xpath.XPathConstants#STRING", "#evaluate(Object" ]
  }, {
    "name" : "public Object evaluate(InputSource source, QName returnType) throws XPathExpressionException",
    "returnType" : "Object",
    "comment" : "\n     * <p>Evaluate the compiled XPath expression in the context of the \n     * specified <code>InputSource</code> and return the result as the\n     *  specified type.</p>\n     *\n     * <p>This method builds a data model for the {@link InputSource} and calls\n     * {@link #evaluate(Object item, QName returnType)} on the resulting \n     * document object.</p>\n     *\n     * <p>See \"Evaluation of XPath Expressions\" section of JAXP 1.3 spec\n     *  for context item evaluation,\n     * variable, function and QName resolution and return type conversion.</p>\n     *\n     * <p>If <code>returnType</code> is not one of the types defined in \n     * {@link XPathConstants},\n     * then an <code>IllegalArgumentException</code> is thrown.</p>\n     *\n     *<p>If <code>source</code> or <code>returnType</code> is <code>null</code>,\n     * then a <code>NullPointerException</code> is thrown.</p>\n     *\n     * @param source The <code>InputSource</code> of the document to evaluate\n     * over.\n     * @param returnType The desired return type.\n     *\n     * @return The <code>Object</code> that is the result of evaluating the\n     * expression and converting the result to\n     *   <code>returnType</code>.\n     *\n     * @throws XPathExpressionException If the expression cannot be evaluated.\n     * @throws IllegalArgumentException If <code>returnType</code> is not one\n     * of the types defined in {@link XPathConstants}.\n     * @throws NullPointerException If  <code>source</code> or \n     * <code>returnType</code> is <code>null</code>.\n     ",
    "links" : [ "org.xml.sax.InputSource", "javax.xml.xpath.XPathConstants", "#evaluate(Object" ]
  }, {
    "name" : "public String evaluate(InputSource source) throws XPathExpressionException",
    "returnType" : "String",
    "comment" : "\n     * <p>Evaluate the compiled XPath expression in the context of the specified <code>InputSource</code> and return the result as a\n     * <code>String</code>.</p>\n     *\n     * <p>This method calls {@link #evaluate(InputSource source, QName returnType)} with a <code>returnType</code> of\n     * {@link XPathConstants#STRING}.</p>\n     *\n     * <p>See \"Evaluation of XPath Expressions\" section of JAXP 1.3 spec\n     * for context item evaluation,\n     * variable, function and QName resolution and return type conversion.</p>\n     *\n     * <p>If <code>source</code> is <code>null</code>, then a <code>NullPointerException</code> is thrown.</p>\n     *\n     * @param source The <code>InputSource</code> of the document to evaluate over.\n     *\n     * @return The <code>String</code> that is the result of evaluating the expression and converting the result to a\n     *   <code>String</code>.\n     *\n     * @throws XPathExpressionException If the expression cannot be evaluated.\n     * @throws NullPointerException If  <code>source</code> is <code>null</code>.\n     ",
    "links" : [ "javax.xml.xpath.XPathConstants#STRING", "#evaluate(InputSource" ]
  }, {
    "name" : "private boolean isSupported(QName returnType)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Object getResultAsType(XObject resultObject, QName returnType) throws javax.xml.transform.TransformerException",
    "returnType" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Document getDummyDocument()",
    "returnType" : "Document",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setXPath(org.apache.xpath.XPath xpath)", "public Object eval(Object item, QName returnType) throws javax.xml.transform.TransformerException", "private XObject eval(Object contextItem) throws javax.xml.transform.TransformerException", "public Object evaluate(Object item, QName returnType) throws XPathExpressionException", "public String evaluate(Object item) throws XPathExpressionException", "public Object evaluate(InputSource source, QName returnType) throws XPathExpressionException", "public String evaluate(InputSource source) throws XPathExpressionException", "private boolean isSupported(QName returnType)", "private Object getResultAsType(XObject resultObject, QName returnType) throws javax.xml.transform.TransformerException", "private static Document getDummyDocument()" ],
  "variableNames" : [ "functionResolver", "variableResolver", "prefixResolver", "xpath", "featureSecureProcessing", "dbf", "db", "d" ]
}