{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/widget/SuggestionsAdapter.java",
  "packageName" : "android.widget",
  "className" : "SuggestionsAdapter",
  "comment" : "\n * Provides the contents for the suggestion drop-down list.in {@link SearchDialog}.\n *\n * @hide\n ",
  "links" : [ "android.app.SearchDialog" ],
  "variables" : [ {
    "name" : "DBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOG_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "QUERY_LIMIT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "REFINE_NONE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "REFINE_BY_ENTRY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "REFINE_ALL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSearchManager",
    "type" : "SearchManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSearchView",
    "type" : "SearchView",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSearchable",
    "type" : "SearchableInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProviderContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOutsideDrawablesCache",
    "type" : "WeakHashMap<String, Drawable.ConstantState>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCommitIconResId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mClosed",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mQueryRefinement",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUrlColor",
    "type" : "ColorStateList",
    "comment" : " URL color",
    "links" : [ ]
  }, {
    "name" : "INVALID_INDEX",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mText1Col",
    "type" : "int",
    "comment" : " Cached column indexes, updated when the cursor changes.",
    "links" : [ ]
  }, {
    "name" : "mText2Col",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mText2UrlCol",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIconName1Col",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIconName2Col",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFlagsCol",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DELETE_KEY_POST_DELAY",
    "type" : "long",
    "comment" : "\n     * The amount of time we delay in the filter when the user presses the delete key.\n     * @see Filter#setDelayer(android.widget.Filter.Delayer).\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setQueryRefinement(int refineWhat)",
    "returnType" : "void",
    "comment" : "\n     * Enables query refinement for all suggestions. This means that an additional icon\n     * will be shown for each entry. When clicked, the suggested text on that line will be\n     * copied to the query text field.\n     * <p>\n     *\n     * @param refineWhat which queries to refine. Possible values are\n     *                   {@link #REFINE_NONE}, {@link #REFINE_BY_ENTRY}, and\n     *                   {@link #REFINE_ALL}.\n     ",
    "links" : [ "#REFINE_NONE", "#REFINE_BY_ENTRY", "#REFINE_ALL" ]
  }, {
    "name" : "public int getQueryRefinement()",
    "returnType" : "int",
    "comment" : "\n     * Returns the current query refinement preference.\n     * @return value of query refinement preference\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasStableIds()",
    "returnType" : "boolean",
    "comment" : "\n     * Overridden to always return <code>false</code>, since we cannot be sure that\n     * suggestion sources return stable IDs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Cursor runQueryOnBackgroundThread(CharSequence constraint)",
    "returnType" : "Cursor",
    "comment" : "\n     * Use the search suggestions provider to obtain a live cursor.  This will be called\n     * in a worker thread, so it's OK if the query is slow (e.g. round trip for suggestions).\n     * The results will be processed in the UI thread and changeCursor() will be called.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void notifyDataSetChanged()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void notifyDataSetInvalidated()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateSpinnerState(Cursor cursor)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void changeCursor(Cursor c)",
    "returnType" : "void",
    "comment" : "\n     * Cache columns.\n     ",
    "links" : [ ]
  }, {
    "name" : "public View newView(Context context, Cursor cursor, ViewGroup parent)",
    "returnType" : "View",
    "comment" : "\n     * Tags the view with cached child view look-ups.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void bindView(View view, Context context, Cursor cursor)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onClick(View v)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private CharSequence formatUrl(Context context, CharSequence url)",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setViewText(TextView v, CharSequence text)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Drawable getIcon1(Cursor cursor)",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Drawable getIcon2(Cursor cursor)",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setViewDrawable(ImageView v, Drawable drawable, int nullVisibility)",
    "returnType" : "void",
    "comment" : "\n     * Sets the drawable in an image view, makes sure the view is only visible if there\n     * is a drawable.\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence convertToString(Cursor cursor)",
    "returnType" : "CharSequence",
    "comment" : "\n     * Gets the text to show in the query field when a suggestion is selected.\n     *\n     * @param cursor The Cursor to read the suggestion data from. The Cursor should already\n     *        be moved to the suggestion that is to be read from.\n     * @return The text to show, or <code>null</code> if the query should not be\n     *         changed when selecting this suggestion.\n     ",
    "links" : [ ]
  }, {
    "name" : "public View getView(int position, View convertView, ViewGroup parent)",
    "returnType" : "View",
    "comment" : "\n     * This method is overridden purely to provide a bit of protection against\n     * flaky content providers.\n     *\n     * @see android.widget.ListAdapter#getView(int, View, ViewGroup)\n     ",
    "links" : [ ]
  }, {
    "name" : "public View getDropDownView(int position, View convertView, ViewGroup parent)",
    "returnType" : "View",
    "comment" : "\n     * This method is overridden purely to provide a bit of protection against\n     * flaky content providers.\n     *\n     * @see android.widget.CursorAdapter#getDropDownView(int, View, ViewGroup)\n     ",
    "links" : [ ]
  }, {
    "name" : "private Drawable getDrawableFromResourceValue(String drawableId)",
    "returnType" : "Drawable",
    "comment" : "\n     * Gets a drawable given a value provided by a suggestion provider.\n     *\n     * This value could be just the string value of a resource id\n     * (e.g., \"2130837524\"), in which case we will try to retrieve a drawable from\n     * the provider's resources. If the value is not an integer, it is\n     * treated as a Uri and opened with\n     * {@link ContentResolver#openOutputStream(android.net.Uri, String)}.\n     *\n     * All resources and URIs are read using the suggestion provider's context.\n     *\n     * If the string is not formatted as expected, or no drawable can be found for\n     * the provided value, this method returns null.\n     *\n     * @param drawableId a string like \"2130837524\",\n     *        \"android.resource://com.android.alarmclock/2130837524\",\n     *        or \"content://contacts/photos/253\".\n     * @return a Drawable, or null if none found\n     ",
    "links" : [ "android.content.ContentResolver#openOutputStream(android.net.Uri" ]
  }, {
    "name" : "private Drawable getDrawable(Uri uri)",
    "returnType" : "Drawable",
    "comment" : "\n     * Gets a drawable by URI, without using the cache.\n     *\n     * @return A drawable, or {@code null} if the drawable could not be loaded.\n     ",
    "links" : [ ]
  }, {
    "name" : "private Drawable checkIconCache(String resourceUri)",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void storeInIconCache(String resourceUri, Drawable drawable)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Drawable getDefaultIcon1(Cursor cursor)",
    "returnType" : "Drawable",
    "comment" : "\n     * Gets the left-hand side icon that will be used for the current suggestion\n     * if the suggestion contains an icon column but no icon or a broken icon.\n     *\n     * @param cursor A cursor positioned at the current suggestion.\n     * @return A non-null drawable.\n     ",
    "links" : [ ]
  }, {
    "name" : "private Drawable getActivityIconWithCache(ComponentName component)",
    "returnType" : "Drawable",
    "comment" : "\n     * Gets the activity or application icon for an activity.\n     * Uses the local icon cache for fast repeated lookups.\n     *\n     * @param component Name of an activity.\n     * @return A drawable, or {@code null} if neither the activity nor the application\n     *         has an icon set.\n     ",
    "links" : [ ]
  }, {
    "name" : "private Drawable getActivityIcon(ComponentName component)",
    "returnType" : "Drawable",
    "comment" : "\n     * Gets the activity or application icon for an activity.\n     *\n     * @param component Name of an activity.\n     * @return A drawable, or {@code null} if neither the acitivy or the application\n     *         have an icon set.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getColumnString(Cursor cursor, String columnName)",
    "returnType" : "String",
    "comment" : "\n     * Gets the value of a string column by name.\n     *\n     * @param cursor Cursor to read the value from.\n     * @param columnName The name of the column to read.\n     * @return The value of the given column, or <code>null</null>\n     *         if the cursor does not contain the given column.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String getStringOrNull(Cursor cursor, int col)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setQueryRefinement(int refineWhat)", "public int getQueryRefinement()", "public boolean hasStableIds()", "public Cursor runQueryOnBackgroundThread(CharSequence constraint)", "public void close()", "public void notifyDataSetChanged()", "public void notifyDataSetInvalidated()", "private void updateSpinnerState(Cursor cursor)", "public void changeCursor(Cursor c)", "public View newView(Context context, Cursor cursor, ViewGroup parent)", "public void bindView(View view, Context context, Cursor cursor)", "public void onClick(View v)", "private CharSequence formatUrl(Context context, CharSequence url)", "private void setViewText(TextView v, CharSequence text)", "private Drawable getIcon1(Cursor cursor)", "private Drawable getIcon2(Cursor cursor)", "private void setViewDrawable(ImageView v, Drawable drawable, int nullVisibility)", "public CharSequence convertToString(Cursor cursor)", "public View getView(int position, View convertView, ViewGroup parent)", "public View getDropDownView(int position, View convertView, ViewGroup parent)", "private Drawable getDrawableFromResourceValue(String drawableId)", "private Drawable getDrawable(Uri uri)", "private Drawable checkIconCache(String resourceUri)", "private void storeInIconCache(String resourceUri, Drawable drawable)", "private Drawable getDefaultIcon1(Cursor cursor)", "private Drawable getActivityIconWithCache(ComponentName component)", "private Drawable getActivityIcon(ComponentName component)", "public static String getColumnString(Cursor cursor, String columnName)", "private static String getStringOrNull(Cursor cursor, int col)" ],
  "variableNames" : [ "DBG", "LOG_TAG", "QUERY_LIMIT", "REFINE_NONE", "REFINE_BY_ENTRY", "REFINE_ALL", "mSearchManager", "mSearchView", "mSearchable", "mProviderContext", "mOutsideDrawablesCache", "mCommitIconResId", "mClosed", "mQueryRefinement", "mUrlColor", "INVALID_INDEX", "mText1Col", "mText2Col", "mText2UrlCol", "mIconName1Col", "mIconName2Col", "mFlagsCol", "DELETE_KEY_POST_DELAY" ]
}