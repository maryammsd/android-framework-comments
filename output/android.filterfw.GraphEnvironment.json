{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/filterfw/GraphEnvironment.java",
  "packageName" : "android.filterfw",
  "className" : "GraphEnvironment",
  "comment" : "\n * A GraphEnvironment provides a simple front-end to filter graph setup and execution using the\n * mobile filter framework. Typically, you use a GraphEnvironment in the following fashion:\n *   1. Instantiate a new GraphEnvironment instance.\n *   2. Perform any configuration, such as adding graph references and setting a GL environment.\n *   3. Load a graph file using loadGraph() or add a graph using addGraph().\n *   4. Obtain a GraphRunner instance using getRunner().\n *   5. Execute the obtained runner.\n * Note that it is possible to add multiple graphs and runners to a single GraphEnvironment.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "MODE_ASYNCHRONOUS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MODE_SYNCHRONOUS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGraphReader",
    "type" : "GraphReader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGraphs",
    "type" : "ArrayList<GraphHandle>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public GraphReader getGraphReader()",
    "returnType" : "GraphReader",
    "comment" : "\n     * Returns the used graph reader. This will create one, if a reader has not been set already.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addReferences(Object... references)",
    "returnType" : "void",
    "comment" : "\n     * Add graph references to resolve during graph reading. The references added here are shared\n     * among all graphs.\n     *\n     * @param references An alternating argument list of keys (Strings) and values.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int loadGraph(Context context, int resourceId)",
    "returnType" : "int",
    "comment" : "\n     * Loads a graph file from the specified resource and adds it to this environment.\n     *\n     * @param context       The context in which to read the resource.\n     * @param resourceId    The ID of the graph resource to load.\n     * @return              A unique ID for the graph.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int addGraph(FilterGraph graph)",
    "returnType" : "int",
    "comment" : "\n     * Add a graph to the environment. Consider using loadGraph() if you are loading a graph from\n     * a graph file.\n     *\n     * @param graph The graph to add to the environment.\n     * @return      A unique ID for the added graph.\n     ",
    "links" : [ ]
  }, {
    "name" : "public FilterGraph getGraph(int graphId)",
    "returnType" : "FilterGraph",
    "comment" : "\n     * Access a specific graph of this environment given a graph ID (previously returned from\n     * loadGraph() or addGraph()). Throws an InvalidArgumentException if no graph with the\n     * specified ID could be found.\n     *\n     * @param graphId   The ID of the graph to get.\n     * @return          The graph with the specified ID.\n     ",
    "links" : [ ]
  }, {
    "name" : "public GraphRunner getRunner(int graphId, int executionMode)",
    "returnType" : "GraphRunner",
    "comment" : "\n     * Get a GraphRunner instance for the graph with the specified ID. The GraphRunner instance can\n     * be used to execute the graph. Throws an InvalidArgumentException if no graph with the\n     * specified ID could be found.\n     *\n     * @param graphId       The ID of the graph to get.\n     * @param executionMode The mode of graph execution. Currently this can be either\n                            MODE_SYNCHRONOUS or MODE_ASYNCHRONOUS.\n     * @return              A GraphRunner instance for this graph.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "MODE_ASYNCHRONOUS", "MODE_SYNCHRONOUS", "mGraphReader", "mGraphs" ],
  "methodNames" : [ "public GraphReader getGraphReader()", "public void addReferences(Object... references)", "public int loadGraph(Context context, int resourceId)", "public int addGraph(FilterGraph graph)", "public FilterGraph getGraph(int graphId)", "public GraphRunner getRunner(int graphId, int executionMode)" ]
}