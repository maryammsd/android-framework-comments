{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/xml/sax/ext/DeclHandler.java",
  "packageName" : "org.xml.sax.ext",
  "className" : "DeclHandler",
  "comment" : "\n * SAX2 extension handler for DTD declaration events.\n *\n * <blockquote>\n * <em>This module, both source code and documentation, is in the\n * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>\n * See <a href='http://www.saxproject.org'>http://www.saxproject.org</a>\n * for further information.\n * </blockquote>\n *\n * <p>This is an optional extension handler for SAX2 to provide more\n * complete information about DTD declarations in an XML document.\n * XML readers are not required to recognize this handler, and it\n * is not part of core-only SAX2 distributions.</p>\n *\n * <p>Note that data-related DTD declarations (unparsed entities and\n * notations) are already reported through the {@link\n * org.xml.sax.DTDHandler DTDHandler} interface.</p>\n *\n * <p>If you are using the declaration handler together with a lexical\n * handler, all of the events will occur between the\n * {@link org.xml.sax.ext.LexicalHandler#startDTD startDTD} and the\n * {@link org.xml.sax.ext.LexicalHandler#endDTD endDTD} events.</p>\n *\n * <p>To set the DeclHandler for an XML reader, use the\n * {@link org.xml.sax.XMLReader#setProperty setProperty} method\n * with the property name\n * <code>http://xml.org/sax/properties/declaration-handler</code>\n * and an object implementing this interface (or null) as the value.\n * If the reader does not report declaration events, it will throw a\n * {@link org.xml.sax.SAXNotRecognizedException SAXNotRecognizedException}\n * when you attempt to register the handler.</p>\n *\n * @since SAX 2.0 (extensions 1.0)\n * @author David Megginson\n * @version 2.0.1 (sax2r2)\n ",
  "links" : [ "org.xml.sax.SAXNotRecognizedException", "org.xml.sax.ext.LexicalHandler#startDTD", "org.xml.sax.DTDHandler", "org.xml.sax.XMLReader#setProperty", "org.xml.sax.ext.LexicalHandler#endDTD" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public abstract void elementDecl(String name, String model) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Report an element type declaration.\n     *\n     * <p>The content model will consist of the string \"EMPTY\", the\n     * string \"ANY\", or a parenthesised group, optionally followed\n     * by an occurrence indicator.  The model will be normalized so\n     * that all parameter entities are fully resolved and all whitespace\n     * is removed,and will include the enclosing parentheses.  Other\n     * normalization (such as removing redundant parentheses or\n     * simplifying occurrence indicators) is at the discretion of the\n     * parser.</p>\n     *\n     * @param name The element type name.\n     * @param model The content model as a normalized string.\n     * @exception SAXException The application may raise an exception.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void attributeDecl(String eName, String aName, String type, String mode, String value) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Report an attribute type declaration.\n     *\n     * <p>Only the effective (first) declaration for an attribute will\n     * be reported.  The type will be one of the strings \"CDATA\",\n     * \"ID\", \"IDREF\", \"IDREFS\", \"NMTOKEN\", \"NMTOKENS\", \"ENTITY\",\n     * \"ENTITIES\", a parenthesized token group with\n     * the separator \"|\" and all whitespace removed, or the word\n     * \"NOTATION\" followed by a space followed by a parenthesized\n     * token group with all whitespace removed.</p>\n     *\n     * <p>The value will be the value as reported to applications,\n     * appropriately normalized and with entity and character\n     * references expanded.  </p>\n     *\n     * @param eName The name of the associated element.\n     * @param aName The name of the attribute.\n     * @param type A string representing the attribute type.\n     * @param mode A string representing the attribute defaulting mode\n     *        (\"#IMPLIED\", \"#REQUIRED\", or \"#FIXED\") or null if\n     *        none of these applies.\n     * @param value A string representing the attribute's default value,\n     *        or null if there is none.\n     * @exception SAXException The application may raise an exception.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void internalEntityDecl(String name, String value) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Report an internal entity declaration.\n     *\n     * <p>Only the effective (first) declaration for each entity\n     * will be reported.  All parameter entities in the value\n     * will be expanded, but general entities will not.</p>\n     *\n     * @param name The name of the entity.  If it is a parameter\n     *        entity, the name will begin with '%'.\n     * @param value The replacement text of the entity.\n     * @exception SAXException The application may raise an exception.\n     * @see #externalEntityDecl\n     * @see org.xml.sax.DTDHandler#unparsedEntityDecl\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void externalEntityDecl(String name, String publicId, String systemId) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Report a parsed external entity declaration.\n     *\n     * <p>Only the effective (first) declaration for each entity\n     * will be reported.</p>\n     *\n     * <p>If the system identifier is a URL, the parser must resolve it\n     * fully before passing it to the application.</p>\n     *\n     * @param name The name of the entity.  If it is a parameter\n     *        entity, the name will begin with '%'.\n     * @param publicId The entity's public identifier, or null if none\n     *        was given.\n     * @param systemId The entity's system identifier.\n     * @exception SAXException The application may raise an exception.\n     * @see #internalEntityDecl\n     * @see org.xml.sax.DTDHandler#unparsedEntityDecl\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public abstract void elementDecl(String name, String model) throws SAXException", "public abstract void attributeDecl(String eName, String aName, String type, String mode, String value) throws SAXException", "public abstract void internalEntityDecl(String name, String value) throws SAXException", "public abstract void externalEntityDecl(String name, String publicId, String systemId) throws SAXException" ],
  "variableNames" : [ ]
}