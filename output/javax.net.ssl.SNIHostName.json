{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/javax/net/ssl/SNIHostName.java",
  "packageName" : "javax.net.ssl",
  "className" : "SNIHostName",
  "comment" : "\n * Instances of this class represent a server name of type\n * {@link StandardConstants#SNI_HOST_NAME host_name} in a Server Name\n * Indication (SNI) extension.\n * <P>\n * As described in section 3, \"Server Name Indication\", of\n * <A HREF=\"http://www.ietf.org/rfc/rfc6066.txt\">TLS Extensions (RFC 6066)</A>,\n * \"HostName\" contains the fully qualified DNS hostname of the server, as\n * understood by the client.  The encoded server name value of a hostname is\n * represented as a byte string using ASCII encoding without a trailing dot.\n * This allows the support of Internationalized Domain Names (IDN) through\n * the use of A-labels (the ASCII-Compatible Encoding (ACE) form of a valid\n * string of Internationalized Domain Names for Applications (IDNA)) defined\n * in <A HREF=\"http://www.ietf.org/rfc/rfc5890.txt\">RFC 5890</A>.\n * <P>\n * Note that {@code SNIHostName} objects are immutable.\n *\n * @see SNIServerName\n * @see StandardConstants#SNI_HOST_NAME\n *\n * @since 1.8\n ",
  "links" : [ "javax.net.ssl.StandardConstants#SNI_HOST_NAME" ],
  "variables" : [ {
    "name" : "hostname",
    "type" : "String",
    "comment" : " the decoded string value of the server name",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String getAsciiName()",
    "returnType" : "String",
    "comment" : "\n     * Returns the {@link StandardCharsets#US_ASCII}-compliant hostname of\n     * this {@code SNIHostName} object.\n     * <P>\n     * Note that, per\n     * <A HREF=\"http://www.ietf.org/rfc/rfc6066.txt\">RFC 6066</A>, the\n     * returned hostname may be an internationalized domain name that\n     * contains A-labels. See\n     * <A HREF=\"http://www.ietf.org/rfc/rfc5890.txt\">RFC 5890</A>\n     * for more information about the detailed A-label specification.\n     *\n     * @return the {@link StandardCharsets#US_ASCII}-compliant hostname\n     *         of this {@code SNIHostName} object\n     ",
    "links" : [ "java.nio.charset.StandardCharsets#US_ASCII" ]
  }, {
    "name" : "public boolean equals(Object other)",
    "returnType" : "boolean",
    "comment" : "\n     * Compares this server name to the specified object.\n     * <P>\n     * Per <A HREF=\"http://www.ietf.org/rfc/rfc6066.txt\">RFC 6066</A>, DNS\n     * hostnames are case-insensitive.  Two server hostnames are equal if,\n     * and only if, they have the same name type, and the hostnames are\n     * equal in a case-independent comparison.\n     *\n     * @param  other\n     *         the other server name object to compare with.\n     * @return true if, and only if, the {@code other} is considered\n     *         equal to this instance\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Returns a hash code value for this {@code SNIHostName}.\n     * <P>\n     * The hash code value is generated using the case-insensitive hostname\n     * of this {@code SNIHostName}.\n     *\n     * @return a hash code value for this {@code SNIHostName}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a string representation of the object, including the DNS\n     * hostname in this {@code SNIHostName} object.\n     * <P>\n     * The exact details of the representation are unspecified and subject\n     * to change, but the following may be regarded as typical:\n     * <pre>\n     *     \"type=host_name (0), value={@literal <hostname>}\"\n     * </pre>\n     * The \"{@literal <hostname>}\" is an ASCII representation of the hostname,\n     * which may contains A-labels.  For example, a returned value of an pseudo\n     * hostname may look like:\n     * <pre>\n     *     \"type=host_name (0), value=www.example.com\"\n     * </pre>\n     * or\n     * <pre>\n     *     \"type=host_name (0), value=xn--fsqu00a.xn--0zwm56d\"\n     * </pre>\n     * <P>\n     * Please NOTE that the exact details of the representation are unspecified\n     * and subject to change.\n     *\n     * @return a string representation of the object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static SNIMatcher createSNIMatcher(String regex)",
    "returnType" : "SNIMatcher",
    "comment" : "\n     * Creates an {@link SNIMatcher} object for {@code SNIHostName}s.\n     * <P>\n     * This method can be used by a server to verify the acceptable\n     * {@code SNIHostName}s.  For example,\n     * <pre>\n     *     SNIMatcher matcher =\n     *         SNIHostName.createSNIMatcher(\"www\\\\.example\\\\.com\");\n     * </pre>\n     * will accept the hostname \"www.example.com\".\n     * <pre>\n     *     SNIMatcher matcher =\n     *         SNIHostName.createSNIMatcher(\"www\\\\.example\\\\.(com|org)\");\n     * </pre>\n     * will accept hostnames \"www.example.com\" and \"www.example.org\".\n     *\n     * @param  regex\n     *         the <a href=\"{@docRoot}/java/util/regex/Pattern.html#sum\">\n     *         regular expression pattern</a>\n     *         representing the hostname(s) to match\n     * @return a {@code SNIMatcher} object for {@code SNIHostName}s\n     * @throws NullPointerException if {@code regex} is\n     *         {@code null}\n     * @throws java.util.regex.PatternSyntaxException if the regular expression's\n     *         syntax is invalid\n     ",
    "links" : [ "javax.net.ssl.SNIMatcher" ]
  }, {
    "name" : "private void checkHostName()",
    "returnType" : "void",
    "comment" : " check the validity of the string hostname",
    "links" : [ ]
  } ],
  "methodNames" : [ "public String getAsciiName()", "public boolean equals(Object other)", "public int hashCode()", "public String toString()", "public static SNIMatcher createSNIMatcher(String regex)", "private void checkHostName()" ],
  "variableNames" : [ "hostname" ]
}