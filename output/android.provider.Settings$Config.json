{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/provider/Settings.java",
  "packageName" : "android.provider",
  "className" : "Config",
  "comment" : "\n     * Configuration system settings, containing settings which are applied identically for all\n     * defined users. Only Android can read these and only a specific configuration service can\n     * write these.\n     *\n     * @hide\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "SYNC_DISABLED_MODE_NONE",
    "type" : "int",
    "comment" : "\n         * Sync is not disabled.\n         *\n         * @deprecated use the constant in DeviceConfig\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "SYNC_DISABLED_MODE_PERSISTENT",
    "type" : "int",
    "comment" : "\n         * Disabling of Config bulk update / syncing is persistent, i.e. it survives a device\n         * reboot.\n         *\n         * @deprecated use the constant in DeviceConfig\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "SYNC_DISABLED_MODE_UNTIL_REBOOT",
    "type" : "int",
    "comment" : "\n         * Disabling of Config bulk update / syncing is not persistent, i.e. it will not survive a\n         * device reboot.\n         *\n         * @deprecated use the constant in DeviceConfig\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "CONTENT_URI",
    "type" : "Uri",
    "comment" : "\n         * The content:// style URL for the config table.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "sProviderHolder",
    "type" : "ContentProviderHolder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sNameValueCache",
    "type" : "NameValueCache",
    "comment" : " Populated lazily, guarded by class object:",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static String getString(@NonNull String name)",
    "returnType" : "String",
    "comment" : "\n         * Look up a name in the database.\n         * @param name to look up in the table\n         * @return the corresponding value, or null if not present\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public static Map<String, String> getStrings(@NonNull String namespace, @NonNull List<String> names)",
    "returnType" : "Map<String, String>",
    "comment" : "\n         * Look up a list of names in the database, within the specified namespace.\n         *\n         * @param namespace to which the names belong\n         * @param names to look up in the table\n         * @return a non null, but possibly empty, map from name to value for any of the names that\n         *         were found during lookup.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public static Map<String, String> getAllStrings()",
    "returnType" : "Map<String, String>",
    "comment" : "\n         * Return all stored flags.\n         *\n         * The keys take the form {@code namespace/flag}, and the values are the flag values.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public static Map<String, String> getStrings(@NonNull ContentResolver resolver, @NonNull String namespace, @NonNull List<String> names)",
    "returnType" : "Map<String, String>",
    "comment" : "\n         * Look up a list of names in the database, within the specified namespace.\n         *\n         * @param resolver to access the database with\n         * @param namespace to which the names belong\n         * @param names to look up in the table\n         * @return a non null, but possibly empty, map from name to value for any of the names that\n         *         were found during lookup.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public static boolean putString(@NonNull String namespace, @NonNull String name, @Nullable String value, boolean makeDefault)",
    "returnType" : "boolean",
    "comment" : "\n         * Store a name/value pair into the database within the specified namespace.\n         * <p>\n         * Also the method takes an argument whether to make the value the default for this setting.\n         * If the system already specified a default value, then the one passed in here will\n         * <strong>not</strong> be set as the default.\n         * </p>\n         *\n         * @param namespace to store the name/value pair in.\n         * @param name to store.\n         * @param value to associate with the name.\n         * @param makeDefault whether to make the value the default one.\n         * @return true if the value was set, false on database errors.\n         *\n         * @see #resetToDefaults(ContentResolver, int, String)\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public static boolean setStrings(@NonNull String namespace, @NonNull Map<String, String> keyValues) throws DeviceConfig.BadConfigException",
    "returnType" : "boolean",
    "comment" : "\n         * Clear all name/value pairs for the provided namespace and save new name/value pairs in\n         * their place.\n         *\n         * @param namespace to which the names should be set.\n         * @param keyValues map of key names (without the prefix) to values.\n         * @return true if the name/value pairs were set, false if setting was blocked\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public static boolean setStrings(@NonNull ContentResolver resolver, @NonNull String namespace, @NonNull Map<String, String> keyValues) throws DeviceConfig.BadConfigException",
    "returnType" : "boolean",
    "comment" : "\n         * Clear all name/value pairs for the provided namespace and save new name/value pairs in\n         * their place.\n         *\n         * @param resolver to access the database with.\n         * @param namespace to which the names should be set.\n         * @param keyValues map of key names (without the prefix) to values.\n         * @return true if the name/value pairs were set, false if setting was blocked\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public static boolean deleteString(@NonNull String namespace, @NonNull String name)",
    "returnType" : "boolean",
    "comment" : "\n         * Delete a name/value pair from the database for the specified namespace.\n         *\n         * @param namespace to delete the name/value pair from.\n         * @param name to delete.\n         * @return true if the value was deleted, false on database errors. If the name/value pair\n         * did not exist, return True.\n         *\n         * @see #resetToDefaults(ContentResolver, int, String)\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public static void resetToDefaults(@ResetMode int resetMode, @Nullable String namespace)",
    "returnType" : "void",
    "comment" : "\n         * Reset the values to their defaults.\n         * <p>\n         * The method accepts an optional prefix parameter. If provided, only pairs with a name that\n         * starts with the exact prefix will be reset. Otherwise all will be reset.\n         *\n         * @param resetMode The reset mode to use.\n         * @param namespace Optionally, to limit which which namespace is reset.\n         *\n         * @see #putString(ContentResolver, String, String, String, boolean)\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public static void setSyncDisabledMode(@SyncDisabledMode int disableSyncMode)",
    "returnType" : "void",
    "comment" : "\n         * Bridge method between {@link DeviceConfig#setSyncDisabledMode(int)} and the\n         * {@link com.android.providers.settings.SettingsProvider} implementation.\n         *\n         * @hide\n         ",
    "links" : [ "com.android.providers.settings.SettingsProvider", "android.provider.DeviceConfig#setSyncDisabledMode(int)" ]
  }, {
    "name" : "public static int getSyncDisabledMode()",
    "returnType" : "int",
    "comment" : "\n         * Bridge method between {@link DeviceConfig#getSyncDisabledMode()} and the\n         * {@link com.android.providers.settings.SettingsProvider} implementation.\n         *\n         * @hide\n         ",
    "links" : [ "com.android.providers.settings.SettingsProvider", "android.provider.DeviceConfig#getSyncDisabledMode()" ]
  }, {
    "name" : "public static void setMonitorCallback(@NonNull ContentResolver resolver, @NonNull @CallbackExecutor Executor executor, @NonNull DeviceConfig.MonitorCallback callback)",
    "returnType" : "void",
    "comment" : "\n         * Setter callback for monitoring Config table.\n         *\n         * @param executor the {@link Executor} on which to invoke the callback\n         * @param callback callback to set\n         *\n         * @hide\n         ",
    "links" : [ "android.annotation.CallbackExecutor" ]
  }, {
    "name" : "public static void clearMonitorCallback(@NonNull ContentResolver resolver)",
    "returnType" : "void",
    "comment" : "\n         * Clear callback for monitoring Config table.\n         * this may only be used to clear callback function registered by\n         * {@link Config#setMonitorCallback}\n         * @hide\n         ",
    "links" : [ "#setMonitorCallback" ]
  }, {
    "name" : "public static void registerContentObserver(@Nullable String namespace, boolean notifyForDescendants, @NonNull ContentObserver observer)",
    "returnType" : "void",
    "comment" : "\n         * Register a content observer.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public static void unregisterContentObserver(@NonNull ContentObserver observer)",
    "returnType" : "void",
    "comment" : "\n         * Unregister a content observer.\n         * this may only be used with content observers registered through\n         * {@link Config#registerContentObserver}\n         *\n         * @hide\n         ",
    "links" : [ "#registerContentObserver" ]
  }, {
    "name" : "public static int checkCallingOrSelfPermission(@NonNull @PermissionName String permission)",
    "returnType" : "int",
    "comment" : "\n         * Determine whether the calling process of an IPC <em>or you</em> have been\n         * granted a particular permission.  This is the same as\n         * {@link #checkCallingPermission}, except it grants your own permissions\n         * if you are not currently processing an IPC.  Use with care!\n         *\n         * @param permission The name of the permission being checked.\n         *\n         * @return {@link PackageManager#PERMISSION_GRANTED} if the calling\n         * pid/uid is allowed that permission, or\n         * {@link PackageManager#PERMISSION_DENIED} if it is not.\n         *\n         * @see PackageManager#checkPermission(String, String)\n         * @see #checkPermission\n         * @see #checkCallingPermission\n         * @hide\n         ",
    "links" : [ "android.content.pm.PackageManager#PERMISSION_DENIED", "android.content.pm.PackageManager#PERMISSION_GRANTED", "#checkCallingPermission" ]
  }, {
    "name" : "private static void setMonitorCallbackAsUser(@NonNull @CallbackExecutor Executor executor, @NonNull ContentResolver resolver, @UserIdInt int userHandle, @NonNull DeviceConfig.MonitorCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void clearProviderForTest()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private static void handleMonitorCallback(Bundle result, @NonNull @CallbackExecutor Executor executor, DeviceConfig.MonitorCallback monitorCallback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static String createCompositeName(@NonNull String namespace, @NonNull String name)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String createPrefix(@NonNull String namespace)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Uri createNamespaceUri(@NonNull String namespace)",
    "returnType" : "Uri",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static ContentResolver getContentResolver()",
    "returnType" : "ContentResolver",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static String getString(@NonNull String name)", "public static Map<String, String> getStrings(@NonNull String namespace, @NonNull List<String> names)", "public static Map<String, String> getAllStrings()", "public static Map<String, String> getStrings(@NonNull ContentResolver resolver, @NonNull String namespace, @NonNull List<String> names)", "public static boolean putString(@NonNull String namespace, @NonNull String name, @Nullable String value, boolean makeDefault)", "public static boolean setStrings(@NonNull String namespace, @NonNull Map<String, String> keyValues) throws DeviceConfig.BadConfigException", "public static boolean setStrings(@NonNull ContentResolver resolver, @NonNull String namespace, @NonNull Map<String, String> keyValues) throws DeviceConfig.BadConfigException", "public static boolean deleteString(@NonNull String namespace, @NonNull String name)", "public static void resetToDefaults(@ResetMode int resetMode, @Nullable String namespace)", "public static void setSyncDisabledMode(@SyncDisabledMode int disableSyncMode)", "public static int getSyncDisabledMode()", "public static void setMonitorCallback(@NonNull ContentResolver resolver, @NonNull @CallbackExecutor Executor executor, @NonNull DeviceConfig.MonitorCallback callback)", "public static void clearMonitorCallback(@NonNull ContentResolver resolver)", "public static void registerContentObserver(@Nullable String namespace, boolean notifyForDescendants, @NonNull ContentObserver observer)", "public static void unregisterContentObserver(@NonNull ContentObserver observer)", "public static int checkCallingOrSelfPermission(@NonNull @PermissionName String permission)", "private static void setMonitorCallbackAsUser(@NonNull @CallbackExecutor Executor executor, @NonNull ContentResolver resolver, @UserIdInt int userHandle, @NonNull DeviceConfig.MonitorCallback callback)", "public static void clearProviderForTest()", "private static void handleMonitorCallback(Bundle result, @NonNull @CallbackExecutor Executor executor, DeviceConfig.MonitorCallback monitorCallback)", " static String createCompositeName(@NonNull String namespace, @NonNull String name)", "private static String createPrefix(@NonNull String namespace)", "private static Uri createNamespaceUri(@NonNull String namespace)", "private static ContentResolver getContentResolver()" ],
  "variableNames" : [ "SYNC_DISABLED_MODE_NONE", "SYNC_DISABLED_MODE_PERSISTENT", "SYNC_DISABLED_MODE_UNTIL_REBOOT", "CONTENT_URI", "sProviderHolder", "sNameValueCache" ]
}