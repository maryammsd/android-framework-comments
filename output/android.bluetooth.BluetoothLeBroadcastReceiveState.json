{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/bluetooth/BluetoothLeBroadcastReceiveState.java",
  "packageName" : "android.bluetooth",
  "className" : "BluetoothLeBroadcastReceiveState",
  "comment" : "\n * The {@link BluetoothLeBroadcastReceiveState} is used by the BASS server to expose information\n * about a Broadcast Source.\n *\n * <p>It represents the current synchronization state of the server to a PA and/or a BIG containing\n * one or more subgroups containing one or more BISes transmitted by that Broadcast Source. The\n * Broadcast Receive State characteristic is also used to inform clients whether the server has\n * detected that the BIS is encrypted, whether the server requires a Broadcast_Code, and whether the\n * server is decrypting the BIS.\n *\n * @hide\n ",
  "links" : [ "android.bluetooth.BluetoothLeBroadcastReceiveState" ],
  "variables" : [ {
    "name" : "PA_SYNC_STATE_IDLE",
    "type" : "int",
    "comment" : "\n     * Indicates that the Broadcast Sink is not synchronized with the Periodic Advertisements (PA)\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PA_SYNC_STATE_SYNCINFO_REQUEST",
    "type" : "int",
    "comment" : "\n     * Indicates that the Broadcast Sink requested the Broadcast Assistant to synchronize with the\n     * Periodic Advertisements (PA).\n     *\n     * <p>This is also known as scan delegation or scan offloading.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PA_SYNC_STATE_SYNCHRONIZED",
    "type" : "int",
    "comment" : "\n     * Indicates that the Broadcast Sink is synchronized with the Periodic Advertisements (PA).\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PA_SYNC_STATE_FAILED_TO_SYNCHRONIZE",
    "type" : "int",
    "comment" : "\n     * Indicates that the Broadcast Sink was unable to synchronize with the Periodic Advertisements\n     * (PA).\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PA_SYNC_STATE_NO_PAST",
    "type" : "int",
    "comment" : "\n     * Indicates that the Broadcast Sink should be synchronized with the Periodic Advertisements\n     * (PA) using the Periodic Advertisements Synchronization Transfer (PAST) procedure.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PA_SYNC_STATE_INVALID",
    "type" : "int",
    "comment" : "\n     * Indicates that the Broadcast Sink synchronization state is invalid.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BIG_ENCRYPTION_STATE_NOT_ENCRYPTED",
    "type" : "int",
    "comment" : "\n     * Indicates that the Broadcast Sink is synchronized with an unencrypted audio stream from a\n     * Broadcast Source\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BIG_ENCRYPTION_STATE_CODE_REQUIRED",
    "type" : "int",
    "comment" : "\n     * Indicates that the Broadcast Sink needs a Broadcast Code to synchronize with an audio stream\n     * from a Broadcast Source, which was not provided when the audio stream from the Broadcast\n     * Source was added.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BIG_ENCRYPTION_STATE_DECRYPTING",
    "type" : "int",
    "comment" : "\n     * Indicates that the Broadcast Sink is synchronized with an encrypted audio stream from a\n     * Broadcast Source.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BIG_ENCRYPTION_STATE_BAD_CODE",
    "type" : "int",
    "comment" : "\n     * Indicates that the Broadcast Sink is unable to decrypt an audio stream from a Broadcast\n     * Source due to an incorrect Broadcast Code.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BIG_ENCRYPTION_STATE_INVALID",
    "type" : "int",
    "comment" : "\n     * Indicates that the Broadcast Sink encryption state is invalid.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mSourceId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSourceAddressType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSourceDevice",
    "type" : "BluetoothDevice",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSourceAdvertisingSid",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBroadcastId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPaSyncState",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBigEncryptionState",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBadCode",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNumSubgroups",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBisSyncState",
    "type" : "List<Long>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSubgroupMetadata",
    "type" : "List<BluetoothLeAudioContentMetadata>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<BluetoothLeBroadcastReceiveState>",
    "comment" : "\n     * A {@link Parcelable.Creator} to create {@link BluetoothLeBroadcastReceiveState} from parcel.\n     *\n     * @hide\n     ",
    "links" : [ "android.bluetooth.BluetoothLeBroadcastReceiveState", "Parcelable.Creator" ]
  } ],
  "methods" : [ {
    "name" : "private static String paSyncStateToString(int paSyncState)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String bigEncryptionStateToString(int bigEncryptionState)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String bisSyncStateToString(Long bisSyncState, int bisSyncStateIndex)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getSourceId()",
    "returnType" : "int",
    "comment" : "\n     * Get the source ID assigned by the BASS server\n     *\n     * <p>Shall be unique for each instance of the Broadcast Receive State characteristic exposed by\n     * the server\n     *\n     * @return source ID assigned by the BASS server\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getSourceAddressType()",
    "returnType" : "int",
    "comment" : "\n     * Get the address type of the Broadcast Source\n     *\n     * Can be either {@link BluetoothDevice#ADDRESS_TYPE_PUBLIC} or\n     * {@link BluetoothDevice#ADDRESS_TYPE_RANDOM\n     *\n     * @return address type of the Broadcast Source\n     * @hide\n     ",
    "links" : [ "android.bluetooth.BluetoothDevice#ADDRESS_TYPE_PUBLIC", "android.bluetooth.BluetoothDevice#ADDRESS_TYPE_RANDOM" ]
  }, {
    "name" : "public BluetoothDevice getSourceDevice()",
    "returnType" : "BluetoothDevice",
    "comment" : "\n     * Get the MAC address of the Broadcast Source, which can be Public Device Address, Random\n     * Device Address, Public Identity Address or Random (static) Identity Address\n     *\n     * @return MAC address of the Broadcast Source\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getSourceAdvertisingSid()",
    "returnType" : "int",
    "comment" : "\n     * Get Advertising_SID subfield of the ADI field of the AUX_ADV_IND PDU or the\n     * LL_PERIODIC_SYNC_IND containing the SyncInfo that points to the PA transmitted by the\n     * Broadcast Source.\n     *\n     * @return 1-byte long Advertising_SID of the Broadcast Source\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getBroadcastId()",
    "returnType" : "int",
    "comment" : "\n     * Broadcast_ID of the Broadcast Source\n     *\n     * @return 3-byte long Broadcast_ID of the Broadcast Source\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getPaSyncState()",
    "returnType" : "int",
    "comment" : "\n     * Get the Periodic Advertisement synchronization state between the Broadcast Sink and the\n     * Broadcast source\n     *\n     * <p>Possible values are {@link #PA_SYNC_STATE_IDLE}, {@link #PA_SYNC_STATE_SYNCINFO_REQUEST},\n     * {@link #PA_SYNC_STATE_SYNCHRONIZED}, {@link #PA_SYNC_STATE_FAILED_TO_SYNCHRONIZE}, {@link\n     * #PA_SYNC_STATE_NO_PAST}\n     *\n     * @return Periodic Advertisement synchronization state\n     * @hide\n     ",
    "links" : [ "#PA_SYNC_STATE_IDLE", "#PA_SYNC_STATE_FAILED_TO_SYNCHRONIZE", "#PA_SYNC_STATE_SYNCINFO_REQUEST", "#PA_SYNC_STATE_SYNCHRONIZED", "#PA_SYNC_STATE_NO_PAST" ]
  }, {
    "name" : "public int getBigEncryptionState()",
    "returnType" : "int",
    "comment" : "\n     * Get the encryption state of a Broadcast Isochronous Group (BIG)\n     *\n     * <p>Possible values are {@link #BIG_ENCRYPTION_STATE_NOT_ENCRYPTED}, {@link\n     * #BIG_ENCRYPTION_STATE_CODE_REQUIRED}, {@link #BIG_ENCRYPTION_STATE_DECRYPTING}, {@link\n     * #BIG_ENCRYPTION_STATE_DECRYPTING}, and {@link #BIG_ENCRYPTION_STATE_BAD_CODE}\n     *\n     * @return encryption state of a Broadcast Isochronous Group (BIG)\n     * @hide\n     ",
    "links" : [ "#BIG_ENCRYPTION_STATE_BAD_CODE", "#BIG_ENCRYPTION_STATE_NOT_ENCRYPTED", "#BIG_ENCRYPTION_STATE_DECRYPTING", "#BIG_ENCRYPTION_STATE_CODE_REQUIRED" ]
  }, {
    "name" : "public byte[] getBadCode()",
    "returnType" : "byte[]",
    "comment" : "\n     * If {@link #getBigEncryptionState()} returns {@link #BIG_ENCRYPTION_STATE_BAD_CODE}, this\n     * method returns the value of the incorrect 16-octet Broadcast Code that fails to decrypt an\n     * audio stream from a Broadcast Source.\n     *\n     * @return 16-octet Broadcast Code, or null if {@link #getBigEncryptionState()} does not return\n     *     {@link #BIG_ENCRYPTION_STATE_BAD_CODE}\n     * @hide\n     ",
    "links" : [ "#BIG_ENCRYPTION_STATE_BAD_CODE", "#getBigEncryptionState()" ]
  }, {
    "name" : "public int getNumSubgroups()",
    "returnType" : "int",
    "comment" : "\n     * Get number of Broadcast subgroups being added to this sink\n     *\n     * @return number of Broadcast subgroups being added to this sink\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<Long> getBisSyncState()",
    "returnType" : "List<Long>",
    "comment" : "\n     * Get a list of bitfield on whether a Broadcast Isochronous Stream (BIS) is synchronized\n     * between the sink and source\n     *\n     * <p>The number of items in the returned list is the same as {@link #getNumSubgroups()}. For\n     * each subgroup, at most 31 BISes are available and their synchronization state is indicated by\n     * its bit value at the particular offset (i.e. Bit 0-30 = BIS_index[1-31])\n     *\n     * <p>For example, if (BisSyncState & 0b1 << 5) != 0, BIS 5 is synchronized between source and\n     * sync\n     *\n     * <p>There is a special case, 0xFFFFFFFF to indicate Broadcast Sink failed to synchronize to a\n     * particular subgroup\n     *\n     * @return a list of bitfield on whether a Broadcast Isochronous Stream (BIS) is synchronized\n     *     between the sink and source\n     * @hide\n     ",
    "links" : [ "#getNumSubgroups()" ]
  }, {
    "name" : "public List<BluetoothLeAudioContentMetadata> getSubgroupMetadata()",
    "returnType" : "List<BluetoothLeAudioContentMetadata>",
    "comment" : "\n     * Get metadata for every subgroup added to this Broadcast Sink\n     *\n     * <p>The number of items in the returned list is the same as {@link #getNumSubgroups()}.\n     *\n     * @return metadata for every subgroup added to this Broadcast Sink\n     * @hide\n     ",
    "links" : [ "#getNumSubgroups()" ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel out, int flags)",
    "returnType" : "void",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static String paSyncStateToString(int paSyncState)", "private static String bigEncryptionStateToString(int bigEncryptionState)", "private static String bisSyncStateToString(Long bisSyncState, int bisSyncStateIndex)", "public int getSourceId()", "public int getSourceAddressType()", "public BluetoothDevice getSourceDevice()", "public int getSourceAdvertisingSid()", "public int getBroadcastId()", "public int getPaSyncState()", "public int getBigEncryptionState()", "public byte[] getBadCode()", "public int getNumSubgroups()", "public List<Long> getBisSyncState()", "public List<BluetoothLeAudioContentMetadata> getSubgroupMetadata()", "public int describeContents()", "public void writeToParcel(Parcel out, int flags)", "public String toString()" ],
  "variableNames" : [ "PA_SYNC_STATE_IDLE", "PA_SYNC_STATE_SYNCINFO_REQUEST", "PA_SYNC_STATE_SYNCHRONIZED", "PA_SYNC_STATE_FAILED_TO_SYNCHRONIZE", "PA_SYNC_STATE_NO_PAST", "PA_SYNC_STATE_INVALID", "BIG_ENCRYPTION_STATE_NOT_ENCRYPTED", "BIG_ENCRYPTION_STATE_CODE_REQUIRED", "BIG_ENCRYPTION_STATE_DECRYPTING", "BIG_ENCRYPTION_STATE_BAD_CODE", "BIG_ENCRYPTION_STATE_INVALID", "mSourceId", "mSourceAddressType", "mSourceDevice", "mSourceAdvertisingSid", "mBroadcastId", "mPaSyncState", "mBigEncryptionState", "mBadCode", "mNumSubgroups", "mBisSyncState", "mSubgroupMetadata", "CREATOR" ]
}