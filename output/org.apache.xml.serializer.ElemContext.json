{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xml/serializer/ElemContext.java",
  "packageName" : "org.apache.xml.serializer",
  "className" : "ElemContext",
  "comment" : "\n * This class is a stack frame that consists of \n * information about the element currently being processed \n * by a serializer. Consider this example:\n * <pre>\n *   <A>\n *     <B1>\n *     </B1>\n *     <B2>\n *     </B2>\n *   <A>\n * </pre> \n * \n * A stack frame will be pushed for \"A\" at depth 1, \n * then another one for \"B1\" at depth 2.\n * Then \"B1\" stackframe is popped.  When the stack frame for \"B2\" is \n * pushed, this implementation re-uses the old stack fram object used\n * by \"B1\" to be efficient at not creating too many of these object.\n * \n * This is by no means a public class, and neither are its fields or methods,\n * they are all helper fields for a serializer.\n * \n * The purpose of this class is to be more consistent with pushing information\n * when a new element is being serialized and more quickly restoring the old\n * information about the parent element with a simple pop() when the\n * child element is done.  Previously there was some redundant and error-prone\n * calculations going on to retore information.\n * \n * @xsl.usage internal\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "m_currentElemDepth",
    "type" : "int",
    "comment" : "\n     * The nesting depth of the element inside other elements.\n     ",
    "links" : [ ]
  }, {
    "name" : "m_elementDesc",
    "type" : "ElemDesc",
    "comment" : " HTML field, the element description of the HTML element ",
    "links" : [ ]
  }, {
    "name" : "m_elementLocalName",
    "type" : "String",
    "comment" : "\n     * The local name of the element.\n     ",
    "links" : [ ]
  }, {
    "name" : "m_elementName",
    "type" : "String",
    "comment" : "\n     * The fully qualified name of the element (with prefix, if any).\n     ",
    "links" : [ ]
  }, {
    "name" : "m_elementURI",
    "type" : "String",
    "comment" : "\n     * The URI of the element.\n     * If this value is null it means that the URI is not yet determined\n     * for the element. Valid values are the empty string \"\", meaning\n     * that it is in no namespace, or a string of non-zero length.\n     ",
    "links" : [ ]
  }, {
    "name" : "m_isCdataSection",
    "type" : "boolean",
    "comment" : " If the element is in the cdata-section-names list\n     * then the value is true. If it is true the text children of the element\n     * should be output in CDATA section blocks. \n     ",
    "links" : [ ]
  }, {
    "name" : "m_isRaw",
    "type" : "boolean",
    "comment" : " True if the current element has output escaping disabled.\n     * This is true for SCRIPT and STYLE elements. \n     ",
    "links" : [ ]
  }, {
    "name" : "m_next",
    "type" : "ElemContext",
    "comment" : " The next element \"stack frame\". This value will only be\n     * set once as deeper stack frames are not deleted when popped off,\n     * but are rather re-used when a push is required.\n     * \n     * This makes for very fast pushing and popping of stack frames \n     * because very few stack frame objects are ever created, they are\n     * mostly re-used.  This re-use saves object creation but it also means\n     * that connections between the frames via m_next and m_prev\n     * never changes either. Just the contents of the frames change\n     * as they are re-used. Only the reference to the current stack frame, which\n     * is held by the serializer is changed via a quick pop() or push().\n     ",
    "links" : [ ]
  }, {
    "name" : "m_prev",
    "type" : "ElemContext",
    "comment" : " The previous element \"stack frame\". ",
    "links" : [ ]
  }, {
    "name" : "m_startTagOpen",
    "type" : "boolean",
    "comment" : "\n     * Set to true when a start tag is started, or open, but not all the\n     * attributes or namespace information is yet collected.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " final ElemContext pop()",
    "returnType" : "ElemContext",
    "comment" : "\n     * Pop the current \"stack frame\".\n     * @return Returns the parent \"stack frame\" of the one popped.\n     ",
    "links" : [ ]
  }, {
    "name" : " final ElemContext push()",
    "returnType" : "ElemContext",
    "comment" : "\n     * This method pushes an element \"stack frame\" \n     * but with no initialization of values in that frame.\n     * This method is used for optimization purposes, like when pushing\n     * a stack frame for an HTML \"IMG\" tag which has no children and\n     * the stack frame will almost immediately be popped.\n     ",
    "links" : [ ]
  }, {
    "name" : " final ElemContext push(final String uri, final String localName, final String qName)",
    "returnType" : "ElemContext",
    "comment" : "\n     * Push an element context on the stack. This context keeps track of\n     * information gathered about the element.\n     * @param uri The URI for the namespace for the element name, \n     * can be null if it is not yet known.\n     * @param localName The local name of the element (no prefix),  \n     * can be null.\n     * @param qName The qualified name (with prefix, if any) \n     * of the element, this parameter is required.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " final ElemContext pop()", " final ElemContext push()", " final ElemContext push(final String uri, final String localName, final String qName)" ],
  "variableNames" : [ "m_currentElemDepth", "m_elementDesc", "m_elementLocalName", "m_elementName", "m_elementURI", "m_isCdataSection", "m_isRaw", "m_next", "m_prev", "m_startTagOpen" ]
}