{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/widget/DropDownListView.java",
  "packageName" : "android.widget",
  "className" : "DropDownListView",
  "comment" : "\n * Wrapper class for a ListView. This wrapper can hijack the focus to\n * make sure the list uses the appropriate drawables and states when\n * displayed on screen within a drop down. The focus is never actually\n * passed to the drop down in this mode; the list only looks focused.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mListSelectionHidden",
    "type" : "boolean",
    "comment" : "\n     * WARNING: This is a workaround for a touch mode issue.\n     *\n     * Touch mode is propagated lazily to windows. This causes problems in\n     * the following scenario:\n     * - Type something in the AutoCompleteTextView and get some results\n     * - Move down with the d-pad to select an item in the list\n     * - Move up with the d-pad until the selection disappears\n     * - Type more text in the AutoCompleteTextView *using the soft keyboard*\n     *   and get new results; you are now in touch mode\n     * - The selection comes back on the first item in the list, even though\n     *   the list is supposed to be in touch mode\n     *\n     * Using the soft keyboard triggers the touch mode change but that change\n     * is propagated to our window only after the first list layout, therefore\n     * after the list attempts to resurrect the selection.\n     *\n     * The trick to work around this issue is to pretend the list is in touch\n     * mode when we know that the selection should not appear, that is when\n     * we know the user moved the selection away from the list.\n     *\n     * This boolean is set to true whenever we explicitly hide the list's\n     * selection and reset to false whenever we know the user moved the\n     * selection back to the list.\n     *\n     * When this boolean is true, isInTouchMode() returns true, otherwise it\n     * returns super.isInTouchMode().\n     ",
    "links" : [ ]
  }, {
    "name" : "mHijackFocus",
    "type" : "boolean",
    "comment" : "\n     * True if this wrapper should fake focus.\n     ",
    "links" : [ ]
  }, {
    "name" : "mDrawsInPressedState",
    "type" : "boolean",
    "comment" : " Whether to force drawing of the pressed state selector. ",
    "links" : [ ]
  }, {
    "name" : "mScrollHelper",
    "type" : "AbsListViewAutoScroller",
    "comment" : " Helper for drag-to-open auto scrolling. ",
    "links" : [ ]
  }, {
    "name" : "mResolveHoverRunnable",
    "type" : "ResolveHoverRunnable",
    "comment" : "\n     * Runnable posted when we are awaiting hover event resolution. When set,\n     * drawable state changes are postponed.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " boolean shouldShowSelector()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean onTouchEvent(MotionEvent ev)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean onHoverEvent(@NonNull MotionEvent ev)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void drawableStateChanged()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean onForwardedEvent(@NonNull MotionEvent event, int activePointerId)",
    "returnType" : "boolean",
    "comment" : "\n     * Handles forwarded events.\n     *\n     * @param activePointerId id of the pointer that activated forwarding\n     * @return whether the event was handled\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setListSelectionHidden(boolean hideListSelection)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether the list selection is hidden, as part of a workaround for a\n     * touch mode issue (see the declaration for mListSelectionHidden).\n     *\n     * @param hideListSelection {@code true} to hide list selection,\n     *                          {@code false} to show\n     ",
    "links" : [ ]
  }, {
    "name" : "private void clearPressedItem()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setPressedItem(@NonNull View child, int position, float x, float y)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean touchModeDrawsInPressedState()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " View obtainView(int position, boolean[] isScrap)",
    "returnType" : "View",
    "comment" : "\n     * Avoids jarring scrolling effect by ensuring that list elements\n     * made of a text view fit on a single line.\n     *\n     * @param position the item index in the list to get a view for\n     * @return the view for the specified item\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isInTouchMode()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasWindowFocus()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the focus state in the drop down.\n     *\n     * @return true always if hijacking focus\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isFocused()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the focus state in the drop down.\n     *\n     * @return true always if hijacking focus\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasFocus()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the focus state in the drop down.\n     *\n     * @return true always if hijacking focus\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " boolean shouldShowSelector()", "public boolean onTouchEvent(MotionEvent ev)", "public boolean onHoverEvent(@NonNull MotionEvent ev)", "protected void drawableStateChanged()", "public boolean onForwardedEvent(@NonNull MotionEvent event, int activePointerId)", "public void setListSelectionHidden(boolean hideListSelection)", "private void clearPressedItem()", "private void setPressedItem(@NonNull View child, int position, float x, float y)", " boolean touchModeDrawsInPressedState()", " View obtainView(int position, boolean[] isScrap)", "public boolean isInTouchMode()", "public boolean hasWindowFocus()", "public boolean isFocused()", "public boolean hasFocus()" ],
  "variableNames" : [ "mListSelectionHidden", "mHijackFocus", "mDrawsInPressedState", "mScrollHelper", "mResolveHoverRunnable" ]
}