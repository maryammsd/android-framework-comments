{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xalan/transformer/NodeSorter.java",
  "packageName" : "org.apache.xalan.transformer",
  "className" : "NodeSorter",
  "comment" : "\n * This class can sort vectors of DOM nodes according to a select pattern.\n * @xsl.usage internal\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "m_execContext",
    "type" : "XPathContext",
    "comment" : " Current XPath context           ",
    "links" : [ ]
  }, {
    "name" : "m_keys",
    "type" : "Vector",
    "comment" : " vector of NodeSortKeys",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void sort(DTMIterator v, Vector keys, XPathContext support) throws javax.xml.transform.TransformerException",
    "returnType" : "void",
    "comment" : "\n   * Given a vector of nodes, sort each node according to\n   * the criteria in the keys.\n   * @param v an vector of Nodes.\n   * @param keys a vector of NodeSortKeys.\n   * @param support XPath context to use\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : " int compare(NodeCompareElem n1, NodeCompareElem n2, int kIndex, XPathContext support) throws TransformerException",
    "returnType" : "int",
    "comment" : "\n   * Return the results of a compare of two nodes.\n   * TODO: Optimize compare -- cache the getStringExpr results, key by m_selectPat + hash of node.\n   *\n   * @param n1 First node to use in compare\n   * @param n2 Second node to use in compare\n   * @param kIndex Index of NodeSortKey to use for sort\n   * @param support XPath context to use\n   *\n   * @return The results of the compare of the two nodes.\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : " void mergesort(Vector a, Vector b, int l, int r, XPathContext support) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n   * This implements a standard Mergesort, as described in\n   * Robert Sedgewick's Algorithms book.  This is a better\n   * sort for our purpose than the Quicksort because it\n   * maintains the original document order of the input if\n   * the order isn't changed by the sort.\n   *\n   * @param a First vector of nodes to compare\n   * @param b Second vector of  nodes to compare \n   * @param l Left boundary of  partition\n   * @param r Right boundary of  partition\n   * @param support XPath context to use\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void sort(DTMIterator v, Vector keys, XPathContext support) throws javax.xml.transform.TransformerException", " int compare(NodeCompareElem n1, NodeCompareElem n2, int kIndex, XPathContext support) throws TransformerException", " void mergesort(Vector a, Vector b, int l, int r, XPathContext support) throws TransformerException" ],
  "variableNames" : [ "m_execContext", "m_keys" ]
}