{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/wifi/aware/PublishConfig.java",
  "packageName" : "android.net.wifi.aware",
  "className" : "PublishConfig",
  "comment" : "\n * Defines the configuration of an Aware publish session. Built using\n * {@link PublishConfig.Builder}. A publish session is created using\n * {@link WifiAwareSession#publish(PublishConfig, DiscoverySessionCallback,\n * android.os.Handler)} or updated using\n * {@link PublishDiscoverySession#updatePublish(PublishConfig)}.\n ",
  "links" : [ "android.net.wifi.aware.PublishDiscoverySession#updatePublish(PublishConfig)", "PublishConfig.Builder", "android.net.wifi.aware.WifiAwareSession#publish(PublishConfig" ],
  "variables" : [ {
    "name" : "PUBLISH_TYPE_UNSOLICITED",
    "type" : "int",
    "comment" : "\n     * Defines an unsolicited publish session - a publish session where the publisher is\n     * advertising itself by broadcasting on-the-air. An unsolicited publish session is paired\n     * with a passive subscribe session {@link SubscribeConfig#SUBSCRIBE_TYPE_PASSIVE}.\n     * Configuration is done using {@link PublishConfig.Builder#setPublishType(int)}.\n     ",
    "links" : [ "PublishConfig.Builder#setPublishType(int)", "android.net.wifi.aware.SubscribeConfig#SUBSCRIBE_TYPE_PASSIVE" ]
  }, {
    "name" : "PUBLISH_TYPE_SOLICITED",
    "type" : "int",
    "comment" : "\n     * Defines a solicited publish session - a publish session which is silent, waiting for a\n     * matching active subscribe session - and responding to it in unicast. A\n     * solicited publish session is paired with an active subscribe session\n     * {@link SubscribeConfig#SUBSCRIBE_TYPE_ACTIVE}. Configuration is done using\n     * {@link PublishConfig.Builder#setPublishType(int)}.\n     ",
    "links" : [ "PublishConfig.Builder#setPublishType(int)", "android.net.wifi.aware.SubscribeConfig#SUBSCRIBE_TYPE_ACTIVE" ]
  }, {
    "name" : "mServiceName",
    "type" : "byte[]",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "mServiceSpecificInfo",
    "type" : "byte[]",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "mMatchFilter",
    "type" : "byte[]",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "mPublishType",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "mTtlSec",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "mEnableTerminateNotification",
    "type" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "mEnableRanging",
    "type" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "mEnableInstantMode",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBand",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSecurityConfig",
    "type" : "WifiAwareDataPathSecurityConfig",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPairingConfig",
    "type" : "AwarePairingConfig",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsSuspendable",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVendorData",
    "type" : "List<OuiKeyedData>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<PublishConfig>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void assertValid(Characteristics characteristics, boolean rttSupported) throws IllegalArgumentException",
    "returnType" : "void",
    "comment" : "\n     * Verifies that the contents of the PublishConfig are valid. Otherwise\n     * throws an IllegalArgumentException.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isInstantCommunicationModeEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Check if instant communication mode is enabled for this publish session.\n     * @see Builder#setInstantCommunicationModeEnabled(boolean, int)\n     * @return true for enabled, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getInstantCommunicationBand()",
    "returnType" : "int",
    "comment" : "\n     * Get the Wi-Fi band for instant communication mode for this publish session\n     *\n     * @see Builder#setInstantCommunicationModeEnabled(boolean, int)\n     * @return The Wi-Fi band. If instant communication mode is not enabled will return {@link\n     *     ScanResult#WIFI_BAND_24_GHZ} as default.\n     ",
    "links" : [ "android.net.wifi.ScanResult#WIFI_BAND_24_GHZ" ]
  }, {
    "name" : "public WifiAwareDataPathSecurityConfig getSecurityConfig()",
    "returnType" : "WifiAwareDataPathSecurityConfig",
    "comment" : "\n     * Get the data-path security config for this publish session\n     * @see Builder#setDataPathSecurityConfig(WifiAwareDataPathSecurityConfig)\n     * @return A {@link WifiAwareDataPathSecurityConfig} specified in this config.\n     ",
    "links" : [ "android.net.wifi.aware.WifiAwareDataPathSecurityConfig" ]
  }, {
    "name" : "public AwarePairingConfig getPairingConfig()",
    "returnType" : "AwarePairingConfig",
    "comment" : "\n     * Get the Aware Pairing config for this publish session\n     * @see Builder#setPairingConfig(AwarePairingConfig)\n     * @return A {@link AwarePairingConfig} specified in this config.\n     ",
    "links" : [ "android.net.wifi.aware.AwarePairingConfig" ]
  }, {
    "name" : "public boolean isSuspendable()",
    "returnType" : "boolean",
    "comment" : "\n     * Check if suspension is supported for this publish session.\n     * @see Builder#setSuspendable(boolean)\n     * @return true for supported, false otherwise.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<OuiKeyedData> getVendorData()",
    "returnType" : "List<OuiKeyedData>",
    "comment" : "\n     * Return the vendor-provided configuration data, if it exists. See also {@link\n     * Builder#setVendorData(List)}\n     *\n     * @return Vendor configuration data, or empty list if it does not exist.\n     * @hide\n     ",
    "links" : [ "#setVendorData(List)" ]
  } ],
  "methodNames" : [ "public String toString()", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)", "public boolean equals(Object o)", "public int hashCode()", "public void assertValid(Characteristics characteristics, boolean rttSupported) throws IllegalArgumentException", "public boolean isInstantCommunicationModeEnabled()", "public int getInstantCommunicationBand()", "public WifiAwareDataPathSecurityConfig getSecurityConfig()", "public AwarePairingConfig getPairingConfig()", "public boolean isSuspendable()", "public List<OuiKeyedData> getVendorData()" ],
  "variableNames" : [ "PUBLISH_TYPE_UNSOLICITED", "PUBLISH_TYPE_SOLICITED", "mServiceName", "mServiceSpecificInfo", "mMatchFilter", "mPublishType", "mTtlSec", "mEnableTerminateNotification", "mEnableRanging", "mEnableInstantMode", "mBand", "mSecurityConfig", "mPairingConfig", "mIsSuspendable", "mVendorData", "CREATOR" ]
}