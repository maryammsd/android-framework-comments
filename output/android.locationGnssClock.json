{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/location/GnssClock.java",
  "packageName" : "android.location",
  "className" : "GnssClock",
  "comment" : "\n * A class containing a GPS clock timestamp.\n *\n * <p>It represents a measurement of the GPS receiver's clock.\n ",
  "variables" : [ {
    "name" : "HAS_NO_FLAGS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HAS_LEAP_SECOND",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HAS_TIME_UNCERTAINTY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HAS_FULL_BIAS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HAS_BIAS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HAS_BIAS_UNCERTAINTY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HAS_DRIFT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HAS_DRIFT_UNCERTAINTY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HAS_ELAPSED_REALTIME_NANOS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HAS_ELAPSED_REALTIME_UNCERTAINTY_NANOS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HAS_REFERENCE_CONSTELLATION_TYPE_FOR_ISB",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HAS_REFERENCE_CARRIER_FREQUENCY_FOR_ISB",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HAS_REFERENCE_CODE_TYPE_FOR_ISB",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFlags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLeapSecond",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTimeNanos",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTimeUncertaintyNanos",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFullBiasNanos",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBiasNanos",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBiasUncertaintyNanos",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDriftNanosPerSecond",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDriftUncertaintyNanosPerSecond",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHardwareClockDiscontinuityCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mElapsedRealtimeNanos",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mElapsedRealtimeUncertaintyNanos",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mReferenceConstellationTypeForIsb",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mReferenceCarrierFrequencyHzForIsb",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mReferenceCodeTypeForIsb",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<GnssClock>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void set(GnssClock clock)",
    "returnType" : "void",
    "comment" : "\n     * Sets all contents to the values stored in the provided object.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void reset()",
    "returnType" : "void",
    "comment" : "\n     * Resets all the contents to its original state.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasLeapSecond()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if {@link #getLeapSecond()} is available, {@code false} otherwise.\n     ",
    "links" : [ "#getLeapSecond" ]
  }, {
    "name" : "public int getLeapSecond()",
    "returnType" : "int",
    "comment" : "\n     * Gets the leap second associated with the clock's time.\n     *\n     * <p>The sign of the value is defined by the following equation:\n     * <pre>\n     *     UtcTimeNanos = TimeNanos - (FullBiasNanos + BiasNanos) - LeapSecond * 1,000,000,000</pre>\n     *\n     * <p>The value is only available if {@link #hasLeapSecond()} is {@code true}.\n     ",
    "links" : [ "#hasLeapSecond" ]
  }, {
    "name" : "public void setLeapSecond(int leapSecond)",
    "returnType" : "void",
    "comment" : "\n     * Sets the leap second associated with the clock's time.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void resetLeapSecond()",
    "returnType" : "void",
    "comment" : "\n     * Resets the leap second associated with the clock's time.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getTimeNanos()",
    "returnType" : "long",
    "comment" : "\n     * Gets the GNSS receiver internal hardware clock value in nanoseconds.\n     *\n     * <p>This value is expected to be monotonically increasing while the hardware clock remains\n     * powered on. For the case of a hardware clock that is not continuously on, see the\n     * {@link #getHardwareClockDiscontinuityCount} field. The GPS time can be derived by subtracting\n     * the sum of {@link #getFullBiasNanos()} and {@link #getBiasNanos()} (when they are available)\n     * from this value. Sub-nanosecond accuracy can be provided by means of {@link #getBiasNanos()}.\n     *\n     * <p>The error estimate for this value (if applicable) is {@link #getTimeUncertaintyNanos()}.\n     ",
    "links" : [ "#getHardwareClockDiscontinuityCount", "#getFullBiasNanos", "#getBiasNanos", "#getBiasNanos", "#getTimeUncertaintyNanos" ]
  }, {
    "name" : "public void setTimeNanos(long timeNanos)",
    "returnType" : "void",
    "comment" : "\n     * Sets the GNSS receiver internal clock in nanoseconds.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasTimeUncertaintyNanos()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if {@link #getTimeUncertaintyNanos()} is available, {@code false}\n     * otherwise.\n     ",
    "links" : [ "#getTimeUncertaintyNanos" ]
  }, {
    "name" : "public double getTimeUncertaintyNanos()",
    "returnType" : "double",
    "comment" : "\n     * Gets the clock's time Uncertainty (1-Sigma) in nanoseconds.\n     *\n     * <p>The uncertainty is represented as an absolute (single sided) value.\n     *\n     * <p>The value is only available if {@link #hasTimeUncertaintyNanos()} is {@code true}.\n     *\n     * <p>This value is often effectively zero (it is the reference clock by which all other times\n     * and time uncertainties are measured), and thus this field may often be 0, or not provided.\n     ",
    "links" : [ "#hasTimeUncertaintyNanos" ]
  }, {
    "name" : "public void setTimeUncertaintyNanos(@FloatRange(from = 0.0f) double timeUncertaintyNanos)",
    "returnType" : "void",
    "comment" : "\n     * Sets the clock's Time Uncertainty (1-Sigma) in nanoseconds.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void resetTimeUncertaintyNanos()",
    "returnType" : "void",
    "comment" : "\n     * Resets the clock's Time Uncertainty (1-Sigma) in nanoseconds.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasFullBiasNanos()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if {@link #getFullBiasNanos()} is available, {@code false} otherwise.\n     ",
    "links" : [ "#getFullBiasNanos" ]
  }, {
    "name" : "public long getFullBiasNanos()",
    "returnType" : "long",
    "comment" : "\n     * Gets the difference between hardware clock ({@link #getTimeNanos()}) inside GPS receiver and\n     * the true GPS time since 0000Z, January 6, 1980, in nanoseconds.\n     *\n     * <p>This value is available if the receiver has estimated GPS time. If the computed time is\n     * for a non-GPS constellation, the time offset of that constellation to GPS has to be applied\n     * to fill this value. The value is only available if {@link #hasFullBiasNanos()} is\n     * {@code true}.\n     *\n     * <p>The error estimate for the sum of this field and {@link #getBiasNanos} is\n     * {@link #getBiasUncertaintyNanos()}.\n     *\n     * <p>The sign of the value is defined by the following equation:\n     *\n     * <pre>\n     *     local estimate of GPS time = TimeNanos - (FullBiasNanos + BiasNanos)</pre>\n     ",
    "links" : [ "#getTimeNanos", "#hasFullBiasNanos", "#getBiasNanos", "#getBiasUncertaintyNanos" ]
  }, {
    "name" : "public void setFullBiasNanos(long value)",
    "returnType" : "void",
    "comment" : "\n     * Sets the full bias in nanoseconds.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void resetFullBiasNanos()",
    "returnType" : "void",
    "comment" : "\n     * Resets the full bias in nanoseconds.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasBiasNanos()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if {@link #getBiasNanos()} is available, {@code false} otherwise.\n     ",
    "links" : [ "#getBiasNanos" ]
  }, {
    "name" : "public double getBiasNanos()",
    "returnType" : "double",
    "comment" : "\n     * Gets the clock's sub-nanosecond bias.\n     *\n     * <p>See the description of how this field is part of converting from hardware clock time, to\n     * GPS time, in {@link #getFullBiasNanos()}.\n     *\n     * <p>The error estimate for the sum of this field and {@link #getFullBiasNanos} is\n     * {@link #getBiasUncertaintyNanos()}.\n     *\n     * <p>The value is only available if {@link #hasBiasNanos()} is {@code true}.\n     ",
    "links" : [ "#getFullBiasNanos", "#getFullBiasNanos", "#getBiasUncertaintyNanos", "#hasBiasNanos" ]
  }, {
    "name" : "public void setBiasNanos(double biasNanos)",
    "returnType" : "void",
    "comment" : "\n     * Sets the sub-nanosecond bias.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void resetBiasNanos()",
    "returnType" : "void",
    "comment" : "\n     * Resets the clock's Bias in nanoseconds.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasBiasUncertaintyNanos()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if {@link #getBiasUncertaintyNanos()} is available, {@code false}\n     * otherwise.\n     ",
    "links" : [ "#getBiasUncertaintyNanos" ]
  }, {
    "name" : "public double getBiasUncertaintyNanos()",
    "returnType" : "double",
    "comment" : "\n     * Gets the clock's Bias Uncertainty (1-Sigma) in nanoseconds.\n     *\n     * <p>See the description of how this field provides the error estimate in the conversion from\n     * hardware clock time, to GPS time, in {@link #getFullBiasNanos()}.\n     *\n     * <p>The value is only available if {@link #hasBiasUncertaintyNanos()} is {@code true}.\n     ",
    "links" : [ "#getFullBiasNanos", "#hasBiasUncertaintyNanos" ]
  }, {
    "name" : "public void setBiasUncertaintyNanos(@FloatRange(from = 0.0f) double biasUncertaintyNanos)",
    "returnType" : "void",
    "comment" : "\n     * Sets the clock's Bias Uncertainty (1-Sigma) in nanoseconds.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void resetBiasUncertaintyNanos()",
    "returnType" : "void",
    "comment" : "\n     * Resets the clock's Bias Uncertainty (1-Sigma) in nanoseconds.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasDriftNanosPerSecond()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if {@link #getDriftNanosPerSecond()} is available, {@code false}\n     * otherwise.\n     ",
    "links" : [ "#getDriftNanosPerSecond" ]
  }, {
    "name" : "public double getDriftNanosPerSecond()",
    "returnType" : "double",
    "comment" : "\n     * Gets the clock's Drift in nanoseconds per second.\n     *\n     * <p>This value is the instantaneous time-derivative of the value provided by\n     * {@link #getBiasNanos()}.\n     *\n     * <p>A positive value indicates that the frequency is higher than the nominal (e.g. GPS master\n     * clock) frequency. The error estimate for this reported drift is\n     * {@link #getDriftUncertaintyNanosPerSecond()}.\n     *\n     * <p>The value is only available if {@link #hasDriftNanosPerSecond()} is {@code true}.\n     ",
    "links" : [ "#getBiasNanos", "#getDriftUncertaintyNanosPerSecond", "#hasDriftNanosPerSecond" ]
  }, {
    "name" : "public void setDriftNanosPerSecond(double driftNanosPerSecond)",
    "returnType" : "void",
    "comment" : "\n     * Sets the clock's Drift in nanoseconds per second.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void resetDriftNanosPerSecond()",
    "returnType" : "void",
    "comment" : "\n     * Resets the clock's Drift in nanoseconds per second.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasDriftUncertaintyNanosPerSecond()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if {@link #getDriftUncertaintyNanosPerSecond()} is available,\n     * {@code false} otherwise.\n     ",
    "links" : [ "#getDriftUncertaintyNanosPerSecond" ]
  }, {
    "name" : "public double getDriftUncertaintyNanosPerSecond()",
    "returnType" : "double",
    "comment" : "\n     * Gets the clock's Drift Uncertainty (1-Sigma) in nanoseconds per second.\n     *\n     * <p>The value is only available if {@link #hasDriftUncertaintyNanosPerSecond()} is\n     * {@code true}.\n     ",
    "links" : [ "#hasDriftUncertaintyNanosPerSecond" ]
  }, {
    "name" : "public void setDriftUncertaintyNanosPerSecond(@FloatRange(from = 0.0f) double driftUncertaintyNanosPerSecond)",
    "returnType" : "void",
    "comment" : "\n     * Sets the clock's Drift Uncertainty (1-Sigma) in nanoseconds per second.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void resetDriftUncertaintyNanosPerSecond()",
    "returnType" : "void",
    "comment" : "\n     * Resets the clock's Drift Uncertainty (1-Sigma) in nanoseconds per second.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasElapsedRealtimeNanos()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if {@link #getElapsedRealtimeNanos()} is available, {@code false}\n     * otherwise.\n     ",
    "links" : [ "#getElapsedRealtimeNanos" ]
  }, {
    "name" : "public long getElapsedRealtimeNanos()",
    "returnType" : "long",
    "comment" : "\n     * Returns the elapsed real-time of this clock since system boot, in nanoseconds.\n     *\n     * <p>The value is only available if {@link #hasElapsedRealtimeNanos()} is\n     * {@code true}.\n     ",
    "links" : [ "#hasElapsedRealtimeNanos" ]
  }, {
    "name" : "public void setElapsedRealtimeNanos(long elapsedRealtimeNanos)",
    "returnType" : "void",
    "comment" : "\n     * Sets the elapsed real-time of this clock since system boot, in nanoseconds.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void resetElapsedRealtimeNanos()",
    "returnType" : "void",
    "comment" : "\n     * Resets the elapsed real-time of this clock since system boot, in nanoseconds.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasElapsedRealtimeUncertaintyNanos()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if {@link #getElapsedRealtimeUncertaintyNanos()} is available, {@code\n     * false} otherwise.\n     ",
    "links" : [ "#getElapsedRealtimeUncertaintyNanos" ]
  }, {
    "name" : "public double getElapsedRealtimeUncertaintyNanos()",
    "returnType" : "double",
    "comment" : "\n     * Gets the estimate of the relative precision of the alignment of the\n     * {@link #getElapsedRealtimeNanos()} timestamp, with the reported measurements in\n     * nanoseconds (68% confidence).\n     *\n     * <p>The value is only available if {@link #hasElapsedRealtimeUncertaintyNanos()} is\n     * {@code true}.\n     ",
    "links" : [ "#getElapsedRealtimeNanos", "#hasElapsedRealtimeUncertaintyNanos" ]
  }, {
    "name" : "public void setElapsedRealtimeUncertaintyNanos(@FloatRange(from = 0.0f) double elapsedRealtimeUncertaintyNanos)",
    "returnType" : "void",
    "comment" : "\n     * Sets the estimate of the relative precision of the alignment of the\n     * {@link #getElapsedRealtimeNanos()} timestamp, with the reported measurements in\n     * nanoseconds (68% confidence).\n     * @hide\n     ",
    "links" : [ "#getElapsedRealtimeNanos" ]
  }, {
    "name" : "public void resetElapsedRealtimeUncertaintyNanos()",
    "returnType" : "void",
    "comment" : "\n     * Resets the estimate of the relative precision of the alignment of the\n     * {@link #getElapsedRealtimeNanos()} timestamp, with the reported measurements in\n     * nanoseconds (68% confidence).\n     * @hide\n     ",
    "links" : [ "#getElapsedRealtimeNanos" ]
  }, {
    "name" : "public boolean hasReferenceConstellationTypeForIsb()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if {@link #getReferenceConstellationTypeForIsb()} is available,\n     * {@code false} otherwise.\n     ",
    "links" : [ "#getReferenceConstellationTypeForIsb" ]
  }, {
    "name" : "public int getReferenceConstellationTypeForIsb()",
    "returnType" : "int",
    "comment" : "\n     * Returns the reference constellation type for inter-signal bias.\n     *\n     * <p>The value is only available if {@link #hasReferenceConstellationTypeForIsb()} is\n     * {@code true}.\n     *\n     * <p>The return value is one of those constants with {@code CONSTELLATION_} prefix in\n     * {@link GnssStatus}.\n     ",
    "links" : [ "#hasReferenceConstellationTypeForIsb", "GnssStatus" ]
  }, {
    "name" : "public void setReferenceConstellationTypeForIsb(@GnssStatus.ConstellationType int value)",
    "returnType" : "void",
    "comment" : "\n     * Sets the reference constellation type for inter-signal bias.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void resetReferenceConstellationTypeForIsb()",
    "returnType" : "void",
    "comment" : "\n     * Resets the reference constellation type for inter-signal bias.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasReferenceCarrierFrequencyHzForIsb()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if {@link #getReferenceCarrierFrequencyHzForIsb()} is available, {@code\n     * false} otherwise.\n     ",
    "links" : [ "#getReferenceCarrierFrequencyHzForIsb" ]
  }, {
    "name" : "public double getReferenceCarrierFrequencyHzForIsb()",
    "returnType" : "double",
    "comment" : "\n     * Returns the reference carrier frequency in Hz for inter-signal bias.\n     *\n     * <p>The value is only available if {@link #hasReferenceCarrierFrequencyHzForIsb()} is\n     * {@code true}.\n     ",
    "links" : [ "#hasReferenceCarrierFrequencyHzForIsb" ]
  }, {
    "name" : "public void setReferenceCarrierFrequencyHzForIsb(@FloatRange(from = 0.0) double value)",
    "returnType" : "void",
    "comment" : "\n     * Sets the reference carrier frequency in Hz for inter-signal bias.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void resetReferenceCarrierFrequencyHzForIsb()",
    "returnType" : "void",
    "comment" : "\n     * Resets the reference carrier frequency in Hz for inter-signal bias.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasReferenceCodeTypeForIsb()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if {@link #getReferenceCodeTypeForIsb()} is available, {@code\n     * false} otherwise.\n     ",
    "links" : [ "#getReferenceCodeTypeForIsb" ]
  }, {
    "name" : "public String getReferenceCodeTypeForIsb()",
    "returnType" : "String",
    "comment" : "\n     * Returns the reference code type for inter-signal bias.\n     *\n     * <p>The value is only available if {@link #hasReferenceCodeTypeForIsb()} is\n     * {@code true}.\n     *\n     * <p>The return value is one of those constants defined in\n     * {@link GnssMeasurement#getCodeType()}.\n     ",
    "links" : [ "#hasReferenceCodeTypeForIsb", "GnssMeasurement#getCodeType" ]
  }, {
    "name" : "public void setReferenceCodeTypeForIsb(@NonNull String codeType)",
    "returnType" : "void",
    "comment" : "\n     * Sets the reference code type for inter-signal bias.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void resetReferenceCodeTypeForIsb()",
    "returnType" : "void",
    "comment" : "\n     * Resets the reference code type for inter-signal bias.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getHardwareClockDiscontinuityCount()",
    "returnType" : "int",
    "comment" : "\n     * Gets count of hardware clock discontinuities.\n     *\n     * <p>When this value stays the same, vs. a value in a previously reported {@link GnssClock}, it\n     * can be safely assumed that the {@code TimeNanos} value has been derived from a clock that has\n     * been running continuously - e.g. a single continuously powered crystal oscillator, and thus\n     * the {@code (FullBiasNanos + BiasNanos)} offset can be modelled with traditional clock bias\n     * &amp; drift models.\n     *\n     * <p>Each time this value changes, vs. the value in a previously reported {@link GnssClock},\n     * that suggests the hardware clock may have experienced a discontinuity (e.g. a power cycle or\n     * other anomaly), so that any assumptions about modelling a smoothly changing\n     * {@code (FullBiasNanos + BiasNanos)} offset, and a smoothly growing {@code (TimeNanos)}\n     * between this and the previously reported {@code GnssClock}, should be reset.\n     ",
    "links" : [ "GnssClock", "GnssClock" ]
  }, {
    "name" : "public void setHardwareClockDiscontinuityCount(int value)",
    "returnType" : "void",
    "comment" : "\n     * Sets count of last hardware clock discontinuity.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel parcel, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void initialize()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setFlag(int flag)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void resetFlag(int flag)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isFlagSet(int flag)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "HAS_NO_FLAGS", "HAS_LEAP_SECOND", "HAS_TIME_UNCERTAINTY", "HAS_FULL_BIAS", "HAS_BIAS", "HAS_BIAS_UNCERTAINTY", "HAS_DRIFT", "HAS_DRIFT_UNCERTAINTY", "HAS_ELAPSED_REALTIME_NANOS", "HAS_ELAPSED_REALTIME_UNCERTAINTY_NANOS", "HAS_REFERENCE_CONSTELLATION_TYPE_FOR_ISB", "HAS_REFERENCE_CARRIER_FREQUENCY_FOR_ISB", "HAS_REFERENCE_CODE_TYPE_FOR_ISB", "mFlags", "mLeapSecond", "mTimeNanos", "mTimeUncertaintyNanos", "mFullBiasNanos", "mBiasNanos", "mBiasUncertaintyNanos", "mDriftNanosPerSecond", "mDriftUncertaintyNanosPerSecond", "mHardwareClockDiscontinuityCount", "mElapsedRealtimeNanos", "mElapsedRealtimeUncertaintyNanos", "mReferenceConstellationTypeForIsb", "mReferenceCarrierFrequencyHzForIsb", "mReferenceCodeTypeForIsb", "CREATOR" ],
  "methodNames" : [ "public void set(GnssClock clock)", "public void reset()", "public boolean hasLeapSecond()", "public int getLeapSecond()", "public void setLeapSecond(int leapSecond)", "public void resetLeapSecond()", "public long getTimeNanos()", "public void setTimeNanos(long timeNanos)", "public boolean hasTimeUncertaintyNanos()", "public double getTimeUncertaintyNanos()", "public void setTimeUncertaintyNanos(@FloatRange(from = 0.0f) double timeUncertaintyNanos)", "public void resetTimeUncertaintyNanos()", "public boolean hasFullBiasNanos()", "public long getFullBiasNanos()", "public void setFullBiasNanos(long value)", "public void resetFullBiasNanos()", "public boolean hasBiasNanos()", "public double getBiasNanos()", "public void setBiasNanos(double biasNanos)", "public void resetBiasNanos()", "public boolean hasBiasUncertaintyNanos()", "public double getBiasUncertaintyNanos()", "public void setBiasUncertaintyNanos(@FloatRange(from = 0.0f) double biasUncertaintyNanos)", "public void resetBiasUncertaintyNanos()", "public boolean hasDriftNanosPerSecond()", "public double getDriftNanosPerSecond()", "public void setDriftNanosPerSecond(double driftNanosPerSecond)", "public void resetDriftNanosPerSecond()", "public boolean hasDriftUncertaintyNanosPerSecond()", "public double getDriftUncertaintyNanosPerSecond()", "public void setDriftUncertaintyNanosPerSecond(@FloatRange(from = 0.0f) double driftUncertaintyNanosPerSecond)", "public void resetDriftUncertaintyNanosPerSecond()", "public boolean hasElapsedRealtimeNanos()", "public long getElapsedRealtimeNanos()", "public void setElapsedRealtimeNanos(long elapsedRealtimeNanos)", "public void resetElapsedRealtimeNanos()", "public boolean hasElapsedRealtimeUncertaintyNanos()", "public double getElapsedRealtimeUncertaintyNanos()", "public void setElapsedRealtimeUncertaintyNanos(@FloatRange(from = 0.0f) double elapsedRealtimeUncertaintyNanos)", "public void resetElapsedRealtimeUncertaintyNanos()", "public boolean hasReferenceConstellationTypeForIsb()", "public int getReferenceConstellationTypeForIsb()", "public void setReferenceConstellationTypeForIsb(@GnssStatus.ConstellationType int value)", "public void resetReferenceConstellationTypeForIsb()", "public boolean hasReferenceCarrierFrequencyHzForIsb()", "public double getReferenceCarrierFrequencyHzForIsb()", "public void setReferenceCarrierFrequencyHzForIsb(@FloatRange(from = 0.0) double value)", "public void resetReferenceCarrierFrequencyHzForIsb()", "public boolean hasReferenceCodeTypeForIsb()", "public String getReferenceCodeTypeForIsb()", "public void setReferenceCodeTypeForIsb(@NonNull String codeType)", "public void resetReferenceCodeTypeForIsb()", "public int getHardwareClockDiscontinuityCount()", "public void setHardwareClockDiscontinuityCount(int value)", "public void writeToParcel(Parcel parcel, int flags)", "public int describeContents()", "public String toString()", "private void initialize()", "private void setFlag(int flag)", "private void resetFlag(int flag)", "private boolean isFlagSet(int flag)" ]
}