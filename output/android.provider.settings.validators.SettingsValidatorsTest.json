{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/provider/settings/validators/SettingsValidatorsTest.java",
  "packageName" : "android.provider.settings.validators",
  "className" : "SettingsValidatorsTest",
  "comment" : "\n * Tests that ensure all backed up settings have non-null validators. Also, common validators\n * are tested.\n ",
  "variables" : [ ],
  "methods" : [ {
    "name" : "public void testNonNegativeIntegerValidator()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void testNonNegativeIntegerValidator_onNullValue_returnsFalse()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void testAnyIntegerValidator()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void testAnyIntegerValidator_onNullValue_returnsFalse()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void testUriValidator_onNullValue_returnsTrue()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void testComponentNameValidator()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void testComponentNameValidator_onNullValue_returnsFalse()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void testLenientIpAddressValidator_onNullValue_returnsFalse()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void testNullableComponentNameValidator_onValidComponentName_returnsTrue()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void testNullableComponentNameValidator_onInvalidComponentName_returnsFalse()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void testNullableComponentNameValidator_onNullValue_returnsTrue()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void testLocaleValidator()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void testLocaleValidator_onNullValue_returnsFalse()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void testPackageNameValidator()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void testPackageNameValidator_onNullValue_returnsFalse()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void testDiscreteValueValidator()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void testDiscreteValueValidator_onNullValue_returnsFalse()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void testInclusiveIntegerRangeValidator()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void testInclusiveIntegerRangeValidator_onNullValue_returnsFalse()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void testInclusiveFloatRangeValidator()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void testInclusiveFloatRangeValidator_onNullValue_returnsFalse()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void testComponentNameListValidator()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void testComponentNameListValidator_onNullValue_returnsFalse()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void testPackageNameListValidator()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void testPackageNameListValidator_onNullValue_returnsFalse()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dateFormatValidator_onNullValue_returnsFalse()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void testJSONObjectValidator() throws JSONException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void testJSONObjectValidator_onNullValue_returnsFalse()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void testJSONObjectValidator_onEmptyString_returnsFalse()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void ensureAllBackedUpSystemSettingsHaveValidators()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void testTTSListValidator_withValidInput_returnsTrue()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void testTTSListValidator_withInvalidInput_returnsFalse()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void testTTSListValidator_withEmptyInput_returnsFalse()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void testPositiveLongValidator_zero()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void testPositiveLongValidator_negative()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void testPositiveLongValidator_positive()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void testPositiveLongValidator_floatFormat()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void testTTSListValidator_withNullInput_returnsFalse()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void testTileListValidator_withValidInput_returnsTrue()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void testTileListValidator_withMissingValue_returnsFalse()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void testTileListValidator_withNullInput_returnsFalse()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void testAccessibilityShortcutTargetValidator()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void ensureAllBackedUpGlobalSettingsHaveValidators()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void ensureAllBackedUpSecureSettingsHaveValidators()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void failIfOffendersPresent(String offenders, String settingsType)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String getOffenders(String[] settingsToBackup, Map<String, Validator> validators)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String[] concat(String[] first, String[] second)",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ ],
  "methodNames" : [ "public void testNonNegativeIntegerValidator()", "public void testNonNegativeIntegerValidator_onNullValue_returnsFalse()", "public void testAnyIntegerValidator()", "public void testAnyIntegerValidator_onNullValue_returnsFalse()", "public void testUriValidator_onNullValue_returnsTrue()", "public void testComponentNameValidator()", "public void testComponentNameValidator_onNullValue_returnsFalse()", "public void testLenientIpAddressValidator_onNullValue_returnsFalse()", "public void testNullableComponentNameValidator_onValidComponentName_returnsTrue()", "public void testNullableComponentNameValidator_onInvalidComponentName_returnsFalse()", "public void testNullableComponentNameValidator_onNullValue_returnsTrue()", "public void testLocaleValidator()", "public void testLocaleValidator_onNullValue_returnsFalse()", "public void testPackageNameValidator()", "public void testPackageNameValidator_onNullValue_returnsFalse()", "public void testDiscreteValueValidator()", "public void testDiscreteValueValidator_onNullValue_returnsFalse()", "public void testInclusiveIntegerRangeValidator()", "public void testInclusiveIntegerRangeValidator_onNullValue_returnsFalse()", "public void testInclusiveFloatRangeValidator()", "public void testInclusiveFloatRangeValidator_onNullValue_returnsFalse()", "public void testComponentNameListValidator()", "public void testComponentNameListValidator_onNullValue_returnsFalse()", "public void testPackageNameListValidator()", "public void testPackageNameListValidator_onNullValue_returnsFalse()", "public void dateFormatValidator_onNullValue_returnsFalse()", "public void testJSONObjectValidator() throws JSONException", "public void testJSONObjectValidator_onNullValue_returnsFalse()", "public void testJSONObjectValidator_onEmptyString_returnsFalse()", "public void ensureAllBackedUpSystemSettingsHaveValidators()", "public void testTTSListValidator_withValidInput_returnsTrue()", "public void testTTSListValidator_withInvalidInput_returnsFalse()", "public void testTTSListValidator_withEmptyInput_returnsFalse()", "public void testPositiveLongValidator_zero()", "public void testPositiveLongValidator_negative()", "public void testPositiveLongValidator_positive()", "public void testPositiveLongValidator_floatFormat()", "public void testTTSListValidator_withNullInput_returnsFalse()", "public void testTileListValidator_withValidInput_returnsTrue()", "public void testTileListValidator_withMissingValue_returnsFalse()", "public void testTileListValidator_withNullInput_returnsFalse()", "public void testAccessibilityShortcutTargetValidator()", "public void ensureAllBackedUpGlobalSettingsHaveValidators()", "public void ensureAllBackedUpSecureSettingsHaveValidators()", "private void failIfOffendersPresent(String offenders, String settingsType)", "private String getOffenders(String[] settingsToBackup, Map<String, Validator> validators)", "private String[] concat(String[] first, String[] second)" ]
}