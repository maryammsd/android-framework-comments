{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/w3c/dom/DOMException.java",
  "packageName" : "org.w3c.dom",
  "className" : "DOMException",
  "comment" : "\n * DOM operations only raise exceptions in \"exceptional\" circumstances, i.e.,\n * when an operation is impossible to perform (either for logical reasons,\n * because data is lost, or because the implementation has become unstable).\n * In general, DOM methods return specific error values in ordinary\n * processing situations, such as out-of-bound errors when using\n * <code>NodeList</code>.\n * <p>Implementations should raise other exceptions under other circumstances.\n * For example, implementations should raise an implementation-dependent\n * exception if a <code>null</code> argument is passed when <code>null</code>\n *  was not expected.\n * <p>Some languages and object systems do not support the concept of\n * exceptions. For such systems, error conditions may be indicated using\n * native error reporting mechanisms. For some bindings, for example,\n * methods may return error codes similar to those listed in the\n * corresponding method descriptions.\n * <p>See also the <a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>Document Object Model (DOM) Level 3 Core Specification</a>.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "code",
    "type" : "short",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INDEX_SIZE_ERR",
    "type" : "short",
    "comment" : "\n     * If index or size is negative, or greater than the allowed value.\n     ",
    "links" : [ ]
  }, {
    "name" : "DOMSTRING_SIZE_ERR",
    "type" : "short",
    "comment" : "\n     * If the specified range of text does not fit into a\n     * <code>DOMString</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "HIERARCHY_REQUEST_ERR",
    "type" : "short",
    "comment" : "\n     * If any <code>Node</code> is inserted somewhere it doesn't belong.\n     ",
    "links" : [ ]
  }, {
    "name" : "WRONG_DOCUMENT_ERR",
    "type" : "short",
    "comment" : "\n     * If a <code>Node</code> is used in a different document than the one\n     * that created it (that doesn't support it).\n     ",
    "links" : [ ]
  }, {
    "name" : "INVALID_CHARACTER_ERR",
    "type" : "short",
    "comment" : "\n     * If an invalid or illegal character is specified, such as in an XML name.\n     ",
    "links" : [ ]
  }, {
    "name" : "NO_DATA_ALLOWED_ERR",
    "type" : "short",
    "comment" : "\n     * If data is specified for a <code>Node</code> which does not support\n     * data.\n     ",
    "links" : [ ]
  }, {
    "name" : "NO_MODIFICATION_ALLOWED_ERR",
    "type" : "short",
    "comment" : "\n     * If an attempt is made to modify an object where modifications are not\n     * allowed.\n     ",
    "links" : [ ]
  }, {
    "name" : "NOT_FOUND_ERR",
    "type" : "short",
    "comment" : "\n     * If an attempt is made to reference a <code>Node</code> in a context\n     * where it does not exist.\n     ",
    "links" : [ ]
  }, {
    "name" : "NOT_SUPPORTED_ERR",
    "type" : "short",
    "comment" : "\n     * If the implementation does not support the requested type of object or\n     * operation.\n     ",
    "links" : [ ]
  }, {
    "name" : "INUSE_ATTRIBUTE_ERR",
    "type" : "short",
    "comment" : "\n     * If an attempt is made to add an attribute that is already in use\n     * elsewhere.\n     ",
    "links" : [ ]
  }, {
    "name" : "INVALID_STATE_ERR",
    "type" : "short",
    "comment" : "\n     * If an attempt is made to use an object that is not, or is no longer,\n     * usable.\n     * @since DOM Level 2\n     ",
    "links" : [ ]
  }, {
    "name" : "SYNTAX_ERR",
    "type" : "short",
    "comment" : "\n     * If an invalid or illegal string is specified.\n     * @since DOM Level 2\n     ",
    "links" : [ ]
  }, {
    "name" : "INVALID_MODIFICATION_ERR",
    "type" : "short",
    "comment" : "\n     * If an attempt is made to modify the type of the underlying object.\n     * @since DOM Level 2\n     ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE_ERR",
    "type" : "short",
    "comment" : "\n     * If an attempt is made to create or change an object in a way which is\n     * incorrect with regard to namespaces.\n     * @since DOM Level 2\n     ",
    "links" : [ ]
  }, {
    "name" : "INVALID_ACCESS_ERR",
    "type" : "short",
    "comment" : "\n     * If a parameter or an operation is not supported by the underlying\n     * object.\n     * @since DOM Level 2\n     ",
    "links" : [ ]
  }, {
    "name" : "VALIDATION_ERR",
    "type" : "short",
    "comment" : "\n     * If a call to a method such as <code>insertBefore</code> or\n     * <code>removeChild</code> would make the <code>Node</code> invalid\n     * with respect to \"partial validity\", this exception would be raised\n     * and the operation would not be done. This code is used in [<a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Val-20040127/'>DOM Level 3 Validation</a>]\n     * . Refer to this specification for further information.\n     * @since DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_MISMATCH_ERR",
    "type" : "short",
    "comment" : "\n     *  If the type of an object is incompatible with the expected type of the\n     * parameter associated to the object.\n     * @since DOM Level 3\n     ",
    "links" : [ ]
  } ],
  "methods" : [ ],
  "methodNames" : [ ],
  "variableNames" : [ "code", "INDEX_SIZE_ERR", "DOMSTRING_SIZE_ERR", "HIERARCHY_REQUEST_ERR", "WRONG_DOCUMENT_ERR", "INVALID_CHARACTER_ERR", "NO_DATA_ALLOWED_ERR", "NO_MODIFICATION_ALLOWED_ERR", "NOT_FOUND_ERR", "NOT_SUPPORTED_ERR", "INUSE_ATTRIBUTE_ERR", "INVALID_STATE_ERR", "SYNTAX_ERR", "INVALID_MODIFICATION_ERR", "NAMESPACE_ERR", "INVALID_ACCESS_ERR", "VALIDATION_ERR", "TYPE_MISMATCH_ERR" ]
}