{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/number/parse/DecimalMatcher.java",
  "packageName" : "android.icu.impl.number.parse",
  "className" : "DecimalMatcher",
  "comment" : "\n * @author sffc\n * @hide Only a subset of ICU is exposed in Android\n *\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "requireGroupingMatch",
    "type" : "boolean",
    "comment" : " If true, only accept strings whose grouping sizes match the locale ",
    "links" : [ ]
  }, {
    "name" : "groupingDisabled",
    "type" : "boolean",
    "comment" : " If true, do not accept grouping separators at all ",
    "links" : [ ]
  }, {
    "name" : "integerOnly",
    "type" : "boolean",
    "comment" : " If true, do not accept numbers in the fraction ",
    "links" : [ ]
  }, {
    "name" : "grouping1",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "grouping2",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "groupingSeparator",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "decimalSeparator",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "groupingUniSet",
    "type" : "UnicodeSet",
    "comment" : " fix getLeadCodePoints() as well as matching logic. Be careful of the performance impact.",
    "links" : [ ]
  }, {
    "name" : "decimalUniSet",
    "type" : "UnicodeSet",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "separatorSet",
    "type" : "UnicodeSet",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "leadSet",
    "type" : "UnicodeSet",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "digitStrings",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static DecimalMatcher getInstance(DecimalFormatSymbols symbols, Grouper grouper, int parseFlags)",
    "returnType" : "DecimalMatcher",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean match(StringSegment segment, ParsedNumber result)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean match(StringSegment segment, ParsedNumber result, int exponentSign)",
    "returnType" : "boolean",
    "comment" : "\n     * @param exponentSign\n     *            -1 means a negative exponent; +1 means a positive exponent; 0 means NO exponent. If -1\n     *            or +1, the number will be saved by scaling the pre-existing DecimalQuantity in the\n     *            ParsedNumber. If 0, a new DecimalQuantity will be created to store the number.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean validateGroup(int sepType, int count, boolean isPrimary)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean smokeTest(StringSegment segment)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void postProcess(ParsedNumber result)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static DecimalMatcher getInstance(DecimalFormatSymbols symbols, Grouper grouper, int parseFlags)", "public boolean match(StringSegment segment, ParsedNumber result)", "public boolean match(StringSegment segment, ParsedNumber result, int exponentSign)", "private boolean validateGroup(int sepType, int count, boolean isPrimary)", "public boolean smokeTest(StringSegment segment)", "public void postProcess(ParsedNumber result)", "public String toString()" ],
  "variableNames" : [ "requireGroupingMatch", "groupingDisabled", "integerOnly", "grouping1", "grouping2", "groupingSeparator", "decimalSeparator", "groupingUniSet", "decimalUniSet", "separatorSet", "leadSet", "digitStrings" ]
}