{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/stream/Node.java",
  "packageName" : "java.util.stream",
  "className" : "OfDouble",
  "comment" : "\n     * Specialized {@code Node} for double elements\n     ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " void forEach(Consumer<? super Double> consumer)",
    "returnType" : "void",
    "comment" : "\n         * {@inheritDoc}\n         *\n         * @param consumer A {@code Consumer} that is to be invoked with each\n         *        element in this {@code Node}.  If this is an\n         *        {@code DoubleConsumer}, it is cast to {@code DoubleConsumer}\n         *        so the elements may be processed without boxing.\n         ",
    "links" : [ ]
  }, {
    "name" : " void copyInto(Double[] boxed, int offset)",
    "returnType" : "void",
    "comment" : "\n         * {@inheritDoc}\n         *\n         * @implSpec the default implementation invokes {@link #asPrimitiveArray()}\n         * to obtain a double[] array then and copies the elements from that\n         * double[] array into the boxed Double[] array.  This is not efficient\n         * and it is recommended to invoke {@link #copyInto(Object, int)}.\n         ",
    "links" : [ "#asPrimitiveArray()", "#copyInto(Object" ]
  }, {
    "name" : " Node.OfDouble truncate(long from, long to, IntFunction<Double[]> generator)",
    "returnType" : "Node.OfDouble",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " double[] newArray(int count)",
    "returnType" : "double[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " StreamShape getShape()",
    "returnType" : "StreamShape",
    "comment" : "\n         * {@inheritDoc}\n         *\n         * @implSpec The default in {@code Node.OfDouble} returns\n         * {@code StreamShape.DOUBLE_VALUE}\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ " void forEach(Consumer<? super Double> consumer)", " void copyInto(Double[] boxed, int offset)", " Node.OfDouble truncate(long from, long to, IntFunction<Double[]> generator)", " double[] newArray(int count)", " StreamShape getShape()" ],
  "variableNames" : [ ]
}