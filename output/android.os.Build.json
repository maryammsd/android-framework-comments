{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/os/Build.java",
  "packageName" : "android.os",
  "className" : "Build",
  "comment" : "\n * Information about the current build, extracted from system properties.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UNKNOWN",
    "type" : "String",
    "comment" : " Value used for when a build property is unknown. ",
    "links" : [ ]
  }, {
    "name" : "ID",
    "type" : "String",
    "comment" : " Either a changelist number, or a label like \"M4-rc20\". ",
    "links" : [ ]
  }, {
    "name" : "DISPLAY",
    "type" : "String",
    "comment" : " A build ID string meant for displaying to the user ",
    "links" : [ ]
  }, {
    "name" : "PRODUCT",
    "type" : "String",
    "comment" : " The name of the overall product. ",
    "links" : [ ]
  }, {
    "name" : "PRODUCT_FOR_ATTESTATION",
    "type" : "String",
    "comment" : "\n     * The product name for attestation. In non-default builds (like the AOSP build) the value of\n     * the 'PRODUCT' system property may be different to the one provisioned to KeyMint,\n     * and Keymint attestation would still attest to the product name which was provisioned.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "DEVICE",
    "type" : "String",
    "comment" : " The name of the industrial design. ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_FOR_ATTESTATION",
    "type" : "String",
    "comment" : "\n     * The device name for attestation. In non-default builds (like the AOSP build) the value of\n     * the 'DEVICE' system property may be different to the one provisioned to KeyMint,\n     * and Keymint attestation would still attest to the device name which was provisioned.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BOARD",
    "type" : "String",
    "comment" : " The name of the underlying board, like \"goldfish\". ",
    "links" : [ ]
  }, {
    "name" : "CPU_ABI",
    "type" : "String",
    "comment" : "\n     * The name of the instruction set (CPU type + ABI convention) of native code.\n     *\n     * @deprecated Use {@link #SUPPORTED_ABIS} instead.\n     ",
    "links" : [ "#SUPPORTED_ABIS" ]
  }, {
    "name" : "CPU_ABI2",
    "type" : "String",
    "comment" : "\n     * The name of the second instruction set (CPU type + ABI convention) of native code.\n     *\n     * @deprecated Use {@link #SUPPORTED_ABIS} instead.\n     ",
    "links" : [ "#SUPPORTED_ABIS" ]
  }, {
    "name" : "MANUFACTURER",
    "type" : "String",
    "comment" : " The manufacturer of the product/hardware. ",
    "links" : [ ]
  }, {
    "name" : "MANUFACTURER_FOR_ATTESTATION",
    "type" : "String",
    "comment" : "\n     * The manufacturer name for attestation. In non-default builds (like the AOSP build) the value\n     * of the 'MANUFACTURER' system property may be different to the one provisioned to KeyMint,\n     * and Keymint attestation would still attest to the manufacturer which was provisioned.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BRAND",
    "type" : "String",
    "comment" : " The consumer-visible brand with which the product/hardware will be associated, if any. ",
    "links" : [ ]
  }, {
    "name" : "BRAND_FOR_ATTESTATION",
    "type" : "String",
    "comment" : "\n     * The product brand for attestation. In non-default builds (like the AOSP build) the value of\n     * the 'BRAND' system property may be different to the one provisioned to KeyMint,\n     * and Keymint attestation would still attest to the product brand which was provisioned.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "MODEL",
    "type" : "String",
    "comment" : " The end-user-visible name for the end product. ",
    "links" : [ ]
  }, {
    "name" : "MODEL_FOR_ATTESTATION",
    "type" : "String",
    "comment" : "\n     * The product model for attestation. In non-default builds (like the AOSP build) the value of\n     * the 'MODEL' system property may be different to the one provisioned to KeyMint,\n     * and Keymint attestation would still attest to the product model which was provisioned.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SOC_MANUFACTURER",
    "type" : "String",
    "comment" : " The manufacturer of the device's primary system-on-chip. ",
    "links" : [ ]
  }, {
    "name" : "SOC_MODEL",
    "type" : "String",
    "comment" : " The model name of the device's primary system-on-chip. ",
    "links" : [ ]
  }, {
    "name" : "BOOTLOADER",
    "type" : "String",
    "comment" : " The system bootloader version number. ",
    "links" : [ ]
  }, {
    "name" : "RADIO",
    "type" : "String",
    "comment" : "\n     * The radio firmware version number.\n     *\n     * @deprecated The radio firmware version is frequently not\n     * available when this class is initialized, leading to a blank or\n     * \"unknown\" value for this string.  Use\n     * {@link #getRadioVersion} instead.\n     ",
    "links" : [ "#getRadioVersion" ]
  }, {
    "name" : "HARDWARE",
    "type" : "String",
    "comment" : " The name of the hardware (from the kernel command line or /proc). ",
    "links" : [ ]
  }, {
    "name" : "SKU",
    "type" : "String",
    "comment" : "\n     * The SKU of the hardware (from the kernel command line).\n     *\n     * <p>The SKU is reported by the bootloader to configure system software features.\n     * If no value is supplied by the bootloader, this is reported as {@link #UNKNOWN}.\n\n     ",
    "links" : [ "#UNKNOWN" ]
  }, {
    "name" : "ODM_SKU",
    "type" : "String",
    "comment" : "\n     * The SKU of the device as set by the original design manufacturer (ODM).\n     *\n     * <p>This is a runtime-initialized property set during startup to configure device\n     * services. If no value is set, this is reported as {@link #UNKNOWN}.\n     *\n     * <p>The ODM SKU may have multiple variants for the same system SKU in case a manufacturer\n     * produces variants of the same design. For example, the same build may be released with\n     * variations in physical keyboard and/or display hardware, each with a different ODM SKU.\n     ",
    "links" : [ "#UNKNOWN" ]
  }, {
    "name" : "IS_EMULATOR",
    "type" : "boolean",
    "comment" : "\n     * Whether this build was for an emulator device.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SERIAL",
    "type" : "String",
    "comment" : "\n     * A hardware serial number, if available. Alphanumeric only, case-insensitive.\n     * This field is always set to {@link Build#UNKNOWN}.\n     *\n     * @deprecated Use {@link #getSerial()} instead.\n     *",
    "links" : [ "#getSerial()", "android.os.Build#UNKNOWN" ]
  }, {
    "name" : "SUPPORTED_ABIS",
    "type" : "String[]",
    "comment" : "\n     * An ordered list of ABIs supported by this device. The most preferred ABI is the first\n     * element in the list.\n     *\n     * See {@link #SUPPORTED_32_BIT_ABIS} and {@link #SUPPORTED_64_BIT_ABIS}.\n     ",
    "links" : [ "#SUPPORTED_32_BIT_ABIS", "#SUPPORTED_64_BIT_ABIS" ]
  }, {
    "name" : "SUPPORTED_32_BIT_ABIS",
    "type" : "String[]",
    "comment" : "\n     * An ordered list of <b>32 bit</b> ABIs supported by this device. The most preferred ABI\n     * is the first element in the list.\n     *\n     * See {@link #SUPPORTED_ABIS} and {@link #SUPPORTED_64_BIT_ABIS}.\n     ",
    "links" : [ "#SUPPORTED_ABIS", "#SUPPORTED_64_BIT_ABIS" ]
  }, {
    "name" : "SUPPORTED_64_BIT_ABIS",
    "type" : "String[]",
    "comment" : "\n     * An ordered list of <b>64 bit</b> ABIs supported by this device. The most preferred ABI\n     * is the first element in the list.\n     *\n     * See {@link #SUPPORTED_ABIS} and {@link #SUPPORTED_32_BIT_ABIS}.\n     ",
    "links" : [ "#SUPPORTED_32_BIT_ABIS", "#SUPPORTED_ABIS" ]
  }, {
    "name" : "TYPE",
    "type" : "String",
    "comment" : " The type of build, like \"user\" or \"eng\". ",
    "links" : [ ]
  }, {
    "name" : "TAGS",
    "type" : "String",
    "comment" : " Comma-separated tags describing the build, like \"unsigned,debug\". ",
    "links" : [ ]
  }, {
    "name" : "FINGERPRINT",
    "type" : "String",
    "comment" : " A string that uniquely identifies this build.  Do not attempt to parse this value. ",
    "links" : [ ]
  }, {
    "name" : "HW_TIMEOUT_MULTIPLIER",
    "type" : "int",
    "comment" : "\n     * A multiplier for various timeouts on the system.\n     *\n     * The intent is that products targeting software emulators that are orders of magnitude slower\n     * than real hardware may set this to a large number. On real devices and hardware-accelerated\n     * virtualized devices this should not be set.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "IS_TREBLE_ENABLED",
    "type" : "boolean",
    "comment" : "\n     * True if Treble is enabled and required for this device.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "TIME",
    "type" : "long",
    "comment" : " The time at which the build was produced, given in milliseconds since the UNIX epoch. ",
    "links" : [ ]
  }, {
    "name" : "USER",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HOST",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IS_DEBUGGABLE",
    "type" : "boolean",
    "comment" : "\n     * Returns true if the device is running a debuggable build such as \"userdebug\" or \"eng\".\n     *\n     * Debuggable builds allow users to gain root access via local shell, attach debuggers to any\n     * application regardless of whether they have the \"debuggable\" attribute set, or downgrade\n     * selinux into \"permissive\" mode in particular.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "IS_ENG",
    "type" : "boolean",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "IS_USERDEBUG",
    "type" : "boolean",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "IS_USER",
    "type" : "boolean",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "IS_ARC",
    "type" : "boolean",
    "comment" : "\n     * Whether this build is running on ARC, the Android Runtime for Chrome\n     * (https://chromium.googlesource.com/chromiumos/docs/+/master/containers_and_vms.md).\n     * Prior to R this was implemented as a container but from R this will be\n     * a VM. The name of the property remains ro.boot.conntainer as it is\n     * referenced in other projects.\n     *\n     * We should try to avoid checking this flag if possible to minimize\n     * unnecessarily diverging from non-container Android behavior.\n     * Checking this flag is acceptable when low-level resources being\n     * different, e.g. the availability of certain capabilities, access to\n     * system resources being restricted, and the fact that the host OS might\n     * handle some features for us.\n     * For higher-level behavior differences, other checks should be preferred.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PERMISSIONS_REVIEW_REQUIRED",
    "type" : "boolean",
    "comment" : "\n     * Specifies whether the permissions needed by a legacy app should be\n     * reviewed before any of its components can run. A legacy app is one\n     * with targetSdkVersion < 23, i.e apps using the old permission model.\n     * If review is not required, permissions are reviewed before the app\n     * is installed.\n     *\n     * @hide\n     * @removed\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static String getSerial()",
    "returnType" : "String",
    "comment" : "\n     * Gets the hardware serial number, if available.\n     *\n     * <p class=\"note\"><b>Note:</b> Root access may allow you to modify device identifiers, such as\n     * the hardware serial number. If you change these identifiers, you can not use\n     * <a href=\"/training/articles/security-key-attestation.html\">key attestation</a> to obtain\n     * proof of the device's original identifiers. KeyMint will reject an ID attestation request\n     * if the identifiers provided by the frameworks do not match the identifiers it was\n     * provisioned with.\n     *\n     * <p>Starting with API level 29, persistent device identifiers are guarded behind additional\n     * restrictions, and apps are recommended to use resettable identifiers (see <a\n     * href=\"/training/articles/user-data-ids\">Best practices for unique identifiers</a>). This\n     * method can be invoked if one of the following requirements is met:\n     * <ul>\n     *     <li>If the calling app has been granted the READ_PRIVILEGED_PHONE_STATE permission; this\n     *     is a privileged permission that can only be granted to apps preloaded on the device.\n     *     <li>If the calling app has carrier privileges (see {@link\n     *     android.telephony.TelephonyManager#hasCarrierPrivileges}) on any active subscription.\n     *     <li>If the calling app is the default SMS role holder (see {@link\n     *     android.app.role.RoleManager#isRoleHeld(String)}).\n     *     <li>If the calling app is the device owner of a fully-managed device, a profile\n     *     owner of an organization-owned device, or their delegates (see {@link\n     *     android.app.admin.DevicePolicyManager#getEnrollmentSpecificId()}).\n     * </ul>\n     *\n     * <p>If the calling app does not meet one of these requirements then this method will behave\n     * as follows:\n     *\n     * <ul>\n     *     <li>If the calling app's target SDK is API level 28 or lower and the app has the\n     *     READ_PHONE_STATE permission then {@link Build#UNKNOWN} is returned.</li>\n     *     <li>If the calling app's target SDK is API level 28 or lower and the app does not have\n     *     the READ_PHONE_STATE permission, or if the calling app is targeting API level 29 or\n     *     higher, then a SecurityException is thrown.</li>\n     * </ul>\n     *\n     * @return The serial number if specified.\n     ",
    "links" : [ "android.app.admin.DevicePolicyManager#getEnrollmentSpecificId()", "android.os.Build#UNKNOWN", "android.telephony.TelephonyManager#hasCarrierPrivileges", "android.app.role.RoleManager#isRoleHeld(String)" ]
  }, {
    "name" : "public static boolean is64BitAbi(String abi)",
    "returnType" : "boolean",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "private static String deriveFingerprint()",
    "returnType" : "String",
    "comment" : "\n     * Some devices split the fingerprint components between multiple\n     * partitions, so we might derive the fingerprint at runtime.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void ensureFingerprintProperty()",
    "returnType" : "void",
    "comment" : "\n     * Ensure that raw fingerprint system property is defined. If it was derived\n     * dynamically by {@link #deriveFingerprint()} this is where we push the\n     * derived value into the property service.\n     *\n     * @hide\n     ",
    "links" : [ "#deriveFingerprint()" ]
  }, {
    "name" : "public static boolean isBuildConsistent()",
    "returnType" : "boolean",
    "comment" : "\n     * Verifies the current flash of the device is consistent with what\n     * was expected at build time.\n     *\n     * Treble devices will verify the Vendor Interface (VINTF). A device\n     * launched without Treble:\n     *\n     * 1) Checks that device fingerprint is defined and that it matches across\n     *    various partitions.\n     * 2) Verifies radio and bootloader partitions are those expected in the build.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static List<Partition> getFingerprintedPartitions()",
    "returnType" : "List<Partition>",
    "comment" : "\n     * Get build information about partitions that have a separate fingerprint defined.\n     *\n     * The list includes partitions that are suitable candidates for over-the-air updates. This is\n     * not an exhaustive list of partitions on the device.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isDebuggable()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the device is running a debuggable build such as \"userdebug\" or \"eng\".\n     *\n     * Debuggable builds allow users to gain root access via local shell, attach debuggers to any\n     * application regardless of whether they have the \"debuggable\" attribute set, or downgrade\n     * selinux into \"permissive\" mode in particular.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getRadioVersion()",
    "returnType" : "String",
    "comment" : "\n     * Returns the version string for the radio firmware.  May return\n     * null (if, for instance, the radio is not currently on).\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String getString(String property)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String getVendorDeviceIdProperty(String property)",
    "returnType" : "String",
    "comment" : "\n     * Return attestation specific proerties.\n     * @param property model, name, brand, device or manufacturer.\n     * @return property value or UNKNOWN\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String[] getStringList(String property, String separator)",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static long getLong(String property)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String joinListOrElse(List<T> list, String defaultValue)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static String getSerial()", "public static boolean is64BitAbi(String abi)", "private static String deriveFingerprint()", "public static void ensureFingerprintProperty()", "public static boolean isBuildConsistent()", "public static List<Partition> getFingerprintedPartitions()", "public static boolean isDebuggable()", "public static String getRadioVersion()", "private static String getString(String property)", "private static String getVendorDeviceIdProperty(String property)", "private static String[] getStringList(String property, String separator)", "private static long getLong(String property)", "private static String joinListOrElse(List<T> list, String defaultValue)" ],
  "variableNames" : [ "TAG", "UNKNOWN", "ID", "DISPLAY", "PRODUCT", "PRODUCT_FOR_ATTESTATION", "DEVICE", "DEVICE_FOR_ATTESTATION", "BOARD", "CPU_ABI", "CPU_ABI2", "MANUFACTURER", "MANUFACTURER_FOR_ATTESTATION", "BRAND", "BRAND_FOR_ATTESTATION", "MODEL", "MODEL_FOR_ATTESTATION", "SOC_MANUFACTURER", "SOC_MODEL", "BOOTLOADER", "RADIO", "HARDWARE", "SKU", "ODM_SKU", "IS_EMULATOR", "SERIAL", "SUPPORTED_ABIS", "SUPPORTED_32_BIT_ABIS", "SUPPORTED_64_BIT_ABIS", "TYPE", "TAGS", "FINGERPRINT", "HW_TIMEOUT_MULTIPLIER", "IS_TREBLE_ENABLED", "TIME", "USER", "HOST", "IS_DEBUGGABLE", "IS_ENG", "IS_USERDEBUG", "IS_USER", "IS_ARC", "PERMISSIONS_REVIEW_REQUIRED" ]
}