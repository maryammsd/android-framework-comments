{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/ICUResourceBundle.java",
  "packageName" : "android.icu.impl",
  "className" : "ICUResourceBundle",
  "comment" : "\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "NO_INHERITANCE_MARKER",
    "type" : "String",
    "comment" : "\n     * CLDR string value \"∅∅∅\" prevents fallback to the parent bundle.\n     ",
    "links" : [ ]
  }, {
    "name" : "ICU_DATA_CLASS_LOADER",
    "type" : "ClassLoader",
    "comment" : "\n     * The class loader constant to be used with getBundleInstance API\n     ",
    "links" : [ ]
  }, {
    "name" : "INSTALLED_LOCALES",
    "type" : "String",
    "comment" : "\n     * The name of the resource containing the installed locales\n     ",
    "links" : [ ]
  }, {
    "name" : "wholeBundle",
    "type" : "WholeBundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "container",
    "type" : "ICUResourceBundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BUNDLE_CACHE",
    "type" : "CacheBase<String, ICUResourceBundle, Loader>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ICU_RESOURCE_INDEX",
    "type" : "String",
    "comment" : " ========== privates ==========",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FULL_LOCALE_NAMES_LIST",
    "type" : "String",
    "comment" : " (canonical, alias and root)",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : " Flag for enabling/disabling debugging code",
    "links" : [ ]
  }, {
    "name" : "GET_AVAILABLE_CACHE",
    "type" : "CacheBase<String, AvailEntry, ClassLoader>",
    "comment" : "\n     * Cache used for AvailableEntry\n     ",
    "links" : [ ]
  }, {
    "name" : "COMPARE_FIRST_ELEMENT",
    "type" : "Comparator<String[]>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "key",
    "type" : "String",
    "comment" : " Data member where the subclasses store the key. ",
    "links" : [ ]
  }, {
    "name" : "RES_BOGUS",
    "type" : "int",
    "comment" : "\n     * A resource word value that means \"no resource\".\n     * Note: 0xffffffff == -1\n     * This has the same value as UResourceBundle.NONE, but they are semantically\n     * different and should be used appropriately according to context:\n     * NONE means \"no type\".\n     * (The type of RES_BOGUS is RES_RESERVED=15 which was defined in ICU4C ures.h.)\n     ",
    "links" : [ ]
  }, {
    "name" : "ALIAS",
    "type" : "int",
    "comment" : "\n     * Resource type constant for aliases;\n     * internally stores a string which identifies the actual resource\n     * storing the data (can be in a different resource bundle).\n     * Resolved internally before delivering the actual resource through the API.\n     ",
    "links" : [ ]
  }, {
    "name" : "TABLE32",
    "type" : "int",
    "comment" : " Resource type constant for tables with 32-bit count, key offsets and values. ",
    "links" : [ ]
  }, {
    "name" : "TABLE16",
    "type" : "int",
    "comment" : "\n     * Resource type constant for tables with 16-bit count, key offsets and values.\n     * All values are STRING_V2 strings.\n     ",
    "links" : [ ]
  }, {
    "name" : "STRING_V2",
    "type" : "int",
    "comment" : " Resource type constant for 16-bit Unicode strings in formatVersion 2. ",
    "links" : [ ]
  }, {
    "name" : "ARRAY16",
    "type" : "int",
    "comment" : "\n     * Resource type constant for arrays with 16-bit count and values.\n     * All values are STRING_V2 strings.\n     ",
    "links" : [ ]
  }, {
    "name" : "RES_PATH_SEP_CHAR",
    "type" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RES_PATH_SEP_STR",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ICUDATA",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HYPHEN",
    "type" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOCALE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static final ULocale getFunctionalEquivalent(String baseName, ClassLoader loader, String resName, String keyword, ULocale locID, boolean[] isAvailable, boolean omitDefault)",
    "returnType" : "ULocale",
    "comment" : "\n     * Returns a functionally equivalent locale, considering keywords as well, for the specified keyword.\n     * @param baseName resource specifier\n     * @param resName top level resource to consider (such as \"collations\")\n     * @param keyword a particular keyword to consider (such as \"collation\" )\n     * @param locID The requested locale\n     * @param isAvailable If non-null, 1-element array of fillin parameter that indicates whether the\n     * requested locale was available. The locale is defined as 'available' if it physically\n     * exists within the specified tree and included in 'InstalledLocales'.\n     * @param omitDefault  if true, omit keyword and value if default.\n     * 'de_DE\\@collation=standard' -> 'de_DE'\n     * @return the locale\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final String[] getKeywordValues(String baseName, String keyword)",
    "returnType" : "String[]",
    "comment" : "\n     * Given a tree path and keyword, return a string enumeration of all possible values for that keyword.\n     * @param baseName resource specifier\n     * @param keyword a particular keyword to consider, must match a top level resource name\n     * within the tree. (i.e. \"collations\")\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public ICUResourceBundle getWithFallback(String path) throws MissingResourceException",
    "returnType" : "ICUResourceBundle",
    "comment" : "\n     * This method performs multilevel fallback for fetching items from the\n     * bundle e.g: If resource is in the form de__PHONEBOOK{ collations{\n     * default{ \"phonebook\"} } } If the value of \"default\" key needs to be\n     * accessed, then do: <code>\n     *  UResourceBundle bundle = UResourceBundle.getBundleInstance(\"de__PHONEBOOK\");\n     *  ICUResourceBundle result = null;\n     *  if(bundle instanceof ICUResourceBundle){\n     *      result = ((ICUResourceBundle) bundle).getWithFallback(\"collations/default\");\n     *  }\n     * </code>\n     *\n     * @param path The path to the required resource key\n     * @return resource represented by the key\n     * @exception MissingResourceException If a resource was not found.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ICUResourceBundle at(int index)",
    "returnType" : "ICUResourceBundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ICUResourceBundle at(String key)",
    "returnType" : "ICUResourceBundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ICUResourceBundle findTopLevel(int index)",
    "returnType" : "ICUResourceBundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ICUResourceBundle findTopLevel(String aKey)",
    "returnType" : "ICUResourceBundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ICUResourceBundle findWithFallback(String path)",
    "returnType" : "ICUResourceBundle",
    "comment" : "\n     * Like getWithFallback, but returns null if the resource is not found instead of\n     * throwing an exception.\n     * @param path the path to the resource\n     * @return the resource, or null\n     ",
    "links" : [ ]
  }, {
    "name" : "public String findStringWithFallback(String path)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getStringWithFallback(String path) throws MissingResourceException",
    "returnType" : "String",
    "comment" : " will throw type mismatch exception if the resource is not a string",
    "links" : [ ]
  }, {
    "name" : "public UResource.Value getValueWithFallback(String path) throws MissingResourceException",
    "returnType" : "UResource.Value",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void getAllItemsWithFallbackNoFail(String path, UResource.Sink sink)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void getAllItemsWithFallback(String path, UResource.Sink sink) throws MissingResourceException",
    "returnType" : "void",
    "comment" : "\n     * Locates the resource specified by {@code path} in this resource bundle (performing any necessary fallback\n     * and following any aliases) and calls the specified {@code sink}'s {@code put()} method with that resource.\n     * Then walks the bundle's parent chain, calling {@code put()} on the sink for each item in the parent chain.\n     * @param path The path of the desired resource\n     * @param sink A {@code UResource.Sink} that gets called for each resource in the parent chain\n     ",
    "links" : [ ]
  }, {
    "name" : "public void getAllChildrenWithFallback(final String path, final UResource.Sink sink) throws MissingResourceException",
    "returnType" : "void",
    "comment" : "\n     * Locates the resource specified by {@code path} in this resource bundle (performing any necessary fallback and\n     * following any aliases) and, if the resource is a table resource, iterates over its immediate child resources (again,\n     * following any aliases to get the individual resource values), and calls the specified {@code sink}'s {@code put()}\n     * method for each child resource (passing it that resource's key and either its actual value or, if that value is an\n     * alias, the value you get by following the alias).  Then walks back over the bundle's parent chain,\n     * similarly iterating over each parent table resource's child resources.\n     * Does not descend beyond one level of table children.\n     * @param path The path of the desired resource\n     * @param sink A {@code UResource.Sink} that gets called for each child resource of the specified resource (and each\n     * child of the resources in its parent chain).\n     ",
    "links" : [ ]
  }, {
    "name" : "private void getAllItemsWithFallback(UResource.Key key, ReaderValue readerValue, UResource.Sink sink, UResourceBundle requested)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static Set<String> getAvailableLocaleNameSet(String bundlePrefix, ClassLoader loader)",
    "returnType" : "Set<String>",
    "comment" : "\n     * Return a set of the locale names supported by a collection of resource\n     * bundles.\n     *\n     * @param bundlePrefix the prefix of the resource bundles to use.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Set<String> getFullLocaleNameSet()",
    "returnType" : "Set<String>",
    "comment" : "\n     * Return a set of all the locale names supported by a collection of\n     * resource bundles.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Set<String> getFullLocaleNameSet(String bundlePrefix, ClassLoader loader)",
    "returnType" : "Set<String>",
    "comment" : "\n     * Return a set of all the locale names supported by a collection of\n     * resource bundles.\n     *\n     * @param bundlePrefix the prefix of the resource bundles to use.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Set<String> getAvailableLocaleNameSet()",
    "returnType" : "Set<String>",
    "comment" : "\n     * Return a set of the locale names supported by a collection of resource\n     * bundles.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final ULocale[] getAvailableULocales(String baseName, ClassLoader loader, ULocale.AvailableType type)",
    "returnType" : "ULocale[]",
    "comment" : "\n     * Get the set of Locales installed in the specified bundles, for the specified type.\n     * @return the list of available locales\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final ULocale[] getAvailableULocales()",
    "returnType" : "ULocale[]",
    "comment" : "\n     * Get the set of ULocales installed the base bundle.\n     * @return the list of available locales\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final ULocale[] getAvailableULocales(ULocale.AvailableType type)",
    "returnType" : "ULocale[]",
    "comment" : "\n     * Get the set of ULocales installed the base bundle, for the specified type.\n     * @return the list of available locales for the specified type\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final ULocale[] getAvailableULocales(String baseName, ClassLoader loader)",
    "returnType" : "ULocale[]",
    "comment" : "\n     * Get the set of Locales installed in the specified bundles.\n     * @return the list of available locales\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final Locale[] getAvailableLocales(String baseName, ClassLoader loader, ULocale.AvailableType type)",
    "returnType" : "Locale[]",
    "comment" : "\n     * Get the set of Locales installed in the specified bundles, for the specified type.\n     * @return the list of available locales\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final Locale[] getAvailableLocales()",
    "returnType" : "Locale[]",
    "comment" : "\n     * Get the set of ULocales installed the base bundle.\n     * @return the list of available locales\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final Locale[] getAvailableLocales(ULocale.AvailableType type)",
    "returnType" : "Locale[]",
    "comment" : "\n     * Get the set of Locales installed the base bundle, for the specified type.\n     * @return the list of available locales\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final Locale[] getAvailableLocales(String baseName, ClassLoader loader)",
    "returnType" : "Locale[]",
    "comment" : "\n     * Get the set of Locales installed in the specified bundles.\n     * @return the list of available locales\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final Locale[] getLocaleList(ULocale[] ulocales)",
    "returnType" : "Locale[]",
    "comment" : "\n     * Convert a list of ULocales to a list of Locales.  ULocales with a script code will not be converted\n     * since they cannot be represented as a Locale.  This means that the two lists will <b>not</b> match\n     * one-to-one, and that the returned list might be shorter than the input list.\n     * @param ulocales a list of ULocales to convert to a list of Locales.\n     * @return the list of converted ULocales\n     ",
    "links" : [ ]
  }, {
    "name" : "public Locale getLocale()",
    "returnType" : "Locale",
    "comment" : "\n     * Returns the locale of this resource bundle. This method can be used after\n     * a call to getBundle() to determine whether the resource bundle returned\n     * really corresponds to the requested locale or is a fallback.\n     *\n     * @return the locale of this resource bundle\n     ",
    "links" : [ ]
  }, {
    "name" : "private static final EnumMap<ULocale.AvailableType, ULocale[]> createULocaleList(String baseName, ClassLoader root)",
    "returnType" : "EnumMap<ULocale.AvailableType, ULocale[]>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static final void addLocaleIDsFromIndexBundle(String baseName, ClassLoader root, Set<String> locales)",
    "returnType" : "void",
    "comment" : " and returns the data in a different form.",
    "links" : [ ]
  }, {
    "name" : "private static final void addBundleBaseNamesFromClassLoader(final String bn, final ClassLoader root, final Set<String> names)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void addLocaleIDsFromListFile(String bn, ClassLoader root, Set<String> locales)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Set<String> createFullLocaleNameSet(String baseName, ClassLoader loader)",
    "returnType" : "Set<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Set<String> createLocaleNameSet(String baseName, ClassLoader loader)",
    "returnType" : "Set<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static AvailEntry getAvailEntry(String key, ClassLoader loader)",
    "returnType" : "AvailEntry",
    "comment" : "\n     * Stores the locale information in a cache accessed by key (bundle prefix).\n     * The cached objects are AvailEntries. The cache is implemented by SoftCache\n     * so it can be GC'd.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static final ICUResourceBundle findResourceWithFallback(String path, UResourceBundle actualBundle, UResourceBundle requested)",
    "returnType" : "ICUResourceBundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static final ICUResourceBundle findResourceWithFallback(String[] keys, int depth, ICUResourceBundle base, UResourceBundle requested)",
    "returnType" : "ICUResourceBundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static final String findStringWithFallback(String path, UResourceBundle actualBundle, UResourceBundle requested)",
    "returnType" : "String",
    "comment" : "\n     * Like findResourceWithFallback(...).getString() but with minimal creation of intermediate\n     * ICUResourceBundle objects.\n     ",
    "links" : [ ]
  }, {
    "name" : "private int getResDepth()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void getResPathKeys(String[] keys, int depth)",
    "returnType" : "void",
    "comment" : "\n     * Fills some of the keys array with the keys on the path to this resource object.\n     * Writes the top-level key into index 0 and increments from there.\n     *\n     * @param keys\n     * @param depth must be {@link #getResDepth()}\n     ",
    "links" : [ "#getResDepth()" ]
  }, {
    "name" : "private static int countPathKeys(String path)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void getResPathKeys(String path, int num, String[] keys, int start)",
    "returnType" : "void",
    "comment" : "\n     * Fills some of the keys array (from start) with the num keys from the path string.\n     *\n     * @param path path string\n     * @param num must be {@link #countPathKeys(String)}\n     * @param keys\n     * @param start index where the first path key is stored\n     ",
    "links" : [ "#countPathKeys(String)" ]
  }, {
    "name" : "public boolean equals(Object other)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static ICUResourceBundle getBundleInstance(String baseName, String localeID, ClassLoader root, boolean disableFallback)",
    "returnType" : "ICUResourceBundle",
    "comment" : " This method is for super class's instantiateBundle method",
    "links" : [ ]
  }, {
    "name" : "public static ICUResourceBundle getBundleInstance(String baseName, ULocale locale, OpenType openType)",
    "returnType" : "ICUResourceBundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static ICUResourceBundle getBundleInstance(String baseName, String localeID, ClassLoader root, OpenType openType)",
    "returnType" : "ICUResourceBundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean localeIDStartsWithLangSubtag(String localeID, String lang)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String getExplicitParent(String localeID)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String getDefaultScript(String language, String region)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String getParentLocaleID(String name, String origName, OpenType openType)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static ICUResourceBundle instantiateBundle(final String baseName, final String localeID, final String origLocaleID, final String defaultID, final ClassLoader root, final OpenType openType)",
    "returnType" : "ICUResourceBundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " ICUResourceBundle get(String aKey, HashMap<String, String> aliasesVisited, UResourceBundle requested)",
    "returnType" : "ICUResourceBundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static ICUResourceBundle createBundle(String baseName, String localeID, ClassLoader root)",
    "returnType" : "ICUResourceBundle",
    "comment" : "\n    * Create a bundle using a reader.\n    * @param baseName The name for the bundle.\n    * @param localeID The locale identification.\n    * @param root The ClassLoader object root.\n    * @return the new bundle\n    ",
    "links" : [ ]
  }, {
    "name" : "protected String getLocaleID()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected String getBaseName()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ULocale getULocale()",
    "returnType" : "ULocale",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isRoot()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this is the root bundle, or an item in the root bundle.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ICUResourceBundle getParent()",
    "returnType" : "ICUResourceBundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void setParent(ResourceBundle parent)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getKey()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean getNoFallback()",
    "returnType" : "boolean",
    "comment" : "\n     * Get the noFallback flag specified in the loaded bundle.\n     * @return The noFallback flag.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static ICUResourceBundle getBundle(ICUResourceBundleReader reader, String baseName, String localeID, ClassLoader loader)",
    "returnType" : "ICUResourceBundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected static ICUResourceBundle getAliasedResource(ICUResourceBundle base, String[] keys, int depth, String key, int _resource, HashMap<String, String> aliasesVisited, UResourceBundle requested)",
    "returnType" : "ICUResourceBundle",
    "comment" : "\n     * Returns the resource object referred to from the alias _resource int's path string.\n     * Throws MissingResourceException if not found.\n     *\n     * If the alias path does not contain a key path:\n     * If keys != null then keys[:depth] is used.\n     * Otherwise the base key path plus the key parameter is used.\n     *\n     * @param base A direct or indirect container of the alias.\n     * @param keys The key path to the alias, or null. (const)\n     * @param depth The length of the key path, if keys != null.\n     * @param key The alias' own key within this current container, if keys == null.\n     * @param _resource The alias resource int.\n     * @param aliasesVisited Set of alias path strings already visited, for detecting loops.\n     *        We cannot change the type (e.g., to Set<String>) because it is used\n     *        in protected/@stable UResourceBundle methods.\n     * @param requested The original resource object from which the lookup started,\n     *        which is the starting point for \"/LOCALE/...\" aliases.\n     * @return the aliased resource object\n     ",
    "links" : [ ]
  }, {
    "name" : "protected static ICUResourceBundle getAliasedResource(String rpath, ClassLoader loaderToUse, String baseName, String[] keys, int depth, String[] baseKeyPath, HashMap<String, String> aliasesVisited, UResourceBundle requested)",
    "returnType" : "ICUResourceBundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final Set<String> getTopLevelKeySet()",
    "returnType" : "Set<String>",
    "comment" : "\n     * @deprecated This API is ICU internal only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void setTopLevelKeySet(Set<String> keySet)",
    "returnType" : "void",
    "comment" : "\n     * @deprecated This API is ICU internal only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "protected Enumeration<String> handleGetKeys()",
    "returnType" : "Enumeration<String>",
    "comment" : " Consider deprecating UResourceBundle.handleGetKeys(), and consider making it always return null.",
    "links" : [ ]
  }, {
    "name" : "protected boolean isTopLevelResource()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static final ULocale getFunctionalEquivalent(String baseName, ClassLoader loader, String resName, String keyword, ULocale locID, boolean[] isAvailable, boolean omitDefault)", "public static final String[] getKeywordValues(String baseName, String keyword)", "public ICUResourceBundle getWithFallback(String path) throws MissingResourceException", "public ICUResourceBundle at(int index)", "public ICUResourceBundle at(String key)", "public ICUResourceBundle findTopLevel(int index)", "public ICUResourceBundle findTopLevel(String aKey)", "public ICUResourceBundle findWithFallback(String path)", "public String findStringWithFallback(String path)", "public String getStringWithFallback(String path) throws MissingResourceException", "public UResource.Value getValueWithFallback(String path) throws MissingResourceException", "public void getAllItemsWithFallbackNoFail(String path, UResource.Sink sink)", "public void getAllItemsWithFallback(String path, UResource.Sink sink) throws MissingResourceException", "public void getAllChildrenWithFallback(final String path, final UResource.Sink sink) throws MissingResourceException", "private void getAllItemsWithFallback(UResource.Key key, ReaderValue readerValue, UResource.Sink sink, UResourceBundle requested)", "public static Set<String> getAvailableLocaleNameSet(String bundlePrefix, ClassLoader loader)", "public static Set<String> getFullLocaleNameSet()", "public static Set<String> getFullLocaleNameSet(String bundlePrefix, ClassLoader loader)", "public static Set<String> getAvailableLocaleNameSet()", "public static final ULocale[] getAvailableULocales(String baseName, ClassLoader loader, ULocale.AvailableType type)", "public static final ULocale[] getAvailableULocales()", "public static final ULocale[] getAvailableULocales(ULocale.AvailableType type)", "public static final ULocale[] getAvailableULocales(String baseName, ClassLoader loader)", "public static final Locale[] getAvailableLocales(String baseName, ClassLoader loader, ULocale.AvailableType type)", "public static final Locale[] getAvailableLocales()", "public static final Locale[] getAvailableLocales(ULocale.AvailableType type)", "public static final Locale[] getAvailableLocales(String baseName, ClassLoader loader)", "public static final Locale[] getLocaleList(ULocale[] ulocales)", "public Locale getLocale()", "private static final EnumMap<ULocale.AvailableType, ULocale[]> createULocaleList(String baseName, ClassLoader root)", "private static final void addLocaleIDsFromIndexBundle(String baseName, ClassLoader root, Set<String> locales)", "private static final void addBundleBaseNamesFromClassLoader(final String bn, final ClassLoader root, final Set<String> names)", "private static void addLocaleIDsFromListFile(String bn, ClassLoader root, Set<String> locales)", "private static Set<String> createFullLocaleNameSet(String baseName, ClassLoader loader)", "private static Set<String> createLocaleNameSet(String baseName, ClassLoader loader)", "private static AvailEntry getAvailEntry(String key, ClassLoader loader)", "private static final ICUResourceBundle findResourceWithFallback(String path, UResourceBundle actualBundle, UResourceBundle requested)", "private static final ICUResourceBundle findResourceWithFallback(String[] keys, int depth, ICUResourceBundle base, UResourceBundle requested)", "private static final String findStringWithFallback(String path, UResourceBundle actualBundle, UResourceBundle requested)", "private int getResDepth()", "private void getResPathKeys(String[] keys, int depth)", "private static int countPathKeys(String path)", "private static void getResPathKeys(String path, int num, String[] keys, int start)", "public boolean equals(Object other)", "public int hashCode()", "public static ICUResourceBundle getBundleInstance(String baseName, String localeID, ClassLoader root, boolean disableFallback)", "public static ICUResourceBundle getBundleInstance(String baseName, ULocale locale, OpenType openType)", "public static ICUResourceBundle getBundleInstance(String baseName, String localeID, ClassLoader root, OpenType openType)", "private static boolean localeIDStartsWithLangSubtag(String localeID, String lang)", "private static String getExplicitParent(String localeID)", "private static String getDefaultScript(String language, String region)", "public static String getParentLocaleID(String name, String origName, OpenType openType)", "private static ICUResourceBundle instantiateBundle(final String baseName, final String localeID, final String origLocaleID, final String defaultID, final ClassLoader root, final OpenType openType)", " ICUResourceBundle get(String aKey, HashMap<String, String> aliasesVisited, UResourceBundle requested)", "public static ICUResourceBundle createBundle(String baseName, String localeID, ClassLoader root)", "protected String getLocaleID()", "protected String getBaseName()", "public ULocale getULocale()", "public boolean isRoot()", "public ICUResourceBundle getParent()", "protected void setParent(ResourceBundle parent)", "public String getKey()", "private boolean getNoFallback()", "private static ICUResourceBundle getBundle(ICUResourceBundleReader reader, String baseName, String localeID, ClassLoader loader)", "protected static ICUResourceBundle getAliasedResource(ICUResourceBundle base, String[] keys, int depth, String key, int _resource, HashMap<String, String> aliasesVisited, UResourceBundle requested)", "protected static ICUResourceBundle getAliasedResource(String rpath, ClassLoader loaderToUse, String baseName, String[] keys, int depth, String[] baseKeyPath, HashMap<String, String> aliasesVisited, UResourceBundle requested)", "public final Set<String> getTopLevelKeySet()", "public final void setTopLevelKeySet(Set<String> keySet)", "protected Enumeration<String> handleGetKeys()", "protected boolean isTopLevelResource()" ],
  "variableNames" : [ "NO_INHERITANCE_MARKER", "ICU_DATA_CLASS_LOADER", "INSTALLED_LOCALES", "wholeBundle", "container", "BUNDLE_CACHE", "ICU_RESOURCE_INDEX", "DEFAULT_TAG", "FULL_LOCALE_NAMES_LIST", "DEBUG", "GET_AVAILABLE_CACHE", "COMPARE_FIRST_ELEMENT", "key", "RES_BOGUS", "ALIAS", "TABLE32", "TABLE16", "STRING_V2", "ARRAY16", "RES_PATH_SEP_CHAR", "RES_PATH_SEP_STR", "ICUDATA", "HYPHEN", "LOCALE" ]
}