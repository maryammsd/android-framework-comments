{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/concurrent/ScheduledExecutorService.java",
  "packageName" : "java.util.concurrent",
  "className" : "ScheduledExecutorService",
  "comment" : "\n * An {@link ExecutorService} that can schedule commands to run after a given\n * delay, or to execute periodically.\n *\n * <p>The {@code schedule} methods create tasks with various delays\n * and return a task object that can be used to cancel or check\n * execution. The {@code scheduleAtFixedRate} and\n * {@code scheduleWithFixedDelay} methods create and execute tasks\n * that run periodically until cancelled.\n *\n * <p>Commands submitted using the {@link Executor#execute(Runnable)}\n * and {@link ExecutorService} {@code submit} methods are scheduled\n * with a requested delay of zero. Zero and negative delays (but not\n * periods) are also allowed in {@code schedule} methods, and are\n * treated as requests for immediate execution.\n *\n * <p>All {@code schedule} methods accept <em>relative</em> delays and\n * periods as arguments, not absolute times or dates. It is a simple\n * matter to transform an absolute time represented as a {@link\n * java.util.Date} to the required form. For example, to schedule at\n * a certain future {@code date}, you can use: {@code schedule(task,\n * date.getTime() - System.currentTimeMillis(),\n * TimeUnit.MILLISECONDS)}. Beware however that expiration of a\n * relative delay need not coincide with the current {@code Date} at\n * which the task is enabled due to network time synchronization\n * protocols, clock drift, or other factors.\n *\n * <p>The {@link Executors} class provides convenient factory methods for\n * the ScheduledExecutorService implementations provided in this package.\n *\n * <h2>Usage Example</h2>\n *\n * Here is a class with a method that sets up a ScheduledExecutorService\n * to beep every ten seconds for an hour:\n *\n * <pre> {@code\n * import static java.util.concurrent.TimeUnit.*;\n * class BeeperControl {\n *   private final ScheduledExecutorService scheduler =\n *     Executors.newScheduledThreadPool(1);\n *\n *   public void beepForAnHour() {\n *     Runnable beeper = () -> System.out.println(\"beep\");\n *     ScheduledFuture<?> beeperHandle =\n *       scheduler.scheduleAtFixedRate(beeper, 10, 10, SECONDS);\n *     Runnable canceller = () -> beeperHandle.cancel(false);\n *     scheduler.schedule(canceller, 1, HOURS);\n *   }\n * }}</pre>\n *\n * @since 1.5\n * @author Doug Lea\n ",
  "links" : [ "java.util.Date", "java.util.concurrent.Executor#execute(Runnable)", "java.util.concurrent.ExecutorService", "java.util.concurrent.Executors" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public ScheduledFuture<?> schedule(Runnable command, long delay, TimeUnit unit)",
    "returnType" : "ScheduledFuture<?>",
    "comment" : "\n     * Submits a one-shot task that becomes enabled after the given delay.\n     *\n     * @param command the task to execute\n     * @param delay the time from now to delay execution\n     * @param unit the time unit of the delay parameter\n     * @return a ScheduledFuture representing pending completion of\n     *         the task and whose {@code get()} method will return\n     *         {@code null} upon completion\n     * @throws RejectedExecutionException if the task cannot be\n     *         scheduled for execution\n     * @throws NullPointerException if command or unit is null\n     ",
    "links" : [ ]
  }, {
    "name" : "public ScheduledFuture<V> schedule(Callable<V> callable, long delay, TimeUnit unit)",
    "returnType" : "ScheduledFuture<V>",
    "comment" : "\n     * Submits a value-returning one-shot task that becomes enabled\n     * after the given delay.\n     *\n     * @param callable the function to execute\n     * @param delay the time from now to delay execution\n     * @param unit the time unit of the delay parameter\n     * @param <V> the type of the callable's result\n     * @return a ScheduledFuture that can be used to extract result or cancel\n     * @throws RejectedExecutionException if the task cannot be\n     *         scheduled for execution\n     * @throws NullPointerException if callable or unit is null\n     ",
    "links" : [ ]
  }, {
    "name" : "public ScheduledFuture<?> scheduleAtFixedRate(Runnable command, long initialDelay, long period, TimeUnit unit)",
    "returnType" : "ScheduledFuture<?>",
    "comment" : "\n     * Submits a periodic action that becomes enabled first after the\n     * given initial delay, and subsequently with the given period;\n     * that is, executions will commence after\n     * {@code initialDelay}, then {@code initialDelay + period}, then\n     * {@code initialDelay + 2 * period}, and so on.\n     *\n     * <p>The sequence of task executions continues indefinitely until\n     * one of the following exceptional completions occur:\n     * <ul>\n     * <li>The task is {@linkplain Future#cancel explicitly cancelled}\n     * via the returned future.\n     * <li>The executor terminates, also resulting in task cancellation.\n     * <li>An execution of the task throws an exception.  In this case\n     * calling {@link Future#get() get} on the returned future will throw\n     * {@link ExecutionException}, holding the exception as its cause.\n     * </ul>\n     * Subsequent executions are suppressed.  Subsequent calls to\n     * {@link Future#isDone isDone()} on the returned future will\n     * return {@code true}.\n     *\n     * <p>If any execution of this task takes longer than its period, then\n     * subsequent executions may start late, but will not concurrently\n     * execute.\n     *\n     * @param command the task to execute\n     * @param initialDelay the time to delay first execution\n     * @param period the period between successive executions\n     * @param unit the time unit of the initialDelay and period parameters\n     * @return a ScheduledFuture representing pending completion of\n     *         the series of repeated tasks.  The future's {@link\n     *         Future#get() get()} method will never return normally,\n     *         and will throw an exception upon task cancellation or\n     *         abnormal termination of a task execution.\n     * @throws RejectedExecutionException if the task cannot be\n     *         scheduled for execution\n     * @throws NullPointerException if command or unit is null\n     * @throws IllegalArgumentException if period less than or equal to zero\n     ",
    "links" : [ "java.util.concurrent.ExecutionException", "java.util.concurrent.Future#isDone", "java.util.concurrent.Future#get()" ]
  }, {
    "name" : "public ScheduledFuture<?> scheduleWithFixedDelay(Runnable command, long initialDelay, long delay, TimeUnit unit)",
    "returnType" : "ScheduledFuture<?>",
    "comment" : "\n     * Submits a periodic action that becomes enabled first after the\n     * given initial delay, and subsequently with the given delay\n     * between the termination of one execution and the commencement of\n     * the next.\n     *\n     * <p>The sequence of task executions continues indefinitely until\n     * one of the following exceptional completions occur:\n     * <ul>\n     * <li>The task is {@linkplain Future#cancel explicitly cancelled}\n     * via the returned future.\n     * <li>The executor terminates, also resulting in task cancellation.\n     * <li>An execution of the task throws an exception.  In this case\n     * calling {@link Future#get() get} on the returned future will throw\n     * {@link ExecutionException}, holding the exception as its cause.\n     * </ul>\n     * Subsequent executions are suppressed.  Subsequent calls to\n     * {@link Future#isDone isDone()} on the returned future will\n     * return {@code true}.\n     *\n     * @param command the task to execute\n     * @param initialDelay the time to delay first execution\n     * @param delay the delay between the termination of one\n     * execution and the commencement of the next\n     * @param unit the time unit of the initialDelay and delay parameters\n     * @return a ScheduledFuture representing pending completion of\n     *         the series of repeated tasks.  The future's {@link\n     *         Future#get() get()} method will never return normally,\n     *         and will throw an exception upon task cancellation or\n     *         abnormal termination of a task execution.\n     * @throws RejectedExecutionException if the task cannot be\n     *         scheduled for execution\n     * @throws NullPointerException if command or unit is null\n     * @throws IllegalArgumentException if delay less than or equal to zero\n     ",
    "links" : [ "java.util.concurrent.ExecutionException", "java.util.concurrent.Future#isDone", "java.util.concurrent.Future#get()" ]
  } ],
  "methodNames" : [ "public ScheduledFuture<?> schedule(Runnable command, long delay, TimeUnit unit)", "public ScheduledFuture<V> schedule(Callable<V> callable, long delay, TimeUnit unit)", "public ScheduledFuture<?> scheduleAtFixedRate(Runnable command, long initialDelay, long period, TimeUnit unit)", "public ScheduledFuture<?> scheduleWithFixedDelay(Runnable command, long initialDelay, long delay, TimeUnit unit)" ],
  "variableNames" : [ ]
}