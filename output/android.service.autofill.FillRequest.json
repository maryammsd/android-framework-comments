{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/service/autofill/FillRequest.java",
  "packageName" : "android.service.autofill",
  "className" : "FillRequest",
  "comment" : "\n * This class represents a request to an autofill service\n * to interpret the screen and provide information to the system which views are\n * interesting for saving and what are the possible ways to fill the inputs on\n * the screen if applicable.\n *\n * @see AutofillService#onFillRequest(FillRequest, android.os.CancellationSignal, FillCallback)\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "FLAG_MANUAL_REQUEST",
    "type" : "int",
    "comment" : "\n     * Indicates autofill was explicitly requested by the user.\n     *\n     * <p>Users typically make an explicit request to autofill a screen in two situations:\n     * <ul>\n     *   <li>The app disabled autofill (using {@link View#setImportantForAutofill(int)}.\n     *   <li>The service could not figure out how to autofill a screen (but the user knows the\n     *       service has data for that app).\n     * </ul>\n     *\n     * <p>This flag is particularly useful for the second case. For example, the service could offer\n     * a complex UI where the user can map which screen views belong to each user data, or it could\n     * offer a simpler UI where the user picks the data for just the view used to trigger the\n     * request (that would be the view whose\n     * {@link android.app.assist.AssistStructure.ViewNode#isFocused()} method returns {@code true}).\n     *\n     * <p>An explicit autofill request is triggered when the\n     * {@link android.view.autofill.AutofillManager#requestAutofill(View)} or\n     * {@link android.view.autofill.AutofillManager#requestAutofill(View, int, android.graphics.Rect)}\n     * is called. For example, standard {@link android.widget.TextView} views show an\n     * {@code AUTOFILL} option in the overflow menu that triggers such request.\n     ",
    "links" : [ "android.app.assist.AssistStructure.ViewNode#isFocused()", "android.view.autofill.AutofillManager#requestAutofill(View)", "android.widget.TextView", "android.view.View#setImportantForAutofill(int)", "android.view.autofill.AutofillManager#requestAutofill(View" ]
  }, {
    "name" : "FLAG_COMPATIBILITY_MODE_REQUEST",
    "type" : "int",
    "comment" : "\n     * Indicates this request was made using\n     * <a href=\"AutofillService.html#CompatibilityMode\">compatibility mode</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_PASSWORD_INPUT_TYPE",
    "type" : "int",
    "comment" : "\n     * Indicates the request came from a password field.\n     *\n     * (TODO: b/141703197) Temporary fix for augmented autofill showing passwords.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_VIEW_NOT_FOCUSED",
    "type" : "int",
    "comment" : "\n     * Indicates the view was not focused.\n     *\n     * <p><b>Note:</b> Defines the flag value to 0x10, because the flag value 0x08 has been defined\n     * in {@link AutofillManager}.</p>\n     *\n     * @hide\n     ",
    "links" : [ "AutofillManager" ]
  }, {
    "name" : "FLAG_SUPPORTS_FILL_DIALOG",
    "type" : "int",
    "comment" : "\n     * Indicates the request supports fill dialog presentation for the fields, the\n     * system will send the request when the activity just started.\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_IME_SHOWING",
    "type" : "int",
    "comment" : "\n     * Indicates the ime is showing while request coming.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_RESET_FILL_DIALOG_STATE",
    "type" : "int",
    "comment" : "\n     * Indicates whether autofill session should reset the fill dialog state.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_PCC_DETECTION",
    "type" : "int",
    "comment" : "\n     * Indicate the fill request is made for PCC detection\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_SCREEN_HAS_CREDMAN_FIELD",
    "type" : "int",
    "comment" : "\n     * Indicate whether the screen has credman field\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_VIEW_REQUESTS_CREDMAN_SERVICE",
    "type" : "int",
    "comment" : "\n     * Indicate whether the user has focused on a credman field view.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "INVALID_REQUEST_ID",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "mId",
    "type" : "int",
    "comment" : "\n     * Gets the unique id of this request.\n     ",
    "links" : [ ]
  }, {
    "name" : "mFillContexts",
    "type" : "List<FillContext>",
    "comment" : "\n     * Gets the contexts associated with each previous fill request.\n     *\n     * <p><b>Note:</b> Starting on Android {@link android.os.Build.VERSION_CODES#Q}, it could also\n     * include contexts from requests whose {@link SaveInfo} had the\n     * {@link SaveInfo#FLAG_DELAY_SAVE} flag.\n     ",
    "links" : [ "android.service.autofill.SaveInfo", "android.os.Build.VERSION_CODES#Q", "android.service.autofill.SaveInfo#FLAG_DELAY_SAVE" ]
  }, {
    "name" : "mHints",
    "type" : "List<String>",
    "comment" : "\n     * Sends a list of datatypes for the Autofill Provider.\n     *\n     * If this is populated, Autofill Provider should return data\n     * for the autofill hints requested here,\n     * even though the Autofill Provider may not have detected these types.\n     * The hints would be part of HintConstants:\n     * https://developer.android.com/reference/androidx/autofill/HintConstants\n     *\n     * This is populated if the platform's field detection is enabled.\n     ",
    "links" : [ ]
  }, {
    "name" : "mClientState",
    "type" : "Bundle",
    "comment" : "\n     * Gets the latest client state bundle set by the service in a\n     * {@link FillResponse.Builder#setClientState(Bundle) fill response}.\n     *\n     * <p><b>Note:</b> Prior to Android {@link android.os.Build.VERSION_CODES#P}, only client state\n     * bundles set by {@link FillResponse.Builder#setClientState(Bundle)} were considered. On\n     * Android {@link android.os.Build.VERSION_CODES#P} and higher, bundles set in the result of\n     * an authenticated request through the\n     * {@link android.view.autofill.AutofillManager#EXTRA_CLIENT_STATE} extra are\n     * also considered (and take precedence when set).\n     *\n     * @return The client state.\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#P", "FillResponse.Builder#setClientState(Bundle)", "android.view.autofill.AutofillManager#EXTRA_CLIENT_STATE" ]
  }, {
    "name" : "mFlags",
    "type" : "int",
    "comment" : "\n     * Gets the flags associated with this request.\n     *\n     * @return any combination of {@link #FLAG_MANUAL_REQUEST},\n     *         {@link #FLAG_SUPPORTS_FILL_DIALOG} and\n     *         {@link #FLAG_COMPATIBILITY_MODE_REQUEST}.\n     *\n     ",
    "links" : [ "#FLAG_MANUAL_REQUEST", "#FLAG_COMPATIBILITY_MODE_REQUEST", "#FLAG_SUPPORTS_FILL_DIALOG" ]
  }, {
    "name" : "mInlineSuggestionsRequest",
    "type" : "InlineSuggestionsRequest",
    "comment" : "\n     * Gets the {@link InlineSuggestionsRequest} associated\n     * with this request.\n     *\n     * <p>Autofill Framework will send a {@code @non-null} {@link InlineSuggestionsRequest} if\n     * currently inline suggestions are supported and can be displayed. If the Autofill service\n     * wants to show inline suggestions, they may return {@link Dataset} with valid\n     * {@link InlinePresentation}.</p>\n     *\n     * <p>The Autofill Service must set supportsInlineSuggestions in its XML to enable support\n     * for inline suggestions.</p>\n     *\n     * @return the suggestionspec\n     ",
    "links" : [ "android.service.autofill.Dataset", "android.service.autofill.InlinePresentation", "android.view.inputmethod.InlineSuggestionsRequest" ]
  }, {
    "name" : "mDelayedFillIntentSender",
    "type" : "IntentSender",
    "comment" : "\n     * Gets the {@link IntentSender} to send a delayed fill response.\n     *\n     * <p>The autofill service must first indicate that it wants to return a delayed\n     * {@link FillResponse} by setting {@link FillResponse#FLAG_DELAY_FILL} in a successful\n     * fill response. Then it can use this IntentSender to send an Intent with extra\n     * {@link AutofillService#EXTRA_FILL_RESPONSE} with the delayed response.</p>\n     *\n     * <p>Note that this may be null if a delayed fill response is not supported for\n     * this fill request.</p>\n     ",
    "links" : [ "android.service.autofill.AutofillService#EXTRA_FILL_RESPONSE", "android.content.IntentSender", "android.service.autofill.FillResponse#FLAG_DELAY_FILL", "android.service.autofill.FillResponse" ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<FillRequest>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void onConstructed()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String requestFlagsToString(@RequestFlags int value)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : " static String singleRequestFlagsToString(@RequestFlags int value)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getId()",
    "returnType" : "int",
    "comment" : "\n     * Gets the unique id of this request.\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<FillContext> getFillContexts()",
    "returnType" : "List<FillContext>",
    "comment" : "\n     * Gets the contexts associated with each previous fill request.\n     *\n     * <p><b>Note:</b> Starting on Android {@link android.os.Build.VERSION_CODES#Q}, it could also\n     * include contexts from requests whose {@link SaveInfo} had the\n     * {@link SaveInfo#FLAG_DELAY_SAVE} flag.\n     ",
    "links" : [ "android.service.autofill.SaveInfo", "android.os.Build.VERSION_CODES#Q", "android.service.autofill.SaveInfo#FLAG_DELAY_SAVE" ]
  }, {
    "name" : "public List<String> getHints()",
    "returnType" : "List<String>",
    "comment" : "\n     * Sends a list of datatypes for the Autofill Provider.\n     *\n     * If this is populated, Autofill Provider should return data\n     * for the autofill hints requested here,\n     * even though the Autofill Provider may not have detected these types.\n     * The hints would be part of HintConstants:\n     * https://developer.android.com/reference/androidx/autofill/HintConstants\n     *\n     * This is populated if the platform's field detection is enabled.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Bundle getClientState()",
    "returnType" : "Bundle",
    "comment" : "\n     * Gets the latest client state bundle set by the service in a\n     * {@link FillResponse.Builder#setClientState(Bundle) fill response}.\n     *\n     * <p><b>Note:</b> Prior to Android {@link android.os.Build.VERSION_CODES#P}, only client state\n     * bundles set by {@link FillResponse.Builder#setClientState(Bundle)} were considered. On\n     * Android {@link android.os.Build.VERSION_CODES#P} and higher, bundles set in the result of\n     * an authenticated request through the\n     * {@link android.view.autofill.AutofillManager#EXTRA_CLIENT_STATE} extra are\n     * also considered (and take precedence when set).\n     *\n     * @return The client state.\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#P", "FillResponse.Builder#setClientState(Bundle)", "android.view.autofill.AutofillManager#EXTRA_CLIENT_STATE" ]
  }, {
    "name" : "public int getFlags()",
    "returnType" : "int",
    "comment" : "\n     * Gets the flags associated with this request.\n     *\n     * @return any combination of {@link #FLAG_MANUAL_REQUEST},\n     *         {@link #FLAG_SUPPORTS_FILL_DIALOG} and\n     *         {@link #FLAG_COMPATIBILITY_MODE_REQUEST}.\n     ",
    "links" : [ "#FLAG_MANUAL_REQUEST", "#FLAG_COMPATIBILITY_MODE_REQUEST", "#FLAG_SUPPORTS_FILL_DIALOG" ]
  }, {
    "name" : "public InlineSuggestionsRequest getInlineSuggestionsRequest()",
    "returnType" : "InlineSuggestionsRequest",
    "comment" : "\n     * Gets the {@link InlineSuggestionsRequest} associated\n     * with this request.\n     *\n     * <p>Autofill Framework will send a {@code @non-null} {@link InlineSuggestionsRequest} if\n     * currently inline suggestions are supported and can be displayed. If the Autofill service\n     * wants to show inline suggestions, they may return {@link Dataset} with valid\n     * {@link InlinePresentation}.</p>\n     *\n     * <p>The Autofill Service must set supportsInlineSuggestions in its XML to enable support\n     * for inline suggestions.</p>\n     *\n     * @return the suggestionspec\n     ",
    "links" : [ "android.service.autofill.Dataset", "android.service.autofill.InlinePresentation", "android.view.inputmethod.InlineSuggestionsRequest" ]
  }, {
    "name" : "public IntentSender getDelayedFillIntentSender()",
    "returnType" : "IntentSender",
    "comment" : "\n     * Gets the {@link IntentSender} to send a delayed fill response.\n     *\n     * <p>The autofill service must first indicate that it wants to return a delayed\n     * {@link FillResponse} by setting {@link FillResponse#FLAG_DELAY_FILL} in a successful\n     * fill response. Then it can use this IntentSender to send an Intent with extra\n     * {@link AutofillService#EXTRA_FILL_RESPONSE} with the delayed response.</p>\n     *\n     * <p>Note that this may be null if a delayed fill response is not supported for\n     * this fill request.</p>\n     ",
    "links" : [ "android.service.autofill.AutofillService#EXTRA_FILL_RESPONSE", "android.content.IntentSender", "android.service.autofill.FillResponse#FLAG_DELAY_FILL", "android.service.autofill.FillResponse" ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void __metadata()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void onConstructed()", "public static String requestFlagsToString(@RequestFlags int value)", " static String singleRequestFlagsToString(@RequestFlags int value)", "public int getId()", "public List<FillContext> getFillContexts()", "public List<String> getHints()", "public Bundle getClientState()", "public int getFlags()", "public InlineSuggestionsRequest getInlineSuggestionsRequest()", "public IntentSender getDelayedFillIntentSender()", "public String toString()", "public void writeToParcel(@NonNull Parcel dest, int flags)", "public int describeContents()", "private void __metadata()" ],
  "variableNames" : [ "FLAG_MANUAL_REQUEST", "FLAG_COMPATIBILITY_MODE_REQUEST", "FLAG_PASSWORD_INPUT_TYPE", "FLAG_VIEW_NOT_FOCUSED", "FLAG_SUPPORTS_FILL_DIALOG", "FLAG_IME_SHOWING", "FLAG_RESET_FILL_DIALOG_STATE", "FLAG_PCC_DETECTION", "FLAG_SCREEN_HAS_CREDMAN_FIELD", "FLAG_VIEW_REQUESTS_CREDMAN_SERVICE", "INVALID_REQUEST_ID", "mId", "mFillContexts", "mHints", "mClientState", "mFlags", "mInlineSuggestionsRequest", "mDelayedFillIntentSender", "CREATOR" ]
}