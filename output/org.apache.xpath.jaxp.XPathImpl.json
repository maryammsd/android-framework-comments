{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xpath/jaxp/XPathImpl.java",
  "packageName" : "org.apache.xpath.jaxp",
  "className" : "XPathImpl",
  "comment" : "\n * The XPathImpl class provides implementation for the methods defined  in\n * javax.xml.xpath.XPath interface. This provide simple access to the results\n * of an XPath expression.\n *\n *\n * @version $Revision: 524814 $\n * @author  Ramesh Mandava\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "variableResolver",
    "type" : "XPathVariableResolver",
    "comment" : " Private variables",
    "links" : [ ]
  }, {
    "name" : "functionResolver",
    "type" : "XPathFunctionResolver",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "origVariableResolver",
    "type" : "XPathVariableResolver",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "origFunctionResolver",
    "type" : "XPathFunctionResolver",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "namespaceContext",
    "type" : "NamespaceContext",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "prefixResolver",
    "type" : "JAXPPrefixResolver",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "featureSecureProcessing",
    "type" : "boolean",
    "comment" : " extensions function need to throw XPathFunctionException",
    "links" : [ ]
  }, {
    "name" : "d",
    "type" : "Document",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setXPathVariableResolver(XPathVariableResolver resolver)",
    "returnType" : "void",
    "comment" : "\n     * <p>Establishes a variable resolver.</p>\n     *\n     * @param resolver Variable Resolver\n     ",
    "links" : [ ]
  }, {
    "name" : "public XPathVariableResolver getXPathVariableResolver()",
    "returnType" : "XPathVariableResolver",
    "comment" : "\n     * <p>Returns the current variable resolver.</p>\n     *\n     * @return Current variable resolver\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setXPathFunctionResolver(XPathFunctionResolver resolver)",
    "returnType" : "void",
    "comment" : "\n     * <p>Establishes a function resolver.</p>\n     *\n     * @param resolver XPath function resolver\n     ",
    "links" : [ ]
  }, {
    "name" : "public XPathFunctionResolver getXPathFunctionResolver()",
    "returnType" : "XPathFunctionResolver",
    "comment" : "\n     * <p>Returns the current function resolver.</p>\n     *\n     * @return Current function resolver\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setNamespaceContext(NamespaceContext nsContext)",
    "returnType" : "void",
    "comment" : "\n     * <p>Establishes a namespace context.</p>\n     *\n     * @param nsContext Namespace context to use\n     ",
    "links" : [ ]
  }, {
    "name" : "public NamespaceContext getNamespaceContext()",
    "returnType" : "NamespaceContext",
    "comment" : "\n     * <p>Returns the current namespace context.</p>\n     *\n     * @return Current Namespace context\n     ",
    "links" : [ ]
  }, {
    "name" : "private static DocumentBuilder getParser()",
    "returnType" : "DocumentBuilder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Document getDummyDocument()",
    "returnType" : "Document",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private XObject eval(String expression, Object contextItem) throws javax.xml.transform.TransformerException",
    "returnType" : "XObject",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Object evaluate(String expression, Object item, QName returnType) throws XPathExpressionException",
    "returnType" : "Object",
    "comment" : "\n     * <p>Evaluate an <code>XPath</code> expression in the specified context and return the result as the specified type.</p>\n     *\n     * <p>See \"Evaluation of XPath Expressions\" section of JAXP 1.3 spec\n     * for context item evaluation,\n     * variable, function and <code>QName</code> resolution and return type conversion.</p>\n     *\n     * <p>If <code>returnType</code> is not one of the types defined in {@link XPathConstants} (\n     * {@link XPathConstants#NUMBER NUMBER},\n     * {@link XPathConstants#STRING STRING},\n     * {@link XPathConstants#BOOLEAN BOOLEAN},\n     * {@link XPathConstants#NODE NODE} or\n     * {@link XPathConstants#NODESET NODESET})\n     * then an <code>IllegalArgumentException</code> is thrown.</p>\n     *\n     * <p>If a <code>null</code> value is provided for\n     * <code>item</code>, an empty document will be used for the\n     * context.\n     * If <code>expression</code> or <code>returnType</code> is <code>null</code>, then a\n     * <code>NullPointerException</code> is thrown.</p>\n     *\n     * @param expression The XPath expression.\n     * @param item The starting context (node or node list, for example).\n     * @param returnType The desired return type.\n     *\n     * @return Result of evaluating an XPath expression as an <code>Object</code> of <code>returnType</code>.\n     *\n     * @throws XPathExpressionException If <code>expression</code> cannot be evaluated.\n     * @throws IllegalArgumentException If <code>returnType</code> is not one of the types defined in {@link XPathConstants}.\n     * @throws NullPointerException If <code>expression</code> or <code>returnType</code> is <code>null</code>.\n     ",
    "links" : [ "javax.xml.xpath.XPathConstants#NUMBER", "javax.xml.xpath.XPathConstants#BOOLEAN", "javax.xml.xpath.XPathConstants#STRING", "javax.xml.xpath.XPathConstants", "javax.xml.xpath.XPathConstants#NODE", "javax.xml.xpath.XPathConstants#NODESET" ]
  }, {
    "name" : "private boolean isSupported(QName returnType)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Object getResultAsType(XObject resultObject, QName returnType) throws javax.xml.transform.TransformerException",
    "returnType" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String evaluate(String expression, Object item) throws XPathExpressionException",
    "returnType" : "String",
    "comment" : "\n     * <p>Evaluate an XPath expression in the specified context and return the result as a <code>String</code>.</p>\n     *\n     * <p>This method calls {@link #evaluate(String expression, Object item, QName returnType)} with a <code>returnType</code> of\n     * {@link XPathConstants#STRING}.</p>\n     *\n     * <p>See \"Evaluation of XPath Expressions\" of JAXP 1.3 spec \n     * for context item evaluation,\n     * variable, function and QName resolution and return type conversion.</p>\n     *\n     * <p>If a <code>null</code> value is provided for\n     * <code>item</code>, an empty document will be used for the\n     * context.\n     * If <code>expression</code> is <code>null</code>, then a <code>NullPointerException</code> is thrown.</p>\n     *\n     * @param expression The XPath expression.\n     * @param item The starting context (node or node list, for example).\n     *\n     * @return The <code>String</code> that is the result of evaluating the expression and\n     *   converting the result to a <code>String</code>.\n     *\n     * @throws XPathExpressionException If <code>expression</code> cannot be evaluated.\n     * @throws NullPointerException If <code>expression</code> is <code>null</code>.\n     ",
    "links" : [ "javax.xml.xpath.XPathConstants#STRING", "#evaluate(String" ]
  }, {
    "name" : "public XPathExpression compile(String expression) throws XPathExpressionException",
    "returnType" : "XPathExpression",
    "comment" : "\n     * <p>Compile an XPath expression for later evaluation.</p>\n     *\n     * <p>If <code>expression</code> contains any {@link XPathFunction}s,\n     * they must be available via the {@link XPathFunctionResolver}.\n     * An {@link XPathExpressionException} will be thrown if the <code>XPathFunction</code>\n     * cannot be resovled with the <code>XPathFunctionResolver</code>.</p>\n     * \n     * <p>If <code>expression</code> is <code>null</code>, a <code>NullPointerException</code> is thrown.</p>\n     *\n     * @param expression The XPath expression.\n     *\n     * @return Compiled XPath expression.\n\n     * @throws XPathExpressionException If <code>expression</code> cannot be compiled.\n     * @throws NullPointerException If <code>expression</code> is <code>null</code>.\n     ",
    "links" : [ "javax.xml.xpath.XPathExpressionException", "XPathFunction", "javax.xml.xpath.XPathFunctionResolver" ]
  }, {
    "name" : "public Object evaluate(String expression, InputSource source, QName returnType) throws XPathExpressionException",
    "returnType" : "Object",
    "comment" : "\n     * <p>Evaluate an XPath expression in the context of the specified <code>InputSource</code>\n     * and return the result as the specified type.</p>\n     *\n     * <p>This method builds a data model for the {@link InputSource} and calls\n     * {@link #evaluate(String expression, Object item, QName returnType)} on the resulting document object.</p>\n     *\n     * <p>See \"Evaluation of XPath Expressions\" section of JAXP 1.3 spec \n     * for context item evaluation,\n     * variable, function and QName resolution and return type conversion.</p>\n     *\n     * <p>If <code>returnType</code> is not one of the types defined in {@link XPathConstants},\n     * then an <code>IllegalArgumentException</code> is thrown.</p>\n     *\n     * <p>If <code>expression</code>, <code>source</code> or <code>returnType</code> is <code>null</code>,\n     * then a <code>NullPointerException</code> is thrown.</p>\n     *\n     * @param expression The XPath expression.\n     * @param source The input source of the document to evaluate over.\n     * @param returnType The desired return type.\n     *\n     * @return The <code>Object</code> that encapsulates the result of evaluating the expression.\n     *\n     * @throws XPathExpressionException If expression cannot be evaluated.\n     * @throws IllegalArgumentException If <code>returnType</code> is not one of the types defined in {@link XPathConstants}.\n     * @throws NullPointerException If <code>expression</code>, <code>source</code> or <code>returnType</code>\n     *   is <code>null</code>.\n     ",
    "links" : [ "org.xml.sax.InputSource", "javax.xml.xpath.XPathConstants", "#evaluate(String" ]
  }, {
    "name" : "public String evaluate(String expression, InputSource source) throws XPathExpressionException",
    "returnType" : "String",
    "comment" : "\n     * <p>Evaluate an XPath expression in the context of the specified <code>InputSource</code>\n     * and return the result as a <code>String</code>.</p>\n     *\n     * <p>This method calls {@link #evaluate(String expression, InputSource source, QName returnType)} with a\n     * <code>returnType</code> of {@link XPathConstants#STRING}.</p>\n     *\n     * <p>See \"Evaluation of XPath Expressions\" section of JAXP 1.3 spec\n     * for context item evaluation,\n     * variable, function and QName resolution and return type conversion.</p>\n     *\n     * <p>If <code>expression</code> or <code>source</code> is <code>null</code>,\n     * then a <code>NullPointerException</code> is thrown.</p>\n     *\n     * @param expression The XPath expression.\n     * @param source The <code>InputSource</code> of the document to evaluate over.\n     *\n     * @return The <code>String</code> that is the result of evaluating the expression and\n     *   converting the result to a <code>String</code>.\n     *\n     * @throws XPathExpressionException If expression cannot be evaluated.\n     * @throws NullPointerException If <code>expression</code> or <code>source</code> is <code>null</code>.\n     ",
    "links" : [ "javax.xml.xpath.XPathConstants#STRING", "#evaluate(String" ]
  }, {
    "name" : "public void reset()",
    "returnType" : "void",
    "comment" : "\n     * <p>Reset this <code>XPath</code> to its original configuration.</p>\n     *\n     * <p><code>XPath</code> is reset to the same state as when it was created with\n     * {@link XPathFactory#newXPath()}.\n     * <code>reset()</code> is designed to allow the reuse of existing <code>XPath</code>s\n     * thus saving resources associated with the creation of new <code>XPath</code>s.</p>\n     *\n     * <p>The reset <code>XPath</code> is not guaranteed to have the same\n     * {@link XPathFunctionResolver}, {@link XPathVariableResolver}\n     * or {@link NamespaceContext} <code>Object</code>s, e.g. {@link Object#equals(Object obj)}.\n     * It is guaranteed to have a functionally equal <code>XPathFunctionResolver</code>,\n     * <code>XPathVariableResolver</code>\n     * and <code>NamespaceContext</code>.</p>\n     ",
    "links" : [ "#newXPath()", "javax.xml.xpath.XPathVariableResolver", "javax.xml.xpath.XPathFunctionResolver", "org.apache.xpath.objects.XObject#equals(Object", "javax.xml.namespace.NamespaceContext" ]
  } ],
  "methodNames" : [ "public void setXPathVariableResolver(XPathVariableResolver resolver)", "public XPathVariableResolver getXPathVariableResolver()", "public void setXPathFunctionResolver(XPathFunctionResolver resolver)", "public XPathFunctionResolver getXPathFunctionResolver()", "public void setNamespaceContext(NamespaceContext nsContext)", "public NamespaceContext getNamespaceContext()", "private static DocumentBuilder getParser()", "private static Document getDummyDocument()", "private XObject eval(String expression, Object contextItem) throws javax.xml.transform.TransformerException", "public Object evaluate(String expression, Object item, QName returnType) throws XPathExpressionException", "private boolean isSupported(QName returnType)", "private Object getResultAsType(XObject resultObject, QName returnType) throws javax.xml.transform.TransformerException", "public String evaluate(String expression, Object item) throws XPathExpressionException", "public XPathExpression compile(String expression) throws XPathExpressionException", "public Object evaluate(String expression, InputSource source, QName returnType) throws XPathExpressionException", "public String evaluate(String expression, InputSource source) throws XPathExpressionException", "public void reset()" ],
  "variableNames" : [ "variableResolver", "functionResolver", "origVariableResolver", "origFunctionResolver", "namespaceContext", "prefixResolver", "featureSecureProcessing", "d" ]
}