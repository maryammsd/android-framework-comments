{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/database/ContentObserver.java",
  "packageName" : "android.database",
  "className" : "ContentObserver",
  "comment" : "\n * Receives call backs for changes to content.\n * Must be implemented by objects which are added to a {@link ContentObservable}.\n ",
  "links" : [ "android.database.ContentObservable" ],
  "variables" : [ {
    "name" : "ADD_CONTENT_OBSERVER_FLAGS",
    "type" : "long",
    "comment" : "\n     * Starting in {@link android.os.Build.VERSION_CODES#R}, there is a new\n     * public API overload {@link #onChange(boolean, Uri, int)} that delivers a\n     * {@code int flags} argument.\n     * <p>\n     * Some apps may be relying on a previous hidden API that delivered a\n     * {@code int userId} argument, and this change is used to control delivery\n     * of the new {@code int flags} argument in its place.\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#R", "#onChange(boolean" ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTransport",
    "type" : "Transport",
    "comment" : " guarded by mLock",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExecutor",
    "type" : "Executor",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public IContentObserver getContentObserver()",
    "returnType" : "IContentObserver",
    "comment" : "\n     * Gets access to the binder transport object. Not for public consumption.\n     *\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public IContentObserver releaseContentObserver()",
    "returnType" : "IContentObserver",
    "comment" : "\n     * Gets access to the binder transport object, and unlinks the transport object\n     * from the ContentObserver. Not for public consumption.\n     *\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean deliverSelfNotifications()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this observer is interested receiving self-change notifications.\n     *\n     * Subclasses should override this method to indicate whether the observer\n     * is interested in receiving notifications for changes that it made to the\n     * content itself.\n     *\n     * @return True if self-change notifications should be delivered to the observer.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onChange(boolean selfChange)",
    "returnType" : "void",
    "comment" : "\n     * This method is called when a content change occurs.\n     * <p>\n     * Subclasses should override this method to handle content changes.\n     * </p>\n     *\n     * @param selfChange True if this is a self-change notification.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onChange(boolean selfChange, @Nullable Uri uri)",
    "returnType" : "void",
    "comment" : "\n     * This method is called when a content change occurs.\n     * Includes the changed content Uri when available.\n     * <p>\n     * Subclasses should override this method to handle content changes. To\n     * ensure correct operation on older versions of the framework that did not\n     * provide richer arguments, applications should implement all overloads.\n     * <p>\n     * Example implementation:\n     * <pre><code>\n     * // Implement the onChange(boolean) method to delegate the change notification to\n     * // the onChange(boolean, Uri) method to ensure correct operation on older versions\n     * // of the framework that did not have the onChange(boolean, Uri) method.\n     * {@literal @Override}\n     * public void onChange(boolean selfChange) {\n     *     onChange(selfChange, null);\n     * }\n     *\n     * // Implement the onChange(boolean, Uri) method to take advantage of the new Uri argument.\n     * {@literal @Override}\n     * public void onChange(boolean selfChange, Uri uri) {\n     *     // Handle change.\n     * }\n     * </code></pre>\n     * </p>\n     *\n     * @param selfChange True if this is a self-change notification.\n     * @param uri The Uri of the changed content.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onChange(boolean selfChange, @Nullable Uri uri, @NotifyFlags int flags)",
    "returnType" : "void",
    "comment" : "\n     * This method is called when a content change occurs. Includes the changed\n     * content Uri when available.\n     * <p>\n     * Subclasses should override this method to handle content changes. To\n     * ensure correct operation on older versions of the framework that did not\n     * provide richer arguments, applications should implement all overloads.\n     *\n     * @param selfChange True if this is a self-change notification.\n     * @param uri The Uri of the changed content.\n     * @param flags Flags indicating details about this change.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onChange(boolean selfChange, @NonNull Collection<Uri> uris, @NotifyFlags int flags)",
    "returnType" : "void",
    "comment" : "\n     * This method is called when a content change occurs. Includes the changed\n     * content Uris when available.\n     * <p>\n     * Subclasses should override this method to handle content changes. To\n     * ensure correct operation on older versions of the framework that did not\n     * provide richer arguments, applications should implement all overloads.\n     *\n     * @param selfChange True if this is a self-change notification.\n     * @param uris The Uris of the changed content.\n     * @param flags Flags indicating details about this change.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onChange(boolean selfChange, @NonNull Collection<Uri> uris, @NotifyFlags int flags, @NonNull UserHandle user)",
    "returnType" : "void",
    "comment" : "\n     * This method is called when a content change occurs. Includes the changed\n     * content Uris when available.\n     * <p>\n     * Subclasses should override this method to handle content changes. To\n     * ensure correct operation on older versions of the framework that did not\n     * provide richer arguments, applications should implement all overloads.\n     *\n     * @param selfChange True if this is a self-change notification.\n     * @param uris The Uris of the changed content.\n     * @param flags Flags indicating details about this change.\n     * @param user The corresponding {@link UserHandle} for the current notification.\n     *\n     * @hide\n     ",
    "links" : [ "android.os.UserHandle" ]
  }, {
    "name" : "public void onChange(boolean selfChange, @NonNull Collection<Uri> uris, @NotifyFlags int flags, @UserIdInt int userId)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private static boolean isChangeEnabledAddContentObserverFlags()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isChangeEnabledAddContentObserverFlags$ravenwood()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final void dispatchChange(boolean selfChange)",
    "returnType" : "void",
    "comment" : "\n     * Dispatches a change notification to the observer.\n     * <p>\n     * If a {@link Handler} was supplied to the {@link ContentObserver}\n     * constructor, then a call to the {@link #onChange} method is posted to the\n     * handler's message queue. Otherwise, the {@link #onChange} method is\n     * invoked immediately on this thread.\n     *\n     * @deprecated Callers should migrate towards using a richer overload that\n     *             provides more details about the change, such as\n     *             {@link #dispatchChange(boolean, Collection, int)}.\n     ",
    "links" : [ "#dispatchChange(boolean", "#onChange", "android.os.Handler", "android.database.ContentObserver" ]
  }, {
    "name" : "public final void dispatchChange(boolean selfChange, @Nullable Uri uri)",
    "returnType" : "void",
    "comment" : "\n     * Dispatches a change notification to the observer. Includes the changed\n     * content Uri when available.\n     * <p>\n     * If a {@link Handler} was supplied to the {@link ContentObserver}\n     * constructor, then a call to the {@link #onChange} method is posted to the\n     * handler's message queue. Otherwise, the {@link #onChange} method is\n     * invoked immediately on this thread.\n     *\n     * @param selfChange True if this is a self-change notification.\n     * @param uri The Uri of the changed content.\n     ",
    "links" : [ "#onChange", "android.os.Handler", "android.database.ContentObserver" ]
  }, {
    "name" : "public final void dispatchChange(boolean selfChange, @Nullable Uri uri, @NotifyFlags int flags)",
    "returnType" : "void",
    "comment" : "\n     * Dispatches a change notification to the observer. Includes the changed\n     * content Uri when available.\n     * <p>\n     * If a {@link Handler} was supplied to the {@link ContentObserver}\n     * constructor, then a call to the {@link #onChange} method is posted to the\n     * handler's message queue. Otherwise, the {@link #onChange} method is\n     * invoked immediately on this thread.\n     *\n     * @param selfChange True if this is a self-change notification.\n     * @param uri The Uri of the changed content.\n     * @param flags Flags indicating details about this change.\n     ",
    "links" : [ "#onChange", "android.os.Handler", "android.database.ContentObserver" ]
  }, {
    "name" : "public final void dispatchChange(boolean selfChange, @NonNull Collection<Uri> uris, @NotifyFlags int flags)",
    "returnType" : "void",
    "comment" : "\n     * Dispatches a change notification to the observer. Includes the changed\n     * content Uris when available.\n     * <p>\n     * If a {@link Handler} was supplied to the {@link ContentObserver}\n     * constructor, then a call to the {@link #onChange} method is posted to the\n     * handler's message queue. Otherwise, the {@link #onChange} method is\n     * invoked immediately on this thread.\n     *\n     * @param selfChange True if this is a self-change notification.\n     * @param uris The Uri of the changed content.\n     * @param flags Flags indicating details about this change.\n     ",
    "links" : [ "#onChange", "android.os.Handler", "android.database.ContentObserver" ]
  }, {
    "name" : "public final void dispatchChange(boolean selfChange, @NonNull Collection<Uri> uris, @NotifyFlags int flags, @UserIdInt int userId)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public IContentObserver getContentObserver()", "public IContentObserver releaseContentObserver()", "public boolean deliverSelfNotifications()", "public void onChange(boolean selfChange)", "public void onChange(boolean selfChange, @Nullable Uri uri)", "public void onChange(boolean selfChange, @Nullable Uri uri, @NotifyFlags int flags)", "public void onChange(boolean selfChange, @NonNull Collection<Uri> uris, @NotifyFlags int flags)", "public void onChange(boolean selfChange, @NonNull Collection<Uri> uris, @NotifyFlags int flags, @NonNull UserHandle user)", "public void onChange(boolean selfChange, @NonNull Collection<Uri> uris, @NotifyFlags int flags, @UserIdInt int userId)", "private static boolean isChangeEnabledAddContentObserverFlags()", "private static boolean isChangeEnabledAddContentObserverFlags$ravenwood()", "public final void dispatchChange(boolean selfChange)", "public final void dispatchChange(boolean selfChange, @Nullable Uri uri)", "public final void dispatchChange(boolean selfChange, @Nullable Uri uri, @NotifyFlags int flags)", "public final void dispatchChange(boolean selfChange, @NonNull Collection<Uri> uris, @NotifyFlags int flags)", "public final void dispatchChange(boolean selfChange, @NonNull Collection<Uri> uris, @NotifyFlags int flags, @UserIdInt int userId)" ],
  "variableNames" : [ "ADD_CONTENT_OBSERVER_FLAGS", "mLock", "mTransport", "mHandler", "mExecutor" ]
}