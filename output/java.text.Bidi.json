{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/text/Bidi.java",
  "packageName" : "java.text",
  "className" : "Bidi",
  "comment" : "\n * This class implements the Unicode Bidirectional Algorithm.\n * <p>\n * A Bidi object provides information on the bidirectional reordering of the text\n * used to create it.  This is required, for example, to properly display Arabic\n * or Hebrew text.  These languages are inherently mixed directional, as they order\n * numbers from left-to-right while ordering most other text from right-to-left.\n * <p>\n * Once created, a Bidi object can be queried to see if the text it represents is\n * all left-to-right or all right-to-left.  Such objects are very lightweight and\n * this text is relatively easy to process.\n * <p>\n * If there are multiple runs of text, information about the runs can be accessed\n * by indexing to get the start, limit, and level of a run.  The level represents\n * both the direction and the 'nesting level' of a directional run.  Odd levels\n * are right-to-left, while even levels are left-to-right.  So for example level\n * 0 represents left-to-right text, while level 1 represents right-to-left text, and\n * level 2 represents left-to-right text embedded in a right-to-left run.\n *\n * @since 1.4\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "DIRECTION_LEFT_TO_RIGHT",
    "type" : "int",
    "comment" : " Constant indicating base direction is left-to-right. ",
    "links" : [ ]
  }, {
    "name" : "DIRECTION_RIGHT_TO_LEFT",
    "type" : "int",
    "comment" : " Constant indicating base direction is right-to-left. ",
    "links" : [ ]
  }, {
    "name" : "DIRECTION_DEFAULT_LEFT_TO_RIGHT",
    "type" : "int",
    "comment" : "\n     * Constant indicating that the base direction depends on the first strong\n     * directional character in the text according to the Unicode\n     * Bidirectional Algorithm.  If no strong directional character is present,\n     * the base direction is left-to-right.\n     ",
    "links" : [ ]
  }, {
    "name" : "DIRECTION_DEFAULT_RIGHT_TO_LEFT",
    "type" : "int",
    "comment" : "\n     * Constant indicating that the base direction depends on the first strong\n     * directional character in the text according to the Unicode\n     * Bidirectional Algorithm.  If no strong directional character is present,\n     * the base direction is right-to-left.\n     ",
    "links" : [ ]
  }, {
    "name" : "bidiBase",
    "type" : "android.icu.text.Bidi",
    "comment" : " Android-changed: use ICU Bidi class instead of BidiBase.",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static int translateConstToIcu(int javaInt)",
    "returnType" : "int",
    "comment" : " BEGIN Android-added: translateConstToIcu(int).",
    "links" : [ ]
  }, {
    "name" : "public Bidi createLineBidi(int lineStart, int lineLimit)",
    "returnType" : "Bidi",
    "comment" : "\n     * Create a Bidi object representing the bidi information on a line of text within\n     * the paragraph represented by the current Bidi.  This call is not required if the\n     * entire paragraph fits on one line.\n     *\n     * @param lineStart the offset from the start of the paragraph to the start of the line.\n     * @param lineLimit the offset from the start of the paragraph to the limit of the line.\n     * @return a {@code Bidi} object\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isMixed()",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if the line is not left-to-right or right-to-left.  This means it either has mixed runs of left-to-right\n     * and right-to-left text, or the base direction differs from the direction of the only run of text.\n     *\n     * @return true if the line is not left-to-right or right-to-left.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isLeftToRight()",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if the line is all left-to-right text and the base direction is left-to-right.\n     *\n     * @return true if the line is all left-to-right text and the base direction is left-to-right\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isRightToLeft()",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if the line is all right-to-left text, and the base direction is right-to-left.\n     * @return true if the line is all right-to-left text, and the base direction is right-to-left\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getLength()",
    "returnType" : "int",
    "comment" : "\n     * Return the length of text in the line.\n     * @return the length of text in the line\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean baseIsLeftToRight()",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if the base direction is left-to-right.\n     * @return true if the base direction is left-to-right\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getBaseLevel()",
    "returnType" : "int",
    "comment" : "\n     * Return the base level (0 if left-to-right, 1 if right-to-left).\n     * @return the base level\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getLevelAt(int offset)",
    "returnType" : "int",
    "comment" : "\n     * Return the resolved level of the character at offset.  If offset is\n     * {@literal <} 0 or &ge; the length of the line, return the base direction\n     * level.\n     *\n     * @param offset the index of the character for which to return the level\n     * @return the resolved level of the character at offset\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getRunCount()",
    "returnType" : "int",
    "comment" : "\n     * Return the number of level runs.\n     * @return the number of level runs\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getRunLevel(int run)",
    "returnType" : "int",
    "comment" : "\n     * Return the level of the nth logical run in this line.\n     * @param run the index of the run, between 0 and {@code getRunCount()}\n     * @return the level of the run\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getRunStart(int run)",
    "returnType" : "int",
    "comment" : "\n     * Return the index of the character at the start of the nth logical run in this line, as\n     * an offset from the start of the line.\n     * @param run the index of the run, between 0 and {@code getRunCount()}\n     * @return the start of the run\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getRunLimit(int run)",
    "returnType" : "int",
    "comment" : "\n     * Return the index of the character past the end of the nth logical run in this line, as\n     * an offset from the start of the line.  For example, this will return the length\n     * of the line for the last run on the line.\n     * @param run the index of the run, between 0 and {@code getRunCount()}\n     * @return limit the limit of the run\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean requiresBidi(char[] text, int start, int limit)",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if the specified text requires bidi analysis.  If this returns false,\n     * the text will display left-to-right.  Clients can then avoid constructing a Bidi object.\n     * Text in the Arabic Presentation Forms area of Unicode is presumed to already be shaped\n     * and ordered for display, and so will not cause this function to return true.\n     *\n     * @param text the text containing the characters to test\n     * @param start the start of the range of characters to test\n     * @param limit the limit of the range of characters to test\n     * @return true if the range of characters requires bidi analysis\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void reorderVisually(byte[] levels, int levelStart, Object[] objects, int objectStart, int count)",
    "returnType" : "void",
    "comment" : "\n     * Reorder the objects in the array into visual order based on their levels.\n     * This is a utility function to use when you have a collection of objects\n     * representing runs of text in logical order, each run containing text\n     * at a single level.  The elements at {@code index} from\n     * {@code objectStart} up to {@code objectStart + count}\n     * in the objects array will be reordered into visual order assuming\n     * each run of text has the level indicated by the corresponding element\n     * in the levels array (at {@code index - objectStart + levelStart}).\n     *\n     * @param levels an array representing the bidi level of each object\n     * @param levelStart the start position in the levels array\n     * @param objects the array of objects to be reordered into visual order\n     * @param objectStart the start position in the objects array\n     * @param count the number of objects to reorder\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Display the bidi internal state, used in debugging.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static int translateConstToIcu(int javaInt)", "public Bidi createLineBidi(int lineStart, int lineLimit)", "public boolean isMixed()", "public boolean isLeftToRight()", "public boolean isRightToLeft()", "public int getLength()", "public boolean baseIsLeftToRight()", "public int getBaseLevel()", "public int getLevelAt(int offset)", "public int getRunCount()", "public int getRunLevel(int run)", "public int getRunStart(int run)", "public int getRunLimit(int run)", "public static boolean requiresBidi(char[] text, int start, int limit)", "public static void reorderVisually(byte[] levels, int levelStart, Object[] objects, int objectStart, int count)", "public String toString()" ],
  "variableNames" : [ "DIRECTION_LEFT_TO_RIGHT", "DIRECTION_RIGHT_TO_LEFT", "DIRECTION_DEFAULT_LEFT_TO_RIGHT", "DIRECTION_DEFAULT_RIGHT_TO_LEFT", "bidiBase" ]
}