{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xpath/axes/FilterExprWalker.java",
  "packageName" : "org.apache.xpath.axes",
  "className" : "FilterExprWalker",
  "comment" : "\n * Walker for the OP_VARIABLE, or OP_EXTFUNCTION, or OP_FUNCTION, or OP_GROUP,\n * op codes.\n * @see <a href=\"http://www.w3.org/TR/xpath#NT-FilterExpr\">XPath FilterExpr descriptions</a>\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_expr",
    "type" : "Expression",
    "comment" : " The contained expression. Should be non-null.\n   *  @serial   ",
    "links" : [ ]
  }, {
    "name" : "m_exprObj",
    "type" : "XNodeSet",
    "comment" : " The result of executing m_expr.  Needs to be deep cloned on clone op.  ",
    "links" : [ ]
  }, {
    "name" : "m_mustHardReset",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_canDetachNodeset",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void init(Compiler compiler, int opPos, int stepType) throws javax.xml.transform.TransformerException",
    "returnType" : "void",
    "comment" : "\n   * Init a FilterExprWalker.\n   *\n   * @param compiler non-null reference to the Compiler that is constructing.\n   * @param opPos positive opcode position for this step.\n   * @param stepType The type of step.\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public void detach()",
    "returnType" : "void",
    "comment" : "\n   * Detaches the walker from the set which it iterated over, releasing\n   * any computational resources and placing the iterator in the INVALID\n   * state.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setRoot(int root)",
    "returnType" : "void",
    "comment" : "\n   *  Set the root node of the TreeWalker.\n   *\n   * @param root non-null reference to the root, or starting point of \n   *        the query.\n   ",
    "links" : [ ]
  }, {
    "name" : "public Object clone() throws CloneNotSupportedException",
    "returnType" : "Object",
    "comment" : "\n   * Get a cloned FilterExprWalker.\n   *\n   * @return A new FilterExprWalker that can be used without mutating this one.\n   *\n   * @throws CloneNotSupportedException\n   ",
    "links" : [ ]
  }, {
    "name" : "public short acceptNode(int n)",
    "returnType" : "short",
    "comment" : "\n   * This method needs to override AxesWalker.acceptNode because FilterExprWalkers\n   * don't need to, and shouldn't, do a node test.\n   * @param n  The node to check to see if it passes the filter or not.\n   * @return  a constant to determine whether the node is accepted,\n   *   rejected, or skipped, as defined  above .\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getNextNode()",
    "returnType" : "int",
    "comment" : "\n   *  Moves the <code>TreeWalker</code> to the next visible node in document\n   * order relative to the current node, and returns the new node. If the\n   * current node has no next node,  or if the search for nextNode attempts\n   * to step upward from the TreeWalker's root node, returns\n   * <code>null</code> , and retains the current node.\n   * @return  The new node, or <code>null</code> if the current node has no\n   *   next node  in the TreeWalker's logical view.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getLastPos(XPathContext xctxt)",
    "returnType" : "int",
    "comment" : "\n   * Get the index of the last node that can be itterated to.\n   *\n   *\n   * @param xctxt XPath runtime context.\n   *\n   * @return the index of the last node that can be itterated to.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void fixupVariables(java.util.Vector vars, int globalsSize)",
    "returnType" : "void",
    "comment" : "\n   * This function is used to fixup variables from QNames to stack frame \n   * indexes at stylesheet build time.\n   * @param vars List of QNames that correspond to variables.  This list \n   * should be searched backwards for the first qualified name that \n   * corresponds to the variable reference qname.  The position of the \n   * QName in the vector from the start of the vector will be its position \n   * in the stack frame (but variables above the globalsTop value will need \n   * to be offset to the current stack frame).\n   ",
    "links" : [ ]
  }, {
    "name" : "public Expression getInnerExpression()",
    "returnType" : "Expression",
    "comment" : "\n   * Get the inner contained expression of this filter.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setInnerExpression(Expression expr)",
    "returnType" : "void",
    "comment" : "\n   * Set the inner contained expression of this filter.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getAnalysisBits()",
    "returnType" : "int",
    "comment" : " \n   * Get the analysis bits for this walker, as defined in the WalkerFactory.\n   * @return One of WalkerFactory#BIT_DESCENDANT, etc.\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean isDocOrdered()",
    "returnType" : "boolean",
    "comment" : "\n   * Returns true if all the nodes in the iteration well be returned in document \n   * order.\n   * Warning: This can only be called after setRoot has been called!\n   * \n   * @return true as a default.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getAxis()",
    "returnType" : "int",
    "comment" : "\n   * Returns the axis being iterated, if it is known.\n   * \n   * @return Axis.CHILD, etc., or -1 if the axis is not known or is of multiple \n   * types.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void callPredicateVisitors(XPathVisitor visitor)",
    "returnType" : "void",
    "comment" : "\n\t * This will traverse the heararchy, calling the visitor for \n\t * each member.  If the called visitor method returns \n\t * false, the subtree should not be called.\n\t * \n\t * @param visitor The visitor whose appropriate method will be called.\n\t ",
    "links" : [ ]
  }, {
    "name" : "public boolean deepEquals(Expression expr)",
    "returnType" : "boolean",
    "comment" : "\n     * @see Expression#deepEquals(Expression)\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void init(Compiler compiler, int opPos, int stepType) throws javax.xml.transform.TransformerException", "public void detach()", "public void setRoot(int root)", "public Object clone() throws CloneNotSupportedException", "public short acceptNode(int n)", "public int getNextNode()", "public int getLastPos(XPathContext xctxt)", "public void fixupVariables(java.util.Vector vars, int globalsSize)", "public Expression getInnerExpression()", "public void setInnerExpression(Expression expr)", "public int getAnalysisBits()", "public boolean isDocOrdered()", "public int getAxis()", "public void callPredicateVisitors(XPathVisitor visitor)", "public boolean deepEquals(Expression expr)" ],
  "variableNames" : [ "serialVersionUID", "m_expr", "m_exprObj", "m_mustHardReset", "m_canDetachNodeset" ]
}