{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/content/pm/parsing/ParsingPackageUtils.java",
  "packageName" : "android.content.pm.parsing",
  "className" : "ParsingPackageUtils",
  "comment" : "\n * TODO(b/135203078): Differentiate between parse_ methods and some add_ method for whether it\n * mutates the passed-in component or not. Or consolidate so all parse_ methods mutate.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnlyCoreApps",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSeparateProcesses",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDisplayMetrics",
    "type" : "DisplayMetrics",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallback",
    "type" : "Callback",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static ParseResult<ParsingPackage> parseDefaultOneTime(File file, @PackageParser.ParseFlags int parseFlags, boolean collectCertificates)",
    "returnType" : "ParseResult<ParsingPackage>",
    "comment" : "\n     * @see #parseDefault(ParseInput, File, int, boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ParseResult<ParsingPackage> parseDefault(ParseInput input, File file, @PackageParser.ParseFlags int parseFlags, boolean collectCertificates)",
    "returnType" : "ParseResult<ParsingPackage>",
    "comment" : "\n     * For cases outside of PackageManagerService when an APK needs to be parsed as a one-off\n     * request, without caching the input object and without querying the internal system state\n     * for feature support.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ParseResult<ParsingPackage> parsePackage(ParseInput input, File packageFile, int flags) throws PackageParserException",
    "returnType" : "ParseResult<ParsingPackage>",
    "comment" : "\n     * Parse the package at the given location. Automatically detects if the\n     * package is a monolithic style (single APK file) or cluster style\n     * (directory of APKs).\n     * <p>\n     * This performs sanity checking on cluster style packages, such as\n     * requiring identical package name and version codes, a single base APK,\n     * and unique split names.\n     * <p>\n     * Note that this <em>does not</em> perform signature verification; that\n     * must be done separately in {@link #getSigningDetails(ParsingPackageRead, boolean)}.\n     *\n     * If {@code useCaches} is true, the package parser might return a cached\n     * result from a previous parse of the same {@code packageFile} with the same\n     * {@code flags}. Note that this method does not check whether {@code packageFile}\n     * has changed since the last parse, it's up to callers to do so.\n     *\n     * @see PackageParser#parsePackageLite(File, int)\n     ",
    "links" : [ "#getSigningDetails(ParsingPackageRead" ]
  }, {
    "name" : "private ParseResult<ParsingPackage> parseClusterPackage(ParseInput input, File packageDir, int flags)",
    "returnType" : "ParseResult<ParsingPackage>",
    "comment" : "\n     * Parse all APKs contained in the given directory, treating them as a\n     * single package. This also performs sanity checking, such as requiring\n     * identical package name and version codes, a single base APK, and unique\n     * split names.\n     * <p>\n     * Note that this <em>does not</em> perform signature verification; that\n     * must be done separately in {@link #getSigningDetails(ParsingPackageRead, boolean)}.\n     ",
    "links" : [ "#getSigningDetails(ParsingPackageRead" ]
  }, {
    "name" : "private ParseResult<ParsingPackage> parseMonolithicPackage(ParseInput input, File apkFile, int flags) throws PackageParserException",
    "returnType" : "ParseResult<ParsingPackage>",
    "comment" : "\n     * Parse the given APK file, treating it as as a single monolithic package.\n     * <p>\n     * Note that this <em>does not</em> perform signature verification; that\n     * must be done separately in {@link #getSigningDetails(ParsingPackageRead, boolean)}.\n     ",
    "links" : [ "#getSigningDetails(ParsingPackageRead" ]
  }, {
    "name" : "private ParseResult<ParsingPackage> parseBaseApk(ParseInput input, File apkFile, String codePath, AssetManager assets, int flags)",
    "returnType" : "ParseResult<ParsingPackage>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private ParseResult<ParsingPackage> parseSplitApk(ParseInput input, ParsingPackage pkg, int splitIndex, AssetManager assets, int flags)",
    "returnType" : "ParseResult<ParsingPackage>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private ParseResult<ParsingPackage> parseBaseApk(ParseInput input, String apkPath, String codePath, Resources res, XmlResourceParser parser, int flags) throws XmlPullParserException, IOException, PackageParserException",
    "returnType" : "ParseResult<ParsingPackage>",
    "comment" : "\n     * Parse the manifest of a <em>base APK</em>. When adding new features you\n     * need to consider whether they should be supported by split APKs and child\n     * packages.\n     *\n     * @param apkPath The package apk file path\n     * @param res     The resources from which to resolve values\n     * @param parser  The manifest parser\n     * @param flags   Flags how to parse\n     * @return Parsed package or null on error.\n     ",
    "links" : [ ]
  }, {
    "name" : "private ParseResult<ParsingPackage> parseSplitApk(ParseInput input, ParsingPackage pkg, Resources res, XmlResourceParser parser, int flags, int splitIndex) throws XmlPullParserException, IOException, PackageParserException",
    "returnType" : "ParseResult<ParsingPackage>",
    "comment" : "\n     * Parse the manifest of a <em>split APK</em>.\n     * <p>\n     * Note that split APKs have many more restrictions on what they're capable\n     * of doing, so many valid features of a base APK have been carefully\n     * omitted here.\n     *\n     * @param pkg builder to fill\n     * @return false on failure\n     ",
    "links" : [ ]
  }, {
    "name" : "private ParseResult<ParsingPackage> parseSplitApplication(ParseInput input, ParsingPackage pkg, Resources res, XmlResourceParser parser, int flags, int splitIndex) throws XmlPullParserException, IOException",
    "returnType" : "ParseResult<ParsingPackage>",
    "comment" : "\n     * Parse the {@code application} XML tree at the current parse location in a\n     * <em>split APK</em> manifest.\n     * <p>\n     * Note that split APKs have many more restrictions on what they're capable\n     * of doing, so many valid features of a base APK have been carefully\n     * omitted here.\n     ",
    "links" : [ ]
  }, {
    "name" : "private ParseResult parseSplitBaseAppChildTags(ParseInput input, String tag, ParsingPackage pkg, Resources res, XmlResourceParser parser) throws IOException, XmlPullParserException",
    "returnType" : "ParseResult",
    "comment" : "\n     * For parsing non-MainComponents. Main ones have an order and some special handling which is\n     * done directly in {@link #parseSplitApplication(ParseInput, ParsingPackage, Resources,\n     * XmlResourceParser, int, int)}.\n     ",
    "links" : [ "#parseSplitApplication(ParseInput" ]
  }, {
    "name" : "private ParseResult<ParsingPackage> parseBaseApkTags(ParseInput input, ParsingPackage pkg, TypedArray sa, Resources res, XmlResourceParser parser, int flags) throws XmlPullParserException, IOException",
    "returnType" : "ParseResult<ParsingPackage>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private ParseResult parseBaseApkTag(String tag, ParseInput input, ParsingPackage pkg, Resources res, XmlResourceParser parser, int flags) throws IOException, XmlPullParserException",
    "returnType" : "ParseResult",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static ParseResult<ParsingPackage> parseSharedUser(ParseInput input, ParsingPackage pkg, TypedArray sa)",
    "returnType" : "ParseResult<ParsingPackage>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static ParseResult<ParsingPackage> parseKeySets(ParseInput input, ParsingPackage pkg, Resources res, XmlResourceParser parser) throws XmlPullParserException, IOException",
    "returnType" : "ParseResult<ParsingPackage>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static ParseResult<ParsingPackage> parseAttribution(ParseInput input, ParsingPackage pkg, Resources res, XmlResourceParser parser) throws IOException, XmlPullParserException",
    "returnType" : "ParseResult<ParsingPackage>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static ParseResult<ParsingPackage> parsePermissionGroup(ParseInput input, ParsingPackage pkg, Resources res, XmlResourceParser parser) throws XmlPullParserException, IOException",
    "returnType" : "ParseResult<ParsingPackage>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static ParseResult<ParsingPackage> parsePermission(ParseInput input, ParsingPackage pkg, Resources res, XmlResourceParser parser) throws XmlPullParserException, IOException",
    "returnType" : "ParseResult<ParsingPackage>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static ParseResult<ParsingPackage> parsePermissionTree(ParseInput input, ParsingPackage pkg, Resources res, XmlResourceParser parser) throws XmlPullParserException, IOException",
    "returnType" : "ParseResult<ParsingPackage>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private ParseResult<ParsingPackage> parseUsesPermission(ParseInput input, ParsingPackage pkg, Resources res, XmlResourceParser parser) throws IOException, XmlPullParserException",
    "returnType" : "ParseResult<ParsingPackage>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static ParseResult<ParsingPackage> parseUsesConfiguration(ParseInput input, ParsingPackage pkg, Resources res, XmlResourceParser parser)",
    "returnType" : "ParseResult<ParsingPackage>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static ParseResult<ParsingPackage> parseUsesFeature(ParseInput input, ParsingPackage pkg, Resources res, XmlResourceParser parser)",
    "returnType" : "ParseResult<ParsingPackage>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static FeatureInfo parseFeatureInfo(Resources res, AttributeSet attrs)",
    "returnType" : "FeatureInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static ParseResult<ParsingPackage> parseFeatureGroup(ParseInput input, ParsingPackage pkg, Resources res, XmlResourceParser parser) throws IOException, XmlPullParserException",
    "returnType" : "ParseResult<ParsingPackage>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static ParseResult<ParsingPackage> parseUsesSdk(ParseInput input, ParsingPackage pkg, Resources res, XmlResourceParser parser) throws IOException, XmlPullParserException",
    "returnType" : "ParseResult<ParsingPackage>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static SparseIntArray exactSizedCopyOfSparseArray(@Nullable SparseIntArray input)",
    "returnType" : "SparseIntArray",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static ParseResult<SparseIntArray> parseExtensionSdk(ParseInput input, Resources res, XmlResourceParser parser, SparseIntArray minExtensionVersions)",
    "returnType" : "ParseResult<SparseIntArray>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static ParseResult<Integer> computeMinSdkVersion(@IntRange(from = 1) int minVers, @Nullable String minCode, @IntRange(from = 1) int platformSdkVersion, @NonNull String[] platformSdkCodenames, @NonNull ParseInput input)",
    "returnType" : "ParseResult<Integer>",
    "comment" : "\n     * {@link ParseResult} version of\n     * {@link PackageParser#computeMinSdkVersion(int, String, int, String[], String[])}\n     ",
    "links" : [ "android.content.pm.parsing.result.ParseResult", "android.content.pm.PackageParser#computeMinSdkVersion(int" ]
  }, {
    "name" : "public static ParseResult<Integer> computeTargetSdkVersion(@IntRange(from = 0) int targetVers, @Nullable String targetCode, @NonNull String[] platformSdkCodenames, @NonNull ParseInput input)",
    "returnType" : "ParseResult<Integer>",
    "comment" : "\n     * {@link ParseResult} version of\n     * {@link PackageParser#computeTargetSdkVersion(int, String, String[], String[])}\n     ",
    "links" : [ "android.content.pm.parsing.result.ParseResult", "android.content.pm.PackageParser#computeTargetSdkVersion(int" ]
  }, {
    "name" : "private static boolean matchTargetCode(@NonNull String[] codeNames, @NonNull String targetCode)",
    "returnType" : "boolean",
    "comment" : "\n     * Matches a given {@code targetCode} against a set of release codeNames. Target codes can\n     * either be of the form {@code [codename]}\" (e.g {@code \"Q\"}) or of the form\n     * {@code [codename].[fingerprint]} (e.g {@code \"Q.cafebc561\"}).\n     ",
    "links" : [ ]
  }, {
    "name" : "private static ParseResult<ParsingPackage> parseRestrictUpdateHash(int flags, ParseInput input, ParsingPackage pkg, Resources res, XmlResourceParser parser)",
    "returnType" : "ParseResult<ParsingPackage>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static ParseResult<ParsingPackage> parseQueries(ParseInput input, ParsingPackage pkg, Resources res, XmlResourceParser parser) throws IOException, XmlPullParserException",
    "returnType" : "ParseResult<ParsingPackage>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private ParseResult<ParsingPackage> parseBaseApplication(ParseInput input, ParsingPackage pkg, Resources res, XmlResourceParser parser, int flags) throws XmlPullParserException, IOException",
    "returnType" : "ParseResult<ParsingPackage>",
    "comment" : "\n     * Parse the {@code application} XML tree at the current parse location in a\n     * <em>base APK</em> manifest.\n     * <p>\n     * When adding new features, carefully consider if they should also be\n     * supported by split APKs.\n     *\n     * This method should avoid using a getter for fields set by this method. Prefer assigning\n     * a local variable and using it. Otherwise there's an ordering problem which can be broken\n     * if any code moves around.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void parseBaseAppBasicFlags(ParsingPackage pkg, TypedArray sa)",
    "returnType" : "void",
    "comment" : "\n     * Collection of single-line, no (or little) logic assignments. Separated for readability.\n     *\n     * Flags are separated by type and by default value. They are sorted alphabetically within each\n     * section.\n     ",
    "links" : [ ]
  }, {
    "name" : "private ParseResult parseBaseAppChildTag(ParseInput input, String tag, ParsingPackage pkg, Resources res, XmlResourceParser parser, int flags) throws IOException, XmlPullParserException",
    "returnType" : "ParseResult",
    "comment" : "\n     * For parsing non-MainComponents. Main ones have an order and some special handling which is\n     * done directly in {@link #parseBaseApplication(ParseInput, ParsingPackage, Resources,\n     * XmlResourceParser, int)}.\n     ",
    "links" : [ "#parseBaseApplication(ParseInput" ]
  }, {
    "name" : "private static ParseResult<ParsingPackage> parseStaticLibrary(ParsingPackage pkg, Resources res, XmlResourceParser parser, ParseInput input)",
    "returnType" : "ParseResult<ParsingPackage>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static ParseResult<ParsingPackage> parseLibrary(ParsingPackage pkg, Resources res, XmlResourceParser parser, ParseInput input)",
    "returnType" : "ParseResult<ParsingPackage>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static ParseResult<ParsingPackage> parseUsesStaticLibrary(ParseInput input, ParsingPackage pkg, Resources res, XmlResourceParser parser) throws XmlPullParserException, IOException",
    "returnType" : "ParseResult<ParsingPackage>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static ParseResult<ParsingPackage> parseUsesLibrary(ParseInput input, ParsingPackage pkg, Resources res, XmlResourceParser parser)",
    "returnType" : "ParseResult<ParsingPackage>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static ParseResult<ParsingPackage> parseProcesses(ParseInput input, ParsingPackage pkg, Resources res, XmlResourceParser parser, String[] separateProcesses, int flags) throws IOException, XmlPullParserException",
    "returnType" : "ParseResult<ParsingPackage>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static ParseResult<ParsingPackage> parseProfileable(ParseInput input, ParsingPackage pkg, Resources res, XmlResourceParser parser)",
    "returnType" : "ParseResult<ParsingPackage>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static ParseResult<String[]> parseAdditionalCertificates(ParseInput input, Resources resources, XmlResourceParser parser) throws XmlPullParserException, IOException",
    "returnType" : "ParseResult<String[]>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static ParseResult<ParsedActivity> generateAppDetailsHiddenActivity(ParseInput input, ParsingPackage pkg)",
    "returnType" : "ParseResult<ParsedActivity>",
    "comment" : "\n     * Generate activity object that forwards user to App Details page automatically.\n     * This activity should be invisible to user and user should not know or see it.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean hasDomainURLs(ParsingPackage pkg)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if one of the IntentFilter as both actions DEFAULT / VIEW and a HTTP/HTTPS data URI\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void setMaxAspectRatio(ParsingPackage pkg)",
    "returnType" : "void",
    "comment" : "\n     * Sets the max aspect ratio of every child activity that doesn't already have an aspect\n     * ratio set.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setMinAspectRatio(ParsingPackage pkg)",
    "returnType" : "void",
    "comment" : "\n     * Sets the min aspect ratio of every child activity that doesn't already have an aspect\n     * ratio set.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setSupportsSizeChanges(ParsingPackage pkg)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static ParseResult<ParsingPackage> parseOverlay(ParseInput input, ParsingPackage pkg, Resources res, XmlResourceParser parser)",
    "returnType" : "ParseResult<ParsingPackage>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static ParseResult<ParsingPackage> parseProtectedBroadcast(ParseInput input, ParsingPackage pkg, Resources res, XmlResourceParser parser)",
    "returnType" : "ParseResult<ParsingPackage>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static ParseResult<ParsingPackage> parseSupportScreens(ParseInput input, ParsingPackage pkg, Resources res, XmlResourceParser parser)",
    "returnType" : "ParseResult<ParsingPackage>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static ParseResult<ParsingPackage> parseInstrumentation(ParseInput input, ParsingPackage pkg, Resources res, XmlResourceParser parser) throws XmlPullParserException, IOException",
    "returnType" : "ParseResult<ParsingPackage>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static ParseResult<ParsingPackage> parseOriginalPackage(ParseInput input, ParsingPackage pkg, Resources res, XmlResourceParser parser)",
    "returnType" : "ParseResult<ParsingPackage>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static ParseResult<ParsingPackage> parseAdoptPermissions(ParseInput input, ParsingPackage pkg, Resources res, XmlResourceParser parser)",
    "returnType" : "ParseResult<ParsingPackage>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void convertNewPermissions(ParsingPackage pkg)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void convertSplitPermissions(ParsingPackage pkg)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void adjustPackageToBeUnresizeableAndUnpipable(ParsingPackage pkg)",
    "returnType" : "void",
    "comment" : "\n     * This is a pre-density application which will get scaled - instead of being pixel perfect.\n     * This type of application is not resizable.\n     *\n     * @param pkg The package which needs to be marked as unresizable.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static ParseResult validateName(ParseInput input, String name, boolean requireSeparator, boolean requireFilename)",
    "returnType" : "ParseResult",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static ParseResult<Bundle> parseMetaData(ParsingPackage pkg, Resources res, XmlResourceParser parser, Bundle data, ParseInput input)",
    "returnType" : "ParseResult<Bundle>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static SigningDetails getSigningDetails(ParsingPackageRead pkg, boolean skipVerify) throws PackageParserException",
    "returnType" : "SigningDetails",
    "comment" : "\n     * Collect certificates from all the APKs described in the given package. Also asserts that\n     * all APK contents are signed correctly and consistently.\n     *\n     * TODO(b/155513789): Remove this in favor of collecting certificates during the original parse\n     *  call if requested. Leaving this as an optional method for the caller means we have to\n     *  construct a dummy ParseInput.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ParseResult<SigningDetails> getSigningDetails(ParseInput input, String baseCodePath, boolean skipVerify, boolean isStaticSharedLibrary, @NonNull SigningDetails existingSigningDetails, int targetSdk)",
    "returnType" : "ParseResult<SigningDetails>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean bool(boolean defaultValue, @StyleableRes int attribute, TypedArray sa)",
    "returnType" : "boolean",
    "comment" : " is important to specify when adding an attribute.",
    "links" : [ ]
  }, {
    "name" : "private static float aFloat(float defaultValue, @StyleableRes int attribute, TypedArray sa)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static float aFloat(@StyleableRes int attribute, TypedArray sa)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int anInt(int defaultValue, @StyleableRes int attribute, TypedArray sa)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int anInteger(int defaultValue, @StyleableRes int attribute, TypedArray sa)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int anInt(@StyleableRes int attribute, TypedArray sa)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int resId(@StyleableRes int attribute, TypedArray sa)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String string(@StyleableRes int attribute, TypedArray sa)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String nonConfigString(int allowedChangingConfigs, @StyleableRes int attribute, TypedArray sa)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String nonResString(@StyleableRes int index, TypedArray sa)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "mOnlyCoreApps", "mSeparateProcesses", "mDisplayMetrics", "mCallback" ],
  "methodNames" : [ "public static ParseResult<ParsingPackage> parseDefaultOneTime(File file, @PackageParser.ParseFlags int parseFlags, boolean collectCertificates)", "public static ParseResult<ParsingPackage> parseDefault(ParseInput input, File file, @PackageParser.ParseFlags int parseFlags, boolean collectCertificates)", "public ParseResult<ParsingPackage> parsePackage(ParseInput input, File packageFile, int flags) throws PackageParserException", "private ParseResult<ParsingPackage> parseClusterPackage(ParseInput input, File packageDir, int flags)", "private ParseResult<ParsingPackage> parseMonolithicPackage(ParseInput input, File apkFile, int flags) throws PackageParserException", "private ParseResult<ParsingPackage> parseBaseApk(ParseInput input, File apkFile, String codePath, AssetManager assets, int flags)", "private ParseResult<ParsingPackage> parseSplitApk(ParseInput input, ParsingPackage pkg, int splitIndex, AssetManager assets, int flags)", "private ParseResult<ParsingPackage> parseBaseApk(ParseInput input, String apkPath, String codePath, Resources res, XmlResourceParser parser, int flags) throws XmlPullParserException, IOException, PackageParserException", "private ParseResult<ParsingPackage> parseSplitApk(ParseInput input, ParsingPackage pkg, Resources res, XmlResourceParser parser, int flags, int splitIndex) throws XmlPullParserException, IOException, PackageParserException", "private ParseResult<ParsingPackage> parseSplitApplication(ParseInput input, ParsingPackage pkg, Resources res, XmlResourceParser parser, int flags, int splitIndex) throws XmlPullParserException, IOException", "private ParseResult parseSplitBaseAppChildTags(ParseInput input, String tag, ParsingPackage pkg, Resources res, XmlResourceParser parser) throws IOException, XmlPullParserException", "private ParseResult<ParsingPackage> parseBaseApkTags(ParseInput input, ParsingPackage pkg, TypedArray sa, Resources res, XmlResourceParser parser, int flags) throws XmlPullParserException, IOException", "private ParseResult parseBaseApkTag(String tag, ParseInput input, ParsingPackage pkg, Resources res, XmlResourceParser parser, int flags) throws IOException, XmlPullParserException", "private static ParseResult<ParsingPackage> parseSharedUser(ParseInput input, ParsingPackage pkg, TypedArray sa)", "private static ParseResult<ParsingPackage> parseKeySets(ParseInput input, ParsingPackage pkg, Resources res, XmlResourceParser parser) throws XmlPullParserException, IOException", "private static ParseResult<ParsingPackage> parseAttribution(ParseInput input, ParsingPackage pkg, Resources res, XmlResourceParser parser) throws IOException, XmlPullParserException", "private static ParseResult<ParsingPackage> parsePermissionGroup(ParseInput input, ParsingPackage pkg, Resources res, XmlResourceParser parser) throws XmlPullParserException, IOException", "private static ParseResult<ParsingPackage> parsePermission(ParseInput input, ParsingPackage pkg, Resources res, XmlResourceParser parser) throws XmlPullParserException, IOException", "private static ParseResult<ParsingPackage> parsePermissionTree(ParseInput input, ParsingPackage pkg, Resources res, XmlResourceParser parser) throws XmlPullParserException, IOException", "private ParseResult<ParsingPackage> parseUsesPermission(ParseInput input, ParsingPackage pkg, Resources res, XmlResourceParser parser) throws IOException, XmlPullParserException", "private static ParseResult<ParsingPackage> parseUsesConfiguration(ParseInput input, ParsingPackage pkg, Resources res, XmlResourceParser parser)", "private static ParseResult<ParsingPackage> parseUsesFeature(ParseInput input, ParsingPackage pkg, Resources res, XmlResourceParser parser)", "private static FeatureInfo parseFeatureInfo(Resources res, AttributeSet attrs)", "private static ParseResult<ParsingPackage> parseFeatureGroup(ParseInput input, ParsingPackage pkg, Resources res, XmlResourceParser parser) throws IOException, XmlPullParserException", "private static ParseResult<ParsingPackage> parseUsesSdk(ParseInput input, ParsingPackage pkg, Resources res, XmlResourceParser parser) throws IOException, XmlPullParserException", "private static SparseIntArray exactSizedCopyOfSparseArray(@Nullable SparseIntArray input)", "private static ParseResult<SparseIntArray> parseExtensionSdk(ParseInput input, Resources res, XmlResourceParser parser, SparseIntArray minExtensionVersions)", "public static ParseResult<Integer> computeMinSdkVersion(@IntRange(from = 1) int minVers, @Nullable String minCode, @IntRange(from = 1) int platformSdkVersion, @NonNull String[] platformSdkCodenames, @NonNull ParseInput input)", "public static ParseResult<Integer> computeTargetSdkVersion(@IntRange(from = 0) int targetVers, @Nullable String targetCode, @NonNull String[] platformSdkCodenames, @NonNull ParseInput input)", "private static boolean matchTargetCode(@NonNull String[] codeNames, @NonNull String targetCode)", "private static ParseResult<ParsingPackage> parseRestrictUpdateHash(int flags, ParseInput input, ParsingPackage pkg, Resources res, XmlResourceParser parser)", "private static ParseResult<ParsingPackage> parseQueries(ParseInput input, ParsingPackage pkg, Resources res, XmlResourceParser parser) throws IOException, XmlPullParserException", "private ParseResult<ParsingPackage> parseBaseApplication(ParseInput input, ParsingPackage pkg, Resources res, XmlResourceParser parser, int flags) throws XmlPullParserException, IOException", "private void parseBaseAppBasicFlags(ParsingPackage pkg, TypedArray sa)", "private ParseResult parseBaseAppChildTag(ParseInput input, String tag, ParsingPackage pkg, Resources res, XmlResourceParser parser, int flags) throws IOException, XmlPullParserException", "private static ParseResult<ParsingPackage> parseStaticLibrary(ParsingPackage pkg, Resources res, XmlResourceParser parser, ParseInput input)", "private static ParseResult<ParsingPackage> parseLibrary(ParsingPackage pkg, Resources res, XmlResourceParser parser, ParseInput input)", "private static ParseResult<ParsingPackage> parseUsesStaticLibrary(ParseInput input, ParsingPackage pkg, Resources res, XmlResourceParser parser) throws XmlPullParserException, IOException", "private static ParseResult<ParsingPackage> parseUsesLibrary(ParseInput input, ParsingPackage pkg, Resources res, XmlResourceParser parser)", "private static ParseResult<ParsingPackage> parseProcesses(ParseInput input, ParsingPackage pkg, Resources res, XmlResourceParser parser, String[] separateProcesses, int flags) throws IOException, XmlPullParserException", "private static ParseResult<ParsingPackage> parseProfileable(ParseInput input, ParsingPackage pkg, Resources res, XmlResourceParser parser)", "private static ParseResult<String[]> parseAdditionalCertificates(ParseInput input, Resources resources, XmlResourceParser parser) throws XmlPullParserException, IOException", "private static ParseResult<ParsedActivity> generateAppDetailsHiddenActivity(ParseInput input, ParsingPackage pkg)", "private static boolean hasDomainURLs(ParsingPackage pkg)", "private static void setMaxAspectRatio(ParsingPackage pkg)", "private void setMinAspectRatio(ParsingPackage pkg)", "private void setSupportsSizeChanges(ParsingPackage pkg)", "private static ParseResult<ParsingPackage> parseOverlay(ParseInput input, ParsingPackage pkg, Resources res, XmlResourceParser parser)", "private static ParseResult<ParsingPackage> parseProtectedBroadcast(ParseInput input, ParsingPackage pkg, Resources res, XmlResourceParser parser)", "private static ParseResult<ParsingPackage> parseSupportScreens(ParseInput input, ParsingPackage pkg, Resources res, XmlResourceParser parser)", "private static ParseResult<ParsingPackage> parseInstrumentation(ParseInput input, ParsingPackage pkg, Resources res, XmlResourceParser parser) throws XmlPullParserException, IOException", "private static ParseResult<ParsingPackage> parseOriginalPackage(ParseInput input, ParsingPackage pkg, Resources res, XmlResourceParser parser)", "private static ParseResult<ParsingPackage> parseAdoptPermissions(ParseInput input, ParsingPackage pkg, Resources res, XmlResourceParser parser)", "private static void convertNewPermissions(ParsingPackage pkg)", "private static void convertSplitPermissions(ParsingPackage pkg)", "private static void adjustPackageToBeUnresizeableAndUnpipable(ParsingPackage pkg)", "private static ParseResult validateName(ParseInput input, String name, boolean requireSeparator, boolean requireFilename)", "public static ParseResult<Bundle> parseMetaData(ParsingPackage pkg, Resources res, XmlResourceParser parser, Bundle data, ParseInput input)", "public static SigningDetails getSigningDetails(ParsingPackageRead pkg, boolean skipVerify) throws PackageParserException", "public static ParseResult<SigningDetails> getSigningDetails(ParseInput input, String baseCodePath, boolean skipVerify, boolean isStaticSharedLibrary, @NonNull SigningDetails existingSigningDetails, int targetSdk)", "private static boolean bool(boolean defaultValue, @StyleableRes int attribute, TypedArray sa)", "private static float aFloat(float defaultValue, @StyleableRes int attribute, TypedArray sa)", "private static float aFloat(@StyleableRes int attribute, TypedArray sa)", "private static int anInt(int defaultValue, @StyleableRes int attribute, TypedArray sa)", "private static int anInteger(int defaultValue, @StyleableRes int attribute, TypedArray sa)", "private static int anInt(@StyleableRes int attribute, TypedArray sa)", "private static int resId(@StyleableRes int attribute, TypedArray sa)", "private static String string(@StyleableRes int attribute, TypedArray sa)", "private static String nonConfigString(int allowedChangingConfigs, @StyleableRes int attribute, TypedArray sa)", "private static String nonResString(@StyleableRes int index, TypedArray sa)" ]
}