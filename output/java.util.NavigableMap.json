{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/NavigableMap.java",
  "packageName" : "java.util",
  "className" : "NavigableMap",
  "comment" : "\n * A {@link SortedMap} extended with navigation methods returning the\n * closest matches for given search targets. Methods\n * {@link #lowerEntry}, {@link #floorEntry}, {@link #ceilingEntry},\n * and {@link #higherEntry} return {@code Map.Entry} objects\n * associated with keys respectively less than, less than or equal,\n * greater than or equal, and greater than a given key, returning\n * {@code null} if there is no such key.  Similarly, methods\n * {@link #lowerKey}, {@link #floorKey}, {@link #ceilingKey}, and\n * {@link #higherKey} return only the associated keys. All of these\n * methods are designed for locating, not traversing entries.\n *\n * <p>A {@code NavigableMap} may be accessed and traversed in either\n * ascending or descending key order.  The {@link #descendingMap}\n * method returns a view of the map with the senses of all relational\n * and directional methods inverted. The performance of ascending\n * operations and views is likely to be faster than that of descending\n * ones.  Methods\n * {@link #subMap(Object, boolean, Object, boolean) subMap(K, boolean, K, boolean)},\n * {@link #headMap(Object, boolean) headMap(K, boolean)}, and\n * {@link #tailMap(Object, boolean) tailMap(K, boolean)}\n * differ from the like-named {@code SortedMap} methods in accepting\n * additional arguments describing whether lower and upper bounds are\n * inclusive versus exclusive.  Submaps of any {@code NavigableMap}\n * must implement the {@code NavigableMap} interface.\n *\n * <p>This interface additionally defines methods {@link #firstEntry},\n * {@link #pollFirstEntry}, {@link #lastEntry}, and\n * {@link #pollLastEntry} that return and/or remove the least and\n * greatest mappings, if any exist, else returning {@code null}.\n *\n * <p>The methods\n * {@link #ceilingEntry},\n * {@link #firstEntry},\n * {@link #floorEntry},\n * {@link #higherEntry},\n * {@link #lastEntry},\n * {@link #lowerEntry},\n * {@link #pollFirstEntry}, and\n * {@link #pollLastEntry}\n * return {@link Map.Entry} instances that represent snapshots of mappings as\n * of the time of the call. They do <em>not</em> support mutation of the\n * underlying map via the optional {@link Map.Entry#setValue setValue} method.\n *\n * <p>Methods\n * {@link #subMap(Object, Object) subMap(K, K)},\n * {@link #headMap(Object) headMap(K)}, and\n * {@link #tailMap(Object) tailMap(K)}\n * are specified to return {@code SortedMap} to allow existing\n * implementations of {@code SortedMap} to be compatibly retrofitted to\n * implement {@code NavigableMap}, but extensions and implementations\n * of this interface are encouraged to override these methods to return\n * {@code NavigableMap}.  Similarly,\n * {@link #keySet()} can be overridden to return {@link NavigableSet}.\n *\n * @author Doug Lea\n * @author Josh Bloch\n * @param <K> the type of keys maintained by this map\n * @param <V> the type of mapped values\n * @since 1.6\n ",
  "links" : [ "Map.Entry", "#lowerEntry", "Map.Entry#setValue", "#lowerKey", "#lastEntry", "java.util.NavigableSet", "#floorEntry", "#keySet()", "#higherEntry", "#headMap(Object)", "#descendingMap", "#pollFirstEntry", "#tailMap(Object)", "#headMap(Object", "#ceilingKey", "#firstEntry", "#ceilingEntry", "#floorKey", "#tailMap(Object", "#subMap(Object", "#higherKey", "java.util.SortedMap", "#pollLastEntry" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " Map.Entry<K, V> lowerEntry(K key)",
    "returnType" : "Map.Entry<K, V>",
    "comment" : "\n     * Returns a key-value mapping associated with the greatest key\n     * strictly less than the given key, or {@code null} if there is\n     * no such key.\n     *\n     * @param key the key\n     * @return an entry with the greatest key less than {@code key},\n     *         or {@code null} if there is no such key\n     * @throws ClassCastException if the specified key cannot be compared\n     *         with the keys currently in the map\n     * @throws NullPointerException if the specified key is null\n     *         and this map does not permit null keys\n     ",
    "links" : [ ]
  }, {
    "name" : " K lowerKey(K key)",
    "returnType" : "K",
    "comment" : "\n     * Returns the greatest key strictly less than the given key, or\n     * {@code null} if there is no such key.\n     *\n     * @param key the key\n     * @return the greatest key less than {@code key},\n     *         or {@code null} if there is no such key\n     * @throws ClassCastException if the specified key cannot be compared\n     *         with the keys currently in the map\n     * @throws NullPointerException if the specified key is null\n     *         and this map does not permit null keys\n     ",
    "links" : [ ]
  }, {
    "name" : " Map.Entry<K, V> floorEntry(K key)",
    "returnType" : "Map.Entry<K, V>",
    "comment" : "\n     * Returns a key-value mapping associated with the greatest key\n     * less than or equal to the given key, or {@code null} if there\n     * is no such key.\n     *\n     * @param key the key\n     * @return an entry with the greatest key less than or equal to\n     *         {@code key}, or {@code null} if there is no such key\n     * @throws ClassCastException if the specified key cannot be compared\n     *         with the keys currently in the map\n     * @throws NullPointerException if the specified key is null\n     *         and this map does not permit null keys\n     ",
    "links" : [ ]
  }, {
    "name" : " K floorKey(K key)",
    "returnType" : "K",
    "comment" : "\n     * Returns the greatest key less than or equal to the given key,\n     * or {@code null} if there is no such key.\n     *\n     * @param key the key\n     * @return the greatest key less than or equal to {@code key},\n     *         or {@code null} if there is no such key\n     * @throws ClassCastException if the specified key cannot be compared\n     *         with the keys currently in the map\n     * @throws NullPointerException if the specified key is null\n     *         and this map does not permit null keys\n     ",
    "links" : [ ]
  }, {
    "name" : " Map.Entry<K, V> ceilingEntry(K key)",
    "returnType" : "Map.Entry<K, V>",
    "comment" : "\n     * Returns a key-value mapping associated with the least key\n     * greater than or equal to the given key, or {@code null} if\n     * there is no such key.\n     *\n     * @param key the key\n     * @return an entry with the least key greater than or equal to\n     *         {@code key}, or {@code null} if there is no such key\n     * @throws ClassCastException if the specified key cannot be compared\n     *         with the keys currently in the map\n     * @throws NullPointerException if the specified key is null\n     *         and this map does not permit null keys\n     ",
    "links" : [ ]
  }, {
    "name" : " K ceilingKey(K key)",
    "returnType" : "K",
    "comment" : "\n     * Returns the least key greater than or equal to the given key,\n     * or {@code null} if there is no such key.\n     *\n     * @param key the key\n     * @return the least key greater than or equal to {@code key},\n     *         or {@code null} if there is no such key\n     * @throws ClassCastException if the specified key cannot be compared\n     *         with the keys currently in the map\n     * @throws NullPointerException if the specified key is null\n     *         and this map does not permit null keys\n     ",
    "links" : [ ]
  }, {
    "name" : " Map.Entry<K, V> higherEntry(K key)",
    "returnType" : "Map.Entry<K, V>",
    "comment" : "\n     * Returns a key-value mapping associated with the least key\n     * strictly greater than the given key, or {@code null} if there\n     * is no such key.\n     *\n     * @param key the key\n     * @return an entry with the least key greater than {@code key},\n     *         or {@code null} if there is no such key\n     * @throws ClassCastException if the specified key cannot be compared\n     *         with the keys currently in the map\n     * @throws NullPointerException if the specified key is null\n     *         and this map does not permit null keys\n     ",
    "links" : [ ]
  }, {
    "name" : " K higherKey(K key)",
    "returnType" : "K",
    "comment" : "\n     * Returns the least key strictly greater than the given key, or\n     * {@code null} if there is no such key.\n     *\n     * @param key the key\n     * @return the least key greater than {@code key},\n     *         or {@code null} if there is no such key\n     * @throws ClassCastException if the specified key cannot be compared\n     *         with the keys currently in the map\n     * @throws NullPointerException if the specified key is null\n     *         and this map does not permit null keys\n     ",
    "links" : [ ]
  }, {
    "name" : " Map.Entry<K, V> firstEntry()",
    "returnType" : "Map.Entry<K, V>",
    "comment" : "\n     * Returns a key-value mapping associated with the least\n     * key in this map, or {@code null} if the map is empty.\n     *\n     * @return an entry with the least key,\n     *         or {@code null} if this map is empty\n     ",
    "links" : [ ]
  }, {
    "name" : " Map.Entry<K, V> lastEntry()",
    "returnType" : "Map.Entry<K, V>",
    "comment" : "\n     * Returns a key-value mapping associated with the greatest\n     * key in this map, or {@code null} if the map is empty.\n     *\n     * @return an entry with the greatest key,\n     *         or {@code null} if this map is empty\n     ",
    "links" : [ ]
  }, {
    "name" : " Map.Entry<K, V> pollFirstEntry()",
    "returnType" : "Map.Entry<K, V>",
    "comment" : "\n     * Removes and returns a key-value mapping associated with\n     * the least key in this map, or {@code null} if the map is empty.\n     *\n     * @return the removed first entry of this map,\n     *         or {@code null} if this map is empty\n     ",
    "links" : [ ]
  }, {
    "name" : " Map.Entry<K, V> pollLastEntry()",
    "returnType" : "Map.Entry<K, V>",
    "comment" : "\n     * Removes and returns a key-value mapping associated with\n     * the greatest key in this map, or {@code null} if the map is empty.\n     *\n     * @return the removed last entry of this map,\n     *         or {@code null} if this map is empty\n     ",
    "links" : [ ]
  }, {
    "name" : " NavigableMap<K, V> descendingMap()",
    "returnType" : "NavigableMap<K, V>",
    "comment" : "\n     * Returns a reverse order view of the mappings contained in this map.\n     * The descending map is backed by this map, so changes to the map are\n     * reflected in the descending map, and vice-versa.  If either map is\n     * modified while an iteration over a collection view of either map\n     * is in progress (except through the iterator's own {@code remove}\n     * operation), the results of the iteration are undefined.\n     *\n     * <p>The returned map has an ordering equivalent to\n     * {@link Collections#reverseOrder(Comparator) Collections.reverseOrder}{@code (comparator())}.\n     * The expression {@code m.descendingMap().descendingMap()} returns a\n     * view of {@code m} essentially equivalent to {@code m}.\n     *\n     * @return a reverse order view of this map\n     ",
    "links" : [ "java.util.Collections#reverseOrder(Comparator)" ]
  }, {
    "name" : " NavigableSet<K> navigableKeySet()",
    "returnType" : "NavigableSet<K>",
    "comment" : "\n     * Returns a {@link NavigableSet} view of the keys contained in this map.\n     * The set's iterator returns the keys in ascending order.\n     * The set is backed by the map, so changes to the map are reflected in\n     * the set, and vice-versa.  If the map is modified while an iteration\n     * over the set is in progress (except through the iterator's own {@code\n     * remove} operation), the results of the iteration are undefined.  The\n     * set supports element removal, which removes the corresponding mapping\n     * from the map, via the {@code Iterator.remove}, {@code Set.remove},\n     * {@code removeAll}, {@code retainAll}, and {@code clear} operations.\n     * It does not support the {@code add} or {@code addAll} operations.\n     *\n     * @return a navigable set view of the keys in this map\n     ",
    "links" : [ "java.util.NavigableSet" ]
  }, {
    "name" : " NavigableSet<K> descendingKeySet()",
    "returnType" : "NavigableSet<K>",
    "comment" : "\n     * Returns a reverse order {@link NavigableSet} view of the keys contained in this map.\n     * The set's iterator returns the keys in descending order.\n     * The set is backed by the map, so changes to the map are reflected in\n     * the set, and vice-versa.  If the map is modified while an iteration\n     * over the set is in progress (except through the iterator's own {@code\n     * remove} operation), the results of the iteration are undefined.  The\n     * set supports element removal, which removes the corresponding mapping\n     * from the map, via the {@code Iterator.remove}, {@code Set.remove},\n     * {@code removeAll}, {@code retainAll}, and {@code clear} operations.\n     * It does not support the {@code add} or {@code addAll} operations.\n     *\n     * @return a reverse order navigable set view of the keys in this map\n     ",
    "links" : [ "java.util.NavigableSet" ]
  }, {
    "name" : " NavigableMap<K, V> subMap(K fromKey, boolean fromInclusive, K toKey, boolean toInclusive)",
    "returnType" : "NavigableMap<K, V>",
    "comment" : "\n     * Returns a view of the portion of this map whose keys range from\n     * {@code fromKey} to {@code toKey}.  If {@code fromKey} and\n     * {@code toKey} are equal, the returned map is empty unless\n     * {@code fromInclusive} and {@code toInclusive} are both true.  The\n     * returned map is backed by this map, so changes in the returned map are\n     * reflected in this map, and vice-versa.  The returned map supports all\n     * optional map operations that this map supports.\n     *\n     * <p>The returned map will throw an {@code IllegalArgumentException}\n     * on an attempt to insert a key outside of its range, or to construct a\n     * submap either of whose endpoints lie outside its range.\n     *\n     * @param fromKey low endpoint of the keys in the returned map\n     * @param fromInclusive {@code true} if the low endpoint\n     *        is to be included in the returned view\n     * @param toKey high endpoint of the keys in the returned map\n     * @param toInclusive {@code true} if the high endpoint\n     *        is to be included in the returned view\n     * @return a view of the portion of this map whose keys range from\n     *         {@code fromKey} to {@code toKey}\n     * @throws ClassCastException if {@code fromKey} and {@code toKey}\n     *         cannot be compared to one another using this map's comparator\n     *         (or, if the map has no comparator, using natural ordering).\n     *         Implementations may, but are not required to, throw this\n     *         exception if {@code fromKey} or {@code toKey}\n     *         cannot be compared to keys currently in the map.\n     * @throws NullPointerException if {@code fromKey} or {@code toKey}\n     *         is null and this map does not permit null keys\n     * @throws IllegalArgumentException if {@code fromKey} is greater than\n     *         {@code toKey}; or if this map itself has a restricted\n     *         range, and {@code fromKey} or {@code toKey} lies\n     *         outside the bounds of the range\n     ",
    "links" : [ ]
  }, {
    "name" : " NavigableMap<K, V> headMap(K toKey, boolean inclusive)",
    "returnType" : "NavigableMap<K, V>",
    "comment" : "\n     * Returns a view of the portion of this map whose keys are less than (or\n     * equal to, if {@code inclusive} is true) {@code toKey}.  The returned\n     * map is backed by this map, so changes in the returned map are reflected\n     * in this map, and vice-versa.  The returned map supports all optional\n     * map operations that this map supports.\n     *\n     * <p>The returned map will throw an {@code IllegalArgumentException}\n     * on an attempt to insert a key outside its range.\n     *\n     * @param toKey high endpoint of the keys in the returned map\n     * @param inclusive {@code true} if the high endpoint\n     *        is to be included in the returned view\n     * @return a view of the portion of this map whose keys are less than\n     *         (or equal to, if {@code inclusive} is true) {@code toKey}\n     * @throws ClassCastException if {@code toKey} is not compatible\n     *         with this map's comparator (or, if the map has no comparator,\n     *         if {@code toKey} does not implement {@link Comparable}).\n     *         Implementations may, but are not required to, throw this\n     *         exception if {@code toKey} cannot be compared to keys\n     *         currently in the map.\n     * @throws NullPointerException if {@code toKey} is null\n     *         and this map does not permit null keys\n     * @throws IllegalArgumentException if this map itself has a\n     *         restricted range, and {@code toKey} lies outside the\n     *         bounds of the range\n     ",
    "links" : [ "Comparable" ]
  }, {
    "name" : " NavigableMap<K, V> tailMap(K fromKey, boolean inclusive)",
    "returnType" : "NavigableMap<K, V>",
    "comment" : "\n     * Returns a view of the portion of this map whose keys are greater than (or\n     * equal to, if {@code inclusive} is true) {@code fromKey}.  The returned\n     * map is backed by this map, so changes in the returned map are reflected\n     * in this map, and vice-versa.  The returned map supports all optional\n     * map operations that this map supports.\n     *\n     * <p>The returned map will throw an {@code IllegalArgumentException}\n     * on an attempt to insert a key outside its range.\n     *\n     * @param fromKey low endpoint of the keys in the returned map\n     * @param inclusive {@code true} if the low endpoint\n     *        is to be included in the returned view\n     * @return a view of the portion of this map whose keys are greater than\n     *         (or equal to, if {@code inclusive} is true) {@code fromKey}\n     * @throws ClassCastException if {@code fromKey} is not compatible\n     *         with this map's comparator (or, if the map has no comparator,\n     *         if {@code fromKey} does not implement {@link Comparable}).\n     *         Implementations may, but are not required to, throw this\n     *         exception if {@code fromKey} cannot be compared to keys\n     *         currently in the map.\n     * @throws NullPointerException if {@code fromKey} is null\n     *         and this map does not permit null keys\n     * @throws IllegalArgumentException if this map itself has a\n     *         restricted range, and {@code fromKey} lies outside the\n     *         bounds of the range\n     ",
    "links" : [ "Comparable" ]
  }, {
    "name" : " SortedMap<K, V> subMap(K fromKey, K toKey)",
    "returnType" : "SortedMap<K, V>",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * <p>Equivalent to {@code subMap(fromKey, true, toKey, false)}.\n     *\n     * @throws ClassCastException       {@inheritDoc}\n     * @throws NullPointerException     {@inheritDoc}\n     * @throws IllegalArgumentException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : " SortedMap<K, V> headMap(K toKey)",
    "returnType" : "SortedMap<K, V>",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * <p>Equivalent to {@code headMap(toKey, false)}.\n     *\n     * @throws ClassCastException       {@inheritDoc}\n     * @throws NullPointerException     {@inheritDoc}\n     * @throws IllegalArgumentException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : " SortedMap<K, V> tailMap(K fromKey)",
    "returnType" : "SortedMap<K, V>",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * <p>Equivalent to {@code tailMap(fromKey, true)}.\n     *\n     * @throws ClassCastException       {@inheritDoc}\n     * @throws NullPointerException     {@inheritDoc}\n     * @throws IllegalArgumentException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : " NavigableMap<K, V> reversed()",
    "returnType" : "NavigableMap<K, V>",
    "comment" : "\n     * {@inheritDoc}\n     * <p>\n     * This method is equivalent to {@link #descendingMap descendingMap}.\n     *\n     * @implSpec\n     * The implementation in this interface returns the result of calling the\n     * {@code descendingMap} method.\n     *\n     * @return a reverse-ordered view of this map, as a {@code NavigableMap}\n     * @since 21\n     ",
    "links" : [ "#descendingMap" ]
  } ],
  "methodNames" : [ " Map.Entry<K, V> lowerEntry(K key)", " K lowerKey(K key)", " Map.Entry<K, V> floorEntry(K key)", " K floorKey(K key)", " Map.Entry<K, V> ceilingEntry(K key)", " K ceilingKey(K key)", " Map.Entry<K, V> higherEntry(K key)", " K higherKey(K key)", " Map.Entry<K, V> firstEntry()", " Map.Entry<K, V> lastEntry()", " Map.Entry<K, V> pollFirstEntry()", " Map.Entry<K, V> pollLastEntry()", " NavigableMap<K, V> descendingMap()", " NavigableSet<K> navigableKeySet()", " NavigableSet<K> descendingKeySet()", " NavigableMap<K, V> subMap(K fromKey, boolean fromInclusive, K toKey, boolean toInclusive)", " NavigableMap<K, V> headMap(K toKey, boolean inclusive)", " NavigableMap<K, V> tailMap(K fromKey, boolean inclusive)", " SortedMap<K, V> subMap(K fromKey, K toKey)", " SortedMap<K, V> headMap(K toKey)", " SortedMap<K, V> tailMap(K fromKey)", " NavigableMap<K, V> reversed()" ],
  "variableNames" : [ ]
}