{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/MotionPredictor.java",
  "packageName" : "android.view",
  "className" : "MotionPredictor",
  "comment" : "\n * Calculate motion predictions.\n *\n * Feed motion events to this class in order to generate predicted future events. The prediction\n * functionality may not be available on all devices: check if a specific source is supported on a\n * given input device using {@link #isPredictionAvailable}.\n *\n * Send all of the events that were received from the system to {@link #record} to generate\n * complete, accurate predictions from {@link #predict}. When processing the returned predictions,\n * make sure to consider all of the {@link MotionEvent#getHistoricalAxisValue historical samples}.\n ",
  "links" : [ "#record", "#isPredictionAvailable", "android.view.MotionEvent#getHistoricalAxisValue", "#predict" ],
  "variables" : [ {
    "name" : "mPtr",
    "type" : "long",
    "comment" : " Pointer to the native object.",
    "links" : [ ]
  }, {
    "name" : "mIsPredictionEnabled",
    "type" : "boolean",
    "comment" : " Device-specific override to enable/disable motion prediction.",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void record(@NonNull MotionEvent event)",
    "returnType" : "void",
    "comment" : "\n     * Record a movement so that in the future, a prediction for the current gesture can be\n     * generated. Only gestures from one input device at a time should be provided to an instance of\n     * MotionPredictor.\n     *\n     * @param event The received event\n     *\n     * @throws IllegalArgumentException if an inconsistent MotionEvent stream is sent.\n     ",
    "links" : [ ]
  }, {
    "name" : "public MotionEvent predict(long predictionTimeNanos)",
    "returnType" : "MotionEvent",
    "comment" : "\n     * Get a predicted event for the gesture that has been provided to {@link #record}.\n     * Predictions may not reach the requested timestamp if the confidence in the prediction results\n     * is low.\n     *\n     * @param predictionTimeNanos The time that the prediction should target, in the\n     * {@link android.os.SystemClock#uptimeMillis} time base, but in nanoseconds.\n     *\n     * @return The predicted motion event, or `null` if predictions are not supported, or not\n     * possible for the current gesture. Be sure to check the historical data in addition to the\n     * latest ({@link MotionEvent#getX getX()}, {@link MotionEvent#getY getY()}) coordinates for\n     * smooth prediction curves.\n     ",
    "links" : [ "android.view.MotionEvent#getX", "#record", "android.view.MotionEvent#getY", "android.os.SystemClock#uptimeMillis" ]
  }, {
    "name" : "public boolean isPredictionAvailable(int deviceId, int source)",
    "returnType" : "boolean",
    "comment" : "\n     * Check whether a device supports motion predictions for a given source type.\n     *\n     * @param deviceId The input device id.\n     * @param source The source of input events.\n     * @return True if the current device supports predictions, false otherwise.\n     *\n     * @see MotionEvent#getDeviceId\n     * @see MotionEvent#getSource\n     ",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeInitialize(int offsetNanos)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeRecord(long nativePtr, MotionEvent event)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native MotionEvent nativePredict(long nativePtr, long predictionTimeNanos)",
    "returnType" : "MotionEvent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativeIsPredictionAvailable(long nativePtr, int deviceId, int source)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeGetNativeMotionPredictorFinalizer()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void record(@NonNull MotionEvent event)", "public MotionEvent predict(long predictionTimeNanos)", "public boolean isPredictionAvailable(int deviceId, int source)", "private static native long nativeInitialize(int offsetNanos)", "private static native void nativeRecord(long nativePtr, MotionEvent event)", "private static native MotionEvent nativePredict(long nativePtr, long predictionTimeNanos)", "private static native boolean nativeIsPredictionAvailable(long nativePtr, int deviceId, int source)", "private static native long nativeGetNativeMotionPredictorFinalizer()" ],
  "variableNames" : [ "mPtr", "mIsPredictionEnabled" ]
}