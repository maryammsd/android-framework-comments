{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/telecom/VideoProfile.java",
  "packageName" : "android.telecom",
  "className" : "VideoProfile",
  "comment" : "\n * Represents attributes of video calls.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "QUALITY_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * \"Unknown\" video quality.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "QUALITY_HIGH",
    "type" : "int",
    "comment" : "\n     * \"High\" video quality.\n     ",
    "links" : [ ]
  }, {
    "name" : "QUALITY_MEDIUM",
    "type" : "int",
    "comment" : "\n     * \"Medium\" video quality.\n     ",
    "links" : [ ]
  }, {
    "name" : "QUALITY_LOW",
    "type" : "int",
    "comment" : "\n     * \"Low\" video quality.\n     ",
    "links" : [ ]
  }, {
    "name" : "QUALITY_DEFAULT",
    "type" : "int",
    "comment" : "\n     * Use default video quality.\n     ",
    "links" : [ ]
  }, {
    "name" : "STATE_AUDIO_ONLY",
    "type" : "int",
    "comment" : "\n     * Used when answering or dialing a call to indicate that the call does not have a video\n     * component.\n     * <p>\n     * Should <b>not</b> be used in comparison checks to determine if a video state represents an\n     * audio-only call.\n     * <p>\n     * The following, for example, is not the correct way to check if a call is audio-only:\n     * <pre>\n     * {@code\n     * // This is the incorrect way to check for an audio-only call.\n     * if (videoState == VideoProfile.STATE_AUDIO_ONLY) {\n     *      // Handle audio-only call.\n     * }\n     * }\n     * </pre>\n     * <p>\n     * Instead, use the {@link VideoProfile#isAudioOnly(int)} helper function to check if a\n     * video state represents an audio-only call:\n     * <pre>\n     * {@code\n     * // This is the correct way to check for an audio-only call.\n     * if (VideoProfile.isAudioOnly(videoState)) {\n     *      // Handle audio-only call.\n     * }\n     * }\n     * </pre>\n     ",
    "links" : [ "android.telecom.VideoProfile#isAudioOnly(int)" ]
  }, {
    "name" : "STATE_TX_ENABLED",
    "type" : "int",
    "comment" : "\n     * Video transmission is enabled.\n     ",
    "links" : [ ]
  }, {
    "name" : "STATE_RX_ENABLED",
    "type" : "int",
    "comment" : "\n     * Video reception is enabled.\n     ",
    "links" : [ ]
  }, {
    "name" : "STATE_BIDIRECTIONAL",
    "type" : "int",
    "comment" : "\n     * Video signal is bi-directional.\n     ",
    "links" : [ ]
  }, {
    "name" : "STATE_PAUSED",
    "type" : "int",
    "comment" : "\n     * Video is paused.\n     ",
    "links" : [ ]
  }, {
    "name" : "mVideoState",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mQuality",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<VideoProfile>",
    "comment" : "\n     * Responsible for creating VideoProfile objects from deserialized Parcels.\n     *",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getVideoState()",
    "returnType" : "int",
    "comment" : "\n     * The video state of the call.\n     * Valid values: {@link VideoProfile#STATE_AUDIO_ONLY},\n     * {@link VideoProfile#STATE_BIDIRECTIONAL},\n     * {@link VideoProfile#STATE_TX_ENABLED},\n     * {@link VideoProfile#STATE_RX_ENABLED},\n     * {@link VideoProfile#STATE_PAUSED}.\n     ",
    "links" : [ "android.telecom.VideoProfile#STATE_BIDIRECTIONAL", "android.telecom.VideoProfile#STATE_RX_ENABLED", "android.telecom.VideoProfile#STATE_AUDIO_ONLY", "android.telecom.VideoProfile#STATE_TX_ENABLED", "android.telecom.VideoProfile#STATE_PAUSED" ]
  }, {
    "name" : "public int getQuality()",
    "returnType" : "int",
    "comment" : "\n     * The desired video quality for the call.\n     * Valid values: {@link VideoProfile#QUALITY_HIGH}, {@link VideoProfile#QUALITY_MEDIUM},\n     * {@link VideoProfile#QUALITY_LOW}, {@link VideoProfile#QUALITY_DEFAULT}.\n     ",
    "links" : [ "android.telecom.VideoProfile#QUALITY_MEDIUM", "android.telecom.VideoProfile#QUALITY_DEFAULT", "android.telecom.VideoProfile#QUALITY_LOW", "android.telecom.VideoProfile#QUALITY_HIGH" ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "\n     * Describe the kinds of special objects contained in this Parcelable's\n     * marshalled representation.\n     *\n     * @return a bitmask indicating the set of special object types marshalled\n     * by the Parcelable.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "\n     * Flatten this object in to a Parcel.\n     *\n     * @param dest  The Parcel in which the object should be written.\n     * @param flags Additional flags about how the object should be written.\n     *              May be 0 or {@link #PARCELABLE_WRITE_RETURN_VALUE}.\n     ",
    "links" : [ "#PARCELABLE_WRITE_RETURN_VALUE" ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String videoStateToString(@VideoState int videoState)",
    "returnType" : "String",
    "comment" : "\n     * Generates a string representation of a video state.\n     *\n     * @param videoState The video state.\n     * @return String representation of the video state.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isAudioOnly(@VideoState int videoState)",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether the video state is audio only.\n     * <p>\n     * Note: Considers only whether either both the {@link #STATE_RX_ENABLED} or\n     * {@link #STATE_TX_ENABLED} bits are off, but not {@link #STATE_PAUSED}.\n     *\n     * @param videoState The video state.\n     * @return {@code True} if the video state is audio only, {@code false} otherwise.\n     ",
    "links" : [ "#STATE_RX_ENABLED", "#STATE_PAUSED", "#STATE_TX_ENABLED" ]
  }, {
    "name" : "public static boolean isVideo(@VideoState int videoState)",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether video transmission or reception is enabled for a video state.\n     *\n     * @param videoState The video state.\n     * @return {@code True} if video transmission or reception is enabled, {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isTransmissionEnabled(@VideoState int videoState)",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether the video state has video transmission enabled.\n     *\n     * @param videoState The video state.\n     * @return {@code True} if video transmission is enabled, {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isReceptionEnabled(@VideoState int videoState)",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether the video state has video reception enabled.\n     *\n     * @param videoState The video state.\n     * @return {@code True} if video reception is enabled, {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isBidirectional(@VideoState int videoState)",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether the video state is bi-directional.\n     *\n     * @param videoState The video state.\n     * @return {@code True} if the video is bi-directional, {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isPaused(@VideoState int videoState)",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether the video state is paused.\n     *\n     * @param videoState The video state.\n     * @return {@code True} if the video is paused, {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean hasState(@VideoState int videoState, @VideoState int state)",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates if a specified state is set in a videoState bit-mask.\n     *\n     * @param videoState The video state bit-mask.\n     * @param state The state to check.\n     * @return {@code True} if the state is set.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int getVideoState()", "public int getQuality()", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)", "public String toString()", "public static String videoStateToString(@VideoState int videoState)", "public static boolean isAudioOnly(@VideoState int videoState)", "public static boolean isVideo(@VideoState int videoState)", "public static boolean isTransmissionEnabled(@VideoState int videoState)", "public static boolean isReceptionEnabled(@VideoState int videoState)", "public static boolean isBidirectional(@VideoState int videoState)", "public static boolean isPaused(@VideoState int videoState)", "private static boolean hasState(@VideoState int videoState, @VideoState int state)" ],
  "variableNames" : [ "QUALITY_UNKNOWN", "QUALITY_HIGH", "QUALITY_MEDIUM", "QUALITY_LOW", "QUALITY_DEFAULT", "STATE_AUDIO_ONLY", "STATE_TX_ENABLED", "STATE_RX_ENABLED", "STATE_BIDIRECTIONAL", "STATE_PAUSED", "mVideoState", "mQuality", "CREATOR" ]
}