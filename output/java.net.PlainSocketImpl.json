{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/net/PlainSocketImpl.java",
  "packageName" : "java.net",
  "className" : "PlainSocketImpl",
  "comment" : "",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "protected void setOption(SocketOption<T> name, T value) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected T getOption(SocketOption<T> name) throws IOException",
    "returnType" : "T",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void socketSetOption(int opt, Object val) throws SocketException",
    "returnType" : "void",
    "comment" : " BEGIN Android-changed: Rewrote on top of Libcore.io.",
    "links" : [ ]
  }, {
    "name" : " void socketCreate(boolean isStream) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void socketConnect(InetAddress address, int port, int timeout) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void socketBind(InetAddress address, int port) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void socketListen(int count) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void socketAccept(SocketImpl s) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " int socketAvailable() throws IOException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void socketClose0(boolean useDeferredClose) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private FileDescriptor getMarkerFD() throws SocketException",
    "returnType" : "FileDescriptor",
    "comment" : "\n     * Create the marker file descriptor by establishing a loopback connection which we shutdown but\n     * do not close the fd. The result is an fd that can be used for read/write.\n     *\n     * The purpose is to keep hold of the raw fd handle until we are sure it is not used in any\n     * thread. Otherwise if we close the file descriptor directly, the system might reuse the raw fd\n     * number and threads holding old fd value might behave incorrectly.\n     ",
    "links" : [ ]
  }, {
    "name" : " void socketShutdown(int howto) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void socketSetOption0(int cmd, Object value) throws SocketException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " Object socketGetOption(int opt) throws SocketException",
    "returnType" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void socketSendUrgentData(int data) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "protected void setOption(SocketOption<T> name, T value) throws IOException", "protected T getOption(SocketOption<T> name) throws IOException", "protected void socketSetOption(int opt, Object val) throws SocketException", " void socketCreate(boolean isStream) throws IOException", " void socketConnect(InetAddress address, int port, int timeout) throws IOException", " void socketBind(InetAddress address, int port) throws IOException", " void socketListen(int count) throws IOException", " void socketAccept(SocketImpl s) throws IOException", " int socketAvailable() throws IOException", " void socketClose0(boolean useDeferredClose) throws IOException", "private FileDescriptor getMarkerFD() throws SocketException", " void socketShutdown(int howto) throws IOException", " void socketSetOption0(int cmd, Object value) throws SocketException", " Object socketGetOption(int opt) throws SocketException", " void socketSendUrgentData(int data) throws IOException" ],
  "variableNames" : [ ]
}