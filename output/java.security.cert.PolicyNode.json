{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/security/cert/PolicyNode.java",
  "packageName" : "java.security.cert",
  "className" : "PolicyNode",
  "comment" : "\n * An immutable valid policy tree node as defined by the PKIX certification\n * path validation algorithm.\n *\n * <p>One of the outputs of the PKIX certification path validation\n * algorithm is a valid policy tree, which includes the policies that\n * were determined to be valid, how this determination was reached,\n * and any policy qualifiers encountered. This tree is of depth\n * <i>n</i>, where <i>n</i> is the length of the certification\n * path that has been validated.\n *\n * <p>Most applications will not need to examine the valid policy tree.\n * They can achieve their policy processing goals by setting the\n * policy-related parameters in {@code PKIXParameters}. However,\n * the valid policy tree is available for more sophisticated applications,\n * especially those that process policy qualifiers.\n *\n * <p>{@link PKIXCertPathValidatorResult#getPolicyTree()\n * PKIXCertPathValidatorResult.getPolicyTree} returns the root node of the\n * valid policy tree. The tree can be traversed using the\n * {@link #getChildren getChildren} and {@link #getParent getParent} methods.\n * Data about a particular node can be retrieved using other methods of\n * {@code PolicyNode}.\n *\n * <p><b>Concurrent Access</b>\n * <p>All {@code PolicyNode} objects must be immutable and\n * thread-safe. Multiple threads may concurrently invoke the methods defined\n * in this class on a single {@code PolicyNode} object (or more than one)\n * with no ill effects. This stipulation applies to all public fields and\n * methods of this class and any added or overridden by subclasses.\n *\n * @since       1.4\n * @author      Sean Mullan\n ",
  "links" : [ "#getParent", "java.security.cert.PKIXCertPathValidatorResult#getPolicyTree()", "#getChildren" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " PolicyNode getParent()",
    "returnType" : "PolicyNode",
    "comment" : "\n     * Returns the parent of this node, or {@code null} if this is the\n     * root node.\n     *\n     * @return the parent of this node, or {@code null} if this is the\n     * root node\n     ",
    "links" : [ ]
  }, {
    "name" : " Iterator<? extends PolicyNode> getChildren()",
    "returnType" : "Iterator<? extends PolicyNode>",
    "comment" : "\n     * Returns an iterator over the children of this node. Any attempts to\n     * modify the children of this node through the\n     * {@code Iterator}'s remove method must throw an\n     * {@code UnsupportedOperationException}.\n     *\n     * @return an iterator over the children of this node\n     ",
    "links" : [ ]
  }, {
    "name" : " int getDepth()",
    "returnType" : "int",
    "comment" : "\n     * Returns the depth of this node in the valid policy tree.\n     *\n     * @return the depth of this node (0 for the root node, 1 for its\n     * children, and so on)\n     ",
    "links" : [ ]
  }, {
    "name" : " String getValidPolicy()",
    "returnType" : "String",
    "comment" : "\n     * Returns the valid policy represented by this node.\n     *\n     * @return the {@code String} OID of the valid policy\n     * represented by this node. For the root node, this method always returns\n     * the special anyPolicy OID: \"2.5.29.32.0\".\n     ",
    "links" : [ ]
  }, {
    "name" : " Set<? extends PolicyQualifierInfo> getPolicyQualifiers()",
    "returnType" : "Set<? extends PolicyQualifierInfo>",
    "comment" : "\n     * Returns the set of policy qualifiers associated with the\n     * valid policy represented by this node.\n     *\n     * @return an immutable {@code Set} of\n     * {@code PolicyQualifierInfo}s. For the root node, this\n     * is always an empty {@code Set}.\n     ",
    "links" : [ ]
  }, {
    "name" : " Set<String> getExpectedPolicies()",
    "returnType" : "Set<String>",
    "comment" : "\n     * Returns the set of expected policies that would satisfy this\n     * node's valid policy in the next certificate to be processed.\n     *\n     * @return an immutable {@code Set} of expected policy\n     * {@code String} OIDs. For the root node, this method\n     * always returns a {@code Set} with one element, the\n     * special anyPolicy OID: \"2.5.29.32.0\".\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean isCritical()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the criticality indicator of the certificate policy extension\n     * in the most recently processed certificate.\n     *\n     * @return {@code true} if extension marked critical,\n     * {@code false} otherwise. For the root node, {@code false}\n     * is always returned.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " PolicyNode getParent()", " Iterator<? extends PolicyNode> getChildren()", " int getDepth()", " String getValidPolicy()", " Set<? extends PolicyQualifierInfo> getPolicyQualifiers()", " Set<String> getExpectedPolicies()", " boolean isCritical()" ],
  "variableNames" : [ ]
}