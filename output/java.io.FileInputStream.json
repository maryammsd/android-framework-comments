{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/io/FileInputStream.java",
  "packageName" : "java.io",
  "className" : "FileInputStream",
  "comment" : "\n * A {@code FileInputStream} obtains input bytes\n * from a file in a file system. What files\n * are  available depends on the host environment.\n *\n * <p>{@code FileInputStream} is meant for reading streams of raw bytes\n * such as image data. For reading streams of characters, consider using\n * {@code FileReader}.\n *\n * @apiNote\n * To release resources used by this stream {@link #close} should be called\n * directly or by try-with-resources. Subclasses are responsible for the cleanup\n * of resources acquired by the subclass.\n * Subclasses that override {@link #finalize} in order to perform cleanup\n * should be modified to use alternative cleanup mechanisms such as\n * {@link java.lang.ref.Cleaner} and remove the overriding {@code finalize} method.\n *\n * @implSpec\n * If this FileInputStream has been subclassed and the {@link #close}\n * method has been overridden, the {@link #close} method will be\n * called when the FileInputStream is unreachable.\n * Otherwise, it is implementation specific how the resource cleanup described in\n * {@link #close} is performed.\n *\n * @author  Arthur van Hoff\n * @see     java.io.File\n * @see     java.io.FileDescriptor\n * @see     java.io.FileOutputStream\n * @see     java.nio.file.Files#newInputStream\n * @since   1.0\n ",
  "links" : [ "#finalize", "java.lang.ref.Cleaner", "#close" ],
  "variables" : [ {
    "name" : "DEFAULT_BUFFER_SIZE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "fd",
    "type" : "FileDescriptor",
    "comment" : " Android-added: @ReachabilitySensitive",
    "links" : [ ]
  }, {
    "name" : "path",
    "type" : "String",
    "comment" : "\n     * The path of the referenced file\n     * (null if the stream is created with a file descriptor)\n     ",
    "links" : [ ]
  }, {
    "name" : "channel",
    "type" : "FileChannel",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "closeLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "closed",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "isFdOwner",
    "type" : "boolean",
    "comment" : " Android-added: Field for tracking whether the stream owns the underlying FileDescriptor.",
    "links" : [ ]
  }, {
    "name" : "guard",
    "type" : "CloseGuard",
    "comment" : " Android-added: CloseGuard support.",
    "links" : [ ]
  }, {
    "name" : "tracker",
    "type" : "IoTracker",
    "comment" : " Android-added: Tracking of unbuffered I/O.",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int read() throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Reads a byte of data from this input stream. This method blocks\n     * if no input is yet available.\n     *\n     * @return     the next byte of data, or {@code -1} if the end of the\n     *             file is reached.\n     * @throws     IOException  if an I/O error occurs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int read(byte[] b) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Reads up to {@code b.length} bytes of data from this input\n     * stream into an array of bytes. This method blocks until some input\n     * is available.\n     *\n     * @param      b   the buffer into which the data is read.\n     * @return     the total number of bytes read into the buffer, or\n     *             {@code -1} if there is no more data because the end of\n     *             the file has been reached.\n     * @throws     IOException  if an I/O error occurs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int read(byte[] b, int off, int len) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Reads up to {@code len} bytes of data from this input stream\n     * into an array of bytes. If {@code len} is not zero, the method\n     * blocks until some input is available; otherwise, no\n     * bytes are read and {@code 0} is returned.\n     *\n     * @param      b     the buffer into which the data is read.\n     * @param      off   the start offset in the destination array {@code b}\n     * @param      len   the maximum number of bytes read.\n     * @return     the total number of bytes read into the buffer, or\n     *             {@code -1} if there is no more data because the end of\n     *             the file has been reached.\n     * @throws     NullPointerException If {@code b} is {@code null}.\n     * @throws     IndexOutOfBoundsException If {@code off} is negative,\n     *             {@code len} is negative, or {@code len} is greater than\n     *             {@code b.length - off}\n     * @throws     IOException  if an I/O error occurs.\n     ",
    "links" : [ ]
  }, {
    "name" : "private long length() throws IOException",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native long length0() throws IOException",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private long position() throws IOException",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native long position0() throws IOException",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public long skip(long n) throws IOException",
    "returnType" : "long",
    "comment" : " BEGIN Android-changed: skip(long) implementation changed from bare native.",
    "links" : [ ]
  }, {
    "name" : "private native long skip0(long n) throws IOException, UseManualSkipException",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int available() throws IOException",
    "returnType" : "int",
    "comment" : " BEGIN Android-changed: available() implementation changed from bare native.",
    "links" : [ ]
  }, {
    "name" : "private native int available0() throws IOException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void close() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Closes this file input stream and releases any system resources\n     * associated with the stream.\n     *\n     * <p> If this stream has an associated channel then the channel is closed\n     * as well.\n     *\n     * @apiNote\n     * Overriding {@link #close} to perform cleanup actions is reliable\n     * only when called directly or when called by try-with-resources.\n     * Do not depend on finalization to invoke {@code close};\n     * finalization is not reliable and is deprecated.\n     * If cleanup of native resources is needed, other mechanisms such as\n     * {@linkplain java.lang.ref.Cleaner} should be used.\n     *\n     * @throws     IOException  if an I/O error occurs.\n     *\n     * @revised 1.4\n     ",
    "links" : [ "#close" ]
  }, {
    "name" : "public final FileDescriptor getFD() throws IOException",
    "returnType" : "FileDescriptor",
    "comment" : "\n     * Returns the {@code FileDescriptor}\n     * object  that represents the connection to\n     * the actual file in the file system being\n     * used by this {@code FileInputStream}.\n     *\n     * @return     the file descriptor object associated with this stream.\n     * @throws     IOException  if an I/O error occurs.\n     * @see        java.io.FileDescriptor\n     ",
    "links" : [ ]
  }, {
    "name" : "public FileChannel getChannel()",
    "returnType" : "FileChannel",
    "comment" : "\n     * Returns the unique {@link java.nio.channels.FileChannel FileChannel}\n     * object associated with this file input stream.\n     *\n     * <p> The initial {@link java.nio.channels.FileChannel#position()\n     * position} of the returned channel will be equal to the\n     * number of bytes read from the file so far.  Reading bytes from this\n     * stream will increment the channel's position.  Changing the channel's\n     * position, either explicitly or by reading, will change this stream's\n     * file position.\n     *\n     * @return  the file channel associated with this file input stream\n     *\n     * @since 1.4\n     ",
    "links" : [ "java.nio.channels.FileChannel#position()", "java.nio.channels.FileChannel" ]
  }, {
    "name" : "protected void finalize() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Ensures that the <code>close</code> method of this file input stream is\n     * called when there are no more references to it.\n     *\n     * @exception  IOException  if an I/O error occurs.\n     * @see        java.io.FileInputStream#close()\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int read() throws IOException", "public int read(byte[] b) throws IOException", "public int read(byte[] b, int off, int len) throws IOException", "private long length() throws IOException", "private native long length0() throws IOException", "private long position() throws IOException", "private native long position0() throws IOException", "public long skip(long n) throws IOException", "private native long skip0(long n) throws IOException, UseManualSkipException", "public int available() throws IOException", "private native int available0() throws IOException", "public void close() throws IOException", "public final FileDescriptor getFD() throws IOException", "public FileChannel getChannel()", "protected void finalize() throws IOException" ],
  "variableNames" : [ "DEFAULT_BUFFER_SIZE", "fd", "path", "channel", "closeLock", "closed", "isFdOwner", "guard", "tracker" ]
}