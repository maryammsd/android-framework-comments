{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/system/virtualmachine/VirtualMachineConfig.java",
  "packageName" : "android.system.virtualmachine",
  "className" : "VirtualMachineConfig",
  "comment" : "\n * Represents a configuration of a virtual machine. A configuration consists of hardware\n * configurations like the number of CPUs and the size of RAM, and software configurations like the\n * payload to run on the virtual machine.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EMPTY_STRING_ARRAY",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VERSION",
    "type" : "int",
    "comment" : " These define the schema of the config file persisted on disk.",
    "links" : [ ]
  }, {
    "name" : "KEY_VERSION",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_PACKAGENAME",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_APKPATH",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_PAYLOADCONFIGPATH",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_CUSTOMIMAGECONFIG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_PAYLOADBINARYNAME",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_DEBUGLEVEL",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_PROTECTED_VM",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_MEMORY_BYTES",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_CPU_TOPOLOGY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_ENCRYPTED_STORAGE_BYTES",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_VM_OUTPUT_CAPTURED",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_VM_CONSOLE_INPUT_SUPPORTED",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_VENDOR_DISK_IMAGE_PATH",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_OS",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_EXTRA_APKS",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG_LEVEL_NONE",
    "type" : "int",
    "comment" : "\n     * Not debuggable at all. No log is exported from the VM. Debugger can't be attached to the app\n     * process running in the VM. This is the default level.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "DEBUG_LEVEL_FULL",
    "type" : "int",
    "comment" : "\n     * Fully debuggable. All logs (both logcat and kernel message) are exported. All processes\n     * running in the VM can be attached to the debugger. Rooting is possible.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CPU_TOPOLOGY_ONE_CPU",
    "type" : "int",
    "comment" : "\n     * Run VM with 1 vCPU. This is the default option, usually the fastest to boot and consuming the\n     * least amount of resources. Typically the best option for small or ephemeral workloads.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CPU_TOPOLOGY_MATCH_HOST",
    "type" : "int",
    "comment" : "\n     * Run VM with vCPU topology matching the physical CPU topology of the host. Usually takes\n     * longer to boot and consumes more resources compared to a single vCPU. Typically a good option\n     * for long-running workloads that benefit from parallel execution.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mPackageName",
    "type" : "String",
    "comment" : " Name of a package whose primary APK contains the VM payload. ",
    "links" : [ ]
  }, {
    "name" : "mApkPath",
    "type" : "String",
    "comment" : " Absolute path to the APK file containing the VM payload. ",
    "links" : [ ]
  }, {
    "name" : "mExtraApks",
    "type" : "List<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDebugLevel",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProtectedVm",
    "type" : "boolean",
    "comment" : "\n     * Whether to run the VM in protected mode, so the host can't access its memory.\n     ",
    "links" : [ ]
  }, {
    "name" : "mMemoryBytes",
    "type" : "long",
    "comment" : "\n     * The amount of RAM to give the VM, in bytes. If this is 0 or negative the default will be\n     * used.\n     ",
    "links" : [ ]
  }, {
    "name" : "mCpuTopology",
    "type" : "int",
    "comment" : " CPU topology configuration of the VM. ",
    "links" : [ ]
  }, {
    "name" : "mPayloadConfigPath",
    "type" : "String",
    "comment" : "\n     * Path within the APK to the payload config file that defines software aspects of the VM.\n     ",
    "links" : [ ]
  }, {
    "name" : "mPayloadBinaryName",
    "type" : "String",
    "comment" : " Name of the payload binary file within the APK that will be executed within the VM. ",
    "links" : [ ]
  }, {
    "name" : "mCustomImageConfig",
    "type" : "VirtualMachineCustomImageConfig",
    "comment" : " The custom image config file to launch the custom VM. ",
    "links" : [ ]
  }, {
    "name" : "mEncryptedStorageBytes",
    "type" : "long",
    "comment" : " The size of storage in bytes. 0 indicates that encryptedStorage is not required ",
    "links" : [ ]
  }, {
    "name" : "mVmOutputCaptured",
    "type" : "boolean",
    "comment" : " Whether the app can read console and log output. ",
    "links" : [ ]
  }, {
    "name" : "mVmConsoleInputSupported",
    "type" : "boolean",
    "comment" : " Whether the app can write console input to the VM ",
    "links" : [ ]
  }, {
    "name" : "mVendorDiskImage",
    "type" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOs",
    "type" : "String",
    "comment" : " OS name of the VM using payload binaries. ",
    "links" : [ ]
  }, {
    "name" : "MICRODROID",
    "type" : "String",
    "comment" : "\n     * OS name of microdroid using microdroid kernel.\n     *\n     * @see Builder#setOs\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " static VirtualMachineConfig from(@NonNull File file) throws VirtualMachineException",
    "returnType" : "VirtualMachineConfig",
    "comment" : " Loads a config from a file. ",
    "links" : [ ]
  }, {
    "name" : " static VirtualMachineConfig from(@NonNull ParcelFileDescriptor fd) throws VirtualMachineException",
    "returnType" : "VirtualMachineConfig",
    "comment" : " Loads a config from a {@link ParcelFileDescriptor}. ",
    "links" : [ "android.os.ParcelFileDescriptor" ]
  }, {
    "name" : "private static VirtualMachineConfig fromInputStream(@NonNull InputStream input) throws IOException, VirtualMachineException",
    "returnType" : "VirtualMachineConfig",
    "comment" : " Loads a config from a stream, for example a file. ",
    "links" : [ ]
  }, {
    "name" : "private static VirtualMachineConfig fromPersistableBundle(PersistableBundle b)",
    "returnType" : "VirtualMachineConfig",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void serialize(@NonNull File file) throws VirtualMachineException",
    "returnType" : "void",
    "comment" : " Persists this config to a file. ",
    "links" : [ ]
  }, {
    "name" : "private void serializeOutputStream(@NonNull OutputStream output) throws IOException",
    "returnType" : "void",
    "comment" : " Persists this config to a stream, for example a file. ",
    "links" : [ ]
  }, {
    "name" : "public String getApkPath()",
    "returnType" : "String",
    "comment" : "\n     * Returns the absolute path of the APK which should contain the binary payload that will\n     * execute within the VM. Returns null if no specific path has been set.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<String> getExtraApks()",
    "returnType" : "List<String>",
    "comment" : "\n     * Returns the package names of any extra APKs that have been requested for the VM. They are\n     * returned in the order in which they were added via {@link Builder#addExtraApk}.\n     *\n     * @hide\n     ",
    "links" : [ "#addExtraApk" ]
  }, {
    "name" : "public String getPayloadConfigPath()",
    "returnType" : "String",
    "comment" : "\n     * Returns the path within the APK to the payload config file that defines software aspects of\n     * the VM.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public VirtualMachineCustomImageConfig getCustomImageConfig()",
    "returnType" : "VirtualMachineCustomImageConfig",
    "comment" : "\n     * Returns the custom image config to launch the custom VM.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getPayloadBinaryName()",
    "returnType" : "String",
    "comment" : "\n     * Returns the name of the payload binary file, in the {@code lib/<ABI>} directory of the APK,\n     * that will be executed within the VM.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getDebugLevel()",
    "returnType" : "int",
    "comment" : "\n     * Returns the debug level for the VM.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isProtectedVm()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the VM's memory will be protected from the host.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getMemoryBytes()",
    "returnType" : "long",
    "comment" : "\n     * Returns the amount of RAM that will be made available to the VM, or 0 if the default size\n     * will be used.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getCpuTopology()",
    "returnType" : "int",
    "comment" : "\n     * Returns the CPU topology configuration of the VM.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isEncryptedStorageEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether encrypted storage is enabled or not.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getEncryptedStorageBytes()",
    "returnType" : "long",
    "comment" : "\n     * Returns the size of encrypted storage (in bytes) available in the VM, or 0 if encrypted\n     * storage is not enabled\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isVmOutputCaptured()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the app can read the VM console or log output. If not, the VM output is\n     * automatically forwarded to the host logcat.\n     *\n     * @see Builder#setVmOutputCaptured\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isVmConsoleInputSupported()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the app can write to the VM console.\n     *\n     * @see Builder#setVmConsoleInputSupported\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getOs()",
    "returnType" : "String",
    "comment" : "\n     * Returns the OS of the VM.\n     *\n     * @see Builder#setOs\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isCompatibleWith(@NonNull VirtualMachineConfig other)",
    "returnType" : "boolean",
    "comment" : "\n     * Tests if this config is compatible with other config. Being compatible means that the configs\n     * can be interchangeably used for the same virtual machine; they do not change the VM identity\n     * or secrets. Such changes include varying the number of CPUs or the size of the RAM. Changes\n     * that would alter the identity of the VM (e.g. using a different payload or changing the debug\n     * mode) are considered incompatible.\n     *\n     * @see VirtualMachine#setConfig\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private ParcelFileDescriptor openOrNull(File file, int mode)",
    "returnType" : "ParcelFileDescriptor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " VirtualMachineRawConfig toVsRawConfig() throws IllegalStateException, IOException",
    "returnType" : "VirtualMachineRawConfig",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " VirtualMachineAppConfig toVsConfig(@NonNull PackageManager packageManager) throws VirtualMachineException",
    "returnType" : "VirtualMachineAppConfig",
    "comment" : "\n     * Converts this config object into the parcelable type used when creating a VM via the\n     * virtualization service. Notice that the files are not passed as paths, but as file\n     * descriptors because the service doesn't accept paths as it might not have permission to open\n     * app-owned files and that could be abused to run a VM with software that the calling\n     * application doesn't own.\n     ",
    "links" : [ ]
  }, {
    "name" : "private String findPayloadApk(PackageManager packageManager) throws VirtualMachineException",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int bytesToMebiBytes(long mMemoryBytes)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ " static VirtualMachineConfig from(@NonNull File file) throws VirtualMachineException", " static VirtualMachineConfig from(@NonNull ParcelFileDescriptor fd) throws VirtualMachineException", "private static VirtualMachineConfig fromInputStream(@NonNull InputStream input) throws IOException, VirtualMachineException", "private static VirtualMachineConfig fromPersistableBundle(PersistableBundle b)", " void serialize(@NonNull File file) throws VirtualMachineException", "private void serializeOutputStream(@NonNull OutputStream output) throws IOException", "public String getApkPath()", "public List<String> getExtraApks()", "public String getPayloadConfigPath()", "public VirtualMachineCustomImageConfig getCustomImageConfig()", "public String getPayloadBinaryName()", "public int getDebugLevel()", "public boolean isProtectedVm()", "public long getMemoryBytes()", "public int getCpuTopology()", "public boolean isEncryptedStorageEnabled()", "public long getEncryptedStorageBytes()", "public boolean isVmOutputCaptured()", "public boolean isVmConsoleInputSupported()", "public String getOs()", "public boolean isCompatibleWith(@NonNull VirtualMachineConfig other)", "private ParcelFileDescriptor openOrNull(File file, int mode)", " VirtualMachineRawConfig toVsRawConfig() throws IllegalStateException, IOException", " VirtualMachineAppConfig toVsConfig(@NonNull PackageManager packageManager) throws VirtualMachineException", "private String findPayloadApk(PackageManager packageManager) throws VirtualMachineException", "private int bytesToMebiBytes(long mMemoryBytes)" ],
  "variableNames" : [ "TAG", "EMPTY_STRING_ARRAY", "VERSION", "KEY_VERSION", "KEY_PACKAGENAME", "KEY_APKPATH", "KEY_PAYLOADCONFIGPATH", "KEY_CUSTOMIMAGECONFIG", "KEY_PAYLOADBINARYNAME", "KEY_DEBUGLEVEL", "KEY_PROTECTED_VM", "KEY_MEMORY_BYTES", "KEY_CPU_TOPOLOGY", "KEY_ENCRYPTED_STORAGE_BYTES", "KEY_VM_OUTPUT_CAPTURED", "KEY_VM_CONSOLE_INPUT_SUPPORTED", "KEY_VENDOR_DISK_IMAGE_PATH", "KEY_OS", "KEY_EXTRA_APKS", "DEBUG_LEVEL_NONE", "DEBUG_LEVEL_FULL", "CPU_TOPOLOGY_ONE_CPU", "CPU_TOPOLOGY_MATCH_HOST", "mPackageName", "mApkPath", "mExtraApks", "mDebugLevel", "mProtectedVm", "mMemoryBytes", "mCpuTopology", "mPayloadConfigPath", "mPayloadBinaryName", "mCustomImageConfig", "mEncryptedStorageBytes", "mVmOutputCaptured", "mVmConsoleInputSupported", "mVendorDiskImage", "mOs", "MICRODROID" ]
}