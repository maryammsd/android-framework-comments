{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/location/GnssCapabilities.java",
  "packageName" : "android.location",
  "className" : "GnssCapabilities",
  "comment" : "\n * GNSS chipset capabilities.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TOP_HAL_CAPABILITY_SCHEDULING",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TOP_HAL_CAPABILITY_MSB",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TOP_HAL_CAPABILITY_MSA",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TOP_HAL_CAPABILITY_SINGLE_SHOT",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TOP_HAL_CAPABILITY_ON_DEMAND_TIME",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TOP_HAL_CAPABILITY_GEOFENCING",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TOP_HAL_CAPABILITY_MEASUREMENTS",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TOP_HAL_CAPABILITY_NAV_MESSAGES",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TOP_HAL_CAPABILITY_LOW_POWER_MODE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TOP_HAL_CAPABILITY_SATELLITE_BLOCKLIST",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TOP_HAL_CAPABILITY_MEASUREMENT_CORRECTIONS",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TOP_HAL_CAPABILITY_ANTENNA_INFO",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TOP_HAL_CAPABILITY_CORRELATION_VECTOR",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TOP_HAL_CAPABILITY_SATELLITE_PVT",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TOP_HAL_CAPABILITY_MEASUREMENT_CORRECTIONS_FOR_DRIVING",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TOP_HAL_CAPABILITY_ACCUMULATED_DELTA_RANGE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "SUB_HAL_MEASUREMENT_CORRECTIONS_CAPABILITY_LOS_SATS",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "SUB_HAL_MEASUREMENT_CORRECTIONS_CAPABILITY_EXCESS_PATH_LENGTH",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "SUB_HAL_MEASUREMENT_CORRECTIONS_CAPABILITY_REFLECTING_PLANE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "SUB_HAL_POWER_CAPABILITY_TOTAL",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "SUB_HAL_POWER_CAPABILITY_SINGLEBAND_TRACKING",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "SUB_HAL_POWER_CAPABILITY_MULTIBAND_TRACKING",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "SUB_HAL_POWER_CAPABILITY_SINGLEBAND_ACQUISITION",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "SUB_HAL_POWER_CAPABILITY_MULTIBAND_ACQUISITION",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "SUB_HAL_POWER_CAPABILITY_OTHER_MODES",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CAPABILITY_UNKNOWN",
    "type" : "int",
    "comment" : " The capability is unknown to be supported or not. ",
    "links" : [ ]
  }, {
    "name" : "CAPABILITY_SUPPORTED",
    "type" : "int",
    "comment" : " The capability is supported. ",
    "links" : [ ]
  }, {
    "name" : "CAPABILITY_UNSUPPORTED",
    "type" : "int",
    "comment" : " The capability is not supported. ",
    "links" : [ ]
  }, {
    "name" : "mTopFlags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsAdrCapabilityKnown",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMeasurementCorrectionsFlags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPowerFlags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGnssSignalTypes",
    "type" : "List<GnssSignalType>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<GnssCapabilities>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static GnssCapabilities empty()",
    "returnType" : "GnssCapabilities",
    "comment" : "\n     * Returns an empty GnssCapabilities object.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public GnssCapabilities withTopHalFlags(@TopHalCapabilityFlags int flags, boolean isAdrCapabilityKnown)",
    "returnType" : "GnssCapabilities",
    "comment" : "\n     * Returns a new GnssCapabilities object with top hal values set from the given flags.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public GnssCapabilities withSubHalMeasurementCorrectionsFlags(@SubHalMeasurementCorrectionsCapabilityFlags int flags)",
    "returnType" : "GnssCapabilities",
    "comment" : "\n     * Returns a new GnssCapabilities object with gnss measurement corrections sub hal values set\n     * from the given flags.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public GnssCapabilities withSubHalPowerFlags(@SubHalPowerCapabilityFlags int flags)",
    "returnType" : "GnssCapabilities",
    "comment" : "\n     * Returns a new GnssCapabilities object with gnss measurement corrections sub hal values set\n     * from the given flags.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public GnssCapabilities withSignalTypes(@NonNull List<GnssSignalType> gnssSignalTypes)",
    "returnType" : "GnssCapabilities",
    "comment" : "\n     * Returns a new GnssCapabilities object with a list of GnssSignalType.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasScheduling()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if GNSS chipset supports scheduling, {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasMsb()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if GNSS chipset supports Mobile Station Based assistance, {@code false}\n     * otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasMsa()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if GNSS chipset supports Mobile Station Assisted assitance,\n     * {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasSingleShotFix()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if GNSS chipset supports single shot locating, {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasOnDemandTime()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if GNSS chipset requests periodic time signal injection from the\n     * platform in addition to on-demand and occasional time updates, {@code false} otherwise.\n     *\n     * <p><em>Note: The naming of this capability and the behavior it controls differ substantially.\n     * This is the result of a historic implementation bug, b/73893222.</em>\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasGeofencing()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if GNSS chipset supports geofencing, {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasMeasurements()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if GNSS chipset supports measurements, {@code false} otherwise.\n     *\n     * @see LocationManager#registerGnssMeasurementsCallback(Executor, GnssMeasurementsEvent.Callback)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasNavMessages()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if GNSS chipset supports navigation messages, {@code false} otherwise.\n     *\n     * @deprecated Use {@link #hasNavigationMessages()} instead.\n     *\n     * @hide\n     ",
    "links" : [ "#hasNavigationMessages()" ]
  }, {
    "name" : "public boolean hasNavigationMessages()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if GNSS chipset supports navigation messages, {@code false} otherwise.\n     *\n     * @see LocationManager#registerGnssNavigationMessageCallback(Executor, GnssNavigationMessage.Callback)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasLowPowerMode()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if GNSS chipset supports low power mode, {@code false} otherwise.\n     *\n     * <p>The low power mode is defined in GNSS HAL. When the low power mode is active, the GNSS\n     * hardware must make strong tradeoffs to substantially restrict power use.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasSatelliteBlacklist()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if GNSS chipset supports satellite blocklists, {@code false} otherwise.\n     *\n     * @deprecated Use {@link #hasSatelliteBlocklist} instead.\n     *\n     * @hide\n     ",
    "links" : [ "#hasSatelliteBlocklist" ]
  }, {
    "name" : "public boolean hasSatelliteBlocklist()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if GNSS chipset supports satellite blocklists, {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasSatellitePvt()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if GNSS chipset supports satellite PVT, {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasMeasurementCorrections()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if GNSS chipset supports measurement corrections, {@code false}\n     * otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasGnssAntennaInfo()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if GNSS chipset supports antenna info, {@code false} otherwise.\n     *\n     * @deprecated Use {@link #hasAntennaInfo()} instead.\n     ",
    "links" : [ "#hasAntennaInfo()" ]
  }, {
    "name" : "public boolean hasAntennaInfo()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if GNSS chipset supports antenna info, {@code false} otherwise.\n     *\n     * @see LocationManager#registerAntennaInfoListener(Executor, GnssAntennaInfo.Listener)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasMeasurementCorrelationVectors()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if GNSS chipset supports correlation vectors as part of measurements\n     * outputs, {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasMeasurementCorrectionsForDriving()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if GNSS chipset will benefit from measurement corrections for driving\n     * use case if provided, {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hasAccumulatedDeltaRange()",
    "returnType" : "int",
    "comment" : "\n     * Returns {@link #CAPABILITY_SUPPORTED} if GNSS chipset supports accumulated delta\n     * range, {@link #CAPABILITY_UNSUPPORTED} if GNSS chipset does not support accumulated\n     * delta range, and {@link #CAPABILITY_UNKNOWN} if it is unknown, which means GNSS\n     * chipset may or may not support accumulated delta range.\n     *\n     * <p>The accumulated delta range information can be queried in\n     * {@link android.location.GnssMeasurement#getAccumulatedDeltaRangeState()},\n     * {@link android.location.GnssMeasurement#getAccumulatedDeltaRangeMeters()}, and\n     * {@link android.location.GnssMeasurement#getAccumulatedDeltaRangeUncertaintyMeters()}.\n     ",
    "links" : [ "android.location.GnssMeasurement#getAccumulatedDeltaRangeState()", "android.location.GnssMeasurement#getAccumulatedDeltaRangeUncertaintyMeters()", "#CAPABILITY_SUPPORTED", "#CAPABILITY_UNSUPPORTED", "android.location.GnssMeasurement#getAccumulatedDeltaRangeMeters()", "#CAPABILITY_UNKNOWN" ]
  }, {
    "name" : "public boolean hasMeasurementCorrectionsLosSats()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if GNSS chipset supports line-of-sight satellite identification\n     * measurement corrections, {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasMeasurementCorrectionsExcessPathLength()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if GNSS chipset supports per satellite excess-path-length measurement\n     * corrections, {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasMeasurementCorrectionsReflectingPane()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if GNSS chipset supports reflecting plane measurement corrections,\n     * {@code false} otherwise.\n     *\n     * @deprecated Use {@link #hasMeasurementCorrectionsReflectingPlane()} instead.\n     *\n     * @hide\n     ",
    "links" : [ "#hasMeasurementCorrectionsReflectingPlane()" ]
  }, {
    "name" : "public boolean hasMeasurementCorrectionsReflectingPlane()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if GNSS chipset supports reflecting plane measurement corrections,\n     * {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasPowerTotal()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if GNSS chipset supports measuring power totals, {@code false}\n     * otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasPowerSinglebandTracking()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if GNSS chipset supports measuring single-band tracking power,\n     * {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasPowerMultibandTracking()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if GNSS chipset supports measuring multi-band tracking power,\n     * {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasPowerSinglebandAcquisition()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if GNSS chipset supports measuring single-band acquisition power,\n     * {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasPowerMultibandAcquisition()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if GNSS chipset supports measuring multi-band acquisition power,\n     * {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasPowerOtherModes()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if GNSS chipset supports measuring OEM defined mode power, {@code false}\n     * otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<GnssSignalType> getGnssSignalTypes()",
    "returnType" : "List<GnssSignalType>",
    "comment" : "\n     * Returns the list of {@link GnssSignalType}s that the GNSS chipset supports.\n     ",
    "links" : [ "android.location.GnssSignalType" ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel parcel, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static GnssCapabilities empty()", "public GnssCapabilities withTopHalFlags(@TopHalCapabilityFlags int flags, boolean isAdrCapabilityKnown)", "public GnssCapabilities withSubHalMeasurementCorrectionsFlags(@SubHalMeasurementCorrectionsCapabilityFlags int flags)", "public GnssCapabilities withSubHalPowerFlags(@SubHalPowerCapabilityFlags int flags)", "public GnssCapabilities withSignalTypes(@NonNull List<GnssSignalType> gnssSignalTypes)", "public boolean hasScheduling()", "public boolean hasMsb()", "public boolean hasMsa()", "public boolean hasSingleShotFix()", "public boolean hasOnDemandTime()", "public boolean hasGeofencing()", "public boolean hasMeasurements()", "public boolean hasNavMessages()", "public boolean hasNavigationMessages()", "public boolean hasLowPowerMode()", "public boolean hasSatelliteBlacklist()", "public boolean hasSatelliteBlocklist()", "public boolean hasSatellitePvt()", "public boolean hasMeasurementCorrections()", "public boolean hasGnssAntennaInfo()", "public boolean hasAntennaInfo()", "public boolean hasMeasurementCorrelationVectors()", "public boolean hasMeasurementCorrectionsForDriving()", "public int hasAccumulatedDeltaRange()", "public boolean hasMeasurementCorrectionsLosSats()", "public boolean hasMeasurementCorrectionsExcessPathLength()", "public boolean hasMeasurementCorrectionsReflectingPane()", "public boolean hasMeasurementCorrectionsReflectingPlane()", "public boolean hasPowerTotal()", "public boolean hasPowerSinglebandTracking()", "public boolean hasPowerMultibandTracking()", "public boolean hasPowerSinglebandAcquisition()", "public boolean hasPowerMultibandAcquisition()", "public boolean hasPowerOtherModes()", "public List<GnssSignalType> getGnssSignalTypes()", "public boolean equals(Object o)", "public int hashCode()", "public int describeContents()", "public void writeToParcel(@NonNull Parcel parcel, int flags)", "public String toString()" ],
  "variableNames" : [ "TOP_HAL_CAPABILITY_SCHEDULING", "TOP_HAL_CAPABILITY_MSB", "TOP_HAL_CAPABILITY_MSA", "TOP_HAL_CAPABILITY_SINGLE_SHOT", "TOP_HAL_CAPABILITY_ON_DEMAND_TIME", "TOP_HAL_CAPABILITY_GEOFENCING", "TOP_HAL_CAPABILITY_MEASUREMENTS", "TOP_HAL_CAPABILITY_NAV_MESSAGES", "TOP_HAL_CAPABILITY_LOW_POWER_MODE", "TOP_HAL_CAPABILITY_SATELLITE_BLOCKLIST", "TOP_HAL_CAPABILITY_MEASUREMENT_CORRECTIONS", "TOP_HAL_CAPABILITY_ANTENNA_INFO", "TOP_HAL_CAPABILITY_CORRELATION_VECTOR", "TOP_HAL_CAPABILITY_SATELLITE_PVT", "TOP_HAL_CAPABILITY_MEASUREMENT_CORRECTIONS_FOR_DRIVING", "TOP_HAL_CAPABILITY_ACCUMULATED_DELTA_RANGE", "SUB_HAL_MEASUREMENT_CORRECTIONS_CAPABILITY_LOS_SATS", "SUB_HAL_MEASUREMENT_CORRECTIONS_CAPABILITY_EXCESS_PATH_LENGTH", "SUB_HAL_MEASUREMENT_CORRECTIONS_CAPABILITY_REFLECTING_PLANE", "SUB_HAL_POWER_CAPABILITY_TOTAL", "SUB_HAL_POWER_CAPABILITY_SINGLEBAND_TRACKING", "SUB_HAL_POWER_CAPABILITY_MULTIBAND_TRACKING", "SUB_HAL_POWER_CAPABILITY_SINGLEBAND_ACQUISITION", "SUB_HAL_POWER_CAPABILITY_MULTIBAND_ACQUISITION", "SUB_HAL_POWER_CAPABILITY_OTHER_MODES", "CAPABILITY_UNKNOWN", "CAPABILITY_SUPPORTED", "CAPABILITY_UNSUPPORTED", "mTopFlags", "mIsAdrCapabilityKnown", "mMeasurementCorrectionsFlags", "mPowerFlags", "mGnssSignalTypes", "CREATOR" ]
}