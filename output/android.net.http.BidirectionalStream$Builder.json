{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/http/BidirectionalStream.java",
  "packageName" : "android.net.http",
  "className" : "Builder",
  "comment" : " SuppressLint: Builder can not be final since this is abstract and inherited",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public abstract Builder setHttpMethod(@NonNull String method)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the HTTP method for the request. Returns builder to facilitate chaining.\n         *\n         * @param method the method to use for request. Default is 'POST'\n         * @return the builder to facilitate chaining\n         ",
    "links" : [ ]
  }, {
    "name" : "public abstract Builder addHeader(@NonNull String header, @NonNull String value)",
    "returnType" : "Builder",
    "comment" : "\n         * Adds a request header. Returns builder to facilitate chaining.\n         *\n         * @param header the header name\n         * @param value the header value\n         * @return the builder to facilitate chaining\n         ",
    "links" : [ ]
  }, {
    "name" : "public abstract Builder setPriority(@BidirectionalStreamPriority int priority)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets priority of the stream which should be one of the {@link #STREAM_PRIORITY_IDLE\n         * STREAM_PRIORITY_*} values. The stream is given {@link #STREAM_PRIORITY_MEDIUM} priority\n         * if this method is not called.\n         *\n         * @param priority priority of the stream which should be one of the {@link\n         * #STREAM_PRIORITY_IDLE STREAM_PRIORITY_*} values.\n         * @return the builder to facilitate chaining.\n         ",
    "links" : [ "#STREAM_PRIORITY_MEDIUM", "#STREAM_PRIORITY_IDLE", "#STREAM_PRIORITY_IDLESTREAM_PRIORITY_" ]
  }, {
    "name" : "public abstract Builder setDelayRequestHeadersUntilFirstFlushEnabled(boolean delayRequestHeadersUntilFirstFlush)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets whether to delay sending request headers until {@link BidirectionalStream#flush()}\n         * is called. This flag is currently only respected when QUIC is negotiated.\n         * When true, QUIC will send request header frame along with data frame(s)\n         * as a single packet when possible.\n         *\n         * @param delayRequestHeadersUntilFirstFlush if true, sending request headers will be\n         *         delayed\n         * until flush() is called.\n         * @return the builder to facilitate chaining.\n         ",
    "links" : [ "android.net.http.BidirectionalStream#flush()" ]
  }, {
    "name" : "public abstract Builder setTrafficStatsTag(int tag)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets {@link android.net.TrafficStats} tag to use when accounting socket traffic caused by\n         * this request. See {@link android.net.TrafficStats} for more information. If no tag is\n         * set (e.g. this method isn't called), then Android accounts for the socket traffic caused\n         * by this request as if the tag value were set to 0.\n         * <p>\n         * <b>NOTE:</b>Setting a tag disallows sharing of sockets with requests\n         * with other tags, which may adversely effect performance by prohibiting\n         * connection sharing. In other words use of multiplexed sockets (e.g. HTTP/2\n         * and QUIC) will only be allowed if all requests have the same socket tag.\n         *\n         * @param tag the tag value used to when accounting for socket traffic caused by this\n         *            request. Tags between 0xFFFFFF00 and 0xFFFFFFFF are reserved and used\n         *            internally by system services like {@link android.app.DownloadManager} when\n         *            performing traffic on behalf of an application.\n         * @return the builder to facilitate chaining.\n         ",
    "links" : [ "android.app.DownloadManager", "android.net.TrafficStats" ]
  }, {
    "name" : "public abstract Builder setTrafficStatsUid(int uid)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets specific UID to use when accounting socket traffic caused by this request. See\n         * {@link android.net.TrafficStats} for more information. Designed for use when performing\n         * an operation on behalf of another application. Caller must hold\n         * {@code android.Manifest.permission#MODIFY_NETWORK_ACCOUNTING} permission. By default\n         * traffic is attributed to UID of caller.\n         * <p>\n         * <b>NOTE:</b>Setting a UID disallows sharing of sockets with requests\n         * with other UIDs, which may adversely effect performance by prohibiting\n         * connection sharing. In other words use of multiplexed sockets (e.g. HTTP/2\n         * and QUIC) will only be allowed if all requests have the same UID set.\n         *\n         * @param uid the UID to attribute socket traffic caused by this request.\n         * @return the builder to facilitate chaining.\n         ",
    "links" : [ "android.net.TrafficStats" ]
  }, {
    "name" : "public abstract BidirectionalStream build()",
    "returnType" : "BidirectionalStream",
    "comment" : "\n         * Creates a {@link BidirectionalStream} using configuration from this {@link Builder}. The\n         * returned {@code BidirectionalStream} can then be started by calling {@link\n         * BidirectionalStream#start}.\n         *\n         * @return constructed {@link BidirectionalStream} using configuration from this {@link\n         *         Builder}\n         ",
    "links" : [ "android.net.http.BidirectionalStream", "Builder", "android.net.http.BidirectionalStream#start" ]
  } ],
  "methodNames" : [ "public abstract Builder setHttpMethod(@NonNull String method)", "public abstract Builder addHeader(@NonNull String header, @NonNull String value)", "public abstract Builder setPriority(@BidirectionalStreamPriority int priority)", "public abstract Builder setDelayRequestHeadersUntilFirstFlushEnabled(boolean delayRequestHeadersUntilFirstFlush)", "public abstract Builder setTrafficStatsTag(int tag)", "public abstract Builder setTrafficStatsUid(int uid)", "public abstract BidirectionalStream build()" ],
  "variableNames" : [ ]
}