{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/text/UnicodeSetSpanner.java",
  "packageName" : "android.icu.text",
  "className" : "UnicodeSetSpanner",
  "comment" : "\n * A helper class used to count, replace, and trim CharSequences based on UnicodeSet matches.\n * An instance is immutable (and thus thread-safe) iff the source UnicodeSet is frozen.\n * <p><b>Note:</b> The counting, deletion, and replacement depend on alternating a {@link SpanCondition} with\n * its inverse. That is, the code spans, then spans for the inverse, then spans, and so on.\n * For the inverse, the following mapping is used:\n * <ul>\n * <li>{@link UnicodeSet.SpanCondition#SIMPLE} → {@link UnicodeSet.SpanCondition#NOT_CONTAINED}</li>\n * <li>{@link UnicodeSet.SpanCondition#CONTAINED} → {@link UnicodeSet.SpanCondition#NOT_CONTAINED}</li>\n * <li>{@link UnicodeSet.SpanCondition#NOT_CONTAINED} → {@link UnicodeSet.SpanCondition#SIMPLE}</li>\n * </ul>\n * These are actually not complete inverses. However, the alternating works because there are no gaps.\n * For example, with [a{ab}{bc}], you get the following behavior when scanning forward:\n *\n * <table border=\"1\">\n * <tr><th>SIMPLE</th><td>xxx[ab]cyyy</td></tr>\n * <tr><th>CONTAINED</th><td>xxx[abc]yyy</td></tr>\n * <tr><th>NOT_CONTAINED</th><td>[xxx]ab[cyyy]</td></tr>\n * </table>\n * <p>So here is what happens when you alternate:\n *\n * <table border=\"1\">\n * <tr><th>start</th><td>|xxxabcyyy</td></tr>\n * <tr><th>NOT_CONTAINED</th><td>xxx|abcyyy</td></tr>\n * <tr><th>CONTAINED</th><td>xxxabc|yyy</td></tr>\n * <tr><th>NOT_CONTAINED</th><td>xxxabcyyy|</td></tr>\n * </table>\n * <p>The entire string is traversed.\n ",
  "links" : [ "UnicodeSet.SpanCondition#NOT_CONTAINED", "android.icu.text.UnicodeSet.SpanCondition", "UnicodeSet.SpanCondition#SIMPLE", "UnicodeSet.SpanCondition#CONTAINED" ],
  "variables" : [ {
    "name" : "unicodeSet",
    "type" : "UnicodeSet",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public UnicodeSet getUnicodeSet()",
    "returnType" : "UnicodeSet",
    "comment" : "\n     * Returns the UnicodeSet used for processing. It is frozen iff the original was.\n     * \n     * @return the construction set.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object other)",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public int countIn(CharSequence sequence)",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of matching characters found in a character sequence, \n     * counting by CountMethod.MIN_ELEMENTS using SpanCondition.SIMPLE.\n     * The code alternates spans; see the class doc for {@link UnicodeSetSpanner} for a note about boundary conditions.\n     * @param sequence\n     *            the sequence to count characters in\n     * @return the count. Zero if there are none.\n     ",
    "links" : [ "android.icu.text.UnicodeSetSpanner" ]
  }, {
    "name" : "public int countIn(CharSequence sequence, CountMethod countMethod)",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of matching characters found in a character sequence, using SpanCondition.SIMPLE.\n     * The code alternates spans; see the class doc for {@link UnicodeSetSpanner} for a note about boundary conditions.\n     * @param sequence\n     *            the sequence to count characters in\n     * @param countMethod\n     *            whether to treat an entire span as a match, or individual elements as matches\n     * @return the count. Zero if there are none.\n     ",
    "links" : [ "android.icu.text.UnicodeSetSpanner" ]
  }, {
    "name" : "public int countIn(CharSequence sequence, CountMethod countMethod, SpanCondition spanCondition)",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of matching characters found in a character sequence.\n     * The code alternates spans; see the class doc for {@link UnicodeSetSpanner} for a note about boundary conditions.\n     * @param sequence\n     *            the sequence to count characters in\n     * @param countMethod\n     *            whether to treat an entire span as a match, or individual elements as matches\n     * @param spanCondition\n     *            the spanCondition to use. SIMPLE or CONTAINED means only count the elements in the span;\n     *            NOT_CONTAINED is the reverse.\n     *            <br><b>WARNING: </b> when a UnicodeSet contains strings, there may be unexpected behavior in edge cases.\n     * @return the count. Zero if there are none.\n     ",
    "links" : [ "android.icu.text.UnicodeSetSpanner" ]
  }, {
    "name" : "public String deleteFrom(CharSequence sequence)",
    "returnType" : "String",
    "comment" : "\n     * Delete all the matching spans in sequence, using SpanCondition.SIMPLE\n     * The code alternates spans; see the class doc for {@link UnicodeSetSpanner} for a note about boundary conditions.\n     * @param sequence\n     *            charsequence to replace matching spans in.\n     * @return modified string.\n     ",
    "links" : [ "android.icu.text.UnicodeSetSpanner" ]
  }, {
    "name" : "public String deleteFrom(CharSequence sequence, SpanCondition spanCondition)",
    "returnType" : "String",
    "comment" : "\n     * Delete all matching spans in sequence, according to the spanCondition.\n     * The code alternates spans; see the class doc for {@link UnicodeSetSpanner} for a note about boundary conditions.\n     * @param sequence\n     *            charsequence to replace matching spans in.\n     * @param spanCondition\n     *            specify whether to modify the matching spans (CONTAINED or SIMPLE) or the non-matching (NOT_CONTAINED)\n     * @return modified string.\n     ",
    "links" : [ "android.icu.text.UnicodeSetSpanner" ]
  }, {
    "name" : "public String replaceFrom(CharSequence sequence, CharSequence replacement)",
    "returnType" : "String",
    "comment" : "\n     * Replace all matching spans in sequence by the replacement,\n     * counting by CountMethod.MIN_ELEMENTS using SpanCondition.SIMPLE.\n     * The code alternates spans; see the class doc for {@link UnicodeSetSpanner} for a note about boundary conditions.\n     * @param sequence\n     *            charsequence to replace matching spans in.\n     * @param replacement\n     *            replacement sequence. To delete, use \"\"\n     * @return modified string.\n     ",
    "links" : [ "android.icu.text.UnicodeSetSpanner" ]
  }, {
    "name" : "public String replaceFrom(CharSequence sequence, CharSequence replacement, CountMethod countMethod)",
    "returnType" : "String",
    "comment" : "\n     * Replace all matching spans in sequence by replacement, according to the CountMethod, using SpanCondition.SIMPLE.\n     * The code alternates spans; see the class doc for {@link UnicodeSetSpanner} for a note about boundary conditions.\n     * \n     * @param sequence\n     *            charsequence to replace matching spans in.\n     * @param replacement\n     *            replacement sequence. To delete, use \"\"\n     * @param countMethod\n     *            whether to treat an entire span as a match, or individual elements as matches\n     * @return modified string.\n     ",
    "links" : [ "android.icu.text.UnicodeSetSpanner" ]
  }, {
    "name" : "public String replaceFrom(CharSequence sequence, CharSequence replacement, CountMethod countMethod, SpanCondition spanCondition)",
    "returnType" : "String",
    "comment" : "\n     * Replace all matching spans in sequence by replacement, according to the countMethod and spanCondition.\n     * The code alternates spans; see the class doc for {@link UnicodeSetSpanner} for a note about boundary conditions.\n     * @param sequence\n     *            charsequence to replace matching spans in.\n     * @param replacement\n     *            replacement sequence. To delete, use \"\"\n     * @param countMethod \n     *            whether to treat an entire span as a match, or individual elements as matches\n     * @param spanCondition\n     *            specify whether to modify the matching spans (CONTAINED or SIMPLE) or the non-matching\n     *            (NOT_CONTAINED)\n     * @return modified string.\n     ",
    "links" : [ "android.icu.text.UnicodeSetSpanner" ]
  }, {
    "name" : "public CharSequence trim(CharSequence sequence)",
    "returnType" : "CharSequence",
    "comment" : "\n     * Returns a trimmed sequence (using CharSequence.subsequence()), that omits matching elements at the start and\n     * end of the string, using TrimOption.BOTH and SpanCondition.SIMPLE. For example:\n     * \n     * <pre>\n     * {@code\n     * \n     *   new UnicodeSet(\"[ab]\").trim(\"abacatbab\")}\n     * </pre>\n     * \n     * ... returns {@code \"cat\"}.\n     * @param sequence\n     *            the sequence to trim\n     * @return a subsequence\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence trim(CharSequence sequence, TrimOption trimOption)",
    "returnType" : "CharSequence",
    "comment" : "\n     * Returns a trimmed sequence (using CharSequence.subsequence()), that omits matching elements at the start or\n     * end of the string, using the trimOption and SpanCondition.SIMPLE. For example:\n     * \n     * <pre>\n     * {@code\n     * \n     *   new UnicodeSet(\"[ab]\").trim(\"abacatbab\", TrimOption.LEADING)}\n     * </pre>\n     * \n     * ... returns {@code \"catbab\"}.\n     * \n     * @param sequence\n     *            the sequence to trim\n     * @param trimOption\n     *            LEADING, TRAILING, or BOTH\n     * @return a subsequence\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence trim(CharSequence sequence, TrimOption trimOption, SpanCondition spanCondition)",
    "returnType" : "CharSequence",
    "comment" : "\n     * Returns a trimmed sequence (using CharSequence.subsequence()), that omits matching elements at the start or\n     * end of the string, depending on the trimOption and spanCondition. For example:\n     * \n     * <pre>\n     * {@code\n     * \n     *   new UnicodeSet(\"[ab]\").trim(\"abacatbab\", TrimOption.LEADING, SpanCondition.SIMPLE)}\n     * </pre>\n     * \n     * ... returns {@code \"catbab\"}.\n     * \n     * @param sequence\n     *            the sequence to trim\n     * @param trimOption\n     *            LEADING, TRAILING, or BOTH\n     * @param spanCondition\n     *            SIMPLE, CONTAINED or NOT_CONTAINED\n     * @return a subsequence\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public UnicodeSet getUnicodeSet()", "public boolean equals(Object other)", "public int hashCode()", "public int countIn(CharSequence sequence)", "public int countIn(CharSequence sequence, CountMethod countMethod)", "public int countIn(CharSequence sequence, CountMethod countMethod, SpanCondition spanCondition)", "public String deleteFrom(CharSequence sequence)", "public String deleteFrom(CharSequence sequence, SpanCondition spanCondition)", "public String replaceFrom(CharSequence sequence, CharSequence replacement)", "public String replaceFrom(CharSequence sequence, CharSequence replacement, CountMethod countMethod)", "public String replaceFrom(CharSequence sequence, CharSequence replacement, CountMethod countMethod, SpanCondition spanCondition)", "public CharSequence trim(CharSequence sequence)", "public CharSequence trim(CharSequence sequence, TrimOption trimOption)", "public CharSequence trim(CharSequence sequence, TrimOption trimOption, SpanCondition spanCondition)" ],
  "variableNames" : [ "unicodeSet" ]
}