{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/text/StaticLayout.java",
  "packageName" : "android.text",
  "className" : "StaticLayout",
  "comment" : "\n * StaticLayout is a Layout for text that will not be edited after it\n * is laid out.  Use {@link DynamicLayout} for text that may change.\n * <p>This is used by widgets to control text layout. You should not need\n * to use this class directly unless you are implementing your own widget\n * or custom display object, or would be tempted to call\n * {@link android.graphics.Canvas#drawText(java.lang.CharSequence, int, int,\n * float, float, android.graphics.Paint)\n * Canvas.drawText()} directly.</p>\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLineCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTopPadding",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBottomPadding",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mColumns",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEllipsizedWidth",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEllipsized",
    "type" : "boolean",
    "comment" : "\n     * Keeps track if ellipsize is applied to the text.\n     ",
    "links" : [ ]
  }, {
    "name" : "mMaxLineHeight",
    "type" : "int",
    "comment" : "\n     * If maxLines is set, ellipsize is not set, and the actual line count of text is greater than\n     * or equal to maxLine, this variable holds the ideal visual height of the maxLine'th line\n     * starting from the top of the layout. If maxLines is not set its value will be -1.\n     *\n     * The value is the same as getLineTop(maxLines) for ellipsized version where structurally no\n     * more than maxLines is contained.\n     ",
    "links" : [ ]
  }, {
    "name" : "COLUMNS_NORMAL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "COLUMNS_ELLIPSIZE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "START",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DIR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAB",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TOP",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DESCENT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EXTRA",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HYPHEN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ELLIPSIS_START",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ELLIPSIS_COUNT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLines",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLineDirections",
    "type" : "Directions[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaximumVisibleLineCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "START_MASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DIR_SHIFT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAB_MASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HYPHEN_MASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "START_HYPHEN_BITS_SHIFT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "START_HYPHEN_MASK",
    "type" : "int",
    "comment" : " 0b11000",
    "links" : [ ]
  }, {
    "name" : "END_HYPHEN_MASK",
    "type" : "int",
    "comment" : " 0b00111",
    "links" : [ ]
  }, {
    "name" : "TAB_INCREMENT",
    "type" : "float",
    "comment" : " same as Layout, but that's private",
    "links" : [ ]
  }, {
    "name" : "CHAR_NEW_LINE",
    "type" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EXTRA_ROUNDING",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_MAX_LINE_HEIGHT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLeftIndents",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRightIndents",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " void generate(Builder b, boolean includepad, boolean trackpad)",
    "returnType" : "void",
    "comment" : " package ",
    "links" : [ ]
  }, {
    "name" : "private int out(final CharSequence text, final int start, final int end, int above, int below, int top, int bottom, int v, final float spacingmult, final float spacingadd, final LineHeightSpan[] chooseHt, final int[] chooseHtv, final Paint.FontMetricsInt fm, final boolean hasTab, final int hyphenEdit, final boolean needMultiply, @NonNull final MeasuredParagraph measured, final int bufEnd, final boolean includePad, final boolean trackPad, final boolean addLastLineLineSpacing, final char[] chs, final int widthStart, final TextUtils.TruncateAt ellipsize, final float ellipsisWidth, final float textWidth, final TextPaint paint, final boolean moreChars)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void calculateEllipsis(int lineStart, int lineEnd, MeasuredParagraph measured, int widthStart, float avail, TextUtils.TruncateAt where, int line, float textWidth, TextPaint paint, boolean forceEllipsis)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private float getTotalInsets(int line)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getLineForVertical(int vertical)",
    "returnType" : "int",
    "comment" : " FIXME: It may be faster to do a linear search for layouts without many lines.",
    "links" : [ ]
  }, {
    "name" : "public int getLineCount()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getLineTop(int line)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getLineExtra(int line)",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getLineDescent(int line)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getLineStart(int line)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getParagraphDirection(int line)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean getLineContainsTab(int line)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final Directions getLineDirections(int line)",
    "returnType" : "Directions",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getTopPadding()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getBottomPadding()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static int packHyphenEdit(@Paint.StartHyphenEdit int start, @Paint.EndHyphenEdit int end)",
    "returnType" : "int",
    "comment" : " To store into single int field, pack the pair of start and end hyphen edit.",
    "links" : [ ]
  }, {
    "name" : " static int unpackStartHyphenEdit(int packedHyphenEdit)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static int unpackEndHyphenEdit(int packedHyphenEdit)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getStartHyphenEdit(int lineNumber)",
    "returnType" : "int",
    "comment" : "\n     * Returns the start hyphen edit value for this line.\n     *\n     * @param lineNumber a line number\n     * @return A start hyphen edit value.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getEndHyphenEdit(int lineNumber)",
    "returnType" : "int",
    "comment" : "\n     * Returns the packed hyphen edit value for this line.\n     *\n     * @param lineNumber a line number\n     * @return An end hyphen edit value.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getIndentAdjust(int line, Alignment align)",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getEllipsisCount(int line)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getEllipsisStart(int line)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getEllipsizedWidth()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getHeight(boolean cap)",
    "returnType" : "int",
    "comment" : "\n     * Return the total height of this layout.\n     *\n     * @param cap if true and max lines is set, returns the height of the layout at the max lines.\n     *\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "mLineCount", "mTopPadding", "mBottomPadding", "mColumns", "mEllipsizedWidth", "mEllipsized", "mMaxLineHeight", "COLUMNS_NORMAL", "COLUMNS_ELLIPSIZE", "START", "DIR", "TAB", "TOP", "DESCENT", "EXTRA", "HYPHEN", "ELLIPSIS_START", "ELLIPSIS_COUNT", "mLines", "mLineDirections", "mMaximumVisibleLineCount", "START_MASK", "DIR_SHIFT", "TAB_MASK", "HYPHEN_MASK", "START_HYPHEN_BITS_SHIFT", "START_HYPHEN_MASK", "END_HYPHEN_MASK", "TAB_INCREMENT", "CHAR_NEW_LINE", "EXTRA_ROUNDING", "DEFAULT_MAX_LINE_HEIGHT", "mLeftIndents", "mRightIndents" ],
  "methodNames" : [ " void generate(Builder b, boolean includepad, boolean trackpad)", "private int out(final CharSequence text, final int start, final int end, int above, int below, int top, int bottom, int v, final float spacingmult, final float spacingadd, final LineHeightSpan[] chooseHt, final int[] chooseHtv, final Paint.FontMetricsInt fm, final boolean hasTab, final int hyphenEdit, final boolean needMultiply, @NonNull final MeasuredParagraph measured, final int bufEnd, final boolean includePad, final boolean trackPad, final boolean addLastLineLineSpacing, final char[] chs, final int widthStart, final TextUtils.TruncateAt ellipsize, final float ellipsisWidth, final float textWidth, final TextPaint paint, final boolean moreChars)", "private void calculateEllipsis(int lineStart, int lineEnd, MeasuredParagraph measured, int widthStart, float avail, TextUtils.TruncateAt where, int line, float textWidth, TextPaint paint, boolean forceEllipsis)", "private float getTotalInsets(int line)", "public int getLineForVertical(int vertical)", "public int getLineCount()", "public int getLineTop(int line)", "public int getLineExtra(int line)", "public int getLineDescent(int line)", "public int getLineStart(int line)", "public int getParagraphDirection(int line)", "public boolean getLineContainsTab(int line)", "public final Directions getLineDirections(int line)", "public int getTopPadding()", "public int getBottomPadding()", " static int packHyphenEdit(@Paint.StartHyphenEdit int start, @Paint.EndHyphenEdit int end)", " static int unpackStartHyphenEdit(int packedHyphenEdit)", " static int unpackEndHyphenEdit(int packedHyphenEdit)", "public int getStartHyphenEdit(int lineNumber)", "public int getEndHyphenEdit(int lineNumber)", "public int getIndentAdjust(int line, Alignment align)", "public int getEllipsisCount(int line)", "public int getEllipsisStart(int line)", "public int getEllipsizedWidth()", "public int getHeight(boolean cap)" ]
}