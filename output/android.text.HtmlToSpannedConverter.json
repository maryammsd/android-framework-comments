{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/text/Html.java",
  "packageName" : "android.text",
  "className" : "HtmlToSpannedConverter",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "HEADING_SIZES",
    "type" : "float[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSource",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mReader",
    "type" : "XMLReader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSpannableStringBuilder",
    "type" : "SpannableStringBuilder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mImageGetter",
    "type" : "Html.ImageGetter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTagHandler",
    "type" : "Html.TagHandler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFlags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sTextAlignPattern",
    "type" : "Pattern",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sForegroundColorPattern",
    "type" : "Pattern",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sBackgroundColorPattern",
    "type" : "Pattern",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sTextDecorationPattern",
    "type" : "Pattern",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sColorMap",
    "type" : "Map<String, Integer>",
    "comment" : "\n     * Name-value mapping of HTML/CSS colors which have different values in {@link Color}.\n     ",
    "links" : [ "android.graphics.Color" ]
  } ],
  "methods" : [ {
    "name" : "private static Pattern getTextAlignPattern()",
    "returnType" : "Pattern",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Pattern getForegroundColorPattern()",
    "returnType" : "Pattern",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Pattern getBackgroundColorPattern()",
    "returnType" : "Pattern",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Pattern getTextDecorationPattern()",
    "returnType" : "Pattern",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Spanned convert()",
    "returnType" : "Spanned",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleStartTag(String tag, Attributes attributes)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleEndTag(String tag)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getMarginParagraph()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getMarginHeading()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getMarginListItem()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getMarginList()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getMarginDiv()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getMarginBlockquote()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getMargin(int flag)",
    "returnType" : "int",
    "comment" : "\n     * Returns the minimum number of newline characters needed before and after a given block-level\n     * element.\n     *\n     * @param flag the corresponding option flag defined in {@link Html} of a block-level element\n     ",
    "links" : [ "android.text.Html" ]
  }, {
    "name" : "private static void appendNewlines(Editable text, int minNewline)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void startBlockElement(Editable text, Attributes attributes, int margin)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void endBlockElement(Editable text)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void handleBr(Editable text)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void startLi(Editable text, Attributes attributes)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void endLi(Editable text)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void startBlockquote(Editable text, Attributes attributes)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void endBlockquote(Editable text)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void startHeading(Editable text, Attributes attributes, int level)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void endHeading(Editable text)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static T getLast(Spanned text, Class<T> kind)",
    "returnType" : "T",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void setSpanFromMark(Spannable text, Object mark, Object... spans)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void start(Editable text, Object mark)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void end(Editable text, Class kind, Object repl)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void startCssStyle(Editable text, Attributes attributes)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void endCssStyle(Editable text)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void startImg(Editable text, Attributes attributes, Html.ImageGetter img)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void startFont(Editable text, Attributes attributes)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void endFont(Editable text)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void startA(Editable text, Attributes attributes)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void endA(Editable text)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getHtmlColor(String color)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setDocumentLocator(Locator locator)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void startDocument() throws SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void endDocument() throws SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void startPrefixMapping(String prefix, String uri) throws SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void endPrefixMapping(String prefix) throws SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void endElement(String uri, String localName, String qName) throws SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void characters(char[] ch, int start, int length) throws SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void ignorableWhitespace(char[] ch, int start, int length) throws SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void processingInstruction(String target, String data) throws SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void skippedEntity(String name) throws SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static Pattern getTextAlignPattern()", "private static Pattern getForegroundColorPattern()", "private static Pattern getBackgroundColorPattern()", "private static Pattern getTextDecorationPattern()", "public Spanned convert()", "private void handleStartTag(String tag, Attributes attributes)", "private void handleEndTag(String tag)", "private int getMarginParagraph()", "private int getMarginHeading()", "private int getMarginListItem()", "private int getMarginList()", "private int getMarginDiv()", "private int getMarginBlockquote()", "private int getMargin(int flag)", "private static void appendNewlines(Editable text, int minNewline)", "private static void startBlockElement(Editable text, Attributes attributes, int margin)", "private static void endBlockElement(Editable text)", "private static void handleBr(Editable text)", "private void startLi(Editable text, Attributes attributes)", "private static void endLi(Editable text)", "private void startBlockquote(Editable text, Attributes attributes)", "private static void endBlockquote(Editable text)", "private void startHeading(Editable text, Attributes attributes, int level)", "private static void endHeading(Editable text)", "private static T getLast(Spanned text, Class<T> kind)", "private static void setSpanFromMark(Spannable text, Object mark, Object... spans)", "private static void start(Editable text, Object mark)", "private static void end(Editable text, Class kind, Object repl)", "private void startCssStyle(Editable text, Attributes attributes)", "private static void endCssStyle(Editable text)", "private static void startImg(Editable text, Attributes attributes, Html.ImageGetter img)", "private void startFont(Editable text, Attributes attributes)", "private static void endFont(Editable text)", "private static void startA(Editable text, Attributes attributes)", "private static void endA(Editable text)", "private int getHtmlColor(String color)", "public void setDocumentLocator(Locator locator)", "public void startDocument() throws SAXException", "public void endDocument() throws SAXException", "public void startPrefixMapping(String prefix, String uri) throws SAXException", "public void endPrefixMapping(String prefix) throws SAXException", "public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException", "public void endElement(String uri, String localName, String qName) throws SAXException", "public void characters(char[] ch, int start, int length) throws SAXException", "public void ignorableWhitespace(char[] ch, int start, int length) throws SAXException", "public void processingInstruction(String target, String data) throws SAXException", "public void skippedEntity(String name) throws SAXException" ],
  "variableNames" : [ "HEADING_SIZES", "mSource", "mReader", "mSpannableStringBuilder", "mImageGetter", "mTagHandler", "mFlags", "sTextAlignPattern", "sForegroundColorPattern", "sBackgroundColorPattern", "sTextDecorationPattern", "sColorMap" ]
}