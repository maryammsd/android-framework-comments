{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/service/trust/TrustAgentService.java",
  "packageName" : "android.service.trust",
  "className" : "TrustAgentService",
  "comment" : "\n * A service that notifies the system about whether it believes the environment of the device\n * to be trusted.\n *\n * <p>Trust agents may only be provided by the platform. It is expected that there is only\n * one trust agent installed on the platform. In the event there is more than one,\n * either trust agent can enable trust.\n * </p>\n *\n * <p>To extend this class, you must declare the service in your manifest file with\n * the {@link android.Manifest.permission#BIND_TRUST_AGENT} permission\n * and include an intent filter with the {@link #SERVICE_INTERFACE} action. For example:</p>\n * <pre>\n * &lt;service android:name=\".TrustAgent\"\n *          android:label=\"&#64;string/service_name\"\n *          android:permission=\"android.permission.BIND_TRUST_AGENT\">\n *     &lt;intent-filter>\n *         &lt;action android:name=\"android.service.trust.TrustAgentService\" />\n *     &lt;/intent-filter>\n *     &lt;meta-data android:name=\"android.service.trust.trustagent\"\n *          android:value=\"&#64;xml/trust_agent\" />\n * &lt;/service></pre>\n *\n * <p>The associated meta-data file can specify an activity that is accessible through Settings\n * and should allow configuring the trust agent, as defined in\n * {@link android.R.styleable#TrustAgent}. For example:</p>\n *\n * <pre>\n * &lt;trust-agent xmlns:android=\"http://schemas.android.com/apk/res/android\"\n *          android:settingsActivity=\".TrustAgentSettings\" /></pre>\n *\n * @hide\n ",
  "links" : [ "android.R.styleable#TrustAgent", "#SERVICE_INTERFACE", "android.Manifest.permission#BIND_TRUST_AGENT" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SERVICE_INTERFACE",
    "type" : "String",
    "comment" : "\n     * The {@link Intent} that must be declared as handled by the service.\n     ",
    "links" : [ "android.content.Intent" ]
  }, {
    "name" : "TRUST_AGENT_META_DATA",
    "type" : "String",
    "comment" : "\n     * The name of the {@code meta-data} tag pointing to additional configuration of the trust\n     * agent.\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_GRANT_TRUST_INITIATED_BY_USER",
    "type" : "int",
    "comment" : "\n     * Flag for {@link #grantTrust(CharSequence, long, int)} indicating that trust is being granted\n     * as the direct result of user action - such as solving a security challenge. The hint is used\n     * by the system to optimize the experience. Behavior may vary by device and release, so\n     * one should only set this parameter if it meets the above criteria rather than relying on\n     * the behavior of any particular device or release.\n     ",
    "links" : [ "#grantTrust(CharSequence" ]
  }, {
    "name" : "FLAG_GRANT_TRUST_DISMISS_KEYGUARD",
    "type" : "int",
    "comment" : "\n     * Flag for {@link #grantTrust(CharSequence, long, int)} indicating that the agent would like\n     * to dismiss the keyguard. When using this flag, the {@code TrustAgentService} must ensure\n     * it is only set in response to a direct user action with the expectation of dismissing the\n     * keyguard.\n     ",
    "links" : [ "#grantTrust(CharSequence" ]
  }, {
    "name" : "FLAG_GRANT_TRUST_TEMPORARY_AND_RENEWABLE",
    "type" : "int",
    "comment" : "\n     * Flag for {@link #grantTrust(CharSequence, long, int)} indicating the platform should\n     * automatically remove trust after some conditions are met (detailed below) with the option for\n     * the agent to renew the trust again later.\n     *\n     * <p>After this is called, the agent will grant trust until the platform thinks an active\n     * user is no longer using that trust. This can happen for any reason as determined by the\n     * platform. For example, if the user dismisses keyguard, the platform will remove trust;\n     * since this does not automatically lock the device, this results in the device locking the\n     * next time the screen turns off.\n     *\n     * <p>When the platform internally removes the agent's trust in this manner, an agent can\n     * re-grant it (via a call to grantTrust) without the user having to unlock the device through\n     * another method (e.g. PIN). This renewable state only persists for a limited time.\n     ",
    "links" : [ "#grantTrust(CharSequence" ]
  }, {
    "name" : "FLAG_GRANT_TRUST_DISPLAY_MESSAGE",
    "type" : "int",
    "comment" : "\n     * Flag for {@link #grantTrust(CharSequence, long, int)} indicating that the message should\n     * be displayed to the user.\n     *\n     * Without this flag, the message passed to {@code grantTrust} is only used for debugging\n     * purposes. With the flag, it may be displayed to the user as the reason why the device is\n     * unlocked. If this flag isn't set OR the message is set to null, the device will display\n     * its own default message for trust granted. If the TrustAgent intentionally doesn't want to\n     * show any message, then it can set this flag AND set the message to an empty string.\n     ",
    "links" : [ "#grantTrust(CharSequence" ]
  }, {
    "name" : "TOKEN_STATE_ACTIVE",
    "type" : "int",
    "comment" : "\n     * Int enum indicating that escrow token is active.\n     * See {@link #onEscrowTokenStateReceived(long, int)}\n     *\n     ",
    "links" : [ "#onEscrowTokenStateReceived(long" ]
  }, {
    "name" : "TOKEN_STATE_INACTIVE",
    "type" : "int",
    "comment" : "\n     * Int enum indicating that escow token is inactive.\n     * See {@link #onEscrowTokenStateReceived(long, int)}\n     *\n     ",
    "links" : [ "#onEscrowTokenStateReceived(long" ]
  }, {
    "name" : "MSG_UNLOCK_ATTEMPT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_CONFIGURE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_TRUST_TIMEOUT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_DEVICE_LOCKED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_DEVICE_UNLOCKED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_UNLOCK_LOCKOUT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_ESCROW_TOKEN_ADDED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_ESCROW_TOKEN_STATE_RECEIVED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_ESCROW_TOKEN_REMOVED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_USER_REQUESTED_UNLOCK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_USER_MAY_REQUEST_UNLOCK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EXTRA_TOKEN",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EXTRA_TOKEN_HANDLE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EXTRA_USER_HANDLE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EXTRA_TOKEN_STATE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EXTRA_TOKEN_REMOVED_RESULT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallback",
    "type" : "ITrustAgentServiceCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPendingGrantTrustTask",
    "type" : "Runnable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mManagingTrust",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : " Lock used to access mPendingGrantTrustTask and mCallback.",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void onCreate()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onUnlockAttempt(boolean successful)",
    "returnType" : "void",
    "comment" : "\n     * Called after the user attempts to authenticate in keyguard with their device credentials,\n     * such as pin, pattern or password.\n     *\n     * @param successful true if the user successfully completed the challenge.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onUserMayRequestUnlock()",
    "returnType" : "void",
    "comment" : "\n     * Called when the user has interacted with the locked device such that they are likely to want\n     * it to be unlocked soon. This approximates the timing when, for example, the platform would\n     * check for face authentication to unlock the device.\n     *\n     * This signal can be used for the agent to make preparations to quickly unlock the device\n     * with {@link #onUserRequestedUnlock}. Agents should not unlock the device based solely on this\n     * signal. There is no guarantee that this method will be called before\n     * {@link #onUserRequestedUnlock(boolean)}.\n     ",
    "links" : [ "#onUserRequestedUnlock", "#onUserRequestedUnlock(boolean)" ]
  }, {
    "name" : "public void onUserRequestedUnlock(boolean dismissKeyguard)",
    "returnType" : "void",
    "comment" : "\n     * Called when the user has interacted with the locked device such that they likely want it\n     * to be unlocked.\n     *\n     * When this is called, there is a high probability that the user wants to unlock the device and\n     * that a biometric method is either not available or not the optimal method at this time. For\n     * example, this may be called after some kinds of biometric authentication failure.\n     *\n     * A call to this method may be preceded by a call to {@link #onUserMayRequestUnlock} which\n     * the agent can use as a signal to prepare for a subsequent call to this method.\n     *\n     * To attempt to unlock the device, the agent needs to call\n     * {@link #grantTrust(CharSequence, long, int)}.\n     *\n     * @param dismissKeyguard true when the user wants keyguard dismissed\n     *\n     * @see #FLAG_GRANT_TRUST_TEMPORARY_AND_RENEWABLE\n     ",
    "links" : [ "#grantTrust(CharSequence", "#onUserMayRequestUnlock" ]
  }, {
    "name" : "public void onTrustTimeout()",
    "returnType" : "void",
    "comment" : "\n     * Called when the timeout provided by the agent expires.  Note that this may be called earlier\n     * than requested by the agent if the trust timeout is adjusted by the system or\n     * {@link DevicePolicyManager}.  The agent is expected to re-evaluate the trust state and only\n     * call {@link #grantTrust(CharSequence, long, boolean)} if the trust state should be\n     * continued.\n     ",
    "links" : [ "#grantTrust(CharSequence", "android.app.admin.DevicePolicyManager" ]
  }, {
    "name" : "public void onDeviceLocked()",
    "returnType" : "void",
    "comment" : "\n     * Called when the device enters a state where a PIN, pattern or\n     * password must be entered to unlock it.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onDeviceUnlocked()",
    "returnType" : "void",
    "comment" : "\n     * Called when the device leaves a state where a PIN, pattern or\n     * password must be entered to unlock it.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onDeviceUnlockLockout(long timeoutMs)",
    "returnType" : "void",
    "comment" : "\n     * Called when the device enters a temporary unlock lockout.\n     *\n     * <p>This occurs when the user has consecutively failed to unlock the device too many times,\n     * and must wait until a timeout has passed to perform another attempt. The user may then only\n     * use strong authentication mechanisms (PIN, pattern or password) to unlock the device.\n     * Calls to {@link #grantTrust(CharSequence, long, int)} will be ignored until the user has\n     * unlocked the device and {@link #onDeviceUnlocked()} is called.\n     *\n     * @param timeoutMs The amount of time, in milliseconds, that needs to elapse before the user\n     *    can attempt to unlock the device again.\n     ",
    "links" : [ "#grantTrust(CharSequence", "#onDeviceUnlocked()" ]
  }, {
    "name" : "public void onEscrowTokenAdded(byte[] token, long handle, UserHandle user)",
    "returnType" : "void",
    "comment" : "\n     * Called when an escrow token is added for user userId.\n     *\n     * @param token the added token\n     * @param handle the handle to the corresponding internal synthetic password. A user is unlocked\n     * by presenting both handle and escrow token.\n     * @param user the user to which the escrow token is added.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onEscrowTokenStateReceived(long handle, @TokenState int tokenState)",
    "returnType" : "void",
    "comment" : "\n     * Called when an escrow token state is received upon request.\n     *\n     * @param handle the handle to the internal synthetic password.\n     * @param state the state of the requested escrow token, see {@link TokenState}.\n     *\n     ",
    "links" : [ "TokenState" ]
  }, {
    "name" : "public void onEscrowTokenRemoved(long handle, boolean successful)",
    "returnType" : "void",
    "comment" : "\n     * Called when an escrow token is removed.\n     *\n     * @param handle the handle to the removed the synthetic password.\n     * @param successful whether the removing operaiton is achieved.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "private void onError(String msg)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean onConfigure(List<PersistableBundle> options)",
    "returnType" : "boolean",
    "comment" : "\n     * Called when device policy admin wants to enable specific options for agent in response to\n     * {@link DevicePolicyManager#setKeyguardDisabledFeatures(ComponentName, int)} and\n     * {@link DevicePolicyManager#setTrustAgentConfiguration(ComponentName, ComponentName,\n     * PersistableBundle)}.\n     * <p>Agents that support configuration options should overload this method and return 'true'.\n     *\n     * @param options The aggregated list of options or an empty list if no restrictions apply.\n     * @return true if it supports configuration options.\n     ",
    "links" : [ "android.app.admin.DevicePolicyManager#setTrustAgentConfiguration(ComponentName", "android.app.admin.DevicePolicyManager#setKeyguardDisabledFeatures(ComponentName" ]
  }, {
    "name" : "public final void grantTrust(final CharSequence message, final long durationMs, final boolean initiatedByUser)",
    "returnType" : "void",
    "comment" : "\n     * Attempts to grant trust on the device.\n     *\n     * @param initiatedByUser see {@link #FLAG_GRANT_TRUST_INITIATED_BY_USER}\n     * @deprecated use {@link #grantTrust(CharSequence, long, int, Consumer)} instead.\n     ",
    "links" : [ "#grantTrust(CharSequence", "#FLAG_GRANT_TRUST_INITIATED_BY_USER" ]
  }, {
    "name" : "public final void grantTrust(final CharSequence message, final long durationMs, @GrantTrustFlags final int flags)",
    "returnType" : "void",
    "comment" : "\n     * Attempts to grant trust on the device.\n     * @deprecated use {@link #grantTrust(CharSequence, long, int, Consumer)} instead.\n     ",
    "links" : [ "#grantTrust(CharSequence" ]
  }, {
    "name" : "public final void grantTrust(@NonNull final CharSequence message, final long durationMs, @GrantTrustFlags final int flags, @Nullable final Consumer<GrantTrustResult> resultCallback)",
    "returnType" : "void",
    "comment" : "\n     * Attempts to grant trust on the device.\n     *\n     * @param message describes why the device is trusted, e.g. \"Trusted by location\".\n     * @param durationMs amount of time in milliseconds to keep the device in a trusted state.\n     *    Trust for this agent will automatically be revoked when the timeout expires unless\n     *    extended by a subsequent call to this function. The timeout is measured from the\n     *    invocation of this function as dictated by {@link SystemClock#elapsedRealtime())}.\n     *    For security reasons, the value should be no larger than necessary.\n     *    The value may be adjusted by the system as necessary to comply with a policy controlled\n     *    by the system or {@link DevicePolicyManager} restrictions. See {@link #onTrustTimeout()}\n     *    for determining when trust expires.\n     * @param flags flags to control call: see constants prefixed by {@code FLAG_GRANT_TRUST_}.\n     * @param resultCallback may be called with the results of the grant\n     * @throws IllegalStateException if the agent is not currently managing trust.\n     *\n     * See {@link GrantTrustResult} for the cases where {@code resultCallback} will be called.\n     ",
    "links" : [ "#elapsedRealtime())", "android.app.admin.DevicePolicyManager", "#onTrustTimeout()", "android.service.trust.GrantTrustResult" ]
  }, {
    "name" : "public final void revokeTrust()",
    "returnType" : "void",
    "comment" : "\n     * Call to revoke trust on the device.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void setManagingTrust(boolean managingTrust)",
    "returnType" : "void",
    "comment" : "\n     * Call to notify the system if the agent is ready to manage trust.\n     *\n     * This property is not persistent across recreating the service and defaults to false.\n     * Therefore this method is typically called when initializing the agent in {@link #onCreate}.\n     *\n     * @param managingTrust indicates if the agent would like to manage trust.\n     ",
    "links" : [ "#onCreate" ]
  }, {
    "name" : "public final void addEscrowToken(byte[] token, UserHandle user)",
    "returnType" : "void",
    "comment" : "\n     * Call to add an escrow token to derive a synthetic password. A synthetic password is an\n     * alternaive to the user-set password/pin/pattern in order to unlock encrypted disk. An escrow\n     * token can be taken and internally derive the synthetic password. The new added token will not\n     * be acivated until the user input the correct PIN/Passcode/Password once.\n     *\n     * Result will be return by callback {@link #onEscrowTokenAdded(long, int)}\n     *\n     * @param token an escrow token of high entropy.\n     * @param user the user which the escrow token will be added to.\n     *\n     ",
    "links" : [ "#onEscrowTokenAdded(long" ]
  }, {
    "name" : "public final void isEscrowTokenActive(long handle, UserHandle user)",
    "returnType" : "void",
    "comment" : "\n     * Call to check the active state of an escrow token.\n     *\n     * Result will be return in callback {@link #onEscrowTokenStateReceived(long, boolean)}\n     *\n     * @param handle the handle of escrow token to the internal synthetic password.\n     * @param user the user which the escrow token is added to.\n     *\n     ",
    "links" : [ "#onEscrowTokenStateReceived(long" ]
  }, {
    "name" : "public final void removeEscrowToken(long handle, UserHandle user)",
    "returnType" : "void",
    "comment" : "\n     * Call to remove the escrow token.\n     *\n     * Result will be return in callback {@link #onEscrowTokenRemoved(long, boolean)}\n     *\n     * @param handle the handle of escrow tokent to the internal synthetic password.\n     * @param user the user id which the escrow token is added to.\n     *\n     ",
    "links" : [ "#onEscrowTokenRemoved(long" ]
  }, {
    "name" : "public final void unlockUserWithToken(long handle, byte[] token, UserHandle user)",
    "returnType" : "void",
    "comment" : "\n     * Call to unlock user's FBE.\n     *\n     * @param handle the handle of escrow tokent to the internal synthetic password.\n     * @param token the escrow token\n     * @param user the user about to be unlocked.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void lockUser()",
    "returnType" : "void",
    "comment" : "\n     * Locks the user.\n     *\n     * This revokes any trust granted by this agent and shows keyguard for the user if it is not\n     * currently shown for them. Other users are not affected. Note that this is in contrast to\n     * {@link #revokeTrust()} which does not show keyguard if it is not already shown.\n     *\n     * If the user has no auth method specified, then keyguard will still be shown but can be\n     * dismissed normally.\n     ",
    "links" : [ "#revokeTrust()" ]
  }, {
    "name" : "public final void showKeyguardErrorMessage(@NonNull CharSequence message)",
    "returnType" : "void",
    "comment" : "\n     * Request showing a transient error message on the keyguard.\n     * The message will be visible on the lock screen or always on display if possible but can be\n     * overridden by other keyguard events of higher priority - eg. fingerprint auth error.\n     * Other trust agents may override your message if posted simultaneously.\n     *\n     * @param message Message to show.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final IBinder onBind(Intent intent)",
    "returnType" : "IBinder",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void onCreate()", "public void onUnlockAttempt(boolean successful)", "public void onUserMayRequestUnlock()", "public void onUserRequestedUnlock(boolean dismissKeyguard)", "public void onTrustTimeout()", "public void onDeviceLocked()", "public void onDeviceUnlocked()", "public void onDeviceUnlockLockout(long timeoutMs)", "public void onEscrowTokenAdded(byte[] token, long handle, UserHandle user)", "public void onEscrowTokenStateReceived(long handle, @TokenState int tokenState)", "public void onEscrowTokenRemoved(long handle, boolean successful)", "private void onError(String msg)", "public boolean onConfigure(List<PersistableBundle> options)", "public final void grantTrust(final CharSequence message, final long durationMs, final boolean initiatedByUser)", "public final void grantTrust(final CharSequence message, final long durationMs, @GrantTrustFlags final int flags)", "public final void grantTrust(@NonNull final CharSequence message, final long durationMs, @GrantTrustFlags final int flags, @Nullable final Consumer<GrantTrustResult> resultCallback)", "public final void revokeTrust()", "public final void setManagingTrust(boolean managingTrust)", "public final void addEscrowToken(byte[] token, UserHandle user)", "public final void isEscrowTokenActive(long handle, UserHandle user)", "public final void removeEscrowToken(long handle, UserHandle user)", "public final void unlockUserWithToken(long handle, byte[] token, UserHandle user)", "public final void lockUser()", "public final void showKeyguardErrorMessage(@NonNull CharSequence message)", "public final IBinder onBind(Intent intent)" ],
  "variableNames" : [ "TAG", "DEBUG", "SERVICE_INTERFACE", "TRUST_AGENT_META_DATA", "FLAG_GRANT_TRUST_INITIATED_BY_USER", "FLAG_GRANT_TRUST_DISMISS_KEYGUARD", "FLAG_GRANT_TRUST_TEMPORARY_AND_RENEWABLE", "FLAG_GRANT_TRUST_DISPLAY_MESSAGE", "TOKEN_STATE_ACTIVE", "TOKEN_STATE_INACTIVE", "MSG_UNLOCK_ATTEMPT", "MSG_CONFIGURE", "MSG_TRUST_TIMEOUT", "MSG_DEVICE_LOCKED", "MSG_DEVICE_UNLOCKED", "MSG_UNLOCK_LOCKOUT", "MSG_ESCROW_TOKEN_ADDED", "MSG_ESCROW_TOKEN_STATE_RECEIVED", "MSG_ESCROW_TOKEN_REMOVED", "MSG_USER_REQUESTED_UNLOCK", "MSG_USER_MAY_REQUEST_UNLOCK", "EXTRA_TOKEN", "EXTRA_TOKEN_HANDLE", "EXTRA_USER_HANDLE", "EXTRA_TOKEN_STATE", "EXTRA_TOKEN_REMOVED_RESULT", "mCallback", "mPendingGrantTrustTask", "mManagingTrust", "mLock", "mHandler" ]
}