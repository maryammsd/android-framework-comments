{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/security/cert/X509Extension.java",
  "packageName" : "java.security.cert",
  "className" : "X509Extension",
  "comment" : "",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public boolean hasUnsupportedCriticalExtension()",
    "returnType" : "boolean",
    "comment" : "\n     * Check if there is a critical extension that is not supported.\n     *\n     * @return {@code true} if a critical extension is found that is\n     * not supported, otherwise {@code false}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Set<String> getCriticalExtensionOIDs()",
    "returnType" : "Set<String>",
    "comment" : "\n     * Gets a Set of the OID strings for the extension(s) marked\n     * CRITICAL in the certificate/CRL managed by the object\n     * implementing this interface.\n     *\n     * Here is sample code to get a Set of critical extensions from an\n     * X509Certificate and print the OIDs:\n     * <pre>{@code\n     * X509Certificate cert = null;\n     * try (InputStream inStrm = new FileInputStream(\"DER-encoded-Cert\")) {\n     *     CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n     *     cert = (X509Certificate)cf.generateCertificate(inStrm);\n     * }\n     *\n     * Set<String> critSet = cert.getCriticalExtensionOIDs();\n     * if (critSet != null && !critSet.isEmpty()) {\n     *     System.out.println(\"Set of critical extensions:\");\n     *     for (String oid : critSet) {\n     *         System.out.println(oid);\n     *     }\n     * }\n     * }</pre>\n     * @return a Set (or an empty Set if none are marked critical) of\n     * the extension OID strings for extensions that are marked critical.\n     * If there are no extensions present at all, then this method returns\n     * null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Set<String> getNonCriticalExtensionOIDs()",
    "returnType" : "Set<String>",
    "comment" : "\n     * Gets a Set of the OID strings for the extension(s) marked\n     * NON-CRITICAL in the certificate/CRL managed by the object\n     * implementing this interface.\n     *\n     * Here is sample code to get a Set of non-critical extensions from an\n     * X509CRL revoked certificate entry and print the OIDs:\n     * <pre>{@code\n     * CertificateFactory cf = null;\n     * X509CRL crl = null;\n     * try (InputStream inStrm = new FileInputStream(\"DER-encoded-CRL\")) {\n     *     cf = CertificateFactory.getInstance(\"X.509\");\n     *     crl = (X509CRL)cf.generateCRL(inStrm);\n     * }\n     *\n     * byte[] certData = <DER-encoded certificate data>\n     * ByteArrayInputStream bais = new ByteArrayInputStream(certData);\n     * X509Certificate cert = (X509Certificate)cf.generateCertificate(bais);\n     * X509CRLEntry badCert =\n     *              crl.getRevokedCertificate(cert.getSerialNumber());\n     *\n     * if (badCert != null) {\n     *     Set<String> nonCritSet = badCert.getNonCriticalExtensionOIDs();\n     *     if (nonCritSet != null)\n     *         for (String oid : nonCritSet) {\n     *             System.out.println(oid);\n     *         }\n     * }\n     * }</pre>\n     *\n     * @return a Set (or an empty Set if none are marked non-critical) of\n     * the extension OID strings for extensions that are marked non-critical.\n     * If there are no extensions present at all, then this method returns\n     * null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getExtensionValue(String oid)",
    "returnType" : "byte[]",
    "comment" : "\n     * Gets the DER-encoded OCTET string for the extension value\n     * (<em>extnValue</em>) identified by the passed-in {@code oid}\n     * String.\n     * The {@code oid} string is\n     * represented by a set of nonnegative whole numbers separated\n     * by periods.\n     *\n     * <p>For example:<br>\n     * <table class=\"striped\">\n     * <caption style=\"display:none\">Examples of OIDs and extension names</caption>\n     * <thead>\n     * <tr>\n     * <th scope=\"col\">OID <em>(Object Identifier)</em></th>\n     * <th scope=\"col\">Extension Name</th></tr>\n     * </thead>\n     * <tbody style=\"text-align:left\">\n     * <tr><th scope=\"row\">2.5.29.14</th>\n     * <td>SubjectKeyIdentifier</td></tr>\n     * <tr><th scope=\"row\">2.5.29.15</th>\n     * <td>KeyUsage</td></tr>\n     * <tr><th scope=\"row\">2.5.29.16</th>\n     * <td>PrivateKeyUsage</td></tr>\n     * <tr><th scope=\"row\">2.5.29.17</th>\n     * <td>SubjectAlternativeName</td></tr>\n     * <tr><th scope=\"row\">2.5.29.18</th>\n     * <td>IssuerAlternativeName</td></tr>\n     * <tr><th scope=\"row\">2.5.29.19</th>\n     * <td>BasicConstraints</td></tr>\n     * <tr><th scope=\"row\">2.5.29.30</th>\n     * <td>NameConstraints</td></tr>\n     * <tr><th scope=\"row\">2.5.29.33</th>\n     * <td>PolicyMappings</td></tr>\n     * <tr><th scope=\"row\">2.5.29.35</th>\n     * <td>AuthorityKeyIdentifier</td></tr>\n     * <tr><th scope=\"row\">2.5.29.36</th>\n     * <td>PolicyConstraints</td></tr>\n     * </tbody>\n     * </table>\n     *\n     * @param oid the Object Identifier value for the extension.\n     * @return the DER-encoded octet string of the extension value or\n     * null if it is not present.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public boolean hasUnsupportedCriticalExtension()", "public Set<String> getCriticalExtensionOIDs()", "public Set<String> getNonCriticalExtensionOIDs()", "public byte[] getExtensionValue(String oid)" ],
  "variableNames" : [ ]
}