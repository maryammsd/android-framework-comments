{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/view/InsetsSourceConsumer.java",
  "packageName" : "android.view",
  "className" : "InsetsSourceConsumer",
  "comment" : "\n * Controls the visibility and animations of a single window insets source.\n * @hide\n ",
  "variables" : [ {
    "name" : "mController",
    "type" : "InsetsController",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRequestedVisible",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mState",
    "type" : "InsetsState",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTransactionSupplier",
    "type" : "Supplier<Transaction>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSourceControl",
    "type" : "InsetsSourceControl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHasWindowFocus",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPendingFrame",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPendingVisibleFrame",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsAnimationPending",
    "type" : "boolean",
    "comment" : "\n     * Indicates if we have the pending animation. When we have the control, we need to play the\n     * animation if the requested visibility is different from the current state. But if we haven't\n     * had a leash yet, we will set this flag, and play the animation once we get the leash.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setControl(@Nullable InsetsSourceControl control, @InsetsType int[] showTypes, @InsetsType int[] hideTypes)",
    "returnType" : "void",
    "comment" : "\n     * Updates the control delivered from the server.\n\n     * @param showTypes An integer array with a single entry that determines which types a show\n     *                  animation should be run after setting the control.\n     * @param hideTypes An integer array with a single entry that determines which types a hide\n     *                  animation should be run after setting the control.\n     ",
    "links" : [ ]
  }, {
    "name" : "public InsetsSourceControl getControl()",
    "returnType" : "InsetsSourceControl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected boolean isRequestedVisibleAwaitingControl()",
    "returnType" : "boolean",
    "comment" : "\n     * Determines if the consumer will be shown after control is available.\n     * Note: for system bars this method is same as {@link #isRequestedVisible()}.\n     *\n     * @return {@code true} if consumer has a pending show.\n     ",
    "links" : [ "#isRequestedVisible" ]
  }, {
    "name" : " int getType()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void show(boolean fromIme)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void hide()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void hide(boolean animationFinished, @AnimationType int animationType)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onWindowFocusGained()",
    "returnType" : "void",
    "comment" : "\n     * Called when current window gains focus\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onWindowFocusLost()",
    "returnType" : "void",
    "comment" : "\n     * Called when current window loses focus.\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean hasWindowFocus()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean applyLocalVisibilityOverride()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isRequestedVisible()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int requestShow(boolean fromController)",
    "returnType" : "int",
    "comment" : "\n     * Request to show current window type.\n     *\n     * @param fromController {@code true} if request is coming from controller.\n     *                       (e.g. in IME case, controller is\n     *                       {@link android.inputmethodservice.InputMethodService}).\n     * @return @see {@link ShowResult}.\n     ",
    "links" : [ "android.inputmethodservice.InputMethodService", "ShowResult" ]
  }, {
    "name" : "public void onPerceptible(boolean perceptible)",
    "returnType" : "void",
    "comment" : "\n     * Reports that this source's perceptibility has changed\n     *\n     * @param perceptible true if the source is perceptible, false otherwise.\n     * @see InsetsAnimationControlCallbacks#reportPerceptible\n     ",
    "links" : [ ]
  }, {
    "name" : " void notifyHidden()",
    "returnType" : "void",
    "comment" : "\n     * Notify listeners that window is now hidden.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removeSurface()",
    "returnType" : "void",
    "comment" : "\n     * Remove surface on which this consumer type is drawn.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void updateSource(InsetsSource newSource, @AnimationType int animationType)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean notifyAnimationFinished()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void setRequestedVisible(boolean requestedVisible)",
    "returnType" : "void",
    "comment" : "\n     * Sets requested visibility from the client, regardless of whether we are able to control it at\n     * the moment.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void applyHiddenToControl()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "mController", "mRequestedVisible", "mState", "mType", "TAG", "mTransactionSupplier", "mSourceControl", "mHasWindowFocus", "mPendingFrame", "mPendingVisibleFrame", "mIsAnimationPending" ],
  "methodNames" : [ "public void setControl(@Nullable InsetsSourceControl control, @InsetsType int[] showTypes, @InsetsType int[] hideTypes)", "public InsetsSourceControl getControl()", "protected boolean isRequestedVisibleAwaitingControl()", " int getType()", "public void show(boolean fromIme)", "public void hide()", " void hide(boolean animationFinished, @AnimationType int animationType)", "public void onWindowFocusGained()", "public void onWindowFocusLost()", " boolean hasWindowFocus()", " boolean applyLocalVisibilityOverride()", "public boolean isRequestedVisible()", "public int requestShow(boolean fromController)", "public void onPerceptible(boolean perceptible)", " void notifyHidden()", "public void removeSurface()", "public void updateSource(InsetsSource newSource, @AnimationType int animationType)", "public boolean notifyAnimationFinished()", "protected void setRequestedVisible(boolean requestedVisible)", "private void applyHiddenToControl()" ]
}