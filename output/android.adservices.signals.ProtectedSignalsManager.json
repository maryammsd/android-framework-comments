{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/adservices/signals/ProtectedSignalsManager.java",
  "packageName" : "android.adservices.signals",
  "className" : "ProtectedSignalsManager",
  "comment" : " ProtectedSignalsManager provides APIs for apps and ad-SDKs to manage their protected signals. ",
  "links" : [ ],
  "variables" : [ {
    "name" : "sLogger",
    "type" : "LoggerFactory.Logger",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PROTECTED_SIGNALS_SERVICE",
    "type" : "String",
    "comment" : "\n     * Constant that represents the service name for {@link ProtectedSignalsManager} to be used in\n     * {@link android.adservices.AdServicesFrameworkInitializer#registerServiceWrappers}\n     *\n     * @hide\n     ",
    "links" : [ "android.adservices.AdServicesFrameworkInitializer#registerServiceWrappers", "android.adservices.signals.ProtectedSignalsManager" ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mServiceBinder",
    "type" : "ServiceBinder<IProtectedSignalsService>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static ProtectedSignalsManager get(@NonNull Context context)",
    "returnType" : "ProtectedSignalsManager",
    "comment" : "\n     * Factory method for creating an instance of ProtectedSignalsManager.\n     *\n     * @param context The {@link Context} to use\n     * @return A {@link ProtectedSignalsManager} instance\n     ",
    "links" : [ "android.app.sdksandbox.SandboxedSdkContext", "android.adservices.signals.ProtectedSignalsManager" ]
  }, {
    "name" : "public ProtectedSignalsManager initialize(@NonNull Context context)",
    "returnType" : "ProtectedSignalsManager",
    "comment" : "\n     * Initializes {@link ProtectedSignalsManager} with the given {@code context}.\n     *\n     * <p>This method is called by the {@link SandboxedSdkContext} to propagate the correct context.\n     * For more information check the javadoc on the {@link\n     * android.app.sdksandbox.SdkSandboxSystemServiceRegistry}.\n     *\n     * @hide\n     * @see android.app.sdksandbox.SdkSandboxSystemServiceRegistry\n     ",
    "links" : [ "android.adservices.signals.ProtectedSignalsManager", "android.app.sdksandbox.SandboxedSdkContext", "android.app.sdksandbox.SdkSandboxSystemServiceRegistry" ]
  }, {
    "name" : " IProtectedSignalsService getService()",
    "returnType" : "IProtectedSignalsService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void updateSignals(@NonNull UpdateSignalsRequest updateSignalsRequest, @NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<Object, Exception> receiver)",
    "returnType" : "void",
    "comment" : "\n     * The updateSignals API will retrieve a JSON from the URI that describes which signals to add\n     * or remove. This API also allows registering the encoder endpoint. The endpoint is used to\n     * download an encoding logic, which enables encoding the signals.\n     *\n     * <p>The top level keys for the JSON must correspond to one of 5 commands:\n     *\n     * <p>\"put\" - Adds a new signal, overwriting any existing signals with the same key. The value\n     * for this is a JSON object where the keys are base 64 strings corresponding to the key to put\n     * for and the values are base 64 string corresponding to the value to put.\n     *\n     * <p>\"append\" - Appends a new signal/signals to a time series of signals, removing the oldest\n     * signals to make room for the new ones if the size of the series exceeds the given maximum.\n     * The value for this is a JSON object where the keys are base 64 strings corresponding to the\n     * key to append to and the values are objects with two fields: \"values\" and \"maxSignals\" .\n     * \"values\" is a list of base 64 strings corresponding to signal values to append to the time\n     * series. \"maxSignals\" is the maximum number of values that are allowed in this timeseries. If\n     * the current number of signals associated with the key exceeds maxSignals the oldest signals\n     * will be removed. Note that you can append to a key added by put. Not that appending more than\n     * the maximum number of values will cause a failure.\n     *\n     * <p>\"put_if_not_present\" - Adds a new signal only if there are no existing signals with the\n     * same key. The value for this is a JSON object where the keys are base 64 strings\n     * corresponding to the key to put for and the values are base 64 string corresponding to the\n     * value to put.\n     *\n     * <p>\"remove\" - Removes the signal for a key. The value of this is a list of base 64 strings\n     * corresponding to the keys of signals that should be deleted.\n     *\n     * <p>\"update_encoder\" - Provides an action to update the endpoint, and a URI which can be used\n     * to retrieve an encoding logic. The sub-key for providing an update action is \"action\" and the\n     * values currently supported are:\n     *\n     * <ol>\n     *   <li>\"REGISTER\" : Registers the encoder endpoint if provided for the first time or\n     *       overwrites the existing one with the newly provided endpoint. Providing the \"endpoint\"\n     *       is required for the \"REGISTER\" action.\n     * </ol>\n     *\n     * <p>The sub-key for providing an encoder endpoint is \"endpoint\" and the value is the URI\n     * string for the endpoint.\n     *\n     * <p>On success, the onResult method of the provided OutcomeReceiver will be called with an\n     * empty Object. This Object has no significance and is used merely as a placeholder.\n     *\n     * <p>Key may only be operated on by one command per JSON. If two command attempt to operate on\n     * the same key, this method will through an {@link IllegalArgumentException}\n     *\n     * <p>This call fails with an {@link SecurityException} if\n     *\n     * <ol>\n     *   <li>the {@code ownerPackageName} is not calling app's package name and/or\n     *   <li>the buyer is not authorized to use the API.\n     * </ol>\n     *\n     * <p>This call fails with an {@link IllegalArgumentException} if\n     *\n     * <ol>\n     *   <li>The JSON retrieved from the server is not valid.\n     *   <li>The provided URI is invalid.\n     * </ol>\n     *\n     * <p>This call fails with {@link LimitExceededException} if the calling package exceeds the\n     * allowed rate limits and is throttled.\n     *\n     * <p>This call fails with an {@link IllegalStateException} if an internal service error is\n     * encountered.\n     ",
    "links" : [ "android.os.LimitExceededException", "IllegalStateException", "SecurityException", "IllegalArgumentException" ]
  }, {
    "name" : "private String getCallerPackageName()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static ProtectedSignalsManager get(@NonNull Context context)", "public ProtectedSignalsManager initialize(@NonNull Context context)", " IProtectedSignalsService getService()", "public void updateSignals(@NonNull UpdateSignalsRequest updateSignalsRequest, @NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<Object, Exception> receiver)", "private String getCallerPackageName()" ],
  "variableNames" : [ "sLogger", "PROTECTED_SIGNALS_SERVICE", "mContext", "mServiceBinder" ]
}