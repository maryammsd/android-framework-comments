{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xml/serializer/Serializer.java",
  "packageName" : "org.apache.xml.serializer",
  "className" : "Serializer",
  "comment" : "\n * The Serializer interface is implemented by a serializer to enable users to:\n * <ul>\n * <li>get and set streams or writers\n * <li>configure the serializer with key/value properties\n * <li>get an org.xml.sax.ContentHandler or a DOMSerializer to provide input to\n * </ul>\n *\n * <p>\n * Here is an example using the asContentHandler() method:\n * <pre>\n * java.util.Properties props = \n *   OutputPropertiesFactory.getDefaultMethodProperties(Method.TEXT);\n * Serializer ser = SerializerFactory.getSerializer(props);\n * java.io.PrintStream ostream = System.out; \n * ser.setOutputStream(ostream);\n * \n * // Provide the SAX input events\n * ContentHandler handler = ser.asContentHandler();\n * handler.startDocument();\n * char[] chars = { 'a', 'b', 'c' };\n * handler.characters(chars, 0, chars.length);\n * handler.endDocument();\n * \n * ser.reset(); // get ready to use the serializer for another document\n *              // of the same output method (TEXT).\n * </pre>\n * \n * <p>\n * As an alternate to supplying a series of SAX events as input through the \n * ContentHandler interface, the input to serialize may be given as a DOM. \n * <p>\n * For example:\n * <pre>\n * org.w3c.dom.Document     inputDoc;\n * org.apache.xml.serializer.Serializer   ser;\n * java.io.Writer owriter;\n * \n * java.util.Properties props = \n *   OutputPropertiesFactory.getDefaultMethodProperties(Method.XML);\n * Serializer ser = SerializerFactory.getSerializer(props);\n * owriter = ...;  // create a writer to serialize the document to\n * ser.setWriter( owriter );\n * \n * inputDoc = ...; // create the DOM document to be serialized\n * DOMSerializer dser = ser.asDOMSerializer(); // a DOM will be serialized\n * dser.serialize(inputDoc); // serialize the DOM, sending output to owriter\n * \n * ser.reset(); // get ready to use the serializer for another document\n *              // of the same output method.\n * </pre>\n * \n * This interface is a public API.\n * \n * @see Method\n * @see OutputPropertiesFactory\n * @see SerializerFactory\n * @see DOMSerializer\n * @see ContentHandler\n * \n * @xsl.usage general\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public void setOutputStream(OutputStream output)",
    "returnType" : "void",
    "comment" : "\n     * Specifies an output stream to which the document should be\n     * serialized. This method should not be called while the\n     * serializer is in the process of serializing a document.\n     * <p>\n     * The encoding specified in the output {@link Properties} is used, or\n     * if no encoding was specified, the default for the selected\n     * output method.\n     * <p>\n     * Only one of setWriter() or setOutputStream() should be called.\n     *\n     * @param output The output stream\n     ",
    "links" : [ "java.util.Properties" ]
  }, {
    "name" : "public OutputStream getOutputStream()",
    "returnType" : "OutputStream",
    "comment" : "\n     * Get the output stream where the events will be serialized to.\n     *\n     * @return reference to the result stream, or null if only a writer was\n     * set.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setWriter(Writer writer)",
    "returnType" : "void",
    "comment" : "\n     * Specifies a writer to which the document should be serialized.\n     * This method should not be called while the serializer is in\n     * the process of serializing a document.\n     * <p>\n     * The encoding specified for the output {@link Properties} must be\n     * identical to the output format used with the writer.\n     * \n     * <p>\n     * Only one of setWriter() or setOutputStream() should be called.\n     *\n     * @param writer The output writer stream\n     ",
    "links" : [ "java.util.Properties" ]
  }, {
    "name" : "public Writer getWriter()",
    "returnType" : "Writer",
    "comment" : "\n     * Get the character stream where the events will be serialized to.\n     *\n     * @return Reference to the result Writer, or null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOutputFormat(Properties format)",
    "returnType" : "void",
    "comment" : "\n     * Specifies an output format for this serializer. It the\n     * serializer has already been associated with an output format,\n     * it will switch to the new format. This method should not be\n     * called while the serializer is in the process of serializing\n     * a document.\n     * <p>\n     * The standard property keys supported are: \"method\", \"version\", \"encoding\",\n     * \"omit-xml-declaration\", \"standalone\", doctype-public\",\n     * \"doctype-system\", \"cdata-section-elements\", \"indent\", \"media-type\". \n     * These property keys and their values are described in the XSLT recommendation,\n     * see {@link <a href=\"http://www.w3.org/TR/1999/REC-xslt-19991116\"> XSLT 1.0 recommendation</a>}\n     * <p>\n     * The non-standard property keys supported are defined in {@link OutputPropertiesFactory}.\n     *\n     * <p>\n     * This method can be called multiple times before a document is serialized. Each \n     * time it is called more, or over-riding property values, can be specified. One \n     * property value that can not be changed is that of the \"method\" property key.\n     * <p>\n     * The value of the \"cdata-section-elements\" property key is a whitespace\n     * separated list of elements. If the element is in a namespace then \n     * value is passed in this format: {uri}localName \n     * <p>\n     * If the \"cdata-section-elements\" key is specified on multiple calls\n     * to this method the set of elements specified in the value\n     * is not replaced from one call to the\n     * next, but it is cumulative across the calls.\n     *\n     * @param format The output format to use, as a set of key/value pairs.\n     ",
    "links" : [ "org.apache.xml.serializer.OutputPropertiesFactory" ]
  }, {
    "name" : "public Properties getOutputFormat()",
    "returnType" : "Properties",
    "comment" : "\n     * Returns the output format properties for this serializer.\n     *\n     * @return The output format key/value pairs in use.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ContentHandler asContentHandler() throws IOException",
    "returnType" : "ContentHandler",
    "comment" : "\n     * Return a {@link ContentHandler} interface to provide SAX input to.\n     * Through the returned object the document to be serailized,\n     * as a series of SAX events, can be provided to the serialzier.\n     * If the serializer does not support the {@link ContentHandler}\n     * interface, it will return null.\n     * <p>\n     * In principle only one of asDOMSerializer() or asContentHander() \n     * should be called.\n     *\n     * @return A {@link ContentHandler} interface into this serializer,\n     *  or null if the serializer is not SAX 2 capable\n     * @throws IOException An I/O exception occured\n     ",
    "links" : [ "org.xml.sax.ContentHandler" ]
  }, {
    "name" : "public DOMSerializer asDOMSerializer() throws IOException",
    "returnType" : "DOMSerializer",
    "comment" : "\n     * Return a {@link DOMSerializer} interface into this serializer.\n     * Through the returned object the document to be serialized,\n     * a DOM, can be provided to the serializer.\n     * If the serializer does not support the {@link DOMSerializer}\n     * interface, it should return null.\n     * <p>\n     * In principle only one of asDOMSerializer() or asContentHander() \n     * should be called.\n     *\n     * @return A {@link DOMSerializer} interface into this serializer,\n     *  or null if the serializer is not DOM capable\n     * @throws IOException An I/O exception occured\n     ",
    "links" : [ "org.apache.xml.serializer.DOMSerializer" ]
  }, {
    "name" : "public boolean reset()",
    "returnType" : "boolean",
    "comment" : "\n     * This method resets the serializer. \n     * If this method returns true, the\n     * serializer may be used for subsequent serialization of new\n     * documents. It is possible to change the output format and\n     * output stream prior to serializing, or to reuse the existing\n     * output format and output stream or writer.\n     *\n     * @return True if serializer has been reset and can be reused\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object asDOM3Serializer() throws IOException",
    "returnType" : "Object",
    "comment" : "\n     * Return an Object into this serializer to be cast to a DOM3Serializer.\n     * Through the returned object the document to be serialized,\n     * a DOM (Level 3), can be provided to the serializer.\n     * If the serializer does not support casting to a {@link DOM3Serializer}\n     * interface, it should return null.\n     * <p>\n     * In principle only one of asDOM3Serializer() or asContentHander() \n     * should be called.\n     *\n     * @return An Object to be cast to a DOM3Serializer interface into this serializer,\n     *  or null if the serializer is not DOM capable\n     * @throws IOException An I/O exception occured\n     ",
    "links" : [ "org.apache.xml.serializer.DOM3Serializer" ]
  } ],
  "methodNames" : [ "public void setOutputStream(OutputStream output)", "public OutputStream getOutputStream()", "public void setWriter(Writer writer)", "public Writer getWriter()", "public void setOutputFormat(Properties format)", "public Properties getOutputFormat()", "public ContentHandler asContentHandler() throws IOException", "public DOMSerializer asDOMSerializer() throws IOException", "public boolean reset()", "public Object asDOM3Serializer() throws IOException" ],
  "variableNames" : [ ]
}