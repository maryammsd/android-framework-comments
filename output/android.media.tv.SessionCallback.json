{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/tv/TvInputManager.java",
  "packageName" : "android.media.tv",
  "className" : "SessionCallback",
  "comment" : "\n     * Interface used to receive the created session.\n     * @hide\n     ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public void onSessionCreated(@Nullable Session session)",
    "returnType" : "void",
    "comment" : "\n         * This is called after {@link TvInputManager#createSession} has been processed.\n         *\n         * @param session A {@link TvInputManager.Session} instance created. This can be\n         *            {@code null} if the creation request failed.\n         ",
    "links" : [ "android.media.tv.TvInputManager#createSession", "TvInputManager.Session" ]
  }, {
    "name" : "public void onSessionReleased(Session session)",
    "returnType" : "void",
    "comment" : "\n         * This is called when {@link TvInputManager.Session} is released.\n         * This typically happens when the process hosting the session has crashed or been killed.\n         *\n         * @param session A {@link TvInputManager.Session} instance released.\n         ",
    "links" : [ "TvInputManager.Session" ]
  }, {
    "name" : "public void onChannelRetuned(Session session, Uri channelUri)",
    "returnType" : "void",
    "comment" : "\n         * This is called when the channel of this session is changed by the underlying TV input\n         * without any {@link TvInputManager.Session#tune(Uri)} request.\n         *\n         * @param session A {@link TvInputManager.Session} associated with this callback.\n         * @param channelUri The URI of a channel.\n         ",
    "links" : [ "TvInputManager.Session#tune(Uri)", "TvInputManager.Session" ]
  }, {
    "name" : "public void onAudioPresentationsChanged(Session session, List<AudioPresentation> audioPresentations)",
    "returnType" : "void",
    "comment" : "\n         * This is called when the audio presentation information of the session has been changed.\n         *\n         * @param session A {@link TvInputManager.Session} associated with this callback.\n         * @param audioPresentations An updated list of selectable audio presentations.\n         ",
    "links" : [ "TvInputManager.Session" ]
  }, {
    "name" : "public void onAudioPresentationSelected(Session session, int presentationId, int programId)",
    "returnType" : "void",
    "comment" : "\n         * This is called when an audio presentation is selected.\n         *\n         * @param session A {@link TvInputManager.Session} associated with this callback.\n         * @param presentationId The ID of the selected audio presentation.\n         * @param programId The ID of the program providing the selected audio presentation.\n         ",
    "links" : [ "TvInputManager.Session" ]
  }, {
    "name" : "public void onTracksChanged(Session session, List<TvTrackInfo> tracks)",
    "returnType" : "void",
    "comment" : "\n         * This is called when the track information of the session has been changed.\n         *\n         * @param session A {@link TvInputManager.Session} associated with this callback.\n         * @param tracks A list which includes track information.\n         ",
    "links" : [ "TvInputManager.Session" ]
  }, {
    "name" : "public void onTrackSelected(Session session, int type, @Nullable String trackId)",
    "returnType" : "void",
    "comment" : "\n         * This is called when a track for a given type is selected.\n         *\n         * @param session A {@link TvInputManager.Session} associated with this callback.\n         * @param type The type of the selected track. The type can be\n         *            {@link TvTrackInfo#TYPE_AUDIO}, {@link TvTrackInfo#TYPE_VIDEO} or\n         *            {@link TvTrackInfo#TYPE_SUBTITLE}.\n         * @param trackId The ID of the selected track. When {@code null} the currently selected\n         *            track for a given type should be unselected.\n         ",
    "links" : [ "android.media.tv.TvTrackInfo#TYPE_VIDEO", "android.media.tv.TvTrackInfo#TYPE_SUBTITLE", "TvInputManager.Session", "android.media.tv.TvTrackInfo#TYPE_AUDIO" ]
  }, {
    "name" : "public void onVideoSizeChanged(Session session, int width, int height)",
    "returnType" : "void",
    "comment" : "\n         * This is invoked when the video size has been changed. It is also called when the first\n         * time video size information becomes available after the session is tuned to a specific\n         * channel.\n         *\n         * @param session A {@link TvInputManager.Session} associated with this callback.\n         * @param width The width of the video.\n         * @param height The height of the video.\n         ",
    "links" : [ "TvInputManager.Session" ]
  }, {
    "name" : "public void onVideoAvailable(Session session)",
    "returnType" : "void",
    "comment" : "\n         * This is called when the video is available, so the TV input starts the playback.\n         *\n         * @param session A {@link TvInputManager.Session} associated with this callback.\n         ",
    "links" : [ "TvInputManager.Session" ]
  }, {
    "name" : "public void onVideoUnavailable(Session session, int reason)",
    "returnType" : "void",
    "comment" : "\n         * This is called when the video is not available, so the TV input stops the playback.\n         *\n         * @param session A {@link TvInputManager.Session} associated with this callback.\n         * @param reason The reason why the TV input stopped the playback:\n         * <ul>\n         * <li>{@link TvInputManager#VIDEO_UNAVAILABLE_REASON_UNKNOWN}\n         * <li>{@link TvInputManager#VIDEO_UNAVAILABLE_REASON_TUNING}\n         * <li>{@link TvInputManager#VIDEO_UNAVAILABLE_REASON_WEAK_SIGNAL}\n         * <li>{@link TvInputManager#VIDEO_UNAVAILABLE_REASON_BUFFERING}\n         * <li>{@link TvInputManager#VIDEO_UNAVAILABLE_REASON_AUDIO_ONLY}\n         * </ul>\n         ",
    "links" : [ "android.media.tv.TvInputManager#VIDEO_UNAVAILABLE_REASON_AUDIO_ONLY", "android.media.tv.TvInputManager#VIDEO_UNAVAILABLE_REASON_WEAK_SIGNAL", "android.media.tv.TvInputManager#VIDEO_UNAVAILABLE_REASON_TUNING", "TvInputManager.Session", "android.media.tv.TvInputManager#VIDEO_UNAVAILABLE_REASON_UNKNOWN", "android.media.tv.TvInputManager#VIDEO_UNAVAILABLE_REASON_BUFFERING" ]
  }, {
    "name" : "public void onVideoFreezeUpdated(Session session, boolean isFrozen)",
    "returnType" : "void",
    "comment" : "\n         * This is called when the video freeze state has been updated.\n         * If {@code true}, the video is frozen on the last frame while audio playback continues.\n         * @param session A {@link TvInputManager.Session} associated with this callback.\n         * @param isFrozen Whether the video is frozen\n         ",
    "links" : [ "TvInputManager.Session" ]
  }, {
    "name" : "public void onContentAllowed(Session session)",
    "returnType" : "void",
    "comment" : "\n         * This is called when the current program content turns out to be allowed to watch since\n         * its content rating is not blocked by parental controls.\n         *\n         * @param session A {@link TvInputManager.Session} associated with this callback.\n         ",
    "links" : [ "TvInputManager.Session" ]
  }, {
    "name" : "public void onContentBlocked(Session session, TvContentRating rating)",
    "returnType" : "void",
    "comment" : "\n         * This is called when the current program content turns out to be not allowed to watch\n         * since its content rating is blocked by parental controls.\n         *\n         * @param session A {@link TvInputManager.Session} associated with this callback.\n         * @param rating The content ration of the blocked program.\n         ",
    "links" : [ "TvInputManager.Session" ]
  }, {
    "name" : "public void onLayoutSurface(Session session, int left, int top, int right, int bottom)",
    "returnType" : "void",
    "comment" : "\n         * This is called when {@link TvInputService.Session#layoutSurface} is called to change the\n         * layout of surface.\n         *\n         * @param session A {@link TvInputManager.Session} associated with this callback.\n         * @param left Left position.\n         * @param top Top position.\n         * @param right Right position.\n         * @param bottom Bottom position.\n         ",
    "links" : [ "TvInputService.Session#layoutSurface", "TvInputManager.Session" ]
  }, {
    "name" : "public void onSessionEvent(Session session, String eventType, Bundle eventArgs)",
    "returnType" : "void",
    "comment" : "\n         * This is called when a custom event has been sent from this session.\n         *\n         * @param session A {@link TvInputManager.Session} associated with this callback\n         * @param eventType The type of the event.\n         * @param eventArgs Optional arguments of the event.\n         ",
    "links" : [ "TvInputManager.Session" ]
  }, {
    "name" : "public void onTimeShiftStatusChanged(Session session, int status)",
    "returnType" : "void",
    "comment" : "\n         * This is called when the time shift status is changed.\n         *\n         * @param session A {@link TvInputManager.Session} associated with this callback.\n         * @param status The current time shift status. Should be one of the followings.\n         * <ul>\n         * <li>{@link TvInputManager#TIME_SHIFT_STATUS_UNSUPPORTED}\n         * <li>{@link TvInputManager#TIME_SHIFT_STATUS_UNAVAILABLE}\n         * <li>{@link TvInputManager#TIME_SHIFT_STATUS_AVAILABLE}\n         * </ul>\n         ",
    "links" : [ "android.media.tv.TvInputManager#TIME_SHIFT_STATUS_UNSUPPORTED", "TvInputManager.Session", "android.media.tv.TvInputManager#TIME_SHIFT_STATUS_AVAILABLE", "android.media.tv.TvInputManager#TIME_SHIFT_STATUS_UNAVAILABLE" ]
  }, {
    "name" : "public void onTimeShiftStartPositionChanged(Session session, long timeMs)",
    "returnType" : "void",
    "comment" : "\n         * This is called when the start position for time shifting has changed.\n         *\n         * @param session A {@link TvInputManager.Session} associated with this callback.\n         * @param timeMs The start position for time shifting, in milliseconds since the epoch.\n         ",
    "links" : [ "TvInputManager.Session" ]
  }, {
    "name" : "public void onTimeShiftCurrentPositionChanged(Session session, long timeMs)",
    "returnType" : "void",
    "comment" : "\n         * This is called when the current position for time shifting is changed.\n         *\n         * @param session A {@link TvInputManager.Session} associated with this callback.\n         * @param timeMs The current position for time shifting, in milliseconds since the epoch.\n         ",
    "links" : [ "TvInputManager.Session" ]
  }, {
    "name" : "public void onAitInfoUpdated(Session session, AitInfo aitInfo)",
    "returnType" : "void",
    "comment" : "\n         * This is called when AIT info is updated.\n         * @param session A {@link TvInputManager.Session} associated with this callback.\n         * @param aitInfo The current AIT info.\n         ",
    "links" : [ "TvInputManager.Session" ]
  }, {
    "name" : "public void onSignalStrengthUpdated(Session session, @SignalStrength int strength)",
    "returnType" : "void",
    "comment" : "\n         * This is called when signal strength is updated.\n         * @param session A {@link TvInputManager.Session} associated with this callback.\n         * @param strength The current signal strength.\n         ",
    "links" : [ "TvInputManager.Session" ]
  }, {
    "name" : "public void onCueingMessageAvailability(Session session, boolean available)",
    "returnType" : "void",
    "comment" : "\n         * This is called when cueing message becomes available or unavailable.\n         * @param session A {@link TvInputManager.Session} associated with this callback.\n         * @param available The current availability of cueing message. {@code true} if cueing\n         *                  message is available; {@code false} if it becomes unavailable.\n         ",
    "links" : [ "TvInputManager.Session" ]
  }, {
    "name" : "public void onTimeShiftMode(Session session, @TimeShiftMode int mode)",
    "returnType" : "void",
    "comment" : "\n         * This is called when time shift mode is set or updated.\n         * @param session A {@link TvInputManager.Session} associated with this callback.\n         * @param mode The current time shift mode. The value is one of the following:\n         * {@link TvInputManager#TIME_SHIFT_MODE_OFF}, {@link TvInputManager#TIME_SHIFT_MODE_LOCAL},\n         * {@link TvInputManager#TIME_SHIFT_MODE_NETWORK},\n         * {@link TvInputManager#TIME_SHIFT_MODE_AUTO}.\n         ",
    "links" : [ "android.media.tv.TvInputManager#TIME_SHIFT_MODE_AUTO", "TvInputManager.Session", "android.media.tv.TvInputManager#TIME_SHIFT_MODE_OFF", "android.media.tv.TvInputManager#TIME_SHIFT_MODE_NETWORK", "android.media.tv.TvInputManager#TIME_SHIFT_MODE_LOCAL" ]
  }, {
    "name" : "public void onAvailableSpeeds(Session session, float[] speeds)",
    "returnType" : "void",
    "comment" : "\n         * Informs the app available speeds for time-shifting.\n         * @param session A {@link TvInputManager.Session} associated with this callback.\n         * @param speeds An ordered array of playback speeds, expressed as values relative to the\n         *               normal playback speed (1.0), at which the current content can be played as\n         *               a time-shifted broadcast. This is an empty array if the supported playback\n         *               speeds are unknown or the video/broadcast is not in time shift mode. If\n         *               currently in time shift mode, this array will normally include at least\n         *               the values 1.0 (normal speed) and 0.0 (paused).\n         * @see PlaybackParams#getSpeed()\n         ",
    "links" : [ "TvInputManager.Session" ]
  }, {
    "name" : "public void onTuned(Session session, Uri channelUri)",
    "returnType" : "void",
    "comment" : "\n         * This is called when the session has been tuned to the given channel.\n         *\n         * @param channelUri The URI of a channel.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onTvMessage(Session session, @TvInputManager.TvMessageType int type, Bundle data)",
    "returnType" : "void",
    "comment" : "\n         * This is called when the session receives a new TV Message\n         *\n         * @param session A {@link TvInputManager.Session} associated with this callback.\n         * @param type The type of message received, such as {@link #TV_MESSAGE_TYPE_WATERMARK}\n         * @param data The raw data of the message. The bundle keys are:\n         *             {@link TvInputManager#TV_MESSAGE_KEY_STREAM_ID},\n         *             {@link TvInputManager#TV_MESSAGE_KEY_GROUP_ID},\n         *             {@link TvInputManager#TV_MESSAGE_KEY_SUBTYPE},\n         *             {@link TvInputManager#TV_MESSAGE_KEY_RAW_DATA}.\n         *             See {@link TvInputManager#TV_MESSAGE_KEY_SUBTYPE} for more information on\n         *             how to parse this data.\n         *\n         ",
    "links" : [ "android.media.tv.TvInputManager#TV_MESSAGE_KEY_GROUP_ID", "android.media.tv.TvInputManager#TV_MESSAGE_KEY_STREAM_ID", "#TV_MESSAGE_TYPE_WATERMARK", "TvInputManager.Session", "android.media.tv.TvInputManager#TV_MESSAGE_KEY_SUBTYPE", "android.media.tv.TvInputManager#TV_MESSAGE_KEY_RAW_DATA" ]
  }, {
    "name" : " void onRecordingStopped(Session session, Uri recordedProgramUri)",
    "returnType" : "void",
    "comment" : "\n         * This is called when the current recording session has stopped recording and created a\n         * new data entry in the {@link TvContract.RecordedPrograms} table that describes the newly\n         * recorded program.\n         *\n         * @param recordedProgramUri The URI for the newly recorded program.\n         *",
    "links" : [ "TvContract.RecordedPrograms" ]
  }, {
    "name" : " void onError(Session session, @TvInputManager.RecordingError int error)",
    "returnType" : "void",
    "comment" : "\n         * This is called when an issue has occurred. It may be called at any time after the current\n         * recording session is created until it is released.\n         *\n         * @param error The error code.\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void onSessionCreated(@Nullable Session session)", "public void onSessionReleased(Session session)", "public void onChannelRetuned(Session session, Uri channelUri)", "public void onAudioPresentationsChanged(Session session, List<AudioPresentation> audioPresentations)", "public void onAudioPresentationSelected(Session session, int presentationId, int programId)", "public void onTracksChanged(Session session, List<TvTrackInfo> tracks)", "public void onTrackSelected(Session session, int type, @Nullable String trackId)", "public void onVideoSizeChanged(Session session, int width, int height)", "public void onVideoAvailable(Session session)", "public void onVideoUnavailable(Session session, int reason)", "public void onVideoFreezeUpdated(Session session, boolean isFrozen)", "public void onContentAllowed(Session session)", "public void onContentBlocked(Session session, TvContentRating rating)", "public void onLayoutSurface(Session session, int left, int top, int right, int bottom)", "public void onSessionEvent(Session session, String eventType, Bundle eventArgs)", "public void onTimeShiftStatusChanged(Session session, int status)", "public void onTimeShiftStartPositionChanged(Session session, long timeMs)", "public void onTimeShiftCurrentPositionChanged(Session session, long timeMs)", "public void onAitInfoUpdated(Session session, AitInfo aitInfo)", "public void onSignalStrengthUpdated(Session session, @SignalStrength int strength)", "public void onCueingMessageAvailability(Session session, boolean available)", "public void onTimeShiftMode(Session session, @TimeShiftMode int mode)", "public void onAvailableSpeeds(Session session, float[] speeds)", "public void onTuned(Session session, Uri channelUri)", "public void onTvMessage(Session session, @TvInputManager.TvMessageType int type, Bundle data)", " void onRecordingStopped(Session session, Uri recordedProgramUri)", " void onError(Session session, @TvInputManager.RecordingError int error)" ],
  "variableNames" : [ ]
}