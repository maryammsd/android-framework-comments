{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/inspector/PropertyReader.java",
  "packageName" : "android.view.inspector",
  "className" : "PropertyReader",
  "comment" : "\n * An interface for reading the properties of an inspectable object.\n *\n * {@code PropertyReader} is defined as an interface that will be called by\n * {@link InspectionCompanion#readProperties(Object, PropertyReader)}. This approach allows a\n * client inspector to read the values of primitive properties without the overhead of\n * instantiating a class to hold the property values for each inspection pass. If an inspectable\n * remains unchanged between reading passes, it should be possible for a {@code PropertyReader} to\n * avoid new allocations for subsequent reading passes.\n *\n * It has separate methods for all primitive types to avoid autoboxing overhead if a concrete\n * implementation is able to work with primitives. Implementations should be prepared to accept\n * {null} as the value of {@link PropertyReader#readObject(int, Object)}.\n *\n * @see InspectionCompanion#readProperties(Object, PropertyReader)\n ",
  "links" : [ "android.view.inspector.PropertyReader#readObject(int", "android.view.inspector.InspectionCompanion#readProperties(Object" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " void readBoolean(int id, boolean value)",
    "returnType" : "void",
    "comment" : "\n     * Read a primitive boolean property.\n     *\n     * @param id Identifier of the property from a {@link PropertyMapper}\n     * @param value Value of the property\n     * @throws PropertyTypeMismatchException If the property ID is not mapped as a {@code boolean}\n     ",
    "links" : [ "android.view.inspector.PropertyMapper" ]
  }, {
    "name" : " void readByte(int id, byte value)",
    "returnType" : "void",
    "comment" : "\n     * Read a primitive byte property.\n     *\n     * @param id Identifier of the property from a {@link PropertyMapper}\n     * @param value Value of the property\n     * @throws PropertyTypeMismatchException If the property ID is not mapped as a {@code byte}\n     ",
    "links" : [ "android.view.inspector.PropertyMapper" ]
  }, {
    "name" : " void readChar(int id, char value)",
    "returnType" : "void",
    "comment" : "\n     * Read a primitive character property.\n     *\n     * @param id Identifier of the property from a {@link PropertyMapper}\n     * @param value Value of the property\n     * @throws PropertyTypeMismatchException If the property ID is not mapped as a {@code char}\n     ",
    "links" : [ "android.view.inspector.PropertyMapper" ]
  }, {
    "name" : " void readDouble(int id, double value)",
    "returnType" : "void",
    "comment" : "\n     * Read a read a primitive double property.\n     *\n     * @param id Identifier of the property from a {@link PropertyMapper}\n     * @param value Value of the property\n     * @throws PropertyTypeMismatchException If the property ID is not mapped as a {@code double}\n     ",
    "links" : [ "android.view.inspector.PropertyMapper" ]
  }, {
    "name" : " void readFloat(int id, float value)",
    "returnType" : "void",
    "comment" : "\n     * Read a primitive float property.\n     *\n     * @param id Identifier of the property from a {@link PropertyMapper}\n     * @param value Value of the property\n     * @throws PropertyTypeMismatchException If the property ID is not mapped as a {@code float}\n     ",
    "links" : [ "android.view.inspector.PropertyMapper" ]
  }, {
    "name" : " void readInt(int id, int value)",
    "returnType" : "void",
    "comment" : "\n     * Read a primitive integer property.\n     *\n     * @param id Identifier of the property from a {@link PropertyMapper}\n     * @param value Value of the property\n     * @throws PropertyTypeMismatchException If the property ID is not mapped as an {@code int}\n     ",
    "links" : [ "android.view.inspector.PropertyMapper" ]
  }, {
    "name" : " void readLong(int id, long value)",
    "returnType" : "void",
    "comment" : "\n     * Read a primitive long property.\n     *\n     * @param id Identifier of the property from a {@link PropertyMapper}\n     * @param value Value of the property\n     * @throws PropertyTypeMismatchException If the property ID is not mapped as a {@code long}\n     ",
    "links" : [ "android.view.inspector.PropertyMapper" ]
  }, {
    "name" : " void readShort(int id, short value)",
    "returnType" : "void",
    "comment" : "\n     * Read a primitive short property.\n     *\n     * @param id Identifier of the property from a {@link PropertyMapper}\n     * @param value Value of the property\n     * @throws PropertyTypeMismatchException If the property ID is not mapped as a {@code short}\n     ",
    "links" : [ "android.view.inspector.PropertyMapper" ]
  }, {
    "name" : " void readObject(int id, @Nullable Object value)",
    "returnType" : "void",
    "comment" : "\n     * Read any object as a property.\n     *\n     * If value is null, the property is marked as empty.\n     *\n     * @param id Identifier of the property from a {@link PropertyMapper}\n     * @param value Value of the property\n     * @throws PropertyTypeMismatchException If the property ID is not mapped as an object\n     ",
    "links" : [ "android.view.inspector.PropertyMapper" ]
  }, {
    "name" : " void readColor(int id, @ColorInt int value)",
    "returnType" : "void",
    "comment" : "\n     * Read a color packed into an int as a property.\n     *\n     * @param id Identifier of the property from a {@link PropertyMapper}\n     * @param value Value of the property\n     * @throws PropertyTypeMismatchException If the property ID is not mapped as a color\n     ",
    "links" : [ "android.view.inspector.PropertyMapper" ]
  }, {
    "name" : " void readColor(int id, @ColorLong long value)",
    "returnType" : "void",
    "comment" : "\n     * Read a color packed into a {@code ColorLong} as a property.\n     *\n     * @param id Identifier of the property from a {@link PropertyMapper}\n     * @param value Value of the property packed as a {@code ColorLong}. See the\n     *              {@link Color} class for details of the packing.\n     * @throws PropertyTypeMismatchException If the property ID is not mapped as a color\n     ",
    "links" : [ "android.view.inspector.PropertyMapper", "android.graphics.Color" ]
  }, {
    "name" : " void readColor(int id, @Nullable Color value)",
    "returnType" : "void",
    "comment" : "\n     * Read a {@link Color} object as a property.\n     *\n     * @param id Identifier of the property from a {@link PropertyMapper}\n     * @param value Value of the property\n     * @throws PropertyTypeMismatchException If the property ID is not mapped as a color\n     ",
    "links" : [ "android.graphics.Color", "android.view.inspector.PropertyMapper" ]
  }, {
    "name" : " void readGravity(int id, int value)",
    "returnType" : "void",
    "comment" : "\n     * Read {@link android.view.Gravity} packed into an primitive {@code int}.\n     *\n     * @param id Identifier of the property from a {@link PropertyMapper}\n     * @param value Value of the property\n     * @throws PropertyTypeMismatchException If the property ID is not mapped as a gravity property\n     ",
    "links" : [ "android.view.inspector.PropertyMapper", "android.view.Gravity" ]
  }, {
    "name" : " void readIntEnum(int id, int value)",
    "returnType" : "void",
    "comment" : "\n     * Read an enumeration packed into a primitive {@code int}.\n     *\n     * @param id Identifier of the property from a {@link PropertyMapper}\n     * @param value Value of the property\n     * @throws PropertyTypeMismatchException If the property ID is not mapped as an object\n     ",
    "links" : [ "android.view.inspector.PropertyMapper" ]
  }, {
    "name" : " void readIntFlag(int id, int value)",
    "returnType" : "void",
    "comment" : "\n     * Read a flag packed into a primitive {@code int}.\n     *\n     * @param id Identifier of the property from a {@link PropertyMapper}\n     * @param value Value of the property\n     * @throws PropertyTypeMismatchException If the property ID is not mapped as an object\n     ",
    "links" : [ "android.view.inspector.PropertyMapper" ]
  }, {
    "name" : " void readResourceId(int id, @AnyRes int value)",
    "returnType" : "void",
    "comment" : "\n     * Read an integer that contains a resource ID.\n     *\n     * @param id Identifier of the property from a {@link PropertyMapper}\n     * @param value Value of the property\n     * @throws PropertyTypeMismatchException If the property ID is not mapped as a resource ID.\n     ",
    "links" : [ "android.view.inspector.PropertyMapper" ]
  } ],
  "methodNames" : [ " void readBoolean(int id, boolean value)", " void readByte(int id, byte value)", " void readChar(int id, char value)", " void readDouble(int id, double value)", " void readFloat(int id, float value)", " void readInt(int id, int value)", " void readLong(int id, long value)", " void readShort(int id, short value)", " void readObject(int id, @Nullable Object value)", " void readColor(int id, @ColorInt int value)", " void readColor(int id, @ColorLong long value)", " void readColor(int id, @Nullable Color value)", " void readGravity(int id, int value)", " void readIntEnum(int id, int value)", " void readIntFlag(int id, int value)", " void readResourceId(int id, @AnyRes int value)" ],
  "variableNames" : [ ]
}