{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/prediction/AppPredictor.java",
  "packageName" : "android.app.prediction",
  "className" : "AppPredictor",
  "comment" : "\n * Class that represents an App Prediction client.\n *\n * <p>\n * Usage: <pre> {@code\n *\n * class MyActivity {\n *    private AppPredictor mClient\n *\n *    void onCreate() {\n *         mClient = new AppPredictor(...)\n *         mClient.registerPredictionUpdates(...)\n *    }\n *\n *    void onStart() {\n *        mClient.requestPredictionUpdate()\n *    }\n *\n *    void onClick(...) {\n *        mClient.notifyAppTargetEvent(...)\n *    }\n *\n *    void onDestroy() {\n *        mClient.unregisterPredictionUpdates()\n *        mClient.close()\n *    }\n *\n * }</pre>\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPredictionManager",
    "type" : "IPredictionManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCloseGuard",
    "type" : "CloseGuard",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsClosed",
    "type" : "AtomicBoolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSessionId",
    "type" : "AppPredictionSessionId",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRegisteredCallbacks",
    "type" : "ArrayMap<Callback, CallbackWrapper>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void notifyAppTargetEvent(@NonNull AppTargetEvent event)",
    "returnType" : "void",
    "comment" : "\n     * Notifies the prediction service of an app target event.\n     *\n     * @param event The {@link AppTargetEvent} that represents the app target event.\n     ",
    "links" : [ "android.app.prediction.AppTargetEvent" ]
  }, {
    "name" : "public void notifyLaunchLocationShown(@NonNull String launchLocation, @NonNull List<AppTargetId> targetIds)",
    "returnType" : "void",
    "comment" : "\n     * Notifies the prediction service when the targets in a launch location are shown to the user.\n     *\n     * @param launchLocation The launch location where the targets are shown to the user.\n     * @param targetIds List of {@link AppTargetId}s that are shown to the user.\n     ",
    "links" : [ "android.app.prediction.AppTargetId" ]
  }, {
    "name" : "public void registerPredictionUpdates(@NonNull @CallbackExecutor Executor callbackExecutor, @NonNull AppPredictor.Callback callback)",
    "returnType" : "void",
    "comment" : "\n     * Requests the prediction service provide continuous updates of App predictions via the\n     * provided callback, until the given callback is unregistered.\n     *\n     * @see Callback#onTargetsAvailable(List).\n     *\n     * @param callbackExecutor The callback executor to use when calling the callback.\n     * @param callback The Callback to be called when updates of App predictions are available.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void registerPredictionUpdatesLocked(@NonNull @CallbackExecutor Executor callbackExecutor, @NonNull AppPredictor.Callback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void unregisterPredictionUpdates(@NonNull AppPredictor.Callback callback)",
    "returnType" : "void",
    "comment" : "\n     * Requests the prediction service to stop providing continuous updates to the provided\n     * callback until the callback is re-registered.\n     *\n     * @see {@link AppPredictor#registerPredictionUpdates(Executor, Callback)}.\n     *\n     * @param callback The callback to be unregistered.\n     ",
    "links" : [ "android.app.prediction.AppPredictor#registerPredictionUpdates(Executor" ]
  }, {
    "name" : "private void unregisterPredictionUpdatesLocked(@NonNull AppPredictor.Callback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void requestPredictionUpdate()",
    "returnType" : "void",
    "comment" : "\n     * Requests the prediction service to dispatch a new set of App predictions via the provided\n     * callback.\n     *\n     * @see Callback#onTargetsAvailable(List).\n     ",
    "links" : [ ]
  }, {
    "name" : "public void sortTargets(@NonNull List<AppTarget> targets, @NonNull Executor callbackExecutor, @NonNull Consumer<List<AppTarget>> callback)",
    "returnType" : "void",
    "comment" : "\n     * Returns a new list of AppTargets sorted based on prediction rank or {@code null} if the\n     * ranker is not available.\n     *\n     * @param targets List of app targets to be sorted.\n     * @param callbackExecutor The callback executor to use when calling the callback.\n     * @param callback The callback to return the sorted list of app targets.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void requestServiceFeatures(@NonNull Executor callbackExecutor, @NonNull Consumer<Bundle> callback)",
    "returnType" : "void",
    "comment" : "\n     * Requests a Bundle which includes service features info or {@code null} if the service is not\n     * available.\n     *\n     * @param callbackExecutor The callback executor to use when calling the callback. It cannot be\n     *                        null.\n     * @param callback The callback to return the Bundle which includes service features info. It\n     *                cannot be null.\n     *\n     * @throws IllegalStateException If this AppPredictor has already been destroyed.\n     * @throws RuntimeException If there is a failure communicating with the remote service.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void destroy()",
    "returnType" : "void",
    "comment" : "\n     * Destroys the client and unregisters the callback. Any method on this class after this call\n     * with throw {@link IllegalStateException}.\n     ",
    "links" : [ "IllegalStateException" ]
  }, {
    "name" : "private void destroySessionLocked()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void finalize() throws Throwable",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public AppPredictionSessionId getSessionId()",
    "returnType" : "AppPredictionSessionId",
    "comment" : "\n     * Returns the id of this prediction session.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static IBinder getToken()",
    "returnType" : "IBinder",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void notifyAppTargetEvent(@NonNull AppTargetEvent event)", "public void notifyLaunchLocationShown(@NonNull String launchLocation, @NonNull List<AppTargetId> targetIds)", "public void registerPredictionUpdates(@NonNull @CallbackExecutor Executor callbackExecutor, @NonNull AppPredictor.Callback callback)", "private void registerPredictionUpdatesLocked(@NonNull @CallbackExecutor Executor callbackExecutor, @NonNull AppPredictor.Callback callback)", "public void unregisterPredictionUpdates(@NonNull AppPredictor.Callback callback)", "private void unregisterPredictionUpdatesLocked(@NonNull AppPredictor.Callback callback)", "public void requestPredictionUpdate()", "public void sortTargets(@NonNull List<AppTarget> targets, @NonNull Executor callbackExecutor, @NonNull Consumer<List<AppTarget>> callback)", "public void requestServiceFeatures(@NonNull Executor callbackExecutor, @NonNull Consumer<Bundle> callback)", "public void destroy()", "private void destroySessionLocked()", "protected void finalize() throws Throwable", "public AppPredictionSessionId getSessionId()", "private static IBinder getToken()" ],
  "variableNames" : [ "TAG", "mPredictionManager", "mCloseGuard", "mIsClosed", "mSessionId", "mRegisteredCallbacks" ]
}