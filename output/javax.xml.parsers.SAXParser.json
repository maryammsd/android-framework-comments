{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/javax/xml/parsers/SAXParser.java",
  "packageName" : "javax.xml.parsers",
  "className" : "SAXParser",
  "comment" : "\n * Defines the API that wraps an {@link org.xml.sax.XMLReader}\n * implementation class. In JAXP 1.0, this class wrapped the\n * {@link org.xml.sax.Parser} interface, however this interface was\n * replaced by the {@link org.xml.sax.XMLReader}. For ease\n * of transition, this class continues to support the same name\n * and interface as well as supporting new methods.\n *\n * An instance of this class can be obtained from the\n * {@link javax.xml.parsers.SAXParserFactory#newSAXParser()} method.\n * Once an instance of this class is obtained, XML can be parsed from\n * a variety of input sources. These input sources are InputStreams,\n * Files, URLs, and SAX InputSources.<p>\n *\n * This static method creates a new factory instance based\n * on a system property setting or uses the platform default\n * if no property has been defined.<p>\n *\n * The system property that controls which Factory implementation\n * to create is named <code>&quot;javax.xml.parsers.SAXParserFactory&quot;</code>.\n * This property names a class that is a concrete subclass of this\n * abstract class. If no property is defined, a platform default\n * will be used.</p>\n *\n * As the content is parsed by the underlying parser, methods of the\n * given {@link org.xml.sax.HandlerBase} or the\n * {@link org.xml.sax.helpers.DefaultHandler} are called.<p>\n *\n * Implementations of this class which wrap an underlying implementation\n * can consider using the {@link org.xml.sax.helpers.ParserAdapter}\n * class to initially adapt their SAX1 implementation to work under\n * this revised class.\n *\n * @author <a href=\"mailto:Jeff.Suttor@Sun.com\">Jeff Suttor</a>\n * @version $Revision: 584483 $, $Date: 2007-10-13 19:54:48 -0700 (Sat, 13 Oct 2007) $\n ",
  "links" : [ "org.xml.sax.helpers.DefaultHandler", "org.xml.sax.helpers.ParserAdapter", "org.xml.sax.XMLReader", "org.xml.sax.Parser", "javax.xml.parsers.SAXParserFactory#newSAXParser()", "org.xml.sax.HandlerBase" ],
  "variables" : [ {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void reset()",
    "returnType" : "void",
    "comment" : "\n     * <p>Reset this <code>SAXParser</code> to its original configuration.</p>\n     *\n     * <p><code>SAXParser</code> is reset to the same state as when it was created with\n     * {@link SAXParserFactory#newSAXParser()}.\n     * <code>reset()</code> is designed to allow the reuse of existing <code>SAXParser</code>s\n     * thus saving resources associated with the creation of new <code>SAXParser</code>s.</p>\n     *\n     * <p>The reset <code>SAXParser</code> is not guaranteed to have the same {@link Schema}\n     * <code>Object</code>, e.g. {@link Object#equals(Object obj)}.  It is guaranteed to have a functionally equal\n     * <code>Schema</code>.</p>\n     *\n     * @since 1.5\n     ",
    "links" : [ "javax.xml.parsers.SAXParserFactory#newSAXParser()", "#equals(Object", "javax.xml.validation.Schema" ]
  }, {
    "name" : "public void parse(InputStream is, HandlerBase hb) throws SAXException, IOException",
    "returnType" : "void",
    "comment" : "\n     * <p>Parse the content of the given {@link java.io.InputStream}\n     * instance as XML using the specified {@link org.xml.sax.HandlerBase}.\n     * <i> Use of the DefaultHandler version of this method is recommended as\n     * the HandlerBase class has been deprecated in SAX 2.0</i>.</p>\n     *\n     * @param is InputStream containing the content to be parsed.\n     * @param hb The SAX HandlerBase to use.\n     *\n     * @throws IllegalArgumentException If the given InputStream is null.\n     * @throws SAXException If parse produces a SAX error.\n     * @throws IOException If an IO error occurs interacting with the\n     *   <code>InputStream</code>.\n     *\n     * @see org.xml.sax.DocumentHandler\n     ",
    "links" : [ "org.xml.sax.HandlerBase", "java.io.InputStream" ]
  }, {
    "name" : "public void parse(InputStream is, HandlerBase hb, String systemId) throws SAXException, IOException",
    "returnType" : "void",
    "comment" : "\n     * <p>Parse the content of the given {@link java.io.InputStream}\n     * instance as XML using the specified {@link org.xml.sax.HandlerBase}.\n     * <i> Use of the DefaultHandler version of this method is recommended as\n     * the HandlerBase class has been deprecated in SAX 2.0</i>.</p>\n     *\n     * @param is InputStream containing the content to be parsed.\n     * @param hb The SAX HandlerBase to use.\n     * @param systemId The systemId which is needed for resolving relative URIs.\n     *\n     * @throws IllegalArgumentException If the given <code>InputStream</code> is\n     *   <code>null</code>.\n     * @throws IOException If any IO error occurs interacting with the\n     *   <code>InputStream</code>.\n     * @throws SAXException If any SAX errors occur during processing.\n     *\n     * @see org.xml.sax.DocumentHandler version of this method instead.\n     ",
    "links" : [ "org.xml.sax.HandlerBase", "java.io.InputStream" ]
  }, {
    "name" : "public void parse(InputStream is, DefaultHandler dh) throws SAXException, IOException",
    "returnType" : "void",
    "comment" : "\n     * Parse the content of the given {@link java.io.InputStream}\n     * instance as XML using the specified\n     * {@link org.xml.sax.helpers.DefaultHandler}.\n     *\n     * @param is InputStream containing the content to be parsed.\n     * @param dh The SAX DefaultHandler to use.\n     *\n     * @throws IllegalArgumentException If the given InputStream is null.\n     * @throws IOException If any IO errors occur.\n     * @throws SAXException If any SAX errors occur during processing.\n     *\n     * @see org.xml.sax.DocumentHandler\n     ",
    "links" : [ "org.xml.sax.helpers.DefaultHandler", "java.io.InputStream" ]
  }, {
    "name" : "public void parse(InputStream is, DefaultHandler dh, String systemId) throws SAXException, IOException",
    "returnType" : "void",
    "comment" : "\n     * Parse the content of the given {@link java.io.InputStream}\n     * instance as XML using the specified\n     * {@link org.xml.sax.helpers.DefaultHandler}.\n     *\n     * @param is InputStream containing the content to be parsed.\n     * @param dh The SAX DefaultHandler to use.\n     * @param systemId The systemId which is needed for resolving relative URIs.\n     *\n     * @throws IllegalArgumentException If the given InputStream is null.\n     * @throws IOException If any IO errors occur.\n     * @throws SAXException If any SAX errors occur during processing.\n     *\n     * @see org.xml.sax.DocumentHandler version of this method instead.\n     ",
    "links" : [ "org.xml.sax.helpers.DefaultHandler", "java.io.InputStream" ]
  }, {
    "name" : "public void parse(String uri, HandlerBase hb) throws SAXException, IOException",
    "returnType" : "void",
    "comment" : "\n     * Parse the content described by the giving Uniform Resource\n     * Identifier (URI) as XML using the specified\n     * {@link org.xml.sax.HandlerBase}.\n     * <i> Use of the DefaultHandler version of this method is recommended as\n     * the <code>HandlerBase</code> class has been deprecated in SAX 2.0</i>\n     *\n     * @param uri The location of the content to be parsed.\n     * @param hb The SAX HandlerBase to use.\n     *\n     * @throws IllegalArgumentException If the uri is null.\n     * @throws IOException If any IO errors occur.\n     * @throws SAXException If any SAX errors occur during processing.\n     *\n     * @see org.xml.sax.DocumentHandler\n     ",
    "links" : [ "org.xml.sax.HandlerBase" ]
  }, {
    "name" : "public void parse(String uri, DefaultHandler dh) throws SAXException, IOException",
    "returnType" : "void",
    "comment" : "\n     * Parse the content described by the giving Uniform Resource\n     * Identifier (URI) as XML using the specified\n     * {@link org.xml.sax.helpers.DefaultHandler}.\n     *\n     * @param uri The location of the content to be parsed.\n     * @param dh The SAX DefaultHandler to use.\n     *\n     * @throws IllegalArgumentException If the uri is null.\n     * @throws IOException If any IO errors occur.\n     * @throws SAXException If any SAX errors occur during processing.\n     *\n     * @see org.xml.sax.DocumentHandler\n     ",
    "links" : [ "org.xml.sax.helpers.DefaultHandler" ]
  }, {
    "name" : "public void parse(File f, HandlerBase hb) throws SAXException, IOException",
    "returnType" : "void",
    "comment" : "\n     * Parse the content of the file specified as XML using the\n     * specified {@link org.xml.sax.HandlerBase}.\n     * <i> Use of the DefaultHandler version of this method is recommended as\n     * the HandlerBase class has been deprecated in SAX 2.0</i>\n     *\n     * @param f The file containing the XML to parse\n     * @param hb The SAX HandlerBase to use.\n     *\n     * @throws IllegalArgumentException If the File object is null.\n     * @throws IOException If any IO errors occur.\n     * @throws SAXException If any SAX errors occur during processing.\n     *\n     * @see org.xml.sax.DocumentHandler\n     ",
    "links" : [ "org.xml.sax.HandlerBase" ]
  }, {
    "name" : "public void parse(File f, DefaultHandler dh) throws SAXException, IOException",
    "returnType" : "void",
    "comment" : "\n     * Parse the content of the file specified as XML using the\n     * specified {@link org.xml.sax.helpers.DefaultHandler}.\n     *\n     * @param f The file containing the XML to parse\n     * @param dh The SAX DefaultHandler to use.\n     *\n     * @throws IllegalArgumentException If the File object is null.\n     * @throws IOException If any IO errors occur.\n     * @throws SAXException If any SAX errors occur during processing.\n     *\n     * @see org.xml.sax.DocumentHandler\n     ",
    "links" : [ "org.xml.sax.helpers.DefaultHandler" ]
  }, {
    "name" : "public void parse(InputSource is, HandlerBase hb) throws SAXException, IOException",
    "returnType" : "void",
    "comment" : "\n     * Parse the content given {@link org.xml.sax.InputSource}\n     * as XML using the specified\n     * {@link org.xml.sax.HandlerBase}.\n     * <i> Use of the DefaultHandler version of this method is recommended as\n     * the HandlerBase class has been deprecated in SAX 2.0</i>\n     *\n     * @param is The InputSource containing the content to be parsed.\n     * @param hb The SAX HandlerBase to use.\n     *\n     * @throws IllegalArgumentException If the <code>InputSource</code> object\n     *   is <code>null</code>.\n     * @throws IOException If any IO errors occur.\n     * @throws SAXException If any SAX errors occur during processing.\n     *\n     * @see org.xml.sax.DocumentHandler\n     ",
    "links" : [ "org.xml.sax.InputSource", "org.xml.sax.HandlerBase" ]
  }, {
    "name" : "public void parse(InputSource is, DefaultHandler dh) throws SAXException, IOException",
    "returnType" : "void",
    "comment" : "\n     * Parse the content given {@link org.xml.sax.InputSource}\n     * as XML using the specified\n     * {@link org.xml.sax.helpers.DefaultHandler}.\n     *\n     * @param is The InputSource containing the content to be parsed.\n     * @param dh The SAX DefaultHandler to use.\n     *\n     * @throws IllegalArgumentException If the <code>InputSource</code> object\n     *   is <code>null</code>.\n     * @throws IOException If any IO errors occur.\n     * @throws SAXException If any SAX errors occur during processing.\n     *\n     * @see org.xml.sax.DocumentHandler\n     ",
    "links" : [ "org.xml.sax.helpers.DefaultHandler", "org.xml.sax.InputSource" ]
  }, {
    "name" : "public abstract org.xml.sax.Parser getParser() throws SAXException",
    "returnType" : "org.xml.sax.Parser",
    "comment" : "\n     * Returns the SAX parser that is encapsulated by the\n     * implementation of this class.\n     *\n     * @return The SAX parser that is encapsulated by the\n     *         implementation of this class.\n     *\n     * @throws SAXException If any SAX errors occur during processing.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract org.xml.sax.XMLReader getXMLReader() throws SAXException",
    "returnType" : "org.xml.sax.XMLReader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean isNamespaceAware()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean isValidating()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void setProperty(String name, Object value) throws SAXNotRecognizedException, SAXNotSupportedException",
    "returnType" : "void",
    "comment" : "\n     * <p>Sets the particular property in the underlying implementation of\n     * {@link org.xml.sax.XMLReader}.\n     * A list of the core features and properties can be found at\n     * <a href=\"http://sax.sourceforge.net/?selected=get-set\">\n     * http://sax.sourceforge.net/?selected=get-set</a>.</p>\n     *\n     * @param name The name of the property to be set.\n     * @param value The value of the property to be set.\n     *\n     * @throws SAXNotRecognizedException When the underlying XMLReader does\n     *   not recognize the property name.\n     * @throws SAXNotSupportedException When the underlying XMLReader\n     *  recognizes the property name but doesn't support the property.\n     *\n     * @see org.xml.sax.XMLReader#setProperty\n     ",
    "links" : [ "org.xml.sax.XMLReader" ]
  }, {
    "name" : "public abstract Object getProperty(String name) throws SAXNotRecognizedException, SAXNotSupportedException",
    "returnType" : "Object",
    "comment" : "\n     * <p>Returns the particular property requested for in the underlying\n     * implementation of {@link org.xml.sax.XMLReader}.</p>\n     *\n     * @param name The name of the property to be retrieved.\n     * @return Value of the requested property.\n     *\n     * @throws SAXNotRecognizedException When the underlying XMLReader does\n     *    not recognize the property name.\n     * @throws SAXNotSupportedException When the underlying XMLReader\n     *  recognizes the property name but doesn't support the property.\n     *\n     * @see org.xml.sax.XMLReader#getProperty\n     ",
    "links" : [ "org.xml.sax.XMLReader" ]
  }, {
    "name" : "public Schema getSchema()",
    "returnType" : "Schema",
    "comment" : " <p>Get a reference to the the {@link Schema} being used by\n     * the XML processor.</p>\n     *\n     * <p>If no schema is being used, <code>null</code> is returned.</p>\n     *\n     * @return {@link Schema} being used or <code>null</code>\n     *  if none in use\n     *\n     * @throws UnsupportedOperationException\n     *      For backward compatibility, when implementations for\n     *      earlier versions of JAXP is used, this exception will be\n     *      thrown.\n     *\n     * @since 1.5\n     ",
    "links" : [ "javax.xml.validation.Schema" ]
  }, {
    "name" : "public boolean isXIncludeAware()",
    "returnType" : "boolean",
    "comment" : "\n     * <p>Get the XInclude processing mode for this parser.</p>\n     *\n     * @return\n     *      the return value of\n     *      the {@link SAXParserFactory#isXIncludeAware()}\n     *      when this parser was created from factory.\n     *\n     * @throws UnsupportedOperationException\n     *      For backward compatibility, when implementations for\n     *      earlier versions of JAXP is used, this exception will be\n     *      thrown.\n     *\n     * @since 1.5\n     *\n     * @see SAXParserFactory#setXIncludeAware(boolean)\n     ",
    "links" : [ "javax.xml.parsers.SAXParserFactory#isXIncludeAware()" ]
  } ],
  "methodNames" : [ "public void reset()", "public void parse(InputStream is, HandlerBase hb) throws SAXException, IOException", "public void parse(InputStream is, HandlerBase hb, String systemId) throws SAXException, IOException", "public void parse(InputStream is, DefaultHandler dh) throws SAXException, IOException", "public void parse(InputStream is, DefaultHandler dh, String systemId) throws SAXException, IOException", "public void parse(String uri, HandlerBase hb) throws SAXException, IOException", "public void parse(String uri, DefaultHandler dh) throws SAXException, IOException", "public void parse(File f, HandlerBase hb) throws SAXException, IOException", "public void parse(File f, DefaultHandler dh) throws SAXException, IOException", "public void parse(InputSource is, HandlerBase hb) throws SAXException, IOException", "public void parse(InputSource is, DefaultHandler dh) throws SAXException, IOException", "public abstract org.xml.sax.Parser getParser() throws SAXException", "public abstract org.xml.sax.XMLReader getXMLReader() throws SAXException", "public abstract boolean isNamespaceAware()", "public abstract boolean isValidating()", "public abstract void setProperty(String name, Object value) throws SAXNotRecognizedException, SAXNotSupportedException", "public abstract Object getProperty(String name) throws SAXNotRecognizedException, SAXNotSupportedException", "public Schema getSchema()", "public boolean isXIncludeAware()" ],
  "variableNames" : [ "DEBUG" ]
}