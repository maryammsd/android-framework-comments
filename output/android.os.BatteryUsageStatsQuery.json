{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/os/BatteryUsageStatsQuery.java",
  "packageName" : "android.os",
  "className" : "BatteryUsageStatsQuery",
  "comment" : "\n * Query parameters for the {@link BatteryStatsManager#getBatteryUsageStats()} call.\n *\n * @hide\n ",
  "links" : [ "android.os.BatteryStatsManager#getBatteryUsageStats()" ],
  "variables" : [ {
    "name" : "DEFAULT",
    "type" : "BatteryUsageStatsQuery",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAG_BATTERY_USAGE_STATS_POWER_PROFILE_MODEL",
    "type" : "int",
    "comment" : "\n     * Indicates that power estimations should be based on the usage time and\n     * average power constants provided in the PowerProfile, even if on-device power monitoring\n     * is available.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_BATTERY_USAGE_STATS_INCLUDE_HISTORY",
    "type" : "int",
    "comment" : "\n     * Indicates that battery history should be included in the BatteryUsageStats.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_BATTERY_USAGE_STATS_INCLUDE_POWER_MODELS",
    "type" : "int",
    "comment" : "\n     * Indicates that identifiers of power models used for computations of power\n     * consumption should be included in the BatteryUsageStats.\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_BATTERY_USAGE_STATS_INCLUDE_PROCESS_STATE_DATA",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAG_BATTERY_USAGE_STATS_INCLUDE_VIRTUAL_UIDS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_MAX_STATS_AGE_MS",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFlags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUserIds",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaxStatsAgeMs",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFromTimestamp",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mToTimestamp",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMinConsumedPowerThreshold",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPowerComponents",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<BatteryUsageStatsQuery>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getFlags()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int[] getUserIds()",
    "returnType" : "int[]",
    "comment" : "\n     * Returns an array of users for which the attribution is requested.  It may\n     * contain {@link UserHandle#USER_ALL} to indicate that the attribution\n     * should be performed for all users. Battery consumed by users <b>not</b> included\n     * in this array will be returned in the aggregated form as {@link UserBatteryConsumer}'s.\n     ",
    "links" : [ "android.os.UserBatteryConsumer", "android.os.UserHandle#USER_ALL" ]
  }, {
    "name" : "public boolean shouldForceUsePowerProfileModel()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the power calculations must be based on the PowerProfile constants,\n     * even if measured energy data is available.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isProcessStateDataNeeded()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int[] getPowerComponents()",
    "returnType" : "int[]",
    "comment" : "\n     * Returns the power components that should be estimated or null if all power components\n     * are being requested.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getMaxStatsAge()",
    "returnType" : "long",
    "comment" : "\n     * Returns the client's tolerance for stale battery stats. The data is allowed to be up to\n     * this many milliseconds out-of-date.\n     ",
    "links" : [ ]
  }, {
    "name" : "public double getMinConsumedPowerThreshold()",
    "returnType" : "double",
    "comment" : "\n     * Returns the minimal power component consumed power threshold. The small power consuming\n     * components will be reported as zero.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getFromTimestamp()",
    "returnType" : "long",
    "comment" : "\n     * Returns the exclusive lower bound of the stored snapshot timestamps that should be included\n     * in the aggregation.  Ignored if {@link #getToTimestamp()} is zero.\n     ",
    "links" : [ "#getToTimestamp()" ]
  }, {
    "name" : "public long getToTimestamp()",
    "returnType" : "long",
    "comment" : "\n     * Returns the inclusive upper bound of the stored snapshot timestamps that should\n     * be included in the aggregation.  The default is to include only the current stats\n     * accumulated since the latest battery reset.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int getFlags()", "public int[] getUserIds()", "public boolean shouldForceUsePowerProfileModel()", "public boolean isProcessStateDataNeeded()", "public int[] getPowerComponents()", "public long getMaxStatsAge()", "public double getMinConsumedPowerThreshold()", "public long getFromTimestamp()", "public long getToTimestamp()", "public void writeToParcel(Parcel dest, int flags)", "public int describeContents()" ],
  "variableNames" : [ "DEFAULT", "FLAG_BATTERY_USAGE_STATS_POWER_PROFILE_MODEL", "FLAG_BATTERY_USAGE_STATS_INCLUDE_HISTORY", "FLAG_BATTERY_USAGE_STATS_INCLUDE_POWER_MODELS", "FLAG_BATTERY_USAGE_STATS_INCLUDE_PROCESS_STATE_DATA", "FLAG_BATTERY_USAGE_STATS_INCLUDE_VIRTUAL_UIDS", "DEFAULT_MAX_STATS_AGE_MS", "mFlags", "mUserIds", "mMaxStatsAgeMs", "mFromTimestamp", "mToTimestamp", "mMinConsumedPowerThreshold", "mPowerComponents", "CREATOR" ]
}