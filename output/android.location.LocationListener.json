{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/location/LocationListener.java",
  "packageName" : "android.location",
  "className" : "LocationListener",
  "comment" : "\n * Used for receiving notifications when the device location has changed. These methods are called\n * when the listener has been registered with the LocationManager.\n *\n * <div class=\"special reference\">\n * <h3>Developer Guides</h3>\n * <p>For more information about identifying user location, read the\n * <a href=\"{@docRoot}guide/topics/location/obtaining-user-location.html\">Obtaining User\n * Location</a> developer guide.</p>\n * </div>\n *\n * @see LocationManager#requestLocationUpdates(String, LocationRequest, Executor, LocationListener)\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " void onLocationChanged(@NonNull Location location)",
    "returnType" : "void",
    "comment" : "\n     * Called when the location has changed. A wakelock may be held on behalf on the listener for\n     * some brief amount of time as this callback executes. If this callback performs long running\n     * operations, it is the client's responsibility to obtain their own wakelock if necessary.\n     *\n     * @param location the updated location\n     ",
    "links" : [ ]
  }, {
    "name" : " void onLocationChanged(@NonNull List<Location> locations)",
    "returnType" : "void",
    "comment" : "\n     * Called when the location has changed and locations are being delivered in batches. The\n     * default implementation calls through to {@link #onLocationChanged(Location)} with all\n     * locations in the batch. The list of locations is always guaranteed to be non-empty, and is\n     * always guaranteed to be ordered from earliest location to latest location (so that the\n     * earliest location in the batch is at index 0 in the list, and the latest location in the\n     * batch is at index size-1 in the list).\n     *\n     * @see LocationRequest#getMaxUpdateDelayMillis()\n     * @param locations the location list\n     ",
    "links" : [ "#onLocationChanged(Location)" ]
  }, {
    "name" : " void onFlushComplete(int requestCode)",
    "returnType" : "void",
    "comment" : "\n     * Invoked when a flush operation is complete and after flushed locations have been delivered.\n     *\n     * @param requestCode the request code passed into\n     *                    {@link LocationManager#requestFlush(String, LocationListener, int)}\n     ",
    "links" : [ "android.location.LocationManager#requestFlush(String" ]
  }, {
    "name" : " void onStatusChanged(String provider, int status, Bundle extras)",
    "returnType" : "void",
    "comment" : "\n     * This callback will never be invoked on Android Q and above, and providers can be considered\n     * as always in the {@link LocationProvider#AVAILABLE} state.\n     *\n     * <p class=\"note\">Note that this method only has a default implementation on Android R and\n     * above, and this method must still be overridden in order to run successfully on Android\n     * versions below R. LocationListenerCompat from the compat libraries may be used to avoid the\n     * need to override for older platforms.\n     *\n     * @deprecated This callback will never be invoked on Android Q and above.\n     ",
    "links" : [ "android.location.LocationProvider#AVAILABLE" ]
  }, {
    "name" : " void onProviderEnabled(@NonNull String provider)",
    "returnType" : "void",
    "comment" : "\n     * Called when a provider this listener is registered with becomes enabled.\n     *\n     * <p class=\"note\">Note that this method only has a default implementation on Android R and\n     * above, and this method must still be overridden in order to run successfully on Android\n     * versions below R. LocationListenerCompat from the compat libraries may be used to avoid the\n     * need to override for older platforms.\n     *\n     * @param provider the name of the location provider\n     ",
    "links" : [ ]
  }, {
    "name" : " void onProviderDisabled(@NonNull String provider)",
    "returnType" : "void",
    "comment" : "\n     * Called when the provider this listener is registered with becomes disabled. If a provider is\n     * disabled when this listener is registered, this callback will be invoked immediately.\n     *\n     * <p class=\"note\">Note that this method only has a default implementation on Android R and\n     * above, and this method must still be overridden in order to run successfully on Android\n     * versions below R. LocationListenerCompat from the compat libraries may be used to avoid the\n     * need to override for older platforms.\n     *\n     * @param provider the name of the location provider\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " void onLocationChanged(@NonNull Location location)", " void onLocationChanged(@NonNull List<Location> locations)", " void onFlushComplete(int requestCode)", " void onStatusChanged(String provider, int status, Bundle extras)", " void onProviderEnabled(@NonNull String provider)", " void onProviderDisabled(@NonNull String provider)" ],
  "variableNames" : [ ]
}