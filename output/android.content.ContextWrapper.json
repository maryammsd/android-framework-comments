{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/content/ContextWrapper.java",
  "packageName" : "android.content",
  "className" : "ContextWrapper",
  "comment" : "\n * Proxying implementation of Context that simply delegates all of its calls to\n * another Context.  Can be subclassed to modify behavior without changing\n * the original Context.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mBase",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallbacksRegisteredToSuper",
    "type" : "List<ComponentCallbacks>",
    "comment" : "\n     * A list to store {@link ComponentCallbacks} which\n     * passes to {@link #registerComponentCallbacks(ComponentCallbacks)} before\n     * {@link #attachBaseContext(Context)}.\n     * It is to provide compatibility behavior for Application targeted prior to\n     * {@link Build.VERSION_CODES#TIRAMISU}.\n     *\n     * @hide\n     ",
    "links" : [ "#registerComponentCallbacks(ComponentCallbacks)", "#attachBaseContext(Context)", "Build.VERSION_CODES#TIRAMISU", "android.content.ComponentCallbacks" ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected void attachBaseContext(Context base)",
    "returnType" : "void",
    "comment" : "\n     * Set the base context for this ContextWrapper.  All calls will then be\n     * delegated to the base context.  Throws\n     * IllegalStateException if a base context has already been set.\n     *\n     * @param base The new base context for this wrapper.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Context getBaseContext()",
    "returnType" : "Context",
    "comment" : "\n     * @return the base context as set by the constructor or setBaseContext\n     ",
    "links" : [ ]
  }, {
    "name" : "public AssetManager getAssets()",
    "returnType" : "AssetManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Resources getResources()",
    "returnType" : "Resources",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public PackageManager getPackageManager()",
    "returnType" : "PackageManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ContentResolver getContentResolver()",
    "returnType" : "ContentResolver",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Looper getMainLooper()",
    "returnType" : "Looper",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Executor getMainExecutor()",
    "returnType" : "Executor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Context getApplicationContext()",
    "returnType" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setTheme(int resid)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getThemeResId()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public Resources.Theme getTheme()",
    "returnType" : "Resources.Theme",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ClassLoader getClassLoader()",
    "returnType" : "ClassLoader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getPackageName()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getBasePackageName()",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public String getOpPackageName()",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public String getAttributionTag()",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public ContextParams getParams()",
    "returnType" : "ContextParams",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ApplicationInfo getApplicationInfo()",
    "returnType" : "ApplicationInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getPackageResourcePath()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getPackageCodePath()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public SharedPreferences getSharedPreferences(String name, int mode)",
    "returnType" : "SharedPreferences",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public SharedPreferences getSharedPreferences(File file, int mode)",
    "returnType" : "SharedPreferences",
    "comment" : " @removed ",
    "links" : [ ]
  }, {
    "name" : "public void reloadSharedPreferences()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean moveSharedPreferencesFrom(Context sourceContext, String name)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean deleteSharedPreferences(String name)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public FileInputStream openFileInput(String name) throws FileNotFoundException",
    "returnType" : "FileInputStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public FileOutputStream openFileOutput(String name, int mode) throws FileNotFoundException",
    "returnType" : "FileOutputStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean deleteFile(String name)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public File getFileStreamPath(String name)",
    "returnType" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public File getSharedPreferencesPath(String name)",
    "returnType" : "File",
    "comment" : " @removed ",
    "links" : [ ]
  }, {
    "name" : "public String[] fileList()",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public File getDataDir()",
    "returnType" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public File getFilesDir()",
    "returnType" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public File getCrateDir(@NonNull String cratedId)",
    "returnType" : "File",
    "comment" : "\n     * {@inheritDoc Context#getCrateDir()}\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public File getNoBackupFilesDir()",
    "returnType" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public File getExternalFilesDir(@Nullable String type)",
    "returnType" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public File[] getExternalFilesDirs(String type)",
    "returnType" : "File[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public File getObbDir()",
    "returnType" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public File[] getObbDirs()",
    "returnType" : "File[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public File getCacheDir()",
    "returnType" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public File getCodeCacheDir()",
    "returnType" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public File getExternalCacheDir()",
    "returnType" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public File[] getExternalCacheDirs()",
    "returnType" : "File[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public File[] getExternalMediaDirs()",
    "returnType" : "File[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public File getDir(String name, int mode)",
    "returnType" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public File getPreloadsFileCache()",
    "returnType" : "File",
    "comment" : " @hide *",
    "links" : [ ]
  }, {
    "name" : "public SQLiteDatabase openOrCreateDatabase(String name, int mode, CursorFactory factory)",
    "returnType" : "SQLiteDatabase",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public SQLiteDatabase openOrCreateDatabase(String name, int mode, CursorFactory factory, @Nullable DatabaseErrorHandler errorHandler)",
    "returnType" : "SQLiteDatabase",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean moveDatabaseFrom(Context sourceContext, String name)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean deleteDatabase(String name)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public File getDatabasePath(String name)",
    "returnType" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String[] databaseList()",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Drawable getWallpaper()",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Drawable peekWallpaper()",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getWallpaperDesiredMinimumWidth()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getWallpaperDesiredMinimumHeight()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setWallpaper(Bitmap bitmap) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setWallpaper(InputStream data) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void clearWallpaper() throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void startActivity(Intent intent)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void startActivityAsUser(Intent intent, UserHandle user)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void startActivityForResult(String who, Intent intent, int requestCode, @Nullable Bundle options)",
    "returnType" : "void",
    "comment" : " @hide *",
    "links" : [ ]
  }, {
    "name" : "public boolean canStartActivityForResult()",
    "returnType" : "boolean",
    "comment" : " @hide *",
    "links" : [ ]
  }, {
    "name" : "public void startActivity(Intent intent, @Nullable Bundle options)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void startActivityAsUser(Intent intent, @Nullable Bundle options, UserHandle user)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void startActivities(Intent[] intents)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void startActivities(Intent[] intents, @Nullable Bundle options)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int startActivitiesAsUser(Intent[] intents, @Nullable Bundle options, UserHandle userHandle)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void startIntentSender(IntentSender intent, @Nullable Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags) throws IntentSender.SendIntentException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void startIntentSender(IntentSender intent, @Nullable Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags, @Nullable Bundle options) throws IntentSender.SendIntentException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void sendBroadcast(Intent intent)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void sendBroadcast(Intent intent, @Nullable String receiverPermission)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void sendBroadcastMultiplePermissions(@NonNull Intent intent, @NonNull String[] receiverPermissions)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void sendBroadcastMultiplePermissions(@NonNull Intent intent, @NonNull String[] receiverPermissions, @Nullable String[] excludedPermissions, @Nullable String[] excludedPackages, @Nullable BroadcastOptions options)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void sendBroadcastMultiplePermissions(@NonNull Intent intent, @NonNull String[] receiverPermissions, @Nullable Bundle options)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void sendBroadcastAsUserMultiplePermissions(Intent intent, UserHandle user, String[] receiverPermissions)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void sendBroadcast(@NonNull Intent intent, @Nullable String receiverPermission, @Nullable Bundle options)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void sendBroadcast(Intent intent, @Nullable String receiverPermission, int appOp)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void sendOrderedBroadcast(Intent intent, @Nullable String receiverPermission)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void sendOrderedBroadcast(@NonNull Intent intent, @Nullable String receiverPermission, @Nullable Bundle options)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void sendOrderedBroadcast(Intent intent, @Nullable String receiverPermission, @Nullable BroadcastReceiver resultReceiver, @Nullable Handler scheduler, int initialCode, @Nullable String initialData, @Nullable Bundle initialExtras)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void sendOrderedBroadcast(@NonNull Intent intent, @Nullable String receiverPermission, @Nullable Bundle options, @Nullable BroadcastReceiver resultReceiver, @Nullable Handler scheduler, int initialCode, @Nullable String initialData, @Nullable Bundle initialExtras)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void sendOrderedBroadcast(Intent intent, @Nullable String receiverPermission, int appOp, @Nullable BroadcastReceiver resultReceiver, @Nullable Handler scheduler, int initialCode, @Nullable String initialData, @Nullable Bundle initialExtras)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void sendBroadcastAsUser(Intent intent, UserHandle user)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void sendBroadcastAsUser(Intent intent, UserHandle user, String receiverPermission)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void sendBroadcastAsUser(Intent intent, UserHandle user, @Nullable String receiverPermission, @Nullable Bundle options)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void sendBroadcastAsUser(Intent intent, UserHandle user, @Nullable String receiverPermission, int appOp)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void sendOrderedBroadcastAsUser(Intent intent, UserHandle user, @Nullable String receiverPermission, @Nullable BroadcastReceiver resultReceiver, @Nullable Handler scheduler, int initialCode, @Nullable String initialData, @Nullable Bundle initialExtras)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void sendOrderedBroadcastAsUser(Intent intent, UserHandle user, @Nullable String receiverPermission, int appOp, @Nullable BroadcastReceiver resultReceiver, @Nullable Handler scheduler, int initialCode, @Nullable String initialData, @Nullable Bundle initialExtras)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void sendOrderedBroadcastAsUser(Intent intent, UserHandle user, @Nullable String receiverPermission, int appOp, @Nullable Bundle options, @Nullable BroadcastReceiver resultReceiver, @Nullable Handler scheduler, int initialCode, @Nullable String initialData, @Nullable Bundle initialExtras)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void sendOrderedBroadcast(@RequiresPermission @NonNull Intent intent, @Nullable String receiverPermission, @Nullable String receiverAppOp, @Nullable BroadcastReceiver resultReceiver, @Nullable Handler scheduler, int initialCode, @Nullable String initialData, @Nullable Bundle initialExtras)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void sendOrderedBroadcast(@RequiresPermission @NonNull Intent intent, int initialCode, @Nullable String receiverPermission, @Nullable String receiverAppOp, @Nullable BroadcastReceiver resultReceiver, @Nullable Handler scheduler, @Nullable String initialData, @Nullable Bundle initialExtras, @Nullable Bundle options)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void sendStickyBroadcast(Intent intent)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void sendStickyBroadcast(@NonNull Intent intent, @Nullable Bundle options)",
    "returnType" : "void",
    "comment" : "\n     * <p>Perform a {@link #sendBroadcast(Intent)} that is \"sticky,\" meaning the\n     * Intent you are sending stays around after the broadcast is complete,\n     * so that others can quickly retrieve that data through the return\n     * value of {@link #registerReceiver(BroadcastReceiver, IntentFilter)}.  In\n     * all other ways, this behaves the same as\n     * {@link #sendBroadcast(Intent)}.\n     *\n     * @deprecated Sticky broadcasts should not be used.  They provide no security (anyone\n     * can access them), no protection (anyone can modify them), and many other problems.\n     * The recommended pattern is to use a non-sticky broadcast to report that <em>something</em>\n     * has changed, with another mechanism for apps to retrieve the current value whenever\n     * desired.\n     *\n     * @param intent The Intent to broadcast; all receivers matching this\n     * Intent will receive the broadcast, and the Intent will be held to\n     * be re-broadcast to future receivers.\n     * @param options (optional) Additional sending options, generated from a\n     * {@link android.app.BroadcastOptions}.\n     *\n     * @see #sendBroadcast(Intent)\n     * @see #sendStickyOrderedBroadcast(Intent, BroadcastReceiver, Handler, int, String, Bundle)\n     ",
    "links" : [ "#sendBroadcast(Intent)", "android.app.BroadcastOptions", "#registerReceiver(BroadcastReceiver" ]
  }, {
    "name" : "public void sendStickyOrderedBroadcast(Intent intent, @Nullable BroadcastReceiver resultReceiver, @Nullable Handler scheduler, int initialCode, @Nullable String initialData, @Nullable Bundle initialExtras)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeStickyBroadcast(Intent intent)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void sendStickyBroadcastAsUser(Intent intent, UserHandle user)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void sendStickyBroadcastAsUser(Intent intent, UserHandle user, @Nullable Bundle options)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void sendStickyOrderedBroadcastAsUser(Intent intent, UserHandle user, @Nullable BroadcastReceiver resultReceiver, @Nullable Handler scheduler, int initialCode, @Nullable String initialData, @Nullable Bundle initialExtras)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeStickyBroadcastAsUser(Intent intent, UserHandle user)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Intent registerReceiver(@Nullable BroadcastReceiver receiver, IntentFilter filter)",
    "returnType" : "Intent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Intent registerReceiver(@Nullable BroadcastReceiver receiver, IntentFilter filter, int flags)",
    "returnType" : "Intent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Intent registerReceiver(@Nullable BroadcastReceiver receiver, IntentFilter filter, @Nullable String broadcastPermission, @Nullable Handler scheduler)",
    "returnType" : "Intent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Intent registerReceiver(@Nullable BroadcastReceiver receiver, IntentFilter filter, @Nullable String broadcastPermission, @Nullable Handler scheduler, int flags)",
    "returnType" : "Intent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Intent registerReceiverForAllUsers(@Nullable BroadcastReceiver receiver, @NonNull IntentFilter filter, @Nullable String broadcastPermission, @Nullable Handler scheduler)",
    "returnType" : "Intent",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public Intent registerReceiverForAllUsers(@Nullable BroadcastReceiver receiver, @NonNull IntentFilter filter, @Nullable String broadcastPermission, @Nullable Handler scheduler, int flags)",
    "returnType" : "Intent",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public Intent registerReceiverAsUser(@Nullable BroadcastReceiver receiver, UserHandle user, IntentFilter filter, @Nullable String broadcastPermission, @Nullable Handler scheduler)",
    "returnType" : "Intent",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public Intent registerReceiverAsUser(@Nullable BroadcastReceiver receiver, UserHandle user, IntentFilter filter, @Nullable String broadcastPermission, @Nullable Handler scheduler, int flags)",
    "returnType" : "Intent",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void unregisterReceiver(BroadcastReceiver receiver)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ComponentName startService(Intent service)",
    "returnType" : "ComponentName",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ComponentName startForegroundService(Intent service)",
    "returnType" : "ComponentName",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean stopService(Intent name)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ComponentName startServiceAsUser(Intent service, UserHandle user)",
    "returnType" : "ComponentName",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public ComponentName startForegroundServiceAsUser(Intent service, UserHandle user)",
    "returnType" : "ComponentName",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean stopServiceAsUser(Intent name, UserHandle user)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean bindService(Intent service, ServiceConnection conn, int flags)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean bindService(@NonNull Intent service, @NonNull ServiceConnection conn, @NonNull BindServiceFlags flags)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean bindService(Intent service, int flags, Executor executor, ServiceConnection conn)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean bindService(@NonNull Intent service, @NonNull BindServiceFlags flags, @NonNull Executor executor, @NonNull ServiceConnection conn)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean bindIsolatedService(Intent service, int flags, String instanceName, Executor executor, ServiceConnection conn)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean bindServiceAsUser(Intent service, ServiceConnection conn, int flags, UserHandle user)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean bindServiceAsUser(Intent service, ServiceConnection conn, @NonNull BindServiceFlags flags, UserHandle user)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean bindServiceAsUser(Intent service, ServiceConnection conn, int flags, Handler handler, UserHandle user)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean bindServiceAsUser(Intent service, ServiceConnection conn, @NonNull BindServiceFlags flags, Handler handler, UserHandle user)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void updateServiceGroup(ServiceConnection conn, int group, int importance)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void unbindService(ServiceConnection conn)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean startInstrumentation(ComponentName className, @Nullable String profileFile, @Nullable Bundle arguments)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Object getSystemService(String name)",
    "returnType" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getSystemServiceName(Class<?> serviceClass)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int checkPermission(String permission, int pid, int uid)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int checkPermission(String permission, int pid, int uid, IBinder callerToken)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int checkCallingPermission(String permission)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int checkCallingOrSelfPermission(String permission)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int checkSelfPermission(String permission)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void enforcePermission(String permission, int pid, int uid, @Nullable String message)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void enforceCallingPermission(String permission, @Nullable String message)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void enforceCallingOrSelfPermission(String permission, @Nullable String message)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void grantUriPermission(String toPackage, Uri uri, int modeFlags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void revokeUriPermission(Uri uri, int modeFlags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void revokeUriPermission(String targetPackage, Uri uri, int modeFlags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int checkUriPermission(Uri uri, int pid, int uid, int modeFlags)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int checkContentUriPermissionFull(@NonNull Uri uri, int pid, int uid, int modeFlags)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int[] checkUriPermissions(@NonNull List<Uri> uris, int pid, int uid, int modeFlags)",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int checkUriPermission(Uri uri, int pid, int uid, int modeFlags, IBinder callerToken)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int checkCallingUriPermission(Uri uri, int modeFlags)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int[] checkCallingUriPermissions(@NonNull List<Uri> uris, int modeFlags)",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int checkCallingOrSelfUriPermission(Uri uri, int modeFlags)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int[] checkCallingOrSelfUriPermissions(@NonNull List<Uri> uris, int modeFlags)",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int checkUriPermission(@Nullable Uri uri, @Nullable String readPermission, @Nullable String writePermission, int pid, int uid, int modeFlags)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void enforceUriPermission(Uri uri, int pid, int uid, int modeFlags, String message)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void enforceCallingUriPermission(Uri uri, int modeFlags, String message)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void enforceCallingOrSelfUriPermission(Uri uri, int modeFlags, String message)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void enforceUriPermission(@Nullable Uri uri, @Nullable String readPermission, @Nullable String writePermission, int pid, int uid, int modeFlags, @Nullable String message)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void revokeSelfPermissionsOnKill(@NonNull Collection<String> permissions)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Context createPackageContext(String packageName, int flags) throws PackageManager.NameNotFoundException",
    "returnType" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Context createPackageContextAsUser(String packageName, int flags, UserHandle user) throws PackageManager.NameNotFoundException",
    "returnType" : "Context",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public Context createContextAsUser(UserHandle user, @CreatePackageOptions int flags)",
    "returnType" : "Context",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public Context createApplicationContext(ApplicationInfo application, int flags) throws PackageManager.NameNotFoundException",
    "returnType" : "Context",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public Context createContextForSdkInSandbox(@NonNull ApplicationInfo sdkInfo, int flags) throws PackageManager.NameNotFoundException",
    "returnType" : "Context",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public Context createContextForSplit(String splitName) throws PackageManager.NameNotFoundException",
    "returnType" : "Context",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getUserId()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public UserHandle getUser()",
    "returnType" : "UserHandle",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public Context createConfigurationContext(Configuration overrideConfiguration)",
    "returnType" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Context createDisplayContext(Display display)",
    "returnType" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Context createDeviceContext(int deviceId)",
    "returnType" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Context createWindowContext(@WindowType int type, @Nullable Bundle options)",
    "returnType" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Context createWindowContext(@NonNull Display display, @WindowType int type, @Nullable Bundle options)",
    "returnType" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Context createContext(@NonNull ContextParams contextParams)",
    "returnType" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Context createAttributionContext(@Nullable String attributionTag)",
    "returnType" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public AttributionSource getAttributionSource()",
    "returnType" : "AttributionSource",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isRestricted()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public DisplayAdjustments getDisplayAdjustments(int displayId)",
    "returnType" : "DisplayAdjustments",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public Display getDisplay()",
    "returnType" : "Display",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Display getDisplayNoVerify()",
    "returnType" : "Display",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getDisplayId()",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getAssociatedDisplayId()",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void updateDisplay(int displayId)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void updateDeviceId(int deviceId)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getDeviceId()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void registerDeviceIdChangeListener(@NonNull @CallbackExecutor Executor executor, @NonNull IntConsumer listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void unregisterDeviceIdChangeListener(@NonNull IntConsumer listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Context createDeviceProtectedStorageContext()",
    "returnType" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Context createCredentialProtectedStorageContext()",
    "returnType" : "Context",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public Context createTokenContext(@NonNull IBinder token, @NonNull Display display)",
    "returnType" : "Context",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isDeviceProtectedStorage()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isCredentialProtectedStorage()",
    "returnType" : "boolean",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public boolean canLoadUnsafeResources()",
    "returnType" : "boolean",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public IBinder getActivityToken()",
    "returnType" : "IBinder",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public IBinder getWindowContextToken()",
    "returnType" : "IBinder",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public IServiceConnection getServiceDispatcher(ServiceConnection conn, Handler handler, long flags)",
    "returnType" : "IServiceConnection",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public IApplicationThread getIApplicationThread()",
    "returnType" : "IApplicationThread",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public IBinder getProcessToken()",
    "returnType" : "IBinder",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Handler getMainThreadHandler()",
    "returnType" : "Handler",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getNextAutofillId()",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public AutofillClient getAutofillClient()",
    "returnType" : "AutofillClient",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAutofillClient(AutofillClient client)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public AutofillOptions getAutofillOptions()",
    "returnType" : "AutofillOptions",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setAutofillOptions(AutofillOptions options)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public ContentCaptureOptions getContentCaptureOptions()",
    "returnType" : "ContentCaptureOptions",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setContentCaptureOptions(@Nullable ContentCaptureOptions options)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isUiContext()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isConfigurationContext()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void registerComponentCallbacks(ComponentCallbacks callback)",
    "returnType" : "void",
    "comment" : "\n     * Add a new {@link ComponentCallbacks} to the base application of the\n     * Context, which will be called at the same times as the ComponentCallbacks\n     * methods of activities and other components are called. Note that you\n     * <em>must</em> be sure to use {@link #unregisterComponentCallbacks} when\n     * appropriate in the future; this will not be removed for you.\n     * <p>\n     * After {@link Build.VERSION_CODES#TIRAMISU}, the {@link ComponentCallbacks} will be registered\n     * to {@link #getBaseContext() the base Context}, and can be only used after\n     * {@link #attachBaseContext(Context)}. Users can still call to\n     * {@code getApplicationContext().registerComponentCallbacks(ComponentCallbacks)} to add\n     * {@link ComponentCallbacks} to the base application.\n     *\n     * @param callback The interface to call.  This can be either a\n     * {@link ComponentCallbacks} or {@link ComponentCallbacks2} interface.\n     * @throws IllegalStateException if this method calls before {@link #attachBaseContext(Context)}\n     ",
    "links" : [ "android.content.ComponentCallbacks2", "#unregisterComponentCallbacks", "#getBaseContext()", "#attachBaseContext(Context)", "Build.VERSION_CODES#TIRAMISU", "android.content.ComponentCallbacks" ]
  }, {
    "name" : "public void unregisterComponentCallbacks(ComponentCallbacks callback)",
    "returnType" : "void",
    "comment" : "\n     * Remove a {@link ComponentCallbacks} object that was previously registered\n     * with {@link #registerComponentCallbacks(ComponentCallbacks)}.\n     * <p>\n     * After {@link Build.VERSION_CODES#TIRAMISU}, the {@link ComponentCallbacks} will be\n     * unregistered to {@link #getBaseContext() the base Context}, and can be only used after\n     * {@link #attachBaseContext(Context)}\n     * </p>\n     *\n     * @param callback The interface to call.  This can be either a\n     * {@link ComponentCallbacks} or {@link ComponentCallbacks2} interface.\n     * @throws IllegalStateException if this method calls before {@link #attachBaseContext(Context)}\n     ",
    "links" : [ "android.content.ComponentCallbacks2", "#registerComponentCallbacks(ComponentCallbacks)", "#getBaseContext()", "#attachBaseContext(Context)", "Build.VERSION_CODES#TIRAMISU", "android.content.ComponentCallbacks" ]
  }, {
    "name" : "public void closeSystemDialogs()",
    "returnType" : "void",
    "comment" : "\n     * Closes temporary system dialogs. Some examples of temporary system dialogs are the\n     * notification window-shade and the recent tasks dialog.\n     *\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "protected void attachBaseContext(Context base)", "public Context getBaseContext()", "public AssetManager getAssets()", "public Resources getResources()", "public PackageManager getPackageManager()", "public ContentResolver getContentResolver()", "public Looper getMainLooper()", "public Executor getMainExecutor()", "public Context getApplicationContext()", "public void setTheme(int resid)", "public int getThemeResId()", "public Resources.Theme getTheme()", "public ClassLoader getClassLoader()", "public String getPackageName()", "public String getBasePackageName()", "public String getOpPackageName()", "public String getAttributionTag()", "public ContextParams getParams()", "public ApplicationInfo getApplicationInfo()", "public String getPackageResourcePath()", "public String getPackageCodePath()", "public SharedPreferences getSharedPreferences(String name, int mode)", "public SharedPreferences getSharedPreferences(File file, int mode)", "public void reloadSharedPreferences()", "public boolean moveSharedPreferencesFrom(Context sourceContext, String name)", "public boolean deleteSharedPreferences(String name)", "public FileInputStream openFileInput(String name) throws FileNotFoundException", "public FileOutputStream openFileOutput(String name, int mode) throws FileNotFoundException", "public boolean deleteFile(String name)", "public File getFileStreamPath(String name)", "public File getSharedPreferencesPath(String name)", "public String[] fileList()", "public File getDataDir()", "public File getFilesDir()", "public File getCrateDir(@NonNull String cratedId)", "public File getNoBackupFilesDir()", "public File getExternalFilesDir(@Nullable String type)", "public File[] getExternalFilesDirs(String type)", "public File getObbDir()", "public File[] getObbDirs()", "public File getCacheDir()", "public File getCodeCacheDir()", "public File getExternalCacheDir()", "public File[] getExternalCacheDirs()", "public File[] getExternalMediaDirs()", "public File getDir(String name, int mode)", "public File getPreloadsFileCache()", "public SQLiteDatabase openOrCreateDatabase(String name, int mode, CursorFactory factory)", "public SQLiteDatabase openOrCreateDatabase(String name, int mode, CursorFactory factory, @Nullable DatabaseErrorHandler errorHandler)", "public boolean moveDatabaseFrom(Context sourceContext, String name)", "public boolean deleteDatabase(String name)", "public File getDatabasePath(String name)", "public String[] databaseList()", "public Drawable getWallpaper()", "public Drawable peekWallpaper()", "public int getWallpaperDesiredMinimumWidth()", "public int getWallpaperDesiredMinimumHeight()", "public void setWallpaper(Bitmap bitmap) throws IOException", "public void setWallpaper(InputStream data) throws IOException", "public void clearWallpaper() throws IOException", "public void startActivity(Intent intent)", "public void startActivityAsUser(Intent intent, UserHandle user)", "public void startActivityForResult(String who, Intent intent, int requestCode, @Nullable Bundle options)", "public boolean canStartActivityForResult()", "public void startActivity(Intent intent, @Nullable Bundle options)", "public void startActivityAsUser(Intent intent, @Nullable Bundle options, UserHandle user)", "public void startActivities(Intent[] intents)", "public void startActivities(Intent[] intents, @Nullable Bundle options)", "public int startActivitiesAsUser(Intent[] intents, @Nullable Bundle options, UserHandle userHandle)", "public void startIntentSender(IntentSender intent, @Nullable Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags) throws IntentSender.SendIntentException", "public void startIntentSender(IntentSender intent, @Nullable Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags, @Nullable Bundle options) throws IntentSender.SendIntentException", "public void sendBroadcast(Intent intent)", "public void sendBroadcast(Intent intent, @Nullable String receiverPermission)", "public void sendBroadcastMultiplePermissions(@NonNull Intent intent, @NonNull String[] receiverPermissions)", "public void sendBroadcastMultiplePermissions(@NonNull Intent intent, @NonNull String[] receiverPermissions, @Nullable String[] excludedPermissions, @Nullable String[] excludedPackages, @Nullable BroadcastOptions options)", "public void sendBroadcastMultiplePermissions(@NonNull Intent intent, @NonNull String[] receiverPermissions, @Nullable Bundle options)", "public void sendBroadcastAsUserMultiplePermissions(Intent intent, UserHandle user, String[] receiverPermissions)", "public void sendBroadcast(@NonNull Intent intent, @Nullable String receiverPermission, @Nullable Bundle options)", "public void sendBroadcast(Intent intent, @Nullable String receiverPermission, int appOp)", "public void sendOrderedBroadcast(Intent intent, @Nullable String receiverPermission)", "public void sendOrderedBroadcast(@NonNull Intent intent, @Nullable String receiverPermission, @Nullable Bundle options)", "public void sendOrderedBroadcast(Intent intent, @Nullable String receiverPermission, @Nullable BroadcastReceiver resultReceiver, @Nullable Handler scheduler, int initialCode, @Nullable String initialData, @Nullable Bundle initialExtras)", "public void sendOrderedBroadcast(@NonNull Intent intent, @Nullable String receiverPermission, @Nullable Bundle options, @Nullable BroadcastReceiver resultReceiver, @Nullable Handler scheduler, int initialCode, @Nullable String initialData, @Nullable Bundle initialExtras)", "public void sendOrderedBroadcast(Intent intent, @Nullable String receiverPermission, int appOp, @Nullable BroadcastReceiver resultReceiver, @Nullable Handler scheduler, int initialCode, @Nullable String initialData, @Nullable Bundle initialExtras)", "public void sendBroadcastAsUser(Intent intent, UserHandle user)", "public void sendBroadcastAsUser(Intent intent, UserHandle user, String receiverPermission)", "public void sendBroadcastAsUser(Intent intent, UserHandle user, @Nullable String receiverPermission, @Nullable Bundle options)", "public void sendBroadcastAsUser(Intent intent, UserHandle user, @Nullable String receiverPermission, int appOp)", "public void sendOrderedBroadcastAsUser(Intent intent, UserHandle user, @Nullable String receiverPermission, @Nullable BroadcastReceiver resultReceiver, @Nullable Handler scheduler, int initialCode, @Nullable String initialData, @Nullable Bundle initialExtras)", "public void sendOrderedBroadcastAsUser(Intent intent, UserHandle user, @Nullable String receiverPermission, int appOp, @Nullable BroadcastReceiver resultReceiver, @Nullable Handler scheduler, int initialCode, @Nullable String initialData, @Nullable Bundle initialExtras)", "public void sendOrderedBroadcastAsUser(Intent intent, UserHandle user, @Nullable String receiverPermission, int appOp, @Nullable Bundle options, @Nullable BroadcastReceiver resultReceiver, @Nullable Handler scheduler, int initialCode, @Nullable String initialData, @Nullable Bundle initialExtras)", "public void sendOrderedBroadcast(@RequiresPermission @NonNull Intent intent, @Nullable String receiverPermission, @Nullable String receiverAppOp, @Nullable BroadcastReceiver resultReceiver, @Nullable Handler scheduler, int initialCode, @Nullable String initialData, @Nullable Bundle initialExtras)", "public void sendOrderedBroadcast(@RequiresPermission @NonNull Intent intent, int initialCode, @Nullable String receiverPermission, @Nullable String receiverAppOp, @Nullable BroadcastReceiver resultReceiver, @Nullable Handler scheduler, @Nullable String initialData, @Nullable Bundle initialExtras, @Nullable Bundle options)", "public void sendStickyBroadcast(Intent intent)", "public void sendStickyBroadcast(@NonNull Intent intent, @Nullable Bundle options)", "public void sendStickyOrderedBroadcast(Intent intent, @Nullable BroadcastReceiver resultReceiver, @Nullable Handler scheduler, int initialCode, @Nullable String initialData, @Nullable Bundle initialExtras)", "public void removeStickyBroadcast(Intent intent)", "public void sendStickyBroadcastAsUser(Intent intent, UserHandle user)", "public void sendStickyBroadcastAsUser(Intent intent, UserHandle user, @Nullable Bundle options)", "public void sendStickyOrderedBroadcastAsUser(Intent intent, UserHandle user, @Nullable BroadcastReceiver resultReceiver, @Nullable Handler scheduler, int initialCode, @Nullable String initialData, @Nullable Bundle initialExtras)", "public void removeStickyBroadcastAsUser(Intent intent, UserHandle user)", "public Intent registerReceiver(@Nullable BroadcastReceiver receiver, IntentFilter filter)", "public Intent registerReceiver(@Nullable BroadcastReceiver receiver, IntentFilter filter, int flags)", "public Intent registerReceiver(@Nullable BroadcastReceiver receiver, IntentFilter filter, @Nullable String broadcastPermission, @Nullable Handler scheduler)", "public Intent registerReceiver(@Nullable BroadcastReceiver receiver, IntentFilter filter, @Nullable String broadcastPermission, @Nullable Handler scheduler, int flags)", "public Intent registerReceiverForAllUsers(@Nullable BroadcastReceiver receiver, @NonNull IntentFilter filter, @Nullable String broadcastPermission, @Nullable Handler scheduler)", "public Intent registerReceiverForAllUsers(@Nullable BroadcastReceiver receiver, @NonNull IntentFilter filter, @Nullable String broadcastPermission, @Nullable Handler scheduler, int flags)", "public Intent registerReceiverAsUser(@Nullable BroadcastReceiver receiver, UserHandle user, IntentFilter filter, @Nullable String broadcastPermission, @Nullable Handler scheduler)", "public Intent registerReceiverAsUser(@Nullable BroadcastReceiver receiver, UserHandle user, IntentFilter filter, @Nullable String broadcastPermission, @Nullable Handler scheduler, int flags)", "public void unregisterReceiver(BroadcastReceiver receiver)", "public ComponentName startService(Intent service)", "public ComponentName startForegroundService(Intent service)", "public boolean stopService(Intent name)", "public ComponentName startServiceAsUser(Intent service, UserHandle user)", "public ComponentName startForegroundServiceAsUser(Intent service, UserHandle user)", "public boolean stopServiceAsUser(Intent name, UserHandle user)", "public boolean bindService(Intent service, ServiceConnection conn, int flags)", "public boolean bindService(@NonNull Intent service, @NonNull ServiceConnection conn, @NonNull BindServiceFlags flags)", "public boolean bindService(Intent service, int flags, Executor executor, ServiceConnection conn)", "public boolean bindService(@NonNull Intent service, @NonNull BindServiceFlags flags, @NonNull Executor executor, @NonNull ServiceConnection conn)", "public boolean bindIsolatedService(Intent service, int flags, String instanceName, Executor executor, ServiceConnection conn)", "public boolean bindServiceAsUser(Intent service, ServiceConnection conn, int flags, UserHandle user)", "public boolean bindServiceAsUser(Intent service, ServiceConnection conn, @NonNull BindServiceFlags flags, UserHandle user)", "public boolean bindServiceAsUser(Intent service, ServiceConnection conn, int flags, Handler handler, UserHandle user)", "public boolean bindServiceAsUser(Intent service, ServiceConnection conn, @NonNull BindServiceFlags flags, Handler handler, UserHandle user)", "public void updateServiceGroup(ServiceConnection conn, int group, int importance)", "public void unbindService(ServiceConnection conn)", "public boolean startInstrumentation(ComponentName className, @Nullable String profileFile, @Nullable Bundle arguments)", "public Object getSystemService(String name)", "public String getSystemServiceName(Class<?> serviceClass)", "public int checkPermission(String permission, int pid, int uid)", "public int checkPermission(String permission, int pid, int uid, IBinder callerToken)", "public int checkCallingPermission(String permission)", "public int checkCallingOrSelfPermission(String permission)", "public int checkSelfPermission(String permission)", "public void enforcePermission(String permission, int pid, int uid, @Nullable String message)", "public void enforceCallingPermission(String permission, @Nullable String message)", "public void enforceCallingOrSelfPermission(String permission, @Nullable String message)", "public void grantUriPermission(String toPackage, Uri uri, int modeFlags)", "public void revokeUriPermission(Uri uri, int modeFlags)", "public void revokeUriPermission(String targetPackage, Uri uri, int modeFlags)", "public int checkUriPermission(Uri uri, int pid, int uid, int modeFlags)", "public int checkContentUriPermissionFull(@NonNull Uri uri, int pid, int uid, int modeFlags)", "public int[] checkUriPermissions(@NonNull List<Uri> uris, int pid, int uid, int modeFlags)", "public int checkUriPermission(Uri uri, int pid, int uid, int modeFlags, IBinder callerToken)", "public int checkCallingUriPermission(Uri uri, int modeFlags)", "public int[] checkCallingUriPermissions(@NonNull List<Uri> uris, int modeFlags)", "public int checkCallingOrSelfUriPermission(Uri uri, int modeFlags)", "public int[] checkCallingOrSelfUriPermissions(@NonNull List<Uri> uris, int modeFlags)", "public int checkUriPermission(@Nullable Uri uri, @Nullable String readPermission, @Nullable String writePermission, int pid, int uid, int modeFlags)", "public void enforceUriPermission(Uri uri, int pid, int uid, int modeFlags, String message)", "public void enforceCallingUriPermission(Uri uri, int modeFlags, String message)", "public void enforceCallingOrSelfUriPermission(Uri uri, int modeFlags, String message)", "public void enforceUriPermission(@Nullable Uri uri, @Nullable String readPermission, @Nullable String writePermission, int pid, int uid, int modeFlags, @Nullable String message)", "public void revokeSelfPermissionsOnKill(@NonNull Collection<String> permissions)", "public Context createPackageContext(String packageName, int flags) throws PackageManager.NameNotFoundException", "public Context createPackageContextAsUser(String packageName, int flags, UserHandle user) throws PackageManager.NameNotFoundException", "public Context createContextAsUser(UserHandle user, @CreatePackageOptions int flags)", "public Context createApplicationContext(ApplicationInfo application, int flags) throws PackageManager.NameNotFoundException", "public Context createContextForSdkInSandbox(@NonNull ApplicationInfo sdkInfo, int flags) throws PackageManager.NameNotFoundException", "public Context createContextForSplit(String splitName) throws PackageManager.NameNotFoundException", "public int getUserId()", "public UserHandle getUser()", "public Context createConfigurationContext(Configuration overrideConfiguration)", "public Context createDisplayContext(Display display)", "public Context createDeviceContext(int deviceId)", "public Context createWindowContext(@WindowType int type, @Nullable Bundle options)", "public Context createWindowContext(@NonNull Display display, @WindowType int type, @Nullable Bundle options)", "public Context createContext(@NonNull ContextParams contextParams)", "public Context createAttributionContext(@Nullable String attributionTag)", "public AttributionSource getAttributionSource()", "public boolean isRestricted()", "public DisplayAdjustments getDisplayAdjustments(int displayId)", "public Display getDisplay()", "public Display getDisplayNoVerify()", "public int getDisplayId()", "public int getAssociatedDisplayId()", "public void updateDisplay(int displayId)", "public void updateDeviceId(int deviceId)", "public int getDeviceId()", "public void registerDeviceIdChangeListener(@NonNull @CallbackExecutor Executor executor, @NonNull IntConsumer listener)", "public void unregisterDeviceIdChangeListener(@NonNull IntConsumer listener)", "public Context createDeviceProtectedStorageContext()", "public Context createCredentialProtectedStorageContext()", "public Context createTokenContext(@NonNull IBinder token, @NonNull Display display)", "public boolean isDeviceProtectedStorage()", "public boolean isCredentialProtectedStorage()", "public boolean canLoadUnsafeResources()", "public IBinder getActivityToken()", "public IBinder getWindowContextToken()", "public IServiceConnection getServiceDispatcher(ServiceConnection conn, Handler handler, long flags)", "public IApplicationThread getIApplicationThread()", "public IBinder getProcessToken()", "public Handler getMainThreadHandler()", "public int getNextAutofillId()", "public AutofillClient getAutofillClient()", "public void setAutofillClient(AutofillClient client)", "public AutofillOptions getAutofillOptions()", "public void setAutofillOptions(AutofillOptions options)", "public ContentCaptureOptions getContentCaptureOptions()", "public void setContentCaptureOptions(@Nullable ContentCaptureOptions options)", "public boolean isUiContext()", "public boolean isConfigurationContext()", "public void registerComponentCallbacks(ComponentCallbacks callback)", "public void unregisterComponentCallbacks(ComponentCallbacks callback)", "public void closeSystemDialogs()" ],
  "variableNames" : [ "mBase", "mCallbacksRegisteredToSuper", "mLock" ]
}