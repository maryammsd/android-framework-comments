{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/graphics/NinePatch.java",
  "packageName" : "android.graphics",
  "className" : "NinePatch",
  "comment" : "\n * The NinePatch class permits drawing a bitmap in nine or more sections.\n * Essentially, it allows the creation of custom graphics that will scale the\n * way that you define, when content added within the image exceeds the normal\n * bounds of the graphic. For a thorough explanation of a NinePatch image, \n * read the discussion in the \n * <a href=\"{@docRoot}guide/topics/graphics/2d-graphics.html#nine-patch\">2D\n * Graphics</a> document.\n * <p>\n * The <a href=\"{@docRoot}guide/developing/tools/draw9patch.html\">Draw 9-Patch</a> \n * tool offers an extremely handy way to create your NinePatch images,\n * using a WYSIWYG graphics editor.\n * </p>\n ",
  "variables" : [ {
    "name" : "mBitmap",
    "type" : "Bitmap",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNativeChunk",
    "type" : "long",
    "comment" : "\n     * Used by native code. This pointer is an instance of Res_png_9patch*.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mPaint",
    "type" : "Paint",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSrcName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected void finalize() throws Throwable",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getName()",
    "returnType" : "String",
    "comment" : "\n     * Returns the name of this NinePatch object if one was specified\n     * when calling the constructor.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Paint getPaint()",
    "returnType" : "Paint",
    "comment" : "\n     * Returns the paint used to draw this NinePatch. The paint can be null.\n     *\n     * @see #setPaint(Paint)\n     * @see #draw(Canvas, Rect)\n     * @see #draw(Canvas, RectF)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPaint(Paint p)",
    "returnType" : "void",
    "comment" : "\n     * Sets the paint to use when drawing the NinePatch.\n     *\n     * @param p The paint that will be used to draw this NinePatch.\n     *\n     * @see #getPaint()\n     * @see #draw(Canvas, Rect)\n     * @see #draw(Canvas, RectF)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Bitmap getBitmap()",
    "returnType" : "Bitmap",
    "comment" : "\n     * Returns the bitmap used to draw this NinePatch.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void draw(Canvas canvas, RectF location)",
    "returnType" : "void",
    "comment" : " \n     * Draws the NinePatch. This method will use the paint returned by {@link #getPaint()}.\n     *\n     * @param canvas A container for the current matrix and clip used to draw the NinePatch.\n     * @param location Where to draw the NinePatch.\n     ",
    "links" : [ "#getPaint()" ]
  }, {
    "name" : "public void draw(Canvas canvas, Rect location)",
    "returnType" : "void",
    "comment" : " \n     * Draws the NinePatch. This method will use the paint returned by {@link #getPaint()}.\n     *\n     * @param canvas A container for the current matrix and clip used to draw the NinePatch.\n     * @param location Where to draw the NinePatch.\n     ",
    "links" : [ "#getPaint()" ]
  }, {
    "name" : "public void draw(Canvas canvas, Rect location, Paint paint)",
    "returnType" : "void",
    "comment" : " \n     * Draws the NinePatch. This method will ignore the paint returned\n     * by {@link #getPaint()} and use the specified paint instead.\n     *\n     * @param canvas A container for the current matrix and clip used to draw the NinePatch.\n     * @param location Where to draw the NinePatch.\n     * @param paint The Paint to draw through.\n     ",
    "links" : [ "#getPaint()" ]
  }, {
    "name" : "public int getDensity()",
    "returnType" : "int",
    "comment" : "\n     * Return the underlying bitmap's density, as per\n     * {@link Bitmap#getDensity() Bitmap.getDensity()}.\n     ",
    "links" : [ "android.graphics.Bitmap#getDensity()" ]
  }, {
    "name" : "public int getWidth()",
    "returnType" : "int",
    "comment" : "\n     * Returns the intrinsic width, in pixels, of this NinePatch. This is equivalent\n     * to querying the width of the underlying bitmap returned by {@link #getBitmap()}.\n     ",
    "links" : [ "#getBitmap()" ]
  }, {
    "name" : "public int getHeight()",
    "returnType" : "int",
    "comment" : "\n     * Returns the intrinsic height, in pixels, of this NinePatch. This is equivalent\n     * to querying the height of the underlying bitmap returned by {@link #getBitmap()}.\n     ",
    "links" : [ "#getBitmap()" ]
  }, {
    "name" : "public final boolean hasAlpha()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether this NinePatch contains transparent or translucent pixels.\n     * This is equivalent to calling <code>getBitmap().hasAlpha()</code> on this\n     * NinePatch.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final Region getTransparentRegion(Rect bounds)",
    "returnType" : "Region",
    "comment" : "\n     * Returns a {@link Region} representing the parts of the NinePatch that are\n     * completely transparent.\n     *\n     * @param bounds The location and size of the NinePatch.\n     *\n     * @return null if the NinePatch has no transparent region to\n     * report, else a {@link Region} holding the parts of the specified bounds\n     * that are transparent.\n     ",
    "links" : [ "android.graphics.Region" ]
  }, {
    "name" : "public static native boolean isNinePatchChunk(byte[] chunk)",
    "returnType" : "boolean",
    "comment" : "\n     * Verifies that the specified byte array is a valid 9-patch data chunk.\n     *\n     * @param chunk A byte array representing a 9-patch data chunk.\n     *\n     * @return True if the specified byte array represents a 9-patch data chunk,\n     *         false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static native long validateNinePatchChunk(byte[] chunk)",
    "returnType" : "long",
    "comment" : "\n     * Validates the 9-patch chunk and throws an exception if the chunk is invalid.\n     * If validation is successful, this method returns a native Res_png_9patch*\n     * object used by the renderers.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeFinalize(long chunk)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeGetTransparentRegion(long bitmapHandle, long chunk, Rect location)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "mBitmap", "mNativeChunk", "mPaint", "mSrcName" ],
  "methodNames" : [ "protected void finalize() throws Throwable", "public String getName()", "public Paint getPaint()", "public void setPaint(Paint p)", "public Bitmap getBitmap()", "public void draw(Canvas canvas, RectF location)", "public void draw(Canvas canvas, Rect location)", "public void draw(Canvas canvas, Rect location, Paint paint)", "public int getDensity()", "public int getWidth()", "public int getHeight()", "public final boolean hasAlpha()", "public final Region getTransparentRegion(Rect bounds)", "public static native boolean isNinePatchChunk(byte[] chunk)", "private static native long validateNinePatchChunk(byte[] chunk)", "private static native void nativeFinalize(long chunk)", "private static native long nativeGetTransparentRegion(long bitmapHandle, long chunk, Rect location)" ]
}