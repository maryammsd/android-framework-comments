{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/media/tv/tunerresourcemanager/TunerResourceManager.java",
  "packageName" : "android.media.tv.tunerresourcemanager",
  "className" : "TunerResourceManager",
  "comment" : "\n * Interface of the Tuner Resource Manager(TRM). It manages resources used by TV Tuners.\n * <p>Resources include:\n * <ul>\n * <li>TunerFrontend {@link android.media.tv.tuner.frontend}.\n * <li>TunerLnb {@link android.media.tv.tuner.Lnb}.\n * <li>MediaCas {@link android.media.MediaCas}.\n * <ul>\n *\n * <p>Expected workflow is:\n * <ul>\n * <li>Tuner Java/MediaCas/TIF update resources of the current device with TRM.\n * <li>Client registers its profile through {@link #registerClientProfile(ResourceClientProfile,\n * Executor, ResourcesReclaimListener, int[])}.\n * <li>Client requests resources through request APIs.\n * <li>If the resource needs to be handed to a higher priority client from a lower priority\n * one, TRM calls IResourcesReclaimListener registered by the lower priority client to release\n * the resource.\n * <ul>\n *\n * <p>TRM also exposes its priority comparison algorithm as a helping method to other services.\n * {@see #isHigherPriority(ResourceClientProfile, ResourceClientProfile)}.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INVALID_RESOURCE_HANDLE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INVALID_OWNER_ID",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TUNER_RESOURCE_TYPE_FRONTEND",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TUNER_RESOURCE_TYPE_DEMUX",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TUNER_RESOURCE_TYPE_DESCRAMBLER",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TUNER_RESOURCE_TYPE_LNB",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TUNER_RESOURCE_TYPE_CAS_SESSION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TUNER_RESOURCE_TYPE_MAX",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "ITunerResourceManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUserId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void registerClientProfile(@NonNull ResourceClientProfile profile, @NonNull @CallbackExecutor Executor executor, @NonNull ResourcesReclaimListener listener, @NonNull int[] clientId)",
    "returnType" : "void",
    "comment" : "\n     * This API is used by the client to register their profile with the Tuner Resource manager.\n     *\n     * <p>The profile contains information that can show the base priority score of the client.\n     *\n     * @param profile {@link ResourceClientProfile} profile of the current client. Undefined use\n     *                case would cause IllegalArgumentException.\n     * @param executor the executor on which the listener would be invoked.\n     * @param listener {@link ResourcesReclaimListener} callback to reclaim clients' resources when\n     *                 needed.\n     * @param clientId returned a clientId from the resource manager when the\n     *                 the client registeres.\n     * @throws IllegalArgumentException when {@code profile} contains undefined use case.\n     ",
    "links" : [ "ResourcesReclaimListener", "android.media.tv.tunerresourcemanager.ResourceClientProfile" ]
  }, {
    "name" : "public void unregisterClientProfile(int clientId)",
    "returnType" : "void",
    "comment" : "\n     * This API is used by the client to unregister their profile with the\n     * Tuner Resource manager.\n     *\n     * @param clientId the client id that needs to be unregistered.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean updateClientPriority(int clientId, int priority, int niceValue)",
    "returnType" : "boolean",
    "comment" : "\n     * This API is used by client to update its registered {@link ResourceClientProfile}.\n     *\n     * <p>We recommend creating a new tuner instance for different use cases instead of using this\n     * API since different use cases may need different resources.\n     *\n     * <p>If TIS updates use case, it needs to ensure underneath resources are exchangeable between\n     * two different use cases.\n     *\n     * <p>Only the arbitrary priority and niceValue are allowed to be updated.\n     *\n     * @param clientId the id of the client that is updating its profile.\n     * @param priority the priority that the client would like to update to.\n     * @param niceValue the nice value that the client would like to update to.\n     *\n     * @return true if the update is successful.\n     ",
    "links" : [ "android.media.tv.tunerresourcemanager.ResourceClientProfile" ]
  }, {
    "name" : "public void setFrontendInfoList(@NonNull TunerFrontendInfo[] infos)",
    "returnType" : "void",
    "comment" : "\n     * Updates the current TRM of the TunerHAL Frontend information.\n     *\n     * <p><strong>Note:</strong> This update must happen before the first\n     * {@link #requestFrontend(TunerFrontendRequest, int[])} and\n     * {@link #releaseFrontend(int, int)} call.\n     *\n     * @param infos an array of the available {@link TunerFrontendInfo} information.\n     ",
    "links" : [ "#releaseFrontend(int", "android.media.tv.tunerresourcemanager.TunerFrontendInfo", "#requestFrontend(TunerFrontendRequest" ]
  }, {
    "name" : "public void updateCasInfo(int casSystemId, int maxSessionNum)",
    "returnType" : "void",
    "comment" : "\n     * Updates the TRM of the current CAS information.\n     *\n     * <p><strong>Note:</strong> This update must happen before the first\n     * {@link #requestCasSession(CasSessionRequest, int[])} and {@link #releaseCasSession(int, int)}\n     * call.\n     *\n     * @param casSystemId id of the updating CAS system.\n     * @param maxSessionNum the max session number of the CAS system that is updated.\n     ",
    "links" : [ "#requestCasSession(CasSessionRequest", "#releaseCasSession(int" ]
  }, {
    "name" : "public void setLnbInfoList(int[] lnbIds)",
    "returnType" : "void",
    "comment" : "\n     * Updates the TRM of the current Lnb information.\n     *\n     * <p><strong>Note:</strong> This update must happen before the first\n     * {@link #requestLnb(TunerLnbRequest, int[])} and {@link #releaseLnb(int, int)} call.\n     *\n     * @param lnbIds ids of the updating lnbs.\n     ",
    "links" : [ "#releaseLnb(int", "#requestLnb(TunerLnbRequest" ]
  }, {
    "name" : "public boolean requestFrontend(@NonNull TunerFrontendRequest request, @Nullable int[] frontendHandle)",
    "returnType" : "boolean",
    "comment" : "\n     * Requests a frontend resource.\n     *\n     * <p>There are three possible scenarios:\n     * <ul>\n     * <li>If there is frontend available, the API would send the id back.\n     *\n     * <li>If no Frontend is available but the current request info can show higher priority than\n     * other uses of Frontend, the API will send\n     * {@link IResourcesReclaimListener#onReclaimResources()} to the {@link Tuner}. Tuner would\n     * handle the resource reclaim on the holder of lower priority and notify the holder of its\n     * resource loss.\n     *\n     * <li>If no frontend can be granted, the API would return false.\n     * <ul>\n     *\n     * <p><strong>Note:</strong> {@link #setFrontendInfoList(TunerFrontendInfo[])} must be called\n     * before this request.\n     *\n     * @param request {@link TunerFrontendRequest} information of the current request.\n     * @param frontendHandle a one-element array to return the granted frontendHandle. If\n     *                       no frontend granted, this will return {@link #INVALID_RESOURCE_HANDLE}.\n     *\n     * @return true if there is frontend granted.\n     ",
    "links" : [ "#onReclaimResources()", "#INVALID_RESOURCE_HANDLE", "Tuner", "android.media.tv.tunerresourcemanager.TunerFrontendRequest", "#setFrontendInfoList(TunerFrontendInfo" ]
  }, {
    "name" : "public void shareFrontend(int selfClientId, int targetClientId)",
    "returnType" : "void",
    "comment" : "\n     * Requests from the client to share frontend with an existing client.\n     *\n     * <p><strong>Note:</strong> {@link #setFrontendInfoList(TunerFrontendInfo[])} must be called\n     * before this request.\n     *\n     * @param selfClientId the id of the client that sends the request.\n     * @param targetClientId the id of the client to share the frontend with.\n     ",
    "links" : [ "#setFrontendInfoList(TunerFrontendInfo" ]
  }, {
    "name" : "public boolean requestDemux(@NonNull TunerDemuxRequest request, @NonNull int[] demuxHandle)",
    "returnType" : "boolean",
    "comment" : "\n     * Requests a Tuner Demux resource.\n     *\n     * <p>There are three possible scenarios:\n     * <ul>\n     * <li>If there is Demux available, the API would send the handle back.\n     *\n     * <li>If no Demux is available but the current request has a higher priority than other uses of\n     * demuxes, the API will send {@link IResourcesReclaimListener#onReclaimResources()} to the\n     * {@link Tuner}. Tuner would handle the resource reclaim on the holder of lower priority and\n     * notify the holder of its resource loss.\n     *\n     * <li>If no Demux system can be granted, the API would return false.\n     * <ul>\n     *\n     * @param request {@link TunerDemuxRequest} information of the current request.\n     * @param demuxHandle a one-element array to return the granted Demux handle.\n     *                    If no Demux granted, this will return {@link #INVALID_RESOURCE_HANDLE}.\n     *\n     * @return true if there is Demux granted.\n     ",
    "links" : [ "#onReclaimResources()", "android.media.tv.tunerresourcemanager.TunerDemuxRequest", "#INVALID_RESOURCE_HANDLE", "Tuner" ]
  }, {
    "name" : "public boolean requestDescrambler(@NonNull TunerDescramblerRequest request, @NonNull int[] descramblerHandle)",
    "returnType" : "boolean",
    "comment" : "\n     * Requests a Tuner Descrambler resource.\n     *\n     * <p>There are three possible scenarios:\n     * <ul>\n     * <li>If there is Descrambler available, the API would send the handle back.\n     *\n     * <li>If no Descrambler is available but the current request has a higher priority than other\n     * uses of descramblers, the API will send\n     * {@link IResourcesReclaimListener#onReclaimResources()} to the {@link Tuner}. Tuner would\n     * handle the resource reclaim on the holder of lower priority and notify the holder of its\n     * resource loss.\n     *\n     * <li>If no Descrambler system can be granted, the API would return false.\n     * <ul>\n     *\n     * @param request {@link TunerDescramblerRequest} information of the current request.\n     * @param descramblerHandle a one-element array to return the granted Descrambler handle.\n     *                          If no Descrambler granted, this will return\n     *                          {@link #INVALID_RESOURCE_HANDLE}.\n     *\n     * @return true if there is Descrambler granted.\n     ",
    "links" : [ "#onReclaimResources()", "android.media.tv.tunerresourcemanager.TunerDescramblerRequest", "#INVALID_RESOURCE_HANDLE", "Tuner" ]
  }, {
    "name" : "public boolean requestCasSession(@NonNull CasSessionRequest request, @NonNull int[] casSessionHandle)",
    "returnType" : "boolean",
    "comment" : "\n     * Requests a CAS session resource.\n     *\n     * <p>There are three possible scenarios:\n     * <ul>\n     * <li>If there is Cas session available, the API would send the id back.\n     *\n     * <li>If no Cas system is available but the current request info can show higher priority than\n     * other uses of the cas sessions under the requested cas system, the API will send\n     * {@link IResourcesReclaimListener#onReclaimResources()} to the {@link Tuner}. Tuner would\n     * handle the resource reclaim on the holder of lower priority and notify the holder of its\n     * resource loss.\n     *\n     * <p><strong>Note:</strong> {@link #updateCasInfo(int, int)} must be called before this\n     * request.\n     *\n     * @param request {@link CasSessionRequest} information of the current request.\n     * @param casSessionHandle a one-element array to return the granted cas session handel.\n     *                         If no CAS granted, this will return {@link #INVALID_RESOURCE_HANDLE}.\n     *\n     * @return true if there is CAS session granted.\n     ",
    "links" : [ "#onReclaimResources()", "android.media.tv.tunerresourcemanager.CasSessionRequest", "#updateCasInfo(int", "#INVALID_RESOURCE_HANDLE", "Tuner" ]
  }, {
    "name" : "public boolean requestLnb(@NonNull TunerLnbRequest request, @NonNull int[] lnbHandle)",
    "returnType" : "boolean",
    "comment" : "\n     * Requests a Tuner Lnb resource.\n     *\n     * <p>There are three possible scenarios:\n     * <ul>\n     * <li>If there is Lnb available, the API would send the id back.\n     *\n     * <li>If no Lnb is available but the current request has a higher priority than other uses of\n     * lnbs, the API will send {@link IResourcesReclaimListener#onReclaimResources()} to the\n     * {@link Tuner}. Tuner would handle the resource reclaim on the holder of lower priority and\n     * notify the holder of its resource loss.\n     *\n     * <li>If no Lnb system can be granted, the API would return false.\n     * <ul>\n     *\n     * <p><strong>Note:</strong> {@link #setLnbInfoList(int[])} must be called before this request.\n     *\n     * @param request {@link TunerLnbRequest} information of the current request.\n     * @param lnbHandle a one-element array to return the granted Lnb handle.\n     *                  If no Lnb granted, this will return {@link #INVALID_RESOURCE_HANDLE}.\n     *\n     * @return true if there is Lnb granted.\n     ",
    "links" : [ "#onReclaimResources()", "#setLnbInfoList(int", "android.media.tv.tunerresourcemanager.TunerLnbRequest", "#INVALID_RESOURCE_HANDLE", "Tuner" ]
  }, {
    "name" : "public void releaseFrontend(int frontendHandle, int clientId)",
    "returnType" : "void",
    "comment" : "\n     * Notifies the TRM that the given frontend has been released.\n     *\n     * <p>Client must call this whenever it releases a Tuner frontend.\n     *\n     * <p><strong>Note:</strong> {@link #setFrontendInfoList(TunerFrontendInfo[])} must be called\n     * before this release.\n     *\n     * @param frontendHandle the handle of the released frontend.\n     * @param clientId the id of the client that is releasing the frontend.\n     ",
    "links" : [ "#setFrontendInfoList(TunerFrontendInfo" ]
  }, {
    "name" : "public void releaseDemux(int demuxHandle, int clientId)",
    "returnType" : "void",
    "comment" : "\n     * Notifies the TRM that the Demux with the given handle has been released.\n     *\n     * <p>Client must call this whenever it releases an Demux.\n     *\n     * @param demuxHandle the handle of the released Tuner Demux.\n     * @param clientId the id of the client that is releasing the demux.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void releaseDescrambler(int descramblerHandle, int clientId)",
    "returnType" : "void",
    "comment" : "\n     * Notifies the TRM that the Descrambler with the given handle has been released.\n     *\n     * <p>Client must call this whenever it releases an Descrambler.\n     *\n     * @param descramblerHandle the handle of the released Tuner Descrambler.\n     * @param clientId the id of the client that is releasing the descrambler.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void releaseCasSession(int casSessionHandle, int clientId)",
    "returnType" : "void",
    "comment" : "\n     * Notifies the TRM that the given Cas session has been released.\n     *\n     * <p>Client must call this whenever it releases a Cas session.\n     *\n     * <p><strong>Note:</strong> {@link #updateCasInfo(int, int)} must be called before this\n     * release.\n     *\n     * @param casSessionHandle the handle of the released CAS session.\n     * @param clientId the id of the client that is releasing the cas session.\n     ",
    "links" : [ "#updateCasInfo(int" ]
  }, {
    "name" : "public void releaseLnb(int lnbHandle, int clientId)",
    "returnType" : "void",
    "comment" : "\n     * Notifies the TRM that the Lnb with the given id has been released.\n     *\n     * <p>Client must call this whenever it releases an Lnb.\n     *\n     * <p><strong>Note:</strong> {@link #setLnbInfoList(int[])} must be called before this release.\n     *\n     * @param lnbHandle the handle of the released Tuner Lnb.\n     * @param clientId the id of the client that is releasing the lnb.\n     ",
    "links" : [ "#setLnbInfoList(int" ]
  }, {
    "name" : "public boolean isHigherPriority(ResourceClientProfile challengerProfile, ResourceClientProfile holderProfile)",
    "returnType" : "boolean",
    "comment" : "\n     * Compare two clients' priority.\n     *\n     * @param challengerProfile the {@link ResourceClientProfile} of the challenger.\n     * @param holderProfile the {@link ResourceClientProfile} of the holder of the resource.\n     *\n     * @return true if the challenger has higher priority than the holder.\n     ",
    "links" : [ "android.media.tv.tunerresourcemanager.ResourceClientProfile" ]
  } ],
  "variableNames" : [ "TAG", "DEBUG", "INVALID_RESOURCE_HANDLE", "INVALID_OWNER_ID", "TUNER_RESOURCE_TYPE_FRONTEND", "TUNER_RESOURCE_TYPE_DEMUX", "TUNER_RESOURCE_TYPE_DESCRAMBLER", "TUNER_RESOURCE_TYPE_LNB", "TUNER_RESOURCE_TYPE_CAS_SESSION", "TUNER_RESOURCE_TYPE_MAX", "mService", "mUserId" ],
  "methodNames" : [ "public void registerClientProfile(@NonNull ResourceClientProfile profile, @NonNull @CallbackExecutor Executor executor, @NonNull ResourcesReclaimListener listener, @NonNull int[] clientId)", "public void unregisterClientProfile(int clientId)", "public boolean updateClientPriority(int clientId, int priority, int niceValue)", "public void setFrontendInfoList(@NonNull TunerFrontendInfo[] infos)", "public void updateCasInfo(int casSystemId, int maxSessionNum)", "public void setLnbInfoList(int[] lnbIds)", "public boolean requestFrontend(@NonNull TunerFrontendRequest request, @Nullable int[] frontendHandle)", "public void shareFrontend(int selfClientId, int targetClientId)", "public boolean requestDemux(@NonNull TunerDemuxRequest request, @NonNull int[] demuxHandle)", "public boolean requestDescrambler(@NonNull TunerDescramblerRequest request, @NonNull int[] descramblerHandle)", "public boolean requestCasSession(@NonNull CasSessionRequest request, @NonNull int[] casSessionHandle)", "public boolean requestLnb(@NonNull TunerLnbRequest request, @NonNull int[] lnbHandle)", "public void releaseFrontend(int frontendHandle, int clientId)", "public void releaseDemux(int demuxHandle, int clientId)", "public void releaseDescrambler(int descramblerHandle, int clientId)", "public void releaseCasSession(int casSessionHandle, int clientId)", "public void releaseLnb(int lnbHandle, int clientId)", "public boolean isHigherPriority(ResourceClientProfile challengerProfile, ResourceClientProfile holderProfile)" ]
}