{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/security/identity/ResultData.java",
  "packageName" : "android.security.identity",
  "className" : "ResultData",
  "comment" : "\n * An object that contains the result of retrieving data from a credential. This is used to return\n * data requested from a {@link IdentityCredential}.\n *\n * @deprecated Use {@link PresentationSession} instead.\n ",
  "links" : [ "android.security.identity.PresentationSession", "android.security.identity.IdentityCredential" ],
  "variables" : [ {
    "name" : "STATUS_OK",
    "type" : "int",
    "comment" : " Value was successfully retrieved. ",
    "links" : [ ]
  }, {
    "name" : "STATUS_NO_SUCH_ENTRY",
    "type" : "int",
    "comment" : " The entry does not exist. ",
    "links" : [ ]
  }, {
    "name" : "STATUS_NOT_REQUESTED",
    "type" : "int",
    "comment" : " The entry was not requested. ",
    "links" : [ ]
  }, {
    "name" : "STATUS_NOT_IN_REQUEST_MESSAGE",
    "type" : "int",
    "comment" : " The entry wasn't in the request message. ",
    "links" : [ ]
  }, {
    "name" : "STATUS_USER_AUTHENTICATION_FAILED",
    "type" : "int",
    "comment" : " The entry was not retrieved because user authentication failed. ",
    "links" : [ ]
  }, {
    "name" : "STATUS_READER_AUTHENTICATION_FAILED",
    "type" : "int",
    "comment" : " The entry was not retrieved because reader authentication failed. ",
    "links" : [ ]
  }, {
    "name" : "STATUS_NO_ACCESS_CONTROL_PROFILES",
    "type" : "int",
    "comment" : "\n     * The entry was not retrieved because it was configured without any access\n     * control profile.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public abstract byte[] getAuthenticatedData()",
    "returnType" : "byte[]",
    "comment" : "\n     * Returns a CBOR structure containing the retrieved data.\n     *\n     * <p>This structure - along with the session transcript - may be cryptographically\n     * authenticated to prove to the reader that the data is from a trusted credential and\n     * {@link #getMessageAuthenticationCode()} can be used to get a MAC.\n     *\n     * <p>The CBOR structure which is cryptographically authenticated is the\n     * {@code DeviceAuthenticationBytes} structure according to the following\n     * <a href=\"https://tools.ietf.org/html/rfc8610\">CDDL</a> schema:\n     *\n     * <pre>\n     *   DeviceAuthentication = [\n     *     \"DeviceAuthentication\",\n     *     SessionTranscript,\n     *     DocType,\n     *     DeviceNameSpacesBytes\n     *   ]\n     *\n     *   DocType = tstr\n     *   SessionTranscript = any\n     *   DeviceNameSpacesBytes = #6.24(bstr .cbor DeviceNameSpaces)\n     *   DeviceAuthenticationBytes = #6.24(bstr .cbor DeviceAuthentication)\n     * </pre>\n     *\n     * <p>where\n     *\n     * <pre>\n     *   DeviceNameSpaces = {\n     *     * NameSpace => DeviceSignedItems\n     *   }\n     *\n     *   DeviceSignedItems = {\n     *     + DataItemName => DataItemValue\n     *   }\n     *\n     *   NameSpace = tstr\n     *   DataItemName = tstr\n     *   DataItemValue = any\n     * </pre>\n     *\n     * <p>The returned data is the binary encoding of the {@code DeviceNameSpaces} structure\n     * as defined above.\n     *\n     * @return The bytes of the {@code DeviceNameSpaces} CBOR structure.\n     ",
    "links" : [ "#getMessageAuthenticationCode()" ]
  }, {
    "name" : "public abstract byte[] getMessageAuthenticationCode()",
    "returnType" : "byte[]",
    "comment" : "\n     * Returns a message authentication code over the {@code DeviceAuthenticationBytes} CBOR\n     * specified in {@link #getAuthenticatedData()}, to prove to the reader that the data\n     * is from a trusted credential.\n     *\n     * <p>The MAC proves to the reader that the data is from a trusted credential. This code is\n     * produced by using the key agreement and key derivation function from the ciphersuite\n     * with the authentication private key and the reader ephemeral public key to compute a\n     * shared message authentication code (MAC) key, then using the MAC function from the\n     * ciphersuite to compute a MAC of the authenticated data. See section 9.2.3.5 of\n     * ISO/IEC 18013-5 for details of this operation.\n     *\n     * <p>If the {@code sessionTranscript} parameter passed to\n     * {@link IdentityCredential#getEntries(byte[], Map, byte[], byte[])} was {@code null}\n     * or the reader ephmeral public key was never set using\n     * {@link IdentityCredential#setReaderEphemeralPublicKey(PublicKey)}, no message\n     * authencation code will be produced and this method will return {@code null}.\n     *\n     * @return A COSE_Mac0 structure with the message authentication code as described above\n     *         or {@code null} if the conditions specified above are not met.\n     ",
    "links" : [ "android.security.identity.IdentityCredential#getEntries(byte", "android.security.identity.IdentityCredential#setReaderEphemeralPublicKey(PublicKey)", "#getAuthenticatedData()" ]
  }, {
    "name" : " byte[] getSignature()",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract byte[] getStaticAuthenticationData()",
    "returnType" : "byte[]",
    "comment" : "\n     * Returns the static authentication data associated with the dynamic authentication\n     * key used to sign or MAC the data returned by {@link #getAuthenticatedData()}.\n     *\n     * @return The static authentication data associated with dynamic authentication key used to\n     * MAC the data.\n     ",
    "links" : [ "#getAuthenticatedData()" ]
  }, {
    "name" : "public abstract Collection<String> getNamespaces()",
    "returnType" : "Collection<String>",
    "comment" : "\n     * Gets the names of namespaces with retrieved entries.\n     *\n     * @return collection of name of namespaces containing retrieved entries. May be empty if no\n     *     data was retrieved.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Collection<String> getEntryNames(@NonNull String namespaceName)",
    "returnType" : "Collection<String>",
    "comment" : "\n     * Get the names of all entries.\n     *\n     * <p>This includes the name of entries that wasn't successfully retrieved.\n     *\n     * @param namespaceName the namespace name to get entries for.\n     * @return A collection of names or {@code null} if there are no entries for the given\n     *     namespace.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Collection<String> getRetrievedEntryNames(@NonNull String namespaceName)",
    "returnType" : "Collection<String>",
    "comment" : "\n     * Get the names of all entries that was successfully retrieved.\n     *\n     * <p>This only return entries for which {@link #getStatus(String, String)} will return\n     * {@link #STATUS_OK}.\n     *\n     * @param namespaceName the namespace name to get entries for.\n     * @return A collection of names or {@code null} if there are no entries for the given\n     *     namespace.\n     ",
    "links" : [ "#getStatus(String", "#STATUS_OK" ]
  }, {
    "name" : "public abstract int getStatus(@NonNull String namespaceName, @NonNull String name)",
    "returnType" : "int",
    "comment" : "\n     * Gets the status of an entry.\n     *\n     * <p>This returns {@link #STATUS_OK} if the value was retrieved, {@link #STATUS_NO_SUCH_ENTRY}\n     * if the given entry wasn't retrieved, {@link #STATUS_NOT_REQUESTED} if it wasn't requested,\n     * {@link #STATUS_NOT_IN_REQUEST_MESSAGE} if the request message was set but the entry wasn't\n     * present in the request message, {@link #STATUS_USER_AUTHENTICATION_FAILED} if the value\n     * wasn't retrieved because the necessary user authentication wasn't performed,\n     * {@link #STATUS_READER_AUTHENTICATION_FAILED} if the supplied reader certificate chain didn't\n     * match the set of certificates the entry was provisioned with, or\n     * {@link #STATUS_NO_ACCESS_CONTROL_PROFILES} if the entry was configured without any access\n     * control profiles.\n     *\n     * @param namespaceName the namespace name of the entry.\n     * @param name the name of the entry to get the value for.\n     * @return the status indicating whether the value was retrieved and if not, why.\n     ",
    "links" : [ "#STATUS_NOT_IN_REQUEST_MESSAGE", "#STATUS_NO_ACCESS_CONTROL_PROFILES", "#STATUS_NOT_REQUESTED", "#STATUS_OK", "#STATUS_USER_AUTHENTICATION_FAILED", "#STATUS_NO_SUCH_ENTRY", "#STATUS_READER_AUTHENTICATION_FAILED" ]
  }, {
    "name" : "public abstract byte[] getEntry(@NonNull String namespaceName, @NonNull String name)",
    "returnType" : "byte[]",
    "comment" : "\n     * Gets the raw CBOR data for the value of an entry.\n     *\n     * <p>This should only be called on an entry for which the {@link #getStatus(String, String)}\n     * method returns {@link #STATUS_OK}.\n     *\n     * @param namespaceName the namespace name of the entry.\n     * @param name the name of the entry to get the value for.\n     * @return the raw CBOR data or {@code null} if no entry with the given name exists.\n     ",
    "links" : [ "#getStatus(String", "#STATUS_OK" ]
  } ],
  "methodNames" : [ "public abstract byte[] getAuthenticatedData()", "public abstract byte[] getMessageAuthenticationCode()", " byte[] getSignature()", "public abstract byte[] getStaticAuthenticationData()", "public abstract Collection<String> getNamespaces()", "public abstract Collection<String> getEntryNames(@NonNull String namespaceName)", "public abstract Collection<String> getRetrievedEntryNames(@NonNull String namespaceName)", "public abstract int getStatus(@NonNull String namespaceName, @NonNull String name)", "public abstract byte[] getEntry(@NonNull String namespaceName, @NonNull String name)" ],
  "variableNames" : [ "STATUS_OK", "STATUS_NO_SUCH_ENTRY", "STATUS_NOT_REQUESTED", "STATUS_NOT_IN_REQUEST_MESSAGE", "STATUS_USER_AUTHENTICATION_FAILED", "STATUS_READER_AUTHENTICATION_FAILED", "STATUS_NO_ACCESS_CONTROL_PROFILES" ]
}