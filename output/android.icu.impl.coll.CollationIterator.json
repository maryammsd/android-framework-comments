{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/coll/CollationIterator.java",
  "packageName" : "android.icu.impl.coll",
  "className" : "CollationIterator",
  "comment" : "\n * Collation element iterator and abstract character iterator.\n *\n * When a method returns a code point value, it must be in 0..10FFFF,\n * except it can be negative as a sentinel value.\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "NO_CP_AND_CE32",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "trie",
    "type" : "Trie2_32",
    "comment" : " Main lookup trie of the data object.",
    "links" : [ ]
  }, {
    "name" : "data",
    "type" : "CollationData",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ceBuffer",
    "type" : "CEBuffer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "cesIndex",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "skipped",
    "type" : "SkippedState",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "numCpFwd",
    "type" : "int",
    "comment" : " Used as a forward iteration limit in previousCEUnsafe().",
    "links" : [ ]
  }, {
    "name" : "isNumeric",
    "type" : "boolean",
    "comment" : " Numeric collation (CollationSettings.NUMERIC).",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean equals(Object other)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void resetToOffset(int newOffset)",
    "returnType" : "void",
    "comment" : "\n     * Resets the iterator state and sets the position to the specified offset.\n     * Subclasses must implement, and must call the parent class method,\n     * or CollationIterator.reset().\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getOffset()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final long nextCE()",
    "returnType" : "long",
    "comment" : "\n     * Returns the next collation element.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int fetchCEs()",
    "returnType" : "int",
    "comment" : "\n     * Fetches all CEs.\n     * @return getCEsLength()\n     ",
    "links" : [ ]
  }, {
    "name" : " final void setCurrentCE(long ce)",
    "returnType" : "void",
    "comment" : "\n     * Overwrites the current CE (the last one returned by nextCE()).\n     ",
    "links" : [ ]
  }, {
    "name" : "public final long previousCE(UVector32 offsets)",
    "returnType" : "long",
    "comment" : "\n     * Returns the previous collation element.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int getCEsLength()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final long getCE(int i)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final long[] getCEs()",
    "returnType" : "long[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final void clearCEs()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final void clearCEsIfNoneRemaining()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract int nextCodePoint()",
    "returnType" : "int",
    "comment" : "\n     * Returns the next code point (with post-increment).\n     * Public for identical-level comparison and for testing.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int previousCodePoint()",
    "returnType" : "int",
    "comment" : "\n     * Returns the previous code point (with pre-decrement).\n     * Public for identical-level comparison and for testing.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected final void reset()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected final void reset(boolean numeric)",
    "returnType" : "void",
    "comment" : "\n     * Resets the state as well as the numeric setting,\n     * and completes the initialization.\n     * Only exists in Java where we reset cached CollationIterator instances\n     * rather than stack-allocating temporary ones.\n     * (See also the constructor comments.)\n     ",
    "links" : [ ]
  }, {
    "name" : "protected long handleNextCE32()",
    "returnType" : "long",
    "comment" : "\n     * Returns the next code point and its local CE32 value.\n     * Returns Collation.FALLBACK_CE32 at the end of the text (c<0)\n     * or when c's CE32 value is to be looked up in the base data (fallback).\n     *\n     * The code point is used for fallbacks, context and implicit weights.\n     * It is ignored when the returned CE32 is not special (e.g., FFFD_CE32).\n     *\n     * Returns the code point in bits 63..32 (signed) and the CE32 in bits 31..0.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected long makeCodePointAndCE32Pair(int c, int ce32)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected char handleGetTrailSurrogate()",
    "returnType" : "char",
    "comment" : "\n     * Called when handleNextCE32() returns a LEAD_SURROGATE_TAG for a lead surrogate code unit.\n     * Returns the trail surrogate in that case and advances past it,\n     * if a trail surrogate follows the lead surrogate.\n     * Otherwise returns any other code unit and does not advance.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected boolean forbidSurrogateCodePoints()",
    "returnType" : "boolean",
    "comment" : "\n     * @return false if surrogate code points U+D800..U+DFFF\n     *         map to their own implicit primary weights (for UTF-16),\n     *         or true if they map to CE(U+FFFD) (for UTF-8)\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract void forwardNumCodePoints(int num)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected abstract void backwardNumCodePoints(int num)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected int getDataCE32(int c)",
    "returnType" : "int",
    "comment" : "\n     * Returns the CE32 from the data trie.\n     * Normally the same as data.getCE32(), but overridden in the builder.\n     * Call this only when the faster data.getCE32() cannot be used.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected int getCE32FromBuilderData(int ce32)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected final void appendCEsFromCE32(CollationData d, int c, int ce32, boolean forward)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static final boolean isSurrogate(int c)",
    "returnType" : "boolean",
    "comment" : " TODO: Propose widening the UTF16 method.",
    "links" : [ ]
  }, {
    "name" : "protected static final boolean isLeadSurrogate(int c)",
    "returnType" : "boolean",
    "comment" : " TODO: Propose widening the UTF16 method.",
    "links" : [ ]
  }, {
    "name" : "protected static final boolean isTrailSurrogate(int c)",
    "returnType" : "boolean",
    "comment" : " TODO: Propose widening the UTF16 method.",
    "links" : [ ]
  }, {
    "name" : "private final long nextCEFromCE32(CollationData d, int c, int ce32)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final int getCE32FromPrefix(CollationData d, int ce32)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final int nextSkippedCodePoint()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final void backwardNumSkipped(int n)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final int nextCE32FromContraction(CollationData d, int contractionCE32, CharSequence trieChars, int trieOffset, int ce32, int c)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final int nextCE32FromDiscontiguousContraction(CollationData d, CharsTrie suffixes, int ce32, int lookAhead, int c)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final long previousCEUnsafe(int c, UVector32 offsets)",
    "returnType" : "long",
    "comment" : "\n     * Returns the previous CE when data.isUnsafeBackward(c, isNumeric).\n     ",
    "links" : [ ]
  }, {
    "name" : "private final void appendNumericCEs(int ce32, boolean forward)",
    "returnType" : "void",
    "comment" : "\n     * Turns a string of digits (bytes 0..9)\n     * into a sequence of CEs that will sort in numeric order.\n     *\n     * Starts from this ce32's digit value and consumes the following/preceding digits.\n     * The digits string must not be empty and must not have leading zeros.\n     ",
    "links" : [ ]
  }, {
    "name" : "private final void appendNumericSegmentCEs(CharSequence digits)",
    "returnType" : "void",
    "comment" : "\n     * Turns 1..254 digits into a sequence of CEs.\n     * Called by appendNumericCEs() for each segment of at most 254 digits.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public boolean equals(Object other)", "public int hashCode()", "public abstract void resetToOffset(int newOffset)", "public abstract int getOffset()", "public final long nextCE()", "public final int fetchCEs()", " final void setCurrentCE(long ce)", "public final long previousCE(UVector32 offsets)", "public final int getCEsLength()", "public final long getCE(int i)", "public final long[] getCEs()", " final void clearCEs()", "public final void clearCEsIfNoneRemaining()", "public abstract int nextCodePoint()", "public abstract int previousCodePoint()", "protected final void reset()", "protected final void reset(boolean numeric)", "protected long handleNextCE32()", "protected long makeCodePointAndCE32Pair(int c, int ce32)", "protected char handleGetTrailSurrogate()", "protected boolean forbidSurrogateCodePoints()", "protected abstract void forwardNumCodePoints(int num)", "protected abstract void backwardNumCodePoints(int num)", "protected int getDataCE32(int c)", "protected int getCE32FromBuilderData(int ce32)", "protected final void appendCEsFromCE32(CollationData d, int c, int ce32, boolean forward)", "private static final boolean isSurrogate(int c)", "protected static final boolean isLeadSurrogate(int c)", "protected static final boolean isTrailSurrogate(int c)", "private final long nextCEFromCE32(CollationData d, int c, int ce32)", "private final int getCE32FromPrefix(CollationData d, int ce32)", "private final int nextSkippedCodePoint()", "private final void backwardNumSkipped(int n)", "private final int nextCE32FromContraction(CollationData d, int contractionCE32, CharSequence trieChars, int trieOffset, int ce32, int c)", "private final int nextCE32FromDiscontiguousContraction(CollationData d, CharsTrie suffixes, int ce32, int lookAhead, int c)", "private final long previousCEUnsafe(int c, UVector32 offsets)", "private final void appendNumericCEs(int ce32, boolean forward)", "private final void appendNumericSegmentCEs(CharSequence digits)" ],
  "variableNames" : [ "NO_CP_AND_CE32", "trie", "data", "ceBuffer", "cesIndex", "skipped", "numCpFwd", "isNumeric" ]
}