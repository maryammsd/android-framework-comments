{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/MediaCodecInfo.java",
  "packageName" : "android.media",
  "className" : "VideoCapabilities",
  "comment" : "\n     * A class that supports querying the video capabilities of a codec.\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mParent",
    "type" : "CodecCapabilities",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBitrateRange",
    "type" : "Range<Integer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHeightRange",
    "type" : "Range<Integer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWidthRange",
    "type" : "Range<Integer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBlockCountRange",
    "type" : "Range<Integer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHorizontalBlockRange",
    "type" : "Range<Integer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVerticalBlockRange",
    "type" : "Range<Integer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAspectRatioRange",
    "type" : "Range<Rational>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBlockAspectRatioRange",
    "type" : "Range<Rational>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBlocksPerSecondRange",
    "type" : "Range<Long>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMeasuredFrameRates",
    "type" : "Map<Size, Range<Long>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPerformancePoints",
    "type" : "List<PerformancePoint>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFrameRateRange",
    "type" : "Range<Integer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBlockWidth",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBlockHeight",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWidthAlignment",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHeightAlignment",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSmallerDimensionUpperLimit",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAllowMbOverride",
    "type" : "boolean",
    "comment" : " allow XML to override calculated limits",
    "links" : [ ]
  }, {
    "name" : "VIDEO_LEVEL_CRITICAL_FORMAT_KEYS",
    "type" : "Set<String>",
    "comment" : " must not contain KEY_PROFILE",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Range<Integer> getBitrateRange()",
    "returnType" : "Range<Integer>",
    "comment" : "\n         * Returns the range of supported bitrates in bits/second.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Range<Integer> getSupportedWidths()",
    "returnType" : "Range<Integer>",
    "comment" : "\n         * Returns the range of supported video widths.\n         * <p class=note>\n         * 32-bit processes will not support resolutions larger than 4096x4096 due to\n         * the limited address space.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Range<Integer> getSupportedHeights()",
    "returnType" : "Range<Integer>",
    "comment" : "\n         * Returns the range of supported video heights.\n         * <p class=note>\n         * 32-bit processes will not support resolutions larger than 4096x4096 due to\n         * the limited address space.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getWidthAlignment()",
    "returnType" : "int",
    "comment" : "\n         * Returns the alignment requirement for video width (in pixels).\n         *\n         * This is a power-of-2 value that video width must be a\n         * multiple of.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getHeightAlignment()",
    "returnType" : "int",
    "comment" : "\n         * Returns the alignment requirement for video height (in pixels).\n         *\n         * This is a power-of-2 value that video height must be a\n         * multiple of.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getSmallerDimensionUpperLimit()",
    "returnType" : "int",
    "comment" : "\n         * Return the upper limit on the smaller dimension of width or height.\n         * <p></p>\n         * Some codecs have a limit on the smaller dimension, whether it be\n         * the width or the height.  E.g. a codec may only be able to handle\n         * up to 1920x1080 both in landscape and portrait mode (1080x1920).\n         * In this case the maximum width and height are both 1920, but the\n         * smaller dimension limit will be 1080. For other codecs, this is\n         * {@code Math.min(getSupportedWidths().getUpper(),\n         * getSupportedHeights().getUpper())}.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Range<Integer> getSupportedFrameRates()",
    "returnType" : "Range<Integer>",
    "comment" : "\n         * Returns the range of supported frame rates.\n         * <p>\n         * This is not a performance indicator.  Rather, it expresses the\n         * limits specified in the coding standard, based on the complexities\n         * of encoding material for later playback at a certain frame rate,\n         * or the decoding of such material in non-realtime.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Range<Integer> getSupportedWidthsFor(int height)",
    "returnType" : "Range<Integer>",
    "comment" : "\n         * Returns the range of supported video widths for a video height.\n         * @param height the height of the video\n         ",
    "links" : [ ]
  }, {
    "name" : "public Range<Integer> getSupportedHeightsFor(int width)",
    "returnType" : "Range<Integer>",
    "comment" : "\n         * Returns the range of supported video heights for a video width\n         * @param width the width of the video\n         ",
    "links" : [ ]
  }, {
    "name" : "public Range<Double> getSupportedFrameRatesFor(int width, int height)",
    "returnType" : "Range<Double>",
    "comment" : "\n         * Returns the range of supported video frame rates for a video size.\n         * <p>\n         * This is not a performance indicator.  Rather, it expresses the limits specified in\n         * the coding standard, based on the complexities of encoding material of a given\n         * size for later playback at a certain frame rate, or the decoding of such material\n         * in non-realtime.\n\n         * @param width the width of the video\n         * @param height the height of the video\n         ",
    "links" : [ ]
  }, {
    "name" : "private int getBlockCount(int width, int height)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Size findClosestSize(int width, int height)",
    "returnType" : "Size",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Range<Double> estimateFrameRatesFor(int width, int height)",
    "returnType" : "Range<Double>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Range<Double> getAchievableFrameRatesFor(int width, int height)",
    "returnType" : "Range<Double>",
    "comment" : "\n         * Returns the range of achievable video frame rates for a video size.\n         * May return {@code null}, if the codec did not publish any measurement\n         * data.\n         * <p>\n         * This is a performance estimate provided by the device manufacturer based on statistical\n         * sampling of full-speed decoding and encoding measurements in various configurations\n         * of common video sizes supported by the codec. As such it should only be used to\n         * compare individual codecs on the device. The value is not suitable for comparing\n         * different devices or even different android releases for the same device.\n         * <p>\n         * <em>On {@link android.os.Build.VERSION_CODES#M} release</em> the returned range\n         * corresponds to the fastest frame rates achieved in the tested configurations. As\n         * such, it should not be used to gauge guaranteed or even average codec performance\n         * on the device.\n         * <p>\n         * <em>On {@link android.os.Build.VERSION_CODES#N} release</em> the returned range\n         * corresponds closer to sustained performance <em>in tested configurations</em>.\n         * One can expect to achieve sustained performance higher than the lower limit more than\n         * 50% of the time, and higher than half of the lower limit at least 90% of the time\n         * <em>in tested configurations</em>.\n         * Conversely, one can expect performance lower than twice the upper limit at least\n         * 90% of the time.\n         * <p class=note>\n         * Tested configurations use a single active codec. For use cases where multiple\n         * codecs are active, applications can expect lower and in most cases significantly lower\n         * performance.\n         * <p class=note>\n         * The returned range value is interpolated from the nearest frame size(s) tested.\n         * Codec performance is severely impacted by other activity on the device as well\n         * as environmental factors (such as battery level, temperature or power source), and can\n         * vary significantly even in a steady environment.\n         * <p class=note>\n         * Use this method in cases where only codec performance matters, e.g. to evaluate if\n         * a codec has any chance of meeting a performance target. Codecs are listed\n         * in {@link MediaCodecList} in the preferred order as defined by the device\n         * manufacturer. As such, applications should use the first suitable codec in the\n         * list to achieve the best balance between power use and performance.\n         *\n         * @param width the width of the video\n         * @param height the height of the video\n         *\n         * @throws IllegalArgumentException if the video size is not supported.\n         ",
    "links" : [ "android.media.MediaCodecList", "android.os.Build.VERSION_CODES#N", "android.os.Build.VERSION_CODES#M" ]
  }, {
    "name" : "public List<PerformancePoint> getSupportedPerformancePoints()",
    "returnType" : "List<PerformancePoint>",
    "comment" : "\n         * Returns the supported performance points. May return {@code null} if the codec did not\n         * publish any performance point information (e.g. the vendor codecs have not been updated\n         * to the latest android release). May return an empty list if the codec published that\n         * if does not guarantee any performance points.\n         * <p>\n         * This is a performance guarantee provided by the device manufacturer for hardware codecs\n         * based on hardware capabilities of the device.\n         * <p>\n         * The returned list is sorted first by decreasing number of pixels, then by decreasing\n         * width, and finally by decreasing frame rate.\n         * Performance points assume a single active codec. For use cases where multiple\n         * codecs are active, should use that highest pixel count, and add the frame rates of\n         * each individual codec.\n         * <p class=note>\n         * 32-bit processes will not support resolutions larger than 4096x4096 due to\n         * the limited address space, but performance points will be presented as is.\n         * In other words, even though a component publishes a performance point for\n         * a resolution higher than 4096x4096, it does not mean that the resolution is supported\n         * for 32-bit processes.\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean areSizeAndRateSupported(int width, int height, double frameRate)",
    "returnType" : "boolean",
    "comment" : "\n         * Returns whether a given video size ({@code width} and\n         * {@code height}) and {@code frameRate} combination is supported.\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSizeSupported(int width, int height)",
    "returnType" : "boolean",
    "comment" : "\n         * Returns whether a given video size ({@code width} and\n         * {@code height}) is supported.\n         ",
    "links" : [ ]
  }, {
    "name" : "private boolean supports(Integer width, Integer height, Number rate)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean supportsFormat(MediaFormat format)",
    "returnType" : "boolean",
    "comment" : "\n         * @hide\n         * @throws java.lang.ClassCastException ",
    "links" : [ ]
  }, {
    "name" : "public static VideoCapabilities create(MediaFormat info, CodecCapabilities parent)",
    "returnType" : "VideoCapabilities",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private void init(MediaFormat info, CodecCapabilities parent)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Size getBlockSize()",
    "returnType" : "Size",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public Range<Integer> getBlockCountRange()",
    "returnType" : "Range<Integer>",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public Range<Long> getBlocksPerSecondRange()",
    "returnType" : "Range<Long>",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public Range<Rational> getAspectRatioRange(boolean blocks)",
    "returnType" : "Range<Rational>",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private void initWithPlatformLimits()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private List<PerformancePoint> getPerformancePoints(Map<String, Object> map)",
    "returnType" : "List<PerformancePoint>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Map<Size, Range<Long>> getMeasuredFrameRates(Map<String, Object> map)",
    "returnType" : "Map<Size, Range<Long>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Pair<Range<Integer>, Range<Integer>> parseWidthHeightRanges(Object o)",
    "returnType" : "Pair<Range<Integer>, Range<Integer>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static int equivalentVP9Level(MediaFormat info)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private void parseFromInfo(MediaFormat info)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void applyBlockLimits(int blockWidth, int blockHeight, Range<Integer> counts, Range<Long> rates, Range<Rational> ratios)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void applyAlignment(int widthAlignment, int heightAlignment)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateLimits()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void applyMacroBlockLimits(int maxHorizontalBlocks, int maxVerticalBlocks, int maxBlocks, long maxBlocksPerSecond, int blockWidth, int blockHeight, int widthAlignment, int heightAlignment)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void applyMacroBlockLimits(int minHorizontalBlocks, int minVerticalBlocks, int maxHorizontalBlocks, int maxVerticalBlocks, int maxBlocks, long maxBlocksPerSecond, int blockWidth, int blockHeight, int widthAlignment, int heightAlignment)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void applyLevelLimits()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Range<Integer> getBitrateRange()", "public Range<Integer> getSupportedWidths()", "public Range<Integer> getSupportedHeights()", "public int getWidthAlignment()", "public int getHeightAlignment()", "public int getSmallerDimensionUpperLimit()", "public Range<Integer> getSupportedFrameRates()", "public Range<Integer> getSupportedWidthsFor(int height)", "public Range<Integer> getSupportedHeightsFor(int width)", "public Range<Double> getSupportedFrameRatesFor(int width, int height)", "private int getBlockCount(int width, int height)", "private Size findClosestSize(int width, int height)", "private Range<Double> estimateFrameRatesFor(int width, int height)", "public Range<Double> getAchievableFrameRatesFor(int width, int height)", "public List<PerformancePoint> getSupportedPerformancePoints()", "public boolean areSizeAndRateSupported(int width, int height, double frameRate)", "public boolean isSizeSupported(int width, int height)", "private boolean supports(Integer width, Integer height, Number rate)", "public boolean supportsFormat(MediaFormat format)", "public static VideoCapabilities create(MediaFormat info, CodecCapabilities parent)", "private void init(MediaFormat info, CodecCapabilities parent)", "public Size getBlockSize()", "public Range<Integer> getBlockCountRange()", "public Range<Long> getBlocksPerSecondRange()", "public Range<Rational> getAspectRatioRange(boolean blocks)", "private void initWithPlatformLimits()", "private List<PerformancePoint> getPerformancePoints(Map<String, Object> map)", "private Map<Size, Range<Long>> getMeasuredFrameRates(Map<String, Object> map)", "private static Pair<Range<Integer>, Range<Integer>> parseWidthHeightRanges(Object o)", "public static int equivalentVP9Level(MediaFormat info)", "private void parseFromInfo(MediaFormat info)", "private void applyBlockLimits(int blockWidth, int blockHeight, Range<Integer> counts, Range<Long> rates, Range<Rational> ratios)", "private void applyAlignment(int widthAlignment, int heightAlignment)", "private void updateLimits()", "private void applyMacroBlockLimits(int maxHorizontalBlocks, int maxVerticalBlocks, int maxBlocks, long maxBlocksPerSecond, int blockWidth, int blockHeight, int widthAlignment, int heightAlignment)", "private void applyMacroBlockLimits(int minHorizontalBlocks, int minVerticalBlocks, int maxHorizontalBlocks, int maxVerticalBlocks, int maxBlocks, long maxBlocksPerSecond, int blockWidth, int blockHeight, int widthAlignment, int heightAlignment)", "private void applyLevelLimits()" ],
  "variableNames" : [ "TAG", "mParent", "mBitrateRange", "mHeightRange", "mWidthRange", "mBlockCountRange", "mHorizontalBlockRange", "mVerticalBlockRange", "mAspectRatioRange", "mBlockAspectRatioRange", "mBlocksPerSecondRange", "mMeasuredFrameRates", "mPerformancePoints", "mFrameRateRange", "mBlockWidth", "mBlockHeight", "mWidthAlignment", "mHeightAlignment", "mSmallerDimensionUpperLimit", "mAllowMbOverride", "VIDEO_LEVEL_CRITICAL_FORMAT_KEYS" ]
}