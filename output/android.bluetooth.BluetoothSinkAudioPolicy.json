{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/bluetooth/BluetoothSinkAudioPolicy.java",
  "packageName" : "android.bluetooth",
  "className" : "BluetoothSinkAudioPolicy",
  "comment" : "\n * Represents Bluetooth Audio Policies of a Handsfree (HF) device (if HFP is used) and Call Terminal\n * (CT) device (if BLE Audio is used), which describes the preferences of allowing or disallowing\n * audio based on the use cases. The HF/CT devices shall send objects of this class to send its\n * preference to the AG/CG devices.\n *\n * <p>HF/CT side applications on can use {@link BluetoothDevice#requestAudioPolicyAsSink} API to set\n * and send a {@link BluetoothSinkAudioPolicy} object containing the preference/policy values. This\n * object will be stored in the memory of HF/CT side, will be send to the AG/CG side using Android\n * Specific AT Commands and will be stored in the AG side memory and database.\n *\n * <p>HF/CT side API {@link BluetoothDevice#getRequestedAudioPolicyAsSink} can be used to retrieve\n * the stored audio policies currently.\n *\n * <p>Note that the setter APIs of this class will only set the values of the object. To actually\n * set the policies, API {@link BluetoothDevice#requestAudioPolicyAsSink} must need to be invoked\n * with the {@link BluetoothSinkAudioPolicy} object.\n *\n * <p>Note that any API related to this feature should be used after configuring the support of the\n * AG device and after checking whether the AG device supports this feature or not by invoking\n * {@link BluetoothDevice#isRequestAudioPolicyAsSinkSupported}. Only after getting a {@link\n * BluetoothStatusCodes#FEATURE_SUPPORTED} response from the API should the APIs related to this\n * feature be used.\n *\n * @hide\n ",
  "links" : [ "android.bluetooth.BluetoothDevice#requestAudioPolicyAsSink", "android.bluetooth.BluetoothStatusCodes#FEATURE_SUPPORTED", "android.bluetooth.BluetoothSinkAudioPolicy", "android.bluetooth.BluetoothDevice#getRequestedAudioPolicyAsSink", "android.bluetooth.BluetoothDevice#isRequestAudioPolicyAsSinkSupported" ],
  "variables" : [ {
    "name" : "POLICY_UNCONFIGURED",
    "type" : "int",
    "comment" : "\n     * Audio behavior not configured for the policy.\n     *\n     * <p>If a policy is set with this value, it means that the policy is not configured with a\n     * value yet and should not be used to make any decision.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "POLICY_ALLOWED",
    "type" : "int",
    "comment" : "\n     * Audio is preferred by HF device for the policy.\n     *\n     * <p>If a policy is set with this value, then the HF device will prefer the audio for the\n     * policy use case. For example, if the Call Establish audio policy is set with this value, then\n     * the HF will prefer the audio during making or picking up a call.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "POLICY_NOT_ALLOWED",
    "type" : "int",
    "comment" : "\n     * Audio is not preferred by HF device for the policy.\n     *\n     * <p>If a policy is set with this value, then the HF device will not prefer the audio for the\n     * policy use case. For example, if the Call Establish audio policy is set with this value, then\n     * the HF will not prefer the audio during making or picking up a call.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "HFP_SET_SINK_AUDIO_POLICY_ID",
    "type" : "String",
    "comment" : "\n     * The feature ID used in the HFP AT command.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mCallEstablishPolicy",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConnectingTimePolicy",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInBandRingtonePolicy",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<BluetoothSinkAudioPolicy>",
    "comment" : " {@link Parcelable.Creator} interface implementation. ",
    "links" : [ "Parcelable.Creator" ]
  } ],
  "methods" : [ {
    "name" : "public int getCallEstablishPolicy()",
    "returnType" : "int",
    "comment" : "\n     * Get Call establishment policy audio policy.\n     *\n     * <p>This policy is used to determine the audio preference when the HF device makes or answers\n     * a call. That is, if this device makes or answers a call, is the audio preferred by HF.\n     *\n     * @return the call pick up audio policy value\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getActiveDevicePolicyAfterConnection()",
    "returnType" : "int",
    "comment" : "\n     * Get during connection audio up policy.\n     *\n     * <p>This policy is used to determine the audio preference when the HF device connects with the\n     * AG device. That is, when the HF device gets connected, should the HF become active and get\n     * audio is decided by this policy. This also covers the case of during a call. If the HF\n     * connects with the AG during an ongoing call, should the call audio be routed to the HF will\n     * be decided by this policy.\n     *\n     * @return the during connection audio policy value\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getInBandRingtonePolicy()",
    "returnType" : "int",
    "comment" : "\n     * Get In band ringtone audio up policy.\n     *\n     * <p>This policy is used to determine the audio preference of the in band ringtone. That is, if\n     * there is an incoming call, should the inband ringtone audio be routed to the HF will be\n     * decided by this policy.\n     *\n     * @return the in band ringtone audio policy value\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel out, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(@Nullable Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Returns a hash representation of this BluetoothCodecConfig based on all the config values.\n     *\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int getCallEstablishPolicy()", "public int getActiveDevicePolicyAfterConnection()", "public int getInBandRingtonePolicy()", "public String toString()", "public void writeToParcel(@NonNull Parcel out, int flags)", "public int describeContents()", "public boolean equals(@Nullable Object o)", "public int hashCode()" ],
  "variableNames" : [ "POLICY_UNCONFIGURED", "POLICY_ALLOWED", "POLICY_NOT_ALLOWED", "HFP_SET_SINK_AUDIO_POLICY_ID", "mCallEstablishPolicy", "mConnectingTimePolicy", "mInBandRingtonePolicy", "CREATOR" ]
}