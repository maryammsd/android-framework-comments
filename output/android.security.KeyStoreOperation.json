{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/security/KeyStoreOperation.java",
  "packageName" : "android.security",
  "className" : "KeyStoreOperation",
  "comment" : "\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOperation",
    "type" : "IKeystoreOperation",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mChallenge",
    "type" : "Long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mParameters",
    "type" : "KeyParameter[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Long getChallenge()",
    "returnType" : "Long",
    "comment" : "\n     * Gets the challenge associated with this operation.\n     * @return null if the operation does not required authorization. A 64bit operation\n     *         challenge otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public KeyParameter[] getParameters()",
    "returnType" : "KeyParameter[]",
    "comment" : "\n     * Gets the parameters associated with this operation.\n     * @return\n     ",
    "links" : [ ]
  }, {
    "name" : "private R handleExceptions(@NonNull CheckedRemoteRequest<R> request) throws KeyStoreException",
    "returnType" : "R",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void updateAad(@NonNull byte[] input) throws KeyStoreException",
    "returnType" : "void",
    "comment" : "\n     * Updates the Keystore operation represented by this object with more associated data.\n     * @see IKeystoreOperation#updateAad(byte[]) for more details.\n     * @param input\n     * @throws KeyStoreException\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] update(@NonNull byte[] input) throws KeyStoreException",
    "returnType" : "byte[]",
    "comment" : "\n     * Updates the Keystore operation represented by this object.\n     * @see IKeystoreOperation#update(byte[]) for more details.\n     * @param input\n     * @return\n     * @throws KeyStoreException\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] finish(byte[] input, byte[] signature) throws KeyStoreException",
    "returnType" : "byte[]",
    "comment" : "\n     * Finalizes the Keystore operation represented by this object.\n     * @see IKeystoreOperation#finish(byte[], byte[]) for more details.\n     * @param input\n     * @param signature\n     * @return\n     * @throws KeyStoreException\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void abort() throws KeyStoreException",
    "returnType" : "void",
    "comment" : "\n     * Aborts the Keystore operation represented by this object.\n     * @see IKeystoreOperation#abort() for more details.\n     * @throws KeyStoreException\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Long getChallenge()", "public KeyParameter[] getParameters()", "private R handleExceptions(@NonNull CheckedRemoteRequest<R> request) throws KeyStoreException", "public void updateAad(@NonNull byte[] input) throws KeyStoreException", "public byte[] update(@NonNull byte[] input) throws KeyStoreException", "public byte[] finish(byte[] input, byte[] signature) throws KeyStoreException", "public void abort() throws KeyStoreException" ],
  "variableNames" : [ "TAG", "mOperation", "mChallenge", "mParameters" ]
}