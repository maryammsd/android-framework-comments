{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/net/SocketImpl.java",
  "packageName" : "java.net",
  "className" : "SocketImpl",
  "comment" : "\n * The abstract class {@code SocketImpl} is a common superclass\n * of all classes that actually implement sockets. It is used to\n * create both client and server sockets.\n * <p>\n * A \"plain\" socket implements these methods exactly as\n * described, without attempting to go through a firewall or proxy.\n *\n * @author  unascribed\n * @since   1.0\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "socket",
    "type" : "Socket",
    "comment" : "\n     * The actual Socket object.\n     ",
    "links" : [ ]
  }, {
    "name" : "serverSocket",
    "type" : "ServerSocket",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "fd",
    "type" : "FileDescriptor",
    "comment" : "\n     * The file descriptor object for this socket.\n     ",
    "links" : [ ]
  }, {
    "name" : "address",
    "type" : "InetAddress",
    "comment" : "\n     * The IP address of the remote end of this socket.\n     ",
    "links" : [ ]
  }, {
    "name" : "port",
    "type" : "int",
    "comment" : "\n     * The port number on the remote host to which this socket is connected.\n     ",
    "links" : [ ]
  }, {
    "name" : "localport",
    "type" : "int",
    "comment" : "\n     * The local port number to which this socket is connected.\n     ",
    "links" : [ ]
  }, {
    "name" : "socketOptions",
    "type" : "Set<SocketOption<?>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "serverSocketOptions",
    "type" : "Set<SocketOption<?>>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected abstract void create(boolean stream) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Creates either a stream or a datagram socket.\n     *\n     * @param      stream   if {@code true}, create a stream socket;\n     *                      otherwise, create a datagram socket.\n     * @exception  IOException  if an I/O error occurs while creating the\n     *               socket.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract void connect(String host, int port) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Connects this socket to the specified port on the named host.\n     *\n     * @param      host   the name of the remote host.\n     * @param      port   the port number.\n     * @exception  IOException  if an I/O error occurs when connecting to the\n     *               remote host.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract void connect(InetAddress address, int port) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Connects this socket to the specified port number on the specified host.\n     *\n     * @param      address   the IP address of the remote host.\n     * @param      port      the port number.\n     * @exception  IOException  if an I/O error occurs when attempting a\n     *               connection.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract void connect(SocketAddress address, int timeout) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Connects this socket to the specified port number on the specified host.\n     * A timeout of zero is interpreted as an infinite timeout. The connection\n     * will then block until established or an error occurs.\n     *\n     * @param      address   the Socket address of the remote host.\n     * @param     timeout  the timeout value, in milliseconds, or zero for no timeout.\n     * @exception  IOException  if an I/O error occurs when attempting a\n     *               connection.\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract void bind(InetAddress host, int port) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Binds this socket to the specified local IP address and port number.\n     *\n     * @param      host   an IP address that belongs to a local interface.\n     * @param      port   the port number.\n     * @exception  IOException  if an I/O error occurs when binding this socket.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract void listen(int backlog) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Sets the maximum queue length for incoming connection indications\n     * (a request to connect) to the {@code count} argument. If a\n     * connection indication arrives when the queue is full, the\n     * connection is refused.\n     *\n     * @param      backlog   the maximum length of the queue.\n     * @exception  IOException  if an I/O error occurs when creating the queue.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract void accept(SocketImpl s) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Accepts a connection.\n     *\n     * @param      s   the accepted connection.\n     * @exception  IOException  if an I/O error occurs when accepting the\n     *               connection.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract InputStream getInputStream() throws IOException",
    "returnType" : "InputStream",
    "comment" : "\n     * Returns an input stream for this socket.\n     *\n     * @return     a stream for reading from this socket.\n     * @exception  IOException  if an I/O error occurs when creating the\n     *               input stream.\n    ",
    "links" : [ ]
  }, {
    "name" : "protected abstract OutputStream getOutputStream() throws IOException",
    "returnType" : "OutputStream",
    "comment" : "\n     * Returns an output stream for this socket.\n     *\n     * @return     an output stream for writing to this socket.\n     * @exception  IOException  if an I/O error occurs when creating the\n     *               output stream.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract int available() throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of bytes that can be read from this socket\n     * without blocking.\n     *\n     * @return     the number of bytes that can be read from this socket\n     *             without blocking.\n     * @exception  IOException  if an I/O error occurs when determining the\n     *               number of bytes available.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract void close() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Closes this socket.\n     *\n     * @exception  IOException  if an I/O error occurs when closing this socket.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void shutdownInput() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Places the input stream for this socket at \"end of stream\".\n     * Any data sent to this socket is acknowledged and then\n     * silently discarded.\n     *\n     * If you read from a socket input stream after invoking this method on the\n     * socket, the stream's {@code available} method will return 0, and its\n     * {@code read} methods will return {@code -1} (end of stream).\n     *\n     * @exception IOException if an I/O error occurs when shutting down this\n     * socket.\n     * @see java.net.Socket#shutdownOutput()\n     * @see java.net.Socket#close()\n     * @see java.net.Socket#setSoLinger(boolean, int)\n     * @since 1.3\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void shutdownOutput() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Disables the output stream for this socket.\n     * For a TCP socket, any previously written data will be sent\n     * followed by TCP's normal connection termination sequence.\n     *\n     * If you write to a socket output stream after invoking\n     * shutdownOutput() on the socket, the stream will throw\n     * an IOException.\n     *\n     * @exception IOException if an I/O error occurs when shutting down this\n     * socket.\n     * @see java.net.Socket#shutdownInput()\n     * @see java.net.Socket#close()\n     * @see java.net.Socket#setSoLinger(boolean, int)\n     * @since 1.3\n     ",
    "links" : [ ]
  }, {
    "name" : "protected FileDescriptor getFileDescriptor()",
    "returnType" : "FileDescriptor",
    "comment" : "\n     * Returns the value of this socket's {@code fd} field.\n     *\n     * @return  the value of this socket's {@code fd} field.\n     * @see     java.net.SocketImpl#fd\n     ",
    "links" : [ ]
  }, {
    "name" : "public FileDescriptor getFD$()",
    "returnType" : "FileDescriptor",
    "comment" : "\n     * Gets socket's underlying {@link FileDescriptor}.\n     *\n     * @hide used by java.nio tests\n     *\n     * @return socket's underlying {@link FileDescriptor}.\n     ",
    "links" : [ "java.io.FileDescriptor" ]
  }, {
    "name" : "protected InetAddress getInetAddress()",
    "returnType" : "InetAddress",
    "comment" : "\n     * Returns the value of this socket's {@code address} field.\n     *\n     * @return  the value of this socket's {@code address} field.\n     * @see     java.net.SocketImpl#address\n     ",
    "links" : [ ]
  }, {
    "name" : "protected int getPort()",
    "returnType" : "int",
    "comment" : "\n     * Returns the value of this socket's {@code port} field.\n     *\n     * @return  the value of this socket's {@code port} field.\n     * @see     java.net.SocketImpl#port\n     ",
    "links" : [ ]
  }, {
    "name" : "protected boolean supportsUrgentData()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether or not this SocketImpl supports sending\n     * urgent data. By default, false is returned\n     * unless the method is overridden in a sub-class\n     *\n     * @return  true if urgent data supported\n     * @see     java.net.SocketImpl#address\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract void sendUrgentData(int data) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Send one byte of urgent data on the socket.\n     * The byte to be sent is the low eight bits of the parameter\n     * @param data The byte of data to send\n     * @exception IOException if there is an error\n     *  sending the data.\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "protected int getLocalPort()",
    "returnType" : "int",
    "comment" : "\n     * Returns the value of this socket's {@code localport} field.\n     *\n     * @return  the value of this socket's {@code localport} field.\n     * @see     java.net.SocketImpl#localport\n     ",
    "links" : [ ]
  }, {
    "name" : " void setSocket(Socket soc)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " Socket getSocket()",
    "returnType" : "Socket",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void setServerSocket(ServerSocket soc)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " ServerSocket getServerSocket()",
    "returnType" : "ServerSocket",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns the address and port of this socket as a {@code String}.\n     *\n     * @return  a string representation of this socket.\n     ",
    "links" : [ ]
  }, {
    "name" : " void reset() throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void setPerformancePreferences(int connectionTime, int latency, int bandwidth)",
    "returnType" : "void",
    "comment" : "\n     * Sets performance preferences for this socket.\n     *\n     * <p> Sockets use the TCP/IP protocol by default.  Some implementations\n     * may offer alternative protocols which have different performance\n     * characteristics than TCP/IP.  This method allows the application to\n     * express its own preferences as to how these tradeoffs should be made\n     * when the implementation chooses from the available protocols.\n     *\n     * <p> Performance preferences are described by three integers\n     * whose values indicate the relative importance of short connection time,\n     * low latency, and high bandwidth.  The absolute values of the integers\n     * are irrelevant; in order to choose a protocol the values are simply\n     * compared, with larger values indicating stronger preferences. Negative\n     * values represent a lower priority than positive values. If the\n     * application prefers short connection time over both low latency and high\n     * bandwidth, for example, then it could invoke this method with the values\n     * {@code (1, 0, 0)}.  If the application prefers high bandwidth above low\n     * latency, and low latency above short connection time, then it could\n     * invoke this method with the values {@code (0, 1, 2)}.\n     *\n     * By default, this method does nothing, unless it is overridden in\n     * a sub-class.\n     *\n     * @param  connectionTime\n     *         An {@code int} expressing the relative importance of a short\n     *         connection time\n     *\n     * @param  latency\n     *         An {@code int} expressing the relative importance of low\n     *         latency\n     *\n     * @param  bandwidth\n     *         An {@code int} expressing the relative importance of high\n     *         bandwidth\n     *\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void setOption(SocketOption<T> name, T value) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Called to set a socket option.\n     *\n     * @param <T> The type of the socket option value\n     * @param name The socket option\n     *\n     * @param value The value of the socket option. A value of {@code null}\n     *              may be valid for some options.\n     *\n     * @throws UnsupportedOperationException if the SocketImpl does not\n     *         support the option\n     *\n     * @throws IOException if an I/O error occurs, or if the socket is closed.\n     *\n     * @since 9\n     ",
    "links" : [ ]
  }, {
    "name" : "protected T getOption(SocketOption<T> name) throws IOException",
    "returnType" : "T",
    "comment" : "\n     * Called to get a socket option.\n     *\n     * @param <T> The type of the socket option value\n     * @param name The socket option\n     *\n     * @return the value of the named option\n     *\n     * @throws UnsupportedOperationException if the SocketImpl does not\n     *         support the option.\n     *\n     * @throws IOException if an I/O error occurs, or if the socket is closed.\n     *\n     * @since 9\n     ",
    "links" : [ ]
  }, {
    "name" : "protected Set<SocketOption<?>> supportedOptions()",
    "returnType" : "Set<SocketOption<?>>",
    "comment" : "\n     * Returns a set of SocketOptions supported by this impl\n     * and by this impl's socket (Socket or ServerSocket)\n     *\n     * @return a Set of SocketOptions\n     *\n     * @since 9\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "protected abstract void create(boolean stream) throws IOException", "protected abstract void connect(String host, int port) throws IOException", "protected abstract void connect(InetAddress address, int port) throws IOException", "protected abstract void connect(SocketAddress address, int timeout) throws IOException", "protected abstract void bind(InetAddress host, int port) throws IOException", "protected abstract void listen(int backlog) throws IOException", "protected abstract void accept(SocketImpl s) throws IOException", "protected abstract InputStream getInputStream() throws IOException", "protected abstract OutputStream getOutputStream() throws IOException", "protected abstract int available() throws IOException", "protected abstract void close() throws IOException", "protected void shutdownInput() throws IOException", "protected void shutdownOutput() throws IOException", "protected FileDescriptor getFileDescriptor()", "public FileDescriptor getFD$()", "protected InetAddress getInetAddress()", "protected int getPort()", "protected boolean supportsUrgentData()", "protected abstract void sendUrgentData(int data) throws IOException", "protected int getLocalPort()", " void setSocket(Socket soc)", " Socket getSocket()", " void setServerSocket(ServerSocket soc)", " ServerSocket getServerSocket()", "public String toString()", " void reset() throws IOException", "protected void setPerformancePreferences(int connectionTime, int latency, int bandwidth)", "protected void setOption(SocketOption<T> name, T value) throws IOException", "protected T getOption(SocketOption<T> name) throws IOException", "protected Set<SocketOption<?>> supportedOptions()" ],
  "variableNames" : [ "socket", "serverSocket", "fd", "address", "port", "localport", "socketOptions", "serverSocketOptions" ]
}