{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/text/CharsetDetector.java",
  "packageName" : "android.icu.text",
  "className" : "CharsetDetector",
  "comment" : "\n * <code>CharsetDetector</code> provides a facility for detecting the\n * charset or encoding of character data in an unknown format.\n * The input data can either be from an input stream or an array of bytes.\n * The result of the detection operation is a list of possibly matching\n * charsets, or, for simple use, you can just ask for a Java Reader that\n * will will work over the input data.\n * <p>\n * Character set detection is at best an imprecise operation.  The detection\n * process will attempt to identify the charset that best matches the characteristics\n * of the byte data, but the process is partly statistical in nature, and\n * the results can not be guaranteed to always be correct.\n * <p>\n * For best accuracy in charset detection, the input data should be primarily\n * in a single language, and a minimum of a few hundred bytes worth of plain text\n * in the language are needed.  The detection process will attempt to\n * ignore html or xml style markup that could otherwise obscure the content.\n * <p>\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "kBufSize",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "fInputBytes",
    "type" : "byte[]",
    "comment" : "\n     *  The following items are accessed by individual CharsetRecongizers during\n     *     the recognition process\n     * \n     ",
    "links" : [ ]
  }, {
    "name" : "fInputLen",
    "type" : "int",
    "comment" : " Length of the byte data in fInputBytes.",
    "links" : [ ]
  }, {
    "name" : "fByteStats",
    "type" : "short[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "fC1Bytes",
    "type" : "// True if any bytes in the range 0x80 - 0x9F are in the input;\nboolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "fDeclaredEncoding",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "fRawInput",
    "type" : "byte[]",
    "comment" : " Original, untouched input bytes.",
    "links" : [ ]
  }, {
    "name" : "fRawLength",
    "type" : "int",
    "comment" : " Length of data in fRawInput array.",
    "links" : [ ]
  }, {
    "name" : "fInputStream",
    "type" : "InputStream",
    "comment" : " User's input stream, or null if the user",
    "links" : [ ]
  }, {
    "name" : "fStripTags",
    "type" : "// If true, setText() will strip tags from input text.\nboolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "fEnabledRecognizers",
    "type" : "boolean[]",
    "comment" : " If not null, active set of charset recognizers had",
    "links" : [ ]
  }, {
    "name" : "ALL_CS_RECOGNIZERS",
    "type" : "List<CSRecognizerInfo>",
    "comment" : "\n     * List of recognizers for all charsets known to the implementation.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public CharsetDetector setDeclaredEncoding(String encoding)",
    "returnType" : "CharsetDetector",
    "comment" : "\n     * Set the declared encoding for charset detection.\n     *  The declared encoding of an input text is an encoding obtained\n     *  from an http header or xml declaration or similar source that\n     *  can be provided as additional information to the charset detector.  \n     *  A match between a declared encoding and a possible detected encoding\n     *  will raise the quality of that detected encoding by a small delta,\n     *  and will also appear as a \"reason\" for the match.\n     * <p>\n     * A declared encoding that is incompatible with the input data being\n     * analyzed will not be added to the list of possible encodings.\n     * \n     *  @param encoding The declared encoding \n     ",
    "links" : [ ]
  }, {
    "name" : "public CharsetDetector setText(byte[] in)",
    "returnType" : "CharsetDetector",
    "comment" : "\n     * Set the input text (byte) data whose charset is to be detected.\n     * \n     * @param in the input text of unknown encoding\n     * \n     * @return This CharsetDetector\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharsetDetector setText(InputStream in) throws IOException",
    "returnType" : "CharsetDetector",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CharsetMatch detect()",
    "returnType" : "CharsetMatch",
    "comment" : "\n     * Return the charset that best matches the supplied input data.\n     * \n     * Note though, that because the detection \n     * only looks at the start of the input data,\n     * there is a possibility that the returned charset will fail to handle\n     * the full set of input data.\n     * <p>\n     * Raise an exception if \n     *  <ul>\n     *    <li>no charset appears to match the data.</li>\n     *    <li>no input text has been provided</li>\n     *  </ul>\n     *\n     * @return a CharsetMatch object representing the best matching charset, or\n     *         <code>null</code> if there are no matches.\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharsetMatch[] detectAll()",
    "returnType" : "CharsetMatch[]",
    "comment" : "\n     *  Return an array of all charsets that appear to be plausible\n     *  matches with the input data.  The array is ordered with the\n     *  best quality match first.\n     * <p>\n     * Raise an exception if \n     *  <ul>\n     *    <li>no charsets appear to match the input data.</li>\n     *    <li>no input text has been provided</li>\n     *  </ul>\n     * \n     * @return An array of CharsetMatch objects representing possibly matching charsets.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Reader getReader(InputStream in, String declaredEncoding)",
    "returnType" : "Reader",
    "comment" : "\n     * Autodetect the charset of an inputStream, and return a Java Reader\n     * to access the converted input data.\n     * <p>\n     * This is a convenience method that is equivalent to\n     *   <code>this.setDeclaredEncoding(declaredEncoding).setText(in).detect().getReader();</code>\n     * <p>\n     *   For the input stream that supplies the character data, markSupported()\n     *   must be true; the  charset detection will read a small amount of data,\n     *   then return the stream to its original position via\n     *   the InputStream.reset() operation.  The exact amount that will\n     *    be read depends on the characteristics of the data itself.\n     *<p>\n     * Raise an exception if no charsets appear to match the input data.\n     * \n     * @param in The source of the byte data in the unknown charset.\n     *\n     * @param declaredEncoding  A declared encoding for the data, if available,\n     *           or null or an empty string if none is available.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getString(byte[] in, String declaredEncoding)",
    "returnType" : "String",
    "comment" : "\n     * Autodetect the charset of an inputStream, and return a String\n     * containing the converted input data.\n     * <p>\n     * This is a convenience method that is equivalent to\n     *   <code>this.setDeclaredEncoding(declaredEncoding).setText(in).detect().getString();</code>\n     *<p>\n     * Raise an exception if no charsets appear to match the input data.\n     * \n     * @param in The source of the byte data in the unknown charset.\n     *\n     * @param declaredEncoding  A declared encoding for the data, if available,\n     *           or null or an empty string if none is available.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String[] getAllDetectableCharsets()",
    "returnType" : "String[]",
    "comment" : "\n     * Get the names of all charsets supported by <code>CharsetDetector</code> class.\n     * <p>\n     * <b>Note:</b> Multiple different charset encodings in a same family may use\n     * a single shared name in this implementation. For example, this method returns\n     * an array including \"ISO-8859-1\" (ISO Latin 1), but not including \"windows-1252\"\n     * (Windows Latin 1). However, actual detection result could be \"windows-1252\"\n     * when the input data matches Latin 1 code points with any points only available\n     * in \"windows-1252\".\n     *\n     * @return an array of the names of all charsets supported by\n     * <code>CharsetDetector</code> class.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean inputFilterEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Test whether or not input filtering is enabled.\n     * \n     * @return <code>true</code> if input text will be filtered.\n     * \n     * @see #enableInputFilter\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean enableInputFilter(boolean filter)",
    "returnType" : "boolean",
    "comment" : "\n     * Enable filtering of input text. If filtering is enabled,\n     * text within angle brackets (\"&lt;\" and \"&gt;\") will be removed\n     * before detection.\n     * \n     * @param filter <code>true</code> to enable input text filtering.\n     * \n     * @return The previous setting.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void MungeInput()",
    "returnType" : "void",
    "comment" : "\n     *  MungeInput - after getting a set of raw input data to be analyzed, preprocess\n     *               it by removing what appears to be html markup.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String[] getDetectableCharsets()",
    "returnType" : "String[]",
    "comment" : "\n     * Get the names of charsets that can be recognized by this CharsetDetector instance.\n     *\n     * @return an array of the names of charsets that can be recognized by this CharsetDetector\n     * instance.\n     *\n     * @deprecated This API is ICU internal only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharsetDetector setDetectableCharset(String encoding, boolean enabled)",
    "returnType" : "CharsetDetector",
    "comment" : "\n     * Enable or disable individual charset encoding.\n     * A name of charset encoding must be included in the names returned by\n     * {@link #getAllDetectableCharsets()}.\n     *\n     * @param encoding the name of charset encoding.\n     * @param enabled <code>true</code> to enable, or <code>false</code> to disable the\n     * charset encoding.\n     * @return A reference to this <code>CharsetDetector</code>.\n     * @throws IllegalArgumentException when the name of charset encoding is\n     * not supported.\n     *\n     * @deprecated This API is ICU internal only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ "#getAllDetectableCharsets()" ]
  } ],
  "methodNames" : [ "public CharsetDetector setDeclaredEncoding(String encoding)", "public CharsetDetector setText(byte[] in)", "public CharsetDetector setText(InputStream in) throws IOException", "public CharsetMatch detect()", "public CharsetMatch[] detectAll()", "public Reader getReader(InputStream in, String declaredEncoding)", "public String getString(byte[] in, String declaredEncoding)", "public static String[] getAllDetectableCharsets()", "public boolean inputFilterEnabled()", "public boolean enableInputFilter(boolean filter)", "private void MungeInput()", "public String[] getDetectableCharsets()", "public CharsetDetector setDetectableCharset(String encoding, boolean enabled)" ],
  "variableNames" : [ "kBufSize", "fInputBytes", "fInputLen", "fByteStats", "fC1Bytes", "fDeclaredEncoding", "fRawInput", "fRawLength", "fInputStream", "fStripTags", "fEnabledRecognizers", "ALL_CS_RECOGNIZERS" ]
}