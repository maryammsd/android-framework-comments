{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xml/utils/DOMBuilder.java",
  "packageName" : "org.apache.xml.utils",
  "className" : "DOMBuilder",
  "comment" : "\n * This class takes SAX events (in addition to some extra events\n * that SAX doesn't handle yet) and adds the result to a document\n * or document fragment.\n * @xsl.usage general\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "m_doc",
    "type" : "Document",
    "comment" : " Root document          ",
    "links" : [ ]
  }, {
    "name" : "m_currentNode",
    "type" : "Node",
    "comment" : " Current node           ",
    "links" : [ ]
  }, {
    "name" : "m_root",
    "type" : "Node",
    "comment" : " The root node          ",
    "links" : [ ]
  }, {
    "name" : "m_nextSibling",
    "type" : "Node",
    "comment" : " The next sibling node  ",
    "links" : [ ]
  }, {
    "name" : "m_docFrag",
    "type" : "DocumentFragment",
    "comment" : " First node of document fragment or null if not a DocumentFragment     ",
    "links" : [ ]
  }, {
    "name" : "m_elemStack",
    "type" : "Stack",
    "comment" : " Vector of element nodes          ",
    "links" : [ ]
  }, {
    "name" : "m_prefixMappings",
    "type" : "Vector",
    "comment" : " Namespace support ",
    "links" : [ ]
  }, {
    "name" : "m_inCData",
    "type" : "boolean",
    "comment" : " Flag indicating that we are processing a CData section          ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Node getRootDocument()",
    "returnType" : "Node",
    "comment" : "\n   * Get the root document or DocumentFragment of the DOM being created.\n   *\n   * @return The root document or document fragment if not null\n   ",
    "links" : [ ]
  }, {
    "name" : "public Node getRootNode()",
    "returnType" : "Node",
    "comment" : "\n   * Get the root node of the DOM tree.\n   ",
    "links" : [ ]
  }, {
    "name" : "public Node getCurrentNode()",
    "returnType" : "Node",
    "comment" : "\n   * Get the node currently being processed.\n   *\n   * @return the current node being processed\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setNextSibling(Node nextSibling)",
    "returnType" : "void",
    "comment" : "\n   * Set the next sibling node, which is where the result nodes \n   * should be inserted before.\n   * \n   * @param nextSibling the next sibling node.\n   ",
    "links" : [ ]
  }, {
    "name" : "public Node getNextSibling()",
    "returnType" : "Node",
    "comment" : "\n   * Return the next sibling node.\n   * \n   * @return the next sibling node.\n   ",
    "links" : [ ]
  }, {
    "name" : "public java.io.Writer getWriter()",
    "returnType" : "java.io.Writer",
    "comment" : "\n   * Return null since there is no Writer for this class.\n   *\n   * @return null\n   ",
    "links" : [ ]
  }, {
    "name" : "protected void append(Node newNode) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n   * Append a node to the current container.\n   *\n   * @param newNode New node to append\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setDocumentLocator(Locator locator)",
    "returnType" : "void",
    "comment" : "\n   * Receive an object for locating the origin of SAX document events.\n   *\n   * <p>SAX parsers are strongly encouraged (though not absolutely\n   * required) to supply a locator: if it does so, it must supply\n   * the locator to the application by invoking this method before\n   * invoking any of the other methods in the ContentHandler\n   * interface.</p>\n   *\n   * <p>The locator allows the application to determine the end\n   * position of any document-related event, even if the parser is\n   * not reporting an error.  Typically, the application will\n   * use this information for reporting its own errors (such as\n   * character content that does not match an application's\n   * business rules).  The information returned by the locator\n   * is probably not sufficient for use with a search engine.</p>\n   *\n   * <p>Note that the locator will return correct information only\n   * during the invocation of the events in this interface.  The\n   * application should not attempt to use it at any other time.</p>\n   *\n   * @param locator An object that can return the location of\n   *                any SAX document event.\n   * @see org.xml.sax.Locator\n   ",
    "links" : [ ]
  }, {
    "name" : "public void startDocument() throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n   * Receive notification of the beginning of a document.\n   *\n   * <p>The SAX parser will invoke this method only once, before any\n   * other methods in this interface or in DTDHandler (except for\n   * setDocumentLocator).</p>\n   ",
    "links" : [ ]
  }, {
    "name" : "public void endDocument() throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n   * Receive notification of the end of a document.\n   *\n   * <p>The SAX parser will invoke this method only once, and it will\n   * be the last method invoked during the parse.  The parser shall\n   * not invoke this method until it has either abandoned parsing\n   * (because of an unrecoverable error) or reached the end of\n   * input.</p>\n   ",
    "links" : [ ]
  }, {
    "name" : "public void startElement(String ns, String localName, String name, Attributes atts) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n   * Receive notification of the beginning of an element.\n   *\n   * <p>The Parser will invoke this method at the beginning of every\n   * element in the XML document; there will be a corresponding\n   * endElement() event for every startElement() event (even when the\n   * element is empty). All of the element's content will be\n   * reported, in order, before the corresponding endElement()\n   * event.</p>\n   *\n   * <p>If the element name has a namespace prefix, the prefix will\n   * still be attached.  Note that the attribute list provided will\n   * contain only attributes with explicit values (specified or\n   * defaulted): #IMPLIED attributes will be omitted.</p>\n   *\n   *\n   * @param ns The namespace of the node\n   * @param localName The local part of the qualified name\n   * @param name The element name.\n   * @param atts The attributes attached to the element, if any.\n   * @see #endElement\n   * @see org.xml.sax.Attributes\n   ",
    "links" : [ ]
  }, {
    "name" : "public void endElement(String ns, String localName, String name) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n\n\n\n   * Receive notification of the end of an element.\n   *\n   * <p>The SAX parser will invoke this method at the end of every\n   * element in the XML document; there will be a corresponding\n   * startElement() event for every endElement() event (even when the\n   * element is empty).</p>\n   *\n   * <p>If the element name has a namespace prefix, the prefix will\n   * still be attached to the name.</p>\n   *\n   *\n   * @param ns the namespace of the element\n   * @param localName The local part of the qualified name of the element\n   * @param name The element name\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setIDAttribute(String id, Element elem)",
    "returnType" : "void",
    "comment" : "\n   * Set an ID string to node association in the ID table.\n   *\n   * @param id The ID string.\n   * @param elem The associated ID.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void characters(char[] ch, int start, int length) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n   * Receive notification of character data.\n   *\n   * <p>The Parser will call this method to report each chunk of\n   * character data.  SAX parsers may return all contiguous character\n   * data in a single chunk, or they may split it into several\n   * chunks; however, all of the characters in any single event\n   * must come from the same external entity, so that the Locator\n   * provides useful information.</p>\n   *\n   * <p>The application must not attempt to read from the array\n   * outside of the specified range.</p>\n   *\n   * <p>Note that some parsers will report whitespace using the\n   * ignorableWhitespace() method rather than this one (validating\n   * parsers must do so).</p>\n   *\n   * @param ch The characters from the XML document.\n   * @param start The start position in the array.\n   * @param length The number of characters to read from the array.\n   * @see #ignorableWhitespace\n   * @see org.xml.sax.Locator\n   ",
    "links" : [ ]
  }, {
    "name" : "public void charactersRaw(char[] ch, int start, int length) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n   * If available, when the disable-output-escaping attribute is used,\n   * output raw text without escaping.  A PI will be inserted in front\n   * of the node with the name \"lotusxsl-next-is-raw\" and a value of\n   * \"formatter-to-dom\".\n   *\n   * @param ch Array containing the characters\n   * @param start Index to start of characters in the array\n   * @param length Number of characters in the array\n   ",
    "links" : [ ]
  }, {
    "name" : "public void startEntity(String name) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n   * Report the beginning of an entity.\n   *\n   * The start and end of the document entity are not reported.\n   * The start and end of the external DTD subset are reported\n   * using the pseudo-name \"[dtd]\".  All other events must be\n   * properly nested within start/end entity events.\n   *\n   * @param name The name of the entity.  If it is a parameter\n   *        entity, the name will begin with '%'.\n   * @see #endEntity\n   * @see org.xml.sax.ext.DeclHandler#internalEntityDecl\n   * @see org.xml.sax.ext.DeclHandler#externalEntityDecl\n   ",
    "links" : [ ]
  }, {
    "name" : "public void endEntity(String name) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n   * Report the end of an entity.\n   *\n   * @param name The name of the entity that is ending.\n   * @see #startEntity\n   ",
    "links" : [ ]
  }, {
    "name" : "public void entityReference(String name) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n   * Receive notivication of a entityReference.\n   *\n   * @param name name of the entity reference\n   ",
    "links" : [ ]
  }, {
    "name" : "public void ignorableWhitespace(char[] ch, int start, int length) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n   * Receive notification of ignorable whitespace in element content.\n   *\n   * <p>Validating Parsers must use this method to report each chunk\n   * of ignorable whitespace (see the W3C XML 1.0 recommendation,\n   * section 2.10): non-validating parsers may also use this method\n   * if they are capable of parsing and using content models.</p>\n   *\n   * <p>SAX parsers may return all contiguous whitespace in a single\n   * chunk, or they may split it into several chunks; however, all of\n   * the characters in any single event must come from the same\n   * external entity, so that the Locator provides useful\n   * information.</p>\n   *\n   * <p>The application must not attempt to read from the array\n   * outside of the specified range.</p>\n   *\n   * @param ch The characters from the XML document.\n   * @param start The start position in the array.\n   * @param length The number of characters to read from the array.\n   * @see #characters\n   ",
    "links" : [ ]
  }, {
    "name" : "private boolean isOutsideDocElem()",
    "returnType" : "boolean",
    "comment" : "\n   * Tell if the current node is outside the document element.\n   *\n   * @return true if the current node is outside the document element.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void processingInstruction(String target, String data) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n   * Receive notification of a processing instruction.\n   *\n   * <p>The Parser will invoke this method once for each processing\n   * instruction found: note that processing instructions may occur\n   * before or after the main document element.</p>\n   *\n   * <p>A SAX parser should never report an XML declaration (XML 1.0,\n   * section 2.8) or a text declaration (XML 1.0, section 4.3.1)\n   * using this method.</p>\n   *\n   * @param target The processing instruction target.\n   * @param data The processing instruction data, or null if\n   *        none was supplied.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void comment(char[] ch, int start, int length) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n   * Report an XML comment anywhere in the document.\n   *\n   * This callback will be used for comments inside or outside the\n   * document element, including comments in the external DTD\n   * subset (if read).\n   *\n   * @param ch An array holding the characters in the comment.\n   * @param start The starting position in the array.\n   * @param length The number of characters to use from the array.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void startCDATA() throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n   * Report the start of a CDATA section.\n   *\n   * @see #endCDATA\n   ",
    "links" : [ ]
  }, {
    "name" : "public void endCDATA() throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n   * Report the end of a CDATA section.\n   *\n   * @see #startCDATA\n   ",
    "links" : [ ]
  }, {
    "name" : "public void cdata(char[] ch, int start, int length) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n   * Receive notification of cdata.\n   *\n   * <p>The Parser will call this method to report each chunk of\n   * character data.  SAX parsers may return all contiguous character\n   * data in a single chunk, or they may split it into several\n   * chunks; however, all of the characters in any single event\n   * must come from the same external entity, so that the Locator\n   * provides useful information.</p>\n   *\n   * <p>The application must not attempt to read from the array\n   * outside of the specified range.</p>\n   *\n   * <p>Note that some parsers will report whitespace using the\n   * ignorableWhitespace() method rather than this one (validating\n   * parsers must do so).</p>\n   *\n   * @param ch The characters from the XML document.\n   * @param start The start position in the array.\n   * @param length The number of characters to read from the array.\n   * @see #ignorableWhitespace\n   * @see org.xml.sax.Locator\n   ",
    "links" : [ ]
  }, {
    "name" : "public void startDTD(String name, String publicId, String systemId) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n   * Report the start of DTD declarations, if any.\n   *\n   * Any declarations are assumed to be in the internal subset\n   * unless otherwise indicated.\n   *\n   * @param name The document type name.\n   * @param publicId The declared public identifier for the\n   *        external DTD subset, or null if none was declared.\n   * @param systemId The declared system identifier for the\n   *        external DTD subset, or null if none was declared.\n   * @see #endDTD\n   * @see #startEntity\n   ",
    "links" : [ ]
  }, {
    "name" : "public void endDTD() throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n   * Report the end of DTD declarations.\n   *\n   * @see #startDTD\n   ",
    "links" : [ ]
  }, {
    "name" : "public void startPrefixMapping(String prefix, String uri) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n   * Begin the scope of a prefix-URI Namespace mapping.\n   *\n   * <p>The information from this event is not necessary for\n   * normal Namespace processing: the SAX XML reader will\n   * automatically replace prefixes for element and attribute\n   * names when the http://xml.org/sax/features/namespaces\n   * feature is true (the default).</p>\n   *\n   * <p>There are cases, however, when applications need to\n   * use prefixes in character data or in attribute values,\n   * where they cannot safely be expanded automatically; the\n   * start/endPrefixMapping event supplies the information\n   * to the application to expand prefixes in those contexts\n   * itself, if necessary.</p>\n   *\n   * <p>Note that start/endPrefixMapping events are not\n   * guaranteed to be properly nested relative to each-other:\n   * all startPrefixMapping events will occur before the\n   * corresponding startElement event, and all endPrefixMapping\n   * events will occur after the corresponding endElement event,\n   * but their order is not guaranteed.</p>\n   *\n   * @param prefix The Namespace prefix being declared.\n   * @param uri The Namespace URI the prefix is mapped to.\n   * @see #endPrefixMapping\n   * @see #startElement\n   ",
    "links" : [ ]
  }, {
    "name" : "public void endPrefixMapping(String prefix) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n   * End the scope of a prefix-URI mapping.\n   *\n   * <p>See startPrefixMapping for details.  This event will\n   * always occur after the corresponding endElement event,\n   * but the order of endPrefixMapping events is not otherwise\n   * guaranteed.</p>\n   *\n   * @param prefix The prefix that was being mapping.\n   * @see #startPrefixMapping\n   * @see #endElement\n   ",
    "links" : [ ]
  }, {
    "name" : "public void skippedEntity(String name) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n   * Receive notification of a skipped entity.\n   *\n   * <p>The Parser will invoke this method once for each entity\n   * skipped.  Non-validating processors may skip entities if they\n   * have not seen the declarations (because, for example, the\n   * entity was declared in an external DTD subset).  All processors\n   * may skip external entities, depending on the values of the\n   * http://xml.org/sax/features/external-general-entities and the\n   * http://xml.org/sax/features/external-parameter-entities\n   * properties.</p>\n   *\n   * @param name The name of the skipped entity.  If it is a\n   *        parameter entity, the name will begin with '%'.\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Node getRootDocument()", "public Node getRootNode()", "public Node getCurrentNode()", "public void setNextSibling(Node nextSibling)", "public Node getNextSibling()", "public java.io.Writer getWriter()", "protected void append(Node newNode) throws org.xml.sax.SAXException", "public void setDocumentLocator(Locator locator)", "public void startDocument() throws org.xml.sax.SAXException", "public void endDocument() throws org.xml.sax.SAXException", "public void startElement(String ns, String localName, String name, Attributes atts) throws org.xml.sax.SAXException", "public void endElement(String ns, String localName, String name) throws org.xml.sax.SAXException", "public void setIDAttribute(String id, Element elem)", "public void characters(char[] ch, int start, int length) throws org.xml.sax.SAXException", "public void charactersRaw(char[] ch, int start, int length) throws org.xml.sax.SAXException", "public void startEntity(String name) throws org.xml.sax.SAXException", "public void endEntity(String name) throws org.xml.sax.SAXException", "public void entityReference(String name) throws org.xml.sax.SAXException", "public void ignorableWhitespace(char[] ch, int start, int length) throws org.xml.sax.SAXException", "private boolean isOutsideDocElem()", "public void processingInstruction(String target, String data) throws org.xml.sax.SAXException", "public void comment(char[] ch, int start, int length) throws org.xml.sax.SAXException", "public void startCDATA() throws org.xml.sax.SAXException", "public void endCDATA() throws org.xml.sax.SAXException", "public void cdata(char[] ch, int start, int length) throws org.xml.sax.SAXException", "public void startDTD(String name, String publicId, String systemId) throws org.xml.sax.SAXException", "public void endDTD() throws org.xml.sax.SAXException", "public void startPrefixMapping(String prefix, String uri) throws org.xml.sax.SAXException", "public void endPrefixMapping(String prefix) throws org.xml.sax.SAXException", "public void skippedEntity(String name) throws org.xml.sax.SAXException" ],
  "variableNames" : [ "m_doc", "m_currentNode", "m_root", "m_nextSibling", "m_docFrag", "m_elemStack", "m_prefixMappings", "m_inCData" ]
}