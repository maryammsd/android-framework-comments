{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/concurrent/LinkedBlockingDeque.java",
  "packageName" : "java.util.concurrent",
  "className" : "LinkedBlockingDeque",
  "comment" : "\n * An optionally-bounded {@linkplain BlockingDeque blocking deque} based on\n * linked nodes.\n *\n * <p>The optional capacity bound constructor argument serves as a\n * way to prevent excessive expansion. The capacity, if unspecified,\n * is equal to {@link Integer#MAX_VALUE}.  Linked nodes are\n * dynamically created upon each insertion unless this would bring the\n * deque above capacity.\n *\n * <p>Most operations run in constant time (ignoring time spent\n * blocking).  Exceptions include {@link #remove(Object) remove},\n * {@link #removeFirstOccurrence removeFirstOccurrence}, {@link\n * #removeLastOccurrence removeLastOccurrence}, {@link #contains\n * contains}, {@link #iterator iterator.remove()}, and the bulk\n * operations, all of which run in linear time.\n *\n * <p>This class and its iterator implement all of the <em>optional</em>\n * methods of the {@link Collection} and {@link Iterator} interfaces.\n *\n * <p>This class is a member of the\n * <a href=\"{@docRoot}/java.base/java/util/package-summary.html#CollectionsFramework\">\n * Java Collections Framework</a>.\n *\n * @since 1.6\n * @author  Doug Lea\n * @param <E> the type of elements held in this deque\n ",
  "links" : [ "#removeLastOccurrence", "#MAX_VALUE", "java.util.Iterator", "#removeFirstOccurrence", "#containscontains", "#iterator", "java.util.Collection", "#remove(Object)" ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "first",
    "type" : "Node<E>",
    "comment" : "\n     * Pointer to first node.\n     * Invariant: (first == null && last == null) ||\n     *            (first.prev == null && first.item != null)\n     ",
    "links" : [ ]
  }, {
    "name" : "last",
    "type" : "Node<E>",
    "comment" : "\n     * Pointer to last node.\n     * Invariant: (first == null && last == null) ||\n     *            (last.next == null && last.item != null)\n     ",
    "links" : [ ]
  }, {
    "name" : "count",
    "type" : "int",
    "comment" : " Number of items in the deque ",
    "links" : [ ]
  }, {
    "name" : "capacity",
    "type" : "int",
    "comment" : " Maximum number of items in the deque ",
    "links" : [ ]
  }, {
    "name" : "lock",
    "type" : "ReentrantLock",
    "comment" : " Main lock guarding all access ",
    "links" : [ ]
  }, {
    "name" : "notEmpty",
    "type" : "Condition",
    "comment" : " Condition for waiting takes ",
    "links" : [ ]
  }, {
    "name" : "notFull",
    "type" : "Condition",
    "comment" : " Condition for waiting puts ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private boolean linkFirst(Node<E> node)",
    "returnType" : "boolean",
    "comment" : "\n     * Links node as first element, or returns false if full.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean linkLast(Node<E> node)",
    "returnType" : "boolean",
    "comment" : "\n     * Links node as last element, or returns false if full.\n     ",
    "links" : [ ]
  }, {
    "name" : "private E unlinkFirst()",
    "returnType" : "E",
    "comment" : "\n     * Removes and returns first element, or null if empty.\n     ",
    "links" : [ ]
  }, {
    "name" : "private E unlinkLast()",
    "returnType" : "E",
    "comment" : "\n     * Removes and returns last element, or null if empty.\n     ",
    "links" : [ ]
  }, {
    "name" : " void unlink(Node<E> x)",
    "returnType" : "void",
    "comment" : "\n     * Unlinks x.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addFirst(E e)",
    "returnType" : "void",
    "comment" : "\n     * @throws IllegalStateException if this deque is full\n     * @throws NullPointerException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addLast(E e)",
    "returnType" : "void",
    "comment" : "\n     * @throws IllegalStateException if this deque is full\n     * @throws NullPointerException  {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean offerFirst(E e)",
    "returnType" : "boolean",
    "comment" : "\n     * @throws NullPointerException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean offerLast(E e)",
    "returnType" : "boolean",
    "comment" : "\n     * @throws NullPointerException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public void putFirst(E e) throws InterruptedException",
    "returnType" : "void",
    "comment" : "\n     * @throws NullPointerException {@inheritDoc}\n     * @throws InterruptedException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public void putLast(E e) throws InterruptedException",
    "returnType" : "void",
    "comment" : "\n     * @throws NullPointerException {@inheritDoc}\n     * @throws InterruptedException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean offerFirst(E e, long timeout, TimeUnit unit) throws InterruptedException",
    "returnType" : "boolean",
    "comment" : "\n     * @throws NullPointerException {@inheritDoc}\n     * @throws InterruptedException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean offerLast(E e, long timeout, TimeUnit unit) throws InterruptedException",
    "returnType" : "boolean",
    "comment" : "\n     * @throws NullPointerException {@inheritDoc}\n     * @throws InterruptedException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public E removeFirst()",
    "returnType" : "E",
    "comment" : "\n     * @throws NoSuchElementException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public E removeLast()",
    "returnType" : "E",
    "comment" : "\n     * @throws NoSuchElementException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public E pollFirst()",
    "returnType" : "E",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public E pollLast()",
    "returnType" : "E",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public E takeFirst() throws InterruptedException",
    "returnType" : "E",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public E takeLast() throws InterruptedException",
    "returnType" : "E",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public E pollFirst(long timeout, TimeUnit unit) throws InterruptedException",
    "returnType" : "E",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public E pollLast(long timeout, TimeUnit unit) throws InterruptedException",
    "returnType" : "E",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public E getFirst()",
    "returnType" : "E",
    "comment" : "\n     * @throws NoSuchElementException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public E getLast()",
    "returnType" : "E",
    "comment" : "\n     * @throws NoSuchElementException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public E peekFirst()",
    "returnType" : "E",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public E peekLast()",
    "returnType" : "E",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean removeFirstOccurrence(Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean removeLastOccurrence(Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean add(E e)",
    "returnType" : "boolean",
    "comment" : "\n     * Inserts the specified element at the end of this deque unless it would\n     * violate capacity restrictions.  When using a capacity-restricted deque,\n     * it is generally preferable to use method {@link #offer(Object) offer}.\n     *\n     * <p>This method is equivalent to {@link #addLast}.\n     *\n     * @throws IllegalStateException if this deque is full\n     * @throws NullPointerException if the specified element is null\n     ",
    "links" : [ "#addLast", "#offer(Object)" ]
  }, {
    "name" : "public boolean offer(E e)",
    "returnType" : "boolean",
    "comment" : "\n     * @throws NullPointerException if the specified element is null\n     ",
    "links" : [ ]
  }, {
    "name" : "public void put(E e) throws InterruptedException",
    "returnType" : "void",
    "comment" : "\n     * @throws NullPointerException {@inheritDoc}\n     * @throws InterruptedException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean offer(E e, long timeout, TimeUnit unit) throws InterruptedException",
    "returnType" : "boolean",
    "comment" : "\n     * @throws NullPointerException {@inheritDoc}\n     * @throws InterruptedException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public E remove()",
    "returnType" : "E",
    "comment" : "\n     * Retrieves and removes the head of the queue represented by this deque.\n     * This method differs from {@link #poll() poll()} only in that it throws an\n     * exception if this deque is empty.\n     *\n     * <p>This method is equivalent to {@link #removeFirst() removeFirst}.\n     *\n     * @return the head of the queue represented by this deque\n     * @throws NoSuchElementException if this deque is empty\n     ",
    "links" : [ "#removeFirst()", "#poll()" ]
  }, {
    "name" : "public E poll()",
    "returnType" : "E",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public E take() throws InterruptedException",
    "returnType" : "E",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public E poll(long timeout, TimeUnit unit) throws InterruptedException",
    "returnType" : "E",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public E element()",
    "returnType" : "E",
    "comment" : "\n     * Retrieves, but does not remove, the head of the queue represented by\n     * this deque.  This method differs from {@link #peek() peek()} only in that\n     * it throws an exception if this deque is empty.\n     *\n     * <p>This method is equivalent to {@link #getFirst() getFirst}.\n     *\n     * @return the head of the queue represented by this deque\n     * @throws NoSuchElementException if this deque is empty\n     ",
    "links" : [ "#peek()", "#getFirst()" ]
  }, {
    "name" : "public E peek()",
    "returnType" : "E",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int remainingCapacity()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of additional elements that this deque can ideally\n     * (in the absence of memory or resource constraints) accept without\n     * blocking. This is always equal to the initial capacity of this deque\n     * less the current {@code size} of this deque.\n     *\n     * <p>Note that you <em>cannot</em> always tell if an attempt to insert\n     * an element will succeed by inspecting {@code remainingCapacity}\n     * because it may be the case that another thread is about to\n     * insert or remove an element.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int drainTo(Collection<? super E> c)",
    "returnType" : "int",
    "comment" : "\n     * @throws UnsupportedOperationException {@inheritDoc}\n     * @throws ClassCastException            {@inheritDoc}\n     * @throws NullPointerException          {@inheritDoc}\n     * @throws IllegalArgumentException      {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public int drainTo(Collection<? super E> c, int maxElements)",
    "returnType" : "int",
    "comment" : "\n     * @throws UnsupportedOperationException {@inheritDoc}\n     * @throws ClassCastException            {@inheritDoc}\n     * @throws NullPointerException          {@inheritDoc}\n     * @throws IllegalArgumentException      {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public void push(E e)",
    "returnType" : "void",
    "comment" : "\n     * @throws IllegalStateException if this deque is full\n     * @throws NullPointerException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public E pop()",
    "returnType" : "E",
    "comment" : "\n     * @throws NoSuchElementException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean remove(Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * Removes the first occurrence of the specified element from this deque.\n     * If the deque does not contain the element, it is unchanged.\n     * More formally, removes the first element {@code e} such that\n     * {@code o.equals(e)} (if such an element exists).\n     * Returns {@code true} if this deque contained the specified element\n     * (or equivalently, if this deque changed as a result of the call).\n     *\n     * <p>This method is equivalent to\n     * {@link #removeFirstOccurrence(Object) removeFirstOccurrence}.\n     *\n     * @param o element to be removed from this deque, if present\n     * @return {@code true} if this deque changed as a result of the call\n     ",
    "links" : [ "#removeFirstOccurrence(Object)" ]
  }, {
    "name" : "public int size()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of elements in this deque.\n     *\n     * @return the number of elements in this deque\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean contains(Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if this deque contains the specified element.\n     * More formally, returns {@code true} if and only if this deque contains\n     * at least one element {@code e} such that {@code o.equals(e)}.\n     *\n     * @param o object to be checked for containment in this deque\n     * @return {@code true} if this deque contains the specified element\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean addAll(Collection<? extends E> c)",
    "returnType" : "boolean",
    "comment" : "\n     * Appends all of the elements in the specified collection to the end of\n     * this deque, in the order that they are returned by the specified\n     * collection's iterator.  Attempts to {@code addAll} of a deque to\n     * itself result in {@code IllegalArgumentException}.\n     *\n     * @param c the elements to be inserted into this deque\n     * @return {@code true} if this deque changed as a result of the call\n     * @throws NullPointerException if the specified collection or any\n     *         of its elements are null\n     * @throws IllegalArgumentException if the collection is this deque\n     * @throws IllegalStateException if this deque is full\n     * @see #add(Object)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object[] toArray()",
    "returnType" : "Object[]",
    "comment" : "\n     * Returns an array containing all of the elements in this deque, in\n     * proper sequence (from first to last element).\n     *\n     * <p>The returned array will be \"safe\" in that no references to it are\n     * maintained by this deque.  (In other words, this method must allocate\n     * a new array).  The caller is thus free to modify the returned array.\n     *\n     * <p>This method acts as bridge between array-based and collection-based\n     * APIs.\n     *\n     * @return an array containing all of the elements in this deque\n     ",
    "links" : [ ]
  }, {
    "name" : "public T[] toArray(T[] a)",
    "returnType" : "T[]",
    "comment" : "\n     * Returns an array containing all of the elements in this deque, in\n     * proper sequence; the runtime type of the returned array is that of\n     * the specified array.  If the deque fits in the specified array, it\n     * is returned therein.  Otherwise, a new array is allocated with the\n     * runtime type of the specified array and the size of this deque.\n     *\n     * <p>If this deque fits in the specified array with room to spare\n     * (i.e., the array has more elements than this deque), the element in\n     * the array immediately following the end of the deque is set to\n     * {@code null}.\n     *\n     * <p>Like the {@link #toArray()} method, this method acts as bridge between\n     * array-based and collection-based APIs.  Further, this method allows\n     * precise control over the runtime type of the output array, and may,\n     * under certain circumstances, be used to save allocation costs.\n     *\n     * <p>Suppose {@code x} is a deque known to contain only strings.\n     * The following code can be used to dump the deque into a newly\n     * allocated array of {@code String}:\n     *\n     * <pre> {@code String[] y = x.toArray(new String[0]);}</pre>\n     *\n     * Note that {@code toArray(new Object[0])} is identical in function to\n     * {@code toArray()}.\n     *\n     * @param a the array into which the elements of the deque are to\n     *          be stored, if it is big enough; otherwise, a new array of the\n     *          same runtime type is allocated for this purpose\n     * @return an array containing all of the elements in this deque\n     * @throws ArrayStoreException if the runtime type of the specified array\n     *         is not a supertype of the runtime type of every element in\n     *         this deque\n     * @throws NullPointerException if the specified array is null\n     ",
    "links" : [ "#toArray()" ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void clear()",
    "returnType" : "void",
    "comment" : "\n     * Atomically removes all of the elements from this deque.\n     * The deque will be empty after this call returns.\n     ",
    "links" : [ ]
  }, {
    "name" : " Node<E> succ(Node<E> p)",
    "returnType" : "Node<E>",
    "comment" : "\n     * Used for any element traversal that is not entirely under lock.\n     * Such traversals must handle both:\n     * - dequeued nodes (p.next == p)\n     * - (possibly multiple) interior removed nodes (p.item == null)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Iterator<E> iterator()",
    "returnType" : "Iterator<E>",
    "comment" : "\n     * Returns an iterator over the elements in this deque in proper sequence.\n     * The elements will be returned in order from first (head) to last (tail).\n     *\n     * <p>The returned iterator is\n     * <a href=\"package-summary.html#Weakly\"><i>weakly consistent</i></a>.\n     *\n     * @return an iterator over the elements in this deque in proper sequence\n     ",
    "links" : [ ]
  }, {
    "name" : "public Iterator<E> descendingIterator()",
    "returnType" : "Iterator<E>",
    "comment" : "\n     * Returns an iterator over the elements in this deque in reverse\n     * sequential order.  The elements will be returned in order from\n     * last (tail) to first (head).\n     *\n     * <p>The returned iterator is\n     * <a href=\"package-summary.html#Weakly\"><i>weakly consistent</i></a>.\n     *\n     * @return an iterator over the elements in this deque in reverse order\n     ",
    "links" : [ ]
  }, {
    "name" : "public Spliterator<E> spliterator()",
    "returnType" : "Spliterator<E>",
    "comment" : "\n     * Returns a {@link Spliterator} over the elements in this deque.\n     *\n     * <p>The returned spliterator is\n     * <a href=\"package-summary.html#Weakly\"><i>weakly consistent</i></a>.\n     *\n     * <p>The {@code Spliterator} reports {@link Spliterator#CONCURRENT},\n     * {@link Spliterator#ORDERED}, and {@link Spliterator#NONNULL}.\n     *\n     * @implNote\n     * The {@code Spliterator} implements {@code trySplit} to permit limited\n     * parallelism.\n     *\n     * @return a {@code Spliterator} over the elements in this deque\n     * @since 1.8\n     ",
    "links" : [ "java.util.Spliterator#NONNULL", "java.util.Spliterator#CONCURRENT", "java.util.Spliterator", "java.util.Spliterator#ORDERED" ]
  }, {
    "name" : "public void forEach(Consumer<? super E> action)",
    "returnType" : "void",
    "comment" : "\n     * @throws NullPointerException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : " void forEachFrom(Consumer<? super E> action, Node<E> p)",
    "returnType" : "void",
    "comment" : "\n     * Runs action on each element found during a traversal starting at p.\n     * If p is null, traversal starts at head.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean removeIf(Predicate<? super E> filter)",
    "returnType" : "boolean",
    "comment" : "\n     * @throws NullPointerException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean removeAll(Collection<?> c)",
    "returnType" : "boolean",
    "comment" : "\n     * @throws NullPointerException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean retainAll(Collection<?> c)",
    "returnType" : "boolean",
    "comment" : "\n     * @throws NullPointerException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean bulkRemove(Predicate<? super E> filter)",
    "returnType" : "boolean",
    "comment" : " Implementation of bulk remove methods. ",
    "links" : [ ]
  }, {
    "name" : "private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException",
    "returnType" : "void",
    "comment" : "\n     * Saves this deque to a stream (that is, serializes it).\n     *\n     * @param s the stream\n     * @throws java.io.IOException if an I/O error occurs\n     * @serialData The capacity (int), followed by elements (each an\n     * {@code Object}) in the proper order, followed by a null\n     ",
    "links" : [ ]
  }, {
    "name" : "private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException",
    "returnType" : "void",
    "comment" : "\n     * Reconstitutes this deque from a stream (that is, deserializes it).\n     * @param s the stream\n     * @throws ClassNotFoundException if the class of a serialized object\n     *         could not be found\n     * @throws java.io.IOException if an I/O error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " void checkInvariants()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private boolean linkFirst(Node<E> node)", "private boolean linkLast(Node<E> node)", "private E unlinkFirst()", "private E unlinkLast()", " void unlink(Node<E> x)", "public void addFirst(E e)", "public void addLast(E e)", "public boolean offerFirst(E e)", "public boolean offerLast(E e)", "public void putFirst(E e) throws InterruptedException", "public void putLast(E e) throws InterruptedException", "public boolean offerFirst(E e, long timeout, TimeUnit unit) throws InterruptedException", "public boolean offerLast(E e, long timeout, TimeUnit unit) throws InterruptedException", "public E removeFirst()", "public E removeLast()", "public E pollFirst()", "public E pollLast()", "public E takeFirst() throws InterruptedException", "public E takeLast() throws InterruptedException", "public E pollFirst(long timeout, TimeUnit unit) throws InterruptedException", "public E pollLast(long timeout, TimeUnit unit) throws InterruptedException", "public E getFirst()", "public E getLast()", "public E peekFirst()", "public E peekLast()", "public boolean removeFirstOccurrence(Object o)", "public boolean removeLastOccurrence(Object o)", "public boolean add(E e)", "public boolean offer(E e)", "public void put(E e) throws InterruptedException", "public boolean offer(E e, long timeout, TimeUnit unit) throws InterruptedException", "public E remove()", "public E poll()", "public E take() throws InterruptedException", "public E poll(long timeout, TimeUnit unit) throws InterruptedException", "public E element()", "public E peek()", "public int remainingCapacity()", "public int drainTo(Collection<? super E> c)", "public int drainTo(Collection<? super E> c, int maxElements)", "public void push(E e)", "public E pop()", "public boolean remove(Object o)", "public int size()", "public boolean contains(Object o)", "public boolean addAll(Collection<? extends E> c)", "public Object[] toArray()", "public T[] toArray(T[] a)", "public String toString()", "public void clear()", " Node<E> succ(Node<E> p)", "public Iterator<E> iterator()", "public Iterator<E> descendingIterator()", "public Spliterator<E> spliterator()", "public void forEach(Consumer<? super E> action)", " void forEachFrom(Consumer<? super E> action, Node<E> p)", "public boolean removeIf(Predicate<? super E> filter)", "public boolean removeAll(Collection<?> c)", "public boolean retainAll(Collection<?> c)", "private boolean bulkRemove(Predicate<? super E> filter)", "private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException", "private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException", " void checkInvariants()" ],
  "variableNames" : [ "serialVersionUID", "first", "last", "count", "capacity", "lock", "notEmpty", "notFull" ]
}