{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/concurrent/LinkedBlockingDeque.java",
  "packageName" : "java.util.concurrent",
  "className" : "AbstractItr",
  "comment" : "\n     * Base class for LinkedBlockingDeque iterators.\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "next",
    "type" : "Node<E>",
    "comment" : "\n         * The next node to return in next().\n         ",
    "links" : [ ]
  }, {
    "name" : "nextItem",
    "type" : "E",
    "comment" : "\n         * nextItem holds on to item fields because once we claim that\n         * an element exists in hasNext(), we must return item read\n         * under lock even if it was in the process of being removed\n         * when hasNext() was called.\n         ",
    "links" : [ ]
  }, {
    "name" : "lastRet",
    "type" : "Node<E>",
    "comment" : "\n         * Node returned by most recent call to next. Needed by remove.\n         * Reset to null if this element is deleted by a call to remove.\n         ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " abstract Node<E> firstNode()",
    "returnType" : "Node<E>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " abstract Node<E> nextNode(Node<E> n)",
    "returnType" : "Node<E>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Node<E> succ(Node<E> p)",
    "returnType" : "Node<E>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasNext()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public E next()",
    "returnType" : "E",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void forEachRemaining(Consumer<? super E> action)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void remove()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ " abstract Node<E> firstNode()", " abstract Node<E> nextNode(Node<E> n)", "private Node<E> succ(Node<E> p)", "public boolean hasNext()", "public E next()", "public void forEachRemaining(Consumer<? super E> action)", "public void remove()" ],
  "variableNames" : [ "next", "nextItem", "lastRet" ]
}