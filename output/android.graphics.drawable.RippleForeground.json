{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/graphics/drawable/RippleForeground.java",
  "packageName" : "android.graphics.drawable",
  "className" : "RippleForeground",
  "comment" : "\n * Draws a ripple foreground.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "LINEAR_INTERPOLATOR",
    "type" : "TimeInterpolator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DECELERATE_INTERPOLATOR",
    "type" : "TimeInterpolator",
    "comment" : " Matches R.interpolator.fast_out_slow_in but as we have no context we can't just import that",
    "links" : [ ]
  }, {
    "name" : "RIPPLE_ENTER_DURATION",
    "type" : "int",
    "comment" : " Time it takes for the ripple to expand",
    "links" : [ ]
  }, {
    "name" : "RIPPLE_ORIGIN_DURATION",
    "type" : "int",
    "comment" : " Time it takes for the ripple to slide from the touch to the center point",
    "links" : [ ]
  }, {
    "name" : "OPACITY_ENTER_DURATION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "OPACITY_EXIT_DURATION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "OPACITY_HOLD_DURATION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStartingX",
    "type" : "float",
    "comment" : " Parent-relative values for starting position.",
    "links" : [ ]
  }, {
    "name" : "mStartingY",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mClampedStartingX",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mClampedStartingY",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPropPaint",
    "type" : "CanvasProperty<Paint>",
    "comment" : " Hardware rendering properties.",
    "links" : [ ]
  }, {
    "name" : "mPropRadius",
    "type" : "CanvasProperty<Float>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPropX",
    "type" : "CanvasProperty<Float>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPropY",
    "type" : "CanvasProperty<Float>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTargetX",
    "type" : "float",
    "comment" : " Target values for tween animations.",
    "links" : [ ]
  }, {
    "name" : "mTargetY",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOpacity",
    "type" : "float",
    "comment" : " Software rendering properties.",
    "links" : [ ]
  }, {
    "name" : "mTweenRadius",
    "type" : "float",
    "comment" : " Values used to tween between the start and end positions.",
    "links" : [ ]
  }, {
    "name" : "mTweenX",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTweenY",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHasFinishedExit",
    "type" : "boolean",
    "comment" : " Whether this ripple has finished its exit animation. ",
    "links" : [ ]
  }, {
    "name" : "mUsingProperties",
    "type" : "boolean",
    "comment" : " Whether we can use hardware acceleration for the exit animation. ",
    "links" : [ ]
  }, {
    "name" : "mEnterStartedAtMillis",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPendingHwAnimators",
    "type" : "ArrayList<RenderNodeAnimator>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRunningHwAnimators",
    "type" : "ArrayList<RenderNodeAnimator>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRunningSwAnimators",
    "type" : "ArrayList<Animator>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mForceSoftware",
    "type" : "boolean",
    "comment" : "\n     * If set, force all ripple animations to not run on RenderThread, even if it would be\n     * available.\n     ",
    "links" : [ ]
  }, {
    "name" : "mStartRadius",
    "type" : "float",
    "comment" : "\n     * If we have a bound, don't start from 0. Start from 60% of the max out of width and height.\n     ",
    "links" : [ ]
  }, {
    "name" : "mAnimationListener",
    "type" : "AnimatorListenerAdapter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TWEEN_RADIUS",
    "type" : "FloatProperty<RippleForeground>",
    "comment" : "\n     * Property for animating radius between its initial and target values.\n     ",
    "links" : [ ]
  }, {
    "name" : "TWEEN_ORIGIN",
    "type" : "FloatProperty<RippleForeground>",
    "comment" : "\n     * Property for animating origin between its initial and target values.\n     ",
    "links" : [ ]
  }, {
    "name" : "OPACITY",
    "type" : "FloatProperty<RippleForeground>",
    "comment" : "\n     * Property for animating opacity between 0 and its target value.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected void onTargetRadiusChanged(float targetRadius)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void drawSoftware(Canvas c, Paint p)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void startPending(RecordingCanvas c)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void pruneHwFinished()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void pruneSwFinished()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void drawHardware(RecordingCanvas c, Paint p)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void getBounds(Rect bounds)",
    "returnType" : "void",
    "comment" : "\n     * Returns the maximum bounds of the ripple relative to the ripple center.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void move(float x, float y)",
    "returnType" : "void",
    "comment" : "\n     * Specifies the starting position relative to the drawable bounds. No-op if\n     * the ripple has already entered.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasFinishedExit()",
    "returnType" : "boolean",
    "comment" : "\n     * @return {@code true} if this ripple has finished its exit animation\n     ",
    "links" : [ ]
  }, {
    "name" : "private long computeFadeOutDelay()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void startSoftwareEnter()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void startSoftwareExit()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void startHardwareEnter()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void startHardwareExit()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final void enter()",
    "returnType" : "void",
    "comment" : "\n     * Starts a ripple enter animation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void exit()",
    "returnType" : "void",
    "comment" : "\n     * Starts a ripple exit animation.\n     ",
    "links" : [ ]
  }, {
    "name" : "private float getCurrentX()",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private float getCurrentY()",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private float getCurrentRadius()",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void draw(Canvas c, Paint p)",
    "returnType" : "void",
    "comment" : "\n     * Draws the ripple to the canvas, inheriting the paint's color and alpha\n     * properties.\n     *\n     * @param c the canvas to which the ripple should be drawn\n     * @param p the paint used to draw the ripple\n     ",
    "links" : [ ]
  }, {
    "name" : "private void clampStartingPosition()",
    "returnType" : "void",
    "comment" : "\n     * Clamps the starting position to fit within the ripple bounds.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void end()",
    "returnType" : "void",
    "comment" : "\n     * Ends all animations, jumping values to the end state.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void onAnimationPropertyChanged()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void clearHwProps()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void switchToUiThreadAnimation()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "protected void onTargetRadiusChanged(float targetRadius)", "private void drawSoftware(Canvas c, Paint p)", "private void startPending(RecordingCanvas c)", "private void pruneHwFinished()", "private void pruneSwFinished()", "private void drawHardware(RecordingCanvas c, Paint p)", "public void getBounds(Rect bounds)", "public void move(float x, float y)", "public boolean hasFinishedExit()", "private long computeFadeOutDelay()", "private void startSoftwareEnter()", "private void startSoftwareExit()", "private void startHardwareEnter()", "private void startHardwareExit()", "public final void enter()", "public final void exit()", "private float getCurrentX()", "private float getCurrentY()", "private float getCurrentRadius()", "public void draw(Canvas c, Paint p)", "private void clampStartingPosition()", "public void end()", "private void onAnimationPropertyChanged()", "private void clearHwProps()", "private void switchToUiThreadAnimation()" ],
  "variableNames" : [ "LINEAR_INTERPOLATOR", "DECELERATE_INTERPOLATOR", "RIPPLE_ENTER_DURATION", "RIPPLE_ORIGIN_DURATION", "OPACITY_ENTER_DURATION", "OPACITY_EXIT_DURATION", "OPACITY_HOLD_DURATION", "mStartingX", "mStartingY", "mClampedStartingX", "mClampedStartingY", "mPropPaint", "mPropRadius", "mPropX", "mPropY", "mTargetX", "mTargetY", "mOpacity", "mTweenRadius", "mTweenX", "mTweenY", "mHasFinishedExit", "mUsingProperties", "mEnterStartedAtMillis", "mPendingHwAnimators", "mRunningHwAnimators", "mRunningSwAnimators", "mForceSoftware", "mStartRadius", "mAnimationListener", "TWEEN_RADIUS", "TWEEN_ORIGIN", "OPACITY" ]
}