{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/text/RuleBasedBreakIterator.java",
  "packageName" : "android.icu.text",
  "className" : "DictionaryCache",
  "comment" : " DictionaryCache  stores the boundaries obtained from a run of dictionary characters.\n     *                 Dictionary boundaries are moved first to this cache, then from here\n     *                 to the main BreakCache, where they may inter-leave with non-dictionary\n     *                 boundaries. The public BreakIterator API always fetches directly\n     *                 from the main BreakCache, not from here.\n     *\n     *                 In common situations, the number of boundaries in a single dictionary run\n     *                 should be quite small, it will be terminated by punctuation, spaces,\n     *                 or any other non-dictionary characters. The main BreakCache may end\n     *                 up with boundaries from multiple dictionary based runs.\n     *\n     *                 The boundaries are stored in a simple ArrayList (vector), with the\n     *                 assumption that they will be accessed sequentially.\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "fBreaks",
    "type" : "DictionaryBreakEngine.DequeI",
    "comment" : " A data structure containing the boundaries themselves. Essentially a vector of raw ints.",
    "links" : [ ]
  }, {
    "name" : "fPositionInCache",
    "type" : "int",
    "comment" : " Index in fBreaks of last boundary returned by following()",
    "links" : [ ]
  }, {
    "name" : "fStart",
    "type" : "int",
    "comment" : " Text position of first boundary in cache.",
    "links" : [ ]
  }, {
    "name" : "fLimit",
    "type" : "int",
    "comment" : " Last boundary in cache. Which is the limit of the",
    "links" : [ ]
  }, {
    "name" : "fFirstRuleStatusIndex",
    "type" : "int",
    "comment" : " Rule status info for first boundary.",
    "links" : [ ]
  }, {
    "name" : "fOtherRuleStatusIndex",
    "type" : "int",
    "comment" : " Rule status info for 2nd through last boundaries.",
    "links" : [ ]
  }, {
    "name" : "fBoundary",
    "type" : "int",
    "comment" : " Current boundary. Set by preceding(), following().",
    "links" : [ ]
  }, {
    "name" : "fStatusIndex",
    "type" : "int",
    "comment" : " Current rule status index. Set by preceding, following().",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " void reset()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean following(int fromPos)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean preceding(int fromPos)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void populateDictionary(int startPos, int endPos, int firstRuleStatus, int otherRuleStatus)",
    "returnType" : "void",
    "comment" : "\n         * Populate the cache with the dictionary based boundaries within a region of text.\n         * @param startPos  The start position of a range of text\n         * @param endPos    The end position of a range of text\n         * @param firstRuleStatus The rule status index that applies to the break at startPos\n         * @param otherRuleStatus The rule status index that applies to boundaries other than startPos\n         * @hide draft / provisional / internal are hidden on Android\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ " void reset()", " boolean following(int fromPos)", " boolean preceding(int fromPos)", " void populateDictionary(int startPos, int endPos, int firstRuleStatus, int otherRuleStatus)" ],
  "variableNames" : [ "fBreaks", "fPositionInCache", "fStart", "fLimit", "fFirstRuleStatusIndex", "fOtherRuleStatusIndex", "fBoundary", "fStatusIndex" ]
}