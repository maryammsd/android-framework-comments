{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/nio/channels/WritableByteChannel.java",
  "packageName" : "java.nio.channels",
  "className" : "WritableByteChannel",
  "comment" : "",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public int write(ByteBuffer src) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Writes a sequence of bytes to this channel from the given buffer.\n     *\n     * <p> An attempt is made to write up to <i>r</i> bytes to the channel,\n     * where <i>r</i> is the number of bytes remaining in the buffer, that is,\n     * {@code src.remaining()}, at the moment this method is invoked.\n     *\n     * <p> Suppose that a byte sequence of length <i>n</i> is written, where\n     * {@code 0}&nbsp;{@code <=}&nbsp;<i>n</i>&nbsp;{@code <=}&nbsp;<i>r</i>.\n     * This byte sequence will be transferred from the buffer starting at index\n     * <i>p</i>, where <i>p</i> is the buffer's position at the moment this\n     * method is invoked; the index of the last byte written will be\n     * <i>p</i>&nbsp;{@code +}&nbsp;<i>n</i>&nbsp;{@code -}&nbsp;{@code 1}.\n     * Upon return the buffer's position will be equal to\n     * <i>p</i>&nbsp;{@code +}&nbsp;<i>n</i>; its limit will not have changed.\n     *\n     * <p> Unless otherwise specified, a write operation will return only after\n     * writing all of the <i>r</i> requested bytes.  Some types of channels,\n     * depending upon their state, may write only some of the bytes or possibly\n     * none at all.  A socket channel in non-blocking mode, for example, cannot\n     * write any more bytes than are free in the socket's output buffer.\n     *\n     * <p> This method may be invoked at any time.  If another thread has\n     * already initiated a write operation upon this channel, however, then an\n     * invocation of this method will block until the first operation is\n     * complete. </p>\n     *\n     * @param  src\n     *         The buffer from which bytes are to be retrieved\n     *\n     * @return The number of bytes written, possibly zero\n     *\n     * @throws  NonWritableChannelException\n     *          If this channel was not opened for writing\n     *\n     * @throws  ClosedChannelException\n     *          If this channel is closed\n     *\n     * @throws  AsynchronousCloseException\n     *          If another thread closes this channel\n     *          while the write operation is in progress\n     *\n     * @throws  ClosedByInterruptException\n     *          If another thread interrupts the current thread\n     *          while the write operation is in progress, thereby\n     *          closing the channel and setting the current thread's\n     *          interrupt status\n     *\n     * @throws  IOException\n     *          If some other I/O error occurs\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int write(ByteBuffer src) throws IOException" ],
  "variableNames" : [ ]
}