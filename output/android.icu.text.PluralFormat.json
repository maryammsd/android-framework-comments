{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/text/PluralFormat.java",
  "packageName" : "android.icu.text",
  "className" : "PluralFormat",
  "comment" : "\n * <code>PluralFormat</code> supports the creation of internationalized\n * messages with plural inflection. It is based on <i>plural\n * selection</i>, i.e. the caller specifies messages for each\n * plural case that can appear in the user's language and the\n * <code>PluralFormat</code> selects the appropriate message based on\n * the number.\n *\n * <h3>The Problem of Plural Forms in Internationalized Messages</h3>\n * <p>\n * Different languages have different ways to inflect\n * plurals. Creating internationalized messages that include plural\n * forms is only feasible when the framework is able to handle plural\n * forms of <i>all</i> languages correctly. <code>ChoiceFormat</code>\n * doesn't handle this well, because it attaches a number interval to\n * each message and selects the message whose interval contains a\n * given number. This can only handle a finite number of\n * intervals. But in some languages, like Polish, one plural case\n * applies to infinitely many intervals (e.g., the paucal case applies to\n * numbers ending with 2, 3, or 4 except those ending with 12, 13, or\n * 14). Thus <code>ChoiceFormat</code> is not adequate.\n * <p>\n * <code>PluralFormat</code> deals with this by breaking the problem\n * into two parts:\n * <ul>\n * <li>It uses <code>PluralRules</code> that can define more complex\n *     conditions for a plural case than just a single interval. These plural\n *     rules define both what plural cases exist in a language, and to\n *     which numbers these cases apply.\n * <li>It provides predefined plural rules for many languages. Thus, the programmer\n *     need not worry about the plural cases of a language and\n *     does not have to define the plural cases; they can simply\n *     use the predefined keywords. The whole plural formatting of messages can\n *     be done using localized patterns from resource bundles. For predefined plural\n *     rules, see the CLDR <i>Language Plural Rules</i> page at\n *     https://unicode-org.github.io/cldr-staging/charts/latest/supplemental/language_plural_rules.html\n * </ul>\n *\n * <h4>Usage of <code>PluralFormat</code></h4>\n * <p>Note: Typically, plural formatting is done via <code>MessageFormat</code>\n * with a <code>plural</code> argument type,\n * rather than using a stand-alone <code>PluralFormat</code>.\n * <p>\n * This discussion assumes that you use <code>PluralFormat</code> with\n * a predefined set of plural rules. You can create one using one of\n * the constructors that takes a <code>ULocale</code> object. To\n * specify the message pattern, you can either pass it to the\n * constructor or set it explicitly using the\n * <code>applyPattern()</code> method. The <code>format()</code>\n * method takes a number object and selects the message of the\n * matching plural case. This message will be returned.\n *\n * <h5>Patterns and Their Interpretation</h5>\n * <p>\n * The pattern text defines the message output for each plural case of the\n * specified locale. Syntax:\n * <blockquote><pre>\n * pluralStyle = [offsetValue] (selector '{' message '}')+\n * offsetValue = \"offset:\" number\n * selector = explicitValue | keyword\n * explicitValue = '=' number  // adjacent, no white space in between\n * keyword = [^[[:Pattern_Syntax:][:Pattern_White_Space:]]]+\n * message: see {@link MessageFormat}\n * </pre></blockquote>\n * Pattern_White_Space between syntax elements is ignored, except\n * between the {curly braces} and their sub-message,\n * and between the '=' and the number of an explicitValue.\n * <p>\n * There are 6 predefined case keywords in CLDR/ICU - 'zero', 'one', 'two', 'few', 'many' and\n * 'other'. You always have to define a message text for the default plural case\n * \"<code>other</code>\" which is contained in every rule set.\n * If you do not specify a message text for a particular plural case, the\n * message text of the plural case \"<code>other</code>\" gets assigned to this\n * plural case.\n * <p>\n * When formatting, the input number is first matched against the explicitValue clauses.\n * If there is no exact-number match, then a keyword is selected by calling\n * the <code>PluralRules</code> with the input number <em>minus the offset</em>.\n * (The offset defaults to 0 if it is omitted from the pattern string.)\n * If there is no clause with that keyword, then the \"other\" clauses is returned.\n * <p>\n * An unquoted pound sign (<code>#</code>) in the selected sub-message\n * itself (i.e., outside of arguments nested in the sub-message)\n * is replaced by the input number minus the offset.\n * The number-minus-offset value is formatted using a\n * <code>NumberFormat</code> for the <code>PluralFormat</code>'s locale. If you\n * need special number formatting, you have to use a <code>MessageFormat</code>\n * and explicitly specify a <code>NumberFormat</code> argument.\n * <strong>Note:</strong> That argument is formatting without subtracting the offset!\n * If you need a custom format and have a non-zero offset, then you need to pass the\n * number-minus-offset value as a separate parameter.\n *\n * <p>For a usage example, see the {@link MessageFormat} class documentation.\n *\n * <h4>Defining Custom Plural Rules</h4>\n * <p>If you need to use <code>PluralFormat</code> with custom rules, you can\n * create a <code>PluralRules</code> object and pass it to\n * <code>PluralFormat</code>'s constructor. If you also specify a locale in this\n * constructor, this locale will be used to format the number in the message\n * texts.\n * <p>\n * For more information about <code>PluralRules</code>, see\n * {@link PluralRules}.\n *\n * @author tschumann (Tim Schumann)\n ",
  "links" : [ "android.icu.text.PluralRules", "android.icu.text.MessageFormat" ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ulocale",
    "type" : "ULocale",
    "comment" : "\n     * The locale used for standard number formatting and getting the predefined\n     * plural rules (if they were not defined explicitely).\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "pluralRules",
    "type" : "PluralRules",
    "comment" : "\n     * The plural rules used for plural selection.\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "pattern",
    "type" : "String",
    "comment" : "\n     * The applied pattern string.\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "msgPattern",
    "type" : "MessagePattern",
    "comment" : "\n     * The MessagePattern which contains the parsed structure of the pattern string.\n     ",
    "links" : [ ]
  }, {
    "name" : "parsedValues",
    "type" : "Map<String, String>",
    "comment" : "\n     * Obsolete with use of MessagePattern since ICU 4.8. Used to be:\n     * The format messages for each plural case. It is a mapping:\n     *  <code>String</code>(plural case keyword) --&gt; <code>String</code>\n     *  (message for this plural case).\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "numberFormat",
    "type" : "NumberFormat",
    "comment" : "\n     * This <code>NumberFormat</code> is used for the standard formatting of\n     * the number inserted into the message.\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "offset",
    "type" : "double",
    "comment" : "\n     * The offset to subtract before invoking plural rules.\n     ",
    "links" : [ ]
  }, {
    "name" : "pluralRulesWrapper",
    "type" : "PluralSelectorAdapter",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void init(PluralRules rules, PluralType type, ULocale locale, NumberFormat numberFormat)",
    "returnType" : "void",
    "comment" : "\n     * Initializes the <code>PluralRules</code> object.\n     * Postcondition:<br/>\n     *   <code>ulocale</code>    :  is <code>locale</code><br/>\n     *   <code>pluralRules</code>:  if <code>rules</code> != <code>null</code>\n     *                              it's set to rules, otherwise it is the\n     *                              predefined plural rule set for the locale\n     *                              <code>ulocale</code>.<br/>\n     *   <code>parsedValues</code>: is <code>null</code><br/>\n     *   <code>pattern</code>:      is <code>null</code><br/>\n     *   <code>numberFormat</code>: a <code>NumberFormat</code> for the locale\n     *                              <code>ulocale</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void resetPattern()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void applyPattern(String pattern)",
    "returnType" : "void",
    "comment" : "\n     * Sets the pattern used by this plural format.\n     * The method parses the pattern and creates a map of format strings\n     * for the plural rules.\n     * Patterns and their interpretation are specified in the class description.\n     *\n     * @param pattern the pattern for this plural format.\n     * @throws IllegalArgumentException if the pattern is invalid.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toPattern()",
    "returnType" : "String",
    "comment" : "\n     * Returns the pattern for this PluralFormat.\n     *\n     * @return the pattern string\n     ",
    "links" : [ ]
  }, {
    "name" : " static int findSubMessage(MessagePattern pattern, int partIndex, PluralSelector selector, Object context, double number)",
    "returnType" : "int",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : "public final String format(double number)",
    "returnType" : "String",
    "comment" : "\n     * Formats a plural message for a given number.\n     *\n     * @param number a number for which the plural message should be formatted.\n     *        If no pattern has been applied to this\n     *        <code>PluralFormat</code> object yet, the formatted number will\n     *        be returned.\n     * @return the string containing the formatted plural message.\n     ",
    "links" : [ ]
  }, {
    "name" : "public StringBuffer format(Object number, StringBuffer toAppendTo, FieldPosition pos)",
    "returnType" : "StringBuffer",
    "comment" : "\n     * Formats a plural message for a given number and appends the formatted\n     * message to the given <code>StringBuffer</code>.\n     * @param number a number object (instance of <code>Number</code> for which\n     *        the plural message should be formatted. If no pattern has been\n     *        applied to this <code>PluralFormat</code> object yet, the\n     *        formatted number will be returned.\n     *        Note: If this object is not an instance of <code>Number</code>,\n     *              the <code>toAppendTo</code> will not be modified.\n     * @param toAppendTo the formatted message will be appended to this\n     *        <code>StringBuffer</code>.\n     * @param pos will be ignored by this method.\n     * @return the string buffer passed in as toAppendTo, with formatted text\n     *         appended.\n     * @throws IllegalArgumentException if number is not an instance of Number\n     ",
    "links" : [ ]
  }, {
    "name" : "private String format(Number numberObject, double number)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Number parse(String text, ParsePosition parsePosition)",
    "returnType" : "Number",
    "comment" : "\n     * This method is not yet supported by <code>PluralFormat</code>.\n     * @param text the string to be parsed.\n     * @param parsePosition defines the position where parsing is to begin,\n     * and upon return, the position where parsing left off.  If the position\n     * has not changed upon return, then parsing failed.\n     * @return nothing because this method is not yet implemented.\n     * @throws UnsupportedOperationException will always be thrown by this method.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object parseObject(String source, ParsePosition pos)",
    "returnType" : "Object",
    "comment" : "\n     * This method is not yet supported by <code>PluralFormat</code>.\n     * @param source the string to be parsed.\n     * @param pos defines the position where parsing is to begin,\n     * and upon return, the position where parsing left off.  If the position\n     * has not changed upon return, then parsing failed.\n     * @return nothing because this method is not yet implemented.\n     * @throws UnsupportedOperationException will always be thrown by this method.\n     ",
    "links" : [ ]
  }, {
    "name" : " String parseType(String source, RbnfLenientScanner scanner, FieldPosition pos)",
    "returnType" : "String",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : "public void setLocale(ULocale ulocale)",
    "returnType" : "void",
    "comment" : "\n     * Sets the locale used by this <code>PluraFormat</code> object.\n     * Note: Calling this method resets this <code>PluraFormat</code> object,\n     *     i.e., a pattern that was applied previously will be removed,\n     *     and the NumberFormat is set to the default number format for\n     *     the locale.  The resulting format behaves the same as one\n     *     constructed from {@link #PluralFormat(ULocale, PluralRules.PluralType)}\n     *     with PluralType.CARDINAL.\n     * @param ulocale the <code>ULocale</code> used to configure the\n     *     formatter. If <code>ulocale</code> is <code>null</code>, the\n     *     default <code>FORMAT</code> locale will be used.\n     * @see Category#FORMAT\n     * @deprecated ICU 50 This method clears the pattern and might create\n     *             a different kind of PluralRules instance;\n     *             use one of the constructors to create a new instance instead.\n     * @hide original deprecated declaration\n     ",
    "links" : [ "#PluralFormat(ULocale" ]
  }, {
    "name" : "public void setNumberFormat(NumberFormat format)",
    "returnType" : "void",
    "comment" : "\n     * Sets the number format used by this formatter.  You only need to\n     * call this if you want a different number format than the default\n     * formatter for the locale.\n     * @param format the number format to use.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object rhs)",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(PluralFormat rhs)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this equals the provided PluralFormat.\n     * @param rhs the PluralFormat to compare against\n     * @return true if this equals rhs\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void init(PluralRules rules, PluralType type, ULocale locale, NumberFormat numberFormat)", "private void resetPattern()", "public void applyPattern(String pattern)", "public String toPattern()", " static int findSubMessage(MessagePattern pattern, int partIndex, PluralSelector selector, Object context, double number)", "public final String format(double number)", "public StringBuffer format(Object number, StringBuffer toAppendTo, FieldPosition pos)", "private String format(Number numberObject, double number)", "public Number parse(String text, ParsePosition parsePosition)", "public Object parseObject(String source, ParsePosition pos)", " String parseType(String source, RbnfLenientScanner scanner, FieldPosition pos)", "public void setLocale(ULocale ulocale)", "public void setNumberFormat(NumberFormat format)", "public boolean equals(Object rhs)", "public boolean equals(PluralFormat rhs)", "public int hashCode()", "public String toString()", "private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException" ],
  "variableNames" : [ "serialVersionUID", "ulocale", "pluralRules", "pattern", "msgPattern", "parsedValues", "numberFormat", "offset", "pluralRulesWrapper" ]
}