{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/display/BrightnessConfiguration.java",
  "packageName" : "android.hardware.display",
  "className" : "Builder",
  "comment" : "\n     * A builder class for {@link BrightnessConfiguration}s.\n     ",
  "links" : [ "android.hardware.display.BrightnessConfiguration" ],
  "variables" : [ {
    "name" : "MAX_CORRECTIONS_BY_PACKAGE_NAME",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_CORRECTIONS_BY_CATEGORY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCurveLux",
    "type" : "float[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCurveNits",
    "type" : "float[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCorrectionsByPackageName",
    "type" : "Map<String, BrightnessCorrection>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCorrectionsByCategory",
    "type" : "Map<Integer, BrightnessCorrection>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDescription",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mShouldCollectColorSamples",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mShortTermModelTimeout",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mShortTermModelLowerLuxMultiplier",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mShortTermModelUpperLuxMultiplier",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getMaxCorrectionsByPackageName()",
    "returnType" : "int",
    "comment" : "\n         * Returns the maximum number of corrections by package name allowed.\n         *\n         * @return The maximum number of corrections by package name allowed.\n         *\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getMaxCorrectionsByCategory()",
    "returnType" : "int",
    "comment" : "\n         * Returns the maximum number of corrections by category allowed.\n         *\n         * @return The maximum number of corrections by category allowed.\n         *\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder addCorrectionByPackageName(@NonNull String packageName, @NonNull BrightnessCorrection correction)",
    "returnType" : "Builder",
    "comment" : "\n         * Add a brightness correction by app package name.\n         * This correction is applied whenever an app with this package name has the top activity\n         * of the focused stack.\n         *\n         * @param packageName\n         *      The app's package name.\n         * @param correction\n         *      The brightness correction.\n         *\n         * @return The builder.\n         *\n         * @throws IllegalArgumentExceptions\n         *      Maximum number of corrections by package name exceeded (see\n         *      {@link #getMaxCorrectionsByPackageName}).\n         *\n         ",
    "links" : [ "#getMaxCorrectionsByPackageName" ]
  }, {
    "name" : "public Builder addCorrectionByCategory(@ApplicationInfo.Category int category, @NonNull BrightnessCorrection correction)",
    "returnType" : "Builder",
    "comment" : "\n         * Add a brightness correction by app category.\n         * This correction is applied whenever an app with this category has the top activity of\n         * the focused stack, and only if a correction by package name has not been applied.\n         *\n         * @param category\n         *      The {@link android.content.pm.ApplicationInfo#category app category}.\n         * @param correction\n         *      The brightness correction.\n         *\n         * @return The builder.\n         *\n         * @throws IllegalArgumentException\n         *      Maximum number of corrections by category exceeded (see\n         *      {@link #getMaxCorrectionsByCategory}).\n         *\n         ",
    "links" : [ "android.content.pm.ApplicationInfo#category", "#getMaxCorrectionsByCategory" ]
  }, {
    "name" : "public Builder setDescription(@Nullable String description)",
    "returnType" : "Builder",
    "comment" : "\n         * Set description of the brightness curve.\n         *\n         * @param description brief text describing the curve pushed. It maybe truncated\n         *                    and will not be displayed in the UI\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setShouldCollectColorSamples(boolean shouldCollectColorSamples)",
    "returnType" : "Builder",
    "comment" : "\n         * Control whether screen color samples should be returned in\n         * {@link BrightnessChangeEvent#colorValueBuckets} if supported by the device.\n         *\n         * @param shouldCollectColorSamples true if color samples should be collected.\n         * @return\n         ",
    "links" : [ "android.hardware.display.BrightnessChangeEvent#colorValueBuckets" ]
  }, {
    "name" : "public Builder setShortTermModelTimeoutMillis(long shortTermModelTimeoutMillis)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the timeout for the short term model in milliseconds.\n         *\n         * If the screen is inactive for this timeout then the short term model\n         * will check the lux range defined by {@link #setShortTermModelLowerLuxMultiplier(float))}\n         * and {@link #setShortTermModelUpperLuxMultiplier(float)} to decide whether to keep any\n         * adjustment the user has made to adaptive brightness.\n         ",
    "links" : [ "#setShortTermModelUpperLuxMultiplier(float)", "#setShortTermModelLowerLuxMultiplier(float))" ]
  }, {
    "name" : "public Builder setShortTermModelUpperLuxMultiplier(@FloatRange(from = 0.0f) float shortTermModelUpperLuxMultiplier)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the multiplier used to calculate the upper bound for which\n         * a users adaptive brightness is considered valid.\n         *\n         * For example if a user changes the brightness when the ambient light level\n         * is 100 lux, the adjustment will be kept if the current ambient light level\n         * is {@code <= 100 + (100 * shortTermModelUpperLuxMultiplier)}.\n         *\n         * @throws IllegalArgumentException if shortTermModelUpperLuxMultiplier is negative.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setShortTermModelLowerLuxMultiplier(@FloatRange(from = 0.0f) float shortTermModelLowerLuxMultiplier)",
    "returnType" : "Builder",
    "comment" : "\n         * Returns the multiplier used to calculate the lower bound for which\n         * a users adaptive brightness is considered valid.\n         *\n         * For example if a user changes the brightness when the ambient light level\n         * is 100 lux, the adjustment will be kept if the current ambient light level\n         * is {@code >= 100 - (100 * shortTermModelLowerLuxMultiplier)}.\n         *\n         * @throws IllegalArgumentException if shortTermModelUpperLuxMultiplier is negative.\n         ",
    "links" : [ ]
  }, {
    "name" : "public BrightnessConfiguration build()",
    "returnType" : "BrightnessConfiguration",
    "comment" : "\n         * Builds the {@link BrightnessConfiguration}.\n         ",
    "links" : [ "android.hardware.display.BrightnessConfiguration" ]
  }, {
    "name" : "private static void checkMonotonic(float[] vals, boolean strictlyIncreasing, String name)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int getMaxCorrectionsByPackageName()", "public int getMaxCorrectionsByCategory()", "public Builder addCorrectionByPackageName(@NonNull String packageName, @NonNull BrightnessCorrection correction)", "public Builder addCorrectionByCategory(@ApplicationInfo.Category int category, @NonNull BrightnessCorrection correction)", "public Builder setDescription(@Nullable String description)", "public Builder setShouldCollectColorSamples(boolean shouldCollectColorSamples)", "public Builder setShortTermModelTimeoutMillis(long shortTermModelTimeoutMillis)", "public Builder setShortTermModelUpperLuxMultiplier(@FloatRange(from = 0.0f) float shortTermModelUpperLuxMultiplier)", "public Builder setShortTermModelLowerLuxMultiplier(@FloatRange(from = 0.0f) float shortTermModelLowerLuxMultiplier)", "public BrightnessConfiguration build()", "private static void checkMonotonic(float[] vals, boolean strictlyIncreasing, String name)" ],
  "variableNames" : [ "MAX_CORRECTIONS_BY_PACKAGE_NAME", "MAX_CORRECTIONS_BY_CATEGORY", "mCurveLux", "mCurveNits", "mCorrectionsByPackageName", "mCorrectionsByCategory", "mDescription", "mShouldCollectColorSamples", "mShortTermModelTimeout", "mShortTermModelLowerLuxMultiplier", "mShortTermModelUpperLuxMultiplier" ]
}