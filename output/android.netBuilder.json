{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/net/VpnService.java",
  "packageName" : "android.net",
  "className" : "Builder",
  "comment" : "\n     * Helper class to create a VPN interface. This class should be always\n     * used within the scope of the outer {@link VpnService}.\n     *\n     * @see VpnService\n     ",
  "variables" : [ {
    "name" : "mConfig",
    "type" : "VpnConfig",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAddresses",
    "type" : "List<LinkAddress>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRoutes",
    "type" : "List<RouteInfo>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Builder setSession(@NonNull String session)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the name of this session. It will be displayed in\n         * system-managed dialogs and notifications. This is recommended\n         * not required.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setConfigureIntent(@NonNull PendingIntent intent)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the {@link PendingIntent} to an activity for users to\n         * configure the VPN connection. If it is not set, the button\n         * to configure will not be shown in system-managed dialogs.\n         ",
    "links" : [ "PendingIntent" ]
  }, {
    "name" : "public Builder setMtu(int mtu)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the maximum transmission unit (MTU) of the VPN interface. If\n         * it is not set, the default value in the operating system will be\n         * used.\n         *\n         * @throws IllegalArgumentException if the value is not positive.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setHttpProxy(@NonNull ProxyInfo proxyInfo)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets an HTTP proxy for the VPN network. This proxy is only a recommendation\n         * and it is possible that some apps will ignore it.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder addAddress(@NonNull InetAddress address, int prefixLength)",
    "returnType" : "Builder",
    "comment" : "\n         * Add a network address to the VPN interface. Both IPv4 and IPv6\n         * addresses are supported. At least one address must be set before\n         * calling {@link #establish}.\n         *\n         * Adding an address implicitly allows traffic from that address family\n         * (i.e., IPv4 or IPv6) to be routed over the VPN. @see #allowFamily\n         *\n         * @throws IllegalArgumentException if the address is invalid.\n         ",
    "links" : [ "#establish" ]
  }, {
    "name" : "public Builder addAddress(@NonNull String address, int prefixLength)",
    "returnType" : "Builder",
    "comment" : "\n         * Convenience method to add a network address to the VPN interface\n         * using a numeric address string. See {@link InetAddress} for the\n         * definitions of numeric address formats.\n         *\n         * Adding an address implicitly allows traffic from that address family\n         * (i.e., IPv4 or IPv6) to be routed over the VPN. @see #allowFamily\n         *\n         * @throws IllegalArgumentException if the address is invalid.\n         * @see #addAddress(InetAddress, int)\n         ",
    "links" : [ "InetAddress" ]
  }, {
    "name" : "public Builder addRoute(@NonNull InetAddress address, int prefixLength)",
    "returnType" : "Builder",
    "comment" : "\n         * Add a network route to the VPN interface. Both IPv4 and IPv6\n         * routes are supported.\n         *\n         * Adding a route implicitly allows traffic from that address family\n         * (i.e., IPv4 or IPv6) to be routed over the VPN. @see #allowFamily\n         *\n         * @throws IllegalArgumentException if the route is invalid.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder addRoute(@NonNull String address, int prefixLength)",
    "returnType" : "Builder",
    "comment" : "\n         * Convenience method to add a network route to the VPN interface\n         * using a numeric address string. See {@link InetAddress} for the\n         * definitions of numeric address formats.\n         *\n         * Adding a route implicitly allows traffic from that address family\n         * (i.e., IPv4 or IPv6) to be routed over the VPN. @see #allowFamily\n         *\n         * @throws IllegalArgumentException if the route is invalid.\n         * @see #addRoute(InetAddress, int)\n         ",
    "links" : [ "InetAddress" ]
  }, {
    "name" : "public Builder addDnsServer(@NonNull InetAddress address)",
    "returnType" : "Builder",
    "comment" : "\n         * Add a DNS server to the VPN connection. Both IPv4 and IPv6\n         * addresses are supported. If none is set, the DNS servers of\n         * the default network will be used.\n         *\n         * Adding a server implicitly allows traffic from that address family\n         * (i.e., IPv4 or IPv6) to be routed over the VPN. @see #allowFamily\n         *\n         * @throws IllegalArgumentException if the address is invalid.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder addDnsServer(@NonNull String address)",
    "returnType" : "Builder",
    "comment" : "\n         * Convenience method to add a DNS server to the VPN connection\n         * using a numeric address string. See {@link InetAddress} for the\n         * definitions of numeric address formats.\n         *\n         * Adding a server implicitly allows traffic from that address family\n         * (i.e., IPv4 or IPv6) to be routed over the VPN. @see #allowFamily\n         *\n         * @throws IllegalArgumentException if the address is invalid.\n         * @see #addDnsServer(InetAddress)\n         ",
    "links" : [ "InetAddress" ]
  }, {
    "name" : "public Builder addSearchDomain(@NonNull String domain)",
    "returnType" : "Builder",
    "comment" : "\n         * Add a search domain to the DNS resolver.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder allowFamily(int family)",
    "returnType" : "Builder",
    "comment" : "\n         * Allows traffic from the specified address family.\n         *\n         * By default, if no address, route or DNS server of a specific family (IPv4 or IPv6) is\n         * added to this VPN, then all outgoing traffic of that family is blocked. If any address,\n         * route or DNS server is added, that family is allowed.\n         *\n         * This method allows an address family to be unblocked even without adding an address,\n         * route or DNS server of that family. Traffic of that family will then typically\n         * fall-through to the underlying network if it's supported.\n         *\n         * {@code family} must be either {@code AF_INET} (for IPv4) or {@code AF_INET6} (for IPv6).\n         * {@link IllegalArgumentException} is thrown if it's neither.\n         *\n         * @param family The address family ({@code AF_INET} or {@code AF_INET6}) to allow.\n         *\n         * @return this {@link Builder} object to facilitate chaining of method calls.\n         ",
    "links" : [ "IllegalArgumentException", "Builder" ]
  }, {
    "name" : "private void verifyApp(String packageName) throws PackageManager.NameNotFoundException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Builder addAllowedApplication(@NonNull String packageName) throws PackageManager.NameNotFoundException",
    "returnType" : "Builder",
    "comment" : "\n         * Adds an application that's allowed to access the VPN connection.\n         *\n         * If this method is called at least once, only applications added through this method (and\n         * no others) are allowed access. Else (if this method is never called), all applications\n         * are allowed by default.  If some applications are added, other, un-added applications\n         * will use networking as if the VPN wasn't running.\n         *\n         * A {@link Builder} may have only a set of allowed applications OR a set of disallowed\n         * ones, but not both. Calling this method after {@link #addDisallowedApplication} has\n         * already been called, or vice versa, will throw an {@link UnsupportedOperationException}.\n         *\n         * {@code packageName} must be the canonical name of a currently installed application.\n         * {@link PackageManager.NameNotFoundException} is thrown if there's no such application.\n         *\n         * @throws PackageManager.NameNotFoundException If the application isn't installed.\n         *\n         * @param packageName The full name (e.g.: \"com.google.apps.contacts\") of an application.\n         *\n         * @return this {@link Builder} object to facilitate chaining method calls.\n         ",
    "links" : [ "Builder", "#addDisallowedApplication", "UnsupportedOperationException", "PackageManager.NameNotFoundException", "Builder" ]
  }, {
    "name" : "public Builder addDisallowedApplication(@NonNull String packageName) throws PackageManager.NameNotFoundException",
    "returnType" : "Builder",
    "comment" : "\n         * Adds an application that's denied access to the VPN connection.\n         *\n         * By default, all applications are allowed access, except for those denied through this\n         * method.  Denied applications will use networking as if the VPN wasn't running.\n         *\n         * A {@link Builder} may have only a set of allowed applications OR a set of disallowed\n         * ones, but not both. Calling this method after {@link #addAllowedApplication} has already\n         * been called, or vice versa, will throw an {@link UnsupportedOperationException}.\n         *\n         * {@code packageName} must be the canonical name of a currently installed application.\n         * {@link PackageManager.NameNotFoundException} is thrown if there's no such application.\n         *\n         * @throws PackageManager.NameNotFoundException If the application isn't installed.\n         *\n         * @param packageName The full name (e.g.: \"com.google.apps.contacts\") of an application.\n         *\n         * @return this {@link Builder} object to facilitate chaining method calls.\n         ",
    "links" : [ "Builder", "#addAllowedApplication", "UnsupportedOperationException", "PackageManager.NameNotFoundException", "Builder" ]
  }, {
    "name" : "public Builder allowBypass()",
    "returnType" : "Builder",
    "comment" : "\n         * Allows all apps to bypass this VPN connection.\n         *\n         * By default, all traffic from apps is forwarded through the VPN interface and it is not\n         * possible for apps to side-step the VPN. If this method is called, apps may use methods\n         * such as {@link ConnectivityManager#bindProcessToNetwork} to instead send/receive\n         * directly over the underlying network or any other network they have permissions for.\n         *\n         * @return this {@link Builder} object to facilitate chaining of method calls.\n         ",
    "links" : [ "ConnectivityManager#bindProcessToNetwork", "Builder" ]
  }, {
    "name" : "public Builder setBlocking(boolean blocking)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the VPN interface's file descriptor to be in blocking/non-blocking mode.\n         *\n         * By default, the file descriptor returned by {@link #establish} is non-blocking.\n         *\n         * @param blocking True to put the descriptor into blocking mode; false for non-blocking.\n         *\n         * @return this {@link Builder} object to facilitate chaining method calls.\n         ",
    "links" : [ "#establish", "Builder" ]
  }, {
    "name" : "public Builder setUnderlyingNetworks(@Nullable Network[] networks)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the underlying networks used by the VPN for its upstream connections.\n         *\n         * @see VpnService#setUnderlyingNetworks\n         *\n         * @param networks An array of networks the VPN uses to tunnel traffic to/from its servers.\n         *\n         * @return this {@link Builder} object to facilitate chaining method calls.\n         ",
    "links" : [ "Builder" ]
  }, {
    "name" : "public Builder setMetered(boolean isMetered)",
    "returnType" : "Builder",
    "comment" : "\n         * Marks the VPN network as metered. A VPN network is classified as metered when the user is\n         * sensitive to heavy data usage due to monetary costs and/or data limitations. In such\n         * cases, you should set this to {@code true} so that apps on the system can avoid doing\n         * large data transfers. Otherwise, set this to {@code false}. Doing so would cause VPN\n         * network to inherit its meteredness from its underlying networks.\n         *\n         * <p>VPN apps targeting {@link android.os.Build.VERSION_CODES#Q} or above will be\n         * considered metered by default.\n         *\n         * @param isMetered {@code true} if VPN network should be treated as metered regardless of\n         *     underlying network meteredness\n         * @return this {@link Builder} object to facilitate chaining method calls\n         * @see #setUnderlyingNetworks(Network[])\n         * @see ConnectivityManager#isActiveNetworkMetered()\n         ",
    "links" : [ "android.os.Build.VERSION_CODES#Q", "Builder" ]
  }, {
    "name" : "public ParcelFileDescriptor establish()",
    "returnType" : "ParcelFileDescriptor",
    "comment" : "\n         * Create a VPN interface using the parameters supplied to this\n         * builder. The interface works on IP packets, and a file descriptor\n         * is returned for the application to access them. Each read\n         * retrieves an outgoing packet which was routed to the interface.\n         * Each write injects an incoming packet just like it was received\n         * from the interface. The file descriptor is put into non-blocking\n         * mode by default to avoid blocking Java threads. To use the file\n         * descriptor completely in native space, see\n         * {@link ParcelFileDescriptor#detachFd()}. The application MUST\n         * close the file descriptor when the VPN connection is terminated.\n         * The VPN interface will be removed and the network will be\n         * restored by the system automatically.\n         *\n         * <p>To avoid conflicts, there can be only one active VPN interface\n         * at the same time. Usually network parameters are never changed\n         * during the lifetime of a VPN connection. It is also common for an\n         * application to create a new file descriptor after closing the\n         * previous one. However, it is rare but not impossible to have two\n         * interfaces while performing a seamless handover. In this case, the\n         * old interface will be deactivated when the new one is created\n         * successfully. Both file descriptors are valid but now outgoing\n         * packets will be routed to the new interface. Therefore, after\n         * draining the old file descriptor, the application MUST close it\n         * and start using the new file descriptor. If the new interface\n         * cannot be created, the existing interface and its file descriptor\n         * remain untouched.\n         *\n         * <p>An exception will be thrown if the interface cannot be created\n         * for any reason. However, this method returns {@code null} if the\n         * application is not prepared or is revoked. This helps solve\n         * possible race conditions between other VPN applications.\n         *\n         * @return {@link ParcelFileDescriptor} of the VPN interface, or\n         *         {@code null} if the application is not prepared.\n         * @throws IllegalArgumentException if a parameter is not accepted\n         *         by the operating system.\n         * @throws IllegalStateException if a parameter cannot be applied\n         *         by the operating system.\n         * @throws SecurityException if the service is not properly declared\n         *         in {@code AndroidManifest.xml}.\n         * @see VpnService\n         ",
    "links" : [ "ParcelFileDescriptor#detachFd", "ParcelFileDescriptor" ]
  } ],
  "variableNames" : [ "mConfig", "mAddresses", "mRoutes" ],
  "methodNames" : [ "public Builder setSession(@NonNull String session)", "public Builder setConfigureIntent(@NonNull PendingIntent intent)", "public Builder setMtu(int mtu)", "public Builder setHttpProxy(@NonNull ProxyInfo proxyInfo)", "public Builder addAddress(@NonNull InetAddress address, int prefixLength)", "public Builder addAddress(@NonNull String address, int prefixLength)", "public Builder addRoute(@NonNull InetAddress address, int prefixLength)", "public Builder addRoute(@NonNull String address, int prefixLength)", "public Builder addDnsServer(@NonNull InetAddress address)", "public Builder addDnsServer(@NonNull String address)", "public Builder addSearchDomain(@NonNull String domain)", "public Builder allowFamily(int family)", "private void verifyApp(String packageName) throws PackageManager.NameNotFoundException", "public Builder addAllowedApplication(@NonNull String packageName) throws PackageManager.NameNotFoundException", "public Builder addDisallowedApplication(@NonNull String packageName) throws PackageManager.NameNotFoundException", "public Builder allowBypass()", "public Builder setBlocking(boolean blocking)", "public Builder setUnderlyingNetworks(@Nullable Network[] networks)", "public Builder setMetered(boolean isMetered)", "public ParcelFileDescriptor establish()" ]
}