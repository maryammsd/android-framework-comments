{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/app/WallpaperInfo.java",
  "packageName" : "android.app",
  "className" : "WallpaperInfo",
  "comment" : "\n * This class is used to specify meta information of a wallpaper service.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "ResolveInfo",
    "comment" : "\n     * The Service that implements this wallpaper component.\n     ",
    "links" : [ ]
  }, {
    "name" : "mSettingsActivityName",
    "type" : "String",
    "comment" : "\n     * The wallpaper setting activity's name, to\n     * launch the setting activity of this wallpaper.\n     ",
    "links" : [ ]
  }, {
    "name" : "mThumbnailResource",
    "type" : "int",
    "comment" : "\n     * Resource identifier for this wallpaper's thumbnail image.\n     ",
    "links" : [ ]
  }, {
    "name" : "mAuthorResource",
    "type" : "int",
    "comment" : "\n     * Resource identifier for a string indicating the author of the wallpaper.\n     ",
    "links" : [ ]
  }, {
    "name" : "mDescriptionResource",
    "type" : "int",
    "comment" : "\n     * Resource identifier for a string containing a short description of the wallpaper.\n     ",
    "links" : [ ]
  }, {
    "name" : "mContextUriResource",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContextDescriptionResource",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mShowMetadataInPreview",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSupportsAmbientMode",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSettingsSliceUri",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSupportMultipleDisplays",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<WallpaperInfo>",
    "comment" : "\n     * Used to make this class parcelable.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String getPackageName()",
    "returnType" : "String",
    "comment" : "\n     * Return the .apk package that implements this wallpaper.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getServiceName()",
    "returnType" : "String",
    "comment" : "\n     * Return the class name of the service component that implements\n     * this wallpaper.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ServiceInfo getServiceInfo()",
    "returnType" : "ServiceInfo",
    "comment" : "\n     * Return the raw information about the Service implementing this\n     * wallpaper.  Do not modify the returned object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ComponentName getComponent()",
    "returnType" : "ComponentName",
    "comment" : "\n     * Return the component of the service that implements this wallpaper.\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence loadLabel(PackageManager pm)",
    "returnType" : "CharSequence",
    "comment" : "\n     * Load the user-displayed label for this wallpaper.\n     * \n     * @param pm Supply a PackageManager used to load the wallpaper's\n     * resources.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Drawable loadIcon(PackageManager pm)",
    "returnType" : "Drawable",
    "comment" : "\n     * Load the user-displayed icon for this wallpaper.\n     * \n     * @param pm Supply a PackageManager used to load the wallpaper's\n     * resources.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Drawable loadThumbnail(PackageManager pm)",
    "returnType" : "Drawable",
    "comment" : "\n     * Load the thumbnail image for this wallpaper.\n     * \n     * @param pm Supply a PackageManager used to load the wallpaper's\n     * resources.\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence loadAuthor(PackageManager pm) throws NotFoundException",
    "returnType" : "CharSequence",
    "comment" : "\n     * Return a string indicating the author(s) of this wallpaper.\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence loadDescription(PackageManager pm) throws NotFoundException",
    "returnType" : "CharSequence",
    "comment" : "\n     * Return a brief summary of this wallpaper's behavior.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Uri loadContextUri(PackageManager pm) throws NotFoundException",
    "returnType" : "Uri",
    "comment" : "\n     * Returns an URI that specifies a link for further context about this wallpaper.\n     *\n     * @param pm An instance of {@link PackageManager} to retrieve the URI.\n     * @return The URI.\n     ",
    "links" : [ "android.content.pm.PackageManager" ]
  }, {
    "name" : "public CharSequence loadContextDescription(PackageManager pm) throws NotFoundException",
    "returnType" : "CharSequence",
    "comment" : "\n     * Retrieves a title of the URI that specifies a link for further context about this wallpaper.\n     *\n     * @param pm An instance of {@link PackageManager} to retrieve the title.\n     * @return The title.\n     ",
    "links" : [ "android.content.pm.PackageManager" ]
  }, {
    "name" : "public boolean getShowMetadataInPreview()",
    "returnType" : "boolean",
    "comment" : "\n     * Queries whether any metadata should be shown when previewing the wallpaper. If this value is\n     * set to true, any component that shows a preview of this live wallpaper should also show\n     * accompanying information like {@link #loadLabel},\n     * {@link #loadDescription}, {@link #loadAuthor} and\n     * {@link #loadContextDescription(PackageManager)}, so the user gets to know further information\n     * about this wallpaper.\n     *\n     * @return Whether any metadata should be shown when previewing the wallpaper.\n     ",
    "links" : [ "#loadLabel", "#loadDescription", "#loadContextDescription(PackageManager)", "#loadAuthor" ]
  }, {
    "name" : "public boolean supportsAmbientMode()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether a wallpaper was optimized or not for ambient mode and can be drawn in there.\n     *\n     * @see WallpaperService.Engine#onAmbientModeChanged(boolean, boolean)\n     * @see WallpaperService.Engine#isInAmbientMode()\n     * @return {@code true} if wallpaper can draw when in ambient mode.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getSettingsActivity()",
    "returnType" : "String",
    "comment" : "\n     * Return the class name of an activity that provides a settings UI for\n     * the wallpaper.  You can launch this activity be starting it with\n     * an {@link android.content.Intent} whose action is MAIN and with an\n     * explicit {@link android.content.ComponentName}\n     * composed of {@link #getPackageName} and the class name returned here.\n     * \n     * <p>{@code null} will be returned if there is no settings activity associated\n     * with the wallpaper.\n     ",
    "links" : [ "android.content.ComponentName", "android.content.Intent", "#getPackageName" ]
  }, {
    "name" : "public Uri getSettingsSliceUri()",
    "returnType" : "Uri",
    "comment" : "\n     * Returns an URI that provides a settings {@link Slice} for this wallpaper.\n     * The wallpaper should implement a SliceProvider associated with this URI.\n     * The system will display the Slice in the customization section while previewing the live\n     * wallpaper. Because this URI is accessible to other apps, it is recommended to protect it\n     * with the android.permission.BIND_WALLPAPER permission.\n     *\n     * <p>{@code null} will be returned if there is no settings Slice URI associated\n     * with the wallpaper.\n     *\n     * @return The URI.\n     ",
    "links" : [ "android.app.slice.Slice" ]
  }, {
    "name" : "public boolean supportsMultipleDisplays()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether this wallpaper service can support multiple engines to render on each surface\n     * independently. An example use case is a multi-display set-up where the wallpaper service can\n     * render surfaces to each of the connected displays.\n     * <p>\n     * This corresponds to the value {@link android.R.styleable#Wallpaper_supportsMultipleDisplays}\n     * in the XML description of the wallpaper.\n     * <p>\n     * The default value is {@code false}.\n     *\n     * @see WallpaperService#onCreateEngine()\n     * @see WallpaperService.Engine#onCreate(SurfaceHolder)\n     * @return {@code true} if multiple engines can render independently on each surface.\n     *\n     * @attr ref android.R.styleable#Wallpaper_supportsMultipleDisplays\n     ",
    "links" : [ "android.R.styleable#Wallpaper_supportsMultipleDisplays" ]
  }, {
    "name" : "public void dump(Printer pw, String prefix)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "\n     * Used to package this object into a {@link Parcel}.\n     * \n     * @param dest The {@link Parcel} to be written.\n     * @param flags The flags used for parceling.\n     ",
    "links" : [ "android.os.Parcel" ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "mService", "mSettingsActivityName", "mThumbnailResource", "mAuthorResource", "mDescriptionResource", "mContextUriResource", "mContextDescriptionResource", "mShowMetadataInPreview", "mSupportsAmbientMode", "mSettingsSliceUri", "mSupportMultipleDisplays", "CREATOR" ],
  "methodNames" : [ "public String getPackageName()", "public String getServiceName()", "public ServiceInfo getServiceInfo()", "public ComponentName getComponent()", "public CharSequence loadLabel(PackageManager pm)", "public Drawable loadIcon(PackageManager pm)", "public Drawable loadThumbnail(PackageManager pm)", "public CharSequence loadAuthor(PackageManager pm) throws NotFoundException", "public CharSequence loadDescription(PackageManager pm) throws NotFoundException", "public Uri loadContextUri(PackageManager pm) throws NotFoundException", "public CharSequence loadContextDescription(PackageManager pm) throws NotFoundException", "public boolean getShowMetadataInPreview()", "public boolean supportsAmbientMode()", "public String getSettingsActivity()", "public Uri getSettingsSliceUri()", "public boolean supportsMultipleDisplays()", "public void dump(Printer pw, String prefix)", "public String toString()", "public void writeToParcel(Parcel dest, int flags)", "public int describeContents()" ]
}