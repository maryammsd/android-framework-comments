{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/personname/PersonNameFormatterImpl.java",
  "packageName" : "android.icu.impl.personname",
  "className" : "PersonNameFormatterImpl",
  "comment" : "\n * Actual implementation class for PersonNameFormatter.\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "locale",
    "type" : "Locale",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "gnFirstPatterns",
    "type" : "PersonNamePattern[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "snFirstPatterns",
    "type" : "PersonNamePattern[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "gnFirstLocales",
    "type" : "Set<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "snFirstLocales",
    "type" : "Set<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "initialPattern",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "initialSequencePattern",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "capitalizeSurname",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "foreignSpaceReplacement",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "nativeSpaceReplacement",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "length",
    "type" : "PersonNameFormatter.Length",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "usage",
    "type" : "PersonNameFormatter.Usage",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "formality",
    "type" : "PersonNameFormatter.Formality",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "displayOrder",
    "type" : "PersonNameFormatter.DisplayOrder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NON_DEFAULT_SCRIPTS",
    "type" : "Set<String>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String formatToString(PersonName name)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Locale getLocale()",
    "returnType" : "Locale",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public PersonNameFormatter.Length getLength()",
    "returnType" : "PersonNameFormatter.Length",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public PersonNameFormatter.Usage getUsage()",
    "returnType" : "PersonNameFormatter.Usage",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public PersonNameFormatter.Formality getFormality()",
    "returnType" : "PersonNameFormatter.Formality",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public PersonNameFormatter.DisplayOrder getDisplayOrder()",
    "returnType" : "PersonNameFormatter.DisplayOrder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean getSurnameAllCaps()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getInitialPattern()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getInitialSequencePattern()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean shouldCapitalizeSurname()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String[] asStringArray(ICUResourceBundle resource)",
    "returnType" : "String[]",
    "comment" : "\n     * Returns the value of the resource, as a string array.\n     * @param resource An ICUResourceBundle of type STRING or ARRAY.  If ARRAY, this function just returns it\n     *                 as a string array.  If STRING, it returns a one-element array containing that string.\n     * @return The resource's value, as an array of Strings.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean nameIsGnFirst(PersonName name)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the field order to use when formatting this name, taking into account the name's preferredOrder\n     * field, as well as the name and formatter's respective locales.\n     * @param name The name to be formatted.\n     * @return If true, use given-first order to format the name; if false, use surname-first order.\n     ",
    "links" : [ ]
  }, {
    "name" : "private PersonNamePattern getBestPattern(PersonNamePattern[] patterns, PersonName name)",
    "returnType" : "PersonNamePattern",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String getNameScript(PersonName name)",
    "returnType" : "String",
    "comment" : "\n     * Internal function to figure out the name's script by examining its characters.\n     * @param name The name for which we need the script\n     * @return The four-letter script code for the name.\n     ",
    "links" : [ ]
  }, {
    "name" : "private Locale newLocaleWithScript(Locale oldLocale, String scriptCode, String regionCode)",
    "returnType" : "Locale",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Locale getNameLocale(PersonName name)",
    "returnType" : "Locale",
    "comment" : "\n     * Internal function to figure out the name's locale when the name doesn't specify it.\n     * (Note that this code assumes that if the locale is specified, it includes a language\n     * code.)\n     * @param name The name for which we need the locale\n     * @return The name's (real or guessed) locale.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean nameScriptMatchesLocale(String nameScriptID, Locale formatterLocale)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the characters in the name match one of the scripts for the specified locale.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean formattingLocaleExists(Locale formattingLocale)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if there's actual name formatting data for the specified locale (i.e., when\n     * we fetch the resource data, we don't fall back to root).\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean localesMatch(Locale nameLocale, Locale formatterLocale)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the two locales should be considered equivalent for space-replacement purposes.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public String toString()", "public String formatToString(PersonName name)", "public Locale getLocale()", "public PersonNameFormatter.Length getLength()", "public PersonNameFormatter.Usage getUsage()", "public PersonNameFormatter.Formality getFormality()", "public PersonNameFormatter.DisplayOrder getDisplayOrder()", "public boolean getSurnameAllCaps()", "public String getInitialPattern()", "public String getInitialSequencePattern()", "public boolean shouldCapitalizeSurname()", "private String[] asStringArray(ICUResourceBundle resource)", "private boolean nameIsGnFirst(PersonName name)", "private PersonNamePattern getBestPattern(PersonNamePattern[] patterns, PersonName name)", "private String getNameScript(PersonName name)", "private Locale newLocaleWithScript(Locale oldLocale, String scriptCode, String regionCode)", "private Locale getNameLocale(PersonName name)", "private boolean nameScriptMatchesLocale(String nameScriptID, Locale formatterLocale)", "private boolean formattingLocaleExists(Locale formattingLocale)", "private boolean localesMatch(Locale nameLocale, Locale formatterLocale)" ],
  "variableNames" : [ "locale", "gnFirstPatterns", "snFirstPatterns", "gnFirstLocales", "snFirstLocales", "initialPattern", "initialSequencePattern", "capitalizeSurname", "foreignSpaceReplacement", "nativeSpaceReplacement", "length", "usage", "formality", "displayOrder", "NON_DEFAULT_SCRIPTS" ]
}