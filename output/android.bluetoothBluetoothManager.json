{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/bluetooth/BluetoothManager.java",
  "packageName" : "android.bluetooth",
  "className" : "BluetoothManager",
  "comment" : "\n * High level manager used to obtain an instance of an {@link BluetoothAdapter}\n * and to conduct overall Bluetooth Management.\n * <p>\n * Use {@link android.content.Context#getSystemService(java.lang.String)}\n * with {@link Context#BLUETOOTH_SERVICE} to create an {@link BluetoothManager},\n * then call {@link #getAdapter} to obtain the {@link BluetoothAdapter}.\n * </p>\n * <div class=\"special reference\">\n * <h3>Developer Guides</h3>\n * <p>\n * For more information about using BLUETOOTH, read the <a href=\n * \"{@docRoot}guide/topics/connectivity/bluetooth.html\">Bluetooth</a> developer\n * guide.\n * </p>\n * </div>\n *\n * @see Context#getSystemService\n * @see BluetoothAdapter#getDefaultAdapter()\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAdapter",
    "type" : "BluetoothAdapter",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public BluetoothAdapter getAdapter()",
    "returnType" : "BluetoothAdapter",
    "comment" : "\n     * Get the BLUETOOTH Adapter for this device.\n     *\n     * @return the BLUETOOTH Adapter\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getConnectionState(BluetoothDevice device, int profile)",
    "returnType" : "int",
    "comment" : "\n     * Get the current connection state of the profile to the remote device.\n     *\n     * <p>This is not specific to any application configuration but represents\n     * the connection state of the local Bluetooth adapter for certain profile.\n     * This can be used by applications like status bar which would just like\n     * to know the state of Bluetooth.\n     *\n     * @param device Remote bluetooth device.\n     * @param profile GATT or GATT_SERVER\n     * @return State of the profile connection. One of {@link BluetoothProfile#STATE_CONNECTED},\n     * {@link BluetoothProfile#STATE_CONNECTING}, {@link BluetoothProfile#STATE_DISCONNECTED},\n     * {@link BluetoothProfile#STATE_DISCONNECTING}\n     ",
    "links" : [ "BluetoothProfile#STATE_CONNECTED", "BluetoothProfile#STATE_CONNECTING", "BluetoothProfile#STATE_DISCONNECTED", "BluetoothProfile#STATE_DISCONNECTING" ]
  }, {
    "name" : "public List<BluetoothDevice> getConnectedDevices(int profile)",
    "returnType" : "List<BluetoothDevice>",
    "comment" : "\n     * Get connected devices for the specified profile.\n     *\n     * <p> Return the set of devices which are in state {@link BluetoothProfile#STATE_CONNECTED}\n     *\n     * <p>This is not specific to any application configuration but represents\n     * the connection state of Bluetooth for this profile.\n     * This can be used by applications like status bar which would just like\n     * to know the state of Bluetooth.\n     *\n     * @param profile GATT or GATT_SERVER\n     * @return List of devices. The list will be empty on error.\n     ",
    "links" : [ "BluetoothProfile#STATE_CONNECTED" ]
  }, {
    "name" : "public List<BluetoothDevice> getDevicesMatchingConnectionStates(int profile, int[] states)",
    "returnType" : "List<BluetoothDevice>",
    "comment" : "\n     * Get a list of devices that match any of the given connection\n     * states.\n     *\n     * <p> If none of the devices match any of the given states,\n     * an empty list will be returned.\n     *\n     * <p>This is not specific to any application configuration but represents\n     * the connection state of the local Bluetooth adapter for this profile.\n     * This can be used by applications like status bar which would just like\n     * to know the state of the local adapter.\n     *\n     * @param profile GATT or GATT_SERVER\n     * @param states Array of states. States can be one of {@link BluetoothProfile#STATE_CONNECTED},\n     * {@link BluetoothProfile#STATE_CONNECTING}, {@link BluetoothProfile#STATE_DISCONNECTED},\n     * {@link BluetoothProfile#STATE_DISCONNECTING},\n     * @return List of devices. The list will be empty on error.\n     ",
    "links" : [ "BluetoothProfile#STATE_CONNECTED", "BluetoothProfile#STATE_CONNECTING", "BluetoothProfile#STATE_DISCONNECTED", "BluetoothProfile#STATE_DISCONNECTING" ]
  }, {
    "name" : "public BluetoothGattServer openGattServer(Context context, BluetoothGattServerCallback callback)",
    "returnType" : "BluetoothGattServer",
    "comment" : "\n     * Open a GATT Server\n     * The callback is used to deliver results to Caller, such as connection status as well\n     * as the results of any other GATT server operations.\n     * The method returns a BluetoothGattServer instance. You can use BluetoothGattServer\n     * to conduct GATT server operations.\n     *\n     * @param context App context\n     * @param callback GATT server callback handler that will receive asynchronous callbacks.\n     * @return BluetoothGattServer instance\n     ",
    "links" : [ ]
  }, {
    "name" : "public BluetoothGattServer openGattServer(Context context, BluetoothGattServerCallback callback, int transport)",
    "returnType" : "BluetoothGattServer",
    "comment" : "\n     * Open a GATT Server\n     * The callback is used to deliver results to Caller, such as connection status as well\n     * as the results of any other GATT server operations.\n     * The method returns a BluetoothGattServer instance. You can use BluetoothGattServer\n     * to conduct GATT server operations.\n     *\n     * @param context App context\n     * @param callback GATT server callback handler that will receive asynchronous callbacks.\n     * @param transport preferred transport for GATT connections to remote dual-mode devices {@link\n     * BluetoothDevice#TRANSPORT_AUTO} or {@link BluetoothDevice#TRANSPORT_BREDR} or {@link\n     * BluetoothDevice#TRANSPORT_LE}\n     * @return BluetoothGattServer instance\n     * @hide\n     ",
    "links" : [ "BluetoothDevice#TRANSPORT_BREDR" ]
  } ],
  "variableNames" : [ "TAG", "DBG", "mAdapter" ],
  "methodNames" : [ "public BluetoothAdapter getAdapter()", "public int getConnectionState(BluetoothDevice device, int profile)", "public List<BluetoothDevice> getConnectedDevices(int profile)", "public List<BluetoothDevice> getDevicesMatchingConnectionStates(int profile, int[] states)", "public BluetoothGattServer openGattServer(Context context, BluetoothGattServerCallback callback)", "public BluetoothGattServer openGattServer(Context context, BluetoothGattServerCallback callback, int transport)" ]
}