{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/graphics/Paint_Delegate.java",
  "packageName" : "android.graphics",
  "className" : "Paint_Delegate",
  "comment" : "\n * Delegate implementing the native methods of android.graphics.Paint\n *\n * Through the layoutlib_create tool, the original native methods of Paint have been replaced\n * by calls to methods of the same name in this delegate class.\n *\n * This class behaves like the original native implementation, but in Java, keeping previously\n * native data into its own objects and mapping them to int that are sent back and forth between\n * it and the original Paint class.\n *\n * @see DelegateManager\n *\n ",
  "variables" : [ {
    "name" : "DEFAULT_TEXT_SIZE",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_TEXT_SCALE_X",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_TEXT_SKEW_X",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sManager",
    "type" : "DelegateManager<Paint_Delegate>",
    "comment" : " ---- delegate manager ----",
    "links" : [ ]
  }, {
    "name" : "sFinalizer",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFonts",
    "type" : "List<FontInfo>",
    "comment" : " This list can contain null elements.",
    "links" : [ ]
  }, {
    "name" : "mFlags",
    "type" : "int",
    "comment" : " ---- delegate data ----",
    "links" : [ ]
  }, {
    "name" : "mColor",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStyle",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCap",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mJoin",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTextAlign",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTypeface",
    "type" : "Typeface_Delegate",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStrokeWidth",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStrokeMiter",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTextSize",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTextScaleX",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTextSkewX",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHintingMode",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStartHyphenEdit",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEndHyphenEdit",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLetterSpacing",
    "type" : "float",
    "comment" : " not used in actual text rendering.",
    "links" : [ ]
  }, {
    "name" : "mWordSpacing",
    "type" : "float",
    "comment" : " not used in actual text rendering.",
    "links" : [ ]
  }, {
    "name" : "mFontVariant",
    "type" : "FontVariant",
    "comment" : " Variant of the font. A paint's variant can only be compact or elegant.",
    "links" : [ ]
  }, {
    "name" : "mPorterDuffMode",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mColorFilter",
    "type" : "ColorFilter_Delegate",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mShader",
    "type" : "Shader_Delegate",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPathEffect",
    "type" : "PathEffect_Delegate",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaskFilter",
    "type" : "MaskFilter_Delegate",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLocale",
    "type" : "Locale",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static Paint_Delegate getDelegate(long native_paint)",
    "returnType" : "Paint_Delegate",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<FontInfo> getFonts()",
    "returnType" : "List<FontInfo>",
    "comment" : "\n     * Returns the list of {@link Font} objects.\n     ",
    "links" : [ "Font" ]
  }, {
    "name" : "public boolean isAntiAliased()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isFilterBitmap()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getStyle()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getColor()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getAlpha()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setAlpha(int alpha)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getTextAlign()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public float getStrokeWidth()",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public float getJavaStrokeMiter()",
    "returnType" : "float",
    "comment" : "\n     * returns the value of stroke miter needed by the java api.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getJavaCap()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getJavaJoin()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Stroke getJavaStroke()",
    "returnType" : "Stroke",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getPorterDuffMode()",
    "returnType" : "int",
    "comment" : "\n     * Returns the {@link PorterDuff.Mode} as an int\n     ",
    "links" : [ "PorterDuff.Mode" ]
  }, {
    "name" : "public ColorFilter_Delegate getColorFilter()",
    "returnType" : "ColorFilter_Delegate",
    "comment" : "\n     * Returns the {@link ColorFilter} delegate or null if none have been set\n     *\n     * @return the delegate or null.\n     ",
    "links" : [ "ColorFilter" ]
  }, {
    "name" : "public void setColorFilter(long colorFilterPtr)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setShader(long shaderPtr)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Shader_Delegate getShader()",
    "returnType" : "Shader_Delegate",
    "comment" : "\n     * Returns the {@link Shader} delegate or null if none have been set\n     *\n     * @return the delegate or null.\n     ",
    "links" : [ "Shader" ]
  }, {
    "name" : "public MaskFilter_Delegate getMaskFilter()",
    "returnType" : "MaskFilter_Delegate",
    "comment" : "\n     * Returns the {@link MaskFilter} delegate or null if none have been set\n     *\n     * @return the delegate or null.\n     ",
    "links" : [ "MaskFilter" ]
  }, {
    "name" : " static int nGetFlags(long nativePaint)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nSetFlags(long nativePaint, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nSetFilterBitmap(long nativePaint, boolean filter)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static int nGetHinting(long nativePaint)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nSetHinting(long nativePaint, int mode)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nSetAntiAlias(long nativePaint, boolean aa)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nSetSubpixelText(long nativePaint, boolean subpixelText)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nSetUnderlineText(long nativePaint, boolean underlineText)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nSetStrikeThruText(long nativePaint, boolean strikeThruText)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nSetFakeBoldText(long nativePaint, boolean fakeBoldText)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nSetDither(long nativePaint, boolean dither)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nSetLinearText(long nativePaint, boolean linearText)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nSetColor(long paintPtr, long colorSpaceHandle, long color)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nSetColor(long paintPtr, int color)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nSetAlpha(long nativePaint, int a)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static float nGetStrokeWidth(long nativePaint)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nSetStrokeWidth(long nativePaint, float width)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static float nGetStrokeMiter(long nativePaint)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nSetStrokeMiter(long nativePaint, float miter)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nSetShadowLayer(long paintPtr, float radius, float dx, float dy, long colorSpaceHandle, long shadowColor)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static boolean nHasShadowLayer(long paint)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static boolean nIsElegantTextHeight(long nativePaint)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nSetElegantTextHeight(long nativePaint, boolean elegant)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static float nGetTextSize(long nativePaint)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nSetTextSize(long nativePaint, float textSize)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static float nGetTextScaleX(long nativePaint)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nSetTextScaleX(long nativePaint, float scaleX)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static float nGetTextSkewX(long nativePaint)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nSetTextSkewX(long nativePaint, float skewX)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static float nAscent(long nativePaint)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static float nDescent(long nativePaint)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static float nGetFontMetrics(long nativePaint, FontMetrics metrics)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static int nGetFontMetricsInt(long nativePaint, FontMetricsInt fmi)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static int nBreakText(long nativePaint, char[] text, int index, int count, float maxWidth, int bidiFlags, float[] measuredWidth)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static int nBreakText(long nativePaint, String text, boolean measureForwards, float maxWidth, int bidiFlags, float[] measuredWidth)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static long nInit()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static long nInitWithPaint(long paint)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nReset(long native_object)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nSet(long native_dst, long native_src)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static int nGetStyle(long native_object)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nSetStyle(long native_object, int style)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static int nGetStrokeCap(long native_object)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nSetStrokeCap(long native_object, int cap)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static int nGetStrokeJoin(long native_object)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nSetStrokeJoin(long native_object, int join)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static boolean nGetFillPath(long native_object, long src, long dst)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static long nSetShader(long native_object, long shader)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static long nSetColorFilter(long native_object, long filter)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nSetXfermode(long native_object, int xfermode)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static long nSetPathEffect(long native_object, long effect)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static long nSetMaskFilter(long native_object, long maskfilter)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nSetTypeface(long native_object, long typeface)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static int nGetTextAlign(long native_object)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nSetTextAlign(long native_object, int align)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static int nSetTextLocales(long native_object, String locale)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nSetTextLocalesByMinikinLocaleListId(long paintPtr, int mMinikinLangListId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static float nGetTextAdvances(long native_object, char[] text, int index, int count, int contextIndex, int contextCount, int bidiFlags, float[] advances, int advancesIndex)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static float nGetTextAdvances(long native_object, String text, int start, int end, int contextStart, int contextEnd, int bidiFlags, float[] advances, int advancesIndex)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static int nGetTextRunCursor(Paint paint, long native_object, char[] text, int contextStart, int contextLength, int flags, int offset, int cursorOpt)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static int nGetTextRunCursor(Paint paint, long native_object, String text, int contextStart, int contextEnd, int flags, int offset, int cursorOpt)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nGetTextPath(long native_object, int bidiFlags, char[] text, int index, int count, float x, float y, long path)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nGetTextPath(long native_object, int bidiFlags, String text, int start, int end, float x, float y, long path)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nGetStringBounds(long nativePaint, String text, int start, int end, int bidiFlags, Rect bounds)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void nGetCharArrayBounds(long nativePaint, char[] text, int index, int count, int bidiFlags, Rect bounds)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static long nGetNativeFinalizer()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static float nGetLetterSpacing(long nativePaint)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nSetLetterSpacing(long nativePaint, float letterSpacing)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static float nGetWordSpacing(long nativePaint)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nSetWordSpacing(long nativePaint, float wordSpacing)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nSetFontFeatureSettings(long nativePaint, String settings)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static int nGetStartHyphenEdit(long nativePaint)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nSetStartHyphenEdit(long nativePaint, int hyphen)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static int nGetEndHyphenEdit(long nativePaint)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nSetEndHyphenEdit(long nativePaint, int hyphen)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static boolean nHasGlyph(long nativePaint, int bidiFlags, String string)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static float nGetRunAdvance(long nativePaint, @NonNull char[] text, int start, int end, int contextStart, int contextEnd, boolean isRtl, int offset)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static int nGetOffsetForAdvance(long nativePaint, char[] text, int start, int end, int contextStart, int contextEnd, boolean isRtl, float advance)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static float nGetUnderlinePosition(long paintPtr)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static float nGetUnderlineThickness(long paintPtr)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static float nGetStrikeThruPosition(long paintPtr)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static float nGetStrikeThruThickness(long paintPtr)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static boolean nEqualsForTextMeasurement(long leftPaintPtr, long rightPaintPtr)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void set(Paint_Delegate paint)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void reset()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void invalidateFonts()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static FontInfo getFontInfo(@Nullable Font font, float textSize, @Nullable AffineTransform transform)",
    "returnType" : "FontInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " RectF measureText(char[] text, int index, int count, float[] advances, int advancesIndex, int bidiFlags)",
    "returnType" : "RectF",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : " RectF measureText(char[] text, int index, int count, float[] advances, int advancesIndex, boolean isRtl)",
    "returnType" : "RectF",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : "private float getFontMetrics(FontMetrics metrics)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setTextLocale(String locale)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void setFlag(long nativePaint, int flagMask, boolean flagValue)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "DEFAULT_TEXT_SIZE", "DEFAULT_TEXT_SCALE_X", "DEFAULT_TEXT_SKEW_X", "sManager", "sFinalizer", "mFonts", "mFlags", "mColor", "mStyle", "mCap", "mJoin", "mTextAlign", "mTypeface", "mStrokeWidth", "mStrokeMiter", "mTextSize", "mTextScaleX", "mTextSkewX", "mHintingMode", "mStartHyphenEdit", "mEndHyphenEdit", "mLetterSpacing", "mWordSpacing", "mFontVariant", "mPorterDuffMode", "mColorFilter", "mShader", "mPathEffect", "mMaskFilter", "mLocale" ],
  "methodNames" : [ "public static Paint_Delegate getDelegate(long native_paint)", "public List<FontInfo> getFonts()", "public boolean isAntiAliased()", "public boolean isFilterBitmap()", "public int getStyle()", "public int getColor()", "public int getAlpha()", "public void setAlpha(int alpha)", "public int getTextAlign()", "public float getStrokeWidth()", "public float getJavaStrokeMiter()", "public int getJavaCap()", "public int getJavaJoin()", "public Stroke getJavaStroke()", "public int getPorterDuffMode()", "public ColorFilter_Delegate getColorFilter()", "public void setColorFilter(long colorFilterPtr)", "public void setShader(long shaderPtr)", "public Shader_Delegate getShader()", "public MaskFilter_Delegate getMaskFilter()", " static int nGetFlags(long nativePaint)", " static void nSetFlags(long nativePaint, int flags)", " static void nSetFilterBitmap(long nativePaint, boolean filter)", " static int nGetHinting(long nativePaint)", " static void nSetHinting(long nativePaint, int mode)", " static void nSetAntiAlias(long nativePaint, boolean aa)", " static void nSetSubpixelText(long nativePaint, boolean subpixelText)", " static void nSetUnderlineText(long nativePaint, boolean underlineText)", " static void nSetStrikeThruText(long nativePaint, boolean strikeThruText)", " static void nSetFakeBoldText(long nativePaint, boolean fakeBoldText)", " static void nSetDither(long nativePaint, boolean dither)", " static void nSetLinearText(long nativePaint, boolean linearText)", " static void nSetColor(long paintPtr, long colorSpaceHandle, long color)", " static void nSetColor(long paintPtr, int color)", " static void nSetAlpha(long nativePaint, int a)", " static float nGetStrokeWidth(long nativePaint)", " static void nSetStrokeWidth(long nativePaint, float width)", " static float nGetStrokeMiter(long nativePaint)", " static void nSetStrokeMiter(long nativePaint, float miter)", " static void nSetShadowLayer(long paintPtr, float radius, float dx, float dy, long colorSpaceHandle, long shadowColor)", " static boolean nHasShadowLayer(long paint)", " static boolean nIsElegantTextHeight(long nativePaint)", " static void nSetElegantTextHeight(long nativePaint, boolean elegant)", " static float nGetTextSize(long nativePaint)", " static void nSetTextSize(long nativePaint, float textSize)", " static float nGetTextScaleX(long nativePaint)", " static void nSetTextScaleX(long nativePaint, float scaleX)", " static float nGetTextSkewX(long nativePaint)", " static void nSetTextSkewX(long nativePaint, float skewX)", " static float nAscent(long nativePaint)", " static float nDescent(long nativePaint)", " static float nGetFontMetrics(long nativePaint, FontMetrics metrics)", " static int nGetFontMetricsInt(long nativePaint, FontMetricsInt fmi)", " static int nBreakText(long nativePaint, char[] text, int index, int count, float maxWidth, int bidiFlags, float[] measuredWidth)", " static int nBreakText(long nativePaint, String text, boolean measureForwards, float maxWidth, int bidiFlags, float[] measuredWidth)", " static long nInit()", " static long nInitWithPaint(long paint)", " static void nReset(long native_object)", " static void nSet(long native_dst, long native_src)", " static int nGetStyle(long native_object)", " static void nSetStyle(long native_object, int style)", " static int nGetStrokeCap(long native_object)", " static void nSetStrokeCap(long native_object, int cap)", " static int nGetStrokeJoin(long native_object)", " static void nSetStrokeJoin(long native_object, int join)", " static boolean nGetFillPath(long native_object, long src, long dst)", " static long nSetShader(long native_object, long shader)", " static long nSetColorFilter(long native_object, long filter)", " static void nSetXfermode(long native_object, int xfermode)", " static long nSetPathEffect(long native_object, long effect)", " static long nSetMaskFilter(long native_object, long maskfilter)", " static void nSetTypeface(long native_object, long typeface)", " static int nGetTextAlign(long native_object)", " static void nSetTextAlign(long native_object, int align)", " static int nSetTextLocales(long native_object, String locale)", " static void nSetTextLocalesByMinikinLocaleListId(long paintPtr, int mMinikinLangListId)", " static float nGetTextAdvances(long native_object, char[] text, int index, int count, int contextIndex, int contextCount, int bidiFlags, float[] advances, int advancesIndex)", " static float nGetTextAdvances(long native_object, String text, int start, int end, int contextStart, int contextEnd, int bidiFlags, float[] advances, int advancesIndex)", " static int nGetTextRunCursor(Paint paint, long native_object, char[] text, int contextStart, int contextLength, int flags, int offset, int cursorOpt)", " static int nGetTextRunCursor(Paint paint, long native_object, String text, int contextStart, int contextEnd, int flags, int offset, int cursorOpt)", " static void nGetTextPath(long native_object, int bidiFlags, char[] text, int index, int count, float x, float y, long path)", " static void nGetTextPath(long native_object, int bidiFlags, String text, int start, int end, float x, float y, long path)", " static void nGetStringBounds(long nativePaint, String text, int start, int end, int bidiFlags, Rect bounds)", "public static void nGetCharArrayBounds(long nativePaint, char[] text, int index, int count, int bidiFlags, Rect bounds)", " static long nGetNativeFinalizer()", " static float nGetLetterSpacing(long nativePaint)", " static void nSetLetterSpacing(long nativePaint, float letterSpacing)", " static float nGetWordSpacing(long nativePaint)", " static void nSetWordSpacing(long nativePaint, float wordSpacing)", " static void nSetFontFeatureSettings(long nativePaint, String settings)", " static int nGetStartHyphenEdit(long nativePaint)", " static void nSetStartHyphenEdit(long nativePaint, int hyphen)", " static int nGetEndHyphenEdit(long nativePaint)", " static void nSetEndHyphenEdit(long nativePaint, int hyphen)", " static boolean nHasGlyph(long nativePaint, int bidiFlags, String string)", " static float nGetRunAdvance(long nativePaint, @NonNull char[] text, int start, int end, int contextStart, int contextEnd, boolean isRtl, int offset)", " static int nGetOffsetForAdvance(long nativePaint, char[] text, int start, int end, int contextStart, int contextEnd, boolean isRtl, float advance)", " static float nGetUnderlinePosition(long paintPtr)", " static float nGetUnderlineThickness(long paintPtr)", " static float nGetStrikeThruPosition(long paintPtr)", " static float nGetStrikeThruThickness(long paintPtr)", " static boolean nEqualsForTextMeasurement(long leftPaintPtr, long rightPaintPtr)", "private void set(Paint_Delegate paint)", "private void reset()", "private void invalidateFonts()", "private static FontInfo getFontInfo(@Nullable Font font, float textSize, @Nullable AffineTransform transform)", " RectF measureText(char[] text, int index, int count, float[] advances, int advancesIndex, int bidiFlags)", " RectF measureText(char[] text, int index, int count, float[] advances, int advancesIndex, boolean isRtl)", "private float getFontMetrics(FontMetrics metrics)", "private void setTextLocale(String locale)", "private static void setFlag(long nativePaint, int flagMask, boolean flagValue)" ]
}