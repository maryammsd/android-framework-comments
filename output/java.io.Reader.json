{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/io/Reader.java",
  "packageName" : "java.io",
  "className" : "Reader",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "TRANSFER_BUFFER_SIZE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "lock",
    "type" : "Object",
    "comment" : "\n     * The object used to synchronize operations on this stream.  For\n     * efficiency, a character-stream object may use an object other than\n     * itself to protect critical sections.  A subclass should therefore use\n     * the object in this field rather than {@code this} or a synchronized\n     * method.\n     ",
    "links" : [ ]
  }, {
    "name" : "maxSkipBufferSize",
    "type" : "int",
    "comment" : " Maximum skip-buffer size ",
    "links" : [ ]
  }, {
    "name" : "skipBuffer",
    "type" : "char[]",
    "comment" : " Skip buffer, null until allocated ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static Reader nullReader()",
    "returnType" : "Reader",
    "comment" : "\n     * Returns a new {@code Reader} that reads no characters. The returned\n     * stream is initially open.  The stream is closed by calling the\n     * {@code close()} method.  Subsequent calls to {@code close()} have no\n     * effect.\n     *\n     * <p> While the stream is open, the {@code read()}, {@code read(char[])},\n     * {@code read(char[], int, int)}, {@code read(Charbuffer)}, {@code\n     * ready()}, {@code skip(long)}, and {@code transferTo()} methods all\n     * behave as if end of stream has been reached. After the stream has been\n     * closed, these methods all throw {@code IOException}.\n     *\n     * <p> The {@code markSupported()} method returns {@code false}.  The\n     * {@code mark()} and {@code reset()} methods throw an {@code IOException}.\n     *\n     * <p> The {@link #lock object} used to synchronize operations on the\n     * returned {@code Reader} is not specified.\n     *\n     * @return a {@code Reader} which reads no characters\n     *\n     * @since 11\n     ",
    "links" : [ "#lock" ]
  }, {
    "name" : "public int read(java.nio.CharBuffer target) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Attempts to read characters into the specified character buffer.\n     * The buffer is used as a repository of characters as-is: the only\n     * changes made are the results of a put operation. No flipping or\n     * rewinding of the buffer is performed.\n     *\n     * @param target the buffer to read characters into\n     * @return The number of characters added to the buffer, or\n     *         -1 if this source of characters is at its end\n     * @throws IOException if an I/O error occurs\n     * @throws NullPointerException if target is null\n     * @throws java.nio.ReadOnlyBufferException if target is a read only buffer\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public int read() throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Reads a single character.  This method will block until a character is\n     * available, an I/O error occurs, or the end of the stream is reached.\n     *\n     * <p> Subclasses that intend to support efficient single-character input\n     * should override this method.\n     *\n     * @return     The character read, as an integer in the range 0 to 65535\n     *             ({@code 0x00-0xffff}), or -1 if the end of the stream has\n     *             been reached\n     *\n     * @exception  IOException  If an I/O error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "public int read(char[] cbuf) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Reads characters into an array.  This method will block until some input\n     * is available, an I/O error occurs, or the end of the stream is reached.\n     *\n     * @param       cbuf  Destination buffer\n     *\n     * @return      The number of characters read, or -1\n     *              if the end of the stream\n     *              has been reached\n     *\n     * @exception   IOException  If an I/O error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int read(char[] cbuf, int off, int len) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Reads characters into a portion of an array.  This method will block\n     * until some input is available, an I/O error occurs, or the end of the\n     * stream is reached.\n     *\n     * @param      cbuf  Destination buffer\n     * @param      off   Offset at which to start storing characters\n     * @param      len   Maximum number of characters to read\n     *\n     * @return     The number of characters read, or -1 if the end of the\n     *             stream has been reached\n     *\n     * @exception  IOException  If an I/O error occurs\n     * @exception  IndexOutOfBoundsException\n     *             If {@code off} is negative, or {@code len} is negative,\n     *             or {@code len} is greater than {@code cbuf.length - off}\n     ",
    "links" : [ ]
  }, {
    "name" : "public long skip(long n) throws IOException",
    "returnType" : "long",
    "comment" : "\n     * Skips characters.  This method will block until some characters are\n     * available, an I/O error occurs, or the end of the stream is reached.\n     *\n     * @param  n  The number of characters to skip\n     *\n     * @return    The number of characters actually skipped\n     *\n     * @exception  IllegalArgumentException  If <code>n</code> is negative.\n     * @exception  IOException  If an I/O error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean ready() throws IOException",
    "returnType" : "boolean",
    "comment" : "\n     * Tells whether this stream is ready to be read.\n     *\n     * @return True if the next read() is guaranteed not to block for input,\n     * false otherwise.  Note that returning false does not guarantee that the\n     * next read will block.\n     *\n     * @exception  IOException  If an I/O error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean markSupported()",
    "returnType" : "boolean",
    "comment" : "\n     * Tells whether this stream supports the mark() operation. The default\n     * implementation always returns false. Subclasses should override this\n     * method.\n     *\n     * @return true if and only if this stream supports the mark operation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void mark(int readAheadLimit) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Marks the present position in the stream.  Subsequent calls to reset()\n     * will attempt to reposition the stream to this point.  Not all\n     * character-input streams support the mark() operation.\n     *\n     * @param  readAheadLimit  Limit on the number of characters that may be\n     *                         read while still preserving the mark.  After\n     *                         reading this many characters, attempting to\n     *                         reset the stream may fail.\n     *\n     * @exception  IOException  If the stream does not support mark(),\n     *                          or if some other I/O error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "public void reset() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Resets the stream.  If the stream has been marked, then attempt to\n     * reposition it at the mark.  If the stream has not been marked, then\n     * attempt to reset it in some way appropriate to the particular stream,\n     * for example by repositioning it to its starting point.  Not all\n     * character-input streams support the reset() operation, and some support\n     * reset() without supporting mark().\n     *\n     * @exception  IOException  If the stream has not been marked,\n     *                          or if the mark has been invalidated,\n     *                          or if the stream does not support reset(),\n     *                          or if some other I/O error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void close() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Closes the stream and releases any system resources associated with\n     * it.  Once the stream has been closed, further read(), ready(),\n     * mark(), reset(), or skip() invocations will throw an IOException.\n     * Closing a previously closed stream has no effect.\n     *\n     * @exception  IOException  If an I/O error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "public long transferTo(Writer out) throws IOException",
    "returnType" : "long",
    "comment" : "\n     * Reads all characters from this reader and writes the characters to the\n     * given writer in the order that they are read. On return, this reader\n     * will be at end of the stream. This method does not close either reader\n     * or writer.\n     * <p>\n     * This method may block indefinitely reading from the reader, or\n     * writing to the writer. The behavior for the case where the reader\n     * and/or writer is <i>asynchronously closed</i>, or the thread\n     * interrupted during the transfer, is highly reader and writer\n     * specific, and therefore not specified.\n     * <p>\n     * If an I/O error occurs reading from the reader or writing to the\n     * writer, then it may do so after some characters have been read or\n     * written. Consequently the reader may not be at end of the stream and\n     * one, or both, streams may be in an inconsistent state. It is strongly\n     * recommended that both streams be promptly closed if an I/O error occurs.\n     *\n     * @param  out the writer, non-null\n     * @return the number of characters transferred\n     * @throws IOException if an I/O error occurs when reading or writing\n     * @throws NullPointerException if {@code out} is {@code null}\n     *\n     * @since 10\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static Reader nullReader()", "public int read(java.nio.CharBuffer target) throws IOException", "public int read() throws IOException", "public int read(char[] cbuf) throws IOException", "public abstract int read(char[] cbuf, int off, int len) throws IOException", "public long skip(long n) throws IOException", "public boolean ready() throws IOException", "public boolean markSupported()", "public void mark(int readAheadLimit) throws IOException", "public void reset() throws IOException", "public abstract void close() throws IOException", "public long transferTo(Writer out) throws IOException" ],
  "variableNames" : [ "TRANSFER_BUFFER_SIZE", "lock", "maxSkipBufferSize", "skipBuffer" ]
}