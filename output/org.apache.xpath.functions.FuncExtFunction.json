{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xpath/functions/FuncExtFunction.java",
  "packageName" : "org.apache.xpath.functions",
  "className" : "FuncExtFunction",
  "comment" : "\n * An object of this class represents an extension call expression.  When\n * the expression executes, it calls ExtensionsTable#extFunction, and then\n * converts the result to the appropriate XObject.\n * @xsl.usage advanced\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_namespace",
    "type" : "String",
    "comment" : "\n   * The namespace for the extension function, which should not normally\n   *  be null or empty.\n   *  @serial    \n   ",
    "links" : [ ]
  }, {
    "name" : "m_extensionName",
    "type" : "String",
    "comment" : "\n   * The local name of the extension.\n   *  @serial   \n   ",
    "links" : [ ]
  }, {
    "name" : "m_methodKey",
    "type" : "Object",
    "comment" : "\n   * Unique method key, which is passed to ExtensionsTable#extFunction in\n   *  order to allow caching of the method.\n   *  @serial \n   ",
    "links" : [ ]
  }, {
    "name" : "m_argVec",
    "type" : "Vector",
    "comment" : "\n   * Array of static expressions which represent the parameters to the\n   *  function.\n   *  @serial   \n   ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void fixupVariables(java.util.Vector vars, int globalsSize)",
    "returnType" : "void",
    "comment" : "\n   * This function is used to fixup variables from QNames to stack frame\n   * indexes at stylesheet build time.\n   * @param vars List of QNames that correspond to variables.  This list\n   * should be searched backwards for the first qualified name that\n   * corresponds to the variable reference qname.  The position of the\n   * QName in the vector from the start of the vector will be its position\n   * in the stack frame (but variables above the globalsTop value will need\n   * to be offset to the current stack frame).\n   * NEEDSDOC @param globalsSize\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getNamespace()",
    "returnType" : "String",
    "comment" : "\n   * Return the namespace of the extension function.\n   *\n   * @return The namespace of the extension function.\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getFunctionName()",
    "returnType" : "String",
    "comment" : "\n   * Return the name of the extension function.\n   *\n   * @return The name of the extension function.\n   ",
    "links" : [ ]
  }, {
    "name" : "public Object getMethodKey()",
    "returnType" : "Object",
    "comment" : "\n   * Return the method key of the extension function.\n   *\n   * @return The method key of the extension function.\n   ",
    "links" : [ ]
  }, {
    "name" : "public Expression getArg(int n)",
    "returnType" : "Expression",
    "comment" : " \n   * Return the nth argument passed to the extension function.\n   * \n   * @param n The argument number index.\n   * @return The Expression object at the given index.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getArgCount()",
    "returnType" : "int",
    "comment" : "\n   * Return the number of arguments that were passed\n   * into this extension function.\n   *\n   * @return The number of arguments.\n   ",
    "links" : [ ]
  }, {
    "name" : "public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException",
    "returnType" : "XObject",
    "comment" : "\n   * Execute the function.  The function must return\n   * a valid object.\n   * @param xctxt The current execution context.\n   * @return A valid XObject.\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setArg(Expression arg, int argNum) throws WrongNumberArgsException",
    "returnType" : "void",
    "comment" : "\n   * Set an argument expression for a function.  This method is called by the\n   * XPath compiler.\n   *\n   * @param arg non-null expression that represents the argument.\n   * @param argNum The argument number index.\n   *\n   * @throws WrongNumberArgsException If the argNum parameter is beyond what\n   * is specified for this function.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void checkNumberArgs(int argNum) throws WrongNumberArgsException",
    "returnType" : "void",
    "comment" : "\n   * Check that the number of arguments passed to this function is correct.\n   *\n   *\n   * @param argNum The number of arguments that is being passed to the function.\n   *\n   * @throws WrongNumberArgsException\n   ",
    "links" : [ ]
  }, {
    "name" : "public void callArgVisitors(XPathVisitor visitor)",
    "returnType" : "void",
    "comment" : "\n   * Call the visitors for the function arguments.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void exprSetParent(ExpressionNode n)",
    "returnType" : "void",
    "comment" : "\n   * Set the parent node.\n   * For an extension function, we also need to set the parent\n   * node for all argument expressions.\n   * \n   * @param n The parent node\n   ",
    "links" : [ ]
  }, {
    "name" : "protected void reportWrongNumberArgs() throws WrongNumberArgsException",
    "returnType" : "void",
    "comment" : "\n   * Constructs and throws a WrongNumberArgException with the appropriate\n   * message for this function object.  This class supports an arbitrary\n   * number of arguments, so this method must never be called.\n   *\n   * @throws WrongNumberArgsException\n   ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n   * Return the name of the extesion function in string format\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void fixupVariables(java.util.Vector vars, int globalsSize)", "public String getNamespace()", "public String getFunctionName()", "public Object getMethodKey()", "public Expression getArg(int n)", "public int getArgCount()", "public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException", "public void setArg(Expression arg, int argNum) throws WrongNumberArgsException", "public void checkNumberArgs(int argNum) throws WrongNumberArgsException", "public void callArgVisitors(XPathVisitor visitor)", "public void exprSetParent(ExpressionNode n)", "protected void reportWrongNumberArgs() throws WrongNumberArgsException", "public String toString()" ],
  "variableNames" : [ "serialVersionUID", "m_namespace", "m_extensionName", "m_methodKey", "m_argVec" ]
}