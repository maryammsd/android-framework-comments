{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/os/ThreadLocalWorkSource.java",
  "packageName" : "android.os",
  "className" : "ThreadLocalWorkSource",
  "comment" : "\n * Tracks who triggered the work currently executed on this thread.\n *\n * <p>ThreadLocalWorkSource is automatically updated inside system server for incoming/outgoing\n * binder calls and messages posted to handler threads.\n *\n * <p>ThreadLocalWorkSource can also be set manually if needed to refine the WorkSource.\n *\n * <p>Example:\n * <ul>\n * <li>Bluetooth process calls {@link PowerManager#isInteractive()} API on behalf of app foo.\n * <li>ThreadLocalWorkSource will be automatically set to the UID of foo.\n * <li>Any code on the thread handling {@link PowerManagerService#isInteractive()} can call\n * {@link ThreadLocalWorkSource#getUid()} to blame any resource used to handle this call.\n * <li>If a message is posted from the binder thread, the code handling the message can also call\n * {@link ThreadLocalWorkSource#getUid()} and it will return the UID of foo since the work source is\n * automatically propagated.\n * </ul>\n *\n * @hide Only for use within system server.\n ",
  "variables" : [ {
    "name" : "UID_NONE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sWorkSourceUid",
    "type" : "ThreadLocal<Integer>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static int getUid()",
    "returnType" : "int",
    "comment" : "\n     * Returns the UID to blame for the code currently executed on this thread.\n     *\n     * <p>This UID is set automatically by common frameworks (e.g. Binder and Handler frameworks)\n     * and automatically propagated inside system server.\n     * <p>It can also be set manually using {@link #setUid(int)}.\n     ",
    "links" : [ "#setUid(int)" ]
  }, {
    "name" : "public static long setUid(int uid)",
    "returnType" : "long",
    "comment" : "\n     * Sets the UID to blame for the code currently executed on this thread.\n     *\n     * <p>Inside system server, this UID will be automatically propagated.\n     * <p>It will be used to attribute future resources used on this thread (e.g. binder\n     * transactions or processing handler messages) and on any other threads the UID is propagated\n     * to.\n     *\n     * @return a token that can be used to restore the state.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void restore(long token)",
    "returnType" : "void",
    "comment" : "\n     * Restores the state using the provided token.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static long clear()",
    "returnType" : "long",
    "comment" : "\n     * Clears the stored work source uid.\n     *\n     * <p>This method should be used when we do not know who to blame. If the UID to blame is the\n     * UID of the current process, it is better to attribute the work to the current process\n     * explicitly instead of clearing the work source:\n     *\n     * <pre>\n     * ThreadLocalWorkSource.setUid(Process.myUid());\n     * </pre>\n     *\n     * @return a token that can be used to restore the state.\n     *",
    "links" : [ ]
  }, {
    "name" : "private static int parseUidFromToken(long token)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static long getToken()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "UID_NONE", "sWorkSourceUid" ],
  "methodNames" : [ "public static int getUid()", "public static long setUid(int uid)", "public static void restore(long token)", "public static long clear()", "private static int parseUidFromToken(long token)", "private static long getToken()" ]
}