{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/io/PipedReader.java",
  "packageName" : "java.io",
  "className" : "PipedReader",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "closedByWriter",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "closedByReader",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "connected",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "readSide",
    "type" : "Thread",
    "comment" : " REMIND: identification of the read and write sides needs to be\n       more sophisticated.  Either using thread groups (but what about\n       pipes within a thread?) or using finalization (but it may be a\n       long time until the next GC). ",
    "links" : [ ]
  }, {
    "name" : "writeSide",
    "type" : "Thread",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_PIPE_SIZE",
    "type" : "int",
    "comment" : "\n    * The size of the pipe's circular input buffer.\n    ",
    "links" : [ ]
  }, {
    "name" : "buffer",
    "type" : "char[]",
    "comment" : "\n     * The circular buffer into which incoming data is placed.\n     ",
    "links" : [ ]
  }, {
    "name" : "in",
    "type" : "int",
    "comment" : "\n     * The index of the position in the circular buffer at which the\n     * next character of data will be stored when received from the connected\n     * piped writer. <code>in&lt;0</code> implies the buffer is empty,\n     * <code>in==out</code> implies the buffer is full\n     ",
    "links" : [ ]
  }, {
    "name" : "out",
    "type" : "int",
    "comment" : "\n     * The index of the position in the circular buffer at which the next\n     * character of data will be read by this piped reader.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void initPipe(int pipeSize)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void connect(PipedWriter src) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Causes this piped reader to be connected\n     * to the piped  writer <code>src</code>.\n     * If this object is already connected to some\n     * other piped writer, an <code>IOException</code>\n     * is thrown.\n     * <p>\n     * If <code>src</code> is an\n     * unconnected piped writer and <code>snk</code>\n     * is an unconnected piped reader, they\n     * may be connected by either the call:\n     *\n     * <pre><code>snk.connect(src)</code> </pre>\n     * <p>\n     * or the call:\n     *\n     * <pre><code>src.connect(snk)</code> </pre>\n     * <p>\n     * The two calls have the same effect.\n     *\n     * @param      src   The piped writer to connect to.\n     * @exception  IOException  if an I/O error occurs.\n     ",
    "links" : [ ]
  }, {
    "name" : " synchronized void receive(int c) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Receives a char of data. This method will block if no input is\n     * available.\n     ",
    "links" : [ ]
  }, {
    "name" : " synchronized void receive(char[] c, int off, int len) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Receives data into an array of characters.  This method will\n     * block until some input is available.\n     ",
    "links" : [ ]
  }, {
    "name" : " synchronized void receivedLast()",
    "returnType" : "void",
    "comment" : "\n     * Notifies all waiting threads that the last character of data has been\n     * received.\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized int read() throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Reads the next character of data from this piped stream.\n     * If no character is available because the end of the stream\n     * has been reached, the value <code>-1</code> is returned.\n     * This method blocks until input data is available, the end of\n     * the stream is detected, or an exception is thrown.\n     *\n     * @return     the next character of data, or <code>-1</code> if the end of the\n     *             stream is reached.\n     * @exception  IOException  if the pipe is\n     *          <a href=PipedInputStream.html#BROKEN> <code>broken</code></a>,\n     *          {@link #connect(java.io.PipedWriter) unconnected}, closed,\n     *          or an I/O error occurs.\n     ",
    "links" : [ "#connect(java.io.PipedWriter)" ]
  }, {
    "name" : "public synchronized int read(char[] cbuf, int off, int len) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Reads up to <code>len</code> characters of data from this piped\n     * stream into an array of characters. Less than <code>len</code> characters\n     * will be read if the end of the data stream is reached or if\n     * <code>len</code> exceeds the pipe's buffer size. This method\n     * blocks until at least one character of input is available.\n     *\n     * @param      cbuf     the buffer into which the data is read.\n     * @param      off   the start offset of the data.\n     * @param      len   the maximum number of characters read.\n     * @return     the total number of characters read into the buffer, or\n     *             <code>-1</code> if there is no more data because the end of\n     *             the stream has been reached.\n     * @exception  IOException  if the pipe is\n     *                  <a href=PipedInputStream.html#BROKEN> <code>broken</code></a>,\n     *                  {@link #connect(java.io.PipedWriter) unconnected}, closed,\n     *                  or an I/O error occurs.\n     * @exception  IndexOutOfBoundsException {@inheritDoc}\n     ",
    "links" : [ "#connect(java.io.PipedWriter)" ]
  }, {
    "name" : "public synchronized boolean ready() throws IOException",
    "returnType" : "boolean",
    "comment" : "\n     * Tell whether this stream is ready to be read.  A piped character\n     * stream is ready if the circular buffer is not empty.\n     *\n     * @exception  IOException  if the pipe is\n     *                  <a href=PipedInputStream.html#BROKEN> <code>broken</code></a>,\n     *                  {@link #connect(java.io.PipedWriter) unconnected}, or closed.\n     ",
    "links" : [ "#connect(java.io.PipedWriter)" ]
  }, {
    "name" : "public void close() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Closes this piped stream and releases any system resources\n     * associated with the stream.\n     *\n     * @exception  IOException  if an I/O error occurs.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void initPipe(int pipeSize)", "public void connect(PipedWriter src) throws IOException", " synchronized void receive(int c) throws IOException", " synchronized void receive(char[] c, int off, int len) throws IOException", " synchronized void receivedLast()", "public synchronized int read() throws IOException", "public synchronized int read(char[] cbuf, int off, int len) throws IOException", "public synchronized boolean ready() throws IOException", "public void close() throws IOException" ],
  "variableNames" : [ "closedByWriter", "closedByReader", "connected", "readSide", "writeSide", "DEFAULT_PIPE_SIZE", "buffer", "in", "out" ]
}