{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/security/identity/CredentialDataResult.java",
  "packageName" : "android.security.identity",
  "className" : "CredentialDataResult",
  "comment" : "\n * An object that contains the result of retrieving data from a credential. This is used to return\n * data requested in a {@link PresentationSession}.\n ",
  "links" : [ "android.security.identity.PresentationSession" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public abstract byte[] getDeviceNameSpaces()",
    "returnType" : "byte[]",
    "comment" : "\n     * Returns a CBOR structure containing the retrieved device-signed data.\n     *\n     * <p>This structure - along with the session transcript - may be cryptographically\n     * authenticated to prove to the reader that the data is from a trusted credential and\n     * {@link #getDeviceMac()} can be used to get a MAC.\n     *\n     * <p>The CBOR structure which is cryptographically authenticated is the\n     * {@code DeviceAuthenticationBytes} structure according to the following\n     * <a href=\"https://tools.ietf.org/html/rfc8610\">CDDL</a> schema:\n     *\n     * <pre>\n     *   DeviceAuthentication = [\n     *     \"DeviceAuthentication\",\n     *     SessionTranscript,\n     *     DocType,\n     *     DeviceNameSpacesBytes\n     *   ]\n     *\n     *   DocType = tstr\n     *   SessionTranscript = any\n     *   DeviceNameSpacesBytes = #6.24(bstr .cbor DeviceNameSpaces)\n     *   DeviceAuthenticationBytes = #6.24(bstr .cbor DeviceAuthentication)\n     * </pre>\n     *\n     * <p>where\n     *\n     * <pre>\n     *   DeviceNameSpaces = {\n     *     * NameSpace => DeviceSignedItems\n     *   }\n     *\n     *   DeviceSignedItems = {\n     *     + DataItemName => DataItemValue\n     *   }\n     *\n     *   NameSpace = tstr\n     *   DataItemName = tstr\n     *   DataItemValue = any\n     * </pre>\n     *\n     * <p>The returned data is the binary encoding of the {@code DeviceNameSpaces} structure\n     * as defined above.\n     *\n     * @return The bytes of the {@code DeviceNameSpaces} CBOR structure.\n     ",
    "links" : [ "#getDeviceMac()" ]
  }, {
    "name" : "public abstract byte[] getDeviceMac()",
    "returnType" : "byte[]",
    "comment" : "\n     * Returns a message authentication code over the {@code DeviceAuthenticationBytes} CBOR\n     * specified in {@link #getDeviceNameSpaces()}, to prove to the reader that the data\n     * is from a trusted credential.\n     *\n     * <p>The MAC proves to the reader that the data is from a trusted credential. This code is\n     * produced by using the key agreement and key derivation function from the ciphersuite\n     * with the authentication private key and the reader ephemeral public key to compute a\n     * shared message authentication code (MAC) key, then using the MAC function from the\n     * ciphersuite to compute a MAC of the authenticated data. See section 9.2.3.5 of\n     * ISO/IEC 18013-5 for details of this operation.\n     *\n     * <p>If the session transcript or reader ephemeral key wasn't set on the {@link\n     * PresentationSession} used to obtain this data no message authencation code will be produced\n     * and this method will return {@code null}.\n     *\n     * @return A COSE_Mac0 structure with the message authentication code as described above\n     *         or {@code null} if the conditions specified above are not met.\n     ",
    "links" : [ "android.security.identity.PresentationSession", "#getDeviceNameSpaces()" ]
  }, {
    "name" : "public byte[] getDeviceSignature()",
    "returnType" : "byte[]",
    "comment" : "\n     * Returns a signature over the {@code DeviceAuthenticationBytes} CBOR\n     * specified in {@link #getDeviceNameSpaces()}, to prove to the reader that the data\n     * is from a trusted credential.\n     *\n     * <p>The signature is made using the authentication private key. See section 9.1.3.4 of\n     * ISO/IEC 18013-5:2021 for details of this operation.\n     *\n     * <p>If the session transcript or reader ephemeral key wasn't set on the {@link\n     * PresentationSession} used to obtain this data no signature will be produced and this method\n     * will return {@code null}.\n     *\n     * <p>This is only implemented in feature version 202301 or later. If not implemented, the call\n     * fails with {@link UnsupportedOperationException}. See\n     * {@link android.content.pm.PackageManager#FEATURE_IDENTITY_CREDENTIAL_HARDWARE} for known\n     * feature versions.\n     *\n     * @return A COSE_Sign1 structure as described above or {@code null} if the conditions\n     *     specified above are not met.\n     ",
    "links" : [ "android.security.identity.PresentationSession", "#getDeviceNameSpaces()", "android.content.pm.PackageManager#FEATURE_IDENTITY_CREDENTIAL_HARDWARE", "UnsupportedOperationException" ]
  }, {
    "name" : "public abstract byte[] getStaticAuthenticationData()",
    "returnType" : "byte[]",
    "comment" : "\n     * Returns the static authentication data associated with the dynamic authentication\n     * key used to MAC the data returned by {@link #getDeviceNameSpaces()}.\n     *\n     * @return The static authentication data associated with dynamic authentication key used to\n     * MAC the data.\n     ",
    "links" : [ "#getDeviceNameSpaces()" ]
  }, {
    "name" : "public abstract Entries getDeviceSignedEntries()",
    "returnType" : "Entries",
    "comment" : "\n     * Gets the device-signed entries that was returned.\n     *\n     * @return an object to examine the entries returned.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Entries getIssuerSignedEntries()",
    "returnType" : "Entries",
    "comment" : "\n     * Gets the issuer-signed entries that was returned.\n     *\n     * @return an object to examine the entries returned.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public abstract byte[] getDeviceNameSpaces()", "public abstract byte[] getDeviceMac()", "public byte[] getDeviceSignature()", "public abstract byte[] getStaticAuthenticationData()", "public abstract Entries getDeviceSignedEntries()", "public abstract Entries getIssuerSignedEntries()" ],
  "variableNames" : [ ]
}