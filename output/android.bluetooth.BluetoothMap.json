{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/bluetooth/BluetoothMap.java",
  "packageName" : "android.bluetooth",
  "className" : "BluetoothMap",
  "comment" : "\n * This class provides the APIs to control the Bluetooth MAP Profile.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VDBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCloseGuard",
    "type" : "CloseGuard",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ACTION_CONNECTION_STATE_CHANGED",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "STATE_ERROR",
    "type" : "int",
    "comment" : "\n     * There was an error trying to obtain the state\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RESULT_FAILURE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "RESULT_SUCCESS",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "RESULT_CANCELED",
    "type" : "int",
    "comment" : "\n     * Connection canceled before completion.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mAdapter",
    "type" : "BluetoothAdapter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAttributionSource",
    "type" : "AttributionSource",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IBluetoothMap",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sBluetoothConnectionQuery",
    "type" : "IpcDataCache.QueryHandler<Pair<IBinder, Pair<AttributionSource, BluetoothDevice>>, Integer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "GET_CONNECTION_STATE_API",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sBluetoothConnectionCache",
    "type" : "BluetoothCache<Pair<IBinder, Pair<AttributionSource, BluetoothDevice>>, Integer>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected void finalize()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "\n     * Close the connection to the backing service. Other public functions of BluetoothMap will\n     * return default error results once close() has been called. Multiple invocations of close()\n     * are ok.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onServiceConnected(IBinder service)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void onServiceDisconnected()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private IBluetoothMap getService()",
    "returnType" : "IBluetoothMap",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public BluetoothAdapter getAdapter()",
    "returnType" : "BluetoothAdapter",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getState()",
    "returnType" : "int",
    "comment" : "\n     * Get the current state of the BluetoothMap service.\n     *\n     * @return One of the STATE_ return codes, or STATE_ERROR if this proxy object is currently not\n     *     connected to the Map service.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public BluetoothDevice getClient()",
    "returnType" : "BluetoothDevice",
    "comment" : "\n     * Get the currently connected remote Bluetooth device (PCE).\n     *\n     * @return The remote Bluetooth device, or null if not in connected or connecting state, or if\n     *     this proxy object is not connected to the Map service.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isConnected(BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the specified Bluetooth device is connected. Returns false if not connected,\n     * or if this proxy object is not currently connected to the Map service.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean connect(BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "\n     * Initiate connection. Initiation of outgoing connections is not supported for MAP server.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean disconnect(BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "\n     * Initiate disconnect.\n     *\n     * @param device Remote Bluetooth Device\n     * @return false on error, true otherwise\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean doesClassMatchSink(BluetoothClass btClass)",
    "returnType" : "boolean",
    "comment" : "\n     * Check class bits for possible Map support. This is a simple heuristic that tries to guess if\n     * a device with the given class bits might support Map. It is not accurate for all devices. It\n     * tries to err on the side of false positives.\n     *\n     * @return True if this device might support Map.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<BluetoothDevice> getConnectedDevices()",
    "returnType" : "List<BluetoothDevice>",
    "comment" : "\n     * Get the list of connected devices. Currently at most one.\n     *\n     * @return list of connected devices\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<BluetoothDevice> getDevicesMatchingConnectionStates(int[] states)",
    "returnType" : "List<BluetoothDevice>",
    "comment" : "\n     * Get the list of devices matching specified states. Currently at most one.\n     *\n     * @return list of matching devices\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void disableBluetoothGetConnectionStateCache()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static void invalidateBluetoothGetConnectionStateCache()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private static void invalidateCache(@NonNull String api)",
    "returnType" : "void",
    "comment" : "\n     * Invalidate a bluetooth cache. This method is just a short-hand wrapper that enforces the\n     * bluetooth module.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getConnectionState(BluetoothDevice device)",
    "returnType" : "int",
    "comment" : "\n     * Get connection state of device\n     *\n     * @return device connection state\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean setPriority(BluetoothDevice device, int priority)",
    "returnType" : "boolean",
    "comment" : "\n     * Set priority of the profile\n     *\n     * <p>The device should already be paired. Priority can be one of {@link #PRIORITY_ON} or {@link\n     * #PRIORITY_OFF},\n     *\n     * @param device Paired bluetooth device\n     * @return true if priority is set, false on error\n     * @hide\n     ",
    "links" : [ "#PRIORITY_ON", "#PRIORITY_OFF" ]
  }, {
    "name" : "public boolean setConnectionPolicy(@NonNull BluetoothDevice device, @ConnectionPolicy int connectionPolicy)",
    "returnType" : "boolean",
    "comment" : "\n     * Set connection policy of the profile\n     *\n     * <p>The device should already be paired. Connection policy can be one of {@link\n     * #CONNECTION_POLICY_ALLOWED}, {@link #CONNECTION_POLICY_FORBIDDEN}, {@link\n     * #CONNECTION_POLICY_UNKNOWN}\n     *\n     * @param device Paired bluetooth device\n     * @param connectionPolicy is the connection policy to set to for this profile\n     * @return true if connectionPolicy is set, false on error\n     * @hide\n     ",
    "links" : [ "#CONNECTION_POLICY_FORBIDDEN", "#CONNECTION_POLICY_ALLOWED", "#CONNECTION_POLICY_UNKNOWN" ]
  }, {
    "name" : "public int getPriority(BluetoothDevice device)",
    "returnType" : "int",
    "comment" : "\n     * Get the priority of the profile.\n     *\n     * <p>The priority can be any of: {@link #PRIORITY_OFF}, {@link #PRIORITY_ON}, {@link\n     * #PRIORITY_UNDEFINED}\n     *\n     * @param device Bluetooth device\n     * @return priority of the device\n     * @hide\n     ",
    "links" : [ "#PRIORITY_ON", "#PRIORITY_OFF", "#PRIORITY_UNDEFINED" ]
  }, {
    "name" : "public int getConnectionPolicy(@NonNull BluetoothDevice device)",
    "returnType" : "int",
    "comment" : "\n     * Get the connection policy of the profile.\n     *\n     * <p>The connection policy can be any of: {@link #CONNECTION_POLICY_ALLOWED}, {@link\n     * #CONNECTION_POLICY_FORBIDDEN}, {@link #CONNECTION_POLICY_UNKNOWN}\n     *\n     * @param device Bluetooth device\n     * @return connection policy of the device\n     * @hide\n     ",
    "links" : [ "#CONNECTION_POLICY_FORBIDDEN", "#CONNECTION_POLICY_ALLOWED", "#CONNECTION_POLICY_UNKNOWN" ]
  }, {
    "name" : "private static void log(String msg)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isEnabled()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isValidDevice(BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "protected void finalize()", "public void close()", "public void onServiceConnected(IBinder service)", "public void onServiceDisconnected()", "private IBluetoothMap getService()", "public BluetoothAdapter getAdapter()", "public int getState()", "public BluetoothDevice getClient()", "public boolean isConnected(BluetoothDevice device)", "public boolean connect(BluetoothDevice device)", "public boolean disconnect(BluetoothDevice device)", "public static boolean doesClassMatchSink(BluetoothClass btClass)", "public List<BluetoothDevice> getConnectedDevices()", "public List<BluetoothDevice> getDevicesMatchingConnectionStates(int[] states)", "public void disableBluetoothGetConnectionStateCache()", "public static void invalidateBluetoothGetConnectionStateCache()", "private static void invalidateCache(@NonNull String api)", "public int getConnectionState(BluetoothDevice device)", "public boolean setPriority(BluetoothDevice device, int priority)", "public boolean setConnectionPolicy(@NonNull BluetoothDevice device, @ConnectionPolicy int connectionPolicy)", "public int getPriority(BluetoothDevice device)", "public int getConnectionPolicy(@NonNull BluetoothDevice device)", "private static void log(String msg)", "private boolean isEnabled()", "private static boolean isValidDevice(BluetoothDevice device)" ],
  "variableNames" : [ "TAG", "DBG", "VDBG", "mCloseGuard", "ACTION_CONNECTION_STATE_CHANGED", "STATE_ERROR", "RESULT_FAILURE", "RESULT_SUCCESS", "RESULT_CANCELED", "mAdapter", "mAttributionSource", "mService", "sBluetoothConnectionQuery", "GET_CONNECTION_STATE_API", "sBluetoothConnectionCache" ]
}