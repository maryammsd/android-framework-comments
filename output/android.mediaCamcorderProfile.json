{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/media/CamcorderProfile.java",
  "packageName" : "android.media",
  "className" : "CamcorderProfile",
  "comment" : "\n * Retrieves the\n * predefined camcorder profile settings for camcorder applications.\n * These settings are read-only.\n *\n * <p>The compressed output from a recording session with a given\n * CamcorderProfile contains two tracks: one for audio and one for video.\n *\n * <p>Each profile specifies the following set of parameters:\n * <ul>\n * <li> The file output format\n * <li> Video codec format\n * <li> Video bit rate in bits per second\n * <li> Video frame rate in frames per second\n * <li> Video frame width and height,\n * <li> Audio codec format\n * <li> Audio bit rate in bits per second,\n * <li> Audio sample rate\n * <li> Number of audio channels for recording.\n * </ul>\n ",
  "variables" : [ {
    "name" : "QUALITY_LOW",
    "type" : "int",
    "comment" : "\n     * Quality level corresponding to the lowest available resolution.\n     ",
    "links" : [ ]
  }, {
    "name" : "QUALITY_HIGH",
    "type" : "int",
    "comment" : "\n     * Quality level corresponding to the highest available resolution.\n     ",
    "links" : [ ]
  }, {
    "name" : "QUALITY_QCIF",
    "type" : "int",
    "comment" : "\n     * Quality level corresponding to the qcif (176 x 144) resolution.\n     ",
    "links" : [ ]
  }, {
    "name" : "QUALITY_CIF",
    "type" : "int",
    "comment" : "\n     * Quality level corresponding to the cif (352 x 288) resolution.\n     ",
    "links" : [ ]
  }, {
    "name" : "QUALITY_480P",
    "type" : "int",
    "comment" : "\n     * Quality level corresponding to the 480p (720 x 480) resolution.\n     * Note that the horizontal resolution for 480p can also be other\n     * values, such as 640 or 704, instead of 720.\n     ",
    "links" : [ ]
  }, {
    "name" : "QUALITY_720P",
    "type" : "int",
    "comment" : "\n     * Quality level corresponding to the 720p (1280 x 720) resolution.\n     ",
    "links" : [ ]
  }, {
    "name" : "QUALITY_1080P",
    "type" : "int",
    "comment" : "\n     * Quality level corresponding to the 1080p (1920 x 1080) resolution.\n     * Note that the vertical resolution for 1080p can also be 1088,\n     * instead of 1080 (used by some vendors to avoid cropping during\n     * video playback).\n     ",
    "links" : [ ]
  }, {
    "name" : "QUALITY_QVGA",
    "type" : "int",
    "comment" : "\n     * Quality level corresponding to the QVGA (320x240) resolution.\n     ",
    "links" : [ ]
  }, {
    "name" : "QUALITY_2160P",
    "type" : "int",
    "comment" : "\n     * Quality level corresponding to the 2160p (3840x2160) resolution.\n     ",
    "links" : [ ]
  }, {
    "name" : "QUALITY_VGA",
    "type" : "int",
    "comment" : "\n     * Quality level corresponding to the VGA (640 x 480) resolution.\n     ",
    "links" : [ ]
  }, {
    "name" : "QUALITY_4KDCI",
    "type" : "int",
    "comment" : "\n     * Quality level corresponding to 4k-DCI (4096 x 2160) resolution.\n     ",
    "links" : [ ]
  }, {
    "name" : "QUALITY_QHD",
    "type" : "int",
    "comment" : "\n     * Quality level corresponding to QHD (2560 x 1440) resolution\n     ",
    "links" : [ ]
  }, {
    "name" : "QUALITY_2K",
    "type" : "int",
    "comment" : "\n     * Quality level corresponding to 2K (2048 x 1080) resolution\n     ",
    "links" : [ ]
  }, {
    "name" : "QUALITY_LIST_START",
    "type" : "int",
    "comment" : " Start and end of quality list",
    "links" : [ ]
  }, {
    "name" : "QUALITY_LIST_END",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "QUALITY_TIME_LAPSE_LOW",
    "type" : "int",
    "comment" : "\n     * Time lapse quality level corresponding to the lowest available resolution.\n     ",
    "links" : [ ]
  }, {
    "name" : "QUALITY_TIME_LAPSE_HIGH",
    "type" : "int",
    "comment" : "\n     * Time lapse quality level corresponding to the highest available resolution.\n     ",
    "links" : [ ]
  }, {
    "name" : "QUALITY_TIME_LAPSE_QCIF",
    "type" : "int",
    "comment" : "\n     * Time lapse quality level corresponding to the qcif (176 x 144) resolution.\n     ",
    "links" : [ ]
  }, {
    "name" : "QUALITY_TIME_LAPSE_CIF",
    "type" : "int",
    "comment" : "\n     * Time lapse quality level corresponding to the cif (352 x 288) resolution.\n     ",
    "links" : [ ]
  }, {
    "name" : "QUALITY_TIME_LAPSE_480P",
    "type" : "int",
    "comment" : "\n     * Time lapse quality level corresponding to the 480p (720 x 480) resolution.\n     ",
    "links" : [ ]
  }, {
    "name" : "QUALITY_TIME_LAPSE_720P",
    "type" : "int",
    "comment" : "\n     * Time lapse quality level corresponding to the 720p (1280 x 720) resolution.\n     ",
    "links" : [ ]
  }, {
    "name" : "QUALITY_TIME_LAPSE_1080P",
    "type" : "int",
    "comment" : "\n     * Time lapse quality level corresponding to the 1080p (1920 x 1088) resolution.\n     ",
    "links" : [ ]
  }, {
    "name" : "QUALITY_TIME_LAPSE_QVGA",
    "type" : "int",
    "comment" : "\n     * Time lapse quality level corresponding to the QVGA (320 x 240) resolution.\n     ",
    "links" : [ ]
  }, {
    "name" : "QUALITY_TIME_LAPSE_2160P",
    "type" : "int",
    "comment" : "\n     * Time lapse quality level corresponding to the 2160p (3840 x 2160) resolution.\n     ",
    "links" : [ ]
  }, {
    "name" : "QUALITY_TIME_LAPSE_VGA",
    "type" : "int",
    "comment" : "\n     * Time lapse quality level corresponding to the VGA (640 x 480) resolution.\n     ",
    "links" : [ ]
  }, {
    "name" : "QUALITY_TIME_LAPSE_4KDCI",
    "type" : "int",
    "comment" : "\n     * Time lapse quality level corresponding to the 4k-DCI (4096 x 2160) resolution.\n     ",
    "links" : [ ]
  }, {
    "name" : "QUALITY_TIME_LAPSE_QHD",
    "type" : "int",
    "comment" : "\n     * Time lapse quality level corresponding to the QHD (2560 x 1440) resolution.\n     ",
    "links" : [ ]
  }, {
    "name" : "QUALITY_TIME_LAPSE_2K",
    "type" : "int",
    "comment" : "\n     * Time lapse quality level corresponding to the 2K (2048 x 1080) resolution.\n     ",
    "links" : [ ]
  }, {
    "name" : "QUALITY_TIME_LAPSE_LIST_START",
    "type" : "int",
    "comment" : " Start and end of timelapse quality list",
    "links" : [ ]
  }, {
    "name" : "QUALITY_TIME_LAPSE_LIST_END",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "QUALITY_HIGH_SPEED_LOW",
    "type" : "int",
    "comment" : "\n     * High speed ( >= 100fps) quality level corresponding to the lowest available resolution.\n     * <p>\n     * For all the high speed profiles defined below ((from {@link #QUALITY_HIGH_SPEED_LOW} to\n     * {@link #QUALITY_HIGH_SPEED_2160P}), they are similar as normal recording profiles, with just\n     * higher output frame rate and bit rate. Therefore, setting these profiles with\n     * {@link MediaRecorder#setProfile} without specifying any other encoding parameters will\n     * produce high speed videos rather than slow motion videos that have different capture and\n     * output (playback) frame rates. To record slow motion videos, the application must set video\n     * output (playback) frame rate and bit rate appropriately via\n     * {@link MediaRecorder#setVideoFrameRate} and {@link MediaRecorder#setVideoEncodingBitRate}\n     * based on the slow motion factor. If the application intends to do the video recording with\n     * {@link MediaCodec} encoder, it must set each individual field of {@link MediaFormat}\n     * similarly according to this CamcorderProfile.\n     * </p>\n     *\n     * @see #videoBitRate\n     * @see #videoFrameRate\n     * @see MediaRecorder\n     * @see MediaCodec\n     * @see MediaFormat\n     ",
    "links" : [ "#QUALITY_HIGH_SPEED_LOW", "#QUALITY_HIGH_SPEED_2160P", "MediaRecorder#setProfile", "MediaRecorder#setVideoFrameRate", "MediaRecorder#setVideoEncodingBitRate", "MediaCodec", "MediaFormat" ]
  }, {
    "name" : "QUALITY_HIGH_SPEED_HIGH",
    "type" : "int",
    "comment" : "\n     * High speed ( >= 100fps) quality level corresponding to the highest available resolution.\n     ",
    "links" : [ ]
  }, {
    "name" : "QUALITY_HIGH_SPEED_480P",
    "type" : "int",
    "comment" : "\n     * High speed ( >= 100fps) quality level corresponding to the 480p (720 x 480) resolution.\n     *\n     * Note that the horizontal resolution for 480p can also be other\n     * values, such as 640 or 704, instead of 720.\n     ",
    "links" : [ ]
  }, {
    "name" : "QUALITY_HIGH_SPEED_720P",
    "type" : "int",
    "comment" : "\n     * High speed ( >= 100fps) quality level corresponding to the 720p (1280 x 720) resolution.\n     ",
    "links" : [ ]
  }, {
    "name" : "QUALITY_HIGH_SPEED_1080P",
    "type" : "int",
    "comment" : "\n     * High speed ( >= 100fps) quality level corresponding to the 1080p (1920 x 1080 or 1920x1088)\n     * resolution.\n     ",
    "links" : [ ]
  }, {
    "name" : "QUALITY_HIGH_SPEED_2160P",
    "type" : "int",
    "comment" : "\n     * High speed ( >= 100fps) quality level corresponding to the 2160p (3840 x 2160)\n     * resolution.\n     ",
    "links" : [ ]
  }, {
    "name" : "QUALITY_HIGH_SPEED_CIF",
    "type" : "int",
    "comment" : "\n     * High speed ( >= 100fps) quality level corresponding to the CIF (352 x 288)\n     ",
    "links" : [ ]
  }, {
    "name" : "QUALITY_HIGH_SPEED_VGA",
    "type" : "int",
    "comment" : "\n     * High speed ( >= 100fps) quality level corresponding to the VGA (640 x 480)\n     ",
    "links" : [ ]
  }, {
    "name" : "QUALITY_HIGH_SPEED_4KDCI",
    "type" : "int",
    "comment" : "\n     * High speed ( >= 100fps) quality level corresponding to the 4K-DCI (4096 x 2160)\n     ",
    "links" : [ ]
  }, {
    "name" : "QUALITY_HIGH_SPEED_LIST_START",
    "type" : "int",
    "comment" : " Start and end of high speed quality list",
    "links" : [ ]
  }, {
    "name" : "QUALITY_HIGH_SPEED_LIST_END",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "duration",
    "type" : "int",
    "comment" : "\n     * Default recording duration in seconds before the session is terminated.\n     * This is useful for applications like MMS has limited file size requirement.\n     ",
    "links" : [ ]
  }, {
    "name" : "quality",
    "type" : "int",
    "comment" : "\n     * The quality level of the camcorder profile\n     ",
    "links" : [ ]
  }, {
    "name" : "fileFormat",
    "type" : "int",
    "comment" : "\n     * The file output format of the camcorder profile\n     * @see android.media.MediaRecorder.OutputFormat\n     ",
    "links" : [ ]
  }, {
    "name" : "videoCodec",
    "type" : "int",
    "comment" : "\n     * The video encoder being used for the video track\n     * @see android.media.MediaRecorder.VideoEncoder\n     ",
    "links" : [ ]
  }, {
    "name" : "videoBitRate",
    "type" : "int",
    "comment" : "\n     * The target video output bit rate in bits per second\n     * <p>\n     * This is the target recorded video output bit rate if the application configures the video\n     * recording via {@link MediaRecorder#setProfile} without specifying any other\n     * {@link MediaRecorder} encoding parameters. For example, for high speed quality profiles (from\n     * {@link #QUALITY_HIGH_SPEED_LOW} to {@link #QUALITY_HIGH_SPEED_2160P}), this is the bit rate\n     * where the video is recorded with. If the application intends to record slow motion videos\n     * with the high speed quality profiles, it must set a different video bit rate that is\n     * corresponding to the desired recording output bit rate (i.e., the encoded video bit rate\n     * during normal playback) via {@link MediaRecorder#setVideoEncodingBitRate}. For example, if\n     * {@link #QUALITY_HIGH_SPEED_720P} advertises 240fps {@link #videoFrameRate} and 64Mbps\n     * {@link #videoBitRate} in the high speed CamcorderProfile, and the application intends to\n     * record 1/8 factor slow motion recording videos, the application must set 30fps via\n     * {@link MediaRecorder#setVideoFrameRate} and 8Mbps ( {@link #videoBitRate} * slow motion\n     * factor) via {@link MediaRecorder#setVideoEncodingBitRate}. Failing to do so will result in\n     * videos with unexpected frame rate and bit rate, or {@link MediaRecorder} error if the output\n     * bit rate exceeds the encoder limit. If the application intends to do the video recording with\n     * {@link MediaCodec} encoder, it must set each individual field of {@link MediaFormat}\n     * similarly according to this CamcorderProfile.\n     * </p>\n     *\n     * @see #videoFrameRate\n     * @see MediaRecorder\n     * @see MediaCodec\n     * @see MediaFormat\n     ",
    "links" : [ "MediaRecorder#setProfile", "MediaRecorder", "#QUALITY_HIGH_SPEED_LOW", "#QUALITY_HIGH_SPEED_2160P", "MediaRecorder#setVideoEncodingBitRate", "#QUALITY_HIGH_SPEED_720P", "#videoFrameRate", "#videoBitRate", "MediaRecorder#setVideoFrameRate", "#videoBitRate", "MediaRecorder#setVideoEncodingBitRate", "MediaRecorder", "MediaCodec", "MediaFormat" ]
  }, {
    "name" : "videoFrameRate",
    "type" : "int",
    "comment" : "\n     * The target video frame rate in frames per second.\n     * <p>\n     * This is the target recorded video output frame rate per second if the application configures\n     * the video recording via {@link MediaRecorder#setProfile} without specifying any other\n     * {@link MediaRecorder} encoding parameters. For example, for high speed quality profiles (from\n     * {@link #QUALITY_HIGH_SPEED_LOW} to {@link #QUALITY_HIGH_SPEED_2160P}), this is the frame rate\n     * where the video is recorded and played back with. If the application intends to create slow\n     * motion use case with the high speed quality profiles, it must set a different video frame\n     * rate that is corresponding to the desired output (playback) frame rate via\n     * {@link MediaRecorder#setVideoFrameRate}. For example, if {@link #QUALITY_HIGH_SPEED_720P}\n     * advertises 240fps {@link #videoFrameRate} in the CamcorderProfile, and the application\n     * intends to create 1/8 factor slow motion recording videos, the application must set 30fps via\n     * {@link MediaRecorder#setVideoFrameRate}. Failing to do so will result in high speed videos\n     * with normal speed playback frame rate (240fps for above example). If the application intends\n     * to do the video recording with {@link MediaCodec} encoder, it must set each individual field\n     * of {@link MediaFormat} similarly according to this CamcorderProfile.\n     * </p>\n     *\n     * @see #videoBitRate\n     * @see MediaRecorder\n     * @see MediaCodec\n     * @see MediaFormat\n     ",
    "links" : [ "MediaRecorder#setProfile", "MediaRecorder", "#QUALITY_HIGH_SPEED_LOW", "#QUALITY_HIGH_SPEED_2160P", "MediaRecorder#setVideoFrameRate", "#QUALITY_HIGH_SPEED_720P", "#videoFrameRate", "MediaRecorder#setVideoFrameRate", "MediaCodec", "MediaFormat" ]
  }, {
    "name" : "videoFrameWidth",
    "type" : "int",
    "comment" : "\n     * The target video frame width in pixels\n     ",
    "links" : [ ]
  }, {
    "name" : "videoFrameHeight",
    "type" : "int",
    "comment" : "\n     * The target video frame height in pixels\n     ",
    "links" : [ ]
  }, {
    "name" : "audioCodec",
    "type" : "int",
    "comment" : "\n     * The audio encoder being used for the audio track.\n     * @see android.media.MediaRecorder.AudioEncoder\n     ",
    "links" : [ ]
  }, {
    "name" : "audioBitRate",
    "type" : "int",
    "comment" : "\n     * The target audio output bit rate in bits per second\n     ",
    "links" : [ ]
  }, {
    "name" : "audioSampleRate",
    "type" : "int",
    "comment" : "\n     * The audio sampling rate used for the audio track\n     ",
    "links" : [ ]
  }, {
    "name" : "audioChannels",
    "type" : "int",
    "comment" : "\n     * The number of audio channels used for the audio track\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static CamcorderProfile get(int quality)",
    "returnType" : "CamcorderProfile",
    "comment" : "\n     * Returns the camcorder profile for the first back-facing camera on the\n     * device at the given quality level. If the device has no back-facing\n     * camera, this returns null.\n     * @param quality the target quality level for the camcorder profile\n     * @see #get(int, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public static CamcorderProfile get(int cameraId, int quality)",
    "returnType" : "CamcorderProfile",
    "comment" : "\n     * Returns the camcorder profile for the given camera at the given\n     * quality level.\n     *\n     * Quality levels QUALITY_LOW, QUALITY_HIGH are guaranteed to be supported, while\n     * other levels may or may not be supported. The supported levels can be checked using\n     * {@link #hasProfile(int, int)}.\n     * QUALITY_LOW refers to the lowest quality available, while QUALITY_HIGH refers to\n     * the highest quality available.\n     * QUALITY_LOW/QUALITY_HIGH have to match one of qcif, cif, 480p, 720p, 1080p or 2160p.\n     * E.g. if the device supports 480p, 720p, 1080p and 2160p, then low is 480p and high is\n     * 2160p.\n     *\n     * The same is true for time lapse quality levels, i.e. QUALITY_TIME_LAPSE_LOW,\n     * QUALITY_TIME_LAPSE_HIGH are guaranteed to be supported and have to match one of\n     * qcif, cif, 480p, 720p, 1080p, or 2160p.\n     *\n     * For high speed quality levels, they may or may not be supported. If a subset of the levels\n     * are supported, QUALITY_HIGH_SPEED_LOW and QUALITY_HIGH_SPEED_HIGH are guaranteed to be\n     * supported and have to match one of 480p, 720p, or 1080p.\n     *\n     * A camcorder recording session with higher quality level usually has higher output\n     * bit rate, better video and/or audio recording quality, larger video frame\n     * resolution and higher audio sampling rate, etc, than those with lower quality\n     * level.\n     *\n     * @param cameraId the id for the camera\n     * @param quality the target quality level for the camcorder profile.\n     * @see #QUALITY_LOW\n     * @see #QUALITY_HIGH\n     * @see #QUALITY_QCIF\n     * @see #QUALITY_CIF\n     * @see #QUALITY_480P\n     * @see #QUALITY_720P\n     * @see #QUALITY_1080P\n     * @see #QUALITY_2160P\n     * @see #QUALITY_TIME_LAPSE_LOW\n     * @see #QUALITY_TIME_LAPSE_HIGH\n     * @see #QUALITY_TIME_LAPSE_QCIF\n     * @see #QUALITY_TIME_LAPSE_CIF\n     * @see #QUALITY_TIME_LAPSE_480P\n     * @see #QUALITY_TIME_LAPSE_720P\n     * @see #QUALITY_TIME_LAPSE_1080P\n     * @see #QUALITY_TIME_LAPSE_2160P\n     * @see #QUALITY_HIGH_SPEED_LOW\n     * @see #QUALITY_HIGH_SPEED_HIGH\n     * @see #QUALITY_HIGH_SPEED_480P\n     * @see #QUALITY_HIGH_SPEED_720P\n     * @see #QUALITY_HIGH_SPEED_1080P\n     * @see #QUALITY_HIGH_SPEED_2160P\n    ",
    "links" : [ "#hasProfile" ]
  }, {
    "name" : "public static boolean hasProfile(int quality)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if camcorder profile exists for the first back-facing\n     * camera at the given quality level.\n     *\n     * <p>\n     * When using the Camera 2 API in {@code LEGACY} mode (i.e. when\n     * {@link android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL} is set\n     * to\n     * {@link android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_LEGACY}),\n     * {@link #hasProfile} may return {@code true} for unsupported resolutions.  To ensure a\n     * a given resolution is supported in LEGACY mode, the configuration given in\n     * {@link android.hardware.camera2.CameraCharacteristics#SCALER_STREAM_CONFIGURATION_MAP}\n     * must contain the the resolution in the supported output sizes.  The recommended way to check\n     * this is with\n     * {@link android.hardware.camera2.params.StreamConfigurationMap#getOutputSizes(Class)} with the\n     * class of the desired recording endpoint, and check that the desired resolution is contained\n     * in the list returned.\n     * </p>\n     * @see android.hardware.camera2.CameraManager\n     * @see android.hardware.camera2.CameraCharacteristics\n     *\n     * @param quality the target quality level for the camcorder profile\n     ",
    "links" : [ "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL", "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_LEGACY", "#hasProfile", "android.hardware.camera2.CameraCharacteristics#SCALER_STREAM_CONFIGURATION_MAP", "android.hardware.camera2.params.StreamConfigurationMap#getOutputSizes" ]
  }, {
    "name" : "public static boolean hasProfile(int cameraId, int quality)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if camcorder profile exists for the given camera at\n     * the given quality level.\n     *\n     * <p>\n     * When using the Camera 2 API in LEGACY mode (i.e. when\n     * {@link android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL} is set\n     * to\n     * {@link android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_LEGACY}),\n     * {@link #hasProfile} may return {@code true} for unsupported resolutions.  To ensure a\n     * a given resolution is supported in LEGACY mode, the configuration given in\n     * {@link android.hardware.camera2.CameraCharacteristics#SCALER_STREAM_CONFIGURATION_MAP}\n     * must contain the the resolution in the supported output sizes.  The recommended way to check\n     * this is with\n     * {@link android.hardware.camera2.params.StreamConfigurationMap#getOutputSizes(Class)} with the\n     * class of the desired recording endpoint, and check that the desired resolution is contained\n     * in the list returned.\n     * </p>\n     * @see android.hardware.camera2.CameraManager\n     * @see android.hardware.camera2.CameraCharacteristics\n     *\n     * @param cameraId the id for the camera\n     * @param quality the target quality level for the camcorder profile\n     ",
    "links" : [ "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL", "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_LEGACY", "#hasProfile", "android.hardware.camera2.CameraCharacteristics#SCALER_STREAM_CONFIGURATION_MAP", "android.hardware.camera2.params.StreamConfigurationMap#getOutputSizes" ]
  }, {
    "name" : "private static final native void native_init()",
    "returnType" : "void",
    "comment" : " Methods implemented by JNI",
    "links" : [ ]
  }, {
    "name" : "private static final native CamcorderProfile native_get_camcorder_profile(int cameraId, int quality)",
    "returnType" : "CamcorderProfile",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static final native boolean native_has_camcorder_profile(int cameraId, int quality)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "QUALITY_LOW", "QUALITY_HIGH", "QUALITY_QCIF", "QUALITY_CIF", "QUALITY_480P", "QUALITY_720P", "QUALITY_1080P", "QUALITY_QVGA", "QUALITY_2160P", "QUALITY_VGA", "QUALITY_4KDCI", "QUALITY_QHD", "QUALITY_2K", "QUALITY_LIST_START", "QUALITY_LIST_END", "QUALITY_TIME_LAPSE_LOW", "QUALITY_TIME_LAPSE_HIGH", "QUALITY_TIME_LAPSE_QCIF", "QUALITY_TIME_LAPSE_CIF", "QUALITY_TIME_LAPSE_480P", "QUALITY_TIME_LAPSE_720P", "QUALITY_TIME_LAPSE_1080P", "QUALITY_TIME_LAPSE_QVGA", "QUALITY_TIME_LAPSE_2160P", "QUALITY_TIME_LAPSE_VGA", "QUALITY_TIME_LAPSE_4KDCI", "QUALITY_TIME_LAPSE_QHD", "QUALITY_TIME_LAPSE_2K", "QUALITY_TIME_LAPSE_LIST_START", "QUALITY_TIME_LAPSE_LIST_END", "QUALITY_HIGH_SPEED_LOW", "QUALITY_HIGH_SPEED_HIGH", "QUALITY_HIGH_SPEED_480P", "QUALITY_HIGH_SPEED_720P", "QUALITY_HIGH_SPEED_1080P", "QUALITY_HIGH_SPEED_2160P", "QUALITY_HIGH_SPEED_CIF", "QUALITY_HIGH_SPEED_VGA", "QUALITY_HIGH_SPEED_4KDCI", "QUALITY_HIGH_SPEED_LIST_START", "QUALITY_HIGH_SPEED_LIST_END", "duration", "quality", "fileFormat", "videoCodec", "videoBitRate", "videoFrameRate", "videoFrameWidth", "videoFrameHeight", "audioCodec", "audioBitRate", "audioSampleRate", "audioChannels" ],
  "methodNames" : [ "public static CamcorderProfile get(int quality)", "public static CamcorderProfile get(int cameraId, int quality)", "public static boolean hasProfile(int quality)", "public static boolean hasProfile(int cameraId, int quality)", "private static final native void native_init()", "private static final native CamcorderProfile native_get_camcorder_profile(int cameraId, int quality)", "private static final native boolean native_has_camcorder_profile(int cameraId, int quality)" ]
}