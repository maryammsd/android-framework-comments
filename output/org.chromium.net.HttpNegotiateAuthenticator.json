{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/chromium/net/HttpNegotiateAuthenticator.java",
  "packageName" : "org.chromium.net",
  "className" : "HttpNegotiateAuthenticator",
  "comment" : "\n * Class to get Auth Tokens for HTTP Negotiate authentication (typically used for Kerberos) An\n * instance of this class is created for each separate negotiation.\n *\n * Please keep the documentation from the chromium.org page (https://goo.gl/46hmKx) in sync.\n * ================================================================================================\n * In addition to the error codes that can be forwarded from the authenticator app, the following\n * errors can be displayed when trying to authenticate a request:\n *\n *  - ERR_UNEXPECTED: An unexpected error happened and the request has been terminated.\n *\n *  - ERR_MISSING_AUTH_CREDENTIALS: The account information is not usable. It can be raised for\n *    example if the user did not log in to the authenticator app and no eligible account is found,\n *    if the account information can't be obtained because the current app does not have the\n *    required permissions, or if there is more than one eligible account and we can't obtain a\n *    selection from the user.\n *\n *  - ERR_MISCONFIGURED_AUTH_ENVIRONMENT: The authentication can't be completed because of some\n *    issues in the configuration of the app. Some permissions may be missing.\n *\n * Please search for the \"cr_net_auth\" tag in logcat to have more information about the cause of\n * these errors.\n * ================================================================================================\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSpnegoContext",
    "type" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAccountType",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " static HttpNegotiateAuthenticator create(String accountType)",
    "returnType" : "HttpNegotiateAuthenticator",
    "comment" : "\n     * @param accountType The Android account type to use.\n     ",
    "links" : [ ]
  }, {
    "name" : " void getNextAuthToken(final long nativeResultObject, final String principal, String authToken, boolean canDelegate)",
    "returnType" : "void",
    "comment" : "\n     * @param nativeResultObject The C++ object used to return the result. For correct C++ memory\n     *            management we must call HttpNegotiateAuthenticatorJni.get().setResult precisely\n     * once with this object.\n     * @param principal The principal (must be host based).\n     * @param authToken The incoming auth token.\n     * @param canDelegate True if we can delegate.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void processResult(Bundle result, RequestData requestData)",
    "returnType" : "void",
    "comment" : "\n     * Process a result bundle from a completed token request, communicating its content back to\n     * the native code.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void requestTokenWithoutActivity(Context ctx, RequestData requestData, String[] features)",
    "returnType" : "void",
    "comment" : "\n     * Requests an authentication token. If the account is not properly setup, it will result in\n     * a failure.\n     *\n     * @param ctx The application context\n     * @param requestData The object holding the data related to the current request\n     * @param features An array of the account features to require, may be null or empty\n     ",
    "links" : [ ]
  }, {
    "name" : "private void requestTokenWithActivity(Context ctx, Activity activity, RequestData requestData, String[] features)",
    "returnType" : "void",
    "comment" : "\n     * Requests an authentication token. Handles the account selection/creation and the credentials\n     * confirmation if that is needed.\n     * If there is more than one account, it will show an account picker dialog for\n     * each query (e.g. html file, then favicon...)\n     * Same if the credentials need to be confirmed.\n     *\n     * @param ctx The application context\n     * @param activity The Activity context to use for launching new sub-Activities to prompt to\n     *                 add an account, select an account, and/or enter a password, as necessary;\n     *                 used only to call startActivity(); should not be null\n     * @param requestData The object holding the data related to the current request\n     * @param features An array of the account features to require, may be null or empty\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean lacksPermission(Context context, String permission, boolean onlyPreM)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the current context lacks a given permission. Skips the check on M+ systems\n     * if {@code onlyPreM} is {@code true}, and just returns {@code false}.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " static HttpNegotiateAuthenticator create(String accountType)", " void getNextAuthToken(final long nativeResultObject, final String principal, String authToken, boolean canDelegate)", "private void processResult(Bundle result, RequestData requestData)", "private void requestTokenWithoutActivity(Context ctx, RequestData requestData, String[] features)", "private void requestTokenWithActivity(Context ctx, Activity activity, RequestData requestData, String[] features)", " boolean lacksPermission(Context context, String permission, boolean onlyPreM)" ],
  "variableNames" : [ "TAG", "mSpnegoContext", "mAccountType" ]
}