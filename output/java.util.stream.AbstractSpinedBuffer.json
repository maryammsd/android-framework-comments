{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/stream/AbstractSpinedBuffer.java",
  "packageName" : "java.util.stream",
  "className" : "AbstractSpinedBuffer",
  "comment" : "\n * Base class for a data structure for gathering elements into a buffer and then\n * iterating them. Maintains an array of increasingly sized arrays, so there is\n * no copying cost associated with growing the data structure.\n * @since 1.8\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "MIN_CHUNK_POWER",
    "type" : "int",
    "comment" : "\n     * Minimum power-of-two for the first chunk.\n     ",
    "links" : [ ]
  }, {
    "name" : "MIN_CHUNK_SIZE",
    "type" : "int",
    "comment" : "\n     * Minimum size for the first chunk.\n     ",
    "links" : [ ]
  }, {
    "name" : "MAX_CHUNK_POWER",
    "type" : "int",
    "comment" : "\n     * Max power-of-two for chunks.\n     ",
    "links" : [ ]
  }, {
    "name" : "MIN_SPINE_SIZE",
    "type" : "int",
    "comment" : "\n     * Minimum array size for array-of-chunks.\n     ",
    "links" : [ ]
  }, {
    "name" : "initialChunkPower",
    "type" : "int",
    "comment" : "\n     * log2 of the size of the first chunk.\n     ",
    "links" : [ ]
  }, {
    "name" : "elementIndex",
    "type" : "int",
    "comment" : "\n     * Index of the *next* element to write; may point into, or just outside of,\n     * the current chunk.\n     ",
    "links" : [ ]
  }, {
    "name" : "spineIndex",
    "type" : "int",
    "comment" : "\n     * Index of the *current* chunk in the spine array, if the spine array is\n     * non-null.\n     ",
    "links" : [ ]
  }, {
    "name" : "priorElementCount",
    "type" : "long[]",
    "comment" : "\n     * Count of elements in all prior chunks.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean isEmpty()",
    "returnType" : "boolean",
    "comment" : "\n     * Is the buffer currently empty?\n     ",
    "links" : [ ]
  }, {
    "name" : "public long count()",
    "returnType" : "long",
    "comment" : "\n     * How many elements are currently in the buffer?\n     ",
    "links" : [ ]
  }, {
    "name" : "protected int chunkSize(int n)",
    "returnType" : "int",
    "comment" : "\n     * How big should the nth chunk be?\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void clear()",
    "returnType" : "void",
    "comment" : "\n     * Remove all data from the buffer\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public boolean isEmpty()", "public long count()", "protected int chunkSize(int n)", "public abstract void clear()" ],
  "variableNames" : [ "MIN_CHUNK_POWER", "MIN_CHUNK_SIZE", "MAX_CHUNK_POWER", "MIN_SPINE_SIZE", "initialChunkPower", "elementIndex", "spineIndex", "priorElementCount" ]
}