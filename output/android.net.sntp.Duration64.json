{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/sntp/Duration64.java",
  "packageName" : "android.net.sntp",
  "className" : "Duration64",
  "comment" : "\n * A type similar to {@link Timestamp64} but used when calculating the difference between two\n * timestamps. As such, it is a signed type, but still uses 64-bits in total and so can only\n * represent half the magnitude of {@link Timestamp64}.\n *\n * <p>See <a href=\"https://www.eecis.udel.edu/~mills/time.html\">4. Time Difference Calculations</a>.\n *\n * @hide\n ",
  "links" : [ "android.net.sntp.Timestamp64" ],
  "variables" : [ {
    "name" : "ZERO",
    "type" : "Duration64",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBits",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static Duration64 between(Timestamp64 startInclusive, Timestamp64 endExclusive)",
    "returnType" : "Duration64",
    "comment" : "\n     * Returns the difference between two 64-bit NTP timestamps as a {@link Duration64}, as\n     * described in the NTP spec. The times represented by the timestamps have to be within {@link\n     * Timestamp64#MAX_SECONDS_IN_ERA} (~68 years) of each other for the calculation to produce a\n     * correct answer.\n     ",
    "links" : [ "android.net.sntp.Duration64", "android.net.sntp.Timestamp64#MAX_SECONDS_IN_ERA" ]
  }, {
    "name" : "public Duration plus(Duration64 other)",
    "returnType" : "Duration",
    "comment" : "\n     * Add two {@link Duration64} instances together. This performs the calculation in {@link\n     * Duration} and returns a {@link Duration} to increase the magnitude of accepted arguments,\n     * since {@link Duration64} only supports signed 32-bit seconds. The use of {@link Duration}\n     * limits precision to nanoseconds.\n     ",
    "links" : [ "java.time.Duration", "android.net.sntp.Duration64" ]
  }, {
    "name" : "public static Duration64 fromDuration(Duration duration)",
    "returnType" : "Duration64",
    "comment" : "\n     * Returns a {@link Duration64} equivalent of the supplied duration, if the magnitude can be\n     * represented. Because {@link Duration64} uses a fixed point type for sub-second values it\n     * cannot represent all nanosecond values precisely and so the conversion can be lossy.\n     *\n     * @throws IllegalArgumentException if the supplied duration is too big to be represented\n     ",
    "links" : [ "android.net.sntp.Duration64" ]
  }, {
    "name" : "public Duration toDuration()",
    "returnType" : "Duration",
    "comment" : "\n     * Returns a {@link Duration} equivalent of this duration. Because {@link Duration64} uses a\n     * fixed point type for sub-second values it can values smaller than nanosecond precision and so\n     * the conversion can be lossy.\n     ",
    "links" : [ "java.time.Duration", "android.net.sntp.Duration64" ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getSeconds()",
    "returnType" : "int",
    "comment" : "\n     * Returns the <em>signed</em> seconds in this duration.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getNanos()",
    "returnType" : "int",
    "comment" : "\n     * Returns the <em>unsigned</em> nanoseconds in this duration (truncated).\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static Duration64 between(Timestamp64 startInclusive, Timestamp64 endExclusive)", "public Duration plus(Duration64 other)", "public static Duration64 fromDuration(Duration duration)", "public Duration toDuration()", "public boolean equals(Object o)", "public int hashCode()", "public String toString()", "public int getSeconds()", "public int getNanos()" ],
  "variableNames" : [ "ZERO", "mBits" ]
}