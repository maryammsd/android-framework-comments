{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/app/WallpaperManager.java",
  "packageName" : "android.app",
  "className" : "WallpaperManager",
  "comment" : "\n * Provides access to the system wallpaper. With WallpaperManager, you can\n * get the current wallpaper, get the desired dimensions for the wallpaper, set\n * the wallpaper, and more.\n *\n * <p> An app can check whether wallpapers are supported for the current user, by calling\n * {@link #isWallpaperSupported()}, and whether setting of wallpapers is allowed, by calling\n * {@link #isSetWallpaperAllowed()}.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWallpaperXStep",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWallpaperYStep",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PROP_WALLPAPER",
    "type" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "PROP_LOCK_WALLPAPER",
    "type" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "PROP_WALLPAPER_COMPONENT",
    "type" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "ACTION_CROP_AND_SET_WALLPAPER",
    "type" : "String",
    "comment" : "\n     * Activity Action: Show settings for choosing wallpaper. Do not use directly to construct\n     * an intent; instead, use {@link #getCropAndSetWallpaperIntent}.\n     * <p>Input:  {@link Intent#getData} is the URI of the image to crop and set as wallpaper.\n     * <p>Output: RESULT_OK if user decided to crop/set the wallpaper, RESULT_CANCEL otherwise\n     * Activities that support this intent should specify a MIME filter of \"image/*\"\n     ",
    "links" : [ "#getCropAndSetWallpaperIntent", "Intent#getData" ]
  }, {
    "name" : "ACTION_LIVE_WALLPAPER_CHOOSER",
    "type" : "String",
    "comment" : "\n     * Launch an activity for the user to pick the current global live\n     * wallpaper.\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_CHANGE_LIVE_WALLPAPER",
    "type" : "String",
    "comment" : "\n     * Directly launch live wallpaper preview, allowing the user to immediately\n     * confirm to switch to a specific live wallpaper.  You must specify\n     * {@link #EXTRA_LIVE_WALLPAPER_COMPONENT} with the ComponentName of\n     * a live wallpaper component that is to be shown.\n     ",
    "links" : [ "#EXTRA_LIVE_WALLPAPER_COMPONENT" ]
  }, {
    "name" : "EXTRA_LIVE_WALLPAPER_COMPONENT",
    "type" : "String",
    "comment" : "\n     * Extra in {@link #ACTION_CHANGE_LIVE_WALLPAPER} that specifies the\n     * ComponentName of a live wallpaper that should be shown as a preview,\n     * for the user to confirm.\n     ",
    "links" : [ "#ACTION_CHANGE_LIVE_WALLPAPER" ]
  }, {
    "name" : "WALLPAPER_PREVIEW_META_DATA",
    "type" : "String",
    "comment" : "\n     * Manifest entry for activities that respond to {@link Intent#ACTION_SET_WALLPAPER}\n     * which allows them to provide a custom large icon associated with this action.\n     ",
    "links" : [ "Intent#ACTION_SET_WALLPAPER" ]
  }, {
    "name" : "COMMAND_TAP",
    "type" : "String",
    "comment" : "\n     * Command for {@link #sendWallpaperCommand}: reported by the wallpaper\n     * host when the user taps on an empty area (not performing an action\n     * in the host).  The x and y arguments are the location of the tap in\n     * screen coordinates.\n     ",
    "links" : [ "#sendWallpaperCommand" ]
  }, {
    "name" : "COMMAND_SECONDARY_TAP",
    "type" : "String",
    "comment" : "\n     * Command for {@link #sendWallpaperCommand}: reported by the wallpaper\n     * host when the user releases a secondary pointer on an empty area\n     * (not performing an action in the host).  The x and y arguments are\n     * the location of the secondary tap in screen coordinates.\n     ",
    "links" : [ "#sendWallpaperCommand" ]
  }, {
    "name" : "COMMAND_DROP",
    "type" : "String",
    "comment" : "\n     * Command for {@link #sendWallpaperCommand}: reported by the wallpaper\n     * host when the user drops an object into an area of the host.  The x\n     * and y arguments are the location of the drop.\n     ",
    "links" : [ "#sendWallpaperCommand" ]
  }, {
    "name" : "COMMAND_REAPPLY",
    "type" : "String",
    "comment" : "\n     * Command for {@link #sendWallpaperCommand}: reported when the wallpaper that was already\n     * set is re-applied by the user.\n     * @hide\n     ",
    "links" : [ "#sendWallpaperCommand" ]
  }, {
    "name" : "EXTRA_NEW_WALLPAPER_ID",
    "type" : "String",
    "comment" : "\n     * Extra passed back from setWallpaper() giving the new wallpaper's assigned ID.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_SYSTEM",
    "type" : "int",
    "comment" : "\n     * Flag: set or retrieve the general system wallpaper.\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_LOCK",
    "type" : "int",
    "comment" : "\n     * Flag: set or retrieve the lock-screen-specific wallpaper.\n     ",
    "links" : [ ]
  }, {
    "name" : "sSync",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sGlobals",
    "type" : "Globals",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWcgEnabled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCmProxy",
    "type" : "ColorManagementProxy",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " static void initGlobals(IWallpaperManager service, Looper looper)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static WallpaperManager getInstance(Context context)",
    "returnType" : "WallpaperManager",
    "comment" : "\n     * Retrieve a WallpaperManager associated with the given Context.\n     ",
    "links" : [ ]
  }, {
    "name" : "public IWallpaperManager getIWallpaperManager()",
    "returnType" : "IWallpaperManager",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean shouldEnableWideColorGamut()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicate whether wcg (Wide Color Gamut) should be enabled.\n     * <p>\n     * Some devices lack of capability of mixed color spaces composition,\n     * enable wcg on such devices might cause memory or battery concern.\n     * <p>\n     * Therefore, in addition to {@link Configuration#isScreenWideColorGamut()},\n     * we also take mixed color spaces composition (config_enableWcgMode) into account.\n     *\n     * @see Configuration#isScreenWideColorGamut()\n     * @return True if wcg should be enabled for this device.\n     * @hide\n     ",
    "links" : [ "Configuration#isScreenWideColorGamut" ]
  }, {
    "name" : "public Drawable getDrawable()",
    "returnType" : "Drawable",
    "comment" : "\n     * Retrieve the current system wallpaper; if\n     * no wallpaper is set, the system built-in static wallpaper is returned.\n     * This is returned as an\n     * abstract Drawable that you can install in a View to display whatever\n     * wallpaper the user has currently set.\n     * <p>\n     * This method can return null if there is no system wallpaper available, if\n     * wallpapers are not supported in the current user, or if the calling app is not\n     * permitted to access the system wallpaper.\n     *\n     * @return Returns a Drawable object that will draw the system wallpaper,\n     *     or {@code null} if no system wallpaper exists or if the calling application\n     *     is not able to access the wallpaper.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Drawable getBuiltInDrawable()",
    "returnType" : "Drawable",
    "comment" : "\n     * Obtain a drawable for the built-in static system wallpaper.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Drawable getBuiltInDrawable(@SetWallpaperFlags int which)",
    "returnType" : "Drawable",
    "comment" : "\n     * Obtain a drawable for the specified built-in static system wallpaper.\n     *\n     * @param which The {@code FLAG_*} identifier of a valid wallpaper type.  Throws\n     *     IllegalArgumentException if an invalid wallpaper is requested.\n     * @return A Drawable presenting the specified wallpaper image, or {@code null}\n     *     if no built-in default image for that wallpaper type exists.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Drawable getBuiltInDrawable(int outWidth, int outHeight, boolean scaleToFit, float horizontalAlignment, float verticalAlignment)",
    "returnType" : "Drawable",
    "comment" : "\n     * Returns a drawable for the system built-in static wallpaper. Based on the parameters, the\n     * drawable can be cropped and scaled\n     *\n     * @param outWidth The width of the returned drawable\n     * @param outWidth The height of the returned drawable\n     * @param scaleToFit If true, scale the wallpaper down rather than just cropping it\n     * @param horizontalAlignment A float value between 0 and 1 specifying where to crop the image;\n     *        0 for left-aligned, 0.5 for horizontal center-aligned, and 1 for right-aligned\n     * @param verticalAlignment A float value between 0 and 1 specifying where to crop the image;\n     *        0 for top-aligned, 0.5 for vertical center-aligned, and 1 for bottom-aligned\n     * @return A Drawable presenting the built-in default system wallpaper image,\n     *        or {@code null} if no such default image is defined on this device.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Drawable getBuiltInDrawable(int outWidth, int outHeight, boolean scaleToFit, float horizontalAlignment, float verticalAlignment, @SetWallpaperFlags int which)",
    "returnType" : "Drawable",
    "comment" : "\n     * Returns a drawable for the built-in static wallpaper of the specified type.  Based on the\n     * parameters, the drawable can be cropped and scaled.\n     *\n     * @param outWidth The width of the returned drawable\n     * @param outWidth The height of the returned drawable\n     * @param scaleToFit If true, scale the wallpaper down rather than just cropping it\n     * @param horizontalAlignment A float value between 0 and 1 specifying where to crop the image;\n     *        0 for left-aligned, 0.5 for horizontal center-aligned, and 1 for right-aligned\n     * @param verticalAlignment A float value between 0 and 1 specifying where to crop the image;\n     *        0 for top-aligned, 0.5 for vertical center-aligned, and 1 for bottom-aligned\n     * @param which The {@code FLAG_*} identifier of a valid wallpaper type.  Throws\n     *     IllegalArgumentException if an invalid wallpaper is requested.\n     * @return A Drawable presenting the built-in default wallpaper image of the given type,\n     *        or {@code null} if no default image of that type is defined on this device.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static RectF getMaxCropRect(int inWidth, int inHeight, int outWidth, int outHeight, float horizontalAlignment, float verticalAlignment)",
    "returnType" : "RectF",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Drawable peekDrawable()",
    "returnType" : "Drawable",
    "comment" : "\n     * Retrieve the current system wallpaper; if there is no wallpaper set,\n     * a null pointer is returned. This is returned as an\n     * abstract Drawable that you can install in a View to display whatever\n     * wallpaper the user has currently set.\n     *\n     * @return Returns a Drawable object that will draw the wallpaper or a\n     * null pointer if these is none.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Drawable getFastDrawable()",
    "returnType" : "Drawable",
    "comment" : "\n     * Like {@link #getDrawable()}, but the returned Drawable has a number\n     * of limitations to reduce its overhead as much as possible. It will\n     * never scale the wallpaper (only centering it if the requested bounds\n     * do match the bitmap bounds, which should not be typical), doesn't\n     * allow setting an alpha, color filter, or other attributes, etc.  The\n     * bounds of the returned drawable will be initialized to the same bounds\n     * as the wallpaper, so normally you will not need to touch it.  The\n     * drawable also assumes that it will be used in a context running in\n     * the same density as the screen (not in density compatibility mode).\n     *\n     * @return Returns a Drawable object that will draw the wallpaper.\n     ",
    "links" : [ "#getDrawable" ]
  }, {
    "name" : "public Drawable peekFastDrawable()",
    "returnType" : "Drawable",
    "comment" : "\n     * Like {@link #getFastDrawable()}, but if there is no wallpaper set,\n     * a null pointer is returned.\n     *\n     * @return Returns an optimized Drawable object that will draw the\n     * wallpaper or a null pointer if these is none.\n     ",
    "links" : [ "#getFastDrawable" ]
  }, {
    "name" : "public boolean wallpaperSupportsWcg(int which)",
    "returnType" : "boolean",
    "comment" : "\n     * Whether the wallpaper supports Wide Color Gamut or not.\n     * @param which The wallpaper whose image file is to be retrieved. Must be a single\n     *     defined kind of wallpaper, either {@link #FLAG_SYSTEM} or {@link #FLAG_LOCK}.\n     * @return true when supported.\n     *\n     * @see #FLAG_LOCK\n     * @see #FLAG_SYSTEM\n     * @hide\n     ",
    "links" : [ "#FLAG_SYSTEM", "#FLAG_LOCK" ]
  }, {
    "name" : "public Bitmap getBitmap()",
    "returnType" : "Bitmap",
    "comment" : "\n     * Like {@link #getDrawable()} but returns a Bitmap with default {@link Bitmap.Config}.\n     *\n     * @hide\n     ",
    "links" : [ "#getDrawable", "Bitmap.Config" ]
  }, {
    "name" : "public Bitmap getBitmap(boolean hardware)",
    "returnType" : "Bitmap",
    "comment" : "\n     * Like {@link #getDrawable()} but returns a Bitmap.\n     *\n     * @param hardware Asks for a hardware backed bitmap.\n     * @see Bitmap.Config#HARDWARE\n     * @hide\n     ",
    "links" : [ "#getDrawable" ]
  }, {
    "name" : "public Bitmap getBitmapAsUser(int userId, boolean hardware)",
    "returnType" : "Bitmap",
    "comment" : "\n     * Like {@link #getDrawable()} but returns a Bitmap for the provided user.\n     *\n     * @hide\n     ",
    "links" : [ "#getDrawable" ]
  }, {
    "name" : "public ParcelFileDescriptor getWallpaperFile(@SetWallpaperFlags int which)",
    "returnType" : "ParcelFileDescriptor",
    "comment" : "\n     * Get an open, readable file descriptor to the given wallpaper image file.\n     * The caller is responsible for closing the file descriptor when done ingesting the file.\n     *\n     * <p>If no lock-specific wallpaper has been configured for the given user, then\n     * this method will return {@code null} when requesting {@link #FLAG_LOCK} rather than\n     * returning the system wallpaper's image file.\n     *\n     * @param which The wallpaper whose image file is to be retrieved.  Must be a single\n     *     defined kind of wallpaper, either {@link #FLAG_SYSTEM} or\n     *     {@link #FLAG_LOCK}.\n     * @return An open, readable file desriptor to the requested wallpaper image file;\n     *     or {@code null} if no such wallpaper is configured or if the calling app does\n     *     not have permission to read the current wallpaper.\n     *\n     * @see #FLAG_LOCK\n     * @see #FLAG_SYSTEM\n     ",
    "links" : [ "#FLAG_LOCK", "#FLAG_SYSTEM", "#FLAG_LOCK" ]
  }, {
    "name" : "public void addOnColorsChangedListener(@NonNull OnColorsChangedListener listener, @NonNull Handler handler)",
    "returnType" : "void",
    "comment" : "\n     * Registers a listener to get notified when the wallpaper colors change.\n     * @param listener A listener to register\n     * @param handler Where to call it from. Will be called from the main thread\n     *                if null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addOnColorsChangedListener(@NonNull OnColorsChangedListener listener, @NonNull Handler handler, int userId)",
    "returnType" : "void",
    "comment" : "\n     * Registers a listener to get notified when the wallpaper colors change\n     * @param listener A listener to register\n     * @param handler Where to call it from. Will be called from the main thread\n     *                if null.\n     * @param userId Owner of the wallpaper or UserHandle.USER_ALL.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removeOnColorsChangedListener(@NonNull OnColorsChangedListener callback)",
    "returnType" : "void",
    "comment" : "\n     * Stop listening to color updates.\n     * @param callback A callback to unsubscribe.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removeOnColorsChangedListener(@NonNull OnColorsChangedListener callback, int userId)",
    "returnType" : "void",
    "comment" : "\n     * Stop listening to color updates.\n     * @param callback A callback to unsubscribe.\n     * @param userId Owner of the wallpaper or UserHandle.USER_ALL.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public WallpaperColors getWallpaperColors(int which)",
    "returnType" : "WallpaperColors",
    "comment" : "\n     * Get the primary colors of a wallpaper.\n     *\n     * <p>This method can return {@code null} when:\n     * <ul>\n     * <li>Colors are still being processed by the system.</li>\n     * <li>The user has chosen to use a live wallpaper:  live wallpapers might not\n     * implement\n     * {@link android.service.wallpaper.WallpaperService.Engine#onComputeColors()\n     *     WallpaperService.Engine#onComputeColors()}.</li>\n     * </ul>\n     * <p>Please note that this API will go through IPC and may take some time to\n     * calculate the wallpaper color, which could block the caller thread, so it is\n     * not recommended to call this in the UI thread.</p>\n     *\n     * @param which Wallpaper type. Must be either {@link #FLAG_SYSTEM} or\n     *     {@link #FLAG_LOCK}.\n     * @return Current {@link WallpaperColors} or null if colors are unknown.\n     * @see #addOnColorsChangedListener(OnColorsChangedListener, Handler)\n     ",
    "links" : [ "android.service.wallpaper.WallpaperService.Engine#onComputeColors", "#FLAG_SYSTEM", "#FLAG_LOCK", "WallpaperColors" ]
  }, {
    "name" : "public WallpaperColors getWallpaperColors(int which, int userId)",
    "returnType" : "WallpaperColors",
    "comment" : "\n     * Get the primary colors of the wallpaper configured in the given user.\n     * @param which wallpaper type. Must be either {@link #FLAG_SYSTEM} or\n     *     {@link #FLAG_LOCK}\n     * @param userId Owner of the wallpaper.\n     * @return {@link WallpaperColors} or null if colors are unknown.\n     * @hide\n     ",
    "links" : [ "#FLAG_SYSTEM", "#FLAG_LOCK", "WallpaperColors" ]
  }, {
    "name" : "public ParcelFileDescriptor getWallpaperFile(@SetWallpaperFlags int which, int userId)",
    "returnType" : "ParcelFileDescriptor",
    "comment" : "\n     * Version of {@link #getWallpaperFile(int)} that can access the wallpaper data\n     * for a given user.  The caller must hold the INTERACT_ACROSS_USERS_FULL\n     * permission to access another user's wallpaper data.\n     *\n     * @param which The wallpaper whose image file is to be retrieved.  Must be a single\n     *     defined kind of wallpaper, either {@link #FLAG_SYSTEM} or\n     *     {@link #FLAG_LOCK}.\n     * @param userId The user or profile whose imagery is to be retrieved\n     *\n     * @see #FLAG_LOCK\n     * @see #FLAG_SYSTEM\n     *\n     * @hide\n     ",
    "links" : [ "#getWallpaperFile", "#FLAG_SYSTEM", "#FLAG_LOCK" ]
  }, {
    "name" : "public void forgetLoadedWallpaper()",
    "returnType" : "void",
    "comment" : "\n     * Remove all internal references to the last loaded wallpaper.  Useful\n     * for apps that want to reduce memory usage when they only temporarily\n     * need to have the wallpaper.  After calling, the next request for the\n     * wallpaper will require reloading it again from disk.\n     ",
    "links" : [ ]
  }, {
    "name" : "public WallpaperInfo getWallpaperInfo()",
    "returnType" : "WallpaperInfo",
    "comment" : "\n     * Returns the information about the wallpaper if the current wallpaper is\n     * a live wallpaper component. Otherwise, if the wallpaper is a static image,\n     * this returns null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public WallpaperInfo getWallpaperInfo(int userId)",
    "returnType" : "WallpaperInfo",
    "comment" : "\n     * Returns the information about the wallpaper if the current wallpaper is\n     * a live wallpaper component. Otherwise, if the wallpaper is a static image,\n     * this returns null.\n     *\n     * @param userId Owner of the wallpaper.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getWallpaperId(@SetWallpaperFlags int which)",
    "returnType" : "int",
    "comment" : "\n     * Get the ID of the current wallpaper of the given kind.  If there is no\n     * such wallpaper configured, returns a negative number.\n     *\n     * <p>Every time the wallpaper image is set, a new ID is assigned to it.\n     * This method allows the caller to determine whether the wallpaper imagery\n     * has changed, regardless of how that change happened.\n     *\n     * @param which The wallpaper whose ID is to be returned.  Must be a single\n     *     defined kind of wallpaper, either {@link #FLAG_SYSTEM} or\n     *     {@link #FLAG_LOCK}.\n     * @return The positive numeric ID of the current wallpaper of the given kind,\n     *     or a negative value if no such wallpaper is configured.\n     ",
    "links" : [ "#FLAG_SYSTEM", "#FLAG_LOCK" ]
  }, {
    "name" : "public int getWallpaperIdForUser(@SetWallpaperFlags int which, int userId)",
    "returnType" : "int",
    "comment" : "\n     * Get the ID of the given user's current wallpaper of the given kind.  If there\n     * is no such wallpaper configured, returns a negative number.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Intent getCropAndSetWallpaperIntent(Uri imageUri)",
    "returnType" : "Intent",
    "comment" : "\n     * Gets an Intent that will launch an activity that crops the given\n     * image and sets the device's wallpaper. If there is a default HOME activity\n     * that supports cropping wallpapers, it will be preferred as the default.\n     * Use this method instead of directly creating a {@link #ACTION_CROP_AND_SET_WALLPAPER}\n     * intent.\n     *\n     * @param imageUri The image URI that will be set in the intent. The must be a content\n     *                 URI and its provider must resolve its type to \"image/*\"\n     *\n     * @throws IllegalArgumentException if the URI is not a content URI or its MIME type is\n     *         not \"image/*\"\n     ",
    "links" : [ "#ACTION_CROP_AND_SET_WALLPAPER" ]
  }, {
    "name" : "public void setResource(@RawRes int resid) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Change the current system wallpaper to the bitmap in the given resource.\n     * The resource is opened as a raw data stream and copied into the\n     * wallpaper; it must be a valid PNG or JPEG image.  On success, the intent\n     * {@link Intent#ACTION_WALLPAPER_CHANGED} is broadcast.\n     *\n     * <p>This method requires the caller to hold the permission\n     * {@link android.Manifest.permission#SET_WALLPAPER}.\n     *\n     * @param resid The resource ID of the bitmap to be used as the wallpaper image\n     *\n     * @throws IOException If an error occurs reverting to the built-in\n     * wallpaper.\n     ",
    "links" : [ "Intent#ACTION_WALLPAPER_CHANGED", "android.Manifest.permission#SET_WALLPAPER" ]
  }, {
    "name" : "public int setResource(@RawRes int resid, @SetWallpaperFlags int which) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Version of {@link #setResource(int)} that allows the caller to specify which\n     * of the supported wallpaper categories to set.\n     *\n     * @param resid The resource ID of the bitmap to be used as the wallpaper image\n     * @param which Flags indicating which wallpaper(s) to configure with the new imagery\n     *\n     * @see #FLAG_LOCK\n     * @see #FLAG_SYSTEM\n     *\n     * @return An integer ID assigned to the newly active wallpaper; or zero on failure.\n     *\n     * @throws IOException\n     ",
    "links" : [ "#setResource" ]
  }, {
    "name" : "public void setBitmap(Bitmap bitmap) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Change the current system wallpaper to a bitmap.  The given bitmap is\n     * converted to a PNG and stored as the wallpaper.  On success, the intent\n     * {@link Intent#ACTION_WALLPAPER_CHANGED} is broadcast.\n     *\n     * <p>This method is equivalent to calling\n     * {@link #setBitmap(Bitmap, Rect, boolean)} and passing {@code null} for the\n     * {@code visibleCrop} rectangle and {@code true} for the {@code allowBackup}\n     * parameter.\n     *\n     * <p>This method requires the caller to hold the permission\n     * {@link android.Manifest.permission#SET_WALLPAPER}.\n     *\n     * @param bitmap The bitmap to be used as the new system wallpaper.\n     *\n     * @throws IOException If an error occurs when attempting to set the wallpaper\n     *     to the provided image.\n     ",
    "links" : [ "Intent#ACTION_WALLPAPER_CHANGED", "#setBitmap", "android.Manifest.permission#SET_WALLPAPER" ]
  }, {
    "name" : "public int setBitmap(Bitmap fullImage, Rect visibleCropHint, boolean allowBackup) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Change the current system wallpaper to a bitmap, specifying a hint about\n     * which subrectangle of the full image is to be visible.  The OS will then\n     * try to best present the given portion of the full image as the static system\n     * wallpaper image.  On success, the intent\n     * {@link Intent#ACTION_WALLPAPER_CHANGED} is broadcast.\n     *\n     * <p>Passing {@code null} as the {@code visibleHint} parameter is equivalent to\n     * passing (0, 0, {@code fullImage.getWidth()}, {@code fullImage.getHeight()}).\n     *\n     * <p>This method requires the caller to hold the permission\n     * {@link android.Manifest.permission#SET_WALLPAPER}.\n     *\n     * @param fullImage A bitmap that will supply the wallpaper imagery.\n     * @param visibleCropHint The rectangular subregion of {@code fullImage} that should be\n     *     displayed as wallpaper.  Passing {@code null} for this parameter means that\n     *     the full image should be displayed if possible given the image's and device's\n     *     aspect ratios, etc.\n     * @param allowBackup {@code true} if the OS is permitted to back up this wallpaper\n     *     image for restore to a future device; {@code false} otherwise.\n     *\n     * @return An integer ID assigned to the newly active wallpaper; or zero on failure.\n     *\n     * @throws IOException If an error occurs when attempting to set the wallpaper\n     *     to the provided image.\n     * @throws IllegalArgumentException If the {@code visibleCropHint} rectangle is\n     *     empty or invalid.\n     ",
    "links" : [ "Intent#ACTION_WALLPAPER_CHANGED", "android.Manifest.permission#SET_WALLPAPER" ]
  }, {
    "name" : "public int setBitmap(Bitmap fullImage, Rect visibleCropHint, boolean allowBackup, @SetWallpaperFlags int which) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Version of {@link #setBitmap(Bitmap, Rect, boolean)} that allows the caller\n     * to specify which of the supported wallpaper categories to set.\n     *\n     * @param fullImage A bitmap that will supply the wallpaper imagery.\n     * @param visibleCropHint The rectangular subregion of {@code fullImage} that should be\n     *     displayed as wallpaper.  Passing {@code null} for this parameter means that\n     *     the full image should be displayed if possible given the image's and device's\n     *     aspect ratios, etc.\n     * @param allowBackup {@code true} if the OS is permitted to back up this wallpaper\n     *     image for restore to a future device; {@code false} otherwise.\n     * @param which Flags indicating which wallpaper(s) to configure with the new imagery.\n     *\n     * @see #FLAG_LOCK\n     * @see #FLAG_SYSTEM\n     *\n     * @return An integer ID assigned to the newly active wallpaper; or zero on failure.\n     *\n     * @throws IOException\n     ",
    "links" : [ "#setBitmap" ]
  }, {
    "name" : "public int setBitmap(Bitmap fullImage, Rect visibleCropHint, boolean allowBackup, @SetWallpaperFlags int which, int userId) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Like {@link #setBitmap(Bitmap, Rect, boolean, int)}, but allows to pass in an explicit user\n     * id. If the user id doesn't match the user id the process is running under, calling this\n     * requires permission {@link android.Manifest.permission#INTERACT_ACROSS_USERS_FULL}.\n     * @hide\n     ",
    "links" : [ "#setBitmap", "android.Manifest.permission#INTERACT_ACROSS_USERS_FULL" ]
  }, {
    "name" : "private final void validateRect(Rect rect)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setStream(InputStream bitmapData) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Change the current system wallpaper to a specific byte stream.  The\n     * give InputStream is copied into persistent storage and will now be\n     * used as the wallpaper.  Currently it must be either a JPEG or PNG\n     * image.  On success, the intent {@link Intent#ACTION_WALLPAPER_CHANGED}\n     * is broadcast.\n     *\n     * <p>This method is equivalent to calling\n     * {@link #setStream(InputStream, Rect, boolean)} and passing {@code null} for the\n     * {@code visibleCrop} rectangle and {@code true} for the {@code allowBackup}\n     * parameter.\n     *\n     * <p>This method requires the caller to hold the permission\n     * {@link android.Manifest.permission#SET_WALLPAPER}.\n     *\n     * @param bitmapData A stream containing the raw data to install as a wallpaper.  This\n     *     data can be in any format handled by {@link BitmapRegionDecoder}.\n     *\n     * @throws IOException If an error occurs when attempting to set the wallpaper\n     *     based on the provided image data.\n     ",
    "links" : [ "Intent#ACTION_WALLPAPER_CHANGED", "#setStream", "android.Manifest.permission#SET_WALLPAPER", "BitmapRegionDecoder" ]
  }, {
    "name" : "private void copyStreamToWallpaperFile(InputStream data, FileOutputStream fos) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int setStream(InputStream bitmapData, Rect visibleCropHint, boolean allowBackup) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Change the current system wallpaper to a specific byte stream, specifying a\n     * hint about which subrectangle of the full image is to be visible.  The OS will\n     * then try to best present the given portion of the full image as the static system\n     * wallpaper image.  The data from the given InputStream is copied into persistent\n     * storage and will then be used as the system wallpaper.  Currently the data must\n     * be either a JPEG or PNG image.  On success, the intent\n     * {@link Intent#ACTION_WALLPAPER_CHANGED} is broadcast.\n     *\n     * <p>This method requires the caller to hold the permission\n     * {@link android.Manifest.permission#SET_WALLPAPER}.\n     *\n     * @param bitmapData A stream containing the raw data to install as a wallpaper.  This\n     *     data can be in any format handled by {@link BitmapRegionDecoder}.\n     * @param visibleCropHint The rectangular subregion of the streamed image that should be\n     *     displayed as wallpaper.  Passing {@code null} for this parameter means that\n     *     the full image should be displayed if possible given the image's and device's\n     *     aspect ratios, etc.\n     * @param allowBackup {@code true} if the OS is permitted to back up this wallpaper\n     *     image for restore to a future device; {@code false} otherwise.\n     * @return An integer ID assigned to the newly active wallpaper; or zero on failure.\n     *\n     * @see #getWallpaperId(int)\n     *\n     * @throws IOException If an error occurs when attempting to set the wallpaper\n     *     based on the provided image data.\n     * @throws IllegalArgumentException If the {@code visibleCropHint} rectangle is\n     *     empty or invalid.\n     ",
    "links" : [ "Intent#ACTION_WALLPAPER_CHANGED", "android.Manifest.permission#SET_WALLPAPER", "BitmapRegionDecoder" ]
  }, {
    "name" : "public int setStream(InputStream bitmapData, Rect visibleCropHint, boolean allowBackup, @SetWallpaperFlags int which) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Version of {@link #setStream(InputStream, Rect, boolean)} that allows the caller\n     * to specify which of the supported wallpaper categories to set.\n     *\n     * @param bitmapData A stream containing the raw data to install as a wallpaper.  This\n     *     data can be in any format handled by {@link BitmapRegionDecoder}.\n     * @param visibleCropHint The rectangular subregion of the streamed image that should be\n     *     displayed as wallpaper.  Passing {@code null} for this parameter means that\n     *     the full image should be displayed if possible given the image's and device's\n     *     aspect ratios, etc.\n     * @param allowBackup {@code true} if the OS is permitted to back up this wallpaper\n     *     image for restore to a future device; {@code false} otherwise.\n     * @param which Flags indicating which wallpaper(s) to configure with the new imagery.\n     * @return An integer ID assigned to the newly active wallpaper; or zero on failure.\n     *\n     * @see #getWallpaperId(int)\n     * @see #FLAG_LOCK\n     * @see #FLAG_SYSTEM\n     *\n     * @throws IOException\n     ",
    "links" : [ "#setStream", "BitmapRegionDecoder" ]
  }, {
    "name" : "public boolean hasResourceWallpaper(@RawRes int resid)",
    "returnType" : "boolean",
    "comment" : "\n     * Return whether any users are currently set to use the wallpaper\n     * with the given resource ID.  That is, their wallpaper has been\n     * set through {@link #setResource(int)} with the same resource id.\n     ",
    "links" : [ "#setResource" ]
  }, {
    "name" : "public int getDesiredMinimumWidth()",
    "returnType" : "int",
    "comment" : "\n     * Returns the desired minimum width for the wallpaper. Callers of\n     * {@link #setBitmap(android.graphics.Bitmap)} or\n     * {@link #setStream(java.io.InputStream)} should check this value\n     * beforehand to make sure the supplied wallpaper respects the desired\n     * minimum width.\n     *\n     * If the returned value is <= 0, the caller should use the width of\n     * the default display instead.\n     *\n     * @return The desired minimum width for the wallpaper. This value should\n     * be honored by applications that set the wallpaper but it is not\n     * mandatory.\n     *\n     * @see #getDesiredMinimumHeight()\n     ",
    "links" : [ "#setBitmap", "#setStream" ]
  }, {
    "name" : "public int getDesiredMinimumHeight()",
    "returnType" : "int",
    "comment" : "\n     * Returns the desired minimum height for the wallpaper. Callers of\n     * {@link #setBitmap(android.graphics.Bitmap)} or\n     * {@link #setStream(java.io.InputStream)} should check this value\n     * beforehand to make sure the supplied wallpaper respects the desired\n     * minimum height.\n     *\n     * If the returned value is <= 0, the caller should use the height of\n     * the default display instead.\n     *\n     * @return The desired minimum height for the wallpaper. This value should\n     * be honored by applications that set the wallpaper but it is not\n     * mandatory.\n     *\n     * @see #getDesiredMinimumWidth()\n     ",
    "links" : [ "#setBitmap", "#setStream" ]
  }, {
    "name" : "public void suggestDesiredDimensions(int minimumWidth, int minimumHeight)",
    "returnType" : "void",
    "comment" : "\n     * For use only by the current home application, to specify the size of\n     * wallpaper it would like to use.  This allows such applications to have\n     * a virtual wallpaper that is larger than the physical screen, matching\n     * the size of their workspace.\n     *\n     * <p class=\"note\">Calling this method from apps other than the active\n     * home app is not guaranteed to work properly.  Other apps that supply\n     * wallpaper imagery should use {@link #getDesiredMinimumWidth()} and\n     * {@link #getDesiredMinimumHeight()} and construct a wallpaper that\n     * matches those dimensions.\n     *\n     * <p>This method requires the caller to hold the permission\n     * {@link android.Manifest.permission#SET_WALLPAPER_HINTS}.\n     *\n     * @param minimumWidth Desired minimum width\n     * @param minimumHeight Desired minimum height\n     ",
    "links" : [ "#getDesiredMinimumWidth", "#getDesiredMinimumHeight", "android.Manifest.permission#SET_WALLPAPER_HINTS" ]
  }, {
    "name" : "public void setDisplayPadding(Rect padding)",
    "returnType" : "void",
    "comment" : "\n     * Specify extra padding that the wallpaper should have outside of the display.\n     * That is, the given padding supplies additional pixels the wallpaper should extend\n     * outside of the display itself.\n     *\n     * <p>This method requires the caller to hold the permission\n     * {@link android.Manifest.permission#SET_WALLPAPER_HINTS}.\n     *\n     * @param padding The number of pixels the wallpaper should extend beyond the display,\n     * on its left, top, right, and bottom sides.\n     ",
    "links" : [ "android.Manifest.permission#SET_WALLPAPER_HINTS" ]
  }, {
    "name" : "public void setDisplayOffset(IBinder windowToken, int x, int y)",
    "returnType" : "void",
    "comment" : "\n     * Apply a raw offset to the wallpaper window.  Should only be used in\n     * combination with {@link #setDisplayPadding(android.graphics.Rect)} when you\n     * have ensured that the wallpaper will extend outside of the display area so that\n     * it can be moved without leaving part of the display uncovered.\n     * @param x The offset, in pixels, to apply to the left edge.\n     * @param y The offset, in pixels, to apply to the top edge.\n     * @hide\n     ",
    "links" : [ "#setDisplayPadding" ]
  }, {
    "name" : "public void clearWallpaper()",
    "returnType" : "void",
    "comment" : "\n     * Reset all wallpaper to the factory default.\n     *\n     * <p>This method requires the caller to hold the permission\n     * {@link android.Manifest.permission#SET_WALLPAPER}.\n     ",
    "links" : [ "android.Manifest.permission#SET_WALLPAPER" ]
  }, {
    "name" : "public void clearWallpaper(@SetWallpaperFlags int which, int userId)",
    "returnType" : "void",
    "comment" : "\n     * Clear the wallpaper for a specific user.  The caller must hold the\n     * INTERACT_ACROSS_USERS_FULL permission to clear another user's\n     * wallpaper, and must hold the SET_WALLPAPER permission in all\n     * circumstances.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean setWallpaperComponent(ComponentName name)",
    "returnType" : "boolean",
    "comment" : "\n     * Set the live wallpaper.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean setWallpaperComponent(ComponentName name, int userId)",
    "returnType" : "boolean",
    "comment" : "\n     * Set the live wallpaper.\n     *\n     * This can only be called by packages with android.permission.SET_WALLPAPER_COMPONENT\n     * permission. The caller must hold the INTERACT_ACROSS_USERS_FULL permission to change\n     * another user's wallpaper.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setWallpaperOffsets(IBinder windowToken, float xOffset, float yOffset)",
    "returnType" : "void",
    "comment" : "\n     * Set the display position of the current wallpaper within any larger space, when\n     * that wallpaper is visible behind the given window.  The X and Y offsets\n     * are floating point numbers ranging from 0 to 1, representing where the\n     * wallpaper should be positioned within the screen space.  These only\n     * make sense when the wallpaper is larger than the display.\n     *\n     * @param windowToken The window who these offsets should be associated\n     * with, as returned by {@link android.view.View#getWindowToken()\n     * View.getWindowToken()}.\n     * @param xOffset The offset along the X dimension, from 0 to 1.\n     * @param yOffset The offset along the Y dimension, from 0 to 1.\n     ",
    "links" : [ "android.view.View#getWindowToken" ]
  }, {
    "name" : "public void setWallpaperOffsetSteps(float xStep, float yStep)",
    "returnType" : "void",
    "comment" : "\n     * For applications that use multiple virtual screens showing a wallpaper,\n     * specify the step size between virtual screens. For example, if the\n     * launcher has 3 virtual screens, it would specify an xStep of 0.5,\n     * since the X offset for those screens are 0.0, 0.5 and 1.0\n     * @param xStep The X offset delta from one screen to the next one\n     * @param yStep The Y offset delta from one screen to the next one\n     ",
    "links" : [ ]
  }, {
    "name" : "public void sendWallpaperCommand(IBinder windowToken, String action, int x, int y, int z, Bundle extras)",
    "returnType" : "void",
    "comment" : "\n     * Send an arbitrary command to the current active wallpaper.\n     *\n     * @param windowToken The window who these offsets should be associated\n     * with, as returned by {@link android.view.View#getWindowToken()\n     * View.getWindowToken()}.\n     * @param action Name of the command to perform.  This must be a scoped\n     * name to avoid collisions, such as \"com.mycompany.wallpaper.DOIT\".\n     * @param x Arbitrary integer argument based on command.\n     * @param y Arbitrary integer argument based on command.\n     * @param z Arbitrary integer argument based on command.\n     * @param extras Optional additional information for the command, or null.\n     ",
    "links" : [ "android.view.View#getWindowToken" ]
  }, {
    "name" : "public void setWallpaperZoomOut(IBinder windowToken, float zoom)",
    "returnType" : "void",
    "comment" : "\n     * Set the current zoom out level of the wallpaper\n     * @param zoom from 0 to 1 (inclusive) where 1 means fully zoomed out, 0 means fully zoomed in\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isWallpaperSupported()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether wallpapers are supported for the calling user. If this function returns\n     * {@code false}, any attempts to changing the wallpaper will have no effect,\n     * and any attempt to obtain of the wallpaper will return {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSetWallpaperAllowed()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the calling package is allowed to set the wallpaper for the calling user.\n     * If this function returns {@code false}, any attempts to change the wallpaper will have\n     * no effect. Always returns {@code true} for device owner and profile owner.\n     *\n     * @see android.os.UserManager#DISALLOW_SET_WALLPAPER\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clearWallpaperOffsets(IBinder windowToken)",
    "returnType" : "void",
    "comment" : "\n     * Clear the offsets previously associated with this window through\n     * {@link #setWallpaperOffsets(IBinder, float, float)}.  This reverts\n     * the window to its default state, where it does not cause the wallpaper\n     * to scroll from whatever its last offsets were.\n     *\n     * @param windowToken The window who these offsets should be associated\n     * with, as returned by {@link android.view.View#getWindowToken()\n     * View.getWindowToken()}.\n     ",
    "links" : [ "#setWallpaperOffsets", "android.view.View#getWindowToken" ]
  }, {
    "name" : "public void clear() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Remove any currently set system wallpaper, reverting to the system's built-in\n     * wallpaper. On success, the intent {@link Intent#ACTION_WALLPAPER_CHANGED}\n     * is broadcast.\n     *\n     * <p>This method requires the caller to hold the permission\n     * {@link android.Manifest.permission#SET_WALLPAPER}.\n     *\n     * @throws IOException If an error occurs reverting to the built-in\n     * wallpaper.\n     ",
    "links" : [ "Intent#ACTION_WALLPAPER_CHANGED", "android.Manifest.permission#SET_WALLPAPER" ]
  }, {
    "name" : "public void clear(@SetWallpaperFlags int which) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Remove one or more currently set wallpapers, reverting to the system default\n     * display for each one.  If {@link #FLAG_SYSTEM} is set in the {@code which}\n     * parameter, the intent {@link Intent#ACTION_WALLPAPER_CHANGED} will be broadcast\n     * upon success.\n     *\n     * @param which A bitwise combination of {@link #FLAG_SYSTEM} or\n     *   {@link #FLAG_LOCK}\n     * @throws IOException If an error occurs reverting to the built-in wallpaper.\n     ",
    "links" : [ "#FLAG_SYSTEM", "Intent#ACTION_WALLPAPER_CHANGED", "#FLAG_SYSTEM", "#FLAG_LOCK" ]
  }, {
    "name" : "public static InputStream openDefaultWallpaper(Context context, @SetWallpaperFlags int which)",
    "returnType" : "InputStream",
    "comment" : "\n     * Open stream representing the default static image wallpaper.\n     *\n     * If the device defines no default wallpaper of the requested kind,\n     * {@code null} is returned.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ComponentName getDefaultWallpaperComponent(Context context)",
    "returnType" : "ComponentName",
    "comment" : "\n     * Return {@link ComponentName} of the default live wallpaper, or\n     * {@code null} if none is defined.\n     *\n     * @hide\n     ",
    "links" : [ "ComponentName" ]
  }, {
    "name" : "public boolean setLockWallpaperCallback(IWallpaperManagerCallback callback)",
    "returnType" : "boolean",
    "comment" : "\n     * Register a callback for lock wallpaper observation. Only the OS may use this.\n     *\n     * @return true on success; false on error.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isWallpaperBackupEligible(int which)",
    "returnType" : "boolean",
    "comment" : "\n     * Is the current system wallpaper eligible for backup?\n     *\n     * Only the OS itself may use this method.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public ColorManagementProxy getColorManagementProxy()",
    "returnType" : "ColorManagementProxy",
    "comment" : "\n     * Get the instance of {@link ColorManagementProxy}.\n     *\n     * @return instance of {@link ColorManagementProxy}.\n     * @hide\n     ",
    "links" : [ "ColorManagementProxy", "ColorManagementProxy" ]
  } ],
  "variableNames" : [ "TAG", "DEBUG", "mWallpaperXStep", "mWallpaperYStep", "PROP_WALLPAPER", "PROP_LOCK_WALLPAPER", "PROP_WALLPAPER_COMPONENT", "ACTION_CROP_AND_SET_WALLPAPER", "ACTION_LIVE_WALLPAPER_CHOOSER", "ACTION_CHANGE_LIVE_WALLPAPER", "EXTRA_LIVE_WALLPAPER_COMPONENT", "WALLPAPER_PREVIEW_META_DATA", "COMMAND_TAP", "COMMAND_SECONDARY_TAP", "COMMAND_DROP", "COMMAND_REAPPLY", "EXTRA_NEW_WALLPAPER_ID", "FLAG_SYSTEM", "FLAG_LOCK", "sSync", "sGlobals", "mContext", "mWcgEnabled", "mCmProxy" ],
  "methodNames" : [ " static void initGlobals(IWallpaperManager service, Looper looper)", "public static WallpaperManager getInstance(Context context)", "public IWallpaperManager getIWallpaperManager()", "public boolean shouldEnableWideColorGamut()", "public Drawable getDrawable()", "public Drawable getBuiltInDrawable()", "public Drawable getBuiltInDrawable(@SetWallpaperFlags int which)", "public Drawable getBuiltInDrawable(int outWidth, int outHeight, boolean scaleToFit, float horizontalAlignment, float verticalAlignment)", "public Drawable getBuiltInDrawable(int outWidth, int outHeight, boolean scaleToFit, float horizontalAlignment, float verticalAlignment, @SetWallpaperFlags int which)", "private static RectF getMaxCropRect(int inWidth, int inHeight, int outWidth, int outHeight, float horizontalAlignment, float verticalAlignment)", "public Drawable peekDrawable()", "public Drawable getFastDrawable()", "public Drawable peekFastDrawable()", "public boolean wallpaperSupportsWcg(int which)", "public Bitmap getBitmap()", "public Bitmap getBitmap(boolean hardware)", "public Bitmap getBitmapAsUser(int userId, boolean hardware)", "public ParcelFileDescriptor getWallpaperFile(@SetWallpaperFlags int which)", "public void addOnColorsChangedListener(@NonNull OnColorsChangedListener listener, @NonNull Handler handler)", "public void addOnColorsChangedListener(@NonNull OnColorsChangedListener listener, @NonNull Handler handler, int userId)", "public void removeOnColorsChangedListener(@NonNull OnColorsChangedListener callback)", "public void removeOnColorsChangedListener(@NonNull OnColorsChangedListener callback, int userId)", "public WallpaperColors getWallpaperColors(int which)", "public WallpaperColors getWallpaperColors(int which, int userId)", "public ParcelFileDescriptor getWallpaperFile(@SetWallpaperFlags int which, int userId)", "public void forgetLoadedWallpaper()", "public WallpaperInfo getWallpaperInfo()", "public WallpaperInfo getWallpaperInfo(int userId)", "public int getWallpaperId(@SetWallpaperFlags int which)", "public int getWallpaperIdForUser(@SetWallpaperFlags int which, int userId)", "public Intent getCropAndSetWallpaperIntent(Uri imageUri)", "public void setResource(@RawRes int resid) throws IOException", "public int setResource(@RawRes int resid, @SetWallpaperFlags int which) throws IOException", "public void setBitmap(Bitmap bitmap) throws IOException", "public int setBitmap(Bitmap fullImage, Rect visibleCropHint, boolean allowBackup) throws IOException", "public int setBitmap(Bitmap fullImage, Rect visibleCropHint, boolean allowBackup, @SetWallpaperFlags int which) throws IOException", "public int setBitmap(Bitmap fullImage, Rect visibleCropHint, boolean allowBackup, @SetWallpaperFlags int which, int userId) throws IOException", "private final void validateRect(Rect rect)", "public void setStream(InputStream bitmapData) throws IOException", "private void copyStreamToWallpaperFile(InputStream data, FileOutputStream fos) throws IOException", "public int setStream(InputStream bitmapData, Rect visibleCropHint, boolean allowBackup) throws IOException", "public int setStream(InputStream bitmapData, Rect visibleCropHint, boolean allowBackup, @SetWallpaperFlags int which) throws IOException", "public boolean hasResourceWallpaper(@RawRes int resid)", "public int getDesiredMinimumWidth()", "public int getDesiredMinimumHeight()", "public void suggestDesiredDimensions(int minimumWidth, int minimumHeight)", "public void setDisplayPadding(Rect padding)", "public void setDisplayOffset(IBinder windowToken, int x, int y)", "public void clearWallpaper()", "public void clearWallpaper(@SetWallpaperFlags int which, int userId)", "public boolean setWallpaperComponent(ComponentName name)", "public boolean setWallpaperComponent(ComponentName name, int userId)", "public void setWallpaperOffsets(IBinder windowToken, float xOffset, float yOffset)", "public void setWallpaperOffsetSteps(float xStep, float yStep)", "public void sendWallpaperCommand(IBinder windowToken, String action, int x, int y, int z, Bundle extras)", "public void setWallpaperZoomOut(IBinder windowToken, float zoom)", "public boolean isWallpaperSupported()", "public boolean isSetWallpaperAllowed()", "public void clearWallpaperOffsets(IBinder windowToken)", "public void clear() throws IOException", "public void clear(@SetWallpaperFlags int which) throws IOException", "public static InputStream openDefaultWallpaper(Context context, @SetWallpaperFlags int which)", "public static ComponentName getDefaultWallpaperComponent(Context context)", "public boolean setLockWallpaperCallback(IWallpaperManagerCallback callback)", "public boolean isWallpaperBackupEligible(int which)", "public ColorManagementProxy getColorManagementProxy()" ]
}