{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/Ringtone.java",
  "packageName" : "android.media",
  "className" : "Ringtone",
  "comment" : "\n * Ringtone provides a quick method for playing a ringtone, notification, or\n * other similar types of sounds.\n * <p>\n * For ways of retrieving {@link Ringtone} objects or to show a ringtone\n * picker, see {@link RingtoneManager}.\n *\n * @see RingtoneManager\n ",
  "links" : [ "android.media.Ringtone", "android.media.RingtoneManager" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOGD",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MEDIA_COLUMNS",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MEDIA_SELECTION",
    "type" : "String",
    "comment" : " Selection that limits query results to just audio files ",
    "links" : [ ]
  }, {
    "name" : "sActiveRingtones",
    "type" : "ArrayList<Ringtone>",
    "comment" : " keep references on active Ringtones until stopped or completion listener called.",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAudioManager",
    "type" : "AudioManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVolumeShaperConfig",
    "type" : "VolumeShaper.Configuration",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVolumeShaper",
    "type" : "VolumeShaper",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAllowRemote",
    "type" : "boolean",
    "comment" : "\n     * Flag indicating if we're allowed to fall back to remote playback using\n     * {@link #mRemotePlayer}. Typically this is false when we're the remote\n     * player and there is nobody else to delegate to.\n     ",
    "links" : [ "#mRemotePlayer" ]
  }, {
    "name" : "mRemotePlayer",
    "type" : "IRingtonePlayer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRemoteToken",
    "type" : "Binder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLocalPlayer",
    "type" : "MediaPlayer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCompletionListener",
    "type" : "MyOnCompletionListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHapticGenerator",
    "type" : "HapticGenerator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUri",
    "type" : "Uri",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTitle",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAudioAttributes",
    "type" : "AudioAttributes",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPreferBuiltinDevice",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsLooping",
    "type" : "boolean",
    "comment" : " playback properties, use synchronized with mPlaybackSettingsLock",
    "links" : [ ]
  }, {
    "name" : "mVolume",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHapticGeneratorEnabled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPlaybackSettingsLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setStreamType(int streamType)",
    "returnType" : "void",
    "comment" : "\n     * Sets the stream type where this ringtone will be played.\n     *\n     * @param streamType The stream, see {@link AudioManager}.\n     * @deprecated use {@link #setAudioAttributes(AudioAttributes)}\n     ",
    "links" : [ "android.media.AudioManager", "#setAudioAttributes(AudioAttributes)" ]
  }, {
    "name" : "public int getStreamType()",
    "returnType" : "int",
    "comment" : "\n     * Gets the stream type where this ringtone will be played.\n     *\n     * @return The stream type, see {@link AudioManager}.\n     * @deprecated use of stream types is deprecated, see\n     *     {@link #setAudioAttributes(AudioAttributes)}\n     ",
    "links" : [ "android.media.AudioManager", "#setAudioAttributes(AudioAttributes)" ]
  }, {
    "name" : "public void setAudioAttributes(AudioAttributes attributes) throws IllegalArgumentException",
    "returnType" : "void",
    "comment" : "\n     * Sets the {@link AudioAttributes} for this ringtone.\n     * @param attributes the non-null attributes characterizing this ringtone.\n     ",
    "links" : [ "android.media.AudioAttributes" ]
  }, {
    "name" : "public void setAudioAttributesField(@Nullable AudioAttributes attributes)",
    "returnType" : "void",
    "comment" : "\n     * Same as {@link #setAudioAttributes(AudioAttributes)} except this one does not create\n     * the media player.\n     * @hide\n     ",
    "links" : [ "#setAudioAttributes(AudioAttributes)" ]
  }, {
    "name" : "private AudioDeviceInfo getBuiltinDevice(AudioManager audioManager)",
    "returnType" : "AudioDeviceInfo",
    "comment" : "\n     * Finds the output device of type {@link AudioDeviceInfo#TYPE_BUILTIN_SPEAKER}. This device is\n     * the one on which outgoing audio for SIM calls is played.\n     *\n     * @param audioManager the audio manage.\n     * @return the {@link AudioDeviceInfo} corresponding to the builtin device, or {@code null} if\n     *     none can be found.\n     ",
    "links" : [ "android.media.AudioDeviceInfo", "android.media.AudioDeviceInfo#TYPE_BUILTIN_SPEAKER" ]
  }, {
    "name" : "public boolean preferBuiltinDevice(boolean enable)",
    "returnType" : "boolean",
    "comment" : "\n     * Sets the preferred device of the ringtong playback to the built-in device.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean createLocalMediaPlayer()",
    "returnType" : "boolean",
    "comment" : "\n     * Creates a local media player for the ringtone using currently set attributes.\n     * @return true if media player creation succeeded or is deferred,\n     * false if it did not succeed and can't be tried remotely.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasHapticChannels()",
    "returnType" : "boolean",
    "comment" : "\n     * Same as AudioManager.hasHapticChannels except it assumes an already created ringtone.\n     * If the ringtone has not been created, it will load based on URI provided at {@link #setUri}\n     * and if not URI has been set, it will assume no haptic channels are present.\n     * @hide\n     ",
    "links" : [ "#setUri" ]
  }, {
    "name" : "public boolean hasLocalPlayer()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether a local player has been created for this ringtone.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public AudioAttributes getAudioAttributes()",
    "returnType" : "AudioAttributes",
    "comment" : "\n     * Returns the {@link AudioAttributes} used by this object.\n     * @return the {@link AudioAttributes} that were set with\n     *     {@link #setAudioAttributes(AudioAttributes)} or the default attributes if none were set.\n     ",
    "links" : [ "android.media.AudioAttributes", "#setAudioAttributes(AudioAttributes)" ]
  }, {
    "name" : "public void setLooping(boolean looping)",
    "returnType" : "void",
    "comment" : "\n     * Sets the player to be looping or non-looping.\n     * @param looping whether to loop or not.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isLooping()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the looping mode was enabled on this player.\n     * @return true if this player loops when playing.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setVolume(float volume)",
    "returnType" : "void",
    "comment" : "\n     * Sets the volume on this player.\n     * @param volume a raw scalar in range 0.0 to 1.0, where 0.0 mutes this player, and 1.0\n     *   corresponds to no attenuation being applied.\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getVolume()",
    "returnType" : "float",
    "comment" : "\n     * Returns the volume scalar set on this player.\n     * @return a value between 0.0f and 1.0f.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean setHapticGeneratorEnabled(boolean enabled)",
    "returnType" : "boolean",
    "comment" : "\n     * Enable or disable the {@link android.media.audiofx.HapticGenerator} effect. The effect can\n     * only be enabled on devices that support the effect.\n     *\n     * @return true if the HapticGenerator effect is successfully enabled. Otherwise, return false.\n     * @see android.media.audiofx.HapticGenerator#isAvailable()\n     ",
    "links" : [ "android.media.audiofx.HapticGenerator" ]
  }, {
    "name" : "public boolean isHapticGeneratorEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Return whether the {@link android.media.audiofx.HapticGenerator} effect is enabled or not.\n     * @return true if the HapticGenerator is enabled.\n     ",
    "links" : [ "android.media.audiofx.HapticGenerator" ]
  }, {
    "name" : "private void applyPlaybackProperties_sync()",
    "returnType" : "void",
    "comment" : "\n     * Must be called synchronized on mPlaybackSettingsLock\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getTitle(Context context)",
    "returnType" : "String",
    "comment" : "\n     * Returns a human-presentable title for ringtone. Looks in media\n     * content provider. If not in either, uses the filename\n     *\n     * @param context A context used for querying.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getTitle(Context context, Uri uri, boolean followSettingsUri, boolean allowRemote)",
    "returnType" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setUri(Uri uri)",
    "returnType" : "void",
    "comment" : "\n     * Set {@link Uri} to be used for ringtone playback.\n     * {@link IRingtonePlayer}.\n     *\n     * @hide\n     ",
    "links" : [ "android.net.Uri", "IRingtonePlayer" ]
  }, {
    "name" : "public void setVolumeShaperConfig(@Nullable VolumeShaper.Configuration volumeShaperConfig)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setUri(Uri uri, @Nullable VolumeShaper.Configuration volumeShaperConfig)",
    "returnType" : "void",
    "comment" : "\n     * Set {@link Uri} to be used for ringtone playback. Attempts to open\n     * locally, otherwise will delegate playback to remote\n     * {@link IRingtonePlayer}. Add {@link VolumeShaper} if required.\n     *\n     * @hide\n     ",
    "links" : [ "android.media.VolumeShaper", "android.net.Uri", "IRingtonePlayer" ]
  }, {
    "name" : "public Uri getUri()",
    "returnType" : "Uri",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public void play()",
    "returnType" : "void",
    "comment" : "\n     * Plays the ringtone.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void stop()",
    "returnType" : "void",
    "comment" : "\n     * Stops a playing ringtone.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void destroyLocalPlayer()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void startLocalPlayer()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isPlaying()",
    "returnType" : "boolean",
    "comment" : "\n     * Whether this ringtone is currently playing.\n     *\n     * @return True if playing, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean playFallbackRingtone()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void setTitle(String title)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void finalize()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setStreamType(int streamType)", "public int getStreamType()", "public void setAudioAttributes(AudioAttributes attributes) throws IllegalArgumentException", "public void setAudioAttributesField(@Nullable AudioAttributes attributes)", "private AudioDeviceInfo getBuiltinDevice(AudioManager audioManager)", "public boolean preferBuiltinDevice(boolean enable)", "public boolean createLocalMediaPlayer()", "public boolean hasHapticChannels()", "public boolean hasLocalPlayer()", "public AudioAttributes getAudioAttributes()", "public void setLooping(boolean looping)", "public boolean isLooping()", "public void setVolume(float volume)", "public float getVolume()", "public boolean setHapticGeneratorEnabled(boolean enabled)", "public boolean isHapticGeneratorEnabled()", "private void applyPlaybackProperties_sync()", "public String getTitle(Context context)", "public static String getTitle(Context context, Uri uri, boolean followSettingsUri, boolean allowRemote)", "public void setUri(Uri uri)", "public void setVolumeShaperConfig(@Nullable VolumeShaper.Configuration volumeShaperConfig)", "public void setUri(Uri uri, @Nullable VolumeShaper.Configuration volumeShaperConfig)", "public Uri getUri()", "public void play()", "public void stop()", "private void destroyLocalPlayer()", "private void startLocalPlayer()", "public boolean isPlaying()", "private boolean playFallbackRingtone()", " void setTitle(String title)", "protected void finalize()" ],
  "variableNames" : [ "TAG", "LOGD", "MEDIA_COLUMNS", "MEDIA_SELECTION", "sActiveRingtones", "mContext", "mAudioManager", "mVolumeShaperConfig", "mVolumeShaper", "mAllowRemote", "mRemotePlayer", "mRemoteToken", "mLocalPlayer", "mCompletionListener", "mHapticGenerator", "mUri", "mTitle", "mAudioAttributes", "mPreferBuiltinDevice", "mIsLooping", "mVolume", "mHapticGeneratorEnabled", "mPlaybackSettingsLock" ]
}