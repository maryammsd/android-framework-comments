{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/soundtrigger/SoundTriggerInstrumentation.java",
  "packageName" : "android.media.soundtrigger",
  "className" : "SoundTriggerInstrumentation",
  "comment" : "\n * Used to inject/observe events when using a fake SoundTrigger HAL for test purposes.\n * Created by {@link SoundTriggerManager#getInjection(Executor, GlobalCallback)}.\n * Only one instance of this class is valid at any given time, old instances will be delivered\n * {@link GlobalCallback#onPreempted()}.\n * @hide\n ",
  "links" : [ "android.media.soundtrigger.SoundTriggerManager#getInjection(Executor", "#onPreempted()" ],
  "variables" : [ {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInjectGlobalEvent",
    "type" : "IInjectGlobalEvent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mModelSessionMap",
    "type" : "Map<IBinder, ModelSession>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRecognitionSessionMap",
    "type" : "Map<IBinder, RecognitionSession>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mClientToken",
    "type" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "ISoundTriggerService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mClientCallback",
    "type" : "GlobalCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGlobalCallbackExecutor",
    "type" : "Executor",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void triggerRestart()",
    "returnType" : "void",
    "comment" : "\n     * Simulate a HAL restart, typically caused by the framework on an unexpected error,\n     * or a restart of the core audio HAL.\n     * Application sessions will be detached, and all state will be cleared. The framework\n     * will re-attach to the HAL following restart.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void triggerOnResourcesAvailable()",
    "returnType" : "void",
    "comment" : "\n     * Trigger a resource available callback from the fake SoundTrigger HAL to the framework.\n     * This callback notifies the framework that methods which previously failed due to\n     * resource contention may now succeed.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setResourceContention(boolean isResourceContended)",
    "returnType" : "void",
    "comment" : "\n     * Simulate resource contention, similar to when HAL which does not\n     * support concurrent capture opens a capture stream, or when a HAL\n     * has reached its maximum number of models.\n     * Subsequent model loads and recognition starts will gracefully error.\n     * Since this call does not trigger a callback through the framework, the\n     * call will block until the fake HAL has acknowledged the state change.\n     * @param isResourceContended - true to enable contention, false to return\n     *                              to normal functioning.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setInPhoneCallState(boolean isInPhoneCall)",
    "returnType" : "void",
    "comment" : "\n     * Simulate a phone call for {@link com.android.server.soundtrigger.SoundTriggerService}.\n     * If the phone call state changes, the service will be notified to respond.\n     * The service should pause recognition for the duration of the call.\n     *\n     * @param isInPhoneCall - {@code true} to cause the SoundTriggerService to\n     * see the phone call state as off-hook. {@code false} to cause the service to\n     * see the state as normal.\n     * @hide\n     ",
    "links" : [ "com.android.server.soundtrigger.SoundTriggerService" ]
  } ],
  "methodNames" : [ "public void triggerRestart()", "public void triggerOnResourcesAvailable()", "public void setResourceContention(boolean isResourceContended)", "public void setInPhoneCallState(boolean isInPhoneCall)" ],
  "variableNames" : [ "mLock", "mInjectGlobalEvent", "mModelSessionMap", "mRecognitionSessionMap", "mClientToken", "mService", "mClientCallback", "mGlobalCallbackExecutor" ]
}