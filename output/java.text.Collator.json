{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/text/Collator.java",
  "packageName" : "java.text",
  "className" : "Collator",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "PRIMARY",
    "type" : "int",
    "comment" : "\n     * Collator strength value.  When set, only PRIMARY differences are\n     * considered significant during comparison. The assignment of strengths\n     * to language features is locale dependent. A common example is for\n     * different base letters (\"a\" vs \"b\") to be considered a PRIMARY difference.\n     * @see java.text.Collator#setStrength\n     * @see java.text.Collator#getStrength\n     ",
    "links" : [ ]
  }, {
    "name" : "SECONDARY",
    "type" : "int",
    "comment" : "\n     * Collator strength value.  When set, only SECONDARY and above differences are\n     * considered significant during comparison. The assignment of strengths\n     * to language features is locale dependent. A common example is for\n     * different accented forms of the same base letter (\"a\" vs \"\\u00E4\") to be\n     * considered a SECONDARY difference.\n     * @see java.text.Collator#setStrength\n     * @see java.text.Collator#getStrength\n     ",
    "links" : [ ]
  }, {
    "name" : "TERTIARY",
    "type" : "int",
    "comment" : "\n     * Collator strength value.  When set, only TERTIARY and above differences are\n     * considered significant during comparison. The assignment of strengths\n     * to language features is locale dependent. A common example is for\n     * case differences (\"a\" vs \"A\") to be considered a TERTIARY difference.\n     * @see java.text.Collator#setStrength\n     * @see java.text.Collator#getStrength\n     ",
    "links" : [ ]
  }, {
    "name" : "IDENTICAL",
    "type" : "int",
    "comment" : "\n     * Collator strength value.  When set, all differences are\n     * considered significant during comparison. The assignment of strengths\n     * to language features is locale dependent. A common example is for control\n     * characters (\"&#092;u0001\" vs \"&#092;u0002\") to be considered equal at the\n     * PRIMARY, SECONDARY, and TERTIARY levels but different at the IDENTICAL\n     * level.  Additionally, differences between pre-composed accents such as\n     * \"&#092;u00C0\" (A-grave) and combining accents such as \"A&#092;u0300\"\n     * (A, combining-grave) will be considered significant at the IDENTICAL\n     * level if decomposition is set to NO_DECOMPOSITION.\n     ",
    "links" : [ ]
  }, {
    "name" : "NO_DECOMPOSITION",
    "type" : "int",
    "comment" : "\n     * Decomposition mode value. With NO_DECOMPOSITION\n     * set, accented characters will not be decomposed for collation. This\n     * is the default setting and provides the fastest collation but\n     * will only produce correct results for languages that do not use accents.\n     * @see java.text.Collator#getDecomposition\n     * @see java.text.Collator#setDecomposition\n     ",
    "links" : [ ]
  }, {
    "name" : "CANONICAL_DECOMPOSITION",
    "type" : "int",
    "comment" : "\n     * Decomposition mode value. With CANONICAL_DECOMPOSITION\n     * set, characters that are canonical variants according to Unicode\n     * standard will be decomposed for collation. This should be used to get\n     * correct collation of accented characters.\n     * <p>\n     * CANONICAL_DECOMPOSITION corresponds to Normalization Form D as\n     * described in\n     * <a href=\"http://www.unicode.org/reports/tr15/\">Unicode\n     * Standard Annex #15: Unicode Normalization Forms</a>.\n     * @see java.text.Collator#getDecomposition\n     * @see java.text.Collator#setDecomposition\n     ",
    "links" : [ ]
  }, {
    "name" : "FULL_DECOMPOSITION",
    "type" : "int",
    "comment" : "\n     * Decomposition mode value. With FULL_DECOMPOSITION\n     * set, both Unicode canonical variants and Unicode compatibility variants\n     * will be decomposed for collation.  This causes not only accented\n     * characters to be collated, but also characters that have special formats\n     * to be collated with their norminal form. For example, the half-width and\n     * full-width ASCII and Katakana characters are then collated together.\n     * FULL_DECOMPOSITION is the most complete and therefore the slowest\n     * decomposition mode.\n     * <p>\n     * FULL_DECOMPOSITION corresponds to Normalization Form KD as\n     * described in\n     * <a href=\"http://www.unicode.org/reports/tr15/\">Unicode\n     * Standard Annex #15: Unicode Normalization Forms</a>.\n     * @see java.text.Collator#getDecomposition\n     * @see java.text.Collator#setDecomposition\n     ",
    "links" : [ ]
  }, {
    "name" : "icuColl",
    "type" : "android.icu.text.Collator",
    "comment" : " Android-added: ICU Collator this delegates to.",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static synchronized Collator getInstance()",
    "returnType" : "Collator",
    "comment" : "\n     * Gets the Collator for the current default locale.\n     * The default locale is determined by java.util.Locale.getDefault.\n     * @return the Collator for the default locale.(for example, en_US)\n     * @see java.util.Locale#getDefault\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Collator getInstance(Locale desiredLocale)",
    "returnType" : "Collator",
    "comment" : "\n     * Gets the Collator for the desired locale.\n     * @param desiredLocale the desired locale.\n     * @return the Collator for the desired locale.\n     * @see java.util.Locale\n     * @see java.util.ResourceBundle\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int compare(String source, String target)",
    "returnType" : "int",
    "comment" : "\n     * Compares the source string to the target string according to the\n     * collation rules for this Collator.  Returns an integer less than,\n     * equal to or greater than zero depending on whether the source String is\n     * less than, equal to or greater than the target string.  See the Collator\n     * class description for an example of use.\n     * <p>\n     * For a one time comparison, this method has the best performance. If a\n     * given String will be involved in multiple comparisons, CollationKey.compareTo\n     * has the best performance. See the Collator class description for an example\n     * using CollationKeys.\n     * @param source the source string.\n     * @param target the target string.\n     * @return Returns an integer value. Value is less than zero if source is less than\n     * target, value is zero if source and target are equal, value is greater than zero\n     * if source is greater than target.\n     * @see java.text.CollationKey\n     * @see java.text.Collator#getCollationKey\n     ",
    "links" : [ ]
  }, {
    "name" : "public int compare(Object o1, Object o2)",
    "returnType" : "int",
    "comment" : "\n     * Compares its two arguments for order.  Returns a negative integer,\n     * zero, or a positive integer as the first argument is less than, equal\n     * to, or greater than the second.\n     * <p>\n     * This implementation merely returns\n     *  {@code  compare((String)o1, (String)o2) }.\n     *\n     * @return a negative integer, zero, or a positive integer as the\n     *         first argument is less than, equal to, or greater than the\n     *         second.\n     * @throws    ClassCastException the arguments cannot be cast to Strings.\n     * @see java.util.Comparator\n     * @since   1.2\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract CollationKey getCollationKey(String source)",
    "returnType" : "CollationKey",
    "comment" : "\n     * Transforms the String into a series of bits that can be compared bitwise\n     * to other CollationKeys. CollationKeys provide better performance than\n     * Collator.compare when Strings are involved in multiple comparisons.\n     * See the Collator class description for an example using CollationKeys.\n     * @param source the string to be transformed into a collation key.\n     * @return the CollationKey for the given String based on this Collator's collation\n     * rules. If the source String is null, a null CollationKey is returned.\n     * @see java.text.CollationKey\n     * @see java.text.Collator#compare\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(String source, String target)",
    "returnType" : "boolean",
    "comment" : "\n     * Convenience method for comparing the equality of two strings based on\n     * this Collator's collation rules.\n     * @param source the source string to be compared with.\n     * @param target the target string to be compared with.\n     * @return true if the strings are equal according to the collation\n     * rules.  false, otherwise.\n     * @see java.text.Collator#compare\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized int getStrength()",
    "returnType" : "int",
    "comment" : "\n     * Returns this Collator's strength property.  The strength property determines\n     * the minimum level of difference considered significant during comparison.\n     * See the Collator class description for an example of use.\n     * @return this Collator's current strength property.\n     * @see java.text.Collator#setStrength\n     * @see java.text.Collator#PRIMARY\n     * @see java.text.Collator#SECONDARY\n     * @see java.text.Collator#TERTIARY\n     * @see java.text.Collator#IDENTICAL\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void setStrength(int newStrength)",
    "returnType" : "void",
    "comment" : "\n     * Sets this Collator's strength property.  The strength property determines\n     * the minimum level of difference considered significant during comparison.\n     * See the Collator class description for an example of use.\n     * @param newStrength  the new strength value.\n     * @see java.text.Collator#getStrength\n     * @see java.text.Collator#PRIMARY\n     * @see java.text.Collator#SECONDARY\n     * @see java.text.Collator#TERTIARY\n     * @see java.text.Collator#IDENTICAL\n     * @throws     IllegalArgumentException If the new strength value is not one of\n     * PRIMARY, SECONDARY, TERTIARY or IDENTICAL.\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized int getDecomposition()",
    "returnType" : "int",
    "comment" : "\n     * Get the decomposition mode of this Collator. Decomposition mode\n     * determines how Unicode composed characters are handled. Adjusting\n     * decomposition mode allows the user to select between faster and more\n     * complete collation behavior.\n     * <p>The three values for decomposition mode are:\n     * <UL>\n     * <LI>NO_DECOMPOSITION,\n     * <LI>CANONICAL_DECOMPOSITION\n     * <LI>FULL_DECOMPOSITION.\n     * </UL>\n     * See the documentation for these three constants for a description\n     * of their meaning.\n     * @return the decomposition mode\n     * @see java.text.Collator#setDecomposition\n     * @see java.text.Collator#NO_DECOMPOSITION\n     * @see java.text.Collator#CANONICAL_DECOMPOSITION\n     * @see java.text.Collator#FULL_DECOMPOSITION\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void setDecomposition(int decompositionMode)",
    "returnType" : "void",
    "comment" : "\n     * Set the decomposition mode of this Collator. See getDecomposition\n     * for a description of decomposition mode.\n     * @param decompositionMode  the new decomposition mode.\n     * @see java.text.Collator#getDecomposition\n     * @see java.text.Collator#NO_DECOMPOSITION\n     * @see java.text.Collator#CANONICAL_DECOMPOSITION\n     * @see java.text.Collator#FULL_DECOMPOSITION\n     * @throws    IllegalArgumentException If the given value is not a valid decomposition\n     * mode.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static synchronized Locale[] getAvailableLocales()",
    "returnType" : "Locale[]",
    "comment" : "\n     * Returns an array of all locales for which the\n     * {@code getInstance} methods of this class can return\n     * localized instances.\n     *\n     * @return An array of locales for which localized\n     *         {@code Collator} instances are available.\n     ",
    "links" : [ ]
  }, {
    "name" : "private int decompositionMode_Java_ICU(int mode)",
    "returnType" : "int",
    "comment" : " BEGIN Android-added: conversion method for decompositionMode constants.",
    "links" : [ ]
  }, {
    "name" : "private int decompositionMode_ICU_Java(int mode)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Object clone()",
    "returnType" : "Object",
    "comment" : "\n     * Returns a new collator with the same decomposition mode and\n     * strength value as this collator.\n     *\n     * @return a shallow copy of this collator.\n     * @see java.lang.Cloneable\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object that)",
    "returnType" : "boolean",
    "comment" : "\n     * Compares the equality of two Collators.\n     * @param that the Collator to be compared with this.\n     * @return true if this Collator is the same as that Collator;\n     * false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Generates the hash code for this Collator.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static synchronized Collator getInstance()", "public static Collator getInstance(Locale desiredLocale)", "public abstract int compare(String source, String target)", "public int compare(Object o1, Object o2)", "public abstract CollationKey getCollationKey(String source)", "public boolean equals(String source, String target)", "public synchronized int getStrength()", "public synchronized void setStrength(int newStrength)", "public synchronized int getDecomposition()", "public synchronized void setDecomposition(int decompositionMode)", "public static synchronized Locale[] getAvailableLocales()", "private int decompositionMode_Java_ICU(int mode)", "private int decompositionMode_ICU_Java(int mode)", "public Object clone()", "public boolean equals(Object that)", "public abstract int hashCode()" ],
  "variableNames" : [ "PRIMARY", "SECONDARY", "TERTIARY", "IDENTICAL", "NO_DECOMPOSITION", "CANONICAL_DECOMPOSITION", "FULL_DECOMPOSITION", "icuColl" ]
}