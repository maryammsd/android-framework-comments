{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/hardware/soundtrigger/SoundTriggerModule.java",
  "packageName" : "android.hardware.soundtrigger",
  "className" : "SoundTriggerModule",
  "comment" : "\n * The SoundTriggerModule provides APIs to control sound models and sound detection\n * on a given sound trigger hardware module.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EVENT_RECOGNITION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EVENT_SERVICE_DIED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EVENT_SERVICE_STATE_CHANGE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEventHandlerDelegate",
    "type" : "EventHandlerDelegate",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "ISoundTriggerModule",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected void finalize()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public synchronized void detach()",
    "returnType" : "void",
    "comment" : "\n     * Detach from this module. The {@link SoundTrigger.StatusListener} callback will not be called\n     * anymore and associated resources will be released.\n     * All models must have been unloaded prior to detaching.\n     ",
    "links" : [ "SoundTrigger.StatusListener" ]
  }, {
    "name" : "public synchronized int loadSoundModel(@NonNull SoundTrigger.SoundModel model, @NonNull int[] soundModelHandle)",
    "returnType" : "int",
    "comment" : "\n     * Load a {@link SoundTrigger.SoundModel} to the hardware. A sound model must be loaded in\n     * order to start listening to a key phrase in this model.\n     * @param model The sound model to load.\n     * @param soundModelHandle an array of int where the sound model handle will be returned.\n     * @return - {@link SoundTrigger#STATUS_OK} in case of success\n     *         - {@link SoundTrigger#STATUS_ERROR} in case of unspecified error\n     *         - {@link SoundTrigger#STATUS_PERMISSION_DENIED} if the caller does not have\n     *         system permission\n     *         - {@link SoundTrigger#STATUS_NO_INIT} if the native service cannot be reached\n     *         - {@link SoundTrigger#STATUS_BAD_VALUE} if parameters are invalid\n     *         - {@link SoundTrigger#STATUS_DEAD_OBJECT} if the binder transaction to the native\n     *         service fails\n     *         - {@link SoundTrigger#STATUS_INVALID_OPERATION} if the call is out of sequence\n     ",
    "links" : [ "SoundTrigger.SoundModel", "SoundTrigger#STATUS_OK", "SoundTrigger#STATUS_ERROR", "SoundTrigger#STATUS_PERMISSION_DENIED", "SoundTrigger#STATUS_NO_INIT", "SoundTrigger#STATUS_BAD_VALUE", "SoundTrigger#STATUS_DEAD_OBJECT", "SoundTrigger#STATUS_INVALID_OPERATION" ]
  }, {
    "name" : "public synchronized int unloadSoundModel(int soundModelHandle)",
    "returnType" : "int",
    "comment" : "\n     * Unload a {@link SoundTrigger.SoundModel} and abort any pendiong recognition\n     * @param soundModelHandle The sound model handle\n     * @return - {@link SoundTrigger#STATUS_OK} in case of success\n     *         - {@link SoundTrigger#STATUS_ERROR} in case of unspecified error\n     *         - {@link SoundTrigger#STATUS_PERMISSION_DENIED} if the caller does not have\n     *         system permission\n     *         - {@link SoundTrigger#STATUS_NO_INIT} if the native service cannot be reached\n     *         - {@link SoundTrigger#STATUS_BAD_VALUE} if the sound model handle is invalid\n     *         - {@link SoundTrigger#STATUS_DEAD_OBJECT} if the binder transaction to the native\n     *         service fails\n     ",
    "links" : [ "SoundTrigger.SoundModel", "SoundTrigger#STATUS_OK", "SoundTrigger#STATUS_ERROR", "SoundTrigger#STATUS_PERMISSION_DENIED", "SoundTrigger#STATUS_NO_INIT", "SoundTrigger#STATUS_BAD_VALUE", "SoundTrigger#STATUS_DEAD_OBJECT" ]
  }, {
    "name" : "public synchronized int startRecognition(int soundModelHandle, SoundTrigger.RecognitionConfig config)",
    "returnType" : "int",
    "comment" : "\n     * Start listening to all key phrases in a {@link SoundTrigger.SoundModel}.\n     * Recognition must be restarted after each callback (success or failure) received on\n     * the {@link SoundTrigger.StatusListener}.\n     * @param soundModelHandle The sound model handle to start listening to\n     * @param config contains configuration information for this recognition request:\n     *  recognition mode, keyphrases, users, minimum confidence levels...\n     * @return - {@link SoundTrigger#STATUS_OK} in case of success\n     *         - {@link SoundTrigger#STATUS_ERROR} in case of unspecified error\n     *         - {@link SoundTrigger#STATUS_PERMISSION_DENIED} if the caller does not have\n     *         system permission\n     *         - {@link SoundTrigger#STATUS_NO_INIT} if the native service cannot be reached\n     *         - {@link SoundTrigger#STATUS_BAD_VALUE} if the sound model handle is invalid\n     *         - {@link SoundTrigger#STATUS_DEAD_OBJECT} if the binder transaction to the native\n     *         service fails\n     *         - {@link SoundTrigger#STATUS_INVALID_OPERATION} if the call is out of sequence\n     ",
    "links" : [ "SoundTrigger.SoundModel", "SoundTrigger.StatusListener", "SoundTrigger#STATUS_OK", "SoundTrigger#STATUS_ERROR", "SoundTrigger#STATUS_PERMISSION_DENIED", "SoundTrigger#STATUS_NO_INIT", "SoundTrigger#STATUS_BAD_VALUE", "SoundTrigger#STATUS_DEAD_OBJECT", "SoundTrigger#STATUS_INVALID_OPERATION" ]
  }, {
    "name" : "public synchronized int stopRecognition(int soundModelHandle)",
    "returnType" : "int",
    "comment" : "\n     * Stop listening to all key phrases in a {@link SoundTrigger.SoundModel}\n     * @param soundModelHandle The sound model handle to stop listening to\n     * @return - {@link SoundTrigger#STATUS_OK} in case of success\n     *         - {@link SoundTrigger#STATUS_ERROR} in case of unspecified error\n     *         - {@link SoundTrigger#STATUS_PERMISSION_DENIED} if the caller does not have\n     *         system permission\n     *         - {@link SoundTrigger#STATUS_NO_INIT} if the native service cannot be reached\n     *         - {@link SoundTrigger#STATUS_BAD_VALUE} if the sound model handle is invalid\n     *         - {@link SoundTrigger#STATUS_DEAD_OBJECT} if the binder transaction to the native\n     *         service fails\n     *         - {@link SoundTrigger#STATUS_INVALID_OPERATION} if the call is out of sequence\n     ",
    "links" : [ "SoundTrigger.SoundModel", "SoundTrigger#STATUS_OK", "SoundTrigger#STATUS_ERROR", "SoundTrigger#STATUS_PERMISSION_DENIED", "SoundTrigger#STATUS_NO_INIT", "SoundTrigger#STATUS_BAD_VALUE", "SoundTrigger#STATUS_DEAD_OBJECT", "SoundTrigger#STATUS_INVALID_OPERATION" ]
  }, {
    "name" : "public synchronized int getModelState(int soundModelHandle)",
    "returnType" : "int",
    "comment" : "\n     * Get the current state of a {@link SoundTrigger.SoundModel}.\n     * The state will be returned asynchronously as a {@link SoundTrigger.RecognitionEvent}\n     * in the callback registered in the\n     * {@link SoundTrigger#attachModule(int, SoundTrigger.StatusListener, Handler)} method.\n     * @param soundModelHandle The sound model handle indicating which model's state to return\n     * @return - {@link SoundTrigger#STATUS_OK} in case of success\n     *         - {@link SoundTrigger#STATUS_ERROR} in case of unspecified error\n     *         - {@link SoundTrigger#STATUS_PERMISSION_DENIED} if the caller does not have\n     *         system permission\n     *         - {@link SoundTrigger#STATUS_NO_INIT} if the native service cannot be reached\n     *         - {@link SoundTrigger#STATUS_BAD_VALUE} if the sound model handle is invalid\n     *         - {@link SoundTrigger#STATUS_DEAD_OBJECT} if the binder transaction to the native\n     *         service fails\n     *         - {@link SoundTrigger#STATUS_INVALID_OPERATION} if the call is out of sequence\n     ",
    "links" : [ "SoundTrigger.SoundModel", "SoundTrigger.RecognitionEvent", "SoundTrigger#attachModule", "SoundTrigger#STATUS_OK", "SoundTrigger#STATUS_ERROR", "SoundTrigger#STATUS_PERMISSION_DENIED", "SoundTrigger#STATUS_NO_INIT", "SoundTrigger#STATUS_BAD_VALUE", "SoundTrigger#STATUS_DEAD_OBJECT", "SoundTrigger#STATUS_INVALID_OPERATION" ]
  }, {
    "name" : "public synchronized int setParameter(int soundModelHandle, @ModelParams int modelParam, int value)",
    "returnType" : "int",
    "comment" : "\n     * Set a model specific {@link ModelParams} with the given value. This\n     * parameter will keep its value for the duration the model is loaded regardless of starting\n     * and stopping recognition. Once the model is unloaded, the value will be lost.\n     * {@link #queryParameter} should be checked first before calling this method.\n     *\n     * @param soundModelHandle handle of model to apply parameter\n     * @param modelParam       {@link ModelParams}\n     * @param value            Value to set\n     * @return - {@link SoundTrigger#STATUS_OK} in case of success\n     * - {@link SoundTrigger#STATUS_NO_INIT} if the native service cannot be reached\n     * - {@link SoundTrigger#STATUS_BAD_VALUE} invalid input parameter\n     * - {@link SoundTrigger#STATUS_INVALID_OPERATION} if the call is out of sequence or\n     * if API is not supported by HAL\n     ",
    "links" : [ "ModelParams", "#queryParameter", "ModelParams", "SoundTrigger#STATUS_OK", "SoundTrigger#STATUS_NO_INIT", "SoundTrigger#STATUS_BAD_VALUE", "SoundTrigger#STATUS_INVALID_OPERATION" ]
  }, {
    "name" : "public synchronized int getParameter(int soundModelHandle, @ModelParams int modelParam)",
    "returnType" : "int",
    "comment" : "\n     * Get a model specific {@link ModelParams}. This parameter will keep its value\n     * for the duration the model is loaded regardless of starting and stopping recognition.\n     * Once the model is unloaded, the value will be lost. If the value is not set, a default\n     * value is returned. See {@link ModelParams} for parameter default values.\n     * {@link #queryParameter} should be checked first before\n     * calling this method. Otherwise, an exception can be thrown.\n     *\n     * @param soundModelHandle handle of model to get parameter\n     * @param modelParam       {@link ModelParams}\n     * @return value of parameter\n     ",
    "links" : [ "ModelParams", "ModelParams", "#queryParameter", "ModelParams" ]
  }, {
    "name" : "public synchronized SoundTrigger.ModelParamRange queryParameter(int soundModelHandle, @ModelParams int modelParam)",
    "returnType" : "SoundTrigger.ModelParamRange",
    "comment" : "\n     * Query the parameter support and range for a given {@link ModelParams}.\n     * This method should be check prior to calling {@link #setParameter} or {@link #getParameter}.\n     *\n     * @param soundModelHandle handle of model to get parameter\n     * @param modelParam       {@link ModelParams}\n     * @return supported range of parameter, null if not supported\n     ",
    "links" : [ "ModelParams", "#setParameter", "#getParameter", "ModelParams" ]
  } ],
  "variableNames" : [ "TAG", "EVENT_RECOGNITION", "EVENT_SERVICE_DIED", "EVENT_SERVICE_STATE_CHANGE", "mId", "mEventHandlerDelegate", "mService" ],
  "methodNames" : [ "protected void finalize()", "public synchronized void detach()", "public synchronized int loadSoundModel(@NonNull SoundTrigger.SoundModel model, @NonNull int[] soundModelHandle)", "public synchronized int unloadSoundModel(int soundModelHandle)", "public synchronized int startRecognition(int soundModelHandle, SoundTrigger.RecognitionConfig config)", "public synchronized int stopRecognition(int soundModelHandle)", "public synchronized int getModelState(int soundModelHandle)", "public synchronized int setParameter(int soundModelHandle, @ModelParams int modelParam, int value)", "public synchronized int getParameter(int soundModelHandle, @ModelParams int modelParam)", "public synchronized SoundTrigger.ModelParamRange queryParameter(int soundModelHandle, @ModelParams int modelParam)" ]
}