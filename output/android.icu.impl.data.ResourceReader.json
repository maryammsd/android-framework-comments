{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/data/ResourceReader.java",
  "packageName" : "android.icu.impl.data",
  "className" : "ResourceReader",
  "comment" : "\n * A reader for text resource data in the current package or the package\n * of a given class object.  The\n * resource data is loaded through the class loader, so it will\n * typically be a file in the same directory as the *.class files, or\n * a file within a JAR file in the corresponding subdirectory.  The\n * file must be a text file in one of the supported encodings; when the\n * resource is opened by constructing a <code>ResourceReader</code>\n * object the encoding is specified.\n *\n * <p>2015-sep-03 TODO: Only used in android.icu.dev.test.format, move there.\n *\n * @author Alan Liu\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "reader",
    "type" : "BufferedReader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "resourceName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "encoding",
    "type" : "String",
    "comment" : " null for default encoding",
    "links" : [ ]
  }, {
    "name" : "root",
    "type" : "Class<?>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "lineNo",
    "type" : "int",
    "comment" : "\n     * The one-based line number. Has the special value -1 before the\n     * object is initialized. Has the special value 0 after initialization\n     * but before the first line is read.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String readLine() throws IOException",
    "returnType" : "String",
    "comment" : "\n     * Read and return the next line of the file or <code>null</code>\n     * if the end of the file has been reached.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String readLineSkippingComments(boolean trim) throws IOException",
    "returnType" : "String",
    "comment" : "\n     * Read a line, ignoring blank lines and lines that start with\n     * '#'.\n     * @param trim if true then trim leading Pattern_White_Space.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String readLineSkippingComments() throws IOException",
    "returnType" : "String",
    "comment" : "\n     * Read a line, ignoring blank lines and lines that start with\n     * '#'. Do not trim leading Pattern_White_Space.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getLineNumber()",
    "returnType" : "int",
    "comment" : "\n     * Return the one-based line number of the last line returned by\n     * readLine() or readLineSkippingComments(). Should only be called\n     * after a call to one of these methods; otherwise the return\n     * value is undefined.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String describePosition()",
    "returnType" : "String",
    "comment" : "\n     * Return a string description of the position of the last line\n     * returned by readLine() or readLineSkippingComments().\n     ",
    "links" : [ ]
  }, {
    "name" : "public void reset()",
    "returnType" : "void",
    "comment" : "\n     * Reset this reader so that the next call to\n     * <code>readLine()</code> returns the first line of the file\n     * again.  This is a somewhat expensive call, however, calling\n     * <code>reset()</code> after calling it the first time does\n     * nothing if <code>readLine()</code> has not been called in\n     * between.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void _reset() throws UnsupportedEncodingException",
    "returnType" : "void",
    "comment" : "\n     * Reset to the start by reconstructing the stream and readers.\n     * We could also use mark() and reset() on the stream or reader,\n     * but that would cause them to keep the stream data around in\n     * memory.  We don't want that because some of the resource files\n     * are large, e.g., 400k.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void close() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Closes the underlying reader and releases any system resources\n     * associated with it. If the stream is already closed then invoking\n     * this method has no effect.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public String readLine() throws IOException", "public String readLineSkippingComments(boolean trim) throws IOException", "public String readLineSkippingComments() throws IOException", "public int getLineNumber()", "public String describePosition()", "public void reset()", "private void _reset() throws UnsupportedEncodingException", "public void close() throws IOException" ],
  "variableNames" : [ "reader", "resourceName", "encoding", "root", "lineNo" ]
}