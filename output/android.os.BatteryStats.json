{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/os/BatteryStats.java",
  "packageName" : "android.os",
  "className" : "BatteryStats",
  "comment" : "\n * A class providing access to battery usage statistics, including information on\n * wakelocks, processes, packages, and services.  All times are represented in microseconds\n * except where indicated otherwise.\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOCAL_LOGV",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SCREEN_OFF_RPM_STATS_ENABLED",
    "type" : "boolean",
    "comment" : " Fetching RPM stats is too slow to do each time screen changes, so disable it. ",
    "links" : [ ]
  }, {
    "name" : "SERVICE_NAME",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "WAKE_TYPE_PARTIAL",
    "type" : "int",
    "comment" : "\n     * A constant indicating a partial wake lock timer.\n     ",
    "links" : [ ]
  }, {
    "name" : "WAKE_TYPE_FULL",
    "type" : "int",
    "comment" : "\n     * A constant indicating a full wake lock timer.\n     ",
    "links" : [ ]
  }, {
    "name" : "WAKE_TYPE_WINDOW",
    "type" : "int",
    "comment" : "\n     * A constant indicating a window wake lock timer.\n     ",
    "links" : [ ]
  }, {
    "name" : "SENSOR",
    "type" : "int",
    "comment" : "\n     * A constant indicating a sensor timer.\n     ",
    "links" : [ ]
  }, {
    "name" : "WIFI_RUNNING",
    "type" : "int",
    "comment" : "\n     * A constant indicating a a wifi running timer\n     ",
    "links" : [ ]
  }, {
    "name" : "FULL_WIFI_LOCK",
    "type" : "int",
    "comment" : "\n     * A constant indicating a full wifi lock timer\n     ",
    "links" : [ ]
  }, {
    "name" : "WIFI_SCAN",
    "type" : "int",
    "comment" : "\n     * A constant indicating a wifi scan\n     ",
    "links" : [ ]
  }, {
    "name" : "WIFI_MULTICAST_ENABLED",
    "type" : "int",
    "comment" : "\n     * A constant indicating a wifi multicast timer\n     ",
    "links" : [ ]
  }, {
    "name" : "VIDEO_TURNED_ON",
    "type" : "int",
    "comment" : "\n     * A constant indicating a video turn on timer\n     ",
    "links" : [ ]
  }, {
    "name" : "VIBRATOR_ON",
    "type" : "int",
    "comment" : "\n     * A constant indicating a vibrator on timer\n     ",
    "links" : [ ]
  }, {
    "name" : "FOREGROUND_ACTIVITY",
    "type" : "int",
    "comment" : "\n     * A constant indicating a foreground activity timer\n     ",
    "links" : [ ]
  }, {
    "name" : "WIFI_BATCHED_SCAN",
    "type" : "int",
    "comment" : "\n     * A constant indicating a wifi batched scan is active\n     ",
    "links" : [ ]
  }, {
    "name" : "PROCESS_STATE",
    "type" : "int",
    "comment" : "\n     * A constant indicating a process state timer\n     ",
    "links" : [ ]
  }, {
    "name" : "SYNC",
    "type" : "int",
    "comment" : "\n     * A constant indicating a sync timer\n     ",
    "links" : [ ]
  }, {
    "name" : "JOB",
    "type" : "int",
    "comment" : "\n     * A constant indicating a job timer\n     ",
    "links" : [ ]
  }, {
    "name" : "AUDIO_TURNED_ON",
    "type" : "int",
    "comment" : "\n     * A constant indicating an audio turn on timer\n     ",
    "links" : [ ]
  }, {
    "name" : "FLASHLIGHT_TURNED_ON",
    "type" : "int",
    "comment" : "\n     * A constant indicating a flashlight turn on timer\n     ",
    "links" : [ ]
  }, {
    "name" : "CAMERA_TURNED_ON",
    "type" : "int",
    "comment" : "\n     * A constant indicating a camera turn on timer\n     ",
    "links" : [ ]
  }, {
    "name" : "WAKE_TYPE_DRAW",
    "type" : "int",
    "comment" : "\n     * A constant indicating a draw wake lock timer.\n     ",
    "links" : [ ]
  }, {
    "name" : "BLUETOOTH_SCAN_ON",
    "type" : "int",
    "comment" : "\n     * A constant indicating a bluetooth scan timer.\n     ",
    "links" : [ ]
  }, {
    "name" : "AGGREGATED_WAKE_TYPE_PARTIAL",
    "type" : "int",
    "comment" : "\n     * A constant indicating an aggregated partial wake lock timer.\n     ",
    "links" : [ ]
  }, {
    "name" : "BLUETOOTH_UNOPTIMIZED_SCAN_ON",
    "type" : "int",
    "comment" : "\n     * A constant indicating a bluetooth scan timer for unoptimized scans.\n     ",
    "links" : [ ]
  }, {
    "name" : "FOREGROUND_SERVICE",
    "type" : "int",
    "comment" : "\n     * A constant indicating a foreground service timer\n     ",
    "links" : [ ]
  }, {
    "name" : "WIFI_AGGREGATE_MULTICAST_ENABLED",
    "type" : "int",
    "comment" : "\n     * A constant indicating an aggregate wifi multicast timer\n     ",
    "links" : [ ]
  }, {
    "name" : "STATS_SINCE_CHARGED",
    "type" : "int",
    "comment" : "\n     * Include all of the data in the stats, including previously saved data.\n     ",
    "links" : [ ]
  }, {
    "name" : "STATS_CURRENT",
    "type" : "int",
    "comment" : "\n     * Include only the current run in the stats.\n     *\n     * @deprecated As of {@link android.os.Build.VERSION_CODES#Q}, only {@link #STATS_SINCE_CHARGED}\n     * is supported.\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#Q", "#STATS_SINCE_CHARGED" ]
  }, {
    "name" : "STATS_SINCE_UNPLUGGED",
    "type" : "int",
    "comment" : "\n     * Include only the run since the last time the device was unplugged in the stats.\n     *\n     * @deprecated As of {@link android.os.Build.VERSION_CODES#Q}, only {@link #STATS_SINCE_CHARGED}\n     * is supported.\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#Q", "#STATS_SINCE_CHARGED" ]
  }, {
    "name" : "STAT_NAMES",
    "type" : "String[]",
    "comment" : " and \"unplugged\". They were shortened for efficiency sake.",
    "links" : [ ]
  }, {
    "name" : "CHECKIN_VERSION",
    "type" : "int",
    "comment" : "\n     * Current version of checkin data format.\n     *\n     * New in version 19:\n     *   - Wakelock data (wl) gets current and max times.\n     * New in version 20:\n     *   - Background timers and counters for: Sensor, BluetoothScan, WifiScan, Jobs, Syncs.\n     * New in version 21:\n     *   - Actual (not just apportioned) Wakelock time is also recorded.\n     *   - Aggregated partial wakelock time (per uid, instead of per wakelock) is recorded.\n     *   - BLE scan result count\n     *   - CPU frequency time per uid\n     * New in version 22:\n     *   - BLE scan result background count, BLE unoptimized scan time\n     *   - Background partial wakelock time & count\n     * New in version 23:\n     *   - Logging smeared power model values\n     * New in version 24:\n     *   - Fixed bugs in background timers and BLE scan time\n     * New in version 25:\n     *   - Package wakeup alarms are now on screen-off timebase\n     * New in version 26:\n     *   - Resource power manager (rpm) states [but screenOffRpm is disabled from working properly]\n     * New in version 27:\n     *   - Always On Display (screen doze mode) time and power\n     * New in version 28:\n     *   - Light/Deep Doze power\n     *   - WiFi Multicast Wakelock statistics (count & duration)\n     * New in version 29:\n     *   - Process states re-ordered. TOP_SLEEPING now below BACKGROUND. HEAVY_WEIGHT introduced.\n     *   - CPU times per UID process state\n     * New in version 30:\n     *   - Uid.PROCESS_STATE_FOREGROUND_SERVICE only tracks\n     *   ActivityManager.PROCESS_STATE_FOREGROUND_SERVICE.\n     * New in version 31:\n     *   - New cellular network types.\n     *   - Deferred job metrics.\n     * New in version 32:\n     *   - Ambient display properly output in data dump.\n     * New in version 33:\n     *   - Fixed bug in min learned capacity updating process.\n     * New in version 34:\n     *   - Deprecated STATS_SINCE_UNPLUGGED and STATS_CURRENT.\n     * New in version 35:\n     *   - Fixed bug that was not reporting high cellular tx power correctly\n     *   - Added out of service and emergency service modes to data connection types\n     * New in version 36:\n     *   - Added PowerStats and CPU time-in-state data\n     ",
    "links" : [ ]
  }, {
    "name" : "BATTERY_STATS_CHECKIN_VERSION",
    "type" : "int",
    "comment" : "\n     * Old version, we hit 9 and ran out of room, need to remove.\n     ",
    "links" : [ ]
  }, {
    "name" : "BYTES_PER_KB",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BYTES_PER_MB",
    "type" : "long",
    "comment" : " 1024^2",
    "links" : [ ]
  }, {
    "name" : "BYTES_PER_GB",
    "type" : "long",
    "comment" : "1024^3",
    "links" : [ ]
  }, {
    "name" : "MILLISECONDS_IN_HOUR",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VERSION_DATA",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UID_DATA",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "WAKEUP_ALARM_DATA",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "APK_DATA",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PROCESS_DATA",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CPU_DATA",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "GLOBAL_CPU_FREQ_DATA",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CPU_TIMES_AT_FREQ_DATA",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RESOURCE_POWER_MANAGER_DATA",
    "type" : "String",
    "comment" : " screen-off time, screen-off count",
    "links" : [ ]
  }, {
    "name" : "SENSOR_DATA",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VIBRATOR_DATA",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FOREGROUND_ACTIVITY_DATA",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FOREGROUND_SERVICE_DATA",
    "type" : "String",
    "comment" : " foreground service time, count",
    "links" : [ ]
  }, {
    "name" : "STATE_TIME_DATA",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "WAKELOCK_DATA",
    "type" : "String",
    "comment" : " [Currently, full and window wakelocks have durations current = max = total = -1]",
    "links" : [ ]
  }, {
    "name" : "AGGREGATED_WAKELOCK_DATA",
    "type" : "String",
    "comment" : " cumulative partial wakelock duration, cumulative background partial wakelock duration",
    "links" : [ ]
  }, {
    "name" : "SYNC_DATA",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "JOB_DATA",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "JOB_COMPLETION_DATA",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "JOBS_DEFERRED_DATA",
    "type" : "String",
    "comment" : "\n     * jbd line is:\n     * BATTERY_STATS_CHECKIN_VERSION, uid, which, \"jbd\",\n     * jobsDeferredEventCount, jobsDeferredCount, totalLatencyMillis,\n     * count at latency < 1 hr, count at latency 1 to 2 hrs, 2 to 4 hrs, 4 to 8 hrs, and past 8 hrs\n     * <p>\n     * @see #JOB_FRESHNESS_BUCKETS\n     ",
    "links" : [ ]
  }, {
    "name" : "KERNEL_WAKELOCK_DATA",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "WAKEUP_REASON_DATA",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NETWORK_DATA",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "USER_ACTIVITY_DATA",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BATTERY_DATA",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BATTERY_DISCHARGE_DATA",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BATTERY_LEVEL_DATA",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "GLOBAL_WIFI_DATA",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "WIFI_DATA",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "GLOBAL_WIFI_CONTROLLER_DATA",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "WIFI_CONTROLLER_DATA",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "GLOBAL_BLUETOOTH_CONTROLLER_DATA",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BLUETOOTH_CONTROLLER_DATA",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BLUETOOTH_MISC_DATA",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MISC_DATA",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "GLOBAL_NETWORK_DATA",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "GLOBAL_MODEM_CONTROLLER_DATA",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MODEM_CONTROLLER_DATA",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HISTORY_STRING_POOL",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HISTORY_DATA",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SCREEN_BRIGHTNESS_DATA",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SIGNAL_STRENGTH_TIME_DATA",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SIGNAL_SCANNING_TIME_DATA",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SIGNAL_STRENGTH_COUNT_DATA",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DATA_CONNECTION_TIME_DATA",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DATA_CONNECTION_COUNT_DATA",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "WIFI_STATE_TIME_DATA",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "WIFI_STATE_COUNT_DATA",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "WIFI_SUPPL_STATE_TIME_DATA",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "WIFI_SUPPL_STATE_COUNT_DATA",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "WIFI_SIGNAL_STRENGTH_TIME_DATA",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "WIFI_SIGNAL_STRENGTH_COUNT_DATA",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "POWER_USE_SUMMARY_DATA",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "POWER_USE_ITEM_DATA",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DISCHARGE_STEP_DATA",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CHARGE_STEP_DATA",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DISCHARGE_TIME_REMAIN_DATA",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CHARGE_TIME_REMAIN_DATA",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLASHLIGHT_DATA",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CAMERA_DATA",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VIDEO_DATA",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "AUDIO_DATA",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "WIFI_MULTICAST_TOTAL_DATA",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "WIFI_MULTICAST_DATA",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RESULT_RECEIVER_CONTROLLER_KEY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFormatBuilder",
    "type" : "StringBuilder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFormatter",
    "type" : "Formatter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CELLULAR_CONTROLLER_NAME",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "WIFI_CONTROLLER_NAME",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UID_TIMES_TYPE_ALL",
    "type" : "String",
    "comment" : "\n     * Indicates times spent by the uid at each cpu frequency in all process states.\n     *\n     * Other types might include times spent in foreground, background etc.\n     ",
    "links" : [ ]
  }, {
    "name" : "JOB_FRESHNESS_BUCKETS",
    "type" : "long[]",
    "comment" : "\n     * These are the thresholds for bucketing last time since a job was run for an app\n     * that just moved to ACTIVE due to a launch. So if the last time a job ran was less\n     * than 1 hour ago, then it's reasonably fresh, 2 hours ago, not so fresh and so\n     * on.\n     ",
    "links" : [ ]
  }, {
    "name" : "SCREEN_BRIGHTNESS_DARK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SCREEN_BRIGHTNESS_DIM",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SCREEN_BRIGHTNESS_MEDIUM",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SCREEN_BRIGHTNESS_LIGHT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SCREEN_BRIGHTNESS_BRIGHT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SCREEN_BRIGHTNESS_NAMES",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SCREEN_BRIGHTNESS_SHORT_NAMES",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NUM_SCREEN_BRIGHTNESS_BINS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEVICE_IDLE_MODE_OFF",
    "type" : "int",
    "comment" : " 0",
    "links" : [ ]
  }, {
    "name" : "DEVICE_IDLE_MODE_LIGHT",
    "type" : "int",
    "comment" : " 1",
    "links" : [ ]
  }, {
    "name" : "DEVICE_IDLE_MODE_DEEP",
    "type" : "int",
    "comment" : " 2",
    "links" : [ ]
  }, {
    "name" : "DATA_CONNECTION_NAMES",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NUM_ALL_NETWORK_TYPES",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DATA_CONNECTION_OUT_OF_SERVICE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DATA_CONNECTION_EMERGENCY_SERVICE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DATA_CONNECTION_OTHER",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NUM_DATA_CONNECTION_TYPES",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RADIO_ACCESS_TECHNOLOGY_OTHER",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "RADIO_ACCESS_TECHNOLOGY_LTE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "RADIO_ACCESS_TECHNOLOGY_NR",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "RADIO_ACCESS_TECHNOLOGY_COUNT",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "RADIO_ACCESS_TECHNOLOGY_NAMES",
    "type" : "String[]",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "WIFI_SUPPL_STATE_NAMES",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "WIFI_SUPPL_STATE_SHORT_NAMES",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "POWER_DATA_UNAVAILABLE",
    "type" : "long",
    "comment" : "\n     * Returned value if power data is unavailable.\n     *\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "DURATION_UNAVAILABLE",
    "type" : "long",
    "comment" : "\n     * Returned value if duration data is unavailable.\n     *\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "HISTORY_STATE_DESCRIPTIONS",
    "type" : "BitDescription[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HISTORY_STATE2_DESCRIPTIONS",
    "type" : "BitDescription[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HISTORY_EVENT_NAMES",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HISTORY_EVENT_CHECKIN_NAMES",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sUidToString",
    "type" : "IntToString",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sIntToString",
    "type" : "IntToString",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HISTORY_EVENT_INT_FORMATTERS",
    "type" : "IntToString[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "WIFI_STATE_NAMES",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NUM_WIFI_SIGNAL_STRENGTH_BINS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NETWORK_MOBILE_RX_DATA",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NETWORK_MOBILE_TX_DATA",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NETWORK_WIFI_RX_DATA",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NETWORK_WIFI_TX_DATA",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NETWORK_BT_RX_DATA",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NETWORK_BT_TX_DATA",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NETWORK_MOBILE_BG_RX_DATA",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NETWORK_MOBILE_BG_TX_DATA",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NETWORK_WIFI_BG_RX_DATA",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NETWORK_WIFI_BG_TX_DATA",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NUM_NETWORK_ACTIVITY_TYPES",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STEP_LEVEL_TIME_MASK",
    "type" : "long",
    "comment" : " The part of a step duration that is the actual time.",
    "links" : [ ]
  }, {
    "name" : "STEP_LEVEL_LEVEL_MASK",
    "type" : "long",
    "comment" : " Bits in a step duration that are the new battery level we are at.",
    "links" : [ ]
  }, {
    "name" : "STEP_LEVEL_LEVEL_SHIFT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STEP_LEVEL_INITIAL_MODE_MASK",
    "type" : "long",
    "comment" : " Bits in a step duration that are the initial mode we were in at that step.",
    "links" : [ ]
  }, {
    "name" : "STEP_LEVEL_INITIAL_MODE_SHIFT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STEP_LEVEL_MODIFIED_MODE_MASK",
    "type" : "long",
    "comment" : " Bits in a step duration that indicate which modes changed during that step.",
    "links" : [ ]
  }, {
    "name" : "STEP_LEVEL_MODIFIED_MODE_SHIFT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STEP_LEVEL_MODE_SCREEN_STATE",
    "type" : "int",
    "comment" : " Step duration mode: the screen is on, off, dozed, etc; value is Display.STATE_* - 1.",
    "links" : [ ]
  }, {
    "name" : "MAX_TRACKED_SCREEN_STATE",
    "type" : "int",
    "comment" : " this should be mapped back to one of the tracked values before being tracked here.",
    "links" : [ ]
  }, {
    "name" : "STEP_LEVEL_MODE_POWER_SAVE",
    "type" : "int",
    "comment" : " Step duration mode: power save is on.",
    "links" : [ ]
  }, {
    "name" : "STEP_LEVEL_MODE_DEVICE_IDLE",
    "type" : "int",
    "comment" : " Step duration mode: device is currently in idle mode.",
    "links" : [ ]
  }, {
    "name" : "STEP_LEVEL_MODES_OF_INTEREST",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STEP_LEVEL_MODE_VALUES",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STEP_LEVEL_MODE_LABELS",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CHECKIN_POWER_COMPONENT_LABELS",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DUMP_CHARGED_ONLY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DUMP_DAILY_ONLY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DUMP_HISTORY_ONLY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DUMP_INCLUDE_HISTORY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DUMP_VERBOSE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DUMP_DEVICE_WIFI_ONLY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DISPLAY_TRANSPORT_PRIORITIES",
    "type" : "int[]",
    "comment" : " See NetworkCapabilitiesUtils",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static int mapToInternalProcessState(int procState)",
    "returnType" : "int",
    "comment" : "\n     * Maps the ActivityManager procstate into corresponding BatteryStats procstate.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int mapUidProcessStateToBatteryConsumerProcessState(int processState)",
    "returnType" : "int",
    "comment" : "\n     * Maps BatteryStats.Uid process state to the BatteryConsumer process state.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean isProcessStateDataAvailable()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if battery consumption is tracked on a per-process-state basis.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract DailyItem getDailyItemLocked(int daysAgo)",
    "returnType" : "DailyItem",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract long getCurrentDailyStartTime()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract long getNextMinDailyDeadline()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract long getNextMaxDailyDeadline()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract CpuScalingPolicies getCpuScalingPolicies()",
    "returnType" : "CpuScalingPolicies",
    "comment" : "\n     * Returns the CPU scaling policies.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void commitCurrentHistoryBatchLocked()",
    "returnType" : "void",
    "comment" : "\n     * Don't allow any more batching in to the current history event.  This\n     * is called when printing partial histories, so to ensure that the next\n     * history event will go in to a new batch after what was printed in the\n     * last partial history.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getHistoryTotalSize()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract int getHistoryUsedSize()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract int getHistoryStringPoolSize()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract int getHistoryStringPoolBytes()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract String getHistoryTagPoolString(int index)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract int getHistoryTagPoolUid(int index)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract BatteryStatsHistoryIterator iterateBatteryStatsHistory(@CurrentTimeMillisLong long startTimeMs, @CurrentTimeMillisLong long endTimeMs)",
    "returnType" : "BatteryStatsHistoryIterator",
    "comment" : "\n     * Returns a BatteryStatsHistoryIterator. Battery history will continue being writable,\n     * but the iterator will continue iterating over the snapshot taken at the time this method\n     * is called.\n     *\n     * @param startTimeMs wall-clock time to start iterating from, inclusive\n     * @param endTimeMs wall-clock time to stop iterating, exclusive.\n     *                  Pass 0 to indicate current time.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getStartCount()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of times the device has been started.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract long getScreenOnTime(long elapsedRealtimeUs, int which)",
    "returnType" : "long",
    "comment" : "\n     * Returns the time in microseconds that the screen has been on while the device was\n     * running on battery.\n     *\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getScreenOnCount(int which)",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of times the screen was turned on.\n     *\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract long getScreenDozeTime(long elapsedRealtimeUs, int which)",
    "returnType" : "long",
    "comment" : "\n     * Returns the time in microseconds that the screen has been dozing while the device was\n     * running on battery.\n     *\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getScreenDozeCount(int which)",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of times the screen was turned dozing.\n     *\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract long getInteractiveTime(long elapsedRealtimeUs, int which)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract long getScreenBrightnessTime(int brightnessBin, long elapsedRealtimeUs, int which)",
    "returnType" : "long",
    "comment" : "\n     * Returns the time in microseconds that the screen has been on with\n     * the given brightness\n     *\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Timer getScreenBrightnessTimer(int brightnessBin)",
    "returnType" : "Timer",
    "comment" : "\n     * Returns the {@link Timer} object that tracks the given screen brightness.\n     *\n     * {@hide}\n     ",
    "links" : [ "Timer" ]
  }, {
    "name" : "public abstract int getDisplayCount()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of physical displays on the device.\n     *\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract long getDisplayScreenOnTime(int display, long elapsedRealtimeUs)",
    "returnType" : "long",
    "comment" : "\n     * Returns the time in microseconds that the screen has been on for a display while the\n     * device was running on battery.\n     *\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract long getDisplayScreenDozeTime(int display, long elapsedRealtimeUs)",
    "returnType" : "long",
    "comment" : "\n     * Returns the time in microseconds that a display has been dozing while the device was\n     * running on battery.\n     *\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract long getDisplayScreenBrightnessTime(int display, int brightnessBin, long elapsedRealtimeUs)",
    "returnType" : "long",
    "comment" : "\n     * Returns the time in microseconds that a display has been on with the given brightness\n     * level while the device was running on battery.\n     *\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract long getPowerSaveModeEnabledTime(long elapsedRealtimeUs, int which)",
    "returnType" : "long",
    "comment" : "\n     * Returns the time in microseconds that power save mode has been enabled while the device was\n     * running on battery.\n     *\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getPowerSaveModeEnabledCount(int which)",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of times that power save mode was enabled.\n     *\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract long getDeviceIdleModeTime(int mode, long elapsedRealtimeUs, int which)",
    "returnType" : "long",
    "comment" : "\n     * Returns the time in microseconds that device has been in idle mode while\n     * running on battery.\n     *\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getDeviceIdleModeCount(int mode, int which)",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of times that the devie has gone in to idle mode.\n     *\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract long getLongestDeviceIdleModeTime(int mode)",
    "returnType" : "long",
    "comment" : "\n     * Return the longest duration we spent in a particular device idle mode (fully in the\n     * mode, not in idle maintenance etc).\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract long getDeviceIdlingTime(int mode, long elapsedRealtimeUs, int which)",
    "returnType" : "long",
    "comment" : "\n     * Returns the time in microseconds that device has been in idling while on\n     * battery.  This is broader than {@link #getDeviceIdleModeTime} -- it\n     * counts all of the time that we consider the device to be idle, whether or not\n     * it is currently in the actual device idle mode.\n     *\n     * {@hide}\n     ",
    "links" : [ "#getDeviceIdleModeTime" ]
  }, {
    "name" : "public abstract int getDeviceIdlingCount(int mode, int which)",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of times that the device has started idling.\n     *\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getNumConnectivityChange(int which)",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of times that connectivity state changed.\n     *\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract long getGpsSignalQualityTime(int strengthBin, long elapsedRealtimeUs, int which)",
    "returnType" : "long",
    "comment" : "\n     * Returns the time in microseconds that the phone has been running with\n     * the given GPS signal quality level\n     *\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract long getGpsBatteryDrainMaMs()",
    "returnType" : "long",
    "comment" : "\n     * Returns the GPS battery drain in mA-ms\n     *\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract long getPhoneOnTime(long elapsedRealtimeUs, int which)",
    "returnType" : "long",
    "comment" : "\n     * Returns the time in microseconds that the phone has been on while the device was\n     * running on battery.\n     *\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getPhoneOnCount(int which)",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of times a phone call was activated.\n     *\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract long getPhoneSignalStrengthTime(int strengthBin, long elapsedRealtimeUs, int which)",
    "returnType" : "long",
    "comment" : "\n     * Returns the time in microseconds that the phone has been running with\n     * the given signal strength.\n     *\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract long getPhoneSignalScanningTime(long elapsedRealtimeUs, int which)",
    "returnType" : "long",
    "comment" : "\n     * Returns the time in microseconds that the phone has been trying to\n     * acquire a signal.\n     *\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Timer getPhoneSignalScanningTimer()",
    "returnType" : "Timer",
    "comment" : "\n     * Returns the {@link Timer} object that tracks how much the phone has been trying to\n     * acquire a signal.\n     *\n     * {@hide}\n     ",
    "links" : [ "Timer" ]
  }, {
    "name" : "public abstract int getPhoneSignalStrengthCount(int strengthBin, int which)",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of times the phone has entered the given signal strength.\n     *\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract Timer getPhoneSignalStrengthTimer(int strengthBin)",
    "returnType" : "Timer",
    "comment" : "\n     * Return the {@link Timer} object used to track the given signal strength's duration and\n     * counts.\n     ",
    "links" : [ "Timer" ]
  }, {
    "name" : "public abstract long getMobileRadioActiveTime(long elapsedRealtimeUs, int which)",
    "returnType" : "long",
    "comment" : "\n     * Returns the time in microseconds that the mobile network has been active\n     * (in a high power state).\n     *\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getMobileRadioActiveCount(int which)",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of times that the mobile network has transitioned to the\n     * active state.\n     *\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract long getMobileRadioActiveAdjustedTime(int which)",
    "returnType" : "long",
    "comment" : "\n     * Returns the time in microseconds that is the difference between the mobile radio\n     * time we saw based on the elapsed timestamp when going down vs. the given time stamp\n     * from the radio.\n     *\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract long getMobileRadioActiveUnknownTime(int which)",
    "returnType" : "long",
    "comment" : "\n     * Returns the time in microseconds that the mobile network has been active\n     * (in a high power state) but not being able to blame on an app.\n     *\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getMobileRadioActiveUnknownCount(int which)",
    "returnType" : "int",
    "comment" : "\n     * Return count of number of times radio was up that could not be blamed on apps.\n     *\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getAllNetworkTypesCount()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static int getAllNetworkTypesCount$ravenwood()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract long getPhoneDataConnectionTime(int dataType, long elapsedRealtimeUs, int which)",
    "returnType" : "long",
    "comment" : "\n     * Returns the time in microseconds that the phone has been running with\n     * the given data connection.\n     *\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getPhoneDataConnectionCount(int dataType, int which)",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of times the phone has entered the given data\n     * connection type.\n     *\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Timer getPhoneDataConnectionTimer(int dataType)",
    "returnType" : "Timer",
    "comment" : "\n     * Returns the {@link Timer} object that tracks the phone's data connection type stats.\n     ",
    "links" : [ "Timer" ]
  }, {
    "name" : "public abstract long getNrNsaTime(long elapsedRealtimeUs)",
    "returnType" : "long",
    "comment" : "\n     * Returns the time in microseconds that the phone's data connection was in NR NSA mode while\n     * on battery.\n     *\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract long getActiveRadioDurationMs(@RadioAccessTechnology int rat, @ServiceState.FrequencyRange int frequencyRange, int signalStrength, long elapsedRealtimeMs)",
    "returnType" : "long",
    "comment" : "\n     * Returns the time in milliseconds that the mobile radio has been active on a\n     * given Radio Access Technology (RAT), at a given frequency (NR RAT only), for a given\n     * transmission power level.\n     *\n     * @param rat            Radio Access Technology {@see RadioAccessTechnology}\n     * @param frequencyRange frequency range {@see ServiceState.FrequencyRange}, only needed for\n     *                       RADIO_ACCESS_TECHNOLOGY_NR. Use\n     *                       {@link ServiceState.FREQUENCY_RANGE_UNKNOWN} for other Radio Access\n     *                       Technologies.\n     * @param signalStrength the cellular signal strength. {@see CellSignalStrength#getLevel()}\n     * @param elapsedRealtimeMs current elapsed realtime\n     * @return time (in milliseconds) the mobile radio spent active in the specified state,\n     *         while on battery.\n     * @hide\n     ",
    "links" : [ "ServiceState.FREQUENCY_RANGE_UNKNOWN" ]
  }, {
    "name" : "public abstract long getActiveTxRadioDurationMs(@RadioAccessTechnology int rat, @ServiceState.FrequencyRange int frequencyRange, int signalStrength, long elapsedRealtimeMs)",
    "returnType" : "long",
    "comment" : "\n     * Returns the time in milliseconds that the mobile radio has been actively transmitting data on\n     * a given Radio Access Technology (RAT), at a given frequency (NR RAT only), for a given\n     * transmission power level.\n     *\n     * @param rat            Radio Access Technology {@see RadioAccessTechnology}\n     * @param frequencyRange frequency range {@see ServiceState.FrequencyRange}, only needed for\n     *                       RADIO_ACCESS_TECHNOLOGY_NR. Use\n     *                       {@link ServiceState.FREQUENCY_RANGE_UNKNOWN} for other Radio Access\n     *                       Technologies.\n     * @param signalStrength the cellular signal strength. {@see CellSignalStrength#getLevel()}\n     * @param elapsedRealtimeMs current elapsed realtime\n     * @return time (in milliseconds) the mobile radio spent actively transmitting data in the\n     *         specified state, while on battery. Returns {@link DURATION_UNAVAILABLE} if\n     *         data unavailable.\n     * @hide\n     ",
    "links" : [ "DURATION_UNAVAILABLE", "ServiceState.FREQUENCY_RANGE_UNKNOWN" ]
  }, {
    "name" : "public abstract long getActiveRxRadioDurationMs(@RadioAccessTechnology int rat, @ServiceState.FrequencyRange int frequencyRange, long elapsedRealtimeMs)",
    "returnType" : "long",
    "comment" : "\n     * Returns the time in milliseconds that the mobile radio has been actively receiving data on a\n     * given Radio Access Technology (RAT), at a given frequency (NR RAT only), for a given\n     * transmission power level.\n     *\n     * @param rat            Radio Access Technology {@see RadioAccessTechnology}\n     * @param frequencyRange frequency range {@see ServiceState.FrequencyRange}, only needed for\n     *                       RADIO_ACCESS_TECHNOLOGY_NR. Use\n     *                       {@link ServiceState.FREQUENCY_RANGE_UNKNOWN} for other Radio Access\n     *                       Technologies.\n     * @param elapsedRealtimeMs current elapsed realtime\n     * @return time (in milliseconds) the mobile radio spent actively receiving data in the\n     *         specified state, while on battery. Returns {@link DURATION_UNAVAILABLE} if\n     *         data unavailable.\n     * @hide\n     ",
    "links" : [ "DURATION_UNAVAILABLE", "ServiceState.FREQUENCY_RANGE_UNKNOWN" ]
  }, {
    "name" : "public abstract long getBluetoothEnergyConsumptionUC()",
    "returnType" : "long",
    "comment" : "\n     * Returns the battery consumption (in microcoulombs) of bluetooth, derived from on\n     * device power measurement data.\n     * Will return {@link #POWER_DATA_UNAVAILABLE} if data is unavailable.\n     *\n     * {@hide}\n     ",
    "links" : [ "#POWER_DATA_UNAVAILABLE" ]
  }, {
    "name" : "public abstract long getCpuEnergyConsumptionUC()",
    "returnType" : "long",
    "comment" : "\n     * Returns the battery consumption (in microcoulombs) of the cpu, derived from on device power\n     * measurement data.\n     * Will return {@link #POWER_DATA_UNAVAILABLE} if data is unavailable.\n     *\n     * {@hide}\n     ",
    "links" : [ "#POWER_DATA_UNAVAILABLE" ]
  }, {
    "name" : "public abstract long getGnssEnergyConsumptionUC()",
    "returnType" : "long",
    "comment" : "\n     * Returns the battery consumption (in microcoulombs) of the GNSS, derived from on device power\n     * measurement data.\n     * Will return {@link #POWER_DATA_UNAVAILABLE} if data is unavailable.\n     *\n     * {@hide}\n     ",
    "links" : [ "#POWER_DATA_UNAVAILABLE" ]
  }, {
    "name" : "public abstract long getMobileRadioEnergyConsumptionUC()",
    "returnType" : "long",
    "comment" : "\n     * Returns the battery consumption (in microcoulombs) of the radio, derived from on device power\n     * measurement data.\n     * Will return {@link #POWER_DATA_UNAVAILABLE} if data is unavailable.\n     *\n     * {@hide}\n     ",
    "links" : [ "#POWER_DATA_UNAVAILABLE" ]
  }, {
    "name" : "public abstract long getPhoneEnergyConsumptionUC()",
    "returnType" : "long",
    "comment" : "\n     * Returns the battery consumption (in microcoulombs) of the phone calls, derived from on device\n     * power measurement data.\n     * Will return {@link #POWER_DATA_UNAVAILABLE} if data is unavailable.\n     *\n     * {@hide}\n     ",
    "links" : [ "#POWER_DATA_UNAVAILABLE" ]
  }, {
    "name" : "public abstract long getScreenOnEnergyConsumptionUC()",
    "returnType" : "long",
    "comment" : "\n     * Returns the battery consumption (in microcoulombs) of the screen while on, derived from on\n     * device power measurement data.\n     * Will return {@link #POWER_DATA_UNAVAILABLE} if data is unavailable.\n     *\n     * {@hide}\n     ",
    "links" : [ "#POWER_DATA_UNAVAILABLE" ]
  }, {
    "name" : "public abstract long getScreenDozeEnergyConsumptionUC()",
    "returnType" : "long",
    "comment" : "\n     * Returns the battery consumption (in microcoulombs) of the screen in doze, derived from on\n     * device power measurement data.\n     * Will return {@link #POWER_DATA_UNAVAILABLE} if data is unavailable.\n     *\n     * {@hide}\n     ",
    "links" : [ "#POWER_DATA_UNAVAILABLE" ]
  }, {
    "name" : "public abstract long getWifiEnergyConsumptionUC()",
    "returnType" : "long",
    "comment" : "\n     * Returns the battery consumption (in microcoulombs) of wifi, derived from on\n     * device power measurement data.\n     * Will return {@link #POWER_DATA_UNAVAILABLE} if data is unavailable.\n     *\n     * {@hide}\n     ",
    "links" : [ "#POWER_DATA_UNAVAILABLE" ]
  }, {
    "name" : "public abstract long getCameraEnergyConsumptionUC()",
    "returnType" : "long",
    "comment" : "\n     * Returns the battery consumption (in microcoulombs) of camera, derived from on\n     * device power measurement data.\n     * Will return {@link #POWER_DATA_UNAVAILABLE} if data is unavailable.\n     *\n     * {@hide}\n     ",
    "links" : [ "#POWER_DATA_UNAVAILABLE" ]
  }, {
    "name" : "public abstract long[] getCustomEnergyConsumerBatteryConsumptionUC()",
    "returnType" : "long[]",
    "comment" : "\n     * Returns the battery consumption (in microcoulombs) that each\n     * {@link android.hardware.power.stats.EnergyConsumer.ordinal} of (custom) energy consumer\n     * type {@link android.hardware.power.stats.EnergyConsumerType#OTHER}) consumed.\n     *\n     * @return charge (in microcoulombs) used by each (custom) energy consumer of type OTHER,\n     * indexed by their ordinal. Returns null if no energy reporting is supported.\n     *\n     * {@hide}\n     ",
    "links" : [ "android.hardware.power.stats.EnergyConsumer.ordinal", "android.hardware.power.stats.EnergyConsumerType#OTHER" ]
  }, {
    "name" : "public abstract String[] getCustomEnergyConsumerNames()",
    "returnType" : "String[]",
    "comment" : "\n     * Returns the names of all {@link android.hardware.power.stats.EnergyConsumer}'s\n     * of (custom) energy consumer type\n     * {@link android.hardware.power.stats.EnergyConsumerType#OTHER}).\n     *\n     * {@hide}\n     ",
    "links" : [ "android.hardware.power.stats.EnergyConsumer", "android.hardware.power.stats.EnergyConsumerType#OTHER" ]
  }, {
    "name" : "public abstract long getWifiMulticastWakelockTime(long elapsedRealtimeUs, int which)",
    "returnType" : "long",
    "comment" : "\n     * Returns total time for WiFi Multicast Wakelock timer.\n     * Note that this may be different from the sum of per uid timer values.\n     *\n     *  {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getWifiMulticastWakelockCount(int which)",
    "returnType" : "int",
    "comment" : "\n     * Returns total time for WiFi Multicast Wakelock timer\n     * Note that this may be different from the sum of per uid timer values.\n     *\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract long getWifiOnTime(long elapsedRealtimeUs, int which)",
    "returnType" : "long",
    "comment" : "\n     * Returns the time in microseconds that wifi has been on while the device was\n     * running on battery.\n     *\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract long getWifiActiveTime(long elapsedRealtimeUs, int which)",
    "returnType" : "long",
    "comment" : "\n     * Returns the time in microseconds that wifi has been active while the device was\n     * running on battery.\n     *\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract long getGlobalWifiRunningTime(long elapsedRealtimeUs, int which)",
    "returnType" : "long",
    "comment" : "\n     * Returns the time in microseconds that wifi has been on and the driver has\n     * been in the running state while the device was running on battery.\n     *\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract long getWifiStateTime(@WifiState int wifiState, long elapsedRealtimeUs, @StatName int which)",
    "returnType" : "long",
    "comment" : "\n     * Returns the time in microseconds that WiFi has been running in the given state.\n     *\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getWifiStateCount(@WifiState int wifiState, @StatName int which)",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of times that WiFi has entered the given state.\n     *\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Timer getWifiStateTimer(@WifiState int wifiState)",
    "returnType" : "Timer",
    "comment" : "\n     * Returns the {@link Timer} object that tracks the given WiFi state.\n     *\n     * {@hide}\n     ",
    "links" : [ "Timer" ]
  }, {
    "name" : "public abstract long getWifiSupplStateTime(@WifiSupplState int state, long elapsedRealtimeUs, @StatName int which)",
    "returnType" : "long",
    "comment" : "\n     * Returns the time in microseconds that the wifi supplicant has been\n     * in a given state.\n     *\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getWifiSupplStateCount(@WifiSupplState int state, @StatName int which)",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of times that the wifi supplicant has transitioned\n     * to a given state.\n     *\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Timer getWifiSupplStateTimer(@WifiSupplState int state)",
    "returnType" : "Timer",
    "comment" : "\n     * Returns the {@link Timer} object that tracks the given wifi supplicant state.\n     *\n     * {@hide}\n     ",
    "links" : [ "Timer" ]
  }, {
    "name" : "public abstract long getWifiSignalStrengthTime(int strengthBin, long elapsedRealtimeUs, int which)",
    "returnType" : "long",
    "comment" : "\n     * Returns the time in microseconds that WIFI has been running with\n     * the given signal strength.\n     *\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getWifiSignalStrengthCount(int strengthBin, int which)",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of times WIFI has entered the given signal strength.\n     *\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Timer getWifiSignalStrengthTimer(int strengthBin)",
    "returnType" : "Timer",
    "comment" : "\n     * Returns the {@link Timer} object that tracks the given WIFI signal strength.\n     *\n     * {@hide}\n     ",
    "links" : [ "Timer" ]
  }, {
    "name" : "public abstract long getFlashlightOnTime(long elapsedRealtimeUs, int which)",
    "returnType" : "long",
    "comment" : "\n     * Returns the time in microseconds that the flashlight has been on while the device was\n     * running on battery.\n     *\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract long getFlashlightOnCount(int which)",
    "returnType" : "long",
    "comment" : "\n     * Returns the number of times that the flashlight has been turned on while the device was\n     * running on battery.\n     *\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract long getCameraOnTime(long elapsedRealtimeUs, int which)",
    "returnType" : "long",
    "comment" : "\n     * Returns the time in microseconds that the camera has been on while the device was\n     * running on battery.\n     *\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract long getBluetoothScanTime(long elapsedRealtimeUs, int which)",
    "returnType" : "long",
    "comment" : "\n     * Returns the time in microseconds that bluetooth scans were running while the device was\n     * on battery.\n     *\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract long getNetworkActivityBytes(int type, int which)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract long getNetworkActivityPackets(int type, int which)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean hasWifiActivityReporting()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the BatteryStats object has detailed WiFi power reports.\n     * When true, calling {@link #getWifiControllerActivity()} will yield the\n     * actual power data.\n     ",
    "links" : [ "#getWifiControllerActivity()" ]
  }, {
    "name" : "public abstract ControllerActivityCounter getWifiControllerActivity()",
    "returnType" : "ControllerActivityCounter",
    "comment" : "\n     * Returns a {@link ControllerActivityCounter} which is an aggregate of the times spent\n     * in various radio controller states, such as transmit, receive, and idle.\n     * @return non-null {@link ControllerActivityCounter}\n     ",
    "links" : [ "ControllerActivityCounter" ]
  }, {
    "name" : "public abstract boolean hasBluetoothActivityReporting()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the BatteryStats object has detailed bluetooth power reports.\n     * When true, calling {@link #getBluetoothControllerActivity()} will yield the\n     * actual power data.\n     ",
    "links" : [ "#getBluetoothControllerActivity()" ]
  }, {
    "name" : "public abstract ControllerActivityCounter getBluetoothControllerActivity()",
    "returnType" : "ControllerActivityCounter",
    "comment" : "\n     * Returns a {@link ControllerActivityCounter} which is an aggregate of the times spent\n     * in various radio controller states, such as transmit, receive, and idle.\n     * @return non-null {@link ControllerActivityCounter}\n     ",
    "links" : [ "ControllerActivityCounter" ]
  }, {
    "name" : "public abstract boolean hasModemActivityReporting()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the BatteryStats object has detailed modem power reports.\n     * When true, calling {@link #getModemControllerActivity()} will yield the\n     * actual power data.\n     ",
    "links" : [ "#getModemControllerActivity()" ]
  }, {
    "name" : "public abstract ControllerActivityCounter getModemControllerActivity()",
    "returnType" : "ControllerActivityCounter",
    "comment" : "\n     * Returns a {@link ControllerActivityCounter} which is an aggregate of the times spent\n     * in various radio controller states, such as transmit, receive, and idle.\n     * @return non-null {@link ControllerActivityCounter}\n     ",
    "links" : [ "ControllerActivityCounter" ]
  }, {
    "name" : "public abstract long getStartClockTime()",
    "returnType" : "long",
    "comment" : "\n     * Return the wall clock time when battery stats data collection started.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String getStartPlatformVersion()",
    "returnType" : "String",
    "comment" : "\n     * Return platform version tag that we were running in when the battery stats started.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String getEndPlatformVersion()",
    "returnType" : "String",
    "comment" : "\n     * Return platform version tag that we were running in when the battery stats ended.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getParcelVersion()",
    "returnType" : "int",
    "comment" : "\n     * Return the internal version code of the parcelled format.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean getIsOnBattery()",
    "returnType" : "boolean",
    "comment" : "\n     * Return whether we are currently running on battery.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract long getStatsStartRealtime()",
    "returnType" : "long",
    "comment" : "\n     * Returns the timestamp of when battery stats collection started, in microseconds.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract SparseArray<? extends Uid> getUidStats()",
    "returnType" : "SparseArray<? extends Uid>",
    "comment" : "\n     * Returns a SparseArray containing the statistics for each uid.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract long getBatteryUptime(long curTime)",
    "returnType" : "long",
    "comment" : "\n     * Returns the current battery uptime in microseconds.\n     *\n     * @param curTime the amount of elapsed realtime in microseconds.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract long getBatteryRealtime(long curTime)",
    "returnType" : "long",
    "comment" : "\n     * Returns the current battery realtime in microseconds.\n     *\n     * @param curTime the amount of elapsed realtime in microseconds.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getDischargeStartLevel()",
    "returnType" : "int",
    "comment" : "\n     * Returns the battery percentage level at the last time the device was unplugged from power, or\n     * the last time it booted on battery power.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getDischargeCurrentLevel()",
    "returnType" : "int",
    "comment" : "\n     * Returns the current battery percentage level if we are in a discharge cycle, otherwise\n     * returns the level at the last plug event.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getLowDischargeAmountSinceCharge()",
    "returnType" : "int",
    "comment" : "\n     * Get the amount the battery has discharged since the stats were\n     * last reset after charging, as a lower-end approximation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getHighDischargeAmountSinceCharge()",
    "returnType" : "int",
    "comment" : "\n     * Get the amount the battery has discharged since the stats were\n     * last reset after charging, as an upper-end approximation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getDischargeAmount(int which)",
    "returnType" : "int",
    "comment" : "\n     * Retrieve the discharge amount over the selected discharge period <var>which</var>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getDischargeAmountScreenOn()",
    "returnType" : "int",
    "comment" : "\n     * Get the amount the battery has discharged while the screen was on,\n     * since the last time power was unplugged.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getDischargeAmountScreenOnSinceCharge()",
    "returnType" : "int",
    "comment" : "\n     * Get the amount the battery has discharged while the screen was on,\n     * since the last time the device was charged.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getDischargeAmountScreenOff()",
    "returnType" : "int",
    "comment" : "\n     * Get the amount the battery has discharged while the screen was off,\n     * since the last time power was unplugged.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getDischargeAmountScreenOffSinceCharge()",
    "returnType" : "int",
    "comment" : "\n     * Get the amount the battery has discharged while the screen was off,\n     * since the last time the device was charged.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getDischargeAmountScreenDoze()",
    "returnType" : "int",
    "comment" : "\n     * Get the amount the battery has discharged while the screen was dozing,\n     * since the last time power was unplugged.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getDischargeAmountScreenDozeSinceCharge()",
    "returnType" : "int",
    "comment" : "\n     * Get the amount the battery has discharged while the screen was dozing,\n     * since the last time the device was charged.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract long[] getSystemServiceTimeAtCpuSpeeds()",
    "returnType" : "long[]",
    "comment" : "\n     * Returns the approximate CPU time (in microseconds) spent by the system server handling\n     * incoming service calls from apps.  The result is returned as an array of longs,\n     * organized as a sequence like this:\n     * <pre>\n     *     cluster1-speed1, cluster1-speed2, ..., cluster2-speed1, cluster2-speed2, ...\n     * </pre>\n     *\n     * @see com.android.internal.os.CpuScalingPolicies#getPolicies\n     * @see com.android.internal.os.CpuScalingPolicies#getFrequencies\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract long computeBatteryUptime(long curTime, int which)",
    "returnType" : "long",
    "comment" : "\n     * Returns the total, last, or current battery uptime in microseconds.\n     *\n     * @param curTime the elapsed realtime in microseconds.\n     * @param which one of STATS_SINCE_CHARGED, STATS_SINCE_UNPLUGGED, or STATS_CURRENT.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract long computeBatteryRealtime(long curTime, int which)",
    "returnType" : "long",
    "comment" : "\n     * Returns the total, last, or current battery realtime in microseconds.\n     *\n     * @param curTime the current elapsed realtime in microseconds.\n     * @param which one of STATS_SINCE_CHARGED, STATS_SINCE_UNPLUGGED, or STATS_CURRENT.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract long computeBatteryScreenOffUptime(long curTime, int which)",
    "returnType" : "long",
    "comment" : "\n     * Returns the total, last, or current battery screen off/doze uptime in microseconds.\n     *\n     * @param curTime the elapsed realtime in microseconds.\n     * @param which one of STATS_SINCE_CHARGED, STATS_SINCE_UNPLUGGED, or STATS_CURRENT.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract long computeBatteryScreenOffRealtime(long curTime, int which)",
    "returnType" : "long",
    "comment" : "\n     * Returns the total, last, or current battery screen off/doze realtime in microseconds.\n     *\n     * @param curTime the current elapsed realtime in microseconds.\n     * @param which one of STATS_SINCE_CHARGED, STATS_SINCE_UNPLUGGED, or STATS_CURRENT.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract long computeUptime(long curTime, int which)",
    "returnType" : "long",
    "comment" : "\n     * Returns the total, last, or current uptime in microseconds.\n     *\n     * @param curTime the current elapsed realtime in microseconds.\n     * @param which one of STATS_SINCE_CHARGED, STATS_SINCE_UNPLUGGED, or STATS_CURRENT.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract long computeRealtime(long curTime, int which)",
    "returnType" : "long",
    "comment" : "\n     * Returns the total, last, or current realtime in microseconds.\n     *\n     * @param curTime the current elapsed realtime in microseconds.\n     * @param which one of STATS_SINCE_CHARGED, STATS_SINCE_UNPLUGGED, or STATS_CURRENT.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract long computeBatteryTimeRemaining(long curTime)",
    "returnType" : "long",
    "comment" : "\n     * Compute an approximation for how much run time (in microseconds) is remaining on\n     * the battery.  Returns -1 if no time can be computed: either there is not\n     * enough current data to make a decision, or the battery is currently\n     * charging.\n     *\n     * @param curTime The current elapsed realtime in microseconds.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract long getUahDischargeScreenOff(int which)",
    "returnType" : "long",
    "comment" : "\n     * Return the amount of battery discharge while the screen was off, measured in\n     * micro-Ampere-hours. This will be non-zero only if the device's battery has\n     * a coulomb counter.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract long getUahDischargeScreenDoze(int which)",
    "returnType" : "long",
    "comment" : "\n     * Return the amount of battery discharge while the screen was in doze mode, measured in\n     * micro-Ampere-hours. This will be non-zero only if the device's battery has\n     * a coulomb counter.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract long getUahDischarge(int which)",
    "returnType" : "long",
    "comment" : "\n     * Return the amount of battery discharge  measured in micro-Ampere-hours. This will be\n     * non-zero only if the device's battery has a coulomb counter.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract long getUahDischargeLightDoze(int which)",
    "returnType" : "long",
    "comment" : "\n     * @return the amount of battery discharge while the device is in light idle mode, measured in\n     * micro-Ampere-hours.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract long getUahDischargeDeepDoze(int which)",
    "returnType" : "long",
    "comment" : "\n     * @return the amount of battery discharge while the device is in deep idle mode, measured in\n     * micro-Ampere-hours.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getEstimatedBatteryCapacity()",
    "returnType" : "int",
    "comment" : "\n     * Returns the estimated real battery capacity, which may be less than the capacity\n     * declared by the PowerProfile.\n     * @return The estimated battery capacity in mAh.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getMinLearnedBatteryCapacity()",
    "returnType" : "int",
    "comment" : "\n     * @return The minimum learned battery capacity in uAh.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getMaxLearnedBatteryCapacity()",
    "returnType" : "int",
    "comment" : "\n     * @return The maximum learned battery capacity in uAh.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getLearnedBatteryCapacity()",
    "returnType" : "int",
    "comment" : "\n     * @return The latest learned battery capacity in uAh.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract LevelStepTracker getDischargeLevelStepTracker()",
    "returnType" : "LevelStepTracker",
    "comment" : "\n     * Return the array of discharge step durations.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract LevelStepTracker getDailyDischargeLevelStepTracker()",
    "returnType" : "LevelStepTracker",
    "comment" : "\n     * Return the array of daily discharge step durations.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract long computeChargeTimeRemaining(long curTime)",
    "returnType" : "long",
    "comment" : "\n     * Compute an approximation for how much time (in microseconds) remains until the battery\n     * is fully charged.  Returns -1 if no time can be computed: either there is not\n     * enough current data to make a decision, or the battery is currently\n     * discharging.\n     *\n     * @param curTime The current elepsed realtime in microseconds.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract LevelStepTracker getChargeLevelStepTracker()",
    "returnType" : "LevelStepTracker",
    "comment" : "\n     * Return the array of charge step durations.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract LevelStepTracker getDailyChargeLevelStepTracker()",
    "returnType" : "LevelStepTracker",
    "comment" : "\n     * Return the array of daily charge step durations.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract ArrayList<PackageChange> getDailyPackageChanges()",
    "returnType" : "ArrayList<PackageChange>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract Map<String, ? extends Timer> getWakeupReasonStats()",
    "returnType" : "Map<String, ? extends Timer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract Map<String, ? extends Timer> getKernelWakelockStats()",
    "returnType" : "Map<String, ? extends Timer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract WakeLockStats getWakeLockStats()",
    "returnType" : "WakeLockStats",
    "comment" : "\n     * Returns aggregated wake lock stats.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract BluetoothBatteryStats getBluetoothBatteryStats()",
    "returnType" : "BluetoothBatteryStats",
    "comment" : "\n     * Returns aggregated Bluetooth stats.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Map<String, ? extends Timer> getRpmStats()",
    "returnType" : "Map<String, ? extends Timer>",
    "comment" : "\n     * Returns Timers tracking the total time of each Resource Power Manager state and voter.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Map<String, ? extends Timer> getScreenOffRpmStats()",
    "returnType" : "Map<String, ? extends Timer>",
    "comment" : "\n     * Returns Timers tracking the screen-off time of each Resource Power Manager state and voter.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract LongSparseArray<? extends Timer> getKernelMemoryStats()",
    "returnType" : "LongSparseArray<? extends Timer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static final void formatTimeRaw(StringBuilder out, long seconds)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static final void formatTimeMs(StringBuilder sb, long time)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static final void formatTimeMsNoSpace(StringBuilder sb, long time)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final String formatRatioLocked(long num, long den)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final String formatBytesLocked(long bytes)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String formatCharge(double power)",
    "returnType" : "String",
    "comment" : "\n     * Converts charge in mAh to string.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String formatValue(double value)",
    "returnType" : "String",
    "comment" : "\n     * Converts double to string, limiting small values to 3 significant figures.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static long roundUsToMs(long timeUs)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static long computeWakeLock(Timer timer, long elapsedRealtimeUs, int which)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static final String printWakeLock(StringBuilder sb, Timer timer, long elapsedRealtimeUs, String name, int which, String linePrefix)",
    "returnType" : "String",
    "comment" : "\n     *\n     * @param sb a StringBuilder object.\n     * @param timer a Timer object contining the wakelock times.\n     * @param elapsedRealtimeUs the current on-battery time in microseconds.\n     * @param name the name of the wakelock.\n     * @param which which one of STATS_SINCE_CHARGED, STATS_SINCE_UNPLUGGED, or STATS_CURRENT.\n     * @param linePrefix a String to be prepended to each line of output.\n     * @return the line prefix\n     ",
    "links" : [ ]
  }, {
    "name" : "private static final boolean printTimer(PrintWriter pw, StringBuilder sb, Timer timer, long rawRealtimeUs, int which, String prefix, String type)",
    "returnType" : "boolean",
    "comment" : "\n     * Prints details about a timer, if its total time was greater than 0.\n     *\n     * @param pw a PrintWriter object to print to.\n     * @param sb a StringBuilder object.\n     * @param timer a Timer object contining the wakelock times.\n     * @param rawRealtimeUs the current on-battery time in microseconds.\n     * @param which which one of STATS_SINCE_CHARGED, STATS_SINCE_UNPLUGGED, or STATS_CURRENT.\n     * @param prefix a String to be prepended to each line of output.\n     * @param type the name of the timer.\n     * @return true if anything was printed.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static final String printWakeLockCheckin(StringBuilder sb, Timer timer, long elapsedRealtimeUs, String name, int which, String linePrefix)",
    "returnType" : "String",
    "comment" : "\n     * Checkin version of wakelock printer. Prints simple comma-separated list.\n     *\n     * @param sb a StringBuilder object.\n     * @param timer a Timer object contining the wakelock times.\n     * @param elapsedRealtimeUs the current time in microseconds.\n     * @param name the name of the wakelock.\n     * @param which which one of STATS_SINCE_CHARGED, STATS_SINCE_UNPLUGGED, or STATS_CURRENT.\n     * @param linePrefix a String to be prepended to each line of output.\n     * @return the line prefix\n     ",
    "links" : [ ]
  }, {
    "name" : "private static final void dumpLineHeader(PrintWriter pw, int uid, String category, String type)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static final void dumpLine(PrintWriter pw, int uid, String category, String type, Object... args)",
    "returnType" : "void",
    "comment" : "\n     * Dump a comma-separated line of values for terse checkin mode.\n     *\n     * @param pw the PageWriter to dump log to\n     * @param category category of data (e.g. \"total\", \"last\", \"unplugged\", \"current\" )\n     * @param type type of data (e.g. \"wakelock\", \"sensor\", \"process\", \"apk\" ,  \"process\", \"network\")\n     * @param args type-dependent data arguments\n     ",
    "links" : [ ]
  }, {
    "name" : "private static final void dumpTimer(PrintWriter pw, int uid, String category, String type, Timer timer, long rawRealtime, int which)",
    "returnType" : "void",
    "comment" : "\n     * Dump a given timer stat for terse checkin mode.\n     *\n     * @param pw the PageWriter to dump log to\n     * @param uid the UID to log\n     * @param category category of data (e.g. \"total\", \"last\", \"unplugged\", \"current\" )\n     * @param type type of data (e.g. \"wakelock\", \"sensor\", \"process\", \"apk\" ,  \"process\", \"network\")\n     * @param timer a {@link Timer} to dump stats for\n     * @param rawRealtime the current elapsed realtime of the system in microseconds\n     * @param which one of STATS_SINCE_CHARGED, STATS_SINCE_UNPLUGGED, or STATS_CURRENT\n     ",
    "links" : [ "Timer" ]
  }, {
    "name" : "private static void dumpTimer(ProtoOutputStream proto, long fieldId, Timer timer, long rawRealtimeUs, int which)",
    "returnType" : "void",
    "comment" : "\n     * Dump a given timer stat to the proto stream.\n     *\n     * @param proto the ProtoOutputStream to log to\n     * @param fieldId type of data, the field to save to (e.g. AggregatedBatteryStats.WAKELOCK)\n     * @param timer a {@link Timer} to dump stats for\n     * @param rawRealtimeUs the current elapsed realtime of the system in microseconds\n     * @param which one of STATS_SINCE_CHARGED, STATS_SINCE_UNPLUGGED, or STATS_CURRENT\n     ",
    "links" : [ "Timer" ]
  }, {
    "name" : "private static boolean controllerActivityHasData(ControllerActivityCounter counter, int which)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if the ControllerActivityCounter has any data worth dumping.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static final void dumpControllerActivityLine(PrintWriter pw, int uid, String category, String type, ControllerActivityCounter counter, int which)",
    "returnType" : "void",
    "comment" : "\n     * Dumps the ControllerActivityCounter if it has any data worth dumping.\n     * The order of the arguments in the final check in line is:\n     *\n     * idle, rx, power, tx...\n     *\n     * where tx... is one or more transmit level times.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void dumpControllerActivityProto(ProtoOutputStream proto, long fieldId, ControllerActivityCounter counter, int which)",
    "returnType" : "void",
    "comment" : "\n     * Dumps the ControllerActivityCounter if it has any data worth dumping.\n     ",
    "links" : [ ]
  }, {
    "name" : "private final void printControllerActivityIfInteresting(PrintWriter pw, StringBuilder sb, String prefix, String controllerName, ControllerActivityCounter counter, int which)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final void printControllerActivity(PrintWriter pw, StringBuilder sb, String prefix, String controllerName, ControllerActivityCounter counter, int which)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void printCellularPerRatBreakdown(PrintWriter pw, StringBuilder sb, String prefix, long rawRealtimeMs)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final void dumpCheckinLocked(Context context, PrintWriter pw, int which, int reqUid, boolean wifiOnly, BatteryStatsDumpHelper dumpHelper)",
    "returnType" : "void",
    "comment" : "\n     * Checkin server version of dump to produce more compact, computer-readable log.\n     *\n     * NOTE: all times are expressed in microseconds, unless specified otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void printmAh(PrintWriter printer, double power)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void printmAh(StringBuilder sb, double power)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final void dumpLocked(Context context, PrintWriter pw, String prefix, final int which, int reqUid, boolean wifiOnly, BatteryStatsDumpHelper dumpHelper)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void printBitDescriptions(StringBuilder sb, int oldval, int newval, HistoryTag wakelockTag, BitDescription[] descriptions, boolean longNames)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void prepareForDumpLocked()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void printSizeValue(PrintWriter pw, long size)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean dumpTimeEstimate(PrintWriter pw, String label1, String label2, String label3, long estimatedTime)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean dumpDurationSteps(PrintWriter pw, String prefix, String header, LevelStepTracker steps, boolean checkin)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void dumpDurationSteps(ProtoOutputStream proto, long fieldId, LevelStepTracker steps)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void dumpHistory(PrintWriter pw, int flags, long histStart, boolean checkin)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void dumpHistoryTagPoolLocked(PrintWriter pw, boolean checkin)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void dumpDailyLevelStepSummary(PrintWriter pw, String prefix, String label, LevelStepTracker steps, StringBuilder tmpSb, int[] tmpOutInt)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void dumpDailyPackageChanges(PrintWriter pw, String prefix, ArrayList<PackageChange> changes)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dump(Context context, PrintWriter pw, int flags, int reqUid, long histStart, BatteryStatsDumpHelper dumpHelper)",
    "returnType" : "void",
    "comment" : "\n     * Dumps a human-readable summary of the battery statistics to the given PrintWriter.\n     *\n     * @param pw         a Printer to receive the dump output.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void dumpLocked(Context context, PrintWriter pw, int flags, int reqUid, boolean filtering, BatteryStatsDumpHelper dumpHelper)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dumpCheckin(Context context, PrintWriter pw, List<ApplicationInfo> apps, int flags, long histStart, BatteryStatsDumpHelper dumpHelper)",
    "returnType" : "void",
    "comment" : " This is called from BatteryStatsService.",
    "links" : [ ]
  }, {
    "name" : "private void dumpCheckinLocked(Context context, PrintWriter pw, List<ApplicationInfo> apps, int flags, BatteryStatsDumpHelper dumpHelper)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dumpProtoLocked(Context context, FileDescriptor fd, List<ApplicationInfo> apps, int flags, long histStart, BatteryStatsDumpHelper dumpHelper)",
    "returnType" : "void",
    "comment" : "\n     * Dump #STATS_SINCE_CHARGED batterystats data to a proto. If the flags include\n     * DUMP_INCLUDE_HISTORY or DUMP_HISTORY_ONLY, only the history will be dumped.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void dumpProtoAppsLocked(ProtoOutputStream proto, BatteryUsageStats stats, List<ApplicationInfo> apps, ProportionalAttributionCalculator proportionalAttributionCalculator)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void dumpProtoHistoryLocked(ProtoOutputStream proto, int flags, long histStart)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void dumpProtoSystemLocked(ProtoOutputStream proto, BatteryUsageStats stats)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static boolean checkWifiOnly(Context context)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the device does not have data-capable telephony.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean shouldHidePowerComponent(int powerComponent)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private List<UidMobileRadioStats> getUidMobileRadioStats(List<UidBatteryConsumer> uidBatteryConsumers)",
    "returnType" : "List<UidMobileRadioStats>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected static boolean isLowRamDevice()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected static boolean isLowRamDevice$ravenwood()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected static int getCellSignalStrengthLevelCount()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected static int getCellSignalStrengthLevelCount$ravenwood()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected static int getModemTxPowerLevelCount()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected static int getModemTxPowerLevelCount$ravenwood()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected static boolean isKernelStatsAvailable()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected static boolean isKernelStatsAvailable$ravenwood()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected static int getDisplayTransport(int[] transports)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected static int getDisplayTransport$ravenwood(int[] transports)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static int mapToInternalProcessState(int procState)", "public static int mapUidProcessStateToBatteryConsumerProcessState(int processState)", "public abstract boolean isProcessStateDataAvailable()", "public abstract DailyItem getDailyItemLocked(int daysAgo)", "public abstract long getCurrentDailyStartTime()", "public abstract long getNextMinDailyDeadline()", "public abstract long getNextMaxDailyDeadline()", "public abstract CpuScalingPolicies getCpuScalingPolicies()", "public abstract void commitCurrentHistoryBatchLocked()", "public abstract int getHistoryTotalSize()", "public abstract int getHistoryUsedSize()", "public abstract int getHistoryStringPoolSize()", "public abstract int getHistoryStringPoolBytes()", "public abstract String getHistoryTagPoolString(int index)", "public abstract int getHistoryTagPoolUid(int index)", "public abstract BatteryStatsHistoryIterator iterateBatteryStatsHistory(@CurrentTimeMillisLong long startTimeMs, @CurrentTimeMillisLong long endTimeMs)", "public abstract int getStartCount()", "public abstract long getScreenOnTime(long elapsedRealtimeUs, int which)", "public abstract int getScreenOnCount(int which)", "public abstract long getScreenDozeTime(long elapsedRealtimeUs, int which)", "public abstract int getScreenDozeCount(int which)", "public abstract long getInteractiveTime(long elapsedRealtimeUs, int which)", "public abstract long getScreenBrightnessTime(int brightnessBin, long elapsedRealtimeUs, int which)", "public abstract Timer getScreenBrightnessTimer(int brightnessBin)", "public abstract int getDisplayCount()", "public abstract long getDisplayScreenOnTime(int display, long elapsedRealtimeUs)", "public abstract long getDisplayScreenDozeTime(int display, long elapsedRealtimeUs)", "public abstract long getDisplayScreenBrightnessTime(int display, int brightnessBin, long elapsedRealtimeUs)", "public abstract long getPowerSaveModeEnabledTime(long elapsedRealtimeUs, int which)", "public abstract int getPowerSaveModeEnabledCount(int which)", "public abstract long getDeviceIdleModeTime(int mode, long elapsedRealtimeUs, int which)", "public abstract int getDeviceIdleModeCount(int mode, int which)", "public abstract long getLongestDeviceIdleModeTime(int mode)", "public abstract long getDeviceIdlingTime(int mode, long elapsedRealtimeUs, int which)", "public abstract int getDeviceIdlingCount(int mode, int which)", "public abstract int getNumConnectivityChange(int which)", "public abstract long getGpsSignalQualityTime(int strengthBin, long elapsedRealtimeUs, int which)", "public abstract long getGpsBatteryDrainMaMs()", "public abstract long getPhoneOnTime(long elapsedRealtimeUs, int which)", "public abstract int getPhoneOnCount(int which)", "public abstract long getPhoneSignalStrengthTime(int strengthBin, long elapsedRealtimeUs, int which)", "public abstract long getPhoneSignalScanningTime(long elapsedRealtimeUs, int which)", "public abstract Timer getPhoneSignalScanningTimer()", "public abstract int getPhoneSignalStrengthCount(int strengthBin, int which)", "protected abstract Timer getPhoneSignalStrengthTimer(int strengthBin)", "public abstract long getMobileRadioActiveTime(long elapsedRealtimeUs, int which)", "public abstract int getMobileRadioActiveCount(int which)", "public abstract long getMobileRadioActiveAdjustedTime(int which)", "public abstract long getMobileRadioActiveUnknownTime(int which)", "public abstract int getMobileRadioActiveUnknownCount(int which)", "public static int getAllNetworkTypesCount()", "public static int getAllNetworkTypesCount$ravenwood()", "public abstract long getPhoneDataConnectionTime(int dataType, long elapsedRealtimeUs, int which)", "public abstract int getPhoneDataConnectionCount(int dataType, int which)", "public abstract Timer getPhoneDataConnectionTimer(int dataType)", "public abstract long getNrNsaTime(long elapsedRealtimeUs)", "public abstract long getActiveRadioDurationMs(@RadioAccessTechnology int rat, @ServiceState.FrequencyRange int frequencyRange, int signalStrength, long elapsedRealtimeMs)", "public abstract long getActiveTxRadioDurationMs(@RadioAccessTechnology int rat, @ServiceState.FrequencyRange int frequencyRange, int signalStrength, long elapsedRealtimeMs)", "public abstract long getActiveRxRadioDurationMs(@RadioAccessTechnology int rat, @ServiceState.FrequencyRange int frequencyRange, long elapsedRealtimeMs)", "public abstract long getBluetoothEnergyConsumptionUC()", "public abstract long getCpuEnergyConsumptionUC()", "public abstract long getGnssEnergyConsumptionUC()", "public abstract long getMobileRadioEnergyConsumptionUC()", "public abstract long getPhoneEnergyConsumptionUC()", "public abstract long getScreenOnEnergyConsumptionUC()", "public abstract long getScreenDozeEnergyConsumptionUC()", "public abstract long getWifiEnergyConsumptionUC()", "public abstract long getCameraEnergyConsumptionUC()", "public abstract long[] getCustomEnergyConsumerBatteryConsumptionUC()", "public abstract String[] getCustomEnergyConsumerNames()", "public abstract long getWifiMulticastWakelockTime(long elapsedRealtimeUs, int which)", "public abstract int getWifiMulticastWakelockCount(int which)", "public abstract long getWifiOnTime(long elapsedRealtimeUs, int which)", "public abstract long getWifiActiveTime(long elapsedRealtimeUs, int which)", "public abstract long getGlobalWifiRunningTime(long elapsedRealtimeUs, int which)", "public abstract long getWifiStateTime(@WifiState int wifiState, long elapsedRealtimeUs, @StatName int which)", "public abstract int getWifiStateCount(@WifiState int wifiState, @StatName int which)", "public abstract Timer getWifiStateTimer(@WifiState int wifiState)", "public abstract long getWifiSupplStateTime(@WifiSupplState int state, long elapsedRealtimeUs, @StatName int which)", "public abstract int getWifiSupplStateCount(@WifiSupplState int state, @StatName int which)", "public abstract Timer getWifiSupplStateTimer(@WifiSupplState int state)", "public abstract long getWifiSignalStrengthTime(int strengthBin, long elapsedRealtimeUs, int which)", "public abstract int getWifiSignalStrengthCount(int strengthBin, int which)", "public abstract Timer getWifiSignalStrengthTimer(int strengthBin)", "public abstract long getFlashlightOnTime(long elapsedRealtimeUs, int which)", "public abstract long getFlashlightOnCount(int which)", "public abstract long getCameraOnTime(long elapsedRealtimeUs, int which)", "public abstract long getBluetoothScanTime(long elapsedRealtimeUs, int which)", "public abstract long getNetworkActivityBytes(int type, int which)", "public abstract long getNetworkActivityPackets(int type, int which)", "public abstract boolean hasWifiActivityReporting()", "public abstract ControllerActivityCounter getWifiControllerActivity()", "public abstract boolean hasBluetoothActivityReporting()", "public abstract ControllerActivityCounter getBluetoothControllerActivity()", "public abstract boolean hasModemActivityReporting()", "public abstract ControllerActivityCounter getModemControllerActivity()", "public abstract long getStartClockTime()", "public abstract String getStartPlatformVersion()", "public abstract String getEndPlatformVersion()", "public abstract int getParcelVersion()", "public abstract boolean getIsOnBattery()", "public abstract long getStatsStartRealtime()", "public abstract SparseArray<? extends Uid> getUidStats()", "public abstract long getBatteryUptime(long curTime)", "public abstract long getBatteryRealtime(long curTime)", "public abstract int getDischargeStartLevel()", "public abstract int getDischargeCurrentLevel()", "public abstract int getLowDischargeAmountSinceCharge()", "public abstract int getHighDischargeAmountSinceCharge()", "public abstract int getDischargeAmount(int which)", "public abstract int getDischargeAmountScreenOn()", "public abstract int getDischargeAmountScreenOnSinceCharge()", "public abstract int getDischargeAmountScreenOff()", "public abstract int getDischargeAmountScreenOffSinceCharge()", "public abstract int getDischargeAmountScreenDoze()", "public abstract int getDischargeAmountScreenDozeSinceCharge()", "public abstract long[] getSystemServiceTimeAtCpuSpeeds()", "public abstract long computeBatteryUptime(long curTime, int which)", "public abstract long computeBatteryRealtime(long curTime, int which)", "public abstract long computeBatteryScreenOffUptime(long curTime, int which)", "public abstract long computeBatteryScreenOffRealtime(long curTime, int which)", "public abstract long computeUptime(long curTime, int which)", "public abstract long computeRealtime(long curTime, int which)", "public abstract long computeBatteryTimeRemaining(long curTime)", "public abstract long getUahDischargeScreenOff(int which)", "public abstract long getUahDischargeScreenDoze(int which)", "public abstract long getUahDischarge(int which)", "public abstract long getUahDischargeLightDoze(int which)", "public abstract long getUahDischargeDeepDoze(int which)", "public abstract int getEstimatedBatteryCapacity()", "public abstract int getMinLearnedBatteryCapacity()", "public abstract int getMaxLearnedBatteryCapacity()", "public abstract int getLearnedBatteryCapacity()", "public abstract LevelStepTracker getDischargeLevelStepTracker()", "public abstract LevelStepTracker getDailyDischargeLevelStepTracker()", "public abstract long computeChargeTimeRemaining(long curTime)", "public abstract LevelStepTracker getChargeLevelStepTracker()", "public abstract LevelStepTracker getDailyChargeLevelStepTracker()", "public abstract ArrayList<PackageChange> getDailyPackageChanges()", "public abstract Map<String, ? extends Timer> getWakeupReasonStats()", "public abstract Map<String, ? extends Timer> getKernelWakelockStats()", "public abstract WakeLockStats getWakeLockStats()", "public abstract BluetoothBatteryStats getBluetoothBatteryStats()", "public abstract Map<String, ? extends Timer> getRpmStats()", "public abstract Map<String, ? extends Timer> getScreenOffRpmStats()", "public abstract LongSparseArray<? extends Timer> getKernelMemoryStats()", "private static final void formatTimeRaw(StringBuilder out, long seconds)", "public static final void formatTimeMs(StringBuilder sb, long time)", "public static final void formatTimeMsNoSpace(StringBuilder sb, long time)", "public final String formatRatioLocked(long num, long den)", " final String formatBytesLocked(long bytes)", "public static String formatCharge(double power)", "private static String formatValue(double value)", "private static long roundUsToMs(long timeUs)", "private static long computeWakeLock(Timer timer, long elapsedRealtimeUs, int which)", "private static final String printWakeLock(StringBuilder sb, Timer timer, long elapsedRealtimeUs, String name, int which, String linePrefix)", "private static final boolean printTimer(PrintWriter pw, StringBuilder sb, Timer timer, long rawRealtimeUs, int which, String prefix, String type)", "private static final String printWakeLockCheckin(StringBuilder sb, Timer timer, long elapsedRealtimeUs, String name, int which, String linePrefix)", "private static final void dumpLineHeader(PrintWriter pw, int uid, String category, String type)", "private static final void dumpLine(PrintWriter pw, int uid, String category, String type, Object... args)", "private static final void dumpTimer(PrintWriter pw, int uid, String category, String type, Timer timer, long rawRealtime, int which)", "private static void dumpTimer(ProtoOutputStream proto, long fieldId, Timer timer, long rawRealtimeUs, int which)", "private static boolean controllerActivityHasData(ControllerActivityCounter counter, int which)", "private static final void dumpControllerActivityLine(PrintWriter pw, int uid, String category, String type, ControllerActivityCounter counter, int which)", "private static void dumpControllerActivityProto(ProtoOutputStream proto, long fieldId, ControllerActivityCounter counter, int which)", "private final void printControllerActivityIfInteresting(PrintWriter pw, StringBuilder sb, String prefix, String controllerName, ControllerActivityCounter counter, int which)", "private final void printControllerActivity(PrintWriter pw, StringBuilder sb, String prefix, String controllerName, ControllerActivityCounter counter, int which)", "private void printCellularPerRatBreakdown(PrintWriter pw, StringBuilder sb, String prefix, long rawRealtimeMs)", "public final void dumpCheckinLocked(Context context, PrintWriter pw, int which, int reqUid, boolean wifiOnly, BatteryStatsDumpHelper dumpHelper)", "private void printmAh(PrintWriter printer, double power)", "private void printmAh(StringBuilder sb, double power)", "public final void dumpLocked(Context context, PrintWriter pw, String prefix, final int which, int reqUid, boolean wifiOnly, BatteryStatsDumpHelper dumpHelper)", " static void printBitDescriptions(StringBuilder sb, int oldval, int newval, HistoryTag wakelockTag, BitDescription[] descriptions, boolean longNames)", "public void prepareForDumpLocked()", "private void printSizeValue(PrintWriter pw, long size)", "private static boolean dumpTimeEstimate(PrintWriter pw, String label1, String label2, String label3, long estimatedTime)", "private static boolean dumpDurationSteps(PrintWriter pw, String prefix, String header, LevelStepTracker steps, boolean checkin)", "private static void dumpDurationSteps(ProtoOutputStream proto, long fieldId, LevelStepTracker steps)", "private void dumpHistory(PrintWriter pw, int flags, long histStart, boolean checkin)", "private void dumpHistoryTagPoolLocked(PrintWriter pw, boolean checkin)", "private void dumpDailyLevelStepSummary(PrintWriter pw, String prefix, String label, LevelStepTracker steps, StringBuilder tmpSb, int[] tmpOutInt)", "private void dumpDailyPackageChanges(PrintWriter pw, String prefix, ArrayList<PackageChange> changes)", "public void dump(Context context, PrintWriter pw, int flags, int reqUid, long histStart, BatteryStatsDumpHelper dumpHelper)", "private void dumpLocked(Context context, PrintWriter pw, int flags, int reqUid, boolean filtering, BatteryStatsDumpHelper dumpHelper)", "public void dumpCheckin(Context context, PrintWriter pw, List<ApplicationInfo> apps, int flags, long histStart, BatteryStatsDumpHelper dumpHelper)", "private void dumpCheckinLocked(Context context, PrintWriter pw, List<ApplicationInfo> apps, int flags, BatteryStatsDumpHelper dumpHelper)", "public void dumpProtoLocked(Context context, FileDescriptor fd, List<ApplicationInfo> apps, int flags, long histStart, BatteryStatsDumpHelper dumpHelper)", "private void dumpProtoAppsLocked(ProtoOutputStream proto, BatteryUsageStats stats, List<ApplicationInfo> apps, ProportionalAttributionCalculator proportionalAttributionCalculator)", "private void dumpProtoHistoryLocked(ProtoOutputStream proto, int flags, long histStart)", "private void dumpProtoSystemLocked(ProtoOutputStream proto, BatteryUsageStats stats)", "public static boolean checkWifiOnly(Context context)", "private boolean shouldHidePowerComponent(int powerComponent)", "private List<UidMobileRadioStats> getUidMobileRadioStats(List<UidBatteryConsumer> uidBatteryConsumers)", "protected static boolean isLowRamDevice()", "protected static boolean isLowRamDevice$ravenwood()", "protected static int getCellSignalStrengthLevelCount()", "protected static int getCellSignalStrengthLevelCount$ravenwood()", "protected static int getModemTxPowerLevelCount()", "protected static int getModemTxPowerLevelCount$ravenwood()", "protected static boolean isKernelStatsAvailable()", "protected static boolean isKernelStatsAvailable$ravenwood()", "protected static int getDisplayTransport(int[] transports)", "protected static int getDisplayTransport$ravenwood(int[] transports)" ],
  "variableNames" : [ "TAG", "LOCAL_LOGV", "SCREEN_OFF_RPM_STATS_ENABLED", "SERVICE_NAME", "WAKE_TYPE_PARTIAL", "WAKE_TYPE_FULL", "WAKE_TYPE_WINDOW", "SENSOR", "WIFI_RUNNING", "FULL_WIFI_LOCK", "WIFI_SCAN", "WIFI_MULTICAST_ENABLED", "VIDEO_TURNED_ON", "VIBRATOR_ON", "FOREGROUND_ACTIVITY", "WIFI_BATCHED_SCAN", "PROCESS_STATE", "SYNC", "JOB", "AUDIO_TURNED_ON", "FLASHLIGHT_TURNED_ON", "CAMERA_TURNED_ON", "WAKE_TYPE_DRAW", "BLUETOOTH_SCAN_ON", "AGGREGATED_WAKE_TYPE_PARTIAL", "BLUETOOTH_UNOPTIMIZED_SCAN_ON", "FOREGROUND_SERVICE", "WIFI_AGGREGATE_MULTICAST_ENABLED", "STATS_SINCE_CHARGED", "STATS_CURRENT", "STATS_SINCE_UNPLUGGED", "STAT_NAMES", "CHECKIN_VERSION", "BATTERY_STATS_CHECKIN_VERSION", "BYTES_PER_KB", "BYTES_PER_MB", "BYTES_PER_GB", "MILLISECONDS_IN_HOUR", "VERSION_DATA", "UID_DATA", "WAKEUP_ALARM_DATA", "APK_DATA", "PROCESS_DATA", "CPU_DATA", "GLOBAL_CPU_FREQ_DATA", "CPU_TIMES_AT_FREQ_DATA", "RESOURCE_POWER_MANAGER_DATA", "SENSOR_DATA", "VIBRATOR_DATA", "FOREGROUND_ACTIVITY_DATA", "FOREGROUND_SERVICE_DATA", "STATE_TIME_DATA", "WAKELOCK_DATA", "AGGREGATED_WAKELOCK_DATA", "SYNC_DATA", "JOB_DATA", "JOB_COMPLETION_DATA", "JOBS_DEFERRED_DATA", "KERNEL_WAKELOCK_DATA", "WAKEUP_REASON_DATA", "NETWORK_DATA", "USER_ACTIVITY_DATA", "BATTERY_DATA", "BATTERY_DISCHARGE_DATA", "BATTERY_LEVEL_DATA", "GLOBAL_WIFI_DATA", "WIFI_DATA", "GLOBAL_WIFI_CONTROLLER_DATA", "WIFI_CONTROLLER_DATA", "GLOBAL_BLUETOOTH_CONTROLLER_DATA", "BLUETOOTH_CONTROLLER_DATA", "BLUETOOTH_MISC_DATA", "MISC_DATA", "GLOBAL_NETWORK_DATA", "GLOBAL_MODEM_CONTROLLER_DATA", "MODEM_CONTROLLER_DATA", "HISTORY_STRING_POOL", "HISTORY_DATA", "SCREEN_BRIGHTNESS_DATA", "SIGNAL_STRENGTH_TIME_DATA", "SIGNAL_SCANNING_TIME_DATA", "SIGNAL_STRENGTH_COUNT_DATA", "DATA_CONNECTION_TIME_DATA", "DATA_CONNECTION_COUNT_DATA", "WIFI_STATE_TIME_DATA", "WIFI_STATE_COUNT_DATA", "WIFI_SUPPL_STATE_TIME_DATA", "WIFI_SUPPL_STATE_COUNT_DATA", "WIFI_SIGNAL_STRENGTH_TIME_DATA", "WIFI_SIGNAL_STRENGTH_COUNT_DATA", "POWER_USE_SUMMARY_DATA", "POWER_USE_ITEM_DATA", "DISCHARGE_STEP_DATA", "CHARGE_STEP_DATA", "DISCHARGE_TIME_REMAIN_DATA", "CHARGE_TIME_REMAIN_DATA", "FLASHLIGHT_DATA", "CAMERA_DATA", "VIDEO_DATA", "AUDIO_DATA", "WIFI_MULTICAST_TOTAL_DATA", "WIFI_MULTICAST_DATA", "RESULT_RECEIVER_CONTROLLER_KEY", "mFormatBuilder", "mFormatter", "CELLULAR_CONTROLLER_NAME", "WIFI_CONTROLLER_NAME", "UID_TIMES_TYPE_ALL", "JOB_FRESHNESS_BUCKETS", "SCREEN_BRIGHTNESS_DARK", "SCREEN_BRIGHTNESS_DIM", "SCREEN_BRIGHTNESS_MEDIUM", "SCREEN_BRIGHTNESS_LIGHT", "SCREEN_BRIGHTNESS_BRIGHT", "SCREEN_BRIGHTNESS_NAMES", "SCREEN_BRIGHTNESS_SHORT_NAMES", "NUM_SCREEN_BRIGHTNESS_BINS", "DEVICE_IDLE_MODE_OFF", "DEVICE_IDLE_MODE_LIGHT", "DEVICE_IDLE_MODE_DEEP", "DATA_CONNECTION_NAMES", "NUM_ALL_NETWORK_TYPES", "DATA_CONNECTION_OUT_OF_SERVICE", "DATA_CONNECTION_EMERGENCY_SERVICE", "DATA_CONNECTION_OTHER", "NUM_DATA_CONNECTION_TYPES", "RADIO_ACCESS_TECHNOLOGY_OTHER", "RADIO_ACCESS_TECHNOLOGY_LTE", "RADIO_ACCESS_TECHNOLOGY_NR", "RADIO_ACCESS_TECHNOLOGY_COUNT", "RADIO_ACCESS_TECHNOLOGY_NAMES", "WIFI_SUPPL_STATE_NAMES", "WIFI_SUPPL_STATE_SHORT_NAMES", "POWER_DATA_UNAVAILABLE", "DURATION_UNAVAILABLE", "HISTORY_STATE_DESCRIPTIONS", "HISTORY_STATE2_DESCRIPTIONS", "HISTORY_EVENT_NAMES", "HISTORY_EVENT_CHECKIN_NAMES", "sUidToString", "sIntToString", "HISTORY_EVENT_INT_FORMATTERS", "WIFI_STATE_NAMES", "NUM_WIFI_SIGNAL_STRENGTH_BINS", "NETWORK_MOBILE_RX_DATA", "NETWORK_MOBILE_TX_DATA", "NETWORK_WIFI_RX_DATA", "NETWORK_WIFI_TX_DATA", "NETWORK_BT_RX_DATA", "NETWORK_BT_TX_DATA", "NETWORK_MOBILE_BG_RX_DATA", "NETWORK_MOBILE_BG_TX_DATA", "NETWORK_WIFI_BG_RX_DATA", "NETWORK_WIFI_BG_TX_DATA", "NUM_NETWORK_ACTIVITY_TYPES", "STEP_LEVEL_TIME_MASK", "STEP_LEVEL_LEVEL_MASK", "STEP_LEVEL_LEVEL_SHIFT", "STEP_LEVEL_INITIAL_MODE_MASK", "STEP_LEVEL_INITIAL_MODE_SHIFT", "STEP_LEVEL_MODIFIED_MODE_MASK", "STEP_LEVEL_MODIFIED_MODE_SHIFT", "STEP_LEVEL_MODE_SCREEN_STATE", "MAX_TRACKED_SCREEN_STATE", "STEP_LEVEL_MODE_POWER_SAVE", "STEP_LEVEL_MODE_DEVICE_IDLE", "STEP_LEVEL_MODES_OF_INTEREST", "STEP_LEVEL_MODE_VALUES", "STEP_LEVEL_MODE_LABELS", "CHECKIN_POWER_COMPONENT_LABELS", "DUMP_CHARGED_ONLY", "DUMP_DAILY_ONLY", "DUMP_HISTORY_ONLY", "DUMP_INCLUDE_HISTORY", "DUMP_VERBOSE", "DUMP_DEVICE_WIFI_ONLY", "DISPLAY_TRANSPORT_PRIORITIES" ]
}