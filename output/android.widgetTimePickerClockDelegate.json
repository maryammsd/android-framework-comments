{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/widget/TimePickerClockDelegate.java",
  "packageName" : "android.widget",
  "className" : "TimePickerClockDelegate",
  "comment" : "\n * A delegate implementing the radial clock-based TimePicker.\n ",
  "variables" : [ {
    "name" : "DELAY_COMMIT_MILLIS",
    "type" : "long",
    "comment" : "\n     * Delay in milliseconds before valid but potentially incomplete, for\n     * example \"1\" but not \"12\", keyboard edits are propagated from the\n     * hour / minute fields to the radial picker.\n     ",
    "links" : [ ]
  }, {
    "name" : "FROM_EXTERNAL_API",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FROM_RADIAL_PICKER",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FROM_INPUT_PICKER",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HOUR_INDEX",
    "type" : "int",
    "comment" : " Index used by RadialPickerLayout",
    "links" : [ ]
  }, {
    "name" : "MINUTE_INDEX",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATTRS_TEXT_COLOR",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATTRS_DISABLED_ALPHA",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "AM",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PM",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HOURS_IN_HALF_DAY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHourView",
    "type" : "NumericTextView",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMinuteView",
    "type" : "NumericTextView",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAmPmLayout",
    "type" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAmLabel",
    "type" : "RadioButton",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPmLabel",
    "type" : "RadioButton",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRadialTimePickerView",
    "type" : "RadialTimePickerView",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSeparatorView",
    "type" : "TextView",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRadialPickerModeEnabled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRadialTimePickerModeButton",
    "type" : "ImageButton",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRadialTimePickerModeEnabledDescription",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTextInputPickerModeEnabledDescription",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRadialTimePickerHeader",
    "type" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTextInputPickerHeader",
    "type" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTextInputPickerView",
    "type" : "TextInputTimePickerView",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTempCalendar",
    "type" : "Calendar",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSelectHours",
    "type" : "String",
    "comment" : " Accessibility strings.",
    "links" : [ ]
  }, {
    "name" : "mSelectMinutes",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsEnabled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAllowAutoAdvance",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCurrentHour",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCurrentMinute",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIs24Hour",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsAmPmAtLeft",
    "type" : "boolean",
    "comment" : " The portrait layout puts AM/PM at the right by default.",
    "links" : [ ]
  }, {
    "name" : "mIsAmPmAtTop",
    "type" : "boolean",
    "comment" : " The landscape layouts put AM/PM at the bottom by default.",
    "links" : [ ]
  }, {
    "name" : "mHourFormatShowLeadingZero",
    "type" : "boolean",
    "comment" : " Localization data.",
    "links" : [ ]
  }, {
    "name" : "mHourFormatStartsAtZero",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLastAnnouncedText",
    "type" : "CharSequence",
    "comment" : " Most recent time announcement values for accessibility.",
    "links" : [ ]
  }, {
    "name" : "mLastAnnouncedIsHour",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnValueSelectedListener",
    "type" : "OnValueSelectedListener",
    "comment" : " Listener for RadialTimePickerView interaction. ",
    "links" : [ ]
  }, {
    "name" : "mOnValueTypedListener",
    "type" : "OnValueTypedListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDigitEnteredListener",
    "type" : "OnValueChangedListener",
    "comment" : " Listener for keyboard interaction. ",
    "links" : [ ]
  }, {
    "name" : "mCommitHour",
    "type" : "Runnable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCommitMinute",
    "type" : "Runnable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFocusListener",
    "type" : "View.OnFocusChangeListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mClickListener",
    "type" : "View.OnClickListener",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void toggleRadialPickerMode()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean validateInput()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void ensureMinimumTextWidth(TextView v)",
    "returnType" : "void",
    "comment" : "\n     * Ensures that a TextView is wide enough to contain its text without\n     * wrapping or clipping. Measures the specified view and sets the minimum\n     * width to the view's desired width.\n     *\n     * @param v the text view to measure\n     ",
    "links" : [ ]
  }, {
    "name" : "private void updateHourFormat()",
    "returnType" : "void",
    "comment" : "\n     * Updates hour formatting based on the current locale and 24-hour mode.\n     * <p>\n     * Determines how the hour should be formatted, sets member variables for\n     * leading zero and starting hour, and sets the hour view's presentation.\n     ",
    "links" : [ ]
  }, {
    "name" : " static final CharSequence obtainVerbatim(String text)",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private ColorStateList applyLegacyColorFixes(@Nullable ColorStateList color)",
    "returnType" : "ColorStateList",
    "comment" : "\n     * The legacy text color might have been poorly defined. Ensures that it\n     * has an appropriate activated state, using the selected state if one\n     * exists or modifying the default text color otherwise.\n     *\n     * @param color a legacy text color, or {@code null}\n     * @return a color state list with an appropriate activated state, or\n     *         {@code null} if a valid activated state could not be generated\n     ",
    "links" : [ ]
  }, {
    "name" : "private int multiplyAlphaComponent(int color, float alphaMod)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void initialize(int hourOfDay, int minute, boolean is24HourView, int index)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateUI(int index)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateTextInputPicker()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateRadialPicker(int index)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateHeaderAmPm()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setAmPmStart(boolean isAmPmAtStart)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setDate(int hour, int minute)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setHour(int hour)",
    "returnType" : "void",
    "comment" : "\n     * Set the current hour.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setHourInternal(int hour, @ChangeSource int source, boolean announce, boolean notify)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getHour()",
    "returnType" : "int",
    "comment" : "\n     * @return the current hour in the range (0-23)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMinute(int minute)",
    "returnType" : "void",
    "comment" : "\n     * Set the current minute (0-59).\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setMinuteInternal(int minute, @ChangeSource int source, boolean notify)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getMinute()",
    "returnType" : "int",
    "comment" : "\n     * @return The current minute.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setIs24Hour(boolean is24Hour)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether time is displayed in 24-hour mode or 12-hour mode with\n     * AM/PM indicators.\n     *\n     * @param is24Hour {@code true} to display time in 24-hour mode or\n     *        {@code false} for 12-hour mode with AM/PM\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean is24Hour()",
    "returnType" : "boolean",
    "comment" : "\n     * @return {@code true} if time is displayed in 24-hour mode, or\n     *         {@code false} if time is displayed in 12-hour mode with AM/PM\n     *         indicators\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isEnabled()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getBaseline()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Parcelable onSaveInstanceState(Parcelable superState)",
    "returnType" : "Parcelable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onRestoreInstanceState(Parcelable state)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean dispatchPopulateAccessibilityEvent(AccessibilityEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onPopulateAccessibilityEvent(AccessibilityEvent event)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public View getHourView()",
    "returnType" : "View",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public View getMinuteView()",
    "returnType" : "View",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public View getAmView()",
    "returnType" : "View",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public View getPmView()",
    "returnType" : "View",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private int getCurrentItemShowing()",
    "returnType" : "int",
    "comment" : "\n     * @return the index of the current item showing\n     ",
    "links" : [ ]
  }, {
    "name" : "private void onTimeChanged()",
    "returnType" : "void",
    "comment" : "\n     * Propagate the time change\n     ",
    "links" : [ ]
  }, {
    "name" : "private void tryVibrate()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateAmPmLabelStates(int amOrPm)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getLocalizedHour(int hourOfDay)",
    "returnType" : "int",
    "comment" : "\n     * Converts hour-of-day (0-23) time into a localized hour number.\n     * <p>\n     * The localized value may be in the range (0-23), (1-24), (0-11), or\n     * (1-12) depending on the locale. This method does not handle leading\n     * zeroes.\n     *\n     * @param hourOfDay the hour-of-day (0-23)\n     * @return a localized hour number\n     ",
    "links" : [ ]
  }, {
    "name" : "private void updateHeaderHour(int hourOfDay, boolean announce)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateHeaderMinute(int minuteOfHour, boolean announce)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateHeaderSeparator()",
    "returnType" : "void",
    "comment" : "\n     * The time separator is defined in the Unicode CLDR and cannot be supposed to be \":\".\n     *\n     * See http://unicode.org/cldr/trac/browser/trunk/common/main\n     *\n     * We pass the correct \"skeleton\" depending on 12 or 24 hours view and then extract the\n     * separator as the character which is just after the hour marker in the returned pattern.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String getHourMinSeparatorFromPattern(String dateTimePattern)",
    "returnType" : "String",
    "comment" : "\n     * This helper method extracts the time separator from the {@code datetimePattern}.\n     *\n     * The time separator is defined in the Unicode CLDR and cannot be supposed to be \":\".\n     *\n     * See http://unicode.org/cldr/trac/browser/trunk/common/main\n     *\n     * @return Separator string. This is the character or set of quoted characters just after the\n     * hour marker in {@code dateTimePattern}. Returns a colon (:) if it can't locate the\n     * separator.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int lastIndexOfAny(String str, char[] any)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void tryAnnounceForAccessibility(CharSequence text, boolean isHour)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setCurrentItemShowing(int index, boolean animateCircle, boolean announce)",
    "returnType" : "void",
    "comment" : "\n     * Show either Hours or Minutes.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setAmOrPm(int amOrPm)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "DELAY_COMMIT_MILLIS", "FROM_EXTERNAL_API", "FROM_RADIAL_PICKER", "FROM_INPUT_PICKER", "HOUR_INDEX", "MINUTE_INDEX", "ATTRS_TEXT_COLOR", "ATTRS_DISABLED_ALPHA", "AM", "PM", "HOURS_IN_HALF_DAY", "mHourView", "mMinuteView", "mAmPmLayout", "mAmLabel", "mPmLabel", "mRadialTimePickerView", "mSeparatorView", "mRadialPickerModeEnabled", "mRadialTimePickerModeButton", "mRadialTimePickerModeEnabledDescription", "mTextInputPickerModeEnabledDescription", "mRadialTimePickerHeader", "mTextInputPickerHeader", "mTextInputPickerView", "mTempCalendar", "mSelectHours", "mSelectMinutes", "mIsEnabled", "mAllowAutoAdvance", "mCurrentHour", "mCurrentMinute", "mIs24Hour", "mIsAmPmAtLeft", "mIsAmPmAtTop", "mHourFormatShowLeadingZero", "mHourFormatStartsAtZero", "mLastAnnouncedText", "mLastAnnouncedIsHour", "mOnValueSelectedListener", "mOnValueTypedListener", "mDigitEnteredListener", "mCommitHour", "mCommitMinute", "mFocusListener", "mClickListener" ],
  "methodNames" : [ "private void toggleRadialPickerMode()", "public boolean validateInput()", "private static void ensureMinimumTextWidth(TextView v)", "private void updateHourFormat()", " static final CharSequence obtainVerbatim(String text)", "private ColorStateList applyLegacyColorFixes(@Nullable ColorStateList color)", "private int multiplyAlphaComponent(int color, float alphaMod)", "private void initialize(int hourOfDay, int minute, boolean is24HourView, int index)", "private void updateUI(int index)", "private void updateTextInputPicker()", "private void updateRadialPicker(int index)", "private void updateHeaderAmPm()", "private void setAmPmStart(boolean isAmPmAtStart)", "public void setDate(int hour, int minute)", "public void setHour(int hour)", "private void setHourInternal(int hour, @ChangeSource int source, boolean announce, boolean notify)", "public int getHour()", "public void setMinute(int minute)", "private void setMinuteInternal(int minute, @ChangeSource int source, boolean notify)", "public int getMinute()", "public void setIs24Hour(boolean is24Hour)", "public boolean is24Hour()", "public void setEnabled(boolean enabled)", "public boolean isEnabled()", "public int getBaseline()", "public Parcelable onSaveInstanceState(Parcelable superState)", "public void onRestoreInstanceState(Parcelable state)", "public boolean dispatchPopulateAccessibilityEvent(AccessibilityEvent event)", "public void onPopulateAccessibilityEvent(AccessibilityEvent event)", "public View getHourView()", "public View getMinuteView()", "public View getAmView()", "public View getPmView()", "private int getCurrentItemShowing()", "private void onTimeChanged()", "private void tryVibrate()", "private void updateAmPmLabelStates(int amOrPm)", "private int getLocalizedHour(int hourOfDay)", "private void updateHeaderHour(int hourOfDay, boolean announce)", "private void updateHeaderMinute(int minuteOfHour, boolean announce)", "private void updateHeaderSeparator()", "private static String getHourMinSeparatorFromPattern(String dateTimePattern)", "private static int lastIndexOfAny(String str, char[] any)", "private void tryAnnounceForAccessibility(CharSequence text, boolean isHour)", "private void setCurrentItemShowing(int index, boolean animateCircle, boolean announce)", "private void setAmOrPm(int amOrPm)" ]
}