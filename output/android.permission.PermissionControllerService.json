{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/permission/PermissionControllerService.java",
  "packageName" : "android.permission",
  "className" : "PermissionControllerService",
  "comment" : "\n * This service is meant to be implemented by the app controlling permissions.\n *\n * @see PermissionControllerManager\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "LOG_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SERVICE_INTERFACE",
    "type" : "String",
    "comment" : "\n     * The {@link Intent} action that must be declared as handled by a service\n     * in its manifest for the system to recognize it as a runtime permission\n     * presenter service.\n     ",
    "links" : [ "android.content.Intent" ]
  }, {
    "name" : "CAMERA_MIC_INDICATORS_NOT_PRESENT",
    "type" : "long",
    "comment" : "\n     * A ChangeId indicating that this device supports camera and mic indicators. Will be \"false\"\n     * if present, because the CompatChanges#isChangeEnabled method returns true if the change id\n     * is not present.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public abstract void onRevokeRuntimePermissions(@NonNull Map<String, List<String>> requests, boolean doDryRun, @PermissionControllerManager.Reason int reason, @NonNull String callerPackageName, @NonNull Consumer<Map<String, List<String>>> callback)",
    "returnType" : "void",
    "comment" : "\n     * Revoke a set of runtime permissions for various apps.\n     *\n     * @param requests The permissions to revoke as {@code Map<packageName, List<permission>>}\n     * @param doDryRun Compute the permissions that would be revoked, but not actually revoke them\n     * @param reason Why the permission should be revoked\n     * @param callerPackageName The package name of the calling app\n     * @param callback Callback waiting for the actually removed permissions as\n     * {@code Map<packageName, List<permission>>}\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void onGetRuntimePermissionsBackup(@NonNull UserHandle user, @NonNull OutputStream backup, @NonNull Runnable callback)",
    "returnType" : "void",
    "comment" : "\n     * Create a backup of the runtime permissions.\n     *\n     * @param user The user to back up\n     * @param backup The stream to write the backup to\n     * @param callback Callback waiting for operation to be complete\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onRestoreRuntimePermissionsBackup(@NonNull UserHandle user, @NonNull InputStream backup, @NonNull Runnable callback)",
    "returnType" : "void",
    "comment" : "\n     * @deprecated Implement {@link #onStageAndApplyRuntimePermissionsBackup} instead\n     ",
    "links" : [ "#onStageAndApplyRuntimePermissionsBackup" ]
  }, {
    "name" : "public void onStageAndApplyRuntimePermissionsBackup(@NonNull UserHandle user, @NonNull InputStream backup, @NonNull Runnable callback)",
    "returnType" : "void",
    "comment" : "\n     * Restore a backup of the runtime permissions.\n     *\n     * <p>If an app mentioned in the backup is not installed the state should be saved to later\n     * be restored via {@link #onApplyStagedRuntimePermissionBackup}.\n     *\n     * @param user The user to restore\n     * @param backup The stream to read the backup from\n     * @param callback Callback waiting for operation to be complete\n     ",
    "links" : [ "#onApplyStagedRuntimePermissionBackup" ]
  }, {
    "name" : "public void onRestoreDelayedRuntimePermissionsBackup(@NonNull String packageName, @NonNull UserHandle user, @NonNull Consumer<Boolean> callback)",
    "returnType" : "void",
    "comment" : "\n     * @deprecated Implement {@link #onApplyStagedRuntimePermissionBackup} instead\n     ",
    "links" : [ "#onApplyStagedRuntimePermissionBackup" ]
  }, {
    "name" : "public void onApplyStagedRuntimePermissionBackup(@NonNull String packageName, @NonNull UserHandle user, @NonNull Consumer<Boolean> callback)",
    "returnType" : "void",
    "comment" : "\n     * Restore the permission state of an app that was provided in\n     * {@link #onStageAndApplyRuntimePermissionsBackup} but could not be restored back then.\n     *\n     * @param packageName The app to restore\n     * @param user The user to restore\n     * @param callback Callback waiting for whether there is still delayed backup left\n     ",
    "links" : [ "#onStageAndApplyRuntimePermissionsBackup" ]
  }, {
    "name" : "public abstract void onGetAppPermissions(@NonNull String packageName, @NonNull Consumer<List<RuntimePermissionPresentationInfo>> callback)",
    "returnType" : "void",
    "comment" : "\n     * Gets the runtime permissions for an app.\n     *\n     * @param packageName The package for which to query.\n     * @param callback Callback waiting for the descriptions of the runtime permissions of the app\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void onRevokeRuntimePermission(@NonNull String packageName, @NonNull String permissionName, @NonNull Runnable callback)",
    "returnType" : "void",
    "comment" : "\n     * Revokes the permission {@code permissionName} for app {@code packageName}\n     *\n     * @param packageName The package for which to revoke\n     * @param permissionName The permission to revoke\n     * @param callback Callback waiting for operation to be complete\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void onCountPermissionApps(@NonNull List<String> permissionNames, @CountPermissionAppsFlag int flags, @NonNull IntConsumer callback)",
    "returnType" : "void",
    "comment" : "\n     * Count how many apps have one of a set of permissions.\n     *\n     * @param permissionNames The permissions the app might have\n     * @param flags Modify which apps to count. By default all non-system apps that request a\n     *              permission are counted\n     * @param callback Callback waiting for the number of apps that have one of the permissions\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void onGetPermissionUsages(boolean countSystem, long numMillis, @NonNull Consumer<List<RuntimePermissionUsageInfo>> callback)",
    "returnType" : "void",
    "comment" : "\n     * Count how many apps have used permissions.\n     *\n     * @param countSystem Also count system apps\n     * @param numMillis The number of milliseconds in the past to check for uses\n     * @param callback Callback waiting for the descriptions of the users of permissions\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void onGrantOrUpgradeDefaultRuntimePermissions(@NonNull Runnable callback)",
    "returnType" : "void",
    "comment" : "\n     * Grant or upgrade runtime permissions. The upgrade could be performed\n     * based on whether the device upgraded, whether the permission database\n     * version is old, because the permission policy changed, or because the\n     * permission controller has updated.\n     *\n     * @param callback Callback waiting for operation to be complete\n     *\n     * @see PackageManager#isDeviceUpgrading()\n     * @see PermissionManager#getRuntimePermissionsVersion()\n     * @see PermissionManager#setRuntimePermissionsVersion(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onUpdateUserSensitivePermissionFlags(int uid, @NonNull Executor executor, @NonNull Runnable callback)",
    "returnType" : "void",
    "comment" : "\n     * Called by system to update the\n     * {@link PackageManager}{@code .FLAG_PERMISSION_USER_SENSITIVE_WHEN_*} flags for permissions.\n     * <p>\n     *\n     * If uid is -1, updates the permission flags for all packages.\n     *\n     * Typically called by the system when a new app is installed or updated or when creating a\n     * new user or upgrading either system or permission controller package.\n     *\n     * The callback will be executed by the provided Executor.\n     ",
    "links" : [ "android.content.pm.PackageManager" ]
  }, {
    "name" : "public void onUpdateUserSensitivePermissionFlags(int uid, @NonNull Runnable callback)",
    "returnType" : "void",
    "comment" : "\n     * Runs {@link #onUpdateUserSensitivePermissionFlags(int, Executor, Runnable)} with the main\n     * executor.\n     ",
    "links" : [ "#onUpdateUserSensitivePermissionFlags(int" ]
  }, {
    "name" : "public abstract void onSetRuntimePermissionGrantStateByDeviceAdmin(@NonNull String callerPackageName, @NonNull String packageName, @NonNull String permission, @PermissionGrantState int grantState, @NonNull Consumer<Boolean> callback)",
    "returnType" : "void",
    "comment" : "\n     * @deprecated See {@link #onSetRuntimePermissionGrantStateByDeviceAdmin(String,\n     * AdminPermissionControlParams, Consumer)}.\n     * Set the runtime permission state from a device admin.\n     *\n     * @param callerPackageName The package name of the admin requesting the change\n     * @param packageName Package the permission belongs to\n     * @param permission Permission to change\n     * @param grantState State to set the permission into\n     * @param callback Callback waiting for whether the state could be set or not\n     ",
    "links" : [ "#onSetRuntimePermissionGrantStateByDeviceAdmin(String" ]
  }, {
    "name" : "public void onSetRuntimePermissionGrantStateByDeviceAdmin(@NonNull String callerPackageName, @NonNull AdminPermissionControlParams params, @NonNull Consumer<Boolean> callback)",
    "returnType" : "void",
    "comment" : "\n     * Set the runtime permission state from a device admin.\n     *\n     * @param callerPackageName The package name of the admin requesting the change\n     * @param params Parameters of admin request.\n     * @param callback Callback waiting for whether the state could be set or not\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onOneTimePermissionSessionTimeout(@NonNull String packageName)",
    "returnType" : "void",
    "comment" : "\n     * Called when a package is considered inactive based on the criteria given by\n     * {@link PermissionManager#startOneTimePermissionSession(String, long, long, int, int)}.\n     * This method is called at the end of a one-time permission session\n     *\n     * @param packageName The package that has been inactive\n     *\n     * @deprecated Implement {@link #onOneTimePermissionSessionTimeout(String, int)} instead.\n     ",
    "links" : [ "android.permission.PermissionManager#startOneTimePermissionSession(String", "#onOneTimePermissionSessionTimeout(String" ]
  }, {
    "name" : "public void onOneTimePermissionSessionTimeout(@NonNull String packageName, int deviceId)",
    "returnType" : "void",
    "comment" : "\n     * Called when a package is considered inactive based on the criteria given by\n     * {@link PermissionManager#startOneTimePermissionSession(String, long, long, int, int)}.\n     * This method is called at the end of a one-time permission session\n     *\n     * @param packageName The package that has been inactive\n     * @param deviceId The device ID refers either the primary device i.e. the phone or\n     *                 a virtual device. See {@link Context#DEVICE_ID_DEFAULT}\n     ",
    "links" : [ "android.permission.PermissionManager#startOneTimePermissionSession(String", "android.content.Context#DEVICE_ID_DEFAULT" ]
  }, {
    "name" : "public void onGetPlatformPermissionsForGroup(@NonNull String permissionGroupName, @NonNull Consumer<List<String>> callback)",
    "returnType" : "void",
    "comment" : "\n     * Get the platform permissions which belong to a particular permission group\n     *\n     * @param permissionGroupName The permission group whose permissions are desired\n     * @param callback A callback the permission names will be passed to\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onGetGroupOfPlatformPermission(@NonNull String permissionName, @NonNull Consumer<String> callback)",
    "returnType" : "void",
    "comment" : "\n     * Get the platform group of a particular permission, if the permission is a platform permission\n     *\n     * @param permissionName The permission name whose group is desired\n     * @param callback A callback the group name will be passed to\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onRevokeSelfPermissionsOnKill(@NonNull String packageName, @NonNull List<String> permissions, @NonNull Runnable callback)",
    "returnType" : "void",
    "comment" : "\n     * Triggers the revocation of one or more permissions for a package. This should only be called\n     * at the request of {@code packageName}.\n     * <p>\n     * Background permissions which have no corresponding foreground permission still granted once\n     * the revocation is effective will also be revoked.\n     * <p>\n     * This revocation happens asynchronously and kills all processes running in the same UID as\n     * {@code packageName}. It will be triggered once it is safe to do so.\n     *\n     * @param packageName The name of the package for which the permissions will be revoked.\n     * @param permissions List of permissions to be revoked.\n     * @param callback Callback waiting for operation to be complete.\n     *\n     * @see android.content.Context#revokeSelfPermissionsOnKill(java.util.Collection)\n     *\n     * @deprecated Implement {@link #onRevokeSelfPermissionsOnKill(String, List, int, Runnable)}\n     * instead.\n     ",
    "links" : [ "#onRevokeSelfPermissionsOnKill(String" ]
  }, {
    "name" : "public void onRevokeSelfPermissionsOnKill(@NonNull String packageName, @NonNull List<String> permissions, int deviceId, @NonNull Runnable callback)",
    "returnType" : "void",
    "comment" : "\n     * Triggers the revocation of one or more permissions for a package and device.\n     * This should only be called at the request of {@code packageName}.\n     * <p>\n     * Background permissions which have no corresponding foreground permission still granted once\n     * the revocation is effective will also be revoked.\n     * <p>\n     * This revocation happens asynchronously and kills all processes running in the same UID as\n     * {@code packageName}. It will be triggered once it is safe to do so.\n     *\n     * @param packageName The name of the package for which the permissions will be revoked.\n     * @param permissions List of permissions to be revoked.\n     * @param deviceId The device ID refers either the primary device i.e. the phone or\n     *                 a virtual device. See {@link Context#DEVICE_ID_DEFAULT}\n     * @param callback Callback waiting for operation to be complete.\n     *\n     * @see android.content.Context#revokeSelfPermissionsOnKill(java.util.Collection)\n     ",
    "links" : [ "android.content.Context#DEVICE_ID_DEFAULT" ]
  }, {
    "name" : "public String getPrivilegesDescriptionStringForProfile(@NonNull String deviceProfileName)",
    "returnType" : "String",
    "comment" : "\n     * Get a user-readable sentence, describing the set of privileges that are to be granted to a\n     * companion app managing a device of the given profile.\n     *\n     * @param deviceProfileName the\n     *      {@link android.companion.AssociationRequest.DeviceProfile device profile} name\n     *\n     * @deprecated Device profile privilege descriptions have been bundled in CDM APK since T.\n     *\n     * @hide\n     ",
    "links" : [ "android.companion.AssociationRequest.DeviceProfile" ]
  }, {
    "name" : "public void onGetUnusedAppCount(@NonNull IntConsumer callback)",
    "returnType" : "void",
    "comment" : "\n     * Get the count of unused, hibernating apps on the device.\n     *\n     * @param callback callback after count is retrieved\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onGetHibernationEligibility(@NonNull String packageName, @NonNull IntConsumer callback)",
    "returnType" : "void",
    "comment" : "\n     * Get the hibernation eligibility of the app. See\n     * {@link android.permission.PermissionControllerManager.HibernationEligibilityFlag}.\n     *\n     * @param packageName package to check eligibility\n     * @param callback callback after eligibility is returned\n     *\n     * @hide\n     ",
    "links" : [ "android.permission.PermissionControllerManager.HibernationEligibilityFlag" ]
  }, {
    "name" : "public final IBinder onBind(Intent intent)",
    "returnType" : "IBinder",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public abstract void onRevokeRuntimePermissions(@NonNull Map<String, List<String>> requests, boolean doDryRun, @PermissionControllerManager.Reason int reason, @NonNull String callerPackageName, @NonNull Consumer<Map<String, List<String>>> callback)", "public abstract void onGetRuntimePermissionsBackup(@NonNull UserHandle user, @NonNull OutputStream backup, @NonNull Runnable callback)", "public void onRestoreRuntimePermissionsBackup(@NonNull UserHandle user, @NonNull InputStream backup, @NonNull Runnable callback)", "public void onStageAndApplyRuntimePermissionsBackup(@NonNull UserHandle user, @NonNull InputStream backup, @NonNull Runnable callback)", "public void onRestoreDelayedRuntimePermissionsBackup(@NonNull String packageName, @NonNull UserHandle user, @NonNull Consumer<Boolean> callback)", "public void onApplyStagedRuntimePermissionBackup(@NonNull String packageName, @NonNull UserHandle user, @NonNull Consumer<Boolean> callback)", "public abstract void onGetAppPermissions(@NonNull String packageName, @NonNull Consumer<List<RuntimePermissionPresentationInfo>> callback)", "public abstract void onRevokeRuntimePermission(@NonNull String packageName, @NonNull String permissionName, @NonNull Runnable callback)", "public abstract void onCountPermissionApps(@NonNull List<String> permissionNames, @CountPermissionAppsFlag int flags, @NonNull IntConsumer callback)", "public abstract void onGetPermissionUsages(boolean countSystem, long numMillis, @NonNull Consumer<List<RuntimePermissionUsageInfo>> callback)", "public abstract void onGrantOrUpgradeDefaultRuntimePermissions(@NonNull Runnable callback)", "public void onUpdateUserSensitivePermissionFlags(int uid, @NonNull Executor executor, @NonNull Runnable callback)", "public void onUpdateUserSensitivePermissionFlags(int uid, @NonNull Runnable callback)", "public abstract void onSetRuntimePermissionGrantStateByDeviceAdmin(@NonNull String callerPackageName, @NonNull String packageName, @NonNull String permission, @PermissionGrantState int grantState, @NonNull Consumer<Boolean> callback)", "public void onSetRuntimePermissionGrantStateByDeviceAdmin(@NonNull String callerPackageName, @NonNull AdminPermissionControlParams params, @NonNull Consumer<Boolean> callback)", "public void onOneTimePermissionSessionTimeout(@NonNull String packageName)", "public void onOneTimePermissionSessionTimeout(@NonNull String packageName, int deviceId)", "public void onGetPlatformPermissionsForGroup(@NonNull String permissionGroupName, @NonNull Consumer<List<String>> callback)", "public void onGetGroupOfPlatformPermission(@NonNull String permissionName, @NonNull Consumer<String> callback)", "public void onRevokeSelfPermissionsOnKill(@NonNull String packageName, @NonNull List<String> permissions, @NonNull Runnable callback)", "public void onRevokeSelfPermissionsOnKill(@NonNull String packageName, @NonNull List<String> permissions, int deviceId, @NonNull Runnable callback)", "public String getPrivilegesDescriptionStringForProfile(@NonNull String deviceProfileName)", "public void onGetUnusedAppCount(@NonNull IntConsumer callback)", "public void onGetHibernationEligibility(@NonNull String packageName, @NonNull IntConsumer callback)", "public final IBinder onBind(Intent intent)" ],
  "variableNames" : [ "LOG_TAG", "SERVICE_INTERFACE", "CAMERA_MIC_INDICATORS_NOT_PRESENT" ]
}