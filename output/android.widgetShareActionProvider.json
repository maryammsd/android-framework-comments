{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/widget/ShareActionProvider.java",
  "packageName" : "android.widget",
  "className" : "ShareActionProvider",
  "comment" : "\n * This is a provider for a share action. It is responsible for creating views\n * that enable data sharing and also to show a sub menu with sharing activities\n * if the hosting item is placed on the overflow menu.\n * <p>\n * Here is how to use the action provider with custom backing file in a {@link MenuItem}:\n * </p>\n * <pre>\n * // In Activity#onCreateOptionsMenu\n * public boolean onCreateOptionsMenu(Menu menu) {\n *     // Get the menu item.\n *     MenuItem menuItem = menu.findItem(R.id.my_menu_item);\n *     // Get the provider and hold onto it to set/change the share intent.\n *     mShareActionProvider = (ShareActionProvider) menuItem.getActionProvider();\n *     // Set history different from the default before getting the action\n *     // view since a call to {@link MenuItem#getActionView() MenuItem.getActionView()} calls\n *     // {@link ActionProvider#onCreateActionView()} which uses the backing file name. Omit this\n *     // line if using the default share history file is desired.\n *     mShareActionProvider.setShareHistoryFileName(\"custom_share_history.xml\");\n *     . . .\n * }\n *\n * // Somewhere in the application.\n * public void doShare(Intent shareIntent) {\n *     // When you want to share set the share intent.\n *     mShareActionProvider.setShareIntent(shareIntent);\n * }</pre>\n * <p>\n * <strong>Note:</strong> While the sample snippet demonstrates how to use this provider\n * in the context of a menu item, the use of the provider is not limited to menu items.\n * </p>\n *\n * @see ActionProvider\n ",
  "variables" : [ {
    "name" : "DEFAULT_INITIAL_ACTIVITY_COUNT",
    "type" : "int",
    "comment" : "\n     * The default for the maximal number of activities shown in the sub-menu.\n     ",
    "links" : [ ]
  }, {
    "name" : "mMaxShownActivityCount",
    "type" : "int",
    "comment" : "\n     * The the maximum number activities shown in the sub-menu.\n     ",
    "links" : [ ]
  }, {
    "name" : "mOnMenuItemClickListener",
    "type" : "ShareMenuItemOnMenuItemClickListener",
    "comment" : "\n     * Listener for handling menu item clicks.\n     ",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_SHARE_HISTORY_FILE_NAME",
    "type" : "String",
    "comment" : "\n     * The default name for storing share history.\n     ",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "\n     * Context for accessing resources.\n     ",
    "links" : [ ]
  }, {
    "name" : "mShareHistoryFileName",
    "type" : "String",
    "comment" : "\n     * The name of the file with share history data.\n     ",
    "links" : [ ]
  }, {
    "name" : "mOnShareTargetSelectedListener",
    "type" : "OnShareTargetSelectedListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnChooseActivityListener",
    "type" : "OnChooseActivityListener",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setOnShareTargetSelectedListener(OnShareTargetSelectedListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Sets a listener to be notified when a share target has been selected.\n     * The listener can optionally decide to handle the selection and\n     * not rely on the default behavior which is to launch the activity.\n     * <p>\n     * <strong>Note:</strong> If you choose the backing share history file\n     *     you will still be notified in this callback.\n     * </p>\n     * @param listener The listener.\n     ",
    "links" : [ ]
  }, {
    "name" : "public View onCreateActionView()",
    "returnType" : "View",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasSubMenu()",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onPrepareSubMenu(SubMenu subMenu)",
    "returnType" : "void",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setShareHistoryFileName(String shareHistoryFile)",
    "returnType" : "void",
    "comment" : "\n     * Sets the file name of a file for persisting the share history which\n     * history will be used for ordering share targets. This file will be used\n     * for all view created by {@link #onCreateActionView()}. Defaults to\n     * {@link #DEFAULT_SHARE_HISTORY_FILE_NAME}. Set to <code>null</code>\n     * if share history should not be persisted between sessions.\n     * <p>\n     * <strong>Note:</strong> The history file name can be set any time, however\n     * only the action views created by {@link #onCreateActionView()} after setting\n     * the file name will be backed by the provided file. Therefore, if you want to\n     * use different history files for sharing specific types of content, every time\n     * you change the history file {@link #setShareHistoryFileName(String)} you must\n     * call {@link android.app.Activity#invalidateOptionsMenu()} to recreate the\n     * action view. You should <strong>not</strong> call\n     * {@link android.app.Activity#invalidateOptionsMenu()} from\n     * {@link android.app.Activity#onCreateOptionsMenu(Menu)}.\n     * </p>\n     * <pre>\n     * private void doShare(Intent intent) {\n     *     if (IMAGE.equals(intent.getMimeType())) {\n     *         mShareActionProvider.setHistoryFileName(SHARE_IMAGE_HISTORY_FILE_NAME);\n     *     } else if (TEXT.equals(intent.getMimeType())) {\n     *         mShareActionProvider.setHistoryFileName(SHARE_TEXT_HISTORY_FILE_NAME);\n     *     }\n     *     mShareActionProvider.setIntent(intent);\n     *     invalidateOptionsMenu();\n     * }</pre>\n     * @param shareHistoryFile The share history file name.\n     ",
    "links" : [ "#onCreateActionView", "#DEFAULT_SHARE_HISTORY_FILE_NAME", "#onCreateActionView", "#setShareHistoryFileName", "android.app.Activity#invalidateOptionsMenu", "android.app.Activity#invalidateOptionsMenu", "android.app.Activity#onCreateOptionsMenu" ]
  }, {
    "name" : "public void setShareIntent(Intent shareIntent)",
    "returnType" : "void",
    "comment" : "\n     * Sets an intent with information about the share action. Here is a\n     * sample for constructing a share intent:\n     * <pre>\n     * Intent shareIntent = new Intent(Intent.ACTION_SEND);\n     * shareIntent.setType(\"image/*\");\n     * Uri uri = Uri.fromFile(new File(getFilesDir(), \"foo.jpg\"));\n     * shareIntent.putExtra(Intent.EXTRA_STREAM, uri);</pre>\n     *\n     * @param shareIntent The share intent.\n     *\n     * @see Intent#ACTION_SEND\n     * @see Intent#ACTION_SEND_MULTIPLE\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setActivityChooserPolicyIfNeeded()",
    "returnType" : "void",
    "comment" : "\n     * Set the activity chooser policy of the model backed by the current\n     * share history file if needed which is if there is a registered callback.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "DEFAULT_INITIAL_ACTIVITY_COUNT", "mMaxShownActivityCount", "mOnMenuItemClickListener", "DEFAULT_SHARE_HISTORY_FILE_NAME", "mContext", "mShareHistoryFileName", "mOnShareTargetSelectedListener", "mOnChooseActivityListener" ],
  "methodNames" : [ "public void setOnShareTargetSelectedListener(OnShareTargetSelectedListener listener)", "public View onCreateActionView()", "public boolean hasSubMenu()", "public void onPrepareSubMenu(SubMenu subMenu)", "public void setShareHistoryFileName(String shareHistoryFile)", "public void setShareIntent(Intent shareIntent)", "private void setActivityChooserPolicyIfNeeded()" ]
}