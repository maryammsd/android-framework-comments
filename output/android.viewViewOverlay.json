{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/view/ViewOverlay.java",
  "packageName" : "android.view",
  "className" : "ViewOverlay",
  "comment" : "\n * An overlay is an extra layer that sits on top of a View (the \"host view\")\n * which is drawn after all other content in that view (including children,\n * if the view is a ViewGroup). Interaction with the overlay layer is done\n * by adding and removing drawables.\n *\n * <p>An overlay requested from a ViewGroup is of type {@link ViewGroupOverlay},\n * which also supports adding and removing views.</p>\n *\n * @see View#getOverlay() View.getOverlay()\n * @see ViewGroup#getOverlay() ViewGroup.getOverlay()\n * @see ViewGroupOverlay\n ",
  "variables" : [ {
    "name" : "mOverlayViewGroup",
    "type" : "OverlayViewGroup",
    "comment" : "\n     * The actual container for the drawables (and views, if it's a ViewGroupOverlay).\n     * All of the management and rendering details for the overlay are handled in\n     * OverlayViewGroup.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " ViewGroup getOverlayView()",
    "returnType" : "ViewGroup",
    "comment" : "\n     * Used internally by View and ViewGroup to handle drawing and invalidation\n     * of the overlay\n     * @return\n     ",
    "links" : [ ]
  }, {
    "name" : "public void add(@NonNull Drawable drawable)",
    "returnType" : "void",
    "comment" : "\n     * Adds a {@link Drawable} to the overlay. The bounds of the drawable should be relative to\n     * the host view. Any drawable added to the overlay should be removed when it is no longer\n     * needed or no longer visible. Adding an already existing {@link Drawable}\n     * is a no-op. Passing <code>null</code> parameter will result in an\n     * {@link IllegalArgumentException} being thrown.\n     *\n     * @param drawable The {@link Drawable} to be added to the overlay. This drawable will be\n     * drawn when the view redraws its overlay. {@link Drawable}s will be drawn in the order that\n     * they were added.\n     * @see #remove(Drawable)\n     ",
    "links" : [ "Drawable", "Drawable", "IllegalArgumentException", "Drawable", "Drawable" ]
  }, {
    "name" : "public void remove(@NonNull Drawable drawable)",
    "returnType" : "void",
    "comment" : "\n     * Removes the specified {@link Drawable} from the overlay. Removing a {@link Drawable} that was\n     * not added with {@link #add(Drawable)} is a no-op. Passing <code>null</code> parameter will\n     * result in an {@link IllegalArgumentException} being thrown.\n     *\n     * @param drawable The {@link Drawable} to be removed from the overlay.\n     * @see #add(Drawable)\n     ",
    "links" : [ "Drawable", "Drawable", "#add", "IllegalArgumentException", "Drawable" ]
  }, {
    "name" : "public void clear()",
    "returnType" : "void",
    "comment" : "\n     * Removes all content from the overlay.\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean isEmpty()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "mOverlayViewGroup" ],
  "methodNames" : [ " ViewGroup getOverlayView()", "public void add(@NonNull Drawable drawable)", "public void remove(@NonNull Drawable drawable)", "public void clear()", " boolean isEmpty()" ]
}