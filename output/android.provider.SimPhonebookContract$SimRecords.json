{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/provider/SimPhonebookContract.java",
  "packageName" : "android.provider",
  "className" : "SimRecords",
  "comment" : "\n     * Constants for the contact records on a SIM card.\n     *\n     * <h3 id=\"simrecords-data\">Data</h3>\n     * <p>\n     * Data is stored in a specific elementary file on a specific SIM card and these are isolated\n     * from each other. SIM cards are identified by their subscription ID. SIM cards may not support\n     * all or even any of the elementary file types. A SIM will have constraints on\n     * the values of the data that can be stored in each elementary file. The available SIMs,\n     * their supported elementary file types and the constraints on the data can be discovered by\n     * querying {@link ElementaryFiles#CONTENT_URI}. Each elementary file has a fixed capacity\n     * for the number of records that may be stored. This can be determined from the value\n     * of the {@link ElementaryFiles#MAX_RECORDS} column.\n     * </p>\n     * <p>\n     * The {@link SimRecords#PHONE_NUMBER} column can only contain dialable characters and this\n     * applies regardless of the SIM that is being used. See\n     * {@link android.telephony.PhoneNumberUtils#isDialable(char)} for more details. Additionally\n     * the phone number can contain at most {@link ElementaryFiles#PHONE_NUMBER_MAX_LENGTH}\n     * characters. The {@link SimRecords#NAME} column can contain at most\n     * {@link ElementaryFiles#NAME_MAX_LENGTH} bytes when it is encoded for storage on the SIM.\n     * Encoding is done internally and so the name should be provided to these provider APIs as a\n     * Java String but the number of bytes required to encode it for storage will vary depending on\n     * the characters it contains. This length can be determined by calling\n     * {@link SimRecords#getEncodedNameLength(ContentResolver, String)}.\n     * </p>\n     * <h3>Operations </h3>\n     * <dl>\n     * <dd><b>Insert</b></dd>\n     * <p>\n     * Only {@link ElementaryFiles#EF_ADN} supports inserts. {@link SimRecords#PHONE_NUMBER}\n     * is a required column. If the value provided for this column is missing, null, empty\n     * or violates the requirements discussed in the <a href=\"#simrecords-data\">Data</a>\n     * section above an {@link IllegalArgumentException} will be thrown. The\n     * {@link SimRecords#NAME} column may be omitted but if provided and it violates any of\n     * the requirements discussed in the <a href=\"#simrecords-data\">Data</a> section above\n     * an {@link IllegalArgumentException} will be thrown.\n     * </p>\n     * <p>\n     * If an insert is not possible because the elementary file is full then an\n     * {@link IllegalStateException} will be thrown.\n     * </p>\n     * <dd><b>Update</b></dd>\n     * <p>\n     * Updates can only be performed for individual records on {@link ElementaryFiles#EF_ADN}.\n     * A specific record is referenced via the Uri returned by\n     * {@link SimRecords#getItemUri(int, int, int)}. Updates have the same constraints and\n     * behavior for the {@link SimRecords#PHONE_NUMBER} and {@link SimRecords#NAME} as insert.\n     * However, in the case of update the {@link SimRecords#PHONE_NUMBER} may be omitted as\n     * the existing record will already have a valid value.\n     * </p>\n     * <dd><b>Delete</b></dd>\n     * <p>\n     * Delete may only be performed for individual records on {@link ElementaryFiles#EF_ADN}.\n     * Deleting records will free up space for use by future inserts.\n     * </p>\n     * <dd><b>Query</b></dd>\n     * <p>\n     * All the records stored on a specific elementary file can be read via a Uri returned by\n     * {@link SimRecords#getContentUri(int, int)}. This query always returns all records; there\n     * is no support for filtering via a selection. An individual record can be queried via a Uri\n     * returned by {@link SimRecords#getItemUri(int, int, int)}. Queries will throw an\n     * {@link IllegalArgumentException} when the SIM with the subscription ID or the elementary file\n     * type are invalid or unavailable.\n     * </p>\n     * </dl>\n     ",
  "links" : [ "#getEncodedNameLength(ContentResolver", "IllegalStateException", "#MAX_RECORDS", "#NAME_MAX_LENGTH", "android.telephony.PhoneNumberUtils#isDialable(char)", "#PHONE_NUMBER_MAX_LENGTH", "#PHONE_NUMBER", "#EF_ADN", "#getItemUri(int", "#CONTENT_URI", "IllegalArgumentException", "#getContentUri(int", "#NAME" ],
  "variables" : [ {
    "name" : "SUBSCRIPTION_ID",
    "type" : "String",
    "comment" : "\n         * The subscription ID of the SIM the record is from.\n         *\n         * @see SubscriptionInfo#getSubscriptionId()\n         ",
    "links" : [ ]
  }, {
    "name" : "ELEMENTARY_FILE_TYPE",
    "type" : "String",
    "comment" : "\n         * The type of the elementary file the record is from.\n         *\n         * @see ElementaryFiles#EF_ADN\n         * @see ElementaryFiles#EF_FDN\n         * @see ElementaryFiles#EF_SDN\n         ",
    "links" : [ ]
  }, {
    "name" : "RECORD_NUMBER",
    "type" : "String",
    "comment" : "\n         * The 1-based offset of the record in the elementary file that contains it.\n         *\n         * <p>This can be used to access individual SIM records by appending it to the\n         * elementary file URIs but it is not like a normal database ID because it is not\n         * auto-incrementing and it is not unique across SIM cards or elementary files. Hence, care\n         * should be taken when using it to ensure that it is applied to the correct SIM and EF.\n         *\n         * @see #getItemUri(int, int, int)\n         ",
    "links" : [ ]
  }, {
    "name" : "NAME",
    "type" : "String",
    "comment" : "\n         * The name for this record.\n         *\n         * <p>An {@link IllegalArgumentException} will be thrown by insert and update if this\n         * exceeds the maximum supported length. Use\n         * {@link #getEncodedNameLength(ContentResolver, String)} to check how long the name\n         * will be after encoding.\n         *\n         * @see ElementaryFiles#NAME_MAX_LENGTH\n         * @see #getEncodedNameLength(ContentResolver, String)\n         ",
    "links" : [ "#getEncodedNameLength(ContentResolver", "IllegalArgumentException" ]
  }, {
    "name" : "PHONE_NUMBER",
    "type" : "String",
    "comment" : "\n         * The phone number for this record.\n         *\n         * <p>Only dialable characters are supported.\n         *\n         * <p>An {@link IllegalArgumentException} will be thrown by insert and update if this\n         * exceeds the maximum supported length or contains unsupported characters.\n         *\n         * @see ElementaryFiles#PHONE_NUMBER_MAX_LENGTH\n         * @see android.telephony.PhoneNumberUtils#isDialable(char)\n         ",
    "links" : [ "IllegalArgumentException" ]
  }, {
    "name" : "CONTENT_ITEM_TYPE",
    "type" : "String",
    "comment" : " The MIME type of a CONTENT_URI subdirectory of a single SIM record. ",
    "links" : [ ]
  }, {
    "name" : "CONTENT_TYPE",
    "type" : "String",
    "comment" : " The MIME type of CONTENT_URI providing a directory of SIM records. ",
    "links" : [ ]
  }, {
    "name" : "ERROR_NAME_UNSUPPORTED",
    "type" : "int",
    "comment" : "\n         * Value returned from {@link #getEncodedNameLength(ContentResolver, String)} when the name\n         * length could not be determined because the name could not be encoded.\n         ",
    "links" : [ "#getEncodedNameLength(ContentResolver" ]
  }, {
    "name" : "GET_ENCODED_NAME_LENGTH_METHOD_NAME",
    "type" : "String",
    "comment" : "\n         * The method name used to get the encoded length of a value for {@link SimRecords#NAME}\n         * column.\n         *\n         * @hide\n         * @see #getEncodedNameLength(ContentResolver, String)\n         * @see ContentResolver#call(String, String, String, Bundle)\n         ",
    "links" : [ "#NAME" ]
  }, {
    "name" : "EXTRA_ENCODED_NAME_LENGTH",
    "type" : "String",
    "comment" : "\n         * Extra key used for an integer value that contains the length in bytes of an encoded\n         * name.\n         *\n         * @hide\n         * @see #getEncodedNameLength(ContentResolver, String)\n         * @see #GET_ENCODED_NAME_LENGTH_METHOD_NAME\n         ",
    "links" : [ ]
  }, {
    "name" : "QUERY_ARG_PIN2",
    "type" : "String",
    "comment" : "\n         * Key for the PIN2 needed to modify FDN record that should be passed in the Bundle\n         * passed to {@link ContentResolver#insert(Uri, ContentValues, Bundle)},\n         * {@link ContentResolver#update(Uri, ContentValues, Bundle)}\n         * and {@link ContentResolver#delete(Uri, Bundle)}.\n         *\n         * <p>Modifying FDN records also requires either\n         * {@link android.Manifest.permission#MODIFY_PHONE_STATE} or\n         * {@link TelephonyManager#hasCarrierPrivileges()}\n         *\n         * @hide\n         ",
    "links" : [ "android.content.ContentResolver#insert(Uri", "android.Manifest.permission#MODIFY_PHONE_STATE", "android.content.ContentResolver#delete(Uri", "android.content.ContentResolver#update(Uri", "android.telephony.TelephonyManager#hasCarrierPrivileges()" ]
  } ],
  "methods" : [ {
    "name" : "public static Uri getContentUri(int subscriptionId, @ElementaryFiles.EfType int efType)",
    "returnType" : "Uri",
    "comment" : "\n         * Returns the content Uri for the specified elementary file on the specified SIM.\n         *\n         * <p>When queried this Uri will return all of the contact records in the specified\n         * elementary file on the specified SIM. The available subscriptionIds and efTypes can\n         * be discovered by querying {@link ElementaryFiles#CONTENT_URI}.\n         *\n         * <p>If a SIM with the provided subscription ID does not exist or the SIM with the provided\n         * subscription ID doesn't support the specified entity file then all operations will\n         * throw an {@link IllegalArgumentException}.\n         *\n         * @param subscriptionId the subscriptionId of the SIM card that this Uri will reference\n         * @param efType         the elementary file on the SIM that this Uri will reference\n         * @see ElementaryFiles#EF_ADN\n         * @see ElementaryFiles#EF_FDN\n         * @see ElementaryFiles#EF_SDN\n         ",
    "links" : [ "#CONTENT_URI", "IllegalArgumentException" ]
  }, {
    "name" : "public static Uri getItemUri(int subscriptionId, @ElementaryFiles.EfType int efType, @IntRange(from = 1) int recordNumber)",
    "returnType" : "Uri",
    "comment" : "\n         * Content Uri for the specific SIM record with the provided {@link #RECORD_NUMBER}.\n         *\n         * <p>When queried this will return the record identified by the provided arguments.\n         *\n         * <p>For a non-existent record:\n         * <ul>\n         *     <li>query will return an empty cursor</li>\n         *     <li>update will return 0</li>\n         *     <li>delete will return 0</li>\n         * </ul>\n         *\n         * @param subscriptionId the subscription ID of the SIM containing the record. If no SIM\n         *                       with this subscription ID exists then it will be treated as a\n         *                       non-existent record\n         * @param efType         the elementary file type containing the record. If the specified\n         *                       SIM doesn't support this elementary file then it will be treated\n         *                       as a non-existent record.\n         * @param recordNumber   the record number of the record this Uri should reference. This\n         *                       must be greater than 0. If there is no record with this record\n         *                       number in the specified entity file then it will be treated as a\n         *                       non-existent record.\n         * @see ElementaryFiles#SUBSCRIPTION_ID\n         * @see ElementaryFiles#EF_TYPE\n         * @see #RECORD_NUMBER\n         ",
    "links" : [ "#RECORD_NUMBER" ]
  }, {
    "name" : "public static int getEncodedNameLength(@NonNull ContentResolver resolver, @NonNull String name)",
    "returnType" : "int",
    "comment" : "\n         * Returns the number of bytes required to encode the specified name when it is stored\n         * on the SIM.\n         *\n         * <p>{@link ElementaryFiles#NAME_MAX_LENGTH} is specified in bytes but the encoded name\n         * may require more than 1 byte per character depending on the characters it contains. So\n         * this method can be used to check whether a name exceeds the max length.\n         *\n         * @return the number of bytes required by the encoded name or\n         * {@link #ERROR_NAME_UNSUPPORTED} if the name could not be encoded.\n         * @throws IllegalStateException if the provider fails to return the length.\n         * @see SimRecords#NAME\n         * @see ElementaryFiles#NAME_MAX_LENGTH\n         ",
    "links" : [ "#NAME_MAX_LENGTH", "#ERROR_NAME_UNSUPPORTED" ]
  }, {
    "name" : "private static Uri.Builder buildContentUri(int subscriptionId, @ElementaryFiles.EfType int efType)",
    "returnType" : "Uri.Builder",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static Uri getContentUri(int subscriptionId, @ElementaryFiles.EfType int efType)", "public static Uri getItemUri(int subscriptionId, @ElementaryFiles.EfType int efType, @IntRange(from = 1) int recordNumber)", "public static int getEncodedNameLength(@NonNull ContentResolver resolver, @NonNull String name)", "private static Uri.Builder buildContentUri(int subscriptionId, @ElementaryFiles.EfType int efType)" ],
  "variableNames" : [ "SUBSCRIPTION_ID", "ELEMENTARY_FILE_TYPE", "RECORD_NUMBER", "NAME", "PHONE_NUMBER", "CONTENT_ITEM_TYPE", "CONTENT_TYPE", "ERROR_NAME_UNSUPPORTED", "GET_ENCODED_NAME_LENGTH_METHOD_NAME", "EXTRA_ENCODED_NAME_LENGTH", "QUERY_ARG_PIN2" ]
}