{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/opengl/GLU.java",
  "packageName" : "android.opengl",
  "className" : "GLU",
  "comment" : "",
  "variables" : [ {
    "name" : "sScratch",
    "type" : "float[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static String gluErrorString(int error)",
    "returnType" : "String",
    "comment" : "\n     * Return an error string from a GL or GLU error code.\n     *\n     * @param error - a GL or GLU error code.\n     * @return the error string for the input error code, or NULL if the input\n     *         was not a valid GL or GLU error code.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void gluLookAt(GL10 gl, float eyeX, float eyeY, float eyeZ, float centerX, float centerY, float centerZ, float upX, float upY, float upZ)",
    "returnType" : "void",
    "comment" : "\n     * Define a viewing transformation in terms of an eye point, a center of\n     * view, and an up vector.\n     *\n     * @param gl a GL10 interface\n     * @param eyeX eye point X\n     * @param eyeY eye point Y\n     * @param eyeZ eye point Z\n     * @param centerX center of view X\n     * @param centerY center of view Y\n     * @param centerZ center of view Z\n     * @param upX up vector X\n     * @param upY up vector Y\n     * @param upZ up vector Z\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void gluOrtho2D(GL10 gl, float left, float right, float bottom, float top)",
    "returnType" : "void",
    "comment" : "\n     * Set up a 2D orthographic projection matrix\n     *\n     * @param gl\n     * @param left\n     * @param right\n     * @param bottom\n     * @param top\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void gluPerspective(GL10 gl, float fovy, float aspect, float zNear, float zFar)",
    "returnType" : "void",
    "comment" : "\n     * Set up a perspective projection matrix\n     *\n     * @param gl a GL10 interface\n     * @param fovy specifies the field of view angle, in degrees, in the Y\n     *        direction.\n     * @param aspect specifies the aspect ration that determins the field of\n     *        view in the x direction. The aspect ratio is the ratio of x\n     *        (width) to y (height).\n     * @param zNear specifies the distance from the viewer to the near clipping\n     *        plane (always positive).\n     * @param zFar specifies the distance from the viewer to the far clipping\n     *        plane (always positive).\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int gluProject(float objX, float objY, float objZ, float[] model, int modelOffset, float[] project, int projectOffset, int[] view, int viewOffset, float[] win, int winOffset)",
    "returnType" : "int",
    "comment" : "\n     * Map object coordinates into window coordinates. gluProject transforms the\n     * specified object coordinates into window coordinates using model, proj,\n     * and view. The result is stored in win.\n     * <p>\n     * Note that you can use the OES_matrix_get extension, if present, to get\n     * the current modelView and projection matrices.\n     *\n     * @param objX object coordinates X\n     * @param objY object coordinates Y\n     * @param objZ object coordinates Z\n     * @param model the current modelview matrix\n     * @param modelOffset the offset into the model array where the modelview\n     *        maxtrix data starts.\n     * @param project the current projection matrix\n     * @param projectOffset the offset into the project array where the project\n     *        matrix data starts.\n     * @param view the current view, {x, y, width, height}\n     * @param viewOffset the offset into the view array where the view vector\n     *        data starts.\n     * @param win the output vector {winX, winY, winZ}, that returns the\n     *        computed window coordinates.\n     * @param winOffset the offset into the win array where the win vector data\n     *        starts.\n     * @return A return value of GL_TRUE indicates success, a return value of\n     *         GL_FALSE indicates failure.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int gluUnProject(float winX, float winY, float winZ, float[] model, int modelOffset, float[] project, int projectOffset, int[] view, int viewOffset, float[] obj, int objOffset)",
    "returnType" : "int",
    "comment" : "\n     * Map window coordinates to object coordinates. gluUnProject maps the\n     * specified window coordinates into object coordinates using model, proj,\n     * and view. The result is stored in obj.\n     * <p>\n     * Note that you can use the OES_matrix_get extension, if present, to get\n     * the current modelView and projection matrices.\n     *\n     * @param winX window coordinates X\n     * @param winY window coordinates Y\n     * @param winZ window coordinates Z\n     * @param model the current modelview matrix\n     * @param modelOffset the offset into the model array where the modelview\n     *        maxtrix data starts.\n     * @param project the current projection matrix\n     * @param projectOffset the offset into the project array where the project\n     *        matrix data starts.\n     * @param view the current view, {x, y, width, height}\n     * @param viewOffset the offset into the view array where the view vector\n     *        data starts.\n     * @param obj the output vector {objX, objY, objZ, objW}, that returns the\n     *        computed homogeneous object coordinates.\n     * @param objOffset the offset into the obj array where the obj vector data\n     *        starts.\n     * @return A return value of GL10.GL_TRUE indicates success, a return value\n     *         of GL10.GL_FALSE indicates failure.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "sScratch" ],
  "methodNames" : [ "public static String gluErrorString(int error)", "public static void gluLookAt(GL10 gl, float eyeX, float eyeY, float eyeZ, float centerX, float centerY, float centerZ, float upX, float upY, float upZ)", "public static void gluOrtho2D(GL10 gl, float left, float right, float bottom, float top)", "public static void gluPerspective(GL10 gl, float fovy, float aspect, float zNear, float zFar)", "public static int gluProject(float objX, float objY, float objZ, float[] model, int modelOffset, float[] project, int projectOffset, int[] view, int viewOffset, float[] win, int winOffset)", "public static int gluUnProject(float winX, float winY, float winZ, float[] model, int modelOffset, float[] project, int projectOffset, int[] view, int viewOffset, float[] obj, int objOffset)" ]
}