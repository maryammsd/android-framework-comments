{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/service/autofill/FillRequest.java",
  "packageName" : "android.service.autofill",
  "className" : "FillRequest",
  "comment" : "\n * This class represents a request to an autofill service\n * to interpret the screen and provide information to the system which views are\n * interesting for saving and what are the possible ways to fill the inputs on\n * the screen if applicable.\n *\n * @see AutofillService#onFillRequest(FillRequest, android.os.CancellationSignal, FillCallback)\n ",
  "variables" : [ {
    "name" : "FLAG_MANUAL_REQUEST",
    "type" : "int",
    "comment" : "\n     * Indicates autofill was explicitly requested by the user.\n     *\n     * <p>Users typically make an explicit request to autofill a screen in two situations:\n     * <ul>\n     *   <li>The app disabled autofill (using {@link View#setImportantForAutofill(int)}.\n     *   <li>The service could not figure out how to autofill a screen (but the user knows the\n     *       service has data for that app).\n     * </ul>\n     *\n     * <p>This flag is particularly useful for the second case. For example, the service could offer\n     * a complex UI where the user can map which screen views belong to each user data, or it could\n     * offer a simpler UI where the user picks the data for just the view used to trigger the\n     * request (that would be the view whose\n     * {@link android.app.assist.AssistStructure.ViewNode#isFocused()} method returns {@code true}).\n     *\n     * <p>An explicit autofill request is triggered when the\n     * {@link android.view.autofill.AutofillManager#requestAutofill(View)} or\n     * {@link android.view.autofill.AutofillManager#requestAutofill(View, int, android.graphics.Rect)}\n     * is called. For example, standard {@link android.widget.TextView} views show an\n     * {@code AUTOFILL} option in the overflow menu that triggers such request.\n     ",
    "links" : [ "View#setImportantForAutofill", "android.app.assist.AssistStructure.ViewNode#isFocused", "android.view.autofill.AutofillManager#requestAutofill", "android.view.autofill.AutofillManager#requestAutofill", "android.widget.TextView" ]
  }, {
    "name" : "FLAG_COMPATIBILITY_MODE_REQUEST",
    "type" : "int",
    "comment" : "\n     * Indicates this request was made using\n     * <a href=\"AutofillService.html#CompatibilityMode\">compatibility mode</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_PASSWORD_INPUT_TYPE",
    "type" : "int",
    "comment" : "\n     * Indicates the request came from a password field.\n     *\n     * (TODO: b/141703197) Temporary fix for augmented autofill showing passwords.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_VIEW_NOT_FOCUSED",
    "type" : "int",
    "comment" : "\n     * Indicates the view was not focused.\n     *\n     * <p><b>Note:</b> Defines the flag value to 0x10, because the flag value 0x08 has been defined\n     * in {@link AutofillManager}.</p>\n     *\n     * @hide\n     ",
    "links" : [ "AutofillManager" ]
  }, {
    "name" : "INVALID_REQUEST_ID",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "mId",
    "type" : "int",
    "comment" : "\n     * Gets the unique id of this request.\n     ",
    "links" : [ ]
  }, {
    "name" : "mFillContexts",
    "type" : "List<FillContext>",
    "comment" : "\n     * Gets the contexts associated with each previous fill request.\n     *\n     * <p><b>Note:</b> Starting on Android {@link android.os.Build.VERSION_CODES#Q}, it could also\n     * include contexts from requests whose {@link SaveInfo} had the\n     * {@link SaveInfo#FLAG_DELAY_SAVE} flag.\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#Q", "SaveInfo", "SaveInfo#FLAG_DELAY_SAVE" ]
  }, {
    "name" : "mClientState",
    "type" : "Bundle",
    "comment" : "\n     * Gets the latest client state bundle set by the service in a\n     * {@link FillResponse.Builder#setClientState(Bundle) fill response}.\n     *\n     * <p><b>Note:</b> Prior to Android {@link android.os.Build.VERSION_CODES#P}, only client state\n     * bundles set by {@link FillResponse.Builder#setClientState(Bundle)} were considered. On\n     * Android {@link android.os.Build.VERSION_CODES#P} and higher, bundles set in the result of\n     * an authenticated request through the\n     * {@link android.view.autofill.AutofillManager#EXTRA_CLIENT_STATE} extra are\n     * also considered (and take precedence when set).\n     *\n     * @return The client state.\n     ",
    "links" : [ "FillResponse.Builder#setClientState", "android.os.Build.VERSION_CODES#P", "FillResponse.Builder#setClientState", "android.os.Build.VERSION_CODES#P", "android.view.autofill.AutofillManager#EXTRA_CLIENT_STATE" ]
  }, {
    "name" : "mFlags",
    "type" : "int",
    "comment" : "\n     * Gets the flags associated with this request.\n     *\n     * @return any combination of {@link #FLAG_MANUAL_REQUEST} and\n     *         {@link #FLAG_COMPATIBILITY_MODE_REQUEST}.\n     ",
    "links" : [ "#FLAG_MANUAL_REQUEST", "#FLAG_COMPATIBILITY_MODE_REQUEST" ]
  }, {
    "name" : "mInlineSuggestionsRequest",
    "type" : "InlineSuggestionsRequest",
    "comment" : "\n     * Gets the {@link InlineSuggestionsRequest} associated\n     * with this request.\n     *\n     * <p>Autofill Framework will send a {@code @non-null} {@link InlineSuggestionsRequest} if\n     * currently inline suggestions are supported and can be displayed. If the Autofill service\n     * wants to show inline suggestions, they may return {@link Dataset} with valid\n     * {@link InlinePresentation}.</p>\n     *\n     * <p>The Autofill Service must set supportsInlineSuggestions in its XML to enable support\n     * for inline suggestions.</p>\n     *\n     * @return the suggestionspec\n     ",
    "links" : [ "InlineSuggestionsRequest", "InlineSuggestionsRequest", "Dataset", "InlinePresentation" ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<FillRequest>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void onConstructed()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String requestFlagsToString(@RequestFlags int value)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : " static String singleRequestFlagsToString(@RequestFlags int value)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getId()",
    "returnType" : "int",
    "comment" : "\n     * Gets the unique id of this request.\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<FillContext> getFillContexts()",
    "returnType" : "List<FillContext>",
    "comment" : "\n     * Gets the contexts associated with each previous fill request.\n     *\n     * <p><b>Note:</b> Starting on Android {@link android.os.Build.VERSION_CODES#Q}, it could also\n     * include contexts from requests whose {@link SaveInfo} had the\n     * {@link SaveInfo#FLAG_DELAY_SAVE} flag.\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#Q", "SaveInfo", "SaveInfo#FLAG_DELAY_SAVE" ]
  }, {
    "name" : "public Bundle getClientState()",
    "returnType" : "Bundle",
    "comment" : "\n     * Gets the latest client state bundle set by the service in a\n     * {@link FillResponse.Builder#setClientState(Bundle) fill response}.\n     *\n     * <p><b>Note:</b> Prior to Android {@link android.os.Build.VERSION_CODES#P}, only client state\n     * bundles set by {@link FillResponse.Builder#setClientState(Bundle)} were considered. On\n     * Android {@link android.os.Build.VERSION_CODES#P} and higher, bundles set in the result of\n     * an authenticated request through the\n     * {@link android.view.autofill.AutofillManager#EXTRA_CLIENT_STATE} extra are\n     * also considered (and take precedence when set).\n     *\n     * @return The client state.\n     ",
    "links" : [ "FillResponse.Builder#setClientState", "android.os.Build.VERSION_CODES#P", "FillResponse.Builder#setClientState", "android.os.Build.VERSION_CODES#P", "android.view.autofill.AutofillManager#EXTRA_CLIENT_STATE" ]
  }, {
    "name" : "public int getFlags()",
    "returnType" : "int",
    "comment" : "\n     * Gets the flags associated with this request.\n     *\n     * @return any combination of {@link #FLAG_MANUAL_REQUEST} and\n     *         {@link #FLAG_COMPATIBILITY_MODE_REQUEST}.\n     ",
    "links" : [ "#FLAG_MANUAL_REQUEST", "#FLAG_COMPATIBILITY_MODE_REQUEST" ]
  }, {
    "name" : "public InlineSuggestionsRequest getInlineSuggestionsRequest()",
    "returnType" : "InlineSuggestionsRequest",
    "comment" : "\n     * Gets the {@link InlineSuggestionsRequest} associated\n     * with this request.\n     *\n     * <p>Autofill Framework will send a {@code @non-null} {@link InlineSuggestionsRequest} if\n     * currently inline suggestions are supported and can be displayed. If the Autofill service\n     * wants to show inline suggestions, they may return {@link Dataset} with valid\n     * {@link InlinePresentation}.</p>\n     *\n     * <p>The Autofill Service must set supportsInlineSuggestions in its XML to enable support\n     * for inline suggestions.</p>\n     *\n     * @return the suggestionspec\n     ",
    "links" : [ "InlineSuggestionsRequest", "InlineSuggestionsRequest", "Dataset", "InlinePresentation" ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void __metadata()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "FLAG_MANUAL_REQUEST", "FLAG_COMPATIBILITY_MODE_REQUEST", "FLAG_PASSWORD_INPUT_TYPE", "FLAG_VIEW_NOT_FOCUSED", "INVALID_REQUEST_ID", "mId", "mFillContexts", "mClientState", "mFlags", "mInlineSuggestionsRequest", "CREATOR" ],
  "methodNames" : [ "private void onConstructed()", "public static String requestFlagsToString(@RequestFlags int value)", " static String singleRequestFlagsToString(@RequestFlags int value)", "public int getId()", "public List<FillContext> getFillContexts()", "public Bundle getClientState()", "public int getFlags()", "public InlineSuggestionsRequest getInlineSuggestionsRequest()", "public String toString()", "public void writeToParcel(@NonNull Parcel dest, int flags)", "public int describeContents()", "private void __metadata()" ]
}