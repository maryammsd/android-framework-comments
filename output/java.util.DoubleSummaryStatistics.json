{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/DoubleSummaryStatistics.java",
  "packageName" : "java.util",
  "className" : "DoubleSummaryStatistics",
  "comment" : "\n * A state object for collecting statistics such as count, min, max, sum, and\n * average.\n *\n * <p>This class is designed to work with (though does not require)\n * {@linkplain java.util.stream streams}. For example, you can compute\n * summary statistics on a stream of doubles with:\n * <pre> {@code\n * DoubleSummaryStatistics stats = doubleStream.collect(DoubleSummaryStatistics::new,\n *                                                      DoubleSummaryStatistics::accept,\n *                                                      DoubleSummaryStatistics::combine);\n * }</pre>\n *\n * <p>{@code DoubleSummaryStatistics} can be used as a\n * {@linkplain java.util.stream.Stream#collect(Collector) reduction}\n * target for a {@linkplain java.util.stream.Stream stream}. For example:\n *\n * <pre> {@code\n * DoubleSummaryStatistics stats = people.stream()\n *     .collect(Collectors.summarizingDouble(Person::getWeight));\n *}</pre>\n *\n * This computes, in a single pass, the count of people, as well as the minimum,\n * maximum, sum, and average of their weights.\n *\n * @implNote This implementation is not thread safe. However, it is safe to use\n * {@link java.util.stream.Collectors#summarizingDouble(java.util.function.ToDoubleFunction)\n * Collectors.summarizingDouble()} on a parallel stream, because the parallel\n * implementation of {@link java.util.stream.Stream#collect Stream.collect()}\n * provides the necessary partitioning, isolation, and merging of results for\n * safe and efficient parallel execution.\n *\n * <p>This implementation does not check for overflow of the count.\n * @since 1.8\n ",
  "links" : [ "java.util.stream.Collectors#summarizingDouble(java.util.function.ToDoubleFunction)", "java.util.stream.Stream#collect" ],
  "variables" : [ {
    "name" : "count",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sum",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sumCompensation",
    "type" : "double",
    "comment" : " Low order bits of sum",
    "links" : [ ]
  }, {
    "name" : "simpleSum",
    "type" : "double",
    "comment" : " Used to compute right sum for non-finite inputs",
    "links" : [ ]
  }, {
    "name" : "min",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "max",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void accept(double value)",
    "returnType" : "void",
    "comment" : "\n     * Records another value into the summary information.\n     *\n     * @param value the input value\n     ",
    "links" : [ ]
  }, {
    "name" : "public void combine(DoubleSummaryStatistics other)",
    "returnType" : "void",
    "comment" : "\n     * Combines the state of another {@code DoubleSummaryStatistics} into this\n     * one.\n     *\n     * @param other another {@code DoubleSummaryStatistics}\n     * @throws NullPointerException if {@code other} is null\n     ",
    "links" : [ ]
  }, {
    "name" : "private void sumWithCompensation(double value)",
    "returnType" : "void",
    "comment" : "\n     * Incorporate a new double value using Kahan summation /\n     * compensated summation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final long getCount()",
    "returnType" : "long",
    "comment" : "\n     * Return the count of values recorded.\n     *\n     * @return the count of values\n     ",
    "links" : [ ]
  }, {
    "name" : "public final double getSum()",
    "returnType" : "double",
    "comment" : "\n     * Returns the sum of values recorded, or zero if no values have been\n     * recorded.\n     *\n     * <p> The value of a floating-point sum is a function both of the\n     * input values as well as the order of addition operations. The\n     * order of addition operations of this method is intentionally\n     * not defined to allow for implementation flexibility to improve\n     * the speed and accuracy of the computed result.\n     *\n     * In particular, this method may be implemented using compensated\n     * summation or other technique to reduce the error bound in the\n     * numerical sum compared to a simple summation of {@code double}\n     * values.\n     *\n     * Because of the unspecified order of operations and the\n     * possibility of using differing summation schemes, the output of\n     * this method may vary on the same input values.\n     *\n     * <p>Various conditions can result in a non-finite sum being\n     * computed. This can occur even if the all the recorded values\n     * being summed are finite. If any recorded value is non-finite,\n     * the sum will be non-finite:\n     *\n     * <ul>\n     *\n     * <li>If any recorded value is a NaN, then the final sum will be\n     * NaN.\n     *\n     * <li>If the recorded values contain one or more infinities, the\n     * sum will be infinite or NaN.\n     *\n     * <ul>\n     *\n     * <li>If the recorded values contain infinities of opposite sign,\n     * the sum will be NaN.\n     *\n     * <li>If the recorded values contain infinities of one sign and\n     * an intermediate sum overflows to an infinity of the opposite\n     * sign, the sum may be NaN.\n     *\n     * </ul>\n     *\n     * </ul>\n     *\n     * It is possible for intermediate sums of finite values to\n     * overflow into opposite-signed infinities; if that occurs, the\n     * final sum will be NaN even if the recorded values are all\n     * finite.\n     *\n     * If all the recorded values are zero, the sign of zero is\n     * <em>not</em> guaranteed to be preserved in the final sum.\n     *\n     * @apiNote Values sorted by increasing absolute magnitude tend to yield\n     * more accurate results.\n     *\n     * @return the sum of values, or zero if none\n     ",
    "links" : [ ]
  }, {
    "name" : "public final double getMin()",
    "returnType" : "double",
    "comment" : "\n     * Returns the minimum recorded value, {@code Double.NaN} if any recorded\n     * value was NaN or {@code Double.POSITIVE_INFINITY} if no values were\n     * recorded. Unlike the numerical comparison operators, this method\n     * considers negative zero to be strictly smaller than positive zero.\n     *\n     * @return the minimum recorded value, {@code Double.NaN} if any recorded\n     * value was NaN or {@code Double.POSITIVE_INFINITY} if no values were\n     * recorded\n     ",
    "links" : [ ]
  }, {
    "name" : "public final double getMax()",
    "returnType" : "double",
    "comment" : "\n     * Returns the maximum recorded value, {@code Double.NaN} if any recorded\n     * value was NaN or {@code Double.NEGATIVE_INFINITY} if no values were\n     * recorded. Unlike the numerical comparison operators, this method\n     * considers negative zero to be strictly smaller than positive zero.\n     *\n     * @return the maximum recorded value, {@code Double.NaN} if any recorded\n     * value was NaN or {@code Double.NEGATIVE_INFINITY} if no values were\n     * recorded\n     ",
    "links" : [ ]
  }, {
    "name" : "public final double getAverage()",
    "returnType" : "double",
    "comment" : "\n     * Returns the arithmetic mean of values recorded, or zero if no\n     * values have been recorded.\n     *\n     * <p> The computed average can vary numerically and have the\n     * special case behavior as computing the sum; see {@link #getSum}\n     * for details.\n     *\n     * @apiNote Values sorted by increasing absolute magnitude tend to yield\n     * more accurate results.\n     *\n     * @return the arithmetic mean of values, or zero if none\n     ",
    "links" : [ "#getSum" ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a non-empty string representation of this object suitable for\n     * debugging. The exact presentation format is unspecified and may vary\n     * between implementations and versions.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void accept(double value)", "public void combine(DoubleSummaryStatistics other)", "private void sumWithCompensation(double value)", "public final long getCount()", "public final double getSum()", "public final double getMin()", "public final double getMax()", "public final double getAverage()", "public String toString()" ],
  "variableNames" : [ "count", "sum", "sumCompensation", "simpleSum", "min", "max" ]
}