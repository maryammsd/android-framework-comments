{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/text/RuleBasedBreakIterator.java",
  "packageName" : "android.icu.text",
  "className" : "BreakCache",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "RetainCachePosition",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UpdateCachePosition",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CACHE_SIZE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "fStartBufIdx",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "fEndBufIdx",
    "type" : "int",
    "comment" : " inclusive",
    "links" : [ ]
  }, {
    "name" : "fTextIdx",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "fBufIdx",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "fBoundaries",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "fStatuses",
    "type" : "short[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "fSideBuffer",
    "type" : "DictionaryBreakEngine.DequeI",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " void reset(int pos, int ruleStatus)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void reset()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void next()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void previous()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void following(int startPos)",
    "returnType" : "void",
    "comment" : " Input position must be pinned to the input length.",
    "links" : [ ]
  }, {
    "name" : " void preceding(int startPos)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " int current()",
    "returnType" : "int",
    "comment" : "\n     * Update the state of the public BreakIterator (fBI) to reflect the\n     * current state of the break iterator cache (this).\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean populateNear(int position)",
    "returnType" : "boolean",
    "comment" : "\n     * Add boundaries to the cache near the specified position.\n     * The given position need not be a boundary itself.\n     * The input position must be within the range of the text, and\n     * on a code point boundary.\n     * If the requested position is a break boundary, leave the iteration\n     * position on it.\n     * If the requested position is not a boundary, leave the iteration\n     * position on the preceding boundary and include both the the\n     * preceding and following boundaries in the cache.\n     * Additional boundaries, either preceding or following, may be added\n     * to the cache as a side effect.\n     *\n     * Return false if the operation failed.\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean populateFollowing()",
    "returnType" : "boolean",
    "comment" : "\n     *  Add boundary(s) to the cache following the current last boundary.\n     *  Return false if at the end of the text, and no more boundaries can be added.\n     *  Leave iteration position at the first newly added boundary, or unchanged if no boundary was added.\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean populatePreceding()",
    "returnType" : "boolean",
    "comment" : "\n     *  Add one or more boundaries to the cache preceding the first currently cached boundary.\n     *  Leave the iteration position on the first added boundary.\n     *  Return false if no boundaries could be added (if at the start of the text.)\n     ",
    "links" : [ ]
  }, {
    "name" : " void addFollowing(int position, int ruleStatusIdx, boolean update)",
    "returnType" : "void",
    "comment" : "\n     * Add the boundary following the current position.\n     * The current position can be left as it was, or changed to the newly added boundary,\n     * as specified by the update parameter.\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean addPreceding(int position, int ruleStatusIdx, boolean update)",
    "returnType" : "boolean",
    "comment" : "\n     * Add the boundary preceding the current position.\n     * The current position can be left as it was, or changed to the newly added boundary,\n     * as specified by the update parameter.\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean seek(int pos)",
    "returnType" : "boolean",
    "comment" : "\n     *  Set the cache position to the specified position, or, if the position\n     *  falls between to cached boundaries, to the preceding boundary.\n     *  Fails if the requested position is outside of the range of boundaries currently held by the cache.\n     *  The startPosition must be on a code point boundary.\n     *\n     *  Return true if successful, false if the specified position is after\n     *  the last cached boundary or before the first.\n     ",
    "links" : [ ]
  }, {
    "name" : " void dumpCache()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final int modChunkSize(int index)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ " void reset(int pos, int ruleStatus)", " void reset()", " void next()", " void previous()", " void following(int startPos)", " void preceding(int startPos)", " int current()", " boolean populateNear(int position)", " boolean populateFollowing()", " boolean populatePreceding()", " void addFollowing(int position, int ruleStatusIdx, boolean update)", " boolean addPreceding(int position, int ruleStatusIdx, boolean update)", " boolean seek(int pos)", " void dumpCache()", "private final int modChunkSize(int index)" ],
  "variableNames" : [ "RetainCachePosition", "UpdateCachePosition", "CACHE_SIZE", "fStartBufIdx", "fEndBufIdx", "fTextIdx", "fBufIdx", "fBoundaries", "fStatuses", "fSideBuffer" ]
}