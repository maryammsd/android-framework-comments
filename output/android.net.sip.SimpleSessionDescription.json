{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/net/sip/SimpleSessionDescription.java",
  "packageName" : "android.net.sip",
  "className" : "SimpleSessionDescription",
  "comment" : "\n * An object used to manipulate messages of Session Description Protocol (SDP).\n * It is mainly designed for the uses of Session Initiation Protocol (SIP).\n * Therefore, it only handles connection addresses (\"c=\"), bandwidth limits,\n * (\"b=\"), encryption keys (\"k=\"), and attribute fields (\"a=\"). Currently this\n * implementation does not support multicast sessions.\n *\n * <p>Here is an example code to create a session description.</p>\n * <pre>\n * SimpleSessionDescription description = new SimpleSessionDescription(\n *     System.currentTimeMillis(), \"1.2.3.4\");\n * Media media = description.newMedia(\"audio\", 56789, 1, \"RTP/AVP\");\n * media.setRtpPayload(0, \"PCMU/8000\", null);\n * media.setRtpPayload(8, \"PCMA/8000\", null);\n * media.setRtpPayload(127, \"telephone-event/8000\", \"0-15\");\n * media.setAttribute(\"sendrecv\", \"\");\n * </pre>\n * <p>Invoking <code>description.encode()</code> will produce a result like the\n * one below.</p>\n * <pre>\n * v=0\n * o=- 1284970442706 1284970442709 IN IP4 1.2.3.4\n * s=-\n * c=IN IP4 1.2.3.4\n * t=0 0\n * m=audio 56789 RTP/AVP 0 8 127\n * a=rtpmap:0 PCMU/8000\n * a=rtpmap:8 PCMA/8000\n * a=rtpmap:127 telephone-event/8000\n * a=fmtp:127 0-15\n * a=sendrecv\n * </pre>\n * @hide\n ",
  "variables" : [ {
    "name" : "mFields",
    "type" : "Fields",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMedia",
    "type" : "ArrayList<Media>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Media newMedia(String type, int port, int portCount, String protocol)",
    "returnType" : "Media",
    "comment" : "\n     * Creates a new media description in this session description.\n     *\n     * @param type The media type, e.g. {@code \"audio\"}.\n     * @param port The first transport port used by this media.\n     * @param portCount The number of contiguous ports used by this media.\n     * @param protocol The transport protocol, e.g. {@code \"RTP/AVP\"}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Media[] getMedia()",
    "returnType" : "Media[]",
    "comment" : "\n     * Returns all the media descriptions in this session description.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String encode()",
    "returnType" : "String",
    "comment" : "\n     * Encodes the session description and all its media descriptions in a\n     * string. Note that the result might be incomplete if a required field\n     * has never been added before.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getAddress()",
    "returnType" : "String",
    "comment" : "\n     * Returns the connection address or {@code null} if it is not present.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAddress(String address)",
    "returnType" : "void",
    "comment" : "\n     * Sets the connection address. The field will be removed if the address\n     * is {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getEncryptionMethod()",
    "returnType" : "String",
    "comment" : "\n     * Returns the encryption method or {@code null} if it is not present.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getEncryptionKey()",
    "returnType" : "String",
    "comment" : "\n     * Returns the encryption key or {@code null} if it is not present.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setEncryption(String method, String key)",
    "returnType" : "void",
    "comment" : "\n     * Sets the encryption method and the encryption key. The field will be\n     * removed if the method is {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String[] getBandwidthTypes()",
    "returnType" : "String[]",
    "comment" : "\n     * Returns the types of the bandwidth limits.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getBandwidth(String type)",
    "returnType" : "int",
    "comment" : "\n     * Returns the bandwidth limit of the given type or {@code -1} if it is not\n     * present.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setBandwidth(String type, int value)",
    "returnType" : "void",
    "comment" : "\n     * Sets the bandwith limit for the given type. The field will be removed if\n     * the value is negative.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String[] getAttributeNames()",
    "returnType" : "String[]",
    "comment" : "\n     * Returns the names of all the attributes.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getAttribute(String name)",
    "returnType" : "String",
    "comment" : "\n     * Returns the attribute of the given name or {@code null} if it is not\n     * present.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAttribute(String name, String value)",
    "returnType" : "void",
    "comment" : "\n     * Sets the attribute for the given name. The field will be removed if\n     * the value is {@code null}. To set a binary attribute, use an empty\n     * string as the value.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "mFields", "mMedia" ],
  "methodNames" : [ "public Media newMedia(String type, int port, int portCount, String protocol)", "public Media[] getMedia()", "public String encode()", "public String getAddress()", "public void setAddress(String address)", "public String getEncryptionMethod()", "public String getEncryptionKey()", "public void setEncryption(String method, String key)", "public String[] getBandwidthTypes()", "public int getBandwidth(String type)", "public void setBandwidth(String type, int value)", "public String[] getAttributeNames()", "public String getAttribute(String name)", "public void setAttribute(String name, String value)" ]
}