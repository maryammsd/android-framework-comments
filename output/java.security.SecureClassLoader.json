{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/security/SecureClassLoader.java",
  "packageName" : "java.security",
  "className" : "SecureClassLoader",
  "comment" : "\n * This class extends ClassLoader with additional support for defining\n * classes with an associated code source and permissions which are\n * retrieved by the system policy by default.\n *\n * @author  Li Gong\n * @author  Roland Schemers\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "initialized",
    "type" : "boolean",
    "comment" : "\n     * If initialization succeed this is set to true and security checks will\n     * succeed. Otherwise the object is not initialized and the object is\n     * useless.\n     ",
    "links" : [ ]
  }, {
    "name" : "pdcache",
    "type" : "HashMap<CodeSource, ProtectionDomain>",
    "comment" : " @GuardedBy(\"pdcache\")",
    "links" : [ ]
  }, {
    "name" : "debug",
    "type" : "Debug",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected final Class<?> defineClass(String name, byte[] b, int off, int len, CodeSource cs)",
    "returnType" : "Class<?>",
    "comment" : "\n     * Converts an array of bytes into an instance of class Class,\n     * with an optional CodeSource. Before the\n     * class can be used it must be resolved.\n     * <p>\n     * If a non-null CodeSource is supplied a ProtectionDomain is\n     * constructed and associated with the class being defined.\n     * <p>\n     * @param      name the expected name of the class, or {@code null}\n     *                  if not known, using '.' and not '/' as the separator\n     *                  and without a trailing \".class\" suffix.\n     * @param      b    the bytes that make up the class data. The bytes in\n     *             positions {@code off} through {@code off+len-1}\n     *             should have the format of a valid class file as defined by\n     *             <cite>The Java&trade; Virtual Machine Specification</cite>.\n     * @param      off  the start offset in {@code b} of the class data\n     * @param      len  the length of the class data\n     * @param      cs   the associated CodeSource, or {@code null} if none\n     * @return the {@code Class} object created from the data,\n     *         and optional CodeSource.\n     * @exception  ClassFormatError if the data did not contain a valid class\n     * @exception  IndexOutOfBoundsException if either {@code off} or\n     *             {@code len} is negative, or if\n     *             {@code off+len} is greater than {@code b.length}.\n     *\n     * @exception  SecurityException if an attempt is made to add this class\n     *             to a package that contains classes that were signed by\n     *             a different set of certificates than this class, or if\n     *             the class name begins with \"java.\".\n     ",
    "links" : [ ]
  }, {
    "name" : "protected final Class<?> defineClass(String name, java.nio.ByteBuffer b, CodeSource cs)",
    "returnType" : "Class<?>",
    "comment" : "\n     * Converts a {@link java.nio.ByteBuffer ByteBuffer}\n     * into an instance of class {@code Class}, with an optional CodeSource.\n     * Before the class can be used it must be resolved.\n     * <p>\n     * If a non-null CodeSource is supplied a ProtectionDomain is\n     * constructed and associated with the class being defined.\n     * <p>\n     * @param      name the expected name of the class, or {@code null}\n     *                  if not known, using '.' and not '/' as the separator\n     *                  and without a trailing \".class\" suffix.\n     * @param      b    the bytes that make up the class data.  The bytes from positions\n     *                  {@code b.position()} through {@code b.position() + b.limit() -1}\n     *                  should have the format of a valid class file as defined by\n     *                  <cite>The Java&trade; Virtual Machine Specification</cite>.\n     * @param      cs   the associated CodeSource, or {@code null} if none\n     * @return the {@code Class} object created from the data,\n     *         and optional CodeSource.\n     * @exception  ClassFormatError if the data did not contain a valid class\n     * @exception  SecurityException if an attempt is made to add this class\n     *             to a package that contains classes that were signed by\n     *             a different set of certificates than this class, or if\n     *             the class name begins with \"java.\".\n     *\n     * @since  1.5\n     ",
    "links" : [ "java.nio.ByteBuffer" ]
  }, {
    "name" : "protected PermissionCollection getPermissions(CodeSource codesource)",
    "returnType" : "PermissionCollection",
    "comment" : "\n     * Returns the permissions for the given CodeSource object.\n     * <p>\n     * This method is invoked by the defineClass method which takes\n     * a CodeSource as an argument when it is constructing the\n     * ProtectionDomain for the class being defined.\n     * <p>\n     * @param codesource the codesource.\n     *\n     * @return the permissions granted to the codesource.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "private ProtectionDomain getProtectionDomain(CodeSource cs)",
    "returnType" : "ProtectionDomain",
    "comment" : "\n     * Returned cached ProtectionDomain for the specified CodeSource.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void check()",
    "returnType" : "void",
    "comment" : "\n     * Check to make sure the class loader has been initialized.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "protected final Class<?> defineClass(String name, byte[] b, int off, int len, CodeSource cs)", "protected final Class<?> defineClass(String name, java.nio.ByteBuffer b, CodeSource cs)", "protected PermissionCollection getPermissions(CodeSource codesource)", "private ProtectionDomain getProtectionDomain(CodeSource cs)", "private void check()" ],
  "variableNames" : [ "initialized", "pdcache", "debug" ]
}