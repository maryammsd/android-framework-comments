{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/sql/ResultSetMetaData.java",
  "packageName" : "java.sql",
  "className" : "ResultSetMetaData",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "columnNoNulls",
    "type" : "int",
    "comment" : "\n     * The constant indicating that a\n     * column does not allow <code>NULL</code> values.\n     ",
    "links" : [ ]
  }, {
    "name" : "columnNullable",
    "type" : "int",
    "comment" : "\n     * The constant indicating that a\n     * column allows <code>NULL</code> values.\n     ",
    "links" : [ ]
  }, {
    "name" : "columnNullableUnknown",
    "type" : "int",
    "comment" : "\n     * The constant indicating that the\n     * nullability of a column's values is unknown.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " int getColumnCount() throws SQLException",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of columns in this <code>ResultSet</code> object.\n     *\n     * @return the number of columns\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean isAutoIncrement(int column) throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether the designated column is automatically numbered.\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean isCaseSensitive(int column) throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether a column's case matters.\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean isSearchable(int column) throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether the designated column can be used in a where clause.\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean isCurrency(int column) throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether the designated column is a cash value.\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " int isNullable(int column) throws SQLException",
    "returnType" : "int",
    "comment" : "\n     * Indicates the nullability of values in the designated column.\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return the nullability status of the given column; one of <code>columnNoNulls</code>,\n     *          <code>columnNullable</code> or <code>columnNullableUnknown</code>\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean isSigned(int column) throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether values in the designated column are signed numbers.\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " int getColumnDisplaySize(int column) throws SQLException",
    "returnType" : "int",
    "comment" : "\n     * Indicates the designated column's normal maximum width in characters.\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return the normal maximum number of characters allowed as the width\n     *          of the designated column\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " String getColumnLabel(int column) throws SQLException",
    "returnType" : "String",
    "comment" : "\n     * Gets the designated column's suggested title for use in printouts and\n     * displays. The suggested title is usually specified by the SQL <code>AS</code>\n     * clause.  If a SQL <code>AS</code> is not specified, the value returned from\n     * <code>getColumnLabel</code> will be the same as the value returned by the\n     * <code>getColumnName</code> method.\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return the suggested column title\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " String getColumnName(int column) throws SQLException",
    "returnType" : "String",
    "comment" : "\n     * Get the designated column's name.\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return column name\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " String getSchemaName(int column) throws SQLException",
    "returnType" : "String",
    "comment" : "\n     * Get the designated column's table's schema.\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return schema name or \"\" if not applicable\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " int getPrecision(int column) throws SQLException",
    "returnType" : "int",
    "comment" : "\n     * Get the designated column's specified column size.\n     * For numeric data, this is the maximum precision.  For character data, this is the length in characters.\n     * For datetime datatypes, this is the length in characters of the String representation (assuming the\n     * maximum allowed precision of the fractional seconds component). For binary data, this is the length in bytes.  For the ROWID datatype,\n     * this is the length in bytes. 0 is returned for data types where the\n     * column size is not applicable.\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return precision\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " int getScale(int column) throws SQLException",
    "returnType" : "int",
    "comment" : "\n     * Gets the designated column's number of digits to right of the decimal point.\n     * 0 is returned for data types where the scale is not applicable.\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return scale\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " String getTableName(int column) throws SQLException",
    "returnType" : "String",
    "comment" : "\n     * Gets the designated column's table name.\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return table name or \"\" if not applicable\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " String getCatalogName(int column) throws SQLException",
    "returnType" : "String",
    "comment" : "\n     * Gets the designated column's table's catalog name.\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return the name of the catalog for the table in which the given column\n     *          appears or \"\" if not applicable\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " int getColumnType(int column) throws SQLException",
    "returnType" : "int",
    "comment" : "\n     * Retrieves the designated column's SQL type.\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return SQL type from java.sql.Types\n     * @exception SQLException if a database access error occurs\n     * @see Types\n     ",
    "links" : [ ]
  }, {
    "name" : " String getColumnTypeName(int column) throws SQLException",
    "returnType" : "String",
    "comment" : "\n     * Retrieves the designated column's database-specific type name.\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return type name used by the database. If the column type is\n     * a user-defined type, then a fully-qualified type name is returned.\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean isReadOnly(int column) throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether the designated column is definitely not writable.\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean isWritable(int column) throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether it is possible for a write on the designated column to succeed.\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean isDefinitelyWritable(int column) throws SQLException",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether a write on the designated column will definitely succeed.\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return <code>true</code> if so; <code>false</code> otherwise\n     * @exception SQLException if a database access error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " String getColumnClassName(int column) throws SQLException",
    "returnType" : "String",
    "comment" : "\n     * <p>Returns the fully-qualified name of the Java class whose instances\n     * are manufactured if the method <code>ResultSet.getObject</code>\n     * is called to retrieve a value\n     * from the column.  <code>ResultSet.getObject</code> may return a subclass of the\n     * class returned by this method.\n     *\n     * @param column the first column is 1, the second is 2, ...\n     * @return the fully-qualified name of the class in the Java programming\n     *         language that would be used by the method\n     * <code>ResultSet.getObject</code> to retrieve the value in the specified\n     * column. This is the class name used for custom mapping.\n     * @exception SQLException if a database access error occurs\n     * @since 1.2\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " int getColumnCount() throws SQLException", " boolean isAutoIncrement(int column) throws SQLException", " boolean isCaseSensitive(int column) throws SQLException", " boolean isSearchable(int column) throws SQLException", " boolean isCurrency(int column) throws SQLException", " int isNullable(int column) throws SQLException", " boolean isSigned(int column) throws SQLException", " int getColumnDisplaySize(int column) throws SQLException", " String getColumnLabel(int column) throws SQLException", " String getColumnName(int column) throws SQLException", " String getSchemaName(int column) throws SQLException", " int getPrecision(int column) throws SQLException", " int getScale(int column) throws SQLException", " String getTableName(int column) throws SQLException", " String getCatalogName(int column) throws SQLException", " int getColumnType(int column) throws SQLException", " String getColumnTypeName(int column) throws SQLException", " boolean isReadOnly(int column) throws SQLException", " boolean isWritable(int column) throws SQLException", " boolean isDefinitelyWritable(int column) throws SQLException", " String getColumnClassName(int column) throws SQLException" ],
  "variableNames" : [ "columnNoNulls", "columnNullable", "columnNullableUnknown" ]
}