{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/ForegroundServiceTypePolicy.java",
  "packageName" : "android.app",
  "className" : "ForegroundServiceTypePolicyInfo",
  "comment" : "\n     * This class represents the policy for a specific FGS service type.\n     *\n     * @hide\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mType",
    "type" : "int",
    "comment" : "\n         * The foreground service type.\n         ",
    "links" : [ ]
  }, {
    "name" : "mDeprecationChangeId",
    "type" : "long",
    "comment" : "\n         * The change id to tell if this FGS type is deprecated.\n         *\n         * <p>A 0 indicates it's not deprecated.</p>\n         ",
    "links" : [ ]
  }, {
    "name" : "mDisabledChangeId",
    "type" : "long",
    "comment" : "\n         * The change id to tell if this FGS type is disabled.\n         *\n         * <p>A 0 indicates it's not disabled.</p>\n         ",
    "links" : [ ]
  }, {
    "name" : "mAllOfPermissions",
    "type" : "ForegroundServiceTypePermissions",
    "comment" : "\n         * The required permissions to start a foreground with this type, all of them\n         * MUST have been granted.\n         ",
    "links" : [ ]
  }, {
    "name" : "mAnyOfPermissions",
    "type" : "ForegroundServiceTypePermissions",
    "comment" : "\n         * The required permissions to start a foreground with this type, any one of them\n         * being granted is sufficient.\n         ",
    "links" : [ ]
  }, {
    "name" : "mPermissionEnforcementFlag",
    "type" : "String",
    "comment" : "\n         * A permission enforcement flag, unlike the {@link #FGS_TYPE_PERMISSION_CHANGE_ID},\n         * here it applies to all apps using this FGS type.\n         ",
    "links" : [ "#FGS_TYPE_PERMISSION_CHANGE_ID" ]
  }, {
    "name" : "mPermissionEnforcementFlagDefaultValue",
    "type" : "boolean",
    "comment" : "\n         * The default value to {@link #mPermissionEnforcementFlag}.\n         ",
    "links" : [ "#mPermissionEnforcementFlag" ]
  }, {
    "name" : "mForegroundOnlyPermission",
    "type" : "boolean",
    "comment" : "\n         * Whether or not the permissions here are limited to foreground only.\n         * Typical examples are microphone/camera/location.\n         ",
    "links" : [ ]
  }, {
    "name" : "mCustomPermission",
    "type" : "ForegroundServiceTypePermission",
    "comment" : "\n         * A customized check for the permissions.\n         ",
    "links" : [ ]
  }, {
    "name" : "mPermissionEnforcementFlagValue",
    "type" : "boolean",
    "comment" : "\n         * The value of the permission enforcement flag, will be updated by the system.\n         * If the value is {@code false}, the FGS permission check will be ignored.\n         *\n         * <p>This value could be updated via the DeviceConfig flag specified\n         * in the {@link #mPermissionEnforcementFlag}.</p>\n         ",
    "links" : [ "#mPermissionEnforcementFlag" ]
  }, {
    "name" : "INVALID_CHANGE_ID",
    "type" : "long",
    "comment" : "\n         * Not a real change id, but a place holder.\n         ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static boolean isValidChangeId(long changeId)",
    "returnType" : "boolean",
    "comment" : "\n         * @return {@code true} if the given change id is valid.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getForegroundServiceType()",
    "returnType" : "int",
    "comment" : "\n         * @return The foreground service type.\n         ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toPermissionString()",
    "returnType" : "String",
    "comment" : "\n         * @return The required permissions.\n         ",
    "links" : [ ]
  }, {
    "name" : "private StringBuilder toPermissionString(StringBuilder sb)",
    "returnType" : "StringBuilder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updatePermissionEnforcementFlagIfNecessary(@NonNull String flagName)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setCustomPermission(@Nullable ForegroundServiceTypePermission customPermission)",
    "returnType" : "void",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Optional<String[]> getRequiredAllOfPermissionsForTest(@NonNull Context context)",
    "returnType" : "Optional<String[]>",
    "comment" : "\n         * @return The name of the permissions which are all required.\n         *         It may contain app op names.\n         *\n         * For test only.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Optional<String[]> getRequiredAnyOfPermissionsForTest(@NonNull Context context)",
    "returnType" : "Optional<String[]>",
    "comment" : "\n         * @return The name of the permissions where any of the is granted is sufficient.\n         *         It may contain app op names.\n         *\n         * For test only.\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean isTypeDisabled(int callerUid)",
    "returnType" : "boolean",
    "comment" : "\n         * Whether or not this type is disabled.\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasForegroundOnlyPermission()",
    "returnType" : "boolean",
    "comment" : "\n         * Whether or not the permissions here are limited to foreground only.\n         * Typical examples are microphone/camera/location.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setTypeDisabledForTest(boolean disabled, @NonNull String packageName) throws RemoteException",
    "returnType" : "void",
    "comment" : "\n         * Override the type disabling change Id.\n         *\n         * For test only.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void clearTypeDisabledForTest(@NonNull String packageName) throws RemoteException",
    "returnType" : "void",
    "comment" : "\n         * clear the type disabling change Id.\n         *\n         * For test only.\n         ",
    "links" : [ ]
  }, {
    "name" : " boolean isTypeDeprecated(int callerUid)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void overrideChangeIdForTest(long changeId, boolean enable, String packageName) throws RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void clearOverrideForTest(long changeId, @NonNull String packageName) throws RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getPermissionEnforcementFlagForTest()",
    "returnType" : "String",
    "comment" : "\n         * For test only.\n         *\n         * @return The permission enforcement flag.\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static boolean isValidChangeId(long changeId)", "public int getForegroundServiceType()", "public String toString()", "public String toPermissionString()", "private StringBuilder toPermissionString(StringBuilder sb)", "private void updatePermissionEnforcementFlagIfNecessary(@NonNull String flagName)", "public void setCustomPermission(@Nullable ForegroundServiceTypePermission customPermission)", "public Optional<String[]> getRequiredAllOfPermissionsForTest(@NonNull Context context)", "public Optional<String[]> getRequiredAnyOfPermissionsForTest(@NonNull Context context)", "public boolean isTypeDisabled(int callerUid)", "public boolean hasForegroundOnlyPermission()", "public void setTypeDisabledForTest(boolean disabled, @NonNull String packageName) throws RemoteException", "public void clearTypeDisabledForTest(@NonNull String packageName) throws RemoteException", " boolean isTypeDeprecated(int callerUid)", "private void overrideChangeIdForTest(long changeId, boolean enable, String packageName) throws RemoteException", "private void clearOverrideForTest(long changeId, @NonNull String packageName) throws RemoteException", "public String getPermissionEnforcementFlagForTest()" ],
  "variableNames" : [ "mType", "mDeprecationChangeId", "mDisabledChangeId", "mAllOfPermissions", "mAnyOfPermissions", "mPermissionEnforcementFlag", "mPermissionEnforcementFlagDefaultValue", "mForegroundOnlyPermission", "mCustomPermission", "mPermissionEnforcementFlagValue", "INVALID_CHANGE_ID" ]
}