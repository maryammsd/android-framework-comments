{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/telecom/Connection.java",
  "packageName" : "android.telecom",
  "className" : "VideoProvider",
  "comment" : "\n     * Provides a means of controlling the video session associated with a {@link Connection}.\n     * <p>\n     * Implementations create a custom subclass of {@link VideoProvider} and the\n     * {@link ConnectionService} creates an instance sets it on the {@link Connection} using\n     * {@link Connection#setVideoProvider(VideoProvider)}.  Any connection which supports video\n     * should set the {@link VideoProvider}.\n     * <p>\n     * The {@link VideoProvider} serves two primary purposes: it provides a means for Telecom and\n     * {@link InCallService} implementations to issue requests related to the video session;\n     * it provides a means for the {@link ConnectionService} to report events and information\n     * related to the video session to Telecom and the {@link InCallService} implementations.\n     * <p>\n     * {@link InCallService} implementations interact with the {@link VideoProvider} via\n     * {@link android.telecom.InCallService.VideoCall}.\n     ",
  "links" : [ "com.android.internal.telecom.IVideoProvider", "android.telecom.InCallService.VideoCall", "android.telecom.InCallService", "android.telecom.Connection", "android.telecom.ConnectionService", "android.telecom.Connection#setVideoProvider(VideoProvider)" ],
  "variables" : [ {
    "name" : "SESSION_EVENT_RX_PAUSE",
    "type" : "int",
    "comment" : "\n         * Video is not being received (no protocol pause was issued).\n         * @see #handleCallSessionEvent(int)\n         ",
    "links" : [ ]
  }, {
    "name" : "SESSION_EVENT_RX_RESUME",
    "type" : "int",
    "comment" : "\n         * Video reception has resumed after a {@link #SESSION_EVENT_RX_PAUSE}.\n         * @see #handleCallSessionEvent(int)\n         ",
    "links" : [ "#SESSION_EVENT_RX_PAUSE" ]
  }, {
    "name" : "SESSION_EVENT_TX_START",
    "type" : "int",
    "comment" : "\n         * Video transmission has begun. This occurs after a negotiated start of video transmission\n         * when the underlying protocol has actually begun transmitting video to the remote party.\n         * @see #handleCallSessionEvent(int)\n         ",
    "links" : [ ]
  }, {
    "name" : "SESSION_EVENT_TX_STOP",
    "type" : "int",
    "comment" : "\n         * Video transmission has stopped. This occurs after a negotiated stop of video transmission\n         * when the underlying protocol has actually stopped transmitting video to the remote party.\n         * @see #handleCallSessionEvent(int)\n         ",
    "links" : [ ]
  }, {
    "name" : "SESSION_EVENT_CAMERA_FAILURE",
    "type" : "int",
    "comment" : "\n         * A camera failure has occurred for the selected camera.  The {@link VideoProvider} can use\n         * this as a cue to inform the user the camera is not available.\n         * @see #handleCallSessionEvent(int)\n         ",
    "links" : [ "com.android.internal.telecom.IVideoProvider" ]
  }, {
    "name" : "SESSION_EVENT_CAMERA_READY",
    "type" : "int",
    "comment" : "\n         * Issued after {@link #SESSION_EVENT_CAMERA_FAILURE} when the camera is once again ready\n         * for operation.  The {@link VideoProvider} can use this as a cue to inform the user that\n         * the camera has become available again.\n         * @see #handleCallSessionEvent(int)\n         ",
    "links" : [ "com.android.internal.telecom.IVideoProvider", "#SESSION_EVENT_CAMERA_FAILURE" ]
  }, {
    "name" : "SESSION_EVENT_CAMERA_PERMISSION_ERROR",
    "type" : "int",
    "comment" : "\n         * Session event raised by Telecom when\n         * {@link android.telecom.InCallService.VideoCall#setCamera(String)} is called and the\n         * caller does not have the necessary {@link android.Manifest.permission#CAMERA} permission.\n         * @see #handleCallSessionEvent(int)\n         ",
    "links" : [ "android.telecom.InCallService.VideoCall#setCamera(String)", "android.Manifest.permission#CAMERA" ]
  }, {
    "name" : "SESSION_MODIFY_REQUEST_SUCCESS",
    "type" : "int",
    "comment" : "\n         * Session modify request was successful.\n         * @see #receiveSessionModifyResponse(int, VideoProfile, VideoProfile)\n         ",
    "links" : [ ]
  }, {
    "name" : "SESSION_MODIFY_REQUEST_FAIL",
    "type" : "int",
    "comment" : "\n         * Session modify request failed.\n         * @see #receiveSessionModifyResponse(int, VideoProfile, VideoProfile)\n         ",
    "links" : [ ]
  }, {
    "name" : "SESSION_MODIFY_REQUEST_INVALID",
    "type" : "int",
    "comment" : "\n         * Session modify request ignored due to invalid parameters.\n         * @see #receiveSessionModifyResponse(int, VideoProfile, VideoProfile)\n         ",
    "links" : [ ]
  }, {
    "name" : "SESSION_MODIFY_REQUEST_TIMED_OUT",
    "type" : "int",
    "comment" : "\n         * Session modify request timed out.\n         * @see #receiveSessionModifyResponse(int, VideoProfile, VideoProfile)\n         ",
    "links" : [ ]
  }, {
    "name" : "SESSION_MODIFY_REQUEST_REJECTED_BY_REMOTE",
    "type" : "int",
    "comment" : "\n         * Session modify request rejected by remote user.\n         * @see #receiveSessionModifyResponse(int, VideoProfile, VideoProfile)\n         ",
    "links" : [ ]
  }, {
    "name" : "MSG_ADD_VIDEO_CALLBACK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_SET_CAMERA",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_SET_PREVIEW_SURFACE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_SET_DISPLAY_SURFACE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_SET_DEVICE_ORIENTATION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_SET_ZOOM",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_SEND_SESSION_MODIFY_REQUEST",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_SEND_SESSION_MODIFY_RESPONSE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_REQUEST_CAMERA_CAPABILITIES",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_REQUEST_CONNECTION_DATA_USAGE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_SET_PAUSE_IMAGE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_REMOVE_VIDEO_CALLBACK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SESSION_EVENT_RX_PAUSE_STR",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SESSION_EVENT_RX_RESUME_STR",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SESSION_EVENT_TX_START_STR",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SESSION_EVENT_TX_STOP_STR",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SESSION_EVENT_CAMERA_FAILURE_STR",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SESSION_EVENT_CAMERA_READY_STR",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SESSION_EVENT_CAMERA_PERMISSION_ERROR_STR",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SESSION_EVENT_UNKNOWN_STR",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMessageHandler",
    "type" : "VideoProvider.VideoProviderHandler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBinder",
    "type" : "VideoProvider.VideoProviderBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVideoCallbacks",
    "type" : "ConcurrentHashMap<IBinder, IVideoCallback>",
    "comment" : "\n         * Stores a list of the video callbacks, keyed by IBinder.\n         *\n         * ConcurrentHashMap constructor params: 8 is initial table size, 0.9f is\n         * load factor before resizing, 1 means we only expect a single thread to\n         * access the map so make only a single shard\n         ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final IVideoProvider getInterface()",
    "returnType" : "IVideoProvider",
    "comment" : "\n         * Returns binder object which can be used across IPC methods.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public abstract void onSetCamera(String cameraId)",
    "returnType" : "void",
    "comment" : "\n         * Sets the camera to be used for the outgoing video.\n         * <p>\n         * The {@link VideoProvider} should respond by communicating the capabilities of the chosen\n         * camera via\n         * {@link VideoProvider#changeCameraCapabilities(VideoProfile.CameraCapabilities)}.\n         * <p>\n         * Sent from the {@link InCallService} via\n         * {@link InCallService.VideoCall#setCamera(String)}.\n         *\n         * @param cameraId The id of the camera (use ids as reported by\n         * {@link CameraManager#getCameraIdList()}).\n         ",
    "links" : [ "com.android.internal.telecom.IVideoProvider", "android.telecom.InCallService", "InCallService.VideoCall#setCamera(String)", "android.hardware.camera2.CameraManager#getCameraIdList()", "com.android.internal.telecom.IVideoProvider#changeCameraCapabilities(VideoProfile.CameraCapabilities)" ]
  }, {
    "name" : "public void onSetCamera(String cameraId, String callingPackageName, int callingUid, int callingPid, int targetSdkVersion)",
    "returnType" : "void",
    "comment" : "\n         * Sets the camera to be used for the outgoing video.\n         * <p>\n         * The {@link VideoProvider} should respond by communicating the capabilities of the chosen\n         * camera via\n         * {@link VideoProvider#changeCameraCapabilities(VideoProfile.CameraCapabilities)}.\n         * <p>\n         * This prototype is used internally to ensure that the calling package name, UID and PID\n         * are sent to Telecom so that can perform a camera permission check on the caller.\n         * <p>\n         * Sent from the {@link InCallService} via\n         * {@link InCallService.VideoCall#setCamera(String)}.\n         *\n         * @param cameraId The id of the camera (use ids as reported by\n         * {@link CameraManager#getCameraIdList()}).\n         * @param callingPackageName The AppOpps package name of the caller.\n         * @param callingUid The UID of the caller.\n         * @param callingPid The PID of the caller.\n         * @param targetSdkVersion The target SDK version of the caller.\n         * @hide\n         ",
    "links" : [ "com.android.internal.telecom.IVideoProvider", "android.telecom.InCallService", "InCallService.VideoCall#setCamera(String)", "android.hardware.camera2.CameraManager#getCameraIdList()", "com.android.internal.telecom.IVideoProvider#changeCameraCapabilities(VideoProfile.CameraCapabilities)" ]
  }, {
    "name" : "public abstract void onSetPreviewSurface(Surface surface)",
    "returnType" : "void",
    "comment" : "\n         * Sets the surface to be used for displaying a preview of what the user's camera is\n         * currently capturing.  When video transmission is enabled, this is the video signal which\n         * is sent to the remote device.\n         * <p>\n         * Sent from the {@link InCallService} via\n         * {@link InCallService.VideoCall#setPreviewSurface(Surface)}.\n         *\n         * @param surface The {@link Surface}.\n         ",
    "links" : [ "android.telecom.InCallService", "android.view.Surface", "InCallService.VideoCall#setPreviewSurface(Surface)" ]
  }, {
    "name" : "public abstract void onSetDisplaySurface(Surface surface)",
    "returnType" : "void",
    "comment" : "\n         * Sets the surface to be used for displaying the video received from the remote device.\n         * <p>\n         * Sent from the {@link InCallService} via\n         * {@link InCallService.VideoCall#setDisplaySurface(Surface)}.\n         *\n         * @param surface The {@link Surface}.\n         ",
    "links" : [ "android.telecom.InCallService", "android.view.Surface", "InCallService.VideoCall#setDisplaySurface(Surface)" ]
  }, {
    "name" : "public abstract void onSetDeviceOrientation(int rotation)",
    "returnType" : "void",
    "comment" : "\n         * Sets the device orientation, in degrees.  Assumes that a standard portrait orientation of\n         * the device is 0 degrees.\n         * <p>\n         * Sent from the {@link InCallService} via\n         * {@link InCallService.VideoCall#setDeviceOrientation(int)}.\n         *\n         * @param rotation The device orientation, in degrees.\n         ",
    "links" : [ "android.telecom.InCallService", "InCallService.VideoCall#setDeviceOrientation(int)" ]
  }, {
    "name" : "public abstract void onSetZoom(float value)",
    "returnType" : "void",
    "comment" : "\n         * Sets the camera zoom ratio.\n         * <p>\n         * Sent from the {@link InCallService} via {@link InCallService.VideoCall#setZoom(float)}.\n         *\n         * @param value The camera zoom ratio; for the current camera, should be a value in the\n         * range defined by\n         * {@link android.hardware.camera2.CameraCharacteristics#CONTROL_ZOOM_RATIO_RANGE}.\n         ",
    "links" : [ "android.telecom.InCallService", "InCallService.VideoCall#setZoom(float)", "android.hardware.camera2.CameraCharacteristics#CONTROL_ZOOM_RATIO_RANGE" ]
  }, {
    "name" : "public abstract void onSendSessionModifyRequest(VideoProfile fromProfile, VideoProfile toProfile)",
    "returnType" : "void",
    "comment" : "\n         * Issues a request to modify the properties of the current video session.\n         * <p>\n         * Example scenarios include: requesting an audio-only call to be upgraded to a\n         * bi-directional video call, turning on or off the user's camera, sending a pause signal\n         * when the {@link InCallService} is no longer the foreground application.\n         * <p>\n         * If the {@link VideoProvider} determines a request to be invalid, it should call\n         * {@link #receiveSessionModifyResponse(int, VideoProfile, VideoProfile)} to report the\n         * invalid request back to the {@link InCallService}.\n         * <p>\n         * Where a request requires confirmation from the user of the peer device, the\n         * {@link VideoProvider} must communicate the request to the peer device and handle the\n         * user's response.  {@link #receiveSessionModifyResponse(int, VideoProfile, VideoProfile)}\n         * is used to inform the {@link InCallService} of the result of the request.\n         * <p>\n         * Sent from the {@link InCallService} via\n         * {@link InCallService.VideoCall#sendSessionModifyRequest(VideoProfile)}.\n         *\n         * @param fromProfile The video profile prior to the request.\n         * @param toProfile The video profile with the requested changes made.\n         ",
    "links" : [ "com.android.internal.telecom.IVideoProvider", "android.telecom.InCallService", "#receiveSessionModifyResponse(int", "InCallService.VideoCall#sendSessionModifyRequest(VideoProfile)" ]
  }, {
    "name" : "public abstract void onSendSessionModifyResponse(VideoProfile responseProfile)",
    "returnType" : "void",
    "comment" : "\n         * Provides a response to a request to change the current video session properties.\n         * <p>\n         * For example, if the peer requests and upgrade from an audio-only call to a bi-directional\n         * video call, could decline the request and keep the call as audio-only.\n         * In such a scenario, the {@code responseProfile} would have a video state of\n         * {@link VideoProfile#STATE_AUDIO_ONLY}.  If the user had decided to accept the request,\n         * the video state would be {@link VideoProfile#STATE_BIDIRECTIONAL}.\n         * <p>\n         * Sent from the {@link InCallService} via\n         * {@link InCallService.VideoCall#sendSessionModifyResponse(VideoProfile)} in response to\n         * a {@link InCallService.VideoCall.Callback#onSessionModifyRequestReceived(VideoProfile)}\n         * callback.\n         *\n         * @param responseProfile The response video profile.\n         ",
    "links" : [ "InCallService.VideoCall#sendSessionModifyResponse(VideoProfile)", "android.telecom.InCallService", "android.telecom.VideoProfile#STATE_BIDIRECTIONAL", "android.telecom.VideoProfile#STATE_AUDIO_ONLY", "InCallService.VideoCall.Callback#onSessionModifyRequestReceived(VideoProfile)" ]
  }, {
    "name" : "public abstract void onRequestCameraCapabilities()",
    "returnType" : "void",
    "comment" : "\n         * Issues a request to the {@link VideoProvider} to retrieve the camera capabilities.\n         * <p>\n         * The {@link VideoProvider} should respond by communicating the capabilities of the chosen\n         * camera via\n         * {@link VideoProvider#changeCameraCapabilities(VideoProfile.CameraCapabilities)}.\n         * <p>\n         * Sent from the {@link InCallService} via\n         * {@link InCallService.VideoCall#requestCameraCapabilities()}.\n         ",
    "links" : [ "com.android.internal.telecom.IVideoProvider", "android.telecom.InCallService", "InCallService.VideoCall#requestCameraCapabilities()", "com.android.internal.telecom.IVideoProvider#changeCameraCapabilities(VideoProfile.CameraCapabilities)" ]
  }, {
    "name" : "public abstract void onRequestConnectionDataUsage()",
    "returnType" : "void",
    "comment" : "\n         * Issues a request to the {@link VideoProvider} to retrieve the current data usage for the\n         * video component of the current {@link Connection}.\n         * <p>\n         * The {@link VideoProvider} should respond by communicating current data usage, in bytes,\n         * via {@link VideoProvider#setCallDataUsage(long)}.\n         * <p>\n         * Sent from the {@link InCallService} via\n         * {@link InCallService.VideoCall#requestCallDataUsage()}.\n         ",
    "links" : [ "com.android.internal.telecom.IVideoProvider", "android.telecom.InCallService", "InCallService.VideoCall#requestCallDataUsage()", "com.android.internal.telecom.IVideoProvider#setCallDataUsage(long)", "android.telecom.Connection" ]
  }, {
    "name" : "public abstract void onSetPauseImage(Uri uri)",
    "returnType" : "void",
    "comment" : "\n         * Provides the {@link VideoProvider} with the {@link Uri} of an image to be displayed to\n         * the peer device when the video signal is paused.\n         * <p>\n         * Sent from the {@link InCallService} via\n         * {@link InCallService.VideoCall#setPauseImage(Uri)}.\n         *\n         * @param uri URI of image to display.\n         ",
    "links" : [ "com.android.internal.telecom.IVideoProvider", "android.telecom.InCallService", "android.net.Uri", "InCallService.VideoCall#setPauseImage(Uri)" ]
  }, {
    "name" : "public void receiveSessionModifyRequest(VideoProfile videoProfile)",
    "returnType" : "void",
    "comment" : "\n         * Used to inform listening {@link InCallService} implementations when the\n         * {@link VideoProvider} receives a session modification request.\n         * <p>\n         * Received by the {@link InCallService} via\n         * {@link InCallService.VideoCall.Callback#onSessionModifyRequestReceived(VideoProfile)},\n         *\n         * @param videoProfile The requested video profile.\n         * @see #onSendSessionModifyRequest(VideoProfile, VideoProfile)\n         ",
    "links" : [ "com.android.internal.telecom.IVideoProvider", "android.telecom.InCallService", "InCallService.VideoCall.Callback#onSessionModifyRequestReceived(VideoProfile)" ]
  }, {
    "name" : "public void receiveSessionModifyResponse(int status, VideoProfile requestedProfile, VideoProfile responseProfile)",
    "returnType" : "void",
    "comment" : "\n         * Used to inform listening {@link InCallService} implementations when the\n         * {@link VideoProvider} receives a response to a session modification request.\n         * <p>\n         * Received by the {@link InCallService} via\n         * {@link InCallService.VideoCall.Callback#onSessionModifyResponseReceived(int,\n         * VideoProfile, VideoProfile)}.\n         *\n         * @param status Status of the session modify request.  Valid values are\n         *               {@link VideoProvider#SESSION_MODIFY_REQUEST_SUCCESS},\n         *               {@link VideoProvider#SESSION_MODIFY_REQUEST_FAIL},\n         *               {@link VideoProvider#SESSION_MODIFY_REQUEST_INVALID},\n         *               {@link VideoProvider#SESSION_MODIFY_REQUEST_TIMED_OUT},\n         *               {@link VideoProvider#SESSION_MODIFY_REQUEST_REJECTED_BY_REMOTE}\n         * @param requestedProfile The original request which was sent to the peer device.\n         * @param responseProfile The actual profile changes agreed to by the peer device.\n         * @see #onSendSessionModifyRequest(VideoProfile, VideoProfile)\n         ",
    "links" : [ "com.android.internal.telecom.IVideoProvider", "android.telecom.InCallService", "com.android.internal.telecom.IVideoProvider#SESSION_MODIFY_REQUEST_FAIL", "com.android.internal.telecom.IVideoProvider#SESSION_MODIFY_REQUEST_INVALID", "com.android.internal.telecom.IVideoProvider#SESSION_MODIFY_REQUEST_REJECTED_BY_REMOTE", "InCallService.VideoCall.Callback#onSessionModifyResponseReceived(int", "com.android.internal.telecom.IVideoProvider#SESSION_MODIFY_REQUEST_SUCCESS", "com.android.internal.telecom.IVideoProvider#SESSION_MODIFY_REQUEST_TIMED_OUT" ]
  }, {
    "name" : "public void handleCallSessionEvent(int event)",
    "returnType" : "void",
    "comment" : "\n         * Used to inform listening {@link InCallService} implementations when the\n         * {@link VideoProvider} reports a call session event.\n         * <p>\n         * Received by the {@link InCallService} via\n         * {@link InCallService.VideoCall.Callback#onCallSessionEvent(int)}.\n         *\n         * @param event The event.  Valid values are: {@link VideoProvider#SESSION_EVENT_RX_PAUSE},\n         *      {@link VideoProvider#SESSION_EVENT_RX_RESUME},\n         *      {@link VideoProvider#SESSION_EVENT_TX_START},\n         *      {@link VideoProvider#SESSION_EVENT_TX_STOP},\n         *      {@link VideoProvider#SESSION_EVENT_CAMERA_FAILURE},\n         *      {@link VideoProvider#SESSION_EVENT_CAMERA_READY},\n         *      {@link VideoProvider#SESSION_EVENT_CAMERA_FAILURE}.\n         ",
    "links" : [ "com.android.internal.telecom.IVideoProvider", "com.android.internal.telecom.IVideoProvider#SESSION_EVENT_TX_STOP", "android.telecom.InCallService", "com.android.internal.telecom.IVideoProvider#SESSION_EVENT_CAMERA_FAILURE", "com.android.internal.telecom.IVideoProvider#SESSION_EVENT_TX_START", "com.android.internal.telecom.IVideoProvider#SESSION_EVENT_RX_PAUSE", "com.android.internal.telecom.IVideoProvider#SESSION_EVENT_CAMERA_READY", "com.android.internal.telecom.IVideoProvider#SESSION_EVENT_RX_RESUME", "InCallService.VideoCall.Callback#onCallSessionEvent(int)" ]
  }, {
    "name" : "public void changePeerDimensions(int width, int height)",
    "returnType" : "void",
    "comment" : "\n         * Used to inform listening {@link InCallService} implementations when the dimensions of the\n         * peer's video have changed.\n         * <p>\n         * This could occur if, for example, the peer rotates their device, changing the aspect\n         * ratio of the video, or if the user switches between the back and front cameras.\n         * <p>\n         * Received by the {@link InCallService} via\n         * {@link InCallService.VideoCall.Callback#onPeerDimensionsChanged(int, int)}.\n         *\n         * @param width  The updated peer video width.\n         * @param height The updated peer video height.\n         ",
    "links" : [ "InCallService.VideoCall.Callback#onPeerDimensionsChanged(int", "android.telecom.InCallService" ]
  }, {
    "name" : "public void setCallDataUsage(long dataUsage)",
    "returnType" : "void",
    "comment" : "\n         * Used to inform listening {@link InCallService} implementations when the data usage of the\n         * video associated with the current {@link Connection} has changed.\n         * <p>\n         * This could be in response to a preview request via\n         * {@link #onRequestConnectionDataUsage()}, or as a periodic update by the\n         * {@link VideoProvider}.  Where periodic updates of data usage are provided, they should be\n         * provided at most for every 1 MB of data transferred and no more than once every 10 sec.\n         * <p>\n         * Received by the {@link InCallService} via\n         * {@link InCallService.VideoCall.Callback#onCallDataUsageChanged(long)}.\n         *\n         * @param dataUsage The updated data usage (in bytes).  Reported as the cumulative bytes\n         *                  used since the start of the call.\n         ",
    "links" : [ "com.android.internal.telecom.IVideoProvider", "android.telecom.InCallService", "InCallService.VideoCall.Callback#onCallDataUsageChanged(long)", "#onRequestConnectionDataUsage()", "android.telecom.Connection" ]
  }, {
    "name" : "public void changeCallDataUsage(long dataUsage)",
    "returnType" : "void",
    "comment" : "\n         * @see #setCallDataUsage(long)\n         *\n         * @param dataUsage The updated data usage (in byes).\n         * @deprecated - Use {@link #setCallDataUsage(long)} instead.\n         * @hide\n         ",
    "links" : [ "#setCallDataUsage(long)" ]
  }, {
    "name" : "public void changeCameraCapabilities(VideoProfile.CameraCapabilities cameraCapabilities)",
    "returnType" : "void",
    "comment" : "\n         * Used to inform listening {@link InCallService} implementations when the capabilities of\n         * the current camera have changed.\n         * <p>\n         * The {@link VideoProvider} should call this in response to\n         * {@link VideoProvider#onRequestCameraCapabilities()}, or when the current camera is\n         * changed via {@link VideoProvider#onSetCamera(String)}.\n         * <p>\n         * Received by the {@link InCallService} via\n         * {@link InCallService.VideoCall.Callback#onCameraCapabilitiesChanged(\n         * VideoProfile.CameraCapabilities)}.\n         *\n         * @param cameraCapabilities The new camera capabilities.\n         ",
    "links" : [ "com.android.internal.telecom.IVideoProvider", "android.telecom.InCallService", "com.android.internal.telecom.IVideoProvider#onSetCamera(String)", "InCallService.VideoCall.Callback#onCameraCapabilitiesChanged(", "com.android.internal.telecom.IVideoProvider#onRequestCameraCapabilities()" ]
  }, {
    "name" : "public void changeVideoQuality(int videoQuality)",
    "returnType" : "void",
    "comment" : "\n         * Used to inform listening {@link InCallService} implementations when the video quality\n         * of the call has changed.\n         * <p>\n         * Received by the {@link InCallService} via\n         * {@link InCallService.VideoCall.Callback#onVideoQualityChanged(int)}.\n         *\n         * @param videoQuality The updated video quality.  Valid values:\n         *      {@link VideoProfile#QUALITY_HIGH},\n         *      {@link VideoProfile#QUALITY_MEDIUM},\n         *      {@link VideoProfile#QUALITY_LOW},\n         *      {@link VideoProfile#QUALITY_DEFAULT}.\n         ",
    "links" : [ "android.telecom.VideoProfile#QUALITY_MEDIUM", "android.telecom.VideoProfile#QUALITY_DEFAULT", "android.telecom.InCallService", "android.telecom.VideoProfile#QUALITY_LOW", "InCallService.VideoCall.Callback#onVideoQualityChanged(int)", "android.telecom.VideoProfile#QUALITY_HIGH" ]
  }, {
    "name" : "public static String sessionEventToString(int event)",
    "returnType" : "String",
    "comment" : "\n         * Returns a string representation of a call session event.\n         *\n         * @param event A call session event passed to {@link #handleCallSessionEvent(int)}.\n         * @return String representation of the call session event.\n         * @hide\n         ",
    "links" : [ "#handleCallSessionEvent(int)" ]
  } ],
  "methodNames" : [ "public final IVideoProvider getInterface()", "public abstract void onSetCamera(String cameraId)", "public void onSetCamera(String cameraId, String callingPackageName, int callingUid, int callingPid, int targetSdkVersion)", "public abstract void onSetPreviewSurface(Surface surface)", "public abstract void onSetDisplaySurface(Surface surface)", "public abstract void onSetDeviceOrientation(int rotation)", "public abstract void onSetZoom(float value)", "public abstract void onSendSessionModifyRequest(VideoProfile fromProfile, VideoProfile toProfile)", "public abstract void onSendSessionModifyResponse(VideoProfile responseProfile)", "public abstract void onRequestCameraCapabilities()", "public abstract void onRequestConnectionDataUsage()", "public abstract void onSetPauseImage(Uri uri)", "public void receiveSessionModifyRequest(VideoProfile videoProfile)", "public void receiveSessionModifyResponse(int status, VideoProfile requestedProfile, VideoProfile responseProfile)", "public void handleCallSessionEvent(int event)", "public void changePeerDimensions(int width, int height)", "public void setCallDataUsage(long dataUsage)", "public void changeCallDataUsage(long dataUsage)", "public void changeCameraCapabilities(VideoProfile.CameraCapabilities cameraCapabilities)", "public void changeVideoQuality(int videoQuality)", "public static String sessionEventToString(int event)" ],
  "variableNames" : [ "SESSION_EVENT_RX_PAUSE", "SESSION_EVENT_RX_RESUME", "SESSION_EVENT_TX_START", "SESSION_EVENT_TX_STOP", "SESSION_EVENT_CAMERA_FAILURE", "SESSION_EVENT_CAMERA_READY", "SESSION_EVENT_CAMERA_PERMISSION_ERROR", "SESSION_MODIFY_REQUEST_SUCCESS", "SESSION_MODIFY_REQUEST_FAIL", "SESSION_MODIFY_REQUEST_INVALID", "SESSION_MODIFY_REQUEST_TIMED_OUT", "SESSION_MODIFY_REQUEST_REJECTED_BY_REMOTE", "MSG_ADD_VIDEO_CALLBACK", "MSG_SET_CAMERA", "MSG_SET_PREVIEW_SURFACE", "MSG_SET_DISPLAY_SURFACE", "MSG_SET_DEVICE_ORIENTATION", "MSG_SET_ZOOM", "MSG_SEND_SESSION_MODIFY_REQUEST", "MSG_SEND_SESSION_MODIFY_RESPONSE", "MSG_REQUEST_CAMERA_CAPABILITIES", "MSG_REQUEST_CONNECTION_DATA_USAGE", "MSG_SET_PAUSE_IMAGE", "MSG_REMOVE_VIDEO_CALLBACK", "SESSION_EVENT_RX_PAUSE_STR", "SESSION_EVENT_RX_RESUME_STR", "SESSION_EVENT_TX_START_STR", "SESSION_EVENT_TX_STOP_STR", "SESSION_EVENT_CAMERA_FAILURE_STR", "SESSION_EVENT_CAMERA_READY_STR", "SESSION_EVENT_CAMERA_PERMISSION_ERROR_STR", "SESSION_EVENT_UNKNOWN_STR", "mMessageHandler", "mBinder", "mVideoCallbacks" ]
}