{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/text/NFSubstitution.java",
  "packageName" : "android.icu.text",
  "className" : "NumeratorSubstitution",
  "comment" : "\n * A substitution that multiplies the number being formatted (which is\n * between 0 and 1) by the base value of the rule that owns it and\n * formats the result.  It is represented by &lt;&lt; in the rules\n * in a fraction rule set.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "denominator",
    "type" : "double",
    "comment" : "\n     * The denominator of the fraction we're finding the numerator for.\n     * (The base value of the rule that owns this substitution.)\n     ",
    "links" : [ ]
  }, {
    "name" : "withZeros",
    "type" : "boolean",
    "comment" : "\n     * True if we format leading zeros (this is a hack for Hebrew spellout)\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " static String fixdesc(String description)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object that)",
    "returnType" : "boolean",
    "comment" : "\n     * Tests two NumeratorSubstitutions for equality\n     * @param that The other NumeratorSubstitution\n     * @return true if the two objects are functionally equivalent\n     ",
    "links" : [ ]
  }, {
    "name" : "public void doSubstitution(double number, StringBuilder toInsertInto, int position, int recursionCount)",
    "returnType" : "void",
    "comment" : "\n     * Performs a mathematical operation on the number, formats it using\n     * either ruleSet or decimalFormat, and inserts the result into\n     * toInsertInto.\n     * @param number The number being formatted.\n     * @param toInsertInto The string we insert the result into\n     * @param position The position in toInsertInto where the owning rule's\n     * rule text begins (this value is added to this substitution's\n     * position to determine exactly where to insert the new text)\n     ",
    "links" : [ ]
  }, {
    "name" : "public long transformNumber(long number)",
    "returnType" : "long",
    "comment" : "\n     * Returns the number being formatted times the denominator.\n     * @param number The number being formatted\n     * @return number * denominator\n     ",
    "links" : [ ]
  }, {
    "name" : "public double transformNumber(double number)",
    "returnType" : "double",
    "comment" : "\n     * Returns the number being formatted times the denominator.\n     * @param number The number being formatted\n     * @return number * denominator\n     ",
    "links" : [ ]
  }, {
    "name" : "public Number doParse(String text, ParsePosition parsePosition, double baseValue, double upperBound, boolean lenientParse, int nonNumericalExecutedRuleMask)",
    "returnType" : "Number",
    "comment" : "\n     * Dispatches to the inherited version of this function, but makes\n     * sure that lenientParse is off.\n     ",
    "links" : [ ]
  }, {
    "name" : "public double composeRuleValue(double newRuleValue, double oldRuleValue)",
    "returnType" : "double",
    "comment" : "\n     * Divides the result of parsing the substitution by the partial\n     * parse result.\n     * @param newRuleValue The result of parsing the substitution\n     * @param oldRuleValue The owning rule's base value\n     * @return newRuleValue / oldRuleValue\n     ",
    "links" : [ ]
  }, {
    "name" : "public double calcUpperBound(double oldUpperBound)",
    "returnType" : "double",
    "comment" : "\n     * Sets the upper bound down to this rule's base value\n     * @param oldUpperBound Ignored\n     * @return The base value of the rule owning this substitution\n     ",
    "links" : [ ]
  }, {
    "name" : " char tokenChar()",
    "returnType" : "char",
    "comment" : "\n     * The token character for a NumeratorSubstitution is &lt;\n     * @return '&lt;'\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " static String fixdesc(String description)", "public boolean equals(Object that)", "public void doSubstitution(double number, StringBuilder toInsertInto, int position, int recursionCount)", "public long transformNumber(long number)", "public double transformNumber(double number)", "public Number doParse(String text, ParsePosition parsePosition, double baseValue, double upperBound, boolean lenientParse, int nonNumericalExecutedRuleMask)", "public double composeRuleValue(double newRuleValue, double oldRuleValue)", "public double calcUpperBound(double oldUpperBound)", " char tokenChar()" ],
  "variableNames" : [ "denominator", "withZeros" ]
}