{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/ZoneMeta.java",
  "packageName" : "android.icu.impl",
  "className" : "ZoneMeta",
  "comment" : "\n * This class, not to be instantiated, implements the meta-data\n * missing from the underlying core JDK implementation of time zones.\n * There are two missing features: Obtaining a list of available zones\n * for a given country (as defined by the Olson database), and\n * obtaining a list of equivalent zones for a given zone (as defined\n * by Olson links).\n *\n * This class uses a data class, ZoneMetaData, which is created by the\n * tool tz2icu.\n *\n * @author Alan Liu\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "ASSERT",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ZONEINFORESNAME",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "kREGIONS",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "kZONES",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "kNAMES",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "kGMT_ID",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "kCUSTOM_TZ_PREFIX",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "kWorld",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "REF_SYSTEM_ZONES",
    "type" : "SoftReference<Set<String>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "REF_CANONICAL_SYSTEM_ZONES",
    "type" : "SoftReference<Set<String>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "REF_CANONICAL_SYSTEM_LOCATION_ZONES",
    "type" : "SoftReference<Set<String>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ZONEIDS",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CANONICAL_ID_CACHE",
    "type" : "ICUCache<String, String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "REGION_CACHE",
    "type" : "ICUCache<String, String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SINGLE_COUNTRY_CACHE",
    "type" : "ICUCache<String, Boolean>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SYSTEM_ZONE_CACHE",
    "type" : "SystemTimeZoneCache",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "kMAX_CUSTOM_HOUR",
    "type" : "int",
    "comment" : " Maximum value of valid custom time zone hour/min",
    "links" : [ ]
  }, {
    "name" : "kMAX_CUSTOM_MIN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "kMAX_CUSTOM_SEC",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CUSTOM_ZONE_CACHE",
    "type" : "CustomTimeZoneCache",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static synchronized Set<String> getSystemZIDs()",
    "returnType" : "Set<String>",
    "comment" : "\n     * Returns an immutable set of system time zone IDs.\n     * Etc/Unknown is excluded.\n     * @return An immutable set of system time zone IDs.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static synchronized Set<String> getCanonicalSystemZIDs()",
    "returnType" : "Set<String>",
    "comment" : "\n     * Returns an immutable set of canonical system time zone IDs.\n     * The result set is a subset of {@link #getSystemZIDs()}, but not\n     * including aliases, such as \"US/Eastern\".\n     * @return An immutable set of canonical system time zone IDs.\n     ",
    "links" : [ "#getSystemZIDs()" ]
  }, {
    "name" : "private static synchronized Set<String> getCanonicalSystemLocationZIDs()",
    "returnType" : "Set<String>",
    "comment" : "\n     * Returns an immutable set of canonical system time zone IDs that\n     * are associated with actual locations.\n     * The result set is a subset of {@link #getCanonicalSystemZIDs()}, but not\n     * including IDs, such as \"Etc/GTM+5\".\n     * @return An immutable set of canonical system time zone IDs that\n     * are associated with actual locations.\n     ",
    "links" : [ "#getCanonicalSystemZIDs()" ]
  }, {
    "name" : "public static Set<String> getAvailableIDs(SystemTimeZoneType type, String region, Integer rawOffset)",
    "returnType" : "Set<String>",
    "comment" : "\n     * Returns an immutable set of system IDs for the given conditions.\n     * @param type      a system time zone type.\n     * @param region    a region, or null.\n     * @param rawOffset a zone raw offset or null.\n     * @return An immutable set of system IDs for the given conditions.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static synchronized int countEquivalentIDs(String id)",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of IDs in the equivalency group that\n     * includes the given ID.  An equivalency group contains zones\n     * that behave identically to the given zone.\n     *\n     * <p>If there are no equivalent zones, then this method returns\n     * 0.  This means either the given ID is not a valid zone, or it\n     * is and there are no other equivalent zones.\n     * @param id a system time zone ID\n     * @return the number of zones in the equivalency group containing\n     * 'id', or zero if there are no equivalent zones.\n     * @see #getEquivalentID\n     ",
    "links" : [ ]
  }, {
    "name" : "public static synchronized String getEquivalentID(String id, int index)",
    "returnType" : "String",
    "comment" : "\n     * Returns an ID in the equivalency group that includes the given\n     * ID.  An equivalency group contains zones that behave\n     * identically to the given zone.\n     *\n     * <p>The given index must be in the range 0..n-1, where n is the\n     * value returned by <code>countEquivalentIDs(id)</code>.  For\n     * some value of 'index', the returned value will be equal to the\n     * given id.  If the given id is not a valid system time zone, or\n     * if 'index' is out of range, then returns an empty string.\n     * @param id a system time zone ID\n     * @param index a value from 0 to n-1, where n is the value\n     * returned by <code>countEquivalentIDs(id)</code>\n     * @return the ID of the index-th zone in the equivalency group\n     * containing 'id', or an empty string if 'id' is not a valid\n     * system ID or 'index' is out of range\n     * @see #countEquivalentIDs\n     ",
    "links" : [ ]
  }, {
    "name" : "private static synchronized String[] getZoneIDs()",
    "returnType" : "String[]",
    "comment" : "\n     * ICU frequently refers the zone ID array in zoneinfo resource\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String getZoneID(int idx)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int getZoneIndex(String zid)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String getCanonicalCLDRID(TimeZone tz)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String getCanonicalCLDRID(String tzid)",
    "returnType" : "String",
    "comment" : "\n     * Return the canonical id for this tzid defined by CLDR, which might be\n     * the id itself. If the given tzid is not known, return null.\n     *\n     * Note: This internal API supports all known system IDs and \"Etc/Unknown\" (which is\n     * NOT a system ID).\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String findCLDRCanonicalID(String tzid)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String getIanaID(String tzid)",
    "returnType" : "String",
    "comment" : "\n     * Returns primary IANA zone ID for the input zone ID. When input zone ID\n     * is not known, this method returns null.\n     *\n     * @param tzid  An input zone ID.\n     * @return  A primary IANA zone ID equivalent to the input zone ID.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getRegion(String tzid)",
    "returnType" : "String",
    "comment" : "\n     * Return the region code for this tzid.\n     * If tzid is not a system zone ID, this method returns null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getCanonicalCountry(String tzid)",
    "returnType" : "String",
    "comment" : "\n     * Return the canonical country code for this tzid.  If we have none, or if the time zone\n     * is not associated with a country or unknown, return null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getCanonicalCountry(String tzid, Output<Boolean> isPrimary)",
    "returnType" : "String",
    "comment" : "\n     * Return the canonical country code for this tzid.  If we have none, or if the time zone\n     * is not associated with a country or unknown, return null. When the given zone is the\n     * primary zone of the country, true is set to isPrimary.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static UResourceBundle openOlsonResource(UResourceBundle top, String id)",
    "returnType" : "UResourceBundle",
    "comment" : "\n     * Given an ID and the top-level resource of the zoneinfo resource,\n     * open the appropriate resource for the given time zone.\n     * Dereference links if necessary.\n     * @param top the top level resource of the zoneinfo resource or null.\n     * @param id zone id\n     * @return the corresponding zone resource or null if not found\n     ",
    "links" : [ ]
  }, {
    "name" : "public static OlsonTimeZone getSystemTimeZone(String id)",
    "returnType" : "OlsonTimeZone",
    "comment" : "\n     * Returns a frozen OlsonTimeZone instance for the given ID.\n     * This method returns null when the given ID is unknown.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static SimpleTimeZone getCustomTimeZone(String id)",
    "returnType" : "SimpleTimeZone",
    "comment" : "\n     * Parse a custom time zone identifier and return a corresponding zone.\n     * @param id a string of the form GMT[+-]hh:mm, GMT[+-]hhmm, or\n     * GMT[+-]hh.\n     * @return a frozen SimpleTimeZone with the given offset and\n     * no Daylight Savings Time, or null if the id cannot be parsed.\n    ",
    "links" : [ ]
  }, {
    "name" : "public static String getCustomID(String id)",
    "returnType" : "String",
    "comment" : "\n     * Parse a custom time zone identifier and return the normalized\n     * custom time zone identifier for the given custom id string.\n     * @param id a string of the form GMT[+-]hh:mm, GMT[+-]hhmm, or\n     * GMT[+-]hh.\n     * @return The normalized custom id string.\n    ",
    "links" : [ ]
  }, {
    "name" : " static boolean parseCustomID(String id, int[] fields)",
    "returnType" : "boolean",
    "comment" : "\n     * Parses the given custom time zone identifier\n     * @param id id A string of the form GMT[+-]hh:mm, GMT[+-]hhmm, or\n     * GMT[+-]hh.\n     * @param fields An array of int (length = 4) to receive the parsed\n     * offset time fields.  The sign is set to fields[0] (-1 or 1),\n     * hour is set to fields[1], minute is set to fields[2] and second is\n     * set to fields[3].\n     * @return Returns true when the given custom id is valid.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static SimpleTimeZone getCustomTimeZone(int offset)",
    "returnType" : "SimpleTimeZone",
    "comment" : "\n     * Creates a custom zone for the offset\n     * @param offset GMT offset in milliseconds\n     * @return A custom TimeZone for the offset with normalized time zone id\n     ",
    "links" : [ ]
  }, {
    "name" : " static String formatCustomID(int hour, int min, int sec, boolean negative)",
    "returnType" : "String",
    "comment" : "\n     * Returns the normalized custom TimeZone ID\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getShortID(TimeZone tz)",
    "returnType" : "String",
    "comment" : "\n     * Returns the time zone's short ID for the zone.\n     * For example, \"uslax\" for zone \"America/Los_Angeles\".\n     * @param tz the time zone\n     * @return the short ID of the time zone, or null if the short ID is not available.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getShortID(String id)",
    "returnType" : "String",
    "comment" : "\n     * Returns the time zone's short ID for the zone ID.\n     * For example, \"uslax\" for zone ID \"America/Los_Angeles\".\n     * @param id the time zone ID\n     * @return the short ID of the time zone ID, or null if the short ID is not available.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String getShortIDFromCanonical(String canonicalID)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static synchronized Set<String> getSystemZIDs()", "private static synchronized Set<String> getCanonicalSystemZIDs()", "private static synchronized Set<String> getCanonicalSystemLocationZIDs()", "public static Set<String> getAvailableIDs(SystemTimeZoneType type, String region, Integer rawOffset)", "public static synchronized int countEquivalentIDs(String id)", "public static synchronized String getEquivalentID(String id, int index)", "private static synchronized String[] getZoneIDs()", "private static String getZoneID(int idx)", "private static int getZoneIndex(String zid)", "public static String getCanonicalCLDRID(TimeZone tz)", "public static String getCanonicalCLDRID(String tzid)", "private static String findCLDRCanonicalID(String tzid)", "public static String getIanaID(String tzid)", "public static String getRegion(String tzid)", "public static String getCanonicalCountry(String tzid)", "public static String getCanonicalCountry(String tzid, Output<Boolean> isPrimary)", "public static UResourceBundle openOlsonResource(UResourceBundle top, String id)", "public static OlsonTimeZone getSystemTimeZone(String id)", "public static SimpleTimeZone getCustomTimeZone(String id)", "public static String getCustomID(String id)", " static boolean parseCustomID(String id, int[] fields)", "public static SimpleTimeZone getCustomTimeZone(int offset)", " static String formatCustomID(int hour, int min, int sec, boolean negative)", "public static String getShortID(TimeZone tz)", "public static String getShortID(String id)", "private static String getShortIDFromCanonical(String canonicalID)" ],
  "variableNames" : [ "ASSERT", "ZONEINFORESNAME", "kREGIONS", "kZONES", "kNAMES", "kGMT_ID", "kCUSTOM_TZ_PREFIX", "kWorld", "REF_SYSTEM_ZONES", "REF_CANONICAL_SYSTEM_ZONES", "REF_CANONICAL_SYSTEM_LOCATION_ZONES", "ZONEIDS", "CANONICAL_ID_CACHE", "REGION_CACHE", "SINGLE_COUNTRY_CACHE", "SYSTEM_ZONE_CACHE", "kMAX_CUSTOM_HOUR", "kMAX_CUSTOM_MIN", "kMAX_CUSTOM_SEC", "CUSTOM_ZONE_CACHE" ]
}