{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/util/apk/WrappedX509Certificate.java",
  "packageName" : "android.util.apk",
  "className" : "WrappedX509Certificate",
  "comment" : "",
  "variables" : [ {
    "name" : "mWrapped",
    "type" : "X509Certificate",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Set<String> getCriticalExtensionOIDs()",
    "returnType" : "Set<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public byte[] getExtensionValue(String oid)",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Set<String> getNonCriticalExtensionOIDs()",
    "returnType" : "Set<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasUnsupportedCriticalExtension()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void checkValidity() throws CertificateExpiredException, CertificateNotYetValidException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void checkValidity(Date date) throws CertificateExpiredException, CertificateNotYetValidException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getVersion()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public BigInteger getSerialNumber()",
    "returnType" : "BigInteger",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Principal getIssuerDN()",
    "returnType" : "Principal",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Principal getSubjectDN()",
    "returnType" : "Principal",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Date getNotBefore()",
    "returnType" : "Date",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Date getNotAfter()",
    "returnType" : "Date",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public byte[] getTBSCertificate() throws CertificateEncodingException",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public byte[] getSignature()",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getSigAlgName()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getSigAlgOID()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public byte[] getSigAlgParams()",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean[] getIssuerUniqueID()",
    "returnType" : "boolean[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean[] getSubjectUniqueID()",
    "returnType" : "boolean[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean[] getKeyUsage()",
    "returnType" : "boolean[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getBasicConstraints()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public byte[] getEncoded() throws CertificateEncodingException",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void verify(PublicKey key) throws CertificateException, NoSuchAlgorithmException, InvalidKeyException, NoSuchProviderException, SignatureException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void verify(PublicKey key, String sigProvider) throws CertificateException, NoSuchAlgorithmException, InvalidKeyException, NoSuchProviderException, SignatureException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public PublicKey getPublicKey()",
    "returnType" : "PublicKey",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "mWrapped" ],
  "methodNames" : [ "public Set<String> getCriticalExtensionOIDs()", "public byte[] getExtensionValue(String oid)", "public Set<String> getNonCriticalExtensionOIDs()", "public boolean hasUnsupportedCriticalExtension()", "public void checkValidity() throws CertificateExpiredException, CertificateNotYetValidException", "public void checkValidity(Date date) throws CertificateExpiredException, CertificateNotYetValidException", "public int getVersion()", "public BigInteger getSerialNumber()", "public Principal getIssuerDN()", "public Principal getSubjectDN()", "public Date getNotBefore()", "public Date getNotAfter()", "public byte[] getTBSCertificate() throws CertificateEncodingException", "public byte[] getSignature()", "public String getSigAlgName()", "public String getSigAlgOID()", "public byte[] getSigAlgParams()", "public boolean[] getIssuerUniqueID()", "public boolean[] getSubjectUniqueID()", "public boolean[] getKeyUsage()", "public int getBasicConstraints()", "public byte[] getEncoded() throws CertificateEncodingException", "public void verify(PublicKey key) throws CertificateException, NoSuchAlgorithmException, InvalidKeyException, NoSuchProviderException, SignatureException", "public void verify(PublicKey key, String sigProvider) throws CertificateException, NoSuchAlgorithmException, InvalidKeyException, NoSuchProviderException, SignatureException", "public String toString()", "public PublicKey getPublicKey()" ]
}