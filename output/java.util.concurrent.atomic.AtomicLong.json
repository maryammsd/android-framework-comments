{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/concurrent/atomic/AtomicLong.java",
  "packageName" : "java.util.concurrent.atomic",
  "className" : "AtomicLong",
  "comment" : "\n * A {@code long} value that may be updated atomically.  See the\n * {@link VarHandle} specification for descriptions of the properties\n * of atomic accesses. An {@code AtomicLong} is used in applications\n * such as atomically incremented sequence numbers, and cannot be used\n * as a replacement for a {@link java.lang.Long}. However, this class\n * does extend {@code Number} to allow uniform access by tools and\n * utilities that deal with numerically-based classes.\n *\n * @since 1.5\n * @author Doug Lea\n ",
  "links" : [ "java.lang.invoke.VarHandle", "java.lang.Long" ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VM_SUPPORTS_LONG_CAS",
    "type" : "boolean",
    "comment" : "\n     * Records whether the underlying JVM supports lockless\n     * compareAndSet for longs. While the intrinsic compareAndSetLong\n     * method works in either case, some constructions should be\n     * handled at Java level to avoid locking user-visible locks.\n     ",
    "links" : [ ]
  }, {
    "name" : "VALUE",
    "type" : "VarHandle",
    "comment" : "     = U.objectFieldOffset(AtomicLong.class, \"value\");",
    "links" : [ ]
  }, {
    "name" : "value",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static native boolean VMSupportsCS8()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether underlying JVM supports lockless CompareAndSet\n     * for longs. Called only once and cached in VM_SUPPORTS_LONG_CAS.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final long get()",
    "returnType" : "long",
    "comment" : "\n     * Returns the current value,\n     * with memory effects as specified by {@link VarHandle#getVolatile}.\n     *\n     * @return the current value\n     ",
    "links" : [ "java.lang.invoke.VarHandle#getVolatile" ]
  }, {
    "name" : "public final void set(long newValue)",
    "returnType" : "void",
    "comment" : "\n     * Sets the value to {@code newValue},\n     * with memory effects as specified by {@link VarHandle#setVolatile}.\n     *\n     * @param newValue the new value\n     ",
    "links" : [ "java.lang.invoke.VarHandle#setVolatile" ]
  }, {
    "name" : "public final void lazySet(long newValue)",
    "returnType" : "void",
    "comment" : "\n     * Sets the value to {@code newValue},\n     * with memory effects as specified by {@link VarHandle#setRelease}.\n     *\n     * @param newValue the new value\n     * @since 1.6\n     ",
    "links" : [ "java.lang.invoke.VarHandle#setRelease" ]
  }, {
    "name" : "public final long getAndSet(long newValue)",
    "returnType" : "long",
    "comment" : "\n     * Atomically sets the value to {@code newValue} and returns the old value,\n     * with memory effects as specified by {@link VarHandle#getAndSet}.\n     *\n     * @param newValue the new value\n     * @return the previous value\n     ",
    "links" : [ "java.lang.invoke.VarHandle#getAndSet" ]
  }, {
    "name" : "public final boolean compareAndSet(long expectedValue, long newValue)",
    "returnType" : "boolean",
    "comment" : "\n     * Atomically sets the value to {@code newValue}\n     * if the current value {@code == expectedValue},\n     * with memory effects as specified by {@link VarHandle#compareAndSet}.\n     *\n     * @param expectedValue the expected value\n     * @param newValue the new value\n     * @return {@code true} if successful. False return indicates that\n     * the actual value was not equal to the expected value.\n     ",
    "links" : [ "java.lang.invoke.VarHandle#compareAndSet" ]
  }, {
    "name" : "public final boolean weakCompareAndSet(long expectedValue, long newValue)",
    "returnType" : "boolean",
    "comment" : "\n     * Possibly atomically sets the value to {@code newValue}\n     * if the current value {@code == expectedValue},\n     * with memory effects as specified by {@link VarHandle#weakCompareAndSetPlain}.\n     *\n     * @deprecated This method has plain memory effects but the method\n     * name implies volatile memory effects (see methods such as\n     * {@link #compareAndExchange} and {@link #compareAndSet}).  To avoid\n     * confusion over plain or volatile memory effects it is recommended that\n     * the method {@link #weakCompareAndSetPlain} be used instead.\n     *\n     * @param expectedValue the expected value\n     * @param newValue the new value\n     * @return {@code true} if successful\n     * @see #weakCompareAndSetPlain\n     ",
    "links" : [ "java.lang.invoke.VarHandle#weakCompareAndSetPlain", "#compareAndExchange", "#compareAndSet", "#weakCompareAndSetPlain" ]
  }, {
    "name" : "public final boolean weakCompareAndSetPlain(long expectedValue, long newValue)",
    "returnType" : "boolean",
    "comment" : "\n     * Possibly atomically sets the value to {@code newValue}\n     * if the current value {@code == expectedValue},\n     * with memory effects as specified by {@link VarHandle#weakCompareAndSetPlain}.\n     *\n     * @param expectedValue the expected value\n     * @param newValue the new value\n     * @return {@code true} if successful\n     * @since 9\n     ",
    "links" : [ "java.lang.invoke.VarHandle#weakCompareAndSetPlain" ]
  }, {
    "name" : "public final long getAndIncrement()",
    "returnType" : "long",
    "comment" : "\n     * Atomically increments the current value,\n     * with memory effects as specified by {@link VarHandle#getAndAdd}.\n     *\n     * <p>Equivalent to {@code getAndAdd(1)}.\n     *\n     * @return the previous value\n     ",
    "links" : [ "java.lang.invoke.VarHandle#getAndAdd" ]
  }, {
    "name" : "public final long getAndDecrement()",
    "returnType" : "long",
    "comment" : "\n     * Atomically decrements the current value,\n     * with memory effects as specified by {@link VarHandle#getAndAdd}.\n     *\n     * <p>Equivalent to {@code getAndAdd(-1)}.\n     *\n     * @return the previous value\n     ",
    "links" : [ "java.lang.invoke.VarHandle#getAndAdd" ]
  }, {
    "name" : "public final long getAndAdd(long delta)",
    "returnType" : "long",
    "comment" : "\n     * Atomically adds the given value to the current value,\n     * with memory effects as specified by {@link VarHandle#getAndAdd}.\n     *\n     * @param delta the value to add\n     * @return the previous value\n     ",
    "links" : [ "java.lang.invoke.VarHandle#getAndAdd" ]
  }, {
    "name" : "public final long incrementAndGet()",
    "returnType" : "long",
    "comment" : "\n     * Atomically increments the current value,\n     * with memory effects as specified by {@link VarHandle#getAndAdd}.\n     *\n     * <p>Equivalent to {@code addAndGet(1)}.\n     *\n     * @return the updated value\n     ",
    "links" : [ "java.lang.invoke.VarHandle#getAndAdd" ]
  }, {
    "name" : "public final long decrementAndGet()",
    "returnType" : "long",
    "comment" : "\n     * Atomically decrements the current value,\n     * with memory effects as specified by {@link VarHandle#getAndAdd}.\n     *\n     * <p>Equivalent to {@code addAndGet(-1)}.\n     *\n     * @return the updated value\n     ",
    "links" : [ "java.lang.invoke.VarHandle#getAndAdd" ]
  }, {
    "name" : "public final long addAndGet(long delta)",
    "returnType" : "long",
    "comment" : "\n     * Atomically adds the given value to the current value,\n     * with memory effects as specified by {@link VarHandle#getAndAdd}.\n     *\n     * @param delta the value to add\n     * @return the updated value\n     ",
    "links" : [ "java.lang.invoke.VarHandle#getAndAdd" ]
  }, {
    "name" : "public final long getAndUpdate(LongUnaryOperator updateFunction)",
    "returnType" : "long",
    "comment" : "\n     * Atomically updates (with memory effects as specified by {@link\n     * VarHandle#compareAndSet}) the current value with the results of\n     * applying the given function, returning the previous value. The\n     * function should be side-effect-free, since it may be re-applied\n     * when attempted updates fail due to contention among threads.\n     *\n     * @param updateFunction a side-effect-free function\n     * @return the previous value\n     * @since 1.8\n     ",
    "links" : [ "java.lang.invoke.VarHandle#compareAndSet" ]
  }, {
    "name" : "public final long updateAndGet(LongUnaryOperator updateFunction)",
    "returnType" : "long",
    "comment" : "\n     * Atomically updates (with memory effects as specified by {@link\n     * VarHandle#compareAndSet}) the current value with the results of\n     * applying the given function, returning the updated value. The\n     * function should be side-effect-free, since it may be re-applied\n     * when attempted updates fail due to contention among threads.\n     *\n     * @param updateFunction a side-effect-free function\n     * @return the updated value\n     * @since 1.8\n     ",
    "links" : [ "java.lang.invoke.VarHandle#compareAndSet" ]
  }, {
    "name" : "public final long getAndAccumulate(long x, LongBinaryOperator accumulatorFunction)",
    "returnType" : "long",
    "comment" : "\n     * Atomically updates (with memory effects as specified by {@link\n     * VarHandle#compareAndSet}) the current value with the results of\n     * applying the given function to the current and given values,\n     * returning the previous value. The function should be\n     * side-effect-free, since it may be re-applied when attempted\n     * updates fail due to contention among threads.  The function is\n     * applied with the current value as its first argument, and the\n     * given update as the second argument.\n     *\n     * @param x the update value\n     * @param accumulatorFunction a side-effect-free function of two arguments\n     * @return the previous value\n     * @since 1.8\n     ",
    "links" : [ "java.lang.invoke.VarHandle#compareAndSet" ]
  }, {
    "name" : "public final long accumulateAndGet(long x, LongBinaryOperator accumulatorFunction)",
    "returnType" : "long",
    "comment" : "\n     * Atomically updates (with memory effects as specified by {@link\n     * VarHandle#compareAndSet}) the current value with the results of\n     * applying the given function to the current and given values,\n     * returning the updated value. The function should be\n     * side-effect-free, since it may be re-applied when attempted\n     * updates fail due to contention among threads.  The function is\n     * applied with the current value as its first argument, and the\n     * given update as the second argument.\n     *\n     * @param x the update value\n     * @param accumulatorFunction a side-effect-free function of two arguments\n     * @return the updated value\n     * @since 1.8\n     ",
    "links" : [ "java.lang.invoke.VarHandle#compareAndSet" ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns the String representation of the current value.\n     * @return the String representation of the current value\n     ",
    "links" : [ ]
  }, {
    "name" : "public int intValue()",
    "returnType" : "int",
    "comment" : "\n     * Returns the current value of this {@code AtomicLong} as an {@code int}\n     * after a narrowing primitive conversion,\n     * with memory effects as specified by {@link VarHandle#getVolatile}.\n     * @jls 5.1.3 Narrowing Primitive Conversion\n     ",
    "links" : [ "java.lang.invoke.VarHandle#getVolatile" ]
  }, {
    "name" : "public long longValue()",
    "returnType" : "long",
    "comment" : "\n     * Returns the current value of this {@code AtomicLong} as a {@code long},\n     * with memory effects as specified by {@link VarHandle#getVolatile}.\n     * Equivalent to {@link #get()}.\n     ",
    "links" : [ "#get()", "java.lang.invoke.VarHandle#getVolatile" ]
  }, {
    "name" : "public float floatValue()",
    "returnType" : "float",
    "comment" : "\n     * Returns the current value of this {@code AtomicLong} as a {@code float}\n     * after a widening primitive conversion,\n     * with memory effects as specified by {@link VarHandle#getVolatile}.\n     * @jls 5.1.2 Widening Primitive Conversion\n     ",
    "links" : [ "java.lang.invoke.VarHandle#getVolatile" ]
  }, {
    "name" : "public double doubleValue()",
    "returnType" : "double",
    "comment" : "\n     * Returns the current value of this {@code AtomicLong} as a {@code double}\n     * after a widening primitive conversion,\n     * with memory effects as specified by {@link VarHandle#getVolatile}.\n     * @jls 5.1.2 Widening Primitive Conversion\n     ",
    "links" : [ "java.lang.invoke.VarHandle#getVolatile" ]
  }, {
    "name" : "public final long getPlain()",
    "returnType" : "long",
    "comment" : "\n     * Returns the current value, with memory semantics of reading as if the\n     * variable was declared non-{@code volatile}.\n     *\n     * @return the value\n     * @since 9\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void setPlain(long newValue)",
    "returnType" : "void",
    "comment" : "\n     * Sets the value to {@code newValue}, with memory semantics\n     * of setting as if the variable was declared non-{@code volatile}\n     * and non-{@code final}.\n     *\n     * @param newValue the new value\n     * @since 9\n     ",
    "links" : [ ]
  }, {
    "name" : "public final long getOpaque()",
    "returnType" : "long",
    "comment" : "\n     * Returns the current value,\n     * with memory effects as specified by {@link VarHandle#getOpaque}.\n     *\n     * @return the value\n     * @since 9\n     ",
    "links" : [ "java.lang.invoke.VarHandle#getOpaque" ]
  }, {
    "name" : "public final void setOpaque(long newValue)",
    "returnType" : "void",
    "comment" : "\n     * Sets the value to {@code newValue},\n     * with memory effects as specified by {@link VarHandle#setOpaque}.\n     *\n     * @param newValue the new value\n     * @since 9\n     ",
    "links" : [ "java.lang.invoke.VarHandle#setOpaque" ]
  }, {
    "name" : "public final long getAcquire()",
    "returnType" : "long",
    "comment" : "\n     * Returns the current value,\n     * with memory effects as specified by {@link VarHandle#getAcquire}.\n     *\n     * @return the value\n     * @since 9\n     ",
    "links" : [ "java.lang.invoke.VarHandle#getAcquire" ]
  }, {
    "name" : "public final void setRelease(long newValue)",
    "returnType" : "void",
    "comment" : "\n     * Sets the value to {@code newValue},\n     * with memory effects as specified by {@link VarHandle#setRelease}.\n     *\n     * @param newValue the new value\n     * @since 9\n     ",
    "links" : [ "java.lang.invoke.VarHandle#setRelease" ]
  }, {
    "name" : "public final long compareAndExchange(long expectedValue, long newValue)",
    "returnType" : "long",
    "comment" : "\n     * Atomically sets the value to {@code newValue} if the current value,\n     * referred to as the <em>witness value</em>, {@code == expectedValue},\n     * with memory effects as specified by\n     * {@link VarHandle#compareAndExchange}.\n     *\n     * @param expectedValue the expected value\n     * @param newValue the new value\n     * @return the witness value, which will be the same as the\n     * expected value if successful\n     * @since 9\n     ",
    "links" : [ "java.lang.invoke.VarHandle#compareAndExchange" ]
  }, {
    "name" : "public final long compareAndExchangeAcquire(long expectedValue, long newValue)",
    "returnType" : "long",
    "comment" : "\n     * Atomically sets the value to {@code newValue} if the current value,\n     * referred to as the <em>witness value</em>, {@code == expectedValue},\n     * with memory effects as specified by\n     * {@link VarHandle#compareAndExchangeAcquire}.\n     *\n     * @param expectedValue the expected value\n     * @param newValue the new value\n     * @return the witness value, which will be the same as the\n     * expected value if successful\n     * @since 9\n     ",
    "links" : [ "java.lang.invoke.VarHandle#compareAndExchangeAcquire" ]
  }, {
    "name" : "public final long compareAndExchangeRelease(long expectedValue, long newValue)",
    "returnType" : "long",
    "comment" : "\n     * Atomically sets the value to {@code newValue} if the current value,\n     * referred to as the <em>witness value</em>, {@code == expectedValue},\n     * with memory effects as specified by\n     * {@link VarHandle#compareAndExchangeRelease}.\n     *\n     * @param expectedValue the expected value\n     * @param newValue the new value\n     * @return the witness value, which will be the same as the\n     * expected value if successful\n     * @since 9\n     ",
    "links" : [ "java.lang.invoke.VarHandle#compareAndExchangeRelease" ]
  }, {
    "name" : "public final boolean weakCompareAndSetVolatile(long expectedValue, long newValue)",
    "returnType" : "boolean",
    "comment" : "\n     * Possibly atomically sets the value to {@code newValue}\n     * if the current value {@code == expectedValue},\n     * with memory effects as specified by\n     * {@link VarHandle#weakCompareAndSet}.\n     *\n     * @param expectedValue the expected value\n     * @param newValue the new value\n     * @return {@code true} if successful\n     * @since 9\n     ",
    "links" : [ "java.lang.invoke.VarHandle#weakCompareAndSet" ]
  }, {
    "name" : "public final boolean weakCompareAndSetAcquire(long expectedValue, long newValue)",
    "returnType" : "boolean",
    "comment" : "\n     * Possibly atomically sets the value to {@code newValue}\n     * if the current value {@code == expectedValue},\n     * with memory effects as specified by\n     * {@link VarHandle#weakCompareAndSetAcquire}.\n     *\n     * @param expectedValue the expected value\n     * @param newValue the new value\n     * @return {@code true} if successful\n     * @since 9\n     ",
    "links" : [ "java.lang.invoke.VarHandle#weakCompareAndSetAcquire" ]
  }, {
    "name" : "public final boolean weakCompareAndSetRelease(long expectedValue, long newValue)",
    "returnType" : "boolean",
    "comment" : "\n     * Possibly atomically sets the value to {@code newValue}\n     * if the current value {@code == expectedValue},\n     * with memory effects as specified by\n     * {@link VarHandle#weakCompareAndSetRelease}.\n     *\n     * @param expectedValue the expected value\n     * @param newValue the new value\n     * @return {@code true} if successful\n     * @since 9\n     ",
    "links" : [ "java.lang.invoke.VarHandle#weakCompareAndSetRelease" ]
  } ],
  "methodNames" : [ "private static native boolean VMSupportsCS8()", "public final long get()", "public final void set(long newValue)", "public final void lazySet(long newValue)", "public final long getAndSet(long newValue)", "public final boolean compareAndSet(long expectedValue, long newValue)", "public final boolean weakCompareAndSet(long expectedValue, long newValue)", "public final boolean weakCompareAndSetPlain(long expectedValue, long newValue)", "public final long getAndIncrement()", "public final long getAndDecrement()", "public final long getAndAdd(long delta)", "public final long incrementAndGet()", "public final long decrementAndGet()", "public final long addAndGet(long delta)", "public final long getAndUpdate(LongUnaryOperator updateFunction)", "public final long updateAndGet(LongUnaryOperator updateFunction)", "public final long getAndAccumulate(long x, LongBinaryOperator accumulatorFunction)", "public final long accumulateAndGet(long x, LongBinaryOperator accumulatorFunction)", "public String toString()", "public int intValue()", "public long longValue()", "public float floatValue()", "public double doubleValue()", "public final long getPlain()", "public final void setPlain(long newValue)", "public final long getOpaque()", "public final void setOpaque(long newValue)", "public final long getAcquire()", "public final void setRelease(long newValue)", "public final long compareAndExchange(long expectedValue, long newValue)", "public final long compareAndExchangeAcquire(long expectedValue, long newValue)", "public final long compareAndExchangeRelease(long expectedValue, long newValue)", "public final boolean weakCompareAndSetVolatile(long expectedValue, long newValue)", "public final boolean weakCompareAndSetAcquire(long expectedValue, long newValue)", "public final boolean weakCompareAndSetRelease(long expectedValue, long newValue)" ],
  "variableNames" : [ "serialVersionUID", "VM_SUPPORTS_LONG_CAS", "VALUE", "value" ]
}