{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/transition/Transition.java",
  "packageName" : "android.transition",
  "className" : "TransitionListener",
  "comment" : "\n     * A transition listener receives notifications from a transition.\n     * Notifications indicate transition lifecycle events.\n     ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " void onTransitionStart(Transition transition)",
    "returnType" : "void",
    "comment" : "\n         * Notification about the start of the transition.\n         *\n         * @param transition The started transition.\n         ",
    "links" : [ ]
  }, {
    "name" : " void onTransitionEnd(Transition transition)",
    "returnType" : "void",
    "comment" : "\n         * Notification about the end of the transition. Canceled transitions\n         * will always notify listeners of both the cancellation and end\n         * events. That is, {@link #onTransitionEnd(Transition)} is always called,\n         * regardless of whether the transition was canceled or played\n         * through to completion.\n         *\n         * @param transition The transition which reached its end.\n         ",
    "links" : [ "#onTransitionEnd(Transition)" ]
  }, {
    "name" : " void onTransitionCancel(Transition transition)",
    "returnType" : "void",
    "comment" : "\n         * Notification about the cancellation of the transition.\n         * Note that cancel may be called by a parent {@link TransitionSet} on\n         * a child transition which has not yet started. This allows the child\n         * transition to restore state on target objects which was set at\n         * {@link #createAnimator(android.view.ViewGroup, TransitionValues, TransitionValues)\n         * createAnimator()} time.\n         *\n         * @param transition The transition which was canceled.\n         ",
    "links" : [ "#createAnimator(android.view.ViewGroup", "android.transition.TransitionSet" ]
  }, {
    "name" : " void onTransitionPause(Transition transition)",
    "returnType" : "void",
    "comment" : "\n         * Notification when a transition is paused.\n         * Note that createAnimator() may be called by a parent {@link TransitionSet} on\n         * a child transition which has not yet started. This allows the child\n         * transition to restore state on target objects which was set at\n         * {@link #createAnimator(android.view.ViewGroup, TransitionValues, TransitionValues)\n         * createAnimator()} time.\n         *\n         * @param transition The transition which was paused.\n         ",
    "links" : [ "#createAnimator(android.view.ViewGroup", "android.transition.TransitionSet" ]
  }, {
    "name" : " void onTransitionResume(Transition transition)",
    "returnType" : "void",
    "comment" : "\n         * Notification when a transition is resumed.\n         * Note that resume() may be called by a parent {@link TransitionSet} on\n         * a child transition which has not yet started. This allows the child\n         * transition to restore state which may have changed in an earlier call\n         * to {@link #onTransitionPause(Transition)}.\n         *\n         * @param transition The transition which was resumed.\n         ",
    "links" : [ "#onTransitionPause(Transition)", "android.transition.TransitionSet" ]
  } ],
  "methodNames" : [ " void onTransitionStart(Transition transition)", " void onTransitionEnd(Transition transition)", " void onTransitionCancel(Transition transition)", " void onTransitionPause(Transition transition)", " void onTransitionResume(Transition transition)" ],
  "variableNames" : [ ]
}