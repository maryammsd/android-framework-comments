{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/widget/CalendarViewLegacyDelegate.java",
  "packageName" : "android.widget",
  "className" : "CalendarViewLegacyDelegate",
  "comment" : "\n * A delegate implementing the legacy CalendarView\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "DEFAULT_SHOW_WEEK_NUMBER",
    "type" : "boolean",
    "comment" : "\n     * Default value whether to show week number.\n     ",
    "links" : [ ]
  }, {
    "name" : "MILLIS_IN_DAY",
    "type" : "long",
    "comment" : "\n     * The number of milliseconds in a day.e\n     ",
    "links" : [ ]
  }, {
    "name" : "DAYS_PER_WEEK",
    "type" : "int",
    "comment" : "\n     * The number of day in a week.\n     ",
    "links" : [ ]
  }, {
    "name" : "MILLIS_IN_WEEK",
    "type" : "long",
    "comment" : "\n     * The number of milliseconds in a week.\n     ",
    "links" : [ ]
  }, {
    "name" : "SCROLL_HYST_WEEKS",
    "type" : "int",
    "comment" : "\n     * Affects when the month selection will change while scrolling upe\n     ",
    "links" : [ ]
  }, {
    "name" : "GOTO_SCROLL_DURATION",
    "type" : "int",
    "comment" : "\n     * How long the GoTo fling animation should last.\n     ",
    "links" : [ ]
  }, {
    "name" : "ADJUSTMENT_SCROLL_DURATION",
    "type" : "int",
    "comment" : "\n     * The duration of the adjustment upon a user scroll in milliseconds.\n     ",
    "links" : [ ]
  }, {
    "name" : "SCROLL_CHANGE_DELAY",
    "type" : "int",
    "comment" : "\n     * How long to wait after receiving an onScrollStateChanged notification\n     * before acting on it.\n     ",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_SHOWN_WEEK_COUNT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_DATE_TEXT_SIZE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UNSCALED_SELECTED_DATE_VERTICAL_BAR_WIDTH",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UNSCALED_WEEK_MIN_VISIBLE_HEIGHT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UNSCALED_LIST_SCROLL_TOP_OFFSET",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UNSCALED_BOTTOM_BUFFER",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UNSCALED_WEEK_SEPARATOR_LINE_WIDTH",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_WEEK_DAY_TEXT_APPEARANCE_RES_ID",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWeekSeparatorLineWidth",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDateTextSize",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSelectedDateVerticalBar",
    "type" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSelectedDateVerticalBarWidth",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSelectedWeekBackgroundColor",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFocusedMonthDateColor",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUnfocusedMonthDateColor",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWeekSeparatorLineColor",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWeekNumberColor",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWeekDayTextAppearanceResId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDateTextAppearanceResId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mListScrollTopOffset",
    "type" : "int",
    "comment" : "\n     * The top offset of the weeks list.\n     ",
    "links" : [ ]
  }, {
    "name" : "mWeekMinVisibleHeight",
    "type" : "int",
    "comment" : "\n     * The visible height of a week view.\n     ",
    "links" : [ ]
  }, {
    "name" : "mBottomBuffer",
    "type" : "int",
    "comment" : "\n     * The visible height of a week view.\n     ",
    "links" : [ ]
  }, {
    "name" : "mShownWeekCount",
    "type" : "int",
    "comment" : "\n     * The number of shown weeks.\n     ",
    "links" : [ ]
  }, {
    "name" : "mShowWeekNumber",
    "type" : "boolean",
    "comment" : "\n     * Flag whether to show the week number.\n     ",
    "links" : [ ]
  }, {
    "name" : "mDaysPerWeek",
    "type" : "int",
    "comment" : "\n     * The number of day per week to be shown.\n     ",
    "links" : [ ]
  }, {
    "name" : "mFriction",
    "type" : "float",
    "comment" : "\n     * The friction of the week list while flinging.\n     ",
    "links" : [ ]
  }, {
    "name" : "mVelocityScale",
    "type" : "float",
    "comment" : "\n     * Scale for adjusting velocity of the week list while flinging.\n     ",
    "links" : [ ]
  }, {
    "name" : "mAdapter",
    "type" : "WeeksAdapter",
    "comment" : "\n     * The adapter for the weeks list.\n     ",
    "links" : [ ]
  }, {
    "name" : "mListView",
    "type" : "ListView",
    "comment" : "\n     * The weeks list.\n     ",
    "links" : [ ]
  }, {
    "name" : "mMonthName",
    "type" : "TextView",
    "comment" : "\n     * The name of the month to display.\n     ",
    "links" : [ ]
  }, {
    "name" : "mDayNamesHeader",
    "type" : "ViewGroup",
    "comment" : "\n     * The header with week day names.\n     ",
    "links" : [ ]
  }, {
    "name" : "mDayNamesShort",
    "type" : "String[]",
    "comment" : "\n     * Cached abbreviations for day of week names.\n     ",
    "links" : [ ]
  }, {
    "name" : "mDayNamesLong",
    "type" : "String[]",
    "comment" : "\n     * Cached full-length day of week names.\n     ",
    "links" : [ ]
  }, {
    "name" : "mFirstDayOfWeek",
    "type" : "int",
    "comment" : "\n     * The first day of the week.\n     ",
    "links" : [ ]
  }, {
    "name" : "mCurrentMonthDisplayed",
    "type" : "int",
    "comment" : "\n     * Which month should be displayed/highlighted [0-11].\n     ",
    "links" : [ ]
  }, {
    "name" : "mPreviousScrollPosition",
    "type" : "long",
    "comment" : "\n     * Used for tracking during a scroll.\n     ",
    "links" : [ ]
  }, {
    "name" : "mIsScrollingUp",
    "type" : "boolean",
    "comment" : "\n     * Used for tracking which direction the view is scrolling.\n     ",
    "links" : [ ]
  }, {
    "name" : "mPreviousScrollState",
    "type" : "int",
    "comment" : "\n     * The previous scroll state of the weeks ListView.\n     ",
    "links" : [ ]
  }, {
    "name" : "mCurrentScrollState",
    "type" : "int",
    "comment" : "\n     * The current scroll state of the weeks ListView.\n     ",
    "links" : [ ]
  }, {
    "name" : "mOnDateChangeListener",
    "type" : "CalendarView.OnDateChangeListener",
    "comment" : "\n     * Listener for changes in the selected day.\n     ",
    "links" : [ ]
  }, {
    "name" : "mScrollStateChangedRunnable",
    "type" : "ScrollStateRunnable",
    "comment" : "\n     * Command for adjusting the position after a scroll/fling.\n     ",
    "links" : [ ]
  }, {
    "name" : "mTempDate",
    "type" : "Calendar",
    "comment" : "\n     * Temporary instance to avoid multiple instantiations.\n     ",
    "links" : [ ]
  }, {
    "name" : "mFirstDayOfMonth",
    "type" : "Calendar",
    "comment" : "\n     * The first day of the focused month.\n     ",
    "links" : [ ]
  }, {
    "name" : "mMinDate",
    "type" : "Calendar",
    "comment" : "\n     * The start date of the range supported by this picker.\n     ",
    "links" : [ ]
  }, {
    "name" : "mMaxDate",
    "type" : "Calendar",
    "comment" : "\n     * The end date of the range supported by this picker.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setShownWeekCount(int count)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getShownWeekCount()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setSelectedWeekBackgroundColor(int color)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getSelectedWeekBackgroundColor()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setFocusedMonthDateColor(int color)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getFocusedMonthDateColor()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setUnfocusedMonthDateColor(int color)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getUnfocusedMonthDateColor()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setWeekNumberColor(int color)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getWeekNumberColor()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setWeekSeparatorLineColor(int color)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getWeekSeparatorLineColor()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setSelectedDateVerticalBar(int resourceId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setSelectedDateVerticalBar(Drawable drawable)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Drawable getSelectedDateVerticalBar()",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setWeekDayTextAppearance(int resourceId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getWeekDayTextAppearance()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setDateTextAppearance(int resourceId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getDateTextAppearance()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setMinDate(long minDate)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public long getMinDate()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setMaxDate(long maxDate)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public long getMaxDate()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setShowWeekNumber(boolean showWeekNumber)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean getShowWeekNumber()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setFirstDayOfWeek(int firstDayOfWeek)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getFirstDayOfWeek()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setDate(long date)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setDate(long date, boolean animate, boolean center)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public long getDate()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setOnDateChangeListener(CalendarView.OnDateChangeListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean getBoundsForDate(long date, Rect outBounds)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onConfigurationChanged(Configuration newConfig)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void setCurrentLocale(Locale locale)",
    "returnType" : "void",
    "comment" : "\n     * Sets the current locale.\n     *\n     * @param locale The current locale.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void updateDateTextSize()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void invalidateAllWeekViews()",
    "returnType" : "void",
    "comment" : "\n     * Invalidates all week views.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static Calendar getCalendarForLocale(Calendar oldCalendar, Locale locale)",
    "returnType" : "Calendar",
    "comment" : "\n     * Gets a calendar for locale bootstrapped with the value of a given calendar.\n     *\n     * @param oldCalendar The old calendar.\n     * @param locale The locale.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean isSameDate(Calendar firstDate, Calendar secondDate)",
    "returnType" : "boolean",
    "comment" : "\n     * @return True if the <code>firstDate</code> is the same as the <code>\n     * secondDate</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setUpAdapter()",
    "returnType" : "void",
    "comment" : "\n     * Creates a new adapter if necessary and sets up its parameters.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setUpHeader()",
    "returnType" : "void",
    "comment" : "\n     * Sets up the strings to be used by the header.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setUpListView()",
    "returnType" : "void",
    "comment" : "\n     * Sets all the required fields for the list view.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void goTo(Calendar date, boolean animate, boolean setSelected, boolean forceScroll)",
    "returnType" : "void",
    "comment" : "\n     * This moves to the specified time in the view. If the time is not already\n     * in range it will move the list so that the first of the month containing\n     * the time is at the top of the view. If the new time is already in view\n     * the list will not be scrolled unless forceScroll is true. This time may\n     * optionally be highlighted as selected as well.\n     *\n     * @param date The time to move to.\n     * @param animate Whether to scroll to the given time or just redraw at the\n     *            new location.\n     * @param setSelected Whether to set the given time as selected.\n     * @param forceScroll Whether to recenter even if the time is already\n     *            visible.\n     *\n     * @throws IllegalArgumentException if the provided date is before the\n     *         range start or after the range end.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void onScrollStateChanged(AbsListView view, int scrollState)",
    "returnType" : "void",
    "comment" : "\n     * Called when a <code>view</code> transitions to a new <code>scrollState\n     * </code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount)",
    "returnType" : "void",
    "comment" : "\n     * Updates the title and selected month if the <code>view</code> has moved to a new\n     * month.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setMonthDisplayed(Calendar calendar)",
    "returnType" : "void",
    "comment" : "\n     * Sets the month displayed at the top of this view based on time. Override\n     * to add custom events when the title is changed.\n     *\n     * @param calendar A day in the new focus month.\n     ",
    "links" : [ ]
  }, {
    "name" : "private int getWeeksSinceMinDate(Calendar date)",
    "returnType" : "int",
    "comment" : "\n     * @return Returns the number of weeks between the current <code>date</code>\n     *         and the <code>mMinDate</code>.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setShownWeekCount(int count)", "public int getShownWeekCount()", "public void setSelectedWeekBackgroundColor(int color)", "public int getSelectedWeekBackgroundColor()", "public void setFocusedMonthDateColor(int color)", "public int getFocusedMonthDateColor()", "public void setUnfocusedMonthDateColor(int color)", "public int getUnfocusedMonthDateColor()", "public void setWeekNumberColor(int color)", "public int getWeekNumberColor()", "public void setWeekSeparatorLineColor(int color)", "public int getWeekSeparatorLineColor()", "public void setSelectedDateVerticalBar(int resourceId)", "public void setSelectedDateVerticalBar(Drawable drawable)", "public Drawable getSelectedDateVerticalBar()", "public void setWeekDayTextAppearance(int resourceId)", "public int getWeekDayTextAppearance()", "public void setDateTextAppearance(int resourceId)", "public int getDateTextAppearance()", "public void setMinDate(long minDate)", "public long getMinDate()", "public void setMaxDate(long maxDate)", "public long getMaxDate()", "public void setShowWeekNumber(boolean showWeekNumber)", "public boolean getShowWeekNumber()", "public void setFirstDayOfWeek(int firstDayOfWeek)", "public int getFirstDayOfWeek()", "public void setDate(long date)", "public void setDate(long date, boolean animate, boolean center)", "public long getDate()", "public void setOnDateChangeListener(CalendarView.OnDateChangeListener listener)", "public boolean getBoundsForDate(long date, Rect outBounds)", "public void onConfigurationChanged(Configuration newConfig)", "protected void setCurrentLocale(Locale locale)", "private void updateDateTextSize()", "private void invalidateAllWeekViews()", "private static Calendar getCalendarForLocale(Calendar oldCalendar, Locale locale)", "private static boolean isSameDate(Calendar firstDate, Calendar secondDate)", "private void setUpAdapter()", "private void setUpHeader()", "private void setUpListView()", "private void goTo(Calendar date, boolean animate, boolean setSelected, boolean forceScroll)", "private void onScrollStateChanged(AbsListView view, int scrollState)", "private void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount)", "private void setMonthDisplayed(Calendar calendar)", "private int getWeeksSinceMinDate(Calendar date)" ],
  "variableNames" : [ "DEFAULT_SHOW_WEEK_NUMBER", "MILLIS_IN_DAY", "DAYS_PER_WEEK", "MILLIS_IN_WEEK", "SCROLL_HYST_WEEKS", "GOTO_SCROLL_DURATION", "ADJUSTMENT_SCROLL_DURATION", "SCROLL_CHANGE_DELAY", "DEFAULT_SHOWN_WEEK_COUNT", "DEFAULT_DATE_TEXT_SIZE", "UNSCALED_SELECTED_DATE_VERTICAL_BAR_WIDTH", "UNSCALED_WEEK_MIN_VISIBLE_HEIGHT", "UNSCALED_LIST_SCROLL_TOP_OFFSET", "UNSCALED_BOTTOM_BUFFER", "UNSCALED_WEEK_SEPARATOR_LINE_WIDTH", "DEFAULT_WEEK_DAY_TEXT_APPEARANCE_RES_ID", "mWeekSeparatorLineWidth", "mDateTextSize", "mSelectedDateVerticalBar", "mSelectedDateVerticalBarWidth", "mSelectedWeekBackgroundColor", "mFocusedMonthDateColor", "mUnfocusedMonthDateColor", "mWeekSeparatorLineColor", "mWeekNumberColor", "mWeekDayTextAppearanceResId", "mDateTextAppearanceResId", "mListScrollTopOffset", "mWeekMinVisibleHeight", "mBottomBuffer", "mShownWeekCount", "mShowWeekNumber", "mDaysPerWeek", "mFriction", "mVelocityScale", "mAdapter", "mListView", "mMonthName", "mDayNamesHeader", "mDayNamesShort", "mDayNamesLong", "mFirstDayOfWeek", "mCurrentMonthDisplayed", "mPreviousScrollPosition", "mIsScrollingUp", "mPreviousScrollState", "mCurrentScrollState", "mOnDateChangeListener", "mScrollStateChangedRunnable", "mTempDate", "mFirstDayOfMonth", "mMinDate", "mMaxDate" ]
}