{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/content/SyncRequest.java",
  "packageName" : "android.content",
  "className" : "Builder",
  "comment" : "\n     * Builder class for a {@link SyncRequest}. As you build your SyncRequest this class will also\n     * perform validation.\n     ",
  "variables" : [ {
    "name" : "SYNC_TYPE_UNKNOWN",
    "type" : "int",
    "comment" : " Unknown sync type. ",
    "links" : [ ]
  }, {
    "name" : "SYNC_TYPE_PERIODIC",
    "type" : "int",
    "comment" : " Specify that this is a periodic sync. ",
    "links" : [ ]
  }, {
    "name" : "SYNC_TYPE_ONCE",
    "type" : "int",
    "comment" : " Specify that this is a one-time sync. ",
    "links" : [ ]
  }, {
    "name" : "SYNC_TARGET_UNKNOWN",
    "type" : "int",
    "comment" : " Unknown sync target. ",
    "links" : [ ]
  }, {
    "name" : "SYNC_TARGET_ADAPTER",
    "type" : "int",
    "comment" : " Specify that this is a sync with a provider. ",
    "links" : [ ]
  }, {
    "name" : "mSyncFlexTimeSecs",
    "type" : "long",
    "comment" : "\n         * Earliest point of displacement into the future at which this sync can\n         * occur.\n         ",
    "links" : [ ]
  }, {
    "name" : "mSyncRunTimeSecs",
    "type" : "long",
    "comment" : " Displacement into the future at which this sync must occur. ",
    "links" : [ ]
  }, {
    "name" : "mCustomExtras",
    "type" : "Bundle",
    "comment" : "\n         * Sync configuration information - custom user data explicitly provided by the developer.\n         * This data is handed over to the sync operation.\n         ",
    "links" : [ ]
  }, {
    "name" : "mSyncConfigExtras",
    "type" : "Bundle",
    "comment" : "\n         * Sync system configuration -  used to store system sync configuration. Corresponds to\n         * ContentResolver.SYNC_EXTRAS_* flags.\n         * TODO: Use this instead of dumping into one bundle. Need to decide if these flags should\n         * discriminate between equivalent syncs.\n         ",
    "links" : [ ]
  }, {
    "name" : "mDisallowMetered",
    "type" : "boolean",
    "comment" : " Whether or not this sync can occur on metered networks. Default false. ",
    "links" : [ ]
  }, {
    "name" : "mSyncType",
    "type" : "int",
    "comment" : "\n         * Whether this builder is building a periodic sync, or a one-time sync.\n         ",
    "links" : [ ]
  }, {
    "name" : "mSyncTarget",
    "type" : "int",
    "comment" : " Whether this will go to a sync adapter. ",
    "links" : [ ]
  }, {
    "name" : "mIsManual",
    "type" : "boolean",
    "comment" : " Whether this is a user-activated sync. ",
    "links" : [ ]
  }, {
    "name" : "mNoRetry",
    "type" : "boolean",
    "comment" : "\n         * Whether to retry this one-time sync if the sync fails. Not valid for\n         * periodic syncs. See {@link ContentResolver#SYNC_EXTRAS_DO_NOT_RETRY}.\n         ",
    "links" : [ "android.content.ContentResolver#SYNC_EXTRAS_DO_NOT_RETRY" ]
  }, {
    "name" : "mIgnoreBackoff",
    "type" : "boolean",
    "comment" : "\n         * Whether to respect back-off for this one-time sync. Not valid for\n         * periodic syncs. See\n         * {@link ContentResolver#SYNC_EXTRAS_IGNORE_BACKOFF};\n         ",
    "links" : [ "android.content.ContentResolver#SYNC_EXTRAS_IGNORE_BACKOFF" ]
  }, {
    "name" : "mIgnoreSettings",
    "type" : "boolean",
    "comment" : " Ignore sync system settings and perform sync anyway. ",
    "links" : [ ]
  }, {
    "name" : "mExpedited",
    "type" : "boolean",
    "comment" : " This sync will run in preference to other non-expedited syncs. ",
    "links" : [ ]
  }, {
    "name" : "mAccount",
    "type" : "Account",
    "comment" : "\n         * The Account object that together with an Authority name define the SyncAdapter (if\n         * this sync is bound to a provider), otherwise null.\n         ",
    "links" : [ ]
  }, {
    "name" : "mAuthority",
    "type" : "String",
    "comment" : "\n         * The Authority name that together with an Account define the SyncAdapter (if\n         * this sync is bound to a provider), otherwise null.\n         ",
    "links" : [ ]
  }, {
    "name" : "mRequiresCharging",
    "type" : "boolean",
    "comment" : "\n         * Whether the sync requires the phone to be plugged in.\n         ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Builder syncOnce()",
    "returnType" : "Builder",
    "comment" : "\n         * Request that a sync occur immediately.\n         *\n         * Example\n         * <pre>\n         *     SyncRequest.Builder builder = (new SyncRequest.Builder()).syncOnce();\n         * </pre>\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder syncPeriodic(long pollFrequency, long beforeSeconds)",
    "returnType" : "Builder",
    "comment" : "\n         * Build a periodic sync. Either this or syncOnce() <b>must</b> be called for this builder.\n         * Syncs are identified by target {@link android.provider} and by the\n         * contents of the extras bundle.\n         * You cannot reuse the same builder for one-time syncs after having specified a periodic\n         * sync (by calling this function). If you do, an <code>IllegalArgumentException</code>\n         * will be thrown.\n         * <p>The bundle for a periodic sync can be queried by applications with the correct\n         * permissions using\n         * {@link ContentResolver#getPeriodicSyncs(Account account, String provider)}, so no\n         * sensitive data should be transferred here.\n         *\n         * Example usage.\n         *\n         * <pre>\n         *     Request a periodic sync every 5 hours with 20 minutes of flex.\n         *     SyncRequest.Builder builder =\n         *         (new SyncRequest.Builder()).syncPeriodic(5 * HOUR_IN_SECS, 20 * MIN_IN_SECS);\n         *\n         *     Schedule a periodic sync every hour at any point in time during that hour.\n         *     SyncRequest.Builder builder =\n         *         (new SyncRequest.Builder()).syncPeriodic(1 * HOUR_IN_SECS, 1 * HOUR_IN_SECS);\n         * </pre>\n         *\n         * N.B.: Periodic syncs are not allowed to have any of\n         * {@link ContentResolver#SYNC_EXTRAS_DO_NOT_RETRY},\n         * {@link ContentResolver#SYNC_EXTRAS_IGNORE_BACKOFF},\n         * {@link ContentResolver#SYNC_EXTRAS_IGNORE_SETTINGS},\n         * {@link ContentResolver#SYNC_EXTRAS_INITIALIZE},\n         * {@link ContentResolver#SYNC_EXTRAS_FORCE},\n         * {@link ContentResolver#SYNC_EXTRAS_EXPEDITED},\n         * {@link ContentResolver#SYNC_EXTRAS_MANUAL}\n         * set to true. If any are supplied then an <code>IllegalArgumentException</code> will\n         * be thrown.\n         *\n         * @param pollFrequency the amount of time in seconds that you wish\n         *            to elapse between periodic syncs. A minimum period of 1 hour is enforced.\n         * @param beforeSeconds the amount of flex time in seconds before\n         *            {@code pollFrequency} that you permit for the sync to take\n         *            place. Must be less than {@code pollFrequency} and greater than\n         *            MAX(5% of {@code pollFrequency}, 5 minutes)\n         ",
    "links" : [ "android.content.ContentResolver#SYNC_EXTRAS_MANUAL", "android.content.ContentResolver#SYNC_EXTRAS_IGNORE_SETTINGS", "android.content.ContentResolver#getPeriodicSyncs(Account", "android.content.ContentResolver#SYNC_EXTRAS_FORCE", "android.content.ContentResolver#SYNC_EXTRAS_DO_NOT_RETRY", "android.content.ContentResolver#SYNC_EXTRAS_INITIALIZE", "android.content.ContentResolver#SYNC_EXTRAS_EXPEDITED", "android.provider", "android.content.ContentResolver#SYNC_EXTRAS_IGNORE_BACKOFF" ]
  }, {
    "name" : "private void setupInterval(long at, long before)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Builder setDisallowMetered(boolean disallow)",
    "returnType" : "Builder",
    "comment" : "\n         * Will throw an <code>IllegalArgumentException</code> if called and\n         * {@link #setIgnoreSettings(boolean ignoreSettings)} has already been called.\n         * @param disallow true to allow this transfer on metered networks. Default false.\n         *\n         ",
    "links" : [ "#setIgnoreSettings(boolean" ]
  }, {
    "name" : "public Builder setRequiresCharging(boolean requiresCharging)",
    "returnType" : "Builder",
    "comment" : "\n         * Specify whether the sync requires the phone to be plugged in.\n         * @param requiresCharging true if sync requires the phone to be plugged in. Default false.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setSyncAdapter(Account account, String authority)",
    "returnType" : "Builder",
    "comment" : "\n         * Specify an authority and account for this transfer.\n         *\n         * @param authority A String identifying the content provider to be synced.\n         * @param account Account to sync. Can be null unless this is a periodic\n         *            sync, for which verification by the ContentResolver will\n         *            fail. If a sync is performed without an account, the\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setExtras(Bundle bundle)",
    "returnType" : "Builder",
    "comment" : "\n         * Developer-provided extras handed back when sync actually occurs. This bundle is copied\n         * into the SyncRequest returned by {@link #build()}.\n         *\n         * Example:\n         * <pre>\n         *   String[] syncItems = {\"dog\", \"cat\", \"frog\", \"child\"};\n         *   SyncRequest.Builder builder =\n         *     new SyncRequest.Builder()\n         *       .setSyncAdapter(dummyAccount, dummyProvider)\n         *       .syncOnce();\n         *\n         *   for (String syncData : syncItems) {\n         *     Bundle extras = new Bundle();\n         *     extras.setString(\"data\", syncData);\n         *     builder.setExtras(extras);\n         *     ContentResolver.sync(builder.build()); // Each sync() request creates a unique sync.\n         *   }\n         * </pre>\n         * Only values of the following types may be used in the extras bundle:\n         * <ul>\n         * <li>Integer</li>\n         * <li>Long</li>\n         * <li>Boolean</li>\n         * <li>Float</li>\n         * <li>Double</li>\n         * <li>String</li>\n         * <li>Account</li>\n         * <li>null</li>\n         * </ul>\n         * If any data is present in the bundle not of this type, build() will\n         * throw a runtime exception.\n         *\n         * @param bundle extras bundle to set.\n         ",
    "links" : [ "#build()" ]
  }, {
    "name" : "public Builder setNoRetry(boolean noRetry)",
    "returnType" : "Builder",
    "comment" : "\n         * Convenience function for setting {@link ContentResolver#SYNC_EXTRAS_DO_NOT_RETRY}.\n         *\n         * A one-off sync operation that fails will be retried with exponential back-off unless\n         * this is set to false. Not valid for periodic sync and will throw an\n         * <code>IllegalArgumentException</code> in build().\n         *\n         * @param noRetry true to not retry a failed sync. Default false.\n         ",
    "links" : [ "android.content.ContentResolver#SYNC_EXTRAS_DO_NOT_RETRY" ]
  }, {
    "name" : "public Builder setIgnoreSettings(boolean ignoreSettings)",
    "returnType" : "Builder",
    "comment" : "\n         * Convenience function for setting {@link ContentResolver#SYNC_EXTRAS_IGNORE_SETTINGS}.\n         *\n         * Not valid for periodic sync and will throw an <code>IllegalArgumentException</code> in\n         * {@link #build()}.\n         * <p>Throws <code>IllegalArgumentException</code> if called and\n         * {@link #setDisallowMetered(boolean)} has been set.\n         * \n         *\n         * @param ignoreSettings true to ignore the sync automatically settings. Default false.\n         ",
    "links" : [ "#build()", "android.content.ContentResolver#SYNC_EXTRAS_IGNORE_SETTINGS", "#setDisallowMetered(boolean)" ]
  }, {
    "name" : "public Builder setIgnoreBackoff(boolean ignoreBackoff)",
    "returnType" : "Builder",
    "comment" : "\n         * Convenience function for setting {@link ContentResolver#SYNC_EXTRAS_IGNORE_BACKOFF}.\n         *\n         * Ignoring back-off will force the sync scheduling process to ignore any back-off that was\n         * the result of a failed sync, as well as to invalidate any {@link SyncResult#delayUntil}\n         * value that may have been set by the adapter. Successive failures will not honor this\n         * flag. Not valid for periodic sync and will throw an <code>IllegalArgumentException</code>\n         * in {@link #build()}.\n         *\n         * @param ignoreBackoff ignore back off settings. Default false.\n         ",
    "links" : [ "#build()", "android.content.SyncResult#delayUntil", "android.content.ContentResolver#SYNC_EXTRAS_IGNORE_BACKOFF" ]
  }, {
    "name" : "public Builder setManual(boolean isManual)",
    "returnType" : "Builder",
    "comment" : "\n         * Convenience function for setting {@link ContentResolver#SYNC_EXTRAS_MANUAL}.\n         *\n         * Not valid for periodic sync and will throw an <code>IllegalArgumentException</code> in\n         * {@link #build()}.\n         *\n         * @param isManual User-initiated sync or not. Default false.\n         ",
    "links" : [ "android.content.ContentResolver#SYNC_EXTRAS_MANUAL", "#build()" ]
  }, {
    "name" : "public Builder setExpedited(boolean expedited)",
    "returnType" : "Builder",
    "comment" : "\n         * An expedited sync runs immediately and can preempt other non-expedited running syncs.\n         *\n         * Not valid for periodic sync and will throw an <code>IllegalArgumentException</code> in\n         * {@link #build()}.\n         *\n         * @param expedited whether to run expedited. Default false.\n         ",
    "links" : [ "#build()" ]
  }, {
    "name" : "public SyncRequest build()",
    "returnType" : "SyncRequest",
    "comment" : "\n         * Performs validation over the request and throws the runtime exception\n         * <code>IllegalArgumentException</code> if this validation fails.\n         *\n         * @return a SyncRequest with the information contained within this\n         *         builder.\n         ",
    "links" : [ ]
  } ],
  "variableNames" : [ "SYNC_TYPE_UNKNOWN", "SYNC_TYPE_PERIODIC", "SYNC_TYPE_ONCE", "SYNC_TARGET_UNKNOWN", "SYNC_TARGET_ADAPTER", "mSyncFlexTimeSecs", "mSyncRunTimeSecs", "mCustomExtras", "mSyncConfigExtras", "mDisallowMetered", "mSyncType", "mSyncTarget", "mIsManual", "mNoRetry", "mIgnoreBackoff", "mIgnoreSettings", "mExpedited", "mAccount", "mAuthority", "mRequiresCharging" ],
  "methodNames" : [ "public Builder syncOnce()", "public Builder syncPeriodic(long pollFrequency, long beforeSeconds)", "private void setupInterval(long at, long before)", "public Builder setDisallowMetered(boolean disallow)", "public Builder setRequiresCharging(boolean requiresCharging)", "public Builder setSyncAdapter(Account account, String authority)", "public Builder setExtras(Bundle bundle)", "public Builder setNoRetry(boolean noRetry)", "public Builder setIgnoreSettings(boolean ignoreSettings)", "public Builder setIgnoreBackoff(boolean ignoreBackoff)", "public Builder setManual(boolean isManual)", "public Builder setExpedited(boolean expedited)", "public SyncRequest build()" ]
}