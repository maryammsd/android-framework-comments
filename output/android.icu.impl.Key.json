{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/ICUService.java",
  "packageName" : "android.icu.impl",
  "className" : "Key",
  "comment" : "\n     * Keys are used to communicate with factories to generate an\n     * instance of the service.  Keys define how ids are\n     * canonicalized, provide both a current id and a current\n     * descriptor to use in querying the cache and factories, and\n     * determine the fallback strategy.</p>\n     *\n     * <p>Keys provide both a currentDescriptor and a currentID.\n     * The descriptor contains an optional prefix, followed by '/'\n     * and the currentID.  Factories that handle complex keys,\n     * for example number format factories that generate multiple\n     * kinds of formatters for the same locale, use the descriptor\n     * to provide a fully unique identifier for the service object,\n     * while using the currentID (in this case, the locale string),\n     * as the visible IDs that can be localized.\n     *\n     * <p> The default implementation of Key has no fallbacks and\n     * has no custom descriptors.</p>\n     * @hide Only a subset of ICU is exposed in Android\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "id",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final String id()",
    "returnType" : "String",
    "comment" : "\n         * Return the original ID used to construct this key.\n         ",
    "links" : [ ]
  }, {
    "name" : "public String canonicalID()",
    "returnType" : "String",
    "comment" : "\n         * Return the canonical version of the original ID.  This implementation\n         * returns the original ID unchanged.\n         ",
    "links" : [ ]
  }, {
    "name" : "public String currentID()",
    "returnType" : "String",
    "comment" : "\n         * Return the (canonical) current ID.  This implementation\n         * returns the canonical ID.\n         ",
    "links" : [ ]
  }, {
    "name" : "public String currentDescriptor()",
    "returnType" : "String",
    "comment" : "\n         * Return the current descriptor.  This implementation returns\n         * the current ID.  The current descriptor is used to fully\n         * identify an instance of the service in the cache.  A\n         * factory may handle all descriptors for an ID, or just a\n         * particular descriptor.  The factory can either parse the\n         * descriptor or use custom API on the key in order to\n         * instantiate the service.\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean fallback()",
    "returnType" : "boolean",
    "comment" : "\n         * If the key has a fallback, modify the key and return true,\n         * otherwise return false.  The current ID will change if there\n         * is a fallback.  No currentIDs should be repeated, and fallback\n         * must eventually return false.  This implementation has no fallbacks\n         * and always returns false.\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean isFallbackOf(String idToCheck)",
    "returnType" : "boolean",
    "comment" : "\n         * If a key created from id would eventually fallback to match the\n         * canonical ID of this key, return true.\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public final String id()", "public String canonicalID()", "public String currentID()", "public String currentDescriptor()", "public boolean fallback()", "public boolean isFallbackOf(String idToCheck)" ],
  "variableNames" : [ "id" ]
}