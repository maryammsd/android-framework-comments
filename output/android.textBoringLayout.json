{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/text/BoringLayout.java",
  "packageName" : "android.text",
  "className" : "BoringLayout",
  "comment" : "\n * A BoringLayout is a very simple Layout implementation for text that\n * fits on a single line and is all left-to-right characters.\n * You will probably never want to make one of these yourself;\n * if you do, be sure to call {@link #isBoring} first to make sure\n * the text meets the criteria.\n * <p>This class is used by widgets to control text layout. You should not need\n * to use this class directly unless you are implementing your own widget\n * or custom display object, in which case\n * you are encouraged to use a Layout instead of calling\n * {@link android.graphics.Canvas#drawText(java.lang.CharSequence, int, int, float, float, android.graphics.Paint)\n *  Canvas.drawText()} directly.</p>\n ",
  "variables" : [ {
    "name" : "mDirect",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPaint",
    "type" : "Paint",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBottom",
    "type" : "int",
    "comment" : " for Direct",
    "links" : [ ]
  }, {
    "name" : "mDesc",
    "type" : "int",
    "comment" : " for Direct",
    "links" : [ ]
  }, {
    "name" : "mTopPadding",
    "type" : "int",
    "comment" : " package ",
    "links" : [ ]
  }, {
    "name" : "mBottomPadding",
    "type" : "int",
    "comment" : " package ",
    "links" : [ ]
  }, {
    "name" : "mMax",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEllipsizedWidth",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEllipsizedStart",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEllipsizedCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static BoringLayout make(CharSequence source, TextPaint paint, int outerWidth, Alignment align, float spacingMult, float spacingAdd, BoringLayout.Metrics metrics, boolean includePad)",
    "returnType" : "BoringLayout",
    "comment" : "\n     * Utility function to construct a BoringLayout instance.\n     *\n     * @param source the text to render\n     * @param paint the default paint for the layout\n     * @param outerWidth the wrapping width for the text\n     * @param align whether to left, right, or center the text\n     * @param spacingMult this value is no longer used by BoringLayout\n     * @param spacingAdd this value is no longer used by BoringLayout\n     * @param metrics {@code #Metrics} instance that contains information about FontMetrics and\n     *                line width\n     * @param includePad set whether to include extra space beyond font ascent and descent which is\n     *                   needed to avoid clipping in some scripts\n     ",
    "links" : [ ]
  }, {
    "name" : "public static BoringLayout make(CharSequence source, TextPaint paint, int outerWidth, Alignment align, float spacingmult, float spacingadd, BoringLayout.Metrics metrics, boolean includePad, TextUtils.TruncateAt ellipsize, int ellipsizedWidth)",
    "returnType" : "BoringLayout",
    "comment" : "\n     * Utility function to construct a BoringLayout instance.\n     *\n     * @param source the text to render\n     * @param paint the default paint for the layout\n     * @param outerWidth the wrapping width for the text\n     * @param align whether to left, right, or center the text\n     * @param spacingmult this value is no longer used by BoringLayout\n     * @param spacingadd this value is no longer used by BoringLayout\n     * @param metrics {@code #Metrics} instance that contains information about FontMetrics and\n     *                line width\n     * @param includePad set whether to include extra space beyond font ascent and descent which is\n     *                   needed to avoid clipping in some scripts\n     * @param ellipsize whether to ellipsize the text if width of the text is longer than the\n     *                  requested width\n     * @param ellipsizedWidth the width to which this Layout is ellipsizing. If {@code ellipsize} is\n     *                        {@code null}, or is {@link TextUtils.TruncateAt#MARQUEE} this value is\n     *                        not used, {@code outerWidth} is used instead\n     ",
    "links" : [ "TextUtils.TruncateAt#MARQUEE" ]
  }, {
    "name" : "public BoringLayout replaceOrMake(CharSequence source, TextPaint paint, int outerwidth, Alignment align, float spacingMult, float spacingAdd, BoringLayout.Metrics metrics, boolean includePad)",
    "returnType" : "BoringLayout",
    "comment" : "\n     * Returns a BoringLayout for the specified text, potentially reusing\n     * this one if it is already suitable.  The caller must make sure that\n     * no one is still using this Layout.\n     *\n     * @param source the text to render\n     * @param paint the default paint for the layout\n     * @param outerwidth the wrapping width for the text\n     * @param align whether to left, right, or center the text\n     * @param spacingMult this value is no longer used by BoringLayout\n     * @param spacingAdd this value is no longer used by BoringLayout\n     * @param metrics {@code #Metrics} instance that contains information about FontMetrics and\n     *                line width\n     * @param includePad set whether to include extra space beyond font ascent and descent which is\n     *                   needed to avoid clipping in some scripts\n     ",
    "links" : [ ]
  }, {
    "name" : "public BoringLayout replaceOrMake(CharSequence source, TextPaint paint, int outerWidth, Alignment align, float spacingMult, float spacingAdd, BoringLayout.Metrics metrics, boolean includePad, TextUtils.TruncateAt ellipsize, int ellipsizedWidth)",
    "returnType" : "BoringLayout",
    "comment" : "\n     * Returns a BoringLayout for the specified text, potentially reusing\n     * this one if it is already suitable.  The caller must make sure that\n     * no one is still using this Layout.\n     *\n     * @param source the text to render\n     * @param paint the default paint for the layout\n     * @param outerWidth the wrapping width for the text\n     * @param align whether to left, right, or center the text\n     * @param spacingMult this value is no longer used by BoringLayout\n     * @param spacingAdd this value is no longer used by BoringLayout\n     * @param metrics {@code #Metrics} instance that contains information about FontMetrics and\n     *                line width\n     * @param includePad set whether to include extra space beyond font ascent and descent which is\n     *                   needed to avoid clipping in some scripts\n     * @param ellipsize whether to ellipsize the text if width of the text is longer than the\n     *                  requested width\n     * @param ellipsizedWidth the width to which this Layout is ellipsizing. If {@code ellipsize} is\n     *                        {@code null}, or is {@link TextUtils.TruncateAt#MARQUEE} this value is\n     *                        not used, {@code outerwidth} is used instead\n     ",
    "links" : [ "TextUtils.TruncateAt#MARQUEE" ]
  }, {
    "name" : " void init(CharSequence source, TextPaint paint, Alignment align, BoringLayout.Metrics metrics, boolean includePad, boolean trustWidth)",
    "returnType" : "void",
    "comment" : " package ",
    "links" : [ ]
  }, {
    "name" : "public static Metrics isBoring(CharSequence text, TextPaint paint)",
    "returnType" : "Metrics",
    "comment" : "\n     * Determine and compute metrics if given text can be handled by BoringLayout.\n     *\n     * @param text a text\n     * @param paint a paint\n     * @return layout metric for the given text. null if given text is unable to be handled by\n     *         BoringLayout.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Metrics isBoring(CharSequence text, TextPaint paint, Metrics metrics)",
    "returnType" : "Metrics",
    "comment" : "\n     * Determine and compute metrics if given text can be handled by BoringLayout.\n     *\n     * @param text a text\n     * @param paint a paint\n     * @param metrics a metrics object to be recycled. If null is passed, this function creat new\n     *                object.\n     * @return layout metric for the given text. If metrics is not null, this method fills values\n     *         to given metrics object instead of allocating new metrics object. null if given text\n     *         is unable to be handled by BoringLayout.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean hasAnyInterestingChars(CharSequence text, int textLength)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the text contains any RTL characters, bidi format characters, or surrogate\n     * code units.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Metrics isBoring(CharSequence text, TextPaint paint, TextDirectionHeuristic textDir, Metrics metrics)",
    "returnType" : "Metrics",
    "comment" : "\n     * Returns null if not boring; the width, ascent, and descent in the\n     * provided Metrics object (or a new one if the provided one was null)\n     * if boring.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getHeight()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getLineCount()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getLineTop(int line)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getLineDescent(int line)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getLineStart(int line)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getParagraphDirection(int line)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean getLineContainsTab(int line)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public float getLineMax(int line)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public float getLineWidth(int line)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final Directions getLineDirections(int line)",
    "returnType" : "Directions",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getTopPadding()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getBottomPadding()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getEllipsisCount(int line)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getEllipsisStart(int line)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getEllipsizedWidth()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void draw(Canvas c, Path highlight, Paint highlightpaint, int cursorOffset)",
    "returnType" : "void",
    "comment" : " Override draw so it will be faster.",
    "links" : [ ]
  }, {
    "name" : "public void ellipsized(int start, int end)",
    "returnType" : "void",
    "comment" : "\n     * Callback for the ellipsizer to report what region it ellipsized.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "mDirect", "mPaint", "mBottom", "mDesc", "mTopPadding", "mBottomPadding", "mMax", "mEllipsizedWidth", "mEllipsizedStart", "mEllipsizedCount" ],
  "methodNames" : [ "public static BoringLayout make(CharSequence source, TextPaint paint, int outerWidth, Alignment align, float spacingMult, float spacingAdd, BoringLayout.Metrics metrics, boolean includePad)", "public static BoringLayout make(CharSequence source, TextPaint paint, int outerWidth, Alignment align, float spacingmult, float spacingadd, BoringLayout.Metrics metrics, boolean includePad, TextUtils.TruncateAt ellipsize, int ellipsizedWidth)", "public BoringLayout replaceOrMake(CharSequence source, TextPaint paint, int outerwidth, Alignment align, float spacingMult, float spacingAdd, BoringLayout.Metrics metrics, boolean includePad)", "public BoringLayout replaceOrMake(CharSequence source, TextPaint paint, int outerWidth, Alignment align, float spacingMult, float spacingAdd, BoringLayout.Metrics metrics, boolean includePad, TextUtils.TruncateAt ellipsize, int ellipsizedWidth)", " void init(CharSequence source, TextPaint paint, Alignment align, BoringLayout.Metrics metrics, boolean includePad, boolean trustWidth)", "public static Metrics isBoring(CharSequence text, TextPaint paint)", "public static Metrics isBoring(CharSequence text, TextPaint paint, Metrics metrics)", "private static boolean hasAnyInterestingChars(CharSequence text, int textLength)", "public static Metrics isBoring(CharSequence text, TextPaint paint, TextDirectionHeuristic textDir, Metrics metrics)", "public int getHeight()", "public int getLineCount()", "public int getLineTop(int line)", "public int getLineDescent(int line)", "public int getLineStart(int line)", "public int getParagraphDirection(int line)", "public boolean getLineContainsTab(int line)", "public float getLineMax(int line)", "public float getLineWidth(int line)", "public final Directions getLineDirections(int line)", "public int getTopPadding()", "public int getBottomPadding()", "public int getEllipsisCount(int line)", "public int getEllipsisStart(int line)", "public int getEllipsizedWidth()", "public void draw(Canvas c, Path highlight, Paint highlightpaint, int cursorOffset)", "public void ellipsized(int start, int end)" ]
}