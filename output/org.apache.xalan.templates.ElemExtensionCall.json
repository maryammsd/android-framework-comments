{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xalan/templates/ElemExtensionCall.java",
  "packageName" : "org.apache.xalan.templates",
  "className" : "ElemExtensionCall",
  "comment" : "\n * Implement an extension element.\n * @see <a href=\"http://www.w3.org/TR/xslt#extension-element\">extension-element in XSLT Specification</a>\n * @xsl.usage advanced\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_extns",
    "type" : "String",
    "comment" : " The Namespace URI for this extension call element.\n   *  @serial          ",
    "links" : [ ]
  }, {
    "name" : "m_lang",
    "type" : "String",
    "comment" : " Language used by extension.\n   *  @serial          ",
    "links" : [ ]
  }, {
    "name" : "m_srcURL",
    "type" : "String",
    "comment" : " URL pointing to extension.\n   *  @serial          ",
    "links" : [ ]
  }, {
    "name" : "m_scriptSrc",
    "type" : "String",
    "comment" : " Source for script.\n   *  @serial          ",
    "links" : [ ]
  }, {
    "name" : "m_decl",
    "type" : "ElemExtensionDecl",
    "comment" : " Declaration for Extension element. \n   *  @serial          ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getXSLToken()",
    "returnType" : "int",
    "comment" : "\n   * Get an int constant identifying the type of element.\n   * @see org.apache.xalan.templates.Constants\n   *\n   *@return The token ID for this element\n   ",
    "links" : [ ]
  }, {
    "name" : "public void compose(StylesheetRoot sroot) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n   * This function is called after everything else has been\n   * recomposed, and allows the template to set remaining\n   * values that may be based on some other property that\n   * depends on recomposition.\n   ",
    "links" : [ ]
  }, {
    "name" : "private ElemExtensionDecl getElemExtensionDecl(StylesheetRoot stylesheet, String namespace)",
    "returnType" : "ElemExtensionDecl",
    "comment" : "\n   * Return the ElemExtensionDecl for this extension element \n   *\n   *\n   * @param stylesheet Stylesheet root associated with this extension element\n   * @param namespace Namespace associated with this extension element\n   *\n   * @return the ElemExtensionDecl for this extension element. \n   ",
    "links" : [ ]
  }, {
    "name" : "private void executeFallbacks(TransformerImpl transformer) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n   * Execute the fallbacks when an extension is not available.\n   *\n   * @param transformer non-null reference to the the current transform-time state.\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "private boolean hasFallbackChildren()",
    "returnType" : "boolean",
    "comment" : "\n   * Return true if this extension element has a <xsl:fallback> child element.\n   *\n   * @return true if this extension element has a <xsl:fallback> child element.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void execute(TransformerImpl transformer) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n   * Execute an extension.\n   *\n   * @param transformer non-null reference to the the current transform-time state.\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getAttribute(String rawName, org.w3c.dom.Node sourceNode, TransformerImpl transformer) throws TransformerException",
    "returnType" : "String",
    "comment" : "\n   * Return the value of the attribute interpreted as an Attribute\n   * Value Template (in other words, you can use curly expressions\n   * such as href=\"http://{website}\".\n   *\n   * @param rawName Raw name of the attribute to get\n   * @param sourceNode non-null reference to the <a href=\"http://www.w3.org/TR/xslt#dt-current-node\">current source node</a>.\n   * @param transformer non-null reference to the the current transform-time state.\n   *\n   * @return the value of the attribute\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "protected boolean accept(XSLTVisitor visitor)",
    "returnType" : "boolean",
    "comment" : "\n   * Accept a visitor and call the appropriate method \n   * for this class.\n   * \n   * @param visitor The visitor whose appropriate method will be called.\n   * @return true if the children of the object should be visited.\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int getXSLToken()", "public void compose(StylesheetRoot sroot) throws TransformerException", "private ElemExtensionDecl getElemExtensionDecl(StylesheetRoot stylesheet, String namespace)", "private void executeFallbacks(TransformerImpl transformer) throws TransformerException", "private boolean hasFallbackChildren()", "public void execute(TransformerImpl transformer) throws TransformerException", "public String getAttribute(String rawName, org.w3c.dom.Node sourceNode, TransformerImpl transformer) throws TransformerException", "protected boolean accept(XSLTVisitor visitor)" ],
  "variableNames" : [ "serialVersionUID", "m_extns", "m_lang", "m_srcURL", "m_scriptSrc", "m_decl" ]
}