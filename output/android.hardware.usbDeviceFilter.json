{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/hardware/usb/DeviceFilter.java",
  "packageName" : "android.hardware.usb",
  "className" : "DeviceFilter",
  "comment" : "\n * This class is used to describe a USB device.\n * When used in HashMaps all values must be specified,\n * but wildcards can be used for any of the fields in\n * the package meta-data.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVendorId",
    "type" : "int",
    "comment" : " USB Vendor ID (or -1 for unspecified)",
    "links" : [ ]
  }, {
    "name" : "mProductId",
    "type" : "int",
    "comment" : " USB Product ID (or -1 for unspecified)",
    "links" : [ ]
  }, {
    "name" : "mClass",
    "type" : "int",
    "comment" : " USB device or interface class (or -1 for unspecified)",
    "links" : [ ]
  }, {
    "name" : "mSubclass",
    "type" : "int",
    "comment" : " USB device subclass (or -1 for unspecified)",
    "links" : [ ]
  }, {
    "name" : "mProtocol",
    "type" : "int",
    "comment" : " USB device protocol (or -1 for unspecified)",
    "links" : [ ]
  }, {
    "name" : "mManufacturerName",
    "type" : "String",
    "comment" : " USB device manufacturer name string (or null for unspecified)",
    "links" : [ ]
  }, {
    "name" : "mProductName",
    "type" : "String",
    "comment" : " USB device product name string (or null for unspecified)",
    "links" : [ ]
  }, {
    "name" : "mSerialNumber",
    "type" : "String",
    "comment" : " USB device serial number string (or null for unspecified)",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static DeviceFilter read(XmlPullParser parser) throws XmlPullParserException, IOException",
    "returnType" : "DeviceFilter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void write(XmlSerializer serializer) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean matches(int clasz, int subclass, int protocol)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean matches(UsbDevice device)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean contains(DeviceFilter device)",
    "returnType" : "boolean",
    "comment" : "\n     * If the device described by {@code device} covered by this filter?\n     *\n     * @param device The device\n     *\n     * @return {@code true} iff this filter covers the {@code device}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dump(@NonNull DualDumpOutputStream dump, String idName, long id)",
    "returnType" : "void",
    "comment" : "\n     * Write a description of the filter to a dump stream.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "mVendorId", "mProductId", "mClass", "mSubclass", "mProtocol", "mManufacturerName", "mProductName", "mSerialNumber" ],
  "methodNames" : [ "public static DeviceFilter read(XmlPullParser parser) throws XmlPullParserException, IOException", "public void write(XmlSerializer serializer) throws IOException", "private boolean matches(int clasz, int subclass, int protocol)", "public boolean matches(UsbDevice device)", "public boolean contains(DeviceFilter device)", "public boolean equals(Object obj)", "public int hashCode()", "public String toString()", "public void dump(@NonNull DualDumpOutputStream dump, String idName, long id)" ]
}