{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/TrieBuilder.java",
  "packageName" : "android.icu.impl",
  "className" : "TrieBuilder",
  "comment" : "\n * Builder class to manipulate and generate a trie.\n * This is useful for ICU data in primitive types.\n * Provides a compact way to store information that is indexed by Unicode \n * values, such as character properties, types, keyboard values, etc. This is \n * very useful when you have a block of Unicode data that contains significant \n * values while the rest of the Unicode data is unused in the application or \n * when you have a lot of redundance, such as where all 21,000 Han ideographs \n * have the same value.  However, lookup is much faster than a hash table.\n * A trie of any primitive data type serves two purposes:\n * <UL type = round>\n *     <LI>Fast access of the indexed values.\n *     <LI>Smaller memory footprint.\n * </UL>\n * This is a direct port from the ICU4C version\n * @author             Syn Wee Quek\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "DATA_BLOCK_LENGTH",
    "type" : "int",
    "comment" : " \n     * Number of data values in a stage 2 (data array) block. 2, 4, 8, .., \n     * 0x200 \n     ",
    "links" : [ ]
  }, {
    "name" : "m_index_",
    "type" : "int[]",
    "comment" : "\n     * Index values at build-time are 32 bits wide for easier processing.\n     * Bit 31 is set if the data block is used by multiple index values \n     * (from setRange()).\n     ",
    "links" : [ ]
  }, {
    "name" : "m_indexLength_",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_dataCapacity_",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_dataLength_",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_isLatin1Linear_",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_isCompacted_",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_map_",
    "type" : "int[]",
    "comment" : "\n     * Map of adjusted indexes, used in utrie_compact().\n     * Maps from original indexes to new ones.\n     ",
    "links" : [ ]
  }, {
    "name" : "SHIFT_",
    "type" : "int",
    "comment" : "\n     * Shift size for shifting right the input index. 1..9 \n     ",
    "links" : [ ]
  }, {
    "name" : "MAX_INDEX_LENGTH_",
    "type" : "int",
    "comment" : "\n     * Length of the index (stage 1) array before folding.\n     * Maximum number of Unicode code points (0x110000) shifted right by \n     * SHIFT.\n     ",
    "links" : [ ]
  }, {
    "name" : "BMP_INDEX_LENGTH_",
    "type" : "int",
    "comment" : " \n     * Length of the BMP portion of the index (stage 1) array. \n     ",
    "links" : [ ]
  }, {
    "name" : "SURROGATE_BLOCK_COUNT_",
    "type" : "int",
    "comment" : "\n     * Number of index (stage 1) entries per lead surrogate.\n     * Same as number of indexe entries for 1024 trail surrogates,\n     * ==0x400>>UTRIE_SHIFT\n     * 10 - SHIFT == Number of bits of a trail surrogate that are used in \n     *               index table lookups. \n     ",
    "links" : [ ]
  }, {
    "name" : "MASK_",
    "type" : "int",
    "comment" : "\n     * Mask for getting the lower bits from the input index.\n     * DATA_BLOCK_LENGTH - 1.\n     ",
    "links" : [ ]
  }, {
    "name" : "INDEX_SHIFT_",
    "type" : "int",
    "comment" : "\n     * Shift size for shifting left the index array values.\n     * Increases possible data size with 16-bit index values at the cost\n     * of compactability.\n     * This requires blocks of stage 2 data to be aligned by UTRIE_DATA_GRANULARITY.\n     * 0..UTRIE_SHIFT\n     ",
    "links" : [ ]
  }, {
    "name" : "MAX_DATA_LENGTH_",
    "type" : "int",
    "comment" : "\n     * Maximum length of the runtime data (stage 2) array.\n     * Limited by 16-bit index values that are left-shifted by INDEX_SHIFT_.\n     ",
    "links" : [ ]
  }, {
    "name" : "OPTIONS_INDEX_SHIFT_",
    "type" : "int",
    "comment" : "\n     * Shifting to position the index value in options\n     ",
    "links" : [ ]
  }, {
    "name" : "OPTIONS_DATA_IS_32_BIT_",
    "type" : "int",
    "comment" : " \n     * If set, then the data (stage 2) array is 32 bits wide. \n     ",
    "links" : [ ]
  }, {
    "name" : "OPTIONS_LATIN1_IS_LINEAR_",
    "type" : "int",
    "comment" : "\n     * If set, then Latin-1 data (for U+0000..U+00ff) is stored in the data \n     * (stage 2) array as a simple, linear array at data + DATA_BLOCK_LENGTH.\n     ",
    "links" : [ ]
  }, {
    "name" : "DATA_GRANULARITY_",
    "type" : "int",
    "comment" : " \n     * The alignment size of a stage 2 data block. Also the granularity for \n     * compaction. \n     ",
    "links" : [ ]
  }, {
    "name" : "MAX_BUILD_TIME_DATA_LENGTH_",
    "type" : "int",
    "comment" : "\n     * Maximum length of the build-time data (stage 2) array.\n     * The maximum length is 0x110000 + DATA_BLOCK_LENGTH + 0x400.\n     * (Number of Unicode code points + one all-initial-value block +\n     *  possible duplicate entries for 1024 lead surrogates.)\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean isInZeroBlock(int ch)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if the character belongs to a zero block in the trie\n     * @param ch codepoint which data is to be retrieved\n     * @return true if ch is in the zero block\n     ",
    "links" : [ ]
  }, {
    "name" : "protected static final boolean equal_int(int[] array, int start1, int start2, int length)",
    "returnType" : "boolean",
    "comment" : "\n     * Compare two sections of an array for equality.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void findUnusedBlocks()",
    "returnType" : "void",
    "comment" : "\n     * Set a value in the trie index map to indicate which data block\n     * is referenced and which one is not.\n     * utrie_compact() will remove data blocks that are not used at all.\n     * Set\n     * - 0 if it is used\n     * - -1 if it is not used\n     ",
    "links" : [ ]
  }, {
    "name" : "protected static final int findSameIndexBlock(int[] index, int indexLength, int otherBlock)",
    "returnType" : "int",
    "comment" : "\n     * Finds the same index block as the otherBlock\n     * @param index array\n     * @param indexLength size of index\n     * @param otherBlock\n     * @return same index block\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public boolean isInZeroBlock(int ch)", "protected static final boolean equal_int(int[] array, int start1, int start2, int length)", "protected void findUnusedBlocks()", "protected static final int findSameIndexBlock(int[] index, int indexLength, int otherBlock)" ],
  "variableNames" : [ "DATA_BLOCK_LENGTH", "m_index_", "m_indexLength_", "m_dataCapacity_", "m_dataLength_", "m_isLatin1Linear_", "m_isCompacted_", "m_map_", "SHIFT_", "MAX_INDEX_LENGTH_", "BMP_INDEX_LENGTH_", "SURROGATE_BLOCK_COUNT_", "MASK_", "INDEX_SHIFT_", "MAX_DATA_LENGTH_", "OPTIONS_INDEX_SHIFT_", "OPTIONS_DATA_IS_32_BIT_", "OPTIONS_LATIN1_IS_LINEAR_", "DATA_GRANULARITY_", "MAX_BUILD_TIME_DATA_LENGTH_" ]
}