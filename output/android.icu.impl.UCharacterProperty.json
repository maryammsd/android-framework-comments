{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/UCharacterProperty.java",
  "packageName" : "android.icu.impl",
  "className" : "UCharacterProperty",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "INSTANCE",
    "type" : "UCharacterProperty",
    "comment" : "\n     * public singleton instance\n     ",
    "links" : [ ]
  }, {
    "name" : "m_trie_",
    "type" : "Trie2_16",
    "comment" : "\n    * Trie data\n    ",
    "links" : [ ]
  }, {
    "name" : "m_unicodeVersion_",
    "type" : "VersionInfo",
    "comment" : "\n    * Unicode version\n    ",
    "links" : [ ]
  }, {
    "name" : "LATIN_CAPITAL_LETTER_I_WITH_DOT_ABOVE_",
    "type" : "char",
    "comment" : "\n    * Latin capital letter i with dot above\n    ",
    "links" : [ ]
  }, {
    "name" : "LATIN_SMALL_LETTER_DOTLESS_I_",
    "type" : "char",
    "comment" : "\n    * Latin small letter i with dot above\n    ",
    "links" : [ ]
  }, {
    "name" : "LATIN_SMALL_LETTER_I_",
    "type" : "char",
    "comment" : "\n    * Latin lowercase i\n    ",
    "links" : [ ]
  }, {
    "name" : "TYPE_MASK",
    "type" : "int",
    "comment" : "\n    * Character type mask\n    ",
    "links" : [ ]
  }, {
    "name" : "SRC_NONE",
    "type" : "int",
    "comment" : " No source, not a supported property. ",
    "links" : [ ]
  }, {
    "name" : "SRC_CHAR",
    "type" : "int",
    "comment" : " From uchar.c/uprops.icu main trie ",
    "links" : [ ]
  }, {
    "name" : "SRC_PROPSVEC",
    "type" : "int",
    "comment" : " From uchar.c/uprops.icu properties vectors trie ",
    "links" : [ ]
  }, {
    "name" : "SRC_NAMES",
    "type" : "int",
    "comment" : " From unames.c/unames.icu ",
    "links" : [ ]
  }, {
    "name" : "SRC_CASE",
    "type" : "int",
    "comment" : " From ucase.c/ucase.icu ",
    "links" : [ ]
  }, {
    "name" : "SRC_BIDI",
    "type" : "int",
    "comment" : " From ubidi_props.c/ubidi.icu ",
    "links" : [ ]
  }, {
    "name" : "SRC_CHAR_AND_PROPSVEC",
    "type" : "int",
    "comment" : " From uchar.c/uprops.icu main trie as well as properties vectors trie ",
    "links" : [ ]
  }, {
    "name" : "SRC_CASE_AND_NORM",
    "type" : "int",
    "comment" : " From ucase.c/ucase.icu as well as unorm.cpp/unorm.icu ",
    "links" : [ ]
  }, {
    "name" : "SRC_NFC",
    "type" : "int",
    "comment" : " From normalizer2impl.cpp/nfc.nrm ",
    "links" : [ ]
  }, {
    "name" : "SRC_NFKC",
    "type" : "int",
    "comment" : " From normalizer2impl.cpp/nfkc.nrm ",
    "links" : [ ]
  }, {
    "name" : "SRC_NFKC_CF",
    "type" : "int",
    "comment" : " From normalizer2impl.cpp/nfkc_cf.nrm ",
    "links" : [ ]
  }, {
    "name" : "SRC_NFC_CANON_ITER",
    "type" : "int",
    "comment" : " From normalizer2impl.cpp/nfc.nrm canonical iterator data ",
    "links" : [ ]
  }, {
    "name" : "SRC_INPC",
    "type" : "int",
    "comment" : " Text layout properties.",
    "links" : [ ]
  }, {
    "name" : "SRC_INSC",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SRC_VO",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SRC_EMOJI",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SRC_IDSU",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SRC_ID_COMPAT_MATH",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SRC_COUNT",
    "type" : "int",
    "comment" : " One more than the highest UPropertySource (SRC_) constant. ",
    "links" : [ ]
  }, {
    "name" : "MY_MASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "GC_CN_MASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "GC_CC_MASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "GC_CS_MASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "GC_ZS_MASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "GC_ZL_MASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "GC_ZP_MASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "GC_Z_MASK",
    "type" : "int",
    "comment" : " Mask constant for multiple UCharCategory bits (Z Separators). ",
    "links" : [ ]
  }, {
    "name" : "ID_COMPAT_MATH_CONTINUE",
    "type" : "int[]",
    "comment" : " Ranges (start/limit pairs) of ID_Compat_Math_Continue (only), from UCD PropList.txt. ",
    "links" : [ ]
  }, {
    "name" : "ID_COMPAT_MATH_START",
    "type" : "int[]",
    "comment" : " ID_Compat_Math_Start characters, from UCD PropList.txt. ",
    "links" : [ ]
  }, {
    "name" : "binProps",
    "type" : "BinaryProperty[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "gcbToHst",
    "type" : "int[]",
    "comment" : "\n     * Map some of the Grapheme Cluster Break values to Hangul Syllable Types.\n     * Hangul_Syllable_Type is fully redundant with a subset of Grapheme_Cluster_Break.\n     ",
    "links" : [ ]
  }, {
    "name" : "intProps",
    "type" : "IntProperty[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_additionalTrie_",
    "type" : "Trie2_16",
    "comment" : "\n     * Extra property trie\n     ",
    "links" : [ ]
  }, {
    "name" : "m_additionalVectors_",
    "type" : "int[]",
    "comment" : "\n     * Extra property vectors, 1st column for age and second for binary\n     * properties.\n     ",
    "links" : [ ]
  }, {
    "name" : "m_additionalColumnsCount_",
    "type" : "int",
    "comment" : "\n     * Number of additional columns\n     ",
    "links" : [ ]
  }, {
    "name" : "m_maxBlockScriptValue_",
    "type" : "int",
    "comment" : "\n     * Maximum values for block, bits used as in vector word\n     * 0\n     ",
    "links" : [ ]
  }, {
    "name" : "m_maxJTGValue_",
    "type" : "int",
    "comment" : "\n     * Maximum values for script, bits used as in vector word\n     * 0\n     ",
    "links" : [ ]
  }, {
    "name" : "m_scriptExtensions_",
    "type" : "char[]",
    "comment" : "\n     * Script_Extensions data\n     ",
    "links" : [ ]
  }, {
    "name" : "DATA_FILE_NAME_",
    "type" : "String",
    "comment" : "\n    * Default name of the datafile\n    ",
    "links" : [ ]
  }, {
    "name" : "NUMERIC_TYPE_VALUE_SHIFT_",
    "type" : "int",
    "comment" : "\n     * Numeric types and values in the main properties words.\n     ",
    "links" : [ ]
  }, {
    "name" : "NTV_NONE_",
    "type" : "int",
    "comment" : " No numeric value. ",
    "links" : [ ]
  }, {
    "name" : "NTV_DECIMAL_START_",
    "type" : "int",
    "comment" : " Decimal digits: nv=0..9 ",
    "links" : [ ]
  }, {
    "name" : "NTV_DIGIT_START_",
    "type" : "int",
    "comment" : " Other digits: nv=0..9 ",
    "links" : [ ]
  }, {
    "name" : "NTV_NUMERIC_START_",
    "type" : "int",
    "comment" : " Small integers: nv=0..154 ",
    "links" : [ ]
  }, {
    "name" : "NTV_FRACTION_START_",
    "type" : "int",
    "comment" : " Fractions: ((ntv>>4)-12) / ((ntv&0xf)+1) = -1..17 / 1..16 ",
    "links" : [ ]
  }, {
    "name" : "NTV_LARGE_START_",
    "type" : "int",
    "comment" : "\n     * Large integers:\n     * ((ntv>>5)-14) * 10^((ntv&0x1f)+2) = (1..9)*(10^2..10^33)\n     * (only one significant decimal digit)\n     ",
    "links" : [ ]
  }, {
    "name" : "NTV_BASE60_START_",
    "type" : "int",
    "comment" : "\n     * Sexagesimal numbers:\n     * ((ntv>>2)-0xbf) * 60^((ntv&3)+1) = (1..9)*(60^1..60^4)\n     ",
    "links" : [ ]
  }, {
    "name" : "NTV_FRACTION20_START_",
    "type" : "int",
    "comment" : " 0x300+9*4=0x324",
    "links" : [ ]
  }, {
    "name" : "NTV_FRACTION32_START_",
    "type" : "int",
    "comment" : " 0x324+6*4=0x34c",
    "links" : [ ]
  }, {
    "name" : "NTV_RESERVED_START_",
    "type" : "int",
    "comment" : " 0x34c+4*4=0x35c",
    "links" : [ ]
  }, {
    "name" : "SCRIPT_X_MASK",
    "type" : "int",
    "comment" : "\n     * Script_Extensions: mask includes Script\n     ",
    "links" : [ ]
  }, {
    "name" : "SCRIPT_HIGH_MASK",
    "type" : "int",
    "comment" : " Shift the high bits right by 12 to assemble the full value.",
    "links" : [ ]
  }, {
    "name" : "SCRIPT_HIGH_SHIFT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_SCRIPT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EAST_ASIAN_MASK_",
    "type" : "int",
    "comment" : "\n     * Integer properties mask and shift values for East Asian cell width.\n     * Equivalent to icu4c UPROPS_EA_MASK\n     ",
    "links" : [ ]
  }, {
    "name" : "EAST_ASIAN_SHIFT_",
    "type" : "int",
    "comment" : "\n     * Integer properties mask and shift values for East Asian cell width.\n     * Equivalent to icu4c UPROPS_EA_SHIFT\n     ",
    "links" : [ ]
  }, {
    "name" : "BLOCK_MASK_",
    "type" : "int",
    "comment" : "\n     * Integer properties mask and shift values for blocks.\n     * Equivalent to icu4c UPROPS_BLOCK_MASK\n     ",
    "links" : [ ]
  }, {
    "name" : "BLOCK_SHIFT_",
    "type" : "int",
    "comment" : "\n     * Integer properties mask and shift values for blocks.\n     * Equivalent to icu4c UPROPS_BLOCK_SHIFT\n     ",
    "links" : [ ]
  }, {
    "name" : "SCRIPT_LOW_MASK",
    "type" : "int",
    "comment" : "\n     * Integer properties mask and shift values for scripts.\n     * Equivalent to icu4c UPROPS_SHIFT_LOW_MASK.\n     ",
    "links" : [ ]
  }, {
    "name" : "SCRIPT_X_WITH_COMMON",
    "type" : "int",
    "comment" : " SCRIPT_X_WITH_COMMON must be the lowest value that involves Script_Extensions. ",
    "links" : [ ]
  }, {
    "name" : "SCRIPT_X_WITH_INHERITED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SCRIPT_X_WITH_OTHER",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "WHITE_SPACE_PROPERTY_",
    "type" : "int",
    "comment" : "\n     * Properties in vector word 1\n     * Each bit encodes one binary property.\n     * The following constants represent the bit number, use 1<<UPROPS_XYZ.\n     * UPROPS_BINARY_1_TOP<=32!\n     *\n     * Keep this list of property enums in sync with\n     * propListNames[] in icu/source/tools/genprops/props2.c!\n     *\n     * ICU 2.6/uprops format version 3.2 stores full properties instead of \"Other_\".\n     ",
    "links" : [ ]
  }, {
    "name" : "DASH_PROPERTY_",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HYPHEN_PROPERTY_",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "QUOTATION_MARK_PROPERTY_",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TERMINAL_PUNCTUATION_PROPERTY_",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MATH_PROPERTY_",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HEX_DIGIT_PROPERTY_",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ASCII_HEX_DIGIT_PROPERTY_",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ALPHABETIC_PROPERTY_",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IDEOGRAPHIC_PROPERTY_",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DIACRITIC_PROPERTY_",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EXTENDER_PROPERTY_",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NONCHARACTER_CODE_POINT_PROPERTY_",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "GRAPHEME_EXTEND_PROPERTY_",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "GRAPHEME_LINK_PROPERTY_",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IDS_BINARY_OPERATOR_PROPERTY_",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IDS_TRINARY_OPERATOR_PROPERTY_",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RADICAL_PROPERTY_",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UNIFIED_IDEOGRAPH_PROPERTY_",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_IGNORABLE_CODE_POINT_PROPERTY_",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEPRECATED_PROPERTY_",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOGICAL_ORDER_EXCEPTION_PROPERTY_",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "XID_START_PROPERTY_",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "XID_CONTINUE_PROPERTY_",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ID_START_PROPERTY_",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ID_CONTINUE_PROPERTY_",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "GRAPHEME_BASE_PROPERTY_",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "S_TERM_PROPERTY_",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VARIATION_SELECTOR_PROPERTY_",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PATTERN_SYNTAX",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PATTERN_WHITE_SPACE",
    "type" : "int",
    "comment" : " new in ICU 3.4 and Unicode 4.1 ",
    "links" : [ ]
  }, {
    "name" : "PREPENDED_CONCATENATION_MARK",
    "type" : "int",
    "comment" : " new in ICU 60 and Unicode 10",
    "links" : [ ]
  }, {
    "name" : "ID_TYPE_SHIFT",
    "type" : "int",
    "comment" : " vate static final int ID_TYPE_MASK = 0xfc000000;",
    "links" : [ ]
  }, {
    "name" : "ID_TYPE_BIT",
    "type" : "int",
    "comment" : " A high bit for use in idTypeToEncoded[] but not used in the data",
    "links" : [ ]
  }, {
    "name" : "ID_TYPE_EXCLUSION",
    "type" : "int",
    "comment" : " Combinable bits",
    "links" : [ ]
  }, {
    "name" : "ID_TYPE_LIMITED_USE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ID_TYPE_UNCOMMON_USE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ID_TYPE_TECHNICAL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ID_TYPE_OBSOLETE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ID_TYPE_NOT_XID",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ID_TYPE_NOT_CHARACTER",
    "type" : "int",
    "comment" : " Exclusive values",
    "links" : [ ]
  }, {
    "name" : "ID_TYPE_FORBIDDEN",
    "type" : "int",
    "comment" : " 0x30",
    "links" : [ ]
  }, {
    "name" : "ID_TYPE_DEPRECATED",
    "type" : "int",
    "comment" : " 0x30",
    "links" : [ ]
  }, {
    "name" : "ID_TYPE_DEFAULT_IGNORABLE",
    "type" : "int",
    "comment" : " 0x31",
    "links" : [ ]
  }, {
    "name" : "ID_TYPE_NOT_NFKC",
    "type" : "int",
    "comment" : " 0x32",
    "links" : [ ]
  }, {
    "name" : "ID_TYPE_ALLOWED_MIN",
    "type" : "int",
    "comment" : " 0x3c",
    "links" : [ ]
  }, {
    "name" : "ID_TYPE_INCLUSION",
    "type" : "int",
    "comment" : " 0x3e",
    "links" : [ ]
  }, {
    "name" : "ID_TYPE_RECOMMENDED",
    "type" : "int",
    "comment" : " 0x3f",
    "links" : [ ]
  }, {
    "name" : "idTypeToEncoded",
    "type" : "int[]",
    "comment" : "\n     * Maps UIdentifierType to encoded bits.\n     * When UPROPS_ID_TYPE_BIT is set, then use \"&\" to test whether the value bit is set.\n     * When UPROPS_ID_TYPE_BIT is not set, then compare (\"==\") the array value with the data value.\n     ",
    "links" : [ ]
  }, {
    "name" : "LB_MASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LB_SHIFT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SB_MASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SB_SHIFT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "WB_MASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "WB_SHIFT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "GCB_MASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "GCB_SHIFT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DECOMPOSITION_TYPE_MASK_",
    "type" : "int",
    "comment" : "\n     * Integer properties mask for decomposition type.\n     * Equivalent to icu4c UPROPS_DT_MASK.\n     ",
    "links" : [ ]
  }, {
    "name" : "FIRST_NIBBLE_SHIFT_",
    "type" : "int",
    "comment" : "\n     * First nibble shift\n     ",
    "links" : [ ]
  }, {
    "name" : "LAST_NIBBLE_MASK_",
    "type" : "int",
    "comment" : "\n     * Second nibble mask\n     ",
    "links" : [ ]
  }, {
    "name" : "AGE_SHIFT_",
    "type" : "int",
    "comment" : "\n     * Age value shift\n     ",
    "links" : [ ]
  }, {
    "name" : "DATA_FORMAT",
    "type" : "int",
    "comment" : " \"UPro\"",
    "links" : [ ]
  }, {
    "name" : "TAB",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CR",
    "type" : "int",
    "comment" : "private static final int FF      = 0x000c;",
    "links" : [ ]
  }, {
    "name" : "U_A",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "U_F",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "U_Z",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "U_a",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "U_f",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "U_z",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NBSP",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CGJ",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FIGURESP",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HAIRSP",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RLM",
    "type" : "int",
    "comment" : "private static final int ZWJ     = 0x200d;",
    "links" : [ ]
  }, {
    "name" : "NNBSP",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "WJ",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INHSWAP",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NOMDIG",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "U_FW_A",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "U_FW_F",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "U_FW_Z",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "U_FW_a",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "U_FW_f",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "U_FW_z",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ZWNBSP",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final int getProperty(int ch)",
    "returnType" : "int",
    "comment" : "\n    * Gets the main property value for code point ch.\n    * @param ch code point whose property value is to be retrieved\n    * @return property value of code point\n    ",
    "links" : [ ]
  }, {
    "name" : "public int getAdditional(int codepoint, int column)",
    "returnType" : "int",
    "comment" : "\n     * Gets the unicode additional properties.\n     * Java version of C u_getUnicodeProperties().\n     * @param codepoint codepoint whose additional properties is to be\n     *                  retrieved\n     * @param column The column index.\n     * @return unicode properties\n     ",
    "links" : [ ]
  }, {
    "name" : "public VersionInfo getAge(int codepoint)",
    "returnType" : "VersionInfo",
    "comment" : "\n     * <p>Get the \"age\" of the code point.</p>\n     * <p>The \"age\" is the Unicode version when the code point was first\n     * designated (as a non-character or for Private Use) or assigned a\n     * character.</p>\n     * <p>This can be useful to avoid emitting code points to receiving\n     * processes that do not accept newer characters.</p>\n     * <p>The data is from the UCD file DerivedAge.txt.</p>\n     * <p>This API does not check the validity of the codepoint.</p>\n     * @param codepoint The code point.\n     * @return the Unicode version number\n     ",
    "links" : [ ]
  }, {
    "name" : "private static final boolean isgraphPOSIX(int c)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if c is in\n     * [^\\p{space}\\p{gc=Control}\\p{gc=Surrogate}\\p{gc=Unassigned}]\n     * with space=\\p{Whitespace} and Control=Cc.\n     * Implements UCHAR_POSIX_GRAPH.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasBinaryProperty(int c, int which)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getType(int c)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getIntPropertyValue(int c, int which)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getIntPropertyMaxValue(int which)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final int getSource(int which)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getMaxValues(int column)",
    "returnType" : "int",
    "comment" : "\n     * Get the the maximum values for some enum/int properties.\n     * @return maximum values for the integer properties.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final int getMask(int type)",
    "returnType" : "int",
    "comment" : "\n     * Gets the type mask\n     * @param type character type\n     * @return mask\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getEuropeanDigit(int ch)",
    "returnType" : "int",
    "comment" : "\n     * Returns the digit values of characters like 'A' - 'Z', normal,\n     * half-width and full-width. This method assumes that the other digit\n     * characters are checked by the calling method.\n     * @param ch character to test\n     * @return -1 if ch is not a character of the form 'A' - 'Z', otherwise\n     *         its corresponding digit will be returned.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int digit(int c)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getNumericValue(int c)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public double getUnicodeNumericValue(int c)",
    "returnType" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static final int getNumericTypeValue(int props)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static final int ntvGetType(int ntv)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static final int mergeScriptCodeOrIndex(int scriptX)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public UnicodeSet addPropertyStarts(UnicodeSet set)",
    "returnType" : "UnicodeSet",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void upropsvec_addPropertyStarts(UnicodeSet set)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static UnicodeSet ulayout_addPropertyStarts(int src, UnicodeSet set)",
    "returnType" : "UnicodeSet",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void mathCompat_addPropertyStarts(UnicodeSet set)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasIDType(int c, int typeIndex)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasIDType(int c, IdentifierType type)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void maybeAddType(int value, int bit, IdentifierType t, EnumSet<IdentifierType> types)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getIDTypes(int c, EnumSet<IdentifierType> types)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public final int getProperty(int ch)", "public int getAdditional(int codepoint, int column)", "public VersionInfo getAge(int codepoint)", "private static final boolean isgraphPOSIX(int c)", "public boolean hasBinaryProperty(int c, int which)", "public int getType(int c)", "public int getIntPropertyValue(int c, int which)", "public int getIntPropertyMaxValue(int which)", " final int getSource(int which)", "public int getMaxValues(int column)", "public static final int getMask(int type)", "public static int getEuropeanDigit(int ch)", "public int digit(int c)", "public int getNumericValue(int c)", "public double getUnicodeNumericValue(int c)", "private static final int getNumericTypeValue(int props)", "private static final int ntvGetType(int ntv)", "public static final int mergeScriptCodeOrIndex(int scriptX)", "public UnicodeSet addPropertyStarts(UnicodeSet set)", "public void upropsvec_addPropertyStarts(UnicodeSet set)", " static UnicodeSet ulayout_addPropertyStarts(int src, UnicodeSet set)", " static void mathCompat_addPropertyStarts(UnicodeSet set)", "public boolean hasIDType(int c, int typeIndex)", "public boolean hasIDType(int c, IdentifierType type)", "private static void maybeAddType(int value, int bit, IdentifierType t, EnumSet<IdentifierType> types)", "public int getIDTypes(int c, EnumSet<IdentifierType> types)" ],
  "variableNames" : [ "INSTANCE", "m_trie_", "m_unicodeVersion_", "LATIN_CAPITAL_LETTER_I_WITH_DOT_ABOVE_", "LATIN_SMALL_LETTER_DOTLESS_I_", "LATIN_SMALL_LETTER_I_", "TYPE_MASK", "SRC_NONE", "SRC_CHAR", "SRC_PROPSVEC", "SRC_NAMES", "SRC_CASE", "SRC_BIDI", "SRC_CHAR_AND_PROPSVEC", "SRC_CASE_AND_NORM", "SRC_NFC", "SRC_NFKC", "SRC_NFKC_CF", "SRC_NFC_CANON_ITER", "SRC_INPC", "SRC_INSC", "SRC_VO", "SRC_EMOJI", "SRC_IDSU", "SRC_ID_COMPAT_MATH", "SRC_COUNT", "MY_MASK", "GC_CN_MASK", "GC_CC_MASK", "GC_CS_MASK", "GC_ZS_MASK", "GC_ZL_MASK", "GC_ZP_MASK", "GC_Z_MASK", "ID_COMPAT_MATH_CONTINUE", "ID_COMPAT_MATH_START", "binProps", "gcbToHst", "intProps", "m_additionalTrie_", "m_additionalVectors_", "m_additionalColumnsCount_", "m_maxBlockScriptValue_", "m_maxJTGValue_", "m_scriptExtensions_", "DATA_FILE_NAME_", "NUMERIC_TYPE_VALUE_SHIFT_", "NTV_NONE_", "NTV_DECIMAL_START_", "NTV_DIGIT_START_", "NTV_NUMERIC_START_", "NTV_FRACTION_START_", "NTV_LARGE_START_", "NTV_BASE60_START_", "NTV_FRACTION20_START_", "NTV_FRACTION32_START_", "NTV_RESERVED_START_", "SCRIPT_X_MASK", "SCRIPT_HIGH_MASK", "SCRIPT_HIGH_SHIFT", "MAX_SCRIPT", "EAST_ASIAN_MASK_", "EAST_ASIAN_SHIFT_", "BLOCK_MASK_", "BLOCK_SHIFT_", "SCRIPT_LOW_MASK", "SCRIPT_X_WITH_COMMON", "SCRIPT_X_WITH_INHERITED", "SCRIPT_X_WITH_OTHER", "WHITE_SPACE_PROPERTY_", "DASH_PROPERTY_", "HYPHEN_PROPERTY_", "QUOTATION_MARK_PROPERTY_", "TERMINAL_PUNCTUATION_PROPERTY_", "MATH_PROPERTY_", "HEX_DIGIT_PROPERTY_", "ASCII_HEX_DIGIT_PROPERTY_", "ALPHABETIC_PROPERTY_", "IDEOGRAPHIC_PROPERTY_", "DIACRITIC_PROPERTY_", "EXTENDER_PROPERTY_", "NONCHARACTER_CODE_POINT_PROPERTY_", "GRAPHEME_EXTEND_PROPERTY_", "GRAPHEME_LINK_PROPERTY_", "IDS_BINARY_OPERATOR_PROPERTY_", "IDS_TRINARY_OPERATOR_PROPERTY_", "RADICAL_PROPERTY_", "UNIFIED_IDEOGRAPH_PROPERTY_", "DEFAULT_IGNORABLE_CODE_POINT_PROPERTY_", "DEPRECATED_PROPERTY_", "LOGICAL_ORDER_EXCEPTION_PROPERTY_", "XID_START_PROPERTY_", "XID_CONTINUE_PROPERTY_", "ID_START_PROPERTY_", "ID_CONTINUE_PROPERTY_", "GRAPHEME_BASE_PROPERTY_", "S_TERM_PROPERTY_", "VARIATION_SELECTOR_PROPERTY_", "PATTERN_SYNTAX", "PATTERN_WHITE_SPACE", "PREPENDED_CONCATENATION_MARK", "ID_TYPE_SHIFT", "ID_TYPE_BIT", "ID_TYPE_EXCLUSION", "ID_TYPE_LIMITED_USE", "ID_TYPE_UNCOMMON_USE", "ID_TYPE_TECHNICAL", "ID_TYPE_OBSOLETE", "ID_TYPE_NOT_XID", "ID_TYPE_NOT_CHARACTER", "ID_TYPE_FORBIDDEN", "ID_TYPE_DEPRECATED", "ID_TYPE_DEFAULT_IGNORABLE", "ID_TYPE_NOT_NFKC", "ID_TYPE_ALLOWED_MIN", "ID_TYPE_INCLUSION", "ID_TYPE_RECOMMENDED", "idTypeToEncoded", "LB_MASK", "LB_SHIFT", "SB_MASK", "SB_SHIFT", "WB_MASK", "WB_SHIFT", "GCB_MASK", "GCB_SHIFT", "DECOMPOSITION_TYPE_MASK_", "FIRST_NIBBLE_SHIFT_", "LAST_NIBBLE_MASK_", "AGE_SHIFT_", "DATA_FORMAT", "TAB", "CR", "U_A", "U_F", "U_Z", "U_a", "U_f", "U_z", "DEL", "NL", "NBSP", "CGJ", "FIGURESP", "HAIRSP", "RLM", "NNBSP", "WJ", "INHSWAP", "NOMDIG", "U_FW_A", "U_FW_F", "U_FW_Z", "U_FW_a", "U_FW_f", "U_FW_z", "ZWNBSP" ]
}