{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/breakiter/CjkBreakEngine.java",
  "packageName" : "android.icu.impl.breakiter",
  "className" : "CjkBreakEngine",
  "comment" : "\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "fHangulWordSet",
    "type" : "UnicodeSet",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "fDigitOrOpenPunctuationOrAlphabetSet",
    "type" : "UnicodeSet",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "fClosePunctuationSet",
    "type" : "UnicodeSet",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "fDictionary",
    "type" : "DictionaryMatcher",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "fSkipSet",
    "type" : "HashSet<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "fMlBreakEngine",
    "type" : "MlBreakEngine",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "isCj",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "kMaxKatakanaLength",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "kMaxKatakanaGroupLength",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "maxSnlp",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "kint32max",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void initializeJapanesePhraseParamater()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void loadJapaneseExtensions()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void loadHiragana()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int getKatakanaCost(int wordlength)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isKatakana(int value)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int divideUpDictionaryRange(CharacterIterator inText, int startPos, int endPos, DequeI foundBreaks, boolean isPhraseBreaking)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String getPatternFromText(CharacterIterator text, StringBuffer sb, int start, int length)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void initializeJapanesePhraseParamater()", "private void loadJapaneseExtensions()", "private void loadHiragana()", "public boolean equals(Object obj)", "public int hashCode()", "private static int getKatakanaCost(int wordlength)", "private static boolean isKatakana(int value)", "public int divideUpDictionaryRange(CharacterIterator inText, int startPos, int endPos, DequeI foundBreaks, boolean isPhraseBreaking)", "private String getPatternFromText(CharacterIterator text, StringBuffer sb, int start, int length)" ],
  "variableNames" : [ "fHangulWordSet", "fDigitOrOpenPunctuationOrAlphabetSet", "fClosePunctuationSet", "fDictionary", "fSkipSet", "fMlBreakEngine", "isCj", "kMaxKatakanaLength", "kMaxKatakanaGroupLength", "maxSnlp", "kint32max" ]
}