{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/location/ContextHubClient.java",
  "packageName" : "android.hardware.location",
  "className" : "ContextHubClient",
  "comment" : "\n * A class describing a client of the Context Hub Service.\n *\n * <p>Clients can send messages to nanoapps at a Context Hub through this object. The APIs supported\n * by this object are thread-safe and can be used without external synchronization.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mClientProxy",
    "type" : "IContextHubClient",
    "comment" : "\n     * The proxy to the client interface at the service.\n     ",
    "links" : [ ]
  }, {
    "name" : "mAttachedHub",
    "type" : "ContextHubInfo",
    "comment" : "\n     * The Context Hub that this client is attached to.\n     ",
    "links" : [ ]
  }, {
    "name" : "mCloseGuard",
    "type" : "CloseGuard",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsClosed",
    "type" : "AtomicBoolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPersistent",
    "type" : "boolean",
    "comment" : "\n     * True if this is a persistent client (i.e. does not have to close the connection when the\n     * resource is freed from the system).\n     ",
    "links" : [ ]
  }, {
    "name" : "mId",
    "type" : "Integer",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " synchronized void setClientProxy(IContextHubClient clientProxy)",
    "returnType" : "void",
    "comment" : " package ",
    "links" : [ ]
  }, {
    "name" : "public ContextHubInfo getAttachedHub()",
    "returnType" : "ContextHubInfo",
    "comment" : "\n     * Returns the hub that this client is attached to.\n     *\n     * @return the ContextHubInfo of the attached hub\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getId()",
    "returnType" : "int",
    "comment" : "\n     * Returns the system-wide unique identifier for this ContextHubClient.\n     *\n     * <p>This value can be used as an identifier for the messaging channel between a\n     * ContextHubClient and the Context Hub. This may be used as a routing mechanism between various\n     * ContextHubClient objects within an application.\n     *\n     * <p>The value returned by this method will remain the same if it is associated with the same\n     * client reference at the ContextHubService (for instance, the ID of a PendingIntent\n     * ContextHubClient will remain the same even if the local object has been regenerated with the\n     * equivalent PendingIntent). If the ContextHubClient is newly generated (e.g. any regeneration\n     * of a callback client, or generation of a non-equal PendingIntent client), the ID will not be\n     * the same.\n     *\n     * @return The ID of this ContextHubClient, in the range [0, 65535].\n     ",
    "links" : [ ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "\n     * Closes the connection for this client and the Context Hub Service.\n     *\n     * <p>When this function is invoked, the messaging associated with this client is invalidated.\n     * All futures messages targeted for this client are dropped at the service, and the\n     * ContextHubClient is unregistered from the service.\n     *\n     * <p>If this object has a PendingIntent, i.e. the object was generated via {@link\n     * ContextHubManager#createClient(ContextHubInfo, PendingIntent, long)}, then the Intent events\n     * corresponding to the PendingIntent will no longer be triggered.\n     ",
    "links" : [ "android.hardware.location.ContextHubManager#createClient(ContextHubInfo" ]
  }, {
    "name" : "public int sendMessageToNanoApp(@NonNull NanoAppMessage message)",
    "returnType" : "int",
    "comment" : "\n     * Sends a message to a nanoapp through the Context Hub Service.\n     *\n     * This function returns RESULT_SUCCESS if the message has reached the HAL, but\n     * does not guarantee delivery of the message to the target nanoapp.\n     * <p>\n     * Before sending the first message to your nanoapp, it's recommended that the following\n     * operations should be performed:\n     * 1) Invoke {@link ContextHubManager#queryNanoApps(ContextHubInfo)} to verify the nanoapp is\n     *    present.\n     * 2) Validate that you have the permissions to communicate with the nanoapp by looking at\n     *    {@link NanoAppState#getNanoAppPermissions}.\n     * 3) If you don't have permissions, send an idempotent message to the nanoapp ensuring any\n     *    work your app previously may have asked it to do is stopped. This is useful if your app\n     *    restarts due to permission changes and no longer has the permissions when it is started\n     *    again.\n     * 4) If you have valid permissions, send a message to your nanoapp to resubscribe so that it's\n     *    aware you have restarted or so you can initially subscribe if this is the first time you\n     *    have sent it a message.\n     *\n     * @param message the message object to send\n     * @return the result of sending the message defined as in ContextHubTransaction.Result\n     * @throws NullPointerException if NanoAppMessage is null\n     * @throws SecurityException if this client doesn't have permissions to send a message to the\n     *     nanoapp.\n     * @see NanoAppMessage\n     * @see ContextHubTransaction.Result\n     ",
    "links" : [ "android.hardware.location.NanoAppState#getNanoAppPermissions", "android.hardware.location.ContextHubManager#queryNanoApps(ContextHubInfo)" ]
  }, {
    "name" : "public ContextHubTransaction<Void> sendReliableMessageToNanoApp(@NonNull NanoAppMessage message)",
    "returnType" : "ContextHubTransaction<Void>",
    "comment" : "\n     * Sends a reliable message to a nanoapp.\n     *\n     * This method is similar to {@link ContextHubClient#sendMessageToNanoApp} with the\n     * difference that it expects the message to be acknowledged by CHRE.\n     *\n     * The transaction succeeds after we received an ACK from CHRE without error.\n     * In all other cases the transaction will fail.\n     ",
    "links" : [ "android.hardware.location.ContextHubClient#sendMessageToNanoApp" ]
  }, {
    "name" : "private int doSendMessageToNanoApp(@NonNull NanoAppMessage message, @Nullable IContextHubTransactionCallback transactionCallback)",
    "returnType" : "int",
    "comment" : "\n     * Sends a message to a nanoapp.\n     *\n     * @param message The message to send.\n     * @param transactionCallback The callback to use when the message is reliable. null for regular\n     *         messages.\n     * @return A {@link ContextHubTransaction.Result} error code.\n     ",
    "links" : [ "ContextHubTransaction.Result" ]
  }, {
    "name" : "protected void finalize() throws Throwable",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public synchronized void callbackFinished()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void reliableMessageCallbackFinished(int messageSequenceNumber, byte errorCode)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private void waitForClientProxy()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "methodNames" : [ " synchronized void setClientProxy(IContextHubClient clientProxy)", "public ContextHubInfo getAttachedHub()", "public int getId()", "public void close()", "public int sendMessageToNanoApp(@NonNull NanoAppMessage message)", "public ContextHubTransaction<Void> sendReliableMessageToNanoApp(@NonNull NanoAppMessage message)", "private int doSendMessageToNanoApp(@NonNull NanoAppMessage message, @Nullable IContextHubTransactionCallback transactionCallback)", "protected void finalize() throws Throwable", "public synchronized void callbackFinished()", "public synchronized void reliableMessageCallbackFinished(int messageSequenceNumber, byte errorCode)", "private void waitForClientProxy()" ],
  "variableNames" : [ "TAG", "mClientProxy", "mAttachedHub", "mCloseGuard", "mIsClosed", "mPersistent", "mId" ]
}