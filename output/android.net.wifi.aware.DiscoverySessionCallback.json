{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/wifi/aware/DiscoverySessionCallback.java",
  "packageName" : "android.net.wifi.aware",
  "className" : "DiscoverySessionCallback",
  "comment" : "\n * Base class for Aware session events callbacks. Should be extended by\n * applications wanting notifications. The callbacks are set when a\n * publish or subscribe session is created using\n * {@link WifiAwareSession#publish(PublishConfig, DiscoverySessionCallback,\n * android.os.Handler)} or\n * {@link WifiAwareSession#subscribe(SubscribeConfig, DiscoverySessionCallback,\n * android.os.Handler)}.\n * <p>\n * A single callback is set at session creation - it cannot be replaced.\n ",
  "links" : [ "android.net.wifi.aware.WifiAwareSession#publish(PublishConfig", "android.net.wifi.aware.WifiAwareSession#subscribe(SubscribeConfig" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public void onPublishStarted(@NonNull PublishDiscoverySession session)",
    "returnType" : "void",
    "comment" : "\n     * Called when a publish operation is started successfully in response to a\n     * {@link WifiAwareSession#publish(PublishConfig, DiscoverySessionCallback,\n     * android.os.Handler)} operation.\n     *\n     * @param session The {@link PublishDiscoverySession} used to control the\n     *            discovery session.\n     ",
    "links" : [ "android.net.wifi.aware.WifiAwareSession#publish(PublishConfig", "android.net.wifi.aware.PublishDiscoverySession" ]
  }, {
    "name" : "public void onSubscribeStarted(@NonNull SubscribeDiscoverySession session)",
    "returnType" : "void",
    "comment" : "\n     * Called when a subscribe operation is started successfully in response to a\n     * {@link WifiAwareSession#subscribe(SubscribeConfig, DiscoverySessionCallback,\n     * android.os.Handler)} operation.\n     *\n     * @param session The {@link SubscribeDiscoverySession} used to control the\n     *            discovery session.\n     ",
    "links" : [ "android.net.wifi.aware.SubscribeDiscoverySession", "android.net.wifi.aware.WifiAwareSession#subscribe(SubscribeConfig" ]
  }, {
    "name" : "public void onSessionConfigUpdated()",
    "returnType" : "void",
    "comment" : "\n     * Called when a publish or subscribe discovery session configuration update request\n     * succeeds. Called in response to\n     * {@link PublishDiscoverySession#updatePublish(PublishConfig)} or\n     * {@link SubscribeDiscoverySession#updateSubscribe(SubscribeConfig)}.\n     ",
    "links" : [ "android.net.wifi.aware.PublishDiscoverySession#updatePublish(PublishConfig)", "android.net.wifi.aware.SubscribeDiscoverySession#updateSubscribe(SubscribeConfig)" ]
  }, {
    "name" : "public void onSessionConfigFailed()",
    "returnType" : "void",
    "comment" : "\n     * Called when a publish or subscribe discovery session cannot be created:\n     * {@link WifiAwareSession#publish(PublishConfig, DiscoverySessionCallback,\n     * android.os.Handler)} or\n     * {@link WifiAwareSession#subscribe(SubscribeConfig, DiscoverySessionCallback,\n     * android.os.Handler)}, or when a configuration update fails:\n     * {@link PublishDiscoverySession#updatePublish(PublishConfig)} or\n     * {@link SubscribeDiscoverySession#updateSubscribe(SubscribeConfig)}.\n     * <p>\n     *     For discovery session updates failure leaves the session running with its previous\n     *     configuration - the discovery session is not terminated.\n     ",
    "links" : [ "android.net.wifi.aware.PublishDiscoverySession#updatePublish(PublishConfig)", "android.net.wifi.aware.SubscribeDiscoverySession#updateSubscribe(SubscribeConfig)", "android.net.wifi.aware.WifiAwareSession#publish(PublishConfig", "android.net.wifi.aware.WifiAwareSession#subscribe(SubscribeConfig" ]
  }, {
    "name" : "public void onSessionTerminated()",
    "returnType" : "void",
    "comment" : "\n     * Called when a discovery session (publish or subscribe) terminates. Termination may be due\n     * to user-request (either directly through {@link DiscoverySession#close()} or\n     * application-specified expiration, e.g. {@link PublishConfig.Builder#setTtlSec(int)}\n     * or {@link SubscribeConfig.Builder#setTtlSec(int)}).\n     ",
    "links" : [ "PublishConfig.Builder#setTtlSec(int)", "android.net.wifi.aware.DiscoverySession#close()", "SubscribeConfig.Builder#setTtlSec(int)" ]
  }, {
    "name" : "public void onSessionSuspendSucceeded()",
    "returnType" : "void",
    "comment" : "\n     * Called when a discovery session (publish or subscribe) has been suspended successfully.\n     * Suspension is triggered by {@link DiscoverySession#suspend()}.\n     * @hide\n     ",
    "links" : [ "android.net.wifi.aware.DiscoverySession#suspend()" ]
  }, {
    "name" : "public void onSessionSuspendFailed(@WifiAwareManager.SessionSuspensionFailedReasonCode int reason)",
    "returnType" : "void",
    "comment" : "\n     * Called when a discovery session (publish or subscribe) has failed to be suspended\n     * successfully. Suspension is triggered by {@link DiscoverySession#suspend()}.\n     *\n     * @param reason One of:\n     *      {@link WifiAwareManager#WIFI_AWARE_SUSPEND_REDUNDANT_REQUEST},\n     *      {@link WifiAwareManager#WIFI_AWARE_SUSPEND_INVALID_SESSION},\n     *      {@link WifiAwareManager#WIFI_AWARE_SUSPEND_CANNOT_SUSPEND},\n     *      {@link WifiAwareManager#WIFI_AWARE_SUSPEND_INTERNAL_ERROR}\n     * @hide\n     ",
    "links" : [ "android.net.wifi.aware.WifiAwareManager#WIFI_AWARE_SUSPEND_REDUNDANT_REQUEST", "android.net.wifi.aware.WifiAwareManager#WIFI_AWARE_SUSPEND_CANNOT_SUSPEND", "android.net.wifi.aware.DiscoverySession#suspend()", "android.net.wifi.aware.WifiAwareManager#WIFI_AWARE_SUSPEND_INTERNAL_ERROR", "android.net.wifi.aware.WifiAwareManager#WIFI_AWARE_SUSPEND_INVALID_SESSION" ]
  }, {
    "name" : "public void onSessionResumeSucceeded()",
    "returnType" : "void",
    "comment" : "\n     * Called when a discovery session (publish or subscribe) has been resumed from suspension\n     * successfully. Resumption is triggered by {@link DiscoverySession#resume()}.\n     * @hide\n     ",
    "links" : [ "android.net.wifi.aware.DiscoverySession#resume()" ]
  }, {
    "name" : "public void onSessionResumeFailed(@WifiAwareManager.SessionResumptionFailedReasonCode int reason)",
    "returnType" : "void",
    "comment" : "\n     * Called when a discovery session (publish or subscribe) has failed to be resumed from\n     * suspension successfully. Resumption is triggered by {@link DiscoverySession#resume()}.\n     *\n     * @param reason One of:\n     *      {@link WifiAwareManager#WIFI_AWARE_RESUME_REDUNDANT_REQUEST},\n     *      {@link WifiAwareManager#WIFI_AWARE_RESUME_INVALID_SESSION},\n     *      {@link WifiAwareManager#WIFI_AWARE_RESUME_INTERNAL_ERROR}\n     * @hide\n     ",
    "links" : [ "android.net.wifi.aware.DiscoverySession#resume()", "android.net.wifi.aware.WifiAwareManager#WIFI_AWARE_RESUME_REDUNDANT_REQUEST", "android.net.wifi.aware.WifiAwareManager#WIFI_AWARE_RESUME_INVALID_SESSION", "android.net.wifi.aware.WifiAwareManager#WIFI_AWARE_RESUME_INTERNAL_ERROR" ]
  }, {
    "name" : "public void onServiceDiscovered(PeerHandle peerHandle, byte[] serviceSpecificInfo, List<byte[]> matchFilter)",
    "returnType" : "void",
    "comment" : "\n     * Called when a subscribe operation results in a service discovery.\n     * <p>\n     * Note that this method and\n     * {@link #onServiceDiscoveredWithinRange(PeerHandle, byte[], List, int)} may be called\n     * multiple times per service discovery.\n     * <p>\n     * Note: This method is superseded by {@link #onServiceDiscovered(ServiceDiscoveryInfo)} which\n     * returns more information. Note that both legacy and new callback will be triggered on\n     * discovery.\n     *\n     * @param peerHandle An opaque handle to the peer matching our discovery operation.\n     * @param serviceSpecificInfo The service specific information (arbitrary\n     *            byte array) provided by the peer as part of its discovery\n     *            configuration.\n     * @param matchFilter The filter which resulted in this service discovery. For\n     * {@link PublishConfig#PUBLISH_TYPE_UNSOLICITED},\n     * {@link SubscribeConfig#SUBSCRIBE_TYPE_PASSIVE} discovery sessions this is the publisher's\n     *                    match filter. For {@link PublishConfig#PUBLISH_TYPE_SOLICITED},\n     *                    {@link SubscribeConfig#SUBSCRIBE_TYPE_ACTIVE} discovery sessions this\n     *                    is the subscriber's match filter.\n     ",
    "links" : [ "android.net.wifi.aware.SubscribeConfig#SUBSCRIBE_TYPE_PASSIVE", "android.net.wifi.aware.PublishConfig#PUBLISH_TYPE_UNSOLICITED", "#onServiceDiscoveredWithinRange(PeerHandle", "android.net.wifi.aware.PublishConfig#PUBLISH_TYPE_SOLICITED", "android.net.wifi.aware.SubscribeConfig#SUBSCRIBE_TYPE_ACTIVE", "#onServiceDiscovered(ServiceDiscoveryInfo)" ]
  }, {
    "name" : "public void onServiceDiscovered(@NonNull ServiceDiscoveryInfo info)",
    "returnType" : "void",
    "comment" : "\n     * Called when a subscribe operation results in a service discovery.\n     * <p>\n     * Note: This method supersedes {@link #onServiceDiscovered(PeerHandle, byte[], List)} and\n     * provides additional information - including cipher suite type and security context of the\n     * peer. Both the legacy and the new callback will be triggered on discovery.\n     *\n     * @param info A {@link ServiceDiscoveryInfo} structure containing information on the discovery\n     *             session and the discovered peer.\n     ",
    "links" : [ "android.net.wifi.aware.ServiceDiscoveryInfo", "#onServiceDiscovered(PeerHandle" ]
  }, {
    "name" : "public void onServiceDiscoveredWithinRange(PeerHandle peerHandle, byte[] serviceSpecificInfo, List<byte[]> matchFilter, int distanceMm)",
    "returnType" : "void",
    "comment" : "\n     * Called when a subscribe operation results in a\n     * service discovery. Called when a Subscribe service was configured with a range requirement\n     * {@link SubscribeConfig.Builder#setMinDistanceMm(int)} and/or\n     * {@link SubscribeConfig.Builder#setMaxDistanceMm(int)} and the Publish service was configured\n     * with {@link PublishConfig.Builder#setRangingEnabled(boolean)}.\n     * <p>\n     * If either Publisher or Subscriber does not enable Ranging, or if Ranging is temporarily\n     * disabled by the underlying device, service discovery proceeds without ranging and the\n     * {@link #onServiceDiscovered(PeerHandle, byte[], List)} is called.\n     * <p>\n     * Note that this method and {@link #onServiceDiscovered(PeerHandle, byte[], List)} may be\n     * called multiple times per service discovery.\n     * <p>\n     * Note: This method is superseded by\n     * {@link #onServiceDiscoveredWithinRange(ServiceDiscoveryInfo, int)} which returns more\n     * information. Note that both legacy and new callback will be triggered on discovery.\n     *\n     * @param peerHandle An opaque handle to the peer matching our discovery operation.\n     * @param serviceSpecificInfo The service specific information (arbitrary\n     *            byte array) provided by the peer as part of its discovery\n     *            configuration.\n     * @param matchFilter The filter which resulted in this service discovery. For\n     * {@link PublishConfig#PUBLISH_TYPE_UNSOLICITED},\n     * {@link SubscribeConfig#SUBSCRIBE_TYPE_PASSIVE} discovery sessions this is the publisher's\n     *                    match filter. For {@link PublishConfig#PUBLISH_TYPE_SOLICITED},\n     *                    {@link SubscribeConfig#SUBSCRIBE_TYPE_ACTIVE} discovery sessions this\n     *                    is the subscriber's match filter.\n     * @param distanceMm The measured distance to the Publisher in mm. Note: the measured distance\n     *                   may be negative for very close devices.\n     ",
    "links" : [ "PublishConfig.Builder#setRangingEnabled(boolean)", "android.net.wifi.aware.SubscribeConfig#SUBSCRIBE_TYPE_PASSIVE", "android.net.wifi.aware.PublishConfig#PUBLISH_TYPE_UNSOLICITED", "android.net.wifi.aware.PublishConfig#PUBLISH_TYPE_SOLICITED", "android.net.wifi.aware.SubscribeConfig#SUBSCRIBE_TYPE_ACTIVE", "#onServiceDiscovered(PeerHandle", "#onServiceDiscoveredWithinRange(ServiceDiscoveryInfo", "SubscribeConfig.Builder#setMinDistanceMm(int)", "SubscribeConfig.Builder#setMaxDistanceMm(int)" ]
  }, {
    "name" : "public void onServiceDiscoveredWithinRange(@NonNull ServiceDiscoveryInfo info, int distanceMm)",
    "returnType" : "void",
    "comment" : "\n     * Called when a subscribe operation results in a\n     * service discovery. Called when a Subscribe service was configured with a range requirement\n     * {@link SubscribeConfig.Builder#setMinDistanceMm(int)} and/or\n     * {@link SubscribeConfig.Builder#setMaxDistanceMm(int)} and the Publish service was configured\n     * with {@link PublishConfig.Builder#setRangingEnabled(boolean)}.\n     * <p>\n     * If either Publisher or Subscriber does not enable Ranging, or if Ranging is temporarily\n     * disabled by the underlying device, service discovery proceeds without ranging and the\n     * {@link #onServiceDiscovered(PeerHandle, byte[], List)} is called.\n     * <p>\n     * Note: This method supersedes\n     * {@link #onServiceDiscoveredWithinRange(PeerHandle, byte[], List, int)} and provides\n     * additional information - including cipher suite type and security context of the peer. Both\n     * the legacy and the new callback will be triggered on discovery.\n     *\n     * @param info A {@link ServiceDiscoveryInfo} which indicate service config of the descovery\n     *             sessions.\n     * @param distanceMm The measured distance to the Publisher in mm. Note: the measured distance\n *                   may be negative for very close devices.\n     ",
    "links" : [ "android.net.wifi.aware.ServiceDiscoveryInfo", "PublishConfig.Builder#setRangingEnabled(boolean)", "#onServiceDiscoveredWithinRange(PeerHandle", "#onServiceDiscovered(PeerHandle", "SubscribeConfig.Builder#setMinDistanceMm(int)", "SubscribeConfig.Builder#setMaxDistanceMm(int)" ]
  }, {
    "name" : "public void onMessageSendSucceeded(@SuppressWarnings(\"unused\") int messageId)",
    "returnType" : "void",
    "comment" : "\n     * Called in response to\n     * {@link DiscoverySession#sendMessage(PeerHandle, int, byte[])}\n     * when a message is transmitted successfully - i.e. when it was received successfully by the\n     * peer (corresponds to an ACK being received).\n     * <p>\n     * Note that either this callback or\n     * {@link DiscoverySessionCallback#onMessageSendFailed(int)} will be\n     * received - never both.\n     *\n     * @param messageId The arbitrary message ID specified when sending the message.\n     ",
    "links" : [ "android.net.wifi.aware.DiscoverySessionCallback#onMessageSendFailed(int)", "android.net.wifi.aware.DiscoverySession#sendMessage(PeerHandle" ]
  }, {
    "name" : "public void onMessageSendFailed(@SuppressWarnings(\"unused\") int messageId)",
    "returnType" : "void",
    "comment" : "\n     * Called when message transmission initiated with\n     * {@link DiscoverySession#sendMessage(PeerHandle, int, byte[])} fails. E.g. when no ACK is\n     * received from the peer.\n     * <p>\n     * Note that either this callback or\n     * {@link DiscoverySessionCallback#onMessageSendSucceeded(int)} will be received\n     * - never both.\n     *\n     * @param messageId The arbitrary message ID specified when sending the message.\n     ",
    "links" : [ "android.net.wifi.aware.DiscoverySession#sendMessage(PeerHandle", "android.net.wifi.aware.DiscoverySessionCallback#onMessageSendSucceeded(int)" ]
  }, {
    "name" : "public void onMessageReceived(PeerHandle peerHandle, byte[] message)",
    "returnType" : "void",
    "comment" : "\n     * Called when a message is received from a discovery session peer - in response to the\n     * peer's {@link DiscoverySession#sendMessage(PeerHandle, int, byte[])}.\n     *\n     * @param peerHandle An opaque handle to the peer matching our discovery operation.\n     * @param message A byte array containing the message.\n     ",
    "links" : [ "android.net.wifi.aware.DiscoverySession#sendMessage(PeerHandle" ]
  }, {
    "name" : "public void onServiceLost(@NonNull PeerHandle peerHandle, @WifiAwareManager.DiscoveryLostReasonCode int reason)",
    "returnType" : "void",
    "comment" : "\n     * Called when the discovered service is not available. All further operations on this\n     * discovery session will fail. If the service is available again,\n     * {@link #onServiceDiscovered(PeerHandle, byte[], List)} or\n     * {@link #onServiceDiscoveredWithinRange(PeerHandle, byte[], List, int)} will be called.\n     *\n     * @param peerHandle An opaque handle to the peer matching our discovery operation.\n     * @param reason Discovered service lost reason code. One of\n     *               {@link WifiAwareManager#WIFI_AWARE_DISCOVERY_LOST_REASON_PEER_NOT_VISIBLE},\n     *               {@link WifiAwareManager#WIFI_AWARE_DISCOVERY_LOST_REASON_UNKNOWN\n     ",
    "links" : [ "android.net.wifi.aware.WifiAwareManager#WIFI_AWARE_DISCOVERY_LOST_REASON_UNKNOWN", "android.net.wifi.aware.WifiAwareManager#WIFI_AWARE_DISCOVERY_LOST_REASON_PEER_NOT_VISIBLE", "#onServiceDiscoveredWithinRange(PeerHandle", "#onServiceDiscovered(PeerHandle" ]
  }, {
    "name" : "public void onPairingSetupRequestReceived(@NonNull PeerHandle peerHandle, int requestId)",
    "returnType" : "void",
    "comment" : "\n     * Callback indicating that a pairing request is received from peer.\n     *\n     * @param peerHandle The peer's handle where the request is from\n     * @param requestId The ID of the Aware pairing session\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onPairingSetupSucceeded(@NonNull PeerHandle peerHandle, @NonNull String alias)",
    "returnType" : "void",
    "comment" : "\n     * Callback indicating that a pairing setup process succeeded.\n     *\n     * @param peerHandle The pairing peer handle.\n     * @param alias      This is the paired device alias set by the caller.\n     *                   {@link DiscoverySession#initiatePairingRequest(PeerHandle, String, int, String)}\n     *                   or\n     *                   {@link DiscoverySession#acceptPairingRequest(int, PeerHandle, String, int, String)}\n     ",
    "links" : [ "android.net.wifi.aware.DiscoverySession#acceptPairingRequest(int", "android.net.wifi.aware.DiscoverySession#initiatePairingRequest(PeerHandle" ]
  }, {
    "name" : "public void onPairingSetupFailed(@NonNull PeerHandle peerHandle)",
    "returnType" : "void",
    "comment" : "\n     * Callback indicating that a pairing setup process failed.\n     *\n     * @param peerHandle The pairing peer handle.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onPairingVerificationSucceed(@NonNull PeerHandle peerHandle, @NonNull String alias)",
    "returnType" : "void",
    "comment" : "\n     * Callback indicating that a pairing verification process succeeded.\n     *\n     * @param peerHandle The pairing peer handle\n     * @param alias      This is the paired device alias set by the caller.\n     *                   {@link DiscoverySession#initiatePairingRequest(PeerHandle, String, int, String)}\n     *                   or\n     *                   {@link DiscoverySession#acceptPairingRequest(int, PeerHandle, String, int, String)}\n     ",
    "links" : [ "android.net.wifi.aware.DiscoverySession#acceptPairingRequest(int", "android.net.wifi.aware.DiscoverySession#initiatePairingRequest(PeerHandle" ]
  }, {
    "name" : "public void onPairingVerificationFailed(@NonNull PeerHandle peerHandle)",
    "returnType" : "void",
    "comment" : "\n     * Callback indicating that a pairing verification process failed.\n     *\n     * @param peerHandle The pairing peer handle\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onBootstrappingSucceeded(@NonNull PeerHandle peerHandle, @AwarePairingConfig.BootstrappingMethod int method)",
    "returnType" : "void",
    "comment" : "\n     * Callback indicating that a Bootstrapping method negotiation succeeded.\n     * The follow-up out-of-band bootstrapping can start\n     *\n     * @param peerHandle The bootstrapping peer handle\n     * @param method     The bootstrapping method accept by the peer\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onBootstrappingFailed(@NonNull PeerHandle peerHandle)",
    "returnType" : "void",
    "comment" : "\n     * Callback indicating that a Bootstrapping method negotiation failed.\n     *\n     * @param peerHandle The bootstrapping peer handle\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void onPublishStarted(@NonNull PublishDiscoverySession session)", "public void onSubscribeStarted(@NonNull SubscribeDiscoverySession session)", "public void onSessionConfigUpdated()", "public void onSessionConfigFailed()", "public void onSessionTerminated()", "public void onSessionSuspendSucceeded()", "public void onSessionSuspendFailed(@WifiAwareManager.SessionSuspensionFailedReasonCode int reason)", "public void onSessionResumeSucceeded()", "public void onSessionResumeFailed(@WifiAwareManager.SessionResumptionFailedReasonCode int reason)", "public void onServiceDiscovered(PeerHandle peerHandle, byte[] serviceSpecificInfo, List<byte[]> matchFilter)", "public void onServiceDiscovered(@NonNull ServiceDiscoveryInfo info)", "public void onServiceDiscoveredWithinRange(PeerHandle peerHandle, byte[] serviceSpecificInfo, List<byte[]> matchFilter, int distanceMm)", "public void onServiceDiscoveredWithinRange(@NonNull ServiceDiscoveryInfo info, int distanceMm)", "public void onMessageSendSucceeded(@SuppressWarnings(\"unused\") int messageId)", "public void onMessageSendFailed(@SuppressWarnings(\"unused\") int messageId)", "public void onMessageReceived(PeerHandle peerHandle, byte[] message)", "public void onServiceLost(@NonNull PeerHandle peerHandle, @WifiAwareManager.DiscoveryLostReasonCode int reason)", "public void onPairingSetupRequestReceived(@NonNull PeerHandle peerHandle, int requestId)", "public void onPairingSetupSucceeded(@NonNull PeerHandle peerHandle, @NonNull String alias)", "public void onPairingSetupFailed(@NonNull PeerHandle peerHandle)", "public void onPairingVerificationSucceed(@NonNull PeerHandle peerHandle, @NonNull String alias)", "public void onPairingVerificationFailed(@NonNull PeerHandle peerHandle)", "public void onBootstrappingSucceeded(@NonNull PeerHandle peerHandle, @AwarePairingConfig.BootstrappingMethod int method)", "public void onBootstrappingFailed(@NonNull PeerHandle peerHandle)" ],
  "variableNames" : [ ]
}