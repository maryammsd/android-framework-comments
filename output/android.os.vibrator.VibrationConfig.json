{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/os/vibrator/VibrationConfig.java",
  "packageName" : "android.os.vibrator",
  "className" : "VibrationConfig",
  "comment" : "\n * List of device-specific internal vibration configuration loaded from platform config.xml.\n *\n * <p>This should not be public, but some individual values are exposed by {@link Vibrator} by\n * hidden methods, made available to Settings, SysUI and other platform client code. They can also\n * be individually exposed with the necessary permissions by the {@link Vibrator} service.\n *\n * @hide\n ",
  "links" : [ "android.os.Vibrator" ],
  "variables" : [ {
    "name" : "mHapticChannelMaxVibrationAmplitude",
    "type" : "float",
    "comment" : " TODO(b/191150049): move these to vibrator static config file",
    "links" : [ ]
  }, {
    "name" : "mRampStepDurationMs",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRampDownDurationMs",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRequestVibrationParamsTimeoutMs",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRequestVibrationParamsForUsages",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIgnoreVibrationsOnWirelessCharger",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDefaultAlarmVibrationIntensity",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDefaultHapticFeedbackIntensity",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDefaultMediaVibrationIntensity",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDefaultNotificationVibrationIntensity",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDefaultRingVibrationIntensity",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDefaultKeyboardVibrationEnabled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHasFixedKeyboardAmplitude",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static int loadDefaultIntensity(@Nullable Resources res, int resId)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static float loadFloat(@Nullable Resources res, int resId, float defaultValue)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int loadInteger(@Nullable Resources res, int resId, int defaultValue)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean loadBoolean(@Nullable Resources res, int resId, boolean defaultValue)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int[] loadIntArray(@Nullable Resources res, int resId)",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public float getHapticChannelMaximumAmplitude()",
    "returnType" : "float",
    "comment" : "\n     * Return the maximum amplitude the vibrator can play using the audio haptic channels.\n     *\n     * @return a positive value representing the maximum absolute value the device can play signals\n     * from audio haptic channels, or {@link Float#NaN NaN} if it's unknown.\n     ",
    "links" : [ "#NaN" ]
  }, {
    "name" : "public int getRampDownDurationMs()",
    "returnType" : "int",
    "comment" : "\n     * The duration, in milliseconds, that should be applied to the ramp to turn off the vibrator\n     * when a vibration is cancelled or finished at non-zero amplitude.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getRequestVibrationParamsTimeoutMs()",
    "returnType" : "int",
    "comment" : "\n     * The duration, in milliseconds, that the vibrator control service will wait for new\n     * vibration params.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int[] getRequestVibrationParamsForUsages()",
    "returnType" : "int[]",
    "comment" : "\n     * The list of usages that should request vibration params before they are played. These\n     * usages don't have strong latency requirements, e.g. ringtone and notification, and can be\n     * slightly delayed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getRampStepDurationMs()",
    "returnType" : "int",
    "comment" : "\n     * The duration, in milliseconds, that should be applied to convert vibration effect's\n     * {@link android.os.vibrator.RampSegment} to a {@link android.os.vibrator.StepSegment} on\n     * devices without PWLE support.\n     ",
    "links" : [ "android.os.vibrator.RampSegment", "android.os.vibrator.StepSegment" ]
  }, {
    "name" : "public boolean ignoreVibrationsOnWirelessCharger()",
    "returnType" : "boolean",
    "comment" : "\n     * Whether or not vibrations are ignored if the device is on a wireless charger.\n     *\n     * <p>This may be the case if vibration during wireless charging causes unwanted results, like\n     * moving the device out of alignment with the charging pad.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isDefaultKeyboardVibrationEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Whether keyboard vibration settings is enabled by default.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasFixedKeyboardAmplitude()",
    "returnType" : "boolean",
    "comment" : "\n     * Whether the device has a fixed amplitude for keyboard.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getDefaultVibrationIntensity(@VibrationAttributes.Usage int usage)",
    "returnType" : "int",
    "comment" : " Get the default vibration intensity for given usage. ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dumpWithoutDefaultSettings(IndentingPrintWriter pw)",
    "returnType" : "void",
    "comment" : "\n     * Write current settings into given {@link PrintWriter}, skipping the default settings.\n     *\n     * @hide\n     ",
    "links" : [ "android.util.IndentingPrintWriter" ]
  }, {
    "name" : "private String[] getRequestVibrationParamsForUsagesNames()",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static int loadDefaultIntensity(@Nullable Resources res, int resId)", "private static float loadFloat(@Nullable Resources res, int resId, float defaultValue)", "private static int loadInteger(@Nullable Resources res, int resId, int defaultValue)", "private static boolean loadBoolean(@Nullable Resources res, int resId, boolean defaultValue)", "private static int[] loadIntArray(@Nullable Resources res, int resId)", "public float getHapticChannelMaximumAmplitude()", "public int getRampDownDurationMs()", "public int getRequestVibrationParamsTimeoutMs()", "public int[] getRequestVibrationParamsForUsages()", "public int getRampStepDurationMs()", "public boolean ignoreVibrationsOnWirelessCharger()", "public boolean isDefaultKeyboardVibrationEnabled()", "public boolean hasFixedKeyboardAmplitude()", "public int getDefaultVibrationIntensity(@VibrationAttributes.Usage int usage)", "public String toString()", "public void dumpWithoutDefaultSettings(IndentingPrintWriter pw)", "private String[] getRequestVibrationParamsForUsagesNames()" ],
  "variableNames" : [ "mHapticChannelMaxVibrationAmplitude", "mRampStepDurationMs", "mRampDownDurationMs", "mRequestVibrationParamsTimeoutMs", "mRequestVibrationParamsForUsages", "mIgnoreVibrationsOnWirelessCharger", "mDefaultAlarmVibrationIntensity", "mDefaultHapticFeedbackIntensity", "mDefaultMediaVibrationIntensity", "mDefaultNotificationVibrationIntensity", "mDefaultRingVibrationIntensity", "mDefaultKeyboardVibrationEnabled", "mHasFixedKeyboardAmplitude" ]
}