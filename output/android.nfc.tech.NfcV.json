{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/nfc/tech/NfcV.java",
  "packageName" : "android.nfc.tech",
  "className" : "NfcV",
  "comment" : "\n * Provides access to NFC-V (ISO 15693) properties and I/O operations on a {@link Tag}.\n *\n * <p>Acquire a {@link NfcV} object using {@link #get}.\n * <p>The primary NFC-V I/O operation is {@link #transceive}. Applications must\n * implement their own protocol stack on top of {@link #transceive}.\n *\n * <p class=\"note\"><strong>Note:</strong> Methods that perform I/O operations\n * require the {@link android.Manifest.permission#NFC} permission.\n ",
  "links" : [ "android.Manifest.permission#NFC", "android.nfc.Tag", "#get", "#transceive", "android.nfc.tech.NfcV" ],
  "variables" : [ {
    "name" : "EXTRA_RESP_FLAGS",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_DSFID",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "mRespFlags",
    "type" : "byte",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDsfId",
    "type" : "byte",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static NfcV get(Tag tag)",
    "returnType" : "NfcV",
    "comment" : "\n     * Get an instance of {@link NfcV} for the given tag.\n     * <p>Returns null if {@link NfcV} was not enumerated in {@link Tag#getTechList}.\n     * This indicates the tag does not support NFC-V.\n     * <p>Does not cause any RF activity and does not block.\n     *\n     * @param tag an NFC-V compatible tag\n     * @return NFC-V object\n     ",
    "links" : [ "android.nfc.Tag#getTechList", "android.nfc.tech.NfcV" ]
  }, {
    "name" : "public byte getResponseFlags()",
    "returnType" : "byte",
    "comment" : "\n     * Return the Response Flag bytes from tag discovery.\n     *\n     * <p>Does not cause any RF activity and does not block.\n     *\n     * @return Response Flag bytes\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte getDsfId()",
    "returnType" : "byte",
    "comment" : "\n     * Return the DSF ID bytes from tag discovery.\n     *\n     * <p>Does not cause any RF activity and does not block.\n     *\n     * @return DSF ID bytes\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] transceive(byte[] data) throws IOException",
    "returnType" : "byte[]",
    "comment" : "\n     * Send raw NFC-V commands to the tag and receive the response.\n     *\n     * <p>Applications must not append the CRC to the payload,\n     * it will be automatically calculated. The application does\n     * provide FLAGS, CMD and PARAMETER bytes.\n     *\n     * <p>Use {@link #getMaxTransceiveLength} to retrieve the maximum amount of bytes\n     * that can be sent with {@link #transceive}.\n     *\n     * <p>This is an I/O operation and will block until complete. It must\n     * not be called from the main application thread. A blocked call will be canceled with\n     * {@link IOException} if {@link #close} is called from another thread.\n     *\n     * <p class=\"note\">Requires the {@link android.Manifest.permission#NFC} permission.\n     *\n     * @param data bytes to send\n     * @return bytes received in response\n     * @throws TagLostException if the tag leaves the field\n     * @throws IOException if there is an I/O failure, or this operation is canceled\n     ",
    "links" : [ "android.Manifest.permission#NFC", "#transceive", "#getMaxTransceiveLength", "java.io.IOException", "#close" ]
  }, {
    "name" : "public int getMaxTransceiveLength()",
    "returnType" : "int",
    "comment" : "\n     * Return the maximum number of bytes that can be sent with {@link #transceive}.\n     * @return the maximum number of bytes that can be sent with {@link #transceive}.\n     ",
    "links" : [ "#transceive" ]
  } ],
  "methodNames" : [ "public static NfcV get(Tag tag)", "public byte getResponseFlags()", "public byte getDsfId()", "public byte[] transceive(byte[] data) throws IOException", "public int getMaxTransceiveLength()" ],
  "variableNames" : [ "EXTRA_RESP_FLAGS", "EXTRA_DSFID", "mRespFlags", "mDsfId" ]
}