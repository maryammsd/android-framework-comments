{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/projection/MediaProjection.java",
  "packageName" : "android.media.projection",
  "className" : "Callback",
  "comment" : "\n     * Callbacks for the projection session.\n     ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public void onStop()",
    "returnType" : "void",
    "comment" : "\n         * Called when the MediaProjection session is no longer valid.\n         *\n         * <p>Once a MediaProjection has been stopped, it's up to the application to release any\n         * resources it may be holding (e.g. releasing the {@link VirtualDisplay} and\n         * {@link Surface}).\n         ",
    "links" : [ "android.view.Surface", "android.hardware.display.VirtualDisplay" ]
  }, {
    "name" : "public void onCapturedContentResize(int width, int height)",
    "returnType" : "void",
    "comment" : "\n         * Invoked immediately after capture begins or when the size of the captured region changes,\n         * providing the accurate sizing for the streamed capture.\n         *\n         * <p>The given width and height, in pixels, corresponds to the same width and height that\n         * would be returned from {@link android.view.WindowMetrics#getBounds()} of the captured\n         * region.\n         *\n         * <p>If the recorded content has a different aspect ratio from either the\n         * {@link VirtualDisplay} or output {@link Surface}, the captured stream has letterboxing\n         * (black bars) around the recorded content. The application can avoid the letterboxing\n         * around the recorded content by updating the size of both the {@link VirtualDisplay} and\n         * output {@link Surface}:\n         *\n         * <pre>\n         * &#x40;Override\n         * public String onCapturedContentResize(int width, int height) {\n         *     // VirtualDisplay instance from MediaProjection#createVirtualDisplay\n         *     virtualDisplay.resize(width, height, dpi);\n         *\n         *     // Create a new Surface with the updated size (depending on the application's use\n         *     // case, this may be through different APIs - see Surface documentation for\n         *     // options).\n         *     int texName; // the OpenGL texture object name\n         *     SurfaceTexture surfaceTexture = new SurfaceTexture(texName);\n         *     surfaceTexture.setDefaultBufferSize(width, height);\n         *     Surface surface = new Surface(surfaceTexture);\n         *\n         *     // Ensure the VirtualDisplay has the updated Surface to send the capture to.\n         *     virtualDisplay.setSurface(surface);\n         * }</pre>\n         ",
    "links" : [ "android.view.WindowMetrics#getBounds()", "android.view.Surface", "android.hardware.display.VirtualDisplay" ]
  }, {
    "name" : "public void onCapturedContentVisibilityChanged(boolean isVisible)",
    "returnType" : "void",
    "comment" : "\n         * Invoked immediately after capture begins or when the visibility of the captured region\n         * changes, providing the current visibility of the captured region.\n         *\n         * <p>Applications can take advantage of this callback by showing or hiding the captured\n         * content from the output {@link Surface}, based on if the captured region is currently\n         * visible to the user.\n         *\n         * <p>For example, if the user elected to capture a single app (from the activity shown from\n         * {@link MediaProjectionManager#createScreenCaptureIntent()}), the following scenarios\n         * trigger the callback:\n         * <ul>\n         *     <li>\n         *         The captured region is visible ({@code isVisible} with value {@code true}),\n         *         because the captured app is at least partially visible. This may happen if the\n         *         user moves the covering app to show at least some portion of the captured app\n         *         (e.g. the user has multiple apps visible in a multi-window mode such as split\n         *         screen).\n         *     </li>\n         *     <li>\n         *         The captured region is invisible ({@code isVisible} with value {@code false}) if\n         *         it is entirely hidden. This may happen if another app entirely covers the\n         *         captured app, or the user navigates away from the captured app.\n         *     </li>\n         * </ul>\n         ",
    "links" : [ "android.view.Surface", "android.media.projection.MediaProjectionManager#createScreenCaptureIntent()" ]
  } ],
  "methodNames" : [ "public void onStop()", "public void onCapturedContentResize(int width, int height)", "public void onCapturedContentVisibilityChanged(boolean isVisible)" ],
  "variableNames" : [ ]
}