{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/widget/Editor.java",
  "packageName" : "android.widget",
  "className" : "HandleView",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "mDrawable",
    "type" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDrawableLtr",
    "type" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDrawableRtl",
    "type" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContainer",
    "type" : "PopupWindow",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPositionX",
    "type" : "int",
    "comment" : " Position with respect to the parent TextView",
    "links" : [ ]
  }, {
    "name" : "mPositionY",
    "type" : "int",
    "comment" : " Position with respect to the parent TextView",
    "links" : [ ]
  }, {
    "name" : "mIsDragging",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTouchToWindowOffsetX",
    "type" : "float",
    "comment" : " Offset from touch position to mPosition",
    "links" : [ ]
  }, {
    "name" : "mTouchToWindowOffsetY",
    "type" : "float",
    "comment" : " Offset from touch position to mPosition",
    "links" : [ ]
  }, {
    "name" : "mHotspotX",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHorizontalGravity",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTouchOffsetY",
    "type" : "float",
    "comment" : " Offsets the hotspot point up, so that cursor is not hidden by the finger when moving up",
    "links" : [ ]
  }, {
    "name" : "mIdealVerticalOffset",
    "type" : "float",
    "comment" : " This is the distance in pixels from the top of the handle view.",
    "links" : [ ]
  }, {
    "name" : "mLastParentX",
    "type" : "int",
    "comment" : " Parent's (TextView) previous position in window",
    "links" : [ ]
  }, {
    "name" : "mLastParentY",
    "type" : "int",
    "comment" : " Parent's (TextView) previous position in window",
    "links" : [ ]
  }, {
    "name" : "mLastParentXOnScreen",
    "type" : "int",
    "comment" : " Parent's (TextView) previous position on screen",
    "links" : [ ]
  }, {
    "name" : "mLastParentYOnScreen",
    "type" : "int",
    "comment" : " Parent's (TextView) previous position on screen",
    "links" : [ ]
  }, {
    "name" : "mPreviousOffset",
    "type" : "int",
    "comment" : " Previous text character offset",
    "links" : [ ]
  }, {
    "name" : "mPositionHasChanged",
    "type" : "boolean",
    "comment" : " Previous text character offset",
    "links" : [ ]
  }, {
    "name" : "mMinSize",
    "type" : "int",
    "comment" : " Minimum touch target size for handles",
    "links" : [ ]
  }, {
    "name" : "mPrevLine",
    "type" : "int",
    "comment" : " Indicates the line of text that the handle is on.",
    "links" : [ ]
  }, {
    "name" : "mPreviousLineTouched",
    "type" : "int",
    "comment" : " a different line.",
    "links" : [ ]
  }, {
    "name" : "mCurrentDragInitialTouchRawX",
    "type" : "float",
    "comment" : " Only used and stored when magnifier is used.",
    "links" : [ ]
  }, {
    "name" : "mTextViewScaleX",
    "type" : "float",
    "comment" : " when magnifier is used.",
    "links" : [ ]
  }, {
    "name" : "mTextViewScaleY",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIdealFingerToCursorOffset",
    "type" : "int",
    "comment" : "\n         * The vertical distance in pixels from finger to the cursor Y while dragging.\n         * See {@link Editor.InsertionPointCursorController#getLineDuringDrag}.\n         ",
    "links" : [ "Editor.InsertionPointCursorController#getLineDuringDrag" ]
  }, {
    "name" : "HISTORY_SIZE",
    "type" : "int",
    "comment" : " Touch-up filter: number of previous positions remembered",
    "links" : [ ]
  }, {
    "name" : "TOUCH_UP_FILTER_DELAY_AFTER",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TOUCH_UP_FILTER_DELAY_BEFORE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPreviousOffsetsTimes",
    "type" : "long[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPreviousOffsets",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPreviousOffsetIndex",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNumberPreviousOffsets",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public float getIdealVerticalOffset()",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final int getIdealFingerToCursorOffset()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void setDrawables(final Drawable drawableLtr, final Drawable drawableRtl)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void updateDrawable(final boolean updateDrawableWhenDragging)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected abstract int getHotspotX(Drawable drawable, boolean isRtlRun)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected abstract int getHorizontalGravity(boolean isRtlRun)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void startTouchUpFilter(int offset)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void addPositionToTouchUpFilter(int offset)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void filterOnTouchUp(boolean fromTouchScreen)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean offsetHasBeenChanged()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void invalidate()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected final int getPreferredWidth()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected final int getPreferredHeight()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void show()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void dismiss()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void hide()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isShowing()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean shouldShow()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setVisible(final boolean visible)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract int getCurrentCursorOffset()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected abstract void updateSelection(int offset)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected abstract void updatePosition(float x, float y, boolean fromTouchScreen)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected abstract int getMagnifierHandleTrigger()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected boolean isAtRtlRun(@NonNull Layout layout, int offset)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public float getHorizontal(@NonNull Layout layout, int offset)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getLineForOffset(@NonNull Layout layout, int offset)",
    "returnType" : "int",
    "comment" : "\n         * Return the line number for a given offset.\n         * @param layout the {@link Layout} to query.\n         * @param offset the index of the character to query.\n         * @return the index of the line the given offset belongs to.\n         ",
    "links" : [ "android.text.DynamicLayout" ]
  }, {
    "name" : "protected int getOffsetAtCoordinate(@NonNull Layout layout, int line, float x)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void positionAtCursorOffset(int offset, boolean forceUpdatePosition, boolean fromTouchScreen)",
    "returnType" : "void",
    "comment" : "\n         * @param offset Cursor offset. Must be in [-1, length].\n         * @param forceUpdatePosition whether to force update the position.  This should be true\n         * when If the parent has been scrolled, for example.\n         * @param fromTouchScreen {@code true} if the cursor is moved with motion events from the\n         * touch screen.\n         ",
    "links" : [ ]
  }, {
    "name" : " int getCursorHorizontalPosition(Layout layout, int offset)",
    "returnType" : "int",
    "comment" : "\n         * Return the clamped horizontal position for the cursor.\n         *\n         * @param layout Text layout.\n         * @param offset Character offset for the cursor.\n         * @return The clamped horizontal position for the cursor.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void updatePosition(int parentPositionX, int parentPositionY, boolean parentPositionChanged, boolean parentScrolled)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onDraw(Canvas c)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getHorizontalOffset()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected int getCursorOffset()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean tooLargeTextForMagnifier()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean checkForTransforms()",
    "returnType" : "boolean",
    "comment" : "\n         * Traverses the hierarchy above the text view, and computes the total scale applied\n         * to it. If a rotation is encountered, the method returns {@code false}, indicating\n         * that the magnifier should not be shown anyways. It would be nice to keep these two\n         * pieces of logic separate (the rotation check and the total scale calculation),\n         * but for efficiency we can do them in a single go.\n         * @return whether the text view is rotated\n         ",
    "links" : [ ]
  }, {
    "name" : "private boolean obtainMagnifierShowCoordinates(@NonNull final MotionEvent event, final PointF showPosInView)",
    "returnType" : "boolean",
    "comment" : "\n         * Computes the position where the magnifier should be shown, relative to\n         * {@code mTextView}, and writes them to {@code showPosInView}. Also decides\n         * whether the magnifier should be shown or dismissed after this touch event.\n         * @return Whether the magnifier should be shown at the computed coordinates or dismissed.\n         ",
    "links" : [ ]
  }, {
    "name" : "private boolean handleOverlapsMagnifier(@NonNull final HandleView handle, @NonNull final Rect magnifierRect)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private HandleView getOtherSelectionHandle()",
    "returnType" : "HandleView",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateHandlesVisibility()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected final void updateMagnifier(@NonNull final MotionEvent event)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected final void dismissMagnifier()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean onTouchEvent(MotionEvent ev)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isDragging()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void onHandleMoved()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onDetached()",
    "returnType" : "void",
    "comment" : "\n         * Called back when the handle view was detached.\n         ",
    "links" : [ ]
  }, {
    "name" : "protected void onSizeChanged(int w, int h, int oldw, int oldh)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public float getIdealVerticalOffset()", " final int getIdealFingerToCursorOffset()", " void setDrawables(final Drawable drawableLtr, final Drawable drawableRtl)", "protected void updateDrawable(final boolean updateDrawableWhenDragging)", "protected abstract int getHotspotX(Drawable drawable, boolean isRtlRun)", "protected abstract int getHorizontalGravity(boolean isRtlRun)", "private void startTouchUpFilter(int offset)", "private void addPositionToTouchUpFilter(int offset)", "private void filterOnTouchUp(boolean fromTouchScreen)", "public boolean offsetHasBeenChanged()", "protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)", "public void invalidate()", "protected final int getPreferredWidth()", "protected final int getPreferredHeight()", "public void show()", "protected void dismiss()", "public void hide()", "public boolean isShowing()", "private boolean shouldShow()", "private void setVisible(final boolean visible)", "public abstract int getCurrentCursorOffset()", "protected abstract void updateSelection(int offset)", "protected abstract void updatePosition(float x, float y, boolean fromTouchScreen)", "protected abstract int getMagnifierHandleTrigger()", "protected boolean isAtRtlRun(@NonNull Layout layout, int offset)", "public float getHorizontal(@NonNull Layout layout, int offset)", "public int getLineForOffset(@NonNull Layout layout, int offset)", "protected int getOffsetAtCoordinate(@NonNull Layout layout, int line, float x)", "protected void positionAtCursorOffset(int offset, boolean forceUpdatePosition, boolean fromTouchScreen)", " int getCursorHorizontalPosition(Layout layout, int offset)", "public void updatePosition(int parentPositionX, int parentPositionY, boolean parentPositionChanged, boolean parentScrolled)", "protected void onDraw(Canvas c)", "private int getHorizontalOffset()", "protected int getCursorOffset()", "private boolean tooLargeTextForMagnifier()", "private boolean checkForTransforms()", "private boolean obtainMagnifierShowCoordinates(@NonNull final MotionEvent event, final PointF showPosInView)", "private boolean handleOverlapsMagnifier(@NonNull final HandleView handle, @NonNull final Rect magnifierRect)", "private HandleView getOtherSelectionHandle()", "private void updateHandlesVisibility()", "protected final void updateMagnifier(@NonNull final MotionEvent event)", "protected final void dismissMagnifier()", "public boolean onTouchEvent(MotionEvent ev)", "public boolean isDragging()", " void onHandleMoved()", "public void onDetached()", "protected void onSizeChanged(int w, int h, int oldw, int oldh)" ],
  "variableNames" : [ "mDrawable", "mDrawableLtr", "mDrawableRtl", "mContainer", "mPositionX", "mPositionY", "mIsDragging", "mTouchToWindowOffsetX", "mTouchToWindowOffsetY", "mHotspotX", "mHorizontalGravity", "mTouchOffsetY", "mIdealVerticalOffset", "mLastParentX", "mLastParentY", "mLastParentXOnScreen", "mLastParentYOnScreen", "mPreviousOffset", "mPositionHasChanged", "mMinSize", "mPrevLine", "mPreviousLineTouched", "mCurrentDragInitialTouchRawX", "mTextViewScaleX", "mTextViewScaleY", "mIdealFingerToCursorOffset", "HISTORY_SIZE", "TOUCH_UP_FILTER_DELAY_AFTER", "TOUCH_UP_FILTER_DELAY_BEFORE", "mPreviousOffsetsTimes", "mPreviousOffsets", "mPreviousOffsetIndex", "mNumberPreviousOffsets" ]
}