{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/input/InputManagerGlobal.java",
  "packageName" : "android.hardware.input",
  "className" : "InputManagerGlobal",
  "comment" : "\n * Manages communication with the input manager service on behalf of\n * an application process. You're probably looking for {@link InputManager}.\n *\n * @hide\n ",
  "links" : [ "android.hardware.input.InputManager" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : " (requires restart)",
    "links" : [ ]
  }, {
    "name" : "mInputDevices",
    "type" : "SparseArray<InputDevice>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInputDevicesChangedListener",
    "type" : "InputDevicesChangedListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInputDeviceListeners",
    "type" : "ArrayList<InputDeviceListenerDelegate>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnTabletModeChangedListeners",
    "type" : "ArrayList<OnTabletModeChangedListenerDelegate>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBatteryListenersLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBatteryListeners",
    "type" : "SparseArray<RegisteredBatteryListeners>",
    "comment" : " registered listeners for that device.",
    "links" : [ ]
  }, {
    "name" : "mInputDeviceBatteryListener",
    "type" : "IInputDeviceBatteryListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mKeyboardBacklightListenerLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mKeyboardBacklightListeners",
    "type" : "ArrayList<KeyboardBacklightListenerDelegate>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mKeyboardBacklightListener",
    "type" : "IKeyboardBacklightListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStickyModifierStateListenerLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStickyModifierStateListeners",
    "type" : "ArrayList<StickyModifierStateListenerDelegate>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStickyModifierStateListener",
    "type" : "IStickyModifierStateListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInputDeviceSensorManager",
    "type" : "InputDeviceSensorManager",
    "comment" : " devices change, so it must be synchronized with the input device listeners.",
    "links" : [ ]
  }, {
    "name" : "sInstance",
    "type" : "InputManagerGlobal",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVelocityTrackerStrategy",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIm",
    "type" : "IInputManager",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static InputManagerGlobal getInstance()",
    "returnType" : "InputManagerGlobal",
    "comment" : "\n     * Gets an instance of the input manager global singleton.\n     *\n     * @return The input manager instance, may be null early in system startup\n     * before the input manager has been fully initialized.\n     ",
    "links" : [ ]
  }, {
    "name" : "public IInputManager getInputManagerService()",
    "returnType" : "IInputManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static TestSession createTestSession(IInputManager inputManagerService)",
    "returnType" : "TestSession",
    "comment" : "\n     * Create and set a test instance of InputManagerGlobal.\n     *\n     * @return The test session. The session must be {@link TestSession#close()}-ed at the end\n     * of the test.\n     ",
    "links" : [ "#close()" ]
  }, {
    "name" : "public String getVelocityTrackerStrategy()",
    "returnType" : "String",
    "comment" : "\n     * Get the current VelocityTracker strategy.\n     * Only works when the system has fully booted up.\n     ",
    "links" : [ ]
  }, {
    "name" : "public InputDevice getInputDevice(int id)",
    "returnType" : "InputDevice",
    "comment" : "\n     * @see InputManager#getInputDevice(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "private void populateInputDevicesLocked()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onInputDevicesChanged(int[] deviceIdAndGeneration)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean containsDeviceId(int[] deviceIdAndGeneration, int deviceId)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void sendMessageToInputDeviceListenersLocked(int what, int deviceId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void registerInputDeviceListener(InputDeviceListener listener, Handler handler)",
    "returnType" : "void",
    "comment" : "\n     * @see InputManager#registerInputDeviceListener\n     ",
    "links" : [ ]
  }, {
    "name" : "public void unregisterInputDeviceListener(InputDeviceListener listener)",
    "returnType" : "void",
    "comment" : "\n     * @see InputManager#unregisterInputDeviceListener\n     ",
    "links" : [ ]
  }, {
    "name" : "private int findInputDeviceListenerLocked(InputDeviceListener listener)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int[] getInputDeviceIds()",
    "returnType" : "int[]",
    "comment" : "\n     * @see InputManager#getInputDeviceIds\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isInputDeviceEnabled(int id)",
    "returnType" : "boolean",
    "comment" : "\n     * @see InputManager#isInputDeviceEnabled(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void enableInputDevice(int id)",
    "returnType" : "void",
    "comment" : "\n     * @see InputManager#enableInputDevice(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void disableInputDevice(int id)",
    "returnType" : "void",
    "comment" : "\n     * @see InputManager#disableInputDevice(int)\n     ",
    "links" : [ ]
  }, {
    "name" : " InputDevice getInputDeviceByDescriptor(String descriptor)",
    "returnType" : "InputDevice",
    "comment" : "\n     * @see InputManager#getInputDeviceByDescriptor\n     ",
    "links" : [ ]
  }, {
    "name" : " HostUsiVersion getHostUsiVersion(@NonNull Display display)",
    "returnType" : "HostUsiVersion",
    "comment" : "\n     * @see InputManager#getHostUsiVersion\n     ",
    "links" : [ ]
  }, {
    "name" : "private void onTabletModeChanged(long whenNanos, boolean inTabletMode)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void registerOnTabletModeChangedListener(OnTabletModeChangedListener listener, Handler handler)",
    "returnType" : "void",
    "comment" : "\n     * @see InputManager#registerInputDeviceListener(InputDeviceListener, Handler)\n     ",
    "links" : [ ]
  }, {
    "name" : " void unregisterOnTabletModeChangedListener(OnTabletModeChangedListener listener)",
    "returnType" : "void",
    "comment" : "\n     * @see InputManager#unregisterOnTabletModeChangedListener(OnTabletModeChangedListener)\n     ",
    "links" : [ ]
  }, {
    "name" : "private void initializeTabletModeListenerLocked()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int findOnTabletModeChangedListenerLocked(OnTabletModeChangedListener listener)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addInputDeviceBatteryListener(int deviceId, @NonNull Executor executor, @NonNull InputDeviceBatteryListener listener)",
    "returnType" : "void",
    "comment" : "\n     * @see InputManager#addInputDeviceBatteryListener(int, Executor, InputDeviceBatteryListener)\n     ",
    "links" : [ ]
  }, {
    "name" : " void removeInputDeviceBatteryListener(int deviceId, @NonNull InputDeviceBatteryListener listener)",
    "returnType" : "void",
    "comment" : "\n     * @see InputManager#removeInputDeviceBatteryListener(int, InputDeviceBatteryListener)\n     ",
    "links" : [ ]
  }, {
    "name" : "public BatteryState getInputDeviceBatteryState(int deviceId, boolean hasBattery)",
    "returnType" : "BatteryState",
    "comment" : "\n     * @see #getInputDeviceBatteryState(int, boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : " void registerKeyboardBacklightListener(@NonNull Executor executor, @NonNull KeyboardBacklightListener listener) throws IllegalArgumentException",
    "returnType" : "void",
    "comment" : "\n     * @see InputManager#registerKeyboardBacklightListener(Executor, KeyboardBacklightListener)\n     ",
    "links" : [ ]
  }, {
    "name" : " void unregisterKeyboardBacklightListener(@NonNull KeyboardBacklightListener listener)",
    "returnType" : "void",
    "comment" : "\n     * @see InputManager#unregisterKeyboardBacklightListener(KeyboardBacklightListener)\n     ",
    "links" : [ ]
  }, {
    "name" : " void registerStickyModifierStateListener(@NonNull Executor executor, @NonNull StickyModifierStateListener listener) throws IllegalArgumentException",
    "returnType" : "void",
    "comment" : "\n     * @see InputManager#registerStickyModifierStateListener(Executor, StickyModifierStateListener)\n     ",
    "links" : [ ]
  }, {
    "name" : " void unregisterStickyModifierStateListener(@NonNull StickyModifierStateListener listener)",
    "returnType" : "void",
    "comment" : "\n     * @see InputManager#unregisterStickyModifierStateListener(StickyModifierStateListener)\n     ",
    "links" : [ ]
  }, {
    "name" : "public KeyboardLayout[] getKeyboardLayoutsForInputDevice(@NonNull InputDeviceIdentifier identifier)",
    "returnType" : "KeyboardLayout[]",
    "comment" : "\n     * TODO(b/330517633): Cleanup the unsupported API\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCurrentKeyboardLayoutForInputDevice(@NonNull InputDeviceIdentifier identifier, @NonNull String keyboardLayoutDescriptor)",
    "returnType" : "void",
    "comment" : "\n     * TODO(b/330517633): Cleanup the unsupported API\n     ",
    "links" : [ ]
  }, {
    "name" : "public SensorManager getInputDeviceSensorManager(int deviceId)",
    "returnType" : "SensorManager",
    "comment" : "\n     * @see InputDevice#getSensorManager()\n     ",
    "links" : [ ]
  }, {
    "name" : " InputSensorInfo[] getSensorList(int deviceId)",
    "returnType" : "InputSensorInfo[]",
    "comment" : "\n     * Get information about all of the sensors supported by an input device\n     * @see InputDeviceSensorManager\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean enableSensor(int deviceId, int sensorType, int samplingPeriodUs, int maxBatchReportLatencyUs)",
    "returnType" : "boolean",
    "comment" : "\n     * @see InputDeviceSensorManager\n     ",
    "links" : [ ]
  }, {
    "name" : " void disableSensor(int deviceId, int sensorType)",
    "returnType" : "void",
    "comment" : "\n     * @see InputDeviceSensorManager\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean flushSensor(int deviceId, int sensorType)",
    "returnType" : "boolean",
    "comment" : "\n     * @see InputDeviceSensorManager\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean registerSensorListener(IInputSensorEventListener listener)",
    "returnType" : "boolean",
    "comment" : "\n     * @see InputDeviceSensorManager\n     ",
    "links" : [ ]
  }, {
    "name" : " void unregisterSensorListener(IInputSensorEventListener listener)",
    "returnType" : "void",
    "comment" : "\n     * @see InputDeviceSensorManager\n     ",
    "links" : [ ]
  }, {
    "name" : "public LightsManager getInputDeviceLightsManager(int deviceId)",
    "returnType" : "LightsManager",
    "comment" : "\n     * @see InputDevice#getLightsManager()\n     ",
    "links" : [ ]
  }, {
    "name" : " List<Light> getLights(int deviceId)",
    "returnType" : "List<Light>",
    "comment" : "\n     * Gets a list of light objects associated with an input device.\n     * @return The list of lights, never null.\n     ",
    "links" : [ ]
  }, {
    "name" : " LightState getLightState(int deviceId, @NonNull Light light)",
    "returnType" : "LightState",
    "comment" : "\n     * Returns the state of an input device light.\n     * @return the light state\n     ",
    "links" : [ ]
  }, {
    "name" : " void requestLights(int deviceId, @NonNull LightsRequest request, IBinder token)",
    "returnType" : "void",
    "comment" : "\n     * Request to modify the states of multiple lights.\n     *\n     * @param request the settings for lights that should change\n     ",
    "links" : [ ]
  }, {
    "name" : " void openLightSession(int deviceId, String opPkg, @NonNull IBinder token)",
    "returnType" : "void",
    "comment" : "\n     * Open light session for input device manager\n     *\n     * @param token The token for the light session\n     ",
    "links" : [ ]
  }, {
    "name" : " void closeLightSession(int deviceId, @NonNull IBinder token)",
    "returnType" : "void",
    "comment" : "\n     * Close light session\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "public Vibrator getInputDeviceVibrator(int deviceId, int vibratorId)",
    "returnType" : "Vibrator",
    "comment" : "\n     * @see InputManager#getInputDeviceVibrator(int, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public VibratorManager getInputDeviceVibratorManager(int deviceId)",
    "returnType" : "VibratorManager",
    "comment" : "\n     * @see InputDevice#getVibratorManager()\n     ",
    "links" : [ ]
  }, {
    "name" : " int[] getVibratorIds(int deviceId)",
    "returnType" : "int[]",
    "comment" : "\n     * Get the list of device vibrators\n     * @return The list of vibrators IDs\n     ",
    "links" : [ ]
  }, {
    "name" : " void vibrate(int deviceId, VibrationEffect effect, IBinder token)",
    "returnType" : "void",
    "comment" : "\n     * Perform vibration effect\n     ",
    "links" : [ ]
  }, {
    "name" : " void vibrate(int deviceId, CombinedVibration effect, IBinder token)",
    "returnType" : "void",
    "comment" : "\n     * Perform combined vibration effect\n     ",
    "links" : [ ]
  }, {
    "name" : " void cancelVibrate(int deviceId, IBinder token)",
    "returnType" : "void",
    "comment" : "\n     * Cancel an ongoing vibration\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean isVibrating(int deviceId)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if input device is vibrating\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean registerVibratorStateListener(int deviceId, IVibratorStateListener listener)",
    "returnType" : "boolean",
    "comment" : "\n     * Register input device vibrator state listener\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean unregisterVibratorStateListener(int deviceId, IVibratorStateListener listener)",
    "returnType" : "boolean",
    "comment" : "\n     * Unregister input device vibrator state listener\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean[] deviceHasKeys(int[] keyCodes)",
    "returnType" : "boolean[]",
    "comment" : "\n     * @see InputManager#deviceHasKeys(int[])\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean[] deviceHasKeys(int id, int[] keyCodes)",
    "returnType" : "boolean[]",
    "comment" : "\n     * @see InputManager#deviceHasKeys(int, int[])\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getKeyCodeForKeyLocation(int deviceId, int locationKeyCode)",
    "returnType" : "int",
    "comment" : "\n     * @see InputManager#getKeyCodeForKeyLocation(int, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public KeyCharacterMap getKeyCharacterMap(@Nullable KeyboardLayout keyboardLayout)",
    "returnType" : "KeyCharacterMap",
    "comment" : "\n     * Returns KeyCharacterMap for the provided Keyboard layout. If provided layout is null it will\n     * return KeyCharacter map for the default layout {@code Generic.kl}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean injectInputEvent(InputEvent event, int mode, int targetUid)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean injectInputEvent(InputEvent event, int mode)",
    "returnType" : "boolean",
    "comment" : "\n     * @see InputManager#injectInputEvent(InputEvent, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean setPointerIcon(PointerIcon icon, int displayId, int deviceId, int pointerId, IBinder inputToken)",
    "returnType" : "boolean",
    "comment" : "\n     * @see InputManager#setPointerIcon(PointerIcon, int, int, int, IBinder)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void requestPointerCapture(IBinder windowToken, boolean enable)",
    "returnType" : "void",
    "comment" : "\n     * @see InputManager#requestPointerCapture(IBinder, boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public InputMonitor monitorGestureInput(String name, int displayId)",
    "returnType" : "InputMonitor",
    "comment" : "\n     * @see InputManager#monitorGestureInput(String, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addUniqueIdAssociationByPort(@NonNull String inputPort, @NonNull String displayUniqueId)",
    "returnType" : "void",
    "comment" : "\n     * @see InputManager#addUniqueIdAssociationByPort(String, String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removeUniqueIdAssociationByPort(@NonNull String inputPort)",
    "returnType" : "void",
    "comment" : "\n     * @see InputManager#removeUniqueIdAssociationByPort(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addUniqueIdAssociationByDescriptor(@NonNull String inputDeviceDescriptor, @NonNull String displayUniqueId)",
    "returnType" : "void",
    "comment" : "\n     * @see InputManager#addUniqueIdAssociationByDescriptor(String, String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removeUniqueIdAssociationByDescriptor(@NonNull String inputDeviceDescriptor)",
    "returnType" : "void",
    "comment" : "\n     * @see InputManager#removeUniqueIdAssociationByDescriptor(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getInputDeviceBluetoothAddress(int deviceId)",
    "returnType" : "String",
    "comment" : "\n     * @see InputManager#getInputDeviceBluetoothAddress(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void cancelCurrentTouch()",
    "returnType" : "void",
    "comment" : "\n     * @see InputManager#cancelCurrentTouch()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void pilferPointers(IBinder inputChannelToken)",
    "returnType" : "void",
    "comment" : "\n     * @see InputManager#pilferPointers(IBinder)\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static InputManagerGlobal getInstance()", "public IInputManager getInputManagerService()", "public static TestSession createTestSession(IInputManager inputManagerService)", "public String getVelocityTrackerStrategy()", "public InputDevice getInputDevice(int id)", "private void populateInputDevicesLocked()", "private void onInputDevicesChanged(int[] deviceIdAndGeneration)", "private static boolean containsDeviceId(int[] deviceIdAndGeneration, int deviceId)", "private void sendMessageToInputDeviceListenersLocked(int what, int deviceId)", "public void registerInputDeviceListener(InputDeviceListener listener, Handler handler)", "public void unregisterInputDeviceListener(InputDeviceListener listener)", "private int findInputDeviceListenerLocked(InputDeviceListener listener)", "public int[] getInputDeviceIds()", "public boolean isInputDeviceEnabled(int id)", "public void enableInputDevice(int id)", "public void disableInputDevice(int id)", " InputDevice getInputDeviceByDescriptor(String descriptor)", " HostUsiVersion getHostUsiVersion(@NonNull Display display)", "private void onTabletModeChanged(long whenNanos, boolean inTabletMode)", " void registerOnTabletModeChangedListener(OnTabletModeChangedListener listener, Handler handler)", " void unregisterOnTabletModeChangedListener(OnTabletModeChangedListener listener)", "private void initializeTabletModeListenerLocked()", "private int findOnTabletModeChangedListenerLocked(OnTabletModeChangedListener listener)", "public void addInputDeviceBatteryListener(int deviceId, @NonNull Executor executor, @NonNull InputDeviceBatteryListener listener)", " void removeInputDeviceBatteryListener(int deviceId, @NonNull InputDeviceBatteryListener listener)", "public BatteryState getInputDeviceBatteryState(int deviceId, boolean hasBattery)", " void registerKeyboardBacklightListener(@NonNull Executor executor, @NonNull KeyboardBacklightListener listener) throws IllegalArgumentException", " void unregisterKeyboardBacklightListener(@NonNull KeyboardBacklightListener listener)", " void registerStickyModifierStateListener(@NonNull Executor executor, @NonNull StickyModifierStateListener listener) throws IllegalArgumentException", " void unregisterStickyModifierStateListener(@NonNull StickyModifierStateListener listener)", "public KeyboardLayout[] getKeyboardLayoutsForInputDevice(@NonNull InputDeviceIdentifier identifier)", "public void setCurrentKeyboardLayoutForInputDevice(@NonNull InputDeviceIdentifier identifier, @NonNull String keyboardLayoutDescriptor)", "public SensorManager getInputDeviceSensorManager(int deviceId)", " InputSensorInfo[] getSensorList(int deviceId)", " boolean enableSensor(int deviceId, int sensorType, int samplingPeriodUs, int maxBatchReportLatencyUs)", " void disableSensor(int deviceId, int sensorType)", " boolean flushSensor(int deviceId, int sensorType)", " boolean registerSensorListener(IInputSensorEventListener listener)", " void unregisterSensorListener(IInputSensorEventListener listener)", "public LightsManager getInputDeviceLightsManager(int deviceId)", " List<Light> getLights(int deviceId)", " LightState getLightState(int deviceId, @NonNull Light light)", " void requestLights(int deviceId, @NonNull LightsRequest request, IBinder token)", " void openLightSession(int deviceId, String opPkg, @NonNull IBinder token)", " void closeLightSession(int deviceId, @NonNull IBinder token)", "public Vibrator getInputDeviceVibrator(int deviceId, int vibratorId)", "public VibratorManager getInputDeviceVibratorManager(int deviceId)", " int[] getVibratorIds(int deviceId)", " void vibrate(int deviceId, VibrationEffect effect, IBinder token)", " void vibrate(int deviceId, CombinedVibration effect, IBinder token)", " void cancelVibrate(int deviceId, IBinder token)", " boolean isVibrating(int deviceId)", " boolean registerVibratorStateListener(int deviceId, IVibratorStateListener listener)", " boolean unregisterVibratorStateListener(int deviceId, IVibratorStateListener listener)", "public boolean[] deviceHasKeys(int[] keyCodes)", "public boolean[] deviceHasKeys(int id, int[] keyCodes)", "public int getKeyCodeForKeyLocation(int deviceId, int locationKeyCode)", "public KeyCharacterMap getKeyCharacterMap(@Nullable KeyboardLayout keyboardLayout)", "public boolean injectInputEvent(InputEvent event, int mode, int targetUid)", "public boolean injectInputEvent(InputEvent event, int mode)", "public boolean setPointerIcon(PointerIcon icon, int displayId, int deviceId, int pointerId, IBinder inputToken)", "public void requestPointerCapture(IBinder windowToken, boolean enable)", "public InputMonitor monitorGestureInput(String name, int displayId)", "public void addUniqueIdAssociationByPort(@NonNull String inputPort, @NonNull String displayUniqueId)", "public void removeUniqueIdAssociationByPort(@NonNull String inputPort)", "public void addUniqueIdAssociationByDescriptor(@NonNull String inputDeviceDescriptor, @NonNull String displayUniqueId)", "public void removeUniqueIdAssociationByDescriptor(@NonNull String inputDeviceDescriptor)", "public String getInputDeviceBluetoothAddress(int deviceId)", "public void cancelCurrentTouch()", "public void pilferPointers(IBinder inputChannelToken)" ],
  "variableNames" : [ "TAG", "DEBUG", "mInputDevices", "mInputDevicesChangedListener", "mInputDeviceListeners", "mOnTabletModeChangedListeners", "mBatteryListenersLock", "mBatteryListeners", "mInputDeviceBatteryListener", "mKeyboardBacklightListenerLock", "mKeyboardBacklightListeners", "mKeyboardBacklightListener", "mStickyModifierStateListenerLock", "mStickyModifierStateListeners", "mStickyModifierStateListener", "mInputDeviceSensorManager", "sInstance", "mVelocityTrackerStrategy", "mIm" ]
}