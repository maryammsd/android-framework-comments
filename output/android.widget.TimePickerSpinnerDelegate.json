{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/widget/TimePickerSpinnerDelegate.java",
  "packageName" : "android.widget",
  "className" : "TimePickerSpinnerDelegate",
  "comment" : "\n * A delegate implementing the basic spinner-based TimePicker.\n ",
  "variables" : [ {
    "name" : "DEFAULT_ENABLED_STATE",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HOURS_IN_HALF_DAY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHourSpinner",
    "type" : "NumberPicker",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMinuteSpinner",
    "type" : "NumberPicker",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAmPmSpinner",
    "type" : "NumberPicker",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHourSpinnerInput",
    "type" : "EditText",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMinuteSpinnerInput",
    "type" : "EditText",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAmPmSpinnerInput",
    "type" : "EditText",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDivider",
    "type" : "TextView",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAmPmButton",
    "type" : "Button",
    "comment" : " accommodates these two cases to be backwards compatible.",
    "links" : [ ]
  }, {
    "name" : "mAmPmStrings",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTempCalendar",
    "type" : "Calendar",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsEnabled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHourWithTwoDigit",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHourFormat",
    "type" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIs24HourView",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsAm",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean validateInput()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void getHourFormatData()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isAmPmAtStart()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setDividerText()",
    "returnType" : "void",
    "comment" : "\n     * The time separator is defined in the Unicode CLDR and cannot be supposed to be \":\".\n     *\n     * See http://unicode.org/cldr/trac/browser/trunk/common/main\n     *\n     * We pass the correct \"skeleton\" depending on 12 or 24 hours view and then extract the\n     * separator as the character which is just after the hour marker in the returned pattern.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDate(int hour, int minute)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setHour(int hour)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setCurrentHour(int currentHour, boolean notifyTimeChanged)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getHour()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setMinute(int minute)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setCurrentMinute(int minute, boolean notifyTimeChanged)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getMinute()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setIs24Hour(boolean is24Hour)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean is24Hour()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isEnabled()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getBaseline()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Parcelable onSaveInstanceState(Parcelable superState)",
    "returnType" : "Parcelable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onRestoreInstanceState(Parcelable state)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean dispatchPopulateAccessibilityEvent(AccessibilityEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onPopulateAccessibilityEvent(AccessibilityEvent event)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public View getHourView()",
    "returnType" : "View",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public View getMinuteView()",
    "returnType" : "View",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public View getAmView()",
    "returnType" : "View",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public View getPmView()",
    "returnType" : "View",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private void updateInputState()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateAmPmControl()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onTimeChanged()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateHourControl()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateMinuteControl()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setContentDescriptions()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void trySetContentDescription(View root, int viewId, int contDescResId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String[] getAmPmStrings(Context context)",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "DEFAULT_ENABLED_STATE", "HOURS_IN_HALF_DAY", "mHourSpinner", "mMinuteSpinner", "mAmPmSpinner", "mHourSpinnerInput", "mMinuteSpinnerInput", "mAmPmSpinnerInput", "mDivider", "mAmPmButton", "mAmPmStrings", "mTempCalendar", "mIsEnabled", "mHourWithTwoDigit", "mHourFormat", "mIs24HourView", "mIsAm" ],
  "methodNames" : [ "public boolean validateInput()", "private void getHourFormatData()", "private boolean isAmPmAtStart()", "private void setDividerText()", "public void setDate(int hour, int minute)", "public void setHour(int hour)", "private void setCurrentHour(int currentHour, boolean notifyTimeChanged)", "public int getHour()", "public void setMinute(int minute)", "private void setCurrentMinute(int minute, boolean notifyTimeChanged)", "public int getMinute()", "public void setIs24Hour(boolean is24Hour)", "public boolean is24Hour()", "public void setEnabled(boolean enabled)", "public boolean isEnabled()", "public int getBaseline()", "public Parcelable onSaveInstanceState(Parcelable superState)", "public void onRestoreInstanceState(Parcelable state)", "public boolean dispatchPopulateAccessibilityEvent(AccessibilityEvent event)", "public void onPopulateAccessibilityEvent(AccessibilityEvent event)", "public View getHourView()", "public View getMinuteView()", "public View getAmView()", "public View getPmView()", "private void updateInputState()", "private void updateAmPmControl()", "private void onTimeChanged()", "private void updateHourControl()", "private void updateMinuteControl()", "private void setContentDescriptions()", "private void trySetContentDescription(View root, int viewId, int contDescResId)", "public static String[] getAmPmStrings(Context context)" ]
}