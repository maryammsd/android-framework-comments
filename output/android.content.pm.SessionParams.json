{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/content/pm/PackageInstaller.java",
  "packageName" : "android.content.pm",
  "className" : "SessionParams",
  "comment" : "\n     * Parameters for creating a new {@link PackageInstaller.Session}.\n     ",
  "variables" : [ {
    "name" : "MODE_INVALID",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "MODE_FULL_INSTALL",
    "type" : "int",
    "comment" : "\n         * Mode for an install session whose staged APKs should fully replace any\n         * existing APKs for the target app.\n         ",
    "links" : [ ]
  }, {
    "name" : "MODE_INHERIT_EXISTING",
    "type" : "int",
    "comment" : "\n         * Mode for an install session that should inherit any existing APKs for the\n         * target app, unless they have been explicitly overridden (based on split\n         * name) by the session. For example, this can be used to add one or more\n         * split APKs to an existing installation.\n         * <p>\n         * If there are no existing APKs for the target app, this behaves like\n         * {@link #MODE_FULL_INSTALL}.\n         ",
    "links" : [ "#MODE_FULL_INSTALL" ]
  }, {
    "name" : "RESTRICTED_PERMISSIONS_ALL",
    "type" : "Set<String>",
    "comment" : "\n         * Special constant to refer to all restricted permissions.\n         ",
    "links" : [ ]
  }, {
    "name" : "UID_UNKNOWN",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "MAX_PACKAGE_NAME_LENGTH",
    "type" : "int",
    "comment" : "\n         * This value is derived from the maximum file name length. No package above this limit\n         * can ever be successfully installed on the device.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "mode",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "installFlags",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "installLocation",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "installReason",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "sizeBytes",
    "type" : "long",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "appPackageName",
    "type" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "appIcon",
    "type" : "Bitmap",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "appLabel",
    "type" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "appIconLastModified",
    "type" : "long",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "originatingUri",
    "type" : "Uri",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "originatingUid",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "referrerUri",
    "type" : "Uri",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "abiOverride",
    "type" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "volumeUuid",
    "type" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "grantedRuntimePermissions",
    "type" : "String[]",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "whitelistedRestrictedPermissions",
    "type" : "List<String>",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "autoRevokePermissionsMode",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "installerPackageName",
    "type" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "isMultiPackage",
    "type" : "boolean",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "isStaged",
    "type" : "boolean",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "requiredInstalledVersionCode",
    "type" : "long",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "dataLoaderParams",
    "type" : "DataLoaderParams",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "rollbackDataPolicy",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "forceQueryableOverride",
    "type" : "boolean",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<SessionParams>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public SessionParams copy()",
    "returnType" : "SessionParams",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public boolean areHiddenOptionsSet()",
    "returnType" : "boolean",
    "comment" : "\n         * Check if there are hidden options set.\n         *\n         * <p>Hidden options are those options that cannot be verified via public or system-api\n         * methods on {@link SessionInfo}.\n         *\n         * @return {@code true} if any hidden option is set.\n         *\n         * @hide\n         ",
    "links" : [ "SessionInfo" ]
  }, {
    "name" : "public void setInstallLocation(int installLocation)",
    "returnType" : "void",
    "comment" : "\n         * Provide value of {@link PackageInfo#installLocation}, which may be used\n         * to determine where the app will be staged. Defaults to\n         * {@link PackageInfo#INSTALL_LOCATION_INTERNAL_ONLY}.\n         ",
    "links" : [ "android.content.pm.PackageInfo#installLocation", "android.content.pm.PackageInfo#INSTALL_LOCATION_INTERNAL_ONLY" ]
  }, {
    "name" : "public void setSize(long sizeBytes)",
    "returnType" : "void",
    "comment" : "\n         * Optionally indicate the total size (in bytes) of all APKs that will be\n         * delivered in this session. The system may use this to ensure enough disk\n         * space exists before proceeding, or to estimate container size for\n         * installations living on external storage.\n         *\n         * @see PackageInfo#INSTALL_LOCATION_AUTO\n         * @see PackageInfo#INSTALL_LOCATION_PREFER_EXTERNAL\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setAppPackageName(@Nullable String appPackageName)",
    "returnType" : "void",
    "comment" : "\n         * Optionally set the package name of the app being installed. It's strongly\n         * recommended that you provide this value when known, so that observers can\n         * communicate installing apps to users.\n         * <p>\n         * If the APKs staged in the session aren't consistent with this package\n         * name, the install will fail. Regardless of this value, all APKs in the\n         * app must have the same package name.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setAppIcon(@Nullable Bitmap appIcon)",
    "returnType" : "void",
    "comment" : "\n         * Optionally set an icon representing the app being installed. This should\n         * be roughly {@link ActivityManager#getLauncherLargeIconSize()} in both\n         * dimensions.\n         ",
    "links" : [ "android.app.ActivityManager#getLauncherLargeIconSize()" ]
  }, {
    "name" : "public void setAppLabel(@Nullable CharSequence appLabel)",
    "returnType" : "void",
    "comment" : "\n         * Optionally set a label representing the app being installed.\n         *\n         * This value will be trimmed to the first 1000 characters.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setOriginatingUri(@Nullable Uri originatingUri)",
    "returnType" : "void",
    "comment" : "\n         * Optionally set the URI where this package was downloaded from. This is\n         * informational and may be used as a signal for anti-malware purposes.\n         *\n         * @see Intent#EXTRA_ORIGINATING_URI\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setOriginatingUid(int originatingUid)",
    "returnType" : "void",
    "comment" : "\n         * Sets the UID that initiated the package installation. This is informational\n         * and may be used as a signal for anti-malware purposes.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setReferrerUri(@Nullable Uri referrerUri)",
    "returnType" : "void",
    "comment" : "\n         * Optionally set the URI that referred you to install this package. This is\n         * informational and may be used as a signal for anti-malware purposes.\n         *\n         * @see Intent#EXTRA_REFERRER\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setGrantedRuntimePermissions(String[] permissions)",
    "returnType" : "void",
    "comment" : "\n         * Sets which runtime permissions to be granted to the package at installation.\n         *\n         * @param permissions The permissions to grant or null to grant all runtime\n         *     permissions.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setWhitelistedRestrictedPermissions(@Nullable Set<String> permissions)",
    "returnType" : "void",
    "comment" : "\n         * Sets which restricted permissions to be whitelisted for the app. Whitelisting\n         * is not granting the permissions, rather it allows the app to hold permissions\n         * which are otherwise restricted. Whitelisting a non restricted permission has\n         * no effect.\n         *\n         * <p> Permissions can be hard restricted which means that the app cannot hold\n         * them or soft restricted where the app can hold the permission but in a weaker\n         * form. Whether a permission is {@link PermissionInfo#FLAG_HARD_RESTRICTED hard\n         * restricted} or {@link PermissionInfo#FLAG_SOFT_RESTRICTED soft restricted}\n         * depends on the permission declaration. Whitelisting a hard restricted permission\n         * allows the app to hold that permission and whitelisting a soft restricted\n         * permission allows the app to hold the permission in its full, unrestricted form.\n         *\n         * <p> Permissions can also be immutably restricted which means that the whitelist\n         * state of the permission can be determined only at install time and cannot be\n         * changed on updated or at a later point via the package manager APIs.\n         *\n         * <p>Initially, all restricted permissions are whitelisted but you can change\n         * which ones are whitelisted by calling this method or the corresponding ones\n         * on the {@link PackageManager}. Only soft or hard restricted permissions on the current\n         * Android version are supported and any invalid entries will be removed.\n         *\n         * @see PackageManager#addWhitelistedRestrictedPermission(String, String, int)\n         * @see PackageManager#removeWhitelistedRestrictedPermission(String, String, int)\n         ",
    "links" : [ "android.content.pm.PackageManager", "android.content.pm.PermissionInfo#FLAG_SOFT_RESTRICTED", "android.content.pm.PermissionInfo#FLAG_HARD_RESTRICTED" ]
  }, {
    "name" : "public void setAutoRevokePermissionsMode(boolean shouldAutoRevoke)",
    "returnType" : "void",
    "comment" : "\n         * Sets whether permissions should be auto-revoked if this package is unused for an\n         * extended periodd of time.\n         *\n         * It's disabled by default but generally the installer should enable it for most packages,\n         * excluding only those where doing so might cause breakage that cannot be easily addressed\n         * by simply re-requesting the permission(s).\n         *\n         * If user explicitly enabled or disabled it via settings, this call is ignored.\n         *\n         * @param shouldAutoRevoke whether permissions should be auto-revoked.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setEnableRollback(boolean enable)",
    "returnType" : "void",
    "comment" : "\n         * Request that rollbacks be enabled or disabled for the given upgrade with rollback data\n         * policy set to RESTORE.\n         *\n         * <p>If the parent session is staged or has rollback enabled, all children sessions\n         * must have the same properties.\n         *\n         * @param enable set to {@code true} to enable, {@code false} to disable\n         * @see SessionParams#setEnableRollback(boolean, int)\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setEnableRollback(boolean enable, @PackageManager.RollbackDataPolicy int dataPolicy)",
    "returnType" : "void",
    "comment" : "\n         * Request that rollbacks be enabled or disabled for the given upgrade.\n         *\n         * <p>If the parent session is staged or has rollback enabled, all children sessions\n         * must have the same properties.\n         *\n         * <p> For a multi-package install, this method must be called on each child session to\n         * specify rollback data policies explicitly. Note each child session is allowed to have\n         * different policies.\n         *\n         * @param enable set to {@code true} to enable, {@code false} to disable\n         * @param dataPolicy the rollback data policy for this session\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setAllowDowngrade(boolean allowDowngrade)",
    "returnType" : "void",
    "comment" : "\n         * @deprecated use {@link #setRequestDowngrade(boolean)}.\n         * {@hide}\n         ",
    "links" : [ "#setRequestDowngrade(boolean)" ]
  }, {
    "name" : "public void setRequestDowngrade(boolean requestDowngrade)",
    "returnType" : "void",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public void setRequiredInstalledVersionCode(long versionCode)",
    "returnType" : "void",
    "comment" : "\n         * Require the given version of the package be installed.\n         * The install will only be allowed if the existing version code of\n         * the package installed on the device matches the given version code.\n         * Use {@link * PackageManager#VERSION_CODE_HIGHEST} to allow\n         * installation regardless of the currently installed package version.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setInstallFlagsForcePermissionPrompt()",
    "returnType" : "void",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public void setDontKillApp(boolean dontKillApp)",
    "returnType" : "void",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public void setInstallAsInstantApp(boolean isInstantApp)",
    "returnType" : "void",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public void setInstallAsVirtualPreload()",
    "returnType" : "void",
    "comment" : "\n         * Sets the install as a virtual preload. Will only have effect when called\n         * by the verifier.\n         * {@hide}\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setInstallReason(@InstallReason int installReason)",
    "returnType" : "void",
    "comment" : "\n         * Set the reason for installing this package.\n         * <p>\n         * The install reason should be a pre-defined integer. The behavior is\n         * undefined if other values are used.\n         *\n         * @see PackageManager#INSTALL_REASON_UNKNOWN\n         * @see PackageManager#INSTALL_REASON_POLICY\n         * @see PackageManager#INSTALL_REASON_DEVICE_RESTORE\n         * @see PackageManager#INSTALL_REASON_DEVICE_SETUP\n         * @see PackageManager#INSTALL_REASON_USER\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setAllocateAggressive(boolean allocateAggressive)",
    "returnType" : "void",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public void setInstallerPackageName(@Nullable String installerPackageName)",
    "returnType" : "void",
    "comment" : "\n         * Set the installer package for the app.\n         *\n         * By default this is the app that created the {@link PackageInstaller} object.\n         *\n         * @param installerPackageName name of the installer package\n         * {@hide}\n         ",
    "links" : [ "android.content.pm.PackageInstaller" ]
  }, {
    "name" : "public void setMultiPackage()",
    "returnType" : "void",
    "comment" : "\n         * Set this session to be the parent of a multi-package install.\n         *\n         * A multi-package install session contains no APKs and only references other install\n         * sessions via ID. When a multi-package session is committed, all of its children\n         * are committed to the system in an atomic manner. If any children fail to install,\n         * all of them do, including the multi-package session.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setStaged()",
    "returnType" : "void",
    "comment" : "\n         * Set this session to be staged to be installed at reboot.\n         *\n         * Staged sessions are scheduled to be installed at next reboot. Staged sessions can also be\n         * multi-package. In that case, if any of the children sessions fail to install at reboot,\n         * all the other children sessions are aborted as well.\n         *\n         * <p>If the parent session is staged or has rollback enabled, all children sessions\n         * must have the same properties.\n         *\n         * {@hide}\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setInstallAsApex()",
    "returnType" : "void",
    "comment" : "\n         * Set this session to be installing an APEX package.\n         *\n         * {@hide}\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean getEnableRollback()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setDataLoaderParams(@NonNull DataLoaderParams dataLoaderParams)",
    "returnType" : "void",
    "comment" : "\n         * Set the data loader params for the session.\n         * This also switches installation into data provider mode and disallow direct writes into\n         * staging folder.\n         *\n         * WARNING: This is a system API to aid internal development.\n         * Use at your own risk. It will change or be removed without warning.\n         * {@hide}\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setForceQueryable()",
    "returnType" : "void",
    "comment" : "\n         *\n         * {@hide}\n         ",
    "links" : [ ]
  }, {
    "name" : "public void dump(IndentingPrintWriter pw)",
    "returnType" : "void",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "MODE_INVALID", "MODE_FULL_INSTALL", "MODE_INHERIT_EXISTING", "RESTRICTED_PERMISSIONS_ALL", "UID_UNKNOWN", "MAX_PACKAGE_NAME_LENGTH", "mode", "installFlags", "installLocation", "installReason", "sizeBytes", "appPackageName", "appIcon", "appLabel", "appIconLastModified", "originatingUri", "originatingUid", "referrerUri", "abiOverride", "volumeUuid", "grantedRuntimePermissions", "whitelistedRestrictedPermissions", "autoRevokePermissionsMode", "installerPackageName", "isMultiPackage", "isStaged", "requiredInstalledVersionCode", "dataLoaderParams", "rollbackDataPolicy", "forceQueryableOverride", "CREATOR" ],
  "methodNames" : [ "public SessionParams copy()", "public boolean areHiddenOptionsSet()", "public void setInstallLocation(int installLocation)", "public void setSize(long sizeBytes)", "public void setAppPackageName(@Nullable String appPackageName)", "public void setAppIcon(@Nullable Bitmap appIcon)", "public void setAppLabel(@Nullable CharSequence appLabel)", "public void setOriginatingUri(@Nullable Uri originatingUri)", "public void setOriginatingUid(int originatingUid)", "public void setReferrerUri(@Nullable Uri referrerUri)", "public void setGrantedRuntimePermissions(String[] permissions)", "public void setWhitelistedRestrictedPermissions(@Nullable Set<String> permissions)", "public void setAutoRevokePermissionsMode(boolean shouldAutoRevoke)", "public void setEnableRollback(boolean enable)", "public void setEnableRollback(boolean enable, @PackageManager.RollbackDataPolicy int dataPolicy)", "public void setAllowDowngrade(boolean allowDowngrade)", "public void setRequestDowngrade(boolean requestDowngrade)", "public void setRequiredInstalledVersionCode(long versionCode)", "public void setInstallFlagsForcePermissionPrompt()", "public void setDontKillApp(boolean dontKillApp)", "public void setInstallAsInstantApp(boolean isInstantApp)", "public void setInstallAsVirtualPreload()", "public void setInstallReason(@InstallReason int installReason)", "public void setAllocateAggressive(boolean allocateAggressive)", "public void setInstallerPackageName(@Nullable String installerPackageName)", "public void setMultiPackage()", "public void setStaged()", "public void setInstallAsApex()", "public boolean getEnableRollback()", "public void setDataLoaderParams(@NonNull DataLoaderParams dataLoaderParams)", "public void setForceQueryable()", "public void dump(IndentingPrintWriter pw)", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)" ]
}