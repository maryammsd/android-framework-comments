{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/content/UriMatcher.java",
  "packageName" : "android.content",
  "className" : "UriMatcher",
  "comment" : "\nUtility class to aid in matching URIs in content providers.\n\n<p>To use this class, build up a tree of <code>UriMatcher</code> objects.\nFor example:\n<pre>\n    private static final int PEOPLE = 1;\n    private static final int PEOPLE_ID = 2;\n    private static final int PEOPLE_PHONES = 3;\n    private static final int PEOPLE_PHONES_ID = 4;\n    private static final int PEOPLE_CONTACTMETHODS = 7;\n    private static final int PEOPLE_CONTACTMETHODS_ID = 8;\n\n    private static final int DELETED_PEOPLE = 20;\n\n    private static final int PHONES = 9;\n    private static final int PHONES_ID = 10;\n    private static final int PHONES_FILTER = 14;\n\n    private static final int CONTACTMETHODS = 18;\n    private static final int CONTACTMETHODS_ID = 19;\n\n    private static final int CALLS = 11;\n    private static final int CALLS_ID = 12;\n    private static final int CALLS_FILTER = 15;\n\n    private static final UriMatcher sURIMatcher = new UriMatcher(UriMatcher.NO_MATCH);\n\n    static\n    {\n        sURIMatcher.addURI(\"contacts\", \"people\", PEOPLE);\n        sURIMatcher.addURI(\"contacts\", \"people/#\", PEOPLE_ID);\n        sURIMatcher.addURI(\"contacts\", \"people/#/phones\", PEOPLE_PHONES);\n        sURIMatcher.addURI(\"contacts\", \"people/#/phones/#\", PEOPLE_PHONES_ID);\n        sURIMatcher.addURI(\"contacts\", \"people/#/contact_methods\", PEOPLE_CONTACTMETHODS);\n        sURIMatcher.addURI(\"contacts\", \"people/#/contact_methods/#\", PEOPLE_CONTACTMETHODS_ID);\n        sURIMatcher.addURI(\"contacts\", \"deleted_people\", DELETED_PEOPLE);\n        sURIMatcher.addURI(\"contacts\", \"phones\", PHONES);\n        sURIMatcher.addURI(\"contacts\", \"phones/filter/*\", PHONES_FILTER);\n        sURIMatcher.addURI(\"contacts\", \"phones/#\", PHONES_ID);\n        sURIMatcher.addURI(\"contacts\", \"contact_methods\", CONTACTMETHODS);\n        sURIMatcher.addURI(\"contacts\", \"contact_methods/#\", CONTACTMETHODS_ID);\n        sURIMatcher.addURI(\"call_log\", \"calls\", CALLS);\n        sURIMatcher.addURI(\"call_log\", \"calls/filter/*\", CALLS_FILTER);\n        sURIMatcher.addURI(\"call_log\", \"calls/#\", CALLS_ID);\n    }\n</pre>\n<p>Starting from API level {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2}, paths can start\n with a leading slash.  For example:\n<pre>\n        sURIMatcher.addURI(\"contacts\", \"/people\", PEOPLE);\n</pre>\n<p>Then when you need to match against a URI, call {@link #match}, providing\nthe URL that you have been given.  You can use the result to build a query,\nreturn a type, insert or delete a row, or whatever you need, without duplicating\nall of the if-else logic that you would otherwise need.  For example:\n<pre>\n    public String getType(Uri url)\n    {\n        int match = sURIMatcher.match(url);\n        switch (match)\n        {\n            case PEOPLE:\n                return \"vnd.android.cursor.dir/person\";\n            case PEOPLE_ID:\n                return \"vnd.android.cursor.item/person\";\n... snip ...\n                return \"vnd.android.cursor.dir/snail-mail\";\n            case PEOPLE_ADDRESS_ID:\n                return \"vnd.android.cursor.item/snail-mail\";\n            default:\n                return null;\n        }\n    }\n</pre>\ninstead of:\n<pre>\n    public String getType(Uri url)\n    {\n        List<String> pathSegments = url.getPathSegments();\n        if (pathSegments.size() >= 2) {\n            if (\"people\".equals(pathSegments.get(1))) {\n                if (pathSegments.size() == 2) {\n                    return \"vnd.android.cursor.dir/person\";\n                } else if (pathSegments.size() == 3) {\n                    return \"vnd.android.cursor.item/person\";\n... snip ...\n                    return \"vnd.android.cursor.dir/snail-mail\";\n                } else if (pathSegments.size() == 3) {\n                    return \"vnd.android.cursor.item/snail-mail\";\n                }\n            }\n        }\n        return null;\n    }\n</pre>\n",
  "variables" : [ {
    "name" : "NO_MATCH",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EXACT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NUMBER",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TEXT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCode",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWhich",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mText",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mChildren",
    "type" : "ArrayList<UriMatcher>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void addURI(String authority, String path, int code)",
    "returnType" : "void",
    "comment" : "\n     * Add a URI to match, and the code to return when this URI is\n     * matched. URI nodes may be exact match string, the token \"*\"\n     * that matches any text, or the token \"#\" that matches only\n     * numbers.\n     * <p>\n     * Starting from API level {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2},\n     * this method will accept a leading slash in the path.\n     *\n     * @param authority the authority to match\n     * @param path the path to match. * may be used as a wild card for\n     * any text, and # may be used as a wild card for numbers.\n     * @param code the code that is returned when a URI is matched\n     * against the given components. Must be positive.\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#JELLY_BEAN_MR2" ]
  }, {
    "name" : "private static UriMatcher createChild(String token)",
    "returnType" : "UriMatcher",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int match(Uri uri)",
    "returnType" : "int",
    "comment" : "\n     * Try to match against the path in a url.\n     *\n     * @param uri       The url whose path we will match against.\n     *\n     * @return  The code for the matched node (added using addURI),\n     * or -1 if there is no matched node.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "NO_MATCH", "EXACT", "NUMBER", "TEXT", "mCode", "mWhich", "mText", "mChildren" ],
  "methodNames" : [ "public void addURI(String authority, String path, int code)", "private static UriMatcher createChild(String token)", "public int match(Uri uri)" ]
}