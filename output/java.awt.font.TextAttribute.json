{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/awt/font/TextAttribute.java",
  "packageName" : "java.awt.font",
  "className" : "TextAttribute",
  "comment" : "\n * The <code>TextAttribute</code> class defines attribute keys and\n * attribute values used for text rendering.\n * <p>\n * <code>TextAttribute</code> instances are used as attribute keys to\n * identify attributes in classes handling text attributes. Other\n * constants defined in this class can be used as attribute values.\n * <p>\n * For each text attribute, the documentation provides:\n * <UL>\n *   <LI>the type of its value,\n *   <LI>the relevant predefined constants, if any\n *   <LI>the default effect if the attribute is absent\n *   <LI>the valid values if there are limitations\n *   <LI>a description of the effect.\n * </UL>\n * <p>\n * <H3>Values</H3>\n * <UL>\n *   <LI>The values of attributes must always be immutable.\n *   <LI>Where value limitations are given, any value outside of that\n *   set is reserved for future use; the value will be treated as\n *   the default.\n *   <LI>The value <code>null</code> is treated the same as the\n *   default value and results in the default behavior.\n *   <li>If the value is not of the proper type, the attribute\n *   will be ignored.\n *   <li>The identity of the value does not matter, only the actual\n *   value.  For example, <code>TextAttribute.WEIGHT_BOLD</code> and\n *   <code>new Float(2.0)</code>\n *   indicate the same <code>WEIGHT</code>.\n *   <li>Attribute values of type <code>Number</code> (used for\n *   <code>WEIGHT</code>, <code>WIDTH</code>, <code>POSTURE</code>,\n *   <code>SIZE</code>, <code>JUSTIFICATION</code>, and\n *   <code>TRACKING</code>) can vary along their natural range and are\n *   not restricted to the predefined constants.\n *   <code>Number.floatValue()</code> is used to get the actual value\n *   from the <code>Number</code>.\n *   <li>The values for <code>WEIGHT</code>, <code>WIDTH</code>, and\n *   <code>POSTURE</code> are interpolated by the system, which\n *   can select the 'nearest available' font or use other techniques to\n *   approximate the user's request.\n *\n * </UL>\n *\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "instanceMap",
    "type" : "Map<String, TextAttribute>",
    "comment" : " table of all instances in this class, used by readResolve",
    "links" : [ ]
  }, {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : " This shouldn't happen in real life.",
    "links" : [ ]
  }, {
    "name" : "FAMILY",
    "type" : "TextAttribute",
    "comment" : "\n     * Attribute key for the font name.  Values are instances of\n     * <b><code>String</code></b>.  The default value is\n     * <code>\"Default\"</code>, which causes the platform default font\n     * family to be used.\n     *\n     * <p> The <code>Font</code> class defines constants for the logical\n     * font names.\n     *\n     * <p>This defines the value passed as <code>name</code> to the\n     * <code>Font</code> constructor.  Both logical and physical\n     * font names are allowed. If a font with the requested name\n     * is not found, the default font is used.\n     *\n     * <p><em>Note:</em> This attribute is unfortunately misnamed, as\n     * it specifies the face name and not just the family.  Thus\n     * values such as \"Lucida Sans Bold\" will select that face if it\n     * exists.  Note, though, that if the requested face does not\n     * exist, the default will be used with <em>regular</em> weight.\n     * The \"Bold\" in the name is part of the face name, not a separate\n     * request that the font's weight be bold.</p>\n     ",
    "links" : [ ]
  }, {
    "name" : "WEIGHT",
    "type" : "TextAttribute",
    "comment" : "\n     * Attribute key for the weight of a font.  Values are instances\n     * of <b><code>Number</code></b>.  The default value is\n     * <code>WEIGHT_REGULAR</code>.\n     *\n     * <p>Several constant values are provided, see {@link\n     * #WEIGHT_EXTRA_LIGHT}, {@link #WEIGHT_LIGHT}, {@link\n     * #WEIGHT_DEMILIGHT}, {@link #WEIGHT_REGULAR}, {@link\n     * #WEIGHT_SEMIBOLD}, {@link #WEIGHT_MEDIUM}, {@link\n     * #WEIGHT_DEMIBOLD}, {@link #WEIGHT_BOLD}, {@link #WEIGHT_HEAVY},\n     * {@link #WEIGHT_EXTRABOLD}, and {@link #WEIGHT_ULTRABOLD}.  The\n     * value <code>WEIGHT_BOLD</code> corresponds to the\n     * style value <code>Font.BOLD</code> as passed to the\n     * <code>Font</code> constructor.\n     *\n     * <p>The value is roughly the ratio of the stem width to that of\n     * the regular weight.\n     *\n     * <p>The system can interpolate the provided value.\n     ",
    "links" : [ "#WEIGHT_EXTRA_LIGHT", "#WEIGHT_SEMIBOLD", "#WEIGHT_LIGHT", "#WEIGHT_DEMIBOLD", "#WEIGHT_REGULAR", "#WEIGHT_ULTRABOLD", "#WEIGHT_DEMILIGHT", "#WEIGHT_MEDIUM", "#WEIGHT_EXTRABOLD", "#WEIGHT_BOLD", "#WEIGHT_HEAVY" ]
  }, {
    "name" : "WEIGHT_EXTRA_LIGHT",
    "type" : "Float",
    "comment" : "\n     * The lightest predefined weight.\n     * @see #WEIGHT\n     ",
    "links" : [ ]
  }, {
    "name" : "WEIGHT_LIGHT",
    "type" : "Float",
    "comment" : "\n     * The standard light weight.\n     * @see #WEIGHT\n     ",
    "links" : [ ]
  }, {
    "name" : "WEIGHT_DEMILIGHT",
    "type" : "Float",
    "comment" : "\n     * An intermediate weight between <code>WEIGHT_LIGHT</code> and\n     * <code>WEIGHT_STANDARD</code>.\n     * @see #WEIGHT\n     ",
    "links" : [ ]
  }, {
    "name" : "WEIGHT_REGULAR",
    "type" : "Float",
    "comment" : "\n     * The standard weight. This is the default value for <code>WEIGHT</code>.\n     * @see #WEIGHT\n     ",
    "links" : [ ]
  }, {
    "name" : "WEIGHT_SEMIBOLD",
    "type" : "Float",
    "comment" : "\n     * A moderately heavier weight than <code>WEIGHT_REGULAR</code>.\n     * @see #WEIGHT\n     ",
    "links" : [ ]
  }, {
    "name" : "WEIGHT_MEDIUM",
    "type" : "Float",
    "comment" : "\n     * An intermediate weight between <code>WEIGHT_REGULAR</code> and\n     * <code>WEIGHT_BOLD</code>.\n     * @see #WEIGHT\n     ",
    "links" : [ ]
  }, {
    "name" : "WEIGHT_DEMIBOLD",
    "type" : "Float",
    "comment" : "\n     * A moderately lighter weight than <code>WEIGHT_BOLD</code>.\n     * @see #WEIGHT\n     ",
    "links" : [ ]
  }, {
    "name" : "WEIGHT_BOLD",
    "type" : "Float",
    "comment" : "\n     * The standard bold weight.\n     * @see #WEIGHT\n     ",
    "links" : [ ]
  }, {
    "name" : "WEIGHT_HEAVY",
    "type" : "Float",
    "comment" : "\n     * A moderately heavier weight than <code>WEIGHT_BOLD</code>.\n     * @see #WEIGHT\n     ",
    "links" : [ ]
  }, {
    "name" : "WEIGHT_EXTRABOLD",
    "type" : "Float",
    "comment" : "\n     * An extra heavy weight.\n     * @see #WEIGHT\n     ",
    "links" : [ ]
  }, {
    "name" : "WEIGHT_ULTRABOLD",
    "type" : "Float",
    "comment" : "\n     * The heaviest predefined weight.\n     * @see #WEIGHT\n     ",
    "links" : [ ]
  }, {
    "name" : "WIDTH",
    "type" : "TextAttribute",
    "comment" : "\n     * Attribute key for the width of a font.  Values are instances of\n     * <b><code>Number</code></b>.  The default value is\n     * <code>WIDTH_REGULAR</code>.\n     *\n     * <p>Several constant values are provided, see {@link\n     * #WIDTH_CONDENSED}, {@link #WIDTH_SEMI_CONDENSED}, {@link\n     * #WIDTH_REGULAR}, {@link #WIDTH_SEMI_EXTENDED}, {@link\n     * #WIDTH_EXTENDED}.\n     *\n     * <p>The value is roughly the ratio of the advance width to that\n     * of the regular width.\n     *\n     * <p>The system can interpolate the provided value.\n     ",
    "links" : [ "#WIDTH_SEMI_EXTENDED", "#WIDTH_EXTENDED", "#WIDTH_SEMI_CONDENSED", "#WIDTH_REGULAR", "#WIDTH_CONDENSED" ]
  }, {
    "name" : "WIDTH_CONDENSED",
    "type" : "Float",
    "comment" : "\n     * The most condensed predefined width.\n     * @see #WIDTH\n     ",
    "links" : [ ]
  }, {
    "name" : "WIDTH_SEMI_CONDENSED",
    "type" : "Float",
    "comment" : "\n     * A moderately condensed width.\n     * @see #WIDTH\n     ",
    "links" : [ ]
  }, {
    "name" : "WIDTH_REGULAR",
    "type" : "Float",
    "comment" : "\n     * The standard width. This is the default value for\n     * <code>WIDTH</code>.\n     * @see #WIDTH\n     ",
    "links" : [ ]
  }, {
    "name" : "WIDTH_SEMI_EXTENDED",
    "type" : "Float",
    "comment" : "\n     * A moderately extended width.\n     * @see #WIDTH\n     ",
    "links" : [ ]
  }, {
    "name" : "WIDTH_EXTENDED",
    "type" : "Float",
    "comment" : "\n     * The most extended predefined width.\n     * @see #WIDTH\n     ",
    "links" : [ ]
  }, {
    "name" : "POSTURE",
    "type" : "TextAttribute",
    "comment" : "\n     * Attribute key for the posture of a font.  Values are instances\n     * of <b><code>Number</code></b>. The default value is\n     * <code>POSTURE_REGULAR</code>.\n     *\n     * <p>Two constant values are provided, {@link #POSTURE_REGULAR}\n     * and {@link #POSTURE_OBLIQUE}. The value\n     * <code>POSTURE_OBLIQUE</code> corresponds to the style value\n     * <code>Font.ITALIC</code> as passed to the <code>Font</code>\n     * constructor.\n     *\n     * <p>The value is roughly the slope of the stems of the font,\n     * expressed as the run over the rise.  Positive values lean right.\n     *\n     * <p>The system can interpolate the provided value.\n     *\n     * <p>This will affect the font's italic angle as returned by\n     * <code>Font.getItalicAngle</code>.\n     *\n     ",
    "links" : [ "#POSTURE_OBLIQUE", "#POSTURE_REGULAR" ]
  }, {
    "name" : "POSTURE_REGULAR",
    "type" : "Float",
    "comment" : "\n     * The standard posture, upright.  This is the default value for\n     * <code>POSTURE</code>.\n     * @see #POSTURE\n     ",
    "links" : [ ]
  }, {
    "name" : "POSTURE_OBLIQUE",
    "type" : "Float",
    "comment" : "\n     * The standard italic posture.\n     * @see #POSTURE\n     ",
    "links" : [ ]
  }, {
    "name" : "SIZE",
    "type" : "TextAttribute",
    "comment" : "\n     * Attribute key for the font size.  Values are instances of\n     * <b><code>Number</code></b>.  The default value is 12pt.\n     *\n     * <p>This corresponds to the <code>size</code> parameter to the\n     * <code>Font</code> constructor.\n     *\n     * <p>Very large or small sizes will impact rendering performance,\n     * and the rendering system might not render text at these sizes.\n     * Negative sizes are illegal and result in the default size.\n     *\n     * <p>Note that the appearance and metrics of a 12pt font with a\n     * 2x transform might be different than that of a 24 point font\n     * with no transform.\n     ",
    "links" : [ ]
  }, {
    "name" : "TRANSFORM",
    "type" : "TextAttribute",
    "comment" : "\n     * Attribute key for the transform of a font.  Values are\n     * instances of <b><code>TransformAttribute</code></b>.  The\n     * default value is <code>TransformAttribute.IDENTITY</code>.\n     *\n     * <p>The primary intent is to support scaling and skewing, though\n     * other effects are possible.</p>\n     *\n     * <p>Some transforms will cause the baseline to be rotated and/or\n     * shifted.  The text and the baseline are transformed together so\n     * that the text follows the new baseline.  For example, with text\n     * on a horizontal baseline, the new baseline follows the\n     * direction of the unit x vector passed through the\n     * transform. Text metrics are measured against this new baseline.\n     * So, for example, with other things being equal, text rendered\n     * with a rotated TRANSFORM and an unrotated TRANSFORM will measure as\n     * having the same ascent, descent, and advance.</p>\n     ",
    "links" : [ ]
  }, {
    "name" : "SUPERSCRIPT",
    "type" : "TextAttribute",
    "comment" : "\n     * Attribute key for superscripting and subscripting.  Values are\n     * instances of <b><code>Integer</code></b>.  The default value is\n     * 0, which means that no superscript or subscript is used.\n     *\n     * <p>Two constant values are provided, see {@link\n     * #SUPERSCRIPT_SUPER} and {@link #SUPERSCRIPT_SUB}.  These have\n     * the values 1 and -1 respectively.  Values of\n     * greater magnitude define greater levels of superscript or\n     * subscripting, for example, 2 corresponds to super-superscript,\n     * 3 to super-super-superscript, and similarly for negative values\n     * and subscript, up to a level of 7 (or -7).  Values beyond this\n     * range are reserved; behavior is platform-dependent.\n     *\n     * <p><code>SUPERSCRIPT</code> can\n     * impact the ascent and descent of a font.  The ascent\n     * and descent can never become negative, however.\n     ",
    "links" : [ "#SUPERSCRIPT_SUB", "#SUPERSCRIPT_SUPER" ]
  }, {
    "name" : "SUPERSCRIPT_SUPER",
    "type" : "Integer",
    "comment" : "\n     * Standard superscript.\n     * @see #SUPERSCRIPT\n     ",
    "links" : [ ]
  }, {
    "name" : "SUPERSCRIPT_SUB",
    "type" : "Integer",
    "comment" : "\n     * Standard subscript.\n     * @see #SUPERSCRIPT\n     ",
    "links" : [ ]
  }, {
    "name" : "FONT",
    "type" : "TextAttribute",
    "comment" : "\n     * Attribute key used to provide the font to use to render text.\n     *\n     * The default\n     * value is null, indicating that normal resolution of a\n     * <code>Font</code> from attributes should be performed.\n     *\n     * <p><code>TextLayout</code> and\n     * <code>AttributedCharacterIterator</code> work in terms of\n     * <code>Maps</code> of <code>TextAttributes</code>.  Normally,\n     * all the attributes are examined and used to select and\n     * configure a <code>Font</code> instance.  If a <code>FONT</code>\n     * attribute is present, though, its associated <code>Font</code>\n     * will be used.  This provides a way for users to override the\n     * resolution of font attributes into a <code>Font</code>, or\n     * force use of a particular <code>Font</code> instance.  This\n     * also allows users to specify subclasses of <code>Font</code> in\n     * cases where a <code>Font</code> can be subclassed.\n     *\n     * <p><code>FONT</code> is used for special situations where\n     * clients already have a <code>Font</code> instance but still\n     * need to use <code>Map</code>-based APIs.  Typically, there will\n     * be no other attributes in the <code>Map</code> except the\n     * <code>FONT</code> attribute.  With <code>Map</code>-based APIs\n     * the common case is to specify all attributes individually, so\n     * <code>FONT</code> is not needed or desireable.\n     *\n     * <p>However, if both <code>FONT</code> and other attributes are\n     * present in the <code>Map</code>, the rendering system will\n     * merge the attributes defined in the <code>Font</code> with the\n     * additional attributes.  This merging process classifies\n     * <code>TextAttributes</code> into two groups.  One group, the\n     * 'primary' group, is considered fundamental to the selection and\n     * metric behavior of a font.  These attributes are\n     * <code>FAMILY</code>, <code>WEIGHT</code>, <code>WIDTH</code>,\n     * <code>POSTURE</code>, <code>SIZE</code>,\n     * <code>TRANSFORM</code>, <code>SUPERSCRIPT</code>, and\n     * <code>TRACKING</code>. The other group, the 'secondary' group,\n     * consists of all other defined attributes, with the exception of\n     * <code>FONT</code> itself.\n     *\n     * <p>To generate the new <code>Map</code>, first the\n     * <code>Font</code> is obtained from the <code>FONT</code>\n     * attribute, and <em>all</em> of its attributes extracted into a\n     * new <code>Map</code>.  Then only the <em>secondary</em>\n     * attributes from the original <code>Map</code> are added to\n     * those in the new <code>Map</code>.  Thus the values of primary\n     * attributes come solely from the <code>Font</code>, and the\n     * values of secondary attributes originate with the\n     * <code>Font</code> but can be overridden by other values in the\n     * <code>Map</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "CHAR_REPLACEMENT",
    "type" : "TextAttribute",
    "comment" : "\n     * Attribute key for a user-defined glyph to display in lieu\n     * of the font's standard glyph for a character.  Values are\n     * intances of GraphicAttribute.  The default value is null,\n     * indicating that the standard glyphs provided by the font\n     * should be used.\n     *\n     * <p>This attribute is used to reserve space for a graphic or\n     * other component embedded in a line of text.  It is required for\n     * correct positioning of 'inline' components within a line when\n     * bidirectional reordering (see {@link java.text.Bidi}) is\n     * performed.  Each character (Unicode code point) will be\n     * rendered using the provided GraphicAttribute. Typically, the\n     * characters to which this attribute is applied should be\n     * <code>&#92;uFFFC</code>.\n     *\n     * <p>The GraphicAttribute determines the logical and visual\n     * bounds of the text; the actual Font values are ignored.\n     ",
    "links" : [ "java.text.Bidi" ]
  }, {
    "name" : "FOREGROUND",
    "type" : "TextAttribute",
    "comment" : "\n     * Attribute key for the paint used to render the text.  Values are\n     * instances of <b><code>Paint</code></b>.  The default value is\n     * null, indicating that the <code>Paint</code> set on the\n     * <code>Graphics2D</code> at the time of rendering is used.\n     *\n     * <p>Glyphs will be rendered using this\n     * <code>Paint</code> regardless of the <code>Paint</code> value\n     * set on the <code>Graphics</code> (but see {@link #SWAP_COLORS}).\n     *\n     * @see #SWAP_COLORS\n     ",
    "links" : [ "#SWAP_COLORS" ]
  }, {
    "name" : "BACKGROUND",
    "type" : "TextAttribute",
    "comment" : "\n     * Attribute key for the paint used to render the background of\n     * the text.  Values are instances of <b><code>Paint</code></b>.\n     * The default value is null, indicating that the background\n     * should not be rendered.\n     *\n     * <p>The logical bounds of the text will be filled using this\n     * <code>Paint</code>, and then the text will be rendered on top\n     * of it (but see {@link #SWAP_COLORS}).\n     *\n     * <p>The visual bounds of the text is extended to include the\n     * logical bounds, if necessary.  The outline is not affected.\n     *\n     * @see #SWAP_COLORS\n     ",
    "links" : [ "#SWAP_COLORS" ]
  }, {
    "name" : "UNDERLINE",
    "type" : "TextAttribute",
    "comment" : "\n     * Attribute key for underline.  Values are instances of\n     * <b><code>Integer</code></b>.  The default value is -1, which\n     * means no underline.\n     *\n     * <p>The constant value {@link #UNDERLINE_ON} is provided.\n     *\n     * <p>The underline affects both the visual bounds and the outline\n     * of the text.\n     ",
    "links" : [ "#UNDERLINE_ON" ]
  }, {
    "name" : "UNDERLINE_ON",
    "type" : "Integer",
    "comment" : "\n     * Standard underline.\n     *\n     * @see #UNDERLINE\n     ",
    "links" : [ ]
  }, {
    "name" : "STRIKETHROUGH",
    "type" : "TextAttribute",
    "comment" : "\n     * Attribute key for strikethrough.  Values are instances of\n     * <b><code>Boolean</code></b>.  The default value is\n     * <code>false</code>, which means no strikethrough.\n     *\n     * <p>The constant value {@link #STRIKETHROUGH_ON} is provided.\n     *\n     * <p>The strikethrough affects both the visual bounds and the\n     * outline of the text.\n     ",
    "links" : [ "#STRIKETHROUGH_ON" ]
  }, {
    "name" : "STRIKETHROUGH_ON",
    "type" : "Boolean",
    "comment" : "\n     * A single strikethrough.\n     *\n     * @see #STRIKETHROUGH\n     ",
    "links" : [ ]
  }, {
    "name" : "RUN_DIRECTION",
    "type" : "TextAttribute",
    "comment" : "\n     * Attribute key for the run direction of the line.  Values are\n     * instances of <b><code>Boolean</code></b>.  The default value is\n     * null, which indicates that the standard Bidi algorithm for\n     * determining run direction should be used with the value {@link\n     * java.text.Bidi#DIRECTION_DEFAULT_LEFT_TO_RIGHT}.\n     *\n     * <p>The constants {@link #RUN_DIRECTION_RTL} and {@link\n     * #RUN_DIRECTION_LTR} are provided.\n     *\n     * <p>This determines the value passed to the {@link\n     * java.text.Bidi} constructor to select the primary direction of\n     * the text in the paragraph.\n     *\n     * <p><em>Note:</em> This attribute should have the same value for\n     * all the text in a paragraph, otherwise the behavior is\n     * undetermined.\n     *\n     * @see java.text.Bidi\n     ",
    "links" : [ "java.text.Bidi#DIRECTION_DEFAULT_LEFT_TO_RIGHT", "java.text.Bidi", "#RUN_DIRECTION_RTL", "#RUN_DIRECTION_LTR" ]
  }, {
    "name" : "RUN_DIRECTION_LTR",
    "type" : "Boolean",
    "comment" : "\n     * Left-to-right run direction.\n     * @see #RUN_DIRECTION\n     ",
    "links" : [ ]
  }, {
    "name" : "RUN_DIRECTION_RTL",
    "type" : "Boolean",
    "comment" : "\n     * Right-to-left run direction.\n     * @see #RUN_DIRECTION\n     ",
    "links" : [ ]
  }, {
    "name" : "BIDI_EMBEDDING",
    "type" : "TextAttribute",
    "comment" : "\n     * Attribute key for the embedding level of the text.  Values are\n     * instances of <b><code>Integer</code></b>.  The default value is\n     * <code>null</code>, indicating that the the Bidirectional\n     * algorithm should run without explicit embeddings.\n     *\n     * <p>Positive values 1 through 61 are <em>embedding</em> levels,\n     * negative values -1 through -61 are <em>override</em> levels.\n     * The value 0 means that the base line direction is used.  These\n     * levels are passed in the embedding levels array to the {@link\n     * java.text.Bidi} constructor.\n     *\n     * <p><em>Note:</em> When this attribute is present anywhere in\n     * a paragraph, then any Unicode bidi control characters (RLO,\n     * LRO, RLE, LRE, and PDF) in the paragraph are\n     * disregarded, and runs of text where this attribute is not\n     * present are treated as though it were present and had the value\n     * 0.\n     *\n     * @see java.text.Bidi\n     ",
    "links" : [ "java.text.Bidi" ]
  }, {
    "name" : "JUSTIFICATION",
    "type" : "TextAttribute",
    "comment" : "\n     * Attribute key for the justification of a paragraph.  Values are\n     * instances of <b><code>Number</code></b>.  The default value is\n     * 1, indicating that justification should use the full width\n     * provided.  Values are pinned to the range [0..1].\n     *\n     * <p>The constants {@link #JUSTIFICATION_FULL} and {@link\n     * #JUSTIFICATION_NONE} are provided.\n     *\n     * <p>Specifies the fraction of the extra space to use when\n     * justification is requested on a <code>TextLayout</code>. For\n     * example, if the line is 50 points wide and it is requested to\n     * justify to 70 points, a value of 0.75 will pad to use\n     * three-quarters of the remaining space, or 15 points, so that\n     * the resulting line will be 65 points in length.\n     *\n     * <p><em>Note:</em> This should have the same value for all the\n     * text in a paragraph, otherwise the behavior is undetermined.\n     ",
    "links" : [ "#JUSTIFICATION_FULL", "#JUSTIFICATION_NONE" ]
  }, {
    "name" : "JUSTIFICATION_FULL",
    "type" : "Float",
    "comment" : "\n     * Justify the line to the full requested width.  This is the\n     * default value for <code>JUSTIFICATION</code>.\n     * @see #JUSTIFICATION\n     ",
    "links" : [ ]
  }, {
    "name" : "JUSTIFICATION_NONE",
    "type" : "Float",
    "comment" : "\n     * Do not allow the line to be justified.\n     * @see #JUSTIFICATION\n     ",
    "links" : [ ]
  }, {
    "name" : "INPUT_METHOD_HIGHLIGHT",
    "type" : "TextAttribute",
    "comment" : "\n     * Attribute key for input method highlight styles.\n     *\n     * The default value is <code>null</code>,\n     * which means that input method styles should not be applied\n     * before rendering.\n     *\n     * @see java.text.Annotation\n     ",
    "links" : [ ]
  }, {
    "name" : "INPUT_METHOD_UNDERLINE",
    "type" : "TextAttribute",
    "comment" : "\n     * Attribute key for input method underlines.  Values\n     * are instances of <b><code>Integer</code></b>.  The default\n     * value is <code>-1</code>, which means no underline.\n     *\n     * <p>Several constant values are provided, see {@link\n     * #UNDERLINE_LOW_ONE_PIXEL}, {@link #UNDERLINE_LOW_TWO_PIXEL},\n     * {@link #UNDERLINE_LOW_DOTTED}, {@link #UNDERLINE_LOW_GRAY}, and\n     * {@link #UNDERLINE_LOW_DASHED}.\n     *\n     * <p>This may be used in conjunction with {@link #UNDERLINE} if\n     * desired.  The primary purpose is for use by input methods.\n     * Other use of these underlines for simple ornamentation might\n     * confuse users.\n     *\n     * <p>The input method underline affects both the visual bounds and\n     * the outline of the text.\n     *\n     * @since 1.3\n     ",
    "links" : [ "#UNDERLINE_LOW_DOTTED", "#UNDERLINE_LOW_TWO_PIXEL", "#UNDERLINE", "#UNDERLINE_LOW_DASHED", "#UNDERLINE_LOW_GRAY", "#UNDERLINE_LOW_ONE_PIXEL" ]
  }, {
    "name" : "UNDERLINE_LOW_ONE_PIXEL",
    "type" : "Integer",
    "comment" : "\n     * Single pixel solid low underline.\n     * @see #INPUT_METHOD_UNDERLINE\n     * @since 1.3\n     ",
    "links" : [ ]
  }, {
    "name" : "UNDERLINE_LOW_TWO_PIXEL",
    "type" : "Integer",
    "comment" : "\n     * Double pixel solid low underline.\n     * @see #INPUT_METHOD_UNDERLINE\n     * @since 1.3\n     ",
    "links" : [ ]
  }, {
    "name" : "UNDERLINE_LOW_DOTTED",
    "type" : "Integer",
    "comment" : "\n     * Single pixel dotted low underline.\n     * @see #INPUT_METHOD_UNDERLINE\n     * @since 1.3\n     ",
    "links" : [ ]
  }, {
    "name" : "UNDERLINE_LOW_GRAY",
    "type" : "Integer",
    "comment" : "\n     * Double pixel gray low underline.\n     * @see #INPUT_METHOD_UNDERLINE\n     * @since 1.3\n     ",
    "links" : [ ]
  }, {
    "name" : "UNDERLINE_LOW_DASHED",
    "type" : "Integer",
    "comment" : "\n     * Single pixel dashed low underline.\n     * @see #INPUT_METHOD_UNDERLINE\n     * @since 1.3\n     ",
    "links" : [ ]
  }, {
    "name" : "SWAP_COLORS",
    "type" : "TextAttribute",
    "comment" : "\n     * Attribute key for swapping foreground and background\n     * <code>Paints</code>.  Values are instances of\n     * <b><code>Boolean</code></b>.  The default value is\n     * <code>false</code>, which means do not swap colors.\n     *\n     * <p>The constant value {@link #SWAP_COLORS_ON} is defined.\n     *\n     * <p>If the {@link #FOREGROUND} attribute is set, its\n     * <code>Paint</code> will be used as the background, otherwise\n     * the <code>Paint</code> currently on the <code>Graphics</code>\n     * will be used.  If the {@link #BACKGROUND} attribute is set, its\n     * <code>Paint</code> will be used as the foreground, otherwise\n     * the system will find a contrasting color to the\n     * (resolved) background so that the text will be visible.\n     *\n     * @see #FOREGROUND\n     * @see #BACKGROUND\n     ",
    "links" : [ "#FOREGROUND", "#BACKGROUND", "#SWAP_COLORS_ON" ]
  }, {
    "name" : "SWAP_COLORS_ON",
    "type" : "Boolean",
    "comment" : "\n     * Swap foreground and background.\n     * @see #SWAP_COLORS\n     * @since 1.3\n     ",
    "links" : [ ]
  }, {
    "name" : "NUMERIC_SHAPING",
    "type" : "TextAttribute",
    "comment" : "\n     * Attribute key for converting ASCII decimal digits to other\n     * decimal ranges.  Values are instances of {@link NumericShaper}.\n     * The default is <code>null</code>, which means do not perform\n     * numeric shaping.\n     *\n     * <p>When a numeric shaper is defined, the text is first\n     * processed by the shaper before any other analysis of the text\n     * is performed.\n     *\n     * <p><em>Note:</em> This should have the same value for all the\n     * text in the paragraph, otherwise the behavior is undetermined.\n     *\n     * @see NumericShaper\n     * @since 1.4\n     ",
    "links" : [ "java.awt.font.NumericShaper" ]
  }, {
    "name" : "KERNING",
    "type" : "TextAttribute",
    "comment" : "\n     * Attribute key to request kerning. Values are instances of\n     * <b><code>Integer</code></b>.  The default value is\n     * <code>0</code>, which does not request kerning.\n     *\n     * <p>The constant value {@link #KERNING_ON} is provided.\n     *\n     * <p>The default advances of single characters are not\n     * appropriate for some character sequences, for example \"To\" or\n     * \"AWAY\".  Without kerning the adjacent characters appear to be\n     * separated by too much space.  Kerning causes selected sequences\n     * of characters to be spaced differently for a more pleasing\n     * visual appearance.\n     *\n     * @since 1.6\n     ",
    "links" : [ "#KERNING_ON" ]
  }, {
    "name" : "KERNING_ON",
    "type" : "Integer",
    "comment" : "\n     * Request standard kerning.\n     * @see #KERNING\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : "LIGATURES",
    "type" : "TextAttribute",
    "comment" : "\n     * Attribute key for enabling optional ligatures. Values are\n     * instances of <b><code>Integer</code></b>.  The default value is\n     * <code>0</code>, which means do not use optional ligatures.\n     *\n     * <p>The constant value {@link #LIGATURES_ON} is defined.\n     *\n     * <p>Ligatures required by the writing system are always enabled.\n     *\n     * @since 1.6\n     ",
    "links" : [ "#LIGATURES_ON" ]
  }, {
    "name" : "LIGATURES_ON",
    "type" : "Integer",
    "comment" : "\n     * Request standard optional ligatures.\n     * @see #LIGATURES\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : "TRACKING",
    "type" : "TextAttribute",
    "comment" : "\n     * Attribute key to control tracking.  Values are instances of\n     * <b><code>Number</code></b>.  The default value is\n     * <code>0</code>, which means no additional tracking.\n     *\n     * <p>The constant values {@link #TRACKING_TIGHT} and {@link\n     * #TRACKING_LOOSE} are provided.\n     *\n     * <p>The tracking value is multiplied by the font point size and\n     * passed through the font transform to determine an additional\n     * amount to add to the advance of each glyph cluster.  Positive\n     * tracking values will inhibit formation of optional ligatures.\n     * Tracking values are typically between <code>-0.1</code> and\n     * <code>0.3</code>; values outside this range are generally not\n     * desireable.\n     *\n     * @since 1.6\n     ",
    "links" : [ "#TRACKING_TIGHT", "#TRACKING_LOOSE" ]
  }, {
    "name" : "TRACKING_TIGHT",
    "type" : "Float",
    "comment" : "\n     * Perform tight tracking.\n     * @see #TRACKING\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : "TRACKING_LOOSE",
    "type" : "Float",
    "comment" : "\n     * Perform loose tracking.\n     * @see #TRACKING\n     * @since 1.6\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected Object readResolve() throws InvalidObjectException",
    "returnType" : "Object",
    "comment" : "\n     * Resolves instances being deserialized to the predefined constants.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "protected Object readResolve() throws InvalidObjectException" ],
  "variableNames" : [ "instanceMap", "serialVersionUID", "FAMILY", "WEIGHT", "WEIGHT_EXTRA_LIGHT", "WEIGHT_LIGHT", "WEIGHT_DEMILIGHT", "WEIGHT_REGULAR", "WEIGHT_SEMIBOLD", "WEIGHT_MEDIUM", "WEIGHT_DEMIBOLD", "WEIGHT_BOLD", "WEIGHT_HEAVY", "WEIGHT_EXTRABOLD", "WEIGHT_ULTRABOLD", "WIDTH", "WIDTH_CONDENSED", "WIDTH_SEMI_CONDENSED", "WIDTH_REGULAR", "WIDTH_SEMI_EXTENDED", "WIDTH_EXTENDED", "POSTURE", "POSTURE_REGULAR", "POSTURE_OBLIQUE", "SIZE", "TRANSFORM", "SUPERSCRIPT", "SUPERSCRIPT_SUPER", "SUPERSCRIPT_SUB", "FONT", "CHAR_REPLACEMENT", "FOREGROUND", "BACKGROUND", "UNDERLINE", "UNDERLINE_ON", "STRIKETHROUGH", "STRIKETHROUGH_ON", "RUN_DIRECTION", "RUN_DIRECTION_LTR", "RUN_DIRECTION_RTL", "BIDI_EMBEDDING", "JUSTIFICATION", "JUSTIFICATION_FULL", "JUSTIFICATION_NONE", "INPUT_METHOD_HIGHLIGHT", "INPUT_METHOD_UNDERLINE", "UNDERLINE_LOW_ONE_PIXEL", "UNDERLINE_LOW_TWO_PIXEL", "UNDERLINE_LOW_DOTTED", "UNDERLINE_LOW_GRAY", "UNDERLINE_LOW_DASHED", "SWAP_COLORS", "SWAP_COLORS_ON", "NUMERIC_SHAPING", "KERNING", "KERNING_ON", "LIGATURES", "LIGATURES_ON", "TRACKING", "TRACKING_TIGHT", "TRACKING_LOOSE" ]
}