{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/camera2/CameraCaptureSession.java",
  "packageName" : "android.hardware.camera2",
  "className" : "StateCallback",
  "comment" : "\n     * A callback object for receiving updates about the state of a camera capture session.\n     *\n     ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public abstract void onConfigured(@NonNull CameraCaptureSession session)",
    "returnType" : "void",
    "comment" : "\n         * This method is called when the camera device has finished configuring itself, and the\n         * session can start processing capture requests.\n         *\n         * <p>If there are capture requests already queued with the session, they will start\n         * processing once this callback is invoked, and the session will call {@link #onActive}\n         * right after this callback is invoked.</p>\n         *\n         * <p>If no capture requests have been submitted, then the session will invoke\n         * {@link #onReady} right after this callback.</p>\n         *\n         * <p>If the camera device configuration fails, then {@link #onConfigureFailed} will\n         * be invoked instead of this callback.</p>\n         *\n         * @param session the successfully configured session instance\n         ",
    "links" : [ "#onReady", "#onActive", "#onConfigureFailed" ]
  }, {
    "name" : "public abstract void onConfigureFailed(@NonNull CameraCaptureSession session)",
    "returnType" : "void",
    "comment" : "\n         * This method is called if the session cannot be configured as requested.\n         *\n         * <p>This can happen if the set of requested outputs contains unsupported sizes,\n         * or too many outputs are requested at once.</p>\n         *\n         * <p>The session is considered to be closed, and all methods called on it after this\n         * callback is invoked will throw an IllegalStateException. Any capture requests submitted\n         * to the session prior to this callback will be discarded and will not produce any\n         * callbacks on their listeners.</p>\n         *\n         * @param session the session instance that failed during configuration\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onReady(@NonNull CameraCaptureSession session)",
    "returnType" : "void",
    "comment" : "\n         * This method is called every time the session has no more capture requests to process.\n         *\n         * <p>During the creation of a new session, this callback is invoked right after\n         * {@link #onConfigured} if no capture requests were submitted to the session prior to it\n         * completing configuration.</p>\n         *\n         * <p>Otherwise, this callback will be invoked any time the session finishes processing\n         * all of its active capture requests, and no repeating request or burst is set up.</p>\n         *\n         * @param session the session returned by {@link #onConfigured}\n         *\n         ",
    "links" : [ "#onConfigured" ]
  }, {
    "name" : "public void onActive(@NonNull CameraCaptureSession session)",
    "returnType" : "void",
    "comment" : "\n         * This method is called when the session starts actively processing capture requests.\n         *\n         * <p>If capture requests are submitted prior to {@link #onConfigured} being called,\n         * then the session will start processing those requests immediately after the callback,\n         * and this method will be immediately called after {@link #onConfigured}.\n         *\n         * <p>If the session runs out of capture requests to process and calls {@link #onReady},\n         * then this callback will be invoked again once new requests are submitted for capture.</p>\n         *\n         * @param session the session returned by {@link #onConfigured}\n         ",
    "links" : [ "#onReady", "#onConfigured" ]
  }, {
    "name" : "public void onCaptureQueueEmpty(@NonNull CameraCaptureSession session)",
    "returnType" : "void",
    "comment" : "\n         * This method is called when camera device's input capture queue becomes empty,\n         * and is ready to accept the next request.\n         *\n         * <p>Pending capture requests exist in one of two queues: the in-flight queue where requests\n         * are already in different stages of processing pipeline, and an input queue where requests\n         * wait to enter the in-flight queue. The input queue is needed because more requests may be\n         * submitted than the current camera device pipeline depth.</p>\n         *\n         * <p>This callback is fired when the input queue becomes empty, and the camera device may\n         * have to fall back to the repeating request if set, or completely skip the next frame from\n         * the sensor. This can cause glitches to camera preview output, for example. This callback\n         * will only fire after requests queued by capture() or captureBurst(), not after a\n         * repeating request or burst enters the in-flight queue. For example, in the common case\n         * of a repeating request and a single-shot JPEG capture, this callback only fires when the\n         * JPEG request has entered the in-flight queue for capture.</p>\n         *\n         * <p>By only sending a new {@link #capture} or {@link #captureBurst} when the input\n         * queue is empty, pipeline latency can be minimized.</p>\n         *\n         * <p>This callback is not fired when the session is first created. It is different from\n         * {@link #onReady}, which is fired when all requests in both queues have been processed.</p>\n         *\n         * @param session\n         *            The session returned by {@link #onConfigured}\n         ",
    "links" : [ "#onReady", "#onConfigured", "#captureBurst", "#capture" ]
  }, {
    "name" : "public void onClosed(@NonNull CameraCaptureSession session)",
    "returnType" : "void",
    "comment" : "\n         * This method is called when the session is closed.\n         *\n         * <p>A session is closed when a new session is created by the parent camera device,\n         * or when the parent camera device is closed (either by the user closing the device,\n         * or due to a camera device disconnection or fatal error).</p>\n         *\n         * <p>Once a session is closed, all methods on it will throw an IllegalStateException, and\n         * any repeating requests or bursts are stopped (as if {@link #stopRepeating()} was called).\n         * However, any in-progress capture requests submitted to the session will be completed\n         * as normal.</p>\n         *\n         * @param session the session returned by {@link #onConfigured}\n         ",
    "links" : [ "#stopRepeating()", "#onConfigured" ]
  }, {
    "name" : "public void onSurfacePrepared(@NonNull CameraCaptureSession session, @NonNull Surface surface)",
    "returnType" : "void",
    "comment" : "\n         * This method is called when the buffer pre-allocation for an output Surface is complete.\n         *\n         * <p>Buffer pre-allocation for an output Surface is started by the {@link #prepare} call.\n         * While allocation is underway, the Surface must not be used as a capture target.\n         * Once this callback fires, the output Surface provided can again be used as a target for\n         * a capture request.</p>\n         *\n         * <p>In case of a error during pre-allocation (such as running out of suitable memory),\n         * this callback is still invoked after the error is encountered, though some buffers may\n         * not have been successfully pre-allocated.</p>\n         *\n         * @param session the session returned by {@link #onConfigured}\n         * @param surface the Surface that was used with the {@link #prepare} call.\n         ",
    "links" : [ "#onConfigured", "#prepare" ]
  } ],
  "methodNames" : [ "public abstract void onConfigured(@NonNull CameraCaptureSession session)", "public abstract void onConfigureFailed(@NonNull CameraCaptureSession session)", "public void onReady(@NonNull CameraCaptureSession session)", "public void onActive(@NonNull CameraCaptureSession session)", "public void onCaptureQueueEmpty(@NonNull CameraCaptureSession session)", "public void onClosed(@NonNull CameraCaptureSession session)", "public void onSurfacePrepared(@NonNull CameraCaptureSession session, @NonNull Surface surface)" ],
  "variableNames" : [ ]
}