{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/LoudnessCodecController.java",
  "packageName" : "android.media",
  "className" : "LoudnessCodecController",
  "comment" : "\n * Class for getting recommended loudness parameter updates for audio decoders as they are used\n * to play back media content according to the encoded format and current audio routing. These\n * audio decoder updates leverage loudness metadata present in compressed audio streams. They\n * ensure the loudness and dynamic range of the content is optimized to the physical\n * characteristics of the audio output device (e.g. phone microspeakers vs headphones vs TV\n * speakers).Those updates can be automatically applied to the {@link MediaCodec} instance(s), or\n * be provided to the user. The codec loudness management parameter updates are computed in\n * accordance to the CTA-2075 standard.\n * <p>A new object should be instantiated for each audio session\n * (see {@link AudioManager#generateAudioSessionId()}) using creator methods {@link #create(int)} or\n * {@link #create(int, Executor, OnLoudnessCodecUpdateListener)}.\n ",
  "links" : [ "android.media.MediaCodec", "#create(int)", "android.media.AudioManager#generateAudioSessionId()", "#create(int" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLcDispatcher",
    "type" : "LoudnessCodecDispatcher",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mControllerLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSessionId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMediaCodecs",
    "type" : "HashMap<LoudnessCodecInfo, Set<MediaCodec>>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static LoudnessCodecController create(int sessionId)",
    "returnType" : "LoudnessCodecController",
    "comment" : "\n     * Creates a new instance of {@link LoudnessCodecController}\n     *\n     * <p>This method should be used when the client does not need to alter the\n     * codec loudness parameters before they are applied to the audio decoders.\n     * Otherwise, use {@link #create(int, Executor, OnLoudnessCodecUpdateListener)}.\n     *\n     * @param sessionId  the session ID of the track that will receive data\n     *                        from the added {@link MediaCodec}'s\n     *\n     * @return the {@link LoudnessCodecController} instance\n     ",
    "links" : [ "android.media.MediaCodec", "android.media.LoudnessCodecController", "#create(int" ]
  }, {
    "name" : "public static LoudnessCodecController create(int sessionId, @NonNull @CallbackExecutor Executor executor, @NonNull OnLoudnessCodecUpdateListener listener)",
    "returnType" : "LoudnessCodecController",
    "comment" : "\n     * Creates a new instance of {@link LoudnessCodecController}\n     *\n     * <p>This method should be used when the client wants to alter the codec\n     * loudness parameters before they are applied to the audio decoders.\n     * Otherwise, use {@link #create( int)}.\n     *\n     * @param sessionId       the session ID of the track that will receive data\n     *                        from the added {@link MediaCodec}'s\n     * @param executor        {@link Executor} to handle the callbacks\n     * @param listener        used for receiving updates\n     *\n     * @return the {@link LoudnessCodecController} instance\n     ",
    "links" : [ "android.media.MediaCodec", "android.media.LoudnessCodecController", "android.annotation.CallbackExecutor", "#create(" ]
  }, {
    "name" : "public static LoudnessCodecController createForTesting(int sessionId, @NonNull @CallbackExecutor Executor executor, @NonNull OnLoudnessCodecUpdateListener listener, @NonNull IAudioService service)",
    "returnType" : "LoudnessCodecController",
    "comment" : "\n     * Creates a new instance of {@link LoudnessCodecController}\n     *\n     * <p>This method should be used only in testing\n     *\n     * @param sessionId  the session ID of the track that will receive data\n     *                        from the added {@link MediaCodec}'s\n     * @param executor {@link Executor} to handle the callbacks\n     * @param listener used for receiving updates\n     * @param service  interface for communicating with AudioService\n     *\n     * @return the {@link LoudnessCodecController} instance\n     * @hide\n     ",
    "links" : [ "android.media.MediaCodec", "android.media.LoudnessCodecController", "android.annotation.CallbackExecutor" ]
  }, {
    "name" : "public boolean addMediaCodec(@NonNull MediaCodec mediaCodec)",
    "returnType" : "boolean",
    "comment" : "\n     * Adds a new {@link MediaCodec} that will stream data to a player\n     * which uses {@link #mSessionId}.\n     *\n     * <p>No new element will be added if the passed {@code mediaCodec} was\n     * previously added.\n     *\n     * @param mediaCodec the codec to start receiving asynchronous loudness\n     *                   updates. The codec has to be in a configured or started\n     *                   state in order to add it for loudness updates.\n     * @return {@code false} if the {@code mediaCodec} was not configured or does\n     * not contain loudness metadata, {@code true} otherwise.\n     * @throws IllegalArgumentException if the same {@code mediaCodec} was already\n     *                                  added before.\n     ",
    "links" : [ "android.media.MediaCodec", "#mSessionId" ]
  }, {
    "name" : "public void removeMediaCodec(@NonNull MediaCodec mediaCodec)",
    "returnType" : "void",
    "comment" : "\n     * Removes the {@link MediaCodec} from receiving loudness updates.\n     *\n     * <p>This method can be called while asynchronous updates are live.\n     *\n     * <p>No elements will be removed if the passed mediaCodec was not added before.\n     *\n     * @param mediaCodec the element to remove for receiving asynchronous updates\n     * @throws IllegalArgumentException if the {@code mediaCodec} was not configured,\n     *                                  does not contain loudness metadata or if it\n     *                                  was not added before\n     ",
    "links" : [ "android.media.MediaCodec" ]
  }, {
    "name" : "public Bundle getLoudnessCodecParams(@NonNull MediaCodec mediaCodec)",
    "returnType" : "Bundle",
    "comment" : "\n     * Returns the loudness parameters of the registered audio decoders\n     *\n     * <p>Those parameters may have been automatically applied if the\n     * {@code LoudnessCodecController} was created with {@link #create(int)}, or they are the\n     * parameters that have been sent to the {@link OnLoudnessCodecUpdateListener} if using a\n     * codec update listener.\n     *\n     * @param mediaCodec codec that decodes loudness annotated data. Has to be added\n     *                   with {@link #addMediaCodec(MediaCodec)} before calling this\n     *                   method\n     * @throws IllegalArgumentException if the passed {@link MediaCodec} was not\n     *                                  added before calling this method\n     *\n     * @return the {@link Bundle} containing the current loudness parameters.\n     ",
    "links" : [ "OnLoudnessCodecUpdateListener", "#addMediaCodec(MediaCodec)", "#create(int)", "android.media.MediaCodec", "android.os.Bundle" ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "\n     * Stops any loudness updates and frees up the resources.\n     ",
    "links" : [ ]
  }, {
    "name" : " int getSessionId()",
    "returnType" : "int",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : " void mediaCodecsConsume(Consumer<Entry<LoudnessCodecInfo, Set<MediaCodec>>> consumer)",
    "returnType" : "void",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : "private static LoudnessCodecInfo getCodecInfo(@NonNull MediaCodec mediaCodec)",
    "returnType" : "LoudnessCodecInfo",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static LoudnessCodecController create(int sessionId)", "public static LoudnessCodecController create(int sessionId, @NonNull @CallbackExecutor Executor executor, @NonNull OnLoudnessCodecUpdateListener listener)", "public static LoudnessCodecController createForTesting(int sessionId, @NonNull @CallbackExecutor Executor executor, @NonNull OnLoudnessCodecUpdateListener listener, @NonNull IAudioService service)", "public boolean addMediaCodec(@NonNull MediaCodec mediaCodec)", "public void removeMediaCodec(@NonNull MediaCodec mediaCodec)", "public Bundle getLoudnessCodecParams(@NonNull MediaCodec mediaCodec)", "public void close()", " int getSessionId()", " void mediaCodecsConsume(Consumer<Entry<LoudnessCodecInfo, Set<MediaCodec>>> consumer)", "private static LoudnessCodecInfo getCodecInfo(@NonNull MediaCodec mediaCodec)" ],
  "variableNames" : [ "TAG", "mLcDispatcher", "mControllerLock", "mSessionId", "mMediaCodecs" ]
}