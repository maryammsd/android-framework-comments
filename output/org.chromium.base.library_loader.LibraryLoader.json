{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/chromium/base/library_loader/LibraryLoader.java",
  "packageName" : "org.chromium.base.library_loader",
  "className" : "LibraryLoader",
  "comment" : "\n * This class provides functionality to load and register the native libraries.\n * Callers are allowed to separate loading the libraries from initializing\n * them. When a zygote process is used (WebView or AppZygote) the per process\n * initialization happens after the application processes are forked from the\n * zygote process.\n *\n * The libraries may be loaded and initialized from any thread. Synchronization\n * primitives are used to ensure that overlapping requests from different\n * threads are handled sequentially.\n *\n * See also base/android/library_loader/library_loader_hooks.cc, which contains\n * the native counterpart to this class.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : " Constant guarding debug logging in this class.",
    "links" : [ ]
  }, {
    "name" : "DEPRECATED_REACHED_CODE_PROFILER_KEY",
    "type" : "String",
    "comment" : " Shared preferences key for the reached code profiler.",
    "links" : [ ]
  }, {
    "name" : "REACHED_CODE_SAMPLING_INTERVAL_KEY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ALLOW_CHROMIUM_LINKER_IN_ZYGOTE",
    "type" : "boolean",
    "comment" : " TODO(crbug.com/1154224): remove when the issue is closed.",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_REACHED_CODE_SAMPLING_INTERVAL_US",
    "type" : "int",
    "comment" : " Default sampling interval for reached code profiler in microseconds.",
    "links" : [ ]
  }, {
    "name" : "BACKGROUND_THREAD_POOL_KEY",
    "type" : "String",
    "comment" : " Shared preferences key for the background thread pool setting.",
    "links" : [ ]
  }, {
    "name" : "sInstance",
    "type" : "LibraryLoader",
    "comment" : " The singleton instance of LibraryLoader. Never null (not final for tests).",
    "links" : [ ]
  }, {
    "name" : "sBrowserStartupBlockedForTesting",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sEnableStateForTesting",
    "type" : "boolean",
    "comment" : " Helps mInitializedForTesting and mLoadStateForTesting to be removed by R8.",
    "links" : [ ]
  }, {
    "name" : "mInitialized",
    "type" : "boolean",
    "comment" : " accessed from multiple threads without a lock.",
    "links" : [ ]
  }, {
    "name" : "mFallbackToSystemLinker",
    "type" : "boolean",
    "comment" : " synchronization.",
    "links" : [ ]
  }, {
    "name" : "mLoadState",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLoadStateForTesting",
    "type" : "int",
    "comment" : " requires native explicitly loads it.",
    "links" : [ ]
  }, {
    "name" : "mInitializedForTesting",
    "type" : "boolean",
    "comment" : " requires native explicitly loads it.",
    "links" : [ ]
  }, {
    "name" : "mUseChromiumLinker",
    "type" : "boolean",
    "comment" : " Avoids locking: should be initialized very early.",
    "links" : [ ]
  }, {
    "name" : "mLibraryProcessType",
    "type" : "int",
    "comment" : " Avoids locking: should be initialized very early.",
    "links" : [ ]
  }, {
    "name" : "mMediator",
    "type" : "MultiProcessMediator",
    "comment" : " Mediates all communication between Linker instances in different processes.",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : " Guards all the fields below.",
    "links" : [ ]
  }, {
    "name" : "mLinker",
    "type" : "Linker",
    "comment" : " public setLinkerImplementation() below.",
    "links" : [ ]
  }, {
    "name" : "mLibraryPreloader",
    "type" : "NativeLibraryPreloader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLibraryPreloaderCalled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLoadedByZygote",
    "type" : "boolean",
    "comment" : " This is exposed to clients.",
    "links" : [ ]
  }, {
    "name" : "mCommandLineSwitched",
    "type" : "boolean",
    "comment" : " native.",
    "links" : [ ]
  }, {
    "name" : "sOverrideNativeLibraryCannotBeLoadedForTesting",
    "type" : "boolean",
    "comment" : " SplitCompatApplication.",
    "links" : [ ]
  }, {
    "name" : "sLoadFailedCallback",
    "type" : "Callback<UnsatisfiedLinkError>",
    "comment" : " Allow embedders to register a callback to handle native library load failures.",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static boolean mainProcessIntendsToProvideRelroFd()",
    "returnType" : "boolean",
    "comment" : " be attempted.",
    "links" : [ ]
  }, {
    "name" : "public final MultiProcessMediator getMediator()",
    "returnType" : "MultiProcessMediator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static LibraryLoader getInstance()",
    "returnType" : "LibraryLoader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setLibraryProcessType(@LibraryProcessType int type)",
    "returnType" : "void",
    "comment" : "\n     * Set the {@link LibraryProcessType} for this process.\n     *\n     * Since this function is called extremely early on in startup, locking is not required.\n     *\n     * @param type the process type.\n     ",
    "links" : [ "LibraryProcessType" ]
  }, {
    "name" : "public void setNativeLibraryPreloader(NativeLibraryPreloader loader)",
    "returnType" : "void",
    "comment" : "\n     * Set native library preloader. If set and the Chromium linker is not used, the\n     * {@link NativeLibraryPreloader#loadLibrary(String)} ()} will be invoked before calling\n     * System.loadLibrary().\n     *\n     * @param loader the NativeLibraryPreloader, it shall only be set once and before the\n     *               native library is loaded.\n     ",
    "links" : [ "org.chromium.base.library_loader.NativeLibraryPreloader#loadLibrary(String)" ]
  }, {
    "name" : "public void setLinkerImplementation(boolean useChromiumLinker)",
    "returnType" : "void",
    "comment" : "\n     * Sets the configuration for library loading.\n     *\n     * Must be called before loading the library. Since this function is called extremely early on\n     * in startup, locking is not required.\n     *\n     * @param useChromiumLinker Whether to use a chromium linker.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void logLinkerUsed()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean useChromiumLinker()",
    "returnType" : "boolean",
    "comment" : " browser process is not supported.",
    "links" : [ ]
  }, {
    "name" : "private Linker getLinker()",
    "returnType" : "Linker",
    "comment" : "\n     * Returns the singleton Linker instance.\n     *\n     * On N, O and P Monochrome is selected by Play Store. With Monochrome this code is not used,\n     * instead Chrome asks the WebView to provide the library (and the shared RELRO). If the WebView\n     * fails to provide the library, the system linker is used as a fallback.\n     *\n     * More: docs/android_native_libraries.md\n     *\n     * @return the Linker implementation instance.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isLoadedByZygote()",
    "returnType" : "boolean",
    "comment" : " Return if library is already loaded successfully by the zygote. ",
    "links" : [ ]
  }, {
    "name" : "public void ensureInitialized()",
    "returnType" : "void",
    "comment" : "\n     *  Blocks until the library is fully loaded and initialized. When this method is used (without\n     *  the {@link MultiProcessMediator}) the current process is treated as the Main process\n     *  (w.r.t. how it shares RELRO and reports metrics) unless it was initialized before.\n     ",
    "links" : [ "MultiProcessMediator" ]
  }, {
    "name" : "public void ensureMainDexInitialized()",
    "returnType" : "void",
    "comment" : "\n     * This method blocks until the native library is initialized, and the Main Dex is loaded\n     * (MainDex JNI is registered).\n     *\n     * You should use this if you would like to use isolated parts of the native library that don't\n     * depend on content initialization, and only use MainDex classes with JNI.\n     *\n     * However, you should be careful not to call this too early in startup on the UI thread, or you\n     * may significantly increase the time to first draw.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void preloadNow()",
    "returnType" : "void",
    "comment" : "\n     * Calls native library preloader (see {@link #setNativeLibraryPreloader}) with the app\n     * context. If there is no preloader set, this function does nothing.\n     * Preloader is called only once, so calling it explicitly via this method means\n     * that it won't be (implicitly) called during library loading.\n     ",
    "links" : [ "#setNativeLibraryPreloader" ]
  }, {
    "name" : "public void preloadNowOverridePackageName(String packageName)",
    "returnType" : "void",
    "comment" : " Similar to {@link #preloadNow}, but allows specifying app context to use. ",
    "links" : [ "#preloadNow" ]
  }, {
    "name" : "private void preloadAlreadyLocked(String packageName, boolean inZygote)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isLoaded()",
    "returnType" : "boolean",
    "comment" : "\n     * Checks whether the native library is fully loaded.\n     *\n     * @deprecated: please avoid using in new code:\n     * https://crsrc.org/c/base/android/jni_generator/README.md#testing-for-readiness-use-get\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean isMainDexLoaded()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isInitialized()",
    "returnType" : "boolean",
    "comment" : "\n     * Checks whether the native library is fully loaded and initialized.\n     *\n     * @deprecated: please avoid using in new code:\n     * https://chromium.googlesource.com/chromium/src/+/main/base/android/jni_generator/README.md#testing-for-readiness_use\n     ",
    "links" : [ ]
  }, {
    "name" : "public void loadNow()",
    "returnType" : "void",
    "comment" : "\n     * Loads the library and blocks until the load completes. The caller is responsible for\n     * subsequently calling ensureInitialized(). May be called on any thread, but should only be\n     * called once.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void resetForTesting()",
    "returnType" : "void",
    "comment" : " Causes LibraryLoader to pretend that native libraries have not yet been initialized. ",
    "links" : [ ]
  }, {
    "name" : "public void loadNowOverrideApplicationContext(Context appContext)",
    "returnType" : "void",
    "comment" : "\n     * Override kept for callers that need to load from a different app context. Do not use unless\n     * specifically required to load from another context that is not the current process's app\n     * context.\n     *\n     * @param appContext The overriding app context to be used to load libraries.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void loadNowInZygote(ApplicationInfo appInfo)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void initialize()",
    "returnType" : "void",
    "comment" : "\n     * Initializes the native library: must be called on the thread that the\n     * native will call its \"main\" thread. The library must have previously been\n     * loaded with one of the loadNow*() variants.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setReachedCodeProfilerEnabledOnNextRuns(boolean enabled, int samplingIntervalUs)",
    "returnType" : "void",
    "comment" : "\n     * Enables the reached code profiler. The value comes from \"ReachedCodeProfiler\"\n     * finch experiment, and is pushed on every run. I.e. the effect of the finch experiment\n     * lags by one run, which is the best we can do considering that the profiler has to be enabled\n     * before finch is initialized. Note that since LibraryLoader is in //base, it can't depend\n     * on ChromeFeatureList, and has to rely on external code pushing the value.\n     *\n     * @param enabled whether to enable the reached code profiler.\n     * @param samplingIntervalUs the sampling interval for reached code profiler.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getReachedCodeSamplingIntervalUs()",
    "returnType" : "int",
    "comment" : "\n     * @return sampling interval for reached code profiler, or 0 when the profiler is disabled. (see\n     *         setReachedCodeProfilerEnabledOnNextRuns()).\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setBackgroundThreadPoolEnabledOnNextRuns(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * Enables the background priority thread pool group. The value comes from the\n     * \"BackgroundThreadPool\" finch experiment, and is pushed on every run, to take effect on the\n     * subsequent run. I.e. the effect of the finch experiment lags by one run, which is the best we\n     * can do considering that the thread pool has to be configured before finch is initialized.\n     * Note that since LibraryLoader is in //base, it can't depend on ChromeFeatureList, and has to\n     * rely on external code pushing the value.\n     *\n     * @param enabled whether to enable the background priority thread pool group.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isBackgroundThreadPoolEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * @return whether the background priority thread pool group should be enabled. (see\n     *         setBackgroundThreadPoolEnabledOnNextRuns()).\n     ",
    "links" : [ ]
  }, {
    "name" : "private void loadWithChromiumLinker(ApplicationInfo appInfo, String library)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void loadWithSystemLinkerAlreadyLocked(ApplicationInfo appInfo, boolean inZygote)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void loadMainDexAlreadyLocked(ApplicationInfo appInfo, boolean inZygote)",
    "returnType" : "void",
    "comment" : " triggering JNI_OnLoad in native code.",
    "links" : [ ]
  }, {
    "name" : "protected void loadNonMainDex()",
    "returnType" : "void",
    "comment" : " robolectric tests using GURL. See https://crbug.com/1371542#c13.",
    "links" : [ ]
  }, {
    "name" : "public void switchCommandLineForWebView()",
    "returnType" : "void",
    "comment" : " JNI is already loaded by this point.",
    "links" : [ ]
  }, {
    "name" : "private void ensureCommandLineSwitchedAlreadyLocked()",
    "returnType" : "void",
    "comment" : " switch the Java CommandLine will delegate all calls the native CommandLine).",
    "links" : [ ]
  }, {
    "name" : "public void assertCompatibleProcessType(@LibraryProcessType int libraryProcessType)",
    "returnType" : "void",
    "comment" : "\n     * Assert that library process type in the LibraryLoader is compatible with provided type.\n     *\n     * @param libraryProcessType a library process type to assert.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void initializeAlreadyLocked()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void setLibraryLoaderForTesting(LibraryLoader loader)",
    "returnType" : "void",
    "comment" : "\n     * Overrides the library loader (normally with a mock) for testing.\n     *\n     * @deprecated: please avoid using in new code:\n     * https://chromium.googlesource.com/chromium/src/+/main/base/android/jni_generator/README.md#testing-for-readiness_use\n     *\n     * @param loader the mock library loader.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setEnvForNative()",
    "returnType" : "void",
    "comment" : "\n     * Configure ubsan using $UBSAN_OPTIONS. This function needs to be called before any native\n     * libraries are loaded because ubsan reads its configuration from $UBSAN_OPTIONS when the\n     * native library is loaded.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected static void setLibrariesLoadedForNativeTests()",
    "returnType" : "void",
    "comment" : "\n     * This sets the LibraryLoader internal state to its fully initialized state and should *only*\n     * be used by clients like NativeTests which manually load their native libraries without using\n     * the LibraryLoader.\n     *\n     * Don't use in new code. Tests that require this call should be migrated to\n     * NativeUnitTest.\n     * https://chromium.googlesource.com/chromium/src/+/main/base/android/jni_generator/README.md#testing-for-readiness_use\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setOverrideNativeLibraryCannotBeLoadedForTesting()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void setLoadFailedCallbackForTesting(Callback<UnsatisfiedLinkError> callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void setBrowserProcessStartupBlockedForTesting()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static boolean isBrowserProcessStartupBlockedForTesting()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static boolean mainProcessIntendsToProvideRelroFd()", "public final MultiProcessMediator getMediator()", "public static LibraryLoader getInstance()", "public void setLibraryProcessType(@LibraryProcessType int type)", "public void setNativeLibraryPreloader(NativeLibraryPreloader loader)", "public void setLinkerImplementation(boolean useChromiumLinker)", "private void logLinkerUsed()", "private boolean useChromiumLinker()", "private Linker getLinker()", "public boolean isLoadedByZygote()", "public void ensureInitialized()", "public void ensureMainDexInitialized()", "public void preloadNow()", "public void preloadNowOverridePackageName(String packageName)", "private void preloadAlreadyLocked(String packageName, boolean inZygote)", "public boolean isLoaded()", "private boolean isMainDexLoaded()", "public boolean isInitialized()", "public void loadNow()", "public void resetForTesting()", "public void loadNowOverrideApplicationContext(Context appContext)", "public void loadNowInZygote(ApplicationInfo appInfo)", "public void initialize()", "public static void setReachedCodeProfilerEnabledOnNextRuns(boolean enabled, int samplingIntervalUs)", "public static int getReachedCodeSamplingIntervalUs()", "public static void setBackgroundThreadPoolEnabledOnNextRuns(boolean enabled)", "public static boolean isBackgroundThreadPoolEnabled()", "private void loadWithChromiumLinker(ApplicationInfo appInfo, String library)", "private void loadWithSystemLinkerAlreadyLocked(ApplicationInfo appInfo, boolean inZygote)", "protected void loadMainDexAlreadyLocked(ApplicationInfo appInfo, boolean inZygote)", "protected void loadNonMainDex()", "public void switchCommandLineForWebView()", "private void ensureCommandLineSwitchedAlreadyLocked()", "public void assertCompatibleProcessType(@LibraryProcessType int libraryProcessType)", "private void initializeAlreadyLocked()", "public static void setLibraryLoaderForTesting(LibraryLoader loader)", "public static void setEnvForNative()", "protected static void setLibrariesLoadedForNativeTests()", "public static void setOverrideNativeLibraryCannotBeLoadedForTesting()", "public static void setLoadFailedCallbackForTesting(Callback<UnsatisfiedLinkError> callback)", "public static void setBrowserProcessStartupBlockedForTesting()", "public static boolean isBrowserProcessStartupBlockedForTesting()" ],
  "variableNames" : [ "TAG", "DEBUG", "DEPRECATED_REACHED_CODE_PROFILER_KEY", "REACHED_CODE_SAMPLING_INTERVAL_KEY", "ALLOW_CHROMIUM_LINKER_IN_ZYGOTE", "DEFAULT_REACHED_CODE_SAMPLING_INTERVAL_US", "BACKGROUND_THREAD_POOL_KEY", "sInstance", "sBrowserStartupBlockedForTesting", "sEnableStateForTesting", "mInitialized", "mFallbackToSystemLinker", "mLoadState", "mLoadStateForTesting", "mInitializedForTesting", "mUseChromiumLinker", "mLibraryProcessType", "mMediator", "mLock", "mLinker", "mLibraryPreloader", "mLibraryPreloaderCalled", "mLoadedByZygote", "mCommandLineSwitched", "sOverrideNativeLibraryCannotBeLoadedForTesting", "sLoadFailedCallback" ]
}