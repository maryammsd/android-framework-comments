{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/io/StringReader.java",
  "packageName" : "java.io",
  "className" : "StringReader",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "str",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "length",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "next",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mark",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void ensureOpen() throws IOException",
    "returnType" : "void",
    "comment" : " Check to make sure that the stream has not been closed ",
    "links" : [ ]
  }, {
    "name" : "public int read() throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Reads a single character.\n     *\n     * @return     The character read, or -1 if the end of the stream has been\n     *             reached\n     *\n     * @exception  IOException  If an I/O error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "public int read(char[] cbuf, int off, int len) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Reads characters into a portion of an array.\n     *\n     * @param      cbuf  Destination buffer\n     * @param      off   Offset at which to start writing characters\n     * @param      len   Maximum number of characters to read\n     *\n     * @return     The number of characters read, or -1 if the end of the\n     *             stream has been reached\n     *\n     * @exception  IOException  If an I/O error occurs\n     * @exception  IndexOutOfBoundsException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public long skip(long ns) throws IOException",
    "returnType" : "long",
    "comment" : "\n     * Skips the specified number of characters in the stream. Returns\n     * the number of characters that were skipped.\n     *\n     * <p>The <code>ns</code> parameter may be negative, even though the\n     * <code>skip</code> method of the {@link Reader} superclass throws\n     * an exception in this case. Negative values of <code>ns</code> cause the\n     * stream to skip backwards. Negative return values indicate a skip\n     * backwards. It is not possible to skip backwards past the beginning of\n     * the string.\n     *\n     * <p>If the entire string has been read or skipped, then this method has\n     * no effect and always returns 0.\n     *\n     * @exception  IOException  If an I/O error occurs\n     ",
    "links" : [ "java.io.Reader" ]
  }, {
    "name" : "public boolean ready() throws IOException",
    "returnType" : "boolean",
    "comment" : "\n     * Tells whether this stream is ready to be read.\n     *\n     * @return True if the next read() is guaranteed not to block for input\n     *\n     * @exception  IOException  If the stream is closed\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean markSupported()",
    "returnType" : "boolean",
    "comment" : "\n     * Tells whether this stream supports the mark() operation, which it does.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void mark(int readAheadLimit) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Marks the present position in the stream.  Subsequent calls to reset()\n     * will reposition the stream to this point.\n     *\n     * @param  readAheadLimit  Limit on the number of characters that may be\n     *                         read while still preserving the mark.  Because\n     *                         the stream's input comes from a string, there\n     *                         is no actual limit, so this argument must not\n     *                         be negative, but is otherwise ignored.\n     *\n     * @exception  IllegalArgumentException  If {@code readAheadLimit < 0}\n     * @exception  IOException  If an I/O error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "public void reset() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Resets the stream to the most recent mark, or to the beginning of the\n     * string if it has never been marked.\n     *\n     * @exception  IOException  If an I/O error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "\n     * Closes the stream and releases any system resources associated with\n     * it. Once the stream has been closed, further read(),\n     * ready(), mark(), or reset() invocations will throw an IOException.\n     * Closing a previously closed stream has no effect. This method will block\n     * while there is another thread blocking on the reader.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void ensureOpen() throws IOException", "public int read() throws IOException", "public int read(char[] cbuf, int off, int len) throws IOException", "public long skip(long ns) throws IOException", "public boolean ready() throws IOException", "public boolean markSupported()", "public void mark(int readAheadLimit) throws IOException", "public void reset() throws IOException", "public void close()" ],
  "variableNames" : [ "str", "length", "next", "mark" ]
}