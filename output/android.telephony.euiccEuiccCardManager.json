{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/telephony/euicc/EuiccCardManager.java",
  "packageName" : "android.telephony.euicc",
  "className" : "EuiccCardManager",
  "comment" : "\n * EuiccCardManager is the application interface to an eSIM card.\n * @hide\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CANCEL_REASON_END_USER_REJECTED",
    "type" : "int",
    "comment" : "\n     * The end user has rejected the download. The profile will be put into the error state and\n     * cannot be downloaded again without the operator's change.\n     ",
    "links" : [ ]
  }, {
    "name" : "CANCEL_REASON_POSTPONED",
    "type" : "int",
    "comment" : " The download has been postponed and can be restarted later. ",
    "links" : [ ]
  }, {
    "name" : "CANCEL_REASON_TIMEOUT",
    "type" : "int",
    "comment" : " The download has been timed out and can be restarted later. ",
    "links" : [ ]
  }, {
    "name" : "CANCEL_REASON_PPR_NOT_ALLOWED",
    "type" : "int",
    "comment" : "\n     * The profile to be downloaded cannot be installed due to its policy rule is not allowed by\n     * the RAT (Rules Authorisation Table) on the eUICC or by other installed profiles. The\n     * download can be restarted later.\n     ",
    "links" : [ ]
  }, {
    "name" : "RESET_OPTION_DELETE_OPERATIONAL_PROFILES",
    "type" : "int",
    "comment" : " Deletes all operational profiles. ",
    "links" : [ ]
  }, {
    "name" : "RESET_OPTION_DELETE_FIELD_LOADED_TEST_PROFILES",
    "type" : "int",
    "comment" : " Deletes all field-loaded testing profiles. ",
    "links" : [ ]
  }, {
    "name" : "RESET_OPTION_RESET_DEFAULT_SMDP_ADDRESS",
    "type" : "int",
    "comment" : " Resets the default SM-DP+ address. ",
    "links" : [ ]
  }, {
    "name" : "RESULT_OK",
    "type" : "int",
    "comment" : " Result code of execution with no error. ",
    "links" : [ ]
  }, {
    "name" : "RESULT_UNKNOWN_ERROR",
    "type" : "int",
    "comment" : " Result code of an unknown error. ",
    "links" : [ ]
  }, {
    "name" : "RESULT_EUICC_NOT_FOUND",
    "type" : "int",
    "comment" : " Result code when the eUICC card with the given card Id is not found. ",
    "links" : [ ]
  }, {
    "name" : "RESULT_CALLER_NOT_ALLOWED",
    "type" : "int",
    "comment" : " Result code indicating the caller is not the active LPA. ",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private IEuiccCardController getIEuiccCardController()",
    "returnType" : "IEuiccCardController",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void requestAllProfiles(String cardId, @CallbackExecutor Executor executor, ResultCallback<EuiccProfileInfo[]> callback)",
    "returnType" : "void",
    "comment" : "\n     * Requests all the profiles on eUicc.\n     *\n     * @param cardId The Id of the eUICC.\n     * @param executor The executor through which the callback should be invoked.\n     * @param callback The callback to get the result code and all the profiles.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void requestProfile(String cardId, String iccid, @CallbackExecutor Executor executor, ResultCallback<EuiccProfileInfo> callback)",
    "returnType" : "void",
    "comment" : "\n     * Requests the profile of the given iccid.\n     *\n     * @param cardId The Id of the eUICC.\n     * @param iccid The iccid of the profile.\n     * @param executor The executor through which the callback should be invoked.\n     * @param callback The callback to get the result code and profile.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void disableProfile(String cardId, String iccid, boolean refresh, @CallbackExecutor Executor executor, ResultCallback<Void> callback)",
    "returnType" : "void",
    "comment" : "\n     * Disables the profile of the given iccid.\n     *\n     * @param cardId The Id of the eUICC.\n     * @param iccid The iccid of the profile.\n     * @param refresh Whether sending the REFRESH command to modem.\n     * @param executor The executor through which the callback should be invoked.\n     * @param callback The callback to get the result code.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void switchToProfile(String cardId, String iccid, boolean refresh, @CallbackExecutor Executor executor, ResultCallback<EuiccProfileInfo> callback)",
    "returnType" : "void",
    "comment" : "\n     * Switches from the current profile to another profile. The current profile will be disabled\n     * and the specified profile will be enabled.\n     *\n     * @param cardId The Id of the eUICC.\n     * @param iccid The iccid of the profile to switch to.\n     * @param refresh Whether sending the REFRESH command to modem.\n     * @param executor The executor through which the callback should be invoked.\n     * @param callback The callback to get the result code and the EuiccProfileInfo enabled.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setNickname(String cardId, String iccid, String nickname, @CallbackExecutor Executor executor, ResultCallback<Void> callback)",
    "returnType" : "void",
    "comment" : "\n     * Sets the nickname of the profile of the given iccid.\n     *\n     * @param cardId The Id of the eUICC.\n     * @param iccid The iccid of the profile.\n     * @param nickname The nickname of the profile.\n     * @param executor The executor through which the callback should be invoked.\n     * @param callback The callback to get the result code.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void deleteProfile(String cardId, String iccid, @CallbackExecutor Executor executor, ResultCallback<Void> callback)",
    "returnType" : "void",
    "comment" : "\n     * Deletes the profile of the given iccid from eUICC.\n     *\n     * @param cardId The Id of the eUICC.\n     * @param iccid The iccid of the profile.\n     * @param executor The executor through which the callback should be invoked.\n     * @param callback The callback to get the result code.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void resetMemory(String cardId, @ResetOption int options, @CallbackExecutor Executor executor, ResultCallback<Void> callback)",
    "returnType" : "void",
    "comment" : "\n     * Resets the eUICC memory.\n     *\n     * @param cardId The Id of the eUICC.\n     * @param options Bits of the options of resetting which parts of the eUICC memory. See\n     *     EuiccCard for details.\n     * @param executor The executor through which the callback should be invoked.\n     * @param callback The callback to get the result code.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void requestDefaultSmdpAddress(String cardId, @CallbackExecutor Executor executor, ResultCallback<String> callback)",
    "returnType" : "void",
    "comment" : "\n     * Requests the default SM-DP+ address from eUICC.\n     *\n     * @param cardId The Id of the eUICC.\n     * @param executor The executor through which the callback should be invoked.\n     * @param callback The callback to get the result code and the default SM-DP+ address.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void requestSmdsAddress(String cardId, @CallbackExecutor Executor executor, ResultCallback<String> callback)",
    "returnType" : "void",
    "comment" : "\n     * Requests the SM-DS address from eUICC.\n     *\n     * @param cardId The Id of the eUICC.\n     * @param executor The executor through which the callback should be invoked.\n     * @param callback The callback to get the result code and the SM-DS address.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDefaultSmdpAddress(String cardId, String defaultSmdpAddress, @CallbackExecutor Executor executor, ResultCallback<Void> callback)",
    "returnType" : "void",
    "comment" : "\n     * Sets the default SM-DP+ address of eUICC.\n     *\n     * @param cardId The Id of the eUICC.\n     * @param defaultSmdpAddress The default SM-DP+ address to set.\n     * @param executor The executor through which the callback should be invoked.\n     * @param callback The callback to get the result code.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void requestRulesAuthTable(String cardId, @CallbackExecutor Executor executor, ResultCallback<EuiccRulesAuthTable> callback)",
    "returnType" : "void",
    "comment" : "\n     * Requests Rules Authorisation Table.\n     *\n     * @param cardId The Id of the eUICC.\n     * @param executor The executor through which the callback should be invoked.\n     * @param callback the callback to get the result code and the rule authorisation table.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void requestEuiccChallenge(String cardId, @CallbackExecutor Executor executor, ResultCallback<byte[]> callback)",
    "returnType" : "void",
    "comment" : "\n     * Requests the eUICC challenge for new profile downloading.\n     *\n     * @param cardId The Id of the eUICC.\n     * @param executor The executor through which the callback should be invoked.\n     * @param callback the callback to get the result code and the challenge.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void requestEuiccInfo1(String cardId, @CallbackExecutor Executor executor, ResultCallback<byte[]> callback)",
    "returnType" : "void",
    "comment" : "\n     * Requests the eUICC info1 defined in GSMA RSP v2.0+ for new profile downloading.\n     *\n     * @param cardId The Id of the eUICC.\n     * @param executor The executor through which the callback should be invoked.\n     * @param callback the callback to get the result code and the info1.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void requestEuiccInfo2(String cardId, @CallbackExecutor Executor executor, ResultCallback<byte[]> callback)",
    "returnType" : "void",
    "comment" : "\n     * Gets the eUICC info2 defined in GSMA RSP v2.0+ for new profile downloading.\n     *\n     * @param cardId The Id of the eUICC.\n     * @param executor The executor through which the callback should be invoked.\n     * @param callback the callback to get the result code and the info2.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void authenticateServer(String cardId, String matchingId, byte[] serverSigned1, byte[] serverSignature1, byte[] euiccCiPkIdToBeUsed, byte[] serverCertificate, @CallbackExecutor Executor executor, ResultCallback<byte[]> callback)",
    "returnType" : "void",
    "comment" : "\n     * Authenticates the SM-DP+ server by the eUICC.\n     *\n     * @param cardId The Id of the eUICC.\n     * @param matchingId the activation code token defined in GSMA RSP v2.0+ or empty when it is not\n     *     required.\n     * @param serverSigned1 ASN.1 data in byte array signed and returned by the SM-DP+ server.\n     * @param serverSignature1 ASN.1 data in byte array indicating a SM-DP+ signature which is\n     *     returned by SM-DP+ server.\n     * @param euiccCiPkIdToBeUsed ASN.1 data in byte array indicating CI Public Key Identifier to be\n     *     used by the eUICC for signature which is returned by SM-DP+ server. This is defined in\n     *     GSMA RSP v2.0+.\n     * @param serverCertificate ASN.1 data in byte array indicating SM-DP+ Certificate returned by\n     *     SM-DP+ server.\n     * @param executor The executor through which the callback should be invoked.\n     * @param callback the callback to get the result code and a byte array which represents a\n     *     {@code AuthenticateServerResponse} defined in GSMA RSP v2.0+.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void prepareDownload(String cardId, @Nullable byte[] hashCc, byte[] smdpSigned2, byte[] smdpSignature2, byte[] smdpCertificate, @CallbackExecutor Executor executor, ResultCallback<byte[]> callback)",
    "returnType" : "void",
    "comment" : "\n     * Prepares the profile download request sent to SM-DP+.\n     *\n     * @param cardId The Id of the eUICC.\n     * @param hashCc the hash of confirmation code. It can be null if there is no confirmation code\n     *     required.\n     * @param smdpSigned2 ASN.1 data in byte array indicating the data to be signed by the SM-DP+\n     *     returned by SM-DP+ server.\n     * @param smdpSignature2 ASN.1 data in byte array indicating the SM-DP+ signature returned by\n     *     SM-DP+ server.\n     * @param smdpCertificate ASN.1 data in byte array indicating the SM-DP+ Certificate returned\n     *     by SM-DP+ server.\n     * @param executor The executor through which the callback should be invoked.\n     * @param callback the callback to get the result code and a byte array which represents a\n     *     {@code PrepareDownloadResponse} defined in GSMA RSP v2.0+\n     ",
    "links" : [ ]
  }, {
    "name" : "public void loadBoundProfilePackage(String cardId, byte[] boundProfilePackage, @CallbackExecutor Executor executor, ResultCallback<byte[]> callback)",
    "returnType" : "void",
    "comment" : "\n     * Loads a downloaded bound profile package onto the eUICC.\n     *\n     * @param cardId The Id of the eUICC.\n     * @param boundProfilePackage the Bound Profile Package data returned by SM-DP+ server.\n     * @param executor The executor through which the callback should be invoked.\n     * @param callback the callback to get the result code and a byte array which represents a\n     *     {@code LoadBoundProfilePackageResponse} defined in GSMA RSP v2.0+.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void cancelSession(String cardId, byte[] transactionId, @CancelReason int reason, @CallbackExecutor Executor executor, ResultCallback<byte[]> callback)",
    "returnType" : "void",
    "comment" : "\n     * Cancels the current profile download session.\n     *\n     * @param cardId The Id of the eUICC.\n     * @param transactionId the transaction ID returned by SM-DP+ server.\n     * @param reason the cancel reason.\n     * @param executor The executor through which the callback should be invoked.\n     * @param callback the callback to get the result code and an byte[] which represents a\n     *     {@code CancelSessionResponse} defined in GSMA RSP v2.0+.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void listNotifications(String cardId, @EuiccNotification.Event int events, @CallbackExecutor Executor executor, ResultCallback<EuiccNotification[]> callback)",
    "returnType" : "void",
    "comment" : "\n     * Lists all notifications of the given {@code events}.\n     *\n     * @param cardId The Id of the eUICC.\n     * @param events bits of the event types ({@link EuiccNotification.Event}) to list.\n     * @param executor The executor through which the callback should be invoked.\n     * @param callback the callback to get the result code and the list of notifications.\n     ",
    "links" : [ "EuiccNotification.Event" ]
  }, {
    "name" : "public void retrieveNotificationList(String cardId, @EuiccNotification.Event int events, @CallbackExecutor Executor executor, ResultCallback<EuiccNotification[]> callback)",
    "returnType" : "void",
    "comment" : "\n     * Retrieves contents of all notification of the given {@code events}.\n     *\n     * @param cardId The Id of the eUICC.\n     * @param events bits of the event types ({@link EuiccNotification.Event}) to list.\n     * @param executor The executor through which the callback should be invoked.\n     * @param callback the callback to get the result code and the list of notifications.\n     ",
    "links" : [ "EuiccNotification.Event" ]
  }, {
    "name" : "public void retrieveNotification(String cardId, int seqNumber, @CallbackExecutor Executor executor, ResultCallback<EuiccNotification> callback)",
    "returnType" : "void",
    "comment" : "\n     * Retrieves the content of a notification of the given {@code seqNumber}.\n     *\n     * @param cardId The Id of the eUICC.\n     * @param seqNumber the sequence number of the notification.\n     * @param executor The executor through which the callback should be invoked.\n     * @param callback the callback to get the result code and the notification.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removeNotificationFromList(String cardId, int seqNumber, @CallbackExecutor Executor executor, ResultCallback<Void> callback)",
    "returnType" : "void",
    "comment" : "\n     * Removes a notification from eUICC.\n     *\n     * @param cardId The Id of the eUICC.\n     * @param seqNumber the sequence number of the notification.\n     * @param executor The executor through which the callback should be invoked.\n     * @param callback the callback to get the result code.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "CANCEL_REASON_END_USER_REJECTED", "CANCEL_REASON_POSTPONED", "CANCEL_REASON_TIMEOUT", "CANCEL_REASON_PPR_NOT_ALLOWED", "RESET_OPTION_DELETE_OPERATIONAL_PROFILES", "RESET_OPTION_DELETE_FIELD_LOADED_TEST_PROFILES", "RESET_OPTION_RESET_DEFAULT_SMDP_ADDRESS", "RESULT_OK", "RESULT_UNKNOWN_ERROR", "RESULT_EUICC_NOT_FOUND", "RESULT_CALLER_NOT_ALLOWED", "mContext" ],
  "methodNames" : [ "private IEuiccCardController getIEuiccCardController()", "public void requestAllProfiles(String cardId, @CallbackExecutor Executor executor, ResultCallback<EuiccProfileInfo[]> callback)", "public void requestProfile(String cardId, String iccid, @CallbackExecutor Executor executor, ResultCallback<EuiccProfileInfo> callback)", "public void disableProfile(String cardId, String iccid, boolean refresh, @CallbackExecutor Executor executor, ResultCallback<Void> callback)", "public void switchToProfile(String cardId, String iccid, boolean refresh, @CallbackExecutor Executor executor, ResultCallback<EuiccProfileInfo> callback)", "public void setNickname(String cardId, String iccid, String nickname, @CallbackExecutor Executor executor, ResultCallback<Void> callback)", "public void deleteProfile(String cardId, String iccid, @CallbackExecutor Executor executor, ResultCallback<Void> callback)", "public void resetMemory(String cardId, @ResetOption int options, @CallbackExecutor Executor executor, ResultCallback<Void> callback)", "public void requestDefaultSmdpAddress(String cardId, @CallbackExecutor Executor executor, ResultCallback<String> callback)", "public void requestSmdsAddress(String cardId, @CallbackExecutor Executor executor, ResultCallback<String> callback)", "public void setDefaultSmdpAddress(String cardId, String defaultSmdpAddress, @CallbackExecutor Executor executor, ResultCallback<Void> callback)", "public void requestRulesAuthTable(String cardId, @CallbackExecutor Executor executor, ResultCallback<EuiccRulesAuthTable> callback)", "public void requestEuiccChallenge(String cardId, @CallbackExecutor Executor executor, ResultCallback<byte[]> callback)", "public void requestEuiccInfo1(String cardId, @CallbackExecutor Executor executor, ResultCallback<byte[]> callback)", "public void requestEuiccInfo2(String cardId, @CallbackExecutor Executor executor, ResultCallback<byte[]> callback)", "public void authenticateServer(String cardId, String matchingId, byte[] serverSigned1, byte[] serverSignature1, byte[] euiccCiPkIdToBeUsed, byte[] serverCertificate, @CallbackExecutor Executor executor, ResultCallback<byte[]> callback)", "public void prepareDownload(String cardId, @Nullable byte[] hashCc, byte[] smdpSigned2, byte[] smdpSignature2, byte[] smdpCertificate, @CallbackExecutor Executor executor, ResultCallback<byte[]> callback)", "public void loadBoundProfilePackage(String cardId, byte[] boundProfilePackage, @CallbackExecutor Executor executor, ResultCallback<byte[]> callback)", "public void cancelSession(String cardId, byte[] transactionId, @CancelReason int reason, @CallbackExecutor Executor executor, ResultCallback<byte[]> callback)", "public void listNotifications(String cardId, @EuiccNotification.Event int events, @CallbackExecutor Executor executor, ResultCallback<EuiccNotification[]> callback)", "public void retrieveNotificationList(String cardId, @EuiccNotification.Event int events, @CallbackExecutor Executor executor, ResultCallback<EuiccNotification[]> callback)", "public void retrieveNotification(String cardId, int seqNumber, @CallbackExecutor Executor executor, ResultCallback<EuiccNotification> callback)", "public void removeNotificationFromList(String cardId, int seqNumber, @CallbackExecutor Executor executor, ResultCallback<Void> callback)" ]
}