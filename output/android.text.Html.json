{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/text/Html.java",
  "packageName" : "android.text",
  "className" : "Html",
  "comment" : "\n * This class processes HTML strings into displayable styled text.\n * Not all HTML tags are supported.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TO_HTML_PARAGRAPH_LINES_CONSECUTIVE",
    "type" : "int",
    "comment" : "\n     * Option for {@link #toHtml(Spanned, int)}: Wrap consecutive lines of text delimited by '\\n'\n     * inside &lt;p&gt; elements. {@link BulletSpan}s are ignored.\n     ",
    "links" : [ "#toHtml(Spanned", "android.text.style.BulletSpan" ]
  }, {
    "name" : "TO_HTML_PARAGRAPH_LINES_INDIVIDUAL",
    "type" : "int",
    "comment" : "\n     * Option for {@link #toHtml(Spanned, int)}: Wrap each line of text delimited by '\\n' inside a\n     * &lt;p&gt; or a &lt;li&gt; element. This allows {@link ParagraphStyle}s attached to be\n     * encoded as CSS styles within the corresponding &lt;p&gt; or &lt;li&gt; element.\n     ",
    "links" : [ "#toHtml(Spanned", "android.text.style.ParagraphStyle" ]
  }, {
    "name" : "FROM_HTML_SEPARATOR_LINE_BREAK_PARAGRAPH",
    "type" : "int",
    "comment" : "\n     * Flag indicating that texts inside &lt;p&gt; elements will be separated from other texts with\n     * one newline character by default.\n     ",
    "links" : [ ]
  }, {
    "name" : "FROM_HTML_SEPARATOR_LINE_BREAK_HEADING",
    "type" : "int",
    "comment" : "\n     * Flag indicating that texts inside &lt;h1&gt;~&lt;h6&gt; elements will be separated from\n     * other texts with one newline character by default.\n     ",
    "links" : [ ]
  }, {
    "name" : "FROM_HTML_SEPARATOR_LINE_BREAK_LIST_ITEM",
    "type" : "int",
    "comment" : "\n     * Flag indicating that texts inside &lt;li&gt; elements will be separated from other texts\n     * with one newline character by default.\n     ",
    "links" : [ ]
  }, {
    "name" : "FROM_HTML_SEPARATOR_LINE_BREAK_LIST",
    "type" : "int",
    "comment" : "\n     * Flag indicating that texts inside &lt;ul&gt; elements will be separated from other texts\n     * with one newline character by default.\n     ",
    "links" : [ ]
  }, {
    "name" : "FROM_HTML_SEPARATOR_LINE_BREAK_DIV",
    "type" : "int",
    "comment" : "\n     * Flag indicating that texts inside &lt;div&gt; elements will be separated from other texts\n     * with one newline character by default.\n     ",
    "links" : [ ]
  }, {
    "name" : "FROM_HTML_SEPARATOR_LINE_BREAK_BLOCKQUOTE",
    "type" : "int",
    "comment" : "\n     * Flag indicating that texts inside &lt;blockquote&gt; elements will be separated from other\n     * texts with one newline character by default.\n     ",
    "links" : [ ]
  }, {
    "name" : "FROM_HTML_OPTION_USE_CSS_COLORS",
    "type" : "int",
    "comment" : "\n     * Flag indicating that CSS color values should be used instead of those defined in\n     * {@link Color}.\n     ",
    "links" : [ "android.graphics.Color" ]
  }, {
    "name" : "FROM_HTML_MODE_LEGACY",
    "type" : "int",
    "comment" : "\n     * Flags for {@link #fromHtml(String, int, ImageGetter, TagHandler)}: Separate block-level\n     * elements with blank lines (two newline characters) in between. This is the legacy behavior\n     * prior to N.\n     ",
    "links" : [ "#fromHtml(String" ]
  }, {
    "name" : "FROM_HTML_MODE_COMPACT",
    "type" : "int",
    "comment" : "\n     * Flags for {@link #fromHtml(String, int, ImageGetter, TagHandler)}: Separate block-level\n     * elements with line breaks (single newline character) in between. This inverts the\n     * {@link Spanned} to HTML string conversion done with the option\n     * {@link #TO_HTML_PARAGRAPH_LINES_INDIVIDUAL}.\n     ",
    "links" : [ "#fromHtml(String", "android.text.Spanned", "#TO_HTML_PARAGRAPH_LINES_INDIVIDUAL" ]
  }, {
    "name" : "TO_HTML_PARAGRAPH_FLAG",
    "type" : "int",
    "comment" : "\n     * The bit which indicates if lines delimited by '\\n' will be grouped into &lt;p&gt; elements.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static Spanned fromHtml(String source)",
    "returnType" : "Spanned",
    "comment" : "\n     * Returns displayable styled text from the provided HTML string with the legacy flags\n     * {@link #FROM_HTML_MODE_LEGACY}.\n     *\n     * @deprecated use {@link #fromHtml(String, int)} instead.\n     ",
    "links" : [ "#fromHtml(String", "#FROM_HTML_MODE_LEGACY" ]
  }, {
    "name" : "public static Spanned fromHtml(String source, int flags)",
    "returnType" : "Spanned",
    "comment" : "\n     * Returns displayable styled text from the provided HTML string. Any &lt;img&gt; tags in the\n     * HTML will display as a generic replacement image which your program can then go through and\n     * replace with real images.\n     *\n     * <p>This uses TagSoup to handle real HTML, including all of the brokenness found in the wild.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Spanned fromHtml(String source, ImageGetter imageGetter, TagHandler tagHandler)",
    "returnType" : "Spanned",
    "comment" : "\n     * Returns displayable styled text from the provided HTML string with the legacy flags\n     * {@link #FROM_HTML_MODE_LEGACY}.\n     *\n     * @deprecated use {@link #fromHtml(String, int, ImageGetter, TagHandler)} instead.\n     ",
    "links" : [ "#fromHtml(String", "#FROM_HTML_MODE_LEGACY" ]
  }, {
    "name" : "public static Spanned fromHtml(String source, int flags, ImageGetter imageGetter, TagHandler tagHandler)",
    "returnType" : "Spanned",
    "comment" : "\n     * Returns displayable styled text from the provided HTML string. Any &lt;img&gt; tags in the\n     * HTML will use the specified ImageGetter to request a representation of the image (use null\n     * if you don't want this) and the specified TagHandler to handle unknown tags (specify null if\n     * you don't want this).\n     *\n     * <p>This uses TagSoup to handle real HTML, including all of the brokenness found in the wild.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String toHtml(Spanned text)",
    "returnType" : "String",
    "comment" : "\n     * @deprecated use {@link #toHtml(Spanned, int)} instead.\n     ",
    "links" : [ "#toHtml(Spanned" ]
  }, {
    "name" : "public static String toHtml(Spanned text, int option)",
    "returnType" : "String",
    "comment" : "\n     * Returns an HTML representation of the provided Spanned text. A best effort is\n     * made to add HTML tags corresponding to spans. Also note that HTML metacharacters\n     * (such as \"&lt;\" and \"&amp;\") within the input text are escaped.\n     *\n     * @param text input text to convert\n     * @param option one of {@link #TO_HTML_PARAGRAPH_LINES_CONSECUTIVE} or\n     *     {@link #TO_HTML_PARAGRAPH_LINES_INDIVIDUAL}\n     * @return string containing input converted to HTML\n     ",
    "links" : [ "#TO_HTML_PARAGRAPH_LINES_CONSECUTIVE", "#TO_HTML_PARAGRAPH_LINES_INDIVIDUAL" ]
  }, {
    "name" : "public static String escapeHtml(CharSequence text)",
    "returnType" : "String",
    "comment" : "\n     * Returns an HTML escaped representation of the given plain text.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void withinHtml(StringBuilder out, Spanned text, int option)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void encodeTextAlignmentByDiv(StringBuilder out, Spanned text, int option)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void withinDiv(StringBuilder out, Spanned text, int start, int end, int option)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String getTextDirection(Spanned text, int start, int end)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String getTextStyles(Spanned text, int start, int end, boolean forceNoVerticalMargin, boolean includeTextAlign)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void withinBlockquote(StringBuilder out, Spanned text, int start, int end, int option)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void withinBlockquoteIndividual(StringBuilder out, Spanned text, int start, int end)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void withinBlockquoteConsecutive(StringBuilder out, Spanned text, int start, int end)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void withinParagraph(StringBuilder out, Spanned text, int start, int end)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void withinStyle(StringBuilder out, CharSequence text, int start, int end)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static Spanned fromHtml(String source)", "public static Spanned fromHtml(String source, int flags)", "public static Spanned fromHtml(String source, ImageGetter imageGetter, TagHandler tagHandler)", "public static Spanned fromHtml(String source, int flags, ImageGetter imageGetter, TagHandler tagHandler)", "public static String toHtml(Spanned text)", "public static String toHtml(Spanned text, int option)", "public static String escapeHtml(CharSequence text)", "private static void withinHtml(StringBuilder out, Spanned text, int option)", "private static void encodeTextAlignmentByDiv(StringBuilder out, Spanned text, int option)", "private static void withinDiv(StringBuilder out, Spanned text, int start, int end, int option)", "private static String getTextDirection(Spanned text, int start, int end)", "private static String getTextStyles(Spanned text, int start, int end, boolean forceNoVerticalMargin, boolean includeTextAlign)", "private static void withinBlockquote(StringBuilder out, Spanned text, int start, int end, int option)", "private static void withinBlockquoteIndividual(StringBuilder out, Spanned text, int start, int end)", "private static void withinBlockquoteConsecutive(StringBuilder out, Spanned text, int start, int end)", "private static void withinParagraph(StringBuilder out, Spanned text, int start, int end)", "private static void withinStyle(StringBuilder out, CharSequence text, int start, int end)" ],
  "variableNames" : [ "TO_HTML_PARAGRAPH_LINES_CONSECUTIVE", "TO_HTML_PARAGRAPH_LINES_INDIVIDUAL", "FROM_HTML_SEPARATOR_LINE_BREAK_PARAGRAPH", "FROM_HTML_SEPARATOR_LINE_BREAK_HEADING", "FROM_HTML_SEPARATOR_LINE_BREAK_LIST_ITEM", "FROM_HTML_SEPARATOR_LINE_BREAK_LIST", "FROM_HTML_SEPARATOR_LINE_BREAK_DIV", "FROM_HTML_SEPARATOR_LINE_BREAK_BLOCKQUOTE", "FROM_HTML_OPTION_USE_CSS_COLORS", "FROM_HTML_MODE_LEGACY", "FROM_HTML_MODE_COMPACT", "TO_HTML_PARAGRAPH_FLAG" ]
}