{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/telephony/ims/stub/DelegateConnectionStateCallback.java",
  "packageName" : "android.telephony.ims.stub",
  "className" : "DelegateConnectionStateCallback",
  "comment" : "\n * The callback associated with a {@link SipDelegateConnection} that manages the state of the\n * SipDelegateConnection.\n * <p>\n * After {@link SipDelegateManager#createSipDelegate} is used to request a new\n * {@link SipDelegateConnection} be created, {@link #onCreated} will be called with the\n * {@link SipDelegateConnection} instance that must be used to communicate with the remote\n * {@link SipDelegate}.\n * <p>\n * After, {@link #onFeatureTagStatusChanged} will always be called at least once with the current\n * status of the feature tags that have been requested. The application may receive multiple\n * {@link #onFeatureTagStatusChanged} callbacks over the lifetime of the associated\n * {@link SipDelegateConnection}, which will signal changes to how SIP messages associated with\n * those feature tags will be handled.\n * <p>\n * In order to start sending SIP messages, the SIP configuration parameters will need to be\n * received, so the messaging application should make no assumptions about these parameters and wait\n * until {@link #onConfigurationChanged(SipDelegateConfiguration)} has been called. This is\n * guaranteed to happen after the first {@link #onFeatureTagStatusChanged} if there is at least one\n * feature tag that has been successfully associated with the {@link SipDelegateConnection}. If all\n * feature tags were denied, no IMS configuration will be sent.\n * <p>\n * The {@link SipDelegateConnection} will stay associated with this RCS application until either the\n * RCS application calls {@link SipDelegateManager#destroySipDelegate} or telephony destroys the\n * {@link SipDelegateConnection}. In both cases, {@link #onDestroyed(int)}  will be called.\n * Telephony destroying the {@link SipDelegateConnection} instance is rare and will only happen in\n * rare cases, such as if telephony itself or IMS service dies unexpectedly. See\n * {@link SipDelegateManager.SipDelegateDestroyReason} reasons for more information on all of the\n * cases that will trigger the {@link SipDelegateConnection} to be destroyed.\n *\n * @hide\n ",
  "links" : [ "android.telephony.ims.SipDelegateManager#destroySipDelegate", "SipDelegateManager.SipDelegateDestroyReason", "android.telephony.ims.stub.SipDelegate", "android.telephony.ims.SipDelegateConnection", "#onCreated", "#onConfigurationChanged(SipDelegateConfiguration)", "#onFeatureTagStatusChanged", "#onDestroyed(int)", "android.telephony.ims.SipDelegateManager#createSipDelegate" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " void onCreated(@NonNull SipDelegateConnection c)",
    "returnType" : "void",
    "comment" : "\n     * A {@link SipDelegateConnection} has been successfully created for the\n     * {@link DelegateRequest} used when calling {@link SipDelegateManager#createSipDelegate}.\n     ",
    "links" : [ "android.telephony.ims.DelegateRequest", "android.telephony.ims.SipDelegateConnection", "android.telephony.ims.SipDelegateManager#createSipDelegate" ]
  }, {
    "name" : " void onFeatureTagStatusChanged(@NonNull DelegateRegistrationState registrationState, @NonNull Set<FeatureTagState> deniedFeatureTags)",
    "returnType" : "void",
    "comment" : "\n     * The status of the RCS feature tags that were requested as part of the initial\n     * {@link DelegateRequest}.\n     * <p>\n     * There are four states that each RCS feature tag can be in: registered, deregistering,\n     * deregistered, and denied.\n     * <p>\n     * When a feature tag is considered registered, SIP messages associated with that feature tag\n     * may be sent and received freely.\n     * <p>\n     * When a feature tag is deregistering, the network IMS registration still contains the feature\n     * tag, however the IMS service and associated {@link SipDelegate} is in the progress of\n     * modifying the IMS registration to remove this feature tag and requires the application to\n     * perform an action before the IMS registration can change. The specific action required for\n     * the SipDelegate to continue modifying the IMS registration can be found in the definition of\n     * each {@link DelegateRegistrationState.DeregisteringReason}.\n     * <p>\n     * When a feature tag is in the deregistered state, new out-of-dialog SIP messages for that\n     * feature tag will be rejected, however due to network race conditions, the RCS application\n     * should still be able to handle new out-of-dialog SIP requests from the network. This may not\n     * be possible, however, if the IMS registration itself was lost. See the\n     * {@link DelegateRegistrationState.DeregisteredReason} reasons for more information on how SIP\n     * messages are handled in each of these cases.\n     * <p>\n     * If a feature tag is denied, no incoming messages will be routed to the associated\n     * {@link DelegateConnectionMessageCallback} and all outgoing SIP messages related to this\n     * feature tag will be rejected. See {@link SipDelegateManager.DeniedReason}\n     * reasons for more information about the conditions when this will happen.\n     * <p>\n     * The set of feature tags contained in the registered, deregistering, deregistered, and denied\n     * lists will always equal the set of feature tags requested in the initial\n     * {@link DelegateRequest}.\n     * <p>\n     * Transitions of feature tags from registered, deregistering, and deregistered and vice-versa\n     * may happen quite often, however transitions to/from denied are rare and only occur if the\n     * user has changed the role of your application to add/remove support for one or more requested\n     * feature tags or carrier provisioning has enabled or disabled single registration entirely.\n     * Please see {@link SipDelegateManager.DeniedReason} reasons for an explanation of each of\n     * these cases as well as what may cause them to change.\n     *\n     * @param registrationState The new IMS registration state of each of the feature tags\n     *     associated with the {@link SipDelegate}.\n     * @param deniedFeatureTags A list of {@link FeatureTagState} objects, each containing a feature\n     *     tag associated with this {@link SipDelegateConnection} that has no access to\n     *     send/receive SIP messages as well as a reason for why the feature tag is denied. For more\n     *     information on the reason why the feature tag was denied access, see the\n     *     {@link SipDelegateManager.DeniedReason} reasons.\n     ",
    "links" : [ "SipDelegateManager.DeniedReason", "android.telephony.ims.stub.DelegateConnectionMessageCallback", "android.telephony.ims.DelegateRequest", "android.telephony.ims.stub.SipDelegate", "android.telephony.ims.FeatureTagState", "android.telephony.ims.SipDelegateConnection", "DelegateRegistrationState.DeregisteringReason", "DelegateRegistrationState.DeregisteredReason" ]
  }, {
    "name" : " void onImsConfigurationChanged(@NonNull SipDelegateImsConfiguration registeredSipConfig)",
    "returnType" : "void",
    "comment" : "\n     * IMS configuration of the underlying IMS stack used by this IMS application for construction\n     * of the SIP messages that will be sent over the carrier's network.\n     * <p>\n     * There should never be assumptions made about the configuration of the underling IMS stack and\n     * the IMS application should wait for this indication before sending out any outgoing SIP\n     * messages.\n     * <p>\n     * Configuration may change due to IMS registration changes as well as\n     * other optional events on the carrier network. If IMS stack is already registered at the time\n     * of callback registration, then this method shall be invoked with the current configuration.\n     * Otherwise, there may be a delay in this method being called if initial IMS registration has\n     * not compleed yet.\n     *\n     * @param registeredSipConfig The configuration of the IMS stack registered on the IMS network.\n     * @removed Will not be in final API, use\n     * {@link #onConfigurationChanged(SipDelegateConfiguration)} instead}.\n     ",
    "links" : [ "#onConfigurationChanged(SipDelegateConfiguration)" ]
  }, {
    "name" : " void onConfigurationChanged(@NonNull SipDelegateConfiguration registeredSipConfig)",
    "returnType" : "void",
    "comment" : "\n     * IMS configuration of the underlying IMS stack used by this IMS application for construction\n     * of the SIP messages that will be sent over the carrier's network.\n     * <p>\n     * There should never be assumptions made about the configuration of the underling IMS stack and\n     * the IMS application should wait for this indication before sending out any outgoing SIP\n     * messages.\n     * <p>\n     * Configuration may change due to IMS registration changes as well as\n     * other optional events on the carrier network. If IMS stack is already registered at the time\n     * of callback registration, then this method shall be invoked with the current configuration.\n     * Otherwise, there may be a delay in this method being called if initial IMS registration has\n     * not compleed yet.\n     *\n     * @param registeredSipConfig The configuration of the IMS stack registered on the IMS network.\n     ",
    "links" : [ ]
  }, {
    "name" : " void onDestroyed(@SipDelegateManager.SipDelegateDestroyReason int reason)",
    "returnType" : "void",
    "comment" : "\n     * The previously created {@link SipDelegateConnection} instance delivered via\n     * {@link #onCreated(SipDelegateConnection)} has been destroyed. This interface should no longer\n     * be used for any SIP message handling.\n     *\n     * @param reason The reason for the failure.\n     ",
    "links" : [ "#onCreated(SipDelegateConnection)", "android.telephony.ims.SipDelegateConnection" ]
  } ],
  "methodNames" : [ " void onCreated(@NonNull SipDelegateConnection c)", " void onFeatureTagStatusChanged(@NonNull DelegateRegistrationState registrationState, @NonNull Set<FeatureTagState> deniedFeatureTags)", " void onImsConfigurationChanged(@NonNull SipDelegateImsConfiguration registeredSipConfig)", " void onConfigurationChanged(@NonNull SipDelegateConfiguration registeredSipConfig)", " void onDestroyed(@SipDelegateManager.SipDelegateDestroyReason int reason)" ],
  "variableNames" : [ ]
}