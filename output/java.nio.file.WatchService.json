{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/nio/file/WatchService.java",
  "packageName" : "java.nio.file",
  "className" : "WatchService",
  "comment" : "",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " void close() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Closes this watch service.\n     *\n     * <p> If a thread is currently blocked in the {@link #take take} or {@link\n     * #poll(long,TimeUnit) poll} methods waiting for a key to be queued then\n     * it immediately receives a {@link ClosedWatchServiceException}. Any\n     * valid keys associated with this watch service are {@link WatchKey#isValid\n     * invalidated}.\n     *\n     * <p> After a watch service is closed, any further attempt to invoke\n     * operations upon it will throw {@link ClosedWatchServiceException}.\n     * If this watch service is already closed then invoking this method\n     * has no effect.\n     *\n     * @throws  IOException\n     *          if an I/O error occurs\n     ",
    "links" : [ "#poll(long", "java.nio.file.ClosedWatchServiceException", "java.nio.file.WatchKey#isValidinvalidated", "#take" ]
  }, {
    "name" : " WatchKey poll()",
    "returnType" : "WatchKey",
    "comment" : "\n     * Retrieves and removes the next watch key, or {@code null} if none are\n     * present.\n     *\n     * @return  the next watch key, or {@code null}\n     *\n     * @throws  ClosedWatchServiceException\n     *          if this watch service is closed\n     ",
    "links" : [ ]
  }, {
    "name" : " WatchKey poll(long timeout, TimeUnit unit) throws InterruptedException",
    "returnType" : "WatchKey",
    "comment" : "\n     * Retrieves and removes the next watch key, waiting if necessary up to the\n     * specified wait time if none are yet present.\n     *\n     * @param   timeout\n     *          how to wait before giving up, in units of unit\n     * @param   unit\n     *          a {@code TimeUnit} determining how to interpret the timeout\n     *          parameter\n     *\n     * @return  the next watch key, or {@code null}\n     *\n     * @throws  ClosedWatchServiceException\n     *          if this watch service is closed, or it is closed while waiting\n     *          for the next key\n     * @throws  InterruptedException\n     *          if interrupted while waiting\n     ",
    "links" : [ ]
  }, {
    "name" : " WatchKey take() throws InterruptedException",
    "returnType" : "WatchKey",
    "comment" : "\n     * Retrieves and removes next watch key, waiting if none are yet present.\n     *\n     * @return  the next watch key\n     *\n     * @throws  ClosedWatchServiceException\n     *          if this watch service is closed, or it is closed while waiting\n     *          for the next key\n     * @throws  InterruptedException\n     *          if interrupted while waiting\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " void close() throws IOException", " WatchKey poll()", " WatchKey poll(long timeout, TimeUnit unit) throws InterruptedException", " WatchKey take() throws InterruptedException" ],
  "variableNames" : [ ]
}