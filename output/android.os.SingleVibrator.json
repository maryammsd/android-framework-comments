{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/os/SystemVibratorManager.java",
  "packageName" : "android.os",
  "className" : "SingleVibrator",
  "comment" : " Controls vibrations on a single vibrator. ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mVibratorInfo",
    "type" : "VibratorInfo",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public VibratorInfo getInfo()",
    "returnType" : "VibratorInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasVibrator()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasAmplitudeControl()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean setAlwaysOnEffect(int uid, String opPkg, int alwaysOnId, @Nullable VibrationEffect effect, @Nullable VibrationAttributes attrs)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void vibrate(int uid, String opPkg, @NonNull VibrationEffect vibe, String reason, @NonNull VibrationAttributes attributes)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void performHapticFeedback(int effectId, boolean always, String reason, boolean fromIme)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void cancel()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void cancel(int usageFilter)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isVibrating()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addVibratorStateListener(@NonNull OnVibratorStateChangedListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addVibratorStateListener(@NonNull @CallbackExecutor Executor executor, @NonNull OnVibratorStateChangedListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeVibratorStateListener(@NonNull OnVibratorStateChangedListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public VibratorInfo getInfo()", "public boolean hasVibrator()", "public boolean hasAmplitudeControl()", "public boolean setAlwaysOnEffect(int uid, String opPkg, int alwaysOnId, @Nullable VibrationEffect effect, @Nullable VibrationAttributes attrs)", "public void vibrate(int uid, String opPkg, @NonNull VibrationEffect vibe, String reason, @NonNull VibrationAttributes attributes)", "public void performHapticFeedback(int effectId, boolean always, String reason, boolean fromIme)", "public void cancel()", "public void cancel(int usageFilter)", "public boolean isVibrating()", "public void addVibratorStateListener(@NonNull OnVibratorStateChangedListener listener)", "public void addVibratorStateListener(@NonNull @CallbackExecutor Executor executor, @NonNull OnVibratorStateChangedListener listener)", "public void removeVibratorStateListener(@NonNull OnVibratorStateChangedListener listener)" ],
  "variableNames" : [ "mVibratorInfo" ]
}