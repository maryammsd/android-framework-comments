{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/widget/ZoomButtonsController.java",
  "packageName" : "android.widget",
  "className" : "ZoomButtonsController",
  "comment" : "\n * The {@link ZoomButtonsController} handles showing and hiding the zoom\n * controls and positioning it relative to an owner view. It also gives the\n * client access to the zoom controls container, allowing for additional\n * accessory buttons to be shown in the zoom controls window.\n * <p>\n * Typically, clients should call {@link #setVisible(boolean) setVisible(true)}\n * on a touch down or move (no need to call {@link #setVisible(boolean)\n * setVisible(false)} since it will time out on its own). Also, whenever the\n * owner cannot be zoomed further, the client should update\n * {@link #setZoomInEnabled(boolean)} and {@link #setZoomOutEnabled(boolean)}.\n * <p>\n * If you are using this with a custom View, please call\n * {@link #setVisible(boolean) setVisible(false)} from\n * {@link View#onDetachedFromWindow} and from {@link View#onVisibilityChanged}\n * when <code>visibility != View.VISIBLE</code>.\n *\n * @deprecated This functionality and UI is better handled with custom views and layouts\n * rather than a dedicated zoom-control widget\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ZOOM_CONTROLS_TIMEOUT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ZOOM_CONTROLS_TOUCH_PADDING",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTouchPaddingScaledSq",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWindowManager",
    "type" : "WindowManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAutoDismissControls",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOwnerView",
    "type" : "View",
    "comment" : "\n     * The view that is being zoomed by this zoom controller.\n     ",
    "links" : [ ]
  }, {
    "name" : "mOwnerViewRawLocation",
    "type" : "int[]",
    "comment" : "\n     * The location of the owner view on the screen. This is recalculated\n     * each time the zoom controller is shown.\n     ",
    "links" : [ ]
  }, {
    "name" : "mContainer",
    "type" : "FrameLayout",
    "comment" : "\n     * The container that is added as a window.\n     ",
    "links" : [ ]
  }, {
    "name" : "mContainerLayoutParams",
    "type" : "LayoutParams",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContainerRawLocation",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mControls",
    "type" : "ZoomControls",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTouchTargetView",
    "type" : "View",
    "comment" : "\n     * The view (or null) that should receive touch events. This will get set if\n     * the touch down hits the container. It will be reset on the touch up.\n     ",
    "links" : [ ]
  }, {
    "name" : "mTouchTargetWindowLocation",
    "type" : "int[]",
    "comment" : "\n     * The {@link #mTouchTargetView}'s location in window, set on touch down.\n     ",
    "links" : [ "#mTouchTargetView" ]
  }, {
    "name" : "mReleaseTouchListenerOnUp",
    "type" : "boolean",
    "comment" : "\n     * If the zoom controller is dismissed but the user is still in a touch\n     * interaction, we set this to true. This will ignore all touch events until\n     * up/cancel, and then set the owner's touch listener to null.\n     * <p>\n     * Otherwise, the owner view would get mismatched events (i.e., touch move\n     * even though it never got the touch down.)\n     ",
    "links" : [ ]
  }, {
    "name" : "mIsVisible",
    "type" : "boolean",
    "comment" : " Whether the container has been added to the window manager. ",
    "links" : [ ]
  }, {
    "name" : "mTempRect",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTempIntArray",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallback",
    "type" : "OnZoomListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPostedVisibleInitializer",
    "type" : "Runnable",
    "comment" : "\n     * When showing the zoom, we add the view as a new window. However, there is\n     * logic that needs to know the size of the zoom which is determined after\n     * it's laid out. Therefore, we must post this logic onto the UI thread so\n     * it will be exceuted AFTER the layout. This is the logic.\n     ",
    "links" : [ ]
  }, {
    "name" : "mConfigurationChangedFilter",
    "type" : "IntentFilter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConfigurationChangedReceiver",
    "type" : "BroadcastReceiver",
    "comment" : "\n     * Needed to reposition the zoom controls after configuration changes.\n     ",
    "links" : [ ]
  }, {
    "name" : "MSG_POST_CONFIGURATION_CHANGED",
    "type" : "int",
    "comment" : " When configuration changes, this is called after the UI thread is idle. ",
    "links" : [ ]
  }, {
    "name" : "MSG_DISMISS_ZOOM_CONTROLS",
    "type" : "int",
    "comment" : " Used to delay the zoom controller dismissal. ",
    "links" : [ ]
  }, {
    "name" : "MSG_POST_SET_VISIBLE",
    "type" : "int",
    "comment" : "\n     * If setVisible(true) is called and the owner view's window token is null,\n     * we delay the setVisible(true) call until it is not null.\n     ",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setZoomInEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * Whether to enable the zoom in control.\n     *\n     * @param enabled Whether to enable the zoom in control.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setZoomOutEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * Whether to enable the zoom out control.\n     *\n     * @param enabled Whether to enable the zoom out control.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setZoomSpeed(long speed)",
    "returnType" : "void",
    "comment" : "\n     * Sets the delay between zoom callbacks as the user holds a zoom button.\n     *\n     * @param speed The delay in milliseconds between zoom callbacks.\n     ",
    "links" : [ ]
  }, {
    "name" : "private FrameLayout createContainer()",
    "returnType" : "FrameLayout",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setOnZoomListener(OnZoomListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Sets the {@link OnZoomListener} listener that receives callbacks to zoom.\n     *\n     * @param listener The listener that will be told to zoom.\n     ",
    "links" : [ "OnZoomListener" ]
  }, {
    "name" : "public void setFocusable(boolean focusable)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether the zoom controls should be focusable. If the controls are\n     * focusable, then trackball and arrow key interactions are possible.\n     * Otherwise, only touch interactions are possible.\n     *\n     * @param focusable Whether the zoom controls should be focusable.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isAutoDismissed()",
    "returnType" : "boolean",
    "comment" : "\n     * Whether the zoom controls will be automatically dismissed after showing.\n     *\n     * @return Whether the zoom controls will be auto dismissed after showing.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAutoDismissed(boolean autoDismiss)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether the zoom controls will be automatically dismissed after\n     * showing.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isVisible()",
    "returnType" : "boolean",
    "comment" : "\n     * Whether the zoom controls are visible to the user.\n     *\n     * @return Whether the zoom controls are visible to the user.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setVisible(boolean visible)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether the zoom controls should be visible to the user.\n     *\n     * @param visible Whether the zoom controls should be visible to the user.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ViewGroup getContainer()",
    "returnType" : "ViewGroup",
    "comment" : "\n     * Gets the container that is the parent of the zoom controls.\n     * <p>\n     * The client can add other views to this container to link them with the\n     * zoom controls.\n     *\n     * @return The container of the zoom controls. It will be a layout that\n     *         respects the gravity of a child's layout parameters.\n     ",
    "links" : [ ]
  }, {
    "name" : "public View getZoomControls()",
    "returnType" : "View",
    "comment" : "\n     * Gets the view for the zoom controls.\n     *\n     * @return The zoom controls view.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void dismissControlsDelayed(int delay)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void refreshPositioningVariables()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean onContainerKey(KeyEvent event)",
    "returnType" : "boolean",
    "comment" : " This will only be called when the container has focus. ",
    "links" : [ ]
  }, {
    "name" : "private boolean isInterestingKey(int keyCode)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean onTouch(View v, MotionEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * @hide The ZoomButtonsController implements the OnTouchListener, but this\n     *       does not need to be shown in its public API.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setTouchTargetView(View view)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private View findViewForTouch(int rawX, int rawY)",
    "returnType" : "View",
    "comment" : "\n     * Returns the View that should receive a touch at the given coordinates.\n     *\n     * @param rawX The raw X.\n     * @param rawY The raw Y.\n     * @return The view that should receive the touches, or null if there is not one.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void onPostConfigurationChanged()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "ZOOM_CONTROLS_TIMEOUT", "ZOOM_CONTROLS_TOUCH_PADDING", "mTouchPaddingScaledSq", "mContext", "mWindowManager", "mAutoDismissControls", "mOwnerView", "mOwnerViewRawLocation", "mContainer", "mContainerLayoutParams", "mContainerRawLocation", "mControls", "mTouchTargetView", "mTouchTargetWindowLocation", "mReleaseTouchListenerOnUp", "mIsVisible", "mTempRect", "mTempIntArray", "mCallback", "mPostedVisibleInitializer", "mConfigurationChangedFilter", "mConfigurationChangedReceiver", "MSG_POST_CONFIGURATION_CHANGED", "MSG_DISMISS_ZOOM_CONTROLS", "MSG_POST_SET_VISIBLE", "mHandler" ],
  "methodNames" : [ "public void setZoomInEnabled(boolean enabled)", "public void setZoomOutEnabled(boolean enabled)", "public void setZoomSpeed(long speed)", "private FrameLayout createContainer()", "public void setOnZoomListener(OnZoomListener listener)", "public void setFocusable(boolean focusable)", "public boolean isAutoDismissed()", "public void setAutoDismissed(boolean autoDismiss)", "public boolean isVisible()", "public void setVisible(boolean visible)", "public ViewGroup getContainer()", "public View getZoomControls()", "private void dismissControlsDelayed(int delay)", "private void refreshPositioningVariables()", "private boolean onContainerKey(KeyEvent event)", "private boolean isInterestingKey(int keyCode)", "public boolean onTouch(View v, MotionEvent event)", "private void setTouchTargetView(View view)", "private View findViewForTouch(int rawX, int rawY)", "private void onPostConfigurationChanged()" ]
}