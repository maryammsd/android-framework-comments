{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xalan/templates/ElemIf.java",
  "packageName" : "org.apache.xalan.templates",
  "className" : "ElemIf",
  "comment" : "\n * Implement xsl:if.\n * <pre>\n * <!ELEMENT xsl:if %template;>\n * <!ATTLIST xsl:if\n *   test %expr; #REQUIRED\n *   %space-att;\n * >\n * </pre>\n * @see <a href=\"http://www.w3.org/TR/xslt#section-Conditional-Processing-with-xsl:if\">XXX in XSLT Specification</a>\n * @xsl.usage advanced\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_test",
    "type" : "XPath",
    "comment" : "\n   * The xsl:if element must have a test attribute, which specifies an expression.\n   * @serial\n   ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setTest(XPath v)",
    "returnType" : "void",
    "comment" : "\n   * Set the \"test\" attribute.\n   * The xsl:if element must have a test attribute, which specifies an expression.\n   *\n   * @param v test attribute to set\n   ",
    "links" : [ ]
  }, {
    "name" : "public XPath getTest()",
    "returnType" : "XPath",
    "comment" : "\n   * Get the \"test\" attribute.\n   * The xsl:if element must have a test attribute, which specifies an expression.\n   *\n   * @return the \"test\" attribute for this element.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void compose(StylesheetRoot sroot) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n   * This function is called after everything else has been\n   * recomposed, and allows the template to set remaining\n   * values that may be based on some other property that\n   * depends on recomposition.\n   *\n   * @param sroot The root stylesheet.\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getXSLToken()",
    "returnType" : "int",
    "comment" : "\n   * Get an int constant identifying the type of element.\n   * @see org.apache.xalan.templates.Constants\n   *\n   * @return The token ID for this element\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getNodeName()",
    "returnType" : "String",
    "comment" : "\n   * Return the node name.\n   *\n   * @return the element's name\n   ",
    "links" : [ ]
  }, {
    "name" : "public void execute(TransformerImpl transformer) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n   * Conditionally execute a sub-template.\n   * The expression is evaluated and the resulting object is converted\n   * to a boolean as if by a call to the boolean function. If the result\n   * is true, then the content template is instantiated; otherwise, nothing\n   * is created.\n   *\n   * @param transformer non-null reference to the the current transform-time state.\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "protected void callChildVisitors(XSLTVisitor visitor, boolean callAttrs)",
    "returnType" : "void",
    "comment" : "\n   * Call the children visitors.\n   * @param visitor The visitor whose appropriate method will be called.\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setTest(XPath v)", "public XPath getTest()", "public void compose(StylesheetRoot sroot) throws TransformerException", "public int getXSLToken()", "public String getNodeName()", "public void execute(TransformerImpl transformer) throws TransformerException", "protected void callChildVisitors(XSLTVisitor visitor, boolean callAttrs)" ],
  "variableNames" : [ "serialVersionUID", "m_test" ]
}