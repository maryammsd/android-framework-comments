{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/wifi/sharedconnectivity/app/SharedConnectivityManager.java",
  "packageName" : "android.net.wifi.sharedconnectivity.app",
  "className" : "SharedConnectivityManager",
  "comment" : "\n * This class is the library used by consumers of Shared Connectivity data to bind to the service,\n * receive callbacks from, and send user actions to the service.\n *\n * A client must register at least one callback so that the manager will bind to the service. Once\n * all callbacks are unregistered, the manager will unbind from the service. When the client no\n * longer needs Shared Connectivity data, the client must unregister.\n *\n * The methods {@link #connectHotspotNetwork}, {@link #disconnectHotspotNetwork},\n * {@link #connectKnownNetwork} and {@link #forgetKnownNetwork} are not valid and will return false\n * and getter methods will fail and return null if not called between\n * {@link SharedConnectivityClientCallback#onServiceConnected()}\n * and {@link SharedConnectivityClientCallback#onServiceDisconnected()} or if\n * {@link SharedConnectivityClientCallback#onRegisterCallbackFailed} was called.\n *\n * @hide\n ",
  "links" : [ "#disconnectHotspotNetwork", "#connectHotspotNetwork", "#connectKnownNetwork", "android.net.wifi.sharedconnectivity.app.SharedConnectivityClientCallback#onServiceConnected()", "#forgetKnownNetwork", "android.net.wifi.sharedconnectivity.app.SharedConnectivityClientCallback#onServiceDisconnected()", "android.net.wifi.sharedconnectivity.app.SharedConnectivityClientCallback#onRegisterCallbackFailed" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "ISharedConnectivityService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProxyMap",
    "type" : "Map<SharedConnectivityClientCallback, SharedConnectivityCallbackProxy>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallbackProxyCache",
    "type" : "Map<SharedConnectivityClientCallback, SharedConnectivityCallbackProxy>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProxyDataLock",
    "type" : "Object",
    "comment" : " Makes sure mProxyMap and mCallbackProxyCache are locked together when one of them is used.",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mServicePackageName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIntentAction",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mServiceConnection",
    "type" : "ServiceConnection",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUserManager",
    "type" : "UserManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBroadcastReceiver",
    "type" : "BroadcastReceiver",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static SharedConnectivityManager create(@NonNull Context context)",
    "returnType" : "SharedConnectivityManager",
    "comment" : "\n     * Creates a new instance of {@link SharedConnectivityManager}.\n     *\n     * @return An instance of {@link SharedConnectivityManager} or null if the shared connectivity\n     * service is not found.\n     * @hide\n     ",
    "links" : [ "android.net.wifi.sharedconnectivity.app.SharedConnectivityManager" ]
  }, {
    "name" : "public static SharedConnectivityManager create(@NonNull Context context, @NonNull String servicePackageName, @NonNull String serviceIntentAction)",
    "returnType" : "SharedConnectivityManager",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void bind()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public BroadcastReceiver getBroadcastReceiver()",
    "returnType" : "BroadcastReceiver",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void registerCallbackInternal(SharedConnectivityClientCallback callback, SharedConnectivityCallbackProxy proxy)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setService(@Nullable IInterface service)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public ServiceConnection getServiceConnection()",
    "returnType" : "ServiceConnection",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void unbind()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void registerCallback(@NonNull @CallbackExecutor Executor executor, @NonNull SharedConnectivityClientCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Registers a callback for receiving updates to the list of Hotspot Networks, Known Networks,\n     * shared connectivity settings state, hotspot network connection status and known network\n     * connection status.\n     * Automatically binds to implementation of {@link SharedConnectivityService} specified in\n     * the device overlay when the first callback is registered.\n     * The {@link SharedConnectivityClientCallback#onRegisterCallbackFailed} will be called if the\n     * registration failed.\n     *\n     * @param executor The Executor used to invoke the callback.\n     * @param callback The callback of type {@link SharedConnectivityClientCallback} that is invoked\n     *                 when the service updates its data.\n     ",
    "links" : [ "android.net.wifi.sharedconnectivity.service.ISharedConnectivityService", "android.net.wifi.sharedconnectivity.app.SharedConnectivityClientCallback#onRegisterCallbackFailed", "android.net.wifi.sharedconnectivity.app.SharedConnectivityClientCallback" ]
  }, {
    "name" : "public boolean unregisterCallback(@NonNull SharedConnectivityClientCallback callback)",
    "returnType" : "boolean",
    "comment" : "\n     * Unregisters a callback.\n     * Unbinds from {@link SharedConnectivityService} when no more callbacks are registered.\n     *\n     * @return Returns true if the callback was successfully unregistered, false otherwise.\n     ",
    "links" : [ "android.net.wifi.sharedconnectivity.service.ISharedConnectivityService" ]
  }, {
    "name" : "public boolean connectHotspotNetwork(@NonNull HotspotNetwork network)",
    "returnType" : "boolean",
    "comment" : "\n     * Send command to the implementation of {@link SharedConnectivityService} requesting connection\n     * to the specified Hotspot Network.\n     *\n     * @param network {@link HotspotNetwork} object representing the network the user has requested\n     *                a connection to.\n     * @return Returns true if the service received the command. Does not guarantee that the\n     * connection was successful.\n     ",
    "links" : [ "android.net.wifi.sharedconnectivity.service.ISharedConnectivityService", "android.net.wifi.sharedconnectivity.app.HotspotNetwork" ]
  }, {
    "name" : "public boolean disconnectHotspotNetwork(@NonNull HotspotNetwork network)",
    "returnType" : "boolean",
    "comment" : "\n     * Send command to the implementation of {@link SharedConnectivityService} requesting\n     * disconnection from the active Hotspot Network.\n     *\n     * @param network {@link HotspotNetwork} object representing the network the user has requested\n     *                to disconnect from.\n     * @return Returns true if the service received the command. Does not guarantee that the\n     * disconnection was successful.\n     ",
    "links" : [ "android.net.wifi.sharedconnectivity.service.ISharedConnectivityService", "android.net.wifi.sharedconnectivity.app.HotspotNetwork" ]
  }, {
    "name" : "public boolean connectKnownNetwork(@NonNull KnownNetwork network)",
    "returnType" : "boolean",
    "comment" : "\n     * Send command to the implementation of {@link SharedConnectivityService} requesting connection\n     * to the specified Known Network.\n     *\n     * @param network {@link KnownNetwork} object representing the network the user has requested\n     *                a connection to.\n     * @return Returns true if the service received the command. Does not guarantee that the\n     * connection was successful.\n     ",
    "links" : [ "android.net.wifi.sharedconnectivity.service.ISharedConnectivityService", "android.net.wifi.sharedconnectivity.app.KnownNetwork" ]
  }, {
    "name" : "public boolean forgetKnownNetwork(@NonNull KnownNetwork network)",
    "returnType" : "boolean",
    "comment" : "\n     * Send command to the implementation of {@link SharedConnectivityService} requesting removal of\n     * the specified Known Network from the list of Known Networks.\n     *\n     * @return Returns true if the service received the command. Does not guarantee that the\n     * forget action was successful.\n     ",
    "links" : [ "android.net.wifi.sharedconnectivity.service.ISharedConnectivityService" ]
  }, {
    "name" : "public List<HotspotNetwork> getHotspotNetworks()",
    "returnType" : "List<HotspotNetwork>",
    "comment" : "\n     * Gets the list of hotspot networks the user can select to connect to.\n     *\n     * @return Returns a {@link List} of {@link HotspotNetwork} objects, null on failure.\n     ",
    "links" : [ "java.util.List", "android.net.wifi.sharedconnectivity.app.HotspotNetwork" ]
  }, {
    "name" : "public List<KnownNetwork> getKnownNetworks()",
    "returnType" : "List<KnownNetwork>",
    "comment" : "\n     * Gets the list of known networks the user can select to connect to.\n     *\n     * @return Returns a {@link List} of {@link KnownNetwork} objects, null on failure.\n     ",
    "links" : [ "java.util.List", "android.net.wifi.sharedconnectivity.app.KnownNetwork" ]
  }, {
    "name" : "public SharedConnectivitySettingsState getSettingsState()",
    "returnType" : "SharedConnectivitySettingsState",
    "comment" : "\n     * Gets the shared connectivity settings state.\n     *\n     * @return Returns a {@link SharedConnectivitySettingsState} object with the state, null on\n     * failure.\n     ",
    "links" : [ "android.net.wifi.sharedconnectivity.app.SharedConnectivitySettingsState" ]
  }, {
    "name" : "public HotspotNetworkConnectionStatus getHotspotNetworkConnectionStatus()",
    "returnType" : "HotspotNetworkConnectionStatus",
    "comment" : "\n     * Gets the connection status of the hotspot network the user selected to connect to.\n     *\n     * @return Returns a {@link HotspotNetworkConnectionStatus} object with the connection status,\n     * null on failure. If no connection is active the status will be\n     * {@link HotspotNetworkConnectionStatus#CONNECTION_STATUS_UNKNOWN}.\n     ",
    "links" : [ "android.net.wifi.sharedconnectivity.app.HotspotNetworkConnectionStatus", "android.net.wifi.sharedconnectivity.app.HotspotNetworkConnectionStatus#CONNECTION_STATUS_UNKNOWN" ]
  }, {
    "name" : "public KnownNetworkConnectionStatus getKnownNetworkConnectionStatus()",
    "returnType" : "KnownNetworkConnectionStatus",
    "comment" : "\n     * Gets the connection status of the known network the user selected to connect to.\n     *\n     * @return Returns a {@link KnownNetworkConnectionStatus} object with the connection status,\n     * null on failure. If no connection is active the status will be\n     * {@link KnownNetworkConnectionStatus#CONNECTION_STATUS_UNKNOWN}.\n     ",
    "links" : [ "android.net.wifi.sharedconnectivity.app.KnownNetworkConnectionStatus#CONNECTION_STATUS_UNKNOWN", "android.net.wifi.sharedconnectivity.app.KnownNetworkConnectionStatus" ]
  } ],
  "methodNames" : [ "public static SharedConnectivityManager create(@NonNull Context context)", "public static SharedConnectivityManager create(@NonNull Context context, @NonNull String servicePackageName, @NonNull String serviceIntentAction)", "private void bind()", "public BroadcastReceiver getBroadcastReceiver()", "private void registerCallbackInternal(SharedConnectivityClientCallback callback, SharedConnectivityCallbackProxy proxy)", "public void setService(@Nullable IInterface service)", "public ServiceConnection getServiceConnection()", "private void unbind()", "public void registerCallback(@NonNull @CallbackExecutor Executor executor, @NonNull SharedConnectivityClientCallback callback)", "public boolean unregisterCallback(@NonNull SharedConnectivityClientCallback callback)", "public boolean connectHotspotNetwork(@NonNull HotspotNetwork network)", "public boolean disconnectHotspotNetwork(@NonNull HotspotNetwork network)", "public boolean connectKnownNetwork(@NonNull KnownNetwork network)", "public boolean forgetKnownNetwork(@NonNull KnownNetwork network)", "public List<HotspotNetwork> getHotspotNetworks()", "public List<KnownNetwork> getKnownNetworks()", "public SharedConnectivitySettingsState getSettingsState()", "public HotspotNetworkConnectionStatus getHotspotNetworkConnectionStatus()", "public KnownNetworkConnectionStatus getKnownNetworkConnectionStatus()" ],
  "variableNames" : [ "TAG", "DEBUG", "mService", "mProxyMap", "mCallbackProxyCache", "mProxyDataLock", "mContext", "mServicePackageName", "mIntentAction", "mServiceConnection", "mUserManager", "mBroadcastReceiver" ]
}