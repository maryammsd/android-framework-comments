{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/hardware/radio/RadioManager.java",
  "packageName" : "android.hardware.radio",
  "className" : "ModuleProperties",
  "comment" : "***************************************************************************\n     * Lists properties, options and radio bands supported by a given broadcast radio module.\n     * Each module has a unique ID used to address it when calling RadioManager APIs.\n     * Module properties are returned by {@link #listModules(List <ModuleProperties>)} method.\n     ***************************************************************************",
  "variables" : [ {
    "name" : "mId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mServiceName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mClassId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mImplementor",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProduct",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVersion",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSerial",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNumTuners",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNumAudioSources",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsInitializationRequired",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsCaptureSupported",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBands",
    "type" : "BandDescriptor[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsBgScanSupported",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSupportedProgramTypes",
    "type" : "Set<Integer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSupportedIdentifierTypes",
    "type" : "Set<Integer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDabFrequencyTable",
    "type" : "Map<String, Integer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVendorInfo",
    "type" : "Map<String, String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<ModuleProperties>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static Set<Integer> arrayToSet(int[] arr)",
    "returnType" : "Set<Integer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int[] setToArray(Set<Integer> set)",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getId()",
    "returnType" : "int",
    "comment" : " Unique module identifier provided by the native service.\n         * For use with {@link #openTuner(int, BandConfig, boolean, Callback, Handler)}.\n         * @return the radio module unique identifier.\n         ",
    "links" : [ "#openTuner" ]
  }, {
    "name" : "public String getServiceName()",
    "returnType" : "String",
    "comment" : "\n         * Module service (driver) name as registered with HIDL.\n         * @return the module service name.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getClassId()",
    "returnType" : "int",
    "comment" : " Module class identifier: {@link #CLASS_AM_FM}, {@link #CLASS_SAT}, {@link #CLASS_DT}\n         * @return the radio module class identifier.\n         ",
    "links" : [ "#CLASS_AM_FM", "#CLASS_SAT", "#CLASS_DT" ]
  }, {
    "name" : "public String getImplementor()",
    "returnType" : "String",
    "comment" : " Human readable broadcast radio module implementor\n         * @return the name of the radio module implementator.\n         ",
    "links" : [ ]
  }, {
    "name" : "public String getProduct()",
    "returnType" : "String",
    "comment" : " Human readable broadcast radio module product name\n         * @return the radio module product name.\n         ",
    "links" : [ ]
  }, {
    "name" : "public String getVersion()",
    "returnType" : "String",
    "comment" : " Human readable broadcast radio module version number\n         * @return the radio module version.\n         ",
    "links" : [ ]
  }, {
    "name" : "public String getSerial()",
    "returnType" : "String",
    "comment" : " Radio module serial number.\n         * Can be used for subscription services.\n         * @return the radio module serial number.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getNumTuners()",
    "returnType" : "int",
    "comment" : " Number of tuners available.\n         * This is the number of tuners that can be open simultaneously.\n         * @return the number of tuners supported.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getNumAudioSources()",
    "returnType" : "int",
    "comment" : " Number tuner audio sources available. Must be less or equal to getNumTuners().\n         * When more than one tuner is supported, one is usually for playback and has one\n         * associated audio source and the other is for pre scanning and building a\n         * program list.\n         * @return the number of audio sources available.\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean isInitializationRequired()",
    "returnType" : "boolean",
    "comment" : "\n         * Checks, if BandConfig initialization (after {@link RadioManager#openTuner})\n         * is required to be done before other operations or not.\n         *\n         * If it is, the client has to wait for {@link RadioTuner.Callback#onConfigurationChanged}\n         * callback before executing any other operations. Otherwise, such operation will fail\n         * returning {@link RadioManager#STATUS_INVALID_OPERATION} error code.\n         ",
    "links" : [ "RadioManager#openTuner", "RadioTuner.Callback#onConfigurationChanged", "RadioManager#STATUS_INVALID_OPERATION" ]
  }, {
    "name" : "public boolean isCaptureSupported()",
    "returnType" : "boolean",
    "comment" : " {@code true} if audio capture is possible from radio tuner output.\n         * This indicates if routing to audio devices not connected to the same HAL as the FM radio\n         * is possible (e.g. to USB) or DAR (Digital Audio Recorder) feature can be implemented.\n         * @return {@code true} if audio capture is possible, {@code false} otherwise.\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean isBackgroundScanningSupported()",
    "returnType" : "boolean",
    "comment" : "\n         * {@code true} if the module supports background scanning. At the given time it may not\n         * be available though, see {@link RadioTuner#startBackgroundScan()}.\n         *\n         * @return {@code true} if background scanning is supported (not necessary available\n         * at a given time), {@code false} otherwise.\n         ",
    "links" : [ "RadioTuner#startBackgroundScan" ]
  }, {
    "name" : "public boolean isProgramTypeSupported(@ProgramSelector.ProgramType int type)",
    "returnType" : "boolean",
    "comment" : "\n         * Checks, if a given program type is supported by this tuner.\n         *\n         * If a program type is supported by radio module, it means it can tune\n         * to ProgramSelector of a given type.\n         *\n         * @return {@code true} if a given program type is supported.\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean isProgramIdentifierSupported(@ProgramSelector.IdentifierType int type)",
    "returnType" : "boolean",
    "comment" : "\n         * Checks, if a given program identifier is supported by this tuner.\n         *\n         * If an identifier is supported by radio module, it means it can use it for\n         * tuning to ProgramSelector with either primary or secondary Identifier of\n         * a given type.\n         *\n         * @return {@code true} if a given program type is supported.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Map<String, Integer> getDabFrequencyTable()",
    "returnType" : "Map<String, Integer>",
    "comment" : "\n         * A frequency table for Digital Audio Broadcasting (DAB).\n         *\n         * The key is a channel name, i.e. 5A, 7B.\n         *\n         * The value is a frequency, in kHz.\n         *\n         * @return a frequency table, or {@code null} if the module doesn't support DAB\n         ",
    "links" : [ ]
  }, {
    "name" : "public Map<String, String> getVendorInfo()",
    "returnType" : "Map<String, String>",
    "comment" : "\n         * A map of vendor-specific opaque strings, passed from HAL without changes.\n         * Format of these strings can vary across vendors.\n         *\n         * It may be used for extra features, that's not supported by a platform,\n         * for example: preset-slots=6; ultra-hd-capable=false.\n         *\n         * Keys must be prefixed with unique vendor Java-style namespace,\n         * eg. 'com.somecompany.parameter1'.\n         ",
    "links" : [ ]
  }, {
    "name" : "public BandDescriptor[] getBands()",
    "returnType" : "BandDescriptor[]",
    "comment" : " List of descriptors for all bands supported by this module.\n         * @return an array of {@link BandDescriptor}.\n         ",
    "links" : [ "BandDescriptor" ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(@Nullable Object obj)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "mId", "mServiceName", "mClassId", "mImplementor", "mProduct", "mVersion", "mSerial", "mNumTuners", "mNumAudioSources", "mIsInitializationRequired", "mIsCaptureSupported", "mBands", "mIsBgScanSupported", "mSupportedProgramTypes", "mSupportedIdentifierTypes", "mDabFrequencyTable", "mVendorInfo", "CREATOR" ],
  "methodNames" : [ "private static Set<Integer> arrayToSet(int[] arr)", "private static int[] setToArray(Set<Integer> set)", "public int getId()", "public String getServiceName()", "public int getClassId()", "public String getImplementor()", "public String getProduct()", "public String getVersion()", "public String getSerial()", "public int getNumTuners()", "public int getNumAudioSources()", "public boolean isInitializationRequired()", "public boolean isCaptureSupported()", "public boolean isBackgroundScanningSupported()", "public boolean isProgramTypeSupported(@ProgramSelector.ProgramType int type)", "public boolean isProgramIdentifierSupported(@ProgramSelector.IdentifierType int type)", "public Map<String, Integer> getDabFrequencyTable()", "public Map<String, String> getVendorInfo()", "public BandDescriptor[] getBands()", "public void writeToParcel(Parcel dest, int flags)", "public int describeContents()", "public String toString()", "public int hashCode()", "public boolean equals(@Nullable Object obj)" ]
}