{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/renderscript/ScriptIntrinsicBlend.java",
  "packageName" : "android.renderscript",
  "className" : "ScriptIntrinsicBlend",
  "comment" : "\n * Intrinsic kernels for blending two {@link android.renderscript.Allocation} objects.\n *",
  "variables" : [ ],
  "methods" : [ {
    "name" : "public static ScriptIntrinsicBlend create(RenderScript rs, Element e)",
    "returnType" : "ScriptIntrinsicBlend",
    "comment" : "\n     * Supported elements types are {@link Element#U8_4}\n     *\n     * @param rs The RenderScript context\n     * @param e Element type for inputs and outputs\n     *\n     * @return ScriptIntrinsicBlend\n     ",
    "links" : [ "Element#U8_4" ]
  }, {
    "name" : "private void blend(int id, Allocation ain, Allocation aout, Script.LaunchOptions opt)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void forEachClear(Allocation ain, Allocation aout)",
    "returnType" : "void",
    "comment" : "\n     * Sets dst = {0, 0, 0, 0}\n     *\n     * @param ain The source buffer\n     * @param aout The destination buffer\n     ",
    "links" : [ ]
  }, {
    "name" : "public void forEachClear(Allocation ain, Allocation aout, Script.LaunchOptions opt)",
    "returnType" : "void",
    "comment" : "\n     * Sets dst = {0, 0, 0, 0}\n     *\n     * @param ain The source buffer\n     * @param aout The destination buffer\n     * @param opt LaunchOptions for clipping\n     ",
    "links" : [ ]
  }, {
    "name" : "public Script.KernelID getKernelIDClear()",
    "returnType" : "Script.KernelID",
    "comment" : "\n     * Get a KernelID for the Clear kernel.\n     *\n     * @return Script.KernelID The KernelID object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void forEachSrc(Allocation ain, Allocation aout)",
    "returnType" : "void",
    "comment" : "\n     * Sets dst = src\n     *\n     * @param ain The source buffer\n     * @param aout The destination buffer\n     ",
    "links" : [ ]
  }, {
    "name" : "public void forEachSrc(Allocation ain, Allocation aout, Script.LaunchOptions opt)",
    "returnType" : "void",
    "comment" : "\n     * Sets dst = src\n     *\n     * @param ain The source buffer\n     * @param aout The destination buffer\n     * @param opt LaunchOptions for clipping\n     ",
    "links" : [ ]
  }, {
    "name" : "public Script.KernelID getKernelIDSrc()",
    "returnType" : "Script.KernelID",
    "comment" : "\n     * Get a KernelID for the Src kernel.\n     *\n     * @return Script.KernelID The KernelID object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void forEachDst(Allocation ain, Allocation aout)",
    "returnType" : "void",
    "comment" : "\n     * Sets dst = dst\n     *\n     * This is a NOP.\n     *\n     * @param ain The source buffer\n     * @param aout The destination buffer\n     ",
    "links" : [ ]
  }, {
    "name" : "public void forEachDst(Allocation ain, Allocation aout, Script.LaunchOptions opt)",
    "returnType" : "void",
    "comment" : "\n     * Sets dst = dst\n     *\n     * This is a NOP.\n     *\n     * @param ain The source buffer\n     * @param aout The destination buffer\n     * @param opt LaunchOptions for clipping\n     ",
    "links" : [ ]
  }, {
    "name" : "public Script.KernelID getKernelIDDst()",
    "returnType" : "Script.KernelID",
    "comment" : "\n     * Get a KernelID for the Dst kernel.\n     *\n     * @return Script.KernelID The KernelID object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void forEachSrcOver(Allocation ain, Allocation aout)",
    "returnType" : "void",
    "comment" : "\n     * Sets dst = src + dst * (1.0 - src.a)\n     *\n     * @param ain The source buffer\n     * @param aout The destination buffer\n     ",
    "links" : [ ]
  }, {
    "name" : "public void forEachSrcOver(Allocation ain, Allocation aout, Script.LaunchOptions opt)",
    "returnType" : "void",
    "comment" : "\n     * Sets dst = src + dst * (1.0 - src.a)\n     *\n     * @param ain The source buffer\n     * @param aout The destination buffer\n     * @param opt LaunchOptions for clipping\n     ",
    "links" : [ ]
  }, {
    "name" : "public Script.KernelID getKernelIDSrcOver()",
    "returnType" : "Script.KernelID",
    "comment" : "\n     * Get a KernelID for the SrcOver kernel.\n     *\n     * @return Script.KernelID The KernelID object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void forEachDstOver(Allocation ain, Allocation aout)",
    "returnType" : "void",
    "comment" : "\n     * Sets dst = dst + src * (1.0 - dst.a)\n     *\n     * @param ain The source buffer\n     * @param aout The destination buffer\n     ",
    "links" : [ ]
  }, {
    "name" : "public void forEachDstOver(Allocation ain, Allocation aout, Script.LaunchOptions opt)",
    "returnType" : "void",
    "comment" : "\n     * Sets dst = dst + src * (1.0 - dst.a)\n     *\n     * @param ain The source buffer\n     * @param aout The destination buffer\n     * @param opt LaunchOptions for clipping\n     ",
    "links" : [ ]
  }, {
    "name" : "public Script.KernelID getKernelIDDstOver()",
    "returnType" : "Script.KernelID",
    "comment" : "\n     * Get a KernelID for the DstOver kernel.\n     *\n     * @return Script.KernelID The KernelID object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void forEachSrcIn(Allocation ain, Allocation aout)",
    "returnType" : "void",
    "comment" : "\n     * Sets dst = src * dst.a\n     *\n     * @param ain The source buffer\n     * @param aout The destination buffer\n     ",
    "links" : [ ]
  }, {
    "name" : "public void forEachSrcIn(Allocation ain, Allocation aout, Script.LaunchOptions opt)",
    "returnType" : "void",
    "comment" : "\n     * Sets dst = src * dst.a\n     *\n     * @param ain The source buffer\n     * @param aout The destination buffer\n     * @param opt LaunchOptions for clipping\n     ",
    "links" : [ ]
  }, {
    "name" : "public Script.KernelID getKernelIDSrcIn()",
    "returnType" : "Script.KernelID",
    "comment" : "\n     * Get a KernelID for the SrcIn kernel.\n     *\n     * @return Script.KernelID The KernelID object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void forEachDstIn(Allocation ain, Allocation aout)",
    "returnType" : "void",
    "comment" : "\n     * Sets dst = dst * src.a\n     *\n     * @param ain The source buffer\n     * @param aout The destination buffer\n     ",
    "links" : [ ]
  }, {
    "name" : "public void forEachDstIn(Allocation ain, Allocation aout, Script.LaunchOptions opt)",
    "returnType" : "void",
    "comment" : "\n     * Sets dst = dst * src.a\n     *\n     * @param ain The source buffer\n     * @param aout The destination buffer\n     * @param opt LaunchOptions for clipping\n     ",
    "links" : [ ]
  }, {
    "name" : "public Script.KernelID getKernelIDDstIn()",
    "returnType" : "Script.KernelID",
    "comment" : "\n     * Get a KernelID for the DstIn kernel.\n     *\n     * @return Script.KernelID The KernelID object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void forEachSrcOut(Allocation ain, Allocation aout)",
    "returnType" : "void",
    "comment" : "\n     * Sets dst = src * (1.0 - dst.a)\n     *\n     * @param ain The source buffer\n     * @param aout The destination buffer\n     ",
    "links" : [ ]
  }, {
    "name" : "public void forEachSrcOut(Allocation ain, Allocation aout, Script.LaunchOptions opt)",
    "returnType" : "void",
    "comment" : "\n     * Sets dst = src * (1.0 - dst.a)\n     *\n     * @param ain The source buffer\n     * @param aout The destination buffer\n     * @param opt LaunchOptions for clipping\n     ",
    "links" : [ ]
  }, {
    "name" : "public Script.KernelID getKernelIDSrcOut()",
    "returnType" : "Script.KernelID",
    "comment" : "\n     * Get a KernelID for the SrcOut kernel.\n     *\n     * @return Script.KernelID The KernelID object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void forEachDstOut(Allocation ain, Allocation aout)",
    "returnType" : "void",
    "comment" : "\n     * Sets dst = dst * (1.0 - src.a)\n     *\n     * @param ain The source buffer\n     * @param aout The destination buffer\n     ",
    "links" : [ ]
  }, {
    "name" : "public void forEachDstOut(Allocation ain, Allocation aout, Script.LaunchOptions opt)",
    "returnType" : "void",
    "comment" : "\n     * Sets dst = dst * (1.0 - src.a)\n     *\n     * @param ain The source buffer\n     * @param aout The destination buffer\n     * @param opt LaunchOptions for clipping\n     ",
    "links" : [ ]
  }, {
    "name" : "public Script.KernelID getKernelIDDstOut()",
    "returnType" : "Script.KernelID",
    "comment" : "\n     * Get a KernelID for the DstOut kernel.\n     *\n     * @return Script.KernelID The KernelID object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void forEachSrcAtop(Allocation ain, Allocation aout)",
    "returnType" : "void",
    "comment" : "\n     * dst.rgb = src.rgb * dst.a + (1.0 - src.a) * dst.rgb\n     * dst.a = dst.a\n     *\n     * @param ain The source buffer\n     * @param aout The destination buffer\n     ",
    "links" : [ ]
  }, {
    "name" : "public void forEachSrcAtop(Allocation ain, Allocation aout, Script.LaunchOptions opt)",
    "returnType" : "void",
    "comment" : "\n     * dst.rgb = src.rgb * dst.a + (1.0 - src.a) * dst.rgb\n     * dst.a = dst.a\n     *\n     * @param ain The source buffer\n     * @param aout The destination buffer\n     * @param opt LaunchOptions for clipping\n     ",
    "links" : [ ]
  }, {
    "name" : "public Script.KernelID getKernelIDSrcAtop()",
    "returnType" : "Script.KernelID",
    "comment" : "\n     * Get a KernelID for the SrcAtop kernel.\n     *\n     * @return Script.KernelID The KernelID object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void forEachDstAtop(Allocation ain, Allocation aout)",
    "returnType" : "void",
    "comment" : "\n     * dst = dst.rgb * src.a + (1.0 - dst.a) * src.rgb\n     * dst.a = src.a\n     * Note: Before API 23, the alpha channel was not correctly set.\n     *       Please use with caution when targeting older APIs.\n     *\n     * @param ain The source buffer\n     * @param aout The destination buffer\n     ",
    "links" : [ ]
  }, {
    "name" : "public void forEachDstAtop(Allocation ain, Allocation aout, Script.LaunchOptions opt)",
    "returnType" : "void",
    "comment" : "\n     * dst = dst.rgb * src.a + (1.0 - dst.a) * src.rgb\n     * dst.a = src.a\n     * Note: Before API 23, the alpha channel was not correctly set.\n     *       Please use with caution when targeting older APIs.\n     *\n     * @param ain The source buffer\n     * @param aout The destination buffer\n     * @param opt LaunchOptions for clipping\n     ",
    "links" : [ ]
  }, {
    "name" : "public Script.KernelID getKernelIDDstAtop()",
    "returnType" : "Script.KernelID",
    "comment" : "\n     * Get a KernelID for the DstAtop kernel.\n     *\n     * @return Script.KernelID The KernelID object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void forEachXor(Allocation ain, Allocation aout)",
    "returnType" : "void",
    "comment" : "\n     * Sets dst = {src.r ^ dst.r, src.g ^ dst.g, src.b ^ dst.b, src.a ^ dst.a}\n     *\n     * @param ain The source buffer\n     * @param aout The destination buffer\n     ",
    "links" : [ ]
  }, {
    "name" : "public void forEachXor(Allocation ain, Allocation aout, Script.LaunchOptions opt)",
    "returnType" : "void",
    "comment" : "\n     * Sets dst = {src.r ^ dst.r, src.g ^ dst.g, src.b ^ dst.b, src.a ^ dst.a}\n     *\n     * <b>Note:</b> this is NOT the Porter/Duff XOR mode; this is a bitwise xor.\n     *\n     * @param ain The source buffer\n     * @param aout The destination buffer\n     * @param opt LaunchOptions for clipping\n     ",
    "links" : [ ]
  }, {
    "name" : "public Script.KernelID getKernelIDXor()",
    "returnType" : "Script.KernelID",
    "comment" : "\n     * Get a KernelID for the Xor kernel.\n     *\n     * @return Script.KernelID The KernelID object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void forEachMultiply(Allocation ain, Allocation aout)",
    "returnType" : "void",
    "comment" : "\n     * Sets dst = src * dst\n     *\n     * @param ain The source buffer\n     * @param aout The destination buffer\n     ",
    "links" : [ ]
  }, {
    "name" : "public void forEachMultiply(Allocation ain, Allocation aout, Script.LaunchOptions opt)",
    "returnType" : "void",
    "comment" : "\n     * Sets dst = src * dst\n     *\n     * @param ain The source buffer\n     * @param aout The destination buffer\n     * @param opt LaunchOptions for clipping\n     ",
    "links" : [ ]
  }, {
    "name" : "public Script.KernelID getKernelIDMultiply()",
    "returnType" : "Script.KernelID",
    "comment" : "\n     * Get a KernelID for the Multiply kernel.\n     *\n     * @return Script.KernelID The KernelID object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void forEachAdd(Allocation ain, Allocation aout)",
    "returnType" : "void",
    "comment" : "\n     * Sets dst = min(src + dst, 1.0)\n     *\n     * @param ain The source buffer\n     * @param aout The destination buffer\n     ",
    "links" : [ ]
  }, {
    "name" : "public void forEachAdd(Allocation ain, Allocation aout, Script.LaunchOptions opt)",
    "returnType" : "void",
    "comment" : "\n     * Sets dst = min(src + dst, 1.0)\n     *\n     * @param ain The source buffer\n     * @param aout The destination buffer\n     * @param opt LaunchOptions for clipping\n     ",
    "links" : [ ]
  }, {
    "name" : "public Script.KernelID getKernelIDAdd()",
    "returnType" : "Script.KernelID",
    "comment" : "\n     * Get a KernelID for the Add kernel.\n     *\n     * @return Script.KernelID The KernelID object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void forEachSubtract(Allocation ain, Allocation aout)",
    "returnType" : "void",
    "comment" : "\n     * Sets dst = max(dst - src, 0.0)\n     *\n     * @param ain The source buffer\n     * @param aout The destination buffer\n     ",
    "links" : [ ]
  }, {
    "name" : "public void forEachSubtract(Allocation ain, Allocation aout, Script.LaunchOptions opt)",
    "returnType" : "void",
    "comment" : "\n     * Sets dst = max(dst - src, 0.0)\n     *\n     * @param ain The source buffer\n     * @param aout The destination buffer\n     * @param opt LaunchOptions for clipping\n     ",
    "links" : [ ]
  }, {
    "name" : "public Script.KernelID getKernelIDSubtract()",
    "returnType" : "Script.KernelID",
    "comment" : "\n     * Get a KernelID for the Subtract kernel.\n     *\n     * @return Script.KernelID The KernelID object.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ ],
  "methodNames" : [ "public static ScriptIntrinsicBlend create(RenderScript rs, Element e)", "private void blend(int id, Allocation ain, Allocation aout, Script.LaunchOptions opt)", "public void forEachClear(Allocation ain, Allocation aout)", "public void forEachClear(Allocation ain, Allocation aout, Script.LaunchOptions opt)", "public Script.KernelID getKernelIDClear()", "public void forEachSrc(Allocation ain, Allocation aout)", "public void forEachSrc(Allocation ain, Allocation aout, Script.LaunchOptions opt)", "public Script.KernelID getKernelIDSrc()", "public void forEachDst(Allocation ain, Allocation aout)", "public void forEachDst(Allocation ain, Allocation aout, Script.LaunchOptions opt)", "public Script.KernelID getKernelIDDst()", "public void forEachSrcOver(Allocation ain, Allocation aout)", "public void forEachSrcOver(Allocation ain, Allocation aout, Script.LaunchOptions opt)", "public Script.KernelID getKernelIDSrcOver()", "public void forEachDstOver(Allocation ain, Allocation aout)", "public void forEachDstOver(Allocation ain, Allocation aout, Script.LaunchOptions opt)", "public Script.KernelID getKernelIDDstOver()", "public void forEachSrcIn(Allocation ain, Allocation aout)", "public void forEachSrcIn(Allocation ain, Allocation aout, Script.LaunchOptions opt)", "public Script.KernelID getKernelIDSrcIn()", "public void forEachDstIn(Allocation ain, Allocation aout)", "public void forEachDstIn(Allocation ain, Allocation aout, Script.LaunchOptions opt)", "public Script.KernelID getKernelIDDstIn()", "public void forEachSrcOut(Allocation ain, Allocation aout)", "public void forEachSrcOut(Allocation ain, Allocation aout, Script.LaunchOptions opt)", "public Script.KernelID getKernelIDSrcOut()", "public void forEachDstOut(Allocation ain, Allocation aout)", "public void forEachDstOut(Allocation ain, Allocation aout, Script.LaunchOptions opt)", "public Script.KernelID getKernelIDDstOut()", "public void forEachSrcAtop(Allocation ain, Allocation aout)", "public void forEachSrcAtop(Allocation ain, Allocation aout, Script.LaunchOptions opt)", "public Script.KernelID getKernelIDSrcAtop()", "public void forEachDstAtop(Allocation ain, Allocation aout)", "public void forEachDstAtop(Allocation ain, Allocation aout, Script.LaunchOptions opt)", "public Script.KernelID getKernelIDDstAtop()", "public void forEachXor(Allocation ain, Allocation aout)", "public void forEachXor(Allocation ain, Allocation aout, Script.LaunchOptions opt)", "public Script.KernelID getKernelIDXor()", "public void forEachMultiply(Allocation ain, Allocation aout)", "public void forEachMultiply(Allocation ain, Allocation aout, Script.LaunchOptions opt)", "public Script.KernelID getKernelIDMultiply()", "public void forEachAdd(Allocation ain, Allocation aout)", "public void forEachAdd(Allocation ain, Allocation aout, Script.LaunchOptions opt)", "public Script.KernelID getKernelIDAdd()", "public void forEachSubtract(Allocation ain, Allocation aout)", "public void forEachSubtract(Allocation ain, Allocation aout, Script.LaunchOptions opt)", "public Script.KernelID getKernelIDSubtract()" ]
}