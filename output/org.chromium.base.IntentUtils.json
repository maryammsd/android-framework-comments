{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/chromium/base/IntentUtils.java",
  "packageName" : "org.chromium.base",
  "className" : "IntentUtils",
  "comment" : " Utilities dealing with extracting information from intents and creating common intents. ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ANDROID_APP_REFERRER_SCHEME",
    "type" : "String",
    "comment" : " The scheme for referrer coming from an application. ",
    "links" : [ ]
  }, {
    "name" : "TRUSTED_APPLICATION_CODE_EXTRA",
    "type" : "String",
    "comment" : " Intent extra used to identify the sending application. ",
    "links" : [ ]
  }, {
    "name" : "sFakeComponentName",
    "type" : "ComponentName",
    "comment" : " Fake ComponentName used in constructing TRUSTED_APPLICATION_CODE_EXTRA. ",
    "links" : [ ]
  }, {
    "name" : "COMPONENT_NAME_LOCK",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sForceTrustedIntentForTesting",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static boolean safeHasExtra(Intent intent, String name)",
    "returnType" : "boolean",
    "comment" : " Just like {@link Intent#hasExtra(String)} but doesn't throw exceptions. ",
    "links" : [ "android.app.PendingIntent#hasExtra(String)" ]
  }, {
    "name" : "public static void safeRemoveExtra(Intent intent, String name)",
    "returnType" : "void",
    "comment" : " Just like {@link Intent#removeExtra(String)} but doesn't throw exceptions. ",
    "links" : [ "android.app.PendingIntent#removeExtra(String)" ]
  }, {
    "name" : "public static boolean safeGetBooleanExtra(Intent intent, String name, boolean defaultValue)",
    "returnType" : "boolean",
    "comment" : " Just like {@link Intent#getBooleanExtra(String, boolean)} but doesn't throw exceptions. ",
    "links" : [ "android.app.PendingIntent#getBooleanExtra(String" ]
  }, {
    "name" : "public static boolean safeGetBoolean(Bundle bundle, String name, boolean defaultValue)",
    "returnType" : "boolean",
    "comment" : " Just like {@link Bundle#getBoolean(String, boolean)} but doesn't throw exceptions. ",
    "links" : [ "android.os.Bundle#getBoolean(String" ]
  }, {
    "name" : "public static int safeGetIntExtra(Intent intent, String name, int defaultValue)",
    "returnType" : "int",
    "comment" : " Just like {@link Intent#getIntExtra(String, int)} but doesn't throw exceptions. ",
    "links" : [ "android.app.PendingIntent#getIntExtra(String" ]
  }, {
    "name" : "public static int safeGetInt(Bundle bundle, String name, int defaultValue)",
    "returnType" : "int",
    "comment" : " Just like {@link Bundle#getInt(String, int)} but doesn't throw exceptions. ",
    "links" : [ "android.os.Bundle#getInt(String" ]
  }, {
    "name" : "public static int[] safeGetIntArrayExtra(Intent intent, String name)",
    "returnType" : "int[]",
    "comment" : " Just like {@link Intent#getIntArrayExtra(String)} but doesn't throw exceptions. ",
    "links" : [ "android.app.PendingIntent#getIntArrayExtra(String)" ]
  }, {
    "name" : "public static int[] safeGetIntArray(Bundle bundle, String name)",
    "returnType" : "int[]",
    "comment" : " Just like {@link Bundle#getIntArray(String)} but doesn't throw exceptions. ",
    "links" : [ "android.os.Bundle#getIntArray(String)" ]
  }, {
    "name" : "public static float[] safeGetFloatArray(Bundle bundle, String name)",
    "returnType" : "float[]",
    "comment" : " Just like {@link Bundle#getFloatArray(String)} but doesn't throw exceptions. ",
    "links" : [ "android.os.Bundle#getFloatArray(String)" ]
  }, {
    "name" : "public static long safeGetLongExtra(Intent intent, String name, long defaultValue)",
    "returnType" : "long",
    "comment" : " Just like {@link Intent#getLongExtra(String, long)} but doesn't throw exceptions. ",
    "links" : [ "android.app.PendingIntent#getLongExtra(String" ]
  }, {
    "name" : "public static String safeGetStringExtra(Intent intent, String name)",
    "returnType" : "String",
    "comment" : " Just like {@link Intent#getStringExtra(String)} but doesn't throw exceptions. ",
    "links" : [ "android.app.PendingIntent#getStringExtra(String)" ]
  }, {
    "name" : "public static String safeGetString(Bundle bundle, String name)",
    "returnType" : "String",
    "comment" : " Just like {@link Bundle#getString(String)} but doesn't throw exceptions. ",
    "links" : [ "android.os.Bundle#getString(String)" ]
  }, {
    "name" : "public static Bundle safeGetBundleExtra(Intent intent, String name)",
    "returnType" : "Bundle",
    "comment" : " Just like {@link Intent#getBundleExtra(String)} but doesn't throw exceptions. ",
    "links" : [ "android.app.PendingIntent#getBundleExtra(String)" ]
  }, {
    "name" : "public static Bundle safeGetBundle(Bundle bundle, String name)",
    "returnType" : "Bundle",
    "comment" : " Just like {@link Bundle#getBundle(String)} but doesn't throw exceptions. ",
    "links" : [ "android.os.Bundle#getBundle(String)" ]
  }, {
    "name" : "public static T safeGetParcelable(Bundle bundle, String name)",
    "returnType" : "T",
    "comment" : " Just like {@link Bundle#getParcelable(String)} but doesn't throw exceptions. ",
    "links" : [ "android.os.Bundle#getParcelable(String)" ]
  }, {
    "name" : "public static T safeGetParcelableExtra(Intent intent, String name)",
    "returnType" : "T",
    "comment" : " Just like {@link Intent#getParcelableExtra(String)} but doesn't throw exceptions. ",
    "links" : [ "android.app.PendingIntent#getParcelableExtra(String)" ]
  }, {
    "name" : "public static ArrayList<T> getParcelableArrayListExtra(Intent intent, String name)",
    "returnType" : "ArrayList<T>",
    "comment" : "\n     * Just link {@link Intent#getParcelableArrayListExtra(String)} but doesn't throw exceptions.\n     ",
    "links" : [ "android.app.PendingIntent#getParcelableArrayListExtra(String)" ]
  }, {
    "name" : "public static ArrayList<T> safeGetParcelableArrayList(Bundle bundle, String name)",
    "returnType" : "ArrayList<T>",
    "comment" : " Just link {@link Bundle#getParcelableArrayList(String)} but doesn't throw exceptions. ",
    "links" : [ "android.os.Bundle#getParcelableArrayList(String)" ]
  }, {
    "name" : "public static Parcelable[] safeGetParcelableArrayExtra(Intent intent, String name)",
    "returnType" : "Parcelable[]",
    "comment" : " Just like {@link Intent#getParcelableArrayExtra(String)} but doesn't throw exceptions. ",
    "links" : [ "android.app.PendingIntent#getParcelableArrayExtra(String)" ]
  }, {
    "name" : "public static ArrayList<String> safeGetStringArrayListExtra(Intent intent, String name)",
    "returnType" : "ArrayList<String>",
    "comment" : " Just like {@link Intent#getStringArrayListExtra(String)} but doesn't throw exceptions. ",
    "links" : [ "android.app.PendingIntent#getStringArrayListExtra(String)" ]
  }, {
    "name" : "public static byte[] safeGetByteArrayExtra(Intent intent, String name)",
    "returnType" : "byte[]",
    "comment" : " Just like {@link Intent#getByteArrayExtra(String)} but doesn't throw exceptions. ",
    "links" : [ "android.app.PendingIntent#getByteArrayExtra(String)" ]
  }, {
    "name" : "public static T safeGetSerializableExtra(Intent intent, String name)",
    "returnType" : "T",
    "comment" : " Just like {@link Intent#getSerializableExtra(String)} but doesn't throw exceptions. ",
    "links" : [ "android.app.PendingIntent#getSerializableExtra(String)" ]
  }, {
    "name" : "public static IBinder safeGetBinder(Bundle bundle, String name)",
    "returnType" : "IBinder",
    "comment" : "\n     * Returns the value associated with the given name, or null if no mapping of the desired type\n     * exists for the given name or a null value is explicitly associated with the name.\n     *\n     * @param name a key string\n     * @return an IBinder value, or null\n     ",
    "links" : [ ]
  }, {
    "name" : "public static IBinder safeGetBinderExtra(Intent intent, String name)",
    "returnType" : "IBinder",
    "comment" : "\n     * @return a Binder from an Intent, or null.\n     *\n     * Creates a temporary copy of the extra Bundle, which is required as\n     * Intent#getBinderExtra() doesn't exist, but Bundle.getBinder() does.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void safePutBinderExtra(Intent intent, String name, IBinder binder)",
    "returnType" : "void",
    "comment" : "\n     * Inserts a {@link Binder} value into an Intent as an extra.\n     *\n     * @param intent Intent to put the binder into.\n     * @param name Key.\n     * @param binder Binder object.\n     ",
    "links" : [ "android.os.Binder" ]
  }, {
    "name" : "public static boolean safeStartActivity(Context context, Intent intent)",
    "returnType" : "boolean",
    "comment" : " See {@link #safeStartActivity(Context, Intent, Bundle)}. ",
    "links" : [ "#safeStartActivity(Context" ]
  }, {
    "name" : "public static boolean safeStartActivity(Context context, Intent intent, @Nullable Bundle bundle)",
    "returnType" : "boolean",
    "comment" : "\n     * Catches any failures to start an Activity.\n     * @param context Context to use when starting the Activity.\n     * @param intent  Intent to fire.\n     * @param bundle  Bundle of launch options.\n     * @return Whether or not Android accepted the Intent.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isIntentForNewTaskOrNewDocument(Intent intent)",
    "returnType" : "boolean",
    "comment" : " Returns whether the intent starts an activity in a new task or a new document. ",
    "links" : [ ]
  }, {
    "name" : "public static int getParceledIntentSize(Intent intent)",
    "returnType" : "int",
    "comment" : "\n     * Returns how large the Intent will be in Parcel form, which is helpful for gauging whether\n     * Android will deliver the Intent instead of throwing a TransactionTooLargeException.\n     *\n     * @param intent Intent to get the size of.\n     * @return Number of bytes required to parcel the Intent.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void logTransactionTooLargeOrRethrow(RuntimeException e, Intent intent)",
    "returnType" : "void",
    "comment" : "\n     * Given an exception, check whether it wrapped a {@link TransactionTooLargeException}.  If it\n     * does, then log the underlying error.  If not, throw the original exception again.\n     *\n     * @param e      The caught RuntimeException.\n     * @param intent The intent that triggered the RuntimeException to be thrown.\n     ",
    "links" : [ "android.os.TransactionTooLargeException" ]
  }, {
    "name" : "private static Intent logInvalidIntent(Intent intent, Exception e)",
    "returnType" : "Intent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static Intent sanitizeIntent(final Intent incomingIntent)",
    "returnType" : "Intent",
    "comment" : "\n     * Sanitizes an intent. In case the intent cannot be unparcelled, all extras will be removed to\n     * make it safe to use.\n     * @return A safe to use version of this intent.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isMainIntentFromLauncher(Intent intent)",
    "returnType" : "boolean",
    "comment" : "\n     * @return True if the intent is a MAIN intent a launcher would send.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getPendingIntentMutabilityFlag(boolean mutable)",
    "returnType" : "int",
    "comment" : "\n     * Gets the PendingIntent flag for the specified mutability.\n     * PendingIntent.FLAG_IMMUTABLE was added in API level 23 (M), and FLAG_MUTABLE was added in\n     * Android S.\n     *\n     * Unless mutability is required, PendingIntents should always be marked as Immutable as this\n     * is the more secure default.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean intentTargetsSelf(Context context, Intent intent)",
    "returnType" : "boolean",
    "comment" : "\n     * Determines whether this app is the only possible handler for this Intent.\n     *\n     * @param context Any context for this app.\n     * @param intent The intent to check.\n     * @return True if the intent targets this app.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static ComponentName getFakeComponentName(String packageName)",
    "returnType" : "ComponentName",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static PendingIntent getAuthenticationToken()",
    "returnType" : "PendingIntent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void addTrustedIntentExtras(Intent intent)",
    "returnType" : "void",
    "comment" : "\n     * Sets TRUSTED_APPLICATION_CODE_EXTRA on the provided intent to identify it as coming from\n     * a trusted source.\n     *\n     * @param intent An Intent that targets either current package, or explicitly targets a\n     *         component of the current package.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isTrustedIntentFromSelf(@Nullable Intent intent)",
    "returnType" : "boolean",
    "comment" : "\n     * @param intent An Intent to be checked.\n     * @return Whether an intent originates from the current app.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setForceIsTrustedIntentForTesting(boolean isTrusted)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static boolean safeHasExtra(Intent intent, String name)", "public static void safeRemoveExtra(Intent intent, String name)", "public static boolean safeGetBooleanExtra(Intent intent, String name, boolean defaultValue)", "public static boolean safeGetBoolean(Bundle bundle, String name, boolean defaultValue)", "public static int safeGetIntExtra(Intent intent, String name, int defaultValue)", "public static int safeGetInt(Bundle bundle, String name, int defaultValue)", "public static int[] safeGetIntArrayExtra(Intent intent, String name)", "public static int[] safeGetIntArray(Bundle bundle, String name)", "public static float[] safeGetFloatArray(Bundle bundle, String name)", "public static long safeGetLongExtra(Intent intent, String name, long defaultValue)", "public static String safeGetStringExtra(Intent intent, String name)", "public static String safeGetString(Bundle bundle, String name)", "public static Bundle safeGetBundleExtra(Intent intent, String name)", "public static Bundle safeGetBundle(Bundle bundle, String name)", "public static T safeGetParcelable(Bundle bundle, String name)", "public static T safeGetParcelableExtra(Intent intent, String name)", "public static ArrayList<T> getParcelableArrayListExtra(Intent intent, String name)", "public static ArrayList<T> safeGetParcelableArrayList(Bundle bundle, String name)", "public static Parcelable[] safeGetParcelableArrayExtra(Intent intent, String name)", "public static ArrayList<String> safeGetStringArrayListExtra(Intent intent, String name)", "public static byte[] safeGetByteArrayExtra(Intent intent, String name)", "public static T safeGetSerializableExtra(Intent intent, String name)", "public static IBinder safeGetBinder(Bundle bundle, String name)", "public static IBinder safeGetBinderExtra(Intent intent, String name)", "public static void safePutBinderExtra(Intent intent, String name, IBinder binder)", "public static boolean safeStartActivity(Context context, Intent intent)", "public static boolean safeStartActivity(Context context, Intent intent, @Nullable Bundle bundle)", "public static boolean isIntentForNewTaskOrNewDocument(Intent intent)", "public static int getParceledIntentSize(Intent intent)", "public static void logTransactionTooLargeOrRethrow(RuntimeException e, Intent intent)", "private static Intent logInvalidIntent(Intent intent, Exception e)", "public static Intent sanitizeIntent(final Intent incomingIntent)", "public static boolean isMainIntentFromLauncher(Intent intent)", "public static int getPendingIntentMutabilityFlag(boolean mutable)", "public static boolean intentTargetsSelf(Context context, Intent intent)", "private static ComponentName getFakeComponentName(String packageName)", "private static PendingIntent getAuthenticationToken()", "public static void addTrustedIntentExtras(Intent intent)", "public static boolean isTrustedIntentFromSelf(@Nullable Intent intent)", "public static void setForceIsTrustedIntentForTesting(boolean isTrusted)" ],
  "variableNames" : [ "TAG", "ANDROID_APP_REFERRER_SCHEME", "TRUSTED_APPLICATION_CODE_EXTRA", "sFakeComponentName", "COMPONENT_NAME_LOCK", "sForceTrustedIntentForTesting" ]
}