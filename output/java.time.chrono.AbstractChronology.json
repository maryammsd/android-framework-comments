{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/time/chrono/AbstractChronology.java",
  "packageName" : "java.time.chrono",
  "className" : "AbstractChronology",
  "comment" : "\n * An abstract implementation of a calendar system, used to organize and identify dates.\n * <p>\n * The main date and time API is built on the ISO calendar system.\n * The chronology operates behind the scenes to represent the general concept of a calendar system.\n * <p>\n * See {@link Chronology} for more details.\n *\n * @implSpec\n * This class is separated from the {@code Chronology} interface so that the static methods\n * are not inherited. While {@code Chronology} can be implemented directly, it is strongly\n * recommended to extend this abstract class instead.\n * <p>\n * This class must be implemented with care to ensure other classes operate correctly.\n * All implementations that can be instantiated must be final, immutable and thread-safe.\n * Subclasses should be Serializable wherever possible.\n *\n * @since 1.8\n ",
  "links" : [ "java.time.chrono.Chronology" ],
  "variables" : [ {
    "name" : "CHRONOS_BY_ID",
    "type" : "ConcurrentHashMap<String, Chronology>",
    "comment" : "\n     * Map of available calendars by ID.\n     ",
    "links" : [ ]
  }, {
    "name" : "CHRONOS_BY_TYPE",
    "type" : "ConcurrentHashMap<String, Chronology>",
    "comment" : "\n     * Map of available calendars by calendar type.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " static Chronology registerChrono(Chronology chrono)",
    "returnType" : "Chronology",
    "comment" : "\n     * Register a Chronology by its ID and type for lookup by {@link #of(String)}.\n     * Chronologies must not be registered until they are completely constructed.\n     * Specifically, not in the constructor of Chronology.\n     *\n     * @param chrono the chronology to register; not null\n     * @return the already registered Chronology if any, may be null\n     ",
    "links" : [ "#of(String)" ]
  }, {
    "name" : " static Chronology registerChrono(Chronology chrono, String id)",
    "returnType" : "Chronology",
    "comment" : "\n     * Register a Chronology by ID and type for lookup by {@link #of(String)}.\n     * Chronos must not be registered until they are completely constructed.\n     * Specifically, not in the constructor of Chronology.\n     *\n     * @param chrono the chronology to register; not null\n     * @param id the ID to register the chronology; not null\n     * @return the already registered Chronology if any, may be null\n     ",
    "links" : [ "#of(String)" ]
  }, {
    "name" : "private static boolean initCache()",
    "returnType" : "boolean",
    "comment" : "\n     * Initialization of the maps from id and type to Chronology.\n     * The ServiceLoader is used to find and register any implementations\n     * of {@link java.time.chrono.AbstractChronology} found in the bootclass loader.\n     * The built-in chronologies are registered explicitly.\n     * Calendars configured via the Thread's context classloader are local\n     * to that thread and are ignored.\n     * <p>\n     * The initialization is done only once using the registration\n     * of the IsoChronology as the test and the final step.\n     * Multiple threads may perform the initialization concurrently.\n     * Only the first registration of each Chronology is retained by the\n     * ConcurrentHashMap.\n     * @return true if the cache was initialized\n     ",
    "links" : [ "java.time.chrono.AbstractChronology" ]
  }, {
    "name" : " static Chronology ofLocale(Locale locale)",
    "returnType" : "Chronology",
    "comment" : "\n     * Obtains an instance of {@code Chronology} from a locale.\n     * <p>\n     * See {@link Chronology#ofLocale(Locale)}.\n     *\n     * @param locale  the locale to use to obtain the calendar system, not null\n     * @return the calendar system associated with the locale, not null\n     * @throws java.time.DateTimeException if the locale-specified calendar cannot be found\n     ",
    "links" : [ "java.time.chrono.Chronology#ofLocale(Locale)" ]
  }, {
    "name" : " static Chronology of(String id)",
    "returnType" : "Chronology",
    "comment" : "\n     * Obtains an instance of {@code Chronology} from a chronology ID or\n     * calendar system type.\n     * <p>\n     * See {@link Chronology#of(String)}.\n     *\n     * @param id  the chronology ID or calendar system type, not null\n     * @return the chronology with the identifier requested, not null\n     * @throws java.time.DateTimeException if the chronology cannot be found\n     ",
    "links" : [ "java.time.chrono.Chronology#of(String)" ]
  }, {
    "name" : "private static Chronology of0(String id)",
    "returnType" : "Chronology",
    "comment" : "\n     * Obtains an instance of {@code Chronology} from a chronology ID or\n     * calendar system type.\n     *\n     * @param id  the chronology ID or calendar system type, not null\n     * @return the chronology with the identifier requested, or {@code null} if not found\n     ",
    "links" : [ ]
  }, {
    "name" : " static Set<Chronology> getAvailableChronologies()",
    "returnType" : "Set<Chronology>",
    "comment" : "\n     * Returns the available chronologies.\n     * <p>\n     * Each returned {@code Chronology} is available for use in the system.\n     * The set of chronologies includes the system chronologies and\n     * any chronologies provided by the application via ServiceLoader\n     * configuration.\n     *\n     * @return the independent, modifiable set of the available chronology IDs, not null\n     ",
    "links" : [ ]
  }, {
    "name" : "public ChronoLocalDate resolveDate(Map<TemporalField, Long> fieldValues, ResolverStyle resolverStyle)",
    "returnType" : "ChronoLocalDate",
    "comment" : "\n     * Resolves parsed {@code ChronoField} values into a date during parsing.\n     * <p>\n     * Most {@code TemporalField} implementations are resolved using the\n     * resolve method on the field. By contrast, the {@code ChronoField} class\n     * defines fields that only have meaning relative to the chronology.\n     * As such, {@code ChronoField} date fields are resolved here in the\n     * context of a specific chronology.\n     * <p>\n     * {@code ChronoField} instances are resolved by this method, which may\n     * be overridden in subclasses.\n     * <ul>\n     * <li>{@code EPOCH_DAY} - If present, this is converted to a date and\n     *  all other date fields are then cross-checked against the date.\n     * <li>{@code PROLEPTIC_MONTH} - If present, then it is split into the\n     *  {@code YEAR} and {@code MONTH_OF_YEAR}. If the mode is strict or smart\n     *  then the field is validated.\n     * <li>{@code YEAR_OF_ERA} and {@code ERA} - If both are present, then they\n     *  are combined to form a {@code YEAR}. In lenient mode, the {@code YEAR_OF_ERA}\n     *  range is not validated, in smart and strict mode it is. The {@code ERA} is\n     *  validated for range in all three modes. If only the {@code YEAR_OF_ERA} is\n     *  present, and the mode is smart or lenient, then the last available era\n     *  is assumed. In strict mode, no era is assumed and the {@code YEAR_OF_ERA} is\n     *  left untouched. If only the {@code ERA} is present, then it is left untouched.\n     * <li>{@code YEAR}, {@code MONTH_OF_YEAR} and {@code DAY_OF_MONTH} -\n     *  If all three are present, then they are combined to form a date.\n     *  In all three modes, the {@code YEAR} is validated.\n     *  If the mode is smart or strict, then the month and day are validated.\n     *  If the mode is lenient, then the date is combined in a manner equivalent to\n     *  creating a date on the first day of the first month in the requested year,\n     *  then adding the difference in months, then the difference in days.\n     *  If the mode is smart, and the day-of-month is greater than the maximum for\n     *  the year-month, then the day-of-month is adjusted to the last day-of-month.\n     *  If the mode is strict, then the three fields must form a valid date.\n     * <li>{@code YEAR} and {@code DAY_OF_YEAR} -\n     *  If both are present, then they are combined to form a date.\n     *  In all three modes, the {@code YEAR} is validated.\n     *  If the mode is lenient, then the date is combined in a manner equivalent to\n     *  creating a date on the first day of the requested year, then adding\n     *  the difference in days.\n     *  If the mode is smart or strict, then the two fields must form a valid date.\n     * <li>{@code YEAR}, {@code MONTH_OF_YEAR}, {@code ALIGNED_WEEK_OF_MONTH} and\n     *  {@code ALIGNED_DAY_OF_WEEK_IN_MONTH} -\n     *  If all four are present, then they are combined to form a date.\n     *  In all three modes, the {@code YEAR} is validated.\n     *  If the mode is lenient, then the date is combined in a manner equivalent to\n     *  creating a date on the first day of the first month in the requested year, then adding\n     *  the difference in months, then the difference in weeks, then in days.\n     *  If the mode is smart or strict, then the all four fields are validated to\n     *  their outer ranges. The date is then combined in a manner equivalent to\n     *  creating a date on the first day of the requested year and month, then adding\n     *  the amount in weeks and days to reach their values. If the mode is strict,\n     *  the date is additionally validated to check that the day and week adjustment\n     *  did not change the month.\n     * <li>{@code YEAR}, {@code MONTH_OF_YEAR}, {@code ALIGNED_WEEK_OF_MONTH} and\n     *  {@code DAY_OF_WEEK} - If all four are present, then they are combined to\n     *  form a date. The approach is the same as described above for\n     *  years, months and weeks in {@code ALIGNED_DAY_OF_WEEK_IN_MONTH}.\n     *  The day-of-week is adjusted as the next or same matching day-of-week once\n     *  the years, months and weeks have been handled.\n     * <li>{@code YEAR}, {@code ALIGNED_WEEK_OF_YEAR} and {@code ALIGNED_DAY_OF_WEEK_IN_YEAR} -\n     *  If all three are present, then they are combined to form a date.\n     *  In all three modes, the {@code YEAR} is validated.\n     *  If the mode is lenient, then the date is combined in a manner equivalent to\n     *  creating a date on the first day of the requested year, then adding\n     *  the difference in weeks, then in days.\n     *  If the mode is smart or strict, then the all three fields are validated to\n     *  their outer ranges. The date is then combined in a manner equivalent to\n     *  creating a date on the first day of the requested year, then adding\n     *  the amount in weeks and days to reach their values. If the mode is strict,\n     *  the date is additionally validated to check that the day and week adjustment\n     *  did not change the year.\n     * <li>{@code YEAR}, {@code ALIGNED_WEEK_OF_YEAR} and {@code DAY_OF_WEEK} -\n     *  If all three are present, then they are combined to form a date.\n     *  The approach is the same as described above for years and weeks in\n     *  {@code ALIGNED_DAY_OF_WEEK_IN_YEAR}. The day-of-week is adjusted as the\n     *  next or same matching day-of-week once the years and weeks have been handled.\n     * </ul>\n     * <p>\n     * The default implementation is suitable for most calendar systems.\n     * If {@link java.time.temporal.ChronoField#YEAR_OF_ERA} is found without an {@link java.time.temporal.ChronoField#ERA}\n     * then the last era in {@link #eras()} is used.\n     * The implementation assumes a 7 day week, that the first day-of-month\n     * has the value 1, that first day-of-year has the value 1, and that the\n     * first of the month and year always exists.\n     *\n     * @param fieldValues  the map of fields to values, which can be updated, not null\n     * @param resolverStyle  the requested type of resolve, not null\n     * @return the resolved date, null if insufficient information to create a date\n     * @throws java.time.DateTimeException if the date cannot be resolved, typically\n     *  because of a conflict in the input data\n     ",
    "links" : [ "#eras()", "java.time.temporal.ChronoField#ERA", "java.time.temporal.ChronoField#YEAR_OF_ERA" ]
  }, {
    "name" : " void resolveProlepticMonth(Map<TemporalField, Long> fieldValues, ResolverStyle resolverStyle)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " ChronoLocalDate resolveYearOfEra(Map<TemporalField, Long> fieldValues, ResolverStyle resolverStyle)",
    "returnType" : "ChronoLocalDate",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " ChronoLocalDate resolveYMD(Map<TemporalField, Long> fieldValues, ResolverStyle resolverStyle)",
    "returnType" : "ChronoLocalDate",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " ChronoLocalDate resolveYD(Map<TemporalField, Long> fieldValues, ResolverStyle resolverStyle)",
    "returnType" : "ChronoLocalDate",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " ChronoLocalDate resolveYMAA(Map<TemporalField, Long> fieldValues, ResolverStyle resolverStyle)",
    "returnType" : "ChronoLocalDate",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " ChronoLocalDate resolveYMAD(Map<TemporalField, Long> fieldValues, ResolverStyle resolverStyle)",
    "returnType" : "ChronoLocalDate",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " ChronoLocalDate resolveYAA(Map<TemporalField, Long> fieldValues, ResolverStyle resolverStyle)",
    "returnType" : "ChronoLocalDate",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " ChronoLocalDate resolveYAD(Map<TemporalField, Long> fieldValues, ResolverStyle resolverStyle)",
    "returnType" : "ChronoLocalDate",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " ChronoLocalDate resolveAligned(ChronoLocalDate base, long months, long weeks, long dow)",
    "returnType" : "ChronoLocalDate",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void addFieldValue(Map<TemporalField, Long> fieldValues, ChronoField field, long value)",
    "returnType" : "void",
    "comment" : "\n     * Adds a field-value pair to the map, checking for conflicts.\n     * <p>\n     * If the field is not already present, then the field-value pair is added to the map.\n     * If the field is already present and it has the same value as that specified, no action occurs.\n     * If the field is already present and it has a different value to that specified, then\n     * an exception is thrown.\n     *\n     * @param field  the field to add, not null\n     * @param value  the value to add, not null\n     * @throws java.time.DateTimeException if the field is already present with a different value\n     ",
    "links" : [ ]
  }, {
    "name" : "public int compareTo(Chronology other)",
    "returnType" : "int",
    "comment" : "\n     * Compares this chronology to another chronology.\n     * <p>\n     * The comparison order first by the chronology ID string, then by any\n     * additional information specific to the subclass.\n     * It is \"consistent with equals\", as defined by {@link Comparable}.\n     *\n     * @implSpec\n     * This implementation compares the chronology ID.\n     * Subclasses must compare any additional state that they store.\n     *\n     * @param other  the other chronology to compare to, not null\n     * @return the comparator value, negative if less, positive if greater\n     ",
    "links" : [ "Comparable" ]
  }, {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if this chronology is equal to another chronology.\n     * <p>\n     * The comparison is based on the entire state of the object.\n     *\n     * @implSpec\n     * This implementation checks the type and calls\n     * {@link #compareTo(java.time.chrono.Chronology)}.\n     *\n     * @param obj  the object to check, null returns false\n     * @return true if this is equal to the other chronology\n     ",
    "links" : [ "#compareTo(java.time.chrono.Chronology)" ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * A hash code for this chronology.\n     * <p>\n     * The hash code should be based on the entire state of the object.\n     *\n     * @implSpec\n     * This implementation is based on the chronology ID and class.\n     * Subclasses should add any additional state that they store.\n     *\n     * @return a suitable hash code\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Outputs this chronology as a {@code String}, using the chronology ID.\n     *\n     * @return a string representation of this chronology, not null\n     ",
    "links" : [ ]
  }, {
    "name" : " Object writeReplace()",
    "returnType" : "Object",
    "comment" : "\n     * Writes the Chronology using a\n     * <a href=\"{@docRoot}/serialized-form.html#java.time.chrono.Ser\">dedicated serialized form</a>.\n     * <pre>\n     *  out.writeByte(1);  // identifies this as a Chronology\n     *  out.writeUTF(getId());\n     * </pre>\n     *\n     * @return the instance of {@code Ser}, not null\n     ",
    "links" : [ ]
  }, {
    "name" : "private void readObject(ObjectInputStream s) throws ObjectStreamException",
    "returnType" : "void",
    "comment" : "\n     * Defend against malicious streams.\n     *\n     * @param s the stream to read\n     * @throws java.io.InvalidObjectException always\n     ",
    "links" : [ ]
  }, {
    "name" : " void writeExternal(DataOutput out) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static Chronology readExternal(DataInput in) throws IOException",
    "returnType" : "Chronology",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ " static Chronology registerChrono(Chronology chrono)", " static Chronology registerChrono(Chronology chrono, String id)", "private static boolean initCache()", " static Chronology ofLocale(Locale locale)", " static Chronology of(String id)", "private static Chronology of0(String id)", " static Set<Chronology> getAvailableChronologies()", "public ChronoLocalDate resolveDate(Map<TemporalField, Long> fieldValues, ResolverStyle resolverStyle)", " void resolveProlepticMonth(Map<TemporalField, Long> fieldValues, ResolverStyle resolverStyle)", " ChronoLocalDate resolveYearOfEra(Map<TemporalField, Long> fieldValues, ResolverStyle resolverStyle)", " ChronoLocalDate resolveYMD(Map<TemporalField, Long> fieldValues, ResolverStyle resolverStyle)", " ChronoLocalDate resolveYD(Map<TemporalField, Long> fieldValues, ResolverStyle resolverStyle)", " ChronoLocalDate resolveYMAA(Map<TemporalField, Long> fieldValues, ResolverStyle resolverStyle)", " ChronoLocalDate resolveYMAD(Map<TemporalField, Long> fieldValues, ResolverStyle resolverStyle)", " ChronoLocalDate resolveYAA(Map<TemporalField, Long> fieldValues, ResolverStyle resolverStyle)", " ChronoLocalDate resolveYAD(Map<TemporalField, Long> fieldValues, ResolverStyle resolverStyle)", " ChronoLocalDate resolveAligned(ChronoLocalDate base, long months, long weeks, long dow)", " void addFieldValue(Map<TemporalField, Long> fieldValues, ChronoField field, long value)", "public int compareTo(Chronology other)", "public boolean equals(Object obj)", "public int hashCode()", "public String toString()", " Object writeReplace()", "private void readObject(ObjectInputStream s) throws ObjectStreamException", " void writeExternal(DataOutput out) throws IOException", " static Chronology readExternal(DataInput in) throws IOException" ],
  "variableNames" : [ "CHRONOS_BY_ID", "CHRONOS_BY_TYPE" ]
}