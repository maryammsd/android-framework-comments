{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/concurrent/BlockingDeque.java",
  "packageName" : "java.util.concurrent",
  "className" : "BlockingDeque",
  "comment" : "\n * A {@link Deque} that additionally supports blocking operations that wait\n * for the deque to become non-empty when retrieving an element, and wait for\n * space to become available in the deque when storing an element.\n *\n * <p>{@code BlockingDeque} methods come in four forms, with different ways\n * of handling operations that cannot be satisfied immediately, but may be\n * satisfied at some point in the future:\n * one throws an exception, the second returns a special value (either\n * {@code null} or {@code false}, depending on the operation), the third\n * blocks the current thread indefinitely until the operation can succeed,\n * and the fourth blocks for only a given maximum time limit before giving\n * up.  These methods are summarized in the following table:\n *\n * <table class=\"plain\">\n * <caption>Summary of BlockingDeque methods</caption>\n *  <tr>\n *    <th id=\"First\" colspan=\"5\"> First Element (Head)</th>\n *  </tr>\n *  <tr>\n *    <td></td>\n *    <th id=\"FThrow\" style=\"font-weight:normal; font-style: italic\">Throws exception</th>\n *    <th id=\"FValue\" style=\"font-weight:normal; font-style: italic\">Special value</th>\n *    <th id=\"FBlock\" style=\"font-weight:normal; font-style: italic\">Blocks</th>\n *    <th id=\"FTimes\" style=\"font-weight:normal; font-style: italic\">Times out</th>\n *  </tr>\n *  <tr>\n *    <th id=\"FInsert\" style=\"text-align:left\">Insert</th>\n *    <td headers=\"First FInsert FThrow\">{@link #addFirst(Object) addFirst(e)}</td>\n *    <td headers=\"First FInsert FValue\">{@link #offerFirst(Object) offerFirst(e)}</td>\n *    <td headers=\"First FInsert FBlock\">{@link #putFirst(Object) putFirst(e)}</td>\n *    <td headers=\"First FInsert FTimes\">{@link #offerFirst(Object, long, TimeUnit) offerFirst(e, time, unit)}</td>\n *  </tr>\n *  <tr>\n *    <th id=\"FRemove\" style=\"text-align:left\">Remove</th>\n *    <td headers=\"First FRemove FThrow\">{@link #removeFirst() removeFirst()}</td>\n *    <td headers=\"First FRemove FValue\">{@link #pollFirst() pollFirst()}</td>\n *    <td headers=\"First FRemove FBlock\">{@link #takeFirst() takeFirst()}</td>\n *    <td headers=\"First FRemove FTimes\">{@link #pollFirst(long, TimeUnit) pollFirst(time, unit)}</td>\n *  </tr>\n *  <tr>\n *    <th id=\"FExamine\" style=\"text-align:left\">Examine</th>\n *    <td headers=\"First FExamine FThrow\">{@link #getFirst() getFirst()}</td>\n *    <td headers=\"First FExamine FValue\">{@link #peekFirst() peekFirst()}</td>\n *    <td headers=\"First FExamine FBlock\" style=\"font-style:italic\">not applicable</td>\n *    <td headers=\"First FExamine FTimes\" style=\"font-style:italic\">not applicable</td>\n *  </tr>\n *  <tr>\n *    <th id=\"Last\" colspan=\"5\"> Last Element (Tail)</th>\n *  </tr>\n *  <tr>\n *    <td></td>\n *    <th id=\"LThrow\" style=\"font-weight:normal; font-style: italic\">Throws exception</th>\n *    <th id=\"LValue\" style=\"font-weight:normal; font-style: italic\">Special value</th>\n *    <th id=\"LBlock\" style=\"font-weight:normal; font-style: italic\">Blocks</th>\n *    <th id=\"LTimes\" style=\"font-weight:normal; font-style: italic\">Times out</th>\n *  </tr>\n *  <tr>\n *    <th id=\"LInsert\" style=\"text-align:left\">Insert</th>\n *    <td headers=\"Last LInsert LThrow\">{@link #addLast(Object) addLast(e)}</td>\n *    <td headers=\"Last LInsert LValue\">{@link #offerLast(Object) offerLast(e)}</td>\n *    <td headers=\"Last LInsert LBlock\">{@link #putLast(Object) putLast(e)}</td>\n *    <td headers=\"Last LInsert LTimes\">{@link #offerLast(Object, long, TimeUnit) offerLast(e, time, unit)}</td>\n *  </tr>\n *  <tr>\n *    <th id=\"LRemove\" style=\"text-align:left\">Remove</th>\n *    <td headers=\"Last LRemove LThrow\">{@link #removeLast() removeLast()}</td>\n *    <td headers=\"Last LRemove LValue\">{@link #pollLast() pollLast()}</td>\n *    <td headers=\"Last LRemove LBlock\">{@link #takeLast() takeLast()}</td>\n *    <td headers=\"Last LRemove LTimes\">{@link #pollLast(long, TimeUnit) pollLast(time, unit)}</td>\n *  </tr>\n *  <tr>\n *    <th id=\"LExamine\" style=\"text-align:left\">Examine</th>\n *    <td headers=\"Last LExamine LThrow\">{@link #getLast() getLast()}</td>\n *    <td headers=\"Last LExamine LValue\">{@link #peekLast() peekLast()}</td>\n *    <td headers=\"Last LExamine LBlock\" style=\"font-style:italic\">not applicable</td>\n *    <td headers=\"Last LExamine LTimes\" style=\"font-style:italic\">not applicable</td>\n *  </tr>\n * </table>\n *\n * <p>Like any {@link BlockingQueue}, a {@code BlockingDeque} is thread safe,\n * does not permit null elements, and may (or may not) be\n * capacity-constrained.\n *\n * <p>A {@code BlockingDeque} implementation may be used directly as a FIFO\n * {@code BlockingQueue}. The methods inherited from the\n * {@code BlockingQueue} interface are precisely equivalent to\n * {@code BlockingDeque} methods as indicated in the following table:\n *\n * <table class=\"plain\">\n * <caption>Comparison of BlockingQueue and BlockingDeque methods</caption>\n *  <tr>\n *    <td></td>\n *    <th id=\"BQueue\"> {@code BlockingQueue} Method</th>\n *    <th id=\"BDeque\"> Equivalent {@code BlockingDeque} Method</th>\n *  </tr>\n *  <tr>\n *    <th id=\"Insert\" rowspan=\"4\" style=\"text-align:left; vertical-align:top\">Insert</th>\n *    <th id=\"add\" style=\"font-weight:normal; text-align:left\">{@link #add(Object) add(e)}</th>\n *    <td headers=\"Insert BDeque add\">{@link #addLast(Object) addLast(e)}</td>\n *  </tr>\n *  <tr>\n *    <th id=\"offer1\" style=\"font-weight:normal; text-align:left\">{@link #offer(Object) offer(e)}</th>\n *    <td headers=\"Insert BDeque offer1\">{@link #offerLast(Object) offerLast(e)}</td>\n *  </tr>\n *  <tr>\n *    <th id=\"put\" style=\"font-weight:normal; text-align:left\">{@link #put(Object) put(e)}</th>\n *    <td headers=\"Insert BDeque put\">{@link #putLast(Object) putLast(e)}</td>\n *  </tr>\n *  <tr>\n *    <th id=\"offer2\" style=\"font-weight:normal; text-align:left\">{@link #offer(Object, long, TimeUnit) offer(e, time, unit)}</th>\n *    <td headers=\"Insert BDeque offer2\">{@link #offerLast(Object, long, TimeUnit) offerLast(e, time, unit)}</td>\n *  </tr>\n *  <tr>\n *    <th id=\"Remove\" rowspan=\"4\" style=\"text-align:left; vertical-align:top\">Remove</th>\n *    <th id=\"remove\" style=\"font-weight:normal; text-align:left\">{@link #remove() remove()}</th>\n *    <td headers=\"Remove BDeque remove\">{@link #removeFirst() removeFirst()}</td>\n *  </tr>\n *  <tr>\n *    <th id=\"poll1\" style=\"font-weight:normal; text-align:left\">{@link #poll() poll()}</th>\n *    <td headers=\"Remove BDeque poll1\">{@link #pollFirst() pollFirst()}</td>\n *  </tr>\n *  <tr>\n *    <th id=\"take\" style=\"font-weight:normal; text-align:left\">{@link #take() take()}</th>\n *    <td headers=\"Remove BDeque take\">{@link #takeFirst() takeFirst()}</td>\n *  </tr>\n *  <tr>\n *    <th id=\"poll2\" style=\"font-weight:normal; text-align:left\">{@link #poll(long, TimeUnit) poll(time, unit)}</th>\n *    <td headers=\"Remove BDeque poll2\">{@link #pollFirst(long, TimeUnit) pollFirst(time, unit)}</td>\n *  </tr>\n *  <tr>\n *    <th id=\"Examine\" rowspan=\"2\" style=\"text-align:left; vertical-align:top\">Examine</th>\n *    <th id=\"element\" style=\"font-weight:normal; text-align:left\">{@link #element() element()}</th>\n *    <td headers=\"Examine BDeque element\">{@link #getFirst() getFirst()}</td>\n *  </tr>\n *  <tr>\n *    <th id=\"peek\" style=\"font-weight:normal; text-align:left\">{@link #peek() peek()}</th>\n *    <td headers=\"Examine BDeque peek\">{@link #peekFirst() peekFirst()}</td>\n *  </tr>\n * </table>\n *\n * <p>Memory consistency effects: As with other concurrent\n * collections, actions in a thread prior to placing an object into a\n * {@code BlockingDeque}\n * <a href=\"package-summary.html#MemoryVisibility\"><i>happen-before</i></a>\n * actions subsequent to the access or removal of that element from\n * the {@code BlockingDeque} in another thread.\n *\n * <p>This interface is a member of the\n * <a href=\"{@docRoot}/java.base/java/util/package-summary.html#CollectionsFramework\">\n * Java Collections Framework</a>.\n *\n * @since 1.6\n * @author Doug Lea\n * @param <E> the type of elements held in this deque\n ",
  "links" : [ "#pollFirst(long", "#peekLast()", "#pollFirst()", "#poll()", "#pollLast(long", "#putLast(Object)", "#takeLast()", "java.util.Deque", "#offerLast(Object)", "#addLast(Object)", "#removeLast()", "#putFirst(Object)", "#element()", "#take()", "#peekFirst()", "#remove()", "#offerFirst(Object", "#offerFirst(Object)", "#getFirst()", "#put(Object)", "#peek()", "#takeFirst()", "java.util.concurrent.BlockingQueue", "#offer(Object)", "#addFirst(Object)", "#poll(long", "#removeFirst()", "#getLast()", "#offerLast(Object", "#pollLast()", "#add(Object)", "#offer(Object" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " void addFirst(E e)",
    "returnType" : "void",
    "comment" : "\n     * Inserts the specified element at the front of this deque if it is\n     * possible to do so immediately without violating capacity restrictions,\n     * throwing an {@code IllegalStateException} if no space is currently\n     * available.  When using a capacity-restricted deque, it is generally\n     * preferable to use {@link #offerFirst(Object) offerFirst}.\n     *\n     * @param e the element to add\n     * @throws IllegalStateException {@inheritDoc}\n     * @throws ClassCastException {@inheritDoc}\n     * @throws NullPointerException if the specified element is null\n     * @throws IllegalArgumentException {@inheritDoc}\n     ",
    "links" : [ "#offerFirst(Object)" ]
  }, {
    "name" : " void addLast(E e)",
    "returnType" : "void",
    "comment" : "\n     * Inserts the specified element at the end of this deque if it is\n     * possible to do so immediately without violating capacity restrictions,\n     * throwing an {@code IllegalStateException} if no space is currently\n     * available.  When using a capacity-restricted deque, it is generally\n     * preferable to use {@link #offerLast(Object) offerLast}.\n     *\n     * @param e the element to add\n     * @throws IllegalStateException {@inheritDoc}\n     * @throws ClassCastException {@inheritDoc}\n     * @throws NullPointerException if the specified element is null\n     * @throws IllegalArgumentException {@inheritDoc}\n     ",
    "links" : [ "#offerLast(Object)" ]
  }, {
    "name" : " boolean offerFirst(E e)",
    "returnType" : "boolean",
    "comment" : "\n     * Inserts the specified element at the front of this deque if it is\n     * possible to do so immediately without violating capacity restrictions,\n     * returning {@code true} upon success and {@code false} if no space is\n     * currently available.\n     * When using a capacity-restricted deque, this method is generally\n     * preferable to the {@link #addFirst(Object) addFirst} method, which can\n     * fail to insert an element only by throwing an exception.\n     *\n     * @param e the element to add\n     * @throws ClassCastException {@inheritDoc}\n     * @throws NullPointerException if the specified element is null\n     * @throws IllegalArgumentException {@inheritDoc}\n     ",
    "links" : [ "#addFirst(Object)" ]
  }, {
    "name" : " boolean offerLast(E e)",
    "returnType" : "boolean",
    "comment" : "\n     * Inserts the specified element at the end of this deque if it is\n     * possible to do so immediately without violating capacity restrictions,\n     * returning {@code true} upon success and {@code false} if no space is\n     * currently available.\n     * When using a capacity-restricted deque, this method is generally\n     * preferable to the {@link #addLast(Object) addLast} method, which can\n     * fail to insert an element only by throwing an exception.\n     *\n     * @param e the element to add\n     * @throws ClassCastException {@inheritDoc}\n     * @throws NullPointerException if the specified element is null\n     * @throws IllegalArgumentException {@inheritDoc}\n     ",
    "links" : [ "#addLast(Object)" ]
  }, {
    "name" : " void putFirst(E e) throws InterruptedException",
    "returnType" : "void",
    "comment" : "\n     * Inserts the specified element at the front of this deque,\n     * waiting if necessary for space to become available.\n     *\n     * @param e the element to add\n     * @throws InterruptedException if interrupted while waiting\n     * @throws ClassCastException if the class of the specified element\n     *         prevents it from being added to this deque\n     * @throws NullPointerException if the specified element is null\n     * @throws IllegalArgumentException if some property of the specified\n     *         element prevents it from being added to this deque\n     ",
    "links" : [ ]
  }, {
    "name" : " void putLast(E e) throws InterruptedException",
    "returnType" : "void",
    "comment" : "\n     * Inserts the specified element at the end of this deque,\n     * waiting if necessary for space to become available.\n     *\n     * @param e the element to add\n     * @throws InterruptedException if interrupted while waiting\n     * @throws ClassCastException if the class of the specified element\n     *         prevents it from being added to this deque\n     * @throws NullPointerException if the specified element is null\n     * @throws IllegalArgumentException if some property of the specified\n     *         element prevents it from being added to this deque\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean offerFirst(E e, long timeout, TimeUnit unit) throws InterruptedException",
    "returnType" : "boolean",
    "comment" : "\n     * Inserts the specified element at the front of this deque,\n     * waiting up to the specified wait time if necessary for space to\n     * become available.\n     *\n     * @param e the element to add\n     * @param timeout how long to wait before giving up, in units of\n     *        {@code unit}\n     * @param unit a {@code TimeUnit} determining how to interpret the\n     *        {@code timeout} parameter\n     * @return {@code true} if successful, or {@code false} if\n     *         the specified waiting time elapses before space is available\n     * @throws InterruptedException if interrupted while waiting\n     * @throws ClassCastException if the class of the specified element\n     *         prevents it from being added to this deque\n     * @throws NullPointerException if the specified element is null\n     * @throws IllegalArgumentException if some property of the specified\n     *         element prevents it from being added to this deque\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean offerLast(E e, long timeout, TimeUnit unit) throws InterruptedException",
    "returnType" : "boolean",
    "comment" : "\n     * Inserts the specified element at the end of this deque,\n     * waiting up to the specified wait time if necessary for space to\n     * become available.\n     *\n     * @param e the element to add\n     * @param timeout how long to wait before giving up, in units of\n     *        {@code unit}\n     * @param unit a {@code TimeUnit} determining how to interpret the\n     *        {@code timeout} parameter\n     * @return {@code true} if successful, or {@code false} if\n     *         the specified waiting time elapses before space is available\n     * @throws InterruptedException if interrupted while waiting\n     * @throws ClassCastException if the class of the specified element\n     *         prevents it from being added to this deque\n     * @throws NullPointerException if the specified element is null\n     * @throws IllegalArgumentException if some property of the specified\n     *         element prevents it from being added to this deque\n     ",
    "links" : [ ]
  }, {
    "name" : " E takeFirst() throws InterruptedException",
    "returnType" : "E",
    "comment" : "\n     * Retrieves and removes the first element of this deque, waiting\n     * if necessary until an element becomes available.\n     *\n     * @return the head of this deque\n     * @throws InterruptedException if interrupted while waiting\n     ",
    "links" : [ ]
  }, {
    "name" : " E takeLast() throws InterruptedException",
    "returnType" : "E",
    "comment" : "\n     * Retrieves and removes the last element of this deque, waiting\n     * if necessary until an element becomes available.\n     *\n     * @return the tail of this deque\n     * @throws InterruptedException if interrupted while waiting\n     ",
    "links" : [ ]
  }, {
    "name" : " E pollFirst(long timeout, TimeUnit unit) throws InterruptedException",
    "returnType" : "E",
    "comment" : "\n     * Retrieves and removes the first element of this deque, waiting\n     * up to the specified wait time if necessary for an element to\n     * become available.\n     *\n     * @param timeout how long to wait before giving up, in units of\n     *        {@code unit}\n     * @param unit a {@code TimeUnit} determining how to interpret the\n     *        {@code timeout} parameter\n     * @return the head of this deque, or {@code null} if the specified\n     *         waiting time elapses before an element is available\n     * @throws InterruptedException if interrupted while waiting\n     ",
    "links" : [ ]
  }, {
    "name" : " E pollLast(long timeout, TimeUnit unit) throws InterruptedException",
    "returnType" : "E",
    "comment" : "\n     * Retrieves and removes the last element of this deque, waiting\n     * up to the specified wait time if necessary for an element to\n     * become available.\n     *\n     * @param timeout how long to wait before giving up, in units of\n     *        {@code unit}\n     * @param unit a {@code TimeUnit} determining how to interpret the\n     *        {@code timeout} parameter\n     * @return the tail of this deque, or {@code null} if the specified\n     *         waiting time elapses before an element is available\n     * @throws InterruptedException if interrupted while waiting\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean removeFirstOccurrence(Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * Removes the first occurrence of the specified element from this deque.\n     * If the deque does not contain the element, it is unchanged.\n     * More formally, removes the first element {@code e} such that\n     * {@code o.equals(e)} (if such an element exists).\n     * Returns {@code true} if this deque contained the specified element\n     * (or equivalently, if this deque changed as a result of the call).\n     *\n     * @param o element to be removed from this deque, if present\n     * @return {@code true} if an element was removed as a result of this call\n     * @throws ClassCastException if the class of the specified element\n     *         is incompatible with this deque\n     * (<a href=\"{@docRoot}/java.base/java/util/Collection.html#optional-restrictions\">optional</a>)\n     * @throws NullPointerException if the specified element is null\n     * (<a href=\"{@docRoot}/java.base/java/util/Collection.html#optional-restrictions\">optional</a>)\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean removeLastOccurrence(Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * Removes the last occurrence of the specified element from this deque.\n     * If the deque does not contain the element, it is unchanged.\n     * More formally, removes the last element {@code e} such that\n     * {@code o.equals(e)} (if such an element exists).\n     * Returns {@code true} if this deque contained the specified element\n     * (or equivalently, if this deque changed as a result of the call).\n     *\n     * @param o element to be removed from this deque, if present\n     * @return {@code true} if an element was removed as a result of this call\n     * @throws ClassCastException if the class of the specified element\n     *         is incompatible with this deque\n     * (<a href=\"{@docRoot}/java.base/java/util/Collection.html#optional-restrictions\">optional</a>)\n     * @throws NullPointerException if the specified element is null\n     * (<a href=\"{@docRoot}/java.base/java/util/Collection.html#optional-restrictions\">optional</a>)\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean add(E e)",
    "returnType" : "boolean",
    "comment" : "\n     * Inserts the specified element into the queue represented by this deque\n     * (in other words, at the tail of this deque) if it is possible to do so\n     * immediately without violating capacity restrictions, returning\n     * {@code true} upon success and throwing an\n     * {@code IllegalStateException} if no space is currently available.\n     * When using a capacity-restricted deque, it is generally preferable to\n     * use {@link #offer(Object) offer}.\n     *\n     * <p>This method is equivalent to {@link #addLast(Object) addLast}.\n     *\n     * @param e the element to add\n     * @throws IllegalStateException {@inheritDoc}\n     * @throws ClassCastException if the class of the specified element\n     *         prevents it from being added to this deque\n     * @throws NullPointerException if the specified element is null\n     * @throws IllegalArgumentException if some property of the specified\n     *         element prevents it from being added to this deque\n     ",
    "links" : [ "#addLast(Object)", "#offer(Object)" ]
  }, {
    "name" : " boolean offer(E e)",
    "returnType" : "boolean",
    "comment" : "\n     * Inserts the specified element into the queue represented by this deque\n     * (in other words, at the tail of this deque) if it is possible to do so\n     * immediately without violating capacity restrictions, returning\n     * {@code true} upon success and {@code false} if no space is currently\n     * available.  When using a capacity-restricted deque, this method is\n     * generally preferable to the {@link #add} method, which can fail to\n     * insert an element only by throwing an exception.\n     *\n     * <p>This method is equivalent to {@link #offerLast(Object) offerLast}.\n     *\n     * @param e the element to add\n     * @throws ClassCastException if the class of the specified element\n     *         prevents it from being added to this deque\n     * @throws NullPointerException if the specified element is null\n     * @throws IllegalArgumentException if some property of the specified\n     *         element prevents it from being added to this deque\n     ",
    "links" : [ "#offerLast(Object)", "#add" ]
  }, {
    "name" : " void put(E e) throws InterruptedException",
    "returnType" : "void",
    "comment" : "\n     * Inserts the specified element into the queue represented by this deque\n     * (in other words, at the tail of this deque), waiting if necessary for\n     * space to become available.\n     *\n     * <p>This method is equivalent to {@link #putLast(Object) putLast}.\n     *\n     * @param e the element to add\n     * @throws InterruptedException {@inheritDoc}\n     * @throws ClassCastException if the class of the specified element\n     *         prevents it from being added to this deque\n     * @throws NullPointerException if the specified element is null\n     * @throws IllegalArgumentException if some property of the specified\n     *         element prevents it from being added to this deque\n     ",
    "links" : [ "#putLast(Object)" ]
  }, {
    "name" : " boolean offer(E e, long timeout, TimeUnit unit) throws InterruptedException",
    "returnType" : "boolean",
    "comment" : "\n     * Inserts the specified element into the queue represented by this deque\n     * (in other words, at the tail of this deque), waiting up to the\n     * specified wait time if necessary for space to become available.\n     *\n     * <p>This method is equivalent to\n     * {@link #offerLast(Object,long,TimeUnit) offerLast}.\n     *\n     * @param e the element to add\n     * @return {@code true} if the element was added to this deque, else\n     *         {@code false}\n     * @throws InterruptedException {@inheritDoc}\n     * @throws ClassCastException if the class of the specified element\n     *         prevents it from being added to this deque\n     * @throws NullPointerException if the specified element is null\n     * @throws IllegalArgumentException if some property of the specified\n     *         element prevents it from being added to this deque\n     ",
    "links" : [ "#offerLast(Object" ]
  }, {
    "name" : " E remove()",
    "returnType" : "E",
    "comment" : "\n     * Retrieves and removes the head of the queue represented by this deque\n     * (in other words, the first element of this deque).\n     * This method differs from {@link #poll() poll()} only in that it\n     * throws an exception if this deque is empty.\n     *\n     * <p>This method is equivalent to {@link #removeFirst() removeFirst}.\n     *\n     * @return the head of the queue represented by this deque\n     * @throws NoSuchElementException if this deque is empty\n     ",
    "links" : [ "#removeFirst()", "#poll()" ]
  }, {
    "name" : " E poll()",
    "returnType" : "E",
    "comment" : "\n     * Retrieves and removes the head of the queue represented by this deque\n     * (in other words, the first element of this deque), or returns\n     * {@code null} if this deque is empty.\n     *\n     * <p>This method is equivalent to {@link #pollFirst()}.\n     *\n     * @return the head of this deque, or {@code null} if this deque is empty\n     ",
    "links" : [ "#pollFirst()" ]
  }, {
    "name" : " E take() throws InterruptedException",
    "returnType" : "E",
    "comment" : "\n     * Retrieves and removes the head of the queue represented by this deque\n     * (in other words, the first element of this deque), waiting if\n     * necessary until an element becomes available.\n     *\n     * <p>This method is equivalent to {@link #takeFirst() takeFirst}.\n     *\n     * @return the head of this deque\n     * @throws InterruptedException if interrupted while waiting\n     ",
    "links" : [ "#takeFirst()" ]
  }, {
    "name" : " E poll(long timeout, TimeUnit unit) throws InterruptedException",
    "returnType" : "E",
    "comment" : "\n     * Retrieves and removes the head of the queue represented by this deque\n     * (in other words, the first element of this deque), waiting up to the\n     * specified wait time if necessary for an element to become available.\n     *\n     * <p>This method is equivalent to\n     * {@link #pollFirst(long,TimeUnit) pollFirst}.\n     *\n     * @return the head of this deque, or {@code null} if the\n     *         specified waiting time elapses before an element is available\n     * @throws InterruptedException if interrupted while waiting\n     ",
    "links" : [ "#pollFirst(long" ]
  }, {
    "name" : " E element()",
    "returnType" : "E",
    "comment" : "\n     * Retrieves, but does not remove, the head of the queue represented by\n     * this deque (in other words, the first element of this deque).\n     * This method differs from {@link #peek() peek} only in that it throws an\n     * exception if this deque is empty.\n     *\n     * <p>This method is equivalent to {@link #getFirst() getFirst}.\n     *\n     * @return the head of this deque\n     * @throws NoSuchElementException if this deque is empty\n     ",
    "links" : [ "#peek()", "#getFirst()" ]
  }, {
    "name" : " E peek()",
    "returnType" : "E",
    "comment" : "\n     * Retrieves, but does not remove, the head of the queue represented by\n     * this deque (in other words, the first element of this deque), or\n     * returns {@code null} if this deque is empty.\n     *\n     * <p>This method is equivalent to {@link #peekFirst() peekFirst}.\n     *\n     * @return the head of this deque, or {@code null} if this deque is empty\n     ",
    "links" : [ "#peekFirst()" ]
  }, {
    "name" : " boolean remove(Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * Removes the first occurrence of the specified element from this deque.\n     * If the deque does not contain the element, it is unchanged.\n     * More formally, removes the first element {@code e} such that\n     * {@code o.equals(e)} (if such an element exists).\n     * Returns {@code true} if this deque contained the specified element\n     * (or equivalently, if this deque changed as a result of the call).\n     *\n     * <p>This method is equivalent to\n     * {@link #removeFirstOccurrence(Object) removeFirstOccurrence}.\n     *\n     * @param o element to be removed from this deque, if present\n     * @return {@code true} if this deque changed as a result of the call\n     * @throws ClassCastException if the class of the specified element\n     *         is incompatible with this deque\n     * (<a href=\"{@docRoot}/java.base/java/util/Collection.html#optional-restrictions\">optional</a>)\n     * @throws NullPointerException if the specified element is null\n     * (<a href=\"{@docRoot}/java.base/java/util/Collection.html#optional-restrictions\">optional</a>)\n     ",
    "links" : [ "#removeFirstOccurrence(Object)" ]
  }, {
    "name" : " boolean contains(Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if this deque contains the specified element.\n     * More formally, returns {@code true} if and only if this deque contains\n     * at least one element {@code e} such that {@code o.equals(e)}.\n     *\n     * @param o object to be checked for containment in this deque\n     * @return {@code true} if this deque contains the specified element\n     * @throws ClassCastException if the class of the specified element\n     *         is incompatible with this deque\n     * (<a href=\"{@docRoot}/java.base/java/util/Collection.html#optional-restrictions\">optional</a>)\n     * @throws NullPointerException if the specified element is null\n     * (<a href=\"{@docRoot}/java.base/java/util/Collection.html#optional-restrictions\">optional</a>)\n     ",
    "links" : [ ]
  }, {
    "name" : " int size()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of elements in this deque.\n     *\n     * @return the number of elements in this deque\n     ",
    "links" : [ ]
  }, {
    "name" : " Iterator<E> iterator()",
    "returnType" : "Iterator<E>",
    "comment" : "\n     * Returns an iterator over the elements in this deque in proper sequence.\n     * The elements will be returned in order from first (head) to last (tail).\n     *\n     * @return an iterator over the elements in this deque in proper sequence\n     ",
    "links" : [ ]
  }, {
    "name" : " void push(E e)",
    "returnType" : "void",
    "comment" : "\n     * Pushes an element onto the stack represented by this deque (in other\n     * words, at the head of this deque) if it is possible to do so\n     * immediately without violating capacity restrictions, throwing an\n     * {@code IllegalStateException} if no space is currently available.\n     *\n     * <p>This method is equivalent to {@link #addFirst(Object) addFirst}.\n     *\n     * @throws IllegalStateException {@inheritDoc}\n     * @throws ClassCastException {@inheritDoc}\n     * @throws NullPointerException if the specified element is null\n     * @throws IllegalArgumentException {@inheritDoc}\n     ",
    "links" : [ "#addFirst(Object)" ]
  } ],
  "methodNames" : [ " void addFirst(E e)", " void addLast(E e)", " boolean offerFirst(E e)", " boolean offerLast(E e)", " void putFirst(E e) throws InterruptedException", " void putLast(E e) throws InterruptedException", " boolean offerFirst(E e, long timeout, TimeUnit unit) throws InterruptedException", " boolean offerLast(E e, long timeout, TimeUnit unit) throws InterruptedException", " E takeFirst() throws InterruptedException", " E takeLast() throws InterruptedException", " E pollFirst(long timeout, TimeUnit unit) throws InterruptedException", " E pollLast(long timeout, TimeUnit unit) throws InterruptedException", " boolean removeFirstOccurrence(Object o)", " boolean removeLastOccurrence(Object o)", " boolean add(E e)", " boolean offer(E e)", " void put(E e) throws InterruptedException", " boolean offer(E e, long timeout, TimeUnit unit) throws InterruptedException", " E remove()", " E poll()", " E take() throws InterruptedException", " E poll(long timeout, TimeUnit unit) throws InterruptedException", " E element()", " E peek()", " boolean remove(Object o)", " boolean contains(Object o)", " int size()", " Iterator<E> iterator()", " void push(E e)" ],
  "variableNames" : [ ]
}