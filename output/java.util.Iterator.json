{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/Iterator.java",
  "packageName" : "java.util",
  "className" : "Iterator",
  "comment" : "\n * An iterator over a collection.  {@code Iterator} takes the place of\n * {@link Enumeration} in the Java Collections Framework.  Iterators\n * differ from enumerations in two ways:\n *\n * <ul>\n *      <li> Iterators allow the caller to remove elements from the\n *           underlying collection during the iteration with well-defined\n *           semantics.\n *      <li> Method names have been improved.\n * </ul>\n *\n * <p>This interface is a member of the\n * <a href=\"{@docRoot}/java.base/java/util/package-summary.html#CollectionsFramework\">\n * Java Collections Framework</a>.\n *\n * @apiNote\n * An {@link Enumeration} can be converted into an {@code Iterator} by\n * using the {@link Enumeration#asIterator} method.\n *\n * @param <E> the type of elements returned by this iterator\n *\n * @author  Josh Bloch\n * @see Collection\n * @see ListIterator\n * @see Iterable\n * @since 1.2\n ",
  "links" : [ "java.util.Enumeration", "java.util.Enumeration#asIterator" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " boolean hasNext()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if the iteration has more elements.\n     * (In other words, returns {@code true} if {@link #next} would\n     * return an element rather than throwing an exception.)\n     *\n     * @return {@code true} if the iteration has more elements\n     ",
    "links" : [ "#next" ]
  }, {
    "name" : " E next()",
    "returnType" : "E",
    "comment" : "\n     * Returns the next element in the iteration.\n     *\n     * @return the next element in the iteration\n     * @throws NoSuchElementException if the iteration has no more elements\n     ",
    "links" : [ ]
  }, {
    "name" : " void remove()",
    "returnType" : "void",
    "comment" : "\n     * Removes from the underlying collection the last element returned\n     * by this iterator (optional operation).  This method can be called\n     * only once per call to {@link #next}.\n     * <p>\n     * The behavior of an iterator is unspecified if the underlying collection\n     * is modified while the iteration is in progress in any way other than by\n     * calling this method, unless an overriding class has specified a\n     * concurrent modification policy.\n     * <p>\n     * The behavior of an iterator is unspecified if this method is called\n     * after a call to the {@link #forEachRemaining forEachRemaining} method.\n     *\n     * @implSpec\n     * The default implementation throws an instance of\n     * {@link UnsupportedOperationException} and performs no other action.\n     *\n     * @throws UnsupportedOperationException if the {@code remove}\n     *         operation is not supported by this iterator\n     *\n     * @throws IllegalStateException if the {@code next} method has not\n     *         yet been called, or the {@code remove} method has already\n     *         been called after the last call to the {@code next}\n     *         method\n     ",
    "links" : [ "#next", "#forEachRemaining", "UnsupportedOperationException" ]
  }, {
    "name" : " void forEachRemaining(Consumer<? super E> action)",
    "returnType" : "void",
    "comment" : "\n     * Performs the given action for each remaining element until all elements\n     * have been processed or the action throws an exception.  Actions are\n     * performed in the order of iteration, if that order is specified.\n     * Exceptions thrown by the action are relayed to the caller.\n     * <p>\n     * The behavior of an iterator is unspecified if the action modifies the\n     * collection in any way (even by calling the {@link #remove remove} method\n     * or other mutator methods of {@code Iterator} subtypes),\n     * unless an overriding class has specified a concurrent modification policy.\n     * <p>\n     * Subsequent behavior of an iterator is unspecified if the action throws an\n     * exception.\n     *\n     * @implSpec\n     * <p>The default implementation behaves as if:\n     * <pre>{@code\n     *     while (hasNext())\n     *         action.accept(next());\n     * }</pre>\n     *\n     * @param action The action to be performed for each element\n     * @throws NullPointerException if the specified action is null\n     * @since 1.8\n     ",
    "links" : [ "#remove" ]
  } ],
  "methodNames" : [ " boolean hasNext()", " E next()", " void remove()", " void forEachRemaining(Consumer<? super E> action)" ],
  "variableNames" : [ ]
}