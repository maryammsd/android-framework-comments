{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/view/inputmethod/CompletionInfo.java",
  "packageName" : "android.view.inputmethod",
  "className" : "CompletionInfo",
  "comment" : "\n * Information about a single text completion that an editor has reported to\n * an input method.\n *\n * <p>This class encapsulates a completion offered by an application\n * that wants it to be presented to the user by the IME. Usually, apps\n * present their completions directly in a scrolling list for example\n * (UI developers will usually use or extend\n * {@see android.widget.AutoCompleteTextView} to implement this).\n * However, in some cases, the editor may not be visible, as in the\n * case in extract mode where the IME has taken over the full\n * screen. In this case, the editor can choose to send their\n * completions to the IME for display.\n *\n * <p>Most applications who want to send completions to an IME should use\n * {@link android.widget.AutoCompleteTextView} as this class makes this\n * process easy. In this case, the application would not have to deal directly\n * with this class.\n *\n * <p>An application who implements its own editor and wants direct control\n * over this would create an array of CompletionInfo objects, and send it to the IME using\n * {@link InputMethodManager#displayCompletions(View, CompletionInfo[])}.\n * The IME would present the completions however they see fit, and\n * call back to the editor through\n * {@link InputConnection#commitCompletion(CompletionInfo)}.\n * The application can then pick up the commit event by overriding\n * {@link android.widget.TextView#onCommitCompletion(CompletionInfo)}.\n ",
  "variables" : [ {
    "name" : "mId",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPosition",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mText",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLabel",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<CompletionInfo>",
    "comment" : "\n     * Used to make this class parcelable.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public long getId()",
    "returnType" : "long",
    "comment" : "\n     * Return the abstract identifier for this completion, typically\n     * corresponding to the id associated with it in the original adapter.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getPosition()",
    "returnType" : "int",
    "comment" : "\n     * Return the original position of this completion, typically\n     * corresponding to its position in the original adapter.\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getText()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Return the actual text associated with this completion.  This is the\n     * real text that will be inserted into the editor if the user selects it.\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getLabel()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Return the user-visible label for the completion, or null if the plain\n     * text should be shown.  If non-null, this will be what the user sees as\n     * the completion option instead of the actual text.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "\n     * Used to package this object into a {@link Parcel}.\n     *\n     * @param dest The {@link Parcel} to be written.\n     * @param flags The flags used for parceling.\n     ",
    "links" : [ "android.os.Parcel" ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "mId", "mPosition", "mText", "mLabel", "CREATOR" ],
  "methodNames" : [ "public long getId()", "public int getPosition()", "public CharSequence getText()", "public CharSequence getLabel()", "public String toString()", "public void writeToParcel(Parcel dest, int flags)", "public int describeContents()" ]
}