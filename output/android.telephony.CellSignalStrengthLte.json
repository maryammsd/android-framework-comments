{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/telephony/CellSignalStrengthLte.java",
  "packageName" : "android.telephony",
  "className" : "CellSignalStrengthLte",
  "comment" : "\n * LTE signal strength related information.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "LOG_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SIGNAL_STRENGTH_LTE_RSSI_ASU_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * Indicates the unknown or undetectable RSSI value in ASU.\n     *\n     * Reference: TS 27.007 8.5 - Signal quality +CSQ\n     ",
    "links" : [ ]
  }, {
    "name" : "SIGNAL_STRENGTH_LTE_RSSI_VALID_ASU_MAX_VALUE",
    "type" : "int",
    "comment" : "\n     * Indicates the maximum valid RSSI value in ASU.\n     *\n     * Reference: TS 27.007 8.5 - Signal quality +CSQ\n     ",
    "links" : [ ]
  }, {
    "name" : "SIGNAL_STRENGTH_LTE_RSSI_VALID_ASU_MIN_VALUE",
    "type" : "int",
    "comment" : "\n     * Indicates the minimum valid RSSI value in ASU.\n     *\n     * Reference: TS 27.007 8.5 - Signal quality +CSQ\n     ",
    "links" : [ ]
  }, {
    "name" : "MAX_LTE_RSRP",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MIN_LTE_RSRP",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "USE_RSRP",
    "type" : "int",
    "comment" : "\n     * Indicates RSRP is considered for {@link #getLevel()} and reported from modem.\n     *\n     * @hide\n     ",
    "links" : [ "#getLevel()" ]
  }, {
    "name" : "USE_RSRQ",
    "type" : "int",
    "comment" : "\n     * Indicates RSRQ is considered for {@link #getLevel()} and reported from modem.\n     *\n     * @hide\n     ",
    "links" : [ "#getLevel()" ]
  }, {
    "name" : "USE_RSSNR",
    "type" : "int",
    "comment" : "\n     * Indicates RSSNR is considered for {@link #getLevel()} and reported from modem.\n     *\n     * @hide\n     ",
    "links" : [ "#getLevel()" ]
  }, {
    "name" : "mSignalStrength",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRssi",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRsrp",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRsrq",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRssnr",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCqiTableIndex",
    "type" : "int",
    "comment" : "\n     * CSI channel quality indicator (CQI) table index. There are multiple CQI tables.\n     * The definition of CQI in each table is different.\n     *\n     * Reference: 3GPP TS 136.213 section 7.2.3.\n     *\n     * Range [1, 6].\n     ",
    "links" : [ ]
  }, {
    "name" : "mCqi",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTimingAdvance",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLevel",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mParametersUseForLevel",
    "type" : "int",
    "comment" : "\n     * Bit-field integer to determine whether to use Reference Signal Received Power (RSRP),\n     * Reference Signal Received Quality (RSRQ), and/or Reference Signal Signal to Noise Ratio\n     * (RSSNR) for the number of LTE signal bars. If multiple measures are set, the parameter\n     * whose signal level value is smallest is used to indicate the signal level.\n     *\n     *  RSRP = 1 << 0,\n     *  RSRQ = 1 << 1,\n     *  RSSNR = 1 << 2,\n     *\n     * For example, if both RSRP and RSRQ are used, the value of key is 3 (1 << 0 | 1 << 1).\n     * If the key is invalid or not configured, a default value (RSRP = 1 << 0) will apply.\n     ",
    "links" : [ ]
  }, {
    "name" : "sRsrpThresholds",
    "type" : "int[]",
    "comment" : " Lifted from Default carrier configs and max range of RSRP",
    "links" : [ ]
  }, {
    "name" : "sRsrqThresholds",
    "type" : "int[]",
    "comment" : " Lifted from Default carrier configs and max range of RSRQ",
    "links" : [ ]
  }, {
    "name" : "sRssnrThresholds",
    "type" : "int[]",
    "comment" : " Lifted from Default carrier configs and max range of RSSNR",
    "links" : [ ]
  }, {
    "name" : "sRsrpBoost",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sInvalid",
    "type" : "CellSignalStrengthLte",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<CellSignalStrengthLte>",
    "comment" : " Implement the Parcelable interface ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected void copyFrom(CellSignalStrengthLte s)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public CellSignalStrengthLte copy()",
    "returnType" : "CellSignalStrengthLte",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setDefaultValues()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getLevel()",
    "returnType" : "int",
    "comment" : " {@inheritDoc} ",
    "links" : [ ]
  }, {
    "name" : "private boolean isLevelForParameter(int parameterType)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if the given parameter type is considered to use for {@link #getLevel()}.\n     *\n     * Note: if multiple parameter types are considered, the smaller level for one of the\n     * parameters would be returned by {@link #getLevel()}\n     *\n     * @param parameterType bitwise OR of {@link #USE_RSRP}, {@link #USE_RSRQ},\n     *         {@link #USE_RSSNR}\n     * @return {@code true} if the level is calculated based on the given parameter type;\n     *      {@code false} otherwise.\n     ",
    "links" : [ "#USE_RSSNR", "#getLevel()", "#USE_RSRQ", "#USE_RSRP" ]
  }, {
    "name" : "public void updateLevel(PersistableBundle cc, ServiceState ss)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private int updateLevelWithMeasure(int measure, int[] thresholds)",
    "returnType" : "int",
    "comment" : "\n     * Update level with corresponding measure and thresholds.\n     *\n     * @param measure corresponding signal measure\n     * @param thresholds corresponding signal thresholds\n     * @return level of the signal strength\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getRsrq()",
    "returnType" : "int",
    "comment" : "\n     * Get reference signal received quality\n     *\n     * @return the RSRQ if available or\n     *         {@link android.telephony.CellInfo#UNAVAILABLE UNAVAILABLE} if unavailable.\n     ",
    "links" : [ "android.telephony.CellInfo#UNAVAILABLE" ]
  }, {
    "name" : "public int getRssi()",
    "returnType" : "int",
    "comment" : "\n     * Get Received Signal Strength Indication (RSSI) in dBm\n     *\n     * The value range is [-113, -51] inclusively or {@link CellInfo#UNAVAILABLE} if unavailable.\n     *\n     * Reference: TS 27.007 8.5 Signal quality +CSQ\n     *\n     * @return the RSSI if available or {@link CellInfo#UNAVAILABLE} if unavailable.\n     ",
    "links" : [ "android.telephony.CellInfo#UNAVAILABLE" ]
  }, {
    "name" : "public int getRssnr()",
    "returnType" : "int",
    "comment" : "\n     * Get reference signal signal-to-noise ratio in dB\n     * Range: -20 dB to +30 dB.\n     *\n     * @return the RSSNR if available or\n     *         {@link android.telephony.CellInfo#UNAVAILABLE} if unavailable.\n     ",
    "links" : [ "android.telephony.CellInfo#UNAVAILABLE" ]
  }, {
    "name" : "public int getRsrp()",
    "returnType" : "int",
    "comment" : "\n     * Get reference signal received power in dBm\n     * Range: -140 dBm to -43 dBm.\n     *\n     * @return the RSRP of the measured cell or {@link CellInfo#UNAVAILABLE} if\n     * unavailable.\n     ",
    "links" : [ "android.telephony.CellInfo#UNAVAILABLE" ]
  }, {
    "name" : "public int getCqiTableIndex()",
    "returnType" : "int",
    "comment" : "\n     * Get table index for channel quality indicator\n     *\n     * Reference: 3GPP TS 136.213 section 7.2.3.\n     *\n     * @return the CQI table index if available or\n     *         {@link android.telephony.CellInfo#UNAVAILABLE UNAVAILABLE} if unavailable.\n     ",
    "links" : [ "android.telephony.CellInfo#UNAVAILABLE" ]
  }, {
    "name" : "public int getCqi()",
    "returnType" : "int",
    "comment" : "\n     * Get channel quality indicator\n     *\n     * Reference: 3GPP TS 136.213 section 7.2.3.\n     *\n     * @return the CQI if available or\n     *         {@link android.telephony.CellInfo#UNAVAILABLE UNAVAILABLE} if unavailable.\n     ",
    "links" : [ "android.telephony.CellInfo#UNAVAILABLE" ]
  }, {
    "name" : "public int getDbm()",
    "returnType" : "int",
    "comment" : "\n     * Get signal strength in dBm\n     *\n     * @return the RSRP of the measured cell.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getAsuLevel()",
    "returnType" : "int",
    "comment" : "\n     * Get the RSRP in ASU.\n     *\n     * Asu is calculated based on 3GPP RSRP. Refer to 3GPP 27.007 (Ver 10.3.0) Sec 8.69\n     *\n     * @return RSCP in ASU 0..97, 255, or UNAVAILABLE\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getTimingAdvance()",
    "returnType" : "int",
    "comment" : "\n     * Get the timing advance value for LTE, as a value in range of 0..1282.\n     * {@link android.telephony.CellInfo#UNAVAILABLE UNAVAILABLE} is reported when there is no\n     * active RRC connection. Refer to 3GPP 36.213 Sec 4.2.3\n     *\n     * @return the LTE timing advance if available or\n     *         {@link android.telephony.CellInfo#UNAVAILABLE UNAVAILABLE} if unavailable.\n     ",
    "links" : [ "android.telephony.CellInfo#UNAVAILABLE" ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isValid()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * @return string representation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : " Implement the Parcelable interface ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : " Implement the Parcelable interface ",
    "links" : [ ]
  }, {
    "name" : "private static void log(String s)",
    "returnType" : "void",
    "comment" : "\n     * log\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int convertRssnrUnitFromTenDbToDB(int rssnr)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static int convertRssiAsuToDBm(int rssiAsu)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "methodNames" : [ "protected void copyFrom(CellSignalStrengthLte s)", "public CellSignalStrengthLte copy()", "public void setDefaultValues()", "public int getLevel()", "private boolean isLevelForParameter(int parameterType)", "public void updateLevel(PersistableBundle cc, ServiceState ss)", "private int updateLevelWithMeasure(int measure, int[] thresholds)", "public int getRsrq()", "public int getRssi()", "public int getRssnr()", "public int getRsrp()", "public int getCqiTableIndex()", "public int getCqi()", "public int getDbm()", "public int getAsuLevel()", "public int getTimingAdvance()", "public int hashCode()", "public boolean isValid()", "public boolean equals(Object o)", "public String toString()", "public void writeToParcel(Parcel dest, int flags)", "public int describeContents()", "private static void log(String s)", "public static int convertRssnrUnitFromTenDbToDB(int rssnr)", "public static int convertRssiAsuToDBm(int rssiAsu)" ],
  "variableNames" : [ "LOG_TAG", "DBG", "SIGNAL_STRENGTH_LTE_RSSI_ASU_UNKNOWN", "SIGNAL_STRENGTH_LTE_RSSI_VALID_ASU_MAX_VALUE", "SIGNAL_STRENGTH_LTE_RSSI_VALID_ASU_MIN_VALUE", "MAX_LTE_RSRP", "MIN_LTE_RSRP", "USE_RSRP", "USE_RSRQ", "USE_RSSNR", "mSignalStrength", "mRssi", "mRsrp", "mRsrq", "mRssnr", "mCqiTableIndex", "mCqi", "mTimingAdvance", "mLevel", "mParametersUseForLevel", "sRsrpThresholds", "sRsrqThresholds", "sRssnrThresholds", "sRsrpBoost", "sInvalid", "CREATOR" ]
}