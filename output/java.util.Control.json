{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/ResourceBundle.java",
  "packageName" : "java.util",
  "className" : "Control",
  "comment" : "\n     * <code>ResourceBundle.Control</code> defines a set of callback methods\n     * that are invoked by the {@link ResourceBundle#getBundle(String,\n     * Locale, ClassLoader, Control) ResourceBundle.getBundle} factory\n     * methods during the bundle loading process. In other words, a\n     * <code>ResourceBundle.Control</code> collaborates with the factory\n     * methods for loading resource bundles. The default implementation of\n     * the callback methods provides the information necessary for the\n     * factory methods to perform the <a\n     * href=\"./ResourceBundle.html#default_behavior\">default behavior</a>.\n     *\n     * <p>In addition to the callback methods, the {@link\n     * #toBundleName(String, Locale) toBundleName} and {@link\n     * #toResourceName(String, String) toResourceName} methods are defined\n     * primarily for convenience in implementing the callback\n     * methods. However, the <code>toBundleName</code> method could be\n     * overridden to provide different conventions in the organization and\n     * packaging of localized resources.  The <code>toResourceName</code>\n     * method is <code>final</code> to avoid use of wrong resource and class\n     * name separators.\n     *\n     * <p>Two factory methods, {@link #getControl(List)} and {@link\n     * #getNoFallbackControl(List)}, provide\n     * <code>ResourceBundle.Control</code> instances that implement common\n     * variations of the default bundle loading process.\n     *\n     * <p>The formats returned by the {@link Control#getFormats(String)\n     * getFormats} method and candidate locales returned by the {@link\n     * ResourceBundle.Control#getCandidateLocales(String, Locale)\n     * getCandidateLocales} method must be consistent in all\n     * <code>ResourceBundle.getBundle</code> invocations for the same base\n     * bundle. Otherwise, the <code>ResourceBundle.getBundle</code> methods\n     * may return unintended bundles. For example, if only\n     * <code>\"java.class\"</code> is returned by the <code>getFormats</code>\n     * method for the first call to <code>ResourceBundle.getBundle</code>\n     * and only <code>\"java.properties\"</code> for the second call, then the\n     * second call will return the class-based one that has been cached\n     * during the first call.\n     *\n     * <p>A <code>ResourceBundle.Control</code> instance must be thread-safe\n     * if it's simultaneously used by multiple threads.\n     * <code>ResourceBundle.getBundle</code> does not synchronize to call\n     * the <code>ResourceBundle.Control</code> methods. The default\n     * implementations of the methods are thread-safe.\n     *\n     * <p>Applications can specify <code>ResourceBundle.Control</code>\n     * instances returned by the <code>getControl</code> factory methods or\n     * created from a subclass of <code>ResourceBundle.Control</code> to\n     * customize the bundle loading process. The following are examples of\n     * changing the default bundle loading process.\n     *\n     * <p><b>Example 1</b>\n     *\n     * <p>The following code lets <code>ResourceBundle.getBundle</code> look\n     * up only properties-based resources.\n     *\n     * <pre>\n     * import java.util.*;\n     * import static java.util.ResourceBundle.Control.*;\n     * ...\n     * ResourceBundle bundle =\n     *   ResourceBundle.getBundle(\"MyResources\", new Locale(\"fr\", \"CH\"),\n     *                            ResourceBundle.Control.getControl(FORMAT_PROPERTIES));\n     * </pre>\n     *\n     * Given the resource bundles in the <a\n     * href=\"./ResourceBundle.html#default_behavior_example\">example</a> in\n     * the <code>ResourceBundle.getBundle</code> description, this\n     * <code>ResourceBundle.getBundle</code> call loads\n     * <code>MyResources_fr_CH.properties</code> whose parent is\n     * <code>MyResources_fr.properties</code> whose parent is\n     * <code>MyResources.properties</code>. (<code>MyResources_fr_CH.properties</code>\n     * is not hidden, but <code>MyResources_fr_CH.class</code> is.)\n     *\n     * <p><b>Example 2</b>\n     *\n     * <p>The following is an example of loading XML-based bundles\n     * using {@link Properties#loadFromXML(java.io.InputStream)\n     * Properties.loadFromXML}.\n     *\n     * <pre>\n     * ResourceBundle rb = ResourceBundle.getBundle(\"Messages\",\n     *     new ResourceBundle.Control() {\n     *         public List&lt;String&gt; getFormats(String baseName) {\n     *             if (baseName == null)\n     *                 throw new NullPointerException();\n     *             return Arrays.asList(\"xml\");\n     *         }\n     *         public ResourceBundle newBundle(String baseName,\n     *                                         Locale locale,\n     *                                         String format,\n     *                                         ClassLoader loader,\n     *                                         boolean reload)\n     *                          throws IllegalAccessException,\n     *                                 InstantiationException,\n     *                                 IOException {\n     *             if (baseName == null || locale == null\n     *                   || format == null || loader == null)\n     *                 throw new NullPointerException();\n     *             ResourceBundle bundle = null;\n     *             if (format.equals(\"xml\")) {\n     *                 String bundleName = toBundleName(baseName, locale);\n     *                 String resourceName = toResourceName(bundleName, format);\n     *                 InputStream stream = null;\n     *                 if (reload) {\n     *                     URL url = loader.getResource(resourceName);\n     *                     if (url != null) {\n     *                         URLConnection connection = url.openConnection();\n     *                         if (connection != null) {\n     *                             // Disable caches to get fresh data for\n     *                             // reloading.\n     *                             connection.setUseCaches(false);\n     *                             stream = connection.getInputStream();\n     *                         }\n     *                     }\n     *                 } else {\n     *                     stream = loader.getResourceAsStream(resourceName);\n     *                 }\n     *                 if (stream != null) {\n     *                     BufferedInputStream bis = new BufferedInputStream(stream);\n     *                     bundle = new XMLResourceBundle(bis);\n     *                     bis.close();\n     *                 }\n     *             }\n     *             return bundle;\n     *         }\n     *     });\n     *\n     * ...\n     *\n     * private static class XMLResourceBundle extends ResourceBundle {\n     *     private Properties props;\n     *     XMLResourceBundle(InputStream stream) throws IOException {\n     *         props = new Properties();\n     *         props.loadFromXML(stream);\n     *     }\n     *     protected Object handleGetObject(String key) {\n     *         return props.getProperty(key);\n     *     }\n     *     public Enumeration&lt;String&gt; getKeys() {\n     *         ...\n     *     }\n     * }\n     * </pre>\n     *\n     * @since 1.6\n     * @revised 9\n     ",
  "links" : [ "#toResourceName(String", "#getFormats(String)", "#getNoFallbackControl(List)", "java.util.ResourceBundle#getBundle(String", "ResourceBundle.Control#getCandidateLocales(String", "#getControl(List)", "#toBundleName(String", "java.util.Properties#loadFromXML(java.io.InputStream)" ],
  "variables" : [ {
    "name" : "FORMAT_DEFAULT",
    "type" : "List<String>",
    "comment" : "\n         * The default format <code>List</code>, which contains the strings\n         * <code>\"java.class\"</code> and <code>\"java.properties\"</code>, in\n         * this order. This <code>List</code> is unmodifiable.\n         *\n         * @see #getFormats(String)\n         ",
    "links" : [ ]
  }, {
    "name" : "FORMAT_CLASS",
    "type" : "List<String>",
    "comment" : "\n         * The class-only format <code>List</code> containing\n         * <code>\"java.class\"</code>. This <code>List</code> is unmodifiable.\n         *\n         * @see #getFormats(String)\n         ",
    "links" : [ ]
  }, {
    "name" : "FORMAT_PROPERTIES",
    "type" : "List<String>",
    "comment" : "\n         * The properties-only format <code>List</code> containing\n         * <code>\"java.properties\"</code>. This <code>List</code> is unmodifiable.\n         *\n         * @see #getFormats(String)\n         ",
    "links" : [ ]
  }, {
    "name" : "TTL_DONT_CACHE",
    "type" : "long",
    "comment" : "\n         * The time-to-live constant for not caching loaded resource bundle\n         * instances.\n         *\n         * @see #getTimeToLive(String, Locale)\n         ",
    "links" : [ ]
  }, {
    "name" : "TTL_NO_EXPIRATION_CONTROL",
    "type" : "long",
    "comment" : "\n         * The time-to-live constant for disabling the expiration control\n         * for loaded resource bundle instances in the cache.\n         *\n         * @see #getTimeToLive(String, Locale)\n         ",
    "links" : [ ]
  }, {
    "name" : "INSTANCE",
    "type" : "Control",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CANDIDATES_CACHE",
    "type" : "CandidateListCache",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static final Control getControl(List<String> formats)",
    "returnType" : "Control",
    "comment" : "\n         * Returns a <code>ResourceBundle.Control</code> in which the {@link\n         * #getFormats(String) getFormats} method returns the specified\n         * <code>formats</code>. The <code>formats</code> must be equal to\n         * one of {@link Control#FORMAT_PROPERTIES}, {@link\n         * Control#FORMAT_CLASS} or {@link\n         * Control#FORMAT_DEFAULT}. <code>ResourceBundle.Control</code>\n         * instances returned by this method are singletons and thread-safe.\n         *\n         * <p>Specifying {@link Control#FORMAT_DEFAULT} is equivalent to\n         * instantiating the <code>ResourceBundle.Control</code> class,\n         * except that this method returns a singleton.\n         *\n         * @param formats\n         *        the formats to be returned by the\n         *        <code>ResourceBundle.Control.getFormats</code> method\n         * @return a <code>ResourceBundle.Control</code> supporting the\n         *        specified <code>formats</code>\n         * @exception NullPointerException\n         *        if <code>formats</code> is <code>null</code>\n         * @exception IllegalArgumentException\n         *        if <code>formats</code> is unknown\n         ",
    "links" : [ "#FORMAT_CLASS", "#FORMAT_DEFAULT", "#getFormats(String)", "#FORMAT_PROPERTIES" ]
  }, {
    "name" : "public static final Control getNoFallbackControl(List<String> formats)",
    "returnType" : "Control",
    "comment" : "\n         * Returns a <code>ResourceBundle.Control</code> in which the {@link\n         * #getFormats(String) getFormats} method returns the specified\n         * <code>formats</code> and the {@link\n         * Control#getFallbackLocale(String, Locale) getFallbackLocale}\n         * method returns <code>null</code>. The <code>formats</code> must\n         * be equal to one of {@link Control#FORMAT_PROPERTIES}, {@link\n         * Control#FORMAT_CLASS} or {@link Control#FORMAT_DEFAULT}.\n         * <code>ResourceBundle.Control</code> instances returned by this\n         * method are singletons and thread-safe.\n         *\n         * @param formats\n         *        the formats to be returned by the\n         *        <code>ResourceBundle.Control.getFormats</code> method\n         * @return a <code>ResourceBundle.Control</code> supporting the\n         *        specified <code>formats</code> with no fallback\n         *        <code>Locale</code> support\n         * @exception NullPointerException\n         *        if <code>formats</code> is <code>null</code>\n         * @exception IllegalArgumentException\n         *        if <code>formats</code> is unknown\n         ",
    "links" : [ "#FORMAT_CLASS", "#getFallbackLocale(String", "#FORMAT_DEFAULT", "#getFormats(String)", "#FORMAT_PROPERTIES" ]
  }, {
    "name" : "public List<String> getFormats(String baseName)",
    "returnType" : "List<String>",
    "comment" : "\n         * Returns a <code>List</code> of <code>String</code>s containing\n         * formats to be used to load resource bundles for the given\n         * <code>baseName</code>. The <code>ResourceBundle.getBundle</code>\n         * factory method tries to load resource bundles with formats in the\n         * order specified by the list. The list returned by this method\n         * must have at least one <code>String</code>. The predefined\n         * formats are <code>\"java.class\"</code> for class-based resource\n         * bundles and <code>\"java.properties\"</code> for {@linkplain\n         * PropertyResourceBundle properties-based} ones. Strings starting\n         * with <code>\"java.\"</code> are reserved for future extensions and\n         * must not be used by application-defined formats.\n         *\n         * <p>It is not a requirement to return an immutable (unmodifiable)\n         * <code>List</code>.  However, the returned <code>List</code> must\n         * not be mutated after it has been returned by\n         * <code>getFormats</code>.\n         *\n         * <p>The default implementation returns {@link #FORMAT_DEFAULT} so\n         * that the <code>ResourceBundle.getBundle</code> factory method\n         * looks up first class-based resource bundles, then\n         * properties-based ones.\n         *\n         * @param baseName\n         *        the base name of the resource bundle, a fully qualified class\n         *        name\n         * @return a <code>List</code> of <code>String</code>s containing\n         *        formats for loading resource bundles.\n         * @exception NullPointerException\n         *        if <code>baseName</code> is null\n         * @see #FORMAT_DEFAULT\n         * @see #FORMAT_CLASS\n         * @see #FORMAT_PROPERTIES\n         ",
    "links" : [ "#FORMAT_DEFAULT" ]
  }, {
    "name" : "public List<Locale> getCandidateLocales(String baseName, Locale locale)",
    "returnType" : "List<Locale>",
    "comment" : "\n         * Returns a <code>List</code> of <code>Locale</code>s as candidate\n         * locales for <code>baseName</code> and <code>locale</code>. This\n         * method is called by the <code>ResourceBundle.getBundle</code>\n         * factory method each time the factory method tries finding a\n         * resource bundle for a target <code>Locale</code>.\n         *\n         * <p>The sequence of the candidate locales also corresponds to the\n         * runtime resource lookup path (also known as the <I>parent\n         * chain</I>), if the corresponding resource bundles for the\n         * candidate locales exist and their parents are not defined by\n         * loaded resource bundles themselves.  The last element of the list\n         * must be a {@linkplain Locale#ROOT root locale} if it is desired to\n         * have the base bundle as the terminal of the parent chain.\n         *\n         * <p>If the given locale is equal to <code>Locale.ROOT</code> (the\n         * root locale), a <code>List</code> containing only the root\n         * <code>Locale</code> must be returned. In this case, the\n         * <code>ResourceBundle.getBundle</code> factory method loads only\n         * the base bundle as the resulting resource bundle.\n         *\n         * <p>It is not a requirement to return an immutable (unmodifiable)\n         * <code>List</code>. However, the returned <code>List</code> must not\n         * be mutated after it has been returned by\n         * <code>getCandidateLocales</code>.\n         *\n         * <p>The default implementation returns a <code>List</code> containing\n         * <code>Locale</code>s using the rules described below.  In the\n         * description below, <em>L</em>, <em>S</em>, <em>C</em> and <em>V</em>\n         * respectively represent non-empty language, script, country, and\n         * variant.  For example, [<em>L</em>, <em>C</em>] represents a\n         * <code>Locale</code> that has non-empty values only for language and\n         * country.  The form <em>L</em>(\"xx\") represents the (non-empty)\n         * language value is \"xx\".  For all cases, <code>Locale</code>s whose\n         * final component values are empty strings are omitted.\n         *\n         * <ol><li>For an input <code>Locale</code> with an empty script value,\n         * append candidate <code>Locale</code>s by omitting the final component\n         * one by one as below:\n         *\n         * <ul>\n         * <li> [<em>L</em>, <em>C</em>, <em>V</em>] </li>\n         * <li> [<em>L</em>, <em>C</em>] </li>\n         * <li> [<em>L</em>] </li>\n         * <li> <code>Locale.ROOT</code> </li>\n         * </ul></li>\n         *\n         * <li>For an input <code>Locale</code> with a non-empty script value,\n         * append candidate <code>Locale</code>s by omitting the final component\n         * up to language, then append candidates generated from the\n         * <code>Locale</code> with country and variant restored:\n         *\n         * <ul>\n         * <li> [<em>L</em>, <em>S</em>, <em>C</em>, <em>V</em>]</li>\n         * <li> [<em>L</em>, <em>S</em>, <em>C</em>]</li>\n         * <li> [<em>L</em>, <em>S</em>]</li>\n         * <li> [<em>L</em>, <em>C</em>, <em>V</em>]</li>\n         * <li> [<em>L</em>, <em>C</em>]</li>\n         * <li> [<em>L</em>]</li>\n         * <li> <code>Locale.ROOT</code></li>\n         * </ul></li>\n         *\n         * <li>For an input <code>Locale</code> with a variant value consisting\n         * of multiple subtags separated by underscore, generate candidate\n         * <code>Locale</code>s by omitting the variant subtags one by one, then\n         * insert them after every occurrence of <code> Locale</code>s with the\n         * full variant value in the original list.  For example, if\n         * the variant consists of two subtags <em>V1</em> and <em>V2</em>:\n         *\n         * <ul>\n         * <li> [<em>L</em>, <em>S</em>, <em>C</em>, <em>V1</em>, <em>V2</em>]</li>\n         * <li> [<em>L</em>, <em>S</em>, <em>C</em>, <em>V1</em>]</li>\n         * <li> [<em>L</em>, <em>S</em>, <em>C</em>]</li>\n         * <li> [<em>L</em>, <em>S</em>]</li>\n         * <li> [<em>L</em>, <em>C</em>, <em>V1</em>, <em>V2</em>]</li>\n         * <li> [<em>L</em>, <em>C</em>, <em>V1</em>]</li>\n         * <li> [<em>L</em>, <em>C</em>]</li>\n         * <li> [<em>L</em>]</li>\n         * <li> <code>Locale.ROOT</code></li>\n         * </ul></li>\n         *\n         * <li>Special cases for Chinese.  When an input <code>Locale</code> has the\n         * language \"zh\" (Chinese) and an empty script value, either \"Hans\" (Simplified) or\n         * \"Hant\" (Traditional) might be supplied, depending on the country.\n         * When the country is \"CN\" (China) or \"SG\" (Singapore), \"Hans\" is supplied.\n         * When the country is \"HK\" (Hong Kong SAR China), \"MO\" (Macau SAR China),\n         * or \"TW\" (Taiwan), \"Hant\" is supplied.  For all other countries or when the country\n         * is empty, no script is supplied.  For example, for <code>Locale(\"zh\", \"CN\")\n         * </code>, the candidate list will be:\n         * <ul>\n         * <li> [<em>L</em>(\"zh\"), <em>S</em>(\"Hans\"), <em>C</em>(\"CN\")]</li>\n         * <li> [<em>L</em>(\"zh\"), <em>S</em>(\"Hans\")]</li>\n         * <li> [<em>L</em>(\"zh\"), <em>C</em>(\"CN\")]</li>\n         * <li> [<em>L</em>(\"zh\")]</li>\n         * <li> <code>Locale.ROOT</code></li>\n         * </ul>\n         *\n         * For <code>Locale(\"zh\", \"TW\")</code>, the candidate list will be:\n         * <ul>\n         * <li> [<em>L</em>(\"zh\"), <em>S</em>(\"Hant\"), <em>C</em>(\"TW\")]</li>\n         * <li> [<em>L</em>(\"zh\"), <em>S</em>(\"Hant\")]</li>\n         * <li> [<em>L</em>(\"zh\"), <em>C</em>(\"TW\")]</li>\n         * <li> [<em>L</em>(\"zh\")]</li>\n         * <li> <code>Locale.ROOT</code></li>\n         * </ul></li>\n         *\n         * <li>Special cases for Norwegian.  Both <code>Locale(\"no\", \"NO\",\n         * \"NY\")</code> and <code>Locale(\"nn\", \"NO\")</code> represent Norwegian\n         * Nynorsk.  When a locale's language is \"nn\", the standard candidate\n         * list is generated up to [<em>L</em>(\"nn\")], and then the following\n         * candidates are added:\n         *\n         * <ul><li> [<em>L</em>(\"no\"), <em>C</em>(\"NO\"), <em>V</em>(\"NY\")]</li>\n         * <li> [<em>L</em>(\"no\"), <em>C</em>(\"NO\")]</li>\n         * <li> [<em>L</em>(\"no\")]</li>\n         * <li> <code>Locale.ROOT</code></li>\n         * </ul>\n         *\n         * If the locale is exactly <code>Locale(\"no\", \"NO\", \"NY\")</code>, it is first\n         * converted to <code>Locale(\"nn\", \"NO\")</code> and then the above procedure is\n         * followed.\n         *\n         * <p>Also, Java treats the language \"no\" as a synonym of Norwegian\n         * Bokm&#xE5;l \"nb\".  Except for the single case <code>Locale(\"no\",\n         * \"NO\", \"NY\")</code> (handled above), when an input <code>Locale</code>\n         * has language \"no\" or \"nb\", candidate <code>Locale</code>s with\n         * language code \"no\" and \"nb\" are interleaved, first using the\n         * requested language, then using its synonym. For example,\n         * <code>Locale(\"nb\", \"NO\", \"POSIX\")</code> generates the following\n         * candidate list:\n         *\n         * <ul>\n         * <li> [<em>L</em>(\"nb\"), <em>C</em>(\"NO\"), <em>V</em>(\"POSIX\")]</li>\n         * <li> [<em>L</em>(\"no\"), <em>C</em>(\"NO\"), <em>V</em>(\"POSIX\")]</li>\n         * <li> [<em>L</em>(\"nb\"), <em>C</em>(\"NO\")]</li>\n         * <li> [<em>L</em>(\"no\"), <em>C</em>(\"NO\")]</li>\n         * <li> [<em>L</em>(\"nb\")]</li>\n         * <li> [<em>L</em>(\"no\")]</li>\n         * <li> <code>Locale.ROOT</code></li>\n         * </ul>\n         *\n         * <code>Locale(\"no\", \"NO\", \"POSIX\")</code> would generate the same list\n         * except that locales with \"no\" would appear before the corresponding\n         * locales with \"nb\".</li>\n         * </ol>\n         *\n         * <p>The default implementation uses an {@link ArrayList} that\n         * overriding implementations may modify before returning it to the\n         * caller. However, a subclass must not modify it after it has\n         * been returned by <code>getCandidateLocales</code>.\n         *\n         * <p>For example, if the given <code>baseName</code> is \"Messages\"\n         * and the given <code>locale</code> is\n         * <code>Locale(\"ja\",&nbsp;\"\",&nbsp;\"XX\")</code>, then a\n         * <code>List</code> of <code>Locale</code>s:\n         * <pre>\n         *     Locale(\"ja\", \"\", \"XX\")\n         *     Locale(\"ja\")\n         *     Locale.ROOT\n         * </pre>\n         * is returned. And if the resource bundles for the \"ja\" and\n         * \"\" <code>Locale</code>s are found, then the runtime resource\n         * lookup path (parent chain) is:\n         * <pre>{@code\n         *     Messages_ja -> Messages\n         * }</pre>\n         *\n         * @param baseName\n         *        the base name of the resource bundle, a fully\n         *        qualified class name\n         * @param locale\n         *        the locale for which a resource bundle is desired\n         * @return a <code>List</code> of candidate\n         *        <code>Locale</code>s for the given <code>locale</code>\n         * @exception NullPointerException\n         *        if <code>baseName</code> or <code>locale</code> is\n         *        <code>null</code>\n         ",
    "links" : [ "java.util.ArrayList" ]
  }, {
    "name" : "public Locale getFallbackLocale(String baseName, Locale locale)",
    "returnType" : "Locale",
    "comment" : "\n         * Returns a <code>Locale</code> to be used as a fallback locale for\n         * further resource bundle searches by the\n         * <code>ResourceBundle.getBundle</code> factory method. This method\n         * is called from the factory method every time when no resulting\n         * resource bundle has been found for <code>baseName</code> and\n         * <code>locale</code>, where locale is either the parameter for\n         * <code>ResourceBundle.getBundle</code> or the previous fallback\n         * locale returned by this method.\n         *\n         * <p>The method returns <code>null</code> if no further fallback\n         * search is desired.\n         *\n         * <p>The default implementation returns the {@linkplain\n         * Locale#getDefault() default <code>Locale</code>} if the given\n         * <code>locale</code> isn't the default one.  Otherwise,\n         * <code>null</code> is returned.\n         *\n         * @param baseName\n         *        the base name of the resource bundle, a fully\n         *        qualified class name for which\n         *        <code>ResourceBundle.getBundle</code> has been\n         *        unable to find any resource bundles (except for the\n         *        base bundle)\n         * @param locale\n         *        the <code>Locale</code> for which\n         *        <code>ResourceBundle.getBundle</code> has been\n         *        unable to find any resource bundles (except for the\n         *        base bundle)\n         * @return a <code>Locale</code> for the fallback search,\n         *        or <code>null</code> if no further fallback search\n         *        is desired.\n         * @exception NullPointerException\n         *        if <code>baseName</code> or <code>locale</code>\n         *        is <code>null</code>\n         ",
    "links" : [ ]
  }, {
    "name" : "public ResourceBundle newBundle(String baseName, Locale locale, String format, ClassLoader loader, boolean reload) throws IllegalAccessException, InstantiationException, IOException",
    "returnType" : "ResourceBundle",
    "comment" : "\n         * Instantiates a resource bundle for the given bundle name of the\n         * given format and locale, using the given class loader if\n         * necessary. This method returns <code>null</code> if there is no\n         * resource bundle available for the given parameters. If a resource\n         * bundle can't be instantiated due to an unexpected error, the\n         * error must be reported by throwing an <code>Error</code> or\n         * <code>Exception</code> rather than simply returning\n         * <code>null</code>.\n         *\n         * <p>If the <code>reload</code> flag is <code>true</code>, it\n         * indicates that this method is being called because the previously\n         * loaded resource bundle has expired.\n         *\n         * <p>The default implementation instantiates a\n         * <code>ResourceBundle</code> as follows.\n         *\n         * <ul>\n         *\n         * <li>The bundle name is obtained by calling {@link\n         * #toBundleName(String, Locale) toBundleName(baseName,\n         * locale)}.</li>\n         *\n         * <li>If <code>format</code> is <code>\"java.class\"</code>, the\n         * {@link Class} specified by the bundle name is loaded with the\n         * given class loader. If the {@code Class} is found and accessible\n         * then the <code>ResourceBundle</code> is instantiated.  The\n         * resource bundle is accessible if the package of the bundle class file\n         * is open unconditionally; otherwise, {@code IllegalAccessException}\n         * will be thrown.\n         * Note that the <code>reload</code> flag is ignored for loading\n         * class-based resource bundles in this default implementation.\n         * </li>\n         *\n         * <li>If <code>format</code> is <code>\"java.properties\"</code>,\n         * {@link #toResourceName(String, String) toResourceName(bundlename,\n         * \"properties\")} is called to get the resource name.\n         * If <code>reload</code> is <code>true</code>, {@link\n         * ClassLoader#getResource(String) load.getResource} is called\n         * to get a {@link URL} for creating a {@link\n         * URLConnection}. This <code>URLConnection</code> is used to\n         * {@linkplain URLConnection#setUseCaches(boolean) disable the\n         * caches} of the underlying resource loading layers,\n         * and to {@linkplain URLConnection#getInputStream() get an\n         * <code>InputStream</code>}.\n         * Otherwise, {@link ClassLoader#getResourceAsStream(String)\n         * loader.getResourceAsStream} is called to get an {@link\n         * InputStream}. Then, a {@link\n         * PropertyResourceBundle} is constructed with the\n         * <code>InputStream</code>.</li>\n         *\n         * <li>If <code>format</code> is neither <code>\"java.class\"</code>\n         * nor <code>\"java.properties\"</code>, an\n         * <code>IllegalArgumentException</code> is thrown.</li>\n         *\n         * </ul>\n         *\n         * @param baseName\n         *        the base bundle name of the resource bundle, a fully\n         *        qualified class name\n         * @param locale\n         *        the locale for which the resource bundle should be\n         *        instantiated\n         * @param format\n         *        the resource bundle format to be loaded\n         * @param loader\n         *        the <code>ClassLoader</code> to use to load the bundle\n         * @param reload\n         *        the flag to indicate bundle reloading; <code>true</code>\n         *        if reloading an expired resource bundle,\n         *        <code>false</code> otherwise\n         * @return the resource bundle instance,\n         *        or <code>null</code> if none could be found.\n         * @exception NullPointerException\n         *        if <code>bundleName</code>, <code>locale</code>,\n         *        <code>format</code>, or <code>loader</code> is\n         *        <code>null</code>, or if <code>null</code> is returned by\n         *        {@link #toBundleName(String, Locale) toBundleName}\n         * @exception IllegalArgumentException\n         *        if <code>format</code> is unknown, or if the resource\n         *        found for the given parameters contains malformed data.\n         * @exception ClassCastException\n         *        if the loaded class cannot be cast to <code>ResourceBundle</code>\n         * @exception IllegalAccessException\n         *        if the class or its nullary constructor is not\n         *        accessible.\n         * @exception InstantiationException\n         *        if the instantiation of a class fails for some other\n         *        reason.\n         * @exception ExceptionInInitializerError\n         *        if the initialization provoked by this method fails.\n         * @exception SecurityException\n         *        If a security manager is present and creation of new\n         *        instances is denied. See {@link Class#newInstance()}\n         *        for details.\n         * @exception IOException\n         *        if an error occurred when reading resources using\n         *        any I/O operations\n         * @revised 9\n         ",
    "links" : [ "#toResourceName(String", "java.net.URL", "#getResourceAsStream(String)", "java.util.PropertyResourceBundle", "#newInstance()", "Class", "#toBundleName(String", "java.net.JarURLConnection", "#getResource(String)", "java.io.InputStream" ]
  }, {
    "name" : "public long getTimeToLive(String baseName, Locale locale)",
    "returnType" : "long",
    "comment" : "\n         * Returns the time-to-live (TTL) value for resource bundles that\n         * are loaded under this\n         * <code>ResourceBundle.Control</code>. Positive time-to-live values\n         * specify the number of milliseconds a bundle can remain in the\n         * cache without being validated against the source data from which\n         * it was constructed. The value 0 indicates that a bundle must be\n         * validated each time it is retrieved from the cache. {@link\n         * #TTL_DONT_CACHE} specifies that loaded resource bundles are not\n         * put in the cache. {@link #TTL_NO_EXPIRATION_CONTROL} specifies\n         * that loaded resource bundles are put in the cache with no\n         * expiration control.\n         *\n         * <p>The expiration affects only the bundle loading process by the\n         * <code>ResourceBundle.getBundle</code> factory method.  That is,\n         * if the factory method finds a resource bundle in the cache that\n         * has expired, the factory method calls the {@link\n         * #needsReload(String, Locale, String, ClassLoader, ResourceBundle,\n         * long) needsReload} method to determine whether the resource\n         * bundle needs to be reloaded. If <code>needsReload</code> returns\n         * <code>true</code>, the cached resource bundle instance is removed\n         * from the cache. Otherwise, the instance stays in the cache,\n         * updated with the new TTL value returned by this method.\n         *\n         * <p>All cached resource bundles are subject to removal from the\n         * cache due to memory constraints of the runtime environment.\n         * Returning a large positive value doesn't mean to lock loaded\n         * resource bundles in the cache.\n         *\n         * <p>The default implementation returns {@link #TTL_NO_EXPIRATION_CONTROL}.\n         *\n         * @param baseName\n         *        the base name of the resource bundle for which the\n         *        expiration value is specified.\n         * @param locale\n         *        the locale of the resource bundle for which the\n         *        expiration value is specified.\n         * @return the time (0 or a positive millisecond offset from the\n         *        cached time) to get loaded bundles expired in the cache,\n         *        {@link #TTL_NO_EXPIRATION_CONTROL} to disable the\n         *        expiration control, or {@link #TTL_DONT_CACHE} to disable\n         *        caching.\n         * @exception NullPointerException\n         *        if <code>baseName</code> or <code>locale</code> is\n         *        <code>null</code>\n         ",
    "links" : [ "#TTL_NO_EXPIRATION_CONTROL", "#TTL_DONT_CACHE", "#needsReload(String" ]
  }, {
    "name" : "public boolean needsReload(String baseName, Locale locale, String format, ClassLoader loader, ResourceBundle bundle, long loadTime)",
    "returnType" : "boolean",
    "comment" : "\n         * Determines if the expired <code>bundle</code> in the cache needs\n         * to be reloaded based on the loading time given by\n         * <code>loadTime</code> or some other criteria. The method returns\n         * <code>true</code> if reloading is required; <code>false</code>\n         * otherwise. <code>loadTime</code> is a millisecond offset since\n         * the <a href=\"Calendar.html#Epoch\"> <code>Calendar</code>\n         * Epoch</a>.\n         *\n         * <p>\n         * The calling <code>ResourceBundle.getBundle</code> factory method\n         * calls this method on the <code>ResourceBundle.Control</code>\n         * instance used for its current invocation, not on the instance\n         * used in the invocation that originally loaded the resource\n         * bundle.\n         *\n         * <p>The default implementation compares <code>loadTime</code> and\n         * the last modified time of the source data of the resource\n         * bundle. If it's determined that the source data has been modified\n         * since <code>loadTime</code>, <code>true</code> is\n         * returned. Otherwise, <code>false</code> is returned. This\n         * implementation assumes that the given <code>format</code> is the\n         * same string as its file suffix if it's not one of the default\n         * formats, <code>\"java.class\"</code> or\n         * <code>\"java.properties\"</code>.\n         *\n         * @param baseName\n         *        the base bundle name of the resource bundle, a\n         *        fully qualified class name\n         * @param locale\n         *        the locale for which the resource bundle\n         *        should be instantiated\n         * @param format\n         *        the resource bundle format to be loaded\n         * @param loader\n         *        the <code>ClassLoader</code> to use to load the bundle\n         * @param bundle\n         *        the resource bundle instance that has been expired\n         *        in the cache\n         * @param loadTime\n         *        the time when <code>bundle</code> was loaded and put\n         *        in the cache\n         * @return <code>true</code> if the expired bundle needs to be\n         *        reloaded; <code>false</code> otherwise.\n         * @exception NullPointerException\n         *        if <code>baseName</code>, <code>locale</code>,\n         *        <code>format</code>, <code>loader</code>, or\n         *        <code>bundle</code> is <code>null</code>\n         ",
    "links" : [ ]
  }, {
    "name" : "public String toBundleName(String baseName, Locale locale)",
    "returnType" : "String",
    "comment" : "\n         * Converts the given <code>baseName</code> and <code>locale</code>\n         * to the bundle name. This method is called from the default\n         * implementation of the {@link #newBundle(String, Locale, String,\n         * ClassLoader, boolean) newBundle} and {@link #needsReload(String,\n         * Locale, String, ClassLoader, ResourceBundle, long) needsReload}\n         * methods.\n         *\n         * <p>This implementation returns the following value:\n         * <pre>\n         *     baseName + \"_\" + language + \"_\" + script + \"_\" + country + \"_\" + variant\n         * </pre>\n         * where <code>language</code>, <code>script</code>, <code>country</code>,\n         * and <code>variant</code> are the language, script, country, and variant\n         * values of <code>locale</code>, respectively. Final component values that\n         * are empty Strings are omitted along with the preceding '_'.  When the\n         * script is empty, the script value is omitted along with the preceding '_'.\n         * If all of the values are empty strings, then <code>baseName</code>\n         * is returned.\n         *\n         * <p>For example, if <code>baseName</code> is\n         * <code>\"baseName\"</code> and <code>locale</code> is\n         * <code>Locale(\"ja\",&nbsp;\"\",&nbsp;\"XX\")</code>, then\n         * <code>\"baseName_ja_&thinsp;_XX\"</code> is returned. If the given\n         * locale is <code>Locale(\"en\")</code>, then\n         * <code>\"baseName_en\"</code> is returned.\n         *\n         * <p>Overriding this method allows applications to use different\n         * conventions in the organization and packaging of localized\n         * resources.\n         *\n         * @param baseName\n         *        the base name of the resource bundle, a fully\n         *        qualified class name\n         * @param locale\n         *        the locale for which a resource bundle should be\n         *        loaded\n         * @return the bundle name for the resource bundle\n         * @exception NullPointerException\n         *        if <code>baseName</code> or <code>locale</code>\n         *        is <code>null</code>\n         ",
    "links" : [ "#newBundle(String", "#needsReload(String" ]
  }, {
    "name" : "public final String toResourceName(String bundleName, String suffix)",
    "returnType" : "String",
    "comment" : "\n         * Converts the given {@code bundleName} to the form required\n         * by the {@link ClassLoader#getResource ClassLoader.getResource}\n         * method by replacing all occurrences of {@code '.'} in\n         * {@code bundleName} with {@code '/'} and appending a\n         * {@code '.'} and the given file {@code suffix}. For\n         * example, if {@code bundleName} is\n         * {@code \"foo.bar.MyResources_ja_JP\"} and {@code suffix}\n         * is {@code \"properties\"}, then\n         * {@code \"foo/bar/MyResources_ja_JP.properties\"} is returned.\n         *\n         * @param bundleName\n         *        the bundle name\n         * @param suffix\n         *        the file type suffix\n         * @return the converted resource name\n         * @exception NullPointerException\n         *         if {@code bundleName} or {@code suffix}\n         *         is {@code null}\n         ",
    "links" : [ "#getResource" ]
  }, {
    "name" : "private String toResourceName0(String bundleName, String suffix)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static final Control getControl(List<String> formats)", "public static final Control getNoFallbackControl(List<String> formats)", "public List<String> getFormats(String baseName)", "public List<Locale> getCandidateLocales(String baseName, Locale locale)", "public Locale getFallbackLocale(String baseName, Locale locale)", "public ResourceBundle newBundle(String baseName, Locale locale, String format, ClassLoader loader, boolean reload) throws IllegalAccessException, InstantiationException, IOException", "public long getTimeToLive(String baseName, Locale locale)", "public boolean needsReload(String baseName, Locale locale, String format, ClassLoader loader, ResourceBundle bundle, long loadTime)", "public String toBundleName(String baseName, Locale locale)", "public final String toResourceName(String bundleName, String suffix)", "private String toResourceName0(String bundleName, String suffix)" ],
  "variableNames" : [ "FORMAT_DEFAULT", "FORMAT_CLASS", "FORMAT_PROPERTIES", "TTL_DONT_CACHE", "TTL_NO_EXPIRATION_CONTROL", "INSTANCE", "CANDIDATES_CACHE" ]
}