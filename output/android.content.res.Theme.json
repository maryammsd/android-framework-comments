{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/content/res/Resources.java",
  "packageName" : "android.content.res",
  "className" : "Theme",
  "comment" : "\n     * This class holds the current attribute values for a particular theme.\n     * In other words, a Theme is a set of values for resource attributes;\n     * these are used in conjunction with {@link TypedArray}\n     * to resolve the final value for an attribute.\n     * \n     * <p>The Theme's attributes come into play in two ways: (1) a styled\n     * attribute can explicit reference a value in the theme through the\n     * \"?themeAttribute\" syntax; (2) if no value has been defined for a\n     * particular styled attribute, as a last resort we will try to find that\n     * attribute's value in the Theme.\n     * \n     * <p>You will normally use the {@link #obtainStyledAttributes} APIs to\n     * retrieve XML attributes with style and theme information applied.\n     ",
  "variables" : [ {
    "name" : "mThemeImpl",
    "type" : "ResourcesImpl.ThemeImpl",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " void setImpl(ResourcesImpl.ThemeImpl impl)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void applyStyle(int resId, boolean force)",
    "returnType" : "void",
    "comment" : "\n         * Place new attribute values into the theme.  The style resource\n         * specified by <var>resid</var> will be retrieved from this Theme's\n         * resources, its values placed into the Theme object.\n         * \n         * <p>The semantics of this function depends on the <var>force</var>\n         * argument:  If false, only values that are not already defined in\n         * the theme will be copied from the system resource; otherwise, if\n         * any of the style's attributes are already defined in the theme, the\n         * current values in the theme will be overwritten.\n         * \n         * @param resId The resource ID of a style resource from which to\n         *              obtain attribute values.\n         * @param force If true, values in the style resource will always be\n         *              used in the theme; otherwise, they will only be used\n         *              if not already defined in the theme.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setTo(Theme other)",
    "returnType" : "void",
    "comment" : "\n         * Set this theme to hold the same contents as the theme\n         * <var>other</var>.  If both of these themes are from the same\n         * Resources object, they will be identical after this function\n         * returns.  If they are from different Resources, only the resources\n         * they have in common will be set in this theme.\n         * \n         * @param other The existing Theme to copy from.\n         ",
    "links" : [ ]
  }, {
    "name" : "public TypedArray obtainStyledAttributes(@NonNull @StyleableRes int[] attrs)",
    "returnType" : "TypedArray",
    "comment" : "\n         * Return a TypedArray holding the values defined by\n         * <var>Theme</var> which are listed in <var>attrs</var>.\n         * \n         * <p>Be sure to call {@link TypedArray#recycle() TypedArray.recycle()} when you are done\n         * with the array.\n         * \n         * @param attrs The desired attributes. These attribute IDs must be sorted in ascending\n         *              order.\n         *\n         * @throws NotFoundException Throws NotFoundException if the given ID does not exist.\n         * \n         * @return Returns a TypedArray holding an array of the attribute values.\n         * Be sure to call {@link TypedArray#recycle() TypedArray.recycle()}\n         * when done with it.\n         * \n         * @see Resources#obtainAttributes\n         * @see #obtainStyledAttributes(int, int[])\n         * @see #obtainStyledAttributes(AttributeSet, int[], int, int)\n         ",
    "links" : [ "android.content.res.TypedArray#recycle()" ]
  }, {
    "name" : "public TypedArray obtainStyledAttributes(@StyleRes int resId, @NonNull @StyleableRes int[] attrs) throws NotFoundException",
    "returnType" : "TypedArray",
    "comment" : "\n         * Return a TypedArray holding the values defined by the style\n         * resource <var>resid</var> which are listed in <var>attrs</var>.\n         * \n         * <p>Be sure to call {@link TypedArray#recycle() TypedArray.recycle()} when you are done\n         * with the array.\n         * \n         * @param resId The desired style resource.\n         * @param attrs The desired attributes in the style. These attribute IDs must be sorted in\n         *              ascending order.\n         * \n         * @throws NotFoundException Throws NotFoundException if the given ID does not exist.\n         * \n         * @return Returns a TypedArray holding an array of the attribute values.\n         * Be sure to call {@link TypedArray#recycle() TypedArray.recycle()}\n         * when done with it.\n         * \n         * @see Resources#obtainAttributes\n         * @see #obtainStyledAttributes(int[])\n         * @see #obtainStyledAttributes(AttributeSet, int[], int, int)\n         ",
    "links" : [ "android.content.res.TypedArray#recycle()" ]
  }, {
    "name" : "public TypedArray obtainStyledAttributes(@Nullable AttributeSet set, @NonNull @StyleableRes int[] attrs, @AttrRes int defStyleAttr, @StyleRes int defStyleRes)",
    "returnType" : "TypedArray",
    "comment" : "\n         * Return a TypedArray holding the attribute values in\n         * <var>set</var>\n         * that are listed in <var>attrs</var>.  In addition, if the given\n         * AttributeSet specifies a style class (through the \"style\" attribute),\n         * that style will be applied on top of the base attributes it defines.\n         * \n         * <p>Be sure to call {@link TypedArray#recycle() TypedArray.recycle()} when you are done\n         * with the array.\n         * \n         * <p>When determining the final value of a particular attribute, there\n         * are four inputs that come into play:</p>\n         * \n         * <ol>\n         *     <li> Any attribute values in the given AttributeSet.\n         *     <li> The style resource specified in the AttributeSet (named\n         *     \"style\").\n         *     <li> The default style specified by <var>defStyleAttr</var> and\n         *     <var>defStyleRes</var>\n         *     <li> The base values in this theme.\n         * </ol>\n         * \n         * <p>Each of these inputs is considered in-order, with the first listed\n         * taking precedence over the following ones.  In other words, if in the\n         * AttributeSet you have supplied <code>&lt;Button\n         * textColor=\"#ff000000\"&gt;</code>, then the button's text will\n         * <em>always</em> be black, regardless of what is specified in any of\n         * the styles.\n         * \n         * @param set The base set of attribute values.  May be null.\n         * @param attrs The desired attributes to be retrieved. These attribute IDs must be sorted\n         *              in ascending order.\n         * @param defStyleAttr An attribute in the current theme that contains a\n         *                     reference to a style resource that supplies\n         *                     defaults values for the TypedArray.  Can be\n         *                     0 to not look for defaults.\n         * @param defStyleRes A resource identifier of a style resource that\n         *                    supplies default values for the TypedArray,\n         *                    used only if defStyleAttr is 0 or can not be found\n         *                    in the theme.  Can be 0 to not look for defaults.\n         * \n         * @return Returns a TypedArray holding an array of the attribute values.\n         * Be sure to call {@link TypedArray#recycle() TypedArray.recycle()}\n         * when done with it.\n         * \n         * @see Resources#obtainAttributes\n         * @see #obtainStyledAttributes(int[])\n         * @see #obtainStyledAttributes(int, int[])\n         ",
    "links" : [ "android.content.res.TypedArray#recycle()" ]
  }, {
    "name" : "public TypedArray resolveAttributes(@NonNull int[] values, @NonNull int[] attrs)",
    "returnType" : "TypedArray",
    "comment" : "\n         * Retrieve the values for a set of attributes in the Theme. The\n         * contents of the typed array are ultimately filled in by\n         * {@link Resources#getValue}.\n         *\n         * @param values The base set of attribute values, must be equal in\n         *               length to {@code attrs}. All values must be of type\n         *               {@link TypedValue#TYPE_ATTRIBUTE}.\n         * @param attrs The desired attributes to be retrieved. These attribute IDs must be sorted\n         *              in ascending order.\n         * @return Returns a TypedArray holding an array of the attribute\n         *         values. Be sure to call {@link TypedArray#recycle()}\n         *         when done with it.\n         * @hide\n         ",
    "links" : [ "android.content.res.Resources#getValue", "android.content.res.TypedArray#recycle()", "android.util.TypedValue#TYPE_ATTRIBUTE" ]
  }, {
    "name" : "public boolean resolveAttribute(int resid, TypedValue outValue, boolean resolveRefs)",
    "returnType" : "boolean",
    "comment" : "\n         * Retrieve the value of an attribute in the Theme.  The contents of\n         * <var>outValue</var> are ultimately filled in by\n         * {@link Resources#getValue}.\n         * \n         * @param resid The resource identifier of the desired theme\n         *              attribute.\n         * @param outValue Filled in with the ultimate resource value supplied\n         *                 by the attribute.\n         * @param resolveRefs If true, resource references will be walked; if\n         *                    false, <var>outValue</var> may be a\n         *                    TYPE_REFERENCE.  In either case, it will never\n         *                    be a TYPE_ATTRIBUTE.\n         * \n         * @return boolean Returns true if the attribute was found and\n         *         <var>outValue</var> is valid, else false.\n         ",
    "links" : [ "android.content.res.Resources#getValue" ]
  }, {
    "name" : "public int[] getAllAttributes()",
    "returnType" : "int[]",
    "comment" : "\n         * Gets all of the attribute ids associated with this {@link Theme}. For debugging only.\n         *\n         * @return The int array containing attribute ids associated with this {@link Theme}.\n         * @hide\n         ",
    "links" : [ "Theme" ]
  }, {
    "name" : "public Resources getResources()",
    "returnType" : "Resources",
    "comment" : "\n         * Returns the resources to which this theme belongs.\n         *\n         * @return Resources to which this theme belongs.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Drawable getDrawable(@DrawableRes int id) throws NotFoundException",
    "returnType" : "Drawable",
    "comment" : "\n         * Return a drawable object associated with a particular resource ID\n         * and styled for the Theme.\n         *\n         * @param id The desired resource identifier, as generated by the aapt\n         *           tool. This integer encodes the package, type, and resource\n         *           entry. The value 0 is an invalid identifier.\n         * @return Drawable An object that can be used to draw this resource.\n         * @throws NotFoundException Throws NotFoundException if the given ID\n         *         does not exist.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getChangingConfigurations()",
    "returnType" : "int",
    "comment" : "\n         * Returns a bit mask of configuration changes that will impact this\n         * theme (and thus require completely reloading it).\n         *\n         * @return a bit mask of configuration changes, as defined by\n         *         {@link ActivityInfo}\n         * @see ActivityInfo\n         ",
    "links" : [ "android.content.pm.ActivityInfo" ]
  }, {
    "name" : "public void dump(int priority, String tag, String prefix)",
    "returnType" : "void",
    "comment" : "\n         * Print contents of this theme out to the log.  For debugging only.\n         * \n         * @param priority The log priority to use.\n         * @param tag The log tag to use.\n         * @param prefix Text to prefix each line printed.\n         ",
    "links" : [ ]
  }, {
    "name" : " long getNativeTheme()",
    "returnType" : "long",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : " int getAppliedStyleResId()",
    "returnType" : "int",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : "public ThemeKey getKey()",
    "returnType" : "ThemeKey",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "private String getResourceNameFromHexString(String hexString)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String[] getTheme()",
    "returnType" : "String[]",
    "comment" : "\n         * Parses {@link #getKey()} and returns a String array that holds pairs of\n         * adjacent Theme data: resource name followed by whether or not it was\n         * forced, as specified by {@link #applyStyle(int, boolean)}.\n         *\n         * @hide\n         ",
    "links" : [ "#getKey()", "#applyStyle(int" ]
  }, {
    "name" : "public void encode(@NonNull ViewHierarchyEncoder encoder)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void rebase()",
    "returnType" : "void",
    "comment" : "\n         * Rebases the theme against the parent Resource object's current\n         * configuration by re-applying the styles passed to\n         * {@link #applyStyle(int, boolean)}.\n         ",
    "links" : [ "#applyStyle(int" ]
  }, {
    "name" : "public int getExplicitStyle(@Nullable AttributeSet set)",
    "returnType" : "int",
    "comment" : "\n         * Returns the resource ID for the style specified using {@code style=\"...\"} in the\n         * {@link AttributeSet}'s backing XML element or {@link Resources#ID_NULL} otherwise if not\n         * specified or otherwise not applicable.\n         * <p>\n         * Each {@link android.view.View} can have an explicit style specified in the layout file.\n         * This style is used first during the {@link android.view.View} attribute resolution, then\n         * if an attribute is not defined there the resource system looks at default style and theme\n         * as fallbacks.\n         *\n         * @param set The base set of attribute values.\n         *\n         * @return The resource ID for the style specified using {@code style=\"...\"} in the\n         *      {@link AttributeSet}'s backing XML element or {@link Resources#ID_NULL} otherwise\n         *      if not specified or otherwise not applicable.\n         ",
    "links" : [ "android.util.AttributeSet", "android.view.View", "android.content.res.Resources#ID_NULL" ]
  }, {
    "name" : "public int[] getAttributeResolutionStack(@AttrRes int defStyleAttr, @StyleRes int defStyleRes, @StyleRes int explicitStyleRes)",
    "returnType" : "int[]",
    "comment" : "\n         * Returns the ordered list of resource ID that are considered when resolving attribute\n         * values when making an equivalent call to\n         * {@link #obtainStyledAttributes(AttributeSet, int[], int, int)} . The list will include\n         * a set of explicit styles ({@code explicitStyleRes} and it will include the default styles\n         * ({@code defStyleAttr} and {@code defStyleRes}).\n         *\n         * @param defStyleAttr An attribute in the current theme that contains a\n         *                     reference to a style resource that supplies\n         *                     defaults values for the TypedArray.  Can be\n         *                     0 to not look for defaults.\n         * @param defStyleRes A resource identifier of a style resource that\n         *                    supplies default values for the TypedArray,\n         *                    used only if defStyleAttr is 0 or can not be found\n         *                    in the theme.  Can be 0 to not look for defaults.\n         * @param explicitStyleRes A resource identifier of an explicit style resource.\n         * @return ordered list of resource ID that are considered when resolving attribute values.\n         ",
    "links" : [ "#obtainStyledAttributes(AttributeSet" ]
  } ],
  "variableNames" : [ "mThemeImpl" ],
  "methodNames" : [ " void setImpl(ResourcesImpl.ThemeImpl impl)", "public void applyStyle(int resId, boolean force)", "public void setTo(Theme other)", "public TypedArray obtainStyledAttributes(@NonNull @StyleableRes int[] attrs)", "public TypedArray obtainStyledAttributes(@StyleRes int resId, @NonNull @StyleableRes int[] attrs) throws NotFoundException", "public TypedArray obtainStyledAttributes(@Nullable AttributeSet set, @NonNull @StyleableRes int[] attrs, @AttrRes int defStyleAttr, @StyleRes int defStyleRes)", "public TypedArray resolveAttributes(@NonNull int[] values, @NonNull int[] attrs)", "public boolean resolveAttribute(int resid, TypedValue outValue, boolean resolveRefs)", "public int[] getAllAttributes()", "public Resources getResources()", "public Drawable getDrawable(@DrawableRes int id) throws NotFoundException", "public int getChangingConfigurations()", "public void dump(int priority, String tag, String prefix)", " long getNativeTheme()", " int getAppliedStyleResId()", "public ThemeKey getKey()", "private String getResourceNameFromHexString(String hexString)", "public String[] getTheme()", "public void encode(@NonNull ViewHierarchyEncoder encoder)", "public void rebase()", "public int getExplicitStyle(@Nullable AttributeSet set)", "public int[] getAttributeResolutionStack(@AttrRes int defStyleAttr, @StyleRes int defStyleRes, @StyleRes int explicitStyleRes)" ]
}