{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/concurrent/CyclicBarrier.java",
  "packageName" : "java.util.concurrent",
  "className" : "CyclicBarrier",
  "comment" : "\n * A synchronization aid that allows a set of threads to all wait for\n * each other to reach a common barrier point.  CyclicBarriers are\n * useful in programs involving a fixed sized party of threads that\n * must occasionally wait for each other. The barrier is called\n * <em>cyclic</em> because it can be re-used after the waiting threads\n * are released.\n *\n * <p>A {@code CyclicBarrier} supports an optional {@link Runnable} command\n * that is run once per barrier point, after the last thread in the party\n * arrives, but before any threads are released.\n * This <em>barrier action</em> is useful\n * for updating shared-state before any of the parties continue.\n *\n * <p><b>Sample usage:</b> Here is an example of using a barrier in a\n * parallel decomposition design:\n *\n * <pre> {@code\n * class Solver {\n *   final int N;\n *   final float[][] data;\n *   final CyclicBarrier barrier;\n *\n *   class Worker implements Runnable {\n *     int myRow;\n *     Worker(int row) { myRow = row; }\n *     public void run() {\n *       while (!done()) {\n *         processRow(myRow);\n *\n *         try {\n *           barrier.await();\n *         } catch (InterruptedException ex) {\n *           return;\n *         } catch (BrokenBarrierException ex) {\n *           return;\n *         }\n *       }\n *     }\n *   }\n *\n *   public Solver(float[][] matrix) {\n *     data = matrix;\n *     N = matrix.length;\n *     Runnable barrierAction = () -> mergeRows(...);\n *     barrier = new CyclicBarrier(N, barrierAction);\n *\n *     List<Thread> threads = new ArrayList<>(N);\n *     for (int i = 0; i < N; i++) {\n *       Thread thread = new Thread(new Worker(i));\n *       threads.add(thread);\n *       thread.start();\n *     }\n *\n *     // wait until done\n *     for (Thread thread : threads)\n *       try {\n *         thread.join();\n *       } catch (InterruptedException ex) { }\n *   }\n * }}</pre>\n *\n * Here, each worker thread processes a row of the matrix, then waits at the\n * barrier until all rows have been processed. When all rows are processed the\n * supplied {@link Runnable} barrier action is executed and merges the rows.\n * If the merger determines that a solution has been found then {@code done()}\n * will return {@code true} and each worker will terminate.\n *\n * <p>If the barrier action does not rely on the parties being suspended when\n * it is executed, then any of the threads in the party could execute that\n * action when it is released. To facilitate this, each invocation of\n * {@link #await} returns the arrival index of that thread at the barrier.\n * You can then choose which thread should execute the barrier action, for\n * example:\n * <pre> {@code\n * if (barrier.await() == 0) {\n *   // log the completion of this iteration\n * }}</pre>\n *\n * <p>The {@code CyclicBarrier} uses an all-or-none breakage model\n * for failed synchronization attempts: If a thread leaves a barrier\n * point prematurely because of interruption, failure, or timeout, all\n * other threads waiting at that barrier point will also leave\n * abnormally via {@link BrokenBarrierException} (or\n * {@link InterruptedException} if they too were interrupted at about\n * the same time).\n *\n * <p>Memory consistency effects: Actions in a thread prior to calling\n * {@code await()}\n * <a href=\"package-summary.html#MemoryVisibility\"><i>happen-before</i></a>\n * actions that are part of the barrier action, which in turn\n * <i>happen-before</i> actions following a successful return from the\n * corresponding {@code await()} in other threads.\n *\n * @see CountDownLatch\n * @see Phaser\n *\n * @author Doug Lea\n * @since 1.5\n ",
  "links" : [ "Runnable", "java.util.concurrent.BrokenBarrierException", "#await", "InterruptedException" ],
  "variables" : [ {
    "name" : "lock",
    "type" : "ReentrantLock",
    "comment" : " The lock for guarding barrier entry ",
    "links" : [ ]
  }, {
    "name" : "trip",
    "type" : "Condition",
    "comment" : " Condition to wait on until tripped ",
    "links" : [ ]
  }, {
    "name" : "parties",
    "type" : "int",
    "comment" : " The number of parties ",
    "links" : [ ]
  }, {
    "name" : "barrierCommand",
    "type" : "Runnable",
    "comment" : " The command to run when tripped ",
    "links" : [ ]
  }, {
    "name" : "generation",
    "type" : "Generation",
    "comment" : " The current generation ",
    "links" : [ ]
  }, {
    "name" : "count",
    "type" : "int",
    "comment" : "\n     * Number of parties still waiting. Counts down from parties to 0\n     * on each generation.  It is reset to parties on each new\n     * generation or when broken.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void nextGeneration()",
    "returnType" : "void",
    "comment" : "\n     * Updates state on barrier trip and wakes up everyone.\n     * Called only while holding lock.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void breakBarrier()",
    "returnType" : "void",
    "comment" : "\n     * Sets current barrier generation as broken and wakes up everyone.\n     * Called only while holding lock.\n     ",
    "links" : [ ]
  }, {
    "name" : "private int dowait(boolean timed, long nanos) throws InterruptedException, BrokenBarrierException, TimeoutException",
    "returnType" : "int",
    "comment" : "\n     * Main barrier code, covering the various policies.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getParties()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of parties required to trip this barrier.\n     *\n     * @return the number of parties required to trip this barrier\n     ",
    "links" : [ ]
  }, {
    "name" : "public int await() throws InterruptedException, BrokenBarrierException",
    "returnType" : "int",
    "comment" : "\n     * Waits until all {@linkplain #getParties parties} have invoked\n     * {@code await} on this barrier.\n     *\n     * <p>If the current thread is not the last to arrive then it is\n     * disabled for thread scheduling purposes and lies dormant until\n     * one of the following things happens:\n     * <ul>\n     * <li>The last thread arrives; or\n     * <li>Some other thread {@linkplain Thread#interrupt interrupts}\n     * the current thread; or\n     * <li>Some other thread {@linkplain Thread#interrupt interrupts}\n     * one of the other waiting threads; or\n     * <li>Some other thread times out while waiting for barrier; or\n     * <li>Some other thread invokes {@link #reset} on this barrier.\n     * </ul>\n     *\n     * <p>If the current thread:\n     * <ul>\n     * <li>has its interrupted status set on entry to this method; or\n     * <li>is {@linkplain Thread#interrupt interrupted} while waiting\n     * </ul>\n     * then {@link InterruptedException} is thrown and the current thread's\n     * interrupted status is cleared.\n     *\n     * <p>If the barrier is {@link #reset} while any thread is waiting,\n     * or if the barrier {@linkplain #isBroken is broken} when\n     * {@code await} is invoked, or while any thread is waiting, then\n     * {@link BrokenBarrierException} is thrown.\n     *\n     * <p>If any thread is {@linkplain Thread#interrupt interrupted} while waiting,\n     * then all other waiting threads will throw\n     * {@link BrokenBarrierException} and the barrier is placed in the broken\n     * state.\n     *\n     * <p>If the current thread is the last thread to arrive, and a\n     * non-null barrier action was supplied in the constructor, then the\n     * current thread runs the action before allowing the other threads to\n     * continue.\n     * If an exception occurs during the barrier action then that exception\n     * will be propagated in the current thread and the barrier is placed in\n     * the broken state.\n     *\n     * @return the arrival index of the current thread, where index\n     *         {@code getParties() - 1} indicates the first\n     *         to arrive and zero indicates the last to arrive\n     * @throws InterruptedException if the current thread was interrupted\n     *         while waiting\n     * @throws BrokenBarrierException if <em>another</em> thread was\n     *         interrupted or timed out while the current thread was\n     *         waiting, or the barrier was reset, or the barrier was\n     *         broken when {@code await} was called, or the barrier\n     *         action (if present) failed due to an exception\n     ",
    "links" : [ "#reset", "java.util.concurrent.BrokenBarrierException", "InterruptedException" ]
  }, {
    "name" : "public int await(long timeout, TimeUnit unit) throws InterruptedException, BrokenBarrierException, TimeoutException",
    "returnType" : "int",
    "comment" : "\n     * Waits until all {@linkplain #getParties parties} have invoked\n     * {@code await} on this barrier, or the specified waiting time elapses.\n     *\n     * <p>If the current thread is not the last to arrive then it is\n     * disabled for thread scheduling purposes and lies dormant until\n     * one of the following things happens:\n     * <ul>\n     * <li>The last thread arrives; or\n     * <li>The specified timeout elapses; or\n     * <li>Some other thread {@linkplain Thread#interrupt interrupts}\n     * the current thread; or\n     * <li>Some other thread {@linkplain Thread#interrupt interrupts}\n     * one of the other waiting threads; or\n     * <li>Some other thread times out while waiting for barrier; or\n     * <li>Some other thread invokes {@link #reset} on this barrier.\n     * </ul>\n     *\n     * <p>If the current thread:\n     * <ul>\n     * <li>has its interrupted status set on entry to this method; or\n     * <li>is {@linkplain Thread#interrupt interrupted} while waiting\n     * </ul>\n     * then {@link InterruptedException} is thrown and the current thread's\n     * interrupted status is cleared.\n     *\n     * <p>If the specified waiting time elapses then {@link TimeoutException}\n     * is thrown. If the time is less than or equal to zero, the\n     * method will not wait at all.\n     *\n     * <p>If the barrier is {@link #reset} while any thread is waiting,\n     * or if the barrier {@linkplain #isBroken is broken} when\n     * {@code await} is invoked, or while any thread is waiting, then\n     * {@link BrokenBarrierException} is thrown.\n     *\n     * <p>If any thread is {@linkplain Thread#interrupt interrupted} while\n     * waiting, then all other waiting threads will throw {@link\n     * BrokenBarrierException} and the barrier is placed in the broken\n     * state.\n     *\n     * <p>If the current thread is the last thread to arrive, and a\n     * non-null barrier action was supplied in the constructor, then the\n     * current thread runs the action before allowing the other threads to\n     * continue.\n     * If an exception occurs during the barrier action then that exception\n     * will be propagated in the current thread and the barrier is placed in\n     * the broken state.\n     *\n     * @param timeout the time to wait for the barrier\n     * @param unit the time unit of the timeout parameter\n     * @return the arrival index of the current thread, where index\n     *         {@code getParties() - 1} indicates the first\n     *         to arrive and zero indicates the last to arrive\n     * @throws InterruptedException if the current thread was interrupted\n     *         while waiting\n     * @throws TimeoutException if the specified timeout elapses.\n     *         In this case the barrier will be broken.\n     * @throws BrokenBarrierException if <em>another</em> thread was\n     *         interrupted or timed out while the current thread was\n     *         waiting, or the barrier was reset, or the barrier was broken\n     *         when {@code await} was called, or the barrier action (if\n     *         present) failed due to an exception\n     ",
    "links" : [ "#reset", "java.util.concurrent.TimeoutException", "java.util.concurrent.BrokenBarrierException", "InterruptedException" ]
  }, {
    "name" : "public boolean isBroken()",
    "returnType" : "boolean",
    "comment" : "\n     * Queries if this barrier is in a broken state.\n     *\n     * @return {@code true} if one or more parties broke out of this\n     *         barrier due to interruption or timeout since\n     *         construction or the last reset, or a barrier action\n     *         failed due to an exception; {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void reset()",
    "returnType" : "void",
    "comment" : "\n     * Resets the barrier to its initial state.  If any parties are\n     * currently waiting at the barrier, they will return with a\n     * {@link BrokenBarrierException}. Note that resets <em>after</em>\n     * a breakage has occurred for other reasons can be complicated to\n     * carry out; threads need to re-synchronize in some other way,\n     * and choose one to perform the reset.  It may be preferable to\n     * instead create a new barrier for subsequent use.\n     ",
    "links" : [ "java.util.concurrent.BrokenBarrierException" ]
  }, {
    "name" : "public int getNumberWaiting()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of parties currently waiting at the barrier.\n     * This method is primarily useful for debugging and assertions.\n     *\n     * @return the number of parties currently blocked in {@link #await}\n     ",
    "links" : [ "#await" ]
  } ],
  "methodNames" : [ "private void nextGeneration()", "private void breakBarrier()", "private int dowait(boolean timed, long nanos) throws InterruptedException, BrokenBarrierException, TimeoutException", "public int getParties()", "public int await() throws InterruptedException, BrokenBarrierException", "public int await(long timeout, TimeUnit unit) throws InterruptedException, BrokenBarrierException, TimeoutException", "public boolean isBroken()", "public void reset()", "public int getNumberWaiting()" ],
  "variableNames" : [ "lock", "trip", "parties", "barrierCommand", "generation", "count" ]
}