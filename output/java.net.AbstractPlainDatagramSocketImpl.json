{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/net/AbstractPlainDatagramSocketImpl.java",
  "packageName" : "java.net",
  "className" : "AbstractPlainDatagramSocketImpl",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "timeout",
    "type" : "int",
    "comment" : " timeout value for receive() ",
    "links" : [ ]
  }, {
    "name" : "connected",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "trafficClass",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "connectedAddress",
    "type" : "InetAddress",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "connectedPort",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "guard",
    "type" : "CloseGuard",
    "comment" : " Android-added: CloseGuard.",
    "links" : [ ]
  }, {
    "name" : "os",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "connectDisabled",
    "type" : "boolean",
    "comment" : "\n     * flag set if the native connect() call not to be used\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected synchronized void create() throws SocketException",
    "returnType" : "void",
    "comment" : "\n     * Creates a datagram socket\n     ",
    "links" : [ ]
  }, {
    "name" : "protected synchronized void bind(int lport, InetAddress laddr) throws SocketException",
    "returnType" : "void",
    "comment" : "\n     * Binds a datagram socket to a local port.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract void bind0(int lport, InetAddress laddr) throws SocketException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected abstract void send(DatagramPacket p) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Sends a datagram packet. The packet contains the data and the\n     * destination address to send the packet to.\n     * @param p the packet to be sent.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void connect(InetAddress address, int port) throws SocketException",
    "returnType" : "void",
    "comment" : "\n     * Connects a datagram socket to a remote destination. This associates the remote\n     * address with the local socket so that datagrams may only be sent to this destination\n     * and received from this destination.\n     * @param address the remote InetAddress to connect to\n     * @param port the remote port number\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void disconnect()",
    "returnType" : "void",
    "comment" : "\n     * Disconnects a previously connected socket. Does nothing if the socket was\n     * not connected already.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract int peek(InetAddress i) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Peek at the packet to see who it is from.\n     * @param i the address to populate with the sender address\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract int peekData(DatagramPacket p) throws IOException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected synchronized void receive(DatagramPacket p) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Receive the datagram packet.\n     * @param p the packet to receive into\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract void receive0(DatagramPacket p) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected abstract void setTimeToLive(int ttl) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Set the TTL (time-to-live) option.\n     * @param ttl TTL to be set.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract int getTimeToLive() throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Get the TTL (time-to-live) option.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract void setTTL(byte ttl) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Set the TTL (time-to-live) option.\n     * @param ttl TTL to be set.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract byte getTTL() throws IOException",
    "returnType" : "byte",
    "comment" : "\n     * Get the TTL (time-to-live) option.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void join(InetAddress inetaddr) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Join the multicast group.\n     * @param inetaddr multicast address to join.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void leave(InetAddress inetaddr) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Leave the multicast group.\n     * @param inetaddr multicast address to leave.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void joinGroup(SocketAddress mcastaddr, NetworkInterface netIf) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected abstract void join(InetAddress inetaddr, NetworkInterface netIf) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void leaveGroup(SocketAddress mcastaddr, NetworkInterface netIf) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Leave the multicast group.\n     * @param mcastaddr  multicast address to leave.\n     * @param netIf specified the local interface to leave the group at\n     * @throws  IllegalArgumentException if mcastaddr is null or is a\n     *          SocketAddress subclass not supported by this socket\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract void leave(InetAddress inetaddr, NetworkInterface netIf) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void close()",
    "returnType" : "void",
    "comment" : "\n     * Close the socket.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected boolean isClosed()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void finalize()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setOption(int optID, Object o) throws SocketException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Object getOption(int optID) throws SocketException",
    "returnType" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static InetAddress getNIFirstAddress(int niIndex) throws SocketException",
    "returnType" : "InetAddress",
    "comment" : " Return the first address bound to NetworkInterface with given ID.\n     * In case of niIndex == 0 or no address return anyLocalAddress\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract void datagramSocketCreate() throws SocketException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected abstract void datagramSocketClose()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected abstract void socketSetOption(int opt, Object val) throws SocketException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected abstract Object socketGetOption(int opt) throws SocketException",
    "returnType" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected abstract void connect0(InetAddress address, int port) throws SocketException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected abstract void disconnect0(int family)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected boolean nativeConnectDisabled()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " int dataAvailable()",
    "returnType" : "int",
    "comment" : " Android-changed: rewritten on the top of IoBridge.",
    "links" : [ ]
  } ],
  "methodNames" : [ "protected synchronized void create() throws SocketException", "protected synchronized void bind(int lport, InetAddress laddr) throws SocketException", "protected abstract void bind0(int lport, InetAddress laddr) throws SocketException", "protected abstract void send(DatagramPacket p) throws IOException", "protected void connect(InetAddress address, int port) throws SocketException", "protected void disconnect()", "protected abstract int peek(InetAddress i) throws IOException", "protected abstract int peekData(DatagramPacket p) throws IOException", "protected synchronized void receive(DatagramPacket p) throws IOException", "protected abstract void receive0(DatagramPacket p) throws IOException", "protected abstract void setTimeToLive(int ttl) throws IOException", "protected abstract int getTimeToLive() throws IOException", "protected abstract void setTTL(byte ttl) throws IOException", "protected abstract byte getTTL() throws IOException", "protected void join(InetAddress inetaddr) throws IOException", "protected void leave(InetAddress inetaddr) throws IOException", "protected void joinGroup(SocketAddress mcastaddr, NetworkInterface netIf) throws IOException", "protected abstract void join(InetAddress inetaddr, NetworkInterface netIf) throws IOException", "protected void leaveGroup(SocketAddress mcastaddr, NetworkInterface netIf) throws IOException", "protected abstract void leave(InetAddress inetaddr, NetworkInterface netIf) throws IOException", "protected void close()", "protected boolean isClosed()", "protected void finalize()", "public void setOption(int optID, Object o) throws SocketException", "public Object getOption(int optID) throws SocketException", " static InetAddress getNIFirstAddress(int niIndex) throws SocketException", "protected abstract void datagramSocketCreate() throws SocketException", "protected abstract void datagramSocketClose()", "protected abstract void socketSetOption(int opt, Object val) throws SocketException", "protected abstract Object socketGetOption(int opt) throws SocketException", "protected abstract void connect0(InetAddress address, int port) throws SocketException", "protected abstract void disconnect0(int family)", "protected boolean nativeConnectDisabled()", " int dataAvailable()" ],
  "variableNames" : [ "timeout", "connected", "trafficClass", "connectedAddress", "connectedPort", "guard", "os", "connectDisabled" ]
}