{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/wifi/aware/WifiAwareNetworkSpecifier.java",
  "packageName" : "android.net.wifi.aware",
  "className" : "Builder",
  "comment" : "\n     * A builder class for a Wi-Fi Aware network specifier to set up an Aware connection with a\n     * peer.\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mDiscoverySession",
    "type" : "DiscoverySession",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPeerHandle",
    "type" : "PeerHandle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPskPassphrase",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPmk",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPort",
    "type" : "int",
    "comment" : " invalid value",
    "links" : [ ]
  }, {
    "name" : "mTransportProtocol",
    "type" : "int",
    "comment" : " invalid value",
    "links" : [ ]
  }, {
    "name" : "mChannel",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsRequired",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSecurityConfig",
    "type" : "WifiAwareDataPathSecurityConfig",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Builder setPskPassphrase(@NonNull String pskPassphrase)",
    "returnType" : "Builder",
    "comment" : "\n         * Configure the PSK Passphrase for the Wi-Fi Aware connection being requested. This method\n         * is optional - if not called, then an Open (unencrypted) connection will be created.\n         * Note: Use\n         * {@link #setDataPathSecurityConfig(WifiAwareDataPathSecurityConfig)} to avoid\n         * interoperability issues when devices support different cipher suites by explicitly\n         * specifying a cipher suite as opposed to relying on a default cipher suite.\n         * {@link WifiAwareDataPathSecurityConfig.Builder#Builder(int)}\n         *\n         * @param pskPassphrase The (optional) passphrase to be used to encrypt the link. Use the\n         *                      {@link #setPmk(byte[])} to specify a PMK.\n         * @return the current {@link Builder} builder, enabling chaining of builder\n         *         methods.\n         ",
    "links" : [ "WifiAwareDataPathSecurityConfig.Builder#Builder(int)", "#setDataPathSecurityConfig(WifiAwareDataPathSecurityConfig)", "Builder", "#setPmk(byte" ]
  }, {
    "name" : "public Builder setPmk(@NonNull byte[] pmk)",
    "returnType" : "Builder",
    "comment" : "\n         * Configure the PMK for the Wi-Fi Aware connection being requested. This method\n         * is optional - if not called, then an Open (unencrypted) connection will be created.\n         * Note: Use\n         * {@link #setDataPathSecurityConfig(WifiAwareDataPathSecurityConfig)} to avoid\n         * interoperability issues when devices support different cipher suites by explicitly\n         * specifying a cipher suite as opposed to relying on a default cipher suite.\n         *\n         * @param pmk A PMK (pairwise master key, see IEEE 802.11i) specifying the key to use for\n         *            encrypting the data-path. Use the {@link #setPskPassphrase(String)} to\n         *            specify a Passphrase.\n         * @return the current {@link Builder} builder, enabling chaining of builder\n         *         methods.\n         ",
    "links" : [ "#setDataPathSecurityConfig(WifiAwareDataPathSecurityConfig)", "Builder", "#setPskPassphrase(String)" ]
  }, {
    "name" : "public Builder setPort(@IntRange(from = 0, to = 65535) int port)",
    "returnType" : "Builder",
    "comment" : "\n         * Configure the port number which will be used to create a connection over this link. This\n         * configuration should only be done on the server device, e.g. the device creating the\n         * {@link java.net.ServerSocket}.\n         * <p>Notes:\n         * <ul>\n         *     <li>The server device must be the Publisher device!\n         *     <li>The port information can only be specified on secure links, specified using\n         *     {@link #setDataPathSecurityConfig(WifiAwareDataPathSecurityConfig)}\n         * </ul>\n         *\n         * @param port A positive integer indicating the port to be used for communication.\n         * @return the current {@link Builder} builder, enabling chaining of builder\n         *         methods.\n         ",
    "links" : [ "java.net.ServerSocket", "#setDataPathSecurityConfig(WifiAwareDataPathSecurityConfig)", "Builder" ]
  }, {
    "name" : "public Builder setTransportProtocol(@IntRange(from = 0, to = 255) int transportProtocol)",
    "returnType" : "Builder",
    "comment" : "\n         * Configure the transport protocol which will be used to create a connection over this\n         * link. This configuration should only be done on the server device, e.g. the device\n         * creating the {@link java.net.ServerSocket} for TCP.\n         * <p>Notes:\n         * <ul>\n         *     <li>The server device must be the Publisher device!\n         *     <li>The transport protocol information can only be specified on secure links,\n         *     specified using\n         *     {@link #setDataPathSecurityConfig(WifiAwareDataPathSecurityConfig)}.\n         * </ul>\n         * The transport protocol number is assigned by the Internet Assigned Numbers Authority\n         * (IANA) https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml.\n         *\n         * @param transportProtocol The transport protocol to be used for communication.\n         * @return the current {@link Builder} builder, enabling chaining of builder\n         *         methods.\n         ",
    "links" : [ "java.net.ServerSocket", "#setDataPathSecurityConfig(WifiAwareDataPathSecurityConfig)", "Builder" ]
  }, {
    "name" : "public Builder setChannelFrequencyMhz(@IntRange(from = 0) int channelInMhz, boolean required)",
    "returnType" : "Builder",
    "comment" : "\n         * Configure the Channel frequency for the Wi-Fi Aware connection being requested. This\n         * method is optional - if not called, then channelInMhz to use will be decided by firmware.\n         * Only use this when {@link WifiAwareManager#isSetChannelOnDataPathSupported()} is true,\n         * otherwise the set channelInMhz will be ignored.\n         * @param channelInMhz Channel frequency in Mhz.\n         * @param required If set to true, Channel request is specified and must be respected.\n         *               If the firmware cannot honor the request then the data-path request\n         *               is rejected. Otherwise, requested channelInMhz is a recommendation and\n         *               may be overridden by the firmware.\n         * @return the current {@link Builder} builder, enabling chaining of builder methods.\n         ",
    "links" : [ "android.net.wifi.aware.WifiAwareManager#isSetChannelOnDataPathSupported()", "Builder" ]
  }, {
    "name" : "public Builder setDataPathSecurityConfig(@NonNull WifiAwareDataPathSecurityConfig securityConfig)",
    "returnType" : "Builder",
    "comment" : "\n         * Configure security config for the Wi-Fi Aware connection being requested. This method\n         * is optional - if not called, then an Open (unencrypted) connection will be created.\n         * Note: this method is the superset of the {@link #setPmk(byte[])} and\n         * {@link #setPskPassphrase(String)}.\n         *\n         * @param securityConfig The (optional) security config to be used to encrypt the link.\n         * @return the current {@link Builder} builder, enabling chaining of builder\n         *         methods.\n         ",
    "links" : [ "Builder", "#setPskPassphrase(String)", "#setPmk(byte" ]
  }, {
    "name" : "public WifiAwareNetworkSpecifier build()",
    "returnType" : "WifiAwareNetworkSpecifier",
    "comment" : "\n         * Create a {@link android.net.NetworkRequest.Builder#setNetworkSpecifier(NetworkSpecifier)}\n         * for a WiFi Aware connection (link) to the specified peer. The\n         * {@link android.net.NetworkRequest.Builder#addTransportType(int)} should be set to\n         * {@link android.net.NetworkCapabilities#TRANSPORT_WIFI_AWARE}.\n         * <p> The default builder constructor will initialize a NetworkSpecifier which requests an\n         * open (non-encrypted) link. To request an encrypted link use the\n         * {@link #setPskPassphrase(String)} or {@link #setPmk(byte[])} builder methods.\n         *\n         * @return A {@link NetworkSpecifier} to be used to construct\n         * {@link android.net.NetworkRequest.Builder#setNetworkSpecifier(NetworkSpecifier)} to pass\n         * to {@link android.net.ConnectivityManager#requestNetwork(android.net.NetworkRequest,\n         * android.net.ConnectivityManager.NetworkCallback)}\n         * [or other varieties of that API].\n         ",
    "links" : [ "android.net.ConnectivityManager#requestNetwork(android.net.NetworkRequest", "#setPskPassphrase(String)", "android.net.NetworkRequest.Builder#addTransportType(int)", "android.net.NetworkSpecifier", "android.net.NetworkRequest.Builder#setNetworkSpecifier(NetworkSpecifier)", "android.net.NetworkCapabilities#TRANSPORT_WIFI_AWARE", "#setPmk(byte" ]
  } ],
  "methodNames" : [ "public Builder setPskPassphrase(@NonNull String pskPassphrase)", "public Builder setPmk(@NonNull byte[] pmk)", "public Builder setPort(@IntRange(from = 0, to = 65535) int port)", "public Builder setTransportProtocol(@IntRange(from = 0, to = 255) int transportProtocol)", "public Builder setChannelFrequencyMhz(@IntRange(from = 0) int channelInMhz, boolean required)", "public Builder setDataPathSecurityConfig(@NonNull WifiAwareDataPathSecurityConfig securityConfig)", "public WifiAwareNetworkSpecifier build()" ],
  "variableNames" : [ "mDiscoverySession", "mPeerHandle", "mPskPassphrase", "mPmk", "mPort", "mTransportProtocol", "mChannel", "mIsRequired", "mSecurityConfig" ]
}