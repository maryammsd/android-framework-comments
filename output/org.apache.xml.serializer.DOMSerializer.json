{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xml/serializer/DOMSerializer.java",
  "packageName" : "org.apache.xml.serializer",
  "className" : "DOMSerializer",
  "comment" : "\n * Interface for a DOM serializer implementation.\n * <p>\n * The DOMSerializer is a facet of a serializer and is obtained from the\n * asDOMSerializer() method of the ({@link Serializer}) interface. \n * A serializer may or may not support a DOM serializer, if it does not then the \n * return value from asDOMSerializer() is null.\n * <p>\n * Example:\n * <pre>\n * // Create a document to be serialized\n * org.w3c.dom.Document doc = ...;\n * \n * // Create a Serializer that will be used\n * // to serialize the document  \n * org.apache.xml.serializer.Serializer ser = ...;\n *\n * // Set the Writer to write output to, and \n * // serialize the DOM using that Serializer\n * java.io.StringWriter sw = new java.io.StringWriter();\n * ser.setWriter(sw);\n * DOMSerialzier dser = ser.asDOMSerializer();\n * dser.serialize(doc);\n * \n * // Write out the serialized XML in the String.\n * System.out.println(sw.toString());\n * </pre>\n * \n * @see OutputPropertiesFactory\n * @see SerializerFactory\n * @see Serializer\n * \n * @xsl.usage general\n *\n ",
  "links" : [ "org.apache.xml.serializer.Serializer" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public void serialize(Node node) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Serializes the DOM node. Throws an exception only if an I/O\n     * exception occured while serializing.\n     * \n     * This interface is a public API.\n     *\n     * @param node the DOM node to serialize\n     * @throws IOException if an I/O exception occured while serializing\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void serialize(Node node) throws IOException" ],
  "variableNames" : [ ]
}