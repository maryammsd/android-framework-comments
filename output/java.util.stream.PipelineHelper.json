{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/stream/PipelineHelper.java",
  "packageName" : "java.util.stream",
  "className" : "PipelineHelper",
  "comment" : " Android-changed: Made public for CTS tests only.",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " abstract StreamShape getSourceShape()",
    "returnType" : "StreamShape",
    "comment" : "\n     * Gets the stream shape for the source of the pipeline segment.\n     *\n     * @return the stream shape for the source of the pipeline segment.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getStreamAndOpFlags()",
    "returnType" : "int",
    "comment" : " Android-changed: Made public for CTS tests only.",
    "links" : [ ]
  }, {
    "name" : " abstract long exactOutputSizeIfKnown(Spliterator<P_IN> spliterator)",
    "returnType" : "long",
    "comment" : "\n     * Returns the exact output size of the portion of the output resulting from\n     * applying the pipeline stages described by this {@code PipelineHelper} to\n     * the portion of the input described by the provided\n     * {@code Spliterator}, if known.  If not known or known infinite, will\n     * return {@code -1}.\n     *\n     * @apiNote\n     * The exact output size is known if the {@code Spliterator} has the\n     * {@code SIZED} characteristic, and the operation flags\n     * {@link StreamOpFlag#SIZED} is known on the combined stream and operation\n     * flags. The exact output size may differ from spliterator size,\n     * if pipeline contains a slice operation.\n     *\n     * @param spliterator the spliterator describing the relevant portion of the\n     *        source data\n     * @return the exact size if known, or -1 if infinite or unknown\n     ",
    "links" : [ "java.util.stream.StreamOpFlag#SIZED" ]
  }, {
    "name" : " abstract S wrapAndCopyInto(S sink, Spliterator<P_IN> spliterator)",
    "returnType" : "S",
    "comment" : "\n     * Applies the pipeline stages described by this {@code PipelineHelper} to\n     * the provided {@code Spliterator} and send the results to the provided\n     * {@code Sink}.\n     *\n     * @implSpec\n     * The implementation behaves as if:\n     * <pre>{@code\n     *     copyInto(wrapSink(sink), spliterator);\n     * }</pre>\n     *\n     * @param sink the {@code Sink} to receive the results\n     * @param spliterator the spliterator describing the source input to process\n     ",
    "links" : [ ]
  }, {
    "name" : " abstract void copyInto(Sink<P_IN> wrappedSink, Spliterator<P_IN> spliterator)",
    "returnType" : "void",
    "comment" : "\n     * Pushes elements obtained from the {@code Spliterator} into the provided\n     * {@code Sink}.  If the stream pipeline is known to have short-circuiting\n     * stages in it (see {@link StreamOpFlag#SHORT_CIRCUIT}), the\n     * {@link Sink#cancellationRequested()} is checked after each\n     * element, stopping if cancellation is requested.\n     *\n     * @implSpec\n     * This method conforms to the {@code Sink} protocol of calling\n     * {@code Sink.begin} before pushing elements, via {@code Sink.accept}, and\n     * calling {@code Sink.end} after all elements have been pushed.\n     *\n     * @param wrappedSink the destination {@code Sink}\n     * @param spliterator the source {@code Spliterator}\n     ",
    "links" : [ "java.util.stream.Sink#cancellationRequested()", "java.util.stream.StreamOpFlag#SHORT_CIRCUIT" ]
  }, {
    "name" : " abstract boolean copyIntoWithCancel(Sink<P_IN> wrappedSink, Spliterator<P_IN> spliterator)",
    "returnType" : "boolean",
    "comment" : "\n     * Pushes elements obtained from the {@code Spliterator} into the provided\n     * {@code Sink}, checking {@link Sink#cancellationRequested()} after each\n     * element, and stopping if cancellation is requested.\n     *\n     * @implSpec\n     * This method conforms to the {@code Sink} protocol of calling\n     * {@code Sink.begin} before pushing elements, via {@code Sink.accept}, and\n     * calling {@code Sink.end} after all elements have been pushed or if\n     * cancellation is requested.\n     *\n     * @param wrappedSink the destination {@code Sink}\n     * @param spliterator the source {@code Spliterator}\n     * @return true if the cancellation was requested\n     ",
    "links" : [ "java.util.stream.Sink#cancellationRequested()" ]
  }, {
    "name" : "public abstract Sink<P_IN> wrapSink(Sink<P_OUT> sink)",
    "returnType" : "Sink<P_IN>",
    "comment" : " Android-changed: Made public for CTS tests only.",
    "links" : [ ]
  }, {
    "name" : " abstract Spliterator<P_OUT> wrapSpliterator(Spliterator<P_IN> spliterator)",
    "returnType" : "Spliterator<P_OUT>",
    "comment" : "\n     *\n     * @param spliterator\n     * @param <P_IN>\n     * @return\n     ",
    "links" : [ ]
  }, {
    "name" : " abstract Node.Builder<P_OUT> makeNodeBuilder(long exactSizeIfKnown, IntFunction<P_OUT[]> generator)",
    "returnType" : "Node.Builder<P_OUT>",
    "comment" : "\n     * Constructs a @{link Node.Builder} compatible with the output shape of\n     * this {@code PipelineHelper}.\n     *\n     * @param exactSizeIfKnown if >=0 then a builder will be created that has a\n     *        fixed capacity of exactly sizeIfKnown elements; if < 0 then the\n     *        builder has variable capacity.  A fixed capacity builder will fail\n     *        if an element is added after the builder has reached capacity.\n     * @param generator a factory function for array instances\n     * @return a {@code Node.Builder} compatible with the output shape of this\n     *         {@code PipelineHelper}\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Node<P_OUT> evaluate(Spliterator<P_IN> spliterator, boolean flatten, IntFunction<P_OUT[]> generator)",
    "returnType" : "Node<P_OUT>",
    "comment" : " Android-changed: Made public for CTS tests only.",
    "links" : [ ]
  } ],
  "methodNames" : [ " abstract StreamShape getSourceShape()", "public abstract int getStreamAndOpFlags()", " abstract long exactOutputSizeIfKnown(Spliterator<P_IN> spliterator)", " abstract S wrapAndCopyInto(S sink, Spliterator<P_IN> spliterator)", " abstract void copyInto(Sink<P_IN> wrappedSink, Spliterator<P_IN> spliterator)", " abstract boolean copyIntoWithCancel(Sink<P_IN> wrappedSink, Spliterator<P_IN> spliterator)", "public abstract Sink<P_IN> wrapSink(Sink<P_OUT> sink)", " abstract Spliterator<P_OUT> wrapSpliterator(Spliterator<P_IN> spliterator)", " abstract Node.Builder<P_OUT> makeNodeBuilder(long exactSizeIfKnown, IntFunction<P_OUT[]> generator)", "public abstract Node<P_OUT> evaluate(Spliterator<P_IN> spliterator, boolean flatten, IntFunction<P_OUT[]> generator)" ],
  "variableNames" : [ ]
}