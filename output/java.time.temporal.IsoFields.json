{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/time/temporal/IsoFields.java",
  "packageName" : "java.time.temporal",
  "className" : "IsoFields",
  "comment" : "\n * Fields and units specific to the ISO-8601 calendar system,\n * including quarter-of-year and week-based-year.\n * <p>\n * This class defines fields and units that are specific to the ISO calendar system.\n *\n * <h2>Quarter of year</h2>\n * The ISO-8601 standard is based on the standard civic 12 month year.\n * This is commonly divided into four quarters, often abbreviated as Q1, Q2, Q3 and Q4.\n * <p>\n * January, February and March are in Q1.\n * April, May and June are in Q2.\n * July, August and September are in Q3.\n * October, November and December are in Q4.\n * <p>\n * The complete date is expressed using three fields:\n * <ul>\n * <li>{@link #DAY_OF_QUARTER DAY_OF_QUARTER} - the day within the quarter, from 1 to 90, 91 or 92\n * <li>{@link #QUARTER_OF_YEAR QUARTER_OF_YEAR} - the quarter within the year, from 1 to 4\n * <li>{@link ChronoField#YEAR YEAR} - the standard ISO year\n * </ul>\n *\n * <h2>Week based years</h2>\n * The ISO-8601 standard was originally intended as a data interchange format,\n * defining a string format for dates and times. However, it also defines an\n * alternate way of expressing the date, based on the concept of week-based-year.\n * <p>\n * The date is expressed using three fields:\n * <ul>\n * <li>{@link ChronoField#DAY_OF_WEEK DAY_OF_WEEK} - the standard field defining the\n *  day-of-week from Monday (1) to Sunday (7)\n * <li>{@link #WEEK_OF_WEEK_BASED_YEAR} - the week within the week-based-year\n * <li>{@link #WEEK_BASED_YEAR WEEK_BASED_YEAR} - the week-based-year\n * </ul>\n * The week-based-year itself is defined relative to the standard ISO proleptic year.\n * It differs from the standard year in that it always starts on a Monday.\n * <p>\n * The first week of a week-based-year is the first Monday-based week of the standard\n * ISO year that has at least 4 days in the new year.\n * <ul>\n * <li>If January 1st is Monday then week 1 starts on January 1st\n * <li>If January 1st is Tuesday then week 1 starts on December 31st of the previous standard year\n * <li>If January 1st is Wednesday then week 1 starts on December 30th of the previous standard year\n * <li>If January 1st is Thursday then week 1 starts on December 29th of the previous standard year\n * <li>If January 1st is Friday then week 1 starts on January 4th\n * <li>If January 1st is Saturday then week 1 starts on January 3rd\n * <li>If January 1st is Sunday then week 1 starts on January 2nd\n * </ul>\n * There are 52 weeks in most week-based years, however on occasion there are 53 weeks.\n * <p>\n * For example:\n *\n * <table class=striped style=\"text-align: left\">\n * <caption>Examples of Week based Years</caption>\n * <thead>\n * <tr><th scope=\"col\">Date</th><th scope=\"col\">Day-of-week</th><th scope=\"col\">Field values</th></tr>\n * </thead>\n * <tbody>\n * <tr><th scope=\"row\">2008-12-28</th><td>Sunday</td><td>Week 52 of week-based-year 2008</td></tr>\n * <tr><th scope=\"row\">2008-12-29</th><td>Monday</td><td>Week 1 of week-based-year 2009</td></tr>\n * <tr><th scope=\"row\">2008-12-31</th><td>Wednesday</td><td>Week 1 of week-based-year 2009</td></tr>\n * <tr><th scope=\"row\">2009-01-01</th><td>Thursday</td><td>Week 1 of week-based-year 2009</td></tr>\n * <tr><th scope=\"row\">2009-01-04</th><td>Sunday</td><td>Week 1 of week-based-year 2009</td></tr>\n * <tr><th scope=\"row\">2009-01-05</th><td>Monday</td><td>Week 2 of week-based-year 2009</td></tr>\n * </tbody>\n * </table>\n *\n * @implSpec\n * <p>\n * This class is immutable and thread-safe.\n *\n * @since 1.8\n ",
  "links" : [ "java.time.temporal.ChronoField#DAY_OF_WEEK", "java.time.temporal.ChronoField#YEAR", "#WEEK_BASED_YEAR", "#DAY_OF_QUARTER", "#WEEK_OF_WEEK_BASED_YEAR", "#QUARTER_OF_YEAR" ],
  "variables" : [ {
    "name" : "DAY_OF_QUARTER",
    "type" : "TemporalField",
    "comment" : "\n     * The field that represents the day-of-quarter.\n     * <p>\n     * This field allows the day-of-quarter value to be queried and set.\n     * The day-of-quarter has values from 1 to 90 in Q1 of a standard year, from 1 to 91\n     * in Q1 of a leap year, from 1 to 91 in Q2 and from 1 to 92 in Q3 and Q4.\n     * <p>\n     * The day-of-quarter can only be calculated if the day-of-year, month-of-year and year\n     * are available.\n     * <p>\n     * When setting this field, the value is allowed to be partially lenient, taking any\n     * value from 1 to 92. If the quarter has less than 92 days, then day 92, and\n     * potentially day 91, is in the following quarter.\n     * <p>\n     * In the resolving phase of parsing, a date can be created from a year,\n     * quarter-of-year and day-of-quarter.\n     * <p>\n     * In {@linkplain ResolverStyle#STRICT strict mode}, all three fields are\n     * validated against their range of valid values. The day-of-quarter field\n     * is validated from 1 to 90, 91 or 92 depending on the year and quarter.\n     * <p>\n     * In {@linkplain ResolverStyle#SMART smart mode}, all three fields are\n     * validated against their range of valid values. The day-of-quarter field is\n     * validated between 1 and 92, ignoring the actual range based on the year and quarter.\n     * If the day-of-quarter exceeds the actual range by one day, then the resulting date\n     * is one day later. If the day-of-quarter exceeds the actual range by two days,\n     * then the resulting date is two days later.\n     * <p>\n     * In {@linkplain ResolverStyle#LENIENT lenient mode}, only the year is validated\n     * against the range of valid values. The resulting date is calculated equivalent to\n     * the following three stage approach. First, create a date on the first of January\n     * in the requested year. Then take the quarter-of-year, subtract one, and add the\n     * amount in quarters to the date. Finally, take the day-of-quarter, subtract one,\n     * and add the amount in days to the date.\n     * <p>\n     * This unit is an immutable and thread-safe singleton.\n     ",
    "links" : [ ]
  }, {
    "name" : "QUARTER_OF_YEAR",
    "type" : "TemporalField",
    "comment" : "\n     * The field that represents the quarter-of-year.\n     * <p>\n     * This field allows the quarter-of-year value to be queried and set.\n     * The quarter-of-year has values from 1 to 4.\n     * <p>\n     * The quarter-of-year can only be calculated if the month-of-year is available.\n     * <p>\n     * In the resolving phase of parsing, a date can be created from a year,\n     * quarter-of-year and day-of-quarter.\n     * See {@link #DAY_OF_QUARTER} for details.\n     * <p>\n     * This unit is an immutable and thread-safe singleton.\n     ",
    "links" : [ "#DAY_OF_QUARTER" ]
  }, {
    "name" : "WEEK_OF_WEEK_BASED_YEAR",
    "type" : "TemporalField",
    "comment" : "\n     * The field that represents the week-of-week-based-year.\n     * <p>\n     * This field allows the week of the week-based-year value to be queried and set.\n     * The week-of-week-based-year has values from 1 to 52, or 53 if the\n     * week-based-year has 53 weeks.\n     * <p>\n     * In the resolving phase of parsing, a date can be created from a\n     * week-based-year, week-of-week-based-year and day-of-week.\n     * <p>\n     * In {@linkplain ResolverStyle#STRICT strict mode}, all three fields are\n     * validated against their range of valid values. The week-of-week-based-year\n     * field is validated from 1 to 52 or 53 depending on the week-based-year.\n     * <p>\n     * In {@linkplain ResolverStyle#SMART smart mode}, all three fields are\n     * validated against their range of valid values. The week-of-week-based-year\n     * field is validated between 1 and 53, ignoring the week-based-year.\n     * If the week-of-week-based-year is 53, but the week-based-year only has\n     * 52 weeks, then the resulting date is in week 1 of the following week-based-year.\n     * <p>\n     * In {@linkplain ResolverStyle#LENIENT lenient mode}, only the week-based-year\n     * is validated against the range of valid values. If the day-of-week is outside\n     * the range 1 to 7, then the resulting date is adjusted by a suitable number of\n     * weeks to reduce the day-of-week to the range 1 to 7. If the week-of-week-based-year\n     * value is outside the range 1 to 52, then any excess weeks are added or subtracted\n     * from the resulting date.\n     * <p>\n     * This unit is an immutable and thread-safe singleton.\n     ",
    "links" : [ ]
  }, {
    "name" : "WEEK_BASED_YEAR",
    "type" : "TemporalField",
    "comment" : "\n     * The field that represents the week-based-year.\n     * <p>\n     * This field allows the week-based-year value to be queried and set.\n     * <p>\n     * The field has a range that matches {@link LocalDate#MAX} and {@link LocalDate#MIN}.\n     * <p>\n     * In the resolving phase of parsing, a date can be created from a\n     * week-based-year, week-of-week-based-year and day-of-week.\n     * See {@link #WEEK_OF_WEEK_BASED_YEAR} for details.\n     * <p>\n     * This unit is an immutable and thread-safe singleton.\n     ",
    "links" : [ "java.time.LocalDate#MIN", "java.time.LocalDate#MAX", "#WEEK_OF_WEEK_BASED_YEAR" ]
  }, {
    "name" : "WEEK_BASED_YEARS",
    "type" : "TemporalUnit",
    "comment" : "\n     * The unit that represents week-based-years for the purpose of addition and subtraction.\n     * <p>\n     * This allows a number of week-based-years to be added to, or subtracted from, a date.\n     * The unit is equal to either 52 or 53 weeks.\n     * The estimated duration of a week-based-year is the same as that of a standard ISO\n     * year at {@code 365.2425 Days}.\n     * <p>\n     * The rules for addition add the number of week-based-years to the existing value\n     * for the week-based-year field. If the resulting week-based-year only has 52 weeks,\n     * then the date will be in week 1 of the following week-based-year.\n     * <p>\n     * This unit is an immutable and thread-safe singleton.\n     ",
    "links" : [ ]
  }, {
    "name" : "QUARTER_YEARS",
    "type" : "TemporalUnit",
    "comment" : "\n     * Unit that represents the concept of a quarter-year.\n     * For the ISO calendar system, it is equal to 3 months.\n     * The estimated duration of a quarter-year is one quarter of {@code 365.2425 Days}.\n     * <p>\n     * This unit is an immutable and thread-safe singleton.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " static boolean isIso(TemporalAccessor temporal)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ " static boolean isIso(TemporalAccessor temporal)" ],
  "variableNames" : [ "DAY_OF_QUARTER", "QUARTER_OF_YEAR", "WEEK_OF_WEEK_BASED_YEAR", "WEEK_BASED_YEAR", "WEEK_BASED_YEARS", "QUARTER_YEARS" ]
}