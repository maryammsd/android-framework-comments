{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/net/util/LinkPropertiesUtils.java",
  "packageName" : "android.net.util",
  "className" : "LinkPropertiesUtils",
  "comment" : "\n * Collection of link properties utilities.\n * @hide\n ",
  "variables" : [ ],
  "methods" : [ {
    "name" : "public static CompareResult<LinkAddress> compareAddresses(@Nullable LinkProperties left, @Nullable LinkProperties right)",
    "returnType" : "CompareResult<LinkAddress>",
    "comment" : "\n     * Compares the addresses in {@code left} LinkProperties with {@code right}\n     * LinkProperties, examining only addresses on the base link.\n     *\n     * @param left A LinkProperties with the old list of addresses.\n     * @param right A LinkProperties with the new list of addresses.\n     * @return the differences between the addresses.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isIdenticalAddresses(@NonNull LinkProperties left, @NonNull LinkProperties right)",
    "returnType" : "boolean",
    "comment" : "\n     * Compares {@code left} {@code LinkProperties} interface addresses against the {@code right}.\n     *\n     * @param left A LinkProperties.\n     * @param right LinkProperties to be compared with {@code left}.\n     * @return {@code true} if both are identical, {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isIdenticalDnses(@NonNull LinkProperties left, @NonNull LinkProperties right)",
    "returnType" : "boolean",
    "comment" : "\n     * Compares {@code left} {@code LinkProperties} DNS addresses against the {@code right}.\n     *\n     * @param left A LinkProperties.\n     * @param right A LinkProperties to be compared with {@code left}.\n     * @return {@code true} if both are identical, {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isIdenticalHttpProxy(@NonNull LinkProperties left, @NonNull LinkProperties right)",
    "returnType" : "boolean",
    "comment" : "\n     * Compares {@code left} {@code LinkProperties} HttpProxy against the {@code right}.\n     *\n     * @param left A LinkProperties.\n     * @param right A LinkProperties to be compared with {@code left}.\n     * @return {@code true} if both are identical, {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isIdenticalInterfaceName(@NonNull LinkProperties left, @NonNull LinkProperties right)",
    "returnType" : "boolean",
    "comment" : "\n     * Compares {@code left} {@code LinkProperties} interface name against the {@code right}.\n     *\n     * @param left A LinkProperties.\n     * @param right A LinkProperties to be compared with {@code left}.\n     * @return {@code true} if both are identical, {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isIdenticalRoutes(@NonNull LinkProperties left, @NonNull LinkProperties right)",
    "returnType" : "boolean",
    "comment" : "\n     * Compares {@code left} {@code LinkProperties} Routes against the {@code right}.\n     *\n     * @param left A LinkProperties.\n     * @param right A LinkProperties to be compared with {@code left}.\n     * @return {@code true} if both are identical, {@code false} otherwise.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ ],
  "methodNames" : [ "public static CompareResult<LinkAddress> compareAddresses(@Nullable LinkProperties left, @Nullable LinkProperties right)", "public static boolean isIdenticalAddresses(@NonNull LinkProperties left, @NonNull LinkProperties right)", "public static boolean isIdenticalDnses(@NonNull LinkProperties left, @NonNull LinkProperties right)", "public static boolean isIdenticalHttpProxy(@NonNull LinkProperties left, @NonNull LinkProperties right)", "public static boolean isIdenticalInterfaceName(@NonNull LinkProperties left, @NonNull LinkProperties right)", "public static boolean isIdenticalRoutes(@NonNull LinkProperties left, @NonNull LinkProperties right)" ]
}