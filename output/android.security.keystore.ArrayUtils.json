{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/security/keystore/ArrayUtils.java",
  "packageName" : "android.security.keystore",
  "className" : "ArrayUtils",
  "comment" : "\n * @hide\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public static String[] nullToEmpty(String[] array)",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String[] cloneIfNotEmpty(String[] array)",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static int[] cloneIfNotEmpty(int[] array)",
    "returnType" : "int[]",
    "comment" : "\n     * Clones an array if it is not null and has a length greater than 0. Otherwise, returns the\n     * array.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static byte[] cloneIfNotEmpty(byte[] array)",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static byte[] concat(byte[] arr1, byte[] arr2)",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static byte[] concat(byte[] arr1, int offset1, int len1, byte[] arr2, int offset2, int len2)",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static int copy(byte[] src, int srcOffset, byte[] dst, int dstOffset, int length)",
    "returnType" : "int",
    "comment" : "\n     * Copies a subset of the source array to the destination array.\n     * Length will be limited to the bounds of source and destination arrays.\n     * The length actually copied is returned, which will be <= length argument.\n     * @param src is the source array\n     * @param srcOffset is the offset in the source array.\n     * @param dst is the destination array.\n     * @param dstOffset is the offset in the destination array.\n     * @param length is the length to be copied from source to destination array.\n     * @return The length actually copied from source array.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static byte[] subarray(byte[] arr, int offset, int len)",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static int[] concat(int[] arr1, int[] arr2)",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void forEach(int[] array, Consumer<Integer> consumer)",
    "returnType" : "void",
    "comment" : "\n     * Runs {@code consumer.accept()} for each element of {@code array}.\n     * @param array\n     * @param consumer\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static String[] nullToEmpty(String[] array)", "public static String[] cloneIfNotEmpty(String[] array)", "public static int[] cloneIfNotEmpty(int[] array)", "public static byte[] cloneIfNotEmpty(byte[] array)", "public static byte[] concat(byte[] arr1, byte[] arr2)", "public static byte[] concat(byte[] arr1, int offset1, int len1, byte[] arr2, int offset2, int len2)", "public static int copy(byte[] src, int srcOffset, byte[] dst, int dstOffset, int length)", "public static byte[] subarray(byte[] arr, int offset, int len)", "public static int[] concat(int[] arr1, int[] arr2)", "public static void forEach(int[] array, Consumer<Integer> consumer)" ],
  "variableNames" : [ ]
}