{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/text/method/KeyListener.java",
  "packageName" : "android.text.method",
  "className" : "KeyListener",
  "comment" : "\n * Interface for converting text key events into edit operations on an\n * Editable class.  Note that for most cases this interface has been\n * superceded by general soft input methods as defined by\n * {@link android.view.inputmethod.InputMethod}; it should only be used\n * for cases where an application has its own on-screen keypad and also wants\n * to process hard keyboard events to match it.\n * <p></p>\n * Key presses on soft input methods are not required to trigger the methods\n * in this listener, and are in fact discouraged to do so.  The default\n * android keyboard will not trigger these for any key to any application\n * targetting Jelly Bean or later, and will only deliver it for some\n * key presses to applications targetting Ice Cream Sandwich or earlier.\n ",
  "links" : [ "android.view.inputmethod.InputMethod" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public int getInputType()",
    "returnType" : "int",
    "comment" : "\n     * Return the type of text that this key listener is manipulating,\n     * as per {@link android.text.InputType}.  This is used to\n     * determine the mode of the soft keyboard that is shown for the editor.\n     * \n     * <p>If you return\n     * {@link android.text.InputType#TYPE_NULL}\n     * then <em>no</em> soft keyboard will provided.  In other words, you\n     * must be providing your own key pad for on-screen input and the key\n     * listener will be used to handle input from a hard keyboard.\n     * \n     * <p>If you\n     * return any other value, a soft input method will be created when the\n     * user puts focus in the editor, which will provide a keypad and also\n     * consume hard key events.  This means that the key listener will generally\n     * not be used, instead the soft input method will take care of managing\n     * key input as per the content type returned here.\n     ",
    "links" : [ "android.text.InputType#TYPE_NULL", "android.text.InputType" ]
  }, {
    "name" : "public boolean onKeyDown(View view, Editable text, int keyCode, KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * If the key listener wants to handle this key, return true,\n     * otherwise return false and the caller (i.e.&nbsp;the widget host)\n     * will handle the key.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean onKeyUp(View view, Editable text, int keyCode, KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * If the key listener wants to handle this key release, return true,\n     * otherwise return false and the caller (i.e.&nbsp;the widget host)\n     * will handle the key.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean onKeyOther(View view, Editable text, KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * If the key listener wants to other kinds of key events, return true,\n     * otherwise return false and the caller (i.e.&nbsp;the widget host)\n     * will handle the key.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clearMetaKeyState(View view, Editable content, int states)",
    "returnType" : "void",
    "comment" : "\n     * Remove the given shift states from the edited text.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int getInputType()", "public boolean onKeyDown(View view, Editable text, int keyCode, KeyEvent event)", "public boolean onKeyUp(View view, Editable text, int keyCode, KeyEvent event)", "public boolean onKeyOther(View view, Editable text, KeyEvent event)", "public void clearMetaKeyState(View view, Editable content, int states)" ],
  "variableNames" : [ ]
}