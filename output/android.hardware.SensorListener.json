{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/SensorListener.java",
  "packageName" : "android.hardware",
  "className" : "SensorListener",
  "comment" : "\n * Used for receiving notifications from the SensorManager when\n * sensor values have changed.\n *\n * @deprecated Use\n * {@link android.hardware.SensorEventListener SensorEventListener} instead.\n ",
  "links" : [ "android.hardware.SensorEventListener" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public void onSensorChanged(int sensor, float[] values)",
    "returnType" : "void",
    "comment" : "\n     * <p>Called when sensor values have changed.\n     * The length and contents of the values array vary\n     * depending on which sensor is being monitored.\n     * See {@link android.hardware.SensorManager SensorManager}\n     * for details on possible sensor types.\n     *\n     * <p><u>Definition of the coordinate system used below.</u><p>\n     * <p>The X axis refers to the screen's horizontal axis\n     * (the small edge in portrait mode, the long edge in landscape mode) and\n     * points to the right.\n     * <p>The Y axis refers to the screen's vertical axis and points towards\n     * the top of the screen (the origin is in the lower-left corner).\n     * <p>The Z axis points toward the sky when the device is lying on its back\n     * on a table.\n     * <p> <b>IMPORTANT NOTE:</b> The axis <b><u>are swapped</u></b> when the\n     * device's screen orientation changes. To access the unswapped values,\n     * use indices 3, 4 and 5 in values[].\n     *\n     * <p>{@link android.hardware.SensorManager#SENSOR_ORIENTATION SENSOR_ORIENTATION},\n     * {@link android.hardware.SensorManager#SENSOR_ORIENTATION_RAW SENSOR_ORIENTATION_RAW}:<p>\n     *  All values are angles in degrees.\n     *\n     * <p>values[0]: Azimuth, rotation around the Z axis (0<=azimuth<360).\n     * 0 = North, 90 = East, 180 = South, 270 = West\n     *\n     * <p>values[1]: Pitch, rotation around X axis (-180<=pitch<=180), with positive\n     * values when the z-axis moves toward the y-axis.\n     *\n     * <p>values[2]: Roll, rotation around Y axis (-90<=roll<=90), with positive values\n     * when the z-axis moves toward the x-axis.\n     *\n     * <p>Note that this definition of yaw, pitch and roll is different from the\n     * traditional definition used in aviation where the X axis is along the long\n     * side of the plane (tail to nose).\n     *\n     * <p>{@link android.hardware.SensorManager#SENSOR_ACCELEROMETER SENSOR_ACCELEROMETER}:<p>\n     *  All values are in SI units (m/s^2) and measure contact forces.\n     *\n     *  <p>values[0]: force applied by the device on the x-axis\n     *  <p>values[1]: force applied by the device on the y-axis\n     *  <p>values[2]: force applied by the device on the z-axis\n     *\n     *  <p><u>Examples</u>:\n     *    <li>When the device is pushed on its left side toward the right, the\n     *    x acceleration value is negative (the device applies a reaction force\n     *    to the push toward the left)</li>\n     *\n     *    <li>When the device lies flat on a table, the acceleration value is\n     *    {@link android.hardware.SensorManager#STANDARD_GRAVITY -STANDARD_GRAVITY},\n     *    which correspond to the force the device applies on the table in reaction\n     *    to gravity.</li>\n     *\n     * <p>{@link android.hardware.SensorManager#SENSOR_MAGNETIC_FIELD SENSOR_MAGNETIC_FIELD}:<p>\n     *  All values are in micro-Tesla (uT) and measure the ambient magnetic\n     *  field in the X, Y and -Z axis.\n     *  <p><b><u>Note:</u></b> the magnetic field's Z axis is inverted.\n     *\n     * @param sensor The ID of the sensor being monitored\n     * @param values The new values for the sensor.\n     ",
    "links" : [ "android.hardware.SensorManager#SENSOR_ORIENTATION", "android.hardware.SensorManager#SENSOR_ORIENTATION_RAW", "android.hardware.SensorManager", "android.hardware.SensorManager#SENSOR_MAGNETIC_FIELD", "android.hardware.SensorManager#SENSOR_ACCELEROMETER", "android.hardware.SensorManager#STANDARD_GRAVITY" ]
  }, {
    "name" : "public void onAccuracyChanged(int sensor, int accuracy)",
    "returnType" : "void",
    "comment" : "\n     * Called when the accuracy of a sensor has changed.\n     * See {@link android.hardware.SensorManager SensorManager}\n     * for details.\n     *\n     * @param sensor The ID of the sensor being monitored\n     * @param accuracy The new accuracy of this sensor.\n     ",
    "links" : [ "android.hardware.SensorManager" ]
  } ],
  "methodNames" : [ "public void onSensorChanged(int sensor, float[] values)", "public void onAccuracyChanged(int sensor, int accuracy)" ],
  "variableNames" : [ ]
}