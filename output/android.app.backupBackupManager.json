{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/app/backup/BackupManager.java",
  "packageName" : "android.app.backup",
  "className" : "BackupManager",
  "comment" : "\n * The interface through which an application interacts with the Android backup service to\n * request backup and restore operations.\n * Applications instantiate it using the constructor and issue calls through that instance.\n * <p>\n * When an application has made changes to data which should be backed up, a\n * call to {@link #dataChanged()} will notify the backup service. The system\n * will then schedule a backup operation to occur in the near future. Repeated\n * calls to {@link #dataChanged()} have no further effect until the backup\n * operation actually occurs.\n * <p>\n * A backup or restore operation for your application begins when the system launches the\n * {@link android.app.backup.BackupAgent} subclass you've declared in your manifest. See the\n * documentation for {@link android.app.backup.BackupAgent} for a detailed description\n * of how the operation then proceeds.\n * <p>\n * Several attributes affecting the operation of the backup and restore mechanism\n * can be set on the <code>\n * <a href=\"{@docRoot}guide/topics/manifest/application-element.html\">&lt;application&gt;</a></code>\n * tag in your application's AndroidManifest.xml file.\n *\n * <div class=\"special reference\">\n * <h3>Developer Guides</h3>\n * <p>For more information about using BackupManager, read the\n * <a href=\"{@docRoot}guide/topics/data/backup.html\">Data Backup</a> developer guide.</p></div>\n *\n * @attr ref android.R.styleable#AndroidManifestApplication_allowBackup\n * @attr ref android.R.styleable#AndroidManifestApplication_backupAgent\n * @attr ref android.R.styleable#AndroidManifestApplication_killAfterRestore\n * @attr ref android.R.styleable#AndroidManifestApplication_restoreAnyVersion\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SUCCESS",
    "type" : "int",
    "comment" : "\n     * Indicates that backup succeeded.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_BACKUP_NOT_ALLOWED",
    "type" : "int",
    "comment" : "\n     * Indicates that backup is either not enabled at all or\n     * backup for the package was rejected by backup service\n     * or backup transport,\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_PACKAGE_NOT_FOUND",
    "type" : "int",
    "comment" : "\n     * The requested app is not installed on the device.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_BACKUP_CANCELLED",
    "type" : "int",
    "comment" : "\n     * The backup operation was cancelled.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_TRANSPORT_ABORTED",
    "type" : "int",
    "comment" : "\n     * The transport for some reason was not in a good state and\n     * aborted the entire backup request. This is a transient\n     * failure and should not be retried immediately.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_TRANSPORT_PACKAGE_REJECTED",
    "type" : "int",
    "comment" : "\n     * Returned when the transport was unable to process the\n     * backup request for a given package, for example if the\n     * transport hit a transient network failure. The remaining\n     * packages provided to {@link #requestBackup(String[], BackupObserver)}\n     * will still be attempted.\n     *\n     * @hide\n     ",
    "links" : [ "#requestBackup" ]
  }, {
    "name" : "ERROR_TRANSPORT_QUOTA_EXCEEDED",
    "type" : "int",
    "comment" : "\n     * Returned when the transport reject the attempt to backup because\n     * backup data size exceeded current quota limit for this package.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_AGENT_FAILURE",
    "type" : "int",
    "comment" : "\n     * The {@link BackupAgent} for the requested package failed for some reason\n     * and didn't provide appropriate backup data.\n     *\n     * @hide\n     ",
    "links" : [ "BackupAgent" ]
  }, {
    "name" : "EXTRA_BACKUP_SERVICES_AVAILABLE",
    "type" : "String",
    "comment" : "\n     * Intent extra when any subsidiary backup-related UI is launched from Settings:  does\n     * device policy or configuration permit backup operations to run at all?\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_NON_INCREMENTAL_BACKUP",
    "type" : "int",
    "comment" : "\n     * If this flag is passed to {@link #requestBackup(String[], BackupObserver, int)},\n     * BackupManager will pass a blank old state to BackupAgents of requested packages.\n     *\n     * @hide\n     ",
    "links" : [ "#requestBackup" ]
  }, {
    "name" : "PACKAGE_MANAGER_SENTINEL",
    "type" : "String",
    "comment" : "\n     * Use with {@link #requestBackup} to force backup of\n     * package meta data. Typically you do not need to explicitly request this be backed up as it is\n     * handled internally by the BackupManager. If you are requesting backups with\n     * FLAG_NON_INCREMENTAL, this package won't automatically be backed up and you have to\n     * explicitly request for its backup.\n     *\n     * @hide\n     ",
    "links" : [ "#requestBackup" ]
  }, {
    "name" : "ERROR_TRANSPORT_UNAVAILABLE",
    "type" : "int",
    "comment" : "\n     * This error code is passed to {@link SelectBackupTransportCallback#onFailure(int)}\n     * if the requested transport is unavailable.\n     *\n     * @hide\n     ",
    "links" : [ "SelectBackupTransportCallback#onFailure" ]
  }, {
    "name" : "ERROR_TRANSPORT_INVALID",
    "type" : "int",
    "comment" : "\n     * This error code is passed to {@link SelectBackupTransportCallback#onFailure(int)} if the\n     * requested transport is not a valid BackupTransport.\n     *\n     * @hide\n     ",
    "links" : [ "SelectBackupTransportCallback#onFailure" ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sService",
    "type" : "IBackupManager",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static void checkServiceBinder()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dataChanged()",
    "returnType" : "void",
    "comment" : "\n     * Notifies the Android backup system that your application wishes to back up\n     * new changes to its data.  A backup operation using your application's\n     * {@link android.app.backup.BackupAgent} subclass will be scheduled when you\n     * call this method.\n     ",
    "links" : [ "android.app.backup.BackupAgent" ]
  }, {
    "name" : "public static void dataChanged(String packageName)",
    "returnType" : "void",
    "comment" : "\n     * Convenience method for callers who need to indicate that some other package\n     * needs a backup pass.  This can be useful in the case of groups of packages\n     * that share a uid.\n     * <p>\n     * This method requires that the application hold the \"android.permission.BACKUP\"\n     * permission if the package named in the argument does not run under the same uid\n     * as the caller.\n     *\n     * @param packageName The package name identifying the application to back up.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int requestRestore(RestoreObserver observer)",
    "returnType" : "int",
    "comment" : "\n     * @deprecated Applications shouldn't request a restore operation using this method. In Android\n     * P and later, this method is a no-op.\n     *\n     * <p>Restore the calling application from backup. The data will be restored from the\n     * current backup dataset if the application has stored data there, or from\n     * the dataset used during the last full device setup operation if the current\n     * backup dataset has no matching data.  If no backup data exists for this application\n     * in either source, a non-zero value is returned.\n     *\n     * <p>If this method returns zero (meaning success), the OS attempts to retrieve a backed-up\n     * dataset from the remote transport, instantiate the application's backup agent, and pass the\n     * dataset to the agent's\n     * {@link android.app.backup.BackupAgent#onRestore(BackupDataInput, int, android.os.ParcelFileDescriptor) onRestore()}\n     * method.\n     *\n     * <p class=\"caution\">Unlike other restore operations, this method doesn't terminate the\n     * application after the restore. The application continues running to receive the\n     * {@link RestoreObserver} callbacks on the {@code observer} argument. Full backups use an\n     * {@link android.app.Application Application} base class while key-value backups use the\n     * application subclass declared in the AndroidManifest.xml {@code <application>} tag.\n     *\n     * @param observer The {@link RestoreObserver} to receive callbacks during the restore\n     * operation. This must not be null.\n     *\n     * @return Zero on success; nonzero on error.\n     ",
    "links" : [ "android.app.backup.BackupAgent#onRestore", "RestoreObserver", "android.app.Application", "RestoreObserver" ]
  }, {
    "name" : "public int requestRestore(RestoreObserver observer, BackupManagerMonitor monitor)",
    "returnType" : "int",
    "comment" : "\n     * @deprecated Since Android P app can no longer request restoring of its backup.\n     *\n     * <p>Restore the calling application from backup.  The data will be restored from the\n     * current backup dataset if the application has stored data there, or from\n     * the dataset used during the last full device setup operation if the current\n     * backup dataset has no matching data.  If no backup data exists for this application\n     * in either source, a nonzero value will be returned.\n     *\n     * <p>If this method returns zero (meaning success), the OS will attempt to retrieve\n     * a backed-up dataset from the remote transport, instantiate the application's\n     * backup agent, and pass the dataset to the agent's\n     * {@link android.app.backup.BackupAgent#onRestore(BackupDataInput, int, android.os.ParcelFileDescriptor) onRestore()}\n     * method.\n     *\n     * @param observer The {@link RestoreObserver} to receive callbacks during the restore\n     * operation. This must not be null.\n     *\n     * @param monitor the {@link BackupManagerMonitor} to receive callbacks during the restore\n     * operation.\n     *\n     * @return Zero on success; nonzero on error.\n     *\n     * @hide\n     ",
    "links" : [ "android.app.backup.BackupAgent#onRestore", "RestoreObserver", "BackupManagerMonitor" ]
  }, {
    "name" : "public RestoreSession beginRestoreSession()",
    "returnType" : "RestoreSession",
    "comment" : "\n     * Begin the process of restoring data from backup.  See the\n     * {@link android.app.backup.RestoreSession} class for documentation on that process.\n     * @hide\n     ",
    "links" : [ "android.app.backup.RestoreSession" ]
  }, {
    "name" : "public void setBackupEnabled(boolean isEnabled)",
    "returnType" : "void",
    "comment" : "\n     * Enable/disable the backup service entirely.  When disabled, no backup\n     * or restore operations will take place.  Data-changed notifications will\n     * still be observed and collected, however, so that changes made while the\n     * mechanism was disabled will still be backed up properly if it is enabled\n     * at some point in the future.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isBackupEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Report whether the backup mechanism is currently enabled.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isBackupServiceActive(UserHandle user)",
    "returnType" : "boolean",
    "comment" : "\n     * Report whether the backup mechanism is currently active.\n     * When it is inactive, the device will not perform any backup operations, nor will it\n     * deliver data for restore, although clients can still safely call BackupManager methods.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAutoRestore(boolean isEnabled)",
    "returnType" : "void",
    "comment" : "\n     * Enable/disable data restore at application install time.  When enabled, app\n     * installation will include an attempt to fetch the app's historical data from\n     * the archival restore dataset (if any).  When disabled, no such attempt will\n     * be made.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getCurrentTransport()",
    "returnType" : "String",
    "comment" : "\n     * Identify the currently selected transport.\n     * @return The name of the currently active backup transport.  In case of\n     *   failure or if no transport is currently active, this method returns {@code null}.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public ComponentName getCurrentTransportComponent()",
    "returnType" : "ComponentName",
    "comment" : "\n     * Returns the {@link ComponentName} of the host service of the selected transport or {@code\n     * null} if no transport selected or if the transport selected is not registered.\n     *\n     * @hide\n     ",
    "links" : [ "ComponentName" ]
  }, {
    "name" : "public String[] listAllTransports()",
    "returnType" : "String[]",
    "comment" : "\n     * Request a list of all available backup transports' names.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void updateTransportAttributes(@NonNull ComponentName transportComponent, @NonNull String name, @Nullable Intent configurationIntent, @NonNull String currentDestinationString, @Nullable Intent dataManagementIntent, @Nullable String dataManagementLabel)",
    "returnType" : "void",
    "comment" : "\n     * Update the attributes of the transport identified by {@code transportComponent}. If the\n     * specified transport has not been bound at least once (for registration), this call will be\n     * ignored. Only the host process of the transport can change its description, otherwise a\n     * {@link SecurityException} will be thrown.\n     *\n     * @param transportComponent The identity of the transport being described.\n     * @param name A {@link String} with the new name for the transport. This is NOT for\n     *     identification. MUST NOT be {@code null}.\n     * @param configurationIntent An {@link Intent} that can be passed to {@link\n     *     Context#startActivity} in order to launch the transport's configuration UI. It may be\n     *     {@code null} if the transport does not offer any user-facing configuration UI.\n     * @param currentDestinationString A {@link String} describing the destination to which the\n     *     transport is currently sending data. MUST NOT be {@code null}.\n     * @param dataManagementIntent An {@link Intent} that can be passed to {@link\n     *     Context#startActivity} in order to launch the transport's data-management UI. It may be\n     *     {@code null} if the transport does not offer any user-facing data management UI.\n     * @param dataManagementLabel A {@link String} to be used as the label for the transport's data\n     *     management affordance. This MUST be {@code null} when dataManagementIntent is {@code\n     *     null} and MUST NOT be {@code null} when dataManagementIntent is not {@code null}.\n     * @throws SecurityException If the UID of the calling process differs from the package UID of\n     *     {@code transportComponent} or if the caller does NOT have BACKUP permission.\n     * @deprecated Since Android Q, please use the variant {@link\n     *     #updateTransportAttributes(ComponentName, String, Intent, String, Intent, CharSequence)}\n     *     instead.\n     * @hide\n     ",
    "links" : [ "SecurityException", "String", "Intent", "String", "Intent", "String" ]
  }, {
    "name" : "public void updateTransportAttributes(@NonNull ComponentName transportComponent, @NonNull String name, @Nullable Intent configurationIntent, @NonNull String currentDestinationString, @Nullable Intent dataManagementIntent, @Nullable CharSequence dataManagementLabel)",
    "returnType" : "void",
    "comment" : "\n     * Update the attributes of the transport identified by {@code transportComponent}. If the\n     * specified transport has not been bound at least once (for registration), this call will be\n     * ignored. Only the host process of the transport can change its description, otherwise a\n     * {@link SecurityException} will be thrown.\n     *\n     * @param transportComponent The identity of the transport being described.\n     * @param name A {@link String} with the new name for the transport. This is NOT for\n     *     identification. MUST NOT be {@code null}.\n     * @param configurationIntent An {@link Intent} that can be passed to {@link\n     *     Context#startActivity} in order to launch the transport's configuration UI. It may be\n     *     {@code null} if the transport does not offer any user-facing configuration UI.\n     * @param currentDestinationString A {@link String} describing the destination to which the\n     *     transport is currently sending data. MUST NOT be {@code null}.\n     * @param dataManagementIntent An {@link Intent} that can be passed to {@link\n     *     Context#startActivity} in order to launch the transport's data-management UI. It may be\n     *     {@code null} if the transport does not offer any user-facing data management UI.\n     * @param dataManagementLabel A {@link CharSequence} to be used as the label for the transport's\n     *     data management affordance. This MUST be {@code null} when dataManagementIntent is {@code\n     *     null} and MUST NOT be {@code null} when dataManagementIntent is not {@code null}.\n     * @throws SecurityException If the UID of the calling process differs from the package UID of\n     *     {@code transportComponent} or if the caller does NOT have BACKUP permission.\n     * @hide\n     ",
    "links" : [ "SecurityException", "String", "Intent", "String", "Intent", "CharSequence" ]
  }, {
    "name" : "public String selectBackupTransport(String transport)",
    "returnType" : "String",
    "comment" : "\n     * Specify the current backup transport.\n     *\n     * @param transport The name of the transport to select.  This should be one\n     *   of the names returned by {@link #listAllTransports()}. This is the String returned by\n     *   {@link BackupTransport#name()} for the particular transport.\n     * @return The name of the previously selected transport.  If the given transport\n     *   name is not one of the currently available transports, no change is made to\n     *   the current transport setting and the method returns null.\n     *\n     * @hide\n     ",
    "links" : [ "#listAllTransports", "BackupTransport#name" ]
  }, {
    "name" : "public void selectBackupTransport(ComponentName transport, SelectBackupTransportCallback listener)",
    "returnType" : "void",
    "comment" : "\n     * Specify the current backup transport and get notified when the transport is ready to be used.\n     * This method is async because BackupManager might need to bind to the specified transport\n     * which is in a separate process.\n     *\n     * @param transport ComponentName of the service hosting the transport. This is different from\n     *                  the transport's name that is returned by {@link BackupTransport#name()}.\n     * @param listener A listener object to get a callback on the transport being selected.\n     *\n     * @hide\n     ",
    "links" : [ "BackupTransport#name" ]
  }, {
    "name" : "public void backupNow()",
    "returnType" : "void",
    "comment" : "\n     * Schedule an immediate backup attempt for all pending key/value updates.  This\n     * is primarily intended for transports to use when they detect a suitable\n     * opportunity for doing a backup pass.  If there are no pending updates to\n     * be sent, no action will be taken.  Even if some updates are pending, the\n     * transport will still be asked to confirm via the usual requestBackupTime()\n     * method.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getAvailableRestoreToken(String packageName)",
    "returnType" : "long",
    "comment" : "\n     * Ask the framework which dataset, if any, the given package's data would be\n     * restored from if we were to install it right now.\n     *\n     * @param packageName The name of the package whose most-suitable dataset we\n     *     wish to look up\n     * @return The dataset token from which a restore should be attempted, or zero if\n     *     no suitable data is available.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isAppEligibleForBackup(String packageName)",
    "returnType" : "boolean",
    "comment" : "\n     * Ask the framework whether this app is eligible for backup.\n     *\n     * @param packageName The name of the package.\n     * @return Whether this app is eligible for backup.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int requestBackup(String[] packages, BackupObserver observer)",
    "returnType" : "int",
    "comment" : "\n     * Request an immediate backup, providing an observer to which results of the backup operation\n     * will be published. The Android backup system will decide for each package whether it will\n     * be full app data backup or key/value-pair-based backup.\n     *\n     * <p>If this method returns {@link BackupManager#SUCCESS}, the OS will attempt to backup all\n     * provided packages using the remote transport.\n     *\n     * @param packages List of package names to backup.\n     * @param observer The {@link BackupObserver} to receive callbacks during the backup\n     * operation. Could be {@code null}.\n     * @return {@link BackupManager#SUCCESS} on success; nonzero on error.\n     * @exception  IllegalArgumentException on null or empty {@code packages} param.\n     *\n     * @hide\n     ",
    "links" : [ "BackupManager#SUCCESS", "BackupObserver", "BackupManager#SUCCESS" ]
  }, {
    "name" : "public int requestBackup(String[] packages, BackupObserver observer, BackupManagerMonitor monitor, int flags)",
    "returnType" : "int",
    "comment" : "\n     * Request an immediate backup, providing an observer to which results of the backup operation\n     * will be published. The Android backup system will decide for each package whether it will\n     * be full app data backup or key/value-pair-based backup.\n     *\n     * <p>If this method returns {@link BackupManager#SUCCESS}, the OS will attempt to backup all\n     * provided packages using the remote transport.\n     *\n     * @param packages List of package names to backup.\n     * @param observer The {@link BackupObserver} to receive callbacks during the backup\n     *                 operation. Could be {@code null}.\n     * @param monitor  The {@link BackupManagerMonitorWrapper} to receive callbacks of important\n     *                 events during the backup operation. Could be {@code null}.\n     * @param flags    {@link #FLAG_NON_INCREMENTAL_BACKUP}.\n     * @return {@link BackupManager#SUCCESS} on success; nonzero on error.\n     * @throws IllegalArgumentException on null or empty {@code packages} param.\n     * @hide\n     ",
    "links" : [ "BackupManager#SUCCESS", "BackupObserver", "BackupManagerMonitorWrapper", "#FLAG_NON_INCREMENTAL_BACKUP", "BackupManager#SUCCESS" ]
  }, {
    "name" : "public void cancelBackups()",
    "returnType" : "void",
    "comment" : "\n     * Cancel all running backups. After this call returns, no currently running backups will\n     * interact with the selected transport.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public UserHandle getUserForAncestralSerialNumber(long ancestralSerialNumber)",
    "returnType" : "UserHandle",
    "comment" : "\n     * Returns a {@link UserHandle} for the user that has {@code ancestralSerialNumber} as the\n     * serial number of the its ancestral work profile or {@code null} if there is none.\n     *\n     * <p> The ancestral serial number will have a corresponding {@link UserHandle} if the device\n     * has a work profile that was restored from another work profile with serial number\n     * {@code ancestralSerialNumber}.\n     *\n     * @see android.os.UserManager#getSerialNumberForUser(UserHandle)\n     ",
    "links" : [ "UserHandle", "UserHandle" ]
  }, {
    "name" : "public void setAncestralSerialNumber(long ancestralSerialNumber)",
    "returnType" : "void",
    "comment" : "\n     * Sets the ancestral work profile for the calling user.\n     *\n     * <p> The ancestral work profile corresponds to the profile that was used to restore to the\n     * callers profile.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Intent getConfigurationIntent(String transportName)",
    "returnType" : "Intent",
    "comment" : "\n     * Returns an {@link Intent} for the specified transport's configuration UI.\n     * This value is set by {@link #updateTransportAttributes(ComponentName, String, Intent, String,\n     * Intent, CharSequence)}.\n     * @param transportName The name of the registered transport.\n     * @hide\n     ",
    "links" : [ "Intent", "#updateTransportAttributes" ]
  }, {
    "name" : "public String getDestinationString(String transportName)",
    "returnType" : "String",
    "comment" : "\n     * Returns a {@link String} describing where the specified transport is sending data.\n     * This value is set by {@link #updateTransportAttributes(ComponentName, String, Intent, String,\n     * Intent, CharSequence)}.\n     * @param transportName The name of the registered transport.\n     * @hide\n     ",
    "links" : [ "String", "#updateTransportAttributes" ]
  }, {
    "name" : "public Intent getDataManagementIntent(String transportName)",
    "returnType" : "Intent",
    "comment" : "\n     * Returns an {@link Intent} for the specified transport's data management UI.\n     * This value is set by {@link #updateTransportAttributes(ComponentName, String, Intent, String,\n     * Intent, CharSequence)}.\n     * @param transportName The name of the registered transport.\n     * @hide\n     ",
    "links" : [ "Intent", "#updateTransportAttributes" ]
  }, {
    "name" : "public String getDataManagementLabel(@NonNull String transportName)",
    "returnType" : "String",
    "comment" : "\n     * Returns a {@link String} describing what the specified transport's data management intent is\n     * used for. This value is set by {@link #updateTransportAttributes(ComponentName, String,\n     * Intent, String, Intent, CharSequence)}.\n     *\n     * @param transportName The name of the registered transport.\n     * @deprecated Since Android Q, please use the variant {@link\n     *     #getDataManagementIntentLabel(String)} instead.\n     * @hide\n     ",
    "links" : [ "String", "#updateTransportAttributes" ]
  }, {
    "name" : "public CharSequence getDataManagementIntentLabel(@NonNull String transportName)",
    "returnType" : "CharSequence",
    "comment" : "\n     * Returns a {@link CharSequence} describing what the specified transport's data management\n     * intent is used for. This value is set by {@link #updateTransportAttributes(ComponentName,\n     * String, Intent, String, Intent, CharSequence)}.\n     *\n     * @param transportName The name of the registered transport.\n     * @hide\n     ",
    "links" : [ "CharSequence", "#updateTransportAttributes" ]
  }, {
    "name" : "public void excludeKeysFromRestore(@NonNull String packageName, @NonNull List<String> keys)",
    "returnType" : "void",
    "comment" : "\n     * Excludes keys from KV restore for a given package. The corresponding data will be excluded\n     * from the data set available the backup agent during restore. However,  final list  of keys\n     * that have been excluded will be passed to the agent to make it aware of the exclusions.\n     *\n     * @param packageName The name of the package for which to exclude keys.\n     * @param keys The list of keys to exclude.\n     *\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "SUCCESS", "ERROR_BACKUP_NOT_ALLOWED", "ERROR_PACKAGE_NOT_FOUND", "ERROR_BACKUP_CANCELLED", "ERROR_TRANSPORT_ABORTED", "ERROR_TRANSPORT_PACKAGE_REJECTED", "ERROR_TRANSPORT_QUOTA_EXCEEDED", "ERROR_AGENT_FAILURE", "EXTRA_BACKUP_SERVICES_AVAILABLE", "FLAG_NON_INCREMENTAL_BACKUP", "PACKAGE_MANAGER_SENTINEL", "ERROR_TRANSPORT_UNAVAILABLE", "ERROR_TRANSPORT_INVALID", "mContext", "sService" ],
  "methodNames" : [ "private static void checkServiceBinder()", "public void dataChanged()", "public static void dataChanged(String packageName)", "public int requestRestore(RestoreObserver observer)", "public int requestRestore(RestoreObserver observer, BackupManagerMonitor monitor)", "public RestoreSession beginRestoreSession()", "public void setBackupEnabled(boolean isEnabled)", "public boolean isBackupEnabled()", "public boolean isBackupServiceActive(UserHandle user)", "public void setAutoRestore(boolean isEnabled)", "public String getCurrentTransport()", "public ComponentName getCurrentTransportComponent()", "public String[] listAllTransports()", "public void updateTransportAttributes(@NonNull ComponentName transportComponent, @NonNull String name, @Nullable Intent configurationIntent, @NonNull String currentDestinationString, @Nullable Intent dataManagementIntent, @Nullable String dataManagementLabel)", "public void updateTransportAttributes(@NonNull ComponentName transportComponent, @NonNull String name, @Nullable Intent configurationIntent, @NonNull String currentDestinationString, @Nullable Intent dataManagementIntent, @Nullable CharSequence dataManagementLabel)", "public String selectBackupTransport(String transport)", "public void selectBackupTransport(ComponentName transport, SelectBackupTransportCallback listener)", "public void backupNow()", "public long getAvailableRestoreToken(String packageName)", "public boolean isAppEligibleForBackup(String packageName)", "public int requestBackup(String[] packages, BackupObserver observer)", "public int requestBackup(String[] packages, BackupObserver observer, BackupManagerMonitor monitor, int flags)", "public void cancelBackups()", "public UserHandle getUserForAncestralSerialNumber(long ancestralSerialNumber)", "public void setAncestralSerialNumber(long ancestralSerialNumber)", "public Intent getConfigurationIntent(String transportName)", "public String getDestinationString(String transportName)", "public Intent getDataManagementIntent(String transportName)", "public String getDataManagementLabel(@NonNull String transportName)", "public CharSequence getDataManagementIntentLabel(@NonNull String transportName)", "public void excludeKeysFromRestore(@NonNull String packageName, @NonNull List<String> keys)" ]
}