{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/chromium/net/NetworkChangeNotifier.java",
  "packageName" : "org.chromium.net",
  "className" : "NetworkChangeNotifier",
  "comment" : "\n * Triggers updates to the underlying network state in Chrome.\n *\n * By default, connectivity is assumed and changes must be pushed from the embedder via the\n * forceConnectivityState function.\n * Embedders may choose to have this class auto-detect changes in network connectivity by invoking\n * the setAutoDetectConnectivityState function.\n *\n * WARNING: This class is not thread-safe.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mNativeChangeNotifiers",
    "type" : "ArrayList<Long>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConnectionTypeObservers",
    "type" : "ObserverList<ConnectionTypeObserver>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAutoDetector",
    "type" : "NetworkChangeNotifierAutoDetect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCurrentConnectionType",
    "type" : "int",
    "comment" : " Last value broadcast via ConnectionTypeChange signal.",
    "links" : [ ]
  }, {
    "name" : "mCurrentConnectionCost",
    "type" : "int",
    "comment" : " Last value broadcast via ConnectionCostChange signal.",
    "links" : [ ]
  }, {
    "name" : "sInstance",
    "type" : "NetworkChangeNotifier",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static NetworkChangeNotifier init()",
    "returnType" : "NetworkChangeNotifier",
    "comment" : " Initializes the singleton once. ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isInitialized()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void resetInstanceForTests()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void resetInstanceForTests(NetworkChangeNotifier notifier)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getCurrentConnectionType()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getCurrentConnectionSubtype()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getCurrentConnectionCost()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public long getCurrentDefaultNetId()",
    "returnType" : "long",
    "comment" : "\n     * Returns NetID of device's current default connected network used for\n     * communication. Only available when auto-detection has been enabled,\n     * returns NetId.INVALID otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long[] getCurrentNetworksAndTypes()",
    "returnType" : "long[]",
    "comment" : "\n     * Returns an array of all of the device's currently connected\n     * networks and ConnectionTypes. Array elements are a repeated sequence of:\n     *   NetID of network\n     *   ConnectionType of network\n     * Only available when auto-detection has been enabled.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addNativeObserver(long nativeChangeNotifier)",
    "returnType" : "void",
    "comment" : " Adds a native-side observer. ",
    "links" : [ ]
  }, {
    "name" : "public void removeNativeObserver(long nativeChangeNotifier)",
    "returnType" : "void",
    "comment" : " Removes a native-side observer. ",
    "links" : [ ]
  }, {
    "name" : "public boolean registerNetworkCallbackFailed()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if NetworkCallback failed to register, indicating that network-specific\n     * callbacks will not be issued.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static NetworkChangeNotifier getInstance()",
    "returnType" : "NetworkChangeNotifier",
    "comment" : " Returns the singleton instance. ",
    "links" : [ ]
  }, {
    "name" : "public static void setAutoDetectConnectivityState(boolean shouldAutoDetect)",
    "returnType" : "void",
    "comment" : "\n     * Enables auto detection of the current network state based on notifications from the system.\n     * Note that passing true here requires the embedding app have the platform ACCESS_NETWORK_STATE\n     * permission. Also note that in this case the auto detection is enabled based on the status of\n     * the application (@see ApplicationStatus).\n     * Declare @CalledByNative only for testing.\n     *\n     * @param shouldAutoDetect true if the NetworkChangeNotifier should listen for system changes in\n     *    network connectivity.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void registerToReceiveNotificationsAlways()",
    "returnType" : "void",
    "comment" : "\n     * Registers to always receive network change notifications no matter if\n     * the app is in the background or foreground.\n     * Note that in normal circumstances, chrome embedders should use\n     * {@code setAutoDetectConnectivityState} to listen to network changes only\n     * when the app is in the foreground, because network change observers\n     * might perform expensive work depending on the network connectivity.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setAutoDetectConnectivityState(NetworkChangeNotifierAutoDetect.RegistrationPolicy policy)",
    "returnType" : "void",
    "comment" : "\n     * Registers to receive network change notification based on the provided registration policy.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void destroyAutoDetector()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setAutoDetectConnectivityStateInternal(boolean shouldAutoDetect, NetworkChangeNotifierAutoDetect.RegistrationPolicy policy)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void forceConnectivityState(boolean networkAvailable)",
    "returnType" : "void",
    "comment" : "\n     * For testing, updates the perceived network state when not auto-detecting changes to\n     * connectivity.\n     *\n     * @param networkAvailable True if the NetworkChangeNotifier should perceive a \"connected\"\n     *    state, false implies \"disconnected\".\n     ",
    "links" : [ ]
  }, {
    "name" : "private void forceConnectivityStateInternal(boolean forceOnline)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void fakeNetworkConnected(long netId, int connectionType)",
    "returnType" : "void",
    "comment" : " For testing, pretend a network connected.",
    "links" : [ ]
  }, {
    "name" : "public static void fakeNetworkSoonToBeDisconnected(long netId)",
    "returnType" : "void",
    "comment" : " For testing, pretend a network will soon disconnect.",
    "links" : [ ]
  }, {
    "name" : "public static void fakeNetworkDisconnected(long netId)",
    "returnType" : "void",
    "comment" : " For testing, pretend a network disconnected.",
    "links" : [ ]
  }, {
    "name" : "public static void fakePurgeActiveNetworkList(long[] activeNetIds)",
    "returnType" : "void",
    "comment" : " For testing, pretend a network lists should be purged.",
    "links" : [ ]
  }, {
    "name" : "public static void fakeDefaultNetwork(long netId, int connectionType)",
    "returnType" : "void",
    "comment" : " For testing, pretend a default network changed.",
    "links" : [ ]
  }, {
    "name" : "public static void fakeConnectionCostChanged(int connectionCost)",
    "returnType" : "void",
    "comment" : " For testing, pretend the connection cost has changed.",
    "links" : [ ]
  }, {
    "name" : "public static void fakeConnectionSubtypeChanged(int connectionSubtype)",
    "returnType" : "void",
    "comment" : " For testing, pretend the connection subtype has changed.",
    "links" : [ ]
  }, {
    "name" : "private void updateCurrentConnectionType(int newConnectionType)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void notifyObserversOfConnectionTypeChange(int newConnectionType)",
    "returnType" : "void",
    "comment" : " Alerts all observers of a connection change. ",
    "links" : [ ]
  }, {
    "name" : "private void notifyObserversOfConnectionTypeChange(int newConnectionType, long defaultNetId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateCurrentConnectionCost(int newConnectionCost)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void notifyObserversOfConnectionCostChange(int newConnectionCost)",
    "returnType" : "void",
    "comment" : " Alerts all observers of a connection cost change. ",
    "links" : [ ]
  }, {
    "name" : " void notifyObserversOfConnectionSubtypeChange(int connectionSubtype)",
    "returnType" : "void",
    "comment" : " Alerts all observers of a bandwidth change. ",
    "links" : [ ]
  }, {
    "name" : " void notifyObserversOfNetworkConnect(long netId, int connectionType)",
    "returnType" : "void",
    "comment" : " Alerts all observers of a network connect. ",
    "links" : [ ]
  }, {
    "name" : " void notifyObserversOfNetworkSoonToDisconnect(long netId)",
    "returnType" : "void",
    "comment" : " Alerts all observers of a network soon to be disconnected. ",
    "links" : [ ]
  }, {
    "name" : " void notifyObserversOfNetworkDisconnect(long netId)",
    "returnType" : "void",
    "comment" : " Alerts all observers of a network disconnect. ",
    "links" : [ ]
  }, {
    "name" : " void notifyObserversToPurgeActiveNetworkList(long[] activeNetIds)",
    "returnType" : "void",
    "comment" : "\n     * Alerts all observers to purge cached lists of active networks, of any\n     * networks not in the accompanying list of active networks. This is\n     * issued if a period elapsed where disconnected notifications may have\n     * been missed, and acts to keep cached lists of active networks accurate.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void addConnectionTypeObserver(ConnectionTypeObserver observer)",
    "returnType" : "void",
    "comment" : " Adds an observer for any connection type changes. ",
    "links" : [ ]
  }, {
    "name" : "private void addConnectionTypeObserverInternal(ConnectionTypeObserver observer)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void removeConnectionTypeObserver(ConnectionTypeObserver observer)",
    "returnType" : "void",
    "comment" : " Removes an observer for any connection type changes. ",
    "links" : [ ]
  }, {
    "name" : "private void removeConnectionTypeObserverInternal(ConnectionTypeObserver observer)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static NetworkChangeNotifierAutoDetect getAutoDetectorForTest()",
    "returnType" : "NetworkChangeNotifierAutoDetect",
    "comment" : " For testing only.",
    "links" : [ ]
  }, {
    "name" : "public static boolean isOnline()",
    "returnType" : "boolean",
    "comment" : " Checks if there currently is connectivity. ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static NetworkChangeNotifier init()", "public static boolean isInitialized()", "public static void resetInstanceForTests()", "public static void resetInstanceForTests(NetworkChangeNotifier notifier)", "public int getCurrentConnectionType()", "public int getCurrentConnectionSubtype()", "public int getCurrentConnectionCost()", "public long getCurrentDefaultNetId()", "public long[] getCurrentNetworksAndTypes()", "public void addNativeObserver(long nativeChangeNotifier)", "public void removeNativeObserver(long nativeChangeNotifier)", "public boolean registerNetworkCallbackFailed()", "public static NetworkChangeNotifier getInstance()", "public static void setAutoDetectConnectivityState(boolean shouldAutoDetect)", "public static void registerToReceiveNotificationsAlways()", "public static void setAutoDetectConnectivityState(NetworkChangeNotifierAutoDetect.RegistrationPolicy policy)", "private void destroyAutoDetector()", "private void setAutoDetectConnectivityStateInternal(boolean shouldAutoDetect, NetworkChangeNotifierAutoDetect.RegistrationPolicy policy)", "public static void forceConnectivityState(boolean networkAvailable)", "private void forceConnectivityStateInternal(boolean forceOnline)", "public static void fakeNetworkConnected(long netId, int connectionType)", "public static void fakeNetworkSoonToBeDisconnected(long netId)", "public static void fakeNetworkDisconnected(long netId)", "public static void fakePurgeActiveNetworkList(long[] activeNetIds)", "public static void fakeDefaultNetwork(long netId, int connectionType)", "public static void fakeConnectionCostChanged(int connectionCost)", "public static void fakeConnectionSubtypeChanged(int connectionSubtype)", "private void updateCurrentConnectionType(int newConnectionType)", " void notifyObserversOfConnectionTypeChange(int newConnectionType)", "private void notifyObserversOfConnectionTypeChange(int newConnectionType, long defaultNetId)", "private void updateCurrentConnectionCost(int newConnectionCost)", " void notifyObserversOfConnectionCostChange(int newConnectionCost)", " void notifyObserversOfConnectionSubtypeChange(int connectionSubtype)", " void notifyObserversOfNetworkConnect(long netId, int connectionType)", " void notifyObserversOfNetworkSoonToDisconnect(long netId)", " void notifyObserversOfNetworkDisconnect(long netId)", " void notifyObserversToPurgeActiveNetworkList(long[] activeNetIds)", "public static void addConnectionTypeObserver(ConnectionTypeObserver observer)", "private void addConnectionTypeObserverInternal(ConnectionTypeObserver observer)", "public static void removeConnectionTypeObserver(ConnectionTypeObserver observer)", "private void removeConnectionTypeObserverInternal(ConnectionTypeObserver observer)", "public static NetworkChangeNotifierAutoDetect getAutoDetectorForTest()", "public static boolean isOnline()" ],
  "variableNames" : [ "mNativeChangeNotifiers", "mConnectionTypeObservers", "mAutoDetector", "mCurrentConnectionType", "mCurrentConnectionCost", "sInstance" ]
}