{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/graphics/drawable/RippleDrawable.java",
  "packageName" : "android.graphics.drawable",
  "className" : "RippleDrawable",
  "comment" : "\n * Drawable that shows a ripple effect in response to state changes. The\n * anchoring position of the ripple for a given state may be specified by\n * calling {@link #setHotspot(float, float)} with the corresponding state\n * attribute identifier.\n * <p>\n * A touch feedback drawable may contain multiple child layers, including a\n * special mask layer that is not drawn to the screen. A single layer may be\n * set as the mask from XML by specifying its {@code android:id} value as\n * {@link android.R.id#mask}. At run time, a single layer may be set as the\n * mask using {@code setId(..., android.R.id.mask)} or an existing mask layer\n * may be replaced using {@code setDrawableByLayerId(android.R.id.mask, ...)}.\n * <pre>\n * <code>&lt;!-- A red ripple masked against an opaque rectangle. --/>\n * &lt;ripple android:color=\"#ffff0000\">\n *   &lt;item android:id=\"@android:id/mask\"\n *         android:drawable=\"@android:color/white\" />\n * &lt;/ripple></code>\n * </pre>\n * <p>\n * If a mask layer is set, the ripple effect will be masked against that layer\n * before it is drawn over the composite of the remaining child layers.\n * <p>\n * If no mask layer is set, the ripple effect is masked against the composite\n * of the child layers.\n * <pre>\n * <code>&lt;!-- A green ripple drawn atop a black rectangle. --/>\n * &lt;ripple android:color=\"#ff00ff00\">\n *   &lt;item android:drawable=\"@android:color/black\" />\n * &lt;/ripple>\n *\n * &lt;!-- A blue ripple drawn atop a drawable resource. --/>\n * &lt;ripple android:color=\"#ff0000ff\">\n *   &lt;item android:drawable=\"@drawable/my_drawable\" />\n * &lt;/ripple></code>\n * </pre>\n * <p>\n * If no child layers or mask is specified and the ripple is set as a View\n * background, the ripple will be drawn atop the first available parent\n * background within the View's hierarchy. In this case, the drawing region\n * may extend outside of the Drawable bounds.\n * <pre>\n * <code>&lt;!-- An unbounded red ripple. --/>\n * &lt;ripple android:color=\"#ffff0000\" /></code>\n * </pre>\n *\n * @attr ref android.R.styleable#RippleDrawable_color\n ",
  "variables" : [ {
    "name" : "RADIUS_AUTO",
    "type" : "int",
    "comment" : "\n     * Radius value that specifies the ripple radius should be computed based\n     * on the size of the ripple's container.\n     ",
    "links" : [ ]
  }, {
    "name" : "MASK_UNKNOWN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MASK_NONE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MASK_CONTENT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MASK_EXPLICIT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_RIPPLES",
    "type" : "int",
    "comment" : " The maximum number of ripples supported. ",
    "links" : [ ]
  }, {
    "name" : "mTempRect",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHotspotBounds",
    "type" : "Rect",
    "comment" : " Current ripple effect bounds, used to constrain ripple effects. ",
    "links" : [ ]
  }, {
    "name" : "mDrawingBounds",
    "type" : "Rect",
    "comment" : " Current drawing bounds, used to compute dirty region. ",
    "links" : [ ]
  }, {
    "name" : "mDirtyBounds",
    "type" : "Rect",
    "comment" : " Current dirty bounds, union of current and previous drawing bounds. ",
    "links" : [ ]
  }, {
    "name" : "mState",
    "type" : "RippleState",
    "comment" : " Mirrors mLayerState with some extra information. ",
    "links" : [ ]
  }, {
    "name" : "mMask",
    "type" : "Drawable",
    "comment" : " The masking layer, e.g. the layer with id R.id.mask. ",
    "links" : [ ]
  }, {
    "name" : "mBackground",
    "type" : "RippleBackground",
    "comment" : " The current background. May be actively animating or pending entry. ",
    "links" : [ ]
  }, {
    "name" : "mMaskBuffer",
    "type" : "Bitmap",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaskShader",
    "type" : "BitmapShader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaskCanvas",
    "type" : "Canvas",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaskMatrix",
    "type" : "Matrix",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaskColorFilter",
    "type" : "PorterDuffColorFilter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHasValidMask",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRipple",
    "type" : "RippleForeground",
    "comment" : " The current ripple. May be actively animating or pending entry. ",
    "links" : [ ]
  }, {
    "name" : "mRippleActive",
    "type" : "boolean",
    "comment" : " Whether we expect to draw a ripple when visible. ",
    "links" : [ ]
  }, {
    "name" : "mPendingX",
    "type" : "float",
    "comment" : " Hotspot coordinates that are awaiting activation.",
    "links" : [ ]
  }, {
    "name" : "mPendingY",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHasPending",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExitingRipples",
    "type" : "RippleForeground[]",
    "comment" : "\n     * Lazily-created array of actively animating ripples. Inactive ripples are\n     * pruned during draw(). The locations of these will not change.\n     ",
    "links" : [ ]
  }, {
    "name" : "mExitingRipplesCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRipplePaint",
    "type" : "Paint",
    "comment" : " Paint used to control appearance of ripples. ",
    "links" : [ ]
  }, {
    "name" : "mDensity",
    "type" : "int",
    "comment" : " Target density of the display into which ripples are drawn. ",
    "links" : [ ]
  }, {
    "name" : "mOverrideBounds",
    "type" : "boolean",
    "comment" : " Whether bounds are being overridden. ",
    "links" : [ ]
  }, {
    "name" : "mForceSoftware",
    "type" : "boolean",
    "comment" : "\n     * If set, force all ripple animations to not run on RenderThread, even if it would be\n     * available.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void jumpToCurrentState()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void cancelExitingRipples()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getOpacity()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected boolean onStateChange(int[] stateSet)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setRippleActive(boolean active)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setBackgroundActive(boolean hovered, boolean focused, boolean pressed)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onBoundsChange(Rect bounds)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean setVisible(boolean visible, boolean restart)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isProjected()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean isBounded()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isStateful()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasFocusStateSpecified()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setColor(ColorStateList color)",
    "returnType" : "void",
    "comment" : "\n     * Sets the ripple color.\n     *\n     * @param color Ripple color as a color state list.\n     *\n     * @attr ref android.R.styleable#RippleDrawable_color\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setRadius(int radius)",
    "returnType" : "void",
    "comment" : "\n     * Sets the radius in pixels of the fully expanded ripple.\n     *\n     * @param radius ripple radius in pixels, or {@link #RADIUS_AUTO} to\n     *               compute the radius based on the container size\n     * @attr ref android.R.styleable#RippleDrawable_radius\n     ",
    "links" : [ "#RADIUS_AUTO" ]
  }, {
    "name" : "public int getRadius()",
    "returnType" : "int",
    "comment" : "\n     * @return the radius in pixels of the fully expanded ripple if an explicit\n     *         radius has been set, or {@link #RADIUS_AUTO} if the radius is\n     *         computed based on the container size\n     * @attr ref android.R.styleable#RippleDrawable_radius\n     ",
    "links" : [ "#RADIUS_AUTO" ]
  }, {
    "name" : "public void inflate(@NonNull Resources r, @NonNull XmlPullParser parser, @NonNull AttributeSet attrs, @Nullable Theme theme) throws XmlPullParserException, IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean setDrawableByLayerId(int id, Drawable drawable)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setPaddingMode(int mode)",
    "returnType" : "void",
    "comment" : "\n     * Specifies how layer padding should affect the bounds of subsequent\n     * layers. The default and recommended value for RippleDrawable is\n     * {@link #PADDING_MODE_STACK}.\n     *\n     * @param mode padding mode, one of:\n     *            <ul>\n     *            <li>{@link #PADDING_MODE_NEST} to nest each layer inside the\n     *            padding of the previous layer\n     *            <li>{@link #PADDING_MODE_STACK} to stack each layer directly\n     *            atop the previous layer\n     *            </ul>\n     * @see #getPaddingMode()\n     ",
    "links" : [ "#PADDING_MODE_NEST", "#PADDING_MODE_STACK" ]
  }, {
    "name" : "private void updateStateFromTypedArray(@NonNull TypedArray a) throws XmlPullParserException",
    "returnType" : "void",
    "comment" : "\n     * Initializes the constant state from the values in the typed array.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void verifyRequiredAttributes(@NonNull TypedArray a) throws XmlPullParserException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void applyTheme(@NonNull Theme t)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean canApplyTheme()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setHotspot(float x, float y)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void tryRippleEnter()",
    "returnType" : "void",
    "comment" : "\n     * Attempts to start an enter animation for the active hotspot. Fails if\n     * there are too many animating ripples.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void tryRippleExit()",
    "returnType" : "void",
    "comment" : "\n     * Attempts to start an exit animation for the active hotspot. Fails if\n     * there is no active hotspot.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void clearHotspots()",
    "returnType" : "void",
    "comment" : "\n     * Cancels and removes the active ripple, all exiting ripples, and the\n     * background. Nothing will be drawn after this method is called.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setHotspotBounds(int left, int top, int right, int bottom)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void getHotspotBounds(Rect outRect)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onHotspotBoundsChanged()",
    "returnType" : "void",
    "comment" : "\n     * Notifies all the animating ripples that the hotspot bounds have changed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void getOutline(@NonNull Outline outline)",
    "returnType" : "void",
    "comment" : "\n     * Populates <code>outline</code> with the first available layer outline,\n     * excluding the mask layer.\n     *\n     * @param outline Outline in which to place the first available layer outline\n     ",
    "links" : [ ]
  }, {
    "name" : "public void draw(@NonNull Canvas canvas)",
    "returnType" : "void",
    "comment" : "\n     * Optimized for drawing ripples with a mask layer and optional content.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void invalidateSelf()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void invalidateSelf(boolean invalidateMask)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void pruneRipples()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateMaskShaderIfNeeded()",
    "returnType" : "void",
    "comment" : "\n     * @return whether we need to use a mask\n     ",
    "links" : [ ]
  }, {
    "name" : "private int getMaskType()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void drawContent(Canvas canvas)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void drawBackgroundAndRipples(Canvas canvas)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void drawMask(Canvas canvas)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " Paint getRipplePaint()",
    "returnType" : "Paint",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Rect getDirtyBounds()",
    "returnType" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setForceSoftware(boolean forceSoftware)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether to disable RenderThread animations for this ripple.\n     *\n     * @param forceSoftware true if RenderThread animations should be disabled, false otherwise\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public ConstantState getConstantState()",
    "returnType" : "ConstantState",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Drawable mutate()",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " RippleState createConstantState(LayerState state, Resources res)",
    "returnType" : "RippleState",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateLocalState()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "RADIUS_AUTO", "MASK_UNKNOWN", "MASK_NONE", "MASK_CONTENT", "MASK_EXPLICIT", "MAX_RIPPLES", "mTempRect", "mHotspotBounds", "mDrawingBounds", "mDirtyBounds", "mState", "mMask", "mBackground", "mMaskBuffer", "mMaskShader", "mMaskCanvas", "mMaskMatrix", "mMaskColorFilter", "mHasValidMask", "mRipple", "mRippleActive", "mPendingX", "mPendingY", "mHasPending", "mExitingRipples", "mExitingRipplesCount", "mRipplePaint", "mDensity", "mOverrideBounds", "mForceSoftware" ],
  "methodNames" : [ "public void jumpToCurrentState()", "private void cancelExitingRipples()", "public int getOpacity()", "protected boolean onStateChange(int[] stateSet)", "private void setRippleActive(boolean active)", "private void setBackgroundActive(boolean hovered, boolean focused, boolean pressed)", "protected void onBoundsChange(Rect bounds)", "public boolean setVisible(boolean visible, boolean restart)", "public boolean isProjected()", "private boolean isBounded()", "public boolean isStateful()", "public boolean hasFocusStateSpecified()", "public void setColor(ColorStateList color)", "public void setRadius(int radius)", "public int getRadius()", "public void inflate(@NonNull Resources r, @NonNull XmlPullParser parser, @NonNull AttributeSet attrs, @Nullable Theme theme) throws XmlPullParserException, IOException", "public boolean setDrawableByLayerId(int id, Drawable drawable)", "public void setPaddingMode(int mode)", "private void updateStateFromTypedArray(@NonNull TypedArray a) throws XmlPullParserException", "private void verifyRequiredAttributes(@NonNull TypedArray a) throws XmlPullParserException", "public void applyTheme(@NonNull Theme t)", "public boolean canApplyTheme()", "public void setHotspot(float x, float y)", "private void tryRippleEnter()", "private void tryRippleExit()", "private void clearHotspots()", "public void setHotspotBounds(int left, int top, int right, int bottom)", "public void getHotspotBounds(Rect outRect)", "private void onHotspotBoundsChanged()", "public void getOutline(@NonNull Outline outline)", "public void draw(@NonNull Canvas canvas)", "public void invalidateSelf()", " void invalidateSelf(boolean invalidateMask)", "private void pruneRipples()", "private void updateMaskShaderIfNeeded()", "private int getMaskType()", "private void drawContent(Canvas canvas)", "private void drawBackgroundAndRipples(Canvas canvas)", "private void drawMask(Canvas canvas)", " Paint getRipplePaint()", "public Rect getDirtyBounds()", "public void setForceSoftware(boolean forceSoftware)", "public ConstantState getConstantState()", "public Drawable mutate()", " RippleState createConstantState(LayerState state, Resources res)", "private void updateLocalState()" ]
}