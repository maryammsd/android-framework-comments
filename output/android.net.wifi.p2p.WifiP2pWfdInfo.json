{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/wifi/p2p/WifiP2pWfdInfo.java",
  "packageName" : "android.net.wifi.p2p",
  "className" : "WifiP2pWfdInfo",
  "comment" : "\n * A class representing Wifi Display information for a device.\n *\n * See Wifi Display technical specification v1.0.0, section 5.1.2.\n * See Wifi Display technical specification v2.0.0, section 5.1.12 for Wifi Display R2.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mEnabled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDeviceInfo",
    "type" : "int",
    "comment" : " Device information bitmap ",
    "links" : [ ]
  }, {
    "name" : "mR2DeviceInfo",
    "type" : "int",
    "comment" : " R2 Device information bitmap ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_TYPE_WFD_SOURCE",
    "type" : "int",
    "comment" : " The device is a Wifi Display Source. ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_TYPE_PRIMARY_SINK",
    "type" : "int",
    "comment" : " The device is a primary sink. ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_TYPE_SECONDARY_SINK",
    "type" : "int",
    "comment" : " The device is a secondary sink. This type is only supported by R1. ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_TYPE_SOURCE_OR_PRIMARY_SINK",
    "type" : "int",
    "comment" : " The device is dual-role capable i.e. either a WFD source or a primary sink. ",
    "links" : [ ]
  }, {
    "name" : "PREFERRED_CONNECTIVITY_P2P",
    "type" : "int",
    "comment" : " Wifi Display (WFD) preferred connectivity is Wifi Direct (P2P). ",
    "links" : [ ]
  }, {
    "name" : "PREFERRED_CONNECTIVITY_TDLS",
    "type" : "int",
    "comment" : " Wifi Display (WFD) preferred connectivity is TDLS. ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_INFO_DEVICE_TYPE_MASK",
    "type" : "int",
    "comment" : "\n     * {@link #getDeviceInfo()} & {@link #DEVICE_INFO_DEVICE_TYPE_MASK} is one of\n     * {@link #DEVICE_TYPE_WFD_SOURCE}, {@link #DEVICE_TYPE_PRIMARY_SINK},\n     * {@link #DEVICE_TYPE_SECONDARY_SINK} or {@link #DEVICE_TYPE_SOURCE_OR_PRIMARY_SINK}.\n     *\n     * The bit definition is listed in 5.1.2 WFD Device Information Subelement and\n     * 5.1.12 WFD R2 Device Information Subelement in Wifi Display Technical Specification.\n     ",
    "links" : [ "#getDeviceInfo()", "#DEVICE_TYPE_SECONDARY_SINK", "#DEVICE_TYPE_PRIMARY_SINK", "#DEVICE_TYPE_WFD_SOURCE", "#DEVICE_TYPE_SOURCE_OR_PRIMARY_SINK", "#DEVICE_INFO_DEVICE_TYPE_MASK" ]
  }, {
    "name" : "DEVICE_INFO_COUPLED_SINK_SUPPORT_AT_SOURCE",
    "type" : "int",
    "comment" : "\n     * Bit field for {@link #getDeviceInfo()}, indicates that coupled sink is supported at source.\n     *\n     * The bit definition is listed in 5.1.2 WFD Device Information Subelement in\n     * Wifi Display Technical Specification.\n     ",
    "links" : [ "#getDeviceInfo()" ]
  }, {
    "name" : "DEVICE_INFO_COUPLED_SINK_SUPPORT_AT_SINK",
    "type" : "int",
    "comment" : "\n     * Bit field for {@link #getDeviceInfo()}, indicates that coupled sink is supporeted at sink.\n     *\n     * The bit definition is listed in 5.1.2 WFD Device Information Subelement in\n     * Wifi Display Technical Specification.\n     ",
    "links" : [ "#getDeviceInfo()" ]
  }, {
    "name" : "SESSION_AVAILABLE_BIT1",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SESSION_AVAILABLE_BIT2",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEVICE_INFO_SESSION_AVAILABLE_MASK",
    "type" : "int",
    "comment" : "\n     * Bit field for {@link #getDeviceInfo()}, indicates that Wifi Display session is available.\n     *\n     * The bit definition is listed in 5.1.2 WFD Device Information Subelement in\n     * Wifi Display Technical Specification.\n     ",
    "links" : [ "#getDeviceInfo()" ]
  }, {
    "name" : "DEVICE_INFO_WFD_SERVICE_DISCOVERY_SUPPORT",
    "type" : "int",
    "comment" : "\n     * Bit field for {@link #getDeviceInfo()}, indicates that Wifi Display discovery is supported.\n     *\n     * The bit definition is listed in 5.1.2 WFD Device Information Subelement in\n     * Wifi Display Technical Specification.\n     ",
    "links" : [ "#getDeviceInfo()" ]
  }, {
    "name" : "DEVICE_INFO_PREFERRED_CONNECTIVITY_MASK",
    "type" : "int",
    "comment" : "\n     * Bit field for {@link #getDeviceInfo()}, indicate the preferred connectifity for Wifi Display.\n     *\n     * The bit definition is listed in 5.1.2 WFD Device Information Subelement in\n     * Wifi Display Technical Specification.\n     * The value is one of {@link #PREFERRED_CONNECTIVITY_P2P} or\n     * {@link #PREFERRED_CONNECTIVITY_TDLS}.\n     ",
    "links" : [ "#getDeviceInfo()", "#PREFERRED_CONNECTIVITY_TDLS", "#PREFERRED_CONNECTIVITY_P2P" ]
  }, {
    "name" : "DEVICE_INFO_CONTENT_PROTECTION_SUPPORT",
    "type" : "int",
    "comment" : "\n     * Bit field for {@link #getDeviceInfo()}, indicate the support of Content Protection\n     * using the HDCP system 2.0/2.1.\n     *\n     * The bit definition is listed in 5.1.2 WFD Device Information Subelement in\n     * Wifi Display Technical Specification.\n     ",
    "links" : [ "#getDeviceInfo()" ]
  }, {
    "name" : "DEVICE_INFO_TIME_SYNCHRONIZATION_SUPPORT",
    "type" : "int",
    "comment" : "\n     * Bit field for {@link #getDeviceInfo()}, indicate time synchronization\n     * using 802.1AS is supported.\n     *\n     * The bit definition is listed in 5.1.2 WFD Device Information Subelement in\n     * Wifi Display Technical Specification.\n     ",
    "links" : [ "#getDeviceInfo()" ]
  }, {
    "name" : "DEVICE_INFO_AUDIO_UNSUPPORTED_AT_PRIMARY_SINK",
    "type" : "int",
    "comment" : "\n     * Bit field for {@link #getDeviceInfo()}, indicate audio is not supported at primary sink.\n     *\n     * The bit definition is listed in 5.1.2 WFD Device Information Subelement in\n     * Wifi Display Technical Specification.\n     ",
    "links" : [ "#getDeviceInfo()" ]
  }, {
    "name" : "DEVICE_INFO_AUDIO_ONLY_SUPPORT_AT_SOURCE",
    "type" : "int",
    "comment" : "\n     * Bit field for {@link #getDeviceInfo()}, indicate audo is only supported at source.\n     *\n     * The bit definition is listed in 5.1.2 WFD Device Information Subelement in\n     * Wifi Display Technical Specification.\n     ",
    "links" : [ "#getDeviceInfo()" ]
  }, {
    "name" : "DEVICE_INFO_TDLS_PERSISTENT_GROUP",
    "type" : "int",
    "comment" : " Bit field for {@link #getDeviceInfo()}, indicate that TDLS persistent group is intended.\n     *\n     * The bit definition is listed in 5.1.2 WFD Device Information Subelement in\n     * Wifi Display Technical Specification.\n     ",
    "links" : [ "#getDeviceInfo()" ]
  }, {
    "name" : "DEVICE_INFO_TDLS_PERSISTENT_GROUP_REINVOKE",
    "type" : "int",
    "comment" : " Bit field for {@link #getDeviceInfo()}, indicate that the request is for\n     * re-invocation of TDLS persistent group.\n     *\n     * The bit definition is listed in 5.1.2 WFD Device Information Subelement in\n     * Wifi Display Technical Specification.\n     ",
    "links" : [ "#getDeviceInfo()" ]
  }, {
    "name" : "mCtrlPort",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaxThroughput",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<WifiP2pWfdInfo>",
    "comment" : " Implement the Parcelable interface ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getDeviceInfo()",
    "returnType" : "int",
    "comment" : "\n     * Return R1 raw device info, See\n     * Wifi Display technical specification v1.0.0, section 5.1.2.\n     * Access bit fields by DEVICE_INFO_* constants.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setR2DeviceInfo(int r2DeviceInfo)",
    "returnType" : "void",
    "comment" : "\n     * Set Wifi Display R2 raw device info, see\n     * Wifi Display technical specification v2.0.0, section 5.1.12.\n     * Access bit fields by {@link #DEVICE_INFO_DEVICE_TYPE_MASK}.\n     *\n     * @param r2DeviceInfo the raw data of R2 device info.\n     * @hide\n     ",
    "links" : [ "#DEVICE_INFO_DEVICE_TYPE_MASK" ]
  }, {
    "name" : "public int getR2DeviceInfo()",
    "returnType" : "int",
    "comment" : "\n     * Return R2 raw device info, See\n     * Wifi Display technical specification v2.0.0, section 5.1.12.\n     * Access bit fields by {@link #DEVICE_INFO_DEVICE_TYPE_MASK}.\n     ",
    "links" : [ "#DEVICE_INFO_DEVICE_TYPE_MASK" ]
  }, {
    "name" : "public boolean isEnabled()",
    "returnType" : "boolean",
    "comment" : " Returns true is Wifi Display is enabled, false otherwise. ",
    "links" : [ ]
  }, {
    "name" : "public boolean isR2Supported()",
    "returnType" : "boolean",
    "comment" : " Returns true is Wifi Display R2 is enabled, false otherwise. ",
    "links" : [ ]
  }, {
    "name" : "public void setEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether Wifi Display should be enabled.\n     *\n     * @param enabled true to enable Wifi Display, false to disable\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean setR2DeviceType(@DeviceType int deviceType)",
    "returnType" : "boolean",
    "comment" : "\n     * Sets the type of the Wifi Display R2 device.\n     * See Wifi Display technical specification v2.0.0, section 5.1.12 for Wifi Display R2.\n     * Before calling this API, call {@link WifiManager#isWifiDisplayR2Supported()\n     * to know whether Wifi Display R2 is supported or not.\n     * If R2 info was filled without Wifi Display R2 support,\n     * {@link WifiP2pManager#setWfdInfo(Channel, WifiP2pWfdInfo, ActionListener)\n     * would fail.\n     *\n     * @param deviceType One of {@link #DEVICE_TYPE_WFD_SOURCE}, {@link #DEVICE_TYPE_PRIMARY_SINK},\n     * {@link #DEVICE_TYPE_SOURCE_OR_PRIMARY_SINK}\n     * @return true if the device type was successfully set, false otherwise\n     ",
    "links" : [ "#isWifiDisplayR2Supported()", "#DEVICE_TYPE_PRIMARY_SINK", "android.net.wifi.p2p.WifiP2pManager#setWfdInfo(Channel", "#DEVICE_TYPE_WFD_SOURCE", "#DEVICE_TYPE_SOURCE_OR_PRIMARY_SINK" ]
  }, {
    "name" : "public int getDeviceType()",
    "returnType" : "int",
    "comment" : "\n     * Get the type of the device.\n     * One of {@link #DEVICE_TYPE_WFD_SOURCE}, {@link #DEVICE_TYPE_PRIMARY_SINK},\n     * {@link #DEVICE_TYPE_SECONDARY_SINK}, {@link #DEVICE_TYPE_SOURCE_OR_PRIMARY_SINK}\n     ",
    "links" : [ "#DEVICE_TYPE_SECONDARY_SINK", "#DEVICE_TYPE_PRIMARY_SINK", "#DEVICE_TYPE_WFD_SOURCE", "#DEVICE_TYPE_SOURCE_OR_PRIMARY_SINK" ]
  }, {
    "name" : "public int getR2DeviceType()",
    "returnType" : "int",
    "comment" : "\n     * Get the type of the R2 device.\n     * One of {@link #DEVICE_TYPE_WFD_SOURCE}, {@link #DEVICE_TYPE_PRIMARY_SINK},\n     * or {@link #DEVICE_TYPE_SOURCE_OR_PRIMARY_SINK}\n     ",
    "links" : [ "#DEVICE_TYPE_PRIMARY_SINK", "#DEVICE_TYPE_WFD_SOURCE", "#DEVICE_TYPE_SOURCE_OR_PRIMARY_SINK" ]
  }, {
    "name" : "public boolean setDeviceType(@DeviceType int deviceType)",
    "returnType" : "boolean",
    "comment" : "\n     * Sets the type of the device.\n     *\n     * @param deviceType One of {@link #DEVICE_TYPE_WFD_SOURCE}, {@link #DEVICE_TYPE_PRIMARY_SINK},\n     * {@link #DEVICE_TYPE_SECONDARY_SINK}, {@link #DEVICE_TYPE_SOURCE_OR_PRIMARY_SINK}\n     * @return true if the device type was successfully set, false otherwise\n     ",
    "links" : [ "#DEVICE_TYPE_SECONDARY_SINK", "#DEVICE_TYPE_PRIMARY_SINK", "#DEVICE_TYPE_WFD_SOURCE", "#DEVICE_TYPE_SOURCE_OR_PRIMARY_SINK" ]
  }, {
    "name" : "public boolean isSessionAvailable()",
    "returnType" : "boolean",
    "comment" : " Returns true if a session is available, false otherwise. ",
    "links" : [ ]
  }, {
    "name" : "public void setSessionAvailable(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether a session is available.\n     *\n     * @param enabled true to indicate that a session is available, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isContentProtectionSupported()",
    "returnType" : "boolean",
    "comment" : "\n     * @return true if Content Protection using the HDCP system 2.0/2.1 is supported.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setContentProtectionSupported(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether Content Protection using the HDCP system 2.0/2.1 is supported.\n     *\n     * @param enabled true to indicate that Content Protection is supported, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isCoupledSinkSupportedAtSource()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if Coupled Sink is supported by WFD Source.\n     * See Wifi Display technical specification v1.0.0, section 4.9.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCoupledSinkSupportAtSource(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether Coupled Sink feature is supported by WFD Source.\n     * See Wifi Display technical specification v1.0.0, section 4.9.\n     *\n     * @param enabled true to indicate support for coupled sink, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isCoupledSinkSupportedAtSink()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if Coupled Sink is supported by WFD Sink.\n     * See Wifi Display technical specification v1.0.0, section 4.9.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCoupledSinkSupportAtSink(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether Coupled Sink feature is supported by WFD Sink.\n     * See Wifi Display technical specification v1.0.0, section 4.9.\n     *\n     * @param enabled true to indicate support for coupled sink, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getControlPort()",
    "returnType" : "int",
    "comment" : " Returns the TCP port at which the WFD Device listens for RTSP messages. ",
    "links" : [ ]
  }, {
    "name" : "public void setControlPort(@IntRange(from = 0) int port)",
    "returnType" : "void",
    "comment" : " Sets the TCP port at which the WFD Device listens for RTSP messages. ",
    "links" : [ ]
  }, {
    "name" : "public void setMaxThroughput(@IntRange(from = 0) int maxThroughput)",
    "returnType" : "void",
    "comment" : " Sets the maximum average throughput capability of the WFD Device, in megabits/second. ",
    "links" : [ ]
  }, {
    "name" : "public int getMaxThroughput()",
    "returnType" : "int",
    "comment" : " Returns the maximum average throughput capability of the WFD Device, in megabits/second. ",
    "links" : [ ]
  }, {
    "name" : "public String getDeviceInfoHex()",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public String getR2DeviceInfoHex()",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : " Implement the Parcelable interface ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : " Implement the Parcelable interface ",
    "links" : [ ]
  }, {
    "name" : "private void readFromParcel(Parcel in)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int getDeviceInfo()", "public void setR2DeviceInfo(int r2DeviceInfo)", "public int getR2DeviceInfo()", "public boolean isEnabled()", "public boolean isR2Supported()", "public void setEnabled(boolean enabled)", "public boolean setR2DeviceType(@DeviceType int deviceType)", "public int getDeviceType()", "public int getR2DeviceType()", "public boolean setDeviceType(@DeviceType int deviceType)", "public boolean isSessionAvailable()", "public void setSessionAvailable(boolean enabled)", "public boolean isContentProtectionSupported()", "public void setContentProtectionSupported(boolean enabled)", "public boolean isCoupledSinkSupportedAtSource()", "public void setCoupledSinkSupportAtSource(boolean enabled)", "public boolean isCoupledSinkSupportedAtSink()", "public void setCoupledSinkSupportAtSink(boolean enabled)", "public int getControlPort()", "public void setControlPort(@IntRange(from = 0) int port)", "public void setMaxThroughput(@IntRange(from = 0) int maxThroughput)", "public int getMaxThroughput()", "public String getDeviceInfoHex()", "public String getR2DeviceInfoHex()", "public String toString()", "public int describeContents()", "public void writeToParcel(@NonNull Parcel dest, int flags)", "private void readFromParcel(Parcel in)" ],
  "variableNames" : [ "mEnabled", "mDeviceInfo", "mR2DeviceInfo", "DEVICE_TYPE_WFD_SOURCE", "DEVICE_TYPE_PRIMARY_SINK", "DEVICE_TYPE_SECONDARY_SINK", "DEVICE_TYPE_SOURCE_OR_PRIMARY_SINK", "PREFERRED_CONNECTIVITY_P2P", "PREFERRED_CONNECTIVITY_TDLS", "DEVICE_INFO_DEVICE_TYPE_MASK", "DEVICE_INFO_COUPLED_SINK_SUPPORT_AT_SOURCE", "DEVICE_INFO_COUPLED_SINK_SUPPORT_AT_SINK", "SESSION_AVAILABLE_BIT1", "SESSION_AVAILABLE_BIT2", "DEVICE_INFO_SESSION_AVAILABLE_MASK", "DEVICE_INFO_WFD_SERVICE_DISCOVERY_SUPPORT", "DEVICE_INFO_PREFERRED_CONNECTIVITY_MASK", "DEVICE_INFO_CONTENT_PROTECTION_SUPPORT", "DEVICE_INFO_TIME_SYNCHRONIZATION_SUPPORT", "DEVICE_INFO_AUDIO_UNSUPPORTED_AT_PRIMARY_SINK", "DEVICE_INFO_AUDIO_ONLY_SUPPORT_AT_SOURCE", "DEVICE_INFO_TDLS_PERSISTENT_GROUP", "DEVICE_INFO_TDLS_PERSISTENT_GROUP_REINVOKE", "mCtrlPort", "mMaxThroughput", "CREATOR" ]
}