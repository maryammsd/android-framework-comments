{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/net/wifi/p2p/WifiP2pWfdInfo.java",
  "packageName" : "android.net.wifi.p2p",
  "className" : "WifiP2pWfdInfo",
  "comment" : "\n * A class representing Wifi Display information for a device.\n *\n * See Wifi Display technical specification v1.0.0, section 5.1.2.\n ",
  "variables" : [ {
    "name" : "mEnabled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDeviceInfo",
    "type" : "int",
    "comment" : " Device information bitmap ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_TYPE_WFD_SOURCE",
    "type" : "int",
    "comment" : " The device is a Wifi Display Source. ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_TYPE_PRIMARY_SINK",
    "type" : "int",
    "comment" : " The device is a primary sink. ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_TYPE_SECONDARY_SINK",
    "type" : "int",
    "comment" : " The device is a secondary sink. ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_TYPE_SOURCE_OR_PRIMARY_SINK",
    "type" : "int",
    "comment" : " The device is dual-role capable i.e. either a WFD source or a primary sink. ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_TYPE",
    "type" : "int",
    "comment" : "\n     * {@link #mDeviceInfo} & {@link #DEVICE_TYPE} is one of {@link #DEVICE_TYPE_WFD_SOURCE},\n     * {@link #DEVICE_TYPE_PRIMARY_SINK}, {@link #DEVICE_TYPE_SECONDARY_SINK} or\n     * {@link #DEVICE_TYPE_SOURCE_OR_PRIMARY_SINK}.\n     *\n     * The bit definition is listed in 5.1.2 WFD Device Information Subelement in\n     * Wi-Fi Display Technical Specification.\n     ",
    "links" : [ "#DEVICE_TYPE_SECONDARY_SINK", "#DEVICE_TYPE_PRIMARY_SINK", "#mDeviceInfo", "#DEVICE_TYPE", "#DEVICE_TYPE_WFD_SOURCE", "#DEVICE_TYPE_SOURCE_OR_PRIMARY_SINK" ]
  }, {
    "name" : "COUPLED_SINK_SUPPORT_AT_SOURCE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "COUPLED_SINK_SUPPORT_AT_SINK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SESSION_AVAILABLE_BIT1",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SESSION_AVAILABLE_BIT2",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SESSION_AVAILABLE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CONTENT_PROTECTION_SUPPORT",
    "type" : "int",
    "comment" : " The support of Content Protection using the HDCP system 2.0/2.1. ",
    "links" : [ ]
  }, {
    "name" : "mCtrlPort",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaxThroughput",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<WifiP2pWfdInfo>",
    "comment" : " Implement the Parcelable interface ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean isEnabled()",
    "returnType" : "boolean",
    "comment" : " Returns true is Wifi Display is enabled, false otherwise. ",
    "links" : [ ]
  }, {
    "name" : "public void setEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether Wifi Display should be enabled.\n     *\n     * @param enabled true to enable Wifi Display, false to disable\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getDeviceType()",
    "returnType" : "int",
    "comment" : "\n     * Get the type of the device.\n     * One of {@link #DEVICE_TYPE_WFD_SOURCE}, {@link #DEVICE_TYPE_PRIMARY_SINK},\n     * {@link #DEVICE_TYPE_SECONDARY_SINK}, {@link #DEVICE_TYPE_SOURCE_OR_PRIMARY_SINK}\n     ",
    "links" : [ "#DEVICE_TYPE_SECONDARY_SINK", "#DEVICE_TYPE_PRIMARY_SINK", "#DEVICE_TYPE_WFD_SOURCE", "#DEVICE_TYPE_SOURCE_OR_PRIMARY_SINK" ]
  }, {
    "name" : "public boolean setDeviceType(@DeviceType int deviceType)",
    "returnType" : "boolean",
    "comment" : "\n     * Sets the type of the device.\n     *\n     * @param deviceType One of {@link #DEVICE_TYPE_WFD_SOURCE}, {@link #DEVICE_TYPE_PRIMARY_SINK},\n     * {@link #DEVICE_TYPE_SECONDARY_SINK}, {@link #DEVICE_TYPE_SOURCE_OR_PRIMARY_SINK}\n     * @return true if the device type was successfully set, false otherwise\n     ",
    "links" : [ "#DEVICE_TYPE_SECONDARY_SINK", "#DEVICE_TYPE_PRIMARY_SINK", "#DEVICE_TYPE_WFD_SOURCE", "#DEVICE_TYPE_SOURCE_OR_PRIMARY_SINK" ]
  }, {
    "name" : "public boolean isSessionAvailable()",
    "returnType" : "boolean",
    "comment" : " Returns true if a session is available, false otherwise. ",
    "links" : [ ]
  }, {
    "name" : "public void setSessionAvailable(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether a session is available.\n     *\n     * @param enabled true to indicate that a session is available, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isContentProtectionSupported()",
    "returnType" : "boolean",
    "comment" : "\n     * @return true if Content Protection using the HDCP system 2.0/2.1 is supported.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setContentProtectionSupported(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether Content Protection using the HDCP system 2.0/2.1 is supported.\n     *\n     * @param enabled true to indicate that Content Protection is supported, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getControlPort()",
    "returnType" : "int",
    "comment" : " Returns the TCP port at which the WFD Device listens for RTSP messages. ",
    "links" : [ ]
  }, {
    "name" : "public void setControlPort(@IntRange(from = 0) int port)",
    "returnType" : "void",
    "comment" : " Sets the TCP port at which the WFD Device listens for RTSP messages. ",
    "links" : [ ]
  }, {
    "name" : "public void setMaxThroughput(@IntRange(from = 0) int maxThroughput)",
    "returnType" : "void",
    "comment" : " Sets the maximum average throughput capability of the WFD Device, in megabits/second. ",
    "links" : [ ]
  }, {
    "name" : "public int getMaxThroughput()",
    "returnType" : "int",
    "comment" : " Returns the maximum average throughput capability of the WFD Device, in megabits/second. ",
    "links" : [ ]
  }, {
    "name" : "public String getDeviceInfoHex()",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : " Implement the Parcelable interface ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : " Implement the Parcelable interface ",
    "links" : [ ]
  }, {
    "name" : "private void readFromParcel(Parcel in)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "mEnabled", "mDeviceInfo", "DEVICE_TYPE_WFD_SOURCE", "DEVICE_TYPE_PRIMARY_SINK", "DEVICE_TYPE_SECONDARY_SINK", "DEVICE_TYPE_SOURCE_OR_PRIMARY_SINK", "DEVICE_TYPE", "COUPLED_SINK_SUPPORT_AT_SOURCE", "COUPLED_SINK_SUPPORT_AT_SINK", "SESSION_AVAILABLE_BIT1", "SESSION_AVAILABLE_BIT2", "SESSION_AVAILABLE", "CONTENT_PROTECTION_SUPPORT", "mCtrlPort", "mMaxThroughput", "CREATOR" ],
  "methodNames" : [ "public boolean isEnabled()", "public void setEnabled(boolean enabled)", "public int getDeviceType()", "public boolean setDeviceType(@DeviceType int deviceType)", "public boolean isSessionAvailable()", "public void setSessionAvailable(boolean enabled)", "public boolean isContentProtectionSupported()", "public void setContentProtectionSupported(boolean enabled)", "public int getControlPort()", "public void setControlPort(@IntRange(from = 0) int port)", "public void setMaxThroughput(@IntRange(from = 0) int maxThroughput)", "public int getMaxThroughput()", "public String getDeviceInfoHex()", "public String toString()", "public int describeContents()", "public void writeToParcel(@NonNull Parcel dest, int flags)", "private void readFromParcel(Parcel in)" ]
}