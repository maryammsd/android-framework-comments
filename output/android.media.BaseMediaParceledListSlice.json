{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/BaseMediaParceledListSlice.java",
  "packageName" : "android.media",
  "className" : "BaseMediaParceledListSlice",
  "comment" : "\n * This is a copied version of BaseParceledListSlice in framework with hidden API usages\n * removed.\n *\n * Transfer a large list of Parcelable objects across an IPC.  Splits into\n * multiple transactions if needed.\n *\n * Caveat: for efficiency and security, all elements must be the same concrete type.\n * In order to avoid writing the class name of each object, we must ensure that\n * each object is the same type, or else unparceling then reparceling the data may yield\n * a different result if the class name encoded in the Parcelable is a Base type.\n * See b/17671747.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_IPC_SIZE",
    "type" : "int",
    "comment" : " private static final int MAX_IPC_SIZE = IBinder.getSuggestedMaxIpcSizeBytes();",
    "links" : [ ]
  }, {
    "name" : "mList",
    "type" : "List<T>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInlineCountLimit",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private T readCreator(Parcelable.Creator<?> creator, Parcel p, ClassLoader loader)",
    "returnType" : "T",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void verifySameType(final Class<?> expected, final Class<?> actual)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<T> getList()",
    "returnType" : "List<T>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setInlineCountLimit(int maxCount)",
    "returnType" : "void",
    "comment" : "\n     * Set a limit on the maximum number of entries in the array that will be included\n     * inline in the initial parcelling of this object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "\n     * Write this to another Parcel. Note that this discards the internal Parcel\n     * and should not be used anymore. This is so we can pass this to a Binder\n     * where we won't have a chance to call recycle on this.\n     ",
    "links" : [ ]
  }, {
    "name" : " abstract void writeElement(T parcelable, Parcel reply, int callFlags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " abstract void writeParcelableCreator(T parcelable, Parcel dest)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " abstract Parcelable.Creator<?> readParcelableCreator(Parcel from, ClassLoader loader)",
    "returnType" : "Parcelable.Creator<?>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private T readCreator(Parcelable.Creator<?> creator, Parcel p, ClassLoader loader)", "private static void verifySameType(final Class<?> expected, final Class<?> actual)", "public List<T> getList()", "public void setInlineCountLimit(int maxCount)", "public void writeToParcel(Parcel dest, int flags)", " abstract void writeElement(T parcelable, Parcel reply, int callFlags)", " abstract void writeParcelableCreator(T parcelable, Parcel dest)", " abstract Parcelable.Creator<?> readParcelableCreator(Parcel from, ClassLoader loader)" ],
  "variableNames" : [ "TAG", "DEBUG", "MAX_IPC_SIZE", "mList", "mInlineCountLimit" ]
}