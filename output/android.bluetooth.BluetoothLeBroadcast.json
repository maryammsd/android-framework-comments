{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/bluetooth/BluetoothLeBroadcast.java",
  "packageName" : "android.bluetooth",
  "className" : "BluetoothLeBroadcast",
  "comment" : "\n * This class provides the public APIs to control the BAP Broadcast Source profile.\n *\n * <p>BluetoothLeBroadcast is a proxy object for controlling the Bluetooth LE Broadcast Source\n * Service via IPC. Use {@link BluetoothAdapter#getProfileProxy} to get the BluetoothLeBroadcast\n * proxy object.\n *\n * @hide\n ",
  "links" : [ "android.bluetooth.BluetoothAdapter#getProfileProxy" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VDBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCloseGuard",
    "type" : "CloseGuard",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAdapter",
    "type" : "BluetoothAdapter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAttributionSource",
    "type" : "AttributionSource",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IBluetoothLeAudio",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallbackExecutorMap",
    "type" : "Map<Callback, Executor>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallback",
    "type" : "IBluetoothLeBroadcastCallback",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected void finalize()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getConnectionState(@NonNull BluetoothDevice device)",
    "returnType" : "int",
    "comment" : "\n     * Not supported since LE Audio Broadcasts do not establish a connection.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<BluetoothDevice> getDevicesMatchingConnectionStates(@NonNull int[] states)",
    "returnType" : "List<BluetoothDevice>",
    "comment" : "\n     * Not supported since LE Audio Broadcasts do not establish a connection.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<BluetoothDevice> getConnectedDevices()",
    "returnType" : "List<BluetoothDevice>",
    "comment" : "\n     * Not supported since LE Audio Broadcasts do not establish a connection.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void registerCallback(@NonNull @CallbackExecutor Executor executor, @NonNull Callback callback)",
    "returnType" : "void",
    "comment" : "\n     * Register a {@link Callback} that will be invoked during the operation of this profile.\n     *\n     * <p>Repeated registration of the same <var>callback</var> object after the first call to this\n     * method will result with IllegalArgumentException being thrown, even when the\n     * <var>executor</var> is different. API caller would have to call {@link\n     * #unregisterCallback(Callback)} with the same callback object before registering it again.\n     *\n     * @param executor an {@link Executor} to execute given callback\n     * @param callback user implementation of the {@link Callback}\n     * @throws NullPointerException if a null executor, or callback is given, or\n     *     IllegalArgumentException if the same <var>callback<var> is already registered.\n     * @hide\n     ",
    "links" : [ "#unregisterCallback(Callback)", "Callback", "android.annotation.CallbackExecutor" ]
  }, {
    "name" : "public void unregisterCallback(@NonNull Callback callback)",
    "returnType" : "void",
    "comment" : "\n     * Unregister the specified {@link Callback}\n     *\n     * <p>The same {@link Callback} object used when calling {@link #registerCallback(Executor,\n     * Callback)} must be used.\n     *\n     * <p>Callbacks are automatically unregistered when application process goes away\n     *\n     * @param callback user implementation of the {@link Callback}\n     * @throws NullPointerException when callback is null or IllegalArgumentException when no\n     *     callback is registered\n     * @hide\n     ",
    "links" : [ "Callback", "#registerCallback(Executor" ]
  }, {
    "name" : "public void startBroadcast(@NonNull BluetoothLeAudioContentMetadata contentMetadata, @Nullable byte[] broadcastCode)",
    "returnType" : "void",
    "comment" : "\n     * Start broadcasting to nearby devices using <var>broadcastCode</var> and\n     * <var>contentMetadata</var>\n     *\n     * <p>Encryption will be enabled when <var>broadcastCode</var> is not null.\n     *\n     * <p>As defined in Volume 3, Part C, Section 3.2.6 of Bluetooth Core Specification, Version\n     * 5.3, Broadcast Code is used to encrypt a broadcast audio stream.\n     *\n     * <p>It must be a UTF-8 string that has at least 4 octets and should not exceed 16 octets.\n     *\n     * <p>If the provided <var>broadcastCode</var> is non-null and does not meet the above\n     * requirements, encryption will fail to enable with reason code {@link\n     * BluetoothStatusCodes#ERROR_LE_BROADCAST_INVALID_CODE}\n     *\n     * <p>Caller can set content metadata such as program information string in\n     * <var>contentMetadata</var>\n     *\n     * <p>On success, {@link Callback#onBroadcastStarted(int, int)} will be invoked with {@link\n     * BluetoothStatusCodes#REASON_LOCAL_APP_REQUEST} reason code. On failure, {@link\n     * Callback#onBroadcastStartFailed(int)} will be invoked with reason code.\n     *\n     * <p>In particular, when the number of Broadcast Sources reaches {@link\n     * #getMaximumNumberOfBroadcast()}, this method will fail with {@link\n     * BluetoothStatusCodes#ERROR_LOCAL_NOT_ENOUGH_RESOURCES}\n     *\n     * <p>After broadcast is started, {@link Callback#onBroadcastMetadataChanged(int,\n     * BluetoothLeBroadcastMetadata)} will be invoked to expose the latest Broadcast Group metadata\n     * that can be shared out of band to set up Broadcast Sink without scanning.\n     *\n     * <p>Alternatively, one can also get the latest Broadcast Source meta via {@link\n     * #getAllBroadcastMetadata()}\n     *\n     * @param contentMetadata metadata for the default Broadcast subgroup\n     * @param broadcastCode Encryption will be enabled when <var>broadcastCode</var> is not null\n     * @throws IllegalStateException if callback was not registered\n     * @throws NullPointerException if <var>contentMetadata</var> is null\n     * @hide\n     ",
    "links" : [ "android.bluetooth.BluetoothStatusCodes#REASON_LOCAL_APP_REQUEST", "#onBroadcastStarted(int", "#getMaximumNumberOfBroadcast()", "#onBroadcastMetadataChanged(int", "#getAllBroadcastMetadata()", "#onBroadcastStartFailed(int)", "android.bluetooth.BluetoothStatusCodes#ERROR_LOCAL_NOT_ENOUGH_RESOURCES", "android.bluetooth.BluetoothStatusCodes#ERROR_LE_BROADCAST_INVALID_CODE" ]
  }, {
    "name" : "public void startBroadcast(@NonNull BluetoothLeBroadcastSettings broadcastSettings)",
    "returnType" : "void",
    "comment" : "\n     * Start broadcasting to nearby devices using {@link BluetoothLeBroadcastSettings}.\n     *\n     * @param broadcastSettings broadcast settings for this broadcast group\n     * @throws IllegalStateException if callback was not registered\n     * @throws NullPointerException if <var>broadcastSettings</var> is null\n     * @hide\n     ",
    "links" : [ "android.bluetooth.BluetoothLeBroadcastSettings" ]
  }, {
    "name" : "public void updateBroadcast(int broadcastId, @NonNull BluetoothLeAudioContentMetadata contentMetadata)",
    "returnType" : "void",
    "comment" : "\n     * Update the broadcast with <var>broadcastId</var> with new <var>contentMetadata</var>\n     *\n     * <p>On success, {@link Callback#onBroadcastUpdated(int, int)} will be invoked with reason code\n     * {@link BluetoothStatusCodes#REASON_LOCAL_APP_REQUEST}. On failure, {@link\n     * Callback#onBroadcastUpdateFailed(int, int)} will be invoked with reason code\n     *\n     * @param broadcastId broadcastId as defined by the Basic Audio Profile\n     * @param contentMetadata updated metadata for the default Broadcast subgroup\n     * @throws IllegalStateException if callback was not registered\n     * @throws NullPointerException if <var>contentMetadata</var> is null\n     * @hide\n     ",
    "links" : [ "android.bluetooth.BluetoothStatusCodes#REASON_LOCAL_APP_REQUEST", "#onBroadcastUpdateFailed(int", "#onBroadcastUpdated(int" ]
  }, {
    "name" : "public void updateBroadcast(int broadcastId, @NonNull BluetoothLeBroadcastSettings broadcastSettings)",
    "returnType" : "void",
    "comment" : "\n     * Update the broadcast with <var>broadcastId</var> with <var>BluetoothLeBroadcastSettings</var>\n     *\n     * <p>On success, {@link Callback#onBroadcastUpdated(int, int)} will be invoked with reason code\n     * {@link BluetoothStatusCodes#REASON_LOCAL_APP_REQUEST}. On failure, {@link\n     * Callback#onBroadcastUpdateFailed(int, int)} will be invoked with reason code\n     *\n     * @param broadcastId broadcastId as defined by the Basic Audio Profile\n     * @param broadcastSettings broadcast settings for this broadcast group\n     * @throws IllegalStateException if callback was not registered\n     * @throws NullPointerException if <var>broadcastSettings</var> is null\n     * @hide\n     ",
    "links" : [ "android.bluetooth.BluetoothStatusCodes#REASON_LOCAL_APP_REQUEST", "#onBroadcastUpdateFailed(int", "#onBroadcastUpdated(int" ]
  }, {
    "name" : "public void stopBroadcast(int broadcastId)",
    "returnType" : "void",
    "comment" : "\n     * Stop broadcasting.\n     *\n     * <p>On success, {@link Callback#onBroadcastStopped(int, int)} will be invoked with reason code\n     * {@link BluetoothStatusCodes#REASON_LOCAL_APP_REQUEST} and the <var>broadcastId</var> On\n     * failure, {@link Callback#onBroadcastStopFailed(int)} will be invoked with reason code\n     *\n     * @param broadcastId as defined by the Basic Audio Profile\n     * @throws IllegalStateException if callback was not registered\n     * @hide\n     ",
    "links" : [ "android.bluetooth.BluetoothStatusCodes#REASON_LOCAL_APP_REQUEST", "#onBroadcastStopFailed(int)", "#onBroadcastStopped(int" ]
  }, {
    "name" : "public boolean isPlaying(int broadcastId)",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if audio is being broadcasted on the Broadcast Source as identified by the\n     * <var>broadcastId</var>\n     *\n     * @param broadcastId as defined in the Basic Audio Profile\n     * @return true if audio is being broadcasted\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<BluetoothLeBroadcastMetadata> getAllBroadcastMetadata()",
    "returnType" : "List<BluetoothLeBroadcastMetadata>",
    "comment" : "\n     * Get {@link BluetoothLeBroadcastMetadata} for all Broadcast Groups currently running on this\n     * device\n     *\n     * @return list of {@link BluetoothLeBroadcastMetadata}\n     * @hide\n     ",
    "links" : [ "android.bluetooth.BluetoothLeBroadcastMetadata" ]
  }, {
    "name" : "public int getMaximumNumberOfBroadcasts()",
    "returnType" : "int",
    "comment" : "\n     * Get the maximum number of Broadcast Isochronous Group supported on this device\n     *\n     * @return maximum number of Broadcast Isochronous Group supported on this device\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getMaximumStreamsPerBroadcast()",
    "returnType" : "int",
    "comment" : "\n     * Get the maximum number of streams per broadcast Single stream means single Audio PCM stream\n     *\n     * @return maximum number of broadcast streams per broadcast group\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getMaximumSubgroupsPerBroadcast()",
    "returnType" : "int",
    "comment" : "\n     * Get the maximum number of subgroups per broadcast Single stream means single Audio PCM\n     * stream, one stream could support single or multiple subgroups based on language and audio\n     * configuration. e.g. Stream 1 -> 2 subgroups with English and Spanish, Stream 2 -> 1 subgroups\n     * with English, Stream 3 -> 2 subgroups with hearing Aids Standard and High Quality\n     *\n     * @return maximum number of broadcast subgroups per broadcast group\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private BluetoothLeBroadcastSettings buildBroadcastSettingsFromMetadata(BluetoothLeAudioContentMetadata contentMetadata, @Nullable byte[] broadcastCode)",
    "returnType" : "BluetoothLeBroadcastSettings",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isEnabled()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onServiceConnected(IBinder service)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void onServiceDisconnected()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private IBluetoothLeAudio getService()",
    "returnType" : "IBluetoothLeAudio",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public BluetoothAdapter getAdapter()",
    "returnType" : "BluetoothAdapter",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private static void log(String msg)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "protected void finalize()", "public int getConnectionState(@NonNull BluetoothDevice device)", "public List<BluetoothDevice> getDevicesMatchingConnectionStates(@NonNull int[] states)", "public List<BluetoothDevice> getConnectedDevices()", "public void registerCallback(@NonNull @CallbackExecutor Executor executor, @NonNull Callback callback)", "public void unregisterCallback(@NonNull Callback callback)", "public void startBroadcast(@NonNull BluetoothLeAudioContentMetadata contentMetadata, @Nullable byte[] broadcastCode)", "public void startBroadcast(@NonNull BluetoothLeBroadcastSettings broadcastSettings)", "public void updateBroadcast(int broadcastId, @NonNull BluetoothLeAudioContentMetadata contentMetadata)", "public void updateBroadcast(int broadcastId, @NonNull BluetoothLeBroadcastSettings broadcastSettings)", "public void stopBroadcast(int broadcastId)", "public boolean isPlaying(int broadcastId)", "public List<BluetoothLeBroadcastMetadata> getAllBroadcastMetadata()", "public int getMaximumNumberOfBroadcasts()", "public int getMaximumStreamsPerBroadcast()", "public int getMaximumSubgroupsPerBroadcast()", "public void close()", "private BluetoothLeBroadcastSettings buildBroadcastSettingsFromMetadata(BluetoothLeAudioContentMetadata contentMetadata, @Nullable byte[] broadcastCode)", "private boolean isEnabled()", "public void onServiceConnected(IBinder service)", "public void onServiceDisconnected()", "private IBluetoothLeAudio getService()", "public BluetoothAdapter getAdapter()", "private static void log(String msg)" ],
  "variableNames" : [ "TAG", "DBG", "VDBG", "mCloseGuard", "mAdapter", "mAttributionSource", "mService", "mCallbackExecutorMap", "mCallback" ]
}