{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/ondeviceintelligence/ProcessingSignal.java",
  "packageName" : "android.app.ondeviceintelligence",
  "className" : "ProcessingSignal",
  "comment" : "\n * A signal to perform orchestration actions on the inference and optionally receive a output about\n * the result of the signal. This is an extension of {@link android.os.CancellationSignal}.\n *\n * @hide\n ",
  "links" : [ "android.os.CancellationSignal" ],
  "variables" : [ {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_QUEUE_SIZE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mActionParamsQueue",
    "type" : "ArrayDeque<PersistableBundle>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRemote",
    "type" : "IProcessingSignal",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnProcessingSignalCallback",
    "type" : "OnProcessingSignalCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExecutor",
    "type" : "Executor",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void sendSignal(@NonNull PersistableBundle actionParams)",
    "returnType" : "void",
    "comment" : "\n     * Sends a custom signal with the provided parameters. If there are multiple concurrent\n     * requests to this method, the actionParams are queued in a blocking fashion, in the order they\n     * are received.\n     *\n     * It also signals the remote callback\n     * with the same params if already configured, if not the action is queued to be sent when a\n     * remote is configured. Similarly, on the receiver side, the callback will be invoked if\n     * already set, if not all actions are queued to be sent to callback when it is set.\n     *\n     * @param actionParams Parameters for the signal.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOnProcessingSignalCallback(@NonNull @CallbackExecutor Executor executor, @Nullable OnProcessingSignalCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Sets the processing signal callback to be called when signals are received.\n     *\n     * This method is intended to be used by the recipient of a processing signal\n     * such as the remote implementation in\n     * {@link android.service.ondeviceintelligence.OnDeviceSandboxedInferenceService} to handle\n     * processing signals while performing a long-running operation.  This method is not\n     * intended to be used by the caller themselves.\n     *\n     * If {@link ProcessingSignal#sendSignal} has already been called, then the provided callback\n     * is invoked immediately and all previously queued actions are passed to remote signal.\n     *\n     * This method is guaranteed that the callback will not be called after it\n     * has been removed.\n     *\n     * @param callback The processing signal callback, or null to remove the current callback.\n     * @param executor Executor to the run the callback methods on.\n     ",
    "links" : [ "android.service.ondeviceintelligence.OnDeviceSandboxedInferenceService", "android.app.ondeviceintelligence.ProcessingSignal#sendSignal" ]
  }, {
    "name" : " void setRemote(IProcessingSignal remote)",
    "returnType" : "void",
    "comment" : "\n     * Sets the remote transport.\n     *\n     * If there are actions queued from {@link ProcessingSignal#sendSignal}, they are also\n     * sequentially sent to the configured remote.\n     *\n     * This method guarantees that the remote transport will not be called after it\n     * has been removed.\n     *\n     * @param remote The remote transport, or null to remove.\n     * @hide\n     ",
    "links" : [ "android.app.ondeviceintelligence.ProcessingSignal#sendSignal" ]
  }, {
    "name" : "public static IProcessingSignal createTransport()",
    "returnType" : "IProcessingSignal",
    "comment" : "\n     * Creates a transport that can be returned back to the caller of\n     * a Binder function and subsequently used to dispatch a processing signal.\n     *\n     * @return The new processing signal transport.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ProcessingSignal fromTransport(IProcessingSignal transport)",
    "returnType" : "ProcessingSignal",
    "comment" : "\n     * Given a locally created transport, returns its associated processing signal.\n     *\n     * @param transport The locally created transport, or null if none.\n     * @return The associated processing signal, or null if none.\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void sendSignal(@NonNull PersistableBundle actionParams)", "public void setOnProcessingSignalCallback(@NonNull @CallbackExecutor Executor executor, @Nullable OnProcessingSignalCallback callback)", " void setRemote(IProcessingSignal remote)", "public static IProcessingSignal createTransport()", "public static ProcessingSignal fromTransport(IProcessingSignal transport)" ],
  "variableNames" : [ "mLock", "MAX_QUEUE_SIZE", "mActionParamsQueue", "mRemote", "mOnProcessingSignalCallback", "mExecutor" ]
}