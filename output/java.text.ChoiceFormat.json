{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/text/ChoiceFormat.java",
  "packageName" : "java.text",
  "className" : "ChoiceFormat",
  "comment" : "\n * A {@code ChoiceFormat} allows you to attach a format to a range of numbers.\n * It is generally used in a {@code MessageFormat} for handling plurals.\n * The choice is specified with an ascending list of doubles, where each item\n * specifies a half-open interval up to the next item:\n * <blockquote>\n * <pre>\n * X matches j if and only if limit[j] &le; X &lt; limit[j+1]\n * </pre>\n * </blockquote>\n * If there is no match, then either the first or last index is used, depending\n * on whether the number (X) is too low or too high.  If the limit array is not\n * in ascending order, the results of formatting will be incorrect.  ChoiceFormat\n * also accepts <code>&#92;u221E</code> as equivalent to infinity(INF).\n *\n * <p>\n * <strong>Note:</strong>\n * {@code ChoiceFormat} differs from the other {@code Format}\n * classes in that you create a {@code ChoiceFormat} object with a\n * constructor (not with a {@code getInstance} style factory\n * method). The factory methods aren't necessary because {@code ChoiceFormat}\n * doesn't require any complex setup for a given locale. In fact,\n * {@code ChoiceFormat} doesn't implement any locale specific behavior.\n *\n * <p>\n * When creating a {@code ChoiceFormat}, you must specify an array of formats\n * and an array of limits. The length of these arrays must be the same.\n * For example,\n * <ul>\n * <li>\n *     <em>limits</em> = {1,2,3,4,5,6,7}<br>\n *     <em>formats</em> = {\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thur\",\"Fri\",\"Sat\"}\n * <li>\n *     <em>limits</em> = {0, 1, ChoiceFormat.nextDouble(1)}<br>\n *     <em>formats</em> = {\"no files\", \"one file\", \"many files\"}<br>\n *     ({@code nextDouble} can be used to get the next higher double, to\n *     make the half-open interval.)\n * </ul>\n *\n * <p>\n * Here is a simple example that shows formatting and parsing:\n * <blockquote>\n * <pre>{@code\n * double[] limits = {1,2,3,4,5,6,7};\n * String[] dayOfWeekNames = {\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thur\",\"Fri\",\"Sat\"};\n * ChoiceFormat form = new ChoiceFormat(limits, dayOfWeekNames);\n * ParsePosition status = new ParsePosition(0);\n * for (double i = 0.0; i <= 8.0; ++i) {\n *     status.setIndex(0);\n *     System.out.println(i + \" -> \" + form.format(i) + \" -> \"\n *                              + form.parse(form.format(i),status));\n * }\n * }</pre>\n * </blockquote>\n * Here is a more complex example, with a pattern format:\n * <blockquote>\n * <pre>{@code\n * double[] filelimits = {0,1,2};\n * String[] filepart = {\"are no files\",\"is one file\",\"are {2} files\"};\n * ChoiceFormat fileform = new ChoiceFormat(filelimits, filepart);\n * Format[] testFormats = {fileform, null, NumberFormat.getInstance()};\n * MessageFormat pattform = new MessageFormat(\"There {0} on {1}\");\n * pattform.setFormats(testFormats);\n * Object[] testArgs = {null, \"ADisk\", null};\n * for (int i = 0; i < 4; ++i) {\n *     testArgs[0] = new Integer(i);\n *     testArgs[2] = testArgs[0];\n *     System.out.println(pattform.format(testArgs));\n * }\n * }</pre>\n * </blockquote>\n * <p>\n * Specifying a pattern for ChoiceFormat objects is fairly straightforward.\n * For example:\n * <blockquote>\n * <pre>{@code\n * ChoiceFormat fmt = new ChoiceFormat(\n *      \"-1#is negative| 0#is zero or fraction | 1#is one |1.0<is 1+ |2#is two |2<is more than 2.\");\n * System.out.println(\"Formatter Pattern : \" + fmt.toPattern());\n *\n * System.out.println(\"Format with -INF : \" + fmt.format(Double.NEGATIVE_INFINITY));\n * System.out.println(\"Format with -1.0 : \" + fmt.format(-1.0));\n * System.out.println(\"Format with 0 : \" + fmt.format(0));\n * System.out.println(\"Format with 0.9 : \" + fmt.format(0.9));\n * System.out.println(\"Format with 1.0 : \" + fmt.format(1));\n * System.out.println(\"Format with 1.5 : \" + fmt.format(1.5));\n * System.out.println(\"Format with 2 : \" + fmt.format(2));\n * System.out.println(\"Format with 2.1 : \" + fmt.format(2.1));\n * System.out.println(\"Format with NaN : \" + fmt.format(Double.NaN));\n * System.out.println(\"Format with +INF : \" + fmt.format(Double.POSITIVE_INFINITY));\n * }</pre>\n * </blockquote>\n * And the output result would be like the following:\n * <blockquote>\n * <pre>{@code\n * Format with -INF : is negative\n * Format with -1.0 : is negative\n * Format with 0 : is zero or fraction\n * Format with 0.9 : is zero or fraction\n * Format with 1.0 : is one\n * Format with 1.5 : is 1+\n * Format with 2 : is two\n * Format with 2.1 : is more than 2.\n * Format with NaN : is negative\n * Format with +INF : is more than 2.\n * }</pre>\n * </blockquote>\n *\n * <h2><a id=\"synchronization\">Synchronization</a></h2>\n *\n * <p>\n * Choice formats are not synchronized.\n * It is recommended to create separate format instances for each thread.\n * If multiple threads access a format concurrently, it must be synchronized\n * externally.\n *\n *\n * @see          DecimalFormat\n * @see          MessageFormat\n * @author       Mark Davis\n * @since 1.1\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : " Proclaim serial compatibility with 1.1 FCS",
    "links" : [ ]
  }, {
    "name" : "choiceLimits",
    "type" : "double[]",
    "comment" : "\n     * A list of lower bounds for the choices.  The formatter will return\n     * {@code choiceFormats[i]} if the number being formatted is greater than or equal to\n     * {@code choiceLimits[i]} and less than {@code choiceLimits[i+1]}.\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "choiceFormats",
    "type" : "String[]",
    "comment" : "\n     * A list of choice strings.  The formatter will return\n     * {@code choiceFormats[i]} if the number being formatted is greater than or equal to\n     * {@code choiceLimits[i]} and less than {@code choiceLimits[i+1]}.\n     * @serial\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void applyPattern(String newPattern)",
    "returnType" : "void",
    "comment" : "\n     * Sets the pattern.\n     * @param newPattern See the class description.\n     * @throws    NullPointerException if {@code newPattern}\n     *            is {@code null}\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toPattern()",
    "returnType" : "String",
    "comment" : "\n     * Gets the pattern.\n     *\n     * @return the pattern string\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setChoices(double[] limits, String[] formats)",
    "returnType" : "void",
    "comment" : "\n     * Set the choices to be used in formatting.\n     * @param limits contains the top value that you want\n     * parsed with that format, and should be in ascending sorted order. When\n     * formatting X, the choice will be the i, where\n     * limit[i] &le; X {@literal <} limit[i+1].\n     * If the limit array is not in ascending order, the results of formatting\n     * will be incorrect.\n     * @param formats are the formats you want to use for each limit.\n     * They can be either Format objects or Strings.\n     * When formatting with object Y,\n     * if the object is a NumberFormat, then ((NumberFormat) Y).format(X)\n     * is called. Otherwise Y.toString() is called.\n     * @throws    NullPointerException if {@code limits} or\n     *            {@code formats} is {@code null}\n     ",
    "links" : [ ]
  }, {
    "name" : "public double[] getLimits()",
    "returnType" : "double[]",
    "comment" : "\n     * @return a copy of the {@code double[]} array supplied to the constructor or the most recent\n     * call to {@link #setChoices(double[], String[])}.\n     ",
    "links" : [ "#setChoices(double" ]
  }, {
    "name" : "public Object[] getFormats()",
    "returnType" : "Object[]",
    "comment" : "\n     * @return a copy of the {@code String[]} array supplied to the constructor or the most recent\n     * call to {@link #setChoices(double[], String[])}.\n     ",
    "links" : [ "#setChoices(double" ]
  }, {
    "name" : "public StringBuffer format(long number, StringBuffer toAppendTo, FieldPosition status)",
    "returnType" : "StringBuffer",
    "comment" : "\n     * Specialization of format. This method really calls\n     * {@code format(double, StringBuffer, FieldPosition)}\n     * thus the range of longs that are supported is only equal to\n     * the range that can be stored by double. This will never be\n     * a practical limitation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public StringBuffer format(double number, StringBuffer toAppendTo, FieldPosition status)",
    "returnType" : "StringBuffer",
    "comment" : "\n     * Returns pattern with formatted double.\n     * @param number number to be formatted and substituted.\n     * @param toAppendTo where text is appended.\n     * @param status ignore no useful status is returned.\n     * @throws    NullPointerException if {@code toAppendTo}\n     *            is {@code null}\n     ",
    "links" : [ ]
  }, {
    "name" : "public Number parse(String text, ParsePosition status)",
    "returnType" : "Number",
    "comment" : "\n     * Parses a Number from the input text.\n     * @param text the source text.\n     * @param status an input-output parameter.  On input, the\n     * status.index field indicates the first character of the\n     * source text that should be parsed.  On exit, if no error\n     * occurred, status.index is set to the first unparsed character\n     * in the source text.  On exit, if an error did occur,\n     * status.index is unchanged and status.errorIndex is set to the\n     * first index of the character that caused the parse to fail.\n     * @return A Number representing the value of the number parsed.\n     * @throws    NullPointerException if {@code status} is {@code null}\n     *            or if {@code text} is {@code null} and the list of\n     *            choice strings is not empty.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final double nextDouble(double d)",
    "returnType" : "double",
    "comment" : "\n     * Finds the least double greater than {@code d}.\n     * If {@code NaN}, returns same value.\n     * <p>Used to make half-open intervals.\n     *\n     * @implNote This is equivalent to calling\n     * {@link Math#nextUp(double) Math.nextUp(d)}\n     *\n     * @param d the reference value\n     * @return the least double value greather than {@code d}\n     * @see #previousDouble\n     ",
    "links" : [ "#nextUp(double)" ]
  }, {
    "name" : "public static final double previousDouble(double d)",
    "returnType" : "double",
    "comment" : "\n     * Finds the greatest double less than {@code d}.\n     * If {@code NaN}, returns same value.\n     *\n     * @implNote This is equivalent to calling\n     * {@link Math#nextDown(double) Math.nextDown(d)}\n     *\n     * @param d the reference value\n     * @return the greatest double value less than {@code d}\n     * @see #nextDouble\n     ",
    "links" : [ "#nextDown(double)" ]
  }, {
    "name" : "public Object clone()",
    "returnType" : "Object",
    "comment" : "\n     * Overrides Cloneable\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Generates a hash code for the message format object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "\n     * Equality comparison between two\n     ",
    "links" : [ ]
  }, {
    "name" : "private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException",
    "returnType" : "void",
    "comment" : "\n     * After reading an object from the input stream, do a simple verification\n     * to maintain class invariants.\n     * @throws InvalidObjectException if the objects read from the stream is invalid.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static double nextDouble(double d, boolean positive)",
    "returnType" : "double",
    "comment" : "\n     * Finds the least double greater than {@code d} (if {@code positive} is\n     * {@code true}), or the greatest double less than {@code d} (if\n     * {@code positive} is {@code false}).\n     * If {@code NaN}, returns same value.\n     *\n     * @implNote This is equivalent to calling\n     * {@code positive ? Math.nextUp(d) : Math.nextDown(d)}\n     *\n     * @param d        the reference value\n     * @param positive {@code true} if the least double is desired;\n     *                 {@code false} otherwise\n     * @return the least or greater double value\n     ",
    "links" : [ ]
  }, {
    "name" : "private static double[] doubleArraySize(double[] array)",
    "returnType" : "double[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String[] doubleArraySize(String[] array)",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void applyPattern(String newPattern)", "public String toPattern()", "public void setChoices(double[] limits, String[] formats)", "public double[] getLimits()", "public Object[] getFormats()", "public StringBuffer format(long number, StringBuffer toAppendTo, FieldPosition status)", "public StringBuffer format(double number, StringBuffer toAppendTo, FieldPosition status)", "public Number parse(String text, ParsePosition status)", "public static final double nextDouble(double d)", "public static final double previousDouble(double d)", "public Object clone()", "public int hashCode()", "public boolean equals(Object obj)", "private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException", "public static double nextDouble(double d, boolean positive)", "private static double[] doubleArraySize(double[] array)", "private String[] doubleArraySize(String[] array)" ],
  "variableNames" : [ "serialVersionUID", "choiceLimits", "choiceFormats" ]
}