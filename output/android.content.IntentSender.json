{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/content/IntentSender.java",
  "packageName" : "android.content",
  "className" : "IntentSender",
  "comment" : "\n * A description of an Intent and target action to perform with it.\n * The returned object can be\n * handed to other applications so that they can perform the action you\n * described on your behalf at a later time.\n *\n * <p>By giving a IntentSender to another application,\n * you are granting it the right to perform the operation you have specified\n * as if the other application was yourself (with the same permissions and\n * identity).  As such, you should be careful about how you build the IntentSender:\n * often, for example, the base Intent you supply will have the component\n * name explicitly set to one of your own components, to ensure it is ultimately\n * sent there and nowhere else.\n *\n * <p>A IntentSender itself is simply a reference to a token maintained by\n * the system describing the original data used to retrieve it.  This means\n * that, even if its owning application's process is killed, the\n * IntentSender itself will remain usable from other processes that\n * have been given it.  If the creating application later re-retrieves the\n * same kind of IntentSender (same operation, same Intent action, data,\n * categories, and components, and same flags), it will receive a IntentSender\n * representing the same token if that is still valid.\n *\n * <p>Instances of this class can not be made directly, but rather must be\n * created from an existing {@link android.app.PendingIntent} with\n * {@link android.app.PendingIntent#getIntentSender() PendingIntent.getIntentSender()}.\n ",
  "variables" : [ {
    "name" : "mTarget",
    "type" : "IIntentSender",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWhitelistToken",
    "type" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<IntentSender>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void sendIntent(Context context, int code, Intent intent, OnFinished onFinished, Handler handler) throws SendIntentException",
    "returnType" : "void",
    "comment" : "\n     * Perform the operation associated with this IntentSender, allowing the\n     * caller to specify information about the Intent to use and be notified\n     * when the send has completed.\n     *\n     * @param context The Context of the caller.  This may be null if\n     * <var>intent</var> is also null.\n     * @param code Result code to supply back to the IntentSender's target.\n     * @param intent Additional Intent data.  See {@link Intent#fillIn\n     * Intent.fillIn()} for information on how this is applied to the\n     * original Intent.  Use null to not modify the original Intent.\n     * @param onFinished The object to call back on when the send has\n     * completed, or null for no callback.\n     * @param handler Handler identifying the thread on which the callback\n     * should happen.  If null, the callback will happen from the thread\n     * pool of the process.\n     *\n     *\n     * @throws SendIntentException Throws CanceledIntentException if the IntentSender\n     * is no longer allowing more intents to be sent through it.\n     ",
    "links" : [ "android.content.Intent#fillInIntent.fillIn()" ]
  }, {
    "name" : "public void sendIntent(Context context, int code, Intent intent, OnFinished onFinished, Handler handler, String requiredPermission) throws SendIntentException",
    "returnType" : "void",
    "comment" : "\n     * Perform the operation associated with this IntentSender, allowing the\n     * caller to specify information about the Intent to use and be notified\n     * when the send has completed.\n     *\n     * @param context The Context of the caller.  This may be null if\n     * <var>intent</var> is also null.\n     * @param code Result code to supply back to the IntentSender's target.\n     * @param intent Additional Intent data.  See {@link Intent#fillIn\n     * Intent.fillIn()} for information on how this is applied to the\n     * original Intent.  Use null to not modify the original Intent.\n     * @param onFinished The object to call back on when the send has\n     * completed, or null for no callback.\n     * @param handler Handler identifying the thread on which the callback\n     * should happen.  If null, the callback will happen from the thread\n     * pool of the process.\n     * @param requiredPermission Name of permission that a recipient of the PendingIntent\n     * is required to hold.  This is only valid for broadcast intents, and\n     * corresponds to the permission argument in\n     * {@link Context#sendBroadcast(Intent, String) Context.sendOrderedBroadcast(Intent, String)}.\n     * If null, no permission is required.\n     *\n     *\n     * @throws SendIntentException Throws CanceledIntentException if the IntentSender\n     * is no longer allowing more intents to be sent through it.\n     ",
    "links" : [ "android.content.Intent#fillInIntent.fillIn()", "android.content.Context#sendBroadcast(Intent" ]
  }, {
    "name" : "public String getTargetPackage()",
    "returnType" : "String",
    "comment" : "\n     * @deprecated Renamed to {@link #getCreatorPackage()}.\n     ",
    "links" : [ "#getCreatorPackage()" ]
  }, {
    "name" : "public String getCreatorPackage()",
    "returnType" : "String",
    "comment" : "\n     * Return the package name of the application that created this\n     * IntentSender, that is the identity under which you will actually be\n     * sending the Intent.  The returned string is supplied by the system, so\n     * that an application can not spoof its package.\n     *\n     * @return The package name of the PendingIntent, or null if there is\n     * none associated with it.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getCreatorUid()",
    "returnType" : "int",
    "comment" : "\n     * Return the uid of the application that created this\n     * PendingIntent, that is the identity under which you will actually be\n     * sending the Intent.  The returned integer is supplied by the system, so\n     * that an application can not spoof its uid.\n     *\n     * @return The uid of the PendingIntent, or -1 if there is\n     * none associated with it.\n     ",
    "links" : [ ]
  }, {
    "name" : "public UserHandle getCreatorUserHandle()",
    "returnType" : "UserHandle",
    "comment" : "\n     * Return the user handle of the application that created this\n     * PendingIntent, that is the user under which you will actually be\n     * sending the Intent.  The returned UserHandle is supplied by the system, so\n     * that an application can not spoof its user.  See\n     * {@link android.os.Process#myUserHandle() Process.myUserHandle()} for\n     * more explanation of user handles.\n     *\n     * @return The user handle of the PendingIntent, or null if there is\n     * none associated with it.\n     ",
    "links" : [ "android.os.Process#myUserHandle()" ]
  }, {
    "name" : "public boolean equals(Object otherObj)",
    "returnType" : "boolean",
    "comment" : "\n     * Comparison operator on two IntentSender objects, such that true\n     * is returned then they both represent the same operation from the\n     * same package.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel out, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void writeIntentSenderOrNullToParcel(IntentSender sender, Parcel out)",
    "returnType" : "void",
    "comment" : "\n     * Convenience function for writing either a IntentSender or null pointer to\n     * a Parcel.  You must use this with {@link #readIntentSenderOrNullFromParcel}\n     * for later reading it.\n     *\n     * @param sender The IntentSender to write, or null.\n     * @param out Where to write the IntentSender.\n     ",
    "links" : [ "#readIntentSenderOrNullFromParcel" ]
  }, {
    "name" : "public static IntentSender readIntentSenderOrNullFromParcel(Parcel in)",
    "returnType" : "IntentSender",
    "comment" : "\n     * Convenience function for reading either a Messenger or null pointer from\n     * a Parcel.  You must have previously written the Messenger with\n     * {@link #writeIntentSenderOrNullToParcel}.\n     *\n     * @param in The Parcel containing the written Messenger.\n     *\n     * @return Returns the Messenger read from the Parcel, or null if null had\n     * been written.\n     ",
    "links" : [ "#writeIntentSenderOrNullToParcel" ]
  }, {
    "name" : "public IIntentSender getTarget()",
    "returnType" : "IIntentSender",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public IBinder getWhitelistToken()",
    "returnType" : "IBinder",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "variableNames" : [ "mTarget", "mWhitelistToken", "CREATOR" ],
  "methodNames" : [ "public void sendIntent(Context context, int code, Intent intent, OnFinished onFinished, Handler handler) throws SendIntentException", "public void sendIntent(Context context, int code, Intent intent, OnFinished onFinished, Handler handler, String requiredPermission) throws SendIntentException", "public String getTargetPackage()", "public String getCreatorPackage()", "public int getCreatorUid()", "public UserHandle getCreatorUserHandle()", "public boolean equals(Object otherObj)", "public int hashCode()", "public String toString()", "public int describeContents()", "public void writeToParcel(Parcel out, int flags)", "public static void writeIntentSenderOrNullToParcel(IntentSender sender, Parcel out)", "public static IntentSender readIntentSenderOrNullFromParcel(Parcel in)", "public IIntentSender getTarget()", "public IBinder getWhitelistToken()" ]
}