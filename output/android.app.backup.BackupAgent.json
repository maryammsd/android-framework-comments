{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/backup/BackupAgent.java",
  "packageName" : "android.app.backup",
  "className" : "BackupAgent",
  "comment" : "\n * Provides the central interface between an\n * application and Android's data backup infrastructure.  An application that wishes\n * to participate in the backup and restore mechanism will declare a subclass of\n * {@link android.app.backup.BackupAgent}, implement the\n * {@link #onBackup(ParcelFileDescriptor, BackupDataOutput, ParcelFileDescriptor) onBackup()}\n * and {@link #onRestore(BackupDataInput, int, ParcelFileDescriptor) onRestore()} methods,\n * and provide the name of its backup agent class in its {@code AndroidManifest.xml} file via\n * the <code>\n * <a href=\"{@docRoot}guide/topics/manifest/application-element.html\">&lt;application&gt;</a></code>\n * tag's {@code android:backupAgent} attribute.\n *\n * <div class=\"special reference\">\n * <h3>Developer Guides</h3>\n * <p>For more information about using BackupAgent, read the\n * <a href=\"{@docRoot}guide/topics/data/backup.html\">Data Backup</a> developer guide.</p></div>\n *\n * <h3>Basic Operation</h3>\n * <p>\n * When the application makes changes to data that it wishes to keep backed up,\n * it should call the\n * {@link android.app.backup.BackupManager#dataChanged() BackupManager.dataChanged()} method.\n * This notifies the Android Backup Manager that the application needs an opportunity\n * to update its backup image.  The Backup Manager, in turn, schedules a\n * backup pass to be performed at an opportune time.\n * <p>\n * Restore operations are typically performed only when applications are first\n * installed on a device.  At that time, the operating system checks to see whether\n * there is a previously-saved data set available for the application being installed, and if so,\n * begins an immediate restore pass to deliver the backup data as part of the installation\n * process.\n * <p>\n * When a backup or restore pass is run, the application's process is launched\n * (if not already running), the manifest-declared backup agent class (in the {@code\n * android:backupAgent} attribute) is instantiated within\n * that process, and the agent's {@link #onCreate()} method is invoked.  This prepares the\n * agent instance to run the actual backup or restore logic.  At this point the\n * agent's\n * {@link #onBackup(ParcelFileDescriptor, BackupDataOutput, ParcelFileDescriptor) onBackup()} or\n * {@link #onRestore(BackupDataInput, int, ParcelFileDescriptor) onRestore()} method will be\n * invoked as appropriate for the operation being performed.\n * <p>\n * A backup data set consists of one or more \"entities,\" flattened binary data\n * records that are each identified with a key string unique within the data set.  Adding a\n * record to the active data set or updating an existing record is done by simply\n * writing new entity data under the desired key.  Deleting an entity from the data set\n * is done by writing an entity under that key with header specifying a negative data\n * size, and no actual entity data.\n * <p>\n * <b>Helper Classes</b>\n * <p>\n * An extensible agent based on convenient helper classes is available in\n * {@link android.app.backup.BackupAgentHelper}.  That class is particularly\n * suited to handling of simple file or {@link android.content.SharedPreferences}\n * backup and restore.\n * <p>\n * <b>Threading</b>\n * <p>\n * The constructor, as well as {@link #onCreate()} and {@link #onDestroy()} lifecycle callbacks run\n * on the main thread (UI thread) of the application that implements the BackupAgent.\n * The data-handling callbacks:\n * {@link #onBackup(ParcelFileDescriptor, BackupDataOutput, ParcelFileDescriptor) onBackup()},\n * {@link #onFullBackup(FullBackupDataOutput)},\n * {@link #onRestore(BackupDataInput, int, ParcelFileDescriptor) onRestore()},\n * {@link #onRestoreFile(ParcelFileDescriptor, long, File, int, long, long) onRestoreFile()},\n * {@link #onRestoreFinished()}, and {@link #onQuotaExceeded(long, long) onQuotaExceeded()}\n * run on binder pool threads.\n *\n * @see android.app.backup.BackupManager\n * @see android.app.backup.BackupAgentHelper\n * @see android.app.backup.BackupDataInput\n * @see android.app.backup.BackupDataOutput\n ",
  "links" : [ "#onCreate()", "android.content.SharedPreferences", "#onDestroy()", "#onRestoreFinished()", "#onQuotaExceeded(long", "#onFullBackup(FullBackupDataOutput)", "#onBackup(ParcelFileDescriptor", "#onRestore(BackupDataInput", "#onRestoreFile(ParcelFileDescriptor", "android.app.backup.BackupAgentHelper", "android.app.backup.BackupAgent", "android.app.backup.BackupManager#dataChanged()" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_BACKUP_DESTINATION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RESULT_SUCCESS",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "RESULT_ERROR",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TYPE_EOF",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TYPE_FILE",
    "type" : "int",
    "comment" : "\n     * During a full restore, indicates that the file system object being restored\n     * is an ordinary file.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_DIRECTORY",
    "type" : "int",
    "comment" : "\n     * During a full restore, indicates that the file system object being restored\n     * is a directory.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_SYMLINK",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "FLAG_CLIENT_SIDE_ENCRYPTION_ENABLED",
    "type" : "int",
    "comment" : "\n     * Flag for {@link BackupDataOutput#getTransportFlags()} and\n     * {@link FullBackupDataOutput#getTransportFlags()} only.\n     *\n     * <p>The transport has client-side encryption enabled. i.e., the user's backup has been\n     * encrypted with a key known only to the device, and not to the remote storage solution. Even\n     * if an attacker had root access to the remote storage provider they should not be able to\n     * decrypt the user's backup data.\n     ",
    "links" : [ "android.app.backup.BackupDataOutput#getTransportFlags()", "android.app.backup.FullBackupDataOutput#getTransportFlags()" ]
  }, {
    "name" : "FLAG_DEVICE_TO_DEVICE_TRANSFER",
    "type" : "int",
    "comment" : "\n     * Flag for {@link BackupDataOutput#getTransportFlags()} and\n     * {@link FullBackupDataOutput#getTransportFlags()} only.\n     *\n     * <p>The transport is for a device-to-device transfer. There is no third party or intermediate\n     * storage. The user's backup data is sent directly to another device over e.g., USB or WiFi.\n     ",
    "links" : [ "android.app.backup.BackupDataOutput#getTransportFlags()", "android.app.backup.FullBackupDataOutput#getTransportFlags()" ]
  }, {
    "name" : "FLAG_SKIP_RESTORE_FOR_LAUNCHED_APPS",
    "type" : "int",
    "comment" : "\n     * Flag for {@link RestoreSet#backupTransportFlags} to indicate if restore should be skipped\n     * for apps that have already been launched.\n     *\n     * @hide\n     ",
    "links" : [ "android.app.backup.RestoreSet#backupTransportFlags" ]
  }, {
    "name" : "FLAG_FAKE_CLIENT_SIDE_ENCRYPTION_ENABLED",
    "type" : "int",
    "comment" : "\n     * Flag for {@link BackupDataOutput#getTransportFlags()} and\n     * {@link FullBackupDataOutput#getTransportFlags()} only.\n     *\n     * <p>Used for internal testing only. Do not check this flag in production code.\n     *\n     * @hide\n     ",
    "links" : [ "android.app.backup.BackupDataOutput#getTransportFlags()", "android.app.backup.FullBackupDataOutput#getTransportFlags()" ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLogger",
    "type" : "BackupRestoreEventLogger",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUser",
    "type" : "UserHandle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBackupDestination",
    "type" : "int",
    "comment" : " onFullBackup that is called from system_server via Binder).",
    "links" : [ ]
  }, {
    "name" : "mBinder",
    "type" : "IBinder",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " Handler getHandler()",
    "returnType" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void waitForSharedPrefs()",
    "returnType" : "void",
    "comment" : " Syncing shared preferences deferred writes needs to happen on the main looper thread",
    "links" : [ ]
  }, {
    "name" : "public BackupRestoreEventLogger getBackupRestoreEventLogger()",
    "returnType" : "BackupRestoreEventLogger",
    "comment" : "\n     * Get a logger to record app-specific backup and restore events that are happening during a\n     * backup or restore operation.\n     *\n     * <p>The logger instance had been created by the system with the correct {@link\n     * BackupRestoreEventLogger.OperationType} that corresponds to the operation the {@code\n     * BackupAgent} is currently handling.\n     *\n     * @hide\n     ",
    "links" : [ "BackupRestoreEventLogger.OperationType" ]
  }, {
    "name" : "public void onCreate()",
    "returnType" : "void",
    "comment" : "\n     * Provided as a convenience for agent implementations that need an opportunity\n     * to do one-time initialization before the actual backup or restore operation\n     * is begun.\n     * <p>\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onCreate(UserHandle user)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void onCreate(UserHandle user, @BackupDestination int backupDestination)",
    "returnType" : "void",
    "comment" : "\n     * @deprecated Use {@link BackupAgent#onCreate(UserHandle, int, int)} instead.\n     *\n     * @hide\n     ",
    "links" : [ "android.app.IBackupAgent#onCreate(UserHandle" ]
  }, {
    "name" : "public void onCreate(UserHandle user, @BackupDestination int backupDestination, @OperationType int operationType)",
    "returnType" : "void",
    "comment" : "\n    * @hide\n    ",
    "links" : [ ]
  }, {
    "name" : "public void onDestroy()",
    "returnType" : "void",
    "comment" : "\n     * Provided as a convenience for agent implementations that need to do some\n     * sort of shutdown process after backup or restore is completed.\n     * <p>\n     * Agents do not need to override this method.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void onBackup(ParcelFileDescriptor oldState, BackupDataOutput data, ParcelFileDescriptor newState) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * The application is being asked to write any data changed since the last\n     * time it performed a backup operation. The state data recorded during the\n     * last backup pass is provided in the <code>oldState</code> file\n     * descriptor. If <code>oldState</code> is <code>null</code>, no old state\n     * is available and the application should perform a full backup. In both\n     * cases, a representation of the final backup state after this pass should\n     * be written to the file pointed to by the file descriptor wrapped in\n     * <code>newState</code>.\n     * <p>\n     * Each entity written to the {@link android.app.backup.BackupDataOutput}\n     * <code>data</code> stream will be transmitted\n     * over the current backup transport and stored in the remote data set under\n     * the key supplied as part of the entity.  Writing an entity with a negative\n     * data size instructs the transport to delete whatever entity currently exists\n     * under that key from the remote data set.\n     *\n     * @param oldState An open, read-only ParcelFileDescriptor pointing to the\n     *            last backup state provided by the application. May be\n     *            <code>null</code>, in which case no prior state is being\n     *            provided and the application should perform a full backup.\n     * @param data A structured wrapper around an open, read/write\n     *            file descriptor pointing to the backup data destination.\n     *            Typically the application will use backup helper classes to\n     *            write to this file.\n     * @param newState An open, read/write ParcelFileDescriptor pointing to an\n     *            empty file. The application should record the final backup\n     *            state here after writing the requested data to the <code>data</code>\n     *            output stream.\n     ",
    "links" : [ "android.app.backup.BackupDataOutput" ]
  }, {
    "name" : "public abstract void onRestore(BackupDataInput data, int appVersionCode, ParcelFileDescriptor newState) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * The application is being restored from backup and should replace any\n     * existing data with the contents of the backup. The backup data is\n     * provided through the <code>data</code> parameter. Once\n     * the restore is finished, the application should write a representation of\n     * the final state to the <code>newState</code> file descriptor.\n     * <p>\n     * The application is responsible for properly erasing its old data and\n     * replacing it with the data supplied to this method. No \"clear user data\"\n     * operation will be performed automatically by the operating system. The\n     * exception to this is in the case of a failed restore attempt: if\n     * onRestore() throws an exception, the OS will assume that the\n     * application's data may now be in an incoherent state, and will clear it\n     * before proceeding.\n     *\n     * @param data A structured wrapper around an open, read-only\n     *            file descriptor pointing to a full snapshot of the\n     *            application's data.  The application should consume every\n     *            entity represented in this data stream.\n     * @param appVersionCode The value of the <a\n     * href=\"{@docRoot}guide/topics/manifest/manifest-element.html#vcode\">{@code\n     *            android:versionCode}</a> manifest attribute,\n     *            from the application that backed up this particular data set. This\n     *            makes it possible for an application's agent to distinguish among any\n     *            possible older data versions when asked to perform the restore\n     *            operation.\n     * @param newState An open, read/write ParcelFileDescriptor pointing to an\n     *            empty file. The application should record the final backup\n     *            state here after restoring its data from the <code>data</code> stream.\n     *            When a full-backup dataset is being restored, this will be <code>null</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onRestore(BackupDataInput data, long appVersionCode, ParcelFileDescriptor newState) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * New version of {@link #onRestore(BackupDataInput, int, android.os.ParcelFileDescriptor)}\n     * that handles a long app version code.  Default implementation casts the version code to\n     * an int and calls {@link #onRestore(BackupDataInput, int, android.os.ParcelFileDescriptor)}.\n     ",
    "links" : [ "#onRestore(BackupDataInput" ]
  }, {
    "name" : "public void onRestore(BackupDataInput data, long appVersionCode, ParcelFileDescriptor newState, Set<String> excludedKeys) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * New version of {@link #onRestore(BackupDataInput, long, android.os.ParcelFileDescriptor)}\n     * that has a list of keys to be excluded from the restore. Key/value pairs for which the key\n     * is present in {@code excludedKeys} have already been excluded from the restore data by the\n     * system. The list is passed to the agent to make it aware of what data has been removed (in\n     * case it has any application-level consequences) as well as the data that should be removed\n     * by the agent itself.\n     *\n     * The default implementation calls {@link #onRestore(BackupDataInput, long,\n     * android.os.ParcelFileDescriptor)}.\n     *\n     * @param excludedKeys A list of keys to be excluded from restore.\n     *\n     * @hide\n     ",
    "links" : [ "#onRestore(BackupDataInput" ]
  }, {
    "name" : "public void onFullBackup(FullBackupDataOutput data) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * The application is having its entire file system contents backed up.  {@code data}\n     * points to the backup destination, and the app has the opportunity to choose which\n     * files are to be stored.  To commit a file as part of the backup, call the\n     * {@link #fullBackupFile(File, FullBackupDataOutput)} helper method.  After all file\n     * data is written to the output, the agent returns from this method and the backup\n     * operation concludes.\n     *\n     * <p>Certain parts of the app's data are never backed up even if the app explicitly\n     * sends them to the output:\n     *\n     * <ul>\n     * <li>The contents of the {@link #getCacheDir()} directory</li>\n     * <li>The contents of the {@link #getCodeCacheDir()} directory</li>\n     * <li>The contents of the {@link #getNoBackupFilesDir()} directory</li>\n     * <li>The contents of the app's shared library directory</li>\n     * </ul>\n     *\n     * <p>The default implementation of this method backs up the entirety of the\n     * application's \"owned\" file system trees to the output other than the few exceptions\n     * listed above.  Apps only need to override this method if they need to impose special\n     * limitations on which files are being stored beyond the control that\n     * {@link #getNoBackupFilesDir()} offers.\n     * Alternatively they can provide an xml resource to specify what data to include or exclude.\n     *\n     *\n     * @param data A structured wrapper pointing to the backup destination.\n     * @throws IOException\n     *\n     * @see Context#getNoBackupFilesDir()\n     * @see #fullBackupFile(File, FullBackupDataOutput)\n     * @see #onRestoreFile(ParcelFileDescriptor, long, File, int, long, long)\n     ",
    "links" : [ "#getCacheDir()", "#fullBackupFile(File", "#getCodeCacheDir()", "#getNoBackupFilesDir()" ]
  }, {
    "name" : "private Set<String> getExtraExcludeDirsIfAny(Context context) throws IOException",
    "returnType" : "Set<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public IncludeExcludeRules getIncludeExcludeRules(FullBackup.BackupScheme backupScheme) throws IOException, XmlPullParserException",
    "returnType" : "IncludeExcludeRules",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void onQuotaExceeded(long backupDataBytes, long quotaBytes)",
    "returnType" : "void",
    "comment" : "\n     * Notification that the application's current backup operation causes it to exceed\n     * the maximum size permitted by the transport.  The ongoing backup operation is\n     * halted and rolled back: any data that had been stored by a previous backup operation\n     * is still intact.  Typically the quota-exceeded state will be detected before any data\n     * is actually transmitted over the network.\n     *\n     * <p>The {@code quotaBytes} value is the total data size currently permitted for this\n     * application.  If desired, the application can use this as a hint for determining\n     * how much data to store.  For example, a messaging application might choose to\n     * store only the newest messages, dropping enough older content to stay under\n     * the quota.\n     *\n     * <p class=\"note\">Note that the maximum quota for the application can change over\n     * time.  In particular, in the future the quota may grow.  Applications that adapt\n     * to the quota when deciding what data to store should be aware of this and implement\n     * their data storage mechanisms in a way that can take advantage of additional\n     * quota.\n     *\n     * @param backupDataBytes The amount of data measured while initializing the backup\n     *    operation, if the total exceeds the app's alloted quota.  If initial measurement\n     *    suggested that the data would fit but then too much data was actually submitted\n     *    as part of the operation, then this value is the amount of data that had been\n     *    streamed into the transport at the time the quota was reached.\n     * @param quotaBytes The maximum data size that the transport currently permits\n     *    this application to store as a backup.\n     ",
    "links" : [ ]
  }, {
    "name" : "private int getBackupUserId()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void applyXmlFiltersAndDoFullBackupForDomain(String packageName, String domainToken, Map<String, Set<PathWithRequiredFlags>> includeMap, Set<PathWithRequiredFlags> filterSet, ArraySet<String> traversalExcludeSet, FullBackupDataOutput data) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Check whether the xml yielded any <include/> tag for the provided <code>domainToken</code>.\n     * If so, perform a {@link #fullBackupFileTree} which backs up the file or recurses if the path\n     * is a directory, but only if all the required flags of the include rule are satisfied by\n     * the transport.\n     ",
    "links" : [ "#fullBackupFileTree" ]
  }, {
    "name" : "private boolean areIncludeRequiredTransportFlagsSatisfied(int includeFlags, int transportFlags)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final void fullBackupFile(File file, FullBackupDataOutput output)",
    "returnType" : "void",
    "comment" : "\n     * Write an entire file as part of a full-backup operation.  The file's contents\n     * will be delivered to the backup destination along with the metadata necessary\n     * to place it with the proper location and permissions on the device where the\n     * data is restored.\n     *\n     * <p class=\"note\">Attempting to back up files in directories that are ignored by\n     * the backup system will have no effect.  For example, if the app calls this method\n     * with a file inside the {@link #getNoBackupFilesDir()} directory, it will be ignored.\n     * See {@link #onFullBackup(FullBackupDataOutput)} for details on what directories\n     * are excluded from backups.\n     *\n     * @param file The file to be backed up.  The file must exist and be readable by\n     *     the caller.\n     * @param output The destination to which the backed-up file data will be sent.\n     ",
    "links" : [ "#getNoBackupFilesDir()", "#onFullBackup(FullBackupDataOutput)" ]
  }, {
    "name" : "protected final void fullBackupFileTree(String packageName, String domain, String startingPath, Set<PathWithRequiredFlags> manifestExcludes, ArraySet<String> systemExcludes, FullBackupDataOutput output)",
    "returnType" : "void",
    "comment" : "\n     * Scan the dir tree (if it actually exists) and process each entry we find.  If the\n     * 'excludes' parameters are non-null, they are consulted each time a new file system entity\n     * is visited to see whether that entity (and its subtree, if appropriate) should be\n     * omitted from the backup process.\n     *\n     * @param systemExcludes An optional list of excludes.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean manifestExcludesContainFilePath(Set<PathWithRequiredFlags> manifestExcludes, String filePath)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onRestoreFile(ParcelFileDescriptor data, long size, File destination, int type, long mode, long mtime) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Handle the data delivered via the given file descriptor during a full restore\n     * operation.  The agent is given the path to the file's original location as well\n     * as its size and metadata.\n     * <p>\n     * The file descriptor can only be read for {@code size} bytes; attempting to read\n     * more data has undefined behavior.\n     * <p>\n     * The default implementation creates the destination file/directory and populates it\n     * with the data from the file descriptor, then sets the file's access mode and\n     * modification time to match the restore arguments.\n     *\n     * @param data A read-only file descriptor from which the agent can read {@code size}\n     *     bytes of file data.\n     * @param size The number of bytes of file content to be restored to the given\n     *     destination.  If the file system object being restored is a directory, {@code size}\n     *     will be zero.\n     * @param destination The File on disk to be restored with the given data.\n     * @param type The kind of file system object being restored.  This will be either\n     *     {@link BackupAgent#TYPE_FILE} or {@link BackupAgent#TYPE_DIRECTORY}.\n     * @param mode The access mode to be assigned to the destination after its data is\n     *     written.  This is in the standard format used by {@code chmod()}.\n     * @param mtime The modification time of the file when it was backed up, suitable to\n     *     be assigned to the file after its data is written.\n     * @throws IOException\n     ",
    "links" : [ "android.app.IBackupAgent#TYPE_DIRECTORY", "android.app.IBackupAgent#TYPE_FILE" ]
  }, {
    "name" : "private boolean isFileEligibleForRestore(File destination) throws IOException",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onRestoreFile(ParcelFileDescriptor data, long size, int type, String domain, String path, long mode, long mtime) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Only specialized platform agents should overload this entry point to support\n     * restores to non-app locations.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onRestoreFinished()",
    "returnType" : "void",
    "comment" : "\n     * The application's restore operation has completed.  This method is called after\n     * all available data has been delivered to the application for restore (via either\n     * the {@link #onRestore(BackupDataInput, int, ParcelFileDescriptor) onRestore()} or\n     * {@link #onRestoreFile(ParcelFileDescriptor, long, File, int, long, long) onRestoreFile()}\n     * callbacks).  This provides the app with a stable end-of-restore opportunity to\n     * perform any appropriate post-processing on the data that was just delivered.\n     *\n     * @see #onRestore(BackupDataInput, int, ParcelFileDescriptor)\n     * @see #onRestoreFile(ParcelFileDescriptor, long, File, int, long, long)\n     ",
    "links" : [ "#onRestore(BackupDataInput", "#onRestoreFile(ParcelFileDescriptor" ]
  }, {
    "name" : "public final void clearBackupRestoreEventLogger()",
    "returnType" : "void",
    "comment" : "\n     * Clears all pending logs currently stored in the agent's event logger.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public final IBinder onBind()",
    "returnType" : "IBinder",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void attach(Context context)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "methodNames" : [ " Handler getHandler()", "private void waitForSharedPrefs()", "public BackupRestoreEventLogger getBackupRestoreEventLogger()", "public void onCreate()", "public void onCreate(UserHandle user)", "public void onCreate(UserHandle user, @BackupDestination int backupDestination)", "public void onCreate(UserHandle user, @BackupDestination int backupDestination, @OperationType int operationType)", "public void onDestroy()", "public abstract void onBackup(ParcelFileDescriptor oldState, BackupDataOutput data, ParcelFileDescriptor newState) throws IOException", "public abstract void onRestore(BackupDataInput data, int appVersionCode, ParcelFileDescriptor newState) throws IOException", "public void onRestore(BackupDataInput data, long appVersionCode, ParcelFileDescriptor newState) throws IOException", "public void onRestore(BackupDataInput data, long appVersionCode, ParcelFileDescriptor newState, Set<String> excludedKeys) throws IOException", "public void onFullBackup(FullBackupDataOutput data) throws IOException", "private Set<String> getExtraExcludeDirsIfAny(Context context) throws IOException", "public IncludeExcludeRules getIncludeExcludeRules(FullBackup.BackupScheme backupScheme) throws IOException, XmlPullParserException", "public void onQuotaExceeded(long backupDataBytes, long quotaBytes)", "private int getBackupUserId()", "private void applyXmlFiltersAndDoFullBackupForDomain(String packageName, String domainToken, Map<String, Set<PathWithRequiredFlags>> includeMap, Set<PathWithRequiredFlags> filterSet, ArraySet<String> traversalExcludeSet, FullBackupDataOutput data) throws IOException", "private boolean areIncludeRequiredTransportFlagsSatisfied(int includeFlags, int transportFlags)", "public final void fullBackupFile(File file, FullBackupDataOutput output)", "protected final void fullBackupFileTree(String packageName, String domain, String startingPath, Set<PathWithRequiredFlags> manifestExcludes, ArraySet<String> systemExcludes, FullBackupDataOutput output)", "private boolean manifestExcludesContainFilePath(Set<PathWithRequiredFlags> manifestExcludes, String filePath)", "public void onRestoreFile(ParcelFileDescriptor data, long size, File destination, int type, long mode, long mtime) throws IOException", "private boolean isFileEligibleForRestore(File destination) throws IOException", "protected void onRestoreFile(ParcelFileDescriptor data, long size, int type, String domain, String path, long mode, long mtime) throws IOException", "public void onRestoreFinished()", "public final void clearBackupRestoreEventLogger()", "public final IBinder onBind()", "public void attach(Context context)" ],
  "variableNames" : [ "TAG", "DEBUG", "DEFAULT_BACKUP_DESTINATION", "RESULT_SUCCESS", "RESULT_ERROR", "TYPE_EOF", "TYPE_FILE", "TYPE_DIRECTORY", "TYPE_SYMLINK", "FLAG_CLIENT_SIDE_ENCRYPTION_ENABLED", "FLAG_DEVICE_TO_DEVICE_TRANSFER", "FLAG_SKIP_RESTORE_FOR_LAUNCHED_APPS", "FLAG_FAKE_CLIENT_SIDE_ENCRYPTION_ENABLED", "mHandler", "mLogger", "mUser", "mBackupDestination", "mBinder" ]
}