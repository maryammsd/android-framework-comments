{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/database/AbstractCursor.java",
  "packageName" : "android.database",
  "className" : "AbstractCursor",
  "comment" : "\n * This is an abstract cursor class that handles a lot of the common code\n * that all cursors need to deal with and is provided for convenience reasons.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUpdatedRows",
    "type" : "HashMap<Long, Map<String, Object>>",
    "comment" : "\n     * @removed This field should not be used.\n     ",
    "links" : [ ]
  }, {
    "name" : "mRowIdColumnIndex",
    "type" : "int",
    "comment" : "\n     * @removed This field should not be used.\n     ",
    "links" : [ ]
  }, {
    "name" : "mCurrentRowID",
    "type" : "Long",
    "comment" : "\n     * @removed This field should not be used.\n     ",
    "links" : [ ]
  }, {
    "name" : "mPos",
    "type" : "int",
    "comment" : "\n     * @deprecated Use {@link #getPosition()} instead.\n     ",
    "links" : [ "#getPosition()" ]
  }, {
    "name" : "mClosed",
    "type" : "boolean",
    "comment" : "\n     * @deprecated Use {@link #isClosed()} instead.\n     ",
    "links" : [ "#isClosed()" ]
  }, {
    "name" : "mContentResolver",
    "type" : "ContentResolver",
    "comment" : "\n     * @deprecated Do not use.\n     ",
    "links" : [ ]
  }, {
    "name" : "mNotifyUri",
    "type" : "Uri",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNotifyUris",
    "type" : "List<Uri>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSelfObserverLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSelfObserver",
    "type" : "ContentObserver",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSelfObserverRegistered",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDataSetObservable",
    "type" : "DataSetObservable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContentObservable",
    "type" : "ContentObservable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExtras",
    "type" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCloseGuard",
    "type" : "CloseGuard",
    "comment" : " CloseGuard to detect leaked cursor *",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public abstract int getCount()",
    "returnType" : "int",
    "comment" : " These need to be implemented by subclasses ",
    "links" : [ ]
  }, {
    "name" : "public abstract String[] getColumnNames()",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract String getString(int column)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract short getShort(int column)",
    "returnType" : "short",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract int getInt(int column)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract long getLong(int column)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract float getFloat(int column)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract double getDouble(int column)",
    "returnType" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean isNull(int column)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getType(int column)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public byte[] getBlob(int column)",
    "returnType" : "byte[]",
    "comment" : " TODO implement getBlob in all cursor types",
    "links" : [ ]
  }, {
    "name" : "public CursorWindow getWindow()",
    "returnType" : "CursorWindow",
    "comment" : "\n     * If the cursor is backed by a {@link CursorWindow}, returns a pre-filled\n     * window with the contents of the cursor, otherwise null.\n     *\n     * @return The pre-filled window that backs this cursor, or null if none.\n     ",
    "links" : [ "android.database.CursorWindow" ]
  }, {
    "name" : "public int getColumnCount()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void deactivate()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onDeactivateOrClose()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean requery()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isClosed()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean onMove(int oldPosition, int newPosition)",
    "returnType" : "boolean",
    "comment" : "\n     * This function is called every time the cursor is successfully scrolled\n     * to a new position, giving the subclass a chance to update any state it\n     * may have. If it returns false the move function will also do so and the\n     * cursor will scroll to the beforeFirst position.\n     *\n     * @param oldPosition the position that we're moving from\n     * @param newPosition the position that we're moving to\n     * @return true if the move is successful, false otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public void copyStringToBuffer(int columnIndex, CharArrayBuffer buffer)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private CloseGuard initCloseGuard()",
    "returnType" : "CloseGuard",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private CloseGuard initCloseGuard$ravenwood()",
    "returnType" : "CloseGuard",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final int getPosition()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final boolean moveToPosition(int position)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void fillWindow(int position, CursorWindow window)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final boolean move(int offset)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final boolean moveToFirst()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final boolean moveToLast()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final boolean moveToNext()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final boolean moveToPrevious()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final boolean isFirst()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final boolean isLast()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final boolean isBeforeFirst()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final boolean isAfterLast()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getColumnIndex(String columnName)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getColumnIndexOrThrow(String columnName)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getColumnName(int columnIndex)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void registerContentObserver(ContentObserver observer)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void unregisterContentObserver(ContentObserver observer)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void registerDataSetObserver(DataSetObserver observer)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void unregisterDataSetObserver(DataSetObserver observer)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onChange(boolean selfChange)",
    "returnType" : "void",
    "comment" : "\n     * Subclasses must call this method when they finish committing updates to notify all\n     * observers.\n     *\n     * @param selfChange\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setNotificationUri(ContentResolver cr, Uri notifyUri)",
    "returnType" : "void",
    "comment" : "\n     * Specifies a content URI to watch for changes.\n     *\n     * @param cr The content resolver from the caller's context.\n     * @param notifyUri The URI to watch for changes. This can be a\n     * specific row URI, or a base URI for a whole class of content.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setNotificationUris(@NonNull ContentResolver cr, @NonNull List<Uri> notifyUris)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setNotificationUris(ContentResolver cr, List<Uri> notifyUris, int userHandle, boolean registerSelfObserver)",
    "returnType" : "void",
    "comment" : "\n     * Set the notification uri but with an observer for a particular user's view. Also allows\n     * disabling the use of a self observer, which is sensible if either\n     * a) the cursor's owner calls {@link #onChange(boolean)} whenever the content changes, or\n     * b) the cursor is known not to have any content observers.\n     * @hide\n     ",
    "links" : [ "#onChange(boolean)" ]
  }, {
    "name" : "public Uri getNotificationUri()",
    "returnType" : "Uri",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<Uri> getNotificationUris()",
    "returnType" : "List<Uri>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean getWantsAllOnMoveCalls()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setExtras(Bundle extras)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Bundle getExtras()",
    "returnType" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Bundle respond(Bundle extras)",
    "returnType" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected boolean isFieldUpdated(int columnIndex)",
    "returnType" : "boolean",
    "comment" : "\n     * @deprecated Always returns false since Cursors do not support updating rows\n     ",
    "links" : [ ]
  }, {
    "name" : "protected Object getUpdatedField(int columnIndex)",
    "returnType" : "Object",
    "comment" : "\n     * @deprecated Always returns null since Cursors do not support updating rows\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void checkPosition()",
    "returnType" : "void",
    "comment" : "\n     * This function throws CursorIndexOutOfBoundsException if\n     * the cursor position is out of bounds. Subclass implementations of\n     * the get functions should call this before attempting\n     * to retrieve data.\n     *\n     * @throws CursorIndexOutOfBoundsException\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void finalize()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public abstract int getCount()", "public abstract String[] getColumnNames()", "public abstract String getString(int column)", "public abstract short getShort(int column)", "public abstract int getInt(int column)", "public abstract long getLong(int column)", "public abstract float getFloat(int column)", "public abstract double getDouble(int column)", "public abstract boolean isNull(int column)", "public int getType(int column)", "public byte[] getBlob(int column)", "public CursorWindow getWindow()", "public int getColumnCount()", "public void deactivate()", "protected void onDeactivateOrClose()", "public boolean requery()", "public boolean isClosed()", "public void close()", "public boolean onMove(int oldPosition, int newPosition)", "public void copyStringToBuffer(int columnIndex, CharArrayBuffer buffer)", "private CloseGuard initCloseGuard()", "private CloseGuard initCloseGuard$ravenwood()", "public final int getPosition()", "public final boolean moveToPosition(int position)", "public void fillWindow(int position, CursorWindow window)", "public final boolean move(int offset)", "public final boolean moveToFirst()", "public final boolean moveToLast()", "public final boolean moveToNext()", "public final boolean moveToPrevious()", "public final boolean isFirst()", "public final boolean isLast()", "public final boolean isBeforeFirst()", "public final boolean isAfterLast()", "public int getColumnIndex(String columnName)", "public int getColumnIndexOrThrow(String columnName)", "public String getColumnName(int columnIndex)", "public void registerContentObserver(ContentObserver observer)", "public void unregisterContentObserver(ContentObserver observer)", "public void registerDataSetObserver(DataSetObserver observer)", "public void unregisterDataSetObserver(DataSetObserver observer)", "protected void onChange(boolean selfChange)", "public void setNotificationUri(ContentResolver cr, Uri notifyUri)", "public void setNotificationUris(@NonNull ContentResolver cr, @NonNull List<Uri> notifyUris)", "public void setNotificationUris(ContentResolver cr, List<Uri> notifyUris, int userHandle, boolean registerSelfObserver)", "public Uri getNotificationUri()", "public List<Uri> getNotificationUris()", "public boolean getWantsAllOnMoveCalls()", "public void setExtras(Bundle extras)", "public Bundle getExtras()", "public Bundle respond(Bundle extras)", "protected boolean isFieldUpdated(int columnIndex)", "protected Object getUpdatedField(int columnIndex)", "protected void checkPosition()", "protected void finalize()" ],
  "variableNames" : [ "TAG", "mUpdatedRows", "mRowIdColumnIndex", "mCurrentRowID", "mPos", "mClosed", "mContentResolver", "mNotifyUri", "mNotifyUris", "mSelfObserverLock", "mSelfObserver", "mSelfObserverRegistered", "mDataSetObservable", "mContentObservable", "mExtras", "mCloseGuard" ]
}