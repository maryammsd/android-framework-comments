{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/servertransaction/ClientTransactionListenerController.java",
  "packageName" : "android.app.servertransaction",
  "className" : "ClientTransactionListenerController",
  "comment" : "\n * Singleton controller to manage listeners to individual {@link ClientTransaction}.\n *\n * @hide\n ",
  "links" : [ "android.app.servertransaction.ClientTransaction" ],
  "variables" : [ {
    "name" : "sController",
    "type" : "ClientTransactionListenerController",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDisplayManager",
    "type" : "DisplayManagerGlobal",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mActivityWindowInfoChangedListeners",
    "type" : "ArraySet<BiConsumer<IBinder, ActivityWindowInfo>>",
    "comment" : " Listeners registered via {@link #registerActivityWindowInfoChangedListener(BiConsumer)}. ",
    "links" : [ "#registerActivityWindowInfoChangedListener(BiConsumer)" ]
  }, {
    "name" : "mContextToPreChangedConfigMap",
    "type" : "ArrayMap<Context, Configuration>",
    "comment" : "\n     * Keeps track of the Context whose Configuration will get updated, mapping to the config before\n     * the change.\n     ",
    "links" : [ ]
  }, {
    "name" : "mIsClientTransactionExecuting",
    "type" : "boolean",
    "comment" : " Whether there is an {@link ClientTransaction} being executed. ",
    "links" : [ "android.app.servertransaction.ClientTransaction" ]
  } ],
  "methods" : [ {
    "name" : "public static ClientTransactionListenerController getInstance()",
    "returnType" : "ClientTransactionListenerController",
    "comment" : " Gets the singleton controller. ",
    "links" : [ ]
  }, {
    "name" : "public static ClientTransactionListenerController createInstanceForTesting(@NonNull DisplayManagerGlobal displayManager)",
    "returnType" : "ClientTransactionListenerController",
    "comment" : " Creates a new instance for test only. ",
    "links" : [ ]
  }, {
    "name" : "public void registerActivityWindowInfoChangedListener(@NonNull BiConsumer<IBinder, ActivityWindowInfo> listener)",
    "returnType" : "void",
    "comment" : "\n     * Registers to listen on activity {@link ActivityWindowInfo} change.\n     * The listener will be invoked with two parameters: {@link Activity#getActivityToken()} and\n     * {@link ActivityWindowInfo}.\n     ",
    "links" : [ "android.window.ActivityWindowInfo", "android.app.Activity#getActivityToken()" ]
  }, {
    "name" : "public void unregisterActivityWindowInfoChangedListener(@NonNull BiConsumer<IBinder, ActivityWindowInfo> listener)",
    "returnType" : "void",
    "comment" : "\n     * Unregisters the listener that was previously registered via\n     * {@link #registerActivityWindowInfoChangedListener(BiConsumer)}\n     ",
    "links" : [ "#registerActivityWindowInfoChangedListener(BiConsumer)" ]
  }, {
    "name" : "public void onActivityWindowInfoChanged(@NonNull IBinder activityToken, @NonNull ActivityWindowInfo activityWindowInfo)",
    "returnType" : "void",
    "comment" : "\n     * Called when receives a {@link ClientTransaction} that is updating an activity's\n     * {@link ActivityWindowInfo}.\n     ",
    "links" : [ "android.app.servertransaction.ClientTransaction", "android.window.ActivityWindowInfo" ]
  }, {
    "name" : "public void onClientTransactionStarted()",
    "returnType" : "void",
    "comment" : " Called when starts executing a remote {@link ClientTransaction}. ",
    "links" : [ "android.app.servertransaction.ClientTransaction" ]
  }, {
    "name" : "public void onClientTransactionFinished()",
    "returnType" : "void",
    "comment" : " Called when finishes executing a remote {@link ClientTransaction}. ",
    "links" : [ "android.app.servertransaction.ClientTransaction" ]
  }, {
    "name" : "public void onContextConfigurationPreChanged(@NonNull Context context)",
    "returnType" : "void",
    "comment" : " Called before updating the Configuration of the given {@code context}. ",
    "links" : [ ]
  }, {
    "name" : "public void onContextConfigurationPostChanged(@NonNull Context context)",
    "returnType" : "void",
    "comment" : " Called after updating the Configuration of the given {@code context}. ",
    "links" : [ ]
  }, {
    "name" : "private boolean shouldReportDisplayChange(@NonNull Context context, @NonNull Configuration preChangedConfig)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onDisplayChanged(int displayId)",
    "returnType" : "void",
    "comment" : "\n     * Called when receives a {@link Configuration} changed event that is updating display-related\n     * window configuration.\n     ",
    "links" : [ "android.content.res.Configuration" ]
  } ],
  "methodNames" : [ "public static ClientTransactionListenerController getInstance()", "public static ClientTransactionListenerController createInstanceForTesting(@NonNull DisplayManagerGlobal displayManager)", "public void registerActivityWindowInfoChangedListener(@NonNull BiConsumer<IBinder, ActivityWindowInfo> listener)", "public void unregisterActivityWindowInfoChangedListener(@NonNull BiConsumer<IBinder, ActivityWindowInfo> listener)", "public void onActivityWindowInfoChanged(@NonNull IBinder activityToken, @NonNull ActivityWindowInfo activityWindowInfo)", "public void onClientTransactionStarted()", "public void onClientTransactionFinished()", "public void onContextConfigurationPreChanged(@NonNull Context context)", "public void onContextConfigurationPostChanged(@NonNull Context context)", "private boolean shouldReportDisplayChange(@NonNull Context context, @NonNull Configuration preChangedConfig)", "public void onDisplayChanged(int displayId)" ],
  "variableNames" : [ "sController", "mLock", "mDisplayManager", "mActivityWindowInfoChangedListeners", "mContextToPreChangedConfigMap", "mIsClientTransactionExecuting" ]
}