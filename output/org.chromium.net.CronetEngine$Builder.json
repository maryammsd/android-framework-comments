{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/chromium/net/CronetEngine.java",
  "packageName" : "org.chromium.net",
  "className" : "Builder",
  "comment" : " added to this class and other API classes must have default implementation.",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBuilderDelegate",
    "type" : "ICronetEngineBuilder",
    "comment" : " Reference to the actual builder implementation. {@hide exclude from JavaDoc}. ",
    "links" : [ ]
  }, {
    "name" : "HTTP_CACHE_DISABLED",
    "type" : "int",
    "comment" : "\n         * Setting to disable HTTP cache. Some data may still be temporarily stored in memory.\n         * Passed to\n         * {@link #enableHttpCache}.\n         ",
    "links" : [ "#enableHttpCache" ]
  }, {
    "name" : "HTTP_CACHE_IN_MEMORY",
    "type" : "int",
    "comment" : "\n         * Setting to enable in-memory HTTP cache, including HTTP data. Passed to {@link\n         * #enableHttpCache}.\n         ",
    "links" : [ "#enableHttpCache" ]
  }, {
    "name" : "HTTP_CACHE_DISK_NO_HTTP",
    "type" : "int",
    "comment" : "\n         * Setting to enable on-disk cache, excluding HTTP data. {@link #setStoragePath} must be\n         * called prior to passing this constant to {@link #enableHttpCache}.\n         ",
    "links" : [ "#setStoragePath", "#enableHttpCache" ]
  }, {
    "name" : "HTTP_CACHE_DISK",
    "type" : "int",
    "comment" : "\n         * Setting to enable on-disk cache, including HTTP data. {@link #setStoragePath} must be\n         * called prior to passing this constant to {@link #enableHttpCache}.\n         ",
    "links" : [ "#setStoragePath", "#enableHttpCache" ]
  } ],
  "methods" : [ {
    "name" : "public String getDefaultUserAgent()",
    "returnType" : "String",
    "comment" : "\n         * Constructs a User-Agent string including application name and version, system build\n         * version, model and id, and Cronet version.\n         *\n         * @return User-Agent string.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setUserAgent(String userAgent)",
    "returnType" : "Builder",
    "comment" : "\n         * Overrides the User-Agent header for all requests. An explicitly set User-Agent header\n         * (set using {@link UrlRequest.Builder#addHeader}) will override a value set using this\n         * function.\n         *\n         * @param userAgent the User-Agent string to use for all requests.\n         * @return the builder to facilitate chaining.\n         ",
    "links" : [ "UrlRequest.Builder#addHeader" ]
  }, {
    "name" : "public Builder setStoragePath(String value)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets directory for HTTP Cache and Cookie Storage. The directory must exist.\n         *\n         * <p><b>NOTE:</b> Do not use the same storage directory with more than one {@code\n         * CronetEngine} at a time. Access to the storage directory does not support concurrent\n         * access by multiple {@code CronetEngine}s.\n         *\n         * @param value path to existing directory.\n         * @return the builder to facilitate chaining.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setLibraryLoader(LibraryLoader loader)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets a {@link LibraryLoader} to be used to load the native library. If not set, the\n         * library will be loaded using {@link System#loadLibrary}.\n         *\n         * @param loader {@code LibraryLoader} to be used to load the native library.\n         * @return the builder to facilitate chaining.\n         ",
    "links" : [ "#loadLibrary", "LibraryLoader" ]
  }, {
    "name" : "public Builder enableQuic(boolean value)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets whether <a href=\"https://www.chromium.org/quic\">QUIC</a> protocol is enabled.\n         * Defaults to enabled. If QUIC is enabled, then QUIC User Agent Id containing application\n         * name and Cronet version is sent to the server.\n         *\n         * @param value {@code true} to enable QUIC, {@code false} to disable.\n         * @return the builder to facilitate chaining.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder enableHttp2(boolean value)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets whether <a href=\"https://tools.ietf.org/html/rfc7540\">HTTP/2</a> protocol is\n         * enabled. Defaults to enabled.\n         *\n         * @param value {@code true} to enable HTTP/2, {@code false} to disable.\n         * @return the builder to facilitate chaining.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder enableSdch(boolean value)",
    "returnType" : "Builder",
    "comment" : "\n         * @deprecated SDCH is deprecated in Cronet M63. This method is a no-op. {@hide exclude from\n         * JavaDoc}.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder enableBrotli(boolean value)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets whether <a href=\"https://tools.ietf.org/html/rfc7932\">Brotli</a> compression is\n         * enabled. If enabled, Brotli will be advertised in Accept-Encoding request headers.\n         * Defaults to disabled.\n         *\n         * @param value {@code true} to enable Brotli, {@code false} to disable.\n         * @return the builder to facilitate chaining.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder enableHttpCache(int cacheMode, long maxSize)",
    "returnType" : "Builder",
    "comment" : "\n         * Enables or disables caching of HTTP data and other information like QUIC server\n         * information.\n         *\n         * @param cacheMode control location and type of cached data. Must be one of {@link\n         * #HTTP_CACHE_DISABLED HTTP_CACHE_*}.\n         * @param maxSize maximum size in bytes used to cache data (advisory and maybe exceeded at\n         * times).\n         * @return the builder to facilitate chaining.\n         ",
    "links" : [ "#HTTP_CACHE_DISABLED" ]
  }, {
    "name" : "public Builder addQuicHint(String host, int port, int alternatePort)",
    "returnType" : "Builder",
    "comment" : "\n         * Adds hint that {@code host} supports QUIC. Note that {@link #enableHttpCache\n         * enableHttpCache}\n         * ({@link #HTTP_CACHE_DISK}) is needed to take advantage of 0-RTT connection establishment\n         * between sessions.\n         *\n         * @param host hostname of the server that supports QUIC.\n         * @param port host of the server that supports QUIC.\n         * @param alternatePort alternate port to use for QUIC.\n         * @return the builder to facilitate chaining.\n         ",
    "links" : [ "#HTTP_CACHE_DISK", "#enableHttpCacheenableHttpCache" ]
  }, {
    "name" : "public Builder addPublicKeyPins(String hostName, Set<byte[]> pinsSha256, boolean includeSubdomains, Date expirationDate)",
    "returnType" : "Builder",
    "comment" : "\n         * Pins a set of public keys for a given host. By pinning a set of public keys, {@code\n         * pinsSha256}, communication with {@code hostName} is required to authenticate with a\n         * certificate with a public key from the set of pinned ones. An app can pin the public key\n         * of the root certificate, any of the intermediate certificates or the end-entry\n         * certificate. Authentication will fail and secure communication will not be established if\n         * none of the public keys is present in the host's certificate chain, even if the host\n         * attempts to authenticate with a certificate allowed by the device's trusted store of\n         * certificates.\n         *\n         * <p>Calling this method multiple times with the same host name overrides the previously\n         * set pins for the host.\n         *\n         * <p>More information about the public key pinning can be found in <a\n         * href=\"https://tools.ietf.org/html/rfc7469\">RFC 7469</a>.\n         *\n         * @param hostName name of the host to which the public keys should be pinned. A host that\n         * consists only of digits and the dot character is treated as invalid.\n         * @param pinsSha256 a set of pins. Each pin is the SHA-256 cryptographic hash of the\n         * DER-encoded ASN.1 representation of the Subject Public Key Info (SPKI) of the host's\n         * X.509 certificate. Use {@link java.security.cert.Certificate#getPublicKey()\n         * Certificate.getPublicKey()} and {@link java.security.Key#getEncoded() Key.getEncoded()}\n         * to obtain DER-encoded ASN.1 representation of the SPKI. Although, the method does not\n         * mandate the presence of the backup pin that can be used if the control of the primary\n         * private key has been lost, it is highly recommended to supply one.\n         * @param includeSubdomains indicates whether the pinning policy should be applied to\n         *         subdomains\n         * of {@code hostName}.\n         * @param expirationDate specifies the expiration date for the pins.\n         * @return the builder to facilitate chaining.\n         * @throws NullPointerException if any of the input parameters are {@code null}.\n         * @throws IllegalArgumentException if the given host name is invalid or {@code pinsSha256}\n         * contains a byte array that does not represent a valid SHA-256 hash.\n         ",
    "links" : [ "java.security.Key#getEncoded()", "java.security.cert.Certificate#getPublicKey()" ]
  }, {
    "name" : "public Builder enablePublicKeyPinningBypassForLocalTrustAnchors(boolean value)",
    "returnType" : "Builder",
    "comment" : "\n         * Enables or disables public key pinning bypass for local trust anchors. Disabling the\n         * bypass for local trust anchors is highly discouraged since it may prohibit the app from\n         * communicating with the pinned hosts. E.g., a user may want to send all traffic through an\n         * SSL enabled proxy by changing the device proxy settings and adding the proxy certificate\n         * to the list of local trust anchor. Disabling the bypass will most likely prevent the app\n         * from sending any traffic to the pinned hosts. For more information see 'How does key\n         * pinning interact with local proxies and filters?' at\n         * https://www.chromium.org/Home/chromium-security/security-faq\n         *\n         * @param value {@code true} to enable the bypass, {@code false} to disable.\n         * @return the builder to facilitate chaining.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setThreadPriority(int priority)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the thread priority of Cronet's internal thread.\n         *\n         * @param priority the thread priority of Cronet's internal thread. A Linux priority level,\n         *         from\n         * -20 for highest scheduling priority to 19 for lowest scheduling priority. For more\n         * information on values, see {@link android.os.Process#setThreadPriority(int, int)} and\n         * {@link android.os.Process#THREAD_PRIORITY_DEFAULT THREAD_PRIORITY_*} values.\n         * @return the builder to facilitate chaining.\n         ",
    "links" : [ "android.os.Process#THREAD_PRIORITY_DEFAULT", "android.os.Process#setThreadPriority(int" ]
  }, {
    "name" : "public Builder enableNetworkQualityEstimator(boolean value)",
    "returnType" : "Builder",
    "comment" : "\n         * Enables the network quality estimator, which collects and reports measurements of round\n         * trip time (RTT) and downstream throughput at various layers of the network stack. After\n         * enabling the estimator, listeners of RTT and throughput can be added with {@link\n         * #addRttListener} and\n         * {@link #addThroughputListener} and removed with {@link #removeRttListener} and {@link\n         * #removeThroughputListener}. The estimator uses memory and CPU only when enabled.\n         *\n         * @param value {@code true} to enable network quality estimator, {@code false} to disable.\n         * @return the builder to facilitate chaining.\n         ",
    "links" : [ "#addRttListener", "#removeThroughputListener", "#addThroughputListener", "#removeRttListener" ]
  }, {
    "name" : "public Builder setQuicOptions(QuicOptions quicOptions)",
    "returnType" : "Builder",
    "comment" : "\n         * Configures the behavior of Cronet when using QUIC. For more details, see documentation\n         * of {@link QuicOptions} and the individual methods of {@link QuicOptions.Builder}.\n         *\n         * <p>Only relevant if {@link #enableQuic(boolean)} is enabled.\n         *\n         * @return the builder to facilitate chaining.\n         ",
    "links" : [ "QuicOptions.Builder", "org.chromium.net.QuicOptions", "#enableQuic(boolean)" ]
  }, {
    "name" : "public Builder setQuicOptions(QuicOptions.Builder quicOptionsBuilder)",
    "returnType" : "Builder",
    "comment" : " @see #setQuicOptions(QuicOptions) ",
    "links" : [ ]
  }, {
    "name" : "public Builder setDnsOptions(DnsOptions dnsOptions)",
    "returnType" : "Builder",
    "comment" : "\n         * Configures the behavior of hostname lookup. For more details, see documentation\n         * of {@link DnsOptions} and the individual methods of {@link DnsOptions.Builder}.\n         *\n         * <p>Only relevant if {@link #enableQuic(boolean)} is enabled.\n         *\n         * @return the builder to facilitate chaining.\n         ",
    "links" : [ "org.chromium.net.DnsOptions", "DnsOptions.Builder", "#enableQuic(boolean)" ]
  }, {
    "name" : "public Builder setDnsOptions(DnsOptions.Builder dnsOptions)",
    "returnType" : "Builder",
    "comment" : " @see #setDnsOptions(DnsOptions) ",
    "links" : [ ]
  }, {
    "name" : "public Builder setConnectionMigrationOptions(ConnectionMigrationOptions connectionMigrationOptions)",
    "returnType" : "Builder",
    "comment" : "\n         * Configures the behavior of connection migration. For more details, see documentation\n         * of {@link ConnectionMigrationOptions} and the individual methods of {@link\n         * ConnectionMigrationOptions.Builder}.\n         *\n         * <p>Only relevant if {@link #enableQuic(boolean)} is enabled.\n         *\n         * @return the builder to facilitate chaining.\n         ",
    "links" : [ "org.chromium.net.ConnectionMigrationOptions", "ConnectionMigrationOptions.Builder", "#enableQuic(boolean)" ]
  }, {
    "name" : "public Builder setConnectionMigrationOptions(ConnectionMigrationOptions.Builder connectionMigrationOptionsBuilder)",
    "returnType" : "Builder",
    "comment" : " @see #setConnectionMigrationOptions(ConnectionMigrationOptions) ",
    "links" : [ ]
  }, {
    "name" : "public CronetEngine build()",
    "returnType" : "CronetEngine",
    "comment" : "\n         * Build a {@link CronetEngine} using this builder's configuration.\n         *\n         * @return constructed {@link CronetEngine}.\n         ",
    "links" : [ "org.chromium.net.CronetEngine" ]
  }, {
    "name" : "private static ICronetEngineBuilder createBuilderDelegate(Context context)",
    "returnType" : "ICronetEngineBuilder",
    "comment" : "\n         * Creates an implementation of {@link ICronetEngineBuilder} that can be used to delegate\n         * the builder calls to. The method uses {@link CronetProvider} to obtain the list of\n         * available providers.\n         *\n         * @param context Android Context to use.\n         * @return the created {@code ICronetEngineBuilder}.\n         ",
    "links" : [ "org.chromium.net.ICronetEngineBuilder", "org.chromium.net.CronetProvider" ]
  }, {
    "name" : " static List<CronetProvider> getEnabledCronetProviders(Context context, List<CronetProvider> providers)",
    "returnType" : "List<CronetProvider>",
    "comment" : "\n         * Returns the list of available and enabled {@link CronetProvider}. The returned list is\n         * sorted based on the provider versions and types.\n         *\n         * @param context Android Context to use.\n         * @param providers the list of enabled and disabled providers to filter out and sort.\n         * @return the sorted list of enabled providers. The list contains at least one provider.\n         * @throws RuntimeException is the list of providers is empty or all of the providers are\n         * disabled.\n         ",
    "links" : [ "org.chromium.net.CronetProvider" ]
  }, {
    "name" : " static int compareVersions(String s1, String s2)",
    "returnType" : "int",
    "comment" : "\n         * Compares two strings that contain versions. The string should only contain dot-separated\n         * segments that contain an arbitrary number of digits digits [0-9].\n         *\n         * @param s1 the first string.\n         * @param s2 the second string.\n         * @return -1 if s1<s2, +1 if s1>s2 and 0 if s1=s2. If two versions are equal, the version\n         *         with\n         * the higher number of segments is considered to be higher.\n         * @throws IllegalArgumentException if any of the strings contains an illegal version\n         *         number.\n         ",
    "links" : [ ]
  }, {
    "name" : "private int getMaximumApiLevel()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getImplementationApiLevel()",
    "returnType" : "int",
    "comment" : "\n         * Returns the implementation version, the implementation being represented by the delegate\n         * builder, or {@code -1} if the version couldn't be retrieved.\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public String getDefaultUserAgent()", "public Builder setUserAgent(String userAgent)", "public Builder setStoragePath(String value)", "public Builder setLibraryLoader(LibraryLoader loader)", "public Builder enableQuic(boolean value)", "public Builder enableHttp2(boolean value)", "public Builder enableSdch(boolean value)", "public Builder enableBrotli(boolean value)", "public Builder enableHttpCache(int cacheMode, long maxSize)", "public Builder addQuicHint(String host, int port, int alternatePort)", "public Builder addPublicKeyPins(String hostName, Set<byte[]> pinsSha256, boolean includeSubdomains, Date expirationDate)", "public Builder enablePublicKeyPinningBypassForLocalTrustAnchors(boolean value)", "public Builder setThreadPriority(int priority)", "public Builder enableNetworkQualityEstimator(boolean value)", "public Builder setQuicOptions(QuicOptions quicOptions)", "public Builder setQuicOptions(QuicOptions.Builder quicOptionsBuilder)", "public Builder setDnsOptions(DnsOptions dnsOptions)", "public Builder setDnsOptions(DnsOptions.Builder dnsOptions)", "public Builder setConnectionMigrationOptions(ConnectionMigrationOptions connectionMigrationOptions)", "public Builder setConnectionMigrationOptions(ConnectionMigrationOptions.Builder connectionMigrationOptionsBuilder)", "public CronetEngine build()", "private static ICronetEngineBuilder createBuilderDelegate(Context context)", " static List<CronetProvider> getEnabledCronetProviders(Context context, List<CronetProvider> providers)", " static int compareVersions(String s1, String s2)", "private int getMaximumApiLevel()", "private int getImplementationApiLevel()" ],
  "variableNames" : [ "TAG", "mBuilderDelegate", "HTTP_CACHE_DISABLED", "HTTP_CACHE_IN_MEMORY", "HTTP_CACHE_DISK_NO_HTTP", "HTTP_CACHE_DISK" ]
}