{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/security/MessageDigestSpi.java",
  "packageName" : "java.security",
  "className" : "MessageDigestSpi",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "tempArray",
    "type" : "byte[]",
    "comment" : " for re-use in engineUpdate(ByteBuffer input)",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected int engineGetDigestLength()",
    "returnType" : "int",
    "comment" : "\n     * Returns the digest length in bytes.\n     *\n     * <p>This concrete method has been added to this previously-defined\n     * abstract class. (For backwards compatibility, it cannot be abstract.)\n     *\n     * <p>The default behavior is to return 0.\n     *\n     * <p>This method may be overridden by a provider to return the digest\n     * length.\n     *\n     * @return the digest length in bytes.\n     *\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract void engineUpdate(byte input)",
    "returnType" : "void",
    "comment" : "\n     * Updates the digest using the specified byte.\n     *\n     * @param input the byte to use for the update.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract void engineUpdate(byte[] input, int offset, int len)",
    "returnType" : "void",
    "comment" : "\n     * Updates the digest using the specified array of bytes,\n     * starting at the specified offset.\n     *\n     * @param input the array of bytes to use for the update.\n     *\n     * @param offset the offset to start from in the array of bytes.\n     *\n     * @param len the number of bytes to use, starting at\n     * {@code offset}.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void engineUpdate(ByteBuffer input)",
    "returnType" : "void",
    "comment" : "\n     * Update the digest using the specified ByteBuffer. The digest is\n     * updated using the {@code input.remaining()} bytes starting\n     * at {@code input.position()}.\n     * Upon return, the buffer's position will be equal to its limit;\n     * its limit will not have changed.\n     *\n     * @param input the ByteBuffer\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract byte[] engineDigest()",
    "returnType" : "byte[]",
    "comment" : "\n     * Completes the hash computation by performing final\n     * operations such as padding. Once {@code engineDigest} has\n     * been called, the engine should be reset (see\n     * {@link #engineReset() engineReset}).\n     * Resetting is the responsibility of the\n     * engine implementor.\n     *\n     * @return the array of bytes for the resulting hash value.\n     ",
    "links" : [ "#engineReset()" ]
  }, {
    "name" : "protected int engineDigest(byte[] buf, int offset, int len) throws DigestException",
    "returnType" : "int",
    "comment" : "\n     * Completes the hash computation by performing final\n     * operations such as padding. Once {@code engineDigest} has\n     * been called, the engine should be reset (see\n     * {@link #engineReset() engineReset}).\n     * Resetting is the responsibility of the\n     * engine implementor.\n     *\n     * This method should be abstract, but we leave it concrete for\n     * binary compatibility.  Knowledgeable providers should override this\n     * method.\n     *\n     * @param buf the output buffer in which to store the digest\n     *\n     * @param offset offset to start from in the output buffer\n     *\n     * @param len number of bytes within buf allotted for the digest.\n     * Both this default implementation and the SUN provider do not\n     * return partial digests.  The presence of this parameter is solely\n     * for consistency in our API's.  If the value of this parameter is less\n     * than the actual digest length, the method will throw a DigestException.\n     * This parameter is ignored if its value is greater than or equal to\n     * the actual digest length.\n     *\n     * @return the length of the digest stored in the output buffer.\n     *\n     * @exception DigestException if an error occurs.\n     *\n     * @since 1.2\n     ",
    "links" : [ "#engineReset()" ]
  }, {
    "name" : "protected abstract void engineReset()",
    "returnType" : "void",
    "comment" : "\n     * Resets the digest for further use.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object clone() throws CloneNotSupportedException",
    "returnType" : "Object",
    "comment" : "\n     * Returns a clone if the implementation is cloneable.\n     *\n     * @return a clone if the implementation is cloneable.\n     *\n     * @exception CloneNotSupportedException if this is called on an\n     * implementation that does not support {@code Cloneable}.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "protected int engineGetDigestLength()", "protected abstract void engineUpdate(byte input)", "protected abstract void engineUpdate(byte[] input, int offset, int len)", "protected void engineUpdate(ByteBuffer input)", "protected abstract byte[] engineDigest()", "protected int engineDigest(byte[] buf, int offset, int len) throws DigestException", "protected abstract void engineReset()", "public Object clone() throws CloneNotSupportedException" ],
  "variableNames" : [ "tempArray" ]
}