{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/os/storage/StorageVolume.java",
  "packageName" : "android.os.storage",
  "className" : "StorageVolume",
  "comment" : " user, but is now part of the public API.",
  "variables" : [ {
    "name" : "mId",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPath",
    "type" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInternalPath",
    "type" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDescription",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPrimary",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRemovable",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEmulated",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAllowMassStorage",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaxFileSize",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOwner",
    "type" : "UserHandle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFsUuid",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mState",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EXTRA_STORAGE_VOLUME",
    "type" : "String",
    "comment" : " Also sent on ACTION_MEDIA_UNSHARED, which is @hide",
    "links" : [ ]
  }, {
    "name" : "EXTRA_DIRECTORY_NAME",
    "type" : "String",
    "comment" : "\n     * Name of the String extra used by {@link #createAccessIntent(String) createAccessIntent}.\n     *\n     * @hide\n     ",
    "links" : [ "#createAccessIntent" ]
  }, {
    "name" : "ACTION_OPEN_EXTERNAL_DIRECTORY",
    "type" : "String",
    "comment" : "\n     * Name of the intent used by {@link #createAccessIntent(String) createAccessIntent}.\n     ",
    "links" : [ "#createAccessIntent" ]
  }, {
    "name" : "STORAGE_ID_INVALID",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "STORAGE_ID_PRIMARY",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<StorageVolume>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String getId()",
    "returnType" : "String",
    "comment" : "\n     * Return an opaque ID that can be used to identify this volume.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getPath()",
    "returnType" : "String",
    "comment" : "\n     * Returns the mount path for the volume.\n     *\n     * @return the mount path\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getInternalPath()",
    "returnType" : "String",
    "comment" : "\n     * Returns the path of the underlying filesystem.\n     *\n     * @return the internal path\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public File getPathFile()",
    "returnType" : "File",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public File getDirectory()",
    "returnType" : "File",
    "comment" : "\n     * Returns the directory where this volume is currently mounted.\n     * <p>\n     * Direct filesystem access via this path has significant emulation\n     * overhead, and apps are instead strongly encouraged to interact with media\n     * on storage volumes via the {@link MediaStore} APIs.\n     * <p>\n     * This directory does not give apps any additional access beyond what they\n     * already have via {@link MediaStore}.\n     *\n     * @return directory where this volume is mounted, or {@code null} if the\n     *         volume is not currently mounted.\n     ",
    "links" : [ "MediaStore", "MediaStore" ]
  }, {
    "name" : "public String getDescription(Context context)",
    "returnType" : "String",
    "comment" : "\n     * Returns a user-visible description of the volume.\n     *\n     * @return the volume description\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isPrimary()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the volume is the primary shared/external storage, which is the volume\n     * backed by {@link Environment#getExternalStorageDirectory()}.\n     ",
    "links" : [ "Environment#getExternalStorageDirectory" ]
  }, {
    "name" : "public boolean isRemovable()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the volume is removable.\n     *\n     * @return is removable\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isEmulated()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the volume is emulated.\n     *\n     * @return is removable\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean allowMassStorage()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this volume can be shared via USB mass storage.\n     *\n     * @return whether mass storage is allowed\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getMaxFileSize()",
    "returnType" : "long",
    "comment" : "\n     * Returns maximum file size for the volume, or zero if it is unbounded.\n     *\n     * @return maximum file size\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public UserHandle getOwner()",
    "returnType" : "UserHandle",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public String getUuid()",
    "returnType" : "String",
    "comment" : "\n     * Gets the volume UUID, if any.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getMediaStoreVolumeName()",
    "returnType" : "String",
    "comment" : "\n     * Return the volume name that can be used to interact with this storage\n     * device through {@link MediaStore}.\n     *\n     * @return opaque volume name, or {@code null} if this volume is not indexed\n     *         by {@link MediaStore}.\n     * @see android.provider.MediaStore.Audio.Media#getContentUri(String)\n     * @see android.provider.MediaStore.Video.Media#getContentUri(String)\n     * @see android.provider.MediaStore.Images.Media#getContentUri(String)\n     ",
    "links" : [ "MediaStore", "MediaStore" ]
  }, {
    "name" : "public static String normalizeUuid(@Nullable String fsUuid)",
    "returnType" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public String getNormalizedUuid()",
    "returnType" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public int getFatVolumeId()",
    "returnType" : "int",
    "comment" : "\n     * Parse and return volume UUID as FAT volume ID, or return -1 if unable to\n     * parse or UUID is unknown.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getUserLabel()",
    "returnType" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public String getState()",
    "returnType" : "String",
    "comment" : "\n     * Returns the current state of the volume.\n     *\n     * @return one of {@link Environment#MEDIA_UNKNOWN}, {@link Environment#MEDIA_REMOVED},\n     *         {@link Environment#MEDIA_UNMOUNTED}, {@link Environment#MEDIA_CHECKING},\n     *         {@link Environment#MEDIA_NOFS}, {@link Environment#MEDIA_MOUNTED},\n     *         {@link Environment#MEDIA_MOUNTED_READ_ONLY}, {@link Environment#MEDIA_SHARED},\n     *         {@link Environment#MEDIA_BAD_REMOVAL}, or {@link Environment#MEDIA_UNMOUNTABLE}.\n     ",
    "links" : [ "Environment#MEDIA_UNKNOWN", "Environment#MEDIA_REMOVED", "Environment#MEDIA_UNMOUNTED", "Environment#MEDIA_CHECKING", "Environment#MEDIA_NOFS", "Environment#MEDIA_MOUNTED", "Environment#MEDIA_MOUNTED_READ_ONLY", "Environment#MEDIA_SHARED", "Environment#MEDIA_BAD_REMOVAL", "Environment#MEDIA_UNMOUNTABLE" ]
  }, {
    "name" : "public Intent createAccessIntent(String directoryName)",
    "returnType" : "Intent",
    "comment" : "\n     * Builds an intent to give access to a standard storage directory or entire volume after\n     * obtaining the user's approval.\n     * <p>\n     * When invoked, the system will ask the user to grant access to the requested directory (and\n     * its descendants). The result of the request will be returned to the activity through the\n     * {@code onActivityResult} method.\n     * <p>\n     * To gain access to descendants (child, grandchild, etc) documents, use\n     * {@link DocumentsContract#buildDocumentUriUsingTree(Uri, String)}, or\n     * {@link DocumentsContract#buildChildDocumentsUriUsingTree(Uri, String)} with the returned URI.\n     * <p>\n     * If your application only needs to store internal data, consider using\n     * {@link Context#getExternalFilesDirs(String) Context.getExternalFilesDirs},\n     * {@link Context#getExternalCacheDirs()}, or {@link Context#getExternalMediaDirs()}, which\n     * require no permissions to read or write.\n     * <p>\n     * Access to the entire volume is only available for non-primary volumes (for the primary\n     * volume, apps can use the {@link android.Manifest.permission#READ_EXTERNAL_STORAGE} and\n     * {@link android.Manifest.permission#WRITE_EXTERNAL_STORAGE} permissions) and should be used\n     * with caution, since users are more likely to deny access when asked for entire volume access\n     * rather than specific directories.\n     *\n     * @param directoryName must be one of {@link Environment#DIRECTORY_MUSIC},\n     *            {@link Environment#DIRECTORY_PODCASTS}, {@link Environment#DIRECTORY_RINGTONES},\n     *            {@link Environment#DIRECTORY_ALARMS}, {@link Environment#DIRECTORY_NOTIFICATIONS},\n     *            {@link Environment#DIRECTORY_PICTURES}, {@link Environment#DIRECTORY_MOVIES},\n     *            {@link Environment#DIRECTORY_DOWNLOADS}, {@link Environment#DIRECTORY_DCIM}, or\n     *            {@link Environment#DIRECTORY_DOCUMENTS}, or {@code null} to request access to the\n     *            entire volume.\n     * @return intent to request access, or {@code null} if the requested directory is invalid for\n     *         that volume.\n     * @see DocumentsContract\n     * @deprecated Callers should migrate to using {@link Intent#ACTION_OPEN_DOCUMENT_TREE} instead.\n     *             Launching this {@link Intent} on devices running\n     *             {@link android.os.Build.VERSION_CODES#Q} or higher, will immediately finish\n     *             with a result code of {@link android.app.Activity#RESULT_CANCELED}.\n     ",
    "links" : [ "DocumentsContract#buildDocumentUriUsingTree", "DocumentsContract#buildChildDocumentsUriUsingTree", "Context#getExternalFilesDirs", "Context#getExternalCacheDirs", "Context#getExternalMediaDirs", "android.Manifest.permission#READ_EXTERNAL_STORAGE", "android.Manifest.permission#WRITE_EXTERNAL_STORAGE", "Environment#DIRECTORY_MUSIC", "Environment#DIRECTORY_PODCASTS", "Environment#DIRECTORY_RINGTONES", "Environment#DIRECTORY_ALARMS", "Environment#DIRECTORY_NOTIFICATIONS", "Environment#DIRECTORY_PICTURES", "Environment#DIRECTORY_MOVIES", "Environment#DIRECTORY_DOWNLOADS", "Environment#DIRECTORY_DCIM", "Environment#DIRECTORY_DOCUMENTS", "Intent#ACTION_OPEN_DOCUMENT_TREE", "Intent", "android.os.Build.VERSION_CODES#Q", "android.app.Activity#RESULT_CANCELED" ]
  }, {
    "name" : "public Intent createOpenDocumentTreeIntent()",
    "returnType" : "Intent",
    "comment" : "\n     * Builds an {@link Intent#ACTION_OPEN_DOCUMENT_TREE} to allow the user to grant access to any\n     * directory subtree (or entire volume) from the {@link android.provider.DocumentsProvider}s\n     * available on the device. The initial location of the document navigation will be the root of\n     * this {@link StorageVolume}.\n     *\n     * Note that the returned {@link Intent} simply suggests that the user picks this {@link\n     * StorageVolume} by default, but the user may select a different location. Callers must respect\n     * the user's chosen location, even if it is different from the originally requested location.\n     *\n     * @return intent to {@link Intent#ACTION_OPEN_DOCUMENT_TREE} initially showing the contents\n     *         of this {@link StorageVolume}\n     * @see Intent#ACTION_OPEN_DOCUMENT_TREE\n     ",
    "links" : [ "Intent#ACTION_OPEN_DOCUMENT_TREE", "android.provider.DocumentsProvider", "StorageVolume", "Intent", "Intent#ACTION_OPEN_DOCUMENT_TREE", "StorageVolume" ]
  }, {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String dump()",
    "returnType" : "String",
    "comment" : " TODO: find out where toString() is called internally and replace these calls by dump().",
    "links" : [ ]
  }, {
    "name" : "public void dump(IndentingPrintWriter pw)",
    "returnType" : "void",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel parcel, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "mId", "mPath", "mInternalPath", "mDescription", "mPrimary", "mRemovable", "mEmulated", "mAllowMassStorage", "mMaxFileSize", "mOwner", "mFsUuid", "mState", "EXTRA_STORAGE_VOLUME", "EXTRA_DIRECTORY_NAME", "ACTION_OPEN_EXTERNAL_DIRECTORY", "STORAGE_ID_INVALID", "STORAGE_ID_PRIMARY", "CREATOR" ],
  "methodNames" : [ "public String getId()", "public String getPath()", "public String getInternalPath()", "public File getPathFile()", "public File getDirectory()", "public String getDescription(Context context)", "public boolean isPrimary()", "public boolean isRemovable()", "public boolean isEmulated()", "public boolean allowMassStorage()", "public long getMaxFileSize()", "public UserHandle getOwner()", "public String getUuid()", "public String getMediaStoreVolumeName()", "public static String normalizeUuid(@Nullable String fsUuid)", "public String getNormalizedUuid()", "public int getFatVolumeId()", "public String getUserLabel()", "public String getState()", "public Intent createAccessIntent(String directoryName)", "public Intent createOpenDocumentTreeIntent()", "public boolean equals(Object obj)", "public int hashCode()", "public String toString()", "public String dump()", "public void dump(IndentingPrintWriter pw)", "public int describeContents()", "public void writeToParcel(Parcel parcel, int flags)" ]
}