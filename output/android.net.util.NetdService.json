{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/net/util/NetdService.java",
  "packageName" : "android.net.util",
  "className" : "NetdService",
  "comment" : "\n * @hide\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BASE_TIMEOUT_MS",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_TIMEOUT_MS",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static INetd getInstance()",
    "returnType" : "INetd",
    "comment" : "\n     * Return an INetd instance, or null if not available.\n     *\n     * It is the caller's responsibility to check for a null return value\n     * and to handle RemoteException errors from invocations on the returned\n     * interface if, for example, netd dies and is restarted.\n     *\n     * Returned instances of INetd should not be cached.\n     *\n     * @return an INetd instance or null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static INetd get(long maxTimeoutMs)",
    "returnType" : "INetd",
    "comment" : "\n     * Blocks for a specified time until an INetd instance is available.\n     *\n     * It is the caller's responsibility to handle RemoteException errors\n     * from invocations on the returned interface if, for example, netd\n     * dies after this interface was returned.\n     *\n     * Returned instances of INetd should not be cached.\n     *\n     * Special values of maxTimeoutMs include: 0, meaning try to obtain an\n     * INetd instance only once, and -1 (or any value less than 0), meaning\n     * try to obtain an INetd instance indefinitely.\n     *\n     * @param maxTimeoutMs the maximum time to spend getting an INetd instance\n     * @return an INetd instance or null if no instance is available\n     * within |maxTimeoutMs| milliseconds.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static INetd get()",
    "returnType" : "INetd",
    "comment" : "\n     * Blocks until an INetd instance is available.\n     *\n     * It is the caller's responsibility to handle RemoteException errors\n     * from invocations on the returned interface if, for example, netd\n     * dies after this interface was returned.\n     *\n     * Returned instances of INetd should not be cached.\n     *\n     * @return an INetd instance.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void run(NetdCommand cmd)",
    "returnType" : "void",
    "comment" : "\n     * Blocks until an INetd instance is availabe, and retries until either\n     * the command succeeds or a runtime exception is thrown.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "BASE_TIMEOUT_MS", "MAX_TIMEOUT_MS" ],
  "methodNames" : [ "public static INetd getInstance()", "public static INetd get(long maxTimeoutMs)", "public static INetd get()", "public static void run(NetdCommand cmd)" ]
}