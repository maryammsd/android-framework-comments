{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/content/pm/ServiceInfo.java",
  "packageName" : "android.content.pm",
  "className" : "ServiceInfo",
  "comment" : "\n * Information you can retrieve about a particular application\n * service. This corresponds to information collected from the\n * AndroidManifest.xml's &lt;service&gt; tags.\n ",
  "variables" : [ {
    "name" : "permission",
    "type" : "String",
    "comment" : "\n     * Optional name of a permission required to be able to access this\n     * Service.  From the \"permission\" attribute.\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_STOP_WITH_TASK",
    "type" : "int",
    "comment" : "\n     * Bit in {@link #flags}: If set, the service will automatically be\n     * stopped by the system if the user removes a task that is rooted\n     * in one of the application's activities.  Set from the\n     * {@link android.R.attr#stopWithTask} attribute.\n     ",
    "links" : [ "#flags", "android.R.attr#stopWithTask" ]
  }, {
    "name" : "FLAG_ISOLATED_PROCESS",
    "type" : "int",
    "comment" : "\n     * Bit in {@link #flags}: If set, the service will run in its own\n     * isolated process.  Set from the\n     * {@link android.R.attr#isolatedProcess} attribute.\n     ",
    "links" : [ "#flags", "android.R.attr#isolatedProcess" ]
  }, {
    "name" : "FLAG_EXTERNAL_SERVICE",
    "type" : "int",
    "comment" : "\n     * Bit in {@link #flags}: If set, the service can be bound and run in the\n     * calling application's package, rather than the package in which it is\n     * declared.  Set from {@link android.R.attr#externalService} attribute.\n     ",
    "links" : [ "#flags", "android.R.attr#externalService" ]
  }, {
    "name" : "FLAG_USE_APP_ZYGOTE",
    "type" : "int",
    "comment" : "\n     * Bit in {@link #flags}: If set, the service (which must be isolated)\n     * will be spawned from an Application Zygote, instead of the regular Zygote.\n     * The Application Zygote will pre-initialize the application's class loader,\n     * and call a static callback into the application to allow it to perform\n     * application-specific preloads (such as loading a shared library). Therefore,\n     * spawning from the Application Zygote will typically reduce the service\n     * launch time and reduce its memory usage. The downside of using this flag\n     * is that you will have an additional process (the app zygote itself) that\n     * is taking up memory. Whether actual memory usage is improved therefore\n     * strongly depends on the number of isolated services that an application\n     * starts, and how much memory those services save by preloading. Therefore,\n     * it is recommended to measure memory usage under typical workloads to\n     * determine whether it makes sense to use this flag.\n     ",
    "links" : [ "#flags" ]
  }, {
    "name" : "FLAG_VISIBLE_TO_INSTANT_APP",
    "type" : "int",
    "comment" : "\n     * Bit in {@link #flags} indicating if the service is visible to ephemeral applications.\n     * @hide\n     ",
    "links" : [ "#flags" ]
  }, {
    "name" : "FLAG_SINGLE_USER",
    "type" : "int",
    "comment" : "\n     * Bit in {@link #flags}: If set, a single instance of the service will\n     * run for all users on the device.  Set from the\n     * {@link android.R.attr#singleUser} attribute.\n     ",
    "links" : [ "#flags", "android.R.attr#singleUser" ]
  }, {
    "name" : "flags",
    "type" : "int",
    "comment" : "\n     * Options that have been set in the service declaration in the\n     * manifest.\n     * These include:\n     * {@link #FLAG_STOP_WITH_TASK}, {@link #FLAG_ISOLATED_PROCESS},\n     * {@link #FLAG_SINGLE_USER}.\n     ",
    "links" : [ "#FLAG_STOP_WITH_TASK", "#FLAG_ISOLATED_PROCESS", "#FLAG_SINGLE_USER" ]
  }, {
    "name" : "FOREGROUND_SERVICE_TYPE_NONE",
    "type" : "int",
    "comment" : "\n     * The default foreground service type if not been set in manifest file.\n     ",
    "links" : [ ]
  }, {
    "name" : "FOREGROUND_SERVICE_TYPE_DATA_SYNC",
    "type" : "int",
    "comment" : "\n     * Constant corresponding to <code>dataSync</code> in\n     * the {@link android.R.attr#foregroundServiceType} attribute.\n     * Data(photo, file, account) upload/download, backup/restore, import/export, fetch,\n     * transfer over network between device and cloud.\n     ",
    "links" : [ "android.R.attr#foregroundServiceType" ]
  }, {
    "name" : "FOREGROUND_SERVICE_TYPE_MEDIA_PLAYBACK",
    "type" : "int",
    "comment" : "\n     * Constant corresponding to <code>mediaPlayback</code> in\n     * the {@link android.R.attr#foregroundServiceType} attribute.\n     * Music, video, news or other media playback.\n     ",
    "links" : [ "android.R.attr#foregroundServiceType" ]
  }, {
    "name" : "FOREGROUND_SERVICE_TYPE_PHONE_CALL",
    "type" : "int",
    "comment" : "\n     * Constant corresponding to <code>phoneCall</code> in\n     * the {@link android.R.attr#foregroundServiceType} attribute.\n     * Ongoing phone call or video conference.\n     ",
    "links" : [ "android.R.attr#foregroundServiceType" ]
  }, {
    "name" : "FOREGROUND_SERVICE_TYPE_LOCATION",
    "type" : "int",
    "comment" : "\n     * Constant corresponding to <code>location</code> in\n     * the {@link android.R.attr#foregroundServiceType} attribute.\n     * GPS, map, navigation location update.\n     ",
    "links" : [ "android.R.attr#foregroundServiceType" ]
  }, {
    "name" : "FOREGROUND_SERVICE_TYPE_CONNECTED_DEVICE",
    "type" : "int",
    "comment" : "\n     * Constant corresponding to <code>connectedDevice</code> in\n     * the {@link android.R.attr#foregroundServiceType} attribute.\n     * Auto, bluetooth, TV or other devices connection, monitoring and interaction.\n     ",
    "links" : [ "android.R.attr#foregroundServiceType" ]
  }, {
    "name" : "FOREGROUND_SERVICE_TYPE_MEDIA_PROJECTION",
    "type" : "int",
    "comment" : "\n     * Constant corresponding to {@code mediaProjection} in\n     * the {@link android.R.attr#foregroundServiceType} attribute.\n     * Managing a media projection session, e.g for screen recording or taking screenshots.\n     ",
    "links" : [ "android.R.attr#foregroundServiceType" ]
  }, {
    "name" : "FOREGROUND_SERVICE_TYPE_CAMERA",
    "type" : "int",
    "comment" : "\n     * Constant corresponding to {@code camera} in\n     * the {@link android.R.attr#foregroundServiceType} attribute.\n     * Use the camera device or record video.\n     * For apps with <code>targetSdkVersion</code> {@link android.os.Build.VERSION_CODES#R} and\n     * above, a foreground service will not be able to access the camera if this type is not\n     * specified in the manifest and in\n     * {@link android.app.Service#startForeground(int, android.app.Notification, int)}.\n     ",
    "links" : [ "android.R.attr#foregroundServiceType", "android.os.Build.VERSION_CODES#R", "android.app.Service#startForeground" ]
  }, {
    "name" : "FOREGROUND_SERVICE_TYPE_MICROPHONE",
    "type" : "int",
    "comment" : "\n     * Constant corresponding to {@code microphone} in\n     * the {@link android.R.attr#foregroundServiceType} attribute.\n     * Use the microphone device or record audio.\n     * For apps with <code>targetSdkVersion</code> {@link android.os.Build.VERSION_CODES#R} and\n     * above, a foreground service will not be able to access the microphone if this type is not\n     * specified in the manifest and in\n     * {@link android.app.Service#startForeground(int, android.app.Notification, int)}.\n     ",
    "links" : [ "android.R.attr#foregroundServiceType", "android.os.Build.VERSION_CODES#R", "android.app.Service#startForeground" ]
  }, {
    "name" : "FOREGROUND_SERVICE_TYPE_MANIFEST",
    "type" : "int",
    "comment" : "\n     * A special value indicates to use all types set in manifest file.\n     ",
    "links" : [ ]
  }, {
    "name" : "mForegroundServiceType",
    "type" : "int",
    "comment" : "\n     * The type of foreground service, set in\n     * {@link android.R.attr#foregroundServiceType} attribute by ORing flags in\n     * {@link ForegroundServiceType}\n     * @hide\n     ",
    "links" : [ "android.R.attr#foregroundServiceType", "ForegroundServiceType" ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<ServiceInfo>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getForegroundServiceType()",
    "returnType" : "int",
    "comment" : "\n     * Return foreground service type specified in the manifest..\n     * @return foreground service type specified in the manifest.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void dump(Printer pw, String prefix)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dump(Printer pw, String prefix, int dumpFlags)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int parcelableFlags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "permission", "FLAG_STOP_WITH_TASK", "FLAG_ISOLATED_PROCESS", "FLAG_EXTERNAL_SERVICE", "FLAG_USE_APP_ZYGOTE", "FLAG_VISIBLE_TO_INSTANT_APP", "FLAG_SINGLE_USER", "flags", "FOREGROUND_SERVICE_TYPE_NONE", "FOREGROUND_SERVICE_TYPE_DATA_SYNC", "FOREGROUND_SERVICE_TYPE_MEDIA_PLAYBACK", "FOREGROUND_SERVICE_TYPE_PHONE_CALL", "FOREGROUND_SERVICE_TYPE_LOCATION", "FOREGROUND_SERVICE_TYPE_CONNECTED_DEVICE", "FOREGROUND_SERVICE_TYPE_MEDIA_PROJECTION", "FOREGROUND_SERVICE_TYPE_CAMERA", "FOREGROUND_SERVICE_TYPE_MICROPHONE", "FOREGROUND_SERVICE_TYPE_MANIFEST", "mForegroundServiceType", "CREATOR" ],
  "methodNames" : [ "public int getForegroundServiceType()", "public void dump(Printer pw, String prefix)", " void dump(Printer pw, String prefix, int dumpFlags)", "public String toString()", "public int describeContents()", "public void writeToParcel(Parcel dest, int parcelableFlags)" ]
}