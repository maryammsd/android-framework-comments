{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/text/Editable.java",
  "packageName" : "android.text",
  "className" : "Editable",
  "comment" : "\n * This is the interface for text whose content and markup\n * can be changed (as opposed\n * to immutable text like Strings).  If you make a {@link DynamicLayout}\n * of an Editable, the layout will be reflowed as the text is changed.\n ",
  "links" : [ "android.text.DynamicLayout" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public Editable replace(int st, int en, CharSequence source, int start, int end)",
    "returnType" : "Editable",
    "comment" : "\n     * Replaces the specified range (<code>st&hellip;en</code>) of text in this\n     * Editable with a copy of the slice <code>start&hellip;end</code> from\n     * <code>source</code>.  The destination slice may be empty, in which case\n     * the operation is an insertion, or the source slice may be empty,\n     * in which case the operation is a deletion.\n     * <p>\n     * Before the change is committed, each filter that was set with\n     * {@link #setFilters} is given the opportunity to modify the\n     * <code>source</code> text.\n     * <p>\n     * If <code>source</code>\n     * is Spanned, the spans from it are preserved into the Editable.\n     * Existing spans within the Editable that entirely cover the replaced\n     * range are retained, but any that were strictly within the range\n     * that was replaced are removed. If the <code>source</code> contains a span\n     * with {@link Spanned#SPAN_PARAGRAPH} flag, and it does not satisfy the\n     * paragraph boundary constraint, it is not retained. As a special case, the\n     * cursor position is preserved even when the entire range where it is located\n     * is replaced.\n     * @return  a reference to this object.\n     *\n     * @see Spanned#SPAN_PARAGRAPH\n     ",
    "links" : [ "#setFilters", "android.text.Spanned#SPAN_PARAGRAPH" ]
  }, {
    "name" : "public Editable replace(int st, int en, CharSequence text)",
    "returnType" : "Editable",
    "comment" : "\n     * Convenience for replace(st, en, text, 0, text.length())\n     * @see #replace(int, int, CharSequence, int, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Editable insert(int where, CharSequence text, int start, int end)",
    "returnType" : "Editable",
    "comment" : "\n     * Convenience for replace(where, where, text, start, end)\n     * @see #replace(int, int, CharSequence, int, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Editable insert(int where, CharSequence text)",
    "returnType" : "Editable",
    "comment" : "\n     * Convenience for replace(where, where, text, 0, text.length());\n     * @see #replace(int, int, CharSequence, int, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Editable delete(int st, int en)",
    "returnType" : "Editable",
    "comment" : "\n     * Convenience for replace(st, en, \"\", 0, 0)\n     * @see #replace(int, int, CharSequence, int, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Editable append(CharSequence text)",
    "returnType" : "Editable",
    "comment" : "\n     * Convenience for replace(length(), length(), text, 0, text.length())\n     * @see #replace(int, int, CharSequence, int, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Editable append(CharSequence text, int start, int end)",
    "returnType" : "Editable",
    "comment" : "\n     * Convenience for replace(length(), length(), text, start, end)\n     * @see #replace(int, int, CharSequence, int, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Editable append(char text)",
    "returnType" : "Editable",
    "comment" : "\n     * Convenience for append(String.valueOf(text)).\n     * @see #replace(int, int, CharSequence, int, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clear()",
    "returnType" : "void",
    "comment" : "\n     * Convenience for replace(0, length(), \"\", 0, 0).\n     * Note that this clears the text, not the spans;\n     * use {@link #clearSpans} if you need that.\n     * @see #replace(int, int, CharSequence, int, int)\n     ",
    "links" : [ "#clearSpans" ]
  }, {
    "name" : "public void clearSpans()",
    "returnType" : "void",
    "comment" : "\n     * Removes all spans from the Editable, as if by calling\n     * {@link #removeSpan} on each of them.\n     ",
    "links" : [ "#removeSpan" ]
  }, {
    "name" : "public void setFilters(InputFilter[] filters)",
    "returnType" : "void",
    "comment" : "\n     * Sets the series of filters that will be called in succession\n     * whenever the text of this Editable is changed, each of which has\n     * the opportunity to limit or transform the text that is being inserted.\n     ",
    "links" : [ ]
  }, {
    "name" : "public InputFilter[] getFilters()",
    "returnType" : "InputFilter[]",
    "comment" : "\n     * Returns the array of input filters that are currently applied\n     * to changes to this Editable.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Editable replace(int st, int en, CharSequence source, int start, int end)", "public Editable replace(int st, int en, CharSequence text)", "public Editable insert(int where, CharSequence text, int start, int end)", "public Editable insert(int where, CharSequence text)", "public Editable delete(int st, int en)", "public Editable append(CharSequence text)", "public Editable append(CharSequence text, int start, int end)", "public Editable append(char text)", "public void clear()", "public void clearSpans()", "public void setFilters(InputFilter[] filters)", "public InputFilter[] getFilters()" ],
  "variableNames" : [ ]
}