{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/ActivityThread.java",
  "packageName" : "android.app",
  "className" : "ActivityThread",
  "comment" : "\n * This manages the execution of the main thread in an\n * application process, scheduling and executing activities,\n * broadcasts, and other operations on it as the activity\n * manager requests.\n *\n * {@hide}\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mDdmSyncStageUpdater",
    "type" : "DdmSyncStageUpdater",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "localLOGV",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG_MESSAGES",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG_BROADCAST",
    "type" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEBUG_RESULTS",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG_BACKUP",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG_CONFIGURATION",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG_SERVICE",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG_MEMORY_TRIM",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG_PROVIDER",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG_ORDER",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG_APP_INFO",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MIN_TIME_BETWEEN_GCS",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CONTENT_PROVIDER_RETAIN_TIME",
    "type" : "long",
    "comment" : "\n     * The delay to release the provider when it has no more references. It reduces the number of\n     * transactions for acquiring and releasing provider if the client accesses the provider\n     * frequently in a short time.\n     ",
    "links" : [ ]
  }, {
    "name" : "SQLITE_MEM_RELEASED_EVENT_LOG_TAG",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SERVICE_DONE_EXECUTING_ANON",
    "type" : "int",
    "comment" : " Type for IActivityManager.serviceDoneExecuting: anonymous operation ",
    "links" : [ ]
  }, {
    "name" : "SERVICE_DONE_EXECUTING_START",
    "type" : "int",
    "comment" : " Type for IActivityManager.serviceDoneExecuting: done with an onStart call ",
    "links" : [ ]
  }, {
    "name" : "SERVICE_DONE_EXECUTING_STOP",
    "type" : "int",
    "comment" : " Type for IActivityManager.serviceDoneExecuting: done stopping (destroying) service ",
    "links" : [ ]
  }, {
    "name" : "SERVICE_DONE_EXECUTING_REBIND",
    "type" : "int",
    "comment" : " Type for IActivityManager.serviceDoneExecuting: done with an onRebind call ",
    "links" : [ ]
  }, {
    "name" : "SERVICE_DONE_EXECUTING_UNBIND",
    "type" : "int",
    "comment" : " Type for IActivityManager.serviceDoneExecuting: done with an onUnbind call ",
    "links" : [ ]
  }, {
    "name" : "VM_PROCESS_STATE_JANK_PERCEPTIBLE",
    "type" : "int",
    "comment" : " Use foreground GC policy (less pause time) and higher JIT weight. ",
    "links" : [ ]
  }, {
    "name" : "VM_PROCESS_STATE_JANK_IMPERCEPTIBLE",
    "type" : "int",
    "comment" : " Use background GC policy and default JIT threshold. ",
    "links" : [ ]
  }, {
    "name" : "REQUEST_DIRECT_ACTIONS_RETRY_TIME_MS",
    "type" : "long",
    "comment" : " The delay time for retrying to request DirectActions. ",
    "links" : [ ]
  }, {
    "name" : "REQUEST_DIRECT_ACTIONS_RETRY_MAX_COUNT",
    "type" : "int",
    "comment" : " The max count for retrying to request DirectActions. ",
    "links" : [ ]
  }, {
    "name" : "INVALID_PROC_STATE_SEQ",
    "type" : "long",
    "comment" : "\n     * Denotes an invalid sequence number corresponding to a process state change.\n     ",
    "links" : [ ]
  }, {
    "name" : "PROC_START_SEQ_IDENT",
    "type" : "String",
    "comment" : "\n     * Identifier for the sequence no. associated with this process start. It will be provided\n     * as one of the arguments when the process starts.\n     ",
    "links" : [ ]
  }, {
    "name" : "mNetworkPolicyLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_FULL_BACKUP_AGENT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BINDER_CALLBACK_THROTTLE",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBinderCallbackLast",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNetworkBlockSeq",
    "type" : "long",
    "comment" : "\n     * Denotes the sequence number of the process state change for which the main thread needs\n     * to block until the network rules are updated for it.\n     *\n     * Value of {@link #INVALID_PROC_STATE_SEQ} indicates there is no need for blocking.\n     ",
    "links" : [ "#INVALID_PROC_STATE_SEQ" ]
  }, {
    "name" : "mSystemContext",
    "type" : "ContextImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDisplaySystemUiContexts",
    "type" : "ArrayList<WeakReference<ContextImpl>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sPackageManager",
    "type" : "IPackageManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sPermissionManager",
    "type" : "IPermissionManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAppThread",
    "type" : "ApplicationThread",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLooper",
    "type" : "Looper",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mH",
    "type" : "H",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExecutor",
    "type" : "Executor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mActivities",
    "type" : "ArrayMap<IBinder, ActivityClientRecord>",
    "comment" : "\n     * Maps from activity token to local record of running activities in this process.\n     *\n     * This variable is readable if the code is running in activity thread or holding {@link\n     * #mResourcesManager}. It's only writable if the code is running in activity thread and holding\n     * {@link #mResourcesManager}.\n     ",
    "links" : [ "#mResourcesManager" ]
  }, {
    "name" : "mPendingOverrideConfigs",
    "type" : "ArrayMap<IBinder, Configuration>",
    "comment" : " Maps from activity token to the pending override configuration. ",
    "links" : [ ]
  }, {
    "name" : "mPendingAppInfoUpdates",
    "type" : "ArrayMap<String, ApplicationInfo>",
    "comment" : "\n     * A queue of pending ApplicationInfo updates. In case when we get a concurrent update\n     * this queue allows us to only apply the latest object, and it can be applied on demand\n     * instead of waiting for the handler thread to reach the scheduled callback.\n     ",
    "links" : [ ]
  }, {
    "name" : "mActivitiesToBeDestroyed",
    "type" : "Map<IBinder, DestroyActivityItem>",
    "comment" : " The activities to be truly destroyed (not include relaunch). ",
    "links" : [ ]
  }, {
    "name" : "mNewActivities",
    "type" : "ArrayList<ActivityClientRecord>",
    "comment" : " List of new activities that should be reported when next we idle.",
    "links" : [ ]
  }, {
    "name" : "mNumVisibleActivities",
    "type" : "int",
    "comment" : " Number of activities that are currently visible on-screen.",
    "links" : [ ]
  }, {
    "name" : "mNumLaunchingActivities",
    "type" : "AtomicInteger",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLastProcessState",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLastAssistStructures",
    "type" : "ArrayList<WeakReference<AssistStructure>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConfigurationChangedListenerController",
    "type" : "ConfigurationChangedListenerController",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLastSessionId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLastReportedDeviceId",
    "type" : "int",
    "comment" : " Holds the value of the last reported device ID value from the server for the top activity.",
    "links" : [ ]
  }, {
    "name" : "mServicesData",
    "type" : "ArrayMap<IBinder, CreateServiceData>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mServices",
    "type" : "ArrayMap<IBinder, Service>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBoundApplication",
    "type" : "AppBindData",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProfiler",
    "type" : "Profiler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCurDefaultDisplayDpi",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDensityCompatMode",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCompatibilityInfo",
    "type" : "CompatibilityInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConfiguration",
    "type" : "Configuration",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUpdateHttpProxyOnBind",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInitialApplication",
    "type" : "Application",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAllApplications",
    "type" : "ArrayList<Application>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBackupAgentsByUser",
    "type" : "SparseArray<ArrayMap<String, BackupAgent>>",
    "comment" : "\n     * Bookkeeping of instantiated backup agents indexed first by user id, then by package name.\n     * Indexing by user id supports parallel backups across users on system packages as they run in\n     * the same process with the same package name. Indexing by package name supports multiple\n     * distinct applications running in the same process.\n     ",
    "links" : [ ]
  }, {
    "name" : "sCurrentActivityThread",
    "type" : "ActivityThread",
    "comment" : " Reference to singleton {@link ActivityThread} ",
    "links" : [ "android.app.ActivityThread" ]
  }, {
    "name" : "mInstrumentation",
    "type" : "Instrumentation",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInstrumentationPackageName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInstrumentationAppDir",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInstrumentationSplitAppDirs",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInstrumentationLibDir",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInstrumentedAppDir",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInstrumentedSplitAppDirs",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInstrumentedLibDir",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInstrumentingWithoutRestart",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSystemThread",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSomeActivitiesChanged",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPackages",
    "type" : "ArrayMap<String, WeakReference<LoadedApk>>",
    "comment" : " These LoadedApk are only valid for the userId that we're running as.",
    "links" : [ ]
  }, {
    "name" : "mResourcePackages",
    "type" : "ArrayMap<String, WeakReference<LoadedApk>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRelaunchingActivities",
    "type" : "ArrayList<ActivityClientRecord>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPendingConfiguration",
    "type" : "Configuration",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTransactionExecutor",
    "type" : "TransactionExecutor",
    "comment" : " An executor that performs multi-step transactions.",
    "links" : [ ]
  }, {
    "name" : "mResourcesManager",
    "type" : "ResourcesManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRemoteCancellations",
    "type" : "Map<SafeCancellationTransport, CancellationSignal>",
    "comment" : " Registry of remote cancellation transports pending a reply with reply handles.",
    "links" : [ ]
  }, {
    "name" : "mProviderMap",
    "type" : "ArrayMap<ProviderKey, ProviderClientRecord>",
    "comment" : " The lock of mProviderMap protects the following variables.",
    "links" : [ ]
  }, {
    "name" : "mProviderRefCountMap",
    "type" : "ArrayMap<IBinder, ProviderRefCount>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLocalProviders",
    "type" : "ArrayMap<IBinder, ProviderClientRecord>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLocalProvidersByName",
    "type" : "ArrayMap<ComponentName, ProviderClientRecord>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGetProviderKeys",
    "type" : "ArrayMap<ProviderKey, ProviderKey>",
    "comment" : " users and so many authorities.",
    "links" : [ ]
  }, {
    "name" : "mOnPauseListeners",
    "type" : "ArrayMap<Activity, ArrayList<OnActivityPausedListener>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSplashScreenGlobal",
    "type" : "SplashScreen.SplashScreenManagerGlobal",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGcIdler",
    "type" : "GcIdler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPurgeIdler",
    "type" : "PurgeIdler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPurgeIdlerScheduled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGcIdlerScheduled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sMainThreadHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStartSeq",
    "type" : "long",
    "comment" : " Only accesssed from the main thread",
    "links" : [ ]
  }, {
    "name" : "mCoreSettings",
    "type" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCoreSettingsLock",
    "type" : "Object",
    "comment" : "\n     * The lock word for the {@link #mCoreSettings}.\n     ",
    "links" : [ "#mCoreSettings" ]
  }, {
    "name" : "mContentCaptureOptionsCallback",
    "type" : "IContentCaptureOptionsCallback.Stub",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConfigurationController",
    "type" : "ConfigurationController",
    "comment" : " A client side controller to handle process level configuration changes. ",
    "links" : [ ]
  }, {
    "name" : "HEAP_FULL_COLUMN",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HEAP_COLUMN",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ONE_COUNT_COLUMN",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TWO_COUNT_COLUMNS",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "THREE_COUNT_COLUMNS",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TWO_COUNT_COLUMN_HEADER",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ONE_ALT_COUNT_COLUMN",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ACTIVITY_THREAD_CHECKIN_VERSION",
    "type" : "int",
    "comment" : " Formatting for checkin service - update version if row format changes",
    "links" : [ ]
  }, {
    "name" : "sCurrentBroadcastIntent",
    "type" : "ThreadLocal<Intent>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private SafeCancellationTransport createSafeCancellationTransport(@NonNull CancellationSignal cancellationSignal)",
    "returnType" : "SafeCancellationTransport",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private CancellationSignal removeSafeCancellationTransport(@NonNull SafeCancellationTransport transport)",
    "returnType" : "CancellationSignal",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void throwRemoteServiceException(String message, int typeId, @Nullable Bundle extras)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private ForegroundServiceDidNotStartInTimeException generateForegroundServiceDidNotStartInTimeException(String message, Bundle extras)",
    "returnType" : "ForegroundServiceDidNotStartInTimeException",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private ForegroundServiceDidNotStopInTimeException generateForegroundServiceDidNotStopInTimeException(String message, Bundle extras)",
    "returnType" : "ForegroundServiceDidNotStopInTimeException",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static ActivityThread currentActivityThread()",
    "returnType" : "ActivityThread",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static boolean isSystem()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String currentOpPackageName()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static AttributionSource currentAttributionSource()",
    "returnType" : "AttributionSource",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String currentPackageName()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String currentProcessName()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static Application currentApplication()",
    "returnType" : "Application",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static IPackageManager getPackageManager()",
    "returnType" : "IPackageManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static IPermissionManager getPermissionManager()",
    "returnType" : "IPermissionManager",
    "comment" : " Returns the permission manager ",
    "links" : [ ]
  }, {
    "name" : " Resources getTopLevelResources(String resDir, String[] splitResDirs, String[] legacyOverlayDirs, String[] overlayPaths, String[] libDirs, LoadedApk pkgInfo, Configuration overrideConfig)",
    "returnType" : "Resources",
    "comment" : "\n     * Creates the top level resources for the given package. Will return an existing\n     * Resources if one has already been created.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Handler getHandler()",
    "returnType" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final LoadedApk getPackageInfo(String packageName, CompatibilityInfo compatInfo, int flags)",
    "returnType" : "LoadedApk",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final LoadedApk getPackageInfo(String packageName, CompatibilityInfo compatInfo, int flags, int userId)",
    "returnType" : "LoadedApk",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final LoadedApk getPackageInfo(ApplicationInfo ai, CompatibilityInfo compatInfo, int flags)",
    "returnType" : "LoadedApk",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final LoadedApk getPackageInfoNoCheck(ApplicationInfo ai, CompatibilityInfo compatInfo)",
    "returnType" : "LoadedApk",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public LoadedApk getPackageInfoNoCheck(ApplicationInfo ai)",
    "returnType" : "LoadedApk",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final LoadedApk peekPackageInfo(String packageName, boolean includeCode)",
    "returnType" : "LoadedApk",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private LoadedApk getPackageInfo(ApplicationInfo aInfo, CompatibilityInfo compatInfo, ClassLoader baseLoader, boolean securityViolation, boolean includeCode, boolean registerPackage)",
    "returnType" : "LoadedApk",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private LoadedApk getPackageInfo(ApplicationInfo aInfo, CompatibilityInfo compatInfo, ClassLoader baseLoader, boolean securityViolation, boolean includeCode, boolean registerPackage, boolean isSdkSandbox)",
    "returnType" : "LoadedApk",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isLoadedApkResourceDirsUpToDate(LoadedApk loadedApk, ApplicationInfo appInfo)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ApplicationThread getApplicationThread()",
    "returnType" : "ApplicationThread",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Instrumentation getInstrumentation()",
    "returnType" : "Instrumentation",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isProfiling()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getProfileFilePath()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Looper getLooper()",
    "returnType" : "Looper",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Executor getExecutor()",
    "returnType" : "Executor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Application getApplication()",
    "returnType" : "Application",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getProcessName()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ContextImpl getSystemContext()",
    "returnType" : "ContextImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ContextImpl getSystemUiContext()",
    "returnType" : "ContextImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ContextImpl getSystemUiContext(int displayId)",
    "returnType" : "ContextImpl",
    "comment" : "\n     * Gets the context instance base on system resources & display information which used for UI.\n     * @param displayId The ID of the display where the UI is shown.\n     * @see ContextImpl#createSystemUiContext(ContextImpl, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public ContextImpl getSystemUiContextNoCreate()",
    "returnType" : "ContextImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private ContextImpl getSystemUiContextNoCreateLocked(int displayId)",
    "returnType" : "ContextImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void onSystemUiContextCleanup(ContextImpl context)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void installSystemApplicationInfo(ApplicationInfo info, ClassLoader classLoader)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void scheduleGcIdler()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void unscheduleGcIdler()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void schedulePurgeIdler()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void unschedulePurgeIdler()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void doGcIfNeeded()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void doGcIfNeeded(String reason)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void printRow(PrintWriter pw, String format, Object... objs)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void dumpMemInfoTable(PrintWriter pw, Debug.MemoryInfo memInfo, boolean checkin, boolean dumpFullInfo, boolean dumpDalvik, boolean dumpSummaryOnly, int pid, String processName, long nativeMax, long nativeAllocated, long nativeFree, long dalvikMax, long dalvikAllocated, long dalvikFree)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void dumpMemoryInfo(ProtoOutputStream proto, long fieldId, String name, int pss, int cleanPss, int sharedDirty, int privateDirty, int sharedClean, int privateClean, boolean hasSwappedOutPss, int dirtySwap, int dirtySwapPss, int rss)",
    "returnType" : "void",
    "comment" : "\n     * Dump heap info to proto.\n     *\n     * @param hasSwappedOutPss determines whether to use dirtySwap or dirtySwapPss\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void dumpMemInfoTable(ProtoOutputStream proto, Debug.MemoryInfo memInfo, boolean dumpDalvik, boolean dumpSummaryOnly, long nativeMax, long nativeAllocated, long nativeFree, long dalvikMax, long dalvikAllocated, long dalvikFree)",
    "returnType" : "void",
    "comment" : "\n     * Dump mem info data to proto.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void registerOnActivityPausedListener(Activity activity, OnActivityPausedListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void unregisterOnActivityPausedListener(Activity activity, OnActivityPausedListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final ActivityInfo resolveActivityInfo(Intent intent)",
    "returnType" : "ActivityInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final Activity startActivityNow(Activity parent, String id, Intent intent, ActivityInfo activityInfo, IBinder token, Bundle state, Activity.NonConfigurationInstances lastNonConfigurationInstances, IBinder assistToken, IBinder shareableActivityToken)",
    "returnType" : "Activity",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final Activity getActivity(IBinder token)",
    "returnType" : "Activity",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ActivityClientRecord getActivityClient(IBinder token)",
    "returnType" : "ActivityClientRecord",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Configuration getConfiguration()",
    "returnType" : "Configuration",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addConfigurationChangedListener(Executor executor, Consumer<IBinder> consumer)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removeConfigurationChangedListener(Consumer<IBinder> consumer)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void updatePendingConfiguration(Configuration config)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void updateProcessState(int processState, boolean fromIpc)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateVmProcessState(int processState)",
    "returnType" : "void",
    "comment" : " this function initiates a Transitional GC for transitions into Cached apps states.",
    "links" : [ ]
  }, {
    "name" : "public void countLaunchingActivities(int num)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void sendActivityResult(IBinder activityToken, String id, int requestCode, int resultCode, Intent data)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " TransactionExecutor getTransactionExecutor()",
    "returnType" : "TransactionExecutor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void sendMessage(int what, Object obj)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void sendMessage(int what, Object obj, int arg1)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void sendMessage(int what, Object obj, int arg1, int arg2)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void sendMessage(int what, Object obj, int arg1, int arg2, boolean async)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final void scheduleContextCleanup(ContextImpl context, String who, String what)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Activity performLaunchActivity(ActivityClientRecord r, Intent customIntent)",
    "returnType" : "Activity",
    "comment" : "  Core implementation of activity launch. ",
    "links" : [ ]
  }, {
    "name" : "public void handleStartActivity(ActivityClientRecord r, PendingTransactionActions pendingActions, SceneTransitionInfo sceneTransitionInfo)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void checkAndBlockForNetworkAccess()",
    "returnType" : "void",
    "comment" : "\n     * Checks if {@link #mNetworkBlockSeq} is {@link #INVALID_PROC_STATE_SEQ} and if so, returns\n     * immediately. Otherwise, makes a blocking call to ActivityManagerService to wait for the\n     * network rules to get updated.\n     ",
    "links" : [ "#mNetworkBlockSeq", "#INVALID_PROC_STATE_SEQ" ]
  }, {
    "name" : "private ContextImpl createBaseContextForActivity(ActivityClientRecord r)",
    "returnType" : "ContextImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private ContextImpl createBaseContextForSandboxActivity(@NonNull ActivityClientRecord r)",
    "returnType" : "ContextImpl",
    "comment" : "\n     * Creates the base context for the sandbox activity based on its corresponding SDK {@link\n     * ApplicationInfo} and flags.\n     ",
    "links" : [ "android.content.pm.ApplicationInfo" ]
  }, {
    "name" : "public Activity handleLaunchActivity(ActivityClientRecord r, PendingTransactionActions pendingActions, int deviceId, Intent customIntent)",
    "returnType" : "Activity",
    "comment" : "\n     * Extended implementation of activity launch. Used when server requests a launch or relaunch.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void reportSizeConfigurations(ActivityClientRecord r)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void deliverNewIntents(ActivityClientRecord r, List<ReferrerIntent> intents)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void handleNewIntent(ActivityClientRecord r, List<ReferrerIntent> intents)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void handleRequestAssistContextExtras(RequestAssistContextExtras cmd)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleRequestDirectActions(@NonNull IBinder activityToken, @NonNull IVoiceInteractor interactor, @NonNull CancellationSignal cancellationSignal, @NonNull RemoteCallback callback, int retryCount)",
    "returnType" : "void",
    "comment" : " Fetches the user actions for the corresponding activity ",
    "links" : [ ]
  }, {
    "name" : "private void handlePerformDirectAction(@NonNull IBinder activityToken, @NonNull String actionId, @Nullable Bundle arguments, @NonNull CancellationSignal cancellationSignal, @NonNull RemoteCallback resultCallback)",
    "returnType" : "void",
    "comment" : " Performs an actions in the corresponding activity ",
    "links" : [ ]
  }, {
    "name" : "public void handleTranslucentConversionComplete(IBinder token, boolean drawComplete)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onNewSceneTransitionInfo(IBinder token, SceneTransitionInfo info)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void handleInstallProvider(ProviderInfo info)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleEnterAnimationComplete(IBinder token)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleStartBinderTracking()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleStopBinderTrackingAndDump(ParcelFileDescriptor fd)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void handlePictureInPictureRequested(ActivityClientRecord r)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void handlePictureInPictureStateChanged(@NonNull ActivityClientRecord r, PictureInPictureUiState pipState)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void registerSplashScreenManager(@NonNull SplashScreen.SplashScreenManagerGlobal manager)",
    "returnType" : "void",
    "comment" : "\n     * Register a splash screen manager to this process.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isHandleSplashScreenExit(@NonNull IBinder token)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void handleAttachSplashScreenView(@NonNull ActivityClientRecord r, @Nullable SplashScreenView.SplashScreenViewParcelable parcelable, @NonNull SurfaceControl startingWindowLeash)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void createSplashScreen(ActivityClientRecord r, DecorView decorView, SplashScreenView.SplashScreenViewParcelable parcelable, @NonNull SurfaceControl startingWindowLeash)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void reportSplashscreenViewShown(IBinder token, SplashScreenView view)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void syncTransferSplashscreenViewTransaction(SplashScreenView view, IBinder token, View decorView, @NonNull SurfaceControl startingWindowLeash)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void schedulePauseWithUserLeaveHintAndReturnToCurrentState(ActivityClientRecord r)",
    "returnType" : "void",
    "comment" : "\n     * Cycle activity through onPause and onUserLeaveHint so that PIP is entered if supported, then\n     * return to its previous state. This allows activities that rely on onUserLeaveHint instead of\n     * onPictureInPictureRequested to enter picture-in-picture.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void schedulePauseWithUserLeavingHint(ActivityClientRecord r)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void scheduleResume(ActivityClientRecord r)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleLocalVoiceInteractionStarted(IBinder token, IVoiceInteractor interactor)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean attemptAttachAgent(String agent, ClassLoader classLoader)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void handleAttachAgent(String agent, LoadedApk loadedApk)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void handleAttachStartupAgents(String dataDir)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateUiTranslationState(IBinder activityToken, int state, TranslationSpec sourceSpec, TranslationSpec targetSpec, List<AutofillId> viewIds, UiTranslationSpec uiTranslationSpec)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static Intent getIntentBeingBroadcast()",
    "returnType" : "Intent",
    "comment" : "\n     * Return the Intent that's currently being handled by a\n     * BroadcastReceiver on this thread, or null if none.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void handleReceiver(ReceiverData data)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleCreateBackupAgent(CreateBackupAgentData data)",
    "returnType" : "void",
    "comment" : " Instantiate a BackupAgent and tell it that it's alive",
    "links" : [ ]
  }, {
    "name" : "private static int getOperationTypeFromBackupMode(int backupMode)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String getBackupAgentName(CreateBackupAgentData data)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleDestroyBackupAgent(CreateBackupAgentData data)",
    "returnType" : "void",
    "comment" : " Tear down a BackupAgent",
    "links" : [ ]
  }, {
    "name" : "private ArrayMap<String, BackupAgent> getBackupAgentsForUser(int userId)",
    "returnType" : "ArrayMap<String, BackupAgent>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleCreateService(CreateServiceData data)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleBindService(BindServiceData data)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleUnbindService(BindServiceData data)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleDumpGfxInfo(DumpComponentInfo info)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleDumpService(DumpComponentInfo info)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleDumpResources(DumpResourcesData info)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleDumpActivity(DumpComponentInfo info)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleDumpProvider(DumpComponentInfo info)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleServiceArgs(ServiceArgsData data)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleStopService(IBinder token)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleTimeoutService(IBinder token, int startId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleTimeoutServiceForType(IBinder token, int startId, @ServiceInfo.ForegroundServiceType int fgsType)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean performResumeActivity(ActivityClientRecord r, boolean finalStateRequest, String reason)",
    "returnType" : "boolean",
    "comment" : "\n     * Resume the activity.\n     * @param r Target activity record.\n     * @param finalStateRequest Flag indicating if this is part of final state resolution for a\n     *                          transaction.\n     * @param reason Reason for performing the action.\n     *\n     * @return {@code true} that was resumed, {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : " static final void cleanUpPendingRemoveWindows(ActivityClientRecord r, boolean force)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void handleResumeActivity(ActivityClientRecord r, boolean finalStateRequest, boolean isForward, boolean shouldSendCompatFakeFocus, String reason)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void handleTopResumedActivityChanged(ActivityClientRecord r, boolean onTop, String reason)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void reportTopResumedActivityChanged(ActivityClientRecord r, boolean onTop, String reason)",
    "returnType" : "void",
    "comment" : "\n     * Call {@link Activity#onTopResumedActivityChanged(boolean)} if its top resumed state changed\n     * since the last report.\n     ",
    "links" : [ "android.app.Activity#onTopResumedActivityChanged(boolean)" ]
  }, {
    "name" : "public void handlePauseActivity(ActivityClientRecord r, boolean finished, boolean userLeaving, boolean autoEnteringPip, PendingTransactionActions pendingActions, String reason)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final void performUserLeavingActivity(ActivityClientRecord r)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final Bundle performPauseActivity(IBinder token, boolean finished, String reason, PendingTransactionActions pendingActions)",
    "returnType" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Bundle performPauseActivity(ActivityClientRecord r, boolean finished, String reason, PendingTransactionActions pendingActions)",
    "returnType" : "Bundle",
    "comment" : "\n     * Pause the activity.\n     * @return Saved instance state for pre-Honeycomb apps if it was saved, {@code null} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void performPauseActivityIfNeeded(ActivityClientRecord r, String reason)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final void performStopActivity(IBinder token, boolean saveState, String reason)",
    "returnType" : "void",
    "comment" : " Called from {@link LocalActivityManager}. ",
    "links" : [ "android.app.LocalActivityManager" ]
  }, {
    "name" : "private void performStopActivityInner(ActivityClientRecord r, StopInfo info, boolean saveState, boolean finalStateRequest, String reason)",
    "returnType" : "void",
    "comment" : "\n     * Core implementation of stopping an activity.\n     * @param r Target activity client record.\n     * @param info Action that will report activity stop to server.\n     * @param saveState Flag indicating whether the activity state should be saved.\n     * @param finalStateRequest Flag indicating if this call is handling final lifecycle state\n     *                          request for a transaction.\n     * @param reason Reason for performing this operation.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void callActivityOnStop(ActivityClientRecord r, boolean saveState, String reason)",
    "returnType" : "void",
    "comment" : "\n     * Calls {@link Activity#onStop()} and {@link Activity#onSaveInstanceState(Bundle)}, and updates\n     * the client record's state.\n     * All calls to stop an activity must be done through this method to make sure that\n     * {@link Activity#onSaveInstanceState(Bundle)} is also executed in the same call.\n     ",
    "links" : [ "android.app.Activity#onSaveInstanceState(Bundle)", "android.app.Activity#onStop()" ]
  }, {
    "name" : "private void updateVisibility(ActivityClientRecord r, boolean show)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void handleStopActivity(ActivityClientRecord r, PendingTransactionActions pendingActions, boolean finalStateRequest, String reason)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void reportStop(PendingTransactionActions pendingActions)",
    "returnType" : "void",
    "comment" : "\n     * Schedule the call to tell the activity manager we have stopped.  We don't do this\n     * immediately, because we want to have a chance for any other pending work (in particular\n     * memory trim requests) to complete before you tell the activity manager to proceed and allow\n     * us to go fully into the background.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void performRestartActivity(ActivityClientRecord r, boolean start)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void reportRefresh(ActivityClientRecord r)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleSetCoreSettings(Bundle coreSettings)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onCoreSettingsChange()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean updateDebugViewAttributeState()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void relaunchAllActivities(boolean preserveWindows, String reason)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleUpdatePackageCompatibilityInfo(UpdateCompatibilityData data)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void deliverResults(ActivityClientRecord r, List<ResultInfo> results, String reason)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void handleSendResult(ActivityClientRecord r, List<ResultInfo> results, String reason)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void performDestroyActivity(ActivityClientRecord r, boolean finishing, boolean getNonConfigInstance, String reason)",
    "returnType" : "void",
    "comment" : " Core implementation of activity destroy call. ",
    "links" : [ ]
  }, {
    "name" : "private static String safeToComponentShortString(Intent intent)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Map<IBinder, DestroyActivityItem> getActivitiesToBeDestroyed()",
    "returnType" : "Map<IBinder, DestroyActivityItem>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void handleDestroyActivity(ActivityClientRecord r, boolean finishing, boolean getNonConfigInstance, String reason)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ActivityClientRecord prepareRelaunchActivity(@NonNull IBinder token, @Nullable List<ResultInfo> pendingResults, @Nullable List<ReferrerIntent> pendingNewIntents, int configChanges, @NonNull MergedConfiguration config, boolean preserveWindow, @NonNull ActivityWindowInfo activityWindowInfo)",
    "returnType" : "ActivityClientRecord",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void handleRelaunchActivity(@NonNull ActivityClientRecord tmp, @NonNull PendingTransactionActions pendingActions)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void scheduleRelaunchActivity(IBinder token)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void scheduleRelaunchActivityIfPossible(@NonNull ActivityClientRecord r, boolean preserveWindow)",
    "returnType" : "void",
    "comment" : "\n     * Post a message to relaunch the activity. We do this instead of launching it immediately,\n     * because this will destroy the activity from which it was called and interfere with the\n     * lifecycle changes it was going through before. We need to make sure that we have finished\n     * handling current transaction item before relaunching the activity.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void handleRelaunchActivityLocally(IBinder token)",
    "returnType" : "void",
    "comment" : " Performs the activity relaunch locally vs. requesting from system-server. ",
    "links" : [ ]
  }, {
    "name" : "private void handleRelaunchActivityInner(@NonNull ActivityClientRecord r, @Nullable List<ResultInfo> pendingResults, @Nullable List<ReferrerIntent> pendingIntents, @NonNull PendingTransactionActions pendingActions, boolean startsNotResumed, @NonNull Configuration overrideConfig, @NonNull ActivityWindowInfo activityWindowInfo, @NonNull String reason)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void reportRelaunch(ActivityClientRecord r)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void callActivityOnSaveInstanceState(ActivityClientRecord r)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ArrayList<ComponentCallbacks2> collectComponentCallbacks(boolean includeUiContexts)",
    "returnType" : "ArrayList<ComponentCallbacks2>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Configuration performConfigurationChangedForActivity(ActivityClientRecord r, Configuration newBaseConfig, int displayId, boolean alwaysReportChange)",
    "returnType" : "Configuration",
    "comment" : "\n     * Updates the configuration for an Activity. The ActivityClientRecord's\n     * {@link ActivityClientRecord#overrideConfig} is used to compute the final Configuration for\n     * that Activity. {@link ActivityClientRecord#tmpConfig} is used as a temporary for delivering\n     * the updated Configuration.\n     * @param r ActivityClientRecord representing the Activity.\n     * @param newBaseConfig The new configuration to use. This may be augmented with\n     *                      {@link ActivityClientRecord#overrideConfig}.\n     * @param displayId The id of the display where the Activity currently resides.\n     * @return {@link Configuration} instance sent to client, null if not sent.\n     ",
    "links" : [ "#overrideConfig", "android.content.res.Configuration", "#tmpConfig" ]
  }, {
    "name" : "private Configuration performActivityConfigurationChanged(ActivityClientRecord r, Configuration newConfig, Configuration amOverrideConfig, int displayId, boolean alwaysReportChange)",
    "returnType" : "Configuration",
    "comment" : "\n     * Decides whether to update an Activity's configuration and whether to inform it.\n     * @param r The activity client record to notify of configuration change.\n     * @param newConfig The new configuration.\n     * @param amOverrideConfig The override config that differentiates the Activity's configuration\n     *                         from the base global configuration. This is supplied by\n     *                         ActivityManager.\n     * @param displayId Id of the display where activity currently resides.\n     * @return Configuration sent to client, null if no changes and not moved to different display.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean onlyDeskInUiModeChanged(Configuration oldConfig, Configuration newConfig)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the uiMode configuration changed, and desk mode\n     * ({@link android.content.res.Configuration#UI_MODE_TYPE_DESK}) was the only change to uiMode.\n     ",
    "links" : [ "android.content.res.Configuration#UI_MODE_TYPE_DESK" ]
  }, {
    "name" : "private static boolean isInDeskUiMode(Configuration config)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static boolean shouldReportChange(@Nullable Configuration currentConfig, @NonNull Configuration newConfig, @Nullable SizeConfigurationBuckets sizeBuckets, int handledConfigChanges, boolean alwaysReportChange)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if {@link Activity#onConfigurationChanged(Configuration)} should be\n     * dispatched.\n     *\n     * @param currentConfig The current configuration cached in {@link Activity#mCurrentConfig}.\n     *                      It is {@code null} before the first config update from the server side.\n     * @param newConfig The updated {@link Configuration}\n     * @param sizeBuckets The Activity's {@link SizeConfigurationBuckets} if not {@code null}\n     * @param handledConfigChanges Bit mask of configuration changes that the activity can handle\n     * @return {@code true} if the config change should be reported to the Activity\n     ",
    "links" : [ "android.content.res.Configuration", "android.app.Activity#mCurrentConfig", "android.window.SizeConfigurationBuckets", "android.app.Activity#onConfigurationChanged(Configuration)" ]
  }, {
    "name" : "public final void applyConfigurationToResources(Configuration config)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateDeviceIdForNonUIContexts(int deviceId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void handleConfigurationChanged(Configuration config, int deviceId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void handleWindowContextInfoChanged(@NonNull IBinder clientToken, @NonNull WindowContextInfo info)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void handleWindowContextWindowRemoval(@NonNull IBinder clientToken)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleWindowingModeChangeIfNeeded(ActivityClientRecord r, Configuration newConfiguration)",
    "returnType" : "void",
    "comment" : "\n     * Sends windowing mode change callbacks to {@link Activity} if applicable.\n     *\n     * See also {@link Activity#onMultiWindowModeChanged(boolean, Configuration)} and\n     * {@link Activity#onPictureInPictureModeChanged(boolean, Configuration)}\n     ",
    "links" : [ "android.app.Activity#onMultiWindowModeChanged(boolean", "android.app.Activity#onPictureInPictureModeChanged(boolean", "android.app.Activity" ]
  }, {
    "name" : "private void applyPendingApplicationInfoChanges(String packageName)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void handleSystemApplicationInfoChanged(@NonNull ApplicationInfo ai)",
    "returnType" : "void",
    "comment" : "\n     * Updates the application info.\n     *\n     * This only works in the system process. Must be called on the main thread.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void handleApplicationInfoChanged(@NonNull final ApplicationInfo ai)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void updatePendingActivityConfiguration(@NonNull IBinder token, @NonNull Configuration overrideConfig)",
    "returnType" : "void",
    "comment" : "\n     * Sets the supplied {@code overrideConfig} as pending for the {@code token}. Calling\n     * this method prevents any calls to\n     * {@link #handleActivityConfigurationChanged(ActivityClientRecord, Configuration, int,\n     * ActivityWindowInfo)} from processing any configurations older than {@code overrideConfig}.\n     ",
    "links" : [ "#handleActivityConfigurationChanged(ActivityClientRecord" ]
  }, {
    "name" : "public void handleActivityConfigurationChanged(@NonNull ActivityClientRecord r, @NonNull Configuration overrideConfig, int displayId, @NonNull ActivityWindowInfo activityWindowInfo)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void handleActivityConfigurationChanged(@NonNull ActivityClientRecord r, @NonNull Configuration overrideConfig, int displayId, @NonNull ActivityWindowInfo activityWindowInfo, boolean alwaysReportChange)",
    "returnType" : "void",
    "comment" : "\n     * Handle new activity configuration and/or move to a different display. This method is a noop\n     * if {@link #updatePendingActivityConfiguration(IBinder, Configuration)} has been\n     * called with a newer config than {@code overrideConfig}.\n     *\n     * @param r Target activity record.\n     * @param overrideConfig Activity override config.\n     * @param displayId Id of the display where activity was moved to, -1 if there was no move and\n     *                  value didn't change.\n     * @param activityWindowInfo the window info of the given activity.\n     ",
    "links" : [ "#updatePendingActivityConfiguration(IBinder" ]
  }, {
    "name" : "private void handleActivityConfigurationChangedInner(@NonNull ActivityClientRecord r, @NonNull Configuration overrideConfig, int displayId, @NonNull ActivityWindowInfo activityWindowInfo, boolean alwaysReportChange)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleActivityWindowInfoChanged(@NonNull ActivityClientRecord r)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final void handleProfilerControl(boolean start, ProfilerInfo profilerInfo, int profileType)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void stopProfiling()",
    "returnType" : "void",
    "comment" : "\n     * Public entrypoint to stop profiling. This is required to end profiling when the app crashes,\n     * so that profiler data won't be lost.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " static void handleDumpHeap(DumpHeapData dhd)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final void handleDispatchPackageBroadcast(int cmd, String[] packages)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final void handleLowMemory()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleTrimMemory(int level)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setupGraphicsSupport(Context context)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String getInstrumentationLibrary(ApplicationInfo appInfo, InstrumentationInfo insInfo)",
    "returnType" : "String",
    "comment" : "\n     * Returns the correct library directory for the current ABI.\n     * <p>\n     * If we're dealing with a multi-arch application that has both 32 and 64 bit shared\n     * libraries, we might need to choose the secondary depending on what the current\n     * runtime's instruction set is.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void handleBindApplication(AppBindData data)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void waitForDebugger(AppBindData data)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void suspendAllAndSendVmStart(AppBindData data)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void initZipPathValidatorCallback()",
    "returnType" : "void",
    "comment" : "\n     * If targetSDK >= U: set the safe zip path validator callback which disallows dangerous zip\n     * entry names.\n     * Otherwise: clear the callback to the default validation.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void handleSetContentCaptureOptionsCallback(String packageName)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleInstrumentWithoutRestart(AppBindData data)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private InstrumentationInfo prepareInstrumentation(AppBindData data)",
    "returnType" : "InstrumentationInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void initInstrumentation(InstrumentationInfo ii, AppBindData data, ContextImpl appContext)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleFinishInstrumentationWithoutRestart()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final void finishInstrumentation(int resultCode, Bundle results)",
    "returnType" : "void",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : "private void installContentProviders(Context context, List<ProviderInfo> providers)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final IContentProvider acquireProvider(Context c, String auth, int userId, boolean stable)",
    "returnType" : "IContentProvider",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private ProviderKey getGetProviderKey(String auth, int userId)",
    "returnType" : "ProviderKey",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final void incProviderRefLocked(ProviderRefCount prc, boolean stable)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final IContentProvider acquireExistingProvider(Context c, String auth, int userId, boolean stable)",
    "returnType" : "IContentProvider",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final boolean releaseProvider(IContentProvider provider, boolean stable)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final void completeRemoveProvider(ProviderRefCount prc)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final void handleUnstableProviderDied(IBinder provider, boolean fromClient)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final void handleUnstableProviderDiedLocked(IBinder provider, boolean fromClient)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final void appNotRespondingViaProvider(IBinder provider)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private ProviderClientRecord installProviderAuthoritiesLocked(IContentProvider provider, ContentProvider localProvider, ContentProviderHolder holder)",
    "returnType" : "ProviderClientRecord",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private ContentProviderHolder installProvider(Context context, ContentProviderHolder holder, ProviderInfo info, boolean noisy, boolean noReleaseNeeded, boolean stable)",
    "returnType" : "ContentProviderHolder",
    "comment" : "\n     * Installs the provider.\n     *\n     * Providers that are local to the process or that come from the system server\n     * may be installed permanently which is indicated by setting noReleaseNeeded to true.\n     * Other remote providers are reference counted.  The initial reference count\n     * for all reference counted providers is one.  Providers that are not reference\n     * counted do not have a reference count (at all).\n     *\n     * This method detects when a provider has already been installed.  When this happens,\n     * it increments the reference count of the existing provider (if appropriate)\n     * and returns the existing provider.  This can happen due to concurrent\n     * attempts to acquire the same provider.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void handleRunIsolatedEntryPoint(String entryPoint, String[] entryPointArgs)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void attach(boolean system, long startSeq)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static ActivityThread systemMain()",
    "returnType" : "ActivityThread",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void updateHttpProxy(@NonNull Context context)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final void installSystemProviders(List<ProviderInfo> providers)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " Bundle getCoreSettings()",
    "returnType" : "Bundle",
    "comment" : "\n     * Caller should NEVER mutate the Bundle returned from here\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getIntCoreSetting(String key, int defaultValue)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getStringCoreSetting(String key, String defaultValue)",
    "returnType" : "String",
    "comment" : "\n     * Get the string value of the given key from core settings.\n     ",
    "links" : [ ]
  }, {
    "name" : " float getFloatCoreSetting(String key, float defaultValue)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void main(String[] args)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void initializeMainlineModules()",
    "returnType" : "void",
    "comment" : "\n     * Call various initializer APIs in mainline modules that need to be called when each process\n     * starts.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void purgePendingResources()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static boolean isProtectedComponent(@NonNull ActivityInfo ai)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the provided {@link ActivityInfo} {@code ai} is a protected component.\n     *\n     * @see #isProtectedComponent(ComponentInfo, String)\n     ",
    "links" : [ "android.content.pm.ActivityInfo" ]
  }, {
    "name" : "public static boolean isProtectedComponent(@NonNull ServiceInfo si)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the provided {@link ServiceInfo} {@code si} is a protected component.\n     *\n     * @see #isProtectedComponent(ComponentInfo, String)\n     ",
    "links" : [ "android.content.pm.ServiceInfo" ]
  }, {
    "name" : "private static boolean isProtectedComponent(@NonNull ComponentInfo ci, @Nullable String permission)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the provided {@link ComponentInfo} {@code ci} with the specified {@code\n     * permission} is a protected component.\n     *\n     * <p>A component is protected if it is not exported, or if the specified {@code permission} is\n     * a signature permission.\n     ",
    "links" : [ "android.content.pm.ComponentInfo" ]
  }, {
    "name" : "public static boolean isProtectedBroadcast(@NonNull Intent intent)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the action within the provided {@code intent} is a protected broadcast.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isInDensityCompatMode()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native void nPurgePendingResources()",
    "returnType" : "void",
    "comment" : " ------------------ Regular JNI ------------------------",
    "links" : [ ]
  }, {
    "name" : "private native void nInitZygoteChildHeapProfiling()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private SafeCancellationTransport createSafeCancellationTransport(@NonNull CancellationSignal cancellationSignal)", "private CancellationSignal removeSafeCancellationTransport(@NonNull SafeCancellationTransport transport)", "private void throwRemoteServiceException(String message, int typeId, @Nullable Bundle extras)", "private ForegroundServiceDidNotStartInTimeException generateForegroundServiceDidNotStartInTimeException(String message, Bundle extras)", "private ForegroundServiceDidNotStopInTimeException generateForegroundServiceDidNotStopInTimeException(String message, Bundle extras)", "public static ActivityThread currentActivityThread()", "public static boolean isSystem()", "public static String currentOpPackageName()", "public static AttributionSource currentAttributionSource()", "public static String currentPackageName()", "public static String currentProcessName()", "public static Application currentApplication()", "public static IPackageManager getPackageManager()", "public static IPermissionManager getPermissionManager()", " Resources getTopLevelResources(String resDir, String[] splitResDirs, String[] legacyOverlayDirs, String[] overlayPaths, String[] libDirs, LoadedApk pkgInfo, Configuration overrideConfig)", "public Handler getHandler()", "public final LoadedApk getPackageInfo(String packageName, CompatibilityInfo compatInfo, int flags)", "public final LoadedApk getPackageInfo(String packageName, CompatibilityInfo compatInfo, int flags, int userId)", "public final LoadedApk getPackageInfo(ApplicationInfo ai, CompatibilityInfo compatInfo, int flags)", "public final LoadedApk getPackageInfoNoCheck(ApplicationInfo ai, CompatibilityInfo compatInfo)", "public LoadedApk getPackageInfoNoCheck(ApplicationInfo ai)", "public final LoadedApk peekPackageInfo(String packageName, boolean includeCode)", "private LoadedApk getPackageInfo(ApplicationInfo aInfo, CompatibilityInfo compatInfo, ClassLoader baseLoader, boolean securityViolation, boolean includeCode, boolean registerPackage)", "private LoadedApk getPackageInfo(ApplicationInfo aInfo, CompatibilityInfo compatInfo, ClassLoader baseLoader, boolean securityViolation, boolean includeCode, boolean registerPackage, boolean isSdkSandbox)", "private static boolean isLoadedApkResourceDirsUpToDate(LoadedApk loadedApk, ApplicationInfo appInfo)", "public ApplicationThread getApplicationThread()", "public Instrumentation getInstrumentation()", "public boolean isProfiling()", "public String getProfileFilePath()", "public Looper getLooper()", "public Executor getExecutor()", "public Application getApplication()", "public String getProcessName()", "public ContextImpl getSystemContext()", "public ContextImpl getSystemUiContext()", "public ContextImpl getSystemUiContext(int displayId)", "public ContextImpl getSystemUiContextNoCreate()", "private ContextImpl getSystemUiContextNoCreateLocked(int displayId)", " void onSystemUiContextCleanup(ContextImpl context)", "public void installSystemApplicationInfo(ApplicationInfo info, ClassLoader classLoader)", " void scheduleGcIdler()", " void unscheduleGcIdler()", " void schedulePurgeIdler()", " void unschedulePurgeIdler()", " void doGcIfNeeded()", " void doGcIfNeeded(String reason)", " static void printRow(PrintWriter pw, String format, Object... objs)", "public static void dumpMemInfoTable(PrintWriter pw, Debug.MemoryInfo memInfo, boolean checkin, boolean dumpFullInfo, boolean dumpDalvik, boolean dumpSummaryOnly, int pid, String processName, long nativeMax, long nativeAllocated, long nativeFree, long dalvikMax, long dalvikAllocated, long dalvikFree)", "private static void dumpMemoryInfo(ProtoOutputStream proto, long fieldId, String name, int pss, int cleanPss, int sharedDirty, int privateDirty, int sharedClean, int privateClean, boolean hasSwappedOutPss, int dirtySwap, int dirtySwapPss, int rss)", "public static void dumpMemInfoTable(ProtoOutputStream proto, Debug.MemoryInfo memInfo, boolean dumpDalvik, boolean dumpSummaryOnly, long nativeMax, long nativeAllocated, long nativeFree, long dalvikMax, long dalvikAllocated, long dalvikFree)", "public void registerOnActivityPausedListener(Activity activity, OnActivityPausedListener listener)", "public void unregisterOnActivityPausedListener(Activity activity, OnActivityPausedListener listener)", "public final ActivityInfo resolveActivityInfo(Intent intent)", "public final Activity startActivityNow(Activity parent, String id, Intent intent, ActivityInfo activityInfo, IBinder token, Bundle state, Activity.NonConfigurationInstances lastNonConfigurationInstances, IBinder assistToken, IBinder shareableActivityToken)", "public final Activity getActivity(IBinder token)", "public ActivityClientRecord getActivityClient(IBinder token)", "public Configuration getConfiguration()", "public void addConfigurationChangedListener(Executor executor, Consumer<IBinder> consumer)", "public void removeConfigurationChangedListener(Consumer<IBinder> consumer)", "public void updatePendingConfiguration(Configuration config)", "public void updateProcessState(int processState, boolean fromIpc)", "private void updateVmProcessState(int processState)", "public void countLaunchingActivities(int num)", "public void sendActivityResult(IBinder activityToken, String id, int requestCode, int resultCode, Intent data)", " TransactionExecutor getTransactionExecutor()", " void sendMessage(int what, Object obj)", "private void sendMessage(int what, Object obj, int arg1)", "private void sendMessage(int what, Object obj, int arg1, int arg2)", "private void sendMessage(int what, Object obj, int arg1, int arg2, boolean async)", " final void scheduleContextCleanup(ContextImpl context, String who, String what)", "private Activity performLaunchActivity(ActivityClientRecord r, Intent customIntent)", "public void handleStartActivity(ActivityClientRecord r, PendingTransactionActions pendingActions, SceneTransitionInfo sceneTransitionInfo)", "private void checkAndBlockForNetworkAccess()", "private ContextImpl createBaseContextForActivity(ActivityClientRecord r)", "private ContextImpl createBaseContextForSandboxActivity(@NonNull ActivityClientRecord r)", "public Activity handleLaunchActivity(ActivityClientRecord r, PendingTransactionActions pendingActions, int deviceId, Intent customIntent)", "private void reportSizeConfigurations(ActivityClientRecord r)", "private void deliverNewIntents(ActivityClientRecord r, List<ReferrerIntent> intents)", "public void handleNewIntent(ActivityClientRecord r, List<ReferrerIntent> intents)", "public void handleRequestAssistContextExtras(RequestAssistContextExtras cmd)", "private void handleRequestDirectActions(@NonNull IBinder activityToken, @NonNull IVoiceInteractor interactor, @NonNull CancellationSignal cancellationSignal, @NonNull RemoteCallback callback, int retryCount)", "private void handlePerformDirectAction(@NonNull IBinder activityToken, @NonNull String actionId, @Nullable Bundle arguments, @NonNull CancellationSignal cancellationSignal, @NonNull RemoteCallback resultCallback)", "public void handleTranslucentConversionComplete(IBinder token, boolean drawComplete)", "public void onNewSceneTransitionInfo(IBinder token, SceneTransitionInfo info)", "public void handleInstallProvider(ProviderInfo info)", "private void handleEnterAnimationComplete(IBinder token)", "private void handleStartBinderTracking()", "private void handleStopBinderTrackingAndDump(ParcelFileDescriptor fd)", "public void handlePictureInPictureRequested(ActivityClientRecord r)", "public void handlePictureInPictureStateChanged(@NonNull ActivityClientRecord r, PictureInPictureUiState pipState)", "public void registerSplashScreenManager(@NonNull SplashScreen.SplashScreenManagerGlobal manager)", "public boolean isHandleSplashScreenExit(@NonNull IBinder token)", "public void handleAttachSplashScreenView(@NonNull ActivityClientRecord r, @Nullable SplashScreenView.SplashScreenViewParcelable parcelable, @NonNull SurfaceControl startingWindowLeash)", "private void createSplashScreen(ActivityClientRecord r, DecorView decorView, SplashScreenView.SplashScreenViewParcelable parcelable, @NonNull SurfaceControl startingWindowLeash)", "private void reportSplashscreenViewShown(IBinder token, SplashScreenView view)", "private void syncTransferSplashscreenViewTransaction(SplashScreenView view, IBinder token, View decorView, @NonNull SurfaceControl startingWindowLeash)", "private void schedulePauseWithUserLeaveHintAndReturnToCurrentState(ActivityClientRecord r)", "private void schedulePauseWithUserLeavingHint(ActivityClientRecord r)", "private void scheduleResume(ActivityClientRecord r)", "private void handleLocalVoiceInteractionStarted(IBinder token, IVoiceInteractor interactor)", "private static boolean attemptAttachAgent(String agent, ClassLoader classLoader)", " static void handleAttachAgent(String agent, LoadedApk loadedApk)", " static void handleAttachStartupAgents(String dataDir)", "private void updateUiTranslationState(IBinder activityToken, int state, TranslationSpec sourceSpec, TranslationSpec targetSpec, List<AutofillId> viewIds, UiTranslationSpec uiTranslationSpec)", "public static Intent getIntentBeingBroadcast()", "private void handleReceiver(ReceiverData data)", "private void handleCreateBackupAgent(CreateBackupAgentData data)", "private static int getOperationTypeFromBackupMode(int backupMode)", "private String getBackupAgentName(CreateBackupAgentData data)", "private void handleDestroyBackupAgent(CreateBackupAgentData data)", "private ArrayMap<String, BackupAgent> getBackupAgentsForUser(int userId)", "private void handleCreateService(CreateServiceData data)", "private void handleBindService(BindServiceData data)", "private void handleUnbindService(BindServiceData data)", "private void handleDumpGfxInfo(DumpComponentInfo info)", "private void handleDumpService(DumpComponentInfo info)", "private void handleDumpResources(DumpResourcesData info)", "private void handleDumpActivity(DumpComponentInfo info)", "private void handleDumpProvider(DumpComponentInfo info)", "private void handleServiceArgs(ServiceArgsData data)", "private void handleStopService(IBinder token)", "private void handleTimeoutService(IBinder token, int startId)", "private void handleTimeoutServiceForType(IBinder token, int startId, @ServiceInfo.ForegroundServiceType int fgsType)", "public boolean performResumeActivity(ActivityClientRecord r, boolean finalStateRequest, String reason)", " static final void cleanUpPendingRemoveWindows(ActivityClientRecord r, boolean force)", "public void handleResumeActivity(ActivityClientRecord r, boolean finalStateRequest, boolean isForward, boolean shouldSendCompatFakeFocus, String reason)", "public void handleTopResumedActivityChanged(ActivityClientRecord r, boolean onTop, String reason)", "private void reportTopResumedActivityChanged(ActivityClientRecord r, boolean onTop, String reason)", "public void handlePauseActivity(ActivityClientRecord r, boolean finished, boolean userLeaving, boolean autoEnteringPip, PendingTransactionActions pendingActions, String reason)", " final void performUserLeavingActivity(ActivityClientRecord r)", " final Bundle performPauseActivity(IBinder token, boolean finished, String reason, PendingTransactionActions pendingActions)", "private Bundle performPauseActivity(ActivityClientRecord r, boolean finished, String reason, PendingTransactionActions pendingActions)", "private void performPauseActivityIfNeeded(ActivityClientRecord r, String reason)", " final void performStopActivity(IBinder token, boolean saveState, String reason)", "private void performStopActivityInner(ActivityClientRecord r, StopInfo info, boolean saveState, boolean finalStateRequest, String reason)", "private void callActivityOnStop(ActivityClientRecord r, boolean saveState, String reason)", "private void updateVisibility(ActivityClientRecord r, boolean show)", "public void handleStopActivity(ActivityClientRecord r, PendingTransactionActions pendingActions, boolean finalStateRequest, String reason)", "public void reportStop(PendingTransactionActions pendingActions)", "public void performRestartActivity(ActivityClientRecord r, boolean start)", "public void reportRefresh(ActivityClientRecord r)", "private void handleSetCoreSettings(Bundle coreSettings)", "private void onCoreSettingsChange()", "private boolean updateDebugViewAttributeState()", "private void relaunchAllActivities(boolean preserveWindows, String reason)", "private void handleUpdatePackageCompatibilityInfo(UpdateCompatibilityData data)", "private void deliverResults(ActivityClientRecord r, List<ResultInfo> results, String reason)", "public void handleSendResult(ActivityClientRecord r, List<ResultInfo> results, String reason)", " void performDestroyActivity(ActivityClientRecord r, boolean finishing, boolean getNonConfigInstance, String reason)", "private static String safeToComponentShortString(Intent intent)", "public Map<IBinder, DestroyActivityItem> getActivitiesToBeDestroyed()", "public void handleDestroyActivity(ActivityClientRecord r, boolean finishing, boolean getNonConfigInstance, String reason)", "public ActivityClientRecord prepareRelaunchActivity(@NonNull IBinder token, @Nullable List<ResultInfo> pendingResults, @Nullable List<ReferrerIntent> pendingNewIntents, int configChanges, @NonNull MergedConfiguration config, boolean preserveWindow, @NonNull ActivityWindowInfo activityWindowInfo)", "public void handleRelaunchActivity(@NonNull ActivityClientRecord tmp, @NonNull PendingTransactionActions pendingActions)", " void scheduleRelaunchActivity(IBinder token)", "private void scheduleRelaunchActivityIfPossible(@NonNull ActivityClientRecord r, boolean preserveWindow)", "public void handleRelaunchActivityLocally(IBinder token)", "private void handleRelaunchActivityInner(@NonNull ActivityClientRecord r, @Nullable List<ResultInfo> pendingResults, @Nullable List<ReferrerIntent> pendingIntents, @NonNull PendingTransactionActions pendingActions, boolean startsNotResumed, @NonNull Configuration overrideConfig, @NonNull ActivityWindowInfo activityWindowInfo, @NonNull String reason)", "public void reportRelaunch(ActivityClientRecord r)", "private void callActivityOnSaveInstanceState(ActivityClientRecord r)", "public ArrayList<ComponentCallbacks2> collectComponentCallbacks(boolean includeUiContexts)", "private Configuration performConfigurationChangedForActivity(ActivityClientRecord r, Configuration newBaseConfig, int displayId, boolean alwaysReportChange)", "private Configuration performActivityConfigurationChanged(ActivityClientRecord r, Configuration newConfig, Configuration amOverrideConfig, int displayId, boolean alwaysReportChange)", "private boolean onlyDeskInUiModeChanged(Configuration oldConfig, Configuration newConfig)", "private static boolean isInDeskUiMode(Configuration config)", "public static boolean shouldReportChange(@Nullable Configuration currentConfig, @NonNull Configuration newConfig, @Nullable SizeConfigurationBuckets sizeBuckets, int handledConfigChanges, boolean alwaysReportChange)", "public final void applyConfigurationToResources(Configuration config)", "private void updateDeviceIdForNonUIContexts(int deviceId)", "public void handleConfigurationChanged(Configuration config, int deviceId)", "public void handleWindowContextInfoChanged(@NonNull IBinder clientToken, @NonNull WindowContextInfo info)", "public void handleWindowContextWindowRemoval(@NonNull IBinder clientToken)", "private void handleWindowingModeChangeIfNeeded(ActivityClientRecord r, Configuration newConfiguration)", "private void applyPendingApplicationInfoChanges(String packageName)", "public void handleSystemApplicationInfoChanged(@NonNull ApplicationInfo ai)", "public void handleApplicationInfoChanged(@NonNull final ApplicationInfo ai)", "public void updatePendingActivityConfiguration(@NonNull IBinder token, @NonNull Configuration overrideConfig)", "public void handleActivityConfigurationChanged(@NonNull ActivityClientRecord r, @NonNull Configuration overrideConfig, int displayId, @NonNull ActivityWindowInfo activityWindowInfo)", " void handleActivityConfigurationChanged(@NonNull ActivityClientRecord r, @NonNull Configuration overrideConfig, int displayId, @NonNull ActivityWindowInfo activityWindowInfo, boolean alwaysReportChange)", "private void handleActivityConfigurationChangedInner(@NonNull ActivityClientRecord r, @NonNull Configuration overrideConfig, int displayId, @NonNull ActivityWindowInfo activityWindowInfo, boolean alwaysReportChange)", "private void handleActivityWindowInfoChanged(@NonNull ActivityClientRecord r)", " final void handleProfilerControl(boolean start, ProfilerInfo profilerInfo, int profileType)", "public void stopProfiling()", " static void handleDumpHeap(DumpHeapData dhd)", " final void handleDispatchPackageBroadcast(int cmd, String[] packages)", " final void handleLowMemory()", "private void handleTrimMemory(int level)", "private void setupGraphicsSupport(Context context)", "private String getInstrumentationLibrary(ApplicationInfo appInfo, InstrumentationInfo insInfo)", "private void handleBindApplication(AppBindData data)", "private void waitForDebugger(AppBindData data)", "private void suspendAllAndSendVmStart(AppBindData data)", "private void initZipPathValidatorCallback()", "private void handleSetContentCaptureOptionsCallback(String packageName)", "private void handleInstrumentWithoutRestart(AppBindData data)", "private InstrumentationInfo prepareInstrumentation(AppBindData data)", "private void initInstrumentation(InstrumentationInfo ii, AppBindData data, ContextImpl appContext)", "private void handleFinishInstrumentationWithoutRestart()", " final void finishInstrumentation(int resultCode, Bundle results)", "private void installContentProviders(Context context, List<ProviderInfo> providers)", "public final IContentProvider acquireProvider(Context c, String auth, int userId, boolean stable)", "private ProviderKey getGetProviderKey(String auth, int userId)", "private final void incProviderRefLocked(ProviderRefCount prc, boolean stable)", "public final IContentProvider acquireExistingProvider(Context c, String auth, int userId, boolean stable)", "public final boolean releaseProvider(IContentProvider provider, boolean stable)", " final void completeRemoveProvider(ProviderRefCount prc)", " final void handleUnstableProviderDied(IBinder provider, boolean fromClient)", " final void handleUnstableProviderDiedLocked(IBinder provider, boolean fromClient)", " final void appNotRespondingViaProvider(IBinder provider)", "private ProviderClientRecord installProviderAuthoritiesLocked(IContentProvider provider, ContentProvider localProvider, ContentProviderHolder holder)", "private ContentProviderHolder installProvider(Context context, ContentProviderHolder holder, ProviderInfo info, boolean noisy, boolean noReleaseNeeded, boolean stable)", "private void handleRunIsolatedEntryPoint(String entryPoint, String[] entryPointArgs)", "private void attach(boolean system, long startSeq)", "public static ActivityThread systemMain()", "public static void updateHttpProxy(@NonNull Context context)", "public final void installSystemProviders(List<ProviderInfo> providers)", " Bundle getCoreSettings()", "public int getIntCoreSetting(String key, int defaultValue)", "public String getStringCoreSetting(String key, String defaultValue)", " float getFloatCoreSetting(String key, float defaultValue)", "public static void main(String[] args)", "public static void initializeMainlineModules()", "private void purgePendingResources()", "public static boolean isProtectedComponent(@NonNull ActivityInfo ai)", "public static boolean isProtectedComponent(@NonNull ServiceInfo si)", "private static boolean isProtectedComponent(@NonNull ComponentInfo ci, @Nullable String permission)", "public static boolean isProtectedBroadcast(@NonNull Intent intent)", "public boolean isInDensityCompatMode()", "private native void nPurgePendingResources()", "private native void nInitZygoteChildHeapProfiling()" ],
  "variableNames" : [ "mDdmSyncStageUpdater", "TAG", "localLOGV", "DEBUG_MESSAGES", "DEBUG_BROADCAST", "DEBUG_RESULTS", "DEBUG_BACKUP", "DEBUG_CONFIGURATION", "DEBUG_SERVICE", "DEBUG_MEMORY_TRIM", "DEBUG_PROVIDER", "DEBUG_ORDER", "DEBUG_APP_INFO", "MIN_TIME_BETWEEN_GCS", "CONTENT_PROVIDER_RETAIN_TIME", "SQLITE_MEM_RELEASED_EVENT_LOG_TAG", "SERVICE_DONE_EXECUTING_ANON", "SERVICE_DONE_EXECUTING_START", "SERVICE_DONE_EXECUTING_STOP", "SERVICE_DONE_EXECUTING_REBIND", "SERVICE_DONE_EXECUTING_UNBIND", "VM_PROCESS_STATE_JANK_PERCEPTIBLE", "VM_PROCESS_STATE_JANK_IMPERCEPTIBLE", "REQUEST_DIRECT_ACTIONS_RETRY_TIME_MS", "REQUEST_DIRECT_ACTIONS_RETRY_MAX_COUNT", "INVALID_PROC_STATE_SEQ", "PROC_START_SEQ_IDENT", "mNetworkPolicyLock", "DEFAULT_FULL_BACKUP_AGENT", "BINDER_CALLBACK_THROTTLE", "mBinderCallbackLast", "mNetworkBlockSeq", "mSystemContext", "mDisplaySystemUiContexts", "sPackageManager", "sPermissionManager", "mAppThread", "mLooper", "mH", "mExecutor", "mActivities", "mPendingOverrideConfigs", "mPendingAppInfoUpdates", "mActivitiesToBeDestroyed", "mNewActivities", "mNumVisibleActivities", "mNumLaunchingActivities", "mLastProcessState", "mLastAssistStructures", "mConfigurationChangedListenerController", "mLastSessionId", "mLastReportedDeviceId", "mServicesData", "mServices", "mBoundApplication", "mProfiler", "mCurDefaultDisplayDpi", "mDensityCompatMode", "mCompatibilityInfo", "mConfiguration", "mUpdateHttpProxyOnBind", "mInitialApplication", "mAllApplications", "mBackupAgentsByUser", "sCurrentActivityThread", "mInstrumentation", "mInstrumentationPackageName", "mInstrumentationAppDir", "mInstrumentationSplitAppDirs", "mInstrumentationLibDir", "mInstrumentedAppDir", "mInstrumentedSplitAppDirs", "mInstrumentedLibDir", "mInstrumentingWithoutRestart", "mSystemThread", "mSomeActivitiesChanged", "mPackages", "mResourcePackages", "mRelaunchingActivities", "mPendingConfiguration", "mTransactionExecutor", "mResourcesManager", "mRemoteCancellations", "mProviderMap", "mProviderRefCountMap", "mLocalProviders", "mLocalProvidersByName", "mGetProviderKeys", "mOnPauseListeners", "mSplashScreenGlobal", "mGcIdler", "mPurgeIdler", "mPurgeIdlerScheduled", "mGcIdlerScheduled", "sMainThreadHandler", "mStartSeq", "mCoreSettings", "mCoreSettingsLock", "mContentCaptureOptionsCallback", "mConfigurationController", "HEAP_FULL_COLUMN", "HEAP_COLUMN", "ONE_COUNT_COLUMN", "TWO_COUNT_COLUMNS", "THREE_COUNT_COLUMNS", "TWO_COUNT_COLUMN_HEADER", "ONE_ALT_COUNT_COLUMN", "ACTIVITY_THREAD_CHECKIN_VERSION", "sCurrentBroadcastIntent" ]
}