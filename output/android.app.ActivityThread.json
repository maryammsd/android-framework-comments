{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/app/ActivityThread.java",
  "packageName" : "android.app",
  "className" : "ActivityThread",
  "comment" : "\n * This manages the execution of the main thread in an\n * application process, scheduling and executing activities,\n * broadcasts, and other operations on it as the activity\n * manager requests.\n *\n * {@hide}\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "THUMBNAIL_FORMAT",
    "type" : "android.graphics.Bitmap.Config",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "localLOGV",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG_MESSAGES",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG_BROADCAST",
    "type" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEBUG_RESULTS",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG_BACKUP",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG_CONFIGURATION",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG_SERVICE",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG_MEMORY_TRIM",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG_PROVIDER",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG_ORDER",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MIN_TIME_BETWEEN_GCS",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PENDING_TOP_PROCESS_STATE_TIMEOUT",
    "type" : "long",
    "comment" : "\n     * If the activity doesn't become idle in time, the timeout will ensure to apply the pending top\n     * process state.\n     ",
    "links" : [ ]
  }, {
    "name" : "CONTENT_PROVIDER_RETAIN_TIME",
    "type" : "long",
    "comment" : "\n     * The delay to release the provider when it has no more references. It reduces the number of\n     * transactions for acquiring and releasing provider if the client accesses the provider\n     * frequently in a short time.\n     ",
    "links" : [ ]
  }, {
    "name" : "SQLITE_MEM_RELEASED_EVENT_LOG_TAG",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SERVICE_DONE_EXECUTING_ANON",
    "type" : "int",
    "comment" : " Type for IActivityManager.serviceDoneExecuting: anonymous operation ",
    "links" : [ ]
  }, {
    "name" : "SERVICE_DONE_EXECUTING_START",
    "type" : "int",
    "comment" : " Type for IActivityManager.serviceDoneExecuting: done with an onStart call ",
    "links" : [ ]
  }, {
    "name" : "SERVICE_DONE_EXECUTING_STOP",
    "type" : "int",
    "comment" : " Type for IActivityManager.serviceDoneExecuting: done stopping (destroying) service ",
    "links" : [ ]
  }, {
    "name" : "REPORT_TO_ACTIVITY",
    "type" : "boolean",
    "comment" : " Whether to invoke an activity callback after delivering new configuration.",
    "links" : [ ]
  }, {
    "name" : "VM_PROCESS_STATE_JANK_PERCEPTIBLE",
    "type" : "int",
    "comment" : " Use foreground GC policy (less pause time) and higher JIT weight. ",
    "links" : [ ]
  }, {
    "name" : "VM_PROCESS_STATE_JANK_IMPERCEPTIBLE",
    "type" : "int",
    "comment" : " Use background GC policy and default JIT threshold. ",
    "links" : [ ]
  }, {
    "name" : "INVALID_PROC_STATE_SEQ",
    "type" : "long",
    "comment" : "\n     * Denotes an invalid sequence number corresponding to a process state change.\n     ",
    "links" : [ ]
  }, {
    "name" : "PROC_START_SEQ_IDENT",
    "type" : "String",
    "comment" : "\n     * Identifier for the sequence no. associated with this process start. It will be provided\n     * as one of the arguments when the process starts.\n     ",
    "links" : [ ]
  }, {
    "name" : "mNetworkPolicyLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNetworkBlockSeq",
    "type" : "long",
    "comment" : "\n     * Denotes the sequence number of the process state change for which the main thread needs\n     * to block until the network rules are updated for it.\n     *\n     * Value of {@link #INVALID_PROC_STATE_SEQ} indicates there is no need for blocking.\n     ",
    "links" : [ "#INVALID_PROC_STATE_SEQ" ]
  }, {
    "name" : "mSystemContext",
    "type" : "ContextImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSystemUiContext",
    "type" : "ContextImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sPackageManager",
    "type" : "IPackageManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sPermissionManager",
    "type" : "IPermissionManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAppThread",
    "type" : "ApplicationThread",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLooper",
    "type" : "Looper",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mH",
    "type" : "H",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExecutor",
    "type" : "Executor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mActivities",
    "type" : "ArrayMap<IBinder, ActivityClientRecord>",
    "comment" : "\n     * Maps from activity token to local record of running activities in this process.\n     *\n     * This variable is readable if the code is running in activity thread or holding {@link\n     * #mResourcesManager}. It's only writable if the code is running in activity thread and holding\n     * {@link #mResourcesManager}.\n     ",
    "links" : [ "#mResourcesManager" ]
  }, {
    "name" : "mActivitiesToBeDestroyed",
    "type" : "Map<IBinder, ClientTransactionItem>",
    "comment" : " The activities to be truly destroyed (not include relaunch). ",
    "links" : [ ]
  }, {
    "name" : "mNewActivities",
    "type" : "ActivityClientRecord",
    "comment" : " be reported when next we idle.",
    "links" : [ ]
  }, {
    "name" : "mNumVisibleActivities",
    "type" : "int",
    "comment" : " Number of activities that are currently visible on-screen.",
    "links" : [ ]
  }, {
    "name" : "mNumLaunchingActivities",
    "type" : "AtomicInteger",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLastProcessState",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPendingProcessState",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLastAssistStructures",
    "type" : "ArrayList<WeakReference<AssistStructure>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLastSessionId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mServices",
    "type" : "ArrayMap<IBinder, Service>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBoundApplication",
    "type" : "AppBindData",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProfiler",
    "type" : "Profiler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCurDefaultDisplayDpi",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDensityCompatMode",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConfiguration",
    "type" : "Configuration",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCompatConfiguration",
    "type" : "Configuration",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInitialApplication",
    "type" : "Application",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAllApplications",
    "type" : "ArrayList<Application>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBackupAgentsByUser",
    "type" : "SparseArray<ArrayMap<String, BackupAgent>>",
    "comment" : "\n     * Bookkeeping of instantiated backup agents indexed first by user id, then by package name.\n     * Indexing by user id supports parallel backups across users on system packages as they run in\n     * the same process with the same package name. Indexing by package name supports multiple\n     * distinct applications running in the same process.\n     ",
    "links" : [ ]
  }, {
    "name" : "sCurrentActivityThread",
    "type" : "ActivityThread",
    "comment" : " Reference to singleton {@link ActivityThread} ",
    "links" : [ "android.app.ActivityThread" ]
  }, {
    "name" : "mInstrumentation",
    "type" : "Instrumentation",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInstrumentationPackageName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInstrumentationAppDir",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInstrumentationSplitAppDirs",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInstrumentationLibDir",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInstrumentedAppDir",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInstrumentedSplitAppDirs",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInstrumentedLibDir",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSystemThread",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSomeActivitiesChanged",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHiddenApiWarningShown",
    "type" : "boolean",
    "comment" : " package ",
    "links" : [ ]
  }, {
    "name" : "mPackages",
    "type" : "ArrayMap<String, WeakReference<LoadedApk>>",
    "comment" : " These LoadedApk are only valid for the userId that we're running as.",
    "links" : [ ]
  }, {
    "name" : "mResourcePackages",
    "type" : "ArrayMap<String, WeakReference<LoadedApk>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRelaunchingActivities",
    "type" : "ArrayList<ActivityClientRecord>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPendingConfiguration",
    "type" : "Configuration",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTransactionExecutor",
    "type" : "TransactionExecutor",
    "comment" : " An executor that performs multi-step transactions.",
    "links" : [ ]
  }, {
    "name" : "mResourcesManager",
    "type" : "ResourcesManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mActiveRotationAdjustments",
    "type" : "ArrayList<Pair<IBinder, Consumer<DisplayAdjustments>>>",
    "comment" : " The active adjustments that override the {@link DisplayAdjustments} in resources. ",
    "links" : [ "android.view.DisplayAdjustments" ]
  }, {
    "name" : "mRemoteCancellations",
    "type" : "Map<SafeCancellationTransport, CancellationSignal>",
    "comment" : " Registry of remote cancellation transports pending a reply with reply handles.",
    "links" : [ ]
  }, {
    "name" : "mLastReportedWindowingMode",
    "type" : "Map<IBinder, Integer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProviderMap",
    "type" : "ArrayMap<ProviderKey, ProviderClientRecord>",
    "comment" : " The lock of mProviderMap protects the following variables.",
    "links" : [ ]
  }, {
    "name" : "mProviderRefCountMap",
    "type" : "ArrayMap<IBinder, ProviderRefCount>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLocalProviders",
    "type" : "ArrayMap<IBinder, ProviderClientRecord>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLocalProvidersByName",
    "type" : "ArrayMap<ComponentName, ProviderClientRecord>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGetProviderLocks",
    "type" : "ArrayMap<ProviderKey, Object>",
    "comment" : " TODO Remove it once we move CPR.wait() from AMS to the client side.",
    "links" : [ ]
  }, {
    "name" : "mOnPauseListeners",
    "type" : "ArrayMap<Activity, ArrayList<OnActivityPausedListener>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGcIdler",
    "type" : "GcIdler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPurgeIdler",
    "type" : "PurgeIdler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPurgeIdlerScheduled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGcIdlerScheduled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sMainThreadHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCoreSettings",
    "type" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHasImeComponent",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMainThreadConfig",
    "type" : "Configuration",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HEAP_FULL_COLUMN",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HEAP_COLUMN",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ONE_COUNT_COLUMN",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TWO_COUNT_COLUMNS",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "THREE_COUNT_COLUMNS",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TWO_COUNT_COLUMN_HEADER",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ONE_ALT_COUNT_COLUMN",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ACTIVITY_THREAD_CHECKIN_VERSION",
    "type" : "int",
    "comment" : " Formatting for checkin service - update version if row format changes",
    "links" : [ ]
  }, {
    "name" : "sCurrentBroadcastIntent",
    "type" : "ThreadLocal<Intent>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private SafeCancellationTransport createSafeCancellationTransport(@NonNull CancellationSignal cancellationSignal)",
    "returnType" : "SafeCancellationTransport",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private CancellationSignal removeSafeCancellationTransport(@NonNull SafeCancellationTransport transport)",
    "returnType" : "CancellationSignal",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static ActivityThread currentActivityThread()",
    "returnType" : "ActivityThread",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static boolean isSystem()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String currentOpPackageName()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String currentPackageName()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String currentProcessName()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static Application currentApplication()",
    "returnType" : "Application",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static IPackageManager getPackageManager()",
    "returnType" : "IPackageManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static IPermissionManager getPermissionManager()",
    "returnType" : "IPermissionManager",
    "comment" : " Returns the permission manager ",
    "links" : [ ]
  }, {
    "name" : " Configuration applyConfigCompatMainThread(int displayDensity, Configuration config, CompatibilityInfo compat)",
    "returnType" : "Configuration",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " Resources getTopLevelResources(String resDir, String[] splitResDirs, String[] overlayDirs, String[] libDirs, int displayId, LoadedApk pkgInfo)",
    "returnType" : "Resources",
    "comment" : "\n     * Creates the top level resources for the given package. Will return an existing\n     * Resources if one has already been created.\n     ",
    "links" : [ ]
  }, {
    "name" : " final Handler getHandler()",
    "returnType" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final LoadedApk getPackageInfo(String packageName, CompatibilityInfo compatInfo, int flags)",
    "returnType" : "LoadedApk",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final LoadedApk getPackageInfo(String packageName, CompatibilityInfo compatInfo, int flags, int userId)",
    "returnType" : "LoadedApk",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final LoadedApk getPackageInfo(ApplicationInfo ai, CompatibilityInfo compatInfo, int flags)",
    "returnType" : "LoadedApk",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final LoadedApk getPackageInfoNoCheck(ApplicationInfo ai, CompatibilityInfo compatInfo)",
    "returnType" : "LoadedApk",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final LoadedApk peekPackageInfo(String packageName, boolean includeCode)",
    "returnType" : "LoadedApk",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private LoadedApk getPackageInfo(ApplicationInfo aInfo, CompatibilityInfo compatInfo, ClassLoader baseLoader, boolean securityViolation, boolean includeCode, boolean registerPackage)",
    "returnType" : "LoadedApk",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isLoadedApkResourceDirsUpToDate(LoadedApk loadedApk, ApplicationInfo appInfo)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ApplicationThread getApplicationThread()",
    "returnType" : "ApplicationThread",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Instrumentation getInstrumentation()",
    "returnType" : "Instrumentation",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isProfiling()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getProfileFilePath()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Looper getLooper()",
    "returnType" : "Looper",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Executor getExecutor()",
    "returnType" : "Executor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Application getApplication()",
    "returnType" : "Application",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getProcessName()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ContextImpl getSystemContext()",
    "returnType" : "ContextImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ContextImpl getSystemUiContext()",
    "returnType" : "ContextImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ContextImpl createSystemUiContext(int displayId)",
    "returnType" : "ContextImpl",
    "comment" : "\n     * Create the context instance base on system resources & display information which used for UI.\n     * @param displayId The ID of the display where the UI is shown.\n     * @see ContextImpl#createSystemUiContext(ContextImpl, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void installSystemApplicationInfo(ApplicationInfo info, ClassLoader classLoader)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void scheduleGcIdler()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void unscheduleGcIdler()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void schedulePurgeIdler()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void unschedulePurgeIdler()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void doGcIfNeeded()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void doGcIfNeeded(String reason)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void printRow(PrintWriter pw, String format, Object... objs)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void dumpMemInfoTable(PrintWriter pw, Debug.MemoryInfo memInfo, boolean checkin, boolean dumpFullInfo, boolean dumpDalvik, boolean dumpSummaryOnly, int pid, String processName, long nativeMax, long nativeAllocated, long nativeFree, long dalvikMax, long dalvikAllocated, long dalvikFree)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void dumpMemoryInfo(ProtoOutputStream proto, long fieldId, String name, int pss, int cleanPss, int sharedDirty, int privateDirty, int sharedClean, int privateClean, boolean hasSwappedOutPss, int dirtySwap, int dirtySwapPss, int rss)",
    "returnType" : "void",
    "comment" : "\n     * Dump heap info to proto.\n     *\n     * @param hasSwappedOutPss determines whether to use dirtySwap or dirtySwapPss\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void dumpMemInfoTable(ProtoOutputStream proto, Debug.MemoryInfo memInfo, boolean dumpDalvik, boolean dumpSummaryOnly, long nativeMax, long nativeAllocated, long nativeFree, long dalvikMax, long dalvikAllocated, long dalvikFree)",
    "returnType" : "void",
    "comment" : "\n     * Dump mem info data to proto.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void registerOnActivityPausedListener(Activity activity, OnActivityPausedListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void unregisterOnActivityPausedListener(Activity activity, OnActivityPausedListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final ActivityInfo resolveActivityInfo(Intent intent)",
    "returnType" : "ActivityInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final Activity startActivityNow(Activity parent, String id, Intent intent, ActivityInfo activityInfo, IBinder token, Bundle state, Activity.NonConfigurationInstances lastNonConfigurationInstances, IBinder assistToken)",
    "returnType" : "Activity",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final Activity getActivity(IBinder token)",
    "returnType" : "Activity",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ActivityClientRecord getActivityClient(IBinder token)",
    "returnType" : "ActivityClientRecord",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Configuration getConfiguration()",
    "returnType" : "Configuration",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void updatePendingConfiguration(Configuration config)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void updateProcessState(int processState, boolean fromIpc)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateVmProcessState(int processState)",
    "returnType" : "void",
    "comment" : " Update VM state based on ActivityManager.PROCESS_STATE_* constants. ",
    "links" : [ ]
  }, {
    "name" : "private void applyPendingProcessState()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void countLaunchingActivities(int num)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final void sendActivityResult(IBinder token, String id, int requestCode, int resultCode, Intent data)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " TransactionExecutor getTransactionExecutor()",
    "returnType" : "TransactionExecutor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void sendMessage(int what, Object obj)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void sendMessage(int what, Object obj, int arg1)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void sendMessage(int what, Object obj, int arg1, int arg2)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void sendMessage(int what, Object obj, int arg1, int arg2, boolean async)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void sendMessage(int what, Object obj, int arg1, int arg2, int seq)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final void scheduleContextCleanup(ContextImpl context, String who, String what)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void handleFixedRotationAdjustments(@NonNull IBinder token, @Nullable FixedRotationAdjustments fixedRotationAdjustments)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleFixedRotationAdjustments(@NonNull IBinder token, @Nullable FixedRotationAdjustments fixedRotationAdjustments, @Nullable Configuration overrideConfig)",
    "returnType" : "void",
    "comment" : "\n     * Applies the rotation adjustments to override display information in resources belong to the\n     * provided token. If the token is activity token, the adjustments also apply to application\n     * because the appearance of activity is usually more sensitive to the application resources.\n     *\n     * @param token The token to apply the adjustments.\n     * @param fixedRotationAdjustments The information to override the display adjustments of\n     *                                 corresponding resources. If it is null, the exiting override\n     *                                 will be cleared.\n     * @param overrideConfig The override configuration of activity. It is used to override\n     *                       application configuration. If it is non-null, it means the token is\n     *                       confirmed as activity token. Especially when launching new activity,\n     *                       {@link #mActivities} hasn't put the new token.\n     ",
    "links" : [ "#mActivities" ]
  }, {
    "name" : "private Activity performLaunchActivity(ActivityClientRecord r, Intent customIntent)",
    "returnType" : "Activity",
    "comment" : "  Core implementation of activity launch. ",
    "links" : [ ]
  }, {
    "name" : "public void handleStartActivity(IBinder token, PendingTransactionActions pendingActions)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void checkAndBlockForNetworkAccess()",
    "returnType" : "void",
    "comment" : "\n     * Checks if {@link #mNetworkBlockSeq} is {@link #INVALID_PROC_STATE_SEQ} and if so, returns\n     * immediately. Otherwise, makes a blocking call to ActivityManagerService to wait for the\n     * network rules to get updated.\n     ",
    "links" : [ "#mNetworkBlockSeq", "#INVALID_PROC_STATE_SEQ" ]
  }, {
    "name" : "private ContextImpl createBaseContextForActivity(ActivityClientRecord r)",
    "returnType" : "ContextImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Activity handleLaunchActivity(ActivityClientRecord r, PendingTransactionActions pendingActions, Intent customIntent)",
    "returnType" : "Activity",
    "comment" : "\n     * Extended implementation of activity launch. Used when server requests a launch or relaunch.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void reportSizeConfigurations(ActivityClientRecord r)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void deliverNewIntents(ActivityClientRecord r, List<ReferrerIntent> intents)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void handleNewIntent(IBinder token, List<ReferrerIntent> intents)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void handleRequestAssistContextExtras(RequestAssistContextExtras cmd)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleRequestDirectActions(@NonNull IBinder activityToken, @NonNull IVoiceInteractor interactor, @NonNull CancellationSignal cancellationSignal, @NonNull RemoteCallback callback)",
    "returnType" : "void",
    "comment" : " Fetches the user actions for the corresponding activity ",
    "links" : [ ]
  }, {
    "name" : "private void handlePerformDirectAction(@NonNull IBinder activityToken, @NonNull String actionId, @Nullable Bundle arguments, @NonNull CancellationSignal cancellationSignal, @NonNull RemoteCallback resultCallback)",
    "returnType" : "void",
    "comment" : " Performs an actions in the corresponding activity ",
    "links" : [ ]
  }, {
    "name" : "public void handleTranslucentConversionComplete(IBinder token, boolean drawComplete)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onNewActivityOptions(IBinder token, ActivityOptions options)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void handleInstallProvider(ProviderInfo info)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleEnterAnimationComplete(IBinder token)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleStartBinderTracking()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleStopBinderTrackingAndDump(ParcelFileDescriptor fd)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void handlePictureInPictureRequested(IBinder token)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void schedulePauseWithUserLeaveHintAndReturnToCurrentState(ActivityClientRecord r)",
    "returnType" : "void",
    "comment" : "\n     * Cycle activity through onPause and onUserLeaveHint so that PIP is entered if supported, then\n     * return to its previous state. This allows activities that rely on onUserLeaveHint instead of\n     * onPictureInPictureRequested to enter picture-in-picture.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void schedulePauseWithUserLeavingHint(ActivityClientRecord r)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void scheduleResume(ActivityClientRecord r)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleLocalVoiceInteractionStarted(IBinder token, IVoiceInteractor interactor)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean attemptAttachAgent(String agent, ClassLoader classLoader)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void handleAttachAgent(String agent, LoadedApk loadedApk)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void handleAttachStartupAgents(String dataDir)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static Intent getIntentBeingBroadcast()",
    "returnType" : "Intent",
    "comment" : "\n     * Return the Intent that's currently being handled by a\n     * BroadcastReceiver on this thread, or null if none.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void handleReceiver(ReceiverData data)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleCreateBackupAgent(CreateBackupAgentData data)",
    "returnType" : "void",
    "comment" : " Instantiate a BackupAgent and tell it that it's alive",
    "links" : [ ]
  }, {
    "name" : "private void handleDestroyBackupAgent(CreateBackupAgentData data)",
    "returnType" : "void",
    "comment" : " Tear down a BackupAgent",
    "links" : [ ]
  }, {
    "name" : "private ArrayMap<String, BackupAgent> getBackupAgentsForUser(int userId)",
    "returnType" : "ArrayMap<String, BackupAgent>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleCreateService(CreateServiceData data)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleBindService(BindServiceData data)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleUnbindService(BindServiceData data)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleDumpService(DumpComponentInfo info)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleDumpActivity(DumpComponentInfo info)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleDumpProvider(DumpComponentInfo info)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleServiceArgs(ServiceArgsData data)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleStopService(IBinder token)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ActivityClientRecord performResumeActivity(IBinder token, boolean finalStateRequest, String reason)",
    "returnType" : "ActivityClientRecord",
    "comment" : "\n     * Resume the activity.\n     * @param token Target activity token.\n     * @param finalStateRequest Flag indicating if this is part of final state resolution for a\n     *                          transaction.\n     * @param reason Reason for performing the action.\n     *\n     * @return The {@link ActivityClientRecord} that was resumed, {@code null} otherwise.\n     ",
    "links" : [ "ActivityClientRecord" ]
  }, {
    "name" : " static final void cleanUpPendingRemoveWindows(ActivityClientRecord r, boolean force)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void handleResumeActivity(IBinder token, boolean finalStateRequest, boolean isForward, String reason)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void handleTopResumedActivityChanged(IBinder token, boolean onTop, String reason)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void reportTopResumedActivityChanged(ActivityClientRecord r, boolean onTop, String reason)",
    "returnType" : "void",
    "comment" : "\n     * Call {@link Activity#onTopResumedActivityChanged(boolean)} if its top resumed state changed\n     * since the last report.\n     ",
    "links" : [ "android.app.Activity#onTopResumedActivityChanged(boolean)" ]
  }, {
    "name" : "public void handlePauseActivity(IBinder token, boolean finished, boolean userLeaving, int configChanges, PendingTransactionActions pendingActions, String reason)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final void performUserLeavingActivity(ActivityClientRecord r)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final Bundle performPauseActivity(IBinder token, boolean finished, String reason, PendingTransactionActions pendingActions)",
    "returnType" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Bundle performPauseActivity(ActivityClientRecord r, boolean finished, String reason, PendingTransactionActions pendingActions)",
    "returnType" : "Bundle",
    "comment" : "\n     * Pause the activity.\n     * @return Saved instance state for pre-Honeycomb apps if it was saved, {@code null} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void performPauseActivityIfNeeded(ActivityClientRecord r, String reason)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final void performStopActivity(IBinder token, boolean saveState, String reason)",
    "returnType" : "void",
    "comment" : " Called from {@link LocalActivityManager}. ",
    "links" : [ "android.app.LocalActivityManager" ]
  }, {
    "name" : "private void performStopActivityInner(ActivityClientRecord r, StopInfo info, boolean saveState, boolean finalStateRequest, String reason)",
    "returnType" : "void",
    "comment" : "\n     * Core implementation of stopping an activity.\n     * @param r Target activity client record.\n     * @param info Action that will report activity stop to server.\n     * @param saveState Flag indicating whether the activity state should be saved.\n     * @param finalStateRequest Flag indicating if this call is handling final lifecycle state\n     *                          request for a transaction.\n     * @param reason Reason for performing this operation.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void callActivityOnStop(ActivityClientRecord r, boolean saveState, String reason)",
    "returnType" : "void",
    "comment" : "\n     * Calls {@link Activity#onStop()} and {@link Activity#onSaveInstanceState(Bundle)}, and updates\n     * the client record's state.\n     * All calls to stop an activity must be done through this method to make sure that\n     * {@link Activity#onSaveInstanceState(Bundle)} is also executed in the same call.\n     ",
    "links" : [ "android.app.Activity#onSaveInstanceState(Bundle)", "android.app.Activity#onStop()" ]
  }, {
    "name" : "private void updateVisibility(ActivityClientRecord r, boolean show)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void handleStopActivity(IBinder token, int configChanges, PendingTransactionActions pendingActions, boolean finalStateRequest, String reason)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void reportStop(PendingTransactionActions pendingActions)",
    "returnType" : "void",
    "comment" : "\n     * Schedule the call to tell the activity manager we have stopped.  We don't do this\n     * immediately, because we want to have a chance for any other pending work (in particular\n     * memory trim requests) to complete before you tell the activity manager to proceed and allow\n     * us to go fully into the background.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void performRestartActivity(IBinder token, boolean start)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleSetCoreSettings(Bundle coreSettings)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onCoreSettingsChange()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean updateDebugViewAttributeState()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void relaunchAllActivities(boolean preserveWindows)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleUpdatePackageCompatibilityInfo(UpdateCompatibilityData data)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void deliverResults(ActivityClientRecord r, List<ResultInfo> results, String reason)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void handleSendResult(IBinder token, List<ResultInfo> results, String reason)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " ActivityClientRecord performDestroyActivity(IBinder token, boolean finishing, int configChanges, boolean getNonConfigInstance, String reason)",
    "returnType" : "ActivityClientRecord",
    "comment" : " Core implementation of activity destroy call. ",
    "links" : [ ]
  }, {
    "name" : "private static String safeToComponentShortString(Intent intent)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Map<IBinder, ClientTransactionItem> getActivitiesToBeDestroyed()",
    "returnType" : "Map<IBinder, ClientTransactionItem>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void handleDestroyActivity(IBinder token, boolean finishing, int configChanges, boolean getNonConfigInstance, String reason)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ActivityClientRecord prepareRelaunchActivity(IBinder token, List<ResultInfo> pendingResults, List<ReferrerIntent> pendingNewIntents, int configChanges, MergedConfiguration config, boolean preserveWindow)",
    "returnType" : "ActivityClientRecord",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void handleRelaunchActivity(ActivityClientRecord tmp, PendingTransactionActions pendingActions)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void scheduleRelaunchActivity(IBinder token)",
    "returnType" : "void",
    "comment" : "\n     * Post a message to relaunch the activity. We do this instead of launching it immediately,\n     * because this will destroy the activity from which it was called and interfere with the\n     * lifecycle changes it was going through before. We need to make sure that we have finished\n     * handling current transaction item before relaunching the activity.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void handleRelaunchActivityLocally(IBinder token)",
    "returnType" : "void",
    "comment" : " Performs the activity relaunch locally vs. requesting from system-server. ",
    "links" : [ ]
  }, {
    "name" : "private void handleRelaunchActivityInner(ActivityClientRecord r, int configChanges, List<ResultInfo> pendingResults, List<ReferrerIntent> pendingIntents, PendingTransactionActions pendingActions, boolean startsNotResumed, Configuration overrideConfig, String reason)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void reportRelaunch(IBinder token, PendingTransactionActions pendingActions)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void callActivityOnSaveInstanceState(ActivityClientRecord r)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " ArrayList<ComponentCallbacks2> collectComponentCallbacks(boolean allActivities, Configuration newConfig)",
    "returnType" : "ArrayList<ComponentCallbacks2>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void performConfigurationChangedForActivity(ActivityClientRecord r, Configuration newBaseConfig)",
    "returnType" : "void",
    "comment" : "\n     * Updates the configuration for an Activity. The ActivityClientRecord's\n     * {@link ActivityClientRecord#overrideConfig} is used to compute the final Configuration for\n     * that Activity. {@link ActivityClientRecord#tmpConfig} is used as a temporary for delivering\n     * the updated Configuration.\n     * @param r ActivityClientRecord representing the Activity.\n     * @param newBaseConfig The new configuration to use. This may be augmented with\n     *                      {@link ActivityClientRecord#overrideConfig}.\n     ",
    "links" : [ "#overrideConfig", "#tmpConfig" ]
  }, {
    "name" : "private Configuration performConfigurationChangedForActivity(ActivityClientRecord r, Configuration newBaseConfig, int displayId, boolean movedToDifferentDisplay)",
    "returnType" : "Configuration",
    "comment" : "\n     * Updates the configuration for an Activity. The ActivityClientRecord's\n     * {@link ActivityClientRecord#overrideConfig} is used to compute the final Configuration for\n     * that Activity. {@link ActivityClientRecord#tmpConfig} is used as a temporary for delivering\n     * the updated Configuration.\n     * @param r ActivityClientRecord representing the Activity.\n     * @param newBaseConfig The new configuration to use. This may be augmented with\n     *                      {@link ActivityClientRecord#overrideConfig}.\n     * @param displayId The id of the display where the Activity currently resides.\n     * @param movedToDifferentDisplay Indicates if the activity was moved to different display.\n     * @return {@link Configuration} instance sent to client, null if not sent.\n     ",
    "links" : [ "#overrideConfig", "android.content.res.Configuration", "#tmpConfig" ]
  }, {
    "name" : "private static Configuration createNewConfigAndUpdateIfNotNull(@NonNull Configuration base, @Nullable Configuration override)",
    "returnType" : "Configuration",
    "comment" : "\n     * Creates a new Configuration only if override would modify base. Otherwise returns base.\n     * @param base The base configuration.\n     * @param override The update to apply to the base configuration. Can be null.\n     * @return A Configuration representing base with override applied.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void performConfigurationChanged(ComponentCallbacks2 cb, Configuration newConfig)",
    "returnType" : "void",
    "comment" : "\n     * Decides whether to update a component's configuration and whether to inform it.\n     * @param cb The component callback to notify of configuration change.\n     * @param newConfig The new configuration.\n     ",
    "links" : [ ]
  }, {
    "name" : "private Configuration performActivityConfigurationChanged(Activity activity, Configuration newConfig, Configuration amOverrideConfig, int displayId, boolean movedToDifferentDisplay)",
    "returnType" : "Configuration",
    "comment" : "\n     * Decides whether to update an Activity's configuration and whether to inform it.\n     * @param activity The activity to notify of configuration change.\n     * @param newConfig The new configuration.\n     * @param amOverrideConfig The override config that differentiates the Activity's configuration\n     *                         from the base global configuration. This is supplied by\n     *                         ActivityManager.\n     * @param displayId Id of the display where activity currently resides.\n     * @param movedToDifferentDisplay Indicates if the activity was moved to different display.\n     * @return Configuration sent to client, null if no changes and not moved to different display.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void applyConfigurationToResources(Configuration config)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final Configuration applyCompatConfiguration(int displayDensity)",
    "returnType" : "Configuration",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void handleConfigurationChanged(Configuration config)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleConfigurationChanged(Configuration config, CompatibilityInfo compat)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleWindowingModeChangeIfNeeded(Activity activity, Configuration newConfiguration)",
    "returnType" : "void",
    "comment" : "\n     * Sends windowing mode change callbacks to {@link Activity} if applicable.\n     *\n     * See also {@link Activity#onMultiWindowModeChanged(boolean, Configuration)} and\n     * {@link Activity#onPictureInPictureModeChanged(boolean, Configuration)}\n     ",
    "links" : [ "android.app.Activity#onMultiWindowModeChanged(boolean", "android.app.Activity#onPictureInPictureModeChanged(boolean", "android.app.Activity" ]
  }, {
    "name" : "public void handleSystemApplicationInfoChanged(@NonNull ApplicationInfo ai)",
    "returnType" : "void",
    "comment" : "\n     * Updates the application info.\n     *\n     * This only works in the system process. Must be called on the main thread.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void handleApplicationInfoChanged(@NonNull final ApplicationInfo ai)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void freeTextLayoutCachesIfNeeded(int configDiff)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void updatePendingActivityConfiguration(IBinder activityToken, Configuration overrideConfig)",
    "returnType" : "void",
    "comment" : "\n     * Sets the supplied {@code overrideConfig} as pending for the {@code activityToken}. Calling\n     * this method prevents any calls to\n     * {@link #handleActivityConfigurationChanged(IBinder, Configuration, int, boolean)} from\n     * processing any configurations older than {@code overrideConfig}.\n     ",
    "links" : [ "#handleActivityConfigurationChanged(IBinder" ]
  }, {
    "name" : "public void handleActivityConfigurationChanged(IBinder activityToken, @NonNull Configuration overrideConfig, int displayId)",
    "returnType" : "void",
    "comment" : "\n     * Handle new activity configuration and/or move to a different display. This method is a noop\n     * if {@link #updatePendingActivityConfiguration(IBinder, Configuration)} has been called with\n     * a newer config than {@code overrideConfig}.\n     *\n     * @param activityToken Target activity token.\n     * @param overrideConfig Activity override config.\n     * @param displayId Id of the display where activity was moved to, -1 if there was no move and\n     *                  value didn't change.\n     ",
    "links" : [ "#updatePendingActivityConfiguration(IBinder" ]
  }, {
    "name" : " final void handleProfilerControl(boolean start, ProfilerInfo profilerInfo, int profileType)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void stopProfiling()",
    "returnType" : "void",
    "comment" : "\n     * Public entrypoint to stop profiling. This is required to end profiling when the app crashes,\n     * so that profiler data won't be lost.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " static void handleDumpHeap(DumpHeapData dhd)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final void handleDispatchPackageBroadcast(int cmd, String[] packages)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final void handleLowMemory()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleTrimMemory(int level)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setupGraphicsSupport(Context context)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateDefaultDensity()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String getInstrumentationLibrary(ApplicationInfo appInfo, InstrumentationInfo insInfo)",
    "returnType" : "String",
    "comment" : "\n     * Returns the correct library directory for the current ABI.\n     * <p>\n     * If we're dealing with a multi-arch application that has both 32 and 64 bit shared\n     * libraries, we might need to choose the secondary depending on what the current\n     * runtime's instruction set is.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void updateLocaleListFromAppContext(Context context, LocaleList newLocaleList)",
    "returnType" : "void",
    "comment" : "\n     * The LocaleList set for the app's resources may have been shuffled so that the preferred\n     * Locale is at position 0. We must find the index of this preferred Locale in the\n     * original LocaleList.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void handleBindApplication(AppBindData data)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final void finishInstrumentation(int resultCode, Bundle results)",
    "returnType" : "void",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : "private void installContentProviders(Context context, List<ProviderInfo> providers)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final IContentProvider acquireProvider(Context c, String auth, int userId, boolean stable)",
    "returnType" : "IContentProvider",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Object getGetProviderLock(String auth, int userId)",
    "returnType" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final void incProviderRefLocked(ProviderRefCount prc, boolean stable)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final IContentProvider acquireExistingProvider(Context c, String auth, int userId, boolean stable)",
    "returnType" : "IContentProvider",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final boolean releaseProvider(IContentProvider provider, boolean stable)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final void completeRemoveProvider(ProviderRefCount prc)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final void handleUnstableProviderDied(IBinder provider, boolean fromClient)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final void handleUnstableProviderDiedLocked(IBinder provider, boolean fromClient)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final void appNotRespondingViaProvider(IBinder provider)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private ProviderClientRecord installProviderAuthoritiesLocked(IContentProvider provider, ContentProvider localProvider, ContentProviderHolder holder)",
    "returnType" : "ProviderClientRecord",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private ContentProviderHolder installProvider(Context context, ContentProviderHolder holder, ProviderInfo info, boolean noisy, boolean noReleaseNeeded, boolean stable)",
    "returnType" : "ContentProviderHolder",
    "comment" : "\n     * Installs the provider.\n     *\n     * Providers that are local to the process or that come from the system server\n     * may be installed permanently which is indicated by setting noReleaseNeeded to true.\n     * Other remote providers are reference counted.  The initial reference count\n     * for all reference counted providers is one.  Providers that are not reference\n     * counted do not have a reference count (at all).\n     *\n     * This method detects when a provider has already been installed.  When this happens,\n     * it increments the reference count of the existing provider (if appropriate)\n     * and returns the existing provider.  This can happen due to concurrent\n     * attempts to acquire the same provider.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void handleRunIsolatedEntryPoint(String entryPoint, String[] entryPointArgs)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void attach(boolean system, long startSeq)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static ActivityThread systemMain()",
    "returnType" : "ActivityThread",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void updateHttpProxy(@NonNull Context context)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final void installSystemProviders(List<ProviderInfo> providers)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Bundle getCoreSettings()",
    "returnType" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getIntCoreSetting(String key, int defaultValue)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getStringCoreSetting(String key, String defaultValue)",
    "returnType" : "String",
    "comment" : "\n     * Get the string value of the given key from core settings.\n     ",
    "links" : [ ]
  }, {
    "name" : " float getFloatCoreSetting(String key, float defaultValue)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void main(String[] args)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void initializeMainlineModules()",
    "returnType" : "void",
    "comment" : "\n     * Call various initializer APIs in mainline modules that need to be called when each process\n     * starts.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void purgePendingResources()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native void nPurgePendingResources()",
    "returnType" : "void",
    "comment" : " ------------------ Regular JNI ------------------------",
    "links" : [ ]
  }, {
    "name" : "private native void nDumpGraphicsInfo(FileDescriptor fd)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native void nInitZygoteChildHeapProfiling()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "THUMBNAIL_FORMAT", "localLOGV", "DEBUG_MESSAGES", "DEBUG_BROADCAST", "DEBUG_RESULTS", "DEBUG_BACKUP", "DEBUG_CONFIGURATION", "DEBUG_SERVICE", "DEBUG_MEMORY_TRIM", "DEBUG_PROVIDER", "DEBUG_ORDER", "MIN_TIME_BETWEEN_GCS", "PENDING_TOP_PROCESS_STATE_TIMEOUT", "CONTENT_PROVIDER_RETAIN_TIME", "SQLITE_MEM_RELEASED_EVENT_LOG_TAG", "SERVICE_DONE_EXECUTING_ANON", "SERVICE_DONE_EXECUTING_START", "SERVICE_DONE_EXECUTING_STOP", "REPORT_TO_ACTIVITY", "VM_PROCESS_STATE_JANK_PERCEPTIBLE", "VM_PROCESS_STATE_JANK_IMPERCEPTIBLE", "INVALID_PROC_STATE_SEQ", "PROC_START_SEQ_IDENT", "mNetworkPolicyLock", "mNetworkBlockSeq", "mSystemContext", "mSystemUiContext", "sPackageManager", "sPermissionManager", "mAppThread", "mLooper", "mH", "mExecutor", "mActivities", "mActivitiesToBeDestroyed", "mNewActivities", "mNumVisibleActivities", "mNumLaunchingActivities", "mLastProcessState", "mPendingProcessState", "mLastAssistStructures", "mLastSessionId", "mServices", "mBoundApplication", "mProfiler", "mCurDefaultDisplayDpi", "mDensityCompatMode", "mConfiguration", "mCompatConfiguration", "mInitialApplication", "mAllApplications", "mBackupAgentsByUser", "sCurrentActivityThread", "mInstrumentation", "mInstrumentationPackageName", "mInstrumentationAppDir", "mInstrumentationSplitAppDirs", "mInstrumentationLibDir", "mInstrumentedAppDir", "mInstrumentedSplitAppDirs", "mInstrumentedLibDir", "mSystemThread", "mSomeActivitiesChanged", "mHiddenApiWarningShown", "mPackages", "mResourcePackages", "mRelaunchingActivities", "mPendingConfiguration", "mTransactionExecutor", "mResourcesManager", "mActiveRotationAdjustments", "mRemoteCancellations", "mLastReportedWindowingMode", "mProviderMap", "mProviderRefCountMap", "mLocalProviders", "mLocalProvidersByName", "mGetProviderLocks", "mOnPauseListeners", "mGcIdler", "mPurgeIdler", "mPurgeIdlerScheduled", "mGcIdlerScheduled", "sMainThreadHandler", "mCoreSettings", "mHasImeComponent", "mMainThreadConfig", "HEAP_FULL_COLUMN", "HEAP_COLUMN", "ONE_COUNT_COLUMN", "TWO_COUNT_COLUMNS", "THREE_COUNT_COLUMNS", "TWO_COUNT_COLUMN_HEADER", "ONE_ALT_COUNT_COLUMN", "ACTIVITY_THREAD_CHECKIN_VERSION", "sCurrentBroadcastIntent" ],
  "methodNames" : [ "private SafeCancellationTransport createSafeCancellationTransport(@NonNull CancellationSignal cancellationSignal)", "private CancellationSignal removeSafeCancellationTransport(@NonNull SafeCancellationTransport transport)", "public static ActivityThread currentActivityThread()", "public static boolean isSystem()", "public static String currentOpPackageName()", "public static String currentPackageName()", "public static String currentProcessName()", "public static Application currentApplication()", "public static IPackageManager getPackageManager()", "public static IPermissionManager getPermissionManager()", " Configuration applyConfigCompatMainThread(int displayDensity, Configuration config, CompatibilityInfo compat)", " Resources getTopLevelResources(String resDir, String[] splitResDirs, String[] overlayDirs, String[] libDirs, int displayId, LoadedApk pkgInfo)", " final Handler getHandler()", "public final LoadedApk getPackageInfo(String packageName, CompatibilityInfo compatInfo, int flags)", "public final LoadedApk getPackageInfo(String packageName, CompatibilityInfo compatInfo, int flags, int userId)", "public final LoadedApk getPackageInfo(ApplicationInfo ai, CompatibilityInfo compatInfo, int flags)", "public final LoadedApk getPackageInfoNoCheck(ApplicationInfo ai, CompatibilityInfo compatInfo)", "public final LoadedApk peekPackageInfo(String packageName, boolean includeCode)", "private LoadedApk getPackageInfo(ApplicationInfo aInfo, CompatibilityInfo compatInfo, ClassLoader baseLoader, boolean securityViolation, boolean includeCode, boolean registerPackage)", "private static boolean isLoadedApkResourceDirsUpToDate(LoadedApk loadedApk, ApplicationInfo appInfo)", "public ApplicationThread getApplicationThread()", "public Instrumentation getInstrumentation()", "public boolean isProfiling()", "public String getProfileFilePath()", "public Looper getLooper()", "public Executor getExecutor()", "public Application getApplication()", "public String getProcessName()", "public ContextImpl getSystemContext()", "public ContextImpl getSystemUiContext()", "public ContextImpl createSystemUiContext(int displayId)", "public void installSystemApplicationInfo(ApplicationInfo info, ClassLoader classLoader)", " void scheduleGcIdler()", " void unscheduleGcIdler()", " void schedulePurgeIdler()", " void unschedulePurgeIdler()", " void doGcIfNeeded()", " void doGcIfNeeded(String reason)", " static void printRow(PrintWriter pw, String format, Object... objs)", "public static void dumpMemInfoTable(PrintWriter pw, Debug.MemoryInfo memInfo, boolean checkin, boolean dumpFullInfo, boolean dumpDalvik, boolean dumpSummaryOnly, int pid, String processName, long nativeMax, long nativeAllocated, long nativeFree, long dalvikMax, long dalvikAllocated, long dalvikFree)", "private static void dumpMemoryInfo(ProtoOutputStream proto, long fieldId, String name, int pss, int cleanPss, int sharedDirty, int privateDirty, int sharedClean, int privateClean, boolean hasSwappedOutPss, int dirtySwap, int dirtySwapPss, int rss)", "public static void dumpMemInfoTable(ProtoOutputStream proto, Debug.MemoryInfo memInfo, boolean dumpDalvik, boolean dumpSummaryOnly, long nativeMax, long nativeAllocated, long nativeFree, long dalvikMax, long dalvikAllocated, long dalvikFree)", "public void registerOnActivityPausedListener(Activity activity, OnActivityPausedListener listener)", "public void unregisterOnActivityPausedListener(Activity activity, OnActivityPausedListener listener)", "public final ActivityInfo resolveActivityInfo(Intent intent)", "public final Activity startActivityNow(Activity parent, String id, Intent intent, ActivityInfo activityInfo, IBinder token, Bundle state, Activity.NonConfigurationInstances lastNonConfigurationInstances, IBinder assistToken)", "public final Activity getActivity(IBinder token)", "public ActivityClientRecord getActivityClient(IBinder token)", "public Configuration getConfiguration()", "public void updatePendingConfiguration(Configuration config)", "public void updateProcessState(int processState, boolean fromIpc)", "private void updateVmProcessState(int processState)", "private void applyPendingProcessState()", "public void countLaunchingActivities(int num)", "public final void sendActivityResult(IBinder token, String id, int requestCode, int resultCode, Intent data)", " TransactionExecutor getTransactionExecutor()", " void sendMessage(int what, Object obj)", "private void sendMessage(int what, Object obj, int arg1)", "private void sendMessage(int what, Object obj, int arg1, int arg2)", "private void sendMessage(int what, Object obj, int arg1, int arg2, boolean async)", "private void sendMessage(int what, Object obj, int arg1, int arg2, int seq)", " final void scheduleContextCleanup(ContextImpl context, String who, String what)", "public void handleFixedRotationAdjustments(@NonNull IBinder token, @Nullable FixedRotationAdjustments fixedRotationAdjustments)", "private void handleFixedRotationAdjustments(@NonNull IBinder token, @Nullable FixedRotationAdjustments fixedRotationAdjustments, @Nullable Configuration overrideConfig)", "private Activity performLaunchActivity(ActivityClientRecord r, Intent customIntent)", "public void handleStartActivity(IBinder token, PendingTransactionActions pendingActions)", "private void checkAndBlockForNetworkAccess()", "private ContextImpl createBaseContextForActivity(ActivityClientRecord r)", "public Activity handleLaunchActivity(ActivityClientRecord r, PendingTransactionActions pendingActions, Intent customIntent)", "private void reportSizeConfigurations(ActivityClientRecord r)", "private void deliverNewIntents(ActivityClientRecord r, List<ReferrerIntent> intents)", "public void handleNewIntent(IBinder token, List<ReferrerIntent> intents)", "public void handleRequestAssistContextExtras(RequestAssistContextExtras cmd)", "private void handleRequestDirectActions(@NonNull IBinder activityToken, @NonNull IVoiceInteractor interactor, @NonNull CancellationSignal cancellationSignal, @NonNull RemoteCallback callback)", "private void handlePerformDirectAction(@NonNull IBinder activityToken, @NonNull String actionId, @Nullable Bundle arguments, @NonNull CancellationSignal cancellationSignal, @NonNull RemoteCallback resultCallback)", "public void handleTranslucentConversionComplete(IBinder token, boolean drawComplete)", "public void onNewActivityOptions(IBinder token, ActivityOptions options)", "public void handleInstallProvider(ProviderInfo info)", "private void handleEnterAnimationComplete(IBinder token)", "private void handleStartBinderTracking()", "private void handleStopBinderTrackingAndDump(ParcelFileDescriptor fd)", "public void handlePictureInPictureRequested(IBinder token)", "private void schedulePauseWithUserLeaveHintAndReturnToCurrentState(ActivityClientRecord r)", "private void schedulePauseWithUserLeavingHint(ActivityClientRecord r)", "private void scheduleResume(ActivityClientRecord r)", "private void handleLocalVoiceInteractionStarted(IBinder token, IVoiceInteractor interactor)", "private static boolean attemptAttachAgent(String agent, ClassLoader classLoader)", " static void handleAttachAgent(String agent, LoadedApk loadedApk)", " static void handleAttachStartupAgents(String dataDir)", "public static Intent getIntentBeingBroadcast()", "private void handleReceiver(ReceiverData data)", "private void handleCreateBackupAgent(CreateBackupAgentData data)", "private void handleDestroyBackupAgent(CreateBackupAgentData data)", "private ArrayMap<String, BackupAgent> getBackupAgentsForUser(int userId)", "private void handleCreateService(CreateServiceData data)", "private void handleBindService(BindServiceData data)", "private void handleUnbindService(BindServiceData data)", "private void handleDumpService(DumpComponentInfo info)", "private void handleDumpActivity(DumpComponentInfo info)", "private void handleDumpProvider(DumpComponentInfo info)", "private void handleServiceArgs(ServiceArgsData data)", "private void handleStopService(IBinder token)", "public ActivityClientRecord performResumeActivity(IBinder token, boolean finalStateRequest, String reason)", " static final void cleanUpPendingRemoveWindows(ActivityClientRecord r, boolean force)", "public void handleResumeActivity(IBinder token, boolean finalStateRequest, boolean isForward, String reason)", "public void handleTopResumedActivityChanged(IBinder token, boolean onTop, String reason)", "private void reportTopResumedActivityChanged(ActivityClientRecord r, boolean onTop, String reason)", "public void handlePauseActivity(IBinder token, boolean finished, boolean userLeaving, int configChanges, PendingTransactionActions pendingActions, String reason)", " final void performUserLeavingActivity(ActivityClientRecord r)", " final Bundle performPauseActivity(IBinder token, boolean finished, String reason, PendingTransactionActions pendingActions)", "private Bundle performPauseActivity(ActivityClientRecord r, boolean finished, String reason, PendingTransactionActions pendingActions)", "private void performPauseActivityIfNeeded(ActivityClientRecord r, String reason)", " final void performStopActivity(IBinder token, boolean saveState, String reason)", "private void performStopActivityInner(ActivityClientRecord r, StopInfo info, boolean saveState, boolean finalStateRequest, String reason)", "private void callActivityOnStop(ActivityClientRecord r, boolean saveState, String reason)", "private void updateVisibility(ActivityClientRecord r, boolean show)", "public void handleStopActivity(IBinder token, int configChanges, PendingTransactionActions pendingActions, boolean finalStateRequest, String reason)", "public void reportStop(PendingTransactionActions pendingActions)", "public void performRestartActivity(IBinder token, boolean start)", "private void handleSetCoreSettings(Bundle coreSettings)", "private void onCoreSettingsChange()", "private boolean updateDebugViewAttributeState()", "private void relaunchAllActivities(boolean preserveWindows)", "private void handleUpdatePackageCompatibilityInfo(UpdateCompatibilityData data)", "private void deliverResults(ActivityClientRecord r, List<ResultInfo> results, String reason)", "public void handleSendResult(IBinder token, List<ResultInfo> results, String reason)", " ActivityClientRecord performDestroyActivity(IBinder token, boolean finishing, int configChanges, boolean getNonConfigInstance, String reason)", "private static String safeToComponentShortString(Intent intent)", "public Map<IBinder, ClientTransactionItem> getActivitiesToBeDestroyed()", "public void handleDestroyActivity(IBinder token, boolean finishing, int configChanges, boolean getNonConfigInstance, String reason)", "public ActivityClientRecord prepareRelaunchActivity(IBinder token, List<ResultInfo> pendingResults, List<ReferrerIntent> pendingNewIntents, int configChanges, MergedConfiguration config, boolean preserveWindow)", "public void handleRelaunchActivity(ActivityClientRecord tmp, PendingTransactionActions pendingActions)", " void scheduleRelaunchActivity(IBinder token)", "private void handleRelaunchActivityLocally(IBinder token)", "private void handleRelaunchActivityInner(ActivityClientRecord r, int configChanges, List<ResultInfo> pendingResults, List<ReferrerIntent> pendingIntents, PendingTransactionActions pendingActions, boolean startsNotResumed, Configuration overrideConfig, String reason)", "public void reportRelaunch(IBinder token, PendingTransactionActions pendingActions)", "private void callActivityOnSaveInstanceState(ActivityClientRecord r)", " ArrayList<ComponentCallbacks2> collectComponentCallbacks(boolean allActivities, Configuration newConfig)", "private void performConfigurationChangedForActivity(ActivityClientRecord r, Configuration newBaseConfig)", "private Configuration performConfigurationChangedForActivity(ActivityClientRecord r, Configuration newBaseConfig, int displayId, boolean movedToDifferentDisplay)", "private static Configuration createNewConfigAndUpdateIfNotNull(@NonNull Configuration base, @Nullable Configuration override)", "private void performConfigurationChanged(ComponentCallbacks2 cb, Configuration newConfig)", "private Configuration performActivityConfigurationChanged(Activity activity, Configuration newConfig, Configuration amOverrideConfig, int displayId, boolean movedToDifferentDisplay)", "public final void applyConfigurationToResources(Configuration config)", " final Configuration applyCompatConfiguration(int displayDensity)", "public void handleConfigurationChanged(Configuration config)", "private void handleConfigurationChanged(Configuration config, CompatibilityInfo compat)", "private void handleWindowingModeChangeIfNeeded(Activity activity, Configuration newConfiguration)", "public void handleSystemApplicationInfoChanged(@NonNull ApplicationInfo ai)", "public void handleApplicationInfoChanged(@NonNull final ApplicationInfo ai)", " static void freeTextLayoutCachesIfNeeded(int configDiff)", "public void updatePendingActivityConfiguration(IBinder activityToken, Configuration overrideConfig)", "public void handleActivityConfigurationChanged(IBinder activityToken, @NonNull Configuration overrideConfig, int displayId)", " final void handleProfilerControl(boolean start, ProfilerInfo profilerInfo, int profileType)", "public void stopProfiling()", " static void handleDumpHeap(DumpHeapData dhd)", " final void handleDispatchPackageBroadcast(int cmd, String[] packages)", " final void handleLowMemory()", "private void handleTrimMemory(int level)", "private void setupGraphicsSupport(Context context)", "private void updateDefaultDensity()", "private String getInstrumentationLibrary(ApplicationInfo appInfo, InstrumentationInfo insInfo)", "private void updateLocaleListFromAppContext(Context context, LocaleList newLocaleList)", "private void handleBindApplication(AppBindData data)", " final void finishInstrumentation(int resultCode, Bundle results)", "private void installContentProviders(Context context, List<ProviderInfo> providers)", "public final IContentProvider acquireProvider(Context c, String auth, int userId, boolean stable)", "private Object getGetProviderLock(String auth, int userId)", "private final void incProviderRefLocked(ProviderRefCount prc, boolean stable)", "public final IContentProvider acquireExistingProvider(Context c, String auth, int userId, boolean stable)", "public final boolean releaseProvider(IContentProvider provider, boolean stable)", " final void completeRemoveProvider(ProviderRefCount prc)", " final void handleUnstableProviderDied(IBinder provider, boolean fromClient)", " final void handleUnstableProviderDiedLocked(IBinder provider, boolean fromClient)", " final void appNotRespondingViaProvider(IBinder provider)", "private ProviderClientRecord installProviderAuthoritiesLocked(IContentProvider provider, ContentProvider localProvider, ContentProviderHolder holder)", "private ContentProviderHolder installProvider(Context context, ContentProviderHolder holder, ProviderInfo info, boolean noisy, boolean noReleaseNeeded, boolean stable)", "private void handleRunIsolatedEntryPoint(String entryPoint, String[] entryPointArgs)", "private void attach(boolean system, long startSeq)", "public static ActivityThread systemMain()", "public static void updateHttpProxy(@NonNull Context context)", "public final void installSystemProviders(List<ProviderInfo> providers)", "public Bundle getCoreSettings()", "public int getIntCoreSetting(String key, int defaultValue)", "public String getStringCoreSetting(String key, String defaultValue)", " float getFloatCoreSetting(String key, float defaultValue)", "public static void main(String[] args)", "public static void initializeMainlineModules()", "private void purgePendingResources()", "private native void nPurgePendingResources()", "private native void nDumpGraphicsInfo(FileDescriptor fd)", "private native void nInitZygoteChildHeapProfiling()" ]
}