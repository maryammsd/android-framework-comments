{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/widget/AbsListView.java",
  "packageName" : "android.widget",
  "className" : "RecycleBin",
  "comment" : "\n     * The RecycleBin facilitates reuse of views across layouts. The RecycleBin has two levels of\n     * storage: ActiveViews and ScrapViews. ActiveViews are those views which were onscreen at the\n     * start of a layout. By construction, they are displaying current information. At the end of\n     * layout, all views in ActiveViews are demoted to ScrapViews. ScrapViews are old views that\n     * could potentially be used by the adapter to avoid allocating views unnecessarily.\n     *\n     * @see android.widget.AbsListView#setRecyclerListener(android.widget.AbsListView.RecyclerListener)\n     * @see android.widget.AbsListView.RecyclerListener\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mRecyclerListener",
    "type" : "RecyclerListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFirstActivePosition",
    "type" : "int",
    "comment" : "\n         * The position of the first view stored in mActiveViews.\n         ",
    "links" : [ ]
  }, {
    "name" : "mActiveViews",
    "type" : "View[]",
    "comment" : "\n         * Views that were on screen at the start of layout. This array is populated at the start of\n         * layout, and at the end of layout all view in mActiveViews are moved to mScrapViews.\n         * Views in mActiveViews represent a contiguous range of Views, with position of the first\n         * view store in mFirstActivePosition.\n         ",
    "links" : [ ]
  }, {
    "name" : "mScrapViews",
    "type" : "ArrayList<View>[]",
    "comment" : "\n         * Unsorted views that can be used by the adapter as a convert view.\n         ",
    "links" : [ ]
  }, {
    "name" : "mViewTypeCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCurrentScrap",
    "type" : "ArrayList<View>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSkippedScrap",
    "type" : "ArrayList<View>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTransientStateViews",
    "type" : "SparseArray<View>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTransientStateViewsById",
    "type" : "LongSparseArray<View>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setViewTypeCount(int viewTypeCount)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void markChildrenDirty()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean shouldRecycleViewType(int viewType)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void clear()",
    "returnType" : "void",
    "comment" : "\n         * Clears the scrap heap.\n         ",
    "links" : [ ]
  }, {
    "name" : " void fillActiveViews(int childCount, int firstActivePosition)",
    "returnType" : "void",
    "comment" : "\n         * Fill ActiveViews with all of the children of the AbsListView.\n         *\n         * @param childCount The minimum number of views mActiveViews should hold\n         * @param firstActivePosition The position of the first view that will be stored in\n         *        mActiveViews\n         ",
    "links" : [ ]
  }, {
    "name" : " View getActiveView(int position)",
    "returnType" : "View",
    "comment" : "\n         * Get the view corresponding to the specified position. The view will be removed from\n         * mActiveViews if it is found.\n         *\n         * @param position The position to look up in mActiveViews\n         * @return The view if it is found, null otherwise\n         ",
    "links" : [ ]
  }, {
    "name" : " View getTransientStateView(int position)",
    "returnType" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void clearTransientStateViews()",
    "returnType" : "void",
    "comment" : "\n         * Dumps and fully detaches any currently saved views with transient\n         * state.\n         ",
    "links" : [ ]
  }, {
    "name" : " View getScrapView(int position)",
    "returnType" : "View",
    "comment" : "\n         * @return A view from the ScrapViews collection. These are unordered.\n         ",
    "links" : [ ]
  }, {
    "name" : " void addScrapView(View scrap, int position)",
    "returnType" : "void",
    "comment" : "\n         * Puts a view into the list of scrap views.\n         * <p>\n         * If the list data hasn't changed or the adapter has stable IDs, views\n         * with transient state will be preserved for later retrieval.\n         *\n         * @param scrap The view to add\n         * @param position The view's position within its parent\n         ",
    "links" : [ ]
  }, {
    "name" : "private ArrayList<View> getSkippedScrap()",
    "returnType" : "ArrayList<View>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void removeSkippedScrap()",
    "returnType" : "void",
    "comment" : "\n         * Finish the removal of any views that skipped the scrap heap.\n         ",
    "links" : [ ]
  }, {
    "name" : " void scrapActiveViews()",
    "returnType" : "void",
    "comment" : "\n         * Move all views remaining in mActiveViews to mScrapViews.\n         ",
    "links" : [ ]
  }, {
    "name" : " void fullyDetachScrapViews()",
    "returnType" : "void",
    "comment" : "\n         * At the end of a layout pass, all temp detached views should either be re-attached or\n         * completely detached. This method ensures that any remaining view in the scrap list is\n         * fully detached.\n         ",
    "links" : [ ]
  }, {
    "name" : "private void pruneScrapViews()",
    "returnType" : "void",
    "comment" : "\n         * Makes sure that the size of mScrapViews does not exceed the size of\n         * mActiveViews, which can happen if an adapter does not recycle its\n         * views. Removes cached transient state views that no longer have\n         * transient state.\n         ",
    "links" : [ ]
  }, {
    "name" : " void reclaimScrapViews(List<View> views)",
    "returnType" : "void",
    "comment" : "\n         * Puts all views in the scrap heap into the supplied list.\n         ",
    "links" : [ ]
  }, {
    "name" : " void setCacheColorHint(int color)",
    "returnType" : "void",
    "comment" : "\n         * Updates the cache color hint of all known views.\n         *\n         * @param color The new cache color hint.\n         ",
    "links" : [ ]
  }, {
    "name" : "private View retrieveFromScrap(ArrayList<View> scrapViews, int position)",
    "returnType" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void clearScrap(final ArrayList<View> scrap)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void clearScrapForRebind(View view)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void removeDetachedView(View child, boolean animate)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setViewTypeCount(int viewTypeCount)", "public void markChildrenDirty()", "public boolean shouldRecycleViewType(int viewType)", " void clear()", " void fillActiveViews(int childCount, int firstActivePosition)", " View getActiveView(int position)", " View getTransientStateView(int position)", " void clearTransientStateViews()", " View getScrapView(int position)", " void addScrapView(View scrap, int position)", "private ArrayList<View> getSkippedScrap()", " void removeSkippedScrap()", " void scrapActiveViews()", " void fullyDetachScrapViews()", "private void pruneScrapViews()", " void reclaimScrapViews(List<View> views)", " void setCacheColorHint(int color)", "private View retrieveFromScrap(ArrayList<View> scrapViews, int position)", "private void clearScrap(final ArrayList<View> scrap)", "private void clearScrapForRebind(View view)", "private void removeDetachedView(View child, boolean animate)" ],
  "variableNames" : [ "mRecyclerListener", "mFirstActivePosition", "mActiveViews", "mScrapViews", "mViewTypeCount", "mCurrentScrap", "mSkippedScrap", "mTransientStateViews", "mTransientStateViewsById" ]
}