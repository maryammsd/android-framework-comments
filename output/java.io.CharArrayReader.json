{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/io/CharArrayReader.java",
  "packageName" : "java.io",
  "className" : "CharArrayReader",
  "comment" : "\n * This class implements a character buffer that can be used as a\n * character-input stream.\n *\n * @author      Herb Jellinek\n * @since       1.1\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "buf",
    "type" : "char[]",
    "comment" : " The character buffer. ",
    "links" : [ ]
  }, {
    "name" : "pos",
    "type" : "int",
    "comment" : " The current buffer position. ",
    "links" : [ ]
  }, {
    "name" : "markedPos",
    "type" : "int",
    "comment" : " The position of mark in buffer. ",
    "links" : [ ]
  }, {
    "name" : "count",
    "type" : "int",
    "comment" : "\n     *  The index of the end of this buffer.  There is not valid\n     *  data at or beyond this index.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void ensureOpen() throws IOException",
    "returnType" : "void",
    "comment" : " Checks to make sure that the stream has not been closed ",
    "links" : [ ]
  }, {
    "name" : "public int read() throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Reads a single character.\n     *\n     * @throws      IOException  If an I/O error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "public int read(char[] cbuf, int off, int len) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Reads characters into a portion of an array.\n     *\n     * <p> If {@code len} is zero, then no characters are read and {@code 0} is\n     * returned; otherwise, there is an attempt to read at least one character.\n     * If no character is available because the stream is at its end, the value\n     * {@code -1} is returned; otherwise, at least one character is read and\n     * stored into {@code cbuf}.\n     *\n     * @param      cbuf  {@inheritDoc}\n     * @param      off   {@inheritDoc}\n     * @param      len   {@inheritDoc}\n     *\n     * @return     {@inheritDoc}\n     *\n     * @throws     IndexOutOfBoundsException  {@inheritDoc}\n     * @throws     IOException  {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public int read(CharBuffer target) throws IOException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public long skip(long n) throws IOException",
    "returnType" : "long",
    "comment" : "\n     * Skips characters. If the stream is already at its end before this method\n     * is invoked, then no characters are skipped and zero is returned.\n     *\n     * <p>The {@code n} parameter may be negative, even though the\n     * {@code skip} method of the {@link Reader} superclass throws\n     * an exception in this case. If {@code n} is negative, then\n     * this method does nothing and returns {@code 0}.\n     *\n     * @param n {@inheritDoc}\n     *\n     * @return {@inheritDoc}\n     *\n     * @throws IOException {@inheritDoc}\n     ",
    "links" : [ "java.io.Reader" ]
  }, {
    "name" : "public boolean ready() throws IOException",
    "returnType" : "boolean",
    "comment" : "\n     * Tells whether this stream is ready to be read.  Character-array readers\n     * are always ready to be read.\n     *\n     * @throws     IOException  If an I/O error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean markSupported()",
    "returnType" : "boolean",
    "comment" : "\n     * Tells whether this stream supports the mark() operation, which it does.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void mark(int readAheadLimit) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Marks the present position in the stream.  Subsequent calls to reset()\n     * will reposition the stream to this point.\n     *\n     * @param  readAheadLimit  Limit on the number of characters that may be\n     *                         read while still preserving the mark.  Because\n     *                         the stream's input comes from a character array,\n     *                         there is no actual limit; hence this argument is\n     *                         ignored.\n     *\n     * @throws     IOException  If an I/O error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "public void reset() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Resets the stream to the most recent mark, or to the beginning if it has\n     * never been marked.\n     *\n     * @throws     IOException  If an I/O error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "\n     * Closes the stream and releases any system resources associated with\n     * it.  Once the stream has been closed, further read(), ready(),\n     * mark(), reset(), or skip() invocations will throw an IOException.\n     * Closing a previously closed stream has no effect. This method will block\n     * while there is another thread blocking on the reader.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void ensureOpen() throws IOException", "public int read() throws IOException", "public int read(char[] cbuf, int off, int len) throws IOException", "public int read(CharBuffer target) throws IOException", "public long skip(long n) throws IOException", "public boolean ready() throws IOException", "public boolean markSupported()", "public void mark(int readAheadLimit) throws IOException", "public void reset() throws IOException", "public void close()" ],
  "variableNames" : [ "buf", "pos", "markedPos", "count" ]
}