{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/concurrent/atomic/AtomicInteger.java",
  "packageName" : "java.util.concurrent.atomic",
  "className" : "AtomicInteger",
  "comment" : "\n * An {@code int} value that may be updated atomically.  See the\n * {@link VarHandle} specification for descriptions of the properties\n * of atomic accesses. An {@code AtomicInteger} is used in\n * applications such as atomically incremented counters, and cannot be\n * used as a replacement for an {@link java.lang.Integer}. However,\n * this class does extend {@code Number} to allow uniform access by\n * tools and utilities that deal with numerically-based classes.\n *\n * @since 1.5\n * @author Doug Lea\n ",
  "links" : [ "java.lang.invoke.VarHandle", "java.lang.Integer" ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VALUE",
    "type" : "VarHandle",
    "comment" : "     = U.objectFieldOffset(AtomicInteger.class, \"value\");",
    "links" : [ ]
  }, {
    "name" : "value",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final int get()",
    "returnType" : "int",
    "comment" : "\n     * Returns the current value,\n     * with memory effects as specified by {@link VarHandle#getVolatile}.\n     *\n     * @return the current value\n     ",
    "links" : [ "java.lang.invoke.VarHandle#getVolatile" ]
  }, {
    "name" : "public final void set(int newValue)",
    "returnType" : "void",
    "comment" : "\n     * Sets the value to {@code newValue},\n     * with memory effects as specified by {@link VarHandle#setVolatile}.\n     *\n     * @param newValue the new value\n     ",
    "links" : [ "java.lang.invoke.VarHandle#setVolatile" ]
  }, {
    "name" : "public final void lazySet(int newValue)",
    "returnType" : "void",
    "comment" : "\n     * Sets the value to {@code newValue},\n     * with memory effects as specified by {@link VarHandle#setRelease}.\n     *\n     * @param newValue the new value\n     * @since 1.6\n     ",
    "links" : [ "java.lang.invoke.VarHandle#setRelease" ]
  }, {
    "name" : "public final int getAndSet(int newValue)",
    "returnType" : "int",
    "comment" : "\n     * Atomically sets the value to {@code newValue} and returns the old value,\n     * with memory effects as specified by {@link VarHandle#getAndSet}.\n     *\n     * @param newValue the new value\n     * @return the previous value\n     ",
    "links" : [ "java.lang.invoke.VarHandle#getAndSet" ]
  }, {
    "name" : "public final boolean compareAndSet(int expectedValue, int newValue)",
    "returnType" : "boolean",
    "comment" : "\n     * Atomically sets the value to {@code newValue}\n     * if the current value {@code == expectedValue},\n     * with memory effects as specified by {@link VarHandle#compareAndSet}.\n     *\n     * @param expectedValue the expected value\n     * @param newValue the new value\n     * @return {@code true} if successful. False return indicates that\n     * the actual value was not equal to the expected value.\n     ",
    "links" : [ "java.lang.invoke.VarHandle#compareAndSet" ]
  }, {
    "name" : "public final boolean weakCompareAndSet(int expectedValue, int newValue)",
    "returnType" : "boolean",
    "comment" : "\n     * Possibly atomically sets the value to {@code newValue}\n     * if the current value {@code == expectedValue},\n     * with memory effects as specified by {@link VarHandle#weakCompareAndSetPlain}.\n     *\n     * @deprecated This method has plain memory effects but the method\n     * name implies volatile memory effects (see methods such as\n     * {@link #compareAndExchange} and {@link #compareAndSet}).  To avoid\n     * confusion over plain or volatile memory effects it is recommended that\n     * the method {@link #weakCompareAndSetPlain} be used instead.\n     *\n     * @param expectedValue the expected value\n     * @param newValue the new value\n     * @return {@code true} if successful\n     * @see #weakCompareAndSetPlain\n     ",
    "links" : [ "java.lang.invoke.VarHandle#weakCompareAndSetPlain", "#compareAndExchange", "#compareAndSet", "#weakCompareAndSetPlain" ]
  }, {
    "name" : "public final boolean weakCompareAndSetPlain(int expectedValue, int newValue)",
    "returnType" : "boolean",
    "comment" : "\n     * Possibly atomically sets the value to {@code newValue}\n     * if the current value {@code == expectedValue},\n     * with memory effects as specified by {@link VarHandle#weakCompareAndSetPlain}.\n     *\n     * @param expectedValue the expected value\n     * @param newValue the new value\n     * @return {@code true} if successful\n     * @since 9\n     ",
    "links" : [ "java.lang.invoke.VarHandle#weakCompareAndSetPlain" ]
  }, {
    "name" : "public final int getAndIncrement()",
    "returnType" : "int",
    "comment" : "\n     * Atomically increments the current value,\n     * with memory effects as specified by {@link VarHandle#getAndAdd}.\n     *\n     * <p>Equivalent to {@code getAndAdd(1)}.\n     *\n     * @return the previous value\n     ",
    "links" : [ "java.lang.invoke.VarHandle#getAndAdd" ]
  }, {
    "name" : "public final int getAndDecrement()",
    "returnType" : "int",
    "comment" : "\n     * Atomically decrements the current value,\n     * with memory effects as specified by {@link VarHandle#getAndAdd}.\n     *\n     * <p>Equivalent to {@code getAndAdd(-1)}.\n     *\n     * @return the previous value\n     ",
    "links" : [ "java.lang.invoke.VarHandle#getAndAdd" ]
  }, {
    "name" : "public final int getAndAdd(int delta)",
    "returnType" : "int",
    "comment" : "\n     * Atomically adds the given value to the current value,\n     * with memory effects as specified by {@link VarHandle#getAndAdd}.\n     *\n     * @param delta the value to add\n     * @return the previous value\n     ",
    "links" : [ "java.lang.invoke.VarHandle#getAndAdd" ]
  }, {
    "name" : "public final int incrementAndGet()",
    "returnType" : "int",
    "comment" : "\n     * Atomically increments the current value,\n     * with memory effects as specified by {@link VarHandle#getAndAdd}.\n     *\n     * <p>Equivalent to {@code addAndGet(1)}.\n     *\n     * @return the updated value\n     ",
    "links" : [ "java.lang.invoke.VarHandle#getAndAdd" ]
  }, {
    "name" : "public final int decrementAndGet()",
    "returnType" : "int",
    "comment" : "\n     * Atomically decrements the current value,\n     * with memory effects as specified by {@link VarHandle#getAndAdd}.\n     *\n     * <p>Equivalent to {@code addAndGet(-1)}.\n     *\n     * @return the updated value\n     ",
    "links" : [ "java.lang.invoke.VarHandle#getAndAdd" ]
  }, {
    "name" : "public final int addAndGet(int delta)",
    "returnType" : "int",
    "comment" : "\n     * Atomically adds the given value to the current value,\n     * with memory effects as specified by {@link VarHandle#getAndAdd}.\n     *\n     * @param delta the value to add\n     * @return the updated value\n     ",
    "links" : [ "java.lang.invoke.VarHandle#getAndAdd" ]
  }, {
    "name" : "public final int getAndUpdate(IntUnaryOperator updateFunction)",
    "returnType" : "int",
    "comment" : "\n     * Atomically updates (with memory effects as specified by {@link\n     * VarHandle#compareAndSet}) the current value with the results of\n     * applying the given function, returning the previous value. The\n     * function should be side-effect-free, since it may be re-applied\n     * when attempted updates fail due to contention among threads.\n     *\n     * @param updateFunction a side-effect-free function\n     * @return the previous value\n     * @since 1.8\n     ",
    "links" : [ "java.lang.invoke.VarHandle#compareAndSet" ]
  }, {
    "name" : "public final int updateAndGet(IntUnaryOperator updateFunction)",
    "returnType" : "int",
    "comment" : "\n     * Atomically updates (with memory effects as specified by {@link\n     * VarHandle#compareAndSet}) the current value with the results of\n     * applying the given function, returning the updated value. The\n     * function should be side-effect-free, since it may be re-applied\n     * when attempted updates fail due to contention among threads.\n     *\n     * @param updateFunction a side-effect-free function\n     * @return the updated value\n     * @since 1.8\n     ",
    "links" : [ "java.lang.invoke.VarHandle#compareAndSet" ]
  }, {
    "name" : "public final int getAndAccumulate(int x, IntBinaryOperator accumulatorFunction)",
    "returnType" : "int",
    "comment" : "\n     * Atomically updates (with memory effects as specified by {@link\n     * VarHandle#compareAndSet}) the current value with the results of\n     * applying the given function to the current and given values,\n     * returning the previous value. The function should be\n     * side-effect-free, since it may be re-applied when attempted\n     * updates fail due to contention among threads.  The function is\n     * applied with the current value as its first argument, and the\n     * given update as the second argument.\n     *\n     * @param x the update value\n     * @param accumulatorFunction a side-effect-free function of two arguments\n     * @return the previous value\n     * @since 1.8\n     ",
    "links" : [ "java.lang.invoke.VarHandle#compareAndSet" ]
  }, {
    "name" : "public final int accumulateAndGet(int x, IntBinaryOperator accumulatorFunction)",
    "returnType" : "int",
    "comment" : "\n     * Atomically updates (with memory effects as specified by {@link\n     * VarHandle#compareAndSet}) the current value with the results of\n     * applying the given function to the current and given values,\n     * returning the updated value. The function should be\n     * side-effect-free, since it may be re-applied when attempted\n     * updates fail due to contention among threads.  The function is\n     * applied with the current value as its first argument, and the\n     * given update as the second argument.\n     *\n     * @param x the update value\n     * @param accumulatorFunction a side-effect-free function of two arguments\n     * @return the updated value\n     * @since 1.8\n     ",
    "links" : [ "java.lang.invoke.VarHandle#compareAndSet" ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns the String representation of the current value.\n     * @return the String representation of the current value\n     ",
    "links" : [ ]
  }, {
    "name" : "public int intValue()",
    "returnType" : "int",
    "comment" : "\n     * Returns the current value of this {@code AtomicInteger} as an\n     * {@code int},\n     * with memory effects as specified by {@link VarHandle#getVolatile}.\n     *\n     * Equivalent to {@link #get()}.\n     ",
    "links" : [ "#get()", "java.lang.invoke.VarHandle#getVolatile" ]
  }, {
    "name" : "public long longValue()",
    "returnType" : "long",
    "comment" : "\n     * Returns the current value of this {@code AtomicInteger} as a\n     * {@code long} after a widening primitive conversion,\n     * with memory effects as specified by {@link VarHandle#getVolatile}.\n     * @jls 5.1.2 Widening Primitive Conversion\n     ",
    "links" : [ "java.lang.invoke.VarHandle#getVolatile" ]
  }, {
    "name" : "public float floatValue()",
    "returnType" : "float",
    "comment" : "\n     * Returns the current value of this {@code AtomicInteger} as a\n     * {@code float} after a widening primitive conversion,\n     * with memory effects as specified by {@link VarHandle#getVolatile}.\n     * @jls 5.1.2 Widening Primitive Conversion\n     ",
    "links" : [ "java.lang.invoke.VarHandle#getVolatile" ]
  }, {
    "name" : "public double doubleValue()",
    "returnType" : "double",
    "comment" : "\n     * Returns the current value of this {@code AtomicInteger} as a\n     * {@code double} after a widening primitive conversion,\n     * with memory effects as specified by {@link VarHandle#getVolatile}.\n     * @jls 5.1.2 Widening Primitive Conversion\n     ",
    "links" : [ "java.lang.invoke.VarHandle#getVolatile" ]
  }, {
    "name" : "public final int getPlain()",
    "returnType" : "int",
    "comment" : "\n     * Returns the current value, with memory semantics of reading as\n     * if the variable was declared non-{@code volatile}.\n     *\n     * @return the value\n     * @since 9\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void setPlain(int newValue)",
    "returnType" : "void",
    "comment" : "\n     * Sets the value to {@code newValue}, with memory semantics\n     * of setting as if the variable was declared non-{@code volatile}\n     * and non-{@code final}.\n     *\n     * @param newValue the new value\n     * @since 9\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int getOpaque()",
    "returnType" : "int",
    "comment" : "\n     * Returns the current value,\n     * with memory effects as specified by {@link VarHandle#getOpaque}.\n     *\n     * @return the value\n     * @since 9\n     ",
    "links" : [ "java.lang.invoke.VarHandle#getOpaque" ]
  }, {
    "name" : "public final void setOpaque(int newValue)",
    "returnType" : "void",
    "comment" : "\n     * Sets the value to {@code newValue},\n     * with memory effects as specified by {@link VarHandle#setOpaque}.\n     *\n     * @param newValue the new value\n     * @since 9\n     ",
    "links" : [ "java.lang.invoke.VarHandle#setOpaque" ]
  }, {
    "name" : "public final int getAcquire()",
    "returnType" : "int",
    "comment" : "\n     * Returns the current value,\n     * with memory effects as specified by {@link VarHandle#getAcquire}.\n     *\n     * @return the value\n     * @since 9\n     ",
    "links" : [ "java.lang.invoke.VarHandle#getAcquire" ]
  }, {
    "name" : "public final void setRelease(int newValue)",
    "returnType" : "void",
    "comment" : "\n     * Sets the value to {@code newValue},\n     * with memory effects as specified by {@link VarHandle#setRelease}.\n     *\n     * @param newValue the new value\n     * @since 9\n     ",
    "links" : [ "java.lang.invoke.VarHandle#setRelease" ]
  }, {
    "name" : "public final int compareAndExchange(int expectedValue, int newValue)",
    "returnType" : "int",
    "comment" : "\n     * Atomically sets the value to {@code newValue} if the current value,\n     * referred to as the <em>witness value</em>, {@code == expectedValue},\n     * with memory effects as specified by\n     * {@link VarHandle#compareAndExchange}.\n     *\n     * @param expectedValue the expected value\n     * @param newValue the new value\n     * @return the witness value, which will be the same as the\n     * expected value if successful\n     * @since 9\n     ",
    "links" : [ "java.lang.invoke.VarHandle#compareAndExchange" ]
  }, {
    "name" : "public final int compareAndExchangeAcquire(int expectedValue, int newValue)",
    "returnType" : "int",
    "comment" : "\n     * Atomically sets the value to {@code newValue} if the current value,\n     * referred to as the <em>witness value</em>, {@code == expectedValue},\n     * with memory effects as specified by\n     * {@link VarHandle#compareAndExchangeAcquire}.\n     *\n     * @param expectedValue the expected value\n     * @param newValue the new value\n     * @return the witness value, which will be the same as the\n     * expected value if successful\n     * @since 9\n     ",
    "links" : [ "java.lang.invoke.VarHandle#compareAndExchangeAcquire" ]
  }, {
    "name" : "public final int compareAndExchangeRelease(int expectedValue, int newValue)",
    "returnType" : "int",
    "comment" : "\n     * Atomically sets the value to {@code newValue} if the current value,\n     * referred to as the <em>witness value</em>, {@code == expectedValue},\n     * with memory effects as specified by\n     * {@link VarHandle#compareAndExchangeRelease}.\n     *\n     * @param expectedValue the expected value\n     * @param newValue the new value\n     * @return the witness value, which will be the same as the\n     * expected value if successful\n     * @since 9\n     ",
    "links" : [ "java.lang.invoke.VarHandle#compareAndExchangeRelease" ]
  }, {
    "name" : "public final boolean weakCompareAndSetVolatile(int expectedValue, int newValue)",
    "returnType" : "boolean",
    "comment" : "\n     * Possibly atomically sets the value to {@code newValue} if\n     * the current value {@code == expectedValue},\n     * with memory effects as specified by\n     * {@link VarHandle#weakCompareAndSet}.\n     *\n     * @param expectedValue the expected value\n     * @param newValue the new value\n     * @return {@code true} if successful\n     * @since 9\n     ",
    "links" : [ "java.lang.invoke.VarHandle#weakCompareAndSet" ]
  }, {
    "name" : "public final boolean weakCompareAndSetAcquire(int expectedValue, int newValue)",
    "returnType" : "boolean",
    "comment" : "\n     * Possibly atomically sets the value to {@code newValue} if\n     * the current value {@code == expectedValue},\n     * with memory effects as specified by\n     * {@link VarHandle#weakCompareAndSetAcquire}.\n     *\n     * @param expectedValue the expected value\n     * @param newValue the new value\n     * @return {@code true} if successful\n     * @since 9\n     ",
    "links" : [ "java.lang.invoke.VarHandle#weakCompareAndSetAcquire" ]
  }, {
    "name" : "public final boolean weakCompareAndSetRelease(int expectedValue, int newValue)",
    "returnType" : "boolean",
    "comment" : "\n     * Possibly atomically sets the value to {@code newValue} if\n     * the current value {@code == expectedValue},\n     * with memory effects as specified by\n     * {@link VarHandle#weakCompareAndSetRelease}.\n     *\n     * @param expectedValue the expected value\n     * @param newValue the new value\n     * @return {@code true} if successful\n     * @since 9\n     ",
    "links" : [ "java.lang.invoke.VarHandle#weakCompareAndSetRelease" ]
  } ],
  "methodNames" : [ "public final int get()", "public final void set(int newValue)", "public final void lazySet(int newValue)", "public final int getAndSet(int newValue)", "public final boolean compareAndSet(int expectedValue, int newValue)", "public final boolean weakCompareAndSet(int expectedValue, int newValue)", "public final boolean weakCompareAndSetPlain(int expectedValue, int newValue)", "public final int getAndIncrement()", "public final int getAndDecrement()", "public final int getAndAdd(int delta)", "public final int incrementAndGet()", "public final int decrementAndGet()", "public final int addAndGet(int delta)", "public final int getAndUpdate(IntUnaryOperator updateFunction)", "public final int updateAndGet(IntUnaryOperator updateFunction)", "public final int getAndAccumulate(int x, IntBinaryOperator accumulatorFunction)", "public final int accumulateAndGet(int x, IntBinaryOperator accumulatorFunction)", "public String toString()", "public int intValue()", "public long longValue()", "public float floatValue()", "public double doubleValue()", "public final int getPlain()", "public final void setPlain(int newValue)", "public final int getOpaque()", "public final void setOpaque(int newValue)", "public final int getAcquire()", "public final void setRelease(int newValue)", "public final int compareAndExchange(int expectedValue, int newValue)", "public final int compareAndExchangeAcquire(int expectedValue, int newValue)", "public final int compareAndExchangeRelease(int expectedValue, int newValue)", "public final boolean weakCompareAndSetVolatile(int expectedValue, int newValue)", "public final boolean weakCompareAndSetAcquire(int expectedValue, int newValue)", "public final boolean weakCompareAndSetRelease(int expectedValue, int newValue)" ],
  "variableNames" : [ "serialVersionUID", "VALUE", "value" ]
}