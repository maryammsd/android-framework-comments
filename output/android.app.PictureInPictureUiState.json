{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/PictureInPictureUiState.java",
  "packageName" : "android.app",
  "className" : "PictureInPictureUiState",
  "comment" : "\n * Used by {@link Activity#onPictureInPictureUiStateChanged(PictureInPictureUiState)}.\n ",
  "links" : [ "android.app.Activity#onPictureInPictureUiStateChanged(PictureInPictureUiState)" ],
  "variables" : [ {
    "name" : "mIsStashed",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsTransitioningToPip",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<PictureInPictureUiState>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean isStashed()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether Picture-in-Picture is stashed or not. A stashed PiP means it is only\n     * partially visible to the user, with some parts of it being off-screen. This is usually a\n     * UI state that is triggered by the user, such as flinging the PiP to the edge or letting go\n     * of PiP while dragging partially off-screen.\n     *\n     * Developers can use this in conjunction with\n     * {@link Activity#onPictureInPictureUiStateChanged(PictureInPictureUiState)} to get a signal\n     * when the PiP stash state has changed. For example, if the state changed from {@code false} to\n     * {@code true}, developers can choose to temporarily pause video playback if PiP is of video\n     * content. Vice versa, if changing from {@code true} to {@code false} and video content is\n     * paused, developers can resume video playback.\n     *\n     * @see <a href=\"http://developer.android.com/about/versions/12/features/pip-improvements\">\n     *     Picture in Picture (PiP) improvements</a>\n     ",
    "links" : [ "android.app.Activity#onPictureInPictureUiStateChanged(PictureInPictureUiState)" ]
  }, {
    "name" : "public boolean isTransitioningToPip()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if the app is going to enter Picture-in-Picture (PiP) mode.\n     *\n     * This state is associated with the entering PiP animation. When that animation starts,\n     * whether via auto enter PiP or calling\n     * {@link Activity#enterPictureInPictureMode(PictureInPictureParams)} explicitly, app can expect\n     * {@link Activity#onPictureInPictureUiStateChanged(PictureInPictureUiState)} callback with\n     * {@link #isTransitioningToPip()} to be {@code true} first,\n     * followed by {@link Activity#onPictureInPictureModeChanged(boolean, Configuration)} when it\n     * fully settles in PiP mode.\n     *\n     * When app receives the\n     * {@link Activity#onPictureInPictureUiStateChanged(PictureInPictureUiState)} callback with\n     * {@link #isTransitioningToPip()} being {@code true}, it's recommended to hide certain UI\n     * elements, such as video controls, to archive a clean entering PiP animation.\n     *\n     * In case an application wants to restore the previously hidden UI elements when exiting\n     * PiP, it is recommended to do that in\n     * {@code onPictureInPictureModeChanged(isInPictureInPictureMode=false)} callback rather\n     * than the beginning of exit PiP animation.\n     ",
    "links" : [ "android.app.Activity#onPictureInPictureModeChanged(boolean", "android.app.Activity#onPictureInPictureUiStateChanged(PictureInPictureUiState)", "android.app.Activity#enterPictureInPictureMode(PictureInPictureParams)", "#isTransitioningToPip()" ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel out, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public boolean isStashed()", "public boolean isTransitioningToPip()", "public boolean equals(Object o)", "public int hashCode()", "public int describeContents()", "public void writeToParcel(@NonNull Parcel out, int flags)" ],
  "variableNames" : [ "mIsStashed", "mIsTransitioningToPip", "CREATOR" ]
}