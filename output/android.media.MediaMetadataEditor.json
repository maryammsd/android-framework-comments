{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/MediaMetadataEditor.java",
  "packageName" : "android.media",
  "className" : "MediaMetadataEditor",
  "comment" : "\n * An abstract class for editing and storing metadata that can be published by\n * {@link RemoteControlClient}. See the {@link RemoteControlClient#editMetadata(boolean)}\n * method to instantiate a {@link RemoteControlClient.MetadataEditor} object.\n *\n * @deprecated Use {@link MediaMetadata} instead together with {@link MediaSession}.\n ",
  "links" : [ "RemoteControlClient.MetadataEditor", "android.media.session.MediaSession", "android.media.RemoteControlClient", "android.media.MediaMetadata", "android.media.RemoteControlClient#editMetadata(boolean)" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BITMAP_KEY_ARTWORK",
    "type" : "int",
    "comment" : "\n     * The metadata key for the content artwork / album art.\n     ",
    "links" : [ ]
  }, {
    "name" : "RATING_KEY_BY_OTHERS",
    "type" : "int",
    "comment" : "\n     * The metadata key for the content's average rating, not the user's rating.\n     * The value associated with this key is a {@link Rating} instance.\n     * @see #RATING_KEY_BY_USER\n     ",
    "links" : [ "android.media.Rating" ]
  }, {
    "name" : "RATING_KEY_BY_USER",
    "type" : "int",
    "comment" : "\n     * The metadata key for the content's user rating.\n     * The value associated with this key is a {@link Rating} instance.\n     * This key can be flagged as \"editable\" (with {@link #addEditableKey(int)}) to enable\n     * receiving user rating values through the\n     * {@link android.media.RemoteControlClient.OnMetadataUpdateListener} interface.\n     ",
    "links" : [ "#addEditableKey(int)", "android.media.RemoteControlClient.OnMetadataUpdateListener", "android.media.Rating" ]
  }, {
    "name" : "KEY_EDITABLE_MASK",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Editable key mask\n     ",
    "links" : [ ]
  }, {
    "name" : "mEditableKeys",
    "type" : "long",
    "comment" : "\n     * @hide\n     * Mask of editable keys.\n     ",
    "links" : [ ]
  }, {
    "name" : "mMetadataChanged",
    "type" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mApplied",
    "type" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mArtworkChanged",
    "type" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mEditorArtwork",
    "type" : "Bitmap",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mEditorMetadata",
    "type" : "Bundle",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mMetadataBuilder",
    "type" : "MediaMetadata.Builder",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "METADATA_TYPE_INVALID",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "METADATA_TYPE_LONG",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "METADATA_TYPE_STRING",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "METADATA_TYPE_BITMAP",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "METADATA_TYPE_RATING",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "METADATA_KEYS_TYPE",
    "type" : "SparseIntArray",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public abstract void apply()",
    "returnType" : "void",
    "comment" : "\n     * Applies all of the metadata changes that have been set since the MediaMetadataEditor instance\n     * was created or since {@link #clear()} was called. Subclasses should synchronize on\n     * {@code this} for thread safety.\n     ",
    "links" : [ "#clear()" ]
  }, {
    "name" : "public synchronized void clear()",
    "returnType" : "void",
    "comment" : "\n     * Clears all the pending metadata changes set since the MediaMetadataEditor instance was\n     * created or since this method was last called.\n     * Note that clearing the metadata doesn't reset the editable keys\n     * (use {@link #removeEditableKeys()} instead).\n     ",
    "links" : [ "#removeEditableKeys()" ]
  }, {
    "name" : "public synchronized void addEditableKey(int key)",
    "returnType" : "void",
    "comment" : "\n     * Flags the given key as being editable.\n     * This should only be used by metadata publishers, such as {@link RemoteControlClient},\n     * which will declare the metadata field as eligible to be updated, with new values\n     * received through the {@link RemoteControlClient.OnMetadataUpdateListener} interface.\n     * @param key the type of metadata that can be edited. The supported key is\n     *     {@link #RATING_KEY_BY_USER}.\n     ",
    "links" : [ "android.media.RemoteControlClient", "RemoteControlClient.OnMetadataUpdateListener", "#RATING_KEY_BY_USER" ]
  }, {
    "name" : "public synchronized void removeEditableKeys()",
    "returnType" : "void",
    "comment" : "\n     * Causes all metadata fields to be read-only.\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized int[] getEditableKeys()",
    "returnType" : "int[]",
    "comment" : "\n     * Retrieves the keys flagged as editable.\n     * @return null if there are no editable keys, or an array containing the keys.\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized MediaMetadataEditor putString(int key, String value) throws IllegalArgumentException",
    "returnType" : "MediaMetadataEditor",
    "comment" : "\n     * Adds textual information.\n     * Note that none of the information added after {@link #apply()} has been called,\n     * will be available to consumers of metadata stored by the MediaMetadataEditor.\n     * @param key The identifier of a the metadata field to set. Valid values are\n     *      {@link android.media.MediaMetadataRetriever#METADATA_KEY_ALBUM},\n     *      {@link android.media.MediaMetadataRetriever#METADATA_KEY_ALBUMARTIST},\n     *      {@link android.media.MediaMetadataRetriever#METADATA_KEY_TITLE},\n     *      {@link android.media.MediaMetadataRetriever#METADATA_KEY_ARTIST},\n     *      {@link android.media.MediaMetadataRetriever#METADATA_KEY_AUTHOR},\n     *      {@link android.media.MediaMetadataRetriever#METADATA_KEY_COMPILATION},\n     *      {@link android.media.MediaMetadataRetriever#METADATA_KEY_COMPOSER},\n     *      {@link android.media.MediaMetadataRetriever#METADATA_KEY_DATE},\n     *      {@link android.media.MediaMetadataRetriever#METADATA_KEY_GENRE},\n     *      {@link android.media.MediaMetadataRetriever#METADATA_KEY_WRITER}.\n     * @param value The text for the given key, or {@code null} to signify there is no valid\n     *      information for the field.\n     * @return Returns a reference to the same MediaMetadataEditor object, so you can chain put\n     *      calls together.\n     ",
    "links" : [ "android.media.MediaMetadataRetriever#METADATA_KEY_ALBUMARTIST", "android.media.MediaMetadataRetriever#METADATA_KEY_COMPILATION", "android.media.MediaMetadataRetriever#METADATA_KEY_AUTHOR", "android.media.MediaMetadataRetriever#METADATA_KEY_TITLE", "android.media.MediaMetadataRetriever#METADATA_KEY_ALBUM", "android.media.MediaMetadataRetriever#METADATA_KEY_COMPOSER", "android.media.MediaMetadataRetriever#METADATA_KEY_DATE", "android.media.MediaMetadataRetriever#METADATA_KEY_GENRE", "android.media.MediaMetadataRetriever#METADATA_KEY_ARTIST", "#apply()", "android.media.MediaMetadataRetriever#METADATA_KEY_WRITER" ]
  }, {
    "name" : "public synchronized MediaMetadataEditor putLong(int key, long value) throws IllegalArgumentException",
    "returnType" : "MediaMetadataEditor",
    "comment" : "\n     * Adds numerical information.\n     * Note that none of the information added after {@link #apply()} has been called\n     * will be available to consumers of metadata stored by the MediaMetadataEditor.\n     * @param key the identifier of a the metadata field to set. Valid values are\n     *      {@link android.media.MediaMetadataRetriever#METADATA_KEY_CD_TRACK_NUMBER},\n     *      {@link android.media.MediaMetadataRetriever#METADATA_KEY_DISC_NUMBER},\n     *      {@link android.media.MediaMetadataRetriever#METADATA_KEY_DURATION} (with a value\n     *      expressed in milliseconds),\n     *      {@link android.media.MediaMetadataRetriever#METADATA_KEY_YEAR}.\n     * @param value The long value for the given key\n     * @return Returns a reference to the same MediaMetadataEditor object, so you can chain put\n     *      calls together.\n     * @throws IllegalArgumentException\n     ",
    "links" : [ "android.media.MediaMetadataRetriever#METADATA_KEY_CD_TRACK_NUMBER", "android.media.MediaMetadataRetriever#METADATA_KEY_DURATION", "android.media.MediaMetadataRetriever#METADATA_KEY_DISC_NUMBER", "#apply()", "android.media.MediaMetadataRetriever#METADATA_KEY_YEAR" ]
  }, {
    "name" : "public synchronized MediaMetadataEditor putBitmap(int key, Bitmap bitmap) throws IllegalArgumentException",
    "returnType" : "MediaMetadataEditor",
    "comment" : "\n     * Adds image.\n     * @param key the identifier of the bitmap to set. The only valid value is\n     *      {@link #BITMAP_KEY_ARTWORK}\n     * @param bitmap The bitmap for the artwork, or null if there isn't any.\n     * @return Returns a reference to the same MediaMetadataEditor object, so you can chain put\n     *      calls together.\n     * @throws IllegalArgumentException\n     * @see android.graphics.Bitmap\n     ",
    "links" : [ "#BITMAP_KEY_ARTWORK" ]
  }, {
    "name" : "public synchronized MediaMetadataEditor putObject(int key, Object value) throws IllegalArgumentException",
    "returnType" : "MediaMetadataEditor",
    "comment" : "\n     * Adds information stored as an instance.\n     * Note that none of the information added after {@link #apply()} has been called\n     * will be available to consumers of metadata stored by the MediaMetadataEditor.\n     * @param key the identifier of a the metadata field to set. Valid keys for a:\n     *     <ul>\n     *     <li>{@link Bitmap} object are {@link #BITMAP_KEY_ARTWORK},</li>\n     *     <li>{@link String} object are the same as for {@link #putString(int, String)}</li>\n     *     <li>{@link Long} object are the same as for {@link #putLong(int, long)}</li>\n     *     <li>{@link Rating} object are {@link #RATING_KEY_BY_OTHERS}\n     *         and {@link #RATING_KEY_BY_USER}.</li>\n     *     </ul>\n     * @param value the metadata to add.\n     * @return Returns a reference to the same MediaMetadataEditor object, so you can chain put\n     *      calls together.\n     * @throws IllegalArgumentException\n     ",
    "links" : [ "android.media.Long", "#putLong(int", "#BITMAP_KEY_ARTWORK", "#putString(int", "android.graphics.Bitmap", "android.media.Rating", "String", "#RATING_KEY_BY_USER", "#RATING_KEY_BY_OTHERS", "#apply()" ]
  }, {
    "name" : "public synchronized long getLong(int key, long defaultValue) throws IllegalArgumentException",
    "returnType" : "long",
    "comment" : "\n     * Returns the long value for the key.\n     * @param key one of the keys supported in {@link #putLong(int, long)}\n     * @param defaultValue the value returned if the key is not present\n     * @return the long value for the key, or the supplied default value if the key is not present\n     * @throws IllegalArgumentException\n     ",
    "links" : [ "#putLong(int" ]
  }, {
    "name" : "public synchronized String getString(int key, String defaultValue) throws IllegalArgumentException",
    "returnType" : "String",
    "comment" : "\n     * Returns the {@link String} value for the key.\n     * @param key one of the keys supported in {@link #putString(int, String)}\n     * @param defaultValue the value returned if the key is not present\n     * @return the {@link String} value for the key, or the supplied default value if the key is\n     *     not present\n     * @throws IllegalArgumentException\n     ",
    "links" : [ "#putString(int", "String" ]
  }, {
    "name" : "public synchronized Bitmap getBitmap(int key, Bitmap defaultValue) throws IllegalArgumentException",
    "returnType" : "Bitmap",
    "comment" : "\n     * Returns the {@link Bitmap} value for the key.\n     * @param key the {@link #BITMAP_KEY_ARTWORK} key\n     * @param defaultValue the value returned if the key is not present\n     * @return the {@link Bitmap} value for the key, or the supplied default value if the key is\n     *     not present\n     * @throws IllegalArgumentException\n     ",
    "links" : [ "#BITMAP_KEY_ARTWORK", "android.graphics.Bitmap" ]
  }, {
    "name" : "public synchronized Object getObject(int key, Object defaultValue) throws IllegalArgumentException",
    "returnType" : "Object",
    "comment" : "\n     * Returns an object representation of the value for the key\n     * @param key one of the keys supported in {@link #putObject(int, Object)}\n     * @param defaultValue the value returned if the key is not present\n     * @return the object for the key, as a {@link Long}, {@link Bitmap}, {@link String}, or\n     *     {@link Rating} depending on the key value, or the supplied default value if the key is\n     *     not present\n     * @throws IllegalArgumentException\n     ",
    "links" : [ "android.media.Long", "android.graphics.Bitmap", "android.media.Rating", "#putObject(int", "String" ]
  } ],
  "methodNames" : [ "public abstract void apply()", "public synchronized void clear()", "public synchronized void addEditableKey(int key)", "public synchronized void removeEditableKeys()", "public synchronized int[] getEditableKeys()", "public synchronized MediaMetadataEditor putString(int key, String value) throws IllegalArgumentException", "public synchronized MediaMetadataEditor putLong(int key, long value) throws IllegalArgumentException", "public synchronized MediaMetadataEditor putBitmap(int key, Bitmap bitmap) throws IllegalArgumentException", "public synchronized MediaMetadataEditor putObject(int key, Object value) throws IllegalArgumentException", "public synchronized long getLong(int key, long defaultValue) throws IllegalArgumentException", "public synchronized String getString(int key, String defaultValue) throws IllegalArgumentException", "public synchronized Bitmap getBitmap(int key, Bitmap defaultValue) throws IllegalArgumentException", "public synchronized Object getObject(int key, Object defaultValue) throws IllegalArgumentException" ],
  "variableNames" : [ "TAG", "BITMAP_KEY_ARTWORK", "RATING_KEY_BY_OTHERS", "RATING_KEY_BY_USER", "KEY_EDITABLE_MASK", "mEditableKeys", "mMetadataChanged", "mApplied", "mArtworkChanged", "mEditorArtwork", "mEditorMetadata", "mMetadataBuilder", "METADATA_TYPE_INVALID", "METADATA_TYPE_LONG", "METADATA_TYPE_STRING", "METADATA_TYPE_BITMAP", "METADATA_TYPE_RATING", "METADATA_KEYS_TYPE" ]
}