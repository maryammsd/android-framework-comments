{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/os/CombinedVibration.java",
  "packageName" : "android.os",
  "className" : "SequentialCombination",
  "comment" : "\n     * A combination of haptic effects that should be played in multiple vibrators in sequence.\n     *\n     * @hide\n     * @see CombinedVibration#startSequential()\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mEffects",
    "type" : "ArrayList<CombinedVibration>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDelays",
    "type" : "ArrayList<Integer>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public SequentialCombination addNext(int vibratorId, @NonNull VibrationEffect effect)",
    "returnType" : "SequentialCombination",
    "comment" : "\n         * Add a single vibration effect to be performed next.\n         *\n         * Similar to {@link #addNext(int, VibrationEffect, int)}, but with no delay. The effect\n         * will start playing immediately after the previous vibration is finished.\n         *\n         * @param vibratorId The id of the vibrator that should perform this effect.\n         * @param effect     The effect this vibrator should play.\n         * @return The {@link CombinedVibration.SequentialCombination} object to enable adding\n         * multiple effects in one chain.\n         ",
    "links" : [ "#addNext(int", "CombinedVibration.SequentialCombination" ]
  }, {
    "name" : "public SequentialCombination addNext(int vibratorId, @NonNull VibrationEffect effect, int delay)",
    "returnType" : "SequentialCombination",
    "comment" : "\n         * Add a single vibration effect to be performed next.\n         *\n         * The delay is applied immediately after the previous vibration is finished. The effect\n         * will start playing after the delay.\n         *\n         * @param vibratorId The id of the vibrator that should perform this effect.\n         * @param effect     The effect this vibrator should play.\n         * @param delay      The amount of time, in milliseconds, to wait between playing the prior\n         *                   vibration and this one, starting at the time the previous vibration in\n         *                   this sequence is finished.\n         * @return The {@link CombinedVibration.SequentialCombination} object to enable adding\n         * multiple effects in one chain.\n         ",
    "links" : [ "CombinedVibration.SequentialCombination" ]
  }, {
    "name" : "public SequentialCombination addNext(@NonNull CombinedVibration effect)",
    "returnType" : "SequentialCombination",
    "comment" : "\n         * Add a combined vibration effect to be performed next.\n         *\n         * Similar to {@link #addNext(CombinedVibration, int)}, but with no delay. The effect will\n         * start playing immediately after the previous vibration is finished.\n         *\n         * @param effect The combined effect to be performed next.\n         * @return The {@link CombinedVibration.SequentialCombination} object to enable adding\n         * multiple effects in one chain.\n         * @see VibrationEffect#createOneShot(long, int)\n         ",
    "links" : [ "CombinedVibration.SequentialCombination", "#addNext(CombinedVibration" ]
  }, {
    "name" : "public SequentialCombination addNext(@NonNull CombinedVibration effect, int delay)",
    "returnType" : "SequentialCombination",
    "comment" : "\n         * Add a combined vibration effect to be performed next.\n         *\n         * The delay is applied immediately after the previous vibration is finished. The vibration\n         * will start playing after the delay.\n         *\n         * @param effect The combined effect to be performed next.\n         * @param delay  The amount of time, in milliseconds, to wait between playing the prior\n         *               vibration and this one, starting at the time the previous vibration in this\n         *               sequence is finished.\n         * @return The {@link CombinedVibration.SequentialCombination} object to enable adding\n         * multiple effects in one chain.\n         ",
    "links" : [ "CombinedVibration.SequentialCombination" ]
  }, {
    "name" : "public CombinedVibration combine()",
    "returnType" : "CombinedVibration",
    "comment" : "\n         * Combine all of the added effects in sequence.\n         *\n         * The {@link CombinedVibration.SequentialCombination} object is still valid after\n         * this call, so you can continue adding more effects to it and generating more {@link\n         * CombinedVibration}s by calling this method again.\n         *\n         * @return The {@link CombinedVibration} resulting from combining the added effects to\n         * be played in sequence.\n         ",
    "links" : [ "CombinedVibration.SequentialCombination", "android.os.CombinedVibration" ]
  } ],
  "methodNames" : [ "public SequentialCombination addNext(int vibratorId, @NonNull VibrationEffect effect)", "public SequentialCombination addNext(int vibratorId, @NonNull VibrationEffect effect, int delay)", "public SequentialCombination addNext(@NonNull CombinedVibration effect)", "public SequentialCombination addNext(@NonNull CombinedVibration effect, int delay)", "public CombinedVibration combine()" ],
  "variableNames" : [ "mEffects", "mDelays" ]
}