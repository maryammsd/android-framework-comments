{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/stream/SpinedBuffer.java",
  "packageName" : "java.util.stream",
  "className" : "OfPrimitive",
  "comment" : "\n     * An ordered collection of primitive values.  Elements can be added, but\n     * not removed. Goes through a building phase, during which elements can be\n     * added, and a traversal phase, during which elements can be traversed in\n     * order but no further modifications are possible.\n     *\n     * <p> One or more arrays are used to store elements. The use of a multiple\n     * arrays has better performance characteristics than a single array used by\n     * {@link ArrayList}, as when the capacity of the list needs to be increased\n     * no copying of elements is required.  This is usually beneficial in the case\n     * where the results will be traversed a small number of times.\n     *\n     * @param <E> the wrapper type for this primitive type\n     * @param <T_ARR> the array type for this primitive type\n     * @param <T_CONS> the Consumer type for this primitive type\n     ",
  "links" : [ "java.util.ArrayList" ],
  "variables" : [ {
    "name" : "curChunk",
    "type" : "T_ARR",
    "comment" : " The chunk we're currently writing into",
    "links" : [ ]
  }, {
    "name" : "spine",
    "type" : "T_ARR[]",
    "comment" : " All chunks, or null if there is only one chunk",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public abstract Iterator<E> iterator()",
    "returnType" : "Iterator<E>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void forEach(Consumer<? super E> consumer)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected abstract T_ARR[] newArrayArray(int size)",
    "returnType" : "T_ARR[]",
    "comment" : " Create a new array-of-array of the proper type and size ",
    "links" : [ ]
  }, {
    "name" : "public abstract T_ARR newArray(int size)",
    "returnType" : "T_ARR",
    "comment" : " Create a new array of the proper type and size ",
    "links" : [ ]
  }, {
    "name" : "protected abstract int arrayLength(T_ARR array)",
    "returnType" : "int",
    "comment" : " Get the length of an array ",
    "links" : [ ]
  }, {
    "name" : "protected abstract void arrayForEach(T_ARR array, int from, int to, T_CONS consumer)",
    "returnType" : "void",
    "comment" : " Iterate an array with the provided consumer ",
    "links" : [ ]
  }, {
    "name" : "protected long capacity()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void inflateSpine()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected final void ensureCapacity(long targetSize)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void increaseCapacity()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected int chunkFor(long index)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void copyInto(T_ARR array, int offset)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public T_ARR asPrimitiveArray()",
    "returnType" : "T_ARR",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void preAccept()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void clear()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void forEach(T_CONS consumer)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public abstract Iterator<E> iterator()", "public abstract void forEach(Consumer<? super E> consumer)", "protected abstract T_ARR[] newArrayArray(int size)", "public abstract T_ARR newArray(int size)", "protected abstract int arrayLength(T_ARR array)", "protected abstract void arrayForEach(T_ARR array, int from, int to, T_CONS consumer)", "protected long capacity()", "private void inflateSpine()", "protected final void ensureCapacity(long targetSize)", "protected void increaseCapacity()", "protected int chunkFor(long index)", "public void copyInto(T_ARR array, int offset)", "public T_ARR asPrimitiveArray()", "protected void preAccept()", "public void clear()", "public void forEach(T_CONS consumer)" ],
  "variableNames" : [ "curChunk", "spine" ]
}