{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/accessibilityservice/AccessibilityService.java",
  "packageName" : "android.accessibilityservice",
  "className" : "SoftKeyboardController",
  "comment" : "\n     * Used to control, query, and listen for changes to the soft keyboard show mode.\n     * <p>\n     * Accessibility services may request to override the decisions normally made about whether or\n     * not the soft keyboard is shown.\n     * <p>\n     * If multiple services make conflicting requests, the last request is honored. A service may\n     * register a listener to find out if the mode has changed under it.\n     * <p>\n     * If the user takes action to override the behavior behavior requested by an accessibility\n     * service, the user's request takes precendence, the show mode will be reset to\n     * {@link AccessibilityService#SHOW_MODE_AUTO}, and services will no longer be able to control\n     * that aspect of the soft keyboard's behavior.\n     * <p>\n     * Note: Because soft keyboards are independent apps, the framework does not have total control\n     * over their behavior. They may choose to show themselves, or not, without regard to requests\n     * made here. So the framework will make a best effort to deliver the behavior requested, but\n     * cannot guarantee success.\n     *\n     * @see AccessibilityService#SHOW_MODE_AUTO\n     * @see AccessibilityService#SHOW_MODE_HIDDEN\n     * @see AccessibilityService#SHOW_MODE_IGNORE_HARD_KEYBOARD\n     ",
  "links" : [ "android.accessibilityservice.AccessibilityService#SHOW_MODE_AUTO" ],
  "variables" : [ {
    "name" : "mService",
    "type" : "AccessibilityService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mListeners",
    "type" : "ArrayMap<OnShowModeChangedListener, Handler>",
    "comment" : "\n         * Map of listeners to their handlers. Lazily created when adding the first\n         * soft keyboard change listener.\n         ",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ENABLE_IME_SUCCESS",
    "type" : "int",
    "comment" : "\n         * Return value for {@link #setInputMethodEnabled(String, boolean)}. The action succeeded.\n         ",
    "links" : [ "#setInputMethodEnabled(String" ]
  }, {
    "name" : "ENABLE_IME_FAIL_BY_ADMIN",
    "type" : "int",
    "comment" : "\n         * Return value for {@link #setInputMethodEnabled(String, boolean)}. The action failed\n         * because the InputMethod is not permitted by device policy manager.\n         ",
    "links" : [ "#setInputMethodEnabled(String" ]
  }, {
    "name" : "ENABLE_IME_FAIL_UNKNOWN",
    "type" : "int",
    "comment" : "\n         * Return value for {@link #setInputMethodEnabled(String, boolean)}. The action failed\n         * and the reason is unknown.\n         ",
    "links" : [ "#setInputMethodEnabled(String" ]
  } ],
  "methods" : [ {
    "name" : " void onServiceConnected()",
    "returnType" : "void",
    "comment" : "\n         * Called when the service is connected.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void addOnShowModeChangedListener(@NonNull OnShowModeChangedListener listener)",
    "returnType" : "void",
    "comment" : "\n         * Adds the specified change listener to the list of show mode change listeners. The\n         * callback will occur on the service's main thread. Listener is not called on registration.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void addOnShowModeChangedListener(@NonNull OnShowModeChangedListener listener, @Nullable Handler handler)",
    "returnType" : "void",
    "comment" : "\n         * Adds the specified change listener to the list of soft keyboard show mode change\n         * listeners. The callback will occur on the specified {@link Handler}'s thread, or on the\n         * services's main thread if the handler is {@code null}.\n         *\n         * @param listener the listener to add, must be non-null\n         * @param handler the handler on which to callback should execute, or {@code null} to\n         *        execute on the service's main thread\n         ",
    "links" : [ "android.os.Handler" ]
  }, {
    "name" : "public boolean removeOnShowModeChangedListener(@NonNull OnShowModeChangedListener listener)",
    "returnType" : "boolean",
    "comment" : "\n         * Removes the specified change listener from the list of keyboard show mode change\n         * listeners.\n         *\n         * @param listener the listener to remove, must be non-null\n         * @return {@code true} if the listener was removed, {@code false} otherwise\n         ",
    "links" : [ ]
  }, {
    "name" : "private void setSoftKeyboardCallbackEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dispatchSoftKeyboardShowModeChanged(final int showMode)",
    "returnType" : "void",
    "comment" : "\n         * Dispatches the soft keyboard show mode change to any registered listeners. This should\n         * be called on the service's main thread.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getShowMode()",
    "returnType" : "int",
    "comment" : "\n         * Returns the show mode of the soft keyboard.\n         *\n         * @return the current soft keyboard show mode\n         *\n         * @see AccessibilityService#SHOW_MODE_AUTO\n         * @see AccessibilityService#SHOW_MODE_HIDDEN\n         * @see AccessibilityService#SHOW_MODE_IGNORE_HARD_KEYBOARD\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean setShowMode(@SoftKeyboardShowMode int showMode)",
    "returnType" : "boolean",
    "comment" : "\n         * Sets the soft keyboard show mode.\n         * <p>\n         * <strong>Note:</strong> If the service is not yet connected (e.g.\n         * {@link AccessibilityService#onServiceConnected()} has not yet been called) or the\n         * service has been disconnected, this method will have no effect and return {@code false}.\n         *\n         * @param showMode the new show mode for the soft keyboard\n         * @return {@code true} on success\n         *\n         * @see AccessibilityService#SHOW_MODE_AUTO\n         * @see AccessibilityService#SHOW_MODE_HIDDEN\n         * @see AccessibilityService#SHOW_MODE_IGNORE_HARD_KEYBOARD\n         ",
    "links" : [ "android.accessibilityservice.AccessibilityService#onServiceConnected()" ]
  }, {
    "name" : "public boolean switchToInputMethod(@NonNull String imeId)",
    "returnType" : "boolean",
    "comment" : "\n         * Switches the current IME for the user for whom the service is enabled. The change will\n         * persist until the current IME is explicitly changed again, and may persist beyond the\n         * life cycle of the requesting service.\n         *\n         * @param imeId The ID of the input method to make current. This IME must be installed and\n         *              enabled.\n         * @return {@code true} if the current input method was successfully switched to the input\n         *         method by {@code imeId},\n         *         {@code false} if the input method specified is not installed, not enabled, or\n         *         otherwise not available to become the current IME\n         *\n         * @see android.view.inputmethod.InputMethodInfo#getId()\n         ",
    "links" : [ ]
  }, {
    "name" : "public int setInputMethodEnabled(@NonNull String imeId, boolean enabled) throws SecurityException",
    "returnType" : "int",
    "comment" : "\n         * Enable or disable the specified IME for the user for whom the service is activated. The\n         * IME needs to be in the same package as the service and needs to be allowed by device\n         * policy, if there is one. The change will persist until the specified IME is next\n         * explicitly enabled or disabled by whatever means, such as user choice, and may persist\n         * beyond the life cycle of the requesting service.\n         *\n         * @param imeId The ID of the input method to enable or disable. This IME must be installed.\n         * @param enabled {@code true} if the input method associated with {@code imeId} should be\n         *                enabled.\n         * @return status code for the result of enabling/disabling the input method associated\n         *         with {@code imeId}.\n         * @throws SecurityException if the input method is not in the same package as the service.\n         *\n         * @see android.view.inputmethod.InputMethodInfo#getId()\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ " void onServiceConnected()", "public void addOnShowModeChangedListener(@NonNull OnShowModeChangedListener listener)", "public void addOnShowModeChangedListener(@NonNull OnShowModeChangedListener listener, @Nullable Handler handler)", "public boolean removeOnShowModeChangedListener(@NonNull OnShowModeChangedListener listener)", "private void setSoftKeyboardCallbackEnabled(boolean enabled)", " void dispatchSoftKeyboardShowModeChanged(final int showMode)", "public int getShowMode()", "public boolean setShowMode(@SoftKeyboardShowMode int showMode)", "public boolean switchToInputMethod(@NonNull String imeId)", "public int setInputMethodEnabled(@NonNull String imeId, boolean enabled) throws SecurityException" ],
  "variableNames" : [ "mService", "mListeners", "mLock", "ENABLE_IME_SUCCESS", "ENABLE_IME_FAIL_BY_ADMIN", "ENABLE_IME_FAIL_UNKNOWN" ]
}