{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/appsearch/GetByDocumentIdRequest.java",
  "packageName" : "android.app.appsearch",
  "className" : "GetByDocumentIdRequest",
  "comment" : "\n * Encapsulates a request to retrieve documents by namespace and IDs from the {@link\n * AppSearchSession} database.\n *\n * @see AppSearchSession#getByDocumentId\n ",
  "links" : [ "android.app.appsearch.AppSearchSession" ],
  "variables" : [ {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<GetByDocumentIdRequest>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PROJECTION_SCHEMA_TYPE_WILDCARD",
    "type" : "String",
    "comment" : "\n     * Schema type to be used in {@link GetByDocumentIdRequest.Builder#addProjection} to apply\n     * property paths to all results, excepting any types that have had their own, specific property\n     * paths set.\n     ",
    "links" : [ "GetByDocumentIdRequest.Builder#addProjection" ]
  }, {
    "name" : "mNamespace",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIds",
    "type" : "List<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTypePropertyPaths",
    "type" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIdsCached",
    "type" : "Set<String>",
    "comment" : " Cache of the ids. Comes from inflating mIds at first use. ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String getNamespace()",
    "returnType" : "String",
    "comment" : " Returns the namespace attached to the request. ",
    "links" : [ ]
  }, {
    "name" : "public Set<String> getIds()",
    "returnType" : "Set<String>",
    "comment" : " Returns the set of document IDs attached to the request. ",
    "links" : [ ]
  }, {
    "name" : "public Map<String, List<String>> getProjections()",
    "returnType" : "Map<String, List<String>>",
    "comment" : "\n     * Returns a map from schema type to property paths to be used for projection.\n     *\n     * <p>If the map is empty, then all properties will be retrieved for all results.\n     *\n     * <p>Calling this function repeatedly is inefficient. Prefer to retain the Map returned by this\n     * function, rather than calling it multiple times.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Map<String, List<PropertyPath>> getProjectionPaths()",
    "returnType" : "Map<String, List<PropertyPath>>",
    "comment" : "\n     * Returns a map from schema type to property paths to be used for projection.\n     *\n     * <p>If the map is empty, then all properties will be retrieved for all results.\n     *\n     * <p>Calling this function repeatedly is inefficient. Prefer to retain the Map returned by this\n     * function, rather than calling it multiple times.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public String getNamespace()", "public Set<String> getIds()", "public Map<String, List<String>> getProjections()", "public Map<String, List<PropertyPath>> getProjectionPaths()", "public void writeToParcel(@NonNull Parcel dest, int flags)" ],
  "variableNames" : [ "CREATOR", "PROJECTION_SCHEMA_TYPE_WILDCARD", "mNamespace", "mIds", "mTypePropertyPaths", "mIdsCached" ]
}