{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/telephony/ims/ImsRcsManager.java",
  "packageName" : "android.telephony.ims",
  "className" : "ImsRcsManager",
  "comment" : "\n * Manager for interfacing with the framework RCS services, including the User Capability Exchange\n * (UCE) service, as well as managing user settings.\n *\n * Use {@link ImsManager#getImsRcsManager(int)} to create an instance of this manager.\n ",
  "links" : [ "android.telephony.ims.ImsManager#getImsRcsManager(int)" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ACTION_SHOW_CAPABILITY_DISCOVERY_OPT_IN",
    "type" : "String",
    "comment" : "\n     * Activity Action: Show the opt-in dialog for enabling or disabling RCS contact discovery\n     * using User Capability Exchange (UCE), which enables a service that periodically shares the\n     * phone numbers of all of the contacts in the user's address book with the carrier to refresh\n     * the RCS capabilities associated with those contacts as the local cache becomes stale.\n     * <p>\n     * An application that depends on RCS contact discovery being enabled must send this intent\n     * using {@link Context#startActivity(Intent)} to ask the user to opt-in for contacts upload for\n     * capability exchange if it is currently disabled. Whether or not RCS contact discovery has\n     * been enabled by the user can be queried using {@link RcsUceAdapter#isUceSettingEnabled()}.\n     * <p>\n     * This intent will always be handled by the system, however the application should only send\n     * this Intent if the carrier supports bulk RCS contact exchange, which will be true if either\n     * key {@link android.telephony.CarrierConfigManager.Ims#KEY_RCS_BULK_CAPABILITY_EXCHANGE_BOOL}\n     * or {@link android.telephony.CarrierConfigManager#KEY_USE_RCS_PRESENCE_BOOL} is set to true.\n     * Otherwise, the RCS contact discovery opt-in dialog will not be shown.\n     * <p>\n     * Input: A mandatory {@link Settings#EXTRA_SUB_ID} extra containing the subscription that the\n     * setting will be be shown for.\n     * <p>\n     * Output: Nothing\n     * @see RcsUceAdapter\n     ",
    "links" : [ "android.telephony.ims.RcsUceAdapter#isUceSettingEnabled()", "android.telephony.CarrierConfigManager#KEY_USE_RCS_PRESENCE_BOOL", "android.provider.Settings#EXTRA_SUB_ID", "android.content.Context#startActivity(Intent)", "android.telephony.CarrierConfigManager.Ims#KEY_RCS_BULK_CAPABILITY_EXCHANGE_BOOL" ]
  }, {
    "name" : "CAPABILITY_TYPE_NONE",
    "type" : "int",
    "comment" : "\n     * Undefined capability type for initialization\n     ",
    "links" : [ ]
  }, {
    "name" : "CAPABILITY_TYPE_OPTIONS_UCE",
    "type" : "int",
    "comment" : "\n     * This carrier supports User Capability Exchange using SIP OPTIONS as defined by the\n     * framework. If set, the RcsFeature should support capability exchange using SIP OPTIONS.\n     * If not set, this RcsFeature should not service capability requests.\n     ",
    "links" : [ ]
  }, {
    "name" : "CAPABILITY_TYPE_PRESENCE_UCE",
    "type" : "int",
    "comment" : "\n     * This carrier supports User Capability Exchange using a presence server as defined by the\n     * framework. If set, the RcsFeature should support capability exchange using a presence\n     * server. If not set, this RcsFeature should not publish capabilities or service capability\n     * requests using presence.\n     ",
    "links" : [ ]
  }, {
    "name" : "CAPABILITY_TYPE_MAX",
    "type" : "int",
    "comment" : "\n     * This is used to check the upper range of RCS capability\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mSubId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBinderCache",
    "type" : "BinderCacheManager<IImsRcsController>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTelephonyBinderCache",
    "type" : "BinderCacheManager<ITelephony>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAvailabilityChangedCallbacks",
    "type" : "Map<OnAvailabilityChangedListener, AvailabilityCallbackAdapter>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public RcsUceAdapter getUceAdapter()",
    "returnType" : "RcsUceAdapter",
    "comment" : "\n     * @return A {@link RcsUceAdapter} used for User Capability Exchange (UCE) operations for\n     * this subscription.\n     ",
    "links" : [ "android.telephony.ims.RcsUceAdapter" ]
  }, {
    "name" : "public void registerImsRegistrationCallback(@NonNull @CallbackExecutor Executor executor, @NonNull RegistrationManager.RegistrationCallback c) throws ImsException",
    "returnType" : "void",
    "comment" : "\n     * Registers a {@link RegistrationManager.RegistrationCallback} with the system. When the\n     * callback is registered, it will initiate the callback c to be called with the current\n     * registration state.\n     *\n     * Requires Permission: {@link android.Manifest.permission#READ_PRECISE_PHONE_STATE\n     * READ_PRECISE_PHONE_STATE} or that the calling app has carrier privileges\n     * (see {@link android.telephony.TelephonyManager#hasCarrierPrivileges}).\n     *\n     * @param executor The executor the callback events should be run on.\n     * @param c The {@link RegistrationManager.RegistrationCallback} to be added.\n     * @see #unregisterImsRegistrationCallback(RegistrationManager.RegistrationCallback)\n     * @throws ImsException if the subscription associated with this callback is valid, but\n     * the {@code ImsService} associated with the subscription is not available. This can happen if\n     * the service crashed, for example. See {@link ImsException#getCode()} for a more detailed\n     * reason.\n     * @throws UnsupportedOperationException If the device does not have\n     *          {@link PackageManager#FEATURE_TELEPHONY_IMS}.\n     ",
    "links" : [ "android.content.pm.PackageManager#FEATURE_TELEPHONY_IMS", "android.Manifest.permission#READ_PRECISE_PHONE_STATEREAD_PRECISE_PHONE_STATE", "RegistrationManager.RegistrationCallback", "android.telephony.TelephonyManager#hasCarrierPrivileges", "android.telephony.ims.ImsException#getCode()" ]
  }, {
    "name" : "public void unregisterImsRegistrationCallback(@NonNull RegistrationManager.RegistrationCallback c)",
    "returnType" : "void",
    "comment" : "\n     * Removes an existing {@link RegistrationManager.RegistrationCallback}.\n     *\n     * When the subscription associated with this callback is removed (SIM removed, ESIM swap,\n     * etc...), this callback will automatically be removed. If this method is called for an\n     * inactive subscription, it will result in a no-op.\n     *\n     * Requires Permission: {@link android.Manifest.permission#READ_PRECISE_PHONE_STATE\n     * READ_PRECISE_PHONE_STATE} or that the calling app has carrier privileges\n     * (see {@link android.telephony.TelephonyManager#hasCarrierPrivileges}).\n     *\n     * @param c The {@link RegistrationManager.RegistrationCallback} to be removed.\n     * @see android.telephony.SubscriptionManager.OnSubscriptionsChangedListener\n     * @see #registerImsRegistrationCallback(Executor, RegistrationCallback)\n     * @throws UnsupportedOperationException If the device does not have\n     *          {@link PackageManager#FEATURE_TELEPHONY_IMS}.\n     ",
    "links" : [ "android.content.pm.PackageManager#FEATURE_TELEPHONY_IMS", "android.Manifest.permission#READ_PRECISE_PHONE_STATEREAD_PRECISE_PHONE_STATE", "RegistrationManager.RegistrationCallback", "android.telephony.TelephonyManager#hasCarrierPrivileges" ]
  }, {
    "name" : "public void getRegistrationState(@NonNull @CallbackExecutor Executor executor, @NonNull @RegistrationManager.ImsRegistrationState Consumer<Integer> stateCallback)",
    "returnType" : "void",
    "comment" : "\n     * Gets the registration state of the IMS service.\n     *\n     * Requires Permission: {@link android.Manifest.permission#READ_PRECISE_PHONE_STATE\n     * READ_PRECISE_PHONE_STATE} or that the calling app has carrier privileges\n     * (see {@link android.telephony.TelephonyManager#hasCarrierPrivileges}).\n     *\n     * @param executor The {@link Executor} that will be used to call the IMS registration state\n     * callback.\n     * @param stateCallback A callback called on the supplied {@link Executor} that will contain the\n     * registration state of the IMS service, which will be one of the\n     * following: {@link RegistrationManager#REGISTRATION_STATE_NOT_REGISTERED},\n     * {@link RegistrationManager#REGISTRATION_STATE_REGISTERING}, or\n     * {@link RegistrationManager#REGISTRATION_STATE_REGISTERED}.\n     * @throws UnsupportedOperationException If the device does not have\n     *          {@link PackageManager#FEATURE_TELEPHONY_IMS}.\n     ",
    "links" : [ "android.telephony.ims.RegistrationManager#REGISTRATION_STATE_NOT_REGISTERED", "android.content.pm.PackageManager#FEATURE_TELEPHONY_IMS", "android.Manifest.permission#READ_PRECISE_PHONE_STATEREAD_PRECISE_PHONE_STATE", "android.telephony.ims.RegistrationManager#REGISTRATION_STATE_REGISTERED", "android.telephony.TelephonyManager#hasCarrierPrivileges", "android.telephony.ims.RegistrationManager#REGISTRATION_STATE_REGISTERING", "android.annotation.CallbackExecutor" ]
  }, {
    "name" : "public void getRegistrationTransportType(@NonNull @CallbackExecutor Executor executor, @NonNull @AccessNetworkConstants.TransportType Consumer<Integer> transportTypeCallback)",
    "returnType" : "void",
    "comment" : "\n     * Gets the Transport Type associated with the current IMS registration.\n     *\n     * Requires Permission: {@link android.Manifest.permission#READ_PRECISE_PHONE_STATE\n     * READ_PRECISE_PHONE_STATE} or that the calling app has carrier privileges\n     * (see {@link android.telephony.TelephonyManager#hasCarrierPrivileges}).\n     *\n     * @param executor The {@link Executor} that will be used to call the transportTypeCallback.\n     * @param transportTypeCallback The transport type associated with the current IMS registration,\n     * which will be one of following:\n     * {@see AccessNetworkConstants#TRANSPORT_TYPE_WWAN},\n     * {@see AccessNetworkConstants#TRANSPORT_TYPE_WLAN}, or\n     * {@see AccessNetworkConstants#TRANSPORT_TYPE_INVALID}.\n     * @throws UnsupportedOperationException If the device does not have\n     *          {@link PackageManager#FEATURE_TELEPHONY_IMS}.\n     ",
    "links" : [ "android.content.pm.PackageManager#FEATURE_TELEPHONY_IMS", "android.Manifest.permission#READ_PRECISE_PHONE_STATEREAD_PRECISE_PHONE_STATE", "android.telephony.TelephonyManager#hasCarrierPrivileges", "android.annotation.CallbackExecutor" ]
  }, {
    "name" : "public void addOnAvailabilityChangedListener(@NonNull @CallbackExecutor Executor executor, @NonNull OnAvailabilityChangedListener listener) throws ImsException",
    "returnType" : "void",
    "comment" : "\n     * Add an {@link OnAvailabilityChangedListener} with the system, which will provide RCS\n     * availability updates for the subscription specified.\n     *\n     * Use {@link SubscriptionManager.OnSubscriptionsChangedListener} to listen to\n     * subscription changed events and call\n     * {@link #removeOnAvailabilityChangedListener(OnAvailabilityChangedListener)} to clean up\n     * after a subscription is removed.\n     * <p>\n     * When the listener is registered, it will initiate the callback listener to be called with\n     * the current capabilities.\n     *\n     * @param executor The executor the callback events should be run on.\n     * @param listener The RCS {@link OnAvailabilityChangedListener} to be registered.\n     * @see #removeOnAvailabilityChangedListener(OnAvailabilityChangedListener)\n     * @throws ImsException if the subscription associated with this instance of\n     * {@link ImsRcsManager} is valid, but the ImsService associated with the subscription is not\n     * available. This can happen if the ImsService has crashed, for example, or if the subscription\n     * becomes inactive. See {@link ImsException#getCode()} for more information on the error codes.\n     * @throws UnsupportedOperationException If the device does not have\n     *          {@link PackageManager#FEATURE_TELEPHONY_IMS}.\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageManager#FEATURE_TELEPHONY_IMS", "SubscriptionManager.OnSubscriptionsChangedListener", "OnAvailabilityChangedListener", "android.telephony.ims.ImsRcsManager", "#removeOnAvailabilityChangedListener(OnAvailabilityChangedListener)", "android.telephony.ims.ImsException#getCode()" ]
  }, {
    "name" : "public void removeOnAvailabilityChangedListener(@NonNull OnAvailabilityChangedListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Removes an existing RCS {@link OnAvailabilityChangedListener}.\n     * <p>\n     * When the subscription associated with this callback is removed (SIM removed, ESIM swap,\n     * etc...), this callback will automatically be unregistered. If this method is called for an\n     * inactive subscription, it will result in a no-op.\n     * @param listener The RCS {@link OnAvailabilityChangedListener} to be removed.\n     * @see #addOnAvailabilityChangedListener(Executor, OnAvailabilityChangedListener)\n     * @throws ImsException if the IMS service is not available when calling this method.\n     * See {@link ImsException#getCode()} for more information on the error codes.\n     * @throws UnsupportedOperationException If the device does not have\n     *          {@link PackageManager#FEATURE_TELEPHONY_IMS}.\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageManager#FEATURE_TELEPHONY_IMS", "OnAvailabilityChangedListener", "android.telephony.ims.ImsException#getCode()" ]
  }, {
    "name" : "public boolean isCapable(@RcsImsCapabilityFlag int capability, @ImsRegistrationImplBase.ImsRegistrationTech int radioTech) throws ImsException",
    "returnType" : "boolean",
    "comment" : "\n     * Query for the capability of an IMS RCS service provided by the framework.\n     * <p>\n     * This only reports the status of RCS capabilities provided by the framework, not necessarily\n     * RCS capabilities provided over-the-top by applications.\n     *\n     * @param capability The RCS capability to query.\n     * @param radioTech The radio technology type that we are querying.\n     * @return true if the RCS capability is capable for this subscription, false otherwise. This\n     * does not necessarily mean that we are registered for IMS and the capability is available, but\n     * rather the subscription is capable of this service over IMS.\n     * @see #isAvailable(int, int)\n     * @see android.telephony.CarrierConfigManager#KEY_USE_RCS_PRESENCE_BOOL\n     * @see android.telephony.CarrierConfigManager.Ims#KEY_ENABLE_PRESENCE_CAPABILITY_EXCHANGE_BOOL\n     * @throws ImsException if the IMS service is not available when calling this method.\n     * See {@link ImsException#getCode()} for more information on the error codes.\n     * @throws UnsupportedOperationException If the device does not have\n     *          {@link PackageManager#FEATURE_TELEPHONY_IMS}.\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageManager#FEATURE_TELEPHONY_IMS", "android.telephony.ims.ImsException#getCode()" ]
  }, {
    "name" : "public boolean isAvailable(@RcsImsCapabilityFlag int capability, @ImsRegistrationImplBase.ImsRegistrationTech int radioTech) throws ImsException",
    "returnType" : "boolean",
    "comment" : "\n     * Query the availability of an IMS RCS capability.\n     * <p>\n     * This only reports the status of RCS capabilities provided by the framework, not necessarily\n     * RCS capabilities provided by over-the-top by applications.\n     *\n     * @param capability the RCS capability to query.\n     * @param radioTech The radio technology type that we are querying.\n     * @return true if the RCS capability is currently available for the associated subscription,\n     * false otherwise. If the capability is available, IMS is registered and the service is\n     * currently available over IMS.\n     * @see #isCapable(int, int)\n     * @throws ImsException if the IMS service is not available when calling this method.\n     * See {@link ImsException#getCode()} for more information on the error codes.\n     * @throws UnsupportedOperationException If the device does not have\n     *          {@link PackageManager#FEATURE_TELEPHONY_IMS}.\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageManager#FEATURE_TELEPHONY_IMS", "android.telephony.ims.ImsException#getCode()" ]
  }, {
    "name" : "public void registerImsStateCallback(@NonNull Executor executor, @NonNull ImsStateCallback callback) throws ImsException",
    "returnType" : "void",
    "comment" : "\n     * Register a new callback, which is used to notify the registrant of changes to\n     * the state of the underlying IMS service that is attached to telephony to\n     * implement IMS functionality. If the manager is created for\n     * the {@link android.telephony.SubscriptionManager#DEFAULT_SUBSCRIPTION_ID},\n     * this throws an {@link ImsException}.\n     *\n     * <p>Requires Permission:\n     * {@link android.Manifest.permission#READ_PRECISE_PHONE_STATE READ_PRECISE_PHONE_STATE}\n     * or that the calling app has carrier privileges\n     * (see {@link android.telephony.TelephonyManager#hasCarrierPrivileges}).\n     *\n     * @param executor the Executor that will be used to call the {@link ImsStateCallback}.\n     * @param callback The callback instance being registered.\n     * @throws ImsException in the case that the callback can not be registered.\n     * See {@link ImsException#getCode} for more information on when this is called.\n     ",
    "links" : [ "android.Manifest.permission#READ_PRECISE_PHONE_STATE", "android.telephony.ims.ImsException", "android.telephony.SubscriptionManager#DEFAULT_SUBSCRIPTION_ID", "android.telephony.TelephonyManager#hasCarrierPrivileges", "android.telephony.ims.ImsException#getCode", "android.telephony.ims.ImsStateCallback" ]
  }, {
    "name" : "public void unregisterImsStateCallback(@NonNull ImsStateCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Unregisters a previously registered callback.\n     *\n     * @param callback The callback instance to be unregistered.\n     ",
    "links" : [ ]
  }, {
    "name" : "private AvailabilityCallbackAdapter addAvailabilityChangedListenerToCollection(@NonNull Executor executor, @NonNull OnAvailabilityChangedListener listener)",
    "returnType" : "AvailabilityCallbackAdapter",
    "comment" : "\n     * Add the {@link OnAvailabilityChangedListener} to collection for tracking.\n     * @param executor The executor that will be used when the publish state is changed and the\n     * {@link OnAvailabilityChangedListener} is called.\n     * @param listener The {@link OnAvailabilityChangedListener} to call the publish state changed.\n     * @return The {@link AvailabilityCallbackAdapter} to wrapper the\n     * {@link OnAvailabilityChangedListener}\n     ",
    "links" : [ "OnAvailabilityChangedListener", "AvailabilityCallbackAdapter" ]
  }, {
    "name" : "private AvailabilityCallbackAdapter removeAvailabilityChangedListenerFromCollection(@NonNull OnAvailabilityChangedListener listener)",
    "returnType" : "AvailabilityCallbackAdapter",
    "comment" : "\n     * Remove the existing {@link OnAvailabilityChangedListener} from the collection.\n     * @param listener The {@link OnAvailabilityChangedListener} to remove from the collection.\n     * @return The wrapper class {@link AvailabilityCallbackAdapter} associated with the\n     * {@link OnAvailabilityChangedListener}.\n     ",
    "links" : [ "OnAvailabilityChangedListener", "AvailabilityCallbackAdapter" ]
  }, {
    "name" : "private IImsRcsController getIImsRcsController()",
    "returnType" : "IImsRcsController",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public RcsUceAdapter getUceAdapter()", "public void registerImsRegistrationCallback(@NonNull @CallbackExecutor Executor executor, @NonNull RegistrationManager.RegistrationCallback c) throws ImsException", "public void unregisterImsRegistrationCallback(@NonNull RegistrationManager.RegistrationCallback c)", "public void getRegistrationState(@NonNull @CallbackExecutor Executor executor, @NonNull @RegistrationManager.ImsRegistrationState Consumer<Integer> stateCallback)", "public void getRegistrationTransportType(@NonNull @CallbackExecutor Executor executor, @NonNull @AccessNetworkConstants.TransportType Consumer<Integer> transportTypeCallback)", "public void addOnAvailabilityChangedListener(@NonNull @CallbackExecutor Executor executor, @NonNull OnAvailabilityChangedListener listener) throws ImsException", "public void removeOnAvailabilityChangedListener(@NonNull OnAvailabilityChangedListener listener)", "public boolean isCapable(@RcsImsCapabilityFlag int capability, @ImsRegistrationImplBase.ImsRegistrationTech int radioTech) throws ImsException", "public boolean isAvailable(@RcsImsCapabilityFlag int capability, @ImsRegistrationImplBase.ImsRegistrationTech int radioTech) throws ImsException", "public void registerImsStateCallback(@NonNull Executor executor, @NonNull ImsStateCallback callback) throws ImsException", "public void unregisterImsStateCallback(@NonNull ImsStateCallback callback)", "private AvailabilityCallbackAdapter addAvailabilityChangedListenerToCollection(@NonNull Executor executor, @NonNull OnAvailabilityChangedListener listener)", "private AvailabilityCallbackAdapter removeAvailabilityChangedListenerFromCollection(@NonNull OnAvailabilityChangedListener listener)", "private IImsRcsController getIImsRcsController()" ],
  "variableNames" : [ "TAG", "ACTION_SHOW_CAPABILITY_DISCOVERY_OPT_IN", "CAPABILITY_TYPE_NONE", "CAPABILITY_TYPE_OPTIONS_UCE", "CAPABILITY_TYPE_PRESENCE_UCE", "CAPABILITY_TYPE_MAX", "mSubId", "mContext", "mBinderCache", "mTelephonyBinderCache", "mAvailabilityChangedCallbacks" ]
}