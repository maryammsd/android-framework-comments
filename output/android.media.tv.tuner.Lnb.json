{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/tv/tuner/Lnb.java",
  "packageName" : "android.media.tv.tuner",
  "className" : "Lnb",
  "comment" : "\n * LNB (low-noise block downconverter) for satellite tuner.\n *\n * A Tuner LNB (low-noise block downconverter) is used by satellite frontend to receive the\n * microwave signal from the satellite, amplify it, and downconvert the frequency to a lower\n * frequency.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "VOLTAGE_NONE",
    "type" : "int",
    "comment" : "\n     * LNB power voltage not set.\n     ",
    "links" : [ ]
  }, {
    "name" : "VOLTAGE_5V",
    "type" : "int",
    "comment" : "\n     * LNB power voltage 5V.\n     ",
    "links" : [ ]
  }, {
    "name" : "VOLTAGE_11V",
    "type" : "int",
    "comment" : "\n     * LNB power voltage 11V.\n     ",
    "links" : [ ]
  }, {
    "name" : "VOLTAGE_12V",
    "type" : "int",
    "comment" : "\n     * LNB power voltage 12V.\n     ",
    "links" : [ ]
  }, {
    "name" : "VOLTAGE_13V",
    "type" : "int",
    "comment" : "\n     * LNB power voltage 13V.\n     ",
    "links" : [ ]
  }, {
    "name" : "VOLTAGE_14V",
    "type" : "int",
    "comment" : "\n     * LNB power voltage 14V.\n     ",
    "links" : [ ]
  }, {
    "name" : "VOLTAGE_15V",
    "type" : "int",
    "comment" : "\n     * LNB power voltage 15V.\n     ",
    "links" : [ ]
  }, {
    "name" : "VOLTAGE_18V",
    "type" : "int",
    "comment" : "\n     * LNB power voltage 18V.\n     ",
    "links" : [ ]
  }, {
    "name" : "VOLTAGE_19V",
    "type" : "int",
    "comment" : "\n     * LNB power voltage 19V.\n     ",
    "links" : [ ]
  }, {
    "name" : "TONE_NONE",
    "type" : "int",
    "comment" : "\n     * LNB tone mode not set.\n     ",
    "links" : [ ]
  }, {
    "name" : "TONE_CONTINUOUS",
    "type" : "int",
    "comment" : "\n     * LNB continuous tone mode.\n     ",
    "links" : [ ]
  }, {
    "name" : "POSITION_UNDEFINED",
    "type" : "int",
    "comment" : "\n     * LNB position is not defined.\n     ",
    "links" : [ ]
  }, {
    "name" : "POSITION_A",
    "type" : "int",
    "comment" : "\n     * Position A of two-band LNBs\n     ",
    "links" : [ ]
  }, {
    "name" : "POSITION_B",
    "type" : "int",
    "comment" : "\n     * Position B of two-band LNBs\n     ",
    "links" : [ ]
  }, {
    "name" : "EVENT_TYPE_DISEQC_RX_OVERFLOW",
    "type" : "int",
    "comment" : "\n     * Outgoing Diseqc message overflow.\n     ",
    "links" : [ ]
  }, {
    "name" : "EVENT_TYPE_DISEQC_RX_TIMEOUT",
    "type" : "int",
    "comment" : "\n     * Outgoing Diseqc message isn't delivered on time.\n     ",
    "links" : [ ]
  }, {
    "name" : "EVENT_TYPE_DISEQC_RX_PARITY_ERROR",
    "type" : "int",
    "comment" : "\n     * Incoming Diseqc message has parity error.\n     ",
    "links" : [ ]
  }, {
    "name" : "EVENT_TYPE_LNB_OVERLOAD",
    "type" : "int",
    "comment" : "\n     * LNB is overload.\n     ",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallbackMap",
    "type" : "Map<LnbCallback, Executor>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOwner",
    "type" : "Tuner",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTunerResourceManager",
    "type" : "TunerResourceManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mClientId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallbackLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNativeContext",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsClosed",
    "type" : "Boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private native int nativeSetVoltage(int voltage)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native int nativeSetTone(int tone)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native int nativeSetSatellitePosition(int position)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native int nativeSendDiseqcMessage(byte[] message)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native int nativeClose()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void setCallbackAndOwner(Tuner tuner, Executor executor, @Nullable LnbCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addCallback(@NonNull Executor executor, @NonNull LnbCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Adds LnbCallback\n     *\n     * @param executor the executor on which callback will be invoked. Cannot be null.\n     * @param callback the callback to receive notifications from LNB.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean removeCallback(@NonNull LnbCallback callback)",
    "returnType" : "boolean",
    "comment" : "\n     * Removes LnbCallback\n     *\n     * @param callback the callback be removed for callback\n     *\n     * @return {@code true} when successful. {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : " void setOwner(@NonNull Tuner newOwner)",
    "returnType" : "void",
    "comment" : " package ",
    "links" : [ ]
  }, {
    "name" : "private void onEvent(int eventType)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onDiseqcMessage(byte[] diseqcMessage)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean isClosed()",
    "returnType" : "boolean",
    "comment" : " package ",
    "links" : [ ]
  }, {
    "name" : " void closeInternal()",
    "returnType" : "void",
    "comment" : " package ",
    "links" : [ ]
  }, {
    "name" : "public int setVoltage(@Voltage int voltage)",
    "returnType" : "int",
    "comment" : "\n     * Sets the LNB's power voltage.\n     *\n     * @param voltage the power voltage constant the Lnb to use.\n     * @return result status of the operation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int setTone(@Tone int tone)",
    "returnType" : "int",
    "comment" : "\n     * Sets the LNB's tone mode.\n     *\n     * @param tone the tone mode the Lnb to use.\n     * @return result status of the operation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int setSatellitePosition(@Position int position)",
    "returnType" : "int",
    "comment" : "\n     * Selects the LNB's position.\n     *\n     * @param position the position the Lnb to use.\n     * @return result status of the operation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int sendDiseqcMessage(@NonNull byte[] message)",
    "returnType" : "int",
    "comment" : "\n     * Sends DiSEqC (Digital Satellite Equipment Control) message.\n     *\n     * The response message from the device comes back through callback onDiseqcMessage.\n     *\n     * @param message a byte array of data for DiSEqC message which is specified by EUTELSAT Bus\n     *         Functional Specification Version 4.2.\n     *\n     * @return result status of the operation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "\n     * Releases the LNB instance.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void acquireTRMSLock(String functionNameForLog)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void releaseTRMSLock()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private native int nativeSetVoltage(int voltage)", "private native int nativeSetTone(int tone)", "private native int nativeSetSatellitePosition(int position)", "private native int nativeSendDiseqcMessage(byte[] message)", "private native int nativeClose()", " void setCallbackAndOwner(Tuner tuner, Executor executor, @Nullable LnbCallback callback)", "public void addCallback(@NonNull Executor executor, @NonNull LnbCallback callback)", "public boolean removeCallback(@NonNull LnbCallback callback)", " void setOwner(@NonNull Tuner newOwner)", "private void onEvent(int eventType)", "private void onDiseqcMessage(byte[] diseqcMessage)", " boolean isClosed()", " void closeInternal()", "public int setVoltage(@Voltage int voltage)", "public int setTone(@Tone int tone)", "public int setSatellitePosition(@Position int position)", "public int sendDiseqcMessage(@NonNull byte[] message)", "public void close()", "private void acquireTRMSLock(String functionNameForLog)", "private void releaseTRMSLock()" ],
  "variableNames" : [ "VOLTAGE_NONE", "VOLTAGE_5V", "VOLTAGE_11V", "VOLTAGE_12V", "VOLTAGE_13V", "VOLTAGE_14V", "VOLTAGE_15V", "VOLTAGE_18V", "VOLTAGE_19V", "TONE_NONE", "TONE_CONTINUOUS", "POSITION_UNDEFINED", "POSITION_A", "POSITION_B", "EVENT_TYPE_DISEQC_RX_OVERFLOW", "EVENT_TYPE_DISEQC_RX_TIMEOUT", "EVENT_TYPE_DISEQC_RX_PARITY_ERROR", "EVENT_TYPE_LNB_OVERLOAD", "TAG", "DEBUG", "mCallbackMap", "mOwner", "mTunerResourceManager", "mClientId", "mCallbackLock", "mNativeContext", "mIsClosed", "mLock" ]
}