{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xpath/axes/OneStepIterator.java",
  "packageName" : "org.apache.xpath.axes",
  "className" : "OneStepIterator",
  "comment" : "\n * This class implements a general iterator for\n * those LocationSteps with only one step, and perhaps a predicate.\n * @see org.apache.xpath.axes#LocPathIterator\n * @xsl.usage advanced\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_axis",
    "type" : "int",
    "comment" : " The traversal axis from where the nodes will be filtered. ",
    "links" : [ ]
  }, {
    "name" : "m_iterator",
    "type" : "DTMAxisIterator",
    "comment" : " The DTM inner traversal class, that corresponds to the super axis. ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setRoot(int context, Object environment)",
    "returnType" : "void",
    "comment" : "\n   * Initialize the context values for this expression\n   * after it is cloned.\n   *\n   * @param context The XPath runtime context for this\n   * transformation.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void detach()",
    "returnType" : "void",
    "comment" : "\n   *  Detaches the iterator from the set which it iterated over, releasing\n   * any computational resources and placing the iterator in the INVALID\n   * state. After<code>detach</code> has been invoked, calls to\n   * <code>nextNode</code> or<code>previousNode</code> will raise the\n   * exception INVALID_STATE_ERR.\n   ",
    "links" : [ ]
  }, {
    "name" : "protected int getNextNode()",
    "returnType" : "int",
    "comment" : "\n   * Get the next node via getFirstAttribute && getNextAttribute.\n   ",
    "links" : [ ]
  }, {
    "name" : "public Object clone() throws CloneNotSupportedException",
    "returnType" : "Object",
    "comment" : "\n   * Get a cloned iterator.\n   *\n   * @return A new iterator that can be used without mutating this one.\n   *\n   * @throws CloneNotSupportedException\n   ",
    "links" : [ ]
  }, {
    "name" : "public DTMIterator cloneWithReset() throws CloneNotSupportedException",
    "returnType" : "DTMIterator",
    "comment" : "\n   *  Get a cloned Iterator that is reset to the beginning\n   *  of the query.\n   * \n   *  @return A cloned NodeIterator set of the start of the query.\n   * \n   *  @throws CloneNotSupportedException\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean isReverseAxes()",
    "returnType" : "boolean",
    "comment" : "\n   * Tells if this is a reverse axes.  Overrides AxesWalker#isReverseAxes.\n   *\n   * @return true for this class.\n   ",
    "links" : [ ]
  }, {
    "name" : "protected int getProximityPosition(int predicateIndex)",
    "returnType" : "int",
    "comment" : "\n   * Get the current sub-context position.  In order to do the\n   * reverse axes count, for the moment this re-searches the axes\n   * up to the predicate.  An optimization on this is to cache\n   * the nodes searched, but, for the moment, this case is probably\n   * rare enough that the added complexity isn't worth it.\n   *\n   * @param predicateIndex The predicate index of the proximity position.\n   *\n   * @return The pridicate index, or -1.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getLength()",
    "returnType" : "int",
    "comment" : "\n   *  The number of nodes in the list. The range of valid child node indices\n   * is 0 to <code>length-1</code> inclusive.\n   *\n   * @return The number of nodes in the list, always greater or equal to zero.\n   ",
    "links" : [ ]
  }, {
    "name" : "protected void countProximityPosition(int i)",
    "returnType" : "void",
    "comment" : "\n   * Count backwards one proximity position.\n   *\n   * @param i The predicate index.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void reset()",
    "returnType" : "void",
    "comment" : "\n   * Reset the iterator.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getAxis()",
    "returnType" : "int",
    "comment" : "\n   * Returns the axis being iterated, if it is known.\n   * \n   * @return Axis.CHILD, etc., or -1 if the axis is not known or is of multiple \n   * types.\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean deepEquals(Expression expr)",
    "returnType" : "boolean",
    "comment" : "\n   * @see Expression#deepEquals(Expression)\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setRoot(int context, Object environment)", "public void detach()", "protected int getNextNode()", "public Object clone() throws CloneNotSupportedException", "public DTMIterator cloneWithReset() throws CloneNotSupportedException", "public boolean isReverseAxes()", "protected int getProximityPosition(int predicateIndex)", "public int getLength()", "protected void countProximityPosition(int i)", "public void reset()", "public int getAxis()", "public boolean deepEquals(Expression expr)" ],
  "variableNames" : [ "serialVersionUID", "m_axis", "m_iterator" ]
}