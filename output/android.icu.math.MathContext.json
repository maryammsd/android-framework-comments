{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/math/MathContext.java",
  "packageName" : "android.icu.math",
  "className" : "MathContext",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "PLAIN",
    "type" : "int",
    "comment" : " [no exponent]",
    "links" : [ ]
  }, {
    "name" : "SCIENTIFIC",
    "type" : "int",
    "comment" : " 1 digit before .",
    "links" : [ ]
  }, {
    "name" : "ENGINEERING",
    "type" : "int",
    "comment" : " 1-3 digits before .",
    "links" : [ ]
  }, {
    "name" : "ROUND_CEILING",
    "type" : "int",
    "comment" : "\n  * Rounding mode to round to a more positive number.\n  * Used as a setting to control the rounding mode used during a\n  * <code>BigDecimal</code> operation.\n  * <p>\n  * If any of the discarded digits are non-zero then the result\n  * should be rounded towards the next more positive digit.\n  ",
    "links" : [ ]
  }, {
    "name" : "ROUND_DOWN",
    "type" : "int",
    "comment" : "\n  * Rounding mode to round towards zero.\n  * Used as a setting to control the rounding mode used during a\n  * <code>BigDecimal</code> operation.\n  * <p>\n  * All discarded digits are ignored (truncated).  The result is\n  * neither incremented nor decremented.\n  ",
    "links" : [ ]
  }, {
    "name" : "ROUND_FLOOR",
    "type" : "int",
    "comment" : "\n  * Rounding mode to round to a more negative number.\n  * Used as a setting to control the rounding mode used during a\n  * <code>BigDecimal</code> operation.\n  * <p>\n  * If any of the discarded digits are non-zero then the result\n  * should be rounded towards the next more negative digit.\n  ",
    "links" : [ ]
  }, {
    "name" : "ROUND_HALF_DOWN",
    "type" : "int",
    "comment" : "\n  * Rounding mode to round to nearest neighbor, where an equidistant\n  * value is rounded down.\n  * Used as a setting to control the rounding mode used during a\n  * <code>BigDecimal</code> operation.\n  * <p>\n  * If the discarded digits represent greater than half (0.5 times)\n  * the value of a one in the next position then the result should be\n  * rounded up (away from zero).  Otherwise the discarded digits are\n  * ignored.\n  ",
    "links" : [ ]
  }, {
    "name" : "ROUND_HALF_EVEN",
    "type" : "int",
    "comment" : "\n  * Rounding mode to round to nearest neighbor, where an equidistant\n  * value is rounded to the nearest even neighbor.\n  * Used as a setting to control the rounding mode used during a\n  * <code>BigDecimal</code> operation.\n  * <p>\n  * If the discarded digits represent greater than half (0.5 times)\n  * the value of a one in the next position then the result should be\n  * rounded up (away from zero).  If they represent less than half,\n  * then the result should be rounded down.\n  * <p>\n  * Otherwise (they represent exactly half) the result is rounded\n  * down if its rightmost digit is even, or rounded up if its\n  * rightmost digit is odd (to make an even digit).\n  ",
    "links" : [ ]
  }, {
    "name" : "ROUND_HALF_UP",
    "type" : "int",
    "comment" : "\n  * Rounding mode to round to nearest neighbor, where an equidistant\n  * value is rounded up.\n  * Used as a setting to control the rounding mode used during a\n  * <code>BigDecimal</code> operation.\n  * <p>\n  * If the discarded digits represent greater than or equal to half\n  * (0.5 times) the value of a one in the next position then the result\n  * should be rounded up (away from zero).  Otherwise the discarded\n  * digits are ignored.\n  ",
    "links" : [ ]
  }, {
    "name" : "ROUND_UNNECESSARY",
    "type" : "int",
    "comment" : "\n  * Rounding mode to assert that no rounding is necessary.\n  * Used as a setting to control the rounding mode used during a\n  * <code>BigDecimal</code> operation.\n  * <p>\n  * Rounding (potential loss of information) is not permitted.\n  * If any of the discarded digits are non-zero then an\n  * <code>ArithmeticException</code> should be thrown.\n  ",
    "links" : [ ]
  }, {
    "name" : "ROUND_UP",
    "type" : "int",
    "comment" : "\n  * Rounding mode to round away from zero.\n  * Used as a setting to control the rounding mode used during a\n  * <code>BigDecimal</code> operation.\n  * <p>\n  * If any of the discarded digits are non-zero then the result will\n  * be rounded up (away from zero).\n  ",
    "links" : [ ]
  }, {
    "name" : "digits",
    "type" : "int",
    "comment" : "\n  * The number of digits (precision) to be used for an operation.\n  * A value of 0 indicates that unlimited precision (as many digits\n  * as are required) will be used.\n  * <p>\n  * The {@link BigDecimal} operator methods use this value to\n  * determine the precision of results.\n  * Note that leading zeros (in the integer part of a number) are\n  * never significant.\n  * <p>\n  * <code>digits</code> will always be non-negative.\n  *\n  * @serial\n  ",
    "links" : [ "android.icu.math.BigDecimal" ]
  }, {
    "name" : "form",
    "type" : "int",
    "comment" : " values for this must fit in a byte",
    "links" : [ ]
  }, {
    "name" : "lostDigits",
    "type" : "boolean",
    "comment" : "\n  * Controls whether lost digits checking is enabled for an\n  * operation.\n  * Set to <code>true</code> to enable checking, or\n  * to <code>false</code> to disable checking.\n  * <p>\n  * When enabled, the {@link BigDecimal} operator methods check\n  * the precision of their operand or operands, and throw an\n  * <code>ArithmeticException</code> if an operand is more precise\n  * than the digits setting (that is, digits would be lost).\n  * When disabled, operands are rounded to the specified digits.\n  *\n  * @serial\n  ",
    "links" : [ "android.icu.math.BigDecimal" ]
  }, {
    "name" : "roundingMode",
    "type" : "int",
    "comment" : "\n  * The rounding algorithm to be used for an operation.\n  * <p>\n  * The {@link BigDecimal} operator methods use this value to\n  * determine the algorithm to be used when non-zero digits have to\n  * be discarded in order to reduce the precision of a result.\n  * The value must be one of the public constants whose name starts\n  * with <code>ROUND_</code>.\n  *\n  * @see #ROUND_CEILING\n  * @see #ROUND_DOWN\n  * @see #ROUND_FLOOR\n  * @see #ROUND_HALF_DOWN\n  * @see #ROUND_HALF_EVEN\n  * @see #ROUND_HALF_UP\n  * @see #ROUND_UNNECESSARY\n  * @see #ROUND_UP\n  * @serial\n  ",
    "links" : [ "android.icu.math.BigDecimal" ]
  }, {
    "name" : "DEFAULT_FORM",
    "type" : "int",
    "comment" : " default settings",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_DIGITS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_LOSTDIGITS",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_ROUNDINGMODE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MIN_DIGITS",
    "type" : "int",
    "comment" : " smallest value for DIGITS.",
    "links" : [ ]
  }, {
    "name" : "MAX_DIGITS",
    "type" : "int",
    "comment" : " largest value for DIGITS.  If increased,",
    "links" : [ ]
  }, {
    "name" : "ROUNDS",
    "type" : "int[]",
    "comment" : " list of valid rounding mode values, most common two first",
    "links" : [ ]
  }, {
    "name" : "ROUNDWORDS",
    "type" : "java.lang.String[]",
    "comment" : " matching names of the ROUNDS values",
    "links" : [ ]
  }, {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : " Serialization version",
    "links" : [ ]
  }, {
    "name" : "DEFAULT",
    "type" : "android.icu.math.MathContext",
    "comment" : "\n  * A <code>MathContext</code> object initialized to the default\n  * settings for general-purpose arithmetic.  That is,\n  * <code>digits=9 form=SCIENTIFIC lostDigits=false\n  * roundingMode=ROUND_HALF_UP</code>.\n  *\n  * @see #SCIENTIFIC\n  * @see #ROUND_HALF_UP\n  ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getDigits()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getForm()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean getLostDigits()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getRoundingMode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public java.lang.String toString()",
    "returnType" : "java.lang.String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isValidRound(int testround)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int getDigits()", "public int getForm()", "public boolean getLostDigits()", "public int getRoundingMode()", "public java.lang.String toString()", "private static boolean isValidRound(int testround)" ],
  "variableNames" : [ "PLAIN", "SCIENTIFIC", "ENGINEERING", "ROUND_CEILING", "ROUND_DOWN", "ROUND_FLOOR", "ROUND_HALF_DOWN", "ROUND_HALF_EVEN", "ROUND_HALF_UP", "ROUND_UNNECESSARY", "ROUND_UP", "digits", "form", "lostDigits", "roundingMode", "DEFAULT_FORM", "DEFAULT_DIGITS", "DEFAULT_LOSTDIGITS", "DEFAULT_ROUNDINGMODE", "MIN_DIGITS", "MAX_DIGITS", "ROUNDS", "ROUNDWORDS", "serialVersionUID", "DEFAULT" ]
}