{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/net/DatagramPacket.java",
  "packageName" : "java.net",
  "className" : "DatagramPacket",
  "comment" : "\n * This class represents a datagram packet.\n * <p>\n * Datagram packets are used to implement a connectionless packet\n * delivery service. Each message is routed from one machine to\n * another based solely on information contained within that packet.\n * Multiple packets sent from one machine to another might be routed\n * differently, and might arrive in any order. Packet delivery is\n * not guaranteed.\n *\n * @author  Pavani Diwanji\n * @author  Benjamin Renaud\n * @since   1.0\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "buf",
    "type" : "byte[]",
    "comment" : "\n     * The fields of this class are package-private since DatagramSocketImpl\n     * classes needs to access them.\n     ",
    "links" : [ ]
  }, {
    "name" : "offset",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "length",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "bufLength",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "address",
    "type" : "InetAddress",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "port",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public synchronized InetAddress getAddress()",
    "returnType" : "InetAddress",
    "comment" : "\n     * Returns the IP address of the machine to which this datagram is being\n     * sent or from which the datagram was received.\n     *\n     * @return  the IP address of the machine to which this datagram is being\n     *          sent or from which the datagram was received.\n     * @see     java.net.InetAddress\n     * @see #setAddress(java.net.InetAddress)\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized int getPort()",
    "returnType" : "int",
    "comment" : "\n     * Returns the port number on the remote host to which this datagram is\n     * being sent or from which the datagram was received.\n     *\n     * @return  the port number on the remote host to which this datagram is\n     *          being sent or from which the datagram was received.\n     * @see #setPort(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized byte[] getData()",
    "returnType" : "byte[]",
    "comment" : "\n     * Returns the data buffer. The data received or the data to be sent\n     * starts from the {@code offset} in the buffer,\n     * and runs for {@code length} long.\n     *\n     * @return  the buffer used to receive or  send data\n     * @see #setData(byte[], int, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized int getOffset()",
    "returnType" : "int",
    "comment" : "\n     * Returns the offset of the data to be sent or the offset of the\n     * data received.\n     *\n     * @return  the offset of the data to be sent or the offset of the\n     *          data received.\n     *\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized int getLength()",
    "returnType" : "int",
    "comment" : "\n     * Returns the length of the data to be sent or the length of the\n     * data received.\n     *\n     * @return  the length of the data to be sent or the length of the\n     *          data received.\n     * @see #setLength(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void setData(byte[] buf, int offset, int length)",
    "returnType" : "void",
    "comment" : "\n     * Set the data buffer for this packet. This sets the\n     * data, length and offset of the packet.\n     *\n     * @param buf the buffer to set for this packet\n     *\n     * @param offset the offset into the data\n     *\n     * @param length the length of the data\n     *       and/or the length of the buffer used to receive data\n     *\n     * @exception NullPointerException if the argument is null\n     *\n     * @see #getData\n     * @see #getOffset\n     * @see #getLength\n     *\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void setAddress(InetAddress iaddr)",
    "returnType" : "void",
    "comment" : "\n     * Sets the IP address of the machine to which this datagram\n     * is being sent.\n     * @param iaddr the {@code InetAddress}\n     * @since   1.1\n     * @see #getAddress()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setReceivedLength(int length)",
    "returnType" : "void",
    "comment" : "\n     * Sets 'length' without changing 'userSuppliedLength', after receiving a packet.\n     * @hide for IoBridge\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void setPort(int iport)",
    "returnType" : "void",
    "comment" : "\n     * Sets the port number on the remote host to which this datagram\n     * is being sent.\n     * @param iport the port number\n     * @since   1.1\n     * @see #getPort()\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void setSocketAddress(SocketAddress address)",
    "returnType" : "void",
    "comment" : "\n     * Sets the SocketAddress (usually IP address + port number) of the remote\n     * host to which this datagram is being sent.\n     *\n     * @param address the {@code SocketAddress}\n     * @throws  IllegalArgumentException if address is null or is a\n     *          SocketAddress subclass not supported by this socket\n     *\n     * @since 1.4\n     * @see #getSocketAddress\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized SocketAddress getSocketAddress()",
    "returnType" : "SocketAddress",
    "comment" : "\n     * Gets the SocketAddress (usually IP address + port number) of the remote\n     * host that this packet is being sent to or is coming from.\n     *\n     * @return the {@code SocketAddress}\n     * @since 1.4\n     * @see #setSocketAddress\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void setData(byte[] buf)",
    "returnType" : "void",
    "comment" : "\n     * Set the data buffer for this packet. With the offset of\n     * this DatagramPacket set to 0, and the length set to\n     * the length of {@code buf}.\n     *\n     * @param buf the buffer to set for this packet.\n     *\n     * @exception NullPointerException if the argument is null.\n     *\n     * @see #getLength\n     * @see #getData\n     *\n     * @since 1.1\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void setLength(int length)",
    "returnType" : "void",
    "comment" : "\n     * Set the length for this packet. The length of the packet is\n     * the number of bytes from the packet's data buffer that will be\n     * sent, or the number of bytes of the packet's data buffer that\n     * will be used for receiving data. The length must be lesser or\n     * equal to the offset plus the length of the packet's buffer.\n     *\n     * @param length the length to set for this packet.\n     *\n     * @exception IllegalArgumentException if the length is negative\n     * of if the length is greater than the packet's data buffer\n     * length.\n     *\n     * @see #getLength\n     * @see #setData\n     *\n     * @since 1.1\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public synchronized InetAddress getAddress()", "public synchronized int getPort()", "public synchronized byte[] getData()", "public synchronized int getOffset()", "public synchronized int getLength()", "public synchronized void setData(byte[] buf, int offset, int length)", "public synchronized void setAddress(InetAddress iaddr)", "public void setReceivedLength(int length)", "public synchronized void setPort(int iport)", "public synchronized void setSocketAddress(SocketAddress address)", "public synchronized SocketAddress getSocketAddress()", "public synchronized void setData(byte[] buf)", "public synchronized void setLength(int length)" ],
  "variableNames" : [ "buf", "offset", "length", "bufLength", "address", "port" ]
}