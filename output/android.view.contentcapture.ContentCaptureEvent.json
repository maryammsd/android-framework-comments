{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/contentcapture/ContentCaptureEvent.java",
  "packageName" : "android.view.contentcapture",
  "className" : "ContentCaptureEvent",
  "comment" : " @hide ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TYPE_SESSION_FINISHED",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TYPE_SESSION_STARTED",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TYPE_VIEW_APPEARED",
    "type" : "int",
    "comment" : "\n     * Called when a node has been added to the screen and is visible to the user.\n     *\n     * On API level 33, this event may be re-sent with additional information if a view's children\n     * have changed, e.g. scrolling Views inside of a ListView. This information will be stored in\n     * the extras Bundle associated with the event's ViewNode. Within the Bundle, the\n     * \"android.view.ViewStructure.extra.ACTIVE_CHILDREN_IDS\" key may be used to get a list of\n     * Autofill IDs of active child views, and the\n     * \"android.view.ViewStructure.extra.FIRST_ACTIVE_POSITION\" key may be used to get the 0-based\n     * position of the first active child view in the list relative to the positions of child views\n     * in the container View's dataset.\n     *\n     * <p>The metadata of the node is available through {@link #getViewNode()}.\n     ",
    "links" : [ "#getViewNode()" ]
  }, {
    "name" : "TYPE_VIEW_DISAPPEARED",
    "type" : "int",
    "comment" : "\n     * Called when one or more nodes have been removed from the screen and is not visible to the\n     * user anymore.\n     *\n     * <p>To get the id(s), first call {@link #getIds()} - if it returns {@code null}, then call\n     * {@link #getId()}.\n     ",
    "links" : [ "#getId()", "#getIds()" ]
  }, {
    "name" : "TYPE_VIEW_TEXT_CHANGED",
    "type" : "int",
    "comment" : "\n     * Called when the text of a node has been changed.\n     *\n     * <p>The id of the node is available through {@link #getId()}, and the new text is\n     * available through {@link #getText()}.\n     ",
    "links" : [ "#getId()", "#getText()" ]
  }, {
    "name" : "TYPE_VIEW_TREE_APPEARING",
    "type" : "int",
    "comment" : "\n     * Called before events (such as {@link #TYPE_VIEW_APPEARED} and/or\n     * {@link #TYPE_VIEW_DISAPPEARED}) representing a view hierarchy are sent.\n     *\n     * <p><b>NOTE</b>: there is no guarantee this event will be sent. For example, it's not sent\n     * if the initial view hierarchy doesn't initially have any view that's important for content\n     * capture.\n     ",
    "links" : [ "#TYPE_VIEW_APPEARED", "#TYPE_VIEW_DISAPPEARED" ]
  }, {
    "name" : "TYPE_VIEW_TREE_APPEARED",
    "type" : "int",
    "comment" : "\n     * Called after events (such as {@link #TYPE_VIEW_APPEARED} and/or\n     * {@link #TYPE_VIEW_DISAPPEARED}) representing a view hierarchy were sent.\n     *\n     * <p><b>NOTE</b>: there is no guarantee this event will be sent. For example, it's not sent\n     * if the initial view hierarchy doesn't initially have any view that's important for content\n     * capture.\n     ",
    "links" : [ "#TYPE_VIEW_APPEARED", "#TYPE_VIEW_DISAPPEARED" ]
  }, {
    "name" : "TYPE_CONTEXT_UPDATED",
    "type" : "int",
    "comment" : "\n     * Called after a call to\n     * {@link ContentCaptureSession#setContentCaptureContext(ContentCaptureContext)}.\n     *\n     * <p>The passed context is available through {@link #getContentCaptureContext()}.\n     ",
    "links" : [ "#getContentCaptureContext()", "android.view.contentcapture.ContentCaptureSession#setContentCaptureContext(ContentCaptureContext)" ]
  }, {
    "name" : "TYPE_SESSION_RESUMED",
    "type" : "int",
    "comment" : "\n     * Called after the session is ready, typically after the activity resumed and the\n     * initial views appeared\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_SESSION_PAUSED",
    "type" : "int",
    "comment" : "\n     * Called after the session is paused, typically after the activity paused and the\n     * views disappeared.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_VIEW_INSETS_CHANGED",
    "type" : "int",
    "comment" : "\n     * Called when the view's insets are changed. The new insets associated with the\n     * event may then be retrieved by calling {@link #getInsets()}\n     ",
    "links" : [ "#getInsets()" ]
  }, {
    "name" : "TYPE_WINDOW_BOUNDS_CHANGED",
    "type" : "int",
    "comment" : "\n     * Called before {@link #TYPE_VIEW_TREE_APPEARING}, or after the size of the window containing\n     * the views changed.\n     ",
    "links" : [ "#TYPE_VIEW_TREE_APPEARING" ]
  }, {
    "name" : "MAX_INVALID_VALUE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "mSessionId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEventTime",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mId",
    "type" : "AutofillId",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIds",
    "type" : "ArrayList<AutofillId>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNode",
    "type" : "ViewNode",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mText",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mParentSessionId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mClientContext",
    "type" : "ContentCaptureContext",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInsets",
    "type" : "Insets",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBounds",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mComposingStart",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mComposingEnd",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSelectionStartIndex",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSelectionEndIndex",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTextHasComposingSpan",
    "type" : "boolean",
    "comment" : " Only used in the main Content Capture session, no need to parcel ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<ContentCaptureEvent>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public ContentCaptureEvent setAutofillId(@NonNull AutofillId id)",
    "returnType" : "ContentCaptureEvent",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public ContentCaptureEvent setAutofillIds(@NonNull ArrayList<AutofillId> ids)",
    "returnType" : "ContentCaptureEvent",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public ContentCaptureEvent addAutofillId(@NonNull AutofillId id)",
    "returnType" : "ContentCaptureEvent",
    "comment" : "\n     * Adds an autofill id to the this event, merging the single id into a list if necessary.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public ContentCaptureEvent setParentSessionId(int parentSessionId)",
    "returnType" : "ContentCaptureEvent",
    "comment" : "\n     * Used by {@link #TYPE_SESSION_STARTED} and {@link #TYPE_SESSION_FINISHED}.\n     *\n     * @hide\n     ",
    "links" : [ "#TYPE_SESSION_FINISHED", "#TYPE_SESSION_STARTED" ]
  }, {
    "name" : "public ContentCaptureEvent setClientContext(@NonNull ContentCaptureContext clientContext)",
    "returnType" : "ContentCaptureEvent",
    "comment" : "\n     * Used by {@link #TYPE_SESSION_STARTED} and {@link #TYPE_SESSION_FINISHED}.\n     *\n     * @hide\n     ",
    "links" : [ "#TYPE_SESSION_FINISHED", "#TYPE_SESSION_STARTED" ]
  }, {
    "name" : "public int getSessionId()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getParentSessionId()",
    "returnType" : "int",
    "comment" : "\n     * Used by {@link #TYPE_SESSION_STARTED} and {@link #TYPE_SESSION_FINISHED}.\n     *\n     * @hide\n     ",
    "links" : [ "#TYPE_SESSION_FINISHED", "#TYPE_SESSION_STARTED" ]
  }, {
    "name" : "public ContentCaptureContext getContentCaptureContext()",
    "returnType" : "ContentCaptureContext",
    "comment" : "\n     * Gets the {@link ContentCaptureContext} set calls to\n     * {@link ContentCaptureSession#setContentCaptureContext(ContentCaptureContext)}.\n     *\n     * <p>Only set on {@link #TYPE_CONTEXT_UPDATED} events.\n     ",
    "links" : [ "#TYPE_CONTEXT_UPDATED", "android.view.contentcapture.ContentCaptureSession#setContentCaptureContext(ContentCaptureContext)", "android.view.contentcapture.ContentCaptureContext" ]
  }, {
    "name" : "public ContentCaptureEvent setViewNode(@NonNull ViewNode node)",
    "returnType" : "ContentCaptureEvent",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public ContentCaptureEvent setText(@Nullable CharSequence text)",
    "returnType" : "ContentCaptureEvent",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public ContentCaptureEvent setComposingIndex(int start, int end)",
    "returnType" : "ContentCaptureEvent",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasComposingSpan()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public ContentCaptureEvent setSelectionIndex(int start, int end)",
    "returnType" : "ContentCaptureEvent",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : " boolean hasSameComposingSpan(@NonNull ContentCaptureEvent other)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean hasSameSelectionSpan(@NonNull ContentCaptureEvent other)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getComposingStart()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getComposingEnd()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getSelectionStart()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getSelectionEnd()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void restoreComposingSpan()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void restoreSelectionSpans()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ContentCaptureEvent setInsets(@NonNull Insets insets)",
    "returnType" : "ContentCaptureEvent",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public ContentCaptureEvent setBounds(@NonNull Rect bounds)",
    "returnType" : "ContentCaptureEvent",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getType()",
    "returnType" : "int",
    "comment" : "\n     * Gets the type of the event.\n     *\n     * @return one of {@link #TYPE_VIEW_APPEARED}, {@link #TYPE_VIEW_DISAPPEARED},\n     * {@link #TYPE_VIEW_TEXT_CHANGED}, {@link #TYPE_VIEW_TREE_APPEARING},\n     * {@link #TYPE_VIEW_TREE_APPEARED}, {@link #TYPE_CONTEXT_UPDATED},\n     * {@link #TYPE_SESSION_RESUMED}, or {@link #TYPE_SESSION_PAUSED}.\n     ",
    "links" : [ "#TYPE_VIEW_TEXT_CHANGED", "#TYPE_VIEW_TREE_APPEARED", "#TYPE_CONTEXT_UPDATED", "#TYPE_VIEW_APPEARED", "#TYPE_VIEW_DISAPPEARED", "#TYPE_SESSION_RESUMED", "#TYPE_SESSION_PAUSED", "#TYPE_VIEW_TREE_APPEARING" ]
  }, {
    "name" : "public long getEventTime()",
    "returnType" : "long",
    "comment" : "\n     * Gets when the event was generated, in millis since epoch.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ViewNode getViewNode()",
    "returnType" : "ViewNode",
    "comment" : "\n     * Gets the whole metadata of the node associated with the event.\n     *\n     * <p>Only set on {@link #TYPE_VIEW_APPEARED} events.\n     ",
    "links" : [ "#TYPE_VIEW_APPEARED" ]
  }, {
    "name" : "public AutofillId getId()",
    "returnType" : "AutofillId",
    "comment" : "\n     * Gets the {@link AutofillId} of the node associated with the event.\n     *\n     * <p>Only set on {@link #TYPE_VIEW_DISAPPEARED} (when the event contains just one node - if\n     * it contains more than one, this method returns {@code null} and the actual ids should be\n     * retrived by {@link #getIds()}) and {@link #TYPE_VIEW_TEXT_CHANGED} events.\n     ",
    "links" : [ "#TYPE_VIEW_TEXT_CHANGED", "#getIds()", "#TYPE_VIEW_DISAPPEARED", "android.view.autofill.AutofillId" ]
  }, {
    "name" : "public List<AutofillId> getIds()",
    "returnType" : "List<AutofillId>",
    "comment" : "\n     * Gets the {@link AutofillId AutofillIds} of the nodes associated with the event.\n     *\n     * <p>Only set on {@link #TYPE_VIEW_DISAPPEARED}, when the event contains more than one node\n     * (if it contains just one node, it's returned by {@link #getId()} instead.\n     ",
    "links" : [ "#getId()", "#TYPE_VIEW_DISAPPEARED", "android.view.autofill.AutofillId" ]
  }, {
    "name" : "public CharSequence getText()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Gets the current text of the node associated with the event.\n     *\n     * <p>Only set on {@link #TYPE_VIEW_TEXT_CHANGED} events.\n     ",
    "links" : [ "#TYPE_VIEW_TEXT_CHANGED" ]
  }, {
    "name" : "public Insets getInsets()",
    "returnType" : "Insets",
    "comment" : "\n     * Gets the rectangle of the insets associated with the event. Valid insets will only be\n     * returned if the type of the event is {@link #TYPE_VIEW_INSETS_CHANGED}, otherwise they\n     * will be null.\n     ",
    "links" : [ "#TYPE_VIEW_INSETS_CHANGED" ]
  }, {
    "name" : "public Rect getBounds()",
    "returnType" : "Rect",
    "comment" : "\n     * Gets the {@link Rect} bounds of the window associated with the event. Valid bounds will only\n     * be returned if the type of the event is {@link #TYPE_WINDOW_BOUNDS_CHANGED}, otherwise they\n     * will be null.\n     ",
    "links" : [ "android.graphics.Rect", "#TYPE_WINDOW_BOUNDS_CHANGED" ]
  }, {
    "name" : "public void mergeEvent(@NonNull ContentCaptureEvent event)",
    "returnType" : "void",
    "comment" : "\n     * Merges event of the same type, either {@link #TYPE_VIEW_TEXT_CHANGED}\n     * or {@link #TYPE_VIEW_DISAPPEARED}.\n     *\n     * @hide\n     ",
    "links" : [ "#TYPE_VIEW_TEXT_CHANGED", "#TYPE_VIEW_DISAPPEARED" ]
  }, {
    "name" : "public void dump(@NonNull PrintWriter pw)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel parcel, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String getTypeAsString(@EventType int type)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public ContentCaptureEvent setAutofillId(@NonNull AutofillId id)", "public ContentCaptureEvent setAutofillIds(@NonNull ArrayList<AutofillId> ids)", "public ContentCaptureEvent addAutofillId(@NonNull AutofillId id)", "public ContentCaptureEvent setParentSessionId(int parentSessionId)", "public ContentCaptureEvent setClientContext(@NonNull ContentCaptureContext clientContext)", "public int getSessionId()", "public int getParentSessionId()", "public ContentCaptureContext getContentCaptureContext()", "public ContentCaptureEvent setViewNode(@NonNull ViewNode node)", "public ContentCaptureEvent setText(@Nullable CharSequence text)", "public ContentCaptureEvent setComposingIndex(int start, int end)", "public boolean hasComposingSpan()", "public ContentCaptureEvent setSelectionIndex(int start, int end)", " boolean hasSameComposingSpan(@NonNull ContentCaptureEvent other)", " boolean hasSameSelectionSpan(@NonNull ContentCaptureEvent other)", "private int getComposingStart()", "private int getComposingEnd()", "private int getSelectionStart()", "private int getSelectionEnd()", "private void restoreComposingSpan()", "private void restoreSelectionSpans()", "public ContentCaptureEvent setInsets(@NonNull Insets insets)", "public ContentCaptureEvent setBounds(@NonNull Rect bounds)", "public int getType()", "public long getEventTime()", "public ViewNode getViewNode()", "public AutofillId getId()", "public List<AutofillId> getIds()", "public CharSequence getText()", "public Insets getInsets()", "public Rect getBounds()", "public void mergeEvent(@NonNull ContentCaptureEvent event)", "public void dump(@NonNull PrintWriter pw)", "public String toString()", "public int describeContents()", "public void writeToParcel(Parcel parcel, int flags)", "public static String getTypeAsString(@EventType int type)" ],
  "variableNames" : [ "TAG", "TYPE_SESSION_FINISHED", "TYPE_SESSION_STARTED", "TYPE_VIEW_APPEARED", "TYPE_VIEW_DISAPPEARED", "TYPE_VIEW_TEXT_CHANGED", "TYPE_VIEW_TREE_APPEARING", "TYPE_VIEW_TREE_APPEARED", "TYPE_CONTEXT_UPDATED", "TYPE_SESSION_RESUMED", "TYPE_SESSION_PAUSED", "TYPE_VIEW_INSETS_CHANGED", "TYPE_WINDOW_BOUNDS_CHANGED", "MAX_INVALID_VALUE", "mSessionId", "mType", "mEventTime", "mId", "mIds", "mNode", "mText", "mParentSessionId", "mClientContext", "mInsets", "mBounds", "mComposingStart", "mComposingEnd", "mSelectionStartIndex", "mSelectionEndIndex", "mTextHasComposingSpan", "CREATOR" ]
}