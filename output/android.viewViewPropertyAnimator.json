{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/view/ViewPropertyAnimator.java",
  "packageName" : "android.view",
  "className" : "ViewPropertyAnimator",
  "comment" : "\n * This class enables automatic and optimized animation of select properties on View objects.\n * If only one or two properties on a View object are being animated, then using an\n * {@link android.animation.ObjectAnimator} is fine; the property setters called by ObjectAnimator\n * are well equipped to do the right thing to set the property and invalidate the view\n * appropriately. But if several properties are animated simultaneously, or if you just want a\n * more convenient syntax to animate a specific property, then ViewPropertyAnimator might be\n * more well-suited to the task.\n *\n * <p>This class may provide better performance for several simultaneous animations, because\n * it will optimize invalidate calls to take place only once for several properties instead of each\n * animated property independently causing its own invalidation. Also, the syntax of using this\n * class could be easier to use because the caller need only tell the View object which\n * property to animate, and the value to animate either to or by, and this class handles the\n * details of configuring the underlying Animator class and starting it.</p>\n *\n * <p>This class is not constructed by the caller, but rather by the View whose properties\n * it will animate. Calls to {@link android.view.View#animate()} will return a reference\n * to the appropriate ViewPropertyAnimator object for that View.</p>\n *\n ",
  "variables" : [ {
    "name" : "mView",
    "type" : "View",
    "comment" : "\n     * The View whose properties are being animated by this class. This is set at\n     * construction time.\n     ",
    "links" : [ ]
  }, {
    "name" : "mDuration",
    "type" : "long",
    "comment" : "\n     * The duration of the underlying Animator object. By default, we don't set the duration\n     * on the Animator and just use its default duration. If the duration is ever set on this\n     * Animator, then we use the duration that it was set to.\n     ",
    "links" : [ ]
  }, {
    "name" : "mDurationSet",
    "type" : "boolean",
    "comment" : "\n     * A flag indicating whether the duration has been set on this object. If not, we don't set\n     * the duration on the underlying Animator, but instead just use its default duration.\n     ",
    "links" : [ ]
  }, {
    "name" : "mStartDelay",
    "type" : "long",
    "comment" : "\n     * The startDelay of the underlying Animator object. By default, we don't set the startDelay\n     * on the Animator and just use its default startDelay. If the startDelay is ever set on this\n     * Animator, then we use the startDelay that it was set to.\n     ",
    "links" : [ ]
  }, {
    "name" : "mStartDelaySet",
    "type" : "boolean",
    "comment" : "\n     * A flag indicating whether the startDelay has been set on this object. If not, we don't set\n     * the startDelay on the underlying Animator, but instead just use its default startDelay.\n     ",
    "links" : [ ]
  }, {
    "name" : "mInterpolator",
    "type" : "TimeInterpolator",
    "comment" : "\n     * The interpolator of the underlying Animator object. By default, we don't set the interpolator\n     * on the Animator and just use its default interpolator. If the interpolator is ever set on\n     * this Animator, then we use the interpolator that it was set to.\n     ",
    "links" : [ ]
  }, {
    "name" : "mInterpolatorSet",
    "type" : "boolean",
    "comment" : "\n     * A flag indicating whether the interpolator has been set on this object. If not, we don't set\n     * the interpolator on the underlying Animator, but instead just use its default interpolator.\n     ",
    "links" : [ ]
  }, {
    "name" : "mListener",
    "type" : "Animator.AnimatorListener",
    "comment" : "\n     * Listener for the lifecycle events of the underlying ValueAnimator object.\n     ",
    "links" : [ ]
  }, {
    "name" : "mUpdateListener",
    "type" : "ValueAnimator.AnimatorUpdateListener",
    "comment" : "\n     * Listener for the update events of the underlying ValueAnimator object.\n     ",
    "links" : [ ]
  }, {
    "name" : "mTempValueAnimator",
    "type" : "ValueAnimator",
    "comment" : "\n     * A lazily-created ValueAnimator used in order to get some default animator properties\n     * (duration, start delay, interpolator, etc.).\n     ",
    "links" : [ ]
  }, {
    "name" : "mAnimatorEventListener",
    "type" : "AnimatorEventListener",
    "comment" : "\n     * This listener is the mechanism by which the underlying Animator causes changes to the\n     * properties currently being animated, as well as the cleanup after an animation is\n     * complete.\n     ",
    "links" : [ ]
  }, {
    "name" : "mPendingAnimations",
    "type" : "ArrayList<NameValuesHolder>",
    "comment" : "\n     * This list holds the properties that have been asked to animate. We allow the caller to\n     * request several animations prior to actually starting the underlying animator. This\n     * enables us to run one single animator to handle several properties in parallel. Each\n     * property is tossed onto the pending list until the animation actually starts (which is\n     * done by posting it onto mView), at which time the pending list is cleared and the properties\n     * on that list are added to the list of properties associated with that animator.\n     ",
    "links" : [ ]
  }, {
    "name" : "mPendingSetupAction",
    "type" : "Runnable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPendingCleanupAction",
    "type" : "Runnable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPendingOnStartAction",
    "type" : "Runnable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPendingOnEndAction",
    "type" : "Runnable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NONE",
    "type" : "int",
    "comment" : "\n     * Constants used to associate a property being requested and the mechanism used to set\n     * the property (this class calls directly into View to set the properties in question).\n     ",
    "links" : [ ]
  }, {
    "name" : "TRANSLATION_X",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TRANSLATION_Y",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TRANSLATION_Z",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SCALE_X",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SCALE_Y",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ROTATION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ROTATION_X",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ROTATION_Y",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "X",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "Y",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "Z",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ALPHA",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TRANSFORM_MASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAnimationStarter",
    "type" : "Runnable",
    "comment" : "\n     * The mechanism by which the user can request several properties that are then animated\n     * together works by posting this Runnable to start the underlying Animator. Every time\n     * a property animation is requested, we cancel any previous postings of the Runnable\n     * and re-post it. This means that we will only ever run the Runnable (and thus start the\n     * underlying animator) after the caller is done setting the properties that should be\n     * animated together.\n     ",
    "links" : [ ]
  }, {
    "name" : "mAnimatorMap",
    "type" : "HashMap<Animator, PropertyBundle>",
    "comment" : "\n     * This list tracks the list of properties being animated by any particular animator.\n     * In most situations, there would only ever be one animator running at a time. But it is\n     * possible to request some properties to animate together, then while those properties\n     * are animating, to request some other properties to animate together. The way that\n     * works is by having this map associate the group of properties being animated with the\n     * animator handling the animation. On every update event for an Animator, we ask the\n     * map for the associated properties and set them accordingly.\n     ",
    "links" : [ ]
  }, {
    "name" : "mAnimatorSetupMap",
    "type" : "HashMap<Animator, Runnable>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAnimatorCleanupMap",
    "type" : "HashMap<Animator, Runnable>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAnimatorOnStartMap",
    "type" : "HashMap<Animator, Runnable>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAnimatorOnEndMap",
    "type" : "HashMap<Animator, Runnable>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public ViewPropertyAnimator setDuration(long duration)",
    "returnType" : "ViewPropertyAnimator",
    "comment" : "\n     * Sets the duration for the underlying animator that animates the requested properties.\n     * By default, the animator uses the default value for ValueAnimator. Calling this method\n     * will cause the declared value to be used instead.\n     * @param duration The length of ensuing property animations, in milliseconds. The value\n     * cannot be negative.\n     * @return This object, allowing calls to methods in this class to be chained.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getDuration()",
    "returnType" : "long",
    "comment" : "\n     * Returns the current duration of property animations. If the duration was set on this\n     * object, that value is returned. Otherwise, the default value of the underlying Animator\n     * is returned.\n     *\n     * @see #setDuration(long)\n     * @return The duration of animations, in milliseconds.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getStartDelay()",
    "returnType" : "long",
    "comment" : "\n     * Returns the current startDelay of property animations. If the startDelay was set on this\n     * object, that value is returned. Otherwise, the default value of the underlying Animator\n     * is returned.\n     *\n     * @see #setStartDelay(long)\n     * @return The startDelay of animations, in milliseconds.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ViewPropertyAnimator setStartDelay(long startDelay)",
    "returnType" : "ViewPropertyAnimator",
    "comment" : "\n     * Sets the startDelay for the underlying animator that animates the requested properties.\n     * By default, the animator uses the default value for ValueAnimator. Calling this method\n     * will cause the declared value to be used instead.\n     * @param startDelay The delay of ensuing property animations, in milliseconds. The value\n     * cannot be negative.\n     * @return This object, allowing calls to methods in this class to be chained.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ViewPropertyAnimator setInterpolator(TimeInterpolator interpolator)",
    "returnType" : "ViewPropertyAnimator",
    "comment" : "\n     * Sets the interpolator for the underlying animator that animates the requested properties.\n     * By default, the animator uses the default interpolator for ValueAnimator. Calling this method\n     * will cause the declared object to be used instead.\n     *\n     * @param interpolator The TimeInterpolator to be used for ensuing property animations. A value\n     * of <code>null</code> will result in linear interpolation.\n     * @return This object, allowing calls to methods in this class to be chained.\n     ",
    "links" : [ ]
  }, {
    "name" : "public TimeInterpolator getInterpolator()",
    "returnType" : "TimeInterpolator",
    "comment" : "\n     * Returns the timing interpolator that this animation uses.\n     *\n     * @return The timing interpolator for this animation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ViewPropertyAnimator setListener(Animator.AnimatorListener listener)",
    "returnType" : "ViewPropertyAnimator",
    "comment" : "\n     * Sets a listener for events in the underlying Animators that run the property\n     * animations.\n     *\n     * @see Animator.AnimatorListener\n     *\n     * @param listener The listener to be called with AnimatorListener events. A value of\n     * <code>null</code> removes any existing listener.\n     * @return This object, allowing calls to methods in this class to be chained.\n     ",
    "links" : [ ]
  }, {
    "name" : " Animator.AnimatorListener getListener()",
    "returnType" : "Animator.AnimatorListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ViewPropertyAnimator setUpdateListener(ValueAnimator.AnimatorUpdateListener listener)",
    "returnType" : "ViewPropertyAnimator",
    "comment" : "\n     * Sets a listener for update events in the underlying ValueAnimator that runs\n     * the property animations. Note that the underlying animator is animating between\n     * 0 and 1 (these values are then turned into the actual property values internally\n     * by ViewPropertyAnimator). So the animator cannot give information on the current\n     * values of the properties being animated by this ViewPropertyAnimator, although\n     * the view object itself can be queried to get the current values.\n     *\n     * @see android.animation.ValueAnimator.AnimatorUpdateListener\n     *\n     * @param listener The listener to be called with update events. A value of\n     * <code>null</code> removes any existing listener.\n     * @return This object, allowing calls to methods in this class to be chained.\n     ",
    "links" : [ ]
  }, {
    "name" : " ValueAnimator.AnimatorUpdateListener getUpdateListener()",
    "returnType" : "ValueAnimator.AnimatorUpdateListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void start()",
    "returnType" : "void",
    "comment" : "\n     * Starts the currently pending property animations immediately. Calling <code>start()</code>\n     * is optional because all animations start automatically at the next opportunity. However,\n     * if the animations are needed to start immediately and synchronously (not at the time when\n     * the next event is processed by the hierarchy, which is when the animations would begin\n     * otherwise), then this method can be used.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void cancel()",
    "returnType" : "void",
    "comment" : "\n     * Cancels all property animations that are currently running or pending.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ViewPropertyAnimator x(float value)",
    "returnType" : "ViewPropertyAnimator",
    "comment" : "\n     * This method will cause the View's <code>x</code> property to be animated to the\n     * specified value. Animations already running on the property will be canceled.\n     *\n     * @param value The value to be animated to.\n     * @see View#setX(float)\n     * @return This object, allowing calls to methods in this class to be chained.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ViewPropertyAnimator xBy(float value)",
    "returnType" : "ViewPropertyAnimator",
    "comment" : "\n     * This method will cause the View's <code>x</code> property to be animated by the\n     * specified value. Animations already running on the property will be canceled.\n     *\n     * @param value The amount to be animated by, as an offset from the current value.\n     * @see View#setX(float)\n     * @return This object, allowing calls to methods in this class to be chained.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ViewPropertyAnimator y(float value)",
    "returnType" : "ViewPropertyAnimator",
    "comment" : "\n     * This method will cause the View's <code>y</code> property to be animated to the\n     * specified value. Animations already running on the property will be canceled.\n     *\n     * @param value The value to be animated to.\n     * @see View#setY(float)\n     * @return This object, allowing calls to methods in this class to be chained.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ViewPropertyAnimator yBy(float value)",
    "returnType" : "ViewPropertyAnimator",
    "comment" : "\n     * This method will cause the View's <code>y</code> property to be animated by the\n     * specified value. Animations already running on the property will be canceled.\n     *\n     * @param value The amount to be animated by, as an offset from the current value.\n     * @see View#setY(float)\n     * @return This object, allowing calls to methods in this class to be chained.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ViewPropertyAnimator z(float value)",
    "returnType" : "ViewPropertyAnimator",
    "comment" : "\n     * This method will cause the View's <code>z</code> property to be animated to the\n     * specified value. Animations already running on the property will be canceled.\n     *\n     * @param value The value to be animated to.\n     * @see View#setZ(float)\n     * @return This object, allowing calls to methods in this class to be chained.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ViewPropertyAnimator zBy(float value)",
    "returnType" : "ViewPropertyAnimator",
    "comment" : "\n     * This method will cause the View's <code>z</code> property to be animated by the\n     * specified value. Animations already running on the property will be canceled.\n     *\n     * @param value The amount to be animated by, as an offset from the current value.\n     * @see View#setZ(float)\n     * @return This object, allowing calls to methods in this class to be chained.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ViewPropertyAnimator rotation(float value)",
    "returnType" : "ViewPropertyAnimator",
    "comment" : "\n     * This method will cause the View's <code>rotation</code> property to be animated to the\n     * specified value. Animations already running on the property will be canceled.\n     *\n     * @param value The value to be animated to.\n     * @see View#setRotation(float)\n     * @return This object, allowing calls to methods in this class to be chained.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ViewPropertyAnimator rotationBy(float value)",
    "returnType" : "ViewPropertyAnimator",
    "comment" : "\n     * This method will cause the View's <code>rotation</code> property to be animated by the\n     * specified value. Animations already running on the property will be canceled.\n     *\n     * @param value The amount to be animated by, as an offset from the current value.\n     * @see View#setRotation(float)\n     * @return This object, allowing calls to methods in this class to be chained.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ViewPropertyAnimator rotationX(float value)",
    "returnType" : "ViewPropertyAnimator",
    "comment" : "\n     * This method will cause the View's <code>rotationX</code> property to be animated to the\n     * specified value. Animations already running on the property will be canceled.\n     *\n     * @param value The value to be animated to.\n     * @see View#setRotationX(float)\n     * @return This object, allowing calls to methods in this class to be chained.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ViewPropertyAnimator rotationXBy(float value)",
    "returnType" : "ViewPropertyAnimator",
    "comment" : "\n     * This method will cause the View's <code>rotationX</code> property to be animated by the\n     * specified value. Animations already running on the property will be canceled.\n     *\n     * @param value The amount to be animated by, as an offset from the current value.\n     * @see View#setRotationX(float)\n     * @return This object, allowing calls to methods in this class to be chained.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ViewPropertyAnimator rotationY(float value)",
    "returnType" : "ViewPropertyAnimator",
    "comment" : "\n     * This method will cause the View's <code>rotationY</code> property to be animated to the\n     * specified value. Animations already running on the property will be canceled.\n     *\n     * @param value The value to be animated to.\n     * @see View#setRotationY(float)\n     * @return This object, allowing calls to methods in this class to be chained.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ViewPropertyAnimator rotationYBy(float value)",
    "returnType" : "ViewPropertyAnimator",
    "comment" : "\n     * This method will cause the View's <code>rotationY</code> property to be animated by the\n     * specified value. Animations already running on the property will be canceled.\n     *\n     * @param value The amount to be animated by, as an offset from the current value.\n     * @see View#setRotationY(float)\n     * @return This object, allowing calls to methods in this class to be chained.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ViewPropertyAnimator translationX(float value)",
    "returnType" : "ViewPropertyAnimator",
    "comment" : "\n     * This method will cause the View's <code>translationX</code> property to be animated to the\n     * specified value. Animations already running on the property will be canceled.\n     *\n     * @param value The value to be animated to.\n     * @see View#setTranslationX(float)\n     * @return This object, allowing calls to methods in this class to be chained.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ViewPropertyAnimator translationXBy(float value)",
    "returnType" : "ViewPropertyAnimator",
    "comment" : "\n     * This method will cause the View's <code>translationX</code> property to be animated by the\n     * specified value. Animations already running on the property will be canceled.\n     *\n     * @param value The amount to be animated by, as an offset from the current value.\n     * @see View#setTranslationX(float)\n     * @return This object, allowing calls to methods in this class to be chained.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ViewPropertyAnimator translationY(float value)",
    "returnType" : "ViewPropertyAnimator",
    "comment" : "\n     * This method will cause the View's <code>translationY</code> property to be animated to the\n     * specified value. Animations already running on the property will be canceled.\n     *\n     * @param value The value to be animated to.\n     * @see View#setTranslationY(float)\n     * @return This object, allowing calls to methods in this class to be chained.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ViewPropertyAnimator translationYBy(float value)",
    "returnType" : "ViewPropertyAnimator",
    "comment" : "\n     * This method will cause the View's <code>translationY</code> property to be animated by the\n     * specified value. Animations already running on the property will be canceled.\n     *\n     * @param value The amount to be animated by, as an offset from the current value.\n     * @see View#setTranslationY(float)\n     * @return This object, allowing calls to methods in this class to be chained.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ViewPropertyAnimator translationZ(float value)",
    "returnType" : "ViewPropertyAnimator",
    "comment" : "\n     * This method will cause the View's <code>translationZ</code> property to be animated to the\n     * specified value. Animations already running on the property will be canceled.\n     *\n     * @param value The value to be animated to.\n     * @see View#setTranslationZ(float)\n     * @return This object, allowing calls to methods in this class to be chained.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ViewPropertyAnimator translationZBy(float value)",
    "returnType" : "ViewPropertyAnimator",
    "comment" : "\n     * This method will cause the View's <code>translationZ</code> property to be animated by the\n     * specified value. Animations already running on the property will be canceled.\n     *\n     * @param value The amount to be animated by, as an offset from the current value.\n     * @see View#setTranslationZ(float)\n     * @return This object, allowing calls to methods in this class to be chained.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ViewPropertyAnimator scaleX(float value)",
    "returnType" : "ViewPropertyAnimator",
    "comment" : "\n     * This method will cause the View's <code>scaleX</code> property to be animated to the\n     * specified value. Animations already running on the property will be canceled.\n     *\n     * @param value The value to be animated to.\n     * @see View#setScaleX(float)\n     * @return This object, allowing calls to methods in this class to be chained.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ViewPropertyAnimator scaleXBy(float value)",
    "returnType" : "ViewPropertyAnimator",
    "comment" : "\n     * This method will cause the View's <code>scaleX</code> property to be animated by the\n     * specified value. Animations already running on the property will be canceled.\n     *\n     * @param value The amount to be animated by, as an offset from the current value.\n     * @see View#setScaleX(float)\n     * @return This object, allowing calls to methods in this class to be chained.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ViewPropertyAnimator scaleY(float value)",
    "returnType" : "ViewPropertyAnimator",
    "comment" : "\n     * This method will cause the View's <code>scaleY</code> property to be animated to the\n     * specified value. Animations already running on the property will be canceled.\n     *\n     * @param value The value to be animated to.\n     * @see View#setScaleY(float)\n     * @return This object, allowing calls to methods in this class to be chained.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ViewPropertyAnimator scaleYBy(float value)",
    "returnType" : "ViewPropertyAnimator",
    "comment" : "\n     * This method will cause the View's <code>scaleY</code> property to be animated by the\n     * specified value. Animations already running on the property will be canceled.\n     *\n     * @param value The amount to be animated by, as an offset from the current value.\n     * @see View#setScaleY(float)\n     * @return This object, allowing calls to methods in this class to be chained.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ViewPropertyAnimator alpha(float value)",
    "returnType" : "ViewPropertyAnimator",
    "comment" : "\n     * This method will cause the View's <code>alpha</code> property to be animated to the\n     * specified value. Animations already running on the property will be canceled.\n     *\n     * @param value The value to be animated to.\n     * @see View#setAlpha(float)\n     * @return This object, allowing calls to methods in this class to be chained.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ViewPropertyAnimator alphaBy(float value)",
    "returnType" : "ViewPropertyAnimator",
    "comment" : "\n     * This method will cause the View's <code>alpha</code> property to be animated by the\n     * specified value. Animations already running on the property will be canceled.\n     *\n     * @param value The amount to be animated by, as an offset from the current value.\n     * @see View#setAlpha(float)\n     * @return This object, allowing calls to methods in this class to be chained.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ViewPropertyAnimator withLayer()",
    "returnType" : "ViewPropertyAnimator",
    "comment" : "\n     * The View associated with this ViewPropertyAnimator will have its\n     * {@link View#setLayerType(int, android.graphics.Paint) layer type} set to\n     * {@link View#LAYER_TYPE_HARDWARE} for the duration of the next animation.\n     * As stated in the documentation for {@link View#LAYER_TYPE_HARDWARE},\n     * the actual type of layer used internally depends on the runtime situation of the\n     * view. If the activity and this view are hardware-accelerated, then the layer will be\n     * accelerated as well. If the activity or the view is not accelerated, then the layer will\n     * effectively be the same as {@link View#LAYER_TYPE_SOFTWARE}.\n     *\n     * <p>This state is not persistent, either on the View or on this ViewPropertyAnimator: the\n     * layer type of the View will be restored when the animation ends to what it was when this\n     * method was called, and this setting on ViewPropertyAnimator is only valid for the next\n     * animation. Note that calling this method and then independently setting the layer type of\n     * the View (by a direct call to {@link View#setLayerType(int, android.graphics.Paint)}) will\n     * result in some inconsistency, including having the layer type restored to its pre-withLayer()\n     * value when the animation ends.</p>\n     *\n     * @see View#setLayerType(int, android.graphics.Paint)\n     * @return This object, allowing calls to methods in this class to be chained.\n     ",
    "links" : [ "View#setLayerType", "View#LAYER_TYPE_HARDWARE", "View#LAYER_TYPE_HARDWARE", "View#LAYER_TYPE_SOFTWARE", "View#setLayerType" ]
  }, {
    "name" : "public ViewPropertyAnimator withStartAction(Runnable runnable)",
    "returnType" : "ViewPropertyAnimator",
    "comment" : "\n     * Specifies an action to take place when the next animation runs. If there is a\n     * {@link #setStartDelay(long) startDelay} set on this ViewPropertyAnimator, then the\n     * action will run after that startDelay expires, when the actual animation begins.\n     * This method, along with {@link #withEndAction(Runnable)}, is intended to help facilitate\n     * choreographing ViewPropertyAnimator animations with other animations or actions\n     * in the application.\n     *\n     * @param runnable The action to run when the next animation starts.\n     * @return This object, allowing calls to methods in this class to be chained.\n     ",
    "links" : [ "#setStartDelay", "#withEndAction" ]
  }, {
    "name" : "public ViewPropertyAnimator withEndAction(Runnable runnable)",
    "returnType" : "ViewPropertyAnimator",
    "comment" : "\n     * Specifies an action to take place when the next animation ends. The action is only\n     * run if the animation ends normally; if the ViewPropertyAnimator is canceled during\n     * that animation, the runnable will not run.\n     * This method, along with {@link #withStartAction(Runnable)}, is intended to help facilitate\n     * choreographing ViewPropertyAnimator animations with other animations or actions\n     * in the application.\n     *\n     * <p>For example, the following code animates a view to x=200 and then back to 0:</p>\n     * <pre>\n     *     Runnable endAction = new Runnable() {\n     *         public void run() {\n     *             view.animate().x(0);\n     *         }\n     *     };\n     *     view.animate().x(200).withEndAction(endAction);\n     * </pre>\n     *\n     * @param runnable The action to run when the next animation ends.\n     * @return This object, allowing calls to methods in this class to be chained.\n     ",
    "links" : [ "#withStartAction" ]
  }, {
    "name" : " boolean hasActions()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void startAnimation()",
    "returnType" : "void",
    "comment" : "\n     * Starts the underlying Animator for a set of properties. We use a single animator that\n     * simply runs from 0 to 1, and then use that fractional value to set each property\n     * value accordingly.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void animateProperty(int constantName, float toValue)",
    "returnType" : "void",
    "comment" : "\n     * Utility function, called by the various x(), y(), etc. methods. This stores the\n     * constant name for the property along with the from/delta values that will be used to\n     * calculate and set the property during the animation. This structure is added to the\n     * pending animations, awaiting the eventual start() of the underlying animator. A\n     * Runnable is posted to start the animation, and any pending such Runnable is canceled\n     * (which enables us to end up starting just one animator for all of the properties\n     * specified at one time).\n     *\n     * @param constantName The specifier for the property being animated\n     * @param toValue The value to which the property will animate\n     ",
    "links" : [ ]
  }, {
    "name" : "private void animatePropertyBy(int constantName, float byValue)",
    "returnType" : "void",
    "comment" : "\n     * Utility function, called by the various xBy(), yBy(), etc. methods. This method is\n     * just like animateProperty(), except the value is an offset from the property's\n     * current value, instead of an absolute \"to\" value.\n     *\n     * @param constantName The specifier for the property being animated\n     * @param byValue The amount by which the property will change\n     ",
    "links" : [ ]
  }, {
    "name" : "private void animatePropertyBy(int constantName, float startValue, float byValue)",
    "returnType" : "void",
    "comment" : "\n     * Utility function, called by animateProperty() and animatePropertyBy(), which handles the\n     * details of adding a pending animation and posting the request to start the animation.\n     *\n     * @param constantName The specifier for the property being animated\n     * @param startValue The starting value of the property\n     * @param byValue The amount by which the property will change\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setValue(int propertyConstant, float value)",
    "returnType" : "void",
    "comment" : "\n     * This method handles setting the property values directly in the View object's fields.\n     * propertyConstant tells it which property should be set, value is the value to set\n     * the property to.\n     *\n     * @param propertyConstant The property to be set\n     * @param value The value to set the property to\n     ",
    "links" : [ ]
  }, {
    "name" : "private float getValue(int propertyConstant)",
    "returnType" : "float",
    "comment" : "\n     * This method gets the value of the named property from the View object.\n     *\n     * @param propertyConstant The property whose value should be returned\n     * @return float The value of the named property\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "mView", "mDuration", "mDurationSet", "mStartDelay", "mStartDelaySet", "mInterpolator", "mInterpolatorSet", "mListener", "mUpdateListener", "mTempValueAnimator", "mAnimatorEventListener", "mPendingAnimations", "mPendingSetupAction", "mPendingCleanupAction", "mPendingOnStartAction", "mPendingOnEndAction", "NONE", "TRANSLATION_X", "TRANSLATION_Y", "TRANSLATION_Z", "SCALE_X", "SCALE_Y", "ROTATION", "ROTATION_X", "ROTATION_Y", "X", "Y", "Z", "ALPHA", "TRANSFORM_MASK", "mAnimationStarter", "mAnimatorMap", "mAnimatorSetupMap", "mAnimatorCleanupMap", "mAnimatorOnStartMap", "mAnimatorOnEndMap" ],
  "methodNames" : [ "public ViewPropertyAnimator setDuration(long duration)", "public long getDuration()", "public long getStartDelay()", "public ViewPropertyAnimator setStartDelay(long startDelay)", "public ViewPropertyAnimator setInterpolator(TimeInterpolator interpolator)", "public TimeInterpolator getInterpolator()", "public ViewPropertyAnimator setListener(Animator.AnimatorListener listener)", " Animator.AnimatorListener getListener()", "public ViewPropertyAnimator setUpdateListener(ValueAnimator.AnimatorUpdateListener listener)", " ValueAnimator.AnimatorUpdateListener getUpdateListener()", "public void start()", "public void cancel()", "public ViewPropertyAnimator x(float value)", "public ViewPropertyAnimator xBy(float value)", "public ViewPropertyAnimator y(float value)", "public ViewPropertyAnimator yBy(float value)", "public ViewPropertyAnimator z(float value)", "public ViewPropertyAnimator zBy(float value)", "public ViewPropertyAnimator rotation(float value)", "public ViewPropertyAnimator rotationBy(float value)", "public ViewPropertyAnimator rotationX(float value)", "public ViewPropertyAnimator rotationXBy(float value)", "public ViewPropertyAnimator rotationY(float value)", "public ViewPropertyAnimator rotationYBy(float value)", "public ViewPropertyAnimator translationX(float value)", "public ViewPropertyAnimator translationXBy(float value)", "public ViewPropertyAnimator translationY(float value)", "public ViewPropertyAnimator translationYBy(float value)", "public ViewPropertyAnimator translationZ(float value)", "public ViewPropertyAnimator translationZBy(float value)", "public ViewPropertyAnimator scaleX(float value)", "public ViewPropertyAnimator scaleXBy(float value)", "public ViewPropertyAnimator scaleY(float value)", "public ViewPropertyAnimator scaleYBy(float value)", "public ViewPropertyAnimator alpha(float value)", "public ViewPropertyAnimator alphaBy(float value)", "public ViewPropertyAnimator withLayer()", "public ViewPropertyAnimator withStartAction(Runnable runnable)", "public ViewPropertyAnimator withEndAction(Runnable runnable)", " boolean hasActions()", "private void startAnimation()", "private void animateProperty(int constantName, float toValue)", "private void animatePropertyBy(int constantName, float byValue)", "private void animatePropertyBy(int constantName, float startValue, float byValue)", "private void setValue(int propertyConstant, float value)", "private float getValue(int propertyConstant)" ]
}