{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/javax/crypto/ExemptionMechanism.java",
  "packageName" : "javax.crypto",
  "className" : "ExemptionMechanism",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "provider",
    "type" : "Provider",
    "comment" : " The provider",
    "links" : [ ]
  }, {
    "name" : "exmechSpi",
    "type" : "ExemptionMechanismSpi",
    "comment" : " The provider implementation (delegate)",
    "links" : [ ]
  }, {
    "name" : "mechanism",
    "type" : "String",
    "comment" : " The name of the exemption mechanism.",
    "links" : [ ]
  }, {
    "name" : "done",
    "type" : "boolean",
    "comment" : " result is generated successfully.",
    "links" : [ ]
  }, {
    "name" : "initialized",
    "type" : "boolean",
    "comment" : " State information",
    "links" : [ ]
  }, {
    "name" : "keyStored",
    "type" : "Key",
    "comment" : " Store away the key at init() time for later comparison.",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final String getName()",
    "returnType" : "String",
    "comment" : "\n     * Returns the exemption mechanism name of this\n     * <code>ExemptionMechanism</code> object.\n     *\n     * <p>This is the same name that was specified in one of the\n     * <code>getInstance</code> calls that created this\n     * <code>ExemptionMechanism</code> object.\n     *\n     * @return the exemption mechanism name of this\n     * <code>ExemptionMechanism</code> object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final ExemptionMechanism getInstance(String algorithm) throws NoSuchAlgorithmException",
    "returnType" : "ExemptionMechanism",
    "comment" : "\n     * Returns an <code>ExemptionMechanism</code> object that implements the\n     * specified exemption mechanism algorithm.\n     *\n     * <p> This method traverses the list of registered security Providers,\n     * starting with the most preferred Provider.\n     * A new ExemptionMechanism object encapsulating the\n     * ExemptionMechanismSpi implementation from the first\n     * Provider that supports the specified algorithm is returned.\n     *\n     * <p> Note that the list of registered providers may be retrieved via\n     * the {@link Security#getProviders() Security.getProviders()} method.\n     *\n     * @param algorithm the standard name of the requested exemption\n     * mechanism.\n     * See the ExemptionMechanism section in the\n     * <a href=\n     *   \"{@docRoot}/../technotes/guides/security/StandardNames.html#Exemption\">\n     * Java Cryptography Architecture Standard Algorithm Name Documentation</a>\n     * for information about standard exemption mechanism names.\n     *\n     * @return the new <code>ExemptionMechanism</code> object.\n     *\n     * @exception NullPointerException if <code>algorithm</code>\n     *          is null.\n     *\n     * @exception NoSuchAlgorithmException if no Provider supports an\n     *          ExemptionMechanismSpi implementation for the\n     *          specified algorithm.\n     *\n     * @see java.security.Provider\n     ",
    "links" : [ "java.security.Security#getProviders()" ]
  }, {
    "name" : "public static final ExemptionMechanism getInstance(String algorithm, String provider) throws NoSuchAlgorithmException, NoSuchProviderException",
    "returnType" : "ExemptionMechanism",
    "comment" : "\n     * Returns an <code>ExemptionMechanism</code> object that implements the\n     * specified exemption mechanism algorithm.\n     *\n     * <p> A new ExemptionMechanism object encapsulating the\n     * ExemptionMechanismSpi implementation from the specified provider\n     * is returned.  The specified provider must be registered\n     * in the security provider list.\n     *\n     * <p> Note that the list of registered providers may be retrieved via\n     * the {@link Security#getProviders() Security.getProviders()} method.\n\n     * @param algorithm the standard name of the requested exemption mechanism.\n     * See the ExemptionMechanism section in the\n     * <a href=\n     *   \"{@docRoot}/../technotes/guides/security/StandardNames.html#Exemption\">\n     * Java Cryptography Architecture Standard Algorithm Name Documentation</a>\n     * for information about standard exemption mechanism names.\n     *\n     * @param provider the name of the provider.\n     *\n     * @return the new <code>ExemptionMechanism</code> object.\n     *\n     * @exception NullPointerException if <code>algorithm</code>\n     *          is null.\n     *\n     * @exception NoSuchAlgorithmException if an ExemptionMechanismSpi\n     *          implementation for the specified algorithm is not\n     *          available from the specified provider.\n     *\n     * @exception NoSuchProviderException if the specified provider is not\n     *          registered in the security provider list.\n     *\n     * @exception IllegalArgumentException if the <code>provider</code>\n     *          is null or empty.\n     *\n     * @see java.security.Provider\n     ",
    "links" : [ "java.security.Security#getProviders()" ]
  }, {
    "name" : "public static final ExemptionMechanism getInstance(String algorithm, Provider provider) throws NoSuchAlgorithmException",
    "returnType" : "ExemptionMechanism",
    "comment" : "\n     * Returns an <code>ExemptionMechanism</code> object that implements the\n     * specified exemption mechanism algorithm.\n     *\n     * <p> A new ExemptionMechanism object encapsulating the\n     * ExemptionMechanismSpi implementation from the specified Provider\n     * object is returned.  Note that the specified Provider object\n     * does not have to be registered in the provider list.\n     *\n     * @param algorithm the standard name of the requested exemption mechanism.\n     * See the ExemptionMechanism section in the\n     * <a href=\n     *   \"{@docRoot}/../technotes/guides/security/StandardNames.html#Exemption\">\n     * Java Cryptography Architecture Standard Algorithm Name Documentation</a>\n     * for information about standard exemption mechanism names.\n     *\n     * @param provider the provider.\n     *\n     * @return the new <code>ExemptionMechanism</code> object.\n     *\n     * @exception NullPointerException if <code>algorithm</code>\n     *          is null.\n     *\n     * @exception NoSuchAlgorithmException if an ExemptionMechanismSpi\n     *          implementation for the specified algorithm is not available\n     *          from the specified Provider object.\n     *\n     * @exception IllegalArgumentException if the <code>provider</code>\n     *          is null.\n     *\n     * @see java.security.Provider\n     ",
    "links" : [ ]
  }, {
    "name" : "public final Provider getProvider()",
    "returnType" : "Provider",
    "comment" : "\n     * Returns the provider of this <code>ExemptionMechanism</code> object.\n     *\n     * @return the provider of this <code>ExemptionMechanism</code> object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean isCryptoAllowed(Key key) throws ExemptionMechanismException",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the result blob has been generated successfully by this\n     * exemption mechanism.\n     *\n     * <p>The method also makes sure that the key passed in is the same as\n     * the one this exemption mechanism used in initializing and generating\n     * phases.\n     *\n     * @param key the key the crypto is going to use.\n     *\n     * @return whether the result blob of the same key has been generated\n     * successfully by this exemption mechanism; false if <code>key</code>\n     * is null.\n     *\n     * @exception ExemptionMechanismException if problem(s) encountered\n     * while determining whether the result blob has been generated successfully\n     * by this exemption mechanism object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int getOutputSize(int inputLen) throws IllegalStateException",
    "returnType" : "int",
    "comment" : "\n     * Returns the length in bytes that an output buffer would need to be in\n     * order to hold the result of the next\n     * {@link #genExemptionBlob(byte[]) genExemptionBlob}\n     * operation, given the input length <code>inputLen</code> (in bytes).\n     *\n     * <p>The actual output length of the next\n     * {@link #genExemptionBlob(byte[]) genExemptionBlob}\n     * call may be smaller than the length returned by this method.\n     *\n     * @param inputLen the input length (in bytes)\n     *\n     * @return the required output buffer size (in bytes)\n     *\n     * @exception IllegalStateException if this exemption mechanism is in a\n     * wrong state (e.g., has not yet been initialized)\n     ",
    "links" : [ "#genExemptionBlob(byte" ]
  }, {
    "name" : "public final void init(Key key) throws InvalidKeyException, ExemptionMechanismException",
    "returnType" : "void",
    "comment" : "\n     * Initializes this exemption mechanism with a key.\n     *\n     * <p>If this exemption mechanism requires any algorithm parameters\n     * that cannot be derived from the given <code>key</code>, the\n     * underlying exemption mechanism implementation is supposed to\n     * generate the required parameters itself (using provider-specific\n     * default values); in the case that algorithm parameters must be\n     * specified by the caller, an <code>InvalidKeyException</code> is raised.\n     *\n     * @param key the key for this exemption mechanism\n     *\n     * @exception InvalidKeyException if the given key is inappropriate for\n     * this exemption mechanism.\n     * @exception ExemptionMechanismException if problem(s) encountered in the\n     * process of initializing.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void init(Key key, AlgorithmParameterSpec params) throws InvalidKeyException, InvalidAlgorithmParameterException, ExemptionMechanismException",
    "returnType" : "void",
    "comment" : "\n     * Initializes this exemption mechanism with a key and a set of algorithm\n     * parameters.\n     *\n     * <p>If this exemption mechanism requires any algorithm parameters\n     * and <code>params</code> is null, the underlying exemption\n     * mechanism implementation is supposed to generate the required\n     * parameters itself (using provider-specific default values); in the case\n     * that algorithm parameters must be specified by the caller, an\n     * <code>InvalidAlgorithmParameterException</code> is raised.\n     *\n     * @param key the key for this exemption mechanism\n     * @param params the algorithm parameters\n     *\n     * @exception InvalidKeyException if the given key is inappropriate for\n     * this exemption mechanism.\n     * @exception InvalidAlgorithmParameterException if the given algorithm\n     * parameters are inappropriate for this exemption mechanism.\n     * @exception ExemptionMechanismException if problem(s) encountered in the\n     * process of initializing.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void init(Key key, AlgorithmParameters params) throws InvalidKeyException, InvalidAlgorithmParameterException, ExemptionMechanismException",
    "returnType" : "void",
    "comment" : "\n     * Initializes this exemption mechanism with a key and a set of algorithm\n     * parameters.\n     *\n     * <p>If this exemption mechanism requires any algorithm parameters\n     * and <code>params</code> is null, the underlying exemption mechanism\n     * implementation is supposed to generate the required parameters itself\n     * (using provider-specific default values); in the case that algorithm\n     * parameters must be specified by the caller, an\n     * <code>InvalidAlgorithmParameterException</code> is raised.\n     *\n     * @param key the key for this exemption mechanism\n     * @param params the algorithm parameters\n     *\n     * @exception InvalidKeyException if the given key is inappropriate for\n     * this exemption mechanism.\n     * @exception InvalidAlgorithmParameterException if the given algorithm\n     * parameters are inappropriate for this exemption mechanism.\n     * @exception ExemptionMechanismException if problem(s) encountered in the\n     * process of initializing.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final byte[] genExemptionBlob() throws IllegalStateException, ExemptionMechanismException",
    "returnType" : "byte[]",
    "comment" : "\n     * Generates the exemption mechanism key blob.\n     *\n     * @return the new buffer with the result key blob.\n     *\n     * @exception IllegalStateException if this exemption mechanism is in\n     * a wrong state (e.g., has not been initialized).\n     * @exception ExemptionMechanismException if problem(s) encountered in the\n     * process of generating.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int genExemptionBlob(byte[] output) throws IllegalStateException, ShortBufferException, ExemptionMechanismException",
    "returnType" : "int",
    "comment" : "\n     * Generates the exemption mechanism key blob, and stores the result in\n     * the <code>output</code> buffer.\n     *\n     * <p>If the <code>output</code> buffer is too small to hold the result,\n     * a <code>ShortBufferException</code> is thrown. In this case, repeat this\n     * call with a larger output buffer. Use\n     * {@link #getOutputSize(int) getOutputSize} to determine how big\n     * the output buffer should be.\n     *\n     * @param output the buffer for the result\n     *\n     * @return the number of bytes stored in <code>output</code>\n     *\n     * @exception IllegalStateException if this exemption mechanism is in\n     * a wrong state (e.g., has not been initialized).\n     * @exception ShortBufferException if the given output buffer is too small\n     * to hold the result.\n     * @exception ExemptionMechanismException if problem(s) encountered in the\n     * process of generating.\n     ",
    "links" : [ "#getOutputSize(int)" ]
  }, {
    "name" : "public final int genExemptionBlob(byte[] output, int outputOffset) throws IllegalStateException, ShortBufferException, ExemptionMechanismException",
    "returnType" : "int",
    "comment" : "\n     * Generates the exemption mechanism key blob, and stores the result in\n     * the <code>output</code> buffer, starting at <code>outputOffset</code>\n     * inclusive.\n     *\n     * <p>If the <code>output</code> buffer is too small to hold the result,\n     * a <code>ShortBufferException</code> is thrown. In this case, repeat this\n     * call with a larger output buffer. Use\n     * {@link #getOutputSize(int) getOutputSize} to determine how big\n     * the output buffer should be.\n     *\n     * @param output the buffer for the result\n     * @param outputOffset the offset in <code>output</code> where the result\n     * is stored\n     *\n     * @return the number of bytes stored in <code>output</code>\n     *\n     * @exception IllegalStateException if this exemption mechanism is in\n     * a wrong state (e.g., has not been initialized).\n     * @exception ShortBufferException if the given output buffer is too small\n     * to hold the result.\n     * @exception ExemptionMechanismException if problem(s) encountered in the\n     * process of generating.\n     ",
    "links" : [ "#getOutputSize(int)" ]
  } ],
  "methodNames" : [ "public final String getName()", "public static final ExemptionMechanism getInstance(String algorithm) throws NoSuchAlgorithmException", "public static final ExemptionMechanism getInstance(String algorithm, String provider) throws NoSuchAlgorithmException, NoSuchProviderException", "public static final ExemptionMechanism getInstance(String algorithm, Provider provider) throws NoSuchAlgorithmException", "public final Provider getProvider()", "public final boolean isCryptoAllowed(Key key) throws ExemptionMechanismException", "public final int getOutputSize(int inputLen) throws IllegalStateException", "public final void init(Key key) throws InvalidKeyException, ExemptionMechanismException", "public final void init(Key key, AlgorithmParameterSpec params) throws InvalidKeyException, InvalidAlgorithmParameterException, ExemptionMechanismException", "public final void init(Key key, AlgorithmParameters params) throws InvalidKeyException, InvalidAlgorithmParameterException, ExemptionMechanismException", "public final byte[] genExemptionBlob() throws IllegalStateException, ExemptionMechanismException", "public final int genExemptionBlob(byte[] output) throws IllegalStateException, ShortBufferException, ExemptionMechanismException", "public final int genExemptionBlob(byte[] output, int outputOffset) throws IllegalStateException, ShortBufferException, ExemptionMechanismException" ],
  "variableNames" : [ "provider", "exmechSpi", "mechanism", "done", "initialized", "keyStored" ]
}