{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/number/LocalizedNumberFormatter.java",
  "packageName" : "android.icu.number",
  "className" : "LocalizedNumberFormatter",
  "comment" : "\n * A NumberFormatter that has a locale associated with it; this means .format() methods are available.\n *\n * Instances of this class are immutable and thread-safe.\n *\n * @see NumberFormatter\n * @see NumberFormatter\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "callCount",
    "type" : "AtomicLongFieldUpdater<LocalizedNumberFormatter>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "callCountInternal",
    "type" : "long",
    "comment" : " do not access directly; use callCount instead",
    "links" : [ ]
  }, {
    "name" : "savedWithUnit",
    "type" : "LocalizedNumberFormatter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "compiled",
    "type" : "NumberFormatterImpl",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public FormattedNumber format(long input)",
    "returnType" : "FormattedNumber",
    "comment" : "\n     * Format the given byte, short, int, or long to a string using the settings specified in the\n     * NumberFormatter fluent setting chain.\n     *\n     * @param input\n     *            The number to format.\n     * @return A FormattedNumber object; call .toString() to get the string.\n     * @see NumberFormatter\n     ",
    "links" : [ ]
  }, {
    "name" : "public FormattedNumber format(double input)",
    "returnType" : "FormattedNumber",
    "comment" : "\n     * Format the given float or double to a string using the settings specified in the NumberFormatter\n     * fluent setting chain.\n     *\n     * @param input\n     *            The number to format.\n     * @return A FormattedNumber object; call .toString() to get the string.\n     * @see NumberFormatter\n     ",
    "links" : [ ]
  }, {
    "name" : "public FormattedNumber format(Number input)",
    "returnType" : "FormattedNumber",
    "comment" : "\n     * Format the given {@link BigInteger}, {@link BigDecimal}, or other {@link Number} to a string using\n     * the settings specified in the NumberFormatter fluent setting chain.\n     *\n     * @param input\n     *            The number to format.\n     * @return A FormattedNumber object; call .toString() to get the string.\n     * @see NumberFormatter\n     ",
    "links" : [ "android.icu.math.BigDecimal", "Number", "java.math.BigInteger" ]
  }, {
    "name" : "public FormattedNumber format(Measure input)",
    "returnType" : "FormattedNumber",
    "comment" : "\n     * Format the given {@link Measure} or {@link CurrencyAmount} to a string using the settings\n     * specified in the NumberFormatter fluent setting chain.\n     *\n     * <p>\n     * The unit specified here overrides any unit that may have been specified in the setter chain. This\n     * method is intended for cases when each input to the number formatter has a different unit.\n     *\n     * @param input\n     *            The number to format.\n     * @return A FormattedNumber object; call .toString() to get the string.\n     * @see NumberFormatter\n     ",
    "links" : [ "android.icu.util.Measure", "android.icu.util.CurrencyAmount" ]
  }, {
    "name" : "public Format toFormat()",
    "returnType" : "Format",
    "comment" : "\n     * Creates a representation of this LocalizedNumberFormat as a {@link java.text.Format}, enabling the\n     * use of this number formatter with APIs that need an object of that type, such as MessageFormat.\n     * <p>\n     * This API is not intended to be used other than for enabling API compatibility. The {@link #format}\n     * methods should normally be used when formatting numbers, not the Format object returned by this\n     * method.\n     *\n     * @return A Format wrapping this LocalizedNumberFormatter.\n     * @see NumberFormatter\n     ",
    "links" : [ "#format", "java.text.Format" ]
  }, {
    "name" : "public UnlocalizedNumberFormatter withoutLocale()",
    "returnType" : "UnlocalizedNumberFormatter",
    "comment" : "\n     * Disassociate the locale from this formatter.\n     *\n     * @return The fluent chain.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "private FormattedNumber format(DecimalQuantity fq)",
    "returnType" : "FormattedNumber",
    "comment" : "\n     *  Helper method that creates a FormattedStringBuilder and formats.\n     ",
    "links" : [ ]
  }, {
    "name" : "public MicroProps formatImpl(DecimalQuantity fq, FormattedStringBuilder string)",
    "returnType" : "MicroProps",
    "comment" : "\n     * This is the core entrypoint to the number formatting pipeline. It performs self-regulation: a\n     * static code path for the first few calls, and compiling a more efficient data structure if called\n     * repeatedly.\n     *\n     * <p>\n     * This function is very hot, being called in every call to the number formatting pipeline.\n     *\n     * @param fq\n     *            The quantity to be formatted.\n     * @param string\n     *            The string builder into which to insert the result.\n     *\n     * @deprecated ICU 60 This API is ICU internal only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public MicroProps formatImpl(DecimalQuantity fq, MeasureUnit unit, FormattedStringBuilder string)",
    "returnType" : "MicroProps",
    "comment" : "\n     * Version of above for unit override.\n     *\n     * @deprecated ICU 67 This API is ICU internal only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getAffixImpl(boolean isPrefix, boolean isNegative)",
    "returnType" : "String",
    "comment" : "\n     * @deprecated This API is ICU internal only. Use {@link FormattedNumber#nextPosition}\n     *             for related functionality.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ "android.icu.number.FormattedNumber#nextPosition" ]
  }, {
    "name" : "private boolean computeCompiled()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " LocalizedNumberFormatter create(int key, Object value)",
    "returnType" : "LocalizedNumberFormatter",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public FormattedNumber format(long input)", "public FormattedNumber format(double input)", "public FormattedNumber format(Number input)", "public FormattedNumber format(Measure input)", "public Format toFormat()", "public UnlocalizedNumberFormatter withoutLocale()", "private FormattedNumber format(DecimalQuantity fq)", "public MicroProps formatImpl(DecimalQuantity fq, FormattedStringBuilder string)", "public MicroProps formatImpl(DecimalQuantity fq, MeasureUnit unit, FormattedStringBuilder string)", "public String getAffixImpl(boolean isPrefix, boolean isNegative)", "private boolean computeCompiled()", " LocalizedNumberFormatter create(int key, Object value)" ],
  "variableNames" : [ "callCount", "callCountInternal", "savedWithUnit", "compiled" ]
}