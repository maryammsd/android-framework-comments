{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/nfc/cardemulation/HostNfcFService.java",
  "packageName" : "android.nfc.cardemulation",
  "className" : "HostNfcFService",
  "comment" : "\n * <p>HostNfcFService is a convenience {@link Service} class that can be\n * extended to emulate an NFC-F card inside an Android service component.\n *\n * <h3>NFC Protocols</h3>\n * <p>Cards emulated by this class are based on the NFC-Forum NFC-F\n * protocol (based on the JIS-X 6319-4 specification.)</p>\n *\n * <h3>System Code and NFCID2 registration</h3>\n * <p>A {@link HostNfcFService HostNfcFService service} can register\n * exactly one System Code and one NFCID2. For details about the use of\n * System Code and NFCID2, see the NFC Forum Digital specification.</p>\n * <p>To statically register a System Code and NFCID2 with the service, a {@link #SERVICE_META_DATA}\n * entry must be included in the declaration of the service.\n *\n * <p>All {@link HostNfcFService HostNfcFService} declarations in the manifest must require the\n * {@link android.Manifest.permission#BIND_NFC_SERVICE} permission\n * in their &lt;service&gt; tag, to ensure that only the platform can bind to your service.</p>\n *\n * <p>An example of a HostNfcFService manifest declaration is shown below:\n *\n * <pre> &lt;service android:name=\".MyHostNfcFService\" android:exported=\"true\" android:permission=\"android.permission.BIND_NFC_SERVICE\"&gt;\n *     &lt;intent-filter&gt;\n *         &lt;action android:name=\"android.nfc.cardemulation.action.HOST_NFCF_SERVICE\"/&gt;\n *     &lt;/intent-filter&gt;\n *     &lt;meta-data android:name=\"android.nfc.cardemulation.host_nfcf_service\" android:resource=\"@xml/nfcfservice\"/&gt;\n * &lt;/service&gt;</pre>\n *\n * This meta-data tag points to an nfcfservice.xml file.\n * An example of this file with a System Code and NFCID2 declaration is shown below:\n * <pre>\n * &lt;host-nfcf-service xmlns:android=\"http://schemas.android.com/apk/res/android\"\n *           android:description=\"@string/servicedesc\"&gt;\n *       &lt;system-code-filter android:name=\"4000\"/&gt;\n *       &lt;nfcid2-filter android:name=\"02FE000000000000\"/&gt;\n         &lt;t3tPmm-filter android:name=\"FFFFFFFFFFFFFFFF\"/&gt;\n * &lt;/host-nfcf-service&gt;\n * </pre>\n *\n * <p>The {@link android.R.styleable#HostNfcFService &lt;host-nfcf-service&gt;} is required\n * to contain a\n * {@link android.R.styleable#HostApduService_description &lt;android:description&gt;}\n * attribute that contains a user-friendly description of the service that may be shown in UI.\n * <p>The {@link android.R.styleable#HostNfcFService &lt;host-nfcf-service&gt;} must\n * contain:\n * <ul>\n * <li>Exactly one {@link android.R.styleable#SystemCodeFilter &lt;system-code-filter&gt;} tag.</li>\n * <li>Exactly one {@link android.R.styleable#Nfcid2Filter &lt;nfcid2-filter&gt;} tag.</li>\n * <li>Zero or one {@link android.R.styleable#T3tPmmFilter &lt;t3tPmm-filter&gt;} tag.</li>\n * </ul>\n * </p>\n *\n * <p>Alternatively, the System Code and NFCID2 can be dynamically registererd for a service\n * by using the {@link NfcFCardEmulation#registerSystemCodeForService(ComponentName, String)} and\n * {@link NfcFCardEmulation#setNfcid2ForService(ComponentName, String)} methods.\n * </p>\n *\n * <h3>Service selection</h3>\n * <p>When a remote NFC devices wants to communicate with your service, it\n * sends a SENSF_REQ command to the NFC controller, requesting a System Code.\n * If a {@link NfcFCardEmulation NfcFCardEmulation service} has registered\n * this system code and has been enabled by the foreground application, the\n * NFC controller will respond with the NFCID2 that is registered for this service.\n * The reader can then continue data exchange with this service by using the NFCID2.</p>\n *\n * <h3>Data exchange</h3>\n * <p>After service selection, all frames addressed to the NFCID2 of this service will\n * be sent through {@link #processNfcFPacket(byte[], Bundle)}, until the NFC link is\n * broken.<p>\n *\n * <p>When the NFC link is broken, {@link #onDeactivated(int)} will be called.</p>\n ",
  "links" : [ "#SERVICE_META_DATA", "android.nfc.cardemulation.NfcFCardEmulation#registerSystemCodeForService(ComponentName", "android.app.Service", "android.Manifest.permission#BIND_NFC_SERVICE", "android.R.styleable#T3tPmmFilter", "android.R.styleable#HostNfcFService", "android.nfc.cardemulation.HostNfcFService", "android.R.styleable#Nfcid2Filter", "android.nfc.cardemulation.NfcFCardEmulation", "android.R.styleable#HostApduService_description", "android.R.styleable#SystemCodeFilter", "#processNfcFPacket(byte", "android.nfc.cardemulation.NfcFCardEmulation#setNfcid2ForService(ComponentName", "#onDeactivated(int)" ],
  "variables" : [ {
    "name" : "SERVICE_INTERFACE",
    "type" : "String",
    "comment" : "\n     * The {@link Intent} action that must be declared as handled by the service.\n     ",
    "links" : [ "android.content.Intent" ]
  }, {
    "name" : "SERVICE_META_DATA",
    "type" : "String",
    "comment" : "\n     * The name of the meta-data element that contains\n     * more information about this service.\n     ",
    "links" : [ ]
  }, {
    "name" : "DEACTIVATION_LINK_LOSS",
    "type" : "int",
    "comment" : "\n     * Reason for {@link #onDeactivated(int)}.\n     * Indicates deactivation was due to the NFC link\n     * being lost.\n     ",
    "links" : [ "#onDeactivated(int)" ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_COMMAND_PACKET",
    "type" : "int",
    "comment" : "\n     * MSG_COMMAND_PACKET is sent by NfcService when\n     * a NFC-F command packet has been received.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "MSG_RESPONSE_PACKET",
    "type" : "int",
    "comment" : "\n     * MSG_RESPONSE_PACKET is sent to NfcService to send\n     * a response packet back to the remote device.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "MSG_DEACTIVATED",
    "type" : "int",
    "comment" : "\n     * MSG_DEACTIVATED is sent by NfcService when\n     * the current session is finished; because\n     * the NFC link was deactivated.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_DATA",
    "type" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_MESSENGER",
    "type" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mNfcService",
    "type" : "Messenger",
    "comment" : "\n     * Messenger interface to NfcService for sending responses.\n     * Only accessed on main thread by the message handler.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mMessenger",
    "type" : "Messenger",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final IBinder onBind(Intent intent)",
    "returnType" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final void sendResponsePacket(byte[] responsePacket)",
    "returnType" : "void",
    "comment" : "\n     * Sends a response packet back to the remote device.\n     *\n     * <p>Note: this method may be called from any thread and will not block.\n     * @param responsePacket A byte-array containing the response packet.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract byte[] processNfcFPacket(byte[] commandPacket, Bundle extras)",
    "returnType" : "byte[]",
    "comment" : "\n     * <p>This method will be called when a NFC-F packet has been received\n     * from a remote device. A response packet can be provided directly\n     * by returning a byte-array in this method. Note that in general\n     * response packets must be sent as quickly as possible, given the fact\n     * that the user is likely holding their device over an NFC reader\n     * when this method is called.\n     *\n     * <p class=\"note\">This method is running on the main thread of your application.\n     * If you cannot return a response packet immediately, return null\n     * and use the {@link #sendResponsePacket(byte[])} method later.\n     *\n     * @param commandPacket The NFC-F packet that was received from the remote device\n     * @param extras A bundle containing extra data. May be null.\n     * @return a byte-array containing the response packet, or null if no\n     *         response packet can be sent at this point.\n     ",
    "links" : [ "#sendResponsePacket(byte" ]
  }, {
    "name" : "public abstract void onDeactivated(int reason)",
    "returnType" : "void",
    "comment" : "\n     * This method will be called in following possible scenarios:\n     * <li>The NFC link has been lost\n     * @param reason {@link #DEACTIVATION_LINK_LOSS}\n     ",
    "links" : [ "#DEACTIVATION_LINK_LOSS" ]
  } ],
  "methodNames" : [ "public final IBinder onBind(Intent intent)", "public final void sendResponsePacket(byte[] responsePacket)", "public abstract byte[] processNfcFPacket(byte[] commandPacket, Bundle extras)", "public abstract void onDeactivated(int reason)" ],
  "variableNames" : [ "SERVICE_INTERFACE", "SERVICE_META_DATA", "DEACTIVATION_LINK_LOSS", "TAG", "MSG_COMMAND_PACKET", "MSG_RESPONSE_PACKET", "MSG_DEACTIVATED", "KEY_DATA", "KEY_MESSENGER", "mNfcService", "mMessenger" ]
}