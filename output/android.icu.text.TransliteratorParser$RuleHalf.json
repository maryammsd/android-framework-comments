{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/text/TransliteratorParser.java",
  "packageName" : "android.icu.text",
  "className" : "RuleHalf",
  "comment" : "\n     * A class representing one side of a rule.  This class knows how to\n     * parse half of a rule.  It is tightly coupled to the method\n     * TransliteratorParser.parseRule().\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "text",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "cursor",
    "type" : "int",
    "comment" : " position of cursor in text",
    "links" : [ ]
  }, {
    "name" : "ante",
    "type" : "int",
    "comment" : " position of ante context marker '{' in text",
    "links" : [ ]
  }, {
    "name" : "post",
    "type" : "int",
    "comment" : " position of post context marker '}' in text",
    "links" : [ ]
  }, {
    "name" : "cursorOffset",
    "type" : "int",
    "comment" : " only nonzero on output side",
    "links" : [ ]
  }, {
    "name" : "cursorOffsetPos",
    "type" : "int",
    "comment" : " for |@, -2 for |@@, etc., and 1 for @|, 2 for @@|, etc.",
    "links" : [ ]
  }, {
    "name" : "anchorStart",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "anchorEnd",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "nextSegmentNumber",
    "type" : "int",
    "comment" : "\n         * The segment number from 1..n of the next '(' we see\n         * during parsing; 1-based.\n         ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int parse(String rule, int pos, int limit, TransliteratorParser parser)",
    "returnType" : "int",
    "comment" : "\n         * Parse one side of a rule, stopping at either the limit,\n         * the END_OF_RULE character, or an operator.\n         * @return the index after the terminating character, or\n         * if limit was reached, limit\n         ",
    "links" : [ ]
  }, {
    "name" : "private int parseSection(String rule, int pos, int limit, TransliteratorParser parser, StringBuffer buf, UnicodeSet illegal, boolean isSegment)",
    "returnType" : "int",
    "comment" : "\n         * Parse a section of one side of a rule, stopping at either\n         * the limit, the END_OF_RULE character, an operator, or a\n         * segment close character.  This method parses both a\n         * top-level rule half and a segment within such a rule half.\n         * It calls itself recursively to parse segments and nested\n         * segments.\n         * @param buf buffer into which to accumulate the rule pattern\n         * characters, either literal characters from the rule or\n         * standins for UnicodeMatcher objects including segments.\n         * @param illegal the set of special characters that is illegal during\n         * this parse.\n         * @param isSegment if true, then we've already seen a '(' and\n         * pos on entry points right after it.  Accumulate everything\n         * up to the closing ')', put it in a segment matcher object,\n         * generate a standin for it, and add the standin to buf.  As\n         * a side effect, update the segments vector with a reference\n         * to the segment matcher.  This works recursively for nested\n         * segments.  If isSegment is false, just accumulate\n         * characters into buf.\n         * @return the index after the terminating character, or\n         * if limit was reached, limit\n         ",
    "links" : [ ]
  }, {
    "name" : " void removeContext()",
    "returnType" : "void",
    "comment" : "\n         * Remove context.\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean isValidOutput(TransliteratorParser parser)",
    "returnType" : "boolean",
    "comment" : "\n         * Return true if this half looks like valid output, that is, does not\n         * contain quantifiers or other special input-only elements.\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean isValidInput(TransliteratorParser parser)",
    "returnType" : "boolean",
    "comment" : "\n         * Return true if this half looks like valid input, that is, does not\n         * contain functions or other special output-only elements.\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int parse(String rule, int pos, int limit, TransliteratorParser parser)", "private int parseSection(String rule, int pos, int limit, TransliteratorParser parser, StringBuffer buf, UnicodeSet illegal, boolean isSegment)", " void removeContext()", "public boolean isValidOutput(TransliteratorParser parser)", "public boolean isValidInput(TransliteratorParser parser)" ],
  "variableNames" : [ "text", "cursor", "ante", "post", "cursorOffset", "cursorOffsetPos", "anchorStart", "anchorEnd", "nextSegmentNumber" ]
}