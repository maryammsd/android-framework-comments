{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/telephony/data/QualifiedNetworksService.java",
  "packageName" : "android.telephony.data",
  "className" : "NetworkAvailabilityProvider",
  "comment" : "\n     * The abstract class of the network availability provider implementation. The vendor qualified\n     * network service must extend this class to report the available networks for data\n     * connection setup. Note that each instance of network availability provider is associated with\n     * one physical SIM slot.\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mSlotIndex",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallback",
    "type" : "IQualifiedNetworksServiceCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mQualifiedNetworkTypesList",
    "type" : "SparseArray<int[]>",
    "comment" : "\n         * Qualified networks for each APN type. Key is the {@link ApnType}, value is the array\n         * of available networks.\n         ",
    "links" : [ "android.telephony.Annotation.ApnType" ]
  } ],
  "methods" : [ {
    "name" : "public final int getSlotIndex()",
    "returnType" : "int",
    "comment" : "\n         * @return SIM slot index the network availability provider associated with.\n         ",
    "links" : [ ]
  }, {
    "name" : "private void registerForQualifiedNetworkTypesChanged(IQualifiedNetworksServiceCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final void updateQualifiedNetworkTypes(@ApnType int apnTypes, @NonNull List<Integer> qualifiedNetworkTypes)",
    "returnType" : "void",
    "comment" : "\n         * Update the suggested qualified networks list. Network availability provider must invoke\n         * this method whenever the suggested qualified networks changes. If this method is never\n         * invoked for certain APN types, then frameworks uses its own logic to determine the\n         * transport to setup the data network.\n         *\n         * For example, QNS can suggest frameworks setting up IMS data network on IWLAN by\n         * specifying {@link ApnSetting#TYPE_IMS} with a list containing\n         * {@link AccessNetworkType#IWLAN}.\n         *\n         * If QNS considers multiple access networks qualified for certain APN type, it can\n         * suggest frameworks by specifying the APN type with multiple access networks in the list,\n         * for example {{@link AccessNetworkType#EUTRAN}, {@link AccessNetworkType#IWLAN}}.\n         * Frameworks will then first attempt to setup data on LTE network, and If the device moves\n         * from LTE to UMTS, then frameworks will perform handover the data network to the second\n         * preferred access network if available.\n         *\n         * If the {@code qualifiedNetworkTypes} list is empty, it means QNS has no suggestion to the\n         * frameworks, and for that APN type frameworks will route the corresponding network\n         * requests to {@link AccessNetworkConstants#TRANSPORT_TYPE_WWAN}.\n         *\n         * @param apnTypes APN type(s) of the qualified networks. This must be a bitmask combination\n         * of {@link ApnType}. The same qualified networks will be applicable to all APN types\n         * specified here.\n         * @param qualifiedNetworkTypes List of access network types which are qualified for data\n         * connection setup for {@code apnTypes} in the preferred order. Empty list means QNS has no\n         * suggestion to the frameworks, and for that APN type frameworks will route the\n         * corresponding network requests to {@link AccessNetworkConstants#TRANSPORT_TYPE_WWAN}.\n         *\n         * If one of the element is invalid, for example, {@link AccessNetworkType#UNKNOWN}, then\n         * this operation becomes a no-op.\n         ",
    "links" : [ "android.telephony.AccessNetworkConstants.AccessNetworkType#EUTRAN", "android.telephony.AccessNetworkConstants.AccessNetworkType#IWLAN", "android.telephony.AccessNetworkConstants.AccessNetworkType#UNKNOWN", "android.telephony.Annotation.ApnType", "android.telephony.data.ApnSetting#TYPE_IMS", "android.telephony.AccessNetworkConstants#TRANSPORT_TYPE_WWAN" ]
  }, {
    "name" : "public final void reconnectQualifiedNetworkType(@ApnType int apnTypes, @AccessNetworkConstants.RadioAccessNetworkType int qualifiedNetworkType)",
    "returnType" : "void",
    "comment" : "\n         * Request to make a clean initial connection instead of handover to a transport type mapped\n         * to the {@code qualifiedNetworkType} for the {@code apnTypes}. This will update the\n         * preferred network type like {@link #updateQualifiedNetworkTypes(int, List)}, however if\n         * the data network for the {@code apnTypes} is not in the state {@link TelephonyManager\n         * #DATA_CONNECTED} or it's already connected on the transport type mapped to the\n         * qualified network type, forced reconnection will be ignored.\n         *\n         * <p>This will tear down current data network even though target transport type mapped to\n         * the {@code qualifiedNetworkType} is not available, and the data network will be connected\n         * to the transport type when it becomes available.\n         *\n         * <p>This is one shot request and does not mean further handover is not allowed to the\n         * qualified network type for this APN type.\n         *\n         * @param apnTypes APN type(s) of the qualified networks. This must be a bitmask combination\n         * of {@link ApnType}. The same qualified networks will be applicable to all APN types\n         * specified here.\n         * @param qualifiedNetworkType Access network types which are qualified for data connection\n         * setup for {@link ApnType}. Empty list means QNS has no suggestion to the frameworks, and\n         * for that APN type frameworks will route the corresponding network requests to\n         * {@link AccessNetworkConstants#TRANSPORT_TYPE_WWAN}.\n         *\n         * <p> If one of the element is invalid, for example, {@link AccessNetworkType#UNKNOWN},\n         * then this operation becomes a no-op.\n         *\n         * @hide\n         ",
    "links" : [ "#updateQualifiedNetworkTypes(int", "android.telephony.AccessNetworkConstants.AccessNetworkType#UNKNOWN", "android.telephony.Annotation.ApnType", "android.telephony.TelephonyManager#DATA_CONNECTED", "android.telephony.AccessNetworkConstants#TRANSPORT_TYPE_WWAN" ]
  }, {
    "name" : "private void onUpdateQualifiedNetworkTypes(@ApnType int apnTypes, int[] qualifiedNetworkTypes)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onReconnectQualifiedNetworkType(@ApnType int apnTypes, @AccessNetworkConstants.RadioAccessNetworkType int qualifiedNetworkType)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void reportThrottleStatusChanged(@NonNull List<ThrottleStatus> statuses)",
    "returnType" : "void",
    "comment" : "\n         * The framework calls this method when the throttle status of an APN changes.\n         *\n         * This method is meant to be overridden.\n         *\n         * @param statuses the statuses that have changed\n         ",
    "links" : [ ]
  }, {
    "name" : "public void reportEmergencyDataNetworkPreferredTransportChanged(@AccessNetworkConstants.TransportType int transportType)",
    "returnType" : "void",
    "comment" : "\n         * The framework calls this method when the preferred transport type used to set up\n         * emergency data network is changed.\n         *\n         * This method is meant to be overridden.\n         *\n         * @param transportType transport type changed to be preferred\n         ",
    "links" : [ ]
  }, {
    "name" : "public void requestNetworkValidation(@NetCapability int networkCapability, @NonNull @CallbackExecutor Executor executor, @NonNull @DataServiceCallback.ResultCode Consumer<Integer> resultCodeCallback)",
    "returnType" : "void",
    "comment" : "\n         * Request network validation to the connected data network for given a network capability.\n         *\n         * <p>This network validation can only be performed when a data network is in connected\n         * state, and will not be triggered if the data network does not support network validation\n         * feature or network validation is not in connected state.\n         *\n         * <p>See {@link DataServiceCallback.ResultCode} for the type of response that indicates\n         * whether the request was successfully submitted or had an error.\n         *\n         * <p>If network validation is requested, monitor network validation status in {@link\n         * PreciseDataConnectionState#getNetworkValidationStatus()}.\n         *\n         * @param networkCapability A network capability. (Note that only APN-type capabilities are\n         *     supported.\n         * @param executor executor The callback executor that responds whether the request has been\n         *     successfully submitted or not.\n         * @param resultCodeCallback A callback to determine whether the request was successfully\n         *     submitted or not.\n         ",
    "links" : [ "DataServiceCallback.ResultCode", "android.telephony.PreciseDataConnectionState#getNetworkValidationStatus()" ]
  }, {
    "name" : "private void onRequestNetworkValidation(NetworkValidationRequestData data)",
    "returnType" : "void",
    "comment" : " Process a network validation request on the internal handler. ",
    "links" : [ ]
  }, {
    "name" : "public abstract void close()",
    "returnType" : "void",
    "comment" : "\n         * Called when the qualified networks provider is removed. The extended class should\n         * implement this method to perform cleanup works.\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public final int getSlotIndex()", "private void registerForQualifiedNetworkTypesChanged(IQualifiedNetworksServiceCallback callback)", "public final void updateQualifiedNetworkTypes(@ApnType int apnTypes, @NonNull List<Integer> qualifiedNetworkTypes)", "public final void reconnectQualifiedNetworkType(@ApnType int apnTypes, @AccessNetworkConstants.RadioAccessNetworkType int qualifiedNetworkType)", "private void onUpdateQualifiedNetworkTypes(@ApnType int apnTypes, int[] qualifiedNetworkTypes)", "private void onReconnectQualifiedNetworkType(@ApnType int apnTypes, @AccessNetworkConstants.RadioAccessNetworkType int qualifiedNetworkType)", "public void reportThrottleStatusChanged(@NonNull List<ThrottleStatus> statuses)", "public void reportEmergencyDataNetworkPreferredTransportChanged(@AccessNetworkConstants.TransportType int transportType)", "public void requestNetworkValidation(@NetCapability int networkCapability, @NonNull @CallbackExecutor Executor executor, @NonNull @DataServiceCallback.ResultCode Consumer<Integer> resultCodeCallback)", "private void onRequestNetworkValidation(NetworkValidationRequestData data)", "public abstract void close()" ],
  "variableNames" : [ "mSlotIndex", "mCallback", "mQualifiedNetworkTypesList" ]
}