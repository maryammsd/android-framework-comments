{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/wifi/WifiNetworkSpecifier.java",
  "packageName" : "android.net.wifi",
  "className" : "WifiNetworkSpecifier",
  "comment" : "\n * Network specifier object used to request a Wi-Fi network. Apps should use the\n * {@link WifiNetworkSpecifier.Builder} class to create an instance.\n * <p>\n * This specifier can be used to request a local-only connection on devices that support concurrent\n * connections (indicated via\n * {@link WifiManager#isStaConcurrencyForLocalOnlyConnectionsSupported()} and if the initiating app\n * targets SDK &ge; {@link android.os.Build.VERSION_CODES#S} or is a system app. These local-only\n * connections may be brought up as a secondary concurrent connection (primary connection will be\n * used for networks with internet connectivity available to the user and all apps).\n * </p>\n * <p>\n * This specifier can also be used to listen for connected Wi-Fi networks on a particular band.\n * Additionally, some devices may support requesting a connection to a particular band. If the\n * device does not support such a request, it will send {@link NetworkCallback#onUnavailable()}\n * upon request to the callback passed to\n * {@link ConnectivityManager#requestNetwork(NetworkRequest, NetworkCallback)} or equivalent.\n * See {@link Builder#build()} for details.\n * </p>\n ",
  "links" : [ "#build()", "android.net.wifi.WifiManager#isStaConcurrencyForLocalOnlyConnectionsSupported()", "android.os.Build.VERSION_CODES#S", "WifiNetworkSpecifier.Builder", "android.net.ConnectivityManager#requestNetwork(NetworkRequest", "android.net.ConnectivityManager.NetworkCallback#onUnavailable()" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ssidPatternMatcher",
    "type" : "PatternMatcher",
    "comment" : "\n     * SSID pattern match specified by the app.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "bssidPatternMatcher",
    "type" : "Pair<MacAddress, MacAddress>",
    "comment" : "\n     * BSSID pattern match specified by the app.\n     * Pair of <BaseAddress, Mask>.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mBand",
    "type" : "int",
    "comment" : "\n     * The band for this Wi-Fi network.\n     ",
    "links" : [ ]
  }, {
    "name" : "mChannelFreqs",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "wifiConfiguration",
    "type" : "WifiConfiguration",
    "comment" : "\n     * Security credentials for the network.\n     * <p>\n     * Note: {@link WifiConfiguration#SSID} & {@link WifiConfiguration#BSSID} fields from\n     * WifiConfiguration are not used. Instead we use the {@link #ssidPatternMatcher} &\n     * {@link #bssidPatternMatcher} fields embedded directly\n     * within {@link WifiNetworkSpecifier}.\n     * @hide\n     ",
    "links" : [ "#bssidPatternMatcher", "android.net.wifi.WifiNetworkSpecifier", "android.net.wifi.WifiConfiguration#SSID", "android.net.wifi.WifiConfiguration#BSSID", "#ssidPatternMatcher" ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<WifiNetworkSpecifier>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static int getBand(final int freqMHz)",
    "returnType" : "int",
    "comment" : "\n     * Returns the band for a given frequency in MHz.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean validateChannelFrequencyInMhz(@NonNull int[] channels)",
    "returnType" : "boolean",
    "comment" : "\n     * Check the channel in the array is valid.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean validateBand(@WifiBand int band)",
    "returnType" : "boolean",
    "comment" : "\n     * Validates that the passed band is a valid band\n     * @param band the band to check\n     * @return true if the band is valid, false otherwise\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getBand()",
    "returnType" : "int",
    "comment" : "\n     * The band for this Wi-Fi network specifier.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int[] getPreferredChannelFrequenciesMhz()",
    "returnType" : "int[]",
    "comment" : "\n     * The preferred channels fot this network specifier.\n     * @see Builder#setPreferredChannelsFrequenciesMhz(int[])\n     ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean canBeSatisfiedBy(NetworkSpecifier other)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public NetworkSpecifier redact()",
    "returnType" : "NetworkSpecifier",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static int getBand(final int freqMHz)", "public static boolean validateChannelFrequencyInMhz(@NonNull int[] channels)", "public static boolean validateBand(@WifiBand int band)", "public int getBand()", "public int[] getPreferredChannelFrequenciesMhz()", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)", "public int hashCode()", "public boolean equals(Object obj)", "public String toString()", "public boolean canBeSatisfiedBy(NetworkSpecifier other)", "public NetworkSpecifier redact()" ],
  "variableNames" : [ "TAG", "ssidPatternMatcher", "bssidPatternMatcher", "mBand", "mChannelFreqs", "wifiConfiguration", "CREATOR" ]
}