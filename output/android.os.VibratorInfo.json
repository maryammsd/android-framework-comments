{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/os/VibratorInfo.java",
  "packageName" : "android.os",
  "className" : "VibratorInfo",
  "comment" : "\n * A VibratorInfo describes the capabilities of a {@link Vibrator}.\n *\n * <p>This description includes its capabilities, list of supported effects and composition\n * primitives.\n *\n * @hide\n ",
  "links" : [ "android.hardware.vibrator.IVibrator" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EMPTY_VIBRATOR_INFO",
    "type" : "VibratorInfo",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "mId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCapabilities",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSupportedEffects",
    "type" : "SparseBooleanArray",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSupportedBraking",
    "type" : "SparseBooleanArray",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSupportedPrimitives",
    "type" : "SparseIntArray",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPrimitiveDelayMax",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCompositionSizeMax",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPwlePrimitiveDurationMax",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPwleSizeMax",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mQFactor",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFrequencyProfile",
    "type" : "FrequencyProfile",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<VibratorInfo>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equalContent(VibratorInfo that)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} only if the properties and capabilities of the provided info, except for\n     * the ID, equals to this info. Returns {@code false} otherwise.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dump(IndentingPrintWriter pw)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getId()",
    "returnType" : "int",
    "comment" : " Return the id of this vibrator. ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasAmplitudeControl()",
    "returnType" : "boolean",
    "comment" : "\n     * Check whether the vibrator has amplitude control.\n     *\n     * @return True if the hardware can control the amplitude of the vibrations, otherwise false.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasFrequencyControl()",
    "returnType" : "boolean",
    "comment" : "\n     * Check whether the vibrator has frequency control.\n     *\n     * @return True if the hardware can control the frequency of the vibrations, otherwise false.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getDefaultBraking()",
    "returnType" : "int",
    "comment" : "\n     * Returns a default value to be applied to composed PWLE effects for braking.\n     *\n     * @return a supported braking value, one of android.hardware.vibrator.Braking.*\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public SparseBooleanArray getSupportedBraking()",
    "returnType" : "SparseBooleanArray",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isBrakingSupportKnown()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasBrakingSupport(@Braking int braking)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isEffectSupportKnown()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int isEffectSupported(@VibrationEffect.EffectType int effectId)",
    "returnType" : "int",
    "comment" : "\n     * Query whether the vibrator supports the given effect.\n     *\n     * @param effectId Which effects to query for.\n     * @return {@link Vibrator#VIBRATION_EFFECT_SUPPORT_YES} if the effect is supported,\n     * {@link Vibrator#VIBRATION_EFFECT_SUPPORT_NO} if it isn't supported, or\n     * {@link Vibrator#VIBRATION_EFFECT_SUPPORT_UNKNOWN} if the system can't determine whether it's\n     * supported or not.\n     ",
    "links" : [ "android.hardware.vibrator.IVibrator#VIBRATION_EFFECT_SUPPORT_NO", "android.hardware.vibrator.IVibrator#VIBRATION_EFFECT_SUPPORT_UNKNOWN", "android.hardware.vibrator.IVibrator#VIBRATION_EFFECT_SUPPORT_YES" ]
  }, {
    "name" : "public SparseBooleanArray getSupportedEffects()",
    "returnType" : "SparseBooleanArray",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isPrimitiveSupported(@VibrationEffect.Composition.PrimitiveType int primitiveId)",
    "returnType" : "boolean",
    "comment" : "\n     * Query whether the vibrator supports the given primitive.\n     *\n     * @param primitiveId Which primitives to query for.\n     * @return Whether the primitive is supported.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean areVibrationFeaturesSupported(@NonNull VibrationEffect effect)",
    "returnType" : "boolean",
    "comment" : "\n     * Query whether or not the vibrator supports all components of a given {@link VibrationEffect}\n     * (i.e. the vibrator can play the given effect as intended).\n     *\n     * <p>See {@link Vibrator#areVibrationFeaturesSupported(VibrationEffect)} for more\n     * information on how the vibrator support is determined.\n     *\n     * @param effect the {@link VibrationEffect} to check if it is supported\n     * @return {@code true} if the vibrator can play the given {@code effect} as intended,\n     *         {@code false} otherwise.\n     *\n     * @hide\n     ",
    "links" : [ "android.os.VibrationEffect", "android.hardware.vibrator.IVibrator#areVibrationFeaturesSupported(VibrationEffect)" ]
  }, {
    "name" : "public int getPrimitiveDuration(@VibrationEffect.Composition.PrimitiveType int primitiveId)",
    "returnType" : "int",
    "comment" : "\n     * Query the estimated duration of given primitive.\n     *\n     * @param primitiveId Which primitives to query for.\n     * @return The duration in milliseconds estimated for the primitive, or zero if primitive not\n     * supported.\n     ",
    "links" : [ ]
  }, {
    "name" : "public SparseIntArray getSupportedPrimitives()",
    "returnType" : "SparseIntArray",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getPrimitiveDelayMax()",
    "returnType" : "int",
    "comment" : "\n     * Query the maximum delay supported for a primitive in a composed effect.\n     *\n     * @return The max delay in milliseconds, or zero if unlimited.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getCompositionSizeMax()",
    "returnType" : "int",
    "comment" : "\n     * Query the maximum number of primitives supported in a composed effect.\n     *\n     * @return The max number of primitives supported, or zero if unlimited.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getPwlePrimitiveDurationMax()",
    "returnType" : "int",
    "comment" : "\n     * Query the maximum duration supported for a primitive in a PWLE composition.\n     *\n     * @return The max duration in milliseconds, or zero if unlimited.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getPwleSizeMax()",
    "returnType" : "int",
    "comment" : "\n     * Query the maximum number of primitives supported in a PWLE composition.\n     *\n     * @return The max number of primitives supported, or zero if unlimited.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasCapability(long capability)",
    "returnType" : "boolean",
    "comment" : "\n     * Check against this vibrator capabilities.\n     *\n     * @param capability one of IVibrator.CAP_*\n     * @return true if this vibrator has this capability, false otherwise\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getResonantFrequencyHz()",
    "returnType" : "float",
    "comment" : "\n     * Gets the resonant frequency of the vibrator.\n     *\n     * @return the resonant frequency of the vibrator, or {@link Float#NaN NaN} if it's unknown or\n     * this vibrator is a composite of multiple physical devices.\n     ",
    "links" : [ "#NaN" ]
  }, {
    "name" : "public float getQFactor()",
    "returnType" : "float",
    "comment" : "\n     * Gets the <a href=\"https://en.wikipedia.org/wiki/Q_factor\">Q factor</a> of the vibrator.\n     *\n     * @return the Q factor of the vibrator, or {@link Float#NaN NaN} if it's unknown or\n     * this vibrator is a composite of multiple physical devices.\n     ",
    "links" : [ "#NaN" ]
  }, {
    "name" : "public FrequencyProfile getFrequencyProfile()",
    "returnType" : "FrequencyProfile",
    "comment" : "\n     * Gets the profile of supported frequencies, including the measurements of maximum relative\n     * output acceleration for supported vibration frequencies.\n     *\n     * <p>If the devices does not have frequency control then the profile should be empty.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getCapabilities()",
    "returnType" : "long",
    "comment" : " Returns a single int representing all the capabilities of the vibrator. ",
    "links" : [ ]
  }, {
    "name" : "private String[] getCapabilitiesNames()",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String[] getSupportedEffectsNames()",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String[] getSupportedBrakingNames()",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String[] getSupportedPrimitivesNames()",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void writeToParcel(Parcel dest, int flags)", "public int describeContents()", "public boolean equals(Object o)", "public boolean equalContent(VibratorInfo that)", "public int hashCode()", "public String toString()", "public void dump(IndentingPrintWriter pw)", "public int getId()", "public boolean hasAmplitudeControl()", "public boolean hasFrequencyControl()", "public int getDefaultBraking()", "public SparseBooleanArray getSupportedBraking()", "public boolean isBrakingSupportKnown()", "public boolean hasBrakingSupport(@Braking int braking)", "public boolean isEffectSupportKnown()", "public int isEffectSupported(@VibrationEffect.EffectType int effectId)", "public SparseBooleanArray getSupportedEffects()", "public boolean isPrimitiveSupported(@VibrationEffect.Composition.PrimitiveType int primitiveId)", "public boolean areVibrationFeaturesSupported(@NonNull VibrationEffect effect)", "public int getPrimitiveDuration(@VibrationEffect.Composition.PrimitiveType int primitiveId)", "public SparseIntArray getSupportedPrimitives()", "public int getPrimitiveDelayMax()", "public int getCompositionSizeMax()", "public int getPwlePrimitiveDurationMax()", "public int getPwleSizeMax()", "public boolean hasCapability(long capability)", "public float getResonantFrequencyHz()", "public float getQFactor()", "public FrequencyProfile getFrequencyProfile()", "public long getCapabilities()", "private String[] getCapabilitiesNames()", "private String[] getSupportedEffectsNames()", "private String[] getSupportedBrakingNames()", "private String[] getSupportedPrimitivesNames()" ],
  "variableNames" : [ "TAG", "EMPTY_VIBRATOR_INFO", "mId", "mCapabilities", "mSupportedEffects", "mSupportedBraking", "mSupportedPrimitives", "mPrimitiveDelayMax", "mCompositionSizeMax", "mPwlePrimitiveDurationMax", "mPwleSizeMax", "mQFactor", "mFrequencyProfile", "CREATOR" ]
}