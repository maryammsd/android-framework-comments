{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/os/image/DynamicSystemClient.java",
  "packageName" : "android.os.image",
  "className" : "DynamicSystemClient",
  "comment" : "\n * <p>This class contains methods and constants used to start a {@code DynamicSystem} installation,\n * and a listener for status updates.</p>\n *\n * <p>{@code DynamicSystem} allows users to run certified system images in a non destructive manner\n * without needing to prior OEM unlock. It creates a temporary system partition to install the new\n * system image, and a temporary data partition for the newly installed system to run with.</p>\n *\n * After the installation is completed, the device will be running in the new system on next the\n * reboot. Then, when the user reboots the device again, it will leave {@code DynamicSystem} and go\n * back to the original system. While running in {@code DynamicSystem}, persitent storage for\n * factory reset protection (FRP) remains unchanged. Since the user is running the new system with\n * a temporarily created data partition, their original user data are kept unchanged.</p>\n *\n * <p>With {@link #setOnStatusChangedListener}, API users can register an\n * {@link #OnStatusChangedListener} to get status updates and their causes when the installation is\n * started, stopped, or cancelled. It also sends progress updates during the installation. With\n * {@link #start}, API users can start an installation with the {@link Uri} to a unsparsed and\n * gzipped system image. The {@link Uri} can be a web URL or a content Uri to a local path.</p>\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STATUS_UNKNOWN",
    "type" : "int",
    "comment" : " We are bound to installation service, but failed to get its status ",
    "links" : [ ]
  }, {
    "name" : "STATUS_NOT_STARTED",
    "type" : "int",
    "comment" : " Installation is not started yet. ",
    "links" : [ ]
  }, {
    "name" : "STATUS_IN_PROGRESS",
    "type" : "int",
    "comment" : " Installation is in progress. ",
    "links" : [ ]
  }, {
    "name" : "STATUS_READY",
    "type" : "int",
    "comment" : " Installation is finished but the user has not launched it. ",
    "links" : [ ]
  }, {
    "name" : "STATUS_IN_USE",
    "type" : "int",
    "comment" : " Device is running in {@code DynamicSystem}. ",
    "links" : [ ]
  }, {
    "name" : "CAUSE_NOT_SPECIFIED",
    "type" : "int",
    "comment" : " Cause is not specified. This means the status is not changed. ",
    "links" : [ ]
  }, {
    "name" : "CAUSE_INSTALL_COMPLETED",
    "type" : "int",
    "comment" : " Status changed because installation is completed. ",
    "links" : [ ]
  }, {
    "name" : "CAUSE_INSTALL_CANCELLED",
    "type" : "int",
    "comment" : " Status changed because installation is cancelled. ",
    "links" : [ ]
  }, {
    "name" : "CAUSE_ERROR_IO",
    "type" : "int",
    "comment" : " Installation failed due to {@code IOException}. ",
    "links" : [ ]
  }, {
    "name" : "CAUSE_ERROR_INVALID_URL",
    "type" : "int",
    "comment" : " Installation failed because the image URL source is not supported. ",
    "links" : [ ]
  }, {
    "name" : "CAUSE_ERROR_IPC",
    "type" : "int",
    "comment" : " Installation failed due to IPC error. ",
    "links" : [ ]
  }, {
    "name" : "CAUSE_ERROR_EXCEPTION",
    "type" : "int",
    "comment" : " Installation failed due to unhandled exception. ",
    "links" : [ ]
  }, {
    "name" : "MSG_REGISTER_LISTENER",
    "type" : "int",
    "comment" : "\n     * Message to register listener.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "MSG_UNREGISTER_LISTENER",
    "type" : "int",
    "comment" : "\n     * Message to unregister listener.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "MSG_POST_STATUS",
    "type" : "int",
    "comment" : "\n     * Message for status updates.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_INSTALLED_SIZE",
    "type" : "String",
    "comment" : "\n     * Message key, for progress updates.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_EXCEPTION_DETAIL",
    "type" : "String",
    "comment" : "\n     * Message key, used when the service is sending exception detail to the client.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_START_INSTALL",
    "type" : "String",
    "comment" : "\n     * Intent action: start installation.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_NOTIFY_IF_IN_USE",
    "type" : "String",
    "comment" : "\n     * Intent action: notify user if we are currently running in {@code DynamicSystem}.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_SYSTEM_SIZE",
    "type" : "String",
    "comment" : "\n     * Intent key: Size of the system image, in bytes.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_USERDATA_SIZE",
    "type" : "String",
    "comment" : "\n     * Intent key: Number of bytes to reserve for userdata.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConnection",
    "type" : "DynSystemServiceConnection",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMessenger",
    "type" : "Messenger",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBound",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExecutor",
    "type" : "Executor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mListener",
    "type" : "OnStatusChangedListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "Messenger",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setOnStatusChangedListener(@NonNull @CallbackExecutor Executor executor, @NonNull OnStatusChangedListener listener)",
    "returnType" : "void",
    "comment" : "\n     * This method register a listener for status change. The listener is called using\n     * the executor.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOnStatusChangedListener(@NonNull OnStatusChangedListener listener)",
    "returnType" : "void",
    "comment" : "\n     * This method register a listener for status change. The listener is called in main\n     * thread.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void bind()",
    "returnType" : "void",
    "comment" : "\n     * Bind to {@code DynamicSystem} installation service. Binding to the installation service\n     * allows it to send status updates to {@link #OnStatusChangedListener}. It is recommanded\n     * to bind before calling {@link #start} and get status updates.\n     * @hide\n     ",
    "links" : [ "#start", "#OnStatusChangedListener" ]
  }, {
    "name" : "public void unbind()",
    "returnType" : "void",
    "comment" : "\n     * Unbind from {@code DynamicSystem} installation service. Unbinding from the installation\n     * service stops it from sending following status updates.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void start(@NonNull Uri systemUrl, @BytesLong long systemSize)",
    "returnType" : "void",
    "comment" : "\n     * Start installing {@code DynamicSystem} from URL with default userdata size.\n     *\n     * Calling this function will first start an Activity to confirm device credential, using\n     * {@link KeyguardManager}. If it's confirmed, the installation service will be started.\n     *\n     * This function doesn't require prior calling {@link #bind}.\n     *\n     * @param systemUrl a network Uri, a file Uri or a content Uri pointing to a system image file.\n     * @param systemSize size of system image.\n     * @hide\n     ",
    "links" : [ "#bind", "KeyguardManager" ]
  }, {
    "name" : "public void start(@NonNull Uri systemUrl, @BytesLong long systemSize, @BytesLong long userdataSize)",
    "returnType" : "void",
    "comment" : "\n     * Start installing {@code DynamicSystem} from URL.\n     *\n     * Calling this function will first start an Activity to confirm device credential, using\n     * {@link KeyguardManager}. If it's confirmed, the installation service will be started.\n     *\n     * This function doesn't require prior calling {@link #bind}.\n     *\n     * @param systemUrl a network Uri, a file Uri or a content Uri pointing to a system image file.\n     * @param systemSize size of system image.\n     * @param userdataSize bytes reserved for userdata.\n     ",
    "links" : [ "#bind", "KeyguardManager" ]
  }, {
    "name" : "private boolean featureFlagEnabled()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleMessage(Message msg)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "STATUS_UNKNOWN", "STATUS_NOT_STARTED", "STATUS_IN_PROGRESS", "STATUS_READY", "STATUS_IN_USE", "CAUSE_NOT_SPECIFIED", "CAUSE_INSTALL_COMPLETED", "CAUSE_INSTALL_CANCELLED", "CAUSE_ERROR_IO", "CAUSE_ERROR_INVALID_URL", "CAUSE_ERROR_IPC", "CAUSE_ERROR_EXCEPTION", "MSG_REGISTER_LISTENER", "MSG_UNREGISTER_LISTENER", "MSG_POST_STATUS", "KEY_INSTALLED_SIZE", "KEY_EXCEPTION_DETAIL", "ACTION_START_INSTALL", "ACTION_NOTIFY_IF_IN_USE", "KEY_SYSTEM_SIZE", "KEY_USERDATA_SIZE", "mContext", "mConnection", "mMessenger", "mBound", "mExecutor", "mListener", "mService" ],
  "methodNames" : [ "public void setOnStatusChangedListener(@NonNull @CallbackExecutor Executor executor, @NonNull OnStatusChangedListener listener)", "public void setOnStatusChangedListener(@NonNull OnStatusChangedListener listener)", "public void bind()", "public void unbind()", "public void start(@NonNull Uri systemUrl, @BytesLong long systemSize)", "public void start(@NonNull Uri systemUrl, @BytesLong long systemSize, @BytesLong long userdataSize)", "private boolean featureFlagEnabled()", "private void handleMessage(Message msg)" ]
}