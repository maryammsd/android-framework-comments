{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/security/interfaces/DSAKeyPairGenerator.java",
  "packageName" : "java.security.interfaces",
  "className" : "DSAKeyPairGenerator",
  "comment" : "\n * An interface to an object capable of generating DSA key pairs.\n *\n * <p>The {@code initialize} methods may each be called any number\n * of times. If no {@code initialize} method is called on a\n * DSAKeyPairGenerator, each provider that implements this interface\n * should supply (and document) a default initialization. Note that\n * defaults may vary across different providers. Additionally, the default\n * value for a provider may change in a future version. Therefore, it is\n * recommended to explicitly initialize the DSAKeyPairGenerator instead\n * of relying on provider-specific defaults.\n *\n * <p>Users wishing to indicate DSA-specific parameters, and to generate a key\n * pair suitable for use with the DSA algorithm typically\n *\n * <ol>\n *\n * <li>Get a key pair generator for the DSA algorithm by calling the\n * KeyPairGenerator {@code getInstance} method with \"DSA\"\n * as its argument.\n *\n * <li>Check if the returned key pair generator is an instance of\n * DSAKeyPairGenerator before casting the result to a DSAKeyPairGenerator\n * and calling one of the {@code initialize} methods from this\n * DSAKeyPairGenerator interface.\n *\n * <li>Generate a key pair by calling the {@code generateKeyPair}\n * method of the KeyPairGenerator class.\n *\n * </ol>\n *\n * <p>Note: it is not always necessary to do algorithm-specific\n * initialization for a DSA key pair generator. That is, it is not always\n * necessary to call an {@code initialize} method in this interface.\n * Algorithm-independent initialization using the {@code initialize} method\n * in the KeyPairGenerator\n * interface is all that is needed when you accept defaults for algorithm-specific\n * parameters.\n *\n * <p>Note: Some earlier implementations of this interface may not support\n * larger values of DSA parameters such as 3072-bit.\n *\n * @since 1.1\n * @see java.security.KeyPairGenerator\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public void initialize(DSAParams params, SecureRandom random) throws InvalidParameterException",
    "returnType" : "void",
    "comment" : "\n     * Initializes the key pair generator using the DSA family parameters\n     * (p,q and g) and an optional SecureRandom bit source. If a\n     * SecureRandom bit source is needed but not supplied, i.e. null, a\n     * default SecureRandom instance will be used.\n     *\n     * @param params the parameters to use to generate the keys.\n     *\n     * @param random the random bit source to use to generate key bits;\n     * can be null.\n     *\n     * @throws    InvalidParameterException if the {@code params}\n     * value is invalid, null, or unsupported.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void initialize(int modlen, boolean genParams, SecureRandom random) throws InvalidParameterException",
    "returnType" : "void",
    "comment" : "\n     * Initializes the key pair generator for a given modulus length\n     * (instead of parameters), and an optional SecureRandom bit source.\n     * If a SecureRandom bit source is needed but not supplied, i.e.\n     * null, a default SecureRandom instance will be used.\n     *\n     * <p>If {@code genParams} is true, this method generates new\n     * p, q and g parameters. If it is false, the method uses precomputed\n     * parameters for the modulus length requested. If there are no\n     * precomputed parameters for that modulus length, an exception will be\n     * thrown.\n     *\n     * @param modlen the modulus length in bits. Valid values are any\n     * multiple of 64 between 512 and 1024, inclusive, 2048, and 3072.\n     *\n     * @param random the random bit source to use to generate key bits;\n     * can be null.\n     *\n     * @param genParams whether or not to generate new parameters for\n     * the modulus length requested.\n     *\n     * @throws    InvalidParameterException if {@code modlen} is\n     * invalid, or unsupported, or if {@code genParams} is false and there\n     * are no precomputed parameters for the requested modulus length.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void initialize(DSAParams params, SecureRandom random) throws InvalidParameterException", "public void initialize(int modlen, boolean genParams, SecureRandom random) throws InvalidParameterException" ],
  "variableNames" : [ ]
}