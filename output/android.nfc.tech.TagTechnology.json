{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/nfc/tech/TagTechnology.java",
  "packageName" : "android.nfc.tech",
  "className" : "TagTechnology",
  "comment" : "\n * {@link TagTechnology} is an interface to a technology in a {@link Tag}.\n * <p>\n * Obtain a {@link TagTechnology} implementation by calling the static method <code>get()</code>\n * on the implementation class.\n * <p>\n * NFC tags are based on a number of independently developed technologies and offer a\n * wide range of capabilities. The\n * {@link TagTechnology} implementations provide access to these different\n * technologies and capabilities. Some sub-classes map to technology\n * specification (for example {@link NfcA}, {@link IsoDep}, others map to\n * pseudo-technologies or capabilities (for example {@link Ndef}, {@link NdefFormatable}).\n * <p>\n * It is mandatory for all Android NFC devices to provide the following\n * {@link TagTechnology} implementations.\n * <ul>\n * <li>{@link NfcA} (also known as ISO 14443-3A)\n * <li>{@link NfcB} (also known as ISO 14443-3B)\n * <li>{@link NfcF} (also known as JIS 6319-4)\n * <li>{@link NfcV} (also known as ISO 15693)\n * <li>{@link IsoDep}\n * <li>{@link Ndef} on NFC Forum Type 1, Type 2, Type 3 or Type 4 compliant tags\n * </ul>\n * It is optional for Android NFC devices to provide the following\n * {@link TagTechnology} implementations. If it is not provided, the\n * Android device will never enumerate that class via {@link Tag#getTechList}.\n * <ul>\n * <li>{@link MifareClassic}\n * <li>{@link MifareUltralight}\n * <li>{@link NfcBarcode}\n * <li>{@link NdefFormatable} must only be enumerated on tags for which this Android device\n * is capable of formatting. Proprietary knowledge is often required to format a tag\n * to make it NDEF compatible.\n * </ul>\n * <p>\n * {@link TagTechnology} implementations provide methods that fall into two classes:\n * <em>cached getters</em> and <em>I/O operations</em>.\n * <h4>Cached getters</h4>\n * These methods (usually prefixed by <code>get</code> or <code>is</code>) return\n * properties of the tag, as determined at discovery time. These methods will never\n * block or cause RF activity, and do not require {@link #connect} to have been called.\n * They also never update, for example if a property is changed by an I/O operation with a tag\n * then the cached getter will still return the result from tag discovery time.\n * <h4>I/O operations</h4>\n * I/O operations may require RF activity, and may block. They have the following semantics.\n * <ul>\n * <li>{@link #connect} must be called before using any other I/O operation.\n * <li>{@link #close} must be called after completing I/O operations with a\n * {@link TagTechnology}, and it will cancel all other blocked I/O operations on other threads\n * (including {@link #connect} with {@link IOException}.\n * <li>Only one {@link TagTechnology} can be connected at a time. Other calls to\n * {@link #connect} will return {@link IOException}.\n * <li>I/O operations may block, and should never be called on the main application\n * thread.\n * </ul>\n *\n * <p class=\"note\"><strong>Note:</strong> Methods that perform I/O operations\n * require the {@link android.Manifest.permission#NFC} permission.\n ",
  "links" : [ "android.nfc.Tag", "android.nfc.tech.NfcA", "android.nfc.tech.Ndef", "android.nfc.tech.NfcB", "android.nfc.tech.MifareClassic", "#close", "java.io.IOException", "android.nfc.tech.MifareUltralight", "android.nfc.tech.NfcBarcode", "android.nfc.tech.TagTechnology", "android.nfc.tech.NdefFormatable", "android.nfc.tech.NfcV", "android.Manifest.permission#NFC", "android.nfc.tech.IsoDep", "#connect", "android.nfc.Tag#getTechList", "android.nfc.tech.NfcF" ],
  "variables" : [ {
    "name" : "NFC_A",
    "type" : "int",
    "comment" : "\n     * This technology is an instance of {@link NfcA}.\n     * <p>Support for this technology type is mandatory.\n     * @hide\n     ",
    "links" : [ "android.nfc.tech.NfcA" ]
  }, {
    "name" : "NFC_B",
    "type" : "int",
    "comment" : "\n     * This technology is an instance of {@link NfcB}.\n     * <p>Support for this technology type is mandatory.\n     * @hide\n     ",
    "links" : [ "android.nfc.tech.NfcB" ]
  }, {
    "name" : "ISO_DEP",
    "type" : "int",
    "comment" : "\n     * This technology is an instance of {@link IsoDep}.\n     * <p>Support for this technology type is mandatory.\n     * @hide\n     ",
    "links" : [ "android.nfc.tech.IsoDep" ]
  }, {
    "name" : "NFC_F",
    "type" : "int",
    "comment" : "\n     * This technology is an instance of {@link NfcF}.\n     * <p>Support for this technology type is mandatory.\n     * @hide\n     ",
    "links" : [ "android.nfc.tech.NfcF" ]
  }, {
    "name" : "NFC_V",
    "type" : "int",
    "comment" : "\n     * This technology is an instance of {@link NfcV}.\n     * <p>Support for this technology type is mandatory.\n     * @hide\n     ",
    "links" : [ "android.nfc.tech.NfcV" ]
  }, {
    "name" : "NDEF",
    "type" : "int",
    "comment" : "\n     * This technology is an instance of {@link Ndef}.\n     * <p>Support for this technology type is mandatory.\n     * @hide\n     ",
    "links" : [ "android.nfc.tech.Ndef" ]
  }, {
    "name" : "NDEF_FORMATABLE",
    "type" : "int",
    "comment" : "\n     * This technology is an instance of {@link NdefFormatable}.\n     * <p>Support for this technology type is mandatory.\n     * @hide\n     ",
    "links" : [ "android.nfc.tech.NdefFormatable" ]
  }, {
    "name" : "MIFARE_CLASSIC",
    "type" : "int",
    "comment" : "\n     * This technology is an instance of {@link MifareClassic}.\n     * <p>Support for this technology type is optional. If a stack doesn't support this technology\n     * type tags using it must still be discovered and present the lower level radio interface\n     * technologies in use.\n     * @hide\n     ",
    "links" : [ "android.nfc.tech.MifareClassic" ]
  }, {
    "name" : "MIFARE_ULTRALIGHT",
    "type" : "int",
    "comment" : "\n     * This technology is an instance of {@link MifareUltralight}.\n     * <p>Support for this technology type is optional. If a stack doesn't support this technology\n     * type tags using it must still be discovered and present the lower level radio interface\n     * technologies in use.\n     * @hide\n     ",
    "links" : [ "android.nfc.tech.MifareUltralight" ]
  }, {
    "name" : "NFC_BARCODE",
    "type" : "int",
    "comment" : "\n     * This technology is an instance of {@link NfcBarcode}.\n     * <p>Support for this technology type is optional. If a stack doesn't support this technology\n     * type tags using it must still be discovered and present the lower level radio interface\n     * technologies in use.\n     * @hide\n     ",
    "links" : [ "android.nfc.tech.NfcBarcode" ]
  } ],
  "methods" : [ {
    "name" : "public Tag getTag()",
    "returnType" : "Tag",
    "comment" : "\n     * Get the {@link Tag} object backing this {@link TagTechnology} object.\n     * @return the {@link Tag} backing this {@link TagTechnology} object.\n     ",
    "links" : [ "android.nfc.Tag", "android.nfc.tech.TagTechnology" ]
  }, {
    "name" : "public void connect() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Enable I/O operations to the tag from this {@link TagTechnology} object.\n     * <p>May cause RF activity and may block. Must not be called\n     * from the main application thread. A blocked call will be canceled with\n     * {@link IOException} by calling {@link #close} from another thread.\n     * <p>Only one {@link TagTechnology} object can be connected to a {@link Tag} at a time.\n     * <p>Applications must call {@link #close} when I/O operations are complete.\n     *\n     * <p class=\"note\">Requires the {@link android.Manifest.permission#NFC} permission.\n     *\n     * @see #close()\n     * @throws TagLostException if the tag leaves the field\n     * @throws IOException if there is an I/O failure, or connect is canceled\n     * @throws SecurityException if the tag object is reused after the tag has left the field\n     ",
    "links" : [ "android.Manifest.permission#NFC", "android.nfc.Tag", "java.io.IOException", "#close", "android.nfc.tech.TagTechnology" ]
  }, {
    "name" : "public void reconnect() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Re-connect to the {@link Tag} associated with this connection. Reconnecting to a tag can be\n     * used to reset the state of the tag itself.\n     *\n     * <p>May cause RF activity and may block. Must not be called\n     * from the main application thread. A blocked call will be canceled with\n     * {@link IOException} by calling {@link #close} from another thread.\n     *\n     * <p class=\"note\">Requires the {@link android.Manifest.permission#NFC} permission.\n     *\n     * @see #connect()\n     * @see #close()\n     * @throws TagLostException if the tag leaves the field\n     * @throws IOException if there is an I/O failure, or connect is canceled\n     * @throws SecurityException if the tag object is reused after the tag has left the field\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission#NFC", "android.nfc.Tag", "java.io.IOException", "#close" ]
  }, {
    "name" : "public void close() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Disable I/O operations to the tag from this {@link TagTechnology} object, and release resources.\n     * <p>Also causes all blocked I/O operations on other thread to be canceled and\n     * return with {@link IOException}.\n     *\n     * <p class=\"note\">Requires the {@link android.Manifest.permission#NFC} permission.\n     *\n     * @see #connect()\n     * @throws SecurityException if the tag object is reused after the tag has left the field\n     ",
    "links" : [ "android.Manifest.permission#NFC", "java.io.IOException", "android.nfc.tech.TagTechnology" ]
  }, {
    "name" : "public boolean isConnected()",
    "returnType" : "boolean",
    "comment" : "\n     * Helper to indicate if I/O operations should be possible.\n     *\n     * <p>Returns true if {@link #connect} has completed, and {@link #close} has not been\n     * called, and the {@link Tag} is not known to be out of range.\n     * <p>Does not cause RF activity, and does not block.\n     *\n     * @return true if I/O operations should be possible\n     ",
    "links" : [ "android.nfc.Tag", "#connect", "#close" ]
  } ],
  "methodNames" : [ "public Tag getTag()", "public void connect() throws IOException", "public void reconnect() throws IOException", "public void close() throws IOException", "public boolean isConnected()" ],
  "variableNames" : [ "NFC_A", "NFC_B", "ISO_DEP", "NFC_F", "NFC_V", "NDEF", "NDEF_FORMATABLE", "MIFARE_CLASSIC", "MIFARE_ULTRALIGHT", "NFC_BARCODE" ]
}