{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/tv/ad/TvAdService.java",
  "packageName" : "android.media.tv.ad",
  "className" : "Session",
  "comment" : "\n     * Base class for derived classes to implement to provide a TV AD session.\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mDispatcherState",
    "type" : "KeyEvent.DispatcherState",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSessionCallback",
    "type" : "ITvAdSessionCallback",
    "comment" : " @GuardedBy(\"mLock\")",
    "links" : [ ]
  }, {
    "name" : "mPendingActions",
    "type" : "List<Runnable>",
    "comment" : " @GuardedBy(\"mLock\")",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWindowManager",
    "type" : "WindowManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWindowParams",
    "type" : "WindowManager.LayoutParams",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSurface",
    "type" : "Surface",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMediaViewContainer",
    "type" : "FrameLayout",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMediaView",
    "type" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMediaViewCleanUpTask",
    "type" : "MediaViewCleanUpTask",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMediaViewEnabled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWindowToken",
    "type" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMediaFrame",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setMediaViewEnabled(final boolean enable)",
    "returnType" : "void",
    "comment" : "\n         * Enables or disables the media view.\n         *\n         * <p>By default, the media view is disabled. Must be called explicitly after the\n         * session is created to enable the media view.\n         *\n         * <p>The TV AD service can disable its media view when needed.\n         *\n         * @param enable {@code true} if you want to enable the media view. {@code false}\n         *            otherwise.\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean isMediaViewEnabled()",
    "returnType" : "boolean",
    "comment" : "\n         * Returns {@code true} if media view is enabled, {@code false} otherwise.\n         *\n         * @see #setMediaViewEnabled(boolean)\n         ",
    "links" : [ ]
  }, {
    "name" : "public abstract void onRelease()",
    "returnType" : "void",
    "comment" : "\n         * Releases TvAdService session.\n         ",
    "links" : [ ]
  }, {
    "name" : " void release()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onStartAdService()",
    "returnType" : "void",
    "comment" : "\n         * Starts TvAdService session.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onStopAdService()",
    "returnType" : "void",
    "comment" : "\n         * Stops TvAdService session.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onResetAdService()",
    "returnType" : "void",
    "comment" : "\n         * Resets TvAdService session.\n         ",
    "links" : [ ]
  }, {
    "name" : " void startAdService()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void stopAdService()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void resetAdService()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void requestCurrentVideoBounds()",
    "returnType" : "void",
    "comment" : "\n         * Requests the bounds of the current video.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void requestCurrentChannelUri()",
    "returnType" : "void",
    "comment" : "\n         * Requests the URI of the current channel.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void requestTrackInfoList()",
    "returnType" : "void",
    "comment" : "\n         * Requests the list of {@link TvTrackInfo}.\n         ",
    "links" : [ "android.media.tv.TvTrackInfo" ]
  }, {
    "name" : "public void requestCurrentTvInputId()",
    "returnType" : "void",
    "comment" : "\n         * Requests current TV input ID.\n         *\n         * @see android.media.tv.TvInputInfo\n         ",
    "links" : [ ]
  }, {
    "name" : "public void requestSigning(@NonNull String signingId, @NonNull String algorithm, @NonNull String alias, @NonNull byte[] data)",
    "returnType" : "void",
    "comment" : "\n         * Requests signing of the given data.\n         *\n         * <p>This is used when the corresponding server of the AD service app requires signing\n         * during handshaking, and the service doesn't have the built-in private key. The private\n         * key is provided by the content providers and pre-built in the related app, such as TV\n         * app.\n         *\n         * @param signingId the ID to identify the request. When a result is received, this ID can\n         *                  be used to correlate the result with the request.\n         * @param algorithm the standard name of the signature algorithm requested, such as\n         *                  MD5withRSA, SHA256withDSA, etc. The name is from standards like\n         *                  FIPS PUB 186-4 and PKCS #1.\n         * @param alias the alias of the corresponding {@link java.security.KeyStore}.\n         * @param data the original bytes to be signed.\n         *\n         * @see #onSigningResult(String, byte[])\n         ",
    "links" : [ "java.security.KeyStore" ]
  }, {
    "name" : "public boolean onKeyDown(int keyCode, @Nullable KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean onKeyLongPress(int keyCode, @Nullable KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean onKeyMultiple(int keyCode, int count, @Nullable KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean onKeyUp(int keyCode, @Nullable KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean onTouchEvent(@NonNull MotionEvent event)",
    "returnType" : "boolean",
    "comment" : "\n         * Implement this method to handle touch screen motion events on the current session.\n         *\n         * @param event The motion event being received.\n         * @return If you handled the event, return {@code true}. If you want to allow the event to\n         *         be handled by the next receiver, return {@code false}.\n         * @see View#onTouchEvent\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean onTrackballEvent(@NonNull MotionEvent event)",
    "returnType" : "boolean",
    "comment" : "\n         * Implement this method to handle trackball events on the current session.\n         *\n         * @param event The motion event being received.\n         * @return If you handled the event, return {@code true}. If you want to allow the event to\n         *         be handled by the next receiver, return {@code false}.\n         * @see View#onTrackballEvent\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean onGenericMotionEvent(@NonNull MotionEvent event)",
    "returnType" : "boolean",
    "comment" : "\n         * Implement this method to handle generic motion events on the current session.\n         *\n         * @param event The motion event being received.\n         * @return If you handled the event, return {@code true}. If you want to allow the event to\n         *         be handled by the next receiver, return {@code false}.\n         * @see View#onGenericMotionEvent\n         ",
    "links" : [ ]
  }, {
    "name" : "public void layoutSurface(final int left, final int top, final int right, final int bottom)",
    "returnType" : "void",
    "comment" : "\n         * Assigns a size and position to the surface passed in {@link #onSetSurface}. The position\n         * is relative to the overlay view that sits on top of this surface.\n         *\n         * @param left Left position in pixels, relative to the overlay view.\n         * @param top Top position in pixels, relative to the overlay view.\n         * @param right Right position in pixels, relative to the overlay view.\n         * @param bottom Bottom position in pixels, relative to the overlay view.\n         *\n         ",
    "links" : [ "#onSetSurface" ]
  }, {
    "name" : "public abstract boolean onSetSurface(@Nullable Surface surface)",
    "returnType" : "boolean",
    "comment" : "\n         * Called when the application sets the surface.\n         *\n         * <p>The TV AD service should render AD UI onto the given surface. When called with\n         * {@code null}, the AD service should immediately free any references to the currently set\n         * surface and stop using it.\n         *\n         * @param surface The surface to be used for AD UI rendering. Can be {@code null}.\n         * @return {@code true} if the surface was set successfully, {@code false} otherwise.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onSurfaceChanged(@PixelFormat.Format int format, int width, int height)",
    "returnType" : "void",
    "comment" : "\n         * Called after any structural changes (format or size) have been made to the surface passed\n         * in {@link #onSetSurface}. This method is always called at least once, after\n         * {@link #onSetSurface} is called with non-null surface.\n         *\n         * @param format The new {@link PixelFormat} of the surface.\n         * @param width The new width of the surface.\n         * @param height The new height of the surface.\n         ",
    "links" : [ "#onSetSurface", "android.graphics.PixelFormat" ]
  }, {
    "name" : "public void onCurrentVideoBounds(@NonNull Rect bounds)",
    "returnType" : "void",
    "comment" : "\n         * Receives current video bounds.\n         *\n         * @param bounds the rectangle area for rendering the current video.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onCurrentChannelUri(@Nullable Uri channelUri)",
    "returnType" : "void",
    "comment" : "\n         * Receives current channel URI.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onTrackInfoList(@NonNull List<TvTrackInfo> tracks)",
    "returnType" : "void",
    "comment" : "\n         * Receives track list.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onCurrentTvInputId(@Nullable String inputId)",
    "returnType" : "void",
    "comment" : "\n         * Receives current TV input ID.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onSigningResult(@NonNull String signingId, @NonNull byte[] result)",
    "returnType" : "void",
    "comment" : "\n         * Receives signing result.\n         *\n         * @param signingId the ID to identify the request. It's the same as the corresponding ID in\n         *        {@link Session#requestSigning(String, String, String, byte[])}\n         * @param result the signed result.\n         *\n         * @see #requestSigning(String, String, String, byte[])\n         ",
    "links" : [ "#requestSigning(String" ]
  }, {
    "name" : "public void onError(@NonNull String errMsg, @NonNull Bundle params)",
    "returnType" : "void",
    "comment" : "\n         * Called when the application sends information of an error.\n         *\n         * @param errMsg the message of the error.\n         * @param params additional parameters of the error. For example, the signingId of {@link\n         *     TvAdView.TvAdCallback#onRequestSigning(String, String, String, String, byte[])}\n         *     can be included to identify the related signing request, and the method name\n         *     \"onRequestSigning\" can also be added to the params.\n         *\n         * @see TvAdView#ERROR_KEY_METHOD_NAME\n         ",
    "links" : [ "TvAdView.TvAdCallback#onRequestSigning(String" ]
  }, {
    "name" : "public void onTvMessage(@TvInputManager.TvMessageType int type, @NonNull Bundle data)",
    "returnType" : "void",
    "comment" : "\n         * Called when a TV message is received\n         *\n         * @param type The type of message received, such as\n         * {@link TvInputManager#TV_MESSAGE_TYPE_WATERMARK}\n         * @param data The raw data of the message. The bundle keys are:\n         *             {@link TvInputManager#TV_MESSAGE_KEY_STREAM_ID},\n         *             {@link TvInputManager#TV_MESSAGE_KEY_GROUP_ID},\n         *             {@link TvInputManager#TV_MESSAGE_KEY_SUBTYPE},\n         *             {@link TvInputManager#TV_MESSAGE_KEY_RAW_DATA}.\n         *             See {@link TvInputManager#TV_MESSAGE_KEY_SUBTYPE} for more information on\n         *             how to parse this data.\n         ",
    "links" : [ "android.media.tv.TvInputManager#TV_MESSAGE_KEY_GROUP_ID", "android.media.tv.TvInputManager#TV_MESSAGE_KEY_STREAM_ID", "android.media.tv.TvInputManager#TV_MESSAGE_TYPE_WATERMARK", "android.media.tv.TvInputManager#TV_MESSAGE_KEY_SUBTYPE", "android.media.tv.TvInputManager#TV_MESSAGE_KEY_RAW_DATA" ]
  }, {
    "name" : "public void onTvInputSessionData(@NonNull @TvInputManager.SessionDataType String type, @NonNull Bundle data)",
    "returnType" : "void",
    "comment" : "\n         * Called when data from the linked {@link android.media.tv.TvInputService} is received.\n         *\n         * @param type the type of the data\n         * @param data a bundle contains the data received\n         * @see android.media.tv.TvInputService.Session#sendTvInputSessionData(String, Bundle)\n         * @see android.media.tv.ad.TvAdView#setTvView(TvView)\n         ",
    "links" : [ "android.media.tv.TvInputService" ]
  }, {
    "name" : "public void onMediaViewSizeChanged(@Px int width, @Px int height)",
    "returnType" : "void",
    "comment" : "\n         * Called when the size of the media view is changed by the application.\n         *\n         * <p>This is always called at least once when the session is created regardless of whether\n         * the media view is enabled or not. The media view container size is the same as the\n         * containing {@link TvAdView}. Note that the size of the underlying surface can\n         * be different if the surface was changed by calling {@link #layoutSurface}.\n         *\n         * @param width The width of the media view, in pixels.\n         * @param height The height of the media view, in pixels.\n         ",
    "links" : [ "android.media.tv.ad.TvAdView", "#layoutSurface" ]
  }, {
    "name" : "public View onCreateMediaView()",
    "returnType" : "View",
    "comment" : "\n         * Called when the application requests to create a media view. Each session\n         * implementation can override this method and return its own view.\n         *\n         * @return a view attached to the media window. {@code null} if no media view is created.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void sendTvAdSessionData(@NonNull @TvAdManager.SessionDataType String type, @NonNull Bundle data)",
    "returnType" : "void",
    "comment" : "\n         * Sends data related to this session to corresponding linked\n         * {@link android.media.tv.TvInputService} object via TvView.\n         *\n         * @param type data type\n         * @param data the related data values\n         * @see TvAdView#setTvView(TvView)\n         ",
    "links" : [ "android.media.tv.TvInputService" ]
  }, {
    "name" : "public void notifySessionStateChanged(@TvAdManager.SessionState int state, @TvAdManager.ErrorCode int err)",
    "returnType" : "void",
    "comment" : "\n         * Notifies when the session state is changed.\n         *\n         * @param state the current session state.\n         * @param err the error code for error state. {@link TvAdManager#ERROR_NONE} is\n         *            used when the state is not {@link TvAdManager#SESSION_STATE_ERROR}.\n         ",
    "links" : [ "android.media.tv.ad.TvAdManager#ERROR_NONE", "android.media.tv.ad.TvAdManager#SESSION_STATE_ERROR" ]
  }, {
    "name" : " int dispatchInputEvent(InputEvent event, InputEventReceiver receiver)",
    "returnType" : "int",
    "comment" : "\n         * Takes care of dispatching incoming input events and tells whether the event was handled.\n         ",
    "links" : [ ]
  }, {
    "name" : "private void initialize(ITvAdSessionCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void setSurface(Surface surface)",
    "returnType" : "void",
    "comment" : "\n         * Calls {@link #onSetSurface}.\n         ",
    "links" : [ "#onSetSurface" ]
  }, {
    "name" : " void dispatchSurfaceChanged(int format, int width, int height)",
    "returnType" : "void",
    "comment" : "\n         * Calls {@link #onSurfaceChanged}.\n         ",
    "links" : [ "#onSurfaceChanged" ]
  }, {
    "name" : " void sendCurrentVideoBounds(@NonNull Rect bounds)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void sendCurrentChannelUri(@Nullable Uri channelUri)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void sendTrackInfoList(@NonNull List<TvTrackInfo> tracks)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void sendCurrentTvInputId(@Nullable String inputId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void sendSigningResult(String signingId, byte[] result)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void notifyError(String errMsg, Bundle params)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void notifyTvMessage(int type, Bundle data)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void notifyTvInputSessionData(String type, Bundle data)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void executeOrPostRunnableOnMainThread(Runnable action)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void createMediaView(IBinder windowToken, Rect frame)",
    "returnType" : "void",
    "comment" : "\n         * Creates a media view. This calls {@link #onCreateMediaView} to get a view to attach\n         * to the media window.\n         *\n         * @param windowToken A window token of the application.\n         * @param frame A position of the media view.\n         ",
    "links" : [ "#onCreateMediaView" ]
  }, {
    "name" : " void relayoutMediaView(Rect frame)",
    "returnType" : "void",
    "comment" : "\n         * Relayouts the current media view.\n         *\n         * @param frame A new position of the media view.\n         ",
    "links" : [ ]
  }, {
    "name" : " void removeMediaView(boolean clearWindowToken)",
    "returnType" : "void",
    "comment" : "\n         * Removes the current media view.\n         ",
    "links" : [ ]
  }, {
    "name" : " void scheduleMediaViewCleanup()",
    "returnType" : "void",
    "comment" : "\n         * Schedules a task which checks whether the media view is detached and kills the process\n         * if it is not. Note that this method is expected to be called in a non-main thread.\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setMediaViewEnabled(final boolean enable)", "public boolean isMediaViewEnabled()", "public abstract void onRelease()", " void release()", "public void onStartAdService()", "public void onStopAdService()", "public void onResetAdService()", " void startAdService()", " void stopAdService()", " void resetAdService()", "public void requestCurrentVideoBounds()", "public void requestCurrentChannelUri()", "public void requestTrackInfoList()", "public void requestCurrentTvInputId()", "public void requestSigning(@NonNull String signingId, @NonNull String algorithm, @NonNull String alias, @NonNull byte[] data)", "public boolean onKeyDown(int keyCode, @Nullable KeyEvent event)", "public boolean onKeyLongPress(int keyCode, @Nullable KeyEvent event)", "public boolean onKeyMultiple(int keyCode, int count, @Nullable KeyEvent event)", "public boolean onKeyUp(int keyCode, @Nullable KeyEvent event)", "public boolean onTouchEvent(@NonNull MotionEvent event)", "public boolean onTrackballEvent(@NonNull MotionEvent event)", "public boolean onGenericMotionEvent(@NonNull MotionEvent event)", "public void layoutSurface(final int left, final int top, final int right, final int bottom)", "public abstract boolean onSetSurface(@Nullable Surface surface)", "public void onSurfaceChanged(@PixelFormat.Format int format, int width, int height)", "public void onCurrentVideoBounds(@NonNull Rect bounds)", "public void onCurrentChannelUri(@Nullable Uri channelUri)", "public void onTrackInfoList(@NonNull List<TvTrackInfo> tracks)", "public void onCurrentTvInputId(@Nullable String inputId)", "public void onSigningResult(@NonNull String signingId, @NonNull byte[] result)", "public void onError(@NonNull String errMsg, @NonNull Bundle params)", "public void onTvMessage(@TvInputManager.TvMessageType int type, @NonNull Bundle data)", "public void onTvInputSessionData(@NonNull @TvInputManager.SessionDataType String type, @NonNull Bundle data)", "public void onMediaViewSizeChanged(@Px int width, @Px int height)", "public View onCreateMediaView()", "public void sendTvAdSessionData(@NonNull @TvAdManager.SessionDataType String type, @NonNull Bundle data)", "public void notifySessionStateChanged(@TvAdManager.SessionState int state, @TvAdManager.ErrorCode int err)", " int dispatchInputEvent(InputEvent event, InputEventReceiver receiver)", "private void initialize(ITvAdSessionCallback callback)", " void setSurface(Surface surface)", " void dispatchSurfaceChanged(int format, int width, int height)", " void sendCurrentVideoBounds(@NonNull Rect bounds)", " void sendCurrentChannelUri(@Nullable Uri channelUri)", " void sendTrackInfoList(@NonNull List<TvTrackInfo> tracks)", " void sendCurrentTvInputId(@Nullable String inputId)", " void sendSigningResult(String signingId, byte[] result)", " void notifyError(String errMsg, Bundle params)", " void notifyTvMessage(int type, Bundle data)", " void notifyTvInputSessionData(String type, Bundle data)", "private void executeOrPostRunnableOnMainThread(Runnable action)", " void createMediaView(IBinder windowToken, Rect frame)", " void relayoutMediaView(Rect frame)", " void removeMediaView(boolean clearWindowToken)", " void scheduleMediaViewCleanup()" ],
  "variableNames" : [ "mDispatcherState", "mLock", "mSessionCallback", "mPendingActions", "mContext", "mHandler", "mWindowManager", "mWindowParams", "mSurface", "mMediaViewContainer", "mMediaView", "mMediaViewCleanUpTask", "mMediaViewEnabled", "mWindowToken", "mMediaFrame" ]
}