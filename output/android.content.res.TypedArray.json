{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/content/res/TypedArray.java",
  "packageName" : "android.content.res",
  "className" : "TypedArray",
  "comment" : "\n * Container for an array of values that were retrieved with\n * {@link Resources.Theme#obtainStyledAttributes(AttributeSet, int[], int, int)}\n * or {@link Resources#obtainAttributes}.  Be\n * sure to call {@link #recycle} when done with them.\n *\n * The indices used to retrieve values from this structure correspond to\n * the positions of the attributes given to obtainStyledAttributes.\n ",
  "links" : [ "#recycle", "Resources.Theme#obtainStyledAttributes(AttributeSet", "android.content.res.Resources#obtainAttributes" ],
  "variables" : [ {
    "name" : "STYLE_NUM_ENTRIES",
    "type" : "int",
    "comment" : " Keep this in sync with libs/androidfw/include/androidfw/AttributeResolution.h",
    "links" : [ ]
  }, {
    "name" : "STYLE_TYPE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STYLE_DATA",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STYLE_ASSET_COOKIE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STYLE_RESOURCE_ID",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STYLE_CHANGING_CONFIGURATIONS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STYLE_DENSITY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STYLE_SOURCE_RESOURCE_ID",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mResources",
    "type" : "Resources",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMetrics",
    "type" : "DisplayMetrics",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAssets",
    "type" : "AssetManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRecycled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mXml",
    "type" : "XmlBlock.Parser",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTheme",
    "type" : "Resources.Theme",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mData",
    "type" : "int[]",
    "comment" : "\n     * mData is used to hold the value/id and other metadata about each attribute.\n     *\n     * [type, data, asset cookie, resource id, changing configuration, density]\n     *\n     * type - type of this attribute, see TypedValue#TYPE_*\n     *\n     * data - can be used in various ways:\n     *     a) actual value of the attribute if type is between #TYPE_FIRST_INT and #TYPE_LAST_INT\n     *        1) color represented by an integer (#TYPE_INT_COLOR_*)\n     *        2) boolean represented by an integer (#TYPE_INT_BOOLEAN)\n     *        3) integer number (#TYPE_TYPE_INT_DEC or #TYPE_INT_HEX)\n     *        4) float number where integer gets interpreted as float (#TYPE_FLOAT, #TYPE_FRACTION\n     *            and #TYPE_DIMENSION)\n     *     b) index into string block inside AssetManager (#TYPE_STRING)\n     *     c) attribute resource id in the current theme/style (#TYPE_ATTRIBUTE)\n     *\n     * asset cookie - used in two ways:\n     *     a) for strings, drawables, and fonts it specifies the set of apk assets to look at\n     *     (multi-apk case)\n     *     b) cookie + asset as a unique identifier for drawable caches\n     *\n     * resource id - id that was finally used to resolve this attribute\n     *\n     * changing configuration - a mask of the configuration parameters for which the values in this\n     * attribute may change\n     *\n     * density - density of drawable pointed to by this attribute\n     ",
    "links" : [ ]
  }, {
    "name" : "mDataAddress",
    "type" : "long",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : "mIndices",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIndicesAddress",
    "type" : "long",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : "mLength",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mValue",
    "type" : "TypedValue",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " static TypedArray obtain(Resources res, int len)",
    "returnType" : "TypedArray",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void resize(int len)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int length()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of values in this array.\n     *\n     * @throws RuntimeException if the TypedArray has already been recycled.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getIndexCount()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of indices in the array that actually have data. Attributes with a value\n     * of @empty are included, as this is an explicit indicator.\n     *\n     * @throws RuntimeException if the TypedArray has already been recycled.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getIndex(int at)",
    "returnType" : "int",
    "comment" : "\n     * Returns an index in the array that has data. Attributes with a value of @empty are included,\n     * as this is an explicit indicator.\n     *\n     * @param at The index you would like to returned, ranging from 0 to\n     *           {@link #getIndexCount()}.\n     *\n     * @return The index at the given offset, which can be used with\n     *         {@link #getValue} and related APIs.\n     * @throws RuntimeException if the TypedArray has already been recycled.\n     ",
    "links" : [ "#getIndexCount()", "#getValue" ]
  }, {
    "name" : "public Resources getResources()",
    "returnType" : "Resources",
    "comment" : "\n     * Returns the Resources object this array was loaded from.\n     *\n     * @throws RuntimeException if the TypedArray has already been recycled.\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getText(@StyleableRes int index)",
    "returnType" : "CharSequence",
    "comment" : "\n     * Retrieves the styled string value for the attribute at <var>index</var>.\n     * <p>\n     * If the attribute is not a string, this method will attempt to coerce\n     * it to a string.\n     *\n     * @param index Index of attribute to retrieve.\n     *\n     * @return CharSequence holding string data. May be styled. Returns\n     *         {@code null} if the attribute is not defined or could not be\n     *         coerced to a string.\n     * @throws RuntimeException if the TypedArray has already been recycled.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getString(@StyleableRes int index)",
    "returnType" : "String",
    "comment" : "\n     * Retrieves the string value for the attribute at <var>index</var>.\n     * <p>\n     * If the attribute is not a string, this method will attempt to coerce\n     * it to a string.\n     *\n     * @param index Index of attribute to retrieve.\n     *\n     * @return String holding string data. Any styling information is removed.\n     *         Returns {@code null} if the attribute is not defined or could\n     *         not be coerced to a string.\n     * @throws RuntimeException if the TypedArray has already been recycled.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getNonResourceString(@StyleableRes int index)",
    "returnType" : "String",
    "comment" : "\n     * Retrieves the string value for the attribute at <var>index</var>, but\n     * only if that string comes from an immediate value in an XML file.  That\n     * is, this does not allow references to string resources, string\n     * attributes, or conversions from other types.  As such, this method\n     * will only return strings for TypedArray objects that come from\n     * attributes in an XML file.\n     *\n     * @param index Index of attribute to retrieve.\n     *\n     * @return String holding string data. Any styling information is removed.\n     *         Returns {@code null} if the attribute is not defined or is not\n     *         an immediate string value.\n     * @throws RuntimeException if the TypedArray has already been recycled.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getNonConfigurationString(@StyleableRes int index, @Config int allowedChangingConfigs)",
    "returnType" : "String",
    "comment" : "\n     * Retrieves the string value for the attribute at <var>index</var> that is\n     * not allowed to change with the given configurations.\n     *\n     * @param index Index of attribute to retrieve.\n     * @param allowedChangingConfigs Bit mask of configurations from\n     *        {@link Configuration}.NATIVE_CONFIG_* that are allowed to change.\n     *\n     * @return String holding string data. Any styling information is removed.\n     *         Returns {@code null} if the attribute is not defined.\n     * @throws RuntimeException if the TypedArray has already been recycled.\n     * @hide\n     ",
    "links" : [ "android.content.res.Configuration" ]
  }, {
    "name" : "public boolean getBoolean(@StyleableRes int index, boolean defValue)",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieve the boolean value for the attribute at <var>index</var>.\n     * <p>\n     * If the attribute is an integer value, this method returns false if the\n     * attribute is equal to zero, and true otherwise.\n     * If the attribute is not a boolean or integer value,\n     * this method will attempt to coerce it to an integer using\n     * {@link Integer#decode(String)} and return whether it is equal to zero.\n     *\n     * @param index Index of attribute to retrieve.\n     * @param defValue Value to return if the attribute is not defined or\n     *                 cannot be coerced to an integer.\n     *\n     * @return Boolean value of the attribute, or defValue if the attribute was\n     *         not defined or could not be coerced to an integer.\n     * @throws RuntimeException if the TypedArray has already been recycled.\n     ",
    "links" : [ "#decode(String)" ]
  }, {
    "name" : "public int getInt(@StyleableRes int index, int defValue)",
    "returnType" : "int",
    "comment" : "\n     * Retrieve the integer value for the attribute at <var>index</var>.\n     * <p>\n     * If the attribute is not an integer, this method will attempt to coerce\n     * it to an integer using {@link Integer#decode(String)}.\n     *\n     * @param index Index of attribute to retrieve.\n     * @param defValue Value to return if the attribute is not defined or\n     *                 cannot be coerced to an integer.\n     *\n     * @return Integer value of the attribute, or defValue if the attribute was\n     *         not defined or could not be coerced to an integer.\n     * @throws RuntimeException if the TypedArray has already been recycled.\n     ",
    "links" : [ "#decode(String)" ]
  }, {
    "name" : "public float getFloat(@StyleableRes int index, float defValue)",
    "returnType" : "float",
    "comment" : "\n     * Retrieve the float value for the attribute at <var>index</var>.\n     * <p>\n     * If the attribute is not a float or an integer, this method will attempt\n     * to coerce it to a float using {@link Float#parseFloat(String)}.\n     *\n     * @param index Index of attribute to retrieve.\n     *\n     * @return Attribute float value, or defValue if the attribute was\n     *         not defined or could not be coerced to a float.\n     * @throws RuntimeException if the TypedArray has already been recycled.\n     ",
    "links" : [ "#parseFloat(String)" ]
  }, {
    "name" : "public int getColor(@StyleableRes int index, @ColorInt int defValue)",
    "returnType" : "int",
    "comment" : "\n     * Retrieve the color value for the attribute at <var>index</var>.  If\n     * the attribute references a color resource holding a complex\n     * {@link android.content.res.ColorStateList}, then the default color from\n     * the set is returned.\n     * <p>\n     * This method will throw an exception if the attribute is defined but is\n     * not an integer color or color state list.\n     *\n     * @param index Index of attribute to retrieve.\n     * @param defValue Value to return if the attribute is not defined or\n     *                 not a resource.\n     *\n     * @return Attribute color value, or defValue if not defined.\n     * @throws RuntimeException if the TypedArray has already been recycled.\n     * @throws UnsupportedOperationException if the attribute is defined but is\n     *         not an integer color or color state list.\n     ",
    "links" : [ "android.content.res.ColorStateList" ]
  }, {
    "name" : "public ComplexColor getComplexColor(@StyleableRes int index)",
    "returnType" : "ComplexColor",
    "comment" : "\n     * Retrieve the ComplexColor for the attribute at <var>index</var>.\n     * The value may be either a {@link android.content.res.ColorStateList} which can wrap a simple\n     * color value or a {@link android.content.res.GradientColor}\n     * <p>\n     * This method will return {@code null} if the attribute is not defined or\n     * is not an integer color, color state list or GradientColor.\n     *\n     * @param index Index of attribute to retrieve.\n     *\n     * @return ComplexColor for the attribute, or {@code null} if not defined.\n     * @throws RuntimeException if the attribute if the TypedArray has already\n     *         been recycled.\n     * @throws UnsupportedOperationException if the attribute is defined but is\n     *         not an integer color, color state list or GradientColor.\n     * @hide\n     ",
    "links" : [ "android.content.res.ColorStateList", "android.content.res.GradientColor" ]
  }, {
    "name" : "public ColorStateList getColorStateList(@StyleableRes int index)",
    "returnType" : "ColorStateList",
    "comment" : "\n     * Retrieve the ColorStateList for the attribute at <var>index</var>.\n     * The value may be either a single solid color or a reference to\n     * a color or complex {@link android.content.res.ColorStateList}\n     * description.\n     * <p>\n     * This method will return {@code null} if the attribute is not defined or\n     * is not an integer color or color state list.\n     *\n     * @param index Index of attribute to retrieve.\n     *\n     * @return ColorStateList for the attribute, or {@code null} if not\n     *         defined.\n     * @throws RuntimeException if the attribute if the TypedArray has already\n     *         been recycled.\n     * @throws UnsupportedOperationException if the attribute is defined but is\n     *         not an integer color or color state list.\n     ",
    "links" : [ "android.content.res.ColorStateList" ]
  }, {
    "name" : "public int getInteger(@StyleableRes int index, int defValue)",
    "returnType" : "int",
    "comment" : "\n     * Retrieve the integer value for the attribute at <var>index</var>.\n     * <p>\n     * Unlike {@link #getInt(int, int)}, this method will throw an exception if\n     * the attribute is defined but is not an integer.\n     *\n     * @param index Index of attribute to retrieve.\n     * @param defValue Value to return if the attribute is not defined or\n     *                 not a resource.\n     *\n     * @return Attribute integer value, or defValue if not defined.\n     * @throws RuntimeException if the TypedArray has already been recycled.\n     * @throws UnsupportedOperationException if the attribute is defined but is\n     *         not an integer.\n     ",
    "links" : [ "#getInt(int" ]
  }, {
    "name" : "public float getDimension(@StyleableRes int index, float defValue)",
    "returnType" : "float",
    "comment" : "\n     * Retrieve a dimensional unit attribute at <var>index</var>. Unit\n     * conversions are based on the current {@link DisplayMetrics}\n     * associated with the resources this {@link TypedArray} object\n     * came from.\n     * <p>\n     * This method will throw an exception if the attribute is defined but is\n     * not a dimension.\n     *\n     * @param index Index of attribute to retrieve.\n     * @param defValue Value to return if the attribute is not defined or\n     *                 not a resource.\n     *\n     * @return Attribute dimension value multiplied by the appropriate\n     *         metric, or defValue if not defined.\n     * @throws RuntimeException if the TypedArray has already been recycled.\n     * @throws UnsupportedOperationException if the attribute is defined but is\n     *         not an integer.\n     *\n     * @see #getDimensionPixelOffset\n     * @see #getDimensionPixelSize\n     ",
    "links" : [ "android.util.DisplayMetrics", "android.content.res.TypedArray" ]
  }, {
    "name" : "public int getDimensionPixelOffset(@StyleableRes int index, int defValue)",
    "returnType" : "int",
    "comment" : "\n     * Retrieve a dimensional unit attribute at <var>index</var> for use\n     * as an offset in raw pixels.  This is the same as\n     * {@link #getDimension}, except the returned value is converted to\n     * integer pixels for you.  An offset conversion involves simply\n     * truncating the base value to an integer.\n     * <p>\n     * This method will throw an exception if the attribute is defined but is\n     * not a dimension.\n     *\n     * @param index Index of attribute to retrieve.\n     * @param defValue Value to return if the attribute is not defined or\n     *                 not a resource.\n     *\n     * @return Attribute dimension value multiplied by the appropriate\n     *         metric and truncated to integer pixels, or defValue if not defined.\n     * @throws RuntimeException if the TypedArray has already been recycled.\n     * @throws UnsupportedOperationException if the attribute is defined but is\n     *         not an integer.\n     *\n     * @see #getDimension\n     * @see #getDimensionPixelSize\n     ",
    "links" : [ "#getDimension" ]
  }, {
    "name" : "public int getDimensionPixelSize(@StyleableRes int index, int defValue)",
    "returnType" : "int",
    "comment" : "\n     * Retrieve a dimensional unit attribute at <var>index</var> for use\n     * as a size in raw pixels.  This is the same as\n     * {@link #getDimension}, except the returned value is converted to\n     * integer pixels for use as a size.  A size conversion involves\n     * rounding the base value, and ensuring that a non-zero base value\n     * is at least one pixel in size.\n     * <p>\n     * This method will throw an exception if the attribute is defined but is\n     * not a dimension.\n     *\n     * @param index Index of attribute to retrieve.\n     * @param defValue Value to return if the attribute is not defined or\n     *                 not a resource.\n     *\n     * @return Attribute dimension value multiplied by the appropriate\n     *         metric and truncated to integer pixels, or defValue if not defined.\n     * @throws RuntimeException if the TypedArray has already been recycled.\n     * @throws UnsupportedOperationException if the attribute is defined but is\n     *         not a dimension.\n     *\n     * @see #getDimension\n     * @see #getDimensionPixelOffset\n     ",
    "links" : [ "#getDimension" ]
  }, {
    "name" : "public int getLayoutDimension(@StyleableRes int index, String name)",
    "returnType" : "int",
    "comment" : "\n     * Special version of {@link #getDimensionPixelSize} for retrieving\n     * {@link android.view.ViewGroup}'s layout_width and layout_height\n     * attributes.  This is only here for performance reasons; applications\n     * should use {@link #getDimensionPixelSize}.\n     * <p>\n     * This method will throw an exception if the attribute is defined but is\n     * not a dimension or integer (enum).\n     *\n     * @param index Index of the attribute to retrieve.\n     * @param name Textual name of attribute for error reporting.\n     *\n     * @return Attribute dimension value multiplied by the appropriate\n     *         metric and truncated to integer pixels.\n     * @throws RuntimeException if the TypedArray has already been recycled.\n     * @throws UnsupportedOperationException if the attribute is defined but is\n     *         not a dimension or integer (enum).\n     ",
    "links" : [ "#getDimensionPixelSize", "android.view.ViewGroup" ]
  }, {
    "name" : "public int getLayoutDimension(@StyleableRes int index, int defValue)",
    "returnType" : "int",
    "comment" : "\n     * Special version of {@link #getDimensionPixelSize} for retrieving\n     * {@link android.view.ViewGroup}'s layout_width and layout_height\n     * attributes.  This is only here for performance reasons; applications\n     * should use {@link #getDimensionPixelSize}.\n     *\n     * @param index Index of the attribute to retrieve.\n     * @param defValue The default value to return if this attribute is not\n     *                 default or contains the wrong type of data.\n     *\n     * @return Attribute dimension value multiplied by the appropriate\n     *         metric and truncated to integer pixels.\n     * @throws RuntimeException if the TypedArray has already been recycled.\n     ",
    "links" : [ "#getDimensionPixelSize", "android.view.ViewGroup" ]
  }, {
    "name" : "public float getFraction(@StyleableRes int index, int base, int pbase, float defValue)",
    "returnType" : "float",
    "comment" : "\n     * Retrieves a fractional unit attribute at <var>index</var>.\n     *\n     * @param index Index of attribute to retrieve.\n     * @param base The base value of this fraction.  In other words, a\n     *             standard fraction is multiplied by this value.\n     * @param pbase The parent base value of this fraction.  In other\n     *             words, a parent fraction (nn%p) is multiplied by this\n     *             value.\n     * @param defValue Value to return if the attribute is not defined or\n     *                 not a resource.\n     *\n     * @return Attribute fractional value multiplied by the appropriate\n     *         base value, or defValue if not defined.\n     * @throws RuntimeException if the TypedArray has already been recycled.\n     * @throws UnsupportedOperationException if the attribute is defined but is\n     *         not a fraction.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getResourceId(@StyleableRes int index, int defValue)",
    "returnType" : "int",
    "comment" : "\n     * Retrieves the resource identifier for the attribute at\n     * <var>index</var>.  Note that attribute resource as resolved when\n     * the overall {@link TypedArray} object is retrieved.  As a\n     * result, this function will return the resource identifier of the\n     * final resource value that was found, <em>not</em> necessarily the\n     * original resource that was specified by the attribute.\n     *\n     * @param index Index of attribute to retrieve.\n     * @param defValue Value to return if the attribute is not defined or\n     *                 not a resource.\n     *\n     * @return Attribute resource identifier, or defValue if not defined.\n     * @throws RuntimeException if the TypedArray has already been recycled.\n     ",
    "links" : [ "android.content.res.TypedArray" ]
  }, {
    "name" : "public int getThemeAttributeId(@StyleableRes int index, int defValue)",
    "returnType" : "int",
    "comment" : "\n     * Retrieves the theme attribute resource identifier for the attribute at\n     * <var>index</var>.\n     *\n     * @param index Index of attribute to retrieve.\n     * @param defValue Value to return if the attribute is not defined or not a\n     *                 resource.\n     *\n     * @return Theme attribute resource identifier, or defValue if not defined.\n     * @throws RuntimeException if the TypedArray has already been recycled.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Drawable getDrawable(@StyleableRes int index)",
    "returnType" : "Drawable",
    "comment" : "\n     * Retrieve the Drawable for the attribute at <var>index</var>.\n     * <p>\n     * This method will throw an exception if the attribute is defined but is\n     * not a color or drawable resource.\n     *\n     * @param index Index of attribute to retrieve.\n     *\n     * @return Drawable for the attribute, or {@code null} if not defined.\n     * @throws RuntimeException if the TypedArray has already been recycled.\n     * @throws UnsupportedOperationException if the attribute is defined but is\n     *         not a color or drawable resource.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Drawable getDrawableForDensity(@StyleableRes int index, int density)",
    "returnType" : "Drawable",
    "comment" : "\n     * Version of {@link #getDrawable(int)} that accepts an override density.\n     * @hide\n     ",
    "links" : [ "#getDrawable(int)" ]
  }, {
    "name" : "public Typeface getFont(@StyleableRes int index)",
    "returnType" : "Typeface",
    "comment" : "\n     * Retrieve the Typeface for the attribute at <var>index</var>.\n     * <p>\n     * This method will throw an exception if the attribute is defined but is\n     * not a font.\n     *\n     * @param index Index of attribute to retrieve.\n     *\n     * @return Typeface for the attribute, or {@code null} if not defined.\n     * @throws RuntimeException if the TypedArray has already been recycled.\n     * @throws UnsupportedOperationException if the attribute is defined but is\n     *         not a font resource.\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence[] getTextArray(@StyleableRes int index)",
    "returnType" : "CharSequence[]",
    "comment" : "\n     * Retrieve the CharSequence[] for the attribute at <var>index</var>.\n     * This gets the resource ID of the selected attribute, and uses\n     * {@link Resources#getTextArray Resources.getTextArray} of the owning\n     * Resources object to retrieve its String[].\n     * <p>\n     * This method will throw an exception if the attribute is defined but is\n     * not a text array resource.\n     *\n     * @param index Index of attribute to retrieve.\n     *\n     * @return CharSequence[] for the attribute, or {@code null} if not\n     *         defined.\n     * @throws RuntimeException if the TypedArray has already been recycled.\n     ",
    "links" : [ "android.content.res.Resources#getTextArray" ]
  }, {
    "name" : "public boolean getValue(@StyleableRes int index, TypedValue outValue)",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieve the raw TypedValue for the attribute at <var>index</var>.\n     *\n     * @param index Index of attribute to retrieve.\n     * @param outValue TypedValue object in which to place the attribute's\n     *                 data.\n     *\n     * @return {@code true} if the value was retrieved and not @empty, {@code false} otherwise.\n     * @throws RuntimeException if the TypedArray has already been recycled.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getType(@StyleableRes int index)",
    "returnType" : "int",
    "comment" : "\n     * Returns the type of attribute at the specified index.\n     *\n     * @param index Index of attribute whose type to retrieve.\n     *\n     * @return Attribute type.\n     * @throws RuntimeException if the TypedArray has already been recycled.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getSourceResourceId(@StyleableRes int index, @AnyRes int defaultValue)",
    "returnType" : "int",
    "comment" : "\n     * Returns the resource ID of the style or layout against which the specified attribute was\n     * resolved, otherwise returns defValue.\n     *\n     * For example, if you we resolving two attributes {@code android:attribute1} and\n     * {@code android:attribute2} and you were inflating a {@link android.view.View} from\n     * {@code layout/my_layout.xml}:\n     * <pre>\n     *     &lt;View\n     *         style=\"@style/viewStyle\"\n     *         android:layout_width=\"wrap_content\"\n     *         android:layout_height=\"wrap_content\"\n     *         android:attribute1=\"foo\"/&gt;\n     * </pre>\n     *\n     * and {@code @style/viewStyle} is:\n     * <pre>\n     *     &lt;style android:name=\"viewStyle\"&gt;\n     *         &lt;item name=\"android:attribute2\"&gt;bar&lt;item/&gt;\n     *     &lt;style/&gt;\n     * </pre>\n     *\n     * then resolved {@link TypedArray} will have values that return source resource ID of\n     * {@code R.layout.my_layout} for {@code android:attribute1} and {@code R.style.viewStyle} for\n     * {@code android:attribute2}.\n     *\n     * @param index Index of attribute whose source style to retrieve.\n     * @param defaultValue Value to return if the attribute is not defined or\n     *                     not a resource.\n     *\n     * @return Either a style resource ID, layout resource ID, or defaultValue if it was not\n     * resolved in a style or layout.\n     * @throws RuntimeException if the TypedArray has already been recycled.\n     ",
    "links" : [ "android.view.View", "android.content.res.TypedArray" ]
  }, {
    "name" : "public boolean hasValue(@StyleableRes int index)",
    "returnType" : "boolean",
    "comment" : "\n     * Determines whether there is an attribute at <var>index</var>.\n     * <p>\n     * <strong>Note:</strong> If the attribute was set to {@code @empty} or\n     * {@code @undefined}, this method returns {@code false}.\n     *\n     * @param index Index of attribute to retrieve.\n     *\n     * @return True if the attribute has a value, false otherwise.\n     * @throws RuntimeException if the TypedArray has already been recycled.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasValueOrEmpty(@StyleableRes int index)",
    "returnType" : "boolean",
    "comment" : "\n     * Determines whether there is an attribute at <var>index</var>, returning\n     * {@code true} if the attribute was explicitly set to {@code @empty} and\n     * {@code false} only if the attribute was undefined.\n     *\n     * @param index Index of attribute to retrieve.\n     *\n     * @return True if the attribute has a value or is empty, false otherwise.\n     * @throws RuntimeException if the TypedArray has already been recycled.\n     ",
    "links" : [ ]
  }, {
    "name" : "public TypedValue peekValue(@StyleableRes int index)",
    "returnType" : "TypedValue",
    "comment" : "\n     * Retrieve the raw TypedValue for the attribute at <var>index</var>\n     * and return a temporary object holding its data.  This object is only\n     * valid until the next call on to {@link TypedArray}.\n     *\n     * @param index Index of attribute to retrieve.\n     *\n     * @return Returns a TypedValue object if the attribute is defined,\n     *         containing its data; otherwise returns null.  (You will not\n     *         receive a TypedValue whose type is TYPE_NULL.)\n     * @throws RuntimeException if the TypedArray has already been recycled.\n     ",
    "links" : [ "android.content.res.TypedArray" ]
  }, {
    "name" : "public String getPositionDescription()",
    "returnType" : "String",
    "comment" : "\n     * Returns a message about the parser state suitable for printing error messages.\n     *\n     * @return Human-readable description of current parser state.\n     * @throws RuntimeException if the TypedArray has already been recycled.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void recycle()",
    "returnType" : "void",
    "comment" : "\n     * Recycles the TypedArray, to be re-used by a later caller. After calling\n     * this function you must not ever touch the typed array again.\n     *\n     * @throws RuntimeException if the TypedArray has already been recycled.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "\n     * Recycles the TypedArray, to be re-used by a later caller. After calling\n     * this function you must not ever touch the typed array again.\n     *\n     * @see #recycle()\n     * @throws RuntimeException if the TypedArray has already been recycled.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int[] extractThemeAttrs()",
    "returnType" : "int[]",
    "comment" : "\n     * Extracts theme attributes from a typed array for later resolution using\n     * {@link android.content.res.Resources.Theme#resolveAttributes(int[], int[])}.\n     * Removes the entries from the typed array so that subsequent calls to typed\n     * getters will return the default value without crashing.\n     *\n     * @return an array of length {@link #getIndexCount()} populated with theme\n     *         attributes, or null if there are no theme attributes in the typed\n     *         array\n     * @throws RuntimeException if the TypedArray has already been recycled.\n     * @hide\n     ",
    "links" : [ "#getIndexCount()", "android.content.res.Resources.Theme#resolveAttributes(int" ]
  }, {
    "name" : "public int[] extractThemeAttrs(@Nullable int[] scrap)",
    "returnType" : "int[]",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getChangingConfigurations()",
    "returnType" : "int",
    "comment" : "\n     * Return a mask of the configuration parameters for which the values in\n     * this typed array may change.\n     *\n     * @return Returns a mask of the changing configuration parameters, as\n     *         defined by {@link android.content.pm.ActivityInfo}.\n     * @throws RuntimeException if the TypedArray has already been recycled.\n     * @see android.content.pm.ActivityInfo\n     ",
    "links" : [ "android.content.pm.ActivityInfo" ]
  }, {
    "name" : "private boolean getValueAt(int index, TypedValue outValue)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private CharSequence loadStringValueAt(int index)",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ " static TypedArray obtain(Resources res, int len)", "private void resize(int len)", "public int length()", "public int getIndexCount()", "public int getIndex(int at)", "public Resources getResources()", "public CharSequence getText(@StyleableRes int index)", "public String getString(@StyleableRes int index)", "public String getNonResourceString(@StyleableRes int index)", "public String getNonConfigurationString(@StyleableRes int index, @Config int allowedChangingConfigs)", "public boolean getBoolean(@StyleableRes int index, boolean defValue)", "public int getInt(@StyleableRes int index, int defValue)", "public float getFloat(@StyleableRes int index, float defValue)", "public int getColor(@StyleableRes int index, @ColorInt int defValue)", "public ComplexColor getComplexColor(@StyleableRes int index)", "public ColorStateList getColorStateList(@StyleableRes int index)", "public int getInteger(@StyleableRes int index, int defValue)", "public float getDimension(@StyleableRes int index, float defValue)", "public int getDimensionPixelOffset(@StyleableRes int index, int defValue)", "public int getDimensionPixelSize(@StyleableRes int index, int defValue)", "public int getLayoutDimension(@StyleableRes int index, String name)", "public int getLayoutDimension(@StyleableRes int index, int defValue)", "public float getFraction(@StyleableRes int index, int base, int pbase, float defValue)", "public int getResourceId(@StyleableRes int index, int defValue)", "public int getThemeAttributeId(@StyleableRes int index, int defValue)", "public Drawable getDrawable(@StyleableRes int index)", "public Drawable getDrawableForDensity(@StyleableRes int index, int density)", "public Typeface getFont(@StyleableRes int index)", "public CharSequence[] getTextArray(@StyleableRes int index)", "public boolean getValue(@StyleableRes int index, TypedValue outValue)", "public int getType(@StyleableRes int index)", "public int getSourceResourceId(@StyleableRes int index, @AnyRes int defaultValue)", "public boolean hasValue(@StyleableRes int index)", "public boolean hasValueOrEmpty(@StyleableRes int index)", "public TypedValue peekValue(@StyleableRes int index)", "public String getPositionDescription()", "public void recycle()", "public void close()", "public int[] extractThemeAttrs()", "public int[] extractThemeAttrs(@Nullable int[] scrap)", "public int getChangingConfigurations()", "private boolean getValueAt(int index, TypedValue outValue)", "private CharSequence loadStringValueAt(int index)", "public String toString()" ],
  "variableNames" : [ "STYLE_NUM_ENTRIES", "STYLE_TYPE", "STYLE_DATA", "STYLE_ASSET_COOKIE", "STYLE_RESOURCE_ID", "STYLE_CHANGING_CONFIGURATIONS", "STYLE_DENSITY", "STYLE_SOURCE_RESOURCE_ID", "mResources", "mMetrics", "mAssets", "mRecycled", "mXml", "mTheme", "mData", "mDataAddress", "mIndices", "mIndicesAddress", "mLength", "mValue" ]
}