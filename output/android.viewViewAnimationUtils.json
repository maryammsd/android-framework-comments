{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/view/ViewAnimationUtils.java",
  "packageName" : "android.view",
  "className" : "ViewAnimationUtils",
  "comment" : "\n * Defines common utilities for working with View's animations.\n *\n ",
  "variables" : [ ],
  "methods" : [ {
    "name" : "public static Animator createCircularReveal(View view, int centerX, int centerY, float startRadius, float endRadius)",
    "returnType" : "Animator",
    "comment" : "\n     * Returns an Animator which can animate a clipping circle.\n     * <p>\n     * Any shadow cast by the View will respect the circular clip from this animator.\n     * <p>\n     * Only a single non-rectangular clip can be applied on a View at any time.\n     * Views clipped by a circular reveal animation take priority over\n     * {@link View#setClipToOutline(boolean) View Outline clipping}.\n     * <p>\n     * Note that the animation returned here is a one-shot animation. It cannot\n     * be re-used, and once started it cannot be paused or resumed. It is also\n     * an asynchronous animation that automatically runs off of the UI thread.\n     * As a result {@link AnimatorListener#onAnimationEnd(Animator)}\n     * will occur after the animation has ended, but it may be delayed depending\n     * on thread responsiveness.\n     * <p>\n     * Note that if any start delay is set on the reveal animator, the start radius\n     * will not be applied to the reveal circle until the start delay has passed.\n     * If it's desired to set a start radius on the reveal circle during the start\n     * delay, one workaround could be adding an animator with the same start and\n     * end radius. For example:\n     * <pre><code>\n     * public static Animator createRevealWithDelay(View view, int centerX, int centerY, float startRadius, float endRadius) {\n     *     Animator delayAnimator = ViewAnimationUtils.createCircularReveal(view, centerX, centerY, startRadius, startRadius);\n     *     delayAnimator.setDuration(delayTimeMS);\n     *     Animator revealAnimator = ViewAnimationUtils.createCircularReveal(view, centerX, centerY, startRadius, endRadius);\n     *     AnimatorSet set = new AnimatorSet();\n     *     set.playSequentially(delayAnimator, revealAnimator);\n     *     return set;\n     * }\n     * </code></pre>\n     *\n     * @param view The View will be clipped to the animating circle.\n     * @param centerX The x coordinate of the center of the animating circle, relative to\n     *                <code>view</code>.\n     * @param centerY The y coordinate of the center of the animating circle, relative to\n     *                <code>view</code>.\n     * @param startRadius The starting radius of the animating circle.\n     * @param endRadius The ending radius of the animating circle.\n     ",
    "links" : [ "View#setClipToOutline", "AnimatorListener#onAnimationEnd" ]
  } ],
  "variableNames" : [ ],
  "methodNames" : [ "public static Animator createCircularReveal(View view, int centerX, int centerY, float startRadius, float endRadius)" ]
}