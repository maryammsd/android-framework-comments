{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/security/cert/CertStore.java",
  "packageName" : "java.security.cert",
  "className" : "CertStore",
  "comment" : "\n * A class for retrieving {@code Certificate}s and {@code CRL}s\n * from a repository.\n * <p>\n * This class uses a provider-based architecture.\n * To create a {@code CertStore}, call one of the static\n * {@code getInstance} methods, passing in the type of\n * {@code CertStore} desired, any applicable initialization parameters\n * and optionally the name of the provider desired.\n * <p>\n * Once the {@code CertStore} has been created, it can be used to\n * retrieve {@code Certificate}s and {@code CRL}s by calling its\n * {@link #getCertificates(CertSelector selector) getCertificates} and\n * {@link #getCRLs(CRLSelector selector) getCRLs} methods.\n * <p>\n * Unlike a {@link java.security.KeyStore KeyStore}, which provides access\n * to a cache of private keys and trusted certificates, a\n * {@code CertStore} is designed to provide access to a potentially\n * vast repository of untrusted certificates and CRLs. For example, an LDAP\n * implementation of {@code CertStore} provides access to certificates\n * and CRLs stored in one or more directories using the LDAP protocol and the\n * schema as defined in the RFC service attribute.\n *\n * <p> Every implementation of the Java platform is required to support the\n * following standard {@code CertStore} type:\n * <ul>\n * <li>{@code Collection}</li>\n * </ul>\n * This type is described in the <a href=\n * \"{@docRoot}/../specs/security/standard-names.html#certstore-types\">\n * CertStore section</a> of the\n * Java Security Standard Algorithm Names Specification.\n * Consult the release documentation for your implementation to see if any\n * other types are supported.\n *\n * <p>\n * <b>Concurrent Access</b>\n * <p>\n * All public methods of {@code CertStore} objects must be thread-safe.\n * That is, multiple threads may concurrently invoke these methods on a\n * single {@code CertStore} object (or more than one) with no\n * ill effects. This allows a {@code CertPathBuilder} to search for a\n * CRL while simultaneously searching for further certificates, for instance.\n * <p>\n * The static methods of this class are also guaranteed to be thread-safe.\n * Multiple threads may concurrently invoke the static methods defined in\n * this class with no ill effects.\n *\n * @since       1.4\n * @author      Sean Mullan, Steve Hanna\n ",
  "links" : [ "java.security.KeyStore", "#getCRLs(CRLSelector", "#getCertificates(CertSelector" ],
  "variables" : [ {
    "name" : "CERTSTORE_TYPE",
    "type" : "String",
    "comment" : "\n     * Constant to lookup in the Security properties file to determine\n     * the default certstore type. In the Security properties file, the\n     * default certstore type is given as:\n     * <pre>\n     * certstore.type=LDAP\n     * </pre>\n     ",
    "links" : [ ]
  }, {
    "name" : "storeSpi",
    "type" : "CertStoreSpi",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "provider",
    "type" : "Provider",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "type",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "params",
    "type" : "CertStoreParameters",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final Collection<? extends Certificate> getCertificates(CertSelector selector) throws CertStoreException",
    "returnType" : "Collection<? extends Certificate>",
    "comment" : "\n     * Returns a {@code Collection} of {@code Certificate}s that\n     * match the specified selector. If no {@code Certificate}s\n     * match the selector, an empty {@code Collection} will be returned.\n     * <p>\n     * For some {@code CertStore} types, the resulting\n     * {@code Collection} may not contain <b>all</b> of the\n     * {@code Certificate}s that match the selector. For instance,\n     * an LDAP {@code CertStore} may not search all entries in the\n     * directory. Instead, it may just search entries that are likely to\n     * contain the {@code Certificate}s it is looking for.\n     * <p>\n     * Some {@code CertStore} implementations (especially LDAP\n     * {@code CertStore}s) may throw a {@code CertStoreException}\n     * unless a non-null {@code CertSelector} is provided that\n     * includes specific criteria that can be used to find the certificates.\n     * Issuer and/or subject names are especially useful criteria.\n     *\n     * @param selector A {@code CertSelector} used to select which\n     *  {@code Certificate}s should be returned. Specify {@code null}\n     *  to return all {@code Certificate}s (if supported).\n     * @return A {@code Collection} of {@code Certificate}s that\n     *         match the specified selector (never {@code null})\n     * @throws CertStoreException if an exception occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "public final Collection<? extends CRL> getCRLs(CRLSelector selector) throws CertStoreException",
    "returnType" : "Collection<? extends CRL>",
    "comment" : "\n     * Returns a {@code Collection} of {@code CRL}s that\n     * match the specified selector. If no {@code CRL}s\n     * match the selector, an empty {@code Collection} will be returned.\n     * <p>\n     * For some {@code CertStore} types, the resulting\n     * {@code Collection} may not contain <b>all</b> of the\n     * {@code CRL}s that match the selector. For instance,\n     * an LDAP {@code CertStore} may not search all entries in the\n     * directory. Instead, it may just search entries that are likely to\n     * contain the {@code CRL}s it is looking for.\n     * <p>\n     * Some {@code CertStore} implementations (especially LDAP\n     * {@code CertStore}s) may throw a {@code CertStoreException}\n     * unless a non-null {@code CRLSelector} is provided that\n     * includes specific criteria that can be used to find the CRLs.\n     * Issuer names and/or the certificate to be checked are especially useful.\n     *\n     * @param selector A {@code CRLSelector} used to select which\n     *  {@code CRL}s should be returned. Specify {@code null}\n     *  to return all {@code CRL}s (if supported).\n     * @return A {@code Collection} of {@code CRL}s that\n     *         match the specified selector (never {@code null})\n     * @throws CertStoreException if an exception occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "public static CertStore getInstance(String type, CertStoreParameters params) throws InvalidAlgorithmParameterException, NoSuchAlgorithmException",
    "returnType" : "CertStore",
    "comment" : "\n     * Returns a {@code CertStore} object that implements the specified\n     * {@code CertStore} type and is initialized with the specified\n     * parameters.\n     *\n     * <p> This method traverses the list of registered security Providers,\n     * starting with the most preferred Provider.\n     * A new CertStore object encapsulating the\n     * CertStoreSpi implementation from the first\n     * Provider that supports the specified type is returned.\n     *\n     * <p> Note that the list of registered providers may be retrieved via\n     * the {@link Security#getProviders() Security.getProviders()} method.\n     *\n     * <p>The {@code CertStore} that is returned is initialized with the\n     * specified {@code CertStoreParameters}. The type of parameters\n     * needed may vary between different types of {@code CertStore}s.\n     * Note that the specified {@code CertStoreParameters} object is\n     * cloned.\n     *\n     * @implNote\n     * The JDK Reference Implementation additionally uses the\n     * {@code jdk.security.provider.preferred}\n     * {@link Security#getProperty(String) Security} property to determine\n     * the preferred provider order for the specified algorithm. This\n     * may be different than the order of providers returned by\n     * {@link Security#getProviders() Security.getProviders()}.\n     *\n     * @param type the name of the requested {@code CertStore} type.\n     * See the CertStore section in the <a href=\n     * \"{@docRoot}/../specs/security/standard-names.html#certstore-types\">\n     * Java Security Standard Algorithm Names Specification</a>\n     * for information about standard types.\n     *\n     * @param params the initialization parameters (may be {@code null}).\n     *\n     * @return a {@code CertStore} object that implements the specified\n     *          {@code CertStore} type\n     *\n     * @throws InvalidAlgorithmParameterException if the specified\n     *         initialization parameters are inappropriate for this\n     *         {@code CertStore}\n     *\n     * @throws NoSuchAlgorithmException if no {@code Provider} supports a\n     *         {@code CertStoreSpi} implementation for the specified type\n     *\n     * @throws NullPointerException if {@code type} is {@code null}\n     *\n     * @see java.security.Provider\n     ",
    "links" : [ "java.security.Security#getProperty(String)", "java.security.Security#getProviders()" ]
  }, {
    "name" : "private static CertStore handleException(NoSuchAlgorithmException e) throws NoSuchAlgorithmException, InvalidAlgorithmParameterException",
    "returnType" : "CertStore",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static CertStore getInstance(String type, CertStoreParameters params, String provider) throws InvalidAlgorithmParameterException, NoSuchAlgorithmException, NoSuchProviderException",
    "returnType" : "CertStore",
    "comment" : "\n     * Returns a {@code CertStore} object that implements the specified\n     * {@code CertStore} type.\n     *\n     * <p> A new CertStore object encapsulating the\n     * CertStoreSpi implementation from the specified provider\n     * is returned.  The specified provider must be registered\n     * in the security provider list.\n     *\n     * <p> Note that the list of registered providers may be retrieved via\n     * the {@link Security#getProviders() Security.getProviders()} method.\n     *\n     * <p>The {@code CertStore} that is returned is initialized with the\n     * specified {@code CertStoreParameters}. The type of parameters\n     * needed may vary between different types of {@code CertStore}s.\n     * Note that the specified {@code CertStoreParameters} object is\n     * cloned.\n     *\n     * @param type the requested {@code CertStore} type.\n     * See the CertStore section in the <a href=\n     * \"{@docRoot}/../specs/security/standard-names.html#certstore-types\">\n     * Java Security Standard Algorithm Names Specification</a>\n     * for information about standard types.\n     *\n     * @param params the initialization parameters (may be {@code null}).\n     *\n     * @param provider the name of the provider.\n     *\n     * @return a {@code CertStore} object that implements the\n     *          specified type\n     *\n     * @throws IllegalArgumentException if the {@code provider} is\n     *         {@code null} or empty\n     *\n     * @throws InvalidAlgorithmParameterException if the specified\n     *         initialization parameters are inappropriate for this\n     *         {@code CertStore}\n     *\n     * @throws NoSuchAlgorithmException if a {@code CertStoreSpi}\n     *         implementation for the specified type is not\n     *         available from the specified provider\n     *\n     * @throws NoSuchProviderException if the specified provider is not\n     *         registered in the security provider list\n     *\n     * @throws NullPointerException if {@code type} is {@code null}\n     *\n     * @see java.security.Provider\n     ",
    "links" : [ "java.security.Security#getProviders()" ]
  }, {
    "name" : "public static CertStore getInstance(String type, CertStoreParameters params, Provider provider) throws NoSuchAlgorithmException, InvalidAlgorithmParameterException",
    "returnType" : "CertStore",
    "comment" : "\n     * Returns a {@code CertStore} object that implements the specified\n     * {@code CertStore} type.\n     *\n     * <p> A new CertStore object encapsulating the\n     * CertStoreSpi implementation from the specified Provider\n     * object is returned.  Note that the specified Provider object\n     * does not have to be registered in the provider list.\n     *\n     * <p>The {@code CertStore} that is returned is initialized with the\n     * specified {@code CertStoreParameters}. The type of parameters\n     * needed may vary between different types of {@code CertStore}s.\n     * Note that the specified {@code CertStoreParameters} object is\n     * cloned.\n     *\n     * @param type the requested {@code CertStore} type.\n     * See the CertStore section in the <a href=\n     * \"{@docRoot}/../specs/security/standard-names.html#certstore-types\">\n     * Java Security Standard Algorithm Names Specification</a>\n     * for information about standard types.\n     *\n     * @param params the initialization parameters (may be {@code null}).\n     *\n     * @param provider the provider.\n     *\n     * @return a {@code CertStore} object that implements the\n     *          specified type\n     *\n     * @throws IllegalArgumentException if the {@code provider} is\n     *         null\n     *\n     * @throws InvalidAlgorithmParameterException if the specified\n     *         initialization parameters are inappropriate for this\n     *         {@code CertStore}\n     *\n     * @throws NoSuchAlgorithmException if a {@code CertStoreSpi}\n     *         implementation for the specified type is not available\n     *         from the specified Provider object\n     *\n     * @throws NullPointerException if {@code type} is {@code null}\n     *\n     * @see java.security.Provider\n     ",
    "links" : [ ]
  }, {
    "name" : "public final CertStoreParameters getCertStoreParameters()",
    "returnType" : "CertStoreParameters",
    "comment" : "\n     * Returns the parameters used to initialize this {@code CertStore}.\n     * Note that the {@code CertStoreParameters} object is cloned before\n     * it is returned.\n     *\n     * @return the parameters used to initialize this {@code CertStore}\n     * (may be {@code null})\n     ",
    "links" : [ ]
  }, {
    "name" : "public final String getType()",
    "returnType" : "String",
    "comment" : "\n     * Returns the type of this {@code CertStore}.\n     *\n     * @return the type of this {@code CertStore}\n     ",
    "links" : [ ]
  }, {
    "name" : "public final Provider getProvider()",
    "returnType" : "Provider",
    "comment" : "\n     * Returns the provider of this {@code CertStore}.\n     *\n     * @return the provider of this {@code CertStore}\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final String getDefaultType()",
    "returnType" : "String",
    "comment" : "\n     * Returns the default {@code CertStore} type as specified by the\n     * {@code certstore.type} security property, or the string\n     * {@literal \"LDAP\"} if no such property exists.\n     *\n     * <p>The default {@code CertStore} type can be used by applications\n     * that do not want to use a hard-coded type when calling one of the\n     * {@code getInstance} methods, and want to provide a default\n     * {@code CertStore} type in case a user does not specify its own.\n     *\n     * <p>The default {@code CertStore} type can be changed by setting\n     * the value of the {@code certstore.type} security property to the\n     * desired type.\n     *\n     * @see java.security.Security security properties\n     * @return the default {@code CertStore} type as specified by the\n     * {@code certstore.type} security property, or the string\n     * {@literal \"LDAP\"} if no such property exists.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public final Collection<? extends Certificate> getCertificates(CertSelector selector) throws CertStoreException", "public final Collection<? extends CRL> getCRLs(CRLSelector selector) throws CertStoreException", "public static CertStore getInstance(String type, CertStoreParameters params) throws InvalidAlgorithmParameterException, NoSuchAlgorithmException", "private static CertStore handleException(NoSuchAlgorithmException e) throws NoSuchAlgorithmException, InvalidAlgorithmParameterException", "public static CertStore getInstance(String type, CertStoreParameters params, String provider) throws InvalidAlgorithmParameterException, NoSuchAlgorithmException, NoSuchProviderException", "public static CertStore getInstance(String type, CertStoreParameters params, Provider provider) throws NoSuchAlgorithmException, InvalidAlgorithmParameterException", "public final CertStoreParameters getCertStoreParameters()", "public final String getType()", "public final Provider getProvider()", "public static final String getDefaultType()" ],
  "variableNames" : [ "CERTSTORE_TYPE", "storeSpi", "provider", "type", "params" ]
}