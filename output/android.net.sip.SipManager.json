{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/sip/SipManager.java",
  "packageName" : "android.net.sip",
  "className" : "SipManager",
  "comment" : "\n * Provides APIs for SIP tasks, such as initiating SIP connections, and provides access to related\n * SIP services. This class is the starting point for any SIP actions. You can acquire an instance\n * of it with {@link #newInstance newInstance()}.</p>\n * <p>The APIs in this class allows you to:</p>\n * <ul>\n * <li>Create a {@link SipSession} to get ready for making calls or listen for incoming calls. See\n * {@link #createSipSession createSipSession()} and {@link #getSessionFor getSessionFor()}.</li>\n * <li>Initiate and receive generic SIP calls or audio-only SIP calls. Generic SIP calls may\n * be video, audio, or other, and are initiated with {@link #open open()}. Audio-only SIP calls\n * should be handled with a {@link SipAudioCall}, which you can acquire with {@link\n * #makeAudioCall makeAudioCall()} and {@link #takeAudioCall takeAudioCall()}.</li>\n * <li>Register and unregister with a SIP service provider, with\n *      {@link #register register()} and {@link #unregister unregister()}.</li>\n * <li>Verify session connectivity, with {@link #isOpened isOpened()} and\n *      {@link #isRegistered isRegistered()}.</li>\n * </ul>\n * <p class=\"note\"><strong>Note:</strong> Not all Android-powered devices support VOIP calls using\n * SIP. You should always call {@link android.net.sip.SipManager#isVoipSupported\n * isVoipSupported()} to verify that the device supports VOIP calling and {@link\n * android.net.sip.SipManager#isApiSupported isApiSupported()} to verify that the device supports\n * the SIP APIs. Your application must also request the {@link\n * android.Manifest.permission#INTERNET} and {@link android.Manifest.permission#USE_SIP}\n * permissions.</p>\n *\n * <div class=\"special reference\">\n * <h3>Developer Guides</h3>\n * <p>For more information about using SIP, read the\n * <a href=\"{@docRoot}guide/topics/network/sip.html\">Session Initiation Protocol</a>\n * developer guide.</p>\n * </div>\n * @deprecated {@link android.net.sip.SipManager} and associated classes are no longer supported and\n * should not be used as the basis of future VOIP apps.\n ",
  "links" : [ "#getSessionFor", "#unregister", "android.Manifest.permission#INTERNET", "android.net.sip.SipManager#isVoipSupportedisVoipSupported()", "#open", "android.net.sip.SipAudioCall", "android.net.sip.SipSession", "#isRegistered", "#register", "android.net.sip.SipManager#isApiSupported", "android.Manifest.permission#USE_SIP", "#takeAudioCall", "#newInstance", "#makeAudioCall", "#isOpened", "android.net.sip.SipManager", "#createSipSession" ],
  "variables" : [ {
    "name" : "INCOMING_CALL_RESULT_CODE",
    "type" : "int",
    "comment" : "\n     * The result code to be sent back with the incoming call\n     * {@link PendingIntent}.\n     * @see #open(SipProfile, PendingIntent, SipRegistrationListener)\n     ",
    "links" : [ "android.app.PendingIntent" ]
  }, {
    "name" : "EXTRA_CALL_ID",
    "type" : "String",
    "comment" : "\n     * Key to retrieve the call ID from an incoming call intent.\n     * @see #open(SipProfile, PendingIntent, SipRegistrationListener)\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_OFFER_SD",
    "type" : "String",
    "comment" : "\n     * Key to retrieve the offered session description from an incoming call\n     * intent.\n     * @see #open(SipProfile, PendingIntent, SipRegistrationListener)\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_SIP_SERVICE_UP",
    "type" : "String",
    "comment" : "\n     * Intent action sent when the SipManager becomes available.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_SIP_INCOMING_CALL",
    "type" : "String",
    "comment" : "\n     * Intent action sent when there is a new incoming SIP call.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_SIP_ADD_PHONE",
    "type" : "String",
    "comment" : "\n     * Action string for the add-phone intent.\n     * Internal use only.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_SIP_REMOVE_PROFILE",
    "type" : "String",
    "comment" : "\n     * Intent action sent when a SIP profile has been removed.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_SIP_CALL_OPTION_CHANGED",
    "type" : "String",
    "comment" : "\n     * Intent action sent when the SIP accounts or other configuration has changed.\n     * This should trigger a re-registration of the SIP PhoneAccounts.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_START_SIP",
    "type" : "String",
    "comment" : "\n     * Intent action used by Telephony to start the SIP service after about.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_LOCAL_URI",
    "type" : "String",
    "comment" : "\n     * Part of the ACTION_SIP_ADD_PHONE and ACTION_SIP_REMOVE_PHONE intents.\n     * Internal use only.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSipService",
    "type" : "ISipService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static SipManager newInstance(Context context)",
    "returnType" : "SipManager",
    "comment" : "\n     * Creates a manager instance. Returns null if SIP API is not supported.\n     *\n     * @param context application context for creating the manager object\n     * @return the manager instance or null if SIP API is not supported\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isApiSupported(Context context)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the SIP API is supported by the system.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isVoipSupported(Context context)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the system supports SIP-based VOIP API.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isSipWifiOnly(Context context)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if SIP is only available on WIFI.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void createSipService()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void checkSipServiceConnection() throws SipException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void open(SipProfile localProfile) throws SipException",
    "returnType" : "void",
    "comment" : "\n     * Opens the profile for making generic SIP calls. The caller may make subsequent calls\n     * through {@link #makeAudioCall}. If one also wants to receive calls on the\n     * profile, use\n     * {@link #open(SipProfile, PendingIntent, SipRegistrationListener)}\n     * instead.\n     *\n     * @param localProfile the SIP profile to make calls from\n     * @throws SipException if the profile contains incorrect settings or\n     *      calling the SIP service results in an error\n     ",
    "links" : [ "#open(SipProfile", "#makeAudioCall" ]
  }, {
    "name" : "public void open(SipProfile localProfile, PendingIntent incomingCallPendingIntent, SipRegistrationListener listener) throws SipException",
    "returnType" : "void",
    "comment" : "\n     * Opens the profile for making calls and/or receiving generic SIP calls. The caller may\n     * make subsequent calls through {@link #makeAudioCall}. If the\n     * auto-registration option is enabled in the profile, the SIP service\n     * will register the profile to the corresponding SIP provider periodically\n     * in order to receive calls from the provider. When the SIP service\n     * receives a new call, it will send out an intent with the provided action\n     * string. The intent contains a call ID extra and an offer session\n     * description string extra. Use {@link #getCallId} and\n     * {@link #getOfferSessionDescription} to retrieve those extras.\n     *\n     * @param localProfile the SIP profile to receive incoming calls for\n     * @param incomingCallPendingIntent When an incoming call is received, the\n     *      SIP service will call\n     *      {@link PendingIntent#send(Context, int, Intent)} to send back the\n     *      intent to the caller with {@link #INCOMING_CALL_RESULT_CODE} as the\n     *      result code and the intent to fill in the call ID and session\n     *      description information. It cannot be null.\n     * @param listener to listen to registration events; can be null\n     * @see #getCallId\n     * @see #getOfferSessionDescription\n     * @see #takeAudioCall\n     * @throws NullPointerException if {@code incomingCallPendingIntent} is null\n     * @throws SipException if the profile contains incorrect settings or\n     *      calling the SIP service results in an error\n     * @see #isIncomingCallIntent\n     * @see #getCallId\n     * @see #getOfferSessionDescription\n     ",
    "links" : [ "#getOfferSessionDescription", "#getCallId", "#INCOMING_CALL_RESULT_CODE", "#makeAudioCall", "android.app.PendingIntent#send(Context" ]
  }, {
    "name" : "public void setRegistrationListener(String localProfileUri, SipRegistrationListener listener) throws SipException",
    "returnType" : "void",
    "comment" : "\n     * Sets the listener to listen to registration events. No effect if the\n     * profile has not been opened to receive calls (see\n     * {@link #open(SipProfile, PendingIntent, SipRegistrationListener)}).\n     *\n     * @param localProfileUri the URI of the profile\n     * @param listener to listen to registration events; can be null\n     * @throws SipException if calling the SIP service results in an error\n     ",
    "links" : [ "#open(SipProfile" ]
  }, {
    "name" : "public void close(String localProfileUri) throws SipException",
    "returnType" : "void",
    "comment" : "\n     * Closes the specified profile to not make/receive calls. All the resources\n     * that were allocated to the profile are also released.\n     *\n     * @param localProfileUri the URI of the profile to close\n     * @throws SipException if calling the SIP service results in an error\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isOpened(String localProfileUri) throws SipException",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if the specified profile is opened in the SIP service for\n     * making and/or receiving calls.\n     *\n     * @param localProfileUri the URI of the profile in question\n     * @return true if the profile is enabled to receive calls\n     * @throws SipException if calling the SIP service results in an error\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isRegistered(String localProfileUri) throws SipException",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if the SIP service has successfully registered the profile to the\n     * SIP provider (specified in the profile) for receiving calls. Returning\n     * true from this method also implies the profile is opened\n     * ({@link #isOpened}).\n     *\n     * @param localProfileUri the URI of the profile in question\n     * @return true if the profile is registered to the SIP provider; false if\n     *        the profile has not been opened in the SIP service or the SIP\n     *        service has not yet successfully registered the profile to the SIP\n     *        provider\n     * @throws SipException if calling the SIP service results in an error\n     ",
    "links" : [ "#isOpened" ]
  }, {
    "name" : "public SipAudioCall makeAudioCall(SipProfile localProfile, SipProfile peerProfile, SipAudioCall.Listener listener, int timeout) throws SipException",
    "returnType" : "SipAudioCall",
    "comment" : "\n     * Creates a {@link SipAudioCall} to make a call. The attempt will be timed\n     * out if the call is not established within {@code timeout} seconds and\n     * {@link SipAudioCall.Listener#onError onError(SipAudioCall, SipErrorCode.TIME_OUT, String)}\n     * will be called.\n     *\n     * @param localProfile the SIP profile to make the call from\n     * @param peerProfile the SIP profile to make the call to\n     * @param listener to listen to the call events from {@link SipAudioCall};\n     *      can be null\n     * @param timeout the timeout value in seconds. Default value (defined by\n     *        SIP protocol) is used if {@code timeout} is zero or negative.\n     * @return a {@link SipAudioCall} object\n     * @throws SipException if calling the SIP service results in an error or\n     *      VOIP API is not supported by the device\n     * @see SipAudioCall.Listener#onError\n     * @see #isVoipSupported\n     ",
    "links" : [ "SipAudioCall.Listener#onError", "android.net.sip.SipAudioCall" ]
  }, {
    "name" : "public SipAudioCall makeAudioCall(String localProfileUri, String peerProfileUri, SipAudioCall.Listener listener, int timeout) throws SipException",
    "returnType" : "SipAudioCall",
    "comment" : "\n     * Creates a {@link SipAudioCall} to make an audio call. The attempt will be\n     * timed out if the call is not established within {@code timeout} seconds\n     * and\n     * {@link SipAudioCall.Listener#onError onError(SipAudioCall, SipErrorCode.TIME_OUT, String)}\n     * will be called.\n     *\n     * @param localProfileUri URI of the SIP profile to make the call from\n     * @param peerProfileUri URI of the SIP profile to make the call to\n     * @param listener to listen to the call events from {@link SipAudioCall};\n     *      can be null\n     * @param timeout the timeout value in seconds. Default value (defined by\n     *        SIP protocol) is used if {@code timeout} is zero or negative.\n     * @return a {@link SipAudioCall} object\n     * @throws SipException if calling the SIP service results in an error or\n     *      VOIP API is not supported by the device\n     * @see SipAudioCall.Listener#onError\n     * @see #isVoipSupported\n     ",
    "links" : [ "SipAudioCall.Listener#onError", "android.net.sip.SipAudioCall" ]
  }, {
    "name" : "public SipAudioCall takeAudioCall(Intent incomingCallIntent, SipAudioCall.Listener listener) throws SipException",
    "returnType" : "SipAudioCall",
    "comment" : "\n     * Creates a {@link SipAudioCall} to take an incoming call. Before the call\n     * is returned, the listener will receive a\n     * {@link SipAudioCall.Listener#onRinging}\n     * callback.\n     *\n     * @param incomingCallIntent the incoming call broadcast intent\n     * @param listener to listen to the call events from {@link SipAudioCall};\n     *      can be null\n     * @return a {@link SipAudioCall} object\n     * @throws SipException if calling the SIP service results in an error\n     ",
    "links" : [ "SipAudioCall.Listener#onRinging", "android.net.sip.SipAudioCall" ]
  }, {
    "name" : "public static boolean isIncomingCallIntent(Intent intent)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if the intent is an incoming call broadcast intent.\n     *\n     * @param intent the intent in question\n     * @return true if the intent is an incoming call broadcast intent\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getCallId(Intent incomingCallIntent)",
    "returnType" : "String",
    "comment" : "\n     * Gets the call ID from the specified incoming call broadcast intent.\n     *\n     * @param incomingCallIntent the incoming call broadcast intent\n     * @return the call ID or null if the intent does not contain it\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getOfferSessionDescription(Intent incomingCallIntent)",
    "returnType" : "String",
    "comment" : "\n     * Gets the offer session description from the specified incoming call\n     * broadcast intent.\n     *\n     * @param incomingCallIntent the incoming call broadcast intent\n     * @return the offer session description or null if the intent does not\n     *      have it\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Intent createIncomingCallBroadcast(String callId, String sessionDescription)",
    "returnType" : "Intent",
    "comment" : "\n     * Creates an incoming call broadcast intent.\n     *\n     * @param callId the call ID of the incoming call\n     * @param sessionDescription the session description of the incoming call\n     * @return the incoming call intent\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void register(SipProfile localProfile, int expiryTime, SipRegistrationListener listener) throws SipException",
    "returnType" : "void",
    "comment" : "\n     * Manually registers the profile to the corresponding SIP provider for\n     * receiving calls.\n     * {@link #open(SipProfile, PendingIntent, SipRegistrationListener)} is\n     * still needed to be called at least once in order for the SIP service to\n     * notify the caller with the {@link android.app.PendingIntent} when an incoming call is\n     * received.\n     *\n     * @param localProfile the SIP profile to register with\n     * @param expiryTime registration expiration time (in seconds)\n     * @param listener to listen to the registration events\n     * @throws SipException if calling the SIP service results in an error\n     ",
    "links" : [ "#open(SipProfile", "android.app.PendingIntent" ]
  }, {
    "name" : "public void unregister(SipProfile localProfile, SipRegistrationListener listener) throws SipException",
    "returnType" : "void",
    "comment" : "\n     * Manually unregisters the profile from the corresponding SIP provider for\n     * stop receiving further calls. This may interference with the auto\n     * registration process in the SIP service if the auto-registration option\n     * in the profile is enabled.\n     *\n     * @param localProfile the SIP profile to register with\n     * @param listener to listen to the registration events\n     * @throws SipException if calling the SIP service results in an error\n     ",
    "links" : [ ]
  }, {
    "name" : "public SipSession getSessionFor(Intent incomingCallIntent) throws SipException",
    "returnType" : "SipSession",
    "comment" : "\n     * Gets the {@link SipSession} that handles the incoming call. For audio\n     * calls, consider to use {@link SipAudioCall} to handle the incoming call.\n     * See {@link #takeAudioCall}. Note that the method may be called only once\n     * for the same intent. For subsequent calls on the same intent, the method\n     * returns null.\n     *\n     * @param incomingCallIntent the incoming call broadcast intent\n     * @return the session object that handles the incoming call\n     ",
    "links" : [ "android.net.sip.SipSession", "#takeAudioCall", "android.net.sip.SipAudioCall" ]
  }, {
    "name" : "private static ISipSessionListener createRelay(SipRegistrationListener listener, String uri)",
    "returnType" : "ISipSessionListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public SipSession createSipSession(SipProfile localProfile, SipSession.Listener listener) throws SipException",
    "returnType" : "SipSession",
    "comment" : "\n     * Creates a {@link SipSession} with the specified profile. Use other\n     * methods, if applicable, instead of interacting with {@link SipSession}\n     * directly.\n     *\n     * @param localProfile the SIP profile the session is associated with\n     * @param listener to listen to SIP session events\n     ",
    "links" : [ "android.net.sip.SipSession" ]
  }, {
    "name" : "public List<SipProfile> getProfiles() throws SipException",
    "returnType" : "List<SipProfile>",
    "comment" : "\n     * Gets the list of profiles hosted by the SIP service. The user information\n     * (username, password and display name) are crossed out.\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static SipManager newInstance(Context context)", "public static boolean isApiSupported(Context context)", "public static boolean isVoipSupported(Context context)", "public static boolean isSipWifiOnly(Context context)", "private void createSipService()", "private void checkSipServiceConnection() throws SipException", "public void open(SipProfile localProfile) throws SipException", "public void open(SipProfile localProfile, PendingIntent incomingCallPendingIntent, SipRegistrationListener listener) throws SipException", "public void setRegistrationListener(String localProfileUri, SipRegistrationListener listener) throws SipException", "public void close(String localProfileUri) throws SipException", "public boolean isOpened(String localProfileUri) throws SipException", "public boolean isRegistered(String localProfileUri) throws SipException", "public SipAudioCall makeAudioCall(SipProfile localProfile, SipProfile peerProfile, SipAudioCall.Listener listener, int timeout) throws SipException", "public SipAudioCall makeAudioCall(String localProfileUri, String peerProfileUri, SipAudioCall.Listener listener, int timeout) throws SipException", "public SipAudioCall takeAudioCall(Intent incomingCallIntent, SipAudioCall.Listener listener) throws SipException", "public static boolean isIncomingCallIntent(Intent intent)", "public static String getCallId(Intent incomingCallIntent)", "public static String getOfferSessionDescription(Intent incomingCallIntent)", "public static Intent createIncomingCallBroadcast(String callId, String sessionDescription)", "public void register(SipProfile localProfile, int expiryTime, SipRegistrationListener listener) throws SipException", "public void unregister(SipProfile localProfile, SipRegistrationListener listener) throws SipException", "public SipSession getSessionFor(Intent incomingCallIntent) throws SipException", "private static ISipSessionListener createRelay(SipRegistrationListener listener, String uri)", "public SipSession createSipSession(SipProfile localProfile, SipSession.Listener listener) throws SipException", "public List<SipProfile> getProfiles() throws SipException" ],
  "variableNames" : [ "INCOMING_CALL_RESULT_CODE", "EXTRA_CALL_ID", "EXTRA_OFFER_SD", "ACTION_SIP_SERVICE_UP", "ACTION_SIP_INCOMING_CALL", "ACTION_SIP_ADD_PHONE", "ACTION_SIP_REMOVE_PROFILE", "ACTION_SIP_CALL_OPTION_CHANGED", "ACTION_START_SIP", "EXTRA_LOCAL_URI", "TAG", "mSipService", "mContext" ]
}