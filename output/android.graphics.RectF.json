{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/graphics/RectF.java",
  "packageName" : "android.graphics",
  "className" : "RectF",
  "comment" : "\n * RectF holds four float coordinates for a rectangle. The rectangle is\n * represented by the coordinates of its 4 edges (left, top, right, bottom).\n * These fields can be accessed directly. Use width() and height() to retrieve\n * the rectangle's width and height. Note: most methods do not check to see that\n * the coordinates are sorted correctly (i.e. left <= right and top <= bottom).\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "left",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "top",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "right",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "bottom",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<RectF>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toShortString()",
    "returnType" : "String",
    "comment" : "\n     * Return a string representation of the rectangle in a compact form.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toShortString(@NonNull StringBuilder sb)",
    "returnType" : "String",
    "comment" : "\n     * Return a string representation of the rectangle in a compact form.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void printShortString(@NonNull PrintWriter pw)",
    "returnType" : "void",
    "comment" : "\n     * Print short representation to given writer.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean isEmpty()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the rectangle is empty (left >= right or top >= bottom)\n     ",
    "links" : [ ]
  }, {
    "name" : "public final float width()",
    "returnType" : "float",
    "comment" : "\n     * @return the rectangle's width. This does not check for a valid rectangle\n     * (i.e. left <= right) so the result may be negative.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final float height()",
    "returnType" : "float",
    "comment" : "\n     * @return the rectangle's height. This does not check for a valid rectangle\n     * (i.e. top <= bottom) so the result may be negative.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final float centerX()",
    "returnType" : "float",
    "comment" : "\n     * @return the horizontal center of the rectangle. This does not check for\n     * a valid rectangle (i.e. left <= right)\n     ",
    "links" : [ ]
  }, {
    "name" : "public final float centerY()",
    "returnType" : "float",
    "comment" : "\n     * @return the vertical center of the rectangle. This does not check for\n     * a valid rectangle (i.e. top <= bottom)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setEmpty()",
    "returnType" : "void",
    "comment" : "\n     * Set the rectangle to (0,0,0,0)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void set(float left, float top, float right, float bottom)",
    "returnType" : "void",
    "comment" : "\n     * Set the rectangle's coordinates to the specified values. Note: no range\n     * checking is performed, so it is up to the caller to ensure that\n     * left <= right and top <= bottom.\n     *\n     * @param left   The X coordinate of the left side of the rectangle\n     * @param top    The Y coordinate of the top of the rectangle\n     * @param right  The X coordinate of the right side of the rectangle\n     * @param bottom The Y coordinate of the bottom of the rectangle\n     ",
    "links" : [ ]
  }, {
    "name" : "public void set(@NonNull RectF src)",
    "returnType" : "void",
    "comment" : "\n     * Copy the coordinates from src into this rectangle.\n     *\n     * @param src The rectangle whose coordinates are copied into this\n     *           rectangle.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void set(@NonNull Rect src)",
    "returnType" : "void",
    "comment" : "\n     * Copy the coordinates from src into this rectangle.\n     *\n     * @param src The rectangle whose coordinates are copied into this\n     *           rectangle.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void offset(float dx, float dy)",
    "returnType" : "void",
    "comment" : "\n     * Offset the rectangle by adding dx to its left and right coordinates, and\n     * adding dy to its top and bottom coordinates.\n     *\n     * @param dx The amount to add to the rectangle's left and right coordinates\n     * @param dy The amount to add to the rectangle's top and bottom coordinates\n     ",
    "links" : [ ]
  }, {
    "name" : "public void offsetTo(float newLeft, float newTop)",
    "returnType" : "void",
    "comment" : "\n     * Offset the rectangle to a specific (left, top) position,\n     * keeping its width and height the same.\n     *\n     * @param newLeft   The new \"left\" coordinate for the rectangle\n     * @param newTop    The new \"top\" coordinate for the rectangle\n     ",
    "links" : [ ]
  }, {
    "name" : "public void inset(float dx, float dy)",
    "returnType" : "void",
    "comment" : "\n     * Inset the rectangle by (dx,dy). If dx is positive, then the sides are\n     * moved inwards, making the rectangle narrower. If dx is negative, then the\n     * sides are moved outwards, making the rectangle wider. The same holds true\n     * for dy and the top and bottom.\n     *\n     * @param dx The amount to add(subtract) from the rectangle's left(right)\n     * @param dy The amount to add(subtract) from the rectangle's top(bottom)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean contains(float x, float y)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if (x,y) is inside the rectangle. The left and top are\n     * considered to be inside, while the right and bottom are not. This means\n     * that for a x,y to be contained: left <= x < right and top <= y < bottom.\n     * An empty rectangle never contains any point.\n     *\n     * @param x The X coordinate of the point being tested for containment\n     * @param y The Y coordinate of the point being tested for containment\n     * @return true iff (x,y) are contained by the rectangle, where containment\n     *              means left <= x < right and top <= y < bottom\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean contains(float left, float top, float right, float bottom)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true iff the 4 specified sides of a rectangle are inside or equal\n     * to this rectangle. i.e. is this rectangle a superset of the specified\n     * rectangle. An empty rectangle never contains another rectangle.\n     *\n     * @param left The left side of the rectangle being tested for containment\n     * @param top The top of the rectangle being tested for containment\n     * @param right The right side of the rectangle being tested for containment\n     * @param bottom The bottom of the rectangle being tested for containment\n     * @return true iff the 4 specified sides of a rectangle are inside or\n     *              equal to this rectangle\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean contains(@NonNull RectF r)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true iff the specified rectangle r is inside or equal to this\n     * rectangle. An empty rectangle never contains another rectangle.\n     *\n     * @param r The rectangle being tested for containment.\n     * @return true iff the specified rectangle r is inside or equal to this\n     *              rectangle\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean intersect(float left, float top, float right, float bottom)",
    "returnType" : "boolean",
    "comment" : "\n     * If the rectangle specified by left,top,right,bottom intersects this\n     * rectangle, return true and set this rectangle to that intersection,\n     * otherwise return false and do not change this rectangle. No check is\n     * performed to see if either rectangle is empty. Note: To just test for\n     * intersection, use intersects()\n     *\n     * @param left The left side of the rectangle being intersected with this\n     *             rectangle\n     * @param top The top of the rectangle being intersected with this rectangle\n     * @param right The right side of the rectangle being intersected with this\n     *              rectangle.\n     * @param bottom The bottom of the rectangle being intersected with this\n     *             rectangle.\n     * @return true if the specified rectangle and this rectangle intersect\n     *              (and this rectangle is then set to that intersection) else\n     *              return false and do not change this rectangle.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean intersect(@NonNull RectF r)",
    "returnType" : "boolean",
    "comment" : "\n     * If the specified rectangle intersects this rectangle, return true and set\n     * this rectangle to that intersection, otherwise return false and do not\n     * change this rectangle. No check is performed to see if either rectangle\n     * is empty. To just test for intersection, use intersects()\n     *\n     * @param r The rectangle being intersected with this rectangle.\n     * @return true if the specified rectangle and this rectangle intersect\n     *              (and this rectangle is then set to that intersection) else\n     *              return false and do not change this rectangle.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean setIntersect(@NonNull RectF a, @NonNull RectF b)",
    "returnType" : "boolean",
    "comment" : "\n     * If rectangles a and b intersect, return true and set this rectangle to\n     * that intersection, otherwise return false and do not change this\n     * rectangle. No check is performed to see if either rectangle is empty.\n     * To just test for intersection, use intersects()\n     *\n     * @param a The first rectangle being intersected with\n     * @param b The second rectangle being intersected with\n     * @return true iff the two specified rectangles intersect. If they do, set\n     *              this rectangle to that intersection. If they do not, return\n     *              false and do not change this rectangle.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean intersects(float left, float top, float right, float bottom)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this rectangle intersects the specified rectangle.\n     * In no event is this rectangle modified. No check is performed to see\n     * if either rectangle is empty. To record the intersection, use intersect()\n     * or setIntersect().\n     *\n     * @param left The left side of the rectangle being tested for intersection\n     * @param top The top of the rectangle being tested for intersection\n     * @param right The right side of the rectangle being tested for\n     *              intersection\n     * @param bottom The bottom of the rectangle being tested for intersection\n     * @return true iff the specified rectangle intersects this rectangle. In\n     *              no event is this rectangle modified.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean intersects(@NonNull RectF a, @NonNull RectF b)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true iff the two specified rectangles intersect. In no event are\n     * either of the rectangles modified. To record the intersection,\n     * use intersect() or setIntersect().\n     *\n     * @param a The first rectangle being tested for intersection\n     * @param b The second rectangle being tested for intersection\n     * @return true iff the two specified rectangles intersect. In no event are\n     *              either of the rectangles modified.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void round(@NonNull Rect dst)",
    "returnType" : "void",
    "comment" : "\n     * Set the dst integer Rect by rounding this rectangle's coordinates\n     * to their nearest integer values.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void roundOut(@NonNull Rect dst)",
    "returnType" : "void",
    "comment" : "\n     * Set the dst integer Rect by rounding \"out\" this rectangle, choosing the\n     * floor of top and left, and the ceiling of right and bottom.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void union(float left, float top, float right, float bottom)",
    "returnType" : "void",
    "comment" : "\n     * Update this Rect to enclose itself and the specified rectangle. If the\n     * specified rectangle is empty, nothing is done. If this rectangle is empty\n     * it is set to the specified rectangle.\n     *\n     * @param left The left edge being unioned with this rectangle\n     * @param top The top edge being unioned with this rectangle\n     * @param right The right edge being unioned with this rectangle\n     * @param bottom The bottom edge being unioned with this rectangle\n     ",
    "links" : [ ]
  }, {
    "name" : "public void union(@NonNull RectF r)",
    "returnType" : "void",
    "comment" : "\n     * Update this Rect to enclose itself and the specified rectangle. If the\n     * specified rectangle is empty, nothing is done. If this rectangle is empty\n     * it is set to the specified rectangle.\n     *\n     * @param r The rectangle being unioned with this rectangle\n     ",
    "links" : [ ]
  }, {
    "name" : "public void union(float x, float y)",
    "returnType" : "void",
    "comment" : "\n     * Update this Rect to enclose itself and the [x,y] coordinate. There is no\n     * check to see that this rectangle is non-empty.\n     *\n     * @param x The x coordinate of the point to add to the rectangle\n     * @param y The y coordinate of the point to add to the rectangle\n     ",
    "links" : [ ]
  }, {
    "name" : "public void sort()",
    "returnType" : "void",
    "comment" : "\n     * Swap top/bottom or left/right if there are flipped (i.e. left > right\n     * and/or top > bottom). This can be called if\n     * the edges are computed separately, and may have crossed over each other.\n     * If the edges are already correct (i.e. left <= right and top <= bottom)\n     * then nothing is done.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "\n     * Parcelable interface methods\n     ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel out, int flags)",
    "returnType" : "void",
    "comment" : "\n     * Write this rectangle to the specified parcel. To restore a rectangle from\n     * a parcel, use readFromParcel()\n     * @param out The parcel to write the rectangle's coordinates into\n     ",
    "links" : [ ]
  }, {
    "name" : "public void readFromParcel(@NonNull Parcel in)",
    "returnType" : "void",
    "comment" : "\n     * Set the rectangle's coordinates from the data stored in the specified\n     * parcel. To write a rectangle to a parcel, call writeToParcel().\n     *\n     * @param in The parcel to read the rectangle's coordinates from\n     ",
    "links" : [ ]
  }, {
    "name" : "public void scale(float scale)",
    "returnType" : "void",
    "comment" : "\n     * Scales up the rect by the given scale.\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public boolean equals(Object o)", "public int hashCode()", "public String toString()", "public String toShortString()", "public String toShortString(@NonNull StringBuilder sb)", "public void printShortString(@NonNull PrintWriter pw)", "public final boolean isEmpty()", "public final float width()", "public final float height()", "public final float centerX()", "public final float centerY()", "public void setEmpty()", "public void set(float left, float top, float right, float bottom)", "public void set(@NonNull RectF src)", "public void set(@NonNull Rect src)", "public void offset(float dx, float dy)", "public void offsetTo(float newLeft, float newTop)", "public void inset(float dx, float dy)", "public boolean contains(float x, float y)", "public boolean contains(float left, float top, float right, float bottom)", "public boolean contains(@NonNull RectF r)", "public boolean intersect(float left, float top, float right, float bottom)", "public boolean intersect(@NonNull RectF r)", "public boolean setIntersect(@NonNull RectF a, @NonNull RectF b)", "public boolean intersects(float left, float top, float right, float bottom)", "public static boolean intersects(@NonNull RectF a, @NonNull RectF b)", "public void round(@NonNull Rect dst)", "public void roundOut(@NonNull Rect dst)", "public void union(float left, float top, float right, float bottom)", "public void union(@NonNull RectF r)", "public void union(float x, float y)", "public void sort()", "public int describeContents()", "public void writeToParcel(Parcel out, int flags)", "public void readFromParcel(@NonNull Parcel in)", "public void scale(float scale)" ],
  "variableNames" : [ "left", "top", "right", "bottom", "CREATOR" ]
}