{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/stream/WhileOps.java",
  "packageName" : "java.util.stream",
  "className" : "UnorderedWhileSpliterator",
  "comment" : "\n     * A spliterator supporting takeWhile and dropWhile operations over an\n     * underlying spliterator whose covered elements have no encounter order.\n     * <p>\n     * Concrete subclasses of this spliterator support reference and primitive\n     * types for takeWhile and dropWhile.\n     * <p>\n     * For the takeWhile operation if during traversal taking completes then\n     * taking is cancelled globally for the splitting and traversal of all\n     * related spliterators.\n     * Cancellation is governed by a shared {@link AtomicBoolean} instance.  A\n     * spliterator in the process of taking when cancellation occurs will also\n     * be cancelled but not necessarily immediately.  To reduce contention on\n     * the {@link AtomicBoolean} instance, cancellation make be acted on after\n     * a small number of additional elements have been traversed.\n     * <p>\n     * For the dropWhile operation if during traversal dropping completes for\n     * some, but not all elements, then it is cancelled globally for the\n     * traversal of all related spliterators (splitting is not cancelled).\n     * Cancellation is governed in the same manner as for the takeWhile\n     * operation.\n     *\n     * @param <T> the type of elements returned by this spliterator\n     * @param <T_SPLITR> the type of the spliterator\n     ",
  "links" : [ "java.util.concurrent.atomic.AtomicBoolean" ],
  "variables" : [ {
    "name" : "CANCEL_CHECK_COUNT",
    "type" : "int",
    "comment" : " Power of two constant minus one used for modulus of count",
    "links" : [ ]
  }, {
    "name" : "s",
    "type" : "T_SPLITR",
    "comment" : " The underlying spliterator",
    "links" : [ ]
  }, {
    "name" : "noSplitting",
    "type" : "boolean",
    "comment" : " See use in stream take/dropWhile default methods",
    "links" : [ ]
  }, {
    "name" : "cancel",
    "type" : "AtomicBoolean",
    "comment" : " For dropping, spliterators cannot be traversed",
    "links" : [ ]
  }, {
    "name" : "takeOrDrop",
    "type" : "boolean",
    "comment" : " True while taking or dropping should be performed when traversing",
    "links" : [ ]
  }, {
    "name" : "count",
    "type" : "int",
    "comment" : " The count of elements traversed",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public long estimateSize()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int characteristics()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public long getExactSizeIfKnown()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Comparator<? super T> getComparator()",
    "returnType" : "Comparator<? super T>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public T_SPLITR trySplit()",
    "returnType" : "T_SPLITR",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean checkCancelOnCount()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " abstract T_SPLITR makeSpliterator(T_SPLITR s)",
    "returnType" : "T_SPLITR",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public long estimateSize()", "public int characteristics()", "public long getExactSizeIfKnown()", "public Comparator<? super T> getComparator()", "public T_SPLITR trySplit()", " boolean checkCancelOnCount()", " abstract T_SPLITR makeSpliterator(T_SPLITR s)" ],
  "variableNames" : [ "CANCEL_CHECK_COUNT", "s", "noSplitting", "cancel", "takeOrDrop", "count" ]
}