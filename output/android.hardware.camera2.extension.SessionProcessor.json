{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/camera2/extension/SessionProcessor.java",
  "packageName" : "android.hardware.camera2.extension",
  "className" : "SessionProcessor",
  "comment" : "\n * Interface for creating Camera2 CameraCaptureSessions with extension\n * enabled based on the advanced extension interface.\n *\n * <p><pre>\n * The flow of a extension session is shown below:\n * (1) {@link #initSession}: Camera framework prepares streams\n * configuration for creating CameraCaptureSession. Output surfaces for\n * Preview and ImageCapture are passed in and implementation is\n * responsible for outputting the results to these surfaces.\n *\n * (2) {@link #onCaptureSessionStart}: It is called after\n * CameraCaptureSession is configured. A {@link RequestProcessor} is\n * passed for the implementation to send repeating requests and single\n * requests.\n *\n * (3) {@link #startRepeating}:  Camera framework will call this method to\n * start the repeating request after CameraCaptureSession is called.\n * Implementations should start the repeating request by  {@link\n * RequestProcessor}. Implementations can also update the repeating\n * request if needed later.\n *\n * (4) {@link #setParameters}: The passed parameters will be attached\n * to the repeating request and single requests but the implementation can\n * choose to apply some of them only.\n *\n * (5) {@link #startMultiFrameCapture}: It is called when apps want\n * to start a multi-frame image capture.  {@link CaptureCallback} will be\n * called to report the status and the output image will be written to the\n * capture output surface specified in {@link #initSession}.\n *\n * (5) {@link #onCaptureSessionEnd}: It is called right BEFORE\n * CameraCaptureSession.close() is called.\n *\n * (6) {@link #deInitSession}: called when CameraCaptureSession is closed.\n * </pre>\n * @hide\n ",
  "links" : [ "CaptureCallback", "#onCaptureSessionStart", "#startMultiFrameCapture", "#setParameters", "#onCaptureSessionEnd", "#startRepeating", "#initSession", "android.hardware.camera2.extension.RequestProcessor", "#deInitSession" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCameraUsageTracker",
    "type" : "CameraUsageTracker",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " void setCameraUsageTracker(CameraUsageTracker tracker)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract ExtensionConfiguration initSession(@NonNull IBinder token, @NonNull String cameraId, @NonNull CharacteristicsMap map, @NonNull CameraOutputSurface previewSurface, @NonNull CameraOutputSurface imageCaptureSurface)",
    "returnType" : "ExtensionConfiguration",
    "comment" : "\n     * Initializes the session for the extension. This is where the\n     * extension implementations allocate resources for\n     * preparing a CameraCaptureSession. After initSession() is called,\n     * the camera ID, cameraCharacteristics and context will not change\n     * until deInitSession() has been called.\n     *\n     * <p>The framework specifies the output surface configurations for\n     * preview using the 'previewSurface' argument and for still capture\n     * using the 'imageCaptureSurface' argument and implementations must\n     * return a {@link ExtensionConfiguration} which consists of a list of\n     * {@link CameraOutputSurface} and session parameters. The {@link\n     * ExtensionConfiguration} will be used to configure the\n     * CameraCaptureSession.\n     *\n     * <p>Implementations are responsible for outputting correct camera\n     * images output to these output surfaces.</p>\n     *\n     * @param token Binder token that can be used to register a death\n     *              notifier callback\n     * @param cameraId  The camera2 id string of the camera.\n     * @param map Maps camera ids to camera characteristics\n     * @param previewSurface contains output surface for preview\n     * @param imageCaptureSurface contains the output surface for image\n     *                            capture\n     * @return a {@link ExtensionConfiguration} consisting of a list of\n     * {@link CameraOutputConfig} and session parameters which will decide\n     * the  {@link android.hardware.camera2.params.SessionConfiguration}\n     * for configuring the CameraCaptureSession. Please note that the\n     * OutputConfiguration list may not be part of any\n     * supported or mandatory stream combination BUT implementations must\n     * ensure this list will always  produce a valid camera capture\n     * session.\n     ",
    "links" : [ "android.hardware.camera2.extension.ExtensionConfiguration", "android.hardware.camera2.params.SessionConfiguration", "CameraOutputConfig", "android.hardware.camera2.extension.CameraOutputSurface" ]
  }, {
    "name" : "public abstract void deInitSession(@NonNull IBinder token)",
    "returnType" : "void",
    "comment" : "\n     * Notify to de-initialize the extension. This callback will be\n     * invoked after CameraCaptureSession is closed. After onDeInit() was\n     * called, it is expected that the camera ID, cameraCharacteristics\n     * will no longer hold and tear down any resources allocated\n     * for this extension. Aborts all pending captures.\n     * @param token Binder token that can be used to unlink any previously\n     *              linked death notifier callbacks\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void onCaptureSessionStart(@NonNull RequestProcessor requestProcessor, @NonNull String statsKey)",
    "returnType" : "void",
    "comment" : "\n     * This will be invoked once after the {@link\n     * android.hardware.camera2.CameraCaptureSession}\n     * has been created. {@link RequestProcessor} is passed for\n     * implementations to submit single requests or set repeating\n     * requests. This extension RequestProcessor will be valid to use\n     * until onCaptureSessionEnd is called.\n     * @param requestProcessor The request processor to be used for\n     *                         managing capture requests\n     * @param statsKey         Unique key that is associated with the\n     *                         current Camera2 session and used by the\n     *                         framework telemetry. The id can be referenced\n     *                         by the extension, in case there is additional\n     *                         extension specific telemetry that needs\n     *                         to be linked to the regular capture session.\n     *\n     *\n     ",
    "links" : [ "android.hardware.camera2.CameraCaptureSession", "android.hardware.camera2.extension.RequestProcessor" ]
  }, {
    "name" : "public abstract void onCaptureSessionEnd()",
    "returnType" : "void",
    "comment" : "\n     * This will be invoked before the {@link\n     * android.hardware.camera2.CameraCaptureSession} is\n     * closed. {@link RequestProcessor} passed in onCaptureSessionStart\n     * will no longer accept any requests after onCaptureSessionEnd()\n     * returns.\n     ",
    "links" : [ "android.hardware.camera2.CameraCaptureSession", "android.hardware.camera2.extension.RequestProcessor" ]
  }, {
    "name" : "public abstract int startRepeating(@NonNull Executor executor, @NonNull CaptureCallback callback)",
    "returnType" : "int",
    "comment" : "\n     * Starts the repeating request after CameraCaptureSession is called.\n     * Implementations should start the repeating request by {@link\n     * RequestProcessor}. Implementations can also update the\n     * repeating request when needed later.\n     *\n     * @param executor the executor which will be used for\n     *                 invoking the callbacks\n     * @param callback a callback to report the status.\n     * @return the id of the capture sequence.\n     ",
    "links" : [ "android.hardware.camera2.extension.RequestProcessor" ]
  }, {
    "name" : "public abstract void stopRepeating()",
    "returnType" : "void",
    "comment" : "\n     * Stop the repeating request. To prevent implementations from not\n     * calling stopRepeating, the framework will first stop the repeating\n     * request of current CameraCaptureSession and call this API to signal\n     * implementations that the repeating request was stopped and going\n     * forward calling {@link RequestProcessor#setRepeating} will simply\n     * do nothing.\n     ",
    "links" : [ "android.hardware.camera2.extension.RequestProcessor#setRepeating" ]
  }, {
    "name" : "public abstract int startMultiFrameCapture(@NonNull Executor executor, @NonNull CaptureCallback callback)",
    "returnType" : "int",
    "comment" : "\n     * Start a multi-frame capture.\n     *\n     * When the capture is completed, {@link\n     * CaptureCallback#onCaptureSequenceCompleted}\n     * is called and {@code OnImageAvailableListener#onImageAvailable}\n     * will also be called on the ImageReader that creates the image\n     * capture output surface.\n     *\n     * <p>Only one capture can perform at a time. Starting a capture when\n     * another capture is running  will cause onCaptureFailed to be called\n     * immediately.\n     *\n     * @param executor the executor which will be used for\n     *                 invoking the callbacks\n     * @param callback a callback to report the status.\n     * @return the id of the capture sequence.\n     ",
    "links" : [ "#onCaptureSequenceCompleted" ]
  }, {
    "name" : "public abstract void setParameters(@NonNull CaptureRequest captureRequest)",
    "returnType" : "void",
    "comment" : "\n     * The camera framework will call these APIs to pass parameters from\n     * the app to the extension implementation. It is expected that the\n     * implementation would (eventually) update the repeating request if\n     * the keys are supported. Setting a value to null explicitly un-sets\n     * the value.\n     *@param captureRequest Request that includes all client parameter\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int startTrigger(@NonNull CaptureRequest captureRequest, @NonNull Executor executor, @NonNull CaptureCallback callback)",
    "returnType" : "int",
    "comment" : "\n     * The camera framework will call this interface in response to client\n     * requests involving  the output preview surface. Typical examples\n     * include requests that include AF/AE triggers.\n     * Extensions can disregard any capture request keys that were not\n     * advertised in\n     * {@link AdvancedExtender#getAvailableCaptureRequestKeys}.\n     *\n     * @param captureRequest Capture request that includes the respective\n     *                       triggers.\n     * @param executor the executor which will be used for\n     *                 invoking the callbacks\n     * @param callback a callback to report the status.\n     * @return the id of the capture sequence.\n     *\n     ",
    "links" : [ "android.hardware.camera2.extension.AdvancedExtender#getAvailableCaptureRequestKeys" ]
  }, {
    "name" : " ISessionProcessorImpl getSessionProcessorBinder()",
    "returnType" : "ISessionProcessorImpl",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ " void setCameraUsageTracker(CameraUsageTracker tracker)", "public abstract ExtensionConfiguration initSession(@NonNull IBinder token, @NonNull String cameraId, @NonNull CharacteristicsMap map, @NonNull CameraOutputSurface previewSurface, @NonNull CameraOutputSurface imageCaptureSurface)", "public abstract void deInitSession(@NonNull IBinder token)", "public abstract void onCaptureSessionStart(@NonNull RequestProcessor requestProcessor, @NonNull String statsKey)", "public abstract void onCaptureSessionEnd()", "public abstract int startRepeating(@NonNull Executor executor, @NonNull CaptureCallback callback)", "public abstract void stopRepeating()", "public abstract int startMultiFrameCapture(@NonNull Executor executor, @NonNull CaptureCallback callback)", "public abstract void setParameters(@NonNull CaptureRequest captureRequest)", "public abstract int startTrigger(@NonNull CaptureRequest captureRequest, @NonNull Executor executor, @NonNull CaptureCallback callback)", " ISessionProcessorImpl getSessionProcessorBinder()" ],
  "variableNames" : [ "TAG", "mCameraUsageTracker" ]
}