{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/app/servertransaction/TransactionExecutor.java",
  "packageName" : "android.app.servertransaction",
  "className" : "TransactionExecutor",
  "comment" : "\n * Class that manages transaction execution in the correct order.\n * @hide\n ",
  "variables" : [ {
    "name" : "DEBUG_RESOLVER",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTransactionHandler",
    "type" : "ClientTransactionHandler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPendingActions",
    "type" : "PendingTransactionActions",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHelper",
    "type" : "TransactionExecutorHelper",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void execute(ClientTransaction transaction)",
    "returnType" : "void",
    "comment" : "\n     * Resolve transaction.\n     * First all callbacks will be executed in the order they appear in the list. If a callback\n     * requires a certain pre- or post-execution state, the client will be transitioned accordingly.\n     * Then the client will cycle to the final lifecycle state if provided. Otherwise, it will\n     * either remain in the initial state, or last state needed by a callback.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void executeCallbacks(ClientTransaction transaction)",
    "returnType" : "void",
    "comment" : " Cycle through all states requested by callbacks and execute them at proper times. ",
    "links" : [ ]
  }, {
    "name" : "private void executeLifecycleState(ClientTransaction transaction)",
    "returnType" : "void",
    "comment" : " Transition to the final state if requested by the transaction. ",
    "links" : [ ]
  }, {
    "name" : "public void cycleToPath(ActivityClientRecord r, int finish, ClientTransaction transaction)",
    "returnType" : "void",
    "comment" : " Transition the client between states. ",
    "links" : [ ]
  }, {
    "name" : "private void cycleToPath(ActivityClientRecord r, int finish, boolean excludeLastState, ClientTransaction transaction)",
    "returnType" : "void",
    "comment" : "\n     * Transition the client between states with an option not to perform the last hop in the\n     * sequence. This is used when resolving lifecycle state request, when the last transition must\n     * be performed with some specific parameters.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void performLifecycleSequence(ActivityClientRecord r, IntArray path, ClientTransaction transaction)",
    "returnType" : "void",
    "comment" : " Transition the client through previously initialized state sequence. ",
    "links" : [ ]
  } ],
  "variableNames" : [ "DEBUG_RESOLVER", "TAG", "mTransactionHandler", "mPendingActions", "mHelper" ],
  "methodNames" : [ "public void execute(ClientTransaction transaction)", "public void executeCallbacks(ClientTransaction transaction)", "private void executeLifecycleState(ClientTransaction transaction)", "public void cycleToPath(ActivityClientRecord r, int finish, ClientTransaction transaction)", "private void cycleToPath(ActivityClientRecord r, int finish, boolean excludeLastState, ClientTransaction transaction)", "private void performLifecycleSequence(ActivityClientRecord r, IntArray path, ClientTransaction transaction)" ]
}