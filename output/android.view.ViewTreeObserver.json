{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/view/ViewTreeObserver.java",
  "packageName" : "android.view",
  "className" : "ViewTreeObserver",
  "comment" : "\n * A view tree observer is used to register listeners that can be notified of global\n * changes in the view tree. Such global events include, but are not limited to,\n * layout of the whole tree, beginning of the drawing pass, touch mode change....\n *\n * A ViewTreeObserver should never be instantiated by applications as it is provided\n * by the views hierarchy. Refer to {@link android.view.View#getViewTreeObserver()}\n * for more information.\n ",
  "variables" : [ {
    "name" : "mOnWindowFocusListeners",
    "type" : "CopyOnWriteArrayList<OnWindowFocusChangeListener>",
    "comment" : " Recursive listeners use CopyOnWriteArrayList",
    "links" : [ ]
  }, {
    "name" : "mOnWindowAttachListeners",
    "type" : "CopyOnWriteArrayList<OnWindowAttachListener>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnGlobalFocusListeners",
    "type" : "CopyOnWriteArrayList<OnGlobalFocusChangeListener>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnTouchModeChangeListeners",
    "type" : "CopyOnWriteArrayList<OnTouchModeChangeListener>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnEnterAnimationCompleteListeners",
    "type" : "CopyOnWriteArrayList<OnEnterAnimationCompleteListener>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnGlobalLayoutListeners",
    "type" : "CopyOnWriteArray<OnGlobalLayoutListener>",
    "comment" : " Any listener invoked from ViewRootImpl.performTraversals() should not be recursive",
    "links" : [ ]
  }, {
    "name" : "mOnComputeInternalInsetsListeners",
    "type" : "CopyOnWriteArray<OnComputeInternalInsetsListener>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnScrollChangedListeners",
    "type" : "CopyOnWriteArray<OnScrollChangedListener>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnPreDrawListeners",
    "type" : "CopyOnWriteArray<OnPreDrawListener>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnWindowShownListeners",
    "type" : "CopyOnWriteArray<OnWindowShownListener>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGestureExclusionListeners",
    "type" : "CopyOnWriteArray<Consumer<List<Rect>>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInDispatchOnDraw",
    "type" : "boolean",
    "comment" : " These listeners cannot be mutated during dispatch",
    "links" : [ ]
  }, {
    "name" : "mOnDrawListeners",
    "type" : "ArrayList<OnDrawListener>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sIllegalOnDrawModificationIsFatal",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnFrameCommitListeners",
    "type" : "ArrayList<Runnable>",
    "comment" : " These listeners are one-shot",
    "links" : [ ]
  }, {
    "name" : "mWindowShown",
    "type" : "boolean",
    "comment" : " Remains false until #dispatchOnWindowShown() is called. If a listener registers after\n     * that the listener will be immediately called. ",
    "links" : [ ]
  }, {
    "name" : "mAlive",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " void merge(ViewTreeObserver observer)",
    "returnType" : "void",
    "comment" : "\n     * Merges all the listeners registered on the specified observer with the listeners\n     * registered on this object. After this method is invoked, the specified observer\n     * will return false in {@link #isAlive()} and should not be used anymore.\n     *\n     * @param observer The ViewTreeObserver whose listeners must be added to this observer\n     ",
    "links" : [ "#isAlive()" ]
  }, {
    "name" : "public void addOnWindowAttachListener(OnWindowAttachListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Register a callback to be invoked when the view hierarchy is attached to a window.\n     *\n     * @param listener The callback to add\n     *\n     * @throws IllegalStateException If {@link #isAlive()} returns false\n     ",
    "links" : [ "#isAlive()" ]
  }, {
    "name" : "public void removeOnWindowAttachListener(OnWindowAttachListener victim)",
    "returnType" : "void",
    "comment" : "\n     * Remove a previously installed window attach callback.\n     *\n     * @param victim The callback to remove\n     *\n     * @throws IllegalStateException If {@link #isAlive()} returns false\n     *\n     * @see #addOnWindowAttachListener(android.view.ViewTreeObserver.OnWindowAttachListener)\n     ",
    "links" : [ "#isAlive()" ]
  }, {
    "name" : "public void addOnWindowFocusChangeListener(OnWindowFocusChangeListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Register a callback to be invoked when the window focus state within the view tree changes.\n     *\n     * @param listener The callback to add\n     *\n     * @throws IllegalStateException If {@link #isAlive()} returns false\n     ",
    "links" : [ "#isAlive()" ]
  }, {
    "name" : "public void removeOnWindowFocusChangeListener(OnWindowFocusChangeListener victim)",
    "returnType" : "void",
    "comment" : "\n     * Remove a previously installed window focus change callback.\n     *\n     * @param victim The callback to remove\n     *\n     * @throws IllegalStateException If {@link #isAlive()} returns false\n     *\n     * @see #addOnWindowFocusChangeListener(android.view.ViewTreeObserver.OnWindowFocusChangeListener)\n     ",
    "links" : [ "#isAlive()" ]
  }, {
    "name" : "public void addOnGlobalFocusChangeListener(OnGlobalFocusChangeListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Register a callback to be invoked when the focus state within the view tree changes.\n     *\n     * @param listener The callback to add\n     *\n     * @throws IllegalStateException If {@link #isAlive()} returns false\n     ",
    "links" : [ "#isAlive()" ]
  }, {
    "name" : "public void removeOnGlobalFocusChangeListener(OnGlobalFocusChangeListener victim)",
    "returnType" : "void",
    "comment" : "\n     * Remove a previously installed focus change callback.\n     *\n     * @param victim The callback to remove\n     *\n     * @throws IllegalStateException If {@link #isAlive()} returns false\n     *\n     * @see #addOnGlobalFocusChangeListener(OnGlobalFocusChangeListener)\n     ",
    "links" : [ "#isAlive()" ]
  }, {
    "name" : "public void addOnGlobalLayoutListener(OnGlobalLayoutListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Register a callback to be invoked when the global layout state or the visibility of views\n     * within the view tree changes\n     *\n     * @param listener The callback to add\n     *\n     * @throws IllegalStateException If {@link #isAlive()} returns false\n     ",
    "links" : [ "#isAlive()" ]
  }, {
    "name" : "public void removeGlobalOnLayoutListener(OnGlobalLayoutListener victim)",
    "returnType" : "void",
    "comment" : "\n     * Remove a previously installed global layout callback\n     *\n     * @param victim The callback to remove\n     *\n     * @throws IllegalStateException If {@link #isAlive()} returns false\n     * \n     * @deprecated Use #removeOnGlobalLayoutListener instead\n     *\n     * @see #addOnGlobalLayoutListener(OnGlobalLayoutListener)\n     ",
    "links" : [ "#isAlive()" ]
  }, {
    "name" : "public void removeOnGlobalLayoutListener(OnGlobalLayoutListener victim)",
    "returnType" : "void",
    "comment" : "\n     * Remove a previously installed global layout callback\n     *\n     * @param victim The callback to remove\n     *\n     * @throws IllegalStateException If {@link #isAlive()} returns false\n     * \n     * @see #addOnGlobalLayoutListener(OnGlobalLayoutListener)\n     ",
    "links" : [ "#isAlive()" ]
  }, {
    "name" : "public void addOnPreDrawListener(OnPreDrawListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Register a callback to be invoked when the view tree is about to be drawn\n     *\n     * @param listener The callback to add\n     *\n     * @throws IllegalStateException If {@link #isAlive()} returns false\n     ",
    "links" : [ "#isAlive()" ]
  }, {
    "name" : "public void removeOnPreDrawListener(OnPreDrawListener victim)",
    "returnType" : "void",
    "comment" : "\n     * Remove a previously installed pre-draw callback\n     *\n     * @param victim The callback to remove\n     *\n     * @throws IllegalStateException If {@link #isAlive()} returns false\n     *\n     * @see #addOnPreDrawListener(OnPreDrawListener)\n     ",
    "links" : [ "#isAlive()" ]
  }, {
    "name" : "public void addOnWindowShownListener(OnWindowShownListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Register a callback to be invoked when the view tree window has been shown\n     *\n     * @param listener The callback to add\n     *\n     * @throws IllegalStateException If {@link #isAlive()} returns false\n     * @hide\n     ",
    "links" : [ "#isAlive()" ]
  }, {
    "name" : "public void removeOnWindowShownListener(OnWindowShownListener victim)",
    "returnType" : "void",
    "comment" : "\n     * Remove a previously installed window shown callback\n     *\n     * @param victim The callback to remove\n     *\n     * @throws IllegalStateException If {@link #isAlive()} returns false\n     *\n     * @see #addOnWindowShownListener(OnWindowShownListener)\n     * @hide\n     ",
    "links" : [ "#isAlive()" ]
  }, {
    "name" : "public void addOnDrawListener(OnDrawListener listener)",
    "returnType" : "void",
    "comment" : "\n     * <p>Register a callback to be invoked when the view tree is about to be drawn.</p>\n     * <p><strong>Note:</strong> this method <strong>cannot</strong> be invoked from\n     * {@link android.view.ViewTreeObserver.OnDrawListener#onDraw()}.</p>\n     *\n     * @param listener The callback to add\n     *\n     * @throws IllegalStateException If {@link #isAlive()} returns false\n     ",
    "links" : [ "#isAlive()", "android.view.ViewTreeObserver.OnDrawListener#onDraw()" ]
  }, {
    "name" : "public void removeOnDrawListener(OnDrawListener victim)",
    "returnType" : "void",
    "comment" : "\n     * <p>Remove a previously installed pre-draw callback.</p>\n     * <p><strong>Note:</strong> this method <strong>cannot</strong> be invoked from\n     * {@link android.view.ViewTreeObserver.OnDrawListener#onDraw()}.</p>\n     *\n     * @param victim The callback to remove\n     *\n     * @throws IllegalStateException If {@link #isAlive()} returns false\n     *\n     * @see #addOnDrawListener(OnDrawListener)\n     ",
    "links" : [ "#isAlive()", "android.view.ViewTreeObserver.OnDrawListener#onDraw()" ]
  }, {
    "name" : "public void registerFrameCommitCallback(@NonNull Runnable callback)",
    "returnType" : "void",
    "comment" : "\n     * Adds a frame commit callback. This callback will be invoked when the current rendering\n     * content has been rendered into a frame and submitted to the swap chain. The frame may\n     * not currently be visible on the display when this is invoked, but it has been submitted.\n     * This callback is useful in combination with {@link PixelCopy} to capture the current\n     * rendered content of the UI reliably.\n     *\n     * Note: Only works with hardware rendering. Does nothing otherwise.\n     *\n     * @param callback The callback to invoke when the frame is committed.\n     ",
    "links" : [ "android.view.PixelCopy" ]
  }, {
    "name" : " ArrayList<Runnable> captureFrameCommitCallbacks()",
    "returnType" : "ArrayList<Runnable>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean unregisterFrameCommitCallback(@NonNull Runnable callback)",
    "returnType" : "boolean",
    "comment" : "\n     * Attempts to remove the given callback from the list of pending frame complete callbacks.\n     *\n     * @param callback The callback to remove\n     * @return Whether or not the callback was removed. If this returns true the callback will\n     *         not be invoked. If false is returned then the callback was either never added\n     *         or may already be pending execution and was unable to be removed\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addOnScrollChangedListener(OnScrollChangedListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Register a callback to be invoked when a view has been scrolled.\n     *\n     * @param listener The callback to add\n     *\n     * @throws IllegalStateException If {@link #isAlive()} returns false\n     ",
    "links" : [ "#isAlive()" ]
  }, {
    "name" : "public void removeOnScrollChangedListener(OnScrollChangedListener victim)",
    "returnType" : "void",
    "comment" : "\n     * Remove a previously installed scroll-changed callback\n     *\n     * @param victim The callback to remove\n     *\n     * @throws IllegalStateException If {@link #isAlive()} returns false\n     *\n     * @see #addOnScrollChangedListener(OnScrollChangedListener)\n     ",
    "links" : [ "#isAlive()" ]
  }, {
    "name" : "public void addOnTouchModeChangeListener(OnTouchModeChangeListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Register a callback to be invoked when the invoked when the touch mode changes.\n     *\n     * @param listener The callback to add\n     *\n     * @throws IllegalStateException If {@link #isAlive()} returns false\n     ",
    "links" : [ "#isAlive()" ]
  }, {
    "name" : "public void removeOnTouchModeChangeListener(OnTouchModeChangeListener victim)",
    "returnType" : "void",
    "comment" : "\n     * Remove a previously installed touch mode change callback\n     *\n     * @param victim The callback to remove\n     *\n     * @throws IllegalStateException If {@link #isAlive()} returns false\n     *\n     * @see #addOnTouchModeChangeListener(OnTouchModeChangeListener)\n     ",
    "links" : [ "#isAlive()" ]
  }, {
    "name" : "public void addOnComputeInternalInsetsListener(OnComputeInternalInsetsListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Register a callback to be invoked when the invoked when it is time to\n     * compute the window's internal insets.\n     *\n     * @param listener The callback to add\n     *\n     * @throws IllegalStateException If {@link #isAlive()} returns false\n     * \n     * We are not yet ready to commit to this API and support it, so\n     * @hide\n     ",
    "links" : [ "#isAlive()" ]
  }, {
    "name" : "public void removeOnComputeInternalInsetsListener(OnComputeInternalInsetsListener victim)",
    "returnType" : "void",
    "comment" : "\n     * Remove a previously installed internal insets computation callback\n     *\n     * @param victim The callback to remove\n     *\n     * @throws IllegalStateException If {@link #isAlive()} returns false\n     *\n     * @see #addOnComputeInternalInsetsListener(OnComputeInternalInsetsListener)\n     * \n     * We are not yet ready to commit to this API and support it, so\n     * @hide\n     ",
    "links" : [ "#isAlive()" ]
  }, {
    "name" : "public void addOnEnterAnimationCompleteListener(OnEnterAnimationCompleteListener listener)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removeOnEnterAnimationCompleteListener(OnEnterAnimationCompleteListener listener)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addOnSystemGestureExclusionRectsChangedListener(@NonNull Consumer<List<Rect>> listener)",
    "returnType" : "void",
    "comment" : "\n     * Add a listener to be notified when the tree's <em>transformed</em> gesture exclusion rects\n     * change. This could be the result of an animation or other layout change, or a view calling\n     * {@link View#setSystemGestureExclusionRects(List)}.\n     *\n     * @param listener listener to add\n     * @see View#setSystemGestureExclusionRects(List)\n     ",
    "links" : [ "android.view.View#setSystemGestureExclusionRects(List)" ]
  }, {
    "name" : "public void removeOnSystemGestureExclusionRectsChangedListener(@NonNull Consumer<List<Rect>> listener)",
    "returnType" : "void",
    "comment" : "\n     * Unsubscribe the given listener from gesture exclusion rect changes.\n     * @see #addOnSystemGestureExclusionRectsChangedListener(Consumer)\n     * @see View#setSystemGestureExclusionRects(List)\n     ",
    "links" : [ ]
  }, {
    "name" : "private void checkIsAlive()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isAlive()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether this ViewTreeObserver is alive. When an observer is not alive,\n     * any call to a method (except this one) will throw an exception.\n     *\n     * If an application keeps a long-lived reference to this ViewTreeObserver, it should\n     * always check for the result of this method before calling any other method.\n     *\n     * @return True if this object is alive and be used, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void kill()",
    "returnType" : "void",
    "comment" : "\n     * Marks this ViewTreeObserver as not alive. After invoking this method, invoking\n     * any other method but {@link #isAlive()} and {@link #kill()} will throw an Exception.\n     *\n     * @hide\n     ",
    "links" : [ "#isAlive()", "#kill()" ]
  }, {
    "name" : " final void dispatchOnWindowAttachedChange(boolean attached)",
    "returnType" : "void",
    "comment" : "\n     * Notifies registered listeners that window has been attached/detached.\n     ",
    "links" : [ ]
  }, {
    "name" : " final void dispatchOnWindowFocusChange(boolean hasFocus)",
    "returnType" : "void",
    "comment" : "\n     * Notifies registered listeners that window focus has changed.\n     ",
    "links" : [ ]
  }, {
    "name" : " final void dispatchOnGlobalFocusChange(View oldFocus, View newFocus)",
    "returnType" : "void",
    "comment" : "\n     * Notifies registered listeners that focus has changed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void dispatchOnGlobalLayout()",
    "returnType" : "void",
    "comment" : "\n     * Notifies registered listeners that a global layout happened. This can be called\n     * manually if you are forcing a layout on a View or a hierarchy of Views that are\n     * not attached to a Window or in the GONE state.\n     ",
    "links" : [ ]
  }, {
    "name" : " final boolean hasOnPreDrawListeners()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether there are listeners for on pre-draw events.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean dispatchOnPreDraw()",
    "returnType" : "boolean",
    "comment" : "\n     * Notifies registered listeners that the drawing pass is about to start. If a\n     * listener returns true, then the drawing pass is canceled and rescheduled. This can\n     * be called manually if you are forcing the drawing on a View or a hierarchy of Views\n     * that are not attached to a Window or in the GONE state.\n     *\n     * @return True if the current draw should be canceled and rescheduled, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void dispatchOnWindowShown()",
    "returnType" : "void",
    "comment" : "\n     * Notifies registered listeners that the window is now shown\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void dispatchOnDraw()",
    "returnType" : "void",
    "comment" : "\n     * Notifies registered listeners that the drawing pass is about to start.\n     ",
    "links" : [ ]
  }, {
    "name" : " final void dispatchOnTouchModeChanged(boolean inTouchMode)",
    "returnType" : "void",
    "comment" : "\n     * Notifies registered listeners that the touch mode has changed.\n     *\n     * @param inTouchMode True if the touch mode is now enabled, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : " final void dispatchOnScrollChanged()",
    "returnType" : "void",
    "comment" : "\n     * Notifies registered listeners that something has scrolled.\n     ",
    "links" : [ ]
  }, {
    "name" : " final boolean hasComputeInternalInsetsListeners()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether there are listeners for computing internal insets.\n     ",
    "links" : [ ]
  }, {
    "name" : " final void dispatchOnComputeInternalInsets(InternalInsetsInfo inoutInfo)",
    "returnType" : "void",
    "comment" : "\n     * Calls all listeners to compute the current insets.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void dispatchOnEnterAnimationComplete()",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " void dispatchOnSystemGestureExclusionRectsChanged(@NonNull List<Rect> rects)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "mOnWindowFocusListeners", "mOnWindowAttachListeners", "mOnGlobalFocusListeners", "mOnTouchModeChangeListeners", "mOnEnterAnimationCompleteListeners", "mOnGlobalLayoutListeners", "mOnComputeInternalInsetsListeners", "mOnScrollChangedListeners", "mOnPreDrawListeners", "mOnWindowShownListeners", "mGestureExclusionListeners", "mInDispatchOnDraw", "mOnDrawListeners", "sIllegalOnDrawModificationIsFatal", "mOnFrameCommitListeners", "mWindowShown", "mAlive" ],
  "methodNames" : [ " void merge(ViewTreeObserver observer)", "public void addOnWindowAttachListener(OnWindowAttachListener listener)", "public void removeOnWindowAttachListener(OnWindowAttachListener victim)", "public void addOnWindowFocusChangeListener(OnWindowFocusChangeListener listener)", "public void removeOnWindowFocusChangeListener(OnWindowFocusChangeListener victim)", "public void addOnGlobalFocusChangeListener(OnGlobalFocusChangeListener listener)", "public void removeOnGlobalFocusChangeListener(OnGlobalFocusChangeListener victim)", "public void addOnGlobalLayoutListener(OnGlobalLayoutListener listener)", "public void removeGlobalOnLayoutListener(OnGlobalLayoutListener victim)", "public void removeOnGlobalLayoutListener(OnGlobalLayoutListener victim)", "public void addOnPreDrawListener(OnPreDrawListener listener)", "public void removeOnPreDrawListener(OnPreDrawListener victim)", "public void addOnWindowShownListener(OnWindowShownListener listener)", "public void removeOnWindowShownListener(OnWindowShownListener victim)", "public void addOnDrawListener(OnDrawListener listener)", "public void removeOnDrawListener(OnDrawListener victim)", "public void registerFrameCommitCallback(@NonNull Runnable callback)", " ArrayList<Runnable> captureFrameCommitCallbacks()", "public boolean unregisterFrameCommitCallback(@NonNull Runnable callback)", "public void addOnScrollChangedListener(OnScrollChangedListener listener)", "public void removeOnScrollChangedListener(OnScrollChangedListener victim)", "public void addOnTouchModeChangeListener(OnTouchModeChangeListener listener)", "public void removeOnTouchModeChangeListener(OnTouchModeChangeListener victim)", "public void addOnComputeInternalInsetsListener(OnComputeInternalInsetsListener listener)", "public void removeOnComputeInternalInsetsListener(OnComputeInternalInsetsListener victim)", "public void addOnEnterAnimationCompleteListener(OnEnterAnimationCompleteListener listener)", "public void removeOnEnterAnimationCompleteListener(OnEnterAnimationCompleteListener listener)", "public void addOnSystemGestureExclusionRectsChangedListener(@NonNull Consumer<List<Rect>> listener)", "public void removeOnSystemGestureExclusionRectsChangedListener(@NonNull Consumer<List<Rect>> listener)", "private void checkIsAlive()", "public boolean isAlive()", "private void kill()", " final void dispatchOnWindowAttachedChange(boolean attached)", " final void dispatchOnWindowFocusChange(boolean hasFocus)", " final void dispatchOnGlobalFocusChange(View oldFocus, View newFocus)", "public final void dispatchOnGlobalLayout()", " final boolean hasOnPreDrawListeners()", "public final boolean dispatchOnPreDraw()", "public final void dispatchOnWindowShown()", "public final void dispatchOnDraw()", " final void dispatchOnTouchModeChanged(boolean inTouchMode)", " final void dispatchOnScrollChanged()", " final boolean hasComputeInternalInsetsListeners()", " final void dispatchOnComputeInternalInsets(InternalInsetsInfo inoutInfo)", "public final void dispatchOnEnterAnimationComplete()", " void dispatchOnSystemGestureExclusionRectsChanged(@NonNull List<Rect> rects)" ]
}