{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/service/translation/TranslationService.java",
  "packageName" : "android.service.translation",
  "className" : "TranslationService",
  "comment" : "\n * Service for translating text.\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SERVICE_INTERFACE",
    "type" : "String",
    "comment" : "\n     * The {@link Intent} that must be declared as handled by the service.\n     *\n     * <p>To be supported, the service must also require the\n     * {@link android.Manifest.permission#BIND_TRANSLATION_SERVICE} permission so\n     * that other applications can not abuse it.\n     ",
    "links" : [ "android.content.Intent", "android.Manifest.permission#BIND_TRANSLATION_SERVICE" ]
  }, {
    "name" : "SERVICE_META_DATA",
    "type" : "String",
    "comment" : "\n     * Name under which a TranslationService component publishes information about itself.\n     *\n     * <p>This meta-data should reference an XML resource containing a\n     * <code>&lt;{@link\n     * android.R.styleable#TranslationService translation-service}&gt;</code> tag.\n     *\n     * <p>Here's an example of how to use it on {@code AndroidManifest.xml}:\n     * <pre> &lt;translation-service\n     *     android:settingsActivity=\"foo.bar.SettingsActivity\"\n     *     . . .\n     * /&gt;</pre>\n     ",
    "links" : [ "android.R.styleable#TranslationService" ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallback",
    "type" : "ITranslationServiceCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInterface",
    "type" : "ITranslationService",
    "comment" : "\n     * Binder to receive calls from system server.\n     ",
    "links" : [ ]
  }, {
    "name" : "mClientInterface",
    "type" : "ITranslationDirectManager",
    "comment" : "\n     * Binder that receives calls from the app.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void onCreate()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final IBinder onBind(@NonNull Intent intent)",
    "returnType" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onConnected()",
    "returnType" : "void",
    "comment" : "\n     * Called when the Android system connects to service.\n     *\n     * <p>You should generally do initialization here rather than in {@link #onCreate}.\n     ",
    "links" : [ "#onCreate" ]
  }, {
    "name" : "public void onDisconnected()",
    "returnType" : "void",
    "comment" : "\n     * Called when the Android system disconnects from the service.\n     *\n     * <p> At this point this service may no longer be an active {@link TranslationService}.\n     * It should not make calls on {@link TranslationManager} that requires the caller to be\n     * the current service.\n     ",
    "links" : [ "android.view.translation.TranslationManager", "android.service.translation.TranslationService" ]
  }, {
    "name" : "public abstract void onCreateTranslationSession(@NonNull TranslationContext translationContext, int sessionId, @NonNull Consumer<Boolean> callback)",
    "returnType" : "void",
    "comment" : " solution to make it's safe.",
    "links" : [ ]
  }, {
    "name" : "public void onCreateTranslationSession(@NonNull TranslationContext translationContext, int sessionId)",
    "returnType" : "void",
    "comment" : "\n     * @removed use {@link #onCreateTranslationSession(TranslationContext, int, Consumer)}\n     * instead.\n     ",
    "links" : [ "#onCreateTranslationSession(TranslationContext" ]
  }, {
    "name" : "public abstract void onFinishTranslationSession(int sessionId)",
    "returnType" : "void",
    "comment" : "\n     * Called when a translation session is finished.\n     *\n     * <p>The translation session is finished when the client calls {@link Translator#destroy()} on\n     * the corresponding translator.\n     *\n     * @param sessionId id of the session that finished.\n     ",
    "links" : [ "android.view.translation.Translator#destroy()" ]
  }, {
    "name" : "public void onTranslationRequest(@NonNull TranslationRequest request, int sessionId, @Nullable CancellationSignal cancellationSignal, @NonNull OnTranslationResultCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * @removed use\n     * {@link #onTranslationRequest(TranslationRequest, int, CancellationSignal, Consumer)} instead.\n     ",
    "links" : [ "#onTranslationRequest(TranslationRequest" ]
  }, {
    "name" : "public abstract void onTranslationRequest(@NonNull TranslationRequest request, int sessionId, @Nullable CancellationSignal cancellationSignal, @NonNull Consumer<TranslationResponse> callback)",
    "returnType" : "void",
    "comment" : "\n     * Called to the service with a {@link TranslationRequest} to be translated.\n     *\n     * <p>The service must call {@code callback.accept()} with the {@link TranslationResponse}. If\n     * {@link TranslationRequest#FLAG_PARTIAL_RESPONSES} was set, the service may call\n     * {@code callback.accept()} multiple times with partial responses.</p>\n     *\n     * @param request The translation request containing the data to be translated.\n     * @param sessionId id of the session that sent the translation request.\n     * @param cancellationSignal A {@link CancellationSignal} that notifies when a client has\n     *                           cancelled the operation in progress.\n     * @param callback {@link Consumer} to pass back the translation response.\n     ",
    "links" : [ "java.util.function.Consumer", "android.view.translation.TranslationRequest", "android.view.translation.TranslationResponse", "android.os.CancellationSignal", "android.view.translation.TranslationRequest#FLAG_PARTIAL_RESPONSES" ]
  }, {
    "name" : "public abstract void onTranslationCapabilitiesRequest(@TranslationSpec.DataFormat int sourceFormat, @TranslationSpec.DataFormat int targetFormat, @NonNull Consumer<Set<TranslationCapability>> callback)",
    "returnType" : "void",
    "comment" : "\n     * Called to request a set of {@link TranslationCapability}s that are supported by the service.\n     *\n     * <p>The set of translation capabilities are limited to those supporting the source and target\n     * {@link TranslationSpec.DataFormat}. e.g. Calling this with\n     * {@link TranslationSpec#DATA_FORMAT_TEXT} as source and target returns only capabilities that\n     * translates text to text.</p>\n     *\n     * <p>Must call {@code callback.accept} to pass back the set of translation capabilities.</p>\n     *\n     * @param sourceFormat data format restriction of the translation source spec.\n     * @param targetFormat data format restriction of the translation target spec.\n     * @param callback {@link Consumer} to pass back the set of translation capabilities.\n     ",
    "links" : [ "java.util.function.Consumer", "TranslationSpec.DataFormat", "android.view.translation.TranslationCapability", "android.view.translation.TranslationSpec#DATA_FORMAT_TEXT" ]
  }, {
    "name" : "public final void updateTranslationCapability(@NonNull TranslationCapability capability)",
    "returnType" : "void",
    "comment" : "\n     * Called by the service to notify an update in existing {@link TranslationCapability}s.\n     *\n     * @param capability the updated {@link TranslationCapability} with its new states and flags.\n     ",
    "links" : [ "android.view.translation.TranslationCapability" ]
  }, {
    "name" : "private void handleOnConnected(@NonNull IBinder callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleOnCreateTranslationSession(@NonNull TranslationContext translationContext, int sessionId, IResultReceiver resultReceiver)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleOnTranslationCapabilitiesRequest(@TranslationSpec.DataFormat int sourceFormat, @TranslationSpec.DataFormat int targetFormat, @NonNull ResultReceiver resultReceiver)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isValidCapabilities(@TranslationSpec.DataFormat int sourceFormat, @TranslationSpec.DataFormat int targetFormat, Set<TranslationCapability> capabilities)",
    "returnType" : "boolean",
    "comment" : "\n     * Helper method to validate capabilities and format compatibility.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void onCreate()", "public final IBinder onBind(@NonNull Intent intent)", "public void onConnected()", "public void onDisconnected()", "public abstract void onCreateTranslationSession(@NonNull TranslationContext translationContext, int sessionId, @NonNull Consumer<Boolean> callback)", "public void onCreateTranslationSession(@NonNull TranslationContext translationContext, int sessionId)", "public abstract void onFinishTranslationSession(int sessionId)", "public void onTranslationRequest(@NonNull TranslationRequest request, int sessionId, @Nullable CancellationSignal cancellationSignal, @NonNull OnTranslationResultCallback callback)", "public abstract void onTranslationRequest(@NonNull TranslationRequest request, int sessionId, @Nullable CancellationSignal cancellationSignal, @NonNull Consumer<TranslationResponse> callback)", "public abstract void onTranslationCapabilitiesRequest(@TranslationSpec.DataFormat int sourceFormat, @TranslationSpec.DataFormat int targetFormat, @NonNull Consumer<Set<TranslationCapability>> callback)", "public final void updateTranslationCapability(@NonNull TranslationCapability capability)", "private void handleOnConnected(@NonNull IBinder callback)", "private void handleOnCreateTranslationSession(@NonNull TranslationContext translationContext, int sessionId, IResultReceiver resultReceiver)", "private void handleOnTranslationCapabilitiesRequest(@TranslationSpec.DataFormat int sourceFormat, @TranslationSpec.DataFormat int targetFormat, @NonNull ResultReceiver resultReceiver)", "private boolean isValidCapabilities(@TranslationSpec.DataFormat int sourceFormat, @TranslationSpec.DataFormat int targetFormat, Set<TranslationCapability> capabilities)" ],
  "variableNames" : [ "TAG", "SERVICE_INTERFACE", "SERVICE_META_DATA", "mHandler", "mCallback", "mInterface", "mClientInterface" ]
}