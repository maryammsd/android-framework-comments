{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/graphics/text/OptimizingLineBreaker.java",
  "packageName" : "android.graphics.text",
  "className" : "OptimizingLineBreaker",
  "comment" : "\n * A more complex version of line breaking where we try to prevent the right edge from being too\n * jagged.\n ",
  "variables" : [ ],
  "methods" : [ {
    "name" : "public Result computeBreaks()",
    "returnType" : "Result",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private LineMetrics computeMetrics(int start, int end)",
    "returnType" : "LineMetrics",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static float computeDemerits(float maxWidth, float width, boolean finalBreak, float penalty)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int desperateBreak(int start, int limit, float maxWidth, @NonNull LineMetrics lineMetrics)",
    "returnType" : "int",
    "comment" : "\n     * @return the last break position or -1 if failed.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ ],
  "methodNames" : [ "public Result computeBreaks()", "private LineMetrics computeMetrics(int start, int end)", "private static float computeDemerits(float maxWidth, float width, boolean finalBreak, float penalty)", "private int desperateBreak(int start, int limit, float maxWidth, @NonNull LineMetrics lineMetrics)" ]
}