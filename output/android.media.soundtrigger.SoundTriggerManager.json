{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/media/soundtrigger/SoundTriggerManager.java",
  "packageName" : "android.media.soundtrigger",
  "className" : "SoundTriggerManager",
  "comment" : "\n * This class provides management of non-voice (general sound trigger) based sound recognition\n * models. Usage of this class is restricted to system or signature applications only. This allows\n * OEMs to write apps that can manage non-voice based sound trigger models.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "DBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSoundTriggerService",
    "type" : "ISoundTriggerService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mReceiverInstanceMap",
    "type" : "HashMap<UUID, SoundTriggerDetector>",
    "comment" : " the createSoundTriggerDetector() call.",
    "links" : [ ]
  }, {
    "name" : "FLAG_MESSAGE_TYPE_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * Default message type.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_MESSAGE_TYPE_RECOGNITION_EVENT",
    "type" : "int",
    "comment" : "\n     * Contents of EXTRA_MESSAGE_TYPE extra for a RecognitionEvent.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_MESSAGE_TYPE_RECOGNITION_ERROR",
    "type" : "int",
    "comment" : "\n     * Contents of EXTRA_MESSAGE_TYPE extra for recognition error events.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_MESSAGE_TYPE_RECOGNITION_PAUSED",
    "type" : "int",
    "comment" : "\n     * Contents of EXTRA_MESSAGE_TYPE extra for a recognition paused events.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_MESSAGE_TYPE_RECOGNITION_RESUMED",
    "type" : "int",
    "comment" : "\n     * Contents of EXTRA_MESSAGE_TYPE extra for recognition resumed events.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_MESSAGE_TYPE",
    "type" : "String",
    "comment" : "\n     * Extra key in the intent for the type of the message.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_RECOGNITION_EVENT",
    "type" : "String",
    "comment" : "\n     * Extra key in the intent that holds the RecognitionEvent parcelable.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_STATUS",
    "type" : "String",
    "comment" : "\n     * Extra key in the intent that holds the status in an error message.\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void updateModel(Model model)",
    "returnType" : "void",
    "comment" : "\n     * Updates the given sound trigger model.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Model getModel(UUID soundModelId)",
    "returnType" : "Model",
    "comment" : "\n     * Get {@link SoundTriggerManager.Model} which is registered with the passed UUID\n     *\n     * @param soundModelId UUID associated with a loaded model\n     * @return {@link SoundTriggerManager.Model} associated with UUID soundModelId\n     ",
    "links" : [ "SoundTriggerManager.Model" ]
  }, {
    "name" : "public void deleteModel(UUID soundModelId)",
    "returnType" : "void",
    "comment" : "\n     * Deletes the sound model represented by the provided UUID.\n     ",
    "links" : [ ]
  }, {
    "name" : "public SoundTriggerDetector createSoundTriggerDetector(UUID soundModelId, @NonNull SoundTriggerDetector.Callback callback, @Nullable Handler handler)",
    "returnType" : "SoundTriggerDetector",
    "comment" : "\n     * Creates an instance of {@link SoundTriggerDetector} which can be used to start/stop\n     * recognition on the model and register for triggers from the model. Note that this call\n     * invalidates any previously returned instances for the same sound model Uuid.\n     *\n     * @param soundModelId UUID of the sound model to create the receiver object for.\n     * @param callback Instance of the {@link SoundTriggerDetector#Callback} object for the\n     * callbacks for the given sound model.\n     * @param handler The Handler to use for the callback operations. A null value will use the\n     * current thread's Looper.\n     * @return Instance of {@link SoundTriggerDetector} or null on error.\n     ",
    "links" : [ "android.media.soundtrigger.SoundTriggerDetector#Callback", "android.media.soundtrigger.SoundTriggerDetector" ]
  }, {
    "name" : "public int loadSoundModel(SoundModel soundModel)",
    "returnType" : "int",
    "comment" : "\n     * Loads a given sound model into the sound trigger. Note the model will be unloaded if there is\n     * an error/the system service is restarted.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int startRecognition(@NonNull UUID soundModelId, @Nullable Bundle params, @NonNull ComponentName detectionService, @NonNull RecognitionConfig config)",
    "returnType" : "int",
    "comment" : "\n     * Starts recognition for the given model id. All events from the model will be sent to the\n     * service.\n     *\n     * <p>This only supports generic sound trigger events. For keyphrase events, please use\n     * {@link android.service.voice.VoiceInteractionService}.\n     *\n     * @param soundModelId Id of the sound model\n     * @param params Opaque data sent to each service call of the service as the {@code params}\n     *               argument\n     * @param detectionService The component name of the service that should receive the events.\n     *                         Needs to subclass {@link SoundTriggerDetectionService}\n     * @param config Configures the recognition\n     *\n     * @return {@link SoundTrigger#STATUS_OK} if the recognition could be started, error code\n     *         otherwise\n     *\n     * @hide\n     ",
    "links" : [ "android.service.voice.VoiceInteractionService", "android.media.soundtrigger.SoundTriggerDetectionService", "android.hardware.soundtrigger.SoundTrigger#STATUS_OK" ]
  }, {
    "name" : "public int stopRecognition(UUID soundModelId)",
    "returnType" : "int",
    "comment" : "\n     * Stops the given model's recognition.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int unloadSoundModel(UUID soundModelId)",
    "returnType" : "int",
    "comment" : "\n     * Removes the given model from memory. Will also stop any pending recognitions.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isRecognitionActive(UUID soundModelId)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the given model has had detection started on it.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getDetectionServiceOperationsTimeout()",
    "returnType" : "int",
    "comment" : "\n     * Get the amount of time (in milliseconds) an operation of the\n     * {@link ISoundTriggerDetectionService} is allowed to ask.\n     *\n     * @return The amount of time an sound trigger detection service operation is allowed to last\n     ",
    "links" : [ "ISoundTriggerDetectionService" ]
  }, {
    "name" : "public int getModelState(UUID soundModelId)",
    "returnType" : "int",
    "comment" : "\n     * Asynchronously get state of the indicated model.  The model state is returned as\n     * a recognition event in the callback that was registered in the startRecognition\n     * method.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public SoundTrigger.ModuleProperties getModuleProperties()",
    "returnType" : "SoundTrigger.ModuleProperties",
    "comment" : "\n     * Get the hardware sound trigger module properties currently loaded.\n     *\n     * @return The properties currently loaded. Returns null if no supported hardware loaded.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int setParameter(@Nullable UUID soundModelId, @ModelParams int modelParam, int value)",
    "returnType" : "int",
    "comment" : "\n     * Set a model specific {@link ModelParams} with the given value. This\n     * parameter will keep its value for the duration the model is loaded regardless of starting and\n     * stopping recognition. Once the model is unloaded, the value will be lost.\n     * {@link SoundTriggerManager#queryParameter} should be checked first before calling this\n     * method.\n     *\n     * @param soundModelId UUID of model to apply the parameter value to.\n     * @param modelParam   {@link ModelParams}\n     * @param value        Value to set\n     * @return - {@link SoundTrigger#STATUS_OK} in case of success\n     *         - {@link SoundTrigger#STATUS_NO_INIT} if the native service cannot be reached\n     *         - {@link SoundTrigger#STATUS_BAD_VALUE} invalid input parameter\n     *         - {@link SoundTrigger#STATUS_INVALID_OPERATION} if the call is out of sequence or\n     *           if API is not supported by HAL\n     ",
    "links" : [ "android.hardware.soundtrigger.SoundTrigger#STATUS_BAD_VALUE", "android.hardware.soundtrigger.SoundTrigger#STATUS_INVALID_OPERATION", "android.media.soundtrigger.SoundTriggerManager#queryParameter", "android.hardware.soundtrigger.ModelParams", "android.hardware.soundtrigger.SoundTrigger#STATUS_OK", "android.hardware.soundtrigger.SoundTrigger#STATUS_NO_INIT" ]
  }, {
    "name" : "public int getParameter(@NonNull UUID soundModelId, @ModelParams int modelParam)",
    "returnType" : "int",
    "comment" : "\n     * Get a model specific {@link ModelParams}. This parameter will keep its value\n     * for the duration the model is loaded regardless of starting and stopping recognition.\n     * Once the model is unloaded, the value will be lost. If the value is not set, a default\n     * value is returned. See {@link ModelParams} for parameter default values.\n     * {@link SoundTriggerManager#queryParameter} should be checked first before\n     * calling this method. Otherwise, an exception can be thrown.\n     *\n     * @param soundModelId UUID of model to get parameter\n     * @param modelParam   {@link ModelParams}\n     * @return value of parameter\n     ",
    "links" : [ "android.media.soundtrigger.SoundTriggerManager#queryParameter", "android.hardware.soundtrigger.ModelParams" ]
  }, {
    "name" : "public ModelParamRange queryParameter(@Nullable UUID soundModelId, @ModelParams int modelParam)",
    "returnType" : "ModelParamRange",
    "comment" : "\n     * Determine if parameter control is supported for the given model handle.\n     * This method should be checked prior to calling {@link SoundTriggerManager#setParameter} or\n     * {@link SoundTriggerManager#getParameter}.\n     *\n     * @param soundModelId handle of model to get parameter\n     * @param modelParam {@link ModelParams}\n     * @return supported range of parameter, null if not supported\n     ",
    "links" : [ "android.media.soundtrigger.SoundTriggerManager#setParameter", "android.media.soundtrigger.SoundTriggerManager#getParameter", "android.hardware.soundtrigger.ModelParams" ]
  } ],
  "variableNames" : [ "DBG", "TAG", "mContext", "mSoundTriggerService", "mReceiverInstanceMap", "FLAG_MESSAGE_TYPE_UNKNOWN", "FLAG_MESSAGE_TYPE_RECOGNITION_EVENT", "FLAG_MESSAGE_TYPE_RECOGNITION_ERROR", "FLAG_MESSAGE_TYPE_RECOGNITION_PAUSED", "FLAG_MESSAGE_TYPE_RECOGNITION_RESUMED", "EXTRA_MESSAGE_TYPE", "EXTRA_RECOGNITION_EVENT", "EXTRA_STATUS" ],
  "methodNames" : [ "public void updateModel(Model model)", "public Model getModel(UUID soundModelId)", "public void deleteModel(UUID soundModelId)", "public SoundTriggerDetector createSoundTriggerDetector(UUID soundModelId, @NonNull SoundTriggerDetector.Callback callback, @Nullable Handler handler)", "public int loadSoundModel(SoundModel soundModel)", "public int startRecognition(@NonNull UUID soundModelId, @Nullable Bundle params, @NonNull ComponentName detectionService, @NonNull RecognitionConfig config)", "public int stopRecognition(UUID soundModelId)", "public int unloadSoundModel(UUID soundModelId)", "public boolean isRecognitionActive(UUID soundModelId)", "public int getDetectionServiceOperationsTimeout()", "public int getModelState(UUID soundModelId)", "public SoundTrigger.ModuleProperties getModuleProperties()", "public int setParameter(@Nullable UUID soundModelId, @ModelParams int modelParam, int value)", "public int getParameter(@NonNull UUID soundModelId, @ModelParams int modelParam)", "public ModelParamRange queryParameter(@Nullable UUID soundModelId, @ModelParams int modelParam)" ]
}