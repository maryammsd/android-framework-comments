{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/content/Loader.java",
  "packageName" : "android.content",
  "className" : "Loader",
  "comment" : "\n * A class that performs asynchronous loading of data. While Loaders are active\n * they should monitor the source of their data and deliver new results when the contents\n * change.  See {@link android.app.LoaderManager} for more detail.\n *\n * <p><b>Note on threading:</b> Clients of loaders should as a rule perform\n * any calls on to a Loader from the main thread of their process (that is,\n * the thread the Activity callbacks and other things occur on).  Subclasses\n * of Loader (such as {@link AsyncTaskLoader}) will often perform their work\n * in a separate thread, but when delivering their results this too should\n * be done on the main thread.</p>\n *\n * <p>Subclasses generally must implement at least {@link #onStartLoading()},\n * {@link #onStopLoading()}, {@link #onForceLoad()}, and {@link #onReset()}.</p>\n *\n * <p>Most implementations should not derive directly from this class, but\n * instead inherit from {@link AsyncTaskLoader}.</p>\n *\n * <div class=\"special reference\">\n * <h3>Developer Guides</h3>\n * <p>For more information about using loaders, read the\n * <a href=\"{@docRoot}guide/components/loaders.html\">Loaders</a> developer guide.</p>\n * </div>\n *\n * @param <D> The result returned when the load is complete\n *\n * @deprecated Use the <a href=\"{@docRoot}tools/extras/support-library.html\">Support Library</a>\n *      {@link android.support.v4.content.Loader}\n ",
  "variables" : [ {
    "name" : "mId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mListener",
    "type" : "OnLoadCompleteListener<D>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnLoadCanceledListener",
    "type" : "OnLoadCanceledListener<D>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStarted",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAbandoned",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mReset",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContentChanged",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProcessingChange",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void deliverResult(D data)",
    "returnType" : "void",
    "comment" : "\n     * Sends the result of the load to the registered listener. Should only be called by subclasses.\n     *\n     * Must be called from the process's main thread.\n     *\n     * @param data the result of the load\n     ",
    "links" : [ ]
  }, {
    "name" : "public void deliverCancellation()",
    "returnType" : "void",
    "comment" : "\n     * Informs the registered {@link OnLoadCanceledListener} that the load has been canceled.\n     * Should only be called by subclasses.\n     *\n     * Must be called from the process's main thread.\n     ",
    "links" : [ "OnLoadCanceledListener" ]
  }, {
    "name" : "public Context getContext()",
    "returnType" : "Context",
    "comment" : "\n     * @return an application context retrieved from the Context passed to the constructor.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getId()",
    "returnType" : "int",
    "comment" : "\n     * @return the ID of this loader\n     ",
    "links" : [ ]
  }, {
    "name" : "public void registerListener(int id, OnLoadCompleteListener<D> listener)",
    "returnType" : "void",
    "comment" : "\n     * Registers a class that will receive callbacks when a load is complete.\n     * The callback will be called on the process's main thread so it's safe to\n     * pass the results to widgets.\n     *\n     * <p>Must be called from the process's main thread.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void unregisterListener(OnLoadCompleteListener<D> listener)",
    "returnType" : "void",
    "comment" : "\n     * Remove a listener that was previously added with {@link #registerListener}.\n     *\n     * Must be called from the process's main thread.\n     ",
    "links" : [ "#registerListener" ]
  }, {
    "name" : "public void registerOnLoadCanceledListener(OnLoadCanceledListener<D> listener)",
    "returnType" : "void",
    "comment" : "\n     * Registers a listener that will receive callbacks when a load is canceled.\n     * The callback will be called on the process's main thread so it's safe to\n     * pass the results to widgets.\n     *\n     * Must be called from the process's main thread.\n     *\n     * @param listener The listener to register.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void unregisterOnLoadCanceledListener(OnLoadCanceledListener<D> listener)",
    "returnType" : "void",
    "comment" : "\n     * Unregisters a listener that was previously added with\n     * {@link #registerOnLoadCanceledListener}.\n     *\n     * Must be called from the process's main thread.\n     *\n     * @param listener The listener to unregister.\n     ",
    "links" : [ "#registerOnLoadCanceledListener" ]
  }, {
    "name" : "public boolean isStarted()",
    "returnType" : "boolean",
    "comment" : "\n     * Return whether this load has been started.  That is, its {@link #startLoading()}\n     * has been called and no calls to {@link #stopLoading()} or\n     * {@link #reset()} have yet been made.\n     ",
    "links" : [ "#startLoading()", "#stopLoading()", "#reset()" ]
  }, {
    "name" : "public boolean isAbandoned()",
    "returnType" : "boolean",
    "comment" : "\n     * Return whether this loader has been abandoned.  In this state, the\n     * loader <em>must not</em> report any new data, and <em>must</em> keep\n     * its last reported data valid until it is finally reset.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isReset()",
    "returnType" : "boolean",
    "comment" : "\n     * Return whether this load has been reset.  That is, either the loader\n     * has not yet been started for the first time, or its {@link #reset()}\n     * has been called.\n     ",
    "links" : [ "#reset()" ]
  }, {
    "name" : "public final void startLoading()",
    "returnType" : "void",
    "comment" : "\n     * This function will normally be called for you automatically by\n     * {@link android.app.LoaderManager} when the associated fragment/activity\n     * is being started.  When using a Loader with {@link android.app.LoaderManager},\n     * you <em>must not</em> call this method yourself, or you will conflict\n     * with its management of the Loader.\n     *\n     * Starts an asynchronous load of the Loader's data. When the result\n     * is ready the callbacks will be called on the process's main thread.\n     * If a previous load has been completed and is still valid\n     * the result may be passed to the callbacks immediately.\n     * The loader will monitor the source of\n     * the data set and may deliver future callbacks if the source changes.\n     * Calling {@link #stopLoading} will stop the delivery of callbacks.\n     *\n     * <p>This updates the Loader's internal state so that\n     * {@link #isStarted()} and {@link #isReset()} will return the correct\n     * values, and then calls the implementation's {@link #onStartLoading()}.\n     *\n     * <p>Must be called from the process's main thread.\n     ",
    "links" : [ "#stopLoading", "#isStarted()", "#onStartLoading()", "#isReset()", "android.app.LoaderManager" ]
  }, {
    "name" : "protected void onStartLoading()",
    "returnType" : "void",
    "comment" : "\n     * Subclasses must implement this to take care of loading their data,\n     * as per {@link #startLoading()}.  This is not called by clients directly,\n     * but as a result of a call to {@link #startLoading()}.\n     ",
    "links" : [ "#startLoading()" ]
  }, {
    "name" : "public boolean cancelLoad()",
    "returnType" : "boolean",
    "comment" : "\n     * Attempt to cancel the current load task.\n     * Must be called on the main thread of the process.\n     *\n     * <p>Cancellation is not an immediate operation, since the load is performed\n     * in a background thread.  If there is currently a load in progress, this\n     * method requests that the load be canceled, and notes this is the case;\n     * once the background thread has completed its work its remaining state\n     * will be cleared.  If another load request comes in during this time,\n     * it will be held until the canceled load is complete.\n     *\n     * @return Returns <tt>false</tt> if the task could not be canceled,\n     * typically because it has already completed normally, or\n     * because {@link #startLoading()} hasn't been called; returns\n     * <tt>true</tt> otherwise.  When <tt>true</tt> is returned, the task\n     * is still running and the {@link OnLoadCanceledListener} will be called\n     * when the task completes.\n     ",
    "links" : [ "#startLoading()", "OnLoadCanceledListener" ]
  }, {
    "name" : "protected boolean onCancelLoad()",
    "returnType" : "boolean",
    "comment" : "\n     * Subclasses must implement this to take care of requests to {@link #cancelLoad()}.\n     * This will always be called from the process's main thread.\n     *\n     * @return Returns <tt>false</tt> if the task could not be canceled,\n     * typically because it has already completed normally, or\n     * because {@link #startLoading()} hasn't been called; returns\n     * <tt>true</tt> otherwise.  When <tt>true</tt> is returned, the task\n     * is still running and the {@link OnLoadCanceledListener} will be called\n     * when the task completes.\n     ",
    "links" : [ "#startLoading()", "OnLoadCanceledListener", "#cancelLoad()" ]
  }, {
    "name" : "public void forceLoad()",
    "returnType" : "void",
    "comment" : "\n     * Force an asynchronous load. Unlike {@link #startLoading()} this will ignore a previously\n     * loaded data set and load a new one.  This simply calls through to the\n     * implementation's {@link #onForceLoad()}.  You generally should only call this\n     * when the loader is started -- that is, {@link #isStarted()} returns true.\n     *\n     * <p>Must be called from the process's main thread.\n     ",
    "links" : [ "#startLoading()", "#isStarted()", "#onForceLoad()" ]
  }, {
    "name" : "protected void onForceLoad()",
    "returnType" : "void",
    "comment" : "\n     * Subclasses must implement this to take care of requests to {@link #forceLoad()}.\n     * This will always be called from the process's main thread.\n     ",
    "links" : [ "#forceLoad()" ]
  }, {
    "name" : "public void stopLoading()",
    "returnType" : "void",
    "comment" : "\n     * This function will normally be called for you automatically by\n     * {@link android.app.LoaderManager} when the associated fragment/activity\n     * is being stopped.  When using a Loader with {@link android.app.LoaderManager},\n     * you <em>must not</em> call this method yourself, or you will conflict\n     * with its management of the Loader.\n     *\n     * <p>Stops delivery of updates until the next time {@link #startLoading()} is called.\n     * Implementations should <em>not</em> invalidate their data at this point --\n     * clients are still free to use the last data the loader reported.  They will,\n     * however, typically stop reporting new data if the data changes; they can\n     * still monitor for changes, but must not report them to the client until and\n     * if {@link #startLoading()} is later called.\n     *\n     * <p>This updates the Loader's internal state so that\n     * {@link #isStarted()} will return the correct\n     * value, and then calls the implementation's {@link #onStopLoading()}.\n     *\n     * <p>Must be called from the process's main thread.\n     ",
    "links" : [ "#startLoading()", "#isStarted()", "#onStopLoading()", "android.app.LoaderManager" ]
  }, {
    "name" : "protected void onStopLoading()",
    "returnType" : "void",
    "comment" : "\n     * Subclasses must implement this to take care of stopping their loader,\n     * as per {@link #stopLoading()}.  This is not called by clients directly,\n     * but as a result of a call to {@link #stopLoading()}.\n     * This will always be called from the process's main thread.\n     ",
    "links" : [ "#stopLoading()" ]
  }, {
    "name" : "public void abandon()",
    "returnType" : "void",
    "comment" : "\n     * This function will normally be called for you automatically by\n     * {@link android.app.LoaderManager} when restarting a Loader.  When using\n     * a Loader with {@link android.app.LoaderManager},\n     * you <em>must not</em> call this method yourself, or you will conflict\n     * with its management of the Loader.\n     *\n     * Tell the Loader that it is being abandoned.  This is called prior\n     * to {@link #reset} to have it retain its current data but not report\n     * any new data.\n     ",
    "links" : [ "#reset", "android.app.LoaderManager" ]
  }, {
    "name" : "protected void onAbandon()",
    "returnType" : "void",
    "comment" : "\n     * Subclasses implement this to take care of being abandoned.  This is\n     * an optional intermediate state prior to {@link #onReset()} -- it means that\n     * the client is no longer interested in any new data from the loader,\n     * so the loader must not report any further updates.  However, the\n     * loader <em>must</em> keep its last reported data valid until the final\n     * {@link #onReset()} happens.  You can retrieve the current abandoned\n     * state with {@link #isAbandoned}.\n     ",
    "links" : [ "#isAbandoned", "#onReset()" ]
  }, {
    "name" : "public void reset()",
    "returnType" : "void",
    "comment" : "\n     * This function will normally be called for you automatically by\n     * {@link android.app.LoaderManager} when destroying a Loader.  When using\n     * a Loader with {@link android.app.LoaderManager},\n     * you <em>must not</em> call this method yourself, or you will conflict\n     * with its management of the Loader.\n     *\n     * Resets the state of the Loader.  The Loader should at this point free\n     * all of its resources, since it may never be called again; however, its\n     * {@link #startLoading()} may later be called at which point it must be\n     * able to start running again.\n     *\n     * <p>This updates the Loader's internal state so that\n     * {@link #isStarted()} and {@link #isReset()} will return the correct\n     * values, and then calls the implementation's {@link #onReset()}.\n     *\n     * <p>Must be called from the process's main thread.\n     ",
    "links" : [ "#startLoading()", "#isStarted()", "#onReset()", "#isReset()", "android.app.LoaderManager" ]
  }, {
    "name" : "protected void onReset()",
    "returnType" : "void",
    "comment" : "\n     * Subclasses must implement this to take care of resetting their loader,\n     * as per {@link #reset()}.  This is not called by clients directly,\n     * but as a result of a call to {@link #reset()}.\n     * This will always be called from the process's main thread.\n     ",
    "links" : [ "#reset()" ]
  }, {
    "name" : "public boolean takeContentChanged()",
    "returnType" : "boolean",
    "comment" : "\n     * Take the current flag indicating whether the loader's content had\n     * changed while it was stopped.  If it had, true is returned and the\n     * flag is cleared.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void commitContentChanged()",
    "returnType" : "void",
    "comment" : "\n     * Commit that you have actually fully processed a content change that\n     * was returned by {@link #takeContentChanged}.  This is for use with\n     * {@link #rollbackContentChanged()} to handle situations where a load\n     * is cancelled.  Call this when you have completely processed a load\n     * without it being cancelled.\n     ",
    "links" : [ "#rollbackContentChanged()", "#takeContentChanged" ]
  }, {
    "name" : "public void rollbackContentChanged()",
    "returnType" : "void",
    "comment" : "\n     * Report that you have abandoned the processing of a content change that\n     * was returned by {@link #takeContentChanged()} and would like to rollback\n     * to the state where there is again a pending content change.  This is\n     * to handle the case where a data load due to a content change has been\n     * canceled before its data was delivered back to the loader.\n     ",
    "links" : [ "#takeContentChanged()" ]
  }, {
    "name" : "public void onContentChanged()",
    "returnType" : "void",
    "comment" : "\n     * Called when {@link ForceLoadContentObserver} detects a change.  The\n     * default implementation checks to see if the loader is currently started;\n     * if so, it simply calls {@link #forceLoad()}; otherwise, it sets a flag\n     * so that {@link #takeContentChanged()} returns true.\n     *\n     * <p>Must be called from the process's main thread.\n     ",
    "links" : [ "#forceLoad()", "ForceLoadContentObserver", "#takeContentChanged()" ]
  }, {
    "name" : "public String dataToString(D data)",
    "returnType" : "String",
    "comment" : "\n     * For debugging, converts an instance of the Loader's data class to\n     * a string that can be printed.  Must handle a null data.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dump(String prefix, FileDescriptor fd, PrintWriter writer, String[] args)",
    "returnType" : "void",
    "comment" : "\n     * Print the Loader's state into the given stream.\n     *\n     * @param prefix Text to print at the front of each line.\n     * @param fd The raw file descriptor that the dump is being sent to.\n     * @param writer A PrintWriter to which the dump is to be set.\n     * @param args Additional arguments to the dump request.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "mId", "mListener", "mOnLoadCanceledListener", "mContext", "mStarted", "mAbandoned", "mReset", "mContentChanged", "mProcessingChange" ],
  "methodNames" : [ "public void deliverResult(D data)", "public void deliverCancellation()", "public Context getContext()", "public int getId()", "public void registerListener(int id, OnLoadCompleteListener<D> listener)", "public void unregisterListener(OnLoadCompleteListener<D> listener)", "public void registerOnLoadCanceledListener(OnLoadCanceledListener<D> listener)", "public void unregisterOnLoadCanceledListener(OnLoadCanceledListener<D> listener)", "public boolean isStarted()", "public boolean isAbandoned()", "public boolean isReset()", "public final void startLoading()", "protected void onStartLoading()", "public boolean cancelLoad()", "protected boolean onCancelLoad()", "public void forceLoad()", "protected void onForceLoad()", "public void stopLoading()", "protected void onStopLoading()", "public void abandon()", "protected void onAbandon()", "public void reset()", "protected void onReset()", "public boolean takeContentChanged()", "public void commitContentChanged()", "public void rollbackContentChanged()", "public void onContentChanged()", "public String dataToString(D data)", "public String toString()", "public void dump(String prefix, FileDescriptor fd, PrintWriter writer, String[] args)" ]
}