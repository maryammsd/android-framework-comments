{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/provider/CloudMediaProvider.java",
  "packageName" : "android.provider",
  "className" : "CloudMediaProvider",
  "comment" : "\n * Base class for a cloud media provider. A cloud media provider offers read-only access to durable\n * media files, specifically photos and videos stored on a local disk, or files in a cloud storage\n * service. To create a cloud media provider, extend this class, implement the abstract methods,\n * and add it to your manifest like this:\n *\n * <pre class=\"prettyprint\">&lt;manifest&gt;\n *    ...\n *    &lt;application&gt;\n *        ...\n *        &lt;provider\n *            android:name=\"com.example.MyCloudProvider\"\n *            android:authorities=\"com.example.mycloudprovider\"\n *            android:exported=\"true\"\n *            android:permission=\"com.android.providers.media.permission.MANAGE_CLOUD_MEDIA_PROVIDERS\"\n *            &lt;intent-filter&gt;\n *                &lt;action android:name=\"android.content.action.CLOUD_MEDIA_PROVIDER\" /&gt;\n *            &lt;/intent-filter&gt;\n *        &lt;/provider&gt;\n *        ...\n *    &lt;/application&gt;\n *&lt;/manifest&gt;</pre>\n * <p>\n * When defining your provider, you must protect it with the\n * {@link CloudMediaProviderContract#MANAGE_CLOUD_MEDIA_PROVIDERS_PERMISSION}, which is a permission\n * only the system can obtain, trying to define an unprotected {@link CloudMediaProvider} will\n * result in a {@link SecurityException}.\n * <p>\n * Applications cannot use a cloud media provider directly; they must go through\n * {@link MediaStore#ACTION_PICK_IMAGES} which requires a user to actively navigate and select\n * media items. When a user selects a media item through that UI, the system issues narrow URI\n * permission grants to the requesting application.\n * <h3>Media items</h3>\n * <p>\n * A media item must be an openable stream (with a specific MIME type). Media items can belong to\n * zero or more albums. Albums cannot contain other albums.\n * <p>\n * Each item under a provider is uniquely referenced by its media or album id, which must not\n * change which must be unique across all collection IDs as returned by\n * {@link #onGetMediaCollectionInfo}.\n *\n * @see MediaStore#ACTION_PICK_IMAGES\n ",
  "links" : [ "android.provider.CloudMediaProviderContract#MANAGE_CLOUD_MEDIA_PROVIDERS_PERMISSION", "SecurityException", "#onGetMediaCollectionInfo", "android.provider.CloudMediaProvider", "android.provider.MediaStore#ACTION_PICK_IMAGES" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MATCH_MEDIAS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MATCH_DELETED_MEDIAS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MATCH_ALBUMS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MATCH_MEDIA_COLLECTION_INFO",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MATCH_SURFACE_CONTROLLER",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_LOOPING_PLAYBACK_ENABLED",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_SURFACE_CONTROLLER_AUDIO_MUTE_ENABLED",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMatcher",
    "type" : "UriMatcher",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMediaStoreAuthorityAppId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAuthority",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final void attachInfo(@NonNull Context context, @NonNull ProviderInfo info)",
    "returnType" : "void",
    "comment" : "\n     * Implementation is provided by the parent class. Cannot be overridden.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void registerAuthority(String authority)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final Bundle onGetAsyncContentProvider()",
    "returnType" : "Bundle",
    "comment" : "\n     * Returns {@link Bundle} containing binder to {@link IAsyncContentProvider}.\n     *\n     * @hide\n     ",
    "links" : [ "IAsyncContentProvider", "android.os.Bundle" ]
  }, {
    "name" : "public abstract Bundle onGetMediaCollectionInfo(@NonNull Bundle extras)",
    "returnType" : "Bundle",
    "comment" : "\n     * Returns metadata about the media collection itself.\n     * <p>\n     * This is useful for the OS to determine if its cache of media items in the collection is\n     * still valid and if a full or incremental sync is required with {@link #onQueryMedia}.\n     * <p>\n     * This method might be called by the OS frequently and is performance critical, hence it should\n     * avoid long running operations.\n     * <p>\n     * If the provider handled any filters in {@code extras}, it must add the key to the\n     * {@link ContentResolver#EXTRA_HONORED_ARGS} as part of the returned {@link Bundle}.\n     *\n     * @param extras containing keys to filter result:\n     * <ul>\n     * <li> {@link CloudMediaProviderContract#EXTRA_ALBUM_ID}\n     * </ul>\n     *\n     * @return {@link Bundle} containing {@link CloudMediaProviderContract.MediaCollectionInfo}\n     * <ul>\n     * <li> {@link CloudMediaProviderContract.MediaCollectionInfo#MEDIA_COLLECTION_ID}\n     * <li> {@link CloudMediaProviderContract.MediaCollectionInfo#LAST_MEDIA_SYNC_GENERATION}\n     * <li> {@link CloudMediaProviderContract.MediaCollectionInfo#ACCOUNT_NAME}\n     * <li> {@link CloudMediaProviderContract.MediaCollectionInfo#ACCOUNT_CONFIGURATION_INTENT}\n     * </ul>\n     ",
    "links" : [ "#onQueryMedia", "android.provider.CloudMediaProviderContract#EXTRA_ALBUM_ID", "android.os.Bundle", "CloudMediaProviderContract.MediaCollectionInfo#ACCOUNT_CONFIGURATION_INTENT", "CloudMediaProviderContract.MediaCollectionInfo", "CloudMediaProviderContract.MediaCollectionInfo#ACCOUNT_NAME", "CloudMediaProviderContract.MediaCollectionInfo#LAST_MEDIA_SYNC_GENERATION", "android.content.ContentResolver#EXTRA_HONORED_ARGS", "CloudMediaProviderContract.MediaCollectionInfo#MEDIA_COLLECTION_ID" ]
  }, {
    "name" : "public abstract Cursor onQueryMedia(@NonNull Bundle extras)",
    "returnType" : "Cursor",
    "comment" : "\n     * Returns a cursor representing all media items in the media collection optionally filtered by\n     * {@code extras} and sorted in reverse chronological order of\n     * {@link CloudMediaProviderContract.MediaColumns#DATE_TAKEN_MILLIS}, i.e. most recent items\n     * first.\n     * <p>\n     * The cloud media provider must set the\n     * {@link CloudMediaProviderContract#EXTRA_MEDIA_COLLECTION_ID} as part of the returned\n     * {@link Cursor#setExtras} {@link Bundle}. Not setting this is an error and invalidates the\n     * returned {@link Cursor}.\n     * <p>\n     * If the cloud media provider handled any filters in {@code extras}, it must add the key to\n     * the {@link ContentResolver#EXTRA_HONORED_ARGS} as part of the returned\n     * {@link Cursor#setExtras} {@link Bundle}.\n     *\n     * @param extras containing keys to filter media items:\n     * <ul>\n     * <li> {@link CloudMediaProviderContract#EXTRA_SYNC_GENERATION}\n     * <li> {@link CloudMediaProviderContract#EXTRA_PAGE_TOKEN}\n     * <li> {@link CloudMediaProviderContract#EXTRA_ALBUM_ID}\n     * <li> {@link CloudMediaProviderContract#EXTRA_PAGE_SIZE}\n     * </ul>\n     * @return cursor representing media items containing all\n     * {@link CloudMediaProviderContract.MediaColumns} columns\n     ",
    "links" : [ "android.provider.CloudMediaProviderContract#EXTRA_ALBUM_ID", "android.os.Bundle", "android.provider.CloudMediaProviderContract#EXTRA_PAGE_SIZE", "android.provider.CloudMediaProviderContract#EXTRA_MEDIA_COLLECTION_ID", "CloudMediaProviderContract.MediaColumns#DATE_TAKEN_MILLIS", "android.content.ContentResolver#EXTRA_HONORED_ARGS", "android.database.Cursor#setExtras", "android.provider.CloudMediaProviderContract#EXTRA_SYNC_GENERATION", "CloudMediaProviderContract.MediaColumns", "android.provider.CloudMediaProviderContract#EXTRA_PAGE_TOKEN", "android.database.Cursor" ]
  }, {
    "name" : "public abstract Cursor onQueryDeletedMedia(@NonNull Bundle extras)",
    "returnType" : "Cursor",
    "comment" : "\n     * Returns a {@link Cursor} representing all deleted media items in the entire media collection\n     * within the current provider version as returned by {@link #onGetMediaCollectionInfo}. These\n     * items can be optionally filtered by {@code extras}.\n     * <p>\n     * The cloud media provider must set the\n     * {@link CloudMediaProviderContract#EXTRA_MEDIA_COLLECTION_ID} as part of the returned\n     * {@link Cursor#setExtras} {@link Bundle}. Not setting this is an error and invalidates the\n     * returned {@link Cursor}.\n     * <p>\n     * If the provider handled any filters in {@code extras}, it must add the key to\n     * the {@link ContentResolver#EXTRA_HONORED_ARGS} as part of the returned\n     * {@link Cursor#setExtras} {@link Bundle}.\n     *\n     * @param extras containing keys to filter deleted media items:\n     * <ul>\n     * <li> {@link CloudMediaProviderContract#EXTRA_SYNC_GENERATION}\n     * <li> {@link CloudMediaProviderContract#EXTRA_PAGE_TOKEN}\n     * </ul>\n     * @return cursor representing deleted media items containing just the\n     * {@link CloudMediaProviderContract.MediaColumns#ID} column\n     ",
    "links" : [ "android.os.Bundle", "CloudMediaProviderContract.MediaColumns#ID", "android.provider.CloudMediaProviderContract#EXTRA_MEDIA_COLLECTION_ID", "#onGetMediaCollectionInfo", "android.content.ContentResolver#EXTRA_HONORED_ARGS", "android.database.Cursor#setExtras", "android.provider.CloudMediaProviderContract#EXTRA_SYNC_GENERATION", "android.provider.CloudMediaProviderContract#EXTRA_PAGE_TOKEN", "android.database.Cursor" ]
  }, {
    "name" : "public Cursor onQueryAlbums(@NonNull Bundle extras)",
    "returnType" : "Cursor",
    "comment" : "\n     * Returns a cursor representing all album items in the media collection optionally filtered\n     * by {@code extras} and sorted in reverse chronological order of\n     * {@link CloudMediaProviderContract.AlbumColumns#DATE_TAKEN_MILLIS}, i.e. most recent items\n     * first.\n     * <p>\n     * The cloud media provider must set the\n     * {@link CloudMediaProviderContract#EXTRA_MEDIA_COLLECTION_ID} as part of the returned\n     * {@link Cursor#setExtras} {@link Bundle}. Not setting this is an error and invalidates the\n     * returned {@link Cursor}.\n     * <p>\n     * If the provider handled any filters in {@code extras}, it must add the key to\n     * the {@link ContentResolver#EXTRA_HONORED_ARGS} as part of the returned\n     * {@link Cursor#setExtras} {@link Bundle}.\n     *\n     * @param extras containing keys to filter album items:\n     * <ul>\n     * <li> {@link CloudMediaProviderContract#EXTRA_SYNC_GENERATION}\n     * <li> {@link CloudMediaProviderContract#EXTRA_PAGE_TOKEN}\n     * <li> {@link CloudMediaProviderContract#EXTRA_PAGE_SIZE}\n     * </ul>\n     * @return cursor representing album items containing all\n     * {@link CloudMediaProviderContract.AlbumColumns} columns\n     ",
    "links" : [ "android.os.Bundle", "android.provider.CloudMediaProviderContract#EXTRA_PAGE_SIZE", "android.provider.CloudMediaProviderContract#EXTRA_MEDIA_COLLECTION_ID", "CloudMediaProviderContract.AlbumColumns#DATE_TAKEN_MILLIS", "android.content.ContentResolver#EXTRA_HONORED_ARGS", "android.database.Cursor#setExtras", "android.provider.CloudMediaProviderContract#EXTRA_SYNC_GENERATION", "android.provider.CloudMediaProviderContract#EXTRA_PAGE_TOKEN", "android.database.Cursor", "CloudMediaProviderContract.AlbumColumns" ]
  }, {
    "name" : "public abstract AssetFileDescriptor onOpenPreview(@NonNull String mediaId, @NonNull Point size, @Nullable Bundle extras, @Nullable CancellationSignal signal) throws FileNotFoundException",
    "returnType" : "AssetFileDescriptor",
    "comment" : "\n     * Returns a thumbnail of {@code size} for a media item identified by {@code mediaId}\n     * <p>The cloud media provider should strictly return thumbnail in the original\n     * {@link CloudMediaProviderContract.MediaColumns#MIME_TYPE} of the item.\n     * <p>\n     * This is expected to be a much lower resolution version than the item returned by\n     * {@link #onOpenMedia}.\n     * <p>\n     * If you block while downloading content, you should periodically check\n     * {@link CancellationSignal#isCanceled()} to abort abandoned open requests.\n     *\n     * @param mediaId the media item to return\n     * @param size the dimensions of the thumbnail to return. The returned file descriptor doesn't\n     * have to match the {@code size} precisely because the OS will adjust the dimensions before\n     * usage. Implementations can return close approximations especially if the approximation is\n     * already locally on the device and doesn't require downloading from the cloud.\n     * @param extras to modify the way the fd is opened, e.g. for video files we may request a\n     * thumbnail image instead of a video with\n     * {@link CloudMediaProviderContract#EXTRA_PREVIEW_THUMBNAIL}\n     * @param signal used by the OS to signal if the request should be cancelled\n     * @return read-only file descriptor for accessing the thumbnail for the media file\n     *\n     * @see #onOpenMedia\n     * @see CloudMediaProviderContract#EXTRA_PREVIEW_THUMBNAIL\n     ",
    "links" : [ "CloudMediaProviderContract.MediaColumns#MIME_TYPE", "#onOpenMedia", "android.os.CancellationSignal#isCanceled()", "android.provider.CloudMediaProviderContract#EXTRA_PREVIEW_THUMBNAIL" ]
  }, {
    "name" : "public abstract ParcelFileDescriptor onOpenMedia(@NonNull String mediaId, @Nullable Bundle extras, @Nullable CancellationSignal signal) throws FileNotFoundException",
    "returnType" : "ParcelFileDescriptor",
    "comment" : "\n     * Returns the full size media item identified by {@code mediaId}.\n     * <p>\n     * If you block while downloading content, you should periodically check\n     * {@link CancellationSignal#isCanceled()} to abort abandoned open requests.\n     *\n     * @param mediaId the media item to return\n     * @param extras to modify the way the fd is opened, there's none at the moment, but some\n     * might be implemented in the future\n     * @param signal used by the OS to signal if the request should be cancelled\n     * @return read-only file descriptor for accessing the media file\n     *\n     * @see #onOpenPreview\n     ",
    "links" : [ "android.os.CancellationSignal#isCanceled()" ]
  }, {
    "name" : "public CloudMediaSurfaceController onCreateCloudMediaSurfaceController(@NonNull Bundle config, @NonNull CloudMediaSurfaceStateChangedCallback callback)",
    "returnType" : "CloudMediaSurfaceController",
    "comment" : "\n     * Returns a {@link CloudMediaSurfaceController} used for rendering the preview of media items,\n     * or null if preview rendering is not supported.\n     *\n     * @param config containing configuration parameters for {@link CloudMediaSurfaceController}\n     * <ul>\n     * <li> {@link CloudMediaProviderContract#EXTRA_LOOPING_PLAYBACK_ENABLED}\n     * <li> {@link CloudMediaProviderContract#EXTRA_SURFACE_CONTROLLER_AUDIO_MUTE_ENABLED}\n     * </ul>\n     * @param callback {@link CloudMediaSurfaceStateChangedCallback} to send state updates for\n     *                 {@link Surface} to picker launched via {@link MediaStore#ACTION_PICK_IMAGES}\n     ",
    "links" : [ "CloudMediaSurfaceStateChangedCallback", "android.provider.CloudMediaProviderContract#EXTRA_SURFACE_CONTROLLER_AUDIO_MUTE_ENABLED", "android.view.Surface", "android.provider.CloudMediaProviderContract#EXTRA_LOOPING_PLAYBACK_ENABLED", "android.provider.MediaStore#ACTION_PICK_IMAGES", "CloudMediaSurfaceController" ]
  }, {
    "name" : "public final Bundle call(@NonNull String method, @Nullable String arg, @Nullable Bundle extras)",
    "returnType" : "Bundle",
    "comment" : "\n     * Implementation is provided by the parent class. Cannot be overridden.\n     ",
    "links" : [ ]
  }, {
    "name" : "private Bundle callUnchecked(String method, String arg, Bundle extras) throws FileNotFoundException",
    "returnType" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Bundle onCreateCloudMediaSurfaceController(@NonNull Bundle extras)",
    "returnType" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final ParcelFileDescriptor openFile(@NonNull Uri uri, @NonNull String mode) throws FileNotFoundException",
    "returnType" : "ParcelFileDescriptor",
    "comment" : "\n     * Implementation is provided by the parent class. Cannot be overridden.\n     *\n     * @see #onOpenMedia\n     ",
    "links" : [ ]
  }, {
    "name" : "public final ParcelFileDescriptor openFile(@NonNull Uri uri, @NonNull String mode, @Nullable CancellationSignal signal) throws FileNotFoundException",
    "returnType" : "ParcelFileDescriptor",
    "comment" : "\n     * Implementation is provided by the parent class. Cannot be overridden.\n     *\n     * @see #onOpenMedia\n     ",
    "links" : [ ]
  }, {
    "name" : "public final AssetFileDescriptor openTypedAssetFile(@NonNull Uri uri, @NonNull String mimeTypeFilter, @Nullable Bundle opts) throws FileNotFoundException",
    "returnType" : "AssetFileDescriptor",
    "comment" : "\n     * Implementation is provided by the parent class. Cannot be overridden.\n     *\n     * @see #onOpenPreview\n     * @see #onOpenMedia\n     ",
    "links" : [ ]
  }, {
    "name" : "public final AssetFileDescriptor openTypedAssetFile(@NonNull Uri uri, @NonNull String mimeTypeFilter, @Nullable Bundle opts, @Nullable CancellationSignal signal) throws FileNotFoundException",
    "returnType" : "AssetFileDescriptor",
    "comment" : "\n     * Implementation is provided by the parent class. Cannot be overridden.\n     *\n     * @see #onOpenPreview\n     * @see #onOpenMedia\n     ",
    "links" : [ ]
  }, {
    "name" : "public final Cursor query(@NonNull Uri uri, @Nullable String[] projection, @Nullable Bundle queryArgs, @Nullable CancellationSignal cancellationSignal)",
    "returnType" : "Cursor",
    "comment" : "\n     * Implementation is provided by the parent class. Cannot be overridden.\n     *\n     * @see #onQueryMedia\n     * @see #onQueryDeletedMedia\n     * @see #onQueryAlbums\n     ",
    "links" : [ ]
  }, {
    "name" : "public final String getType(@NonNull Uri uri)",
    "returnType" : "String",
    "comment" : "\n     * Implementation is provided by the parent class. Throws by default, and\n     * cannot be overridden.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final Uri canonicalize(@NonNull Uri uri)",
    "returnType" : "Uri",
    "comment" : "\n     * Implementation is provided by the parent class. Throws by default, and\n     * cannot be overridden.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final Cursor query(@NonNull Uri uri, @Nullable String[] projection, @Nullable String selection, @Nullable String[] selectionArgs, @Nullable String sortOrder)",
    "returnType" : "Cursor",
    "comment" : "\n     * Implementation is provided by the parent class. Throws by default, and\n     * cannot be overridden.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final Cursor query(@NonNull Uri uri, @Nullable String[] projection, @Nullable String selection, @Nullable String[] selectionArgs, @Nullable String sortOrder, @Nullable CancellationSignal cancellationSignal)",
    "returnType" : "Cursor",
    "comment" : "\n     * Implementation is provided by the parent class. Throws by default, and\n     * cannot be overridden.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final Uri insert(@NonNull Uri uri, @NonNull ContentValues values)",
    "returnType" : "Uri",
    "comment" : "\n     * Implementation is provided by the parent class. Throws by default, and\n     * cannot be overridden.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int delete(@NonNull Uri uri, @Nullable String selection, @Nullable String[] selectionArgs)",
    "returnType" : "int",
    "comment" : "\n     * Implementation is provided by the parent class. Throws by default, and\n     * cannot be overridden.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int update(@NonNull Uri uri, @NonNull ContentValues values, @Nullable String selection, @Nullable String[] selectionArgs)",
    "returnType" : "int",
    "comment" : "\n     * Implementation is provided by the parent class. Throws by default, and\n     * cannot be overridden.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public final void attachInfo(@NonNull Context context, @NonNull ProviderInfo info)", "private void registerAuthority(String authority)", "public final Bundle onGetAsyncContentProvider()", "public abstract Bundle onGetMediaCollectionInfo(@NonNull Bundle extras)", "public abstract Cursor onQueryMedia(@NonNull Bundle extras)", "public abstract Cursor onQueryDeletedMedia(@NonNull Bundle extras)", "public Cursor onQueryAlbums(@NonNull Bundle extras)", "public abstract AssetFileDescriptor onOpenPreview(@NonNull String mediaId, @NonNull Point size, @Nullable Bundle extras, @Nullable CancellationSignal signal) throws FileNotFoundException", "public abstract ParcelFileDescriptor onOpenMedia(@NonNull String mediaId, @Nullable Bundle extras, @Nullable CancellationSignal signal) throws FileNotFoundException", "public CloudMediaSurfaceController onCreateCloudMediaSurfaceController(@NonNull Bundle config, @NonNull CloudMediaSurfaceStateChangedCallback callback)", "public final Bundle call(@NonNull String method, @Nullable String arg, @Nullable Bundle extras)", "private Bundle callUnchecked(String method, String arg, Bundle extras) throws FileNotFoundException", "private Bundle onCreateCloudMediaSurfaceController(@NonNull Bundle extras)", "public final ParcelFileDescriptor openFile(@NonNull Uri uri, @NonNull String mode) throws FileNotFoundException", "public final ParcelFileDescriptor openFile(@NonNull Uri uri, @NonNull String mode, @Nullable CancellationSignal signal) throws FileNotFoundException", "public final AssetFileDescriptor openTypedAssetFile(@NonNull Uri uri, @NonNull String mimeTypeFilter, @Nullable Bundle opts) throws FileNotFoundException", "public final AssetFileDescriptor openTypedAssetFile(@NonNull Uri uri, @NonNull String mimeTypeFilter, @Nullable Bundle opts, @Nullable CancellationSignal signal) throws FileNotFoundException", "public final Cursor query(@NonNull Uri uri, @Nullable String[] projection, @Nullable Bundle queryArgs, @Nullable CancellationSignal cancellationSignal)", "public final String getType(@NonNull Uri uri)", "public final Uri canonicalize(@NonNull Uri uri)", "public final Cursor query(@NonNull Uri uri, @Nullable String[] projection, @Nullable String selection, @Nullable String[] selectionArgs, @Nullable String sortOrder)", "public final Cursor query(@NonNull Uri uri, @Nullable String[] projection, @Nullable String selection, @Nullable String[] selectionArgs, @Nullable String sortOrder, @Nullable CancellationSignal cancellationSignal)", "public final Uri insert(@NonNull Uri uri, @NonNull ContentValues values)", "public final int delete(@NonNull Uri uri, @Nullable String selection, @Nullable String[] selectionArgs)", "public final int update(@NonNull Uri uri, @NonNull ContentValues values, @Nullable String selection, @Nullable String[] selectionArgs)" ],
  "variableNames" : [ "TAG", "MATCH_MEDIAS", "MATCH_DELETED_MEDIAS", "MATCH_ALBUMS", "MATCH_MEDIA_COLLECTION_INFO", "MATCH_SURFACE_CONTROLLER", "DEFAULT_LOOPING_PLAYBACK_ENABLED", "DEFAULT_SURFACE_CONTROLLER_AUDIO_MUTE_ENABLED", "mMatcher", "mMediaStoreAuthorityAppId", "mAuthority" ]
}