{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/harmony/xml/parsers/DocumentBuilderImpl.java",
  "packageName" : "org.apache.harmony.xml.parsers",
  "className" : "DocumentBuilderImpl",
  "comment" : "\n * Builds a DOM using KXmlParser.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "dom",
    "type" : "DOMImplementationImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "coalescing",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "entityResolver",
    "type" : "EntityResolver",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "errorHandler",
    "type" : "ErrorHandler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ignoreComments",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ignoreElementContentWhitespace",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "namespaceAware",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void reset()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public DOMImplementation getDOMImplementation()",
    "returnType" : "DOMImplementation",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isNamespaceAware()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isValidating()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Document newDocument()",
    "returnType" : "Document",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Document parse(InputSource source) throws SAXException, IOException",
    "returnType" : "Document",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void parse(KXmlParser parser, DocumentImpl document, Node node, int endToken) throws XmlPullParserException, IOException",
    "returnType" : "void",
    "comment" : "\n     * Implements the whole parsing of the XML document. The XML pull parser is\n     * actually more of a tokenizer, and we are doing a classical recursive\n     * descent parsing (the method invokes itself for XML elements). Our\n     * approach to parsing does accept some illegal documents (more than one\n     * root element, for example). The assumption is that the DOM implementation\n     * throws the proper exceptions in these cases.\n     *\n     * @param parser The XML pull parser we're reading from.\n     * @param document The document we're building.\n     * @param node The node we're currently on (initially the document itself).\n     * @param endToken The token that will end this recursive call. Either\n     *        XmlPullParser.END_DOCUMENT or XmlPullParser.END_TAG.\n     *\n     * @throws XmlPullParserException If a parsing error occurs.\n     * @throws IOException If a general IO error occurs.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void appendText(DocumentImpl document, Node parent, int token, String text)",
    "returnType" : "void",
    "comment" : "\n     * @param token the XML pull parser token type, such as XmlPullParser.CDSECT\n     *      or XmlPullParser.ENTITY_REF.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setEntityResolver(EntityResolver resolver)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setErrorHandler(ErrorHandler handler)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setIgnoreComments(boolean value)",
    "returnType" : "void",
    "comment" : "\n     * Controls whether this DocumentBuilder ignores comments.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCoalescing(boolean value)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setIgnoreElementContentWhitespace(boolean value)",
    "returnType" : "void",
    "comment" : "\n     * Controls whether this DocumentBuilder ignores element content whitespace.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setNamespaceAware(boolean value)",
    "returnType" : "void",
    "comment" : "\n     * Controls whether this DocumentBuilder is namespace-aware.\n     ",
    "links" : [ ]
  }, {
    "name" : "private String resolvePredefinedOrCharacterEntity(String entityName)",
    "returnType" : "String",
    "comment" : "\n     * Returns the replacement text or null if {@code entity} isn't predefined.\n     ",
    "links" : [ ]
  }, {
    "name" : "private String resolveCharacterReference(String value, int base)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void reset()", "public DOMImplementation getDOMImplementation()", "public boolean isNamespaceAware()", "public boolean isValidating()", "public Document newDocument()", "public Document parse(InputSource source) throws SAXException, IOException", "private void parse(KXmlParser parser, DocumentImpl document, Node node, int endToken) throws XmlPullParserException, IOException", "private void appendText(DocumentImpl document, Node parent, int token, String text)", "public void setEntityResolver(EntityResolver resolver)", "public void setErrorHandler(ErrorHandler handler)", "public void setIgnoreComments(boolean value)", "public void setCoalescing(boolean value)", "public void setIgnoreElementContentWhitespace(boolean value)", "public void setNamespaceAware(boolean value)", "private String resolvePredefinedOrCharacterEntity(String entityName)", "private String resolveCharacterReference(String value, int base)" ],
  "variableNames" : [ "dom", "coalescing", "entityResolver", "errorHandler", "ignoreComments", "ignoreElementContentWhitespace", "namespaceAware" ]
}