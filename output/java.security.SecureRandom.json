{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/security/SecureRandom.java",
  "packageName" : "java.security",
  "className" : "SecureRandom",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "provider",
    "type" : "Provider",
    "comment" : "\n     * The provider.\n     *\n     * @serial\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : "secureRandomSpi",
    "type" : "SecureRandomSpi",
    "comment" : "\n     * The provider implementation.\n     *\n     * @serial\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : "threadSafe",
    "type" : "boolean",
    "comment" : "\n     * Thread safety.\n     *\n     * @serial\n     * @since 9\n     ",
    "links" : [ ]
  }, {
    "name" : "algorithm",
    "type" : "String",
    "comment" : "\n     * The algorithm name or {@code null} if unknown.\n     *\n     * @serial\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "seedGenerator",
    "type" : "SecureRandom",
    "comment" : " Seed Generator",
    "links" : [ ]
  }, {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : " Declare serialVersionUID to be compatible with JDK1.1",
    "links" : [ ]
  }, {
    "name" : "state",
    "type" : "byte[]",
    "comment" : "\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "digest",
    "type" : "MessageDigest",
    "comment" : "\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "randomBytes",
    "type" : "byte[]",
    "comment" : "\n     * @serial\n     *\n     * We know that the MessageDigest class does not implement\n     * java.io.Serializable.  However, since this field is no longer\n     * used, it will always be NULL and won't affect the serialization\n     * of the {@code SecureRandom} class itself.\n     ",
    "links" : [ ]
  }, {
    "name" : "randomBytesUsed",
    "type" : "int",
    "comment" : "\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "counter",
    "type" : "long",
    "comment" : "\n     * @serial\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private boolean getThreadSafe()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void getDefaultPRNG(boolean setSeed, byte[] seed)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String getPrngAlgorithm()",
    "returnType" : "String",
    "comment" : "\n     * Gets a default PRNG algorithm by looking through all registered\n     * providers. Returns the first PRNG algorithm of the first provider that\n     * has registered a SecureRandom implementation, or null if none of the\n     * registered providers supplies a SecureRandom implementation.\n     ",
    "links" : [ ]
  }, {
    "name" : "private String getProviderName()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static SecureRandom getInstance(String algorithm) throws NoSuchAlgorithmException",
    "returnType" : "SecureRandom",
    "comment" : "\n     * Returns a {@code SecureRandom} object that implements the specified\n     * Random Number Generator (RNG) algorithm.\n     *\n     * <p> This method traverses the list of registered security Providers,\n     * starting with the most preferred Provider.\n     * A new {@code SecureRandom} object encapsulating the\n     * {@code SecureRandomSpi} implementation from the first\n     * Provider that supports the specified algorithm is returned.\n     *\n     * <p> Note that the list of registered providers may be retrieved via\n     * the {@link Security#getProviders() Security.getProviders()} method.\n     *\n     * @implNote\n     * The JDK Reference Implementation additionally uses the\n     * {@code jdk.security.provider.preferred}\n     * {@link Security#getProperty(String) Security} property to determine\n     * the preferred provider order for the specified algorithm. This\n     * may be different than the order of providers returned by\n     * {@link Security#getProviders() Security.getProviders()}.\n     *\n     * @param algorithm the name of the RNG algorithm.\n     * See the {@code SecureRandom} section in the <a href=\n     * \"{@docRoot}/../specs/security/standard-names.html#securerandom-number-generation-algorithms\">\n     * Java Security Standard Algorithm Names Specification</a>\n     * for information about standard RNG algorithm names.\n     *\n     * @return the new {@code SecureRandom} object\n     *\n     * @throws NoSuchAlgorithmException if no {@code Provider} supports a\n     *         {@code SecureRandomSpi} implementation for the\n     *         specified algorithm\n     *\n     * @throws NullPointerException if {@code algorithm} is {@code null}\n     *\n     * @see Provider\n     *\n     * @since 1.2\n     ",
    "links" : [ "java.security.Security#getProperty(String)", "java.security.Security#getProviders()" ]
  }, {
    "name" : "public static SecureRandom getInstance(String algorithm, String provider) throws NoSuchAlgorithmException, NoSuchProviderException",
    "returnType" : "SecureRandom",
    "comment" : "\n     * Returns a {@code SecureRandom} object that implements the specified\n     * Random Number Generator (RNG) algorithm.\n     *\n     * <p> A new {@code SecureRandom} object encapsulating the\n     * {@code SecureRandomSpi} implementation from the specified provider\n     * is returned.  The specified provider must be registered\n     * in the security provider list.\n     *\n     * <p> Note that the list of registered providers may be retrieved via\n     * the {@link Security#getProviders() Security.getProviders()} method.\n     *\n     * @param algorithm the name of the RNG algorithm.\n     * See the {@code SecureRandom} section in the <a href=\n     * \"{@docRoot}/../specs/security/standard-names.html#securerandom-number-generation-algorithms\">\n     * Java Security Standard Algorithm Names Specification</a>\n     * for information about standard RNG algorithm names.\n     *\n     * @param provider the name of the provider.\n     *\n     * @return the new {@code SecureRandom} object\n     *\n     * @throws IllegalArgumentException if the provider name is {@code null}\n     *         or empty\n     *\n     * @throws NoSuchAlgorithmException if a {@code SecureRandomSpi}\n     *         implementation for the specified algorithm is not\n     *         available from the specified provider\n     *\n     * @throws NoSuchProviderException if the specified provider is not\n     *         registered in the security provider list\n     *\n     * @throws NullPointerException if {@code algorithm} is {@code null}\n     *\n     * @see Provider\n     *\n     * @since 1.2\n     ",
    "links" : [ "java.security.Security#getProviders()" ]
  }, {
    "name" : "public static SecureRandom getInstance(String algorithm, Provider provider) throws NoSuchAlgorithmException",
    "returnType" : "SecureRandom",
    "comment" : "\n     * Returns a {@code SecureRandom} object that implements the specified\n     * Random Number Generator (RNG) algorithm.\n     *\n     * <p> A new {@code SecureRandom} object encapsulating the\n     * {@code SecureRandomSpi} implementation from the specified {@code Provider}\n     * object is returned.  Note that the specified {@code Provider} object\n     * does not have to be registered in the provider list.\n     *\n     * @param algorithm the name of the RNG algorithm.\n     * See the {@code SecureRandom} section in the <a href=\n     * \"{@docRoot}/../specs/security/standard-names.html#securerandom-number-generation-algorithms\">\n     * Java Security Standard Algorithm Names Specification</a>\n     * for information about standard RNG algorithm names.\n     *\n     * @param provider the provider.\n     *\n     * @return the new {@code SecureRandom} object\n     *\n     * @throws IllegalArgumentException if the specified provider is\n     *         {@code null}\n     *\n     * @throws NoSuchAlgorithmException if a {@code SecureRandomSpi}\n     *         implementation for the specified algorithm is not available\n     *         from the specified {@code Provider} object\n     *\n     * @throws NullPointerException if {@code algorithm} is {@code null}\n     *\n     * @see Provider\n     *\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "public static SecureRandom getInstance(String algorithm, SecureRandomParameters params) throws NoSuchAlgorithmException",
    "returnType" : "SecureRandom",
    "comment" : "\n     * Returns a {@code SecureRandom} object that implements the specified\n     * Random Number Generator (RNG) algorithm and supports the specified\n     * {@code SecureRandomParameters} request.\n     *\n     * <p> This method traverses the list of registered security Providers,\n     * starting with the most preferred Provider.\n     * A new {@code SecureRandom} object encapsulating the\n     * {@code SecureRandomSpi} implementation from the first\n     * Provider that supports the specified algorithm and the specified\n     * {@code SecureRandomParameters} is returned.\n     *\n     * <p> Note that the list of registered providers may be retrieved via\n     * the {@link Security#getProviders() Security.getProviders()} method.\n     *\n     * @implNote\n     * The JDK Reference Implementation additionally uses the\n     * {@code jdk.security.provider.preferred} property to determine\n     * the preferred provider order for the specified algorithm. This\n     * may be different than the order of providers returned by\n     * {@link Security#getProviders() Security.getProviders()}.\n     *\n     * @param algorithm the name of the RNG algorithm.\n     * See the {@code SecureRandom} section in the <a href=\n     * \"{@docRoot}/../specs/security/standard-names.html#securerandom-number-generation-algorithms\">\n     * Java Security Standard Algorithm Names Specification</a>\n     * for information about standard RNG algorithm names.\n     *\n     * @param params the {@code SecureRandomParameters}\n     *               the newly created {@code SecureRandom} object must support.\n     *\n     * @return the new {@code SecureRandom} object\n     *\n     * @throws IllegalArgumentException if the specified params is\n     *         {@code null}\n     *\n     * @throws NoSuchAlgorithmException if no Provider supports a\n     *         {@code SecureRandomSpi} implementation for the specified\n     *         algorithm and parameters\n     *\n     * @throws NullPointerException if {@code algorithm} is {@code null}\n     *\n     * @see Provider\n     *\n     * @since 9\n     ",
    "links" : [ "java.security.Security#getProviders()" ]
  }, {
    "name" : "public static SecureRandom getInstance(String algorithm, SecureRandomParameters params, String provider) throws NoSuchAlgorithmException, NoSuchProviderException",
    "returnType" : "SecureRandom",
    "comment" : "\n     * Returns a {@code SecureRandom} object that implements the specified\n     * Random Number Generator (RNG) algorithm and supports the specified\n     * {@code SecureRandomParameters} request.\n     *\n     * <p> A new {@code SecureRandom} object encapsulating the\n     * {@code SecureRandomSpi} implementation from the specified provider\n     * is returned.  The specified provider must be registered\n     * in the security provider list.\n     *\n     * <p> Note that the list of registered providers may be retrieved via\n     * the {@link Security#getProviders() Security.getProviders()} method.\n     *\n     * @param algorithm the name of the RNG algorithm.\n     * See the {@code SecureRandom} section in the <a href=\n     * \"{@docRoot}/../specs/security/standard-names.html#securerandom-number-generation-algorithms\">\n     * Java Security Standard Algorithm Names Specification</a>\n     * for information about standard RNG algorithm names.\n     *\n     * @param params the {@code SecureRandomParameters}\n     *               the newly created {@code SecureRandom} object must support.\n     *\n     * @param provider the name of the provider.\n     *\n     * @return the new {@code SecureRandom} object\n     *\n     * @throws IllegalArgumentException if the provider name is {@code null}\n     *         or empty, or params is {@code null}\n     *\n     * @throws NoSuchAlgorithmException if the specified provider does not\n     *         support a {@code SecureRandomSpi} implementation for the\n     *         specified algorithm and parameters\n     *\n     * @throws NoSuchProviderException if the specified provider is not\n     *         registered in the security provider list\n     *\n     * @throws NullPointerException if {@code algorithm} is {@code null}\n     *\n     * @see Provider\n     *\n     * @since 9\n     ",
    "links" : [ "java.security.Security#getProviders()" ]
  }, {
    "name" : "public static SecureRandom getInstance(String algorithm, SecureRandomParameters params, Provider provider) throws NoSuchAlgorithmException",
    "returnType" : "SecureRandom",
    "comment" : "\n     * Returns a {@code SecureRandom} object that implements the specified\n     * Random Number Generator (RNG) algorithm and supports the specified\n     * {@code SecureRandomParameters} request.\n     *\n     * <p> A new {@code SecureRandom} object encapsulating the\n     * {@code SecureRandomSpi} implementation from the specified\n     * {@code Provider} object is returned.  Note that the specified\n     * {@code Provider} object does not have to be registered in the\n     * provider list.\n     *\n     * @param algorithm the name of the RNG algorithm.\n     * See the {@code SecureRandom} section in the <a href=\n     * \"{@docRoot}/../specs/security/standard-names.html#securerandom-number-generation-algorithms\">\n     * Java Security Standard Algorithm Names Specification</a>\n     * for information about standard RNG algorithm names.\n     *\n     * @param params the {@code SecureRandomParameters}\n     *               the newly created {@code SecureRandom} object must support.\n     *\n     * @param provider the provider.\n     *\n     * @return the new {@code SecureRandom} object\n     *\n     * @throws IllegalArgumentException if the specified provider or params\n     *         is {@code null}\n     *\n     * @throws NoSuchAlgorithmException if the specified provider does not\n     *         support a {@code SecureRandomSpi} implementation for the\n     *         specified algorithm and parameters\n     *\n     * @throws NullPointerException if {@code algorithm} is {@code null}\n     *\n     * @see Provider\n     *\n     * @since 9\n     ",
    "links" : [ ]
  }, {
    "name" : "public final Provider getProvider()",
    "returnType" : "Provider",
    "comment" : "\n     * Returns the provider of this {@code SecureRandom} object.\n     *\n     * @return the provider of this {@code SecureRandom} object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getAlgorithm()",
    "returnType" : "String",
    "comment" : "\n     * Returns the name of the algorithm implemented by this\n     * {@code SecureRandom} object.\n     *\n     * @return the name of the algorithm or {@code unknown}\n     *          if the algorithm name cannot be determined.\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a Human-readable string representation of this\n     * {@code SecureRandom}.\n     *\n     * @return the string representation\n     ",
    "links" : [ ]
  }, {
    "name" : "public SecureRandomParameters getParameters()",
    "returnType" : "SecureRandomParameters",
    "comment" : "\n     * Returns the effective {@link SecureRandomParameters} for this\n     * {@code SecureRandom} instance.\n     * <p>\n     * The returned value can be different from the\n     * {@code SecureRandomParameters} object passed into a {@code getInstance}\n     * method, but it cannot change during the lifetime of this\n     * {@code SecureRandom} object.\n     * <p>\n     * A caller can use the returned value to find out what features this\n     * {@code SecureRandom} supports.\n     *\n     * @return the effective {@link SecureRandomParameters} parameters,\n     * or {@code null} if no parameters were used.\n     *\n     * @since 9\n     * @see SecureRandomSpi\n     ",
    "links" : [ "java.security.SecureRandomParameters" ]
  }, {
    "name" : "public void setSeed(byte[] seed)",
    "returnType" : "void",
    "comment" : "\n     * Reseeds this random object with the given seed. The seed supplements,\n     * rather than replaces, the existing seed. Thus, repeated calls are\n     * guaranteed never to reduce randomness.\n     * <p>\n     * A PRNG {@code SecureRandom} will not seed itself automatically if\n     * {@code setSeed} is called before any {@code nextBytes} or {@code reseed}\n     * calls. The caller should make sure that the {@code seed} argument\n     * contains enough entropy for the security of this {@code SecureRandom}.\n     *\n     * @param seed the seed.\n     *\n     * @see #getSeed\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSeed(long seed)",
    "returnType" : "void",
    "comment" : "\n     * Reseeds this random object, using the eight bytes contained\n     * in the given {@code long seed}. The given seed supplements,\n     * rather than replaces, the existing seed. Thus, repeated calls\n     * are guaranteed never to reduce randomness.\n     *\n     * <p>This method is defined for compatibility with\n     * {@code java.util.Random}.\n     *\n     * @param seed the seed.\n     *\n     * @see #getSeed\n     ",
    "links" : [ ]
  }, {
    "name" : "public void nextBytes(byte[] bytes)",
    "returnType" : "void",
    "comment" : "\n     * Generates a user-specified number of random bytes.\n     *\n     * @param bytes the array to be filled in with random bytes.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void nextBytes(byte[] bytes, SecureRandomParameters params)",
    "returnType" : "void",
    "comment" : "\n     * Generates a user-specified number of random bytes with\n     * additional parameters.\n     *\n     * @param bytes the array to be filled in with random bytes\n     * @param params additional parameters\n     * @throws NullPointerException if {@code bytes} is null\n     * @throws UnsupportedOperationException if the underlying provider\n     *         implementation has not overridden this method\n     * @throws IllegalArgumentException if {@code params} is {@code null},\n     *         illegal or unsupported by this {@code SecureRandom}\n     *\n     * @since 9\n     ",
    "links" : [ ]
  }, {
    "name" : "protected final int next(int numBits)",
    "returnType" : "int",
    "comment" : "\n     * Generates an integer containing the user-specified number of\n     * pseudo-random bits (right justified, with leading zeros).  This\n     * method overrides a {@code java.util.Random} method, and serves\n     * to provide a source of random bits to all of the methods inherited\n     * from that class (for example, {@code nextInt},\n     * {@code nextLong}, and {@code nextFloat}).\n     *\n     * @param numBits number of pseudo-random bits to be generated, where\n     * {@code 0 <= numBits <= 32}.\n     *\n     * @return an {@code int} containing the user-specified number\n     * of pseudo-random bits (right justified, with leading zeros).\n     ",
    "links" : [ ]
  }, {
    "name" : "public static byte[] getSeed(int numBytes)",
    "returnType" : "byte[]",
    "comment" : "\n     * Returns the given number of seed bytes, computed using the seed\n     * generation algorithm that this class uses to seed itself.  This\n     * call may be used to seed other random number generators.\n     *\n     * <p>This method is only included for backwards compatibility.\n     * The caller is encouraged to use one of the alternative\n     * {@code getInstance} methods to obtain a {@code SecureRandom} object, and\n     * then call the {@code generateSeed} method to obtain seed bytes\n     * from that object.\n     *\n     * @param numBytes the number of seed bytes to generate.\n     *\n     * @throws IllegalArgumentException if {@code numBytes} is negative\n     * @return the seed bytes.\n     *\n     * @see #setSeed\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] generateSeed(int numBytes)",
    "returnType" : "byte[]",
    "comment" : "\n     * Returns the given number of seed bytes, computed using the seed\n     * generation algorithm that this class uses to seed itself.  This\n     * call may be used to seed other random number generators.\n     *\n     * @param numBytes the number of seed bytes to generate.\n     * @throws IllegalArgumentException if {@code numBytes} is negative\n     * @return the seed bytes.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static byte[] longToByteArray(long l)",
    "returnType" : "byte[]",
    "comment" : "\n     * Helper function to convert a long into a byte array (least significant\n     * byte first).\n     ",
    "links" : [ ]
  }, {
    "name" : "public static SecureRandom getInstanceStrong() throws NoSuchAlgorithmException",
    "returnType" : "SecureRandom",
    "comment" : "\n     * Returns a {@code SecureRandom} object.\n     *\n     * In Android this is equivalent to get a SHA1PRNG from AndroidOpenSSL.\n     *\n     * Some situations require strong random values, such as when\n     * creating high-value/long-lived secrets like RSA public/private\n     * keys.  To help guide applications in selecting a suitable strong\n     * {@code SecureRandom} implementation, Java distributions\n     * include a list of known strong {@code SecureRandom}\n     * implementations in the {@code securerandom.strongAlgorithms}\n     * Security property.\n     * <p>\n     * Every implementation of the Java platform is required to\n     * support at least one strong {@code SecureRandom} implementation.\n     *\n     * @return a strong {@code SecureRandom} implementation\n     *\n     * @throws NoSuchAlgorithmException if no algorithm is available\n     *\n     * @see Security#getProperty(String)\n     *\n     * @since 1.8\n     ",
    "links" : [ ]
  }, {
    "name" : "public void reseed()",
    "returnType" : "void",
    "comment" : "\n     * Reseeds this {@code SecureRandom} with entropy input read from its\n     * entropy source.\n     *\n     * @throws UnsupportedOperationException if the underlying provider\n     *         implementation has not overridden this method.\n     *\n     * @since 9\n     ",
    "links" : [ ]
  }, {
    "name" : "public void reseed(SecureRandomParameters params)",
    "returnType" : "void",
    "comment" : "\n     * Reseeds this {@code SecureRandom} with entropy input read from its\n     * entropy source with additional parameters.\n     * <p>\n     * Note that entropy is obtained from an entropy source. While\n     * some data in {@code params} may contain entropy, its main usage is to\n     * provide diversity.\n     *\n     * @param params extra parameters\n     * @throws UnsupportedOperationException if the underlying provider\n     *         implementation has not overridden this method.\n     * @throws IllegalArgumentException if {@code params} is {@code null},\n     *         illegal or unsupported by this {@code SecureRandom}\n     *\n     * @since 9\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private boolean getThreadSafe()", "private void getDefaultPRNG(boolean setSeed, byte[] seed)", "private static String getPrngAlgorithm()", "private String getProviderName()", "public static SecureRandom getInstance(String algorithm) throws NoSuchAlgorithmException", "public static SecureRandom getInstance(String algorithm, String provider) throws NoSuchAlgorithmException, NoSuchProviderException", "public static SecureRandom getInstance(String algorithm, Provider provider) throws NoSuchAlgorithmException", "public static SecureRandom getInstance(String algorithm, SecureRandomParameters params) throws NoSuchAlgorithmException", "public static SecureRandom getInstance(String algorithm, SecureRandomParameters params, String provider) throws NoSuchAlgorithmException, NoSuchProviderException", "public static SecureRandom getInstance(String algorithm, SecureRandomParameters params, Provider provider) throws NoSuchAlgorithmException", "public final Provider getProvider()", "public String getAlgorithm()", "public String toString()", "public SecureRandomParameters getParameters()", "public void setSeed(byte[] seed)", "public void setSeed(long seed)", "public void nextBytes(byte[] bytes)", "public void nextBytes(byte[] bytes, SecureRandomParameters params)", "protected final int next(int numBits)", "public static byte[] getSeed(int numBytes)", "public byte[] generateSeed(int numBytes)", "private static byte[] longToByteArray(long l)", "public static SecureRandom getInstanceStrong() throws NoSuchAlgorithmException", "public void reseed()", "public void reseed(SecureRandomParameters params)" ],
  "variableNames" : [ "provider", "secureRandomSpi", "threadSafe", "algorithm", "seedGenerator", "serialVersionUID", "state", "digest", "randomBytes", "randomBytesUsed", "counter" ]
}