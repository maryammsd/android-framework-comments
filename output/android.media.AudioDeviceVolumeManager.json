{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/AudioDeviceVolumeManager.java",
  "packageName" : "android.media",
  "className" : "AudioDeviceVolumeManager",
  "comment" : "\n * @hide\n * AudioDeviceVolumeManager provides access to audio device volume control.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ADJUST_MODE_NORMAL",
    "type" : "int",
    "comment" : " @hide\n     * Indicates no special treatment in the handling of the volume adjustment ",
    "links" : [ ]
  }, {
    "name" : "ADJUST_MODE_START",
    "type" : "int",
    "comment" : " @hide\n     * Indicates the start of a volume adjustment ",
    "links" : [ ]
  }, {
    "name" : "ADJUST_MODE_END",
    "type" : "int",
    "comment" : " @hide\n     * Indicates the end of a volume adjustment ",
    "links" : [ ]
  }, {
    "name" : "sService",
    "type" : "IAudioService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPackageName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDeviceVolumeListenerLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDeviceVolumeListeners",
    "type" : "ArrayList<ListenerInfo>",
    "comment" : "\n     * List of listeners for volume changes, the associated device, and their associated Executor.\n     * List is lazy-initialized on first registration\n     ",
    "links" : [ ]
  }, {
    "name" : "mDeviceVolumeDispatcherStub",
    "type" : "DeviceVolumeDispatcherStub",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDeviceVolumeBehaviorChangedListenerMgr",
    "type" : "CallbackUtil.LazyListenerManager<OnDeviceVolumeBehaviorChangedListener>",
    "comment" : "\n     * Manages the OnDeviceVolumeBehaviorChangedListener listeners and\n     * DeviceVolumeBehaviorDispatcherStub\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setDeviceAbsoluteVolumeBehavior(@NonNull AudioDeviceAttributes device, @NonNull VolumeInfo volume, @NonNull @CallbackExecutor Executor executor, @NonNull OnAudioDeviceVolumeChangedListener vclistener, boolean handlesVolumeAdjustment)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     * Configures a device to use absolute volume model, and registers a listener for receiving\n     * volume updates to apply on that device\n     * @param device the audio device set to absolute volume mode\n     * @param volume the type of volume this device responds to\n     * @param executor the Executor used for receiving volume updates through the listener\n     * @param vclistener the callback for volume updates\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDeviceAbsoluteMultiVolumeBehavior(@NonNull AudioDeviceAttributes device, @NonNull List<VolumeInfo> volumes, @NonNull @CallbackExecutor Executor executor, @NonNull OnAudioDeviceVolumeChangedListener vclistener, boolean handlesVolumeAdjustment)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     * Configures a device to use absolute volume model applied to different volume types, and\n     * registers a listener for receiving volume updates to apply on that device\n     * @param device the audio device set to absolute multi-volume mode\n     * @param volumes the list of volumes the given device responds to\n     * @param executor the Executor used for receiving volume updates through the listener\n     * @param vclistener the callback for volume updates\n     * @param handlesVolumeAdjustment whether the controller handles volume adjustments separately\n     *  from volume changes. If true, adjustments from {@link AudioManager#adjustStreamVolume}\n     *  will be sent via {@link OnAudioDeviceVolumeChangedListener#onAudioDeviceVolumeAdjusted}.\n     ",
    "links" : [ "android.media.AudioManager#adjustStreamVolume", "#onAudioDeviceVolumeAdjusted" ]
  }, {
    "name" : "public void setDeviceAbsoluteVolumeAdjustOnlyBehavior(@NonNull AudioDeviceAttributes device, @NonNull VolumeInfo volume, @NonNull @CallbackExecutor Executor executor, @NonNull OnAudioDeviceVolumeChangedListener vclistener, boolean handlesVolumeAdjustment)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     * Configures a device to use absolute volume model, and registers a listener for receiving\n     * volume updates to apply on that device.\n     *\n     * Should be used instead of {@link #setDeviceAbsoluteVolumeBehavior} when there is no reliable\n     * way to set the device's volume to a percentage.\n     *\n     * @param device the audio device set to absolute volume mode\n     * @param volume the type of volume this device responds to\n     * @param executor the Executor used for receiving volume updates through the listener\n     * @param vclistener the callback for volume updates\n     ",
    "links" : [ "#setDeviceAbsoluteVolumeBehavior" ]
  }, {
    "name" : "public void setDeviceAbsoluteMultiVolumeAdjustOnlyBehavior(@NonNull AudioDeviceAttributes device, @NonNull List<VolumeInfo> volumes, @NonNull @CallbackExecutor Executor executor, @NonNull OnAudioDeviceVolumeChangedListener vclistener, boolean handlesVolumeAdjustment)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     * Configures a device to use absolute volume model applied to different volume types, and\n     * registers a listener for receiving volume updates to apply on that device.\n     *\n     * Should be used instead of {@link #setDeviceAbsoluteMultiVolumeBehavior} when there is\n     * no reliable way to set the device's volume to a percentage.\n     *\n     * @param device the audio device set to absolute multi-volume mode\n     * @param volumes the list of volumes the given device responds to\n     * @param executor the Executor used for receiving volume updates through the listener\n     * @param vclistener the callback for volume updates\n     ",
    "links" : [ "#setDeviceAbsoluteMultiVolumeBehavior" ]
  }, {
    "name" : "private void baseSetDeviceAbsoluteMultiVolumeBehavior(@NonNull AudioDeviceAttributes device, @NonNull List<VolumeInfo> volumes, @NonNull @CallbackExecutor Executor executor, @NonNull OnAudioDeviceVolumeChangedListener vclistener, boolean handlesVolumeAdjustment, @AudioManager.AbsoluteDeviceVolumeBehavior int behavior)",
    "returnType" : "void",
    "comment" : "\n     * Base method for configuring a device to use absolute volume behavior, or one of its variants.\n     * See {@link AudioManager#AbsoluteDeviceVolumeBehavior} for a list of allowed behaviors.\n     *\n     * @param behavior the variant of absolute device volume behavior to adopt\n     ",
    "links" : [ "android.media.AudioManager#AbsoluteDeviceVolumeBehavior" ]
  }, {
    "name" : "public void addOnDeviceVolumeBehaviorChangedListener(@NonNull @CallbackExecutor Executor executor, @NonNull OnDeviceVolumeBehaviorChangedListener listener) throws SecurityException",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     * Adds a listener for being notified of changes to any device's volume behavior.\n     * @throws SecurityException if the caller doesn't hold the required permission\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removeOnDeviceVolumeBehaviorChangedListener(@NonNull OnDeviceVolumeBehaviorChangedListener listener)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     * Removes a previously added listener of changes to device volume behavior.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDeviceVolume(@NonNull VolumeInfo vi, @NonNull AudioDeviceAttributes ada)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     * Sets the volume on the given audio device\n     * @param vi the volume information, only stream-based volumes are supported\n     * @param ada the device for which volume is to be modified\n     ",
    "links" : [ ]
  }, {
    "name" : "public VolumeInfo getDeviceVolume(@NonNull VolumeInfo vi, @NonNull AudioDeviceAttributes ada)",
    "returnType" : "VolumeInfo",
    "comment" : "\n     * @hide\n     * Returns the volume on the given audio device for the given volume information.\n     * For instance if using a {@link VolumeInfo} configured for {@link AudioManager#STREAM_ALARM},\n     * it will return the alarm volume. When no volume index has ever been set for the given\n     * device, the default volume will be returned (the volume setting that would have been\n     * applied if playback for that use case had started).\n     * @param vi the volume information, only stream-based volumes are supported. Information\n     *           other than the stream type is ignored.\n     * @param ada the device for which volume is to be retrieved\n     ",
    "links" : [ "android.media.AudioManager#STREAM_ALARM", "android.media.VolumeInfo" ]
  }, {
    "name" : "public static String volumeBehaviorName(@AudioManager.DeviceVolumeBehavior int behavior)",
    "returnType" : "String",
    "comment" : "\n     * @hide\n     * Return human-readable name for volume behavior\n     * @param behavior one of the volume behaviors defined in AudioManager\n     * @return a string for the given behavior\n     ",
    "links" : [ ]
  }, {
    "name" : "private static IAudioService getService()",
    "returnType" : "IAudioService",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setDeviceAbsoluteVolumeBehavior(@NonNull AudioDeviceAttributes device, @NonNull VolumeInfo volume, @NonNull @CallbackExecutor Executor executor, @NonNull OnAudioDeviceVolumeChangedListener vclistener, boolean handlesVolumeAdjustment)", "public void setDeviceAbsoluteMultiVolumeBehavior(@NonNull AudioDeviceAttributes device, @NonNull List<VolumeInfo> volumes, @NonNull @CallbackExecutor Executor executor, @NonNull OnAudioDeviceVolumeChangedListener vclistener, boolean handlesVolumeAdjustment)", "public void setDeviceAbsoluteVolumeAdjustOnlyBehavior(@NonNull AudioDeviceAttributes device, @NonNull VolumeInfo volume, @NonNull @CallbackExecutor Executor executor, @NonNull OnAudioDeviceVolumeChangedListener vclistener, boolean handlesVolumeAdjustment)", "public void setDeviceAbsoluteMultiVolumeAdjustOnlyBehavior(@NonNull AudioDeviceAttributes device, @NonNull List<VolumeInfo> volumes, @NonNull @CallbackExecutor Executor executor, @NonNull OnAudioDeviceVolumeChangedListener vclistener, boolean handlesVolumeAdjustment)", "private void baseSetDeviceAbsoluteMultiVolumeBehavior(@NonNull AudioDeviceAttributes device, @NonNull List<VolumeInfo> volumes, @NonNull @CallbackExecutor Executor executor, @NonNull OnAudioDeviceVolumeChangedListener vclistener, boolean handlesVolumeAdjustment, @AudioManager.AbsoluteDeviceVolumeBehavior int behavior)", "public void addOnDeviceVolumeBehaviorChangedListener(@NonNull @CallbackExecutor Executor executor, @NonNull OnDeviceVolumeBehaviorChangedListener listener) throws SecurityException", "public void removeOnDeviceVolumeBehaviorChangedListener(@NonNull OnDeviceVolumeBehaviorChangedListener listener)", "public void setDeviceVolume(@NonNull VolumeInfo vi, @NonNull AudioDeviceAttributes ada)", "public VolumeInfo getDeviceVolume(@NonNull VolumeInfo vi, @NonNull AudioDeviceAttributes ada)", "public static String volumeBehaviorName(@AudioManager.DeviceVolumeBehavior int behavior)", "private static IAudioService getService()" ],
  "variableNames" : [ "TAG", "ADJUST_MODE_NORMAL", "ADJUST_MODE_START", "ADJUST_MODE_END", "sService", "mPackageName", "mDeviceVolumeListenerLock", "mDeviceVolumeListeners", "mDeviceVolumeDispatcherStub", "mDeviceVolumeBehaviorChangedListenerMgr" ]
}