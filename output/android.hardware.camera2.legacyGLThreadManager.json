{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/hardware/camera2/legacy/GLThreadManager.java",
  "packageName" : "android.hardware.camera2.legacy",
  "className" : "GLThreadManager",
  "comment" : "\n * GLThreadManager handles the thread used for rendering into the configured output surfaces.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_NEW_CONFIGURATION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_NEW_FRAME",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_CLEANUP",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_DROP_FRAMES",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_ALLOW_FRAMES",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCaptureCollector",
    "type" : "CaptureCollector",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDeviceState",
    "type" : "CameraDeviceState",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTextureRenderer",
    "type" : "SurfaceTextureRenderer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGLHandlerThread",
    "type" : "RequestHandlerThread",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPrevCounter",
    "type" : "RequestThreadManager.FpsCounter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGLHandlerCb",
    "type" : "Handler.Callback",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void start()",
    "returnType" : "void",
    "comment" : "\n     * Start the thread.\n     *\n     * <p>\n     * This must be called before queueing new frames.\n     * </p>\n     ",
    "links" : [ ]
  }, {
    "name" : "public void waitUntilStarted()",
    "returnType" : "void",
    "comment" : "\n     * Wait until the thread has started.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void quit()",
    "returnType" : "void",
    "comment" : "\n     * Quit the thread.\n     *\n     * <p>\n     * No further methods can be called after this.\n     * </p>\n     ",
    "links" : [ ]
  }, {
    "name" : "public void queueNewFrame()",
    "returnType" : "void",
    "comment" : "\n     * Queue a new call to draw into the surfaces specified in the next available preview\n     * request from the {@link CaptureCollector} passed to\n     * {@link #setConfigurationAndWait(java.util.Collection, CaptureCollector)};\n     ",
    "links" : [ "CaptureCollector", "#setConfigurationAndWait" ]
  }, {
    "name" : "public void setConfigurationAndWait(Collection<Pair<Surface, Size>> surfaces, CaptureCollector collector)",
    "returnType" : "void",
    "comment" : "\n     * Configure the GL renderer for the given set of output surfaces, and block until\n     * this configuration has been applied.\n     *\n     * @param surfaces a collection of pairs of {@link android.view.Surface}s and their\n     *                 corresponding sizes to configure.\n     * @param collector a {@link CaptureCollector} to retrieve requests from.\n     ",
    "links" : [ "android.view.Surface", "CaptureCollector" ]
  }, {
    "name" : "public SurfaceTexture getCurrentSurfaceTexture()",
    "returnType" : "SurfaceTexture",
    "comment" : "\n     * Get the underlying surface to produce frames from.\n     *\n     * <p>\n     * This returns the surface that is drawn into the set of surfaces passed in for each frame.\n     * This method should only be called after a call to\n     * {@link #setConfigurationAndWait(java.util.Collection)}.  Calling this before the first call\n     * to {@link #setConfigurationAndWait(java.util.Collection)}, after {@link #quit()}, or\n     * concurrently to one of these calls may result in an invalid\n     * {@link android.graphics.SurfaceTexture} being returned.\n     * </p>\n     *\n     * @return an {@link android.graphics.SurfaceTexture} to draw to.\n     ",
    "links" : [ "#setConfigurationAndWait", "#setConfigurationAndWait", "#quit", "android.graphics.SurfaceTexture", "android.graphics.SurfaceTexture" ]
  }, {
    "name" : "public void ignoreNewFrames()",
    "returnType" : "void",
    "comment" : "\n     * Ignore any subsequent calls to {@link #queueNewFrame(java.util.Collection)}.\n     ",
    "links" : [ "#queueNewFrame" ]
  }, {
    "name" : "public void waitUntilIdle()",
    "returnType" : "void",
    "comment" : "\n     * Wait until no messages are queued.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void allowNewFrames()",
    "returnType" : "void",
    "comment" : "\n     * Re-enable drawing new frames after a call to {@link #ignoreNewFrames()}.\n     ",
    "links" : [ "#ignoreNewFrames" ]
  } ],
  "variableNames" : [ "TAG", "DEBUG", "MSG_NEW_CONFIGURATION", "MSG_NEW_FRAME", "MSG_CLEANUP", "MSG_DROP_FRAMES", "MSG_ALLOW_FRAMES", "mCaptureCollector", "mDeviceState", "mTextureRenderer", "mGLHandlerThread", "mPrevCounter", "mGLHandlerCb" ],
  "methodNames" : [ "public void start()", "public void waitUntilStarted()", "public void quit()", "public void queueNewFrame()", "public void setConfigurationAndWait(Collection<Pair<Surface, Size>> surfaces, CaptureCollector collector)", "public SurfaceTexture getCurrentSurfaceTexture()", "public void ignoreNewFrames()", "public void waitUntilIdle()", "public void allowNewFrames()" ]
}