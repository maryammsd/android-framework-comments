{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/os/Looper.java",
  "packageName" : "android.os",
  "className" : "Looper",
  "comment" : "\n  * Class used to run a message loop for a thread.  Threads by default do\n  * not have a message loop associated with them; to create one, call\n  * {@link #prepare} in the thread that is to run the loop, and then\n  * {@link #loop} to have it process messages until the loop is stopped.\n  *\n  * <p>Most interaction with a message loop is through the\n  * {@link Handler} class.\n  *\n  * <p>This is a typical example of the implementation of a Looper thread,\n  * using the separation of {@link #prepare} and {@link #loop} to create an\n  * initial Handler to communicate with the Looper.\n  *\n  * <pre>\n  *  class LooperThread extends Thread {\n  *      public Handler mHandler;\n  *\n  *      public void run() {\n  *          Looper.prepare();\n  *\n  *          mHandler = new Handler(Looper.myLooper()) {\n  *              public void handleMessage(Message msg) {\n  *                  // process incoming messages here\n  *              }\n  *          };\n  *\n  *          Looper.loop();\n  *      }\n  *  }</pre>\n  ",
  "links" : [ "android.os.Handler", "#loop", "#prepare" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sThreadLocal",
    "type" : "ThreadLocal<Looper>",
    "comment" : " sThreadLocal.get() will return null unless you've called prepare().",
    "links" : [ ]
  }, {
    "name" : "sMainLooper",
    "type" : "Looper",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sObserver",
    "type" : "Observer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mQueue",
    "type" : "MessageQueue",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mThread",
    "type" : "Thread",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInLoop",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLogging",
    "type" : "Printer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTraceTag",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSlowDispatchThresholdMs",
    "type" : "long",
    "comment" : "\n     * If set, the looper will show a warning log if a message dispatch takes longer than this.\n     ",
    "links" : [ ]
  }, {
    "name" : "mSlowDeliveryThresholdMs",
    "type" : "long",
    "comment" : "\n     * If set, the looper will show a warning log if a message delivery (actual delivery time -\n     * post time) takes longer than this.\n     ",
    "links" : [ ]
  }, {
    "name" : "mSlowDeliveryDetected",
    "type" : "boolean",
    "comment" : "\n     * True if a message delivery takes longer than {@link #mSlowDeliveryThresholdMs}.\n     ",
    "links" : [ "#mSlowDeliveryThresholdMs" ]
  } ],
  "methods" : [ {
    "name" : "public static void prepare()",
    "returnType" : "void",
    "comment" : " Initialize the current thread as a looper.\n      * This gives you a chance to create handlers that then reference\n      * this looper, before actually starting the loop. Be sure to call\n      * {@link #loop()} after calling this method, and end it by calling\n      * {@link #quit()}.\n      ",
    "links" : [ "#quit()", "#loop()" ]
  }, {
    "name" : "private static void prepare(boolean quitAllowed)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void prepareMainLooper()",
    "returnType" : "void",
    "comment" : "\n     * Initialize the current thread as a looper, marking it as an\n     * application's main looper. See also: {@link #prepare()}\n     *\n     * @deprecated The main looper for your application is created by the Android environment,\n     *   so you should never need to call this function yourself.\n     ",
    "links" : [ "#prepare()" ]
  }, {
    "name" : "public static Looper getMainLooper()",
    "returnType" : "Looper",
    "comment" : "\n     * Returns the application's main looper, which lives in the main thread of the application.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setMainLooperForTest(@NonNull Looper looper)",
    "returnType" : "void",
    "comment" : "\n     * Force the application's main looper to the given value.  The main looper is typically\n     * configured automatically by the OS, so this capability is only intended to enable testing.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void clearMainLooperForTest()",
    "returnType" : "void",
    "comment" : "\n     * Clear the application's main looper to be undefined.  The main looper is typically\n     * configured automatically by the OS, so this capability is only intended to enable testing.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setObserver(@Nullable Observer observer)",
    "returnType" : "void",
    "comment" : "\n     * Set the transaction observer for all Loopers in this process.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean loopOnce(final Looper me, final long ident, final int thresholdOverride)",
    "returnType" : "boolean",
    "comment" : "\n     * Poll and deliver single message, return true if the outer loop should continue.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void loop()",
    "returnType" : "void",
    "comment" : "\n     * Run the message queue in this thread. Be sure to call\n     * {@link #quit()} to end the loop.\n     ",
    "links" : [ "#quit()" ]
  }, {
    "name" : "private static int getThresholdOverride()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int getThresholdOverride$ravenwood()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean showSlowLog(long threshold, long measureStart, long measureEnd, String what, Message msg)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static Looper myLooper()",
    "returnType" : "Looper",
    "comment" : "\n     * Return the Looper object associated with the current thread.  Returns\n     * null if the calling thread is not associated with a Looper.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static MessageQueue myQueue()",
    "returnType" : "MessageQueue",
    "comment" : "\n     * Return the {@link MessageQueue} object associated with the current\n     * thread.  This must be called from a thread running a Looper, or a\n     * NullPointerException will be thrown.\n     ",
    "links" : [ "android.os.MessageQueue" ]
  }, {
    "name" : "public boolean isCurrentThread()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the current thread is this looper's thread.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMessageLogging(@Nullable Printer printer)",
    "returnType" : "void",
    "comment" : "\n     * Control logging of messages as they are processed by this Looper.  If\n     * enabled, a log message will be written to <var>printer</var>\n     * at the beginning and ending of each message dispatch, identifying the\n     * target Handler and message contents.\n     *\n     * @param printer A Printer object that will receive log messages, or\n     * null to disable message logging.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTraceTag(long traceTag)",
    "returnType" : "void",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public void setSlowLogThresholdMs(long slowDispatchThresholdMs, long slowDeliveryThresholdMs)",
    "returnType" : "void",
    "comment" : "\n     * Set a thresholds for slow dispatch/delivery log.\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public void quit()",
    "returnType" : "void",
    "comment" : "\n     * Quits the looper.\n     * <p>\n     * Causes the {@link #loop} method to terminate without processing any\n     * more messages in the message queue.\n     * </p><p>\n     * Any attempt to post messages to the queue after the looper is asked to quit will fail.\n     * For example, the {@link Handler#sendMessage(Message)} method will return false.\n     * </p><p class=\"note\">\n     * Using this method may be unsafe because some messages may not be delivered\n     * before the looper terminates.  Consider using {@link #quitSafely} instead to ensure\n     * that all pending work is completed in an orderly manner.\n     * </p>\n     *\n     * @see #quitSafely\n     ",
    "links" : [ "#quitSafely", "#loop", "android.os.Handler#sendMessage(Message)" ]
  }, {
    "name" : "public void quitSafely()",
    "returnType" : "void",
    "comment" : "\n     * Quits the looper safely.\n     * <p>\n     * Causes the {@link #loop} method to terminate as soon as all remaining messages\n     * in the message queue that are already due to be delivered have been handled.\n     * However pending delayed messages with due times in the future will not be\n     * delivered before the loop terminates.\n     * </p><p>\n     * Any attempt to post messages to the queue after the looper is asked to quit will fail.\n     * For example, the {@link Handler#sendMessage(Message)} method will return false.\n     * </p>\n     ",
    "links" : [ "#loop", "android.os.Handler#sendMessage(Message)" ]
  }, {
    "name" : "public Thread getThread()",
    "returnType" : "Thread",
    "comment" : "\n     * Gets the Thread associated with this Looper.\n     *\n     * @return The looper's thread.\n     ",
    "links" : [ ]
  }, {
    "name" : "public MessageQueue getQueue()",
    "returnType" : "MessageQueue",
    "comment" : "\n     * Gets this looper's message queue.\n     *\n     * @return The looper's message queue.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void dump(@NonNull Printer pw, @NonNull String prefix)",
    "returnType" : "void",
    "comment" : "\n     * Dumps the state of the looper for debugging purposes.\n     *\n     * @param pw A printer to receive the contents of the dump.\n     * @param prefix A prefix to prepend to each line which is printed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void dump(@NonNull Printer pw, @NonNull String prefix, Handler handler)",
    "returnType" : "void",
    "comment" : "\n     * Dumps the state of the looper for debugging purposes.\n     *\n     * @param pw A printer to receive the contents of the dump.\n     * @param prefix A prefix to prepend to each line which is printed.\n     * @param handler Only dump messages for this Handler.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void dumpDebug(ProtoOutputStream proto, long fieldId)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static void prepare()", "private static void prepare(boolean quitAllowed)", "public static void prepareMainLooper()", "public static Looper getMainLooper()", "public static void setMainLooperForTest(@NonNull Looper looper)", "public static void clearMainLooperForTest()", "public static void setObserver(@Nullable Observer observer)", "private static boolean loopOnce(final Looper me, final long ident, final int thresholdOverride)", "public static void loop()", "private static int getThresholdOverride()", "private static int getThresholdOverride$ravenwood()", "private static boolean showSlowLog(long threshold, long measureStart, long measureEnd, String what, Message msg)", "public static Looper myLooper()", "public static MessageQueue myQueue()", "public boolean isCurrentThread()", "public void setMessageLogging(@Nullable Printer printer)", "public void setTraceTag(long traceTag)", "public void setSlowLogThresholdMs(long slowDispatchThresholdMs, long slowDeliveryThresholdMs)", "public void quit()", "public void quitSafely()", "public Thread getThread()", "public MessageQueue getQueue()", "public void dump(@NonNull Printer pw, @NonNull String prefix)", "public void dump(@NonNull Printer pw, @NonNull String prefix, Handler handler)", "public void dumpDebug(ProtoOutputStream proto, long fieldId)", "public String toString()" ],
  "variableNames" : [ "TAG", "sThreadLocal", "sMainLooper", "sObserver", "mQueue", "mThread", "mInLoop", "mLogging", "mTraceTag", "mSlowDispatchThresholdMs", "mSlowDeliveryThresholdMs", "mSlowDeliveryDetected" ]
}