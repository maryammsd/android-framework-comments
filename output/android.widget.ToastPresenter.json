{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/widget/ToastPresenter.java",
  "packageName" : "android.widget",
  "className" : "ToastPresenter",
  "comment" : "\n * Class responsible for toast presentation inside app's process and in system UI.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "WINDOW_TITLE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SHORT_DURATION_TIMEOUT",
    "type" : "long",
    "comment" : " exclusively used to guarantee window timeouts",
    "links" : [ ]
  }, {
    "name" : "LONG_DURATION_TIMEOUT",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TEXT_TOAST_LAYOUT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TEXT_TOAST_LAYOUT_WITH_ICON",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "WeakReference<Context>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mResources",
    "type" : "Resources",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAccessibilityManagerService",
    "type" : "IAccessibilityManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNotificationManager",
    "type" : "INotificationManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPackageName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContextPackageName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mParams",
    "type" : "WindowManager.LayoutParams",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mView",
    "type" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mToken",
    "type" : "IBinder",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static View getTextToastView(Context context, CharSequence text)",
    "returnType" : "View",
    "comment" : "\n     * Returns the default text toast view for message {@code text}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static View getTextToastViewWithIcon(Context context, CharSequence text, Drawable icon)",
    "returnType" : "View",
    "comment" : "\n     * Returns the default icon text toast view for message {@code text} and the icon {@code icon}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getPackageName()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public WindowManager.LayoutParams getLayoutParams()",
    "returnType" : "WindowManager.LayoutParams",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public View getView()",
    "returnType" : "View",
    "comment" : "\n     * Returns the {@link View} being shown at the moment or {@code null} if no toast is being\n     * displayed.\n     ",
    "links" : [ "android.view.View" ]
  }, {
    "name" : "public IBinder getToken()",
    "returnType" : "IBinder",
    "comment" : "\n     * Returns the {@link IBinder} token used to display the toast or {@code null} if there is no\n     * toast being shown at the moment.\n     ",
    "links" : [ "android.os.IBinder" ]
  }, {
    "name" : "private WindowManager.LayoutParams createLayoutParams()",
    "returnType" : "WindowManager.LayoutParams",
    "comment" : "\n     * Creates {@link WindowManager.LayoutParams} with default values for toasts.\n     ",
    "links" : [ "WindowManager.LayoutParams" ]
  }, {
    "name" : "private void adjustLayoutParams(WindowManager.LayoutParams params, IBinder windowToken, int duration, int gravity, int xOffset, int yOffset, float horizontalMargin, float verticalMargin, boolean removeWindowAnimations)",
    "returnType" : "void",
    "comment" : "\n     * Customizes {@code params} according to other parameters, ready to be passed to {@link\n     * WindowManager#addView(View, ViewGroup.LayoutParams)}.\n     ",
    "links" : [ "android.view.WindowManager#addView(View" ]
  }, {
    "name" : "public void updateLayoutParams(int xOffset, int yOffset, float horizontalMargin, float verticalMargin, int gravity)",
    "returnType" : "void",
    "comment" : "\n     * Update the LayoutParameters of the currently showing toast view. This is used for layout\n     * updates based on orientation changes.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setShowForAllUsersIfApplicable(WindowManager.LayoutParams params, String packageName)",
    "returnType" : "void",
    "comment" : "\n     * Sets {@link WindowManager.LayoutParams#SYSTEM_FLAG_SHOW_FOR_ALL_USERS} flag if {@code\n     * packageName} is a cross-user package.\n     *\n     * <p>Implementation note:\n     *     This code is safe to be executed in SystemUI and the app's process:\n     *         <li>SystemUI: It's running on a trusted domain so apps can't tamper with it. SystemUI\n     *             has the permission INTERNAL_SYSTEM_WINDOW needed by the flag, so SystemUI can add\n     *             the flag on behalf of those packages, which all contain INTERNAL_SYSTEM_WINDOW\n     *             permission.\n     *         <li>App: The flag being added is protected behind INTERNAL_SYSTEM_WINDOW permission\n     *             and any app can already add that flag via getWindowParams() if it has that\n     *             permission, so we are just doing this automatically for cross-user packages.\n     ",
    "links" : [ "WindowManager.LayoutParams#SYSTEM_FLAG_SHOW_FOR_ALL_USERS" ]
  }, {
    "name" : "private boolean isCrossUserPackage(String packageName)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void show(View view, IBinder token, IBinder windowToken, int duration, int gravity, int xOffset, int yOffset, float horizontalMargin, float verticalMargin, @Nullable ITransientNotificationCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Shows the toast in {@code view} with the parameters passed and callback {@code callback}.\n     * Uses window animations to animate the toast.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void show(View view, IBinder token, IBinder windowToken, int duration, int gravity, int xOffset, int yOffset, float horizontalMargin, float verticalMargin, @Nullable ITransientNotificationCallback callback, boolean removeWindowAnimations)",
    "returnType" : "void",
    "comment" : "\n     * Shows the toast in {@code view} with the parameters passed and callback {@code callback}.\n     * Can optionally remove window animations from the toast window.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void hide(@Nullable ITransientNotificationCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Hides toast that was shown using {@link #show(View, IBinder, IBinder, int,\n     * int, int, int, float, float, ITransientNotificationCallback)}.\n     *\n     * <p>This method has to be called on the same thread on which {@link #show(View, IBinder,\n     * IBinder, int, int, int, int, float, float, ITransientNotificationCallback)} was called.\n     ",
    "links" : [ "#show(View" ]
  }, {
    "name" : "private WindowManager getWindowManager(View view)",
    "returnType" : "WindowManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void trySendAccessibilityEvent(View view, String packageName)",
    "returnType" : "void",
    "comment" : "\n     * Sends {@link AccessibilityEvent#TYPE_NOTIFICATION_STATE_CHANGED} event if accessibility is\n     * enabled.\n     ",
    "links" : [ "android.view.accessibility.AccessibilityEvent#TYPE_NOTIFICATION_STATE_CHANGED" ]
  }, {
    "name" : "private void addToastView()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static View getTextToastView(Context context, CharSequence text)", "public static View getTextToastViewWithIcon(Context context, CharSequence text, Drawable icon)", "public String getPackageName()", "public WindowManager.LayoutParams getLayoutParams()", "public View getView()", "public IBinder getToken()", "private WindowManager.LayoutParams createLayoutParams()", "private void adjustLayoutParams(WindowManager.LayoutParams params, IBinder windowToken, int duration, int gravity, int xOffset, int yOffset, float horizontalMargin, float verticalMargin, boolean removeWindowAnimations)", "public void updateLayoutParams(int xOffset, int yOffset, float horizontalMargin, float verticalMargin, int gravity)", "private void setShowForAllUsersIfApplicable(WindowManager.LayoutParams params, String packageName)", "private boolean isCrossUserPackage(String packageName)", "public void show(View view, IBinder token, IBinder windowToken, int duration, int gravity, int xOffset, int yOffset, float horizontalMargin, float verticalMargin, @Nullable ITransientNotificationCallback callback)", "public void show(View view, IBinder token, IBinder windowToken, int duration, int gravity, int xOffset, int yOffset, float horizontalMargin, float verticalMargin, @Nullable ITransientNotificationCallback callback, boolean removeWindowAnimations)", "public void hide(@Nullable ITransientNotificationCallback callback)", "private WindowManager getWindowManager(View view)", "public void trySendAccessibilityEvent(View view, String packageName)", "private void addToastView()" ],
  "variableNames" : [ "TAG", "WINDOW_TITLE", "SHORT_DURATION_TIMEOUT", "LONG_DURATION_TIMEOUT", "TEXT_TOAST_LAYOUT", "TEXT_TOAST_LAYOUT_WITH_ICON", "mContext", "mResources", "mAccessibilityManagerService", "mNotificationManager", "mPackageName", "mContextPackageName", "mParams", "mView", "mToken" ]
}