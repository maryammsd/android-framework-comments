{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/widget/GridLayout.java",
  "packageName" : "android.widget",
  "className" : "PackedMap",
  "comment" : "\n    This data structure is used in place of a Map where we have an index that refers to the order\n    in which each key/value pairs were added to the map. In this case we store keys and values\n    in arrays of a length that is equal to the number of unique keys. We also maintain an\n    array of indexes from insertion order to the compacted arrays of keys and values.\n\n    Note that behavior differs from that of a LinkedHashMap in that repeated entries\n    *do* get added multiples times. So the length of index is equals to the number of\n    items added.\n\n    This is useful in the GridLayout class where we can rely on the order of children not\n    changing during layout - to use integer-based lookup for our internal structures\n    rather than using (and storing) an implementation of Map<Key, ?>.\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "index",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "keys",
    "type" : "K[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "values",
    "type" : "V[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public V getValue(int i)",
    "returnType" : "V",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int[] createIndex(K[] keys)",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static K[] compact(K[] a, int[] index)",
    "returnType" : "K[]",
    "comment" : "\n        Create a compact array of keys or values using the supplied index.\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public V getValue(int i)", "private static int[] createIndex(K[] keys)", "private static K[] compact(K[] a, int[] index)" ],
  "variableNames" : [ "index", "keys", "values" ]
}