{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/ddm/DdmHandleThread.java",
  "packageName" : "android.ddm",
  "className" : "DdmHandleThread",
  "comment" : "\n * Handle thread-related traffic.\n ",
  "variables" : [ {
    "name" : "CHUNK_THEN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CHUNK_THCR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CHUNK_THDE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CHUNK_THST",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CHUNK_STKL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInstance",
    "type" : "DdmHandleThread",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static void register()",
    "returnType" : "void",
    "comment" : "\n     * Register for the messages we're interested in.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void connected()",
    "returnType" : "void",
    "comment" : "\n     * Called when the DDM server connects.  The handler is allowed to\n     * send messages to the server.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void disconnected()",
    "returnType" : "void",
    "comment" : "\n     * Called when the DDM server disconnects.  Can be used to disable\n     * periodic transmissions or clean up saved state.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Chunk handleChunk(Chunk request)",
    "returnType" : "Chunk",
    "comment" : "\n     * Handle a chunk of data.\n     ",
    "links" : [ ]
  }, {
    "name" : "private Chunk handleTHEN(Chunk request)",
    "returnType" : "Chunk",
    "comment" : "\n     * Handle a \"THread notification ENable\" request.\n     ",
    "links" : [ ]
  }, {
    "name" : "private Chunk handleTHST(Chunk request)",
    "returnType" : "Chunk",
    "comment" : "\n     * Handle a \"THread STatus\" request.  This is constructed by the VM.\n     ",
    "links" : [ ]
  }, {
    "name" : "private Chunk handleSTKL(Chunk request)",
    "returnType" : "Chunk",
    "comment" : "\n     * Handle a STacK List request.\n     *\n     * This is done by threadId, which isn't great since those are\n     * recycled.  We need a thread serial ID.  The Linux tid is an okay\n     * answer as it's unlikely to recycle at the exact wrong moment.\n     * However, we're using the short threadId in THST messages, so we\n     * use them here for consistency.  (One thought is to keep the current\n     * thread ID in the low 16 bits and somehow serialize the top 16 bits.)\n     ",
    "links" : [ ]
  }, {
    "name" : "private Chunk createStackChunk(StackTraceElement[] trace, int threadId)",
    "returnType" : "Chunk",
    "comment" : "\n     * Serialize a StackTraceElement[] into an STKL chunk.\n     *\n     * We include the threadId in the response so the other side doesn't have\n     * to match up requests and responses as carefully.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "CHUNK_THEN", "CHUNK_THCR", "CHUNK_THDE", "CHUNK_THST", "CHUNK_STKL", "mInstance" ],
  "methodNames" : [ "public static void register()", "public void connected()", "public void disconnected()", "public Chunk handleChunk(Chunk request)", "private Chunk handleTHEN(Chunk request)", "private Chunk handleTHST(Chunk request)", "private Chunk handleSTKL(Chunk request)", "private Chunk createStackChunk(StackTraceElement[] trace, int threadId)" ]
}