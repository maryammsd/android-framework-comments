{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/window/WindowTokenClient.java",
  "packageName" : "android.window",
  "className" : "WindowTokenClient",
  "comment" : "\n * This class is used to receive {@link Configuration} changes from the associated window manager\n * node on the server side, and apply the change to the {@link Context#getResources() associated\n * Resources} of the attached {@link Context}. It is also used as\n * {@link Context#getWindowContextToken() the token of non-Activity UI Contexts}.\n *\n * @see WindowContext\n * @see android.view.IWindowManager#attachWindowContextToDisplayArea\n *\n * @hide\n ",
  "links" : [ "android.content.Context#getResources()", "android.content.Context", "android.content.res.Configuration", "android.content.Context#getWindowContextToken()" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContextRef",
    "type" : "WeakReference<Context>",
    "comment" : "\n     * Attached {@link Context} for this window token to update configuration and resources.\n     * Initialized by {@link #attachContext(Context)}.\n     ",
    "links" : [ "#attachContext(Context)", "android.content.Context" ]
  }, {
    "name" : "mResourcesManager",
    "type" : "ResourcesManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConfiguration",
    "type" : "Configuration",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mShouldDumpConfigForIme",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void attachContext(@NonNull Context context)",
    "returnType" : "void",
    "comment" : "\n     * Attaches {@code context} to this {@link WindowTokenClient}. Each {@link WindowTokenClient}\n     * can only attach one {@link Context}.\n     * <p>This method must be called before invoking\n     * {@link android.view.IWindowManager#attachWindowContextToDisplayArea}.<p/>\n     *\n     * @param context context to be attached\n     * @throws IllegalStateException if attached context has already existed.\n     ",
    "links" : [ "android.content.Context", "android.view.IWindowManager#attachWindowContextToDisplayArea", "android.window.WindowTokenClient" ]
  }, {
    "name" : "public Context getContext()",
    "returnType" : "Context",
    "comment" : "\n     * Gets the {@link Context} that this {@link WindowTokenClient} is attached through\n     * {@link #attachContext(Context)}.\n     ",
    "links" : [ "#attachContext(Context)", "android.content.Context", "android.window.WindowTokenClient" ]
  }, {
    "name" : "public void onConfigurationChanged(Configuration newConfig, int newDisplayId)",
    "returnType" : "void",
    "comment" : "\n     * Called when {@link Configuration} updates from the server side receive.\n     *\n     * @param newConfig the updated {@link Configuration}\n     * @param newDisplayId the updated {@link android.view.Display} ID\n     ",
    "links" : [ "android.content.res.Configuration", "android.view.Display" ]
  }, {
    "name" : "public void postOnConfigurationChanged(@NonNull Configuration newConfig, int newDisplayId)",
    "returnType" : "void",
    "comment" : "\n     * Posts an {@link #onConfigurationChanged} to the main thread.\n     ",
    "links" : [ "#onConfigurationChanged" ]
  }, {
    "name" : "public void onConfigurationChanged(@NonNull Configuration newConfig, int newDisplayId, boolean shouldReportConfigChange)",
    "returnType" : "void",
    "comment" : "\n     * Called when {@link Configuration} updates from the server side receive.\n     *\n     * Similar to {@link #onConfigurationChanged(Configuration, int)}, but adds a flag to control\n     * whether to dispatch configuration update or not.\n     * <p>\n     * Note that this method must be executed on the main thread if\n     * {@code shouldReportConfigChange} is {@code true}, which is usually from\n     * {@link #onConfigurationChanged(Configuration, int)}\n     * directly, while this method could be run on any thread if it is used to initialize\n     * Context's {@code Configuration} via {@link WindowTokenClientController#attachToDisplayArea}\n     * or {@link WindowTokenClientController#attachToDisplayContent}.\n     *\n     * @param shouldReportConfigChange {@code true} to indicate that the {@code Configuration}\n     *                                 should be dispatched to listeners.\n     ",
    "links" : [ "#onConfigurationChanged(Configuration", "android.window.WindowTokenClientController#attachToDisplayArea", "android.content.res.Configuration", "android.window.WindowTokenClientController#attachToDisplayContent" ]
  }, {
    "name" : "public void onConfigurationChangedInner(@NonNull Context context, @NonNull Configuration newConfig, int newDisplayId, boolean shouldReportConfigChange)",
    "returnType" : "void",
    "comment" : " Handles onConfiguration changed. ",
    "links" : [ ]
  }, {
    "name" : "public void onWindowTokenRemoved()",
    "returnType" : "void",
    "comment" : "\n     * Called when the attached window is removed from the display.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ClientTransactionListenerController getClientTransactionListenerController()",
    "returnType" : "ClientTransactionListenerController",
    "comment" : " Gets {@link ClientTransactionListenerController}. ",
    "links" : [ "android.app.servertransaction.ClientTransactionListenerController" ]
  } ],
  "methodNames" : [ "public void attachContext(@NonNull Context context)", "public Context getContext()", "public void onConfigurationChanged(Configuration newConfig, int newDisplayId)", "public void postOnConfigurationChanged(@NonNull Configuration newConfig, int newDisplayId)", "public void onConfigurationChanged(@NonNull Configuration newConfig, int newDisplayId, boolean shouldReportConfigChange)", "public void onConfigurationChangedInner(@NonNull Context context, @NonNull Configuration newConfig, int newDisplayId, boolean shouldReportConfigChange)", "public void onWindowTokenRemoved()", "public ClientTransactionListenerController getClientTransactionListenerController()" ],
  "variableNames" : [ "TAG", "mContextRef", "mResourcesManager", "mConfiguration", "mShouldDumpConfigForIme", "mHandler" ]
}