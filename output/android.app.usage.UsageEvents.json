{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/usage/UsageEvents.java",
  "packageName" : "android.app.usage",
  "className" : "UsageEvents",
  "comment" : "\n * A result returned from {@link android.app.usage.UsageStatsManager#queryEvents(long, long)}\n * from which to read {@link android.app.usage.UsageEvents.Event} objects.\n ",
  "links" : [ "android.app.usage.UsageStatsManager#queryEvents(long", "android.app.usage.UsageEvents.Event" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INSTANT_APP_PACKAGE_NAME",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "INSTANT_APP_CLASS_NAME",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "OBFUSCATED_NOTIFICATION_CHANNEL_ID",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "SHOW_ALL_EVENT_DATA",
    "type" : "int",
    "comment" : "\n     * Flag: indicates to not obfuscate or hide any usage event data when being queried.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "OBFUSCATE_INSTANT_APPS",
    "type" : "int",
    "comment" : "\n     * Flag: indicates to obfuscate package and class names for instant apps when querying usage\n     * events.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "HIDE_SHORTCUT_EVENTS",
    "type" : "int",
    "comment" : "\n     * Flag: indicates to hide all {@link Event#SHORTCUT_INVOCATION} events when querying usage\n     * events.\n     * @hide\n     ",
    "links" : [ "#SHORTCUT_INVOCATION" ]
  }, {
    "name" : "OBFUSCATE_NOTIFICATION_EVENTS",
    "type" : "int",
    "comment" : "\n     * Flag: indicates to obfuscate the notification channel id for all notification events,\n     * such as {@link Event#NOTIFICATION_SEEN} and {@link Event#NOTIFICATION_INTERRUPTION} events,\n     * when querying usage events.\n     * @hide\n     ",
    "links" : [ "#NOTIFICATION_INTERRUPTION", "#NOTIFICATION_SEEN" ]
  }, {
    "name" : "HIDE_LOCUS_EVENTS",
    "type" : "int",
    "comment" : "\n     * Flag: indicates to hide all {@link Event#LOCUS_ID_SET} events when querying usage events.\n     * @hide\n     ",
    "links" : [ "#LOCUS_ID_SET" ]
  }, {
    "name" : "mEventsToWrite",
    "type" : "List<Event>",
    "comment" : " Only used when creating the resulting events. Not used for reading/unparceling.",
    "links" : [ ]
  }, {
    "name" : "mParcel",
    "type" : "Parcel",
    "comment" : " Only used for reading/unparceling events.",
    "links" : [ ]
  }, {
    "name" : "mEventCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIndex",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIncludeTaskRoots",
    "type" : "boolean",
    "comment" : " Only used when parceling events. If false, task roots will be omitted from the parcel",
    "links" : [ ]
  }, {
    "name" : "mStringPool",
    "type" : "String[]",
    "comment" : "\n     * In order to save space, since ComponentNames will be duplicated everywhere,\n     * we use a map and index into it.\n     ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<UsageEvents>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void readUsageEventsFromParcelWithParceledList(Parcel in)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void readUsageEventsFromParcelWithBlob(Parcel in)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasNextEvent()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether or not there are more events to read using\n     * {@link #getNextEvent(android.app.usage.UsageEvents.Event)}.\n     *\n     * @return true if there are more events, false otherwise.\n     ",
    "links" : [ "#getNextEvent(android.app.usage.UsageEvents.Event)" ]
  }, {
    "name" : "public boolean getNextEvent(Event eventOut)",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieve the next {@link android.app.usage.UsageEvents.Event} from the collection and put the\n     * resulting data into {@code eventOut}.\n     *\n     * @param eventOut The {@link android.app.usage.UsageEvents.Event} object that will receive the\n     *                 next event data.\n     * @return true if an event was available, false if there are no more events.\n     ",
    "links" : [ "android.app.usage.UsageEvents.Event" ]
  }, {
    "name" : "private boolean getNextEventFromParceledList(Event eventOut)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void resetToStart()",
    "returnType" : "void",
    "comment" : "\n     * Resets the collection so that it can be iterated over from the beginning.\n     *\n     * @hide When this object is iterated to completion, the parcel is destroyed and\n     * so resetToStart doesn't work.\n     ",
    "links" : [ ]
  }, {
    "name" : "private int findStringIndex(String str)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void writeEventToParcel(Event event, Parcel p, int flags)",
    "returnType" : "void",
    "comment" : "\n     * Writes a single event to the parcel. Modify this when updating {@link Event}.\n     ",
    "links" : [ "Event" ]
  }, {
    "name" : "private void readEventFromParcel(Parcel p, Event eventOut)",
    "returnType" : "void",
    "comment" : "\n     * Reads a single event from the parcel. Modify this when updating {@link Event}.\n     ",
    "links" : [ "Event" ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void writeUsageEventsToParcelWithParceledList(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void writeUsageEventsToParcelWithBlob(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void readUsageEventsFromParcelWithParceledList(Parcel in)", "private void readUsageEventsFromParcelWithBlob(Parcel in)", "public boolean hasNextEvent()", "public boolean getNextEvent(Event eventOut)", "private boolean getNextEventFromParceledList(Event eventOut)", "public void resetToStart()", "private int findStringIndex(String str)", "private void writeEventToParcel(Event event, Parcel p, int flags)", "private void readEventFromParcel(Parcel p, Event eventOut)", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)", "private void writeUsageEventsToParcelWithParceledList(Parcel dest, int flags)", "private void writeUsageEventsToParcelWithBlob(Parcel dest, int flags)" ],
  "variableNames" : [ "TAG", "INSTANT_APP_PACKAGE_NAME", "INSTANT_APP_CLASS_NAME", "OBFUSCATED_NOTIFICATION_CHANNEL_ID", "SHOW_ALL_EVENT_DATA", "OBFUSCATE_INSTANT_APPS", "HIDE_SHORTCUT_EVENTS", "OBFUSCATE_NOTIFICATION_EVENTS", "HIDE_LOCUS_EVENTS", "mEventsToWrite", "mParcel", "mEventCount", "mIndex", "mIncludeTaskRoots", "mStringPool", "CREATOR" ]
}