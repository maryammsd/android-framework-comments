{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/prefs/FileSystemPreferences.java",
  "packageName" : "java.util.prefs",
  "className" : "FileSystemPreferences",
  "comment" : "\n * Preferences implementation for Unix.  Preferences are stored in the file\n * system, with one directory per preferences node.  All of the preferences\n * at each node are stored in a single file.  Atomic file system operations\n * (e.g. File.renameTo) are used to ensure integrity.  An in-memory cache of\n * the \"explored\" portion of the tree is maintained for performance, and\n * written back to the disk periodically.  File-locking is used to ensure\n * reasonable behavior when multiple VMs are running at the same time.\n * (The file lock is obtained only for sync(), flush() and removeNode().)\n *\n * @author  Josh Bloch\n * @see     Preferences\n * @since   1.4\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "systemRootDir",
    "type" : "File",
    "comment" : "\n     * Directory for system preferences.\n     ",
    "links" : [ ]
  }, {
    "name" : "isSystemRootWritable",
    "type" : "boolean",
    "comment" : "\n     * Flag, indicating whether systemRoot  directory is writable\n     ",
    "links" : [ ]
  }, {
    "name" : "userRootDir",
    "type" : "File",
    "comment" : "\n     * Directory for user preferences.\n     ",
    "links" : [ ]
  }, {
    "name" : "isUserRootWritable",
    "type" : "boolean",
    "comment" : "\n     * Flag, indicating whether userRoot  directory is writable\n     ",
    "links" : [ ]
  }, {
    "name" : "userRoot",
    "type" : "Preferences",
    "comment" : "\n     * The user root.\n     ",
    "links" : [ ]
  }, {
    "name" : "systemRoot",
    "type" : "Preferences",
    "comment" : "\n     * The system root.\n     ",
    "links" : [ ]
  }, {
    "name" : "USER_READ_WRITE",
    "type" : "int",
    "comment" : "\n     * Unix user write/read permission\n     ",
    "links" : [ ]
  }, {
    "name" : "USER_RW_ALL_READ",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "USER_RWX_ALL_RX",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "USER_RWX",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "userLockFile",
    "type" : "File",
    "comment" : "\n     * The lock file for the user tree.\n     ",
    "links" : [ ]
  }, {
    "name" : "systemLockFile",
    "type" : "File",
    "comment" : "\n     * The lock file for the system tree.\n     ",
    "links" : [ ]
  }, {
    "name" : "userRootLockHandle",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "systemRootLockHandle",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "dir",
    "type" : "File",
    "comment" : "\n     * The directory representing this preference node.  There is no guarantee\n     * that this directory exits, as another VM can delete it at any time\n     * that it (the other VM) holds the file-lock.  While the root node cannot\n     * be deleted, it may not yet have been created, or the underlying\n     * directory could have been deleted accidentally.\n     ",
    "links" : [ ]
  }, {
    "name" : "prefsFile",
    "type" : "File",
    "comment" : "\n     * The file representing this preference node's preferences.\n     * The file format is undocumented, and subject to change\n     * from release to release, but I'm sure that you can figure\n     * it out if you try real hard.\n     ",
    "links" : [ ]
  }, {
    "name" : "tmpFile",
    "type" : "File",
    "comment" : "\n     * A temporary file used for saving changes to preferences.  As part of\n     * the sync operation, changes are first saved into this file, and then\n     * atomically renamed to prefsFile.  This results in an atomic state\n     * change from one valid set of preferences to another.  The\n     * the file-lock is held for the duration of this transformation.\n     ",
    "links" : [ ]
  }, {
    "name" : "userRootModFile",
    "type" : "File",
    "comment" : "\n     * File, which keeps track of global modifications of userRoot.\n     ",
    "links" : [ ]
  }, {
    "name" : "isUserRootModified",
    "type" : "boolean",
    "comment" : "\n     * Flag, which indicated whether userRoot was modified by another VM\n     ",
    "links" : [ ]
  }, {
    "name" : "userRootModTime",
    "type" : "long",
    "comment" : "\n     * Keeps track of userRoot modification time. This time is reset to\n     * zero after UNIX reboot, and is increased by 1 second each time\n     * userRoot is modified.\n     ",
    "links" : [ ]
  }, {
    "name" : "systemRootModFile",
    "type" : "File",
    "comment" : "\n     * File, which keeps track of global modifications of systemRoot\n     ",
    "links" : [ ]
  }, {
    "name" : "isSystemRootModified",
    "type" : "boolean",
    "comment" : "\n     * Flag, which indicates whether systemRoot was modified by another VM\n     ",
    "links" : [ ]
  }, {
    "name" : "systemRootModTime",
    "type" : "long",
    "comment" : "\n     * Keeps track of systemRoot modification time. This time is reset to\n     * zero after system reboot, and is increased by 1 second each time\n     * systemRoot is modified.\n     ",
    "links" : [ ]
  }, {
    "name" : "prefsCache",
    "type" : "Map<String, String>",
    "comment" : "\n     * Locally cached preferences for this node (includes uncommitted\n     * changes).  This map is initialized with from disk when the first get or\n     * put operation occurs on this node.  It is synchronized with the\n     * corresponding disk file (prefsFile) by the sync operation.  The initial\n     * value is read *without* acquiring the file-lock.\n     ",
    "links" : [ ]
  }, {
    "name" : "lastSyncTime",
    "type" : "long",
    "comment" : "\n     * The last modification time of the file backing this node at the time\n     * that prefCache was last synchronized (or initially read).  This\n     * value is set *before* reading the file, so it's conservative; the\n     * actual timestamp could be (slightly) higher.  A value of zero indicates\n     * that we were unable to initialize prefsCache from the disk, or\n     * have not yet attempted to do so.  (If prefsCache is non-null, it\n     * indicates the former; if it's null, the latter.)\n     ",
    "links" : [ ]
  }, {
    "name" : "EAGAIN",
    "type" : "int",
    "comment" : "\n    * Unix error code for locked file.\n    ",
    "links" : [ ]
  }, {
    "name" : "EACCES",
    "type" : "int",
    "comment" : "\n    * Unix error code for denied access.\n    ",
    "links" : [ ]
  }, {
    "name" : "LOCK_HANDLE",
    "type" : "int",
    "comment" : " Used to interpret results of native functions ",
    "links" : [ ]
  }, {
    "name" : "ERROR_CODE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "changeLog",
    "type" : "List<Change>",
    "comment" : "\n     * A list of all uncommitted preference changes.  The elements in this\n     * list are of type PrefChange.  If this node is concurrently modified on\n     * disk by another VM, the two sets of changes are merged when this node\n     * is sync'ed by overwriting our prefsCache with the preference map last\n     * written out to disk (by the other VM), and then replaying this change\n     * log against that map.  The resulting map is then written back\n     * to the disk.\n     ",
    "links" : [ ]
  }, {
    "name" : "nodeCreate",
    "type" : "NodeCreate",
    "comment" : "\n     * NodeCreate object for this node.\n     ",
    "links" : [ ]
  }, {
    "name" : "isUserNode",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EMPTY_STRING_ARRAY",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INIT_SLEEP_TIME",
    "type" : "int",
    "comment" : "\n     * Initial time between lock attempts, in ms.  The time is doubled\n     * after each failing attempt (except the first).\n     ",
    "links" : [ ]
  }, {
    "name" : "MAX_ATTEMPTS",
    "type" : "int",
    "comment" : "\n     * Maximum number of lock attempts.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static PlatformLogger getLogger()",
    "returnType" : "PlatformLogger",
    "comment" : "\n     * Returns logger for error messages. Backing store exceptions are logged at\n     * WARNING level.\n     ",
    "links" : [ ]
  }, {
    "name" : " static synchronized Preferences getUserRoot()",
    "returnType" : "Preferences",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void setupUserRoot()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static synchronized Preferences getSystemRoot()",
    "returnType" : "Preferences",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void setupSystemRoot()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void replayChanges()",
    "returnType" : "void",
    "comment" : "\n     * Replay changeLog against prefsCache.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void syncWorld()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isUserNode()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void putSpi(String key, String value)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected String getSpi(String key)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void removeSpi(String key)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void initCacheIfNecessary()",
    "returnType" : "void",
    "comment" : "\n     * Initialize prefsCache if it has yet to be initialized.  When this method\n     * returns, prefsCache will be non-null.  If the data was successfully\n     * read from the file, lastSyncTime will be updated.  If prefsCache was\n     * null, but it was impossible to read the file (because it didn't\n     * exist or for any other reason) prefsCache will be initialized to an\n     * empty, modifiable Map, and lastSyncTime remain zero.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void loadCache() throws BackingStoreException",
    "returnType" : "void",
    "comment" : "\n     * Attempt to load prefsCache from the backing store.  If the attempt\n     * succeeds, lastSyncTime will be updated (the new value will typically\n     * correspond to the data loaded into the map, but it may be less,\n     * if another VM is updating this node concurrently).  If the attempt\n     * fails, a BackingStoreException is thrown and both prefsCache and\n     * lastSyncTime are unaffected by the call.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void writeBackCache() throws BackingStoreException",
    "returnType" : "void",
    "comment" : "\n     * Attempt to write back prefsCache to the backing store.  If the attempt\n     * succeeds, lastSyncTime will be updated (the new value will correspond\n     * exactly to the data thust written back, as we hold the file lock, which\n     * prevents a concurrent write.  If the attempt fails, a\n     * BackingStoreException is thrown and both the backing store (prefsFile)\n     * and lastSyncTime will be unaffected by this call.  This call will\n     * NEVER leave prefsFile in a corrupt state.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected String[] keysSpi()",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected String[] childrenNamesSpi()",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected AbstractPreferences childSpi(String name)",
    "returnType" : "AbstractPreferences",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeNode() throws BackingStoreException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void removeNodeSpi() throws BackingStoreException",
    "returnType" : "void",
    "comment" : "\n     * Called with file lock held (in addition to node locks).\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void sync() throws BackingStoreException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void syncSpi() throws BackingStoreException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void syncSpiPrivileged() throws BackingStoreException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void flush() throws BackingStoreException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void flushSpi() throws BackingStoreException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isDirChar(char ch)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the specified character is appropriate for use in\n     * Unix directory names.  A character is appropriate if it's a printable\n     * ASCII character (> 0x1f && < 0x7f) and unequal to slash ('/', 0x2f),\n     * dot ('.', 0x2e), or underscore ('_', 0x5f).\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String dirName(String nodeName)",
    "returnType" : "String",
    "comment" : "\n     * Returns the directory name corresponding to the specified node name.\n     * Generally, this is just the node name.  If the node name includes\n     * inappropriate characters (as per isDirChar) it is translated to Base64.\n     * with the underscore  character ('_', 0x5f) prepended.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static byte[] byteArray(String s)",
    "returnType" : "byte[]",
    "comment" : "\n     * Translate a string into a byte array by translating each character\n     * into two bytes, high-byte first (\"big-endian\").\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String nodeName(String dirName)",
    "returnType" : "String",
    "comment" : "\n     * Returns the node name corresponding to the specified directory name.\n * (Inverts the transformation of dirName(String).\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean lockFile(boolean shared) throws SecurityException",
    "returnType" : "boolean",
    "comment" : "\n     * Try to acquire the appropriate file lock (user or system).  If\n     * the initial attempt fails, several more attempts are made using\n     * an exponential backoff strategy.  If all attempts fail, this method\n     * returns false.\n     * @throws SecurityException if file access denied.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void checkLockFile0ErrorCode(int errorCode) throws SecurityException",
    "returnType" : "void",
    "comment" : "\n     * Checks if unlockFile0() returned an error. Throws a SecurityException,\n     * if access denied. Logs a warning otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static native int[] lockFile0(String fileName, int permission, boolean shared)",
    "returnType" : "int[]",
    "comment" : "\n     * Locks file using UNIX file locking.\n     * @param fileName Absolute file name of the lock file.\n     * @return Returns a lock handle, used to unlock the file.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static native int unlockFile0(int lockHandle)",
    "returnType" : "int",
    "comment" : "\n     * Unlocks file previously locked by lockFile0().\n     * @param lockHandle Handle to the file lock.\n     * @return Returns zero if OK, UNIX error code if failure.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static native int chmod(String fileName, int permission)",
    "returnType" : "int",
    "comment" : "\n     * Changes UNIX file permissions.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void unlockFile()",
    "returnType" : "void",
    "comment" : "\n     * Release the the appropriate file lock (user or system).\n     * @throws SecurityException if file access denied.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static PlatformLogger getLogger()", " static synchronized Preferences getUserRoot()", "private static void setupUserRoot()", " static synchronized Preferences getSystemRoot()", "private static void setupSystemRoot()", "private void replayChanges()", "private static void syncWorld()", "public boolean isUserNode()", "protected void putSpi(String key, String value)", "protected String getSpi(String key)", "protected void removeSpi(String key)", "private void initCacheIfNecessary()", "private void loadCache() throws BackingStoreException", "private void writeBackCache() throws BackingStoreException", "protected String[] keysSpi()", "protected String[] childrenNamesSpi()", "protected AbstractPreferences childSpi(String name)", "public void removeNode() throws BackingStoreException", "protected void removeNodeSpi() throws BackingStoreException", "public synchronized void sync() throws BackingStoreException", "protected void syncSpi() throws BackingStoreException", "private void syncSpiPrivileged() throws BackingStoreException", "public void flush() throws BackingStoreException", "protected void flushSpi() throws BackingStoreException", "private static boolean isDirChar(char ch)", "private static String dirName(String nodeName)", "private static byte[] byteArray(String s)", "private static String nodeName(String dirName)", "private boolean lockFile(boolean shared) throws SecurityException", "private void checkLockFile0ErrorCode(int errorCode) throws SecurityException", "private static native int[] lockFile0(String fileName, int permission, boolean shared)", "private static native int unlockFile0(int lockHandle)", "private static native int chmod(String fileName, int permission)", "private void unlockFile()" ],
  "variableNames" : [ "systemRootDir", "isSystemRootWritable", "userRootDir", "isUserRootWritable", "userRoot", "systemRoot", "USER_READ_WRITE", "USER_RW_ALL_READ", "USER_RWX_ALL_RX", "USER_RWX", "userLockFile", "systemLockFile", "userRootLockHandle", "systemRootLockHandle", "dir", "prefsFile", "tmpFile", "userRootModFile", "isUserRootModified", "userRootModTime", "systemRootModFile", "isSystemRootModified", "systemRootModTime", "prefsCache", "lastSyncTime", "EAGAIN", "EACCES", "LOCK_HANDLE", "ERROR_CODE", "changeLog", "nodeCreate", "isUserNode", "EMPTY_STRING_ARRAY", "INIT_SLEEP_TIME", "MAX_ATTEMPTS" ]
}