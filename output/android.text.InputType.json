{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/text/InputType.java",
  "packageName" : "android.text",
  "className" : "InputType",
  "comment" : "\n * Bit definitions for an integer defining the basic content type of text\n * held in an {@link Editable} object. Supported classes may be combined\n * with variations and flags to indicate desired behaviors.\n *\n * <h3>Examples</h3>\n *\n * <dl>\n * <dt>A password field with the password visible to the user:\n * <dd>inputType = TYPE_CLASS_TEXT |\n *     TYPE_TEXT_VARIATION_VISIBLE_PASSWORD\n *\n * <dt>A multi-line postal address with automatic capitalization:\n * <dd>inputType = TYPE_CLASS_TEXT |\n *     TYPE_TEXT_VARIATION_POSTAL_ADDRESS |\n *     TYPE_TEXT_FLAG_MULTI_LINE\n *\n * <dt>A time field:\n * <dd>inputType = TYPE_CLASS_DATETIME |\n *     TYPE_DATETIME_VARIATION_TIME\n * </dl>\n ",
  "links" : [ "android.text.Editable" ],
  "variables" : [ {
    "name" : "TYPE_MASK_CLASS",
    "type" : "int",
    "comment" : "\n     * Mask of bits that determine the overall class\n     * of text being given.  Currently supported classes are:\n     * {@link #TYPE_CLASS_TEXT}, {@link #TYPE_CLASS_NUMBER},\n     * {@link #TYPE_CLASS_PHONE}, {@link #TYPE_CLASS_DATETIME}.\n     * <p>IME authors: If the class is not one you\n     * understand, assume {@link #TYPE_CLASS_TEXT} with NO variation\n     * or flags.<p>\n     ",
    "links" : [ "#TYPE_CLASS_NUMBER", "#TYPE_CLASS_TEXT", "#TYPE_CLASS_PHONE", "#TYPE_CLASS_DATETIME" ]
  }, {
    "name" : "TYPE_MASK_VARIATION",
    "type" : "int",
    "comment" : "\n     * Mask of bits that determine the variation of\n     * the base content class.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_MASK_FLAGS",
    "type" : "int",
    "comment" : "\n     * Mask of bits that provide addition bit flags\n     * of options.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_NULL",
    "type" : "int",
    "comment" : "\n     * Special content type for when no explicit type has been specified.\n     * This should be interpreted to mean that the target input connection\n     * is not rich, it can not process and show things like candidate text nor\n     * retrieve the current text, so the input method will need to run in a\n     * limited \"generate key events\" mode, if it supports it. Note that some\n     * input methods may not support it, for example a voice-based input\n     * method will likely not be able to generate key events even if this\n     * flag is set.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_CLASS_TEXT",
    "type" : "int",
    "comment" : "\n     * Class for normal text.  This class supports the following flags (only\n     * one of which should be set):\n     * {@link #TYPE_TEXT_FLAG_CAP_CHARACTERS},\n     * {@link #TYPE_TEXT_FLAG_CAP_WORDS}, and.\n     * {@link #TYPE_TEXT_FLAG_CAP_SENTENCES}.  It also supports the\n     * following variations:\n     * {@link #TYPE_TEXT_VARIATION_NORMAL}, and\n     * {@link #TYPE_TEXT_VARIATION_URI}.  If you do not recognize the\n     * variation, normal should be assumed.\n     ",
    "links" : [ "#TYPE_TEXT_FLAG_CAP_CHARACTERS", "#TYPE_TEXT_FLAG_CAP_WORDS", "#TYPE_TEXT_VARIATION_NORMAL", "#TYPE_TEXT_VARIATION_URI", "#TYPE_TEXT_FLAG_CAP_SENTENCES" ]
  }, {
    "name" : "TYPE_TEXT_FLAG_CAP_CHARACTERS",
    "type" : "int",
    "comment" : "\n     * Flag for {@link #TYPE_CLASS_TEXT}: capitalize all characters.  Overrides\n     * {@link #TYPE_TEXT_FLAG_CAP_WORDS} and\n     * {@link #TYPE_TEXT_FLAG_CAP_SENTENCES}.  This value is explicitly defined\n     * to be the same as {@link TextUtils#CAP_MODE_CHARACTERS}. Of course,\n     * this only affects languages where there are upper-case and lower-case letters.\n     ",
    "links" : [ "#TYPE_TEXT_FLAG_CAP_WORDS", "#TYPE_CLASS_TEXT", "android.text.TextUtils#CAP_MODE_CHARACTERS", "#TYPE_TEXT_FLAG_CAP_SENTENCES" ]
  }, {
    "name" : "TYPE_TEXT_FLAG_CAP_WORDS",
    "type" : "int",
    "comment" : "\n     * Flag for {@link #TYPE_CLASS_TEXT}: capitalize the first character of\n     * every word.  Overrides {@link #TYPE_TEXT_FLAG_CAP_SENTENCES}.  This\n     * value is explicitly defined\n     * to be the same as {@link TextUtils#CAP_MODE_WORDS}. Of course,\n     * this only affects languages where there are upper-case and lower-case letters.\n     ",
    "links" : [ "android.text.TextUtils#CAP_MODE_WORDS", "#TYPE_CLASS_TEXT", "#TYPE_TEXT_FLAG_CAP_SENTENCES" ]
  }, {
    "name" : "TYPE_TEXT_FLAG_CAP_SENTENCES",
    "type" : "int",
    "comment" : "\n     * Flag for {@link #TYPE_CLASS_TEXT}: capitalize the first character of\n     * each sentence.  This value is explicitly defined\n     * to be the same as {@link TextUtils#CAP_MODE_SENTENCES}. For example\n     * in English it means to capitalize after a period and a space (note that other\n     * languages may have different characters for period, or not use spaces,\n     * or use different grammatical rules). Of course,\n     * this only affects languages where there are upper-case and lower-case letters.\n     ",
    "links" : [ "android.text.TextUtils#CAP_MODE_SENTENCES", "#TYPE_CLASS_TEXT" ]
  }, {
    "name" : "TYPE_TEXT_FLAG_AUTO_CORRECT",
    "type" : "int",
    "comment" : "\n     * Flag for {@link #TYPE_CLASS_TEXT}: the user is entering free-form\n     * text that should have auto-correction applied to it. Without this flag,\n     * the IME will not try to correct typos. You should always set this flag\n     * unless you really expect users to type non-words in this field, for\n     * example to choose a name for a character in a game.\n     * Contrast this with {@link #TYPE_TEXT_FLAG_AUTO_COMPLETE} and\n     * {@link #TYPE_TEXT_FLAG_NO_SUGGESTIONS}:\n     * {@code TYPE_TEXT_FLAG_AUTO_CORRECT} means that the IME will try to\n     * auto-correct typos as the user is typing, but does not define whether\n     * the IME offers an interface to show suggestions.\n     ",
    "links" : [ "#TYPE_TEXT_FLAG_AUTO_COMPLETE", "#TYPE_CLASS_TEXT", "#TYPE_TEXT_FLAG_NO_SUGGESTIONS" ]
  }, {
    "name" : "TYPE_TEXT_FLAG_AUTO_COMPLETE",
    "type" : "int",
    "comment" : "\n     * Flag for {@link #TYPE_CLASS_TEXT}: the text editor (which means\n     * the application) is performing auto-completion of the text being entered\n     * based on its own semantics, which it will present to the user as they type.\n     * This generally means that the input method should not be showing\n     * candidates itself, but can expect the editor to supply its own\n     * completions/candidates from\n     * {@link android.view.inputmethod.InputMethodSession#displayCompletions\n     * InputMethodSession.displayCompletions()} as a result of the editor calling\n     * {@link android.view.inputmethod.InputMethodManager#displayCompletions\n     * InputMethodManager.displayCompletions()}.\n     * Note the contrast with {@link #TYPE_TEXT_FLAG_AUTO_CORRECT} and\n     * {@link #TYPE_TEXT_FLAG_NO_SUGGESTIONS}:\n     * {@code TYPE_TEXT_FLAG_AUTO_COMPLETE} means the editor should show an\n     * interface for displaying suggestions, but instead of supplying its own\n     * it will rely on the Editor to pass completions/corrections.\n     ",
    "links" : [ "android.view.inputmethod.InputMethodManager#displayCompletionsInputMethodManager.displayCompletions()", "#TYPE_CLASS_TEXT", "android.view.inputmethod.InputMethodSession#displayCompletionsInputMethodSession.displayCompletions()", "#TYPE_TEXT_FLAG_AUTO_CORRECT", "#TYPE_TEXT_FLAG_NO_SUGGESTIONS" ]
  }, {
    "name" : "TYPE_TEXT_FLAG_MULTI_LINE",
    "type" : "int",
    "comment" : "\n     * Flag for {@link #TYPE_CLASS_TEXT}: multiple lines of text can be\n     * entered into the field.  If this flag is not set, the text field\n     * will be constrained to a single line. The IME may also choose not to\n     * display an enter key when this flag is not set, as there should be no\n     * need to create new lines.\n     ",
    "links" : [ "#TYPE_CLASS_TEXT" ]
  }, {
    "name" : "TYPE_TEXT_FLAG_IME_MULTI_LINE",
    "type" : "int",
    "comment" : "\n     * Flag for {@link #TYPE_CLASS_TEXT}: the regular text view associated\n     * with this should not be multi-line, but when a fullscreen input method\n     * is providing text it should use multiple lines if it can.\n     ",
    "links" : [ "#TYPE_CLASS_TEXT" ]
  }, {
    "name" : "TYPE_TEXT_FLAG_NO_SUGGESTIONS",
    "type" : "int",
    "comment" : "\n     * Flag for {@link #TYPE_CLASS_TEXT}: the input method does not need to\n     * display any dictionary-based candidates. This is useful for text views that\n     * do not contain words from the language and do not benefit from any\n     * dictionary-based completions or corrections. It overrides the\n     * {@link #TYPE_TEXT_FLAG_AUTO_CORRECT} value when set.\n     * Please avoid using this unless you are certain this is what you want.\n     * Many input methods need suggestions to work well, for example the ones\n     * based on gesture typing. Consider clearing\n     * {@link #TYPE_TEXT_FLAG_AUTO_CORRECT} instead if you just do not\n     * want the IME to correct typos.\n     * Note the contrast with {@link #TYPE_TEXT_FLAG_AUTO_CORRECT} and\n     * {@link #TYPE_TEXT_FLAG_AUTO_COMPLETE}:\n     * {@code TYPE_TEXT_FLAG_NO_SUGGESTIONS} means the IME does not need to\n     * show an interface to display suggestions. Most IMEs will also take this to\n     * mean they do not need to try to auto-correct what the user is typing.\n     ",
    "links" : [ "#TYPE_TEXT_FLAG_AUTO_COMPLETE", "#TYPE_CLASS_TEXT", "#TYPE_TEXT_FLAG_AUTO_CORRECT" ]
  }, {
    "name" : "TYPE_TEXT_FLAG_ENABLE_TEXT_CONVERSION_SUGGESTIONS",
    "type" : "int",
    "comment" : "\n     * Flag for {@link #TYPE_CLASS_TEXT}: Let the IME know the text conversion suggestions are\n     * required by the application. Text conversion suggestion is for the transliteration languages\n     * which has pronunciation characters and target characters. When the user is typing the\n     * pronunciation charactes, the IME could provide the possible target characters to the user.\n     * When this flag is set, the IME should insert the text conversion suggestions through\n     * {@link Builder#setTextConversionSuggestions(List)} and\n     * the {@link TextAttribute} with initialized with the text conversion suggestions is provided\n     * by the IME to the application. To receive the additional information, the application needs\n     * to implement {@link InputConnection#setComposingText(CharSequence, int, TextAttribute)},\n     * {@link InputConnection#setComposingRegion(int, int, TextAttribute)}, and\n     * {@link InputConnection#commitText(CharSequence, int, TextAttribute)}.\n     ",
    "links" : [ "android.view.inputmethod.TextAttribute.Builder#setTextConversionSuggestions(List)", "android.view.inputmethod.TextAttribute", "android.view.inputmethod.InputConnection#commitText(CharSequence", "#TYPE_CLASS_TEXT", "android.view.inputmethod.InputConnection#setComposingRegion(int", "android.view.inputmethod.InputConnection#setComposingText(CharSequence" ]
  }, {
    "name" : "TYPE_TEXT_VARIATION_NORMAL",
    "type" : "int",
    "comment" : "\n     * Default variation of {@link #TYPE_CLASS_TEXT}: plain old normal text.\n     ",
    "links" : [ "#TYPE_CLASS_TEXT" ]
  }, {
    "name" : "TYPE_TEXT_VARIATION_URI",
    "type" : "int",
    "comment" : "\n     * Variation of {@link #TYPE_CLASS_TEXT}: entering a URI.\n     ",
    "links" : [ "#TYPE_CLASS_TEXT" ]
  }, {
    "name" : "TYPE_TEXT_VARIATION_EMAIL_ADDRESS",
    "type" : "int",
    "comment" : "\n     * Variation of {@link #TYPE_CLASS_TEXT}: entering an e-mail address.\n     ",
    "links" : [ "#TYPE_CLASS_TEXT" ]
  }, {
    "name" : "TYPE_TEXT_VARIATION_EMAIL_SUBJECT",
    "type" : "int",
    "comment" : "\n     * Variation of {@link #TYPE_CLASS_TEXT}: entering the subject line of\n     * an e-mail.\n     ",
    "links" : [ "#TYPE_CLASS_TEXT" ]
  }, {
    "name" : "TYPE_TEXT_VARIATION_SHORT_MESSAGE",
    "type" : "int",
    "comment" : "\n     * Variation of {@link #TYPE_CLASS_TEXT}: entering a short, possibly informal\n     * message such as an instant message or a text message.\n     ",
    "links" : [ "#TYPE_CLASS_TEXT" ]
  }, {
    "name" : "TYPE_TEXT_VARIATION_LONG_MESSAGE",
    "type" : "int",
    "comment" : "\n     * Variation of {@link #TYPE_CLASS_TEXT}: entering the content of a long, possibly\n     * formal message such as the body of an e-mail.\n     ",
    "links" : [ "#TYPE_CLASS_TEXT" ]
  }, {
    "name" : "TYPE_TEXT_VARIATION_PERSON_NAME",
    "type" : "int",
    "comment" : "\n     * Variation of {@link #TYPE_CLASS_TEXT}: entering the name of a person.\n     ",
    "links" : [ "#TYPE_CLASS_TEXT" ]
  }, {
    "name" : "TYPE_TEXT_VARIATION_POSTAL_ADDRESS",
    "type" : "int",
    "comment" : "\n     * Variation of {@link #TYPE_CLASS_TEXT}: entering a postal mailing address.\n     ",
    "links" : [ "#TYPE_CLASS_TEXT" ]
  }, {
    "name" : "TYPE_TEXT_VARIATION_PASSWORD",
    "type" : "int",
    "comment" : "\n     * Variation of {@link #TYPE_CLASS_TEXT}: entering a password.\n     ",
    "links" : [ "#TYPE_CLASS_TEXT" ]
  }, {
    "name" : "TYPE_TEXT_VARIATION_VISIBLE_PASSWORD",
    "type" : "int",
    "comment" : "\n     * Variation of {@link #TYPE_CLASS_TEXT}: entering a password, which should\n     * be visible to the user.\n     ",
    "links" : [ "#TYPE_CLASS_TEXT" ]
  }, {
    "name" : "TYPE_TEXT_VARIATION_WEB_EDIT_TEXT",
    "type" : "int",
    "comment" : "\n     * Variation of {@link #TYPE_CLASS_TEXT}: entering text inside of a web form.\n     ",
    "links" : [ "#TYPE_CLASS_TEXT" ]
  }, {
    "name" : "TYPE_TEXT_VARIATION_FILTER",
    "type" : "int",
    "comment" : "\n     * Variation of {@link #TYPE_CLASS_TEXT}: entering text to filter contents\n     * of a list etc.\n     ",
    "links" : [ "#TYPE_CLASS_TEXT" ]
  }, {
    "name" : "TYPE_TEXT_VARIATION_PHONETIC",
    "type" : "int",
    "comment" : "\n     * Variation of {@link #TYPE_CLASS_TEXT}: entering text for phonetic\n     * pronunciation, such as a phonetic name field in contacts. This is mostly\n     * useful for languages where one spelling may have several phonetic\n     * readings, like Japanese.\n     ",
    "links" : [ "#TYPE_CLASS_TEXT" ]
  }, {
    "name" : "TYPE_TEXT_VARIATION_WEB_EMAIL_ADDRESS",
    "type" : "int",
    "comment" : "\n     * Variation of {@link #TYPE_CLASS_TEXT}: entering e-mail address inside\n     * of a web form.  This was added in\n     * {@link android.os.Build.VERSION_CODES#HONEYCOMB}.  An IME must target\n     * this API version or later to see this input type; if it doesn't, a request\n     * for this type will be seen as {@link #TYPE_TEXT_VARIATION_EMAIL_ADDRESS}\n     * when passed through {@link android.view.inputmethod.EditorInfo#makeCompatible(int)\n     * EditorInfo.makeCompatible(int)}.\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#HONEYCOMB", "#TYPE_TEXT_VARIATION_EMAIL_ADDRESS", "#TYPE_CLASS_TEXT", "android.view.inputmethod.EditorInfo#makeCompatible(int)" ]
  }, {
    "name" : "TYPE_TEXT_VARIATION_WEB_PASSWORD",
    "type" : "int",
    "comment" : "\n     * Variation of {@link #TYPE_CLASS_TEXT}: entering password inside\n     * of a web form.  This was added in\n     * {@link android.os.Build.VERSION_CODES#HONEYCOMB}.  An IME must target\n     * this API version or later to see this input type; if it doesn't, a request\n     * for this type will be seen as {@link #TYPE_TEXT_VARIATION_PASSWORD}\n     * when passed through {@link android.view.inputmethod.EditorInfo#makeCompatible(int)\n     * EditorInfo.makeCompatible(int)}.\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#HONEYCOMB", "#TYPE_CLASS_TEXT", "#TYPE_TEXT_VARIATION_PASSWORD", "android.view.inputmethod.EditorInfo#makeCompatible(int)" ]
  }, {
    "name" : "TYPE_CLASS_NUMBER",
    "type" : "int",
    "comment" : "\n     * Class for numeric text.  This class supports the following flags:\n     * {@link #TYPE_NUMBER_FLAG_SIGNED} and\n     * {@link #TYPE_NUMBER_FLAG_DECIMAL}.  It also supports the following\n     * variations: {@link #TYPE_NUMBER_VARIATION_NORMAL} and\n     * {@link #TYPE_NUMBER_VARIATION_PASSWORD}.\n     * <p>IME authors: If you do not recognize\n     * the variation, normal should be assumed.</p>\n     ",
    "links" : [ "#TYPE_NUMBER_FLAG_SIGNED", "#TYPE_NUMBER_VARIATION_PASSWORD", "#TYPE_NUMBER_FLAG_DECIMAL", "#TYPE_NUMBER_VARIATION_NORMAL" ]
  }, {
    "name" : "TYPE_NUMBER_FLAG_SIGNED",
    "type" : "int",
    "comment" : "\n     * Flag of {@link #TYPE_CLASS_NUMBER}: the number is signed, allowing\n     * a positive or negative sign at the start.\n     ",
    "links" : [ "#TYPE_CLASS_NUMBER" ]
  }, {
    "name" : "TYPE_NUMBER_FLAG_DECIMAL",
    "type" : "int",
    "comment" : "\n     * Flag of {@link #TYPE_CLASS_NUMBER}: the number is decimal, allowing\n     * a decimal point to provide fractional values.\n     ",
    "links" : [ "#TYPE_CLASS_NUMBER" ]
  }, {
    "name" : "TYPE_NUMBER_VARIATION_NORMAL",
    "type" : "int",
    "comment" : "\n     * Default variation of {@link #TYPE_CLASS_NUMBER}: plain normal\n     * numeric text.  This was added in\n     * {@link android.os.Build.VERSION_CODES#HONEYCOMB}.  An IME must target\n     * this API version or later to see this input type; if it doesn't, a request\n     * for this type will be dropped when passed through\n     * {@link android.view.inputmethod.EditorInfo#makeCompatible(int)\n     * EditorInfo.makeCompatible(int)}.\n     ",
    "links" : [ "#TYPE_CLASS_NUMBER", "android.os.Build.VERSION_CODES#HONEYCOMB", "android.view.inputmethod.EditorInfo#makeCompatible(int)" ]
  }, {
    "name" : "TYPE_NUMBER_VARIATION_PASSWORD",
    "type" : "int",
    "comment" : "\n     * Variation of {@link #TYPE_CLASS_NUMBER}: entering a numeric password.\n     * This was added in {@link android.os.Build.VERSION_CODES#HONEYCOMB}.  An\n     * IME must target this API version or later to see this input type; if it\n     * doesn't, a request for this type will be dropped when passed\n     * through {@link android.view.inputmethod.EditorInfo#makeCompatible(int)\n     * EditorInfo.makeCompatible(int)}.\n     ",
    "links" : [ "#TYPE_CLASS_NUMBER", "android.os.Build.VERSION_CODES#HONEYCOMB", "android.view.inputmethod.EditorInfo#makeCompatible(int)" ]
  }, {
    "name" : "TYPE_CLASS_PHONE",
    "type" : "int",
    "comment" : "\n     * Class for a phone number.  This class currently supports no variations\n     * or flags.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_CLASS_DATETIME",
    "type" : "int",
    "comment" : "\n     * Class for dates and times.  It supports the\n     * following variations:\n     * {@link #TYPE_DATETIME_VARIATION_NORMAL}\n     * {@link #TYPE_DATETIME_VARIATION_DATE}, and\n     * {@link #TYPE_DATETIME_VARIATION_TIME}.\n     ",
    "links" : [ "#TYPE_DATETIME_VARIATION_DATE", "#TYPE_DATETIME_VARIATION_TIME", "#TYPE_DATETIME_VARIATION_NORMAL" ]
  }, {
    "name" : "TYPE_DATETIME_VARIATION_NORMAL",
    "type" : "int",
    "comment" : "\n     * Default variation of {@link #TYPE_CLASS_DATETIME}: allows entering\n     * both a date and time.\n     ",
    "links" : [ "#TYPE_CLASS_DATETIME" ]
  }, {
    "name" : "TYPE_DATETIME_VARIATION_DATE",
    "type" : "int",
    "comment" : "\n     * Default variation of {@link #TYPE_CLASS_DATETIME}: allows entering\n     * only a date.\n     ",
    "links" : [ "#TYPE_CLASS_DATETIME" ]
  }, {
    "name" : "TYPE_DATETIME_VARIATION_TIME",
    "type" : "int",
    "comment" : "\n     * Default variation of {@link #TYPE_CLASS_DATETIME}: allows entering\n     * only a time.\n     ",
    "links" : [ "#TYPE_CLASS_DATETIME" ]
  } ],
  "methods" : [ ],
  "methodNames" : [ ],
  "variableNames" : [ "TYPE_MASK_CLASS", "TYPE_MASK_VARIATION", "TYPE_MASK_FLAGS", "TYPE_NULL", "TYPE_CLASS_TEXT", "TYPE_TEXT_FLAG_CAP_CHARACTERS", "TYPE_TEXT_FLAG_CAP_WORDS", "TYPE_TEXT_FLAG_CAP_SENTENCES", "TYPE_TEXT_FLAG_AUTO_CORRECT", "TYPE_TEXT_FLAG_AUTO_COMPLETE", "TYPE_TEXT_FLAG_MULTI_LINE", "TYPE_TEXT_FLAG_IME_MULTI_LINE", "TYPE_TEXT_FLAG_NO_SUGGESTIONS", "TYPE_TEXT_FLAG_ENABLE_TEXT_CONVERSION_SUGGESTIONS", "TYPE_TEXT_VARIATION_NORMAL", "TYPE_TEXT_VARIATION_URI", "TYPE_TEXT_VARIATION_EMAIL_ADDRESS", "TYPE_TEXT_VARIATION_EMAIL_SUBJECT", "TYPE_TEXT_VARIATION_SHORT_MESSAGE", "TYPE_TEXT_VARIATION_LONG_MESSAGE", "TYPE_TEXT_VARIATION_PERSON_NAME", "TYPE_TEXT_VARIATION_POSTAL_ADDRESS", "TYPE_TEXT_VARIATION_PASSWORD", "TYPE_TEXT_VARIATION_VISIBLE_PASSWORD", "TYPE_TEXT_VARIATION_WEB_EDIT_TEXT", "TYPE_TEXT_VARIATION_FILTER", "TYPE_TEXT_VARIATION_PHONETIC", "TYPE_TEXT_VARIATION_WEB_EMAIL_ADDRESS", "TYPE_TEXT_VARIATION_WEB_PASSWORD", "TYPE_CLASS_NUMBER", "TYPE_NUMBER_FLAG_SIGNED", "TYPE_NUMBER_FLAG_DECIMAL", "TYPE_NUMBER_VARIATION_NORMAL", "TYPE_NUMBER_VARIATION_PASSWORD", "TYPE_CLASS_PHONE", "TYPE_CLASS_DATETIME", "TYPE_DATETIME_VARIATION_NORMAL", "TYPE_DATETIME_VARIATION_DATE", "TYPE_DATETIME_VARIATION_TIME" ]
}