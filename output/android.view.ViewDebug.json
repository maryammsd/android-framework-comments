{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/view/ViewDebug.java",
  "packageName" : "android.view",
  "className" : "ViewDebug",
  "comment" : "\n * Various debugging/tracing tools related to {@link View} and the view hierarchy.\n ",
  "variables" : [ {
    "name" : "TRACE_HIERARCHY",
    "type" : "boolean",
    "comment" : "\n     * @deprecated This flag is now unused\n     ",
    "links" : [ ]
  }, {
    "name" : "TRACE_RECYCLER",
    "type" : "boolean",
    "comment" : "\n     * @deprecated This flag is now unused\n     ",
    "links" : [ ]
  }, {
    "name" : "DEBUG_DRAG",
    "type" : "boolean",
    "comment" : "\n     * Enables detailed logging of drag/drop operations.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "DEBUG_POSITIONING",
    "type" : "boolean",
    "comment" : "\n     * Enables detailed logging of task positioning operations.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CAPTURE_TIMEOUT",
    "type" : "int",
    "comment" : " Maximum delay in ms after which we stop trying to capture a View's drawing",
    "links" : [ ]
  }, {
    "name" : "REMOTE_COMMAND_CAPTURE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "REMOTE_COMMAND_DUMP",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "REMOTE_COMMAND_DUMP_THEME",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "REMOTE_COMMAND_DUMP_ENCODED",
    "type" : "String",
    "comment" : "\n     * Similar to REMOTE_COMMAND_DUMP but uses ViewHierarchyEncoder instead of flat text\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "REMOTE_COMMAND_INVALIDATE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "REMOTE_COMMAND_REQUEST_LAYOUT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "REMOTE_PROFILE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "REMOTE_COMMAND_CAPTURE_LAYERS",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "REMOTE_COMMAND_OUTPUT_DISPLAYLIST",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sExportProperties",
    "type" : "HashMap<Class<?>, PropertyInfo<ExportedProperty, ?>[]>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sCapturedViewProperties",
    "type" : "HashMap<Class<?>, PropertyInfo<CapturedViewProperty, ?>[]>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static long getViewInstanceCount()",
    "returnType" : "long",
    "comment" : "\n     * Returns the number of instanciated Views.\n     *\n     * @return The number of Views instanciated in the current process.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static long getViewRootImplCount()",
    "returnType" : "long",
    "comment" : "\n     * Returns the number of instanciated ViewAncestors.\n     *\n     * @return The number of ViewAncestors instanciated in the current process.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void trace(View view, RecyclerTraceType type, int... parameters)",
    "returnType" : "void",
    "comment" : "\n     * @deprecated This method is now unused and invoking it is a no-op\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void startRecyclerTracing(String prefix, View view)",
    "returnType" : "void",
    "comment" : "\n     * @deprecated This method is now unused and invoking it is a no-op\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void stopRecyclerTracing()",
    "returnType" : "void",
    "comment" : "\n     * @deprecated This method is now unused and invoking it is a no-op\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void trace(View view, HierarchyTraceType type)",
    "returnType" : "void",
    "comment" : "\n     * @deprecated This method is now unused and invoking it is a no-op\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void startHierarchyTracing(String prefix, View view)",
    "returnType" : "void",
    "comment" : "\n     * @deprecated This method is now unused and invoking it is a no-op\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void stopHierarchyTracing()",
    "returnType" : "void",
    "comment" : "\n     * @deprecated This method is now unused and invoking it is a no-op\n     ",
    "links" : [ ]
  }, {
    "name" : " static void dispatchCommand(View view, String command, String parameters, OutputStream clientStream) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static View findView(View root, String parameter)",
    "returnType" : "View",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private static void invalidate(View root, String parameter)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void requestLayout(View root, String parameter)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void profile(View root, OutputStream clientStream, String parameter) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void profileViewAndChildren(final View view, BufferedWriter out) throws IOException",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private static void profileViewAndChildren(View view, RenderNode node, BufferedWriter out, boolean root) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static long profileViewMeasure(final View view)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static long profileViewLayout(View view)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static long profileViewDraw(View view, RenderNode node)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static long profileViewOperation(View view, final ViewOperation operation)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void captureLayers(View root, final DataOutputStream clientStream) throws IOException",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private static void captureViewLayer(View view, DataOutputStream clientStream, boolean visible) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void outputDisplayList(View root, String parameter) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void outputDisplayList(View root, View target)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static AutoCloseable startRenderingCommandsCapture(View tree, Executor executor, Function<Picture, Boolean> callback)",
    "returnType" : "AutoCloseable",
    "comment" : "\n     * Begins capturing the entire rendering commands for the view tree referenced by the given\n     * view. The view passed may be any View in the tree as long as it is attached. That is,\n     * {@link View#isAttachedToWindow()} must be true.\n     *\n     * Every time a frame is rendered a Picture will be passed to the given callback via the given\n     * executor. As long as the callback returns 'true' it will continue to receive new frames.\n     * The system will only invoke the callback at a rate that the callback is able to keep up with.\n     * That is, if it takes 48ms for the callback to complete and there is a 60fps animation running\n     * then the callback will only receive 33% of the frames produced.\n     *\n     * This method must be called on the same thread as the View tree.\n     *\n     * @param tree The View tree to capture the rendering commands.\n     * @param callback The callback to invoke on every frame produced. Should return true to\n     *                 continue receiving new frames, false to stop capturing.\n     * @param executor The executor to invoke the callback on. Recommend using a background thread\n     *                 to avoid stalling the UI thread. Must be an asynchronous invoke or an\n     *                 exception will be thrown.\n     * @return a closeable that can be used to stop capturing. May be invoked on any thread. Note\n     * that the callback may continue to receive another frame or two depending on thread timings.\n     * Returns null if the capture stream cannot be started, such as if there's no\n     * HardwareRenderer for the given view tree.\n     * @hide\n     * @deprecated use {@link #startRenderingCommandsCapture(View, Executor, Callable)} instead.\n     ",
    "links" : [ "android.view.View#isAttachedToWindow()", "#startRenderingCommandsCapture(View" ]
  }, {
    "name" : "public static AutoCloseable startRenderingCommandsCapture(View tree, Executor executor, Callable<OutputStream> callback)",
    "returnType" : "AutoCloseable",
    "comment" : "\n     * Begins capturing the entire rendering commands for the view tree referenced by the given\n     * view. The view passed may be any View in the tree as long as it is attached. That is,\n     * {@link View#isAttachedToWindow()} must be true.\n     *\n     * Every time a frame is rendered the callback will be invoked on the given executor to\n     * provide an OutputStream to serialize to. As long as the callback returns a valid\n     * OutputStream the capturing will continue. The system will only invoke the callback at a rate\n     * that the callback & OutputStream is able to keep up with. That is, if it takes 48ms for the\n     * callback & serialization to complete and there is a 60fps animation running\n     * then the callback will only receive 33% of the frames produced.\n     *\n     * This method must be called on the same thread as the View tree.\n     *\n     * @param tree The View tree to capture the rendering commands.\n     * @param callback The callback to invoke on every frame produced. Should return an\n     *                 OutputStream to write the data to. Return null to cancel capture. The\n     *                 same stream may be returned each time as the serialized data contains\n     *                 start & end markers. The callback will not be invoked while a previous\n     *                 serialization is being performed, so if a single continuous stream is being\n     *                 used it is valid for the callback to write its own metadata to that stream\n     *                 in response to callback invocation.\n     * @param executor The executor to invoke the callback on. Recommend using a background thread\n     *                 to avoid stalling the UI thread. Must be an asynchronous invoke or an\n     *                 exception will be thrown.\n     * @return a closeable that can be used to stop capturing. May be invoked on any thread. Note\n     * that the callback may continue to receive another frame or two depending on thread timings.\n     * Returns null if the capture stream cannot be started, such as if there's no\n     * HardwareRenderer for the given view tree.\n     * @hide\n     ",
    "links" : [ "android.view.View#isAttachedToWindow()" ]
  }, {
    "name" : "private static void capture(View root, final OutputStream clientStream, String parameter) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void capture(View root, final OutputStream clientStream, View captureView) throws IOException",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private static Bitmap performViewCapture(final View captureView, final boolean skipChildren)",
    "returnType" : "Bitmap",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void dump(View root, boolean skipChildren, boolean includeProperties, OutputStream clientStream) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Dumps the view hierarchy starting from the given view.\n     * @deprecated See {@link #dumpv2(View, ByteArrayOutputStream)} below.\n     * @hide\n     ",
    "links" : [ "#dumpv2(View" ]
  }, {
    "name" : "public static void dumpv2(@NonNull final View view, @NonNull ByteArrayOutputStream out) throws InterruptedException",
    "returnType" : "void",
    "comment" : "\n     * Dumps the view hierarchy starting from the given view.\n     * Rather than using reflection, it uses View's encode method to obtain all the properties.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void dumpEncoded(@NonNull final View view, @NonNull OutputStream out) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void dumpTheme(View view, OutputStream clientStream) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Dumps the theme attributes from the given View.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String[] getStyleAttributesDump(Resources resources, Resources.Theme theme)",
    "returnType" : "String[]",
    "comment" : "\n     * Gets the style attributes from the {@link Resources.Theme}. For debugging only.\n     *\n     * @param resources Resources to resolve attributes from.\n     * @param theme Theme to dump.\n     * @return a String array containing pairs of adjacent Theme attribute data: name followed by\n     * its value.\n     *\n     * @hide\n     ",
    "links" : [ "Resources.Theme" ]
  }, {
    "name" : "private static View findView(ViewGroup group, String className, int hashCode)",
    "returnType" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isRequestedView(View view, String className, int hashCode)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void dumpViewHierarchy(Context context, ViewGroup group, BufferedWriter out, int level, boolean skipChildren, boolean includeProperties)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void cacheExportedPropertiesForChildren(ViewGroup group)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void cacheExportedProperties(Class<?> klass)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void dumpViewHierarchyOnUIThread(Context context, ViewGroup group, BufferedWriter out, int level, boolean skipChildren, boolean includeProperties)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean dumpView(Context context, View view, BufferedWriter out, int level, boolean includeProperties)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static PropertyInfo<T, ?>[] convertToPropertyInfos(Method[] methods, Field[] fields, Class<T> property)",
    "returnType" : "PropertyInfo<T, ?>[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static PropertyInfo<ExportedProperty, ?>[] getExportedProperties(Class<?> klass)",
    "returnType" : "PropertyInfo<ExportedProperty, ?>[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void dumpViewProperties(Context context, Object view, BufferedWriter out) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void dumpViewProperties(Context context, Object view, BufferedWriter out, String prefix) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String formatIntToHexString(int value)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void writeExportedProperties(Context context, Object view, BufferedWriter out, Class<?> klass, String prefix) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void writeEntry(BufferedWriter out, String prefix, String name, String suffix, Object value) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void exportUnrolledFlags(BufferedWriter out, FlagToString[] mapping, int intValue, String prefix) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String intToString(Class<?> clazz, String field, int integer)",
    "returnType" : "String",
    "comment" : "\n     * Converts an integer from a field that is mapped with {@link IntToString} to its string\n     * representation.\n     *\n     * @param clazz The class the field is defined on.\n     * @param field The field on which the {@link ExportedProperty} is defined on.\n     * @param integer The value to convert.\n     * @return The value converted into its string representation.\n     * @hide\n     ",
    "links" : [ "IntToString", "ExportedProperty" ]
  }, {
    "name" : "public static String flagsToString(Class<?> clazz, String field, int flags)",
    "returnType" : "String",
    "comment" : "\n     * Converts a set of flags from a field that is mapped with {@link FlagToString} to its string\n     * representation.\n     *\n     * @param clazz The class the field is defined on.\n     * @param field The field on which the {@link ExportedProperty} is defined on.\n     * @param flags The flags to convert.\n     * @return The flags converted into their string representations.\n     * @hide\n     ",
    "links" : [ "FlagToString", "ExportedProperty" ]
  }, {
    "name" : "private static FlagToString[] getFlagMapping(Class<?> clazz, String field)",
    "returnType" : "FlagToString[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static IntToString[] getMapping(Class<?> clazz, String field)",
    "returnType" : "IntToString[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void exportUnrolledArray(Context context, BufferedWriter out, ExportedProperty property, int[] array, String prefix, String suffix) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static Object resolveId(Context context, int id)",
    "returnType" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void writeValue(BufferedWriter out, Object value) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static PropertyInfo<CapturedViewProperty, ?>[] getCapturedViewProperties(Class<?> klass)",
    "returnType" : "PropertyInfo<CapturedViewProperty, ?>[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String exportCapturedViewProperties(Object obj, Class<?> klass, String prefix)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void dumpCapturedView(String tag, Object view)",
    "returnType" : "void",
    "comment" : "\n     * Dump view info for id based instrument test generation\n     * (and possibly further data analysis). The results are dumped\n     * to the log.\n     * @param tag for log\n     * @param view for dump\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Object invokeViewMethod(final View view, final Method method, final Object[] args)",
    "returnType" : "Object",
    "comment" : "\n     * Invoke a particular method on given view.\n     * The given method is always invoked on the UI thread. The caller thread will stall until the\n     * method invocation is complete. Returns an object equal to the result of the method\n     * invocation, null if the method is declared to return void\n     * @throws Exception if the method invocation caused any exception\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setLayoutParameter(final View view, final String param, final int value) throws NoSuchFieldException, IllegalAccessException",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TRACE_HIERARCHY", "TRACE_RECYCLER", "DEBUG_DRAG", "DEBUG_POSITIONING", "CAPTURE_TIMEOUT", "REMOTE_COMMAND_CAPTURE", "REMOTE_COMMAND_DUMP", "REMOTE_COMMAND_DUMP_THEME", "REMOTE_COMMAND_DUMP_ENCODED", "REMOTE_COMMAND_INVALIDATE", "REMOTE_COMMAND_REQUEST_LAYOUT", "REMOTE_PROFILE", "REMOTE_COMMAND_CAPTURE_LAYERS", "REMOTE_COMMAND_OUTPUT_DISPLAYLIST", "sExportProperties", "sCapturedViewProperties" ],
  "methodNames" : [ "public static long getViewInstanceCount()", "public static long getViewRootImplCount()", "public static void trace(View view, RecyclerTraceType type, int... parameters)", "public static void startRecyclerTracing(String prefix, View view)", "public static void stopRecyclerTracing()", "public static void trace(View view, HierarchyTraceType type)", "public static void startHierarchyTracing(String prefix, View view)", "public static void stopHierarchyTracing()", " static void dispatchCommand(View view, String command, String parameters, OutputStream clientStream) throws IOException", "public static View findView(View root, String parameter)", "private static void invalidate(View root, String parameter)", "private static void requestLayout(View root, String parameter)", "private static void profile(View root, OutputStream clientStream, String parameter) throws IOException", "public static void profileViewAndChildren(final View view, BufferedWriter out) throws IOException", "private static void profileViewAndChildren(View view, RenderNode node, BufferedWriter out, boolean root) throws IOException", "private static long profileViewMeasure(final View view)", "private static long profileViewLayout(View view)", "private static long profileViewDraw(View view, RenderNode node)", "private static long profileViewOperation(View view, final ViewOperation operation)", "public static void captureLayers(View root, final DataOutputStream clientStream) throws IOException", "private static void captureViewLayer(View view, DataOutputStream clientStream, boolean visible) throws IOException", "private static void outputDisplayList(View root, String parameter) throws IOException", "public static void outputDisplayList(View root, View target)", "public static AutoCloseable startRenderingCommandsCapture(View tree, Executor executor, Function<Picture, Boolean> callback)", "public static AutoCloseable startRenderingCommandsCapture(View tree, Executor executor, Callable<OutputStream> callback)", "private static void capture(View root, final OutputStream clientStream, String parameter) throws IOException", "public static void capture(View root, final OutputStream clientStream, View captureView) throws IOException", "private static Bitmap performViewCapture(final View captureView, final boolean skipChildren)", "public static void dump(View root, boolean skipChildren, boolean includeProperties, OutputStream clientStream) throws IOException", "public static void dumpv2(@NonNull final View view, @NonNull ByteArrayOutputStream out) throws InterruptedException", "private static void dumpEncoded(@NonNull final View view, @NonNull OutputStream out) throws IOException", "public static void dumpTheme(View view, OutputStream clientStream) throws IOException", "private static String[] getStyleAttributesDump(Resources resources, Resources.Theme theme)", "private static View findView(ViewGroup group, String className, int hashCode)", "private static boolean isRequestedView(View view, String className, int hashCode)", "private static void dumpViewHierarchy(Context context, ViewGroup group, BufferedWriter out, int level, boolean skipChildren, boolean includeProperties)", "private static void cacheExportedPropertiesForChildren(ViewGroup group)", "private static void cacheExportedProperties(Class<?> klass)", "private static void dumpViewHierarchyOnUIThread(Context context, ViewGroup group, BufferedWriter out, int level, boolean skipChildren, boolean includeProperties)", "private static boolean dumpView(Context context, View view, BufferedWriter out, int level, boolean includeProperties)", "private static PropertyInfo<T, ?>[] convertToPropertyInfos(Method[] methods, Field[] fields, Class<T> property)", "private static PropertyInfo<ExportedProperty, ?>[] getExportedProperties(Class<?> klass)", "private static void dumpViewProperties(Context context, Object view, BufferedWriter out) throws IOException", "private static void dumpViewProperties(Context context, Object view, BufferedWriter out, String prefix) throws IOException", "private static String formatIntToHexString(int value)", "private static void writeExportedProperties(Context context, Object view, BufferedWriter out, Class<?> klass, String prefix) throws IOException", "private static void writeEntry(BufferedWriter out, String prefix, String name, String suffix, Object value) throws IOException", "private static void exportUnrolledFlags(BufferedWriter out, FlagToString[] mapping, int intValue, String prefix) throws IOException", "public static String intToString(Class<?> clazz, String field, int integer)", "public static String flagsToString(Class<?> clazz, String field, int flags)", "private static FlagToString[] getFlagMapping(Class<?> clazz, String field)", "private static IntToString[] getMapping(Class<?> clazz, String field)", "private static void exportUnrolledArray(Context context, BufferedWriter out, ExportedProperty property, int[] array, String prefix, String suffix) throws IOException", " static Object resolveId(Context context, int id)", "private static void writeValue(BufferedWriter out, Object value) throws IOException", "private static PropertyInfo<CapturedViewProperty, ?>[] getCapturedViewProperties(Class<?> klass)", "private static String exportCapturedViewProperties(Object obj, Class<?> klass, String prefix)", "public static void dumpCapturedView(String tag, Object view)", "public static Object invokeViewMethod(final View view, final Method method, final Object[] args)", "public static void setLayoutParameter(final View view, final String param, final int value) throws NoSuchFieldException, IllegalAccessException" ]
}