{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/window/TaskFragmentOrganizer.java",
  "packageName" : "android.window",
  "className" : "TaskFragmentOrganizer",
  "comment" : "\n * Interface for WindowManager to delegate control of {@code TaskFragment}.\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "KEY_ERROR_CALLBACK_THROWABLE",
    "type" : "String",
    "comment" : "\n     * Key to the {@link Throwable} in {@link TaskFragmentTransaction.Change#getErrorBundle()}.\n     ",
    "links" : [ "TaskFragmentTransaction.Change#getErrorBundle()", "Throwable" ]
  }, {
    "name" : "KEY_ERROR_CALLBACK_TASK_FRAGMENT_INFO",
    "type" : "String",
    "comment" : "\n     * Key to the {@link TaskFragmentInfo} in\n     * {@link TaskFragmentTransaction.Change#getErrorBundle()}.\n     ",
    "links" : [ "TaskFragmentTransaction.Change#getErrorBundle()", "android.window.TaskFragmentInfo" ]
  }, {
    "name" : "KEY_ERROR_CALLBACK_OP_TYPE",
    "type" : "String",
    "comment" : "\n     * Key to the {@link TaskFragmentOperation.OperationType} in\n     * {@link TaskFragmentTransaction.Change#getErrorBundle()}.\n     ",
    "links" : [ "TaskFragmentTransaction.Change#getErrorBundle()", "TaskFragmentOperation.OperationType" ]
  }, {
    "name" : "TASK_FRAGMENT_TRANSIT_NONE",
    "type" : "int",
    "comment" : "\n     * No change set.\n     ",
    "links" : [ ]
  }, {
    "name" : "TASK_FRAGMENT_TRANSIT_OPEN",
    "type" : "int",
    "comment" : "\n     * A window that didn't exist before has been created and made visible.\n     ",
    "links" : [ ]
  }, {
    "name" : "TASK_FRAGMENT_TRANSIT_CLOSE",
    "type" : "int",
    "comment" : "\n     * A window that was visible no-longer exists (was finished or destroyed).\n     ",
    "links" : [ ]
  }, {
    "name" : "TASK_FRAGMENT_TRANSIT_CHANGE",
    "type" : "int",
    "comment" : "\n     * A window is visible before and after but changes in some way (eg. it resizes or changes\n     * windowing-mode).\n     ",
    "links" : [ ]
  }, {
    "name" : "TASK_FRAGMENT_TRANSIT_DRAG_RESIZE",
    "type" : "int",
    "comment" : "\n     * The task fragment drag resize transition used by activity embedding.\n     *\n     * This value is also used in Transitions.TRANSIT_TASK_FRAGMENT_DRAG_RESIZE and must not\n     * conflict with other predefined transition types.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mExecutor",
    "type" : "Executor",
    "comment" : "\n     * Callbacks from WM Core are posted on this executor.\n     ",
    "links" : [ ]
  }, {
    "name" : "mInterface",
    "type" : "ITaskFragmentOrganizer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mToken",
    "type" : "TaskFragmentOrganizerToken",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static Bundle putErrorInfoInBundle(@NonNull Throwable exception, @Nullable TaskFragmentInfo info, @TaskFragmentOperation.OperationType int opType)",
    "returnType" : "Bundle",
    "comment" : "\n     * Creates a {@link Bundle} with an exception, operation type and TaskFragmentInfo (if any)\n     * that can be passed to {@link ITaskFragmentOrganizer#onTaskFragmentError}.\n     * @hide\n     ",
    "links" : [ "android.os.Bundle", "#onTaskFragmentError" ]
  }, {
    "name" : "public Executor getExecutor()",
    "returnType" : "Executor",
    "comment" : "\n     * Gets the executor to run callbacks on.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void registerOrganizer()",
    "returnType" : "void",
    "comment" : "\n     * Registers a {@link TaskFragmentOrganizer} to manage TaskFragments.\n     ",
    "links" : [ "android.window.TaskFragmentOrganizer" ]
  }, {
    "name" : "public void registerOrganizer(boolean isSystemOrganizer)",
    "returnType" : "void",
    "comment" : "\n     * Registers a {@link TaskFragmentOrganizer} to manage TaskFragments.\n     *\n     * Registering a system organizer requires MANAGE_ACTIVITY_TASKS permission, and the organizer\n     * will have additional system capabilities, including: (1) it will receive SurfaceControl for\n     * the organized TaskFragment, and (2) it needs to update the\n     * {@link android.view.SurfaceControl} following the window change accordingly.\n     *\n     * @hide\n     ",
    "links" : [ "android.view.SurfaceControl", "android.window.TaskFragmentOrganizer" ]
  }, {
    "name" : "public void unregisterOrganizer()",
    "returnType" : "void",
    "comment" : "\n     * Unregisters a previously registered TaskFragmentOrganizer.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void registerRemoteAnimations(@NonNull RemoteAnimationDefinition definition)",
    "returnType" : "void",
    "comment" : "\n     * Registers remote animations per transition type for the organizer. It will override the\n     * animations if the transition only contains windows that belong to the organized\n     * TaskFragments, and at least one of the transition window is embedded (not filling the Task).\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void unregisterRemoteAnimations()",
    "returnType" : "void",
    "comment" : "\n     * Unregisters remote animations per transition type for the organizer.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onTransactionHandled(@NonNull IBinder transactionToken, @NonNull WindowContainerTransaction wct, @TaskFragmentTransitionType int transitionType, boolean shouldApplyIndependently)",
    "returnType" : "void",
    "comment" : "\n     * Notifies the server that the organizer has finished handling the given transaction. The\n     * server should apply the given {@link WindowContainerTransaction} for the necessary changes.\n     *\n     * @param transactionToken  {@link TaskFragmentTransaction#getTransactionToken()} from\n     *                          {@link #onTransactionReady(TaskFragmentTransaction)}\n     * @param wct               {@link WindowContainerTransaction} that the server should apply for\n     *                          update of the transaction.\n     * @param transitionType    {@link TaskFragmentTransitionType} if it needs to start a\n     *                          transition.\n     * @param shouldApplyIndependently  If {@code true}, the {@code wct} will request a new\n     *                                  transition, which will be queued until the sync engine is\n     *                                  free if there is any other active sync. If {@code false},\n     *                                  the {@code wct} will be directly applied to the active sync.\n     * @see com.android.server.wm.WindowOrganizerController#enforceTaskFragmentOrganizerPermission\n     * for permission enforcement.\n     ",
    "links" : [ "android.window.WindowContainerTransaction", "android.window.TaskFragmentTransaction#getTransactionToken()", "TaskFragmentTransitionType", "#onTransactionReady(TaskFragmentTransaction)" ]
  }, {
    "name" : "public void applyTransaction(@NonNull WindowContainerTransaction wct)",
    "returnType" : "void",
    "comment" : "\n     * Must use {@link #applyTransaction(WindowContainerTransaction, int, boolean)} instead.\n     * @see #applyTransaction(WindowContainerTransaction, int, boolean)\n     ",
    "links" : [ "#applyTransaction(WindowContainerTransaction" ]
  }, {
    "name" : "public void applyTransaction(@NonNull WindowContainerTransaction wct, @TaskFragmentTransitionType int transitionType, boolean shouldApplyIndependently)",
    "returnType" : "void",
    "comment" : "\n     * Requests the server to apply the given {@link WindowContainerTransaction}.\n     *\n     * @param wct   {@link WindowContainerTransaction} to apply.\n     * @param transitionType    {@link TaskFragmentTransitionType} if it needs to start a\n     *                          transition.\n     * @param shouldApplyIndependently  If {@code true}, the {@code wct} will request a new\n     *                                  transition, which will be queued until the sync engine is\n     *                                  free if there is any other active sync. If {@code false},\n     *                                  the {@code wct} will be directly applied to the active sync.\n     * @see com.android.server.wm.WindowOrganizerController#enforceTaskFragmentOrganizerPermission\n     * for permission enforcement.\n     ",
    "links" : [ "android.window.WindowContainerTransaction", "TaskFragmentTransitionType" ]
  }, {
    "name" : "public void applySystemTransaction(@NonNull WindowContainerTransaction wct, @TaskFragmentTransitionType int transitionType, @Nullable RemoteTransition remoteTransition)",
    "returnType" : "void",
    "comment" : "\n     * Applies a transaction with a {@link RemoteTransition}. Only a system organizer is allowed to\n     * use {@link RemoteTransition}. See {@link TaskFragmentOrganizer#registerOrganizer(boolean)}.\n     *\n     * @hide\n     ",
    "links" : [ "android.window.RemoteTransition", "android.window.TaskFragmentOrganizer#registerOrganizer(boolean)" ]
  }, {
    "name" : "public void onTransactionReady(@NonNull TaskFragmentTransaction transaction)",
    "returnType" : "void",
    "comment" : "\n     * Called when the transaction is ready so that the organizer can update the TaskFragments based\n     * on the changes in transaction.\n     ",
    "links" : [ ]
  }, {
    "name" : "public TaskFragmentOrganizerToken getOrganizerToken()",
    "returnType" : "TaskFragmentOrganizerToken",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private ITaskFragmentOrganizerController getController()",
    "returnType" : "ITaskFragmentOrganizerController",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isActivityEmbedded(@NonNull IBinder activityToken)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if an activity organized by a {@link android.window.TaskFragmentOrganizer} and\n     * only occupies a portion of Task bounds.\n     * @hide\n     ",
    "links" : [ "android.window.TaskFragmentOrganizer" ]
  } ],
  "methodNames" : [ "public static Bundle putErrorInfoInBundle(@NonNull Throwable exception, @Nullable TaskFragmentInfo info, @TaskFragmentOperation.OperationType int opType)", "public Executor getExecutor()", "public void registerOrganizer()", "public void registerOrganizer(boolean isSystemOrganizer)", "public void unregisterOrganizer()", "public void registerRemoteAnimations(@NonNull RemoteAnimationDefinition definition)", "public void unregisterRemoteAnimations()", "public void onTransactionHandled(@NonNull IBinder transactionToken, @NonNull WindowContainerTransaction wct, @TaskFragmentTransitionType int transitionType, boolean shouldApplyIndependently)", "public void applyTransaction(@NonNull WindowContainerTransaction wct)", "public void applyTransaction(@NonNull WindowContainerTransaction wct, @TaskFragmentTransitionType int transitionType, boolean shouldApplyIndependently)", "public void applySystemTransaction(@NonNull WindowContainerTransaction wct, @TaskFragmentTransitionType int transitionType, @Nullable RemoteTransition remoteTransition)", "public void onTransactionReady(@NonNull TaskFragmentTransaction transaction)", "public TaskFragmentOrganizerToken getOrganizerToken()", "private ITaskFragmentOrganizerController getController()", "public boolean isActivityEmbedded(@NonNull IBinder activityToken)" ],
  "variableNames" : [ "KEY_ERROR_CALLBACK_THROWABLE", "KEY_ERROR_CALLBACK_TASK_FRAGMENT_INFO", "KEY_ERROR_CALLBACK_OP_TYPE", "TASK_FRAGMENT_TRANSIT_NONE", "TASK_FRAGMENT_TRANSIT_OPEN", "TASK_FRAGMENT_TRANSIT_CLOSE", "TASK_FRAGMENT_TRANSIT_CHANGE", "TASK_FRAGMENT_TRANSIT_DRAG_RESIZE", "mExecutor", "mInterface", "mToken" ]
}