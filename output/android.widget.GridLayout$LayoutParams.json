{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/widget/GridLayout.java",
  "packageName" : "android.widget",
  "className" : "LayoutParams",
  "comment" : "\n     * Layout information associated with each of the children of a GridLayout.\n     * <p>\n     * GridLayout supports both row and column spanning and arbitrary forms of alignment within\n     * each cell group. The fundamental parameters associated with each cell group are\n     * gathered into their vertical and horizontal components and stored\n     * in the {@link #rowSpec} and {@link #columnSpec} layout parameters.\n     * {@link GridLayout.Spec Specs} are immutable structures\n     * and may be shared between the layout parameters of different children.\n     * <p>\n     * The row and column specs contain the leading and trailing indices along each axis\n     * and together specify the four grid indices that delimit the cells of this cell group.\n     * <p>\n     * The  alignment properties of the row and column specs together specify\n     * both aspects of alignment within the cell group. It is also possible to specify a child's\n     * alignment within its cell group by using the {@link GridLayout.LayoutParams#setGravity(int)}\n     * method.\n     * <p>\n     * The weight property is also included in Spec and specifies the proportion of any\n     * excess space that is due to the associated view.\n     *\n     * <h4>WRAP_CONTENT and MATCH_PARENT</h4>\n     *\n     * Because the default values of the {@link #width} and {@link #height}\n     * properties are both {@link #WRAP_CONTENT}, this value never needs to be explicitly\n     * declared in the layout parameters of GridLayout's children. In addition,\n     * GridLayout does not distinguish the special size value {@link #MATCH_PARENT} from\n     * {@link #WRAP_CONTENT}. A component's ability to expand to the size of the parent is\n     * instead controlled by the principle of <em>flexibility</em>,\n     * as discussed in {@link GridLayout}.\n     *\n     * <h4>Summary</h4>\n     *\n     * You should not need to use either of the special size values:\n     * {@code WRAP_CONTENT} or {@code MATCH_PARENT} when configuring the children of\n     * a GridLayout.\n     *\n     * <h4>Default values</h4>\n     *\n     * <ul>\n     *     <li>{@link #width} = {@link #WRAP_CONTENT}</li>\n     *     <li>{@link #height} = {@link #WRAP_CONTENT}</li>\n     *     <li>{@link #topMargin} = 0 when\n     *          {@link GridLayout#setUseDefaultMargins(boolean) useDefaultMargins} is\n     *          {@code false}; otherwise {@link #UNDEFINED}, to\n     *          indicate that a default value should be computed on demand. </li>\n     *     <li>{@link #leftMargin} = 0 when\n     *          {@link GridLayout#setUseDefaultMargins(boolean) useDefaultMargins} is\n     *          {@code false}; otherwise {@link #UNDEFINED}, to\n     *          indicate that a default value should be computed on demand. </li>\n     *     <li>{@link #bottomMargin} = 0 when\n     *          {@link GridLayout#setUseDefaultMargins(boolean) useDefaultMargins} is\n     *          {@code false}; otherwise {@link #UNDEFINED}, to\n     *          indicate that a default value should be computed on demand. </li>\n     *     <li>{@link #rightMargin} = 0 when\n     *          {@link GridLayout#setUseDefaultMargins(boolean) useDefaultMargins} is\n     *          {@code false}; otherwise {@link #UNDEFINED}, to\n     *          indicate that a default value should be computed on demand. </li>\n     *     <li>{@link #rowSpec}<code>.row</code> = {@link #UNDEFINED} </li>\n     *     <li>{@link #rowSpec}<code>.rowSpan</code> = 1 </li>\n     *     <li>{@link #rowSpec}<code>.alignment</code> = {@link #BASELINE} </li>\n     *     <li>{@link #rowSpec}<code>.weight</code> = 0 </li>\n     *     <li>{@link #columnSpec}<code>.column</code> = {@link #UNDEFINED} </li>\n     *     <li>{@link #columnSpec}<code>.columnSpan</code> = 1 </li>\n     *     <li>{@link #columnSpec}<code>.alignment</code> = {@link #START} </li>\n     *     <li>{@link #columnSpec}<code>.weight</code> = 0 </li>\n     * </ul>\n     *\n     * See {@link GridLayout} for a more complete description of the conventions\n     * used by GridLayout in the interpretation of the properties of this class.\n     *\n     * @attr ref android.R.styleable#GridLayout_Layout_layout_row\n     * @attr ref android.R.styleable#GridLayout_Layout_layout_rowSpan\n     * @attr ref android.R.styleable#GridLayout_Layout_layout_rowWeight\n     * @attr ref android.R.styleable#GridLayout_Layout_layout_column\n     * @attr ref android.R.styleable#GridLayout_Layout_layout_columnSpan\n     * @attr ref android.R.styleable#GridLayout_Layout_layout_columnWeight\n     * @attr ref android.R.styleable#GridLayout_Layout_layout_gravity\n     ",
  "links" : [ "#rightMargin", "#WRAP_CONTENT", "#leftMargin", "#bottomMargin", "#MATCH_PARENT", "android.widget.GridLayout#setUseDefaultMargins(boolean)", "GridLayout.LayoutParams#setGravity(int)", "#UNDEFINED", "#START", "#columnSpec", "#width", "GridLayout.Spec", "#height", "#BASELINE", "#topMargin", "#rowSpec", "android.widget.GridLayout" ],
  "variables" : [ {
    "name" : "DEFAULT_WIDTH",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_HEIGHT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_MARGIN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_ROW",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_COLUMN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_SPAN",
    "type" : "Interval",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_SPAN_SIZE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MARGIN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LEFT_MARGIN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TOP_MARGIN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RIGHT_MARGIN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BOTTOM_MARGIN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "COLUMN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "COLUMN_SPAN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "COLUMN_WEIGHT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ROW",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ROW_SPAN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ROW_WEIGHT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "GRAVITY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "rowSpec",
    "type" : "Spec",
    "comment" : "\n         * The spec that defines the vertical characteristics of the cell group\n         * described by these layout parameters.\n         * If an assignment is made to this field after a measurement or layout operation\n         * has already taken place, a call to\n         * {@link ViewGroup#setLayoutParams(ViewGroup.LayoutParams)}\n         * must be made to notify GridLayout of the change. GridLayout is normally able\n         * to detect when code fails to observe this rule, issue a warning and take steps to\n         * compensate for the omission. This facility is implemented on a best effort basis\n         * and should not be relied upon in production code - so it is best to include the above\n         * calls to remove the warnings as soon as it is practical.\n         ",
    "links" : [ "android.view.ViewGroup#setLayoutParams(ViewGroup.LayoutParams)" ]
  }, {
    "name" : "columnSpec",
    "type" : "Spec",
    "comment" : "\n         * The spec that defines the horizontal characteristics of the cell group\n         * described by these layout parameters.\n         * If an assignment is made to this field after a measurement or layout operation\n         * has already taken place, a call to\n         * {@link ViewGroup#setLayoutParams(ViewGroup.LayoutParams)}\n         * must be made to notify GridLayout of the change. GridLayout is normally able\n         * to detect when code fails to observe this rule, issue a warning and take steps to\n         * compensate for the omission. This facility is implemented on a best effort basis\n         * and should not be relied upon in production code - so it is best to include the above\n         * calls to remove the warnings as soon as it is practical.\n         ",
    "links" : [ "android.view.ViewGroup#setLayoutParams(ViewGroup.LayoutParams)" ]
  } ],
  "methods" : [ {
    "name" : "private void reInitSuper(Context context, AttributeSet attrs)",
    "returnType" : "void",
    "comment" : " This method could be parametrized and moved into MarginLayout.",
    "links" : [ ]
  }, {
    "name" : "private void init(Context context, AttributeSet attrs)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setGravity(int gravity)",
    "returnType" : "void",
    "comment" : "\n         * Describes how the child views are positioned. Default is {@code LEFT | BASELINE}.\n         * See {@link Gravity}.\n         *\n         * @param gravity the new gravity value\n         *\n         * @attr ref android.R.styleable#GridLayout_Layout_layout_gravity\n         ",
    "links" : [ "android.view.Gravity" ]
  }, {
    "name" : "protected void setBaseAttributes(TypedArray attributes, int widthAttr, int heightAttr)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final void setRowSpecSpan(Interval span)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final void setColumnSpecSpan(Interval span)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(@Nullable Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void reInitSuper(Context context, AttributeSet attrs)", "private void init(Context context, AttributeSet attrs)", "public void setGravity(int gravity)", "protected void setBaseAttributes(TypedArray attributes, int widthAttr, int heightAttr)", " final void setRowSpecSpan(Interval span)", " final void setColumnSpecSpan(Interval span)", "public boolean equals(@Nullable Object o)", "public int hashCode()" ],
  "variableNames" : [ "DEFAULT_WIDTH", "DEFAULT_HEIGHT", "DEFAULT_MARGIN", "DEFAULT_ROW", "DEFAULT_COLUMN", "DEFAULT_SPAN", "DEFAULT_SPAN_SIZE", "MARGIN", "LEFT_MARGIN", "TOP_MARGIN", "RIGHT_MARGIN", "BOTTOM_MARGIN", "COLUMN", "COLUMN_SPAN", "COLUMN_WEIGHT", "ROW", "ROW_SPAN", "ROW_WEIGHT", "GRAVITY", "rowSpec", "columnSpec" ]
}