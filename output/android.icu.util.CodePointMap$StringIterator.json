{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/util/CodePointMap.java",
  "packageName" : "android.icu.util",
  "className" : "StringIterator",
  "comment" : "\n     * Iterates over code points of a string and fetches map values.\n     * This does not implement java.util.Iterator.\n     *\n     * <pre>\n     * void onString(CodePointMap map, CharSequence s, int start) {\n     *     CodePointMap.StringIterator iter = map.stringIterator(s, start);\n     *     while (iter.next()) {\n     *         int end = iter.getIndex();  // code point from between start and end\n     *         useValue(s, start, end, iter.getCodePoint(), iter.getValue());\n     *         start = end;\n     *     }\n     * }\n     * </pre>\n     *\n     * <p>This class is not intended for public subclassing.\n     *\n     * @hide Only a subset of ICU is exposed in Android\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "s",
    "type" : "CharSequence",
    "comment" : "\n         * @deprecated This API is ICU internal only.\n         * @hide draft / provisional / internal are hidden on Android\n         ",
    "links" : [ ]
  }, {
    "name" : "sIndex",
    "type" : "int",
    "comment" : "\n         * @deprecated This API is ICU internal only.\n         * @hide draft / provisional / internal are hidden on Android\n         ",
    "links" : [ ]
  }, {
    "name" : "c",
    "type" : "int",
    "comment" : "\n         * @deprecated This API is ICU internal only.\n         * @hide draft / provisional / internal are hidden on Android\n         ",
    "links" : [ ]
  }, {
    "name" : "value",
    "type" : "int",
    "comment" : "\n         * @deprecated This API is ICU internal only.\n         * @hide draft / provisional / internal are hidden on Android\n         ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void reset(CharSequence s, int sIndex)",
    "returnType" : "void",
    "comment" : "\n         * Resets the iterator to a new string and/or a new string index.\n         *\n         * @param s string to iterate over\n         * @param sIndex string index where the iteration will start\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean next()",
    "returnType" : "boolean",
    "comment" : "\n         * Reads the next code point, post-increments the string index,\n         * and gets a value from the map.\n         * Sets an implementation-defined error value if the code point is an unpaired surrogate.\n         *\n         * @return true if the string index was not yet at the end of the string;\n         *         otherwise the iterator did not advance\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean previous()",
    "returnType" : "boolean",
    "comment" : "\n         * Reads the previous code point, pre-decrements the string index,\n         * and gets a value from the map.\n         * Sets an implementation-defined error value if the code point is an unpaired surrogate.\n         *\n         * @return true if the string index was not yet at the start of the string;\n         *         otherwise the iterator did not advance\n         ",
    "links" : [ ]
  }, {
    "name" : "public final int getIndex()",
    "returnType" : "int",
    "comment" : "\n         * @return the string index\n         ",
    "links" : [ ]
  }, {
    "name" : "public final int getCodePoint()",
    "returnType" : "int",
    "comment" : "\n         * @return the code point\n         ",
    "links" : [ ]
  }, {
    "name" : "public final int getValue()",
    "returnType" : "int",
    "comment" : "\n         * @return the map value,\n         *         or an implementation-defined error value if\n         *         the code point is an unpaired surrogate\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void reset(CharSequence s, int sIndex)", "public boolean next()", "public boolean previous()", "public final int getIndex()", "public final int getCodePoint()", "public final int getValue()" ],
  "variableNames" : [ "s", "sIndex", "c", "value" ]
}