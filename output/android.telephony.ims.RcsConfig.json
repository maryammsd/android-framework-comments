{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/telephony/ims/RcsConfig.java",
  "packageName" : "android.telephony.ims",
  "className" : "RcsConfig",
  "comment" : "\n * RCS config data and methods to process the config\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "LOG_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_CHARACTERISTIC",
    "type" : "String",
    "comment" : " Tag and attribute defined in RCC.07 A.2",
    "links" : [ ]
  }, {
    "name" : "TAG_PARM",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATTRIBUTE_TYPE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATTRIBUTE_NAME",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATTRIBUTE_VALUE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PARM_SINGLE_REGISTRATION",
    "type" : "String",
    "comment" : " Keyword for Rcs Volte single registration defined in RCC.07 A.1.6.2",
    "links" : [ ]
  }, {
    "name" : "mRoot",
    "type" : "Characteristic",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCurrent",
    "type" : "Characteristic",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mData",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String getString(@NonNull String tag, @Nullable String defaultVal)",
    "returnType" : "String",
    "comment" : "\n     * Retrieve a String value of the config item with the tag\n     *\n     * @param tag The name of the config to retrieve.\n     * @param defaultVal Value to return if the config does not exist.\n     *\n     * @return Returns the config value if it exists, or defaultVal.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getInteger(@NonNull String tag, int defaultVal)",
    "returnType" : "int",
    "comment" : "\n     * Retrieve a int value of the config item with the tag\n     *\n     * @param tag The name of the config to retrieve.\n     * @param defaultVal Value to return if the config does not exist or not valid.\n     *\n     * @return Returns the config value if it exists and is a valid int, or defaultVal.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getBoolean(@NonNull String tag, boolean defaultVal)",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieve a boolean value of the config item with the tag\n     *\n     * @param tag The name of the config to retrieve.\n     * @param defaultVal Value to return if the config does not exist.\n     *\n     * @return Returns the config value if it exists, or defaultVal.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasConfig(@NonNull String tag)",
    "returnType" : "boolean",
    "comment" : "\n     * Check whether the config item exists\n     *\n     * @param tag The name of the config to retrieve.\n     *\n     * @return Returns true if it exists, or false.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Characteristic getCharacteristic(@NonNull String type)",
    "returnType" : "Characteristic",
    "comment" : "\n     * Return the Characteristic with the given type\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasCharacteristic(@NonNull String type)",
    "returnType" : "boolean",
    "comment" : "\n     * Check whether the Characteristic with the given type exists\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCurrentCharacteristic(@NonNull Characteristic current)",
    "returnType" : "void",
    "comment" : "\n     * Set current Characteristic to given Characteristic\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean moveToParent()",
    "returnType" : "boolean",
    "comment" : "\n     * Move current Characteristic to parent layer\n     ",
    "links" : [ ]
  }, {
    "name" : "public void moveToRoot()",
    "returnType" : "void",
    "comment" : "\n     * Move current Characteristic to the root\n     ",
    "links" : [ ]
  }, {
    "name" : "public Characteristic getRoot()",
    "returnType" : "Characteristic",
    "comment" : "\n     * Return root Characteristic\n     ",
    "links" : [ ]
  }, {
    "name" : "public Characteristic getCurrentCharacteristic()",
    "returnType" : "Characteristic",
    "comment" : "\n     * Return current Characteristic\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isRcsVolteSingleRegistrationSupported(boolean isRoaming)",
    "returnType" : "boolean",
    "comment" : "\n     * Check whether Rcs Volte single registration is supported by the config.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static byte[] compressGzip(@NonNull byte[] data)",
    "returnType" : "byte[]",
    "comment" : "\n     * compress the gzip format data\n     ",
    "links" : [ ]
  }, {
    "name" : "public static byte[] decompressGzip(@NonNull byte[] data)",
    "returnType" : "byte[]",
    "comment" : "\n     * decompress the gzip format data\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void updateConfigForSub(@NonNull Context cxt, int subId, @NonNull byte[] config, boolean isCompressed)",
    "returnType" : "void",
    "comment" : "\n     * save the config to siminfo db. It is only used internally.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static byte[] loadRcsConfigForSub(@NonNull Context cxt, int subId, boolean isCompressed)",
    "returnType" : "byte[]",
    "comment" : "\n     * load the config from siminfo db. It is only used internally.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void logd(String msg)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void loge(String msg)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public String getString(@NonNull String tag, @Nullable String defaultVal)", "public int getInteger(@NonNull String tag, int defaultVal)", "public boolean getBoolean(@NonNull String tag, boolean defaultVal)", "public boolean hasConfig(@NonNull String tag)", "public Characteristic getCharacteristic(@NonNull String type)", "public boolean hasCharacteristic(@NonNull String type)", "public void setCurrentCharacteristic(@NonNull Characteristic current)", "public boolean moveToParent()", "public void moveToRoot()", "public Characteristic getRoot()", "public Characteristic getCurrentCharacteristic()", "public boolean isRcsVolteSingleRegistrationSupported(boolean isRoaming)", "public String toString()", "public boolean equals(Object obj)", "public int hashCode()", "public static byte[] compressGzip(@NonNull byte[] data)", "public static byte[] decompressGzip(@NonNull byte[] data)", "public static void updateConfigForSub(@NonNull Context cxt, int subId, @NonNull byte[] config, boolean isCompressed)", "public static byte[] loadRcsConfigForSub(@NonNull Context cxt, int subId, boolean isCompressed)", "private static void logd(String msg)", "private static void loge(String msg)" ],
  "variableNames" : [ "LOG_TAG", "DBG", "TAG_CHARACTERISTIC", "TAG_PARM", "ATTRIBUTE_TYPE", "ATTRIBUTE_NAME", "ATTRIBUTE_VALUE", "PARM_SINGLE_REGISTRATION", "mRoot", "mCurrent", "mData" ]
}