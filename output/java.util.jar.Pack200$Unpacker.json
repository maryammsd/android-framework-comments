{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/jar/Pack200.java",
  "packageName" : "java.util.jar",
  "className" : "Unpacker",
  "comment" : "\n     * The unpacker engine converts the packed stream to a JAR file.\n     * An instance of the engine can be obtained\n     * using {@link #newUnpacker}.\n     * <p>\n     * Every JAR file produced by this engine will include the string\n     * \"<tt>PACK200</tt>\" as a zip file comment.\n     * This allows a deployer to detect if a JAR archive was packed and unpacked.\n     * <p>\n     * Note: Unless otherwise noted, passing a <tt>null</tt> argument to a\n     * constructor or method in this class will cause a {@link NullPointerException}\n     * to be thrown.\n     * <p>\n     * This version of the unpacker is compatible with all previous versions.\n     * @since 1.5\n     ",
  "links" : [ "#newUnpacker", "NullPointerException" ],
  "variables" : [ {
    "name" : "KEEP",
    "type" : "String",
    "comment" : " The string \"keep\", a possible value for certain properties.\n         * @see #DEFLATE_HINT\n         ",
    "links" : [ ]
  }, {
    "name" : "TRUE",
    "type" : "String",
    "comment" : " The string \"true\", a possible value for certain properties.\n         * @see #DEFLATE_HINT\n         ",
    "links" : [ ]
  }, {
    "name" : "FALSE",
    "type" : "String",
    "comment" : " The string \"false\", a possible value for certain properties.\n         * @see #DEFLATE_HINT\n         ",
    "links" : [ ]
  }, {
    "name" : "DEFLATE_HINT",
    "type" : "String",
    "comment" : "\n         * Property indicating that the unpacker should\n         * ignore all transmitted values for DEFLATE_HINT,\n         * replacing them by the given value, {@link #TRUE} or {@link #FALSE}.\n         * The default value is the special string {@link #KEEP},\n         * which asks the unpacker to preserve all transmitted\n         * deflation hints.\n         ",
    "links" : [ "#FALSE", "#TRUE", "#KEEP" ]
  }, {
    "name" : "PROGRESS",
    "type" : "String",
    "comment" : "\n         * The unpacker's progress as a percentage, as periodically\n         * updated by the unpacker.\n         * Values of 0 - 100 are normal, and -1 indicates a stall.\n         * Progress can be monitored by polling the value of this\n         * property.\n         * <p>\n         * At a minimum, the unpacker must set progress to 0\n         * at the beginning of a packing operation, and to 100\n         * at the end.\n         ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " SortedMap<String, String> properties()",
    "returnType" : "SortedMap<String, String>",
    "comment" : "\n         * Get the set of this engine's properties. This set is\n         * a \"live view\", so that changing its\n         * contents immediately affects the Packer engine, and\n         * changes from the engine (such as progress indications)\n         * are immediately visible in the map.\n         *\n         * <p>The property map may contain pre-defined implementation\n         * specific and default properties.  Users are encouraged to\n         * read the information and fully understand the implications,\n         * before modifying pre-existing properties.\n         * <p>\n         * Implementation specific properties are prefixed with a\n         * package name associated with the implementor, beginning\n         * with <tt>com.</tt> or a similar prefix.\n         * All property names beginning with <tt>pack.</tt> and\n         * <tt>unpack.</tt> are reserved for use by this API.\n         * <p>\n         * Unknown properties may be ignored or rejected with an\n         * unspecified error, and invalid entries may cause an\n         * unspecified error to be thrown.\n         *\n         * @return A sorted association of option key strings to option values.\n         ",
    "links" : [ ]
  }, {
    "name" : " void unpack(InputStream in, JarOutputStream out) throws IOException",
    "returnType" : "void",
    "comment" : "\n         * Read a Pack200 archive, and write the encoded JAR to\n         * a JarOutputStream.\n         * The entire contents of the input stream will be read.\n         * It may be more efficient to read the Pack200 archive\n         * to a file and pass the File object, using the alternate\n         * method described below.\n         * <p>\n         * Closes its input but not its output.  (The output can accumulate more elements.)\n         * @param in an InputStream.\n         * @param out a JarOutputStream.\n         * @exception IOException if an error is encountered.\n         ",
    "links" : [ ]
  }, {
    "name" : " void unpack(File in, JarOutputStream out) throws IOException",
    "returnType" : "void",
    "comment" : "\n         * Read a Pack200 archive, and write the encoded JAR to\n         * a JarOutputStream.\n         * <p>\n         * Does not close its output.  (The output can accumulate more elements.)\n         * @param in a File.\n         * @param out a JarOutputStream.\n         * @exception IOException if an error is encountered.\n         ",
    "links" : [ ]
  }, {
    "name" : " void addPropertyChangeListener(PropertyChangeListener listener)",
    "returnType" : "void",
    "comment" : "\n         * Registers a listener for PropertyChange events on the properties map.\n         * This is typically used by applications to update a progress bar.\n         *\n         * <p> The default implementation of this method does nothing and has\n         * no side-effects.</p>\n         *\n         * <p><b>WARNING:</b> This method is omitted from the interface\n         * declaration in all subset Profiles of Java SE that do not include\n         * the {@code java.beans} package. </p>\n         *\n         * @see #properties\n         * @see #PROGRESS\n         * @param listener  An object to be invoked when a property is changed.\n         * @deprecated The dependency on {@code PropertyChangeListener} creates\n         *             a significant impediment to future modularization of the\n         *             Java platform. This method will be removed in a future\n         *             release.\n         *             Applications that need to monitor progress of the\n         *             unpacker can poll the value of the {@link #PROGRESS\n         *             PROGRESS} property instead.\n         ",
    "links" : [ "#PROGRESSPROGRESS" ]
  }, {
    "name" : " void removePropertyChangeListener(PropertyChangeListener listener)",
    "returnType" : "void",
    "comment" : "\n         * Remove a listener for PropertyChange events, added by\n         * the {@link #addPropertyChangeListener}.\n         *\n         * <p> The default implementation of this method does nothing and has\n         * no side-effects.</p>\n         *\n         * <p><b>WARNING:</b> This method is omitted from the interface\n         * declaration in all subset Profiles of Java SE that do not include\n         * the {@code java.beans} package. </p>\n         *\n         * @see #addPropertyChangeListener\n         * @param listener  The PropertyChange listener to be removed.\n         * @deprecated The dependency on {@code PropertyChangeListener} creates\n         *             a significant impediment to future modularization of the\n         *             Java platform. This method will be removed in a future\n         *             release.\n         ",
    "links" : [ "#addPropertyChangeListener" ]
  } ],
  "methodNames" : [ " SortedMap<String, String> properties()", " void unpack(InputStream in, JarOutputStream out) throws IOException", " void unpack(File in, JarOutputStream out) throws IOException", " void addPropertyChangeListener(PropertyChangeListener listener)", " void removePropertyChangeListener(PropertyChangeListener listener)" ],
  "variableNames" : [ "KEEP", "TRUE", "FALSE", "DEFLATE_HINT", "PROGRESS" ]
}