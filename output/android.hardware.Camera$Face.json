{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/Camera.java",
  "packageName" : "android.hardware",
  "className" : "Face",
  "comment" : "\n     * Information about a face identified through camera face detection.\n     *\n     * <p>When face detection is used with a camera, the {@link FaceDetectionListener} returns a\n     * list of face objects for use in focusing and metering.</p>\n     *\n     * @see FaceDetectionListener\n     * @deprecated We recommend using the new {@link android.hardware.camera2} API for new\n     *             applications.\n     ",
  "links" : [ "FaceDetectionListener", "android.hardware.camera2" ],
  "variables" : [ {
    "name" : "rect",
    "type" : "Rect",
    "comment" : "\n         * Bounds of the face. (-1000, -1000) represents the top-left of the\n         * camera field of view, and (1000, 1000) represents the bottom-right of\n         * the field of view. For example, suppose the size of the viewfinder UI\n         * is 800x480. The rect passed from the driver is (-1000, -1000, 0, 0).\n         * The corresponding viewfinder rect should be (0, 0, 400, 240). It is\n         * guaranteed left < right and top < bottom. The coordinates can be\n         * smaller than -1000 or bigger than 1000. But at least one vertex will\n         * be within (-1000, -1000) and (1000, 1000).\n         *\n         * <p>The direction is relative to the sensor orientation, that is, what\n         * the sensor sees. The direction is not affected by the rotation or\n         * mirroring of {@link #setDisplayOrientation(int)}. The face bounding\n         * rectangle does not provide any information about face orientation.</p>\n         *\n         * <p>Here is the matrix to convert driver coordinates to View coordinates\n         * in pixels.</p>\n         * <pre>\n         * Matrix matrix = new Matrix();\n         * CameraInfo info = CameraHolder.instance().getCameraInfo()[cameraId];\n         * // Need mirror for front camera.\n         * boolean mirror = (info.facing == CameraInfo.CAMERA_FACING_FRONT);\n         * matrix.setScale(mirror ? -1 : 1, 1);\n         * // This is the value for android.hardware.Camera.setDisplayOrientation.\n         * matrix.postRotate(displayOrientation);\n         * // Camera driver coordinates range from (-1000, -1000) to (1000, 1000).\n         * // UI coordinates range from (0, 0) to (width, height).\n         * matrix.postScale(view.getWidth() / 2000f, view.getHeight() / 2000f);\n         * matrix.postTranslate(view.getWidth() / 2f, view.getHeight() / 2f);\n         * </pre>\n         *\n         * @see #startFaceDetection()\n         ",
    "links" : [ "#setDisplayOrientation(int)" ]
  }, {
    "name" : "score",
    "type" : "int",
    "comment" : "\n         * <p>The confidence level for the detection of the face. The range is 1 to\n         * 100. 100 is the highest confidence.</p>\n         *\n         * <p>Depending on the device, even very low-confidence faces may be\n         * listed, so applications should filter out faces with low confidence,\n         * depending on the use case. For a typical point-and-shoot camera\n         * application that wishes to display rectangles around detected faces,\n         * filtering out faces with confidence less than 50 is recommended.</p>\n         *\n         * @see #startFaceDetection()\n         ",
    "links" : [ ]
  }, {
    "name" : "id",
    "type" : "int",
    "comment" : "\n         * An unique id per face while the face is visible to the tracker. If\n         * the face leaves the field-of-view and comes back, it will get a new\n         * id. This is an optional field, may not be supported on all devices.\n         * If not supported, id will always be set to -1. The optional fields\n         * are supported as a set. Either they are all valid, or none of them\n         * are.\n         ",
    "links" : [ ]
  }, {
    "name" : "leftEye",
    "type" : "Point",
    "comment" : "\n         * The coordinates of the center of the left eye. The coordinates are in\n         * the same space as the ones for {@link #rect}. This is an optional\n         * field, may not be supported on all devices. If not supported, the\n         * value will always be set to null. The optional fields are supported\n         * as a set. Either they are all valid, or none of them are.\n         ",
    "links" : [ "#rect" ]
  }, {
    "name" : "rightEye",
    "type" : "Point",
    "comment" : "\n         * The coordinates of the center of the right eye. The coordinates are\n         * in the same space as the ones for {@link #rect}.This is an optional\n         * field, may not be supported on all devices. If not supported, the\n         * value will always be set to null. The optional fields are supported\n         * as a set. Either they are all valid, or none of them are.\n         ",
    "links" : [ "#rect" ]
  }, {
    "name" : "mouth",
    "type" : "Point",
    "comment" : "\n         * The coordinates of the center of the mouth.  The coordinates are in\n         * the same space as the ones for {@link #rect}. This is an optional\n         * field, may not be supported on all devices. If not supported, the\n         * value will always be set to null. The optional fields are supported\n         * as a set. Either they are all valid, or none of them are.\n         ",
    "links" : [ "#rect" ]
  } ],
  "methods" : [ ],
  "methodNames" : [ ],
  "variableNames" : [ "rect", "score", "id", "leftEye", "rightEye", "mouth" ]
}