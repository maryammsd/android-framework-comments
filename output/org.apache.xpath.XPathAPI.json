{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xpath/XPathAPI.java",
  "packageName" : "org.apache.xpath",
  "className" : "XPathAPI",
  "comment" : "\n * The methods in this class are convenience methods into the\n * low-level XPath API.\n * These functions tend to be a little slow, since a number of objects must be\n * created for each evaluation.  A faster way is to precompile the\n * XPaths using the low-level API, and then just use the XPaths\n * over and over.\n *\n * NOTE: In particular, each call to this method will create a new\n * XPathContext, a new DTMManager... and thus a new DTM. That's very\n * safe, since it guarantees that you're always processing against a\n * fully up-to-date view of your document. But it's also portentially\n * very expensive, since you're rebuilding the DTM every time. You should\n * consider using an instance of CachedXPathAPI rather than these static\n * methods.\n *\n * @see <a href=\"http://www.w3.org/TR/xpath\">XPath Specification</a> \n * ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public static Node selectSingleNode(Node contextNode, String str) throws TransformerException",
    "returnType" : "Node",
    "comment" : "\n   * Use an XPath string to select a single node. XPath namespace\n   * prefixes are resolved from the context node, which may not\n   * be what you want (see the next method).\n   *\n   * @param contextNode The node to start searching from.\n   * @param str A valid XPath string.\n   * @return The first node found that matches the XPath, or null.\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public static Node selectSingleNode(Node contextNode, String str, Node namespaceNode) throws TransformerException",
    "returnType" : "Node",
    "comment" : "\n   * Use an XPath string to select a single node.\n   * XPath namespace prefixes are resolved from the namespaceNode.\n   *\n   * @param contextNode The node to start searching from.\n   * @param str A valid XPath string.\n   * @param namespaceNode The node from which prefixes in the XPath will be resolved to namespaces.\n   * @return The first node found that matches the XPath, or null.\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public static NodeIterator selectNodeIterator(Node contextNode, String str) throws TransformerException",
    "returnType" : "NodeIterator",
    "comment" : "\n   *  Use an XPath string to select a nodelist.\n   *  XPath namespace prefixes are resolved from the contextNode.\n   *\n   *  @param contextNode The node to start searching from.\n   *  @param str A valid XPath string.\n   *  @return A NodeIterator, should never be null.\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public static NodeIterator selectNodeIterator(Node contextNode, String str, Node namespaceNode) throws TransformerException",
    "returnType" : "NodeIterator",
    "comment" : "\n   *  Use an XPath string to select a nodelist.\n   *  XPath namespace prefixes are resolved from the namespaceNode.\n   *\n   *  @param contextNode The node to start searching from.\n   *  @param str A valid XPath string.\n   *  @param namespaceNode The node from which prefixes in the XPath will be resolved to namespaces.\n   *  @return A NodeIterator, should never be null.\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public static NodeList selectNodeList(Node contextNode, String str) throws TransformerException",
    "returnType" : "NodeList",
    "comment" : "\n   *  Use an XPath string to select a nodelist.\n   *  XPath namespace prefixes are resolved from the contextNode.\n   *\n   *  @param contextNode The node to start searching from.\n   *  @param str A valid XPath string.\n   *  @return A NodeIterator, should never be null.\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public static NodeList selectNodeList(Node contextNode, String str, Node namespaceNode) throws TransformerException",
    "returnType" : "NodeList",
    "comment" : "\n   *  Use an XPath string to select a nodelist.\n   *  XPath namespace prefixes are resolved from the namespaceNode.\n   *\n   *  @param contextNode The node to start searching from.\n   *  @param str A valid XPath string.\n   *  @param namespaceNode The node from which prefixes in the XPath will be resolved to namespaces.\n   *  @return A NodeIterator, should never be null.\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public static XObject eval(Node contextNode, String str) throws TransformerException",
    "returnType" : "XObject",
    "comment" : "\n   *  Evaluate XPath string to an XObject.  Using this method,\n   *  XPath namespace prefixes will be resolved from the namespaceNode.\n   *  @param contextNode The node to start searching from.\n   *  @param str A valid XPath string.\n   *  @return An XObject, which can be used to obtain a string, number, nodelist, etc, should never be null.\n   *  @see org.apache.xpath.objects.XObject\n   *  @see org.apache.xpath.objects.XNull\n   *  @see org.apache.xpath.objects.XBoolean\n   *  @see org.apache.xpath.objects.XNumber\n   *  @see org.apache.xpath.objects.XString\n   *  @see org.apache.xpath.objects.XRTreeFrag\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public static XObject eval(Node contextNode, String str, Node namespaceNode) throws TransformerException",
    "returnType" : "XObject",
    "comment" : "\n   *  Evaluate XPath string to an XObject.\n   *  XPath namespace prefixes are resolved from the namespaceNode.\n   *  The implementation of this is a little slow, since it creates\n   *  a number of objects each time it is called.  This could be optimized\n   *  to keep the same objects around, but then thread-safety issues would arise.\n   *\n   *  @param contextNode The node to start searching from.\n   *  @param str A valid XPath string.\n   *  @param namespaceNode The node from which prefixes in the XPath will be resolved to namespaces.\n   *  @return An XObject, which can be used to obtain a string, number, nodelist, etc, should never be null.\n   *  @see org.apache.xpath.objects.XObject\n   *  @see org.apache.xpath.objects.XNull\n   *  @see org.apache.xpath.objects.XBoolean\n   *  @see org.apache.xpath.objects.XNumber\n   *  @see org.apache.xpath.objects.XString\n   *  @see org.apache.xpath.objects.XRTreeFrag\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public static XObject eval(Node contextNode, String str, PrefixResolver prefixResolver) throws TransformerException",
    "returnType" : "XObject",
    "comment" : "\n   *   Evaluate XPath string to an XObject.\n   *   XPath namespace prefixes are resolved from the namespaceNode.\n   *   The implementation of this is a little slow, since it creates\n   *   a number of objects each time it is called.  This could be optimized\n   *   to keep the same objects around, but then thread-safety issues would arise.\n   *\n   *   @param contextNode The node to start searching from.\n   *   @param str A valid XPath string.\n   *   @param prefixResolver Will be called if the parser encounters namespace\n   *                         prefixes, to resolve the prefixes to URLs.\n   *   @return An XObject, which can be used to obtain a string, number, nodelist, etc, should never be null.\n   *   @see org.apache.xpath.objects.XObject\n   *   @see org.apache.xpath.objects.XNull\n   *   @see org.apache.xpath.objects.XBoolean\n   *   @see org.apache.xpath.objects.XNumber\n   *   @see org.apache.xpath.objects.XString\n   *   @see org.apache.xpath.objects.XRTreeFrag\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static Node selectSingleNode(Node contextNode, String str) throws TransformerException", "public static Node selectSingleNode(Node contextNode, String str, Node namespaceNode) throws TransformerException", "public static NodeIterator selectNodeIterator(Node contextNode, String str) throws TransformerException", "public static NodeIterator selectNodeIterator(Node contextNode, String str, Node namespaceNode) throws TransformerException", "public static NodeList selectNodeList(Node contextNode, String str) throws TransformerException", "public static NodeList selectNodeList(Node contextNode, String str, Node namespaceNode) throws TransformerException", "public static XObject eval(Node contextNode, String str) throws TransformerException", "public static XObject eval(Node contextNode, String str, Node namespaceNode) throws TransformerException", "public static XObject eval(Node contextNode, String str, PrefixResolver prefixResolver) throws TransformerException" ],
  "variableNames" : [ ]
}