{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/sql/Clob.java",
  "packageName" : "java.sql",
  "className" : "Clob",
  "comment" : "",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " long length() throws SQLException",
    "returnType" : "long",
    "comment" : "\n   * Retrieves the number of characters\n   * in the <code>CLOB</code> value\n   * designated by this <code>Clob</code> object.\n   *\n   * @return length of the <code>CLOB</code> in characters\n   * @exception SQLException if there is an error accessing the\n   *            length of the <code>CLOB</code> value\n   * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n   * this method\n   * @since 1.2\n   ",
    "links" : [ ]
  }, {
    "name" : " String getSubString(long pos, int length) throws SQLException",
    "returnType" : "String",
    "comment" : "\n   * Retrieves a copy of the specified substring\n   * in the <code>CLOB</code> value\n   * designated by this <code>Clob</code> object.\n   * The substring begins at position\n   * <code>pos</code> and has up to <code>length</code> consecutive\n   * characters.\n   *\n   * @param pos the first character of the substring to be extracted.\n   *            The first character is at position 1.\n   * @param length the number of consecutive characters to be copied;\n   * the value for length must be 0 or greater\n   * @return a <code>String</code> that is the specified substring in\n   *         the <code>CLOB</code> value designated by this <code>Clob</code> object\n   * @exception SQLException if there is an error accessing the\n   *            <code>CLOB</code> value; if pos is less than 1 or length is\n   * less than 0\n   * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n   * this method\n   * @since 1.2\n   ",
    "links" : [ ]
  }, {
    "name" : " java.io.Reader getCharacterStream() throws SQLException",
    "returnType" : "java.io.Reader",
    "comment" : "\n   * Retrieves the <code>CLOB</code> value designated by this <code>Clob</code>\n   * object as a <code>java.io.Reader</code> object (or as a stream of\n   * characters).\n   *\n   * @return a <code>java.io.Reader</code> object containing the\n   *         <code>CLOB</code> data\n   * @exception SQLException if there is an error accessing the\n   *            <code>CLOB</code> value\n   * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n   * this method\n   * @see #setCharacterStream\n   * @since 1.2\n   ",
    "links" : [ ]
  }, {
    "name" : " java.io.InputStream getAsciiStream() throws SQLException",
    "returnType" : "java.io.InputStream",
    "comment" : "\n   * Retrieves the <code>CLOB</code> value designated by this <code>Clob</code>\n   * object as an ascii stream.\n   *\n   * @return a <code>java.io.InputStream</code> object containing the\n   *         <code>CLOB</code> data\n   * @exception SQLException if there is an error accessing the\n   *            <code>CLOB</code> value\n   * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n   * this method\n   * @see #setAsciiStream\n   * @since 1.2\n   ",
    "links" : [ ]
  }, {
    "name" : " long position(String searchstr, long start) throws SQLException",
    "returnType" : "long",
    "comment" : "\n   * Retrieves the character position at which the specified substring\n   * <code>searchstr</code> appears in the SQL <code>CLOB</code> value\n   * represented by this <code>Clob</code> object.  The search\n   * begins at position <code>start</code>.\n   *\n   * @param searchstr the substring for which to search\n   * @param start the position at which to begin searching; the first position\n   *              is 1\n   * @return the position at which the substring appears or -1 if it is not\n   *         present; the first position is 1\n   * @exception SQLException if there is an error accessing the\n   *            <code>CLOB</code> value or if pos is less than 1\n   * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n   * this method\n   * @since 1.2\n   ",
    "links" : [ ]
  }, {
    "name" : " long position(Clob searchstr, long start) throws SQLException",
    "returnType" : "long",
    "comment" : "\n   * Retrieves the character position at which the specified\n   * <code>Clob</code> object <code>searchstr</code> appears in this\n   * <code>Clob</code> object.  The search begins at position\n   * <code>start</code>.\n   *\n   * @param searchstr the <code>Clob</code> object for which to search\n   * @param start the position at which to begin searching; the first\n   *              position is 1\n   * @return the position at which the <code>Clob</code> object appears\n   *              or -1 if it is not present; the first position is 1\n   * @exception SQLException if there is an error accessing the\n   *            <code>CLOB</code> value or if start is less than 1\n   * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n   * this method\n   * @since 1.2\n   ",
    "links" : [ ]
  }, {
    "name" : " int setString(long pos, String str) throws SQLException",
    "returnType" : "int",
    "comment" : "\n     * Writes the given Java <code>String</code> to the <code>CLOB</code>\n     * value that this <code>Clob</code> object designates at the position\n     * <code>pos</code>. The string will overwrite the existing characters\n     * in the <code>Clob</code> object starting at the position\n     * <code>pos</code>.  If the end of the <code>Clob</code> value is reached\n     * while writing the given string, then the length of the <code>Clob</code>\n     * value will be increased to accomodate the extra characters.\n     * <p>\n     * <b>Note:</b> If the value specified for <code>pos</code>\n     * is greater then the length+1 of the <code>CLOB</code> value then the\n     * behavior is undefined. Some JDBC drivers may throw a\n     * <code>SQLException</code> while other drivers may support this\n     * operation.\n     *\n     * @param pos the position at which to start writing to the <code>CLOB</code>\n     *         value that this <code>Clob</code> object represents;\n     * The first position is 1\n     * @param str the string to be written to the <code>CLOB</code>\n     *        value that this <code>Clob</code> designates\n     * @return the number of characters written\n     * @exception SQLException if there is an error accessing the\n     *            <code>CLOB</code> value or if pos is less than 1\n     *\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " int setString(long pos, String str, int offset, int len) throws SQLException",
    "returnType" : "int",
    "comment" : "\n     * Writes <code>len</code> characters of <code>str</code>, starting\n     * at character <code>offset</code>, to the <code>CLOB</code> value\n     * that this <code>Clob</code> represents.  The string will overwrite the existing characters\n     * in the <code>Clob</code> object starting at the position\n     * <code>pos</code>.  If the end of the <code>Clob</code> value is reached\n     * while writing the given string, then the length of the <code>Clob</code>\n     * value will be increased to accomodate the extra characters.\n     * <p>\n     * <b>Note:</b> If the value specified for <code>pos</code>\n     * is greater then the length+1 of the <code>CLOB</code> value then the\n     * behavior is undefined. Some JDBC drivers may throw a\n     * <code>SQLException</code> while other drivers may support this\n     * operation.\n     *\n     * @param pos the position at which to start writing to this\n     *        <code>CLOB</code> object; The first position  is 1\n     * @param str the string to be written to the <code>CLOB</code>\n     *        value that this <code>Clob</code> object represents\n     * @param offset the offset into <code>str</code> to start reading\n     *        the characters to be written\n     * @param len the number of characters to be written\n     * @return the number of characters written\n     * @exception SQLException if there is an error accessing the\n     *            <code>CLOB</code> value or if pos is less than 1\n     *\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " java.io.OutputStream setAsciiStream(long pos) throws SQLException",
    "returnType" : "java.io.OutputStream",
    "comment" : "\n     * Retrieves a stream to be used to write Ascii characters to the\n     * <code>CLOB</code> value that this <code>Clob</code> object represents,\n     * starting at position <code>pos</code>.  Characters written to the stream\n     * will overwrite the existing characters\n     * in the <code>Clob</code> object starting at the position\n     * <code>pos</code>.  If the end of the <code>Clob</code> value is reached\n     * while writing characters to the stream, then the length of the <code>Clob</code>\n     * value will be increased to accomodate the extra characters.\n     * <p>\n     * <b>Note:</b> If the value specified for <code>pos</code>\n     * is greater then the length+1 of the <code>CLOB</code> value then the\n     * behavior is undefined. Some JDBC drivers may throw a\n     * <code>SQLException</code> while other drivers may support this\n     * operation.\n     *\n     * @param pos the position at which to start writing to this\n     *        <code>CLOB</code> object; The first position is 1\n     * @return the stream to which ASCII encoded characters can be written\n     * @exception SQLException if there is an error accessing the\n     *            <code>CLOB</code> value or if pos is less than 1\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @see #getAsciiStream\n     *\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " java.io.Writer setCharacterStream(long pos) throws SQLException",
    "returnType" : "java.io.Writer",
    "comment" : "\n     * Retrieves a stream to be used to write a stream of Unicode characters\n     * to the <code>CLOB</code> value that this <code>Clob</code> object\n     * represents, at position <code>pos</code>. Characters written to the stream\n     * will overwrite the existing characters\n     * in the <code>Clob</code> object starting at the position\n     * <code>pos</code>.  If the end of the <code>Clob</code> value is reached\n     * while writing characters to the stream, then the length of the <code>Clob</code>\n     * value will be increased to accomodate the extra characters.\n     * <p>\n     * <b>Note:</b> If the value specified for <code>pos</code>\n     * is greater then the length+1 of the <code>CLOB</code> value then the\n     * behavior is undefined. Some JDBC drivers may throw a\n     * <code>SQLException</code> while other drivers may support this\n     * operation.\n     *\n     * @param  pos the position at which to start writing to the\n     *        <code>CLOB</code> value; The first position is 1\n     *\n     * @return a stream to which Unicode encoded characters can be written\n     * @exception SQLException if there is an error accessing the\n     *            <code>CLOB</code> value or if pos is less than 1\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @see #getCharacterStream\n     *\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " void truncate(long len) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Truncates the <code>CLOB</code> value that this <code>Clob</code>\n     * designates to have a length of <code>len</code>\n     * characters.\n     * <p>\n     * <b>Note:</b> If the value specified for <code>pos</code>\n     * is greater then the length+1 of the <code>CLOB</code> value then the\n     * behavior is undefined. Some JDBC drivers may throw a\n     * <code>SQLException</code> while other drivers may support this\n     * operation.\n     *\n     * @param len the length, in characters, to which the <code>CLOB</code> value\n     *        should be truncated\n     * @exception SQLException if there is an error accessing the\n     *            <code>CLOB</code> value or if len is less than 0\n     *\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : " void free() throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * This method frees the <code>Clob</code> object and releases the resources the resources\n     * that it holds.  The object is invalid once the <code>free</code> method\n     * is called.\n     * <p>\n     * After <code>free</code> has been called, any attempt to invoke a\n     * method other than <code>free</code> will result in a <code>SQLException</code>\n     * being thrown.  If <code>free</code> is called multiple times, the subsequent\n     * calls to <code>free</code> are treated as a no-op.\n     * <p>\n     * @throws SQLException if an error occurs releasing\n     * the Clob's resources\n     *\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : " Reader getCharacterStream(long pos, long length) throws SQLException",
    "returnType" : "Reader",
    "comment" : "\n     * Returns a <code>Reader</code> object that contains a partial <code>Clob</code> value, starting\n     * with the character specified by pos, which is length characters in length.\n     *\n     * @param pos the offset to the first character of the partial value to\n     * be retrieved.  The first character in the Clob is at position 1.\n     * @param length the length in characters of the partial value to be retrieved.\n     * @return <code>Reader</code> through which the partial <code>Clob</code> value can be read.\n     * @throws SQLException if pos is less than 1 or if pos is greater than the number of\n     * characters in the <code>Clob</code> or if pos + length is greater than the number of\n     * characters in the <code>Clob</code>\n     *\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.6\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " long length() throws SQLException", " String getSubString(long pos, int length) throws SQLException", " java.io.Reader getCharacterStream() throws SQLException", " java.io.InputStream getAsciiStream() throws SQLException", " long position(String searchstr, long start) throws SQLException", " long position(Clob searchstr, long start) throws SQLException", " int setString(long pos, String str) throws SQLException", " int setString(long pos, String str, int offset, int len) throws SQLException", " java.io.OutputStream setAsciiStream(long pos) throws SQLException", " java.io.Writer setCharacterStream(long pos) throws SQLException", " void truncate(long len) throws SQLException", " void free() throws SQLException", " Reader getCharacterStream(long pos, long length) throws SQLException" ],
  "variableNames" : [ ]
}