{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/net/Inet4Address.java",
  "packageName" : "java.net",
  "className" : "Inet4Address",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "INADDRSZ",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : " use serialVersionUID from InetAddress, but Inet4Address instance\n     *  is always replaced by an InetAddress instance before being\n     *  serialized ",
    "links" : [ ]
  }, {
    "name" : "ANY",
    "type" : "InetAddress",
    "comment" : "\n     * Reserved address for {@code INADDR_ANY}, to specify any IPv4 address at all.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ALL",
    "type" : "InetAddress",
    "comment" : "\n     * Broadcast address to transmit to all devices on network.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "LOOPBACK",
    "type" : "InetAddress",
    "comment" : "\n     * Loopback address to the local host.\n     *\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private Object writeReplace() throws ObjectStreamException",
    "returnType" : "Object",
    "comment" : "\n     * Replaces the object to be serialized with an InetAddress object.\n     *\n     * @return the alternate object to be serialized.\n     *\n     * @throws ObjectStreamException if a new object replacing this\n     * object could not be created\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isMulticastAddress()",
    "returnType" : "boolean",
    "comment" : "\n     * Utility routine to check if the InetAddress is an\n     * IP multicast address. IP multicast address is a Class D\n     * address i.e first four bits of the address are 1110.\n     * @return a {@code boolean} indicating if the InetAddress is\n     * an IP multicast address\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isAnyLocalAddress()",
    "returnType" : "boolean",
    "comment" : "\n     * Utility routine to check if the InetAddress is a wildcard address.\n     * @return a {@code boolean} indicating if the Inetaddress is\n     *         a wildcard address.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isLoopbackAddress()",
    "returnType" : "boolean",
    "comment" : "\n     * Utility routine to check if the InetAddress is a loopback address.\n     *\n     * @return a {@code boolean} indicating if the InetAddress is\n     * a loopback address; or false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isLinkLocalAddress()",
    "returnType" : "boolean",
    "comment" : "\n     * Utility routine to check if the InetAddress is an link local address.\n     *\n     * @return a {@code boolean} indicating if the InetAddress is\n     * a link local address; or false if address is not a link local unicast address.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSiteLocalAddress()",
    "returnType" : "boolean",
    "comment" : "\n     * Utility routine to check if the InetAddress is a site local address.\n     *\n     * @return a {@code boolean} indicating if the InetAddress is\n     * a site local address; or false if address is not a site local unicast address.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isMCGlobal()",
    "returnType" : "boolean",
    "comment" : "\n     * Utility routine to check if the multicast address has global scope.\n     *\n     * @return a {@code boolean} indicating if the address has\n     *         is a multicast address of global scope, false if it is not\n     *         of global scope or it is not a multicast address\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isMCNodeLocal()",
    "returnType" : "boolean",
    "comment" : "\n     * Utility routine to check if the multicast address has node scope.\n     *\n     * @return a {@code boolean} indicating if the address has\n     *         is a multicast address of node-local scope, false if it is not\n     *         of node-local scope or it is not a multicast address\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isMCLinkLocal()",
    "returnType" : "boolean",
    "comment" : "\n     * Utility routine to check if the multicast address has link scope.\n     *\n     * @return a {@code boolean} indicating if the address has\n     *         is a multicast address of link-local scope, false if it is not\n     *         of link-local scope or it is not a multicast address\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isMCSiteLocal()",
    "returnType" : "boolean",
    "comment" : "\n     * Utility routine to check if the multicast address has site scope.\n     *\n     * @return a {@code boolean} indicating if the address has\n     *         is a multicast address of site-local scope, false if it is not\n     *         of site-local scope or it is not a multicast address\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isMCOrgLocal()",
    "returnType" : "boolean",
    "comment" : "\n     * Utility routine to check if the multicast address has organization scope.\n     *\n     * @return a {@code boolean} indicating if the address has\n     *         is a multicast address of organization-local scope,\n     *         false if it is not of organization-local scope\n     *         or it is not a multicast address\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getAddress()",
    "returnType" : "byte[]",
    "comment" : "\n     * Returns the raw IP address of this {@code InetAddress}\n     * object. The result is in network byte order: the highest order\n     * byte of the address is in {@code getAddress()[0]}.\n     *\n     * @return  the raw IP address of this object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getHostAddress()",
    "returnType" : "String",
    "comment" : "\n     * Returns the IP address string in textual presentation form.\n     *\n     * @return  the raw IP address in a string format.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Returns a hashcode for this IP address.\n     *\n     * @return  a hash code value for this IP address.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "\n     * Compares this object against the specified object.\n     * The result is {@code true} if and only if the argument is\n     * not {@code null} and it represents the same IP address as\n     * this object.\n     * <p>\n     * Two instances of {@code InetAddress} represent the same IP\n     * address if the length of the byte arrays returned by\n     * {@code getAddress} is the same for both, and each of the\n     * array components is the same for the byte arrays.\n     *\n     * @param   obj   the object to compare against.\n     * @return  {@code true} if the objects are the same;\n     *          {@code false} otherwise.\n     * @see     java.net.InetAddress#getAddress()\n     ",
    "links" : [ ]
  }, {
    "name" : " static String numericToTextFormat(byte[] src)",
    "returnType" : "String",
    "comment" : "\n     * Converts IPv4 binary address into a string suitable for presentation.\n     *\n     * @param src a byte array representing an IPv4 numeric address\n     * @return a String representing the IPv4 address in\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private Object writeReplace() throws ObjectStreamException", "public boolean isMulticastAddress()", "public boolean isAnyLocalAddress()", "public boolean isLoopbackAddress()", "public boolean isLinkLocalAddress()", "public boolean isSiteLocalAddress()", "public boolean isMCGlobal()", "public boolean isMCNodeLocal()", "public boolean isMCLinkLocal()", "public boolean isMCSiteLocal()", "public boolean isMCOrgLocal()", "public byte[] getAddress()", "public String getHostAddress()", "public int hashCode()", "public boolean equals(Object obj)", " static String numericToTextFormat(byte[] src)" ],
  "variableNames" : [ "INADDRSZ", "serialVersionUID", "ANY", "ALL", "LOOPBACK" ]
}