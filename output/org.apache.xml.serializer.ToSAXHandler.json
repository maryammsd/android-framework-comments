{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xml/serializer/ToSAXHandler.java",
  "packageName" : "org.apache.xml.serializer",
  "className" : "ToSAXHandler",
  "comment" : "\n * This class is used to provide a base behavior to be inherited\n * by other To...SAXHandler serializers.\n * \n * This class is not a public API.\n * \n * @xsl.usage internal\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "m_saxHandler",
    "type" : "ContentHandler",
    "comment" : "\n     * Underlying SAX handler. Taken from XSLTC\n     ",
    "links" : [ ]
  }, {
    "name" : "m_lexHandler",
    "type" : "LexicalHandler",
    "comment" : "\n     * Underlying LexicalHandler. Taken from XSLTC\n     ",
    "links" : [ ]
  }, {
    "name" : "m_shouldGenerateNSAttribute",
    "type" : "boolean",
    "comment" : "\n     * A startPrefixMapping() call on a ToSAXHandler will pass that call\n     * on to the wrapped ContentHandler, but should we also mirror these calls\n     * with matching attributes, if so this field is true.\n     * For example if this field is true then a call such as\n     * startPrefixMapping(\"prefix1\",\"uri1\") will also cause the additional\n     * internally generated attribute xmlns:prefix1=\"uri1\" to be effectively added\n     * to the attributes passed to the wrapped ContentHandler.\n     ",
    "links" : [ ]
  }, {
    "name" : "m_state",
    "type" : "TransformStateSetter",
    "comment" : " If this is true, then the content handler wrapped by this\n     * serializer implements the TransformState interface which\n     * will give the content handler access to the state of\n     * the transform. ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected void startDocumentInternal() throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Pass callback to the SAX Handler\n     ",
    "links" : [ ]
  }, {
    "name" : "public void startDTD(String arg0, String arg1, String arg2) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Do nothing.\n     * @see org.xml.sax.ext.LexicalHandler#startDTD(String, String, String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void characters(String characters) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Receive notification of character data.\n     *\n     * @param characters The string of characters to process.\n     *\n     * @throws org.xml.sax.SAXException\n     *\n     * @see ExtendedContentHandler#characters(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void comment(String comment) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Receive notification of a comment.\n     *\n     * @see ExtendedLexicalHandler#comment(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void processingInstruction(String target, String data) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Do nothing as this is an abstract class. All subclasses will need to\n     * define their behavior if it is different.\n     * @see org.xml.sax.ContentHandler#processingInstruction(String, String)\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void closeStartTag() throws SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void closeCDATA() throws SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void startElement(String arg0, String arg1, String arg2, Attributes arg3) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Receive notification of the beginning of an element, although this is a\n     * SAX method additional namespace or attribute information can occur before\n     * or after this call, that is associated with this element.\n     *\n     * @throws org.xml.sax.SAXException Any SAX exception, possibly\n     *            wrapping another exception.\n     * @see org.xml.sax.ContentHandler#startElement\n     * @see org.xml.sax.ContentHandler#endElement\n     * @see org.xml.sax.AttributeList\n     *\n     * @throws org.xml.sax.SAXException\n     *\n     * @see org.xml.sax.ContentHandler#startElement(String,String,String,Attributes)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setLexHandler(LexicalHandler _lexHandler)",
    "returnType" : "void",
    "comment" : "\n     * Sets the LexicalHandler.\n     * @param _lexHandler The LexicalHandler to set\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setContentHandler(ContentHandler _saxHandler)",
    "returnType" : "void",
    "comment" : "\n     * Sets the SAX ContentHandler.\n     * @param _saxHandler The ContentHandler to set\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCdataSectionElements(Vector URI_and_localNames)",
    "returnType" : "void",
    "comment" : "\n     * Does nothing. The setting of CDATA section elements has an impact on\n     * stream serializers.\n     * @see SerializationHandler#setCdataSectionElements(java.util.Vector)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setShouldOutputNSAttr(boolean doOutputNSAttr)",
    "returnType" : "void",
    "comment" : " Set whether or not namespace declarations (e.g. \n     * xmlns:foo) should appear as attributes of \n     * elements\n     * @param doOutputNSAttr whether or not namespace declarations\n     * should appear as attributes\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean getShouldOutputNSAttr()",
    "returnType" : "boolean",
    "comment" : " \n     * Returns true if namespace declarations from calls such as\n     * startPrefixMapping(\"prefix1\",\"uri1\") should\n     * also be mirrored with self generated additional attributes of elements \n     * that declare the namespace, for example the attribute xmlns:prefix1=\"uri1\"\n     ",
    "links" : [ ]
  }, {
    "name" : "public void flushPending() throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * This method flushes any pending events, which can be startDocument()\n     * closing the opening tag of an element, or closing an open CDATA section.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTransformState(TransformStateSetter ts)",
    "returnType" : "void",
    "comment" : "\n     * Pass in a reference to a TransformState object, which\n     * can be used during SAX ContentHandler events to obtain\n     * information about he state of the transformation. This\n     * method will be called  before each startDocument event.\n     *\n     * @param ts A reference to a TransformState object\n     ",
    "links" : [ ]
  }, {
    "name" : "public void startElement(String uri, String localName, String qName) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Receives notification that an element starts, but attributes are not\n     * fully known yet.\n     *\n     * @param uri the URI of the namespace of the element (optional)\n     * @param localName the element name, but without prefix (optional)\n     * @param qName the element name, with prefix, if any (required)\n     *\n     * @see ExtendedContentHandler#startElement(String, String, String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void startElement(String qName) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * An element starts, but attributes are not fully known yet.\n     *\n     * @param qName the element name, with prefix (if any).\n\n     * @see ExtendedContentHandler#startElement(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void characters(org.w3c.dom.Node node) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n     * This method gets the node's value as a String and uses that String as if\n     * it were an input character notification.\n     * @param node the Node to serialize\n     * @throws org.xml.sax.SAXException\n     ",
    "links" : [ ]
  }, {
    "name" : "public void fatalError(SAXParseException exc) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * @see org.xml.sax.ErrorHandler#fatalError(SAXParseException)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void error(SAXParseException exc) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * @see org.xml.sax.ErrorHandler#error(SAXParseException)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void warning(SAXParseException exc) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * @see org.xml.sax.ErrorHandler#warning(SAXParseException)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean reset()",
    "returnType" : "boolean",
    "comment" : "\n     * Try's to reset the super class and reset this class for \n     * re-use, so that you don't need to create a new serializer \n     * (mostly for performance reasons).\n     * \n     * @return true if the class was successfuly reset.\n     * @see Serializer#reset()\n     ",
    "links" : [ ]
  }, {
    "name" : "private void resetToSAXHandler()",
    "returnType" : "void",
    "comment" : "\n     * Reset all of the fields owned by ToSAXHandler class\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addUniqueAttribute(String qName, String value, int flags) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Add a unique attribute\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "protected void startDocumentInternal() throws SAXException", "public void startDTD(String arg0, String arg1, String arg2) throws SAXException", "public void characters(String characters) throws SAXException", "public void comment(String comment) throws SAXException", "public void processingInstruction(String target, String data) throws SAXException", "protected void closeStartTag() throws SAXException", "protected void closeCDATA() throws SAXException", "public void startElement(String arg0, String arg1, String arg2, Attributes arg3) throws SAXException", "public void setLexHandler(LexicalHandler _lexHandler)", "public void setContentHandler(ContentHandler _saxHandler)", "public void setCdataSectionElements(Vector URI_and_localNames)", "public void setShouldOutputNSAttr(boolean doOutputNSAttr)", " boolean getShouldOutputNSAttr()", "public void flushPending() throws SAXException", "public void setTransformState(TransformStateSetter ts)", "public void startElement(String uri, String localName, String qName) throws SAXException", "public void startElement(String qName) throws SAXException", "public void characters(org.w3c.dom.Node node) throws org.xml.sax.SAXException", "public void fatalError(SAXParseException exc) throws SAXException", "public void error(SAXParseException exc) throws SAXException", "public void warning(SAXParseException exc) throws SAXException", "public boolean reset()", "private void resetToSAXHandler()", "public void addUniqueAttribute(String qName, String value, int flags) throws SAXException" ],
  "variableNames" : [ "m_saxHandler", "m_lexHandler", "m_shouldGenerateNSAttribute", "m_state" ]
}