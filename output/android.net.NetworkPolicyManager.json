{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/net/NetworkPolicyManager.java",
  "packageName" : "android.net",
  "className" : "NetworkPolicyManager",
  "comment" : "\n * Manager for creating and modifying network policy rules.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "POLICY_NONE",
    "type" : "int",
    "comment" : "\n     * No specific network policy, use system default.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "POLICY_REJECT_METERED_BACKGROUND",
    "type" : "int",
    "comment" : "\n     * Reject network usage on metered networks when application in background.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "POLICY_ALLOW_METERED_BACKGROUND",
    "type" : "int",
    "comment" : "\n     * Allow metered network use in the background even when in data usage save mode.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RULE_NONE",
    "type" : "int",
    "comment" : "\n     * No specific rule was set\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RULE_ALLOW_METERED",
    "type" : "int",
    "comment" : "\n     * Allow traffic on metered networks.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RULE_TEMPORARY_ALLOW_METERED",
    "type" : "int",
    "comment" : "\n     * Temporarily allow traffic on metered networks because app is on foreground.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RULE_REJECT_METERED",
    "type" : "int",
    "comment" : "\n     * Reject traffic on metered networks.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RULE_ALLOW_ALL",
    "type" : "int",
    "comment" : "\n     * Network traffic should be allowed on all networks (metered or non-metered), although\n     * metered-network restrictions could still apply.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RULE_REJECT_ALL",
    "type" : "int",
    "comment" : "\n     * Reject traffic on all networks.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "MASK_METERED_NETWORKS",
    "type" : "int",
    "comment" : "\n     * Mask used to get the {@code RULE_xxx_METERED} rules\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "MASK_ALL_NETWORKS",
    "type" : "int",
    "comment" : "\n     * Mask used to get the {@code RULE_xxx_ALL} rules\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FIREWALL_RULE_DEFAULT",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "FIREWALL_CHAIN_NAME_NONE",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "FIREWALL_CHAIN_NAME_DOZABLE",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "FIREWALL_CHAIN_NAME_STANDBY",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "FIREWALL_CHAIN_NAME_POWERSAVE",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "ALLOW_PLATFORM_APP_POLICY",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FOREGROUND_THRESHOLD_STATE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_NETWORK_TEMPLATE",
    "type" : "String",
    "comment" : "\n     * {@link Intent} extra that indicates which {@link NetworkTemplate} rule it\n     * applies to.\n     * @hide\n     ",
    "links" : [ "android.content.Intent", "android.net.NetworkTemplate" ]
  }, {
    "name" : "SUBSCRIPTION_OVERRIDE_UNMETERED",
    "type" : "int",
    "comment" : "\n     * Mask used to check if an override value is marked as unmetered.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SUBSCRIPTION_OVERRIDE_CONGESTED",
    "type" : "int",
    "comment" : "\n     * Mask used to check if an override value is marked as congested.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "INetworkPolicyManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallbackMap",
    "type" : "Map<SubscriptionCallback, SubscriptionCallbackProxy>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static NetworkPolicyManager from(Context context)",
    "returnType" : "NetworkPolicyManager",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setUidPolicy(int uid, int policy)",
    "returnType" : "void",
    "comment" : "\n     * Set policy flags for specific UID.\n     *\n     * @param policy should be {@link #POLICY_NONE} or any combination of {@code POLICY_} flags,\n     *     although it is not validated.\n     * @hide\n     ",
    "links" : [ "#POLICY_NONE" ]
  }, {
    "name" : "public void addUidPolicy(int uid, int policy)",
    "returnType" : "void",
    "comment" : "\n     * Add policy flags for specific UID.\n     *\n     * <p>The given policy bits will be set for the uid.\n     *\n     * @param policy should be {@link #POLICY_NONE} or any combination of {@code POLICY_} flags,\n     *     although it is not validated.\n     * @hide\n     ",
    "links" : [ "#POLICY_NONE" ]
  }, {
    "name" : "public void removeUidPolicy(int uid, int policy)",
    "returnType" : "void",
    "comment" : "\n     * Clear/remove policy flags for specific UID.\n     *\n     * <p>The given policy bits will be set for the uid.\n     *\n     * @param policy should be {@link #POLICY_NONE} or any combination of {@code POLICY_} flags,\n     *     although it is not validated.\n     * @hide\n     ",
    "links" : [ "#POLICY_NONE" ]
  }, {
    "name" : "public int getUidPolicy(int uid)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int[] getUidsWithPolicy(int policy)",
    "returnType" : "int[]",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void registerListener(INetworkPolicyListener listener)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void unregisterListener(INetworkPolicyListener listener)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void registerSubscriptionCallback(@NonNull SubscriptionCallback callback)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void unregisterSubscriptionCallback(@NonNull SubscriptionCallback callback)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setNetworkPolicies(NetworkPolicy[] policies)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public NetworkPolicy[] getNetworkPolicies()",
    "returnType" : "NetworkPolicy[]",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setRestrictBackground(boolean restrictBackground)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean getRestrictBackground()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setSubscriptionOverride(int subId, @SubscriptionOverrideMask int overrideMask, @SubscriptionOverrideMask int overrideValue, long timeoutMillis, @NonNull String callingPackage)",
    "returnType" : "void",
    "comment" : "\n     * Override connections to be temporarily marked as either unmetered or congested,\n     * along with automatic timeouts if desired.\n     *\n     * @param subId the subscriber ID this override applies to.\n     * @param overrideMask the bitmask that specifies which of the overrides is being\n     *            set or cleared.\n     * @param overrideValue the override values to set or clear.\n     * @param timeoutMillis the timeout after which the requested override will\n     *            be automatically cleared, or {@code 0} to leave in the\n     *            requested state until explicitly cleared, or the next reboot,\n     *            whichever happens first\n     * @param callingPackage the name of the package making the call.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSubscriptionPlans(int subId, @NonNull SubscriptionPlan[] plans, @NonNull String callingPackage)",
    "returnType" : "void",
    "comment" : "\n     * Set the subscription plans for a specific subscriber.\n     *\n     * @param subId the subscriber this relationship applies to.\n     * @param plans the list of plans.\n     * @param callingPackage the name of the package making the call\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public SubscriptionPlan[] getSubscriptionPlans(int subId, @NonNull String callingPackage)",
    "returnType" : "SubscriptionPlan[]",
    "comment" : "\n     * Get subscription plans for the given subscription id.\n     *\n     * @param subId the subscriber to get the subscription plans for.\n     * @param callingPackage the name of the package making the call.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void factoryReset(String subscriber)",
    "returnType" : "void",
    "comment" : "\n     * Resets network policy settings back to factory defaults.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Iterator<Pair<ZonedDateTime, ZonedDateTime>> cycleIterator(NetworkPolicy policy)",
    "returnType" : "Iterator<Pair<ZonedDateTime, ZonedDateTime>>",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isUidValidForPolicy(Context context, int uid)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if given UID can have a {@link #setUidPolicy(int, int)} defined,\n     * usually to protect critical system services.\n     * @hide\n     ",
    "links" : [ "#setUidPolicy(int" ]
  }, {
    "name" : "public static String uidRulesToString(int uidRules)",
    "returnType" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String uidPoliciesToString(int uidPolicies)",
    "returnType" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isProcStateAllowedWhileIdleOrPowerSaveMode(int procState)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if {@param procState} is considered foreground and as such will be allowed\n     * to access network when the device is idle or in battery saver mode. Otherwise, false.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isProcStateAllowedWhileOnRestrictBackground(int procState)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if {@param procState} is considered foreground and as such will be allowed\n     * to access network when the device is in data saver mode. Otherwise, false.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String resolveNetworkId(WifiConfiguration config)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static String resolveNetworkId(String ssid)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "variableNames" : [ "POLICY_NONE", "POLICY_REJECT_METERED_BACKGROUND", "POLICY_ALLOW_METERED_BACKGROUND", "RULE_NONE", "RULE_ALLOW_METERED", "RULE_TEMPORARY_ALLOW_METERED", "RULE_REJECT_METERED", "RULE_ALLOW_ALL", "RULE_REJECT_ALL", "MASK_METERED_NETWORKS", "MASK_ALL_NETWORKS", "FIREWALL_RULE_DEFAULT", "FIREWALL_CHAIN_NAME_NONE", "FIREWALL_CHAIN_NAME_DOZABLE", "FIREWALL_CHAIN_NAME_STANDBY", "FIREWALL_CHAIN_NAME_POWERSAVE", "ALLOW_PLATFORM_APP_POLICY", "FOREGROUND_THRESHOLD_STATE", "EXTRA_NETWORK_TEMPLATE", "SUBSCRIPTION_OVERRIDE_UNMETERED", "SUBSCRIPTION_OVERRIDE_CONGESTED", "mContext", "mService", "mCallbackMap" ],
  "methodNames" : [ "public static NetworkPolicyManager from(Context context)", "public void setUidPolicy(int uid, int policy)", "public void addUidPolicy(int uid, int policy)", "public void removeUidPolicy(int uid, int policy)", "public int getUidPolicy(int uid)", "public int[] getUidsWithPolicy(int policy)", "public void registerListener(INetworkPolicyListener listener)", "public void unregisterListener(INetworkPolicyListener listener)", "public void registerSubscriptionCallback(@NonNull SubscriptionCallback callback)", "public void unregisterSubscriptionCallback(@NonNull SubscriptionCallback callback)", "public void setNetworkPolicies(NetworkPolicy[] policies)", "public NetworkPolicy[] getNetworkPolicies()", "public void setRestrictBackground(boolean restrictBackground)", "public boolean getRestrictBackground()", "public void setSubscriptionOverride(int subId, @SubscriptionOverrideMask int overrideMask, @SubscriptionOverrideMask int overrideValue, long timeoutMillis, @NonNull String callingPackage)", "public void setSubscriptionPlans(int subId, @NonNull SubscriptionPlan[] plans, @NonNull String callingPackage)", "public SubscriptionPlan[] getSubscriptionPlans(int subId, @NonNull String callingPackage)", "public void factoryReset(String subscriber)", "public static Iterator<Pair<ZonedDateTime, ZonedDateTime>> cycleIterator(NetworkPolicy policy)", "public static boolean isUidValidForPolicy(Context context, int uid)", "public static String uidRulesToString(int uidRules)", "public static String uidPoliciesToString(int uidPolicies)", "public static boolean isProcStateAllowedWhileIdleOrPowerSaveMode(int procState)", "public static boolean isProcStateAllowedWhileOnRestrictBackground(int procState)", "public static String resolveNetworkId(WifiConfiguration config)", "public static String resolveNetworkId(String ssid)" ]
}