{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/NetworkPolicyManager.java",
  "packageName" : "android.net",
  "className" : "NetworkPolicyManager",
  "comment" : "\n * Manager for creating and modifying network policy rules.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "POLICY_NONE",
    "type" : "int",
    "comment" : "\n     * No specific network policy, use system default.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "POLICY_REJECT_METERED_BACKGROUND",
    "type" : "int",
    "comment" : "\n     * Reject network usage on metered networks when application in background.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "POLICY_ALLOW_METERED_BACKGROUND",
    "type" : "int",
    "comment" : "\n     * Allow metered network use in the background even when in data usage save mode.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RULE_NONE",
    "type" : "int",
    "comment" : "\n     * No specific rule was set\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RULE_ALLOW_METERED",
    "type" : "int",
    "comment" : "\n     * Allow traffic on metered networks.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RULE_TEMPORARY_ALLOW_METERED",
    "type" : "int",
    "comment" : "\n     * Temporarily allow traffic on metered networks because app is on foreground.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RULE_REJECT_METERED",
    "type" : "int",
    "comment" : "\n     * Reject traffic on metered networks.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RULE_ALLOW_ALL",
    "type" : "int",
    "comment" : "\n     * Network traffic should be allowed on all networks (metered or non-metered), although\n     * metered-network restrictions could still apply.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RULE_REJECT_ALL",
    "type" : "int",
    "comment" : "\n     * Reject traffic on all networks.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RULE_REJECT_RESTRICTED_MODE",
    "type" : "int",
    "comment" : "\n     * Reject traffic on all networks for restricted networking mode.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "MASK_METERED_NETWORKS",
    "type" : "int",
    "comment" : "\n     * Mask used to get the {@code RULE_xxx_METERED} rules\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "MASK_ALL_NETWORKS",
    "type" : "int",
    "comment" : "\n     * Mask used to get the {@code RULE_xxx_ALL} rules\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "MASK_RESTRICTED_MODE_NETWORKS",
    "type" : "int",
    "comment" : "\n     * Mask used to get the {@code RULE_xxx_RESTRICTED_MODE} rules\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FIREWALL_RULE_DEFAULT",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "FIREWALL_CHAIN_NAME_NONE",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "FIREWALL_CHAIN_NAME_DOZABLE",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "FIREWALL_CHAIN_NAME_STANDBY",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "FIREWALL_CHAIN_NAME_POWERSAVE",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "FIREWALL_CHAIN_NAME_RESTRICTED",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "FIREWALL_CHAIN_NAME_LOW_POWER_STANDBY",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "FIREWALL_CHAIN_NAME_BACKGROUND",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "FIREWALL_CHAIN_NAME_METERED_ALLOW",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "FIREWALL_CHAIN_NAME_METERED_DENY_USER",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "FIREWALL_CHAIN_NAME_METERED_DENY_ADMIN",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "ALLOW_PLATFORM_APP_POLICY",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FOREGROUND_THRESHOLD_STATE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TOP_THRESHOLD_STATE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "BACKGROUND_THRESHOLD_STATE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_NETWORK_TEMPLATE",
    "type" : "String",
    "comment" : "\n     * {@link Intent} extra that indicates which {@link NetworkTemplate} rule it\n     * applies to.\n     * @hide\n     ",
    "links" : [ "android.content.Intent", "android.net.NetworkTemplate" ]
  }, {
    "name" : "SUBSCRIPTION_OVERRIDE_UNMETERED",
    "type" : "int",
    "comment" : "\n     * Mask used to check if an override value is marked as unmetered.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SUBSCRIPTION_OVERRIDE_CONGESTED",
    "type" : "int",
    "comment" : "\n     * Mask used to check if an override value is marked as congested.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ALLOWED_REASON_NONE",
    "type" : "int",
    "comment" : "\n     * Flag to indicate that app is not exempt from any network restrictions.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ALLOWED_REASON_SYSTEM",
    "type" : "int",
    "comment" : "\n     * Flag to indicate that app is exempt from certain network restrictions because of it being a\n     * system component.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ALLOWED_REASON_FOREGROUND",
    "type" : "int",
    "comment" : "\n     * Flag to indicate that app is exempt from certain network restrictions because of it being\n     * in the foreground.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ALLOWED_REASON_POWER_SAVE_ALLOWLIST",
    "type" : "int",
    "comment" : "\n     * Flag to indicate that app is exempt from certain network restrictions because of it being\n     * in the {@code allow-in-power-save} list.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ALLOWED_REASON_POWER_SAVE_EXCEPT_IDLE_ALLOWLIST",
    "type" : "int",
    "comment" : "\n     * Flag to indicate that app is exempt from certain network restrictions because of it being\n     * in the {@code allow-in-power-save-except-idle} list.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ALLOWED_REASON_RESTRICTED_MODE_PERMISSIONS",
    "type" : "int",
    "comment" : "\n     * Flag to indicate that app is exempt from certain network restrictions because of it holding\n     * certain privileged permissions.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ALLOWED_REASON_TOP",
    "type" : "int",
    "comment" : "\n     * Flag to indicate that app is exempt from certain network restrictions because of it being\n     * in the bound top or top procstate.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ALLOWED_REASON_LOW_POWER_STANDBY_ALLOWLIST",
    "type" : "int",
    "comment" : "\n     * Flag to indicate that app is exempt from low power standby restrictions because of it being\n     * allowlisted.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ALLOWED_REASON_NOT_IN_BACKGROUND",
    "type" : "int",
    "comment" : "\n     * Flag to indicate that the app is exempt from always-on background network restrictions.\n     * Note that this is explicitly different to the flag NOT_FOREGROUND which is used to grant\n     * shared exception to apps from power restrictions like doze, battery saver and app-standby.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ALLOWED_METERED_REASON_USER_EXEMPTED",
    "type" : "int",
    "comment" : "\n     * Flag to indicate that app is exempt from certain metered network restrictions because user\n     * explicitly exempted it.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ALLOWED_METERED_REASON_SYSTEM",
    "type" : "int",
    "comment" : "\n     * Flag to indicate that app is exempt from certain metered network restrictions because of it\n     * being a system component.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ALLOWED_METERED_REASON_FOREGROUND",
    "type" : "int",
    "comment" : "\n     * Flag to indicate that app is exempt from certain metered network restrictions because of it\n     * being in the foreground.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ALLOWED_METERED_REASON_MASK",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "INetworkPolicyManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSubscriptionCallbackMap",
    "type" : "Map<SubscriptionCallback, SubscriptionCallbackProxy>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNetworkPolicyCallbackMap",
    "type" : "Map<NetworkPolicyCallback, NetworkPolicyCallbackProxy>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static NetworkPolicyManager from(Context context)",
    "returnType" : "NetworkPolicyManager",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setUidPolicy(int uid, int policy)",
    "returnType" : "void",
    "comment" : "\n     * Set policy flags for specific UID.\n     *\n     * @param policy should be {@link #POLICY_NONE} or any combination of {@code POLICY_} flags,\n     *     although it is not validated.\n     * @hide\n     ",
    "links" : [ "#POLICY_NONE" ]
  }, {
    "name" : "public void addUidPolicy(int uid, int policy)",
    "returnType" : "void",
    "comment" : "\n     * Add policy flags for specific UID.\n     *\n     * <p>The given policy bits will be set for the uid.\n     *\n     * @param policy should be {@link #POLICY_NONE} or any combination of {@code POLICY_} flags,\n     *     although it is not validated.\n     * @hide\n     ",
    "links" : [ "#POLICY_NONE" ]
  }, {
    "name" : "public void removeUidPolicy(int uid, int policy)",
    "returnType" : "void",
    "comment" : "\n     * Clear/remove policy flags for specific UID.\n     *\n     * <p>The given policy bits will be set for the uid.\n     *\n     * @param policy should be {@link #POLICY_NONE} or any combination of {@code POLICY_} flags,\n     *     although it is not validated.\n     * @hide\n     ",
    "links" : [ "#POLICY_NONE" ]
  }, {
    "name" : "public int getUidPolicy(int uid)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int[] getUidsWithPolicy(int policy)",
    "returnType" : "int[]",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void registerListener(INetworkPolicyListener listener)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void unregisterListener(INetworkPolicyListener listener)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void registerSubscriptionCallback(@NonNull SubscriptionCallback callback)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void unregisterSubscriptionCallback(@NonNull SubscriptionCallback callback)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setNetworkPolicies(NetworkPolicy[] policies)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public NetworkPolicy[] getNetworkPolicies()",
    "returnType" : "NetworkPolicy[]",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setRestrictBackground(boolean restrictBackground)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean getRestrictBackground()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getRestrictBackgroundStatus(int uid)",
    "returnType" : "int",
    "comment" : "\n     * Determines if an UID is subject to metered network restrictions while running in background.\n     *\n     * @param uid The UID whose status needs to be checked.\n     * @return {@link ConnectivityManager#RESTRICT_BACKGROUND_STATUS_DISABLED},\n     *         {@link ConnectivityManager#RESTRICT_BACKGROUND_STATUS_ENABLED},\n     *         or {@link ConnectivityManager#RESTRICT_BACKGROUND_STATUS_WHITELISTED} to denote\n     *         the current status of the UID.\n     * @hide\n     ",
    "links" : [ "android.net.ConnectivityManager#RESTRICT_BACKGROUND_STATUS_DISABLED", "android.net.ConnectivityManager#RESTRICT_BACKGROUND_STATUS_WHITELISTED", "android.net.ConnectivityManager#RESTRICT_BACKGROUND_STATUS_ENABLED" ]
  }, {
    "name" : "public void setSubscriptionOverride(int subId, @SubscriptionOverrideMask int overrideMask, @SubscriptionOverrideMask int overrideValue, @NonNull @Annotation.NetworkType int[] networkTypes, long expirationDurationMillis, @NonNull String callingPackage)",
    "returnType" : "void",
    "comment" : "\n     * Override connections to be temporarily marked as either unmetered or congested,\n     * along with automatic timeouts if desired.\n     *\n     * @param subId the subscriber ID this override applies to.\n     * @param overrideMask the bitmask that specifies which of the overrides is being\n     *            set or cleared.\n     * @param overrideValue the override values to set or clear.\n     * @param networkTypes the network types this override applies to. If no\n     *            network types are specified, override values will be ignored.\n     *            {@see TelephonyManager#getAllNetworkTypes()}\n     * @param expirationDurationMillis the duration after which the requested override\n     *            will be automatically cleared, or {@code 0} to leave in the\n     *            requested state until explicitly cleared, or the next reboot,\n     *            whichever happens first\n     * @param callingPackage the name of the package making the call.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSubscriptionPlans(int subId, @NonNull SubscriptionPlan[] plans, long expirationDurationMillis, @NonNull String callingPackage)",
    "returnType" : "void",
    "comment" : "\n     * Set the subscription plans for a specific subscriber.\n     *\n     * @param subId the subscriber this relationship applies to.\n     * @param plans the list of plans.\n     * @param expirationDurationMillis the duration after which the subscription plans\n     *            will be automatically cleared, or {@code 0} to leave the plans until\n     *            explicitly cleared, or the next reboot, whichever happens first\n     * @param callingPackage the name of the package making the call\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public SubscriptionPlan[] getSubscriptionPlans(int subId, @NonNull String callingPackage)",
    "returnType" : "SubscriptionPlan[]",
    "comment" : "\n     * Get subscription plans for the given subscription id.\n     *\n     * @param subId the subscriber to get the subscription plans for.\n     * @param callingPackage the name of the package making the call.\n     * @return the active {@link SubscriptionPlan}s for the given subscription id, or\n     *         {@code null} if not found.\n     * @hide\n     ",
    "links" : [ "android.telephony.SubscriptionPlan" ]
  }, {
    "name" : "public SubscriptionPlan getSubscriptionPlan(@NonNull NetworkTemplate template)",
    "returnType" : "SubscriptionPlan",
    "comment" : "\n     * Get subscription plan for the given networkTemplate.\n     *\n     * @param template the networkTemplate to get the subscription plan for.\n     * @return the active {@link SubscriptionPlan}s for the given template, or\n     *         {@code null} if not found.\n     * @hide\n     ",
    "links" : [ "android.telephony.SubscriptionPlan" ]
  }, {
    "name" : "public void notifyStatsProviderWarningReached()",
    "returnType" : "void",
    "comment" : "\n     * Notifies that the specified {@link NetworkStatsProvider} has reached its warning threshold\n     * which was set through {@link NetworkStatsProvider#onSetWarningAndLimit(String, long, long)}.\n     *\n     * @hide\n     ",
    "links" : [ "android.net.NetworkStatsProvider", "android.net.NetworkStatsProvider#onSetWarningAndLimit(String" ]
  }, {
    "name" : "public void notifyStatsProviderLimitReached()",
    "returnType" : "void",
    "comment" : "\n     * Notifies that the specified {@link NetworkStatsProvider} has reached its quota\n     * which was set through {@link NetworkStatsProvider#onSetLimit(String, long)} or\n     * {@link NetworkStatsProvider#onSetWarningAndLimit(String, long, long)}.\n     *\n     * @hide\n     ",
    "links" : [ "android.net.NetworkStatsProvider", "android.net.NetworkStatsProvider#onSetLimit(String", "android.net.NetworkStatsProvider#onSetWarningAndLimit(String" ]
  }, {
    "name" : "public void factoryReset(String subscriber)",
    "returnType" : "void",
    "comment" : "\n     * Resets network policy settings back to factory defaults.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isUidNetworkingBlocked(int uid, boolean meteredNetwork)",
    "returnType" : "boolean",
    "comment" : "\n     * Check that networking is blocked for the given uid.\n     *\n     * @param uid The target uid.\n     * @param meteredNetwork True if the network is metered.\n     * @return true if networking is blocked for the given uid according to current networking\n     *         policies.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isUidRestrictedOnMeteredNetworks(int uid)",
    "returnType" : "boolean",
    "comment" : "\n     * Check that the given uid is restricted from doing networking on metered networks.\n     *\n     * @param uid The target uid.\n     * @return true if the given uid is restricted from doing networking on metered networks.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getMultipathPreference(@NonNull Network network)",
    "returnType" : "int",
    "comment" : "\n     * Gets a hint on whether it is desirable to use multipath data transfer on the given network.\n     *\n     * @return One of the ConnectivityManager.MULTIPATH_PREFERENCE_* constants.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Iterator<Pair<ZonedDateTime, ZonedDateTime>> cycleIterator(NetworkPolicy policy)",
    "returnType" : "Iterator<Pair<ZonedDateTime, ZonedDateTime>>",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isUidValidForPolicy(Context context, int uid)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if given UID can have a {@link #setUidPolicy(int, int)} defined,\n     * usually to protect critical system services.\n     * @hide\n     ",
    "links" : [ "#setUidPolicy(int" ]
  }, {
    "name" : "public static String uidRulesToString(int uidRules)",
    "returnType" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String uidPoliciesToString(int uidPolicies)",
    "returnType" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getDefaultProcessNetworkCapabilities(int procState)",
    "returnType" : "int",
    "comment" : "\n     * Returns the default network capabilities\n     * ({@link ActivityManager#PROCESS_CAPABILITY_POWER_RESTRICTED_NETWORK\n     * ActivityManager.PROCESS_CAPABILITY_*}) of the specified process state.\n     * This <b>DOES NOT</b> return all default process capabilities for a proc state.\n     * @hide\n     ",
    "links" : [ "android.app.ActivityManager#PROCESS_CAPABILITY_POWER_RESTRICTED_NETWORKActivityManager.PROCESS_CAPABILITY_" ]
  }, {
    "name" : "public static boolean isProcStateAllowedWhileIdleOrPowerSaveMode(@Nullable UidState uidState)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if {@param procState} is considered foreground and as such will be allowed\n     * to access network when the device is idle or in battery saver mode. Otherwise, false.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isProcStateAllowedWhileIdleOrPowerSaveMode(int procState, @ProcessCapability int capability)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isProcStateAllowedWhileInLowPowerStandby(@Nullable UidState uidState)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isProcStateAllowedNetworkWhileBackground(@Nullable UidState uidState)",
    "returnType" : "boolean",
    "comment" : "\n     * This is currently only used as an implementation detail for\n     * {@link com.android.server.net.NetworkPolicyManagerService}.\n     * Only put here to be together with other isProcStateAllowed* methods.\n     *\n     * @hide\n     ",
    "links" : [ "com.android.server.net.NetworkPolicyManagerService" ]
  }, {
    "name" : "public static boolean isProcStateAllowedWhileOnRestrictBackground(@Nullable UidState uidState)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if {@param procState} is considered foreground and as such will be allowed\n     * to access network when the device is in data saver mode. Otherwise, false.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isProcStateAllowedWhileOnRestrictBackground(int procState, @ProcessCapability int capabilities)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static String resolveNetworkId(@NonNull WifiConfiguration config)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static String resolveNetworkId(String ssid)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static String blockedReasonsToString(int blockedReasons)",
    "returnType" : "String",
    "comment" : "\n     * Returns the {@code string} representation of {@code blockedReasons} argument.\n     *\n     * @param blockedReasons Value indicating the reasons for why the network access of an UID is\n     *                       blocked.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String allowedReasonsToString(int allowedReasons)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void registerNetworkPolicyCallback(@Nullable Executor executor, @NonNull NetworkPolicyCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Register a {@link NetworkPolicyCallback} to listen for changes to network blocked status\n     * of apps.\n     *\n     * Note that when a caller tries to register a new callback, it might replace a previously\n     * registered callback if it is considered equal to the new one, based on the\n     * {@link Object#equals(Object)} check.\n     *\n     * @param executor The {@link Executor} to run the callback on.\n     * @param callback The {@link NetworkPolicyCallback} to be registered.\n     * @hide\n     ",
    "links" : [ "java.util.concurrent.Executor", "#equals(Object)", "NetworkPolicyCallback" ]
  }, {
    "name" : "public void unregisterNetworkPolicyCallback(@NonNull NetworkPolicyCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Unregister a previously registered {@link NetworkPolicyCallback}.\n     *\n     * @param callback The {@link NetworkPolicyCallback} to be unregistered.\n     * @hide\n     ",
    "links" : [ "NetworkPolicyCallback" ]
  }, {
    "name" : "private static void dispatchOnUidBlockedReasonChanged(@Nullable Executor executor, @NonNull NetworkPolicyCallback callback, int uid, int blockedReasons)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static NetworkPolicyManager from(Context context)", "public void setUidPolicy(int uid, int policy)", "public void addUidPolicy(int uid, int policy)", "public void removeUidPolicy(int uid, int policy)", "public int getUidPolicy(int uid)", "public int[] getUidsWithPolicy(int policy)", "public void registerListener(INetworkPolicyListener listener)", "public void unregisterListener(INetworkPolicyListener listener)", "public void registerSubscriptionCallback(@NonNull SubscriptionCallback callback)", "public void unregisterSubscriptionCallback(@NonNull SubscriptionCallback callback)", "public void setNetworkPolicies(NetworkPolicy[] policies)", "public NetworkPolicy[] getNetworkPolicies()", "public void setRestrictBackground(boolean restrictBackground)", "public boolean getRestrictBackground()", "public int getRestrictBackgroundStatus(int uid)", "public void setSubscriptionOverride(int subId, @SubscriptionOverrideMask int overrideMask, @SubscriptionOverrideMask int overrideValue, @NonNull @Annotation.NetworkType int[] networkTypes, long expirationDurationMillis, @NonNull String callingPackage)", "public void setSubscriptionPlans(int subId, @NonNull SubscriptionPlan[] plans, long expirationDurationMillis, @NonNull String callingPackage)", "public SubscriptionPlan[] getSubscriptionPlans(int subId, @NonNull String callingPackage)", "public SubscriptionPlan getSubscriptionPlan(@NonNull NetworkTemplate template)", "public void notifyStatsProviderWarningReached()", "public void notifyStatsProviderLimitReached()", "public void factoryReset(String subscriber)", "public boolean isUidNetworkingBlocked(int uid, boolean meteredNetwork)", "public boolean isUidRestrictedOnMeteredNetworks(int uid)", "public int getMultipathPreference(@NonNull Network network)", "public static Iterator<Pair<ZonedDateTime, ZonedDateTime>> cycleIterator(NetworkPolicy policy)", "public static boolean isUidValidForPolicy(Context context, int uid)", "public static String uidRulesToString(int uidRules)", "public static String uidPoliciesToString(int uidPolicies)", "public static int getDefaultProcessNetworkCapabilities(int procState)", "public static boolean isProcStateAllowedWhileIdleOrPowerSaveMode(@Nullable UidState uidState)", "public static boolean isProcStateAllowedWhileIdleOrPowerSaveMode(int procState, @ProcessCapability int capability)", "public static boolean isProcStateAllowedWhileInLowPowerStandby(@Nullable UidState uidState)", "public static boolean isProcStateAllowedNetworkWhileBackground(@Nullable UidState uidState)", "public static boolean isProcStateAllowedWhileOnRestrictBackground(@Nullable UidState uidState)", "public static boolean isProcStateAllowedWhileOnRestrictBackground(int procState, @ProcessCapability int capabilities)", "public static String resolveNetworkId(@NonNull WifiConfiguration config)", "public static String resolveNetworkId(String ssid)", "public static String blockedReasonsToString(int blockedReasons)", "public static String allowedReasonsToString(int allowedReasons)", "public void registerNetworkPolicyCallback(@Nullable Executor executor, @NonNull NetworkPolicyCallback callback)", "public void unregisterNetworkPolicyCallback(@NonNull NetworkPolicyCallback callback)", "private static void dispatchOnUidBlockedReasonChanged(@Nullable Executor executor, @NonNull NetworkPolicyCallback callback, int uid, int blockedReasons)" ],
  "variableNames" : [ "POLICY_NONE", "POLICY_REJECT_METERED_BACKGROUND", "POLICY_ALLOW_METERED_BACKGROUND", "RULE_NONE", "RULE_ALLOW_METERED", "RULE_TEMPORARY_ALLOW_METERED", "RULE_REJECT_METERED", "RULE_ALLOW_ALL", "RULE_REJECT_ALL", "RULE_REJECT_RESTRICTED_MODE", "MASK_METERED_NETWORKS", "MASK_ALL_NETWORKS", "MASK_RESTRICTED_MODE_NETWORKS", "FIREWALL_RULE_DEFAULT", "FIREWALL_CHAIN_NAME_NONE", "FIREWALL_CHAIN_NAME_DOZABLE", "FIREWALL_CHAIN_NAME_STANDBY", "FIREWALL_CHAIN_NAME_POWERSAVE", "FIREWALL_CHAIN_NAME_RESTRICTED", "FIREWALL_CHAIN_NAME_LOW_POWER_STANDBY", "FIREWALL_CHAIN_NAME_BACKGROUND", "FIREWALL_CHAIN_NAME_METERED_ALLOW", "FIREWALL_CHAIN_NAME_METERED_DENY_USER", "FIREWALL_CHAIN_NAME_METERED_DENY_ADMIN", "ALLOW_PLATFORM_APP_POLICY", "FOREGROUND_THRESHOLD_STATE", "TOP_THRESHOLD_STATE", "BACKGROUND_THRESHOLD_STATE", "EXTRA_NETWORK_TEMPLATE", "SUBSCRIPTION_OVERRIDE_UNMETERED", "SUBSCRIPTION_OVERRIDE_CONGESTED", "ALLOWED_REASON_NONE", "ALLOWED_REASON_SYSTEM", "ALLOWED_REASON_FOREGROUND", "ALLOWED_REASON_POWER_SAVE_ALLOWLIST", "ALLOWED_REASON_POWER_SAVE_EXCEPT_IDLE_ALLOWLIST", "ALLOWED_REASON_RESTRICTED_MODE_PERMISSIONS", "ALLOWED_REASON_TOP", "ALLOWED_REASON_LOW_POWER_STANDBY_ALLOWLIST", "ALLOWED_REASON_NOT_IN_BACKGROUND", "ALLOWED_METERED_REASON_USER_EXEMPTED", "ALLOWED_METERED_REASON_SYSTEM", "ALLOWED_METERED_REASON_FOREGROUND", "ALLOWED_METERED_REASON_MASK", "mContext", "mService", "mSubscriptionCallbackMap", "mNetworkPolicyCallbackMap" ]
}