{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/TcpSocketKeepalive.java",
  "packageName" : "android.net",
  "className" : "TcpSocketKeepalive",
  "comment" : " @hide ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "protected void startImpl(int intervalSec, int flags, Network underpinnedNetwork)",
    "returnType" : "void",
    "comment" : "\n     * Starts keepalives. {@code mSocket} must be a connected TCP socket.\n     *\n     * - The application must not write to or read from the socket after calling this method, until\n     *   onDataReceived, onStopped, or onError are called. If it does, the keepalive will fail\n     *   with {@link #ERROR_SOCKET_NOT_IDLE}, or {@code #ERROR_INVALID_SOCKET} if the socket\n     *   experienced an error (as in poll(2) returned POLLERR or POLLHUP); if this happens, the data\n     *   received from the socket may be invalid, and the socket can't be recovered.\n     * - If the socket has data in the send or receive buffer, then this call will fail with\n     *   {@link #ERROR_SOCKET_NOT_IDLE} and can be retried after the data has been processed.\n     *   An app could ensure this by using an application-layer protocol to receive acknowledgement\n     *   that indicates all data has been delivered to server, e.g. HTTP 200 OK.\n     *   Then the app could go into keepalive mode after reading all remaining data within the\n     *   acknowledgement.\n     ",
    "links" : [ "#ERROR_SOCKET_NOT_IDLE" ]
  }, {
    "name" : "protected void stopImpl()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "protected void startImpl(int intervalSec, int flags, Network underpinnedNetwork)", "protected void stopImpl()" ],
  "variableNames" : [ ]
}