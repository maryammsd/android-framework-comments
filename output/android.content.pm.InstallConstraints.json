{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/content/pm/PackageInstaller.java",
  "packageName" : "android.content.pm",
  "className" : "InstallConstraints",
  "comment" : "\n     * A class to encapsulate constraints for installation.\n     *\n     * When used with {@link #checkInstallConstraints(List, InstallConstraints, Executor, Consumer)}, it\n     * specifies the conditions to check against for the packages in question. This can be used\n     * by app stores to deliver auto updates without disrupting the user experience (referred as\n     * gentle update) - for example, an app store might hold off updates when it find out the\n     * app to update is interacting with the user.\n     *\n     * Use {@link Builder} to create a new instance and call mutator methods to add constraints.\n     * If no mutators were called, default constraints will be generated which implies no\n     * constraints. It is recommended to use preset constraints which are useful in most\n     * cases.\n     *\n     * For the purpose of gentle update, it is recommended to always use {@link #GENTLE_UPDATE}\n     * for the system knows best how to do it. It will also benefits the installer as the\n     * platform evolves and add more constraints to improve the accuracy and efficiency of\n     * gentle update.\n     *\n     * Note the constraints are applied transitively. If app Foo is used by app Bar (via shared\n     * library or bounded service), the constraints will also be applied to Bar.\n     ",
  "links" : [ "Builder", "#checkInstallConstraints(List", "#GENTLE_UPDATE" ],
  "variables" : [ {
    "name" : "GENTLE_UPDATE",
    "type" : "InstallConstraints",
    "comment" : "\n         * Preset constraints suitable for gentle update.\n         ",
    "links" : [ ]
  }, {
    "name" : "mDeviceIdleRequired",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAppNotForegroundRequired",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAppNotInteractingRequired",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAppNotTopVisibleRequired",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNotInCallRequired",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<InstallConstraints>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean isDeviceIdleRequired()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isAppNotForegroundRequired()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isAppNotInteractingRequired()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isAppNotTopVisibleRequired()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isNotInCallRequired()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(@Nullable Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void __metadata()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public boolean isDeviceIdleRequired()", "public boolean isAppNotForegroundRequired()", "public boolean isAppNotInteractingRequired()", "public boolean isAppNotTopVisibleRequired()", "public boolean isNotInCallRequired()", "public boolean equals(@Nullable Object o)", "public int hashCode()", "public void writeToParcel(@NonNull Parcel dest, int flags)", "public int describeContents()", "private void __metadata()" ],
  "variableNames" : [ "GENTLE_UPDATE", "mDeviceIdleRequired", "mAppNotForegroundRequired", "mAppNotInteractingRequired", "mAppNotTopVisibleRequired", "mNotInCallRequired", "CREATOR" ]
}