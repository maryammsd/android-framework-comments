{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/javax/security/auth/Subject.java",
  "packageName" : "javax.security.auth",
  "className" : "Subject",
  "comment" : "\n * <p> A {@code Subject} represents a grouping of related information\n * for a single entity, such as a person.\n * Such information includes the Subject's identities as well as\n * its security-related attributes\n * (passwords and cryptographic keys, for example).\n *\n * <p> Subjects may potentially have multiple identities.\n * Each identity is represented as a {@code Principal}\n * within the {@code Subject}.  Principals simply bind names to a\n * {@code Subject}.  For example, a {@code Subject} that happens\n * to be a person, Alice, might have two Principals:\n * one which binds \"Alice Bar\", the name on her driver license,\n * to the {@code Subject}, and another which binds,\n * \"999-99-9999\", the number on her student identification card,\n * to the {@code Subject}.  Both Principals refer to the same\n * {@code Subject} even though each has a different name.\n *\n * <p> A {@code Subject} may also own security-related attributes,\n * which are referred to as credentials.\n * Sensitive credentials that require special protection, such as\n * private cryptographic keys, are stored within a private credential\n * {@code Set}.  Credentials intended to be shared, such as\n * public key certificates or Kerberos server tickets are stored\n * within a public credential {@code Set}.  Different permissions\n * are required to access and modify the different credential Sets.\n *\n * <p> To retrieve all the Principals associated with a {@code Subject},\n * invoke the {@code getPrincipals} method.  To retrieve\n * all the public or private credentials belonging to a {@code Subject},\n * invoke the {@code getPublicCredentials} method or\n * {@code getPrivateCredentials} method, respectively.\n * To modify the returned {@code Set} of Principals and credentials,\n * use the methods defined in the {@code Set} class.\n * For example:\n * <pre>\n *      Subject subject;\n *      Principal principal;\n *      Object credential;\n *\n *      // add a Principal and credential to the Subject\n *      subject.getPrincipals().add(principal);\n *      subject.getPublicCredentials().add(credential);\n * </pre>\n *\n * <p> This {@code Subject} class implements {@code Serializable}.\n * While the Principals associated with the {@code Subject} are serialized,\n * the credentials associated with the {@code Subject} are not.\n * Note that the {@code java.security.Principal} class\n * does not implement {@code Serializable}.  Therefore all concrete\n * {@code Principal} implementations associated with Subjects\n * must implement {@code Serializable}.\n *\n * @see java.security.Principal\n * @see java.security.DomainCombiner\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "principals",
    "type" : "Set<Principal>",
    "comment" : "\n     * A {@code Set} that provides a view of all of this\n     * Subject's Principals\n     *\n     * <p>\n     *\n     * @serial Each element in this set is a\n     *          {@code java.security.Principal}.\n     *          The set is a {@code Subject.SecureSet}.\n     ",
    "links" : [ ]
  }, {
    "name" : "pubCredentials",
    "type" : "Set<Object>",
    "comment" : "\n     * Sets that provide a view of all of this\n     * Subject's Credentials\n     ",
    "links" : [ ]
  }, {
    "name" : "privCredentials",
    "type" : "Set<Object>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "readOnly",
    "type" : "boolean",
    "comment" : "\n     * Whether this Subject is read-only\n     *\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "PRINCIPAL_SET",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PUB_CREDENTIAL_SET",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PRIV_CREDENTIAL_SET",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NULL_PD_ARRAY",
    "type" : "ProtectionDomain[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setReadOnly()",
    "returnType" : "void",
    "comment" : "\n     * Set this {@code Subject} to be read-only.\n     *\n     * <p> Modifications (additions and removals) to this Subject's\n     * {@code Principal} {@code Set} and\n     * credential Sets will be disallowed.\n     * The {@code destroy} operation on this Subject's credentials will\n     * still be permitted.\n     *\n     * <p> Subsequent attempts to modify the Subject's {@code Principal}\n     * and credential Sets will result in an\n     * {@code IllegalStateException} being thrown.\n     * Also, once a {@code Subject} is read-only,\n     * it can not be reset to being writable again.\n     *\n     * <p>\n     *\n     * @exception SecurityException if the caller does not have permission\n     *          to set this {@code Subject} to be read-only.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isReadOnly()",
    "returnType" : "boolean",
    "comment" : "\n     * Query whether this {@code Subject} is read-only.\n     *\n     * <p>\n     *\n     * @return true if this {@code Subject} is read-only, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Subject getSubject(final AccessControlContext acc)",
    "returnType" : "Subject",
    "comment" : "\n     * Get the {@code Subject} associated with the provided\n     * {@code AccessControlContext}.\n     *\n     * <p> The {@code AccessControlContext} may contain many\n     * Subjects (from nested {@code doAs} calls).\n     * In this situation, the most recent {@code Subject} associated\n     * with the {@code AccessControlContext} is returned.\n     *\n     * <p>\n     *\n     * @param  acc the {@code AccessControlContext} from which to retrieve\n     *          the {@code Subject}.\n     *\n     * @return  the {@code Subject} associated with the provided\n     *          {@code AccessControlContext}, or {@code null}\n     *          if no {@code Subject} is associated\n     *          with the provided {@code AccessControlContext}.\n     *\n     * @exception SecurityException if the caller does not have permission\n     *          to get the {@code Subject}. <p>\n     *\n     * @exception NullPointerException if the provided\n     *          {@code AccessControlContext} is {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static T doAs(final Subject subject, final java.security.PrivilegedAction<T> action)",
    "returnType" : "T",
    "comment" : "\n     * Perform work as a particular {@code Subject}.\n     *\n     * <p> This method first retrieves the current Thread's\n     * {@code AccessControlContext} via\n     * {@code AccessController.getContext},\n     * and then instantiates a new {@code AccessControlContext}\n     * using the retrieved context along with a new\n     * {@code SubjectDomainCombiner} (constructed using\n     * the provided {@code Subject}).\n     * Finally, this method invokes {@code AccessController.doPrivileged},\n     * passing it the provided {@code PrivilegedAction},\n     * as well as the newly constructed {@code AccessControlContext}.\n     *\n     * <p>\n     *\n     * @param subject the {@code Subject} that the specified\n     *                  {@code action} will run as.  This parameter\n     *                  may be {@code null}. <p>\n     *\n     * @param <T> the type of the value returned by the PrivilegedAction's\n     *                  {@code run} method.\n     *\n     * @param action the code to be run as the specified\n     *                  {@code Subject}. <p>\n     *\n     * @return the value returned by the PrivilegedAction's\n     *                  {@code run} method.\n     *\n     * @exception NullPointerException if the {@code PrivilegedAction}\n     *                  is {@code null}. <p>\n     *\n     * @exception SecurityException if the caller does not have permission\n     *                  to invoke this method.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static T doAs(final Subject subject, final java.security.PrivilegedExceptionAction<T> action) throws java.security.PrivilegedActionException",
    "returnType" : "T",
    "comment" : "\n     * Perform work as a particular {@code Subject}.\n     *\n     * <p> This method first retrieves the current Thread's\n     * {@code AccessControlContext} via\n     * {@code AccessController.getContext},\n     * and then instantiates a new {@code AccessControlContext}\n     * using the retrieved context along with a new\n     * {@code SubjectDomainCombiner} (constructed using\n     * the provided {@code Subject}).\n     * Finally, this method invokes {@code AccessController.doPrivileged},\n     * passing it the provided {@code PrivilegedExceptionAction},\n     * as well as the newly constructed {@code AccessControlContext}.\n     *\n     * <p>\n     *\n     * @param subject the {@code Subject} that the specified\n     *                  {@code action} will run as.  This parameter\n     *                  may be {@code null}. <p>\n     *\n     * @param <T> the type of the value returned by the\n     *                  PrivilegedExceptionAction's {@code run} method.\n     *\n     * @param action the code to be run as the specified\n     *                  {@code Subject}. <p>\n     *\n     * @return the value returned by the\n     *                  PrivilegedExceptionAction's {@code run} method.\n     *\n     * @exception PrivilegedActionException if the\n     *                  {@code PrivilegedExceptionAction.run}\n     *                  method throws a checked exception. <p>\n     *\n     * @exception NullPointerException if the specified\n     *                  {@code PrivilegedExceptionAction} is\n     *                  {@code null}. <p>\n     *\n     * @exception SecurityException if the caller does not have permission\n     *                  to invoke this method.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static T doAsPrivileged(final Subject subject, final java.security.PrivilegedAction<T> action, final java.security.AccessControlContext acc)",
    "returnType" : "T",
    "comment" : "\n     * Perform privileged work as a particular {@code Subject}.\n     *\n     * <p> This method behaves exactly as {@code Subject.doAs},\n     * except that instead of retrieving the current Thread's\n     * {@code AccessControlContext}, it uses the provided\n     * {@code AccessControlContext}.  If the provided\n     * {@code AccessControlContext} is {@code null},\n     * this method instantiates a new {@code AccessControlContext}\n     * with an empty collection of ProtectionDomains.\n     *\n     * <p>\n     *\n     * @param subject the {@code Subject} that the specified\n     *                  {@code action} will run as.  This parameter\n     *                  may be {@code null}. <p>\n     *\n     * @param <T> the type of the value returned by the PrivilegedAction's\n     *                  {@code run} method.\n     *\n     * @param action the code to be run as the specified\n     *                  {@code Subject}. <p>\n     *\n     * @param acc the {@code AccessControlContext} to be tied to the\n     *                  specified <i>subject</i> and <i>action</i>. <p>\n     *\n     * @return the value returned by the PrivilegedAction's\n     *                  {@code run} method.\n     *\n     * @exception NullPointerException if the {@code PrivilegedAction}\n     *                  is {@code null}. <p>\n     *\n     * @exception SecurityException if the caller does not have permission\n     *                  to invoke this method.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static T doAsPrivileged(final Subject subject, final java.security.PrivilegedExceptionAction<T> action, final java.security.AccessControlContext acc) throws java.security.PrivilegedActionException",
    "returnType" : "T",
    "comment" : "\n     * Perform privileged work as a particular {@code Subject}.\n     *\n     * <p> This method behaves exactly as {@code Subject.doAs},\n     * except that instead of retrieving the current Thread's\n     * {@code AccessControlContext}, it uses the provided\n     * {@code AccessControlContext}.  If the provided\n     * {@code AccessControlContext} is {@code null},\n     * this method instantiates a new {@code AccessControlContext}\n     * with an empty collection of ProtectionDomains.\n     *\n     * <p>\n     *\n     * @param subject the {@code Subject} that the specified\n     *                  {@code action} will run as.  This parameter\n     *                  may be {@code null}. <p>\n     *\n     * @param <T> the type of the value returned by the\n     *                  PrivilegedExceptionAction's {@code run} method.\n     *\n     * @param action the code to be run as the specified\n     *                  {@code Subject}. <p>\n     *\n     * @param acc the {@code AccessControlContext} to be tied to the\n     *                  specified <i>subject</i> and <i>action</i>. <p>\n     *\n     * @return the value returned by the\n     *                  PrivilegedExceptionAction's {@code run} method.\n     *\n     * @exception PrivilegedActionException if the\n     *                  {@code PrivilegedExceptionAction.run}\n     *                  method throws a checked exception. <p>\n     *\n     * @exception NullPointerException if the specified\n     *                  {@code PrivilegedExceptionAction} is\n     *                  {@code null}. <p>\n     *\n     * @exception SecurityException if the caller does not have permission\n     *                  to invoke this method.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static AccessControlContext createContext(final Subject subject, final AccessControlContext acc)",
    "returnType" : "AccessControlContext",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Set<Principal> getPrincipals()",
    "returnType" : "Set<Principal>",
    "comment" : "\n     * Return the {@code Set} of Principals associated with this\n     * {@code Subject}.  Each {@code Principal} represents\n     * an identity for this {@code Subject}.\n     *\n     * <p> The returned {@code Set} is backed by this Subject's\n     * internal {@code Principal} {@code Set}.  Any modification\n     * to the returned {@code Set} affects the internal\n     * {@code Principal} {@code Set} as well.\n     *\n     * <p>\n     *\n     * @return  The {@code Set} of Principals associated with this\n     *          {@code Subject}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Set<T> getPrincipals(Class<T> c)",
    "returnType" : "Set<T>",
    "comment" : "\n     * Return a {@code Set} of Principals associated with this\n     * {@code Subject} that are instances or subclasses of the specified\n     * {@code Class}.\n     *\n     * <p> The returned {@code Set} is not backed by this Subject's\n     * internal {@code Principal} {@code Set}.  A new\n     * {@code Set} is created and returned for each method invocation.\n     * Modifications to the returned {@code Set}\n     * will not affect the internal {@code Principal} {@code Set}.\n     *\n     * <p>\n     *\n     * @param <T> the type of the class modeled by {@code c}\n     *\n     * @param c the returned {@code Set} of Principals will all be\n     *          instances of this class.\n     *\n     * @return a {@code Set} of Principals that are instances of the\n     *          specified {@code Class}.\n     *\n     * @exception NullPointerException if the specified {@code Class}\n     *                  is {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Set<Object> getPublicCredentials()",
    "returnType" : "Set<Object>",
    "comment" : "\n     * Return the {@code Set} of public credentials held by this\n     * {@code Subject}.\n     *\n     * <p> The returned {@code Set} is backed by this Subject's\n     * internal public Credential {@code Set}.  Any modification\n     * to the returned {@code Set} affects the internal public\n     * Credential {@code Set} as well.\n     *\n     * <p>\n     *\n     * @return  A {@code Set} of public credentials held by this\n     *          {@code Subject}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Set<Object> getPrivateCredentials()",
    "returnType" : "Set<Object>",
    "comment" : "\n     * Return the {@code Set} of private credentials held by this\n     * {@code Subject}.\n     *\n     * <p> The returned {@code Set} is backed by this Subject's\n     * internal private Credential {@code Set}.  Any modification\n     * to the returned {@code Set} affects the internal private\n     * Credential {@code Set} as well.\n     *\n     * <p> A caller requires permissions to access the Credentials\n     * in the returned {@code Set}, or to modify the\n     * {@code Set} itself.  A {@code SecurityException}\n     * is thrown if the caller does not have the proper permissions.\n     *\n     * <p> While iterating through the {@code Set},\n     * a {@code SecurityException} is thrown\n     * if the caller does not have permission to access a\n     * particular Credential.  The {@code Iterator}\n     * is nevertheless advanced to next element in the {@code Set}.\n     *\n     * <p>\n     *\n     * @return  A {@code Set} of private credentials held by this\n     *          {@code Subject}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Set<T> getPublicCredentials(Class<T> c)",
    "returnType" : "Set<T>",
    "comment" : "\n     * Return a {@code Set} of public credentials associated with this\n     * {@code Subject} that are instances or subclasses of the specified\n     * {@code Class}.\n     *\n     * <p> The returned {@code Set} is not backed by this Subject's\n     * internal public Credential {@code Set}.  A new\n     * {@code Set} is created and returned for each method invocation.\n     * Modifications to the returned {@code Set}\n     * will not affect the internal public Credential {@code Set}.\n     *\n     * <p>\n     *\n     * @param <T> the type of the class modeled by {@code c}\n     *\n     * @param c the returned {@code Set} of public credentials will all be\n     *          instances of this class.\n     *\n     * @return a {@code Set} of public credentials that are instances\n     *          of the  specified {@code Class}.\n     *\n     * @exception NullPointerException if the specified {@code Class}\n     *          is {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Set<T> getPrivateCredentials(Class<T> c)",
    "returnType" : "Set<T>",
    "comment" : "\n     * Return a {@code Set} of private credentials associated with this\n     * {@code Subject} that are instances or subclasses of the specified\n     * {@code Class}.\n     *\n     * <p> The caller must have permission to access all of the\n     * requested Credentials, or a {@code SecurityException}\n     * will be thrown.\n     *\n     * <p> The returned {@code Set} is not backed by this Subject's\n     * internal private Credential {@code Set}.  A new\n     * {@code Set} is created and returned for each method invocation.\n     * Modifications to the returned {@code Set}\n     * will not affect the internal private Credential {@code Set}.\n     *\n     * <p>\n     *\n     * @param <T> the type of the class modeled by {@code c}\n     *\n     * @param c the returned {@code Set} of private credentials will all be\n     *          instances of this class.\n     *\n     * @return a {@code Set} of private credentials that are instances\n     *          of the  specified {@code Class}.\n     *\n     * @exception NullPointerException if the specified {@code Class}\n     *          is {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * Compares the specified Object with this {@code Subject}\n     * for equality.  Returns true if the given object is also a Subject\n     * and the two {@code Subject} instances are equivalent.\n     * More formally, two {@code Subject} instances are\n     * equal if their {@code Principal} and {@code Credential}\n     * Sets are equal.\n     *\n     * <p>\n     *\n     * @param o Object to be compared for equality with this\n     *          {@code Subject}.\n     *\n     * @return true if the specified Object is equal to this\n     *          {@code Subject}.\n     *\n     * @exception SecurityException if the caller does not have permission\n     *          to access the private credentials for this {@code Subject},\n     *          or if the caller does not have permission to access the\n     *          private credentials for the provided {@code Subject}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Return the String representation of this {@code Subject}.\n     *\n     * <p>\n     *\n     * @return the String representation of this {@code Subject}.\n     ",
    "links" : [ ]
  }, {
    "name" : " String toString(boolean includePrivateCredentials)",
    "returnType" : "String",
    "comment" : "\n     * package private convenience method to print out the Subject\n     * without firing off a security check when trying to access\n     * the Private Credentials\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Returns a hashcode for this {@code Subject}.\n     *\n     * <p>\n     *\n     * @return a hashcode for this {@code Subject}.\n     *\n     * @exception SecurityException if the caller does not have permission\n     *          to access this Subject's private credentials.\n     ",
    "links" : [ ]
  }, {
    "name" : "private int getCredHashCode(Object o)",
    "returnType" : "int",
    "comment" : "\n     * get a credential's hashcode\n     ",
    "links" : [ ]
  }, {
    "name" : "private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes this object out to a stream (i.e., serializes it).\n     ",
    "links" : [ ]
  }, {
    "name" : "private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException",
    "returnType" : "void",
    "comment" : "\n     * Reads this object from a stream (i.e., deserializes it)\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setReadOnly()", "public boolean isReadOnly()", "public static Subject getSubject(final AccessControlContext acc)", "public static T doAs(final Subject subject, final java.security.PrivilegedAction<T> action)", "public static T doAs(final Subject subject, final java.security.PrivilegedExceptionAction<T> action) throws java.security.PrivilegedActionException", "public static T doAsPrivileged(final Subject subject, final java.security.PrivilegedAction<T> action, final java.security.AccessControlContext acc)", "public static T doAsPrivileged(final Subject subject, final java.security.PrivilegedExceptionAction<T> action, final java.security.AccessControlContext acc) throws java.security.PrivilegedActionException", "private static AccessControlContext createContext(final Subject subject, final AccessControlContext acc)", "public Set<Principal> getPrincipals()", "public Set<T> getPrincipals(Class<T> c)", "public Set<Object> getPublicCredentials()", "public Set<Object> getPrivateCredentials()", "public Set<T> getPublicCredentials(Class<T> c)", "public Set<T> getPrivateCredentials(Class<T> c)", "public boolean equals(Object o)", "public String toString()", " String toString(boolean includePrivateCredentials)", "public int hashCode()", "private int getCredHashCode(Object o)", "private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException", "private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException" ],
  "variableNames" : [ "serialVersionUID", "principals", "pubCredentials", "privCredentials", "readOnly", "PRINCIPAL_SET", "PUB_CREDENTIAL_SET", "PRIV_CREDENTIAL_SET", "NULL_PD_ARRAY" ]
}