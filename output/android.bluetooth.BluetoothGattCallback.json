{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/bluetooth/BluetoothGattCallback.java",
  "packageName" : "android.bluetooth",
  "className" : "BluetoothGattCallback",
  "comment" : " This abstract class is used to implement {@link BluetoothGatt} callbacks. ",
  "links" : [ "android.bluetooth.BluetoothGatt" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public void onPhyUpdate(BluetoothGatt gatt, int txPhy, int rxPhy, int status)",
    "returnType" : "void",
    "comment" : "\n     * Callback triggered as result of {@link BluetoothGatt#setPreferredPhy}, or as a result of\n     * remote device changing the PHY.\n     *\n     * @param gatt GATT client\n     * @param txPhy the transmitter PHY in use. One of {@link BluetoothDevice#PHY_LE_1M}, {@link\n     *     BluetoothDevice#PHY_LE_2M}, and {@link BluetoothDevice#PHY_LE_CODED}.\n     * @param rxPhy the receiver PHY in use. One of {@link BluetoothDevice#PHY_LE_1M}, {@link\n     *     BluetoothDevice#PHY_LE_2M}, and {@link BluetoothDevice#PHY_LE_CODED}.\n     * @param status Status of the PHY update operation. {@link BluetoothGatt#GATT_SUCCESS} if the\n     *     operation succeeds.\n     ",
    "links" : [ "android.bluetooth.BluetoothGatt#setPreferredPhy", "android.bluetooth.BluetoothDevice#PHY_LE_CODED", "android.bluetooth.BluetoothDevice#PHY_LE_2M", "android.bluetooth.BluetoothGatt#GATT_SUCCESS", "android.bluetooth.BluetoothDevice#PHY_LE_1M" ]
  }, {
    "name" : "public void onPhyRead(BluetoothGatt gatt, int txPhy, int rxPhy, int status)",
    "returnType" : "void",
    "comment" : "\n     * Callback triggered as result of {@link BluetoothGatt#readPhy}\n     *\n     * @param gatt GATT client\n     * @param txPhy the transmitter PHY in use. One of {@link BluetoothDevice#PHY_LE_1M}, {@link\n     *     BluetoothDevice#PHY_LE_2M}, and {@link BluetoothDevice#PHY_LE_CODED}.\n     * @param rxPhy the receiver PHY in use. One of {@link BluetoothDevice#PHY_LE_1M}, {@link\n     *     BluetoothDevice#PHY_LE_2M}, and {@link BluetoothDevice#PHY_LE_CODED}.\n     * @param status Status of the PHY read operation. {@link BluetoothGatt#GATT_SUCCESS} if the\n     *     operation succeeds.\n     ",
    "links" : [ "android.bluetooth.BluetoothDevice#PHY_LE_CODED", "android.bluetooth.BluetoothGatt#readPhy", "android.bluetooth.BluetoothDevice#PHY_LE_2M", "android.bluetooth.BluetoothGatt#GATT_SUCCESS", "android.bluetooth.BluetoothDevice#PHY_LE_1M" ]
  }, {
    "name" : "public void onConnectionStateChange(BluetoothGatt gatt, int status, int newState)",
    "returnType" : "void",
    "comment" : "\n     * Callback indicating when GATT client has connected/disconnected to/from a remote GATT server.\n     *\n     * @param gatt GATT client\n     * @param status Status of the connect or disconnect operation. {@link\n     *     BluetoothGatt#GATT_SUCCESS} if the operation succeeds.\n     * @param newState Returns the new connection state. Can be one of {@link\n     *     BluetoothProfile#STATE_DISCONNECTED} or {@link BluetoothProfile#STATE_CONNECTED}\n     ",
    "links" : [ "android.bluetooth.BluetoothProfile#STATE_CONNECTED", "android.bluetooth.BluetoothGatt#GATT_SUCCESS", "android.bluetooth.BluetoothProfile#STATE_DISCONNECTED" ]
  }, {
    "name" : "public void onServicesDiscovered(BluetoothGatt gatt, int status)",
    "returnType" : "void",
    "comment" : "\n     * Callback invoked when the list of remote services, characteristics and descriptors for the\n     * remote device have been updated, ie new services have been discovered.\n     *\n     * @param gatt GATT client invoked {@link BluetoothGatt#discoverServices}\n     * @param status {@link BluetoothGatt#GATT_SUCCESS} if the remote device has been explored\n     *     successfully.\n     ",
    "links" : [ "android.bluetooth.BluetoothGatt#discoverServices", "android.bluetooth.BluetoothGatt#GATT_SUCCESS" ]
  }, {
    "name" : "public void onCharacteristicRead(BluetoothGatt gatt, BluetoothGattCharacteristic characteristic, int status)",
    "returnType" : "void",
    "comment" : "\n     * Callback reporting the result of a characteristic read operation.\n     *\n     * @param gatt GATT client invoked {@link\n     *     BluetoothGatt#readCharacteristic(BluetoothGattCharacteristic)}\n     * @param characteristic Characteristic that was read from the associated remote device.\n     * @param status {@link BluetoothGatt#GATT_SUCCESS} if the read operation was completed\n     *     successfully.\n     * @deprecated Use {@link BluetoothGattCallback#onCharacteristicRead(BluetoothGatt,\n     *     BluetoothGattCharacteristic, byte[], int)} as it is memory safe\n     ",
    "links" : [ "android.bluetooth.BluetoothGatt#readCharacteristic(BluetoothGattCharacteristic)", "android.bluetooth.BluetoothGatt#GATT_SUCCESS", "android.bluetooth.BluetoothGattCallback#onCharacteristicRead(BluetoothGatt" ]
  }, {
    "name" : "public void onCharacteristicRead(@NonNull BluetoothGatt gatt, @NonNull BluetoothGattCharacteristic characteristic, @NonNull byte[] value, int status)",
    "returnType" : "void",
    "comment" : "\n     * Callback reporting the result of a characteristic read operation.\n     *\n     * @param gatt GATT client invoked {@link\n     *     BluetoothGatt#readCharacteristic(BluetoothGattCharacteristic)}\n     * @param characteristic Characteristic that was read from the associated remote device.\n     * @param value the value of the characteristic\n     * @param status {@link BluetoothGatt#GATT_SUCCESS} if the read operation was completed\n     *     successfully.\n     ",
    "links" : [ "android.bluetooth.BluetoothGatt#readCharacteristic(BluetoothGattCharacteristic)", "android.bluetooth.BluetoothGatt#GATT_SUCCESS" ]
  }, {
    "name" : "public void onCharacteristicWrite(BluetoothGatt gatt, BluetoothGattCharacteristic characteristic, int status)",
    "returnType" : "void",
    "comment" : "\n     * Callback indicating the result of a characteristic write operation.\n     *\n     * <p>If this callback is invoked while a reliable write transaction is in progress, the value\n     * of the characteristic represents the value reported by the remote device. An application\n     * should compare this value to the desired value to be written. If the values don't match, the\n     * application must abort the reliable write transaction.\n     *\n     * @param gatt GATT client that invoked {@link\n     *     BluetoothGatt#writeCharacteristic(BluetoothGattCharacteristic, byte[], int)}\n     * @param characteristic Characteristic that was written to the associated remote device.\n     * @param status The result of the write operation {@link BluetoothGatt#GATT_SUCCESS} if the\n     *     operation succeeds.\n     ",
    "links" : [ "android.bluetooth.BluetoothGatt#writeCharacteristic(BluetoothGattCharacteristic", "android.bluetooth.BluetoothGatt#GATT_SUCCESS" ]
  }, {
    "name" : "public void onCharacteristicChanged(BluetoothGatt gatt, BluetoothGattCharacteristic characteristic)",
    "returnType" : "void",
    "comment" : "\n     * Callback triggered as a result of a remote characteristic notification.\n     *\n     * @param gatt GATT client the characteristic is associated with\n     * @param characteristic Characteristic that has been updated as a result of a remote\n     *     notification event.\n     * @deprecated Use {@link BluetoothGattCallback#onCharacteristicChanged(BluetoothGatt,\n     *     BluetoothGattCharacteristic, byte[])} as it is memory safe by providing the\n     *     characteristic value at the time of notification.\n     ",
    "links" : [ "android.bluetooth.BluetoothGattCallback#onCharacteristicChanged(BluetoothGatt" ]
  }, {
    "name" : "public void onCharacteristicChanged(@NonNull BluetoothGatt gatt, @NonNull BluetoothGattCharacteristic characteristic, @NonNull byte[] value)",
    "returnType" : "void",
    "comment" : "\n     * Callback triggered as a result of a remote characteristic notification. Note that the value\n     * within the characteristic object may have changed since receiving the remote characteristic\n     * notification, so check the parameter value for the value at the time of notification.\n     *\n     * @param gatt GATT client the characteristic is associated with\n     * @param characteristic Characteristic that has been updated as a result of a remote\n     *     notification event.\n     * @param value notified characteristic value\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onDescriptorRead(BluetoothGatt gatt, BluetoothGattDescriptor descriptor, int status)",
    "returnType" : "void",
    "comment" : "\n     * Callback reporting the result of a descriptor read operation.\n     *\n     * @param gatt GATT client invoked {@link BluetoothGatt#readDescriptor}\n     * @param descriptor Descriptor that was read from the associated remote device.\n     * @param status {@link BluetoothGatt#GATT_SUCCESS} if the read operation was completed\n     *     successfully\n     * @deprecated Use {@link BluetoothGattCallback#onDescriptorRead(BluetoothGatt,\n     *     BluetoothGattDescriptor, int, byte[])} as it is memory safe by providing the descriptor\n     *     value at the time it was read.\n     ",
    "links" : [ "android.bluetooth.BluetoothGatt#readDescriptor", "android.bluetooth.BluetoothGatt#GATT_SUCCESS", "android.bluetooth.BluetoothGattCallback#onDescriptorRead(BluetoothGatt" ]
  }, {
    "name" : "public void onDescriptorRead(@NonNull BluetoothGatt gatt, @NonNull BluetoothGattDescriptor descriptor, int status, @NonNull byte[] value)",
    "returnType" : "void",
    "comment" : "\n     * Callback reporting the result of a descriptor read operation.\n     *\n     * @param gatt GATT client invoked {@link BluetoothGatt#readDescriptor}\n     * @param descriptor Descriptor that was read from the associated remote device.\n     * @param status {@link BluetoothGatt#GATT_SUCCESS} if the read operation was completed\n     *     successfully\n     * @param value the descriptor value at the time of the read operation\n     ",
    "links" : [ "android.bluetooth.BluetoothGatt#readDescriptor", "android.bluetooth.BluetoothGatt#GATT_SUCCESS" ]
  }, {
    "name" : "public void onDescriptorWrite(BluetoothGatt gatt, BluetoothGattDescriptor descriptor, int status)",
    "returnType" : "void",
    "comment" : "\n     * Callback indicating the result of a descriptor write operation.\n     *\n     * @param gatt GATT client invoked {@link BluetoothGatt#writeDescriptor}\n     * @param descriptor Descriptor that was written to the associated remote device.\n     * @param status The result of the write operation {@link BluetoothGatt#GATT_SUCCESS} if the\n     *     operation succeeds.\n     ",
    "links" : [ "android.bluetooth.BluetoothGatt#writeDescriptor", "android.bluetooth.BluetoothGatt#GATT_SUCCESS" ]
  }, {
    "name" : "public void onReliableWriteCompleted(BluetoothGatt gatt, int status)",
    "returnType" : "void",
    "comment" : "\n     * Callback invoked when a reliable write transaction has been completed.\n     *\n     * @param gatt GATT client invoked {@link BluetoothGatt#executeReliableWrite}\n     * @param status {@link BluetoothGatt#GATT_SUCCESS} if the reliable write transaction was\n     *     executed successfully\n     ",
    "links" : [ "android.bluetooth.BluetoothGatt#GATT_SUCCESS", "android.bluetooth.BluetoothGatt#executeReliableWrite" ]
  }, {
    "name" : "public void onReadRemoteRssi(BluetoothGatt gatt, int rssi, int status)",
    "returnType" : "void",
    "comment" : "\n     * Callback reporting the RSSI for a remote device connection.\n     *\n     * <p>This callback is triggered in response to the {@link BluetoothGatt#readRemoteRssi}\n     * function.\n     *\n     * @param gatt GATT client invoked {@link BluetoothGatt#readRemoteRssi}\n     * @param rssi The RSSI value for the remote device\n     * @param status {@link BluetoothGatt#GATT_SUCCESS} if the RSSI was read successfully\n     ",
    "links" : [ "android.bluetooth.BluetoothGatt#readRemoteRssi", "android.bluetooth.BluetoothGatt#GATT_SUCCESS" ]
  }, {
    "name" : "public void onMtuChanged(BluetoothGatt gatt, int mtu, int status)",
    "returnType" : "void",
    "comment" : "\n     * Callback indicating the MTU for a given device connection has changed.\n     *\n     * <p>This callback is triggered in response to the {@link BluetoothGatt#requestMtu} function,\n     * or in response to a connection event.\n     *\n     * @param gatt GATT client invoked {@link BluetoothGatt#requestMtu}\n     * @param mtu The new MTU size\n     * @param status {@link BluetoothGatt#GATT_SUCCESS} if the MTU has been changed successfully\n     ",
    "links" : [ "android.bluetooth.BluetoothGatt#GATT_SUCCESS", "android.bluetooth.BluetoothGatt#requestMtu" ]
  }, {
    "name" : "public void onConnectionUpdated(BluetoothGatt gatt, int interval, int latency, int timeout, int status)",
    "returnType" : "void",
    "comment" : "\n     * Callback indicating the connection parameters were updated.\n     *\n     * @param gatt GATT client involved\n     * @param interval Connection interval used on this connection, 1.25ms unit. Valid range is from\n     *     6 (7.5ms) to 3200 (4000ms).\n     * @param latency Worker latency for the connection in number of connection events. Valid range\n     *     is from 0 to 499\n     * @param timeout Supervision timeout for this connection, in 10ms unit. Valid range is from 10\n     *     (0.1s) to 3200 (32s)\n     * @param status {@link BluetoothGatt#GATT_SUCCESS} if the connection has been updated\n     *     successfully\n     * @hide\n     ",
    "links" : [ "android.bluetooth.BluetoothGatt#GATT_SUCCESS" ]
  }, {
    "name" : "public void onServiceChanged(@NonNull BluetoothGatt gatt)",
    "returnType" : "void",
    "comment" : "\n     * Callback indicating service changed event is received\n     *\n     * <p>Receiving this event means that the GATT database is out of sync with the remote device.\n     * {@link BluetoothGatt#discoverServices} should be called to re-discover the services.\n     *\n     * @param gatt GATT client involved\n     ",
    "links" : [ "android.bluetooth.BluetoothGatt#discoverServices" ]
  }, {
    "name" : "public void onSubrateChange(BluetoothGatt gatt, int subrateFactor, int latency, int contNum, int timeout, int status)",
    "returnType" : "void",
    "comment" : "\n     * Callback indicating LE connection's subrate parameters have changed.\n     *\n     * @param gatt GATT client involved\n     * @param subrateFactor for the LE connection.\n     * @param latency Worker latency for the connection in number of connection events. Valid range\n     *     is from 0 to 499\n     * @param contNum Valid range is from 0 to 499.\n     * @param timeout Supervision timeout for this connection, in 10ms unit. Valid range is from 10\n     *     (0.1s) to 3200 (32s)\n     * @param status {@link BluetoothGatt#GATT_SUCCESS} if LE connection subrating has been changed\n     *     successfully.\n     * @hide\n     ",
    "links" : [ "android.bluetooth.BluetoothGatt#GATT_SUCCESS" ]
  } ],
  "methodNames" : [ "public void onPhyUpdate(BluetoothGatt gatt, int txPhy, int rxPhy, int status)", "public void onPhyRead(BluetoothGatt gatt, int txPhy, int rxPhy, int status)", "public void onConnectionStateChange(BluetoothGatt gatt, int status, int newState)", "public void onServicesDiscovered(BluetoothGatt gatt, int status)", "public void onCharacteristicRead(BluetoothGatt gatt, BluetoothGattCharacteristic characteristic, int status)", "public void onCharacteristicRead(@NonNull BluetoothGatt gatt, @NonNull BluetoothGattCharacteristic characteristic, @NonNull byte[] value, int status)", "public void onCharacteristicWrite(BluetoothGatt gatt, BluetoothGattCharacteristic characteristic, int status)", "public void onCharacteristicChanged(BluetoothGatt gatt, BluetoothGattCharacteristic characteristic)", "public void onCharacteristicChanged(@NonNull BluetoothGatt gatt, @NonNull BluetoothGattCharacteristic characteristic, @NonNull byte[] value)", "public void onDescriptorRead(BluetoothGatt gatt, BluetoothGattDescriptor descriptor, int status)", "public void onDescriptorRead(@NonNull BluetoothGatt gatt, @NonNull BluetoothGattDescriptor descriptor, int status, @NonNull byte[] value)", "public void onDescriptorWrite(BluetoothGatt gatt, BluetoothGattDescriptor descriptor, int status)", "public void onReliableWriteCompleted(BluetoothGatt gatt, int status)", "public void onReadRemoteRssi(BluetoothGatt gatt, int rssi, int status)", "public void onMtuChanged(BluetoothGatt gatt, int mtu, int status)", "public void onConnectionUpdated(BluetoothGatt gatt, int interval, int latency, int timeout, int status)", "public void onServiceChanged(@NonNull BluetoothGatt gatt)", "public void onSubrateChange(BluetoothGatt gatt, int subrateFactor, int latency, int contNum, int timeout, int status)" ],
  "variableNames" : [ ]
}