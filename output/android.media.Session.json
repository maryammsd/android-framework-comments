{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/media/MediaCas.java",
  "packageName" : "android.media",
  "className" : "Session",
  "comment" : "\n     * Class for an open session with the CA system.\n     ",
  "variables" : [ {
    "name" : "mSessionId",
    "type" : "ArrayList<Byte>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsClosed",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void validateSessionInternalStates()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "\n         * Query if an object equal current Session object.\n         *\n         * @param obj an object to compare to current Session object.\n         *\n         * @return Whether input object equal current Session object.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setPrivateData(@NonNull byte[] data) throws MediaCasException",
    "returnType" : "void",
    "comment" : "\n         * Set the private data for a session.\n         *\n         * @param data byte array of the private data.\n         *\n         * @throws IllegalStateException if the MediaCas instance is not valid.\n         * @throws MediaCasException for CAS-specific errors.\n         * @throws MediaCasStateException for CAS-specific state exceptions.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void processEcm(@NonNull byte[] data, int offset, int length) throws MediaCasException",
    "returnType" : "void",
    "comment" : "\n         * Send a received ECM packet to the specified session of the CA system.\n         *\n         * @param data byte array of the ECM data.\n         * @param offset position within data where the ECM data begins.\n         * @param length length of the data (starting from offset).\n         *\n         * @throws IllegalStateException if the MediaCas instance is not valid.\n         * @throws MediaCasException for CAS-specific errors.\n         * @throws MediaCasStateException for CAS-specific state exceptions.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void processEcm(@NonNull byte[] data) throws MediaCasException",
    "returnType" : "void",
    "comment" : "\n         * Send a received ECM packet to the specified session of the CA system.\n         * This is similar to {@link Session#processEcm(byte[], int, int)}\n         * except that the entire byte array is sent.\n         *\n         * @param data byte array of the ECM data.\n         *\n         * @throws IllegalStateException if the MediaCas instance is not valid.\n         * @throws MediaCasException for CAS-specific errors.\n         * @throws MediaCasStateException for CAS-specific state exceptions.\n         ",
    "links" : [ "#processEcm(byte" ]
  }, {
    "name" : "public void sendSessionEvent(int event, int arg, @Nullable byte[] data) throws MediaCasException",
    "returnType" : "void",
    "comment" : "\n         * Send a session event to a CA system. The format of the event is\n         * scheme-specific and is opaque to the framework.\n         *\n         * @param event an integer denoting a scheme-specific event to be sent.\n         * @param arg a scheme-specific integer argument for the event.\n         * @param data a byte array containing scheme-specific data for the event.\n         *\n         * @throws IllegalStateException if the MediaCas instance is not valid.\n         * @throws MediaCasException for CAS-specific errors.\n         * @throws MediaCasStateException for CAS-specific state exceptions.\n         ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getSessionId()",
    "returnType" : "byte[]",
    "comment" : "\n         * Get Session Id.\n         *\n         * @return session Id of the session.\n         *\n         * @throws IllegalStateException if the MediaCas instance is not valid.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "\n         * Close the session.\n         *\n         * @throws IllegalStateException if the MediaCas instance is not valid.\n         * @throws MediaCasStateException for CAS-specific state exceptions.\n         ",
    "links" : [ ]
  } ],
  "variableNames" : [ "mSessionId", "mIsClosed" ],
  "methodNames" : [ "private void validateSessionInternalStates()", "public boolean equals(Object obj)", "public void setPrivateData(@NonNull byte[] data) throws MediaCasException", "public void processEcm(@NonNull byte[] data, int offset, int length) throws MediaCasException", "public void processEcm(@NonNull byte[] data) throws MediaCasException", "public void sendSessionEvent(int event, int arg, @Nullable byte[] data) throws MediaCasException", "public byte[] getSessionId()", "public void close()" ]
}