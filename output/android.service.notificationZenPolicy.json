{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/service/notification/ZenPolicy.java",
  "packageName" : "android.service.notification",
  "className" : "ZenPolicy",
  "comment" : "\n * ZenPolicy determines whether to allow certain notifications and their corresponding sounds to\n * play when a device is in Do Not Disturb mode.\n * ZenPolicy also dictates the visual effects of notifications that are intercepted when\n * a device is in Do Not Disturb mode.\n ",
  "variables" : [ {
    "name" : "mPriorityCategories",
    "type" : "ArrayList<Integer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVisualEffects",
    "type" : "ArrayList<Integer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPriorityMessages",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPriorityCalls",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConversationSenders",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PRIORITY_CATEGORY_REMINDERS",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "PRIORITY_CATEGORY_EVENTS",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "PRIORITY_CATEGORY_MESSAGES",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "PRIORITY_CATEGORY_CALLS",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "PRIORITY_CATEGORY_REPEAT_CALLERS",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "PRIORITY_CATEGORY_ALARMS",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "PRIORITY_CATEGORY_MEDIA",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "PRIORITY_CATEGORY_SYSTEM",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "PRIORITY_CATEGORY_CONVERSATIONS",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "VISUAL_EFFECT_FULL_SCREEN_INTENT",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "VISUAL_EFFECT_LIGHTS",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "VISUAL_EFFECT_PEEK",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "VISUAL_EFFECT_STATUS_BAR",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "VISUAL_EFFECT_BADGE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "VISUAL_EFFECT_AMBIENT",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "VISUAL_EFFECT_NOTIFICATION_LIST",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "PEOPLE_TYPE_UNSET",
    "type" : "int",
    "comment" : "\n     * Used to indicate no preference for the type of people that can bypass dnd for either\n     * calls or messages.\n     ",
    "links" : [ ]
  }, {
    "name" : "PEOPLE_TYPE_ANYONE",
    "type" : "int",
    "comment" : "\n     * Used to indicate all calls or messages can bypass dnd.\n     ",
    "links" : [ ]
  }, {
    "name" : "PEOPLE_TYPE_CONTACTS",
    "type" : "int",
    "comment" : "\n     * Used to indicate calls or messages from contacts can bypass dnd.\n     ",
    "links" : [ ]
  }, {
    "name" : "PEOPLE_TYPE_STARRED",
    "type" : "int",
    "comment" : "\n     * Used to indicate calls or messages from starred contacts can bypass dnd.\n     ",
    "links" : [ ]
  }, {
    "name" : "PEOPLE_TYPE_NONE",
    "type" : "int",
    "comment" : "\n     * Used to indicate no calls or messages can bypass dnd.\n     ",
    "links" : [ ]
  }, {
    "name" : "CONVERSATION_SENDERS_UNSET",
    "type" : "int",
    "comment" : "\n     * Used to indicate no preference for the type of conversations that can bypass dnd.\n     ",
    "links" : [ ]
  }, {
    "name" : "CONVERSATION_SENDERS_ANYONE",
    "type" : "int",
    "comment" : "\n     * Used to indicate all conversations can bypass dnd.\n     ",
    "links" : [ ]
  }, {
    "name" : "CONVERSATION_SENDERS_IMPORTANT",
    "type" : "int",
    "comment" : "\n     * Used to indicate important conversations can bypass dnd.\n     ",
    "links" : [ ]
  }, {
    "name" : "CONVERSATION_SENDERS_NONE",
    "type" : "int",
    "comment" : "\n     * Used to indicate no conversations can bypass dnd.\n     ",
    "links" : [ ]
  }, {
    "name" : "STATE_UNSET",
    "type" : "int",
    "comment" : "\n     * Indicates no preference for whether a type of sound or visual effect is or isn't allowed\n     * to play/show when DND is active.  Will default to the current set policy.\n     ",
    "links" : [ ]
  }, {
    "name" : "STATE_ALLOW",
    "type" : "int",
    "comment" : "\n     * Indicates a type of sound or visual effect is allowed to play/show when DND is active.\n     ",
    "links" : [ ]
  }, {
    "name" : "STATE_DISALLOW",
    "type" : "int",
    "comment" : "\n     * Indicates a type of sound or visual effect is not allowed to play/show when DND is active.\n     ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<ZenPolicy>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getPriorityConversationSenders()",
    "returnType" : "int",
    "comment" : "\n     * Conversation type that can bypass DND.\n     * @return {@link #CONVERSATION_SENDERS_UNSET}, {@link #CONVERSATION_SENDERS_ANYONE},\n     * {@link #CONVERSATION_SENDERS_IMPORTANT}, {@link #CONVERSATION_SENDERS_NONE}.\n     ",
    "links" : [ "#CONVERSATION_SENDERS_UNSET", "#CONVERSATION_SENDERS_ANYONE", "#CONVERSATION_SENDERS_IMPORTANT", "#CONVERSATION_SENDERS_NONE" ]
  }, {
    "name" : "public int getPriorityMessageSenders()",
    "returnType" : "int",
    "comment" : "\n     * Message senders that can bypass DND.\n     * @return {@link #PEOPLE_TYPE_UNSET}, {@link #PEOPLE_TYPE_ANYONE},\n     * {@link #PEOPLE_TYPE_CONTACTS}, {@link #PEOPLE_TYPE_STARRED} or {@link #PEOPLE_TYPE_NONE}\n     ",
    "links" : [ "#PEOPLE_TYPE_UNSET", "#PEOPLE_TYPE_ANYONE", "#PEOPLE_TYPE_CONTACTS", "#PEOPLE_TYPE_STARRED", "#PEOPLE_TYPE_NONE" ]
  }, {
    "name" : "public int getPriorityCallSenders()",
    "returnType" : "int",
    "comment" : "\n     * Callers that can bypass DND.\n     * @return {@link #PEOPLE_TYPE_UNSET}, {@link #PEOPLE_TYPE_ANYONE},\n     * {@link #PEOPLE_TYPE_CONTACTS}, {@link #PEOPLE_TYPE_STARRED} or {@link #PEOPLE_TYPE_NONE}\n     ",
    "links" : [ "#PEOPLE_TYPE_UNSET", "#PEOPLE_TYPE_ANYONE", "#PEOPLE_TYPE_CONTACTS", "#PEOPLE_TYPE_STARRED", "#PEOPLE_TYPE_NONE" ]
  }, {
    "name" : "public int getPriorityCategoryConversations()",
    "returnType" : "int",
    "comment" : "\n     * Whether this policy wants to allow conversation notifications\n     * (see {@link NotificationChannel#getConversationId()}) to play sounds and visually appear\n     * or to intercept them when DND is active.\n     * @return {@link #STATE_UNSET}, {@link #STATE_ALLOW} or {@link #STATE_DISALLOW}\n     ",
    "links" : [ "NotificationChannel#getConversationId", "#STATE_UNSET", "#STATE_ALLOW", "#STATE_DISALLOW" ]
  }, {
    "name" : "public int getPriorityCategoryReminders()",
    "returnType" : "int",
    "comment" : "\n     * Whether this policy wants to allow notifications with category\n     * {@link Notification#CATEGORY_REMINDER} to play sounds and visually appear\n     * or to intercept them when DND is active.\n     * @return {@link #STATE_UNSET}, {@link #STATE_ALLOW} or {@link #STATE_DISALLOW}\n     ",
    "links" : [ "Notification#CATEGORY_REMINDER", "#STATE_UNSET", "#STATE_ALLOW", "#STATE_DISALLOW" ]
  }, {
    "name" : "public int getPriorityCategoryEvents()",
    "returnType" : "int",
    "comment" : "\n     * Whether this policy wants to allow notifications with category\n     * {@link Notification#CATEGORY_EVENT} to play sounds and visually appear\n     * or to intercept them when DND is active.\n     * @return {@link #STATE_UNSET}, {@link #STATE_ALLOW} or {@link #STATE_DISALLOW}\n     ",
    "links" : [ "Notification#CATEGORY_EVENT", "#STATE_UNSET", "#STATE_ALLOW", "#STATE_DISALLOW" ]
  }, {
    "name" : "public int getPriorityCategoryMessages()",
    "returnType" : "int",
    "comment" : "\n     * Whether this policy wants to allow notifications with category\n     * {@link Notification#CATEGORY_MESSAGE} to play sounds and visually appear\n     * or to intercept them when DND is active.  Types of message senders that are allowed\n     * are specified by {@link #getPriorityMessageSenders}.\n     * @return {@link #STATE_UNSET}, {@link #STATE_ALLOW} or {@link #STATE_DISALLOW}\n     ",
    "links" : [ "Notification#CATEGORY_MESSAGE", "#getPriorityMessageSenders", "#STATE_UNSET", "#STATE_ALLOW", "#STATE_DISALLOW" ]
  }, {
    "name" : "public int getPriorityCategoryCalls()",
    "returnType" : "int",
    "comment" : "\n     * Whether this policy wants to allow notifications with category\n     * {@link Notification#CATEGORY_CALL} to play sounds and visually appear\n     * or to intercept them when DND is active.  Types of callers that are allowed\n     * are specified by {@link #getPriorityCallSenders()}.\n     * @return {@link #STATE_UNSET}, {@link #STATE_ALLOW} or {@link #STATE_DISALLOW}\n     ",
    "links" : [ "Notification#CATEGORY_CALL", "#getPriorityCallSenders", "#STATE_UNSET", "#STATE_ALLOW", "#STATE_DISALLOW" ]
  }, {
    "name" : "public int getPriorityCategoryRepeatCallers()",
    "returnType" : "int",
    "comment" : "\n     * Whether this policy wants to allow repeat callers (notifications with category\n     * {@link Notification#CATEGORY_CALL} that have recently called) to play sounds and\n     * visually appear or to intercept them when DND is active.\n     * @return {@link #STATE_UNSET}, {@link #STATE_ALLOW} or {@link #STATE_DISALLOW}\n     ",
    "links" : [ "Notification#CATEGORY_CALL", "#STATE_UNSET", "#STATE_ALLOW", "#STATE_DISALLOW" ]
  }, {
    "name" : "public int getPriorityCategoryAlarms()",
    "returnType" : "int",
    "comment" : "\n     * Whether this policy wants to allow notifications with category\n     * {@link Notification#CATEGORY_ALARM} to play sounds and visually appear\n     * or to intercept them when DND is active.\n     * When alarms are {@link #STATE_DISALLOW disallowed}, the alarm stream will be muted when DND\n     * is active.\n     * @return {@link #STATE_UNSET}, {@link #STATE_ALLOW} or {@link #STATE_DISALLOW}\n     ",
    "links" : [ "Notification#CATEGORY_ALARM", "#STATE_DISALLOW", "#STATE_UNSET", "#STATE_ALLOW", "#STATE_DISALLOW" ]
  }, {
    "name" : "public int getPriorityCategoryMedia()",
    "returnType" : "int",
    "comment" : "\n     * Whether this policy wants to allow media notifications to play sounds and visually appear\n     * or to intercept them when DND is active.\n     * When media is {@link #STATE_DISALLOW disallowed}, the media stream will be muted when DND is\n     * active.\n     * @return {@link #STATE_UNSET}, {@link #STATE_ALLOW} or {@link #STATE_DISALLOW}\n     ",
    "links" : [ "#STATE_DISALLOW", "#STATE_UNSET", "#STATE_ALLOW", "#STATE_DISALLOW" ]
  }, {
    "name" : "public int getPriorityCategorySystem()",
    "returnType" : "int",
    "comment" : "\n     * Whether this policy wants to allow system sounds when DND is active.\n     * When system is {@link #STATE_DISALLOW}, the system stream will be muted when DND is active.\n     * @return {@link #STATE_UNSET}, {@link #STATE_ALLOW} or {@link #STATE_DISALLOW}\n     ",
    "links" : [ "#STATE_DISALLOW", "#STATE_UNSET", "#STATE_ALLOW", "#STATE_DISALLOW" ]
  }, {
    "name" : "public int getVisualEffectFullScreenIntent()",
    "returnType" : "int",
    "comment" : "\n     * Whether this policy allows {@link Notification#fullScreenIntent full screen intents} from\n     * notifications intercepted by DND.\n     ",
    "links" : [ "Notification#fullScreenIntent" ]
  }, {
    "name" : "public int getVisualEffectLights()",
    "returnType" : "int",
    "comment" : "\n     * Whether this policy allows {@link NotificationChannel#shouldShowLights() notification\n     * lights} from notifications intercepted by DND.\n     ",
    "links" : [ "NotificationChannel#shouldShowLights" ]
  }, {
    "name" : "public int getVisualEffectPeek()",
    "returnType" : "int",
    "comment" : "\n     * Whether this policy allows peeking from notifications intercepted by DND.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getVisualEffectStatusBar()",
    "returnType" : "int",
    "comment" : "\n     * Whether this policy allows notifications intercepted by DND from appearing in the status bar\n     * on devices that support status bars.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getVisualEffectBadge()",
    "returnType" : "int",
    "comment" : "\n     * Whether this policy allows {@link NotificationChannel#canShowBadge() badges} from\n     * notifications intercepted by DND on devices that support badging.\n     ",
    "links" : [ "NotificationChannel#canShowBadge" ]
  }, {
    "name" : "public int getVisualEffectAmbient()",
    "returnType" : "int",
    "comment" : "\n     * Whether this policy allows notifications intercepted by DND from appearing on ambient\n     * displays on devices that support ambient display.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getVisualEffectNotificationList()",
    "returnType" : "int",
    "comment" : "\n     * Whether this policy allows notifications intercepted by DND from appearing in notification\n     * list views like the notification shade or lockscreen on devices that support those\n     * views.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean shouldHideAllVisualEffects()",
    "returnType" : "boolean",
    "comment" : "\n     * Whether this policy hides all visual effects\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean shouldShowAllVisualEffects()",
    "returnType" : "boolean",
    "comment" : "\n     * Whether this policy shows all visual effects\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String priorityCategoriesToString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String visualEffectsToString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String indexToVisualEffect(@VisualEffect int visualEffectIndex)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String indexToCategory(@PriorityCategory int categoryIndex)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String stateToString(@State int state)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String peopleTypeToString(@PeopleType int peopleType)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String conversationTypeToString(@ConversationSenders int conversationType)",
    "returnType" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getZenPolicyPriorityCategoryState(@PriorityCategory int category)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getZenPolicyVisualEffectState(@VisualEffect int effect)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isCategoryAllowed(@PriorityCategory int category, boolean defaultVal)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isVisualEffectAllowed(@VisualEffect int effect, boolean defaultVal)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void apply(ZenPolicy policyToApply)",
    "returnType" : "void",
    "comment" : "\n     * Applies another policy on top of this policy\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void dumpDebug(ProtoOutputStream proto, long fieldId)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] toProto()",
    "returnType" : "byte[]",
    "comment" : "\n     * Converts a policy to a statsd proto.\n     * @hides\n     ",
    "links" : [ ]
  }, {
    "name" : "public ZenPolicy copy()",
    "returnType" : "ZenPolicy",
    "comment" : "\n     * Makes deep copy of this ZenPolicy.\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "mPriorityCategories", "mVisualEffects", "mPriorityMessages", "mPriorityCalls", "mConversationSenders", "PRIORITY_CATEGORY_REMINDERS", "PRIORITY_CATEGORY_EVENTS", "PRIORITY_CATEGORY_MESSAGES", "PRIORITY_CATEGORY_CALLS", "PRIORITY_CATEGORY_REPEAT_CALLERS", "PRIORITY_CATEGORY_ALARMS", "PRIORITY_CATEGORY_MEDIA", "PRIORITY_CATEGORY_SYSTEM", "PRIORITY_CATEGORY_CONVERSATIONS", "VISUAL_EFFECT_FULL_SCREEN_INTENT", "VISUAL_EFFECT_LIGHTS", "VISUAL_EFFECT_PEEK", "VISUAL_EFFECT_STATUS_BAR", "VISUAL_EFFECT_BADGE", "VISUAL_EFFECT_AMBIENT", "VISUAL_EFFECT_NOTIFICATION_LIST", "PEOPLE_TYPE_UNSET", "PEOPLE_TYPE_ANYONE", "PEOPLE_TYPE_CONTACTS", "PEOPLE_TYPE_STARRED", "PEOPLE_TYPE_NONE", "CONVERSATION_SENDERS_UNSET", "CONVERSATION_SENDERS_ANYONE", "CONVERSATION_SENDERS_IMPORTANT", "CONVERSATION_SENDERS_NONE", "STATE_UNSET", "STATE_ALLOW", "STATE_DISALLOW", "CREATOR" ],
  "methodNames" : [ "public int getPriorityConversationSenders()", "public int getPriorityMessageSenders()", "public int getPriorityCallSenders()", "public int getPriorityCategoryConversations()", "public int getPriorityCategoryReminders()", "public int getPriorityCategoryEvents()", "public int getPriorityCategoryMessages()", "public int getPriorityCategoryCalls()", "public int getPriorityCategoryRepeatCallers()", "public int getPriorityCategoryAlarms()", "public int getPriorityCategoryMedia()", "public int getPriorityCategorySystem()", "public int getVisualEffectFullScreenIntent()", "public int getVisualEffectLights()", "public int getVisualEffectPeek()", "public int getVisualEffectStatusBar()", "public int getVisualEffectBadge()", "public int getVisualEffectAmbient()", "public int getVisualEffectNotificationList()", "public boolean shouldHideAllVisualEffects()", "public boolean shouldShowAllVisualEffects()", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)", "public String toString()", "private String priorityCategoriesToString()", "private String visualEffectsToString()", "private String indexToVisualEffect(@VisualEffect int visualEffectIndex)", "private String indexToCategory(@PriorityCategory int categoryIndex)", "private String stateToString(@State int state)", "private String peopleTypeToString(@PeopleType int peopleType)", "public static String conversationTypeToString(@ConversationSenders int conversationType)", "public boolean equals(Object o)", "public int hashCode()", "private int getZenPolicyPriorityCategoryState(@PriorityCategory int category)", "private int getZenPolicyVisualEffectState(@VisualEffect int effect)", "public boolean isCategoryAllowed(@PriorityCategory int category, boolean defaultVal)", "public boolean isVisualEffectAllowed(@VisualEffect int effect, boolean defaultVal)", "public void apply(ZenPolicy policyToApply)", "public void dumpDebug(ProtoOutputStream proto, long fieldId)", "public byte[] toProto()", "public ZenPolicy copy()" ]
}