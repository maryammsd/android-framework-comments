{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/stream/ReferencePipeline.java",
  "packageName" : "java.util.stream",
  "className" : "ReferencePipeline",
  "comment" : " Android-changed: Made public for CTS tests only.",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public final StreamShape getOutputShape()",
    "returnType" : "StreamShape",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final Node<P_OUT> evaluateToNode(PipelineHelper<P_OUT> helper, Spliterator<P_IN> spliterator, boolean flattenTree, IntFunction<P_OUT[]> generator)",
    "returnType" : "Node<P_OUT>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final Spliterator<P_OUT> wrap(PipelineHelper<P_OUT> ph, Supplier<Spliterator<P_IN>> supplier, boolean isParallel)",
    "returnType" : "Spliterator<P_OUT>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final Spliterator<P_OUT> lazySpliterator(Supplier<? extends Spliterator<P_OUT>> supplier)",
    "returnType" : "Spliterator<P_OUT>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final boolean forEachWithCancel(Spliterator<P_OUT> spliterator, Sink<P_OUT> sink)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final Node.Builder<P_OUT> makeNodeBuilder(long exactSizeIfKnown, IntFunction<P_OUT[]> generator)",
    "returnType" : "Node.Builder<P_OUT>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final Iterator<P_OUT> iterator()",
    "returnType" : "Iterator<P_OUT>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Stream<P_OUT> unordered()",
    "returnType" : "Stream<P_OUT>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final Stream<P_OUT> filter(Predicate<? super P_OUT> predicate)",
    "returnType" : "Stream<P_OUT>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final Stream<R> map(Function<? super P_OUT, ? extends R> mapper)",
    "returnType" : "Stream<R>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final IntStream mapToInt(ToIntFunction<? super P_OUT> mapper)",
    "returnType" : "IntStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final LongStream mapToLong(ToLongFunction<? super P_OUT> mapper)",
    "returnType" : "LongStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final DoubleStream mapToDouble(ToDoubleFunction<? super P_OUT> mapper)",
    "returnType" : "DoubleStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final Stream<R> flatMap(Function<? super P_OUT, ? extends Stream<? extends R>> mapper)",
    "returnType" : "Stream<R>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final IntStream flatMapToInt(Function<? super P_OUT, ? extends IntStream> mapper)",
    "returnType" : "IntStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final DoubleStream flatMapToDouble(Function<? super P_OUT, ? extends DoubleStream> mapper)",
    "returnType" : "DoubleStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final LongStream flatMapToLong(Function<? super P_OUT, ? extends LongStream> mapper)",
    "returnType" : "LongStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final Stream<R> mapMulti(BiConsumer<? super P_OUT, ? super Consumer<R>> mapper)",
    "returnType" : "Stream<R>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final IntStream mapMultiToInt(BiConsumer<? super P_OUT, ? super IntConsumer> mapper)",
    "returnType" : "IntStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final LongStream mapMultiToLong(BiConsumer<? super P_OUT, ? super LongConsumer> mapper)",
    "returnType" : "LongStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final DoubleStream mapMultiToDouble(BiConsumer<? super P_OUT, ? super DoubleConsumer> mapper)",
    "returnType" : "DoubleStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final Stream<P_OUT> peek(Consumer<? super P_OUT> action)",
    "returnType" : "Stream<P_OUT>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final Stream<P_OUT> distinct()",
    "returnType" : "Stream<P_OUT>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final Stream<P_OUT> sorted()",
    "returnType" : "Stream<P_OUT>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final Stream<P_OUT> sorted(Comparator<? super P_OUT> comparator)",
    "returnType" : "Stream<P_OUT>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final Stream<P_OUT> limit(long maxSize)",
    "returnType" : "Stream<P_OUT>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final Stream<P_OUT> skip(long n)",
    "returnType" : "Stream<P_OUT>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final Stream<P_OUT> takeWhile(Predicate<? super P_OUT> predicate)",
    "returnType" : "Stream<P_OUT>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final Stream<P_OUT> dropWhile(Predicate<? super P_OUT> predicate)",
    "returnType" : "Stream<P_OUT>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void forEach(Consumer<? super P_OUT> action)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void forEachOrdered(Consumer<? super P_OUT> action)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final A[] toArray(IntFunction<A[]> generator)",
    "returnType" : "A[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final Object[] toArray()",
    "returnType" : "Object[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<P_OUT> toList()",
    "returnType" : "List<P_OUT>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final boolean anyMatch(Predicate<? super P_OUT> predicate)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final boolean allMatch(Predicate<? super P_OUT> predicate)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final boolean noneMatch(Predicate<? super P_OUT> predicate)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final Optional<P_OUT> findFirst()",
    "returnType" : "Optional<P_OUT>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final Optional<P_OUT> findAny()",
    "returnType" : "Optional<P_OUT>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final P_OUT reduce(final P_OUT identity, final BinaryOperator<P_OUT> accumulator)",
    "returnType" : "P_OUT",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final Optional<P_OUT> reduce(BinaryOperator<P_OUT> accumulator)",
    "returnType" : "Optional<P_OUT>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final R reduce(R identity, BiFunction<R, ? super P_OUT, R> accumulator, BinaryOperator<R> combiner)",
    "returnType" : "R",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final R collect(Collector<? super P_OUT, A, R> collector)",
    "returnType" : "R",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final R collect(Supplier<R> supplier, BiConsumer<R, ? super P_OUT> accumulator, BiConsumer<R, R> combiner)",
    "returnType" : "R",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final Optional<P_OUT> max(Comparator<? super P_OUT> comparator)",
    "returnType" : "Optional<P_OUT>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final Optional<P_OUT> min(Comparator<? super P_OUT> comparator)",
    "returnType" : "Optional<P_OUT>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final long count()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public final StreamShape getOutputShape()", "public final Node<P_OUT> evaluateToNode(PipelineHelper<P_OUT> helper, Spliterator<P_IN> spliterator, boolean flattenTree, IntFunction<P_OUT[]> generator)", "public final Spliterator<P_OUT> wrap(PipelineHelper<P_OUT> ph, Supplier<Spliterator<P_IN>> supplier, boolean isParallel)", "public final Spliterator<P_OUT> lazySpliterator(Supplier<? extends Spliterator<P_OUT>> supplier)", "public final boolean forEachWithCancel(Spliterator<P_OUT> spliterator, Sink<P_OUT> sink)", "public final Node.Builder<P_OUT> makeNodeBuilder(long exactSizeIfKnown, IntFunction<P_OUT[]> generator)", "public final Iterator<P_OUT> iterator()", "public Stream<P_OUT> unordered()", "public final Stream<P_OUT> filter(Predicate<? super P_OUT> predicate)", "public final Stream<R> map(Function<? super P_OUT, ? extends R> mapper)", "public final IntStream mapToInt(ToIntFunction<? super P_OUT> mapper)", "public final LongStream mapToLong(ToLongFunction<? super P_OUT> mapper)", "public final DoubleStream mapToDouble(ToDoubleFunction<? super P_OUT> mapper)", "public final Stream<R> flatMap(Function<? super P_OUT, ? extends Stream<? extends R>> mapper)", "public final IntStream flatMapToInt(Function<? super P_OUT, ? extends IntStream> mapper)", "public final DoubleStream flatMapToDouble(Function<? super P_OUT, ? extends DoubleStream> mapper)", "public final LongStream flatMapToLong(Function<? super P_OUT, ? extends LongStream> mapper)", "public final Stream<R> mapMulti(BiConsumer<? super P_OUT, ? super Consumer<R>> mapper)", "public final IntStream mapMultiToInt(BiConsumer<? super P_OUT, ? super IntConsumer> mapper)", "public final LongStream mapMultiToLong(BiConsumer<? super P_OUT, ? super LongConsumer> mapper)", "public final DoubleStream mapMultiToDouble(BiConsumer<? super P_OUT, ? super DoubleConsumer> mapper)", "public final Stream<P_OUT> peek(Consumer<? super P_OUT> action)", "public final Stream<P_OUT> distinct()", "public final Stream<P_OUT> sorted()", "public final Stream<P_OUT> sorted(Comparator<? super P_OUT> comparator)", "public final Stream<P_OUT> limit(long maxSize)", "public final Stream<P_OUT> skip(long n)", "public final Stream<P_OUT> takeWhile(Predicate<? super P_OUT> predicate)", "public final Stream<P_OUT> dropWhile(Predicate<? super P_OUT> predicate)", "public void forEach(Consumer<? super P_OUT> action)", "public void forEachOrdered(Consumer<? super P_OUT> action)", "public final A[] toArray(IntFunction<A[]> generator)", "public final Object[] toArray()", "public List<P_OUT> toList()", "public final boolean anyMatch(Predicate<? super P_OUT> predicate)", "public final boolean allMatch(Predicate<? super P_OUT> predicate)", "public final boolean noneMatch(Predicate<? super P_OUT> predicate)", "public final Optional<P_OUT> findFirst()", "public final Optional<P_OUT> findAny()", "public final P_OUT reduce(final P_OUT identity, final BinaryOperator<P_OUT> accumulator)", "public final Optional<P_OUT> reduce(BinaryOperator<P_OUT> accumulator)", "public final R reduce(R identity, BiFunction<R, ? super P_OUT, R> accumulator, BinaryOperator<R> combiner)", "public final R collect(Collector<? super P_OUT, A, R> collector)", "public final R collect(Supplier<R> supplier, BiConsumer<R, ? super P_OUT> accumulator, BiConsumer<R, R> combiner)", "public final Optional<P_OUT> max(Comparator<? super P_OUT> comparator)", "public final Optional<P_OUT> min(Comparator<? super P_OUT> comparator)", "public final long count()" ],
  "variableNames" : [ ]
}