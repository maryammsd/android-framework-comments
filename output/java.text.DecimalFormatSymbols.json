{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/text/DecimalFormatSymbols.java",
  "packageName" : "java.text",
  "className" : "DecimalFormatSymbols",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialPersistentFields",
    "type" : "ObjectStreamField[]",
    "comment" : " BEGIN Android-added: Android specific serialization code.",
    "links" : [ ]
  }, {
    "name" : "zeroDigit",
    "type" : "char",
    "comment" : "\n     * Character used for zero.\n     *\n     * @serial\n     * @see #getZeroDigit\n     ",
    "links" : [ ]
  }, {
    "name" : "groupingSeparator",
    "type" : "char",
    "comment" : "\n     * Character used for grouping separator.\n     *\n     * @serial\n     * @see #getGroupingSeparator\n     ",
    "links" : [ ]
  }, {
    "name" : "decimalSeparator",
    "type" : "char",
    "comment" : "\n     * Character used for decimal sign.\n     *\n     * @serial\n     * @see #getDecimalSeparator\n     ",
    "links" : [ ]
  }, {
    "name" : "perMill",
    "type" : "char",
    "comment" : "\n     * Character used for per mille sign.\n     *\n     * @serial\n     * @see #getPerMill\n     ",
    "links" : [ ]
  }, {
    "name" : "percent",
    "type" : "char",
    "comment" : "\n     * Character used for percent sign.\n     * @serial\n     * @see #getPercent\n     ",
    "links" : [ ]
  }, {
    "name" : "digit",
    "type" : "char",
    "comment" : "\n     * Character used for a digit in a pattern.\n     *\n     * @serial\n     * @see #getDigit\n     ",
    "links" : [ ]
  }, {
    "name" : "patternSeparator",
    "type" : "char",
    "comment" : "\n     * Character used to separate positive and negative subpatterns\n     * in a pattern.\n     *\n     * @serial\n     * @see #getPatternSeparator\n     ",
    "links" : [ ]
  }, {
    "name" : "infinity",
    "type" : "String",
    "comment" : "\n     * String used to represent infinity.\n     * @serial\n     * @see #getInfinity\n     ",
    "links" : [ ]
  }, {
    "name" : "NaN",
    "type" : "String",
    "comment" : "\n     * String used to represent \"not a number\".\n     * @serial\n     * @see #getNaN\n     ",
    "links" : [ ]
  }, {
    "name" : "minusSign",
    "type" : "char",
    "comment" : "\n     * Character used to represent minus sign.\n     * @serial\n     * @see #getMinusSign\n     ",
    "links" : [ ]
  }, {
    "name" : "currencySymbol",
    "type" : "String",
    "comment" : "\n     * String denoting the local currency, e.g. \"$\".\n     * @serial\n     * @see #getCurrencySymbol\n     ",
    "links" : [ ]
  }, {
    "name" : "intlCurrencySymbol",
    "type" : "String",
    "comment" : "\n     * ISO 4217 currency code denoting the local currency, e.g. \"USD\".\n     * @serial\n     * @see #getInternationalCurrencySymbol\n     ",
    "links" : [ ]
  }, {
    "name" : "monetarySeparator",
    "type" : "char",
    "comment" : " Field new in JDK 1.1.6",
    "links" : [ ]
  }, {
    "name" : "exponential",
    "type" : "char",
    "comment" : " Field new in JDK 1.1.6",
    "links" : [ ]
  }, {
    "name" : "exponentialSeparator",
    "type" : "String",
    "comment" : " Field new in JDK 1.6",
    "links" : [ ]
  }, {
    "name" : "locale",
    "type" : "Locale",
    "comment" : "\n     * The locale of these currency format symbols.\n     *\n     * @serial\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "perMillText",
    "type" : "String",
    "comment" : "\n     * String representation of per mille sign, which may include\n     * formatting characters, such as BiDi control characters.\n     * The first non-format character of this string is the same as\n     * {@code perMill}.\n     *\n     * @serial\n     * @since 13\n     ",
    "links" : [ ]
  }, {
    "name" : "percentText",
    "type" : "String",
    "comment" : "\n     * String representation of percent sign, which may include\n     * formatting characters, such as BiDi control characters.\n     * The first non-format character of this string is the same as\n     * {@code percent}.\n     *\n     * @serial\n     * @since 13\n     ",
    "links" : [ ]
  }, {
    "name" : "minusSignText",
    "type" : "String",
    "comment" : "\n     * String representation of minus sign, which may include\n     * formatting characters, such as BiDi control characters.\n     * The first non-format character of this string is the same as\n     * {@code minusSign}.\n     *\n     * @serial\n     * @since 13\n     ",
    "links" : [ ]
  }, {
    "name" : "monetaryGroupingSeparator",
    "type" : "char",
    "comment" : "\n     * The grouping separator used when formatting currency values.\n     *\n     * @serial\n     * @since 15\n     ",
    "links" : [ ]
  }, {
    "name" : "currency",
    "type" : "Currency",
    "comment" : " currency; only the ISO code is serialized.",
    "links" : [ ]
  }, {
    "name" : "currencyInitialized",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "hashCode",
    "type" : "int",
    "comment" : "\n     * Cached hash code.\n     ",
    "links" : [ ]
  }, {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : " Proclaim JDK 1.1 FCS compatibility",
    "links" : [ ]
  }, {
    "name" : "currentSerialVersion",
    "type" : "int",
    "comment" : " - 5 for version from Java SE 15, which includes monetaryGroupingSeparator.",
    "links" : [ ]
  }, {
    "name" : "serialVersionOnStream",
    "type" : "int",
    "comment" : "\n     * Describes the version of {@code DecimalFormatSymbols} present on the stream.\n     * Possible values are:\n     * <ul>\n     * <li><b>0</b> (or uninitialized): versions prior to JDK 1.1.6.\n     *\n     * <li><b>1</b>: Versions written by JDK 1.1.6 or later, which include\n     *      two new fields: {@code monetarySeparator} and {@code exponential}.\n     * <li><b>2</b>: Versions written by J2SE 1.4 or later, which include a\n     *      new {@code locale} field.\n     * <li><b>3</b>: Versions written by J2SE 1.6 or later, which include a\n     *      new {@code exponentialSeparator} field.\n     * <li><b>4</b>: Versions written by Java SE 13 or later, which include\n     *      new {@code perMillText}, {@code percentText}, and\n     *      {@code minusSignText} field.\n     * <li><b>5</b>: Versions written by Java SE 15 or later, which include\n     *      new {@code monetaryGroupingSeparator} field.\n     * * </ul>\n     * When streaming out a {@code DecimalFormatSymbols}, the most recent format\n     * (corresponding to the highest allowable {@code serialVersionOnStream})\n     * is always written.\n     *\n     * @serial\n     * @since  1.1.6\n     ",
    "links" : [ ]
  }, {
    "name" : "cachedIcuDFS",
    "type" : "android.icu.text.DecimalFormatSymbols",
    "comment" : "\n     * Lazily created cached instance of an ICU DecimalFormatSymbols that's equivalent to this one.\n     * This field is reset to null whenever any of the relevant fields of this class are modified\n     * and will be re-created by {@link #getIcuDecimalFormatSymbols()} as necessary.\n     ",
    "links" : [ "#getIcuDecimalFormatSymbols()" ]
  } ],
  "methods" : [ {
    "name" : "public static Locale[] getAvailableLocales()",
    "returnType" : "Locale[]",
    "comment" : "\n     * Returns an array of all locales for which the\n     * {@code getInstance} methods of this class can return\n     * localized instances.\n     *\n     * It must contain at least a {@code Locale}\n     * instance equal to {@link java.util.Locale#US Locale.US}.\n     *\n     * @return an array of locales for which localized\n     *         {@code DecimalFormatSymbols} instances are available.\n     * @since 1.6\n     ",
    "links" : [ "java.util.Locale#US" ]
  }, {
    "name" : "public static final DecimalFormatSymbols getInstance()",
    "returnType" : "DecimalFormatSymbols",
    "comment" : "\n     * Gets the {@code DecimalFormatSymbols} instance for the default\n     * locale.\n     * <p>This is equivalent to calling\n     * {@link #getInstance(Locale)\n     *     getInstance(Locale.getDefault(Locale.Category.FORMAT))}.\n     * @see java.util.Locale#getDefault(java.util.Locale.Category)\n     * @see java.util.Locale.Category#FORMAT\n     * @return a {@code DecimalFormatSymbols} instance.\n     * @since 1.6\n     ",
    "links" : [ "#getInstance(Locale)" ]
  }, {
    "name" : "public static final DecimalFormatSymbols getInstance(Locale locale)",
    "returnType" : "DecimalFormatSymbols",
    "comment" : "\n     * Gets the {@code DecimalFormatSymbols} instance for the specified\n     * locale.\n     * If the specified locale contains the {@link java.util.Locale#UNICODE_LOCALE_EXTENSION}\n     * for the numbering system, the instance is initialized with the specified numbering\n     * system if the JRE implementation supports it. For example,\n     * <pre>\n     * NumberFormat.getNumberInstance(Locale.forLanguageTag(\"th-TH-u-nu-thai\"))\n     * </pre>\n     * This may return a {@code NumberFormat} instance with the Thai numbering system,\n     * instead of the Latin numbering system.\n     *\n     * @param locale the desired locale.\n     * @return a {@code DecimalFormatSymbols} instance.\n     * @throws    NullPointerException if {@code locale} is null\n     * @since 1.6\n     ",
    "links" : [ "java.util.Locale#UNICODE_LOCALE_EXTENSION" ]
  }, {
    "name" : "public char getZeroDigit()",
    "returnType" : "char",
    "comment" : "\n     * Gets the character used for zero. Different for Arabic, etc.\n     *\n     * @return the character used for zero\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setZeroDigit(char zeroDigit)",
    "returnType" : "void",
    "comment" : "\n     * Sets the character used for zero. Different for Arabic, etc.\n     *\n     * @param zeroDigit the character used for zero\n     ",
    "links" : [ ]
  }, {
    "name" : "public char getGroupingSeparator()",
    "returnType" : "char",
    "comment" : "\n     * Gets the character used for grouping separator. Different for French, etc.\n     *\n     * @return the grouping separator\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setGroupingSeparator(char groupingSeparator)",
    "returnType" : "void",
    "comment" : "\n     * Sets the character used for grouping separator. Different for French, etc.\n     *\n     * @param groupingSeparator the grouping separator\n     ",
    "links" : [ ]
  }, {
    "name" : "public char getDecimalSeparator()",
    "returnType" : "char",
    "comment" : "\n     * Gets the character used for decimal sign. Different for French, etc.\n     *\n     * @return the character used for decimal sign\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDecimalSeparator(char decimalSeparator)",
    "returnType" : "void",
    "comment" : "\n     * Sets the character used for decimal sign. Different for French, etc.\n     *\n     * @param decimalSeparator the character used for decimal sign\n     ",
    "links" : [ ]
  }, {
    "name" : "public char getPerMill()",
    "returnType" : "char",
    "comment" : "\n     * Gets the character used for per mille sign. Different for Arabic, etc.\n     *\n     * @return the character used for per mille sign\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPerMill(char perMill)",
    "returnType" : "void",
    "comment" : "\n     * Sets the character used for per mille sign. Different for Arabic, etc.\n     *\n     * @param perMill the character used for per mille sign\n     ",
    "links" : [ ]
  }, {
    "name" : "public char getPercent()",
    "returnType" : "char",
    "comment" : "\n     * Gets the character used for percent sign. Different for Arabic, etc.\n     *\n     * @return the character used for percent sign\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getPercentString()",
    "returnType" : "String",
    "comment" : "\n     * Gets the string used for percent sign. Different for Arabic, etc.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPercent(char percent)",
    "returnType" : "void",
    "comment" : "\n     * Sets the character used for percent sign. Different for Arabic, etc.\n     *\n     * @param percent the character used for percent sign\n     ",
    "links" : [ ]
  }, {
    "name" : "public char getDigit()",
    "returnType" : "char",
    "comment" : "\n     * Gets the character used for a digit in a pattern.\n     *\n     * @return the character used for a digit in a pattern\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDigit(char digit)",
    "returnType" : "void",
    "comment" : "\n     * Sets the character used for a digit in a pattern.\n     *\n     * @param digit the character used for a digit in a pattern\n     ",
    "links" : [ ]
  }, {
    "name" : "public char getPatternSeparator()",
    "returnType" : "char",
    "comment" : "\n     * Gets the character used to separate positive and negative subpatterns\n     * in a pattern.\n     *\n     * @return the pattern separator\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPatternSeparator(char patternSeparator)",
    "returnType" : "void",
    "comment" : "\n     * Sets the character used to separate positive and negative subpatterns\n     * in a pattern.\n     *\n     * @param patternSeparator the pattern separator\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getInfinity()",
    "returnType" : "String",
    "comment" : "\n     * Gets the string used to represent infinity. Almost always left\n     * unchanged.\n     *\n     * @return the string representing infinity\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setInfinity(String infinity)",
    "returnType" : "void",
    "comment" : "\n     * Sets the string used to represent infinity. Almost always left\n     * unchanged.\n     *\n     * @param infinity the string representing infinity\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getNaN()",
    "returnType" : "String",
    "comment" : "\n     * Gets the string used to represent \"not a number\". Almost always left\n     * unchanged.\n     *\n     * @return the string representing \"not a number\"\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setNaN(String NaN)",
    "returnType" : "void",
    "comment" : "\n     * Sets the string used to represent \"not a number\". Almost always left\n     * unchanged.\n     *\n     * @param NaN the string representing \"not a number\"\n     ",
    "links" : [ ]
  }, {
    "name" : "public char getMinusSign()",
    "returnType" : "char",
    "comment" : "\n     * Gets the character used to represent minus sign. If no explicit\n     * negative format is specified, one is formed by prefixing\n     * minusSign to the positive format.\n     *\n     * @return the character representing minus sign\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMinusSign(char minusSign)",
    "returnType" : "void",
    "comment" : "\n     * Sets the character used to represent minus sign. If no explicit\n     * negative format is specified, one is formed by prefixing\n     * minusSign to the positive format.\n     *\n     * @param minusSign the character representing minus sign\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getCurrencySymbol()",
    "returnType" : "String",
    "comment" : "\n     * Returns the currency symbol for the currency of these\n     * DecimalFormatSymbols in their locale.\n     *\n     * @return the currency symbol\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCurrencySymbol(String currency)",
    "returnType" : "void",
    "comment" : "\n     * Sets the currency symbol for the currency of these\n     * DecimalFormatSymbols in their locale.\n     *\n     * @param currency the currency symbol\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getInternationalCurrencySymbol()",
    "returnType" : "String",
    "comment" : "\n     * Returns the ISO 4217 currency code of the currency of these\n     * DecimalFormatSymbols.\n     *\n     * @return the currency code\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setInternationalCurrencySymbol(String currencyCode)",
    "returnType" : "void",
    "comment" : "\n     * Sets the ISO 4217 currency code of the currency of these\n     * DecimalFormatSymbols.\n     * If the currency code is valid (as defined by\n     * {@link java.util.Currency#getInstance(java.lang.String) Currency.getInstance}),\n     * this also sets the currency attribute to the corresponding Currency\n     * instance and the currency symbol attribute to the currency's symbol\n     * in the DecimalFormatSymbols' locale. If the currency code is not valid,\n     * then the currency attribute is set to null and the currency symbol\n     * attribute is not modified.\n     *\n     * @param currencyCode the currency code\n     * @see #setCurrency\n     * @see #setCurrencySymbol\n     * @since 1.2\n     ",
    "links" : [ "java.util.Currency#getInstance(java.lang.String)" ]
  }, {
    "name" : "public Currency getCurrency()",
    "returnType" : "Currency",
    "comment" : "\n     * Gets the currency of these DecimalFormatSymbols. May be null if the\n     * currency symbol attribute was previously set to a value that's not\n     * a valid ISO 4217 currency code.\n     *\n     * @return the currency used, or null\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCurrency(Currency currency)",
    "returnType" : "void",
    "comment" : "\n     * Sets the currency of these DecimalFormatSymbols.\n     * This also sets the currency symbol attribute to the currency's symbol\n     * in the DecimalFormatSymbols' locale, and the international currency\n     * symbol attribute to the currency's ISO 4217 currency code.\n     *\n     * @param currency the new currency to be used\n     * @throws    NullPointerException if {@code currency} is null\n     * @since 1.4\n     * @see #setCurrencySymbol\n     * @see #setInternationalCurrencySymbol\n     ",
    "links" : [ ]
  }, {
    "name" : "public char getMonetaryDecimalSeparator()",
    "returnType" : "char",
    "comment" : "\n     * Returns the monetary decimal separator.\n     *\n     * @return the monetary decimal separator\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMonetaryDecimalSeparator(char sep)",
    "returnType" : "void",
    "comment" : "\n     * Sets the monetary decimal separator.\n     *\n     * @param sep the monetary decimal separator\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getExponentSeparator()",
    "returnType" : "String",
    "comment" : "\n     * Returns the string used to separate the mantissa from the exponent.\n     * Examples: \"x10^\" for 1.23x10^4, \"E\" for 1.23E4.\n     *\n     * @return the exponent separator string\n     * @see #setExponentSeparator(java.lang.String)\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setExponentSeparator(String exp)",
    "returnType" : "void",
    "comment" : "\n     * Sets the string used to separate the mantissa from the exponent.\n     * Examples: \"x10^\" for 1.23x10^4, \"E\" for 1.23E4.\n     *\n     * @param exp the exponent separator string\n     * @throws    NullPointerException if {@code exp} is null\n     * @see #getExponentSeparator()\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : "public char getMonetaryGroupingSeparator()",
    "returnType" : "char",
    "comment" : "\n     * Gets the character used for grouping separator for currencies.\n     * May be different from {@code grouping separator} in some locales,\n     * e.g, German in Austria.\n     *\n     * @return the monetary grouping separator\n     * @since 15\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMonetaryGroupingSeparator(char monetaryGroupingSeparator)",
    "returnType" : "void",
    "comment" : "\n     * Sets the character used for grouping separator for currencies.\n     * Invocation of this method will not affect the normal\n     * {@code grouping separator}.\n     *\n     * @param monetaryGroupingSeparator the monetary grouping separator\n     * @see #setGroupingSeparator(char)\n     * @since 15\n     ",
    "links" : [ ]
  }, {
    "name" : " char getExponentialSymbol()",
    "returnType" : "char",
    "comment" : "\n     * Returns the character used to separate the mantissa from the exponent.\n     ",
    "links" : [ ]
  }, {
    "name" : " void setExponentialSymbol(char exp)",
    "returnType" : "void",
    "comment" : "\n     * Sets the character used to separate the mantissa from the exponent.\n     ",
    "links" : [ ]
  }, {
    "name" : " String getPerMillText()",
    "returnType" : "String",
    "comment" : "\n     * Gets the string used for per mille sign. Different for Arabic, etc.\n     *\n     * @return the string used for per mille sign\n     * @since 13\n     ",
    "links" : [ ]
  }, {
    "name" : " void setPerMillText(String perMillText)",
    "returnType" : "void",
    "comment" : "\n     * Sets the string used for per mille sign. Different for Arabic, etc.\n     *\n     * Setting the {@code perMillText} affects the return value of\n     * {@link #getPerMill()}, in which the first non-format character of\n     * {@code perMillText} is returned.\n     *\n     * @param perMillText the string used for per mille sign\n     * @throws NullPointerException if {@code perMillText} is null\n     * @throws IllegalArgumentException if {@code perMillText} is an empty string\n     * @see #getPerMill()\n     * @see #getPerMillText()\n     * @since 13\n     ",
    "links" : [ "#getPerMill()" ]
  }, {
    "name" : " String getPercentText()",
    "returnType" : "String",
    "comment" : "\n     * Gets the string used for percent sign. Different for Arabic, etc.\n     *\n     * @return the string used for percent sign\n     * @since 13\n     ",
    "links" : [ ]
  }, {
    "name" : " void setPercentText(String percentText)",
    "returnType" : "void",
    "comment" : "\n     * Sets the string used for percent sign. Different for Arabic, etc.\n     *\n     * Setting the {@code percentText} affects the return value of\n     * {@link #getPercent()}, in which the first non-format character of\n     * {@code percentText} is returned.\n     *\n     * @param percentText the string used for percent sign\n     * @throws NullPointerException if {@code percentText} is null\n     * @throws IllegalArgumentException if {@code percentText} is an empty string\n     * @see #getPercent()\n     * @see #getPercentText()\n     * @since 13\n     ",
    "links" : [ "#getPercent()" ]
  }, {
    "name" : " String getMinusSignText()",
    "returnType" : "String",
    "comment" : "\n     * Gets the string used to represent minus sign. If no explicit\n     * negative format is specified, one is formed by prefixing\n     * minusSignText to the positive format.\n     *\n     * @return the string representing minus sign\n     * @since 13\n     ",
    "links" : [ ]
  }, {
    "name" : " void setMinusSignText(String minusSignText)",
    "returnType" : "void",
    "comment" : "\n     * Sets the string used to represent minus sign. If no explicit\n     * negative format is specified, one is formed by prefixing\n     * minusSignText to the positive format.\n     *\n     * Setting the {@code minusSignText} affects the return value of\n     * {@link #getMinusSign()}, in which the first non-format character of\n     * {@code minusSignText} is returned.\n     *\n     * @param minusSignText the character representing minus sign\n     * @throws NullPointerException if {@code minusSignText} is null\n     * @throws IllegalArgumentException if {@code minusSignText} is an\n     *  empty string\n     * @see #getMinusSign()\n     * @see #getMinusSignText()\n     * @since 13\n     ",
    "links" : [ "#getMinusSign()" ]
  }, {
    "name" : "public Object clone()",
    "returnType" : "Object",
    "comment" : "\n     * Standard override.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "\n     * Override equals.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Override hashCode.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void initialize(Locale locale)",
    "returnType" : "void",
    "comment" : "\n     * Initializes the symbols from the FormatData resource bundle.\n     ",
    "links" : [ ]
  }, {
    "name" : "private char findNonFormatChar(String src, char defChar)",
    "returnType" : "char",
    "comment" : "\n     * Obtains non-format single character from String\n     ",
    "links" : [ ]
  }, {
    "name" : "private void initializeCurrency(Locale locale)",
    "returnType" : "void",
    "comment" : "\n     * Lazy initialization for currency related fields\n     ",
    "links" : [ ]
  }, {
    "name" : "public static char maybeStripMarkers(String symbol, char fallback)",
    "returnType" : "char",
    "comment" : " VisibleForTesting",
    "links" : [ ]
  }, {
    "name" : "protected android.icu.text.DecimalFormatSymbols getIcuDecimalFormatSymbols()",
    "returnType" : "android.icu.text.DecimalFormatSymbols",
    "comment" : "\n     * Convert an instance of this class to the ICU version so that it can be used with ICU4J.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "protected static DecimalFormatSymbols fromIcuInstance(android.icu.text.DecimalFormatSymbols dfs)",
    "returnType" : "DecimalFormatSymbols",
    "comment" : "\n     * Create an instance of DecimalFormatSymbols using the ICU equivalent of this class.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void writeObject(ObjectOutputStream stream) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException",
    "returnType" : "void",
    "comment" : "\n     * Reads the default serializable fields, provides default values for objects\n     * in older serial versions, and initializes non-serializable fields.\n     * If {@code serialVersionOnStream}\n     * is less than 1, initializes {@code monetarySeparator} to be\n     * the same as {@code decimalSeparator} and {@code exponential}\n     * to be 'E'.\n     * If {@code serialVersionOnStream} is less than 2,\n     * initializes {@code locale} to the root locale, and initializes\n     * If {@code serialVersionOnStream} is less than 3, it initializes\n     * {@code exponentialSeparator} using {@code exponential}.\n     * If {@code serialVersionOnStream} is less than 4, it initializes\n     * {@code perMillText}, {@code percentText}, and\n     * {@code minusSignText} using {@code perMill}, {@code percent}, and\n     * {@code minusSign} respectively.\n     * If {@code serialVersionOnStream} is less than 5, it initializes\n     * {@code monetaryGroupingSeparator} using {@code groupingSeparator}.\n     * Sets {@code serialVersionOnStream} back to the maximum allowed value so that\n     * default serialization will work properly if this object is streamed out again.\n     * Initializes the currency from the intlCurrencySymbol field.\n     *\n     * @throws InvalidObjectException if {@code char} and {@code String}\n     *      representations of either percent, per mille, and/or minus sign disagree.\n     * @since  1.1.6\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static Locale[] getAvailableLocales()", "public static final DecimalFormatSymbols getInstance()", "public static final DecimalFormatSymbols getInstance(Locale locale)", "public char getZeroDigit()", "public void setZeroDigit(char zeroDigit)", "public char getGroupingSeparator()", "public void setGroupingSeparator(char groupingSeparator)", "public char getDecimalSeparator()", "public void setDecimalSeparator(char decimalSeparator)", "public char getPerMill()", "public void setPerMill(char perMill)", "public char getPercent()", "public String getPercentString()", "public void setPercent(char percent)", "public char getDigit()", "public void setDigit(char digit)", "public char getPatternSeparator()", "public void setPatternSeparator(char patternSeparator)", "public String getInfinity()", "public void setInfinity(String infinity)", "public String getNaN()", "public void setNaN(String NaN)", "public char getMinusSign()", "public void setMinusSign(char minusSign)", "public String getCurrencySymbol()", "public void setCurrencySymbol(String currency)", "public String getInternationalCurrencySymbol()", "public void setInternationalCurrencySymbol(String currencyCode)", "public Currency getCurrency()", "public void setCurrency(Currency currency)", "public char getMonetaryDecimalSeparator()", "public void setMonetaryDecimalSeparator(char sep)", "public String getExponentSeparator()", "public void setExponentSeparator(String exp)", "public char getMonetaryGroupingSeparator()", "public void setMonetaryGroupingSeparator(char monetaryGroupingSeparator)", " char getExponentialSymbol()", " void setExponentialSymbol(char exp)", " String getPerMillText()", " void setPerMillText(String perMillText)", " String getPercentText()", " void setPercentText(String percentText)", " String getMinusSignText()", " void setMinusSignText(String minusSignText)", "public Object clone()", "public boolean equals(Object obj)", "public int hashCode()", "private void initialize(Locale locale)", "private char findNonFormatChar(String src, char defChar)", "private void initializeCurrency(Locale locale)", "public static char maybeStripMarkers(String symbol, char fallback)", "protected android.icu.text.DecimalFormatSymbols getIcuDecimalFormatSymbols()", "protected static DecimalFormatSymbols fromIcuInstance(android.icu.text.DecimalFormatSymbols dfs)", "private void writeObject(ObjectOutputStream stream) throws IOException", "private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException" ],
  "variableNames" : [ "serialPersistentFields", "zeroDigit", "groupingSeparator", "decimalSeparator", "perMill", "percent", "digit", "patternSeparator", "infinity", "NaN", "minusSign", "currencySymbol", "intlCurrencySymbol", "monetarySeparator", "exponential", "exponentialSeparator", "locale", "perMillText", "percentText", "minusSignText", "monetaryGroupingSeparator", "currency", "currencyInitialized", "hashCode", "serialVersionUID", "currentSerialVersion", "serialVersionOnStream", "cachedIcuDFS" ]
}