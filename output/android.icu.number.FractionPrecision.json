{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/number/FractionPrecision.java",
  "packageName" : "android.icu.number",
  "className" : "FractionPrecision",
  "comment" : "\n * A class that defines a rounding strategy based on a number of fraction places and optionally\n * significant digits to be used when formatting numbers in NumberFormatter.\n *\n * <p>\n * To create a FractionPrecision, use one of the factory methods on Precision.\n *\n * @see NumberFormatter\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public Precision withSignificantDigits(int minSignificantDigits, int maxSignificantDigits, NumberFormatter.RoundingPriority priority)",
    "returnType" : "Precision",
    "comment" : "\n     * Override maximum fraction digits with maximum significant digits depending on the magnitude\n     * of the number. See UNumberRoundingPriority.\n     *\n     * @param minSignificantDigits\n     *            Pad trailing zeros to achieve this minimum number of significant digits.\n     * @param maxSignificantDigits\n     *            Round the number to achieve this maximum number of significant digits.\n     * @param priority\n     *            How to disambiguate between fraction digits and significant digits.\n     * @return A precision for chaining or passing to the NumberFormatter precision() setter.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Precision withMinDigits(int minSignificantDigits)",
    "returnType" : "Precision",
    "comment" : "\n     * Ensure that no less than this number of significant digits are retained when rounding according to\n     * fraction rules.\n     *\n     * <p>\n     * For example, with integer rounding, the number 3.141 becomes \"3\". However, with minimum figures\n     * set to 2, 3.141 becomes \"3.1\" instead.\n     *\n     * <p>\n     * This setting does not affect the number of trailing zeros. For example, 3.01 would print as \"3\",\n     * not \"3.0\".\n     *\n     * <p>\n     * This is equivalent to {@code withSignificantDigits(1, minSignificantDigits, RELAXED)}.\n     *\n     * @param minSignificantDigits\n     *            The number of significant figures to guarantee.\n     * @return A Precision for chaining or passing to the NumberFormatter rounding() setter.\n     * @throws IllegalArgumentException if the input number is too big or smaller than 1.\n     * @see NumberFormatter\n     ",
    "links" : [ ]
  }, {
    "name" : "public Precision withMaxDigits(int maxSignificantDigits)",
    "returnType" : "Precision",
    "comment" : "\n     * Ensure that no more than this number of significant digits are retained when rounding according to\n     * fraction rules.\n     *\n     * <p>\n     * For example, with integer rounding, the number 123.4 becomes \"123\". However, with maximum figures\n     * set to 2, 123.4 becomes \"120\" instead.\n     *\n     * <p>\n     * This setting does not affect the number of trailing zeros. For example, with fixed fraction of 2,\n     * 123.4 would become \"120.00\".\n     *\n     * <p>\n     * This is equivalent to {@code withSignificantDigits(1, maxSignificantDigits, STRICT)}.\n     *\n     * @param maxSignificantDigits\n     *            Round the number to no more than this number of significant figures.\n     * @return A Precision for chaining or passing to the NumberFormatter rounding() setter.\n     * @throws IllegalArgumentException if the input number is too big or smaller than 1.\n     * @see NumberFormatter\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Precision withSignificantDigits(int minSignificantDigits, int maxSignificantDigits, NumberFormatter.RoundingPriority priority)", "public Precision withMinDigits(int minSignificantDigits)", "public Precision withMaxDigits(int maxSignificantDigits)" ],
  "variableNames" : [ ]
}