{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/timedetector/TimeDetectorHelper.java",
  "packageName" : "android.app.timedetector",
  "className" : "TimeDetectorHelper",
  "comment" : " Not final for easy replacement / mocking during tests.",
  "links" : [ ],
  "variables" : [ {
    "name" : "MANUAL_SUGGESTION_YEAR_MIN",
    "type" : "int",
    "comment" : "\n     * See {@link #getManualDateSelectionYearMin()}. Chosen to produce Unix epoch times be greater\n     * than {@link #MANUAL_SUGGESTION_LOWER_BOUND}.\n     ",
    "links" : [ "#getManualDateSelectionYearMin()", "#MANUAL_SUGGESTION_LOWER_BOUND" ]
  }, {
    "name" : "MANUAL_SUGGESTION_YEAR_MAX_WITHOUT_Y2038_ISSUE",
    "type" : "int",
    "comment" : "\n     * The maximum gregorian calendar year to allow for manual date selection on devices unlikely to\n     * have Y2038 issues. This serves as a sensible UI-enforced limit though the system server may\n     * support a larger upper bound. Users besides future archeologists are unlikely to need higher\n     * values, for a few years at least.\n     ",
    "links" : [ ]
  }, {
    "name" : "MANUAL_SUGGESTION_YEAR_MAX_WITH_Y2038_ISSUE",
    "type" : "int",
    "comment" : "\n     * The maximum gregorian calendar year to allow for manual date selection on devices that may\n     * have Y2038 issues. This serves as a sensible UI-enforced limit though the system server may\n     * support a larger upper bound. That is, the signed 32-bit milliseconds value is\n     * 03:14:07 UTC on 19 January 2038, but this constant means users can only enter dates up to\n     * 2037-12-31. See {@link #MANUAL_SUGGESTION_YEAR_MAX_WITH_Y2038_ISSUE}.\n     *\n     * <p>Note: This UI limit also doesn't prevent devices reaching the Y2038 roll-over time through\n     * the natural passage of time, it just prevents users potentially causing issues in the years\n     * leading up to it accidentally via the UI.\n     ",
    "links" : [ "#MANUAL_SUGGESTION_YEAR_MAX_WITH_Y2038_ISSUE" ]
  }, {
    "name" : "SUGGESTION_UPPER_BOUND_WITH_Y2038_ISSUE",
    "type" : "Instant",
    "comment" : "\n     * The upper bound for valid suggestions when the Y2038 issue is a risk. This is the instant\n     * when the Y2038 issue occurs.\n     ",
    "links" : [ ]
  }, {
    "name" : "SUGGESTION_UPPER_BOUND_WIITHOUT_Y2038_ISSUE",
    "type" : "Instant",
    "comment" : "\n     * The upper bound for valid suggestions when the Y2038 issue is not a risk. This values means\n     * there is no practical upper bound.\n     *\n     * <p>Make sure this value remains in the value representable as a signed int64 Unix epoch\n     * millis value as in various places {@link Instant#toEpochMilli()} is called, and that throws\n     * an exception if the value is too large.\n     ",
    "links" : [ "java.time.Instant#toEpochMilli()" ]
  }, {
    "name" : "MANUAL_SUGGESTION_LOWER_BOUND",
    "type" : "Instant",
    "comment" : " See {@link #getManualSuggestionLowerBound()}. ",
    "links" : [ "#getManualSuggestionLowerBound()" ]
  }, {
    "name" : "AUTO_SUGGESTION_LOWER_BOUND_DEFAULT",
    "type" : "Instant",
    "comment" : "\n     * The lowest value in Unix epoch milliseconds that is considered a valid automatic suggestion.\n     * See also {@link #MANUAL_SUGGESTION_LOWER_BOUND}.\n     *\n     * <p>Note that this is a default value. The lower value enforced can be overridden to be\n     * lower in the system server with flags for testing.\n     ",
    "links" : [ "#MANUAL_SUGGESTION_LOWER_BOUND" ]
  }, {
    "name" : "INSTANCE",
    "type" : "TimeDetectorHelper",
    "comment" : " The singleton instance of this class. ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getManualDateSelectionYearMin()",
    "returnType" : "int",
    "comment" : "\n     * Returns the minimum gregorian calendar year to offer for manual date selection. This serves\n     * as a sensible UI-enforced lower limit, the system server may support a smaller lower bound.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getManualDateSelectionYearMax()",
    "returnType" : "int",
    "comment" : "\n     * Returns the maximum gregorian calendar year to offer for manual date selection. This serves\n     * as a sensible UI-enforced lower limit, the system server may support a larger upper bound.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Instant getManualSuggestionLowerBound()",
    "returnType" : "Instant",
    "comment" : "\n     * Returns the lowest value in Unix epoch milliseconds that is considered a valid manual\n     * suggestion. For historical reasons Android has a different lower limit for manual input than\n     * automatic. This may change in the future to align with automatic suggestions, but has been\n     * kept initially to avoid breaking manual tests that are hard-coded with old dates real users\n     * will never want to use.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Instant getAutoSuggestionLowerBoundDefault()",
    "returnType" : "Instant",
    "comment" : "\n     * Returns the lowest value in Unix epoch milliseconds that is considered a valid automatic\n     * suggestion. See also {@link #MANUAL_SUGGESTION_LOWER_BOUND}.\n     *\n     * <p>Note that this is a default value. The lower value enforced can be overridden to be\n     * different in the system server with server flags.\n     ",
    "links" : [ "#MANUAL_SUGGESTION_LOWER_BOUND" ]
  }, {
    "name" : "public Instant getSuggestionUpperBound()",
    "returnType" : "Instant",
    "comment" : " Returns the upper bound to enforce for all time suggestions (manual and automatic). ",
    "links" : [ ]
  }, {
    "name" : "private boolean getDeviceHasY2038Issue()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if the device may be at risk of time_t overflow (because bionic\n     * defines time_t as a 32-bit signed integer for 32-bit processes).\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int getManualDateSelectionYearMin()", "public int getManualDateSelectionYearMax()", "public Instant getManualSuggestionLowerBound()", "public Instant getAutoSuggestionLowerBoundDefault()", "public Instant getSuggestionUpperBound()", "private boolean getDeviceHasY2038Issue()" ],
  "variableNames" : [ "MANUAL_SUGGESTION_YEAR_MIN", "MANUAL_SUGGESTION_YEAR_MAX_WITHOUT_Y2038_ISSUE", "MANUAL_SUGGESTION_YEAR_MAX_WITH_Y2038_ISSUE", "SUGGESTION_UPPER_BOUND_WITH_Y2038_ISSUE", "SUGGESTION_UPPER_BOUND_WIITHOUT_Y2038_ISSUE", "MANUAL_SUGGESTION_LOWER_BOUND", "AUTO_SUGGESTION_LOWER_BOUND_DEFAULT", "INSTANCE" ]
}