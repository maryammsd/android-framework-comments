{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xalan/templates/ElemTemplate.java",
  "packageName" : "org.apache.xalan.templates",
  "className" : "ElemTemplate",
  "comment" : "\n * Implement xsl:template.\n * <pre>\n * <!ELEMENT xsl:template\n *  (#PCDATA\n *   %instructions;\n *   %result-elements;\n *   | xsl:param)\n * >\n *\n * <!ATTLIST xsl:template\n *   match %pattern; #IMPLIED\n *   name %qname; #IMPLIED\n *   priority %priority; #IMPLIED\n *   mode %qname; #IMPLIED\n *   %space-att;\n * >\n * </pre>\n * @see <a href=\"http://www.w3.org/TR/xslt#section-Defining-Template-Rules\">section-Defining-Template-Rules in XSLT Specification</a>\n * @xsl.usage advanced\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_publicId",
    "type" : "String",
    "comment" : " The public identifier for the current document event.\n   *  @serial          ",
    "links" : [ ]
  }, {
    "name" : "m_systemId",
    "type" : "String",
    "comment" : " The system identifier for the current document event.\n   *  @serial          ",
    "links" : [ ]
  }, {
    "name" : "m_stylesheet",
    "type" : "Stylesheet",
    "comment" : "\n   * The owning stylesheet.\n   * (Should this only be put on the template element, to\n   * conserve space?)\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "m_matchPattern",
    "type" : "XPath",
    "comment" : "\n   * The match attribute is a Pattern that identifies the source\n   * node or nodes to which the rule applies.\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "m_name",
    "type" : "QName",
    "comment" : "\n   * An xsl:template element with a name attribute specifies a named template.\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "m_mode",
    "type" : "QName",
    "comment" : "\n   * Modes allow an element to be processed multiple times,\n   * each time producing a different result.\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "m_priority",
    "type" : "double",
    "comment" : "\n   * The priority of a template rule is specified by the priority\n   * attribute on the template rule.\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "m_frameSize",
    "type" : "int",
    "comment" : "\n   * The stack frame size for this template, which is equal to the maximum number \n   * of params and variables that can be declared in the template at one time.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_inArgsSize",
    "type" : "int",
    "comment" : "\n   * The size of the portion of the stack frame that can hold parameter \n   * arguments.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_argsQNameIDs",
    "type" : "int[]",
    "comment" : "\n   * List of namespace/local-name pairs, DTM style, that are unique \n   * qname identifiers for the arguments.  The position of a given qname \n   * in the list is the argument ID, and thus the position in the stack\n   * frame.\n   ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String getPublicId()",
    "returnType" : "String",
    "comment" : "\n   * Return the public identifier for the current document event.\n   * <p>This will be the public identifier\n   * @return A string containing the public identifier, or\n   *         null if none is available.\n   * @see #getSystemId\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getSystemId()",
    "returnType" : "String",
    "comment" : "\n   * Return the system identifier for the current document event.\n   *\n   * <p>If the system identifier is a URL, the parser must resolve it\n   * fully before passing it to the application.</p>\n   *\n   * @return A string containing the system identifier, or null\n   *         if none is available.\n   * @see #getPublicId\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setLocaterInfo(SourceLocator locator)",
    "returnType" : "void",
    "comment" : "\n   * Set the location information for this element.\n   *\n   * @param locator SourceLocator holding location information \n   ",
    "links" : [ ]
  }, {
    "name" : "public StylesheetComposed getStylesheetComposed()",
    "returnType" : "StylesheetComposed",
    "comment" : "\n   * Get the stylesheet composed (resolves includes and\n   * imports and has methods on it that return \"composed\" properties.\n   * \n   * @return The stylesheet composed.\n   ",
    "links" : [ ]
  }, {
    "name" : "public Stylesheet getStylesheet()",
    "returnType" : "Stylesheet",
    "comment" : "\n   * Get the owning stylesheet.\n   *\n   * @return The owning stylesheet.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setStylesheet(Stylesheet sheet)",
    "returnType" : "void",
    "comment" : "\n   * Set the owning stylesheet.\n   *\n   * @param sheet The owning stylesheet for this element\n   ",
    "links" : [ ]
  }, {
    "name" : "public StylesheetRoot getStylesheetRoot()",
    "returnType" : "StylesheetRoot",
    "comment" : "\n   * Get the root stylesheet.\n   *\n   * @return The root stylesheet for this element\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setMatch(XPath v)",
    "returnType" : "void",
    "comment" : "\n   * Set the \"match\" attribute.\n   * The match attribute is a Pattern that identifies the source\n   * node or nodes to which the rule applies. The match attribute\n   * is required unless the xsl:template element has a name\n   * attribute (see [6 Named Templates]). It is an error for the\n   * value of the match attribute to contain a VariableReference.\n   * @see <a href=\"http://www.w3.org/TR/xslt#patterns\">patterns in XSLT Specification</a>\n   *\n   * @param v Value to set for the \"match\" attribute\n   ",
    "links" : [ ]
  }, {
    "name" : "public XPath getMatch()",
    "returnType" : "XPath",
    "comment" : "\n   * Get the \"match\" attribute.\n   * The match attribute is a Pattern that identifies the source\n   * node or nodes to which the rule applies. The match attribute\n   * is required unless the xsl:template element has a name\n   * attribute (see [6 Named Templates]). It is an error for the\n   * value of the match attribute to contain a VariableReference.\n   * @see <a href=\"http://www.w3.org/TR/xslt#patterns\">patterns in XSLT Specification</a>\n   *\n   * @return Value of the \"match\" attribute \n   ",
    "links" : [ ]
  }, {
    "name" : "public void setName(QName v)",
    "returnType" : "void",
    "comment" : "\n   * Set the \"name\" attribute.\n   * An xsl:template element with a name attribute specifies a named template.\n   * If an xsl:template element has a name attribute, it may, but need not,\n   * also have a match attribute.\n   * @see <a href=\"http://www.w3.org/TR/xslt#named-templates\">named-templates in XSLT Specification</a>\n   *\n   * @param v Value to set the \"name\" attribute\n   ",
    "links" : [ ]
  }, {
    "name" : "public QName getName()",
    "returnType" : "QName",
    "comment" : "\n   * Get the \"name\" attribute.\n   * An xsl:template element with a name attribute specifies a named template.\n   * If an xsl:template element has a name attribute, it may, but need not,\n   * also have a match attribute.\n   * @see <a href=\"http://www.w3.org/TR/xslt#named-templates\">named-templates in XSLT Specification</a>\n   *\n   * @return Value of the \"name\" attribute\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setMode(QName v)",
    "returnType" : "void",
    "comment" : "\n   * Set the \"mode\" attribute.\n   * Modes allow an element to be processed multiple times,\n   * each time producing a different result.  If xsl:template\n   * does not have a match attribute, it must not have a mode attribute.\n   * @see <a href=\"http://www.w3.org/TR/xslt#modes\">modes in XSLT Specification</a>\n   *\n   * @param v Value to set the \"mode\" attribute\n   ",
    "links" : [ ]
  }, {
    "name" : "public QName getMode()",
    "returnType" : "QName",
    "comment" : "\n   * Get the \"mode\" attribute.\n   * Modes allow an element to be processed multiple times,\n   * each time producing a different result.  If xsl:template\n   * does not have a match attribute, it must not have a mode attribute.\n   * @see <a href=\"http://www.w3.org/TR/xslt#modes\">modes in XSLT Specification</a>\n   *\n   * @return Value of the \"mode\" attribute\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setPriority(double v)",
    "returnType" : "void",
    "comment" : "\n   * Set the \"priority\" attribute.\n   * The priority of a template rule is specified by the priority\n   * attribute on the template rule. The value of this must be a\n   * real number (positive or negative), matching the production\n   * Number with an optional leading minus sign (-).\n   * @see <a href=\"http://www.w3.org/TR/xslt#conflict\">conflict in XSLT Specification</a>\n   *\n   * @param v The value to set for the \"priority\" attribute\n   ",
    "links" : [ ]
  }, {
    "name" : "public double getPriority()",
    "returnType" : "double",
    "comment" : "\n   * Get the \"priority\" attribute.\n   * The priority of a template rule is specified by the priority\n   * attribute on the template rule. The value of this must be a\n   * real number (positive or negative), matching the production\n   * Number with an optional leading minus sign (-).\n   * @see <a href=\"http://www.w3.org/TR/xslt#conflict\">conflict in XSLT Specification</a>\n   *\n   * @return The value of the \"priority\" attribute\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getXSLToken()",
    "returnType" : "int",
    "comment" : "\n   * Get an int constant identifying the type of element.\n   * @see org.apache.xalan.templates.Constants\n   *\n   * @return The token ID for the element\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getNodeName()",
    "returnType" : "String",
    "comment" : "\n   * Return the node name.\n   *\n   * @return The element's name\n   ",
    "links" : [ ]
  }, {
    "name" : "public void compose(StylesheetRoot sroot) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n   * This function is called after everything else has been\n   * recomposed, and allows the template to set remaining\n   * values that may be based on some other property that\n   * depends on recomposition.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void endCompose(StylesheetRoot sroot) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n   * This after the template's children have been composed.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void execute(TransformerImpl transformer) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n   * Copy the template contents into the result tree.\n   * The content of the xsl:template element is the template\n   * that is instantiated when the template rule is applied.\n   *\n   * @param transformer non-null reference to the the current transform-time state.\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public void recompose(StylesheetRoot root)",
    "returnType" : "void",
    "comment" : "\n   * This function is called during recomposition to\n   * control how this element is composed.\n   * @param root The root stylesheet for this transformation.\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public String getPublicId()", "public String getSystemId()", "public void setLocaterInfo(SourceLocator locator)", "public StylesheetComposed getStylesheetComposed()", "public Stylesheet getStylesheet()", "public void setStylesheet(Stylesheet sheet)", "public StylesheetRoot getStylesheetRoot()", "public void setMatch(XPath v)", "public XPath getMatch()", "public void setName(QName v)", "public QName getName()", "public void setMode(QName v)", "public QName getMode()", "public void setPriority(double v)", "public double getPriority()", "public int getXSLToken()", "public String getNodeName()", "public void compose(StylesheetRoot sroot) throws TransformerException", "public void endCompose(StylesheetRoot sroot) throws TransformerException", "public void execute(TransformerImpl transformer) throws TransformerException", "public void recompose(StylesheetRoot root)" ],
  "variableNames" : [ "serialVersionUID", "m_publicId", "m_systemId", "m_stylesheet", "m_matchPattern", "m_name", "m_mode", "m_priority", "m_frameSize", "m_inArgsSize", "m_argsQNameIDs" ]
}