{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/VolumeShaper.java",
  "packageName" : "android.media",
  "className" : "VolumeShaper",
  "comment" : "\n * The {@code VolumeShaper} class is used to automatically control audio volume during media\n * playback, allowing simple implementation of transition effects and ducking.\n * It is created from implementations of {@code VolumeAutomation},\n * such as {@code MediaPlayer} and {@code AudioTrack} (referred to as \"players\" below),\n * by {@link MediaPlayer#createVolumeShaper} or {@link AudioTrack#createVolumeShaper}.\n *\n * A {@code VolumeShaper} is intended for short volume changes.\n * If the audio output sink changes during\n * a {@code VolumeShaper} transition, the precise curve position may be lost, and the\n * {@code VolumeShaper} may advance to the end of the curve for the new audio output sink.\n *\n * The {@code VolumeShaper} appears as an additional scaling on the audio output,\n * and adjusts independently of track or stream volume controls.\n ",
  "links" : [ "android.media.MediaPlayer#createVolumeShaper", "android.media.AudioTrack#createVolumeShaper" ],
  "variables" : [ {
    "name" : "mId",
    "type" : "int",
    "comment" : " member variables ",
    "links" : [ ]
  }, {
    "name" : "mWeakPlayerBase",
    "type" : "WeakReference<PlayerBase>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " int getId()",
    "returnType" : "int",
    "comment" : " package ",
    "links" : [ ]
  }, {
    "name" : "public void apply(@NonNull Operation operation)",
    "returnType" : "void",
    "comment" : "\n     * Applies the {@link VolumeShaper.Operation} to the {@code VolumeShaper}.\n     *\n     * Applying {@link VolumeShaper.Operation#PLAY} after {@code PLAY}\n     * or {@link VolumeShaper.Operation#REVERSE} after\n     * {@code REVERSE} has no effect.\n     *\n     * Applying {@link VolumeShaper.Operation#PLAY} when the player\n     * hasn't started will synchronously start the {@code VolumeShaper} when\n     * playback begins.\n     *\n     * @param operation the {@code operation} to apply.\n     * @throws IllegalStateException if the player is uninitialized or if there\n     *         is a critical failure. In that case, the {@code VolumeShaper} should be\n     *         recreated.\n     ",
    "links" : [ "VolumeShaper.Operation", "VolumeShaper.Operation#PLAY", "VolumeShaper.Operation#REVERSE" ]
  }, {
    "name" : "public void replace(@NonNull Configuration configuration, @NonNull Operation operation, boolean join)",
    "returnType" : "void",
    "comment" : "\n     * Replaces the current {@code VolumeShaper}\n     * {@code configuration} with a new {@code configuration}.\n     *\n     * This allows the user to change the volume shape\n     * while the existing {@code VolumeShaper} is in effect.\n     *\n     * The effect of {@code replace()} is similar to an atomic close of\n     * the existing {@code VolumeShaper} and creation of a new {@code VolumeShaper}.\n     *\n     * If the {@code operation} is {@link VolumeShaper.Operation#PLAY} then the\n     * new curve starts immediately.\n     *\n     * If the {@code operation} is\n     * {@link VolumeShaper.Operation#REVERSE}, then the new curve will\n     * be delayed until {@code PLAY} is applied.\n     *\n     * @param configuration the new {@code configuration} to use.\n     * @param operation the {@code operation} to apply to the {@code VolumeShaper}\n     * @param join if true, match the start volume of the\n     *             new {@code configuration} to the current volume of the existing\n     *             {@code VolumeShaper}, to avoid discontinuity.\n     * @throws IllegalStateException if the player is uninitialized or if there\n     *         is a critical failure. In that case, the {@code VolumeShaper} should be\n     *         recreated.\n     ",
    "links" : [ "VolumeShaper.Operation#PLAY", "VolumeShaper.Operation#REVERSE" ]
  }, {
    "name" : "public float getVolume()",
    "returnType" : "float",
    "comment" : "\n     * Returns the current volume scale attributable to the {@code VolumeShaper}.\n     *\n     * This is the last volume from the {@code VolumeShaper} used for the player,\n     * or the initial volume if the {@code VolumeShaper} hasn't been started with\n     * {@link VolumeShaper.Operation#PLAY}.\n     *\n     * @return the volume, linearly represented as a value between 0.f and 1.f.\n     * @throws IllegalStateException if the player is uninitialized or if there\n     *         is a critical failure.  In that case, the {@code VolumeShaper} should be\n     *         recreated.\n     ",
    "links" : [ "VolumeShaper.Operation#PLAY" ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "\n     * Releases the {@code VolumeShaper} object; any volume scale due to the\n     * {@code VolumeShaper} is removed after closing.\n     *\n     * If the volume does not reach 1.f when the {@code VolumeShaper} is closed\n     * (or finalized), there may be an abrupt change of volume.\n     *\n     * {@code close()} may be safely called after a prior {@code close()}.\n     * This class implements the Java {@code AutoClosable} interface and\n     * may be used with try-with-resources.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void finalize()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int applyPlayer(@NonNull VolumeShaper.Configuration configuration, @NonNull VolumeShaper.Operation operation)",
    "returnType" : "int",
    "comment" : "\n     * Internal call to apply the {@code configuration} and {@code operation} to the player.\n     * Returns a valid shaper id or throws the appropriate exception.\n     * @param configuration\n     * @param operation\n     * @return id a non-negative shaper id.\n     * @throws IllegalStateException if the player has been deallocated or is uninitialized.\n     ",
    "links" : [ ]
  }, {
    "name" : "private VolumeShaper.State getStatePlayer(int id)",
    "returnType" : "VolumeShaper.State",
    "comment" : "\n     * Internal call to retrieve the current {@code VolumeShaper} state.\n     * @param id\n     * @return the current {@code VolumeShaper.State}\n     * @throws IllegalStateException if the player has been deallocated or is uninitialized.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " int getId()", "public void apply(@NonNull Operation operation)", "public void replace(@NonNull Configuration configuration, @NonNull Operation operation, boolean join)", "public float getVolume()", "public void close()", "protected void finalize()", "private int applyPlayer(@NonNull VolumeShaper.Configuration configuration, @NonNull VolumeShaper.Operation operation)", "private VolumeShaper.State getStatePlayer(int id)" ],
  "variableNames" : [ "mId", "mWeakPlayerBase" ]
}