{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/WindowManagerImpl.java",
  "packageName" : "android.view",
  "className" : "WindowManagerImpl",
  "comment" : "\n * Provides low-level communication with the system window manager for\n * operations that are bound to a particular context, display or parent window.\n * Instances of this object are sensitive to the compatibility info associated\n * with the running application.\n *\n * This object implements the {@link ViewManager} interface,\n * allowing you to add any View subclass as a top-level window on the screen.\n * Additional window manager specific layout parameters are defined for\n * control over how windows are displayed.  It also implements the {@link WindowManager}\n * interface, allowing you to control the displays attached to the device.\n *\n * <p>Applications will not normally use WindowManager directly, instead relying\n * on the higher-level facilities in {@link android.app.Activity} and\n * {@link android.app.Dialog}.\n *\n * <p>Even for low-level window manager access, it is almost never correct to use\n * this class.  For example, {@link android.app.Activity#getWindowManager}\n * provides a window manager for adding windows that are associated with that\n * activity -- the window manager will not normally allow you to add arbitrary\n * windows that are not associated with an activity.\n *\n * @see WindowManager\n * @see WindowManagerGlobal\n * @hide\n ",
  "links" : [ "android.view.WindowManager", "android.app.Dialog", "android.app.Activity", "android.view.ViewManager", "android.app.Activity#getWindowManager" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGlobal",
    "type" : "WindowManagerGlobal",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mParentWindow",
    "type" : "Window",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDefaultToken",
    "type" : "IBinder",
    "comment" : "\n     * If {@link LayoutParams#token} is {@code null} and no parent window is specified, the value\n     * of {@link LayoutParams#token} will be overridden to {@code mDefaultToken}.\n     ",
    "links" : [ "#token" ]
  }, {
    "name" : "mWindowContextToken",
    "type" : "IBinder",
    "comment" : "\n     * This token will be set to {@link LayoutParams#mWindowContextToken} and used to receive\n     * configuration changes from the server side.\n     ",
    "links" : [ "#mWindowContextToken" ]
  }, {
    "name" : "mOnFpsCallbackListenerProxies",
    "type" : "ArrayList<OnFpsCallbackListenerProxy>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWindowMetricsController",
    "type" : "WindowMetricsController",
    "comment" : " A controller to handle {@link WindowMetrics} related APIs ",
    "links" : [ "android.view.WindowMetrics" ]
  } ],
  "methods" : [ {
    "name" : "public WindowManagerImpl createLocalWindowManager(Window parentWindow)",
    "returnType" : "WindowManagerImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public WindowManagerImpl createPresentationWindowManager(Context displayContext)",
    "returnType" : "WindowManagerImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static WindowManager createWindowContextWindowManager(Context context)",
    "returnType" : "WindowManager",
    "comment" : " Creates a {@link WindowManager} for a {@link WindowContext}. ",
    "links" : [ "android.view.WindowManager", "android.window.WindowContext" ]
  }, {
    "name" : "public void setDefaultToken(IBinder token)",
    "returnType" : "void",
    "comment" : "\n     * Sets the window token to assign when none is specified by the client or\n     * available from the parent window.\n     *\n     * @param token The default token to assign.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addView(@NonNull View view, @NonNull ViewGroup.LayoutParams params)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void updateViewLayout(@NonNull View view, @NonNull ViewGroup.LayoutParams params)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void applyTokens(@NonNull ViewGroup.LayoutParams params)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void assertWindowContextTypeMatches(@LayoutParams.WindowType int windowType)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeView(View view)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeViewImmediate(View view)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void requestAppKeyboardShortcuts(final KeyboardShortcutsReceiver receiver, int deviceId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void requestImeKeyboardShortcuts(final KeyboardShortcutsReceiver receiver, int deviceId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Display getDefaultDisplay()",
    "returnType" : "Display",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Region getCurrentImeTouchRegion()",
    "returnType" : "Region",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setShouldShowWithInsecureKeyguard(int displayId, boolean shouldShow)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setShouldShowSystemDecors(int displayId, boolean shouldShow)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean shouldShowSystemDecors(int displayId)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setDisplayImePolicy(int displayId, @DisplayImePolicy int imePolicy)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getDisplayImePolicy(int displayId)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isGlobalKey(int keyCode)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public WindowMetrics getCurrentWindowMetrics()",
    "returnType" : "WindowMetrics",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public WindowMetrics getMaximumWindowMetrics()",
    "returnType" : "WindowMetrics",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Set<WindowMetrics> getPossibleMaximumWindowMetrics(int displayId)",
    "returnType" : "Set<WindowMetrics>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void holdLock(IBinder token, int durationMs)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isCrossWindowBlurEnabled()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addCrossWindowBlurEnabledListener(@NonNull Consumer<Boolean> listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addCrossWindowBlurEnabledListener(@NonNull @CallbackExecutor Executor executor, @NonNull Consumer<Boolean> listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeCrossWindowBlurEnabledListener(@NonNull Consumer<Boolean> listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addProposedRotationListener(@NonNull @CallbackExecutor Executor executor, @NonNull IntConsumer listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeProposedRotationListener(@NonNull IntConsumer listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isTaskSnapshotSupported()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void registerTaskFpsCallback(@IntRange(from = 0) int taskId, @NonNull Executor executor, TaskFpsCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void unregisterTaskFpsCallback(TaskFpsCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Bitmap snapshotTaskForRecents(int taskId)",
    "returnType" : "Bitmap",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public IBinder getDefaultToken()",
    "returnType" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<ComponentName> notifyScreenshotListeners(int displayId)",
    "returnType" : "List<ComponentName>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean replaceContentOnDisplayWithMirror(int displayId, @NonNull Window window)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean replaceContentOnDisplayWithSc(int displayId, @NonNull SurfaceControl sc)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void registerTrustedPresentationListener(@NonNull IBinder window, @NonNull TrustedPresentationThresholds thresholds, @NonNull Executor executor, @NonNull Consumer<Boolean> listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void unregisterTrustedPresentationListener(@NonNull Consumer<Boolean> listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public InputTransferToken registerBatchedSurfaceControlInputReceiver(@NonNull InputTransferToken hostInputTransferToken, @NonNull SurfaceControl surfaceControl, @NonNull Choreographer choreographer, @NonNull SurfaceControlInputReceiver receiver)",
    "returnType" : "InputTransferToken",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public InputTransferToken registerUnbatchedSurfaceControlInputReceiver(@NonNull InputTransferToken hostInputTransferToken, @NonNull SurfaceControl surfaceControl, @NonNull Looper looper, @NonNull SurfaceControlInputReceiver receiver)",
    "returnType" : "InputTransferToken",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void unregisterSurfaceControlInputReceiver(@NonNull SurfaceControl surfaceControl)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public IBinder getSurfaceControlInputClientToken(@NonNull SurfaceControl surfaceControl)",
    "returnType" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean transferTouchGesture(@NonNull InputTransferToken transferFromToken, @NonNull InputTransferToken transferToToken)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int addScreenRecordingCallback(@NonNull @CallbackExecutor Executor executor, @NonNull Consumer<@ScreenRecordingState Integer> callback)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeScreenRecordingCallback(@NonNull Consumer<@ScreenRecordingState Integer> callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public WindowManagerImpl createLocalWindowManager(Window parentWindow)", "public WindowManagerImpl createPresentationWindowManager(Context displayContext)", "public static WindowManager createWindowContextWindowManager(Context context)", "public void setDefaultToken(IBinder token)", "public void addView(@NonNull View view, @NonNull ViewGroup.LayoutParams params)", "public void updateViewLayout(@NonNull View view, @NonNull ViewGroup.LayoutParams params)", "private void applyTokens(@NonNull ViewGroup.LayoutParams params)", "private void assertWindowContextTypeMatches(@LayoutParams.WindowType int windowType)", "public void removeView(View view)", "public void removeViewImmediate(View view)", "public void requestAppKeyboardShortcuts(final KeyboardShortcutsReceiver receiver, int deviceId)", "public void requestImeKeyboardShortcuts(final KeyboardShortcutsReceiver receiver, int deviceId)", "public Display getDefaultDisplay()", "public Region getCurrentImeTouchRegion()", "public void setShouldShowWithInsecureKeyguard(int displayId, boolean shouldShow)", "public void setShouldShowSystemDecors(int displayId, boolean shouldShow)", "public boolean shouldShowSystemDecors(int displayId)", "public void setDisplayImePolicy(int displayId, @DisplayImePolicy int imePolicy)", "public int getDisplayImePolicy(int displayId)", "public boolean isGlobalKey(int keyCode)", "public WindowMetrics getCurrentWindowMetrics()", "public WindowMetrics getMaximumWindowMetrics()", "public Set<WindowMetrics> getPossibleMaximumWindowMetrics(int displayId)", "public void holdLock(IBinder token, int durationMs)", "public boolean isCrossWindowBlurEnabled()", "public void addCrossWindowBlurEnabledListener(@NonNull Consumer<Boolean> listener)", "public void addCrossWindowBlurEnabledListener(@NonNull @CallbackExecutor Executor executor, @NonNull Consumer<Boolean> listener)", "public void removeCrossWindowBlurEnabledListener(@NonNull Consumer<Boolean> listener)", "public void addProposedRotationListener(@NonNull @CallbackExecutor Executor executor, @NonNull IntConsumer listener)", "public void removeProposedRotationListener(@NonNull IntConsumer listener)", "public boolean isTaskSnapshotSupported()", "public void registerTaskFpsCallback(@IntRange(from = 0) int taskId, @NonNull Executor executor, TaskFpsCallback callback)", "public void unregisterTaskFpsCallback(TaskFpsCallback callback)", "public Bitmap snapshotTaskForRecents(int taskId)", "public IBinder getDefaultToken()", "public List<ComponentName> notifyScreenshotListeners(int displayId)", "public boolean replaceContentOnDisplayWithMirror(int displayId, @NonNull Window window)", "public boolean replaceContentOnDisplayWithSc(int displayId, @NonNull SurfaceControl sc)", "public void registerTrustedPresentationListener(@NonNull IBinder window, @NonNull TrustedPresentationThresholds thresholds, @NonNull Executor executor, @NonNull Consumer<Boolean> listener)", "public void unregisterTrustedPresentationListener(@NonNull Consumer<Boolean> listener)", "public InputTransferToken registerBatchedSurfaceControlInputReceiver(@NonNull InputTransferToken hostInputTransferToken, @NonNull SurfaceControl surfaceControl, @NonNull Choreographer choreographer, @NonNull SurfaceControlInputReceiver receiver)", "public InputTransferToken registerUnbatchedSurfaceControlInputReceiver(@NonNull InputTransferToken hostInputTransferToken, @NonNull SurfaceControl surfaceControl, @NonNull Looper looper, @NonNull SurfaceControlInputReceiver receiver)", "public void unregisterSurfaceControlInputReceiver(@NonNull SurfaceControl surfaceControl)", "public IBinder getSurfaceControlInputClientToken(@NonNull SurfaceControl surfaceControl)", "public boolean transferTouchGesture(@NonNull InputTransferToken transferFromToken, @NonNull InputTransferToken transferToToken)", "public int addScreenRecordingCallback(@NonNull @CallbackExecutor Executor executor, @NonNull Consumer<@ScreenRecordingState Integer> callback)", "public void removeScreenRecordingCallback(@NonNull Consumer<@ScreenRecordingState Integer> callback)" ],
  "variableNames" : [ "TAG", "mGlobal", "mContext", "mParentWindow", "mDefaultToken", "mWindowContextToken", "mOnFpsCallbackListenerProxies", "mWindowMetricsController" ]
}