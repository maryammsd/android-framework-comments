{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/view/WindowManagerImpl.java",
  "packageName" : "android.view",
  "className" : "WindowManagerImpl",
  "comment" : "\n * Provides low-level communication with the system window manager for\n * operations that are bound to a particular context, display or parent window.\n * Instances of this object are sensitive to the compatibility info associated\n * with the running application.\n *\n * This object implements the {@link ViewManager} interface,\n * allowing you to add any View subclass as a top-level window on the screen.\n * Additional window manager specific layout parameters are defined for\n * control over how windows are displayed.  It also implements the {@link WindowManager}\n * interface, allowing you to control the displays attached to the device.\n *\n * <p>Applications will not normally use WindowManager directly, instead relying\n * on the higher-level facilities in {@link android.app.Activity} and\n * {@link android.app.Dialog}.\n *\n * <p>Even for low-level window manager access, it is almost never correct to use\n * this class.  For example, {@link android.app.Activity#getWindowManager}\n * provides a window manager for adding windows that are associated with that\n * activity -- the window manager will not normally allow you to add arbitrary\n * windows that are not associated with an activity.\n *\n * @see WindowManager\n * @see WindowManagerGlobal\n * @hide\n ",
  "variables" : [ {
    "name" : "mGlobal",
    "type" : "WindowManagerGlobal",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mParentWindow",
    "type" : "Window",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDefaultToken",
    "type" : "IBinder",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public WindowManagerImpl createLocalWindowManager(Window parentWindow)",
    "returnType" : "WindowManagerImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public WindowManagerImpl createPresentationWindowManager(Context displayContext)",
    "returnType" : "WindowManagerImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setDefaultToken(IBinder token)",
    "returnType" : "void",
    "comment" : "\n     * Sets the window token to assign when none is specified by the client or\n     * available from the parent window.\n     *\n     * @param token The default token to assign.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addView(@NonNull View view, @NonNull ViewGroup.LayoutParams params)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void updateViewLayout(@NonNull View view, @NonNull ViewGroup.LayoutParams params)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void applyDefaultToken(@NonNull ViewGroup.LayoutParams params)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeView(View view)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeViewImmediate(View view)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void requestAppKeyboardShortcuts(final KeyboardShortcutsReceiver receiver, int deviceId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Display getDefaultDisplay()",
    "returnType" : "Display",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Region getCurrentImeTouchRegion()",
    "returnType" : "Region",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setShouldShowWithInsecureKeyguard(int displayId, boolean shouldShow)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setShouldShowSystemDecors(int displayId, boolean shouldShow)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean shouldShowSystemDecors(int displayId)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setShouldShowIme(int displayId, boolean shouldShow)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean shouldShowIme(int displayId)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public WindowMetrics getCurrentWindowMetrics()",
    "returnType" : "WindowMetrics",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Rect getCurrentBounds(Context context)",
    "returnType" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public WindowMetrics getMaximumWindowMetrics()",
    "returnType" : "WindowMetrics",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Rect getMaximumBounds()",
    "returnType" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private WindowInsets computeWindowInsets(Rect bounds)",
    "returnType" : "WindowInsets",
    "comment" : " TODO(b/150095967): Set window type to LayoutParams",
    "links" : [ ]
  }, {
    "name" : "private WindowInsets getWindowInsetsFromServer(WindowManager.LayoutParams attrs, Rect bounds)",
    "returnType" : "WindowInsets",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "mGlobal", "mContext", "mParentWindow", "mDefaultToken" ],
  "methodNames" : [ "public WindowManagerImpl createLocalWindowManager(Window parentWindow)", "public WindowManagerImpl createPresentationWindowManager(Context displayContext)", "public void setDefaultToken(IBinder token)", "public void addView(@NonNull View view, @NonNull ViewGroup.LayoutParams params)", "public void updateViewLayout(@NonNull View view, @NonNull ViewGroup.LayoutParams params)", "private void applyDefaultToken(@NonNull ViewGroup.LayoutParams params)", "public void removeView(View view)", "public void removeViewImmediate(View view)", "public void requestAppKeyboardShortcuts(final KeyboardShortcutsReceiver receiver, int deviceId)", "public Display getDefaultDisplay()", "public Region getCurrentImeTouchRegion()", "public void setShouldShowWithInsecureKeyguard(int displayId, boolean shouldShow)", "public void setShouldShowSystemDecors(int displayId, boolean shouldShow)", "public boolean shouldShowSystemDecors(int displayId)", "public void setShouldShowIme(int displayId, boolean shouldShow)", "public boolean shouldShowIme(int displayId)", "public WindowMetrics getCurrentWindowMetrics()", "private static Rect getCurrentBounds(Context context)", "public WindowMetrics getMaximumWindowMetrics()", "private Rect getMaximumBounds()", "private WindowInsets computeWindowInsets(Rect bounds)", "private WindowInsets getWindowInsetsFromServer(WindowManager.LayoutParams attrs, Rect bounds)" ]
}