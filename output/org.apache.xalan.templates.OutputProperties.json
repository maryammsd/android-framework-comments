{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xalan/templates/OutputProperties.java",
  "packageName" : "org.apache.xalan.templates",
  "className" : "OutputProperties",
  "comment" : "\n * This class provides information from xsl:output elements. It is mainly\n * a wrapper for {@link java.util.Properties}, but can not extend that class\n * because it must be part of the {@link org.apache.xalan.templates.ElemTemplateElement}\n * heararchy.\n * <p>An OutputProperties list can contain another OutputProperties list as\n * its \"defaults\"; this second property list is searched if the property key\n * is not found in the original property list.</p>\n * @see <a href=\"http://www.w3.org/TR/xslt#dtd\">XSLT DTD</a>\n * @see <a href=\"http://www.w3.org/TR/xslt#output\">xsl:output in XSLT Specification</a>\n *\n ",
  "links" : [ "java.util.Properties", "org.apache.xalan.templates.ElemTemplateElement" ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_properties",
    "type" : "Properties",
    "comment" : " The output properties.\n   *  @serial ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Object clone()",
    "returnType" : "Object",
    "comment" : "\n   * Clone this OutputProperties, including a clone of the wrapped Properties\n   * reference.\n   *\n   * @return A new OutputProperties reference, mutation of which should not\n   *         effect this object.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setProperty(QName key, String value)",
    "returnType" : "void",
    "comment" : "\n   * Set an output property.\n   *\n   * @param key the key to be placed into the property list.\n   * @param value the value corresponding to <tt>key</tt>.\n   * @see javax.xml.transform.OutputKeys\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setProperty(String key, String value)",
    "returnType" : "void",
    "comment" : "\n   * Set an output property.\n   *\n   * @param key the key to be placed into the property list.\n   * @param value the value corresponding to <tt>key</tt>.\n   * @see javax.xml.transform.OutputKeys\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getProperty(QName key)",
    "returnType" : "String",
    "comment" : "\n   * Searches for the property with the specified key in the property list.\n   * If the key is not found in this property list, the default property list,\n   * and its defaults, recursively, are then checked. The method returns\n   * <code>null</code> if the property is not found.\n   *\n   * @param   key   the property key.\n   * @return  the value in this property list with the specified key value.\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getProperty(String key)",
    "returnType" : "String",
    "comment" : "\n   * Searches for the property with the specified key in the property list.\n   * If the key is not found in this property list, the default property list,\n   * and its defaults, recursively, are then checked. The method returns\n   * <code>null</code> if the property is not found.\n   *\n   * @param   key   the property key.\n   * @return  the value in this property list with the specified key value.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setBooleanProperty(QName key, boolean value)",
    "returnType" : "void",
    "comment" : "\n   * Set an output property.\n   *\n   * @param key the key to be placed into the property list.\n   * @param value the value corresponding to <tt>key</tt>.\n   * @see javax.xml.transform.OutputKeys\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setBooleanProperty(String key, boolean value)",
    "returnType" : "void",
    "comment" : "\n   * Set an output property.\n   *\n   * @param key the key to be placed into the property list.\n   * @param value the value corresponding to <tt>key</tt>.\n   * @see javax.xml.transform.OutputKeys\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean getBooleanProperty(QName key)",
    "returnType" : "boolean",
    "comment" : "\n   * Searches for the boolean property with the specified key in the property list.\n   * If the key is not found in this property list, the default property list,\n   * and its defaults, recursively, are then checked. The method returns\n   * <code>false</code> if the property is not found, or if the value is other\n   * than \"yes\".\n   *\n   * @param   key   the property key.\n   * @return  the value in this property list as a boolean value, or false\n   * if null or not \"yes\".\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean getBooleanProperty(String key)",
    "returnType" : "boolean",
    "comment" : "\n   * Searches for the boolean property with the specified key in the property list.\n   * If the key is not found in this property list, the default property list,\n   * and its defaults, recursively, are then checked. The method returns\n   * <code>false</code> if the property is not found, or if the value is other\n   * than \"yes\".\n   *\n   * @param   key   the property key.\n   * @return  the value in this property list as a boolean value, or false\n   * if null or not \"yes\".\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setIntProperty(QName key, int value)",
    "returnType" : "void",
    "comment" : "\n   * Set an output property.\n   *\n   * @param key the key to be placed into the property list.\n   * @param value the value corresponding to <tt>key</tt>.\n   * @see javax.xml.transform.OutputKeys\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setIntProperty(String key, int value)",
    "returnType" : "void",
    "comment" : "\n   * Set an output property.\n   *\n   * @param key the key to be placed into the property list.\n   * @param value the value corresponding to <tt>key</tt>.\n   * @see javax.xml.transform.OutputKeys\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getIntProperty(QName key)",
    "returnType" : "int",
    "comment" : "\n   * Searches for the int property with the specified key in the property list.\n   * If the key is not found in this property list, the default property list,\n   * and its defaults, recursively, are then checked. The method returns\n   * <code>false</code> if the property is not found, or if the value is other\n   * than \"yes\".\n   *\n   * @param   key   the property key.\n   * @return  the value in this property list as a int value, or false\n   * if null or not a number.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getIntProperty(String key)",
    "returnType" : "int",
    "comment" : "\n   * Searches for the int property with the specified key in the property list.\n   * If the key is not found in this property list, the default property list,\n   * and its defaults, recursively, are then checked. The method returns\n   * <code>false</code> if the property is not found, or if the value is other\n   * than \"yes\".\n   *\n   * @param   key   the property key.\n   * @return  the value in this property list as a int value, or false\n   * if null or not a number.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setQNameProperty(QName key, QName value)",
    "returnType" : "void",
    "comment" : "\n   * Set an output property with a QName value.  The QName will be turned\n   * into a string with the namespace in curly brackets.\n   *\n   * @param key the key to be placed into the property list.\n   * @param value the value corresponding to <tt>key</tt>.\n   * @see javax.xml.transform.OutputKeys\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setMethodDefaults(String method)",
    "returnType" : "void",
    "comment" : "\n   * Reset the default properties based on the method.\n   *\n   * @param method the method value.\n   * @see javax.xml.transform.OutputKeys\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setQNameProperty(String key, QName value)",
    "returnType" : "void",
    "comment" : "\n   * Set an output property with a QName value.  The QName will be turned\n   * into a string with the namespace in curly brackets.\n   *\n   * @param key the key to be placed into the property list.\n   * @param value the value corresponding to <tt>key</tt>.\n   * @see javax.xml.transform.OutputKeys\n   ",
    "links" : [ ]
  }, {
    "name" : "public QName getQNameProperty(QName key)",
    "returnType" : "QName",
    "comment" : "\n   * Searches for the qname property with the specified key in the property list.\n   * If the key is not found in this property list, the default property list,\n   * and its defaults, recursively, are then checked. The method returns\n   * <code>null</code> if the property is not found.\n   *\n   * @param   key   the property key.\n   * @return  the value in this property list as a QName value, or false\n   * if null or not \"yes\".\n   ",
    "links" : [ ]
  }, {
    "name" : "public QName getQNameProperty(String key)",
    "returnType" : "QName",
    "comment" : "\n   * Searches for the qname property with the specified key in the property list.\n   * If the key is not found in this property list, the default property list,\n   * and its defaults, recursively, are then checked. The method returns\n   * <code>null</code> if the property is not found.\n   *\n   * @param   key   the property key.\n   * @return  the value in this property list as a QName value, or false\n   * if null or not \"yes\".\n   ",
    "links" : [ ]
  }, {
    "name" : "public static QName getQNameProperty(String key, Properties props)",
    "returnType" : "QName",
    "comment" : "\n   * Searches for the qname property with the specified key in the property list.\n   * If the key is not found in this property list, the default property list,\n   * and its defaults, recursively, are then checked. The method returns\n   * <code>null</code> if the property is not found.\n   *\n   * @param   key   the property key.\n   * @param props the list of properties to search in.\n   * @return  the value in this property list as a QName value, or false\n   * if null or not \"yes\".\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setQNameProperties(QName key, Vector v)",
    "returnType" : "void",
    "comment" : "\n   * Set an output property with a QName list value.  The QNames will be turned\n   * into strings with the namespace in curly brackets.\n   *\n   * @param key the key to be placed into the property list.\n   * @param v non-null list of QNames corresponding to <tt>key</tt>.\n   * @see javax.xml.transform.OutputKeys\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setQNameProperties(String key, Vector v)",
    "returnType" : "void",
    "comment" : "\n   * Set an output property with a QName list value.  The QNames will be turned\n   * into strings with the namespace in curly brackets.\n   *\n   * @param key the key to be placed into the property list.\n   * @param v non-null list of QNames corresponding to <tt>key</tt>.\n   * @see javax.xml.transform.OutputKeys\n   ",
    "links" : [ ]
  }, {
    "name" : "public Vector getQNameProperties(QName key)",
    "returnType" : "Vector",
    "comment" : "\n   * Searches for the list of qname properties with the specified key in\n   * the property list.\n   * If the key is not found in this property list, the default property list,\n   * and its defaults, recursively, are then checked. The method returns\n   * <code>null</code> if the property is not found.\n   *\n   * @param   key   the property key.\n   * @return  the value in this property list as a vector of QNames, or false\n   * if null or not \"yes\".\n   ",
    "links" : [ ]
  }, {
    "name" : "public Vector getQNameProperties(String key)",
    "returnType" : "Vector",
    "comment" : "\n   * Searches for the list of qname properties with the specified key in\n   * the property list.\n   * If the key is not found in this property list, the default property list,\n   * and its defaults, recursively, are then checked. The method returns\n   * <code>null</code> if the property is not found.\n   *\n   * @param   key   the property key.\n   * @return  the value in this property list as a vector of QNames, or false\n   * if null or not \"yes\".\n   ",
    "links" : [ ]
  }, {
    "name" : "public static Vector getQNameProperties(String key, Properties props)",
    "returnType" : "Vector",
    "comment" : "\n   * Searches for the list of qname properties with the specified key in\n   * the property list.\n   * If the key is not found in this property list, the default property list,\n   * and its defaults, recursively, are then checked. The method returns\n   * <code>null</code> if the property is not found.\n   *\n   * @param   key   the property key.\n   * @param props the list of properties to search in.\n   * @return  the value in this property list as a vector of QNames, or false\n   * if null or not \"yes\".\n   ",
    "links" : [ ]
  }, {
    "name" : "public void recompose(StylesheetRoot root) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n   * This function is called to recompose all of the output format extended elements.\n   *\n   * @param root non-null reference to the stylesheet root object.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void compose(StylesheetRoot sroot) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n   * This function is called after everything else has been\n   * recomposed, and allows the template to set remaining\n   * values that may be based on some other property that\n   * depends on recomposition.\n   ",
    "links" : [ ]
  }, {
    "name" : "public Properties getProperties()",
    "returnType" : "Properties",
    "comment" : "\n   * Get the Properties object that this class wraps.\n   *\n   * @return non-null reference to Properties object.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void copyFrom(Properties src)",
    "returnType" : "void",
    "comment" : "\n   * Copy the keys and values from the source to this object.  This will\n   * not copy the default values.  This is meant to be used by going from\n   * a higher precedence object to a lower precedence object, so that if a\n   * key already exists, this method will not reset it.\n   *\n   * @param src non-null reference to the source properties.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void copyFrom(Properties src, boolean shouldResetDefaults)",
    "returnType" : "void",
    "comment" : "\n   * Copy the keys and values from the source to this object.  This will\n   * not copy the default values.  This is meant to be used by going from\n   * a higher precedence object to a lower precedence object, so that if a\n   * key already exists, this method will not reset it.\n   *\n   * @param src non-null reference to the source properties.\n   * @param shouldResetDefaults true if the defaults should be reset based on \n   *                            the method property.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void copyFrom(OutputProperties opsrc) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n   * Copy the keys and values from the source to this object.  This will\n   * not copy the default values.  This is meant to be used by going from\n   * a higher precedence object to a lower precedence object, so that if a\n   * key already exists, this method will not reset it.\n   *\n   * @param opsrc non-null reference to an OutputProperties.\n   ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isLegalPropertyKey(String key)",
    "returnType" : "boolean",
    "comment" : "\n   * Report if the key given as an argument is a legal xsl:output key.\n   *\n   * @param key non-null reference to key name.\n   *\n   * @return true if key is legal.\n   ",
    "links" : [ ]
  }, {
    "name" : "public static Properties getDefaultMethodProperties(String method)",
    "returnType" : "Properties",
    "comment" : "\n     * Creates an empty OutputProperties with the defaults specified by\n     * a property file.  The method argument is used to construct a string of\n     * the form output_[method].properties (for instance, output_html.properties).\n     * The output_xml.properties file is always used as the base.\n     * <p>At the moment, anything other than 'text', 'xml', and 'html', will\n     * use the output_xml.properties file.</p>\n     *\n     * @param   method non-null reference to method name.\n     *\n     * @return Properties object that holds the defaults for the given method.\n     * \n     * @deprecated Use org.apache.xml.serializer.OuputPropertiesFactory.\n     * getDefaultMethodProperties directly.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Object clone()", "public void setProperty(QName key, String value)", "public void setProperty(String key, String value)", "public String getProperty(QName key)", "public String getProperty(String key)", "public void setBooleanProperty(QName key, boolean value)", "public void setBooleanProperty(String key, boolean value)", "public boolean getBooleanProperty(QName key)", "public boolean getBooleanProperty(String key)", "public void setIntProperty(QName key, int value)", "public void setIntProperty(String key, int value)", "public int getIntProperty(QName key)", "public int getIntProperty(String key)", "public void setQNameProperty(QName key, QName value)", "public void setMethodDefaults(String method)", "public void setQNameProperty(String key, QName value)", "public QName getQNameProperty(QName key)", "public QName getQNameProperty(String key)", "public static QName getQNameProperty(String key, Properties props)", "public void setQNameProperties(QName key, Vector v)", "public void setQNameProperties(String key, Vector v)", "public Vector getQNameProperties(QName key)", "public Vector getQNameProperties(String key)", "public static Vector getQNameProperties(String key, Properties props)", "public void recompose(StylesheetRoot root) throws TransformerException", "public void compose(StylesheetRoot sroot) throws TransformerException", "public Properties getProperties()", "public void copyFrom(Properties src)", "public void copyFrom(Properties src, boolean shouldResetDefaults)", "public void copyFrom(OutputProperties opsrc) throws TransformerException", "public static boolean isLegalPropertyKey(String key)", "public static Properties getDefaultMethodProperties(String method)" ],
  "variableNames" : [ "serialVersionUID", "m_properties" ]
}