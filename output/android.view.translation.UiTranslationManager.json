{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/translation/UiTranslationManager.java",
  "packageName" : "android.view.translation",
  "className" : "UiTranslationManager",
  "comment" : "\n * <p>The {@link UiTranslationManager} class provides ways for apps to use the ui translation\n * function in framework.\n *\n * <p> The UI translation provides ways for apps to support inline translation for the views. For\n * example the system supports text translation for {@link TextView}. To support UI translation for\n * your views, you should override the following methods to provide the content to be translated\n * and deal with the translated result. Here is an example for {@link TextView}-like views:\n *\n * <pre><code>\n * public class MyTextView extends View {\n *     public MyTextView(...) {\n *         // implements how to show the translated result in your View in\n *         // ViewTranslationCallback and set it by setViewTranslationCallback()\n *         setViewTranslationCallback(new MyViewTranslationCallback());\n *     }\n *\n *     public void onCreateViewTranslationRequest(int[] supportedFormats,\n *             Consumer<ViewTranslationRequest> requestsCollector) {\n *        // collect the information that needs to be translated\n *        ViewTranslationRequest.Builder requestBuilder =\n *                     new ViewTranslationRequest.Builder(getAutofillId());\n *        requestBuilder.setValue(ViewTranslationRequest.ID_TEXT,\n *                         TranslationRequestValue.forText(etText()));\n *        requestsCollector.accept(requestBuilder.build());\n *     }\n *\n *     public void onProvideContentCaptureStructure(\n *             ViewStructure structure, int flags) {\n *         // set ViewTranslationResponse\n *         super.onViewTranslationResponse(response);\n *     }\n * }\n * </code></pre>\n *\n * <p>If your view provides its own virtual hierarchy (for example, if it's a browser that draws the\n * HTML using {@link android.graphics.Canvas} or native libraries in a different render process),\n * you must override {@link View#onCreateVirtualViewTranslationRequests(long[], int[], Consumer)} to\n * provide the content to be translated and implement\n * {@link View#onVirtualViewTranslationResponses(android.util.LongSparseArray)} for the translated\n * result. You also need to implement {@link android.view.translation.ViewTranslationCallback} to\n * handle the translated information show or hide in your {@link View}.\n ",
  "links" : [ "android.view.translation.ViewTranslationCallback", "android.widget.TextView", "android.view.translation.UiTranslationManager", "android.view.View#onVirtualViewTranslationResponses(android.util.LongSparseArray)", "android.view.View", "android.graphics.Canvas", "android.view.View#onCreateVirtualViewTranslationRequests(long" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOG_TAG",
    "type" : "String",
    "comment" : "\n     * The tag which uses for enabling debug log dump. To enable it, we can use command \"adb shell\n     * setprop log.tag.UiTranslation DEBUG\".\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "STATE_UI_TRANSLATION_STARTED",
    "type" : "int",
    "comment" : "\n     * The state the caller requests to enable UI translation.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "STATE_UI_TRANSLATION_PAUSED",
    "type" : "int",
    "comment" : "\n     * The state caller requests to pause UI translation. It will switch back to the original text.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "STATE_UI_TRANSLATION_RESUMED",
    "type" : "int",
    "comment" : "\n     * The state caller requests to resume the paused UI translation. It will show the translated\n     * text again if the text had been translated.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "STATE_UI_TRANSLATION_FINISHED",
    "type" : "int",
    "comment" : "\n     * The state caller requests to disable UI translation when it no longer needs translation.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_STATE",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_SOURCE_LOCALE",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_TARGET_LOCALE",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_PACKAGE_NAME",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "ITranslationManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallbacks",
    "type" : "Map<UiTranslationStateCallback, IRemoteCallback>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void startTranslation(@NonNull TranslationSpec sourceSpec, @NonNull TranslationSpec targetSpec, @NonNull List<AutofillId> viewIds, @NonNull ActivityId activityId)",
    "returnType" : "void",
    "comment" : "\n     * @removed Use {@link #startTranslation(TranslationSpec, TranslationSpec, List, ActivityId,\n     * UiTranslationSpec)} instead.\n     * @hide\n     ",
    "links" : [ "#startTranslation(TranslationSpec" ]
  }, {
    "name" : "public void startTranslation(@NonNull TranslationSpec sourceSpec, @NonNull TranslationSpec targetSpec, @NonNull List<AutofillId> viewIds, @NonNull ActivityId activityId, @NonNull UiTranslationSpec uiTranslationSpec)",
    "returnType" : "void",
    "comment" : "\n     * Request ui translation for a given Views.\n     *\n     * @param sourceSpec        {@link TranslationSpec} for the data to be translated.\n     * @param targetSpec        {@link TranslationSpec} for the translated data.\n     * @param viewIds           A list of the {@link View}'s {@link AutofillId} which needs to be\n     *                          translated\n     * @param activityId        the identifier for the Activity which needs ui translation\n     * @param uiTranslationSpec configuration for translation of the specified views\n     * @throws IllegalArgumentException if the no {@link View}'s {@link AutofillId} in the list\n     * @hide\n     ",
    "links" : [ "android.view.translation.TranslationSpec", "android.view.View", "android.view.autofill.AutofillId" ]
  }, {
    "name" : "public void finishTranslation(@NonNull ActivityId activityId)",
    "returnType" : "void",
    "comment" : "\n     * Request to disable the ui translation. It will destroy all the {@link Translator}s and no\n     * longer to show the translated text.\n     *\n     * @param activityId the identifier for the Activity which needs ui translation\n     * @throws NullPointerException the activityId or\n     *                              {@link android.app.assist.ActivityId#getToken()} is {@code null}\n     * @hide\n     ",
    "links" : [ "android.view.translation.Translator", "android.app.assist.ActivityId#getToken()" ]
  }, {
    "name" : "public void pauseTranslation(@NonNull ActivityId activityId)",
    "returnType" : "void",
    "comment" : "\n     * Request to pause the current ui translation's {@link Translator} which will switch back to\n     * the original language.\n     *\n     * @param activityId the identifier for the Activity which needs ui translation\n     * @throws NullPointerException the activityId or\n     *                              {@link android.app.assist.ActivityId#getToken()} is {@code null}\n     * @hide\n     ",
    "links" : [ "android.view.translation.Translator", "android.app.assist.ActivityId#getToken()" ]
  }, {
    "name" : "public void resumeTranslation(@NonNull ActivityId activityId)",
    "returnType" : "void",
    "comment" : "\n     * Request to resume the paused ui translation's {@link Translator} which will switch to the\n     * translated language if the text had been translated.\n     *\n     * @param activityId the identifier for the Activity which needs ui translation\n     * @throws NullPointerException the activityId or\n     *                              {@link android.app.assist.ActivityId#getToken()} is {@code null}\n     * @hide\n     ",
    "links" : [ "android.view.translation.Translator", "android.app.assist.ActivityId#getToken()" ]
  }, {
    "name" : "public void registerUiTranslationStateCallback(@NonNull @CallbackExecutor Executor executor, @NonNull UiTranslationStateCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Register for notifications of UI Translation state changes on the foreground Activity. This\n     * is available to the owning application itself and also the current input method.\n     * <p>\n     * The application whose UI is being translated can use this to customize the UI Translation\n     * behavior in ways that aren't made easy by methods like\n     * {@link View#onCreateViewTranslationRequest(int[], Consumer)}.\n     * <p>\n     * Input methods can use this to offer complementary features to UI Translation; for example,\n     * enabling outgoing message translation when the system is translating incoming messages in a\n     * communication app.\n     * <p>\n     * Starting from {@link android.os.Build.VERSION_CODES#TIRAMISU}, if Activities are already\n     * being translated when a callback is registered, methods on the callback will be invoked for\n     * each translated activity, depending on the state of translation:\n     * <ul>\n     *     <li>If translation is <em>not</em> paused,\n     *     {@link UiTranslationStateCallback#onStarted} will be invoked.</li>\n     *     <li>If translation <em>is</em> paused, {@link UiTranslationStateCallback#onStarted}\n     *     will first be invoked, followed by {@link UiTranslationStateCallback#onPaused}.</li>\n     * </ul>\n     *\n     * @param callback the callback to register for receiving the state change\n     *                 notifications\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#TIRAMISU", "android.view.translation.UiTranslationStateCallback#onStarted", "android.view.translation.UiTranslationStateCallback#onPaused", "android.view.View#onCreateViewTranslationRequest(int" ]
  }, {
    "name" : "public void unregisterUiTranslationStateCallback(@NonNull UiTranslationStateCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Unregister {@code callback}.\n     *\n     * @see #registerUiTranslationStateCallback(Executor, UiTranslationStateCallback)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onTranslationFinished(boolean activityDestroyed, ActivityId activityId, ComponentName componentName)",
    "returnType" : "void",
    "comment" : "\n     * Notify apps the translation is finished because {@link #finishTranslation(ActivityId)} is\n     * called or Activity is destroyed.\n     *\n     * @param activityDestroyed if the ui translation is finished because of activity destroyed.\n     * @param activityId        the identifier for the Activity which needs ui translation\n     * @param componentName     the ui translated Activity componentName.\n     * @hide\n     ",
    "links" : [ "#finishTranslation(ActivityId)" ]
  } ],
  "methodNames" : [ "public void startTranslation(@NonNull TranslationSpec sourceSpec, @NonNull TranslationSpec targetSpec, @NonNull List<AutofillId> viewIds, @NonNull ActivityId activityId)", "public void startTranslation(@NonNull TranslationSpec sourceSpec, @NonNull TranslationSpec targetSpec, @NonNull List<AutofillId> viewIds, @NonNull ActivityId activityId, @NonNull UiTranslationSpec uiTranslationSpec)", "public void finishTranslation(@NonNull ActivityId activityId)", "public void pauseTranslation(@NonNull ActivityId activityId)", "public void resumeTranslation(@NonNull ActivityId activityId)", "public void registerUiTranslationStateCallback(@NonNull @CallbackExecutor Executor executor, @NonNull UiTranslationStateCallback callback)", "public void unregisterUiTranslationStateCallback(@NonNull UiTranslationStateCallback callback)", "public void onTranslationFinished(boolean activityDestroyed, ActivityId activityId, ComponentName componentName)" ],
  "variableNames" : [ "TAG", "LOG_TAG", "STATE_UI_TRANSLATION_STARTED", "STATE_UI_TRANSLATION_PAUSED", "STATE_UI_TRANSLATION_RESUMED", "STATE_UI_TRANSLATION_FINISHED", "EXTRA_STATE", "EXTRA_SOURCE_LOCALE", "EXTRA_TARGET_LOCALE", "EXTRA_PACKAGE_NAME", "mContext", "mService", "mCallbacks" ]
}