{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/net/wifi/rtt/CivicLocation.java",
  "packageName" : "android.net.wifi.rtt",
  "className" : "CivicLocation",
  "comment" : "\n * Decodes the Type Length Value (TLV) elements found in a Location Civic Record as defined by IEEE\n * P802.11-REVmc/D8.0 section 9.4.2.22.13 using the format described in IETF RFC 4776.\n *\n * <p>The TLVs each define a key, value pair for a civic address type such as apt, street, city,\n * county, and country. The class provides a general getter method to extract a value for an element\n * key, returning null if not set.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "ADDRESS_LINE_0_ROOM_DESK_FLOOR",
    "type" : "int",
    "comment" : " Address (class) line indexes",
    "links" : [ ]
  }, {
    "name" : "ADDRESS_LINE_1_NUMBER_ROAD_SUFFIX_APT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ADDRESS_LINE_2_CITY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ADDRESS_LINE_3_STATE_POSTAL_CODE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ADDRESS_LINE_4_COUNTRY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MIN_CIVIC_BUFFER_SIZE",
    "type" : "int",
    "comment" : " Buffer management",
    "links" : [ ]
  }, {
    "name" : "MAX_CIVIC_BUFFER_SIZE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "COUNTRY_CODE_LENGTH",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BYTE_MASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TLV_TYPE_INDEX",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TLV_LENGTH_INDEX",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TLV_VALUE_INDEX",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsValid",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCountryCode",
    "type" : "String",
    "comment" : " Two character country code (ISO 3166 standard).",
    "links" : [ ]
  }, {
    "name" : "mCivicAddressElements",
    "type" : "SparseArray<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<CivicLocation>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel parcel, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean parseCivicTLVs(byte[] civicTLVs)",
    "returnType" : "boolean",
    "comment" : "\n     * Check TLV format and store TLV key/value pairs in this object so they can be queried by key.\n     *\n     * @param civicTLVs the buffer of TLV elements\n     * @return a boolean indicating success of the parsing process\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getCivicElementValue(@CivicLocationKeysType int key)",
    "returnType" : "String",
    "comment" : "\n     * Getter for the value of a civic Address element type.\n     *\n     * @param key an integer code for the element type key\n     * @return the string value associated with that element type\n     ",
    "links" : [ ]
  }, {
    "name" : "public SparseArray<String> toSparseArray()",
    "returnType" : "SparseArray<String>",
    "comment" : "\n     * Converts a CivicLocation object to a SparseArray.\n     *\n     * @return the SparseArray<string> representation of the CivicLocation\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Generates a comma separated string of all the defined elements.\n     *\n     * @return a compiled string representing all elements\n     ",
    "links" : [ ]
  }, {
    "name" : "public Address toAddress()",
    "returnType" : "Address",
    "comment" : "\n     * Converts Civic Location to the best effort Address Object.\n     *\n     * @return the {@link Address} object based on the Civic Location data\n     ",
    "links" : [ "android.location.Address" ]
  }, {
    "name" : "private String formatAddressElement(String label, String value)",
    "returnType" : "String",
    "comment" : "\n     * Prepares an address element so that it can be integrated into an address line convention.\n     *\n     * <p>If an address element is null, the return string will be empty e.g. \"\".\n     *\n     * @param label a string defining the type of address element\n     * @param value a string defining the elements value\n     * @return the formatted version of the value, with null values converted to empty strings\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isValid()",
    "returnType" : "boolean",
    "comment" : "\n     * Tests if the Civic Location object is valid\n     *\n     * @return a boolean defining mIsValid\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean isSparseArrayStringEqual(SparseArray<String> sa1, SparseArray<String> sa2)",
    "returnType" : "boolean",
    "comment" : "\n     * Tests if two sparse arrays are equal on a key for key basis\n     *\n     * @param sa1 the first sparse array\n     * @param sa2 the second sparse array\n     * @return the boolean result after comparing values key by key\n     ",
    "links" : [ ]
  }, {
    "name" : "private int[] getSparseArrayKeys(SparseArray<String> sa)",
    "returnType" : "int[]",
    "comment" : "\n     * Extract an array of all the keys in a SparseArray<String>\n     *\n     * @param sa the sparse array of Strings\n     * @return an integer array of all keys in the SparseArray<String>\n     ",
    "links" : [ ]
  }, {
    "name" : "private String[] getSparseArrayValues(SparseArray<String> sa)",
    "returnType" : "String[]",
    "comment" : "\n     * Extract an array of all the String values in a SparseArray<String>\n     *\n     * @param sa the sparse array of Strings\n     * @return a String array of all values in the SparseArray<String>\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "ADDRESS_LINE_0_ROOM_DESK_FLOOR", "ADDRESS_LINE_1_NUMBER_ROAD_SUFFIX_APT", "ADDRESS_LINE_2_CITY", "ADDRESS_LINE_3_STATE_POSTAL_CODE", "ADDRESS_LINE_4_COUNTRY", "MIN_CIVIC_BUFFER_SIZE", "MAX_CIVIC_BUFFER_SIZE", "COUNTRY_CODE_LENGTH", "BYTE_MASK", "TLV_TYPE_INDEX", "TLV_LENGTH_INDEX", "TLV_VALUE_INDEX", "mIsValid", "mCountryCode", "mCivicAddressElements", "CREATOR" ],
  "methodNames" : [ "public int describeContents()", "public void writeToParcel(Parcel parcel, int flags)", "private boolean parseCivicTLVs(byte[] civicTLVs)", "public String getCivicElementValue(@CivicLocationKeysType int key)", "public SparseArray<String> toSparseArray()", "public String toString()", "public Address toAddress()", "private String formatAddressElement(String label, String value)", "public boolean equals(Object obj)", "public int hashCode()", "public boolean isValid()", "private boolean isSparseArrayStringEqual(SparseArray<String> sa1, SparseArray<String> sa2)", "private int[] getSparseArrayKeys(SparseArray<String> sa)", "private String[] getSparseArrayValues(SparseArray<String> sa)" ]
}