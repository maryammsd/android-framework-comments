{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/os/BinderProxy.java",
  "packageName" : "android.os",
  "className" : "ProxyMap",
  "comment" : "\n     * Map from longs to BinderProxy, retaining only a WeakReference to the BinderProxies.\n     * We roll our own only because we need to lazily remove WeakReferences during accesses\n     * to avoid accumulating junk WeakReference objects. WeakHashMap isn't easily usable\n     * because we want weak values, not keys.\n     * Our hash table is never resized, but the number of entries is unlimited;\n     * performance degrades as occupancy increases significantly past MAIN_INDEX_SIZE.\n     * Not thread-safe. Client ensures there's a single access at a time.\n     ",
  "variables" : [ {
    "name" : "LOG_MAIN_INDEX_SIZE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAIN_INDEX_SIZE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAIN_INDEX_MASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CRASH_AT_SIZE",
    "type" : "int",
    "comment" : " Debuggable builds will throw an AssertionError if the number of map entries exceeds:",
    "links" : [ ]
  }, {
    "name" : "mWarnBucketSize",
    "type" : "int",
    "comment" : "\n         * We next warn when we exceed this bucket size.\n         ",
    "links" : [ ]
  }, {
    "name" : "WARN_INCREMENT",
    "type" : "int",
    "comment" : "\n         * Increment mWarnBucketSize by WARN_INCREMENT each time we warn.\n         ",
    "links" : [ ]
  }, {
    "name" : "mRandom",
    "type" : "int",
    "comment" : " A counter used to generate a \"random\" index. World's 2nd worst RNG.",
    "links" : [ ]
  }, {
    "name" : "MAX_NUM_INTERFACES_TO_DUMP",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMainIndexKeys",
    "type" : "Long[][]",
    "comment" : " are null, then they both are.",
    "links" : [ ]
  }, {
    "name" : "mMainIndexValues",
    "type" : "ArrayList<WeakReference<BinderProxy>>[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static int hash(long arg)",
    "returnType" : "int",
    "comment" : "\n         * Hash function tailored to native pointers.\n         * Returns a value < MAIN_INDEX_SIZE.\n         ",
    "links" : [ ]
  }, {
    "name" : "private int size()",
    "returnType" : "int",
    "comment" : "\n         * Return the total number of pairs in the map.\n         ",
    "links" : [ ]
  }, {
    "name" : "private int unclearedSize()",
    "returnType" : "int",
    "comment" : "\n         * Return the total number of pairs in the map containing values that have\n         * not been cleared. More expensive than the above size function.\n         ",
    "links" : [ ]
  }, {
    "name" : "private void remove(int hash, int index)",
    "returnType" : "void",
    "comment" : "\n         * Remove ith entry from the hash bucket indicated by hash.\n         ",
    "links" : [ ]
  }, {
    "name" : " BinderProxy get(long key)",
    "returnType" : "BinderProxy",
    "comment" : "\n         * Look up the supplied key. If we have a non-cleared entry for it, return it.\n         ",
    "links" : [ ]
  }, {
    "name" : " void set(long key, @NonNull BinderProxy value)",
    "returnType" : "void",
    "comment" : "\n         * Add the key-value pair to the map.\n         * Requires that the indicated key is not already in the map.\n         ",
    "links" : [ ]
  }, {
    "name" : "private InterfaceCount[] getSortedInterfaceCounts(int maxToReturn)",
    "returnType" : "InterfaceCount[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void dumpProxyInterfaceCounts()",
    "returnType" : "void",
    "comment" : "\n         * Dump a histogram to the logcat. Used to diagnose abnormally large proxy maps.\n         ",
    "links" : [ ]
  }, {
    "name" : "private void dumpPerUidProxyCounts()",
    "returnType" : "void",
    "comment" : "\n         * Dump per uid binder proxy counts to the logcat.\n         ",
    "links" : [ ]
  } ],
  "variableNames" : [ "LOG_MAIN_INDEX_SIZE", "MAIN_INDEX_SIZE", "MAIN_INDEX_MASK", "CRASH_AT_SIZE", "mWarnBucketSize", "WARN_INCREMENT", "mRandom", "MAX_NUM_INTERFACES_TO_DUMP", "mMainIndexKeys", "mMainIndexValues" ],
  "methodNames" : [ "private static int hash(long arg)", "private int size()", "private int unclearedSize()", "private void remove(int hash, int index)", " BinderProxy get(long key)", " void set(long key, @NonNull BinderProxy value)", "private InterfaceCount[] getSortedInterfaceCounts(int maxToReturn)", "private void dumpProxyInterfaceCounts()", "private void dumpPerUidProxyCounts()" ]
}