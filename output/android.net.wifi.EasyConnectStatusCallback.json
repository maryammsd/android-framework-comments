{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/wifi/EasyConnectStatusCallback.java",
  "packageName" : "android.net.wifi",
  "className" : "EasyConnectStatusCallback",
  "comment" : "\n * Easy Connect (DPP) Status Callback. Use this callback to get status updates (success, failure,\n * progress) from the Easy Connect operations.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "EASY_CONNECT_EVENT_SUCCESS_CONFIGURATION_SENT",
    "type" : "int",
    "comment" : "\n     * Easy Connect R1 Success event: Configuration sent (Configurator mode). This is the last\n     * and final Easy Connect event when either the local device or remote device implement R1.\n     * If both devices implement R2, this event will never be received, and the\n     * {@link #EASY_CONNECT_EVENT_SUCCESS_CONFIGURATION_APPLIED} will be received.\n     * @hide\n     ",
    "links" : [ "#EASY_CONNECT_EVENT_SUCCESS_CONFIGURATION_APPLIED" ]
  }, {
    "name" : "EASY_CONNECT_EVENT_SUCCESS_CONFIGURATION_APPLIED",
    "type" : "int",
    "comment" : "\n     * Easy Connect R2 Success event: Configuration applied by Enrollee (Configurator mode).\n     * This is the last and final Easy Connect event when both the local device and remote device\n     * implement R2. If either the local device or remote device implement R1, this event will never\n     * be received, and the {@link #EASY_CONNECT_EVENT_SUCCESS_CONFIGURATION_SENT} will be received.\n     * @hide\n     ",
    "links" : [ "#EASY_CONNECT_EVENT_SUCCESS_CONFIGURATION_SENT" ]
  }, {
    "name" : "EASY_CONNECT_EVENT_PROGRESS_AUTHENTICATION_SUCCESS",
    "type" : "int",
    "comment" : "\n     * Easy Connect Progress event: Initial authentication with peer succeeded.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EASY_CONNECT_EVENT_PROGRESS_RESPONSE_PENDING",
    "type" : "int",
    "comment" : "\n     * Easy Connect Progress event: Peer requires more time to process bootstrapping.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EASY_CONNECT_EVENT_PROGRESS_CONFIGURATION_SENT_WAITING_RESPONSE",
    "type" : "int",
    "comment" : "\n     * Easy Connect R2 Progress event: Configuration sent to Enrollee, waiting for response\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EASY_CONNECT_EVENT_PROGRESS_CONFIGURATION_ACCEPTED",
    "type" : "int",
    "comment" : "\n     * Easy Connect R2 Progress event: Configuration accepted by Enrollee, waiting for response\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EASY_CONNECT_EVENT_FAILURE_INVALID_URI",
    "type" : "int",
    "comment" : "\n     * Easy Connect Failure event: Scanned QR code is either not a Easy Connect URI, or the Easy\n     * Connect URI has errors.\n     ",
    "links" : [ ]
  }, {
    "name" : "EASY_CONNECT_EVENT_FAILURE_AUTHENTICATION",
    "type" : "int",
    "comment" : "\n     * Easy Connect Failure event: Bootstrapping/Authentication initialization process failure.\n     ",
    "links" : [ ]
  }, {
    "name" : "EASY_CONNECT_EVENT_FAILURE_NOT_COMPATIBLE",
    "type" : "int",
    "comment" : "\n     * Easy Connect Failure event: Both devices are implementing the same role and are incompatible.\n     ",
    "links" : [ ]
  }, {
    "name" : "EASY_CONNECT_EVENT_FAILURE_CONFIGURATION",
    "type" : "int",
    "comment" : "\n     * Easy Connect Failure event: Configuration process has failed due to malformed message.\n     ",
    "links" : [ ]
  }, {
    "name" : "EASY_CONNECT_EVENT_FAILURE_BUSY",
    "type" : "int",
    "comment" : "\n     * Easy Connect Failure event: Easy Connect request while in another Easy Connect exchange.\n     ",
    "links" : [ ]
  }, {
    "name" : "EASY_CONNECT_EVENT_FAILURE_TIMEOUT",
    "type" : "int",
    "comment" : "\n     * Easy Connect Failure event: No response from the peer.\n     ",
    "links" : [ ]
  }, {
    "name" : "EASY_CONNECT_EVENT_FAILURE_GENERIC",
    "type" : "int",
    "comment" : "\n     * Easy Connect Failure event: General protocol failure.\n     ",
    "links" : [ ]
  }, {
    "name" : "EASY_CONNECT_EVENT_FAILURE_NOT_SUPPORTED",
    "type" : "int",
    "comment" : "\n     * Easy Connect Failure event: Feature or option is not supported.\n     ",
    "links" : [ ]
  }, {
    "name" : "EASY_CONNECT_EVENT_FAILURE_INVALID_NETWORK",
    "type" : "int",
    "comment" : "\n     * Easy Connect Failure event: Invalid network provided to Easy Connect configurator.\n     * Network must either be WPA3-Personal (SAE) or WPA2-Personal (PSK).\n     ",
    "links" : [ ]
  }, {
    "name" : "EASY_CONNECT_EVENT_FAILURE_CANNOT_FIND_NETWORK",
    "type" : "int",
    "comment" : "\n     * Easy Connect R2 Failure event: Enrollee cannot find the network.\n     ",
    "links" : [ ]
  }, {
    "name" : "EASY_CONNECT_EVENT_FAILURE_ENROLLEE_AUTHENTICATION",
    "type" : "int",
    "comment" : "\n     * Easy Connect R2 Failure event: Enrollee failed to authenticate with the network.\n     ",
    "links" : [ ]
  }, {
    "name" : "EASY_CONNECT_EVENT_FAILURE_ENROLLEE_REJECTED_CONFIGURATION",
    "type" : "int",
    "comment" : "\n     * Easy Connect R2 Failure event: Enrollee rejected the configuration.\n     ",
    "links" : [ ]
  }, {
    "name" : "EASY_CONNECT_EVENT_FAILURE_URI_GENERATION",
    "type" : "int",
    "comment" : "\n     * Easy Connect Failure event: System failed to generate DPP URI.\n     ",
    "links" : [ ]
  }, {
    "name" : "EASY_CONNECT_EVENT_FAILURE_ENROLLEE_FAILED_TO_SCAN_NETWORK_CHANNEL",
    "type" : "int",
    "comment" : "\n     * Easy Connect Failure event: Enrollee didn't scan the network's operating channel.\n     * This error is generated when framework finds that Network's operating channel\n     * is not included in the list of channels the Enrollee scanned in attempting to\n     * discover the network prior to connection.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public abstract void onEnrolleeSuccess(int newNetworkId)",
    "returnType" : "void",
    "comment" : "\n     * Called when local Easy Connect Enrollee successfully receives a new Wi-Fi configuration from\n     * the\n     * peer Easy Connect configurator. This callback marks the successful end of the Easy Connect\n     * current Easy Connect\n     * session, and no further callbacks will be called. This callback is the successful outcome\n     * of a Easy Connect flow starting with\n     * {@link WifiManager#startEasyConnectAsEnrolleeInitiator(String, Executor,\n     * EasyConnectStatusCallback)} .\n     *\n     * @param newNetworkId New Wi-Fi configuration with a network ID received from the configurator\n     * @hide\n     ",
    "links" : [ "android.net.wifi.WifiManager#startEasyConnectAsEnrolleeInitiator(String" ]
  }, {
    "name" : "public abstract void onConfiguratorSuccess(@EasyConnectSuccessStatusCode int code)",
    "returnType" : "void",
    "comment" : "\n     * Called when a Easy Connect success event takes place, except for when configuration is\n     * received from an external Configurator. The callback onSuccessConfigReceived will be used in\n     * this case. This callback marks the successful end of the current Easy Connect session, and no\n     * further callbacks will be called. This callback is the successful outcome of a Easy Connect\n     * flow starting with {@link WifiManager#startEasyConnectAsConfiguratorInitiator(String, int,\n     * int, Executor,EasyConnectStatusCallback)}.\n     *\n     * @param code Easy Connect success status code.\n     * @hide\n     ",
    "links" : [ "android.net.wifi.WifiManager#startEasyConnectAsConfiguratorInitiator(String" ]
  }, {
    "name" : "public void onFailure(@EasyConnectFailureStatusCode int code)",
    "returnType" : "void",
    "comment" : "\n     * Called when a Easy Connect Failure event takes place. This callback marks the unsuccessful\n     * end of the current Easy Connect session, and no further callbacks will be called.\n     *\n     * @param code Easy Connect failure status code.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onFailure(@EasyConnectFailureStatusCode int code, @Nullable String ssid, @NonNull SparseArray<int[]> channelListArray, @NonNull int[] operatingClassArray)",
    "returnType" : "void",
    "comment" : "\n     * Called when a Easy Connect Failure event takes place. This callback marks the unsuccessful\n     * end of the current Easy Connect session, and no further callbacks will be called.\n     *\n     * Note: Easy Connect (DPP) R2, provides additional details for the Configurator when the\n     * remote Enrollee is unable to connect to a network. The ssid, channelList and bandList\n     * inputs are initialized only for the EASY_CONNECT_EVENT_FAILURE_CANNOT_FIND_NETWORK failure\n     * code, and the ssid and bandList are initialized for the\n     * EASY_CONNECT_EVENT_FAILURE_ENROLLEE_AUTHENTICATION failure code.\n     *\n     * @param code Easy Connect failure status code.\n     * @param ssid SSID of the network the Enrollee tried to connect to.\n     * @param channelListArray List of Global Operating classes and channel sets the Enrollee used\n     *                         to scan to find the network, see the \"DPP Connection Status Object\"\n     *                         section in the specification for the format, and Table E-4 in\n     *                         IEEE Std 802.11-2016 - Global operating classes for more details.\n     *                         The sparse array key is the Global Operating class, and the value\n     *                         is an integer array of Wi-Fi channels.\n     * @param operatingClassArray Array of bands the Enrollee supports as expressed as the Global\n     *                            Operating Class, see Table E-4 in IEEE Std 802.11-2016 - Global\n     *                            operating classes.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void onProgress(@EasyConnectProgressStatusCode int code)",
    "returnType" : "void",
    "comment" : "\n     * Called when Easy Connect events that indicate progress take place. Can be used by UI elements\n     * to show progress.\n     *\n     * @param code Easy Connect progress status code.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onBootstrapUriGenerated(@NonNull Uri dppUri)",
    "returnType" : "void",
    "comment" : "\n     * Called when local Easy Connect Responder successfully generates a DPP URI from\n     * the supplicant. This callback is the first successful outcome\n     * of a Easy Connect Responder flow starting with\n     * {@link WifiManager#startEasyConnectAsEnrolleeResponder(String, int, Executor,\n     * EasyConnectStatusCallback)} .\n     *\n     * @param dppUri DPP URI from the supplicant.\n     * @hide\n     ",
    "links" : [ "android.net.wifi.WifiManager#startEasyConnectAsEnrolleeResponder(String" ]
  } ],
  "methodNames" : [ "public abstract void onEnrolleeSuccess(int newNetworkId)", "public abstract void onConfiguratorSuccess(@EasyConnectSuccessStatusCode int code)", "public void onFailure(@EasyConnectFailureStatusCode int code)", "public void onFailure(@EasyConnectFailureStatusCode int code, @Nullable String ssid, @NonNull SparseArray<int[]> channelListArray, @NonNull int[] operatingClassArray)", "public abstract void onProgress(@EasyConnectProgressStatusCode int code)", "public void onBootstrapUriGenerated(@NonNull Uri dppUri)" ],
  "variableNames" : [ "EASY_CONNECT_EVENT_SUCCESS_CONFIGURATION_SENT", "EASY_CONNECT_EVENT_SUCCESS_CONFIGURATION_APPLIED", "EASY_CONNECT_EVENT_PROGRESS_AUTHENTICATION_SUCCESS", "EASY_CONNECT_EVENT_PROGRESS_RESPONSE_PENDING", "EASY_CONNECT_EVENT_PROGRESS_CONFIGURATION_SENT_WAITING_RESPONSE", "EASY_CONNECT_EVENT_PROGRESS_CONFIGURATION_ACCEPTED", "EASY_CONNECT_EVENT_FAILURE_INVALID_URI", "EASY_CONNECT_EVENT_FAILURE_AUTHENTICATION", "EASY_CONNECT_EVENT_FAILURE_NOT_COMPATIBLE", "EASY_CONNECT_EVENT_FAILURE_CONFIGURATION", "EASY_CONNECT_EVENT_FAILURE_BUSY", "EASY_CONNECT_EVENT_FAILURE_TIMEOUT", "EASY_CONNECT_EVENT_FAILURE_GENERIC", "EASY_CONNECT_EVENT_FAILURE_NOT_SUPPORTED", "EASY_CONNECT_EVENT_FAILURE_INVALID_NETWORK", "EASY_CONNECT_EVENT_FAILURE_CANNOT_FIND_NETWORK", "EASY_CONNECT_EVENT_FAILURE_ENROLLEE_AUTHENTICATION", "EASY_CONNECT_EVENT_FAILURE_ENROLLEE_REJECTED_CONFIGURATION", "EASY_CONNECT_EVENT_FAILURE_URI_GENERATION", "EASY_CONNECT_EVENT_FAILURE_ENROLLEE_FAILED_TO_SCAN_NETWORK_CHANNEL" ]
}