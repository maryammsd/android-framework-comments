{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/service/voice/HotwordDetector.java",
  "packageName" : "android.service.voice",
  "className" : "Callback",
  "comment" : "\n     * The callback to notify of detection events.\n     ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " void onDetected(@NonNull AlwaysOnHotwordDetector.EventPayload eventPayload)",
    "returnType" : "void",
    "comment" : " TODO: Consider creating a new EventPayload that the AOHD one subclasses.",
    "links" : [ ]
  }, {
    "name" : " void onError()",
    "returnType" : "void",
    "comment" : "\n         * Called when the detection fails due to an error.\n         *\n         * @deprecated On {@link android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE} and above,\n         * implement {@link HotwordDetector.Callback#onFailure(HotwordDetectionServiceFailure)},\n         * {@link AlwaysOnHotwordDetector.Callback#onFailure(SoundTriggerFailure)},\n         * {@link HotwordDetector.Callback#onUnknownFailure(String)} instead.\n         ",
    "links" : [ "HotwordDetector.Callback#onFailure(HotwordDetectionServiceFailure)", "android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE", "HotwordDetector.Callback#onUnknownFailure(String)", "AlwaysOnHotwordDetector.Callback#onFailure(SoundTriggerFailure)" ]
  }, {
    "name" : " void onFailure(@NonNull HotwordDetectionServiceFailure hotwordDetectionServiceFailure)",
    "returnType" : "void",
    "comment" : "\n         * Called when the detection fails due to an error occurs in the\n         * {@link HotwordDetectionService}, {@link HotwordDetectionServiceFailure} will be reported\n         * to the detector.\n         *\n         * @param hotwordDetectionServiceFailure It provides the error code, error message and\n         *                                       suggested action.\n         ",
    "links" : [ "android.service.voice.HotwordDetectionService", "android.service.voice.HotwordDetectionServiceFailure" ]
  }, {
    "name" : " void onUnknownFailure(@NonNull String errorMessage)",
    "returnType" : "void",
    "comment" : "\n         * Called when the detection fails due to an unknown error occurs, an error message\n         * will be reported to the detector.\n         *\n         * @param errorMessage It provides the error message.\n         ",
    "links" : [ ]
  }, {
    "name" : " void onRecognitionPaused()",
    "returnType" : "void",
    "comment" : "\n         * Called when the recognition is paused temporarily for some reason.\n         * This is an informational callback, and the clients shouldn't be doing anything here\n         * except showing an indication on their UI if they have to.\n         ",
    "links" : [ ]
  }, {
    "name" : " void onRecognitionResumed()",
    "returnType" : "void",
    "comment" : "\n         * Called when the recognition is resumed after it was temporarily paused.\n         * This is an informational callback, and the clients shouldn't be doing anything here\n         * except showing an indication on their UI if they have to.\n         ",
    "links" : [ ]
  }, {
    "name" : " void onRejected(@NonNull HotwordRejectedResult result)",
    "returnType" : "void",
    "comment" : "\n         * Called when the {@link HotwordDetectionService} second stage detection did not detect the\n         * keyphrase.\n         *\n         * @param result Info about the second stage detection result, provided by the\n         *         {@link HotwordDetectionService}.\n         ",
    "links" : [ "android.service.voice.HotwordDetectionService" ]
  }, {
    "name" : " void onHotwordDetectionServiceInitialized(int status)",
    "returnType" : "void",
    "comment" : "\n         * Called when the {@link HotwordDetectionService} or {@link VisualQueryDetectionService} is\n         * created by the system and given a short amount of time to report their initialization\n         * state.\n         *\n         * @param status Info about initialization state of {@link HotwordDetectionService} or\n         * {@link VisualQueryDetectionService}; allowed values are\n         * {@link SandboxedDetectionInitializer#INITIALIZATION_STATUS_SUCCESS},\n         * 1<->{@link SandboxedDetectionInitializer#getMaxCustomInitializationStatus()},\n         * {@link SandboxedDetectionInitializer#INITIALIZATION_STATUS_UNKNOWN}.\n         ",
    "links" : [ "android.service.voice.HotwordDetectionService", "android.service.voice.VisualQueryDetectionService", "android.service.voice.SandboxedDetectionInitializer#INITIALIZATION_STATUS_UNKNOWN", "android.service.voice.SandboxedDetectionInitializer#INITIALIZATION_STATUS_SUCCESS", "android.service.voice.SandboxedDetectionInitializer#getMaxCustomInitializationStatus()" ]
  }, {
    "name" : " void onHotwordDetectionServiceRestarted()",
    "returnType" : "void",
    "comment" : "\n         * Called with the {@link HotwordDetectionService} or {@link VisualQueryDetectionService} is\n         * restarted.\n         *\n         * Clients are expected to call {@link HotwordDetector#updateState} to share the state with\n         * the newly created service.\n         ",
    "links" : [ "android.service.voice.HotwordDetectionService", "android.service.voice.HotwordDetector#updateState", "android.service.voice.VisualQueryDetectionService" ]
  } ],
  "methodNames" : [ " void onDetected(@NonNull AlwaysOnHotwordDetector.EventPayload eventPayload)", " void onError()", " void onFailure(@NonNull HotwordDetectionServiceFailure hotwordDetectionServiceFailure)", " void onUnknownFailure(@NonNull String errorMessage)", " void onRecognitionPaused()", " void onRecognitionResumed()", " void onRejected(@NonNull HotwordRejectedResult result)", " void onHotwordDetectionServiceInitialized(int status)", " void onHotwordDetectionServiceRestarted()" ],
  "variableNames" : [ ]
}