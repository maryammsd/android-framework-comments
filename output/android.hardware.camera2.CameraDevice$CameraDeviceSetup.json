{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/camera2/CameraDevice.java",
  "packageName" : "android.hardware.camera2",
  "className" : "CameraDeviceSetup",
  "comment" : "\n     * CameraDeviceSetup is a limited representation of {@link CameraDevice} that can be used to\n     * query device specific information which would otherwise need a CameraDevice instance.\n     * This class can be constructed without calling {@link CameraManager#openCamera} and paying\n     * the latency cost of CameraDevice creation. Use {@link CameraManager#getCameraDeviceSetup}\n     * to get an instance of this class.\n     *\n     * <p>Can only be instantiated for camera devices for which\n     * {@link CameraManager#isCameraDeviceSetupSupported} returns true.</p>\n     *\n     * @see CameraManager#isCameraDeviceSetupSupported(String)\n     * @see CameraManager#getCameraDeviceSetup(String)\n     ",
  "links" : [ "android.hardware.camera2.CameraManager#openCamera", "android.hardware.camera2.CameraDevice", "android.hardware.camera2.CameraManager#isCameraDeviceSetupSupported", "android.hardware.camera2.CameraManager#getCameraDeviceSetup" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public abstract CaptureRequest.Builder createCaptureRequest(@RequestTemplate int templateType) throws CameraAccessException",
    "returnType" : "CaptureRequest.Builder",
    "comment" : "\n         * Create a {@link CaptureRequest.Builder} for new capture requests,\n         * initialized with a template for target use case.\n         *\n         * <p>The settings are chosen to be the best options for the specific camera device,\n         * so it is not recommended to reuse the same request for a different camera device;\n         * create a builder specific for that device and template and override the\n         * settings as desired, instead.</p>\n         *\n         * <p>Supported if {@link CameraCharacteristics#INFO_SESSION_CONFIGURATION_QUERY_VERSION}\n         * is at least {@link android.os.Build.VERSION_CODES#VANILLA_ICE_CREAM}. If less or equal to\n         * {@link android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE}, this function throws an\n         * {@link UnsupportedOperationException}.</p>\n         *\n         * @param templateType An enumeration selecting the use case for this request. Not all\n         *                     template types are supported on every device. See the documentation\n         *                     for each template type for details.\n         *\n         * @return a builder for a capture request, initialized with default settings for that\n         * template, and no output streams\n         *\n         * @throws CameraAccessException if the querying the camera device failed or there has been\n         * a fatal error\n         * @throws IllegalArgumentException if the templateType is not supported by this device\n         ",
    "links" : [ "android.os.Build.VERSION_CODES#VANILLA_ICE_CREAM", "android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE", "CaptureRequest.Builder", "android.hardware.camera2.CameraCharacteristics#INFO_SESSION_CONFIGURATION_QUERY_VERSION", "UnsupportedOperationException" ]
  }, {
    "name" : "public abstract boolean isSessionConfigurationSupported(@NonNull SessionConfiguration config) throws CameraAccessException",
    "returnType" : "boolean",
    "comment" : "\n         * Checks whether a particular {@link SessionConfiguration} is supported by the camera\n         * device.\n         *\n         * <p>This method performs a runtime check of a given {@link SessionConfiguration}. The\n         * result confirms whether or not the {@code SessionConfiguration}, <b>including the\n         * parameters specified via {@link SessionConfiguration#setSessionParameters}</b>, can\n         * be used to create a camera capture session using\n         * {@link CameraDevice#createCaptureSession(SessionConfiguration)}.</p>\n         *\n         * <p>This method is supported if the\n         * {@link CameraCharacteristics#INFO_SESSION_CONFIGURATION_QUERY_VERSION}\n         * is at least {@link android.os.Build.VERSION_CODES#VANILLA_ICE_CREAM}. If less or equal\n         * to {@link android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE}, this function throws\n         * {@link UnsupportedOperationException}.</p>\n         *\n         * <p>Although this method is much faster than creating a new capture session, it can still\n         * take a few milliseconds per call. Applications should therefore not use this method to\n         * explore the entire space of supported session combinations.</p>\n         *\n         * <p>Instead, applications should use this method to query whether combinations of\n         * certain features are supported. {@link\n         * CameraCharacteristics#INFO_SESSION_CONFIGURATION_QUERY_VERSION} provides the list of\n         * feature combinations the camera device will reliably report.</p>\n         *\n         * <p><b>IMPORTANT:</b></p>\n         * <ul>\n         * <li>If feature support can be queried via\n         * {@link CameraCharacteristics#SCALER_MANDATORY_STREAM_COMBINATIONS} or\n         * {@link CameraCharacteristics#SCALER_STREAM_CONFIGURATION_MAP}, applications should\n         * directly use that route rather than calling this function as: (1) using\n         * {@code CameraCharacteristics} is more efficient, and (2) calling this function with\n         * certain non-supported features will throw a {@link IllegalArgumentException}.</li>\n         *\n         * <li>To minimize {@link SessionConfiguration} creation latency due to its dependency on\n         * output surfaces, the application can call this method before acquiring valid\n         * {@link android.view.SurfaceView}, {@link android.graphics.SurfaceTexture},\n         * {@link android.media.MediaRecorder}, {@link android.media.MediaCodec}, or {@link\n         * android.media.ImageReader} surfaces. For {@link android.view.SurfaceView},\n         * {@link android.graphics.SurfaceTexture}, {@link android.media.MediaRecorder}, and\n         * {@link android.media.MediaCodec}, the application can call\n         * {@link OutputConfiguration#OutputConfiguration(Size, Class)}. For {@link\n         * android.media.ImageReader}, the application can call {@link\n         * OutputConfiguration#OutputConfiguration(int, Size)}, {@link\n         * OutputConfiguration#OutputConfiguration(int, int, Size)}, {@link\n         * OutputConfiguration#OutputConfiguration(int, Size, long)}, or {@link\n         * OutputConfiguration#OutputConfiguration(int, int, Size, long)}. The {@link\n         * SessionConfiguration} can then be created using the OutputConfiguration objects and\n         * be used to query whether it's supported by the camera device. To create the\n         * CameraCaptureSession, the application still needs to make sure all output surfaces\n         * are added via {@link OutputConfiguration#addSurface} with the exception of deferred\n         * surfaces for {@link android.view.SurfaceView} and\n         * {@link android.graphics.SurfaceTexture}.</li>\n         * </ul>\n         *\n         * @return {@code true} if the given session configuration is supported by the camera\n         * device, {@code false} otherwise.\n         *\n         * @throws CameraAccessException if the camera device is no longer connected or has\n         * encountered a fatal error\n         * @throws IllegalArgumentException if the session configuration is invalid\n         *\n         * @see CameraCharacteristics#INFO_SESSION_CONFIGURATION_QUERY_VERSION\n         * @see SessionConfiguration\n         * @see android.media.ImageReader\n         ",
    "links" : [ "android.graphics.SurfaceTexture", "android.os.Build.VERSION_CODES#VANILLA_ICE_CREAM", "android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE", "android.view.SurfaceView", "android.hardware.camera2.params.OutputConfiguration#OutputConfiguration(int", "android.media.ImageReader", "android.hardware.camera2.CameraDevice#createCaptureSession(SessionConfiguration)", "android.hardware.camera2.CameraCharacteristics#INFO_SESSION_CONFIGURATION_QUERY_VERSION", "android.hardware.camera2.params.OutputConfiguration#OutputConfiguration(Size", "android.media.MediaRecorder", "android.media.MediaCodec", "android.hardware.camera2.params.ExtensionSessionConfiguration#setSessionParameters", "android.hardware.camera2.CameraCharacteristics#SCALER_MANDATORY_STREAM_COMBINATIONS", "android.hardware.camera2.params.OutputConfiguration#addSurface", "android.hardware.camera2.params.ExtensionSessionConfiguration", "android.hardware.camera2.CameraCharacteristics#SCALER_STREAM_CONFIGURATION_MAP", "IllegalArgumentException", "UnsupportedOperationException" ]
  }, {
    "name" : "public abstract CameraCharacteristics getSessionCharacteristics(@NonNull SessionConfiguration sessionConfig) throws CameraAccessException",
    "returnType" : "CameraCharacteristics",
    "comment" : "\n         * Get camera characteristics for a particular session configuration for this camera\n         * device.\n         *\n         * <p>The camera characteristics returned by this method are different from those returned\n         * from {@link CameraManager#getCameraCharacteristics}. The characteristics returned here\n         * reflect device capabilities more accurately if the device were to be configured with\n         * {@code sessionConfig}. The keys that may get updated are listed in\n         * {@link CameraCharacteristics#getAvailableSessionCharacteristicsKeys}.</p>\n         *\n         * <p>Other than that, the characteristics returned here can be used in the same way as\n         * those returned from {@link CameraManager#getCameraCharacteristics}.</p>\n         *\n         * <p>To optimize latency, the application can call this method before acquiring valid\n         * {@link android.view.SurfaceView}, {@link android.graphics.SurfaceTexture},\n         * {@link android.media.MediaRecorder}, {@link android.media.MediaCodec}, or {@link\n         * android.media.ImageReader} surfaces. For {@link android.view.SurfaceView},\n         * {@link android.graphics.SurfaceTexture}, {@link android.media.MediaRecorder}, and\n         * {@link android.media.MediaCodec}, the application can call\n         * {@link OutputConfiguration#OutputConfiguration(Size, Class)}. For {@link\n         * android.media.ImageReader}, the application can call {@link\n         * OutputConfiguration#OutputConfiguration(int, Size)}, {@link\n         * OutputConfiguration#OutputConfiguration(int, int, Size)}, {@link\n         * OutputConfiguration#OutputConfiguration(int, Size, long)}, or {@link\n         * OutputConfiguration#OutputConfiguration(int, int, Size, long)}. The {@link\n         * SessionConfiguration} can then be created using the OutputConfiguration objects and\n         * be used for this function. To create the CameraCaptureSession, the application still\n         * needs to make sure all output surfaces are added via {@link\n         * OutputConfiguration#addSurface} with the exception of deferred surfaces for {@link\n         * android.view.SurfaceView} and {@link android.graphics.SurfaceTexture}.</p>\n         *\n         * @param sessionConfig The session configuration for which characteristics are fetched.\n         * @return CameraCharacteristics specific to a given session configuration.\n         *\n         * @throws IllegalArgumentException if the session configuration is invalid or if\n         *                                  {@link #isSessionConfigurationSupported} returns\n         *                                  {@code false} for the provided\n         *                                  {@link SessionConfiguration}\n         * @throws CameraAccessException    if the camera device is no longer connected or has\n         *                                  encountered a fatal error\n         *\n         * @see CameraCharacteristics#getAvailableSessionCharacteristicsKeys\n         ",
    "links" : [ "android.graphics.SurfaceTexture", "android.media.MediaCodec", "android.hardware.camera2.params.OutputConfiguration#addSurface", "android.view.SurfaceView", "android.hardware.camera2.params.OutputConfiguration#OutputConfiguration(int", "android.hardware.camera2.CameraManager#getCameraCharacteristics", "#isSessionConfigurationSupported", "android.media.ImageReader", "android.hardware.camera2.params.ExtensionSessionConfiguration", "android.hardware.camera2.CameraCharacteristics#getAvailableSessionCharacteristicsKeys", "android.hardware.camera2.params.OutputConfiguration#OutputConfiguration(Size", "android.media.MediaRecorder" ]
  }, {
    "name" : "public abstract void openCamera(@NonNull @CallbackExecutor Executor executor, @NonNull StateCallback callback) throws CameraAccessException",
    "returnType" : "void",
    "comment" : "\n         * Utility function to forward the call to\n         * {@link CameraManager#openCamera(String, Executor, StateCallback)}. This function simply\n         * calls {@code CameraManager.openCamera} for the cameraId for which this class was\n         * constructed. All semantics are consistent with {@code CameraManager.openCamera}.\n         *\n         * @param executor The executor which will be used when invoking the callback.\n         * @param callback The callback which is invoked once the camera is opened\n         *\n         * @throws CameraAccessException if the camera is disabled by device policy,\n         * has been disconnected, or is being used by a higher-priority camera API client.\n         *\n         * @throws IllegalArgumentException if cameraId, the callback or the executor was null,\n         * or the cameraId does not match any currently or previously available\n         * camera device.\n         *\n         * @throws SecurityException if the application does not have permission to\n         * access the camera\n         *\n         * @see CameraManager#openCamera(String, Executor, StateCallback)\n         ",
    "links" : [ "android.hardware.camera2.CameraManager#openCamera(String" ]
  }, {
    "name" : "public abstract String getId()",
    "returnType" : "String",
    "comment" : "\n         * Get the ID of this camera device.\n         *\n         * <p>This matches the ID given to {@link CameraManager#getCameraDeviceSetup} to instantiate\n         * this object.</p>\n         *\n         * @return the ID for this camera device\n         *\n         * @see CameraManager#getCameraIdList\n         ",
    "links" : [ "android.hardware.camera2.CameraManager#getCameraDeviceSetup" ]
  } ],
  "methodNames" : [ "public abstract CaptureRequest.Builder createCaptureRequest(@RequestTemplate int templateType) throws CameraAccessException", "public abstract boolean isSessionConfigurationSupported(@NonNull SessionConfiguration config) throws CameraAccessException", "public abstract CameraCharacteristics getSessionCharacteristics(@NonNull SessionConfiguration sessionConfig) throws CameraAccessException", "public abstract void openCamera(@NonNull @CallbackExecutor Executor executor, @NonNull StateCallback callback) throws CameraAccessException", "public abstract String getId()" ],
  "variableNames" : [ ]
}