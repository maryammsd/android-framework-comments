{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/hardware/SensorPrivacyManager.java",
  "packageName" : "android.hardware",
  "className" : "SensorPrivacyManager",
  "comment" : "\n * This class provides access to the sensor privacy services; sensor privacy allows the\n * user to disable access to all sensors on the device. This class provides methods to query the\n * current state of sensor privacy as well as to register / unregister for notification when\n * the sensor privacy state changes.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "sInstanceLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sInstance",
    "type" : "SensorPrivacyManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "ISensorPrivacyManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mListeners",
    "type" : "ArrayMap<OnSensorPrivacyChangedListener, ISensorPrivacyListener>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static SensorPrivacyManager getInstance(Context context)",
    "returnType" : "SensorPrivacyManager",
    "comment" : "\n     * Returns the single instance of the SensorPrivacyManager.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSensorPrivacy(boolean enable)",
    "returnType" : "void",
    "comment" : "\n     * Sets sensor privacy to the specified state.\n     *\n     * @param enable the state to which sensor privacy should be set.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addSensorPrivacyListener(final OnSensorPrivacyChangedListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Registers a new listener to receive notification when the state of sensor privacy\n     * changes.\n     *\n     * @param listener the OnSensorPrivacyChangedListener to be notified when the state of sensor\n     *                 privacy changes.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removeSensorPrivacyListener(OnSensorPrivacyChangedListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Unregisters the specified listener from receiving notifications when the state of sensor\n     * privacy changes.\n     *\n     * @param listener the OnSensorPrivacyChangedListener to be unregistered from notifications when\n     *                 sensor privacy changes.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSensorPrivacyEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether sensor privacy is currently enabled.\n     *\n     * @return true if sensor privacy is currently enabled, false otherwise.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "sInstanceLock", "sInstance", "mContext", "mService", "mListeners" ],
  "methodNames" : [ "public static SensorPrivacyManager getInstance(Context context)", "public void setSensorPrivacy(boolean enable)", "public void addSensorPrivacyListener(final OnSensorPrivacyChangedListener listener)", "public void removeSensorPrivacyListener(OnSensorPrivacyChangedListener listener)", "public boolean isSensorPrivacyEnabled()" ]
}