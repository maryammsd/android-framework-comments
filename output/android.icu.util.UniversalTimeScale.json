{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/util/UniversalTimeScale.java",
  "packageName" : "android.icu.util",
  "className" : "UniversalTimeScale",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "JAVA_TIME",
    "type" : "int",
    "comment" : "\n     * Used in the JDK. Data is a <code>long</code>. Value\n     * is milliseconds since January 1, 1970.\n     ",
    "links" : [ ]
  }, {
    "name" : "UNIX_TIME",
    "type" : "int",
    "comment" : "\n     * Used in Unix systems. Data is an <code>int</code> or a <code>long</code>. Value\n     * is seconds since January 1, 1970.\n     ",
    "links" : [ ]
  }, {
    "name" : "ICU4C_TIME",
    "type" : "int",
    "comment" : "\n     * Used in the ICU4C. Data is a <code>double</code>. Value\n     * is milliseconds since January 1, 1970.\n     ",
    "links" : [ ]
  }, {
    "name" : "WINDOWS_FILE_TIME",
    "type" : "int",
    "comment" : "\n     * Used in Windows for file times. Data is a <code>long</code>. Value\n     * is ticks (1 tick == 100 nanoseconds) since January 1, 1601.\n     ",
    "links" : [ ]
  }, {
    "name" : "DOTNET_DATE_TIME",
    "type" : "int",
    "comment" : "\n     * Used in the .NET framework's <code>System.DateTime</code> structure.\n     * Data is a <code>long</code>. Value is ticks (1 tick == 100 nanoseconds) since January 1, 0001.\n     ",
    "links" : [ ]
  }, {
    "name" : "MAC_OLD_TIME",
    "type" : "int",
    "comment" : "\n     * Used in older Macintosh systems. Data is an <code>int</code>. Value\n     * is seconds since January 1, 1904.\n     ",
    "links" : [ ]
  }, {
    "name" : "MAC_TIME",
    "type" : "int",
    "comment" : "\n     * Used in the JDK. Data is a <code>double</code>. Value\n     * is milliseconds since January 1, 2001.\n     ",
    "links" : [ ]
  }, {
    "name" : "EXCEL_TIME",
    "type" : "int",
    "comment" : "\n     * Used in Excel. Data is a <code>?unknown?</code>. Value\n     * is days since December 31, 1899.\n     ",
    "links" : [ ]
  }, {
    "name" : "DB2_TIME",
    "type" : "int",
    "comment" : "\n     * Used in DB2. Data is a <code>?unknown?</code>. Value\n     * is days since December 31, 1899.\n     ",
    "links" : [ ]
  }, {
    "name" : "UNIX_MICROSECONDS_TIME",
    "type" : "int",
    "comment" : "\n     * Data is a <code>long</code>. Value is microseconds since January 1, 1970.\n     * Similar to Unix time (linear value from 1970) and struct timeval\n     * (microseconds resolution).\n     ",
    "links" : [ ]
  }, {
    "name" : "MAX_SCALE",
    "type" : "int",
    "comment" : "\n     * This is the first unused time scale value.\n     *\n     * @deprecated ICU 59\n     ",
    "links" : [ ]
  }, {
    "name" : "UNITS_VALUE",
    "type" : "int",
    "comment" : "\n     * The constant used to select the units value\n     * for a time scale.\n     ",
    "links" : [ ]
  }, {
    "name" : "EPOCH_OFFSET_VALUE",
    "type" : "int",
    "comment" : "\n     * The constant used to select the epoch offset value\n     * for a time scale.\n     * \n     * @see #getTimeScaleValue\n     ",
    "links" : [ ]
  }, {
    "name" : "FROM_MIN_VALUE",
    "type" : "int",
    "comment" : "\n     * The constant used to select the minimum from value\n     * for a time scale.\n     * \n     * @see #getTimeScaleValue\n     ",
    "links" : [ ]
  }, {
    "name" : "FROM_MAX_VALUE",
    "type" : "int",
    "comment" : "\n     * The constant used to select the maximum from value\n     * for a time scale.\n     * \n     * @see #getTimeScaleValue\n     ",
    "links" : [ ]
  }, {
    "name" : "TO_MIN_VALUE",
    "type" : "int",
    "comment" : "\n     * The constant used to select the minimum to value\n     * for a time scale.\n     * \n     * @see #getTimeScaleValue\n     ",
    "links" : [ ]
  }, {
    "name" : "TO_MAX_VALUE",
    "type" : "int",
    "comment" : "\n     * The constant used to select the maximum to value\n     * for a time scale.\n     * \n     * @see #getTimeScaleValue\n     ",
    "links" : [ ]
  }, {
    "name" : "EPOCH_OFFSET_PLUS_1_VALUE",
    "type" : "int",
    "comment" : "\n     * The constant used to select the epoch plus one value\n     * for a time scale.\n     * \n     * NOTE: This is an internal value. DO NOT USE IT. May not\n     * actually be equal to the epoch offset value plus one.\n     * \n     * @see #getTimeScaleValue\n     ",
    "links" : [ ]
  }, {
    "name" : "EPOCH_OFFSET_MINUS_1_VALUE",
    "type" : "int",
    "comment" : "\n     * The constant used to select the epoch offset minus one value\n     * for a time scale.\n     * \n     * NOTE: This is an internal value. DO NOT USE IT. May not\n     * actually be equal to the epoch offset value minus one.\n     * \n     * @see #getTimeScaleValue\n     *\n     * @deprecated This API is ICU internal only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "UNITS_ROUND_VALUE",
    "type" : "int",
    "comment" : "\n     * The constant used to select the units round value\n     * for a time scale.\n     * \n     * NOTE: This is an internal value. DO NOT USE IT.\n     * \n     * @see #getTimeScaleValue\n     *\n     * @deprecated This API is ICU internal only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "MIN_ROUND_VALUE",
    "type" : "int",
    "comment" : "\n     * The constant used to select the minimum safe rounding value\n     * for a time scale.\n     * \n     * NOTE: This is an internal value. DO NOT USE IT.\n     * \n     * @see #getTimeScaleValue\n     *\n     * @deprecated This API is ICU internal only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "MAX_ROUND_VALUE",
    "type" : "int",
    "comment" : "\n     * The constant used to select the maximum safe rounding value\n     * for a time scale.\n     * \n     * NOTE: This is an internal value. DO NOT USE IT.\n     * \n     * @see #getTimeScaleValue\n     *\n     * @deprecated This API is ICU internal only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "MAX_SCALE_VALUE",
    "type" : "int",
    "comment" : "\n     * The number of time scale values.\n     * \n     * NOTE: This is an internal value. DO NOT USE IT.\n     * \n     * @see #getTimeScaleValue\n     *\n     * @deprecated This API is ICU internal only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "ticks",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "microseconds",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "milliseconds",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "seconds",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "minutes",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "hours",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "days",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "timeScaleTable",
    "type" : "TimeScaleData[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static long from(long otherTime, int timeScale)",
    "returnType" : "long",
    "comment" : "\n     * Convert a <code>long</code> datetime from the given time scale to the universal time scale.\n     *\n     * @param otherTime The <code>long</code> datetime\n     * @param timeScale The time scale to convert from\n     * \n     * @return The datetime converted to the universal time scale\n     ",
    "links" : [ ]
  }, {
    "name" : "public static BigDecimal bigDecimalFrom(double otherTime, int timeScale)",
    "returnType" : "BigDecimal",
    "comment" : "\n     * Convert a <code>double</code> datetime from the given time scale to the universal time scale.\n     * All calculations are done using <code>BigDecimal</code> to guarantee that the value\n     * does not go out of range.\n     *\n     * @param otherTime The <code>double</code> datetime\n     * @param timeScale The time scale to convert from\n     * \n     * @return The datetime converted to the universal time scale\n     ",
    "links" : [ ]
  }, {
    "name" : "public static BigDecimal bigDecimalFrom(long otherTime, int timeScale)",
    "returnType" : "BigDecimal",
    "comment" : "\n     * Convert a <code>long</code> datetime from the given time scale to the universal time scale.\n     * All calculations are done using <code>BigDecimal</code> to guarantee that the value\n     * does not go out of range.\n     *\n     * @param otherTime The <code>long</code> datetime\n     * @param timeScale The time scale to convert from\n     * \n     * @return The datetime converted to the universal time scale\n     ",
    "links" : [ ]
  }, {
    "name" : "public static BigDecimal bigDecimalFrom(BigDecimal otherTime, int timeScale)",
    "returnType" : "BigDecimal",
    "comment" : "\n     * Convert a <code>BigDecimal</code> datetime from the given time scale to the universal time scale.\n     * All calculations are done using <code>BigDecimal</code> to guarantee that the value\n     * does not go out of range.\n     *\n     * @param otherTime The <code>BigDecimal</code> datetime\n     * @param timeScale The time scale to convert from\n     * \n     * @return The datetime converted to the universal time scale\n     ",
    "links" : [ ]
  }, {
    "name" : "public static long toLong(long universalTime, int timeScale)",
    "returnType" : "long",
    "comment" : "\n     * Convert a datetime from the universal time scale stored as a <code>BigDecimal</code> to a\n     * <code>long</code> in the given time scale.\n     *\n     * Since this calculation requires a divide, we must round. The straight forward\n     * way to round by adding half of the divisor will push the sum out of range for values\n     * within have the divisor of the limits of the precision of a <code>long</code>. To get around this, we do\n     * the rounding like this:\n     * \n     * <p><code>\n     * (universalTime - units + units/2) / units + 1\n     * </code>\n     * \n     * <p>\n     * (i.e. we subtract units first to guarantee that we'll still be in range when we\n     * add <code>units/2</code>. We then need to add one to the quotent to make up for the extra subtraction.\n     * This simplifies to:\n     * \n     * <p><code>\n     * (universalTime - units/2) / units - 1\n     * </code>\n     * \n     * <p>\n     * For negative values to round away from zero, we need to flip the signs:\n     * \n     * <p><code>\n     * (universalTime + units/2) / units + 1\n     * </code>\n     * \n     * <p>\n     * Since we also need to subtract the epochOffset, we fold the <code>+/- 1</code>\n     * into the offset value. (i.e. <code>epochOffsetP1</code>, <code>epochOffsetM1</code>.)\n     * \n     * @param universalTime The datetime in the universal time scale\n     * @param timeScale The time scale to convert to\n     * \n     * @return The datetime converted to the given time scale\n     ",
    "links" : [ ]
  }, {
    "name" : "public static BigDecimal toBigDecimal(long universalTime, int timeScale)",
    "returnType" : "BigDecimal",
    "comment" : "\n     * Convert a datetime from the universal time scale to a <code>BigDecimal</code> in the given time scale.\n     *\n     * @param universalTime The datetime in the universal time scale\n     * @param timeScale The time scale to convert to\n     * \n     * @return The datetime converted to the given time scale\n     ",
    "links" : [ ]
  }, {
    "name" : "public static BigDecimal toBigDecimal(BigDecimal universalTime, int timeScale)",
    "returnType" : "BigDecimal",
    "comment" : "\n     * Convert a datetime from the universal time scale to a <code>BigDecimal</code> in the given time scale.\n     *\n     * @param universalTime The datetime in the universal time scale\n     * @param timeScale The time scale to convert to\n     * \n     * @return The datetime converted to the given time scale\n     ",
    "links" : [ ]
  }, {
    "name" : "private static TimeScaleData getTimeScaleData(int scale)",
    "returnType" : "TimeScaleData",
    "comment" : "\n     * Return the <code>TimeScaleData</code> object for the given time\n     * scale.\n     * \n     * @param scale - the time scale\n     * @return the <code>TimeScaleData</code> object for the given time scale\n     ",
    "links" : [ ]
  }, {
    "name" : "public static long getTimeScaleValue(int scale, int value)",
    "returnType" : "long",
    "comment" : "\n     * Get a value associated with a particular time scale.\n     * \n     * @param scale - the time scale\n     * @param value - a constant representing the value to get\n     * \n     * @return - the value.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static TimeScaleData toRangeCheck(long universalTime, int scale)",
    "returnType" : "TimeScaleData",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static TimeScaleData fromRangeCheck(long otherTime, int scale)",
    "returnType" : "TimeScaleData",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static BigDecimal toBigDecimalTrunc(BigDecimal universalTime, int timeScale)",
    "returnType" : "BigDecimal",
    "comment" : "\n     * Convert a time in the Universal Time Scale into another time\n     * scale. The division used to do the conversion rounds down.\n     * \n     * NOTE: This is an internal routine used by the tool that\n     * generates the to and from limits. Use it at your own risk.\n     * \n     * @param universalTime the time in the Universal Time scale\n     * @param timeScale the time scale to convert to\n     * @return the time in the given time scale\n     * \n     * @deprecated This API is ICU internal only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static long from(long otherTime, int timeScale)", "public static BigDecimal bigDecimalFrom(double otherTime, int timeScale)", "public static BigDecimal bigDecimalFrom(long otherTime, int timeScale)", "public static BigDecimal bigDecimalFrom(BigDecimal otherTime, int timeScale)", "public static long toLong(long universalTime, int timeScale)", "public static BigDecimal toBigDecimal(long universalTime, int timeScale)", "public static BigDecimal toBigDecimal(BigDecimal universalTime, int timeScale)", "private static TimeScaleData getTimeScaleData(int scale)", "public static long getTimeScaleValue(int scale, int value)", "private static TimeScaleData toRangeCheck(long universalTime, int scale)", "private static TimeScaleData fromRangeCheck(long otherTime, int scale)", "public static BigDecimal toBigDecimalTrunc(BigDecimal universalTime, int timeScale)" ],
  "variableNames" : [ "JAVA_TIME", "UNIX_TIME", "ICU4C_TIME", "WINDOWS_FILE_TIME", "DOTNET_DATE_TIME", "MAC_OLD_TIME", "MAC_TIME", "EXCEL_TIME", "DB2_TIME", "UNIX_MICROSECONDS_TIME", "MAX_SCALE", "UNITS_VALUE", "EPOCH_OFFSET_VALUE", "FROM_MIN_VALUE", "FROM_MAX_VALUE", "TO_MIN_VALUE", "TO_MAX_VALUE", "EPOCH_OFFSET_PLUS_1_VALUE", "EPOCH_OFFSET_MINUS_1_VALUE", "UNITS_ROUND_VALUE", "MIN_ROUND_VALUE", "MAX_ROUND_VALUE", "MAX_SCALE_VALUE", "ticks", "microseconds", "milliseconds", "seconds", "minutes", "hours", "days", "timeScaleTable" ]
}