{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/IAudioPolicyService.java",
  "packageName" : "android.media",
  "className" : "Proxy",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "mRemote",
    "type" : "android.os.IBinder",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public android.os.IBinder asBinder()",
    "returnType" : "android.os.IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public java.lang.String getInterfaceDescriptor()",
    "returnType" : "java.lang.String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onNewAudioModulesAvailable() throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setDeviceConnectionState(int state, android.media.audio.common.AudioPort port, android.media.audio.common.AudioFormatDescription encodedFormat) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getDeviceConnectionState(android.media.audio.common.AudioDevice device) throws android.os.RemoteException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void handleDeviceConfigChange(android.media.audio.common.AudioDevice device, java.lang.String deviceName, android.media.audio.common.AudioFormatDescription encodedFormat) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setPhoneState(int state, int uid) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setForceUse(int usage, int config) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getForceUse(int usage) throws android.os.RemoteException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getOutput(int stream) throws android.os.RemoteException",
    "returnType" : "int",
    "comment" : " audio_io_handle_t ",
    "links" : [ ]
  }, {
    "name" : "public android.media.GetOutputForAttrResponse getOutputForAttr(android.media.audio.common.AudioAttributes attr, int session, android.content.AttributionSourceState attributionSource, android.media.audio.common.AudioConfig config, int flags, int selectedDeviceId) throws android.os.RemoteException",
    "returnType" : "android.media.GetOutputForAttrResponse",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void startOutput(int portId) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void stopOutput(int portId) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void releaseOutput(int portId) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public android.media.GetInputForAttrResponse getInputForAttr(android.media.audio.common.AudioAttributes attr, int input, int riid, int session, android.content.AttributionSourceState attributionSource, android.media.audio.common.AudioConfigBase config, int flags, int selectedDeviceId) throws android.os.RemoteException",
    "returnType" : "android.media.GetInputForAttrResponse",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void startInput(int portId) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void stopInput(int portId) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void releaseInput(int portId) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void initStreamVolume(int stream, int indexMin, int indexMax) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setStreamVolumeIndex(int stream, android.media.audio.common.AudioDeviceDescription device, int index) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getStreamVolumeIndex(int stream, android.media.audio.common.AudioDeviceDescription device) throws android.os.RemoteException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setVolumeIndexForAttributes(android.media.audio.common.AudioAttributes attr, android.media.audio.common.AudioDeviceDescription device, int index) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getVolumeIndexForAttributes(android.media.audio.common.AudioAttributes attr, android.media.audio.common.AudioDeviceDescription device) throws android.os.RemoteException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getMaxVolumeIndexForAttributes(android.media.audio.common.AudioAttributes attr) throws android.os.RemoteException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getMinVolumeIndexForAttributes(android.media.audio.common.AudioAttributes attr) throws android.os.RemoteException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getStrategyForStream(int stream) throws android.os.RemoteException",
    "returnType" : "int",
    "comment" : " product_strategy_t ",
    "links" : [ ]
  }, {
    "name" : "public android.media.audio.common.AudioDevice[] getDevicesForAttributes(android.media.audio.common.AudioAttributes attr, boolean forVolume) throws android.os.RemoteException",
    "returnType" : "android.media.audio.common.AudioDevice[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getOutputForEffect(android.media.EffectDescriptor desc) throws android.os.RemoteException",
    "returnType" : "int",
    "comment" : " audio_io_handle_t ",
    "links" : [ ]
  }, {
    "name" : "public void registerEffect(android.media.EffectDescriptor desc, int io, int strategy, int session, int id) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void unregisterEffect(int id) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setEffectEnabled(int id, boolean enabled) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void moveEffectsToIo(int[] ids, int io) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isStreamActive(int stream, int inPastMs) throws android.os.RemoteException",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isStreamActiveRemotely(int stream, int inPastMs) throws android.os.RemoteException",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isSourceActive(int source) throws android.os.RemoteException",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public android.media.EffectDescriptor[] queryDefaultPreProcessing(int audioSession, android.media.audio.common.Int count) throws android.os.RemoteException",
    "returnType" : "android.media.EffectDescriptor[]",
    "comment" : "\n       * On input, count represents the maximum length of the returned array.\n       * On output, count is the total number of elements, which may be larger than the array size.\n       * Passing '0' on input and inspecting the value on output is a common way of determining the\n       * number of elements without actually retrieving them.\n       ",
    "links" : [ ]
  }, {
    "name" : "public int addSourceDefaultEffect(android.media.audio.common.AudioUuid type, java.lang.String opPackageName, android.media.audio.common.AudioUuid uuid, int priority, int source) throws android.os.RemoteException",
    "returnType" : "int",
    "comment" : " audio_unique_id_t ",
    "links" : [ ]
  }, {
    "name" : "public int addStreamDefaultEffect(android.media.audio.common.AudioUuid type, java.lang.String opPackageName, android.media.audio.common.AudioUuid uuid, int priority, int usage) throws android.os.RemoteException",
    "returnType" : "int",
    "comment" : " audio_unique_id_t ",
    "links" : [ ]
  }, {
    "name" : "public void removeSourceDefaultEffect(int id) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeStreamDefaultEffect(int id) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setSupportedSystemUsages(int[] systemUsages) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setAllowedCapturePolicy(int uid, int capturePolicy) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getOffloadSupport(android.media.audio.common.AudioOffloadInfo info) throws android.os.RemoteException",
    "returnType" : "int",
    "comment" : "\n       * Check if offload is possible for given format, stream type, sample rate,\n       * bit rate, duration, video and streaming or offload property is enabled.\n       ",
    "links" : [ ]
  }, {
    "name" : "public boolean isDirectOutputSupported(android.media.audio.common.AudioConfigBase config, android.media.audio.common.AudioAttributes attributes) throws android.os.RemoteException",
    "returnType" : "boolean",
    "comment" : " Check if direct playback is possible for given format, sample rate, channel mask and flags. ",
    "links" : [ ]
  }, {
    "name" : "public int listAudioPorts(int role, int type, android.media.audio.common.Int count, android.media.AudioPortFw[] ports) throws android.os.RemoteException",
    "returnType" : "int",
    "comment" : "\n       * List currently attached audio ports and their attributes. Returns the generation.\n       * The generation is incremented each time when anything changes in the ports\n       * configuration.\n       * \n       * On input, count represents the maximum length of the returned array.\n       * On output, count is the total number of elements, which may be larger than the array size.\n       * Passing '0' on input and inspecting the value on output is a common way of determining the\n       * number of elements without actually retrieving them.\n       ",
    "links" : [ ]
  }, {
    "name" : "public android.media.AudioPortFw[] listDeclaredDevicePorts(int role) throws android.os.RemoteException",
    "returnType" : "android.media.AudioPortFw[]",
    "comment" : "\n       * List all device ports declared in the configuration (including currently detached ones)\n       * 'role' can be 'NONE' to get both input and output devices,\n       * 'SINK' for output devices, and 'SOURCE' for input devices.\n       ",
    "links" : [ ]
  }, {
    "name" : "public android.media.AudioPortFw getAudioPort(int portId) throws android.os.RemoteException",
    "returnType" : "android.media.AudioPortFw",
    "comment" : " Get attributes for the audio port with the given id (AudioPort.hal.id field). ",
    "links" : [ ]
  }, {
    "name" : "public int createAudioPatch(android.media.AudioPatchFw patch, int handle) throws android.os.RemoteException",
    "returnType" : "int",
    "comment" : " audio_patch_handle_t ",
    "links" : [ ]
  }, {
    "name" : "public void releaseAudioPatch(int handle) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : " Release an audio patch. ",
    "links" : [ ]
  }, {
    "name" : "public int listAudioPatches(android.media.audio.common.Int count, android.media.AudioPatchFw[] patches) throws android.os.RemoteException",
    "returnType" : "int",
    "comment" : "\n       * List existing audio patches. Returns the generation.\n       * \n       * On input, count represents the maximum length of the returned array.\n       * On output, count is the total number of elements, which may be larger than the array size.\n       * Passing '0' on input and inspecting the value on output is a common way of determining the\n       * number of elements without actually retrieving them.\n       ",
    "links" : [ ]
  }, {
    "name" : "public void setAudioPortConfig(android.media.AudioPortConfigFw config) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : " Set audio port configuration. ",
    "links" : [ ]
  }, {
    "name" : "public void registerClient(android.media.IAudioPolicyServiceClient client) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setAudioPortCallbacksEnabled(boolean enabled) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setAudioVolumeGroupCallbacksEnabled(boolean enabled) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public android.media.SoundTriggerSession acquireSoundTriggerSession() throws android.os.RemoteException",
    "returnType" : "android.media.SoundTriggerSession",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void releaseSoundTriggerSession(int session) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getPhoneState() throws android.os.RemoteException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void registerPolicyMixes(android.media.AudioMix[] mixes, boolean registration) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public java.util.List<android.media.AudioMix> getRegisteredPolicyMixes() throws android.os.RemoteException",
    "returnType" : "java.util.List<android.media.AudioMix>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void updatePolicyMixes(android.media.AudioMixUpdate[] updates) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setUidDeviceAffinities(int uid, android.media.audio.common.AudioDevice[] devices) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeUidDeviceAffinities(int uid) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setUserIdDeviceAffinities(int userId, android.media.audio.common.AudioDevice[] devices) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeUserIdDeviceAffinities(int userId) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int startAudioSource(android.media.AudioPortConfigFw source, android.media.audio.common.AudioAttributes attributes) throws android.os.RemoteException",
    "returnType" : "int",
    "comment" : " audio_port_handle_t ",
    "links" : [ ]
  }, {
    "name" : "public void stopAudioSource(int portId) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setMasterMono(boolean mono) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean getMasterMono() throws android.os.RemoteException",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public float getStreamVolumeDB(int stream, int index, android.media.audio.common.AudioDeviceDescription device) throws android.os.RemoteException",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void getSurroundFormats(android.media.audio.common.Int count, android.media.audio.common.AudioFormatDescription[] formats, boolean[] formatsEnabled) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n       * Populates supported surround formats and their enabled state in formats and formatsEnabled.\n       * \n       * On input, count represents the maximum length of the returned array.\n       * On output, count is the total number of elements, which may be larger than the array size.\n       * Passing '0' on input and inspecting the value on output is a common way of determining the\n       * number of elements without actually retrieving them.\n       ",
    "links" : [ ]
  }, {
    "name" : "public void getReportedSurroundFormats(android.media.audio.common.Int count, android.media.audio.common.AudioFormatDescription[] formats) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n       * Populates the surround formats reported by the HDMI devices in formats.\n       * \n       * On input, count represents the maximum length of the returned array.\n       * On output, count is the total number of elements, which may be larger than the array size.\n       * Passing '0' on input and inspecting the value on output is a common way of determining the\n       * number of elements without actually retrieving them.\n       ",
    "links" : [ ]
  }, {
    "name" : "public android.media.audio.common.AudioFormatDescription[] getHwOffloadFormatsSupportedForBluetoothMedia(android.media.audio.common.AudioDeviceDescription device) throws android.os.RemoteException",
    "returnType" : "android.media.audio.common.AudioFormatDescription[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setSurroundFormatEnabled(android.media.audio.common.AudioFormatDescription audioFormat, boolean enabled) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setAssistantServicesUids(int[] uids) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setActiveAssistantServicesUids(int[] activeUids) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setA11yServicesUids(int[] uids) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setCurrentImeUid(int uid) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isHapticPlaybackSupported() throws android.os.RemoteException",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isUltrasoundSupported() throws android.os.RemoteException",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isHotwordStreamSupported(boolean lookbackAudio) throws android.os.RemoteException",
    "returnType" : "boolean",
    "comment" : "\n       * Queries if there is hardware support for requesting audio capture content from\n       * the DSP hotword pipeline.\n       * \n       * @param lookbackAudio true if additionally querying for the ability to capture audio\n       *                      from the pipeline prior to capture stream open.\n       ",
    "links" : [ ]
  }, {
    "name" : "public android.media.AudioProductStrategy[] listAudioProductStrategies() throws android.os.RemoteException",
    "returnType" : "android.media.AudioProductStrategy[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getProductStrategyFromAudioAttributes(android.media.audio.common.AudioAttributes aa, boolean fallbackOnDefault) throws android.os.RemoteException",
    "returnType" : "int",
    "comment" : " product_strategy_t ",
    "links" : [ ]
  }, {
    "name" : "public android.media.AudioVolumeGroup[] listAudioVolumeGroups() throws android.os.RemoteException",
    "returnType" : "android.media.AudioVolumeGroup[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getVolumeGroupFromAudioAttributes(android.media.audio.common.AudioAttributes aa, boolean fallbackOnDefault) throws android.os.RemoteException",
    "returnType" : "int",
    "comment" : " volume_group_t ",
    "links" : [ ]
  }, {
    "name" : "public void setRttEnabled(boolean enabled) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isCallScreenModeSupported() throws android.os.RemoteException",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setDevicesRoleForStrategy(int strategy, int role, android.media.audio.common.AudioDevice[] devices) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeDevicesRoleForStrategy(int strategy, int role, android.media.audio.common.AudioDevice[] devices) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void clearDevicesRoleForStrategy(int strategy, int role) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public android.media.audio.common.AudioDevice[] getDevicesForRoleAndStrategy(int strategy, int role) throws android.os.RemoteException",
    "returnType" : "android.media.audio.common.AudioDevice[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setDevicesRoleForCapturePreset(int audioSource, int role, android.media.audio.common.AudioDevice[] devices) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addDevicesRoleForCapturePreset(int audioSource, int role, android.media.audio.common.AudioDevice[] devices) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeDevicesRoleForCapturePreset(int audioSource, int role, android.media.audio.common.AudioDevice[] devices) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void clearDevicesRoleForCapturePreset(int audioSource, int role) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public android.media.audio.common.AudioDevice[] getDevicesForRoleAndCapturePreset(int audioSource, int role) throws android.os.RemoteException",
    "returnType" : "android.media.audio.common.AudioDevice[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean registerSoundTriggerCaptureStateListener(android.media.ICaptureStateListener listener) throws android.os.RemoteException",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public android.media.GetSpatializerResponse getSpatializer(android.media.INativeSpatializerCallback callback) throws android.os.RemoteException",
    "returnType" : "android.media.GetSpatializerResponse",
    "comment" : "\n       * If a spatializer stage effect is present on the platform, this will return an\n       * ISpatializer interface (see GetSpatializerResponse,aidl) to control this\n       * feature.\n       * If no spatializer stage is present, a null interface is returned.\n       * The INativeSpatializerCallback passed must not be null.\n       * Only one ISpatializer interface can exist at a given time. The native audio policy\n       * service will reject the request if an interface was already acquired and previous owner\n       * did not die or call ISpatializer.release().\n       ",
    "links" : [ ]
  }, {
    "name" : "public boolean canBeSpatialized(android.media.audio.common.AudioAttributes attr, android.media.audio.common.AudioConfig config, android.media.audio.common.AudioDevice[] devices) throws android.os.RemoteException",
    "returnType" : "boolean",
    "comment" : "\n       * Queries if some kind of spatialization will be performed if the audio playback context\n       * described by the provided arguments is present.\n       * The context is made of:\n       * - The audio attributes describing the playback use case.\n       * - The audio configuration describing the audio format, channels, sampling rate...\n       * - The devices describing the sink audio device selected for playback.\n       * All arguments are optional and only the specified arguments are used to match against\n       * supported criteria. For instance, supplying no argument will tell if spatialization is\n       * supported or not in general.\n       ",
    "links" : [ ]
  }, {
    "name" : "public int getDirectPlaybackSupport(android.media.audio.common.AudioAttributes attr, android.media.audio.common.AudioConfig config) throws android.os.RemoteException",
    "returnType" : "int",
    "comment" : " Query how the direct playback is currently supported on the device. ",
    "links" : [ ]
  }, {
    "name" : "public android.media.audio.common.AudioProfile[] getDirectProfilesForAttributes(android.media.audio.common.AudioAttributes attr) throws android.os.RemoteException",
    "returnType" : "android.media.audio.common.AudioProfile[]",
    "comment" : "\n       * Query audio profiles available for direct playback on the current output device(s)\n       * for the specified audio attributes.\n       ",
    "links" : [ ]
  }, {
    "name" : "public android.media.AudioMixerAttributesInternal[] getSupportedMixerAttributes(int portId) throws android.os.RemoteException",
    "returnType" : "android.media.AudioMixerAttributesInternal[]",
    "comment" : "\n       * Return a list of AudioMixerAttributes that can be used to set preferred mixer attributes\n       * for the given device.\n       ",
    "links" : [ ]
  }, {
    "name" : "public void setPreferredMixerAttributes(android.media.audio.common.AudioAttributes attr, int portId, int uid, android.media.AudioMixerAttributesInternal mixerAttr) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n       * Set preferred mixer attributes for a given device on a given audio attributes.\n       * When conflicting requests are received, the last request will be honored.\n       * The preferred mixer attributes can only be set when 1) the usage is media, 2) the\n       * given device is currently available, 3) the given device is usb device, 4) the given mixer\n       * attributes is supported by the given device.\n       * \n       * @param attr the audio attributes whose mixer attributes should be set.\n       * @param portId the port id of the device to be routed.\n       * @param uid the uid of the request client. The uid will be used to recognize the ownership for\n       *            the preferred mixer attributes. All the playback with same audio attributes from\n       *            the same uid will be attached to the mixer with the preferred attributes if the\n       *            playback is routed to the given device.\n       * @param mixerAttr the preferred mixer attributes.\n       ",
    "links" : [ ]
  }, {
    "name" : "public android.media.AudioMixerAttributesInternal getPreferredMixerAttributes(android.media.audio.common.AudioAttributes attr, int portId) throws android.os.RemoteException",
    "returnType" : "android.media.AudioMixerAttributesInternal",
    "comment" : "\n       * Get preferred mixer attributes for a given device on a given audio attributes.\n       * Null will be returned if there is no preferred mixer attributes set or it has\n       * been cleared.\n       * \n       * @param attr the audio attributes whose mixer attributes should be set.\n       * @param portId the port id of the device to be routed.\n       ",
    "links" : [ ]
  }, {
    "name" : "public void clearPreferredMixerAttributes(android.media.audio.common.AudioAttributes attr, int portId, int uid) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n       * Clear preferred mixer attributes for a given device on a given audio attributes that\n       * is previously set via setPreferredMixerAttributes.\n       * \n       * @param attr the audio attributes whose mixer attributes should be set.\n       * @param portId the port id of the device to be routed.\n       * @param uid the uid of the request client. The uid is used to identify the ownership for the\n       *            preferred mixer attributes. The preferred mixer attributes will only be cleared\n       *            if the uid is the same as the owner of current preferred mixer attributes.\n       ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public android.os.IBinder asBinder()", "public java.lang.String getInterfaceDescriptor()", "public void onNewAudioModulesAvailable() throws android.os.RemoteException", "public void setDeviceConnectionState(int state, android.media.audio.common.AudioPort port, android.media.audio.common.AudioFormatDescription encodedFormat) throws android.os.RemoteException", "public int getDeviceConnectionState(android.media.audio.common.AudioDevice device) throws android.os.RemoteException", "public void handleDeviceConfigChange(android.media.audio.common.AudioDevice device, java.lang.String deviceName, android.media.audio.common.AudioFormatDescription encodedFormat) throws android.os.RemoteException", "public void setPhoneState(int state, int uid) throws android.os.RemoteException", "public void setForceUse(int usage, int config) throws android.os.RemoteException", "public int getForceUse(int usage) throws android.os.RemoteException", "public int getOutput(int stream) throws android.os.RemoteException", "public android.media.GetOutputForAttrResponse getOutputForAttr(android.media.audio.common.AudioAttributes attr, int session, android.content.AttributionSourceState attributionSource, android.media.audio.common.AudioConfig config, int flags, int selectedDeviceId) throws android.os.RemoteException", "public void startOutput(int portId) throws android.os.RemoteException", "public void stopOutput(int portId) throws android.os.RemoteException", "public void releaseOutput(int portId) throws android.os.RemoteException", "public android.media.GetInputForAttrResponse getInputForAttr(android.media.audio.common.AudioAttributes attr, int input, int riid, int session, android.content.AttributionSourceState attributionSource, android.media.audio.common.AudioConfigBase config, int flags, int selectedDeviceId) throws android.os.RemoteException", "public void startInput(int portId) throws android.os.RemoteException", "public void stopInput(int portId) throws android.os.RemoteException", "public void releaseInput(int portId) throws android.os.RemoteException", "public void initStreamVolume(int stream, int indexMin, int indexMax) throws android.os.RemoteException", "public void setStreamVolumeIndex(int stream, android.media.audio.common.AudioDeviceDescription device, int index) throws android.os.RemoteException", "public int getStreamVolumeIndex(int stream, android.media.audio.common.AudioDeviceDescription device) throws android.os.RemoteException", "public void setVolumeIndexForAttributes(android.media.audio.common.AudioAttributes attr, android.media.audio.common.AudioDeviceDescription device, int index) throws android.os.RemoteException", "public int getVolumeIndexForAttributes(android.media.audio.common.AudioAttributes attr, android.media.audio.common.AudioDeviceDescription device) throws android.os.RemoteException", "public int getMaxVolumeIndexForAttributes(android.media.audio.common.AudioAttributes attr) throws android.os.RemoteException", "public int getMinVolumeIndexForAttributes(android.media.audio.common.AudioAttributes attr) throws android.os.RemoteException", "public int getStrategyForStream(int stream) throws android.os.RemoteException", "public android.media.audio.common.AudioDevice[] getDevicesForAttributes(android.media.audio.common.AudioAttributes attr, boolean forVolume) throws android.os.RemoteException", "public int getOutputForEffect(android.media.EffectDescriptor desc) throws android.os.RemoteException", "public void registerEffect(android.media.EffectDescriptor desc, int io, int strategy, int session, int id) throws android.os.RemoteException", "public void unregisterEffect(int id) throws android.os.RemoteException", "public void setEffectEnabled(int id, boolean enabled) throws android.os.RemoteException", "public void moveEffectsToIo(int[] ids, int io) throws android.os.RemoteException", "public boolean isStreamActive(int stream, int inPastMs) throws android.os.RemoteException", "public boolean isStreamActiveRemotely(int stream, int inPastMs) throws android.os.RemoteException", "public boolean isSourceActive(int source) throws android.os.RemoteException", "public android.media.EffectDescriptor[] queryDefaultPreProcessing(int audioSession, android.media.audio.common.Int count) throws android.os.RemoteException", "public int addSourceDefaultEffect(android.media.audio.common.AudioUuid type, java.lang.String opPackageName, android.media.audio.common.AudioUuid uuid, int priority, int source) throws android.os.RemoteException", "public int addStreamDefaultEffect(android.media.audio.common.AudioUuid type, java.lang.String opPackageName, android.media.audio.common.AudioUuid uuid, int priority, int usage) throws android.os.RemoteException", "public void removeSourceDefaultEffect(int id) throws android.os.RemoteException", "public void removeStreamDefaultEffect(int id) throws android.os.RemoteException", "public void setSupportedSystemUsages(int[] systemUsages) throws android.os.RemoteException", "public void setAllowedCapturePolicy(int uid, int capturePolicy) throws android.os.RemoteException", "public int getOffloadSupport(android.media.audio.common.AudioOffloadInfo info) throws android.os.RemoteException", "public boolean isDirectOutputSupported(android.media.audio.common.AudioConfigBase config, android.media.audio.common.AudioAttributes attributes) throws android.os.RemoteException", "public int listAudioPorts(int role, int type, android.media.audio.common.Int count, android.media.AudioPortFw[] ports) throws android.os.RemoteException", "public android.media.AudioPortFw[] listDeclaredDevicePorts(int role) throws android.os.RemoteException", "public android.media.AudioPortFw getAudioPort(int portId) throws android.os.RemoteException", "public int createAudioPatch(android.media.AudioPatchFw patch, int handle) throws android.os.RemoteException", "public void releaseAudioPatch(int handle) throws android.os.RemoteException", "public int listAudioPatches(android.media.audio.common.Int count, android.media.AudioPatchFw[] patches) throws android.os.RemoteException", "public void setAudioPortConfig(android.media.AudioPortConfigFw config) throws android.os.RemoteException", "public void registerClient(android.media.IAudioPolicyServiceClient client) throws android.os.RemoteException", "public void setAudioPortCallbacksEnabled(boolean enabled) throws android.os.RemoteException", "public void setAudioVolumeGroupCallbacksEnabled(boolean enabled) throws android.os.RemoteException", "public android.media.SoundTriggerSession acquireSoundTriggerSession() throws android.os.RemoteException", "public void releaseSoundTriggerSession(int session) throws android.os.RemoteException", "public int getPhoneState() throws android.os.RemoteException", "public void registerPolicyMixes(android.media.AudioMix[] mixes, boolean registration) throws android.os.RemoteException", "public java.util.List<android.media.AudioMix> getRegisteredPolicyMixes() throws android.os.RemoteException", "public void updatePolicyMixes(android.media.AudioMixUpdate[] updates) throws android.os.RemoteException", "public void setUidDeviceAffinities(int uid, android.media.audio.common.AudioDevice[] devices) throws android.os.RemoteException", "public void removeUidDeviceAffinities(int uid) throws android.os.RemoteException", "public void setUserIdDeviceAffinities(int userId, android.media.audio.common.AudioDevice[] devices) throws android.os.RemoteException", "public void removeUserIdDeviceAffinities(int userId) throws android.os.RemoteException", "public int startAudioSource(android.media.AudioPortConfigFw source, android.media.audio.common.AudioAttributes attributes) throws android.os.RemoteException", "public void stopAudioSource(int portId) throws android.os.RemoteException", "public void setMasterMono(boolean mono) throws android.os.RemoteException", "public boolean getMasterMono() throws android.os.RemoteException", "public float getStreamVolumeDB(int stream, int index, android.media.audio.common.AudioDeviceDescription device) throws android.os.RemoteException", "public void getSurroundFormats(android.media.audio.common.Int count, android.media.audio.common.AudioFormatDescription[] formats, boolean[] formatsEnabled) throws android.os.RemoteException", "public void getReportedSurroundFormats(android.media.audio.common.Int count, android.media.audio.common.AudioFormatDescription[] formats) throws android.os.RemoteException", "public android.media.audio.common.AudioFormatDescription[] getHwOffloadFormatsSupportedForBluetoothMedia(android.media.audio.common.AudioDeviceDescription device) throws android.os.RemoteException", "public void setSurroundFormatEnabled(android.media.audio.common.AudioFormatDescription audioFormat, boolean enabled) throws android.os.RemoteException", "public void setAssistantServicesUids(int[] uids) throws android.os.RemoteException", "public void setActiveAssistantServicesUids(int[] activeUids) throws android.os.RemoteException", "public void setA11yServicesUids(int[] uids) throws android.os.RemoteException", "public void setCurrentImeUid(int uid) throws android.os.RemoteException", "public boolean isHapticPlaybackSupported() throws android.os.RemoteException", "public boolean isUltrasoundSupported() throws android.os.RemoteException", "public boolean isHotwordStreamSupported(boolean lookbackAudio) throws android.os.RemoteException", "public android.media.AudioProductStrategy[] listAudioProductStrategies() throws android.os.RemoteException", "public int getProductStrategyFromAudioAttributes(android.media.audio.common.AudioAttributes aa, boolean fallbackOnDefault) throws android.os.RemoteException", "public android.media.AudioVolumeGroup[] listAudioVolumeGroups() throws android.os.RemoteException", "public int getVolumeGroupFromAudioAttributes(android.media.audio.common.AudioAttributes aa, boolean fallbackOnDefault) throws android.os.RemoteException", "public void setRttEnabled(boolean enabled) throws android.os.RemoteException", "public boolean isCallScreenModeSupported() throws android.os.RemoteException", "public void setDevicesRoleForStrategy(int strategy, int role, android.media.audio.common.AudioDevice[] devices) throws android.os.RemoteException", "public void removeDevicesRoleForStrategy(int strategy, int role, android.media.audio.common.AudioDevice[] devices) throws android.os.RemoteException", "public void clearDevicesRoleForStrategy(int strategy, int role) throws android.os.RemoteException", "public android.media.audio.common.AudioDevice[] getDevicesForRoleAndStrategy(int strategy, int role) throws android.os.RemoteException", "public void setDevicesRoleForCapturePreset(int audioSource, int role, android.media.audio.common.AudioDevice[] devices) throws android.os.RemoteException", "public void addDevicesRoleForCapturePreset(int audioSource, int role, android.media.audio.common.AudioDevice[] devices) throws android.os.RemoteException", "public void removeDevicesRoleForCapturePreset(int audioSource, int role, android.media.audio.common.AudioDevice[] devices) throws android.os.RemoteException", "public void clearDevicesRoleForCapturePreset(int audioSource, int role) throws android.os.RemoteException", "public android.media.audio.common.AudioDevice[] getDevicesForRoleAndCapturePreset(int audioSource, int role) throws android.os.RemoteException", "public boolean registerSoundTriggerCaptureStateListener(android.media.ICaptureStateListener listener) throws android.os.RemoteException", "public android.media.GetSpatializerResponse getSpatializer(android.media.INativeSpatializerCallback callback) throws android.os.RemoteException", "public boolean canBeSpatialized(android.media.audio.common.AudioAttributes attr, android.media.audio.common.AudioConfig config, android.media.audio.common.AudioDevice[] devices) throws android.os.RemoteException", "public int getDirectPlaybackSupport(android.media.audio.common.AudioAttributes attr, android.media.audio.common.AudioConfig config) throws android.os.RemoteException", "public android.media.audio.common.AudioProfile[] getDirectProfilesForAttributes(android.media.audio.common.AudioAttributes attr) throws android.os.RemoteException", "public android.media.AudioMixerAttributesInternal[] getSupportedMixerAttributes(int portId) throws android.os.RemoteException", "public void setPreferredMixerAttributes(android.media.audio.common.AudioAttributes attr, int portId, int uid, android.media.AudioMixerAttributesInternal mixerAttr) throws android.os.RemoteException", "public android.media.AudioMixerAttributesInternal getPreferredMixerAttributes(android.media.audio.common.AudioAttributes attr, int portId) throws android.os.RemoteException", "public void clearPreferredMixerAttributes(android.media.audio.common.AudioAttributes attr, int portId, int uid) throws android.os.RemoteException" ],
  "variableNames" : [ "mRemote" ]
}