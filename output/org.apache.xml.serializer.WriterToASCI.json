{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xml/serializer/WriterToASCI.java",
  "packageName" : "org.apache.xml.serializer",
  "className" : "WriterToASCI",
  "comment" : "\n * This class writes ASCII to a byte stream as quickly as possible.  For the\n * moment it does not do buffering, though I reserve the right to do some\n * buffering down the line if I can prove that it will be faster even if the\n * output stream is buffered.\n * \n * This class is only used internally within Xalan.\n * \n * @xsl.usage internal\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "m_os",
    "type" : "OutputStream",
    "comment" : " The byte stream to write to.  ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void write(char[] chars, int start, int length) throws java.io.IOException",
    "returnType" : "void",
    "comment" : "\n   * Write a portion of an array of characters.\n   *\n   * @param  chars  Array of characters\n   * @param  start   Offset from which to start writing characters\n   * @param  length   Number of characters to write\n   *\n   * @exception  IOException  If an I/O error occurs\n   *\n   * @throws java.io.IOException\n   ",
    "links" : [ ]
  }, {
    "name" : "public void write(int c) throws IOException",
    "returnType" : "void",
    "comment" : "\n   * Write a single character.  The character to be written is contained in\n   * the 16 low-order bits of the given integer value; the 16 high-order bits\n   * are ignored.\n   *\n   * <p> Subclasses that intend to support efficient single-character output\n   * should override this method.\n   *\n   * @param c  int specifying a character to be written.\n   * @exception  IOException  If an I/O error occurs\n   ",
    "links" : [ ]
  }, {
    "name" : "public void write(String s) throws IOException",
    "returnType" : "void",
    "comment" : "\n   * Write a string.\n   *\n   * @param  s String to be written\n   *\n   * @exception  IOException  If an I/O error occurs\n   ",
    "links" : [ ]
  }, {
    "name" : "public void flush() throws java.io.IOException",
    "returnType" : "void",
    "comment" : "\n   * Flush the stream.  If the stream has saved any characters from the\n   * various write() methods in a buffer, write them immediately to their\n   * intended destination.  Then, if that destination is another character or\n   * byte stream, flush it.  Thus one flush() invocation will flush all the\n   * buffers in a chain of Writers and OutputStreams.\n   *\n   * @exception  IOException  If an I/O error occurs\n   ",
    "links" : [ ]
  }, {
    "name" : "public void close() throws java.io.IOException",
    "returnType" : "void",
    "comment" : "\n   * Close the stream, flushing it first.  Once a stream has been closed,\n   * further write() or flush() invocations will cause an IOException to be\n   * thrown.  Closing a previously-closed stream, however, has no effect.\n   *\n   * @exception  IOException  If an I/O error occurs\n   ",
    "links" : [ ]
  }, {
    "name" : "public OutputStream getOutputStream()",
    "returnType" : "OutputStream",
    "comment" : "\n   * Get the output stream where the events will be serialized to.\n   *\n   * @return reference to the result stream, or null of only a writer was\n   * set.\n   ",
    "links" : [ ]
  }, {
    "name" : "public Writer getWriter()",
    "returnType" : "Writer",
    "comment" : "\n   * Get the writer that this writer directly chains to.\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void write(char[] chars, int start, int length) throws java.io.IOException", "public void write(int c) throws IOException", "public void write(String s) throws IOException", "public void flush() throws java.io.IOException", "public void close() throws java.io.IOException", "public OutputStream getOutputStream()", "public Writer getWriter()" ],
  "variableNames" : [ "m_os" ]
}