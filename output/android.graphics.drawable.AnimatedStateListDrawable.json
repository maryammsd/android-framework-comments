{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/graphics/drawable/AnimatedStateListDrawable.java",
  "packageName" : "android.graphics.drawable",
  "className" : "AnimatedStateListDrawable",
  "comment" : "\n * Drawable containing a set of Drawable keyframes where the currently displayed\n * keyframe is chosen based on the current state set. Animations between\n * keyframes may optionally be defined using transition elements.\n * <p>\n * This drawable can be defined in an XML file with the <code>\n * &lt;animated-selector></code> element. Each keyframe Drawable is defined in a\n * nested <code>&lt;item></code> element. Transitions are defined in a nested\n * <code>&lt;transition></code> element.\n *\n * @attr ref android.R.styleable#DrawableStates_state_focused\n * @attr ref android.R.styleable#DrawableStates_state_window_focused\n * @attr ref android.R.styleable#DrawableStates_state_enabled\n * @attr ref android.R.styleable#DrawableStates_state_checkable\n * @attr ref android.R.styleable#DrawableStates_state_checked\n * @attr ref android.R.styleable#DrawableStates_state_selected\n * @attr ref android.R.styleable#DrawableStates_state_activated\n * @attr ref android.R.styleable#DrawableStates_state_active\n * @attr ref android.R.styleable#DrawableStates_state_single\n * @attr ref android.R.styleable#DrawableStates_state_first\n * @attr ref android.R.styleable#DrawableStates_state_middle\n * @attr ref android.R.styleable#DrawableStates_state_last\n * @attr ref android.R.styleable#DrawableStates_state_pressed\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "LOGTAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ELEMENT_TRANSITION",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ELEMENT_ITEM",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mState",
    "type" : "AnimatedStateListState",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTransition",
    "type" : "Transition",
    "comment" : " The currently running transition, if any. ",
    "links" : [ ]
  }, {
    "name" : "mTransitionToIndex",
    "type" : "int",
    "comment" : " Index to be set after the transition ends. ",
    "links" : [ ]
  }, {
    "name" : "mTransitionFromIndex",
    "type" : "int",
    "comment" : " Index away from which we are transitioning. ",
    "links" : [ ]
  }, {
    "name" : "mMutated",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean setVisible(boolean visible, boolean restart)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addState(@NonNull int[] stateSet, @NonNull Drawable drawable, int id)",
    "returnType" : "void",
    "comment" : "\n     * Add a new drawable to the set of keyframes.\n     *\n     * @param stateSet An array of resource IDs to associate with the keyframe\n     * @param drawable The drawable to show when in the specified state, may not be null\n     * @param id The unique identifier for the keyframe\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addTransition(int fromId, int toId, @NonNull T transition, boolean reversible)",
    "returnType" : "void",
    "comment" : "\n     * Adds a new transition between keyframes.\n     *\n     * @param fromId Unique identifier of the starting keyframe\n     * @param toId Unique identifier of the ending keyframe\n     * @param transition An {@link Animatable} drawable to use as a transition, may not be null\n     * @param reversible Whether the transition can be reversed\n     ",
    "links" : [ "android.graphics.drawable.Animatable" ]
  }, {
    "name" : "public boolean isStateful()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected boolean onStateChange(int[] stateSet)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean selectTransition(int toIndex)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void jumpToCurrentState()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void inflate(@NonNull Resources r, @NonNull XmlPullParser parser, @NonNull AttributeSet attrs, @Nullable Theme theme) throws XmlPullParserException, IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void applyTheme(@Nullable Theme theme)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateStateFromTypedArray(TypedArray a)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void init()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void inflateChildElements(Resources r, XmlPullParser parser, AttributeSet attrs, Theme theme) throws XmlPullParserException, IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int parseTransition(@NonNull Resources r, @NonNull XmlPullParser parser, @NonNull AttributeSet attrs, @Nullable Theme theme) throws XmlPullParserException, IOException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int parseItem(@NonNull Resources r, @NonNull XmlPullParser parser, @NonNull AttributeSet attrs, @Nullable Theme theme) throws XmlPullParserException, IOException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Drawable mutate()",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " AnimatedStateListState cloneConstantState()",
    "returnType" : "AnimatedStateListState",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void clearMutated()",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void setConstantState(@NonNull DrawableContainerState state)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public boolean setVisible(boolean visible, boolean restart)", "public void addState(@NonNull int[] stateSet, @NonNull Drawable drawable, int id)", "public void addTransition(int fromId, int toId, @NonNull T transition, boolean reversible)", "public boolean isStateful()", "protected boolean onStateChange(int[] stateSet)", "private boolean selectTransition(int toIndex)", "public void jumpToCurrentState()", "public void inflate(@NonNull Resources r, @NonNull XmlPullParser parser, @NonNull AttributeSet attrs, @Nullable Theme theme) throws XmlPullParserException, IOException", "public void applyTheme(@Nullable Theme theme)", "private void updateStateFromTypedArray(TypedArray a)", "private void init()", "private void inflateChildElements(Resources r, XmlPullParser parser, AttributeSet attrs, Theme theme) throws XmlPullParserException, IOException", "private int parseTransition(@NonNull Resources r, @NonNull XmlPullParser parser, @NonNull AttributeSet attrs, @Nullable Theme theme) throws XmlPullParserException, IOException", "private int parseItem(@NonNull Resources r, @NonNull XmlPullParser parser, @NonNull AttributeSet attrs, @Nullable Theme theme) throws XmlPullParserException, IOException", "public Drawable mutate()", " AnimatedStateListState cloneConstantState()", "public void clearMutated()", "protected void setConstantState(@NonNull DrawableContainerState state)" ],
  "variableNames" : [ "LOGTAG", "ELEMENT_TRANSITION", "ELEMENT_ITEM", "mState", "mTransition", "mTransitionToIndex", "mTransitionFromIndex", "mMutated" ]
}