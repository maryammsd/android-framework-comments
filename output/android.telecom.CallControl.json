{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/telecom/CallControl.java",
  "packageName" : "android.telecom",
  "className" : "CallControl",
  "comment" : "\n * CallControl provides client side control of a call.  Each Call will get an individual CallControl\n * instance in which the client can alter the state of the associated call.\n *\n * <p>\n * Each method is Transactional meaning that it can succeed or fail. If a transaction succeeds,\n * the {@link OutcomeReceiver#onResult} will be called by Telecom.  Otherwise, the\n * {@link OutcomeReceiver#onError} is called and provides a {@link CallException} that details why\n * the operation failed.\n ",
  "links" : [ "android.os.OutcomeReceiver#onResult", "android.os.OutcomeReceiver#onError", "android.telecom.CallException" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallId",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mServerInterface",
    "type" : "ICallControl",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public ParcelUuid getCallId()",
    "returnType" : "ParcelUuid",
    "comment" : "\n     * @return the callId Telecom assigned to this CallControl object which should be attached to\n     * an individual call.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setActive(@CallbackExecutor @NonNull Executor executor, @NonNull OutcomeReceiver<Void, CallException> callback)",
    "returnType" : "void",
    "comment" : "\n     * Request Telecom set the call state to active. This method should be called when either an\n     * outgoing call is ready to go active or a held call is ready to go active again. For incoming\n     * calls that are ready to be answered, use\n     * {@link CallControl#answer(int, Executor, OutcomeReceiver)}.\n     *\n     * @param executor The {@link Executor} on which the {@link OutcomeReceiver} callback\n     *                 will be called on.\n     * @param callback that will be completed on the Telecom side that details success or failure\n     *                 of the requested operation.\n     *\n     *                 {@link OutcomeReceiver#onResult} will be called if Telecom has successfully\n     *                 switched the call state to active\n     *\n     *                 {@link OutcomeReceiver#onError} will be called if Telecom has failed to set\n     *                 the call state to active.  A {@link CallException} will be passed\n     *                 that details why the operation failed.\n     ",
    "links" : [ "com.android.internal.telecom.ICallControl#answer(int", "android.os.OutcomeReceiver#onResult", "android.annotation.CallbackExecutor", "android.os.OutcomeReceiver#onError", "android.telecom.CallException", "android.os.OutcomeReceiver" ]
  }, {
    "name" : "public void answer(@android.telecom.CallAttributes.CallType int videoState, @CallbackExecutor @NonNull Executor executor, @NonNull OutcomeReceiver<Void, CallException> callback)",
    "returnType" : "void",
    "comment" : "\n     * Request Telecom answer an incoming call.  For outgoing calls and calls that have been placed\n     * on hold, use {@link CallControl#setActive(Executor, OutcomeReceiver)}.\n     *\n     * @param videoState to report to Telecom. Telecom will store VideoState in the event another\n     *                   service/device requests it in order to continue the call on another screen.\n     * @param executor   The {@link Executor} on which the {@link OutcomeReceiver} callback\n     *                   will be called on.\n     * @param callback   that will be completed on the Telecom side that details success or failure\n     *                   of the requested operation.\n     *\n     *                   {@link OutcomeReceiver#onResult} will be called if Telecom has successfully\n     *                   switched the call state to active\n     *\n     *                   {@link OutcomeReceiver#onError} will be called if Telecom has failed to set\n     *                   the call state to active.  A {@link CallException} will be passed\n     *                   that details why the operation failed.\n     ",
    "links" : [ "android.os.OutcomeReceiver#onResult", "com.android.internal.telecom.ICallControl#setActive(Executor", "android.annotation.CallbackExecutor", "android.os.OutcomeReceiver#onError", "android.telecom.CallException", "android.os.OutcomeReceiver" ]
  }, {
    "name" : "public void setInactive(@CallbackExecutor @NonNull Executor executor, @NonNull OutcomeReceiver<Void, CallException> callback)",
    "returnType" : "void",
    "comment" : "\n     * Request Telecom set the call state to inactive. This the same as hold for two call endpoints\n     * but can be extended to setting a meeting to inactive.\n     *\n     * @param executor The {@link Executor} on which the {@link OutcomeReceiver} callback\n     *                 will be called on.\n     * @param callback that will be completed on the Telecom side that details success or failure\n     *                 of the requested operation.\n     *\n     *                 {@link OutcomeReceiver#onResult} will be called if Telecom has successfully\n     *                 switched the call state to inactive\n     *\n     *                 {@link OutcomeReceiver#onError} will be called if Telecom has failed to set\n     *                 the call state to inactive.  A {@link CallException} will be passed\n     *                 that details why the operation failed.\n     ",
    "links" : [ "android.os.OutcomeReceiver#onResult", "android.annotation.CallbackExecutor", "android.os.OutcomeReceiver#onError", "android.telecom.CallException", "android.os.OutcomeReceiver" ]
  }, {
    "name" : "public void disconnect(@NonNull DisconnectCause disconnectCause, @CallbackExecutor @NonNull Executor executor, @NonNull OutcomeReceiver<Void, CallException> callback)",
    "returnType" : "void",
    "comment" : "\n     * Request Telecom disconnect the call and remove the call from telecom tracking.\n     *\n     * @param disconnectCause represents the cause for disconnecting the call.  The only valid\n     *                        codes for the {@link  android.telecom.DisconnectCause} passed in are:\n     *                        <ul>\n     *                        <li>{@link DisconnectCause#LOCAL}</li>\n     *                        <li>{@link DisconnectCause#REMOTE}</li>\n     *                        <li>{@link DisconnectCause#REJECTED}</li>\n     *                        <li>{@link DisconnectCause#MISSED}</li>\n     *                        </ul>\n     * @param executor        The {@link Executor} on which the {@link OutcomeReceiver} callback\n     *                        will be called on.\n     * @param callback        That will be completed on the Telecom side that details success or\n     *                        failure of the requested operation.\n     *\n     *                        {@link OutcomeReceiver#onResult} will be called if Telecom has\n     *                        successfully disconnected the call.\n     *\n     *                        {@link OutcomeReceiver#onError} will be called if Telecom has failed\n     *                        to disconnect the call.  A {@link CallException} will be passed\n     *                        that details why the operation failed.\n     *\n     * <p>\n     * Note: After the call has been successfully disconnected, calling any CallControl API will\n     * result in the {@link OutcomeReceiver#onError} with\n     * {@link CallException#CODE_CALL_IS_NOT_BEING_TRACKED}.\n     ",
    "links" : [ "android.os.OutcomeReceiver#onResult", "android.telecom.DisconnectCause#REJECTED", "android.telecom.DisconnectCause#REMOTE", "android.telecom.DisconnectCause#MISSED", "android.telecom.DisconnectCause#LOCAL", "android.annotation.CallbackExecutor", "android.telecom.CallException#CODE_CALL_IS_NOT_BEING_TRACKED", "android.os.OutcomeReceiver#onError", "android.telecom.CallException", "android.telecom.DisconnectCause", "android.os.OutcomeReceiver" ]
  }, {
    "name" : "public void startCallStreaming(@CallbackExecutor @NonNull Executor executor, @NonNull OutcomeReceiver<Void, CallException> callback)",
    "returnType" : "void",
    "comment" : "\n     * Request start a call streaming session. On receiving valid request, telecom will bind to\n     * the {@code CallStreamingService} implemented by a general call streaming sender. So that the\n     * call streaming sender can perform streaming local device audio to another remote device and\n     * control the call during streaming.\n     *\n     * @param executor The {@link Executor} on which the {@link OutcomeReceiver} callback\n     *                 will be called on.\n     * @param callback that will be completed on the Telecom side that details success or failure\n     *                 of the requested operation.\n     *\n     *                 {@link OutcomeReceiver#onResult} will be called if Telecom has successfully\n     *                 started the call streaming.\n     *\n     *                 {@link OutcomeReceiver#onError} will be called if Telecom has failed to\n     *                 start the call streaming. A {@link CallException} will be passed that\n     *                 details why the operation failed.\n     ",
    "links" : [ "android.os.OutcomeReceiver#onResult", "android.annotation.CallbackExecutor", "android.os.OutcomeReceiver#onError", "android.telecom.CallException", "android.os.OutcomeReceiver" ]
  }, {
    "name" : "public void requestCallEndpointChange(@NonNull CallEndpoint callEndpoint, @CallbackExecutor @NonNull Executor executor, @NonNull OutcomeReceiver<Void, CallException> callback)",
    "returnType" : "void",
    "comment" : "\n     * Request a CallEndpoint change. Clients should not define their own CallEndpoint when\n     * requesting a change. Instead, the new endpoint should be one of the valid endpoints provided\n     * by {@link CallEventCallback#onAvailableCallEndpointsChanged(List)}.\n     *\n     * @param callEndpoint The {@link CallEndpoint} to change to.\n     * @param executor     The {@link Executor} on which the {@link OutcomeReceiver} callback\n     *                     will be called on.\n     * @param callback     The {@link OutcomeReceiver} that will be completed on the Telecom side\n     *                     that details success or failure of the requested operation.\n     *\n     *                     {@link OutcomeReceiver#onResult} will be called if Telecom has\n     *                     successfully changed the CallEndpoint that was requested.\n     *\n     *                     {@link OutcomeReceiver#onError} will be called if Telecom has failed to\n     *                     switch to the requested CallEndpoint.  A {@link CallException} will be\n     *                     passed that details why the operation failed.\n     ",
    "links" : [ "android.telecom.CallEventCallback#onAvailableCallEndpointsChanged(List)", "android.os.OutcomeReceiver#onResult", "android.telecom.CallEndpoint", "android.annotation.CallbackExecutor", "android.os.OutcomeReceiver#onError", "android.telecom.CallException", "android.os.OutcomeReceiver" ]
  }, {
    "name" : "public void requestMuteState(boolean isMuted, @CallbackExecutor @NonNull Executor executor, @NonNull OutcomeReceiver<Void, CallException> callback)",
    "returnType" : "void",
    "comment" : "\n     * Request a new mute state.  Note: {@link CallEventCallback#onMuteStateChanged(boolean)}\n     * will be called every time the mute state is changed and can be used to track the current\n     * mute state.\n     *\n     * @param isMuted  The new mute state.  Passing in a {@link Boolean#TRUE} for the isMuted\n     *                 parameter will mute the call.  {@link Boolean#FALSE} will unmute the call.\n     * @param executor The {@link Executor} on which the {@link OutcomeReceiver} callback\n     *                 will be called on.\n     * @param callback The {@link OutcomeReceiver} that will be completed on the Telecom side\n     *                 that details success or failure of the requested operation.\n     *\n     *                 {@link OutcomeReceiver#onResult} will be called if Telecom has\n     *                 successfully changed the mute state.\n     *\n     *                 {@link OutcomeReceiver#onError} will be called if Telecom has failed to\n     *                 switch to the mute state.  A {@link CallException} will be\n     *                 passed that details why the operation failed.\n     ",
    "links" : [ "android.telecom.CallEventCallback#onMuteStateChanged(boolean)", "#FALSE", "android.os.OutcomeReceiver#onResult", "#TRUE", "android.annotation.CallbackExecutor", "android.os.OutcomeReceiver#onError", "android.telecom.CallException", "android.os.OutcomeReceiver" ]
  }, {
    "name" : "public void requestVideoState(@CallAttributes.CallType int videoState, @CallbackExecutor @NonNull Executor executor, @NonNull OutcomeReceiver<Void, CallException> callback)",
    "returnType" : "void",
    "comment" : "\n     * Request a new video state for the ongoing call. This can only be changed if the application\n     * has registered a {@link PhoneAccount} with the\n     * {@link PhoneAccount#CAPABILITY_SUPPORTS_VIDEO_CALLING} and set the\n     * {@link CallAttributes#SUPPORTS_VIDEO_CALLING} when adding the call via\n     * {@link TelecomManager#addCall(CallAttributes, Executor, OutcomeReceiver,\n     *                                                      CallControlCallback, CallEventCallback)}\n     *\n     * @param videoState to report to Telecom. To see the valid argument to pass,\n      *                   see {@link CallAttributes.CallType}.\n     * @param executor   The {@link Executor} on which the {@link OutcomeReceiver} callback\n     *                   will be called on.\n     * @param callback   that will be completed on the Telecom side that details success or failure\n     *                   of the requested operation.\n     *\n     *                   {@link OutcomeReceiver#onResult} will be called if Telecom has successfully\n     *                   switched the video state.\n     *\n     *                   {@link OutcomeReceiver#onError} will be called if Telecom has failed to set\n     *                   the new video state.  A {@link CallException} will be passed\n     *                   that details why the operation failed.\n     * @throws IllegalArgumentException if the argument passed for videoState is invalid.  To see a\n     * list of valid states, see {@link CallAttributes.CallType}.\n     ",
    "links" : [ "android.os.OutcomeReceiver#onResult", "android.telecom.PhoneAccount", "android.telecom.PhoneAccount#CAPABILITY_SUPPORTS_VIDEO_CALLING", "android.telecom.CallAttributes#SUPPORTS_VIDEO_CALLING", "android.telecom.TelecomManager#addCall(CallAttributes", "CallAttributes.CallType", "android.annotation.CallbackExecutor", "android.os.OutcomeReceiver#onError", "android.telecom.CallException", "android.os.OutcomeReceiver" ]
  }, {
    "name" : "public void sendEvent(@NonNull String event, @NonNull Bundle extras)",
    "returnType" : "void",
    "comment" : "\n     * Raises an event to the {@link android.telecom.InCallService} implementations tracking this\n     * call via {@link android.telecom.Call.Callback#onConnectionEvent(Call, String, Bundle)}.\n     * These events and the associated extra keys for the {@code Bundle} parameter are mutually\n     * defined by a VoIP application and {@link android.telecom.InCallService}. This API is used to\n     * relay additional information about a call other than what is specified in the\n     * {@link android.telecom.CallAttributes} to {@link android.telecom.InCallService}s. This might\n     * include, for example, a change to the list of participants in a meeting, or the name of the\n     * speakers who have their hand raised. Where appropriate, the {@link InCallService}s tracking\n     * this call may choose to render this additional information about the call. An automotive\n     * calling UX, for example may have enough screen real estate to indicate the number of\n     * participants in a meeting, but to prevent distractions could suppress the list of\n     * participants.\n     *\n     * @param event a string event identifier agreed upon between a VoIP application and an\n     *              {@link android.telecom.InCallService}\n     * @param extras a {@link android.os.Bundle} containing information about the event, as agreed\n     *              upon between a VoIP application and {@link android.telecom.InCallService}.\n     ",
    "links" : [ "android.telecom.CallAttributes", "android.telecom.InCallService", "android.os.Bundle", "android.telecom.Call.Callback#onConnectionEvent(Call" ]
  }, {
    "name" : "private CallException getTransactionException(Bundle resultData)",
    "returnType" : "CallException",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private void validateDisconnectCause(DisconnectCause disconnectCause)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private void validateVideoState(@android.telecom.CallAttributes.CallType int videoState)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public ParcelUuid getCallId()", "public void setActive(@CallbackExecutor @NonNull Executor executor, @NonNull OutcomeReceiver<Void, CallException> callback)", "public void answer(@android.telecom.CallAttributes.CallType int videoState, @CallbackExecutor @NonNull Executor executor, @NonNull OutcomeReceiver<Void, CallException> callback)", "public void setInactive(@CallbackExecutor @NonNull Executor executor, @NonNull OutcomeReceiver<Void, CallException> callback)", "public void disconnect(@NonNull DisconnectCause disconnectCause, @CallbackExecutor @NonNull Executor executor, @NonNull OutcomeReceiver<Void, CallException> callback)", "public void startCallStreaming(@CallbackExecutor @NonNull Executor executor, @NonNull OutcomeReceiver<Void, CallException> callback)", "public void requestCallEndpointChange(@NonNull CallEndpoint callEndpoint, @CallbackExecutor @NonNull Executor executor, @NonNull OutcomeReceiver<Void, CallException> callback)", "public void requestMuteState(boolean isMuted, @CallbackExecutor @NonNull Executor executor, @NonNull OutcomeReceiver<Void, CallException> callback)", "public void requestVideoState(@CallAttributes.CallType int videoState, @CallbackExecutor @NonNull Executor executor, @NonNull OutcomeReceiver<Void, CallException> callback)", "public void sendEvent(@NonNull String event, @NonNull Bundle extras)", "private CallException getTransactionException(Bundle resultData)", "private void validateDisconnectCause(DisconnectCause disconnectCause)", "private void validateVideoState(@android.telecom.CallAttributes.CallType int videoState)" ],
  "variableNames" : [ "TAG", "mCallId", "mServerInterface" ]
}