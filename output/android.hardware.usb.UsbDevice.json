{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/hardware/usb/UsbDevice.java",
  "packageName" : "android.hardware.usb",
  "className" : "UsbDevice",
  "comment" : "\n * This class represents a USB device attached to the android device with the android device\n * acting as the USB host.\n * Each device contains one or more {@link UsbInterface}s, each of which contains a number of\n * {@link UsbEndpoint}s (the channels via which data is transmitted over USB).\n *\n * <p> This class contains information (along with {@link UsbInterface} and {@link UsbEndpoint})\n * that describes the capabilities of the USB device.\n * To communicate with the device, you open a {@link UsbDeviceConnection} for the device\n * and use {@link UsbRequest} to send and receive data on an endpoint.\n * {@link UsbDeviceConnection#controlTransfer} is used for control requests on endpoint zero.\n *\n * <div class=\"special reference\">\n * <h3>Developer Guides</h3>\n * <p>For more information about communicating with USB hardware, read the\n * <a href=\"{@docRoot}guide/topics/connectivity/usb/index.html\">USB</a> developer guide.</p>\n * </div>\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mManufacturerName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProductName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVersion",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConfigurations",
    "type" : "UsbConfiguration[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSerialNumberReader",
    "type" : "IUsbSerialReader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVendorId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProductId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mClass",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSubclass",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProtocol",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHasAudioPlayback",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHasAudioCapture",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHasMidi",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHasVideoPlayback",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHasVideoCapture",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInterfaces",
    "type" : "UsbInterface[]",
    "comment" : " All interfaces on the device. Initialized on first call to getInterfaceList ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<UsbDevice>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String getDeviceName()",
    "returnType" : "String",
    "comment" : "\n     * Returns the name of the device.\n     * In the standard implementation, this is the path of the device file\n     * for the device in the usbfs file system.\n     *\n     * @return the device name\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getManufacturerName()",
    "returnType" : "String",
    "comment" : "\n     * Returns the manufacturer name of the device.\n     *\n     * @return the manufacturer name, or {@code null} if the property could not be read\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getProductName()",
    "returnType" : "String",
    "comment" : "\n     * Returns the product name of the device.\n     *\n     * @return the product name, or {@code null} if the property could not be read\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getVersion()",
    "returnType" : "String",
    "comment" : "\n     * Returns the version number of the device.\n     *\n     * @return the device version\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getSerialNumber()",
    "returnType" : "String",
    "comment" : "\n     * Returns the serial number of the device.\n     *\n     * @return the serial number name, or {@code null} if the property could not be read\n     *\n     * @throws SecurityException if the app targets SDK >= {@value android.os.Build.VERSION_CODES#Q}\n     *                           and the app does not have permission to read from the device.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getDeviceId()",
    "returnType" : "int",
    "comment" : "\n     * Returns a unique integer ID for the device.\n     * This is a convenience for clients that want to use an integer to represent\n     * the device, rather than the device name.\n     * IDs are not persistent across USB disconnects.\n     *\n     * @return the device ID\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getVendorId()",
    "returnType" : "int",
    "comment" : "\n     * Returns a vendor ID for the device.\n     *\n     * @return the device vendor ID\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getProductId()",
    "returnType" : "int",
    "comment" : "\n     * Returns a product ID for the device.\n     *\n     * @return the device product ID\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getDeviceClass()",
    "returnType" : "int",
    "comment" : "\n     * Returns the devices's class field.\n     * Some useful constants for USB device classes can be found in {@link UsbConstants}.\n     *\n     * @return the devices's class\n     ",
    "links" : [ "android.hardware.usb.UsbConstants" ]
  }, {
    "name" : "public int getDeviceSubclass()",
    "returnType" : "int",
    "comment" : "\n     * Returns the device's subclass field.\n     *\n     * @return the device's subclass\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getDeviceProtocol()",
    "returnType" : "int",
    "comment" : "\n     * Returns the device's protocol field.\n     *\n     * @return the device's protocol\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getConfigurationCount()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of {@link UsbConfiguration}s this device contains.\n     *\n     * @return the number of configurations\n     ",
    "links" : [ "android.hardware.usb.UsbConfiguration" ]
  }, {
    "name" : "public boolean getHasAudioPlayback()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean getHasAudioCapture()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean getHasMidi()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean getHasVideoPlayback()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean getHasVideoCapture()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public UsbConfiguration getConfiguration(int index)",
    "returnType" : "UsbConfiguration",
    "comment" : "\n     * Returns the {@link UsbConfiguration} at the given index.\n     *\n     * @return the configuration\n     ",
    "links" : [ "android.hardware.usb.UsbConfiguration" ]
  }, {
    "name" : "private UsbInterface[] getInterfaceList()",
    "returnType" : "UsbInterface[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getInterfaceCount()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of {@link UsbInterface}s this device contains.\n     * For devices with multiple configurations, you will probably want to use\n     * {@link UsbConfiguration#getInterfaceCount} instead.\n     *\n     * @return the number of interfaces\n     ",
    "links" : [ "android.hardware.usb.UsbConfiguration#getInterfaceCount", "android.hardware.usb.UsbInterface" ]
  }, {
    "name" : "public UsbInterface getInterface(int index)",
    "returnType" : "UsbInterface",
    "comment" : "\n     * Returns the {@link UsbInterface} at the given index.\n     * For devices with multiple configurations, you will probably want to use\n     * {@link UsbConfiguration#getInterface} instead.\n     *\n     * @return the interface\n     ",
    "links" : [ "android.hardware.usb.UsbConfiguration#getInterface", "android.hardware.usb.UsbInterface" ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel parcel, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static int getDeviceId(String name)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String getDeviceName(int id)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int native_get_device_id(String name)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native String native_get_device_name(int id)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "DEBUG", "mName", "mManufacturerName", "mProductName", "mVersion", "mConfigurations", "mSerialNumberReader", "mVendorId", "mProductId", "mClass", "mSubclass", "mProtocol", "mHasAudioPlayback", "mHasAudioCapture", "mHasMidi", "mHasVideoPlayback", "mHasVideoCapture", "mInterfaces", "CREATOR" ],
  "methodNames" : [ "public String getDeviceName()", "public String getManufacturerName()", "public String getProductName()", "public String getVersion()", "public String getSerialNumber()", "public int getDeviceId()", "public int getVendorId()", "public int getProductId()", "public int getDeviceClass()", "public int getDeviceSubclass()", "public int getDeviceProtocol()", "public int getConfigurationCount()", "public boolean getHasAudioPlayback()", "public boolean getHasAudioCapture()", "public boolean getHasMidi()", "public boolean getHasVideoPlayback()", "public boolean getHasVideoCapture()", "public UsbConfiguration getConfiguration(int index)", "private UsbInterface[] getInterfaceList()", "public int getInterfaceCount()", "public UsbInterface getInterface(int index)", "public boolean equals(Object o)", "public int hashCode()", "public String toString()", "public int describeContents()", "public void writeToParcel(Parcel parcel, int flags)", "public static int getDeviceId(String name)", "public static String getDeviceName(int id)", "private static native int native_get_device_id(String name)", "private static native String native_get_device_name(int id)" ]
}