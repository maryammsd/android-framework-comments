{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/MediaSession2Service.java",
  "packageName" : "android.media",
  "className" : "MediaSession2Service",
  "comment" : "\n * This API is not generally intended for third party application developers.\n * Use the <a href=\"{@docRoot}jetpack/androidx.html\">AndroidX</a>\n * <a href=\"{@docRoot}reference/androidx/media2/session/package-summary.html\">Media2 session\n * Library</a> for consistent behavior across all devices.\n * <p>\n * Service containing {@link MediaSession2}.\n ",
  "links" : [ "android.media.MediaSession2" ],
  "variables" : [ {
    "name" : "SERVICE_INTERFACE",
    "type" : "String",
    "comment" : "\n     * The {@link Intent} that must be declared as handled by the service.\n     ",
    "links" : [ "android.content.Intent" ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mForegroundServiceEventCallback",
    "type" : "MediaSession2.ForegroundServiceEventCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNotificationManager",
    "type" : "NotificationManager",
    "comment" : "@GuardedBy(\"mLock\")",
    "links" : [ ]
  }, {
    "name" : "mMediaSessionManager",
    "type" : "MediaSessionManager",
    "comment" : "@GuardedBy(\"mLock\")",
    "links" : [ ]
  }, {
    "name" : "mStartSelfIntent",
    "type" : "Intent",
    "comment" : "@GuardedBy(\"mLock\")",
    "links" : [ ]
  }, {
    "name" : "mSessions",
    "type" : "Map<String, MediaSession2>",
    "comment" : "@GuardedBy(\"mLock\")",
    "links" : [ ]
  }, {
    "name" : "mNotifications",
    "type" : "Map<MediaSession2, MediaNotification>",
    "comment" : "@GuardedBy(\"mLock\")",
    "links" : [ ]
  }, {
    "name" : "mStub",
    "type" : "MediaSession2ServiceStub",
    "comment" : "@GuardedBy(\"mLock\")",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void onCreate()",
    "returnType" : "void",
    "comment" : "\n     * Called by the system when the service is first created. Do not call this method directly.\n     * <p>\n     * Override this method if you need your own initialization. Derived classes MUST call through\n     * to the super class's implementation of this method.\n     ",
    "links" : [ ]
  }, {
    "name" : "public IBinder onBind(@NonNull Intent intent)",
    "returnType" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onDestroy()",
    "returnType" : "void",
    "comment" : "\n     * Called by the system to notify that it is no longer used and is being removed. Do not call\n     * this method directly.\n     * <p>\n     * Override this method if you need your own clean up. Derived classes MUST call through\n     * to the super class's implementation of this method.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract MediaSession2 onGetSession(@NonNull ControllerInfo controllerInfo)",
    "returnType" : "MediaSession2",
    "comment" : "\n     * Called when a {@link MediaController2} is created with the this service's\n     * {@link Session2Token}. Return the session for telling the controller which session to\n     * connect. Return {@code null} to reject the connection from this controller.\n     * <p>\n     * Session returned here will be added to this service automatically. You don't need to call\n     * {@link #addSession(MediaSession2)} for that.\n     * <p>\n     * This method is always called on the main thread.\n     *\n     * @param controllerInfo information of the controller which is trying to connect.\n     * @return a {@link MediaSession2} instance for the controller to connect to, or {@code null}\n     *         to reject connection\n     * @see MediaSession2.Builder\n     * @see #getSessions()\n     ",
    "links" : [ "android.media.MediaController2", "#addSession(MediaSession2)", "android.media.Session2Token", "android.media.MediaSession2" ]
  }, {
    "name" : "public abstract MediaNotification onUpdateNotification(@NonNull MediaSession2 session)",
    "returnType" : "MediaNotification",
    "comment" : "\n     * Called to update the media notification when the playback state changes.\n     * <p>\n     * If playback is active and a notification is returned, the service uses it to become a\n     * foreground service. If playback is not active then the notification is still posted, but the\n     * service does not become a foreground service.\n     * <p>\n     * Apps must request the {@link android.Manifest.permission#FOREGROUND_SERVICE} permission\n     * in order to use this API. For apps targeting {@link android.os.Build.VERSION_CODES#TIRAMISU}\n     * or later, notifications will only be posted if the app has also been granted the\n     * {@link android.Manifest.permission#POST_NOTIFICATIONS} permission.\n     *\n     * @param session the session for which an updated media notification is required.\n     * @return the {@link MediaNotification}. Can be {@code null}.\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#TIRAMISU", "MediaNotification", "android.Manifest.permission#POST_NOTIFICATIONS", "android.Manifest.permission#FOREGROUND_SERVICE" ]
  }, {
    "name" : "public final void addSession(@NonNull MediaSession2 session)",
    "returnType" : "void",
    "comment" : "\n     * Adds a session to this service.\n     * <p>\n     * Added session will be removed automatically when it's closed, or removed when\n     * {@link #removeSession} is called.\n     *\n     * @param session a session to be added.\n     * @see #removeSession(MediaSession2)\n     ",
    "links" : [ "#removeSession" ]
  }, {
    "name" : "public final void removeSession(@NonNull MediaSession2 session)",
    "returnType" : "void",
    "comment" : "\n     * Removes a session from this service.\n     *\n     * @param session a session to be removed.\n     * @see #addSession(MediaSession2)\n     ",
    "links" : [ ]
  }, {
    "name" : "public final List<MediaSession2> getSessions()",
    "returnType" : "List<MediaSession2>",
    "comment" : "\n     * Gets the list of {@link MediaSession2}s that you've added to this service.\n     *\n     * @return sessions\n     ",
    "links" : [ "android.media.MediaSession2" ]
  }, {
    "name" : " MediaSessionManager getMediaSessionManager()",
    "returnType" : "MediaSessionManager",
    "comment" : "\n     * Returns the {@link MediaSessionManager}.\n     ",
    "links" : [ "android.media.session.MediaSessionManager" ]
  }, {
    "name" : " void onPlaybackActiveChanged(MediaSession2 session, boolean playbackActive)",
    "returnType" : "void",
    "comment" : "\n     * Called by registered {@link MediaSession2.ForegroundServiceEventCallback}\n     *\n     * @param session session with change\n     * @param playbackActive {@code true} if playback is active.\n     ",
    "links" : [ "MediaSession2.ForegroundServiceEventCallback" ]
  } ],
  "methodNames" : [ "public void onCreate()", "public IBinder onBind(@NonNull Intent intent)", "public void onDestroy()", "public abstract MediaSession2 onGetSession(@NonNull ControllerInfo controllerInfo)", "public abstract MediaNotification onUpdateNotification(@NonNull MediaSession2 session)", "public final void addSession(@NonNull MediaSession2 session)", "public final void removeSession(@NonNull MediaSession2 session)", "public final List<MediaSession2> getSessions()", " MediaSessionManager getMediaSessionManager()", " void onPlaybackActiveChanged(MediaSession2 session, boolean playbackActive)" ],
  "variableNames" : [ "SERVICE_INTERFACE", "TAG", "DEBUG", "mForegroundServiceEventCallback", "mLock", "mNotificationManager", "mMediaSessionManager", "mStartSelfIntent", "mSessions", "mNotifications", "mStub" ]
}