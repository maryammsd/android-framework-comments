{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/units/ConversionRates.java",
  "packageName" : "android.icu.impl.units",
  "className" : "ConversionRates",
  "comment" : "\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mapToConversionRate",
    "type" : "HashMap<String, ConversionRateInfo>",
    "comment" : "\n     * Map from any simple unit (i.e. \"meter\", \"foot\", \"inch\") to its basic/root conversion rate info.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private UnitsConverter.Factor getFactorToBase(SingleUnitImpl singleUnit)",
    "returnType" : "UnitsConverter.Factor",
    "comment" : " In ICU4C, this is called loadCompoundFactor().",
    "links" : [ ]
  }, {
    "name" : "public UnitsConverter.Factor getFactorToBase(MeasureUnitImpl measureUnit)",
    "returnType" : "UnitsConverter.Factor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected BigDecimal getOffset(MeasureUnitImpl source, MeasureUnitImpl target, UnitsConverter.Factor sourceToBase, UnitsConverter.Factor targetToBase, UnitsConverter.Convertibility convertibility)",
    "returnType" : "BigDecimal",
    "comment" : " In ICU4C, this functionality is found in loadConversionRate().",
    "links" : [ ]
  }, {
    "name" : "protected String getSpecialMappingName(MeasureUnitImpl simpleUnit)",
    "returnType" : "String",
    "comment" : " the simple unit converts to base using factor + offset instelad of a special mapping).",
    "links" : [ ]
  }, {
    "name" : "public MeasureUnitImpl extractCompoundBaseUnit(MeasureUnitImpl measureUnit)",
    "returnType" : "MeasureUnitImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ArrayList<SingleUnitImpl> extractBaseUnits(MeasureUnitImpl measureUnitImpl)",
    "returnType" : "ArrayList<SingleUnitImpl>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ArrayList<SingleUnitImpl> extractBaseUnits(SingleUnitImpl singleUnit)",
    "returnType" : "ArrayList<SingleUnitImpl>",
    "comment" : "\n     * @param singleUnit An instance of SingleUnitImpl.\n     * @return The base units in the {@code SingleUnitImpl} with applying the dimensionality only and not the SI prefix.\n     * <p>\n     * NOTE:\n     * This method is helpful when checking the convertibility because no need to check convertibility.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String extractSystems(SingleUnitImpl singleUnit)",
    "returnType" : "String",
    "comment" : "\n     * @return The measurement systems for the specified unit.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean checkSimpleUnit(MeasureUnitImpl measureUnitImpl)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if the {@code MeasureUnitImpl} is simple or not.\n     *\n     * @param measureUnitImpl\n     * @return true if the {@code MeasureUnitImpl} is simple, false otherwise.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private UnitsConverter.Factor getFactorToBase(SingleUnitImpl singleUnit)", "public UnitsConverter.Factor getFactorToBase(MeasureUnitImpl measureUnit)", "protected BigDecimal getOffset(MeasureUnitImpl source, MeasureUnitImpl target, UnitsConverter.Factor sourceToBase, UnitsConverter.Factor targetToBase, UnitsConverter.Convertibility convertibility)", "protected String getSpecialMappingName(MeasureUnitImpl simpleUnit)", "public MeasureUnitImpl extractCompoundBaseUnit(MeasureUnitImpl measureUnit)", "public ArrayList<SingleUnitImpl> extractBaseUnits(MeasureUnitImpl measureUnitImpl)", "public ArrayList<SingleUnitImpl> extractBaseUnits(SingleUnitImpl singleUnit)", "public String extractSystems(SingleUnitImpl singleUnit)", "private boolean checkSimpleUnit(MeasureUnitImpl measureUnitImpl)" ],
  "variableNames" : [ "mapToConversionRate" ]
}