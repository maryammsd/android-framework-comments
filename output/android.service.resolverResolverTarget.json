{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/service/resolver/ResolverTarget.java",
  "packageName" : "android.service.resolver",
  "className" : "ResolverTarget",
  "comment" : "\n * A ResolverTarget contains features by which an app or option will be ranked, in\n * {@link ResolverRankerService}.\n * @hide\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRecencyScore",
    "type" : "float",
    "comment" : "\n     * a float score for recency of last use.\n     ",
    "links" : [ ]
  }, {
    "name" : "mTimeSpentScore",
    "type" : "float",
    "comment" : "\n     * a float score for total time spent.\n     ",
    "links" : [ ]
  }, {
    "name" : "mLaunchScore",
    "type" : "float",
    "comment" : "\n     * a float score for number of launches.\n     ",
    "links" : [ ]
  }, {
    "name" : "mChooserScore",
    "type" : "float",
    "comment" : "\n     * a float score for number of selected.\n     ",
    "links" : [ ]
  }, {
    "name" : "mSelectProbability",
    "type" : "float",
    "comment" : "\n     * a float score for the probability to be selected.\n     ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<ResolverTarget>",
    "comment" : " creator definition for the class.",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public float getRecencyScore()",
    "returnType" : "float",
    "comment" : "\n     * Gets the score for how recently the target was used in the foreground.\n     *\n     * @return a float score whose range is [0, 1]. The higher the score is, the more recently the\n     * target was used.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setRecencyScore(float recencyScore)",
    "returnType" : "void",
    "comment" : "\n     * Sets the score for how recently the target was used in the foreground.\n     *\n     * @param recencyScore a float score whose range is [0, 1]. The higher the score is, the more\n     *                     recently the target was used.\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getTimeSpentScore()",
    "returnType" : "float",
    "comment" : "\n     * Gets the score for how long the target has been used in the foreground.\n     *\n     * @return a float score whose range is [0, 1]. The higher the score is, the longer the target\n     * has been used for.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTimeSpentScore(float timeSpentScore)",
    "returnType" : "void",
    "comment" : "\n     * Sets the score for how long the target has been used in the foreground.\n     *\n     * @param timeSpentScore a float score whose range is [0, 1]. The higher the score is, the\n     *                       longer the target has been used for.\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getLaunchScore()",
    "returnType" : "float",
    "comment" : "\n     * Gets the score for how many times the target has been launched to the foreground.\n     *\n     * @return a float score whose range is [0, 1]. The higher the score is, the more times the\n     * target has been launched.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setLaunchScore(float launchScore)",
    "returnType" : "void",
    "comment" : "\n     * Sets the score for how many times the target has been launched to the foreground.\n     *\n     * @param launchScore a float score whose range is [0, 1]. The higher the score is, the more\n     *                    times the target has been launched.\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getChooserScore()",
    "returnType" : "float",
    "comment" : "\n     * Gets the score for how many times the target has been selected by the user to share the same\n     * types of content.\n     *\n     * @return a float score whose range is [0, 1]. The higher the score is, the\n     * more times the target has been selected by the user to share the same types of content for.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setChooserScore(float chooserScore)",
    "returnType" : "void",
    "comment" : "\n     * Sets the score for how many times the target has been selected by the user to share the same\n     * types of content.\n     *\n     * @param chooserScore a float score whose range is [0, 1]. The higher the score is, the more\n     *                     times the target has been selected by the user to share the same types\n     *                     of content for.\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getSelectProbability()",
    "returnType" : "float",
    "comment" : "\n     * Gets the probability of how likely this target will be selected by the user.\n     *\n     * @return a float score whose range is [0, 1]. The higher the score is, the more likely the\n     * user is going to select this target.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSelectProbability(float selectProbability)",
    "returnType" : "void",
    "comment" : "\n     * Sets the probability for how like this target will be selected by the user.\n     *\n     * @param selectProbability a float score whose range is [0, 1]. The higher the score is, the\n     *                          more likely tht user is going to select this target.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : " serialize the class to a string.",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : " representation.",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : " flattens this object in to a Parcel.",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "mRecencyScore", "mTimeSpentScore", "mLaunchScore", "mChooserScore", "mSelectProbability", "CREATOR" ],
  "methodNames" : [ "public float getRecencyScore()", "public void setRecencyScore(float recencyScore)", "public float getTimeSpentScore()", "public void setTimeSpentScore(float timeSpentScore)", "public float getLaunchScore()", "public void setLaunchScore(float launchScore)", "public float getChooserScore()", "public void setChooserScore(float chooserScore)", "public float getSelectProbability()", "public void setSelectProbability(float selectProbability)", "public String toString()", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)" ]
}