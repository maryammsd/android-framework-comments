{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/app/ActivityView.java",
  "packageName" : "android.app",
  "className" : "ActivityView",
  "comment" : "\n * Task container that allows launching activities into itself.\n * <p>Activity launching into this container is restricted by the same rules that apply to launching\n * on VirtualDisplays.\n * @hide\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTaskEmbedder",
    "type" : "android.window.TaskEmbedder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSurfaceView",
    "type" : "SurfaceView",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSurfaceCallback",
    "type" : "SurfaceCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGuard",
    "type" : "CloseGuard",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOpened",
    "type" : "boolean",
    "comment" : " Protected by mGuard.",
    "links" : [ ]
  }, {
    "name" : "mTmpTransaction",
    "type" : "SurfaceControl.Transaction",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWindowPosition",
    "type" : "Point",
    "comment" : " For Host",
    "links" : [ ]
  }, {
    "name" : "mTmpArray",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTmpRect",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mScreenSurfaceMatrix",
    "type" : "Matrix",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTapExcludeRegion",
    "type" : "Region",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setCallback(StateCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Set the callback to be notified about state changes.\n     * <p>This class must finish initializing before {@link #startActivity(Intent)} can be called.\n     * <p>Note: If the instance was ready prior to this call being made, then\n     * {@link StateCallback#onActivityViewReady(ActivityView)} will be called from within\n     * this method call.\n     *\n     * @param callback The callback to report events to.\n     *\n     * @see StateCallback\n     * @see #startActivity(Intent)\n     ",
    "links" : [ "#startActivity(Intent)", "#onActivityViewReady(ActivityView)" ]
  }, {
    "name" : "public void setCornerRadius(float cornerRadius)",
    "returnType" : "void",
    "comment" : "\n     * Sets the corner radius for the Activity displayed here. The corners will be\n     * cropped from the window painted by the contained Activity.\n     *\n     * @param cornerRadius the radius for the corners, in pixels\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getCornerRadius()",
    "returnType" : "float",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSurfaceClippingEnabled(boolean clippingEnabled)",
    "returnType" : "void",
    "comment" : "\n     * Control whether the surface is clipped to the same bounds as the View. If true, then\n     * the bounds set by {@link #setSurfaceClipBounds(Rect)} are applied to the surface as\n     * window-crop.\n     *\n     * @param clippingEnabled whether to enable surface clipping\n     * @hide\n     ",
    "links" : [ "#setSurfaceClipBounds(Rect)" ]
  }, {
    "name" : "public void setSurfaceClipBounds(Rect clipBounds)",
    "returnType" : "void",
    "comment" : "\n     * Sets an area on the contained surface to which it will be clipped\n     * when it is drawn. Setting the value to null will remove the clip bounds\n     * and the surface will draw normally, using its full bounds.\n     *\n     * @param clipBounds The rectangular area, in the local coordinates of\n     * this view, to which future drawing operations will be clipped.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getSurfaceClipBounds(Rect outRect)",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void startShortcutActivity(@NonNull ShortcutInfo shortcut, @NonNull ActivityOptions options, @Nullable Rect sourceBounds)",
    "returnType" : "void",
    "comment" : "\n     * Launch an activity represented by {@link ShortcutInfo} into this container.\n     * <p>The owner of this container must be allowed to access the shortcut information,\n     * as defined in {@link LauncherApps#hasShortcutHostPermission()} to use this method.\n     * <p>Activity resolved by the provided {@link ShortcutInfo} must have\n     * {@link android.R.attr#resizeableActivity} attribute set to {@code true} in order to be\n     * launched here. Also, if activity is not owned by the owner of this container, it must allow\n     * embedding and the caller must have permission to embed.\n     * <p>Note: This class must finish initializing and\n     * {@link StateCallback#onActivityViewReady(ActivityView)} callback must be triggered before\n     * this method can be called.\n     *\n     * @param shortcut the shortcut used to launch the activity.\n     * @param options for the activity.\n     * @param sourceBounds the rect containing the source bounds of the clicked icon to open\n     *                     this shortcut.\n     * @see StateCallback\n     * @see LauncherApps#startShortcut(ShortcutInfo, Rect, Bundle)\n     *\n     * @hide\n     ",
    "links" : [ "android.content.pm.LauncherApps#hasShortcutHostPermission()", "android.R.attr#resizeableActivity", "android.content.pm.ShortcutInfo", "#onActivityViewReady(ActivityView)" ]
  }, {
    "name" : "public void startActivity(@NonNull Intent intent)",
    "returnType" : "void",
    "comment" : "\n     * Launch a new activity into this container.\n     * <p>Activity resolved by the provided {@link Intent} must have\n     * {@link android.R.attr#resizeableActivity} attribute set to {@code true} in order to be\n     * launched here. Also, if activity is not owned by the owner of this container, it must allow\n     * embedding and the caller must have permission to embed.\n     * <p>Note: This class must finish initializing and\n     * {@link StateCallback#onActivityViewReady(ActivityView)} callback must be triggered before\n     * this method can be called.\n     *\n     * @param intent Intent used to launch an activity.\n     *\n     * @see StateCallback\n     * @see #startActivity(PendingIntent)\n     ",
    "links" : [ "android.R.attr#resizeableActivity", "android.content.Intent", "#onActivityViewReady(ActivityView)" ]
  }, {
    "name" : "public void startActivity(@NonNull Intent intent, UserHandle user)",
    "returnType" : "void",
    "comment" : "\n     * Launch a new activity into this container.\n     * <p>Activity resolved by the provided {@link Intent} must have\n     * {@link android.R.attr#resizeableActivity} attribute set to {@code true} in order to be\n     * launched here. Also, if activity is not owned by the owner of this container, it must allow\n     * embedding and the caller must have permission to embed.\n     * <p>Note: This class must finish initializing and\n     * {@link StateCallback#onActivityViewReady(ActivityView)} callback must be triggered before\n     * this method can be called.\n     *\n     * @param intent Intent used to launch an activity.\n     * @param user The UserHandle of the user to start this activity for.\n     *\n     *\n     * @see StateCallback\n     * @see #startActivity(PendingIntent)\n     ",
    "links" : [ "android.R.attr#resizeableActivity", "android.content.Intent", "#onActivityViewReady(ActivityView)" ]
  }, {
    "name" : "public void startActivity(@NonNull PendingIntent pendingIntent)",
    "returnType" : "void",
    "comment" : "\n     * Launch a new activity into this container.\n     * <p>Activity resolved by the provided {@link PendingIntent} must have\n     * {@link android.R.attr#resizeableActivity} attribute set to {@code true} in order to be\n     * launched here. Also, if activity is not owned by the owner of this container, it must allow\n     * embedding and the caller must have permission to embed.\n     * <p>Note: This class must finish initializing and\n     * {@link StateCallback#onActivityViewReady(ActivityView)} callback must be triggered before\n     * this method can be called.\n     *\n     * @param pendingIntent Intent used to launch an activity.\n     *\n     * @see StateCallback\n     * @see #startActivity(Intent)\n     ",
    "links" : [ "android.R.attr#resizeableActivity", "android.app.PendingIntent", "#onActivityViewReady(ActivityView)" ]
  }, {
    "name" : "public void startActivity(@NonNull PendingIntent pendingIntent, @Nullable Intent fillInIntent, @NonNull ActivityOptions options)",
    "returnType" : "void",
    "comment" : "\n     * Launch a new activity into this container.\n     * <p>Activity resolved by the provided {@link PendingIntent} must have\n     * {@link android.R.attr#resizeableActivity} attribute set to {@code true} in order to be\n     * launched here. Also, if activity is not owned by the owner of this container, it must allow\n     * embedding and the caller must have permission to embed.\n     * <p>Note: This class must finish initializing and\n     * {@link StateCallback#onActivityViewReady(ActivityView)} callback must be triggered before\n     * this method can be called.\n     *\n     * @param pendingIntent Intent used to launch an activity.\n     * @param fillInIntent Additional Intent data, see {@link Intent#fillIn Intent.fillIn()}.\n     * @param options options for the activity\n     *\n     * @see StateCallback\n     * @see #startActivity(Intent)\n     ",
    "links" : [ "android.R.attr#resizeableActivity", "android.content.Intent#fillIn", "android.app.PendingIntent", "#onActivityViewReady(ActivityView)" ]
  }, {
    "name" : "public void release()",
    "returnType" : "void",
    "comment" : "\n     * Release this container if it is initialized. Activity launching will no longer be permitted.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onLocationChanged()",
    "returnType" : "void",
    "comment" : "\n     * Triggers an update of {@link ActivityView}'s location in window to properly set tap exclude\n     * regions and avoid focus switches by touches on this view.\n     ",
    "links" : [ "android.app.ActivityView" ]
  }, {
    "name" : "public void onLayout(boolean changed, int l, int t, int r, int b)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setAlpha(float alpha)",
    "returnType" : "void",
    "comment" : "\n     * Sets the alpha value when the content of {@link SurfaceView} needs to show or hide.\n     * <p>Note: The surface view may ignore the alpha value in some cases. Refer to\n     * {@link SurfaceView#setAlpha} for more details.\n     *\n     * @param alpha The opacity of the view.\n     ",
    "links" : [ "android.view.SurfaceView", "android.view.SurfaceView#setAlpha" ]
  }, {
    "name" : "public float getAlpha()",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean gatherTransparentRegion(Region region)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onVisibilityChanged(View changedView, int visibility)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getVirtualDisplayId()",
    "returnType" : "int",
    "comment" : "\n     * @return the display id of the virtual display.\n     ",
    "links" : [ ]
  }, {
    "name" : "public VirtualDisplay getVirtualDisplay()",
    "returnType" : "VirtualDisplay",
    "comment" : "\n     * @hide\n     * @return virtual display.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void performBackPress()",
    "returnType" : "void",
    "comment" : "\n     * Injects a pair of down/up key events with keycode {@link KeyEvent#KEYCODE_BACK} to the\n     * virtual display.\n     ",
    "links" : [ "android.view.KeyEvent#KEYCODE_BACK" ]
  }, {
    "name" : "private boolean initTaskEmbedder(SurfaceControl parent)",
    "returnType" : "boolean",
    "comment" : "\n     * Initializes the task embedder.\n     *\n     * @param parent control for the surface to parent to\n     * @return true if the task embedder has been initialized\n     ",
    "links" : [ ]
  }, {
    "name" : "private void performRelease()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void finalize() throws Throwable",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setForwardedInsets(Insets insets)",
    "returnType" : "void",
    "comment" : "\n     * Set forwarded insets on the virtual display.\n     *\n     * @see IWindowManager#setForwardedInsets\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onTaskBackgroundColorChanged(android.window.TaskEmbedder ts, int bgColor)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public Region getTapExcludeRegion()",
    "returnType" : "Region",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public Matrix getScreenToTaskMatrix()",
    "returnType" : "Matrix",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public Point getPositionInWindow()",
    "returnType" : "Point",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public Rect getScreenBounds()",
    "returnType" : "Rect",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public IWindow getWindow()",
    "returnType" : "IWindow",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean canReceivePointerEvents()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "protected boolean useTaskOrganizer()",
    "returnType" : "boolean",
    "comment" : "\n     * Overridden by instances that require the use of the task organizer implementation instead of\n     * the virtual display implementation.  Not for general use.\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "mTaskEmbedder", "mSurfaceView", "mSurfaceCallback", "mGuard", "mOpened", "mTmpTransaction", "mWindowPosition", "mTmpArray", "mTmpRect", "mScreenSurfaceMatrix", "mTapExcludeRegion" ],
  "methodNames" : [ "public void setCallback(StateCallback callback)", "public void setCornerRadius(float cornerRadius)", "public float getCornerRadius()", "public void setSurfaceClippingEnabled(boolean clippingEnabled)", "public void setSurfaceClipBounds(Rect clipBounds)", "public boolean getSurfaceClipBounds(Rect outRect)", "public void startShortcutActivity(@NonNull ShortcutInfo shortcut, @NonNull ActivityOptions options, @Nullable Rect sourceBounds)", "public void startActivity(@NonNull Intent intent)", "public void startActivity(@NonNull Intent intent, UserHandle user)", "public void startActivity(@NonNull PendingIntent pendingIntent)", "public void startActivity(@NonNull PendingIntent pendingIntent, @Nullable Intent fillInIntent, @NonNull ActivityOptions options)", "public void release()", "public void onLocationChanged()", "public void onLayout(boolean changed, int l, int t, int r, int b)", "public void setAlpha(float alpha)", "public float getAlpha()", "public boolean gatherTransparentRegion(Region region)", "protected void onVisibilityChanged(View changedView, int visibility)", "public int getVirtualDisplayId()", "public VirtualDisplay getVirtualDisplay()", "public void performBackPress()", "private boolean initTaskEmbedder(SurfaceControl parent)", "private void performRelease()", "protected void finalize() throws Throwable", "public void setForwardedInsets(Insets insets)", "public void onTaskBackgroundColorChanged(android.window.TaskEmbedder ts, int bgColor)", "public Region getTapExcludeRegion()", "public Matrix getScreenToTaskMatrix()", "public Point getPositionInWindow()", "public Rect getScreenBounds()", "public IWindow getWindow()", "public boolean canReceivePointerEvents()", "protected boolean useTaskOrganizer()" ]
}