{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/concurrent/Exchanger.java",
  "packageName" : "java.util.concurrent",
  "className" : "Exchanger",
  "comment" : "\n * A synchronization point at which threads can pair and swap elements\n * within pairs.  Each thread presents some object on entry to the\n * {@link #exchange exchange} method, matches with a partner thread,\n * and receives its partner's object on return.  An Exchanger may be\n * viewed as a bidirectional form of a {@link SynchronousQueue}.\n * Exchangers may be useful in applications such as genetic algorithms\n * and pipeline designs.\n *\n * <p><b>Sample Usage:</b>\n * Here are the highlights of a class that uses an {@code Exchanger}\n * to swap buffers between threads so that the thread filling the\n * buffer gets a freshly emptied one when it needs it, handing off the\n * filled one to the thread emptying the buffer.\n * <pre> {@code\n * class FillAndEmpty {\n *   Exchanger<DataBuffer> exchanger = new Exchanger<>();\n *   DataBuffer initialEmptyBuffer = ...; // a made-up type\n *   DataBuffer initialFullBuffer = ...;\n *\n *   class FillingLoop implements Runnable {\n *     public void run() {\n *       DataBuffer currentBuffer = initialEmptyBuffer;\n *       try {\n *         while (currentBuffer != null) {\n *           addToBuffer(currentBuffer);\n *           if (currentBuffer.isFull())\n *             currentBuffer = exchanger.exchange(currentBuffer);\n *         }\n *       } catch (InterruptedException ex) { ... handle ...}\n *     }\n *   }\n *\n *   class EmptyingLoop implements Runnable {\n *     public void run() {\n *       DataBuffer currentBuffer = initialFullBuffer;\n *       try {\n *         while (currentBuffer != null) {\n *           takeFromBuffer(currentBuffer);\n *           if (currentBuffer.isEmpty())\n *             currentBuffer = exchanger.exchange(currentBuffer);\n *         }\n *       } catch (InterruptedException ex) { ... handle ...}\n *     }\n *   }\n *\n *   void start() {\n *     new Thread(new FillingLoop()).start();\n *     new Thread(new EmptyingLoop()).start();\n *   }\n * }}</pre>\n *\n * <p>Memory consistency effects: For each pair of threads that\n * successfully exchange objects via an {@code Exchanger}, actions\n * prior to the {@code exchange()} in each thread\n * <a href=\"package-summary.html#MemoryVisibility\"><i>happen-before</i></a>\n * those subsequent to a return from the corresponding {@code exchange()}\n * in the other thread.\n *\n * @since 1.5\n * @author Doug Lea and Bill Scherer and Michael Scott\n * @param <V> The type of objects that may be exchanged\n ",
  "links" : [ "#exchange", "java.util.concurrent.SynchronousQueue" ],
  "variables" : [ {
    "name" : "ASHIFT",
    "type" : "int",
    "comment" : "\n     * The index distance (as a shift value) between any two used slots\n     * in the arena, spacing them out to avoid false sharing.\n     ",
    "links" : [ ]
  }, {
    "name" : "MMASK",
    "type" : "int",
    "comment" : "\n     * The maximum supported arena index. The maximum allocatable\n     * arena size is MMASK + 1. Must be a power of two minus one, less\n     * than (1<<(31-ASHIFT)). The cap of 255 (0xff) more than suffices\n     * for the expected scaling limits of the main algorithms.\n     ",
    "links" : [ ]
  }, {
    "name" : "SEQ",
    "type" : "int",
    "comment" : "\n     * Unit for sequence/version bits of bound field. Each successful\n     * change to the bound also adds SEQ.\n     ",
    "links" : [ ]
  }, {
    "name" : "NCPU",
    "type" : "int",
    "comment" : " The number of CPUs, for sizing and spin control ",
    "links" : [ ]
  }, {
    "name" : "FULL",
    "type" : "int",
    "comment" : "\n     * The maximum slot index of the arena: The number of slots that\n     * can in principle hold all threads without contention, or at\n     * most the maximum indexable value.\n     ",
    "links" : [ ]
  }, {
    "name" : "SPINS",
    "type" : "int",
    "comment" : "\n     * The bound for spins while waiting for a match. The actual\n     * number of iterations will on average be about twice this value\n     * due to randomization. Note: Spinning is disabled when NCPU==1.\n     ",
    "links" : [ ]
  }, {
    "name" : "NULL_ITEM",
    "type" : "Object",
    "comment" : "\n     * Value representing null arguments/returns from public\n     * methods. Needed because the API originally didn't disallow null\n     * arguments, which it should have.\n     ",
    "links" : [ ]
  }, {
    "name" : "TIMED_OUT",
    "type" : "Object",
    "comment" : "\n     * Sentinel value returned by internal exchange methods upon\n     * timeout, to avoid need for separate timed versions of these\n     * methods.\n     ",
    "links" : [ ]
  }, {
    "name" : "participant",
    "type" : "Participant",
    "comment" : "\n     * Per-thread state.\n     ",
    "links" : [ ]
  }, {
    "name" : "arena",
    "type" : "Node[]",
    "comment" : "\n     * Elimination array; null until enabled (within slotExchange).\n     * Element accesses use emulation of volatile gets and CAS.\n     ",
    "links" : [ ]
  }, {
    "name" : "slot",
    "type" : "Node",
    "comment" : "\n     * Slot used until contention detected.\n     ",
    "links" : [ ]
  }, {
    "name" : "bound",
    "type" : "int",
    "comment" : "\n     * The index of the largest valid arena position, OR'ed with SEQ\n     * number in high bits, incremented on each update.  The initial\n     * update from 0 to SEQ is used to ensure that the arena array is\n     * constructed only once.\n     ",
    "links" : [ ]
  }, {
    "name" : "BOUND",
    "type" : "VarHandle",
    "comment" : " VarHandle mechanics",
    "links" : [ ]
  }, {
    "name" : "SLOT",
    "type" : "VarHandle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MATCH",
    "type" : "VarHandle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "AA",
    "type" : "VarHandle",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private final Object arenaExchange(Object item, boolean timed, long ns)",
    "returnType" : "Object",
    "comment" : "\n     * Exchange function when arenas enabled. See above for explanation.\n     *\n     * @param item the (non-null) item to exchange\n     * @param timed true if the wait is timed\n     * @param ns if timed, the maximum wait time, else 0L\n     * @return the other thread's item; or null if interrupted; or\n     * TIMED_OUT if timed and timed out\n     ",
    "links" : [ ]
  }, {
    "name" : "private final Object slotExchange(Object item, boolean timed, long ns)",
    "returnType" : "Object",
    "comment" : "\n     * Exchange function used until arenas enabled. See above for explanation.\n     *\n     * @param item the item to exchange\n     * @param timed true if the wait is timed\n     * @param ns if timed, the maximum wait time, else 0L\n     * @return the other thread's item; or null if either the arena\n     * was enabled or the thread was interrupted before completion; or\n     * TIMED_OUT if timed and timed out\n     ",
    "links" : [ ]
  }, {
    "name" : "public V exchange(V x) throws InterruptedException",
    "returnType" : "V",
    "comment" : "\n     * Waits for another thread to arrive at this exchange point (unless\n     * the current thread is {@linkplain Thread#interrupt interrupted}),\n     * and then transfers the given object to it, receiving its object\n     * in return.\n     *\n     * <p>If another thread is already waiting at the exchange point then\n     * it is resumed for thread scheduling purposes and receives the object\n     * passed in by the current thread.  The current thread returns immediately,\n     * receiving the object passed to the exchange by that other thread.\n     *\n     * <p>If no other thread is already waiting at the exchange then the\n     * current thread is disabled for thread scheduling purposes and lies\n     * dormant until one of two things happens:\n     * <ul>\n     * <li>Some other thread enters the exchange; or\n     * <li>Some other thread {@linkplain Thread#interrupt interrupts}\n     * the current thread.\n     * </ul>\n     * <p>If the current thread:\n     * <ul>\n     * <li>has its interrupted status set on entry to this method; or\n     * <li>is {@linkplain Thread#interrupt interrupted} while waiting\n     * for the exchange,\n     * </ul>\n     * then {@link InterruptedException} is thrown and the current thread's\n     * interrupted status is cleared.\n     *\n     * @param x the object to exchange\n     * @return the object provided by the other thread\n     * @throws InterruptedException if the current thread was\n     *         interrupted while waiting\n     ",
    "links" : [ "InterruptedException" ]
  }, {
    "name" : "public V exchange(V x, long timeout, TimeUnit unit) throws InterruptedException, TimeoutException",
    "returnType" : "V",
    "comment" : "\n     * Waits for another thread to arrive at this exchange point (unless\n     * the current thread is {@linkplain Thread#interrupt interrupted} or\n     * the specified waiting time elapses), and then transfers the given\n     * object to it, receiving its object in return.\n     *\n     * <p>If another thread is already waiting at the exchange point then\n     * it is resumed for thread scheduling purposes and receives the object\n     * passed in by the current thread.  The current thread returns immediately,\n     * receiving the object passed to the exchange by that other thread.\n     *\n     * <p>If no other thread is already waiting at the exchange then the\n     * current thread is disabled for thread scheduling purposes and lies\n     * dormant until one of three things happens:\n     * <ul>\n     * <li>Some other thread enters the exchange; or\n     * <li>Some other thread {@linkplain Thread#interrupt interrupts}\n     * the current thread; or\n     * <li>The specified waiting time elapses.\n     * </ul>\n     * <p>If the current thread:\n     * <ul>\n     * <li>has its interrupted status set on entry to this method; or\n     * <li>is {@linkplain Thread#interrupt interrupted} while waiting\n     * for the exchange,\n     * </ul>\n     * then {@link InterruptedException} is thrown and the current thread's\n     * interrupted status is cleared.\n     *\n     * <p>If the specified waiting time elapses then {@link\n     * TimeoutException} is thrown.  If the time is less than or equal\n     * to zero, the method will not wait at all.\n     *\n     * @param x the object to exchange\n     * @param timeout the maximum time to wait\n     * @param unit the time unit of the {@code timeout} argument\n     * @return the object provided by the other thread\n     * @throws InterruptedException if the current thread was\n     *         interrupted while waiting\n     * @throws TimeoutException if the specified waiting time elapses\n     *         before another thread enters the exchange\n     ",
    "links" : [ "java.util.concurrent.TimeoutException", "InterruptedException" ]
  } ],
  "methodNames" : [ "private final Object arenaExchange(Object item, boolean timed, long ns)", "private final Object slotExchange(Object item, boolean timed, long ns)", "public V exchange(V x) throws InterruptedException", "public V exchange(V x, long timeout, TimeUnit unit) throws InterruptedException, TimeoutException" ],
  "variableNames" : [ "ASHIFT", "MMASK", "SEQ", "NCPU", "FULL", "SPINS", "NULL_ITEM", "TIMED_OUT", "participant", "arena", "slot", "bound", "BOUND", "SLOT", "MATCH", "AA" ]
}