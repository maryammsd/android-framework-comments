{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/content/pm/verify/domain/DomainVerificationUserState.java",
  "packageName" : "android.content.pm.verify.domain",
  "className" : "DomainVerificationUserState",
  "comment" : "\n * Contains the user selection state for a package. This means all web HTTP(S) domains declared by a\n * package in its manifest, whether or not they were marked for auto verification.\n * <p>\n * Applications should use {@link #getHostToStateMap()} if necessary to\n * check if/how they are verified for a domain, which is required starting from platform\n * {@link android.os.Build.VERSION_CODES#S} in order to open {@link Intent}s which declare\n * {@link Intent#CATEGORY_BROWSABLE} or no category and also match against\n * {@link Intent#CATEGORY_DEFAULT} {@link android.content.IntentFilter}s, either through an\n * explicit declaration of {@link Intent#CATEGORY_DEFAULT} or through the use of\n * {@link android.content.pm.PackageManager#MATCH_DEFAULT_ONLY}, which is usually added for the\n * caller when using {@link Context#startActivity(Intent)} and similar.\n * <p>\n * By default, all apps are allowed to automatically open links for the above case for domains that\n * they've successfully verified against. This is reflected by {@link #isLinkHandlingAllowed()}.\n * The user can decide to disable this, disallowing the application from opening all links. Note\n * that the toggle affects <b>all</b> links and is not based on the verification state of the\n * domains.\n * <p>\n * Assuming the toggle is enabled, the user can also select additional unverified domains to grant\n * to the application to open, which is reflected in {@link #getHostToStateMap()}. But only a single\n * application can be approved for a domain unless the applications are both approved. If another\n * application is approved, the user will not be allowed to enable the domain.\n ",
  "links" : [ "android.os.Build.VERSION_CODES#S", "android.content.Intent#CATEGORY_BROWSABLE", "#isLinkHandlingAllowed()", "android.content.pm.PackageManager#MATCH_DEFAULT_ONLY", "android.content.IntentFilter", "android.content.Intent", "android.content.Context#startActivity(Intent)", "#getHostToStateMap()", "android.content.Intent#CATEGORY_DEFAULT" ],
  "variables" : [ {
    "name" : "DOMAIN_STATE_NONE",
    "type" : "int",
    "comment" : "\n     * The domain is unverified and unselected, and the application is unable to open web links\n     * that resolve to the domain.\n     ",
    "links" : [ ]
  }, {
    "name" : "DOMAIN_STATE_SELECTED",
    "type" : "int",
    "comment" : "\n     * The domain has been selected by the user. This may be reset to {@link #DOMAIN_STATE_NONE} if\n     * another application is selected or verified for the same domain.\n     ",
    "links" : [ "#DOMAIN_STATE_NONE" ]
  }, {
    "name" : "DOMAIN_STATE_VERIFIED",
    "type" : "int",
    "comment" : "\n     * The domain has been previously verified by the domain verification agent.\n     ",
    "links" : [ ]
  }, {
    "name" : "mIdentifier",
    "type" : "UUID",
    "comment" : "\n     * @see DomainVerificationInfo#getIdentifier\n     ",
    "links" : [ ]
  }, {
    "name" : "mPackageName",
    "type" : "String",
    "comment" : "\n     * The package name that this data corresponds to.\n     ",
    "links" : [ ]
  }, {
    "name" : "mUser",
    "type" : "UserHandle",
    "comment" : "\n     * The user that this data corresponds to.\n     ",
    "links" : [ ]
  }, {
    "name" : "mLinkHandlingAllowed",
    "type" : "boolean",
    "comment" : "\n     * Whether or not this package is allowed to open links.\n     ",
    "links" : [ ]
  }, {
    "name" : "mHostToStateMap",
    "type" : "Map<String, Integer>",
    "comment" : "\n     * Mapping of domain host to state, as defined by {@link DomainState}.\n     ",
    "links" : [ "DomainState" ]
  }, {
    "name" : "sParcellingForIdentifier",
    "type" : "Parcelling<UUID>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<DomainVerificationUserState>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void parcelHostToStateMap(Parcel dest, @SuppressWarnings(\"unused\") int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Map<String, Integer> unparcelHostToStateMap(Parcel in)",
    "returnType" : "Map<String, Integer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public UUID getIdentifier()",
    "returnType" : "UUID",
    "comment" : "\n     * @see DomainVerificationInfo#getIdentifier\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String domainStateToString(@DomainState int value)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public String getPackageName()",
    "returnType" : "String",
    "comment" : "\n     * The package name that this data corresponds to.\n     ",
    "links" : [ ]
  }, {
    "name" : "public UserHandle getUser()",
    "returnType" : "UserHandle",
    "comment" : "\n     * The user that this data corresponds to.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isLinkHandlingAllowed()",
    "returnType" : "boolean",
    "comment" : "\n     * Whether or not this package is allowed to open links.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Map<String, Integer> getHostToStateMap()",
    "returnType" : "Map<String, Integer>",
    "comment" : "\n     * Mapping of domain host to state, as defined by the {@code DOMAIN_STATE_*} constants\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(@Nullable Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void __metadata()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void parcelHostToStateMap(Parcel dest, @SuppressWarnings(\"unused\") int flags)", "private Map<String, Integer> unparcelHostToStateMap(Parcel in)", "public UUID getIdentifier()", "public static String domainStateToString(@DomainState int value)", "public String getPackageName()", "public UserHandle getUser()", "public boolean isLinkHandlingAllowed()", "public Map<String, Integer> getHostToStateMap()", "public String toString()", "public boolean equals(@Nullable Object o)", "public int hashCode()", "public void writeToParcel(@NonNull Parcel dest, int flags)", "public int describeContents()", "private void __metadata()" ],
  "variableNames" : [ "DOMAIN_STATE_NONE", "DOMAIN_STATE_SELECTED", "DOMAIN_STATE_VERIFIED", "mIdentifier", "mPackageName", "mUser", "mLinkHandlingAllowed", "mHostToStateMap", "sParcellingForIdentifier", "CREATOR" ]
}