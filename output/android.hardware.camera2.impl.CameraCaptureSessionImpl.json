{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/hardware/camera2/impl/CameraCaptureSessionImpl.java",
  "packageName" : "android.hardware.camera2.impl",
  "className" : "CameraCaptureSessionImpl",
  "comment" : "",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mId",
    "type" : "int",
    "comment" : " Simple integer ID for session for debugging ",
    "links" : [ ]
  }, {
    "name" : "mIdString",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInput",
    "type" : "Surface",
    "comment" : " Input surface configured by native camera framework based on user-specified configuration ",
    "links" : [ ]
  }, {
    "name" : "mStateCallback",
    "type" : "CameraCaptureSession.StateCallback",
    "comment" : "\n     * User-specified state callback, used for outgoing events; calls to this object will be\n     * automatically invoked via {@code mStateExecutor}.\n     ",
    "links" : [ ]
  }, {
    "name" : "mStateExecutor",
    "type" : "Executor",
    "comment" : " User-specified state executor used for outgoing state callback events ",
    "links" : [ ]
  }, {
    "name" : "mDeviceImpl",
    "type" : "android.hardware.camera2.impl.CameraDeviceImpl",
    "comment" : " Internal camera device; used to translate calls into existing deprecated API ",
    "links" : [ ]
  }, {
    "name" : "mDeviceExecutor",
    "type" : "Executor",
    "comment" : " Internal executor; used for all incoming events to preserve total order ",
    "links" : [ ]
  }, {
    "name" : "mSequenceDrainer",
    "type" : "TaskDrainer<Integer>",
    "comment" : " Drain Sequence IDs which have been queued but not yet finished with aborted/completed ",
    "links" : [ ]
  }, {
    "name" : "mIdleDrainer",
    "type" : "TaskSingleDrainer",
    "comment" : " Drain state transitions from ACTIVE -> IDLE ",
    "links" : [ ]
  }, {
    "name" : "mAbortDrainer",
    "type" : "TaskSingleDrainer",
    "comment" : " Drain state transitions from BUSY -> IDLE ",
    "links" : [ ]
  }, {
    "name" : "mClosed",
    "type" : "boolean",
    "comment" : " This session is closed; all further calls will throw ISE ",
    "links" : [ ]
  }, {
    "name" : "mConfigureSuccess",
    "type" : "boolean",
    "comment" : " This session failed to be configured successfully ",
    "links" : [ ]
  }, {
    "name" : "mSkipUnconfigure",
    "type" : "boolean",
    "comment" : " Do not unconfigure if this is set; another session will overwrite configuration ",
    "links" : [ ]
  }, {
    "name" : "mAborting",
    "type" : "boolean",
    "comment" : " Is the session in the process of aborting? Pay attention to BUSY->IDLE transitions. ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public CameraDevice getDevice()",
    "returnType" : "CameraDevice",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void prepare(Surface surface) throws CameraAccessException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void prepare(int maxCount, Surface surface) throws CameraAccessException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void tearDown(Surface surface) throws CameraAccessException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void finalizeOutputConfigurations(List<OutputConfiguration> outputConfigs) throws CameraAccessException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int capture(CaptureRequest request, CaptureCallback callback, Handler handler) throws CameraAccessException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int captureSingleRequest(CaptureRequest request, Executor executor, CaptureCallback callback) throws CameraAccessException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void checkCaptureRequest(CaptureRequest request)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int captureBurst(List<CaptureRequest> requests, CaptureCallback callback, Handler handler) throws CameraAccessException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int captureBurstRequests(List<CaptureRequest> requests, Executor executor, CaptureCallback callback) throws CameraAccessException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void checkCaptureRequests(List<CaptureRequest> requests)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int setRepeatingRequest(CaptureRequest request, CaptureCallback callback, Handler handler) throws CameraAccessException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int setSingleRepeatingRequest(CaptureRequest request, Executor executor, CaptureCallback callback) throws CameraAccessException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void checkRepeatingRequest(CaptureRequest request)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int setRepeatingBurst(List<CaptureRequest> requests, CaptureCallback callback, Handler handler) throws CameraAccessException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int setRepeatingBurstRequests(List<CaptureRequest> requests, Executor executor, CaptureCallback callback) throws CameraAccessException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void checkRepeatingRequests(List<CaptureRequest> requests)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void stopRepeating() throws CameraAccessException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void abortCaptures() throws CameraAccessException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void updateOutputConfiguration(OutputConfiguration config) throws CameraAccessException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CameraOfflineSession switchToOffline(Collection<Surface> offlineOutputs, Executor executor, CameraOfflineSessionCallback listener) throws CameraAccessException",
    "returnType" : "CameraOfflineSession",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean supportsOfflineProcessing(Surface surface)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isReprocessable()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Surface getInputSurface()",
    "returnType" : "Surface",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void replaceSessionClose()",
    "returnType" : "void",
    "comment" : "\n     * Replace this session with another session.\n     *\n     * <p>This is an optimization to avoid unconfiguring and then immediately having to\n     * reconfigure again.</p>\n     *\n     * <p>The semantics are identical to {@link #close}, except that unconfiguring will be skipped.\n     * <p>\n     *\n     * <p>After this call completes, the session will not call any further methods on the camera\n     * device.</p>\n     *\n     * @see CameraCaptureSession#close\n     ",
    "links" : [ "#close" ]
  }, {
    "name" : "public void closeWithoutDraining()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isAborting()",
    "returnType" : "boolean",
    "comment" : "\n     * Whether currently in mid-abort.\n     *\n     * <p>This is used by the implementation to set the capture failure\n     * reason, in lieu of more accurate error codes from the camera service.\n     * Unsynchronized to avoid deadlocks between simultaneous session->device,\n     * device->session calls.</p>\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "private StateCallback createUserStateCallbackProxy(Executor executor, StateCallback callback)",
    "returnType" : "StateCallback",
    "comment" : "\n     * Post calls into a CameraCaptureSession.StateCallback to the user-specified {@code executor}.\n     ",
    "links" : [ ]
  }, {
    "name" : "private android.hardware.camera2.impl.CaptureCallback createCaptureCallbackProxy(Handler handler, CaptureCallback callback)",
    "returnType" : "android.hardware.camera2.impl.CaptureCallback",
    "comment" : "\n     * Forward callbacks that usually originate from\n     * CameraDeviceImpl.CameraDeviceCallbacks to the CameraCaptureSession.CaptureCallback.\n     *\n     * <p>When a capture sequence finishes, update the pending checked sequences set.</p>\n     ",
    "links" : [ ]
  }, {
    "name" : "private android.hardware.camera2.impl.CaptureCallback createCaptureCallbackProxyWithExecutor(Executor executor, CaptureCallback callback)",
    "returnType" : "android.hardware.camera2.impl.CaptureCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CameraDeviceImpl.StateCallbackKK getDeviceStateCallback()",
    "returnType" : "CameraDeviceImpl.StateCallbackKK",
    "comment" : "\n     *\n     * Create an internal state callback, to be invoked on the mDeviceExecutor\n     *\n     * <p>It has a few behaviors:\n     * <ul>\n     * <li>Convert device state changes into session state changes.\n     * <li>Keep track of async tasks that the session began (idle, abort).\n     * </ul>\n     * </p>\n     * ",
    "links" : [ ]
  }, {
    "name" : "protected void finalize() throws Throwable",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void checkNotClosed()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int addPendingSequence(int sequenceId)",
    "returnType" : "int",
    "comment" : "\n     * Notify the session that a pending capture sequence has just been queued.\n     *\n     * <p>During a shutdown/close, the session waits until all pending sessions are finished\n     * before taking any further steps to shut down itself.</p>\n     *\n     * @see #finishPendingSequence\n     ",
    "links" : [ ]
  }, {
    "name" : "private void finishPendingSequence(int sequenceId)",
    "returnType" : "void",
    "comment" : "\n     * Notify the session that a pending capture sequence is now finished.\n     *\n     * <p>During a shutdown/close, once all pending sequences finish, it is safe to\n     * close the camera further by unconfiguring and then firing {@code onClosed}.</p>\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "DEBUG", "mId", "mIdString", "mInput", "mStateCallback", "mStateExecutor", "mDeviceImpl", "mDeviceExecutor", "mSequenceDrainer", "mIdleDrainer", "mAbortDrainer", "mClosed", "mConfigureSuccess", "mSkipUnconfigure", "mAborting" ],
  "methodNames" : [ "public CameraDevice getDevice()", "public void prepare(Surface surface) throws CameraAccessException", "public void prepare(int maxCount, Surface surface) throws CameraAccessException", "public void tearDown(Surface surface) throws CameraAccessException", "public void finalizeOutputConfigurations(List<OutputConfiguration> outputConfigs) throws CameraAccessException", "public int capture(CaptureRequest request, CaptureCallback callback, Handler handler) throws CameraAccessException", "public int captureSingleRequest(CaptureRequest request, Executor executor, CaptureCallback callback) throws CameraAccessException", "private void checkCaptureRequest(CaptureRequest request)", "public int captureBurst(List<CaptureRequest> requests, CaptureCallback callback, Handler handler) throws CameraAccessException", "public int captureBurstRequests(List<CaptureRequest> requests, Executor executor, CaptureCallback callback) throws CameraAccessException", "private void checkCaptureRequests(List<CaptureRequest> requests)", "public int setRepeatingRequest(CaptureRequest request, CaptureCallback callback, Handler handler) throws CameraAccessException", "public int setSingleRepeatingRequest(CaptureRequest request, Executor executor, CaptureCallback callback) throws CameraAccessException", "private void checkRepeatingRequest(CaptureRequest request)", "public int setRepeatingBurst(List<CaptureRequest> requests, CaptureCallback callback, Handler handler) throws CameraAccessException", "public int setRepeatingBurstRequests(List<CaptureRequest> requests, Executor executor, CaptureCallback callback) throws CameraAccessException", "private void checkRepeatingRequests(List<CaptureRequest> requests)", "public void stopRepeating() throws CameraAccessException", "public void abortCaptures() throws CameraAccessException", "public void updateOutputConfiguration(OutputConfiguration config) throws CameraAccessException", "public CameraOfflineSession switchToOffline(Collection<Surface> offlineOutputs, Executor executor, CameraOfflineSessionCallback listener) throws CameraAccessException", "public boolean supportsOfflineProcessing(Surface surface)", "public boolean isReprocessable()", "public Surface getInputSurface()", "public void replaceSessionClose()", "public void closeWithoutDraining()", "public void close()", "public boolean isAborting()", "private StateCallback createUserStateCallbackProxy(Executor executor, StateCallback callback)", "private android.hardware.camera2.impl.CaptureCallback createCaptureCallbackProxy(Handler handler, CaptureCallback callback)", "private android.hardware.camera2.impl.CaptureCallback createCaptureCallbackProxyWithExecutor(Executor executor, CaptureCallback callback)", "public CameraDeviceImpl.StateCallbackKK getDeviceStateCallback()", "protected void finalize() throws Throwable", "private void checkNotClosed()", "private int addPendingSequence(int sequenceId)", "private void finishPendingSequence(int sequenceId)" ]
}