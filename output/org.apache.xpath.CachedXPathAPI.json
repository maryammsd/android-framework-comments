{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xpath/CachedXPathAPI.java",
  "packageName" : "org.apache.xpath",
  "className" : "CachedXPathAPI",
  "comment" : "\n * The methods in this class are convenience methods into the\n * low-level XPath API.\n *\n * These functions tend to be a little slow, since a number of objects must be\n * created for each evaluation.  A faster way is to precompile the\n * XPaths using the low-level API, and then just use the XPaths\n * over and over.\n *\n * This is an alternative for the old XPathAPI class, which provided\n * static methods for the purpose but had the drawback of\n * instantiating a new XPathContext (and thus building a new DTMManager,\n * and new DTMs) each time it was called. XPathAPIObject instead retains\n * its context as long as the object persists, reusing the DTMs. This\n * does have a downside: if you've changed your source document, you should\n * obtain a new XPathAPIObject to continue searching it, since trying to use\n * the old DTMs will probably yield bad results or malfunction outright... and\n * the cached DTMs may consume memory until this object and its context are\n * returned to the heap. Essentially, it's the caller's responsibility to\n * decide when to discard the cache.\n *\n * @see <a href=\"http://www.w3.org/TR/xpath\">XPath Specification</a>\n * ",
  "links" : [ ],
  "variables" : [ {
    "name" : "xpathSupport",
    "type" : "XPathContext",
    "comment" : " XPathContext, and thus the document model system (DTMs), persists through multiple\n      calls to this object. This is set in the constructor.\n  ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public XPathContext getXPathContext()",
    "returnType" : "XPathContext",
    "comment" : " Returns the XPathSupport object used in this CachedXPathAPI\n   *\n   * %REVIEW% I'm somewhat concerned about the loss of encapsulation\n   * this causes, but the xml-security folks say they need it.\n   * ",
    "links" : [ ]
  }, {
    "name" : "public Node selectSingleNode(Node contextNode, String str) throws TransformerException",
    "returnType" : "Node",
    "comment" : "\n   * Use an XPath string to select a single node. XPath namespace\n   * prefixes are resolved from the context node, which may not\n   * be what you want (see the next method).\n   *\n   * @param contextNode The node to start searching from.\n   * @param str A valid XPath string.\n   * @return The first node found that matches the XPath, or null.\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public Node selectSingleNode(Node contextNode, String str, Node namespaceNode) throws TransformerException",
    "returnType" : "Node",
    "comment" : "\n   * Use an XPath string to select a single node.\n   * XPath namespace prefixes are resolved from the namespaceNode.\n   *\n   * @param contextNode The node to start searching from.\n   * @param str A valid XPath string.\n   * @param namespaceNode The node from which prefixes in the XPath will be resolved to namespaces.\n   * @return The first node found that matches the XPath, or null.\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public NodeIterator selectNodeIterator(Node contextNode, String str) throws TransformerException",
    "returnType" : "NodeIterator",
    "comment" : "\n   *  Use an XPath string to select a nodelist.\n   *  XPath namespace prefixes are resolved from the contextNode.\n   *\n   *  @param contextNode The node to start searching from.\n   *  @param str A valid XPath string.\n   *  @return A NodeIterator, should never be null.\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public NodeIterator selectNodeIterator(Node contextNode, String str, Node namespaceNode) throws TransformerException",
    "returnType" : "NodeIterator",
    "comment" : "\n   *  Use an XPath string to select a nodelist.\n   *  XPath namespace prefixes are resolved from the namespaceNode.\n   *\n   *  @param contextNode The node to start searching from.\n   *  @param str A valid XPath string.\n   *  @param namespaceNode The node from which prefixes in the XPath will be resolved to namespaces.\n   *  @return A NodeIterator, should never be null.\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public NodeList selectNodeList(Node contextNode, String str) throws TransformerException",
    "returnType" : "NodeList",
    "comment" : "\n   *  Use an XPath string to select a nodelist.\n   *  XPath namespace prefixes are resolved from the contextNode.\n   *\n   *  @param contextNode The node to start searching from.\n   *  @param str A valid XPath string.\n   *  @return A NodeIterator, should never be null.\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public NodeList selectNodeList(Node contextNode, String str, Node namespaceNode) throws TransformerException",
    "returnType" : "NodeList",
    "comment" : "\n   *  Use an XPath string to select a nodelist.\n   *  XPath namespace prefixes are resolved from the namespaceNode.\n   *\n   *  @param contextNode The node to start searching from.\n   *  @param str A valid XPath string.\n   *  @param namespaceNode The node from which prefixes in the XPath will be resolved to namespaces.\n   *  @return A NodeIterator, should never be null.\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public XObject eval(Node contextNode, String str) throws TransformerException",
    "returnType" : "XObject",
    "comment" : "\n   *  Evaluate XPath string to an XObject.  Using this method,\n   *  XPath namespace prefixes will be resolved from the namespaceNode.\n   *  @param contextNode The node to start searching from.\n   *  @param str A valid XPath string.\n   *  @return An XObject, which can be used to obtain a string, number, nodelist, etc, should never be null.\n   *  @see org.apache.xpath.objects.XObject\n   *  @see org.apache.xpath.objects.XNull\n   *  @see org.apache.xpath.objects.XBoolean\n   *  @see org.apache.xpath.objects.XNumber\n   *  @see org.apache.xpath.objects.XString\n   *  @see org.apache.xpath.objects.XRTreeFrag\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public XObject eval(Node contextNode, String str, Node namespaceNode) throws TransformerException",
    "returnType" : "XObject",
    "comment" : "\n   *  Evaluate XPath string to an XObject. \n   *  XPath namespace prefixes are resolved from the namespaceNode.\n   *  The implementation of this is a little slow, since it creates\n   *  a number of objects each time it is called.  This could be optimized\n   *  to keep the same objects around, but then thread-safety issues would arise.\n   *\n   *  @param contextNode The node to start searching from.\n   *  @param str A valid XPath string.\n   *  @param namespaceNode The node from which prefixes in the XPath will be resolved to namespaces.\n   *  @return An XObject, which can be used to obtain a string, number, nodelist, etc, should never be null.\n   *  @see org.apache.xpath.objects.XObject\n   *  @see org.apache.xpath.objects.XNull\n   *  @see org.apache.xpath.objects.XBoolean\n   *  @see org.apache.xpath.objects.XNumber\n   *  @see org.apache.xpath.objects.XString\n   *  @see org.apache.xpath.objects.XRTreeFrag\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public XObject eval(Node contextNode, String str, PrefixResolver prefixResolver) throws TransformerException",
    "returnType" : "XObject",
    "comment" : "\n   *   Evaluate XPath string to an XObject.\n   *   XPath namespace prefixes are resolved from the namespaceNode.\n   *   The implementation of this is a little slow, since it creates\n   *   a number of objects each time it is called.  This could be optimized\n   *   to keep the same objects around, but then thread-safety issues would arise.\n   *\n   *   @param contextNode The node to start searching from.\n   *   @param str A valid XPath string.\n   *   @param prefixResolver Will be called if the parser encounters namespace\n   *                         prefixes, to resolve the prefixes to URLs.\n   *   @return An XObject, which can be used to obtain a string, number, nodelist, etc, should never be null.\n   *   @see org.apache.xpath.objects.XObject\n   *   @see org.apache.xpath.objects.XNull\n   *   @see org.apache.xpath.objects.XBoolean\n   *   @see org.apache.xpath.objects.XNumber\n   *   @see org.apache.xpath.objects.XString\n   *   @see org.apache.xpath.objects.XRTreeFrag\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public XPathContext getXPathContext()", "public Node selectSingleNode(Node contextNode, String str) throws TransformerException", "public Node selectSingleNode(Node contextNode, String str, Node namespaceNode) throws TransformerException", "public NodeIterator selectNodeIterator(Node contextNode, String str) throws TransformerException", "public NodeIterator selectNodeIterator(Node contextNode, String str, Node namespaceNode) throws TransformerException", "public NodeList selectNodeList(Node contextNode, String str) throws TransformerException", "public NodeList selectNodeList(Node contextNode, String str, Node namespaceNode) throws TransformerException", "public XObject eval(Node contextNode, String str) throws TransformerException", "public XObject eval(Node contextNode, String str, Node namespaceNode) throws TransformerException", "public XObject eval(Node contextNode, String str, PrefixResolver prefixResolver) throws TransformerException" ],
  "variableNames" : [ "xpathSupport" ]
}