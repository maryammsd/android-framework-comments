{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/number/RoundingUtils.java",
  "packageName" : "android.icu.impl.number",
  "className" : "RoundingUtils",
  "comment" : " @author sffc \n * @hide Only a subset of ICU is exposed in Android",
  "links" : [ ],
  "variables" : [ {
    "name" : "SECTION_LOWER",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SECTION_MIDPOINT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SECTION_UPPER",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_ROUNDING_MODE",
    "type" : "RoundingMode",
    "comment" : "\n     * The default rounding mode.\n     ",
    "links" : [ ]
  }, {
    "name" : "MAX_INT_FRAC_SIG",
    "type" : "int",
    "comment" : "\n     * The maximum number of fraction places, integer numerals, or significant digits. TODO: This does\n     * not feel like the best home for this value.\n     ",
    "links" : [ ]
  }, {
    "name" : "MATH_CONTEXT_BY_ROUNDING_MODE_UNLIMITED",
    "type" : "MathContext[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MATH_CONTEXT_BY_ROUNDING_MODE_34_DIGITS",
    "type" : "MathContext[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_MATH_CONTEXT_UNLIMITED",
    "type" : "MathContext",
    "comment" : " The default MathContext, unlimited-precision version. ",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_MATH_CONTEXT_34_DIGITS",
    "type" : "MathContext",
    "comment" : " The default MathContext, 34-digit version. ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static boolean getRoundingDirection(boolean isEven, boolean isNegative, int section, int roundingMode, Object reference)",
    "returnType" : "boolean",
    "comment" : "\n     * Converts a rounding mode and metadata about the quantity being rounded to a boolean determining\n     * whether the value should be rounded toward infinity or toward zero.\n     *\n     * <p>\n     * The parameters are of type int because benchmarks on an x86-64 processor against OpenJDK showed\n     * that ints were demonstrably faster than enums in switch statements.\n     *\n     * @param isEven\n     *            Whether the digit immediately before the rounding magnitude is even.\n     * @param isNegative\n     *            Whether the quantity is negative.\n     * @param section\n     *            Whether the part of the quantity to the right of the rounding magnitude is exactly\n     *            halfway between two digits, whether it is in the lower part (closer to zero), or\n     *            whether it is in the upper part (closer to infinity). See {@link #SECTION_LOWER},\n     *            {@link #SECTION_MIDPOINT}, and {@link #SECTION_UPPER}.\n     * @param roundingMode\n     *            The integer version of the {@link RoundingMode}, which you can get via\n     *            {@link RoundingMode#ordinal}.\n     * @param reference\n     *            A reference object to be used when throwing an ArithmeticException.\n     * @return true if the number should be rounded toward zero; false if it should be rounded toward\n     *         infinity.\n     ",
    "links" : [ "#SECTION_UPPER", "#SECTION_LOWER", "java.math.RoundingMode#ordinal", "#SECTION_MIDPOINT", "java.math.RoundingMode" ]
  }, {
    "name" : "public static boolean roundsAtMidpoint(int roundingMode)",
    "returnType" : "boolean",
    "comment" : "\n     * Gets whether the given rounding mode's rounding boundary is at the midpoint. The rounding boundary\n     * is the point at which a number switches from being rounded down to being rounded up. For example,\n     * with rounding mode HALF_EVEN, HALF_UP, or HALF_DOWN, the rounding boundary is at the midpoint, and\n     * this function would return true. However, for UP, DOWN, CEILING, and FLOOR, the rounding boundary\n     * is at the \"edge\", and this function would return false.\n     *\n     * @param roundingMode\n     *            The integer version of the {@link RoundingMode}.\n     * @return true if rounding mode is HALF_EVEN, HALF_UP, or HALF_DOWN; false otherwise.\n     ",
    "links" : [ "java.math.RoundingMode" ]
  }, {
    "name" : "public static MathContext getMathContextOrUnlimited(DecimalFormatProperties properties)",
    "returnType" : "MathContext",
    "comment" : "\n     * Gets the user-specified math context out of the property bag. If there is none, falls back to a\n     * math context with unlimited precision and the user-specified rounding mode, which defaults to\n     * HALF_EVEN (the IEEE 754R default).\n     *\n     * @param properties\n     *            The property bag.\n     * @return A {@link MathContext}. Never null.\n     ",
    "links" : [ "java.math.MathContext" ]
  }, {
    "name" : "public static MathContext getMathContextOr34Digits(DecimalFormatProperties properties)",
    "returnType" : "MathContext",
    "comment" : "\n     * Gets the user-specified math context out of the property bag. If there is none, falls back to a\n     * math context with 34 digits of precision (the 128-bit IEEE 754R default) and the user-specified\n     * rounding mode, which defaults to HALF_EVEN (the IEEE 754R default).\n     *\n     * @param properties\n     *            The property bag.\n     * @return A {@link MathContext}. Never null.\n     ",
    "links" : [ "java.math.MathContext" ]
  }, {
    "name" : "public static MathContext mathContextUnlimited(RoundingMode roundingMode)",
    "returnType" : "MathContext",
    "comment" : "\n     * Gets a MathContext with unlimited precision and the specified RoundingMode. Equivalent to \"new\n     * MathContext(0, roundingMode)\", but pulls from a singleton to prevent object thrashing.\n     *\n     * @param roundingMode\n     *            The {@link RoundingMode} to use.\n     * @return The corresponding {@link MathContext}.\n     ",
    "links" : [ "java.math.MathContext", "java.math.RoundingMode" ]
  }, {
    "name" : "public static Scale scaleFromProperties(DecimalFormatProperties properties)",
    "returnType" : "Scale",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static StandardPlural getPluralSafe(Precision rounder, PluralRules rules, DecimalQuantity dq)",
    "returnType" : "StandardPlural",
    "comment" : "\n     * Computes the plural form after copying the number and applying rounding rules.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static boolean getRoundingDirection(boolean isEven, boolean isNegative, int section, int roundingMode, Object reference)", "public static boolean roundsAtMidpoint(int roundingMode)", "public static MathContext getMathContextOrUnlimited(DecimalFormatProperties properties)", "public static MathContext getMathContextOr34Digits(DecimalFormatProperties properties)", "public static MathContext mathContextUnlimited(RoundingMode roundingMode)", "public static Scale scaleFromProperties(DecimalFormatProperties properties)", "public static StandardPlural getPluralSafe(Precision rounder, PluralRules rules, DecimalQuantity dq)" ],
  "variableNames" : [ "SECTION_LOWER", "SECTION_MIDPOINT", "SECTION_UPPER", "DEFAULT_ROUNDING_MODE", "MAX_INT_FRAC_SIG", "MATH_CONTEXT_BY_ROUNDING_MODE_UNLIMITED", "MATH_CONTEXT_BY_ROUNDING_MODE_34_DIGITS", "DEFAULT_MATH_CONTEXT_UNLIMITED", "DEFAULT_MATH_CONTEXT_34_DIGITS" ]
}