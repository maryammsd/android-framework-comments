{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/security/keystore2/KeyStore2ParameterUtils.java",
  "packageName" : "android.security.keystore2",
  "className" : "KeyStore2ParameterUtils",
  "comment" : "\n * @hide\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " static KeyParameter makeBool(int tag)",
    "returnType" : "KeyParameter",
    "comment" : "\n     * This function constructs a {@link KeyParameter} expressing a boolean value.\n     * @param tag Must be KeyMint tag with the associated type BOOL.\n     * @return An instance of {@link KeyParameter}.\n     * @hide\n     ",
    "links" : [ "android.hardware.security.keymint.KeyParameter" ]
  }, {
    "name" : " static KeyParameter makeEnum(int tag, int v)",
    "returnType" : "KeyParameter",
    "comment" : "\n     * This function constructs a {@link KeyParameter} expressing an enum value.\n     * @param tag Must be KeyMint tag with the associated type ENUM or ENUM_REP.\n     * @param v A 32bit integer.\n     * @return An instance of {@link KeyParameter}.\n     * @hide\n     ",
    "links" : [ "android.hardware.security.keymint.KeyParameter" ]
  }, {
    "name" : " static KeyParameter makeInt(int tag, int v)",
    "returnType" : "KeyParameter",
    "comment" : "\n     * This function constructs a {@link KeyParameter} expressing an integer value.\n     * @param tag Must be KeyMint tag with the associated type UINT or UINT_REP.\n     * @param v A 32bit integer.\n     * @return An instance of {@link KeyParameter}.\n     * @hide\n     ",
    "links" : [ "android.hardware.security.keymint.KeyParameter" ]
  }, {
    "name" : " static KeyParameter makeLong(int tag, long v)",
    "returnType" : "KeyParameter",
    "comment" : "\n     * This function constructs a {@link KeyParameter} expressing a long integer value.\n     * @param tag Must be KeyMint tag with the associated type ULONG or ULONG_REP.\n     * @param v A 64bit integer.\n     * @return An instance of {@link KeyParameter}.\n     * @hide\n     ",
    "links" : [ "android.hardware.security.keymint.KeyParameter" ]
  }, {
    "name" : " static KeyParameter makeBytes(int tag, @NonNull byte[] b)",
    "returnType" : "KeyParameter",
    "comment" : "\n     * This function constructs a {@link KeyParameter} expressing a blob.\n     * @param tag Must be KeyMint tag with the associated type BYTES.\n     * @param b A byte array to be stored in the new key parameter.\n     * @return An instance of {@link KeyParameter}.\n     * @hide\n     ",
    "links" : [ "android.hardware.security.keymint.KeyParameter" ]
  }, {
    "name" : " static KeyParameter makeBignum(int tag, @NonNull BigInteger b)",
    "returnType" : "KeyParameter",
    "comment" : "\n     * This function constructs a {@link KeyParameter} expressing a Bignum.\n     * @param tag Must be KeyMint tag with the associated type BIGNUM.\n     * @param b A BitInteger to be stored in the new key parameter.\n     * @return An instance of {@link KeyParameter}.\n     * @hide\n     ",
    "links" : [ "android.hardware.security.keymint.KeyParameter" ]
  }, {
    "name" : " static KeyParameter makeDate(int tag, @NonNull Date date)",
    "returnType" : "KeyParameter",
    "comment" : "\n     * This function constructs a {@link KeyParameter} expressing date.\n     * @param tag Must be KeyMint tag with the associated type DATE.\n     * @param date A date\n     * @return An instance of {@link KeyParameter}.\n     * @hide\n     ",
    "links" : [ "android.hardware.security.keymint.KeyParameter" ]
  }, {
    "name" : " static boolean isSecureHardware(@SecurityLevel int securityLevel)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the given security level is TEE or Strongbox.\n     *\n     * @param securityLevel the security level to query\n     * @return truw if the given security level is TEE or Strongbox.\n     ",
    "links" : [ ]
  }, {
    "name" : " static long getUnsignedInt(@NonNull Authorization param)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static Date getDate(@NonNull Authorization param)",
    "returnType" : "Date",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void forEachSetFlag(int flags, Consumer<Integer> consumer)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static long getRootSid()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void addSids(@NonNull List<KeyParameter> params, @NonNull UserAuthArgs spec)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void addUserAuthArgs(@NonNull List<KeyParameter> args, @NonNull UserAuthArgs spec)",
    "returnType" : "void",
    "comment" : "\n     * Adds keymaster arguments to express the key's authorization policy supported by user\n     * authentication.\n     *\n     * @param args The arguments sent to keymaster that need to be populated from the spec\n     * @param spec The user authentication relevant portions of the spec passed in from the caller.\n     *        This spec will be translated into the relevant keymaster tags to be loaded into args.\n     * @throws IllegalStateException if user authentication is required but the system is in a wrong\n     *         state (e.g., secure lock screen not set up) for generating or importing keys that\n     *         require user authentication.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " static KeyParameter makeBool(int tag)", " static KeyParameter makeEnum(int tag, int v)", " static KeyParameter makeInt(int tag, int v)", " static KeyParameter makeLong(int tag, long v)", " static KeyParameter makeBytes(int tag, @NonNull byte[] b)", " static KeyParameter makeBignum(int tag, @NonNull BigInteger b)", " static KeyParameter makeDate(int tag, @NonNull Date date)", " static boolean isSecureHardware(@SecurityLevel int securityLevel)", " static long getUnsignedInt(@NonNull Authorization param)", " static Date getDate(@NonNull Authorization param)", " static void forEachSetFlag(int flags, Consumer<Integer> consumer)", "private static long getRootSid()", "private static void addSids(@NonNull List<KeyParameter> params, @NonNull UserAuthArgs spec)", " static void addUserAuthArgs(@NonNull List<KeyParameter> args, @NonNull UserAuthArgs spec)" ],
  "variableNames" : [ ]
}