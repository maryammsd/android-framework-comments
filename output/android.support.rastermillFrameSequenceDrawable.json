{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/support/rastermill/FrameSequenceDrawable.java",
  "packageName" : "android.support.rastermill",
  "className" : "FrameSequenceDrawable",
  "comment" : "",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MIN_DELAY_MS",
    "type" : "long",
    "comment" : "\n     * These constants are chosen to imitate common browser behavior for WebP/GIF.\n     * If other decoders are added, this behavior should be moved into the WebP/GIF decoders.\n     *\n     * Note that 0 delay is undefined behavior in the GIF standard.\n     ",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_DELAY_MS",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sDecodingThread",
    "type" : "HandlerThread",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sDecodingThreadHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sAllocatingBitmapProvider",
    "type" : "BitmapProvider",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOOP_FINITE",
    "type" : "int",
    "comment" : "\n     * Loop a finite number of times, which can be set using setLoopCount. Default to loop once.\n     ",
    "links" : [ ]
  }, {
    "name" : "LOOP_INF",
    "type" : "int",
    "comment" : "\n     * Loop continuously. The OnFinishedListener will never be called.\n     ",
    "links" : [ ]
  }, {
    "name" : "LOOP_DEFAULT",
    "type" : "int",
    "comment" : "\n     * Use loop count stored in source data, or LOOP_ONCE if not present.\n     ",
    "links" : [ ]
  }, {
    "name" : "LOOP_ONCE",
    "type" : "int",
    "comment" : "\n     * Loop only once.\n     *\n     * @deprecated Use LOOP_FINITE instead.\n     ",
    "links" : [ ]
  }, {
    "name" : "mFrameSequence",
    "type" : "FrameSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFrameSequenceState",
    "type" : "FrameSequence.State",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPaint",
    "type" : "Paint",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFrontBitmapShader",
    "type" : "BitmapShader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBackBitmapShader",
    "type" : "BitmapShader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSrcRect",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCircleMaskEnabled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "Protects the fields below",
    "links" : [ ]
  }, {
    "name" : "mBitmapProvider",
    "type" : "BitmapProvider",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDestroyed",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFrontBitmap",
    "type" : "Bitmap",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBackBitmap",
    "type" : "Bitmap",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STATE_SCHEDULED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STATE_DECODING",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STATE_WAITING_TO_SWAP",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STATE_READY_TO_SWAP",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mState",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCurrentLoop",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLoopBehavior",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLoopCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLastSwap",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNextSwap",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNextFrameToDecode",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnFinishedListener",
    "type" : "OnFinishedListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTempRectF",
    "type" : "RectF",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDecodeRunnable",
    "type" : "Runnable",
    "comment" : "\n     * Runs on decoding thread, only modifies mBackBitmap's pixels\n     ",
    "links" : [ ]
  }, {
    "name" : "mFinishedCallbackRunnable",
    "type" : "Runnable",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static void initializeDecodingThread()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setOnFinishedListener(OnFinishedListener onFinishedListener)",
    "returnType" : "void",
    "comment" : "\n     * Register a callback to be invoked when a FrameSequenceDrawable finishes looping.\n     *\n     * @see #setLoopBehavior(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setLoopBehavior(int loopBehavior)",
    "returnType" : "void",
    "comment" : "\n     * Define looping behavior of frame sequence.\n     *\n     * Must be one of LOOP_ONCE, LOOP_INF, LOOP_DEFAULT, or LOOP_FINITE.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setLoopCount(int loopCount)",
    "returnType" : "void",
    "comment" : "\n     * Set the number of loops in LOOP_FINITE mode. The number must be a postive integer.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static Bitmap acquireAndValidateBitmap(BitmapProvider bitmapProvider, int minWidth, int minHeight)",
    "returnType" : "Bitmap",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final void setCircleMaskEnabled(boolean circleMaskEnabled)",
    "returnType" : "void",
    "comment" : "\n     * Pass true to mask the shape of the animated drawing content to a circle.\n     *\n     * <p> The masking circle will be the largest circle contained in the Drawable's bounds.\n     * Masking is done with BitmapShader, incurring minimal additional draw cost.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean getCircleMaskEnabled()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void checkDestroyedLocked()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isDestroyed()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void destroy()",
    "returnType" : "void",
    "comment" : "\n     * Marks the drawable as permanently recycled (and thus unusable), and releases any owned\n     * Bitmaps drawable to its BitmapProvider, if attached.\n     *\n     * If no BitmapProvider is attached to the drawable, recycle() is called on the Bitmaps.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void finalize() throws Throwable",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void draw(Canvas canvas)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void scheduleDecodeLocked()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void run()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void start()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void stop()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isRunning()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void unscheduleSelf(Runnable what)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean setVisible(boolean visible, boolean restart)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setFilterBitmap(boolean filter)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setAlpha(int alpha)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setColorFilter(ColorFilter colorFilter)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getIntrinsicWidth()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getIntrinsicHeight()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getOpacity()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "MIN_DELAY_MS", "DEFAULT_DELAY_MS", "sLock", "sDecodingThread", "sDecodingThreadHandler", "sAllocatingBitmapProvider", "LOOP_FINITE", "LOOP_INF", "LOOP_DEFAULT", "LOOP_ONCE", "mFrameSequence", "mFrameSequenceState", "mPaint", "mFrontBitmapShader", "mBackBitmapShader", "mSrcRect", "mCircleMaskEnabled", "mLock", "mBitmapProvider", "mDestroyed", "mFrontBitmap", "mBackBitmap", "STATE_SCHEDULED", "STATE_DECODING", "STATE_WAITING_TO_SWAP", "STATE_READY_TO_SWAP", "mState", "mCurrentLoop", "mLoopBehavior", "mLoopCount", "mLastSwap", "mNextSwap", "mNextFrameToDecode", "mOnFinishedListener", "mTempRectF", "mDecodeRunnable", "mFinishedCallbackRunnable" ],
  "methodNames" : [ "private static void initializeDecodingThread()", "public void setOnFinishedListener(OnFinishedListener onFinishedListener)", "public void setLoopBehavior(int loopBehavior)", "public void setLoopCount(int loopCount)", "private static Bitmap acquireAndValidateBitmap(BitmapProvider bitmapProvider, int minWidth, int minHeight)", "public final void setCircleMaskEnabled(boolean circleMaskEnabled)", "public final boolean getCircleMaskEnabled()", "private void checkDestroyedLocked()", "public boolean isDestroyed()", "public void destroy()", "protected void finalize() throws Throwable", "public void draw(Canvas canvas)", "private void scheduleDecodeLocked()", "public void run()", "public void start()", "public void stop()", "public boolean isRunning()", "public void unscheduleSelf(Runnable what)", "public boolean setVisible(boolean visible, boolean restart)", "public void setFilterBitmap(boolean filter)", "public void setAlpha(int alpha)", "public void setColorFilter(ColorFilter colorFilter)", "public int getIntrinsicWidth()", "public int getIntrinsicHeight()", "public int getOpacity()" ]
}