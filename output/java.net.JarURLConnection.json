{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/net/JarURLConnection.java",
  "packageName" : "java.net",
  "className" : "JarURLConnection",
  "comment" : "\n * A URL Connection to a Java ARchive (JAR) file or an entry in a JAR\n * file.\n *\n * <p>The syntax of a JAR URL is:\n *\n * <pre>\n * jar:&lt;url&gt;!/{entry}\n * </pre>\n *\n * <p>for example:\n *\n * <p>{@code jar:http://www.foo.com/bar/baz.jar!/COM/foo/Quux.class}\n *\n * <p>Jar URLs should be used to refer to a JAR file or entries in\n * a JAR file. The example above is a JAR URL which refers to a JAR\n * entry. If the entry name is omitted, the URL refers to the whole\n * JAR file:\n *\n * {@code jar:http://www.foo.com/bar/baz.jar!/}\n *\n * <p>Users should cast the generic URLConnection to a\n * JarURLConnection when they know that the URL they created is a JAR\n * URL, and they need JAR-specific functionality. For example:\n *\n * <pre>\n * URL url = new URL(\"jar:file:/home/duke/duke.jar!/\");\n * JarURLConnection jarConnection = (JarURLConnection)url.openConnection();\n * Manifest manifest = jarConnection.getManifest();\n * </pre>\n *\n * <p>JarURLConnection instances can only be used to read from JAR files.\n * It is not possible to get a {@link java.io.OutputStream} to modify or write\n * to the underlying JAR file using this class.\n * <p>Examples:\n *\n * <dl>\n *\n * <dt>A Jar entry\n * <dd>{@code jar:http://www.foo.com/bar/baz.jar!/COM/foo/Quux.class}\n *\n * <dt>A Jar file\n * <dd>{@code jar:http://www.foo.com/bar/baz.jar!/}\n *\n * <dt>A Jar directory\n * <dd>{@code jar:http://www.foo.com/bar/baz.jar!/COM/foo/}\n *\n * </dl>\n *\n * <p>{@code !/} is referred to as the <em>separator</em>.\n *\n * <p>When constructing a JAR url via {@code new URL(context, spec)},\n * the following rules apply:\n *\n * <ul>\n *\n * <li>if there is no context URL and the specification passed to the\n * URL constructor doesn't contain a separator, the URL is considered\n * to refer to a JarFile.\n *\n * <li>if there is a context URL, the context URL is assumed to refer\n * to a JAR file or a Jar directory.\n *\n * <li>if the specification begins with a '/', the Jar directory is\n * ignored, and the spec is considered to be at the root of the Jar\n * file.\n *\n * <p>Examples:\n *\n * <dl>\n *\n * <dt>context: <b>jar:http://www.foo.com/bar/jar.jar!/</b>,\n * spec:<b>baz/entry.txt</b>\n *\n * <dd>url:<b>jar:http://www.foo.com/bar/jar.jar!/baz/entry.txt</b>\n *\n * <dt>context: <b>jar:http://www.foo.com/bar/jar.jar!/baz</b>,\n * spec:<b>entry.txt</b>\n *\n * <dd>url:<b>jar:http://www.foo.com/bar/jar.jar!/baz/entry.txt</b>\n *\n * <dt>context: <b>jar:http://www.foo.com/bar/jar.jar!/baz</b>,\n * spec:<b>/entry.txt</b>\n *\n * <dd>url:<b>jar:http://www.foo.com/bar/jar.jar!/entry.txt</b>\n *\n * </dl>\n *\n * </ul>\n *\n * @see java.net.URL\n * @see java.net.URLConnection\n *\n * @see java.util.jar.JarFile\n * @see java.util.jar.JarInputStream\n * @see java.util.jar.Manifest\n * @see java.util.zip.ZipEntry\n *\n * @author Benjamin Renaud\n * @since 1.2\n ",
  "links" : [ "java.io.OutputStream" ],
  "variables" : [ {
    "name" : "jarFileURL",
    "type" : "URL",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "entryName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "jarFileURLConnection",
    "type" : "URLConnection",
    "comment" : "\n     * The connection to the JAR file URL, if the connection has been\n     * initiated. This should be set by connect.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void parseSpecs(URL url) throws MalformedURLException",
    "returnType" : "void",
    "comment" : " get the specs for a given url out of the cache, and compute and\n     * cache them if they're not there.\n     ",
    "links" : [ ]
  }, {
    "name" : "public URL getJarFileURL()",
    "returnType" : "URL",
    "comment" : "\n     * Returns the URL for the Jar file for this connection.\n     *\n     * @return the URL for the Jar file for this connection.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getEntryName()",
    "returnType" : "String",
    "comment" : "\n     * Return the entry name for this connection. This method\n     * returns null if the JAR file URL corresponding to this\n     * connection points to a JAR file and not a JAR file entry.\n     *\n     * @return the entry name for this connection, if any.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract JarFile getJarFile() throws IOException",
    "returnType" : "JarFile",
    "comment" : "\n     * Return the JAR file for this connection.\n     *\n     * @return the JAR file for this connection. If the connection is\n     * a connection to an entry of a JAR file, the JAR file object is\n     * returned\n     *\n     * @exception IOException if an IOException occurs while trying to\n     * connect to the JAR file for this connection.\n     *\n     * @see #connect\n     ",
    "links" : [ ]
  }, {
    "name" : "public Manifest getManifest() throws IOException",
    "returnType" : "Manifest",
    "comment" : "\n     * Returns the Manifest for this connection, or null if none.\n     *\n     * @return the manifest object corresponding to the JAR file object\n     * for this connection.\n     *\n     * @exception IOException if getting the JAR file for this\n     * connection causes an IOException to be thrown.\n     *\n     * @see #getJarFile\n     ",
    "links" : [ ]
  }, {
    "name" : "public JarEntry getJarEntry() throws IOException",
    "returnType" : "JarEntry",
    "comment" : "\n     * Return the JAR entry object for this connection, if any. This\n     * method returns null if the JAR file URL corresponding to this\n     * connection points to a JAR file and not a JAR file entry.\n     *\n     * @return the JAR entry object for this connection, or null if\n     * the JAR URL for this connection points to a JAR file.\n     *\n     * @exception IOException if getting the JAR file for this\n     * connection causes an IOException to be thrown.\n     *\n     * @see #getJarFile\n     * @see #getJarEntry\n     ",
    "links" : [ ]
  }, {
    "name" : "public Attributes getAttributes() throws IOException",
    "returnType" : "Attributes",
    "comment" : "\n     * Return the Attributes object for this connection if the URL\n     * for it points to a JAR file entry, null otherwise.\n     *\n     * @return the Attributes object for this connection if the URL\n     * for it points to a JAR file entry, null otherwise.\n     *\n     * @exception IOException if getting the JAR entry causes an\n     * IOException to be thrown.\n     *\n     * @see #getJarEntry\n     ",
    "links" : [ ]
  }, {
    "name" : "public Attributes getMainAttributes() throws IOException",
    "returnType" : "Attributes",
    "comment" : "\n     * Returns the main Attributes for the JAR file for this\n     * connection.\n     *\n     * @return the main Attributes for the JAR file for this\n     * connection.\n     *\n     * @exception IOException if getting the manifest causes an\n     * IOException to be thrown.\n     *\n     * @see #getJarFile\n     * @see #getManifest\n     ",
    "links" : [ ]
  }, {
    "name" : "public java.security.cert.Certificate[] getCertificates() throws IOException",
    "returnType" : "java.security.cert.Certificate[]",
    "comment" : "\n     * Return the Certificate object for this connection if the URL\n     * for it points to a JAR file entry, null otherwise. This method\n     * can only be called once\n     * the connection has been completely verified by reading\n     * from the input stream until the end of the stream has been\n     * reached. Otherwise, this method will return {@code null}\n     *\n     * @return the Certificate object for this connection if the URL\n     * for it points to a JAR file entry, null otherwise.\n     *\n     * @exception IOException if getting the JAR entry causes an\n     * IOException to be thrown.\n     *\n     * @see #getJarEntry\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void parseSpecs(URL url) throws MalformedURLException", "public URL getJarFileURL()", "public String getEntryName()", "public abstract JarFile getJarFile() throws IOException", "public Manifest getManifest() throws IOException", "public JarEntry getJarEntry() throws IOException", "public Attributes getAttributes() throws IOException", "public Attributes getMainAttributes() throws IOException", "public java.security.cert.Certificate[] getCertificates() throws IOException" ],
  "variableNames" : [ "jarFileURL", "entryName", "jarFileURLConnection" ]
}