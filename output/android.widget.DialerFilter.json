{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/widget/DialerFilter.java",
  "packageName" : "android.widget",
  "className" : "DialerFilter",
  "comment" : "\n * This widget is a layout that contains several specifically-named child views that\n * handle keyboard entry interpreted as standard phone dialpad digits.\n *\n * @deprecated Use a custom view or layout to handle this functionality instead\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "DIGITS_AND_LETTERS",
    "type" : "int",
    "comment" : " This mode has both lines ",
    "links" : [ ]
  }, {
    "name" : "DIGITS_AND_LETTERS_NO_DIGITS",
    "type" : "int",
    "comment" : " This mode is when after starting in {@link #DIGITS_AND_LETTERS} mode the filter\n     *  has removed all possibility of the digits matching, leaving only the letters line ",
    "links" : [ "#DIGITS_AND_LETTERS" ]
  }, {
    "name" : "DIGITS_AND_LETTERS_NO_LETTERS",
    "type" : "int",
    "comment" : " This mode is when after starting in {@link #DIGITS_AND_LETTERS} mode the filter\n     *  has removed all possibility of the letters matching, leaving only the digits line ",
    "links" : [ "#DIGITS_AND_LETTERS" ]
  }, {
    "name" : "DIGITS_ONLY",
    "type" : "int",
    "comment" : " This mode has only the digits line ",
    "links" : [ ]
  }, {
    "name" : "LETTERS_ONLY",
    "type" : "int",
    "comment" : " This mode has only the letters line ",
    "links" : [ ]
  }, {
    "name" : "mLetters",
    "type" : "EditText",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDigits",
    "type" : "EditText",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPrimary",
    "type" : "EditText",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHint",
    "type" : "EditText",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInputFilters",
    "type" : "InputFilter[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIcon",
    "type" : "ImageView",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMode",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsQwerty",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected void onFinishInflate()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onFocusChanged(boolean focused, int direction, Rect previouslyFocusedRect)",
    "returnType" : "void",
    "comment" : "\n     * Only show the icon view when focused, if there is one.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isQwertyKeyboard()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean onKeyDown(int keyCode, KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean onKeyUp(int keyCode, KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getMode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setMode(int newMode)",
    "returnType" : "void",
    "comment" : "\n     * Change the mode of the widget.\n     *\n     * @param newMode The mode to switch to.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void makeLettersPrimary()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void makeDigitsPrimary()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void swapPrimaryAndHint(boolean makeLettersPrimary)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getLetters()",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getDigits()",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getFilterText()",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void append(String text)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void clearText()",
    "returnType" : "void",
    "comment" : "\n     * Clears both the digits and the filter text.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setLettersWatcher(TextWatcher watcher)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setDigitsWatcher(TextWatcher watcher)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setFilterWatcher(TextWatcher watcher)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeFilterWatcher(TextWatcher watcher)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onModeChange(int oldMode, int newMode)",
    "returnType" : "void",
    "comment" : "\n     * Called right after the mode changes to give subclasses the option to\n     * restyle, etc.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "protected void onFinishInflate()", "protected void onFocusChanged(boolean focused, int direction, Rect previouslyFocusedRect)", "public boolean isQwertyKeyboard()", "public boolean onKeyDown(int keyCode, KeyEvent event)", "public boolean onKeyUp(int keyCode, KeyEvent event)", "public int getMode()", "public void setMode(int newMode)", "private void makeLettersPrimary()", "private void makeDigitsPrimary()", "private void swapPrimaryAndHint(boolean makeLettersPrimary)", "public CharSequence getLetters()", "public CharSequence getDigits()", "public CharSequence getFilterText()", "public void append(String text)", "public void clearText()", "public void setLettersWatcher(TextWatcher watcher)", "public void setDigitsWatcher(TextWatcher watcher)", "public void setFilterWatcher(TextWatcher watcher)", "public void removeFilterWatcher(TextWatcher watcher)", "protected void onModeChange(int oldMode, int newMode)" ],
  "variableNames" : [ "DIGITS_AND_LETTERS", "DIGITS_AND_LETTERS_NO_DIGITS", "DIGITS_AND_LETTERS_NO_LETTERS", "DIGITS_ONLY", "LETTERS_ONLY", "mLetters", "mDigits", "mPrimary", "mHint", "mInputFilters", "mIcon", "mMode", "mIsQwerty" ]
}