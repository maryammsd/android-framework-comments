{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/widget/AdapterViewAnimator.java",
  "packageName" : "android.widget",
  "className" : "AdapterViewAnimator",
  "comment" : "\n * Base class for a {@link AdapterView} that will perform animations\n * when switching between its views.\n *\n * @attr ref android.R.styleable#AdapterViewAnimator_inAnimation\n * @attr ref android.R.styleable#AdapterViewAnimator_outAnimation\n * @attr ref android.R.styleable#AdapterViewAnimator_animateFirstView\n * @attr ref android.R.styleable#AdapterViewAnimator_loopViews\n ",
  "links" : [ "android.widget.AdapterView" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWhichChild",
    "type" : "int",
    "comment" : "\n     * The index of the current child, which appears anywhere from the beginning\n     * to the end of the current set of children, as specified by {@link #mActiveOffset}\n     ",
    "links" : [ "#mActiveOffset" ]
  }, {
    "name" : "mRestoreWhichChild",
    "type" : "int",
    "comment" : "\n     * The index of the child to restore after the asynchronous connection from the\n     * RemoteViewsAdapter has been.\n     ",
    "links" : [ ]
  }, {
    "name" : "mAnimateFirstTime",
    "type" : "boolean",
    "comment" : "\n     * Whether or not the first view(s) should be animated in\n     ",
    "links" : [ ]
  }, {
    "name" : "mActiveOffset",
    "type" : "int",
    "comment" : "\n     *  Represents where the in the current window of\n     *  views the current <code>mDisplayedChild</code> sits\n     ",
    "links" : [ ]
  }, {
    "name" : "mMaxNumActiveViews",
    "type" : "int",
    "comment" : "\n     * The number of views that the {@link AdapterViewAnimator} keeps as children at any\n     * given time (not counting views that are pending removal, see {@link #mPreviousViews}).\n     ",
    "links" : [ "android.widget.AdapterViewAnimator", "#mPreviousViews" ]
  }, {
    "name" : "mViewsMap",
    "type" : "HashMap<Integer, ViewAndMetaData>",
    "comment" : "\n     * Map of the children of the {@link AdapterViewAnimator}.\n     ",
    "links" : [ "android.widget.AdapterViewAnimator" ]
  }, {
    "name" : "mPreviousViews",
    "type" : "ArrayList<Integer>",
    "comment" : "\n     * List of views pending removal from the {@link AdapterViewAnimator}\n     ",
    "links" : [ "android.widget.AdapterViewAnimator" ]
  }, {
    "name" : "mCurrentWindowStart",
    "type" : "int",
    "comment" : "\n     * The index, relative to the adapter, of the beginning of the window of views\n     ",
    "links" : [ ]
  }, {
    "name" : "mCurrentWindowEnd",
    "type" : "int",
    "comment" : "\n     * The index, relative to the adapter, of the end of the window of views\n     ",
    "links" : [ ]
  }, {
    "name" : "mCurrentWindowStartUnbounded",
    "type" : "int",
    "comment" : "\n     * The same as {@link #mCurrentWindowStart}, except when the we have bounded\n     * {@link #mCurrentWindowStart} to be non-negative\n     ",
    "links" : [ "#mCurrentWindowStart" ]
  }, {
    "name" : "mDataSetObserver",
    "type" : "AdapterDataSetObserver",
    "comment" : "\n     * Listens for data changes from the adapter\n     ",
    "links" : [ ]
  }, {
    "name" : "mAdapter",
    "type" : "Adapter",
    "comment" : "\n     * The {@link Adapter} for this {@link AdapterViewAnimator}\n     ",
    "links" : [ "android.widget.AdapterViewAnimator", "android.widget.Adapter" ]
  }, {
    "name" : "mRemoteViewsAdapter",
    "type" : "RemoteViewsAdapter",
    "comment" : "\n     * The {@link RemoteViewsAdapter} for this {@link AdapterViewAnimator}\n     ",
    "links" : [ "android.widget.AdapterViewAnimator", "android.widget.RemoteViewsAdapter" ]
  }, {
    "name" : "mDeferNotifyDataSetChanged",
    "type" : "boolean",
    "comment" : "\n     * The remote adapter containing the data to be displayed by this view to be set\n     ",
    "links" : [ ]
  }, {
    "name" : "mFirstTime",
    "type" : "boolean",
    "comment" : "\n     * Specifies whether this is the first time the animator is showing views\n     ",
    "links" : [ ]
  }, {
    "name" : "mLoopViews",
    "type" : "boolean",
    "comment" : "\n     * Specifies if the animator should wrap from 0 to the end and vice versa\n     * or have hard boundaries at the beginning and end\n     ",
    "links" : [ ]
  }, {
    "name" : "mReferenceChildWidth",
    "type" : "int",
    "comment" : "\n     * The width and height of some child, used as a size reference in-case our\n     * dimensions are unspecified by the parent.\n     ",
    "links" : [ ]
  }, {
    "name" : "mReferenceChildHeight",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInAnimation",
    "type" : "ObjectAnimator",
    "comment" : "\n     * In and out animations.\n     ",
    "links" : [ ]
  }, {
    "name" : "mOutAnimation",
    "type" : "ObjectAnimator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTouchMode",
    "type" : "int",
    "comment" : "\n     * Current touch state.\n     ",
    "links" : [ ]
  }, {
    "name" : "TOUCH_MODE_NONE",
    "type" : "int",
    "comment" : "\n     * Private touch states.\n     ",
    "links" : [ ]
  }, {
    "name" : "TOUCH_MODE_DOWN_IN_CURRENT_VIEW",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TOUCH_MODE_HANDLED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPendingCheckForTap",
    "type" : "Runnable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_ANIMATION_DURATION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void initViewAnimator()",
    "returnType" : "void",
    "comment" : "\n     * Initialize this {@link AdapterViewAnimator}\n     ",
    "links" : [ "android.widget.AdapterViewAnimator" ]
  }, {
    "name" : " void configureViewAnimator(int numVisibleViews, int activeOffset)",
    "returnType" : "void",
    "comment" : "\n     * This method is used by subclasses to configure the animator to display the\n     * desired number of views, and specify the offset\n     *\n     * @param numVisibleViews The number of views the animator keeps in the {@link ViewGroup}\n     * @param activeOffset This parameter specifies where the current index ({@link #mWhichChild})\n     *        sits within the window. For example if activeOffset is 1, and numVisibleViews is 3,\n     *        and {@link #setDisplayedChild(int)} is called with 10, then the effective window will\n     *        be the indexes 9, 10, and 11. In the same example, if activeOffset were 0, then the\n     *        window would instead contain indexes 10, 11 and 12.\n     * @param shouldLoop If the animator is show view 0, and setPrevious() is called, do we\n     *        we loop back to the end, or do we do nothing\n     ",
    "links" : [ "#mWhichChild", "#setDisplayedChild(int)", "android.view.ViewGroup" ]
  }, {
    "name" : " void transformViewForTransition(int fromIndex, int toIndex, View view, boolean animate)",
    "returnType" : "void",
    "comment" : "\n     * This class should be overridden by subclasses to customize view transitions within\n     * the set of visible views\n     *\n     * @param fromIndex The relative index within the window that the view was in, -1 if it wasn't\n     *        in the window\n     * @param toIndex The relative index within the window that the view is going to, -1 if it is\n     *        being removed\n     * @param view The view that is being animated\n     ",
    "links" : [ ]
  }, {
    "name" : " ObjectAnimator getDefaultInAnimation()",
    "returnType" : "ObjectAnimator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " ObjectAnimator getDefaultOutAnimation()",
    "returnType" : "ObjectAnimator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setDisplayedChild(int whichChild)",
    "returnType" : "void",
    "comment" : "\n     * Sets which child view will be displayed.\n     *\n     * @param whichChild the index of the child view to display\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setDisplayedChild(int whichChild, boolean animate)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void applyTransformForChildAtIndex(View child, int relativeIndex)",
    "returnType" : "void",
    "comment" : "\n     * To be overridden by subclasses. This method applies a view / index specific\n     * transform to the child view.\n     *\n     * @param child\n     * @param relativeIndex\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getDisplayedChild()",
    "returnType" : "int",
    "comment" : "\n     * Returns the index of the currently displayed child view.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void showNext()",
    "returnType" : "void",
    "comment" : "\n     * Manually shows the next child.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void showPrevious()",
    "returnType" : "void",
    "comment" : "\n     * Manually shows the previous child.\n     ",
    "links" : [ ]
  }, {
    "name" : " int modulo(int pos, int size)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " View getViewAtRelativeIndex(int relativeIndex)",
    "returnType" : "View",
    "comment" : "\n     * Get the view at this index relative to the current window's start\n     *\n     * @param relativeIndex Position relative to the current window's start\n     * @return View at this index, null if the index is outside the bounds\n     ",
    "links" : [ ]
  }, {
    "name" : " int getNumActiveViews()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " int getWindowSize()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private ViewAndMetaData getMetaDataForChild(View child)",
    "returnType" : "ViewAndMetaData",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " LayoutParams createOrReuseLayoutParams(View v)",
    "returnType" : "LayoutParams",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void refreshChildren()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " FrameLayout getFrameForChild()",
    "returnType" : "FrameLayout",
    "comment" : "\n     * This method can be overridden so that subclasses can provide a custom frame in which their\n     * children can live. For example, StackView adds padding to its childrens' frames so as to\n     * accomodate for the highlight effect.\n     *\n     * @return The FrameLayout into which children can be placed.\n     ",
    "links" : [ ]
  }, {
    "name" : " void showOnly(int childIndex, boolean animate)",
    "returnType" : "void",
    "comment" : "\n     * Shows only the specified child. The other displays Views exit the screen,\n     * optionally with the with the {@link #getOutAnimation() out animation} and\n     * the specified child enters the screen, optionally with the\n     * {@link #getInAnimation() in animation}.\n     *\n     * @param childIndex The index of the child to be shown.\n     * @param animate Whether or not to use the in and out animations, defaults\n     *            to true.\n     ",
    "links" : [ "#getInAnimation()", "#getOutAnimation()" ]
  }, {
    "name" : "private void addChild(View child)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void showTapFeedback(View v)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void hideTapFeedback(View v)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void cancelHandleClick()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean onTouchEvent(MotionEvent ev)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void measureChildren()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void checkForAndHandleDataChanged()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onLayout(boolean changed, int left, int top, int right, int bottom)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Parcelable onSaveInstanceState()",
    "returnType" : "Parcelable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onRestoreInstanceState(Parcelable state)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public View getCurrentView()",
    "returnType" : "View",
    "comment" : "\n     * Returns the View corresponding to the currently displayed child.\n     *\n     * @return The View currently displayed.\n     *\n     * @see #getDisplayedChild()\n     ",
    "links" : [ ]
  }, {
    "name" : "public ObjectAnimator getInAnimation()",
    "returnType" : "ObjectAnimator",
    "comment" : "\n     * Returns the current animation used to animate a View that enters the screen.\n     *\n     * @return An Animation or null if none is set.\n     *\n     * @see #setInAnimation(android.animation.ObjectAnimator)\n     * @see #setInAnimation(android.content.Context, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setInAnimation(ObjectAnimator inAnimation)",
    "returnType" : "void",
    "comment" : "\n     * Specifies the animation used to animate a View that enters the screen.\n     *\n     * @param inAnimation The animation started when a View enters the screen.\n     *\n     * @see #getInAnimation()\n     * @see #setInAnimation(android.content.Context, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public ObjectAnimator getOutAnimation()",
    "returnType" : "ObjectAnimator",
    "comment" : "\n     * Returns the current animation used to animate a View that exits the screen.\n     *\n     * @return An Animation or null if none is set.\n     *\n     * @see #setOutAnimation(android.animation.ObjectAnimator)\n     * @see #setOutAnimation(android.content.Context, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOutAnimation(ObjectAnimator outAnimation)",
    "returnType" : "void",
    "comment" : "\n     * Specifies the animation used to animate a View that exit the screen.\n     *\n     * @param outAnimation The animation started when a View exit the screen.\n     *\n     * @see #getOutAnimation()\n     * @see #setOutAnimation(android.content.Context, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setInAnimation(Context context, int resourceID)",
    "returnType" : "void",
    "comment" : "\n     * Specifies the animation used to animate a View that enters the screen.\n     *\n     * @param context The application's environment.\n     * @param resourceID The resource id of the animation.\n     *\n     * @see #getInAnimation()\n     * @see #setInAnimation(android.animation.ObjectAnimator)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOutAnimation(Context context, int resourceID)",
    "returnType" : "void",
    "comment" : "\n     * Specifies the animation used to animate a View that exit the screen.\n     *\n     * @param context The application's environment.\n     * @param resourceID The resource id of the animation.\n     *\n     * @see #getOutAnimation()\n     * @see #setOutAnimation(android.animation.ObjectAnimator)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAnimateFirstView(boolean animate)",
    "returnType" : "void",
    "comment" : "\n     * Indicates whether the current View should be animated the first time\n     * the ViewAnimation is displayed.\n     *\n     * @param animate True to animate the current View the first time it is displayed,\n     *                false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getBaseline()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Adapter getAdapter()",
    "returnType" : "Adapter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setAdapter(Adapter adapter)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setRemoteViewsAdapter(Intent intent)",
    "returnType" : "void",
    "comment" : "\n     * Sets up this AdapterViewAnimator to use a remote views adapter which connects to a\n     * RemoteViewsService through the specified intent.\n     *\n     * @param intent the intent used to identify the RemoteViewsService for the adapter to\n     *        connect to.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Runnable setRemoteViewsAdapterAsync(final Intent intent)",
    "returnType" : "Runnable",
    "comment" : " @hide *",
    "links" : [ ]
  }, {
    "name" : "public void setRemoteViewsAdapter(Intent intent, boolean isAsync)",
    "returnType" : "void",
    "comment" : " @hide *",
    "links" : [ ]
  }, {
    "name" : "public void setRemoteViewsOnClickHandler(InteractionHandler handler)",
    "returnType" : "void",
    "comment" : "\n     * Sets up the onClickHandler to be used by the RemoteViewsAdapter when inflating RemoteViews\n     * \n     * @param handler The OnClickHandler to use when inflating RemoteViews.\n     * \n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSelection(int position)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public View getSelectedView()",
    "returnType" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void deferNotifyDataSetChanged()",
    "returnType" : "void",
    "comment" : "\n     * This defers a notifyDataSetChanged on the pending RemoteViewsAdapter if it has not\n     * connected yet.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean onRemoteAdapterConnected()",
    "returnType" : "boolean",
    "comment" : "\n     * Called back when the adapter connects to the RemoteViewsService.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onRemoteAdapterDisconnected()",
    "returnType" : "void",
    "comment" : "\n     * Called back when the adapter disconnects from the RemoteViewsService.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void advance()",
    "returnType" : "void",
    "comment" : "\n     * Called by an {@link android.appwidget.AppWidgetHost} in order to advance the current view when\n     * it is being used within an app widget.\n     ",
    "links" : [ "android.appwidget.AppWidgetHost" ]
  }, {
    "name" : "public void fyiWillBeAdvancedByHostKThx()",
    "returnType" : "void",
    "comment" : "\n     * Called by an {@link android.appwidget.AppWidgetHost} to indicate that it will be\n     * automatically advancing the views of this {@link AdapterViewAnimator} by calling\n     * {@link AdapterViewAnimator#advance()} at some point in the future. This allows subclasses to\n     * perform any required setup, for example, to stop automatically advancing their children.\n     ",
    "links" : [ "android.widget.AdapterViewAnimator", "android.appwidget.AppWidgetHost", "android.widget.AdapterViewAnimator#advance()" ]
  }, {
    "name" : "public CharSequence getAccessibilityClassName()",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void initViewAnimator()", " void configureViewAnimator(int numVisibleViews, int activeOffset)", " void transformViewForTransition(int fromIndex, int toIndex, View view, boolean animate)", " ObjectAnimator getDefaultInAnimation()", " ObjectAnimator getDefaultOutAnimation()", "public void setDisplayedChild(int whichChild)", "private void setDisplayedChild(int whichChild, boolean animate)", " void applyTransformForChildAtIndex(View child, int relativeIndex)", "public int getDisplayedChild()", "public void showNext()", "public void showPrevious()", " int modulo(int pos, int size)", " View getViewAtRelativeIndex(int relativeIndex)", " int getNumActiveViews()", " int getWindowSize()", "private ViewAndMetaData getMetaDataForChild(View child)", " LayoutParams createOrReuseLayoutParams(View v)", " void refreshChildren()", " FrameLayout getFrameForChild()", " void showOnly(int childIndex, boolean animate)", "private void addChild(View child)", " void showTapFeedback(View v)", " void hideTapFeedback(View v)", " void cancelHandleClick()", "public boolean onTouchEvent(MotionEvent ev)", "private void measureChildren()", "protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)", " void checkForAndHandleDataChanged()", "protected void onLayout(boolean changed, int left, int top, int right, int bottom)", "public Parcelable onSaveInstanceState()", "public void onRestoreInstanceState(Parcelable state)", "public View getCurrentView()", "public ObjectAnimator getInAnimation()", "public void setInAnimation(ObjectAnimator inAnimation)", "public ObjectAnimator getOutAnimation()", "public void setOutAnimation(ObjectAnimator outAnimation)", "public void setInAnimation(Context context, int resourceID)", "public void setOutAnimation(Context context, int resourceID)", "public void setAnimateFirstView(boolean animate)", "public int getBaseline()", "public Adapter getAdapter()", "public void setAdapter(Adapter adapter)", "public void setRemoteViewsAdapter(Intent intent)", "public Runnable setRemoteViewsAdapterAsync(final Intent intent)", "public void setRemoteViewsAdapter(Intent intent, boolean isAsync)", "public void setRemoteViewsOnClickHandler(InteractionHandler handler)", "public void setSelection(int position)", "public View getSelectedView()", "public void deferNotifyDataSetChanged()", "public boolean onRemoteAdapterConnected()", "public void onRemoteAdapterDisconnected()", "public void advance()", "public void fyiWillBeAdvancedByHostKThx()", "public CharSequence getAccessibilityClassName()" ],
  "variableNames" : [ "TAG", "mWhichChild", "mRestoreWhichChild", "mAnimateFirstTime", "mActiveOffset", "mMaxNumActiveViews", "mViewsMap", "mPreviousViews", "mCurrentWindowStart", "mCurrentWindowEnd", "mCurrentWindowStartUnbounded", "mDataSetObserver", "mAdapter", "mRemoteViewsAdapter", "mDeferNotifyDataSetChanged", "mFirstTime", "mLoopViews", "mReferenceChildWidth", "mReferenceChildHeight", "mInAnimation", "mOutAnimation", "mTouchMode", "TOUCH_MODE_NONE", "TOUCH_MODE_DOWN_IN_CURRENT_VIEW", "TOUCH_MODE_HANDLED", "mPendingCheckForTap", "DEFAULT_ANIMATION_DURATION" ]
}