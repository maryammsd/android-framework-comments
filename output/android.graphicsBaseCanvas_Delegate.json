{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/graphics/BaseCanvas_Delegate.java",
  "packageName" : "android.graphics",
  "className" : "BaseCanvas_Delegate",
  "comment" : "",
  "variables" : [ {
    "name" : "sManager",
    "type" : "DelegateManager<BaseCanvas_Delegate>",
    "comment" : " ---- delegate manager ----",
    "links" : [ ]
  }, {
    "name" : "sBoolOut",
    "type" : "boolean[]",
    "comment" : " ---- delegate helper data ----",
    "links" : [ ]
  }, {
    "name" : "mBitmap",
    "type" : "Bitmap_Delegate",
    "comment" : " ---- delegate data ----",
    "links" : [ ]
  }, {
    "name" : "mSnapshot",
    "type" : "GcSnapshot",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected void dispose()",
    "returnType" : "void",
    "comment" : "\n     * Disposes of the {@link Graphics2D} stack.\n     ",
    "links" : [ "Graphics2D" ]
  }, {
    "name" : "public GcSnapshot getSnapshot()",
    "returnType" : "GcSnapshot",
    "comment" : "\n     * Returns the current {@link Graphics2D} used to draw.\n     ",
    "links" : [ "Graphics2D" ]
  }, {
    "name" : " static void nDrawBitmap(long nativeCanvas, long bitmapHandle, float left, float top, long nativePaintOrZero, int canvasDensity, int screenDensity, int bitmapDensity)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nDrawBitmap(long nativeCanvas, long bitmapHandle, float srcLeft, float srcTop, float srcRight, float srcBottom, float dstLeft, float dstTop, float dstRight, float dstBottom, long nativePaintOrZero, int screenDensity, int bitmapDensity)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nDrawBitmap(long nativeCanvas, int[] colors, int offset, int stride, final float x, final float y, int width, int height, boolean hasAlpha, long nativePaintOrZero)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nDrawColor(long nativeCanvas, final int color, final int mode)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nDrawColor(long nativeCanvas, long nativeColorSpace, long color, int mode)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nDrawPaint(long nativeCanvas, long paint)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nDrawPoint(long nativeCanvas, float x, float y, long nativePaint)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nDrawPoints(long nativeCanvas, float[] pts, int offset, int count, long nativePaint)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nDrawLine(long nativeCanvas, final float startX, final float startY, final float stopX, final float stopY, long paint)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nDrawLines(long nativeCanvas, final float[] pts, final int offset, final int count, long nativePaint)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nDrawRect(long nativeCanvas, final float left, final float top, final float right, final float bottom, long paint)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nDrawOval(long nativeCanvas, final float left, final float top, final float right, final float bottom, long paint)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nDrawCircle(long nativeCanvas, float cx, float cy, float radius, long paint)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nDrawArc(long nativeCanvas, final float left, final float top, final float right, final float bottom, final float startAngle, final float sweep, final boolean useCenter, long paint)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nDrawRoundRect(long nativeCanvas, final float left, final float top, final float right, final float bottom, final float rx, final float ry, long paint)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nDrawDoubleRoundRect(long nativeCanvas, float outerLeft, float outerTop, float outerRight, float outerBottom, float outerRx, float outerRy, float innerLeft, float innerTop, float innerRight, float innerBottom, float innerRx, float innerRy, long nativePaint)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nDrawDoubleRoundRect(long nativeCanvas, float outerLeft, float outerTop, float outerRight, float outerBottom, float[] outerRadii, float innerLeft, float innerTop, float innerRight, float innerBottom, float[] innerRadii, long nativePaint)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void nDrawPath(long nativeCanvas, long path, long paint)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nDrawRegion(long nativeCanvas, long nativeRegion, long nativePaint)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nDrawNinePatch(long nativeCanvas, long nativeBitmap, long ninePatch, final float dstLeft, final float dstTop, final float dstRight, final float dstBottom, long nativePaintOrZero, final int screenDensity, final int bitmapDensity)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nDrawBitmapMatrix(long nCanvas, long bitmapHandle, long nMatrix, long nPaint)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nDrawBitmapMesh(long nCanvas, long bitmapHandle, int meshWidth, int meshHeight, float[] verts, int vertOffset, int[] colors, int colorOffset, long nPaint)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nDrawVertices(long nCanvas, int mode, int n, float[] verts, int vertOffset, float[] texs, int texOffset, int[] colors, int colorOffset, short[] indices, int indexOffset, int indexCount, long nPaint)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nDrawText(long nativeCanvas, char[] text, int index, int count, float startX, float startY, int flags, long paint)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nDrawText(long nativeCanvas, String text, int start, int end, float x, float y, final int flags, long paint)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nDrawTextRun(long nativeCanvas, String text, int start, int end, int contextStart, int contextEnd, float x, float y, boolean isRtl, long paint)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nDrawTextRun(long nativeCanvas, char[] text, int start, int count, int contextStart, int contextCount, float x, float y, boolean isRtl, long paint, long nativeMeasuredText)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nDrawTextOnPath(long nativeCanvas, char[] text, int index, int count, long path, float hOffset, float vOffset, int bidiFlags, long paint)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nDrawTextOnPath(long nativeCanvas, String text, long path, float hOffset, float vOffset, int bidiFlags, long paint)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void draw(long nCanvas, long nPaint, boolean compositeOnly, boolean forceSrcMode, GcSnapshot.Drawable drawable)",
    "returnType" : "void",
    "comment" : "\n     * Executes a {@link GcSnapshot.Drawable} with a given canvas and paint.\n     * <p>Note that the drawable may actually be executed several times if there are\n     * layers involved (see {@link #saveLayer(RectF, Paint_Delegate, int)}.\n     ",
    "links" : [ "GcSnapshot.Drawable", "#saveLayer" ]
  }, {
    "name" : "private static void draw(long nCanvas, GcSnapshot.Drawable drawable)",
    "returnType" : "void",
    "comment" : "\n     * Executes a {@link GcSnapshot.Drawable} with a given canvas. No paint object will be provided\n     * to {@link GcSnapshot.Drawable#draw(Graphics2D, Paint_Delegate)}.\n     * <p>Note that the drawable may actually be executed several times if there are\n     * layers involved (see {@link #saveLayer(RectF, Paint_Delegate, int)}.\n     ",
    "links" : [ "GcSnapshot.Drawable", "GcSnapshot.Drawable#draw", "#saveLayer" ]
  }, {
    "name" : "private static void drawText(long nativeCanvas, final char[] text, final int index, final int count, final float startX, final float startY, final int bidiFlags, long paint)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void drawBitmap(long nativeCanvas, Bitmap_Delegate bitmap, long nativePaintOrZero, final int sleft, final int stop, final int sright, final int sbottom, final int dleft, final int dtop, final int dright, final int dbottom)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static BufferedImage getImageToDraw(Bitmap_Delegate bitmap, Paint_Delegate paint, boolean[] forceSrcMode)",
    "returnType" : "BufferedImage",
    "comment" : "\n     * Returns a BufferedImage ready for drawing, based on the bitmap and paint delegate.\n     * The image returns, through a 1-size boolean array, whether the drawing code should\n     * use a SRC composite no matter what the paint says.\n     *\n     * @param bitmap the bitmap\n     * @param paint the paint that will be used to draw\n     * @param forceSrcMode whether the composite will have to be SRC\n     * @return the image to draw\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void fixAlpha8Bitmap(final BufferedImage image, @Nullable java.awt.Paint javaPaint)",
    "returnType" : "void",
    "comment" : "\n     * This method will apply the correct color to the passed \"only alpha\" image. Colors on the\n     * passed image will be destroyed.\n     * If the passed javaPaint is null, the color will be set to 0. If a paint is passed, it will\n     * be used to obtain the color that will be applied.\n     * <p/>\n     * This will destroy the passed image color channel.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected int save(int saveFlags)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected int saveLayerAlpha(RectF rect, int alpha, int saveFlags)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected int saveLayer(RectF rect, Paint_Delegate paint, int saveFlags)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void restoreTo(int saveCount)",
    "returnType" : "void",
    "comment" : "\n     * Restores the {@link GcSnapshot} to <var>saveCount</var>\n     * @param saveCount the saveCount\n     ",
    "links" : [ "GcSnapshot" ]
  }, {
    "name" : "protected void restore()",
    "returnType" : "void",
    "comment" : "\n     * Restores the top {@link GcSnapshot}\n     ",
    "links" : [ "GcSnapshot" ]
  }, {
    "name" : "protected boolean clipRect(float left, float top, float right, float bottom, int regionOp)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "sManager", "sBoolOut", "mBitmap", "mSnapshot" ],
  "methodNames" : [ "protected void dispose()", "public GcSnapshot getSnapshot()", " static void nDrawBitmap(long nativeCanvas, long bitmapHandle, float left, float top, long nativePaintOrZero, int canvasDensity, int screenDensity, int bitmapDensity)", " static void nDrawBitmap(long nativeCanvas, long bitmapHandle, float srcLeft, float srcTop, float srcRight, float srcBottom, float dstLeft, float dstTop, float dstRight, float dstBottom, long nativePaintOrZero, int screenDensity, int bitmapDensity)", " static void nDrawBitmap(long nativeCanvas, int[] colors, int offset, int stride, final float x, final float y, int width, int height, boolean hasAlpha, long nativePaintOrZero)", " static void nDrawColor(long nativeCanvas, final int color, final int mode)", " static void nDrawColor(long nativeCanvas, long nativeColorSpace, long color, int mode)", " static void nDrawPaint(long nativeCanvas, long paint)", " static void nDrawPoint(long nativeCanvas, float x, float y, long nativePaint)", " static void nDrawPoints(long nativeCanvas, float[] pts, int offset, int count, long nativePaint)", " static void nDrawLine(long nativeCanvas, final float startX, final float startY, final float stopX, final float stopY, long paint)", " static void nDrawLines(long nativeCanvas, final float[] pts, final int offset, final int count, long nativePaint)", " static void nDrawRect(long nativeCanvas, final float left, final float top, final float right, final float bottom, long paint)", " static void nDrawOval(long nativeCanvas, final float left, final float top, final float right, final float bottom, long paint)", " static void nDrawCircle(long nativeCanvas, float cx, float cy, float radius, long paint)", " static void nDrawArc(long nativeCanvas, final float left, final float top, final float right, final float bottom, final float startAngle, final float sweep, final boolean useCenter, long paint)", " static void nDrawRoundRect(long nativeCanvas, final float left, final float top, final float right, final float bottom, final float rx, final float ry, long paint)", " static void nDrawDoubleRoundRect(long nativeCanvas, float outerLeft, float outerTop, float outerRight, float outerBottom, float outerRx, float outerRy, float innerLeft, float innerTop, float innerRight, float innerBottom, float innerRx, float innerRy, long nativePaint)", " static void nDrawDoubleRoundRect(long nativeCanvas, float outerLeft, float outerTop, float outerRight, float outerBottom, float[] outerRadii, float innerLeft, float innerTop, float innerRight, float innerBottom, float[] innerRadii, long nativePaint)", "public static void nDrawPath(long nativeCanvas, long path, long paint)", " static void nDrawRegion(long nativeCanvas, long nativeRegion, long nativePaint)", " static void nDrawNinePatch(long nativeCanvas, long nativeBitmap, long ninePatch, final float dstLeft, final float dstTop, final float dstRight, final float dstBottom, long nativePaintOrZero, final int screenDensity, final int bitmapDensity)", " static void nDrawBitmapMatrix(long nCanvas, long bitmapHandle, long nMatrix, long nPaint)", " static void nDrawBitmapMesh(long nCanvas, long bitmapHandle, int meshWidth, int meshHeight, float[] verts, int vertOffset, int[] colors, int colorOffset, long nPaint)", " static void nDrawVertices(long nCanvas, int mode, int n, float[] verts, int vertOffset, float[] texs, int texOffset, int[] colors, int colorOffset, short[] indices, int indexOffset, int indexCount, long nPaint)", " static void nDrawText(long nativeCanvas, char[] text, int index, int count, float startX, float startY, int flags, long paint)", " static void nDrawText(long nativeCanvas, String text, int start, int end, float x, float y, final int flags, long paint)", " static void nDrawTextRun(long nativeCanvas, String text, int start, int end, int contextStart, int contextEnd, float x, float y, boolean isRtl, long paint)", " static void nDrawTextRun(long nativeCanvas, char[] text, int start, int count, int contextStart, int contextCount, float x, float y, boolean isRtl, long paint, long nativeMeasuredText)", " static void nDrawTextOnPath(long nativeCanvas, char[] text, int index, int count, long path, float hOffset, float vOffset, int bidiFlags, long paint)", " static void nDrawTextOnPath(long nativeCanvas, String text, long path, float hOffset, float vOffset, int bidiFlags, long paint)", "private static void draw(long nCanvas, long nPaint, boolean compositeOnly, boolean forceSrcMode, GcSnapshot.Drawable drawable)", "private static void draw(long nCanvas, GcSnapshot.Drawable drawable)", "private static void drawText(long nativeCanvas, final char[] text, final int index, final int count, final float startX, final float startY, final int bidiFlags, long paint)", "private static void drawBitmap(long nativeCanvas, Bitmap_Delegate bitmap, long nativePaintOrZero, final int sleft, final int stop, final int sright, final int sbottom, final int dleft, final int dtop, final int dright, final int dbottom)", "private static BufferedImage getImageToDraw(Bitmap_Delegate bitmap, Paint_Delegate paint, boolean[] forceSrcMode)", "private static void fixAlpha8Bitmap(final BufferedImage image, @Nullable java.awt.Paint javaPaint)", "protected int save(int saveFlags)", "protected int saveLayerAlpha(RectF rect, int alpha, int saveFlags)", "protected int saveLayer(RectF rect, Paint_Delegate paint, int saveFlags)", "protected void restoreTo(int saveCount)", "protected void restore()", "protected boolean clipRect(float left, float top, float right, float bottom, int regionOp)" ]
}