{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/graphics/GraphicBuffer.java",
  "packageName" : "android.graphics",
  "className" : "GraphicBuffer",
  "comment" : "\n * Simple wrapper for the native GraphicBuffer class.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "USAGE_SW_READ_NEVER",
    "type" : "int",
    "comment" : " Note: keep usage flags in sync with GraphicBuffer.h and gralloc.h",
    "links" : [ ]
  }, {
    "name" : "USAGE_SW_READ_RARELY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "USAGE_SW_READ_OFTEN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "USAGE_SW_READ_MASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "USAGE_SW_WRITE_NEVER",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "USAGE_SW_WRITE_RARELY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "USAGE_SW_WRITE_OFTEN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "USAGE_SW_WRITE_MASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "USAGE_SOFTWARE_MASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "USAGE_PROTECTED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "USAGE_HW_TEXTURE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "USAGE_HW_RENDER",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "USAGE_HW_2D",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "USAGE_HW_COMPOSER",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "USAGE_HW_VIDEO_ENCODER",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "USAGE_HW_MASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWidth",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHeight",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFormat",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUsage",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNativeObject",
    "type" : "long",
    "comment" : " Note: do not rename, this field is used by native code",
    "links" : [ ]
  }, {
    "name" : "mCanvas",
    "type" : "Canvas",
    "comment" : " These two fields are only used by lock/unlockCanvas()",
    "links" : [ ]
  }, {
    "name" : "mSaveCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDestroyed",
    "type" : "boolean",
    "comment" : " If set to true, this GraphicBuffer instance cannot be used anymore",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<GraphicBuffer>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static GraphicBuffer create(int width, int height, int format, int usage)",
    "returnType" : "GraphicBuffer",
    "comment" : "\n     * Creates new <code>GraphicBuffer</code> instance. This method will return null\n     * if the buffer cannot be created.\n     *\n     * @param width The width in pixels of the buffer\n     * @param height The height in pixels of the buffer\n     * @param format The format of each pixel as specified in {@link PixelFormat}\n     * @param usage Hint indicating how the buffer will be used\n     *\n     * @return A <code>GraphicBuffer</code> instance or null\n     ",
    "links" : [ "android.graphics.PixelFormat" ]
  }, {
    "name" : "public static GraphicBuffer createFromExisting(int width, int height, int format, int usage, long unwrappedNativeObject)",
    "returnType" : "GraphicBuffer",
    "comment" : "\n     * For SurfaceControl JNI.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final GraphicBuffer createFromHardwareBuffer(HardwareBuffer buffer)",
    "returnType" : "GraphicBuffer",
    "comment" : "\n     * For Bitmap until all usages are updated to AHB\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getWidth()",
    "returnType" : "int",
    "comment" : "\n     * Returns the width of this buffer in pixels.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getHeight()",
    "returnType" : "int",
    "comment" : "\n     * Returns the height of this buffer in pixels.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getFormat()",
    "returnType" : "int",
    "comment" : "\n     * Returns the pixel format of this buffer. The pixel format must be one of\n     * the formats defined in {@link PixelFormat}.\n     ",
    "links" : [ "android.graphics.PixelFormat" ]
  }, {
    "name" : "public int getUsage()",
    "returnType" : "int",
    "comment" : "\n     * Returns the usage hint set on this buffer.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Canvas lockCanvas()",
    "returnType" : "Canvas",
    "comment" : "\n     * <p>Start editing the pixels in the buffer. A null is returned if the buffer\n     * cannot be locked for editing.</p>\n     *\n     * <p>The content of the buffer is preserved between unlockCanvas()\n     * and lockCanvas().</p>\n     *\n     * <p>If this method is called after {@link #destroy()}, the return value will\n     * always be null.</p>\n     *\n     * @return A Canvas used to draw into the buffer, or null.\n     *\n     * @see #lockCanvas(android.graphics.Rect)\n     * @see #unlockCanvasAndPost(android.graphics.Canvas)\n     * @see #isDestroyed()\n     ",
    "links" : [ "#destroy()" ]
  }, {
    "name" : "public Canvas lockCanvas(Rect dirty)",
    "returnType" : "Canvas",
    "comment" : "\n     * Just like {@link #lockCanvas()} but allows specification of a dirty\n     * rectangle.\n     *\n     * <p>If this method is called after {@link #destroy()}, the return value will\n     * always be null.</p>\n     *\n     * @param dirty Area of the buffer that may be modified.\n\n     * @return A Canvas used to draw into the surface, or null.\n     *\n     * @see #lockCanvas()\n     * @see #unlockCanvasAndPost(android.graphics.Canvas)\n     * @see #isDestroyed()\n     ",
    "links" : [ "#lockCanvas()", "#destroy()" ]
  }, {
    "name" : "public void unlockCanvasAndPost(Canvas canvas)",
    "returnType" : "void",
    "comment" : "\n     * Finish editing pixels in the buffer.\n     *\n     * <p>This method doesn't do anything if {@link #destroy()} was\n     * previously called.</p>\n     *\n     * @param canvas The Canvas previously returned by lockCanvas()\n     *\n     * @see #lockCanvas()\n     * @see #lockCanvas(android.graphics.Rect)\n     * @see #isDestroyed()\n     ",
    "links" : [ "#destroy()" ]
  }, {
    "name" : "public void destroy()",
    "returnType" : "void",
    "comment" : "\n     * Destroyes this buffer immediately. Calling this method frees up any\n     * underlying native resources. After calling this method, this buffer\n     * must not be used in any way ({@link #lockCanvas()} must not be called,\n     * etc.)\n     *\n     * @see #isDestroyed()\n     ",
    "links" : [ "#lockCanvas()" ]
  }, {
    "name" : "public boolean isDestroyed()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether this buffer has been destroyed. A destroyed buffer\n     * cannot be used in any way: locking a Canvas will return null, the buffer\n     * cannot be written to a parcel, etc.\n     *\n     * @return True if this <code>GraphicBuffer</code> is in a destroyed state,\n     *         false otherwise.\n     *\n     * @see #destroy()\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void finalize() throws Throwable",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "\n     * Flatten this object in to a Parcel.\n     *\n     * <p>Calling this method will throw an <code>IllegalStateException</code> if\n     * {@link #destroy()} has been previously called.</p>\n     *\n     * @param dest The Parcel in which the object should be written.\n     * @param flags Additional flags about how the object should be written.\n     *              May be 0 or {@link #PARCELABLE_WRITE_RETURN_VALUE}.\n     ",
    "links" : [ "#PARCELABLE_WRITE_RETURN_VALUE", "#destroy()" ]
  }, {
    "name" : "private static native long nCreateGraphicBuffer(int width, int height, int format, int usage)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nDestroyGraphicBuffer(long nativeObject)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nWriteGraphicBufferToParcel(long nativeObject, Parcel dest)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nReadGraphicBufferFromParcel(Parcel in)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nLockCanvas(long nativeObject, Canvas canvas, Rect dirty)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nUnlockCanvasAndPost(long nativeObject, Canvas canvas)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nWrapGraphicBuffer(long nativeObject)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native GraphicBuffer nCreateFromHardwareBuffer(HardwareBuffer buffer)",
    "returnType" : "GraphicBuffer",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "USAGE_SW_READ_NEVER", "USAGE_SW_READ_RARELY", "USAGE_SW_READ_OFTEN", "USAGE_SW_READ_MASK", "USAGE_SW_WRITE_NEVER", "USAGE_SW_WRITE_RARELY", "USAGE_SW_WRITE_OFTEN", "USAGE_SW_WRITE_MASK", "USAGE_SOFTWARE_MASK", "USAGE_PROTECTED", "USAGE_HW_TEXTURE", "USAGE_HW_RENDER", "USAGE_HW_2D", "USAGE_HW_COMPOSER", "USAGE_HW_VIDEO_ENCODER", "USAGE_HW_MASK", "mWidth", "mHeight", "mFormat", "mUsage", "mNativeObject", "mCanvas", "mSaveCount", "mDestroyed", "CREATOR" ],
  "methodNames" : [ "public static GraphicBuffer create(int width, int height, int format, int usage)", "public static GraphicBuffer createFromExisting(int width, int height, int format, int usage, long unwrappedNativeObject)", "public static final GraphicBuffer createFromHardwareBuffer(HardwareBuffer buffer)", "public int getWidth()", "public int getHeight()", "public int getFormat()", "public int getUsage()", "public Canvas lockCanvas()", "public Canvas lockCanvas(Rect dirty)", "public void unlockCanvasAndPost(Canvas canvas)", "public void destroy()", "public boolean isDestroyed()", "protected void finalize() throws Throwable", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)", "private static native long nCreateGraphicBuffer(int width, int height, int format, int usage)", "private static native void nDestroyGraphicBuffer(long nativeObject)", "private static native void nWriteGraphicBufferToParcel(long nativeObject, Parcel dest)", "private static native long nReadGraphicBufferFromParcel(Parcel in)", "private static native boolean nLockCanvas(long nativeObject, Canvas canvas, Rect dirty)", "private static native boolean nUnlockCanvasAndPost(long nativeObject, Canvas canvas)", "private static native long nWrapGraphicBuffer(long nativeObject)", "private static native GraphicBuffer nCreateFromHardwareBuffer(HardwareBuffer buffer)" ]
}