{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/telephony/PhoneCapability.java",
  "packageName" : "android.telephony",
  "className" : "PhoneCapability",
  "comment" : "\n * Phone capability which describes the data connection capability of modem.\n * It's used to evaluate possible phone config change, for example from single\n * SIM device to multi-SIM device.\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "DEFAULT_DSDS_CAPABILITY",
    "type" : "PhoneCapability",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_SSSS_CAPABILITY",
    "type" : "PhoneCapability",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_NR_CAPABILITY_NSA",
    "type" : "int",
    "comment" : "\n     * Indicates DEVICE_NR_CAPABILITY_NSA determine that the device enable the non-standalone\n     * (NSA) mode of 5G NR.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_NR_CAPABILITY_SA",
    "type" : "int",
    "comment" : "\n     * Indicates DEVICE_NR_CAPABILITY_SA determine that the device enable the standalone (SA)\n     * mode of 5G NR.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mMaxActiveVoiceSubscriptions",
    "type" : "int",
    "comment" : "\n     * mMaxActiveVoiceSubscriptions defines the maximum subscriptions that can support\n     * simultaneous voice calls. For a dual sim dual standby (DSDS) device it would be one, but\n     * for a dual sim dual active (DSDA) device, or a DSDS device that supports \"virtual DSDA\" (\n     * using the data line of 1 SIM to temporarily provide IMS voice connectivity to the other SIM)\n     * it would be 2.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mMaxActiveDataSubscriptions",
    "type" : "int",
    "comment" : "\n     * mMaxActiveDataSubscriptions defines the maximum subscriptions that can support\n     * simultaneous data connections.\n     * For example, for dual sim dual active L+L device it should be 2.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mNetworkValidationBeforeSwitchSupported",
    "type" : "boolean",
    "comment" : "\n     * Whether modem supports both internet PDN up so\n     * that we can do ping test before tearing down the\n     * other one.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mLogicalModemList",
    "type" : "List<ModemInfo>",
    "comment" : "\n     * List of logical modem information.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mDeviceNrCapabilities",
    "type" : "int[]",
    "comment" : "\n     * Device NR capabilities.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<PhoneCapability>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "\n     * {@link Parcelable#describeContents}\n     ",
    "links" : [ "android.os.Parcelable#describeContents" ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel dest, @Parcelable.WriteFlags int flags)",
    "returnType" : "void",
    "comment" : "\n     * {@link Parcelable#writeToParcel}\n     ",
    "links" : [ "android.os.Parcelable#writeToParcel" ]
  }, {
    "name" : "public int getMaxActiveVoiceSubscriptions()",
    "returnType" : "int",
    "comment" : "\n     * @return the maximum subscriptions that can support simultaneous voice calls. For a dual\n     * sim dual standby (DSDS) device it would be one, but for a dual sim dual active device it\n     * would be 2.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getMaxActiveDataSubscriptions()",
    "returnType" : "int",
    "comment" : "\n     * @return the maximum subscriptions that can support simultaneous data connections.\n     * For example, for L+L device it should be 2.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isNetworkValidationBeforeSwitchSupported()",
    "returnType" : "boolean",
    "comment" : "\n     * @return Check whether the Citizens Broadband Radio Service(CBRS) network validation before\n     * CBRS switch is supported or not.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<ModemInfo> getLogicalModemList()",
    "returnType" : "List<ModemInfo>",
    "comment" : "\n     * @return The list of logical modem information.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int[] getDeviceNrCapabilities()",
    "returnType" : "int[]",
    "comment" : "\n     * Return List of the device's NR capability. If the device doesn't support NR capability,\n     * then this api return empty array.\n     * @see DEVICE_NR_CAPABILITY_NSA\n     * @see DEVICE_NR_CAPABILITY_SA\n     *\n     * @return List of the device's NR capability.\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public String toString()", "public int hashCode()", "public boolean equals(Object o)", "public int describeContents()", "public void writeToParcel(@NonNull Parcel dest, @Parcelable.WriteFlags int flags)", "public int getMaxActiveVoiceSubscriptions()", "public int getMaxActiveDataSubscriptions()", "public boolean isNetworkValidationBeforeSwitchSupported()", "public List<ModemInfo> getLogicalModemList()", "public int[] getDeviceNrCapabilities()" ],
  "variableNames" : [ "DEFAULT_DSDS_CAPABILITY", "DEFAULT_SSSS_CAPABILITY", "DEVICE_NR_CAPABILITY_NSA", "DEVICE_NR_CAPABILITY_SA", "mMaxActiveVoiceSubscriptions", "mMaxActiveDataSubscriptions", "mNetworkValidationBeforeSwitchSupported", "mLogicalModemList", "mDeviceNrCapabilities", "CREATOR" ]
}