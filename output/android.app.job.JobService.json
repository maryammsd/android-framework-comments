{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/job/JobService.java",
  "packageName" : "android.app.job",
  "className" : "JobService",
  "comment" : "\n * <p>Entry point for the callback from the {@link android.app.job.JobScheduler}.</p>\n * <p>This is the base class that handles asynchronous requests that were previously scheduled. You\n * are responsible for overriding {@link JobService#onStartJob(JobParameters)}, which is where\n * you will implement your job logic.</p>\n * <p>This service executes each incoming job on a {@link android.os.Handler} running on your\n * application's main thread. This means that you <b>must</b> offload your execution logic to\n * another thread/handler/{@link android.os.AsyncTask} of your choosing. Not doing so will result\n * in blocking any future callbacks from the JobScheduler - specifically\n * {@link #onStopJob(android.app.job.JobParameters)}, which is meant to inform you that the\n * scheduling requirements are no longer being met.</p>\n *\n * <p class=\"note\">\n * Since the introduction of JobScheduler, if an app did not return from\n * {@link #onStartJob(JobParameters)} within several seconds, JobScheduler would consider the app\n * unresponsive and clean up job execution. In such cases, the app was no longer considered\n * to be running a job and therefore did not have any of the job lifecycle guarantees outlined\n * in {@link JobScheduler}. However, prior to Android version\n * {@link android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE}, the failure and cleanup were silent\n * and apps had no indication that they no longer had job lifecycle guarantees.\n * Starting with Android version {@link android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE},\n * JobScheduler will explicitly trigger an ANR in such cases so that apps and developers\n * can be aware of the issue.\n * Similar behavior applies to the return time from {@link #onStopJob(JobParameters)} as well.\n * <br /> <br />\n * If you see ANRs, then the app may be doing too much work on the UI thread. Ensure that\n * potentially long operations are moved to a worker thread.\n *\n * <p>As a subclass of {@link Service}, there will only be one active instance of any JobService\n * subclasses, regardless of job ID. This means that if you schedule multiple jobs with different\n * job IDs but using the same JobService class, that JobService may receive multiple calls to\n * {@link #onStartJob(JobParameters)} and {@link #onStopJob(JobParameters)}, with each call being\n * for the separate jobs.</p>\n ",
  "links" : [ "#onStopJob(android.app.job.JobParameters)", "#onStopJob(JobParameters)", "android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE", "android.os.AsyncTask", "android.app.job.JobScheduler", "android.os.Handler", "android.app.Service", "#onStartJob(JobParameters)", "android.app.job.JobService#onStartJob(JobParameters)" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PERMISSION_BIND",
    "type" : "String",
    "comment" : "\n     * Job services must be protected with this permission:\n     *\n     * <pre class=\"prettyprint\">\n     *     &#60;service android:name=\"MyJobService\"\n     *              android:permission=\"android.permission.BIND_JOB_SERVICE\" &#62;\n     *         ...\n     *     &#60;/service&#62;\n     * </pre>\n     *\n     * <p>If a job service is declared in the manifest but not protected with this\n     * permission, that service will be ignored by the system.\n     ",
    "links" : [ ]
  }, {
    "name" : "JOB_END_NOTIFICATION_POLICY_DETACH",
    "type" : "int",
    "comment" : "\n     * Detach the notification supplied to\n     * {@link #setNotification(JobParameters, int, Notification, int)} when the job ends.\n     * The notification will remain shown even after JobScheduler stops the job.\n     ",
    "links" : [ "#setNotification(JobParameters" ]
  }, {
    "name" : "JOB_END_NOTIFICATION_POLICY_REMOVE",
    "type" : "int",
    "comment" : "\n     * Cancel and remove the notification supplied to\n     * {@link #setNotification(JobParameters, int, Notification, int)} when the job ends.\n     * The notification will be removed from the notification shade.\n     ",
    "links" : [ "#setNotification(JobParameters" ]
  }, {
    "name" : "mEngine",
    "type" : "JobServiceEngine",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final IBinder onBind(Intent intent)",
    "returnType" : "IBinder",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public final void jobFinished(JobParameters params, boolean wantsReschedule)",
    "returnType" : "void",
    "comment" : "\n     * Call this to inform the JobScheduler that the job has finished its work.  When the\n     * system receives this message, it releases the wakelock being held for the job.\n     * This does not need to be called if {@link #onStopJob(JobParameters)} has been called.\n     * <p>\n     * You can request that the job be scheduled again by passing {@code true} as\n     * the <code>wantsReschedule</code> parameter. This will apply back-off policy\n     * for the job; this policy can be adjusted through the\n     * {@link android.app.job.JobInfo.Builder#setBackoffCriteria(long, int)} method\n     * when the job is originally scheduled.  The job's initial\n     * requirements are preserved when jobs are rescheduled, regardless of backed-off\n     * policy.\n     * <p class=\"note\">\n     * A job running while the device is dozing will not be rescheduled with the normal back-off\n     * policy.  Instead, the job will be re-added to the queue and executed again during\n     * a future idle maintenance window.\n     * </p>\n     *\n     * <p class=\"note\">\n     * Any {@link JobInfo.Builder#setUserInitiated(boolean) user-initiated job}\n     * cannot be rescheduled when the user has asked to stop the app\n     * via a system provided affordance (such as the Task Manager).\n     * In such situations, the value of {@code wantsReschedule} is always treated as {@code false}.\n     *\n     * @param params The parameters identifying this job, as supplied to\n     *               the job in the {@link #onStartJob(JobParameters)} callback.\n     * @param wantsReschedule {@code true} if this job should be rescheduled according\n     *     to the back-off criteria specified when it was first scheduled; {@code false}\n     *     otherwise. When {@code false} is returned for a periodic job,\n     *     the job will be rescheduled according to its periodic policy.\n     ",
    "links" : [ "#onStopJob(JobParameters)", "#onStartJob(JobParameters)", "android.app.job.JobInfo.Builder#setBackoffCriteria(long", "JobInfo.Builder#setUserInitiated(boolean)" ]
  }, {
    "name" : "public abstract boolean onStartJob(JobParameters params)",
    "returnType" : "boolean",
    "comment" : "\n     * Called to indicate that the job has begun executing.  Override this method with the\n     * logic for your job.  Like all other component lifecycle callbacks, this method executes\n     * on your application's main thread.\n     * <p>\n     * Return {@code true} from this method if your job needs to continue running.  If you\n     * do this, the job remains active until you call\n     * {@link #jobFinished(JobParameters, boolean)} to tell the system that it has completed\n     * its work, or until the job's required constraints are no longer satisfied.  For\n     * example, if the job was scheduled using\n     * {@link JobInfo.Builder#setRequiresCharging(boolean) setRequiresCharging(true)},\n     * it will be immediately halted by the system if the user unplugs the device from power,\n     * the job's {@link #onStopJob(JobParameters)} callback will be invoked, and the app\n     * will be expected to shut down all ongoing work connected with that job.\n     * <p>\n     * The system holds a wakelock on behalf of your app as long as your job is executing.\n     * This wakelock is acquired before this method is invoked, and is not released until either\n     * you call {@link #jobFinished(JobParameters, boolean)}, or after the system invokes\n     * {@link #onStopJob(JobParameters)} to notify your job that it is being shut down\n     * prematurely.\n     * <p>\n     * Returning {@code false} from this method means your job is already finished.  The\n     * system's wakelock for the job will be released, and {@link #onStopJob(JobParameters)}\n     * will not be invoked.\n     *\n     * @param params Parameters specifying info about this job, including the optional\n     *     extras configured with {@link JobInfo.Builder#setExtras(android.os.PersistableBundle)}.\n     *     This object serves to identify this specific running job instance when calling\n     *     {@link #jobFinished(JobParameters, boolean)}.\n     * @return {@code true} if your service will continue running, using a separate thread\n     *     when appropriate.  {@code false} means that this job has completed its work.\n     ",
    "links" : [ "#jobFinished(JobParameters", "#onStopJob(JobParameters)", "JobInfo.Builder#setExtras(android.os.PersistableBundle)", "JobInfo.Builder#setRequiresCharging(boolean)" ]
  }, {
    "name" : "public abstract boolean onStopJob(JobParameters params)",
    "returnType" : "boolean",
    "comment" : "\n     * This method is called if the system has determined that you must stop execution of your job\n     * even before you've had a chance to call {@link #jobFinished(JobParameters, boolean)}.\n     * Once this method is called, you no longer need to call\n     * {@link #jobFinished(JobParameters, boolean)}.\n     *\n     * <p>This may happen if the requirements specified at schedule time are no longer met. For\n     * example you may have requested WiFi with\n     * {@link android.app.job.JobInfo.Builder#setRequiredNetworkType(int)}, yet while your\n     * job was executing the user toggled WiFi. Another example is if you had specified\n     * {@link android.app.job.JobInfo.Builder#setRequiresDeviceIdle(boolean)}, and the phone left\n     * its idle state. There are many other reasons a job can be stopped early besides\n     * constraints no longer being satisfied. {@link JobParameters#getStopReason()} will return the\n     * reason this method was called. You are solely responsible for the behavior of your\n     * application upon receipt of this message; your app will likely start to misbehave if you\n     * ignore it.\n     * <p>\n     * Once this method returns (or times out), the system releases the wakelock that it is holding\n     * on behalf of the job.</p>\n     *\n     * <p class=\"note\">\n     * Any {@link JobInfo.Builder#setUserInitiated(boolean) user-initiated job}\n     * cannot be rescheduled when stopped by the user via a system provided affordance (such as\n     * the Task Manager). In such situations, the returned value from this method call is always\n     * treated as {@code false}.\n     *\n     * <p class=\"caution\"><strong>Note:</strong> When a job is stopped and rescheduled via this\n     * method call, the deadline constraint is excluded from the rescheduled job's constraint set.\n     * The rescheduled job will run again once all remaining constraints are satisfied.\n     *\n     * @param params The parameters identifying this job, similar to what was supplied to the job in\n     *               the {@link #onStartJob(JobParameters)} callback, but with the stop reason\n     *               included.\n     * @return {@code true} to indicate to the JobScheduler whether you'd like to reschedule\n     * this job based on the retry criteria provided at job creation-time; or {@code false}\n     * to end the job entirely (or, for a periodic job, to reschedule it according to its\n     * requested periodic criteria). Regardless of the value returned, your job must stop executing.\n     ",
    "links" : [ "#jobFinished(JobParameters", "android.app.job.JobParameters#getStopReason()", "#onStartJob(JobParameters)", "android.app.job.JobInfo.Builder#setRequiresDeviceIdle(boolean)", "android.app.job.JobInfo.Builder#setRequiredNetworkType(int)", "JobInfo.Builder#setUserInitiated(boolean)" ]
  }, {
    "name" : "public void onNetworkChanged(@NonNull JobParameters params)",
    "returnType" : "void",
    "comment" : "\n     * This method is called that for a job that has a network constraint when the network\n     * to be used by the job changes. The new network object will be available via\n     * {@link JobParameters#getNetwork()}. Any network that results in this method call will\n     * match the job's requested network constraints.\n     *\n     * <p>\n     * For example, if a device is on a metered mobile network and then connects to an\n     * unmetered WiFi network, and the job has indicated that both networks satisfy its\n     * network constraint, then this method will be called to notify the job of the new\n     * unmetered WiFi network.\n     *\n     * @param params The parameters identifying this job, similar to what was supplied to the job in\n     *               the {@link #onStartJob(JobParameters)} callback, but with an updated network.\n     * @see JobInfo.Builder#setRequiredNetwork(android.net.NetworkRequest)\n     * @see JobInfo.Builder#setRequiredNetworkType(int)\n     ",
    "links" : [ "android.app.job.JobParameters#getNetwork()", "#onStartJob(JobParameters)" ]
  }, {
    "name" : "public final void updateEstimatedNetworkBytes(@NonNull JobParameters params, @BytesLong long downloadBytes, @BytesLong long uploadBytes)",
    "returnType" : "void",
    "comment" : "\n     * Update the amount of data this job is estimated to transfer after the job has started.\n     *\n     * @see JobInfo.Builder#setEstimatedNetworkBytes(long, long)\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void updateEstimatedNetworkBytes(@NonNull JobParameters params, @NonNull JobWorkItem jobWorkItem, @BytesLong long downloadBytes, @BytesLong long uploadBytes)",
    "returnType" : "void",
    "comment" : "\n     * Update the amount of data this JobWorkItem is estimated to transfer after the job has\n     * started.\n     *\n     * @see JobInfo.Builder#setEstimatedNetworkBytes(long, long)\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void updateTransferredNetworkBytes(@NonNull JobParameters params, @BytesLong long transferredDownloadBytes, @BytesLong long transferredUploadBytes)",
    "returnType" : "void",
    "comment" : "\n     * Tell JobScheduler how much data has successfully been transferred for the data transfer job.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void updateTransferredNetworkBytes(@NonNull JobParameters params, @NonNull JobWorkItem item, @BytesLong long transferredDownloadBytes, @BytesLong long transferredUploadBytes)",
    "returnType" : "void",
    "comment" : "\n     * Tell JobScheduler how much data has been transferred for the data transfer\n     * {@link JobWorkItem}.\n     ",
    "links" : [ "android.app.job.JobWorkItem" ]
  }, {
    "name" : "public long getTransferredDownloadBytes(@NonNull JobParameters params)",
    "returnType" : "long",
    "comment" : " TODO(255371817): specify the actual time JS will wait for progress before requesting",
    "links" : [ ]
  }, {
    "name" : "public long getTransferredUploadBytes(@NonNull JobParameters params)",
    "returnType" : "long",
    "comment" : " TODO(255371817): specify the actual time JS will wait for progress before requesting",
    "links" : [ ]
  }, {
    "name" : "public long getTransferredDownloadBytes(@NonNull JobParameters params, @NonNull JobWorkItem item)",
    "returnType" : "long",
    "comment" : " TODO(255371817): specify the actual time JS will wait for progress before requesting",
    "links" : [ ]
  }, {
    "name" : "public long getTransferredUploadBytes(@NonNull JobParameters params, @NonNull JobWorkItem item)",
    "returnType" : "long",
    "comment" : " TODO(255371817): specify the actual time JS will wait for progress before requesting",
    "links" : [ ]
  }, {
    "name" : "public final void setNotification(@NonNull JobParameters params, int notificationId, @NonNull Notification notification, @JobEndNotificationPolicy int jobEndNotificationPolicy)",
    "returnType" : "void",
    "comment" : "\n     * Provide JobScheduler with a notification to post and tie to this job's lifecycle.\n     * This is only required for those user-initiated jobs which return {@code true} via\n     * {@link JobParameters#isUserInitiatedJob()}.\n     * If the app does not call this method for a required notification within\n     * 10 seconds after {@link #onStartJob(JobParameters)} is called,\n     * the system will trigger an ANR and stop this job.\n     *\n     * The notification must provide an accurate description of the work that the job is doing\n     * and, if possible, the state of the work.\n     *\n     * <p>\n     * Note that certain types of jobs\n     * (e.g. {@link JobInfo.Builder#setEstimatedNetworkBytes(long, long) data transfer jobs})\n     * may require the notification to have certain characteristics\n     * and their documentation will state any such requirements.\n     *\n     * <p>\n     * JobScheduler will not remember this notification after the job has finished running,\n     * so apps must call this every time the job is started (if required or desired).\n     *\n     * <p>\n     * If separate jobs use the same notification ID with this API, the most recently provided\n     * notification will be shown to the user, and the\n     * {@code jobEndNotificationPolicy} of the last job to stop will be applied.\n     *\n     * @param params                   The parameters identifying this job, as supplied to\n     *                                 the job in the {@link #onStartJob(JobParameters)} callback.\n     * @param notificationId           The ID for this notification, as per\n     *                                 {@link android.app.NotificationManager#notify(int,\n     *                                 Notification)}.\n     * @param notification             The notification to be displayed.\n     * @param jobEndNotificationPolicy The policy to apply to the notification when the job stops.\n     ",
    "links" : [ "JobInfo.Builder#setEstimatedNetworkBytes(long", "#onStartJob(JobParameters)", "android.app.job.JobParameters#isUserInitiatedJob()", "android.app.NotificationManager#notify(int" ]
  } ],
  "methodNames" : [ "public final IBinder onBind(Intent intent)", "public final void jobFinished(JobParameters params, boolean wantsReschedule)", "public abstract boolean onStartJob(JobParameters params)", "public abstract boolean onStopJob(JobParameters params)", "public void onNetworkChanged(@NonNull JobParameters params)", "public final void updateEstimatedNetworkBytes(@NonNull JobParameters params, @BytesLong long downloadBytes, @BytesLong long uploadBytes)", "public final void updateEstimatedNetworkBytes(@NonNull JobParameters params, @NonNull JobWorkItem jobWorkItem, @BytesLong long downloadBytes, @BytesLong long uploadBytes)", "public final void updateTransferredNetworkBytes(@NonNull JobParameters params, @BytesLong long transferredDownloadBytes, @BytesLong long transferredUploadBytes)", "public final void updateTransferredNetworkBytes(@NonNull JobParameters params, @NonNull JobWorkItem item, @BytesLong long transferredDownloadBytes, @BytesLong long transferredUploadBytes)", "public long getTransferredDownloadBytes(@NonNull JobParameters params)", "public long getTransferredUploadBytes(@NonNull JobParameters params)", "public long getTransferredDownloadBytes(@NonNull JobParameters params, @NonNull JobWorkItem item)", "public long getTransferredUploadBytes(@NonNull JobParameters params, @NonNull JobWorkItem item)", "public final void setNotification(@NonNull JobParameters params, int notificationId, @NonNull Notification notification, @JobEndNotificationPolicy int jobEndNotificationPolicy)" ],
  "variableNames" : [ "TAG", "PERMISSION_BIND", "JOB_END_NOTIFICATION_POLICY_DETACH", "JOB_END_NOTIFICATION_POLICY_REMOVE", "mEngine" ]
}