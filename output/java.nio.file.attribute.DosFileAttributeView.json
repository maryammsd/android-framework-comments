{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/nio/file/attribute/DosFileAttributeView.java",
  "packageName" : "java.nio.file.attribute",
  "className" : "DosFileAttributeView",
  "comment" : "",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " String name()",
    "returnType" : "String",
    "comment" : "\n     * Returns the name of the attribute view. Attribute views of this type\n     * have the name {@code \"dos\"}.\n     ",
    "links" : [ ]
  }, {
    "name" : " DosFileAttributes readAttributes() throws IOException",
    "returnType" : "DosFileAttributes",
    "comment" : "\n     * @throws  IOException                             {@inheritDoc}\n     * @throws  SecurityException                       {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : " void setReadOnly(boolean value) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Updates the value of the read-only attribute.\n     *\n     * <p> It is implementation specific if the attribute can be updated as an\n     * atomic operation with respect to other file system operations. An\n     * implementation may, for example, require to read the existing value of\n     * the DOS attribute in order to update this attribute.\n     *\n     * @param   value\n     *          the new value of the attribute\n     *\n     * @throws  IOException\n     *          if an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default, and a security manager is installed,\n     *          its  {@link SecurityManager#checkWrite(String) checkWrite} method\n     *          is invoked to check write access to the file\n     ",
    "links" : [ "#checkWrite(String)" ]
  }, {
    "name" : " void setHidden(boolean value) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Updates the value of the hidden attribute.\n     *\n     * <p> It is implementation specific if the attribute can be updated as an\n     * atomic operation with respect to other file system operations. An\n     * implementation may, for example, require to read the existing value of\n     * the DOS attribute in order to update this attribute.\n     *\n     * @param   value\n     *          the new value of the attribute\n     *\n     * @throws  IOException\n     *          if an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default, and a security manager is installed,\n     *          its  {@link SecurityManager#checkWrite(String) checkWrite} method\n     *          is invoked to check write access to the file\n     ",
    "links" : [ "#checkWrite(String)" ]
  }, {
    "name" : " void setSystem(boolean value) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Updates the value of the system attribute.\n     *\n     * <p> It is implementation specific if the attribute can be updated as an\n     * atomic operation with respect to other file system operations. An\n     * implementation may, for example, require to read the existing value of\n     * the DOS attribute in order to update this attribute.\n     *\n     * @param   value\n     *          the new value of the attribute\n     *\n     * @throws  IOException\n     *          if an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default, and a security manager is installed,\n     *          its  {@link SecurityManager#checkWrite(String) checkWrite} method\n     *          is invoked to check write access to the file\n     ",
    "links" : [ "#checkWrite(String)" ]
  }, {
    "name" : " void setArchive(boolean value) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Updates the value of the archive attribute.\n     *\n     * <p> It is implementation specific if the attribute can be updated as an\n     * atomic operation with respect to other file system operations. An\n     * implementation may, for example, require to read the existing value of\n     * the DOS attribute in order to update this attribute.\n     *\n     * @param   value\n     *          the new value of the attribute\n     *\n     * @throws  IOException\n     *          if an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default, and a security manager is installed,\n     *          its  {@link SecurityManager#checkWrite(String) checkWrite} method\n     *          is invoked to check write access to the file\n     ",
    "links" : [ "#checkWrite(String)" ]
  } ],
  "methodNames" : [ " String name()", " DosFileAttributes readAttributes() throws IOException", " void setReadOnly(boolean value) throws IOException", " void setHidden(boolean value) throws IOException", " void setSystem(boolean value) throws IOException", " void setArchive(boolean value) throws IOException" ],
  "variableNames" : [ ]
}