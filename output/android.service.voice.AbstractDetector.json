{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/service/voice/AbstractDetector.java",
  "packageName" : "android.service.voice",
  "className" : "AbstractDetector",
  "comment" : " Base implementation of {@link HotwordDetector}.\n *\n * This class provides methods to manage the detector lifecycle for both\n * {@link HotwordDetectionService} and {@link VisualQueryDetectionService}. We keep the name of the\n * interface {@link HotwordDetector} since {@link VisualQueryDetectionService} can be logically\n * treated as a visual activation hotword detection and also because of the existing public\n * interface. To avoid confusion on the naming between the trusted hotword framework and the actual\n * isolated {@link HotwordDetectionService}, the hotword from the names is removed.\n ",
  "links" : [ "android.service.voice.HotwordDetectionService", "android.service.voice.VisualQueryDetectionService", "android.service.voice.HotwordDetector" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mManagerService",
    "type" : "IVoiceInteractionManagerService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExecutor",
    "type" : "Executor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallback",
    "type" : "HotwordDetector.Callback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnDestroyListener",
    "type" : "Consumer<AbstractDetector>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsDetectorActive",
    "type" : "AtomicBoolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mToken",
    "type" : "IBinder",
    "comment" : "\n     * A token which is used by voice interaction system service to identify different detectors.\n     ",
    "links" : [ ]
  }, {
    "name" : "IS_IDENTITY_WITH_ATTRIBUTION_TAG",
    "type" : "boolean",
    "comment" : "\n     * A flag controls whether attributionTag will be passed into the Identity.\n     * TODO(b/289087412): This flag will be converted and confirm to the trunk stable flag\n     * configuration.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " boolean isSameToken(IBinder token)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " abstract void initialize(@Nullable PersistableBundle options, @Nullable SharedMemory sharedMemory)",
    "returnType" : "void",
    "comment" : "\n     * Method to be called for the detector to ready/register itself with underlying system\n     * services.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean startRecognition(@NonNull ParcelFileDescriptor audioStream, @NonNull AudioFormat audioFormat, @Nullable PersistableBundle options)",
    "returnType" : "boolean",
    "comment" : "\n     * Detect from an externally supplied stream of data.\n     *\n     * @return {@code true} if the request to start recognition succeeded\n     ",
    "links" : [ ]
  }, {
    "name" : "public void updateState(@Nullable PersistableBundle options, @Nullable SharedMemory sharedMemory)",
    "returnType" : "void",
    "comment" : "\n     * Set configuration and pass read-only data to trusted detection service.\n     *\n     * @param options Application configuration data to provide to the\n     *         {@link VisualQueryDetectionService} and {@link HotwordDetectionService}.\n     *         PersistableBundle does not allow any remotable objects or other contents that can be\n     *         used to communicate with other processes.\n     * @param sharedMemory The unrestricted data blob to provide to the\n     *        {@link VisualQueryDetectionService} and {@link HotwordDetectionService}. Use this to\n     *         provide the hotword models data or other such data to the trusted process.\n     * @throws IllegalStateException if this {@link HotwordDetector} wasn't specified to use a\n     *         {@link HotwordDetectionService} or {@link VisualQueryDetectionService} when it was\n     *         created.\n     ",
    "links" : [ "android.service.voice.HotwordDetectionService", "android.service.voice.VisualQueryDetectionService", "android.service.voice.HotwordDetector" ]
  }, {
    "name" : "protected void initAndVerifyDetector(@Nullable PersistableBundle options, @Nullable SharedMemory sharedMemory, @NonNull IHotwordRecognitionStatusCallback callback, int detectorType, @Nullable String attributionTag)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void registerOnDestroyListener(Consumer<AbstractDetector> onDestroyListener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void destroy()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void throwIfDetectorIsNoLongerActive()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ " boolean isSameToken(IBinder token)", " abstract void initialize(@Nullable PersistableBundle options, @Nullable SharedMemory sharedMemory)", "public boolean startRecognition(@NonNull ParcelFileDescriptor audioStream, @NonNull AudioFormat audioFormat, @Nullable PersistableBundle options)", "public void updateState(@Nullable PersistableBundle options, @Nullable SharedMemory sharedMemory)", "protected void initAndVerifyDetector(@Nullable PersistableBundle options, @Nullable SharedMemory sharedMemory, @NonNull IHotwordRecognitionStatusCallback callback, int detectorType, @Nullable String attributionTag)", " void registerOnDestroyListener(Consumer<AbstractDetector> onDestroyListener)", "public void destroy()", "protected void throwIfDetectorIsNoLongerActive()" ],
  "variableNames" : [ "TAG", "DEBUG", "mLock", "mManagerService", "mExecutor", "mCallback", "mOnDestroyListener", "mIsDetectorActive", "mToken", "IS_IDENTITY_WITH_ATTRIBUTION_TAG" ]
}