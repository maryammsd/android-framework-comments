{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/chromium/base/task/PostTask.java",
  "packageName" : "org.chromium.base.task",
  "className" : "PostTask",
  "comment" : "\n * Java interface to the native chromium scheduler.  Note tasks can be posted before native\n * initialization, but task prioritization is extremely limited. Once the native scheduler\n * is ready, tasks will be migrated over.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sPreNativeTaskRunnerLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sPreNativeTaskRunners",
    "type" : "List<TaskRunnerImpl>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sNativeInitialized",
    "type" : "boolean",
    "comment" : " other threads.",
    "links" : [ ]
  }, {
    "name" : "sPrenativeThreadPoolExecutor",
    "type" : "ChromeThreadPoolExecutor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sPrenativeThreadPoolExecutorForTesting",
    "type" : "Executor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sThreadPoolTaskExecutor",
    "type" : "ThreadPoolTaskExecutor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sUiThreadTaskExecutor",
    "type" : "UiThreadTaskExecutor",
    "comment" : " override the UI thread.",
    "links" : [ ]
  }, {
    "name" : "sTestIterationForTesting",
    "type" : "int",
    "comment" : " Used by AsyncTask / ChainedTask to auto-cancel tasks from prior tests.",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static TaskRunner createTaskRunner(@TaskTraits int taskTraits)",
    "returnType" : "TaskRunner",
    "comment" : "\n     * @param traits The TaskTraits that describe the desired TaskRunner.\n     * @return The TaskRunner for the specified TaskTraits.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static SequencedTaskRunner createSequencedTaskRunner(@TaskTraits int taskTraits)",
    "returnType" : "SequencedTaskRunner",
    "comment" : "\n     * Creates and returns a SequencedTaskRunner. SequencedTaskRunners automatically destroy\n     * themselves, so the destroy() function is not required to be called.\n     * @param traits The TaskTraits that describe the desired TaskRunner.\n     * @return The TaskRunner for the specified TaskTraits.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static SingleThreadTaskRunner createSingleThreadTaskRunner(@TaskTraits int taskTraits)",
    "returnType" : "SingleThreadTaskRunner",
    "comment" : "\n     *\n     * @param traits The TaskTraits that describe the desired TaskRunner.\n     * @return The TaskRunner for the specified TaskTraits.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void postTask(@TaskTraits int taskTraits, Runnable task)",
    "returnType" : "void",
    "comment" : "\n     * @param taskTraits The TaskTraits that describe the desired TaskRunner.\n     * @param task The task to be run with the specified traits.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void postDelayedTask(@TaskTraits int taskTraits, Runnable task, long delay)",
    "returnType" : "void",
    "comment" : "\n     * @param taskTraits The TaskTraits that describe the desired TaskRunner.\n     * @param task The task to be run with the specified traits.\n     * @param delay The delay in milliseconds before the task can be run.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void runOrPostTask(@TaskTraits int taskTraits, Runnable task)",
    "returnType" : "void",
    "comment" : "\n     * This function executes the task immediately if the current thread is the\n     * same as the one corresponding to the SingleThreadTaskRunner, otherwise it\n     * posts it.\n     *\n     * It should be executed only for tasks with traits corresponding to\n     * executors backed by a SingleThreadTaskRunner, like TaskTraits.UI_*.\n     *\n     * Use this only for trivial tasks as it ignores task priorities.\n     *\n     * @param taskTraits The TaskTraits that describe the desired TaskRunner.\n     * @param task The task to be run with the specified traits.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean canRunTaskImmediately(@TaskTraits int taskTraits)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the task can be executed immediately (i.e. the current thread is the same as\n     * the one corresponding to the SingleThreadTaskRunner)\n     ",
    "links" : [ ]
  }, {
    "name" : "public static T runSynchronously(@TaskTraits int taskTraits, Callable<T> c)",
    "returnType" : "T",
    "comment" : "\n     * This function executes the task immediately if the current thread is the\n     * same as the one corresponding to the SingleThreadTaskRunner, otherwise it\n     * posts it and blocks until the task finishes.\n     *\n     * It should be executed only for tasks with traits corresponding to\n     * executors backed by a SingleThreadTaskRunner, like TaskTraits.UI_*.\n     *\n     * Use this only for trivial tasks as it ignores task priorities.\n     *\n     * Note that non-test usage of this function is heavily discouraged. For non-tests, use\n     * callbacks rather than blocking threads.\n     *\n     * @param taskTraits The TaskTraits that describe the desired TaskRunner.\n     * @param task The task to be run with the specified traits.\n     * @return The result of the callable\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void runSynchronously(@TaskTraits int taskTraits, Runnable r)",
    "returnType" : "void",
    "comment" : "\n     * This function executes the task immediately if the current thread is the\n     * same as the one corresponding to the SingleThreadTaskRunner, otherwise it\n     * posts it and blocks until the task finishes.\n     *\n     * It should be executed only for tasks with traits corresponding to\n     * executors backed by a SingleThreadTaskRunner, like TaskTraits.UI_*.\n     *\n     * Use this only for trivial tasks as it ignores task priorities.\n     *\n     * Note that non-test usage of this function is heavily discouraged. For non-tests, use\n     * callbacks rather than blocking threads.\n     *\n     * @param taskTraits The TaskTraits that describe the desired TaskRunner.\n     * @param task The task to be run with the specified traits.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static T runSynchronouslyInternal(@TaskTraits int taskTraits, FutureTask<T> task)",
    "returnType" : "T",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void setPrenativeThreadPoolExecutorForTesting(Executor executor)",
    "returnType" : "void",
    "comment" : "\n     * Lets a test override the pre-native thread pool executor.\n     *\n     * @param executor The Executor to use for pre-native thread pool tasks.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void resetPrenativeThreadPoolExecutorForTesting()",
    "returnType" : "void",
    "comment" : " Clears an override set by setPrenativeThreadPoolExecutorOverrideForTesting. ",
    "links" : [ ]
  }, {
    "name" : " static Executor getPrenativeThreadPoolExecutor()",
    "returnType" : "Executor",
    "comment" : "\n     * @return The current Executor that PrenativeThreadPool tasks should run on.\n     ",
    "links" : [ ]
  }, {
    "name" : " static boolean registerPreNativeTaskRunner(TaskRunnerImpl taskRunner)",
    "returnType" : "boolean",
    "comment" : "\n     * Called by every TaskRunnerImpl on its creation, attempts to register this TaskRunner as\n     * pre-native, unless the native scheduler has been initialized already, and informs the caller\n     * about the outcome.\n     *\n     * @param taskRunner The TaskRunnerImpl to be registered.\n     * @return If the taskRunner got registered as pre-native.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static TaskExecutor getTaskExecutorForTraits(@TaskTraits int traits)",
    "returnType" : "TaskExecutor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void onNativeSchedulerReady()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void flushJobsAndResetForTesting() throws InterruptedException",
    "returnType" : "void",
    "comment" : " Drops all queued pre-native tasks. ",
    "links" : [ ]
  }, {
    "name" : "public static void onUiThreadReady(Handler uiThreadHandler)",
    "returnType" : "void",
    "comment" : " Called once when the UI thread has been initialized ",
    "links" : [ ]
  }, {
    "name" : "public static void resetUiThreadForTesting()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static TaskRunner createTaskRunner(@TaskTraits int taskTraits)", "public static SequencedTaskRunner createSequencedTaskRunner(@TaskTraits int taskTraits)", "public static SingleThreadTaskRunner createSingleThreadTaskRunner(@TaskTraits int taskTraits)", "public static void postTask(@TaskTraits int taskTraits, Runnable task)", "public static void postDelayedTask(@TaskTraits int taskTraits, Runnable task, long delay)", "public static void runOrPostTask(@TaskTraits int taskTraits, Runnable task)", "public static boolean canRunTaskImmediately(@TaskTraits int taskTraits)", "public static T runSynchronously(@TaskTraits int taskTraits, Callable<T> c)", "public static void runSynchronously(@TaskTraits int taskTraits, Runnable r)", "private static T runSynchronouslyInternal(@TaskTraits int taskTraits, FutureTask<T> task)", "public static void setPrenativeThreadPoolExecutorForTesting(Executor executor)", "public static void resetPrenativeThreadPoolExecutorForTesting()", " static Executor getPrenativeThreadPoolExecutor()", " static boolean registerPreNativeTaskRunner(TaskRunnerImpl taskRunner)", "private static TaskExecutor getTaskExecutorForTraits(@TaskTraits int traits)", "private static void onNativeSchedulerReady()", "public static void flushJobsAndResetForTesting() throws InterruptedException", "public static void onUiThreadReady(Handler uiThreadHandler)", "public static void resetUiThreadForTesting()" ],
  "variableNames" : [ "TAG", "sPreNativeTaskRunnerLock", "sPreNativeTaskRunners", "sNativeInitialized", "sPrenativeThreadPoolExecutor", "sPrenativeThreadPoolExecutorForTesting", "sThreadPoolTaskExecutor", "sUiThreadTaskExecutor", "sTestIterationForTesting" ]
}