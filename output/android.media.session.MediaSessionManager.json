{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/session/MediaSessionManager.java",
  "packageName" : "android.media.session",
  "className" : "MediaSessionManager",
  "comment" : "  b/149006225 is fixed.",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RESULT_MEDIA_KEY_NOT_HANDLED",
    "type" : "int",
    "comment" : "\n     * Used to indicate that the media key event isn't handled.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RESULT_MEDIA_KEY_HANDLED",
    "type" : "int",
    "comment" : "\n     * Used to indicate that the media key event is handled.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "ISessionManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCommunicationManager",
    "type" : "MediaCommunicationManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnMediaKeyEventDispatchedListenerStub",
    "type" : "OnMediaKeyEventDispatchedListenerStub",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnMediaKeyEventSessionChangedListenerStub",
    "type" : "OnMediaKeyEventSessionChangedListenerStub",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRemoteSessionCallbackStub",
    "type" : "RemoteSessionCallbackStub",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mListeners",
    "type" : "ArrayMap<OnActiveSessionsChangedListener, SessionsChangedWrapper>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSession2TokensListeners",
    "type" : "ArrayMap<OnSession2TokensChangedListener, Session2TokensChangedWrapper>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnMediaKeyEventDispatchedListeners",
    "type" : "Map<OnMediaKeyEventDispatchedListener, Executor>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMediaKeyEventSessionChangedCallbacks",
    "type" : "Map<OnMediaKeyEventSessionChangedListener, Executor>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCurMediaKeyEventSessionPackage",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCurMediaKeyEventSession",
    "type" : "MediaSession.Token",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRemoteSessionCallbacks",
    "type" : "Map<RemoteSessionCallback, Executor>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnVolumeKeyLongPressListener",
    "type" : "OnVolumeKeyLongPressListenerImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnMediaKeyListener",
    "type" : "OnMediaKeyListenerImpl",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public ISession createSession(@NonNull MediaSession.CallbackStub cbStub, @NonNull String tag, @Nullable Bundle sessionInfo)",
    "returnType" : "ISession",
    "comment" : "\n     * Create a new session in the system and get the binder for it.\n     *\n     * @param tag A short name for debugging purposes.\n     * @param sessionInfo A bundle for additional information about this session.\n     * @return The binder object from the system\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void notifySession2Created(@NonNull Session2Token token)",
    "returnType" : "void",
    "comment" : "\n     * This API is not generally intended for third party application developers.\n     * Use the <a href=\"{@docRoot}jetpack/androidx.html\">AndroidX</a>\n     * <a href=\"{@docRoot}reference/androidx/media2/session/package-summary.html\">Media2 session\n     * Library</a> for consistent behavior across all devices.\n     * <p>\n     * Notifies that a new {@link MediaSession2} with type {@link Session2Token#TYPE_SESSION} is\n     * created.\n     * <p>\n     * Do not use this API directly, but create a new instance through the\n     * {@link MediaSession2.Builder} instead.\n     *\n     * @param token newly created session2 token\n     * @deprecated Don't use this method. A new media session is notified automatically.\n     ",
    "links" : [ "MediaSession2.Builder", "android.media.MediaSession2", "android.media.Session2Token#TYPE_SESSION" ]
  }, {
    "name" : "public List<MediaController> getActiveSessions(@Nullable ComponentName notificationListener)",
    "returnType" : "List<MediaController>",
    "comment" : "\n     * Get a list of controllers for all ongoing sessions. The controllers will\n     * be provided in priority order with the most important controller at index\n     * 0.\n     * <p>\n     * This requires the {@link android.Manifest.permission#MEDIA_CONTENT_CONTROL}\n     * permission be held by the calling app. You may also retrieve this list if\n     * your app is an enabled notification listener using the\n     * {@link NotificationListenerService} APIs, in which case you must pass the\n     * {@link ComponentName} of your enabled listener.\n     *\n     * @param notificationListener The enabled notification listener component.\n     *            May be null.\n     * @return A list of controllers for ongoing sessions.\n     ",
    "links" : [ "android.content.ComponentName", "android.service.notification.NotificationListenerService", "android.Manifest.permission#MEDIA_CONTENT_CONTROL" ]
  }, {
    "name" : "public MediaSession.Token getMediaKeyEventSession()",
    "returnType" : "MediaSession.Token",
    "comment" : "\n     * Gets the media key event session, which would receive a media key event unless specified.\n     * <p>\n     * This requires the {@link android.Manifest.permission#MEDIA_CONTENT_CONTROL}\n     * permission be held by the calling app, or the app has an enabled notification listener\n     * using the {@link NotificationListenerService} APIs. If none of them applies, it will throw\n     * a {@link SecurityException}.\n     *\n     * @return The media key event session, which would receive key events by default, unless\n     *          the caller has specified the target. Can be {@code null}.\n     ",
    "links" : [ "android.service.notification.NotificationListenerService", "android.Manifest.permission#MEDIA_CONTENT_CONTROL", "SecurityException" ]
  }, {
    "name" : "public String getMediaKeyEventSessionPackageName()",
    "returnType" : "String",
    "comment" : "\n     * Gets the package name of the media key event session.\n     * <p>\n     * This requires the {@link android.Manifest.permission#MEDIA_CONTENT_CONTROL}\n     * permission be held by the calling app, or the app has an enabled notification listener\n     * using the {@link NotificationListenerService} APIs. If none of them applies, it will throw\n     * a {@link SecurityException}.\n     *\n     * @return The package name of the media key event session or the last session's media button\n     *          receiver if the media key event session is {@code null}. Returns an empty string\n     *          if neither of them exists.\n     * @see #getMediaKeyEventSession()\n     ",
    "links" : [ "android.service.notification.NotificationListenerService", "android.Manifest.permission#MEDIA_CONTENT_CONTROL", "SecurityException" ]
  }, {
    "name" : "public List<MediaController> getActiveSessionsForUser(@Nullable ComponentName notificationListener, @NonNull UserHandle userHandle)",
    "returnType" : "List<MediaController>",
    "comment" : "\n     * Get active sessions for the given user.\n     * <p>\n     * This requires the {@link android.Manifest.permission#MEDIA_CONTENT_CONTROL} permission be\n     * held by the calling app. You may also retrieve this list if your app is an enabled\n     * notification listener using the {@link NotificationListenerService} APIs, in which case you\n     * must pass the {@link ComponentName} of your enabled listener.\n     * <p>\n     * The calling application needs to hold the\n     * {@link android.Manifest.permission#INTERACT_ACROSS_USERS_FULL} permission in order to\n     * retrieve sessions for user ids that do not belong to current process.\n     *\n     * @param notificationListener The enabled notification listener component. May be null.\n     * @param userHandle The user handle to fetch sessions for.\n     * @return A list of controllers for ongoing sessions.\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission#INTERACT_ACROSS_USERS_FULL", "android.content.ComponentName", "android.service.notification.NotificationListenerService", "android.Manifest.permission#MEDIA_CONTENT_CONTROL" ]
  }, {
    "name" : "private List<MediaController> getActiveSessionsForUser(ComponentName notificationListener, int userId)",
    "returnType" : "List<MediaController>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<Session2Token> getSession2Tokens()",
    "returnType" : "List<Session2Token>",
    "comment" : "\n     * This API is not generally intended for third party application developers.\n     * Use the <a href=\"{@docRoot}jetpack/androidx.html\">AndroidX</a>\n     * <a href=\"{@docRoot}reference/androidx/media2/session/package-summary.html\">Media2 session\n     * Library</a> for consistent behavior across all devices.\n     * <p>\n     * Gets a list of {@link Session2Token} with type {@link Session2Token#TYPE_SESSION} for the\n     * current user.\n     * <p>\n     * Although this API can be used without any restriction, each session owners can accept or\n     * reject your uses of {@link MediaSession2}.\n     *\n     * @return A list of {@link Session2Token}.\n     ",
    "links" : [ "android.media.Session2Token", "android.media.Session2Token#TYPE_SESSION", "android.media.MediaSession2" ]
  }, {
    "name" : "public void addOnActiveSessionsChangedListener(@NonNull OnActiveSessionsChangedListener sessionListener, @Nullable ComponentName notificationListener)",
    "returnType" : "void",
    "comment" : "\n     * Add a listener to be notified when the list of active sessions changes.\n     * <p>\n     * This requires the {@link android.Manifest.permission#MEDIA_CONTENT_CONTROL} permission be\n     * held by the calling app. You may also retrieve this list if your app is an enabled\n     * notificationlistener using the {@link NotificationListenerService} APIs, in which case you\n     * must pass the {@link ComponentName} of your enabled listener.\n     *\n     * @param sessionListener The listener to add.\n     * @param notificationListener The enabled notification listener component. May be null.\n     ",
    "links" : [ "android.content.ComponentName", "android.service.notification.NotificationListenerService", "android.Manifest.permission#MEDIA_CONTENT_CONTROL" ]
  }, {
    "name" : "public void addOnActiveSessionsChangedListener(@NonNull OnActiveSessionsChangedListener sessionListener, @Nullable ComponentName notificationListener, @Nullable Handler handler)",
    "returnType" : "void",
    "comment" : "\n     * Add a listener to be notified when the list of active sessions changes.\n     * <p>\n     * This requires the {@link android.Manifest.permission#MEDIA_CONTENT_CONTROL} permission be\n     * held by the calling app. You may also retrieve this list if your app is an enabled\n     * notification listener using the {@link NotificationListenerService} APIs, in which case you\n     * must pass the {@link ComponentName} of your enabled listener. Updates will be posted to the\n     * handler specified or to the caller's thread if the handler is null.\n     *\n     * @param sessionListener The listener to add.\n     * @param notificationListener The enabled notification listener component. May be null.\n     * @param handler The handler to post events to.\n     ",
    "links" : [ "android.content.ComponentName", "android.service.notification.NotificationListenerService", "android.Manifest.permission#MEDIA_CONTENT_CONTROL" ]
  }, {
    "name" : "public void addOnActiveSessionsChangedListener(@Nullable ComponentName notificationListener, @NonNull UserHandle userHandle, @NonNull Executor executor, @NonNull OnActiveSessionsChangedListener sessionListener)",
    "returnType" : "void",
    "comment" : "\n     * Add a listener to be notified when the list of active sessions changes.\n     * <p>\n     * This requires the {@link android.Manifest.permission#MEDIA_CONTENT_CONTROL} permission be\n     * held by the calling app. You may also retrieve this list if your app is an enabled\n     * notification listener using the {@link NotificationListenerService} APIs, in which case you\n     * must pass the {@link ComponentName} of your enabled listener. Updates will be posted to the\n     * handler specified or to the caller's thread if the handler is null.\n     * <p>\n     * The calling application needs to hold the\n     * {@link android.Manifest.permission#INTERACT_ACROSS_USERS_FULL} permission in order to\n     * add listeners for user ids that do not belong to current process.\n     *\n     * @param notificationListener The enabled notification listener component. May be null.\n     * @param userHandle The user handle to listen for changes on.\n     * @param executor The executor on which the listener should be invoked\n     * @param sessionListener The listener to add.\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission#INTERACT_ACROSS_USERS_FULL", "android.content.ComponentName", "android.service.notification.NotificationListenerService", "android.Manifest.permission#MEDIA_CONTENT_CONTROL" ]
  }, {
    "name" : "private void addOnActiveSessionsChangedListener(@NonNull OnActiveSessionsChangedListener sessionListener, @Nullable ComponentName notificationListener, int userId, @Nullable Executor executor)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeOnActiveSessionsChangedListener(@NonNull OnActiveSessionsChangedListener sessionListener)",
    "returnType" : "void",
    "comment" : "\n     * Stop receiving active sessions updates on the specified listener.\n     *\n     * @param sessionListener The listener to remove.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addOnSession2TokensChangedListener(@NonNull OnSession2TokensChangedListener listener)",
    "returnType" : "void",
    "comment" : "\n     * This API is not generally intended for third party application developers.\n     * Use the <a href=\"{@docRoot}jetpack/androidx.html\">AndroidX</a>\n     * <a href=\"{@docRoot}reference/androidx/media2/session/package-summary.html\">Media2 session\n     * Library</a> for consistent behavior across all devices.\n     * <p>\n     * Adds a listener to be notified when the {@link #getSession2Tokens()} changes.\n     *\n     * @param listener The listener to add\n     ",
    "links" : [ "#getSession2Tokens()" ]
  }, {
    "name" : "public void addOnSession2TokensChangedListener(@NonNull OnSession2TokensChangedListener listener, @NonNull Handler handler)",
    "returnType" : "void",
    "comment" : "\n     * This API is not generally intended for third party application developers.\n     * Use the <a href=\"{@docRoot}jetpack/androidx.html\">AndroidX</a>\n     * <a href=\"{@docRoot}reference/androidx/media2/session/package-summary.html\">Media2 session\n     * Library</a> for consistent behavior across all devices.\n     * <p>\n     * Adds a listener to be notified when the {@link #getSession2Tokens()} changes.\n     *\n     * @param listener The listener to add\n     * @param handler The handler to call listener on.\n     ",
    "links" : [ "#getSession2Tokens()" ]
  }, {
    "name" : "public void addOnSession2TokensChangedListener(@NonNull UserHandle userHandle, @NonNull OnSession2TokensChangedListener listener, @NonNull Executor executor)",
    "returnType" : "void",
    "comment" : "\n     * This API is not generally intended for third party application developers.\n     * Use the <a href=\"{@docRoot}jetpack/androidx.html\">AndroidX</a>\n     * <a href=\"{@docRoot}reference/androidx/media2/session/package-summary.html\">Media2 session\n     * Library</a> for consistent behavior across all devices.\n     * <p>\n     * Adds a listener to be notified when the {@link #getSession2Tokens()} changes.\n     * <p>\n     * The calling application needs to hold the\n     * {@link android.Manifest.permission#INTERACT_ACROSS_USERS_FULL} permission in order to\n     * add listeners for user ids that do not belong to current process.\n     *\n     * @param userHandle The userHandle to listen for changes on\n     * @param listener The listener to add\n     * @param executor The executor on which the listener should be invoked\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission#INTERACT_ACROSS_USERS_FULL", "#getSession2Tokens()" ]
  }, {
    "name" : "private void addOnSession2TokensChangedListener(int userId, OnSession2TokensChangedListener listener, Executor executor)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeOnSession2TokensChangedListener(@NonNull OnSession2TokensChangedListener listener)",
    "returnType" : "void",
    "comment" : "\n     * This API is not generally intended for third party application developers.\n     * Use the <a href=\"{@docRoot}jetpack/androidx.html\">AndroidX</a>\n     * <a href=\"{@docRoot}reference/androidx/media2/session/package-summary.html\">Media2 session\n     * Library</a> for consistent behavior across all devices.\n     * <p>\n     * Removes the {@link OnSession2TokensChangedListener} to stop receiving session token updates.\n     *\n     * @param listener The listener to remove.\n     ",
    "links" : [ "OnSession2TokensChangedListener" ]
  }, {
    "name" : "public void registerRemoteSessionCallback(@NonNull @CallbackExecutor Executor executor, @NonNull RemoteSessionCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Set the remote volume controller callback to receive volume updates on.\n     * Only for use by System UI and Settings application.\n     *\n     * @param executor The executor on which the callback should be invoked\n     * @param callback The volume controller callback to receive updates on.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void unregisterRemoteSessionCallback(@NonNull RemoteSessionCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Unregisters the remote volume controller callback which was previously registered with\n     * {@link #registerRemoteSessionCallback(Executor, RemoteSessionCallback)}.\n     * Only for use by System UI and Settings application.\n     *\n     * @param callback The volume controller callback to receive updates on.\n     * @hide\n     ",
    "links" : [ "#registerRemoteSessionCallback(Executor" ]
  }, {
    "name" : "public void dispatchMediaKeyEvent(@NonNull KeyEvent keyEvent, boolean needWakeLock)",
    "returnType" : "void",
    "comment" : "\n     * Sends a media key event. The receiver will be selected automatically.\n     *\n     * @param keyEvent the key event to send\n     * @param needWakeLock true if a wake lock should be held while sending the key\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void dispatchMediaKeyEventAsSystemService(@NonNull KeyEvent keyEvent)",
    "returnType" : "void",
    "comment" : "\n     * Sends a media key event as system service. The receiver will be selected automatically.\n     * <p>\n     * Should be only called by the {@link com.android.internal.policy.PhoneWindow} or\n     * {@link android.view.FallbackEventHandler} when the foreground activity didn't consume the key\n     * from the hardware devices.\n     *\n     * @param keyEvent the key event to send\n     * @hide\n     ",
    "links" : [ "com.android.internal.policy.PhoneWindow", "android.view.FallbackEventHandler" ]
  }, {
    "name" : "private void dispatchMediaKeyEventInternal(KeyEvent keyEvent, boolean asSystemService, boolean needWakeLock)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean dispatchMediaKeyEventToSessionAsSystemService(@NonNull KeyEvent keyEvent, @NonNull MediaSession.Token sessionToken)",
    "returnType" : "boolean",
    "comment" : "\n     * Sends a media key event as system service to the given session.\n     * <p>\n     * Should be only called by the {@link com.android.internal.policy.PhoneWindow} when the\n     * foreground activity didn't consume the key from the hardware devices.\n     *\n     * @param keyEvent the key event to send\n     * @param sessionToken the session token to which the key event should be dispatched\n     * @return {@code true} if the event was sent to the session, {@code false} otherwise\n     * @hide\n     ",
    "links" : [ "com.android.internal.policy.PhoneWindow" ]
  }, {
    "name" : "public void dispatchVolumeKeyEvent(@NonNull KeyEvent keyEvent, int streamType, boolean musicOnly)",
    "returnType" : "void",
    "comment" : "\n     * Sends a volume key event. The receiver will be selected automatically.\n     *\n     * @param keyEvent the volume key event to send\n     * @param streamType type of stream\n     * @param musicOnly true if key event should only be sent to music stream\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void dispatchVolumeKeyEventAsSystemService(@NonNull KeyEvent keyEvent, int streamType)",
    "returnType" : "void",
    "comment" : "\n     * Dispatches the volume button event as system service to the session. This only effects the\n     * {@link MediaSession.Callback#getCurrentControllerInfo()} and doesn't bypass any permission\n     * check done by the system service.\n     * <p>\n     * Should be only called by the {@link com.android.internal.policy.PhoneWindow} or\n     * {@link android.view.FallbackEventHandler} when the foreground activity didn't consume the key\n     * from the hardware devices.\n     * <p>\n     * Valid stream types include {@link AudioManager.PublicStreamTypes} and\n     * {@link AudioManager#USE_DEFAULT_STREAM_TYPE}.\n     *\n     * @param keyEvent the volume key event to send\n     * @param streamType type of stream\n     * @hide\n     ",
    "links" : [ "android.media.AudioManager#USE_DEFAULT_STREAM_TYPE", "AudioManager.PublicStreamTypes", "com.android.internal.policy.PhoneWindow", "MediaSession.Callback#getCurrentControllerInfo()", "android.view.FallbackEventHandler" ]
  }, {
    "name" : "private void dispatchVolumeKeyEventInternal(@NonNull KeyEvent keyEvent, int stream, boolean musicOnly, boolean asSystemService)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dispatchVolumeKeyEventToSessionAsSystemService(@NonNull KeyEvent keyEvent, @NonNull MediaSession.Token sessionToken)",
    "returnType" : "void",
    "comment" : "\n     * Dispatches the volume key event as system service to the session.\n     * <p>\n     * Should be only called by the {@link com.android.internal.policy.PhoneWindow} when the\n     * foreground activity didn't consume the key from the hardware devices.\n     *\n     * @param keyEvent the volume key event to send\n     * @param sessionToken the session token to which the key event should be dispatched\n     * @hide\n     ",
    "links" : [ "com.android.internal.policy.PhoneWindow" ]
  }, {
    "name" : "public void dispatchAdjustVolume(int suggestedStream, int direction, int flags)",
    "returnType" : "void",
    "comment" : "\n     * Dispatch an adjust volume request to the system. It will be sent to the\n     * most relevant audio stream or media session. The direction must be one of\n     * {@link AudioManager#ADJUST_LOWER}, {@link AudioManager#ADJUST_RAISE},\n     * {@link AudioManager#ADJUST_SAME}.\n     *\n     * @param suggestedStream The stream to fall back to if there isn't a\n     *            relevant stream\n     * @param direction The direction to adjust volume in.\n     * @param flags Any flags to include with the volume change.\n     * @hide\n     ",
    "links" : [ "android.media.AudioManager#ADJUST_RAISE", "android.media.AudioManager#ADJUST_LOWER", "android.media.AudioManager#ADJUST_SAME" ]
  }, {
    "name" : "public boolean isTrustedForMediaControl(@NonNull RemoteUserInfo userInfo)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks whether the remote user is a trusted app.\n     * <p>\n     * An app is trusted if the app holds the\n     * {@link android.Manifest.permission#MEDIA_CONTENT_CONTROL} permission or has an enabled\n     * notification listener.\n     *\n     * @param userInfo The remote user info from either\n     *            {@link MediaSession#getCurrentControllerInfo()} or\n     *            {@link MediaBrowserService#getCurrentBrowserInfo()}.\n     * @return {@code true} if the remote user is trusted and its package name matches with the UID.\n     *            {@code false} otherwise.\n     ",
    "links" : [ "android.media.session.MediaSession#getCurrentControllerInfo()", "android.service.media.MediaBrowserService#getCurrentBrowserInfo()", "android.Manifest.permission#MEDIA_CONTENT_CONTROL" ]
  }, {
    "name" : "public boolean isGlobalPriorityActive()",
    "returnType" : "boolean",
    "comment" : "\n     * Check if the global priority session is currently active. This can be\n     * used to decide if media keys should be sent to the session or to the app.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOnVolumeKeyLongPressListener(OnVolumeKeyLongPressListener listener, @Nullable Handler handler)",
    "returnType" : "void",
    "comment" : "\n     * Set the volume key long-press listener. While the listener is set, the listener\n     * gets the volume key long-presses instead of changing volume.\n     *\n     * <p>System can only have a single volume key long-press listener.\n     *\n     * @param listener The volume key long-press listener. {@code null} to reset.\n     * @param handler The handler on which the listener should be invoked, or {@code null}\n     *            if the listener should be invoked on the calling thread's looper.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOnMediaKeyListener(OnMediaKeyListener listener, @Nullable Handler handler)",
    "returnType" : "void",
    "comment" : "\n     * Set the media key listener. While the listener is set, the listener\n     * gets the media key before any other media sessions but after the global priority session.\n     * If the listener handles the key (i.e. returns {@code true}),\n     * other sessions will not get the event.\n     *\n     * <p>System can only have a single media key listener.\n     *\n     * @param listener The media key listener. {@code null} to reset.\n     * @param handler The handler on which the listener should be invoked, or {@code null}\n     *            if the listener should be invoked on the calling thread's looper.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addOnMediaKeyEventDispatchedListener(@NonNull @CallbackExecutor Executor executor, @NonNull OnMediaKeyEventDispatchedListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Add a {@link OnMediaKeyEventDispatchedListener}.\n     *\n     * @param executor The executor on which the listener should be invoked\n     * @param listener A {@link OnMediaKeyEventDispatchedListener}.\n     * @hide\n     ",
    "links" : [ "OnMediaKeyEventDispatchedListener" ]
  }, {
    "name" : "public void removeOnMediaKeyEventDispatchedListener(@NonNull OnMediaKeyEventDispatchedListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Remove a {@link OnMediaKeyEventDispatchedListener}.\n     *\n     * @param listener A {@link OnMediaKeyEventDispatchedListener}.\n     * @hide\n     ",
    "links" : [ "OnMediaKeyEventDispatchedListener" ]
  }, {
    "name" : "public void addOnMediaKeyEventSessionChangedListener(@NonNull @CallbackExecutor Executor executor, @NonNull OnMediaKeyEventSessionChangedListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Add a listener to be notified when the media key session is changed.\n     * <p>\n     * This requires the {@link android.Manifest.permission#MEDIA_CONTENT_CONTROL}\n     * permission be held by the calling app, or the app has an enabled notification listener\n     * using the {@link NotificationListenerService} APIs. If none of them applies, it will throw\n     * a {@link SecurityException}.\n     *\n     * @param executor The executor on which the listener should be invoked.\n     * @param listener A {@link OnMediaKeyEventSessionChangedListener}.\n     ",
    "links" : [ "OnMediaKeyEventSessionChangedListener", "android.service.notification.NotificationListenerService", "android.Manifest.permission#MEDIA_CONTENT_CONTROL", "SecurityException" ]
  }, {
    "name" : "public void removeOnMediaKeyEventSessionChangedListener(@NonNull OnMediaKeyEventSessionChangedListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Stop receiving updates on media key event session change on the specified listener.\n     *\n     * @param listener A {@link OnMediaKeyEventSessionChangedListener}.\n     ",
    "links" : [ "OnMediaKeyEventSessionChangedListener" ]
  }, {
    "name" : "public void setCustomMediaKeyDispatcher(@Nullable String name)",
    "returnType" : "void",
    "comment" : "\n     * Set the component name for the custom\n     * {@link com.android.server.media.MediaKeyDispatcher} class. Set to null to restore to the\n     * custom {@link com.android.server.media.MediaKeyDispatcher} class name retrieved from the\n     * config value.\n     *\n     * @hide\n     ",
    "links" : [ "com.android.server.media.MediaKeyDispatcher" ]
  }, {
    "name" : "public void setCustomMediaSessionPolicyProvider(@Nullable String name)",
    "returnType" : "void",
    "comment" : "\n     * Set the component name for the custom\n     * {@link com.android.server.media.MediaSessionPolicyProvider} class. Set to null to restore to\n     * the custom {@link com.android.server.media.MediaSessionPolicyProvider} class name retrieved\n     * from the config value.\n     *\n     * @hide\n     ",
    "links" : [ "com.android.server.media.MediaSessionPolicyProvider" ]
  }, {
    "name" : "public boolean hasCustomMediaKeyDispatcher(@NonNull String componentName)",
    "returnType" : "boolean",
    "comment" : "\n     * Get the component name for the custom {@link com.android.server.media.MediaKeyDispatcher}\n     * class.\n     *\n     * @hide\n     ",
    "links" : [ "com.android.server.media.MediaKeyDispatcher" ]
  }, {
    "name" : "public boolean hasCustomMediaSessionPolicyProvider(@NonNull String componentName)",
    "returnType" : "boolean",
    "comment" : "\n     * Get the component name for the custom\n     * {@link com.android.server.media.MediaSessionPolicyProvider} class.\n     *\n     * @hide\n     ",
    "links" : [ "com.android.server.media.MediaSessionPolicyProvider" ]
  }, {
    "name" : "public int getSessionPolicies(@NonNull MediaSession.Token token)",
    "returnType" : "int",
    "comment" : "\n     * Get session policies of the specified {@link MediaSession.Token}.\n     *\n     * @hide\n     ",
    "links" : [ "MediaSession.Token" ]
  }, {
    "name" : "public void setSessionPolicies(@NonNull MediaSession.Token token, @Nullable int policies)",
    "returnType" : "void",
    "comment" : "\n     * Set new session policies to the specified {@link MediaSession.Token}.\n     *\n     * @hide\n     ",
    "links" : [ "MediaSession.Token" ]
  } ],
  "methodNames" : [ "public ISession createSession(@NonNull MediaSession.CallbackStub cbStub, @NonNull String tag, @Nullable Bundle sessionInfo)", "public void notifySession2Created(@NonNull Session2Token token)", "public List<MediaController> getActiveSessions(@Nullable ComponentName notificationListener)", "public MediaSession.Token getMediaKeyEventSession()", "public String getMediaKeyEventSessionPackageName()", "public List<MediaController> getActiveSessionsForUser(@Nullable ComponentName notificationListener, @NonNull UserHandle userHandle)", "private List<MediaController> getActiveSessionsForUser(ComponentName notificationListener, int userId)", "public List<Session2Token> getSession2Tokens()", "public void addOnActiveSessionsChangedListener(@NonNull OnActiveSessionsChangedListener sessionListener, @Nullable ComponentName notificationListener)", "public void addOnActiveSessionsChangedListener(@NonNull OnActiveSessionsChangedListener sessionListener, @Nullable ComponentName notificationListener, @Nullable Handler handler)", "public void addOnActiveSessionsChangedListener(@Nullable ComponentName notificationListener, @NonNull UserHandle userHandle, @NonNull Executor executor, @NonNull OnActiveSessionsChangedListener sessionListener)", "private void addOnActiveSessionsChangedListener(@NonNull OnActiveSessionsChangedListener sessionListener, @Nullable ComponentName notificationListener, int userId, @Nullable Executor executor)", "public void removeOnActiveSessionsChangedListener(@NonNull OnActiveSessionsChangedListener sessionListener)", "public void addOnSession2TokensChangedListener(@NonNull OnSession2TokensChangedListener listener)", "public void addOnSession2TokensChangedListener(@NonNull OnSession2TokensChangedListener listener, @NonNull Handler handler)", "public void addOnSession2TokensChangedListener(@NonNull UserHandle userHandle, @NonNull OnSession2TokensChangedListener listener, @NonNull Executor executor)", "private void addOnSession2TokensChangedListener(int userId, OnSession2TokensChangedListener listener, Executor executor)", "public void removeOnSession2TokensChangedListener(@NonNull OnSession2TokensChangedListener listener)", "public void registerRemoteSessionCallback(@NonNull @CallbackExecutor Executor executor, @NonNull RemoteSessionCallback callback)", "public void unregisterRemoteSessionCallback(@NonNull RemoteSessionCallback callback)", "public void dispatchMediaKeyEvent(@NonNull KeyEvent keyEvent, boolean needWakeLock)", "public void dispatchMediaKeyEventAsSystemService(@NonNull KeyEvent keyEvent)", "private void dispatchMediaKeyEventInternal(KeyEvent keyEvent, boolean asSystemService, boolean needWakeLock)", "public boolean dispatchMediaKeyEventToSessionAsSystemService(@NonNull KeyEvent keyEvent, @NonNull MediaSession.Token sessionToken)", "public void dispatchVolumeKeyEvent(@NonNull KeyEvent keyEvent, int streamType, boolean musicOnly)", "public void dispatchVolumeKeyEventAsSystemService(@NonNull KeyEvent keyEvent, int streamType)", "private void dispatchVolumeKeyEventInternal(@NonNull KeyEvent keyEvent, int stream, boolean musicOnly, boolean asSystemService)", "public void dispatchVolumeKeyEventToSessionAsSystemService(@NonNull KeyEvent keyEvent, @NonNull MediaSession.Token sessionToken)", "public void dispatchAdjustVolume(int suggestedStream, int direction, int flags)", "public boolean isTrustedForMediaControl(@NonNull RemoteUserInfo userInfo)", "public boolean isGlobalPriorityActive()", "public void setOnVolumeKeyLongPressListener(OnVolumeKeyLongPressListener listener, @Nullable Handler handler)", "public void setOnMediaKeyListener(OnMediaKeyListener listener, @Nullable Handler handler)", "public void addOnMediaKeyEventDispatchedListener(@NonNull @CallbackExecutor Executor executor, @NonNull OnMediaKeyEventDispatchedListener listener)", "public void removeOnMediaKeyEventDispatchedListener(@NonNull OnMediaKeyEventDispatchedListener listener)", "public void addOnMediaKeyEventSessionChangedListener(@NonNull @CallbackExecutor Executor executor, @NonNull OnMediaKeyEventSessionChangedListener listener)", "public void removeOnMediaKeyEventSessionChangedListener(@NonNull OnMediaKeyEventSessionChangedListener listener)", "public void setCustomMediaKeyDispatcher(@Nullable String name)", "public void setCustomMediaSessionPolicyProvider(@Nullable String name)", "public boolean hasCustomMediaKeyDispatcher(@NonNull String componentName)", "public boolean hasCustomMediaSessionPolicyProvider(@NonNull String componentName)", "public int getSessionPolicies(@NonNull MediaSession.Token token)", "public void setSessionPolicies(@NonNull MediaSession.Token token, @Nullable int policies)" ],
  "variableNames" : [ "TAG", "RESULT_MEDIA_KEY_NOT_HANDLED", "RESULT_MEDIA_KEY_HANDLED", "mService", "mCommunicationManager", "mOnMediaKeyEventDispatchedListenerStub", "mOnMediaKeyEventSessionChangedListenerStub", "mRemoteSessionCallbackStub", "mLock", "mListeners", "mSession2TokensListeners", "mOnMediaKeyEventDispatchedListeners", "mMediaKeyEventSessionChangedCallbacks", "mCurMediaKeyEventSessionPackage", "mCurMediaKeyEventSession", "mRemoteSessionCallbacks", "mContext", "mOnVolumeKeyLongPressListener", "mOnMediaKeyListener" ]
}