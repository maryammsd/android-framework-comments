{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/number/AffixUtils.java",
  "packageName" : "android.icu.impl.number",
  "className" : "AffixUtils",
  "comment" : "\n * Performs manipulations on affix patterns: the prefix and suffix strings associated with a decimal\n * format pattern. For example:\n *\n * <table>\n * <tr>\n * <th>Affix Pattern</th>\n * <th>Example Unescaped (Formatted) String</th>\n * </tr>\n * <tr>\n * <td>abc</td>\n * <td>abc</td>\n * </tr>\n * <tr>\n * <td>ab-</td>\n * <td>ab−</td>\n * </tr>\n * <tr>\n * <td>ab'-'</td>\n * <td>ab-</td>\n * </tr>\n * <tr>\n * <td>ab''</td>\n * <td>ab'</td>\n * </tr>\n * </table>\n *\n * To manually iterate over tokens in a literal string, use the following pattern, which is designed to\n * be efficient.\n *\n * <pre>\n * long tag = 0L;\n * while (AffixPatternUtils.hasNext(tag, patternString)) {\n *     tag = AffixPatternUtils.nextToken(tag, patternString);\n *     int typeOrCp = AffixPatternUtils.getTypeOrCp(tag);\n *     switch (typeOrCp) {\n *     case AffixPatternUtils.TYPE_MINUS_SIGN:\n *         // Current token is a minus sign.\n *         break;\n *     case AffixPatternUtils.TYPE_PLUS_SIGN:\n *         // Current token is a plus sign.\n *         break;\n *     case AffixPatternUtils.TYPE_PERCENT:\n *         // Current token is a percent sign.\n *         break;\n *     // ... other types ...\n *     default:\n *         // Current token is an arbitrary code point.\n *         // The variable typeOrCp is the code point.\n *         break;\n *     }\n * }\n * </pre>\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "STATE_BASE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STATE_FIRST_QUOTE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STATE_INSIDE_QUOTE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STATE_AFTER_QUOTE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STATE_FIRST_CURR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STATE_SECOND_CURR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STATE_THIRD_CURR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STATE_FOURTH_CURR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STATE_FIFTH_CURR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STATE_OVERFLOW_CURR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TYPE_CODEPOINT",
    "type" : "int",
    "comment" : " Represents a literal character; the value is stored in the code point field. ",
    "links" : [ ]
  }, {
    "name" : "TYPE_MINUS_SIGN",
    "type" : "int",
    "comment" : " Represents a minus sign symbol '-'. ",
    "links" : [ ]
  }, {
    "name" : "TYPE_PLUS_SIGN",
    "type" : "int",
    "comment" : " Represents a plus sign symbol '+'. ",
    "links" : [ ]
  }, {
    "name" : "TYPE_APPROXIMATELY_SIGN",
    "type" : "int",
    "comment" : " Represents an approximately sign symbol '~'.",
    "links" : [ ]
  }, {
    "name" : "TYPE_PERCENT",
    "type" : "int",
    "comment" : " Represents a percent sign symbol '%'. ",
    "links" : [ ]
  }, {
    "name" : "TYPE_PERMILLE",
    "type" : "int",
    "comment" : " Represents a permille sign symbol '‰'. ",
    "links" : [ ]
  }, {
    "name" : "TYPE_CURRENCY_SINGLE",
    "type" : "int",
    "comment" : " Represents a single currency symbol '¤'. ",
    "links" : [ ]
  }, {
    "name" : "TYPE_CURRENCY_DOUBLE",
    "type" : "int",
    "comment" : " Represents a double currency symbol '¤¤'. ",
    "links" : [ ]
  }, {
    "name" : "TYPE_CURRENCY_TRIPLE",
    "type" : "int",
    "comment" : " Represents a triple currency symbol '¤¤¤'. ",
    "links" : [ ]
  }, {
    "name" : "TYPE_CURRENCY_QUAD",
    "type" : "int",
    "comment" : " Represents a quadruple currency symbol '¤¤¤¤'. ",
    "links" : [ ]
  }, {
    "name" : "TYPE_CURRENCY_QUINT",
    "type" : "int",
    "comment" : " Represents a quintuple currency symbol '¤¤¤¤¤'. ",
    "links" : [ ]
  }, {
    "name" : "TYPE_CURRENCY_OVERFLOW",
    "type" : "int",
    "comment" : " Represents a sequence of six or more currency symbols. ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static int estimateLength(CharSequence patternString)",
    "returnType" : "int",
    "comment" : "\n     * Estimates the number of code points present in an unescaped version of the affix pattern string\n     * (one that would be returned by {@link #unescape}), assuming that all interpolated symbols consume\n     * one code point and that currencies consume as many code points as their symbol width. Used for\n     * computing padding width.\n     *\n     * @param patternString\n     *            The original string whose width will be estimated.\n     * @return The length of the unescaped string.\n     ",
    "links" : [ "#unescape" ]
  }, {
    "name" : "public static int escape(CharSequence input, StringBuilder output)",
    "returnType" : "int",
    "comment" : "\n     * Takes a string and escapes (quotes) characters that have special meaning in the affix pattern\n     * syntax. This function does not reverse-lookup symbols.\n     *\n     * <p>\n     * Example input: \"-$x\"; example output: \"'-'$x\"\n     *\n     * @param input\n     *            The string to be escaped.\n     * @param output\n     *            The string builder to which to append the escaped string.\n     * @return The number of chars (UTF-16 code units) appended to the output.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String escape(CharSequence input)",
    "returnType" : "String",
    "comment" : " Version of {@link #escape} that returns a String, or null if input is null. ",
    "links" : [ "#escape" ]
  }, {
    "name" : "public static final NumberFormat.Field getFieldForType(int type)",
    "returnType" : "NumberFormat.Field",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static int unescape(CharSequence affixPattern, FormattedStringBuilder output, int position, SymbolProvider provider, NumberFormat.Field field)",
    "returnType" : "int",
    "comment" : "\n     * Executes the unescape state machine. Replaces the unquoted characters \"-\", \"+\", \"%\", \"‰\", and \"¤\"\n     * with the corresponding symbols provided by the {@link SymbolProvider}, and inserts the result into\n     * the FormattedStringBuilder at the requested location.\n     *\n     * <p>\n     * Example input: \"'-'¤x\"; example output: \"-$x\"\n     *\n     * @param affixPattern\n     *            The original string to be unescaped.\n     * @param output\n     *            The FormattedStringBuilder to mutate with the result.\n     * @param position\n     *            The index into the FormattedStringBuilder to insert the the string.\n     * @param provider\n     *            An object to generate locale symbols.\n     * @return The length of the string added to affixPattern.\n     ",
    "links" : [ "SymbolProvider" ]
  }, {
    "name" : "public static int unescapedCount(CharSequence affixPattern, boolean lengthOrCount, SymbolProvider provider)",
    "returnType" : "int",
    "comment" : "\n     * Sames as {@link #unescape}, but only calculates the length or code point count. More efficient\n     * than {@link #unescape} if you only need the length but not the string itself.\n     *\n     * @param affixPattern\n     *            The original string to be unescaped.\n     * @param lengthOrCount\n     *            true to count length (UTF-16 code units); false to count code points\n     * @param provider\n     *            An object to generate locale symbols.\n     * @return The number of code points in the unescaped string.\n     ",
    "links" : [ "#unescape" ]
  }, {
    "name" : "public static boolean containsType(CharSequence affixPattern, int type)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks whether the given affix pattern contains at least one token of the given type, which is one\n     * of the constants \"TYPE_\" in {@link AffixUtils}.\n     *\n     * @param affixPattern\n     *            The affix pattern to check.\n     * @param type\n     *            The token type.\n     * @return true if the affix pattern contains the given token type; false otherwise.\n     ",
    "links" : [ "android.icu.impl.number.AffixUtils" ]
  }, {
    "name" : "public static boolean hasCurrencySymbols(CharSequence affixPattern)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks whether the specified affix pattern has any unquoted currency symbols (\"¤\").\n     *\n     * @param affixPattern\n     *            The string to check for currency symbols.\n     * @return true if the literal has at least one unquoted currency symbol; false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String replaceType(CharSequence affixPattern, int type, char replacementChar)",
    "returnType" : "String",
    "comment" : "\n     * Replaces all occurrences of tokens with the given type with the given replacement char.\n     *\n     * @param affixPattern\n     *            The source affix pattern (does not get modified).\n     * @param type\n     *            The token type.\n     * @param replacementChar\n     *            The char to substitute in place of chars of the given token type.\n     * @return A string containing the new affix pattern.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean containsOnlySymbolsAndIgnorables(CharSequence affixPattern, UnicodeSet ignorables)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the given affix pattern contains only symbols and ignorables as defined by the\n     * given ignorables set.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void iterateWithConsumer(CharSequence affixPattern, TokenConsumer consumer)",
    "returnType" : "void",
    "comment" : "\n     * Iterates over the affix pattern, calling the TokenConsumer for each token.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static long nextToken(long tag, CharSequence patternString)",
    "returnType" : "long",
    "comment" : "\n     * Returns the next token from the affix pattern.\n     *\n     * @param tag\n     *            A bitmask used for keeping track of state from token to token. The initial value should\n     *            be 0L.\n     * @param patternString\n     *            The affix pattern.\n     * @return The bitmask tag to pass to the next call of this method to retrieve the following token\n     *         (never negative), or -1 if there were no more tokens in the affix pattern.\n     * @see #hasNext\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean hasNext(long tag, CharSequence string)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the affix pattern string has any more tokens to be retrieved from a call to\n     * {@link #nextToken}.\n     *\n     * @param tag\n     *            The bitmask tag of the previous token, as returned by {@link #nextToken}.\n     * @param string\n     *            The affix pattern.\n     * @return true if there are more tokens to consume; false otherwise.\n     ",
    "links" : [ "#nextToken" ]
  }, {
    "name" : "private static int getTypeOrCp(long tag)",
    "returnType" : "int",
    "comment" : "\n     * This function helps determine the identity of the token consumed by {@link #nextToken}. Converts\n     * from a bitmask tag, based on a call to {@link #nextToken}, to its corresponding symbol type or\n     * code point.\n     *\n     * @param tag\n     *            The bitmask tag of the current token, as returned by {@link #nextToken}.\n     * @return If less than zero, a symbol type corresponding to one of the <code>TYPE_</code> constants,\n     *         such as {@link #TYPE_MINUS_SIGN}. If greater than or equal to zero, a literal code point.\n     ",
    "links" : [ "#TYPE_MINUS_SIGN", "#nextToken" ]
  }, {
    "name" : "private static long makeTag(int offset, int type, int state, int cp)",
    "returnType" : "long",
    "comment" : "\n     * Encodes the given values into a 64-bit tag.\n     *\n     * <ul>\n     * <li>Bits 0-31 => offset (int32)\n     * <li>Bits 32-35 => type (uint4)\n     * <li>Bits 36-39 => state (uint4)\n     * <li>Bits 40-60 => code point (uint21)\n     * <li>Bits 61-63 => unused\n     * </ul>\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int getOffset(long tag)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int getType(long tag)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int getState(long tag)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int getCodePoint(long tag)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static int estimateLength(CharSequence patternString)", "public static int escape(CharSequence input, StringBuilder output)", "public static String escape(CharSequence input)", "public static final NumberFormat.Field getFieldForType(int type)", "public static int unescape(CharSequence affixPattern, FormattedStringBuilder output, int position, SymbolProvider provider, NumberFormat.Field field)", "public static int unescapedCount(CharSequence affixPattern, boolean lengthOrCount, SymbolProvider provider)", "public static boolean containsType(CharSequence affixPattern, int type)", "public static boolean hasCurrencySymbols(CharSequence affixPattern)", "public static String replaceType(CharSequence affixPattern, int type, char replacementChar)", "public static boolean containsOnlySymbolsAndIgnorables(CharSequence affixPattern, UnicodeSet ignorables)", "public static void iterateWithConsumer(CharSequence affixPattern, TokenConsumer consumer)", "private static long nextToken(long tag, CharSequence patternString)", "private static boolean hasNext(long tag, CharSequence string)", "private static int getTypeOrCp(long tag)", "private static long makeTag(int offset, int type, int state, int cp)", "private static int getOffset(long tag)", "private static int getType(long tag)", "private static int getState(long tag)", "private static int getCodePoint(long tag)" ],
  "variableNames" : [ "STATE_BASE", "STATE_FIRST_QUOTE", "STATE_INSIDE_QUOTE", "STATE_AFTER_QUOTE", "STATE_FIRST_CURR", "STATE_SECOND_CURR", "STATE_THIRD_CURR", "STATE_FOURTH_CURR", "STATE_FIFTH_CURR", "STATE_OVERFLOW_CURR", "TYPE_CODEPOINT", "TYPE_MINUS_SIGN", "TYPE_PLUS_SIGN", "TYPE_APPROXIMATELY_SIGN", "TYPE_PERCENT", "TYPE_PERMILLE", "TYPE_CURRENCY_SINGLE", "TYPE_CURRENCY_DOUBLE", "TYPE_CURRENCY_TRIPLE", "TYPE_CURRENCY_QUAD", "TYPE_CURRENCY_QUINT", "TYPE_CURRENCY_OVERFLOW" ]
}