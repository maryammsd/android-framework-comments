{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/view/SurfaceControl.java",
  "packageName" : "android.view",
  "className" : "SurfaceControl",
  "comment" : "\n * Handle to an on-screen Surface managed by the system compositor. The SurfaceControl is\n * a combination of a buffer source, and metadata about how to display the buffers.\n * By constructing a {@link Surface} from this SurfaceControl you can submit buffers to be\n * composited. Using {@link SurfaceControl.Transaction} you can manipulate various\n * properties of how the buffer will be displayed on-screen. SurfaceControl's are\n * arranged into a scene-graph like hierarchy, and as such any SurfaceControl may have\n * a parent. Geometric properties like transform, crop, and Z-ordering will be inherited\n * from the parent, as if the child were content in the parents buffer stream.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mReparentListeners",
    "type" : "ArrayList<OnReparentListener>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCloseGuard",
    "type" : "CloseGuard",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNativeObject",
    "type" : "long",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mNativeHandle",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : " TODO: Move width/height to native and fix locking through out.",
    "links" : [ ]
  }, {
    "name" : "mWidth",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHeight",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLocalOwnerView",
    "type" : "WeakReference<View>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sGlobalTransaction",
    "type" : "Transaction",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sTransactionNestCount",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HIDDEN",
    "type" : "int",
    "comment" : "\n     * Surface creation flag: Surface is created hidden\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SECURE",
    "type" : "int",
    "comment" : "\n     * Surface creation flag: The surface contains secure content, special\n     * measures will be taken to disallow the surface's content to be copied\n     * from another process. In particular, screenshots and VNC servers will\n     * be disabled, but other measures can take place, for instance the\n     * surface might not be hardware accelerated.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NON_PREMULTIPLIED",
    "type" : "int",
    "comment" : "\n     * Surface creation flag: Creates a surface where color components are interpreted\n     * as \"non pre-multiplied\" by their alpha channel. Of course this flag is\n     * meaningless for surfaces without an alpha channel. By default\n     * surfaces are pre-multiplied, which means that each color component is\n     * already multiplied by its alpha value. In this case the blending\n     * equation used is:\n     * <p>\n     *    <code>DEST = SRC + DEST * (1-SRC_ALPHA)</code>\n     * <p>\n     * By contrast, non pre-multiplied surfaces use the following equation:\n     * <p>\n     *    <code>DEST = SRC * SRC_ALPHA * DEST * (1-SRC_ALPHA)</code>\n     * <p>\n     * pre-multiplied surfaces must always be used if transparent pixels are\n     * composited on top of each-other into the surface. A pre-multiplied\n     * surface can never lower the value of the alpha component of a given\n     * pixel.\n     * <p>\n     * In some rare situations, a non pre-multiplied surface is preferable.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "OPAQUE",
    "type" : "int",
    "comment" : "\n     * Surface creation flag: Indicates that the surface must be considered opaque,\n     * even if its pixel format contains an alpha channel. This can be useful if an\n     * application needs full RGBA 8888 support for instance but will\n     * still draw every pixel opaque.\n     * <p>\n     * This flag is ignored if setAlpha() is used to make the surface non-opaque.\n     * Combined effects are (assuming a buffer format with an alpha channel):\n     * <ul>\n     * <li>OPAQUE + alpha(1.0) == opaque composition\n     * <li>OPAQUE + alpha(0.x) == blended composition\n     * <li>!OPAQUE + alpha(1.0) == blended composition\n     * <li>!OPAQUE + alpha(0.x) == blended composition\n     * </ul>\n     * If the underlying buffer lacks an alpha channel, the OPAQUE flag is effectively\n     * set automatically.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PROTECTED_APP",
    "type" : "int",
    "comment" : "\n     * Surface creation flag: Application requires a hardware-protected path to an\n     * external display sink. If a hardware-protected path is not available,\n     * then this surface will not be displayed on the external sink.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CURSOR_WINDOW",
    "type" : "int",
    "comment" : "\n     * Surface creation flag: Window represents a cursor glyph.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NO_COLOR_FILL",
    "type" : "int",
    "comment" : "\n     * Surface creation flag: Indicates the effect layer will not have a color fill on\n     * creation.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FX_SURFACE_NORMAL",
    "type" : "int",
    "comment" : "\n     * Surface creation flag: Creates a normal surface.\n     * This is the default.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FX_SURFACE_EFFECT",
    "type" : "int",
    "comment" : "\n     * Surface creation flag: Creates a effect surface which\n     * represents a solid color and or shadows.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FX_SURFACE_CONTAINER",
    "type" : "int",
    "comment" : "\n     * Surface creation flag: Creates a container surface.\n     * This surface will have no buffers and will only be used\n     * as a container for other surfaces, or for its InputInfo.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FX_SURFACE_BLAST",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FX_SURFACE_MASK",
    "type" : "int",
    "comment" : "\n     * Mask used for FX values above.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SURFACE_HIDDEN",
    "type" : "int",
    "comment" : "\n     * Surface flag: Hide the surface.\n     * Equivalent to calling hide().\n     * Updates the value set during Surface creation (see {@link #HIDDEN}).\n     ",
    "links" : [ "#HIDDEN" ]
  }, {
    "name" : "SURFACE_OPAQUE",
    "type" : "int",
    "comment" : "\n     * Surface flag: composite without blending when possible.\n     * Updates the value set during Surface creation (see {@link #OPAQUE}).\n     ",
    "links" : [ "#OPAQUE" ]
  }, {
    "name" : "POWER_MODE_OFF",
    "type" : "int",
    "comment" : "\n     * Display power mode off: used while blanking the screen.\n     * Use only with {@link SurfaceControl#setDisplayPowerMode}.\n     * @hide\n     ",
    "links" : [ "SurfaceControl#setDisplayPowerMode" ]
  }, {
    "name" : "POWER_MODE_DOZE",
    "type" : "int",
    "comment" : "\n     * Display power mode doze: used while putting the screen into low power mode.\n     * Use only with {@link SurfaceControl#setDisplayPowerMode}.\n     * @hide\n     ",
    "links" : [ "SurfaceControl#setDisplayPowerMode" ]
  }, {
    "name" : "POWER_MODE_NORMAL",
    "type" : "int",
    "comment" : "\n     * Display power mode normal: used while unblanking the screen.\n     * Use only with {@link SurfaceControl#setDisplayPowerMode}.\n     * @hide\n     ",
    "links" : [ "SurfaceControl#setDisplayPowerMode" ]
  }, {
    "name" : "POWER_MODE_DOZE_SUSPEND",
    "type" : "int",
    "comment" : "\n     * Display power mode doze: used while putting the screen into a suspended\n     * low power mode.  Use only with {@link SurfaceControl#setDisplayPowerMode}.\n     * @hide\n     ",
    "links" : [ "SurfaceControl#setDisplayPowerMode" ]
  }, {
    "name" : "POWER_MODE_ON_SUSPEND",
    "type" : "int",
    "comment" : "\n     * Display power mode on: used while putting the screen into a suspended\n     * full power mode.  Use only with {@link SurfaceControl#setDisplayPowerMode}.\n     * @hide\n     ",
    "links" : [ "SurfaceControl#setDisplayPowerMode" ]
  }, {
    "name" : "WINDOW_TYPE_DONT_SCREENSHOT",
    "type" : "int",
    "comment" : "\n     * A value for windowType used to indicate that the window should be omitted from screenshots\n     * and display mirroring. A temporary workaround until we express such things with\n     * the hierarchy.\n     * TODO: b/64227542\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "INTERNAL_DATASPACE_SRGB",
    "type" : "int",
    "comment" : "\n     * internal representation of how to interpret pixel value, used only to convert to ColorSpace.\n     ",
    "links" : [ ]
  }, {
    "name" : "INTERNAL_DATASPACE_DISPLAY_P3",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INTERNAL_DATASPACE_SCRGB",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "METADATA_OWNER_UID",
    "type" : "int",
    "comment" : "\n     * owner UID.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "METADATA_WINDOW_TYPE",
    "type" : "int",
    "comment" : "\n     * Window type as per {@link WindowManager.LayoutParams}.\n     * @hide\n     ",
    "links" : [ "WindowManager.LayoutParams" ]
  }, {
    "name" : "METADATA_TASK_ID",
    "type" : "int",
    "comment" : "\n     * Task id to allow association between surfaces and task.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "METADATA_MOUSE_CURSOR",
    "type" : "int",
    "comment" : "\n     * The style of mouse cursor and hotspot.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "METADATA_ACCESSIBILITY_ID",
    "type" : "int",
    "comment" : "\n     * Accessibility ID to allow association between surfaces and accessibility tree.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<SurfaceControl>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static native long nativeCreate(SurfaceSession session, String name, int w, int h, int format, int flags, long parentObject, Parcel metadata) throws OutOfResourcesException",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeReadFromParcel(Parcel in)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeCopyFromSurfaceControl(long nativeObject)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeWriteToParcel(long nativeObject, Parcel out)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeRelease(long nativeObject)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeDisconnect(long nativeObject)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native ScreenshotGraphicBuffer nativeScreenshot(IBinder displayToken, Rect sourceCrop, int width, int height, boolean useIdentityTransform, int rotation, boolean captureSecureLayers)",
    "returnType" : "ScreenshotGraphicBuffer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native ScreenshotGraphicBuffer nativeCaptureLayers(IBinder displayToken, long layerObject, Rect sourceCrop, float frameScale, long[] excludeLayerObjects, int format)",
    "returnType" : "ScreenshotGraphicBuffer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeMirrorSurface(long mirrorOfObject)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeCreateTransaction()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeGetNativeTransactionFinalizer()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeApplyTransaction(long transactionObj, boolean sync)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeMergeTransaction(long transactionObj, long otherTransactionObj)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetAnimationTransaction(long transactionObj)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetEarlyWakeup(long transactionObj)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetEarlyWakeupStart(long transactionObj)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetEarlyWakeupEnd(long transactionObj)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetLayer(long transactionObj, long nativeObject, int zorder)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetRelativeLayer(long transactionObj, long nativeObject, long relativeToObject, int zorder)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetPosition(long transactionObj, long nativeObject, float x, float y)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetSize(long transactionObj, long nativeObject, int w, int h)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetTransparentRegionHint(long transactionObj, long nativeObject, Region region)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetAlpha(long transactionObj, long nativeObject, float alpha)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetMatrix(long transactionObj, long nativeObject, float dsdx, float dtdx, float dtdy, float dsdy)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetColorTransform(long transactionObj, long nativeObject, float[] matrix, float[] translation)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetColorSpaceAgnostic(long transactionObj, long nativeObject, boolean agnostic)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetGeometry(long transactionObj, long nativeObject, Rect sourceCrop, Rect dest, long orientation)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetColor(long transactionObj, long nativeObject, float[] color)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetFlags(long transactionObj, long nativeObject, int flags, int mask)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetFrameRateSelectionPriority(long transactionObj, long nativeObject, int priority)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetWindowCrop(long transactionObj, long nativeObject, int l, int t, int r, int b)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetCornerRadius(long transactionObj, long nativeObject, float cornerRadius)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetBackgroundBlurRadius(long transactionObj, long nativeObject, int blurRadius)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetLayerStack(long transactionObj, long nativeObject, int layerStack)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativeClearContentFrameStats(long nativeObject)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativeGetContentFrameStats(long nativeObject, WindowContentFrameStats outStats)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativeClearAnimationFrameStats()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativeGetAnimationFrameStats(WindowAnimationFrameStats outStats)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long[] nativeGetPhysicalDisplayIds()",
    "returnType" : "long[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native IBinder nativeGetPhysicalDisplayToken(long physicalDisplayId)",
    "returnType" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native IBinder nativeCreateDisplay(String name, boolean secure)",
    "returnType" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeDestroyDisplay(IBinder displayToken)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetDisplaySurface(long transactionObj, IBinder displayToken, long nativeSurfaceObject)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetDisplayLayerStack(long transactionObj, IBinder displayToken, int layerStack)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetDisplayProjection(long transactionObj, IBinder displayToken, int orientation, int l, int t, int r, int b, int L, int T, int R, int B)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetDisplaySize(long transactionObj, IBinder displayToken, int width, int height)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native SurfaceControl.DisplayInfo nativeGetDisplayInfo(IBinder displayToken)",
    "returnType" : "SurfaceControl.DisplayInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native SurfaceControl.DisplayConfig[] nativeGetDisplayConfigs(IBinder displayToken)",
    "returnType" : "SurfaceControl.DisplayConfig[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native DisplayedContentSamplingAttributes nativeGetDisplayedContentSamplingAttributes(IBinder displayToken)",
    "returnType" : "DisplayedContentSamplingAttributes",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativeSetDisplayedContentSamplingEnabled(IBinder displayToken, boolean enable, int componentMask, int maxFrames)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native DisplayedContentSample nativeGetDisplayedContentSample(IBinder displayToken, long numFrames, long timestamp)",
    "returnType" : "DisplayedContentSample",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeGetActiveConfig(IBinder displayToken)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativeSetDesiredDisplayConfigSpecs(IBinder displayToken, SurfaceControl.DesiredDisplayConfigSpecs desiredDisplayConfigSpecs)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native SurfaceControl.DesiredDisplayConfigSpecs nativeGetDesiredDisplayConfigSpecs(IBinder displayToken)",
    "returnType" : "SurfaceControl.DesiredDisplayConfigSpecs",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int[] nativeGetDisplayColorModes(IBinder displayToken)",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native SurfaceControl.DisplayPrimaries nativeGetDisplayNativePrimaries(IBinder displayToken)",
    "returnType" : "SurfaceControl.DisplayPrimaries",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int[] nativeGetCompositionDataspaces()",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeGetActiveColorMode(IBinder displayToken)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativeSetActiveColorMode(IBinder displayToken, int colorMode)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetAutoLowLatencyMode(IBinder displayToken, boolean on)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetGameContentType(IBinder displayToken, boolean on)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetDisplayPowerMode(IBinder displayToken, int mode)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeDeferTransactionUntil(long transactionObj, long nativeObject, long barrierObject, long frame)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeDeferTransactionUntilSurface(long transactionObj, long nativeObject, long surfaceObject, long frame)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeReparentChildren(long transactionObj, long nativeObject, long newParentObject)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeReparent(long transactionObj, long nativeObject, long newParentNativeObject)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSeverChildren(long transactionObj, long nativeObject)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetOverrideScalingMode(long transactionObj, long nativeObject, int scalingMode)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native Display.HdrCapabilities nativeGetHdrCapabilities(IBinder displayToken)",
    "returnType" : "Display.HdrCapabilities",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativeGetAutoLowLatencyModeSupport(IBinder displayToken)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativeGetGameContentTypeSupport(IBinder displayToken)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetInputWindowInfo(long transactionObj, long nativeObject, InputWindowHandle handle)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativeGetProtectedContentSupport()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetMetadata(long transactionObj, long nativeObject, int key, Parcel data)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSyncInputWindows(long transactionObj)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativeGetDisplayBrightnessSupport(IBinder displayToken)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativeSetDisplayBrightness(IBinder displayToken, float brightness)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeReadTransactionFromParcel(Parcel in)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeWriteTransactionToParcel(long nativeObject, Parcel out)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetShadowRadius(long transactionObj, long nativeObject, float shadowRadius)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetGlobalShadowSettings(@Size(4) float[] ambientColor, @Size(4) float[] spotColor, float lightPosY, float lightPosZ, float lightRadius)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetFrameRate(long transactionObj, long nativeObject, float frameRate, int compatibility)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeGetHandle(long nativeObject)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeAcquireFrameRateFlexibilityToken()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeReleaseFrameRateFlexibilityToken(long token)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetFixedTransformHint(long transactionObj, long nativeObject, int transformHint)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean addOnReparentListener(@NonNull OnReparentListener listener)",
    "returnType" : "boolean",
    "comment" : "\n     * Adds a reparenting listener.\n     *\n     * @param listener The listener.\n     * @return Whether listener was added.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean removeOnReparentListener(@NonNull OnReparentListener listener)",
    "returnType" : "boolean",
    "comment" : "\n     * Removes a reparenting listener.\n     *\n     * @param listener The listener.\n     * @return Whether listener was removed.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void assignNativeObject(long nativeObject, String callsite)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void copyFrom(@NonNull SurfaceControl other, String callsite)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void readFromParcel(Parcel in)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isSameSurface(@NonNull SurfaceControl other)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks whether two {@link SurfaceControl} objects represent the same surface.\n     *\n     * @param other The other object to check\n     * @return {@code true} if these two {@link SurfaceControl} objects represent the same surface.\n     * @hide\n     ",
    "links" : [ "SurfaceControl", "SurfaceControl" ]
  }, {
    "name" : "public void dumpDebug(ProtoOutputStream proto, long fieldId)",
    "returnType" : "void",
    "comment" : "\n     * Write to a protocol buffer output stream. Protocol buffer message definition is at {@link\n     * android.view.SurfaceControlProto}.\n     *\n     * @param proto Stream to write the SurfaceControl object to.\n     * @param fieldId Field Id of the SurfaceControl as defined in the parent message.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void finalize() throws Throwable",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void release()",
    "returnType" : "void",
    "comment" : "\n     * Release the local reference to the server-side surface. The surface\n     * may continue to exist on-screen as long as its parent continues\n     * to exist. To explicitly remove a surface from the screen use\n     * {@link Transaction#reparent} with a null-parent. After release,\n     * {@link #isValid} will return false and other methods will throw\n     * an exception.\n     *\n     * Always call release() when you're done with a SurfaceControl.\n     ",
    "links" : [ "Transaction#reparent", "#isValid" ]
  }, {
    "name" : "public void disconnect()",
    "returnType" : "void",
    "comment" : "\n     * Disconnect any client still connected to the surface.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void checkNotReleased()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isValid()",
    "returnType" : "boolean",
    "comment" : "\n     * Check whether this instance points to a valid layer with the system-compositor. For\n     * example this may be false if construction failed, or the layer was released\n     * ({@link #release}).\n     *\n     * @return Whether this SurfaceControl is valid.\n     ",
    "links" : [ "#release" ]
  }, {
    "name" : "public static void openTransaction()",
    "returnType" : "void",
    "comment" : " start a transaction\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void mergeToGlobalTransaction(Transaction t)",
    "returnType" : "void",
    "comment" : "\n     * Merge the supplied transaction in to the deprecated \"global\" transaction.\n     * This clears the supplied transaction in an identical fashion to {@link Transaction#merge}.\n     * <p>\n     * This is a utility for interop with legacy-code and will go away with the Global Transaction.\n     * @hide\n     ",
    "links" : [ "Transaction#merge" ]
  }, {
    "name" : "public static void closeTransaction()",
    "returnType" : "void",
    "comment" : " end a transaction\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void deferTransactionUntil(SurfaceControl barrier, long frame)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void reparentChildren(SurfaceControl newParent)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void detachChildren()",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOverrideScalingMode(int scalingMode)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setLayer(int zorder)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPosition(float x, float y)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setBufferSize(int w, int h)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void hide()",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void show()",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTransparentRegionHint(Region region)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean clearContentFrameStats()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getContentFrameStats(WindowContentFrameStats outStats)",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean clearAnimationFrameStats()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean getAnimationFrameStats(WindowAnimationFrameStats outStats)",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAlpha(float alpha)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMatrix(float dsdx, float dtdx, float dtdy, float dsdy)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setColorSpaceAgnostic(boolean agnostic)",
    "returnType" : "void",
    "comment" : "\n     * Sets the Surface to be color space agnostic. If a surface is color space agnostic,\n     * the color can be interpreted in any color space.\n     * @param agnostic A boolean to indicate whether the surface is color space agnostic\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setWindowCrop(Rect crop)",
    "returnType" : "void",
    "comment" : "\n     * Bounds the surface and its children to the bounds specified. Size of the surface will be\n     * ignored and only the crop and buffer size will be used to determine the bounds of the\n     * surface. If no crop is specified and the surface has no buffer, the surface bounds is only\n     * constrained by the size of its parent bounds.\n     *\n     * @param crop Bounds of the crop to apply.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOpaque(boolean isOpaque)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSecure(boolean isSecure)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getWidth()",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getHeight()",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public View getLocalOwnerView()",
    "returnType" : "View",
    "comment" : "\n     * Gets the local view that owns this surface.\n     *\n     * @return The owner view.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void setDisplayPowerMode(IBinder displayToken, int mode)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static SurfaceControl.DisplayInfo getDisplayInfo(IBinder displayToken)",
    "returnType" : "SurfaceControl.DisplayInfo",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static SurfaceControl.DisplayConfig[] getDisplayConfigs(IBinder displayToken)",
    "returnType" : "SurfaceControl.DisplayConfig[]",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getActiveConfig(IBinder displayToken)",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static DisplayedContentSamplingAttributes getDisplayedContentSamplingAttributes(IBinder displayToken)",
    "returnType" : "DisplayedContentSamplingAttributes",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean setDisplayedContentSamplingEnabled(IBinder displayToken, boolean enable, int componentMask, int maxFrames)",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static DisplayedContentSample getDisplayedContentSample(IBinder displayToken, long maxFrames, long timestamp)",
    "returnType" : "DisplayedContentSample",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean setDesiredDisplayConfigSpecs(IBinder displayToken, SurfaceControl.DesiredDisplayConfigSpecs desiredDisplayConfigSpecs)",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static SurfaceControl.DesiredDisplayConfigSpecs getDesiredDisplayConfigSpecs(IBinder displayToken)",
    "returnType" : "SurfaceControl.DesiredDisplayConfigSpecs",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int[] getDisplayColorModes(IBinder displayToken)",
    "returnType" : "int[]",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static SurfaceControl.DisplayPrimaries getDisplayNativePrimaries(IBinder displayToken)",
    "returnType" : "SurfaceControl.DisplayPrimaries",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getActiveColorMode(IBinder displayToken)",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean setActiveColorMode(IBinder displayToken, int colorMode)",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ColorSpace[] getCompositionColorSpaces()",
    "returnType" : "ColorSpace[]",
    "comment" : "\n     * Returns an array of color spaces with 2 elements. The first color space is the\n     * default color space and second one is wide color gamut color space.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setAutoLowLatencyMode(IBinder displayToken, boolean on)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setGameContentType(IBinder displayToken, boolean on)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setDisplayProjection(IBinder displayToken, int orientation, Rect layerStackRect, Rect displayRect)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setDisplayLayerStack(IBinder displayToken, int layerStack)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setDisplaySurface(IBinder displayToken, Surface surface)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setDisplaySize(IBinder displayToken, int width, int height)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Display.HdrCapabilities getHdrCapabilities(IBinder displayToken)",
    "returnType" : "Display.HdrCapabilities",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean getAutoLowLatencyModeSupport(IBinder displayToken)",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean getGameContentTypeSupport(IBinder displayToken)",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static IBinder createDisplay(String name, boolean secure)",
    "returnType" : "IBinder",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void destroyDisplay(IBinder displayToken)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static long[] getPhysicalDisplayIds()",
    "returnType" : "long[]",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static IBinder getPhysicalDisplayToken(long physicalDisplayId)",
    "returnType" : "IBinder",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static IBinder getInternalDisplayToken()",
    "returnType" : "IBinder",
    "comment" : "\n     * TODO(b/116025192): Remove this stopgap once framework is display-agnostic.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void screenshot(IBinder display, Surface consumer)",
    "returnType" : "void",
    "comment" : "\n     * @see SurfaceControl#screenshot(IBinder, Surface, Rect, int, int, boolean, int)\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void screenshot(IBinder display, Surface consumer, Rect sourceCrop, int width, int height, boolean useIdentityTransform, int rotation)",
    "returnType" : "void",
    "comment" : "\n     * Copy the current screen contents into the provided {@link Surface}\n     *\n     * @param consumer The {@link Surface} to take the screenshot into.\n     * @see SurfaceControl#screenshotToBuffer(IBinder, Rect, int, int, boolean, int)\n     * @hide\n     ",
    "links" : [ "Surface", "Surface" ]
  }, {
    "name" : "public static Bitmap screenshot(Rect sourceCrop, int width, int height, int rotation)",
    "returnType" : "Bitmap",
    "comment" : "\n     * @see SurfaceControl#screenshot(Rect, int, int, boolean, int)}\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Bitmap screenshot(Rect sourceCrop, int width, int height, boolean useIdentityTransform, int rotation)",
    "returnType" : "Bitmap",
    "comment" : "\n     * Copy the current screen contents into a hardware bitmap and return it.\n     * Note: If you want to modify the Bitmap in software, you will need to copy the Bitmap into\n     * a software Bitmap using {@link Bitmap#copy(Bitmap.Config, boolean)}\n     *\n     * CAVEAT: Versions of screenshot that return a {@link Bitmap} can be extremely slow; avoid use\n     * unless absolutely necessary; prefer the versions that use a {@link Surface} such as\n     * {@link SurfaceControl#screenshot(IBinder, Surface)} or {@link GraphicBuffer} such as\n     * {@link SurfaceControl#screenshotToBuffer(IBinder, Rect, int, int, boolean, int)}.\n     *\n     * @see SurfaceControl#screenshotToBuffer(IBinder, Rect, int, int, boolean, int)}\n     * @hide\n     ",
    "links" : [ "Bitmap#copy", "Bitmap", "Surface", "SurfaceControl#screenshot", "GraphicBuffer", "SurfaceControl#screenshotToBuffer" ]
  }, {
    "name" : "public static ScreenshotGraphicBuffer screenshotToBuffer(IBinder display, Rect sourceCrop, int width, int height, boolean useIdentityTransform, int rotation)",
    "returnType" : "ScreenshotGraphicBuffer",
    "comment" : "\n     * Captures all the surfaces in a display and returns a {@link GraphicBuffer} with the content.\n     *\n     * @param display              The display to take the screenshot of.\n     * @param sourceCrop           The portion of the screen to capture into the Bitmap; caller may\n     *                             pass in 'new Rect()' if no cropping is desired.\n     * @param width                The desired width of the returned bitmap; the raw screen will be\n     *                             scaled down to this size; caller may pass in 0 if no scaling is\n     *                             desired.\n     * @param height               The desired height of the returned bitmap; the raw screen will\n     *                             be scaled down to this size; caller may pass in 0 if no scaling\n     *                             is desired.\n     * @param useIdentityTransform Replace whatever transformation (rotation, scaling, translation)\n     *                             the surface layers are currently using with the identity\n     *                             transformation while taking the screenshot.\n     * @param rotation             Apply a custom clockwise rotation to the screenshot, i.e.\n     *                             Surface.ROTATION_0,90,180,270. SurfaceFlinger will always take\n     *                             screenshots in its native portrait orientation by default, so\n     *                             this is useful for returning screenshots that are independent of\n     *                             device orientation.\n     * @return Returns a GraphicBuffer that contains the captured content.\n     * @hide\n     ",
    "links" : [ "GraphicBuffer" ]
  }, {
    "name" : "public static ScreenshotGraphicBuffer screenshotToBufferWithSecureLayersUnsafe(IBinder display, Rect sourceCrop, int width, int height, boolean useIdentityTransform, int rotation)",
    "returnType" : "ScreenshotGraphicBuffer",
    "comment" : "\n     * Like screenshotToBuffer, but if the caller is AID_SYSTEM, allows\n     * for the capture of secure layers. This is used for the screen rotation\n     * animation where the system server takes screenshots but does\n     * not persist them or allow them to leave the server. However in other\n     * cases in the system server, we mostly want to omit secure layers\n     * like when we take a screenshot on behalf of the assistant.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void rotateCropForSF(Rect crop, int rot)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static ScreenshotGraphicBuffer captureLayers(SurfaceControl layer, Rect sourceCrop, float frameScale)",
    "returnType" : "ScreenshotGraphicBuffer",
    "comment" : "\n     * Captures a layer and its children and returns a {@link GraphicBuffer} with the content.\n     *\n     * @param layer            The root layer to capture.\n     * @param sourceCrop       The portion of the root surface to capture; caller may pass in 'new\n     *                         Rect()' or null if no cropping is desired. If the root layer does not\n     *                         have a buffer or a crop set, then a non-empty source crop must be\n     *                         specified.\n     * @param frameScale       The desired scale of the returned buffer; the raw\n     *                         screen will be scaled up/down.\n     *\n     * @return Returns a GraphicBuffer that contains the layer capture.\n     * @hide\n     ",
    "links" : [ "GraphicBuffer" ]
  }, {
    "name" : "public static ScreenshotGraphicBuffer captureLayers(SurfaceControl layer, Rect sourceCrop, float frameScale, int format)",
    "returnType" : "ScreenshotGraphicBuffer",
    "comment" : "\n     * Captures a layer and its children and returns a {@link GraphicBuffer} with the content.\n     *\n     * @param layer            The root layer to capture.\n     * @param sourceCrop       The portion of the root surface to capture; caller may pass in 'new\n     *                         Rect()' or null if no cropping is desired. If the root layer does not\n     *                         have a buffer or a crop set, then a non-empty source crop must be\n     *                         specified.\n     * @param frameScale       The desired scale of the returned buffer; the raw\n     *                         screen will be scaled up/down.\n     * @param format           The desired pixel format of the returned buffer.\n     *\n     * @return Returns a GraphicBuffer that contains the layer capture.\n     * @hide\n     ",
    "links" : [ "GraphicBuffer" ]
  }, {
    "name" : "public static ScreenshotGraphicBuffer captureLayersExcluding(SurfaceControl layer, Rect sourceCrop, float frameScale, int format, SurfaceControl[] exclude)",
    "returnType" : "ScreenshotGraphicBuffer",
    "comment" : "\n     * Like {@link captureLayers} but with an array of layer handles to exclude.\n     * @hide\n     ",
    "links" : [ "captureLayers" ]
  }, {
    "name" : "public static boolean getProtectedContentSupport()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether protected content is supported in GPU composition.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean getDisplayBrightnessSupport(IBinder displayToken)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether brightness operations are supported on a display.\n     *\n     * @param displayToken\n     *      The token for the display.\n     *\n     * @return Whether brightness operations are supported on the display.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean setDisplayBrightness(IBinder displayToken, float brightness)",
    "returnType" : "boolean",
    "comment" : "\n     * Sets the brightness of a display.\n     *\n     * @param displayToken\n     *      The token for the display whose brightness is set.\n     * @param brightness\n     *      A number between 0.0f (minimum brightness) and 1.0f (maximum brightness), or -1.0f to\n     *      turn the backlight off.\n     *\n     * @return Whether the method succeeded or not.\n     *\n     * @throws IllegalArgumentException if:\n     *      - displayToken is null;\n     *      - brightness is NaN or greater than 1.0f.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static SurfaceControl mirrorSurface(SurfaceControl mirrorOf)",
    "returnType" : "SurfaceControl",
    "comment" : "\n     * Creates a mirrored hierarchy for the mirrorOf {@link SurfaceControl}\n     *\n     * Real Hierarchy    Mirror\n     *                     SC (value that's returned)\n     *                      |\n     *      A               A'\n     *      |               |\n     *      B               B'\n     *\n     * @param mirrorOf The root of the hierarchy that should be mirrored.\n     * @return A SurfaceControl that's the parent of the root of the mirrored hierarchy.\n     *\n     * @hide\n     ",
    "links" : [ "SurfaceControl" ]
  }, {
    "name" : "private static void validateColorArg(@Size(4) float[] color)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void setGlobalShadowSettings(@Size(4) float[] ambientColor, @Size(4) float[] spotColor, float lightPosY, float lightPosZ, float lightRadius)",
    "returnType" : "void",
    "comment" : "\n     * Sets the global configuration for all the shadows drawn by SurfaceFlinger. Shadow follows\n     * material design guidelines.\n     *\n     * @param ambientColor Color applied to the ambient shadow. The alpha is premultiplied. A\n     *                     float array with four values to represent r, g, b, a in range [0..1]\n     * @param spotColor Color applied to the spot shadow. The alpha is premultiplied. The position\n     *                  of the spot shadow depends on the light position. A float array with\n     *                  four values to represent r, g, b, a in range [0..1]\n     * @param lightPosY Y axis position of the light used to cast the spot shadow in pixels.\n     * @param lightPosZ Z axis position of the light used to cast the spot shadow in pixels. The X\n     *                  axis position is set to the display width / 2.\n     * @param lightRadius Radius of the light casting the shadow in pixels.\n     *[\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static long acquireFrameRateFlexibilityToken()",
    "returnType" : "long",
    "comment" : "\n     * Acquire a frame rate flexibility token, which allows surface flinger to freely switch display\n     * frame rates. This is used by CTS tests to put the device in a consistent state. See\n     * ISurfaceComposer::acquireFrameRateFlexibilityToken(). The caller must have the\n     * ACCESS_SURFACE_FLINGER permission, or else the call will fail, returning 0.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void releaseFrameRateFlexibilityToken(long token)",
    "returnType" : "void",
    "comment" : "\n     * Release a frame rate flexibility token.\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "mReparentListeners", "mCloseGuard", "mName", "mNativeObject", "mNativeHandle", "mLock", "mWidth", "mHeight", "mLocalOwnerView", "sGlobalTransaction", "sTransactionNestCount", "HIDDEN", "SECURE", "NON_PREMULTIPLIED", "OPAQUE", "PROTECTED_APP", "CURSOR_WINDOW", "NO_COLOR_FILL", "FX_SURFACE_NORMAL", "FX_SURFACE_EFFECT", "FX_SURFACE_CONTAINER", "FX_SURFACE_BLAST", "FX_SURFACE_MASK", "SURFACE_HIDDEN", "SURFACE_OPAQUE", "POWER_MODE_OFF", "POWER_MODE_DOZE", "POWER_MODE_NORMAL", "POWER_MODE_DOZE_SUSPEND", "POWER_MODE_ON_SUSPEND", "WINDOW_TYPE_DONT_SCREENSHOT", "INTERNAL_DATASPACE_SRGB", "INTERNAL_DATASPACE_DISPLAY_P3", "INTERNAL_DATASPACE_SCRGB", "METADATA_OWNER_UID", "METADATA_WINDOW_TYPE", "METADATA_TASK_ID", "METADATA_MOUSE_CURSOR", "METADATA_ACCESSIBILITY_ID", "CREATOR" ],
  "methodNames" : [ "private static native long nativeCreate(SurfaceSession session, String name, int w, int h, int format, int flags, long parentObject, Parcel metadata) throws OutOfResourcesException", "private static native long nativeReadFromParcel(Parcel in)", "private static native long nativeCopyFromSurfaceControl(long nativeObject)", "private static native void nativeWriteToParcel(long nativeObject, Parcel out)", "private static native void nativeRelease(long nativeObject)", "private static native void nativeDisconnect(long nativeObject)", "private static native ScreenshotGraphicBuffer nativeScreenshot(IBinder displayToken, Rect sourceCrop, int width, int height, boolean useIdentityTransform, int rotation, boolean captureSecureLayers)", "private static native ScreenshotGraphicBuffer nativeCaptureLayers(IBinder displayToken, long layerObject, Rect sourceCrop, float frameScale, long[] excludeLayerObjects, int format)", "private static native long nativeMirrorSurface(long mirrorOfObject)", "private static native long nativeCreateTransaction()", "private static native long nativeGetNativeTransactionFinalizer()", "private static native void nativeApplyTransaction(long transactionObj, boolean sync)", "private static native void nativeMergeTransaction(long transactionObj, long otherTransactionObj)", "private static native void nativeSetAnimationTransaction(long transactionObj)", "private static native void nativeSetEarlyWakeup(long transactionObj)", "private static native void nativeSetEarlyWakeupStart(long transactionObj)", "private static native void nativeSetEarlyWakeupEnd(long transactionObj)", "private static native void nativeSetLayer(long transactionObj, long nativeObject, int zorder)", "private static native void nativeSetRelativeLayer(long transactionObj, long nativeObject, long relativeToObject, int zorder)", "private static native void nativeSetPosition(long transactionObj, long nativeObject, float x, float y)", "private static native void nativeSetSize(long transactionObj, long nativeObject, int w, int h)", "private static native void nativeSetTransparentRegionHint(long transactionObj, long nativeObject, Region region)", "private static native void nativeSetAlpha(long transactionObj, long nativeObject, float alpha)", "private static native void nativeSetMatrix(long transactionObj, long nativeObject, float dsdx, float dtdx, float dtdy, float dsdy)", "private static native void nativeSetColorTransform(long transactionObj, long nativeObject, float[] matrix, float[] translation)", "private static native void nativeSetColorSpaceAgnostic(long transactionObj, long nativeObject, boolean agnostic)", "private static native void nativeSetGeometry(long transactionObj, long nativeObject, Rect sourceCrop, Rect dest, long orientation)", "private static native void nativeSetColor(long transactionObj, long nativeObject, float[] color)", "private static native void nativeSetFlags(long transactionObj, long nativeObject, int flags, int mask)", "private static native void nativeSetFrameRateSelectionPriority(long transactionObj, long nativeObject, int priority)", "private static native void nativeSetWindowCrop(long transactionObj, long nativeObject, int l, int t, int r, int b)", "private static native void nativeSetCornerRadius(long transactionObj, long nativeObject, float cornerRadius)", "private static native void nativeSetBackgroundBlurRadius(long transactionObj, long nativeObject, int blurRadius)", "private static native void nativeSetLayerStack(long transactionObj, long nativeObject, int layerStack)", "private static native boolean nativeClearContentFrameStats(long nativeObject)", "private static native boolean nativeGetContentFrameStats(long nativeObject, WindowContentFrameStats outStats)", "private static native boolean nativeClearAnimationFrameStats()", "private static native boolean nativeGetAnimationFrameStats(WindowAnimationFrameStats outStats)", "private static native long[] nativeGetPhysicalDisplayIds()", "private static native IBinder nativeGetPhysicalDisplayToken(long physicalDisplayId)", "private static native IBinder nativeCreateDisplay(String name, boolean secure)", "private static native void nativeDestroyDisplay(IBinder displayToken)", "private static native void nativeSetDisplaySurface(long transactionObj, IBinder displayToken, long nativeSurfaceObject)", "private static native void nativeSetDisplayLayerStack(long transactionObj, IBinder displayToken, int layerStack)", "private static native void nativeSetDisplayProjection(long transactionObj, IBinder displayToken, int orientation, int l, int t, int r, int b, int L, int T, int R, int B)", "private static native void nativeSetDisplaySize(long transactionObj, IBinder displayToken, int width, int height)", "private static native SurfaceControl.DisplayInfo nativeGetDisplayInfo(IBinder displayToken)", "private static native SurfaceControl.DisplayConfig[] nativeGetDisplayConfigs(IBinder displayToken)", "private static native DisplayedContentSamplingAttributes nativeGetDisplayedContentSamplingAttributes(IBinder displayToken)", "private static native boolean nativeSetDisplayedContentSamplingEnabled(IBinder displayToken, boolean enable, int componentMask, int maxFrames)", "private static native DisplayedContentSample nativeGetDisplayedContentSample(IBinder displayToken, long numFrames, long timestamp)", "private static native int nativeGetActiveConfig(IBinder displayToken)", "private static native boolean nativeSetDesiredDisplayConfigSpecs(IBinder displayToken, SurfaceControl.DesiredDisplayConfigSpecs desiredDisplayConfigSpecs)", "private static native SurfaceControl.DesiredDisplayConfigSpecs nativeGetDesiredDisplayConfigSpecs(IBinder displayToken)", "private static native int[] nativeGetDisplayColorModes(IBinder displayToken)", "private static native SurfaceControl.DisplayPrimaries nativeGetDisplayNativePrimaries(IBinder displayToken)", "private static native int[] nativeGetCompositionDataspaces()", "private static native int nativeGetActiveColorMode(IBinder displayToken)", "private static native boolean nativeSetActiveColorMode(IBinder displayToken, int colorMode)", "private static native void nativeSetAutoLowLatencyMode(IBinder displayToken, boolean on)", "private static native void nativeSetGameContentType(IBinder displayToken, boolean on)", "private static native void nativeSetDisplayPowerMode(IBinder displayToken, int mode)", "private static native void nativeDeferTransactionUntil(long transactionObj, long nativeObject, long barrierObject, long frame)", "private static native void nativeDeferTransactionUntilSurface(long transactionObj, long nativeObject, long surfaceObject, long frame)", "private static native void nativeReparentChildren(long transactionObj, long nativeObject, long newParentObject)", "private static native void nativeReparent(long transactionObj, long nativeObject, long newParentNativeObject)", "private static native void nativeSeverChildren(long transactionObj, long nativeObject)", "private static native void nativeSetOverrideScalingMode(long transactionObj, long nativeObject, int scalingMode)", "private static native Display.HdrCapabilities nativeGetHdrCapabilities(IBinder displayToken)", "private static native boolean nativeGetAutoLowLatencyModeSupport(IBinder displayToken)", "private static native boolean nativeGetGameContentTypeSupport(IBinder displayToken)", "private static native void nativeSetInputWindowInfo(long transactionObj, long nativeObject, InputWindowHandle handle)", "private static native boolean nativeGetProtectedContentSupport()", "private static native void nativeSetMetadata(long transactionObj, long nativeObject, int key, Parcel data)", "private static native void nativeSyncInputWindows(long transactionObj)", "private static native boolean nativeGetDisplayBrightnessSupport(IBinder displayToken)", "private static native boolean nativeSetDisplayBrightness(IBinder displayToken, float brightness)", "private static native long nativeReadTransactionFromParcel(Parcel in)", "private static native void nativeWriteTransactionToParcel(long nativeObject, Parcel out)", "private static native void nativeSetShadowRadius(long transactionObj, long nativeObject, float shadowRadius)", "private static native void nativeSetGlobalShadowSettings(@Size(4) float[] ambientColor, @Size(4) float[] spotColor, float lightPosY, float lightPosZ, float lightRadius)", "private static native void nativeSetFrameRate(long transactionObj, long nativeObject, float frameRate, int compatibility)", "private static native long nativeGetHandle(long nativeObject)", "private static native long nativeAcquireFrameRateFlexibilityToken()", "private static native void nativeReleaseFrameRateFlexibilityToken(long token)", "private static native void nativeSetFixedTransformHint(long transactionObj, long nativeObject, int transformHint)", "public boolean addOnReparentListener(@NonNull OnReparentListener listener)", "public boolean removeOnReparentListener(@NonNull OnReparentListener listener)", "private void assignNativeObject(long nativeObject, String callsite)", "public void copyFrom(@NonNull SurfaceControl other, String callsite)", "public void readFromParcel(Parcel in)", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)", "public boolean isSameSurface(@NonNull SurfaceControl other)", "public void dumpDebug(ProtoOutputStream proto, long fieldId)", "protected void finalize() throws Throwable", "public void release()", "public void disconnect()", "private void checkNotReleased()", "public boolean isValid()", "public static void openTransaction()", "public static void mergeToGlobalTransaction(Transaction t)", "public static void closeTransaction()", "public void deferTransactionUntil(SurfaceControl barrier, long frame)", "public void reparentChildren(SurfaceControl newParent)", "public void detachChildren()", "public void setOverrideScalingMode(int scalingMode)", "public void setLayer(int zorder)", "public void setPosition(float x, float y)", "public void setBufferSize(int w, int h)", "public void hide()", "public void show()", "public void setTransparentRegionHint(Region region)", "public boolean clearContentFrameStats()", "public boolean getContentFrameStats(WindowContentFrameStats outStats)", "public static boolean clearAnimationFrameStats()", "public static boolean getAnimationFrameStats(WindowAnimationFrameStats outStats)", "public void setAlpha(float alpha)", "public void setMatrix(float dsdx, float dtdx, float dtdy, float dsdy)", "public void setColorSpaceAgnostic(boolean agnostic)", "public void setWindowCrop(Rect crop)", "public void setOpaque(boolean isOpaque)", "public void setSecure(boolean isSecure)", "public int getWidth()", "public int getHeight()", "public View getLocalOwnerView()", "public String toString()", "public static void setDisplayPowerMode(IBinder displayToken, int mode)", "public static SurfaceControl.DisplayInfo getDisplayInfo(IBinder displayToken)", "public static SurfaceControl.DisplayConfig[] getDisplayConfigs(IBinder displayToken)", "public static int getActiveConfig(IBinder displayToken)", "public static DisplayedContentSamplingAttributes getDisplayedContentSamplingAttributes(IBinder displayToken)", "public static boolean setDisplayedContentSamplingEnabled(IBinder displayToken, boolean enable, int componentMask, int maxFrames)", "public static DisplayedContentSample getDisplayedContentSample(IBinder displayToken, long maxFrames, long timestamp)", "public static boolean setDesiredDisplayConfigSpecs(IBinder displayToken, SurfaceControl.DesiredDisplayConfigSpecs desiredDisplayConfigSpecs)", "public static SurfaceControl.DesiredDisplayConfigSpecs getDesiredDisplayConfigSpecs(IBinder displayToken)", "public static int[] getDisplayColorModes(IBinder displayToken)", "public static SurfaceControl.DisplayPrimaries getDisplayNativePrimaries(IBinder displayToken)", "public static int getActiveColorMode(IBinder displayToken)", "public static boolean setActiveColorMode(IBinder displayToken, int colorMode)", "public static ColorSpace[] getCompositionColorSpaces()", "public static void setAutoLowLatencyMode(IBinder displayToken, boolean on)", "public static void setGameContentType(IBinder displayToken, boolean on)", "public static void setDisplayProjection(IBinder displayToken, int orientation, Rect layerStackRect, Rect displayRect)", "public static void setDisplayLayerStack(IBinder displayToken, int layerStack)", "public static void setDisplaySurface(IBinder displayToken, Surface surface)", "public static void setDisplaySize(IBinder displayToken, int width, int height)", "public static Display.HdrCapabilities getHdrCapabilities(IBinder displayToken)", "public static boolean getAutoLowLatencyModeSupport(IBinder displayToken)", "public static boolean getGameContentTypeSupport(IBinder displayToken)", "public static IBinder createDisplay(String name, boolean secure)", "public static void destroyDisplay(IBinder displayToken)", "public static long[] getPhysicalDisplayIds()", "public static IBinder getPhysicalDisplayToken(long physicalDisplayId)", "public static IBinder getInternalDisplayToken()", "public static void screenshot(IBinder display, Surface consumer)", "public static void screenshot(IBinder display, Surface consumer, Rect sourceCrop, int width, int height, boolean useIdentityTransform, int rotation)", "public static Bitmap screenshot(Rect sourceCrop, int width, int height, int rotation)", "public static Bitmap screenshot(Rect sourceCrop, int width, int height, boolean useIdentityTransform, int rotation)", "public static ScreenshotGraphicBuffer screenshotToBuffer(IBinder display, Rect sourceCrop, int width, int height, boolean useIdentityTransform, int rotation)", "public static ScreenshotGraphicBuffer screenshotToBufferWithSecureLayersUnsafe(IBinder display, Rect sourceCrop, int width, int height, boolean useIdentityTransform, int rotation)", "private static void rotateCropForSF(Rect crop, int rot)", "public static ScreenshotGraphicBuffer captureLayers(SurfaceControl layer, Rect sourceCrop, float frameScale)", "public static ScreenshotGraphicBuffer captureLayers(SurfaceControl layer, Rect sourceCrop, float frameScale, int format)", "public static ScreenshotGraphicBuffer captureLayersExcluding(SurfaceControl layer, Rect sourceCrop, float frameScale, int format, SurfaceControl[] exclude)", "public static boolean getProtectedContentSupport()", "public static boolean getDisplayBrightnessSupport(IBinder displayToken)", "public static boolean setDisplayBrightness(IBinder displayToken, float brightness)", "public static SurfaceControl mirrorSurface(SurfaceControl mirrorOf)", "private static void validateColorArg(@Size(4) float[] color)", "public static void setGlobalShadowSettings(@Size(4) float[] ambientColor, @Size(4) float[] spotColor, float lightPosY, float lightPosZ, float lightRadius)", "public static long acquireFrameRateFlexibilityToken()", "public static void releaseFrameRateFlexibilityToken(long token)" ]
}