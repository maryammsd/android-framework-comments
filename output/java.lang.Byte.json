{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/lang/Byte.java",
  "packageName" : "java.lang",
  "className" : "Byte",
  "comment" : "\n *\n * The {@code Byte} class wraps a value of primitive type {@code byte}\n * in an object.  An object of type {@code Byte} contains a single\n * field whose type is {@code byte}.\n *\n * <p>In addition, this class provides several methods for converting\n * a {@code byte} to a {@code String} and a {@code String} to a {@code\n * byte}, as well as other constants and methods useful when dealing\n * with a {@code byte}.\n *\n * <!-- Android-removed: paragraph on ValueBased\n * <p>This is a <a href=\"{@docRoot}/java.base/java/lang/doc-files/ValueBased.html\">value-based</a>\n * class; programmers should treat instances that are\n * {@linkplain #equals(Object) equal} as interchangeable and should not\n * use instances for synchronization, or unpredictable behavior may\n * occur. For example, in a future release, synchronization may fail.\n *  -->\n *\n * @author  Nakul Saraiya\n * @author  Joseph D. Darcy\n * @see     java.lang.Number\n * @since   1.1\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "MIN_VALUE",
    "type" : "byte",
    "comment" : "\n     * A constant holding the minimum value a {@code byte} can\n     * have, -2<sup>7</sup>.\n     ",
    "links" : [ ]
  }, {
    "name" : "MAX_VALUE",
    "type" : "byte",
    "comment" : "\n     * A constant holding the maximum value a {@code byte} can\n     * have, 2<sup>7</sup>-1.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE",
    "type" : "Class<Byte>",
    "comment" : "\n     * The {@code Class} instance representing the primitive type\n     * {@code byte}.\n     ",
    "links" : [ ]
  }, {
    "name" : "value",
    "type" : "byte",
    "comment" : "\n     * The value of the {@code Byte}.\n     *\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "SIZE",
    "type" : "int",
    "comment" : "\n     * The number of bits used to represent a {@code byte} value in two's\n     * complement binary form.\n     *\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "BYTES",
    "type" : "int",
    "comment" : "\n     * The number of bytes used to represent a {@code byte} value in two's\n     * complement binary form.\n     *\n     * @since 1.8\n     ",
    "links" : [ ]
  }, {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : " use serialVersionUID from JDK 1.1. for interoperability ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static String toString(byte b)",
    "returnType" : "String",
    "comment" : "\n     * Returns a new {@code String} object representing the\n     * specified {@code byte}. The radix is assumed to be 10.\n     *\n     * @param b the {@code byte} to be converted\n     * @return the string representation of the specified {@code byte}\n     * @see java.lang.Integer#toString(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Optional<DynamicConstantDesc<Byte>> describeConstable()",
    "returnType" : "Optional<DynamicConstantDesc<Byte>>",
    "comment" : "\n     * Returns an {@link Optional} containing the nominal descriptor for this\n     * instance.\n     *\n     * @return an {@link Optional} describing the {@linkplain Byte} instance\n     * @since 15\n     * @hide\n     ",
    "links" : [ "java.util.Optional" ]
  }, {
    "name" : "public static Byte valueOf(byte b)",
    "returnType" : "Byte",
    "comment" : "\n     * Returns a {@code Byte} instance representing the specified\n     * {@code byte} value.\n     * If a new {@code Byte} instance is not required, this method\n     * should generally be used in preference to the constructor\n     * {@link #Byte(byte)}, as this method is likely to yield\n     * significantly better space and time performance since\n     * all byte values are cached.\n     *\n     * @param  b a byte value.\n     * @return a {@code Byte} instance representing {@code b}.\n     * @since  1.5\n     ",
    "links" : [ "#Byte(byte)" ]
  }, {
    "name" : "public static byte parseByte(String s, int radix) throws NumberFormatException",
    "returnType" : "byte",
    "comment" : "\n     * Parses the string argument as a signed {@code byte} in the\n     * radix specified by the second argument. The characters in the\n     * string must all be digits, of the specified radix (as\n     * determined by whether {@link java.lang.Character#digit(char,\n     * int)} returns a nonnegative value) except that the first\n     * character may be an ASCII minus sign {@code '-'}\n     * ({@code '\\u005Cu002D'}) to indicate a negative value or an\n     * ASCII plus sign {@code '+'} ({@code '\\u005Cu002B'}) to\n     * indicate a positive value.  The resulting {@code byte} value is\n     * returned.\n     *\n     * <p>An exception of type {@code NumberFormatException} is\n     * thrown if any of the following situations occurs:\n     * <ul>\n     * <li> The first argument is {@code null} or is a string of\n     * length zero.\n     *\n     * <li> The radix is either smaller than {@link\n     * java.lang.Character#MIN_RADIX} or larger than {@link\n     * java.lang.Character#MAX_RADIX}.\n     *\n     * <li> Any character of the string is not a digit of the\n     * specified radix, except that the first character may be a minus\n     * sign {@code '-'} ({@code '\\u005Cu002D'}) or plus sign\n     * {@code '+'} ({@code '\\u005Cu002B'}) provided that the\n     * string is longer than length 1.\n     *\n     * <li> The value represented by the string is not a value of type\n     * {@code byte}.\n     * </ul>\n     *\n     * @param s         the {@code String} containing the\n     *                  {@code byte}\n     *                  representation to be parsed\n     * @param radix     the radix to be used while parsing {@code s}\n     * @return          the {@code byte} value represented by the string\n     *                   argument in the specified radix\n     * @throws          NumberFormatException If the string does\n     *                  not contain a parsable {@code byte}.\n     ",
    "links" : [ "java.lang.Character#digit(char", "java.lang.Character#MIN_RADIX", "java.lang.Character#MAX_RADIX" ]
  }, {
    "name" : "public static byte parseByte(String s) throws NumberFormatException",
    "returnType" : "byte",
    "comment" : "\n     * Parses the string argument as a signed decimal {@code\n     * byte}. The characters in the string must all be decimal digits,\n     * except that the first character may be an ASCII minus sign\n     * {@code '-'} ({@code '\\u005Cu002D'}) to indicate a negative\n     * value or an ASCII plus sign {@code '+'}\n     * ({@code '\\u005Cu002B'}) to indicate a positive value. The\n     * resulting {@code byte} value is returned, exactly as if the\n     * argument and the radix 10 were given as arguments to the {@link\n     * #parseByte(java.lang.String, int)} method.\n     *\n     * @param s         a {@code String} containing the\n     *                  {@code byte} representation to be parsed\n     * @return          the {@code byte} value represented by the\n     *                  argument in decimal\n     * @throws          NumberFormatException if the string does not\n     *                  contain a parsable {@code byte}.\n     ",
    "links" : [ "#parseByte(java.lang.String" ]
  }, {
    "name" : "public static Byte valueOf(String s, int radix) throws NumberFormatException",
    "returnType" : "Byte",
    "comment" : "\n     * Returns a {@code Byte} object holding the value\n     * extracted from the specified {@code String} when parsed\n     * with the radix given by the second argument. The first argument\n     * is interpreted as representing a signed {@code byte} in\n     * the radix specified by the second argument, exactly as if the\n     * argument were given to the {@link #parseByte(java.lang.String,\n     * int)} method. The result is a {@code Byte} object that\n     * represents the {@code byte} value specified by the string.\n     *\n     * <p> In other words, this method returns a {@code Byte} object\n     * equal to the value of:\n     *\n     * <blockquote>\n     * {@code new Byte(Byte.parseByte(s, radix))}\n     * </blockquote>\n     *\n     * @param s         the string to be parsed\n     * @param radix     the radix to be used in interpreting {@code s}\n     * @return          a {@code Byte} object holding the value\n     *                  represented by the string argument in the\n     *                  specified radix.\n     * @throws          NumberFormatException If the {@code String} does\n     *                  not contain a parsable {@code byte}.\n     ",
    "links" : [ "#parseByte(java.lang.String" ]
  }, {
    "name" : "public static Byte valueOf(String s) throws NumberFormatException",
    "returnType" : "Byte",
    "comment" : "\n     * Returns a {@code Byte} object holding the value\n     * given by the specified {@code String}. The argument is\n     * interpreted as representing a signed decimal {@code byte},\n     * exactly as if the argument were given to the {@link\n     * #parseByte(java.lang.String)} method. The result is a\n     * {@code Byte} object that represents the {@code byte}\n     * value specified by the string.\n     *\n     * <p> In other words, this method returns a {@code Byte} object\n     * equal to the value of:\n     *\n     * <blockquote>\n     * {@code new Byte(Byte.parseByte(s))}\n     * </blockquote>\n     *\n     * @param s         the string to be parsed\n     * @return          a {@code Byte} object holding the value\n     *                  represented by the string argument\n     * @throws          NumberFormatException If the {@code String} does\n     *                  not contain a parsable {@code byte}.\n     ",
    "links" : [ "#parseByte(java.lang.String)" ]
  }, {
    "name" : "public static Byte decode(String nm) throws NumberFormatException",
    "returnType" : "Byte",
    "comment" : "\n     * Decodes a {@code String} into a {@code Byte}.\n     * Accepts decimal, hexadecimal, and octal numbers given by\n     * the following grammar:\n     *\n     * <blockquote>\n     * <dl>\n     * <dt><i>DecodableString:</i>\n     * <dd><i>Sign<sub>opt</sub> DecimalNumeral</i>\n     * <dd><i>Sign<sub>opt</sub></i> {@code 0x} <i>HexDigits</i>\n     * <dd><i>Sign<sub>opt</sub></i> {@code 0X} <i>HexDigits</i>\n     * <dd><i>Sign<sub>opt</sub></i> {@code #} <i>HexDigits</i>\n     * <dd><i>Sign<sub>opt</sub></i> {@code 0} <i>OctalDigits</i>\n     *\n     * <dt><i>Sign:</i>\n     * <dd>{@code -}\n     * <dd>{@code +}\n     * </dl>\n     * </blockquote>\n     *\n     * <i>DecimalNumeral</i>, <i>HexDigits</i>, and <i>OctalDigits</i>\n     * are as defined in section {@jls 3.10.1} of\n     * <cite>The Java Language Specification</cite>,\n     * except that underscores are not accepted between digits.\n     *\n     * <p>The sequence of characters following an optional\n     * sign and/or radix specifier (\"{@code 0x}\", \"{@code 0X}\",\n     * \"{@code #}\", or leading zero) is parsed as by the {@code\n     * Byte.parseByte} method with the indicated radix (10, 16, or 8).\n     * This sequence of characters must represent a positive value or\n     * a {@link NumberFormatException} will be thrown.  The result is\n     * negated if first character of the specified {@code String} is\n     * the minus sign.  No whitespace characters are permitted in the\n     * {@code String}.\n     *\n     * @param     nm the {@code String} to decode.\n     * @return   a {@code Byte} object holding the {@code byte}\n     *          value represented by {@code nm}\n     * @throws  NumberFormatException  if the {@code String} does not\n     *            contain a parsable {@code byte}.\n     * @see java.lang.Byte#parseByte(java.lang.String, int)\n     ",
    "links" : [ "java.lang.NumberFormatException" ]
  }, {
    "name" : "public byte byteValue()",
    "returnType" : "byte",
    "comment" : "\n     * Returns the value of this {@code Byte} as a\n     * {@code byte}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public short shortValue()",
    "returnType" : "short",
    "comment" : "\n     * Returns the value of this {@code Byte} as a {@code short} after\n     * a widening primitive conversion.\n     * @jls 5.1.2 Widening Primitive Conversion\n     ",
    "links" : [ ]
  }, {
    "name" : "public int intValue()",
    "returnType" : "int",
    "comment" : "\n     * Returns the value of this {@code Byte} as an {@code int} after\n     * a widening primitive conversion.\n     * @jls 5.1.2 Widening Primitive Conversion\n     ",
    "links" : [ ]
  }, {
    "name" : "public long longValue()",
    "returnType" : "long",
    "comment" : "\n     * Returns the value of this {@code Byte} as a {@code long} after\n     * a widening primitive conversion.\n     * @jls 5.1.2 Widening Primitive Conversion\n     ",
    "links" : [ ]
  }, {
    "name" : "public float floatValue()",
    "returnType" : "float",
    "comment" : "\n     * Returns the value of this {@code Byte} as a {@code float} after\n     * a widening primitive conversion.\n     * @jls 5.1.2 Widening Primitive Conversion\n     ",
    "links" : [ ]
  }, {
    "name" : "public double doubleValue()",
    "returnType" : "double",
    "comment" : "\n     * Returns the value of this {@code Byte} as a {@code double}\n     * after a widening primitive conversion.\n     * @jls 5.1.2 Widening Primitive Conversion\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a {@code String} object representing this\n     * {@code Byte}'s value.  The value is converted to signed\n     * decimal representation and returned as a string, exactly as if\n     * the {@code byte} value were given as an argument to the\n     * {@link java.lang.Byte#toString(byte)} method.\n     *\n     * @return  a string representation of the value of this object in\n     *          base&nbsp;10.\n     ",
    "links" : [ "java.lang.Byte#toString(byte)" ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Returns a hash code for this {@code Byte}; equal to the result\n     * of invoking {@code intValue()}.\n     *\n     * @return a hash code value for this {@code Byte}\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int hashCode(byte value)",
    "returnType" : "int",
    "comment" : "\n     * Returns a hash code for a {@code byte} value; compatible with\n     * {@code Byte.hashCode()}.\n     *\n     * @param value the value to hash\n     * @return a hash code value for a {@code byte} value.\n     * @since 1.8\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "\n     * Compares this object to the specified object.  The result is\n     * {@code true} if and only if the argument is not\n     * {@code null} and is a {@code Byte} object that\n     * contains the same {@code byte} value as this object.\n     *\n     * @param obj       the object to compare with\n     * @return          {@code true} if the objects are the same;\n     *                  {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int compareTo(Byte anotherByte)",
    "returnType" : "int",
    "comment" : "\n     * Compares two {@code Byte} objects numerically.\n     *\n     * @param   anotherByte   the {@code Byte} to be compared.\n     * @return  the value {@code 0} if this {@code Byte} is\n     *          equal to the argument {@code Byte}; a value less than\n     *          {@code 0} if this {@code Byte} is numerically less\n     *          than the argument {@code Byte}; and a value greater than\n     *           {@code 0} if this {@code Byte} is numerically\n     *           greater than the argument {@code Byte} (signed\n     *           comparison).\n     * @since   1.2\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int compare(byte x, byte y)",
    "returnType" : "int",
    "comment" : "\n     * Compares two {@code byte} values numerically.\n     * The value returned is identical to what would be returned by:\n     * <pre>\n     *    Byte.valueOf(x).compareTo(Byte.valueOf(y))\n     * </pre>\n     *\n     * @param  x the first {@code byte} to compare\n     * @param  y the second {@code byte} to compare\n     * @return the value {@code 0} if {@code x == y};\n     *         a value less than {@code 0} if {@code x < y}; and\n     *         a value greater than {@code 0} if {@code x > y}\n     * @since 1.7\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int compareUnsigned(byte x, byte y)",
    "returnType" : "int",
    "comment" : "\n     * Compares two {@code byte} values numerically treating the values\n     * as unsigned.\n     *\n     * @param  x the first {@code byte} to compare\n     * @param  y the second {@code byte} to compare\n     * @return the value {@code 0} if {@code x == y}; a value less\n     *         than {@code 0} if {@code x < y} as unsigned values; and\n     *         a value greater than {@code 0} if {@code x > y} as\n     *         unsigned values\n     * @since 9\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int toUnsignedInt(byte x)",
    "returnType" : "int",
    "comment" : "\n     * Converts the argument to an {@code int} by an unsigned\n     * conversion.  In an unsigned conversion to an {@code int}, the\n     * high-order 24 bits of the {@code int} are zero and the\n     * low-order 8 bits are equal to the bits of the {@code byte} argument.\n     *\n     * Consequently, zero and positive {@code byte} values are mapped\n     * to a numerically equal {@code int} value and negative {@code\n     * byte} values are mapped to an {@code int} value equal to the\n     * input plus 2<sup>8</sup>.\n     *\n     * @param  x the value to convert to an unsigned {@code int}\n     * @return the argument converted to {@code int} by an unsigned\n     *         conversion\n     * @since 1.8\n     ",
    "links" : [ ]
  }, {
    "name" : "public static long toUnsignedLong(byte x)",
    "returnType" : "long",
    "comment" : "\n     * Converts the argument to a {@code long} by an unsigned\n     * conversion.  In an unsigned conversion to a {@code long}, the\n     * high-order 56 bits of the {@code long} are zero and the\n     * low-order 8 bits are equal to the bits of the {@code byte} argument.\n     *\n     * Consequently, zero and positive {@code byte} values are mapped\n     * to a numerically equal {@code long} value and negative {@code\n     * byte} values are mapped to a {@code long} value equal to the\n     * input plus 2<sup>8</sup>.\n     *\n     * @param  x the value to convert to an unsigned {@code long}\n     * @return the argument converted to {@code long} by an unsigned\n     *         conversion\n     * @since 1.8\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String toHexString(byte b, boolean upperCase)",
    "returnType" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static String toString(byte b)", "public Optional<DynamicConstantDesc<Byte>> describeConstable()", "public static Byte valueOf(byte b)", "public static byte parseByte(String s, int radix) throws NumberFormatException", "public static byte parseByte(String s) throws NumberFormatException", "public static Byte valueOf(String s, int radix) throws NumberFormatException", "public static Byte valueOf(String s) throws NumberFormatException", "public static Byte decode(String nm) throws NumberFormatException", "public byte byteValue()", "public short shortValue()", "public int intValue()", "public long longValue()", "public float floatValue()", "public double doubleValue()", "public String toString()", "public int hashCode()", "public static int hashCode(byte value)", "public boolean equals(Object obj)", "public int compareTo(Byte anotherByte)", "public static int compare(byte x, byte y)", "public static int compareUnsigned(byte x, byte y)", "public static int toUnsignedInt(byte x)", "public static long toUnsignedLong(byte x)", "public static String toHexString(byte b, boolean upperCase)" ],
  "variableNames" : [ "MIN_VALUE", "MAX_VALUE", "TYPE", "value", "SIZE", "BYTES", "serialVersionUID" ]
}