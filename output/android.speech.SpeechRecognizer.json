{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/speech/SpeechRecognizer.java",
  "packageName" : "android.speech",
  "className" : "SpeechRecognizer",
  "comment" : "\n * This class provides access to the speech recognition service. This service allows access to the\n * speech recognizer. Do not instantiate this class directly, instead, call\n * {@link SpeechRecognizer#createSpeechRecognizer(Context)}. This class's methods must be\n * invoked only from the main application thread. \n *\n * <p>The implementation of this API is likely to stream audio to remote servers to perform speech\n * recognition. As such this API is not intended to be used for continuous recognition, which would\n * consume a significant amount of battery and bandwidth.\n *\n * <p>Please note that the application must have {@link android.Manifest.permission#RECORD_AUDIO}\n * permission to use this class.\n ",
  "variables" : [ {
    "name" : "DBG",
    "type" : "boolean",
    "comment" : " DEBUG value to enable verbose debug prints ",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : " Log messages identifier ",
    "links" : [ ]
  }, {
    "name" : "RESULTS_RECOGNITION",
    "type" : "String",
    "comment" : "\n     * Key used to retrieve an {@code ArrayList<String>} from the {@link Bundle} passed to the\n     * {@link RecognitionListener#onResults(Bundle)} and\n     * {@link RecognitionListener#onPartialResults(Bundle)} methods. These strings are the possible\n     * recognition results, where the first element is the most likely candidate.\n     ",
    "links" : [ "android.os.Bundle", "android.speech.RecognitionListener#onPartialResults(Bundle)", "android.speech.RecognitionListener#onResults(Bundle)" ]
  }, {
    "name" : "CONFIDENCE_SCORES",
    "type" : "String",
    "comment" : "\n     * Key used to retrieve a float array from the {@link Bundle} passed to the\n     * {@link RecognitionListener#onResults(Bundle)} and\n     * {@link RecognitionListener#onPartialResults(Bundle)} methods. The array should be\n     * the same size as the ArrayList provided in {@link #RESULTS_RECOGNITION}, and should contain\n     * values ranging from 0.0 to 1.0, or -1 to represent an unavailable confidence score.\n     * <p>\n     * Confidence values close to 1.0 indicate high confidence (the speech recognizer is confident\n     * that the recognition result is correct), while values close to 0.0 indicate low confidence.\n     * <p>\n     * This value is optional and might not be provided.\n     ",
    "links" : [ "#RESULTS_RECOGNITION", "android.os.Bundle", "android.speech.RecognitionListener#onPartialResults(Bundle)", "android.speech.RecognitionListener#onResults(Bundle)" ]
  }, {
    "name" : "ERROR_NETWORK_TIMEOUT",
    "type" : "int",
    "comment" : " Network operation timed out. ",
    "links" : [ ]
  }, {
    "name" : "ERROR_NETWORK",
    "type" : "int",
    "comment" : " Other network related errors. ",
    "links" : [ ]
  }, {
    "name" : "ERROR_AUDIO",
    "type" : "int",
    "comment" : " Audio recording error. ",
    "links" : [ ]
  }, {
    "name" : "ERROR_SERVER",
    "type" : "int",
    "comment" : " Server sends error status. ",
    "links" : [ ]
  }, {
    "name" : "ERROR_CLIENT",
    "type" : "int",
    "comment" : " Other client side errors. ",
    "links" : [ ]
  }, {
    "name" : "ERROR_SPEECH_TIMEOUT",
    "type" : "int",
    "comment" : " No speech input ",
    "links" : [ ]
  }, {
    "name" : "ERROR_NO_MATCH",
    "type" : "int",
    "comment" : " No recognition result matched. ",
    "links" : [ ]
  }, {
    "name" : "ERROR_RECOGNIZER_BUSY",
    "type" : "int",
    "comment" : " RecognitionService busy. ",
    "links" : [ ]
  }, {
    "name" : "ERROR_INSUFFICIENT_PERMISSIONS",
    "type" : "int",
    "comment" : " Insufficient permissions ",
    "links" : [ ]
  }, {
    "name" : "MSG_START",
    "type" : "int",
    "comment" : " action codes ",
    "links" : [ ]
  }, {
    "name" : "MSG_STOP",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_CANCEL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_CHANGE_LISTENER",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IRecognitionService",
    "comment" : " The actual RecognitionService endpoint ",
    "links" : [ ]
  }, {
    "name" : "mConnection",
    "type" : "Connection",
    "comment" : " The connection to the actual service ",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : " Context with which the manager was created ",
    "links" : [ ]
  }, {
    "name" : "mServiceComponent",
    "type" : "ComponentName",
    "comment" : " Component to direct service intent to ",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : " Handler that will execute the main tasks ",
    "links" : [ ]
  }, {
    "name" : "mPendingTasks",
    "type" : "Queue<Message>",
    "comment" : "\n     * Temporary queue, saving the messages until the connection will be established, afterwards,\n     * only mHandler will receive the messages\n     ",
    "links" : [ ]
  }, {
    "name" : "mListener",
    "type" : "InternalListener",
    "comment" : " The Listener that will receive all the callbacks ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static boolean isRecognitionAvailable(final Context context)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks whether a speech recognition service is available on the system. If this method\n     * returns {@code false}, {@link SpeechRecognizer#createSpeechRecognizer(Context)} will\n     * fail.\n     * \n     * @param context with which {@code SpeechRecognizer} will be created\n     * @return {@code true} if recognition is available, {@code false} otherwise\n     ",
    "links" : [ "android.speech.SpeechRecognizer#createSpeechRecognizer(Context)" ]
  }, {
    "name" : "public static SpeechRecognizer createSpeechRecognizer(final Context context)",
    "returnType" : "SpeechRecognizer",
    "comment" : "\n     * Factory method to create a new {@code SpeechRecognizer}. Please note that\n     * {@link #setRecognitionListener(RecognitionListener)} should be called before dispatching any\n     * command to the created {@code SpeechRecognizer}, otherwise no notifications will be\n     * received.\n     *\n     * @param context in which to create {@code SpeechRecognizer}\n     * @return a new {@code SpeechRecognizer}\n     ",
    "links" : [ "#setRecognitionListener(RecognitionListener)" ]
  }, {
    "name" : "public static SpeechRecognizer createSpeechRecognizer(final Context context, final ComponentName serviceComponent)",
    "returnType" : "SpeechRecognizer",
    "comment" : "\n     * Factory method to create a new {@code SpeechRecognizer}. Please note that\n     * {@link #setRecognitionListener(RecognitionListener)} should be called before dispatching any\n     * command to the created {@code SpeechRecognizer}, otherwise no notifications will be\n     * received.\n     *\n     * Use this version of the method to specify a specific service to direct this\n     * {@link SpeechRecognizer} to. Normally you would not use this; use\n     * {@link #createSpeechRecognizer(Context)} instead to use the system default recognition\n     * service.\n     * \n     * @param context in which to create {@code SpeechRecognizer}\n     * @param serviceComponent the {@link ComponentName} of a specific service to direct this\n     *        {@code SpeechRecognizer} to\n     * @return a new {@code SpeechRecognizer}\n     ",
    "links" : [ "#createSpeechRecognizer(Context)", "android.speech.SpeechRecognizer", "android.content.ComponentName", "#setRecognitionListener(RecognitionListener)" ]
  }, {
    "name" : "public void setRecognitionListener(RecognitionListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Sets the listener that will receive all the callbacks. The previous unfinished commands will\n     * be executed with the old listener, while any following command will be executed with the new\n     * listener.\n     * \n     * @param listener listener that will receive all the callbacks from the created\n     *        {@link SpeechRecognizer}, this must not be null.\n     ",
    "links" : [ "android.speech.SpeechRecognizer" ]
  }, {
    "name" : "public void startListening(final Intent recognizerIntent)",
    "returnType" : "void",
    "comment" : "\n     * Starts listening for speech. Please note that\n     * {@link #setRecognitionListener(RecognitionListener)} should be called beforehand, otherwise\n     * no notifications will be received.\n     *\n     * @param recognizerIntent contains parameters for the recognition to be performed. The intent\n     *        may also contain optional extras, see {@link RecognizerIntent}. If these values are\n     *        not set explicitly, default values will be used by the recognizer.\n     ",
    "links" : [ "android.speech.RecognizerIntent", "#setRecognitionListener(RecognitionListener)" ]
  }, {
    "name" : "public void stopListening()",
    "returnType" : "void",
    "comment" : "\n     * Stops listening for speech. Speech captured so far will be recognized as if the user had\n     * stopped speaking at this point. Note that in the default case, this does not need to be\n     * called, as the speech endpointer will automatically stop the recognizer listening when it\n     * determines speech has completed. However, you can manipulate endpointer parameters directly\n     * using the intent extras defined in {@link RecognizerIntent}, in which case you may sometimes\n     * want to manually call this method to stop listening sooner. Please note that\n     * {@link #setRecognitionListener(RecognitionListener)} should be called beforehand, otherwise\n     * no notifications will be received.\n     ",
    "links" : [ "android.speech.RecognizerIntent", "#setRecognitionListener(RecognitionListener)" ]
  }, {
    "name" : "public void cancel()",
    "returnType" : "void",
    "comment" : "\n     * Cancels the speech recognition. Please note that\n     * {@link #setRecognitionListener(RecognitionListener)} should be called beforehand, otherwise\n     * no notifications will be received.\n     ",
    "links" : [ "#setRecognitionListener(RecognitionListener)" ]
  }, {
    "name" : "private static void checkIsCalledFromMainThread()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void putMessage(Message msg)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleStartListening(Intent recognizerIntent)",
    "returnType" : "void",
    "comment" : " sends the actual message to the service ",
    "links" : [ ]
  }, {
    "name" : "private void handleStopMessage()",
    "returnType" : "void",
    "comment" : " sends the actual message to the service ",
    "links" : [ ]
  }, {
    "name" : "private void handleCancelMessage()",
    "returnType" : "void",
    "comment" : " sends the actual message to the service ",
    "links" : [ ]
  }, {
    "name" : "private boolean checkOpenConnection()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleChangeListener(RecognitionListener listener)",
    "returnType" : "void",
    "comment" : " changes the listener ",
    "links" : [ ]
  }, {
    "name" : "public void destroy()",
    "returnType" : "void",
    "comment" : "\n     * Destroys the {@code SpeechRecognizer} object.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "DBG", "TAG", "RESULTS_RECOGNITION", "CONFIDENCE_SCORES", "ERROR_NETWORK_TIMEOUT", "ERROR_NETWORK", "ERROR_AUDIO", "ERROR_SERVER", "ERROR_CLIENT", "ERROR_SPEECH_TIMEOUT", "ERROR_NO_MATCH", "ERROR_RECOGNIZER_BUSY", "ERROR_INSUFFICIENT_PERMISSIONS", "MSG_START", "MSG_STOP", "MSG_CANCEL", "MSG_CHANGE_LISTENER", "mService", "mConnection", "mContext", "mServiceComponent", "mHandler", "mPendingTasks", "mListener" ],
  "methodNames" : [ "public static boolean isRecognitionAvailable(final Context context)", "public static SpeechRecognizer createSpeechRecognizer(final Context context)", "public static SpeechRecognizer createSpeechRecognizer(final Context context, final ComponentName serviceComponent)", "public void setRecognitionListener(RecognitionListener listener)", "public void startListening(final Intent recognizerIntent)", "public void stopListening()", "public void cancel()", "private static void checkIsCalledFromMainThread()", "private void putMessage(Message msg)", "private void handleStartListening(Intent recognizerIntent)", "private void handleStopMessage()", "private void handleCancelMessage()", "private boolean checkOpenConnection()", "private void handleChangeListener(RecognitionListener listener)", "public void destroy()" ]
}