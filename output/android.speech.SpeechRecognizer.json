{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/speech/SpeechRecognizer.java",
  "packageName" : "android.speech",
  "className" : "SpeechRecognizer",
  "comment" : "\n * This class provides access to the speech recognition service. This service allows access to the\n * speech recognizer. Do not instantiate this class directly, instead, call\n * {@link SpeechRecognizer#createSpeechRecognizer(Context)}, or\n * {@link SpeechRecognizer#createOnDeviceSpeechRecognizer(Context)}. This class's methods must be\n * invoked only from the main application thread.\n *\n * <p><strong>Important:</strong> the caller MUST invoke {@link #destroy()} on a\n * SpeechRecognizer object when it is no longer needed.\n *\n * <p>The implementation of this API is likely to stream audio to remote servers to perform speech\n * recognition. As such this API is not intended to be used for continuous recognition, which would\n * consume a significant amount of battery and bandwidth.\n *\n * <p>Please note that the application must have {@link android.Manifest.permission#RECORD_AUDIO}\n * permission to use this class.\n ",
  "links" : [ "android.speech.SpeechRecognizer#createSpeechRecognizer(Context)", "android.speech.SpeechRecognizer#createOnDeviceSpeechRecognizer(Context)", "android.Manifest.permission#RECORD_AUDIO", "#destroy()" ],
  "variables" : [ {
    "name" : "RESULTS_RECOGNITION",
    "type" : "String",
    "comment" : "\n     * Key used to retrieve an {@code ArrayList<String>} from the {@link Bundle} passed to the\n     * {@link RecognitionListener#onResults(Bundle)} and\n     * {@link RecognitionListener#onPartialResults(Bundle)} methods. These strings are the possible\n     * recognition results, where the first element is the most likely candidate.\n     ",
    "links" : [ "android.os.Bundle", "android.speech.RecognitionListener#onPartialResults(Bundle)", "android.speech.RecognitionListener#onResults(Bundle)" ]
  }, {
    "name" : "CONFIDENCE_SCORES",
    "type" : "String",
    "comment" : "\n     * Key used to retrieve a float array from the {@link Bundle} passed to the\n     * {@link RecognitionListener#onResults(Bundle)} and\n     * {@link RecognitionListener#onPartialResults(Bundle)} methods. The array should be\n     * the same size as the ArrayList provided in {@link #RESULTS_RECOGNITION}, and should contain\n     * values ranging from 0.0 to 1.0, or -1 to represent an unavailable confidence score.\n     * <p>\n     * Confidence values close to 1.0 indicate high confidence (the speech recognizer is confident\n     * that the recognition result is correct), while values close to 0.0 indicate low confidence.\n     * <p>\n     * This value is optional and might not be provided.\n     ",
    "links" : [ "#RESULTS_RECOGNITION", "android.os.Bundle", "android.speech.RecognitionListener#onPartialResults(Bundle)", "android.speech.RecognitionListener#onResults(Bundle)" ]
  }, {
    "name" : "RESULTS_ALTERNATIVES",
    "type" : "String",
    "comment" : "\n     * Key used to retrieve an ArrayList&lt;{@link AlternativeSpans}&gt; from the {@link Bundle}\n     * passed to the {@link RecognitionListener#onResults(Bundle)} and\n     * {@link RecognitionListener#onPartialResults(Bundle)} methods. The list should be the same\n     * size as the ArrayList provided in {@link #RESULTS_RECOGNITION}.\n     *\n     * <p> A single {@link SpeechRecognizer} result is represented as a {@link String}. For a\n     * specific span (substring) of the originally recognized result string the recognizer provides\n     * a list of alternative hypotheses in the form of an {@link AlternativeSpan} object.\n     * Alternatives for different spans of a result string are listed in an {@link AlternativeSpans}\n     * object. Each item from the ArrayList retrieved by this key corresponds to a single result\n     * string provided in {@link #RESULTS_RECOGNITION}.\n     *\n     * <p> This value is optional and might not be provided.\n     ",
    "links" : [ "#RESULTS_RECOGNITION", "android.os.Bundle", "android.speech.RecognitionListener#onPartialResults(Bundle)", "android.speech.SpeechRecognizer", "android.speech.AlternativeSpan", "String", "android.speech.AlternativeSpans", "android.speech.RecognitionListener#onResults(Bundle)" ]
  }, {
    "name" : "RECOGNITION_PARTS",
    "type" : "String",
    "comment" : "\n     * Key used to receive an ArrayList&lt;{@link RecognitionPart}&gt; object from the\n     * {@link Bundle} passed to the {@link RecognitionListener#onResults(Bundle)} and\n     * {@link RecognitionListener#onSegmentResults(Bundle)} methods.\n     *\n     * <p> A single {@link SpeechRecognizer} result is represented as a {@link String}. Each word of\n     * the resulting String, as well as any potential adjacent punctuation, is represented by a\n     * {@link RecognitionPart} item from the ArrayList retrieved by this key.\n     ",
    "links" : [ "android.os.Bundle", "android.speech.SpeechRecognizer", "android.speech.RecognitionPart", "String", "android.speech.RecognitionListener#onResults(Bundle)", "android.speech.RecognitionListener#onSegmentResults(Bundle)" ]
  }, {
    "name" : "DETECTED_LANGUAGE",
    "type" : "String",
    "comment" : "\n     * Key used to retrieve a {@link String} representation of the IETF language tag (as defined by\n     * BCP 47, e.g., \"en-US\", \"de-DE\") of the detected language of the most recent audio chunk.\n     *\n     * <p> This info is returned to the client in the {@link Bundle} passed to\n     * {@link RecognitionListener#onLanguageDetection(Bundle)} only if\n     * {@link RecognizerIntent#EXTRA_ENABLE_LANGUAGE_DETECTION} is set. Additionally, if\n     * {@link RecognizerIntent#EXTRA_LANGUAGE_DETECTION_ALLOWED_LANGUAGES} are listed,\n     * the detected language is constrained to be one from the list.\n     ",
    "links" : [ "android.os.Bundle", "android.speech.RecognitionListener#onLanguageDetection(Bundle)", "String", "android.speech.RecognizerIntent#EXTRA_ENABLE_LANGUAGE_DETECTION", "android.speech.RecognizerIntent#EXTRA_LANGUAGE_DETECTION_ALLOWED_LANGUAGES" ]
  }, {
    "name" : "LANGUAGE_DETECTION_CONFIDENCE_LEVEL",
    "type" : "String",
    "comment" : "\n     * Key used to retrieve the level of confidence of the detected language\n     * of the most recent audio chunk,\n     * represented by an {@code int} value prefixed by {@code LANGUAGE_DETECTION_CONFIDENCE_LEVEL_}.\n     *\n     * <p> This info is returned to the client in the {@link Bundle} passed to\n     * {@link RecognitionListener#onLanguageDetection(Bundle)} only if\n     * {@link RecognizerIntent#EXTRA_ENABLE_LANGUAGE_DETECTION} is set.\n     ",
    "links" : [ "android.os.Bundle", "android.speech.RecognitionListener#onLanguageDetection(Bundle)", "android.speech.RecognizerIntent#EXTRA_ENABLE_LANGUAGE_DETECTION" ]
  }, {
    "name" : "LANGUAGE_DETECTION_CONFIDENCE_LEVEL_UNKNOWN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LANGUAGE_DETECTION_CONFIDENCE_LEVEL_NOT_CONFIDENT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LANGUAGE_DETECTION_CONFIDENCE_LEVEL_CONFIDENT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LANGUAGE_DETECTION_CONFIDENCE_LEVEL_HIGHLY_CONFIDENT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TOP_LOCALE_ALTERNATIVES",
    "type" : "String",
    "comment" : "\n     * Key used to retrieve an ArrayList&lt;{@link String}&gt; containing representations of the\n     * IETF language tags (as defined by BCP 47, e.g., \"en-US\", \"en-UK\") denoting the alternative\n     * locales for the same language retrieved by the key {@link #DETECTED_LANGUAGE}.\n     *\n     * This info is returned to the client in the {@link Bundle} passed to\n     * {@link RecognitionListener#onLanguageDetection(Bundle)} only if\n     * {@link RecognizerIntent#EXTRA_ENABLE_LANGUAGE_DETECTION} is set.\n     ",
    "links" : [ "#DETECTED_LANGUAGE", "android.os.Bundle", "android.speech.RecognitionListener#onLanguageDetection(Bundle)", "String", "android.speech.RecognizerIntent#EXTRA_ENABLE_LANGUAGE_DETECTION" ]
  }, {
    "name" : "LANGUAGE_SWITCH_RESULT",
    "type" : "String",
    "comment" : "\n     * Key used to retrieve the result of the language switch of the most recent audio chunk,\n     * represented by an {@code int} value prefixed by {@code LANGUAGE_SWITCH_}.\n     *\n     * <p> This info is returned to the client in the {@link Bundle} passed to the\n     * {@link RecognitionListener#onLanguageDetection(Bundle)} only if\n     * {@link RecognizerIntent#EXTRA_ENABLE_LANGUAGE_SWITCH} is set.\n     ",
    "links" : [ "android.speech.RecognizerIntent#EXTRA_ENABLE_LANGUAGE_SWITCH", "android.os.Bundle", "android.speech.RecognitionListener#onLanguageDetection(Bundle)" ]
  }, {
    "name" : "LANGUAGE_SWITCH_RESULT_NOT_ATTEMPTED",
    "type" : "int",
    "comment" : " Switch not attempted. ",
    "links" : [ ]
  }, {
    "name" : "LANGUAGE_SWITCH_RESULT_SUCCEEDED",
    "type" : "int",
    "comment" : " Switch attempted and succeeded. ",
    "links" : [ ]
  }, {
    "name" : "LANGUAGE_SWITCH_RESULT_FAILED",
    "type" : "int",
    "comment" : " Switch attempted and failed. ",
    "links" : [ ]
  }, {
    "name" : "LANGUAGE_SWITCH_RESULT_SKIPPED_NO_MODEL",
    "type" : "int",
    "comment" : "\n     * Switch skipped because the language model is missing\n     * or the language is not allowlisted for auto switch.\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_NETWORK_TIMEOUT",
    "type" : "int",
    "comment" : " Network operation timed out. ",
    "links" : [ ]
  }, {
    "name" : "ERROR_NETWORK",
    "type" : "int",
    "comment" : " Other network related errors. ",
    "links" : [ ]
  }, {
    "name" : "ERROR_AUDIO",
    "type" : "int",
    "comment" : " Audio recording error. ",
    "links" : [ ]
  }, {
    "name" : "ERROR_SERVER",
    "type" : "int",
    "comment" : " Server sends error status. ",
    "links" : [ ]
  }, {
    "name" : "ERROR_CLIENT",
    "type" : "int",
    "comment" : " Other client side errors. ",
    "links" : [ ]
  }, {
    "name" : "ERROR_SPEECH_TIMEOUT",
    "type" : "int",
    "comment" : " No speech input ",
    "links" : [ ]
  }, {
    "name" : "ERROR_NO_MATCH",
    "type" : "int",
    "comment" : " No recognition result matched. ",
    "links" : [ ]
  }, {
    "name" : "ERROR_RECOGNIZER_BUSY",
    "type" : "int",
    "comment" : " RecognitionService busy. ",
    "links" : [ ]
  }, {
    "name" : "ERROR_INSUFFICIENT_PERMISSIONS",
    "type" : "int",
    "comment" : " Insufficient permissions ",
    "links" : [ ]
  }, {
    "name" : "ERROR_TOO_MANY_REQUESTS",
    "type" : "int",
    "comment" : " Too many requests from the same client. ",
    "links" : [ ]
  }, {
    "name" : "ERROR_SERVER_DISCONNECTED",
    "type" : "int",
    "comment" : " Server has been disconnected, e.g. because the app has crashed. ",
    "links" : [ ]
  }, {
    "name" : "ERROR_LANGUAGE_NOT_SUPPORTED",
    "type" : "int",
    "comment" : " Requested language is not available to be used with the current recognizer. ",
    "links" : [ ]
  }, {
    "name" : "ERROR_LANGUAGE_UNAVAILABLE",
    "type" : "int",
    "comment" : " Requested language is supported, but not available currently (e.g. not downloaded yet). ",
    "links" : [ ]
  }, {
    "name" : "ERROR_CANNOT_CHECK_SUPPORT",
    "type" : "int",
    "comment" : " The service does not allow to check for support. ",
    "links" : [ ]
  }, {
    "name" : "ERROR_CANNOT_LISTEN_TO_DOWNLOAD_EVENTS",
    "type" : "int",
    "comment" : " The service does not support listening to model downloads events. ",
    "links" : [ ]
  }, {
    "name" : "MSG_START",
    "type" : "int",
    "comment" : " action codes ",
    "links" : [ ]
  }, {
    "name" : "MSG_STOP",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_CANCEL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_CHANGE_LISTENER",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_SET_TEMPORARY_ON_DEVICE_COMPONENT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_CHECK_RECOGNITION_SUPPORT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_TRIGGER_MODEL_DOWNLOAD",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static boolean isRecognitionAvailable(@NonNull Context context)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks whether a speech recognition service is available on the system. If this method\n     * returns {@code false}, {@link SpeechRecognizer#createSpeechRecognizer(Context)} will\n     * fail.\n     *\n     * @param context with which {@code SpeechRecognizer} will be created\n     * @return {@code true} if recognition is available, {@code false} otherwise\n     ",
    "links" : [ "android.speech.SpeechRecognizer#createSpeechRecognizer(Context)" ]
  }, {
    "name" : "public static boolean isOnDeviceRecognitionAvailable(@NonNull Context context)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks whether an on-device speech recognition service is available on the system. If this\n     * method returns {@code false},\n     * {@link SpeechRecognizer#createOnDeviceSpeechRecognizer(Context)} will\n     * fail.\n     *\n     * @param context with which on-device {@code SpeechRecognizer} will be created\n     * @return {@code true} if on-device recognition is available, {@code false} otherwise\n     ",
    "links" : [ "android.speech.SpeechRecognizer#createOnDeviceSpeechRecognizer(Context)" ]
  }, {
    "name" : "public static SpeechRecognizer createSpeechRecognizer(Context context)",
    "returnType" : "SpeechRecognizer",
    "comment" : "\n     * Factory method to create a new {@code SpeechRecognizer}. Please note that\n     * {@link #setRecognitionListener(RecognitionListener)} should be called before dispatching any\n     * command to the created {@code SpeechRecognizer}, otherwise no notifications will be\n     * received.\n     *\n     * <p><strong>Important:</strong> the caller MUST invoke {@link #destroy()} on a\n     * SpeechRecognizer object when it is no longer needed.\n     *\n     * <p>For apps targeting Android 11 (API level 30) interaction with a speech recognition\n     * service requires <queries> element to be added to the manifest file:\n     * <pre>{@code\n     * <queries>\n     *   <intent>\n     *     <action\n     *        android:name=\"android.speech.RecognitionService\" />\n     *   </intent>\n     * </queries>\n     * }</pre>\n     *\n     * @param context in which to create {@code SpeechRecognizer}\n     * @return a new {@code SpeechRecognizer}\n     ",
    "links" : [ "#setRecognitionListener(RecognitionListener)", "#destroy()" ]
  }, {
    "name" : "public static SpeechRecognizer createSpeechRecognizer(Context context, ComponentName serviceComponent)",
    "returnType" : "SpeechRecognizer",
    "comment" : "\n     * Factory method to create a new {@code SpeechRecognizer}. Please note that\n     * {@link #setRecognitionListener(RecognitionListener)} should be called before dispatching any\n     * command to the created {@code SpeechRecognizer}, otherwise no notifications will be\n     * received.\n     * Use this version of the method to specify a specific service to direct this\n     * {@link SpeechRecognizer} to.\n     *\n     * <p><strong>Important:</strong> the caller MUST invoke {@link #destroy()} on a\n     * SpeechRecognizer object when it is no longer needed.\n     *\n     * <p><strong>Important</strong>: before calling this method, please check via\n     * {@link android.content.pm.PackageManager#queryIntentServices(Intent, int)} that {@code\n     * serviceComponent} actually exists and provides\n     * {@link RecognitionService#SERVICE_INTERFACE}. Normally you would not use this; call\n     * {@link #createSpeechRecognizer(Context)} to use the system default recognition\n     * service instead or {@link #createOnDeviceSpeechRecognizer(Context)} to use on-device\n     * recognition.</p>\n     *\n     * <p>For apps targeting Android 11 (API level 30) interaction with a speech recognition\n     * service requires <queries> element to be added to the manifest file:\n     * <pre>{@code\n     * <queries>\n     *   <intent>\n     *     <action\n     *        android:name=\"android.speech.RecognitionService\" />\n     *   </intent>\n     * </queries>\n     * }</pre>\n     *\n     * @param context          in which to create {@code SpeechRecognizer}\n     * @param serviceComponent the {@link ComponentName} of a specific service to direct this\n     *                         {@code SpeechRecognizer} to\n     * @return a new {@code SpeechRecognizer}\n     ",
    "links" : [ "#createSpeechRecognizer(Context)", "android.content.pm.PackageManager#queryIntentServices(Intent", "android.speech.SpeechRecognizer", "#createOnDeviceSpeechRecognizer(Context)", "android.content.ComponentName", "android.speech.RecognitionService#SERVICE_INTERFACE", "#setRecognitionListener(RecognitionListener)", "#destroy()" ]
  }, {
    "name" : "public static SpeechRecognizer createOnDeviceSpeechRecognizer(@NonNull Context context)",
    "returnType" : "SpeechRecognizer",
    "comment" : "\n     * Factory method to create a new {@code SpeechRecognizer}.\n     *\n     * <p>Please note that {@link #setRecognitionListener(RecognitionListener)} should be called\n     * before dispatching any command to the created {@code SpeechRecognizer}, otherwise no\n     * notifications will be received.\n     *\n     * <p><strong>Important:</strong> the caller MUST invoke {@link #destroy()} on a\n     * SpeechRecognizer object when it is no longer needed.\n     *\n     * @param context in which to create {@code SpeechRecognizer}\n     * @return a new on-device {@code SpeechRecognizer}.\n     * @throws UnsupportedOperationException iff {@link #isOnDeviceRecognitionAvailable(Context)}\n     *                                       is false\n     ",
    "links" : [ "#isOnDeviceRecognitionAvailable(Context)", "#setRecognitionListener(RecognitionListener)", "#destroy()" ]
  }, {
    "name" : "private static SpeechRecognizer wrapWithProxy(SpeechRecognizer delegate)",
    "returnType" : "SpeechRecognizer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static SpeechRecognizer createOnDeviceTestingSpeechRecognizer(@NonNull Context context)",
    "returnType" : "SpeechRecognizer",
    "comment" : "\n     * Helper method to create on-device SpeechRecognizer in tests even when the device does not\n     * support on-device speech recognition.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setRecognitionListener(RecognitionListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Sets the listener that will receive all the callbacks. The previous unfinished commands will\n     * be executed with the old listener, while any following command will be executed with the new\n     * listener.\n     *\n     * @param listener listener that will receive all the callbacks from the created\n     *                 {@link SpeechRecognizer}, this must not be null.\n     ",
    "links" : [ "android.speech.SpeechRecognizer" ]
  }, {
    "name" : "public void startListening(Intent recognizerIntent)",
    "returnType" : "void",
    "comment" : "\n     * Starts listening for speech. Please note that\n     * {@link #setRecognitionListener(RecognitionListener)} should be called beforehand, otherwise\n     * no notifications will be received.\n     *\n     * @param recognizerIntent contains parameters for the recognition to be performed. The intent\n     *                         may also contain optional extras, see {@link RecognizerIntent}. If\n     *                         these values are not set explicitly, default values will be used by\n     *                         the recognizer.\n     ",
    "links" : [ "android.speech.RecognizerIntent", "#setRecognitionListener(RecognitionListener)" ]
  }, {
    "name" : "public void stopListening()",
    "returnType" : "void",
    "comment" : "\n     * Stops listening for speech. Speech captured so far will be recognized as if the user had\n     * stopped speaking at this point.\n     *\n     * <p>Note that in the default case, this does not need to be called, as the speech endpointer\n     * will automatically stop the recognizer listening when it determines speech has completed.\n     * However, you can manipulate endpointer parameters directly using the intent extras defined in\n     * {@link RecognizerIntent}, in which case you may sometimes want to manually call this method\n     * to stop listening sooner.\n     *\n     * <p>Upon invocation clients must wait until {@link RecognitionListener#onResults} or\n     * {@link RecognitionListener#onError} are invoked before calling\n     * {@link SpeechRecognizer#startListening} again. Otherwise such an attempt would be rejected by\n     * recognition service.\n     *\n     * <p>Please note that\n     * {@link #setRecognitionListener(RecognitionListener)} should be called beforehand, otherwise\n     * no notifications will be received.\n     ",
    "links" : [ "android.speech.RecognitionListener#onError", "android.speech.SpeechRecognizer#startListening", "android.speech.RecognizerIntent", "android.speech.RecognitionListener#onResults", "#setRecognitionListener(RecognitionListener)" ]
  }, {
    "name" : "public void cancel()",
    "returnType" : "void",
    "comment" : "\n     * Cancels the speech recognition. Please note that\n     * {@link #setRecognitionListener(RecognitionListener)} should be called beforehand, otherwise\n     * no notifications will be received.\n     ",
    "links" : [ "#setRecognitionListener(RecognitionListener)" ]
  }, {
    "name" : "public void checkRecognitionSupport(@NonNull Intent recognizerIntent, @NonNull @CallbackExecutor Executor executor, @NonNull RecognitionSupportCallback supportListener)",
    "returnType" : "void",
    "comment" : "\n     * Checks whether {@code recognizerIntent} is supported by\n     * {@link SpeechRecognizer#startListening(Intent)}.\n     *\n     * @param recognizerIntent contains parameters for the recognition to be performed. The intent\n     *                         may also contain optional extras. See {@link RecognizerIntent} for\n     *                         the list of supported extras, any unlisted extra might be ignored.\n     * @param supportListener  the listener on which to receive the support query results.\n     ",
    "links" : [ "android.speech.SpeechRecognizer#startListening(Intent)", "android.speech.RecognizerIntent" ]
  }, {
    "name" : "public void triggerModelDownload(@NonNull Intent recognizerIntent)",
    "returnType" : "void",
    "comment" : "\n     * Attempts to download the support for the given {@code recognizerIntent}. This might trigger\n     * user interaction to approve the download. Callers can verify the status of the request via\n     * {@link #checkRecognitionSupport(Intent, Executor, RecognitionSupportCallback)}.\n     *\n     * @param recognizerIntent contains parameters for the recognition to be performed. The intent\n     *                         may also contain optional extras, see {@link RecognizerIntent}.\n     ",
    "links" : [ "#checkRecognitionSupport(Intent", "android.speech.RecognizerIntent" ]
  }, {
    "name" : "public void triggerModelDownload(@NonNull Intent recognizerIntent, @NonNull @CallbackExecutor Executor executor, @NonNull ModelDownloadListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Attempts to download the support for the given {@code recognizerIntent}. This might trigger\n     * user interaction to approve the download. Callers can verify the status of the request via\n     * {@link #checkRecognitionSupport(Intent, Executor, RecognitionSupportCallback)}.\n     *\n     * <p> The updates about the model download request are received via the given\n     * {@link ModelDownloadListener}:\n     *\n     * <li> If the model is already available, {@link ModelDownloadListener#onSuccess()} will be\n     * called directly. The model can be safely used afterwards.\n     *\n     * <li> If the {@link RecognitionService} has started the download,\n     * {@link ModelDownloadListener#onProgress(int)} will be called an unspecified (zero or more)\n     * number of times until the download is complete.\n     * When the download finishes, {@link ModelDownloadListener#onSuccess()} will be called.\n     * The model can be safely used afterwards.\n     *\n     * <li> If the {@link RecognitionService} has only scheduled the download, but won't satisfy it\n     * immediately, {@link ModelDownloadListener#onScheduled()} will be called.\n     * There will be no further updates on this listener.\n     *\n     * <li> If the request fails at any time due to a network or scheduling error,\n     * {@link ModelDownloadListener#onError(int)} will be called.\n     *\n     * @param recognizerIntent contains parameters for the recognition to be performed. The intent\n     *                         may also contain optional extras, see {@link RecognizerIntent}.\n     * @param executor         for dispatching listener callbacks\n     * @param listener         on which to receive updates about the model download request.\n     ",
    "links" : [ "android.speech.ModelDownloadListener#onScheduled()", "android.speech.ModelDownloadListener#onProgress(int)", "#checkRecognitionSupport(Intent", "android.speech.ModelDownloadListener#onSuccess()", "android.speech.RecognizerIntent", "android.speech.ModelDownloadListener", "android.speech.RecognitionService", "android.speech.ModelDownloadListener#onError(int)" ]
  }, {
    "name" : "public void setTemporaryOnDeviceRecognizer(@Nullable ComponentName componentName)",
    "returnType" : "void",
    "comment" : "\n     * Sets a temporary component to power on-device speech recognizer.\n     *\n     * <p>This is only expected to be called in tests, system would reject calls from client apps.\n     *\n     * @param componentName name of the component to set temporary replace speech recognizer. {@code\n     *                      null} value resets the recognizer to default.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void destroy()",
    "returnType" : "void",
    "comment" : "\n     * Destroys the {@code SpeechRecognizer} object.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static boolean isRecognitionAvailable(@NonNull Context context)", "public static boolean isOnDeviceRecognitionAvailable(@NonNull Context context)", "public static SpeechRecognizer createSpeechRecognizer(Context context)", "public static SpeechRecognizer createSpeechRecognizer(Context context, ComponentName serviceComponent)", "public static SpeechRecognizer createOnDeviceSpeechRecognizer(@NonNull Context context)", "private static SpeechRecognizer wrapWithProxy(SpeechRecognizer delegate)", "public static SpeechRecognizer createOnDeviceTestingSpeechRecognizer(@NonNull Context context)", "public void setRecognitionListener(RecognitionListener listener)", "public void startListening(Intent recognizerIntent)", "public void stopListening()", "public void cancel()", "public void checkRecognitionSupport(@NonNull Intent recognizerIntent, @NonNull @CallbackExecutor Executor executor, @NonNull RecognitionSupportCallback supportListener)", "public void triggerModelDownload(@NonNull Intent recognizerIntent)", "public void triggerModelDownload(@NonNull Intent recognizerIntent, @NonNull @CallbackExecutor Executor executor, @NonNull ModelDownloadListener listener)", "public void setTemporaryOnDeviceRecognizer(@Nullable ComponentName componentName)", "public void destroy()" ],
  "variableNames" : [ "RESULTS_RECOGNITION", "CONFIDENCE_SCORES", "RESULTS_ALTERNATIVES", "RECOGNITION_PARTS", "DETECTED_LANGUAGE", "LANGUAGE_DETECTION_CONFIDENCE_LEVEL", "LANGUAGE_DETECTION_CONFIDENCE_LEVEL_UNKNOWN", "LANGUAGE_DETECTION_CONFIDENCE_LEVEL_NOT_CONFIDENT", "LANGUAGE_DETECTION_CONFIDENCE_LEVEL_CONFIDENT", "LANGUAGE_DETECTION_CONFIDENCE_LEVEL_HIGHLY_CONFIDENT", "TOP_LOCALE_ALTERNATIVES", "LANGUAGE_SWITCH_RESULT", "LANGUAGE_SWITCH_RESULT_NOT_ATTEMPTED", "LANGUAGE_SWITCH_RESULT_SUCCEEDED", "LANGUAGE_SWITCH_RESULT_FAILED", "LANGUAGE_SWITCH_RESULT_SKIPPED_NO_MODEL", "ERROR_NETWORK_TIMEOUT", "ERROR_NETWORK", "ERROR_AUDIO", "ERROR_SERVER", "ERROR_CLIENT", "ERROR_SPEECH_TIMEOUT", "ERROR_NO_MATCH", "ERROR_RECOGNIZER_BUSY", "ERROR_INSUFFICIENT_PERMISSIONS", "ERROR_TOO_MANY_REQUESTS", "ERROR_SERVER_DISCONNECTED", "ERROR_LANGUAGE_NOT_SUPPORTED", "ERROR_LANGUAGE_UNAVAILABLE", "ERROR_CANNOT_CHECK_SUPPORT", "ERROR_CANNOT_LISTEN_TO_DOWNLOAD_EVENTS", "MSG_START", "MSG_STOP", "MSG_CANCEL", "MSG_CHANGE_LISTENER", "MSG_SET_TEMPORARY_ON_DEVICE_COMPONENT", "MSG_CHECK_RECOGNITION_SUPPORT", "MSG_TRIGGER_MODEL_DOWNLOAD" ]
}