{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/widget/ActionMenuPresenter.java",
  "packageName" : "android.widget",
  "className" : "ActionMenuPresenter",
  "comment" : "\n * MenuPresenter for building action menus as seen in the action bar and action modes.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "ITEM_ANIMATION_DURATION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ACTIONBAR_ANIMATIONS_ENABLED",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOverflowButton",
    "type" : "OverflowMenuButton",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPendingOverflowIcon",
    "type" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPendingOverflowIconSet",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mReserveOverflow",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mReserveOverflowSet",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWidthLimit",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mActionItemWidthLimit",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaxItems",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaxItemsSet",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStrictWidthLimit",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWidthLimitSet",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExpandedActionViewsExclusive",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMinCellSize",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mActionButtonGroups",
    "type" : "SparseBooleanArray",
    "comment" : " Group IDs that have been added as actions - used temporarily, allocated here for reuse.",
    "links" : [ ]
  }, {
    "name" : "mOverflowPopup",
    "type" : "OverflowPopup",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mActionButtonPopup",
    "type" : "ActionButtonSubmenu",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPostedOpenRunnable",
    "type" : "OpenOverflowRunnable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPopupCallback",
    "type" : "ActionMenuPopupCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPopupPresenterCallback",
    "type" : "PopupPresenterCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOpenSubMenuId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPreLayoutItems",
    "type" : "SparseArray<MenuItemLayoutInfo>",
    "comment" : " which is used to determine appropriate animations to run for changed items.",
    "links" : [ ]
  }, {
    "name" : "mPostLayoutItems",
    "type" : "SparseArray<MenuItemLayoutInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRunningItemAnimations",
    "type" : "List<ItemAnimationInfo>",
    "comment" : " The list of currently running animations on menu items.",
    "links" : [ ]
  }, {
    "name" : "mItemAnimationPreDrawListener",
    "type" : "ViewTreeObserver.OnPreDrawListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAttachStateChangeListener",
    "type" : "View.OnAttachStateChangeListener",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void initForMenu(@NonNull Context context, @Nullable MenuBuilder menu)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onConfigurationChanged(Configuration newConfig)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setWidthLimit(int width, boolean strict)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setReserveOverflow(boolean reserveOverflow)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setItemLimit(int itemCount)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setExpandedActionViewsExclusive(boolean isExclusive)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setOverflowIcon(Drawable icon)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Drawable getOverflowIcon()",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public MenuView getMenuView(ViewGroup root)",
    "returnType" : "MenuView",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public View getItemView(final MenuItemImpl item, View convertView, ViewGroup parent)",
    "returnType" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void bindItemView(MenuItemImpl item, MenuView.ItemView itemView)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean shouldIncludeItem(int childIndex, MenuItemImpl item)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void computeMenuItemAnimationInfo(boolean preLayout)",
    "returnType" : "void",
    "comment" : "\n     * Store layout information about current items in the menu. This is stored for\n     * both pre- and post-layout phases and compared in runItemAnimations() to determine\n     * the animations that need to be run on any item changes.\n     *\n     * @param preLayout Whether this is being called in the pre-layout phase. This is passed\n     * into the MenuItemLayoutInfo structure to store the appropriate position values.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void runItemAnimations()",
    "returnType" : "void",
    "comment" : "\n     * This method is called once both the pre-layout and post-layout steps have\n     * happened. It figures out which views are new (didn't exist prior to layout),\n     * gone (existed pre-layout, but are now gone), or changed (exist in both,\n     * but in a different location) and runs appropriate animations on those views.\n     * Items are tracked by ids, since the underlying views that represent items\n     * pre- and post-layout may be different.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setupItemAnimations()",
    "returnType" : "void",
    "comment" : "\n     * Gets position/existence information on menu items before and after layout,\n     * which is then fed into runItemAnimations()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void updateMenuView(boolean cleared)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean filterLeftoverView(ViewGroup parent, int childIndex)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean onSubMenuSelected(SubMenuBuilder subMenu)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private View findViewForItem(MenuItem item)",
    "returnType" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean showOverflowMenu()",
    "returnType" : "boolean",
    "comment" : "\n     * Display the overflow menu if one is present.\n     * @return true if the overflow menu was shown, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hideOverflowMenu()",
    "returnType" : "boolean",
    "comment" : "\n     * Hide the overflow menu if it is currently showing.\n     *\n     * @return true if the overflow menu was hidden, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean dismissPopupMenus()",
    "returnType" : "boolean",
    "comment" : "\n     * Dismiss all popup menus - overflow and submenus.\n     * @return true if popups were dismissed, false otherwise. (This can be because none were open.)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hideSubMenus()",
    "returnType" : "boolean",
    "comment" : "\n     * Dismiss all submenu popups.\n     *\n     * @return true if popups were dismissed, false otherwise. (This can be because none were open.)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isOverflowMenuShowing()",
    "returnType" : "boolean",
    "comment" : "\n     * @return true if the overflow menu is currently showing\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isOverflowMenuShowPending()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isOverflowReserved()",
    "returnType" : "boolean",
    "comment" : "\n     * @return true if space has been reserved in the action menu for an overflow item.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean flagActionItems()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onCloseMenu(MenuBuilder menu, boolean allMenusAreClosing)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Parcelable onSaveInstanceState()",
    "returnType" : "Parcelable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onRestoreInstanceState(Parcelable state)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onSubUiVisibilityChanged(boolean isVisible)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setMenuView(ActionMenuView menuView)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void initForMenu(@NonNull Context context, @Nullable MenuBuilder menu)", "public void onConfigurationChanged(Configuration newConfig)", "public void setWidthLimit(int width, boolean strict)", "public void setReserveOverflow(boolean reserveOverflow)", "public void setItemLimit(int itemCount)", "public void setExpandedActionViewsExclusive(boolean isExclusive)", "public void setOverflowIcon(Drawable icon)", "public Drawable getOverflowIcon()", "public MenuView getMenuView(ViewGroup root)", "public View getItemView(final MenuItemImpl item, View convertView, ViewGroup parent)", "public void bindItemView(MenuItemImpl item, MenuView.ItemView itemView)", "public boolean shouldIncludeItem(int childIndex, MenuItemImpl item)", "private void computeMenuItemAnimationInfo(boolean preLayout)", "private void runItemAnimations()", "private void setupItemAnimations()", "public void updateMenuView(boolean cleared)", "public boolean filterLeftoverView(ViewGroup parent, int childIndex)", "public boolean onSubMenuSelected(SubMenuBuilder subMenu)", "private View findViewForItem(MenuItem item)", "public boolean showOverflowMenu()", "public boolean hideOverflowMenu()", "public boolean dismissPopupMenus()", "public boolean hideSubMenus()", "public boolean isOverflowMenuShowing()", "public boolean isOverflowMenuShowPending()", "public boolean isOverflowReserved()", "public boolean flagActionItems()", "public void onCloseMenu(MenuBuilder menu, boolean allMenusAreClosing)", "public Parcelable onSaveInstanceState()", "public void onRestoreInstanceState(Parcelable state)", "public void onSubUiVisibilityChanged(boolean isVisible)", "public void setMenuView(ActionMenuView menuView)" ],
  "variableNames" : [ "ITEM_ANIMATION_DURATION", "ACTIONBAR_ANIMATIONS_ENABLED", "mOverflowButton", "mPendingOverflowIcon", "mPendingOverflowIconSet", "mReserveOverflow", "mReserveOverflowSet", "mWidthLimit", "mActionItemWidthLimit", "mMaxItems", "mMaxItemsSet", "mStrictWidthLimit", "mWidthLimitSet", "mExpandedActionViewsExclusive", "mMinCellSize", "mActionButtonGroups", "mOverflowPopup", "mActionButtonPopup", "mPostedOpenRunnable", "mPopupCallback", "mPopupPresenterCallback", "mOpenSubMenuId", "mPreLayoutItems", "mPostLayoutItems", "mRunningItemAnimations", "mItemAnimationPreDrawListener", "mAttachStateChangeListener" ]
}