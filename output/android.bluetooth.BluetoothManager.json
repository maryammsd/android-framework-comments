{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/bluetooth/BluetoothManager.java",
  "packageName" : "android.bluetooth",
  "className" : "BluetoothManager",
  "comment" : "\n * High level manager used to obtain an instance of an {@link BluetoothAdapter} and to conduct\n * overall Bluetooth Management.\n *\n * <p>Use {@link android.content.Context#getSystemService(java.lang.String)} with {@link\n * Context#BLUETOOTH_SERVICE} to create an {@link BluetoothManager}, then call {@link #getAdapter}\n * to obtain the {@link BluetoothAdapter}. <div class=\"special reference\">\n *\n * <h3>Developer Guides</h3>\n *\n * <p>For more information about using BLUETOOTH, read the <a href=\n * \"{@docRoot}guide/topics/connectivity/bluetooth.html\">Bluetooth</a> developer guide. </div>\n *\n * @see Context#getSystemService\n * @see BluetoothAdapter#getDefaultAdapter()\n ",
  "links" : [ "#getAdapter", "android.content.Context#getSystemService(java.lang.String)", "android.bluetooth.BluetoothAdapter", "android.content.Context#BLUETOOTH_SERVICE", "android.bluetooth.BluetoothManager" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAttributionSource",
    "type" : "AttributionSource",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAdapter",
    "type" : "BluetoothAdapter",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public BluetoothAdapter getAdapter()",
    "returnType" : "BluetoothAdapter",
    "comment" : "\n     * Get the BLUETOOTH Adapter for this device.\n     *\n     * @return the BLUETOOTH Adapter\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getConnectionState(BluetoothDevice device, int profile)",
    "returnType" : "int",
    "comment" : "\n     * Get the current connection state of the profile to the remote device.\n     *\n     * <p>This is not specific to any application configuration but represents the connection state\n     * of the local Bluetooth adapter for certain profile. This can be used by applications like\n     * status bar which would just like to know the state of Bluetooth.\n     *\n     * @param device Remote bluetooth device.\n     * @param profile GATT or GATT_SERVER\n     * @return State of the profile connection. One of {@link BluetoothProfile#STATE_CONNECTED},\n     *     {@link BluetoothProfile#STATE_CONNECTING}, {@link BluetoothProfile#STATE_DISCONNECTED},\n     *     {@link BluetoothProfile#STATE_DISCONNECTING}\n     ",
    "links" : [ "android.bluetooth.BluetoothProfile#STATE_CONNECTED", "android.bluetooth.BluetoothProfile#STATE_DISCONNECTING", "android.bluetooth.BluetoothProfile#STATE_CONNECTING", "android.bluetooth.BluetoothProfile#STATE_DISCONNECTED" ]
  }, {
    "name" : "public List<BluetoothDevice> getConnectedDevices(int profile)",
    "returnType" : "List<BluetoothDevice>",
    "comment" : "\n     * Get connected devices for the specified profile.\n     *\n     * <p>Return the set of devices which are in state {@link BluetoothProfile#STATE_CONNECTED}\n     *\n     * <p>This is not specific to any application configuration but represents the connection state\n     * of Bluetooth for this profile. This can be used by applications like status bar which would\n     * just like to know the state of Bluetooth.\n     *\n     * @param profile GATT or GATT_SERVER\n     * @return List of devices. The list will be empty on error.\n     ",
    "links" : [ "android.bluetooth.BluetoothProfile#STATE_CONNECTED" ]
  }, {
    "name" : "public List<BluetoothDevice> getDevicesMatchingConnectionStates(int profile, int[] states)",
    "returnType" : "List<BluetoothDevice>",
    "comment" : "\n     * Get a list of devices that match any of the given connection states.\n     *\n     * <p>If none of the devices match any of the given states, an empty list will be returned.\n     *\n     * <p>This is not specific to any application configuration but represents the connection state\n     * of the local Bluetooth adapter for this profile. This can be used by applications like status\n     * bar which would just like to know the state of the local adapter.\n     *\n     * @param profile GATT or GATT_SERVER\n     * @param states Array of states. States can be one of {@link BluetoothProfile#STATE_CONNECTED},\n     *     {@link BluetoothProfile#STATE_CONNECTING}, {@link BluetoothProfile#STATE_DISCONNECTED},\n     *     {@link BluetoothProfile#STATE_DISCONNECTING},\n     * @return List of devices. The list will be empty on error.\n     ",
    "links" : [ "android.bluetooth.BluetoothProfile#STATE_CONNECTED", "android.bluetooth.BluetoothProfile#STATE_DISCONNECTING", "android.bluetooth.BluetoothProfile#STATE_CONNECTING", "android.bluetooth.BluetoothProfile#STATE_DISCONNECTED" ]
  }, {
    "name" : "public BluetoothGattServer openGattServer(Context context, BluetoothGattServerCallback callback)",
    "returnType" : "BluetoothGattServer",
    "comment" : "\n     * Open a GATT Server The callback is used to deliver results to Caller, such as connection\n     * status as well as the results of any other GATT server operations. The method returns a\n     * BluetoothGattServer instance. You can use BluetoothGattServer to conduct GATT server\n     * operations.\n     *\n     * @param context App context\n     * @param callback GATT server callback handler that will receive asynchronous callbacks.\n     * @return BluetoothGattServer instance\n     ",
    "links" : [ ]
  }, {
    "name" : "public BluetoothGattServer openGattServer(Context context, BluetoothGattServerCallback callback, boolean eattSupport)",
    "returnType" : "BluetoothGattServer",
    "comment" : "\n     * Open a GATT Server The callback is used to deliver results to Caller, such as connection\n     * status as well as the results of any other GATT server operations. The method returns a\n     * BluetoothGattServer instance. You can use BluetoothGattServer to conduct GATT server\n     * operations.\n     *\n     * @param context App context\n     * @param callback GATT server callback handler that will receive asynchronous callbacks.\n     * @param eattSupport indicates if server should use eatt channel for notifications.\n     * @return BluetoothGattServer instance\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public BluetoothGattServer openGattServer(Context context, BluetoothGattServerCallback callback, int transport)",
    "returnType" : "BluetoothGattServer",
    "comment" : "\n     * Open a GATT Server The callback is used to deliver results to Caller, such as connection\n     * status as well as the results of any other GATT server operations. The method returns a\n     * BluetoothGattServer instance. You can use BluetoothGattServer to conduct GATT server\n     * operations.\n     *\n     * @param context App context\n     * @param callback GATT server callback handler that will receive asynchronous callbacks.\n     * @param transport preferred transport for GATT connections to remote dual-mode devices {@link\n     *     BluetoothDevice#TRANSPORT_AUTO} or {@link BluetoothDevice#TRANSPORT_BREDR} or {@link\n     *     BluetoothDevice#TRANSPORT_LE}\n     * @return BluetoothGattServer instance\n     * @hide\n     ",
    "links" : [ "android.bluetooth.BluetoothDevice#TRANSPORT_BREDR", "android.bluetooth.BluetoothDevice#TRANSPORT_AUTO", "android.bluetooth.BluetoothDevice#TRANSPORT_LE" ]
  }, {
    "name" : "public BluetoothGattServer openGattServer(Context context, BluetoothGattServerCallback callback, int transport, boolean eattSupport)",
    "returnType" : "BluetoothGattServer",
    "comment" : "\n     * Open a GATT Server The callback is used to deliver results to Caller, such as connection\n     * status as well as the results of any other GATT server operations. The method returns a\n     * BluetoothGattServer instance. You can use BluetoothGattServer to conduct GATT server\n     * operations.\n     *\n     * @param context App context\n     * @param callback GATT server callback handler that will receive asynchronous callbacks.\n     * @param transport preferred transport for GATT connections to remote dual-mode devices {@link\n     *     BluetoothDevice#TRANSPORT_AUTO} or {@link BluetoothDevice#TRANSPORT_BREDR} or {@link\n     *     BluetoothDevice#TRANSPORT_LE}\n     * @param eattSupport indicates if server should use eatt channel for notifications.\n     * @return BluetoothGattServer instance\n     * @hide\n     ",
    "links" : [ "android.bluetooth.BluetoothDevice#TRANSPORT_BREDR", "android.bluetooth.BluetoothDevice#TRANSPORT_AUTO", "android.bluetooth.BluetoothDevice#TRANSPORT_LE" ]
  } ],
  "methodNames" : [ "public BluetoothAdapter getAdapter()", "public int getConnectionState(BluetoothDevice device, int profile)", "public List<BluetoothDevice> getConnectedDevices(int profile)", "public List<BluetoothDevice> getDevicesMatchingConnectionStates(int profile, int[] states)", "public BluetoothGattServer openGattServer(Context context, BluetoothGattServerCallback callback)", "public BluetoothGattServer openGattServer(Context context, BluetoothGattServerCallback callback, boolean eattSupport)", "public BluetoothGattServer openGattServer(Context context, BluetoothGattServerCallback callback, int transport)", "public BluetoothGattServer openGattServer(Context context, BluetoothGattServerCallback callback, int transport, boolean eattSupport)" ],
  "variableNames" : [ "TAG", "DBG", "mAttributionSource", "mAdapter" ]
}