{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/w3c/dom/NamedNodeMap.java",
  "packageName" : "org.w3c.dom",
  "className" : "NamedNodeMap",
  "comment" : "\n * Objects implementing the <code>NamedNodeMap</code> interface are used to\n * represent collections of nodes that can be accessed by name. Note that\n * <code>NamedNodeMap</code> does not inherit from <code>NodeList</code>;\n * <code>NamedNodeMaps</code> are not maintained in any particular order.\n * Objects contained in an object implementing <code>NamedNodeMap</code> may\n * also be accessed by an ordinal index, but this is simply to allow\n * convenient enumeration of the contents of a <code>NamedNodeMap</code>,\n * and does not imply that the DOM specifies an order to these Nodes.\n * <p><code>NamedNodeMap</code> objects in the DOM are live.\n * <p>See also the <a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>Document Object Model (DOM) Level 3 Core Specification</a>.\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public Node getNamedItem(String name)",
    "returnType" : "Node",
    "comment" : "\n     * Retrieves a node specified by name.\n     * @param name The <code>nodeName</code> of a node to retrieve.\n     * @return A <code>Node</code> (of any type) with the specified\n     *   <code>nodeName</code>, or <code>null</code> if it does not identify\n     *   any node in this map.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Node setNamedItem(Node arg) throws DOMException",
    "returnType" : "Node",
    "comment" : "\n     * Adds a node using its <code>nodeName</code> attribute. If a node with\n     * that name is already present in this map, it is replaced by the new\n     * one. Replacing a node by itself has no effect.\n     * <br>As the <code>nodeName</code> attribute is used to derive the name\n     * which the node must be stored under, multiple nodes of certain types\n     * (those that have a \"special\" string value) cannot be stored as the\n     * names would clash. This is seen as preferable to allowing nodes to be\n     * aliased.\n     * @param arg A node to store in this map. The node will later be\n     *   accessible using the value of its <code>nodeName</code> attribute.\n     * @return If the new <code>Node</code> replaces an existing node the\n     *   replaced <code>Node</code> is returned, otherwise <code>null</code>\n     *   is returned.\n     * @exception DOMException\n     *   WRONG_DOCUMENT_ERR: Raised if <code>arg</code> was created from a\n     *   different document than the one that created this map.\n     *   <br>NO_MODIFICATION_ALLOWED_ERR: Raised if this map is readonly.\n     *   <br>INUSE_ATTRIBUTE_ERR: Raised if <code>arg</code> is an\n     *   <code>Attr</code> that is already an attribute of another\n     *   <code>Element</code> object. The DOM user must explicitly clone\n     *   <code>Attr</code> nodes to re-use them in other elements.\n     *   <br>HIERARCHY_REQUEST_ERR: Raised if an attempt is made to add a node\n     *   doesn't belong in this NamedNodeMap. Examples would include trying\n     *   to insert something other than an Attr node into an Element's map\n     *   of attributes, or a non-Entity node into the DocumentType's map of\n     *   Entities.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Node removeNamedItem(String name) throws DOMException",
    "returnType" : "Node",
    "comment" : "\n     * Removes a node specified by name. When this map contains the attributes\n     * attached to an element, if the removed attribute is known to have a\n     * default value, an attribute immediately appears containing the\n     * default value as well as the corresponding namespace URI, local name,\n     * and prefix when applicable.\n     * @param name The <code>nodeName</code> of the node to remove.\n     * @return The node removed from this map if a node with such a name\n     *   exists.\n     * @exception DOMException\n     *   NOT_FOUND_ERR: Raised if there is no node named <code>name</code> in\n     *   this map.\n     *   <br>NO_MODIFICATION_ALLOWED_ERR: Raised if this map is readonly.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Node item(int index)",
    "returnType" : "Node",
    "comment" : "\n     * Returns the <code>index</code>th item in the map. If <code>index</code>\n     * is greater than or equal to the number of nodes in this map, this\n     * returns <code>null</code>.\n     * @param index Index into this map.\n     * @return The node at the <code>index</code>th position in the map, or\n     *   <code>null</code> if that is not a valid index.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getLength()",
    "returnType" : "int",
    "comment" : "\n     * The number of nodes in this map. The range of valid child node indices\n     * is <code>0</code> to <code>length-1</code> inclusive.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Node getNamedItemNS(String namespaceURI, String localName) throws DOMException",
    "returnType" : "Node",
    "comment" : "\n     * Retrieves a node specified by local name and namespace URI.\n     * <br>Per [<a href='http://www.w3.org/TR/1999/REC-xml-names-19990114/'>XML Namespaces</a>]\n     * , applications must use the value null as the namespaceURI parameter\n     * for methods if they wish to have no namespace.\n     * @param namespaceURI The namespace URI of the node to retrieve.\n     * @param localName The local name of the node to retrieve.\n     * @return A <code>Node</code> (of any type) with the specified local\n     *   name and namespace URI, or <code>null</code> if they do not\n     *   identify any node in this map.\n     * @exception DOMException\n     *   NOT_SUPPORTED_ERR: May be raised if the implementation does not\n     *   support the feature \"XML\" and the language exposed through the\n     *   Document does not support XML Namespaces (such as [<a href='http://www.w3.org/TR/1999/REC-html401-19991224/'>HTML 4.01</a>]).\n     * @since DOM Level 2\n     ",
    "links" : [ ]
  }, {
    "name" : "public Node setNamedItemNS(Node arg) throws DOMException",
    "returnType" : "Node",
    "comment" : "\n     * Adds a node using its <code>namespaceURI</code> and\n     * <code>localName</code>. If a node with that namespace URI and that\n     * local name is already present in this map, it is replaced by the new\n     * one. Replacing a node by itself has no effect.\n     * <br>Per [<a href='http://www.w3.org/TR/1999/REC-xml-names-19990114/'>XML Namespaces</a>]\n     * , applications must use the value null as the namespaceURI parameter\n     * for methods if they wish to have no namespace.\n     * @param arg A node to store in this map. The node will later be\n     *   accessible using the value of its <code>namespaceURI</code> and\n     *   <code>localName</code> attributes.\n     * @return If the new <code>Node</code> replaces an existing node the\n     *   replaced <code>Node</code> is returned, otherwise <code>null</code>\n     *   is returned.\n     * @exception DOMException\n     *   WRONG_DOCUMENT_ERR: Raised if <code>arg</code> was created from a\n     *   different document than the one that created this map.\n     *   <br>NO_MODIFICATION_ALLOWED_ERR: Raised if this map is readonly.\n     *   <br>INUSE_ATTRIBUTE_ERR: Raised if <code>arg</code> is an\n     *   <code>Attr</code> that is already an attribute of another\n     *   <code>Element</code> object. The DOM user must explicitly clone\n     *   <code>Attr</code> nodes to re-use them in other elements.\n     *   <br>HIERARCHY_REQUEST_ERR: Raised if an attempt is made to add a node\n     *   doesn't belong in this NamedNodeMap. Examples would include trying\n     *   to insert something other than an Attr node into an Element's map\n     *   of attributes, or a non-Entity node into the DocumentType's map of\n     *   Entities.\n     *   <br>NOT_SUPPORTED_ERR: May be raised if the implementation does not\n     *   support the feature \"XML\" and the language exposed through the\n     *   Document does not support XML Namespaces (such as [<a href='http://www.w3.org/TR/1999/REC-html401-19991224/'>HTML 4.01</a>]).\n     * @since DOM Level 2\n     ",
    "links" : [ ]
  }, {
    "name" : "public Node removeNamedItemNS(String namespaceURI, String localName) throws DOMException",
    "returnType" : "Node",
    "comment" : "\n     * Removes a node specified by local name and namespace URI. A removed\n     * attribute may be known to have a default value when this map contains\n     * the attributes attached to an element, as returned by the attributes\n     * attribute of the <code>Node</code> interface. If so, an attribute\n     * immediately appears containing the default value as well as the\n     * corresponding namespace URI, local name, and prefix when applicable.\n     * <br>Per [<a href='http://www.w3.org/TR/1999/REC-xml-names-19990114/'>XML Namespaces</a>]\n     * , applications must use the value null as the namespaceURI parameter\n     * for methods if they wish to have no namespace.\n     * @param namespaceURI The namespace URI of the node to remove.\n     * @param localName The local name of the node to remove.\n     * @return The node removed from this map if a node with such a local\n     *   name and namespace URI exists.\n     * @exception DOMException\n     *   NOT_FOUND_ERR: Raised if there is no node with the specified\n     *   <code>namespaceURI</code> and <code>localName</code> in this map.\n     *   <br>NO_MODIFICATION_ALLOWED_ERR: Raised if this map is readonly.\n     *   <br>NOT_SUPPORTED_ERR: May be raised if the implementation does not\n     *   support the feature \"XML\" and the language exposed through the\n     *   Document does not support XML Namespaces (such as [<a href='http://www.w3.org/TR/1999/REC-html401-19991224/'>HTML 4.01</a>]).\n     * @since DOM Level 2\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Node getNamedItem(String name)", "public Node setNamedItem(Node arg) throws DOMException", "public Node removeNamedItem(String name) throws DOMException", "public Node item(int index)", "public int getLength()", "public Node getNamedItemNS(String namespaceURI, String localName) throws DOMException", "public Node setNamedItemNS(Node arg) throws DOMException", "public Node removeNamedItemNS(String namespaceURI, String localName) throws DOMException" ],
  "variableNames" : [ ]
}