{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/location/LocationRequest.java",
  "packageName" : "android.location",
  "className" : "LocationRequest",
  "comment" : "\n * An encapsulation of various parameters for requesting location via {@link LocationManager}.\n ",
  "links" : [ "android.location.LocationManager" ],
  "variables" : [ {
    "name" : "LOW_POWER_EXCEPTIONS",
    "type" : "long",
    "comment" : "\n     * For apps targeting Android S and above, all LocationRequest objects marked as low power will\n     * throw exceptions if the caller does not have the LOCATION_HARDWARE permission, instead of\n     * silently dropping the low power part of the request.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PASSIVE_INTERVAL",
    "type" : "long",
    "comment" : "\n     * Represents a passive only request. Such a request will not trigger any active locations or\n     * power usage itself, but may receive locations generated in response to other requests.\n     *\n     * @see LocationRequest#getIntervalMillis()\n     ",
    "links" : [ ]
  }, {
    "name" : "QUALITY_HIGH_ACCURACY",
    "type" : "int",
    "comment" : "\n     * A quality constant indicating a location provider may choose to satisfy this request by\n     * providing very accurate locations at the expense of potentially increased power usage. Each\n     * location provider may interpret this field differently, but as an example, the network\n     * provider may choose to return only wifi based locations rather than cell based locations in\n     * order to have greater accuracy when this flag is present.\n     ",
    "links" : [ ]
  }, {
    "name" : "QUALITY_BALANCED_POWER_ACCURACY",
    "type" : "int",
    "comment" : "\n     * A quality constant indicating a location provider may choose to satisfy this request by\n     * equally balancing power and accuracy constraints. Each location provider may interpret this\n     * field differently, but location providers will generally use their default behavior when this\n     * flag is present.\n     ",
    "links" : [ ]
  }, {
    "name" : "QUALITY_LOW_POWER",
    "type" : "int",
    "comment" : "\n     * A quality constant indicating a location provider may choose to satisfy this request by\n     * providing less accurate locations in order to save power. Each location provider may\n     * interpret this field differently, but as an example, the network provider may choose to\n     * return cell based locations rather than wifi based locations in order to save power when this\n     * flag is present.\n     ",
    "links" : [ ]
  }, {
    "name" : "ACCURACY_FINE",
    "type" : "int",
    "comment" : "\n     * Used with {@link #setQuality} to request the most accurate locations available.\n     *\n     * <p>This may be up to 1 meter accuracy, although this is implementation dependent.\n     *\n     * @hide\n     * @deprecated Use {@link #QUALITY_HIGH_ACCURACY} instead.\n     ",
    "links" : [ "#QUALITY_HIGH_ACCURACY", "#setQuality" ]
  }, {
    "name" : "ACCURACY_BLOCK",
    "type" : "int",
    "comment" : "\n     * Used with {@link #setQuality} to request \"block\" level accuracy.\n     *\n     * <p>Block level accuracy is considered to be about 100 meter accuracy,\n     * although this is implementation dependent. Using a coarse accuracy\n     * such as this often consumes less power.\n     *\n     * @hide\n     * @deprecated Use {@link #QUALITY_BALANCED_POWER_ACCURACY} instead.\n     ",
    "links" : [ "#QUALITY_BALANCED_POWER_ACCURACY", "#setQuality" ]
  }, {
    "name" : "ACCURACY_CITY",
    "type" : "int",
    "comment" : "\n     * Used with {@link #setQuality} to request \"city\" level accuracy.\n     *\n     * <p>City level accuracy is considered to be about 10km accuracy,\n     * although this is implementation dependent. Using a coarse accuracy\n     * such as this often consumes less power.\n     *\n     * @hide\n     * @deprecated Use {@link #QUALITY_LOW_POWER} instead.\n     ",
    "links" : [ "#setQuality", "#QUALITY_LOW_POWER" ]
  }, {
    "name" : "POWER_NONE",
    "type" : "int",
    "comment" : "\n     * Used with {@link #setQuality} to require no direct power impact (passive locations).\n     *\n     * <p>This location request will not trigger any active location requests,\n     * but will receive locations triggered by other applications. Your application\n     * will not receive any direct power blame for location work.\n     *\n     * @hide\n     * @deprecated Use {@link #PASSIVE_INTERVAL} instead.\n     ",
    "links" : [ "#setQuality", "#PASSIVE_INTERVAL" ]
  }, {
    "name" : "POWER_LOW",
    "type" : "int",
    "comment" : "\n     * Used with {@link #setQuality} to request low power impact.\n     *\n     * <p>This location request will avoid high power location work where\n     * possible.\n     *\n     * @hide\n     * @deprecated Use {@link #QUALITY_LOW_POWER} instead.\n     ",
    "links" : [ "#setQuality", "#QUALITY_LOW_POWER" ]
  }, {
    "name" : "POWER_HIGH",
    "type" : "int",
    "comment" : "\n     * Used with {@link #setQuality} to allow high power consumption for location.\n     *\n     * <p>This location request will allow high power location work.\n     *\n     * @hide\n     * @deprecated Use {@link #QUALITY_HIGH_ACCURACY} instead.\n     ",
    "links" : [ "#QUALITY_HIGH_ACCURACY", "#setQuality" ]
  }, {
    "name" : "IMPLICIT_MIN_UPDATE_INTERVAL",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IMPLICIT_MIN_UPDATE_INTERVAL_FACTOR",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProvider",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mQuality",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIntervalMillis",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMinUpdateIntervalMillis",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExpireAtRealtimeMillis",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDurationMillis",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaxUpdates",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMinUpdateDistanceMeters",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaxUpdateDelayMillis",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHideFromAppOps",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAdasGnssBypass",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBypass",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLowPower",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWorkSource",
    "type" : "WorkSource",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<LocationRequest>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static LocationRequest create()",
    "returnType" : "LocationRequest",
    "comment" : "\n     * @hide\n     * @deprecated Use the Builder to construct new LocationRequests.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static LocationRequest createFromDeprecatedProvider(@NonNull String provider, long intervalMillis, float minUpdateDistanceMeters, boolean singleShot)",
    "returnType" : "LocationRequest",
    "comment" : "\n     * @hide\n     * @deprecated Use the Builder to construct new LocationRequests.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static LocationRequest createFromDeprecatedCriteria(@NonNull Criteria criteria, long intervalMillis, float minUpdateDistanceMeters, boolean singleShot)",
    "returnType" : "LocationRequest",
    "comment" : "\n     * @hide\n     * @deprecated Use the Builder to construct new LocationRequests.\n     ",
    "links" : [ ]
  }, {
    "name" : "public LocationRequest setProvider(@NonNull String provider)",
    "returnType" : "LocationRequest",
    "comment" : "\n     * @hide\n     * @deprecated LocationRequests should be treated as immutable.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getProvider()",
    "returnType" : "String",
    "comment" : "\n     * @hide\n     * @deprecated Providers are no longer an explicit part of a location request.\n     ",
    "links" : [ ]
  }, {
    "name" : "public LocationRequest setQuality(int quality)",
    "returnType" : "LocationRequest",
    "comment" : "\n     * @hide\n     * @deprecated LocationRequests should be treated as immutable.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getQuality()",
    "returnType" : "int",
    "comment" : "\n     * Returns the quality hint for this location request. The quality hint informs the provider how\n     * it should attempt to manage any accuracy vs power tradeoffs while attempting to satisfy this\n     * location request.\n     *\n     * @return the desired quality tradeoffs between accuracy and power\n     ",
    "links" : [ ]
  }, {
    "name" : "public LocationRequest setInterval(long millis)",
    "returnType" : "LocationRequest",
    "comment" : "\n     * @hide\n     * @deprecated LocationRequests should be treated as immutable.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getInterval()",
    "returnType" : "long",
    "comment" : "\n     * @hide\n     * @deprecated Use {@link #getIntervalMillis()} instead.\n     ",
    "links" : [ "#getIntervalMillis()" ]
  }, {
    "name" : "public long getIntervalMillis()",
    "returnType" : "long",
    "comment" : "\n     * Returns the desired interval of location updates, or {@link #PASSIVE_INTERVAL} if this is a\n     * passive, no power request. A passive request will not actively generate location updates\n     * (and thus will not be power blamed for location), but may receive location updates generated\n     * as a result of other location requests. A passive request must always have an explicit\n     * minimum update interval set.\n     *\n     * <p>Locations may be available at a faster interval than specified here, see\n     * {@link #getMinUpdateIntervalMillis()} for the behavior in that case.\n     *\n     * @return the desired interval of location updates\n     ",
    "links" : [ "#PASSIVE_INTERVAL", "#getMinUpdateIntervalMillis()" ]
  }, {
    "name" : "public LocationRequest setFastestInterval(long millis)",
    "returnType" : "LocationRequest",
    "comment" : "\n     * @hide\n     * @deprecated LocationRequests should be treated as immutable.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getFastestInterval()",
    "returnType" : "long",
    "comment" : "\n     * @hide\n     * @deprecated Use {@link #getMinUpdateIntervalMillis()} instead.\n     ",
    "links" : [ "#getMinUpdateIntervalMillis()" ]
  }, {
    "name" : "public LocationRequest setExpireAt(long millis)",
    "returnType" : "LocationRequest",
    "comment" : "\n     * @hide\n     * @deprecated LocationRequests should be treated as immutable.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getExpireAt()",
    "returnType" : "long",
    "comment" : "\n     * @hide\n     * @deprecated Prefer {@link #getDurationMillis()} where possible.\n     ",
    "links" : [ "#getDurationMillis()" ]
  }, {
    "name" : "public LocationRequest setExpireIn(long millis)",
    "returnType" : "LocationRequest",
    "comment" : "\n     * @hide\n     * @deprecated LocationRequests should be treated as immutable.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getExpireIn()",
    "returnType" : "long",
    "comment" : "\n     * @hide\n     * @deprecated Use {@link #getDurationMillis()} instead.\n     ",
    "links" : [ "#getDurationMillis()" ]
  }, {
    "name" : "public long getDurationMillis()",
    "returnType" : "long",
    "comment" : "\n     * Returns the duration for which location will be provided before the request is automatically\n     * removed. A duration of <code>Long.MAX_VALUE</code> represents an unlimited duration.\n     *\n     * @return the duration for which location will be provided\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getExpirationRealtimeMs(long startRealtimeMs)",
    "returnType" : "long",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public LocationRequest setNumUpdates(int numUpdates)",
    "returnType" : "LocationRequest",
    "comment" : "\n     * @hide\n     * @deprecated LocationRequests should be treated as immutable.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getNumUpdates()",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     * @deprecated Use {@link #getMaxUpdates()} instead.\n     ",
    "links" : [ "#getMaxUpdates()" ]
  }, {
    "name" : "public int getMaxUpdates()",
    "returnType" : "int",
    "comment" : "\n     * Returns the maximum number of location updates for this request before the request is\n     * automatically removed. A max updates value of <code>Integer.MAX_VALUE</code> represents an\n     * unlimited number of updates.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getMinUpdateIntervalMillis()",
    "returnType" : "long",
    "comment" : "\n     * Returns the minimum update interval. If location updates are available faster than the\n     * request interval then locations will only be updated if the minimum update interval has\n     * expired since the last location update.\n     *\n     * <p class=note><strong>Note:</strong> Some allowance for jitter is already built into the\n     * minimum update interval, so you need not worry about updates blocked simply because they\n     * arrived a fraction of a second earlier than expected.\n     *\n     * @return the minimum update interval\n     ",
    "links" : [ ]
  }, {
    "name" : "public LocationRequest setSmallestDisplacement(float minDisplacementMeters)",
    "returnType" : "LocationRequest",
    "comment" : "\n     * @hide\n     * @deprecated LocationRequests should be treated as immutable.\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getSmallestDisplacement()",
    "returnType" : "float",
    "comment" : "\n     * @hide\n     * @deprecated Use {@link #getMinUpdateDistanceMeters()} instead.\n     ",
    "links" : [ "#getMinUpdateDistanceMeters()" ]
  }, {
    "name" : "public float getMinUpdateDistanceMeters()",
    "returnType" : "float",
    "comment" : "\n     * Returns the minimum distance between location updates. If a potential location update is\n     * closer to the last location update than the minimum update distance, then the potential\n     * location update will not occur. A value of 0 meters implies that no location update will ever\n     * be rejected due to failing this constraint.\n     *\n     * @return the minimum distance between location updates\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getMaxUpdateDelayMillis()",
    "returnType" : "long",
    "comment" : "\n     * Returns the maximum time any location update may be delayed, and thus grouped with following\n     * updates to enable location batching. If the maximum update delay is equal to or greater than\n     * twice the interval, then location providers may provide batched results. The maximum batch\n     * size is the maximum update delay divided by the interval. Not all devices or location\n     * providers support batching, and use of this parameter does not guarantee that the client will\n     * see batched results, or that batched results will always be of the maximum size.\n     *\n     * When available, batching can provide substantial power savings to the device, and clients are\n     * encouraged to take advantage where appropriate for the use case.\n     *\n     * @see LocationListener#onLocationChanged(java.util.List)\n     * @return the maximum time by which a location update may be delayed\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setHideFromAppOps(boolean hiddenFromAppOps)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     * @deprecated LocationRequests should be treated as immutable.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getHideFromAppOps()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     * @deprecated Use {@link #isHiddenFromAppOps()} instead.\n     ",
    "links" : [ "#isHiddenFromAppOps()" ]
  }, {
    "name" : "public boolean isHiddenFromAppOps()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this request should be ignored while updating app ops with location usage.\n     * This implies that someone else (usually the creator of the location request) is responsible\n     * for updating app ops.\n     *\n     * @return true if this request should be ignored while updating app ops with location usage\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isAdasGnssBypass()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this request may access GNSS even if location settings would normally deny\n     * this, in order to enable automotive safety features. This field is only respected on\n     * automotive devices, and only if the client is recognized as a legitimate ADAS (Advanced\n     * Driving Assistance Systems) application.\n     *\n     * @return true if all limiting factors will be ignored to satisfy GNSS request\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public LocationRequest setLocationSettingsIgnored(boolean locationSettingsIgnored)",
    "returnType" : "LocationRequest",
    "comment" : "\n     * @hide\n     * @deprecated LocationRequests should be treated as immutable.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isLocationSettingsIgnored()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if location settings, throttling, background location limits, and any other\n     * possible limiting factors will be ignored in order to satisfy this request.\n     *\n     * @return true if all limiting factors will be ignored to satisfy this request\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isBypass()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if any bypass flag is set on this request. For internal use only.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public LocationRequest setLowPowerMode(boolean enabled)",
    "returnType" : "LocationRequest",
    "comment" : "\n     * @hide\n     * @deprecated LocationRequests should be treated as immutable.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isLowPowerMode()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     * @deprecated Use {@link #isLowPower()} instead.\n     ",
    "links" : [ "#isLowPower()" ]
  }, {
    "name" : "public boolean isLowPower()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if extreme trade-offs should be made to save power for this request. This\n     * usually involves specialized hardware modes which can greatly affect the quality of\n     * locations.\n     *\n     * @return true if extreme trade-offs should be made to save power for this request\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setWorkSource(@Nullable WorkSource workSource)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     * @deprecated LocationRequests should be treated as immutable.\n     ",
    "links" : [ ]
  }, {
    "name" : "public WorkSource getWorkSource()",
    "returnType" : "WorkSource",
    "comment" : "\n     * Returns the work source used for power blame for this request. If empty, the system is free\n     * to assign power blame as it deems most appropriate.\n     *\n     * @return the work source used for power blame for this request\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel parcel, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static LocationRequest create()", "public static LocationRequest createFromDeprecatedProvider(@NonNull String provider, long intervalMillis, float minUpdateDistanceMeters, boolean singleShot)", "public static LocationRequest createFromDeprecatedCriteria(@NonNull Criteria criteria, long intervalMillis, float minUpdateDistanceMeters, boolean singleShot)", "public LocationRequest setProvider(@NonNull String provider)", "public String getProvider()", "public LocationRequest setQuality(int quality)", "public int getQuality()", "public LocationRequest setInterval(long millis)", "public long getInterval()", "public long getIntervalMillis()", "public LocationRequest setFastestInterval(long millis)", "public long getFastestInterval()", "public LocationRequest setExpireAt(long millis)", "public long getExpireAt()", "public LocationRequest setExpireIn(long millis)", "public long getExpireIn()", "public long getDurationMillis()", "public long getExpirationRealtimeMs(long startRealtimeMs)", "public LocationRequest setNumUpdates(int numUpdates)", "public int getNumUpdates()", "public int getMaxUpdates()", "public long getMinUpdateIntervalMillis()", "public LocationRequest setSmallestDisplacement(float minDisplacementMeters)", "public float getSmallestDisplacement()", "public float getMinUpdateDistanceMeters()", "public long getMaxUpdateDelayMillis()", "public void setHideFromAppOps(boolean hiddenFromAppOps)", "public boolean getHideFromAppOps()", "public boolean isHiddenFromAppOps()", "public boolean isAdasGnssBypass()", "public LocationRequest setLocationSettingsIgnored(boolean locationSettingsIgnored)", "public boolean isLocationSettingsIgnored()", "public boolean isBypass()", "public LocationRequest setLowPowerMode(boolean enabled)", "public boolean isLowPowerMode()", "public boolean isLowPower()", "public void setWorkSource(@Nullable WorkSource workSource)", "public WorkSource getWorkSource()", "public int describeContents()", "public void writeToParcel(@NonNull Parcel parcel, int flags)", "public boolean equals(Object o)", "public int hashCode()", "public String toString()" ],
  "variableNames" : [ "LOW_POWER_EXCEPTIONS", "PASSIVE_INTERVAL", "QUALITY_HIGH_ACCURACY", "QUALITY_BALANCED_POWER_ACCURACY", "QUALITY_LOW_POWER", "ACCURACY_FINE", "ACCURACY_BLOCK", "ACCURACY_CITY", "POWER_NONE", "POWER_LOW", "POWER_HIGH", "IMPLICIT_MIN_UPDATE_INTERVAL", "IMPLICIT_MIN_UPDATE_INTERVAL_FACTOR", "mProvider", "mQuality", "mIntervalMillis", "mMinUpdateIntervalMillis", "mExpireAtRealtimeMillis", "mDurationMillis", "mMaxUpdates", "mMinUpdateDistanceMeters", "mMaxUpdateDelayMillis", "mHideFromAppOps", "mAdasGnssBypass", "mBypass", "mLowPower", "mWorkSource", "CREATOR" ]
}