{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/location/LocationRequest.java",
  "packageName" : "android.location",
  "className" : "LocationRequest",
  "comment" : "\n * A data object that contains quality of service parameters for requests\n * to the {@link LocationManager}.\n *\n * <p>LocationRequest objects are used to request a quality of service\n * for location updates from the Location Manager.\n *\n * <p>For example, if your application wants high accuracy location\n * it should create a location request with {@link #setQuality} set to\n * {@link #ACCURACY_FINE} or {@link #POWER_HIGH}, and it should set\n * {@link #setInterval} to less than one second. This would be\n * appropriate for mapping applications that are showing your location\n * in real-time.\n *\n * <p>At the other extreme, if you want negligible power\n * impact, but to still receive location updates when available, then use\n * {@link #setQuality} with {@link #POWER_NONE}. With this request your\n * application will not trigger (and therefore will not receive any\n * power blame) any location updates, but will receive locations\n * triggered by other applications. This would be appropriate for\n * applications that have no firm requirement for location, but can\n * take advantage when available.\n *\n * <p>In between these two extremes is a very common use-case, where\n * applications definitely want to receive\n * updates at a specified interval, and can receive them faster when\n * available, but still want a low power impact. These applications\n * should consider {@link #POWER_LOW} combined with a faster\n * {@link #setFastestInterval} (such as 1 minute) and a slower\n * {@link #setInterval} (such as 60 minutes). They will only be assigned\n * power blame for the interval set by {@link #setInterval}, but can\n * still receive locations triggered by other applications at a rate up\n * to {@link #setFastestInterval}. This style of request is appropriate for\n * many location aware applications, including background usage. Do be\n * careful to also throttle {@link #setFastestInterval} if you perform\n * heavy-weight work after receiving an update - such as using the network.\n *\n * <p>Activities should strongly consider removing all location\n * request when entering the background, or\n * at least swap the request to a larger interval and lower quality.\n * Future version of the location manager may automatically perform background\n * throttling on behalf of applications.\n *\n * <p>Applications cannot specify the exact location sources that are\n * used by Android's <em>Fusion Engine</em>. In fact, the system\n * may have multiple location sources (providers) running and may\n * fuse the results from several sources into a single Location object.\n *\n * <p>Location requests from applications with\n * {@link android.Manifest.permission#ACCESS_COARSE_LOCATION} and not\n * {@link android.Manifest.permission#ACCESS_FINE_LOCATION} will\n * be automatically throttled to a slower interval, and the location\n * object will be obfuscated to only show a coarse level of accuracy.\n *\n * <p>All location requests are considered hints, and you may receive\n * locations that are more accurate, less accurate, and slower\n * than requested.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "ACCURACY_FINE",
    "type" : "int",
    "comment" : "\n     * Used with {@link #setQuality} to request the most accurate locations available.\n     *\n     * <p>This may be up to 1 meter accuracy, although this is implementation dependent.\n     ",
    "links" : [ "#setQuality" ]
  }, {
    "name" : "ACCURACY_BLOCK",
    "type" : "int",
    "comment" : "\n     * Used with {@link #setQuality} to request \"block\" level accuracy.\n     *\n     * <p>Block level accuracy is considered to be about 100 meter accuracy,\n     * although this is implementation dependent. Using a coarse accuracy\n     * such as this often consumes less power.\n     ",
    "links" : [ "#setQuality" ]
  }, {
    "name" : "ACCURACY_CITY",
    "type" : "int",
    "comment" : "\n     * Used with {@link #setQuality} to request \"city\" level accuracy.\n     *\n     * <p>City level accuracy is considered to be about 10km accuracy,\n     * although this is implementation dependent. Using a coarse accuracy\n     * such as this often consumes less power.\n     ",
    "links" : [ "#setQuality" ]
  }, {
    "name" : "POWER_NONE",
    "type" : "int",
    "comment" : "\n     * Used with {@link #setQuality} to require no direct power impact (passive locations).\n     *\n     * <p>This location request will not trigger any active location requests,\n     * but will receive locations triggered by other applications. Your application\n     * will not receive any direct power blame for location work.\n     ",
    "links" : [ "#setQuality" ]
  }, {
    "name" : "POWER_LOW",
    "type" : "int",
    "comment" : "\n     * Used with {@link #setQuality} to request low power impact.\n     *\n     * <p>This location request will avoid high power location work where\n     * possible.\n     ",
    "links" : [ "#setQuality" ]
  }, {
    "name" : "POWER_HIGH",
    "type" : "int",
    "comment" : "\n     * Used with {@link #setQuality} to allow high power consumption for location.\n     *\n     * <p>This location request will allow high power location work.\n     ",
    "links" : [ "#setQuality" ]
  }, {
    "name" : "DEFAULT_INTERVAL_MS",
    "type" : "long",
    "comment" : " 1 hour",
    "links" : [ ]
  }, {
    "name" : "FASTEST_INTERVAL_FACTOR",
    "type" : "double",
    "comment" : " 6x",
    "links" : [ ]
  }, {
    "name" : "mProvider",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mQuality",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInterval",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFastestInterval",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExplicitFastestInterval",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExpireAt",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExpireIn",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNumUpdates",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSmallestDisplacement",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHideFromAppOps",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLocationSettingsIgnored",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLowPowerMode",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWorkSource",
    "type" : "WorkSource",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<LocationRequest>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static LocationRequest create()",
    "returnType" : "LocationRequest",
    "comment" : "\n     * Create a location request with default parameters.\n     *\n     * <p>Default parameters are for a low power, slowly updated location.\n     * It can then be adjusted as required by the applications before passing\n     * to the {@link LocationManager}\n     *\n     * @return a new location request\n     ",
    "links" : [ "android.location.LocationManager" ]
  }, {
    "name" : "public static LocationRequest createFromDeprecatedProvider(@NonNull String provider, long minTime, float minDistance, boolean singleShot)",
    "returnType" : "LocationRequest",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static LocationRequest createFromDeprecatedCriteria(@NonNull Criteria criteria, long minTime, float minDistance, boolean singleShot)",
    "returnType" : "LocationRequest",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public LocationRequest setQuality(int quality)",
    "returnType" : "LocationRequest",
    "comment" : "\n     * Set the quality of the request.\n     *\n     * <p>Use with a accuracy constant such as {@link #ACCURACY_FINE}, or a power\n     * constant such as {@link #POWER_LOW}. You cannot request both accuracy and\n     * power, only one or the other can be specified. The system will then\n     * maximize accuracy or minimize power as appropriate.\n     *\n     * <p>The quality of the request is a strong hint to the system for which\n     * location sources to use. For example, {@link #ACCURACY_FINE} is more likely\n     * to use GPS, and {@link #POWER_LOW} is more likely to use WIFI & Cell tower\n     * positioning, but it also depends on many other factors (such as which sources\n     * are available) and is implementation dependent.\n     *\n     * <p>{@link #setQuality} and {@link #setInterval} are the most important parameters\n     * on a location request.\n     *\n     * @param quality an accuracy or power constant\n     * @return the same object, so that setters can be chained\n     * @throws IllegalArgumentException if the quality constant is not valid\n     ",
    "links" : [ "#POWER_LOW", "#setQuality", "#setInterval", "#ACCURACY_FINE" ]
  }, {
    "name" : "public int getQuality()",
    "returnType" : "int",
    "comment" : "\n     * Get the quality of the request.\n     *\n     * @return an accuracy or power constant\n     ",
    "links" : [ ]
  }, {
    "name" : "public LocationRequest setInterval(long millis)",
    "returnType" : "LocationRequest",
    "comment" : "\n     * Set the desired interval for active location updates, in milliseconds.\n     *\n     * <p>The location manager will actively try to obtain location updates\n     * for your application at this interval, so it has a\n     * direct influence on the amount of power used by your application.\n     * Choose your interval wisely.\n     *\n     * <p>This interval is inexact. You may not receive updates at all (if\n     * no location sources are available), or you may receive them\n     * slower than requested. You may also receive them faster than\n     * requested (if other applications are requesting location at a\n     * faster interval). The fastest rate that you will receive\n     * updates can be controlled with {@link #setFastestInterval}.\n     *\n     * <p>Applications with only the coarse location permission may have their\n     * interval silently throttled.\n     *\n     * <p>An interval of 0 is allowed, but not recommended, since\n     * location updates may be extremely fast on future implementations.\n     *\n     * <p>{@link #setQuality} and {@link #setInterval} are the most important parameters\n     * on a location request.\n     *\n     * @param millis desired interval in millisecond, inexact\n     * @return the same object, so that setters can be chained\n     * @throws IllegalArgumentException if the interval is less than zero\n     ",
    "links" : [ "#setQuality", "#setInterval", "#setFastestInterval" ]
  }, {
    "name" : "public long getInterval()",
    "returnType" : "long",
    "comment" : "\n     * Get the desired interval of this request, in milliseconds.\n     *\n     * @return desired interval in milliseconds, inexact\n     ",
    "links" : [ ]
  }, {
    "name" : "public LocationRequest setLowPowerMode(boolean enabled)",
    "returnType" : "LocationRequest",
    "comment" : "\n     * Requests the GNSS chipset to run in a low power mode and make strong tradeoffs to\n     * substantially restrict power.\n     *\n     * <p>In this mode, the GNSS chipset will not, on average, run power hungry operations like RF &\n     * signal searches for more than one second per interval (specified by\n     * {@link #setInterval(long)}).\n     *\n     * @param enabled Enable or disable low power mode\n     * @return the same object, so that setters can be chained\n     ",
    "links" : [ "#setInterval(long)" ]
  }, {
    "name" : "public boolean isLowPowerMode()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if low power mode is enabled.\n     ",
    "links" : [ ]
  }, {
    "name" : "public LocationRequest setLocationSettingsIgnored(boolean locationSettingsIgnored)",
    "returnType" : "LocationRequest",
    "comment" : "\n     * Requests that user location settings be ignored in order to satisfy this request. This API\n     * is only for use in extremely rare scenarios where it is appropriate to ignore user location\n     * settings, such as a user initiated emergency (dialing 911 for instance).\n     *\n     * @param locationSettingsIgnored Whether to ignore location settings\n     * @return the same object, so that setters can be chained\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isLocationSettingsIgnored()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if location settings will be ignored in order to satisfy this request.\n     ",
    "links" : [ ]
  }, {
    "name" : "public LocationRequest setFastestInterval(long millis)",
    "returnType" : "LocationRequest",
    "comment" : "\n     * Explicitly set the fastest interval for location updates, in\n     * milliseconds.\n     *\n     * <p>This controls the fastest rate at which your application will\n     * receive location updates, which might be faster than\n     * {@link #setInterval} in some situations (for example, if other\n     * applications are triggering location updates).\n     *\n     * <p>This allows your application to passively acquire locations\n     * at a rate faster than it actively acquires locations, saving power.\n     *\n     * <p>Unlike {@link #setInterval}, this parameter is exact. Your\n     * application will never receive updates faster than this value.\n     *\n     * <p>If you don't call this method, a fastest interval\n     * will be selected for you. It will be a value faster than your\n     * active interval ({@link #setInterval}).\n     *\n     * <p>An interval of 0 is allowed, but not recommended, since\n     * location updates may be extremely fast on future implementations.\n     *\n     * <p>If the fastest interval set is slower than {@link #setInterval},\n     * then your effective fastest interval is {@link #setInterval}.\n     *\n     * @param millis fastest interval for updates in milliseconds\n     * @return the same object, so that setters can be chained\n     * @throws IllegalArgumentException if the interval is less than zero\n     ",
    "links" : [ "#setInterval" ]
  }, {
    "name" : "public long getFastestInterval()",
    "returnType" : "long",
    "comment" : "\n     * Get the fastest interval of this request in milliseconds. The system will never provide\n     * location updates faster than the minimum of the fastest interval and {@link #getInterval}.\n     *\n     * @return fastest interval in milliseconds\n     ",
    "links" : [ "#getInterval" ]
  }, {
    "name" : "public LocationRequest setExpireAt(long millis)",
    "returnType" : "LocationRequest",
    "comment" : "\n     * Set the expiration time of this request in milliseconds of realtime since boot. Values in the\n     * past are allowed, but indicate that the request has already expired. The location manager\n     * will automatically stop updates after the request expires.\n     *\n     * @param millis expiration time of request in milliseconds since boot\n     * @return the same object, so that setters can be chained\n     * @see SystemClock#elapsedRealtime()\n     * @deprecated Prefer {@link #setExpireIn(long)}.\n     ",
    "links" : [ "#setExpireIn(long)" ]
  }, {
    "name" : "public long getExpireAt()",
    "returnType" : "long",
    "comment" : "\n     * Get the request expiration time in milliseconds of realtime since boot.\n     *\n     * @return request expiration time in milliseconds since boot\n     * @see SystemClock#elapsedRealtime()\n     * @deprecated Prefer {@link #getExpireIn()}.\n     ",
    "links" : [ "#getExpireIn()" ]
  }, {
    "name" : "public LocationRequest setExpireIn(long millis)",
    "returnType" : "LocationRequest",
    "comment" : "\n     * Set the duration of this request in milliseconds of realtime. Values less than 0 are allowed,\n     * but indicate that the request has already expired. The location manager will automatically\n     * stop updates after the request expires.\n     *\n     * @param millis duration of request in milliseconds\n     * @return the same object, so that setters can be chained\n     * @see SystemClock#elapsedRealtime()\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getExpireIn()",
    "returnType" : "long",
    "comment" : "\n     * Get the request expiration duration in milliseconds of realtime.\n     *\n     * @return request expiration duration in milliseconds\n     * @see SystemClock#elapsedRealtime()\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getExpirationRealtimeMs(long startRealtimeMs)",
    "returnType" : "long",
    "comment" : "\n     * Returns the realtime at which this request expires, taking into account both\n     * {@link #setExpireAt(long)} and {@link #setExpireIn(long)} relative to the given realtime.\n     *\n     * @hide\n     ",
    "links" : [ "#setExpireIn(long)", "#setExpireAt(long)" ]
  }, {
    "name" : "public LocationRequest setNumUpdates(int numUpdates)",
    "returnType" : "LocationRequest",
    "comment" : "\n     * Set the number of location updates.\n     *\n     * <p>By default locations are continuously updated until the request is explicitly\n     * removed, however you can optionally request a set number of updates.\n     * For example, if your application only needs a single fresh location,\n     * then call this method with a value of 1 before passing the request\n     * to the location manager.\n     *\n     * @param numUpdates the number of location updates requested\n     * @return the same object, so that setters can be chained\n     * @throws IllegalArgumentException if numUpdates is 0 or less\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getNumUpdates()",
    "returnType" : "int",
    "comment" : "\n     * Get the number of updates requested.\n     *\n     * <p>By default this is {@link Integer#MAX_VALUE}, which indicates that\n     * locations are updated until the request is explicitly removed.\n     *\n     * @return number of updates\n     ",
    "links" : [ "#MAX_VALUE" ]
  }, {
    "name" : "public void decrementNumUpdates()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public LocationRequest setProvider(@NonNull String provider)",
    "returnType" : "LocationRequest",
    "comment" : " Sets the provider to use for this location request. ",
    "links" : [ ]
  }, {
    "name" : "public String getProvider()",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public LocationRequest setSmallestDisplacement(float smallestDisplacementM)",
    "returnType" : "LocationRequest",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public float getSmallestDisplacement()",
    "returnType" : "float",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setWorkSource(@Nullable WorkSource workSource)",
    "returnType" : "void",
    "comment" : "\n     * Sets the WorkSource to use for power blaming of this location request.\n     *\n     * <p>No permissions are required to make this call, however the LocationManager\n     * will throw a SecurityException when requesting location updates if the caller\n     * doesn't have the {@link android.Manifest.permission#UPDATE_DEVICE_STATS} permission.\n     *\n     * @param workSource WorkSource defining power blame for this location request.\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission#UPDATE_DEVICE_STATS" ]
  }, {
    "name" : "public WorkSource getWorkSource()",
    "returnType" : "WorkSource",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setHideFromAppOps(boolean hideFromAppOps)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether or not this location request should be hidden from AppOps.\n     *\n     * <p>Hiding a location request from AppOps will remove user visibility in the UI as to this\n     * request's existence.  It does not affect power blaming in the Battery page.\n     *\n     * <p>No permissions are required to make this call, however the LocationManager\n     * will throw a SecurityException when requesting location updates if the caller\n     * doesn't have the {@link android.Manifest.permission#UPDATE_APP_OPS_STATS} permission.\n     *\n     * @param hideFromAppOps If true AppOps won't keep track of this location request.\n     * @hide\n     * @see android.app.AppOpsManager\n     ",
    "links" : [ "android.Manifest.permission#UPDATE_APP_OPS_STATS" ]
  }, {
    "name" : "public boolean getHideFromAppOps()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private static void checkQuality(int quality)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel parcel, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String qualityToString(int quality)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "ACCURACY_FINE", "ACCURACY_BLOCK", "ACCURACY_CITY", "POWER_NONE", "POWER_LOW", "POWER_HIGH", "DEFAULT_INTERVAL_MS", "FASTEST_INTERVAL_FACTOR", "mProvider", "mQuality", "mInterval", "mFastestInterval", "mExplicitFastestInterval", "mExpireAt", "mExpireIn", "mNumUpdates", "mSmallestDisplacement", "mHideFromAppOps", "mLocationSettingsIgnored", "mLowPowerMode", "mWorkSource", "CREATOR" ],
  "methodNames" : [ "public static LocationRequest create()", "public static LocationRequest createFromDeprecatedProvider(@NonNull String provider, long minTime, float minDistance, boolean singleShot)", "public static LocationRequest createFromDeprecatedCriteria(@NonNull Criteria criteria, long minTime, float minDistance, boolean singleShot)", "public LocationRequest setQuality(int quality)", "public int getQuality()", "public LocationRequest setInterval(long millis)", "public long getInterval()", "public LocationRequest setLowPowerMode(boolean enabled)", "public boolean isLowPowerMode()", "public LocationRequest setLocationSettingsIgnored(boolean locationSettingsIgnored)", "public boolean isLocationSettingsIgnored()", "public LocationRequest setFastestInterval(long millis)", "public long getFastestInterval()", "public LocationRequest setExpireAt(long millis)", "public long getExpireAt()", "public LocationRequest setExpireIn(long millis)", "public long getExpireIn()", "public long getExpirationRealtimeMs(long startRealtimeMs)", "public LocationRequest setNumUpdates(int numUpdates)", "public int getNumUpdates()", "public void decrementNumUpdates()", "public LocationRequest setProvider(@NonNull String provider)", "public String getProvider()", "public LocationRequest setSmallestDisplacement(float smallestDisplacementM)", "public float getSmallestDisplacement()", "public void setWorkSource(@Nullable WorkSource workSource)", "public WorkSource getWorkSource()", "public void setHideFromAppOps(boolean hideFromAppOps)", "public boolean getHideFromAppOps()", "private static void checkQuality(int quality)", "public int describeContents()", "public void writeToParcel(Parcel parcel, int flags)", "public static String qualityToString(int quality)", "public String toString()" ]
}