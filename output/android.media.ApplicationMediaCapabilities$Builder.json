{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/ApplicationMediaCapabilities.java",
  "packageName" : "android.media",
  "className" : "Builder",
  "comment" : "\n     * Builder class for {@link ApplicationMediaCapabilities} objects.\n     * Use this class to configure and create an ApplicationMediaCapabilities instance. Builder\n     * could be created from an existing ApplicationMediaCapabilities object, from a xml file or\n     * MediaCodecList.\n     * //TODO(hkuang): Add xml parsing support to the builder.\n     ",
  "links" : [ "android.media.ApplicationMediaCapabilities" ],
  "variables" : [ {
    "name" : "mSupportedVideoMimeTypes",
    "type" : "Set<String>",
    "comment" : " List of supported video codec mime types. ",
    "links" : [ ]
  }, {
    "name" : "mSupportedHdrTypes",
    "type" : "Set<String>",
    "comment" : " List of supported hdr types. ",
    "links" : [ ]
  }, {
    "name" : "mUnsupportedVideoMimeTypes",
    "type" : "Set<String>",
    "comment" : " List of unsupported video codec mime types. ",
    "links" : [ ]
  }, {
    "name" : "mUnsupportedHdrTypes",
    "type" : "Set<String>",
    "comment" : " List of unsupported hdr types. ",
    "links" : [ ]
  }, {
    "name" : "mIsSlowMotionSupported",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFormatSupportedMap",
    "type" : "Map<String, Boolean>",
    "comment" : " Map to save the format read from the xml. ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void parseXml(@NonNull XmlPullParser xmlParser) throws UnsupportedOperationException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void parseFormatTag(XmlPullParser xmlParser)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ApplicationMediaCapabilities build()",
    "returnType" : "ApplicationMediaCapabilities",
    "comment" : "\n         * Builds a {@link ApplicationMediaCapabilities} object.\n         *\n         * @return a new {@link ApplicationMediaCapabilities} instance successfully initialized\n         * with all the parameters set on this <code>Builder</code>.\n         * @throws UnsupportedOperationException if the parameters set on the\n         *                                       <code>Builder</code> were incompatible, or if they\n         *                                       are not supported by the\n         *                                       device.\n         ",
    "links" : [ "android.media.ApplicationMediaCapabilities" ]
  }, {
    "name" : "public Builder addSupportedVideoMimeType(@NonNull String codecMime)",
    "returnType" : "Builder",
    "comment" : "\n         * Adds a supported video codec mime type.\n         *\n         * @param codecMime Supported codec mime types. Must be one of the mime type defined\n         *                  in {@link MediaFormat}.\n         * @throws IllegalArgumentException if mime type is not valid.\n         ",
    "links" : [ "android.media.MediaFormat" ]
  }, {
    "name" : "private List<String> getSupportedVideoMimeTypes()",
    "returnType" : "List<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isValidVideoCodecMimeType(@NonNull String codecMime)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Builder addUnsupportedVideoMimeType(@NonNull String codecMime)",
    "returnType" : "Builder",
    "comment" : "\n         * Adds an unsupported video codec mime type.\n         *\n         * @param codecMime Unsupported codec mime type. Must be one of the mime type defined\n         *                  in {@link MediaFormat}.\n         * @throws IllegalArgumentException if mime type is not valid.\n         ",
    "links" : [ "android.media.MediaFormat" ]
  }, {
    "name" : "private List<String> getUnsupportedVideoMimeTypes()",
    "returnType" : "List<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Builder addSupportedHdrType(@NonNull @MediaFeature.MediaHdrType String hdrType)",
    "returnType" : "Builder",
    "comment" : "\n         * Adds a supported hdr type.\n         *\n         * @param hdrType Supported hdr type. Must be one of the String defined in\n         *                {@link MediaFeature.HdrType}.\n         * @throws IllegalArgumentException if hdrType is not valid.\n         ",
    "links" : [ "MediaFeature.HdrType" ]
  }, {
    "name" : "private List<String> getSupportedHdrTypes()",
    "returnType" : "List<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isValidVideoCodecHdrType(@NonNull String hdrType)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Builder addUnsupportedHdrType(@NonNull @MediaFeature.MediaHdrType String hdrType)",
    "returnType" : "Builder",
    "comment" : "\n         * Adds an unsupported hdr type.\n         *\n         * @param hdrType Unsupported hdr type. Must be one of the String defined in\n         *                {@link MediaFeature.HdrType}.\n         * @throws IllegalArgumentException if hdrType is not valid.\n         ",
    "links" : [ "MediaFeature.HdrType" ]
  }, {
    "name" : "private List<String> getUnsupportedHdrTypes()",
    "returnType" : "List<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Builder setSlowMotionSupported(boolean slowMotionSupported)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets whether slow-motion video is supported.\n         * If an application indicates support for slow-motion, it is application's responsibility\n         * to parse the slow-motion videos using their own parser or using support library.\n         * @see android.media.MediaFormat#KEY_SLOW_MOTION_MARKERS\n         * @hide\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void parseXml(@NonNull XmlPullParser xmlParser) throws UnsupportedOperationException", "private void parseFormatTag(XmlPullParser xmlParser)", "public ApplicationMediaCapabilities build()", "public Builder addSupportedVideoMimeType(@NonNull String codecMime)", "private List<String> getSupportedVideoMimeTypes()", "private boolean isValidVideoCodecMimeType(@NonNull String codecMime)", "public Builder addUnsupportedVideoMimeType(@NonNull String codecMime)", "private List<String> getUnsupportedVideoMimeTypes()", "public Builder addSupportedHdrType(@NonNull @MediaFeature.MediaHdrType String hdrType)", "private List<String> getSupportedHdrTypes()", "private boolean isValidVideoCodecHdrType(@NonNull String hdrType)", "public Builder addUnsupportedHdrType(@NonNull @MediaFeature.MediaHdrType String hdrType)", "private List<String> getUnsupportedHdrTypes()", "public Builder setSlowMotionSupported(boolean slowMotionSupported)" ],
  "variableNames" : [ "mSupportedVideoMimeTypes", "mSupportedHdrTypes", "mUnsupportedVideoMimeTypes", "mUnsupportedHdrTypes", "mIsSlowMotionSupported", "mFormatSupportedMap" ]
}