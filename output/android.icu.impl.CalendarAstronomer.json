{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/CalendarAstronomer.java",
  "packageName" : "android.icu.impl",
  "className" : "CalendarAstronomer",
  "comment" : "\n * <code>CalendarAstronomer</code> is a class that can perform the calculations to\n * determine the positions of the sun and moon, the time of sunrise and\n * sunset, and other astronomy-related data.  The calculations it performs\n * are in some cases quite complicated, and this utility class saves you\n * the trouble of worrying about them.\n * <p>\n * The measurement of time is a very important part of astronomy.  Because\n * astronomical bodies are constantly in motion, observations are only valid\n * at a given moment in time.  Accordingly, each <code>CalendarAstronomer</code>\n * object has a <code>time</code> property that determines the date\n * and time for which its calculations are performed.  You can set and\n * retrieve this property with {@link #setDate setDate}, {@link #getDate getDate}\n * and related methods.\n * <p>\n * Almost all of the calculations performed by this class, or by any\n * astronomer, are approximations to various degrees of accuracy.  The\n * calculations in this class are mostly modelled after those described\n * in the book\n * <a href=\"http://www.amazon.com/exec/obidos/ISBN=0521356997\" target=\"_top\">\n * Practical Astronomy With Your Calculator</a>, by Peter J.\n * Duffett-Smith, Cambridge University Press, 1990.  This is an excellent\n * book, and if you want a greater understanding of how these calculations\n * are performed it a very good, readable starting point.\n * <p>\n * <strong>WARNING:</strong> This class is very early in its development, and\n * it is highly likely that its API will change to some degree in the future.\n * At the moment, it basically does just enough to support {@link android.icu.util.IslamicCalendar}\n * and {@link android.icu.util.ChineseCalendar}.\n *\n * @author Laura Werner\n * @author Alan Liu\n * @hide Only a subset of ICU is exposed in Android\n * @hide draft / provisional / internal are hidden on Android\n ",
  "links" : [ "android.icu.util.ChineseCalendar", "android.icu.util.IslamicCalendar", "#getDate", "#setDate" ],
  "variables" : [ {
    "name" : "SIDEREAL_DAY",
    "type" : "double",
    "comment" : "\n     * The number of standard hours in one sidereal day.\n     * Approximately 24.93.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "SOLAR_DAY",
    "type" : "double",
    "comment" : "\n     * The number of sidereal hours in one mean solar day.\n     * Approximately 24.07.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "SYNODIC_MONTH",
    "type" : "double",
    "comment" : "\n     * The average number of solar days from one new moon to the next.  This is the time\n     * it takes for the moon to return the same ecliptic longitude as the sun.\n     * It is longer than the sidereal month because the sun's longitude increases\n     * during the year due to the revolution of the earth around the sun.\n     * Approximately 29.53.\n     *\n     * @see #SIDEREAL_MONTH\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "SIDEREAL_MONTH",
    "type" : "double",
    "comment" : "\n     * The average number of days it takes\n     * for the moon to return to the same ecliptic longitude relative to the\n     * stellar background.  This is referred to as the sidereal month.\n     * It is shorter than the synodic month due to\n     * the revolution of the earth around the sun.\n     * Approximately 27.32.\n     *\n     * @see #SYNODIC_MONTH\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "TROPICAL_YEAR",
    "type" : "double",
    "comment" : "\n     * The average number number of days between successive vernal equinoxes.\n     * Due to the precession of the earth's\n     * axis, this is not precisely the same as the sidereal year.\n     * Approximately 365.24\n     *\n     * @see #SIDEREAL_YEAR\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "SIDEREAL_YEAR",
    "type" : "double",
    "comment" : "\n     * The average number of days it takes\n     * for the sun to return to the same position against the fixed stellar\n     * background.  This is the duration of one orbit of the earth about the sun\n     * as it would appear to an outside observer.\n     * Due to the precession of the earth's\n     * axis, this is not precisely the same as the tropical year.\n     * Approximately 365.25.\n     *\n     * @see #TROPICAL_YEAR\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "SECOND_MS",
    "type" : "int",
    "comment" : "\n     * The number of milliseconds in one second.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "MINUTE_MS",
    "type" : "int",
    "comment" : "\n     * The number of milliseconds in one minute.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "HOUR_MS",
    "type" : "int",
    "comment" : "\n     * The number of milliseconds in one hour.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "DAY_MS",
    "type" : "long",
    "comment" : "\n     * The number of milliseconds in one day.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "JULIAN_EPOCH_MS",
    "type" : "long",
    "comment" : "\n     * The start of the julian day numbering scheme used by astronomers, which\n     * is 1/1/4713 BC (Julian), 12:00 GMT.  This is given as the number of milliseconds\n     * since 1/1/1970 AD (Gregorian), a negative number.\n     * Note that julian day numbers and\n     * the Julian calendar are <em>not</em> the same thing.  Also note that\n     * julian days start at <em>noon</em>, not midnight.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "EPOCH_2000_MS",
    "type" : "long",
    "comment" : "\n     * Milliseconds value for 0.0 January 2000 AD.\n     ",
    "links" : [ ]
  }, {
    "name" : "PI",
    "type" : "double",
    "comment" : " My own copies of these so compilers are more likely to optimize them away",
    "links" : [ ]
  }, {
    "name" : "PI2",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RAD_HOUR",
    "type" : "double",
    "comment" : " radians -> hours",
    "links" : [ ]
  }, {
    "name" : "DEG_RAD",
    "type" : "double",
    "comment" : " degrees -> radians",
    "links" : [ ]
  }, {
    "name" : "RAD_DEG",
    "type" : "double",
    "comment" : " radians -> degrees",
    "links" : [ ]
  }, {
    "name" : "JD_EPOCH",
    "type" : "double",
    "comment" : " Julian day of epoch",
    "links" : [ ]
  }, {
    "name" : "SUN_ETA_G",
    "type" : "double",
    "comment" : " Ecliptic longitude at epoch",
    "links" : [ ]
  }, {
    "name" : "SUN_OMEGA_G",
    "type" : "double",
    "comment" : " Ecliptic longitude of perigee",
    "links" : [ ]
  }, {
    "name" : "SUN_E",
    "type" : "double",
    "comment" : " Eccentricity of orbit",
    "links" : [ ]
  }, {
    "name" : "WINTER_SOLSTICE",
    "type" : "SolarLongitude",
    "comment" : "\n     * Constant representing the winter solstice.\n     * For use with {@link #getSunTime(SolarLongitude, boolean) getSunTime}.\n     * Note: In this case, \"winter\" refers to the northern hemisphere's seasons.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ "#getSunTime(SolarLongitude" ]
  }, {
    "name" : "moonL0",
    "type" : "double",
    "comment" : " Mean long. at epoch",
    "links" : [ ]
  }, {
    "name" : "moonP0",
    "type" : "double",
    "comment" : " Mean long. of perigee",
    "links" : [ ]
  }, {
    "name" : "moonN0",
    "type" : "double",
    "comment" : " Mean long. of node",
    "links" : [ ]
  }, {
    "name" : "moonI",
    "type" : "double",
    "comment" : " Inclination of orbit",
    "links" : [ ]
  }, {
    "name" : "moonE",
    "type" : "double",
    "comment" : " Eccentricity of orbit",
    "links" : [ ]
  }, {
    "name" : "moonA",
    "type" : "double",
    "comment" : " semi-major axis (km)",
    "links" : [ ]
  }, {
    "name" : "moonT0",
    "type" : "double",
    "comment" : " Angular size at distance A",
    "links" : [ ]
  }, {
    "name" : "moonPi",
    "type" : "double",
    "comment" : " Parallax at distance A",
    "links" : [ ]
  }, {
    "name" : "NEW_MOON",
    "type" : "MoonAge",
    "comment" : "\n     * Constant representing a new moon.\n     * For use with {@link #getMoonTime(MoonAge, boolean) getMoonTime}\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ "#getMoonTime(MoonAge" ]
  }, {
    "name" : "time",
    "type" : "long",
    "comment" : "\n     * Current time in milliseconds since 1/1/1970 AD\n     * @see java.util.Date#getTime\n     ",
    "links" : [ ]
  }, {
    "name" : "INVALID",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "julianDay",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sunLongitude",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "meanAnomalySun",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "moonEclipLong",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "moonPosition",
    "type" : "Equatorial",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setTime(long aTime)",
    "returnType" : "void",
    "comment" : "\n     * Set the current date and time of this <code>CalendarAstronomer</code> object.  All\n     * astronomical calculations are performed based on this time setting.\n     *\n     * @param aTime the date and time, expressed as the number of milliseconds since\n     *              1/1/1970 0:00 GMT (Gregorian).\n     *\n     * @see #setDate\n     * @see #getTime\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setJulianDay(double jdn)",
    "returnType" : "void",
    "comment" : "\n     * Set the current date and time of this <code>CalendarAstronomer</code> object.  All\n     * astronomical calculations are performed based on this time setting.\n     *\n     * @param jdn   the desired time, expressed as a \"julian day number\",\n     *              which is the number of elapsed days since\n     *              1/1/4713 BC (Julian), 12:00 GMT.  Note that julian day\n     *              numbers start at <em>noon</em>.  To get the jdn for\n     *              the corresponding midnight, subtract 0.5.\n     *\n     * @see #getJulianDay\n     * @see #JULIAN_EPOCH_MS\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getTime()",
    "returnType" : "long",
    "comment" : "\n     * Get the current time of this <code>CalendarAstronomer</code> object,\n     * represented as the number of milliseconds since\n     * 1/1/1970 AD 0:00 GMT (Gregorian).\n     *\n     * @see #setTime\n     * @see #getDate\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public Date getDate()",
    "returnType" : "Date",
    "comment" : "\n     * Get the current time of this <code>CalendarAstronomer</code> object,\n     * represented as a <code>Date</code> object.\n     *\n     * @see #setDate\n     * @see #getTime\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public double getJulianDay()",
    "returnType" : "double",
    "comment" : "\n     * Get the current time of this <code>CalendarAstronomer</code> object,\n     * expressed as a \"julian day number\", which is the number of elapsed\n     * days since 1/1/4713 BC (Julian), 12:00 GMT.\n     *\n     * @see #setJulianDay\n     * @see #JULIAN_EPOCH_MS\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public final Equatorial eclipticToEquatorial(double eclipLong, double eclipLat)",
    "returnType" : "Equatorial",
    "comment" : "\n     * Convert from ecliptic to equatorial coordinates.\n     *\n     * @param eclipLong     The ecliptic longitude\n     * @param eclipLat      The ecliptic latitude\n     *\n     * @return              The corresponding point in equatorial coordinates.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public double getSunLongitude()",
    "returnType" : "double",
    "comment" : "\n     * The longitude of the sun at the time specified by this object.\n     * The longitude is measured in radians along the ecliptic\n     * from the \"first point of Aries,\" the point at which the ecliptic\n     * crosses the earth's equatorial plane at the vernal equinox.\n     * <p>\n     * Currently, this method uses an approximation of the two-body Kepler's\n     * equation for the earth and the sun.  It does not take into account the\n     * perturbations caused by the other planets, the moon, etc.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : " double[] getSunLongitude(double julian)",
    "returnType" : "double[]",
    "comment" : "public",
    "links" : [ ]
  }, {
    "name" : "public long getSunTime(double desired, boolean next)",
    "returnType" : "long",
    "comment" : "\n     * Find the next time at which the sun's ecliptic longitude will have\n     * the desired value.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getSunTime(SolarLongitude desired, boolean next)",
    "returnType" : "long",
    "comment" : "\n     * Find the next time at which the sun's ecliptic longitude will have\n     * the desired value.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public Equatorial getMoonPosition()",
    "returnType" : "Equatorial",
    "comment" : "\n     * The position of the moon at the time set on this\n     * object, in equatorial coordinates.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public double getMoonAge()",
    "returnType" : "double",
    "comment" : "\n     * The \"age\" of the moon at the time specified in this object.\n     * This is really the angle between the\n     * current ecliptic longitudes of the sun and the moon,\n     * measured in radians.\n     *\n     * @see #getMoonPhase\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getMoonTime(double desired, boolean next)",
    "returnType" : "long",
    "comment" : "\n     * Find the next or previous time at which the Moon's ecliptic\n     * longitude will have the desired value.\n     * <p>\n     * @param desired   The desired longitude.\n     * @param next      <tt>true</tt> if the next occurrance of the phase\n     *                  is desired, <tt>false</tt> for the previous occurrance.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getMoonTime(MoonAge desired, boolean next)",
    "returnType" : "long",
    "comment" : "\n     * Find the next or previous time at which the moon will be in the\n     * desired phase.\n     * <p>\n     * @param desired   The desired phase of the moon.\n     * @param next      <tt>true</tt> if the next occurrance of the phase\n     *                  is desired, <tt>false</tt> for the previous occurrance.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "private long timeOfAngle(AngleFunc func, double desired, double periodDays, long epsilon, boolean next)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static final double normalize(double value, double range)",
    "returnType" : "double",
    "comment" : "*\n     * Given 'value', add or subtract 'range' until 0 <= 'value' < range.\n     * The modulus operator.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static final double norm2PI(double angle)",
    "returnType" : "double",
    "comment" : "\n     * Normalize an angle so that it's in the range 0 - 2pi.\n     * For positive angles this is just (angle % 2pi), but the Java\n     * mod operator doesn't work that way for negative numbers....\n     ",
    "links" : [ ]
  }, {
    "name" : "private static final double normPI(double angle)",
    "returnType" : "double",
    "comment" : "\n     * Normalize an angle into the range -PI - PI\n     ",
    "links" : [ ]
  }, {
    "name" : "private double trueAnomaly(double meanAnomaly, double eccentricity)",
    "returnType" : "double",
    "comment" : "\n     * Find the \"true anomaly\" (longitude) of an object from\n     * its mean anomaly and the eccentricity of its orbit.  This uses\n     * an iterative solution to Kepler's equation.\n     *\n     * @param meanAnomaly   The object's longitude calculated as if it were in\n     *                      a regular, circular orbit, measured in radians\n     *                      from the point of perigee.\n     *\n     * @param eccentricity  The eccentricity of the orbit\n     *\n     * @return The true anomaly (longitude) measured in radians\n     ",
    "links" : [ ]
  }, {
    "name" : "private double eclipticObliquity()",
    "returnType" : "double",
    "comment" : "\n     * Return the obliquity of the ecliptic (the angle between the ecliptic\n     * and the earth's equator) at the current time.  This varies due to\n     * the precession of the earth's axis.\n     *\n     * @return  the obliquity of the ecliptic relative to the equator,\n     *          measured in radians.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void clearCache()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String radToHms(double angle)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String radToDms(double angle)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setTime(long aTime)", "public void setJulianDay(double jdn)", "public long getTime()", "public Date getDate()", "public double getJulianDay()", "public final Equatorial eclipticToEquatorial(double eclipLong, double eclipLat)", "public double getSunLongitude()", " double[] getSunLongitude(double julian)", "public long getSunTime(double desired, boolean next)", "public long getSunTime(SolarLongitude desired, boolean next)", "public Equatorial getMoonPosition()", "public double getMoonAge()", "public long getMoonTime(double desired, boolean next)", "public long getMoonTime(MoonAge desired, boolean next)", "private long timeOfAngle(AngleFunc func, double desired, double periodDays, long epsilon, boolean next)", "private static final double normalize(double value, double range)", "private static final double norm2PI(double angle)", "private static final double normPI(double angle)", "private double trueAnomaly(double meanAnomaly, double eccentricity)", "private double eclipticObliquity()", "private void clearCache()", "private static String radToHms(double angle)", "private static String radToDms(double angle)" ],
  "variableNames" : [ "SIDEREAL_DAY", "SOLAR_DAY", "SYNODIC_MONTH", "SIDEREAL_MONTH", "TROPICAL_YEAR", "SIDEREAL_YEAR", "SECOND_MS", "MINUTE_MS", "HOUR_MS", "DAY_MS", "JULIAN_EPOCH_MS", "EPOCH_2000_MS", "PI", "PI2", "RAD_HOUR", "DEG_RAD", "RAD_DEG", "JD_EPOCH", "SUN_ETA_G", "SUN_OMEGA_G", "SUN_E", "WINTER_SOLSTICE", "moonL0", "moonP0", "moonN0", "moonI", "moonE", "moonA", "moonT0", "moonPi", "NEW_MOON", "time", "INVALID", "julianDay", "sunLongitude", "meanAnomalySun", "moonEclipLong", "moonPosition" ]
}