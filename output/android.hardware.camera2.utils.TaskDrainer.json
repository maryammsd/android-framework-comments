{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/hardware/camera2/utils/TaskDrainer.java",
  "packageName" : "android.hardware.camera2.utils",
  "className" : "TaskDrainer",
  "comment" : "\n * Keep track of multiple concurrent tasks starting and finishing by their key;\n * allow draining existing tasks and figuring out when all tasks have finished\n * (and new ones won't begin).\n *\n * <p>The initial state is to allow all tasks to be started and finished. A task may only be started\n * once, after which it must be finished before starting again. Likewise, a task may only be\n * finished once, after which it must be started before finishing again. It is okay to finish a\n * task before starting it due to different threads handling starting and finishing.</p>\n *\n * <p>When draining begins, no more new tasks can be started. This guarantees that at some\n * point when all the tasks are finished there will be no more collective new tasks,\n * at which point the {@link DrainListener#onDrained} callback will be invoked.</p>\n *\n *\n * @param <T>\n *          a type for the key that will represent tracked tasks;\n *          must implement {@code Object#equals}\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExecutor",
    "type" : "Executor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mListener",
    "type" : "DrainListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTaskSet",
    "type" : "Set<T>",
    "comment" : " Set of tasks which have been started but not yet finished with #taskFinished ",
    "links" : [ ]
  }, {
    "name" : "mEarlyFinishedTaskSet",
    "type" : "Set<T>",
    "comment" : "\n     * Set of tasks which have been finished but not yet started with #taskStarted. This may happen\n     * if taskStarted and taskFinished are called from two different threads.\n     ",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDraining",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDrainFinished",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void taskStarted(T task)",
    "returnType" : "void",
    "comment" : "\n     * Mark an asynchronous task as having started.\n     *\n     * <p>A task cannot be started more than once without first having finished. Once\n     * draining begins with {@link #beginDrain}, no new tasks can be started.</p>\n     *\n     * @param task a key to identify a task\n     *\n     * @see #taskFinished\n     * @see #beginDrain\n     *\n     * @throws IllegalStateException\n     *          If attempting to start a task which is already started (and not finished),\n     *          or if attempting to start a task after draining has begun.\n     ",
    "links" : [ "#beginDrain" ]
  }, {
    "name" : "public void taskFinished(T task)",
    "returnType" : "void",
    "comment" : "\n     * Mark an asynchronous task as having finished.\n     *\n     * <p>A task cannot be finished more than once without first having started.</p>\n     *\n     * @param task a key to identify a task\n     *\n     * @see #taskStarted\n     * @see #beginDrain\n     *\n     * @throws IllegalStateException\n     *          If attempting to finish a task which is already finished (and not started),\n     ",
    "links" : [ ]
  }, {
    "name" : "public void beginDrain()",
    "returnType" : "void",
    "comment" : "\n     * Do not allow any more tasks to be started; once all existing started tasks are finished,\n     * fire the {@link DrainListener#onDrained} callback asynchronously.\n     *\n     * <p>This operation is idempotent; calling it more than once has no effect.</p>\n     ",
    "links" : [ "#onDrained" ]
  }, {
    "name" : "private void checkIfDrainFinished()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void postDrained()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "DEBUG", "mExecutor", "mListener", "mName", "mTaskSet", "mEarlyFinishedTaskSet", "mLock", "mDraining", "mDrainFinished" ],
  "methodNames" : [ "public void taskStarted(T task)", "public void taskFinished(T task)", "public void beginDrain()", "private void checkIfDrainFinished()", "private void postDrained()" ]
}