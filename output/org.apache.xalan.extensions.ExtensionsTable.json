{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xalan/extensions/ExtensionsTable.java",
  "packageName" : "org.apache.xalan.extensions",
  "className" : "ExtensionsTable",
  "comment" : "\n * Class holding a table registered extension namespace handlers\n * @xsl.usage internal\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "m_extensionFunctionNamespaces",
    "type" : "Hashtable",
    "comment" : "\n   * Table of extensions that may be called from the expression language\n   * via the call(name, ...) function.  Objects are keyed on the call\n   * name.\n   * @xsl.usage internal\n   ",
    "links" : [ ]
  }, {
    "name" : "m_sroot",
    "type" : "StylesheetRoot",
    "comment" : "\n   * The StylesheetRoot associated with this extensions table.\n   ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public ExtensionHandler get(String extns)",
    "returnType" : "ExtensionHandler",
    "comment" : "\n   * Get an ExtensionHandler object that represents the\n   * given namespace.\n   * @param extns A valid extension namespace.\n   *\n   * @return ExtensionHandler object that represents the\n   * given namespace.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void addExtensionNamespace(String uri, ExtensionHandler extNS)",
    "returnType" : "void",
    "comment" : "\n   * Register an extension namespace handler. This handler provides\n   * functions for testing whether a function is known within the\n   * namespace and also for invoking the functions.\n   *\n   * @param uri the URI for the extension.\n   * @param extNS the extension handler.\n   * @xsl.usage advanced\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean functionAvailable(String ns, String funcName) throws javax.xml.transform.TransformerException",
    "returnType" : "boolean",
    "comment" : "\n   * Execute the function-available() function.\n   * @param ns       the URI of namespace in which the function is needed\n   * @param funcName the function name being tested\n   *\n   * @return whether the given function is available or not.\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean elementAvailable(String ns, String elemName) throws javax.xml.transform.TransformerException",
    "returnType" : "boolean",
    "comment" : "\n   * Execute the element-available() function.\n   * @param ns       the URI of namespace in which the function is needed\n   * @param elemName name of element being tested\n   *\n   * @return whether the given element is available or not.\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public Object extFunction(String ns, String funcName, Vector argVec, Object methodKey, ExpressionContext exprContext) throws javax.xml.transform.TransformerException",
    "returnType" : "Object",
    "comment" : "\n   * Handle an extension function.\n   * @param ns        the URI of namespace in which the function is needed\n   * @param funcName  the function name being called\n   * @param argVec    arguments to the function in a vector\n   * @param methodKey a unique key identifying this function instance in the\n   *                  stylesheet\n   * @param exprContext a context which may be passed to an extension function\n   *                  and provides callback functions to access various\n   *                  areas in the environment\n   *\n   * @return result of executing the function\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public Object extFunction(FuncExtFunction extFunction, Vector argVec, ExpressionContext exprContext) throws javax.xml.transform.TransformerException",
    "returnType" : "Object",
    "comment" : "\n   * Handle an extension function.\n   * @param extFunction  the extension function\n   * @param argVec    arguments to the function in a vector\n   * @param exprContext a context which may be passed to an extension function\n   *                  and provides callback functions to access various\n   *                  areas in the environment\n   *\n   * @return result of executing the function\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public ExtensionHandler get(String extns)", "public void addExtensionNamespace(String uri, ExtensionHandler extNS)", "public boolean functionAvailable(String ns, String funcName) throws javax.xml.transform.TransformerException", "public boolean elementAvailable(String ns, String elemName) throws javax.xml.transform.TransformerException", "public Object extFunction(String ns, String funcName, Vector argVec, Object methodKey, ExpressionContext exprContext) throws javax.xml.transform.TransformerException", "public Object extFunction(FuncExtFunction extFunction, Vector argVec, ExpressionContext exprContext) throws javax.xml.transform.TransformerException" ],
  "variableNames" : [ "m_extensionFunctionNamespaces", "m_sroot" ]
}