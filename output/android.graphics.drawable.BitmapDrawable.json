{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/graphics/drawable/BitmapDrawable.java",
  "packageName" : "android.graphics.drawable",
  "className" : "BitmapDrawable",
  "comment" : "\n * A Drawable that wraps a bitmap and can be tiled, stretched, or aligned. You can create a\n * BitmapDrawable from a file path, an input stream, through XML inflation, or from\n * a {@link android.graphics.Bitmap} object.\n * <p>It can be defined in an XML file with the <code>&lt;bitmap></code> element.  For more\n * information, see the guide to <a\n * href=\"{@docRoot}guide/topics/resources/drawable-resource.html\">Drawable Resources</a>.</p>\n * <p>\n * Also see the {@link android.graphics.Bitmap} class, which handles the management and\n * transformation of raw bitmap graphics, and should be used when drawing to a\n * {@link android.graphics.Canvas}.\n * </p>\n *\n * @attr ref android.R.styleable#BitmapDrawable_src\n * @attr ref android.R.styleable#BitmapDrawable_antialias\n * @attr ref android.R.styleable#BitmapDrawable_filter\n * @attr ref android.R.styleable#BitmapDrawable_dither\n * @attr ref android.R.styleable#BitmapDrawable_gravity\n * @attr ref android.R.styleable#BitmapDrawable_mipMap\n * @attr ref android.R.styleable#BitmapDrawable_tileMode\n ",
  "variables" : [ {
    "name" : "DEFAULT_PAINT_FLAGS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TILE_MODE_UNDEFINED",
    "type" : "int",
    "comment" : " Constants for {@link android.R.styleable#BitmapDrawable_tileMode}.",
    "links" : [ "android.R.styleable#BitmapDrawable_tileMode" ]
  }, {
    "name" : "TILE_MODE_DISABLED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TILE_MODE_CLAMP",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TILE_MODE_REPEAT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TILE_MODE_MIRROR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDstRect",
    "type" : "Rect",
    "comment" : " #updateDstRectAndInsetsIfDirty() sets this",
    "links" : [ ]
  }, {
    "name" : "mBitmapState",
    "type" : "BitmapState",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBlendModeFilter",
    "type" : "BlendModeColorFilter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTargetDensity",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDstRectAndInsetsDirty",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMutated",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBitmapWidth",
    "type" : "int",
    "comment" : " These are scaled to match the target density.",
    "links" : [ ]
  }, {
    "name" : "mBitmapHeight",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOpticalInsets",
    "type" : "Insets",
    "comment" : " Optical insets due to gravity. ",
    "links" : [ ]
  }, {
    "name" : "mMirrorMatrix",
    "type" : "Matrix",
    "comment" : " Mirroring matrix for using with Shaders",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final Paint getPaint()",
    "returnType" : "Paint",
    "comment" : "\n     * Returns the paint used to render this drawable.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final Bitmap getBitmap()",
    "returnType" : "Bitmap",
    "comment" : "\n     * Returns the bitmap used by this drawable to render. May be null.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void computeBitmapSize()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setBitmap(Bitmap bitmap)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setTargetDensity(Canvas canvas)",
    "returnType" : "void",
    "comment" : "\n     * Set the density scale at which this drawable will be rendered. This\n     * method assumes the drawable will be rendered at the same density as the\n     * specified canvas.\n     *\n     * @param canvas The Canvas from which the density scale must be obtained.\n     *\n     * @see android.graphics.Bitmap#setDensity(int)\n     * @see android.graphics.Bitmap#getDensity()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTargetDensity(DisplayMetrics metrics)",
    "returnType" : "void",
    "comment" : "\n     * Set the density scale at which this drawable will be rendered.\n     *\n     * @param metrics The DisplayMetrics indicating the density scale for this drawable.\n     *\n     * @see android.graphics.Bitmap#setDensity(int)\n     * @see android.graphics.Bitmap#getDensity()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTargetDensity(int density)",
    "returnType" : "void",
    "comment" : "\n     * Set the density at which this drawable will be rendered.\n     *\n     * @param density The density scale for this drawable.\n     *\n     * @see android.graphics.Bitmap#setDensity(int)\n     * @see android.graphics.Bitmap#getDensity()\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getGravity()",
    "returnType" : "int",
    "comment" : " Get the gravity used to position/stretch the bitmap within its bounds.\n     * See android.view.Gravity\n     * @return the gravity applied to the bitmap\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setGravity(int gravity)",
    "returnType" : "void",
    "comment" : " Set the gravity used to position/stretch the bitmap within its bounds.\n        See android.view.Gravity\n     * @param gravity the gravity\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMipMap(boolean mipMap)",
    "returnType" : "void",
    "comment" : "\n     * Enables or disables the mipmap hint for this drawable's bitmap.\n     * See {@link Bitmap#setHasMipMap(boolean)} for more information.\n     *\n     * If the bitmap is null calling this method has no effect.\n     *\n     * @param mipMap True if the bitmap should use mipmaps, false otherwise.\n     *\n     * @see #hasMipMap()\n     ",
    "links" : [ "android.graphics.Bitmap#setHasMipMap(boolean)" ]
  }, {
    "name" : "public boolean hasMipMap()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether the mipmap hint is enabled on this drawable's bitmap.\n     *\n     * @return True if the mipmap hint is set, false otherwise. If the bitmap\n     *         is null, this method always returns false.\n     *\n     * @see #setMipMap(boolean)\n     * @attr ref android.R.styleable#BitmapDrawable_mipMap\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAntiAlias(boolean aa)",
    "returnType" : "void",
    "comment" : "\n     * Enables or disables anti-aliasing for this drawable. Anti-aliasing affects\n     * the edges of the bitmap only so it applies only when the drawable is rotated.\n     *\n     * @param aa True if the bitmap should be anti-aliased, false otherwise.\n     *\n     * @see #hasAntiAlias()\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasAntiAlias()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether anti-aliasing is enabled for this drawable.\n     *\n     * @return True if anti-aliasing is enabled, false otherwise.\n     *\n     * @see #setAntiAlias(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setFilterBitmap(boolean filter)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isFilterBitmap()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setDither(boolean dither)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Shader.TileMode getTileModeX()",
    "returnType" : "Shader.TileMode",
    "comment" : "\n     * Indicates the repeat behavior of this drawable on the X axis.\n     *\n     * @return {@link android.graphics.Shader.TileMode#CLAMP} if the bitmap does not repeat,\n     *         {@link android.graphics.Shader.TileMode#REPEAT} or\n     *         {@link android.graphics.Shader.TileMode#MIRROR} otherwise.\n     ",
    "links" : [ "android.graphics.Shader.TileMode#CLAMP", "android.graphics.Shader.TileMode#REPEAT", "android.graphics.Shader.TileMode#MIRROR" ]
  }, {
    "name" : "public Shader.TileMode getTileModeY()",
    "returnType" : "Shader.TileMode",
    "comment" : "\n     * Indicates the repeat behavior of this drawable on the Y axis.\n     *\n     * @return {@link android.graphics.Shader.TileMode#CLAMP} if the bitmap does not repeat,\n     *         {@link android.graphics.Shader.TileMode#REPEAT} or\n     *         {@link android.graphics.Shader.TileMode#MIRROR} otherwise.\n     ",
    "links" : [ "android.graphics.Shader.TileMode#CLAMP", "android.graphics.Shader.TileMode#REPEAT", "android.graphics.Shader.TileMode#MIRROR" ]
  }, {
    "name" : "public void setTileModeX(Shader.TileMode mode)",
    "returnType" : "void",
    "comment" : "\n     * Sets the repeat behavior of this drawable on the X axis. By default, the drawable\n     * does not repeat its bitmap. Using {@link android.graphics.Shader.TileMode#REPEAT} or\n     * {@link android.graphics.Shader.TileMode#MIRROR} the bitmap can be repeated (or tiled)\n     * if the bitmap is smaller than this drawable.\n     *\n     * @param mode The repeat mode for this drawable.\n     *\n     * @see #setTileModeY(android.graphics.Shader.TileMode)\n     * @see #setTileModeXY(android.graphics.Shader.TileMode, android.graphics.Shader.TileMode)\n     * @attr ref android.R.styleable#BitmapDrawable_tileModeX\n     ",
    "links" : [ "android.graphics.Shader.TileMode#REPEAT", "android.graphics.Shader.TileMode#MIRROR" ]
  }, {
    "name" : "public final void setTileModeY(Shader.TileMode mode)",
    "returnType" : "void",
    "comment" : "\n     * Sets the repeat behavior of this drawable on the Y axis. By default, the drawable\n     * does not repeat its bitmap. Using {@link android.graphics.Shader.TileMode#REPEAT} or\n     * {@link android.graphics.Shader.TileMode#MIRROR} the bitmap can be repeated (or tiled)\n     * if the bitmap is smaller than this drawable.\n     *\n     * @param mode The repeat mode for this drawable.\n     *\n     * @see #setTileModeX(android.graphics.Shader.TileMode)\n     * @see #setTileModeXY(android.graphics.Shader.TileMode, android.graphics.Shader.TileMode)\n     * @attr ref android.R.styleable#BitmapDrawable_tileModeY\n     ",
    "links" : [ "android.graphics.Shader.TileMode#REPEAT", "android.graphics.Shader.TileMode#MIRROR" ]
  }, {
    "name" : "public void setTileModeXY(Shader.TileMode xmode, Shader.TileMode ymode)",
    "returnType" : "void",
    "comment" : "\n     * Sets the repeat behavior of this drawable on both axis. By default, the drawable\n     * does not repeat its bitmap. Using {@link android.graphics.Shader.TileMode#REPEAT} or\n     * {@link android.graphics.Shader.TileMode#MIRROR} the bitmap can be repeated (or tiled)\n     * if the bitmap is smaller than this drawable.\n     *\n     * @param xmode The X repeat mode for this drawable.\n     * @param ymode The Y repeat mode for this drawable.\n     *\n     * @see #setTileModeX(android.graphics.Shader.TileMode)\n     * @see #setTileModeY(android.graphics.Shader.TileMode)\n     ",
    "links" : [ "android.graphics.Shader.TileMode#REPEAT", "android.graphics.Shader.TileMode#MIRROR" ]
  }, {
    "name" : "public void setAutoMirrored(boolean mirrored)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final boolean isAutoMirrored()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getChangingConfigurations()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean needMirroring()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onBoundsChange(Rect bounds)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void draw(Canvas canvas)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateShaderMatrix(@NonNull Bitmap bitmap, @NonNull Paint paint, @NonNull Shader shader, boolean needMirroring)",
    "returnType" : "void",
    "comment" : "\n     * Updates the {@code paint}'s shader matrix to be consistent with the\n     * destination size and layout direction.\n     *\n     * @param bitmap the bitmap to be drawn\n     * @param paint the paint used to draw the bitmap\n     * @param shader the shader to set on the paint\n     * @param needMirroring whether the bitmap should be mirrored\n     ",
    "links" : [ ]
  }, {
    "name" : "private Matrix getOrCreateMirrorMatrix()",
    "returnType" : "Matrix",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateDstRectAndInsetsIfDirty()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Insets getOpticalInsets()",
    "returnType" : "Insets",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void getOutline(@NonNull Outline outline)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setAlpha(int alpha)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getAlpha()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setColorFilter(ColorFilter colorFilter)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ColorFilter getColorFilter()",
    "returnType" : "ColorFilter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setTintList(ColorStateList tint)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setTintBlendMode(@NonNull BlendMode blendMode)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ColorStateList getTint()",
    "returnType" : "ColorStateList",
    "comment" : "\n     * @hide only needed by a hack within ProgressBar\n     ",
    "links" : [ ]
  }, {
    "name" : "public Mode getTintMode()",
    "returnType" : "Mode",
    "comment" : "\n     * @hide only needed by a hack within ProgressBar\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setXfermode(Xfermode xfermode)",
    "returnType" : "void",
    "comment" : "\n     * @hide Candidate for future API inclusion\n     ",
    "links" : [ ]
  }, {
    "name" : "public Drawable mutate()",
    "returnType" : "Drawable",
    "comment" : "\n     * A mutable BitmapDrawable still shares its Bitmap with any other Drawable\n     * that comes from the same resource.\n     *\n     * @return This drawable.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clearMutated()",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "protected boolean onStateChange(int[] stateSet)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isStateful()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasFocusStateSpecified()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void inflate(Resources r, XmlPullParser parser, AttributeSet attrs, Theme theme) throws XmlPullParserException, IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void verifyRequiredAttributes(TypedArray a) throws XmlPullParserException",
    "returnType" : "void",
    "comment" : "\n     * Ensures all required attributes are set.\n     *\n     * @throws XmlPullParserException if any required attributes are missing\n     ",
    "links" : [ ]
  }, {
    "name" : "private void updateStateFromTypedArray(TypedArray a, int srcDensityOverride) throws XmlPullParserException",
    "returnType" : "void",
    "comment" : "\n     * Updates the constant state from the values in the typed array.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void applyTheme(Theme t)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Shader.TileMode parseTileMode(int tileMode)",
    "returnType" : "Shader.TileMode",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean canApplyTheme()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getIntrinsicWidth()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getIntrinsicHeight()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getOpacity()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final ConstantState getConstantState()",
    "returnType" : "ConstantState",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void init(BitmapState state, Resources res)",
    "returnType" : "void",
    "comment" : "\n     * The one helper to rule them all. This is called by all public & private\n     * constructors to set the state and initialize local properties.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void updateLocalState(Resources res)",
    "returnType" : "void",
    "comment" : "\n     * Initializes local dynamic properties from state. This should be called\n     * after significant state changes, e.g. from the One True Constructor and\n     * after inflating or applying a theme.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "DEFAULT_PAINT_FLAGS", "TILE_MODE_UNDEFINED", "TILE_MODE_DISABLED", "TILE_MODE_CLAMP", "TILE_MODE_REPEAT", "TILE_MODE_MIRROR", "mDstRect", "mBitmapState", "mBlendModeFilter", "mTargetDensity", "mDstRectAndInsetsDirty", "mMutated", "mBitmapWidth", "mBitmapHeight", "mOpticalInsets", "mMirrorMatrix" ],
  "methodNames" : [ "public final Paint getPaint()", "public final Bitmap getBitmap()", "private void computeBitmapSize()", "public void setBitmap(Bitmap bitmap)", "public void setTargetDensity(Canvas canvas)", "public void setTargetDensity(DisplayMetrics metrics)", "public void setTargetDensity(int density)", "public int getGravity()", "public void setGravity(int gravity)", "public void setMipMap(boolean mipMap)", "public boolean hasMipMap()", "public void setAntiAlias(boolean aa)", "public boolean hasAntiAlias()", "public void setFilterBitmap(boolean filter)", "public boolean isFilterBitmap()", "public void setDither(boolean dither)", "public Shader.TileMode getTileModeX()", "public Shader.TileMode getTileModeY()", "public void setTileModeX(Shader.TileMode mode)", "public final void setTileModeY(Shader.TileMode mode)", "public void setTileModeXY(Shader.TileMode xmode, Shader.TileMode ymode)", "public void setAutoMirrored(boolean mirrored)", "public final boolean isAutoMirrored()", "public int getChangingConfigurations()", "private boolean needMirroring()", "protected void onBoundsChange(Rect bounds)", "public void draw(Canvas canvas)", "private void updateShaderMatrix(@NonNull Bitmap bitmap, @NonNull Paint paint, @NonNull Shader shader, boolean needMirroring)", "private Matrix getOrCreateMirrorMatrix()", "private void updateDstRectAndInsetsIfDirty()", "public Insets getOpticalInsets()", "public void getOutline(@NonNull Outline outline)", "public void setAlpha(int alpha)", "public int getAlpha()", "public void setColorFilter(ColorFilter colorFilter)", "public ColorFilter getColorFilter()", "public void setTintList(ColorStateList tint)", "public void setTintBlendMode(@NonNull BlendMode blendMode)", "public ColorStateList getTint()", "public Mode getTintMode()", "public void setXfermode(Xfermode xfermode)", "public Drawable mutate()", "public void clearMutated()", "protected boolean onStateChange(int[] stateSet)", "public boolean isStateful()", "public boolean hasFocusStateSpecified()", "public void inflate(Resources r, XmlPullParser parser, AttributeSet attrs, Theme theme) throws XmlPullParserException, IOException", "private void verifyRequiredAttributes(TypedArray a) throws XmlPullParserException", "private void updateStateFromTypedArray(TypedArray a, int srcDensityOverride) throws XmlPullParserException", "public void applyTheme(Theme t)", "private static Shader.TileMode parseTileMode(int tileMode)", "public boolean canApplyTheme()", "public int getIntrinsicWidth()", "public int getIntrinsicHeight()", "public int getOpacity()", "public final ConstantState getConstantState()", "private void init(BitmapState state, Resources res)", "private void updateLocalState(Resources res)" ]
}