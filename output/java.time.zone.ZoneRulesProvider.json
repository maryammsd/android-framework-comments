{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/time/zone/ZoneRulesProvider.java",
  "packageName" : "java.time.zone",
  "className" : "ZoneRulesProvider",
  "comment" : "\n * Provider of time-zone rules to the system.\n * <p>\n * This class manages the configuration of time-zone rules.\n * The static methods provide the public API that can be used to manage the providers.\n * The abstract methods provide the SPI that allows rules to be provided.\n * <p>\n * ZoneRulesProvider may be installed in an instance of the Java Platform as\n * extension classes, that is, jar files placed into any of the usual extension\n * directories. Installed providers are loaded using the service-provider loading\n * facility defined by the {@link ServiceLoader} class. A ZoneRulesProvider\n * identifies itself with a provider configuration file named\n * {@code java.time.zone.ZoneRulesProvider} in the resource directory\n * {@code META-INF/services}. The file should contain a line that specifies the\n * fully qualified concrete zonerules-provider class name.\n * Providers may also be made available by adding them to the class path or by\n * registering themselves via {@link #registerProvider} method.\n * <p>\n * The Java virtual machine has a default provider that provides zone rules\n * for the time-zones defined by IANA Time Zone Database (TZDB). If the system\n * property {@systemProperty java.time.zone.DefaultZoneRulesProvider} is defined then\n * it is taken to be the fully-qualified name of a concrete ZoneRulesProvider\n * class to be loaded as the default provider, using the system class loader.\n * If this system property is not defined, a system-default provider will be\n * loaded to serve as the default provider.\n * <p>\n * Rules are looked up primarily by zone ID, as used by {@link ZoneId}.\n * Only zone region IDs may be used, zone offset IDs are not used here.\n * <p>\n * Time-zone rules are political, thus the data can change at any time.\n * Each provider will provide the latest rules for each zone ID, but they\n * may also provide the history of how the rules changed.\n *\n * @implSpec\n * This interface is a service provider that can be called by multiple threads.\n * Implementations must be immutable and thread-safe.\n * <p>\n * Providers must ensure that once a rule has been seen by the application, the\n * rule must continue to be available.\n * <p>\n * Providers are encouraged to implement a meaningful {@code toString} method.\n * <p>\n * Many systems would like to update time-zone rules dynamically without stopping the JVM.\n * When examined in detail, this is a complex problem.\n * Providers may choose to handle dynamic updates, however the default provider does not.\n *\n * @since 1.8\n ",
  "links" : [ "java.util.ServiceLoader", "java.time.ZoneId", "#registerProvider" ],
  "variables" : [ {
    "name" : "PROVIDERS",
    "type" : "CopyOnWriteArrayList<ZoneRulesProvider>",
    "comment" : "\n     * The set of loaded providers.\n     ",
    "links" : [ ]
  }, {
    "name" : "ZONES",
    "type" : "ConcurrentMap<String, ZoneRulesProvider>",
    "comment" : "\n     * The lookup from zone ID to provider.\n     ",
    "links" : [ ]
  }, {
    "name" : "ZONE_IDS",
    "type" : "Set<String>",
    "comment" : "\n     * The zone ID data\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static Set<String> getAvailableZoneIds()",
    "returnType" : "Set<String>",
    "comment" : "\n     * Gets the set of available zone IDs.\n     * <p>\n     * These IDs are the string form of a {@link ZoneId}.\n     *\n     * @return the unmodifiable set of zone IDs, not null\n     ",
    "links" : [ "java.time.ZoneId" ]
  }, {
    "name" : "public static ZoneRules getRules(String zoneId, boolean forCaching)",
    "returnType" : "ZoneRules",
    "comment" : "\n     * Gets the rules for the zone ID.\n     * <p>\n     * This returns the latest available rules for the zone ID.\n     * <p>\n     * This method relies on time-zone data provider files that are configured.\n     * These are loaded using a {@code ServiceLoader}.\n     * <p>\n     * The caching flag is designed to allow provider implementations to\n     * prevent the rules being cached in {@code ZoneId}.\n     * Under normal circumstances, the caching of zone rules is highly desirable\n     * as it will provide greater performance. However, there is a use case where\n     * the caching would not be desirable, see {@link #provideRules}.\n     *\n     * @param zoneId the zone ID as defined by {@code ZoneId}, not null\n     * @param forCaching whether the rules are being queried for caching,\n     * true if the returned rules will be cached by {@code ZoneId},\n     * false if they will be returned to the user without being cached in {@code ZoneId}\n     * @return the rules, null if {@code forCaching} is true and this\n     * is a dynamic provider that wants to prevent caching in {@code ZoneId},\n     * otherwise not null\n     * @throws ZoneRulesException if rules cannot be obtained for the zone ID\n     ",
    "links" : [ "#provideRules" ]
  }, {
    "name" : "public static NavigableMap<String, ZoneRules> getVersions(String zoneId)",
    "returnType" : "NavigableMap<String, ZoneRules>",
    "comment" : "\n     * Gets the history of rules for the zone ID.\n     * <p>\n     * Time-zones are defined by governments and change frequently.\n     * This method allows applications to find the history of changes to the\n     * rules for a single zone ID. The map is keyed by a string, which is the\n     * version string associated with the rules.\n     * <p>\n     * The exact meaning and format of the version is provider specific.\n     * The version must follow lexicographical order, thus the returned map will\n     * be order from the oldest known rules to the newest available rules.\n     * The default 'TZDB' group uses version numbering consisting of the year\n     * followed by a letter, such as '2009e' or '2012f'.\n     * <p>\n     * Implementations must provide a result for each valid zone ID, however\n     * they do not have to provide a history of rules.\n     * Thus the map will always contain one element, and will only contain more\n     * than one element if historical rule information is available.\n     *\n     * @param zoneId  the zone ID as defined by {@code ZoneId}, not null\n     * @return a modifiable copy of the history of the rules for the ID, sorted\n     *  from oldest to newest, not null\n     * @throws ZoneRulesException if history cannot be obtained for the zone ID\n     ",
    "links" : [ ]
  }, {
    "name" : "private static ZoneRulesProvider getProvider(String zoneId)",
    "returnType" : "ZoneRulesProvider",
    "comment" : "\n     * Gets the provider for the zone ID.\n     *\n     * @param zoneId  the zone ID as defined by {@code ZoneId}, not null\n     * @return the provider, not null\n     * @throws ZoneRulesException if the zone ID is unknown\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void registerProvider(ZoneRulesProvider provider)",
    "returnType" : "void",
    "comment" : "\n     * Registers a zone rules provider.\n     * <p>\n     * This adds a new provider to those currently available.\n     * A provider supplies rules for one or more zone IDs.\n     * A provider cannot be registered if it supplies a zone ID that has already been\n     * registered. See the notes on time-zone IDs in {@link ZoneId}, especially\n     * the section on using the concept of a \"group\" to make IDs unique.\n     * <p>\n     * To ensure the integrity of time-zones already created, there is no way\n     * to deregister providers.\n     *\n     * @param provider  the provider to register, not null\n     * @throws ZoneRulesException if a zone ID is already registered\n     ",
    "links" : [ "java.time.ZoneId" ]
  }, {
    "name" : "private static synchronized void registerProvider0(ZoneRulesProvider provider)",
    "returnType" : "void",
    "comment" : "\n     * Registers the provider.\n     *\n     * @param provider  the provider to register, not null\n     * @throws ZoneRulesException if unable to complete the registration\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean refresh()",
    "returnType" : "boolean",
    "comment" : "\n     * Refreshes the rules from the underlying data provider.\n     * <p>\n     * This method allows an application to request that the providers check\n     * for any updates to the provided rules.\n     * After calling this method, the offset stored in any {@link ZonedDateTime}\n     * may be invalid for the zone ID.\n     * <p>\n     * Dynamic update of rules is a complex problem and most applications\n     * should not use this method or dynamic rules.\n     * To achieve dynamic rules, a provider implementation will have to be written\n     * as per the specification of this class.\n     * In addition, instances of {@code ZoneRules} must not be cached in the\n     * application as they will become stale. However, the boolean flag on\n     * {@link #provideRules(String, boolean)} allows provider implementations\n     * to control the caching of {@code ZoneId}, potentially ensuring that\n     * all objects in the system see the new rules.\n     * Note that there is likely to be a cost in performance of a dynamic rules\n     * provider. Note also that no dynamic rules provider is in this specification.\n     *\n     * @return true if the rules were updated\n     * @throws ZoneRulesException if an error occurs during the refresh\n     ",
    "links" : [ "java.time.ZonedDateTime", "#provideRules(String" ]
  }, {
    "name" : "protected abstract Set<String> provideZoneIds()",
    "returnType" : "Set<String>",
    "comment" : "\n     * SPI method to get the available zone IDs.\n     * <p>\n     * This obtains the IDs that this {@code ZoneRulesProvider} provides.\n     * A provider should provide data for at least one zone ID.\n     * <p>\n     * The returned zone IDs remain available and valid for the lifetime of the application.\n     * A dynamic provider may increase the set of IDs as more data becomes available.\n     *\n     * @return the set of zone IDs being provided, not null\n     * @throws ZoneRulesException if a problem occurs while providing the IDs\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract ZoneRules provideRules(String zoneId, boolean forCaching)",
    "returnType" : "ZoneRules",
    "comment" : "\n     * SPI method to get the rules for the zone ID.\n     * <p>\n     * This loads the rules for the specified zone ID.\n     * The provider implementation must validate that the zone ID is valid and\n     * available, throwing a {@code ZoneRulesException} if it is not.\n     * The result of the method in the valid case depends on the caching flag.\n     * <p>\n     * If the provider implementation is not dynamic, then the result of the\n     * method must be the non-null set of rules selected by the ID.\n     * <p>\n     * If the provider implementation is dynamic, then the flag gives the option\n     * of preventing the returned rules from being cached in {@link ZoneId}.\n     * When the flag is true, the provider is permitted to return null, where\n     * null will prevent the rules from being cached in {@code ZoneId}.\n     * When the flag is false, the provider must return non-null rules.\n     *\n     * @param zoneId the zone ID as defined by {@code ZoneId}, not null\n     * @param forCaching whether the rules are being queried for caching,\n     * true if the returned rules will be cached by {@code ZoneId},\n     * false if they will be returned to the user without being cached in {@code ZoneId}\n     * @return the rules, null if {@code forCaching} is true and this\n     * is a dynamic provider that wants to prevent caching in {@code ZoneId},\n     * otherwise not null\n     * @throws ZoneRulesException if rules cannot be obtained for the zone ID\n     ",
    "links" : [ "java.time.ZoneId" ]
  }, {
    "name" : "protected abstract NavigableMap<String, ZoneRules> provideVersions(String zoneId)",
    "returnType" : "NavigableMap<String, ZoneRules>",
    "comment" : "\n     * SPI method to get the history of rules for the zone ID.\n     * <p>\n     * This returns a map of historical rules keyed by a version string.\n     * The exact meaning and format of the version is provider specific.\n     * The version must follow lexicographical order, thus the returned map will\n     * be order from the oldest known rules to the newest available rules.\n     * The default 'TZDB' group uses version numbering consisting of the year\n     * followed by a letter, such as '2009e' or '2012f'.\n     * <p>\n     * Implementations must provide a result for each valid zone ID, however\n     * they do not have to provide a history of rules.\n     * Thus the map will contain at least one element, and will only contain\n     * more than one element if historical rule information is available.\n     * <p>\n     * The returned versions remain available and valid for the lifetime of the application.\n     * A dynamic provider may increase the set of versions as more data becomes available.\n     *\n     * @param zoneId  the zone ID as defined by {@code ZoneId}, not null\n     * @return a modifiable copy of the history of the rules for the ID, sorted\n     *  from oldest to newest, not null\n     * @throws ZoneRulesException if history cannot be obtained for the zone ID\n     ",
    "links" : [ ]
  }, {
    "name" : "protected boolean provideRefresh()",
    "returnType" : "boolean",
    "comment" : "\n     * SPI method to refresh the rules from the underlying data provider.\n     * <p>\n     * This method provides the opportunity for a provider to dynamically\n     * recheck the underlying data provider to find the latest rules.\n     * This could be used to load new rules without stopping the JVM.\n     * Dynamic behavior is entirely optional and most providers do not support it.\n     * <p>\n     * This implementation returns false.\n     *\n     * @return true if the rules were updated\n     * @throws ZoneRulesException if an error occurs during the refresh\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static Set<String> getAvailableZoneIds()", "public static ZoneRules getRules(String zoneId, boolean forCaching)", "public static NavigableMap<String, ZoneRules> getVersions(String zoneId)", "private static ZoneRulesProvider getProvider(String zoneId)", "public static void registerProvider(ZoneRulesProvider provider)", "private static synchronized void registerProvider0(ZoneRulesProvider provider)", "public static boolean refresh()", "protected abstract Set<String> provideZoneIds()", "protected abstract ZoneRules provideRules(String zoneId, boolean forCaching)", "protected abstract NavigableMap<String, ZoneRules> provideVersions(String zoneId)", "protected boolean provideRefresh()" ],
  "variableNames" : [ "PROVIDERS", "ZONES", "ZONE_IDS" ]
}