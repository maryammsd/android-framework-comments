{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/view/WindowInsets.java",
  "packageName" : "android.view",
  "className" : "Builder",
  "comment" : "\n     * Builder for WindowInsets.\n     ",
  "variables" : [ {
    "name" : "mTypeInsetsMap",
    "type" : "Insets[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTypeMaxInsetsMap",
    "type" : "Insets[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTypeVisibilityMap",
    "type" : "boolean[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSystemInsetsConsumed",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStableInsetsConsumed",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDisplayCutout",
    "type" : "DisplayCutout",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsRound",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAlwaysConsumeSystemBars",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Builder setSystemWindowInsets(@NonNull Insets systemWindowInsets)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets system window insets in pixels.\n         *\n         * <p>The system window inset represents the area of a full-screen window that is\n         * partially or fully obscured by the status bar, navigation bar, IME or other system\n         * windows.</p>\n         *\n         * @see #getSystemWindowInsets()\n         * @return itself\n         * @deprecated Use {@link #setInsets(int, Insets)} with {@link Type#systemBars()}.\n         ",
    "links" : [ "#setInsets", "Type#systemBars" ]
  }, {
    "name" : "public Builder setSystemGestureInsets(@NonNull Insets insets)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets system gesture insets in pixels.\n         *\n         * <p>The system gesture insets represent the area of a window where system gestures have\n         * priority and may consume some or all touch input, e.g. due to the a system bar\n         * occupying it, or it being reserved for touch-only gestures.\n         *\n         * @see #getSystemGestureInsets()\n         * @return itself\n         * @deprecated Use {@link #setInsets(int, Insets)} with {@link Type#systemGestures()}.\n         ",
    "links" : [ "#setInsets", "Type#systemGestures" ]
  }, {
    "name" : "public Builder setMandatorySystemGestureInsets(@NonNull Insets insets)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets mandatory system gesture insets in pixels.\n         *\n         * <p>The mandatory system gesture insets represent the area of a window where mandatory\n         * system gestures have priority and may consume some or all touch input, e.g. due to the a\n         * system bar occupying it, or it being reserved for touch-only gestures.\n         *\n         * <p>In contrast to {@link #setSystemGestureInsets regular system gestures},\n         * <b>mandatory</b> system gestures cannot be overriden by\n         * {@link View#setSystemGestureExclusionRects}.\n         *\n         * @see #getMandatorySystemGestureInsets()\n         * @return itself\n         * @deprecated Use {@link #setInsets(int, Insets)} with\n         *             {@link Type#mandatorySystemGestures()}.\n         ",
    "links" : [ "#setSystemGestureInsets", "View#setSystemGestureExclusionRects", "#setInsets", "Type#mandatorySystemGestures" ]
  }, {
    "name" : "public Builder setTappableElementInsets(@NonNull Insets insets)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets tappable element insets in pixels.\n         *\n         * <p>The tappable element insets represent how much tappable elements <b>must at least</b>\n         * be inset to remain both tappable and visually unobstructed by persistent system windows.\n         *\n         * @see #getTappableElementInsets()\n         * @return itself\n         * @deprecated Use {@link #setInsets(int, Insets)} with {@link Type#tappableElement()}.\n         ",
    "links" : [ "#setInsets", "Type#tappableElement" ]
  }, {
    "name" : "public Builder setInsets(@InsetsType int typeMask, @NonNull Insets insets)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the insets of a specific window type in pixels.\n         *\n         * <p>The insets represents the area of a a window that is partially or fully obscured by\n         * the system windows identified by {@code typeMask}.\n         * </p>\n         *\n         * @see #getInsets(int)\n         *\n         * @param typeMask The bitmask of {@link InsetsType} to set the insets for.\n         * @param insets The insets to set.\n         *\n         * @return itself\n         ",
    "links" : [ "InsetsType" ]
  }, {
    "name" : "public Builder setInsetsIgnoringVisibility(@InsetsType int typeMask, @NonNull Insets insets) throws IllegalArgumentException",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the insets a specific window type in pixels, while ignoring its visibility state.\n         *\n         * <p>The insets represents the area of a a window that that <b>may</b> be partially\n         * or fully obscured by the system window identified by {@code type}. This value does not\n         * change based on the visibility state of those elements. For example, if the status bar is\n         * normally shown, but temporarily hidden, the inset returned here will still provide the\n         * inset associated with the status bar being shown.</p>\n         *\n         * @see #getInsetsIgnoringVisibility(int)\n         *\n         * @param typeMask The bitmask of {@link InsetsType} to set the insets for.\n         * @param insets The insets to set.\n         *\n         * @return itself\n         *\n         * @throws IllegalArgumentException If {@code typeMask} contains {@link Type#ime()}. Maximum\n         *                                  insets are not available for this type as the height of\n         *                                  the IME is dynamic depending on the {@link EditorInfo}\n         *                                  of the currently focused view, as well as the UI\n         *                                  state of the IME.\n         ",
    "links" : [ "InsetsType", "Type#ime", "EditorInfo" ]
  }, {
    "name" : "public Builder setVisible(@InsetsType int typeMask, boolean visible)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets whether windows that can cause insets are currently visible on screen.\n         *\n         *\n         * @see #isVisible(int)\n         *\n         * @param typeMask The bitmask of {@link InsetsType} to set the visibility for.\n         * @param visible Whether to mark the windows as visible or not.\n         *\n         * @return itself\n         ",
    "links" : [ "InsetsType" ]
  }, {
    "name" : "public Builder setStableInsets(@NonNull Insets stableInsets)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the stable insets in pixels.\n         *\n         * <p>The stable inset represents the area of a full-screen window that <b>may</b> be\n         * partially or fully obscured by the system UI elements.  This value does not change\n         * based on the visibility state of those elements; for example, if the status bar is\n         * normally shown, but temporarily hidden, the stable inset will still provide the inset\n         * associated with the status bar being shown.</p>\n         *\n         * @see #getStableInsets()\n         * @return itself\n         * @deprecated Use {@link #setInsetsIgnoringVisibility(int, Insets)} with\n         *             {@link Type#systemBars()}.\n         ",
    "links" : [ "#setInsetsIgnoringVisibility", "Type#systemBars" ]
  }, {
    "name" : "public Builder setDisplayCutout(@Nullable DisplayCutout displayCutout)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the display cutout.\n         *\n         * @see #getDisplayCutout()\n         * @param displayCutout the display cutout or null if there is none\n         * @return itself\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setRound(boolean round)",
    "returnType" : "Builder",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public Builder setAlwaysConsumeSystemBars(boolean alwaysConsumeSystemBars)",
    "returnType" : "Builder",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public WindowInsets build()",
    "returnType" : "WindowInsets",
    "comment" : "\n         * Builds a {@link WindowInsets} instance.\n         *\n         * @return the {@link WindowInsets} instance.\n         ",
    "links" : [ "WindowInsets", "WindowInsets" ]
  } ],
  "variableNames" : [ "mTypeInsetsMap", "mTypeMaxInsetsMap", "mTypeVisibilityMap", "mSystemInsetsConsumed", "mStableInsetsConsumed", "mDisplayCutout", "mIsRound", "mAlwaysConsumeSystemBars" ],
  "methodNames" : [ "public Builder setSystemWindowInsets(@NonNull Insets systemWindowInsets)", "public Builder setSystemGestureInsets(@NonNull Insets insets)", "public Builder setMandatorySystemGestureInsets(@NonNull Insets insets)", "public Builder setTappableElementInsets(@NonNull Insets insets)", "public Builder setInsets(@InsetsType int typeMask, @NonNull Insets insets)", "public Builder setInsetsIgnoringVisibility(@InsetsType int typeMask, @NonNull Insets insets) throws IllegalArgumentException", "public Builder setVisible(@InsetsType int typeMask, boolean visible)", "public Builder setStableInsets(@NonNull Insets stableInsets)", "public Builder setDisplayCutout(@Nullable DisplayCutout displayCutout)", "public Builder setRound(boolean round)", "public Builder setAlwaysConsumeSystemBars(boolean alwaysConsumeSystemBars)", "public WindowInsets build()" ]
}