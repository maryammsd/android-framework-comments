{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/test/ClassPathPackageInfoSource.java",
  "packageName" : "android.test",
  "className" : "ClassPathPackageInfoSource",
  "comment" : "\n * Generate {@link ClassPathPackageInfo}s by scanning apk paths.\n *\n * {@hide} Not needed for 1.0 SDK.\n ",
  "variables" : [ {
    "name" : "CLASS_LOADER",
    "type" : "ClassLoader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "apkPaths",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "classPathSource",
    "type" : "ClassPathPackageInfoSource",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "cache",
    "type" : "SimpleCache<String, ClassPathPackageInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "classPath",
    "type" : "String[]",
    "comment" : " The class path of the running application",
    "links" : [ ]
  }, {
    "name" : "classLoader",
    "type" : "ClassLoader",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " static void setApkPaths(String[] apkPaths)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static ClassPathPackageInfoSource forClassPath(ClassLoader classLoader)",
    "returnType" : "ClassPathPackageInfoSource",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Set<Class<?>> getTopLevelClassesRecursive(String packageName)",
    "returnType" : "Set<Class<?>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private ClassPathPackageInfo createPackageInfo(String packageName)",
    "returnType" : "ClassPathPackageInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void findClasses(String packageName, Set<String> classNames, Set<String> subpackageNames)",
    "returnType" : "void",
    "comment" : "\n     * Finds all classes and sub packages that are below the packageName and\n     * add them to the respective sets. Searches the package on the whole class\n     * path.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void scanForApkFiles(File source, String packageName, Set<String> classNames, Set<String> subpackageNames) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void findClassesInApk(String apkPath, String packageName, Set<String> classNames, Set<String> subpackageNames) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Finds all classes and sub packages that are below the packageName and\n     * add them to the respective sets. Searches the package in a single apk file.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean isToplevelClass(String fileName)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if a given file name represents a toplevel class.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String[] getClassPath()",
    "returnType" : "String[]",
    "comment" : "\n     * Gets the class path from the System Property \"java.class.path\" and splits\n     * it up into the individual elements.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "CLASS_LOADER", "apkPaths", "classPathSource", "cache", "classPath", "classLoader" ],
  "methodNames" : [ " static void setApkPaths(String[] apkPaths)", "public static ClassPathPackageInfoSource forClassPath(ClassLoader classLoader)", "public Set<Class<?>> getTopLevelClassesRecursive(String packageName)", "private ClassPathPackageInfo createPackageInfo(String packageName)", "private void findClasses(String packageName, Set<String> classNames, Set<String> subpackageNames)", "private void scanForApkFiles(File source, String packageName, Set<String> classNames, Set<String> subpackageNames) throws IOException", "private void findClassesInApk(String apkPath, String packageName, Set<String> classNames, Set<String> subpackageNames) throws IOException", "private static boolean isToplevelClass(String fileName)", "private static String[] getClassPath()" ]
}