{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/ContentRecordingSession.java",
  "packageName" : "android.view",
  "className" : "ContentRecordingSession",
  "comment" : "\n * Description of a content recording session.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "RECORD_CONTENT_DISPLAY",
    "type" : "int",
    "comment" : "\n     * An entire DisplayContent is being recorded. Recording may also be paused.\n     ",
    "links" : [ ]
  }, {
    "name" : "RECORD_CONTENT_TASK",
    "type" : "int",
    "comment" : "\n     * A single Task is being recorded. Recording may also be paused.\n     ",
    "links" : [ ]
  }, {
    "name" : "TARGET_UID_FULL_SCREEN",
    "type" : "int",
    "comment" : " Full screen sharing (app is not selected). ",
    "links" : [ ]
  }, {
    "name" : "TARGET_UID_UNKNOWN",
    "type" : "int",
    "comment" : " Can't report (e.g. side loaded app). ",
    "links" : [ ]
  }, {
    "name" : "mVirtualDisplayId",
    "type" : "int",
    "comment" : "\n     * Unique logical identifier of the {@link android.hardware.display.VirtualDisplay} that has\n     * recorded content rendered to its surface.\n     ",
    "links" : [ "android.hardware.display.VirtualDisplay" ]
  }, {
    "name" : "mContentToRecord",
    "type" : "int",
    "comment" : "\n     * The content to record.\n     ",
    "links" : [ ]
  }, {
    "name" : "mDisplayToRecord",
    "type" : "int",
    "comment" : "\n     * Unique logical identifier of the {@link android.view.Display} to record.\n     *\n     * <p>If {@link #getContentToRecord()} is {@link RecordContent#RECORD_CONTENT_DISPLAY}, then is\n     * a valid display id.\n     ",
    "links" : [ "android.view.Display", "#getContentToRecord()", "#RECORD_CONTENT_DISPLAY" ]
  }, {
    "name" : "mTokenToRecord",
    "type" : "IBinder",
    "comment" : "\n     * The token of the layer of the hierarchy to record.\n     *\n     * <p>If {@link #getContentToRecord()} is {@link RecordContent#RECORD_CONTENT_TASK}, then\n     * represents the {@link android.window.WindowContainerToken} of the Task to record.\n     ",
    "links" : [ "#RECORD_CONTENT_TASK", "#getContentToRecord()", "android.window.WindowContainerToken" ]
  }, {
    "name" : "mWaitingForConsent",
    "type" : "boolean",
    "comment" : "\n     * When {@code true}, no mirroring should take place until the user has re-granted access to\n     * the consent token. When {@code false}, recording can begin immediately.\n     *\n     * <p>Only set on the server side to sanitize any input from the client process.\n     ",
    "links" : [ ]
  }, {
    "name" : "mTargetUid",
    "type" : "int",
    "comment" : " UID of the package that is captured if selected. ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<ContentRecordingSession>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static ContentRecordingSession createDisplaySession(int displayToMirror)",
    "returnType" : "ContentRecordingSession",
    "comment" : " Returns an instance initialized for recording the indicated display. ",
    "links" : [ ]
  }, {
    "name" : "public static ContentRecordingSession createTaskSession(@NonNull IBinder taskWindowContainerToken)",
    "returnType" : "ContentRecordingSession",
    "comment" : " Returns an instance initialized for task recording. ",
    "links" : [ ]
  }, {
    "name" : "public static ContentRecordingSession createTaskSession(@NonNull IBinder taskWindowContainerToken, int targetUid)",
    "returnType" : "ContentRecordingSession",
    "comment" : " Returns an instance initialized for task recording. ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isValid(ContentRecordingSession session)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if this is a valid session.\n     *\n     * <p>A valid session has a non-null token for task recording, or a valid id for the display to\n     * record.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isProjectionOnSameDisplay(ContentRecordingSession session, ContentRecordingSession incomingSession)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} when both sessions are on the same\n     * {@link android.hardware.display.VirtualDisplay}.\n     ",
    "links" : [ "android.hardware.display.VirtualDisplay" ]
  }, {
    "name" : "public static String recordContentToString(@RecordContent int value)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String targetUidToString(@TargetUid int value)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getVirtualDisplayId()",
    "returnType" : "int",
    "comment" : "\n     * Unique logical identifier of the {@link android.hardware.display.VirtualDisplay} that has\n     * recorded content rendered to its surface.\n     ",
    "links" : [ "android.hardware.display.VirtualDisplay" ]
  }, {
    "name" : "public int getContentToRecord()",
    "returnType" : "int",
    "comment" : "\n     * The content to record.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getDisplayToRecord()",
    "returnType" : "int",
    "comment" : "\n     * Unique logical identifier of the {@link android.view.Display} to record.\n     *\n     * <p>If {@link #getContentToRecord()} is {@link RecordContent#RECORD_CONTENT_DISPLAY}, then is\n     * a valid display id.\n     ",
    "links" : [ "android.view.Display", "#getContentToRecord()", "#RECORD_CONTENT_DISPLAY" ]
  }, {
    "name" : "public IBinder getTokenToRecord()",
    "returnType" : "IBinder",
    "comment" : "\n     * The token of the layer of the hierarchy to record.\n     *\n     * <p>If {@link #getContentToRecord()} is {@link RecordContent#RECORD_CONTENT_TASK}, then\n     * represents the {@link android.window.WindowContainerToken} of the Task to record.\n     ",
    "links" : [ "#RECORD_CONTENT_TASK", "#getContentToRecord()", "android.window.WindowContainerToken" ]
  }, {
    "name" : "public boolean isWaitingForConsent()",
    "returnType" : "boolean",
    "comment" : "\n     * When {@code true}, no mirroring should take place until the user has re-granted access to\n     * the consent token. When {@code false}, recording can begin immediately.\n     *\n     * <p>Only set on the server side to sanitize any input from the client process.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getTargetUid()",
    "returnType" : "int",
    "comment" : "\n     * UID of the package that is captured if selected.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ContentRecordingSession setVirtualDisplayId(int value)",
    "returnType" : "ContentRecordingSession",
    "comment" : "\n     * Unique logical identifier of the {@link android.hardware.display.VirtualDisplay} that has\n     * recorded content rendered to its surface.\n     ",
    "links" : [ "android.hardware.display.VirtualDisplay" ]
  }, {
    "name" : "public ContentRecordingSession setContentToRecord(@RecordContent int value)",
    "returnType" : "ContentRecordingSession",
    "comment" : "\n     * The content to record.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ContentRecordingSession setDisplayToRecord(int value)",
    "returnType" : "ContentRecordingSession",
    "comment" : "\n     * Unique logical identifier of the {@link android.view.Display} to record.\n     *\n     * <p>If {@link #getContentToRecord()} is {@link RecordContent#RECORD_CONTENT_DISPLAY}, then is\n     * a valid display id.\n     ",
    "links" : [ "android.view.Display", "#getContentToRecord()", "#RECORD_CONTENT_DISPLAY" ]
  }, {
    "name" : "public ContentRecordingSession setTokenToRecord(@NonNull IBinder value)",
    "returnType" : "ContentRecordingSession",
    "comment" : "\n     * The token of the layer of the hierarchy to record.\n     *\n     * <p>If {@link #getContentToRecord()} is {@link RecordContent#RECORD_CONTENT_TASK}, then\n     * represents the {@link android.window.WindowContainerToken} of the Task to record.\n     ",
    "links" : [ "#RECORD_CONTENT_TASK", "#getContentToRecord()", "android.window.WindowContainerToken" ]
  }, {
    "name" : "public ContentRecordingSession setWaitingForConsent(boolean value)",
    "returnType" : "ContentRecordingSession",
    "comment" : "\n     * When {@code true}, no mirroring should take place until the user has re-granted access to\n     * the consent token. When {@code false}, recording can begin immediately.\n     *\n     * <p>Only set on the server side to sanitize any input from the client process.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ContentRecordingSession setTargetUid(int value)",
    "returnType" : "ContentRecordingSession",
    "comment" : "\n     * UID of the package that is captured if selected.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(@Nullable Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void __metadata()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static ContentRecordingSession createDisplaySession(int displayToMirror)", "public static ContentRecordingSession createTaskSession(@NonNull IBinder taskWindowContainerToken)", "public static ContentRecordingSession createTaskSession(@NonNull IBinder taskWindowContainerToken, int targetUid)", "public static boolean isValid(ContentRecordingSession session)", "public static boolean isProjectionOnSameDisplay(ContentRecordingSession session, ContentRecordingSession incomingSession)", "public static String recordContentToString(@RecordContent int value)", "public static String targetUidToString(@TargetUid int value)", "public int getVirtualDisplayId()", "public int getContentToRecord()", "public int getDisplayToRecord()", "public IBinder getTokenToRecord()", "public boolean isWaitingForConsent()", "public int getTargetUid()", "public ContentRecordingSession setVirtualDisplayId(int value)", "public ContentRecordingSession setContentToRecord(@RecordContent int value)", "public ContentRecordingSession setDisplayToRecord(int value)", "public ContentRecordingSession setTokenToRecord(@NonNull IBinder value)", "public ContentRecordingSession setWaitingForConsent(boolean value)", "public ContentRecordingSession setTargetUid(int value)", "public String toString()", "public boolean equals(@Nullable Object o)", "public int hashCode()", "public void writeToParcel(@NonNull Parcel dest, int flags)", "public int describeContents()", "private void __metadata()" ],
  "variableNames" : [ "RECORD_CONTENT_DISPLAY", "RECORD_CONTENT_TASK", "TARGET_UID_FULL_SCREEN", "TARGET_UID_UNKNOWN", "mVirtualDisplayId", "mContentToRecord", "mDisplayToRecord", "mTokenToRecord", "mWaitingForConsent", "mTargetUid", "CREATOR" ]
}