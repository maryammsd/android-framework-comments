{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/text/FontConfig.java",
  "packageName" : "android.text",
  "className" : "FontFamily",
  "comment" : "\n     * Represents a font family in the system font configuration.\n     *\n     * A {@link FontFamily} is a list of {@link Font}s for drawing text in various styles such as\n     * weight, slant.\n     *\n     * For example, a {@link FontFamily} can include the regular and bold styles of a {@link Font}.\n     *\n     * @see android.graphics.fonts.FontFamily\n     ",
  "links" : [ "FontFamily", "Font" ],
  "variables" : [ {
    "name" : "mFonts",
    "type" : "List<Font>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLocaleList",
    "type" : "LocaleList",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVariant",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VARIANT_DEFAULT",
    "type" : "int",
    "comment" : "\n         * Value for font variant.\n         *\n         * Indicates the font has no variant attribute.\n         ",
    "links" : [ ]
  }, {
    "name" : "VARIANT_COMPACT",
    "type" : "int",
    "comment" : "\n         * Value for font variant.\n         *\n         * Indicates the font is for compact variant.\n         * @see android.graphics.Paint#setElegantTextHeight\n         ",
    "links" : [ ]
  }, {
    "name" : "VARIANT_ELEGANT",
    "type" : "int",
    "comment" : "\n         * Value for font variant.\n         *\n         * Indicates the font is for elegant variant.\n         * @see android.graphics.Paint#setElegantTextHeight\n         ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<FontFamily>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public List<Font> getFontList()",
    "returnType" : "List<Font>",
    "comment" : "\n         * Returns the list of {@link Font}s in this {@link FontFamily}.\n         *\n         * @return a list of font files.\n         ",
    "links" : [ "FontFamily", "Font" ]
  }, {
    "name" : "public String getName()",
    "returnType" : "String",
    "comment" : "\n         * Returns the name of the {@link FontFamily}.\n         *\n         * When the name of a {@link FontFamily} is not null, this name is used to create a new\n         * {@code Fallback List}, and that {@code Fallback List}. Fallback List is the\n         * main building block for a {@link android.graphics.Typeface}.\n         *\n         * For example, if the {@link FontFamily} has the name \"serif\", then the system will create\n         * a “serif” {@code Fallback List} and it can be used by creating a Typeface via\n         * {@code Typeface.create(\"serif\", Typeface.NORMAL);}\n         *\n         * When the name of a {@link FontFamily} is null, it will be appended to all of the\n         * {@code Fallback List}s.\n         *\n         * @deprecated From API 34, this function always returns null. All font families which have\n         *             name attribute will be reported as a {@link NamedFamilyList}.\n         ",
    "links" : [ "android.graphics.Typeface", "FontFamily", "NamedFamilyList" ]
  }, {
    "name" : "public LocaleList getLocaleList()",
    "returnType" : "LocaleList",
    "comment" : "\n         * Returns the locale list if available.\n         *\n         * The locale list will be used for deciding which font family should be used in fallback\n         * list.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getVariant()",
    "returnType" : "int",
    "comment" : "\n         * Returns the text height variant.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Font[] getFonts()",
    "returnType" : "Font[]",
    "comment" : "\n         * Returns the list of fonts included in this family.\n         * @deprecated Use getFontList instead\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public String getLanguages()",
    "returnType" : "String",
    "comment" : "\n         * Returns the comma separated BCP47 compliant languages for this family. May be null.\n         * @deprecated Use getLocaleList instead\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public List<Font> getFontList()", "public String getName()", "public LocaleList getLocaleList()", "public int getVariant()", "public int describeContents()", "public void writeToParcel(@NonNull Parcel dest, int flags)", "public Font[] getFonts()", "public String getLanguages()", "public boolean equals(Object o)", "public int hashCode()", "public String toString()" ],
  "variableNames" : [ "mFonts", "mLocaleList", "mVariant", "VARIANT_DEFAULT", "VARIANT_COMPACT", "VARIANT_ELEGANT", "CREATOR" ]
}