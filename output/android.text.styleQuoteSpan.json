{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/text/style/QuoteSpan.java",
  "packageName" : "android.text.style",
  "className" : "QuoteSpan",
  "comment" : "\n * A span which styles paragraphs by adding a vertical stripe at the beginning of the text\n * (respecting layout direction).\n * <p>\n * A <code>QuoteSpan</code> must be attached from the first character to the last character of a\n * single paragraph, otherwise the span will not be displayed.\n * <p>\n * <code>QuoteSpans</code> allow configuring the following elements:\n * <ul>\n * <li><b>color</b> - the vertical stripe color. By default, the stripe color is 0xff0000ff</li>\n * <li><b>gap width</b> - the distance, in pixels, between the stripe and the paragraph.\n * Default value is 2px.</li>\n * <li><b>stripe width</b> - the width, in pixels, of the stripe. Default value is\n * 2px.</li>\n * </ul>\n * For example, a <code>QuoteSpan</code> using the default values can be constructed like this:\n * <pre>{@code SpannableString string = new SpannableString(\"Text with quote span on a long line\");\n *string.setSpan(new QuoteSpan(), 0, string.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);}</pre>\n * <img src=\"{@docRoot}reference/android/images/text/style/defaultquotespan.png\" />\n * <figcaption><code>QuoteSpan</code> constructed with default values.</figcaption>\n * <p>\n * <p>\n * To construct a <code>QuoteSpan</code> with a green stripe, of 20px in width and a gap width of\n * 40px:\n * <pre>{@code SpannableString string = new SpannableString(\"Text with quote span on a long line\");\n *string.setSpan(new QuoteSpan(Color.GREEN, 20, 40), 0, string.length(),\n *Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);}</pre>\n * <img src=\"{@docRoot}reference/android/images/text/style/customquotespan.png\" />\n * <figcaption>Customized <code>QuoteSpan</code>.</figcaption>\n ",
  "variables" : [ {
    "name" : "STANDARD_STRIPE_WIDTH_PX",
    "type" : "int",
    "comment" : "\n     * Default stripe width in pixels.\n     ",
    "links" : [ ]
  }, {
    "name" : "STANDARD_GAP_WIDTH_PX",
    "type" : "int",
    "comment" : "\n     * Default gap width in pixels.\n     ",
    "links" : [ ]
  }, {
    "name" : "STANDARD_COLOR",
    "type" : "int",
    "comment" : "\n     * Default color for the quote stripe.\n     ",
    "links" : [ ]
  }, {
    "name" : "mColor",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStripeWidth",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGapWidth",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getSpanTypeId()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getSpanTypeIdInternal()",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcelInternal(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getColor()",
    "returnType" : "int",
    "comment" : "\n     * Get the color of the quote stripe.\n     *\n     * @return the color of the quote stripe.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getStripeWidth()",
    "returnType" : "int",
    "comment" : "\n     * Get the width of the quote stripe.\n     *\n     * @return the width of the quote stripe.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getGapWidth()",
    "returnType" : "int",
    "comment" : "\n     * Get the width of the gap between the stripe and the text.\n     *\n     * @return the width of the gap between the stripe and the text.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getLeadingMargin(boolean first)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void drawLeadingMargin(@NonNull Canvas c, @NonNull Paint p, int x, int dir, int top, int baseline, int bottom, @NonNull CharSequence text, int start, int end, boolean first, @NonNull Layout layout)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "STANDARD_STRIPE_WIDTH_PX", "STANDARD_GAP_WIDTH_PX", "STANDARD_COLOR", "mColor", "mStripeWidth", "mGapWidth" ],
  "methodNames" : [ "public int getSpanTypeId()", "public int getSpanTypeIdInternal()", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)", "public void writeToParcelInternal(Parcel dest, int flags)", "public int getColor()", "public int getStripeWidth()", "public int getGapWidth()", "public int getLeadingMargin(boolean first)", "public void drawLeadingMargin(@NonNull Canvas c, @NonNull Paint p, int x, int dir, int top, int baseline, int bottom, @NonNull CharSequence text, int start, int end, boolean first, @NonNull Layout layout)" ]
}