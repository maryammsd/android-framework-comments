{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/backup/BackupDataOutput.java",
  "packageName" : "android.app.backup",
  "className" : "BackupDataOutput",
  "comment" : "\n * Provides the structured interface through which a {@link BackupAgent} commits\n * information to the backup data set, via its {@link\n * BackupAgent#onBackup(ParcelFileDescriptor,BackupDataOutput,ParcelFileDescriptor)\n * onBackup()} method.  Data written for backup is presented\n * as a set of \"entities,\" key/value pairs in which each binary data record \"value\" is\n * named with a string \"key.\"\n * <p>\n * To commit a data record to the backup transport, the agent's\n * {@link BackupAgent#onBackup(ParcelFileDescriptor,BackupDataOutput,ParcelFileDescriptor)\n * onBackup()} method first writes an \"entity header\" that supplies the key string for the record\n * and the total size of the binary value for the record.  After the header has been\n * written, the agent then writes the binary entity value itself.  The entity value can\n * be written in multiple chunks if desired, as long as the total count of bytes written\n * matches what was supplied to {@link #writeEntityHeader(String, int) writeEntityHeader()}.\n * <p>\n * Entity key strings are considered to be unique within a given application's backup\n * data set. If a backup agent writes a new entity under an existing key string, its value will\n * replace any previous value in the transport's remote data store.  You can remove a record\n * entirely from the remote data set by writing a new entity header using the\n * existing record's key, but supplying a negative <code>dataSize</code> parameter.\n * When you do so, the agent does not need to call {@link #writeEntityData(byte[], int)}.\n * <h3>Example</h3>\n * <p>\n * Here is an example illustrating a way to back up the value of a String variable\n * called <code>mStringToBackUp</code>:\n * <pre>\n * static final String MY_STRING_KEY = \"storedstring\";\n *\n * public void {@link BackupAgent#onBackup(ParcelFileDescriptor, BackupDataOutput, ParcelFileDescriptor) onBackup(ParcelFileDescriptor oldState, BackupDataOutput data, ParcelFileDescriptor newState)}\n *         throws IOException {\n *     ...\n *     byte[] stringBytes = mStringToBackUp.getBytes();\n *     data.writeEntityHeader(MY_STRING_KEY, stringBytes.length);\n *     data.writeEntityData(stringBytes, stringBytes.length);\n *     ...\n * }</pre>\n *\n * @see BackupAgent\n ",
  "links" : [ "android.app.backup.BackupAgent#onBackup(ParcelFileDescriptor", "#writeEntityHeader(String", "#writeEntityData(byte", "android.app.backup.BackupAgent" ],
  "variables" : [ {
    "name" : "mQuota",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTransportFlags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBackupWriter",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public long getQuota()",
    "returnType" : "long",
    "comment" : "\n     * Returns the quota in bytes for the application's current backup operation.  The\n     * value can vary for each operation.\n     *\n     * @see FullBackupDataOutput#getQuota()\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getTransportFlags()",
    "returnType" : "int",
    "comment" : "\n     * Returns flags with additional information about the backup transport. For supported flags see\n     * {@link android.app.backup.BackupAgent}\n     *\n     * @see FullBackupDataOutput#getTransportFlags()\n     ",
    "links" : [ "android.app.backup.BackupAgent" ]
  }, {
    "name" : "public int writeEntityHeader(String key, int dataSize) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Mark the beginning of one record in the backup data stream. This must be called before\n     * {@link #writeEntityData}.\n     * @param key A string key that uniquely identifies the data record within the application.\n     *    Keys whose first character is \\uFF00 or higher are not valid.\n     * @param dataSize The size in bytes of this record's data.  Passing a dataSize\n     *    of -1 indicates that the record under this key should be deleted.\n     * @return The number of bytes written to the backup stream\n     * @throws IOException if the write failed\n     ",
    "links" : [ "#writeEntityData" ]
  }, {
    "name" : "public int writeEntityData(byte[] data, int size) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Write a chunk of data under the current entity to the backup transport.\n     * @param data A raw data buffer to send\n     * @param size The number of bytes to be sent in this chunk\n     * @return the number of bytes written\n     * @throws IOException if the write failed\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setKeyPrefix(String keyPrefix)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "protected void finalize() throws Throwable",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private static native long ctor(FileDescriptor fd)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void dtor(long mBackupWriter)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int writeEntityHeader_native(long mBackupWriter, String key, int dataSize)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int writeEntityData_native(long mBackupWriter, byte[] data, int size)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void setKeyPrefix_native(long mBackupWriter, String keyPrefix)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public long getQuota()", "public int getTransportFlags()", "public int writeEntityHeader(String key, int dataSize) throws IOException", "public int writeEntityData(byte[] data, int size) throws IOException", "public void setKeyPrefix(String keyPrefix)", "protected void finalize() throws Throwable", "private static native long ctor(FileDescriptor fd)", "private static native void dtor(long mBackupWriter)", "private static native int writeEntityHeader_native(long mBackupWriter, String key, int dataSize)", "private static native int writeEntityData_native(long mBackupWriter, byte[] data, int size)", "private static native void setKeyPrefix_native(long mBackupWriter, String keyPrefix)" ],
  "variableNames" : [ "mQuota", "mTransportFlags", "mBackupWriter" ]
}