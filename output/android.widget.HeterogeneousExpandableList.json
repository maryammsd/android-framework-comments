{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/widget/HeterogeneousExpandableList.java",
  "packageName" : "android.widget",
  "className" : "HeterogeneousExpandableList",
  "comment" : "\n * Additional methods that when implemented make an\n * {@link ExpandableListAdapter} take advantage of the {@link Adapter} view type\n * mechanism.\n * <p>\n * An {@link ExpandableListAdapter} declares it has one view type for its group items\n * and one view type for its child items. Although adapted for most {@link ExpandableListView}s,\n * these values should be tuned for heterogeneous {@link ExpandableListView}s.\n * </p>\n * Lists that contain different types of group and/or child item views, should use an adapter that\n * implements this interface. This way, the recycled views that will be provided to\n * {@link android.widget.ExpandableListAdapter#getGroupView(int, boolean, View, ViewGroup)}\n * and\n * {@link android.widget.ExpandableListAdapter#getChildView(int, int, boolean, View, ViewGroup)}\n * will be of the appropriate group or child type, resulting in a more efficient reuse of the\n * previously created views.\n ",
  "links" : [ "android.widget.Adapter", "android.widget.ExpandableListAdapter#getGroupView(int", "android.widget.ExpandableListAdapter", "android.widget.ExpandableListView", "android.widget.ExpandableListAdapter#getChildView(int" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " int getGroupType(int groupPosition)",
    "returnType" : "int",
    "comment" : "\n     * Get the type of group View that will be created by\n     * {@link android.widget.ExpandableListAdapter#getGroupView(int, boolean, View, ViewGroup)}\n     * . for the specified group item.\n     * \n     * @param groupPosition the position of the group for which the type should be returned.\n     * @return An integer representing the type of group View. Two group views should share the same\n     *         type if one can be converted to the other in\n     *         {@link android.widget.ExpandableListAdapter#getGroupView(int, boolean, View, ViewGroup)}\n     *         . Note: Integers must be in the range 0 to {@link #getGroupTypeCount} - 1.\n     *         {@link android.widget.Adapter#IGNORE_ITEM_VIEW_TYPE} can also be returned.\n     * @see android.widget.Adapter#IGNORE_ITEM_VIEW_TYPE\n     * @see #getGroupTypeCount()\n     ",
    "links" : [ "android.widget.Adapter#IGNORE_ITEM_VIEW_TYPE", "android.widget.ExpandableListAdapter#getGroupView(int", "#getGroupTypeCount" ]
  }, {
    "name" : " int getChildType(int groupPosition, int childPosition)",
    "returnType" : "int",
    "comment" : "\n     * Get the type of child View that will be created by\n     * {@link android.widget.ExpandableListAdapter#getChildView(int, int, boolean, View, ViewGroup)}\n     * for the specified child item.\n     * \n     * @param groupPosition the position of the group that the child resides in\n     * @param childPosition the position of the child with respect to other children in the group\n     * @return An integer representing the type of child View. Two child views should share the same\n     *         type if one can be converted to the other in\n     *         {@link android.widget.ExpandableListAdapter#getChildView(int, int, boolean, View, ViewGroup)}\n     *         Note: Integers must be in the range 0 to {@link #getChildTypeCount} - 1.\n     *         {@link android.widget.Adapter#IGNORE_ITEM_VIEW_TYPE} can also be returned.\n     * @see android.widget.Adapter#IGNORE_ITEM_VIEW_TYPE\n     * @see #getChildTypeCount()\n     ",
    "links" : [ "#getChildTypeCount", "android.widget.Adapter#IGNORE_ITEM_VIEW_TYPE", "android.widget.ExpandableListAdapter#getChildView(int" ]
  }, {
    "name" : " int getGroupTypeCount()",
    "returnType" : "int",
    "comment" : "\n     * <p>\n     * Returns the number of types of group Views that will be created by\n     * {@link android.widget.ExpandableListAdapter#getGroupView(int, boolean, View, ViewGroup)}\n     * . Each type represents a set of views that can be converted in\n     * {@link android.widget.ExpandableListAdapter#getGroupView(int, boolean, View, ViewGroup)}\n     * . If the adapter always returns the same type of View for all group items, this method should\n     * return 1.\n     * </p>\n     * This method will only be called when the adapter is set on the {@link AdapterView}.\n     * \n     * @return The number of types of group Views that will be created by this adapter.\n     * @see #getChildTypeCount()\n     * @see #getGroupType(int)\n     ",
    "links" : [ "android.widget.ExpandableListAdapter#getGroupView(int", "android.widget.AdapterView" ]
  }, {
    "name" : " int getChildTypeCount()",
    "returnType" : "int",
    "comment" : "\n     * <p>\n     * Returns the number of types of child Views that will be created by\n     * {@link android.widget.ExpandableListAdapter#getChildView(int, int, boolean, View, ViewGroup)}\n     * . Each type represents a set of views that can be converted in\n     * {@link android.widget.ExpandableListAdapter#getChildView(int, int, boolean, View, ViewGroup)}\n     * , for any group. If the adapter always returns the same type of View for\n     * all child items, this method should return 1.\n     * </p>\n     * This method will only be called when the adapter is set on the {@link AdapterView}.\n     * \n     * @return The total number of types of child Views that will be created by this adapter.\n     * @see #getGroupTypeCount()\n     * @see #getChildType(int, int)\n     ",
    "links" : [ "android.widget.AdapterView", "android.widget.ExpandableListAdapter#getChildView(int" ]
  } ],
  "methodNames" : [ " int getGroupType(int groupPosition)", " int getChildType(int groupPosition, int childPosition)", " int getGroupTypeCount()", " int getChildTypeCount()" ],
  "variableNames" : [ ]
}