{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/bluetooth/le/DistanceMeasurementResult.java",
  "packageName" : "android.bluetooth.le",
  "className" : "Builder",
  "comment" : "\n     * Builder for {@link DistanceMeasurementResult}.\n     *\n     * @hide\n     ",
  "links" : [ "android.bluetooth.le.DistanceMeasurementResult" ],
  "variables" : [ {
    "name" : "mMeters",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mErrorMeters",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAzimuthAngle",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mErrorAzimuthAngle",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAltitudeAngle",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mErrorAltitudeAngle",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDelaySpreadMeters",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConfidenceLevel",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDetectedAttackLevel",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVelocityMetersPerSecond",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Builder setAzimuthAngle(@FloatRange(from = 0.0, to = 360.0) double angle)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the azimuth angle measurement in degrees.\n         *\n         * @param angle azimuth angle in degrees\n         * @throws IllegalArgumentException if value is invalid\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setErrorAzimuthAngle(@FloatRange(from = 0.0, to = 360.0) double angle)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the azimuth angle error in degrees.\n         *\n         * @param angle azimuth angle error in degrees\n         * @throws IllegalArgumentException if value is invalid\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setAltitudeAngle(@FloatRange(from = -90.0, to = 90.0) double angle)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the altitude angle measurement in degrees.\n         *\n         * @param angle altitude angle in degrees\n         * @throws IllegalArgumentException if value is invalid\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setErrorAltitudeAngle(@FloatRange(from = 0.0, to = 180.0) double angle)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the altitude angle error in degrees.\n         *\n         * @param angle altitude angle error in degrees\n         * @throws IllegalArgumentException if value is invalid\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setDelaySpreadMeters(double delaySpreadMeters)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the estimated delay spread in meters.\n         *\n         * @param delaySpreadMeters estimated delay spread in meters\n         * @throws IllegalArgumentException if value is invalid\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setConfidenceLevel(@FloatRange(from = 0.0, to = 1.0) double confidenceLevel)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the confidence of estimated distance.\n         *\n         * @param confidenceLevel a normalized value from 0.0 (low confidence) to 1.0 (high\n         *     confidence) representing the confidence of estimated distance\n         * @throws IllegalArgumentException if value is invalid\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setDetectedAttackLevel(@Nadm int detectedAttackLevel)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the value that represents the chance of being attacked for the measurement.\n         *\n         * @param detectedAttackLevel a value that represents the chance of being attacked for the\n         *     measurement.\n         * @throws IllegalArgumentException if value is invalid\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setVelocityMetersPerSecond(double velocityMetersPerSecond)",
    "returnType" : "Builder",
    "comment" : "\n         * Set estimated velocity, in the direction of line between two devices, of the moving\n         * object in meters/sec.\n         *\n         * @param velocityMetersPerSecond estimated velocity in meters/sec.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public DistanceMeasurementResult build()",
    "returnType" : "DistanceMeasurementResult",
    "comment" : "\n         * Builds the {@link DistanceMeasurementResult} object.\n         *\n         * @throws IllegalStateException if meters, error, or confidence are not set\n         * @hide\n         ",
    "links" : [ "android.bluetooth.le.DistanceMeasurementResult" ]
  } ],
  "methodNames" : [ "public Builder setAzimuthAngle(@FloatRange(from = 0.0, to = 360.0) double angle)", "public Builder setErrorAzimuthAngle(@FloatRange(from = 0.0, to = 360.0) double angle)", "public Builder setAltitudeAngle(@FloatRange(from = -90.0, to = 90.0) double angle)", "public Builder setErrorAltitudeAngle(@FloatRange(from = 0.0, to = 180.0) double angle)", "public Builder setDelaySpreadMeters(double delaySpreadMeters)", "public Builder setConfidenceLevel(@FloatRange(from = 0.0, to = 1.0) double confidenceLevel)", "public Builder setDetectedAttackLevel(@Nadm int detectedAttackLevel)", "public Builder setVelocityMetersPerSecond(double velocityMetersPerSecond)", "public DistanceMeasurementResult build()" ],
  "variableNames" : [ "mMeters", "mErrorMeters", "mAzimuthAngle", "mErrorAzimuthAngle", "mAltitudeAngle", "mErrorAltitudeAngle", "mDelaySpreadMeters", "mConfidenceLevel", "mDetectedAttackLevel", "mVelocityMetersPerSecond" ]
}