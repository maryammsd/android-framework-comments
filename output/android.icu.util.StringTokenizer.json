{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/util/StringTokenizer.java",
  "packageName" : "android.icu.util",
  "className" : "StringTokenizer",
  "comment" : "\n * <strong>[icu enhancement]</strong> ICU's replacement for {@link java.util.Calendar}.&nbsp;Methods, fields, and other functionality specific to ICU are labeled '<strong>[icu]</strong>'.\n *\n * <p>The string tokenizer class allows an application to break a string \n * into tokens by performing code point comparison. \n * The <code>StringTokenizer</code> methods do not distinguish \n * among identifiers, numbers, and quoted strings, nor do they recognize \n * and skip comments.\n * <p>\n * The set of delimiters (the codepoints that separate tokens) may be \n * specified either at creation time or on a per-token basis. \n * <p>\n * An instance of <code>StringTokenizer</code> behaves in one of three ways, \n * depending on whether it was created with the <code>returnDelims</code> \n * and <code>coalesceDelims</code>\n * flags having the value <code>true</code> or <code>false</code>: \n * <ul>\n * <li>If returnDelims is <code>false</code>, delimiter code points serve to \n * separate tokens. A token is a maximal sequence of consecutive \n * code points that are not delimiters. \n * <li>If returnDelims is <code>true</code>, delimiter code points are \n * themselves considered to be tokens. In this case, if coalesceDelims is\n * <code>true</code>, such tokens will be the maximal sequence of consecutive\n * code points that <em>are</em> delimiters.  If coalesceDelims is false,\n * a token will be received for each delimiter code point.\n * </ul>\n * <p>A token is thus either one \n * delimiter code point, a maximal sequence of consecutive code points that\n * are delimiters, or a maximal sequence of consecutive code \n * points that are not delimiters.\n * <p>\n * A <tt>StringTokenizer</tt> object internally maintains a current \n * position within the string to be tokenized. Some operations advance this \n * current position past the code point processed.\n * <p>\n * A token is returned by taking a substring of the string that was used to \n * create the <tt>StringTokenizer</tt> object.\n * <p>\n * Example of the use of the default delimiter tokenizer.\n * <blockquote><pre>\n * StringTokenizer st = new StringTokenizer(\"this is a test\");\n * while (st.hasMoreTokens()) {\n *     println(st.nextToken());\n *     }\n * </pre></blockquote>\n * <p>\n * prints the following output:\n * <blockquote><pre>\n *     this\n *     is\n *     a\n *     test\n * </pre></blockquote>\n * <p>\n * Example of the use of the tokenizer with user specified delimiter.\n * <blockquote><pre>\n *     StringTokenizer st = new StringTokenizer(\n *     \"this is a test with supplementary characters &#92;ud800&#92;ud800&#92;udc00&#92;udc00\",\n *         \" &#92;ud800&#92;udc00\");\n *     while (st.hasMoreTokens()) {\n *         println(st.nextToken());\n *     }\n * </pre></blockquote>\n * <p>\n * prints the following output:\n * <blockquote><pre>\n *     this\n *     is\n *     a\n *     test\n *     with\n *     supplementary\n *     characters\n *     &#92;ud800\n *     &#92;udc00\n * </pre></blockquote>\n *\n * @author syn wee\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ "java.util.Calendar" ],
  "variables" : [ {
    "name" : "m_tokenOffset_",
    "type" : "int",
    "comment" : "\n     * Current offset to the token array. If the array token is not set up yet,\n     * this value is a -1\n     ",
    "links" : [ ]
  }, {
    "name" : "m_tokenSize_",
    "type" : "int",
    "comment" : "\n     * Size of the token array. If the array token is not set up yet,\n     * this value is a -1\n     ",
    "links" : [ ]
  }, {
    "name" : "m_tokenStart_",
    "type" : "int[]",
    "comment" : "\n     * Array of pre-calculated tokens start indexes in source string terminated \n     * by -1.\n     * This is only set up during countTokens() and only stores the remaining\n     * tokens, not all tokens including parsed ones\n     ",
    "links" : [ ]
  }, {
    "name" : "m_tokenLimit_",
    "type" : "int[]",
    "comment" : "\n     * Array of pre-calculated tokens limit indexes in source string.\n     * This is only set up during countTokens() and only stores the remaining\n     * tokens, not all tokens including parsed ones\n     ",
    "links" : [ ]
  }, {
    "name" : "m_delimiters_",
    "type" : "UnicodeSet",
    "comment" : "\n     * UnicodeSet containing delimiters\n     ",
    "links" : [ ]
  }, {
    "name" : "m_source_",
    "type" : "String",
    "comment" : "\n     * String to parse for tokens\n     ",
    "links" : [ ]
  }, {
    "name" : "m_length_",
    "type" : "int",
    "comment" : "\n     * Length of m_source_\n     ",
    "links" : [ ]
  }, {
    "name" : "m_nextOffset_",
    "type" : "int",
    "comment" : "\n     * Current position in string to parse for tokens\n     ",
    "links" : [ ]
  }, {
    "name" : "m_returnDelimiters_",
    "type" : "boolean",
    "comment" : "\n     * Flag indicator if delimiters are to be treated as tokens too\n     ",
    "links" : [ ]
  }, {
    "name" : "m_coalesceDelimiters_",
    "type" : "boolean",
    "comment" : "\n     * Flag indicating whether to coalesce runs of delimiters into single tokens\n     ",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_DELIMITERS_",
    "type" : "UnicodeSet",
    "comment" : "\n     * Default set of delimiters &#92;t&#92;n&#92;r&#92;f\n     ",
    "links" : [ ]
  }, {
    "name" : "TOKEN_SIZE_",
    "type" : "int",
    "comment" : "\n     * Array size increments\n     ",
    "links" : [ ]
  }, {
    "name" : "EMPTY_DELIMITER_",
    "type" : "UnicodeSet",
    "comment" : "\n     * A empty delimiter UnicodeSet, used when user specified null delimiters\n     ",
    "links" : [ ]
  }, {
    "name" : "delims",
    "type" : "boolean[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean hasMoreTokens()",
    "returnType" : "boolean",
    "comment" : "\n     * Tests if there are more tokens available from this tokenizer's \n     * string. \n     * If this method returns <tt>true</tt>, then a subsequent call to \n     * <tt>nextToken</tt> with no argument will successfully return a token.\n     * @return <code>true</code> if and only if there is at least one token \n     *         in the string after the current position; <code>false</code> \n     *         otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String nextToken()",
    "returnType" : "String",
    "comment" : "\n     * Returns the next token from this string tokenizer.\n     * @return the next token from this string tokenizer.\n     * @exception NoSuchElementException if there are no more tokens in \n     *            this tokenizer's string.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String nextToken(String delim)",
    "returnType" : "String",
    "comment" : "\n     * Returns the next token in this string tokenizer's string. First, \n     * the set of characters considered to be delimiters by this \n     * <tt>StringTokenizer</tt> object is changed to be the characters in \n     * the string <tt>delim</tt>. Then the next token in the string\n     * after the current position is returned. The current position is \n     * advanced beyond the recognized token.  The new delimiter set \n     * remains the default after this call. \n     * @param delim the new delimiters.\n     * @return the next token, after switching to the new delimiter set.\n     * @exception NoSuchElementException if there are no more tokens in \n     *            this tokenizer's string.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String nextToken(UnicodeSet delim)",
    "returnType" : "String",
    "comment" : "\n     * <strong>[icu]</strong> Returns the next token in this string tokenizer's string. First, \n     * the set of characters considered to be delimiters by this \n     * <tt>StringTokenizer</tt> object is changed to be the characters in \n     * the string <tt>delim</tt>. Then the next token in the string\n     * after the current position is returned. The current position is \n     * advanced beyond the recognized token.  The new delimiter set \n     * remains the default after this call. \n     * @param delim the new delimiters.\n     * @return the next token, after switching to the new delimiter set.\n     * @exception NoSuchElementException if there are no more tokens in \n     *            this tokenizer's string.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasMoreElements()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the same value as the <code>hasMoreTokens</code> method. \n     * It exists so that this class can implement the \n     * <code>Enumeration</code> interface. \n     * @return <code>true</code> if there are more tokens;\n     *         <code>false</code> otherwise.\n     * @see #hasMoreTokens()\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object nextElement()",
    "returnType" : "Object",
    "comment" : "\n     * Returns the same value as the <code>nextToken</code> method, except \n     * that its declared return value is <code>Object</code> rather than \n     * <code>String</code>. It exists so that this class can implement the \n     * <code>Enumeration</code> interface. \n     * @return the next token in the string.\n     * @exception NoSuchElementException if there are no more tokens in \n     *            this tokenizer's string.\n     * @see #nextToken()\n     ",
    "links" : [ ]
  }, {
    "name" : "public int countTokens()",
    "returnType" : "int",
    "comment" : "\n     * Calculates the number of times that this tokenizer's \n     * <code>nextToken</code> method can be called before it generates an \n     * exception. The current position is not advanced.\n     * @return the number of tokens remaining in the string using the \n     *         current delimiter set.\n     * @see #nextToken()\n     ",
    "links" : [ ]
  }, {
    "name" : "private int getNextDelimiter(int offset)",
    "returnType" : "int",
    "comment" : "\n     * Gets the index of the next delimiter after offset\n     * @param offset to the source string\n     * @return offset of the immediate next delimiter, otherwise \n     *         (- source string length - 1) if there\n     *         are no more delimiters after m_nextOffset\n     ",
    "links" : [ ]
  }, {
    "name" : "private int getNextNonDelimiter(int offset)",
    "returnType" : "int",
    "comment" : "\n     * Gets the index of the next non-delimiter after m_nextOffset_\n     * @param offset to the source string\n     * @return offset of the immediate next non-delimiter, otherwise \n     *         (- source string length - 1) if there\n     *         are no more delimiters after m_nextOffset\n     ",
    "links" : [ ]
  }, {
    "name" : " void checkDelimiters()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public boolean hasMoreTokens()", "public String nextToken()", "public String nextToken(String delim)", "public String nextToken(UnicodeSet delim)", "public boolean hasMoreElements()", "public Object nextElement()", "public int countTokens()", "private int getNextDelimiter(int offset)", "private int getNextNonDelimiter(int offset)", " void checkDelimiters()" ],
  "variableNames" : [ "m_tokenOffset_", "m_tokenSize_", "m_tokenStart_", "m_tokenLimit_", "m_delimiters_", "m_source_", "m_length_", "m_nextOffset_", "m_returnDelimiters_", "m_coalesceDelimiters_", "DEFAULT_DELIMITERS_", "TOKEN_SIZE_", "EMPTY_DELIMITER_", "delims" ]
}