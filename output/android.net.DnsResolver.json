{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/DnsResolver.java",
  "packageName" : "android.net",
  "className" : "DnsResolver",
  "comment" : "\n * Dns resolver class for asynchronous dns querying\n *\n * Note that if a client sends a query with more than 1 record in the question section but\n * the remote dns server does not support this, it may not respond at all, leading to a timeout.\n *\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FD_EVENTS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAXPACKET",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SLEEP_TIME_MS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CLASS_IN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TYPE_A",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TYPE_AAAA",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TYPE_PTR",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TYPE_TXT",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TYPE_SRV",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TYPE_ANY",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "FLAG_EMPTY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAG_NO_RETRY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAG_NO_CACHE_STORE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAG_NO_CACHE_LOOKUP",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ERROR_PARSE",
    "type" : "int",
    "comment" : "\n     * Indicates that there was an error parsing the response the query.\n     * The cause of this error is available via getCause() and is a {@link ParseException}.\n     ",
    "links" : [ "android.net.ParseException" ]
  }, {
    "name" : "ERROR_SYSTEM",
    "type" : "int",
    "comment" : "\n     * Indicates that there was an error sending the query.\n     * The cause of this error is available via getCause() and is an ErrnoException.\n     ",
    "links" : [ ]
  }, {
    "name" : "NETID_UNSET",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sInstance",
    "type" : "DnsResolver",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static DnsResolver getInstance()",
    "returnType" : "DnsResolver",
    "comment" : "\n     * Get instance for DnsResolver\n     ",
    "links" : [ ]
  }, {
    "name" : "public void rawQuery(@Nullable Network network, @NonNull byte[] query, @QueryFlag int flags, @NonNull @CallbackExecutor Executor executor, @Nullable CancellationSignal cancellationSignal, @NonNull Callback<? super byte[]> callback)",
    "returnType" : "void",
    "comment" : "\n     * Send a raw DNS query.\n     * The answer will be provided asynchronously through the provided {@link Callback}.\n     *\n     * @param network {@link Network} specifying which network to query on.\n     *         {@code null} for query on default network.\n     * @param query blob message to query\n     * @param flags flags as a combination of the FLAGS_* constants\n     * @param executor The {@link Executor} that the callback should be executed on.\n     * @param cancellationSignal used by the caller to signal if the query should be\n     *    cancelled. May be {@code null}.\n     * @param callback a {@link Callback} which will be called to notify the caller\n     *    of the result of dns query.\n     ",
    "links" : [ "Callback", "android.annotation.CallbackExecutor", "android.net.NetworkUtils.getDnsNetwork" ]
  }, {
    "name" : "public void rawQuery(@Nullable Network network, @NonNull String domain, @QueryClass int nsClass, @QueryType int nsType, @QueryFlag int flags, @NonNull @CallbackExecutor Executor executor, @Nullable CancellationSignal cancellationSignal, @NonNull Callback<? super byte[]> callback)",
    "returnType" : "void",
    "comment" : "\n     * Send a DNS query with the specified name, class and query type.\n     * The answer will be provided asynchronously through the provided {@link Callback}.\n     *\n     * @param network {@link Network} specifying which network to query on.\n     *         {@code null} for query on default network.\n     * @param domain domain name to query\n     * @param nsClass dns class as one of the CLASS_* constants\n     * @param nsType dns resource record (RR) type as one of the TYPE_* constants\n     * @param flags flags as a combination of the FLAGS_* constants\n     * @param executor The {@link Executor} that the callback should be executed on.\n     * @param cancellationSignal used by the caller to signal if the query should be\n     *    cancelled. May be {@code null}.\n     * @param callback a {@link Callback} which will be called to notify the caller\n     *    of the result of dns query.\n     ",
    "links" : [ "Callback", "android.annotation.CallbackExecutor", "android.net.NetworkUtils.getDnsNetwork" ]
  }, {
    "name" : "public void query(@Nullable Network network, @NonNull String domain, @QueryFlag int flags, @NonNull @CallbackExecutor Executor executor, @Nullable CancellationSignal cancellationSignal, @NonNull Callback<? super List<InetAddress>> callback)",
    "returnType" : "void",
    "comment" : "\n     * Send a DNS query with the specified name on a network with both IPv4 and IPv6,\n     * get back a set of InetAddresses with rfc6724 sorting style asynchronously.\n     *\n     * This method will examine the connection ability on given network, and query IPv4\n     * and IPv6 if connection is available.\n     *\n     * If at least one query succeeded with valid answer, rcode will be 0\n     *\n     * The answer will be provided asynchronously through the provided {@link Callback}.\n     *\n     * @param network {@link Network} specifying which network to query on.\n     *         {@code null} for query on default network.\n     * @param domain domain name to query\n     * @param flags flags as a combination of the FLAGS_* constants\n     * @param executor The {@link Executor} that the callback should be executed on.\n     * @param cancellationSignal used by the caller to signal if the query should be\n     *    cancelled. May be {@code null}.\n     * @param callback a {@link Callback} which will be called to notify the\n     *    caller of the result of dns query.\n     ",
    "links" : [ "Callback", "android.annotation.CallbackExecutor", "android.net.NetworkUtils.getDnsNetwork" ]
  }, {
    "name" : "public void query(@Nullable Network network, @NonNull String domain, @QueryType int nsType, @QueryFlag int flags, @NonNull @CallbackExecutor Executor executor, @Nullable CancellationSignal cancellationSignal, @NonNull Callback<? super List<InetAddress>> callback)",
    "returnType" : "void",
    "comment" : "\n     * Send a DNS query with the specified name and query type, get back a set of\n     * InetAddresses with rfc6724 sorting style asynchronously.\n     *\n     * The answer will be provided asynchronously through the provided {@link Callback}.\n     *\n     * @param network {@link Network} specifying which network to query on.\n     *         {@code null} for query on default network.\n     * @param domain domain name to query\n     * @param nsType dns resource record (RR) type as one of the TYPE_* constants\n     * @param flags flags as a combination of the FLAGS_* constants\n     * @param executor The {@link Executor} that the callback should be executed on.\n     * @param cancellationSignal used by the caller to signal if the query should be\n     *    cancelled. May be {@code null}.\n     * @param callback a {@link Callback} which will be called to notify the caller\n     *    of the result of dns query.\n     ",
    "links" : [ "Callback", "android.annotation.CallbackExecutor", "android.net.NetworkUtils.getDnsNetwork" ]
  }, {
    "name" : "private void registerFDListener(@NonNull Executor executor, @NonNull FileDescriptor queryfd, @NonNull Callback<? super byte[]> answerCallback, @Nullable CancellationSignal cancellationSignal, @NonNull Object lock)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void cancelQuery(@NonNull FileDescriptor queryfd)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void addCancellationSignal(@NonNull CancellationSignal cancellationSignal, @NonNull FileDescriptor queryfd, @NonNull Object lock)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static DnsResolver getInstance()", "public void rawQuery(@Nullable Network network, @NonNull byte[] query, @QueryFlag int flags, @NonNull @CallbackExecutor Executor executor, @Nullable CancellationSignal cancellationSignal, @NonNull Callback<? super byte[]> callback)", "public void rawQuery(@Nullable Network network, @NonNull String domain, @QueryClass int nsClass, @QueryType int nsType, @QueryFlag int flags, @NonNull @CallbackExecutor Executor executor, @Nullable CancellationSignal cancellationSignal, @NonNull Callback<? super byte[]> callback)", "public void query(@Nullable Network network, @NonNull String domain, @QueryFlag int flags, @NonNull @CallbackExecutor Executor executor, @Nullable CancellationSignal cancellationSignal, @NonNull Callback<? super List<InetAddress>> callback)", "public void query(@Nullable Network network, @NonNull String domain, @QueryType int nsType, @QueryFlag int flags, @NonNull @CallbackExecutor Executor executor, @Nullable CancellationSignal cancellationSignal, @NonNull Callback<? super List<InetAddress>> callback)", "private void registerFDListener(@NonNull Executor executor, @NonNull FileDescriptor queryfd, @NonNull Callback<? super byte[]> answerCallback, @Nullable CancellationSignal cancellationSignal, @NonNull Object lock)", "private void cancelQuery(@NonNull FileDescriptor queryfd)", "private void addCancellationSignal(@NonNull CancellationSignal cancellationSignal, @NonNull FileDescriptor queryfd, @NonNull Object lock)" ],
  "variableNames" : [ "TAG", "FD_EVENTS", "MAXPACKET", "SLEEP_TIME_MS", "CLASS_IN", "TYPE_A", "TYPE_AAAA", "TYPE_PTR", "TYPE_TXT", "TYPE_SRV", "TYPE_ANY", "FLAG_EMPTY", "FLAG_NO_RETRY", "FLAG_NO_CACHE_STORE", "FLAG_NO_CACHE_LOOKUP", "ERROR_PARSE", "ERROR_SYSTEM", "NETID_UNSET", "sInstance" ]
}