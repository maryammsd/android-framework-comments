{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/ICUData.java",
  "packageName" : "android.icu.impl",
  "className" : "ICUData",
  "comment" : "\n * Provides access to ICU data files as InputStreams.  Implements security checking.\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "ICU_DATA_PATH",
    "type" : "String",
    "comment" : "\n     * The data path to be used with getBundleInstance API\n     ",
    "links" : [ ]
  }, {
    "name" : "PACKAGE_NAME",
    "type" : "String",
    "comment" : "\n     * The ICU data package name.\n     * This is normally the name of the .dat package, and the prefix (plus '/')\n     * of the package entry names.\n     ",
    "links" : [ ]
  }, {
    "name" : "ICU_BUNDLE",
    "type" : "String",
    "comment" : "\n     * The data path to be used with Class.getResourceAsStream().\n     ",
    "links" : [ ]
  }, {
    "name" : "ICU_BASE_NAME",
    "type" : "String",
    "comment" : "\n     * The base name of ICU data to be used with ClassLoader.getResourceAsStream(),\n     * ICUResourceBundle.getBundleInstance() etc.\n     ",
    "links" : [ ]
  }, {
    "name" : "ICU_COLLATION_BASE_NAME",
    "type" : "String",
    "comment" : "\n     * The base name of collation data to be used with getBundleInstance API\n     ",
    "links" : [ ]
  }, {
    "name" : "ICU_BRKITR_NAME",
    "type" : "String",
    "comment" : "\n     * The base name of rbbi data to be used with getData API\n     ",
    "links" : [ ]
  }, {
    "name" : "ICU_BRKITR_BASE_NAME",
    "type" : "String",
    "comment" : "\n     * The base name of rbbi data to be used with getBundleInstance API\n     ",
    "links" : [ ]
  }, {
    "name" : "ICU_RBNF_BASE_NAME",
    "type" : "String",
    "comment" : "\n     * The base name of rbnf data to be used with getBundleInstance API\n     ",
    "links" : [ ]
  }, {
    "name" : "ICU_TRANSLIT_BASE_NAME",
    "type" : "String",
    "comment" : "\n     * The base name of transliterator data to be used with getBundleInstance API\n     ",
    "links" : [ ]
  }, {
    "name" : "ICU_LANG_BASE_NAME",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ICU_CURR_BASE_NAME",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ICU_REGION_BASE_NAME",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ICU_ZONE_BASE_NAME",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ICU_UNIT_BASE_NAME",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "logBinaryDataFromInputStream",
    "type" : "boolean",
    "comment" : "\n     * For testing (otherwise false): When reading an InputStream from a Class or ClassLoader\n     * (that is, not from a file), log when the stream contains ICU binary data.\n     *\n     * This cannot be ICUConfig'ured because ICUConfig calls ICUData.getStream()\n     * to read the properties file, so we would get a circular dependency\n     * in the class initialization.\n     ",
    "links" : [ ]
  }, {
    "name" : "logger",
    "type" : "Logger",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static boolean exists(final String resourceName)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static InputStream getStream(final Class<?> root, final String resourceName, boolean required)",
    "returnType" : "InputStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static InputStream getStream(final ClassLoader loader, final String resourceName, boolean required)",
    "returnType" : "InputStream",
    "comment" : "\n     * Should be called only from ICUBinary.getData() or from convenience overloads here.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void checkStreamForBinaryData(InputStream is, String resourceName)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static InputStream getStream(ClassLoader loader, String resourceName)",
    "returnType" : "InputStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static InputStream getRequiredStream(ClassLoader loader, String resourceName)",
    "returnType" : "InputStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static InputStream getStream(String resourceName)",
    "returnType" : "InputStream",
    "comment" : "\n     * Convenience override that calls getStream(ICUData.class, resourceName, false);\n     * Returns null if the resource could not be found.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static InputStream getRequiredStream(String resourceName)",
    "returnType" : "InputStream",
    "comment" : "\n     * Convenience method that calls getStream(ICUData.class, resourceName, true).\n     * @throws MissingResourceException if the resource could not be found\n     ",
    "links" : [ ]
  }, {
    "name" : "public static InputStream getStream(Class<?> root, String resourceName)",
    "returnType" : "InputStream",
    "comment" : "\n     * Convenience override that calls getStream(root, resourceName, false);\n     * Returns null if the resource could not be found.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static InputStream getRequiredStream(Class<?> root, String resourceName)",
    "returnType" : "InputStream",
    "comment" : "\n     * Convenience method that calls getStream(root, resourceName, true).\n     * @throws MissingResourceException if the resource could not be found\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static boolean exists(final String resourceName)", "private static InputStream getStream(final Class<?> root, final String resourceName, boolean required)", " static InputStream getStream(final ClassLoader loader, final String resourceName, boolean required)", "private static void checkStreamForBinaryData(InputStream is, String resourceName)", "public static InputStream getStream(ClassLoader loader, String resourceName)", "public static InputStream getRequiredStream(ClassLoader loader, String resourceName)", "public static InputStream getStream(String resourceName)", "public static InputStream getRequiredStream(String resourceName)", "public static InputStream getStream(Class<?> root, String resourceName)", "public static InputStream getRequiredStream(Class<?> root, String resourceName)" ],
  "variableNames" : [ "ICU_DATA_PATH", "PACKAGE_NAME", "ICU_BUNDLE", "ICU_BASE_NAME", "ICU_COLLATION_BASE_NAME", "ICU_BRKITR_NAME", "ICU_BRKITR_BASE_NAME", "ICU_RBNF_BASE_NAME", "ICU_TRANSLIT_BASE_NAME", "ICU_LANG_BASE_NAME", "ICU_CURR_BASE_NAME", "ICU_REGION_BASE_NAME", "ICU_ZONE_BASE_NAME", "ICU_UNIT_BASE_NAME", "logBinaryDataFromInputStream", "logger" ]
}