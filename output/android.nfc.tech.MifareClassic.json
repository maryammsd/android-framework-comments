{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/nfc/tech/MifareClassic.java",
  "packageName" : "android.nfc.tech",
  "className" : "MifareClassic",
  "comment" : "\n * Provides access to MIFARE Classic properties and I/O operations on a {@link Tag}.\n *\n * <p>Acquire a {@link MifareClassic} object using {@link #get}.\n *\n * <p>MIFARE Classic is also known as MIFARE Standard.\n * <p>MIFARE Classic tags are divided into sectors, and each sector is sub-divided into\n * blocks. Block size is always 16 bytes ({@link #BLOCK_SIZE}. Sector size varies.\n * <ul>\n * <li>MIFARE Classic Mini are 320 bytes ({@link #SIZE_MINI}), with 5 sectors each of 4 blocks.\n * <li>MIFARE Classic 1k are 1024 bytes ({@link #SIZE_1K}), with 16 sectors each of 4 blocks.\n * <li>MIFARE Classic 2k are 2048 bytes ({@link #SIZE_2K}), with 32 sectors each of 4 blocks.\n * <li>MIFARE Classic 4k are 4096 bytes ({@link #SIZE_4K}). The first 32 sectors contain 4 blocks\n * and the last 8 sectors contain 16 blocks.\n * </ul>\n *\n * <p>MIFARE Classic tags require authentication on a per-sector basis before any\n * other I/O operations on that sector can be performed. There are two keys per sector,\n * and ACL bits determine what I/O operations are allowed on that sector after\n * authenticating with a key. {@see #authenticateSectorWithKeyA} and\n * {@see #authenticateSectorWithKeyB}.\n *\n * <p>Three well-known authentication keys are defined in this class:\n * {@link #KEY_DEFAULT}, {@link #KEY_MIFARE_APPLICATION_DIRECTORY},\n * {@link #KEY_NFC_FORUM}.\n * <ul>\n * <li>{@link #KEY_DEFAULT} is the default factory key for MIFARE Classic.\n * <li>{@link #KEY_MIFARE_APPLICATION_DIRECTORY} is the well-known key for\n * MIFARE Classic cards that have been formatted according to the\n * MIFARE Application Directory (MAD) specification.\n * <li>{@link #KEY_NFC_FORUM} is the well-known key for MIFARE Classic cards that\n * have been formatted according to the NXP specification for NDEF on MIFARE Classic.\n *\n * <p>Implementation of this class on a Android NFC device is optional.\n * If it is not implemented, then\n * {@link MifareClassic} will never be enumerated in {@link Tag#getTechList}.\n * If it is enumerated, then all {@link MifareClassic} I/O operations will be supported,\n * and {@link Ndef#MIFARE_CLASSIC} NDEF tags will also be supported. In either case,\n * {@link NfcA} will also be enumerated on the tag, because all MIFARE Classic tags are also\n * {@link NfcA}.\n *\n * <p class=\"note\"><strong>Note:</strong> Methods that perform I/O operations\n * require the {@link android.Manifest.permission#NFC} permission.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_DEFAULT",
    "type" : "byte[]",
    "comment" : "\n     * The default factory key.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_MIFARE_APPLICATION_DIRECTORY",
    "type" : "byte[]",
    "comment" : "\n     * The well-known key for tags formatted according to the\n     * MIFARE Application Directory (MAD) specification.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_NFC_FORUM",
    "type" : "byte[]",
    "comment" : "\n     * The well-known key for tags formatted according to the\n     * NDEF on MIFARE Classic specification.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_UNKNOWN",
    "type" : "int",
    "comment" : " A MIFARE Classic compatible card of unknown type ",
    "links" : [ ]
  }, {
    "name" : "TYPE_CLASSIC",
    "type" : "int",
    "comment" : " A MIFARE Classic tag ",
    "links" : [ ]
  }, {
    "name" : "TYPE_PLUS",
    "type" : "int",
    "comment" : " A MIFARE Plus tag ",
    "links" : [ ]
  }, {
    "name" : "TYPE_PRO",
    "type" : "int",
    "comment" : " A MIFARE Pro tag ",
    "links" : [ ]
  }, {
    "name" : "SIZE_1K",
    "type" : "int",
    "comment" : " Tag contains 16 sectors, each with 4 blocks. ",
    "links" : [ ]
  }, {
    "name" : "SIZE_2K",
    "type" : "int",
    "comment" : " Tag contains 32 sectors, each with 4 blocks. ",
    "links" : [ ]
  }, {
    "name" : "SIZE_4K",
    "type" : "int",
    "comment" : "\n     * Tag contains 40 sectors. The first 32 sectors contain 4 blocks and the last 8 sectors\n     * contain 16 blocks.\n     ",
    "links" : [ ]
  }, {
    "name" : "SIZE_MINI",
    "type" : "int",
    "comment" : " Tag contains 5 sectors, each with 4 blocks. ",
    "links" : [ ]
  }, {
    "name" : "BLOCK_SIZE",
    "type" : "int",
    "comment" : " Size of a MIFARE Classic block (in bytes) ",
    "links" : [ ]
  }, {
    "name" : "MAX_BLOCK_COUNT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_SECTOR_COUNT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsEmulated",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSize",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static MifareClassic get(Tag tag)",
    "returnType" : "MifareClassic",
    "comment" : "\n     * Get an instance of {@link MifareClassic} for the given tag.\n     * <p>Does not cause any RF activity and does not block.\n     * <p>Returns null if {@link MifareClassic} was not enumerated in {@link Tag#getTechList}.\n     * This indicates the tag is not MIFARE Classic compatible, or this Android\n     * device does not support MIFARE Classic.\n     *\n     * @param tag an MIFARE Classic compatible tag\n     * @return MIFARE Classic object\n     ",
    "links" : [ "android.nfc.tech.MifareClassic", "android.nfc.Tag#getTechList" ]
  }, {
    "name" : "public int getType()",
    "returnType" : "int",
    "comment" : "\n     * Return the type of this MIFARE Classic compatible tag.\n     * <p>One of {@link #TYPE_UNKNOWN}, {@link #TYPE_CLASSIC}, {@link #TYPE_PLUS} or\n     * {@link #TYPE_PRO}.\n     * <p>Does not cause any RF activity and does not block.\n     *\n     * @return type\n     ",
    "links" : [ "#TYPE_UNKNOWN", "#TYPE_PLUS", "#TYPE_CLASSIC", "#TYPE_PRO" ]
  }, {
    "name" : "public int getSize()",
    "returnType" : "int",
    "comment" : "\n     * Return the size of the tag in bytes\n     * <p>One of {@link #SIZE_MINI}, {@link #SIZE_1K}, {@link #SIZE_2K}, {@link #SIZE_4K}.\n     * These constants are equal to their respective size in bytes.\n     * <p>Does not cause any RF activity and does not block.\n     * @return size in bytes\n     ",
    "links" : [ "#SIZE_1K", "#SIZE_2K", "#SIZE_4K", "#SIZE_MINI" ]
  }, {
    "name" : "public boolean isEmulated()",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if the tag is emulated, determined at discovery time.\n     * These are actually smart-cards that emulate a MIFARE Classic interface.\n     * They can be treated identically to a MIFARE Classic tag.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getSectorCount()",
    "returnType" : "int",
    "comment" : "\n     * Return the number of MIFARE Classic sectors.\n     * <p>Does not cause any RF activity and does not block.\n     * @return number of sectors\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getBlockCount()",
    "returnType" : "int",
    "comment" : "\n     * Return the total number of MIFARE Classic blocks.\n     * <p>Does not cause any RF activity and does not block.\n     * @return total number of blocks\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getBlockCountInSector(int sectorIndex)",
    "returnType" : "int",
    "comment" : "\n     * Return the number of blocks in the given sector.\n     * <p>Does not cause any RF activity and does not block.\n     *\n     * @param sectorIndex index of sector, starting from 0\n     * @return number of blocks in the sector\n     ",
    "links" : [ ]
  }, {
    "name" : "public int blockToSector(int blockIndex)",
    "returnType" : "int",
    "comment" : "\n     * Return the sector that contains a given block.\n     * <p>Does not cause any RF activity and does not block.\n     *\n     * @param blockIndex index of block to lookup, starting from 0\n     * @return sector index that contains the block\n     ",
    "links" : [ ]
  }, {
    "name" : "public int sectorToBlock(int sectorIndex)",
    "returnType" : "int",
    "comment" : "\n     * Return the first block of a given sector.\n     * <p>Does not cause any RF activity and does not block.\n     *\n     * @param sectorIndex index of sector to lookup, starting from 0\n     * @return block index of first block in sector\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean authenticateSectorWithKeyA(int sectorIndex, byte[] key) throws IOException",
    "returnType" : "boolean",
    "comment" : "\n     * Authenticate a sector with key A.\n     *\n     * <p>Successful authentication of a sector with key A enables other\n     * I/O operations on that sector. The set of operations granted by key A\n     * key depends on the ACL bits set in that sector. For more information\n     * see the MIFARE Classic specification on <a href=\"http://www.nxp.com\">http://www.nxp.com</a>.\n     *\n     * <p>A failed authentication attempt causes an implicit reconnection to the\n     * tag, so authentication to other sectors will be lost.\n     *\n     * <p>This is an I/O operation and will block until complete. It must\n     * not be called from the main application thread. A blocked call will be canceled with\n     * {@link IOException} if {@link #close} is called from another thread.\n     *\n     * <p class=\"note\">Requires the {@link android.Manifest.permission#NFC} permission.\n     *\n     * @param sectorIndex index of sector to authenticate, starting from 0\n     * @param key 6-byte authentication key\n     * @return true on success, false on authentication failure\n     * @throws TagLostException if the tag leaves the field\n     * @throws IOException if there is an I/O failure, or the operation is canceled\n     ",
    "links" : [ "android.Manifest.permission#NFC", "java.io.IOException", "#close" ]
  }, {
    "name" : "public boolean authenticateSectorWithKeyB(int sectorIndex, byte[] key) throws IOException",
    "returnType" : "boolean",
    "comment" : "\n     * Authenticate a sector with key B.\n     *\n     * <p>Successful authentication of a sector with key B enables other\n     * I/O operations on that sector. The set of operations granted by key B\n     * depends on the ACL bits set in that sector. For more information\n     * see the MIFARE Classic specification on <a href=\"http://www.nxp.com\">http://www.nxp.com</a>.\n     *\n     * <p>A failed authentication attempt causes an implicit reconnection to the\n     * tag, so authentication to other sectors will be lost.\n     *\n     * <p>This is an I/O operation and will block until complete. It must\n     * not be called from the main application thread. A blocked call will be canceled with\n     * {@link IOException} if {@link #close} is called from another thread.\n     *\n     * <p class=\"note\">Requires the {@link android.Manifest.permission#NFC} permission.\n     *\n     * @param sectorIndex index of sector to authenticate, starting from 0\n     * @param key 6-byte authentication key\n     * @return true on success, false on authentication failure\n     * @throws TagLostException if the tag leaves the field\n     * @throws IOException if there is an I/O failure, or the operation is canceled\n     ",
    "links" : [ "android.Manifest.permission#NFC", "java.io.IOException", "#close" ]
  }, {
    "name" : "private boolean authenticate(int sector, byte[] key, boolean keyA) throws IOException",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public byte[] readBlock(int blockIndex) throws IOException",
    "returnType" : "byte[]",
    "comment" : "\n     * Read 16-byte block.\n     *\n     * <p>This is an I/O operation and will block until complete. It must\n     * not be called from the main application thread. A blocked call will be canceled with\n     * {@link IOException} if {@link #close} is called from another thread.\n     *\n     * <p class=\"note\">Requires the {@link android.Manifest.permission#NFC} permission.\n     *\n     * @param blockIndex index of block to read, starting from 0\n     * @return 16 byte block\n     * @throws TagLostException if the tag leaves the field\n     * @throws IOException if there is an I/O failure, or the operation is canceled\n     ",
    "links" : [ "android.Manifest.permission#NFC", "java.io.IOException", "#close" ]
  }, {
    "name" : "public void writeBlock(int blockIndex, byte[] data) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Write 16-byte block.\n     *\n     * <p>This is an I/O operation and will block until complete. It must\n     * not be called from the main application thread. A blocked call will be canceled with\n     * {@link IOException} if {@link #close} is called from another thread.\n     *\n     * <p class=\"note\">Requires the {@link android.Manifest.permission#NFC} permission.\n     *\n     * @param blockIndex index of block to write, starting from 0\n     * @param data 16 bytes of data to write\n     * @throws TagLostException if the tag leaves the field\n     * @throws IOException if there is an I/O failure, or the operation is canceled\n     ",
    "links" : [ "android.Manifest.permission#NFC", "java.io.IOException", "#close" ]
  }, {
    "name" : "public void increment(int blockIndex, int value) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Increment a value block, storing the result in the temporary block on the tag.\n     *\n     * <p>This is an I/O operation and will block until complete. It must\n     * not be called from the main application thread. A blocked call will be canceled with\n     * {@link IOException} if {@link #close} is called from another thread.\n     *\n     * <p class=\"note\">Requires the {@link android.Manifest.permission#NFC} permission.\n     *\n     * @param blockIndex index of block to increment, starting from 0\n     * @param value non-negative to increment by\n     * @throws TagLostException if the tag leaves the field\n     * @throws IOException if there is an I/O failure, or the operation is canceled\n     ",
    "links" : [ "android.Manifest.permission#NFC", "java.io.IOException", "#close" ]
  }, {
    "name" : "public void decrement(int blockIndex, int value) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Decrement a value block, storing the result in the temporary block on the tag.\n     *\n     * <p>This is an I/O operation and will block until complete. It must\n     * not be called from the main application thread. A blocked call will be canceled with\n     * {@link IOException} if {@link #close} is called from another thread.\n     *\n     * <p class=\"note\">Requires the {@link android.Manifest.permission#NFC} permission.\n     *\n     * @param blockIndex index of block to decrement, starting from 0\n     * @param value non-negative to decrement by\n     * @throws TagLostException if the tag leaves the field\n     * @throws IOException if there is an I/O failure, or the operation is canceled\n     ",
    "links" : [ "android.Manifest.permission#NFC", "java.io.IOException", "#close" ]
  }, {
    "name" : "public void transfer(int blockIndex) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Copy from the temporary block to a value block.\n     *\n     * <p>This is an I/O operation and will block until complete. It must\n     * not be called from the main application thread. A blocked call will be canceled with\n     * {@link IOException} if {@link #close} is called from another thread.\n     *\n     * <p class=\"note\">Requires the {@link android.Manifest.permission#NFC} permission.\n     *\n     * @param blockIndex index of block to copy to\n     * @throws TagLostException if the tag leaves the field\n     * @throws IOException if there is an I/O failure, or the operation is canceled\n     ",
    "links" : [ "android.Manifest.permission#NFC", "java.io.IOException", "#close" ]
  }, {
    "name" : "public void restore(int blockIndex) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Copy from a value block to the temporary block.\n     *\n     * <p>This is an I/O operation and will block until complete. It must\n     * not be called from the main application thread. A blocked call will be canceled with\n     * {@link IOException} if {@link #close} is called from another thread.\n     *\n     * <p class=\"note\">Requires the {@link android.Manifest.permission#NFC} permission.\n     *\n     * @param blockIndex index of block to copy from\n     * @throws TagLostException if the tag leaves the field\n     * @throws IOException if there is an I/O failure, or the operation is canceled\n     ",
    "links" : [ "android.Manifest.permission#NFC", "java.io.IOException", "#close" ]
  }, {
    "name" : "public byte[] transceive(byte[] data) throws IOException",
    "returnType" : "byte[]",
    "comment" : "\n     * Send raw NfcA data to a tag and receive the response.\n     *\n     * <p>This is equivalent to connecting to this tag via {@link NfcA}\n     * and calling {@link NfcA#transceive}. Note that all MIFARE Classic\n     * tags are based on {@link NfcA} technology.\n     *\n     * <p>Use {@link #getMaxTransceiveLength} to retrieve the maximum number of bytes\n     * that can be sent with {@link #transceive}.\n     *\n     * <p>This is an I/O operation and will block until complete. It must\n     * not be called from the main application thread. A blocked call will be canceled with\n     * {@link IOException} if {@link #close} is called from another thread.\n     *\n     * <p class=\"note\">Requires the {@link android.Manifest.permission#NFC} permission.\n     *\n     * @see NfcA#transceive\n     ",
    "links" : [ "android.Manifest.permission#NFC", "android.nfc.tech.NfcA", "#transceive", "android.nfc.tech.NfcA#transceive", "#getMaxTransceiveLength", "java.io.IOException", "#close" ]
  }, {
    "name" : "public int getMaxTransceiveLength()",
    "returnType" : "int",
    "comment" : "\n     * Return the maximum number of bytes that can be sent with {@link #transceive}.\n     * @return the maximum number of bytes that can be sent with {@link #transceive}.\n     ",
    "links" : [ "#transceive" ]
  }, {
    "name" : "public void setTimeout(int timeout)",
    "returnType" : "void",
    "comment" : "\n     * Set the {@link #transceive} timeout in milliseconds.\n     *\n     * <p>The timeout only applies to {@link #transceive} on this object,\n     * and is reset to a default value when {@link #close} is called.\n     *\n     * <p>Setting a longer timeout may be useful when performing\n     * transactions that require a long processing time on the tag\n     * such as key generation.\n     *\n     * <p class=\"note\">Requires the {@link android.Manifest.permission#NFC} permission.\n     *\n     * @param timeout timeout value in milliseconds\n     ",
    "links" : [ "android.Manifest.permission#NFC", "#transceive", "#close" ]
  }, {
    "name" : "public int getTimeout()",
    "returnType" : "int",
    "comment" : "\n     * Get the current {@link #transceive} timeout in milliseconds.\n     *\n     * <p class=\"note\">Requires the {@link android.Manifest.permission#NFC} permission.\n     *\n     * @return timeout value in milliseconds\n     ",
    "links" : [ "android.Manifest.permission#NFC", "#transceive" ]
  }, {
    "name" : "private static void validateSector(int sector)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void validateBlock(int block)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void validateValueOperand(int value)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "KEY_DEFAULT", "KEY_MIFARE_APPLICATION_DIRECTORY", "KEY_NFC_FORUM", "TYPE_UNKNOWN", "TYPE_CLASSIC", "TYPE_PLUS", "TYPE_PRO", "SIZE_1K", "SIZE_2K", "SIZE_4K", "SIZE_MINI", "BLOCK_SIZE", "MAX_BLOCK_COUNT", "MAX_SECTOR_COUNT", "mIsEmulated", "mType", "mSize" ],
  "methodNames" : [ "public static MifareClassic get(Tag tag)", "public int getType()", "public int getSize()", "public boolean isEmulated()", "public int getSectorCount()", "public int getBlockCount()", "public int getBlockCountInSector(int sectorIndex)", "public int blockToSector(int blockIndex)", "public int sectorToBlock(int sectorIndex)", "public boolean authenticateSectorWithKeyA(int sectorIndex, byte[] key) throws IOException", "public boolean authenticateSectorWithKeyB(int sectorIndex, byte[] key) throws IOException", "private boolean authenticate(int sector, byte[] key, boolean keyA) throws IOException", "public byte[] readBlock(int blockIndex) throws IOException", "public void writeBlock(int blockIndex, byte[] data) throws IOException", "public void increment(int blockIndex, int value) throws IOException", "public void decrement(int blockIndex, int value) throws IOException", "public void transfer(int blockIndex) throws IOException", "public void restore(int blockIndex) throws IOException", "public byte[] transceive(byte[] data) throws IOException", "public int getMaxTransceiveLength()", "public void setTimeout(int timeout)", "public int getTimeout()", "private static void validateSector(int sector)", "private static void validateBlock(int block)", "private static void validateValueOperand(int value)" ]
}