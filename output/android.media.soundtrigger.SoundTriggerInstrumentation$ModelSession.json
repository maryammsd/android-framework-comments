{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/soundtrigger/SoundTriggerInstrumentation.java",
  "packageName" : "android.media.soundtrigger",
  "className" : "ModelSession",
  "comment" : "\n     * Session associated with a loaded model in the fake STHAL.\n     * Can be used to query details about the loaded model, register a callback for future\n     * model events, or trigger HAL events associated with a loaded model.\n     * This session is invalid once the model is unloaded, caused by a\n     * {@link ModelSession#triggerUnloadModel()},\n     * the client unloading recognition, or if a {@link GlobalCallback#onRestarted()} is\n     * received.\n     * Further injections on an invalidated session will not be respected, and no future\n     * callbacks will be delivered.\n     * @hide\n     ",
  "links" : [ "#onRestarted()", "#triggerUnloadModel()" ],
  "variables" : [ {
    "name" : "mModel",
    "type" : "SoundTriggerManager.Model",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPhrases",
    "type" : "SoundTrigger.Keyphrase[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInjectModelEvent",
    "type" : "IInjectModelEvent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mModelCallback",
    "type" : "ModelCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mModelExecutor",
    "type" : "Executor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDroppedConsumerList",
    "type" : "List<Consumer<ModelCallback>>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void triggerUnloadModel()",
    "returnType" : "void",
    "comment" : "\n         * Trigger the HAL to preemptively unload the model associated with this session.\n         * Typically occurs when a higher priority model is loaded which utilizes the same\n         * resources.\n         ",
    "links" : [ ]
  }, {
    "name" : "public SoundTriggerManager.Model getSoundModel()",
    "returnType" : "SoundTriggerManager.Model",
    "comment" : "\n         * Get the {@link SoundTriggerManager.Model} associated with this session.\n         * @return - The model associated with this session.\n         ",
    "links" : [ "SoundTriggerManager.Model" ]
  }, {
    "name" : "public List<SoundTrigger.Keyphrase> getPhrases()",
    "returnType" : "List<SoundTrigger.Keyphrase>",
    "comment" : "\n         * Get the list of {@link SoundTrigger.Keyphrase} associated with this session.\n         * @return - The keyphrases associated with this session.\n         ",
    "links" : [ "SoundTrigger.Keyphrase" ]
  }, {
    "name" : "public boolean isKeyphrase()",
    "returnType" : "boolean",
    "comment" : "\n         * Get whether this model is of keyphrase type.\n         * @return - true if the model is a keyphrase model, false otherwise\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setModelCallback(@NonNull @CallbackExecutor Executor executor, @NonNull ModelCallback callback)",
    "returnType" : "void",
    "comment" : "\n         * Registers the model callback associated with this session. Events associated\n         * with this model session will be reported via this callback.\n         * See {@link ModelCallback}\n         * @param executor - Executor which the callback is dispatched on\n         * @param callback - Model callback for reporting model session events.\n         ",
    "links" : [ "ModelCallback" ]
  }, {
    "name" : "public void clearModelCallback()",
    "returnType" : "void",
    "comment" : "\n         * Clear the model callback associated with this session, if any has been\n         * set by {@link #setModelCallback(Executor, ModelCallback)}.\n         ",
    "links" : [ "#setModelCallback(Executor" ]
  }, {
    "name" : "private void wrap(Consumer<ModelCallback> consumer)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void triggerUnloadModel()", "public SoundTriggerManager.Model getSoundModel()", "public List<SoundTrigger.Keyphrase> getPhrases()", "public boolean isKeyphrase()", "public void setModelCallback(@NonNull @CallbackExecutor Executor executor, @NonNull ModelCallback callback)", "public void clearModelCallback()", "private void wrap(Consumer<ModelCallback> consumer)" ],
  "variableNames" : [ "mModel", "mPhrases", "mInjectModelEvent", "mModelCallback", "mModelExecutor", "mDroppedConsumerList" ]
}