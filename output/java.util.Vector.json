{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/Vector.java",
  "packageName" : "java.util",
  "className" : "Vector",
  "comment" : "\n * The {@code Vector} class implements a growable array of\n * objects. Like an array, it contains components that can be\n * accessed using an integer index. However, the size of a\n * {@code Vector} can grow or shrink as needed to accommodate\n * adding and removing items after the {@code Vector} has been created.\n *\n * <p>Each vector tries to optimize storage management by maintaining a\n * {@code capacity} and a {@code capacityIncrement}. The\n * {@code capacity} is always at least as large as the vector\n * size; it is usually larger because as components are added to the\n * vector, the vector's storage increases in chunks the size of\n * {@code capacityIncrement}. An application can increase the\n * capacity of a vector before inserting a large number of\n * components; this reduces the amount of incremental reallocation.\n *\n * <p id=\"fail-fast\">\n * The iterators returned by this class's {@link #iterator() iterator} and\n * {@link #listIterator(int) listIterator} methods are <em>fail-fast</em>:\n * if the vector is structurally modified at any time after the iterator is\n * created, in any way except through the iterator's own\n * {@link ListIterator#remove() remove} or\n * {@link ListIterator#add(Object) add} methods, the iterator will throw a\n * {@link ConcurrentModificationException}.  Thus, in the face of\n * concurrent modification, the iterator fails quickly and cleanly, rather\n * than risking arbitrary, non-deterministic behavior at an undetermined\n * time in the future.  The {@link Enumeration Enumerations} returned by\n * the {@link #elements() elements} method are <em>not</em> fail-fast; if the\n * Vector is structurally modified at any time after the enumeration is\n * created then the results of enumerating are undefined.\n *\n * <p>Note that the fail-fast behavior of an iterator cannot be guaranteed\n * as it is, generally speaking, impossible to make any hard guarantees in the\n * presence of unsynchronized concurrent modification.  Fail-fast iterators\n * throw {@code ConcurrentModificationException} on a best-effort basis.\n * Therefore, it would be wrong to write a program that depended on this\n * exception for its correctness:  <i>the fail-fast behavior of iterators\n * should be used only to detect bugs.</i>\n *\n * <p>As of the Java 2 platform v1.2, this class was retrofitted to\n * implement the {@link List} interface, making it a member of the\n * <a href=\"{@docRoot}/java.base/java/util/package-summary.html#CollectionsFramework\">\n * Java Collections Framework</a>.  Unlike the new collection\n * implementations, {@code Vector} is synchronized.  If a thread-safe\n * implementation is not needed, it is recommended to use {@link\n * ArrayList} in place of {@code Vector}.\n *\n * @param <E> Type of component elements\n *\n * @author  Lee Boynton\n * @author  Jonathan Payne\n * @see Collection\n * @see LinkedList\n * @since   1.0\n ",
  "links" : [ "java.util.ListIterator#remove()", "#iterator()", "#listIterator(int)", "java.util.List", "java.util.ListIterator#add(Object)", "#elements()", "java.util.Enumeration", "java.util.ConcurrentModificationException", "java.util.ArrayList" ],
  "variables" : [ {
    "name" : "elementData",
    "type" : "Object[]",
    "comment" : "\n     * The array buffer into which the components of the vector are\n     * stored. The capacity of the vector is the length of this array buffer,\n     * and is at least large enough to contain all the vector's elements.\n     *\n     * <p>Any array elements following the last element in the Vector are null.\n     *\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "elementCount",
    "type" : "int",
    "comment" : "\n     * The number of valid components in this {@code Vector} object.\n     * Components {@code elementData[0]} through\n     * {@code elementData[elementCount-1]} are the actual items.\n     *\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "capacityIncrement",
    "type" : "int",
    "comment" : "\n     * The amount by which the capacity of the vector is automatically\n     * incremented when its size becomes greater than its capacity.  If\n     * the capacity increment is less than or equal to zero, the capacity\n     * of the vector is doubled each time it needs to grow.\n     *\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : " use serialVersionUID from JDK 1.0.2 for interoperability ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public synchronized void copyInto(Object[] anArray)",
    "returnType" : "void",
    "comment" : "\n     * Copies the components of this vector into the specified array.\n     * The item at index {@code k} in this vector is copied into\n     * component {@code k} of {@code anArray}.\n     *\n     * @param  anArray the array into which the components get copied\n     * @throws NullPointerException if the given array is null\n     * @throws IndexOutOfBoundsException if the specified array is not\n     *         large enough to hold all the components of this vector\n     * @throws ArrayStoreException if a component of this vector is not of\n     *         a runtime type that can be stored in the specified array\n     * @see #toArray(Object[])\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void trimToSize()",
    "returnType" : "void",
    "comment" : "\n     * Trims the capacity of this vector to be the vector's current\n     * size. If the capacity of this vector is larger than its current\n     * size, then the capacity is changed to equal the size by replacing\n     * its internal data array, kept in the field {@code elementData},\n     * with a smaller one. An application can use this operation to\n     * minimize the storage of a vector.\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void ensureCapacity(int minCapacity)",
    "returnType" : "void",
    "comment" : "\n     * Increases the capacity of this vector, if necessary, to ensure\n     * that it can hold at least the number of components specified by\n     * the minimum capacity argument.\n     *\n     * <p>If the current capacity of this vector is less than\n     * {@code minCapacity}, then its capacity is increased by replacing its\n     * internal data array, kept in the field {@code elementData}, with a\n     * larger one.  The size of the new data array will be the old size plus\n     * {@code capacityIncrement}, unless the value of\n     * {@code capacityIncrement} is less than or equal to zero, in which case\n     * the new capacity will be twice the old capacity; but if this new size\n     * is still smaller than {@code minCapacity}, then the new capacity will\n     * be {@code minCapacity}.\n     *\n     * @param minCapacity the desired minimum capacity\n     ",
    "links" : [ ]
  }, {
    "name" : "private Object[] grow(int minCapacity)",
    "returnType" : "Object[]",
    "comment" : "\n     * Increases the capacity to ensure that it can hold at least the\n     * number of elements specified by the minimum capacity argument.\n     *\n     * @param minCapacity the desired minimum capacity\n     * @throws OutOfMemoryError if minCapacity is less than zero\n     ",
    "links" : [ ]
  }, {
    "name" : "private Object[] grow()",
    "returnType" : "Object[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public synchronized void setSize(int newSize)",
    "returnType" : "void",
    "comment" : "\n     * Sets the size of this vector. If the new size is greater than the\n     * current size, new {@code null} items are added to the end of\n     * the vector. If the new size is less than the current size, all\n     * components at index {@code newSize} and greater are discarded.\n     *\n     * @param  newSize   the new size of this vector\n     * @throws ArrayIndexOutOfBoundsException if the new size is negative\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized int capacity()",
    "returnType" : "int",
    "comment" : "\n     * Returns the current capacity of this vector.\n     *\n     * @return  the current capacity (the length of its internal\n     *          data array, kept in the field {@code elementData}\n     *          of this vector)\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized int size()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of components in this vector.\n     *\n     * @return  the number of components in this vector\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized boolean isEmpty()",
    "returnType" : "boolean",
    "comment" : "\n     * Tests if this vector has no components.\n     *\n     * @return  {@code true} if and only if this vector has\n     *          no components, that is, its size is zero;\n     *          {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Enumeration<E> elements()",
    "returnType" : "Enumeration<E>",
    "comment" : "\n     * Returns an enumeration of the components of this vector. The\n     * returned {@code Enumeration} object will generate all items in\n     * this vector. The first item generated is the item at index {@code 0},\n     * then the item at index {@code 1}, and so on. If the vector is\n     * structurally modified while enumerating over the elements then the\n     * results of enumerating are undefined.\n     *\n     * @return  an enumeration of the components of this vector\n     * @see     Iterator\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean contains(Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if this vector contains the specified element.\n     * More formally, returns {@code true} if and only if this vector\n     * contains at least one element {@code e} such that\n     * {@code Objects.equals(o, e)}.\n     *\n     * @param o element whose presence in this vector is to be tested\n     * @return {@code true} if this vector contains the specified element\n     ",
    "links" : [ ]
  }, {
    "name" : "public int indexOf(Object o)",
    "returnType" : "int",
    "comment" : "\n     * Returns the index of the first occurrence of the specified element\n     * in this vector, or -1 if this vector does not contain the element.\n     * More formally, returns the lowest index {@code i} such that\n     * {@code Objects.equals(o, get(i))},\n     * or -1 if there is no such index.\n     *\n     * @param o element to search for\n     * @return the index of the first occurrence of the specified element in\n     *         this vector, or -1 if this vector does not contain the element\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized int indexOf(Object o, int index)",
    "returnType" : "int",
    "comment" : "\n     * Returns the index of the first occurrence of the specified element in\n     * this vector, searching forwards from {@code index}, or returns -1 if\n     * the element is not found.\n     * More formally, returns the lowest index {@code i} such that\n     * {@code (i >= index && Objects.equals(o, get(i)))},\n     * or -1 if there is no such index.\n     *\n     * @param o element to search for\n     * @param index index to start searching from\n     * @return the index of the first occurrence of the element in\n     *         this vector at position {@code index} or later in the vector;\n     *         {@code -1} if the element is not found.\n     * @throws IndexOutOfBoundsException if the specified index is negative\n     * @see     Object#equals(Object)\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized int lastIndexOf(Object o)",
    "returnType" : "int",
    "comment" : "\n     * Returns the index of the last occurrence of the specified element\n     * in this vector, or -1 if this vector does not contain the element.\n     * More formally, returns the highest index {@code i} such that\n     * {@code Objects.equals(o, get(i))},\n     * or -1 if there is no such index.\n     *\n     * @param o element to search for\n     * @return the index of the last occurrence of the specified element in\n     *         this vector, or -1 if this vector does not contain the element\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized int lastIndexOf(Object o, int index)",
    "returnType" : "int",
    "comment" : "\n     * Returns the index of the last occurrence of the specified element in\n     * this vector, searching backwards from {@code index}, or returns -1 if\n     * the element is not found.\n     * More formally, returns the highest index {@code i} such that\n     * {@code (i <= index && Objects.equals(o, get(i)))},\n     * or -1 if there is no such index.\n     *\n     * @param o element to search for\n     * @param index index to start searching backwards from\n     * @return the index of the last occurrence of the element at position\n     *         less than or equal to {@code index} in this vector;\n     *         -1 if the element is not found.\n     * @throws IndexOutOfBoundsException if the specified index is greater\n     *         than or equal to the current size of this vector\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized E elementAt(int index)",
    "returnType" : "E",
    "comment" : "\n     * Returns the component at the specified index.\n     *\n     * <p>This method is identical in functionality to the {@link #get(int)}\n     * method (which is part of the {@link List} interface).\n     *\n     * @param      index   an index into this vector\n     * @return     the component at the specified index\n     * @throws ArrayIndexOutOfBoundsException if the index is out of range\n     *         ({@code index < 0 || index >= size()})\n     ",
    "links" : [ "java.util.List", "#get(int)" ]
  }, {
    "name" : "public synchronized E firstElement()",
    "returnType" : "E",
    "comment" : "\n     * Returns the first component (the item at index {@code 0}) of\n     * this vector.\n     *\n     * @return     the first component of this vector\n     * @throws NoSuchElementException if this vector has no components\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized E lastElement()",
    "returnType" : "E",
    "comment" : "\n     * Returns the last component of the vector.\n     *\n     * @return  the last component of the vector, i.e., the component at index\n     *          {@code size() - 1}\n     * @throws NoSuchElementException if this vector is empty\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void setElementAt(E obj, int index)",
    "returnType" : "void",
    "comment" : "\n     * Sets the component at the specified {@code index} of this\n     * vector to be the specified object. The previous component at that\n     * position is discarded.\n     *\n     * <p>The index must be a value greater than or equal to {@code 0}\n     * and less than the current size of the vector.\n     *\n     * <p>This method is identical in functionality to the\n     * {@link #set(int, Object) set(int, E)}\n     * method (which is part of the {@link List} interface). Note that the\n     * {@code set} method reverses the order of the parameters, to more closely\n     * match array usage.  Note also that the {@code set} method returns the\n     * old value that was stored at the specified position.\n     *\n     * @param      obj     what the component is to be set to\n     * @param      index   the specified index\n     * @throws ArrayIndexOutOfBoundsException if the index is out of range\n     *         ({@code index < 0 || index >= size()})\n     ",
    "links" : [ "java.util.List", "#set(int" ]
  }, {
    "name" : "public synchronized void removeElementAt(int index)",
    "returnType" : "void",
    "comment" : "\n     * Deletes the component at the specified index. Each component in\n     * this vector with an index greater or equal to the specified\n     * {@code index} is shifted downward to have an index one\n     * smaller than the value it had previously. The size of this vector\n     * is decreased by {@code 1}.\n     *\n     * <p>The index must be a value greater than or equal to {@code 0}\n     * and less than the current size of the vector.\n     *\n     * <p>This method is identical in functionality to the {@link #remove(int)}\n     * method (which is part of the {@link List} interface).  Note that the\n     * {@code remove} method returns the old value that was stored at the\n     * specified position.\n     *\n     * @param      index   the index of the object to remove\n     * @throws ArrayIndexOutOfBoundsException if the index is out of range\n     *         ({@code index < 0 || index >= size()})\n     ",
    "links" : [ "java.util.List", "#remove(int)" ]
  }, {
    "name" : "public synchronized void insertElementAt(E obj, int index)",
    "returnType" : "void",
    "comment" : "\n     * Inserts the specified object as a component in this vector at the\n     * specified {@code index}. Each component in this vector with\n     * an index greater or equal to the specified {@code index} is\n     * shifted upward to have an index one greater than the value it had\n     * previously.\n     *\n     * <p>The index must be a value greater than or equal to {@code 0}\n     * and less than or equal to the current size of the vector. (If the\n     * index is equal to the current size of the vector, the new element\n     * is appended to the Vector.)\n     *\n     * <p>This method is identical in functionality to the\n     * {@link #add(int, Object) add(int, E)}\n     * method (which is part of the {@link List} interface).  Note that the\n     * {@code add} method reverses the order of the parameters, to more closely\n     * match array usage.\n     *\n     * @param      obj     the component to insert\n     * @param      index   where to insert the new component\n     * @throws ArrayIndexOutOfBoundsException if the index is out of range\n     *         ({@code index < 0 || index > size()})\n     ",
    "links" : [ "java.util.List", "#add(int" ]
  }, {
    "name" : "public synchronized void addElement(E obj)",
    "returnType" : "void",
    "comment" : "\n     * Adds the specified component to the end of this vector,\n     * increasing its size by one. The capacity of this vector is\n     * increased if its size becomes greater than its capacity.\n     *\n     * <p>This method is identical in functionality to the\n     * {@link #add(Object) add(E)}\n     * method (which is part of the {@link List} interface).\n     *\n     * @param   obj   the component to be added\n     ",
    "links" : [ "java.util.List", "#add(Object)" ]
  }, {
    "name" : "public synchronized boolean removeElement(Object obj)",
    "returnType" : "boolean",
    "comment" : "\n     * Removes the first (lowest-indexed) occurrence of the argument\n     * from this vector. If the object is found in this vector, each\n     * component in the vector with an index greater or equal to the\n     * object's index is shifted downward to have an index one smaller\n     * than the value it had previously.\n     *\n     * <p>This method is identical in functionality to the\n     * {@link #remove(Object)} method (which is part of the\n     * {@link List} interface).\n     *\n     * @param   obj   the component to be removed\n     * @return  {@code true} if the argument was a component of this\n     *          vector; {@code false} otherwise.\n     ",
    "links" : [ "java.util.List", "#remove(Object)" ]
  }, {
    "name" : "public synchronized void removeAllElements()",
    "returnType" : "void",
    "comment" : "\n     * Removes all components from this vector and sets its size to zero.\n     *\n     * <p>This method is identical in functionality to the {@link #clear}\n     * method (which is part of the {@link List} interface).\n     ",
    "links" : [ "java.util.List", "#clear" ]
  }, {
    "name" : "public synchronized Object clone()",
    "returnType" : "Object",
    "comment" : "\n     * Returns a clone of this vector. The copy will contain a\n     * reference to a clone of the internal data array, not a reference\n     * to the original internal data array of this {@code Vector} object.\n     *\n     * @return  a clone of this vector\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized Object[] toArray()",
    "returnType" : "Object[]",
    "comment" : "\n     * Returns an array containing all of the elements in this Vector\n     * in the correct order.\n     *\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized T[] toArray(T[] a)",
    "returnType" : "T[]",
    "comment" : "\n     * Returns an array containing all of the elements in this Vector in the\n     * correct order; the runtime type of the returned array is that of the\n     * specified array.  If the Vector fits in the specified array, it is\n     * returned therein.  Otherwise, a new array is allocated with the runtime\n     * type of the specified array and the size of this Vector.\n     *\n     * <p>If the Vector fits in the specified array with room to spare\n     * (i.e., the array has more elements than the Vector),\n     * the element in the array immediately following the end of the\n     * Vector is set to null.  (This is useful in determining the length\n     * of the Vector <em>only</em> if the caller knows that the Vector\n     * does not contain any null elements.)\n     *\n     * @param <T> type of array elements. The same type as {@code <E>} or a\n     * supertype of {@code <E>}.\n     * @param a the array into which the elements of the Vector are to\n     *          be stored, if it is big enough; otherwise, a new array of the\n     *          same runtime type is allocated for this purpose.\n     * @return an array containing the elements of the Vector\n     * @throws ArrayStoreException if the runtime type of a, {@code <T>}, is not\n     * a supertype of the runtime type, {@code <E>}, of every element in this\n     * Vector\n     * @throws NullPointerException if the given array is null\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " E elementData(int index)",
    "returnType" : "E",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static E elementAt(Object[] es, int index)",
    "returnType" : "E",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public synchronized E get(int index)",
    "returnType" : "E",
    "comment" : "\n     * Returns the element at the specified position in this Vector.\n     *\n     * @param index index of the element to return\n     * @return object at the specified index\n     * @throws ArrayIndexOutOfBoundsException if the index is out of range\n     *            ({@code index < 0 || index >= size()})\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized E set(int index, E element)",
    "returnType" : "E",
    "comment" : "\n     * Replaces the element at the specified position in this Vector with the\n     * specified element.\n     *\n     * @param index index of the element to replace\n     * @param element element to be stored at the specified position\n     * @return the element previously at the specified position\n     * @throws ArrayIndexOutOfBoundsException if the index is out of range\n     *         ({@code index < 0 || index >= size()})\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : "private void add(E e, Object[] elementData, int s)",
    "returnType" : "void",
    "comment" : "\n     * This helper method split out from add(E) to keep method\n     * bytecode size under 35 (the -XX:MaxInlineSize default value),\n     * which helps when add(E) is called in a C1-compiled loop.\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized boolean add(E e)",
    "returnType" : "boolean",
    "comment" : "\n     * Appends the specified element to the end of this Vector.\n     *\n     * @param e element to be appended to this Vector\n     * @return {@code true} (as specified by {@link Collection#add})\n     * @since 1.2\n     ",
    "links" : [ "java.util.Collection#add" ]
  }, {
    "name" : "public boolean remove(Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * Removes the first occurrence of the specified element in this Vector\n     * If the Vector does not contain the element, it is unchanged.  More\n     * formally, removes the element with the lowest index i such that\n     * {@code Objects.equals(o, get(i))} (if such\n     * an element exists).\n     *\n     * @param o element to be removed from this Vector, if present\n     * @return true if the Vector contained the specified element\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : "public void add(int index, E element)",
    "returnType" : "void",
    "comment" : "\n     * Inserts the specified element at the specified position in this Vector.\n     * Shifts the element currently at that position (if any) and any\n     * subsequent elements to the right (adds one to their indices).\n     *\n     * @param index index at which the specified element is to be inserted\n     * @param element element to be inserted\n     * @throws ArrayIndexOutOfBoundsException if the index is out of range\n     *         ({@code index < 0 || index > size()})\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized E remove(int index)",
    "returnType" : "E",
    "comment" : "\n     * Removes the element at the specified position in this Vector.\n     * Shifts any subsequent elements to the left (subtracts one from their\n     * indices).  Returns the element that was removed from the Vector.\n     *\n     * @param index the index of the element to be removed\n     * @return element that was removed\n     * @throws ArrayIndexOutOfBoundsException if the index is out of range\n     *         ({@code index < 0 || index >= size()})\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clear()",
    "returnType" : "void",
    "comment" : "\n     * Removes all of the elements from this Vector.  The Vector will\n     * be empty after this call returns (unless it throws an exception).\n     *\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized boolean containsAll(Collection<?> c)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this Vector contains all of the elements in the\n     * specified Collection.\n     *\n     * @param   c a collection whose elements will be tested for containment\n     *          in this Vector\n     * @return true if this Vector contains all of the elements in the\n     *         specified collection\n     * @throws NullPointerException if the specified collection is null\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean addAll(Collection<? extends E> c)",
    "returnType" : "boolean",
    "comment" : "\n     * Appends all of the elements in the specified Collection to the end of\n     * this Vector, in the order that they are returned by the specified\n     * Collection's Iterator.  The behavior of this operation is undefined if\n     * the specified Collection is modified while the operation is in progress.\n     * (This implies that the behavior of this call is undefined if the\n     * specified Collection is this Vector, and this Vector is nonempty.)\n     *\n     * @param c elements to be inserted into this Vector\n     * @return {@code true} if this Vector changed as a result of the call\n     * @throws NullPointerException if the specified collection is null\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean removeAll(Collection<?> c)",
    "returnType" : "boolean",
    "comment" : "\n     * Removes from this Vector all of its elements that are contained in the\n     * specified Collection.\n     *\n     * @param c a collection of elements to be removed from the Vector\n     * @return true if this Vector changed as a result of the call\n     * @throws ClassCastException if the types of one or more elements\n     *         in this vector are incompatible with the specified\n     *         collection\n     * (<a href=\"Collection.html#optional-restrictions\">optional</a>)\n     * @throws NullPointerException if this vector contains one or more null\n     *         elements and the specified collection does not support null\n     *         elements\n     * (<a href=\"Collection.html#optional-restrictions\">optional</a>),\n     *         or if the specified collection is null\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean retainAll(Collection<?> c)",
    "returnType" : "boolean",
    "comment" : "\n     * Retains only the elements in this Vector that are contained in the\n     * specified Collection.  In other words, removes from this Vector all\n     * of its elements that are not contained in the specified Collection.\n     *\n     * @param c a collection of elements to be retained in this Vector\n     *          (all other elements are removed)\n     * @return true if this Vector changed as a result of the call\n     * @throws ClassCastException if the types of one or more elements\n     *         in this vector are incompatible with the specified\n     *         collection\n     * (<a href=\"Collection.html#optional-restrictions\">optional</a>)\n     * @throws NullPointerException if this vector contains one or more null\n     *         elements and the specified collection does not support null\n     *         elements\n     *         (<a href=\"Collection.html#optional-restrictions\">optional</a>),\n     *         or if the specified collection is null\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean removeIf(Predicate<? super E> filter)",
    "returnType" : "boolean",
    "comment" : "\n     * @throws NullPointerException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "private static long[] nBits(int n)",
    "returnType" : "long[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void setBit(long[] bits, int i)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isClear(long[] bits, int i)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private synchronized boolean bulkRemove(Predicate<? super E> filter)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public synchronized boolean addAll(int index, Collection<? extends E> c)",
    "returnType" : "boolean",
    "comment" : "\n     * Inserts all of the elements in the specified Collection into this\n     * Vector at the specified position.  Shifts the element currently at\n     * that position (if any) and any subsequent elements to the right\n     * (increases their indices).  The new elements will appear in the Vector\n     * in the order that they are returned by the specified Collection's\n     * iterator.\n     *\n     * @param index index at which to insert the first element from the\n     *              specified collection\n     * @param c elements to be inserted into this Vector\n     * @return {@code true} if this Vector changed as a result of the call\n     * @throws ArrayIndexOutOfBoundsException if the index is out of range\n     *         ({@code index < 0 || index > size()})\n     * @throws NullPointerException if the specified collection is null\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * Compares the specified Object with this Vector for equality.  Returns\n     * true if and only if the specified Object is also a List, both Lists\n     * have the same size, and all corresponding pairs of elements in the two\n     * Lists are <em>equal</em>.  (Two elements {@code e1} and\n     * {@code e2} are <em>equal</em> if {@code Objects.equals(e1, e2)}.)\n     * In other words, two Lists are defined to be\n     * equal if they contain the same elements in the same order.\n     *\n     * @param o the Object to be compared for equality with this Vector\n     * @return true if the specified Object is equal to this Vector\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Returns the hash code value for this Vector.\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a string representation of this Vector, containing\n     * the String representation of each element.\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized List<E> subList(int fromIndex, int toIndex)",
    "returnType" : "List<E>",
    "comment" : "\n     * Returns a view of the portion of this List between fromIndex,\n     * inclusive, and toIndex, exclusive.  (If fromIndex and toIndex are\n     * equal, the returned List is empty.)  The returned List is backed by this\n     * List, so changes in the returned List are reflected in this List, and\n     * vice-versa.  The returned List supports all of the optional List\n     * operations supported by this List.\n     *\n     * <p>This method eliminates the need for explicit range operations (of\n     * the sort that commonly exist for arrays).  Any operation that expects\n     * a List can be used as a range operation by operating on a subList view\n     * instead of a whole List.  For example, the following idiom\n     * removes a range of elements from a List:\n     * <pre>\n     *      list.subList(from, to).clear();\n     * </pre>\n     * Similar idioms may be constructed for indexOf and lastIndexOf,\n     * and all of the algorithms in the Collections class can be applied to\n     * a subList.\n     *\n     * <p>The semantics of the List returned by this method become undefined if\n     * the backing list (i.e., this List) is <i>structurally modified</i> in\n     * any way other than via the returned List.  (Structural modifications are\n     * those that change the size of the List, or otherwise perturb it in such\n     * a fashion that iterations in progress may yield incorrect results.)\n     *\n     * @param fromIndex low endpoint (inclusive) of the subList\n     * @param toIndex high endpoint (exclusive) of the subList\n     * @return a view of the specified range within this List\n     * @throws IndexOutOfBoundsException if an endpoint index value is out of range\n     *         {@code (fromIndex < 0 || toIndex > size)}\n     * @throws IllegalArgumentException if the endpoint indices are out of order\n     *         {@code (fromIndex > toIndex)}\n     ",
    "links" : [ ]
  }, {
    "name" : "protected synchronized void removeRange(int fromIndex, int toIndex)",
    "returnType" : "void",
    "comment" : "\n     * Removes from this list all of the elements whose index is between\n     * {@code fromIndex}, inclusive, and {@code toIndex}, exclusive.\n     * Shifts any succeeding elements to the left (reduces their index).\n     * This call shortens the list by {@code (toIndex - fromIndex)} elements.\n     * (If {@code toIndex==fromIndex}, this operation has no effect.)\n     ",
    "links" : [ ]
  }, {
    "name" : "private void shiftTailOverGap(Object[] es, int lo, int hi)",
    "returnType" : "void",
    "comment" : " Erases the gap from lo to hi, by sliding down following elements. ",
    "links" : [ ]
  }, {
    "name" : "private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException",
    "returnType" : "void",
    "comment" : "\n     * Loads a {@code Vector} instance from a stream\n     * (that is, deserializes it).\n     * This method performs checks to ensure the consistency\n     * of the fields.\n     *\n     * @param in the stream\n     * @throws java.io.IOException if an I/O error occurs\n     * @throws ClassNotFoundException if the stream contains data\n     *         of a non-existing class\n     ",
    "links" : [ ]
  }, {
    "name" : "private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException",
    "returnType" : "void",
    "comment" : "\n     * Saves the state of the {@code Vector} instance to a stream\n     * (that is, serializes it).\n     * This method performs synchronization to ensure the consistency\n     * of the serialized data.\n     *\n     * @param s the stream\n     * @throws java.io.IOException if an I/O error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized ListIterator<E> listIterator(int index)",
    "returnType" : "ListIterator<E>",
    "comment" : "\n     * Returns a list iterator over the elements in this list (in proper\n     * sequence), starting at the specified position in the list.\n     * The specified index indicates the first element that would be\n     * returned by an initial call to {@link ListIterator#next next}.\n     * An initial call to {@link ListIterator#previous previous} would\n     * return the element with the specified index minus one.\n     *\n     * <p>The returned list iterator is <a href=\"#fail-fast\"><i>fail-fast</i></a>.\n     *\n     * @throws IndexOutOfBoundsException {@inheritDoc}\n     ",
    "links" : [ "java.util.ListIterator#next", "java.util.ListIterator#previous" ]
  }, {
    "name" : "public synchronized ListIterator<E> listIterator()",
    "returnType" : "ListIterator<E>",
    "comment" : "\n     * Returns a list iterator over the elements in this list (in proper\n     * sequence).\n     *\n     * <p>The returned list iterator is <a href=\"#fail-fast\"><i>fail-fast</i></a>.\n     *\n     * @see #listIterator(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized Iterator<E> iterator()",
    "returnType" : "Iterator<E>",
    "comment" : "\n     * Returns an iterator over the elements in this list in proper sequence.\n     *\n     * <p>The returned iterator is <a href=\"#fail-fast\"><i>fail-fast</i></a>.\n     *\n     * @return an iterator over the elements in this list in proper sequence\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void forEach(Consumer<? super E> action)",
    "returnType" : "void",
    "comment" : "\n     * @throws NullPointerException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void replaceAll(UnaryOperator<E> operator)",
    "returnType" : "void",
    "comment" : "\n     * @throws NullPointerException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void sort(Comparator<? super E> c)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Spliterator<E> spliterator()",
    "returnType" : "Spliterator<E>",
    "comment" : "\n     * Creates a <em><a href=\"Spliterator.html#binding\">late-binding</a></em>\n     * and <em>fail-fast</em> {@link Spliterator} over the elements in this\n     * list.\n     *\n     * <p>The {@code Spliterator} reports {@link Spliterator#SIZED},\n     * {@link Spliterator#SUBSIZED}, and {@link Spliterator#ORDERED}.\n     * Overriding implementations should document the reporting of additional\n     * characteristic values.\n     *\n     * @return a {@code Spliterator} over the elements in this list\n     * @since 1.8\n     ",
    "links" : [ "java.util.Spliterator#SIZED", "java.util.Spliterator#SUBSIZED", "java.util.Spliterator", "java.util.Spliterator#ORDERED" ]
  }, {
    "name" : " void checkInvariants()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public synchronized void copyInto(Object[] anArray)", "public synchronized void trimToSize()", "public synchronized void ensureCapacity(int minCapacity)", "private Object[] grow(int minCapacity)", "private Object[] grow()", "public synchronized void setSize(int newSize)", "public synchronized int capacity()", "public synchronized int size()", "public synchronized boolean isEmpty()", "public Enumeration<E> elements()", "public boolean contains(Object o)", "public int indexOf(Object o)", "public synchronized int indexOf(Object o, int index)", "public synchronized int lastIndexOf(Object o)", "public synchronized int lastIndexOf(Object o, int index)", "public synchronized E elementAt(int index)", "public synchronized E firstElement()", "public synchronized E lastElement()", "public synchronized void setElementAt(E obj, int index)", "public synchronized void removeElementAt(int index)", "public synchronized void insertElementAt(E obj, int index)", "public synchronized void addElement(E obj)", "public synchronized boolean removeElement(Object obj)", "public synchronized void removeAllElements()", "public synchronized Object clone()", "public synchronized Object[] toArray()", "public synchronized T[] toArray(T[] a)", " E elementData(int index)", " static E elementAt(Object[] es, int index)", "public synchronized E get(int index)", "public synchronized E set(int index, E element)", "private void add(E e, Object[] elementData, int s)", "public synchronized boolean add(E e)", "public boolean remove(Object o)", "public void add(int index, E element)", "public synchronized E remove(int index)", "public void clear()", "public synchronized boolean containsAll(Collection<?> c)", "public boolean addAll(Collection<? extends E> c)", "public boolean removeAll(Collection<?> c)", "public boolean retainAll(Collection<?> c)", "public boolean removeIf(Predicate<? super E> filter)", "private static long[] nBits(int n)", "private static void setBit(long[] bits, int i)", "private static boolean isClear(long[] bits, int i)", "private synchronized boolean bulkRemove(Predicate<? super E> filter)", "public synchronized boolean addAll(int index, Collection<? extends E> c)", "public synchronized boolean equals(Object o)", "public synchronized int hashCode()", "public synchronized String toString()", "public synchronized List<E> subList(int fromIndex, int toIndex)", "protected synchronized void removeRange(int fromIndex, int toIndex)", "private void shiftTailOverGap(Object[] es, int lo, int hi)", "private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException", "private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException", "public synchronized ListIterator<E> listIterator(int index)", "public synchronized ListIterator<E> listIterator()", "public synchronized Iterator<E> iterator()", "public synchronized void forEach(Consumer<? super E> action)", "public synchronized void replaceAll(UnaryOperator<E> operator)", "public synchronized void sort(Comparator<? super E> c)", "public Spliterator<E> spliterator()", " void checkInvariants()" ],
  "variableNames" : [ "elementData", "elementCount", "capacityIncrement", "serialVersionUID" ]
}