{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/media/SyncParams.java",
  "packageName" : "android.media",
  "className" : "SyncParams",
  "comment" : "\n * Structure for common A/V sync params.\n *\n * Used by {@link MediaSync} {link MediaSync#getSyncParams()} and\n * {link MediaSync#setSyncParams(SyncParams)}\n * to control A/V sync behavior.\n * <p> <strong>audio adjust mode:</strong>\n * select handling of audio track when changing playback speed due to sync.\n * <ul>\n * <li> {@link SyncParams#AUDIO_ADJUST_MODE_DEFAULT}:\n *   System will determine best handling. </li>\n * <li> {@link SyncParams#AUDIO_ADJUST_MODE_STRETCH}:\n *   Change the speed of audio playback without altering its pitch.</li>\n * <li> {@link SyncParams#AUDIO_ADJUST_MODE_RESAMPLE}:\n *   Change the speed of audio playback by resampling the audio.</li>\n * </ul>\n * <p> <strong>sync source:</strong> select\n * clock source for sync.\n * <ul>\n * <li> {@link SyncParams#SYNC_SOURCE_DEFAULT}:\n *   System will determine best selection.</li>\n * <li> {@link SyncParams#SYNC_SOURCE_SYSTEM_CLOCK}:\n *   Use system clock for sync source.</li>\n * <li> {@link SyncParams#SYNC_SOURCE_AUDIO}:\n *   Use audio track for sync source.</li>\n * <li> {@link SyncParams#SYNC_SOURCE_VSYNC}:\n *   Syncronize media to vsync.</li>\n * </ul>\n * <p> <strong>tolerance:</strong> specifies the amount of allowed playback rate\n * change to keep media in sync with the sync source. The handling of this depends\n * on the sync source, but must not be negative, and must be less than one.\n * <p> <strong>frameRate:</strong> initial hint for video frame rate. Used when\n * sync source is vsync. Negative values can be used to clear a previous hint.\n ",
  "variables" : [ {
    "name" : "SYNC_SOURCE_DEFAULT",
    "type" : "int",
    "comment" : "\n     * Use the default sync source (default). If media has video, the sync renders to a\n     * surface that directly renders to a display, and tolerance is non zero (e.g. not\n     * less than 0.001) vsync source is used for clock source.  Otherwise, if media has\n     * audio, audio track is used. Finally, if media has no audio, system clock is used.\n     ",
    "links" : [ ]
  }, {
    "name" : "SYNC_SOURCE_SYSTEM_CLOCK",
    "type" : "int",
    "comment" : "\n     * Use system monotonic clock for sync source.\n     *\n     * @see System#nanoTime\n     ",
    "links" : [ ]
  }, {
    "name" : "SYNC_SOURCE_AUDIO",
    "type" : "int",
    "comment" : "\n     * Use audio track for sync source. This requires audio data and an audio track.\n     *\n     * @see android.media.AudioTrack#getTimestamp(android.media.AudioTimestamp)\n     ",
    "links" : [ ]
  }, {
    "name" : "SYNC_SOURCE_VSYNC",
    "type" : "int",
    "comment" : "\n     * Use vsync as the sync source. This requires video data and an output surface that\n     * directly renders to the display, e.g. {@link android.view.SurfaceView}\n     * <p>\n     * This mode allows smoother playback experience by adjusting the playback speed\n     * to match the vsync rate, e.g. playing 30fps content on a 59.94Hz display.\n     * When using this mode, the tolerance should be set to greater than 0 (e.g. at least\n     * 1/1000), so that the playback speed can actually be adjusted.\n     * <p>\n     * This mode can also be used to play 25fps content on a 60Hz display using\n     * a 2:3 pulldown (basically playing the content at 24fps), which results on\n     * better playback experience on most devices. In this case the tolerance should be\n     * at least (1/24).\n     *\n     * @see android.view.Choreographer.FrameCallback#doFrame\n     * @see android.view.Display#getAppVsyncOffsetNanos\n     ",
    "links" : [ "android.view.SurfaceView" ]
  }, {
    "name" : "AUDIO_ADJUST_MODE_DEFAULT",
    "type" : "int",
    "comment" : "\n     * System will determine best handling of audio for playback rate\n     * adjustments.\n     * <p>\n     * Used by default. This will make audio play faster or slower as required\n     * by the sync source without changing its pitch; however, system may fall\n     * back to some other method (e.g. change the pitch, or mute the audio) if\n     * time stretching is no longer supported for the playback rate.\n     ",
    "links" : [ ]
  }, {
    "name" : "AUDIO_ADJUST_MODE_STRETCH",
    "type" : "int",
    "comment" : "\n     * Time stretch audio when playback rate must be adjusted.\n     * <p>\n     * This will make audio play faster or slower as required by the sync source\n     * without changing its pitch, as long as it is supported for the playback\n     * rate.\n     ",
    "links" : [ ]
  }, {
    "name" : "AUDIO_ADJUST_MODE_RESAMPLE",
    "type" : "int",
    "comment" : "\n     * Resample audio when playback rate must be adjusted.\n     * <p>\n     * This will make audio play faster or slower as required by the sync source\n     * by changing its pitch (making it lower to play slower, and higher to play\n     * faster.)\n     ",
    "links" : [ ]
  }, {
    "name" : "SET_SYNC_SOURCE",
    "type" : "int",
    "comment" : " flags to indicate which params are actually set",
    "links" : [ ]
  }, {
    "name" : "SET_AUDIO_ADJUST_MODE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SET_TOLERANCE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SET_FRAME_RATE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSet",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAudioAdjustMode",
    "type" : "int",
    "comment" : " params",
    "links" : [ ]
  }, {
    "name" : "mSyncSource",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTolerance",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFrameRate",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public SyncParams allowDefaults()",
    "returnType" : "SyncParams",
    "comment" : "\n     * Allows defaults to be returned for properties not set.\n     * Otherwise a {@link java.lang.IllegalArgumentException} exception\n     * is raised when getting those properties\n     * which have defaults but have never been set.\n     * @return this <code>SyncParams</code> instance.\n     ",
    "links" : [ "java.lang.IllegalArgumentException" ]
  }, {
    "name" : "public SyncParams setAudioAdjustMode(@AudioAdjustMode int audioAdjustMode)",
    "returnType" : "SyncParams",
    "comment" : "\n     * Sets the audio adjust mode.\n     * @param audioAdjustMode\n     * @return this <code>SyncParams</code> instance.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getAudioAdjustMode()",
    "returnType" : "int",
    "comment" : "\n     * Retrieves the audio adjust mode.\n     * @return audio adjust mode\n     * @throws IllegalStateException if the audio adjust mode is not set.\n     ",
    "links" : [ ]
  }, {
    "name" : "public SyncParams setSyncSource(@SyncSource int syncSource)",
    "returnType" : "SyncParams",
    "comment" : "\n     * Sets the sync source.\n     * @param syncSource\n     * @return this <code>SyncParams</code> instance.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getSyncSource()",
    "returnType" : "int",
    "comment" : "\n     * Retrieves the sync source.\n     * @return sync source\n     * @throws IllegalStateException if the sync source is not set.\n     ",
    "links" : [ ]
  }, {
    "name" : "public SyncParams setTolerance(float tolerance)",
    "returnType" : "SyncParams",
    "comment" : "\n     * Sets the tolerance. The default tolerance is platform specific, but is never more than 1/24.\n     * @param tolerance A non-negative number representing\n     *     the maximum deviation of the playback rate from the playback rate\n     *     set. ({@code abs(actual_rate - set_rate) / set_rate})\n     * @return this <code>SyncParams</code> instance.\n     * @throws IllegalArgumentException if the tolerance is negative, or not less than one.\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getTolerance()",
    "returnType" : "float",
    "comment" : "\n     * Retrieves the tolerance factor.\n     * @return tolerance factor. A non-negative number representing\n     *     the maximum deviation of the playback rate from the playback rate\n     *     set. ({@code abs(actual_rate - set_rate) / set_rate})\n     * @throws IllegalStateException if tolerance is not set.\n     ",
    "links" : [ ]
  }, {
    "name" : "public SyncParams setFrameRate(float frameRate)",
    "returnType" : "SyncParams",
    "comment" : "\n     * Sets the video frame rate hint to be used. By default the frame rate is unspecified.\n     * @param frameRate A non-negative number used as an initial hint on\n     *     the video frame rate to be used when using vsync as the sync source. A negative\n     *     number is used to clear a previous hint.\n     * @return this <code>SyncParams</code> instance.\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getFrameRate()",
    "returnType" : "float",
    "comment" : "\n     * Retrieves the video frame rate hint.\n     * @return frame rate factor. A non-negative number representing\n     *     the maximum deviation of the playback rate from the playback rate\n     *     set. ({@code abs(actual_rate - set_rate) / set_rate}), or a negative\n     *     number representing the desire to clear a previous hint using these params.\n     * @throws IllegalStateException if frame rate is not set.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "SYNC_SOURCE_DEFAULT", "SYNC_SOURCE_SYSTEM_CLOCK", "SYNC_SOURCE_AUDIO", "SYNC_SOURCE_VSYNC", "AUDIO_ADJUST_MODE_DEFAULT", "AUDIO_ADJUST_MODE_STRETCH", "AUDIO_ADJUST_MODE_RESAMPLE", "SET_SYNC_SOURCE", "SET_AUDIO_ADJUST_MODE", "SET_TOLERANCE", "SET_FRAME_RATE", "mSet", "mAudioAdjustMode", "mSyncSource", "mTolerance", "mFrameRate" ],
  "methodNames" : [ "public SyncParams allowDefaults()", "public SyncParams setAudioAdjustMode(@AudioAdjustMode int audioAdjustMode)", "public int getAudioAdjustMode()", "public SyncParams setSyncSource(@SyncSource int syncSource)", "public int getSyncSource()", "public SyncParams setTolerance(float tolerance)", "public float getTolerance()", "public SyncParams setFrameRate(float frameRate)", "public float getFrameRate()" ]
}