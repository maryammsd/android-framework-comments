{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/net/ServerSocket.java",
  "packageName" : "java.net",
  "className" : "ServerSocket",
  "comment" : "\n * This class implements server sockets. A server socket waits for\n * requests to come in over the network. It performs some operation\n * based on that request, and then possibly returns a result to the requester.\n * <p>\n * The actual work of the server socket is performed by an instance\n * of the {@code SocketImpl} class. An application can\n * change the socket factory that creates the socket\n * implementation to configure itself to create sockets\n * appropriate to the local firewall.\n *\n * @author  unascribed\n * @see     java.net.SocketImpl\n * @see     java.net.ServerSocket#setSocketFactory(java.net.SocketImplFactory)\n * @see     java.nio.channels.ServerSocketChannel\n * @since   1.0\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "created",
    "type" : "boolean",
    "comment" : "\n     * Various states of this socket.\n     ",
    "links" : [ ]
  }, {
    "name" : "bound",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "closed",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "closeLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "impl",
    "type" : "SocketImpl",
    "comment" : "\n     * The implementation of this Socket.\n     ",
    "links" : [ ]
  }, {
    "name" : "oldImpl",
    "type" : "boolean",
    "comment" : "\n     * Are we using an older SocketImpl?\n     ",
    "links" : [ ]
  }, {
    "name" : "factory",
    "type" : "SocketImplFactory",
    "comment" : "\n     * The factory for all server sockets.\n     ",
    "links" : [ ]
  }, {
    "name" : "options",
    "type" : "Set<SocketOption<?>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "optionsSet",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static Void checkPermission()",
    "returnType" : "Void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public SocketImpl getImpl() throws SocketException",
    "returnType" : "SocketImpl",
    "comment" : "\n     * Get the {@code SocketImpl} attached to this socket, creating\n     * it if necessary.\n     *\n     * @return  the {@code SocketImpl} attached to that ServerSocket.\n     * @throws SocketException if creation fails.\n     * @since 1.4\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void checkOldImpl()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setImpl()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void createImpl() throws SocketException",
    "returnType" : "void",
    "comment" : "\n     * Creates the socket implementation.\n     *\n     * @throws IOException if creation fails\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "public void bind(SocketAddress endpoint) throws IOException",
    "returnType" : "void",
    "comment" : "\n     *\n     * Binds the {@code ServerSocket} to a specific address\n     * (IP address and port number).\n     * <p>\n     * If the address is {@code null}, then the system will pick up\n     * an ephemeral port and a valid local address to bind the socket.\n     *\n     * @param   endpoint        The IP address and port number to bind to.\n     * @throws  IOException if the bind operation fails, or if the socket\n     *                     is already bound.\n     * @throws  SecurityException       if a {@code SecurityManager} is present and\n     * its {@code checkListen} method doesn't allow the operation.\n     * @throws  IllegalArgumentException if endpoint is a\n     *          SocketAddress subclass not supported by this socket\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "public void bind(SocketAddress endpoint, int backlog) throws IOException",
    "returnType" : "void",
    "comment" : "\n     *\n     * Binds the {@code ServerSocket} to a specific address\n     * (IP address and port number).\n     * <p>\n     * If the address is {@code null}, then the system will pick up\n     * an ephemeral port and a valid local address to bind the socket.\n     * <P>\n     * The {@code backlog} argument is the requested maximum number of\n     * pending connections on the socket. Its exact semantics are implementation\n     * specific. In particular, an implementation may impose a maximum length\n     * or may choose to ignore the parameter altogther. The value provided\n     * should be greater than {@code 0}. If it is less than or equal to\n     * {@code 0}, then an implementation specific default will be used.\n     * @param   endpoint        The IP address and port number to bind to.\n     * @param   backlog         requested maximum length of the queue of\n     *                          incoming connections.\n     * @throws  IOException if the bind operation fails, or if the socket\n     *                     is already bound.\n     * @throws  SecurityException       if a {@code SecurityManager} is present and\n     * its {@code checkListen} method doesn't allow the operation.\n     * @throws  IllegalArgumentException if endpoint is a\n     *          SocketAddress subclass not supported by this socket\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "public InetAddress getInetAddress()",
    "returnType" : "InetAddress",
    "comment" : "\n     * Returns the local address of this server socket.\n     * <p>\n     * If the socket was bound prior to being {@link #close closed},\n     * then this method will continue to return the local address\n     * after the socket is closed.\n     * <p>\n     * If there is a security manager set, its {@code checkConnect} method is\n     * called with the local address and {@code -1} as its arguments to see\n     * if the operation is allowed. If the operation is not allowed,\n     * the {@link InetAddress#getLoopbackAddress loopback} address is returned.\n     *\n     * @return  the address to which this socket is bound,\n     *          or the loopback address if denied by the security manager,\n     *          or {@code null} if the socket is unbound.\n     *\n     * @see SecurityManager#checkConnect\n     ",
    "links" : [ "#close", "java.net.InetAddress#getLoopbackAddress" ]
  }, {
    "name" : "public int getLocalPort()",
    "returnType" : "int",
    "comment" : "\n     * Returns the port number on which this socket is listening.\n     * <p>\n     * If the socket was bound prior to being {@link #close closed},\n     * then this method will continue to return the port number\n     * after the socket is closed.\n     *\n     * @return  the port number to which this socket is listening or\n     *          -1 if the socket is not bound yet.\n     ",
    "links" : [ "#close" ]
  }, {
    "name" : "public SocketAddress getLocalSocketAddress()",
    "returnType" : "SocketAddress",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Socket accept() throws IOException",
    "returnType" : "Socket",
    "comment" : "\n     * Listens for a connection to be made to this socket and accepts\n     * it. The method blocks until a connection is made.\n     *\n     * <p>A new Socket {@code s} is created and, if there\n     * is a security manager,\n     * the security manager's {@code checkAccept} method is called\n     * with {@code s.getInetAddress().getHostAddress()} and\n     * {@code s.getPort()}\n     * as its arguments to ensure the operation is allowed.\n     * This could result in a SecurityException.\n     *\n     * @exception  IOException  if an I/O error occurs when waiting for a\n     *               connection.\n     * @exception  SecurityException  if a security manager exists and its\n     *             {@code checkAccept} method doesn't allow the operation.\n     * @exception  SocketTimeoutException if a timeout was previously set with setSoTimeout and\n     *             the timeout has been reached.\n     * @exception  java.nio.channels.IllegalBlockingModeException\n     *             if this socket has an associated channel, the channel is in\n     *             non-blocking mode, and there is no connection ready to be\n     *             accepted\n     *\n     * @return the new Socket\n     * @see SecurityManager#checkAccept\n     * @revised 1.4\n     * @spec JSR-51\n     ",
    "links" : [ ]
  }, {
    "name" : "protected final void implAccept(Socket s) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Subclasses of ServerSocket use this method to override accept()\n     * to return their own subclass of socket.  So a FooServerSocket\n     * will typically hand this method an <i>empty</i> FooSocket.  On\n     * return from implAccept the FooSocket will be connected to a client.\n     *\n     * @param s the Socket\n     * @throws java.nio.channels.IllegalBlockingModeException\n     *         if this socket has an associated channel,\n     *         and the channel is in non-blocking mode\n     * @throws IOException if an I/O error occurs when waiting\n     * for a connection.\n     * @since   1.1\n     * @revised 1.4\n     * @spec JSR-51\n     ",
    "links" : [ ]
  }, {
    "name" : "public void close() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Closes this socket.\n     *\n     * Any thread currently blocked in {@link #accept()} will throw\n     * a {@link SocketException}.\n     *\n     * <p> If this socket has an associated channel then the channel is closed\n     * as well.\n     *\n     * @exception  IOException  if an I/O error occurs when closing the socket.\n     * @revised 1.4\n     * @spec JSR-51\n     ",
    "links" : [ "java.net.SocketException", "#accept()" ]
  }, {
    "name" : "public ServerSocketChannel getChannel()",
    "returnType" : "ServerSocketChannel",
    "comment" : "\n     * Returns the unique {@link java.nio.channels.ServerSocketChannel} object\n     * associated with this socket, if any.\n     *\n     * <p> A server socket will have a channel if, and only if, the channel\n     * itself was created via the {@link\n     * java.nio.channels.ServerSocketChannel#open ServerSocketChannel.open}\n     * method.\n     *\n     * @return  the server-socket channel associated with this socket,\n     *          or {@code null} if this socket was not created\n     *          for a channel\n     *\n     * @since 1.4\n     * @spec JSR-51\n     ",
    "links" : [ "java.nio.channels.ServerSocketChannel#open", "java.nio.channels.ServerSocketChannel" ]
  }, {
    "name" : "public boolean isBound()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the binding state of the ServerSocket.\n     *\n     * @return true if the ServerSocket successfully bound to an address\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isClosed()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the closed state of the ServerSocket.\n     *\n     * @return true if the socket has been closed\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void setSoTimeout(int timeout) throws SocketException",
    "returnType" : "void",
    "comment" : "\n     * Enable/disable {@link SocketOptions#SO_TIMEOUT SO_TIMEOUT} with the\n     * specified timeout, in milliseconds.  With this option set to a non-zero\n     * timeout, a call to accept() for this ServerSocket\n     * will block for only this amount of time.  If the timeout expires,\n     * a <B>java.net.SocketTimeoutException</B> is raised, though the\n     * ServerSocket is still valid.  The option <B>must</B> be enabled\n     * prior to entering the blocking operation to have effect.  The\n     * timeout must be {@code > 0}.\n     * A timeout of zero is interpreted as an infinite timeout.\n     * @param timeout the specified timeout, in milliseconds\n     * @exception SocketException if there is an error in\n     * the underlying protocol, such as a TCP error.\n     * @since   1.1\n     * @see #getSoTimeout()\n     ",
    "links" : [ "java.net.SocketOptions#SO_TIMEOUT" ]
  }, {
    "name" : "public synchronized int getSoTimeout() throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Retrieve setting for {@link SocketOptions#SO_TIMEOUT SO_TIMEOUT}.\n     * 0 returns implies that the option is disabled (i.e., timeout of infinity).\n     * @return the {@link SocketOptions#SO_TIMEOUT SO_TIMEOUT} value\n     * @exception IOException if an I/O error occurs\n     * @since   1.1\n     * @see #setSoTimeout(int)\n     ",
    "links" : [ "java.net.SocketOptions#SO_TIMEOUT" ]
  }, {
    "name" : "public void setReuseAddress(boolean on) throws SocketException",
    "returnType" : "void",
    "comment" : "\n     * Enable/disable the {@link SocketOptions#SO_REUSEADDR SO_REUSEADDR}\n     * socket option.\n     * <p>\n     * When a TCP connection is closed the connection may remain\n     * in a timeout state for a period of time after the connection\n     * is closed (typically known as the {@code TIME_WAIT} state\n     * or {@code 2MSL} wait state).\n     * For applications using a well known socket address or port\n     * it may not be possible to bind a socket to the required\n     * {@code SocketAddress} if there is a connection in the\n     * timeout state involving the socket address or port.\n     * <p>\n     * Enabling {@link SocketOptions#SO_REUSEADDR SO_REUSEADDR} prior to\n     * binding the socket using {@link #bind(SocketAddress)} allows the socket\n     * to be bound even though a previous connection is in a timeout state.\n     * <p>\n     * When a {@code ServerSocket} is created the initial setting\n     * of {@link SocketOptions#SO_REUSEADDR SO_REUSEADDR} is not defined.\n     * Applications can use {@link #getReuseAddress()} to determine the initial\n     * setting of {@link SocketOptions#SO_REUSEADDR SO_REUSEADDR}.\n     * <p>\n     * The behaviour when {@link SocketOptions#SO_REUSEADDR SO_REUSEADDR} is\n     * enabled or disabled after a socket is bound (See {@link #isBound()})\n     * is not defined.\n     *\n     * @param on  whether to enable or disable the socket option\n     * @exception SocketException if an error occurs enabling or\n     *            disabling the {@link SocketOptions#SO_REUSEADDR SO_REUSEADDR}\n     *            socket option, or the socket is closed.\n     * @since 1.4\n     * @see #getReuseAddress()\n     * @see #bind(SocketAddress)\n     * @see #isBound()\n     * @see #isClosed()\n     ",
    "links" : [ "#bind(SocketAddress)", "java.net.SocketOptions#SO_REUSEADDR", "#getReuseAddress()", "#isBound()" ]
  }, {
    "name" : "public boolean getReuseAddress() throws SocketException",
    "returnType" : "boolean",
    "comment" : "\n     * Tests if {@link SocketOptions#SO_REUSEADDR SO_REUSEADDR} is enabled.\n     *\n     * @return a {@code boolean} indicating whether or not\n     *         {@link SocketOptions#SO_REUSEADDR SO_REUSEADDR} is enabled.\n     * @exception SocketException if there is an error\n     * in the underlying protocol, such as a TCP error.\n     * @since   1.4\n     * @see #setReuseAddress(boolean)\n     ",
    "links" : [ "java.net.SocketOptions#SO_REUSEADDR" ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns the implementation address and implementation port of\n     * this socket as a {@code String}.\n     * <p>\n     * If there is a security manager set, its {@code checkConnect} method is\n     * called with the local address and {@code -1} as its arguments to see\n     * if the operation is allowed. If the operation is not allowed,\n     * an {@code InetAddress} representing the\n     * {@link InetAddress#getLoopbackAddress loopback} address is returned as\n     * the implementation address.\n     *\n     * @return  a string representation of this socket.\n     ",
    "links" : [ "java.net.InetAddress#getLoopbackAddress" ]
  }, {
    "name" : " void setBound()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void setCreated()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static synchronized void setSocketFactory(SocketImplFactory fac) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Sets the server socket implementation factory for the\n     * application. The factory can be specified only once.\n     * <p>\n     * When an application creates a new server socket, the socket\n     * implementation factory's {@code createSocketImpl} method is\n     * called to create the actual socket implementation.\n     * <p>\n     * Passing {@code null} to the method is a no-op unless the factory\n     * was already set.\n     * <p>\n     * If there is a security manager, this method first calls\n     * the security manager's {@code checkSetFactory} method\n     * to ensure the operation is allowed.\n     * This could result in a SecurityException.\n     *\n     * @param      fac   the desired factory.\n     * @exception  IOException  if an I/O error occurs when setting the\n     *               socket factory.\n     * @exception  SocketException  if the factory has already been defined.\n     * @exception  SecurityException  if a security manager exists and its\n     *             {@code checkSetFactory} method doesn't allow the operation.\n     * @see        java.net.SocketImplFactory#createSocketImpl()\n     * @see        SecurityManager#checkSetFactory\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void setReceiveBufferSize(int size) throws SocketException",
    "returnType" : "void",
    "comment" : "\n     * Sets a default proposed value for the\n     * {@link SocketOptions#SO_RCVBUF SO_RCVBUF} option for sockets\n     * accepted from this {@code ServerSocket}. The value actually set\n     * in the accepted socket must be determined by calling\n     * {@link Socket#getReceiveBufferSize()} after the socket\n     * is returned by {@link #accept()}.\n     * <p>\n     * The value of {@link SocketOptions#SO_RCVBUF SO_RCVBUF} is used both to\n     * set the size of the internal socket receive buffer, and to set the size\n     * of the TCP receive window that is advertized to the remote peer.\n     * <p>\n     * It is possible to change the value subsequently, by calling\n     * {@link Socket#setReceiveBufferSize(int)}. However, if the application\n     * wishes to allow a receive window larger than 64K bytes, as defined by RFC1323\n     * then the proposed value must be set in the ServerSocket <B>before</B>\n     * it is bound to a local address. This implies, that the ServerSocket must be\n     * created with the no-argument constructor, then setReceiveBufferSize() must\n     * be called and lastly the ServerSocket is bound to an address by calling bind().\n     * <p>\n     * Failure to do this will not cause an error, and the buffer size may be set to the\n     * requested value but the TCP receive window in sockets accepted from\n     * this ServerSocket will be no larger than 64K bytes.\n     *\n     * @exception SocketException if there is an error\n     * in the underlying protocol, such as a TCP error.\n     *\n     * @param size the size to which to set the receive buffer\n     * size. This value must be greater than 0.\n     *\n     * @exception IllegalArgumentException if the\n     * value is 0 or is negative.\n     *\n     * @since 1.4\n     * @see #getReceiveBufferSize\n     ",
    "links" : [ "java.net.Socket#getReceiveBufferSize()", "#accept()", "java.net.SocketOptions#SO_RCVBUF", "java.net.Socket#setReceiveBufferSize(int)" ]
  }, {
    "name" : "public synchronized int getReceiveBufferSize() throws SocketException",
    "returnType" : "int",
    "comment" : "\n     * Gets the value of the {@link SocketOptions#SO_RCVBUF SO_RCVBUF} option\n     * for this {@code ServerSocket}, that is the proposed buffer size that\n     * will be used for Sockets accepted from this {@code ServerSocket}.\n     *\n     * <p>Note, the value actually set in the accepted socket is determined by\n     * calling {@link Socket#getReceiveBufferSize()}.\n     * @return the value of the {@link SocketOptions#SO_RCVBUF SO_RCVBUF}\n     *         option for this {@code Socket}.\n     * @exception SocketException if there is an error\n     *            in the underlying protocol, such as a TCP error.\n     * @see #setReceiveBufferSize(int)\n     * @since 1.4\n     ",
    "links" : [ "java.net.Socket#getReceiveBufferSize()", "java.net.SocketOptions#SO_RCVBUF" ]
  }, {
    "name" : "public void setPerformancePreferences(int connectionTime, int latency, int bandwidth)",
    "returnType" : "void",
    "comment" : "\n     * Sets performance preferences for this ServerSocket.\n     *\n     * <p> Sockets use the TCP/IP protocol by default.  Some implementations\n     * may offer alternative protocols which have different performance\n     * characteristics than TCP/IP.  This method allows the application to\n     * express its own preferences as to how these tradeoffs should be made\n     * when the implementation chooses from the available protocols.\n     *\n     * <p> Performance preferences are described by three integers\n     * whose values indicate the relative importance of short connection time,\n     * low latency, and high bandwidth.  The absolute values of the integers\n     * are irrelevant; in order to choose a protocol the values are simply\n     * compared, with larger values indicating stronger preferences.  If the\n     * application prefers short connection time over both low latency and high\n     * bandwidth, for example, then it could invoke this method with the values\n     * {@code (1, 0, 0)}.  If the application prefers high bandwidth above low\n     * latency, and low latency above short connection time, then it could\n     * invoke this method with the values {@code (0, 1, 2)}.\n     *\n     * <p> Invoking this method after this socket has been bound\n     * will have no effect. This implies that in order to use this capability\n     * requires the socket to be created with the no-argument constructor.\n     *\n     * @param  connectionTime\n     *         An {@code int} expressing the relative importance of a short\n     *         connection time\n     *\n     * @param  latency\n     *         An {@code int} expressing the relative importance of low\n     *         latency\n     *\n     * @param  bandwidth\n     *         An {@code int} expressing the relative importance of high\n     *         bandwidth\n     *\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public ServerSocket setOption(SocketOption<T> name, T value) throws IOException",
    "returnType" : "ServerSocket",
    "comment" : "\n     * Sets the value of a socket option.\n     *\n     * @param <T> The type of the socket option value\n     * @param name The socket option\n     * @param value The value of the socket option. A value of {@code null}\n     *              may be valid for some options.\n     * @return this ServerSocket\n     *\n     * @throws UnsupportedOperationException if the server socket does not\n     *         support the option.\n     *\n     * @throws IllegalArgumentException if the value is not valid for\n     *         the option.\n     *\n     * @throws IOException if an I/O error occurs, or if the socket is closed.\n     *\n     * @throws NullPointerException if name is {@code null}\n     *\n     * @throws SecurityException if a security manager is set and if the socket\n     *         option requires a security permission and if the caller does\n     *         not have the required permission.\n     *         {@link java.net.StandardSocketOptions StandardSocketOptions}\n     *         do not require any security permission.\n     *\n     * @since 9\n     ",
    "links" : [ "java.net.StandardSocketOptions" ]
  }, {
    "name" : "public T getOption(SocketOption<T> name) throws IOException",
    "returnType" : "T",
    "comment" : "\n     * Returns the value of a socket option.\n     *\n     * @param <T> The type of the socket option value\n     * @param name The socket option\n     *\n     * @return The value of the socket option.\n     *\n     * @throws UnsupportedOperationException if the server socket does not\n     *         support the option.\n     *\n     * @throws IOException if an I/O error occurs, or if the socket is closed.\n     *\n     * @throws NullPointerException if name is {@code null}\n     *\n     * @throws SecurityException if a security manager is set and if the socket\n     *         option requires a security permission and if the caller does\n     *         not have the required permission.\n     *         {@link java.net.StandardSocketOptions StandardSocketOptions}\n     *         do not require any security permission.\n     *\n     * @since 9\n     ",
    "links" : [ "java.net.StandardSocketOptions" ]
  }, {
    "name" : "public Set<SocketOption<?>> supportedOptions()",
    "returnType" : "Set<SocketOption<?>>",
    "comment" : "\n     * Returns a set of the socket options supported by this server socket.\n     *\n     * This method will continue to return the set of options even after\n     * the socket has been closed.\n     *\n     * @return A set of the socket options supported by this socket. This set\n     *         may be empty if the socket's SocketImpl cannot be created.\n     *\n     * @since 9\n     ",
    "links" : [ ]
  }, {
    "name" : "public FileDescriptor getFileDescriptor$()",
    "returnType" : "FileDescriptor",
    "comment" : "\n     * @hide internal use only\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static Void checkPermission()", "public SocketImpl getImpl() throws SocketException", "private void checkOldImpl()", "private void setImpl()", " void createImpl() throws SocketException", "public void bind(SocketAddress endpoint) throws IOException", "public void bind(SocketAddress endpoint, int backlog) throws IOException", "public InetAddress getInetAddress()", "public int getLocalPort()", "public SocketAddress getLocalSocketAddress()", "public Socket accept() throws IOException", "protected final void implAccept(Socket s) throws IOException", "public void close() throws IOException", "public ServerSocketChannel getChannel()", "public boolean isBound()", "public boolean isClosed()", "public synchronized void setSoTimeout(int timeout) throws SocketException", "public synchronized int getSoTimeout() throws IOException", "public void setReuseAddress(boolean on) throws SocketException", "public boolean getReuseAddress() throws SocketException", "public String toString()", " void setBound()", " void setCreated()", "public static synchronized void setSocketFactory(SocketImplFactory fac) throws IOException", "public synchronized void setReceiveBufferSize(int size) throws SocketException", "public synchronized int getReceiveBufferSize() throws SocketException", "public void setPerformancePreferences(int connectionTime, int latency, int bandwidth)", "public ServerSocket setOption(SocketOption<T> name, T value) throws IOException", "public T getOption(SocketOption<T> name) throws IOException", "public Set<SocketOption<?>> supportedOptions()", "public FileDescriptor getFileDescriptor$()" ],
  "variableNames" : [ "created", "bound", "closed", "closeLock", "impl", "oldImpl", "factory", "options", "optionsSet" ]
}