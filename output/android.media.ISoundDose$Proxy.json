{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/ISoundDose.java",
  "packageName" : "android.media",
  "className" : "Proxy",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "mRemote",
    "type" : "android.os.IBinder",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public android.os.IBinder asBinder()",
    "returnType" : "android.os.IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public java.lang.String getInterfaceDescriptor()",
    "returnType" : "java.lang.String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setOutputRs2UpperBound(float rs2Value) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : " Set a new RS2 upper bound used for momentary exposure warnings. ",
    "links" : [ ]
  }, {
    "name" : "public void resetCsd(float currentCsd, android.media.SoundDoseRecord[] records) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n       * Resets the native CSD values. This can happen after a crash in the\n       * audio server or after booting when restoring the previous state.\n       * 'currentCsd' represents the restored CSD value and 'records' contains the\n       * dosage values and MELs together with their timestamps that lead to this\n       * CSD.\n       ",
    "links" : [ ]
  }, {
    "name" : "public void updateAttenuation(float attenuationDB, int device) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n       * Updates the attenuation used for the MEL calculation when the volume is\n       * not applied by the audio framework. This can be the case when for example\n       * the absolute volume is used for a particular device.\n       * \n       * @param attenuationDB the attenuation as a negative value in dB that will\n       *                      be applied for the internal MEL when computing CSD.\n       *                      A value of 0 represents no attenuation for the MELs\n       * @param device        the audio_devices_t type for which we will apply the\n       *                      attenuation\n       ",
    "links" : [ ]
  }, {
    "name" : "public void setCsdEnabled(boolean enabled) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n       * Enables/disables the calculation of sound dose. This has the effect that\n       * if disabled no MEL values will be computed on the framework side. The MEL\n       * returned from the IHalSoundDoseCallbacks will be ignored.\n       ",
    "links" : [ ]
  }, {
    "name" : "public void initCachedAudioDeviceCategories(android.media.ISoundDose.AudioDeviceCategory[] audioDevices) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n       * Resets the list of stored device categories for the native layer. Should\n       * only be called once at boot time after parsing the existing AudioDeviceCategories.\n       ",
    "links" : [ ]
  }, {
    "name" : "public void setAudioDeviceCategory(android.media.ISoundDose.AudioDeviceCategory audioDevice) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n       * Sets whether a device for a given address and type is a headphone or not.\n       * This is used to determine whether we compute the CSD on the given device\n       * since we can not rely completely on the device annotations.\n       ",
    "links" : [ ]
  }, {
    "name" : "public float getOutputRs2UpperBound() throws android.os.RemoteException",
    "returnType" : "float",
    "comment" : "\n       * -------------------------- Test API methods --------------------------\n       * /** Get the currently used RS2 upper bound.\n       ",
    "links" : [ ]
  }, {
    "name" : "public float getCsd() throws android.os.RemoteException",
    "returnType" : "float",
    "comment" : " Get the current CSD from audioserver. ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSoundDoseHalSupported() throws android.os.RemoteException",
    "returnType" : "boolean",
    "comment" : "\n       * Returns true if the HAL supports the ISoundDose interface. Can be either\n       * as part of IModule or standalon sound dose HAL.\n       ",
    "links" : [ ]
  }, {
    "name" : "public void forceUseFrameworkMel(boolean useFrameworkMel) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : " Enables/Disables MEL computations from framework. ",
    "links" : [ ]
  }, {
    "name" : "public void forceComputeCsdOnAllDevices(boolean computeCsdOnAllDevices) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : " Enables/Disables the computation of CSD on all devices. ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public android.os.IBinder asBinder()", "public java.lang.String getInterfaceDescriptor()", "public void setOutputRs2UpperBound(float rs2Value) throws android.os.RemoteException", "public void resetCsd(float currentCsd, android.media.SoundDoseRecord[] records) throws android.os.RemoteException", "public void updateAttenuation(float attenuationDB, int device) throws android.os.RemoteException", "public void setCsdEnabled(boolean enabled) throws android.os.RemoteException", "public void initCachedAudioDeviceCategories(android.media.ISoundDose.AudioDeviceCategory[] audioDevices) throws android.os.RemoteException", "public void setAudioDeviceCategory(android.media.ISoundDose.AudioDeviceCategory audioDevice) throws android.os.RemoteException", "public float getOutputRs2UpperBound() throws android.os.RemoteException", "public float getCsd() throws android.os.RemoteException", "public boolean isSoundDoseHalSupported() throws android.os.RemoteException", "public void forceUseFrameworkMel(boolean useFrameworkMel) throws android.os.RemoteException", "public void forceComputeCsdOnAllDevices(boolean computeCsdOnAllDevices) throws android.os.RemoteException" ],
  "variableNames" : [ "mRemote" ]
}