{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/webkit/WebViewUpdateManager.java",
  "packageName" : "android.webkit",
  "className" : "WebViewUpdateManager",
  "comment" : " @hide ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mService",
    "type" : "IWebViewUpdateService",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static WebViewUpdateManager getInstance()",
    "returnType" : "WebViewUpdateManager",
    "comment" : "\n     * Get the singleton instance of the manager.\n     *\n     * This exists for the benefit of callsites without a {@link Context}; prefer\n     * {@link Context#getSystemService(Class)} otherwise.\n     ",
    "links" : [ "android.content.Context", "android.content.Context#getSystemService(Class)" ]
  }, {
    "name" : "public WebViewProviderResponse waitForAndGetProvider()",
    "returnType" : "WebViewProviderResponse",
    "comment" : "\n     * Block until system-level WebView preparations are complete.\n     *\n     * This also makes the current WebView provider package visible to the caller.\n     *\n     * @return the status of WebView preparation and the current provider package.\n     ",
    "links" : [ ]
  }, {
    "name" : "public PackageInfo getCurrentWebViewPackage()",
    "returnType" : "PackageInfo",
    "comment" : "\n     * Get the package that is the system's current WebView implementation.\n     *\n     * @return the package, or null if no valid implementation is present.\n     ",
    "links" : [ ]
  }, {
    "name" : "public WebViewProviderInfo[] getAllWebViewPackages()",
    "returnType" : "WebViewProviderInfo[]",
    "comment" : "\n     * Get the complete list of supported WebView providers for this device.\n     *\n     * This includes all configured providers, regardless of whether they are currently available\n     * or valid.\n     ",
    "links" : [ ]
  }, {
    "name" : "public WebViewProviderInfo[] getValidWebViewPackages()",
    "returnType" : "WebViewProviderInfo[]",
    "comment" : "\n     * Get the list of currently-valid WebView providers for this device.\n     *\n     * This only includes providers that are currently present on the device and meet the validity\n     * criteria (signature, version, etc), but does not check if the provider is installed and\n     * enabled for all users.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getCurrentWebViewPackageName()",
    "returnType" : "String",
    "comment" : "\n     * Get the package name of the current WebView implementation.\n     *\n     * @return the package name, or null if no valid implementation is present.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String changeProviderAndSetting(@NonNull String newProvider)",
    "returnType" : "String",
    "comment" : "\n     * Ask the system to switch to a specific WebView implementation if possible.\n     *\n     * This choice will be stored persistently.\n     *\n     * @param newProvider the package name to use.\n     * @return the package name which is now in use, which may not be the\n     *         requested one if it was not usable.\n     ",
    "links" : [ ]
  }, {
    "name" : " void notifyRelroCreationCompleted()",
    "returnType" : "void",
    "comment" : "\n     * Used by the relro file creator to notify the service that it's done.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public WebViewProviderInfo getDefaultWebViewPackage()",
    "returnType" : "WebViewProviderInfo",
    "comment" : "\n     * Get the WebView provider which will be used if no explicit choice has been made.\n     *\n     * The default provider is not guaranteed to be a valid/usable WebView implementation.\n     *\n     * @return the default WebView provider.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static WebViewUpdateManager getInstance()", "public WebViewProviderResponse waitForAndGetProvider()", "public PackageInfo getCurrentWebViewPackage()", "public WebViewProviderInfo[] getAllWebViewPackages()", "public WebViewProviderInfo[] getValidWebViewPackages()", "public String getCurrentWebViewPackageName()", "public String changeProviderAndSetting(@NonNull String newProvider)", " void notifyRelroCreationCompleted()", "public WebViewProviderInfo getDefaultWebViewPackage()" ],
  "variableNames" : [ "mService" ]
}