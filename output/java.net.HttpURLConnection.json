{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/net/HttpURLConnection.java",
  "packageName" : "java.net",
  "className" : "HttpURLConnection",
  "comment" : "\n * A URLConnection with support for HTTP-specific features. See\n * <A HREF=\"http://www.w3.org/pub/WWW/Protocols/\"> the spec </A> for\n * details.\n * <p>\n *\n * <p>Uses of this class follow a pattern:\n * <ol>\n *   <li>Obtain a new {@code HttpURLConnection} by calling {@link\n *       URL#openConnection() URL.openConnection()} and casting the result to\n *       {@code HttpURLConnection}.\n *   <li>Prepare the request. The primary property of a request is its URI.\n *       Request headers may also include metadata such as credentials, preferred\n *       content types, and session cookies.\n *   <li>Optionally upload a request body. Instances must be configured with\n *       {@link #setDoOutput(boolean) setDoOutput(true)} if they include a\n *       request body. Transmit data by writing to the stream returned by {@link\n *       #getOutputStream()}.\n *   <li>Read the response. Response headers typically include metadata such as\n *       the response body's content type and length, modified dates and session\n *       cookies. The response body may be read from the stream returned by {@link\n *       #getInputStream()}. If the response has no body, that method returns an\n *       empty stream.\n *   <li>Disconnect. Once the response body has been read, the {@code\n *       HttpURLConnection} should be closed by calling {@link #disconnect()}.\n *       Disconnecting releases the resources held by a connection so they may\n *       be closed or reused.\n * </ol>\n *\n * <p>For example, to retrieve the webpage at {@code http://www.android.com/}:\n * <pre>   {@code\n *   URL url = new URL(\"http://www.android.com/\");\n *   HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();\n *   try {\n *     InputStream in = new BufferedInputStream(urlConnection.getInputStream());\n *     readStream(in);\n *   } finally {\n *     urlConnection.disconnect();\n *   }\n * }</pre>\n *\n * <h3>Secure Communication with HTTPS</h3>\n * Calling {@link URL#openConnection()} on a URL with the \"https\"\n * scheme will return an {@code HttpsURLConnection}, which allows for\n * overriding the default {@link javax.net.ssl.HostnameVerifier\n * HostnameVerifier} and {@link javax.net.ssl.SSLSocketFactory\n * SSLSocketFactory}. An application-supplied {@code SSLSocketFactory}\n * created from an {@link javax.net.ssl.SSLContext SSLContext} can\n * provide a custom {@link javax.net.ssl.X509TrustManager\n * X509TrustManager} for verifying certificate chains and a custom\n * {@link javax.net.ssl.X509KeyManager X509KeyManager} for supplying\n * client certificates. See {@link javax.net.ssl.HttpsURLConnection\n * HttpsURLConnection} for more details.\n *\n * <h3>Response Handling</h3>\n * {@code HttpURLConnection} will follow up to five HTTP redirects. It will\n * follow redirects from one origin server to another. This implementation\n * doesn't follow redirects from HTTPS to HTTP or vice versa.\n *\n * <p>If the HTTP response indicates that an error occurred, {@link\n * #getInputStream()} will throw an {@link IOException}. Use {@link\n * #getErrorStream()} to read the error response. The headers can be read in\n * the normal way using {@link #getHeaderFields()},\n *\n * <h3>Posting Content</h3>\n * To upload data to a web server, configure the connection for output using\n * {@link #setDoOutput(boolean) setDoOutput(true)}.\n *\n * <p>For best performance, you should call either {@link\n * #setFixedLengthStreamingMode(int)} when the body length is known in advance,\n * or {@link #setChunkedStreamingMode(int)} when it is not. Otherwise {@code\n * HttpURLConnection} will be forced to buffer the complete request body in\n * memory before it is transmitted, wasting (and possibly exhausting) heap and\n * increasing latency.\n *\n * <p>For example, to perform an upload: <pre>   {@code\n *   HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();\n *   try {\n *     urlConnection.setDoOutput(true);\n *     urlConnection.setChunkedStreamingMode(0);\n *\n *     OutputStream out = new BufferedOutputStream(urlConnection.getOutputStream());\n *     writeStream(out);\n *\n *     InputStream in = new BufferedInputStream(urlConnection.getInputStream());\n *     readStream(in);\n *   } finally {\n *     urlConnection.disconnect();\n *   }\n * }</pre>\n *\n * <h3>Performance</h3>\n * The input and output streams returned by this class are <strong>not\n * buffered</strong>. Most callers should wrap the returned streams with {@link\n * java.io.BufferedInputStream BufferedInputStream} or {@link\n * java.io.BufferedOutputStream BufferedOutputStream}. Callers that do only bulk\n * reads or writes may omit buffering.\n *\n * <p>When transferring large amounts of data to or from a server, use streams\n * to limit how much data is in memory at once. Unless you need the entire\n * body to be in memory at once, process it as a stream (rather than storing\n * the complete body as a single byte array or string).\n *\n * <p>To reduce latency, this class may reuse the same underlying {@code Socket}\n * for multiple request/response pairs. As a result, HTTP connections may be\n * held open longer than necessary. Calls to {@link #disconnect()} may return\n * the socket to a pool of connected sockets.\n *\n * <p>By default, this implementation of {@code HttpURLConnection} requests that\n * servers use gzip compression and it automatically decompresses the data for\n * callers of {@link #getInputStream()}. The Content-Encoding and Content-Length\n * response headers are cleared in this case. Gzip compression can be disabled by\n * setting the acceptable encodings in the request header: <pre>   {@code\n *   urlConnection.setRequestProperty(\"Accept-Encoding\", \"identity\");\n * }</pre>\n *\n * <p>Setting the Accept-Encoding request header explicitly disables automatic\n * decompression and leaves the response headers intact; callers must handle\n * decompression as needed, according to the Content-Encoding header of the\n * response.\n *\n * <p>{@link #getContentLength()} returns the number of bytes transmitted and\n * cannot be used to predict how many bytes can be read from\n * {@link #getInputStream()} for compressed streams. Instead, read that stream\n * until it is exhausted, i.e. when {@link InputStream#read} returns -1.\n *\n * <h3>Handling Network Sign-On</h3>\n * Some Wi-Fi networks block Internet access until the user clicks through a\n * sign-on page. Such sign-on pages are typically presented by using HTTP\n * redirects. You can use {@link #getURL()} to test if your connection has been\n * unexpectedly redirected. This check is not valid until <strong>after</strong>\n * the response headers have been received, which you can trigger by calling\n * {@link #getHeaderFields()} or {@link #getInputStream()}. For example, to\n * check that a response was not redirected to an unexpected host:\n * <pre>   {@code\n *   HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();\n *   try {\n *     InputStream in = new BufferedInputStream(urlConnection.getInputStream());\n *     if (!url.getHost().equals(urlConnection.getURL().getHost())) {\n *       // we were redirected! Kick the user out to the browser to sign on?\n *     }\n *     ...\n *   } finally {\n *     urlConnection.disconnect();\n *   }\n * }</pre>\n *\n * <h3>HTTP Authentication</h3>\n * {@code HttpURLConnection} supports <a\n * href=\"http://www.ietf.org/rfc/rfc2617\">HTTP basic authentication</a>. Use\n * {@link Authenticator} to set the VM-wide authentication handler:\n * <pre>   {@code\n *   Authenticator.setDefault(new Authenticator() {\n *     protected PasswordAuthentication getPasswordAuthentication() {\n *       return new PasswordAuthentication(username, password.toCharArray());\n *     }\n *   });\n * }</pre>\n * Unless paired with HTTPS, this is <strong>not</strong> a secure mechanism for\n * user authentication. In particular, the username, password, request and\n * response are all transmitted over the network without encryption.\n *\n * <h3>Sessions with Cookies</h3>\n * To establish and maintain a potentially long-lived session between client\n * and server, {@code HttpURLConnection} includes an extensible cookie manager.\n * Enable VM-wide cookie management using {@link CookieHandler} and {@link\n * CookieManager}: <pre>   {@code\n *   CookieManager cookieManager = new CookieManager();\n *   CookieHandler.setDefault(cookieManager);\n * }</pre>\n * By default, {@code CookieManager} accepts cookies from the <a\n * href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec1.html\">origin\n * server</a> only. Two other policies are included: {@link\n * CookiePolicy#ACCEPT_ALL} and {@link CookiePolicy#ACCEPT_NONE}. Implement\n * {@link CookiePolicy} to define a custom policy.\n *\n * <p>The default {@code CookieManager} keeps all accepted cookies in memory. It\n * will forget these cookies when the VM exits. Implement {@link CookieStore} to\n * define a custom cookie store.\n *\n * <p>In addition to the cookies set by HTTP responses, you may set cookies\n * programmatically. To be included in HTTP request headers, cookies must have\n * the domain and path properties set.\n *\n * <p>By default, new instances of {@code HttpCookie} work only with servers\n * that support <a href=\"http://www.ietf.org/rfc/rfc2965.txt\">RFC 2965</a>\n * cookies. Many web servers support only the older specification, <a\n * href=\"http://www.ietf.org/rfc/rfc2109.txt\">RFC 2109</a>. For compatibility\n * with the most web servers, set the cookie version to 0.\n *\n * <p>For example, to receive {@code www.twitter.com} in French: <pre>   {@code\n *   HttpCookie cookie = new HttpCookie(\"lang\", \"fr\");\n *   cookie.setDomain(\"twitter.com\");\n *   cookie.setPath(\"/\");\n *   cookie.setVersion(0);\n *   cookieManager.getCookieStore().add(new URI(\"http://twitter.com/\"), cookie);\n * }</pre>\n *\n * <h3>HTTP Methods</h3>\n * <p>{@code HttpURLConnection} uses the {@code GET} method by default. It will\n * use {@code POST} if {@link #setDoOutput setDoOutput(true)} has been called.\n * Other HTTP methods ({@code OPTIONS}, {@code HEAD}, {@code PUT}, {@code\n * DELETE} and {@code TRACE}) can be used with {@link #setRequestMethod}.\n *\n * <h3>Proxies</h3>\n * By default, this class will connect directly to the <a\n * href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec1.html\">origin\n * server</a>. It can also connect via an {@link Proxy.Type#HTTP HTTP} or {@link\n * Proxy.Type#SOCKS SOCKS} proxy. To use a proxy, use {@link\n * URL#openConnection(Proxy) URL.openConnection(Proxy)} when creating the\n * connection.\n *\n * <h3>IPv6 Support</h3>\n * <p>This class includes transparent support for IPv6. For hosts with both IPv4\n * and IPv6 addresses, it will attempt to connect to each of a host's addresses\n * until a connection is established.\n *\n * <h3>Response Caching</h3>\n * Android 4.0 (Ice Cream Sandwich, API level 15) includes a response cache. See\n * {@code android.net.http.HttpResponseCache} for instructions on enabling HTTP\n * caching in your application.\n *\n * <h3>Avoiding Bugs In Earlier Releases</h3>\n * Prior to Android 2.2 (Froyo), this class had some frustrating bugs. In\n * particular, calling {@code close()} on a readable {@code InputStream} could\n * <a href=\"http://code.google.com/p/android/issues/detail?id=2939\">poison the\n * connection pool</a>. Work around this by disabling connection pooling:\n * <pre>   {@code\n * private void disableConnectionReuseIfNecessary() {\n *   // Work around pre-Froyo bugs in HTTP connection reuse.\n *   if (Integer.parseInt(Build.VERSION.SDK) < Build.VERSION_CODES.FROYO) {\n *     System.setProperty(\"http.keepAlive\", \"false\");\n *   }\n * }}</pre>\n *\n * <p>Each instance of {@code HttpURLConnection} may be used for one\n * request/response pair. Instances of this class are not thread safe.\n *\n * @see     java.net.HttpURLConnection#disconnect()\n * @since JDK1.1\n ",
  "links" : [ "javax.net.ssl.X509KeyManager", "javax.net.ssl.SSLContext", "java.io.BufferedInputStream", "#getOutputStream()", "java.io.InputStream#read", "Proxy.Type#HTTP", "#setFixedLengthStreamingMode(int)", "java.io.BufferedOutputStream", "#getURL()", "#disconnect()", "javax.net.ssl.HostnameVerifierHostnameVerifier", "java.net.CookieHandler", "#setDoOutput(boolean)", "javax.net.ssl.X509TrustManagerX509TrustManager", "javax.net.ssl.HttpsURLConnectionHttpsURLConnection", "java.net.CookieStore", "#getContentLength()", "java.net.Authenticator", "java.io.IOException", "Proxy.Type#SOCKS", "java.net.CookiePolicy#ACCEPT_ALL", "java.net.CookiePolicy", "#setDoOutput", "#getHeaderFields()", "java.net.URL#openConnection(Proxy)", "java.net.URL#openConnection()", "javax.net.ssl.SSLSocketFactorySSLSocketFactory", "java.net.CookieManager", "#setRequestMethod", "#setChunkedStreamingMode(int)", "java.net.CookiePolicy#ACCEPT_NONE", "#getInputStream()", "#getErrorStream()" ],
  "variables" : [ {
    "name" : "method",
    "type" : "String",
    "comment" : "\n     * The HTTP method (GET,POST,PUT,etc.).\n     ",
    "links" : [ ]
  }, {
    "name" : "chunkLength",
    "type" : "int",
    "comment" : "\n     * The chunk-length when using chunked encoding streaming mode for output.\n     * A value of {@code -1} means chunked encoding is disabled for output.\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "fixedContentLength",
    "type" : "int",
    "comment" : "\n     * The fixed content-length when using fixed-length streaming mode.\n     * A value of {@code -1} means fixed-length streaming mode is disabled\n     * for output.\n     *\n     * <P> <B>NOTE:</B> {@link #fixedContentLengthLong} is recommended instead\n     * of this field, as it allows larger content lengths to be set.\n     *\n     * @since 1.5\n     ",
    "links" : [ "#fixedContentLengthLong" ]
  }, {
    "name" : "fixedContentLengthLong",
    "type" : "long",
    "comment" : "\n     * The fixed content-length when using fixed-length streaming mode.\n     * A value of {@code -1} means fixed-length streaming mode is disabled\n     * for output.\n     *\n     * @since 1.7\n     ",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_CHUNK_SIZE",
    "type" : "int",
    "comment" : " Default chunk size (including chunk header) if not specified;\n     * we want to keep this in sync with the one defined in\n     * sun.net.www.http.ChunkedOutputStream\n     ",
    "links" : [ ]
  }, {
    "name" : "responseCode",
    "type" : "int",
    "comment" : "\n     * An {@code int} representing the three digit HTTP Status-Code.\n     * <ul>\n     * <li> 1xx: Informational\n     * <li> 2xx: Success\n     * <li> 3xx: Redirection\n     * <li> 4xx: Client Error\n     * <li> 5xx: Server Error\n     * </ul>\n     ",
    "links" : [ ]
  }, {
    "name" : "responseMessage",
    "type" : "String",
    "comment" : "\n     * The HTTP response message.\n     ",
    "links" : [ ]
  }, {
    "name" : "followRedirects",
    "type" : "boolean",
    "comment" : " do we automatically follow redirects? The default is true. ",
    "links" : [ ]
  }, {
    "name" : "instanceFollowRedirects",
    "type" : "boolean",
    "comment" : "\n     * If {@code true}, the protocol will automatically follow redirects.\n     * If {@code false}, the protocol will not automatically follow\n     * redirects.\n     * <p>\n     * This field is set by the {@code setInstanceFollowRedirects}\n     * method. Its value is returned by the {@code getInstanceFollowRedirects}\n     * method.\n     * <p>\n     * Its default value is based on the value of the static followRedirects\n     * at HttpURLConnection construction time.\n     *\n     * @see     java.net.HttpURLConnection#setInstanceFollowRedirects(boolean)\n     * @see     java.net.HttpURLConnection#getInstanceFollowRedirects()\n     * @see     java.net.HttpURLConnection#setFollowRedirects(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "methods",
    "type" : "String[]",
    "comment" : " valid HTTP methods ",
    "links" : [ ]
  }, {
    "name" : "HTTP_OK",
    "type" : "int",
    "comment" : "\n     * HTTP Status-Code 200: OK.\n     ",
    "links" : [ ]
  }, {
    "name" : "HTTP_CREATED",
    "type" : "int",
    "comment" : "\n     * HTTP Status-Code 201: Created.\n     ",
    "links" : [ ]
  }, {
    "name" : "HTTP_ACCEPTED",
    "type" : "int",
    "comment" : "\n     * HTTP Status-Code 202: Accepted.\n     ",
    "links" : [ ]
  }, {
    "name" : "HTTP_NOT_AUTHORITATIVE",
    "type" : "int",
    "comment" : "\n     * HTTP Status-Code 203: Non-Authoritative Information.\n     ",
    "links" : [ ]
  }, {
    "name" : "HTTP_NO_CONTENT",
    "type" : "int",
    "comment" : "\n     * HTTP Status-Code 204: No Content.\n     ",
    "links" : [ ]
  }, {
    "name" : "HTTP_RESET",
    "type" : "int",
    "comment" : "\n     * HTTP Status-Code 205: Reset Content.\n     ",
    "links" : [ ]
  }, {
    "name" : "HTTP_PARTIAL",
    "type" : "int",
    "comment" : "\n     * HTTP Status-Code 206: Partial Content.\n     ",
    "links" : [ ]
  }, {
    "name" : "HTTP_MULT_CHOICE",
    "type" : "int",
    "comment" : "\n     * HTTP Status-Code 300: Multiple Choices.\n     ",
    "links" : [ ]
  }, {
    "name" : "HTTP_MOVED_PERM",
    "type" : "int",
    "comment" : "\n     * HTTP Status-Code 301: Moved Permanently.\n     ",
    "links" : [ ]
  }, {
    "name" : "HTTP_MOVED_TEMP",
    "type" : "int",
    "comment" : "\n     * HTTP Status-Code 302: Temporary Redirect.\n     ",
    "links" : [ ]
  }, {
    "name" : "HTTP_SEE_OTHER",
    "type" : "int",
    "comment" : "\n     * HTTP Status-Code 303: See Other.\n     ",
    "links" : [ ]
  }, {
    "name" : "HTTP_NOT_MODIFIED",
    "type" : "int",
    "comment" : "\n     * HTTP Status-Code 304: Not Modified.\n     ",
    "links" : [ ]
  }, {
    "name" : "HTTP_USE_PROXY",
    "type" : "int",
    "comment" : "\n     * HTTP Status-Code 305: Use Proxy.\n     ",
    "links" : [ ]
  }, {
    "name" : "HTTP_BAD_REQUEST",
    "type" : "int",
    "comment" : "\n     * HTTP Status-Code 400: Bad Request.\n     ",
    "links" : [ ]
  }, {
    "name" : "HTTP_UNAUTHORIZED",
    "type" : "int",
    "comment" : "\n     * HTTP Status-Code 401: Unauthorized.\n     ",
    "links" : [ ]
  }, {
    "name" : "HTTP_PAYMENT_REQUIRED",
    "type" : "int",
    "comment" : "\n     * HTTP Status-Code 402: Payment Required.\n     ",
    "links" : [ ]
  }, {
    "name" : "HTTP_FORBIDDEN",
    "type" : "int",
    "comment" : "\n     * HTTP Status-Code 403: Forbidden.\n     ",
    "links" : [ ]
  }, {
    "name" : "HTTP_NOT_FOUND",
    "type" : "int",
    "comment" : "\n     * HTTP Status-Code 404: Not Found.\n     ",
    "links" : [ ]
  }, {
    "name" : "HTTP_BAD_METHOD",
    "type" : "int",
    "comment" : "\n     * HTTP Status-Code 405: Method Not Allowed.\n     ",
    "links" : [ ]
  }, {
    "name" : "HTTP_NOT_ACCEPTABLE",
    "type" : "int",
    "comment" : "\n     * HTTP Status-Code 406: Not Acceptable.\n     ",
    "links" : [ ]
  }, {
    "name" : "HTTP_PROXY_AUTH",
    "type" : "int",
    "comment" : "\n     * HTTP Status-Code 407: Proxy Authentication Required.\n     ",
    "links" : [ ]
  }, {
    "name" : "HTTP_CLIENT_TIMEOUT",
    "type" : "int",
    "comment" : "\n     * HTTP Status-Code 408: Request Time-Out.\n     ",
    "links" : [ ]
  }, {
    "name" : "HTTP_CONFLICT",
    "type" : "int",
    "comment" : "\n     * HTTP Status-Code 409: Conflict.\n     ",
    "links" : [ ]
  }, {
    "name" : "HTTP_GONE",
    "type" : "int",
    "comment" : "\n     * HTTP Status-Code 410: Gone.\n     ",
    "links" : [ ]
  }, {
    "name" : "HTTP_LENGTH_REQUIRED",
    "type" : "int",
    "comment" : "\n     * HTTP Status-Code 411: Length Required.\n     ",
    "links" : [ ]
  }, {
    "name" : "HTTP_PRECON_FAILED",
    "type" : "int",
    "comment" : "\n     * HTTP Status-Code 412: Precondition Failed.\n     ",
    "links" : [ ]
  }, {
    "name" : "HTTP_ENTITY_TOO_LARGE",
    "type" : "int",
    "comment" : "\n     * HTTP Status-Code 413: Request Entity Too Large.\n     ",
    "links" : [ ]
  }, {
    "name" : "HTTP_REQ_TOO_LONG",
    "type" : "int",
    "comment" : "\n     * HTTP Status-Code 414: Request-URI Too Large.\n     ",
    "links" : [ ]
  }, {
    "name" : "HTTP_UNSUPPORTED_TYPE",
    "type" : "int",
    "comment" : "\n     * HTTP Status-Code 415: Unsupported Media Type.\n     ",
    "links" : [ ]
  }, {
    "name" : "HTTP_SERVER_ERROR",
    "type" : "int",
    "comment" : "\n     * HTTP Status-Code 500: Internal Server Error.\n     * @deprecated   it is misplaced and shouldn't have existed.\n     ",
    "links" : [ ]
  }, {
    "name" : "HTTP_INTERNAL_ERROR",
    "type" : "int",
    "comment" : "\n     * HTTP Status-Code 500: Internal Server Error.\n     ",
    "links" : [ ]
  }, {
    "name" : "HTTP_NOT_IMPLEMENTED",
    "type" : "int",
    "comment" : "\n     * HTTP Status-Code 501: Not Implemented.\n     ",
    "links" : [ ]
  }, {
    "name" : "HTTP_BAD_GATEWAY",
    "type" : "int",
    "comment" : "\n     * HTTP Status-Code 502: Bad Gateway.\n     ",
    "links" : [ ]
  }, {
    "name" : "HTTP_UNAVAILABLE",
    "type" : "int",
    "comment" : "\n     * HTTP Status-Code 503: Service Unavailable.\n     ",
    "links" : [ ]
  }, {
    "name" : "HTTP_GATEWAY_TIMEOUT",
    "type" : "int",
    "comment" : "\n     * HTTP Status-Code 504: Gateway Timeout.\n     ",
    "links" : [ ]
  }, {
    "name" : "HTTP_VERSION",
    "type" : "int",
    "comment" : "\n     * HTTP Status-Code 505: HTTP Version Not Supported.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String getHeaderFieldKey(int n)",
    "returnType" : "String",
    "comment" : "\n     * Returns the key for the {@code n}<sup>th</sup> header field.\n     * Some implementations may treat the {@code 0}<sup>th</sup>\n     * header field as special, i.e. as the status line returned by the HTTP\n     * server. In this case, {@link #getHeaderField(int) getHeaderField(0)} returns the status\n     * line, but {@code getHeaderFieldKey(0)} returns null.\n     *\n     * @param   n   an index, where {@code n >=0}.\n     * @return  the key for the {@code n}<sup>th</sup> header field,\n     *          or {@code null} if the key does not exist.\n     ",
    "links" : [ "#getHeaderField(int)" ]
  }, {
    "name" : "public void setFixedLengthStreamingMode(int contentLength)",
    "returnType" : "void",
    "comment" : "\n     * This method is used to enable streaming of a HTTP request body\n     * without internal buffering, when the content length is known in\n     * advance.\n     * <p>\n     * An exception will be thrown if the application\n     * attempts to write more data than the indicated\n     * content-length, or if the application closes the OutputStream\n     * before writing the indicated amount.\n     * <p>\n     * When output streaming is enabled, authentication\n     * and redirection cannot be handled automatically.\n     * A HttpRetryException will be thrown when reading\n     * the response if authentication or redirection are required.\n     * This exception can be queried for the details of the error.\n     * <p>\n     * This method must be called before the URLConnection is connected.\n     * <p>\n     * <B>NOTE:</B> {@link #setFixedLengthStreamingMode(long)} is recommended\n     * instead of this method as it allows larger content lengths to be set.\n     *\n     * @param   contentLength The number of bytes which will be written\n     *          to the OutputStream.\n     *\n     * @throws  IllegalStateException if URLConnection is already connected\n     *          or if a different streaming mode is already enabled.\n     *\n     * @throws  IllegalArgumentException if a content length less than\n     *          zero is specified.\n     *\n     * @see     #setChunkedStreamingMode(int)\n     * @since 1.5\n     ",
    "links" : [ "#setFixedLengthStreamingMode(long)" ]
  }, {
    "name" : "public void setFixedLengthStreamingMode(long contentLength)",
    "returnType" : "void",
    "comment" : "\n     * This method is used to enable streaming of a HTTP request body\n     * without internal buffering, when the content length is known in\n     * advance.\n     *\n     * <P> An exception will be thrown if the application attempts to write\n     * more data than the indicated content-length, or if the application\n     * closes the OutputStream before writing the indicated amount.\n     *\n     * <P> When output streaming is enabled, authentication and redirection\n     * cannot be handled automatically. A {@linkplain HttpRetryException} will\n     * be thrown when reading the response if authentication or redirection\n     * are required. This exception can be queried for the details of the\n     * error.\n     *\n     * <P> This method must be called before the URLConnection is connected.\n     *\n     * <P> The content length set by invoking this method takes precedence\n     * over any value set by {@link #setFixedLengthStreamingMode(int)}.\n     *\n     * @param  contentLength\n     *         The number of bytes which will be written to the OutputStream.\n     *\n     * @throws  IllegalStateException\n     *          if URLConnection is already connected or if a different\n     *          streaming mode is already enabled.\n     *\n     * @throws  IllegalArgumentException\n     *          if a content length less than zero is specified.\n     *\n     * @since 1.7\n     ",
    "links" : [ "#setFixedLengthStreamingMode(int)" ]
  }, {
    "name" : "public void setChunkedStreamingMode(int chunklen)",
    "returnType" : "void",
    "comment" : "\n     * This method is used to enable streaming of a HTTP request body\n     * without internal buffering, when the content length is <b>not</b>\n     * known in advance. In this mode, chunked transfer encoding\n     * is used to send the request body. Note, not all HTTP servers\n     * support this mode.\n     * <p>\n     * When output streaming is enabled, authentication\n     * and redirection cannot be handled automatically.\n     * A HttpRetryException will be thrown when reading\n     * the response if authentication or redirection are required.\n     * This exception can be queried for the details of the error.\n     * <p>\n     * This method must be called before the URLConnection is connected.\n     *\n     * @param   chunklen The number of bytes to write in each chunk.\n     *          If chunklen is less than or equal to zero, a default\n     *          value will be used.\n     *\n     * @throws  IllegalStateException if URLConnection is already connected\n     *          or if a different streaming mode is already enabled.\n     *\n     * @see     #setFixedLengthStreamingMode(int)\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getHeaderField(int n)",
    "returnType" : "String",
    "comment" : "\n     * Returns the value for the {@code n}<sup>th</sup> header field.\n     * Some implementations may treat the {@code 0}<sup>th</sup>\n     * header field as special, i.e. as the status line returned by the HTTP\n     * server.\n     * <p>\n     * This method can be used in conjunction with the\n     * {@link #getHeaderFieldKey getHeaderFieldKey} method to iterate through all\n     * the headers in the message.\n     *\n     * @param   n   an index, where {@code n>=0}.\n     * @return  the value of the {@code n}<sup>th</sup> header field,\n     *          or {@code null} if the value does not exist.\n     * @see     java.net.HttpURLConnection#getHeaderFieldKey(int)\n     ",
    "links" : [ "#getHeaderFieldKey" ]
  }, {
    "name" : "public static void setFollowRedirects(boolean set)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether HTTP redirects  (requests with response code 3xx) should\n     * be automatically followed by this class.  True by default.  Applets\n     * cannot change this variable.\n     * <p>\n     * If there is a security manager, this method first calls\n     * the security manager's {@code checkSetFactory} method\n     * to ensure the operation is allowed.\n     * This could result in a SecurityException.\n     *\n     * @param set a {@code boolean} indicating whether or not\n     * to follow HTTP redirects.\n     * @exception  SecurityException  if a security manager exists and its\n     *             {@code checkSetFactory} method doesn't\n     *             allow the operation.\n     * @see        SecurityManager#checkSetFactory\n     * @see #getFollowRedirects()\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean getFollowRedirects()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns a {@code boolean} indicating\n     * whether or not HTTP redirects (3xx) should\n     * be automatically followed.\n     *\n     * @return {@code true} if HTTP redirects should\n     * be automatically followed, {@code false} if not.\n     * @see #setFollowRedirects(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setInstanceFollowRedirects(boolean followRedirects)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether HTTP redirects (requests with response code 3xx) should\n     * be automatically followed by this {@code HttpURLConnection}\n     * instance.\n     * <p>\n     * The default value comes from followRedirects, which defaults to\n     * true.\n     *\n     * @param followRedirects a {@code boolean} indicating\n     * whether or not to follow HTTP redirects.\n     *\n     * @see    java.net.HttpURLConnection#instanceFollowRedirects\n     * @see #getInstanceFollowRedirects\n     * @since 1.3\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getInstanceFollowRedirects()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the value of this {@code HttpURLConnection}'s\n     * {@code instanceFollowRedirects} field.\n     *\n     * @return  the value of this {@code HttpURLConnection}'s\n     *          {@code instanceFollowRedirects} field.\n     * @see     java.net.HttpURLConnection#instanceFollowRedirects\n     * @see #setInstanceFollowRedirects(boolean)\n     * @since 1.3\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setRequestMethod(String method) throws ProtocolException",
    "returnType" : "void",
    "comment" : "\n     * Set the method for the URL request, one of:\n     * <UL>\n     *  <LI>GET\n     *  <LI>POST\n     *  <LI>HEAD\n     *  <LI>OPTIONS\n     *  <LI>PUT\n     *  <LI>DELETE\n     *  <LI>TRACE\n     * </UL> are legal, subject to protocol restrictions.  The default\n     * method is GET.\n     *\n     * @param method the HTTP method\n     * @exception ProtocolException if the method cannot be reset or if\n     *              the requested method isn't valid for HTTP.\n     * @exception SecurityException if a security manager is set and the\n     *              method is \"TRACE\", but the \"allowHttpTrace\"\n     *              NetPermission is not granted.\n     * @see #getRequestMethod()\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getRequestMethod()",
    "returnType" : "String",
    "comment" : "\n     * Get the request method.\n     * @return the HTTP request method\n     * @see #setRequestMethod(java.lang.String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getResponseCode() throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Gets the status code from an HTTP response message.\n     * For example, in the case of the following status lines:\n     * <PRE>\n     * HTTP/1.0 200 OK\n     * HTTP/1.0 401 Unauthorized\n     * </PRE>\n     * It will return 200 and 401 respectively.\n     * Returns -1 if no code can be discerned\n     * from the response (i.e., the response is not valid HTTP).\n     * @throws IOException if an error occurred connecting to the server.\n     * @return the HTTP Status-Code, or -1\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getResponseMessage() throws IOException",
    "returnType" : "String",
    "comment" : "\n     * Gets the HTTP response message, if any, returned along with the\n     * response code from a server.  From responses like:\n     * <PRE>\n     * HTTP/1.0 200 OK\n     * HTTP/1.0 404 Not Found\n     * </PRE>\n     * Extracts the Strings \"OK\" and \"Not Found\" respectively.\n     * Returns null if none could be discerned from the responses\n     * (the result was not valid HTTP).\n     * @throws IOException if an error occurred connecting to the server.\n     * @return the HTTP response message, or {@code null}\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getHeaderFieldDate(String name, long Default)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void disconnect()",
    "returnType" : "void",
    "comment" : "\n     * Indicates that other requests to the server\n     * are unlikely in the near future. Calling disconnect()\n     * should not imply that this HttpURLConnection\n     * instance can be reused for other requests.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean usingProxy()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates if the connection is going through a proxy.\n     * @return a boolean indicating if the connection is\n     * using a proxy.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Permission getPermission() throws IOException",
    "returnType" : "Permission",
    "comment" : "\n     * Returns a {@link SocketPermission} object representing the\n     * permission necessary to connect to the destination host and port.\n     *\n     * @exception IOException if an error occurs while computing\n     *            the permission.\n     *\n     * @return a {@code SocketPermission} object representing the\n     *         permission necessary to connect to the destination\n     *         host and port.\n     ",
    "links" : [ "java.net.SocketPermission" ]
  }, {
    "name" : "public InputStream getErrorStream()",
    "returnType" : "InputStream",
    "comment" : "\n    * Returns the error stream if the connection failed\n    * but the server sent useful data nonetheless. The\n    * typical example is when an HTTP server responds\n    * with a 404, which will cause a FileNotFoundException\n    * to be thrown in connect, but the server sent an HTML\n    * help page with suggestions as to what to do.\n    *\n    * <p>This method will not cause a connection to be initiated.  If\n    * the connection was not connected, or if the server did not have\n    * an error while connecting or if the server had an error but\n    * no error data was sent, this method will return null. This is\n    * the default.\n    *\n    * @return an error stream if any, null if there have been no\n    * errors, the connection is not connected or the server sent no\n    * useful data.\n    ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public String getHeaderFieldKey(int n)", "public void setFixedLengthStreamingMode(int contentLength)", "public void setFixedLengthStreamingMode(long contentLength)", "public void setChunkedStreamingMode(int chunklen)", "public String getHeaderField(int n)", "public static void setFollowRedirects(boolean set)", "public static boolean getFollowRedirects()", "public void setInstanceFollowRedirects(boolean followRedirects)", "public boolean getInstanceFollowRedirects()", "public void setRequestMethod(String method) throws ProtocolException", "public String getRequestMethod()", "public int getResponseCode() throws IOException", "public String getResponseMessage() throws IOException", "public long getHeaderFieldDate(String name, long Default)", "public abstract void disconnect()", "public abstract boolean usingProxy()", "public Permission getPermission() throws IOException", "public InputStream getErrorStream()" ],
  "variableNames" : [ "method", "chunkLength", "fixedContentLength", "fixedContentLengthLong", "DEFAULT_CHUNK_SIZE", "responseCode", "responseMessage", "followRedirects", "instanceFollowRedirects", "methods", "HTTP_OK", "HTTP_CREATED", "HTTP_ACCEPTED", "HTTP_NOT_AUTHORITATIVE", "HTTP_NO_CONTENT", "HTTP_RESET", "HTTP_PARTIAL", "HTTP_MULT_CHOICE", "HTTP_MOVED_PERM", "HTTP_MOVED_TEMP", "HTTP_SEE_OTHER", "HTTP_NOT_MODIFIED", "HTTP_USE_PROXY", "HTTP_BAD_REQUEST", "HTTP_UNAUTHORIZED", "HTTP_PAYMENT_REQUIRED", "HTTP_FORBIDDEN", "HTTP_NOT_FOUND", "HTTP_BAD_METHOD", "HTTP_NOT_ACCEPTABLE", "HTTP_PROXY_AUTH", "HTTP_CLIENT_TIMEOUT", "HTTP_CONFLICT", "HTTP_GONE", "HTTP_LENGTH_REQUIRED", "HTTP_PRECON_FAILED", "HTTP_ENTITY_TOO_LARGE", "HTTP_REQ_TOO_LONG", "HTTP_UNSUPPORTED_TYPE", "HTTP_SERVER_ERROR", "HTTP_INTERNAL_ERROR", "HTTP_NOT_IMPLEMENTED", "HTTP_BAD_GATEWAY", "HTTP_UNAVAILABLE", "HTTP_GATEWAY_TIMEOUT", "HTTP_VERSION" ]
}