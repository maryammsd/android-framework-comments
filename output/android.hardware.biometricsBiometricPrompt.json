{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/hardware/biometrics/BiometricPrompt.java",
  "packageName" : "android.hardware.biometrics",
  "className" : "BiometricPrompt",
  "comment" : "\n * A class that manages a system-provided biometric dialog.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_TITLE",
    "type" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_USE_DEFAULT_TITLE",
    "type" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_SUBTITLE",
    "type" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_DESCRIPTION",
    "type" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_DEVICE_CREDENTIAL_TITLE",
    "type" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_DEVICE_CREDENTIAL_SUBTITLE",
    "type" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_DEVICE_CREDENTIAL_DESCRIPTION",
    "type" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_NEGATIVE_TEXT",
    "type" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_REQUIRE_CONFIRMATION",
    "type" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_ALLOW_DEVICE_CREDENTIAL",
    "type" : "String",
    "comment" : "\n     * This is deprecated. Internally we should use {@link #KEY_AUTHENTICATORS_ALLOWED}\n     * @hide\n     ",
    "links" : [ "#KEY_AUTHENTICATORS_ALLOWED" ]
  }, {
    "name" : "KEY_AUTHENTICATORS_ALLOWED",
    "type" : "String",
    "comment" : "\n     * If this key is set, we will ignore {@link #KEY_ALLOW_DEVICE_CREDENTIAL}\n     * @hide\n     ",
    "links" : [ "#KEY_ALLOW_DEVICE_CREDENTIAL" ]
  }, {
    "name" : "EXTRA_DISALLOW_BIOMETRICS_IF_POLICY_EXISTS",
    "type" : "String",
    "comment" : "\n     * If this is set, check the Device Policy Manager for allowed biometrics.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_RECEIVE_SYSTEM_EVENTS",
    "type" : "String",
    "comment" : "\n     * Request to receive system events, such as back gesture/button. See\n     * {@link AuthenticationCallback#onSystemEvent(int)}\n     * @hide\n     ",
    "links" : [ "AuthenticationCallback#onSystemEvent" ]
  }, {
    "name" : "HIDE_DIALOG_DELAY",
    "type" : "int",
    "comment" : " ms",
    "links" : [ ]
  }, {
    "name" : "DISMISSED_REASON_BIOMETRIC_CONFIRMED",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "DISMISSED_REASON_NEGATIVE",
    "type" : "int",
    "comment" : "\n     * Dialog is done animating away after user clicked on the button set via\n     * {@link BiometricPrompt.Builder#setNegativeButton(CharSequence, Executor,\n     * DialogInterface.OnClickListener)}.\n     * @hide\n     ",
    "links" : [ "BiometricPrompt.Builder#setNegativeButton" ]
  }, {
    "name" : "DISMISSED_REASON_USER_CANCEL",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "DISMISSED_REASON_BIOMETRIC_CONFIRM_NOT_REQUIRED",
    "type" : "int",
    "comment" : "\n     * Authenticated, confirmation not required. Dialog animated away.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "DISMISSED_REASON_ERROR",
    "type" : "int",
    "comment" : "\n     * Error message shown on SystemUI. When BiometricService receives this, the UI is already\n     * gone.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "DISMISSED_REASON_SERVER_REQUESTED",
    "type" : "int",
    "comment" : "\n     * Dialog dismissal requested by BiometricService.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "DISMISSED_REASON_CREDENTIAL_CONFIRMED",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mToken",
    "type" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IAuthService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBundle",
    "type" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPositiveButtonInfo",
    "type" : "ButtonInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNegativeButtonInfo",
    "type" : "ButtonInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCryptoObject",
    "type" : "CryptoObject",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExecutor",
    "type" : "Executor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAuthenticationCallback",
    "type" : "AuthenticationCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBiometricServiceReceiver",
    "type" : "IBiometricServiceReceiver",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "AUTHENTICATION_RESULT_TYPE_DEVICE_CREDENTIAL",
    "type" : "int",
    "comment" : "\n     * Authentication type reported by {@link AuthenticationResult} when the user authenticated by\n     * entering their device PIN, pattern, or password.\n     ",
    "links" : [ "AuthenticationResult" ]
  }, {
    "name" : "AUTHENTICATION_RESULT_TYPE_BIOMETRIC",
    "type" : "int",
    "comment" : "\n     * Authentication type reported by {@link AuthenticationResult} when the user authenticated by\n     * presenting some form of biometric (e.g. fingerprint or face).\n     ",
    "links" : [ "AuthenticationResult" ]
  } ],
  "methods" : [ {
    "name" : "public CharSequence getTitle()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Gets the title for the prompt, as set by {@link Builder#setTitle(CharSequence)}.\n     * @return The title of the prompt, which is guaranteed to be non-null.\n     ",
    "links" : [ "Builder#setTitle" ]
  }, {
    "name" : "public boolean shouldUseDefaultTitle()",
    "returnType" : "boolean",
    "comment" : "\n     * Whether to use a default modality-specific title. For internal use only.\n     * @return See {@link Builder#setUseDefaultTitle()}.\n     * @hide\n     ",
    "links" : [ "Builder#setUseDefaultTitle" ]
  }, {
    "name" : "public CharSequence getSubtitle()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Gets the subtitle for the prompt, as set by {@link Builder#setSubtitle(CharSequence)}.\n     * @return The subtitle for the prompt, or null if the prompt has no subtitle.\n     ",
    "links" : [ "Builder#setSubtitle" ]
  }, {
    "name" : "public CharSequence getDescription()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Gets the description for the prompt, as set by {@link Builder#setDescription(CharSequence)}.\n     * @return The description for the prompt, or null if the prompt has no description.\n     ",
    "links" : [ "Builder#setDescription" ]
  }, {
    "name" : "public CharSequence getNegativeButtonText()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Gets the negative button text for the prompt, as set by\n     * {@link Builder#setNegativeButton(CharSequence, Executor, DialogInterface.OnClickListener)}.\n     * @return The negative button text for the prompt, or null if no negative button text was set.\n     ",
    "links" : [ "Builder#setNegativeButton" ]
  }, {
    "name" : "public boolean isConfirmationRequired()",
    "returnType" : "boolean",
    "comment" : "\n     * Determines if explicit user confirmation is required by the prompt, as set by\n     * {@link Builder#setConfirmationRequired(boolean)}.\n     *\n     * @return true if explicit user confirmation is required, or false otherwise.\n     ",
    "links" : [ "Builder#setConfirmationRequired" ]
  }, {
    "name" : "public int getAllowedAuthenticators()",
    "returnType" : "int",
    "comment" : "\n     * Gets the type(s) of authenticators that may be invoked by the prompt to authenticate the\n     * user, as set by {@link Builder#setAllowedAuthenticators(int)}.\n     *\n     * @return A bit field representing the type(s) of authenticators that may be invoked by the\n     * prompt (as defined by {@link Authenticators}), or 0 if this field was not set.\n     ",
    "links" : [ "Builder#setAllowedAuthenticators", "Authenticators" ]
  }, {
    "name" : "public void authenticateUser(@NonNull CancellationSignal cancel, @NonNull @CallbackExecutor Executor executor, @NonNull AuthenticationCallback callback, int userId)",
    "returnType" : "void",
    "comment" : "\n     * Authenticates for the given user.\n     *\n     * @param cancel An object that can be used to cancel authentication\n     * @param executor An executor to handle callback events\n     * @param callback An object to receive authentication events\n     * @param userId The user to authenticate\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void authenticate(@NonNull CryptoObject crypto, @NonNull CancellationSignal cancel, @NonNull @CallbackExecutor Executor executor, @NonNull AuthenticationCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * This call warms up the biometric hardware, displays a system-provided dialog, and starts\n     * scanning for a biometric. It terminates when {@link\n     * AuthenticationCallback#onAuthenticationError(int, CharSequence)} is called, when {@link\n     * AuthenticationCallback#onAuthenticationSucceeded( AuthenticationResult)}, or when the user\n     * dismisses the system-provided dialog, at which point the crypto object becomes invalid. This\n     * operation can be canceled by using the provided cancel object. The application will receive\n     * authentication errors through {@link AuthenticationCallback}, and button events through the\n     * corresponding callback set in {@link Builder#setNegativeButton(CharSequence, Executor,\n     * DialogInterface.OnClickListener)}. It is safe to reuse the {@link BiometricPrompt} object,\n     * and calling {@link BiometricPrompt#authenticate(CancellationSignal, Executor,\n     * AuthenticationCallback)} while an existing authentication attempt is occurring will stop the\n     * previous client and start a new authentication. The interrupted client will receive a\n     * cancelled notification through {@link AuthenticationCallback#onAuthenticationError(int,\n     * CharSequence)}.\n     *\n     * <p>Note: Applications generally should not cancel and start authentication in quick\n     * succession. For example, to properly handle authentication across configuration changes, it's\n     * recommended to use BiometricPrompt in a fragment with setRetainInstance(true). By doing so,\n     * the application will not need to cancel/restart authentication during the configuration\n     * change.\n     *\n     * <p>Per the Android CDD, only biometric authenticators that meet or exceed the requirements\n     * for <strong>Strong</strong> are permitted to integrate with Keystore to perform related\n     * cryptographic operations. Therefore, it is an error to call this method after explicitly\n     * calling {@link Builder#setAllowedAuthenticators(int)} with any biometric strength other than\n     * {@link Authenticators#BIOMETRIC_STRONG}.\n     *\n     * @throws IllegalArgumentException If any argument is null, or if the allowed biometric\n     * authenticator strength is explicitly set to {@link Authenticators#BIOMETRIC_WEAK}. Prior to\n     * {@link android.os.Build.VERSION_CODES#R}, this exception is also thrown if\n     * {@link Builder#setDeviceCredentialAllowed(boolean)} was explicitly set to true.\n     *\n     * @param crypto A cryptographic operation to be unlocked after successful authentication.\n     * @param cancel An object that can be used to cancel authentication.\n     * @param executor An executor to handle callback events.\n     * @param callback An object to receive authentication events.\n     ",
    "links" : [ "AuthenticationCallback", "Builder#setNegativeButton", "BiometricPrompt", "BiometricPrompt#authenticate", "AuthenticationCallback#onAuthenticationError", "Builder#setAllowedAuthenticators", "Authenticators#BIOMETRIC_STRONG", "Authenticators#BIOMETRIC_WEAK", "android.os.Build.VERSION_CODES#R", "Builder#setDeviceCredentialAllowed" ]
  }, {
    "name" : "public void authenticate(@NonNull CancellationSignal cancel, @NonNull @CallbackExecutor Executor executor, @NonNull AuthenticationCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * This call warms up the biometric hardware, displays a system-provided dialog, and starts\n     * scanning for a biometric. It terminates when {@link\n     * AuthenticationCallback#onAuthenticationError(int, CharSequence)} is called, when {@link\n     * AuthenticationCallback#onAuthenticationSucceeded( AuthenticationResult)} is called, or when\n     * the user dismisses the system-provided dialog.  This operation can be canceled by using the\n     * provided cancel object. The application will receive authentication errors through {@link\n     * AuthenticationCallback}, and button events through the corresponding callback set in {@link\n     * Builder#setNegativeButton(CharSequence, Executor, DialogInterface.OnClickListener)}.  It is\n     * safe to reuse the {@link BiometricPrompt} object, and calling {@link\n     * BiometricPrompt#authenticate(CancellationSignal, Executor, AuthenticationCallback)} while\n     * an existing authentication attempt is occurring will stop the previous client and start a new\n     * authentication. The interrupted client will receive a cancelled notification through {@link\n     * AuthenticationCallback#onAuthenticationError(int, CharSequence)}.\n     *\n     * <p>Note: Applications generally should not cancel and start authentication in quick\n     * succession. For example, to properly handle authentication across configuration changes, it's\n     * recommended to use BiometricPrompt in a fragment with setRetainInstance(true). By doing so,\n     * the application will not need to cancel/restart authentication during the configuration\n     * change.\n     *\n     * @throws IllegalArgumentException If any of the arguments are null.\n     *\n     * @param cancel An object that can be used to cancel authentication.\n     * @param executor An executor to handle callback events.\n     * @param callback An object to receive authentication events.\n     ",
    "links" : [ "BiometricPrompt" ]
  }, {
    "name" : "private void cancelAuthentication()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void authenticateInternal(@Nullable CryptoObject crypto, @NonNull CancellationSignal cancel, @NonNull @CallbackExecutor Executor executor, @NonNull AuthenticationCallback callback, int userId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "KEY_TITLE", "KEY_USE_DEFAULT_TITLE", "KEY_SUBTITLE", "KEY_DESCRIPTION", "KEY_DEVICE_CREDENTIAL_TITLE", "KEY_DEVICE_CREDENTIAL_SUBTITLE", "KEY_DEVICE_CREDENTIAL_DESCRIPTION", "KEY_NEGATIVE_TEXT", "KEY_REQUIRE_CONFIRMATION", "KEY_ALLOW_DEVICE_CREDENTIAL", "KEY_AUTHENTICATORS_ALLOWED", "EXTRA_DISALLOW_BIOMETRICS_IF_POLICY_EXISTS", "KEY_RECEIVE_SYSTEM_EVENTS", "HIDE_DIALOG_DELAY", "DISMISSED_REASON_BIOMETRIC_CONFIRMED", "DISMISSED_REASON_NEGATIVE", "DISMISSED_REASON_USER_CANCEL", "DISMISSED_REASON_BIOMETRIC_CONFIRM_NOT_REQUIRED", "DISMISSED_REASON_ERROR", "DISMISSED_REASON_SERVER_REQUESTED", "DISMISSED_REASON_CREDENTIAL_CONFIRMED", "mToken", "mContext", "mService", "mBundle", "mPositiveButtonInfo", "mNegativeButtonInfo", "mCryptoObject", "mExecutor", "mAuthenticationCallback", "mBiometricServiceReceiver", "AUTHENTICATION_RESULT_TYPE_DEVICE_CREDENTIAL", "AUTHENTICATION_RESULT_TYPE_BIOMETRIC" ],
  "methodNames" : [ "public CharSequence getTitle()", "public boolean shouldUseDefaultTitle()", "public CharSequence getSubtitle()", "public CharSequence getDescription()", "public CharSequence getNegativeButtonText()", "public boolean isConfirmationRequired()", "public int getAllowedAuthenticators()", "public void authenticateUser(@NonNull CancellationSignal cancel, @NonNull @CallbackExecutor Executor executor, @NonNull AuthenticationCallback callback, int userId)", "public void authenticate(@NonNull CryptoObject crypto, @NonNull CancellationSignal cancel, @NonNull @CallbackExecutor Executor executor, @NonNull AuthenticationCallback callback)", "public void authenticate(@NonNull CancellationSignal cancel, @NonNull @CallbackExecutor Executor executor, @NonNull AuthenticationCallback callback)", "private void cancelAuthentication()", "private void authenticateInternal(@Nullable CryptoObject crypto, @NonNull CancellationSignal cancel, @NonNull @CallbackExecutor Executor executor, @NonNull AuthenticationCallback callback, int userId)" ]
}