{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/widget/AdapterView.java",
  "packageName" : "android.widget",
  "className" : "AdapterView",
  "comment" : "\n * An AdapterView is a view whose children are determined by an {@link Adapter}.\n *\n * <p>\n * See {@link ListView}, {@link GridView}, {@link Spinner} and\n *      {@link Gallery} for commonly used subclasses of AdapterView.\n *\n * <div class=\"special reference\">\n * <h3>Developer Guides</h3>\n * <p>For more information about using AdapterView, read the\n * <a href=\"{@docRoot}guide/topics/ui/binding.html\">Binding to Data with AdapterView</a>\n * developer guide.</p></div>\n ",
  "links" : [ "android.widget.Gallery", "android.widget.Adapter", "android.widget.GridView", "android.widget.ListView", "android.widget.Spinner" ],
  "variables" : [ {
    "name" : "ITEM_VIEW_TYPE_IGNORE",
    "type" : "int",
    "comment" : "\n     * The item view type returned by {@link Adapter#getItemViewType(int)} when\n     * the adapter does not want the item's view recycled.\n     ",
    "links" : [ "android.widget.Adapter#getItemViewType(int)" ]
  }, {
    "name" : "ITEM_VIEW_TYPE_HEADER_OR_FOOTER",
    "type" : "int",
    "comment" : "\n     * The item view type returned by {@link Adapter#getItemViewType(int)} when\n     * the item is a header or footer.\n     ",
    "links" : [ "android.widget.Adapter#getItemViewType(int)" ]
  }, {
    "name" : "mFirstPosition",
    "type" : "int",
    "comment" : "\n     * The position of the first child displayed\n     ",
    "links" : [ ]
  }, {
    "name" : "mSpecificTop",
    "type" : "int",
    "comment" : "\n     * The offset in pixels from the top of the AdapterView to the top\n     * of the view to select during the next layout.\n     ",
    "links" : [ ]
  }, {
    "name" : "mSyncPosition",
    "type" : "int",
    "comment" : "\n     * Position from which to start looking for mSyncRowId\n     ",
    "links" : [ ]
  }, {
    "name" : "mSyncRowId",
    "type" : "long",
    "comment" : "\n     * Row id to look for when data has changed\n     ",
    "links" : [ ]
  }, {
    "name" : "mSyncHeight",
    "type" : "long",
    "comment" : "\n     * Height of the view when mSyncPosition and mSyncRowId where set\n     ",
    "links" : [ ]
  }, {
    "name" : "mNeedSync",
    "type" : "boolean",
    "comment" : "\n     * True if we need to sync to mSyncRowId\n     ",
    "links" : [ ]
  }, {
    "name" : "mSyncMode",
    "type" : "int",
    "comment" : "\n     * Indicates whether to sync based on the selection or position. Possible\n     * values are {@link #SYNC_SELECTED_POSITION} or\n     * {@link #SYNC_FIRST_POSITION}.\n     ",
    "links" : [ "#SYNC_SELECTED_POSITION", "#SYNC_FIRST_POSITION" ]
  }, {
    "name" : "mLayoutHeight",
    "type" : "int",
    "comment" : "\n     * Our height after the last layout\n     ",
    "links" : [ ]
  }, {
    "name" : "SYNC_SELECTED_POSITION",
    "type" : "int",
    "comment" : "\n     * Sync based on the selected child\n     ",
    "links" : [ ]
  }, {
    "name" : "SYNC_FIRST_POSITION",
    "type" : "int",
    "comment" : "\n     * Sync based on the first child displayed\n     ",
    "links" : [ ]
  }, {
    "name" : "SYNC_MAX_DURATION_MILLIS",
    "type" : "int",
    "comment" : "\n     * Maximum amount of time to spend in {@link #findSyncPosition()}\n     ",
    "links" : [ "#findSyncPosition()" ]
  }, {
    "name" : "mInLayout",
    "type" : "boolean",
    "comment" : "\n     * Indicates that this view is currently being laid out.\n     ",
    "links" : [ ]
  }, {
    "name" : "mOnItemSelectedListener",
    "type" : "OnItemSelectedListener",
    "comment" : "\n     * The listener that receives notifications when an item is selected.\n     ",
    "links" : [ ]
  }, {
    "name" : "mOnItemClickListener",
    "type" : "OnItemClickListener",
    "comment" : "\n     * The listener that receives notifications when an item is clicked.\n     ",
    "links" : [ ]
  }, {
    "name" : "mOnItemLongClickListener",
    "type" : "OnItemLongClickListener",
    "comment" : "\n     * The listener that receives notifications when an item is long clicked.\n     ",
    "links" : [ ]
  }, {
    "name" : "mDataChanged",
    "type" : "boolean",
    "comment" : "\n     * True if the data has changed since the last layout\n     ",
    "links" : [ ]
  }, {
    "name" : "mNextSelectedPosition",
    "type" : "int",
    "comment" : "\n     * The position within the adapter's data set of the item to select\n     * during the next layout.\n     ",
    "links" : [ ]
  }, {
    "name" : "mNextSelectedRowId",
    "type" : "long",
    "comment" : "\n     * The item id of the item to select during the next layout.\n     ",
    "links" : [ ]
  }, {
    "name" : "mSelectedPosition",
    "type" : "int",
    "comment" : "\n     * The position within the adapter's data set of the currently selected item.\n     ",
    "links" : [ ]
  }, {
    "name" : "mSelectedRowId",
    "type" : "long",
    "comment" : "\n     * The item id of the currently selected item.\n     ",
    "links" : [ ]
  }, {
    "name" : "mEmptyView",
    "type" : "View",
    "comment" : "\n     * View to show if there are no items to show.\n     ",
    "links" : [ ]
  }, {
    "name" : "mItemCount",
    "type" : "int",
    "comment" : "\n     * The number of items in the current adapter.\n     ",
    "links" : [ ]
  }, {
    "name" : "mOldItemCount",
    "type" : "int",
    "comment" : "\n     * The number of items in the adapter before a data changed event occurred.\n     ",
    "links" : [ ]
  }, {
    "name" : "INVALID_POSITION",
    "type" : "int",
    "comment" : "\n     * Represents an invalid position. All valid positions are in the range 0 to 1 less than the\n     * number of items in the current adapter.\n     ",
    "links" : [ ]
  }, {
    "name" : "INVALID_ROW_ID",
    "type" : "long",
    "comment" : "\n     * Represents an empty or invalid row id\n     ",
    "links" : [ ]
  }, {
    "name" : "mOldSelectedPosition",
    "type" : "int",
    "comment" : "\n     * The last selected position we used when notifying\n     ",
    "links" : [ ]
  }, {
    "name" : "mOldSelectedRowId",
    "type" : "long",
    "comment" : "\n     * The id of the last selected position we used when notifying\n     ",
    "links" : [ ]
  }, {
    "name" : "mDesiredFocusableState",
    "type" : "int",
    "comment" : "\n     * Indicates what focusable state is requested when calling setFocusable().\n     * In addition to this, this view has other criteria for actually\n     * determining the focusable state (such as whether its empty or the text\n     * filter is shown).\n     *\n     * @see #setFocusable(boolean)\n     * @see #checkFocus()\n     ",
    "links" : [ ]
  }, {
    "name" : "mDesiredFocusableInTouchModeState",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSelectionNotifier",
    "type" : "SelectionNotifier",
    "comment" : " Lazily-constructed runnable for dispatching selection events. ",
    "links" : [ ]
  }, {
    "name" : "mPendingSelectionNotifier",
    "type" : "SelectionNotifier",
    "comment" : " Selection notifier that's waiting for the next layout pass. ",
    "links" : [ ]
  }, {
    "name" : "mBlockLayoutRequests",
    "type" : "boolean",
    "comment" : "\n     * When set to true, calls to requestLayout() will not propagate up the parent hierarchy.\n     * This is used to layout the children during a layout pass.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setOnItemClickListener(@Nullable OnItemClickListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Register a callback to be invoked when an item in this AdapterView has\n     * been clicked.\n     *\n     * @param listener The callback that will be invoked.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final OnItemClickListener getOnItemClickListener()",
    "returnType" : "OnItemClickListener",
    "comment" : "\n     * @return The callback to be invoked with an item in this AdapterView has\n     *         been clicked, or null if no callback has been set.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean performItemClick(View view, int position, long id)",
    "returnType" : "boolean",
    "comment" : "\n     * Call the OnItemClickListener, if it is defined. Performs all normal\n     * actions associated with clicking: reporting accessibility event, playing\n     * a sound, etc.\n     *\n     * @param view The view within the AdapterView that was clicked.\n     * @param position The position of the view in the adapter.\n     * @param id The row id of the item that was clicked.\n     * @return True if there was an assigned OnItemClickListener that was\n     *         called, false otherwise is returned.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOnItemLongClickListener(OnItemLongClickListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Register a callback to be invoked when an item in this AdapterView has\n     * been clicked and held\n     *\n     * @param listener The callback that will run\n     ",
    "links" : [ ]
  }, {
    "name" : "public final OnItemLongClickListener getOnItemLongClickListener()",
    "returnType" : "OnItemLongClickListener",
    "comment" : "\n     * @return The callback to be invoked with an item in this AdapterView has\n     *         been clicked and held, or null if no callback has been set.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOnItemSelectedListener(@Nullable OnItemSelectedListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Register a callback to be invoked when an item in this AdapterView has\n     * been selected.\n     *\n     * @param listener The callback that will run\n     ",
    "links" : [ ]
  }, {
    "name" : "public final OnItemSelectedListener getOnItemSelectedListener()",
    "returnType" : "OnItemSelectedListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract T getAdapter()",
    "returnType" : "T",
    "comment" : "\n     * Returns the adapter currently associated with this widget.\n     *\n     * @return The adapter used to provide this view's content.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setAdapter(T adapter)",
    "returnType" : "void",
    "comment" : "\n     * Sets the adapter that provides the data and the views to represent the data\n     * in this widget.\n     *\n     * @param adapter The adapter to use to create this view's content.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addView(View child)",
    "returnType" : "void",
    "comment" : "\n     * This method is not supported and throws an UnsupportedOperationException when called.\n     *\n     * @param child Ignored.\n     *\n     * @throws UnsupportedOperationException Every time this method is invoked.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addView(View child, int index)",
    "returnType" : "void",
    "comment" : "\n     * This method is not supported and throws an UnsupportedOperationException when called.\n     *\n     * @param child Ignored.\n     * @param index Ignored.\n     *\n     * @throws UnsupportedOperationException Every time this method is invoked.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addView(View child, LayoutParams params)",
    "returnType" : "void",
    "comment" : "\n     * This method is not supported and throws an UnsupportedOperationException when called.\n     *\n     * @param child Ignored.\n     * @param params Ignored.\n     *\n     * @throws UnsupportedOperationException Every time this method is invoked.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addView(View child, int index, LayoutParams params)",
    "returnType" : "void",
    "comment" : "\n     * This method is not supported and throws an UnsupportedOperationException when called.\n     *\n     * @param child Ignored.\n     * @param index Ignored.\n     * @param params Ignored.\n     *\n     * @throws UnsupportedOperationException Every time this method is invoked.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removeView(View child)",
    "returnType" : "void",
    "comment" : "\n     * This method is not supported and throws an UnsupportedOperationException when called.\n     *\n     * @param child Ignored.\n     *\n     * @throws UnsupportedOperationException Every time this method is invoked.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removeViewAt(int index)",
    "returnType" : "void",
    "comment" : "\n     * This method is not supported and throws an UnsupportedOperationException when called.\n     *\n     * @param index Ignored.\n     *\n     * @throws UnsupportedOperationException Every time this method is invoked.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removeAllViews()",
    "returnType" : "void",
    "comment" : "\n     * This method is not supported and throws an UnsupportedOperationException when called.\n     *\n     * @throws UnsupportedOperationException Every time this method is invoked.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void onLayout(boolean changed, int left, int top, int right, int bottom)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getSelectedItemPosition()",
    "returnType" : "int",
    "comment" : "\n     * Return the position of the currently selected item within the adapter's data set\n     *\n     * @return int Position (starting at 0), or {@link #INVALID_POSITION} if there is nothing selected.\n     ",
    "links" : [ "#INVALID_POSITION" ]
  }, {
    "name" : "public long getSelectedItemId()",
    "returnType" : "long",
    "comment" : "\n     * @return The id corresponding to the currently selected item, or {@link #INVALID_ROW_ID}\n     * if nothing is selected.\n     ",
    "links" : [ "#INVALID_ROW_ID" ]
  }, {
    "name" : "public abstract View getSelectedView()",
    "returnType" : "View",
    "comment" : "\n     * @return The view corresponding to the currently selected item, or null\n     * if nothing is selected\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object getSelectedItem()",
    "returnType" : "Object",
    "comment" : "\n     * @return The data corresponding to the currently selected item, or\n     * null if there is nothing selected.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getCount()",
    "returnType" : "int",
    "comment" : "\n     * @return The number of items owned by the Adapter associated with this\n     *         AdapterView. (This is the number of data items, which may be\n     *         larger than the number of visible views.)\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getPositionForView(View view)",
    "returnType" : "int",
    "comment" : "\n     * Returns the position within the adapter's data set for the view, where\n     * view is a an adapter item or a descendant of an adapter item.\n     * <p>\n     * <strong>Note:</strong> The result of this method only reflects the\n     * position of the data bound to <var>view</var> during the most recent\n     * layout pass. If the adapter's data set has changed without a subsequent\n     * layout pass, the position returned by this method may not match the\n     * current position of the data within the adapter.\n     *\n     * @param view an adapter item, or a descendant of an adapter item. This\n     *             must be visible in this AdapterView at the time of the call.\n     * @return the position within the adapter's data set of the view, or\n     *         {@link #INVALID_POSITION} if the view does not correspond to a\n     *         list item (or it is not currently visible)\n     ",
    "links" : [ "#INVALID_POSITION" ]
  }, {
    "name" : "public int getFirstVisiblePosition()",
    "returnType" : "int",
    "comment" : "\n     * Returns the position within the adapter's data set for the first item\n     * displayed on screen.\n     *\n     * @return The position within the adapter's data set\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getLastVisiblePosition()",
    "returnType" : "int",
    "comment" : "\n     * Returns the position within the adapter's data set for the last item\n     * displayed on screen.\n     *\n     * @return The position within the adapter's data set\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setSelection(int position)",
    "returnType" : "void",
    "comment" : "\n     * Sets the currently selected item. To support accessibility subclasses that\n     * override this method must invoke the overridden super method first.\n     *\n     * @param position Index (starting at 0) of the data item to be selected.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setEmptyView(View emptyView)",
    "returnType" : "void",
    "comment" : "\n     * Sets the view to show if the adapter is empty\n     ",
    "links" : [ ]
  }, {
    "name" : "public View getEmptyView()",
    "returnType" : "View",
    "comment" : "\n     * When the current adapter is empty, the AdapterView can display a special view\n     * called the empty view. The empty view is used to provide feedback to the user\n     * that no data is available in this AdapterView.\n     *\n     * @return The view to show if the adapter is empty.\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean isInFilterMode()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether this view is in filter mode. Filter mode can for instance\n     * be enabled by a user when typing on the keyboard.\n     *\n     * @return True if the view is in filter mode, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setFocusable(@Focusable int focusable)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setFocusableInTouchMode(boolean focusable)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void checkFocus()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateEmptyStatus(boolean empty)",
    "returnType" : "void",
    "comment" : "\n     * Update the status of the list based on the empty parameter.  If empty is true and\n     * we have an empty view, display it.  In all the other cases, make sure that the listview\n     * is VISIBLE and that the empty view is GONE (if it's not null).\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object getItemAtPosition(int position)",
    "returnType" : "Object",
    "comment" : "\n     * Gets the data associated with the specified position in the list.\n     *\n     * @param position Which data to get\n     * @return The data associated with the specified position in the list\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getItemIdAtPosition(int position)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setOnClickListener(OnClickListener l)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void dispatchSaveInstanceState(SparseArray<Parcelable> container)",
    "returnType" : "void",
    "comment" : "\n     * Override to prevent freezing of any views created by the adapter.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void dispatchRestoreInstanceState(SparseArray<Parcelable> container)",
    "returnType" : "void",
    "comment" : "\n     * Override to prevent thawing of any views created by the adapter.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void onDetachedFromWindow()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void selectionChanged()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void dispatchOnItemSelected()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void fireOnSelected()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void performAccessibilityActionsOnSelected()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean dispatchPopulateAccessibilityEventInternal(AccessibilityEvent event)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean onRequestSendAccessibilityEventInternal(View child, AccessibilityEvent event)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getAccessibilityClassName()",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onInitializeAccessibilityNodeInfoInternal(AccessibilityNodeInfo info)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void onInitializeAccessibilityEventInternal(AccessibilityEvent event)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private boolean isScrollableForAccessibility()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected boolean canAnimate()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void handleDataChanged()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void checkSelectionChanged()",
    "returnType" : "void",
    "comment" : "\n     * Called after layout to determine whether the selection position needs to\n     * be updated. Also used to fire any pending selection events.\n     ",
    "links" : [ ]
  }, {
    "name" : " int findSyncPosition()",
    "returnType" : "int",
    "comment" : "\n     * Searches the adapter for a position matching mSyncRowId. The search starts at mSyncPosition\n     * and then alternates between moving up and moving down until 1) we find the right position, or\n     * 2) we run out of time, or 3) we have looked at every position\n     *\n     * @return Position of the row that matches mSyncRowId, or {@link #INVALID_POSITION} if it can't\n     *         be found\n     ",
    "links" : [ "#INVALID_POSITION" ]
  }, {
    "name" : " int lookForSelectablePosition(int position, boolean lookDown)",
    "returnType" : "int",
    "comment" : "\n     * Find a position that can be selected (i.e., is not a separator).\n     *\n     * @param position The starting position to look at.\n     * @param lookDown Whether to look down for other positions.\n     * @return The next selectable position starting at position and then searching either up or\n     *         down. Returns {@link #INVALID_POSITION} if nothing can be found.\n     ",
    "links" : [ "#INVALID_POSITION" ]
  }, {
    "name" : " void setSelectedPositionInt(int position)",
    "returnType" : "void",
    "comment" : "\n     * Utility to keep mSelectedPosition and mSelectedRowId in sync\n     * @param position Our current position\n     ",
    "links" : [ ]
  }, {
    "name" : " void setNextSelectedPositionInt(int position)",
    "returnType" : "void",
    "comment" : "\n     * Utility to keep mNextSelectedPosition and mNextSelectedRowId in sync\n     * @param position Intended value for mSelectedPosition the next time we go\n     * through layout\n     ",
    "links" : [ ]
  }, {
    "name" : " void rememberSyncState()",
    "returnType" : "void",
    "comment" : "\n     * Remember enough information to restore the screen state when the data has\n     * changed.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void encodeProperties(@NonNull ViewHierarchyEncoder encoder)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void onProvideAutofillStructure(ViewStructure structure, int flags)",
    "returnType" : "void",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * <p>It also sets the autofill options in the structure; when overridden, it should set it as\n     * well, either explicitly by calling {@link ViewStructure#setAutofillOptions(CharSequence[])}\n     * or implicitly by calling {@code super.onProvideAutofillStructure(structure, flags)}.\n     ",
    "links" : [ "android.view.ViewStructure#setAutofillOptions(CharSequence" ]
  }, {
    "name" : "protected void onProvideStructure(@NonNull ViewStructure structure, @ViewStructureType int viewFor, int flags)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setOnItemClickListener(@Nullable OnItemClickListener listener)", "public final OnItemClickListener getOnItemClickListener()", "public boolean performItemClick(View view, int position, long id)", "public void setOnItemLongClickListener(OnItemLongClickListener listener)", "public final OnItemLongClickListener getOnItemLongClickListener()", "public void setOnItemSelectedListener(@Nullable OnItemSelectedListener listener)", "public final OnItemSelectedListener getOnItemSelectedListener()", "public abstract T getAdapter()", "public abstract void setAdapter(T adapter)", "public void addView(View child)", "public void addView(View child, int index)", "public void addView(View child, LayoutParams params)", "public void addView(View child, int index, LayoutParams params)", "public void removeView(View child)", "public void removeViewAt(int index)", "public void removeAllViews()", "protected void onLayout(boolean changed, int left, int top, int right, int bottom)", "public int getSelectedItemPosition()", "public long getSelectedItemId()", "public abstract View getSelectedView()", "public Object getSelectedItem()", "public int getCount()", "public int getPositionForView(View view)", "public int getFirstVisiblePosition()", "public int getLastVisiblePosition()", "public abstract void setSelection(int position)", "public void setEmptyView(View emptyView)", "public View getEmptyView()", " boolean isInFilterMode()", "public void setFocusable(@Focusable int focusable)", "public void setFocusableInTouchMode(boolean focusable)", " void checkFocus()", "private void updateEmptyStatus(boolean empty)", "public Object getItemAtPosition(int position)", "public long getItemIdAtPosition(int position)", "public void setOnClickListener(OnClickListener l)", "protected void dispatchSaveInstanceState(SparseArray<Parcelable> container)", "protected void dispatchRestoreInstanceState(SparseArray<Parcelable> container)", "protected void onDetachedFromWindow()", " void selectionChanged()", "private void dispatchOnItemSelected()", "private void fireOnSelected()", "private void performAccessibilityActionsOnSelected()", "public boolean dispatchPopulateAccessibilityEventInternal(AccessibilityEvent event)", "public boolean onRequestSendAccessibilityEventInternal(View child, AccessibilityEvent event)", "public CharSequence getAccessibilityClassName()", "public void onInitializeAccessibilityNodeInfoInternal(AccessibilityNodeInfo info)", "public void onInitializeAccessibilityEventInternal(AccessibilityEvent event)", "private boolean isScrollableForAccessibility()", "protected boolean canAnimate()", " void handleDataChanged()", " void checkSelectionChanged()", " int findSyncPosition()", " int lookForSelectablePosition(int position, boolean lookDown)", " void setSelectedPositionInt(int position)", " void setNextSelectedPositionInt(int position)", " void rememberSyncState()", "protected void encodeProperties(@NonNull ViewHierarchyEncoder encoder)", "public void onProvideAutofillStructure(ViewStructure structure, int flags)", "protected void onProvideStructure(@NonNull ViewStructure structure, @ViewStructureType int viewFor, int flags)" ],
  "variableNames" : [ "ITEM_VIEW_TYPE_IGNORE", "ITEM_VIEW_TYPE_HEADER_OR_FOOTER", "mFirstPosition", "mSpecificTop", "mSyncPosition", "mSyncRowId", "mSyncHeight", "mNeedSync", "mSyncMode", "mLayoutHeight", "SYNC_SELECTED_POSITION", "SYNC_FIRST_POSITION", "SYNC_MAX_DURATION_MILLIS", "mInLayout", "mOnItemSelectedListener", "mOnItemClickListener", "mOnItemLongClickListener", "mDataChanged", "mNextSelectedPosition", "mNextSelectedRowId", "mSelectedPosition", "mSelectedRowId", "mEmptyView", "mItemCount", "mOldItemCount", "INVALID_POSITION", "INVALID_ROW_ID", "mOldSelectedPosition", "mOldSelectedRowId", "mDesiredFocusableState", "mDesiredFocusableInTouchModeState", "mSelectionNotifier", "mPendingSelectionNotifier", "mBlockLayoutRequests" ]
}