{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/window/BackEvent.java",
  "packageName" : "android.window",
  "className" : "BackEvent",
  "comment" : "\n * Object used to report back gesture progress.\n * Holds information about the touch event, swipe direction and the animation progress that\n * predictive back animations should seek to.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "EDGE_LEFT",
    "type" : "int",
    "comment" : " Indicates that the edge swipe starts from the left edge of the screen ",
    "links" : [ ]
  }, {
    "name" : "EDGE_RIGHT",
    "type" : "int",
    "comment" : " Indicates that the edge swipe starts from the right edge of the screen ",
    "links" : [ ]
  }, {
    "name" : "mTouchX",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTouchY",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProgress",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSwipeEdge",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public float getProgress()",
    "returnType" : "float",
    "comment" : "\n     * Returns a value between 0 and 1 on how far along the back gesture is. This value is\n     * driven by the horizontal location of the touch point, and should be used as the fraction to\n     * seek the predictive back animation with. Specifically,\n     * <ol>\n     * <li>The progress is 0 when the touch is at the starting edge of the screen (left or right),\n     * and animation should seek to its start state.\n     * <li>The progress is approximately 1 when the touch is at the opposite side of the screen,\n     * and animation should seek to its end state. Exact end value may vary depending on\n     * screen size.\n     * </ol>\n     * <li> After the gesture finishes in cancel state, this method keeps getting invoked until the\n     * progress value animates back to 0.\n     * </ol>\n     * In-between locations are linearly interpolated based on horizontal distance from the starting\n     * edge and smooth clamped to 1 when the distance exceeds a system-wide threshold.\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getTouchX()",
    "returnType" : "float",
    "comment" : "\n     * Returns the absolute X location of the touch point, or NaN if the event is from\n     * a button press.\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getTouchY()",
    "returnType" : "float",
    "comment" : "\n     * Returns the absolute Y location of the touch point, or NaN if the event is from\n     * a button press.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getSwipeEdge()",
    "returnType" : "int",
    "comment" : "\n     * Returns the screen edge that the swipe starts from.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public float getProgress()", "public float getTouchX()", "public float getTouchY()", "public int getSwipeEdge()", "public String toString()" ],
  "variableNames" : [ "EDGE_LEFT", "EDGE_RIGHT", "mTouchX", "mTouchY", "mProgress", "mSwipeEdge" ]
}