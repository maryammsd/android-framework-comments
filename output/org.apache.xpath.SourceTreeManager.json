{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xpath/SourceTreeManager.java",
  "packageName" : "org.apache.xpath",
  "className" : "SourceTreeManager",
  "comment" : "\n * This class bottlenecks all management of source trees.  The methods\n * in this class should allow easy garbage collection of source\n * trees (not yet!), and should centralize parsing for those source trees.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "m_sourceTree",
    "type" : "Vector",
    "comment" : " Vector of SourceTree objects that this manager manages. ",
    "links" : [ ]
  }, {
    "name" : "m_uriResolver",
    "type" : "URIResolver",
    "comment" : " The TrAX URI resolver used to obtain source trees. ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void reset()",
    "returnType" : "void",
    "comment" : "\n   * Reset the list of SourceTree objects that this manager manages.\n   *\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setURIResolver(URIResolver resolver)",
    "returnType" : "void",
    "comment" : "\n   * Set an object that will be used to resolve URIs used in\n   * document(), etc.\n   * @param resolver An object that implements the URIResolver interface,\n   * or null.\n   ",
    "links" : [ ]
  }, {
    "name" : "public URIResolver getURIResolver()",
    "returnType" : "URIResolver",
    "comment" : "\n   * Get the object that will be used to resolve URIs used in\n   * document(), etc.\n   * @return An object that implements the URIResolver interface,\n   * or null.\n   ",
    "links" : [ ]
  }, {
    "name" : "public String findURIFromDoc(int owner)",
    "returnType" : "String",
    "comment" : "\n   * Given a document, find the URL associated with that document.\n   * @param owner Document that was previously processed by this liaison.\n   *\n   * @return The base URI of the owner argument.\n   ",
    "links" : [ ]
  }, {
    "name" : "public Source resolveURI(String base, String urlString, SourceLocator locator) throws TransformerException, IOException",
    "returnType" : "Source",
    "comment" : "\n   * This will be called by the processor when it encounters\n   * an xsl:include, xsl:import, or document() function.\n   *\n   * @param base The base URI that should be used.\n   * @param urlString Value from an xsl:import or xsl:include's href attribute,\n   * or a URI specified in the document() function.\n   * \n   * @return a Source that can be used to process the resource.\n   *\n   * @throws IOException\n   * @throws TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public void removeDocumentFromCache(int n)",
    "returnType" : "void",
    "comment" : " JJK: Support  <?xalan:doc_cache_off?> kluge in ElemForEach.\n   * TODO: This function is highly dangerous. Cache management must be improved.\n   *\n   * @param n The node to remove.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void putDocumentInCache(int n, Source source)",
    "returnType" : "void",
    "comment" : "\n   * Put the source tree root node in the document cache.\n   * TODO: This function needs to be a LOT more sophisticated.\n   *\n   * @param n The node to cache.\n   * @param source The Source object to cache.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getNode(Source source)",
    "returnType" : "int",
    "comment" : "\n   * Given a Source object, find the node associated with it.\n   *\n   * @param source The Source object to act as the key.\n   *\n   * @return The node that is associated with the Source, or null if not found.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getSourceTree(String base, String urlString, SourceLocator locator, XPathContext xctxt) throws TransformerException",
    "returnType" : "int",
    "comment" : "\n   * Get the source tree from the a base URL and a URL string.\n   *\n   * @param base The base URI to use if the urlString is relative.\n   * @param urlString An absolute or relative URL string.\n   * @param locator The location of the caller, for diagnostic purposes.\n   *\n   * @return should be a non-null reference to the node identified by the \n   * base and urlString.\n   *\n   * @throws TransformerException If the URL can not resolve to a node.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getSourceTree(Source source, SourceLocator locator, XPathContext xctxt) throws TransformerException",
    "returnType" : "int",
    "comment" : "\n   * Get the source tree from the input source.\n   *\n   * @param source The Source object that should identify the desired node.\n   * @param locator The location of the caller, for diagnostic purposes.\n   *\n   * @return non-null reference to a node.\n   *\n   * @throws TransformerException if the Source argument can't be resolved to \n   *         a node.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int parseToNode(Source source, SourceLocator locator, XPathContext xctxt) throws TransformerException",
    "returnType" : "int",
    "comment" : "\n   * Try to create a DOM source tree from the input source.\n   *\n   * @param source The Source object that identifies the source node.\n   * @param locator The location of the caller, for diagnostic purposes.\n   *\n   * @return non-null reference to node identified by the source argument.\n   *\n   * @throws TransformerException if the source argument can not be resolved \n   *         to a source node.\n   ",
    "links" : [ ]
  }, {
    "name" : "public static XMLReader getXMLReader(Source inputSource, SourceLocator locator) throws TransformerException",
    "returnType" : "XMLReader",
    "comment" : "\n   * This method returns the SAX2 parser to use with the InputSource\n   * obtained from this URI.\n   * It may return null if any SAX2-conformant XML parser can be used,\n   * or if getInputSource() will also return null. The parser must\n   * be free for use (i.e.\n   * not currently in use for another parse().\n   *\n   * @param inputSource The value returned from the URIResolver.\n   * @return a SAX2 XMLReader to use to resolve the inputSource argument.\n   * @param locator The location of the original caller, for diagnostic purposes.\n   *\n   * @throws TransformerException if the reader can not be created.\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void reset()", "public void setURIResolver(URIResolver resolver)", "public URIResolver getURIResolver()", "public String findURIFromDoc(int owner)", "public Source resolveURI(String base, String urlString, SourceLocator locator) throws TransformerException, IOException", "public void removeDocumentFromCache(int n)", "public void putDocumentInCache(int n, Source source)", "public int getNode(Source source)", "public int getSourceTree(String base, String urlString, SourceLocator locator, XPathContext xctxt) throws TransformerException", "public int getSourceTree(Source source, SourceLocator locator, XPathContext xctxt) throws TransformerException", "public int parseToNode(Source source, SourceLocator locator, XPathContext xctxt) throws TransformerException", "public static XMLReader getXMLReader(Source inputSource, SourceLocator locator) throws TransformerException" ],
  "variableNames" : [ "m_sourceTree", "m_uriResolver" ]
}