{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xml/dtm/ref/DTMManagerDefault.java",
  "packageName" : "org.apache.xml.dtm.ref",
  "className" : "DTMManagerDefault",
  "comment" : "\n * The default implementation for the DTMManager.\n *\n * %REVIEW% There is currently a reentrancy issue, since the finalizer\n * for XRTreeFrag (which runs in the GC thread) wants to call\n * DTMManager.release(), and may do so at the same time that the main\n * transformation thread is accessing the manager. Our current solution is\n * to make most of the manager's methods <code>synchronized</code>.\n * Early tests suggest that doing so is not causing a significant\n * performance hit in Xalan. However, it should be noted that there\n * is a possible alternative solution: rewrite release() so it merely\n * posts a request for release onto a threadsafe queue, and explicitly\n * process that queue on an infrequent basis during main-thread\n * activity (eg, when getDTM() is invoked). The downside of that solution\n * would be a greater delay before the DTM's storage is actually released\n * for reuse.\n * ",
  "links" : [ ],
  "variables" : [ {
    "name" : "DUMPTREE",
    "type" : "boolean",
    "comment" : " Set this to true if you want a dump of the DTM after creation. ",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : " Set this to true if you want a basic diagnostics. ",
    "links" : [ ]
  }, {
    "name" : "m_dtms",
    "type" : "DTM[]",
    "comment" : "\n   * Map from DTM identifier numbers to DTM objects that this manager manages.\n   * One DTM may have several prefix numbers, if extended node indexing\n   * is in use; in that case, m_dtm_offsets[] will used to control which\n   * prefix maps to which section of the DTM.\n   * \n   * This array grows as necessary; see addDTM().\n   * \n   * This array grows as necessary; see addDTM(). Growth is uncommon... but\n   * access needs to be blindingly fast since it's used in node addressing.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_dtm_offsets",
    "type" : "int[]",
    "comment" : " Map from DTM identifier numbers to offsets. For small DTMs with a \n   * single identifier, this will always be 0. In overflow addressing, where\n   * additional identifiers are allocated to access nodes beyond the range of\n   * a single Node Handle, this table is used to map the handle's node field\n   * into the actual node identifier.\n   * \n   * This array grows as necessary; see addDTM().\n   * \n   * This array grows as necessary; see addDTM(). Growth is uncommon... but\n   * access needs to be blindingly fast since it's used in node addressing.\n   * (And at the moment, that includes accessing it from DTMDefaultBase,\n   * which is why this is not Protected or Private.)\n   ",
    "links" : [ ]
  }, {
    "name" : "m_readerManager",
    "type" : "XMLReaderManager",
    "comment" : "\n   * The cache for XMLReader objects to be used if the user did not\n   * supply an XMLReader for a SAXSource or supplied a StreamSource.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_defaultHandler",
    "type" : "DefaultHandler",
    "comment" : "\n   * The default implementation of ContentHandler, DTDHandler and ErrorHandler.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_expandedNameTable",
    "type" : "ExpandedNameTable",
    "comment" : "\n   * The default table for exandedNameID lookups.\n   ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public synchronized void addDTM(DTM dtm, int id)",
    "returnType" : "void",
    "comment" : "\n   * Add a DTM to the DTM table. This convenience call adds it as the \n   * \"base DTM ID\", with offset 0. The other version of addDTM should \n   * be used if you want to add \"extended\" DTM IDs with nonzero offsets.\n   *\n   * @param dtm Should be a valid reference to a DTM.\n   * @param id Integer DTM ID to be bound to this DTM\n   ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void addDTM(DTM dtm, int id, int offset)",
    "returnType" : "void",
    "comment" : "\n   * Add a DTM to the DTM table.\n   *\n   * @param dtm Should be a valid reference to a DTM.\n   * @param id Integer DTM ID to be bound to this DTM.\n   * @param offset Integer addressing offset. The internal DTM Node ID is\n   * obtained by adding this offset to the node-number field of the \n   * public DTM Handle. For the first DTM ID accessing each DTM, this is 0;\n   * for overflow addressing it will be a multiple of 1<<IDENT_DTM_NODE_BITS.\n   ",
    "links" : [ ]
  }, {
    "name" : "public synchronized int getFirstFreeDTMID()",
    "returnType" : "int",
    "comment" : "\n   * Get the first free DTM ID available. %OPT% Linear search is inefficient!\n   ",
    "links" : [ ]
  }, {
    "name" : "public synchronized DTM getDTM(Source source, boolean unique, DTMWSFilter whiteSpaceFilter, boolean incremental, boolean doIndexing)",
    "returnType" : "DTM",
    "comment" : "\n   * Get an instance of a DTM, loaded with the content from the\n   * specified source.  If the unique flag is true, a new instance will\n   * always be returned.  Otherwise it is up to the DTMManager to return a\n   * new instance or an instance that it already created and may be being used\n   * by someone else.\n   * \n   * A bit of magic in this implementation: If the source is null, unique is true,\n   * and incremental and doIndexing are both false, we return an instance of\n   * SAX2RTFDTM, which see.\n   * \n   * (I think more parameters will need to be added for error handling, and entity\n   * resolution, and more explicit control of the RTF situation).\n   *\n   * @param source the specification of the source object.\n   * @param unique true if the returned DTM must be unique, probably because it\n   * is going to be mutated.\n   * @param whiteSpaceFilter Enables filtering of whitespace nodes, and may\n   *                         be null.\n   * @param incremental true if the DTM should be built incrementally, if\n   *                    possible.\n   * @param doIndexing true if the caller considers it worth it to use\n   *                   indexing schemes.\n   *\n   * @return a non-null DTM reference.\n   ",
    "links" : [ ]
  }, {
    "name" : "public synchronized int getDTMHandleFromNode(org.w3c.dom.Node node)",
    "returnType" : "int",
    "comment" : "\n   * Given a W3C DOM node, try and return a DTM handle.\n   * Note: calling this may be non-optimal, and there is no guarantee that\n   * the node will be found in any particular DTM.\n   *\n   * @param node Non-null reference to a DOM node.\n   *\n   * @return a valid DTM handle.\n   ",
    "links" : [ ]
  }, {
    "name" : "public synchronized XMLReader getXMLReader(Source inputSource)",
    "returnType" : "XMLReader",
    "comment" : "\n   * This method returns the SAX2 parser to use with the InputSource\n   * obtained from this URI.\n   * It may return null if any SAX2-conformant XML parser can be used,\n   * or if getInputSource() will also return null. The parser must\n   * be free for use (i.e., not currently in use for another parse().\n   * After use of the parser is completed, the releaseXMLReader(XMLReader)\n   * must be called.\n   *\n   * @param inputSource The value returned from the URIResolver.\n   * @return  a SAX2 XMLReader to use to resolve the inputSource argument.\n   *\n   * @return non-null XMLReader reference ready to parse.\n   ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void releaseXMLReader(XMLReader reader)",
    "returnType" : "void",
    "comment" : "\n   * Indicates that the XMLReader object is no longer in use for the transform.\n   *\n   * Note that the getXMLReader method may return an XMLReader that was\n   * specified on the SAXSource object by the application code.  Such a\n   * reader should still be passed to releaseXMLReader, but the reader manager\n   * will only re-use XMLReaders that it created.\n   *\n   * @param reader The XMLReader to be released.\n   ",
    "links" : [ ]
  }, {
    "name" : "public synchronized DTM getDTM(int nodeHandle)",
    "returnType" : "DTM",
    "comment" : "\n   * Return the DTM object containing a representation of this node.\n   *\n   * @param nodeHandle DTM Handle indicating which node to retrieve\n   *\n   * @return a reference to the DTM object containing this node.\n   ",
    "links" : [ ]
  }, {
    "name" : "public synchronized int getDTMIdentity(DTM dtm)",
    "returnType" : "int",
    "comment" : "\n   * Given a DTM, find the ID number in the DTM tables which addresses\n   * the start of the document. If overflow addressing is in use, other\n   * DTM IDs may also be assigned to this DTM.\n   *\n   * @param dtm The DTM which (hopefully) contains this node.\n   *\n   * @return The DTM ID (as the high bits of a NodeHandle, not as our\n   * internal index), or -1 if the DTM doesn't belong to this manager.\n   ",
    "links" : [ ]
  }, {
    "name" : "public synchronized boolean release(DTM dtm, boolean shouldHardDelete)",
    "returnType" : "boolean",
    "comment" : "\n   * Release the DTMManager's reference(s) to a DTM, making it unmanaged.\n   * This is typically done as part of returning the DTM to the heap after\n   * we're done with it.\n   *\n   * @param dtm the DTM to be released.\n   * \n   * @param shouldHardDelete If false, this call is a suggestion rather than an\n   * order, and we may not actually release the DTM. This is intended to \n   * support intelligent caching of documents... which is not implemented\n   * in this version of the DTM manager.\n   *\n   * @return true if the DTM was released, false if shouldHardDelete was set\n   * and we decided not to.\n   ",
    "links" : [ ]
  }, {
    "name" : "public synchronized DTM createDocumentFragment()",
    "returnType" : "DTM",
    "comment" : "\n   * Method createDocumentFragment\n   *\n   *\n   * NEEDSDOC (createDocumentFragment) @return\n   ",
    "links" : [ ]
  }, {
    "name" : "public synchronized DTMIterator createDTMIterator(int whatToShow, DTMFilter filter, boolean entityReferenceExpansion)",
    "returnType" : "DTMIterator",
    "comment" : "\n   * NEEDSDOC Method createDTMIterator\n   *\n   *\n   * NEEDSDOC @param whatToShow\n   * NEEDSDOC @param filter\n   * NEEDSDOC @param entityReferenceExpansion\n   *\n   * NEEDSDOC (createDTMIterator) @return\n   ",
    "links" : [ ]
  }, {
    "name" : "public synchronized DTMIterator createDTMIterator(String xpathString, PrefixResolver presolver)",
    "returnType" : "DTMIterator",
    "comment" : "\n   * NEEDSDOC Method createDTMIterator\n   *\n   *\n   * NEEDSDOC @param xpathString\n   * NEEDSDOC @param presolver\n   *\n   * NEEDSDOC (createDTMIterator) @return\n   ",
    "links" : [ ]
  }, {
    "name" : "public synchronized DTMIterator createDTMIterator(int node)",
    "returnType" : "DTMIterator",
    "comment" : "\n   * NEEDSDOC Method createDTMIterator\n   *\n   *\n   * NEEDSDOC @param node\n   *\n   * NEEDSDOC (createDTMIterator) @return\n   ",
    "links" : [ ]
  }, {
    "name" : "public synchronized DTMIterator createDTMIterator(Object xpathCompiler, int pos)",
    "returnType" : "DTMIterator",
    "comment" : "\n   * NEEDSDOC Method createDTMIterator\n   *\n   *\n   * NEEDSDOC @param xpathCompiler\n   * NEEDSDOC @param pos\n   *\n   * NEEDSDOC (createDTMIterator) @return\n   ",
    "links" : [ ]
  }, {
    "name" : "public ExpandedNameTable getExpandedNameTable(DTM dtm)",
    "returnType" : "ExpandedNameTable",
    "comment" : "\n   * return the expanded name table.\n   *\n   * NEEDSDOC @param dtm\n   *\n   * NEEDSDOC ($objectName$) @return\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public synchronized void addDTM(DTM dtm, int id)", "public synchronized void addDTM(DTM dtm, int id, int offset)", "public synchronized int getFirstFreeDTMID()", "public synchronized DTM getDTM(Source source, boolean unique, DTMWSFilter whiteSpaceFilter, boolean incremental, boolean doIndexing)", "public synchronized int getDTMHandleFromNode(org.w3c.dom.Node node)", "public synchronized XMLReader getXMLReader(Source inputSource)", "public synchronized void releaseXMLReader(XMLReader reader)", "public synchronized DTM getDTM(int nodeHandle)", "public synchronized int getDTMIdentity(DTM dtm)", "public synchronized boolean release(DTM dtm, boolean shouldHardDelete)", "public synchronized DTM createDocumentFragment()", "public synchronized DTMIterator createDTMIterator(int whatToShow, DTMFilter filter, boolean entityReferenceExpansion)", "public synchronized DTMIterator createDTMIterator(String xpathString, PrefixResolver presolver)", "public synchronized DTMIterator createDTMIterator(int node)", "public synchronized DTMIterator createDTMIterator(Object xpathCompiler, int pos)", "public ExpandedNameTable getExpandedNameTable(DTM dtm)" ],
  "variableNames" : [ "DUMPTREE", "DEBUG", "m_dtms", "m_dtm_offsets", "m_readerManager", "m_defaultHandler", "m_expandedNameTable" ]
}