{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/accessibility/AccessibilityRecord.java",
  "packageName" : "android.view.accessibility",
  "className" : "AccessibilityRecord",
  "comment" : "\n * Represents a record in an {@link AccessibilityEvent} and contains information\n * about state change of its source {@link android.view.View}. When a view fires\n * an accessibility event it requests from its parent to dispatch the\n * constructed event. The parent may optionally append a record for itself\n * for providing more context to\n * {@link android.accessibilityservice.AccessibilityService}s. Hence,\n * accessibility services can facilitate additional accessibility records\n * to enhance feedback.\n * </p>\n * <p>\n * Once the accessibility event containing a record is dispatched the record is\n * made immutable and calling a state mutation method generates an error.\n * </p>\n * <p>\n * <strong>Note:</strong> Not all properties are applicable to all accessibility\n * event types. For detailed information please refer to {@link AccessibilityEvent}.\n * </p>\n *\n * <div class=\"special reference\">\n * <h3>Developer Guides</h3>\n * <p>For more information about creating and processing AccessibilityRecords, read the\n * <a href=\"{@docRoot}guide/topics/ui/accessibility/index.html\">Accessibility</a>\n * developer guide.</p>\n * </div>\n *\n * @see AccessibilityEvent\n * @see AccessibilityManager\n * @see android.accessibilityservice.AccessibilityService\n * @see AccessibilityNodeInfo\n ",
  "links" : [ "android.accessibilityservice.AccessibilityService", "android.view.View", "android.view.accessibility.AccessibilityEvent" ],
  "variables" : [ {
    "name" : "DEBUG_CONCISE_TOSTRING",
    "type" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "UNDEFINED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PROPERTY_CHECKED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PROPERTY_ENABLED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PROPERTY_PASSWORD",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PROPERTY_FULL_SCREEN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PROPERTY_SCROLLABLE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PROPERTY_IMPORTANT_FOR_ACCESSIBILITY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PROPERTY_ACCESSIBILITY_DATA_SENSITIVE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "GET_SOURCE_PREFETCH_FLAGS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSealed",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBooleanProperties",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCurrentItemIndex",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mItemCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFromIndex",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mToIndex",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mScrollX",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mScrollY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mScrollDeltaX",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mScrollDeltaY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaxScrollX",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaxScrollY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAddedCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRemovedCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSourceNodeId",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSourceWindowId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSourceDisplayId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mClassName",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContentDescription",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBeforeText",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mParcelableData",
    "type" : "Parcelable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mText",
    "type" : "List<CharSequence>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConnectionId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setSource(@Nullable View source)",
    "returnType" : "void",
    "comment" : "\n     * Sets the event source.\n     *\n     * @param source The source.\n     *\n     * @throws IllegalStateException If called from an AccessibilityService.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSource(@Nullable View root, int virtualDescendantId)",
    "returnType" : "void",
    "comment" : "\n     * Sets the source to be a virtual descendant of the given <code>root</code>.\n     * If <code>virtualDescendantId</code> equals to {@link View#NO_ID} the root\n     * is set as the source.\n     * <p>\n     * A virtual descendant is an imaginary View that is reported as a part of the view\n     * hierarchy for accessibility purposes. This enables custom views that draw complex\n     * content to report them selves as a tree of virtual views, thus conveying their\n     * logical structure.\n     * </p>\n     *\n     * @param root The root of the virtual subtree.\n     * @param virtualDescendantId The id of the virtual descendant.\n     ",
    "links" : [ "android.view.View#NO_ID" ]
  }, {
    "name" : "public void setSourceNodeId(long sourceNodeId)",
    "returnType" : "void",
    "comment" : "\n     * Set the source node ID directly\n     *\n     * @param sourceNodeId The source node Id\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public AccessibilityNodeInfo getSource()",
    "returnType" : "AccessibilityNodeInfo",
    "comment" : "\n     * Gets the {@link AccessibilityNodeInfo} of the event source.\n     * <p>\n     *   <strong>Note:</strong> It is a client responsibility to recycle the received info\n     *   by calling {@link AccessibilityNodeInfo#recycle() AccessibilityNodeInfo#recycle()}\n     *   to avoid creating of multiple instances.\n     * </p>\n     * @return The info of the source.\n     ",
    "links" : [ "android.view.accessibility.AccessibilityNodeInfo", "android.view.accessibility.AccessibilityNodeInfo#recycle()" ]
  }, {
    "name" : "public AccessibilityNodeInfo getSource(@AccessibilityNodeInfo.PrefetchingStrategy int prefetchingStrategy)",
    "returnType" : "AccessibilityNodeInfo",
    "comment" : "\n     * Gets the {@link AccessibilityNodeInfo} of the event source.\n     *\n     * @param prefetchingStrategy the prefetching strategy.\n     * @return The info of the source.\n     *\n     * @see AccessibilityNodeInfo#getParent(int) for a description of prefetching.\n     ",
    "links" : [ "android.view.accessibility.AccessibilityNodeInfo" ]
  }, {
    "name" : "public void setDisplayId(int displayId)",
    "returnType" : "void",
    "comment" : "\n     * Sets the display id.\n     *\n     * @param displayId The displayId id.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getDisplayId()",
    "returnType" : "int",
    "comment" : "\n     * Gets the id of the display from which the event comes from.\n     *\n     * @return The display id.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setWindowId(int windowId)",
    "returnType" : "void",
    "comment" : "\n     * Sets the window id.\n     *\n     * @param windowId The window id.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getWindowId()",
    "returnType" : "int",
    "comment" : "\n     * Gets the id of the window from which the event comes from.\n     *\n     * @return The window id.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isChecked()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets if the source is checked.\n     *\n     * @return True if the view is checked, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setChecked(boolean isChecked)",
    "returnType" : "void",
    "comment" : "\n     * Sets if the source is checked.\n     *\n     * @param isChecked True if the view is checked, false otherwise.\n     *\n     * @throws IllegalStateException If called from an AccessibilityService.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets if the source is enabled.\n     *\n     * @return True if the view is enabled, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setEnabled(boolean isEnabled)",
    "returnType" : "void",
    "comment" : "\n     * Sets if the source is enabled.\n     *\n     * @param isEnabled True if the view is enabled, false otherwise.\n     *\n     * @throws IllegalStateException If called from an AccessibilityService.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isPassword()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets if the source is a password field.\n     *\n     * @return True if the view is a password field, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPassword(boolean isPassword)",
    "returnType" : "void",
    "comment" : "\n     * Sets if the source is a password field.\n     *\n     * @param isPassword True if the view is a password field, false otherwise.\n     *\n     * @throws IllegalStateException If called from an AccessibilityService.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isFullScreen()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets if the source is taking the entire screen.\n     *\n     * @return True if the source is full screen, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setFullScreen(boolean isFullScreen)",
    "returnType" : "void",
    "comment" : "\n     * Sets if the source is taking the entire screen.\n     *\n     * @param isFullScreen True if the source is full screen, false otherwise.\n     *\n     * @throws IllegalStateException If called from an AccessibilityService.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isScrollable()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets if the source is scrollable.\n     *\n     * @return True if the source is scrollable, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setScrollable(boolean scrollable)",
    "returnType" : "void",
    "comment" : "\n     * Sets if the source is scrollable.\n     *\n     * @param scrollable True if the source is scrollable, false otherwise.\n     *\n     * @throws IllegalStateException If called from an AccessibilityService.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isImportantForAccessibility()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets if the source is important for accessibility.\n     *\n     * <strong>Note:</strong> Used only internally to determine whether\n     * to deliver the event to a given accessibility service since some\n     * services may want to regard all views for accessibility while others\n     * may want to regard only the important views for accessibility.\n     *\n     * @return True if the source is important for accessibility,\n     *        false otherwise.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setImportantForAccessibility(boolean importantForAccessibility)",
    "returnType" : "void",
    "comment" : "\n     * Sets if the source is important for accessibility.\n     *\n     * @param importantForAccessibility True if the source is important for accessibility,\n     *                                  false otherwise.\n     *\n     * @throws IllegalStateException If called from an AccessibilityService.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean isAccessibilityDataSensitive()",
    "returnType" : "boolean",
    "comment" : "\n     * @see AccessibilityEvent#isAccessibilityDataSensitive\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " void setAccessibilityDataSensitive(boolean accessibilityDataSensitive)",
    "returnType" : "void",
    "comment" : "\n     * @see AccessibilityEvent#setAccessibilityDataSensitive\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getItemCount()",
    "returnType" : "int",
    "comment" : "\n     * Gets the number of items that can be visited.\n     *\n     * @return The number of items.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setItemCount(int itemCount)",
    "returnType" : "void",
    "comment" : "\n     * Sets the number of items that can be visited.\n     *\n     * @param itemCount The number of items.\n     *\n     * @throws IllegalStateException If called from an AccessibilityService.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getCurrentItemIndex()",
    "returnType" : "int",
    "comment" : "\n     * Gets the index of the source in the list of items the can be visited.\n     *\n     * @return The current item index.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCurrentItemIndex(int currentItemIndex)",
    "returnType" : "void",
    "comment" : "\n     * Sets the index of the source in the list of items that can be visited.\n     *\n     * @param currentItemIndex The current item index.\n     *\n     * @throws IllegalStateException If called from an AccessibilityService.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getFromIndex()",
    "returnType" : "int",
    "comment" : "\n     * Gets the index of the first character of the changed sequence,\n     * or the beginning of a text selection or the index of the first\n     * visible item when scrolling.\n     *\n     * @return The index of the first character or selection\n     *        start or the first visible item.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setFromIndex(int fromIndex)",
    "returnType" : "void",
    "comment" : "\n     * Sets the index of the first character of the changed sequence\n     * or the beginning of a text selection or the index of the first\n     * visible item when scrolling.\n     *\n     * @param fromIndex The index of the first character or selection\n     *        start or the first visible item.\n     *\n     * @throws IllegalStateException If called from an AccessibilityService.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getToIndex()",
    "returnType" : "int",
    "comment" : "\n     * Gets the index of text selection end or the index of the last\n     * visible item when scrolling.\n     *\n     * @return The index of selection end or last item index.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setToIndex(int toIndex)",
    "returnType" : "void",
    "comment" : "\n     * Sets the index of text selection end or the index of the last\n     * visible item when scrolling.\n     *\n     * @param toIndex The index of selection end or last item index.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getScrollX()",
    "returnType" : "int",
    "comment" : "\n     * Gets the scroll offset of the source left edge in pixels.\n     *\n     * @return The scroll.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setScrollX(int scrollX)",
    "returnType" : "void",
    "comment" : "\n     * Sets the scroll offset of the source left edge in pixels.\n     *\n     * @param scrollX The scroll.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getScrollY()",
    "returnType" : "int",
    "comment" : "\n     * Gets the scroll offset of the source top edge in pixels.\n     *\n     * @return The scroll.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setScrollY(int scrollY)",
    "returnType" : "void",
    "comment" : "\n     * Sets the scroll offset of the source top edge in pixels.\n     *\n     * @param scrollY The scroll.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getScrollDeltaX()",
    "returnType" : "int",
    "comment" : "\n     * Gets the difference in pixels between the horizontal position before the scroll and the\n     * current horizontal position\n     *\n     * @return the scroll delta x\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setScrollDeltaX(int scrollDeltaX)",
    "returnType" : "void",
    "comment" : "\n     * Sets the difference in pixels between the horizontal position before the scroll and the\n     * current horizontal position\n     *\n     * @param scrollDeltaX the scroll delta x\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getScrollDeltaY()",
    "returnType" : "int",
    "comment" : "\n     * Gets the difference in pixels between the vertical position before the scroll and the\n     * current vertical position\n     *\n     * @return the scroll delta y\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setScrollDeltaY(int scrollDeltaY)",
    "returnType" : "void",
    "comment" : "\n     * Sets the difference in pixels between the vertical position before the scroll and the\n     * current vertical position\n     *\n     * @param scrollDeltaY the scroll delta y\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getMaxScrollX()",
    "returnType" : "int",
    "comment" : "\n     * Gets the max scroll offset of the source left edge in pixels.\n     *\n     * @return The max scroll.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMaxScrollX(int maxScrollX)",
    "returnType" : "void",
    "comment" : "\n     * Sets the max scroll offset of the source left edge in pixels.\n     *\n     * @param maxScrollX The max scroll.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getMaxScrollY()",
    "returnType" : "int",
    "comment" : "\n     * Gets the max scroll offset of the source top edge in pixels.\n     *\n     * @return The max scroll.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMaxScrollY(int maxScrollY)",
    "returnType" : "void",
    "comment" : "\n     * Sets the max scroll offset of the source top edge in pixels.\n     *\n     * @param maxScrollY The max scroll.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getAddedCount()",
    "returnType" : "int",
    "comment" : "\n     * Gets the number of added characters.\n     *\n     * @return The number of added characters.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAddedCount(int addedCount)",
    "returnType" : "void",
    "comment" : "\n     * Sets the number of added characters.\n     *\n     * @param addedCount The number of added characters.\n     *\n     * @throws IllegalStateException If called from an AccessibilityService.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getRemovedCount()",
    "returnType" : "int",
    "comment" : "\n     * Gets the number of removed characters.\n     *\n     * @return The number of removed characters.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setRemovedCount(int removedCount)",
    "returnType" : "void",
    "comment" : "\n     * Sets the number of removed characters.\n     *\n     * @param removedCount The number of removed characters.\n     *\n     * @throws IllegalStateException If called from an AccessibilityService.\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getClassName()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Gets the class name of the source.\n     *\n     * @return The class name.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setClassName(@Nullable CharSequence className)",
    "returnType" : "void",
    "comment" : "\n     * Sets the class name of the source.\n     *\n     * @param className The lass name.\n     *\n     * @throws IllegalStateException If called from an AccessibilityService.\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<CharSequence> getText()",
    "returnType" : "List<CharSequence>",
    "comment" : "\n     * Gets the text of the event. The index in the list represents the priority\n     * of the text. Specifically, the lower the index the higher the priority.\n     *\n     * @return The text.\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getBeforeText()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Gets the text before a change.\n     *\n     * @return The text before the change.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setBeforeText(@Nullable CharSequence beforeText)",
    "returnType" : "void",
    "comment" : "\n     * Sets the text before a change.\n     *\n     * @param beforeText The text before the change.\n     *\n     * @throws IllegalStateException If called from an AccessibilityService.\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getContentDescription()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Gets the description of the source.\n     *\n     * @return The description.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setContentDescription(@Nullable CharSequence contentDescription)",
    "returnType" : "void",
    "comment" : "\n     * Sets the description of the source.\n     *\n     * @param contentDescription The description.\n     *\n     * @throws IllegalStateException If called from an AccessibilityService.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Parcelable getParcelableData()",
    "returnType" : "Parcelable",
    "comment" : "\n     * Gets the {@link Parcelable} data.\n     *\n     * @return The parcelable data.\n     ",
    "links" : [ "android.os.Parcelable" ]
  }, {
    "name" : "public void setParcelableData(@Nullable Parcelable parcelableData)",
    "returnType" : "void",
    "comment" : "\n     * Sets the {@link Parcelable} data of the event.\n     *\n     * @param parcelableData The parcelable data.\n     *\n     * @throws IllegalStateException If called from an AccessibilityService.\n     ",
    "links" : [ "android.os.Parcelable" ]
  }, {
    "name" : "public long getSourceNodeId()",
    "returnType" : "long",
    "comment" : "\n     * Gets the id of the source node.\n     *\n     * @return The id.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setConnectionId(int connectionId)",
    "returnType" : "void",
    "comment" : "\n     * Sets the unique id of the IAccessibilityServiceConnection over which\n     * this instance can send requests to the system.\n     *\n     * @param connectionId The connection id.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSealed(boolean sealed)",
    "returnType" : "void",
    "comment" : "\n     * Sets if this instance is sealed.\n     *\n     * @param sealed Whether is sealed.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean isSealed()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets if this instance is sealed.\n     *\n     * @return Whether is sealed.\n     ",
    "links" : [ ]
  }, {
    "name" : " void enforceSealed()",
    "returnType" : "void",
    "comment" : "\n     * Enforces that this instance is sealed.\n     *\n     * @throws IllegalStateException If this instance is not sealed.\n     ",
    "links" : [ ]
  }, {
    "name" : " void enforceNotSealed()",
    "returnType" : "void",
    "comment" : "\n     * Enforces that this instance is not sealed.\n     *\n     * @throws IllegalStateException If this instance is sealed.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean getBooleanProperty(int property)",
    "returnType" : "boolean",
    "comment" : "\n     * Gets the value of a boolean property.\n     *\n     * @param property The property.\n     * @return The value.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setBooleanProperty(int property, boolean value)",
    "returnType" : "void",
    "comment" : "\n     * Sets a boolean property.\n     *\n     * @param property The property.\n     * @param value The value.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static AccessibilityRecord obtain(@NonNull AccessibilityRecord record)",
    "returnType" : "AccessibilityRecord",
    "comment" : "\n     * Instantiates a new record initialized with data from the\n     * given record.\n     *\n     * @deprecated Object pooling has been discontinued. Create a new instance using the\n     * constructor {@link #AccessibilityRecord()} instead.\n     * @return An instance.\n     ",
    "links" : [ "#AccessibilityRecord()" ]
  }, {
    "name" : "public static AccessibilityRecord obtain()",
    "returnType" : "AccessibilityRecord",
    "comment" : "\n     * Instantiates a new record.\n     *\n     * @deprecated Object pooling has been discontinued. Create a new instance using the\n     * constructor {@link #AccessibilityRecord()} instead.\n     * @return An instance.\n     ",
    "links" : [ "#AccessibilityRecord()" ]
  }, {
    "name" : "public void recycle()",
    "returnType" : "void",
    "comment" : "\n     * Would previously return an instance back to be reused.\n     *\n     * @deprecated Object pooling has been discontinued. Calling this function now will have\n     * no effect.\n     ",
    "links" : [ ]
  }, {
    "name" : " void init(@NonNull AccessibilityRecord record)",
    "returnType" : "void",
    "comment" : "\n     * Initialize this record from another one.\n     *\n     * @param record The to initialize from.\n     ",
    "links" : [ ]
  }, {
    "name" : " void clear()",
    "returnType" : "void",
    "comment" : "\n     * Clears the state of this instance.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " StringBuilder appendTo(StringBuilder builder)",
    "returnType" : "StringBuilder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void appendUnless(boolean defValue, int prop, StringBuilder builder)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String singleBooleanPropertyToString(int prop)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void append(StringBuilder builder, String propName, int propValue)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void append(StringBuilder builder, String propName, Object propValue)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private StringBuilder appendPropName(StringBuilder builder, String propName)",
    "returnType" : "StringBuilder",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setSource(@Nullable View source)", "public void setSource(@Nullable View root, int virtualDescendantId)", "public void setSourceNodeId(long sourceNodeId)", "public AccessibilityNodeInfo getSource()", "public AccessibilityNodeInfo getSource(@AccessibilityNodeInfo.PrefetchingStrategy int prefetchingStrategy)", "public void setDisplayId(int displayId)", "public int getDisplayId()", "public void setWindowId(int windowId)", "public int getWindowId()", "public boolean isChecked()", "public void setChecked(boolean isChecked)", "public boolean isEnabled()", "public void setEnabled(boolean isEnabled)", "public boolean isPassword()", "public void setPassword(boolean isPassword)", "public boolean isFullScreen()", "public void setFullScreen(boolean isFullScreen)", "public boolean isScrollable()", "public void setScrollable(boolean scrollable)", "public boolean isImportantForAccessibility()", "public void setImportantForAccessibility(boolean importantForAccessibility)", " boolean isAccessibilityDataSensitive()", " void setAccessibilityDataSensitive(boolean accessibilityDataSensitive)", "public int getItemCount()", "public void setItemCount(int itemCount)", "public int getCurrentItemIndex()", "public void setCurrentItemIndex(int currentItemIndex)", "public int getFromIndex()", "public void setFromIndex(int fromIndex)", "public int getToIndex()", "public void setToIndex(int toIndex)", "public int getScrollX()", "public void setScrollX(int scrollX)", "public int getScrollY()", "public void setScrollY(int scrollY)", "public int getScrollDeltaX()", "public void setScrollDeltaX(int scrollDeltaX)", "public int getScrollDeltaY()", "public void setScrollDeltaY(int scrollDeltaY)", "public int getMaxScrollX()", "public void setMaxScrollX(int maxScrollX)", "public int getMaxScrollY()", "public void setMaxScrollY(int maxScrollY)", "public int getAddedCount()", "public void setAddedCount(int addedCount)", "public int getRemovedCount()", "public void setRemovedCount(int removedCount)", "public CharSequence getClassName()", "public void setClassName(@Nullable CharSequence className)", "public List<CharSequence> getText()", "public CharSequence getBeforeText()", "public void setBeforeText(@Nullable CharSequence beforeText)", "public CharSequence getContentDescription()", "public void setContentDescription(@Nullable CharSequence contentDescription)", "public Parcelable getParcelableData()", "public void setParcelableData(@Nullable Parcelable parcelableData)", "public long getSourceNodeId()", "public void setConnectionId(int connectionId)", "public void setSealed(boolean sealed)", " boolean isSealed()", " void enforceSealed()", " void enforceNotSealed()", "private boolean getBooleanProperty(int property)", "private void setBooleanProperty(int property, boolean value)", "public static AccessibilityRecord obtain(@NonNull AccessibilityRecord record)", "public static AccessibilityRecord obtain()", "public void recycle()", " void init(@NonNull AccessibilityRecord record)", " void clear()", "public String toString()", " StringBuilder appendTo(StringBuilder builder)", "private void appendUnless(boolean defValue, int prop, StringBuilder builder)", "private static String singleBooleanPropertyToString(int prop)", "private void append(StringBuilder builder, String propName, int propValue)", "private void append(StringBuilder builder, String propName, Object propValue)", "private StringBuilder appendPropName(StringBuilder builder, String propName)" ],
  "variableNames" : [ "DEBUG_CONCISE_TOSTRING", "UNDEFINED", "PROPERTY_CHECKED", "PROPERTY_ENABLED", "PROPERTY_PASSWORD", "PROPERTY_FULL_SCREEN", "PROPERTY_SCROLLABLE", "PROPERTY_IMPORTANT_FOR_ACCESSIBILITY", "PROPERTY_ACCESSIBILITY_DATA_SENSITIVE", "GET_SOURCE_PREFETCH_FLAGS", "mSealed", "mBooleanProperties", "mCurrentItemIndex", "mItemCount", "mFromIndex", "mToIndex", "mScrollX", "mScrollY", "mScrollDeltaX", "mScrollDeltaY", "mMaxScrollX", "mMaxScrollY", "mAddedCount", "mRemovedCount", "mSourceNodeId", "mSourceWindowId", "mSourceDisplayId", "mClassName", "mContentDescription", "mBeforeText", "mParcelableData", "mText", "mConnectionId" ]
}