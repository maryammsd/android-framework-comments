{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/hardware/camera2/utils/ArrayUtils.java",
  "packageName" : "android.hardware.camera2.utils",
  "className" : "ArrayUtils",
  "comment" : "\n * Various assortment of array utilities.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static int getArrayIndex(T[] array, T needle)",
    "returnType" : "int",
    "comment" : " Return the index of {@code needle} in the {@code array}, or else {@code -1} ",
    "links" : [ ]
  }, {
    "name" : "public static int getArrayIndex(int[] array, int needle)",
    "returnType" : "int",
    "comment" : " Return the index of {@code needle} in the {@code array}, or else {@code -1} ",
    "links" : [ ]
  }, {
    "name" : "public static int[] convertStringListToIntArray(List<String> list, String[] convertFrom, int[] convertTo)",
    "returnType" : "int[]",
    "comment" : "\n     * Create an {@code int[]} from the {@code List<>} by using {@code convertFrom} and\n     * {@code convertTo} as a one-to-one map (via the index).\n     *\n     * <p>Strings not appearing in {@code convertFrom} are ignored (with a logged warning);\n     * strings appearing in {@code convertFrom} but not {@code convertTo} are silently\n     * dropped.</p>\n     *\n     * @param list Source list of strings\n     * @param convertFrom Conversion list of strings\n     * @param convertTo Conversion list of ints\n     * @return An array of ints where the values correspond to the ones in {@code convertTo}\n     *         or {@code null} if {@code list} was {@code null}\n     ",
    "links" : [ ]
  }, {
    "name" : "public static List<Integer> convertStringListToIntList(List<String> list, String[] convertFrom, int[] convertTo)",
    "returnType" : "List<Integer>",
    "comment" : "\n     * Create an {@code List<Integer>} from the {@code List<>} by using {@code convertFrom} and\n     * {@code convertTo} as a one-to-one map (via the index).\n     *\n     * <p>Strings not appearing in {@code convertFrom} are ignored (with a logged warning);\n     * strings appearing in {@code convertFrom} but not {@code convertTo} are silently\n     * dropped.</p>\n     *\n     * @param list Source list of strings\n     * @param convertFrom Conversion list of strings\n     * @param convertTo Conversion list of ints\n     * @return A list of ints where the values correspond to the ones in {@code convertTo}\n     *         or {@code null} if {@code list} was {@code null}\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int[] toIntArray(List<Integer> list)",
    "returnType" : "int[]",
    "comment" : "\n     * Convert the list of integers in {@code list} to an {@code int} array.\n     *\n     * <p>Every element in {@code list} must be non-{@code null}.</p>\n     *\n     * @param list a list of non-{@code null} integers\n     *\n     * @return a new int array containing all the elements from {@code list}\n     *\n     * @throws NullPointerException if any of the elements in {@code list} were {@code null}\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean contains(int[] array, int elem)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the given {@code array} contains the given element.\n     *\n     * @param array {@code array} to check for {@code elem}\n     * @param elem {@code elem} to test for\n     * @return {@code true} if the given element is contained\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean contains(T[] array, T elem)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the given {@code array} contains the given element.\n     *\n     * @param array {@code array} to check for {@code elem}\n     * @param elem {@code elem} to test for\n     * @return {@code true} if the given element is contained\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "DEBUG" ],
  "methodNames" : [ "public static int getArrayIndex(T[] array, T needle)", "public static int getArrayIndex(int[] array, int needle)", "public static int[] convertStringListToIntArray(List<String> list, String[] convertFrom, int[] convertTo)", "public static List<Integer> convertStringListToIntList(List<String> list, String[] convertFrom, int[] convertTo)", "public static int[] toIntArray(List<Integer> list)", "public static boolean contains(int[] array, int elem)", "public static boolean contains(T[] array, T elem)" ]
}