{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/bluetooth/le/AdvertisingSetParameters.java",
  "packageName" : "android.bluetooth.le",
  "className" : "Builder",
  "comment" : " Builder class for {@link AdvertisingSetParameters}. ",
  "links" : [ "android.bluetooth.le.AdvertisingSetParameters" ],
  "variables" : [ {
    "name" : "mConnectable",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDiscoverable",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mScannable",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsLegacy",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsAnonymous",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIncludeTxPower",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPrimaryPhy",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSecondaryPhy",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInterval",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTxPowerLevel",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOwnAddressType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Builder setConnectable(boolean connectable)",
    "returnType" : "Builder",
    "comment" : "\n         * Set whether the advertisement type should be connectable or non-connectable. Legacy\n         * advertisements can be both connectable and scannable. Non-legacy advertisements can be\n         * only scannable or only connectable.\n         *\n         * @param connectable Controls whether the advertisement type will be connectable (true) or\n         *     non-connectable (false).\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setDiscoverable(boolean discoverable)",
    "returnType" : "Builder",
    "comment" : "\n         * Set whether the advertisement type should be discoverable or non-discoverable. By\n         * default, advertisements will be discoverable. Devices connecting to non-discoverable\n         * advertisements cannot initiate bonding.\n         *\n         * @param discoverable Controls whether the advertisement type will be discoverable ({@code\n         *     true}) or non-discoverable ({@code false}).\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setScannable(boolean scannable)",
    "returnType" : "Builder",
    "comment" : "\n         * Set whether the advertisement type should be scannable. Legacy advertisements can be both\n         * connectable and scannable. Non-legacy advertisements can be only scannable or only\n         * connectable.\n         *\n         * @param scannable Controls whether the advertisement type will be scannable (true) or\n         *     non-scannable (false).\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setLegacyMode(boolean isLegacy)",
    "returnType" : "Builder",
    "comment" : "\n         * When set to true, advertising set will advertise 4.x Spec compliant advertisements.\n         *\n         * @param isLegacy whether legacy advertising mode should be used.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setAnonymous(boolean isAnonymous)",
    "returnType" : "Builder",
    "comment" : "\n         * Set whether advertiser address should be omitted from all packets. If this mode is used,\n         * periodic advertising can't be enabled for this set.\n         *\n         * <p>This is used only if legacy mode is not used.\n         *\n         * @param isAnonymous whether anonymous advertising should be used.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setIncludeTxPower(boolean includeTxPower)",
    "returnType" : "Builder",
    "comment" : "\n         * Set whether TX power should be included in the extended header.\n         *\n         * <p>This is used only if legacy mode is not used.\n         *\n         * @param includeTxPower whether TX power should be included in extended header\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setPrimaryPhy(int primaryPhy)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the primary physical channel used for this advertising set.\n         *\n         * <p>This is used only if legacy mode is not used.\n         *\n         * <p>Use {@link BluetoothAdapter#isLeCodedPhySupported} to determine if LE Coded PHY is\n         * supported on this device.\n         *\n         * @param primaryPhy Primary advertising physical channel, can only be {@link\n         *     BluetoothDevice#PHY_LE_1M} or {@link BluetoothDevice#PHY_LE_CODED}.\n         * @throws IllegalArgumentException If the primaryPhy is invalid.\n         ",
    "links" : [ "android.bluetooth.BluetoothAdapter#isLeCodedPhySupported", "android.bluetooth.BluetoothDevice#PHY_LE_CODED", "android.bluetooth.BluetoothDevice#PHY_LE_1M" ]
  }, {
    "name" : "public Builder setSecondaryPhy(int secondaryPhy)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the secondary physical channel used for this advertising set.\n         *\n         * <p>This is used only if legacy mode is not used.\n         *\n         * <p>Use {@link BluetoothAdapter#isLeCodedPhySupported} and {@link\n         * BluetoothAdapter#isLe2MPhySupported} to determine if LE Coded PHY or 2M PHY is supported\n         * on this device.\n         *\n         * @param secondaryPhy Secondary advertising physical channel, can only be one of {@link\n         *     BluetoothDevice#PHY_LE_1M}, {@link BluetoothDevice#PHY_LE_2M} or {@link\n         *     BluetoothDevice#PHY_LE_CODED}.\n         * @throws IllegalArgumentException If the secondaryPhy is invalid.\n         ",
    "links" : [ "android.bluetooth.BluetoothAdapter#isLeCodedPhySupported", "android.bluetooth.BluetoothDevice#PHY_LE_CODED", "android.bluetooth.BluetoothDevice#PHY_LE_2M", "android.bluetooth.BluetoothAdapter#isLe2MPhySupported", "android.bluetooth.BluetoothDevice#PHY_LE_1M" ]
  }, {
    "name" : "public Builder setInterval(int interval)",
    "returnType" : "Builder",
    "comment" : "\n         * Set advertising interval.\n         *\n         * @param interval Bluetooth LE Advertising interval, in 0.625ms unit. Valid range is from\n         *     160 (100ms) to 16777215 (10,485.759375 s). Recommended values are: {@link\n         *     AdvertisingSetParameters#INTERVAL_LOW}, {@link\n         *     AdvertisingSetParameters#INTERVAL_MEDIUM}, or {@link\n         *     AdvertisingSetParameters#INTERVAL_HIGH}.\n         * @throws IllegalArgumentException If the interval is invalid.\n         ",
    "links" : [ "android.bluetooth.le.AdvertisingSetParameters#INTERVAL_MEDIUM", "android.bluetooth.le.AdvertisingSetParameters#INTERVAL_LOW", "android.bluetooth.le.AdvertisingSetParameters#INTERVAL_HIGH" ]
  }, {
    "name" : "public Builder setTxPowerLevel(int txPowerLevel)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the transmission power level for the advertising.\n         *\n         * @param txPowerLevel Transmission power of Bluetooth LE Advertising, in dBm. The valid\n         *     range is [-127, 1] Recommended values are: {@link\n         *     AdvertisingSetParameters#TX_POWER_ULTRA_LOW}, {@link\n         *     AdvertisingSetParameters#TX_POWER_LOW}, {@link\n         *     AdvertisingSetParameters#TX_POWER_MEDIUM}, or {@link\n         *     AdvertisingSetParameters#TX_POWER_HIGH}.\n         * @throws IllegalArgumentException If the {@code txPowerLevel} is invalid.\n         ",
    "links" : [ "android.bluetooth.le.AdvertisingSetParameters#TX_POWER_HIGH", "android.bluetooth.le.AdvertisingSetParameters#TX_POWER_LOW", "android.bluetooth.le.AdvertisingSetParameters#TX_POWER_ULTRA_LOW", "android.bluetooth.le.AdvertisingSetParameters#TX_POWER_MEDIUM" ]
  }, {
    "name" : "public Builder setOwnAddressType(@AddressTypeStatus int ownAddressType)",
    "returnType" : "Builder",
    "comment" : "\n         * Set own address type for advertising to control public or privacy mode. If used to set\n         * address type anything other than {@link AdvertisingSetParameters#ADDRESS_TYPE_DEFAULT},\n         * then it will require BLUETOOTH_PRIVILEGED permission and will be checked at the time of\n         * starting advertising.\n         *\n         * @throws IllegalArgumentException If the {@code ownAddressType} is invalid\n         * @hide\n         ",
    "links" : [ "android.bluetooth.le.AdvertisingSetParameters#ADDRESS_TYPE_DEFAULT" ]
  }, {
    "name" : "public AdvertisingSetParameters build()",
    "returnType" : "AdvertisingSetParameters",
    "comment" : "\n         * Build the {@link AdvertisingSetParameters} object.\n         *\n         * @throws IllegalStateException if invalid combination of parameters is used.\n         ",
    "links" : [ "android.bluetooth.le.AdvertisingSetParameters" ]
  } ],
  "methodNames" : [ "public Builder setConnectable(boolean connectable)", "public Builder setDiscoverable(boolean discoverable)", "public Builder setScannable(boolean scannable)", "public Builder setLegacyMode(boolean isLegacy)", "public Builder setAnonymous(boolean isAnonymous)", "public Builder setIncludeTxPower(boolean includeTxPower)", "public Builder setPrimaryPhy(int primaryPhy)", "public Builder setSecondaryPhy(int secondaryPhy)", "public Builder setInterval(int interval)", "public Builder setTxPowerLevel(int txPowerLevel)", "public Builder setOwnAddressType(@AddressTypeStatus int ownAddressType)", "public AdvertisingSetParameters build()" ],
  "variableNames" : [ "mConnectable", "mDiscoverable", "mScannable", "mIsLegacy", "mIsAnonymous", "mIncludeTxPower", "mPrimaryPhy", "mSecondaryPhy", "mInterval", "mTxPowerLevel", "mOwnAddressType" ]
}