{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/w3c/dom/Element.java",
  "packageName" : "org.w3c.dom",
  "className" : "Element",
  "comment" : "\n * The <code>Element</code> interface represents an element in an HTML or XML\n * document. Elements may have attributes associated with them; since the\n * <code>Element</code> interface inherits from <code>Node</code>, the\n * generic <code>Node</code> interface attribute <code>attributes</code> may\n * be used to retrieve the set of all attributes for an element. There are\n * methods on the <code>Element</code> interface to retrieve either an\n * <code>Attr</code> object by name or an attribute value by name. In XML,\n * where an attribute value may contain entity references, an\n * <code>Attr</code> object should be retrieved to examine the possibly\n * fairly complex sub-tree representing the attribute value. On the other\n * hand, in HTML, where all attributes have simple string values, methods to\n * directly access an attribute value can safely be used as a convenience.\n * <p ><b>Note:</b> In DOM Level 2, the method <code>normalize</code> is\n * inherited from the <code>Node</code> interface where it was moved.\n * <p>See also the <a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>Document Object Model (DOM) Level 3 Core Specification</a>.\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public String getTagName()",
    "returnType" : "String",
    "comment" : "\n     * The name of the element. If <code>Node.localName</code> is different\n     * from <code>null</code>, this attribute is a qualified name. For\n     * example, in:\n     * <pre> &lt;elementExample id=\"demo\"&gt; ...\n     * &lt;/elementExample&gt; , </pre>\n     *  <code>tagName</code> has the value\n     * <code>\"elementExample\"</code>. Note that this is case-preserving in\n     * XML, as are all of the operations of the DOM. The HTML DOM returns\n     * the <code>tagName</code> of an HTML element in the canonical\n     * uppercase form, regardless of the case in the source HTML document.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getAttribute(String name)",
    "returnType" : "String",
    "comment" : "\n     * Retrieves an attribute value by name.\n     * @param name The name of the attribute to retrieve.\n     * @return The <code>Attr</code> value as a string, or the empty string\n     *   if that attribute does not have a specified or default value.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAttribute(String name, String value) throws DOMException",
    "returnType" : "void",
    "comment" : "\n     * Adds a new attribute. If an attribute with that name is already present\n     * in the element, its value is changed to be that of the value\n     * parameter. This value is a simple string; it is not parsed as it is\n     * being set. So any markup (such as syntax to be recognized as an\n     * entity reference) is treated as literal text, and needs to be\n     * appropriately escaped by the implementation when it is written out.\n     * In order to assign an attribute value that contains entity\n     * references, the user must create an <code>Attr</code> node plus any\n     * <code>Text</code> and <code>EntityReference</code> nodes, build the\n     * appropriate subtree, and use <code>setAttributeNode</code> to assign\n     * it as the value of an attribute.\n     * <br>To set an attribute with a qualified name and namespace URI, use\n     * the <code>setAttributeNS</code> method.\n     * @param name The name of the attribute to create or alter.\n     * @param value Value to set in string form.\n     * @exception DOMException\n     *   INVALID_CHARACTER_ERR: Raised if the specified name is not an XML\n     *   name according to the XML version in use specified in the\n     *   <code>Document.xmlVersion</code> attribute.\n     *   <br>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removeAttribute(String name) throws DOMException",
    "returnType" : "void",
    "comment" : "\n     * Removes an attribute by name. If a default value for the removed\n     * attribute is defined in the DTD, a new attribute immediately appears\n     * with the default value as well as the corresponding namespace URI,\n     * local name, and prefix when applicable. The implementation may handle\n     * default values from other schemas similarly but applications should\n     * use <code>Document.normalizeDocument()</code> to guarantee this\n     * information is up-to-date.\n     * <br>If no attribute with this name is found, this method has no effect.\n     * <br>To remove an attribute by local name and namespace URI, use the\n     * <code>removeAttributeNS</code> method.\n     * @param name The name of the attribute to remove.\n     * @exception DOMException\n     *   NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Attr getAttributeNode(String name)",
    "returnType" : "Attr",
    "comment" : "\n     * Retrieves an attribute node by name.\n     * <br>To retrieve an attribute node by qualified name and namespace URI,\n     * use the <code>getAttributeNodeNS</code> method.\n     * @param name The name (<code>nodeName</code>) of the attribute to\n     *   retrieve.\n     * @return The <code>Attr</code> node with the specified name (\n     *   <code>nodeName</code>) or <code>null</code> if there is no such\n     *   attribute.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Attr setAttributeNode(Attr newAttr) throws DOMException",
    "returnType" : "Attr",
    "comment" : "\n     * Adds a new attribute node. If an attribute with that name (\n     * <code>nodeName</code>) is already present in the element, it is\n     * replaced by the new one. Replacing an attribute node by itself has no\n     * effect.\n     * <br>To add a new attribute node with a qualified name and namespace\n     * URI, use the <code>setAttributeNodeNS</code> method.\n     * @param newAttr The <code>Attr</code> node to add to the attribute list.\n     * @return If the <code>newAttr</code> attribute replaces an existing\n     *   attribute, the replaced <code>Attr</code> node is returned,\n     *   otherwise <code>null</code> is returned.\n     * @exception DOMException\n     *   WRONG_DOCUMENT_ERR: Raised if <code>newAttr</code> was created from a\n     *   different document than the one that created the element.\n     *   <br>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.\n     *   <br>INUSE_ATTRIBUTE_ERR: Raised if <code>newAttr</code> is already an\n     *   attribute of another <code>Element</code> object. The DOM user must\n     *   explicitly clone <code>Attr</code> nodes to re-use them in other\n     *   elements.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Attr removeAttributeNode(Attr oldAttr) throws DOMException",
    "returnType" : "Attr",
    "comment" : "\n     * Removes the specified attribute node. If a default value for the\n     * removed <code>Attr</code> node is defined in the DTD, a new node\n     * immediately appears with the default value as well as the\n     * corresponding namespace URI, local name, and prefix when applicable.\n     * The implementation may handle default values from other schemas\n     * similarly but applications should use\n     * <code>Document.normalizeDocument()</code> to guarantee this\n     * information is up-to-date.\n     * @param oldAttr The <code>Attr</code> node to remove from the attribute\n     *   list.\n     * @return The <code>Attr</code> node that was removed.\n     * @exception DOMException\n     *   NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.\n     *   <br>NOT_FOUND_ERR: Raised if <code>oldAttr</code> is not an attribute\n     *   of the element.\n     ",
    "links" : [ ]
  }, {
    "name" : "public NodeList getElementsByTagName(String name)",
    "returnType" : "NodeList",
    "comment" : "\n     * Returns a <code>NodeList</code> of all descendant <code>Elements</code>\n     * with a given tag name, in document order.\n     * @param name The name of the tag to match on. The special value \"*\"\n     *   matches all tags.\n     * @return A list of matching <code>Element</code> nodes.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getAttributeNS(String namespaceURI, String localName) throws DOMException",
    "returnType" : "String",
    "comment" : "\n     * Retrieves an attribute value by local name and namespace URI.\n     * <br>Per [<a href='http://www.w3.org/TR/1999/REC-xml-names-19990114/'>XML Namespaces</a>]\n     * , applications must use the value <code>null</code> as the\n     * <code>namespaceURI</code> parameter for methods if they wish to have\n     * no namespace.\n     * @param namespaceURI The namespace URI of the attribute to retrieve.\n     * @param localName The local name of the attribute to retrieve.\n     * @return The <code>Attr</code> value as a string, or the empty string\n     *   if that attribute does not have a specified or default value.\n     * @exception DOMException\n     *   NOT_SUPPORTED_ERR: May be raised if the implementation does not\n     *   support the feature <code>\"XML\"</code> and the language exposed\n     *   through the Document does not support XML Namespaces (such as [<a href='http://www.w3.org/TR/1999/REC-html401-19991224/'>HTML 4.01</a>]).\n     * @since DOM Level 2\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAttributeNS(String namespaceURI, String qualifiedName, String value) throws DOMException",
    "returnType" : "void",
    "comment" : "\n     * Adds a new attribute. If an attribute with the same local name and\n     * namespace URI is already present on the element, its prefix is\n     * changed to be the prefix part of the <code>qualifiedName</code>, and\n     * its value is changed to be the <code>value</code> parameter. This\n     * value is a simple string; it is not parsed as it is being set. So any\n     * markup (such as syntax to be recognized as an entity reference) is\n     * treated as literal text, and needs to be appropriately escaped by the\n     * implementation when it is written out. In order to assign an\n     * attribute value that contains entity references, the user must create\n     * an <code>Attr</code> node plus any <code>Text</code> and\n     * <code>EntityReference</code> nodes, build the appropriate subtree,\n     * and use <code>setAttributeNodeNS</code> or\n     * <code>setAttributeNode</code> to assign it as the value of an\n     * attribute.\n     * <br>Per [<a href='http://www.w3.org/TR/1999/REC-xml-names-19990114/'>XML Namespaces</a>]\n     * , applications must use the value <code>null</code> as the\n     * <code>namespaceURI</code> parameter for methods if they wish to have\n     * no namespace.\n     * @param namespaceURI The namespace URI of the attribute to create or\n     *   alter.\n     * @param qualifiedName The qualified name of the attribute to create or\n     *   alter.\n     * @param value The value to set in string form.\n     * @exception DOMException\n     *   INVALID_CHARACTER_ERR: Raised if the specified qualified name is not\n     *   an XML name according to the XML version in use specified in the\n     *   <code>Document.xmlVersion</code> attribute.\n     *   <br>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.\n     *   <br>NAMESPACE_ERR: Raised if the <code>qualifiedName</code> is\n     *   malformed per the Namespaces in XML specification, if the\n     *   <code>qualifiedName</code> has a prefix and the\n     *   <code>namespaceURI</code> is <code>null</code>, if the\n     *   <code>qualifiedName</code> has a prefix that is \"xml\" and the\n     *   <code>namespaceURI</code> is different from \"<a href='http://www.w3.org/XML/1998/namespace'>\n     *   http://www.w3.org/XML/1998/namespace</a>\", if the <code>qualifiedName</code> or its prefix is \"xmlns\" and the\n     *   <code>namespaceURI</code> is different from \"<a href='http://www.w3.org/2000/xmlns/'>http://www.w3.org/2000/xmlns/</a>\", or if the <code>namespaceURI</code> is \"<a href='http://www.w3.org/2000/xmlns/'>http://www.w3.org/2000/xmlns/</a>\" and neither the <code>qualifiedName</code> nor its prefix is \"xmlns\".\n     *   <br>NOT_SUPPORTED_ERR: May be raised if the implementation does not\n     *   support the feature <code>\"XML\"</code> and the language exposed\n     *   through the Document does not support XML Namespaces (such as [<a href='http://www.w3.org/TR/1999/REC-html401-19991224/'>HTML 4.01</a>]).\n     * @since DOM Level 2\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removeAttributeNS(String namespaceURI, String localName) throws DOMException",
    "returnType" : "void",
    "comment" : "\n     * Removes an attribute by local name and namespace URI. If a default\n     * value for the removed attribute is defined in the DTD, a new\n     * attribute immediately appears with the default value as well as the\n     * corresponding namespace URI, local name, and prefix when applicable.\n     * The implementation may handle default values from other schemas\n     * similarly but applications should use\n     * <code>Document.normalizeDocument()</code> to guarantee this\n     * information is up-to-date.\n     * <br>If no attribute with this local name and namespace URI is found,\n     * this method has no effect.\n     * <br>Per [<a href='http://www.w3.org/TR/1999/REC-xml-names-19990114/'>XML Namespaces</a>]\n     * , applications must use the value <code>null</code> as the\n     * <code>namespaceURI</code> parameter for methods if they wish to have\n     * no namespace.\n     * @param namespaceURI The namespace URI of the attribute to remove.\n     * @param localName The local name of the attribute to remove.\n     * @exception DOMException\n     *   NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.\n     *   <br>NOT_SUPPORTED_ERR: May be raised if the implementation does not\n     *   support the feature <code>\"XML\"</code> and the language exposed\n     *   through the Document does not support XML Namespaces (such as [<a href='http://www.w3.org/TR/1999/REC-html401-19991224/'>HTML 4.01</a>]).\n     * @since DOM Level 2\n     ",
    "links" : [ ]
  }, {
    "name" : "public Attr getAttributeNodeNS(String namespaceURI, String localName) throws DOMException",
    "returnType" : "Attr",
    "comment" : "\n     * Retrieves an <code>Attr</code> node by local name and namespace URI.\n     * <br>Per [<a href='http://www.w3.org/TR/1999/REC-xml-names-19990114/'>XML Namespaces</a>]\n     * , applications must use the value <code>null</code> as the\n     * <code>namespaceURI</code> parameter for methods if they wish to have\n     * no namespace.\n     * @param namespaceURI The namespace URI of the attribute to retrieve.\n     * @param localName The local name of the attribute to retrieve.\n     * @return The <code>Attr</code> node with the specified attribute local\n     *   name and namespace URI or <code>null</code> if there is no such\n     *   attribute.\n     * @exception DOMException\n     *   NOT_SUPPORTED_ERR: May be raised if the implementation does not\n     *   support the feature <code>\"XML\"</code> and the language exposed\n     *   through the Document does not support XML Namespaces (such as [<a href='http://www.w3.org/TR/1999/REC-html401-19991224/'>HTML 4.01</a>]).\n     * @since DOM Level 2\n     ",
    "links" : [ ]
  }, {
    "name" : "public Attr setAttributeNodeNS(Attr newAttr) throws DOMException",
    "returnType" : "Attr",
    "comment" : "\n     * Adds a new attribute. If an attribute with that local name and that\n     * namespace URI is already present in the element, it is replaced by\n     * the new one. Replacing an attribute node by itself has no effect.\n     * <br>Per [<a href='http://www.w3.org/TR/1999/REC-xml-names-19990114/'>XML Namespaces</a>]\n     * , applications must use the value <code>null</code> as the\n     * <code>namespaceURI</code> parameter for methods if they wish to have\n     * no namespace.\n     * @param newAttr The <code>Attr</code> node to add to the attribute list.\n     * @return If the <code>newAttr</code> attribute replaces an existing\n     *   attribute with the same local name and namespace URI, the replaced\n     *   <code>Attr</code> node is returned, otherwise <code>null</code> is\n     *   returned.\n     * @exception DOMException\n     *   WRONG_DOCUMENT_ERR: Raised if <code>newAttr</code> was created from a\n     *   different document than the one that created the element.\n     *   <br>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.\n     *   <br>INUSE_ATTRIBUTE_ERR: Raised if <code>newAttr</code> is already an\n     *   attribute of another <code>Element</code> object. The DOM user must\n     *   explicitly clone <code>Attr</code> nodes to re-use them in other\n     *   elements.\n     *   <br>NOT_SUPPORTED_ERR: May be raised if the implementation does not\n     *   support the feature <code>\"XML\"</code> and the language exposed\n     *   through the Document does not support XML Namespaces (such as [<a href='http://www.w3.org/TR/1999/REC-html401-19991224/'>HTML 4.01</a>]).\n     * @since DOM Level 2\n     ",
    "links" : [ ]
  }, {
    "name" : "public NodeList getElementsByTagNameNS(String namespaceURI, String localName) throws DOMException",
    "returnType" : "NodeList",
    "comment" : "\n     * Returns a <code>NodeList</code> of all the descendant\n     * <code>Elements</code> with a given local name and namespace URI in\n     * document order.\n     * @param namespaceURI The namespace URI of the elements to match on. The\n     *   special value \"*\" matches all namespaces.\n     * @param localName The local name of the elements to match on. The\n     *   special value \"*\" matches all local names.\n     * @return A new <code>NodeList</code> object containing all the matched\n     *   <code>Elements</code>.\n     * @exception DOMException\n     *   NOT_SUPPORTED_ERR: May be raised if the implementation does not\n     *   support the feature <code>\"XML\"</code> and the language exposed\n     *   through the Document does not support XML Namespaces (such as [<a href='http://www.w3.org/TR/1999/REC-html401-19991224/'>HTML 4.01</a>]).\n     * @since DOM Level 2\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasAttribute(String name)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns <code>true</code> when an attribute with a given name is\n     * specified on this element or has a default value, <code>false</code>\n     * otherwise.\n     * @param name The name of the attribute to look for.\n     * @return <code>true</code> if an attribute with the given name is\n     *   specified on this element or has a default value, <code>false</code>\n     *    otherwise.\n     * @since DOM Level 2\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasAttributeNS(String namespaceURI, String localName) throws DOMException",
    "returnType" : "boolean",
    "comment" : "\n     * Returns <code>true</code> when an attribute with a given local name and\n     * namespace URI is specified on this element or has a default value,\n     * <code>false</code> otherwise.\n     * <br>Per [<a href='http://www.w3.org/TR/1999/REC-xml-names-19990114/'>XML Namespaces</a>]\n     * , applications must use the value <code>null</code> as the\n     * <code>namespaceURI</code> parameter for methods if they wish to have\n     * no namespace.\n     * @param namespaceURI The namespace URI of the attribute to look for.\n     * @param localName The local name of the attribute to look for.\n     * @return <code>true</code> if an attribute with the given local name\n     *   and namespace URI is specified or has a default value on this\n     *   element, <code>false</code> otherwise.\n     * @exception DOMException\n     *   NOT_SUPPORTED_ERR: May be raised if the implementation does not\n     *   support the feature <code>\"XML\"</code> and the language exposed\n     *   through the Document does not support XML Namespaces (such as [<a href='http://www.w3.org/TR/1999/REC-html401-19991224/'>HTML 4.01</a>]).\n     * @since DOM Level 2\n     ",
    "links" : [ ]
  }, {
    "name" : "public TypeInfo getSchemaTypeInfo()",
    "returnType" : "TypeInfo",
    "comment" : "\n     *  The type information associated with this element.\n     * @since DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setIdAttribute(String name, boolean isId) throws DOMException",
    "returnType" : "void",
    "comment" : "\n     *  If the parameter <code>isId</code> is <code>true</code>, this method\n     * declares the specified attribute to be a user-determined ID attribute\n     * . This affects the value of <code>Attr.isId</code> and the behavior\n     * of <code>Document.getElementById</code>, but does not change any\n     * schema that may be in use, in particular this does not affect the\n     * <code>Attr.schemaTypeInfo</code> of the specified <code>Attr</code>\n     * node. Use the value <code>false</code> for the parameter\n     * <code>isId</code> to undeclare an attribute for being a\n     * user-determined ID attribute.\n     * <br> To specify an attribute by local name and namespace URI, use the\n     * <code>setIdAttributeNS</code> method.\n     * @param name The name of the attribute.\n     * @param isId Whether the attribute is a of type ID.\n     * @exception DOMException\n     *   NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.\n     *   <br>NOT_FOUND_ERR: Raised if the specified node is not an attribute\n     *   of this element.\n     * @since DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setIdAttributeNS(String namespaceURI, String localName, boolean isId) throws DOMException",
    "returnType" : "void",
    "comment" : "\n     *  If the parameter <code>isId</code> is <code>true</code>, this method\n     * declares the specified attribute to be a user-determined ID attribute\n     * . This affects the value of <code>Attr.isId</code> and the behavior\n     * of <code>Document.getElementById</code>, but does not change any\n     * schema that may be in use, in particular this does not affect the\n     * <code>Attr.schemaTypeInfo</code> of the specified <code>Attr</code>\n     * node. Use the value <code>false</code> for the parameter\n     * <code>isId</code> to undeclare an attribute for being a\n     * user-determined ID attribute.\n     * @param namespaceURI The namespace URI of the attribute.\n     * @param localName The local name of the attribute.\n     * @param isId Whether the attribute is a of type ID.\n     * @exception DOMException\n     *   NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.\n     *   <br>NOT_FOUND_ERR: Raised if the specified node is not an attribute\n     *   of this element.\n     * @since DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setIdAttributeNode(Attr idAttr, boolean isId) throws DOMException",
    "returnType" : "void",
    "comment" : "\n     *  If the parameter <code>isId</code> is <code>true</code>, this method\n     * declares the specified attribute to be a user-determined ID attribute\n     * . This affects the value of <code>Attr.isId</code> and the behavior\n     * of <code>Document.getElementById</code>, but does not change any\n     * schema that may be in use, in particular this does not affect the\n     * <code>Attr.schemaTypeInfo</code> of the specified <code>Attr</code>\n     * node. Use the value <code>false</code> for the parameter\n     * <code>isId</code> to undeclare an attribute for being a\n     * user-determined ID attribute.\n     * @param idAttr The attribute node.\n     * @param isId Whether the attribute is a of type ID.\n     * @exception DOMException\n     *   NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.\n     *   <br>NOT_FOUND_ERR: Raised if the specified node is not an attribute\n     *   of this element.\n     * @since DOM Level 3\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public String getTagName()", "public String getAttribute(String name)", "public void setAttribute(String name, String value) throws DOMException", "public void removeAttribute(String name) throws DOMException", "public Attr getAttributeNode(String name)", "public Attr setAttributeNode(Attr newAttr) throws DOMException", "public Attr removeAttributeNode(Attr oldAttr) throws DOMException", "public NodeList getElementsByTagName(String name)", "public String getAttributeNS(String namespaceURI, String localName) throws DOMException", "public void setAttributeNS(String namespaceURI, String qualifiedName, String value) throws DOMException", "public void removeAttributeNS(String namespaceURI, String localName) throws DOMException", "public Attr getAttributeNodeNS(String namespaceURI, String localName) throws DOMException", "public Attr setAttributeNodeNS(Attr newAttr) throws DOMException", "public NodeList getElementsByTagNameNS(String namespaceURI, String localName) throws DOMException", "public boolean hasAttribute(String name)", "public boolean hasAttributeNS(String namespaceURI, String localName) throws DOMException", "public TypeInfo getSchemaTypeInfo()", "public void setIdAttribute(String name, boolean isId) throws DOMException", "public void setIdAttributeNS(String namespaceURI, String localName, boolean isId) throws DOMException", "public void setIdAttributeNode(Attr idAttr, boolean isId) throws DOMException" ],
  "variableNames" : [ ]
}