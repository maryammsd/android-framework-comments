{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/widget/inline/InlineContentView.java",
  "packageName" : "android.widget.inline",
  "className" : "InlineContentView",
  "comment" : "\n * This class represents a view that holds opaque content from another app that you can inline in\n * your UI.\n *\n * <p>Since the content presented by this view is from another security domain,it is\n * shown on a remote surface preventing the host application from accessing that content. Also the\n * host application cannot interact with the inlined content by injecting touch events or clicking\n * programmatically.\n *\n * <p>This view can be overlaid by other windows, i.e. redressed, but if this is the case\n * the inlined UI would not be interactive. Sometimes this is desirable, e.g. animating transitions.\n *\n * <p>By default the surface backing this view is shown on top of the hosting window such\n * that the inlined content is interactive. However, you can temporarily move the surface under the\n * hosting window which could be useful in some cases, e.g. animating transitions. At this point the\n * inlined content will not be interactive and the touch events would be delivered to your app.\n *\n * <p> Instances of this class are created by the platform and can be programmatically attached to\n * your UI. Once the view is attached to the window, you may detach and reattach it to the window.\n * It should work seamlessly from the hosting process's point of view.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSurfaceCallback",
    "type" : "SurfaceHolder.Callback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnReparentListener",
    "type" : "SurfaceControl.OnReparentListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnDrawListener",
    "type" : "ViewTreeObserver.OnDrawListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSurfaceView",
    "type" : "SurfaceView",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mParentSurfaceOwnerView",
    "type" : "WeakReference<SurfaceView>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mParentPosition",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mParentScale",
    "type" : "PointF",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSurfaceControlCallback",
    "type" : "SurfaceControlCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSurfacePackageUpdater",
    "type" : "SurfacePackageUpdater",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public SurfaceControl getSurfaceControl()",
    "returnType" : "SurfaceControl",
    "comment" : "\n     * Gets the surface control. If the surface is not created this method returns {@code null}.\n     *\n     * @return The surface control.\n     * @see #setSurfaceControlCallback(SurfaceControlCallback)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setClipBounds(Rect clipBounds)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setChildSurfacePackageUpdater(@Nullable SurfacePackageUpdater surfacePackageUpdater)",
    "returnType" : "void",
    "comment" : "\n     * Sets the embedded UI provider.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void onAttachedToWindow()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onDetachedFromWindow()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onLayout(boolean changed, int l, int t, int r, int b)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setSurfaceControlCallback(@Nullable SurfaceControlCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Sets a callback to observe the lifecycle of the surface control for managing the backing\n     * surface.\n     *\n     * @param callback The callback to set or {@code null} to clear.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isZOrderedOnTop()",
    "returnType" : "boolean",
    "comment" : "\n     * @return Whether the surface backing this view appears on top of its parent.\n     * @see #setZOrderedOnTop(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean setZOrderedOnTop(boolean onTop)",
    "returnType" : "boolean",
    "comment" : "\n     * Controls whether the backing surface is placed on top of this view's window. Normally, it is\n     * placed on top of the window, to allow interaction with the inlined UI. Via this method, you\n     * can place the surface below the window. This means that all of the contents of the window\n     * this view is in will be visible on top of its surface.\n     *\n     * <p> The Z ordering can be changed dynamically if the backing surface is\n     * created, otherwise the ordering would be applied at surface construction time.\n     *\n     * @param onTop Whether to show the surface on top of this view's window.\n     * @see #isZOrderedOnTop()\n     ",
    "links" : [ ]
  }, {
    "name" : "private void computeParentPositionAndScale()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "DEBUG", "mSurfaceCallback", "mOnReparentListener", "mOnDrawListener", "mSurfaceView", "mParentSurfaceOwnerView", "mParentPosition", "mParentScale", "mSurfaceControlCallback", "mSurfacePackageUpdater" ],
  "methodNames" : [ "public SurfaceControl getSurfaceControl()", "public void setClipBounds(Rect clipBounds)", "public void setChildSurfacePackageUpdater(@Nullable SurfacePackageUpdater surfacePackageUpdater)", "protected void onAttachedToWindow()", "protected void onDetachedFromWindow()", "public void onLayout(boolean changed, int l, int t, int r, int b)", "public void setSurfaceControlCallback(@Nullable SurfaceControlCallback callback)", "public boolean isZOrderedOnTop()", "public boolean setZOrderedOnTop(boolean onTop)", "private void computeParentPositionAndScale()" ]
}