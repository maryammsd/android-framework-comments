{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/os/VibrationEffect.java",
  "packageName" : "android.os",
  "className" : "WaveformBuilder",
  "comment" : "\n     * A builder for waveform haptic effects.\n     *\n     * <p>Waveform vibrations constitute of one or more timed transitions to new sets of vibration\n     * parameters. These parameters can be the vibration amplitude, frequency, or both.\n     *\n     * <p>The following example ramps a vibrator turned off to full amplitude at 120Hz, over 100ms\n     * starting at 60Hz, then holds that state for 200ms and ramps back down again over 100ms:\n     *\n     * <pre>\n     * {@code import static android.os.VibrationEffect.VibrationParameter.targetAmplitude;\n     * import static android.os.VibrationEffect.VibrationParameter.targetFrequency;\n     *\n     * VibrationEffect effect = VibrationEffect.startWaveform(targetFrequency(60))\n     *     .addTransition(Duration.ofMillis(100), targetAmplitude(1), targetFrequency(120))\n     *     .addSustain(Duration.ofMillis(200))\n     *     .addTransition(Duration.ofMillis(100), targetAmplitude(0), targetFrequency(60))\n     *     .build();}</pre>\n     *\n     * <p>The initial state of the waveform can be set via\n     * {@link VibrationEffect#startWaveform(VibrationParameter)} or\n     * {@link VibrationEffect#startWaveform(VibrationParameter, VibrationParameter)}. If the initial\n     * parameters are not set then the {@link WaveformBuilder} will start with the vibrator off,\n     * represented by zero amplitude, at the vibrator's resonant frequency.\n     *\n     * <p>Repeating waveforms can be created by building the repeating block separately and adding\n     * it to the end of a composition with\n     * {@link Composition#repeatEffectIndefinitely(VibrationEffect)}:\n     *\n     * <p>Note that physical vibration actuators have different reaction times for changing\n     * amplitude and frequency. Durations specified here represent a timeline for the target\n     * parameters, and quality of effects may be improved if the durations allow time for a\n     * transition to be smoothly applied.\n     *\n     * <p>The following example illustrates both an initial state and a repeating section, using\n     * a {@link VibrationEffect.Composition}. The resulting effect will have a tick followed by a\n     * repeated beating effect with a rise that stretches out and a sharp finish.\n     *\n     * <pre>\n     * {@code VibrationEffect patternToRepeat = VibrationEffect.startWaveform(targetAmplitude(0.2f))\n     *     .addSustain(Duration.ofMillis(10))\n     *     .addTransition(Duration.ofMillis(20), targetAmplitude(0.4f))\n     *     .addSustain(Duration.ofMillis(30))\n     *     .addTransition(Duration.ofMillis(40), targetAmplitude(0.8f))\n     *     .addSustain(Duration.ofMillis(50))\n     *     .addTransition(Duration.ofMillis(60), targetAmplitude(0.2f))\n     *     .build();\n     *\n     * VibrationEffect effect = VibrationEffect.startComposition()\n     *     .addPrimitive(VibrationEffect.Composition.PRIMITIVE_TICK)\n     *     .addOffDuration(Duration.ofMillis(20))\n     *     .repeatEffectIndefinitely(patternToRepeat)\n     *     .compose();}</pre>\n     *\n     * <p>The amplitude step waveforms that can be created via\n     * {@link VibrationEffect#createWaveform(long[], int[], int)} can also be created with\n     * {@link WaveformBuilder} by adding zero duration transitions:\n     *\n     * <pre>\n     * {@code // These two effects are the same\n     * VibrationEffect waveform = VibrationEffect.createWaveform(\n     *     new long[] { 10, 20, 30 },  // timings in milliseconds\n     *     new int[] { 51, 102, 204 }, // amplitudes in [0,255]\n     *     -1);                        // repeat index\n     *\n     * VibrationEffect sameWaveform = VibrationEffect.startWaveform(targetAmplitude(0.2f))\n     *     .addSustain(Duration.ofMillis(10))\n     *     .addTransition(Duration.ZERO, targetAmplitude(0.4f))\n     *     .addSustain(Duration.ofMillis(20))\n     *     .addTransition(Duration.ZERO, targetAmplitude(0.8f))\n     *     .addSustain(Duration.ofMillis(30))\n     *     .build();}</pre>\n     *\n     * @see VibrationEffect#startWaveform\n     * @hide\n     ",
  "links" : [ "android.os.VibrationEffect#createWaveform(long", "#repeatEffectIndefinitely(VibrationEffect)", "VibrationEffect.Composition", "android.os.VibrationEffect#startWaveform(VibrationParameter)", "android.os.VibrationEffect#startWaveform(VibrationParameter", "WaveformBuilder" ],
  "variables" : [ {
    "name" : "EPSILON",
    "type" : "float",
    "comment" : " Epsilon used for float comparison of amplitude and frequency values on transitions.",
    "links" : [ ]
  }, {
    "name" : "mSegments",
    "type" : "ArrayList<VibrationEffectSegment>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLastAmplitude",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLastFrequencyHz",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public WaveformBuilder addTransition(@NonNull Duration duration, @NonNull VibrationParameter targetParameter)",
    "returnType" : "WaveformBuilder",
    "comment" : "\n         * Add a transition to new vibration parameter value to the end of this waveform.\n         *\n         * <p>The duration represents how long the vibrator should take to smoothly transition to\n         * the new vibration parameter. If the duration is zero then the vibrator will jump to the\n         * new value as fast as possible.\n         *\n         * <p>Vibration parameter values will be truncated to conform to the device capabilities\n         * according to the {@link android.os.vibrator.VibratorFrequencyProfile}.\n         *\n         * @param duration        The length of time this transition should take. Value must be\n         *                        non-negative and will be truncated to milliseconds.\n         * @param targetParameter The new target {@link VibrationParameter} value to be reached\n         *                        after the given duration.\n         * @return This {@link WaveformBuilder} object to enable adding multiple transitions in\n         * chain.\n         * @hide\n         ",
    "links" : [ "android.os.vibrator.VibratorFrequencyProfile", "WaveformBuilder", "VibrationParameter" ]
  }, {
    "name" : "public WaveformBuilder addTransition(@NonNull Duration duration, @NonNull VibrationParameter targetParameter1, @NonNull VibrationParameter targetParameter2)",
    "returnType" : "WaveformBuilder",
    "comment" : "\n         * Add a transition to new vibration parameters to the end of this waveform.\n         *\n         * <p>The duration represents how long the vibrator should take to smoothly transition to\n         * the new vibration parameters. If the duration is zero then the vibrator will jump to the\n         * new values as fast as possible.\n         *\n         * <p>Vibration parameters values will be truncated to conform to the device capabilities\n         * according to the {@link android.os.vibrator.VibratorFrequencyProfile}.\n         *\n         * @param duration         The length of time this transition should take. Value must be\n         *                         non-negative and will be truncated to milliseconds.\n         * @param targetParameter1 The first target {@link VibrationParameter} value to be reached\n         *                         after the given duration.\n         * @param targetParameter2 The second target {@link VibrationParameter} value to be reached\n         *                         after the given duration, must be a different type of parameter\n         *                         than the one specified by the first argument.\n         * @return This {@link WaveformBuilder} object to enable adding multiple transitions in\n         * chain.\n         * @hide\n         ",
    "links" : [ "android.os.vibrator.VibratorFrequencyProfile", "WaveformBuilder", "VibrationParameter" ]
  }, {
    "name" : "public WaveformBuilder addSustain(@NonNull Duration duration)",
    "returnType" : "WaveformBuilder",
    "comment" : "\n         * Add a duration to sustain the last vibration parameters of this waveform.\n         *\n         * <p>The duration represents how long the vibrator should sustain the last set of\n         * parameters provided to this builder.\n         *\n         * @param duration   The length of time the last values should be sustained by the vibrator.\n         *                   Value must be >= 1ms.\n         * @return This {@link WaveformBuilder} object to enable adding multiple transitions in\n         * chain.\n         * @hide\n         ",
    "links" : [ "WaveformBuilder" ]
  }, {
    "name" : "public VibrationEffect build()",
    "returnType" : "VibrationEffect",
    "comment" : "\n         * Build the waveform as a single {@link VibrationEffect}.\n         *\n         * <p>The {@link WaveformBuilder} object is still valid after this call, so you can\n         * continue adding more primitives to it and generating more {@link VibrationEffect}s by\n         * calling this method again.\n         *\n         * @return The {@link VibrationEffect} resulting from the list of transitions.\n         * @hide\n         ",
    "links" : [ "android.os.VibrationEffect", "WaveformBuilder" ]
  }, {
    "name" : "private void checkVibrationParameter(@NonNull VibrationParameter vibrationParameter, String paramName)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private float extractTargetAmplitude(@Nullable VibrationParameter target1, @Nullable VibrationParameter target2)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private float extractTargetFrequency(@Nullable VibrationParameter target1, @Nullable VibrationParameter target2)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void addTransitionSegment(Duration duration, float targetAmplitude, float targetFrequency)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public WaveformBuilder addTransition(@NonNull Duration duration, @NonNull VibrationParameter targetParameter)", "public WaveformBuilder addTransition(@NonNull Duration duration, @NonNull VibrationParameter targetParameter1, @NonNull VibrationParameter targetParameter2)", "public WaveformBuilder addSustain(@NonNull Duration duration)", "public VibrationEffect build()", "private void checkVibrationParameter(@NonNull VibrationParameter vibrationParameter, String paramName)", "private float extractTargetAmplitude(@Nullable VibrationParameter target1, @Nullable VibrationParameter target2)", "private float extractTargetFrequency(@Nullable VibrationParameter target1, @Nullable VibrationParameter target2)", "private void addTransitionSegment(Duration duration, float targetAmplitude, float targetFrequency)" ],
  "variableNames" : [ "EPSILON", "mSegments", "mLastAmplitude", "mLastFrequencyHz" ]
}