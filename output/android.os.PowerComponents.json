{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/os/PowerComponents.java",
  "packageName" : "android.os",
  "className" : "PowerComponents",
  "comment" : "\n * Contains details of battery attribution data broken down to individual power drain types\n * such as CPU, RAM, GPU etc.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mData",
    "type" : "BatteryConsumer.BatteryConsumerData",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public double getConsumedPower(@NonNull BatteryConsumer.Dimensions dimensions)",
    "returnType" : "double",
    "comment" : "\n     * Total power consumed by this consumer, aggregated over the specified dimensions, in mAh.\n     ",
    "links" : [ ]
  }, {
    "name" : "public double getConsumedPower(@NonNull BatteryConsumer.Key key)",
    "returnType" : "double",
    "comment" : "\n     * Returns the amount of drain attributed to the specified drain type, e.g. CPU, WiFi etc.\n     *\n     * @param key The key of the power component, obtained by calling {@link BatteryConsumer#getKey}\n     *            or {@link BatteryConsumer#getKeys} method.\n     * @return Amount of consumed power in mAh.\n     ",
    "links" : [ "android.os.BatteryConsumer#getKey", "android.os.BatteryConsumer#getKeys" ]
  }, {
    "name" : "public double getConsumedPowerForCustomComponent(int componentId)",
    "returnType" : "double",
    "comment" : "\n     * Returns the amount of drain attributed to the specified custom drain type.\n     *\n     * @param componentId The ID of the custom power component.\n     * @return Amount of consumed power in mAh.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getCustomPowerComponentName(int componentId)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " int getPowerModel(BatteryConsumer.Key key)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public long getUsageDurationMillis(BatteryConsumer.Key key)",
    "returnType" : "long",
    "comment" : "\n     * Returns the amount of time used by the specified component, e.g. CPU, WiFi etc.\n     *\n     * @param key The key of the power component, obtained by calling {@link BatteryConsumer#getKey}\n     *            or {@link BatteryConsumer#getKeys} method.\n     * @return Amount of time in milliseconds.\n     ",
    "links" : [ "android.os.BatteryConsumer#getKey", "android.os.BatteryConsumer#getKeys" ]
  }, {
    "name" : "public long getUsageDurationForCustomComponentMillis(int componentId)",
    "returnType" : "long",
    "comment" : "\n     * Returns the amount of usage time attributed to the specified custom component.\n     *\n     * @param componentId The ID of the custom power component.\n     * @return Amount of time in milliseconds.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void dump(PrintWriter pw, boolean skipEmptyComponents)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean hasStatsProtoData()",
    "returnType" : "boolean",
    "comment" : " Returns whether there are any atoms.proto POWER_COMPONENTS data to write to a proto. ",
    "links" : [ ]
  }, {
    "name" : " void writeStatsProto(@NonNull ProtoOutputStream proto)",
    "returnType" : "void",
    "comment" : " Writes all atoms.proto POWER_COMPONENTS for this PowerComponents to the given proto. ",
    "links" : [ ]
  }, {
    "name" : "private boolean writeStatsProtoImpl(@Nullable ProtoOutputStream proto)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether there are any atoms.proto POWER_COMPONENTS data to write to a proto,\n     * and writes it to the given proto if it is non-null.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void writePowerUsageSlice(ProtoOutputStream proto, int componentId, long powerDeciCoulombs, long durationMs, int processState)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void writePowerComponentUsage(ProtoOutputStream proto, long tag, int componentId, long powerDeciCoulombs, long durationMs)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void writeToXml(TypedXmlSerializer serializer) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void parseXml(TypedXmlPullParser parser, PowerComponents.Builder builder) throws XmlPullParserException, IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public double getConsumedPower(@NonNull BatteryConsumer.Dimensions dimensions)", "public double getConsumedPower(@NonNull BatteryConsumer.Key key)", "public double getConsumedPowerForCustomComponent(int componentId)", "public String getCustomPowerComponentName(int componentId)", " int getPowerModel(BatteryConsumer.Key key)", "public long getUsageDurationMillis(BatteryConsumer.Key key)", "public long getUsageDurationForCustomComponentMillis(int componentId)", "public void dump(PrintWriter pw, boolean skipEmptyComponents)", " boolean hasStatsProtoData()", " void writeStatsProto(@NonNull ProtoOutputStream proto)", "private boolean writeStatsProtoImpl(@Nullable ProtoOutputStream proto)", "private void writePowerUsageSlice(ProtoOutputStream proto, int componentId, long powerDeciCoulombs, long durationMs, int processState)", "private void writePowerComponentUsage(ProtoOutputStream proto, long tag, int componentId, long powerDeciCoulombs, long durationMs)", " void writeToXml(TypedXmlSerializer serializer) throws IOException", " static void parseXml(TypedXmlPullParser parser, PowerComponents.Builder builder) throws XmlPullParserException, IOException" ],
  "variableNames" : [ "mData" ]
}